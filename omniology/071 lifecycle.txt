Lifecycle
ngOnChanges
ngOnInit
ngDoCheck
ngAfterContentInit
ngAfterContentChecked
ngAfterViewInit
ngAfterViewChecked
ngOnDestroy
Called after a bound input property changes
Called once the component is initialized
Called during every change detection run
Called after content (ng-content) has been projected into view
Called every time the projected content has been checked
Called after the component’s view (and child views) has been initialized
Called every time the view (and child views) have been checked
Called once the component is about to be destroyed

Understanding Directives

Attribute vs Structural
Attribute Directives
Structural Directives
Look like a normal HTML Attribute 
(possibly with databinding or event 
binding)
Only affect/ change the element they 
are added to
Look like a normal HTML Attribute but 
have a leading * (for desugaring)
Affect a whole area in the DOM 
(elements get added/ removed)

Services & 
Dependency Injection

What are Services?
Application
AppComponent
UserComponent
AboutComponent
UserDetailComponent
LogService
UserService
log data to console
log data to console
store user data
Centralization
Data Storage

Hierarchical Injector
AppModule
AppComponent
Any other Component
Same Instance of Service is available Application-wide
Same Instance of Service is available for all Components (but not for 
other Services)
Same Instance of Service is available for the Component and all its 
child components

Pipes

Routing

Forms

Two Approaches
Template-Driven
Angular infers the Form Object from 
the DOM
Reactive
Form is created programmatically and 
synchronized with the DOM

Http

Authentication

How does Authentication work?
“Traditional” Web App
SPA
Client (Frontend)
Server (Backend)
Send Auth
Information
Set Session
Cookie
Identify via
Cookie
Server stores the Session!
Client (Frontend)
Server (Backend)
Send Auth
Information
Server doesn’t remember the Client!
Send Token
Authenticate
via Token

Animations

Using Modules & 
Optimizing an Angular 
App

The Idea behind App Modules
Component
Component
Directive
Module

Feature Modules
Component
Component
Directive
AppModule
Feature Module
AppComponent
Component
Directive

Shared Modules
Component
Component
AppModule
FeatureModule1
Component
Component
Directive
Directive
FeatureModule2
Shared Module

Modules and Routing (Lazy Loading)
AppModule
Child Router
Component
Directive
FeatureModule
Root Router
Child Routes
Only load when needed!
(Lazy Loading)

Why Modules?
Don‘t bloat the AppModule
Be clear about Who‘s responsible for What
Allows Lazy Loading of Modules

Modules and Service Injection
AppModule
providers: [LogService]
Feature Module
Lazy Loaded Feature Module
providers: [LogService]
Root Injector
One Instance of LogService
Loaded at Application Launch:
Provided on Root Level
Uses Root Injector

Modules and Service Injection
AppModule
providers: [LogService]
Feature Module
Lazy Loaded Feature Module
providers: [LogService]
providers: [LogService]
Root Injector
One Instance of LogService
Child Injector
One Instance of LogService
Loaded at Application Launch:
Provided on Root Level
Loaded Lazily:
Provided on Module Level only
Enforce "Module Scope" by providing in a Component instead of a Module!

Modules and Service Injection
AppModule
Shared  Module
providers: [LogService]
Feature Module
Lazy Loaded Feature Module
providers: [LogService]
Root Injector
One Instance of LogService
Loaded at Application Launch:
Provided on Root Level
providers: [LogService]
Expected Behavior: 
Lazy Loaded Module uses Root Injector
Child Injector
One Instance of LogService
Real Behavior: 
Lazy Loaded Module uses Child Injector

Modules and Service Injection
AppModule
Shared  Module
providers: [LogService]
Feature Module
Lazy Loaded Feature Module
providers: [LogService]
Root Injector
One Instance of LogService
Loaded at Application Launch:
Provided on Root Level
providers: [LogService]
Expected Behavior: 
Lazy Loaded Module uses Root Injector
Child Injector
One Instance of LogService
Real Behavior: 
Lazy Loaded Module uses Child Injector
Don‘t provide Services in Shared Modules!
Especially not, if you plan to use them in Lazy Loaded 
Modules!

Core Module
AppComponent
Component
AppModule
Component
Component
Directive
Directive
Feature Module
Core Module

Ahead-of-Time Compilation
Just-in-Time Compilation
Ahead-of-Time Compilation
Development
Production
App downloaded in Browser
Angular Parses & Compiles Templates (to 
JavaScript)
Development
Production
App downloaded in Browser
Angular Parses & Compiles Templates (to 
JavaScript)

Advantages of AoT Compilation
Faster Startup sind Parsing and Compilation doesn‘t happen in Browser
Templates get checked during Development
Smaller File Size as unused Features can be stripped out and the Compiler itself isn‘t shipped

Testing

Deployment

Deployment Steps & Things to Keep in Mind
Build your App for Production
Consider AoT Compilation
Set the correct <base> element
For example.com/my-app you should have <base href=“/my-app/”>
Make sure your Server ALWAYS returns index.html
Routes are registered in Angular App, so the server won’t know your 
routes! Return index.html in case of 404 errors!

What are Directives?
Directives are Instructions in the DOM!
<p appTurnGreen>Receives a green background!</p>
@Directive({
selector: '[appTurnGreen]'
})
export class TurnGreenDirective {
…
}

Course Project

Planning the App
Root
Shopping List
Recipe Book
Shopping List
Header
Ingredient
Model
Component
Recipe List
Recipe Item
Recipe Detail
Shopping List Edit
Feature
Recipe

Adding Directives
Root
Shopping List
Recipe Book
Shopping List
Header
Ingredient
Model
Component
Recipe List
Recipe Item
Recipe Detail
Shopping List Item
Feature
Recipe
Dropdown

Adding Services
Root
Shopping List
Recipe Book
Shopping List
Header
Ingredient
Model
Component
Recipe List
Recipe Item
Recipe Detail
Shopping List Item
Feature
Recipe
Service
Recipe
Shopping List

Adding Routing
Root
Shopping List
Recipe Book
Shopping List
Header
Ingredient
Model
Component
Recipe List
Recipe Item
Recipe Detail
Shopping List Item
Feature
Recipe
Service
Recipe
Shopping List
Recipe Edit

Adding Forms
Root
Shopping List
Recipe Book
Shopping List
Header
Ingredient
Model
Component
Recipe List
Recipe Item
Recipe Detail
Shopping List Item
Feature
Recipe
Service
Recipe
Shopping List
Recipe Edit
TD
R
Forms

Adding Modules
Root
Shopping List
Recipe Book
Shopping List
Header
Ingredient
Model
Component
Recipe List
Recipe Item
Recipe Detail
Shopping List Item
Feature
Recipe
Service
Recipe
Shopping List
Recipe Edit
TD
R
Forms

What changed in the Course Update?

Angular 4 is NOT a re-write of Angular 2!
Angular Team switched to Semantic Versioning and renamed Angular 2 to Angular 
(Angular 1 will be AngularJS)
Semantic Versioning
MAJOR.MINOR.BUGFIX
e.g. 2.4.3
e.g. 4.0.1
Angular 4 is only an update to Angular 2 (now only “Angular”)

Basics First
Components, Templates & Databinding
Angular Basics
Course Project
Directives
Course Project
More on Components & Databinding
Course Project
More on Directives
…
Getting Started
Getting Started
…

Debug Eearlier
Directives
Angular Basics
Course Project
Debugging an Angular 2 Application
Course Project
Debugging
…
…
Getting Started
…

Observables
Routing
Routing
Course Project
Course Project
Understanding Observables
…
…
…
…

Improved Content
Tried to sharpen Explanations in all Modules
More Details in Routing, Forms and Optimizations Module
Changed Authentication Module to now use the Recipe Book
The Deployment Section now uses the Recipe Book as an Example
Added a Basics Section to learn the Core Features Faster

How to Continue
"Old Content" is kept around until end of April
(I will inform you before it‘s removed!)
Keep in mind: Angular 2 Syntax = Angular 4 Syntax
The "old Content" is still correct!
You don‘t have to go through the updated Content at all!
Download "old" 
lectures!

How to Continue (if you want to use the new Content)
Getting Started
Components
Course Project
Directives
Course Project
Services
…
Course Roundup
Getting Started
Basics
Course Project
Components
Course Project
Directives
…
Course Roundup
Start at Basics
Have a look at the 
Lecture Titles and 
skip over Lectures 
you‘re not interested in

How to Continue (if you want to use the new Content)
Getting Started
Routing
Course Project
Forms
…
Course Roundup
…
Getting Started
Routing
Course Project
Forms
…
Course Roundup
…
Restart at Routing/Forms/ …
Download latest Updated
Recipe Book Project

How to Continue (if you want to use the new Content)
Getting Started
Routing
Course Project
Forms
…
Course Roundup
…
Getting Started
Routing
Course Project
Forms
…
Course Roundup
…
Go through the updated
Curriculum and 
have a look at the
Sections & Lectures 
you found most important

