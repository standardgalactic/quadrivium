© Fred Baptiste 2018

yield from and send()
yield from establishes a 2-way communication channel
between caller
and subgenerator
via a delegator
à yield from
caller
next
next
yield
delegator
subgenerator
yield
send
send
© Fred Baptiste 2018

Priming the subgenerator coroutine
We know that before we can send() to a coroutine, we have to prime it first
à next(coroutine)
How does this work with yield from?
def delegator():
yield from coro()
def coro():
while True:
received = yield
print(received)
d = delegator()
next(d)
yield from will automatically prime the coroutine when necessary
before we can send to d we have to prime it
What about coro()?
© Fred Baptiste 2018

Sending data to the subgenerator
Once the delegator has been primed
data can be sent to it using send()
def delegator():
yield from coro()
def coro():
while True:
received = yield
print(received)
d = delegator()
next(d)
d.send('python')
à python is printed by coroutine
© Fred Baptiste 2018

Control Flow
delegator
yield from coro()
print('next line of code')
caller
subgenerator
yield
next
delegator is "stuck" here until subgenerator closes
then it resumes running the rest of the code
© Fred Baptiste 2018

Multiple Delegators à pipeline
def coro():
…
yield
…
def gen1():
yield from gen2()
def gen2():
yield from coro()
d = gen1()
gen1
gen2
coro
caller
this can even be recursive
© Fred Baptiste 2018

Code Examples
© Fred Baptiste 2018

