Bugzilla Documentation
Release 5.0.6
The Bugzilla Team
Jan 15, 2023


Contents
1
About This Documentation
1
2
User Guide
3
3
Installation and Maintenance Guide
19
4
Administration Guide
67
5
Integration and Customization Guide
97
6
WebService API Reference
107
i

ii

CHAPTER 1
About This Documentation
This is the documentation for version 5.0 of Bugzilla, a bug-tracking system from Mozilla. Bugzilla is an enterprise-
class piece of software that tracks millions of bugs and issues for thousands of organizations around the world.
The most current version of this document can always be found on the Bugzilla website.
1.1 Evaluating Bugzilla
If you want to try out Bugzilla to see if it meets your needs, you can do so on Landﬁll, our test server. The Bugzilla
FAQ may also be helpful, as it answers a number of questions people sometimes have about whether Bugzilla is for
them.
1.2 Getting More Help
If this document does not answer your questions, we run a Mozilla forum which can be accessed as a newsgroup,
mailing list, or over the web as a Google Group. Please search it ﬁrst, and then ask your question there.
If you need a guaranteed response, commercial support is available for Bugzilla from a number of people and organi-
zations.
1.3 Document Conventions
This document uses the following conventions:
Warning: This is a warning—something you should be aware of.
1

Bugzilla Documentation, Release 5.0.6
Note: This is just a note, for your information.
A ﬁlename or a path to a ﬁlename is displayed like this: /path/to/filename.ext
A command to type in the shell is displayed like this: command --arguments
A sample of code is illustrated like this:
First Line of Code
Second Line of Code
...
This documentation is maintained in reStructured Text format using the Sphinx documentation system. It has recently
been rewritten, so it undoubtedly has bugs. Please ﬁle any you ﬁnd, in the Bugzilla Documentation component in
Mozilla’s installation of Bugzilla. If you also want to make a patch, that would be wonderful. Changes are best
submitted as diffs, attached to a bug. There is a Style Guide to help you write any new text and markup.
1.4 License
Bugzilla is free and open source software, which means (among other things) that you can download it, install it, and
run it for any purpose whatsoever without the need for license or payment. Isn’t that refreshing?
Bugzilla’s code is made available under the Mozilla Public License 2.0 (MPL), speciﬁcally the variant which is In-
compatible with Secondary Licenses. However, again, if you only want to install and run Bugzilla, you don’t need to
worry about that; it’s only relevant if you redistribute the code or any changes you make.
Bugzilla’s documentation is made available under the Creative Commons CC-BY-SA International License 4.0, or any
later version.
1.5 Credits
The people listed below have made signiﬁcant contributions to the creation of this documentation:
Andrew Pearson, Ben FrantzDale, Byron Jones, Dave Lawrence, Dave Miller, Dawn Endico, Eric Hanson, Gervase
Markham, Jacob Steenhagen, Joe Robins, Kevin Brannen, Martin Wulffeld, Matthew P. Barnson, Ron Teitelbaum,
Shane Travis, Spencer Smith, Tara Hernandez, Terry Weissman, Vlad Dascalu, Zach Lipton.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
2
Chapter 1. About This Documentation

CHAPTER 2
User Guide
2.1 Creating an Account
If you want to use a particular installation of Bugzilla, ﬁrst you need to create an account. Ask the administrator
responsible for your installation for the URL you should use to access it. If you’re test-driving Bugzilla, you can use
one of the installations on Landﬁll.
The process of creating an account is similar to many other websites.
1. On the home page, click the New Account link in the header. Enter your email address, then click the Send
button.
Note: If the New Account link is not available, this means that the administrator of the installation has disabled
self-registration. Speak to the administrator to ﬁnd out how to get an account.
2. Within moments, you should receive an email to the address you provided, which contains your login name
(generally the same as the email address), and a URL to click to conﬁrm your registration.
3. Once you conﬁrm your registration, Bugzilla will ask you your real name (optional, but recommended) and ask
you to choose a password. Depending on how your Bugzilla is conﬁgured, there may be minimum complexity
requirements for the password.
4. Now all you need to do is to click the Log In link in the header or footer, enter your email address and the
password you just chose into the login form, and click the Log in button.
You are now logged in. Bugzilla uses cookies to remember you are logged in, so, unless you have cookies disabled or
your IP address changes, you should not have to log in again during your session.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3

Bugzilla Documentation, Release 5.0.6
2.2 Filing a Bug
2.2.1 Reporting a New Bug
Years of bug writing experience has been distilled for your reading pleasure into the Bug Writing Guidelines. While
some of the advice is Mozilla-speciﬁc, the basic principles of reporting Reproducible, Speciﬁc bugs and isolating the
Product you are using, the Version of the Product, the Component which failed, the Hardware Platform, and Operating
System you were using at the time of the failure go a long way toward ensuring accurate, responsible ﬁxes for the bug
that bit you.
Note: If you want to ﬁle a test bug to see how Bugzilla works, you can do it on one of our test installations on Landﬁll.
Please don’t do it on anyone’s production Bugzilla installation.
The procedure for ﬁling a bug is as follows:
1. Click the New link available in the header or footer of pages, or the File a Bug link on the home page.
2. First, you have to select the product in which you found a bug.
3. You now see a form where you can specify the component (part of the product which is affected by the bug you
discovered; if you have no idea, just select General if such a component exists), the version of the program you
were using, the operating system and platform your program is running on and the severity of the bug (if the bug
you found crashes the program, it’s probably a major or a critical bug; if it’s a typo somewhere, that’s something
pretty minor; if it’s something you would like to see implemented, then that’s an enhancement).
4. You also need to provide a short but descriptive summary of the bug you found. “My program is crashing all the
time” is a very poor summary and doesn’t help developers at all. Try something more meaningful or your bug
will probably be ignored due to a lack of precision. In the Description, give a detailed list of steps to reproduce
the problem you encountered. Try to limit these steps to a minimum set required to reproduce the problem. This
will make the life of developers easier, and the probability that they consider your bug in a reasonable timeframe
will be much higher.
Note: Try to make sure that everything in the Summary is also in the Description. Summaries are often updated
and this will ensure your original information is easily accessible.
5. As you ﬁle the bug, you can also attach a document (testcase, patch, or screenshot of the problem).
6. Depending on the Bugzilla installation you are using and the product in which you are ﬁling the bug, you can
also request developers to consider your bug in different ways (such as requesting review for the patch you just
attached, requesting your bug to block the next release of the product, and many other product-speciﬁc requests).
7. Now is a good time to read your bug report again. Remove all misspellings; otherwise, your bug may not be
found by developers running queries for some speciﬁc words, and so your bug would not get any attention.
Also make sure you didn’t forget any important information developers should know in order to reproduce the
problem, and make sure your description of the problem is explicit and clear enough. When you think your bug
report is ready to go, the last step is to click the Submit Bug button to add your report into the database.
2.2.2 Clone an Existing Bug
Bugzilla allows you to “clone” an existing bug. The newly created bug will inherit most settings from the old bug.
This allows you to track similar concerns that require different handling in a new bug. To use this, go to the bug that
you want to clone, then click the Clone This Bug link on the bug page. This will take you to the Enter Bug page that
is ﬁlled with the values that the old bug has. You can then change the values and/or text if needed.
4
Chapter 2. User Guide

Bugzilla Documentation, Release 5.0.6
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
2.3 Understanding a Bug
The core of Bugzilla is the screen which displays a particular bug. Note that the labels for most ﬁelds are hyperlinks;
clicking them will take you to context-sensitive help on that particular ﬁeld. Fields marked * may not be present on
every installation of Bugzilla.
Summary: A one-sentence summary of the problem, displayed in the header next to the bug number.
Status (and Resolution): These deﬁne exactly what state the bug is in—from not even being conﬁrmed as a bug,
through to being ﬁxed and the ﬁx conﬁrmed by Quality Assurance. The different possible values for Status and
Resolution on your installation should be documented in the context-sensitive help for those items.
Alias: A unique short text name for the bug, which can be used instead of the bug number.
Product and Component: Bugs are divided up by Product and Component, with a Product having one or more Com-
ponents in it.
Version: The “Version” ﬁeld usually contains the numbers or names of released versions of the product. It is used to
indicate the version(s) affected by the bug report.
Hardware (Platform and OS): These indicate the computing environment where the bug was found.
Importance (Priority and Severity): The Priority ﬁeld is used to prioritize bugs, either by the assignee, or someone
else with authority to direct their time such as a project manager. It’s a good idea not to change this on other
people’s bugs. The default values are P1 to P5.
The Severity ﬁeld indicates how severe the problem is—from blocker (“application unusable”) to trivial (“minor
cosmetic issue”). You can also use this ﬁeld to indicate whether a bug is an enhancement request.
*Target Milestone: A future version by which the bug is to be ﬁxed. e.g. The Bugzilla Project’s milestones for future
Bugzilla versions are 4.4, 5.0, 6.0, etc. Milestones are not restricted to numbers, though—you can use any text
strings, such as dates.
Assigned To: The person responsible for ﬁxing the bug.
*QA Contact: The person responsible for quality assurance on this bug.
URL: A URL associated with the bug, if any.
*Whiteboard: A free-form text area for adding short notes and tags to a bug.
Keywords: The administrator can deﬁne keywords which you can use to tag and categorise bugs—e.g. crash or
regression.
Personal Tags: Unlike Keywords which are global and visible by all users, Personal Tags are personal and can only
be viewed and edited by their author. Editing them won’t send any notiﬁcations to other users. Use them to tag
and keep track of sets of bugs that you personally care about, using your own classiﬁcation system.
Dependencies (Depends On and Blocks): If this bug cannot be ﬁxed unless other bugs are ﬁxed (depends on), or this
bug stops other bugs being ﬁxed (blocks), their numbers are recorded here.
Clicking the Dependency tree link shows the dependency relationships of the bug as a tree structure. You can
change how much depth to show, and you can hide resolved bugs from this page. You can also collapse/expand
dependencies for each non-terminal bug on the tree view, using the [-]/[+] buttons that appear before the sum-
mary.
Reported: The person who ﬁled the bug, and the date and time they did it.
2.3. Understanding a Bug
5

Bugzilla Documentation, Release 5.0.6
Modiﬁed: The date and time the bug was last changed.
CC List: A list of people who get mail when the bug changes, in addition to the Reporter, Assignee and QA Contact
(if enabled).
Ignore Bug Mail: Set this if you want never to get bugmail from this bug again. See also Email Preferences.
*See Also: Bugs, in this Bugzilla, other Bugzillas, or other bug trackers, that are related to this one.
Flags: A ﬂag is a kind of status that can be set on bugs or attachments to indicate that the bugs/attachments are in a
certain state. Each installation can deﬁne its own set of ﬂags that can be set on bugs or attachments. See Flags.
*Time Tracking: This form can be used for time tracking. To use this feature, you have to be a member of the group
speciﬁed by the timetrackinggroup parameter. See Time Tracking for more information.
Orig. Est.: This ﬁeld shows the original estimated time.
Current Est.: This ﬁeld shows the current estimated time. This number is calculated from Hours Worked
and Hours Left.
Hours Worked: This ﬁeld shows the number of hours worked.
Hours Left: This ﬁeld shows the Current Est. - Hours Worked. This value + Hours Worked will
become the new Current Est.
%Complete: This ﬁeld shows what percentage of the task is complete.
Gain: This ﬁeld shows the number of hours that the bug is ahead of the Orig. Est..
Deadline: This ﬁeld shows the deadline for this bug.
Attachments: You can attach ﬁles (e.g. test cases or patches) to bugs. If there are any attachments, they are listed in
this section. See Attachments for more information.
Additional Comments: You can add your two cents to the bug discussion here, if you have something worthwhile to
say.
2.3.1 Flags
Flags are a way to attach a speciﬁc status to a bug or attachment, either + or -. The meaning of these symbols depends
on the name of the ﬂag itself, but contextually they could mean pass/fail, accept/reject, approved/denied, or even a
simple yes/no. If your site allows requestable ﬂags, then users may set a ﬂag to ? as a request to another user that they
look at the bug/attachment and set the ﬂag to its correct status.
A set ﬂag appears in bug reports and on “edit attachment” pages with the abbreviated username of the user who set the
ﬂag prepended to the ﬂag name. For example, if Jack sets a “review” ﬂag to +, it appears as Jack: review [ + ].
A requested ﬂag appears with the user who requested the ﬂag prepended to the ﬂag name and the user who has been
requested to set the ﬂag appended to the ﬂag name within parentheses. For example, if Jack asks Jill for review, it
appears as Jack: review [ ? ] (Jill).
You can browse through open requests made of you and by you by selecting My Requests from the footer. You can
also look at open requests limited by other requesters, requestees, products, components, and ﬂag names. Note that
you can use ‘-’ for requestee to specify ﬂags with no requestee set.
A Simple Example
A developer might want to ask their manager, “Should we ﬁx this bug before we release version 2.0?” They might
want to do this for a lot of bugs, so they decide to streamline the process. So:
6
Chapter 2. User Guide

Bugzilla Documentation, Release 5.0.6
1. The Bugzilla administrator creates a ﬂag type called blocking2.0 for bugs in your product. It shows up on the
Show Bug screen as the text blocking2.0 with a drop-down box next to it. The drop-down box contains four
values: an empty space, ?, -, and +.
2. The developer sets the ﬂag to ?.
3. The manager sees the blocking2.0 ﬂag with a ? value.
4. If the manager thinks the feature should go into the product before version 2.0 can be released, they set the ﬂag
to +. Otherwise, they set it to -.
5. Now, every Bugzilla user who looks at the bug knows whether or not the bug needs to be ﬁxed before release of
version 2.0.
About Flags
Flags can have four values:
? A user is requesting that a status be set. (Think of it as ‘A question is being asked’.)
- The status has been set negatively. (The question has been answered no.)
+ The status has been set positively. (The question has been answered yes.)
_ unset actually shows up as a blank space. This just means that nobody has expressed an opinion (or asked
someone else to express an opinion) about the matter covered by this ﬂag.
Flag Requests
If a ﬂag has been deﬁned as requestable, and a user has enough privileges to request it (see below), the user can set
the ﬂag’s status to ?. This status indicates that someone (a.k.a. “the requester”) is asking someone else to set the ﬂag
to either + or -.
If a ﬂag has been deﬁned as speciﬁcally requestable, a text box will appear next to the ﬂag into which the requester
may enter a Bugzilla username. That named person (a.k.a. “the requestee”) will receive an email notifying them of
the request, and pointing them to the bug/attachment in question.
If a ﬂag has not been deﬁned as speciﬁcally requestable, then no such text box will appear. A request to set this ﬂag
cannot be made of any speciﬁc individual; these requests are open for anyone to answer. In Bugzilla this is known as
“asking the wind”. A requester may ask the wind on any ﬂag simply by leaving the text box blank.
Attachment Flags
There are two types of ﬂags: bug ﬂags and attachment ﬂags.
Attachment ﬂags are used to ask a question about a speciﬁc attachment on a bug.
Many Bugzilla installations use this to request that one developer review another developer’s code before they check
it in. They attach the code to a bug report, and then set a ﬂag on that attachment called review to review? re-
viewer@example.com. reviewer@example.com is then notiﬁed by email that they have to check out that attachment
and approve it or deny it.
For a Bugzilla user, attachment ﬂags show up in three places:
1. On the list of attachments in the Show Bug screen, you can see the current state of any ﬂags that have been set
to ?, +, or -. You can see who asked about the ﬂag (the requester), and who is being asked (the requestee).
2. When you edit an attachment, you can see any settable ﬂag, along with any ﬂags that have already been set. The
Edit Attachment screen is where you set ﬂags to ?, -, +, or unset them.
2.3. Understanding a Bug
7

Bugzilla Documentation, Release 5.0.6
3. Requests are listed in the Request Queue, which is accessible from the My Requests link (if you are logged in)
or Requests link (if you are logged out) visible on all pages.
Bug Flags
Bug ﬂags are used to set a status on the bug itself. You can see Bug Flags in the Show Bug and Requests screens, as
described above.
Only users with enough privileges (see below) may set ﬂags on bugs. This doesn’t necessarily include the assignee,
reporter, or users with the editbugs permission.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
2.4 Editing a Bug
2.4.1 Attachments
Attachments are used to attach relevant ﬁles to bugs - patches, screenshots, test cases, debugging aids or logs, or
anything else binary or too large to ﬁt into a comment.
You should use attachments, rather than comments, for large chunks of plain text data, such as trace, debugging output
ﬁles, or log ﬁles. That way, it doesn’t bloat the bug for everyone who wants to read it, and cause people to receive
large, useless mails.
You should make sure to trim screenshots. There’s no need to show the whole screen if you are pointing out a single-
pixel problem.
Bugzilla stores and uses a Content-Type for each attachment (e.g. text/html). To download an attachment as a different
Content-Type (e.g. application/xhtml+xml), you can override this using a ‘content_type’ parameter on the URL, e.g.
&content_type=text/plain.
Also, you can enter the URL pointing to the attachment instead of uploading the attachment itself. For example, this
is useful if you want to point to an external application, a website or a very large ﬁle.
It’s also possible to create an attachment by pasting text directly in a text ﬁeld; Bugzilla will convert it into an attach-
ment. This is pretty useful when you are copying and pasting, to avoid the extra step of saving the text in a temporary
ﬁle.
2.4.2 Flags
To set a ﬂag, select either + or - from the drop-down menu next to the name of the ﬂag in the Flags list. The meaning
of these values are ﬂag-speciﬁc and thus cannot be described in this documentation, but by way of example, setting a
ﬂag named review + may indicate that the bug/attachment has passed review, while setting it to - may indicate that the
bug/attachment has failed review.
To unset a ﬂag, click its drop-down menu and select the blank value. Note that marking an attachment as obsolete
automatically cancels all pending requests for the attachment.
If your administrator has enabled requests for a ﬂag, request a ﬂag by selecting ? from the drop-down menu and then
entering the username of the user you want to set the ﬂag in the text ﬁeld next to the menu.
8
Chapter 2. User Guide

Bugzilla Documentation, Release 5.0.6
2.4.3 Time Tracking
Users who belong to the group speciﬁed by the timetrackinggroup parameter have access to time-related ﬁelds.
Developers can see deadlines and estimated times to ﬁx bugs, and can provide time spent on these bugs. Users who
do not belong to this group can only see the deadline but not edit it. Other time-related ﬁelds remain invisible to them.
At any time, a summary of the time spent by developers on bugs is accessible either from bug lists when clicking
the Time Summary button or from individual bugs when clicking the Summarize time link in the time tracking
table. The summarize_time.cgi page lets you view this information either per developer or per bug and can be
split on a month basis to have greater details on how time is spent by developers.
As soon as a bug is marked as RESOLVED, the remaining time expected to ﬁx the bug is set to zero. This lets QA
people set it again for their own usage, and it will be set to zero again when the bug is marked as VERIFIED.
2.4.4 Life Cycle of a Bug
The life cycle of a bug, also known as workﬂow, is customizable to match the needs of your organization (see Work-
ﬂow). The image below contains a graphical representation of the default workﬂow using the default bug statuses. If
you wish to customize this image for your site, the diagram ﬁle is available in Dia’s native XML format.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
2.4. Editing a Bug
9

Bugzilla Documentation, Release 5.0.6
2.5 Finding Bugs
Bugzilla has a number of different search options.
Note: Bugzilla queries are case-insensitive and accent-insensitive when used with either MySQL or Oracle databases.
When using Bugzilla with PostgreSQL, however, some queries are case sensitive. This is due to the way PostgreSQL
handles case and accent sensitivity.
2.5.1 Quicksearch
Quicksearch is a single-text-box query tool. You’ll ﬁnd it in Bugzilla’s header or footer.
Quicksearch uses metacharacters to indicate what is to be searched. For example, typing
foo|bar
into Quicksearch would search for “foo” or “bar” in the summary and status whiteboard of a bug; adding
:BazProduct
would search only in that product.
You can also use it to go directly to a bug by entering its number or its alias.
2.5.2 Simple Search
Simple Search is good for ﬁnding one particular bug. It works like internet search engines - just enter some keywords
and off you go.
2.5.3 Advanced Search
The Advanced Search page is used to produce a list of all bugs ﬁtting exact criteria. You can play with it on Landﬁll.
Advanced Search has controls for selecting different possible values for all of the ﬁelds in a bug, as described above.
For some ﬁelds, multiple values can be selected. In those cases, Bugzilla returns bugs where the content of the ﬁeld
matches any one of the selected values. If none is selected, then the ﬁeld can take any value.
After a search is run, you can save it as a Saved Search, which will appear in the page footer. If you are in the group
deﬁned by the “querysharegroup” parameter, you may share your queries with other users; see Saved Searches for
more details.
2.5.4 Custom Search
Highly advanced querying is done using the Custom Search feature of the Advanced Search page.
The search criteria here further restrict the set of results returned by a query, over and above those deﬁned in the ﬁelds
at the top of the page. It is thereby possible to search for bugs based on elaborate combinations of criteria.
The simplest custom searches have only one term. These searches permit the selected ﬁeld to be compared using a
selectable operator to a speciﬁed value. Much of this could be reproduced using the standard ﬁelds. However, you
can then combine terms using “Match ANY” or “Match ALL”, using parentheses for combining and priority, in order
to construct searches of almost arbitrary complexity.
There are three ﬁelds in each row (known as a “term”) of a custom search:
10
Chapter 2. User Guide

Bugzilla Documentation, Release 5.0.6
• Field: the name of the ﬁeld being searched
• Operator: the comparison operator
• Value: the value to which the ﬁeld is being compared
The list of available ﬁelds contains all the ﬁelds deﬁned for a bug, including any custom ﬁelds, and then also some
pseudoﬁelds like Assignee Real Name, Days Since Bug Changed, Time Since Assignee Touched and other things it
may be useful to search on.
There are a wide range of operators available, not all of which may make sense for a particular ﬁeld. There are various
string-matching operations (including regular expressions), numerical comparisons (which also work for dates), and
also the ability to search for change information—when a ﬁeld changed, what it changed from or to, and who did it.
There are special operators for is empty and is not empty, because Bugzilla can’t tell the difference between a value
ﬁeld left blank on purpose and one left blank by accident.
You can have an arbitrary number of rows, and the dropdown box above them deﬁnes how they relate—Match ALL
of the following separately, Match ANY of the following separately, or Match ALL of the following against the same
ﬁeld. The difference between the ﬁrst and the third can be illustrated with a comment search. If you have a search:
Comment
contains the string
"Fred"
Comment
contains the string
"Barney"
then under the ﬁrst regime (match separately) the search would return bugs where “Fred” appeared in one comment
and “Barney” in the same or any other comment, whereas under the second (match against the same ﬁeld), both strings
would need to occur in exactly the same comment.
Advanced Features
If you click Show Advanced Features, then more capabilities appear. You can negate any row with a checkbox (see
below) and also group lines of the search with parentheses to determine how different search terms relate. Within each
bracketed set, you get the choice of combining them using ALL (i.e. AND) or ANY (i.e. OR).
Negation
At ﬁrst glance, negation seems redundant. Rather than searching for:
NOT ( summary
contains the string
"foo" )
one could search for:
summary
does not contain the string
"foo"
However, the search:
CC
does not contain the string
"@mozilla.org"
would ﬁnd every bug where anyone on the CC list did not contain “@mozilla.org” while:
NOT ( CC
contains the string
"@mozilla.org" )
would ﬁnd every bug where there was nobody on the CC list who did contain the string. Similarly, the use of negation
also permits complex expressions to be built using terms OR’d together and then negated. Negation permits queries
such as:
2.5. Finding Bugs
11

Bugzilla Documentation, Release 5.0.6
NOT ( ( product
equals
"Update" )
OR
( component
equals
"Documentation" )
)
to ﬁnd bugs that are neither in the Update product or in the Documentation component or:
NOT ( ( commenter
equals
"%assignee%" )
OR
(component
equals
"Documentation" )
)
to ﬁnd non-documentation bugs on which the assignee has never commented.
Pronoun Substitution
Sometimes, a query needs to compare a user-related ﬁeld (such as Reporter) with a role-speciﬁc user (such as the user
running the query or the user to whom each bug is assigned). For example, you may want to ﬁnd all bugs that are
assigned to the person who reported them.
When the Custom Search operator is either equals or notequals, the value can be “%reporter%”, “%assignee%”,
“%qacontact%”, or “%user%”. These are known as “pronouns”. The user pronoun refers to the user who is executing
the query or, in the case of whining reports, the user who will be the recipient of the report. The reporter, assignee,
and qacontact pronouns refer to the corresponding ﬁelds in the bug.
This feature also lets you search by a user’s group memberships. If the operator is either equals, notequals or anyexact,
you can search for whether a user belongs (or not) to the speciﬁed group. The group name must be entered using
“%group.foo%” syntax, where “foo” is the group name. So if you are looking for bugs reported by any user being in
the “editbugs” group, then you can use:
reporter
equals
"%group.editbugs%"
2.5.5 Bug Lists
The result of a search is a list of matching bugs.
The format of the list is conﬁgurable. For example, it can be sorted by clicking the column headings. Other useful
features can be accessed using the links at the bottom of the list:
Long Format: this gives you a large page with a non-editable summary of the ﬁelds of each bug.
XML (icon): get the buglist in an XML format.
CSV (icon): get the buglist as comma-separated values, for import into e.g. a spreadsheet.
Feed (icon): get the buglist as an Atom feed. Copy this link into your favorite feed reader. If you are using Firefox,
you can also save the list as a live bookmark by clicking the live bookmark icon in the status bar. To limit the
number of bugs in the feed, add a limit=n parameter to the URL.
iCalendar (icon): Get the buglist as an iCalendar ﬁle. Each bug is represented as a to-do item in the imported
calendar.
Change Columns: change the bug attributes which appear in the list.
Change Several Bugs At Once: If your account is sufﬁciently empowered, and more than one bug appears in the
bug list, this link is displayed and lets you easily make the same change to all the bugs in the list - for example,
changing their assignee.
12
Chapter 2. User Guide

Bugzilla Documentation, Release 5.0.6
Send Mail to Bug Assignees: If more than one bug appear in the bug list and there are at least two distinct bug
assignees, this links is displayed which lets you easily send a mail to the assignees of all bugs on the list.
Edit Search: If you didn’t get exactly the results you were looking for, you can return to the Query page through this
link and make small revisions to the query you just made so you get more accurate results.
Remember Search As: You can give a search a name and remember it; a link will appear in your page footer giving
you quick access to run it again later.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
2.6 Reports and Charts
As well as the standard buglist, Bugzilla has two more ways of viewing sets of bugs. These are the reports (which give
different views of the current state of the database) and charts (which plot the changes in particular sets of bugs over
time).
2.6.1 Reports
A report is a view of the current state of the bug database.
You can run either an HTML-table-based report, or a graphical line/pie/bar-chart-based one. The two have different
pages to deﬁne them but are close cousins - once you’ve deﬁned and viewed a report, you can switch between any of
the different views of the data at will.
Both report types are based on the idea of deﬁning a set of bugs using the standard search interface and then choosing
some aspect of that set to plot on the horizontal and/or vertical axes. You can also get a form of 3-dimensional report
by choosing to have multiple images or tables.
So, for example, you could use the search form to choose “all bugs in the WorldControl product” and then plot their
severity against their component to see which component had had the largest number of bad bugs reported against it.
Once you’ve deﬁned your parameters and hit Generate Report, you can switch between HTML, CSV, Bar, Line and
Pie. (Note: Pie is only available if you didn’t deﬁne a vertical axis, as pie charts don’t have one.) The other controls
are fairly self-explanatory; you can change the size of the image if you ﬁnd text is overwriting other text, or the bars
are too thin to see.
2.6.2 Charts
A chart is a view of the state of the bug database over time.
Bugzilla currently has two charting systems - Old Charts and New Charts. Old Charts have been part of Bugzilla for a
long time; they chart each status and resolution for each product, and that’s all. They are deprecated, and going away
soon - we won’t say any more about them. New Charts are the future - they allow you to chart anything you can deﬁne
as a search.
Note: Both charting forms require the administrator to set up the data-gathering script. If you can’t see any charts,
ask them whether they have done so.
An individual line on a chart is called a data set. All data sets are organised into categories and subcategories. The data
sets that Bugzilla deﬁnes automatically use the Product name as a Category and Component names as Subcategories,
but there is no need for you to follow that naming scheme with your own charts if you don’t want to.
2.6. Reports and Charts
13

Bugzilla Documentation, Release 5.0.6
Data sets may be public or private. Everyone sees public data sets in the list, but only their creator sees private data
sets. Only administrators can make data sets public. No two data sets, even two private ones, can have the same set
of category, subcategory and name. So if you are creating private data sets, one idea is to have the Category be your
username.
Creating Charts
You create a chart by selecting a number of data sets from the list and pressing Add To List for each. In the List Of
Data Sets To Plot, you can deﬁne the label that data set will have in the chart’s legend and also ask Bugzilla to Sum a
number of data sets (e.g. you could Sum data sets representing RESOLVED, VERIFIED and CLOSED in a particular
product to get a data set representing all the resolved bugs in that product.)
If you’ve erroneously added a data set to the list, select it using the checkbox and click Remove. Once you add more
than one data set, a Grand Total line automatically appears at the bottom of the list. If you don’t want this, simply
remove it as you would remove any other line.
You may also choose to plot only over a certain date range, and to cumulate the results, that is, to plot each one using
the previous one as a baseline so the top line gives a sum of all the data sets. It’s easier to try than to explain :-)
Once a data set is in the list, you can also perform certain actions on it. For example, you can edit the data set’s
parameters (name, frequency etc.) if it’s one you created or if you are an administrator.
Once you are happy, click Chart This List to see the chart.
Creating New Data Sets
You may also create new data sets of your own. To do this, click the create a new data set link on the Create Chart
page. This takes you to a search-like interface where you can deﬁne the search that Bugzilla will plot. At the bottom
of the page, you choose the category, sub-category and name of your new data set.
If you have sufﬁcient permissions, you can make the data set public, and reduce the frequency of data collection to
less than the default of seven days.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
2.7 Pro Tips
This section distills some Bugzilla tips and best practices that have been developed.
2.7.1 Autolinkiﬁcation
Bugzilla comments are plain text - so typing <U> will produce less-than, U, greater-than rather than underlined text.
However, Bugzilla will automatically make hyperlinks out of certain sorts of text in comments. For example, the
text http://www.bugzilla.org will be turned into a link: http://www.bugzilla.org. Other strings which get
linkiﬁed in the obvious manner are:
• bug 12345
• bugs 123, 456, 789
• comment 7
• comments 1, 2, 3, 4
14
Chapter 2. User Guide

Bugzilla Documentation, Release 5.0.6
• bug 23456, comment 53
• attachment 4321
• mailto:george@example.com
• george@example.com
• ftp://ftp.mozilla.org
• Most other sorts of URL
A corollary here is that if you type a bug number in a comment, you should put the word “bug” before it, so it gets
autolinkiﬁed for the convenience of others.
2.7.2 Comments
If you are changing the ﬁelds on a bug, only comment if either you have something pertinent to say or Bugzilla requires
it. Otherwise, you may spam people unnecessarily with bugmail. To take an example: a user can set up their account
to ﬁlter out messages where someone just adds themselves to the CC ﬁeld of a bug (which happens a lot). If you come
along, add yourself to the CC ﬁeld, and add a comment saying “Adding self to CC”, then that person gets a pointless
piece of mail they would otherwise have avoided.
Don’t use sigs in comments. Signing your name (“Bill”) is acceptable, if you do it out of habit, but full mail/news-style
four line ASCII art creations are not.
If you feel a bug you ﬁled was incorrectly marked as a DUPLICATE of another, please question it in your bug, not the
bug it was duped to. Feel free to CC the person who duped it if they are not already CCed.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
2.8 User Preferences
Once logged in, you can customize various aspects of Bugzilla via the “Preferences” link in the page footer. The
preferences are split into a number of tabs, detailed in the sections below.
2.8.1 General Preferences
This tab allows you to change several default settings of Bugzilla. Administrators have the power to remove prefer-
ences from this list, so you may not see all the preferences available.
Each preference should be self-explanatory.
2.8.2 Email Preferences
This tab allows you to enable or disable email notiﬁcation on speciﬁc events.
In general, users have almost complete control over how much (or how little) email Bugzilla sends them. If you want
to receive the maximum amount of email possible, click the Enable All Mail button. If you don’t want to receive
any email from Bugzilla at all, click the Disable All Mail button.
2.8. User Preferences
15

Bugzilla Documentation, Release 5.0.6
Note:
A Bugzilla administrator can stop a user from receiving bugmail by clicking the Bugmail Disabled
checkbox when editing the user account. This is a drastic step best taken only for disabled accounts, as it overrides the
user’s individual mail preferences.
There are two global options – Email me when someone asks me to set a flag and Email me
when someone sets a flag I asked for. These deﬁne how you want to receive bugmail with regards
to ﬂags. Their use is quite straightforward: enable the checkboxes if you want Bugzilla to send you mail under either
of the above conditions.
If you’d like to set your bugmail to something besides ‘Completely ON’ and ‘Completely OFF’, the Field/
recipient specific options table allows you to do just that. The rows of the table deﬁne events that can
happen to a bug – things like attachments being added, new comments being made, the priority changing, etc. The
columns in the table deﬁne your relationship with the bug - reporter, assignee, QA contact (if enabled) or CC list
member.
To ﬁne-tune your bugmail, decide the events for which you want to receive bugmail; then decide if you want to
receive it all the time (enable the checkbox for every column) or only when you have a certain relationship with a bug
(enable the checkbox only for those columns). For example, if you didn’t want to receive mail when someone added
themselves to the CC list, you could uncheck all the boxes in the CC Field Changes line. As another example, if
you never wanted to receive email on bugs you reported unless the bug was resolved, you would uncheck all boxes in
the Reporter column except for the one on the The bug is resolved or verified row.
Note: Bugzilla adds the X-Bugzilla-Reason header to all bugmail it sends, describing the recipient’s relation-
ship (AssignedTo, Reporter, QAContact, CC, or Voter) to the bug. This header can be used to do further client-side
ﬁltering.
Bugzilla has a feature called User Watching. When you enter one or more comma-delineated user accounts
(usually email addresses) into the text entry box, you will receive a copy of all the bugmail those users are sent
(security settings permitting). This powerful functionality enables seamless transitions as developers change projects
or users go on holiday.
Each user listed in the Users watching you ﬁeld has you listed in their Users to watch list and can get
bugmail according to your relationship to the bug and their Field/recipient specific options setting.
Lastly, you can deﬁne a list of bugs on which you no longer wish to receive any email, ever. (You can also add bugs
to this list individually by checking the “Ignore Bug Mail” checkbox on the bug page for that bug.) This is useful for
ignoring bugs where you are the reporter, as that’s a role it’s not possible to stop having.
2.8.3 Saved Searches
On this tab you can view and run any Saved Searches that you have created, and any Saved Searches that other
members of the group deﬁned in the querysharegroup parameter have shared. Saved Searches can be added to the
page footer from this screen. If somebody is sharing a Search with a group they are allowed to assign users to, the
sharer may opt to have the Search show up in the footer of the group’s direct members by default.
2.8.4 Account Information
On this tab, you can change your basic account information, including your password, email address and real name. For
security reasons, in order to change anything on this page you must type your current password into the Password
ﬁeld at the top of the page. If you attempt to change your email address, a conﬁrmation email is sent to both the old
and new addresses with a link to use to conﬁrm the change. This helps to prevent account hijacking.
16
Chapter 2. User Guide

Bugzilla Documentation, Release 5.0.6
2.8.5 API Keys
API keys allow you to give a “token” to some external software so it can log in to the WebService API as you without
knowing your password. You can then revoke that token if you stop using the web service, and you don’t need to
change your password everywhere.
You can create more than one API key if required. Each API key has an optional description which can help you
record what it is used for.
On this page, you can unrevoke, revoke and change the description of existing API keys for your login. A revoked key
means that it cannot be used. The description is optional and purely for your information.
You can also create a new API key by selecting the checkbox under the ‘New API key’ section of the page.
2.8.6 Permissions
This is a purely informative page which outlines your current permissions on this installation of Bugzilla.
A complete list of permissions in a default install of Bugzilla is below. Your administrator may have deﬁned other
permissions. Only users with editusers privileges can change the permissions of other users.
admin Indicates user is an Administrator.
bz_canusewhineatothers Indicates user can conﬁgure whine reports for other users.
bz_canusewhines Indicates user can conﬁgure whine reports for self.
bz_quip_moderators Indicates user can moderate quips.
bz_sudoers Indicates user can perform actions as other users.
bz_sudo_protect Indicates user cannot be impersonated by other users.
canconﬁrm Indicates user can conﬁrm a bug or mark it a duplicate.
creategroups Indicates user can create and destroy groups.
editbugs Indicates user can edit all bug ﬁelds.
editclassiﬁcations Indicates user can create, destroy and edit classiﬁcations.
editcomponents Indicates user can create, destroy and edit products, components, versions, milestones and ﬂag types.
editkeywords Indicates user can create, destroy and edit keywords.
editusers Indicates user can create, disable and edit users.
tweakparams Indicates user can change Parameters.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
2.9 Installed Extensions
Bugzilla can be enhanced using extensions (see Extensions). If an extension comes with documentation in the appro-
priate format, and you build your own copy of the Bugzilla documentation using makedocs.pl, then the documen-
tation for your installed extensions will show up here.
Your Bugzilla installation has the following extensions available (as of the last time you compiled the documentation):
2.9. Installed Extensions
17

Bugzilla Documentation, Release 5.0.6
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
18
Chapter 2. User Guide

CHAPTER 3
Installation and Maintenance Guide
Note: If you just want to use Bugzilla, you do not need to install it. None of this chapter is relevant to you. Ask your
Bugzilla administrator for the URL to access it from your web browser. You may want to read the User Guide.
Bugzilla can be installed under Linux, Windows, Mac OS X, and perhaps other operating systems. However, if you
are setting it up on a dedicated machine and you have control of the operating system to use, the Bugzilla team
wholeheartedly recommends Linux as an extremely versatile, stable, and robust operating system that provides an
ideal environment for Bugzilla. In that case, you may want to read the Quick Start instructions.
3.1 Quick Start (Ubuntu Linux 22.04)
This quick start guide makes installing Bugzilla as simple as possible for those who are able to choose their environ-
ment. It creates a system using Ubuntu Linux 22.04 LTS, Apache and MariaDB. It requires a little familiarity with
Linux and the command line.
3.1.1 Obtain Your Hardware
Ubuntu 22.04 LTS Server requires a 64-bit processor. Bugzilla itself has no prerequisites beyond that, although you
should pick reliable hardware. You can also probably use any 64-bit virtual machine or cloud instance that you have
root access on.
3.1.2 Install the OS
Get Ubuntu Server 22.04 LTS and follow the installation instructions. Here are some tips:
• You do not need an encrypted lvm group, root or home directory.
• Choose all the defaults for the “partitioning” part (excepting of course where the default is “No” and you need
to press “Yes” to continue).
19

Bugzilla Documentation, Release 5.0.6
• Choose any server name you like.
• When creating the initial Linux user, call it bugzilla, give it a strong password, and write that password
down.
• From the install options, choose “OpenSSH Server”.
Reboot when the installer ﬁnishes.
3.1.3 Become root
ssh to the machine as the ‘bugzilla’ user, or start a console. Then:
sudo su
3.1.4 Install Prerequisites
apt install git nano
apt install apache2 build-essential mariadb-server libcgi-pm-perl
libdigest-sha-perl libtimedate-perl libdatetime-perl libdatetime-timezone-perl
libdbi-perl libdbix-connector-perl libtemplate-perl libemail-address-perl
libemail-sender-perl libemail-mime-perl liburi-perl liblist-moreutils-perl
libmath-random-isaac-perl libjson-xs-perl libgd-perl libchart-perl
libtemplate-plugin-gd-perl libgd-text-perl libgd-graph-perl libmime-tools-perl
libwww-perl libxml-twig-perl libnet-ldap-perl libauthen-sasl-perl
libnet-smtp-ssl-perl libauthen-radius-perl libsoap-lite-perl
libxmlrpc-lite-perl libjson-rpc-perl libtest-taint-perl libhtml-parser-perl
libhtml-scrubber-perl libencode-perl libencode-detect-perl libemail-reply-perl
libhtml-formattext-withlinks-perl libtheschwartz-perl libdaemon-generic-perl
libapache2-mod-perl2 libapache2-mod-perl2-dev libfile-mimeinfo-perl
libio-stringy-perl libcache-memcached-perl libfile-copy-recursive-perl
libfile-which-perl libdbd-mysql-perl perlmagick lynx graphviz python3-sphinx
rst2pdf
This will take a little while. It’s split into two commands so you can do the next steps (up to step 7) in another terminal
while you wait for the second command to ﬁnish. If you start another terminal, you will need to sudo su again.
3.1.5 Conﬁgure MariaDB
The following instructions use the simple nano editor, but feel free to use any text editor you are comfortable with.
nano /etc/mysql/mariadb.conf.d/50-server.cnf
Set the following values, which increase the maximum attachment size and make it possible to search for short words
and terms:
• Uncomment and alter on Line 34 to have a value of at least: max_allowed_packet=100M
• Add as new line 42, in the [mysqld] section: ft_min_word_len=2
Save and exit.
Create a database bugs for Bugzilla:
mysql -u root -e "CREATE DATABASE IF NOT EXISTS bugs CHARACTER SET = 'utf8'"
Then, add a user to MariaDB for Bugzilla to use:
20
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
mysql -u root -e "GRANT ALL PRIVILEGES ON bugs.* TO bugs@localhost IDENTIFIED
BY '$db_pass'"
Replace $db_pass with a strong password you have generated. Write it down. You should make $db_pass
different to your password.
Restart MariaDB:
service mariadb restart
3.1.6 Conﬁgure Apache
nano /etc/apache2/sites-available/bugzilla.conf
Paste in the following and save:
This conﬁguration sets up Bugzilla to be served on your server under /bugzilla path. For more in depth setup
instructions, refer to Apache section of this documentation.
a2ensite bugzilla
a2enmod cgi headers expires rewrite
service apache2 restart
3.1.7 Download Bugzilla
Get it from our Git repository:
mkdir -p /var/www/webapps
cd /var/www/webapps
git clone --branch release-X.X-stable https://github.com/bugzilla/bugzilla
bugzilla
(where “X.X” is the 2-digit version number of the stable release of Bugzilla that you want - e.g. 5.0)
3.1.8 Check Setup
Bugzilla comes with a checksetup.pl script which helps with the installation process. It will need to be run twice.
The ﬁrst time, it generates a conﬁg ﬁle (called localconfig) for the database access information, and the second
time (step 10) it uses the info you put in the conﬁg ﬁle to set up the database.
cd /var/www/webapps/bugzilla
./checksetup.pl
3.1.9 Edit localconfig
nano localconfig
You will need to set the following values:
• Line 29: set $webservergroup to www-data
• Line 67: set $db_pass to the password for the bugs user you created in MariaDB a few steps ago
3.1. Quick Start (Ubuntu Linux 22.04)
21

Bugzilla Documentation, Release 5.0.6
3.1.10 Check Setup (again)
Run the checksetup.pl script again to set up the database.
./checksetup.pl
It will ask you to give an email address, real name and password for the ﬁrst Bugzilla account to be created, which
will be an administrator. Write down the email address and password you set.
3.1.11 Test Server
./testserver.pl http://localhost/bugzilla
All the tests should pass. You will get a warning about failing to run gdlib-config; just ignore it.
3.1.12 Access Via Web Browser
Access the front page:
lynx http://localhost/bugzilla
It’s not really possible to use Bugzilla for real through Lynx, but you can view the front page to validate visually that
it’s up and running.
You might well need to conﬁgure your DNS such that the server has, and is reachable by, a name rather than IP address.
Doing so is out of scope of this document. In the mean time, it is available on your local network at http://<ip
address>/bugzilla, where <ip address> is (unless you have a complex network setup) the address starting
with 192 displayed when you run hostname -I.
3.1.13 Accessing Bugzilla from the Internet
To be able to access Bugzilla from anywhere in the world, you don’t have to make it internet facing at all, there are
free VPN services that let you set up your own network that is accessible anywhere. One of those is Tailscale, which
has a fairly accessible Quick Start guide.
If you are setting up an internet facing Bugzilla, it’s essential to set up SSL, so that the communication between the
server and users is encrypted. For local and intranet installation this matters less, and for those cases, you could set up
a self signed local certiﬁcate instead.
There are a few ways to set up free SSL thanks to Let’s Encrypt. The two major ones would be Apache’s mod_md and
EFF’s certbot, but we don’t cover the exact speciﬁcs of this here, as that’s out of scope of this guide.
3.1.14 Conﬁgure Bugzilla
Once you have worked out how to access your Bugzilla in a graphical web browser, bring up the front page, click Log
In in the header, and log in as the admin user you deﬁned in step 10.
Click the Parameters link on the page it gives you, and set the following parameters in the Required Settings section:
• urlbase: http://<servername>/bugzilla/ or http://<ip address>/bugzilla/
• ssl_redirect: on if you set up an SSL certiﬁcate
22
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
Click Save Changes at the bottom of the page.
There are several ways to get Bugzilla to send email. The easiest is to use Gmail, so we do that here so you have
it working. Visit https://gmail.com and create a new Gmail account for your Bugzilla to use. Then, open the Email
section of the Parameters using the link in the left column, and set the following parameter values:
• mail_delivery_method: SMTP
• mailfrom: new_gmail_address@gmail.com
• smtpserver: smtp.gmail.com:465
• smtp_username: new_gmail_address@gmail.com
• smtp_password: new_gmail_password
• smtp_ssl: On
Click Save Changes at the bottom of the page.
And you’re all ready to go. :-)
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.2 Linux
Some Linux distributions include Bugzilla and its dependencies in their package management systems. If you have
root access, installing Bugzilla on any Linux system could be as simple as ﬁnding the Bugzilla package in the package
management application and installing it. There may be a small bit of additional conﬁguration required.
If you are installing your machine from scratch, Quick Start (Ubuntu Linux 22.04) may be the best instructions for
you.
3.2.1 Install Packages
Use your distribution’s package manager to install Perl, your preferred database engine (MySQL or MariaDB if in
doubt), and a webserver (Apache if in doubt). Some distributions even have a Bugzilla package, although that will
vary in age.
The commands below will install those things and some of Bugzilla’s other prerequisites as well. If you ﬁnd a package
doesn’t install or the name is not found, just remove it from the list and reissue the command. If you want to use a
different database or webserver, substitute the package names as appropriate.
Fedora, CentOS Stream and RHEL
The following command will install Fedora’s packaged version of Bugzilla:
dnf install bugzilla httpd mariadb-server
Then, you can skip to conﬁguring your database. It may be useful to know that Fedora stores the Bugzilla ﬁles in
/usr/share/bugzilla, so that’s where you’ll run checksetup.pl.
If you want to install a version of Bugzilla from the Bugzilla project or have it on RHEL or CentOS, you will need to
do the following instead:
On CentOS Stream and RHEl, add the Fedora EPEL repo, in the way described in the installation instructions.
Run the following to install the base Bugzilla dependencies:
3.2. Linux
23

Bugzilla Documentation, Release 5.0.6
dnf install git httpd httpd-devel mariadb-devel gcc mariadb-server
mod_perl mod_perl-devel 'perl(autodie)' 'perl(CGI)' 'perl(Date::Format)'
'perl(DateTime)' 'perl(DateTime::TimeZone)' 'perl(DBI)' 'perl(DBD::mysql)'
'perl(DBIx::Connector)' 'perl(Digest::SHA)' 'perl(Email::MIME)'
'perl(Email::Sender)' 'perl(fields)' 'perl(JSON::XS)' 'perl(List::MoreUtils)'
'perl(Math::Random::ISAAC)' 'perl(Memoize)' 'perl(Safe)' 'perl(Template)'
'perl(URI)'
On Fedora, all the optional dependencies are available:
dnf install gd-devel graphviz patchutils 'perl(Apache2::SizeLimit)'
'perl(Authen::Radius)' 'perl(Authen::SASL)' 'perl(Cache::Memcached)'
'perl(Chart::Lines)' 'perl(Daemon::Generic)' 'perl(Email::Reply)'
'perl(Encode)' 'perl(Encode::Detect)' 'perl(File::Copy::Recursive)'
'perl(File::MimeInfo::Magic)' 'perl(File::Which)' 'perl(GD)'
'perl(GD::Graph)' 'perl(GD::Text)' 'perl(HTML::FormatText::WithLinks)'
'perl(HTML::Parser)' 'perl(HTML::Scrubber)' 'perl(IO::Scalar)'
'perl(JSON::RPC)' 'perl(LWP::UserAgent)' 'perl(MIME::Parser)'
'perl(mod_perl2)' 'perl(Net::LDAP)' 'perl(Net::SMTP::SSL)' 'perl(PatchReader)'
'perl(SOAP::Lite)' 'perl(Template::Plugin::GD::Image)' 'perl(Test::Taint)'
'perl(TheSchwartz)' 'perl(XMLRPC::Lite)' 'perl(XML::Twig)'
On CentOS Stream and RHEL with EPEL, some modules are missing in the repositories, so use the following instead:
dnf install gd-devel graphviz patchutils 'perl(Apache2::SizeLimit)'
'perl(Authen::Radius)' 'perl(Authen::SASL)' 'perl(Cache::Memcached)'
'perl(Encode)' 'perl(Encode::Detect)' 'perl(File::Copy::Recursive)'
'perl(File::MimeInfo::Magic)' 'perl(File::Which)' 'perl(GD)'
'perl(GD::Graph)' 'perl(GD::Text)' 'perl(HTML::Parser)' 'perl(HTML::Scrubber)'
'perl(IO::Scalar)' 'perl(JSON::RPC)' 'perl(LWP::UserAgent)'
'perl(MIME::Parser)' 'perl(mod_perl2)' 'perl(Net::LDAP)' 'perl(Net::SMTP::SSL)'
'perl(SOAP::Lite)' 'perl(Test::Taint)' 'perl(XMLRPC::Lite)' 'perl(XML::Twig)'
and install the missing optional modules with:
cd /var/www/html/bugzilla/ && ./install-module.pl Chart::Lines
Daemon::Generic Email::Reply HTML::FormatText::WithLinks PatchReader
Template::Plugin::GD::Image TheSchwartz
If you plan to use a database other than MariaDB, you will need to also install the appropriate packages for that.
Ubuntu and Debian
You
can
install
required
packages
with:
apt install apache2 build-essential git
libcgi-pm-perl libdatetime-perl libdatetime-timezone-perl libdbi-perl
libdbix-connector-perl libdigest-sha-perl libemail-address-perl
libemail-mime-perl libemail-sender-perl libjson-xs-perl liblist-moreutils-perl
libmath-random-isaac-perl libtemplate-perl libtimedate-perl liburi-perl
libmariadb-dev-compat libdbd-mysql-perl mariadb-server
If you plan to use a database other than MariaDB, you will need to also install the appropriate packages for that (in the
command above, the packages required for MariaDB are libdbd-mysql-perl, libmariadb-dev-compat
and mariadb-server).
You
can
install
optional
packages
with:
apt install graphviz libapache2-mod-perl2
libapache2-mod-perl2-dev libauthen-radius-perl libauthen-sasl-perl
libcache-memcached-perl libchart-perl libdaemon-generic-perl
libemail-reply-perl libencode-detect-perl libencode-perl libfile-copy-recursive-perl
24
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
libfile-mimeinfo-perl libfile-which-perl libgd-dev libgd-graph-perl
libgd-perl libgd-text-perl libhtml-formattext-withlinks-perl
libhtml-parser-perl libhtml-scrubber-perl libio-stringy-perl libjson-rpc-perl
libmime-tools-perl libnet-ldap-perl libnet-smtp-ssl-perl libsoap-lite-perl
libtemplate-plugin-gd-perl libtest-taint-perl libtheschwartz-perl libwww-perl
libxmlrpc-lite-perl libxml-twig-perl
There is no Ubuntu package for PatchReader and so you will have to install that module outside the package
manager if you want it.
Gentoo
emerge -av bugzilla
will install Bugzilla and all its dependencies. If you don’t have the vhosts USE ﬂag enabled, Bugzilla will end up in
/var/www/localhost/bugzilla.
Then, you can skip to conﬁguring your database.
openSUSE
zypper in bugzilla
has been available in the openSUSE Leap repositories since 15.2 and is in the openSUSE Tumbleweed repositories,
also comes with an optional bugzilla-apache package, that allows you to skip to conﬁguring your database
3.2.2 Perl
Test which version of Perl you have installed with:
$ perl -v
Bugzilla requires at least Perl 5.10.1.
3.2.3 Bugzilla
The best way to get Bugzilla is to check it out from git:
git clone --branch release-X.X-stable https://github.com/bugzilla/bugzilla
Run the above command in your home directory, replacing “X.X” with the 2-digit version number of the stable release
of Bugzilla that you want - e.g. “4.4”.
If that’s not possible, you can download a tarball of Bugzilla.
Place Bugzilla in a suitable directory, accessible by the default web server user (probably apache or www-data).
Good locations are either directly in the web server’s document directory (often /var/www/html) or in /usr/
local, either with a symbolic link to the web server’s document directory or an alias in the web server’s conﬁguration.
Warning: The default Bugzilla distribution is NOT designed to be placed in a cgi-bin directory. This includes
any directory which is conﬁgured using the ScriptAlias directive of Apache.
3.2. Linux
25

Bugzilla Documentation, Release 5.0.6
3.2.4 Perl Modules
Bugzilla requires a number of Perl modules. You can install these globally using your system’s package manager,
or install Bugzilla-only copies. At times, Bugzilla may require a version of a Perl module newer than the one your
distribution packages, in which case you will need to install a Bugzilla-only copy of the newer version.
At this point you probably need to become root, e.g. by using su. You should remain as root until the end of the
install. This can be avoided in some circumstances if you are a member of your webserver’s group, but being root is
easier and will always work.
To check whether you have all the required modules, run:
./checksetup.pl --check-modules
You can run this command as many times as necessary.
If you have not already installed the necessary modules, and want to do it system-wide, invoke your package manager
appropriately at this point. Alternatively, you can install all missing modules locally (i.e. just for Bugzilla) like this:
./install-module.pl --all
Or, you can pass an individual module name:
./install-module.pl <modulename>
3.2.5 Web Server
Any web server that is capable of running CGI scripts can be made to work. We have speciﬁc conﬁguration instructions
for the following:
• Apache
3.2.6 Database Engine
Bugzilla supports MySQL (or MariaDB, its compatible counterpart), PostgreSQL, Oracle and SQLite as database
servers. You only require one of these systems to make use of Bugzilla. MySQL or MariaDB are most commonly
used. SQLite is good for trial installations as it requires no setup. Conﬁgure your server according to the instructions
below:
• MySQL
• PostgreSQL
• Oracle
• SQLite
3.2.7 localconﬁg
You should now change into the Bugzilla directory and run checksetup.pl, without any parameters:
./checksetup.pl
checksetup.pl will write out a ﬁle called localconfig. This ﬁle contains the default settings for a number of
Bugzilla parameters, the most important of which are the group your web server runs as, and information on how to
connect to your database.
26
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
Load this ﬁle in your editor. You will need to check/change $db_driver and $db_pass, which are respectively
the type of the database you are using and the password for the bugs database user you have created. $db_driver
can be either mysql, Pg (PostgreSQL), Oracle or Sqlite. All values are case sensitive.
Set the value of $webservergroup to the group your web server runs as.
• Fedora/Red Hat: apache
• Debian/Ubuntu: www-data
• Mac OS X: _www
• Windows: ignore this setting; it does nothing
The other options in the localconfig ﬁle are documented by their accompanying comments. If you have a non-
standard database setup, you may need to change one or more of the other $db_* parameters.
Note: If you are using Oracle, $db_name should be set to the SID name of your database (e.g. XE if you are using
Oracle XE).
3.2.8 checksetup.pl
Next, run checksetup.pl an additional time:
./checksetup.pl
It reconﬁrms that all the modules are present, and notices the altered localconﬁg ﬁle, which it assumes you have edited
to your satisfaction. It compiles the UI templates, connects to the database using the bugs user you created and the
password you deﬁned, and creates the bugs database and the tables therein.
After that, it asks for details of an administrator account. Bugzilla can have multiple administrators - you can create
more later - but it needs one to start off with. Enter the email address of an administrator, his or her full name, and a
suitable Bugzilla password.
checksetup.pl will then ﬁnish. You may rerun checksetup.pl at any time if you wish.
3.2.9 Success
Your Bugzilla should now be working. Check by running:
./testserver.pl http://<your-bugzilla-server>/
If that passes, access http://<your-bugzilla-server>/ in your browser - you should see the Bugzilla front
page. Of course, if you installed Bugzilla in a subdirectory, make sure that’s in the URL.
Next, do the Essential Post-Installation Conﬁguration.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.3 Windows
Making Bugzilla work on Windows is not more difﬁcult than making it work on Linux. However, fewer developers
use Windows to test Bugzilla and so we would still recommend using Linux for large sites to get better support.
3.3. Windows
27

Bugzilla Documentation, Release 5.0.6
3.3.1 Perl
You have two main choices to install Perl on Windows: ActivePerl and Strawberry Perl.
The ActivePerl Windows Installer can be downloaded from the ActiveState website. Perl will be installed by default
into C:\Perl. It is not recommended to install Perl into a directory containing a space, such as C:\Program
Files. Once the install has completed, log out and log in again to pick up the changes to the PATH environment
variable.
The Strawberry Perl Windows Installer can be downloaded from the Strawberry Perl website. Perl will be installed by
default into C:\Strawberry.
One big advantage of Strawberry Perl over ActivePerl is that with Strawberry Perl, you can use the usual tools available
on other OSes to install missing Perl modules directly from CPAN, whereas ActivePerl requires you to use its own
ppm tool to download pre-compiled Perl modules from ActiveState. The modules in the ActivePerl repository may be
a bit older than those on CPAN.
3.3.2 Bugzilla
The best way to get Bugzilla is to check it out from git. Download and install git from the git website, and then run:
git clone --branch release-X.X-stable https://github.com/bugzilla/bugzilla
C:\bugzilla
where “X.X” is the 2-digit version number of the stable release of Bugzilla that you want (e.g. 5.0).
The rest of this documentation assumes you have installed Bugzilla into C:\bugzilla. Adjust paths appropriately
if not.
If it’s not possible to use git (e.g. because your Bugzilla machine has no internet access), you can download a tarball
of Bugzilla and copy it across. Bugzilla comes as a ‘tarball’ (.tar.gz extension), which any competent Windows
archiving tool should be able to open.
3.3.3 Perl Modules
Bugzilla requires a number of Perl modules to be installed. Some of them are mandatory, and some others, which
enable additional features, are optional.
If you are using ActivePerl, these modules are available in the ActiveState repository, and are installed with the ppm
tool. You can either use it on the command line as below, or just type ppm, and you will get a GUI. If you use a proxy
server or a ﬁrewall you may have trouble running PPM. This is covered in the ActivePerl FAQ.
Install the following mandatory modules with:
ppm install <modulename>
• CGI.pm
• Digest-SHA
• TimeDate
• DateTime
• DateTime-TimeZone
• DBI
• Template-Toolkit
• Email-Sender
28
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
• Email-MIME
• URI
• List-MoreUtils
• Math-Random-ISAAC
• JSON-XS
• Win32
• Win32-API
• DateTime-TimeZone-Local-Win32
The following modules enable various optional Bugzilla features; try and install them, but don’t worry too much to
begin with if you can’t get them installed:
• GD
• Chart
• Template-GD
• GDTextUtil
• GDGraph
• MIME-tools
• libwww-perl
• XML-Twig
• PatchReader
• perl-ldap
• Authen-SASL
• Net-SMTP-SSL
• RadiusPerl
• SOAP-Lite
• XMLRPC-Lite
• JSON-RPC
• Test-Taint
• HTML-Parser
• HTML-Scrubber
• Encode
• Encode-Detect
• Email-Reply
• HTML-FormatText-WithLinks
• TheSchwartz
• Daemon-Generic
• mod_perl
3.3. Windows
29

Bugzilla Documentation, Release 5.0.6
• Apache-SizeLimit
• File-MimeInfo
• IO-stringy
• Cache-Memcached
• File-Copy-Recursive
If you are using Strawberry Perl, you should use the install-module.pl script to install modules, which is the
same script used for Linux. Some of the required modules are already installed by default. The remaining ones can be
installed using the command:
perl install-module.pl <modulename>
The list of modules to install will be displayed by checksetup.pl; see below.
3.3.4 Web Server
Any web server that is capable of running CGI scripts can be made to work. We have speciﬁc instructions for the
following:
• Apache on Windows
• Microsoft IIS
3.3.5 Database Engine
Bugzilla supports MySQL, PostgreSQL, Oracle and SQLite as database servers. You only require one of these systems
to make use of Bugzilla. MySQL is most commonly used, and is the only one for which Windows instructions have
been tested. SQLite is good for trial installations as it requires no setup. Conﬁgure your server according to the
instructions below:
• MySQL
• PostgreSQL
• Oracle
• SQLite
3.3.6 localconﬁg
You should now change into the Bugzilla directory and run checksetup.pl, without any parameters:
checksetup.pl
checksetup.pl will write out a ﬁle called localconfig. This ﬁle contains the default settings for a number of
Bugzilla parameters, the most important of which are the group your web server runs as, and information on how to
connect to your database.
Load this ﬁle in your editor. You will need to check/change $db_driver and $db_pass, which are respectively
the type of the database you are using and the password for the bugs database user you have created. $db_driver
can be either mysql, Pg (PostgreSQL), Oracle or Sqlite. All values are case sensitive.
Set the value of $webservergroup to the group your web server runs as.
• Fedora/Red Hat: apache
• Debian/Ubuntu: www-data
30
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
• Mac OS X: _www
• Windows: ignore this setting; it does nothing
The other options in the localconfig ﬁle are documented by their accompanying comments. If you have a non-
standard database setup, you may need to change one or more of the other $db_* parameters.
Note: If you are using Oracle, $db_name should be set to the SID name of your database (e.g. XE if you are using
Oracle XE).
3.3.7 checksetup.pl
Next, run checksetup.pl an additional time:
checksetup.pl
It reconﬁrms that all the modules are present, and notices the altered localconﬁg ﬁle, which it assumes you have edited
to your satisfaction. It compiles the UI templates, connects to the database using the bugs user you created and the
password you deﬁned, and creates the bugs database and the tables therein.
After that, it asks for details of an administrator account. Bugzilla can have multiple administrators - you can create
more later - but it needs one to start off with. Enter the email address of an administrator, his or her full name, and a
suitable Bugzilla password.
checksetup.pl will then ﬁnish. You may rerun checksetup.pl at any time if you wish.
3.3.8 Success
Your Bugzilla should now be working. Check by running:
testserver.pl http://<your-bugzilla-server>/
If that passes, access http://<your-bugzilla-server>/ in your browser - you should see the Bugzilla front
page. Of course, if you installed Bugzilla in a subdirectory, make sure that’s in the URL.
If you don’t see the main Bugzilla page, but instead see “It works!!!”, then somehow your Apache has not picked
up your modiﬁcations to httpd.conf. If you are on Windows 7 or later, this could be due to a new feature called
“VirtualStore”. This blog post may help to solve the problem.
If you get an “Internal Error...” message, it could be that ScriptInterpreterSource Registry-Strict
is not set in your Apache conﬁguration. Check again if it is set properly.
Next, do the Essential Post-Installation Conﬁguration.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.4 Mac OS X
Note: The Bugzilla team has very little Mac expertise and we’ve not been able to do a successful install of the latest
version. We got close, though. If you’ve managed it, tell us how and we can update these docs!
3.4. Mac OS X
31

Bugzilla Documentation, Release 5.0.6
3.4.1 Install Packages
OS X 10.7 provides Perl 5.12 and Apache 2.2. Install the following additional packages:
• git: Download an installer from the git website.
• MySQL: Download an installer from the MySQL website.
3.4.2 Bugzilla
The best way to get Bugzilla is to check it out from git:
git clone --branch release-X.X-stable https://github.com/bugzilla/bugzilla
Run the above command in your home directory, replacing “X.X” with the 2-digit version number of the stable release
of Bugzilla that you want - e.g. “4.4”. This will place Bugzilla in the directory $HOME/bugzilla.
If that’s not possible, you can download a tarball of Bugzilla.
3.4.3 Additional System Libraries
Apple does not include the GD library with Mac OS X. Bugzilla needs this if you want to display bug graphs, and you
need to install it before you try installing the GD Perl module.
You can use MacPorts, Homebrew or Fink, all of which can install common Unix programs on Mac OS X.
If you don’t have one of the above installed already, pick one and follow the instructions for setting it up. Then, use it
to install the gd2 package (MacPorts/Fink) or the gd package (Brew).
The package manager may prompt you to install a number of dependencies; you will need to agree to this.
Note: To prevent creating conﬂicts with the software that Apple installs by default, Fink creates its own directory tree
at /sw where it installs most of the software that it installs. This means your libraries and headers will be at /sw/lib
and /sw/include instead of /usr/lib and /usr/include. When the Perl module conﬁg script for the GD
module asks where your libgd is, be sure to tell it /sw/lib.
3.4.4 Perl Modules
Bugzilla requires a number of Perl modules. On Mac OS X, the easiest thing to do is to install local copies (rather than
system-wide copies) of any ones that you don’t already have. However, if you do want to install them system-wide,
run the below commands as root with the --global option.
To check whether you have all the required modules and what is still missing, run:
perl checksetup.pl --check-modules
You can run this command as many times as necessary.
Install all missing modules locally like this:
perl install-module.pl --all
32
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
3.4.5 Web Server
Any web server that is capable of running CGI scripts can be made to work. We have speciﬁc conﬁguration instructions
for the following:
• Apache
You’ll need to create a symbolic link so the webserver can see Bugzilla:
cd /Library/WebServer/Documents
sudo ln -s $HOME/bugzilla bugzilla
In System Preferences –> Sharing, enable the Web Sharing checkbox to start Apache.
3.4.6 Database Engine
Bugzilla supports MySQL, PostgreSQL, Oracle and SQLite as database servers. You only require one of these systems
to make use of Bugzilla. MySQL is most commonly used on Mac OS X. (In fact, we have no reports of anyone using
anything else.) Conﬁgure your server according to the instructions below:
• MySQL
• PostgreSQL
• Oracle
• SQLite
3.4.7 localconﬁg
You should now change into the Bugzilla directory and run checksetup.pl, without any parameters:
perl checksetup.pl
checksetup.pl will write out a ﬁle called localconfig. This ﬁle contains the default settings for a number of
Bugzilla parameters, the most important of which are the group your web server runs as, and information on how to
connect to your database.
Load this ﬁle in your editor. You will need to check/change $db_driver and $db_pass, which are respectively
the type of the database you are using and the password for the bugs database user you have created. $db_driver
can be either mysql, Pg (PostgreSQL), Oracle or Sqlite. All values are case sensitive.
Set the value of $webservergroup to the group your web server runs as.
• Fedora/Red Hat: apache
• Debian/Ubuntu: www-data
• Mac OS X: _www
• Windows: ignore this setting; it does nothing
The other options in the localconfig ﬁle are documented by their accompanying comments. If you have a non-
standard database setup, you may need to change one or more of the other $db_* parameters.
Note: If you are using Oracle, $db_name should be set to the SID name of your database (e.g. XE if you are using
Oracle XE).
3.4. Mac OS X
33

Bugzilla Documentation, Release 5.0.6
3.4.8 checksetup.pl
Next, run checksetup.pl an additional time:
perl checksetup.pl
It reconﬁrms that all the modules are present, and notices the altered localconﬁg ﬁle, which it assumes you have edited
to your satisfaction. It compiles the UI templates, connects to the database using the bugs user you created and the
password you deﬁned, and creates the bugs database and the tables therein.
After that, it asks for details of an administrator account. Bugzilla can have multiple administrators - you can create
more later - but it needs one to start off with. Enter the email address of an administrator, his or her full name, and a
suitable Bugzilla password.
checksetup.pl will then ﬁnish. You may rerun checksetup.pl at any time if you wish.
3.4.9 Success
Your Bugzilla should now be working. Check by running:
perl testserver.pl http://<your-bugzilla-server>/
If that passes, access http://<your-bugzilla-server>/ in your browser - you should see the Bugzilla front
page. Of course, if you installed Bugzilla in a subdirectory, make sure that’s in the URL.
Next, do the Essential Post-Installation Conﬁguration.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.5 Web Server
Bugzilla requires a web server to run CGI scripts. It supports the following:
3.5.1 Apache
You have two options for running Bugzilla under Apache - mod_cgi (the default) and mod_perl. mod_perl is faster
but takes more resources. You should probably only consider mod_perl if your Bugzilla is going to be heavily used.
These instructions require editing the Apache conﬁguration ﬁle, which is:
• Fedora/Red Hat: /etc/httpd/conf/httpd.conf
• Debian/Ubuntu: /etc/apache2/apache2.conf
• Mac OS X: /etc/apache2/httpd.conf
Alternatively, on Debian or Ubuntu, you can instead put the below code into a separate ﬁle in the directory /etc/
apache2/sites-enabled/.
In these instructions, when asked to restart Apache, the command is:
sudo apachectl start
(or run it as root if your OS installation does not use sudo).
34
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
Securing Apache
When external systems interact with Bugzilla via webservices (REST/XMLRPC/JSONRPC) they include the user’s
credentials as part of the URL (in the “query string”). Therefore, to avoid storing passwords in clear text on the server
we recommend conﬁguring Apache to not include the query string in its log ﬁles.
1. Edit the Apache conﬁguration ﬁle (see above).
2. Find the following line in the above mentioned ﬁle, which deﬁnes the logging format for vhost_combined:
LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\""
˓→vhost_combined
3. Replace %r with %m %U.
4. Restart Apache.
Apache with mod_cgi
To conﬁgure your Apache web server to work with Bugzilla while using mod_cgi, do the following:
1. Edit the Apache conﬁguration ﬁle (see above).
2. Create a <Directory> directive that applies to the location of your Bugzilla installation. In this example,
Bugzilla has been installed at /var/www/html/bugzilla. On Mac OS X, use /Library/WebServer/
Documents/bugzilla.
<Directory /var/www/html/bugzilla>
AddHandler cgi-script .cgi
Options +ExecCGI +FollowSymLinks
DirectoryIndex index.cgi index.html
AllowOverride All
</Directory>
These instructions allow Apache to run .cgi ﬁles found within the Bugzilla directory; instructs the server to look for
a ﬁle called index.cgi or, if not found, index.html if someone only types the directory name into the browser;
and allows Bugzilla’s .htaccess ﬁles to override some global permissions.
On some Linux distributions you will need to enable the Apache CGI module. On Debian/Ubuntu, this is done with:
sudo a2enmod cgi
If you ﬁnd that the webserver is returning the Perl code as text rather than executing it, then this is the problem.
Apache with mod_perl
Some conﬁguration is required to make Bugzilla work with Apache and mod_perl.
Note: It is not known whether anyone has even tried mod_perl on Mac OS X.
1. Edit the Apache conﬁguration ﬁle (see above).
2. Add the following information, substituting where appropriate with your own local paths.
PerlSwitches -w -T
PerlConfigRequire /var/www/html/bugzilla/mod_perl.pl
3.5. Web Server
35

Bugzilla Documentation, Release 5.0.6
Note: This should be used instead of the <Directory> block shown above. This should also be above any other
mod_perl directives within the httpd.conf and the directives must be speciﬁed in the order above.
Warning: You should also ensure that you have disabled KeepAlive support in your Apache install when
utilizing Bugzilla under mod_perl or you may suffer a performance penalty.
On restarting Apache, Bugzilla should now be running within the mod_perl environment.
Please bear the following points in mind when considering using Bugzilla under mod_perl:
• mod_perl support in Bugzilla can take up a HUGE amount of RAM - easily 30MB per httpd child. The more
RAM you can get, the better. mod_perl is basically trading RAM for speed. At least 2GB total system RAM is
recommended for running Bugzilla under mod_perl.
• Under mod_perl, you have to restart Apache if you make any manual change to any Bugzilla ﬁle. You can’t
just reload–you have to actually restart the server (as in make sure it stops and starts again). You can change
localconfig and the params ﬁle manually, if you want, because those are re-read every time you load a
page.
• You must run in Apache’s Prefork MPM (this is the default). The Worker MPM may not work – we haven’t
tested Bugzilla’s mod_perl support under threads. (And, in fact, we’re fairly sure it won’t work.)
• Bugzilla generally expects to be the only mod_perl application running on your entire server. It may or may
not work if there are other applications also running under mod_perl. It does try its best to play nice with other
mod_perl applications, but it still may have conﬂicts.
• It is recommended that you have one Bugzilla instance running under mod_perl on your server. Bugzilla has
not been tested with more than one instance running.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.5.2 Apache on Windows
Bugzilla supports all versions of Apache 2.2.x and 2.4.x.
Installing
Download the Apache HTTP Server as a .zip archive either from the Apache Lounge website or from the Apache
Haus website.
Unzip the archive into C:\Apache24. If you move it elsewhere, then you must edit several variables in httpd.
conf, including ServerRoot and DocumentRoot.
You must now edit the Apache conﬁguration ﬁle C:\Apache24\conf\httpd.conf and do the following steps:
1. Uncomment LoadModule cgi_module modules/mod_cgi.so at the beginning of the ﬁle to enable
CGI support.
2. Uncomment AddHandler cgi-script .cgi to register .cgi ﬁles as CGI scripts.
For this han-
dler to work,
you must create a key in the Windows registry named HKEY_CLASSES_ROOT\.
cgi\Shell\ExecCGI\Command with the default value pointing to the full path of perl.exe
with a -T parameter.
For example C:\Perl\bin\perl.exe -T if you use ActivePerl,
or
C:\Strawberry\perl\bin\perl.exe -T if you use Strawberry Perl.
36
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
3. Add an Alias and a Directory for Bugzilla:
Alias "/bugzilla/" "C:/bugzilla/"
<Directory "C:/bugzilla">
ScriptInterpreterSource Registry-Strict
Options +ExecCGI +FollowSymLinks
DirectoryIndex index.cgi index.html
AllowOverride All
Require all granted
</Directory>
Warning: The above block takes a simple approach to access control and is correct for Apache 2.4. For Apache
2.2, replace Require all granted with Allow from all. If you have other access control requirements,
you may need to make further modiﬁcations.
You now save your changes and start Apache as a service. From the Windows command line (cmd.exe):
C:\Apache24\bin>httpd.exe -k install
That’s it! Bugzilla is now accessible from http://localhost/bugzilla.
Apache Account Permissions
By default Apache installs itself to run as the SYSTEM account. For security reasons it’s better the reconﬁgure the
service to run as an Apache user. Create a new Windows user that is a member of no groups, and reconﬁgure the
Apache2 service to run as that account.
Whichever account you are running Apache as, SYSTEM or otherwise, needs write and modify access to the following
directories and all their subdirectories. Depending on your version of Windows, this access may already be granted.
• C:\Bugzilla\data
• C:\Apache24\logs
• C:\Windows\Temp
Note that C:\Bugzilla\data is created the ﬁrst time you run checksetup.pl.
Logging
Unless you want to keep statistics on how many hits your Bugzilla install is getting, it’s a good idea to disable logging
by commenting out the CustomLog directive in the Apache conﬁg ﬁle.
If you don’t disable logging, you should at least disable logging of “query strings”. When external systems interact
with Bugzilla via webservices (REST/XMLRPC/JSONRPC) they include the user’s credentials as part of the URL (in
the query string). Therefore, to avoid storing passwords in clear text on the server we recommend conﬁguring Apache
to not include the query string in its log ﬁles.
1. Find the following line in the Apache conﬁg ﬁle, which deﬁnes the logging format for vhost_combined:
LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\""
˓→vhost_combined
2. Replace %r with %m %U.
(If you have conﬁgured Apache differently, a different log line might apply. Adjust these instructions accordingly.)
3.5. Web Server
37

Bugzilla Documentation, Release 5.0.6
Using Apache with SSL
If you want to enable SSL with Apache, i.e. access Bugzilla from https://localhost/bugzilla, you need to do some extra
steps:
1. Edit C:\Apache24\conf\httpd.conf and uncomment these lines:
• LoadModule ssl_module modules/mod_ssl.so
• LoadModule socache_shmcb_module modules/mod_socache_shmcb.so
• Include conf/extra/httpd-ssl.conf
2. Create your .key and .crt ﬁles using openssl.exe provided with Apache:
C:\Apache24\bin>openssl.exe req -x509 -nodes -days 730 -newkey rsa:2048
-keyout server.key -out server.crt
openssl.exe will ask you a few questions about your location and your company name to populate ﬁelds of
the certiﬁcate.
3. Once the key and the certiﬁcate for your server are generated, move them into C:\Apache24\conf so that
their location matches the SSLCertificateFile and SSLCertificateKeyFile variables deﬁned in
C:\Apache24\conf\extra\httpd-ssl.conf (which you don’t need to edit).
Note:
This process leads to a self-signed certiﬁcate which will generate browser warnings on ﬁrst visit. If your
Bugzilla has a public DNS name, you can get a cert from a CA which will not have this problem.
Restart Apache
Finally, restart Apache to pick up the changes, either from the Services console or from the command line:
C:\Apache24\bin>httpd.exe -k restart
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.5.3 Microsoft IIS
Bugzilla works with IIS as a normal CGI application. These instructions assume that you are using Windows 7 or
Windows 10. Procedures for other versions are probably similar.
Begin by starting Internet Information Services (IIS) Manager. Start –> Administrators Tools –> Internet Information
Services (IIS) Manager. Or run the command:
inetmgr
Create a New Application
Expand your Server until the Default Web Site shows its children.
Right-click Default Web Site and select Add Application from the menu.
Unde Alias, enter the alias for the website. This is the path below the domain where you want Bugzilla to appear.
Under Physical Path, enter the path to Bugzilla, C:\Bugzilla.
When ﬁnished, click OK.
38
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
Conﬁgure the Default Document
Click on the Application that you just created. Double-click on Default Document, and click Add underneath the
Actions menu.
Under Name, enter index.cgi.
All other default documents can be removed for this application.
Warning: Do not delete the default document from the Default Website.
Add Handler Mappings
Ensure that you are at the Default Website. Under IIS, double-click Handler Mappings. Under Actions, click Add
Script Map. You need to do this twice.
For the ﬁrst one, set the following values (replacing paths if necessary):
• Request Path: *.pl
• Executable: C:\Perl\bin\perl.exe "%s" %s
• Name: Perl Script Map
At the prompt select Yes.
Note:
The ActiveState Perl installer may have already created an entry for .pl ﬁles that is limited to GET,HEAD,
POST. If so, this mapping should be removed, as Bugzilla’s .pl ﬁles are not designed to be run via a web server.
For the second one, set the following values (replacing paths if necessary):
• Request Path: *.cgi
• Executable: C:\Perl\bin\perl.exe "%s" %s
• Name: CGI Script Map
At the prompt select Yes.
Bugzilla Application
Ensure that you are at the Bugzilla Application. Under IIS, double-click Handler Mappings. Under Actions, click Add
Script Map.
Set the following values (replacing paths if necessary):
• Request Path: *.cgi
• Executable: C:\Perl\bin\perl.exe -x"C:\Bugzilla" -wT "%s" %s
• Name: Bugzilla
At the prompt select Yes.
Now it’s time to restart the IIS server to take these changes into account. From the top-level menu, which contains the
name of your machine, click Restart under Manage Server. Or run the command:
iisreset
3.5. Web Server
39

Bugzilla Documentation, Release 5.0.6
Enable Rewrite Rules for REST
REST URLs are usually of the form http://.../bugzilla/rest/version instead of http://.../bugzilla/rest.cgi/version. To
let IIS redirect rest/ URLs to rest.cgi, you need to download and install the URL Rewrite extension for IIS. Direct
download links are available at the bottom of the page for both x86 and x64 Windows.
Once installed, you open the IIS Manager again and go to your Bugzilla Application. From here, double-click URL
Rewrite. Then click Add Rule(s) under the Actions menu and click Blank rule in the Inbound rules section.
Fill the ﬁelds as follows. Other ﬁelds do not need to be edited.
• Name: REST
• Pattern: ^rest/(.*)$
• Rewrite URL: rest.cgi/{R:1}
There is no need to restart IIS. Changes take effect immediately.
Common Problems
Bugzilla runs but it’s not possible to log in You’ve probably conﬁgured IIS to use ActiveState’s ISAPI DLL – in
other words you’re using PerlEx, or the executable IIS is conﬁgured to use is PerlS.dll or Perl30.dll.
Reconﬁgure IIS to use perl.exe.
IIS returns HTTP 502 errors You probably forgot the -T argument to perl when conﬁguring the executable in
IIS.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.6 Database Server
Bugzilla requires a database to store its data. We recommend either MySQL or PostgreSQL for production installa-
tions. Oracle 10 should work ﬁne, but very little or no testing has been done with Oracle 11 and 12. SQLite is easy to
conﬁgure but, due to its limitations, it should only be used for testing purposes and very small installations.
3.6.1 MySQL
It is strongly advised to use MariaDB which is a drop-in replacement for MySQL and is fully compatible with Bugzilla.
If MySQL must be used, be aware that the minimum required version is MySQL 5.0.15 and that MySQL 8 or higher
cannot be used at this time.
All commands in this document work regardless of whether MySQL or MariaDB are used.
It’s possible to test which version of MySQL you have installed with:
mysql -V
40
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
Installing
Windows
Download the MariaDB 32-bit or 64-bit MSI installer from the MariaDB website (~66 MB).
MariaDB has a standard Windows installer. It’s ok to select a the default install options. The rest of this documentation
assumes assume you have installed MariaDB into C:\mysql. Adjust paths appropriately if not.
Linux/Mac OS X
The package install instructions given previously should have installed MySQL on your machine, if it didn’t come
with it already. Run:
mysql_secure_installation
and follow its advice.
If you did install MySQL manually rather than from a package, make sure the server is started when the machine
boots.
Create the Database
You need to create a database for Bugzilla to use. Run the mysql command-line client and enter:
:: CREATE DATABASE IF NOT EXISTS bugs CHARACTER SET = ‘utf8’;
The above command makes sure a database like that doesn’t exist already.
Add a User
You need to add a new MySQL user for Bugzilla to use. Run the mysql command-line client and enter:
GRANT SELECT, INSERT,
UPDATE, DELETE, INDEX, ALTER, CREATE, LOCK TABLES,
CREATE TEMPORARY TABLES, DROP, REFERENCES ON bugs.*
TO bugs@localhost IDENTIFIED BY '$DB_PASS';
FLUSH PRIVILEGES;
You need to replace $DB_PASS with a strong password you have chosen. Write that password down somewhere.
The above command permits an account called bugs to connect from the local machine, localhost. Modify the
command to reﬂect your setup if you will be connecting from another machine or as a different user.
Change Conﬁguration
To change MySQL’s conﬁguration, you need to edit your MySQL conﬁguration ﬁle, which is:
• Red Hat/Fedora: /etc/my.cnf
• Debian/Ubuntu: /etc/mysql/my.cnf
• Windows: C:\mysql\bin\my.ini
• Mac OS X: /etc/my/cnf
3.6. Database Server
41

Bugzilla Documentation, Release 5.0.6
Allow Large Attachments and Many Comments
By default on some systems, MySQL will only allow you to insert things into the database that are smaller than 1MB.
Bugzilla attachments may be larger than this. Also, Bugzilla combines all comments on a single bug into one ﬁeld for
full-text searching, and the combination of all comments on a single bug could in some cases be larger than 1MB.
We recommend that you allow at least 16MB packets by adding or altering the max_allowed_packet parameter
in your MySQL conﬁguration in the [mysqld] section, so that the number is at least 16M, like this (note that it’s M,
not MB):
[mysqld]
# Allow packets up to 16M
max_allowed_packet=16M
Allow Small Words in Full-Text Indexes
By default, words must be at least four characters in length in order to be indexed by MySQL’s full-text indexes. This
causes a lot of Bugzilla-speciﬁc words to be missed, including “cc”, “ftp” and “uri”.
MySQL can be conﬁgured to index those words by setting the ft_min_word_len param to the minimum size of
the words to index.
[mysqld]
# Allow small words in full-text indexes
ft_min_word_len=2
Permit Attachments Table to Grow Beyond 4GB
This is optional conﬁguration for Bugzillas which are expected to become very large, and needs to be done after
Bugzilla is fully installed.
By default, MySQL will limit the size of a table to 4GB. This limit is present even if the underlying ﬁlesystem has no
such limit. To set a higher limit, run the mysql command-line client and enter the following, replacing $bugs_db
with your Bugzilla database name (which is bugs by default):
USE $bugs_db;
ALTER TABLE attachments AVG_ROW_LENGTH=1000000, MAX_ROWS=20000;
The above command will change the limit to 20GB. MySQL will have to make a temporary copy of your entire table
to do this, so ideally you should do this when your attachments table is still small.
Note: If you have set the setting in Bugzilla which allows large attachments to be stored on disk, the above change
does not affect that.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
42
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
3.6.2 PostgreSQL
Test which version of PostgreSQL you have installed with:
psql -V
You need PostgreSQL version 8.03.0000 or higher.
If you install PostgreSQL manually rather than from a package, make sure the server is started when the machine
boots.
Add a User
You need to add a new user to PostgreSQL for the Bugzilla application to use when accessing the database. The fol-
lowing instructions assume the defaults in localconfig; if you changed those, you need to modify the commands
appropriately.
On most systems, to create a user in PostgreSQL, login as the root user, and then switch to being the postgres (Unix)
user:
su - postgres
As the postgres user, you then need to create a new user:
createuser -U postgres -dRSP bugs
When asked for a password, provide one and write it down for later reference.
The created user will not be a superuser (-S) and will not be able to create new users (-R). He will only have the ability
to create databases (-d).
Permit Access
Edit the ﬁle pg_hba.conf which is usually located in /var/lib/pgsql/data/. In this ﬁle, you will need to
add a new line to it as follows:
host
all
bugs
127.0.0.1
255.255.255.255
md5
This means that for TCP/IP (host) connections, allow connections from ‘127.0.0.1’ to ‘all’ databases on this server
from the ‘bugs’ user, and use password authentication (‘md5’) for that user.
Now, you will need to stop and start PostgreSQL fully. (Do not use any ‘restart’ command, due to the possibility of a
change to postgresql.conf.)
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.6.3 Oracle
Warning: Bugzilla supports Oracle, but none of the current developers run it. Your mileage may vary.
You need Oracle version 10.02.0 or later.
3.6. Database Server
43

Bugzilla Documentation, Release 5.0.6
Create a New Tablespace
You can use the existing tablespace or create a new one for Bugzilla. To create a new tablespace, run the following
command:
CREATE TABLESPACE bugs
DATAFILE '*$path_to_datafile*' SIZE 500M
AUTOEXTEND ON NEXT 30M MAXSIZE UNLIMITED
Here, the name of the tablespace is ‘bugs’, but you can choose another name. $path_to_dataﬁle is the path to the ﬁle
containing your database, for instance /u01/oradata/bugzilla.dbf. The initial size of the database ﬁle is set
in this example to 500 Mb, with an increment of 30 Mb everytime we reach the size limit of the ﬁle.
Add a User to Oracle
The user name and password must match what you set in localconfig ($db_user and $db_pass, respectively).
Here, we assume that the user name is ‘bugs’ and the tablespace name is the same as above.
CREATE USER bugs
IDENTIFIED BY "$db_pass"
DEFAULT TABLESPACE bugs
TEMPORARY TABLESPACE TEMP
PROFILE DEFAULT;
-- GRANT/REVOKE ROLE PRIVILEGES
GRANT CONNECT TO bugs;
GRANT RESOURCE TO bugs;
-- GRANT/REVOKE SYSTEM PRIVILEGES
GRANT UNLIMITED TABLESPACE TO bugs;
GRANT EXECUTE ON CTXSYS.CTX_DDL TO bugs;
Conﬁgure the Web Server
If you use Apache, append these lines to httpd.conf to set ORACLE_HOME and LD_LIBRARY_PATH. For
instance:
SetEnv ORACLE_HOME /u01/app/oracle/product/10.2.0/
SetEnv LD_LIBRARY_PATH /u01/app/oracle/product/10.2.0/lib/
When this is done, restart your web server.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.6.4 SQLite
Warning:
Due to SQLite’s concurrency limitations we recommend SQLite only for small and development
Bugzilla installations.
Once you have SQLite installed, no additional conﬁguration is required to run Bugzilla.
The database will be stored in $BUGZILLA_HOME/data/db/$db_name, where $db_name is the database name
deﬁned in localconfig.
44
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.7 Essential Post-Installation Conﬁguration
Bugzilla is conﬁgured in the Administration Parameters. Log in with the administrator account you deﬁned in the
last checksetup.pl run, then click Administration in the header, and then Parameters. You will see the different
parameter sections down the left hand side of the page.
3.7.1 Parameters
There are a few parameters which it is very important to deﬁne (or explicitly decide not to change).
The ﬁrst set of these are in the Required Settings section.
• urlbase: this is the URL by which people should access Bugzilla’s front page.
• sslbase: if you have conﬁgured SSL on your Bugzilla server, this is the SSL URL by which people should access
Bugzilla’s front page.
• ssl_redirect: Set this if you want everyone to be redirected to use the SSL version. Recommended if you have
set up SSL.
• cookiepath: Bugzilla uses cookies to remember who each user is. In order to set those cookies in the correct
scope, you may need to set a cookiepath. If your Bugzilla is at the root of your domain, you don’t need to change
the default value.
You may want to put your email address in the maintainer parameter in the General section. This will then let people
know who to contact if they see problems or hit errors.
If you don’t want just anyone able to read your Bugzilla, set the requirelogin parameter in the User Authentication
section, and change or clear the createemailregexp parameter.
3.7.2 Email
Bugzilla requires the ability to set up email. You have a number of choices here. The simplest is to get Gmail or some
other email provider to do the work for you, but you can also hand the mail off to a local email server, or run one
yourself on the Bugzilla machine.
Bugzilla’s approach to email is conﬁgured in the Email section of the Parameters.
Use Another Mail Server
This section corresponds to choosing a mail_delivery_method of SMTP.
This method passes the email off to an existing mail server. Your organization may well already have one running
for their internal email, and may prefer to use it for conﬁdentiality reasons. If so, you need the following information
about it:
• The domain name of the server (Parameter: smtpserver)
3.7. Essential Post-Installation Conﬁguration
45

Bugzilla Documentation, Release 5.0.6
• The username and password to use (Parameters: smtp_username and smtp_password)
• Whether the server uses SSL (Parameter: smtp_ssl)
• The address you should be sending mail ‘From’ (Parameter: mailfrom)
If your organization does not run its own mail server, you can use the services of one of any number of popular email
providers.
Gmail
Visit https://gmail.com and create a new Gmail account for your Bugzilla to use. Then, set the following parameter
values in the “Email” section:
• mail_delivery_method: SMTP
• mailfrom: new_gmail_address@gmail.com
• smtpserver: smtp.gmail.com:465
• smtp_username: new_gmail_address@gmail.com
• smtp_password: new_gmail_password
• smtp_ssl: On
Run Your Own Mail Server
This section corresponds to choosing a mail_delivery_method of Sendmail.
Unless you know what you are doing, and can deal with the possible problems of spam, bounces and blacklists, it
is probably unwise to set up your own mail server just for Bugzilla. However, if you wish to do so, some guidance
follows.
On Linux, any Sendmail-compatible MTA (Mail Transfer Agent) will sufﬁce. Sendmail, Postﬁx, qmail and Exim are
examples of common MTAs. Sendmail is the original Unix MTA, but the others are easier to conﬁgure, and therefore
many people replace Sendmail with Postﬁx or Exim. They are drop-in replacements, so Bugzilla will not distinguish
between them.
If you are using Sendmail, version 8.7 or higher is required. If you are using a Sendmail-compatible MTA, it must be
compatible with at least version 8.7 of Sendmail.
On Mac OS X 10.3 and later, Postﬁx is used as the built-in email server. Postﬁx provides an executable that mimics
sendmail enough to satisfy Bugzilla.
On Windows, if you ﬁnd yourself unable to use Bugzilla’s built-in SMTP support (e.g. because the necessary Perl mod-
ules are not available), you can use Sendmail with a little application called sendmail.exe, which provides sendmail-
compatible calling conventions and encapsulates the SMTP communication to another mail server. Like Bugzilla,
sendmail.exe can be conﬁgured to log SMTP communication to a ﬁle in case of problems.
Detailed information on conﬁguring an MTA is outside the scope of this document. Consult the manual for the speciﬁc
MTA you choose for detailed installation instructions. Each of these programs will have their own conﬁguration ﬁles
where you must conﬁgure certain parameters to ensure that the mail is delivered properly. They are implemented as
services, and you should ensure that the MTA is in the auto-start list of services for the machine.
If a simple mail sent with the command-line mail program succeeds, then Bugzilla should also be ﬁne.
46
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
Troubleshooting
If you are having trouble, check that any conﬁgured SMTP server can be reached from your Bugzilla server and that
any given authentication credentials are valid. If these things seem correct and your mails are still not sending, check if
your OS uses SELinux or AppArmor. Either of these may prevent your web server from sending email. The SELinux
boolean httpd_can_sendmail may need to be set to True.
If all those things don’t help, activate the smtp_debug parameter and check your webserver logs.
3.7.3 Products, Components, Versions and Milestones
Bugs in Bugzilla are categorised into Products and, inside those Products, Components (and, optionally, if you turn on
the useclassiﬁcations parameter, Classiﬁcations as a level above Products).
Bugzilla comes with a single Product, called “TestProduct”, which contains a single component, imaginatively called
“TestComponent”. You will want to create your own Products and their Components. It’s OK to have just one
Component inside a Product. Products have Versions (which represents the version of the software in which a bug was
found) and Target Milestones (which represent the future version of the product in which the bug is hopefully to be
ﬁxed - or, for RESOLVED bugs, was ﬁxed. You may also want to add some of those.
Once you’ve created your own, you will want to delete TestProduct (which will delete TestComponent automatically).
Note that if you’ve ﬁled a bug in TestProduct to try Bugzilla out, you’ll need to move it elsewhere before it’s possible
to delete TestProduct.
Now, you may want to do some of the Optional Post-Install Conﬁguration.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.8 Optional Post-Install Conﬁguration
Bugzilla has a number of optional features. This section describes how to conﬁgure or enable them.
3.8.1 Recurring Tasks
Several of the below features require you to set up a script to run at recurring intervals. The method of doing this varies
by operating system.
Linux
Run:
crontab -e
This should bring up the crontab ﬁle in your editor. Add the relevant cron line from the sections below in order to
enable the corresponding feature.
3.8. Optional Post-Install Conﬁguration
47

Bugzilla Documentation, Release 5.0.6
Windows
Windows comes with a Task Scheduler. To run a particular script, do the following:
1. Control Panel –> Scheduled Tasks –> Add Scheduled Task
2. Next
3. Browse
4. Find perl.exe (normally C:\Perl\bin\perl.exe)
5. Give the task a name, such as “Bugzilla <scriptname>”
6. Request the task be performed at your desired time and interval
7. If you’re running Apache as a user, not as SYSTEM, enter that user here. Otherwise you’re best off creating an
account that has write access to the Bugzilla directory and using that
8. Tick “Open Advanced Properties..” and click Finish
9. Append
the
script
name
to
the
end
of
the
“Run”
ﬁeld.
eg
C:\Perl\bin\perl.exe
C:\Bugzilla\<scriptname>
10. Change “start in” to the Bugzilla directory
3.8.2 Bug Graphs
If you have installed the necessary Perl modules, as indicated by checksetup.pl, you can ask Bugzilla to regularly
collect statistics so that you can see graphs and charts.
On Linux, use a cron line as follows:
5 0 * * * cd <your-bugzilla-directory> && ./collectstats.pl
On Windows, schedule the collectstats.pl script to run daily.
After two days have passed you’ll be able to view bug graphs from the Reports page.
3.8.3 Whining
Users can conﬁgure Bugzilla to annoy them at regular intervals, by having Bugzilla execute saved searches at certain
times and emailing the results to the user. This is known as “Whining”. The details of how a user conﬁgures Whining
is described in Whining, but for it to work a Perl script must be executed at regular intervals.
On Linux, use a cron line as follows:
*/15 * * * * cd <your-bugzilla-directory> && ./whine.pl
On Windows, schedule the whine.pl script to run every 15 minutes.
3.8.4 Whining at Untriaged Bugs
It’s possible for bugs to languish in an untriaged state. Bugzilla has a speciﬁc system to issue complaints about this
particular problem to all the relevant engineers automatically by email.
On Linux, use a cron line as follows:
48
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
55 0 * * * cd <your-bugzilla-directory> && ./whineatnews.pl
On Windows, schedule the whineatnews.pl script to run daily.
3.8.5 Dependency Graphs
Bugzilla can draw graphs of the dependencies (depends on/blocks relationships) between bugs, if you install a package
called graphviz.
Linux
Put the complete path to the dot command (from the graphviz package) in the webdotbase parameter. E.g.
/usr/bin/dot.
Windows
Download and install Graphviz from the Graphviz website. Put the complete path to dot.exe in the webdotbase
parameter, e.g. C:\Program Files (x86)\Graphviz2.38\bin\dot.exe.
3.8.6 Documentation
Bugzilla has extensive documentation and help, written in reStructured Text format. A generic compiled copy exists
on bugzilla.readthedocs.org, and Help links point to it by default. You can also build and use a local copy of the
documentation, for instance because you have added Bugzilla extensions which come with documentation, or because
your users don’t have Internet access from their machines.
Bugzilla will automatically detect that you’ve compiled the documentation and link to it in preference to the copy on
the Internet. Don’t forget to recompile it when you upgrade Bugzilla or install new extensions.
Linux
• Install Sphinx. Most Linux distros have it in a package named python-sphinx.
• Then go to your Bugzilla directory and run:
docs/makedocs.pl
Windows
• Download and install Python. Both Python 2.7 and 3.x will work. Adding python to the PATH environment
variable, as suggested by the Python installer, will make your life easier.
• Install Sphinx. Run cmd.exe and type:
pip install sphinx
• Then go to your C:\bugzilla\docs directory and run:
makedocs.pl
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.8. Optional Post-Install Conﬁguration
49

Bugzilla Documentation, Release 5.0.6
3.9 Migrating From Other Bug-Tracking Systems
Bugzilla has a framework you can use for migrating from other bug-tracking systems - Bugzilla::Migrate. It provides
the infrastructure you will need, but requires a module to be written to deﬁne the speciﬁcs of the system you are
coming from. One exists for Gnats. If you write one for a popular system, please share your code with us.
Alternatively, Bugzilla comes with a script, importxml.pl, which imports bugs in Bugzilla’s XML format. You
can see examples of this format by clicking the XML link at the bottom of a bug in a running Bugzilla. You would
need to read the script to see how it handles errors, default values, creating non-existing values and so on.
Bugzilla::Migrate is preferred if possible.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.10 Moving Bugzilla Between Machines
Sometimes it’s necessary to take a working installation of Bugzilla and move it to new hardware. This page explains
how to do that, assuming that you have Bugzilla’s webserver and database on the same machine, and you are moving
both of them.
You are advised to install the same version of Bugzilla on the new machine as the old machine - any upgrade you also
need to do can then be done as a separate step. But if you do install a newer version, things should still work.
1. Shut down your Bugzilla by loading the front page, going to Administration | Parameters | General and putting
some explanatory text into the shutdownhtml parameter.
2. Make a backup of the bugs database.
3. On your new machine, install Bugzilla using the instructions at Installation and Maintenance Guide. Look at
the old machine if you need to know what values you used for conﬁguring e.g. MySQL.
4. Copy the data directory and the localconfig ﬁle from the old Bugzilla installation to the new one.
5. If anything about your database conﬁguration changed (location of the server, username, password, etc.) as part
of the move, update the appropriate variables in localconfig.
6. If the new URL to your new Bugzilla installation is different from the old one, update the urlbase parameter in
data/params.json using a text editor.
7. Copy the database backup ﬁle from your old server to the new one.
8. Create an empty bugs database on the new server. For MySQL, that would look like this:
mysql -u root -p -e "CREATE DATABASE bugs DEFAULT CHARACTER SET utf8;"
9. Import your backup ﬁle into your new bugs database. Again, for MySQL:
mysql -u root -p bugs < $BACKUP_FILE_NAME
If you get an error about “packet too large” or “MySQL server has gone away”, you need to adjust the
max_allowed_packet setting in your my.cnf ﬁle (usually /etc/my.cnf) ﬁle to match or exceed the
value conﬁgured in the same ﬁle in your old version of MySQL.
If there are any errors during this step, you have to work out what went wrong, and then drop the database,
create it again using the step above, and run the import again.
10. Run checksetup.pl to make sure all is OK. (Unless you are using a newer version of Bugzilla on your new
server, this should not make any changes.)
./checksetup.pl
50
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
11. Activate your new Bugzilla by loading the front page on the new server, going to Administration | Parameters |
General and removing the text from the shutdownhtml parameter.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.11 Upgrading
You can upgrade Bugzilla from any version to any later version in one go - there is no need to pass through intermediate
versions unless you are changing the method by which you obtain the code along the way.
Warning: Upgrading is a one-way process. You cannot “downgrade” an upgraded Bugzilla. If you wish to revert
to the old Bugzilla version for any reason, you will have to restore your system from a backup. Those with critical
data or large installations may wish to test the upgrade on a development server ﬁrst, using a copy of the production
data and conﬁguration.
Bugzilla uses the Git version control system to store its code. A modern Bugzilla installation consists of a checkout of
a stable version of the code from our Git repository. This makes upgrading much easier. If this is already true of your
installation, see Upgrading with Git.
Before Git, we used to use Bazaar and, before that, CVS. If your installation of Bugzilla consists of a checkout from
one of those two systems, you need to upgrade in three steps:
1. Upgrade to the latest point release of your current Bugzilla version.
2. Move to Git while staying on exactly the same release.
3. Upgrade to the latest Bugzilla using the instructions for Upgrading with Git.
See Migrating from Bazaar or Migrating from CVS as appropriate.
Some Bugzillas were installed simply by downloading a copy of the code as an archive ﬁle (“tarball”). However,
recent tarballs have included source code management system information, so you may be able to use the Git, Bzr or
CVS instructions.
If you aren’t sure which of these categories you fall into, to ﬁnd out which version control system your copy of Bugzilla
recognizes, look for the following subdirectories in your root Bugzilla directory:
• .git: you installed using Git - follow Upgrading with Git.
• .bzr: you installed using Bazaar - follow Migrating from Bazaar.
• CVS: you installed using CVS - follow Migrating from CVS.
• None of the above: you installed using an old tarball - follow Migrating from a Tarball.
It is also possible, particularly if your server machine does not have and cannot be conﬁgured to have access to the
public internet, to upgrade using a tarball. See Upgrading with a Tarball.
Whichever path you use, you may need help with Upgrading a Customized or Extended Bugzilla.
3.11.1 Upgrading with Git
Upgrading to new Bugzilla releases is very simple, and you can upgrade from any version to any later version in one
go - there is no need for intermediate steps. There is a script named checksetup.pl included with Bugzilla that
will automatically do all of the database migration for you.
3.11. Upgrading
51

Bugzilla Documentation, Release 5.0.6
Bugzilla is now hosted on Github, but we used to be hosted on git.mozilla.org. If you got the code from git.mozilla.org,
you need to point your checkout at Github instead. To ﬁnd out, run:
git remote -v
If you see “git.mozilla.org” anywhere in the output, then run:
git remote set-url origin https://github.com/bugzilla/bugzilla
This change will only ever need to be done once.
Before You Upgrade
Before you start your upgrade, there are a few important steps to take:
1. Read the Release Notes of the version you’re upgrading to and all intermediate versions, particularly the “Notes
for Upgraders” sections, if present. They may make you aware of additional considerations.
2. Run the Sanity Check on your installation. Attempt to ﬁx all warnings that the page produces before you start,
or it’s possible that you may experience problems during your upgrade.
3. Work out how to back up your Bugzilla entirely, and how to restore from a backup if need be.
Customized Bugzilla?
If you have modiﬁed the code or templates of your Bugzilla, then upgrading requires a bit more thought and effort
than the simple process below. See Choosing a Customization Method for a discussion of the various methods of code
customization that may have been used.
The larger the jump you are trying to make, the more difﬁcult it is going to be to upgrade if you have made local code
customizations. Upgrading from 4.2 to 4.2.1 should be fairly painless even if you are heavily customized, but going
from 2.18 to 4.2 is going to mean a fair bit of work re-writing your local changes to use the new ﬁles, logic, templates,
etc. If you have done no local changes at all, however, then upgrading should be approximately the same amount of
work regardless of how long it has been since your version was released.
If you have made customizations, you should do the upgrade on a test system with the same conﬁguration and make
sure all your customizations still work. If not, port and test them so you have them ready to reapply once you do the
upgrade for real.
You can see if you have local code customizations using:
git diff
If that comes up empty, then run:
git log | head
and see if the last commit looks like one made by the Bugzilla team, or by you. If it looks like it was made by us, then
you have made no local code customizations.
Starting the Upgrade
When you are ready to go:
1. Shut down your Bugzilla installation by putting some explanatory text in the shutdownhtml parameter.
2. Make all necessary backups. THIS IS VERY IMPORTANT. If anything goes wrong during the upgrade, having
a backup allows you to roll back to a known good state.
52
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
Getting The New Bugzilla
In the commands below, $BUGZILLA_HOME represents the directory in which Bugzilla is installed. Assuming you
followed the installation instructions and your Bugzilla is a checkout of a stable branch, you can get the latest point
release of your current version by simply doing:
cd $BUGZILLA_HOME
git pull
If you want to upgrade to a newer release of Bugzilla, then you will additionally need to do:
git checkout release-X.X-stable
where “X.X” is the 2-digit version number of the stable version you want to upgrade to (e.g. “4.4”).
Note: Do not attempt to downgrade Bugzilla this way - it won’t work.
If you have local code customizations, git will attempt to merge them. If it fails, then you should implement the plan
you came up with when you detected these customizations in the step above, before you started the upgrade.
Upgrading the Database
Run checksetup.pl. This will do everything required to convert your existing database and settings to the new
version.
cd $BUGZILLA_HOME
./checksetup.pl
Warning:
For some upgrades, running checksetup.pl on a large installation (75,000 or more
bugs) can take a long time, possibly several hours, if e.g. indexes need to be rebuilt. If this length
of downtime would be a problem for you, you can determine timings for your particular situation by
doing a test upgrade on a development server with the production data.
checksetup.pl may also tell you that you need some additional Perl modules, or newer versions of the ones
you have.
You will need to install these, either system-wide or using the install-module.pl script that
checksetup.pl recommends.
Finishing The Upgrade
1. Reactivate Bugzilla by clear the text that you put into the shutdownhtml parameter.
2. Run another Sanity Check on your upgraded Bugzilla. It is recommended that you ﬁx any problems you see
immediately. Failure to do this may mean that Bugzilla may not work entirely correctly.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.11. Upgrading
53

Bugzilla Documentation, Release 5.0.6
3.11.2 Migrating from Bazaar
The procedure to migrate to Git is as follows. The idea is to switch version control systems without changing the
version of Bugzilla you are using, to minimise the risk of conﬂict or problems. Any upgrade can then happen as a
separate step.
The old bzr.mozilla.org server has been decommissioned. This may not be a problem but, in some cases, running some
of the commands below will make bzr attempt to contact the server and time out. If and only if that happens to you,
you will need to switch to the new server, as follows. Enter your Bugzilla directory and run:
bzr info
and look at the Location: section of the output. If it says “light checkout root” then run:
bzr -Ossl.cert_reqs=none switch https://bzr.bugzilla.org/bugzilla/$VERSION
Alternatively, if it says “branch root” or “checkout root” then run:
bzr -Ossl.cert_reqs=none pull --remember https://bzr.bugzilla.org/bugzilla/
$VERSION
Replace $VERSION with the two-digit version number of your current Bugzilla, e.g. “4.2” (see below for how to ﬁnd
that).
Download Code from Git
First, you need to ﬁnd what version of Bugzilla you are using. It should be in the top right corner of the front page but,
if not, open the ﬁle Bugzilla/Constants.pm in your Bugzilla directory and search for BUGZILLA_VERSION.
Then, you need to download an additional copy of your current version of Bugzilla from the git repository, and place
it in a separate directory alongside your existing Bugzilla installation (which we will assume is in a directory called
bugzilla).
To do this, you will need a copy of the git program. All Linux distributions have it; search your package manager
for “git”. On Windows or Mac OS X, you can download the ofﬁcial build.
Once git is installed, run these commands to pull a copy of Bugzilla:
git clone https://github.com/bugzilla/bugzilla bugzilla-new
cd bugzilla-new
git checkout release-$VERSION
Replace $VERSION with the three-digit version number of your current Bugzilla, e.g. “4.2.2”. (If the the ﬁnal digit
would have been a 0, omit it - so use “4.4” for the ﬁrst release in the 4.4 series.)
You will get a message about a ‘detached HEAD’. Don’t worry; your head is still ﬁrmly attached to your shoulders.
Save Any Local Customizations
Go into your original Bugzilla directory and run this command:
bzr diff > patch.diff
If you have made customizations to your Bugzilla, and you made them by changing the Bugzilla code itself (rather
than using the Extension system), then patch.diff will have signiﬁcant content. You will want to keep a copy of
those changes by keeping a copy of this ﬁle and any ﬁles referenced in it by “Only in” lines. If the ﬁle has zero size or
only insigniﬁcant content, you haven’t made any local customizations of this sort.
54
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
Shut Down Bugzilla
At this point, you should shut down Bugzilla to make sure nothing changes while you make the switch. Go into the
administrative interface and put an appropriate message into the shutdownhtml parameter, which is in the “General”
section of the administration parameters. As the name implies, HTML is allowed.
This would be a good time to make Backups. We shouldn’t be affecting the database, but you can’t be too careful.
Copy Across Data and Modules
Copy the contents of the following directories from your current installation of Bugzilla into the corresponding direc-
tory in bugzilla-new/:
lib/
data/
template/en/custom (may or may not exist)
You also need to copy any extensions you have written or installed, which are in the extensions/ directory. The
command bzr status extensions/ should help you work out what you added, if anything.
Lastly, copy the following ﬁle from your current installation of Bugzilla into the corresponding place in
bugzilla-new/:
localconfig
This ﬁle contains your database password and access details. Because your two versions of Bugzilla are the same, this
should all work ﬁne.
Reapply Local Customizations
If your patch.diff ﬁle was zero sized, you can jump to the next step. Otherwise, you have to apply the patch to
your new installation. If you are on Windows and you don’t have the patch program, you can download it from
GNUWin. Once downloaded, you must copy patch.exe into the Windows directory.
Copy patch.diff into the bugzilla-new directory and then do:
patch -p0 --dry-run < patch.diff
The patch should apply cleanly because you have exactly the same version of Bugzilla in both directories. If it does,
remove the --dry-run and rerun the command to apply it for real. If it does not apply cleanly, it is likely that you
have managed to get a Bugzilla version mismatch between the two directories.
Swap The New Version In
Now we swap the directories over, and run checksetup.pl to conﬁrm that all is well. From the directory containing the
bugzilla and bugzilla-new directories, run:
mv bugzilla bugzilla-old
mv bugzilla-new bugzilla
cd bugzilla
./checksetup.pl
Running checksetup.pl should not result in any changes to your database at the end of the run. If it does, then
it’s most likely that the two versions of Bugzilla you have are not, in fact, the same.
3.11. Upgrading
55

Bugzilla Documentation, Release 5.0.6
Re-enable Bugzilla
Go into the administrative interface and clear the contents of the shutdownhtml parameter.
Test Bugzilla
Use your Bugzilla for several days to check that the switch has had no detrimental effects. Then, if necessary, follow
the instructions in Upgrading with Git to upgrade to the latest version of Bugzilla.
Rolling Back
If something goes wrong at any stage of the switching process (e.g. your patch doesn’t apply, or checksetup doesn’t
complete), you can always just switch the directories back (if you’ve got that far) and re-enable Bugzilla (if you
disabled it) and then seek help. Even if you have re-enabled Bugzilla, and ﬁnd a problem a little while down the road,
you are still using the same version so there would be few side effects to switching the directories back a day or three
later.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.11.3 Migrating from CVS
The procedure to migrate to Git is as follows. The idea is to switch version control systems without changing the
version of Bugzilla you are using, to minimise the risk of conﬂict or problems. Any upgrade can then happen as a
separate step.
Download Code from Git
First, you need to ﬁnd what version of Bugzilla you are using. It should be in the top right corner of the front page but,
if not, open the ﬁle Bugzilla/Constants.pm in your Bugzilla directory and search for BUGZILLA_VERSION.
Then, you need to download an additional copy of your current version of Bugzilla from the git repository, and place
it in a separate directory alongside your existing Bugzilla installation (which we will assume is in a directory called
bugzilla).
To do this, you will need a copy of the git program. All Linux distributions have it; search your package manager
for “git”. On Windows or Mac OS X, you can download the ofﬁcial build.
Once git is installed, run these commands to pull a copy of Bugzilla:
git clone https://github.com/bugzilla/bugzilla bugzilla-new
cd bugzilla-new
git checkout release-$VERSION
Replace $VERSION with the three-digit version number of your current Bugzilla, e.g. “4.2.2”. (If the the ﬁnal digit
would have been a 0, omit it - so use “4.4” for the ﬁrst release in the 4.4 series.)
You will get a message about a ‘detached HEAD’. Don’t worry; your head is still ﬁrmly attached to your shoulders.
56
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
Save Any Local Customizations
Go into your original Bugzilla directory and run this command:
cvs diff -puN > patch.diff
If you have made customizations to your Bugzilla, and you made them by changing the Bugzilla code itself (rather
than using the Extension system), then patch.diff will have signiﬁcant content. You will want to keep a copy of
those changes by keeping a copy of this ﬁle and any ﬁles referenced in it by “Only in” lines. If the ﬁle has zero size or
only insigniﬁcant content, you haven’t made any local customizations of this sort.
Shut Down Bugzilla
At this point, you should shut down Bugzilla to make sure nothing changes while you make the switch. Go into the
administrative interface and put an appropriate message into the shutdownhtml parameter, which is in the “General”
section of the administration parameters. As the name implies, HTML is allowed.
This would be a good time to make Backups. We shouldn’t be affecting the database, but you can’t be too careful.
Copy Across Data and Modules
Copy the contents of the following directories from your current installation of Bugzilla into the corresponding direc-
tory in bugzilla-new/:
lib/
data/
template/en/custom (may or may not exist)
You also need to copy any extensions you have written or installed, which are in the extensions/ directory. The
command cvs status extensions/ should help you work out what you added, if anything.
Lastly, copy the following ﬁle from your current installation of Bugzilla into the corresponding place in
bugzilla-new/:
localconfig
This ﬁle contains your database password and access details. Because your two versions of Bugzilla are the same, this
should all work ﬁne.
Reapply Local Customizations
If your patch.diff ﬁle was zero sized, you can jump to the next step. Otherwise, you have to apply the patch to
your new installation. If you are on Windows and you don’t have the patch program, you can download it from
GNUWin. Once downloaded, you must copy patch.exe into the Windows directory.
Copy patch.diff into the bugzilla-new directory and then do:
patch -p0 --dry-run < patch.diff
The patch should apply cleanly because you have exactly the same version of Bugzilla in both directories. If it does,
remove the --dry-run and rerun the command to apply it for real. If it does not apply cleanly, it is likely that you
have managed to get a Bugzilla version mismatch between the two directories.
3.11. Upgrading
57

Bugzilla Documentation, Release 5.0.6
Swap The New Version In
Now we swap the directories over, and run checksetup.pl to conﬁrm that all is well. From the directory containing the
bugzilla and bugzilla-new directories, run:
mv bugzilla bugzilla-old
mv bugzilla-new bugzilla
cd bugzilla
./checksetup.pl
Running checksetup.pl should not result in any changes to your database at the end of the run. If it does, then
it’s most likely that the two versions of Bugzilla you have are not, in fact, the same.
Re-enable Bugzilla
Go into the administrative interface and clear the contents of the shutdownhtml parameter.
Test Bugzilla
Use your Bugzilla for several days to check that the switch has had no detrimental effects. Then, if necessary, follow
the instructions in Upgrading with Git to upgrade to the latest version of Bugzilla.
Rolling Back
If something goes wrong at any stage of the switching process (e.g. your patch doesn’t apply, or checksetup doesn’t
complete), you can always just switch the directories back (if you’ve got that far) and re-enable Bugzilla (if you
disabled it) and then seek help. Even if you have re-enabled Bugzilla, and ﬁnd a problem a little while down the road,
you are still using the same version so there would be few side effects to switching the directories back a day or three
later.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.11.4 Migrating from a Tarball
The procedure to migrate to Git is as follows. The idea is to switch without changing the version of Bugzilla you are
using, to minimise the risk of conﬂict or problems. Any upgrade can then happen as a separate step.
Download Code from Git
First, you need to ﬁnd what version of Bugzilla you are using. It should be in the top right corner of the front page but,
if not, open the ﬁle Bugzilla/Constants.pm in your Bugzilla directory and search for BUGZILLA_VERSION.
Then, you need to download an additional copy of your current version of Bugzilla from the git repository, and place
it in a separate directory alongside your existing Bugzilla installation (which we will assume is in a directory called
bugzilla).
To do this, you will need a copy of the git program. All Linux distributions have it; search your package manager
for “git”. On Windows or Mac OS X, you can download the ofﬁcial build.
Once git is installed, run these commands to pull a copy of Bugzilla:
58
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
git clone https://github.com/bugzilla/bugzilla bugzilla-new
cd bugzilla-new
git checkout release-$VERSION
Replace $VERSION with the three-digit version number of your current Bugzilla, e.g. “4.2.2”. (If the the ﬁnal digit
would have been a 0, omit it - so use “4.4” for the ﬁrst release in the 4.4 series.)
You will get a message about a ‘detached HEAD’. Don’t worry; your head is still ﬁrmly attached to your shoulders.
Save Any Local Customizations
Go into your original Bugzilla directory and run this command:
diff -ru -x data -x lib -x docs -x .git -x CVS -x .cvsignore -x .bzr -x .
bzrignore -x .bzrrev ../bugzilla-new . > ../patch.diff
If you have made customizations to your Bugzilla, and you made them by changing the Bugzilla code itself (rather
than using the Extension system), then patch.diff will have signiﬁcant content. You will want to keep a copy of
those changes by keeping a copy of this ﬁle and any ﬁles referenced in it by “Only in” lines. If the ﬁle has zero size or
only insigniﬁcant content, you haven’t made any local customizations of this sort.
Shut Down Bugzilla
At this point, you should shut down Bugzilla to make sure nothing changes while you make the switch. Go into the
administrative interface and put an appropriate message into the shutdownhtml parameter, which is in the “General”
section of the administration parameters. As the name implies, HTML is allowed.
This would be a good time to make Backups. We shouldn’t be affecting the database, but you can’t be too careful.
Copy Across Data and Modules
Copy the contents of the following directories from your current installation of Bugzilla into the corresponding direc-
tory in bugzilla-new/:
lib/
data/
template/en/custom (may or may not exist)
You also need to copy any extensions you have written or installed, which are in the extensions/ directory. Copy
across any subdirectories which do not exist in your new install.
Lastly, copy the following ﬁle from your current installation of Bugzilla into the corresponding place in
bugzilla-new/:
localconfig
This ﬁle contains your database password and access details. Because your two versions of Bugzilla are the same, this
should all work ﬁne.
Reapply Local Customizations
If your patch.diff ﬁle was zero sized, you can jump to the next step. Otherwise, you have to apply the patch to
your new installation. If you are on Windows and you don’t have the patch program, you can download it from
GNUWin. Once downloaded, you must copy patch.exe into the Windows directory.
3.11. Upgrading
59

Bugzilla Documentation, Release 5.0.6
Copy patch.diff into the bugzilla-new directory and then do:
patch -p0 --dry-run < patch.diff
The patch should apply cleanly because you have exactly the same version of Bugzilla in both directories. If it does,
remove the --dry-run and rerun the command to apply it for real. If it does not apply cleanly, it is likely that you
have managed to get a Bugzilla version mismatch between the two directories.
Swap The New Version In
Now we swap the directories over, and run checksetup.pl to conﬁrm that all is well. From the directory containing the
bugzilla and bugzilla-new directories, run:
mv bugzilla bugzilla-old
mv bugzilla-new bugzilla
cd bugzilla
./checksetup.pl
Running checksetup.pl should not result in any changes to your database at the end of the run. If it does, then
it’s most likely that the two versions of Bugzilla you have are not, in fact, the same.
Re-enable Bugzilla
Go into the administrative interface and clear the contents of the shutdownhtml parameter.
Test Bugzilla
Use your Bugzilla for several days to check that the switch has had no detrimental effects. Then, if necessary, follow
the instructions in Upgrading with Git to upgrade to the latest version of Bugzilla.
Rolling Back
If something goes wrong at any stage of the switching process (e.g. your patch doesn’t apply, or checksetup doesn’t
complete), you can always just switch the directories back (if you’ve got that far) and re-enable Bugzilla (if you
disabled it) and then seek help. Even if you have re-enabled Bugzilla, and ﬁnd a problem a little while down the road,
you are still using the same version so there would be few side effects to switching the directories back a day or three
later.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.11.5 Upgrading with a Tarball
If you are unable (or unwilling) to use Git, another option is to obtain a tarball of the latest version from our website
and upgrade your Bugzilla installation using that.
Without a source code management system to help you, the process may be trickier.
60
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
Before You Upgrade
Before you start your upgrade, there are a few important steps to take:
1. Read the Release Notes of the version you’re upgrading to and all intermediate versions, particularly the “Notes
for Upgraders” sections, if present. They may make you aware of additional considerations.
2. Run the Sanity Check on your installation. Attempt to ﬁx all warnings that the page produces before you start,
or it’s possible that you may experience problems during your upgrade.
3. Work out how to back up your Bugzilla entirely, and how to restore from a backup if need be.
Customized Bugzilla?
If you have modiﬁed the code or templates of your Bugzilla, then upgrading requires a bit more thought and effort
than the simple process below. See Choosing a Customization Method for a discussion of the various methods of code
customization that may have been used.
The larger the jump you are trying to make, the more difﬁcult it is going to be to upgrade if you have made local code
customizations. Upgrading from 4.2 to 4.2.1 should be fairly painless even if you are heavily customized, but going
from 2.18 to 4.2 is going to mean a fair bit of work re-writing your local changes to use the new ﬁles, logic, templates,
etc. If you have done no local changes at all, however, then upgrading should be approximately the same amount of
work regardless of how long it has been since your version was released.
If you have made customizations, you should do the upgrade on a test system with the same conﬁguration and make
sure all your customizations still work. If not, port and test them so you have them ready to reapply once you do the
upgrade for real.
As you are using a tarball and not an SCM, it’s not at all easy to see if you’ve made local code customizations. You
may have to use institutional knowledge, or download a fresh copy of your current version of Bugzilla and compare
the two directories. If you ﬁnd that you have, you’ll need to turn them into a patch ﬁle, perhaps by difﬁng the two
directories, and then reapply that patch ﬁle later. If you are customizing Bugzilla locally, please consider rebasing
your install on top of git.
Getting The New Bugzilla
Download a copy of the latest version of Bugzilla from the Download Page into a separate directory (which we will
call bugzilla-new) alongside your existing Bugzilla installation (which we will assume is in a directory called
bugzilla).
Copy Across Data and Modules
Copy the contents of the following directories from your current installation of Bugzilla into the corresponding direc-
tory in bugzilla-new/:
lib/
data/
template/en/custom (may or may not exist)
You also need to copy any extensions you have written or installed, which are in the extensions/ directory.
Bugzilla ships with some extensions, so again if you want to know if any of the installed extensions are yours, you
may have to compare with a clean copy of your current version. You can disregard any which have a disabled ﬁle
- those are not enabled.
Lastly, copy the following ﬁle from your current installation of Bugzilla into the corresponding place in
bugzilla-new/:
3.11. Upgrading
61

Bugzilla Documentation, Release 5.0.6
localconfig
This ﬁle contains your database password and access details.
Swap The New Version In
Now we swap the directories over. From the directory containing the bugzilla and bugzilla-new directories,
run:
mv bugzilla bugzilla-old
mv bugzilla-new bugzilla
cd bugzilla
Upgrading the Database
Run checksetup.pl. This will do everything required to convert your existing database and settings to the new
version.
cd $BUGZILLA_HOME
./checksetup.pl
Warning:
For some upgrades, running checksetup.pl on a large installation (75,000 or more
bugs) can take a long time, possibly several hours, if e.g. indexes need to be rebuilt. If this length
of downtime would be a problem for you, you can determine timings for your particular situation by
doing a test upgrade on a development server with the production data.
checksetup.pl may also tell you that you need some additional Perl modules, or newer versions of the ones
you have.
You will need to install these, either system-wide or using the install-module.pl script that
checksetup.pl recommends.
Finishing The Upgrade
1. Reactivate Bugzilla by clear the text that you put into the shutdownhtml parameter.
2. Run another Sanity Check on your upgraded Bugzilla. It is recommended that you ﬁx any problems you see
immediately. Failure to do this may mean that Bugzilla may not work entirely correctly.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.11.6 Upgrading a Customized or Extended Bugzilla
If your Bugzilla has been customized or uses extensions, you will need to make your customizations or extensions
work with your new version of Bugzilla. If this is the case, you are particularly strongly recommended to do a test
upgrade on a test system and use that to help you port forward your customizations.
If your extension came from a third party, look to see if an updated version is available for the version of Bugzilla you
are upgrading to. If not, and you want to continue using it, you’ll need to port it forward yourself.
62
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
If you are upgrading from a version of Bugzilla earlier than 3.6 and have extensions for which a newer version is not
available from an upstream source, then you need to convert them. This is because the extension format changed in
version 3.6. There is a ﬁle called extension-convert.pl in the contrib directory which may be able to help
you with that.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
Bugzilla can automatically notify administrators when new releases are available if the upgrade_notiﬁcation parameter
is set. Administrators will see these notiﬁcations when they access the Bugzilla home page. Bugzilla will check once
per day for new releases. If you are behind a proxy, you may have to set the proxy_url parameter accordingly. If the
proxy requires authentication, use the http://user:pass@proxy_url/ syntax.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.12 Backups
3.12.1 Database
Here are some sample commands you could use to backup your database, depending on what database system you’re
using. You may have to modify these commands for your particular setup. Replace the $VARIABLEs with appropriate
values for your setup.
MySQL
mysqldump --max-allowed-packet=32M -u $USERNAME -p $DATABASENAME > backup.sql
The value for max-allowed-packet should be the value you’ve set in your MySQL conﬁguration ﬁle, and should
be larger than the largest attachment in your database. See the mysqldump documentation for more information on
mysqldump.
PostgreSQL
pg_dump --no-privileges --no-owner -h localhost -U $USERNAME > bugs.sql
3.12.2 Bugzilla
The Bugzilla directory contains some data ﬁles and conﬁguration ﬁles which you would want to retain. A simple
recursive copy will do the job here.
cp -rp $BUGZILLA_HOME /var/backups/bugzilla
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.12. Backups
63

Bugzilla Documentation, Release 5.0.6
3.13 Sanity Check
Over time it is possible for the Bugzilla database to become corrupt or to have anomalies. This could happen through
manual database administration outside of the Bugzilla user interface, or from some other unexpected event. Bugzilla
includes a “Sanity Check” that can perform several basic database checks, and repair certain problems or inconsisten-
cies.
To run a Sanity Check, log in as an Administrator and click the Sanity Check link in the admin page. Any problems
that are found will be displayed in red letters. If the script is capable of ﬁxing a problem, it will present a link to initiate
the ﬁx. If the script cannot ﬁx the problem it will require manual database administration or recovery.
Sanity Check can also be run from the command line via the perl script sanitycheck.pl. The script can also be
run as a cron job. Results will be delivered by email to an address speciﬁed on the command line.
Sanity Check should be run on a regular basis as a matter of best practice.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.14 Merging Accounts
Sometimes, users create a second account, perhaps because they don’t realise they can change the email address
associated with their original account. And then, once they discover this, they don’t want to abandon the history
associated with either account.
The best way forward in this case would be to merge one of their accounts into the other one, so it looked like the target
account had done all the actions of both. In Bugzilla’s contrib directory, there is a script called merge-users.
pl. While code in this directory is not ofﬁcially supported by the Bugzilla team, this script may be useful to you in
solving the above problem.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.15 One Installation, Multiple Instances
This is a somewhat specialist feature; if you don’t know whether you need it, you don’t. It is useful to admins who
want to run many separate instances of Bugzilla from a single installed codebase.
This is possible by using the PROJECT environment variable. When accessed, Bugzilla checks for the existence
of this variable, and if present, uses its value to check for an alternative conﬁguration ﬁle named localconfig.
<PROJECT> in the same location as the default one (localconfig). It also checks for customized templates in a
directory named <PROJECT> in the same location as the default one (template/<langcode>). By default this
is template/en/default so PROJECT’s templates would be located at template/en/PROJECT.
To set up an alternate installation, just export PROJECT=foo before running checksetup.pl for the ﬁrst time.
It will result in a ﬁle called localconfig.foo instead of localconfig. Edit this ﬁle as described above, with
reference to a new database, and re-run checksetup.pl to populate it. That’s all.
Now you have to conﬁgure the web server to pass this environment variable when accessed via an alternate URL, such
as virtual host for instance. The following is an example of how you could do it in Apache, other Webservers may
differ.
64
Chapter 3. Installation and Maintenance Guide

Bugzilla Documentation, Release 5.0.6
<VirtualHost 12.34.56.78:80>
ServerName bugzilla.example.com
SetEnv PROJECT foo
</VirtualHost>
Don’t forget to also export this variable before accessing Bugzilla by other means, such as repeating tasks like those
above.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
3.15. One Installation, Multiple Instances
65

Bugzilla Documentation, Release 5.0.6
66
Chapter 3. Installation and Maintenance Guide

CHAPTER 4
Administration Guide
For those with admin privileges, Bugzilla can be administered using the Administration link in the header. The admin-
istrative controls are divided into several sections:
4.1 Parameters
Bugzilla is conﬁgured by changing various parameters, accessed from the Parameters link, which is found on the
Administration page. The parameters are divided into several categories, accessed via the menu on the left.
4.1.1 Required Settings
The core required parameters for any Bugzilla installation are set here. urlbase is always required; the other parameters
should be set, or it must be explicitly decided not to set them, before the new Bugzilla installation starts to be used.
urlbase Deﬁnes the fully qualiﬁed domain name and web server path to this Bugzilla installation. For example, if
the Bugzilla query page is http://www.foo.com/bugzilla/query.cgi, the urlbase should be set to
http://www.foo.com/bugzilla/.
ssl_redirect If enabled, Bugzilla will force HTTPS (SSL) connections, by automatically redirecting any users who
try to use a non-SSL connection. Also, when this is enabled, Bugzilla will send out links using sslbase in emails
instead of urlbase.
sslbase Deﬁnes the fully qualiﬁed domain name and web server path for HTTPS (SSL) connections to this Bugzilla
installation. For example, if the Bugzilla main page is https://www.foo.com/bugzilla/index.cgi,
the sslbase should be set to https://www.foo.com/bugzilla/.
cookiepath Deﬁnes a path, relative to the web document root, that Bugzilla cookies will be restricted to. For example,
if the urlbase is set to http://www.foo.com/bugzilla/, the cookiepath should be set to /bugzilla/.
Setting it to / will allow all sites served by this web server or virtual host to read Bugzilla cookies.
67

Bugzilla Documentation, Release 5.0.6
4.1.2 General
maintainer Email address of the person responsible for maintaining this Bugzilla installation. The address need not
be that of a valid Bugzilla account.
utf8 Use UTF-8 (Unicode) encoding for all text in Bugzilla. Installations where this parameter is set to off should
set it to on only after the data has been converted from existing legacy character encodings to UTF-8, using the
contrib/recode.pl script.
Note: If you turn this parameter from off to on, you must re-run checksetup.pl immediately afterward.
shutdownhtml If there is any text in this ﬁeld, this Bugzilla installation will be completely disabled and this text will
appear instead of all Bugzilla pages for all users, including Admins. Used in the event of site maintenance or
outage situations.
announcehtml Any text in this ﬁeld will be displayed at the top of every HTML page in this Bugzilla installation.
The text is not wrapped in any tags. For best results, wrap the text in a <div> tag. Any style attributes from the
CSS can be applied. For example, to make the text green inside of a red box, add id=message to the <div>
tag.
upgrade_notiﬁcation Enable or disable a notiﬁcation on the homepage of this Bugzilla installation when a newer
version of Bugzilla is available. This notiﬁcation is only visible to administrators. Choose disabled to turn off the
notiﬁcation. Otherwise, choose which version of Bugzilla you want to be notiﬁed about: development_snapshot
is the latest release from the master branch, latest_stable_release is the most recent release available on the most
recent stable branch, and stable_branch_release is the most recent release on the branch this installation is based
on.
4.1.3 Administrative Policies
This page contains parameters for basic administrative functions. Options include whether to allow the deletion of
bugs and users, and whether to allow users to change their email address.
allowbugdeletion The pages to edit products and components can delete all associated bugs when you delete a product
(or component). Since that is a pretty scary idea, you have to turn on this option before any such deletions will
ever happen.
allowemailchange Users can change their own email address through the preferences. Note that the change is vali-
dated by emailing both addresses, so switching this option on will not let users use an invalid address.
allowuserdeletion The user editing pages are capable of letting you delete user accounts. Bugzilla will issue a
warning in case you’d run into inconsistencies when you’re about to do so, but such deletions still remain scary.
So, you have to turn on this option before any such deletions will ever happen.
last_visit_keep_days This option controls how many days Bugzilla will remember that users have visited speciﬁc
bugs.
4.1.4 User Authentication
This page contains the settings that control how this Bugzilla installation will do its authentication. Choose what
authentication mechanism to use (the Bugzilla database, or an external source such as LDAP), and set basic behavioral
parameters. For example, choose whether to require users to login to browse bugs, the management of authentication
cookies, and the regular expression used to validate email addresses. Some parameters are highlighted below.
auth_env_id Environment variable used by external authentication system to store a unique identiﬁer for each user.
Leave it blank if there isn’t one or if this method of authentication is not being used.
68
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
auth_env_email Environment variable used by external authentication system to store each user’s email address. This
is a required ﬁeld for environmental authentication. Leave it blank if you are not going to use this feature.
auth_env_realname Environment variable used by external authentication system to store the user’s real name. Leave
it blank if there isn’t one or if this method of authentication is not being used.
user_info_class Mechanism(s) to be used for gathering a user’s login information. More than one may be selected.
If the ﬁrst one returns nothing, the second is tried, and so on. The types are:
• CGI: asks for username and password via CGI form interface.
• Env: info for a pre-authenticated user is passed in system environment variables.
user_verify_class Mechanism(s) to be used for verifying (authenticating) information gathered by user_info_class.
More than one may be selected. If the ﬁrst one cannot ﬁnd the user, the second is tried, and so on. The types
are:
• DB: Bugzilla’s built-in authentication. This is the most common choice.
• RADIUS: RADIUS authentication using a RADIUS server. Using this method requires additional param-
eters to be set. Please see RADIUS for more information.
• LDAP: LDAP authentication using an LDAP server. Using this method requires additional parameters to
be set. Please see LDAP for more information.
rememberlogin Controls management of session cookies.
• on - Session cookies never expire (the user has to login only once per browser).
• off - Session cookies last until the users session ends (the user will have to login in each new browser
session).
• defaulton/defaultoff - Default behavior as described above, but user can choose whether Bugzilla will
remember their login or not.
requirelogin If this option is set, all access to the system beyond the front page will require a login. No anonymous
users will be permitted.
webservice_email_ﬁlter Filter email addresses returned by the WebService API depending on if the user is logged
in or not. This works similarly to how the web UI currently ﬁlters email addresses. If requirelogin is enabled,
then this parameter has no effect as users must be logged in to use Bugzilla anyway.
emailregexp Deﬁnes the regular expression used to validate email addresses used for login names. The default
attempts to match fully qualiﬁed email addresses (i.e. ‘user@example.com’) in a slightly more restrictive way
than what is allowed in RFC 2822. Another popular value to put here is ^[^@]+, which means ‘local usernames,
no @ allowed.’
emailregexpdesc This description is shown to the user to explain which email addresses are allowed by the emailreg-
exp param.
emailsufﬁx This is a string to append to any email addresses when actually sending mail to that address. It is useful if
you have changed the emailregexp param to only allow local usernames, but you want the mail to be delivered
to username@my.local.hostname.
createemailregexp This deﬁnes the (case-insensitive) regexp to use for email addresses that are permitted to self-
register. The default (.*) permits any account matching the emailregexp to be created. If this parameter is left
blank, no users will be permitted to create their own accounts and all accounts will have to be created by an
administrator.
password_complexity Set the complexity required for passwords. In all cases must the passwords be at least 6
characters long.
• no_constraints - No complexity required.
4.1. Parameters
69

Bugzilla Documentation, Release 5.0.6
• mixed_letters - Passwords must contain at least one UPPER and one lower case letter.
• letters_numbers - Passwords must contain at least one UPPER and one lower case letter and a number.
• letters_numbers_specialchars - Passwords must contain at least one letter, a number and a special character.
password_check_on_login If set, Bugzilla will check that the password meets the current complexity rules and min-
imum length requirements when the user logs into the Bugzilla web interface. If it doesn’t, the user would not
be able to log in, and will receive a message to reset their password.
4.1.5 Attachments
This page allows for setting restrictions and other parameters regarding attachments to bugs. For example, control size
limitations and whether to allow pointing to external ﬁles via a URI.
allow_attachment_display If this option is on, users will be able to view attachments from their browser, if their
browser supports the attachment’s MIME type. If this option is off, users are forced to download attachments,
even if the browser is able to display them.
If you do not trust your users (e.g. if your Bugzilla is public), you should either leave this option off, or
conﬁgure and set the attachment_base parameter (see below). Untrusted users may upload attachments that
could be potentially damaging if viewed directly in the browser.
attachment_base When the allow_attachment_display parameter is on, it is possible for a malicious attachment to
steal your cookies or perform an attack on Bugzilla using your credentials.
If you would like additional security on attachments to avoid this, set this parameter to an alternate URL for
your Bugzilla that is not the same as urlbase or sslbase. That is, a different domain name that resolves to this
exact same Bugzilla installation.
Note that if you have set the cookiedomain parameter, you should set attachment_base to use a domain that
would not be matched by cookiedomain.
For added security, you can insert %bugid% into the URL, which will be replaced with the ID of the cur-
rent bug that the attachment is on, when you access an attachment. This will limit attachments to accessing
only other attachments on the same bug. Remember, though, that all those possible domain names (such as
1234.your.domain.com) must point to this same Bugzilla instance. To set this up you need to investigate wild-
card DNS.
allow_attachment_deletion If this option is on, administrators will be able to delete the contents of attachments (i.e.
replace the attached ﬁle with a 0 byte ﬁle), leaving only the metadata.
maxattachmentsize The maximum size (in kilobytes) of attachments to be stored in the database. If a ﬁle larger than
this size is attached to a bug, Bugzilla will look at the maxlocalattachment parameter to determine if the ﬁle can
be stored locally on the web server. If the ﬁle size exceeds both limits, then the attachment is rejected. Setting
both parameters to 0 will prevent attaching ﬁles to bugs.
Some databases have default limits which prevent storing larger attachments in the database. E.g. MySQL has a
parameter called max_allowed_packet, whose default varies by distribution. Setting maxattachmentsize higher
than your current setting for this value will produce an error.
maxlocalattachment The maximum size (in megabytes) of attachments to be stored locally on the web server. If set
to a value lower than the maxattachmentsize parameter, attachments will never be kept on the local ﬁlesystem.
Whether you use this feature or not depends on your environment. Reasons to store some or all attachments as
ﬁles might include poor database performance for large binary blobs, ease of backup/restore/browsing, or even
ﬁlesystem-level deduplication support. However, you need to be aware of any limits on how much data your
webserver environment can store. If in doubt, leave the value at 0.
Note that changing this value does not affect any already-submitted attachments.
70
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
4.1.6 Bug Change Policies
Set policy on default behavior for bug change events. For example, choose which status to set a bug to when it is
marked as a duplicate, and choose whether to allow bug reporters to set the priority or target milestone. Also allows
for conﬁguration of what changes should require the user to make a comment, described below.
duplicate_or_move_bug_status When a bug is marked as a duplicate of another one, use this bug status.
letsubmitterchoosepriority If this is on, then people submitting bugs can choose an initial priority for that bug. If
off, then all bugs initially have the default priority selected here.
letsubmitterchoosemilestone If this is on, then people submitting bugs can choose the Target Milestone for that bug.
If off, then all bugs initially have the default milestone for the product being ﬁled in.
musthavemilestoneonaccept If you are using Target Milestone, do you want to require that the milestone be set in
order for a user to set a bug’s status to IN_PROGRESS?
commenton* All these ﬁelds allow you to dictate what changes can pass without comment and which must have a
comment from the person who changed them. Often, administrators will allow users to add themselves to the
CC list, accept bugs, or change the Status Whiteboard without adding a comment as to their reasons for the
change, yet require that most other changes come with an explanation. Set the “commenton” options according
to your site policy. It is a wise idea to require comments when users resolve, reassign, or reopen bugs at the very
least.
Note: It is generally far better to require a developer comment when resolving bugs than not. Few things are
more annoying to bug database users than having a developer mark a bug “ﬁxed” without any comment as to
what the ﬁx was (or even that it was truly ﬁxed!)
noresolveonopenblockers This option will prevent users from resolving bugs as FIXED if they have unresolved
dependencies. Only the FIXED resolution is affected. Users will be still able to resolve bugs to resolutions
other than FIXED if they have unresolved dependent bugs.
4.1.7 Bug Fields
The parameters in this section determine the default settings of several Bugzilla ﬁelds for new bugs and whether certain
ﬁelds are used. For example, choose whether to use the Target Milestone ﬁeld or the Status Whiteboard ﬁeld.
useclassiﬁcation If this is on, Bugzilla will associate each product with a speciﬁc classiﬁcation. But you must have
editclassiﬁcation permissions enabled in order to edit classiﬁcations.
usetargetmilestone Do you wish to use the Target Milestone ﬁeld?
useqacontact This allows you to deﬁne an email address for each component, in addition to that of the default
assignee, that will be sent carbon copies of incoming bugs.
usestatuswhiteboard This deﬁnes whether you wish to have a free-form, overwritable ﬁeld associated with each bug.
The advantage of the Status Whiteboard is that it can be deleted or modiﬁed with ease and provides an easily
searchable ﬁeld for indexing bugs that have some trait in common.
use_see_also Do you wish to use the See Also ﬁeld? It allows you mark bugs in other bug tracker installations as
being related. Disabling this ﬁeld prevents addition of new relationships, but existing ones will continue to
appear.
defaultpriority This is the priority that newly entered bugs are set to.
defaultseverity This is the severity that newly entered bugs are set to.
defaultplatform This is the platform that is preselected on the bug entry form. You can leave this empty; Bugzilla
will then use the platform that the browser is running on as the default.
4.1. Parameters
71

Bugzilla Documentation, Release 5.0.6
defaultopsys This is the operating system that is preselected on the bug entry form. You can leave this empty; Bugzilla
will then use the operating system that the browser reports to be running on as the default.
collapsed_comment_tags A comma-separated list of tags which, when applied to comments, will cause them to be
collapsed by default.
4.1.8 Graphs
Bugzilla can draw graphs of bug-dependency relationships, using a tool called dot (from the GraphViz project) or a
web service called Web Dot. This page allows you to set the location of the binary or service. If no Web Dot server or
binary is speciﬁed, then dependency graphs will be disabled.
webdotbase You may set this parameter to any of the following:
• A complete ﬁle path to dot (part of GraphViz), which will generate the graphs locally.
• A URL preﬁx pointing to an installation of the Web Dot package, which will generate the graphs remotely.
• A blank value, which will disable dependency graphing.
The default value is blank. We recommend using a local install of dot. If you change this value to a web service,
make certain that the Web Dot server can read ﬁles from your Web Dot directory. On Apache you do this by
editing the .htaccess ﬁle; for other systems the needed measures may vary. You can run checksetup.pl
to recreate the .htaccess ﬁle if it has been lost.
font_ﬁle You can specify the full path to a TrueType font ﬁle which will be used to display text (labels, legends, ...)
in charts and graphical reports. To support as many languages as possible, we recommend to specify a TrueType
font such as Unifont which supports all printable characters in the Basic Multilingual Plane. If you leave this
parameter empty, a default font will be used, but its support is limited to English characters only and so other
characters will be displayed incorrectly.
4.1.9 Group Security
Bugzilla allows for the creation of different groups, with the ability to restrict the visibility of bugs in a group to a
set of speciﬁc users. Speciﬁc products can also be associated with groups, and users restricted to only see products
in their groups. Several parameters are described in more detail below. Most of the conﬁguration of groups and their
relationship to products is done on the Groups and Product pages of the Administration area. The options on this page
control global default behavior. For more information on Groups and Group Security, see Groups and Security.
makeproductgroups Determines whether or not to automatically create groups when new products are created. If
this is on, the groups will be used for querying bugs.
chartgroup The name of the group of users who can use the ‘New Charts’ feature. Administrators should ensure that
the public categories and series deﬁnitions do not divulge conﬁdential information before enabling this for an
untrusted population. If left blank, no users will be able to use New Charts.
insidergroup The name of the group of users who can see/change private comments and attachments.
timetrackinggroup The name of the group of users who can see/change time tracking information.
querysharegroup The name of the group of users who are allowed to share saved searches with one another. For
more information on using saved searches, see Saved Searches.
comment_taggers_group The name of the group of users who can tag comments. Setting this to empty disables
comment tagging.
debug_group The name of the group of users who can view the actual SQL query generated when viewing bug lists
and reports. Do not expose this information to untrusted users.
72
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
usevisibilitygroups If selected, user visibility will be restricted to members of groups, as selected in the group conﬁg-
uration settings. Each user-deﬁned group can be allowed to see members of selected other groups. For details on
conﬁguring groups (including the visibility restrictions) see Editing Groups and Assigning Group Permissions.
or_groups Deﬁne the visibility of a bug which is in multiple groups. If this is on (recommended), a user only needs
to be a member of one of the bug’s groups in order to view it. If it is off, a user needs to be a member of all
the bug’s groups. Note that in either case, a user’s role on the bug (e.g. reporter), if any, may also affect their
permissions.
4.1.10 LDAP
LDAP authentication is a module for Bugzilla’s plugin authentication architecture. This page contains all the parame-
ters necessary to conﬁgure Bugzilla for use with LDAP authentication.
The existing authentication scheme for Bugzilla uses email addresses as the primary user ID and a password to au-
thenticate that user. All places within Bugzilla that require a user ID (e.g assigning a bug) use the email address. The
LDAP authentication builds on top of this scheme, rather than replacing it. The initial log-in is done with a username
and password for the LDAP directory. Bugzilla tries to bind to LDAP using those credentials and, if successful, tries
to map this account to a Bugzilla account. If an LDAP mail attribute is deﬁned, the value of this attribute is used;
otherwise, the emailsufﬁx parameter is appended to the LDAP username to form a full email address. If an account
for this address already exists in the Bugzilla installation, it will log in to that account. If no account for that email
address exists, one is created at the time of login. (In this case, Bugzilla will attempt to use the “displayName” or
“cn” attribute to determine the user’s full name.) After authentication, all other user-related tasks are still handled by
email address, not LDAP username. For example, bugs are still assigned by email address and users are still queried
by email address.
Warning: Because the Bugzilla account is not created until the ﬁrst time a user logs in, a user who has not yet
logged is unknown to Bugzilla. This means they cannot be used as an assignee or QA contact (default or otherwise),
added to any CC list, or any other such operation. One possible workaround is the bugzilla_ldapsync.rb
script in the contrib directory. Another possible solution is ﬁxing bug 201069.
Parameters required to use LDAP Authentication:
user_verify_class (in the Authentication section) If you want to list LDAP here, make sure to have set up the other
parameters listed below. Unless you have other (working) authentication methods listed as well, you may
otherwise not be able to log back in to Bugzilla once you log out. If this happens to you, you will need to
manually edit data/params.json and set user_verify_class to DB.
LDAPserver This parameter should be set to the name (and optionally the port) of your LDAP server. If no port is
speciﬁed, it assumes the default LDAP port of 389. For example: ldap.company.com or ldap.company.com:3268
You can also specify a LDAP URI, so as to use other protocols, such as LDAPS or LDAPI. If the port was not
speciﬁed in the URI, the default is either 389 or 636 for ‘LDAP’ and ‘LDAPS’ schemes respectively.
Note:
In order to use SSL with LDAP, specify a URI with “ldaps://”. This will force the use of SSL over
port 636. For example, normal LDAP ldap://ldap.company.com, LDAP over SSL ldaps://ldap.company.com, or
LDAP over a UNIX domain socket ldapi://%2fvar%2ﬂib%2ﬂdap_sock.
LDAPstarttls Whether to require encrypted communication once a normal LDAP connection is achieved with the
server.
LDAPbinddn [Optional] Some LDAP servers will not allow an anonymous bind to search the directory. If this is the
case with your conﬁguration you should set the LDAPbinddn parameter to the user account Bugzilla should use
instead of the anonymous bind. Ex. cn=default,cn=user:password
4.1. Parameters
73

Bugzilla Documentation, Release 5.0.6
LDAPBaseDN The location in your LDAP tree that you would like to search for email addresses. Your uids should
be unique under the DN speciﬁed here. Ex. ou=People,o=Company
LDAPuidattribute The attribute which contains the unique UID of your users. The value retrieved from this attribute
will be used when attempting to bind as the user to conﬁrm their password. Ex. uid
LDAPmailattribute The name of the attribute which contains the email address your users will enter into the Bugzilla
login boxes. Ex. mail
LDAPﬁlter LDAP ﬁlter to AND with the LDAPuidattribute for ﬁltering the list of valid users.
4.1.11 RADIUS
RADIUS authentication is a module for Bugzilla’s plugin authentication architecture. This page contains all the
parameters necessary for conﬁguring Bugzilla to use RADIUS authentication.
Note:
Most caveats that apply to LDAP authentication apply to RADIUS authentication as well. See LDAP for
details.
Parameters required to use RADIUS Authentication:
user_verify_class (in the Authentication section) If you want to list RADIUS here, make sure to have set up the
other parameters listed below. Unless you have other (working) authentication methods listed as well, you may
otherwise not be able to log back in to Bugzilla once you log out. If this happens to you, you will need to
manually edit data/params.json and set user_verify_class to DB.
RADIUS_server The name (and optionally the port) of your RADIUS server.
RADIUS_secret The RADIUS server’s secret.
RADIUS_NAS_IP The NAS-IP-Address attribute to be used when exchanging data with your RADIUS server. If
unspeciﬁed, 127.0.0.1 will be used.
RADIUS_email_sufﬁx Bugzilla needs an email address for each user account. Therefore, it needs to determine the
email address corresponding to a RADIUS user. Bugzilla offers only a simple way to do this: it can concate-
nate a sufﬁx to the RADIUS user name to convert it into an email address. You can specify this sufﬁx in the
RADIUS_email_sufﬁx parameter. If this simple solution does not work for you, you’ll probably need to modify
Bugzilla/Auth/Verify/RADIUS.pm to match your requirements.
4.1.12 Email
This page contains all of the parameters for conﬁguring how Bugzilla deals with the email notiﬁcations it sends. See
below for a summary of important options.
mail_delivery_method This is used to specify how email is sent, or if it is sent at all. There are several options
included for different MTAs, along with two additional options that disable email sending. Test does not send
mail, but instead saves it in data/mailer.testfile for later review. None disables email sending entirely.
mailfrom This is the email address that will appear in the “From” ﬁeld of all emails sent by this Bugzilla installation.
Some email servers require mail to be from a valid email address; therefore, it is recommended to choose a valid
email address here.
use_mailer_queue In a large Bugzilla installation, updating bugs can be very slow because Bugzilla sends all email
at once. If you enable this parameter, Bugzilla will queue all mail and then send it in the background. This
requires that you have installed certain Perl modules (as listed by checksetup.pl for this feature), and that
you are running the jobqueue.pl daemon (otherwise your mail won’t get sent). This affects all mail sent by
Bugzilla, not just bug updates.
74
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
smtpserver The SMTP server address, if the mail_delivery_method parameter is set to SMTP. Use localhost if you
have a local MTA running; otherwise, use a remote SMTP server. Append “:” and the port number if a non-
default port is needed.
smtp_username Username to use for SASL authentication to the SMTP server. Leave this parameter empty if your
server does not require authentication.
smtp_password Password to use for SASL authentication to the SMTP server. This parameter will be ignored if the
smtp_username parameter is left empty.
smtp_ssl Enable SSL support for connection to the SMTP server.
smtp_debug This parameter allows you to enable detailed debugging output. Log messages are printed the web
server’s error log.
whinedays Set this to the number of days you want to let bugs go in the CONFIRMED state before notifying people
they have untouched new bugs. If you do not plan to use this feature, simply do not set up the whining cron job
described in the installation instructions, or set this value to “0” (never whine).
globalwatchers This allows you to deﬁne speciﬁc users who will receive notiﬁcation each time any new bug in
entered, or when any existing bug changes, subject to the normal groupset permissions. It may be useful for
sending notiﬁcations to a mailing list, for instance.
4.1.13 Query Defaults
This page controls the default behavior of Bugzilla in regards to several aspects of querying bugs. Options include
what the default query options are, what the “My Bugs” page returns, whether users can freely add bugs to the quip
list, and how many duplicate bugs are needed to add a bug to the “most frequently reported” list.
quip_list_entry_control Controls how easily users can add entries to the quip list.
• open - Users may freely add to the quip list, and their entries will immediately be available for viewing.
• moderated - Quips can be entered but need to be approved by a moderator before they will be shown.
• closed - No new additions to the quips list are allowed.
mybugstemplate This is the URL to use to bring up a simple ‘all of my bugs’ list for a user. %userid% will get
replaced with the login name of a user. Special characters must be URL encoded.
defaultquery This is the default query that initially comes up when you access the advanced query page. It’s in
URL-parameter format.
search_allow_no_criteria When turned off, a query must have some criteria speciﬁed to limit the number of bugs
returned to the user. When turned on, a user is allowed to run a query with no criteria and get all bugs in the
entire installation that they can see. Turning this parameter on is not recommended on large installations.
default_search_limit By default, Bugzilla limits searches done in the web interface to returning only this many
results, for performance reasons. (This only affects the HTML format of search results—CSV, XML, and other
formats are exempted.) Users can click a link on the search result page to see all the results.
Usually you should not have to change this—the default value should be acceptable for most installations.
max_search_results The maximum number of bugs that a search can ever return. Tabular and graphical reports are
exempted from this limit, however.
4.1.14 Shadow Database
This page controls whether a shadow database is used. If your Bugzilla is not large, you will not need these options.
4.1. Parameters
75

Bugzilla Documentation, Release 5.0.6
A standard large database setup involves a single master server and a pool of read-only slaves (which Bugzilla calls
the “shadowdb”). Queries which are not updating data can be directed to the slave pool, removing the load/locking
from the master, freeing it up to handle writes. Bugzilla will switch to the shadowdb when it knows it doesn’t need to
update the database (e.g. when searching, or displaying a bug to a not-logged-in user).
Bugzilla does not make sure the shadowdb is kept up to date, so, if you use one, you will need to set up replication in
your database server.
If your shadowdb is on a different machine, specify shadowdbhost and shadowdbport. If it’s on the same machine,
specify shadowdbsock.
shadowdbhost The host the shadow database is on.
shadowdbport The port the shadow database is on.
shadowdbsock The socket used to connect to the shadow database, if the host is the local machine.
shadowdb The database name of the shadow database.
4.1.15 Memcached
memcached_servers If this option is set, Bugzilla will integrate with Memcached. Specify one or more servers,
separated by spaces, using hostname:port notation (for example: 127.0.0.1:11211).
memcached_namespace Specify a string to preﬁx each key on Memcached.
4.1.16 User Matching
The settings on this page control how users are selected and queried when adding a user to a bug. For example, users
need to be selected when assigning the bug, adding to the CC list, or selecting a QA contact. With the usemenuforusers
parameter, it is possible to conﬁgure Bugzilla to display a list of users in the ﬁelds instead of an empty text ﬁeld. If
users are selected via a text box, this page also contains parameters for how user names can be queried and matched
when entered.
usemenuforusers If this option is set, Bugzilla will offer you a list to select from (instead of a text entry ﬁeld) where
a user needs to be selected. This option should not be enabled on sites where there are a large number of users.
ajax_user_autocompletion If this option is set, typing characters in a certain user ﬁelds will display a list of matches
that can be selected from. It is recommended to only turn this on if you are using mod_perl; otherwise, the
response will be irritatingly slow.
maxusermatches Provide no more than this many matches when a user is searched for. If set to ‘1’, no users will be
displayed on ambiguous matches. This is useful for user-privacy purposes. A value of zero means no limit.
conﬁrmuniqueusermatch Whether a conﬁrmation screen should be displayed when only one user matches a search
entry.
4.1.17 Advanced
cookiedomain Deﬁnes the domain for Bugzilla cookies. This is typically left blank. If there are multiple hostnames
that point to the same webserver, which require the same cookie, then this parameter can be utilized. For
example, If your website is at https://bugzilla.example.com/, setting this to .example.com/ will
also allow attachments.example.com/ to access Bugzilla cookies.
inbound_proxies When inbound trafﬁc to Bugzilla goes through a proxy, Bugzilla thinks that the IP address of the
proxy is the IP address of every single user. If you enter a comma-separated list of IPs in this parameter, then
76
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
Bugzilla will trust any X-Forwarded-For header sent from those IPs, and use the value of that header as the
end user’s IP address.
proxy_url If this Bugzilla installation is behind a proxy, enter the proxy information here to enable Bugzilla to access
the Internet. Bugzilla requires Internet access to utilize the upgrade_notiﬁcation parameter. If the proxy requires
authentication, use the syntax: http://user:pass@proxy_url/.
strict_transport_security Enables the sending of the Strict-Transport-Security header along with HTTP responses
on SSL connections. This adds greater security to your SSL connections by forcing the browser to always access
your domain over SSL and never accept an invalid certiﬁcate. However, it should only be used if you have the
ssl_redirect parameter turned on, Bugzilla is the only thing running on its domain (i.e., your urlbase is something
like http://bugzilla.example.com/), and you never plan to stop supporting SSL.
• off - Don’t send the Strict-Transport-Security header with requests.
• this_domain_only - Send the Strict-Transport-Security header with all requests, but only support it for the
current domain.
• include_subdomains - Send the Strict-Transport-Security header along with the includeSubDomains ﬂag,
which will apply the security change to all subdomains. This is especially useful when combined with an
attachment_base that exists as (a) subdomain(s) under the main Bugzilla domain.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.2 Default Preferences
Each user of Bugzilla can set certain preferences about how they want Bugzilla to behave. Here, you can say whether
or not each of the possible preferences is available to the user and, if it is, what the default value is.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.3 Users
4.3.1 Creating Admin Users
When you ﬁrst run checksetup.pl after installing Bugzilla, it will prompt you for the username (email address) and
password for the ﬁrst admin user. If for some reason you delete all the admin users, re-running checksetup.pl will
again prompt you for a username and password and make a new admin.
If you wish to add more administrative users, add them to the “admin” group.
4.3.2 Searching For Users
If you have editusers privileges or if you are allowed to grant privileges for some groups, the Users link will
appear in the Administration page.
The ﬁrst screen is a search form to search for existing user accounts. You can run searches based either on the user ID,
real name or login name (i.e. the email address, or just the ﬁrst part of the email address if the emailsufﬁx parameter
is set). The search can be conducted in different ways using the listbox to the right of the text entry box. You can
match by case-insensitive substring (the default), regular expression, a reverse regular expression match (which ﬁnds
4.2. Default Preferences
77

Bugzilla Documentation, Release 5.0.6
every user name which does NOT match the regular expression), or the exact string if you know exactly who you are
looking for. The search can be restricted to users who are in a speciﬁc group. By default, the restriction is turned off.
The search returns a list of users matching your criteria. User properties can be edited by clicking the login name. The
Account History of a user can be viewed by clicking the “View” link in the Account History column. The Account
History displays changes that have been made to the user account, the time of the change and the user who made the
change. For example, the Account History page will display details of when a user was added or removed from a
group.
4.3.3 Modifying Users
Once you have found your user, you can change the following ﬁelds:
• Login Name: This is generally the user’s full email address. However, if you have are using the emailsufﬁx
parameter, this may just be the user’s login name. Unless you turn off the allowemailchange parameter, users
can change their login names themselves (to any valid email address).
• Real Name: The user’s real name. Note that Bugzilla does not require this to create an account.
• Password: You can change the user’s password here. Users can automatically request a new password, so you
shouldn’t need to do this often. If you want to disable an account, see Disable Text below.
• Bugmail Disabled: Mark this checkbox to disable bugmail and whinemail completely for this account. This
checkbox replaces the data/nomail ﬁle which existed in older versions of Bugzilla.
• Disable Text: If you type anything in this box, including just a space, the user is prevented from logging in
and from making any changes to bugs via the web interface. The HTML you type in this box is presented to
the user when they attempt to perform these actions and should explain why the account was disabled. Users
with disabled accounts will continue to receive mail from Bugzilla; furthermore, they will not be able to log
in themselves to change their own preferences and stop it. If you want an account (disabled or active) to stop
receiving mail, simply check the Bugmail Disabled checkbox above.
Note: Even users whose accounts have been disabled can still submit bugs via the email gateway, if one exists.
The email gateway should not be enabled for secure installations of Bugzilla.
Warning: Don’t disable all the administrator accounts!
• <groupname>: If you have created some groups, e.g. “securitysensitive”, then checkboxes will appear here to
allow you to add users to, or remove them from, these groups. The ﬁrst checkbox gives the user the ability to
add and remove other users as members of this group. The second checkbox adds the user himself as a member
of the group.
• canconﬁrm: This ﬁeld is only used if you have enabled the “unconﬁrmed” status. If you enable this for a user,
that user can then move bugs from “Unconﬁrmed” to a “Conﬁrmed” status (e.g.: “New” status).
• creategroups: This option will allow a user to create and destroy groups in Bugzilla.
• editbugs: Unless a user has this bit set, they can only edit those bugs for which they are the assignee or the
reporter. Even if this option is unchecked, users can still add comments to bugs.
• editcomponents: This ﬂag allows a user to create new products and components, modify existing products and
components, and destroy those that have no bugs associated with them. If a product or component has bugs
associated with it, those bugs must be moved to a different product or component before Bugzilla will allow
them to be destroyed.
78
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
• editkeywords: If you use Bugzilla’s keyword functionality, enabling this feature allows a user to create and
destroy keywords. A keyword must be removed from any bugs upon which it is currently set before it can be
destroyed.
• editusers: This ﬂag allows a user to do what you’re doing right now: edit other users. This will allow those with
the right to do so to remove administrator privileges from other users or grant them to themselves. Enable with
care.
• tweakparams: This ﬂag allows a user to change Bugzilla’s Params (using editparams.cgi.)
• <productname>: This allows an administrator to specify the products in which a user can see bugs. If you
turn on the makeproductgroups parameter in the Group Security Panel in the Parameters page, then Bugzilla
creates one group per product (at the time you create the product), and this group has exactly the same name as
the product itself. Note that for products that already exist when the parameter is turned on, the corresponding
group will not be created. The user must still have the editbugs privilege to edit bugs in these products.
4.3.4 Creating New Users
Self-Registration
By default, users can create their own user accounts by clicking the New Account link at the bottom of each
page (assuming they aren’t logged in as someone else already). If you want to disable this self-registration, or if
you want to restrict who can create their own user account, you have to edit the createemailregexp parameter in the
Configuration page; see Parameters.
Administrator Registration
Users with editusers privileges, such as administrators, can create user accounts for other users:
1. After logging in, click the “Users” link at the footer of the query page, and then click “Add a new user”.
2. Fill out the form presented. This page is self-explanatory. When done, click “Submit”.
Note: Adding a user this way will not send an email informing them of their username and password. While
useful for creating dummy accounts (watchers which shuttle mail to another system, for instance, or email
addresses which are a mailing list), in general it is preferable to log out and use the New Account button
to create users, as it will pre-populate all the required ﬁelds and also notify the user of her account name and
password.
4.3.5 Deleting Users
If the allowuserdeletion parameter is turned on (see Parameters) then you can also delete user accounts. Note that,
most of the time, this is not the best thing to do. If only a warning in a yellow box is displayed, then the deletion is
safe. If a warning is also displayed in a red box, then you should NOT try to delete the user account, else you will get
referential integrity problems in your database, which can lead to unexpected behavior, such as bugs not appearing in
bug lists anymore, or data displaying incorrectly. You have been warned!
4.3.6 Impersonating Users
There may be times when an administrator would like to do something as another user. The sudo feature may be used
to do this.
4.3. Users
79

Bugzilla Documentation, Release 5.0.6
Note: To use the sudo feature, you must be in the bz_sudoers group. By default, all administrators are in this group.
If you have access to this feature, you may start a session by going to the Edit Users page, Searching for a user and
clicking on their login. You should see a link below their login name titled “Impersonate this user”. Click on the link.
This will take you to a page where you will see a description of the feature and instructions for using it. After reading
the text, simply enter the login of the user you would like to impersonate, provide a short message explaining why you
are doing this, and press the button.
As long as you are using this feature, everything you do will be done as if you were logged in as the user you are
impersonating.
Warning:
The user you are impersonating will not be told about what you are doing. If you do anything that
results in mail being sent, that mail will appear to be from the user you are impersonating. You should be extremely
careful while using this feature.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.4 Classiﬁcations,
Products,
Components,
Versions,
and Mile-
stones
Bugs in Bugzilla are classiﬁed into one of a set of admin-deﬁned Components. Components are themselves each part
of a single Product. Optionally, Products can be part of a single Classiﬁcation, adding a third level to the hierarchy.
4.4.1 Classiﬁcations
Classiﬁcations are used to group several related products into one distinct entity.
For example, if a company makes computer games, they could have a classiﬁcation of “Games”, and a separate
product for each game. This company might also have a Common classiﬁcation, containing products representing
units of technology used in multiple games, and perhaps an Other classiﬁcation containing a few special products
that represent items that are not actually shipping products (for example, “Website”, or “Administration”).
The classiﬁcations layer is disabled by default; it can be turned on or off using the useclassiﬁcation parameter in the
Bug Fields section of Parameters.
Access to the administration of classiﬁcations is controlled using the editclassiﬁcations system group, which deﬁnes a
privilege for creating, destroying, and editing classiﬁcations.
When activated, classiﬁcations will introduce an additional step when ﬁlling bugs (dedicated to classiﬁcation selec-
tion), and they will also appear in the advanced search form.
4.4.2 Products
Products usually represent real-world shipping products. Many of Bugzilla’s settings are conﬁgurable on a per-product
basis.
When creating or editing products the following options are available:
Product The name of the product
80
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
Description A brief description of the product
Open for bug entry Deselect this box to prevent new bugs from being entered against this product.
Enable the UNCONFIRMED status in this product Select this option if you want to use the UNCONFIRMED
status (see Workﬂow)
Default milestone Select the default milestone for this product.
Version Specify the default version for this product.
Create chart datasets for this product Select to make chart datasets available for this product.
It is compulsory to create at least one component in a product, and so you will be asked for the details of that too.
When editing a product you can change all of the above, and there is also a link to edit Group Access Controls; see
Assigning Group Controls to Products.
Creating New Products
To create a new product:
1. Select Administration from the footer and then choose Products from the main administration page.
2. Select the Add link in the bottom right.
3. Enter the details as outlined above.
Editing Products
To edit an existing product, click the “Products” link from the “Administration” page. If the useclassiﬁcation parameter
is turned on, a table of existing classiﬁcations is displayed, including an “Unclassiﬁed” category. The table indicates
how many products are in each classiﬁcation. Click on the classiﬁcation name to see its products. If the useclassiﬁca-
tion parameter is not in use, the table lists all products directly. The product table summarizes the information deﬁned
when the product was created. Click on the product name to edit these properties, and to access links to other product
attributes such as the product’s components, versions, milestones, and group access controls.
Adding or Editing Components, Versions and Target Milestones
To add new or edit existing Components, Versions, or Target Milestones to a Product, select the “Edit Components”,
“Edit Versions”, or “Edit Milestones” links from the “Edit Product” page. A table of existing Components, Versions,
or Milestones is displayed. Click on an item name to edit the properties of that item. Below the table is a link to add a
new Component, Version, or Milestone.
For more information on components, see Components.
For more information on versions, see Versions.
For more information on milestones, see Milestones.
Assigning Group Controls to Products
On the Edit Product page, there is a link called Edit Group Access Controls. The settings on this page
control the relationship of the groups to the product being edited.
Group Access Controls are an important aspect of using groups for isolating products and restricting access to bugs
ﬁled against those products. For more information on groups, including how to create, edit, add users to, and alter
permission of, see Groups and Security.
4.4. Classiﬁcations, Products, Components, Versions, and Milestones
81

Bugzilla Documentation, Release 5.0.6
After selecting the “Edit Group Access Controls” link from the “Edit Product” page, a table containing all user-deﬁned
groups for this Bugzilla installation is displayed. The system groups that are created when Bugzilla is installed are not
applicable to Group Access Controls. Below is description of what each of these ﬁelds means.
Groups may be applicable (i.e. bugs in this product can be associated with this group), default (i.e. bugs in this product
are in this group by default), and mandatory (i.e. bugs in this product must be associated with this group) for each
product. Groups can also control access to bugs for a given product, or be used to make bugs for a product totally
read-only unless the group restrictions are met. The best way to understand these relationships is by example. See
Common Applications of Group Controls for examples of product and group relationships.
Note: Products and Groups are not limited to a one-to-one relationship. Multiple groups can be associated with the
same product, and groups can be associated with more than one product.
If any group has Entry selected, then the product will restrict bug entry to only those users who are members of all the
groups with Entry selected.
If any group has Canedit selected, then the product will be read-only for any users who are not members of all of the
groups with Canedit selected. Only users who are members of all the Canedit groups will be able to edit bugs for this
product. This is an additional restriction that enables ﬁner-grained control over products rather than just all-or-nothing
access levels.
The following settings let you choose privileges on a per-product basis. This is a convenient way to give privileges to
some users for some products only, without having to give them global privileges which would affect all products.
Any group having editcomponents selected allows users who are in this group to edit all aspects of this product,
including components, milestones, and versions.
Any group having canconﬁrm selected allows users who are in this group to conﬁrm bugs in this product.
Any group having editbugs selected allows users who are in this group to edit all ﬁelds of bugs in this product.
The MemberControl and OtherControl are used in tandem to determine which bugs will be placed in this group. The
only allowable combinations of these two parameters are listed in a table on the “Edit Group Access Controls” page.
Consult this table for details on how these ﬁelds can be used. Examples of different uses are described below.
Common Applications of Group Controls
The use of groups is best explained by providing examples that illustrate conﬁgurations for common use cases. The
examples follow a common syntax: Group: Entry, MemberControl, OtherControl, CanEdit, EditComponents, Can-
Conﬁrm, EditBugs, where “Group” is the name of the group being edited for this product. The other ﬁelds all corre-
spond to the table on the “Edit Group Access Controls” page. If any of these options are not listed, it means they are
not checked.
Basic Product/Group Restriction
Suppose there is a product called “Bar”. You would like to make it so that only users in the group “Foo” can enter bugs
in the “Bar” product. Additionally, bugs ﬁled in product “Bar” must be visible only to users in “Foo” (plus, by default,
the reporter, assignee, and CC list of each bug) at all times. Furthermore, only members of group “Foo” should be
able to edit bugs ﬁled against product “Bar”, even if other users could see the bug. This arrangement would achieved
by the following:
Product Bar:
foo: ENTRY, MANDATORY/MANDATORY, CANEDIT
82
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
Perhaps such strict restrictions are not needed for product “Bar”. Instead, you would like to make it so that only
members of group “Foo” can enter bugs in product “Bar”, but bugs in “Bar” are not required to be restricted in
visibility to people in “Foo”. Anyone with permission to edit a particular bug in product “Bar” can put the bug in
group “Foo”, even if they themselves are not in “Foo”.
Furthermore, anyone in group “Foo” can edit all aspects of the components of product “Bar”, can conﬁrm bugs in
product “Bar”, and can edit all ﬁelds of any bug in product “Bar”. That would be done like this:
Product Bar:
foo: ENTRY, SHOWN/SHOWN, EDITCOMPONENTS, CANCONFIRM, EDITBUGS
General User Access With Security Group
To permit any user to ﬁle bugs against “Product A”, and to permit any user to submit those bugs into a group called
“Security”:
Product A:
security: SHOWN/SHOWN
General User Access With A Security Product
To permit any user to ﬁle bugs against product called “Security” while keeping those bugs from becoming visible to
anyone outside the group “SecurityWorkers” (unless a member of the “SecurityWorkers” group removes that restric-
tion):
Product Security:
securityworkers: DEFAULT/MANDATORY
Product Isolation With a Common Group
To permit users of “Product A” to access the bugs for “Product A”, users of “Product B” to access the bugs for “Product
B”, and support staff, who are members of the “Support Group” to access both, three groups are needed:
1. Support Group: Contains members of the support staff.
2. AccessA Group: Contains users of product A and the Support group.
3. AccessB Group: Contains users of product B and the Support group.
Once these three groups are deﬁned, the product group controls can be set to:
Product A:
AccessA: ENTRY, MANDATORY/MANDATORY
Product B:
AccessB: ENTRY, MANDATORY/MANDATORY
Perhaps the “Support Group” wants more control. For example, the “Support Group” could be permitted to make
bugs inaccessible to users of both groups “AccessA” and “AccessB”. Then, the “Support Group” could be permitted
to publish bugs relevant to all users in a third product (let’s call it “Product Common”) that is read-only to anyone
outside the “Support Group”. In this way the “Support Group” could control bugs that should be seen by both groups.
That conﬁguration would be:
4.4. Classiﬁcations, Products, Components, Versions, and Milestones
83

Bugzilla Documentation, Release 5.0.6
Product A:
AccessA: ENTRY, MANDATORY/MANDATORY
Support: SHOWN/NA
Product B:
AccessB: ENTRY, MANDATORY/MANDATORY
Support: SHOWN/NA
Product Common:
Support: ENTRY, DEFAULT/MANDATORY, CANEDIT
Make a Product Read Only
Sometimes a product is retired and should no longer have new bugs ﬁled against it (for example, an older version of a
software product that is no longer supported). A product can be made read-only by creating a group called “readonly”
and adding products to the group as needed:
Product A:
ReadOnly: ENTRY, NA/NA, CANEDIT
Note: For more information on Groups outside of how they relate to products see Groups and Security.
4.4.3 Components
Components are subsections of a Product. E.g. the computer game you are designing may have a “UI” component, an
“API” component, a “Sound System” component, and a “Plugins” component, each overseen by a different program-
mer. It often makes sense to divide Components in Bugzilla according to the natural divisions of responsibility within
your Product or company.
Each component has a default assignee and, if you turned it on in the Parameters, a QA Contact. The default assignee
should be the primary person who ﬁxes bugs in that component. The QA Contact should be the person who will ensure
these bugs are completely ﬁxed. The Assignee, QA Contact, and Reporter will get email when new bugs are created in
this Component and when these bugs change. Default Assignee and Default QA Contact ﬁelds only dictate the default
assignments; these can be changed on bug submission, or at any later point in a bug’s life.
To create a new Component:
1. Select the Edit components link from the Edit product page.
2. Select the Add link in the bottom right.
3. Fill out the Component ﬁeld, a short Description, the Default Assignee, Default CC List,
and Default QA Contact (if enabled). The Component Description ﬁeld may contain a limited
subset of HTML tags. The Default Assignee ﬁeld must be a login name already existing in the Bugzilla
database.
4.4.4 Versions
Versions are the revisions of the product, such as “Flinders 3.1”, “Flinders 95”, and “Flinders 2000”. Version is not a
multi-select ﬁeld; the usual practice is to select the earliest version known to have the bug.
To create and edit Versions:
1. From the “Edit product” screen, select “Edit Versions”.
84
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
2. You will notice that the product already has the default version “undeﬁned”. Click the “Add” link in the bottom
right.
3. Enter the name of the Version. This ﬁeld takes text only. Then click the “Add” button.
4.4.5 Milestones
Milestones are “targets” that you plan to get a bug ﬁxed by. For example, if you have a bug that you plan to ﬁx for
your 3.0 release, it would be assigned the milestone of 3.0.
Note: Milestone options will only appear for a Product if you turned on the usetargetmilestone parameter in the “Bug
Fields” tab of the Parameters page.
To create new Milestones and set Default Milestones:
1. Select “Edit milestones” from the “Edit product” page.
2. Select “Add” in the bottom right corner.
3. Enter the name of the Milestone in the “Milestone” ﬁeld. You can optionally set the “sortkey”, which is a
positive or negative number (-32768 to 32767) that deﬁnes where in the list this particular milestone appears.
This is because milestones often do not occur in alphanumeric order; for example, “Future” might be after
“Release 1.2”. Select “Add”.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.5 Flags
If you have the editcomponents permission, you can edit Flag Types from the main administration page. Clicking the
Flags link will bring you to the Administer Flag Types page. Here, you can select whether you want to create (or edit)
a Bug ﬂag or an Attachment ﬂag.
The two ﬂag types have the same administration interface, and the interface for creating a ﬂag and editing a ﬂag have
the same set of ﬁelds.
4.5.1 Flag Properties
Name This is the name of the ﬂag. This will be displayed to Bugzilla users who are looking at or setting the ﬂag. The
name may contain any valid Unicode characters except commas and spaces.
Description The description describes the ﬂag in more detail. It is visible in a tooltip when hovering over a ﬂag either
in the Show Bug or Edit Attachment pages. This ﬁeld can be as long as you like and can contain any character
you want.
Category You can set a ﬂag to be visible or not visible on any combination of products and components.
Default behaviour for a newly created ﬂag is to appear on all products and all components, which is why
__Any__:__Any__ is already entered in the Inclusions box. If this is not your desired behaviour, you must
either set some exclusions (for products on which you don’t want the ﬂag to appear), or you must remove
__Any__:__Any__ from the Inclusions box and deﬁne products/components speciﬁcally for this ﬂag.
To create an Inclusion, select a Product from the top drop-down box. You may also select a speciﬁc component
from the bottom drop-down box. (Setting __Any__ for Product translates to “all the products in this Bugzilla”.
4.5. Flags
85

Bugzilla Documentation, Release 5.0.6
Selecting __Any__ in the Component ﬁeld means “all components in the selected product.”) Selections made,
press Include, and your Product/Component pairing will show up in the Inclusions box on the right.
To create an Exclusion, the process is the same: select a Product from the top drop-down box, select a speciﬁc
component if you want one, and press Exclude. The Product/Component pairing will show up in the Exclusions
box on the right.
This ﬂag will appear and can be set for any products/components appearing in the Inclusions box (or which
fall under the appropriate __Any__). This ﬂag will not appear (and therefore cannot be set) on any products
appearing in the Exclusions box. IMPORTANT: Exclusions override inclusions.
You may select a Product without selecting a speciﬁc Component, but you cannot select a Component without
a Product. If you do so, Bugzilla will display an error message, even if all your products have a component by
that name. You will also see an error if you select a Component that does not belong to the selected Product.
Example: Let’s say you have a product called Jet Plane that has thousands of components. You want to be
able to ask if a problem should be ﬁxed in the next model of plane you release. We’ll call the ﬂag fixInNext.
However, one component in Jet Plane is called Pilot, and it doesn’t make sense to release a new pilot, so
you don’t want to have the ﬂag show up in that component. So, you include Jet Plane:__Any__ and you
exclude Jet Plane:Pilot.
Sort Key Flags normally show up in alphabetical order. If you want them to show up in a different order, you can use
this key set the order on each ﬂag. Flags with a lower sort key will appear before ﬂags with a higher sort key.
Flags that have the same sort key will be sorted alphabetically.
Active Sometimes you might want to keep old ﬂag information in the Bugzilla database but stop users from setting
any new ﬂags of this type. To do this, uncheck active. Deactivated ﬂags will still show up in the UI if they are
?, +, or -, but they may only be cleared (unset) and cannot be changed to a new value. Once a deactivated ﬂag
is cleared, it will completely disappear from a bug/attachment and cannot be set again.
Requestable New ﬂags are, by default, “requestable”, meaning that they offer users the ? option, as well as + and -.
To remove the ? option, uncheck “requestable”.
Speciﬁcally Requestable By default this box is checked for new ﬂags, meaning that users may make ﬂag requests
of speciﬁc individuals. Unchecking this box will remove the text box next to a ﬂag; if it is still requestable,
then requests cannot target speciﬁc users and are open to anyone (called a request “to the wind” in Bugzilla).
Removing this after speciﬁc requests have been made will not remove those requests; that data will stay in the
database (though it will no longer appear to the user).
Multiplicable Any ﬂag with Multiplicable:guilabel: set (default for new ﬂags is ‘on’) may be set more than once. Af-
ter being set once, an unset ﬂag of the same type will appear below it with “addl.” (short for “additional”) before
the name. There is no limit to the number of times a Multiplicable ﬂags may be set on the same bug/attachment.
CC List If you want certain users to be notiﬁed every time this ﬂag is set to ?, -, or +, or is unset, add them here.
This is a comma-separated list of email addresses that need not be restricted to Bugzilla usernames.
Grant Group When this ﬁeld is set to some given group, only users in the group can set the ﬂag to + and -. This
ﬁeld does not affect who can request or cancel the ﬂag. For that, see the Request Group ﬁeld below. If this ﬁeld
is left blank, all users can set or delete this ﬂag. This ﬁeld is useful for restricting which users can approve or
reject requests.
Request Group When this ﬁeld is set to some given group, only users in the group can request or cancel this ﬂag.
Note that this ﬁeld has no effect if the Grant Group ﬁeld is empty. You can set the value of this ﬁeld to a different
group, but both ﬁelds have to be set to a group for this ﬁeld to have an effect.
4.5.2 Deleting a Flag
When you are at the Administer Flag Types screen, you will be presented with a list of Bug ﬂags and a list of Attach-
ment Flags.
86
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
To delete a ﬂag, click on the Delete link next to the ﬂag description.
Warning:
Once you delete a ﬂag, it is gone from your Bugzilla. All the data for that ﬂag will be deleted.
Everywhere that ﬂag was set, it will disappear, and you cannot get that data back. If you want to keep ﬂag data,
but don’t want anybody to set any new ﬂags or change current ﬂags, unset active in the ﬂag Edit form.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.6 Custom Fields
Custom Fields are ﬁelds deﬁned by the administrator, in addition to those which come with Bugzilla by default.
Custom Fields are treated like any other ﬁeld—they can be set in bugs and used for search queries.
Administrators should keep in mind that adding too many ﬁelds can make the user interface more complicated and
harder to use. Custom Fields should be added only when necessary and with careful consideration.
Note: Before adding a Custom Field, make sure that Bugzilla cannot already do the desired behavior. Many Bugzilla
options are not enabled by default, and many times Administrators ﬁnd that simply enabling certain options that
already exist is sufﬁcient.
Administrators can manage Custom Fields using the Custom Fields link on the Administration page. The Custom
Fields administration page displays a list of Custom Fields, if any exist, and a link to “Add a new custom ﬁeld”.
4.6.1 Adding Custom Fields
To add a new Custom Field, click the “Add a new custom ﬁeld” link. This page displays several options for the new
ﬁeld, described below.
The following attributes must be set for each new custom ﬁeld:
• Name: The name of the ﬁeld in the database, used internally. This name MUST begin with cf_ to prevent
confusion with standard ﬁelds. If this string is omitted, it will be automatically added to the name entered.
• Description: A brief string used as the label for this Custom Field. That is the string that users will see, and it
should be short and explicit.
• Type: The type of ﬁeld to create. There are several types available:
Bug ID: A ﬁeld where you can enter the ID of another bug from the same Bugzilla installation. To point to a
bug in a remote installation, use the See Also ﬁeld instead.
Large Text Box: A multiple line box for entering free text.
Free Text: A single line box for entering free text.
Multiple-Selection Box: A list box where multiple options can be selected. After creating this ﬁeld, it must be
edited to add the selection options. See Viewing/Editing Legal Values for information about editing legal
values.
Drop Down: A list box where only one option can be selected. After creating this ﬁeld, it must be edited to
add the selection options. See Viewing/Editing Legal Values for information about editing legal values.
Date/Time: A date ﬁeld. This ﬁeld appears with a calendar widget for choosing the date.
4.6. Custom Fields
87

Bugzilla Documentation, Release 5.0.6
• Sortkey: Integer that determines in which order Custom Fields are displayed in the User Interface, especially
when viewing a bug. Fields with lower values are displayed ﬁrst.
• Reverse Relationship Description: When the custom ﬁeld is of type Bug ID, you can enter text here which will
be used as label in the referenced bug to list bugs which point to it. This gives you the ability to have a mutual
relationship between two bugs.
• Can be set on bug creation: Boolean that determines whether this ﬁeld can be set on bug creation. If not selected,
then a bug must be created before this ﬁeld can be set. See Filing a Bug for information about ﬁling bugs.
• Displayed in bugmail for new bugs: Boolean that determines whether the value set on this ﬁeld should appear
in bugmail when the bug is ﬁled. This attribute has no effect if the ﬁeld cannot be set on bug creation.
• Is obsolete: Boolean that determines whether this ﬁeld should be displayed at all. Obsolete Custom Fields are
hidden.
• Is mandatory: Boolean that determines whether this ﬁeld must be set. For single and multi-select ﬁelds, this
means that a (non-default) value must be selected; for text and date ﬁelds, some text must be entered.
• Field only appears when: A custom ﬁeld can be made visible when some criteria is met. For instance, when the
bug belongs to one or more products, or when the bug is of some given severity. If left empty, then the custom
ﬁeld will always be visible, in all bugs.
• Field that controls the values that appear in this ﬁeld: When the custom ﬁeld is of type Drop Down or
Multiple-Selection Box, you can restrict the availability of the values of the custom ﬁeld based on
the value of another ﬁeld. This criteria is independent of the criteria used in the Field only appears
when setting. For instance, you may decide that some given value valueY is only available when the bug
status is RESOLVED while the value valueX should always be listed. Once you have selected the ﬁeld that
should control the availability of the values of this custom ﬁeld, you can edit values of this custom ﬁeld to set
the criteria; see Viewing/Editing Legal Values.
4.6.2 Editing Custom Fields
As soon as a Custom Field is created, its name and type cannot be changed. If this ﬁeld is a drop-down menu, its legal
values can be set as described in Viewing/Editing Legal Values. All other attributes can be edited as described above.
4.6.3 Deleting Custom Fields
Only custom ﬁelds that are marked as obsolete, and that have never been used, can be deleted completely (else the
integrity of the bug history would be compromised). For custom ﬁelds marked as obsolete, a “Delete” link will appear
in the Action column. If the custom ﬁeld has been used in the past, the deletion will be rejected. Marking the ﬁeld
as obsolete, however, is sufﬁcient to hide it from the user interface entirely.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.7 Field Values
Legal values for the operating system, platform, bug priority and severity, and custom ﬁelds of type Drop Down and
Multiple-Selection Box (see Custom Fields), as well as the list of valid bug statuses and resolutions, can be
customized from the same interface. You can add, edit, disable, and remove the values that can be used with these
ﬁelds.
88
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
4.7.1 Viewing/Editing Legal Values
Editing legal values requires admin privileges. Select “Field Values” from the Administration page. A list of all
ﬁelds, both system and Custom, for which legal values can be edited appears. Click a ﬁeld name to edit its legal
values.
There is no limit to how many values a ﬁeld can have, but each value must be unique to that ﬁeld. The sortkey is
important to display these values in the desired order.
When the availability of the values of a custom ﬁeld is controlled by another ﬁeld, you can select from here which
value of the other ﬁeld must be set for the value of the custom ﬁeld to appear.
4.7.2 Deleting Legal Values
Legal values from Custom Fields can be deleted, but only if the following two conditions are respected:
1. The value is not set as the default for the ﬁeld.
2. No bug is currently using this value.
If any of these conditions is not respected, the value cannot be deleted. The only way to delete these values is to
reassign bugs to another value and to set another value as default for the ﬁeld.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.8 Workﬂow
The bug status workﬂow—which statuses are valid transitions from which other statuses—can be customized.
You need to begin by deﬁning the statuses and resolutions you want to use (see Field Values). By convention, these
are in all capital letters.
Only one bug status, UNCONFIRMED, can never be renamed nor deleted. However, it can be disabled entirely on a
per-product basis (see Classiﬁcations, Products, Components, Versions, and Milestones). The status referred to by the
duplicate_or_move_bug_status parameter, if set, is also undeletable. To make it deletable, simply set the value of that
parameter to a different status.
Aside from the empty value, two resolutions, DUPLICATE and FIXED, cannot be renamed or deleted. (FIXED could
be if we ﬁxed bug 1007605.)
Once you have deﬁned your statuses, you can conﬁgure the workﬂow of how a bug moves between them. The
workﬂow conﬁguration page displays all existing bug statuses twice: ﬁrst on the left for the starting status, and on the
top for the target status in the transition. If the checkbox is checked, then the transition from the left to the top status
is legal; if it’s unchecked, that transition is forbidden.
The status used as the duplicate_or_move_bug_status parameter (normally RESOLVED or its equivalent) is required
to be a legal transition from every other bug status, and so this is enforced on the page.
The “View Comments Required on Status Transitions” link below the table lets you set which transitions require a
comment from the user.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.8. Workﬂow
89

Bugzilla Documentation, Release 5.0.6
4.9 Groups and Security
Groups allow for separating bugs into logical divisions. Groups are typically used to isolate bugs that should only
be seen by certain people. For example, a company might create a different group for each one of its customers or
partners. Group permissions could be set so that each partner or customer would only have access to their own bugs.
Or, groups might be used to create variable access controls for different departments within an organization. Another
common use of groups is to associate groups with products, creating isolation and access control on a per-product
basis.
Groups and group behaviors are controlled in several places:
1. The group conﬁguration page. To view or edit existing groups, or to create new groups, access the “Groups” link
from the “Administration” page. This section of the manual deals primarily with the aspect of group controls
accessed on this page.
2. Global conﬁguration parameters. Bugzilla has several parameters that control the overall default group behavior
and restriction levels. For more information on the parameters that control group behavior globally, see Group
Security.
3. Product association with groups. Most of the functionality of groups and group security is controlled at the
product level. Some aspects of group access controls for products are discussed in this section, but for more
detail see Assigning Group Controls to Products.
4. Group access for users. See Assigning Users to Groups for details on how users are assigned group access.
Group permissions are such that if a bug belongs to a group, only members of that group can see the bug. If a bug is
in more than one group, only members of all the groups that the bug is in can see the bug. For information on granting
read-only access to certain people and full edit access to others, see Assigning Group Controls to Products.
Note:
By default, bugs can also be seen by the Assignee, the Reporter, and everyone on the CC List, regardless of
whether or not the bug would typically be viewable by them. Visibility to the Reporter and CC List can be overridden
(on a per-bug basis) by bringing up the bug, ﬁnding the section that starts with Users in the roles selected
below... and un-checking the box next to either ‘Reporter’ or ‘CC List’ (or both).
4.9.1 Creating Groups
To create a new group, follow the steps below:
1. Select the Administration link in the page footer, and then select the Groups link from the Administration
page.
2. A table of all the existing groups is displayed. Below the table is a description of all the ﬁelds. To create a new
group, select the Add Group link under the table of existing groups.
3. There are ﬁve ﬁelds to ﬁll out. These ﬁelds are documented below the form. Choose a name and description
for the group. Decide whether this group should be used for bugs (in all likelihood this should be selected).
Optionally, choose a regular expression that will automatically add any matching users to the group, and choose
an icon that will help identify user comments for the group. The regular expression can be useful, for example,
to automatically put all users from the same company into one group (if the group is for a speciﬁc customer or
partner).
Note:
If User RegExp is ﬁlled out, users whose email addresses match the regular expression will auto-
matically be members of the group as long as their email addresses continue to match the regular expression.
If their email address changes and no longer matches the regular expression, they will be removed from the
90
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
group. Versions 2.16 and older of Bugzilla did not automatically remove users whose email addresses no longer
matched the RegExp.
Warning:
If specifying a domain in the regular expression, end the regexp with a “$”.
Oth-
erwise,
when granting access to “@mycompany.com”,
access will also be granted to ‘badper-
son@mycompany.com.cracker.net’. Use the syntax, ‘@mycompany.com$’ for the regular expression.
4. After the new group is created, it can be edited for additional options. The “Edit Group” page allows for
specifying other groups that should be included in this group and which groups should be permitted to add and
delete users from this group. For more details, see Editing Groups and Assigning Group Permissions.
4.9.2 Editing Groups and Assigning Group Permissions
To access the “Edit Groups” page, select the Administration link in the page footer, and then select the Groups
link from the Administration page. A table of all the existing groups is displayed. Click on a group name you wish to
edit or control permissions for.
The “Edit Groups” page contains the same ﬁve ﬁelds present when creating a new group. Below that are two additional
sections, “Group Permissions” and “Mass Remove”. The “Mass Remove” option simply removes all users from the
group who match the regular expression entered. The “Group Permissions” section requires further explanation.
The “Group Permissions” section on the “Edit Groups” page contains four sets of permissions that control the rela-
tionship of this group to other groups. If the usevisibilitygroups parameter is in use (see Parameters) two additional
sets of permissions are displayed. Each set consists of two select boxes. On the left, a select box with a list of all
existing groups. On the right, a select box listing all groups currently selected for this permission setting (this box will
be empty for new groups). The way these controls allow groups to relate to one another is called inheritance. Each of
the six permissions is described below.
Groups That Are a Member of This Group Members of any groups selected here will automatically have member-
ship in this group. In other words, members of any selected group will inherit membership in this group.
Groups That This Group Is a Member Of Members of this group will inherit membership to any group selected here.
For example, suppose the group being edited is an Admin group. If there are two products (Product1 and
Product2) and each product has its own group (Group1 and Group2), and the Admin group should have access
to both products, simply select both Group1 and Group2 here.
Groups That Can Grant Membership in This Group The members of any group selected here will be able add users
to this group, even if they themselves are not in this group.
Groups That This Group Can Grant Membership In Members of this group can add users to any group selected
here, even if they themselves are not in the selected groups.
Groups That Can See This Group Members of any selected group can see the users in this group. This setting is only
visible if the usevisibilitygroups parameter is enabled on the Bugzilla Conﬁguration page. See Parameters for
information on conﬁguring Bugzilla.
Groups That This Group Can See Members of this group can see members in any of the selected groups. This setting
is only visible if the usevisibilitygroups parameter is enabled on the the Bugzilla Conﬁguration page. See
Parameters for information on conﬁguring Bugzilla.
4.9.3 Assigning Users to Groups
A User can become a member of a group in several ways:
4.9. Groups and Security
91

Bugzilla Documentation, Release 5.0.6
1. The user can be explicitly placed in the group by editing the user’s proﬁle. This can be done by accessing the
“Users” page from the “Administration” page. Use the search form to ﬁnd the user you want to edit group
membership for, and click on their email address in the search results to edit their proﬁle. The proﬁle page lists
all the groups and indicates if the user is a member of the group either directly or indirectly. More information
on indirect group membership is below. For more details on User Administration, see Users.
2. The group can include another group of which the user is a member. This is indicated by square brackets around
the checkbox next to the group name in the user’s proﬁle. See Editing Groups and Assigning Group Permissions
for details on group inheritance.
3. The user’s email address can match the regular expression that has been speciﬁed to automatically grant mem-
bership to the group. This is indicated by “*” around the check box by the group name in the user’s proﬁle. See
Creating Groups for details on the regular expression option when creating groups.
4.9.4 Assigning Group Controls to Products
The primary functionality of groups is derived from the relationship of groups to products. The concepts around
segregating access to bugs with product group controls can be confusing. For details and examples on this topic, see
Assigning Group Controls to Products.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.10 Keywords
The administrator can deﬁne keywords which can be used to tag and categorise bugs. For example, the keyword
“regression” is commonly used. A company might have a policy stating all regressions must be ﬁxed by the next
release—this keyword can make tracking those bugs much easier. Keywords are global, rather than per product.
Keywords can be created, edited, or deleted by clicking the “Keywords” link in the admin page. There are two ﬁelds
for each keyword—the keyword itself and a brief description. Currently keywords cannot be marked obsolete to
prevent future usage.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.11 Whining
Whining is a feature in Bugzilla that can regularly annoy users at speciﬁed times. Using this feature, users can execute
saved searches at speciﬁc times (e.g. the 15th of the month at midnight) or at regular intervals (e.g. every 15 minutes
on Sundays). The results of the searches are sent to the user, either as a single email or as one email per bug, along
with some descriptive text.
Warning: Throughout this section it will be assumed that all users are members of the bz_canusewhines group,
membership in which is required in order to use the Whining system. You can easily make all users members of
the bz_canusewhines group by setting the User RegExp to “.*” (without the quotes).
Also worth noting is the bz_canusewhineatothers group. Members of this group can create whines for any user
or group in Bugzilla using an extended form of the whining interface. Features only available to members of the
bz_canusewhineatothers group will be noted in the appropriate places.
92
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
Note: For whining to work, a special Perl script must be executed at regular intervals. More information on this is
available in Whining.
Note: This section does not cover the whineatnews.pl script. See Whining at Untriaged Bugs for more information
on The Whining Cron.
4.11.1 The Event
The whining system deﬁnes an “Event” as one or more queries being executed at regular intervals, with the results of
said queries (if there are any) being emailed to the user. Events are created by clicking on the “Add new event” button.
Once a new event is created, the ﬁrst thing to set is the “Email subject line”. The contents of this ﬁeld will be used in
the subject line of every email generated by this event. In addition to setting a subject, space is provided to enter some
descriptive text that will be included at the top of each message (to help you in understanding why you received the
email in the ﬁrst place).
The next step is to specify when the Event is to be run (the Schedule) and what searches are to be performed (the
Searches).
4.11.2 Whining Schedule
Each whining event is associated with zero or more schedules. A schedule is used to specify when the search (speciﬁed
below) is to be run. A new event starts out with no schedules (which means it will never run, as it is not scheduled to
run). To add a schedule, press the “Add a new schedule” button.
Each schedule includes an interval, which you use to tell Bugzilla when the event should be run. An event can be run
on certain days of the week, certain days of the month, during weekdays (deﬁned as Monday through Friday), or every
day.
Warning: Be careful if you set your event to run on the 29th, 30th, or 31st of the month, as your event may not
run exactly when expected. If you want your event to run on the last day of the month, select “Last day of the
month” as the interval.
Once you have speciﬁed the day(s) on which the event is to be run, you should now specify the time at which the
event is to be run. You can have the event run at a certain hour on the speciﬁed day(s), or every hour, half-hour, or
quarter-hour on the speciﬁed day(s).
If a single schedule does not execute an event as many times as you would want, you can create another schedule for
the same event. For example, if you want to run an event on days whose numbers are divisible by seven, you would
need to add four schedules to the event, setting the schedules to run on the 7th, 14th, 21st, and 28th (one day per
schedule) at whatever time (or times) you choose.
Note:
If you are a member of the bz_canusewhineatothers group, then you will be presented with another option:
“Mail to”. Using this you can control who will receive the emails generated by this event. You can choose to send the
emails to a single user (identiﬁed by email address) or a single group (identiﬁed by group name). To send to multiple
users or groups, create a new schedule for each additional user/group.
4.11. Whining
93

Bugzilla Documentation, Release 5.0.6
4.11.3 Whining Searches
Each whining event is associated with zero or more searches. A search is any saved search to be run as part of the
speciﬁed schedule (see above). You start out without any searches associated with the event (which means that the
event will not run, as there will never be any results to return). To add a search, press the “Add a search” button.
The ﬁrst ﬁeld to examine in your newly added search is the Sort ﬁeld. Searches are run, and results included, in the
order speciﬁed by the Sort ﬁeld. Searches with smaller Sort values will run before searches with bigger Sort values.
The next ﬁeld to examine is the Search ﬁeld. This is where you choose the actual search that is to be run. Instead of
deﬁning search parameters here, you are asked to choose from the list of saved searches (the same list that appears
at the bottom of every Bugzilla page). You are only allowed to choose from searches that you have saved yourself
(the default saved search, “My Bugs”, is not a valid choice). If you do not have any saved searches, you can take this
opportunity to create one (see Bug Lists).
Note: When running searches, the whining system acts as if you are the user executing the search. This means that
the whining system will ignore bugs that match your search but that you cannot access.
Once you have chosen the saved search to be executed, give the search a descriptive title. This title will appear in the
email, above the results of the search. If you choose “One message per bug”, the search title will appear at the top of
each email that contains a bug matching your search.
Finally, decide if the results of the search should be sent in a single email, or if each bug should appear in its own
email.
Warning: Think carefully before checking the “One message per bug” box. If you create a search that matches
thousands of bugs, you will receive thousands of emails!
4.11.4 Saving Your Changes
Once you have deﬁned at least one schedule and created at least one search, go ahead and “Update/Commit”. This
will save your Event and make it available for immediate execution.
Note: If you ever feel like deleting your event, you may do so using the “Remove Event” button in the upper-right
corner of each Event. You can also modify an existing event, so long as you “Update/Commit” after completing your
modiﬁcations.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.12 Quips
Quips are small user-deﬁned messages (often quotes or witty sayings) that can be conﬁgured to appear at the top of
search results. Each Bugzilla installation has its own speciﬁc quips. Whenever a quip needs to be displayed, a random
selection is made from the pool of already existing quips.
Quip submission is controlled by quip_list_entry_control parameter. It has several possible values: open, moderated,
or closed. In order to enable quips approval you need to set this parameter to “moderated”. In this way, users are free
to submit quips for addition, but an administrator must explicitly approve them before they are actually used.
94
Chapter 4. Administration Guide

Bugzilla Documentation, Release 5.0.6
In order to see the user interface for the quips, you can click on a quip when it is displayed together with the search
results. You can also go directly to the quips.cgi URL (preﬁxed with the usual web location of the Bugzilla installation).
Once the quip interface is displayed, the “view and edit the whole quip list” link takes you to the quips administration
page, which lists all quips available in the database.
Next to each quip there is a checkbox, under the “Approved” column. Quips that have this checkbox checked are
already approved and will appear next to the search results. The ones that have it unchecked are still preserved in the
database but will not appear on search results pages. User submitted quips have initially the checkbox unchecked.
Also, there is a delete link next to each quip, which can be used in order to permanently delete a quip.
Display of quips is controlled by the display_quips user preference. Possible values are “on” and “off”.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.13 Installed Extensions
Bugzilla can be enhanced using extensions (see Extensions). If an extension comes with documentation in the appro-
priate format, and you build your own copy of the Bugzilla documentation using makedocs.pl, then the documen-
tation for your installed extensions will show up here.
Your Bugzilla installation has the following extensions available (as of the last time you compiled the documentation):
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
4.13. Installed Extensions
95

Bugzilla Documentation, Release 5.0.6
96
Chapter 4. Administration Guide

CHAPTER 5
Integration and Customization Guide
You may ﬁnd that Bugzilla already does what you want it to do, you just need to conﬁgure it correctly. Read the
Administration Guide sections carefully to see if that’s the case for you. If not, then this chapter explains how to use
the available mechanisms for integration and customization.
5.1 Customization FAQ
How do I. . .
. . . add a new ﬁeld on a bug? Use Custom Fields or, if you just want new form ﬁelds on bug entry but don’t need
Bugzilla to track the ﬁeld seperately thereafter, you can use a custom bug entry form.
. . . change the name of a built-in bug ﬁeld? Edit the relevant value in the template template/en/default/
global/field-descs.none.tmpl.
. . . use a word other than ‘bug’ to describe bugs? Edit or override the appropriate values in the template
template/en/default/global/variables.none.tmpl.
. . . call the system something other than ‘Bugzilla’? Edit or override the appropriate value in the template
template/en/default/global/variables.none.tmpl.
. . . alter who can change what ﬁeld when? See Altering Who Can Change What.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
5.2 Languages
Bugzilla’s templates can be localized, although it’s a big job. If you have a localized set of templates for your
version of Bugzilla, Bugzilla can support multiple languages at once.
In that case, Bugzilla honours the user’s
Accept-Language HTTP header when deciding which language to serve. If multiple languages are installed,
97

Bugzilla Documentation, Release 5.0.6
a menu will display in the header allowing the user to manually select a different language. If they do this, their choice
will override the Accept-Language header.
Many language templates can be obtained from the localization section of the Bugzilla website. Instructions for
submitting new languages are also available from that location. There’s also a list of localization teams; you might
want to contact someone to ask about the status of their localization.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
5.3 Skins
Bugzilla supports skins - ways of changing the look of the UI without altering its underlying structure. It ships with
two - “Classic” and “Dusk”. You can ﬁnd some more listed on the wiki, and there are a couple more which are part of
bugzilla.mozilla.org. However, in each case you may need to check that the skin supports the version of Bugzilla you
have.
To create a new custom skin, make a directory that contains all the same CSS ﬁle names as skins/standard/,
and put your directory in skins/contrib/. Then, add your CSS to the appropriate ﬁles.
After you put the directory there, make sure to run checksetup.pl so that it can set the ﬁle permissions correctly.
After you have installed the new skin, it will show up as an option in the user’s Preferences, on the General tab. If you
would like to force a particular skin on all users, just select that skin in the Default Preferences in the Administration
UI, and then uncheck “Enabled” on the preference, so users cannot change it.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
5.4 Templates
Bugzilla uses a system of templates to deﬁne its user interface. The standard templates can be modiﬁed, replaced or
overridden. You can also use template hooks in an extension to add or modify the behaviour of templates using a stable
interface.
5.4.1 Template Directory Structure
The template directory structure starts with top level directory named template, which contains a directory for
each installed localization. Bugzilla comes with English templates, so the directory name is en, and we will discuss
template/en throughout the documentation. Below template/en is the default directory, which contains
all the standard templates shipped with Bugzilla.
Warning: A directory data/template also exists; this is where Template Toolkit puts the compiled versions
(i.e. Perl code) of the templates. Do not directly edit the ﬁles in this directory, or all your changes will be lost the
next time Template Toolkit recompiles the templates.
98
Chapter 5. Integration and Customization Guide

Bugzilla Documentation, Release 5.0.6
5.4.2 Choosing a Customization Method
If you want to edit Bugzilla’s templates, the ﬁrst decision you must make is how you want to go about doing so. There
are three choices, and which you use depends mainly on the scope of your modiﬁcations, and the method you plan to
use to upgrade Bugzilla.
1. You can directly edit the templates found in template/en/default.
2. You can copy the templates to be modiﬁed into a mirrored directory structure under template/en/custom.
Templates in this directory structure automatically override any identically-named and identically-located tem-
plates in the template/en/default directory. (The custom directory does not exist by default and must
be created if you want to use it.)
3. You can use the hooks built into many of the templates to add or modify the UI from an extension. Hooks
generally don’t go away and have a stable interface.
The third method is the best if there are hooks in the appropriate places and the change you want to do is possible
using hooks. It’s not very easy to modify existing UI using hooks; they are most commonly used for additions. You
can make modiﬁcations if you add JS code which then makes the modiﬁcations when the page is loaded. You can
remove UI by adding CSS to hide it.
Unlike code hooks, there is no requirement to document template hooks, so you just have to open up the template and
see (search for Hook.process).
If there are no hooks available, then the second method of customization should be used if you are going to make
major changes, because it is guaranteed that the contents of the custom directory will not be touched during an
upgrade, and you can then decide whether to revert to the standard templates, continue using yours, or make the effort
to merge your changes into the new versions by hand. It’s also good for entirely new ﬁles, and for a few ﬁles like
bug/create/user-message.html.tmpl which are designed to be entirely replaced.
Using the second method, your user interface may break if incompatible changes are made to the template interface.
Templates do change regularly and so interface changes are not individually documented, and you would need to work
out what had changed and adapt your template accordingly.
For minor changes, the convenience of the ﬁrst method is hard to beat. When you upgrade Bugzilla, git will merge
your changes into the new version for you. On the downside, if the merge fails then Bugzilla will not work properly
until you have ﬁxed the problem and re-integrated your code.
Also, you can see what you’ve changed using git diff, which you can’t if you fork the ﬁle into the custom
directory.
5.4.3 How To Edit Templates
Note: If you are making template changes that you intend on submitting back for inclusion in standard Bugzilla, you
should read the relevant sections of the Developers’ Guide.
Bugzilla uses a templating system called Template Toolkit. The syntax of the language is beyond the scope of this
guide. It’s reasonably easy to pick up by looking at the current templates; or, you can read the manual, available on
the Template Toolkit home page.
One thing you should take particular care about is the need to properly HTML ﬁlter data that has been passed into the
template. This means that if the data can possibly contain special HTML characters such as <, and the data was not
intended to be HTML, they need to be converted to entity form, i.e. &lt;. You use the html ﬁlter in the Template
Toolkit to do this (or the uri ﬁlter to encode special characters in URLs). If you forget, you may open up your
installation to cross-site scripting attacks.
5.4. Templates
99

Bugzilla Documentation, Release 5.0.6
You should run ./checksetup.pl after editing any templates. Failure to do so may mean either that your changes
are not picked up, or that the permissions on the edited ﬁles are wrong so the webserver can’t read them.
5.4.4 Template Formats and Types
Some CGI’s have the ability to use more than one template. For example, buglist.cgi can output itself as two
formats of HTML (complex and simple). Each of these is a separate template. The mechanism that provides this
feature is extensible - you can create new templates to add new formats.
You might use this feature to e.g. add a custom bug entry form for a particular subset of users or a particular type of
bug.
Bugzilla can also support different types of output - e.g. bugs are available as HTML and as XML, and this mechanism
is extensible also to add new content types. However, instead of using such interfaces or enhancing Bugzilla to add
more, you would be better off using the WebService API Reference to integrate with Bugzilla.
To see if a CGI supports multiple output formats and types, grep the CGI for get_format. If it’s not present, adding
multiple format/type support isn’t too hard - see how it’s done in other CGIs, e.g. config.cgi.
To make a new format template for a CGI which supports this, open a current template for that CGI and take note of
the INTERFACE comment (if present.) This comment deﬁnes what variables are passed into this template. If there
isn’t one, I’m afraid you’ll have to read the template and the code to ﬁnd out what information you get.
Write your template in whatever markup or text style is appropriate.
You now need to decide what content type you want your template served as. The content types are deﬁned in
the Bugzilla/Constants.pm ﬁle in the contenttypes constant. If your content type is not there, add it.
Remember the three- or four-letter tag assigned to your content type. This tag will be part of the template ﬁlename.
Save your new template as <stubname>-<formatname>.<contenttypetag>.tmpl. Try out the template
by calling the CGI as <cginame>.cgi?format=<formatname>. Add &ctype=<type> if the type is not
HTML.
5.4.5 Particular Templates
There are a few templates you may be particularly interested in customizing for your installation.
index.html.tmpl: This is the Bugzilla front page.
global/header.html.tmpl: This deﬁnes the header that goes on all Bugzilla pages. The header includes the
banner, which is what appears to users and is probably what you want to edit instead. However the header
also includes the HTML HEAD section, so you could for example add a stylesheet or META tag by editing the
header.
global/banner.html.tmpl: This contains the banner, the part of the header that appears at the top of all
Bugzilla pages. The default banner is reasonably barren, so you’ll probably want to customize this to give your
installation a distinctive look and feel. It is recommended you preserve the Bugzilla version number in some
form so the version you are running can be determined, and users know what docs to read.
global/footer.html.tmpl: This deﬁnes the footer that goes on all Bugzilla pages. Editing this is another way
to quickly get a distinctive look and feel for your Bugzilla installation.
global/variables.none.tmpl: This allows you to change the word ‘bug’ to something else (e.g. “issue”)
throughout the interface, and also to change the name Bugzilla to something else (e.g. “FooCorp Bug Tracker”).
list/table.html.tmpl: This template controls the appearance of the bug lists created by Bugzilla. Editing
this template allows per-column control of the width and title of a column, the maximum display length of each
entry, and the wrap behaviour of long entries. For long bug lists, Bugzilla inserts a ‘break’ every 100 bugs by
default; this behaviour is also controlled by this template, and that value can be modiﬁed here.
100
Chapter 5. Integration and Customization Guide

Bugzilla Documentation, Release 5.0.6
bug/create/user-message.html.tmpl: This is a message that appears near the top of the bug reporting
page. By modifying this, you can tell your users how they should report bugs.
bug/process/midair.html.tmpl: This is the page used if two people submit simultaneous changes to the
same bug. The second person to submit their changes will get this page to tell them what the ﬁrst person did,
and ask if they wish to overwrite those changes or go back and revisit the bug. The default title and header on
this page read “Mid-air collision detected!” If you work in the aviation industry, or other environment where this
might be found offensive (yes, we have true stories of this happening) you’ll want to change this to something
more appropriate for your environment.
bug/create/create.html.tmpl and bug/create/comment.txt.tmpl: You may not wish to go to the
effort of creating custom ﬁelds in Bugzilla, yet you want to make sure that each bug report contains a number of
pieces of important information for which there is not a special ﬁeld. The bug entry system has been designed
in an extensible fashion to enable you to add arbitrary HTML widgets, such as drop-down lists or textboxes, to
the bug entry page and have their values appear formatted in the initial comment.
An example of this is the guided bug submission form. The code for this comes with the Bugzilla distri-
bution as an example for you to copy.
It can be found in the ﬁles create-guided.html.tmpl and
comment-guided.html.tmpl.
A hidden ﬁeld that indicates the format should be added inside the form in order to make the template functional.
Its value should be the sufﬁx of the template ﬁlename. For example, if the ﬁle is called create-guided.
html.tmpl, then
<input type="hidden" name="format" value="guided">
is used inside the form.
So to use this feature, create a custom template for enter_bug.cgi.
The default template, on which
you could base it, is default/bug/create/create.html.tmpl. Call it custom/bug/create/
create-<formatname>.html.tmpl, and in it, add form inputs for each piece of information you’d like
collected - such as a build number, or set of steps to reproduce.
Then, create a template based on default/bug/create/comment.txt.tmpl, and call it custom/
bug/create/comment-<formatname>.txt.tmpl. It needs a couple of lines of boilerplate at the top
like this:
[% USE Bugzilla %]
[% cgi = Bugzilla.cgi %
Then,
this template can reference the form ﬁelds you have created using the syntax [% cgi.
param("field_name") %]. When a bug report is submitted, the initial comment attached to the bug
report will be formatted according to the layout of this template.
For example, if your custom enter_bug template had a ﬁeld:
<input type="text" name="buildid" size="30">
and then your comment.txt.tmpl had:
[% USE Bugzilla %]
[% cgi = Bugzilla.cgi %]
Build Identifier: [%+ cgi.param("buildid") %]
then something like:
Build Identifier: 20140303
would appear in the initial comment.
5.4. Templates
101

Bugzilla Documentation, Release 5.0.6
This system allows you to gather structured data in bug reports without the overhead and UI complexity of a
large number of custom ﬁelds.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
5.5 Extensions
One of the best ways to customize Bugzilla is by using a Bugzilla Extension. Extensions can modify both the code
and UI of Bugzilla in a way that can be distributed to other Bugzilla users and ported forward to future versions of
Bugzilla with minimal effort. We maintain a list of available extensions written by other people on our wiki. You
would need to make sure that the extension in question works with your version of Bugzilla.
Or, you can write your own extension.
See the Bugzilla Extension documentation for the core documentation
on how to do that. It would make sense to read the section on Templates. There is also a sample extension in
$BUGZILLA_HOME/extensions/Example/ which gives examples of how to use all the code hooks.
This section explains how to achieve some common tasks using the Extension APIs.
5.5.1 Adding A New Page to Bugzilla
There are occasions where it’s useful to add a new page to Bugzilla which has little or no relation to other pages, and
perhaps doesn’t use very much Bugzilla data. A help page, or a custom report for example. The best mechanism for
this is to use page.cgi and the page_before_template hook.
5.5.2 Altering Data On An Existing Page
The template_before_process hook can be used to tweak the data displayed on a particular existing page, if
you know what template is used. It has access to all the template variables before they are passed to the templating
engine.
5.5.3 Adding New Fields To Bugs
To add new ﬁelds to a bug, you need to do the following:
• Add an install_update_db hook to add the ﬁelds by calling Bugzilla::Field->create (only if
the ﬁeld doesn’t already exist). Here’s what it might look like for a single ﬁeld:
my $field = new Bugzilla::Field({ name => $name });
return if $field;
$field = Bugzilla::Field->create({
name
=> $name,
description => $description,
type
=> $type,
# From list in Constants.pm
enter_bug
=> 0,
buglist
=> 0,
custom
=> 1,
});
• Push the name of the ﬁeld onto the relevant arrays in the bug_columns and bug_fields hooks.
102
Chapter 5. Integration and Customization Guide

Bugzilla Documentation, Release 5.0.6
• If you want direct accessors, or other functions on the object, you need to add a BEGIN block to your Exten-
sion.pm:
BEGIN {
*Bugzilla::Bug::is_foopy = \&_bug_is_foopy;
}
...
sub _bug_is_foopy {
return $_[0]->{'is_foopy'};
}
• You don’t have to change Bugzilla/DB/Schema.pm.
• You
can
use
bug_end_of_create,
bug_end_of_create_validators,
and
bug_end_of_update to create or update the values for your new ﬁeld.
5.5.4 Adding New Fields To Other Things
If you are adding the new ﬁelds to an object other than a bug, you need to go a bit lower-level. With reference to the
instructions above:
• In install_update_db, use bz_add_column instead
• Push on the columns in object_columns and object_update_columns instead of bug_columns.
• Add validators for the values in object_validators
The process for adding accessor functions is the same.
You
can
use
the
hooks
object_end_of_create,
object_end_of_create_validators,
object_end_of_set_all, and object_end_of_update to create or update the values for the new
object ﬁelds you have added. In the hooks you can check the object type being operated on and skip any objects you
don’t care about. For example, if you added a new ﬁeld to the products table:
sub object_end_of_create {
my ($self, $args) = @_;
my $class = $args->{'class'};
my $object = $args->{'object'};
if ($class->isa('Bugzilla::Product') {
[...]
}
}
You will need to do this ﬁltering for most of the hooks whose names begin with object_.
5.5.5 Adding Admin Conﬁguration Panels
If you add new functionality to Bugzilla, it may well have conﬁgurable options or parameters. The way to allow an
administrator to set those is to add a new conﬁguration panel.
As well as using the config_add_panels hook, you will need a template to deﬁne the UI strings for the panel.
See the templates in template/en/default/admin/params for examples, and put your own template in
template/en/default/admin/params in your extension’s directory.
You can access param values from Templates using:
5.5. Extensions
103

Bugzilla Documentation, Release 5.0.6
[% Param('param_name') %]
and from code using:
Bugzilla->params->{'param_name'}
5.5.6 Adding User Preferences
To add a new user preference:
• Call
add_setting('setting_name', ['some_option', 'another_option'],
'some_option') in the install_before_final_checks hook.
(The last parameter is the
name of the option which should be the default.)
• Add descriptions for the identiﬁers for your setting and choices (setting_name, some_option etc.)
to the
hash deﬁned in global/setting-descs.none.tmpl. Do this in a template hook: hook/global/
setting-descs-settings.none.tmpl. Your code can see the hash variable; just set more members in
it.
• To
change
behaviour
based
on
the
setting,
reference
it
in
templates
using
[%
user.settings.setting_name.value %].
Reference
it
in
code
using
$user->settings->{'setting_name'}->{'value'}.
The value will be one of the option
tag names (e.g. some_option).
5.5.7 Altering Who Can Change What
Companies often have rules about which employees, or classes of employees, are allowed to change certain things in
the bug system. For example, only the bug’s designated QA Contact may be allowed to VERIFY the bug. Bugzilla
has been designed to make it easy for you to write your own custom rules to deﬁne who is allowed to make what sorts
of value transition.
By default, assignees, QA owners and users with editbugs privileges can edit all ﬁelds of bugs, except group restrictions
(unless they are members of the groups they are trying to change). Bug reporters also have the ability to edit some
ﬁelds, but in a more restrictive manner. Other users, without editbugs privileges, cannot edit bugs, except to comment
and add themselves to the CC list.
Because this kind of change is such a common request, we have added a speciﬁc hook for it that Extensions can call.
It’s called bug_check_can_change_field, and it’s documented in the Hooks documentation.
5.5.8 Checking Syntax
It’s not immediately obvious how to check the syntax of your extension’s Perl modules, if it contains any. Running
checksetup.pl might do some of it, but the errors aren’t necessarily massively informative.
perl -Mlib=lib -MBugzilla -e 'BEGIN { Bugzilla->extensions; } use
Bugzilla::Extension::ExtensionName::Class;'
(run from $BUGZILLA_HOME) is what you need.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
104
Chapter 5. Integration and Customization Guide

Bugzilla Documentation, Release 5.0.6
5.6 APIs
Bugzilla has a number of APIs that you can call in your code to extract information from and put information into
Bugzilla. Some are deprecated and will soon be removed. Which one to use? Short answer: the REST WebService
API v1 should be used for all new integrations, but keep an eye out for version 2, coming soon.
The APIs currently available are as follows:
5.6.1 Core Module API
Most of the core Bugzilla modules have extensive documentation inside the modules themselves. You can view the
POD documentation to help with using the core modules in your extensions.
5.6.2 Ad-Hoc APIs
Various pages on Bugzilla are available in machine-parseable formats as well as HTML. For example, bugs can be
downloaded as XML, and buglists as CSV. CSV is useful for spreadsheet import. There should be links on the HTML
page to alternate data formats where they are available.
5.6.3 XML-RPC
Bugzilla has an XML-RPC API. This will receive no further updates and will be removed in a future version of
Bugzilla.
Endpoint: /xmlrpc.cgi
5.6.4 JSON-RPC
Bugzilla has a JSON-RPC API. This will receive no further updates and will be removed in a future version of Bugzilla.
Endpoint: /jsonrpc.cgi
5.6.5 REST
Bugzilla has a REST API which is the currently-recommended API for integrating with Bugzilla. The current REST
API is version 1. It is stable, and so will not be changed in a backwardly-incompatible way.
This is the currently-recommended API for new development.
Endpoint: /rest
5.6.6 BzAPI/BzAPI-Compatible REST
The ﬁrst ever REST API for Bugzilla was implemented using an external proxy called BzAPI. This became popular
enough that a BzAPI-compatible shim on top of the (native) REST API has been written, to allow code which used
the BzAPI API to take advantage of the speed improvements of direct integration without needing to be rewritten. The
shim is an extension which you would need to install in your Bugzilla.
Neither BzAPI nor this BzAPI-compatible API shim will receive any further updates, and they should not be used for
new code.
5.6. APIs
105

Bugzilla Documentation, Release 5.0.6
5.6.7 REST v2
The future of Bugzilla’s APIs is version 2 of the REST API, which will take the best of the current REST API and the
BzAPI API. It is still under development.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
106
Chapter 5. Integration and Customization Guide

CHAPTER 6
WebService API Reference
This Bugzilla installation has the following WebService APIs available (as of the last time you compiled the docu-
mentation). Documentation for the deprecated XML-RPC and JSON-RPC APIs is also available.
6.1 Core API v1
6.1.1 General
This is the standard REST API for external programs that want to interact with Bugzilla. It provides a REST interface
to various Bugzilla functions.
Basic Information
Browsing
If the Accept header of a request is set to text/html (as it is by an ordinary web browser) then the API will return
the JSON data as a HTML page which the browser can display. In other words, you can play with the API using just
your browser to see results in a human-readable form. This is a good way to try out the various GET calls, even if you
can’t use it for POST or PUT.
Data Format
The REST API only supports JSON input, and either JSON or JSONP output. So objects sent and received must be in
JSON format.
On every request, you must set both the Accept and Content-Type HTTP headers to the MIME type of the data
format you are using to communicate with the API. Content-Type tells the API how to interpret your request, and
Accept tells it how you want your data back. Content-Type must be application/json. Accept can be
either that, or application/javascript for JSONP. In the latter‘case, add a callback parameter to name
your callback.
Parameters may also be passed in as part of the query string for non-GET requests and will override any matching
parameters in the request body.
107

Bugzilla Documentation, Release 5.0.6
Example request which returns the current version of Bugzilla:
GET /rest/version HTTP/1.1
Host: bugzilla.example.com
Accept: application/json
Example response:
HTTP/1.1 200 OK
Vary: Accept
Content-Type: application/json
{
"version" : "4.2.9+"
}
Errors
When an error occurs over REST, an object is returned with the key error set to true.
The error contents look similar to:
{
"error": true,
"message": "Some message here",
"code": 123
}
Common Data Types
The Bugzilla API uses the following various types of parameters:
type
description
int
Integer.
dou-
ble
A ﬂoating-point number.
string A string.
email A string representing an email address. This value, when returned, may be ﬁltered based on if the user is
logged in or not.
date
A speciﬁc date. Example format: YYYY-MM-DD.
date-
time
A
date/time.
Timezone
should
be
in
UTC
unless
otherwise
noted.
Example
format:
YYYY-MM-DDTHH24:MI:SSZ.
booleantrue or false.
base64 A base64-encoded string. This is the only way to transfer binary data via the API.
ar-
ray
An array. There may be mixed types in an array. [ and ] are used to represent the beginning and end of
arrays.
ob-
ject
A mapping of keys to values. Called a “hash”, “dict”, or “map” in some other programming languages. The
keys are strings, and the values can be any type. { and } are used to represent the beginning and end of
objects.
Parameters that are required will be displayed in bold in the parameters table for each API method.
108
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
Authentication
Some methods do not require you to log in. An example of this is Get Bug. However, authenticating yourself allows
you to see non-public information, for example, a bug that is not publicly visible.
There are two ways to authenticate yourself:
API Keys
You can specify Bugzilla_api_key or simply api_key as an argument to any call, and you will be logged in as
that user if the key is correct and has not been revoked. You can set up an API key by using the ‘API Key’ tab in the
Preferences pages.
Login and Password
You can specify Bugzilla_login and Bugzilla_password or simply login and password respectively,
as arguments to any call, and you will be logged in as that user if your credentials are correct.
name
type
description
Bugzilla_login
string
A user’s login name.
Bugzilla_password
string
That user’s password.
Bugzilla_restrictlogin
boolean
If true, then your login will only be valid for your IP address.
The Bugzilla_restrictlogin option is only used when you have also speciﬁed Bugzilla_login and
Bugzilla_password.
There is also a deprecated method of authentication described below that will be removed in the version after Bugzilla
5.0.
Bugzilla Tokens
You can use Login to log in as a Bugzilla user. This issues a token that you must then use in future calls. Just use the
value for token and pass as either Bugzilla_token or simply token as arguments to an API call.
name
type
description
Bugzilla_token
string You can specify this as argument to any call, and you will be logged in as that user if the token
is correct. This is the token returned when calling Login mentioned above.
An error is thrown if you pass an invalid token; you will need to log in again to get a new token.
Also starting with Bugzilla 5.0, login cookies are no longer returned by Login due to security concerns.
Useful Parameters
Many calls take common arguments. These are documented below and linked from the individual calls where these
parameters are used.
Including Fields
Many calls return an array of objects with various ﬁelds in the objects. (For example, Get Bug returns a list of bugs
that have ﬁelds like id, summary, creation_time, etc.)
These parameters allow you to limit what ﬁelds are present in the objects, to improve performance or save some
bandwidth.
include_fields: The (case-sensitive) names of ﬁelds in the response data. Only the ﬁelds speciﬁed in the object
will be returned, the rest will not be included. Fields should be comma delimited.
Invalid ﬁeld names are ignored.
6.1. Core API v1
109

Bugzilla Documentation, Release 5.0.6
Example request to Get User:
GET /rest/user/1?include_fields=id,name
would return something like:
{
"users" : [
{
"id" : 1,
"name" : "user@domain.com"
}
]
}
Excluding Fields
exclude_fields: The (case-sensitive) names of ﬁelds in the return value. Theﬁelds speciﬁed will not be included
in the returned hashes. Fields should be comma delimited.
Invalid ﬁeld names are ignored.
Specifying ﬁelds here overrides include_fields, so if you specify a ﬁeld in both, it will be excluded, not included.
Example request to Get User:
GET /rest/user/1?exclude_fields=name
would return something like:
{
"users" : [
{
"id" : 1,
"real_name" : "John Smith"
}
]
}
Some calls support specifying “subﬁelds”. If a call states that it supports “subﬁeld” restrictions, you can restrict what
information is returned within the ﬁrst ﬁeld. For example, if you call Get Product with an include_fields of
components.name, then only the component name would be returned (and nothing else). You can include the main
ﬁeld, and exclude a subﬁeld.
There are several shortcut identiﬁers to ask for only certain groups of ﬁelds to be returned or excluded:
value description
_all
All possible ﬁelds are returned if this is speciﬁed in include_fields.
_de-
fault
Default ﬁelds are returned if include_fields is empty or this is speciﬁed. This is useful if you want
the default ﬁelds in addition to a ﬁeld that is not normally returned.
_ex-
tra
Extra ﬁelds are not returned by default and need to be manually speciﬁed in include_fields either by
exact ﬁeld name, or adding _extra.
_cus-
tom
Custom ﬁelds are normally returned by default unless this is added to exclude_fields. Also you can
use it in include_fields if for example you want speciﬁc ﬁeld names plus all custom ﬁelds. Custom
ﬁelds are normally only relevant to bug objects.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
110
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
6.1.2 Attachments
The Bugzilla API for creating, changing, and getting the details of attachments.
Get Attachment
This allows you to get data about attachments, given a list of bugs and/or attachment IDs. Private attachments will
only be returned if you are in the appropriate group or if you are the submitter of the attachment.
Request
To get all current attachments for a bug:
GET /rest/bug/(bug_id)/attachment
To get a speciﬁc attachment based on attachment ID:
GET /rest/bug/attachment/(attachment_id)
One of the below must be speciﬁed.
name
type
description
bug_id
int
Integer bug ID.
attachment_id
int
Integer attachment ID.
Response
{
"bugs" : {
"1345" : [
{ (attachment) },
{ (attachment) }
],
"9874" : [
{ (attachment) },
{ (attachment) }
],
},
"attachments" : {
"234" : { (attachment) },
"123" : { (attachment) },
}
}
An object containing two elements: bugs and attachments.
The attachments for the bug that you speciﬁed in the bug_id argument in input are returned in bugs on output.
bugs is a object that has integer bug IDs for keys and the values are arrays of objects as attachments. (Fields for
attachments are described below.)
For the attachment that you speciﬁed directly in attachment_id, they are returned in attachments on output.
This is a object where the attachment ids point directly to objects describing the individual attachment.
The ﬁelds for each attachment (where it says (attachment) in the sample response above) are:
6.1. Core API v1
111

Bugzilla Documentation, Release 5.0.6
name
type
description
data
base64 The raw data of the attachment, encoded as Base64.
size
int
The length (in bytes) of the attachment.
cre-
ation_time
date-
time
The time the attachment was created.
last_change_time
date-
time
The last time the attachment was modiﬁed.
id
int
The numeric ID of the attachment.
bug_id
int
The numeric ID of the bug that the attachment is attached to.
ﬁle_name
string
The ﬁle name of the attachment.
summary
string
A short string describing the attachment.
con-
tent_type
string
The MIME type of the attachment.
is_private
booleantrue if the attachment is private (only visible to a certain group called the “insidergroup”,
false otherwise.
is_obsolete booleantrue if the attachment is obsolete, false otherwise.
is_patch
booleantrue if the attachment is a patch, false otherwise.
creator
string
The login name of the user that created the attachment.
ﬂags
ar-
ray
Array of objects, each containing the information about the ﬂag currently set for each attach-
ment. Each ﬂag object contains items descibed in the Flag object below.
Flag object:
name
type
description
id
int
The ID of the ﬂag.
name
string
The name of the ﬂag.
type_id
int
The type ID of the ﬂag.
cre-
ation_date
date-
time
The timestamp when this ﬂag was originally created.
modiﬁca-
tion_date
date-
time
The timestamp when the ﬂag was last modiﬁed.
status
string
The current status of the ﬂag such as ?, +, or -.
setter
string
The login name of the user who created or last modiﬁed the ﬂag.
requestee
string
The login name of the user this ﬂag has been requested to be granted or denied. Note, this
ﬁeld is only returned if a requestee is set.
Create Attachment
This allows you to add an attachment to a bug in Bugzilla.
Request
To create attachment on a current bug:
POST /rest/bug/(bug_id)/attachment
{
"ids" : [ 35 ],
"is_patch" : true,
"comment" : "This is a new attachment comment",
"summary" : "Test Attachment",
"content_type" : "text/plain",
(continues on next page)
112
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
(continued from previous page)
"data" : "(Some base64 encoded content)",
"file_name" : "test_attachment.patch",
"obsoletes" : [],
"is_private" : false,
"flags" : [
{
"name" : "review",
"status" : "?",
"requestee" : "user@bugzilla.org",
"new" : true
}
]
}
The params to include in the POST body, as well as the returned data format, are the same as below. The bug_id
param will be overridden as it it pulled from the URL path.
name
type
description
ids
ar-
ray
The IDs or aliases of bugs that you want to add this attachment to. The same attachment and
comment will be added to all these bugs.
data
base64The content of the attachment. You must encode it in base64 using an appropriate client library
such as MIME::Base64 for Perl.
ﬁle_namestring The “ﬁle name” that will be displayed in the UI for this attachment and also downloaded copies
will be given.
sum-
mary
string A short string describing the attachment.
con-
tent_type
string The MIME type of the attachment, like text/plain or image/png.
com-
ment
string A comment to add along with this attachment.
is_patch booleantrue if Bugzilla should treat this attachment as a patch. If you specify this, you do not need to
specify a content_type. The content_type of the attachment will be forced to text/
plain. Defaults to false if not speciﬁed.
is_privatebooleantrue if the attachment should be private (restricted to the “insidergroup”), false if the attach-
ment should be public. Defaults to false if not speciﬁed.
ﬂags
ar-
ray
Flags objects to add to the attachment. The object format is described in the Flag object below.
Flag object:
To create a ﬂag, at least the status and the type_id or name must be provided. An optional requestee can be
passed if the ﬂag type is requestable to a speciﬁc user.
name
type
description
name
string
The name of the ﬂag type.
type_id
int
The internal ﬂag type ID.
status
string
The ﬂags new status (i.e. “?”, “+”, “-” or “X” to clear a ﬂag).
requestee
string
The login of the requestee if the ﬂag type is requestable to a speciﬁc user.
Response
6.1. Core API v1
113

Bugzilla Documentation, Release 5.0.6
{
"ids" : [
"2797"
]
}
name
type
description
ids
array
Attachment IDs created.
Update Attachment
This allows you to update attachment metadata in Bugzilla.
Request
To update attachment metadata on a current attachment:
PUT /rest/bug/attachment/(attachment_id)
{
"ids" : [ 2796 ],
"summary" : "Test XML file",
"comment" : "Changed this from a patch to a XML file",
"content_type" : "text/xml",
"is_patch" : 0
}
name
type
description
attachment_id
int
Integer attachment ID.
ids
array
The IDs of the attachments you want to update.
name
type
description
ﬁle_namestring The “ﬁle name” that will be displayed in the UI for this attachment.
sum-
mary
string A short string describing the attachment.
com-
ment
string An optional comment to add to the attachment’s bug.
con-
tent_type
string The MIME type of the attachment, like text/plain or image/png.
is_patch booleantrue if Bugzilla should treat this attachment as a patch. If you specify this, you do not need to
specify a content_type. The content_type of the attachment will be forced to text/
plain.
is_privatebooleantrue if the attachment should be private (restricted to the “insidergroup”), false if the attach-
ment should be public.
is_obsoletebooleantrue if the attachment is obsolete, false otherwise.
ﬂags
ar-
ray
An array of Flag objects with changes to the ﬂags. The object format is described in the Flag object
below.
Flag object:
The following values can be speciﬁed. At least the status and one of type_id, id, or name must be speciﬁed. If
a type_id or name matches a single currently set ﬂag, the ﬂag will be updated unless new is speciﬁed.
114
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
name
type
description
name
string
The name of the ﬂag that will be created or updated.
type_id int
The internal ﬂag type ID that will be created or updated. You will need to specify the type_id
if more than one ﬂag type of the same name exists.
status
string
The ﬂags new status (i.e. “?”, “+”, “-” or “X” to clear a ﬂag).
re-
ques-
tee
string
The login of the requestee if the ﬂag type is requestable to a speciﬁc user.
id
int
Use ID to specify the ﬂag to be updated. You will need to specify the id if more than one ﬂag is
set of the same name.
new
booleanSet to true if you speciﬁcally want a new ﬂag to be created.
Response
{
"attachments" : [
{
"changes" : {
"content_type" : {
"added" : "text/xml",
"removed" : "text/plain"
},
"is_patch" : {
"added" : "0",
"removed" : "1"
},
"summary" : {
"added" : "Test XML file",
"removed" : "test patch"
}
},
"id" : 2796,
"last_change_time" : "2014-09-29T14:41:53Z"
}
]
}
attachments (array) Change objects with the following items:
6.1. Core API v1
115

Bugzilla Documentation, Release 5.0.6
name
type
description
id
int
The ID of the attachment that was
updated.
last_change_time
datetime
The exact time that this update was
done at, for this attachment. If no
update was done (that is, no ﬁelds
had their values changed and no
comment was added) then this will
instead be the last time the attach-
ment was updated.
changes
object
The changes that were actually done
on this attachment.
The keys are
the names of the ﬁelds that were
changed, and the values are an ob-
ject with two items:
• added:
(string) The values
that were added to this ﬁeld.
Possibly a comma-and-space-
separated list if multiple val-
ues were added.
• removed: (string) The values
that were removed from this
ﬁeld.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
6.1.3 Bugs
The REST API for creating, changing, and getting the details of bugs.
This part of the Bugzilla REST API allows you to ﬁle new bugs in Bugzilla and to get information about existing bugs.
Get Bug
Gets information about particular bugs in the database.
Request
To get information about a particular bug using its ID or alias:
GET /rest/bug/(id_or_alias)
You can also use Search Bugs to return more than one bug at a time by specifying bug IDs as the search terms.
GET /rest/bug?id=12434,43421
name
type
description
id_or_alias
mixed
An integer bug ID or a bug alias string.
Response
116
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
{
"faults": [],
"bugs": [
{
"assigned_to_detail": {
"id": 2,
"real_name": "Test User",
"name": "user@bugzilla.org",
"email": "user@bugzilla.org"
},
"flags": [
{
"type_id": 11,
"modification_date": "2014-09-28T21:03:47Z",
"name": "blocker",
"status": "?",
"id": 2906,
"setter": "user@bugzilla.org",
"creation_date": "2014-09-28T21:03:47Z"
}
],
"resolution": "INVALID",
"id": 35,
"qa_contact": "",
"version": "1.0",
"status": "RESOLVED",
"creator": "user@bugzilla.org",
"cf_drop_down": "---",
"summary": "test bug",
"last_change_time": "2014-09-23T19:12:17Z",
"platform": "All",
"url": "",
"classification": "Unclassified",
"cc_detail": [
{
"id": 786,
"real_name": "Foo Bar",
"name": "foo@bar.com",
"email": "foo@bar.com"
},
],
"priority": "P1",
"is_confirmed": true,
"creation_time": "2000-07-25T13:50:04Z",
"assigned_to": "user@bugzilla.org",
"flags": [],
"alias": [],
"cf_large_text": "",
"groups": [],
"op_sys": "All",
"cf_bug_id": null,
"depends_on": [],
"is_cc_accessible": true,
"is_open": false,
"cf_qa_list_4": "---",
"keywords": [],
"cc": [
(continues on next page)
6.1. Core API v1
117

Bugzilla Documentation, Release 5.0.6
(continued from previous page)
"foo@bar.com",
],
"see_also": [],
"deadline": null,
"is_creator_accessible": true,
"whiteboard": "",
"dupe_of": null,
"target_milestone": "---",
"cf_mulitple_select": [],
"component": "SaltSprinkler",
"severity": "critical",
"cf_date": null,
"product": "FoodReplicator",
"creator_detail": {
"id": 28,
"real_name": "hello",
"name": "user@bugzilla.org",
"email": "namachi@netscape.com"
},
"cf_free_text": "",
"blocks": []
}
]
}
bugs (array) Each bug object contains information about the bugs with valid ids containing the following items:
These ﬁelds are returned by default or by specifying _default in include_fields.
name
type
description
actual_time
double
The total number of hours that this bug has taken so far. If you are not in the time-tracking group,
alias
array
The unique aliases of this bug. An empty array will be returned if this bug has no aliases.
assigned_to
string
The login name of the user to whom the bug is assigned.
assigned_to_detail
object
An object containing detailed user information for the assigned_to. To see the keys included in the
blocks
array
The IDs of bugs that are “blocked” by this bug.
cc
array
The login names of users on the CC list of this bug.
cc_detail
array
Array of objects containing detailed user information for each of the cc list members. To see the k
classiﬁcation
string
The name of the current classiﬁcation the bug is in.
component
string
The name of the current component of this bug.
creation_time
datetime
When the bug was created.
creator
string
The login name of the person who ﬁled this bug (the reporter).
creator_detail
object
An object containing detailed user information for the creator. To see the keys included in the user
deadline
string
The day that this bug is due to be completed, in the format YYYY-MM-DD.
depends_on
array
The IDs of bugs that this bug “depends on”.
dupe_of
int
The bug ID of the bug that this bug is a duplicate of. If this bug isn’t a duplicate of any bug, this w
estimated_time
double
The number of hours that it was estimated that this bug would take. If you are not in the time-track
ﬂags
array
An array of objects containing the information about ﬂags currently set for the bug. Each ﬂag obje
groups
array
The names of all the groups that this bug is in.
id
int
The unique numeric ID of this bug.
is_cc_accessible
boolean
If true, this bug can be accessed by members of the CC list, even if they are not in the groups the b
is_conﬁrmed
boolean
true if the bug has been conﬁrmed. Usually this means that the bug has at some point been move
is_open
boolean
true if this bug is open, false if it is closed.
is_creator_accessible
boolean
If true, this bug can be accessed by the creator of the bug, even if they are not a member of the g
118
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
Table 1 – continued from previous pag
name
type
description
keywords
array
Each keyword that is on this bug.
last_change_time
datetime
When the bug was last changed.
op_sys
string
The name of the operating system that the bug was ﬁled against.
platform
string
The name of the platform (hardware) that the bug was ﬁled against.
priority
string
The priority of the bug.
product
string
The name of the product this bug is in.
qa_contact
string
The login name of the current QA Contact on the bug.
qa_contact_detail
object
An object containing detailed user information for the qa_contact. To see the keys included in the
remaining_time
double
The number of hours of work remaining until work on this bug is complete. If you are not in the ti
resolution
string
The current resolution of the bug, or an empty string if the bug is open.
see_also
array
The URLs in the See Also ﬁeld on the bug.
severity
string
The current severity of the bug.
status
string
The current status of the bug.
summary
string
The summary of this bug.
target_milestone
string
The milestone that this bug is supposed to be ﬁxed by, or for closed bugs, the milestone that it was
update_token
string
The token that you would have to pass to the process_bug.cgi page in order to update this bu
url
string
A URL that demonstrates the problem described in the bug, or is somehow related to the bug repo
version
string
The version the bug was reported against.
whiteboard
string
The value of the “status whiteboard” ﬁeld on the bug.
Custom ﬁelds:
Every custom ﬁeld in this installation will also be included in the return value. Most ﬁelds are returned as strings.
However, some ﬁeld types have different return values.
Normally custom ﬁelds are returned by default similar to normal bug ﬁelds or you can specify only custom ﬁelds by
using _custom in include_fields.
Extra ﬁelds:
These ﬁelds are returned only by specifying _extra or the ﬁeld name in include_fields.
name type
description
tags
ar-
ray
Each array item is a tag name. Note that tags are personal to the currently logged in user and are not
the same as comment tags.
User object:
name
type
description
id
int
The user ID for this user.
real_name
string
The ‘real’ name for this user, if any.
name
string
The user’s Bugzilla login.
email
string
The user’s email address. Currently this is the same value as the name.
Flag object:
6.1. Core API v1
119

Bugzilla Documentation, Release 5.0.6
name
type
description
id
int
The ID of the ﬂag.
name
string
The name of the ﬂag.
type_id
int
The type ID of the ﬂag.
cre-
ation_date
date-
time
The timestamp when this ﬂag was originally created.
modiﬁca-
tion_date
date-
time
The timestamp when the ﬂag was last modiﬁed.
status
string
The current status of the ﬂag.
setter
string
The login name of the user who created or last modiﬁed the ﬂag.
requestee
string
The login name of the user this ﬂag has been requested to be granted or denied. Note, this
ﬁeld is only returned if a requestee is set.
Custom ﬁeld object:
You can specify to only return custom ﬁelds by specifying _custom or the ﬁeld name in include_fields.
• Bug ID Fields: (int)
• Multiple-Selection Fields: (array of strings)
• Date/Time Fields: (datetime)
Bug History
Gets the history of changes for particular bugs in the database.
Request
To get the history for a speciﬁc bug ID:
GET /rest/bug/(id)/history
To get the history for a bug since a speciﬁc date:
GET /rest/bug/(id)/history?new_since=YYYY-MM-DD
name
type
description
id
mixed
An integer bug ID or alias.
new_since
datetime
A datetime timestamp to only show history since.
Response
{
"bugs": [
{
"alias": [],
"history": [
{
"when": "2014-09-23T19:12:17Z",
"who": "user@bugzilla.org",
"changes": [
{
"added": "P1",
"field_name": "priority",
(continues on next page)
120
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
(continued from previous page)
"removed": "P2"
},
{
"removed": "blocker",
"field_name": "severity",
"added": "critical"
}
]
},
{
"when": "2014-09-28T21:03:47Z",
"who": "user@bugzilla.org",
"changes": [
{
"added": "blocker?",
"removed": "",
"field_name": "flagtypes.name"
}
]
}
],
"id": 35
}
]
}
bugs (array) Bug objects each containing the following items:
name
type
description
id
int
The numeric ID of the bug.
alias
array
The unique aliases of this bug. An empty array will be returned if this bug has no aliases.
history
array
An array of History objects.
History object:
name
type
description
when
date-
time
The date the bug activity/change happened.
who
string
The login name of the user who performed the bug change.
changes array
An array of Change objects which contain all the changes that happened to the bug at this time
(as speciﬁed by when).
Change object:
name
type
description
ﬁeld_name string The name of the bug ﬁeld that has changed.
re-
moved
string The previous value of the bug ﬁeld which has been deleted by the change.
added
string The new value of the bug ﬁeld which has been added by the change.
attach-
ment_id
int
The ID of the attachment that was changed. This only appears if the change was to an attachment,
otherwise attachment_id will not be present in this object.
6.1. Core API v1
121

Bugzilla Documentation, Release 5.0.6
Search Bugs
Allows you to search for bugs based on particular criteria.
Request
To search for bugs:
GET /rest/bug
Unless otherwise speciﬁed in the description of a parameter, bugs are returned if they match exactly the criteria you
specify in these parameters. That is, we don’t match against substrings–if a bug is in the “Widgets” product and you
ask for bugs in the “Widg” product, you won’t get anything.
Criteria are joined in a logical AND. That is, you will be returned bugs that match all of the criteria, not bugs that
match any of the criteria.
Each parameter can be either the type it says, or a list of the types it says. If you pass an array, it means “Give me
bugs with any of these values.” For example, if you wanted bugs that were in either the “Foo” or “Bar” products, you’d
pass:
GET /rest/bug?product=Foo&product=Bar
Some Bugzillas may treat your arguments case-sensitively, depending on what database system they are using. Most
commonly, though, Bugzilla is not case-sensitive with the arguments passed (because MySQL is the most-common
database to use with Bugzilla, and MySQL is not case sensitive).
In addition to the ﬁelds listed below, you may also use criteria that is similar to what is used in the Advanced
Search screen of the Bugzilla UI. This includes ﬁelds speciﬁed by Search by Change History and Custom
Search. The easiest way to determine what the ﬁeld names are and what format Bugzilla expects is to ﬁrst construct
your query using the Advanced Search UI, execute it and use the query parameters in they URL as your query for the
REST call.
122
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
name type
description
alias
ar-
ray
The unique aliases of this bug. An empty array will be returned if this bug has no aliases.
as-
signed_to
string The login name of a user that a bug is assigned to.
com-
po-
nent
string The name of the Component that the bug is in. Note that if there are multiple Components with the
same name, and you search for that name, bugs in all those Components will be returned. If you
don’t want this, be sure to also specify the product argument.
cre-
ation_time
date-
time
Searches for bugs that were created at this time or later. May not be an array.
cre-
ator
string The login name of the user who created the bug. You can also pass this argument with the name
reporter, for backwards compatibility with older Bugzillas.
id
int
The numeric ID of the bug.
last_change_time
date-
time
Searches for bugs that were modiﬁed at this time or later. May not be an array.
limit
int
Limit the number of results returned. If the limit is more than zero and higher than the maximum
limit set by the administrator, then the maximum limit will be used instead. If you set the limit equal
to zero, then all matching results will be returned instead.
off-
set
int
Used in conjunction with the limit argument, offset deﬁnes the starting position for the search.
For example, given a search that would return 100 bugs, setting limit to 10 and offset to 10
would return bugs 11 through 20 from the set of 100.
op_sys string The “Operating System” ﬁeld of a bug.
plat-
form
string The Platform (sometimes called “Hardware”) ﬁeld of a bug.
pri-
or-
ity
string The Priority ﬁeld on a bug.
prod-
uct
string The name of the Product that the bug is in.
res-
olu-
tion
string The current resolution–only set if a bug is closed. You can ﬁnd open bugs by searching for bugs with
an empty resolution.
sever-
ity
string The Severity ﬁeld on a bug.
sta-
tus
string The current status of a bug (not including its resolution, if it has one, which is a separate ﬁeld above).
sum-
mary
string Searches for substrings in the single-line Summary ﬁeld on bugs. If you specify an array, then bugs
whose summaries match any of the passed substrings will be returned. Note that unlike searching in
the Bugzilla UI, substrings are not split on spaces. So searching for foo bar will match “This is a
foo bar” but not “This foo is a bar”. ['foo', 'bar'], would, however, match the second item.
tags
string Searches for a bug with the speciﬁed tag. If you specify an array, then any bugs that match any of
the tags will be returned. Note that tags are personal to the currently logged in user.
tar-
get_milestone
string The Target Milestone ﬁeld of a bug. Note that even if this Bugzilla does not have the Target Milestone
ﬁeld enabled, you can still search for bugs by Target Milestone. However, it is likely that in that case,
most bugs will not have a Target Milestone set (it defaults to “—” when the ﬁeld isn’t enabled).
qa_contact
string The login name of the bug’s QA Contact. Note that even if this Bugzilla does not have the QA
Contact ﬁeld enabled, you can still search for bugs by QA Contact (though it is likely that no bug
will have a QA Contact set, if the ﬁeld is disabled).
url
string The “URL” ﬁeld of a bug.
ver-
sion
string The Version ﬁeld of a bug.
white-
board
string Search the “Status Whiteboard” ﬁeld on bugs for a substring. Works the same as the summary ﬁeld
described above, but searches the Status Whiteboard ﬁeld.
quick-
search
string Search for bugs using quicksearch syntax.
6.1. Core API v1
123

Bugzilla Documentation, Release 5.0.6
Response
The same as Get Bug.
Create Bug
This allows you to create a new bug in Bugzilla. If you specify any invalid ﬁelds, an error will be thrown stating which
ﬁeld is invalid. If you specify any ﬁelds you are not allowed to set, they will just be set to their defaults or ignored.
You cannot currently set all the items here that you can set on enter_bug.cgi.
The WebService interface may allow you to set things other than those listed here, but realize that anything undocu-
mented here may likely change in the future.
Request
To create a new bug in Bugzilla.
POST /rest/bug
{
"product" : "TestProduct",
"component" : "TestComponent",
"version" : "unspecified",
"summary" : "'This is a test bug - please disregard",
"alias" : "SomeAlias",
"op_sys" : "All",
"priority" : "P1",
"rep_platform" : "All"
}
Some params must be set, or an error will be thrown. These params are marked in bold.
Some parameters can have defaults set in Bugzilla, by the administrator. If these parameters have defaults set, you can
omit them. These parameters are marked (defaulted).
Clients that want to be able to interact uniformly with multiple Bugzillas should always set both the params marked
required and those marked (defaulted), because some Bugzillas may not have defaults set for (defaulted) parameters,
and then this method will throw an error if you don’t specify them.
124
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
name
type
description
prod-
uct
string The name of the product the bug is being ﬁled against.
com-
po-
nent
string The name of a component in the product above.
sum-
mary
string A brief description of the bug being ﬁled.
ver-
sion
string A version of the product above; the version the bug was found in.
de-
scrip-
tion
string (defaulted) The initial description for this bug. Some Bugzilla installations require this to not be
blank.
op_sys string (defaulted) The operating system the bug was discovered on.
plat-
form
string (defaulted) What type of hardware the bug was experienced on.
pri-
ority
string (defaulted) What order the bug will be ﬁxed in by the developer, compared to the developer’s other
bugs.
sever-
ity
string (defaulted) How severe the bug is.
alias
ar-
ray
One or more brief aliases for the bug that can be used instead of a bug number when accessing this
bug. Must be unique in all of this Bugzilla.
as-
signed_to
string A user to assign this bug to, if you don’t want it to be assigned to the component owner.
cc
ar-
ray
An array of usernames to CC on this bug.
com-
ment_is_private
booleanIf set to true, the description is private, otherwise it is assumed to be public.
groups ar-
ray
An array of group names to put this bug into. You can see valid group names on the Permissions tab
of the Preferences screen, or, if you are an administrator, in the Groups control panel. If you don’t
specify this argument, then the bug will be added into all the groups that are set as being “Default”
for this product. (If you want to avoid that, you should specify groups as an empty array.)
qa_contact
string If this installation has QA Contacts enabled, you can set the QA Contact here if you don’t want to
use the component’s default QA Contact.
sta-
tus
string The status that this bug should start out as. Note that only certain statuses can be set on bug creation.
res-
olu-
tion
string If you are ﬁling a closed bug, then you will have to specify a resolution. You cannot currently
specify a resolution of DUPLICATE for new bugs, though. That must be done with Update Bug.
tar-
get_milestone
string A valid target milestone for this product.
ﬂags
ar-
ray
Flags objects to add to the bug. The object format is described in the Flag object below.
Flag object:
To create a ﬂag, at least the status and the type_id or name must be provided. An optional requestee can be
passed if the ﬂag type is requestable to a speciﬁc user.
6.1. Core API v1
125

Bugzilla Documentation, Release 5.0.6
name
type
description
name
string
The name of the ﬂag type.
type_id
int
The internal ﬂag type ID.
status
string
The ﬂags new status (i.e. “?”, “+”, “-” or “X” to clear ﬂag).
requestee
string
The login of the requestee if the ﬂag type is requestable to a speciﬁc user.
In addition to the above parameters, if your installation has any custom ﬁelds, you can set them just by passing in the
name of the ﬁeld and its value as a string.
Response
{
"id" : 12345
}
name
type
description
id
int
This is the ID of the newly-ﬁled bug.
Update Bug
Allows you to update the ﬁelds of a bug. Automatically sends emails out about the changes.
Request
To update the ﬁelds of a current bug.
PUT /rest/bug/(id_or_alias)
{
"ids" : [35],
"status" : "IN_PROGRESS",
"keywords" : {
"add" : ["funny", "stupid"]
}
}
The params to include in the PUT body as well as the returned data format, are the same as below. You can specify
the ID or alias of the bug to update either in the URL path and/or in the ids param. You can use both and they will be
combined so you can edit more than one bug at a time.
name
type
description
id_or_alias
mixed
An integer bug ID or alias.
ids
array
The IDs or aliases of the bugs that you want to modify.
All following ﬁelds specify the values you want to set on the bugs you are updating.
126
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
name
type
description
alias
object
These specify the aliases of a bug
that can be used instead of a bug
number when acessing this bug. To
set these, you should pass a hash as
the value. The object may contain
the following items:
• add (array) Aliases to add to
this ﬁeld.
• remove (array) Aliases to
remove from this ﬁeld. If the
aliases are not already in the
ﬁeld, they will be ignored.
• set (array) An exact set of
aliases to set this ﬁeld to,
overriding the current value.
If you specify set, then add
and remove will be ignored.
You can only set this if you are mod-
ifying a single bug. If there is more
than one bug speciﬁed in ids, pass-
ing in a value for alias will cause
an error to be thrown.
For backwards compatibility, you
can also specify a single string. This
will be treated as if you speciﬁed the
set key above.
assigned_to
string
The full login name of the user this
bug is assigned to.
blocks
object
(Same as depends_on below)
depends_on
object
These specify the bugs that this bug
blocks or depends on, respectively.
To set these, you should pass an ob-
ject as the value. The object may
contain the following items:
• add (array) Bug IDs to add to
this ﬁeld.
• remove (array) Bug IDs to
remove from this ﬁeld. If the
bug IDs are not already in the
ﬁeld, they will be ignored.
• set (array of) An exact set
of bug IDs to set this ﬁeld to,
overriding the current value.
If you specify set, then add
and remove will be ignored.
Continued on next page
6.1. Core API v1
127

Bugzilla Documentation, Release 5.0.6
Table 2 – continued from previous page
name
type
description
cc
object
The users on the cc list. To modify
this ﬁeld, pass an object, which may
have the following items:
• add (array) User names to
add to the CC list. They must
be full user names, and an er-
ror will be thrown if you pass
in an invalid user name.
• remove (array) User names
to remove from the CC list.
They must be full user names,
and an error will be thrown
if you pass in an invalid user
name.
is_cc_accessible
boolean
Whether or not users in the CC list
are allowed to access the bug, even
if they aren’t in a group that can nor-
mally access the bug.
comment
object
A comment on the change.
The
object may contain the following
items:
• body (string) The actual text
of the comment.
For com-
patibility with the parameters
to Create Comments, you can
also call this ﬁeld comment,
if you want.
• is_private
(boolean)
Whether
the
comment
is
private or not. If you try to
make a comment private and
you don’t have the permission
to, an error will be thrown.
Continued on next page
128
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
Table 2 – continued from previous page
name
type
description
comment_is_private
object
This is how you update the privacy
of comments that are already on a
bug.
This is a object, where the
keys are the int ID of comments
(not their count on a bug, like #1,
#2, #3, but their globally-unique ID,
as returned by Get Comments and
the value is a boolean which spec-
iﬁes whether that comment should
become private (true) or public
(false).
The comment IDs must be valid for
the bug being updated. Thus, it is
not practical to use this while updat-
ing multiple bugs at once, as a sin-
gle comment ID will never be valid
on multiple bugs.
component
string
The Component the bug is in.
deadline
date
The Deadline ﬁeld is a date specify-
ing when the bug must be completed
by, in the format YYYY-MM-DD.
dupe_of
int
The bug that this bug is a dupli-
cate of. If you want to mark a bug
as a duplicate, the safest thing to
do is to set this value and not set
the status or resolutio ﬁelds.
They will automatically be set by
Bugzilla to the appropriate values
for duplicate bugs.
estimated_time
double
The total estimate of time required
to ﬁx the bug, in hours.
This is
the total estimate, not the amount of
time remaining to ﬁx it.
ﬂags
array
An array of Flag change objects.
The items needed are described be-
low.
Continued on next page
6.1. Core API v1
129

Bugzilla Documentation, Release 5.0.6
Table 2 – continued from previous page
name
type
description
groups
object
The groups a bug is in. To modify
this ﬁeld, pass an object, which may
have the following items:
• add (array) The names of
groups to add. Passing in an
invalid group name or a group
that you cannot add to this
bug will cause an error to be
thrown.
• remove (array) The names
of groups to remove. Passing
in an invalid group name or a
group that you cannot remove
from this bug will cause an er-
ror to be thrown.
keywords
object
Keywords on the bug.
To modify
this ﬁeld, pass an object, which may
have the following items:
• add (array) The names of
keywords to add to the ﬁeld
on the bug.
Passing some-
thing that isn’t a valid key-
word name will cause an error
to be thrown.
• remove (array) The names
of keywords to remove from
the ﬁeld on the bug. Passing
something that isn’t a valid
keyword name will cause an
error to be thrown.
• set (array) An exact set of
keywords to set the ﬁeld to,
on the bug.
Passing some-
thing that isn’t a valid key-
word name will cause an error
to be thrown. Specifying set
overrides add and remove.
op_sys
string
The Operating System (“OS”) ﬁeld
on the bug.
platform
string
The Platform or “Hardware” ﬁeld
on the bug.
priority
string
The Priority ﬁeld on the bug.
Continued on next page
130
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
Table 2 – continued from previous page
name
type
description
product
string
The
name
of
the
product
that
the bug is in.
If you change
this, you will probably also want
to change target_milestone,
version, and component, since
those have different legal values in
every product.
If
you
cannot
change
the
target_milestone
ﬁeld,
it
will be reset to the default for the
product, when you move a bug to a
new product.
You may also wish to add or re-
move groups, as which groups are
valid on a bug depends on the prod-
uct.
Groups that are not valid in
the new product will be automat-
ically removed, and groups which
are mandatory in the new product
will be automaticaly added, but no
other automatic group changes will
be done.
Note:
Users can only move a bug
into a product if they would nor-
mally have permission to ﬁle new
bugs in that product.
qa_contact
string
The full login name of the bug’s QA
Contact.
is_creator_accessible
boolean
Whether or not the bug’s reporter is
allowed to access the bug, even if
they aren’t in a group that can nor-
mally access the bug.
remaining_time
double
How much work time is remaining
to ﬁx the bug, in hours.
If you
set work_time but don’t explicitly
set remaining_time, then the
work_time will be deducted from
the bug’s remaining_time.
reset_assigned_to
boolean
If true, the assigned_to ﬁeld
will be reset to the default for the
component that the bug is in. (If you
have set the component at the same
time as using this, then the compo-
nent used will be the new compo-
nent, not the old one.)
Continued on next page
6.1. Core API v1
131

Bugzilla Documentation, Release 5.0.6
Table 2 – continued from previous page
name
type
description
reset_qa_contact
boolean
If true, the qa_contact ﬁeld will
be reset to the default for the com-
ponent that the bug is in.
(If you
have set the component at the same
time as using this, then the compo-
nent used will be the new compo-
nent, not the old one.)
resolution
string
The current resolution.
May only
be set if you are closing a bug or
if you are modifying an already-
closed bug.
Attempting to set the
resolution to any value (even an
empty or null string) on an open bug
will cause an error to be thrown.
Note:
If you change the status
ﬁeld to an open status, the resolution
ﬁeld will automatically be cleared,
so you don’t have to clear it manu-
ally.
see_also
object
The See Also ﬁeld on a bug, specify-
ing URLs to bugs in other bug track-
ers. To modify this ﬁeld, pass an ob-
ject, which may have the following
items:
• add (array) URLs to add to
the ﬁeld. Each URL must be
a valid URL to a bug-tracker,
or an error will be thrown.
• remove (array) URLs to re-
move from the ﬁeld. Invalid
URLs will be ignored.
severity
string
The Severity ﬁeld of a bug.
status
string
The status you want to change the
bug to. Note that if a bug is chang-
ing from open to closed, you should
also specify a resolution.
summary
string
The Summary ﬁeld of the bug.
target_milestone
string
The bug’s Target Milestone.
url
string
The “URL” ﬁeld of a bug.
version
string
The bug’s Version ﬁeld.
whiteboard
string
The Status Whiteboard ﬁeld of a
bug.
Continued on next page
132
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
Table 2 – continued from previous page
name
type
description
work_time
double
The number of hours worked on this
bug as part of this change. If you
set work_time but don’t explicitly
set remaining_time, then the
work_time will be deducted from
the bug’s remaining_time.
You can also set the value of any custom ﬁeld by passing its name as a parameter, and the value to set the ﬁeld to. For
multiple-selection ﬁelds, the value should be an array of strings.
Flag change object:
The following values can be speciﬁed. At least the status and one of type_id, id, or name must be speciﬁed. If
a type_id or name matches a single currently set ﬂag, the ﬂag will be updated unless new is speciﬁed.
name
type
description
name
string
The name of the ﬂag that will be created or updated.
type_id int
The internal ﬂag type ID that will be created or updated. You will need to specify the type_id
if more than one ﬂag type of the same name exists.
sta-
tus
string
The ﬂags new status (i.e. “?”, “+”, “-” or “X” to clear a ﬂag).
re-
ques-
tee
string
The login of the requestee if the ﬂag type is requestable to a speciﬁc user.
id
int
Use ID to specify the ﬂag to be updated. You will need to specify the id if more than one ﬂag is
set of the same name.
new
booleanSet to true if you speciﬁcally want a new ﬂag to be created.
Response
{
"bugs" : [
{
"alias" : [],
"changes" : {
"keywords" : {
"added" : "funny, stupid",
"removed" : ""
},
"status" : {
"added" : "IN_PROGRESS",
"removed" : "CONFIRMED"
}
},
"id" : 35,
"last_change_time" : "2014-09-29T14:25:35Z"
}
]
}
bugs (array) This points to an array of objects with the following items:
6.1. Core API v1
133

Bugzilla Documentation, Release 5.0.6
name
type
description
id
int
The ID of the bug that was updated.
alias
array
The aliases of the bug that was up-
dated, if this bug has any alias.
last_change_time
datetime
The exact time that this update was
done at, for this bug.
If no up-
date was done (that is, no ﬁelds had
their values changed and no com-
ment was added) then this will in-
stead be the last time the bug was
updated.
changes
object
The changes that were actually done
on this bug. The keys are the names
of the ﬁelds that were changed, and
the values are an object with two
keys:
• added (string) The values
that were added to this ﬁeld,
possibly a comma-and-space-
separated list if multiple val-
ues were added.
• removed (string) The values
that were removed from this
ﬁeld, possibly a comma-and-
space-separated list if multi-
ple values were removed.
Currently, some ﬁelds are not tracked in changes: comment, comment_is_private, and work_time. This
means that they will not show up in the return value even if they were successfully updated. This may change in a
future version of Bugzilla.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
6.1.4 Bug User Last Visited
Update Last Visited
Update the last-visited time for the speciﬁed bug and current user.
Request
To update the time for a single bug id:
POST /rest/bug_user_last_visit/(id)
To update one or more bug ids at once:
POST /rest/bug_user_last_visit
134
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
{
"ids" : [35,36,37]
}
name
type
description
id
int
An integer bug id.
ids
array
One or more bug ids to update.
Response
[
{
"id" : 100,
"last_visit_ts" : "2014-10-16T17:38:24Z"
}
]
An array of objects containing the items:
name
type
description
id
int
The bug id.
last_visit_ts
datetime
The timestamp the user last visited the bug.
Get Last Visited
Request
Get the last-visited timestamp for one or more speciﬁed bug ids or get a list of the last 20 visited bugs and their
timestamps.
To return the last-visited timestamp for a single bug id:
GET /rest/bug_user_last_visit/(id)
To return more than one speciﬁc bug timestamps:
GET /rest/bug_user_last_visit/123?ids=234&ids=456
To return just the most recent 20 timestamps:
GET /rest/bug_user_last_visit
name
type
description
id
int
An integer bug id.
ids
array
One or more optional bug ids to get.
Response
[
{
"id" : 100,
"last_visit_ts" : "2014-10-16T17:38:24Z"
(continues on next page)
6.1. Core API v1
135

Bugzilla Documentation, Release 5.0.6
(continued from previous page)
}
]
An array of objects containing the following items:
name
type
description
id
int
The bug id.
last_visit_ts
datetime
The timestamp the user last visited the bug.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
6.1.5 Bugzilla Information
These methods are used to get general conﬁguration information about this Bugzilla instance.
Version
Returns the current version of Bugzilla. Normally in the format of X.X or X.X.X. For example, 4.4 for the initial
release of a new branch. Or 4.4.6 for a minor release on the same branch.
Request
GET /rest/version
Response
{
"version": "4.5.5+"
}
name
type
description
version
string
The current version of this Bugzilla
Extensions
Gets information about the extensions that are currently installed and enabled in this Bugzilla.
Request
GET /rest/extensions
Response
{
"extensions": {
"Voting": {
"version": "4.5.5+"
},
"BmpConvert": {
(continues on next page)
136
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
(continued from previous page)
"version": "1.0"
}
}
}
name
type
description
extensions
object
An object containing the extensions
enabled as keys. Each extension ob-
ject contains the following keys:
• version (string) The ver-
sion of the extension.
Timezone
Returns the timezone in which Bugzilla expects to receive dates and times on the API. Currently hard-coded to UTC
(“+0000”). This is unlikely to change.
Request
GET /rest/timezone
{
"timezone": "+0000"
}
Response
name
type
description
timezone
string
The timezone offset as a string in (+/-)XXXX (RFC 2822) format.
Time
Gets information about what time the Bugzilla server thinks it is, and what timezone it’s running in.
Request
GET /rest/time
Response
{
"web_time_utc": "2014-09-26T18:01:30Z",
"db_time": "2014-09-26T18:01:30Z",
"web_time": "2014-09-26T18:01:30Z",
"tz_offset": "+0000",
"tz_short_name": "UTC",
"tz_name": "UTC"
}
6.1. Core API v1
137

Bugzilla Documentation, Release 5.0.6
name type
description
db_timestring The current time in UTC, according to the Bugzilla database server.
Note that Bugzilla assumes that the database and the webserver are running in the same time zone.
However, if the web server and the database server aren’t synchronized or some reason, this is the
time that you should rely on or doing searches and other input to the WebService.
web_time
string This is the current time in UTC, according to Bugzilla’s web server.
This might be different by a second from db_time since this comes from a different source. If it’s
any more different than a second, then there is likely some problem with this Bugzilla instance. In
this case you should rely on the db_time, not the web_time.
web_time_utc
string Identical to web_time. (Exists only for backwards-compatibility with versions of Bugzilla before
3.6.)
tz_namestring The literal string UTC. (Exists only for backwards-compatibility with versions of Bugzilla before
3.6.)
tz_short_name
string The literal string UTC. (Exists only for backwards-compatibility with versions of Bugzilla before
3.6.)
tz_offsetstring The literal string +0000. (Exists only for backwards-compatibility with versions of Bugzilla before
3.6.)
Parameters
Returns parameter values currently used in this Bugzilla.
Request
GET /rest/parameters
Response
Example response for anonymous user:
{
"parameters" : {
"maintainer" : "admin@example.com",
"requirelogin" : "0"
}
}
Example response for authenticated user:
{
"parameters" : {
"allowemailchange" : "1",
"attachment_base" : "http://bugzilla.example.com/",
"commentonchange_resolution" : "0",
"commentonduplicate" : "0",
"cookiepath" : "/",
"createemailregexp" : ".*",
"defaultopsys" : "",
"defaultplatform" : "",
"defaultpriority" : "--",
"defaultseverity" : "normal",
"duplicate_or_move_bug_status" : "RESOLVED",
"emailregexp" : "^[\\w\\.\\+\\-=']+@[\\w\\.\\-]+\\.[\\w\\-]+$",
"emailsuffix" : "",
"letsubmitterchoosemilestone" : "1",
(continues on next page)
138
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
(continued from previous page)
"letsubmitterchoosepriority" : "1",
"mailfrom" : "bugzilla-daemon@example.com",
"maintainer" : "admin@example.com",
"maxattachmentsize" : "1000",
"maxlocalattachment" : "0",
"musthavemilestoneonaccept" : "0",
"noresolveonopenblockers" : "0",
"password_complexity" : "no_constraints",
"rememberlogin" : "on",
"requirelogin" : "0",
"urlbase" : "http://bugzilla.example.com/",
"use_see_also" : "1",
"useclassification" : "1",
"usemenuforusers" : "0",
"useqacontact" : "1",
"usestatuswhiteboard" : "1",
"usetargetmilestone" : "1",
}
}
A logged-out user can only access the maintainer and requirelogin parameters.
A logged-in user can access the following parameters (listed alphabetically):
• allowemailchange
• attachment_base
• commentonchange_resolution
• commentonduplicate
• cookiepath
• defaultopsys
• defaultplatform
• defaultpriority
• defaultseverity
• duplicate_or_move_bug_status
• emailregexpdesc
• emailsufﬁx
• letsubmitterchoosemilestone
• letsubmitterchoosepriority
• mailfrom
• maintainer
• maxattachmentsize
• maxlocalattachment
• musthavemilestoneonaccept
• noresolveonopenblockers
• password_complexity
6.1. Core API v1
139

Bugzilla Documentation, Release 5.0.6
• rememberlogin
• requirelogin
• search_allow_no_criteria
• urlbase
• use_see_also
• useclassiﬁcation
• usemenuforusers
• useqacontact
• usestatuswhiteboard
• usetargetmilestone
A user in the tweakparams group can access all existing parameters. New parameters can appear or obsolete parameters
can disappear depending on the version of Bugzilla and on extensions being installed. The list of parameters returned
by this method is not stable and will never be stable.
Last Audit Time
Gets the most recent timestamp among all of the events recorded in the audit_log table.
Request
To get most recent audit timestamp for all classes:
GET /rest/last_audit_time
To get the the most recent audit timestamp for the Bugzilla::Product class:
GET /rest/last_audit_time?class=Bugzilla::Product
name
type
description
class
ar-
ray
The class names are deﬁned as Bugzilla::<class_name>" such as Bugzilla:Product‘‘ for
products.
Response
{
"last_audit_time": "2014-09-23T18:03:38Z"
}
name
type
description
last_audit_time
string
The maximum of the at_time from the audit_log.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
6.1.6 Classiﬁcations
This part of the Bugzilla API allows you to deal with the available classiﬁcations. You will be able to get information
about them as well as manipulate them.
140
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
Get Classiﬁcation
Returns an object containing information about a set of classiﬁcations.
Request
To return information on a single classiﬁcation using the ID or name:
GET /rest/classification/(id_or_name)
name
type
description
id_or_name
mixed
An Integer classiﬁcation ID or name.
Response
{
"classifications": [
{
"sort_key": 0,
"description": "Unassigned to any classifications",
"products": [
{
"id": 2,
"name": "FoodReplicator",
"description": "Software that controls a piece of hardware that will create
˓→any food item through a voice interface."
},
{
"description": "Silk, etc.",
"name": "Spider Secretions",
"id": 4
}
],
"id": 1,
"name": "Unclassified"
}
]
}
classifications (array) Each object is a classiﬁcation that the user is authorized to see and has the following
items:
name
type
description
id
int
The ID of the classiﬁcation.
name
string
The name of the classiﬁcation.
descrip-
tion
string
The description of the classiﬁcaion.
sort_key
int
The value which determines the order the classiﬁcation is sorted.
products
array
Products the user is authorized to access within the classiﬁcation. Each hash has the following
keys:
Product object:
6.1. Core API v1
141

Bugzilla Documentation, Release 5.0.6
name
type
description
name
string
The name of the product.
id
int
The ID of the product.
description
string
The description of the product.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
6.1.7 Comments
Get Comments
This allows you to get data about comments, given a bug ID or comment ID.
Request
To get all comments for a particular bug using the bug ID or alias:
GET /rest/bug/(id_or_alias)/comment
To get a speciﬁc comment based on the comment ID:
GET /rest/bug/comment/(comment_id)
name type
description
id_or_alias
mixed A single integer bug ID or alias.
com-
ment_id
int
A single integer comment ID.
new_since
date-
time
If speciﬁed, the method will only return comments newer than this time. This only affects comments
returned from the ids argument. You will always be returned all comments you request in the
comment_ids argument, even if they are older than this date.
Response
{
"bugs": {
"35": {
"comments": [
{
"time": "2000-07-25T13:50:04Z",
"text": "test bug to fix problem in removing from cc list.",
"bug_id": 35,
"count": 0,
"attachment_id": null,
"is_private": false,
"tags": [],
"creator": "user@bugzilla.org",
"creation_time": "2000-07-25T13:50:04Z",
"id": 75
}
]
}
},
(continues on next page)
142
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
(continued from previous page)
"comments": {}
}
Two items are returned:
bugs This is used for bugs speciﬁed in ids. This is an object, where the keys are the numeric IDs of the bugs, and the
value is a object with a single key, comments, which is an array of comments. (The format of comments is described
below.)
Any individual bug will only be returned once, so if you specify an ID multiple times in ids, it will still only be
returned once.
comments Each individual comment requested in comment_ids is returned here, in a object where the numeric
comment ID is the key, and the value is the comment. (The format of comments is described below.)
A “comment” as described above is a object that contains the following items:
name
type
description
id
int
The globally unique ID for the comment.
bug_id int
The ID of the bug that this comment is on.
at-
tach-
ment_id
int
If the comment was made on an attachment, this will be the ID of that attachment. Otherwise it will
be null.
count
int
The number of the comment local to the bug. The Description is 0, comments start with 1.
text
string The actual text of the comment.
cre-
ator
string The login name of the comment’s author.
time
date-
time
The time (in Bugzilla’s timezone) that the comment was added.
cre-
ation_time
date-
time
This is exactly same as the time key. Use this ﬁeld instead of time for consistency with other
methods including Get Bug and Get Attachment.
For compatibility, time is still usable. However, please note that time may be deprecated and
removed in a future release.
is_privatebooleantrue if this comment is private (only visible to a certain group called the “insidergroup”), false
otherwise.
Create Comments
This allows you to add a comment to a bug in Bugzilla.
Request
To create a comment on a current bug.
POST /rest/bug/(id)/comment
{
"comment" : "This is an additional comment",
"is_private" : false
}
6.1. Core API v1
143

Bugzilla Documentation, Release 5.0.6
name
type
description
id
int
The ID or alias of the bug to append a comment to.
com-
ment
string
The comment to append to the bug. If this is empty or all whitespace, an error will be thrown
saying that you did not set the comment parameter.
is_private boolean If set to true, the comment is private, otherwise it is assumed to be public.
work_timedou-
ble
Adds this many hours to the “Hours Worked” on the bug. If you are not in the time tracking
group, this value will be ignored.
Response
{
"id" : 789
}
name
type
description
id
int
ID of the newly-created comment.
Search Comment Tags
Searches for tags which contain the provided substring.
Request
To search for comment tags:
GET /rest/bug/comment/tags/(query)
Example:
GET /rest/bug/comment/tags/spa
name
type
description
query
string
Only tags containg this substring will be returned.
limit
int
If provided will return no more than limit tags. Defaults to 10.
Response
[
"spam"
]
An array of matching tags.
Update Comment Tags
Adds or removes tags from a comment.
Request
To update the tags comments attached to a comment:
PUT /rest/bug/comment/(comment_id)/tags
144
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
Example:
{
"comment_id" : 75,
"add" : ["spam", "bad"]
}
name
type
description
comment_id
int
The ID of the comment to update.
add
array
The tags to attach to the comment.
remove
array
The tags to detach from the comment.
Response
[
"bad",
"spam"
]
An array of strings containing the comment’s updated tags.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
6.1.8 Components
This part of the Bugzilla API allows you to deal with the available product components. You will be able to get
information about them as well as manipulate them.
Create Component
This allows you to create a new component in Bugzilla. You must be authenticated and be in the editcomponents group
to perform this action.
Request
To create a new component:
POST /rest/component
{
"product" : "TestProduct",
"name" : "New Component",
"description" : "This is a new component",
"default_assignee" : "dkl@mozilla.com"
}
Some params must be set, or an error will be thrown. These params are shown in bold.
6.1. Core API v1
145

Bugzilla Documentation, Release 5.0.6
name
type
description
name
string The name of the new component.
product
string The name of the product that the component must be added to. This product must already
exist, and the user have the necessary permissions to edit components for it.
descrip-
tion
string The description of the new component.
de-
fault_assignee
string The login name of the default assignee of the component.
default_cc
ar-
ray
Each string representing one login name of the default CC list.
de-
fault_qa_contact
string The login name of the default QA contact for the component.
is_open
boolean1 if you want to enable the component for bug creations. 0 otherwise. Default is 1.
Response
{
"id": 27
}
name
type
description
id
int
The ID of the newly-added component.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
6.1.9 Bug Fields
The Bugzilla API for getting details about bug ﬁelds.
Fields
Get information about valid bug ﬁelds, including the lists of legal values for each ﬁeld.
Request
To get information about all ﬁelds:
GET /rest/field/bug
To get information related to a single ﬁeld:
GET /rest/field/bug/(id_or_name)
name
type
description
id_or_name
mixed
An integer ﬁeld ID or string representing the ﬁeld name.
Response
146
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
{
"fields": [
{
"display_name": "Priority",
"name": "priority",
"type": 2,
"is_mandatory": false,
"value_field": null,
"values": [
{
"sortkey": 100,
"sort_key": 100,
"visibility_values": [],
"name": "P1"
},
{
"sort_key": 200,
"name": "P2",
"visibility_values": [],
"sortkey": 200
},
{
"sort_key": 300,
"visibility_values": [],
"name": "P3",
"sortkey": 300
},
{
"sort_key": 400,
"name": "P4",
"visibility_values": [],
"sortkey": 400
},
{
"name": "P5",
"visibility_values": [],
"sort_key": 500,
"sortkey": 500
}
],
"visibility_values": [],
"visibility_field": null,
"is_on_bug_entry": false,
"is_custom": false,
"id": 13
}
]
}
field (array) Field objects each containing the following items:
6.1. Core API v1
147

Bugzilla Documentation, Release 5.0.6
name
type
description
id
int
An integer ID uniquely identifying
this ﬁeld in this installation only.
type
int
The number of the ﬁeldtype. The
following values are deﬁned:
• 0 Field type unknown
• 1 Single-line string ﬁeld
• 2 Single value ﬁeld
• 3 Multiple value ﬁeld
• 4 Multi-line text value
• 5 Date ﬁeld with time
• 6 Bug ID ﬁeld
• 7 See Also ﬁeld
• 8 Keywords ﬁeld
• 9 Date ﬁeld
• 10 Integer ﬁeld
is_custom
boolean
true when this is a custom ﬁeld,
false otherwise.
name
string
The internal name of this ﬁeld. This
is a unique identiﬁer for this ﬁeld.
If this is not a custom ﬁeld, then
this name will be the same across all
Bugzilla installations.
display_name
string
The name of the ﬁeld, as it is shown
in the user interface.
is_mandatory
boolean
true if the ﬁeld must have a value
when ﬁling new bugs. Also, manda-
tory ﬁelds cannot have their value
cleared when updating bugs.
is_on_bug_entry
boolean
For custom ﬁelds, this is true if
the ﬁeld is shown when you enter a
new bug. For standard ﬁelds, this is
currently always false, even if the
ﬁeld shows up when entering a bug.
(To know whether or not a standard
ﬁeld is valid on bug entry, see Cre-
ate Bug.
visibility_ﬁeld
string
The name of a ﬁeld that controls the
visibility of this ﬁeld in the user in-
terface. This ﬁeld only appears in
the user interface when the named
ﬁeld is equal to one of the values
is visibility_values. Can be
null.
visibility_values
array
This ﬁeld is only shown when
visibility_field
matches
one of these string values.
When
visibility_field
is
null,
then this is an empty array.
value_ﬁeld
string
The name of the ﬁeld that controls
whether or not particular values of
the ﬁeld are shown in the user inter-
face. Can be null.
values
array
Objects
representing
the
legal
values
for
select-type
(drop-
down
and
multiple-selection)
ﬁelds.
This is also populated
for the component, version,
148
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
Value object:
name
type
description
name
string
The actual value–this is what you
would specify for this ﬁeld in
create, etc.
sort_key
int
Values, when displayed in a list, are
sorted ﬁrst by this integer and then
secondly by their name.
visibility_values
array
If value_field is deﬁned for
this ﬁeld, then this value is only
shown if the value_field is set
to one of the values listed in this ar-
ray. Note that for per-product ﬁelds,
value_field is set to product
and visibility_values will
reﬂect which product(s) this value
appears in.
is_active
boolean
This value is deﬁned only for cer-
tain product-speciﬁc ﬁelds such as
version, target_milestone or compo-
nent. When true, the value is active;
otherwise the value is not active.
description
string
The description of the value. This
item
is
only
included
for
the
keywords ﬁeld.
is_open
boolean
For bug_status values, deter-
mines whether this status speciﬁes
that the bug is “open” (true) or
“closed” (false).
This item is
only included for the bug_status
ﬁeld.
can_change_to
array
For bug_status values, this is
an array of objects that determine
which statuses you can transition
to from this status.
(This item is
only included for the bug_status
ﬁeld.)
Each object contains the following
items:
• name: (string) The name of
the new status
• comment_required:
(boolean) true if a comment
is required when you change
a bug into this status using
this transition.
Legal Values
DEPRECATED Use ‘’Fields” instead.
6.1. Core API v1
149

Bugzilla Documentation, Release 5.0.6
Tells you what values are allowed for a particular ﬁeld.
Request
To get information on the values for a ﬁeld based on ﬁeld name:
GET /rest/field/bug/(field)/values
To get information based on ﬁeld name and a speciﬁc product:
GET /rest/field/bug/(field)/(product_id)/values
name
type
description
ﬁeld
string The name of the ﬁeld you want information about. This should be the same as the name you
would use in Create Bug, below.
prod-
uct_id
int
If you’re picking a product-speciﬁc ﬁeld, you have to specify the ID of the product you want the
values for.
Resppnse
{
"values": [
"P1",
"P2",
"P3",
"P4",
"P5"
]
}
name
type
description
values
array
The legal values for this ﬁeld. The values will be sorted as they normally would be in Bugzilla.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
6.1.10 Flag Types
This part of the Bugzilla API allows you to get and create bug and attachment ﬂags.
Get Flag Type
Get information about valid ﬂag types that can be set for bugs and attachments.
Request
To get information about all ﬂag types for a product:
GET /rest/flag_type/(product)
To get information about ﬂag_types for a product and component:
GET /rest/flag_type/(product)/(component)
150
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
{
"bug": [
{
"is_multiplicable": false,
"is_requesteeble": false,
"values": [
"X",
"?",
"+",
"-"
],
"id": 11,
"type": "bug",
"is_active": true,
"description": "Blocks the next release",
"name": "blocker"
},
{
"is_requesteeble": false,
"is_multiplicable": false,
"is_active": true,
"description": "Regression found?",
"name": "regression",
"id": 10,
"type": "bug",
"values": [
"X",
"?",
"+",
"-"
]
},
],
"attachment": [
{
"is_requesteeble": true,
"is_multiplicable": true,
"name": "review",
"is_active": true,
"description": "Review the patch for correctness and applicability to the
˓→problem.",
"type": "attachment",
"id": 1,
"values": [
"X",
"?",
"+",
"-"
]
},
{
"name": "approval",
"description": "Approve the patch for check-in to the tree.",
"is_active": true,
"values": [
"X",
"?",
(continues on next page)
6.1. Core API v1
151

Bugzilla Documentation, Release 5.0.6
(continued from previous page)
"+",
"-"
],
"type": "attachment",
"id": 3,
"is_multiplicable": false,
"is_requesteeble": false
}
]
}
You must pass a product name and an optional component name. If the product or component names contains a /
character, up will need to url encode it.
name
type
description
product
string
The name of a valid product.
component
string
An optional valid component name associated with the product.
Response
An object containing two items, bug and attachment. Each value is an array of objects, containing the following
items:
name
type
description
id
int
An integer ID uniquely identifying this ﬂag type.
name
string
The name for the ﬂag type.
type
string
The target of the ﬂag type which is either bug or attachment.
description
string
The description of the ﬂag type.
values
array
String values that the user can set on the ﬂag type.
is_requesteeble
boolean
Users can ask speciﬁc other users to set ﬂags of this type.
is_multiplicable
boolean
Multiple ﬂags of this type can be set for the same bug or attachment.
Create Flag Type
Create a new ﬂag type. You must be authenticated and be in the editcomponents group to perform this action.
Request
POST /rest/flag_type
{
"name" : "feedback",
"description" : "This attachment needs feedback",
"inclusions" : [ "WorldControl "],
"target_type" : "attachment"
}
Some params must be set, or an error will be thrown. The required params are marked in bold.
152
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
name
type
description
name
string The name of the new ﬂag type.
descrip-
tion
string A description for the ﬂag type.
tar-
get_type
string The new ﬂag is either for a bug or an attachment.
inclu-
sions
ar-
ray
An array of strings or an object containing product names, and optionally component names. If
you provide a string, the ﬂag type will be shown on all bugs in that product. If you provide an
object, the key represents the product name, and the value is the components of the product to
be included.
exclu-
sions
ar-
ray
An array of strings or an object containing product names.
This uses the same format as
inclusions. This will exclude the ﬂag from all products and components speciﬁed.
sortkey
int
A number between 1 and 32767 by which this type will be sorted when displayed to users in
a list; ignore if you don’t care what order the types appear in or if you want them to appear in
alphabetical order.
is_active
booleanFlag of this type appear in the UI and can be set. Default is true.
is_requestable
booleanUsers can ask for ﬂags of this type to be set. Default is true.
cc_list
ar-
ray
If the ﬂag type is requestable, who should receive e-mail notiﬁcation of requests. This is an array
of e-mail addresses whichdo not need to be Bugzilla logins.
is_speciﬁcally_requestable
booleanUsers can ask speciﬁc other users to set ﬂags of this type as opposed to just asking the wind.
Default is true.
is_multiplicable
booleanMultiple ﬂags of this type can be set on the same bug. Default is true.
grant_groupstring The group allowed to grant/deny ﬂags of this type (to allow all users to grant/deny these ﬂags,
select no group). Default is no group.
re-
quest_group
string If ﬂags of this type are requestable, the group allowed to request them (to allow all users to
request these ﬂags, select no group). Note that the request group alone has no effect if the grant
group is not deﬁned! Default is no group.
An example for inclusions and/or exclusions:
[
"FooProduct"
]
{
"BarProduct" : [ "C1", "C3" ],
"BazProduct" : [ "C7" ]
}
This ﬂag will be added to all components of FooProduct, components C1 and C3 of BarProduct, and C7 of
BazProduct.
Response
{
"id": 13
}
name
type
description
ﬂag_id
int
ID of the new FlagType object is returned.
6.1. Core API v1
153

Bugzilla Documentation, Release 5.0.6
Update Flag Type
This allows you to update a ﬂag type in Bugzilla. You must be authenticated and be in the editcomponents group to
perform this action.
Request
PUT /rest/flag_type/(id_or_name)
{
"ids" : [13],
"name" : "feedback-new",
"is_requestable" : false
}
You can edit a single ﬂag type by passing the ID or name of the ﬂag type in the URL. To edit more than one ﬂag type,
you can specify addition IDs or ﬂag type names using the ids or names parameters respectively.
One of the below must be speciﬁed.
name
type
description
id_or_name mixed Integer ﬂag type ID or name.
ids
ar-
ray
Numeric IDs of the ﬂag types that you wish to update.
names
ar-
ray
Names of the ﬂag types that you wish to update. If many ﬂag types have the same name, this
will change all of them.
The following parameters specify the new values you want to set for the ﬂag types you are updating.
name
type
description
name
string A short name identifying this type.
descrip-
tion
string A comprehensive description of this type.
inclu-
sions
ar-
ray
An array of strings or an object containing product names, and optionally component names. If
you provide a string, the ﬂag type will be shown on all bugs in that product. If you provide an
object, the key represents the product name, and the value is the components of the product to
be included.
exclu-
sions
ar-
ray
An array of strings or an object containing product names.
This uses the same format as
inclusions. This will exclude the ﬂag from all products and components speciﬁed.
sortkey
int
A number between 1 and 32767 by which this type will be sorted when displayed to users in
a list; ignore if you don’t care what order the types appear in or if you want them to appear in
alphabetical order.
is_active
booleanFlag of this type appear in the UI and can be set.
is_requestable
booleanUsers can ask for ﬂags of this type to be set.
cc_list
ar-
ray
If the ﬂag type is requestable, who should receive e-mail notiﬁcation of requests. This is an array
of e-mail addresses which do not need to be Bugzilla logins.
is_speciﬁcally_requestable
booleanUsers can ask speciﬁc other users to set ﬂags of this type as opposed to just asking the wind.
is_multiplicable
booleanMultiple ﬂags of this type can be set on the same bug.
grant_groupstring The group allowed to grant/deny ﬂags of this type (to allow all users to grant/deny these ﬂags,
select no group).
re-
quest_group
string If ﬂags of this type are requestable, the group allowed to request them (to allow all users to
request these ﬂags, select no group). Note that the request group alone has no effect if the grant
group is not deﬁned!
154
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
An example for inclusions and/or exclusions:
[
"FooProduct",
]
{
"BarProduct" : [ "C1", "C3" ],
"BazProduct" : [ "C7" ]
}
This ﬂag will be added to all components of FooProduct, components C1 and C3 of BarProduct, and C7 of
BazProduct.
Response
{
"flagtypes": [
{
"name": "feedback-new",
"changes": {
"is_requestable": {
"added": "0",
"removed": "1"
},
"name": {
"removed": "feedback",
"added": "feedback-new"
}
},
"id": 13
}
]
}
flagtypes (array) Flag change objects containing the following items:
name
type
description
id
int
The ID of the ﬂag type that was up-
dated.
name
string
The name of the ﬂag type that was
updated.
changes
object
The changes that were actually done
on this ﬂag type.
The keys are
the names of the ﬁelds that were
changed, and the values are an ob-
ject with two items:
• added: (string) The value that
this ﬁeld was changed to.
• removed: (string) The value
that was previously set in this
ﬁeld.
Booleans changes will be represented with the strings ‘1’ and ‘0’.
6.1. Core API v1
155

Bugzilla Documentation, Release 5.0.6
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
6.1.11 Groups
The API for creating, changing, and getting information about groups.
Create Group
This allows you to create a new group in Bugzilla. You must be authenticated and be in the creategroups group to
perform this action.
Request
POST /rest/group
{
"name" : "secret-group",
"description" : "Too secret for you!",
"is_active" : true
}
Some params must be set, or an error will be thrown. The required params are marked in bold.
name
type
description
name
string
A short name for this group. Must be unique. This is not usually displayed in the user interface,
except in a few places.
de-
scrip-
tion
string
A human-readable name for this group. Should be relatively short. This is what will normally
appear in the UI as the name of the group.
user_regexpstring
A regular expression. Any user whose Bugzilla username matches this regular expression will
automatically be granted membership in this group.
is_active booleantrue if new group can be used for bugs, false if this is a group that will only contain users
and no bugs will be restricted to it.
icon_url
string
A URL pointing to a small icon used to identify the group. This icon will show up next to users’
names in various parts of Bugzilla if they are in this group.
Response
{
"id": 22
}
name
type
description
id
int
ID of the newly-created group.
Update Group
This allows you to update a group in Bugzilla. You must be authenticated and be in the creategroups group to perform
this action.
Request
To update a group using the group ID or name:
156
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
PUT /rest/group/(id_or_name)
{
"name" : "secret-group",
"description" : "Too secret for you! (updated description)",
"is_active" : false
}
You can edit a single group by passing the ID or name of the group in the URL. To edit more than one group, you can
specify addition IDs or group names using the ids or names parameters respectively.
One of the below must be speciﬁed.
name
type
description
id_or_name
mixed
Integer group or name.
ids
array
IDs of groups to update.
names
array
Names of groups to update.
The following parameters specify the new values you want to set for the group(s) you are updating.
name
type
description
name
string
A new name for the groups. If you try to set this while updating more than one group, an error
will occur, as group names must be unique.
de-
scrip-
tion
string
A new description for the groups. This is what will appear in the UI as the name of the groups.
user_regexpstring
A new regular expression for email. Will automatically grant membership to these groups to
anyone with an email address that matches this perl regular expression.
is_active booleanSet if groups are active and eligible to be used for bugs. true if bugs can be restricted to this
group, false otherwise.
icon_url string
A URL pointing to an icon that will appear next to the name of users who are in this group.
Response
{
"groups": [
{
"changes": {
"description": {
"added": "Too secret for you! (updated description)",
"removed": "Too secret for you!"
},
"is_active": {
"removed": "1",
"added": "0"
}
},
"id": "22"
}
]
}
groups (array) Group change objects, each containing the following items:
6.1. Core API v1
157

Bugzilla Documentation, Release 5.0.6
name
type
description
id
int
The ID of the group that was up-
dated.
changes
object
The changes that were actually done
on this group.
The keys are
the names of the ﬁelds that were
changed, and the values are an ob-
ject with two items:
• added:
(string) The values
that were added to this ﬁeld,
possibly a comma-and-space-
separated list if multiple val-
ues were added.
• removed: (string) The values
that were removed from this
ﬁeld, possibly a comma-and-
space-separated list if multi-
ple values were removed.
Get Group
Returns information about Bugzilla groups.
Request
To return information about a speciﬁc group ID or name:
GET /rest/group/(id_or_name)
You can also return information about more than one speciﬁc group by using the following in your query string:
GET /rest/group?ids=1&ids=2&ids=3
GET /group?names=ProductOne&names=Product2
If neither IDs nor names are passed, and you are in the creategroups or editusers group, then all groups will be retrieved.
Otherwise, only groups that you have bless privileges for will be returned.
name
type
description
id_or_name
mixed
Integer group ID or name.
ids
array
Integer IDs of groups.
names
array
Names of groups.
membership
boolean
Set to 1 then a list of members of the passed groups names and IDs will be returned.
Response
{
"groups": [
{
"membership": [
{
"real_name": "Bugzilla User",
"can_login": true,
(continues on next page)
158
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
(continued from previous page)
"name": "user@bugzilla.org",
"login_denied_text": "",
"id": 85,
"email_enabled": false,
"email": "user@bugzilla.org"
},
],
"is_active": true,
"description": "Test Group",
"user_regexp": "",
"is_bug_group": true,
"name": "TestGroup",
"id": 9
}
]
}
If the user is a member of the creategroups group they will receive information about all groups or groups matching the
criteria that they passed. You have to be in the creategroups group unless you’re requesting membership information.
If the user is not a member of the creategroups group, but they are in the “editusers” group or have bless privileges
to the groups they require membership information for, the is_active, is_bug_group and user_regexp values are not
supplied.
The return value will be an object containing group names as the keys; each value will be an object that describes the
group and has the following items:
name
type
description
id
int
The unique integer ID that Bugzilla uses to identify this group. Even if the name of the group
changes, this ID will stay the same.
name
string The name of the group.
de-
scrip-
tion
string The description of the group.
is_bug_group
int
Whether this group is to be used for bug reports or is only administrative speciﬁc.
user_regexpstring A regular expression that allows users to be added to this group if their login matches.
is_active int
Whether this group is currently active or not.
users
ar-
ray
User objects that are members of this group; only returned if the user sets the membership
parameter to 1. Each user object has the items describe in the User object below.
User object:
name
type
description
id
int
The ID of the user.
real_name string
The actual name of the user.
email
string
The email address of the user.
name
string
The login name of the user. Note that in some situations this is different than their email.
can_login
booleanA boolean value to indicate if the user can login into bugzilla.
email_enabled
booleanA boolean value to indicate if bug-related mail will be sent to the user or not.
dis-
abled_text
string
A text ﬁeld that holds the reason for disabling a user from logging into Bugzilla. If empty, then
the user account is enabled; otherwise it is disabled/closed.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
6.1. Core API v1
159

Bugzilla Documentation, Release 5.0.6
6.1.12 Products
This part of the Bugzilla API allows you to list the available products and get information about them.
List Products
Returns a list of the IDs of the products the user can search on.
Request
To get a list of product IDs a user can select such as for querying bugs:
GET /rest/product_selectable
To get a list of product IDs a user can enter a bug against:
GET /rest/product_enterable
To get a list of product IDs a user can search or enter bugs against.
GET /rest/product_accessible
Response
{
"ids": [
"2",
"3",
"19",
"1",
"4"
]
}
name
type
description
ids
array
List of integer product IDs.
Get Product
Returns a list of information about the products passed to it.
Request
To return information about a speciﬁc type of products such as accessible, selectable, or enterable:
GET /rest/product?type=accessible
To return information about a speciﬁc product by id or name:
GET /rest/product/(id_or_name)
You can also return information about more than one product by using the following parameters in your query string:
GET /rest/product?ids=1&ids=2&ids=3
GET /rest/product?names=ProductOne&names=Product2
160
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
name
type
description
id_or_name
mixed Integer product ID or product name.
ids
ar-
ray
Product IDs
names
ar-
ray
Product names
type
string The group of products to return. Valid values are accessible (default), selectable, and
enterable. type can be a single value or an array of values if more than one group is needed
with duplicates removed.
Response
{
"products": [
{
"id": 1,
"default_milestone": "---",
"components": [
{
"is_active": true,
"default_assigned_to": "admin@bugzilla.org",
"id": 1,
"sort_key": 0,
"name": "TestComponent",
"flag_types": {
"bug": [
{
"is_active": true,
"grant_group": null,
"cc_list": "",
"is_requestable": true,
"id": 3,
"is_multiplicable": true,
"name": "needinfo",
"request_group": null,
"is_requesteeble": true,
"sort_key": 0,
"description": "needinfo"
}
],
"attachment": [
{
"description": "Review",
"is_multiplicable": true,
"name": "review",
"is_requesteeble": true,
"request_group": null,
"sort_key": 0,
"cc_list": "",
"grant_group": null,
"is_requestable": true,
"id": 2,
"is_active": true
}
]
},
(continues on next page)
6.1. Core API v1
161

Bugzilla Documentation, Release 5.0.6
(continued from previous page)
"default_qa_contact": "",
"description": "This is a test component."
}
],
"is_active": true,
"classification": "Unclassified",
"versions": [
{
"id": 1,
"name": "unspecified",
"is_active": true,
"sort_key": 0
}
],
"description": "This is a test product.",
"has_unconfirmed": true,
"milestones": [
{
"name": "---",
"is_active": true,
"sort_key": 0,
"id": 1
}
],
"name": "TestProduct"
}
]
}
products (array) Each product object has the following items:
name
type
description
id
int
An integer ID uniquely identifying the product in this installation only.
name
string
The name of the product. This is a unique identiﬁer for the product.
description
string
A description of the product, which may contain HTML.
is_active
boolean A boolean indicating if the product is active.
de-
fault_milestone
string
The name of the default milestone for the product.
has_unconﬁrmed boolean Indicates whether the UNCONFIRMED bug status is available for this product.
classiﬁcation
string
The classiﬁcation name for the product.
components
array
Each component object has the items described in the Component object below.
versions
array
Each object describes a version, and has the following items: name, sort_key and
is_active.
milestones
array
Each object describes a milestone, and has the following items: name, sort_key
and is_active.
If the user tries to access a product that is not in the list of accessible products for the user, or a product that does not
exist, that is silently ignored, and no information about that product is returned.
Component object:
162
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
name
type
description
id
int
An integer ID uniquely identifying the component in this installation only.
name
string The name of the component. This is a unique identiﬁer for this component.
descrip-
tion
string A description of the component, which may contain HTML.
de-
fault_assigned_to
string The login name of the user to whom new bugs will be assigned by default.
de-
fault_qa_contact
string The login name of the user who will be set as the QA Contact for new bugs by default. Empty
string if the QA contact is not deﬁned.
sort_key
int
Components, when displayed in a list, are sorted ﬁrst by this integer and then secondly by their
name.
is_active
booleanA boolean indicating if the component is active. Inactive components are not enabled for new
bugs.
ﬂag_types
ob-
ject
An object containing two items bug and attachment that each contains an array of objects,
where each describes a ﬂagtype. The ﬂagtype items are described in the Flagtype object below.
Flagtype object:
name
type
description
id
int
Returns the ID of the ﬂagtype.
name
string
Returns the name of the ﬂagtype.
descrip-
tion
string
Returns the description of the ﬂagtype.
cc_list
string
Returns the concatenated CC list for the ﬂagtype, as a single string.
sort_key
int
Returns the sortkey of the ﬂagtype.
is_active
booleanReturns whether the ﬂagtype is active or disabled. Flags being in a disabled ﬂagtype are not
deleted. It only prevents you from adding new ﬂags to it.
is_requestablebooleanReturns whether you can request for the given ﬂagtype (i.e. whether the ‘?’ ﬂag is available
or not).
is_requesteeble
booleanReturns whether you can ask someone speciﬁcally or not.
is_multiplicable
booleanReturns whether you can have more than one ﬂag for the given ﬂagtype in a given
bug/attachment.
grant_group int
the group ID that is allowed to grant/deny ﬂags of this type. If the item is not included all
users are allowed to grant/deny this ﬂagtype.
re-
quest_group
int
The group ID that is allowed to request the ﬂag if the ﬂag is of the type requestable. If the
item is not included all users are allowed request this ﬂagtype.
Create Product
This allows you to create a new product in Bugzilla.
Request
POST /rest/product
{
"name" : "AnotherProduct",
"description" : "Another Product",
"classification" : "Unclassified",
"is_open" : false,
"has_unconfirmed" : false,
(continues on next page)
6.1. Core API v1
163

Bugzilla Documentation, Release 5.0.6
(continued from previous page)
"version" : "unspecified"
}
Some params must be set, or an error will be thrown. The required params are marked in bold.
name
type
description
name
string
The name of this product. Must be globally unique within Bugzilla.
description
string
A description for this product. Allows some simple HTML.
version
string
The default version for this product.
has_unconﬁrmed
boolean
Allow the UNCONFIRMED status to be set on bugs in this product. Default: true.
classiﬁcation
string
The name of the Classiﬁcation which contains this product.
de-
fault_milestone
string
The default milestone for this product. Default ‘—‘.
is_open
boolean
true if the product is currently allowing bugs to be entered into it. Default: true.
create_series
boolean
true if you want series for New Charts to be created for this new product. Default:
true.
Response
{
"id": 20
}
Returns an object with the following items:
name
type
description
id
int
ID of the newly-ﬁled product.
Update Product
This allows you to update a product in Bugzilla.
Request
PUT /rest/product/(id_or_name)
You can edit a single product by passing the ID or name of the product in the URL. To edit more than one product,
you can specify addition IDs or product names using the ids or names parameters respectively.
{
"ids" : [123],
"name" : "BarName",
"has_unconfirmed" : false
}
One of the below must be speciﬁed.
name
type
description
id_or_name
mixed
Integer product ID or name.
ids
array
Numeric IDs of the products that you wish to update.
names
array
Names of the products that you wish to update.
164
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
The following parameters specify the new values you want to set for the product(s) you are updating.
name
type
description
name
string
A new name for this product. If you try to set this while updating more than one product, an
error will occur, as product names must be unique.
de-
fault_milestone
string
When a new bug is ﬁled, what milestone does it get by default if the user does not choose
one? Must represent a milestone that is valid for this product.
descrip-
tion
string
Update the long description for these products to this value.
has_unconﬁrmed
booleanAllow the UNCONFIRMED status to be set on bugs in products.
is_open
booleantrue if the product is currently allowing bugs to be entered into it, false otherwise.
Response
{
"products" : [
{
"id" : 123,
"changes" : {
"name" : {
"removed" : "FooName",
"added" : "BarName"
},
"has_unconfirmed" : {
"removed" : "1",
"added" : "0"
}
}
}
]
}
products (array) Product change objects containing the following items:
name
type
description
id
int
The ID of the product that was up-
dated.
changes
object
The changes that were actually done
on this product.
The keys are
the names of the ﬁelds that were
changed, and the values are an ob-
ject with two items:
• added: (string) The value that
this ﬁeld was changed to.
• removed: (string) The value
that was previously set in this
ﬁeld.
Booleans will be represented with the strings ‘1’ and ‘0’ for changed values as they are stored as strings in the database
currently.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
6.1. Core API v1
165

Bugzilla Documentation, Release 5.0.6
6.1.13 Users
This part of the Bugzilla API allows you to create user accounts, get information about user accounts and to log in or
out using an existing account.
Login
Logging in with a username and password is required for many Bugzilla installations, in order to search for private
bugs, post new bugs, etc. This method allows you to retrieve a token that can be used as authentication for subsequent
API calls. Otherwise yuou will need to pass your login and password with each call.
This method will be going away in the future in favor of using API keys.
Request
GET /rest/login?login=foo@example.com&password=toosecrettoshow
name
type
description
login
string
The user’s login name.
password
string
The user’s password.
re-
strict_login
boolean If set to a true value, the token returned by this method will only be valid from the IP address
which called this method.
Response
{
"token": "786-OLaWfBisMY",
"id": 786
}
name type
description
id
int
Numeric ID of the user that was logged in.
to-
ken
string Token which can be passed in the parameters as authentication in other calls. The token can be sent
along with any future requests to the webservice, for the duration of the session, i.e. til Logout is
called.
Logout
Log out the user. Basically it invalidates the token provided so it cannot be re-used. Does nothing if the token is not in
use. Will also clear any existing authentication cookies the client may still have stored.
Request
GET /rest/logout?token=1234-VWvO51X69r
name
type
description
token
string
The user’s token used for authentication.
Valid Login
This method will verify whether a client’s cookies or current login token is still valid or have expired. A valid username
that matches must be provided as well.
166
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
Request
GET /rest/valid_login?login=foo@example.com&token=1234-VWvO51X69r
name
type
description
login
string
The login name that matches the provided cookies or token.
token
string
Persistent login token currently being used for authentication.
Response
Returns true/false depending on if the current token is valid for the provided username.
Create User
Creates a user account directly in Bugzilla, password and all. Instead of this, you should use Offer Account by Email
when possible because that makes sure that the email address speciﬁed can actually receive an email. This function
does not check that. You must be authenticated and be in the editusers group to perform this action.
Request
POST /rest/user
{
"email" : "user@bugzilla.org",
"full_name" : "Test User",
"password" : "K16ldRr922I1"
}
name type
description
email string The email address for the new user.
full_name
string The user’s full name. Will be set to empty if not speciﬁed.
pass-
word
string The password for the new user account, in plain text. It will be stripped of leading and trailing
whitespace. If blank or not speciﬁed, the new created account will exist in Bugzilla but will not be
allowed to log in using DB authentication until a password is set either by the user (through resetting
their password) or by the administrator.
Response
{
"id": 58707
}
name
type
desciption
id
int
The numeric ID of the user that was created.
Update User
Updates an existing user account in Bugzilla. You must be authenticated and be in the editusers group to perform this
action.
Request
6.1. Core API v1
167

Bugzilla Documentation, Release 5.0.6
PUT /rest/user/(id_or_name)
You can edit a single user by passing the ID or login name of the user in the URL. To edit more than one user, you can
specify addition IDs or login names using the ids or names parameters respectively.
name
type
description
id_or_name
mixed Either the ID or the login name of the user to update.
ids
ar-
ray
Additional IDs of users to update.
names
ar-
ray
Additional login names of users to update.
full_namestring The new name of the user.
email
string The email of the user. Note that email used to login to bugzilla. Also note that you can only
update one user at a time when changing the login name / email. (An error will be thrown if you
try to update this ﬁeld for multiple users at once.)
pass-
word
string The password of the user.
email_enabled
booleanA boolean value to enable/disable sending bug-related mail to the user.
lo-
gin_denied_text
string A text ﬁeld that holds the reason for disabling a user from logging into Bugzilla. If empty, then
the user account is enabled; otherwise it is disabled/closed.
groups
ob-
ject
These specify the groups that this user is directly a member of. To set these, you should pass an
object as the value. The object’s items are described in the Groups update objects below.
bless_groups
ob-
ject
This is the same as groups but affects what groups a user has direct membership to bless that
group. It takes the same inputs as groups.
Groups and bless groups update object:
name type
description
add
ar-
ray
The group IDs or group names that the user should be added to.
re-
move
ar-
ray
The group IDs or group names that the user should be removed from.
set
ar-
ray
Integers or strings which are an exact set of group IDs and group names that the user should be a
member of. This does not remove groups from the user when the person making the change does not
have the bless privilege for the group.
If you specify set, then add and remove will be ignored. A group in both the add and remove list will be added.
Specifying a group that the user making the change does not have bless rights will generate an error.
Response
• users: (array) List of user change objects with the following items:
168
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
name
type
description
id
int
The ID of the user that was updated.
changes
object
The changes that were actually done
on this user. The keys are the names
of the ﬁelds that were changed, and
the values are an object with two
items:
• added:
(string) The values
that were added to this ﬁeld,
possibly a comma-and-space-
separated list if multiple val-
ues were added.
• removed: (string) The values
that were removed from this
ﬁeld, possibly a comma-and-
space-separated list if multi-
ple values were removed.
Get User
Gets information about user accounts in Bugzilla.
Request
To get information about a single user in Bugzilla:
GET /rest/user/(id_or_name)
To get multiple users by name or ID:
GET /rest/user?names=foo@bar.com&name=test@bugzilla.org
GET /rest/user?ids=123&ids=321
To get user matching a search string:
GET /rest/user?match=foo
To get user by using an integer ID value or by using match, you must be authenticated.
6.1. Core API v1
169

Bugzilla Documentation, Release 5.0.6
name type
description
id_or_name
mixed An integer user ID or login name of the user.
ids
ar-
ray
Integer user IDs. Logged=out users cannot pass this parameter to this function. If they try, they will
get an error. Logged=in users will get an error if they specify the ID of a user they cannot see.
names ar-
ray
Login names.
match ar-
ray
This works just like “user matching” in Bugzilla itself. Users will be returned whose real name or
login name contains any one of the speciﬁed strings. Users that you cannot see will not be included
in the returned list.
Most installations have a limit on how many matches are returned for each string; the default is 1000
but can be changed by the Bugzilla administrator.
Logged-out users cannot use this argument, and an error will be thrown if they try. (This is to make it
harder for spammers to harvest email addresses from Bugzilla, and also to enforce the user visibility
restrictions that are implemented on some Bugzillas.)
limit
int
Limit the number of users matched by the match parameter. If the value is greater than the system
limit, the system limit will be used. This parameter is only valid when using the match parameter.
group_ids
ar-
ray
Numeric IDs for groups that a user can be in.
groupsar-
ray
Names of groups that a user can be in. If group_ids or groups are speciﬁed, they limit the return
value to users who are in any of the groups speciﬁed.
in-
clude_disabled
booleanBy default, when using the match parameter, disabled users are excluded from the returned results
unless their full username is identical to the match string. Setting include_disabled to true
will include disabled users in the returned results even if their username doesn’t fully match the input
string.
Response
• users: (array) Each object describes a user and has the following items:
name type
description
id
int
The unique integer ID that Bugzilla uses to represent this user. Even if the user’s login name changes,
this will not change.
real_name
string The actual name of the user. May be blank.
email
string The email address of the user.
name
string The login name of the user. Note that in some situations this is different than their email.
can_loginbooleanA boolean value to indicate if the user can login into bugzilla.
email_enabled
booleanA boolean value to indicate if bug-related mail will be sent to the user or not.
lo-
gin_denied_text
string A text ﬁeld that holds the reason for disabling a user from logging into Bugzilla. If empty then the
user account is enabled; otherwise it is disabled/closed.
groups ar-
ray
Groups the user is a member of. If the currently logged in user is querying their own account or is
a member of the ‘editusers’ group, the array will contain all the groups that the user is a member
of. Otherwise, the array will only contain groups that the logged in user can bless. Each object
describes the group and contains the items described in the Group object below.
saved_searches
ar-
ray
User’s saved searches, each having the following Search object items described below.
saved_reports
ar-
ray
User’s saved reports, each having the following Search object items described below.
Group object:
170
Chapter 6. WebService API Reference

Bugzilla Documentation, Release 5.0.6
name
type
description
id
int
The group ID
name
string
The name of the group
description
string
The description for the group
Search object:
name
type
description
id
int
An integer ID uniquely identifying the saved report.
name
string
The name of the saved report.
query
string
The CGI parameters for the saved report.
If you are not authenticated when you call this function, you will only be returned the id, name, and real_name
items. If you are authenticated and not in ‘editusers’ group, you will only be returned the id, name, real_name,
email, can_login, and groups items. The groups returned are ﬁltered based on your permission to bless each
group. The saved_searches and saved_reports items are only returned if you are querying your own ac-
count, even if you are in the editusers group.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
This documentation undoubtedly has bugs; if you ﬁnd some, please ﬁle them here.
6.1. Core API v1
171

