psheriff@pdsa.com   www.pdsa.com
BUSINESS/TECHNOLOGY CONSULTING
Paul D. Sheriff
Call Web API Methods using 
JavaScript

Get and post data using the 
XMLHttpRequest object
Add error handling to XMLHttpRequest
Using the Fetch API promises to get and 
post data
Check for success or failure in the Fetch 
API
Pros and cons of Fetch API
Module Goals

XMLHttpRequest Object

Uses Callbacks
Most other Ajax 
implementations use this 
object
The most primitive Ajax 
object
Built-in to all browsers
XMLHttpRequest Object

function get() {
let req = new XMLHttpRequest();
req.onreadystatechange = function () {
if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
console.log(this.response);
}
};
req.open("GET", "/resources/products.json");
req.send();
}
XMLHttpRequest Object

Demo
Get all products using XMLHttpRequest

Demo
Get a single product

Demo
Insert a new product

Demo
Error handling

Fetch API

Uses Promises
Similar to 
XMLHttpRequest
Built-in to newer 
browsers
Fetch API

function get() {
fetch("/resources/products.json")
.then(response => response.json())
.then(data => console.log(data));
}
Fetch API

Demo
Get all products

Demo
Insert a product

If ok is true, then 
call was successful
You need to check 
the ok property
Only network 
errors are sent to 
.catch() method
Fetch API Error Detection

Demo
Check for success/failure

Pros
Promise based
Good for simple API calls
Built-in to ES6
No need to jQuery or other libraries
Cons
HTTP status errors not caught
Must check ok property for 
success/failure
Manually convert response to JSON
Only available in modern browsers
No built-in on-progress method
Fetch API

XMLHttpRequest uses callbacks
Can put your own wrapper around 
XMLHttpRequest to make it use promises
The Fetch API returns a promise
Both have advantages and disadvantages
Module 
Summary

Coming up nextâ€¦
Using the jQuery Ajax 
Implementation
- Using $.ajax()
- Using promises
- Parameters and settings

