Alex Aiken 
Compilers 
Valid Items 

Alex Aiken 
Valid Items 
T  . (E) 
T  (.E) 
( 
S’  E. 
E  . T+E 
S’  . E 
E . T 
E T. 
T .int 
T  .int * T 
e 
e 
e 
e 
E 
e 
e 
e 
e 
e 
e 
T 
E  T.+E 
T 
T  (E.) 
E 
T  (E). 
) 
E  T+.E 
+ 
e 
e 
E  T+E. 
E 
T int. 
int 
T  int.* T 
int 
T  int *.T 
* 
T  int * T. 
T 
e 
e 
e 

Alex Aiken 
Valid Items 
S’  . E 
E  . T 
E  .T + E 
T  .(E) 
T  .int * T 
T  .int 
S’  E . 
E  T. 
E  T. + E 
T  int. * T 
T  int. 
T  (. E) 
E  .T 
E  .T + E 
T  .(E) 
T  .int * T 
T  .int 
E  T + E. 
E  T + . E 
E  .T 
E  .T + E 
T  .(E) 
T  .int * T 
T  .int 
T  int * .T 
T  .(E) 
T  .int * T 
T  .int 
T  int * T. 
T  (E.) 
T  (E). 
E 
T 
( 
int 
int 
* 
) 
E 
E 
T 
int  
( 
( 
int 
T 
+ 
( 
T 

Alex Aiken 
Valid Items 
The states of the DFA are 
“canonical collections of items” 
or 
“canonical collections of LR(0) items” 
 
 
The Dragon book gives another way of constructing 
LR(0) items 

Alex Aiken 
Valid Items 
Item X  b.g is valid for a viable prefix ab if 
S’ * aXw  abgw  
by a right-most derivation 
 
After parsing ab, the valid items are the possible tops 
of the stack of items 

Alex Aiken 
Valid Items 
 
An item I is valid for a viable prefix a if the DFA 
recognizing viable prefixes terminates on input a in a 
state s containing I 
 
The items in s describe what the top of the item stack 
might be after reading input a 

Alex Aiken 
Valid Items 
• An item is often valid for many prefixes 
 
• Example: The item T  (.E) is valid for prefixes 
( 
(( 
((( 
(((( 
. . . 

Alex Aiken 
Valid Items 
S’  . E 
E  . T 
E  .T + E 
T  .(E) 
T  .int * T 
T  .int 
S’  E . 
E  T. 
E  T. + E 
T  int. * T 
T  int. 
T  (. E) 
E  .T 
E  .T + E 
T  .(E) 
T  .int * T 
T  .int 
E  T + E. 
E  T + . E 
E  .T 
E  .T + E 
T  .(E) 
T  .int * T 
T  .int 
T  int * .T 
T  .(E) 
T  .int * T 
T  .int 
T  int * T. 
T  (E.) 
T  (E). 
E 
T 
( 
int 
int 
* 
) 
E 
E 
T 
int 
( 
( 
int 
T 
+ 
( 

Valid Items 
T  int *.T 
E  .T + E 
T  .int 
E  (.E ) 
Using the automaton on the previous 
slide, choose the valid items for the 
prefix:  (int * 
To show the 
automaton,  click 
“Hide Question” 
↓ 

