Data	  Structures	  
Hash	  Tables:	  Some	  
Implementa6on	  Details	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Purpose	  :	  maintain	  a	  (possibly	  evolving)	  set	  of	  stuﬀ.	  
(transac6ons,	  people	  +	  associated	  data,	  IP	  addresses,	  etc.)	  
	  
Insert	  :	  add	  new	  record	  
	  
Delete	  :	  delete	  exis6ng	  record	  
	  
Lookup	  :	  check	  for	  a	  par6cular	  record	  
	  (	  a	  “dic6onary”	  )	  
	  
	  
	  
	  *	  1.	  properly	  implemented	  	  	  	  	  2.	  non-­‐pathological	  data	  
Hash	  Table:	  Supported	  Opera6ons	  
Using	  a	  “key”	  
	  
AMAZING	  
GUARANTEE	  
All	  opera6ons	  in	  
O(1)	  6me	  !	  *	  

Tim	  Roughgarden	  
Naïve	  Solu6ons	  
1.  Array-­‐based	  
solu6on	  
[	  indexed	  by	  u]	  
-­‐	  O(1)	  opera6ons	  
but	  
	  space	  
2.  List	  –based	  
solu6on	  
-­‐	   	  	  	  	  	  	  	  space	  but
	  	  	  	  	  Lookup	  
High-­‐Level	  Idea	  
Setup	  :	  universe	  U	  [e.g.,	  all	  IP	  addresses,	  all	  
names,	  all	  chessboard	  conﬁgura6ons,	  etc.	  ]	  
[	  generally,	  REALLY	  BIG	  ]	  
	  
Goal	  :	  want	  to	  maintain	  evolving	  set	  
[	  generally,	  of	  reasonable	  size	  ]	  
	  
Solu6on	  :	  1.)	  pick	  n	  =	  #	  of	  “buckets”	  with	  	  
(for	  simplicity	  assume	  |S|	  doesn’t	  vary	  much)	  
2.)	  choose	  a	  hash	  func6on	  	  
3.)	  use	  array	  A	  of	  length	  n,	  store	  x	  in	  A[h(x)]	  

23	  
57	  
184	  
367	  
Consider	  𝑛	  people	  with	  random	  birthdays	  (i.e.,	  with	  each	  day	  of	  
the	  year	  equally	  likely).	  	  How	  large	  does	  𝑛	  need	  to	  be	  before	  there	  
is	  at	  least	  a	  50%	  chance	  that	  two	  people	  have	  the	  same	  birthday?	  
50	  %	  
	  
99	  %	  
	  
99.99….%	  	  	  	  	  	  
	  	  
100%	  
BIRTHDAY	  
“PARADOX”	  

Tim	  Roughgarden	  
Resolving	  Collisions	  
Collision:	  dis6nct
	  	  	  	  	  	  	  	  	  	  such	  that	  
	  
Solu6on	  	  #	  1	  :	  (separate)	  chaining	  
-­‐ keep	  linked	  list	  in	  each	  bucket	  
-­‐ 	  given	  a	  key/object	  x,	  perform	  Insert/Delete/Lookup	  in	  	  
the	  list	  in	  A[h(x)]	  
Solu6on	  #2	  :	  open	  addressing.	  (only	  one	  object	  per	  bucket)	  
-­‐ Hash	  func6on	  now	  speciﬁes	  probe	  sequence	  h1(x),h2(x),..	  
	  (keep	  trying	  6ll	  ﬁnd	  open	  slot)	  
-­‐	  Examples	  :	  linear	  probing	  (look	  consecu6vely),	  double	  hashing	  
Bucket	  for	  x	  
Linked	  list	  for	  x	  
Use	  2	  hash	  func6ons	  

Tim	  Roughgarden	  
What	  Makes	  a	  Good	  Hash	  Func6on?	  
Note	  :	  in	  hash	  table	  with	  chaining,	  Insert	  is	  	  
	  
	  for	  Insert/Delete.	  
	  could	  be	  anywhere	  from	  m/n	  to	  m	  for	  m	  objects	  
Point	  :	  performance	  depends	  on	  the	  choice	  of	  hash	  func6on!	  
	  (analogous	  situa6on	  with	  open	  addressing)	  
	  
Proper6es	  of	  a	  “Good”	  Hash	  func6on	  
1.  Should	  lead	  to	  good	  performance	  =>	  i.e.,	  should	  “spread	  
data	  out”	  	  (gold	  standard	  –	  completely	  random	  hashing)	  
2.  Should	  be	  easy	  to	  store/	  very	  fast	  to	  evaluate.	  
Insert	  new	  object	  x	  at	  
front	  of	  list	  in	  A[h(x)]	  
All	  
objects	  in	  
same	  
bucket	  
Equal-­‐length	  lists	  

Tim	  Roughgarden	  
Example	  :	  keys	  =	  phone	  numbers	  (10-­‐digits).	  
	  |u|	  =	  1010	  
-­‐ Terrible	  hash	  func6on	  :	  h(x)	  =	  1st	  3	  digits	  of	  x	  
	  choose	  n	  =	  103	  
	  
	  
	  
	  (i.e.,	  area	  code)	  
-­‐ 	  mediocre	  hash	  func6on	  :	  h(x)	  =	  last	  3	  digits	  of	  x	  
	  [s6ll	  vulnerable	  to	  paterns	  in	  last	  3	  digits	  ]	  
	  
Example	  :	  keys	  =	  memory	  loca6ons.	  (will	  be	  mul6ples	  of	  a	  power	  of	  2)	  
	  
-­‐ Bad	  hash	  func6on	  :	  h(x)	  =	  x	  mod	  1000	  	  	  (again	  n	  =	  103)	  
=>	  All	  odd	  buckets	  guaranteed	  to	  be	  empty.	  
Bad	  Hash	  Func6ons	  

Tim	  Roughgarden	  
Quick-­‐and-­‐Dirty	  Hash	  Func6ons	  
How	  to	  choose	  n	  =	  #	  of	  buckets	  
1.  Choose	  n	  to	  be	  a	  prime	  (	  within	  constant	  factor	  of	  #	  of	  objects	  in	  
table)	  
2.  Not	  too	  close	  to	  a	  power	  of	  2	  
3.  Not	  too	  close	  to	  a	  power	  of	  10	  
	  “hash	  
	  code”	  
	  
e.g.,	  subrou6ne	  to	  convert	  
strings	  to	  integers	  
“comparison	  
func6on	  “	  
	  	  
	  like	  the	  mod	  n	  
	  func6on	  

