Alex Aiken 
Compilers 
Register Allocation 

Alex Aiken 
Register Allocation 
• Intermediate code uses unlimited temporaries 
– Simplifies code generation and optimization 
– Complicates final translation to assembly 
 
• Typical intermediate code uses too many temporaries 

Alex Aiken 
Register Allocation 
• The problem: 
Rewrite the intermediate code to use no more 
temporaries than there are machine registers 
 
• Method:  
– Assign multiple temporaries to each register 
– But without changing the program behavior 
 

Alex Aiken 
Register Allocation 
•
Consider the program 
 
a := c + d 
e := a + b 
f := e - 1 
 
 
•
Assume a & e dead after 
use 
–
A dead temporary can be 
“reused” 
• Can allocate a, e, and f all to 
one register (r1): 
 
r1 := r2 + r3 
r1 := r1 + r4 
r1 := r1 - 1 
 
 

Alex Aiken 
Register Allocation 
• Register allocation is as old as compilers 
– Register allocation was used in the original FORTRAN 
compiler in the ‘50s 
– Very crude algorithms 
 
• A breakthrough came in 1980  
– Register allocation scheme based on graph coloring 
– Relatively simple, global and works well in practice 

Alex Aiken 
Register Allocation 
 
Temporaries t1 and t2 can share the same register if at 
any point in the program at most one of t1 or t2 is live. 
 
Or 
 
If t1 and t2 are live at the same time, they cannot share a 
register 
 

Alex Aiken 
Register Allocation 
• Compute live variables for each point: 
a := b + c 
d := -a 
e := d + f 
f := 2 * e 
b := d + e 
e := e - 1 
b := f + c 
{b} 
{c,e} 
{b} 
{c,f} 
{c,f} 
{b,c,e,f} 
{c,d,e,f} 
{b,c,f} 
{c,d,f} 
{a,c,f} 
{b,c,f} 

Alex Aiken 
Register Allocation 
• Construct an undirected graph 
– A node for each temporary 
– An edge between t1 and t2 if they are live 
simultaneously at some point in the program 
 
• This is the register interference graph (RIG) 
– Two temporaries can be allocated to the same 
register if there is no edge connecting them 
 

Alex Aiken 
Register Allocation 
• For our example: 
• E.g., b and c cannot be in the same register 
• E.g., b and d could be in the same register 
a 
f 
e 
d 
c 
b 

Register Allocation 
A := 1 
B := A * 2 
C := C - B 
A := B + 1 
A < 16 
D := C + 1 
Which of the following pairs of temporaries 
interfere in the code fragment given at right? 
A and B 
B and C 
A and C 
C and D 
1 
2 
3 
4 
5 
6 

Alex Aiken 
Register Allocation 
• Extracts exactly the information needed to 
characterize legal register assignments 
 
• Gives a global (i.e., over the entire flow graph) 
picture of the register requirements 
 
• After RIG construction the register allocation 
algorithm is architecture independent 

