
Generators become exhausted
Generators are iterators
Generator functions are functions that use yield
A generator function is a generator factory
→they return a (new) generator when called
→they can become exhausted (consumed)
This can lead to bugs if you try to iterate twice over a generator
→they cannot be "restarted"

Example
def squares(n):
for i in range(n):
yield i ** 2
sq = squares(5)
→sq is a new generator (iterator)
l = list(sq)
l →[0, 1, 4, 9, 16]
and sq has been exhausted
l = list(sq)
l →[]

Example
This of course can lead to unexpected behavior sometimes…
def squares(n):
for i in range(n):
yield i ** 2
sq = squares(5)
enum1 = enumerate(sq)
next(sq)
→0
next(sq)
→1
list(enum1)
enumerate is lazy →hasn't iterated through sq yet
→[(0,4), (1, 9), (2, 16)]
notice how enumerate started at i=2
and the index value returned by enumerate is 0, not 2

Making an Iterable
This behavior is no different than with any other iterator
As we saw before, the solution is to create an iterable that returns a new iterator every time
class Squares:
def __init__(self, n):
self.n = n
def __iter__(self):
return squares(n)
def squares(n):
for i in range(n):
yield i ** 2
sq = Squares(n)
l1 = list(sq)
l2 = list(sq)
l1 →[0, 1, 4, 9, 16]
l2 →[0, 1, 4, 9, 16]
new instance of 
the generator

Code
Exercises

