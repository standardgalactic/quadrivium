NEW
Pi 2
 projects
inside
The ultimate guide to coding with Python
Learn to use Pythont Program games t Get creative with Pi


Python
The
Welcome to
Python is an incredibly versatile, expansive language which, due to its similarity to everyday 
language, is surprisingly easy to learn even for inexperienced programmers. It has seen a 
huge increase in popularity since the release and rise of the Raspberry Pi, for which Python 
is the officially recognised programming language. In The Python Book, you‚Äôll find plenty 
of creative projects to help you get to grips with the combination of your Raspberry Pi and 
Python‚Äôs powerful functionality, but there are also plenty of tutorials that focus on Python‚Äôs 
effectiveness away from the Raspberry Pi. You‚Äôll learn all about how to code with Python 
from the very beginning with our comprehensive masterclass, then go on to complete 
tutorials to consolidate your skills and become fluent in the language while also improving 
your computing experience. You‚Äôll learn how to make Python work for you with tutorials 
on coding with Django, Flask, Pygame and even more useful third-party applications and 
frameworks. Get ready to become a true Python expert with the wealth of information 
contained within these pages. 


Imagine Publishing Ltd
Richmond House
33 Richmond Hill
Bournemouth
Dorset BH2 6EZ
 +44 (0) 1202 586200
Website: www.imagine-publishing.co.uk
Twitter: @Books_Imagine
Facebook: www.facebook.com/ImagineBookazines
Publishing Director
Aaron Asadi
Head of Design
Ross Andrews
Production Editor
Alex Hoskins
Senior Art Editor
Greg Whitaker
Designer
Perry Wardell-Wicks
Printed by
William Gibbons, 26 Planetary Road, Willenhall, West Midlands, WV13 3XT
Distributed in the UK, Eire & the Rest of the World by
Marketforce, Blue Fin Building, 110 Southwark Street, London, SE1 0SU
Tel 0203 148 3300 www.marketforce.co.uk
Distributed in Australia by 
Network Services (a division of Bauer Media Group), Level 21 Civic Tower, 66-68 Goulburn Street, 
Sydney, New South Wales 2000, Australia Tel +61 2 8667 5288
Disclaimer
The publisher cannot accept responsibility for any unsolicited material lost or damaged in the 
post. All text and layout is the copyright of Imagine Publishing Ltd. Nothing in this bookazine may 
be reproduced in whole or part without the written permission of the publisher. All copyrights are 
recognised and used specifically for the purpose of criticism and review. Although the bookazine has 
endeavoured to ensure all information is correct at time of print, prices and availability may change. 
This bookazine is fully independent and not affiliated in any way with the companies mentioned herein.
The Python Book ¬© 2015 Imagine Publishing Ltd
ISBN 9781785460609
bookazine series
Part of the 
Python
The

1ZUIPOFTTFOUJBMT
26$PEFSPDLQBQFSTDJTTPST
1VUCBTJDDPEJOHJOUPBDUJPO
321SPHSBNBIBOHNBOHBNF
6TF1ZUIPOUPNBLFUIFDMBTTJDHBNF
381MBZQPLFSEJDF
5FTUZPVSMVDLBOEZPVSDPEJOH
44$SFBUFBHSBQIJDBMJOUFSGBDF
"EEJOUFSGBDFUPZPVSQSPKFDUT
50#SJOHHSBQIJDTUPHBNFT
"EEJNBHFTUPTJNQMFHBNFT
56#VJMEBOBQQGPS"OESPJE
.BLFZPVSPXOBQQXJUI,JWZ
62.BLJOHXFCBQQT
6TF1ZUIPOUPDSFBUFPOMJOFBQQT
661ZUIPOUJQT
&TTFOUJBMLOPXMFEHFGPS1ZUIPOVTFST
$POUFOUT
Python
5IF
8(FUTUBSUFE
XJUI1ZUIPO
.BTUFSUIFCBTJDTUIFSJHIUXBZ
8PSLXJUI1ZUIPO
74$SFBUFEZOBNJDUFNQMBUFT
6TF+JOKB'MBTLBOENPSF
78.BLFFYUFOTJPOTGPS9#.$
&OIBODF9#.$XJUIUIJTUVUPSJBM
844DJFOUJ√∂DDPNQVUJOH
(FUUPHSJQTXJUI/VN1Z
88*OTUBOUNFTTBHJOH
(FUDIBUUJOHVTJOH1ZUIPO
943FQMBDFZPVSTIFMM
6TF1ZUIPOGPSZPVSQSJNBSZTIFMM
981ZUIPOGPSTZTUFNBENJOT
)PX1ZUIPOIFMQTTZTUFNBENJOJTUSBUJPO
1024DSBQF8JLJQFEJB
6TF#FBVUJGVM4PVQUPSFBEP√µJOF
65IF1ZUIPO#PPL
74
16FTTFOUJBM
DPNNBOET
5IFDPNNBOETZPVOFFEUPLOPX
88
120
128
$SFBUFXJUI1ZUIPO
108#VJMEUJDUBDUPFXJUI,JWZ
1SPHSBNOPVHIUTBOEDSPTTFT
112$SFBUFUXPTUFQBVUIFOUJDBUJPO
6TF5XJMJPGPSTBGFBVUIFOUJDBUJPO
1165XJUUFST0"VUIQSPDFTT
#VJMETJHOJOHSFRVFTUT
1201SPHSBNB4QBDF
*OWBEFSTDMPOF
.BLFUIFCBTJD1JWBEFSTHBNF
124"EEBOJNBUJPOBOETPVOE
&OIBODFZPVS1JWBEFSTHBNF
128.BLFBWJTVBMOPWFM
1SPHSBNBCPPLTUZMFHBNF

i1ZUIPOJTFYQBOTJWFCVUZPVMMCF
BOFYQFSUCFGPSFZPVLOPXJUw
8FCEFWFMPQNFOU
134%FWFMPQXJUI1ZUIPO
8IZ1ZUIPOJTQFSGFDUGPSUIFXFC
140#VJMEZPVSPXOCMPH
#FHJOEFWFMPQJOHZPVSCMPH
144%FMJWFSDPOUFOUUPZPVSCMPH
"EEDPOUFOUUPZPVSTJUF
148&OIBODFZPVSCMPH
$PNQMFUFZPVSCMPHXJUIBEEPOT
6TF1ZUIPOXJUI1J
1541SPHSBNNJOHJO1ZUIPOPO
3BTQCFSSZ1J
-FBSOIPXUPPQUJNJTFGPS1J
1581SPHSBN.JOFDSBGU1J
1MBZB.JOFDSBGUHBNFPO1J
162#VJMEBO-&%.BUSJY
6TF1JUPDPOUSPMMJHIUTFRVFODFT
1663BTQCFSSZ1JDBSDPNQVUFS
(FUXIFSFZPVSFHPJOHXJUI3BTQCFSSZ1J
50
1ZUIPO
UJQT
66
5IF1ZUIPO#PPL7
166
144
148

8  The Python Book
Get started with Python
Get started
P
ython is a great programming language for 
both beginners and experts. It is designed with 
code readability in mind, making it an excellent 
choice for beginners who are still getting used to 
various programming concepts.
The language is popular and has plenty of libraries 
available, allowing programmers to get a lot done with 
relatively little code.
You can make all kinds of applications in Python: 
you could use the Pygame framework to write 
simple 2D games, you could use the GTK 
libraries to create a windowed application, or you could 
try something a little more ambitious like an app such 
as creating one using Python‚Äôs Bluetooth and Input 
libraries to capture the input from a USB keyboard and 
relay the input events to an Android phone.
For this tutorial we‚Äôre going to be using Python 2.x 
since that is the version that is most likely to be installed 
on your Linux distribution.
In the following tutorials, you‚Äôll learn how to create 
popular games using Python programming. We‚Äôll also 
show you how to add sound and AI to these games.
Always wanted to have a go at 
programming? No more excuses, 
because Python is the perfect way to get started!
Python
with

The Python Book  9
Get started with Python

Get started with Python
10  The Python Book
TIP
If you were using a graphical 
editor such as gedit, then 
you would only have to do 
the last step of making the 
file executable. You should 
only have to mark the file as 
executable once. You can 
freely edit the file once it 
is executable.
Interpreted vs compiled languages
An interpreted language such as Python is one where the source 
code is converted to machine code and then executed each time the 
program runs. This is diff erent from a compiled language such as C, 
where the source code is only converted to machine code once ‚Äì the 
resulting machine code is then executed each time the program runs.
Hello World
Let‚Äôs get stuck in, and what better way than with the 
programmer‚Äôs best friend, the ‚ÄòHello World‚Äô application! Start 
by opening a terminal. Its current working directory will be your 
home directory. It‚Äôs probably a good idea to make a directory for 
the Ô¨Å les we‚Äôll be creating in this tutorial, rather than having them 
loose in your home directory. You can create a directory called 
Python using the command mkdir Python. You‚Äôll then want to 
change into that directory using the command cd Python. 
The next step is to create an empty Ô¨Å le using the command 
‚Äòtouch‚Äô followed by the Ô¨Å lename. Our expert used the command 
touch hello_world.py. The Ô¨Å nal and most important part of 
setting up the Ô¨Å le is making it executable. This allows us to run 
code inside the hello_world.py Ô¨Å le. We do this with the command 
chmod +x hello_world.py. Now that we have our Ô¨Å le set up, we 
can go ahead and open it up in nano, or any text editor of your 
choice. Gedit is a great editor with syntax highlighting support 
that should be available on any distribution. You‚Äôll be able to 
install it using your package manager if you don‚Äôt have it already.
[liam@liam-laptop ~]$ mkdir Python
[liam@liam-laptop ~]$ cd Python/
[liam@liam-laptop Python]$ touch hello_world.py
[liam@liam-laptop Python]$ chmod +x hello_world.py 
[liam@liam-laptop Python]$ nano hello_world.py
Our Hello World program is very simple, it only needs two lines. 
The Ô¨Å rst line begins with a ‚Äòshebang‚Äô (the symbol #! ‚Äì also known 
as a hashbang) followed by the path to the Python interpreter. 
The program loader uses this line to work out what the rest of the 
lines need to be interpreted with. If you‚Äôre running this in an IDE 
like IDLE, you don‚Äôt necessarily need to do this.
The code that is actually read by the Python interpreter is only 
a single line. We‚Äôre passing the value Hello World to the print 
function by placing it in brackets immediately after we‚Äôve called 
the print function. Hello World is enclosed in quotation marks to 
indicate that it is a literal value and should not be interpreted as 
source code. As expected, the print function in Python prints any 
value that gets passed to it from the console.
You can save the changes you‚Äôve just made to the Ô¨Å le in nano 
using the key combination Ctrl+O, followed by Enter. Use Ctrl+X 
to exit nano.
#!/usr/bin/env python2
print(‚ÄúHello World‚Äù)
You can run the Hello World program by preÔ¨Å xing 
its 
Ô¨Å lename 
with 
./ 
 
‚Äì 
in 
this 
case 
you‚Äôd 
type:
 ./hello_world.py.
[liam@liam-laptop Python]$ ./hello_world.py 
Hello World  
Variables and data types
A variable is a name in source code that is associated with an 
area in memory that you can use to store data, which is then 
called upon throughout the code. The data can be one of many 
types, including:
Integer
Stores whole numbers
Float 
Stores decimal numbers 
Boolean
Can have a value of True or False
String
Stores a collection of characters. ‚ÄúHello 
World‚Äù is a string
As well as these main data types, there are sequence types 
(technically, a string is a sequence type but is so commonly used 
we‚Äôve classed it as a main data type):
List 
Contains a collection of data in a speciÔ¨Å c order
Tuple
Contains a collection immutable data in a 
speciÔ¨Å c order
A tuple would be used for something like a co-ordinate, 
containing an x and y value stored as a single variable, whereas 
a list is typically used to store larger collections. The data 
stored in a tuple is immutable because you aren‚Äôt able to 
change values of individual elements in a tuple. However, you 
can do so in a list.
It will also be useful to know about Python‚Äôs dictionary 
type. A dictionary is a mapped data type. It stores data in 
key-value pairs. This means that you access values stored in 
the dictionary using that value‚Äôs corresponding key, which is 
different to how you would do it with a list. In a list, you would 
access an element of the list using that element‚Äôs index (a 
number representing the element‚Äôs position in the list).
Let‚Äôs work on a program we can use to demonstrate how to 
use variables and different data types. It‚Äôs worth noting at 
this point that you don‚Äôt always have to specify data types 
in Python. Feel free to create this Ô¨Å le in any editor you like. 
Everything will work just Ô¨Å ne as long as you remember to make 
the Ô¨Å le executable. We‚Äôre going to call ours variables.py.
‚ÄúA variable is a name 
in source code that is 
associated with an area in 
memory that you can use to 
store data‚Äù

Get started with Python
The following line creates an 
integer variable called hello_int 
with the # value of 21. Notice 
how it doesn‚Äôt need to go in 
quotation marks
You could also create the 
same list in the following way
We might as well create a 
dictionary while we‚Äôre at it.
Notice how we‚Äôve aligned the 
colons below to make the 
code tidy
The same principal is true of 
Boolean values
We create a tuple in the 
following way
And a list in this way
#!/usr/bin/env python2
# We create a variable by writing the name of the variable we want followed
# by an equals sign, which is followed by the value we want to store in the
# variable. For example, the following line creates a variable called
# hello_str, containing the string Hello World.
hello_str = ‚ÄúHello World‚Äù
hello_int = 21
hello_bool = True
hello_tuple = (21, 32)
hello_list = [‚ÄúHello,‚Äù, ‚Äúthis‚Äù, ‚Äúis‚Äù, ‚Äúa‚Äù, ‚Äúlist‚Äù]
# This list now contains 5 strings. Notice that there are no spaces
# between these strings so if you were to join them up so make a sentence
# you‚Äôd have to add a space between each element.
hello_list = list()
hello_list.append(‚ÄúHello,‚Äù)
hello_list.append(‚Äúthis‚Äù)
hello_list.append(‚Äúis‚Äù)
hello_list.append(‚Äúa‚Äù)
hello_list.append(‚Äúlist‚Äù)
# The fi rst line creates an empty list and the following lines use the append
# function of the list type to add elements to the list. This way of using a
# list isn‚Äôt really very useful when working with strings you know of in 
# advance, but it can be useful when working with dynamic data such as user
# input. This list will overwrite the fi rst list without any warning as we
# are using the same variable name as the previous list.
hello_dict = { ‚Äúfi rst_name‚Äù : ‚ÄúLiam‚Äù,
               ‚Äúlast_name‚Äù  : ‚ÄúFraser‚Äù,
               ‚Äúeye_colour‚Äù : ‚ÄúBlue‚Äù }
# Let‚Äôs access some elements inside our collections
# We‚Äôll start by changing the value of the last string in our hello_list and
# add an exclamation mark to the end. The ‚Äúlist‚Äù string is the 5th element
# in the list. However, indexes in Python are zero-based, which means the
# fi rst element has an index of 0. 
print(hello_list[4])
hello_list[4] += ‚Äú!‚Äù
# The above line is the same as
hello_list[4] = hello_list[4] + ‚Äú!‚Äù
print(hello_list[4])
TIP
At this point, it‚Äôs worth 
explaining that any text in 
a Python Ô¨Å le that follows 
a # character will be 
ignored by the interpreter. 
This is so you can write 
comments in your code.
Notice that there will now be 
two exclamation marks when 
we print the element
‚ÄúAny text in a Python file that follows a # 
character will be ignored‚Äù

12  The Python Book
Get started with Python
Indentation in detail
As previously mentioned, the level of indentation 
dictates which statement a block of code belongs 
to. Indentation is mandatory in Python, whereas in 
other languages, sets of braces are used to organise 
code blocks. For this reason, it is essential that you 
use a consistent indentation style. Four spaces 
are typically used to represent a single level of 
indentation in Python. You can use tabs, but tabs are 
not well defined, especially if you happen to open a 
file in more than one editor.
More about a 
Python list
A Python list is similar to an 
array in other languages. A 
list (or tuple) in Python can 
contain data of multiple 
types, which is not usually 
the case with arrays in other 
languages. For this reason, 
we recommend that you 
only store data of the same 
type in a list. This should 
almost always be the case 
anyway due to the nature of 
the way data in a list would 
be processed.
print(str(hello_tuple[0]))
# We can‚Äôt change the value of those elements like we just did with the list
# Notice the use of the str function above to explicitly convert the integer
# value inside the tuple to a string before printing it.
print(hello_dict[‚Äúfi rst_name‚Äù] + ‚Äú ‚Äú + hello_dict[‚Äúlast_name‚Äù] + ‚Äú has ‚Äú +
      hello_dict[‚Äúeye_colour‚Äù] + ‚Äú eyes.‚Äù)
print(‚Äú{0} {1} has {2} eyes.‚Äù.format(hello_dict[‚Äúfi rst_name‚Äù],
                                     hello_dict[‚Äúlast_name‚Äù],
                                     hello_dict[‚Äúeye_colour‚Äù]))
Remember that tuples are 
immutable, although we can 
access the elements of them 
like so
Let‚Äôs create a sentence using the 
data in our hello_dict
A tidier way of doing this 
would be to use Python‚Äôs 
string formatter
Control structures
In programming, a control structure is any kind of statement that 
can change the path that the code execution takes. For example, a 
control structure that decided to end the program if a number was 
less than 5 would look something like this:
#!/usr/bin/env python2
import sys # Used for the sys.exit function
int_condition = 5
if int_condition < 6:
    sys.exit(‚Äúint_condition must be >= 6‚Äù)
else:
    print(‚Äúint_condition was >= 6 - continuing‚Äù)
The path that the code takes will depend on the value of 
the integer int_condition. The code in the ‚Äòif‚Äô block will only be 
executed if the condition is true. The import statement is used 
to load the Python system library; the latter provides the exit 
function, allowing you to exit the program, printing an error 
message. Notice that indentation (in this case four spaces per 
indent) is used to indicate which statement a block of code 
belongs to.
‚ÄòIf‚Äô statements are probably the most commonly used control 
structures. Other control structures include:
‚Ä¢  For statements, which allow you to iterate over items in 
collections, or to repeat a piece of code a certain number 
of times;
‚Ä¢  While statements, a loop that continues while the condition 
is true.
We‚Äôre going to write a program that accepts user input from the 
user to demonstrate how control structures work. We‚Äôre calling it 
construct.py.
The ‚Äòfor‚Äô loop is using a local copy of the current value, which 
means any changes inside the loop won‚Äôt make any changes 
affecting the list. On the other hand however, the ‚Äòwhile‚Äô loop is 
directly accessing elements in the list, so you could change the list 
there should you want to do so. We will talk about variable scope in 
some more detail later on. The output from the above program is 
as follows:
[liam@liam-laptop Python]$ ./construct.py 
How many integers? acd
You must enter an integer
[liam@liam-laptop Python]$ ./construct.py 
How many integers? 3
Please enter integer 1: t
You must enter an integer
Please enter integer 1: 5
Please enter integer 2: 2
Please enter integer 3: 6
Using a for loop
5
2
6
Using a while loop
5
2
6
‚ÄúThe ‚Äòfor‚Äò loop uses 
a local copy, so 
changes in the loop 
won‚Äôt affect the list‚Äù

The Python Book  13
The number of integers we 
want in the list
A list to store the integers
These are used to keep track 
of how many integers we 
currently have
If the above succeeds then isint 
will be set to true: isint =True
#!/usr/bin/env python2
# We‚Äôre going to write a program that will ask the user to input an arbitrary
# number of integers, store them in a collection, and then demonstrate how the
# collection would be used with various control structures.
import sys # Used for the sys.exit function
target_int = raw_input(‚ÄúHow many integers? ‚Äú)
# By now, the variable target_int contains a string representation of 
# whatever the user typed. We need to try and convert that to an integer but 
# be ready to # deal with the error if it‚Äôs not. Otherwise the program will 
# crash.
try:
    target_int = int(target_int)
except ValueError:
    sys.exit(‚ÄúYou must enter an integer‚Äù)
ints = list()
count = 0
# Keep asking for an integer until we have the required number
while count < target_int:
    new_int = raw_input(‚ÄúPlease enter integer {0}: ‚Äú.format(count + 1))
    isint = False
    try:
        new_int = int(new_int)
    except:
        print(‚ÄúYou must enter an integer‚Äù)
    # Only carry on if we have an integer. If not, we‚Äôll loop again
     # Notice below I use ==, which is diff erent from =. The single equals is an 
# assignment operator whereas the double equals is a comparison operator.
    if isint == True:
        # Add the integer to the collection
        ints.append(new_int)
        # Increment the count by 1
        count += 1
print(‚ÄúUsing a for loop‚Äù)
for value in ints:
    print(str(value))
By now, the user has given up or 
we have a list fi lled with integers. 
We can  loop through these in a 
couple of ways. The fi rst is with 
a for loop

14  The Python Book
Get started with Python
#!/usr/bin/env python2
# Below is a function called modify_string, which accepts a variable  
# that will be called original in the scope of the function. Anything  
# indented with 4 spaces under the function definition is in the  
# scope.
def modify_string(original):
    original += ‚Äú that has been modified.‚Äù
    # At the moment, only the local copy of this string has been modified
def modify_string_return(original):
    original += ‚Äú that has been modified.‚Äù
    # However, we can return our local copy to the caller. The function
    # ends as soon as the return statement is used, regardless of where it
    # is in the function.
    return original
test_string = ‚ÄúThis is a test string‚Äù
modify_string(test_string)
print(test_string)
test_string = modify_string_return(test_string)
print(test_string)
# The function‚Äôs return value is stored in the variable test string,
# overwriting the original and therefore changing the value that is
# printed.
We are now outside of 
the scope of the modify_
string function, as we 
have reduced the level  
of indentation
The test string won‚Äôt be 
changed in this code
However, we can call the 
function like this
TIP
You can deÔ¨Åne defaults 
for variables if you want 
to be able to call the 
function without passing 
any variables through at 
all. You do this by putting 
an equals sign after 
the variable name. For 
example, you can do:
def modify_string 
(original=‚Äù Default 
String‚Äù)
# Or with a while loop:
print(‚ÄúUsing a while loop‚Äù)
# We already have the total above, but knowing the len function is very  
# useful.
total = len(ints)
count = 0
while count < total:
    print(str(ints[count]))
    count += 1
Functions and variable scope
Functions are used in programming to break processes down into smaller 
chunks. This often makes code much easier to read. Functions can also be 
reusable if designed in a certain way. Functions can have variables passed 
to them. Variables in Python are always passed by value, which means that 
a copy of the variable is passed to the function that is only valid in the scope 
of the function. Any changes made to the original variable inside the function 
will be discarded. However, functions can also return values, so this isn‚Äôt 
an issue. Functions are deÔ¨Åned with the keyword def, followed by the 
name of the function. Any variables that can be passed through are put in 
brackets following the function‚Äôs name. Multiple variables are separated by 
commas. The names given to the variables in these brackets are the ones 
that they will have in the scope of the function, regardless of what 
the variable that‚Äôs passed to the function is called. Let‚Äôs see this  
in action.
The output from the program opposite is as follows:
‚ÄúFunctions are used in 
programming to break 
processes down in‚Äù

(FUTUBSUFEXJUI1ZUIPO
[liam@liam-laptop Python]$ ./functions_and_scope.py 
This is a test string
This is a test string that has been modified.
Scope is an important thing to get the hang of, otherwise it can get you 
into some bad habits. Let‚Äôs write a quick program to demonstrate this. It‚Äôs 
going to have a Boolean variable called cont, which will decide if a number 
will be assigned to a variable in an if statement. However, the variable 
hasn‚Äôt been deÔ¨Å ned anywhere apart from in the scope of the if statement. 
We‚Äôll Ô¨Å nish off by trying to print the variable.
#!/usr/bin/env python2
cont = False
if cont:
    var = 1234
print(var)
In the section of code above, Python will convert the integer to a string 
before printing it. However, it‚Äôs always a good idea to explicitly convert 
things to strings ‚Äì especially when it comes to concatenating strings 
together. If you try to use the + operator on a string and an integer, there 
will be an error because it‚Äôs not explicitly clear what needs to happen. 
The + operator would usually add two integers together. Having said that, 
Python‚Äôs string formatter that we demonstrated earlier is a cleaner way of 
doing that. Can you see the problem? Var has only been deÔ¨Å ned in the scope 
of the if statement. This means that we get a very nasty error when we try to 
access var.
[liam@liam-laptop Python]$ ./scope.py 
Traceback (most recent call last):
  File ≈é./scope.py≈è, line 8, in <module>
    print var
NameError: name ƒÇvarƒÅ is not defined
If cont is set to True, then the variable will be created and we can access 
it just Ô¨Å ne. However, this is a bad way to do things. The correct way is to 
initialise the variable outside of the scope of the if statement.
#!/usr/bin/env python2
cont = False
var = 0
if cont:
    var = 1234
if var != 0:
    print(var)
The variable var is deÔ¨Å ned in a wider scope than the if statement, and 
can still be accessed by the if statement. Any changes made to var inside 
the if statement are changing the variable deÔ¨Å ned in the larger scope. 
This example doesn‚Äôt really do anything useful apart from illustrate the 
potential problem, but the worst-case scenario has gone from the program 
crashing to printing a zero. Even that doesn‚Äôt happen because we‚Äôve added 
an extra construct to test the value of var before printing it.
Coding style
It‚Äôs worth taking a little time to talk about coding style. It‚Äôs simple to write 
tidy code. The key is consistency. For example, you should always name 
your variables in the same manner. It doesn‚Äôt matter if you want to use 
camelCase or use underscores as we have. One crucial thing is to use 
self-documenting identiÔ¨Å ers for variables. You shouldn‚Äôt have to guess 
what a variable does. The other thing that goes with this is to always 
comment your code. This will help anyone else who reads your code, 
and yourself in the future. It‚Äôs also useful to put a brief summary at 
the top of a code Ô¨Å le describing what the application does, or a part of 
the application if it‚Äôs made up of multiple Ô¨Å les.
Summary
This article should have introduced you to the basics of programming 
in Python. Hopefully you are getting used to the syntax, indentation 
and general look and feel of a Python program. The next step is 
to learn how to come up with a problem that you want to solve, and 
break it down into small enough steps that you can implement in a 
programming language.
Google, or any other search engine, is very helpful. If you are stuck 
with anything, or have an error message you can‚Äôt work out how to 
Ô¨Å x, stick it into Google and you should be a lot closer to solving your 
problem. For example, if we Google ‚Äòplay mp3 Ô¨Å le with python‚Äô, the 
Ô¨Å rst link takes us to a Stack OverÔ¨Ç ow thread with a bunch of useful 
replies. Don‚Äôt be afraid to get stuck in ‚Äì the real fun of programming is 
solving problems one manageable chunk at a time.
Happy programming!
Comparison operators
The common comparison operators available in Python include:
<
strictly less than
<=
less than or equal
>
strictly greater than
>=
greater than or equal
==
equal
!=
not equal

Python has a massive environment of extra modules 
that can provide functionality in hundreds of 
different disciplines. However, every programming 
language has a core set of functionality that everyone 
should know in order to get useful work done. Python 
is no different in this regard. Here, we will look at 
50 commands that we consider to be essential to 
programming in Python. Others may pick a slightly 
different set, but this list contains the best of the best. 
We will cover all of the basic commands, from 
importing extra modules at the beginning of a program 
to returning values to the calling environment at the 
end. We will also be looking at some commands that 
are useful in learning about the current session within 
Python, like the current list of variables that have been 
deÔ¨Åned and how memory is being used.
Because the Python environment involves using a lot 
of extra modules, we will also look at a few commands 
that are strictly outside of Python. We will see how to 
install external modules and how to manage multiple 
environments for different development projects. 
Since this is going to be a list of commands, there is the 
assumption that you already know the basics of how 
to use loops and conditional structures. This piece is 
designed to help you remember commands that you 
know you‚Äôve seen before, and hopefully introduce you 
to a few that you may not have seen yet. 
Although we‚Äôve done our best to pack everything 
you could ever need into 50 tips, Python is such an 
expansive language that some commands will have 
been left out. Make some time to learn about the ones 
that we didn‚Äôt cover here, once you‚Äôve mastered these.
PYTHON
ESSENTIAL
COMMANDS
Python is known as a very 
dense language, with lots of 
modules capable of doing 
almost anything. Here, 
we will look at the core 
essentials that everyone 
needs to know
16  The Python Book

50 Python commands
Importing modules
The strength of Python is its ability to be 
extended through modules. The Ô¨Å rst step in many 
programs is to import those modules that you need. 
The simplest import statement is to just call ‚Äòimport 
modulename‚Äô. In this case, those functions and 
objects provided are not in the general namespace. 
You need to call them using the complete name 
(modulename.methodname). You can shorten the 
‚Äòmodulename‚Äô part with the command ‚Äòimport 
modulename as mn‚Äô. You can skip this issue 
completely with the command ‚Äòfrom modulename 
import *‚Äô to import everything from the given module. 
Then you can call those provided capabilities directly. 
If you only need a few of the provided items, you can 
import them selectively by replacing the ‚Äò*‚Äô with the 
method or object names.
Evaluating code
Sometimes, you may have chunks of 
code that are put together programmatically. If 
these pieces of code are put together as a string, 
you can execute the result with the command 
‚Äòeval(‚Äúcode_string‚Äù)‚Äô. Any syntax errors within 
the code string are reported as exceptions. By 
default, this code is executed within the current 
session, using the current globals and locals 
dictionaries. The ‚Äòeval‚Äô command can also take 
two other optional parameters, where you can 
provide a different set of dictionaries for the 
globals and locals. If there is only one additional 
parameter, then it is assumed to be a globals 
dictionary. You can optionally hand in a code 
object that is created with the compile command 
instead of the code string. The return value of this 
command is None.
An enhanced shell
The default interactive shell is provided 
through the command ‚Äòpython‚Äô, but is 
rather limited. An enhanced shell is provided by 
the command ‚Äòipython‚Äô. It provides a lot of extra 
functionality to the code developer. A thorough 
history system is available, giving you access to 
not only commands from the current session, 
but also from previous sessions. There are also 
magic commands that provide enhanced ways of 
interacting with the current Python session. For 
more complex interactions, you can create and use 
macros. You can also easily peek into the memory 
of the Python session and decompile Python code. 
You can even create proÔ¨Å les that allow you to handle 
initialisation steps that you may need to do every time 
you use iPython. 
Installing new modules
While most of the commands we are looking at are Python commands 
that are to be executed within a Python session, there are a few essential 
commands that need to be executed outside of Python. The first of these is pip. 
Installing a module involves downloading the source code, and compiling any included 
external code. Luckily, there is a repository of hundreds of Python modules available 
at http://pypi.python.org. Instead of doing everything manually, you can install a 
new module by using the command ‚Äòpip install modulename‚Äô. This command will 
also do a dependency check and install any missing modules before installing the 
one you requested. You may need administrator rights if you want this new module 
installed in the global library for your computer. On a Linux machine, you would 
simply run the pip command with sudo. Otherwise, you can install it to your 
personal library directory by adding the command line option ‚Äò‚Äîuser‚Äô.
‚ÄúEvery programming language out there has a 
core set of functionality that everyone should 
know in order to get useful work done. Python is 
no different‚Äù
01
Executing a script
Importing a module does run the code 
within the module Ô¨Å le, but does it through the 
module maintenance code within the Python 
engine. This maintenance code also deals with 
running initialising code. If you only wish to 
take a Python script and execute the raw code 
within the current session, you can use the 
‚ÄòexecÔ¨Å le(‚ÄúÔ¨Å lename.py‚Äù)‚Äô command, where the 
main option is a string containing the Python Ô¨Å le 
to load and execute. By default, any deÔ¨Å nitions 
are loaded into the locals and globals of the 
current session. You can optionally include 
two extra parameters the execÔ¨Å le command. 
These two options are both dictionaries, one 
for a different set of locals and a different set of 
globals. If you only hand in one dictionary, it is 
assumed to be a globals dictionary. The return 
value of this command is None.
04
Reloading modules
When a module is Ô¨Å rst imported, any initialisation functions are run at that time. This may involve 
creating data objects, or initiating connections. But, this is only done the Ô¨Å rst time within a given session. 
Importing the same module again won‚Äôt re-execute any of the initialisation code. If you want to have this 
code re-run, you need to use the reload command. The format is ‚Äòreload(modulename)‚Äô. Something to keep 
in mind is that the dictionary from the previous import isn‚Äôt dumped, but only written over. This means that 
any deÔ¨Å nitions that have changed between the import and the reload are updated correctly. But if you 
delete a deÔ¨Å nition, the old one will stick around and still be accessible. There may be other side effects, so 
always use with caution.
02
06
05
03
The Python Book  17

18  The Python Book
Reductions
In 
many 
calculations, 
one 
of 
the 
computations you need to do is a reduction 
operation. This is where you take some list of values 
and reduce it down to a single value. In Python, you 
can use the command ‚Äòreduce(function, iterable)‚Äô to 
apply the reduction function to each pair of elements 
in the list. For example, if you apply the summation 
reduction operation to the list of the Ô¨Å rst Ô¨Å ve 
integers, you would get the result ((((1+2)+3)+4)+5). 
You can optionally add a third parameter to act as an 
initialisation term. It is loaded before any elements 
from the iterable, and is returned as a default if the 
iterable is actually empty. You can use a lambda 
function as the function parameter to reduce to keep 
your code as tight as possible. In this case, remember 
that it should only take two input parameters.
Virtualenvs
Because of the potential complexity of 
the Python environment, it is sometimes best to 
set up a clean environment within which to install 
only the modules you need for a given project. In 
this case, you can use the virtualenv command 
to initialise such an environment. If you create 
a directory named ‚ÄòENV‚Äô, you can create a new 
environment with the command ‚Äòvirtualenv 
ENV‚Äô. This will create the subdirectories bin, lib 
and include, and populate them with an initial 
environment. You can then start using this new 
environment by sourcing the script ‚ÄòENV/bin/
activate‚Äô, which will change several environment 
variables, such as the PATH. When you are done, 
you can source the script ‚ÄòENV/bin/deactivate‚Äô 
to reset your shell‚Äôs environment back to its 
previous condition. In this way, you can have 
environments that only have the modules you 
need for a given set of tasks.
Mapping functions
A common task that is done in modern 
programs is to map a given computation 
to an entire list of elements. Python provides the 
command ‚Äòmap()‚Äô to do just this. Map returns a list of 
the results of the function applied to each element of 
an iterable object. Map can actually take more than 
one function and more than one iterable object. If it 
is given more than one function, then a list of tuples 
is returned, with each element of the tuple containing 
the results from each function. If there is more than 
one iterable handed in, then map assumes that the 
functions take more than one input parameter, so 
it will take them from the given iterables. This has 
the implicit assumption that the iterables are all of 
the same size, and that they are all necessary as 
parameters for the given function.
Loops
While not strictly commands, everyone needs 
to know how to deal with loops. The two main 
types of loops are a fixed number of iterations loop (for) and 
a conditional loop (while). In a for loop, you iterate over some 
sequence of values, pulling them off the list one at a time 
and putting them in a temporary variable. You continue until 
either you have processed every element or you have hit a 
break command. In a while loop, you continue going through 
the loop as long as some test expression evaluates to True. 
While loops can also be exited early by using the break 
command, you can also skip pieces of code within either 
loop by using a continue command to selectively stop this 
current iteration and move on to the next one.
‚ÄúWhile not strictly commands, everyone needs to 
know how to deal with loops. The two main types 
of loops are a fixed number of iterations loop (for) 
and a conditional loop (while)‚Äù
12
Asserting values
At some point, we all need to debug 
some piece of code we are trying to write. One 
of the tools useful in this is the concept of an 
assertion. The assert command takes a Python 
expression and checks to see if it is true. If so, 
then execution continues as normal. If it is not 
true, then an AssertionError is raised. This way, 
you can check to make sure that invariants 
within your code stay invariant. By doing so, 
you can check assumptions made within your 
code. You can optionally include a second 
parameter to the assert command. This second 
parameter is Python expression that is executed 
if the assertion fails. Usually, this is some type of 
detailed error message that gets printed out. Or, 
you may want to include cleanup code that tries 
to recover from the failed assertion.
07
Filtering
Where the command map returns a result for every element in an iterable, Ô¨Å lter only returns a 
result if the function returns a True value. This means that you can create a new list of elements where 
only the elements that satisfy some condition are used. As an example, if your function checked that 
the values were numbers between 0 and 10, then it would create a new list with no negative numbers 
and no numbers above 10. This could be accomplished with a for loop, but this method is much 
cleaner. If the function provided to Ô¨Å lter is ‚ÄòNone‚Äô, then it is assumed to be the identity function. This 
means that only those elements that evaluate to True are returned as part of the new list. There are 
iterable versions of Ô¨Å lter available in the itertools module.
11
09
08
10

The Python Book  19
50 Python commands
Enumerating
Sometimes, we need to label the elements 
that reside within an iterable object with their 
indices so that they can be processed at some later 
point. You could do this by explicitly looping through 
each of the elements and building an enumerated 
list. The enumerate command does this in one line. 
It takes an iterable object and creates a list of tuples 
as the result. Each tuple has the 0-based index of 
the element, along with the element itself. You can 
optionally start the indexing from some other value 
by including an optional second parameter. As an 
example, you could enumerate a list of names with 
the command ‚Äòlist(enumerate(names, start=1))‚Äô. In 
this example, we decided to start the indexing at 1 
instead of 0. 
Casting
Variables in Python don‚Äôt have any type 
information, and so can be used to store 
any type of object. The actual data, however, is of 
one type or another. Many operators, like addition, 
assume that the input values are of the same type. 
Very often, the operator you are using is smart 
enough to make the type of conversion that is 
needed. If you have the need to explicitly convert 
your data from one type to another, there are a class 
of functions that can be used to do this conversion 
process. The ones you are most likely to use is ‚Äòabs‚Äô, 
‚Äòbin‚Äô, ‚Äòbool‚Äô, ‚Äòchr‚Äô, ‚Äòcomplex‚Äô, ‚ÄòÔ¨Ç oat‚Äô, ‚Äòhex‚Äô, ‚Äòint‚Äô, ‚Äòlong‚Äô, 
‚Äòoct‚Äô, and ‚Äòstr‚Äô. For the number-based conversion 
functions, there is an order of precedence where 
some types are a subset of others. For example, 
integers are ‚Äúlower‚Äù than Ô¨Ç oats. When converting 
up, no changes in the ultimate value should happen. 
When converting down, usually some amount of 
information is lost. For example, when converting 
from Ô¨Ç oat to integer, Python truncates the number 
towards zero.
14
15
How true is a list?
In some cases, you may have collected a number of elements within a list that can be evaluated 
to True or False. For example, maybe you ran a number of possibilities through your computation and 
have created a list of which ones passed. You can use the command ‚Äòany(list)‚Äô to check to see whether 
any of the elements within your list are true. If you need to check whether all of the elements are True, 
you can use the command ‚Äòall(list)‚Äô. Both of these commands return a True if the relevant condition is 
satisÔ¨Å ed, and a False if not. They do behave differently if the iterable object is empty, however. The 
command ‚Äòall‚Äô returns a True if the iterable is empty, whereas the command ‚Äòany‚Äô returns a False when 
given any empty iterable.
13
What is this?
Everything in Python is an object. You can 
check to see what class this object is an instance 
of with the command ‚Äòisinstance(object, class)‚Äô. 
This command returns a Boolean value.
16
Is it a subclass?
The command ‚Äòissubclass(class1, class2)‚Äô 
checks to see if class1 is a subclass of class2. If 
class1 and class2 are the same, this is returned 
as True.
17
Global objects
You can get a dictionary of the global 
symbol table for the current module with the 
command ‚Äòglobals()‚Äô.
18
Local objects
You can access an updated dictionary 
of the current local symbol table by using the 
command ‚Äòlocals()‚Äô.
19
Variables
The command ‚Äòvars(dict)‚Äô returns writeable 
elements for an object. If you use ‚Äòvars()‚Äô, it 
behaves like ‚Äòlocals()‚Äô.
20
Making a global
A list of names can be interpreted as 
globals for the entire code block with the 
command ‚Äòglobal names‚Äô.
21
Nonlocals
In Python 3.X, you can access names from 
the nearest enclosing scope with the command 
‚Äònonlocal names‚Äô and bind it to the local scope.
22
Raising an exception
When you identify an error condition, 
you can use the ‚Äòraise‚Äô command to throw up an 
exception. You can include an exception type and 
a value.
23
Dealing with an exception
Exceptions can be caught in a try-except 
construction. If the code in the try block raises an 
exception, the code in the except block gets run.
24
Static methods
You can create a statis method, similar 
to that in Java or C++, with the command 
‚Äòstaticmethod(function_name)‚Äô.
25

20  The Python Book
Printing
The most direct way of getting output 
to the user is with the print command. 
This will send text out to the console window. If you 
are using version 2.X of Python, there are a couple 
of ways you can use the print command. The most 
common way had been simply call it as ‚Äòprint 
‚ÄúSome text‚Äù‚Äô. You can also use print with the same 
syntax that you would use for any other function. 
So, the above example would look like ‚Äòprint(‚ÄúSome 
text‚Äù)‚Äô. This is the only form available in version 3.X. 
If you use the function syntax, you can add extra 
parameters that give you Ô¨Å ner control over this 
output. For example, you can give the parameter 
‚ÄòÔ¨Å le=myÔ¨Å le.txt‚Äô and get the output from the print 
command being dumped into the given text Ô¨Å le. 
It also will accept any object that has some string 
representation available.
With modules
The ‚Äòwith‚Äô command provides the ability to 
wrap a code block with methods deÔ¨Å ned 
by a context manager. This can help clean up code 
and make it easier to read what a given piece of 
code is supposed to be doing months later. A classic 
example of using ‚Äòwith‚Äô is when dealing with Ô¨Å les. 
You could use something like ‚Äòwith open(‚ÄúmyÔ¨Å le.
txt‚Äù, ‚Äúr‚Äù) as f:‚Äô. This will open the Ô¨Å le and prepare it for 
reading. You can then read the Ô¨Å le in the code block 
with ‚Äòdata=f.read()‚Äô. The best part of doing this is that 
the Ô¨Å le will automatically be closed when the code 
block is exited, regardless of the reason. So, even if 
the code block throws an exception, you don‚Äôt need to 
worry about closing the Ô¨Å le as part of your exception 
handler. If you have a more complicated ‚Äòwith‚Äô 
example, you can create a context manager class to 
help out.
32
31
Memoryview
Sometimes, you need to access the raw data of some object, usually as a buffer of bytes. You 
can copy this data and put it into a bytearray, for example. But this means that you will be using extra 
memory, and this might not be an option for large objects. The command ‚Äòmemoryview(object_name)‚Äô 
wraps the object handed in to the command and provides an interface to the raw bytes. It gives access 
to these bytes an element at a time. In many cases, elements are the size of one byte. But, depending 
on the object details, you could end up with elements that are larger than that. You can Ô¨Å nd out the size 
of an element in bytes with the property ‚Äòitemsize‚Äô. Once you have your memory view created, you can 
access the individual elements as you would get elements from a list (mem_view[1], for example).
33
‚ÄúA classic example of using ‚Äòwith‚Äô is when dealing 
with files. The best part of doing this is that the 
file will automatically be closed when the code 
block is exited, regardless of the reason‚Äù
Ranges
You may need a list of numbers, maybe in 
a ‚Äòfor‚Äô loop. The command ‚Äòrange()‚Äô can create an 
iterable list of integers. With one parameter, it 
goes from 0 to the given number. You can provide 
an optional start number, as well as a step size. 
Negative numbers count down.
Xranges
One problem with ranges is that all of the 
elements need to be calculated up front and 
stored in memory. The command ‚Äòxrange()‚Äô takes 
the same parameters and provides the same 
result, but only calculates the next element as it 
is needed.
27
Iterators
Iteration is a very Pythonic way of doing 
things. For objects which are not intrinsically 
iterable, you can use the command ‚Äòiter(object_
name)‚Äô to essentially wrap your object and provide 
an iterable interface for use with other functions 
and operators.
28
Sorted lists
You can use the command ‚Äòsorted(list1)‚Äô 
to sort the elements of a list. You can give it 
a custom comparison function, and for more 
complex elements you can include a key function 
that pulls out a ranking property from each 
element for comparison.
29
Summing items
Above, we saw the general reduction 
function reduce. A speciÔ¨Å c type of reduction 
operation, summation, is common enough to 
warrant the inclusion of a special case, the 
command ‚Äòsum(iterable_object)‚Äô. You can include 
a second parameter here that will provide a 
starting value.
30
26

The Python Book  21
50 Python commands
Threads
You can do multiple threads of execution 
within Python. The ‚Äòthread()‚Äô command can create a 
new thread of execution for you. It follows the same 
techniques as those for POSIX threads. When you Ô¨Å rst 
create a thread, you need to hand in a function name, 
along with whatever parameters said function needs. 
One thing to keep in mind is that these threads behave 
just like POSIX threads. This means that almost 
everything is the responsibility of the programmer. You 
need to handle mutex locks (with the methods ‚Äòacquire‚Äô 
and ‚Äòrelease‚Äô), as well as create the original mutexes 
with the method ‚Äòallocate_lock‚Äô. When you are done, 
you need to ‚Äòexit‚Äô the thread to ensure that it is properly 
cleaned up and no resources get left behind. You also 
have Ô¨Å ne-grained control over the threads, being able 
to set things like the stack size for new threads.
Shelving data
While pickling allows you save data and 
reload it, sometimes you need more structured 
object permanence in your Python session. With the 
shelve module, you can create an object store where 
essentially anything that can be pickled can be stored 
there. The backend of the storage on the drive can be 
handled by one of several systems, such as dbm or 
gdbm. Once you have opened a shelf, you can read and 
write to it using key value pairs. When you are done, you 
need to be sure to explicitly close the shelf so that it is 
synchronised with the Ô¨Å le storage. Because of the way 
the data may be stored in the backing database, it is 
best to not open the relevant Ô¨Å les outside of the shelve 
module in Python. You can also open the shelf with 
writeback set to True. If so, you can explicitly call the 
sync method to write out cached changes.
Pickling data
There are a few different ways of 
serialising memory when you need to checkpoint 
results to disk. One of these is called pickling. 
Pickle is actually a complete module, not just a 
single command. To store data on to the hard 
drive, you can use the dump method to write 
the data out. When you want to reload the same 
data at some other point in the future, you can 
use the load method to read the data in and 
unpickle it. One issue with pickle is its speed, or 
lack of it. There is a second module, cPickle, that 
provides the same basic functionality. But, since 
it is written in C, it can be as much as 1000 times 
faster. One thing to be aware of is that pickle does 
not store any class information for an object, 
but only its instance information. This means 
that when you unpickle the object, it may have 
different methods and attributes if the class 
deÔ¨Å nition has changed in the interim.
Weak references
You sometimes need to have a reference 
to an object, but still be able to destroy it if 
needed. A weak reference is one which can 
be ignored by the garbage collector. If the only 
references left to n object are weak references, 
then the garbage collector is allowed to destroy 
that object and reclaim the space for other 
uses. This is useful in cases where you have 
caches or mappings of large datasets that 
don‚Äôt necessarily have to stay in memory. If an 
object that is weakly referenced ends up being 
destroyed and you try to access it, it will appear 
as a None. You can test for this condition and 
then reload the data if you decide that this is a 
necessary step.
Yielding
In many cases, a function may need to 
yield the context of execution to some other 
function. This is the case with generators. The preferred 
method for a generator is that it will only calculate the 
next value when it is requested through the method 
‚Äònext()‚Äô. The command ‚Äòyield‚Äô saves the current state of 
the generator function, and return execution control 
to the calling function. In this way, the saved state of 
the generator is reloaded and the generator picks up 
where it left off in order to calculate the next requested 
value. In this way, you only need to have enough memory 
available to store the bare minimum to calculate the 
next needed value, rather than having to store all of the 
possible values in memory all at once.
39
38
Files
When dealing with Ô¨Å les, you need to create a Ô¨Å le object to interact with it. The Ô¨Å le command takes 
a string with the Ô¨Å le name and location and creates a Ô¨Å le object instance. You can then call the Ô¨Å le object 
methods like ‚Äòopen‚Äô, ‚Äòread‚Äô and ‚Äòclose‚Äô, to get data out of the Ô¨Å le. If you are doing Ô¨Å le processing, you can 
also use the ‚Äòreadline‚Äô method. When opening a Ô¨Å le, there is an explicit ‚Äòopen()‚Äô command to simplify the 
process. It takes a string with the Ô¨Å le name, and an optional parameter that is a string which deÔ¨Å nes the 
mode. The default is to open the Ô¨Å le as read-only (‚Äòr‚Äô). You can also open it for writing (‚Äòw‚Äô) and appending 
(‚Äòa‚Äô). After opening the Ô¨Å le, a Ô¨Å le object is returned so that you can further interact with it. You can then read 
it, write to it, and Ô¨Å nally close it.
34
37
36
35

22  The Python Book
50 Python commands
Slices
While not truly a command, slices are 
too important a concept not to mention in this 
list of essential commands. Indexing elements 
in data structures, like lists, is one of the most 
common things done in Python. You can select a 
single element by giving a single index value. More 
interestingly, you can select a range of elements by 
giving a start index and an end index, separated by 
a colon. This gets returned as a new list that you can 
save in a new variable name. You can even change 
the step size, allowing you to skip some number of 
elements. So, you could grab every odd element from 
the list ‚Äòa‚Äô with the slice ‚Äòa[1::2]‚Äô. This starts at index 1, 
continues until the end, and steps through the index 
values 2 at a time. Slices can be given negative index 
values. If you do, then they start from the end of the 
list and count backwards.
43
Inputting data
Sometimes, you need to collect input 
from an end user. The command ‚Äòinput()‚Äô can 
take a prompt string to display to the user, and 
then wait for the user to type a response. Once 
the user is done typing and hits the enter key, the 
text is returned to your program. If the readline 
module was loaded before calling input, then 
you will have enhanced line editing and history 
functionality. This command passes the text 
through eval Ô¨Å rst, and so may cause uncaught 
errors. If you have any doubts, you can use the 
command ‚Äòraw_input()‚Äô to skip this problem. This 
command simply returns the unchanged string 
inputted by the user. Again, you can use the 
readline module to get enhanced line editing.
40
Comparing objects
There are several ways to compare objects within Python, with several caveats. The Ô¨Å rst is that 
you can test two things between objects: equality and identity. If you are testing identity, you are testing 
to see if two names actually refer to the same instance object. This can be done with the command 
‚Äòcmp(obj1, obj2)‚Äô. You can also test this condition by using the ‚Äòis‚Äô keyword. For example, ‚Äòobj1 is obj2‚Äô. If 
you are testing for equality, you are testing to see whether the values in the objects referred to by the 
two names are equal. This test is handled by the operator ‚Äò==‚Äô, as in ‚Äòobj1 == obj2‚Äô. Testing for equality 
can become complex for more complicated objects.
42
Internal variables
For people coming from other programming languages, there is a concept of having certain variables 
or methods be only available internally within an object. In Python, there is no such concept. All elements of an 
object are accessible. There is a style rule, however, that can mimic this type of behaviour. Any names that start 
with an underscore are expected to be treated as if they were internal names and to be kept as private to the 
object. They are not hidden, however, and there is no explicit protection for these variables or methods. It is up to 
the programmer to honour the intention from the author the class and not alter any of these internal names. You 
are free to make these types of changes if it becomes necessary, though.
41

The Python Book  23
50 Python commands
‚ÄúPython is an interpreted language, which means 
that the source code that you write needs to be 
compiled into a byte code format. This byte code 
then gets fed into the actual Python engine‚Äù
Lambda expressions
Since objects, and the names that point to them, are truly different things, you can have objects 
that have no references to them. One example of this is the lambda expression. With this, you can create 
an anonymous function. This allows you use functional programming techniques within Python. The 
format is the keyword ‚Äòlambda‚Äô, followed by a parameter list, then a colon and the function code. For 
example, you could build your own function to square a number with ‚Äòlambda x: x*x‚Äô. You can then have a 
function that can programmatically create new functions and return them to the calling code. With this 
capability, you can create function generators to have self-modifying programs. The only limitation is 
that they are limited to a single expression, so you can‚Äôt generate very complex functions.
44
__del__ method
When an instance object is about to be 
destroyed, the __del__ method is called. This 
gives you the chance to do any kind of cleanup 
that may be required. This might be closing Ô¨Å les, 
or disconnecting network connections. After this 
code is completed, the object is Ô¨Å nally destroyed 
and resources are freed.
47
Return values
Functions may need to return some value 
to the calling function. Because essentially no 
name has a type, this includes functions. So 
functions can use the ‚Äòreturn‚Äô command to return 
any object to the caller.
49
String concatenation
We will Ô¨Å nish with what most lists start 
with ‚Äì string concatenation. The easiest way to 
build up strings is to use the ‚Äò+‚Äô operator. If you 
want to include other items, like numbers, you 
can use the ‚Äòstr()‚Äô casting function to convert it to 
a string object.
50
Exiting your program
There are two pseudo-commands 
available to exit from the Python interpreter: 
‚Äòexit()‚Äô and quit()‚Äô. They both take an optional 
parameter which sets the exit code for the 
process. If you want to exit from a script, you are 
better off using the exit function from the sys 
module (‚Äòsys.exit(exit_code)‚Äô.
48
__init__ method
When you create a new class, you can 
include a private initialisation method that 
gets called when a new instance of the class is 
created. This method is useful when the new 
object instance needs some data loaded in the 
new object.
46
Compiling
code objects
Python is an interpreted 
language, which means that the source 
code that you write needs to be compiled 
into a byte code format. This byte code 
then gets fed into the actual Python engine 
to step through the instructions. Within your program, you may 
have the need to take control over the process of converting 
code to byte code and running the results. Maybe you wish to 
build your own REPL. The command ‚Äòcompile()‚Äô takes a string 
object that contains a collection of Python code, and returns 
an object that represents a byte code translation of this code. This 
new object can then be handed in to either ‚Äòeval()‚Äô or ‚Äòexec()‚Äô to be actually 
run. You can use the parameter ‚Äòmode=‚Äô to tell compile what kind of code is being 
compiled. The ‚Äòsingle‚Äô mode is a single statement, ‚Äòeval‚Äô is a single expression and 
‚Äòexec‚Äô is a whole code block.
45

Essentials
245IF1ZUIPO#PPL
44
Python
26$PEFSPDLQBQFSTDJTTPST
1VUCBTJDDPEJOHJOUPBDUJPO
321SPHSBNBIBOHNBOHBNF
6TF1ZUIPOUPNBLFUIFDMBTTJDHBNF
381MBZQPLFSEJDF
5FTUZPVSMVDLBOEZPVSDPEJOH
44$SFBUFBHSBQIJDBMJOUFSGBDF
"EEJOUFSGBDFUPZPVSQSPKFDUT
50#SJOHHSBQIJDTUPHBNFT
"EEJNBHFTUPTJNQMFHBNFT
56#VJMEBOBQQGPS"OESPJE
.BLFZPVSPXOBQQXJUI,JWZ
62.BLJOHXFCBQQT
6TF1ZUIPOUPDSFBUFPOMJOFBQQT
661ZUIPOUJQT
&TTFOUJBMLOPXMFEHFGPS1ZUIPOVTFST

5IF1ZUIPO#PPL25
i(FUUPHSJQTXJUI1ZUIPO
BOETUBSUCVJMEJOHPOUIFCBTJDTw

26  The Python Book
Python essentials
Learn how to do some basic Python coding by following 
our breakdown of a simple rock, paper, scissors game
Code a game of
rock, paper, scissors
This tutorial will guide you through making 
a rock, paper, scissors game in Python. The 
code applies the lessons from the masterclass ‚Äì 
and expands on what was included there ‚Äì and 
doesn‚Äôt require any extra Python modules to run, 
like Pygame.
Rock, paper, scissors is the perfect game to 
show off a little more about what exactly Python 
can do. Human input, comparisons, random 
selections and a whole host of loops are used in 
making a working version of the game. It‚Äôs also 
easy enough to adapt and expand as you see 
Ô¨Å t, adding rules and results, and even making a 
rudimentary AI if you wish.
For 
this 
particular 
tutorial, 
we 
also 
recommend using IDLE. IDLE is a great Python 
IDE that is easily obtainable in most Linux 
distributions and is available by default on 
Raspbian for Raspberry Pi. It helps you by 
highlighting any problems there might be with 
your code and allows you to easily run it to make 
sure it‚Äôs working properly.
Resources
Python 2: www.python.org/download
IDLE: www.python.org/idle
Allow the Python script 
to run in a terminal, 
and outside the IDE
Human input in the form 
of integers is used for 
comparing moves and, 
ultimately, playing the game
 Use deduction to 
determine one of 
three outcomes
Loop the code over 
again and start 
from the beginning
Append to integer 
variables to keep track 
of scores and more

The Python Book  27
Python essentials
01 
This section imports the extra Python 
functions we‚Äôll need for the code ‚Äì they‚Äôre 
still parts of the standard Python libraries, just 
not part of the default environment
02 
The initial rules of the game are created 
here. The three variables we‚Äôre using and 
their relationship is deÔ¨Å ned. We also provide a 
variable so we can keep score of the games
03 
We begin the game code by deÔ¨Å ning the 
start of each round. The end of each play 
session comes back through here, whether we 
want to play again or not
04 
The game is actually contained all in 
here, asking for the player input, getting 
the computer input and passing these on to get 
the results. At the end of that, it then asks if you‚Äôd 
like to play again
05 
Player input is done here. We give the 
player information on how to play this 
particular version of the game and then allow 
their choice to be used in the next step. We also 
have something in place in case they enter an 
invalid option
06 
There are a few things going on when we 
show the results. First, we‚Äôre putting in a 
delay to add some tension, appending a variable 
to some printed text, and then comparing  what 
the player and computer did. Through an if 
statement, we choose what outcome to print, 
and how to update the scores
07 
We now ask for text input on whether 
or not someone wants to play again. 
Depending on their response, we go back to the 
start, or end the game and display the results

28  The Python Book
Python essentials
01 
We need to start with the path to the 
Python interpreter here. This allows 
us to run the program inside a terminal or 
otherwise outside of a Python-speciÔ¨Å c IDE 
like IDLE. Note that we‚Äôre also using Python 2 
rather than Python 3 for this particular script, 
which needs to be speciÔ¨Å ed in the code to 
make sure it calls upon the correct  version 
from the system.
03 
We‚Äôre setting each move to a speciÔ¨Å c 
number so that once a selection is 
made by the player during the game, it will be 
equated to that speciÔ¨Å c variable. This makes 
the code slightly easier later on, as we won‚Äôt 
need to parse any text for this particular 
function. If you so wish, you can add additional 
moves, and this will start here.
05 
Similar to the way the text names of 
the variables are deÔ¨Å ned and used only 
when needed, the rules are done in such a way 
that when comparing the results, our variables 
are momentarily modiÔ¨Å ed. Further down in the 
code we‚Äôll explain properly what‚Äôs happening, 
but basically after determining whether or 
not there‚Äôs a tie, we‚Äôll see if the computer‚Äôs 
move would have lost to the player move. If the 
computer move equals the losing throw to the 
player‚Äôs move, you win.
02 
We‚Äôre importing two extra modules on 
top of the standard Python code so 
we can use some extra functions throughout 
the code. We‚Äôll use the random module to 
determine what move the computer will throw, 
and the time module to pause the running of 
the code at key points. The time module can 
also be used to utilise dates and times, either 
to display them or otherwise.
04 
Here we specify the rules for the game, 
and the text representations of each 
move for the rest of the code. When called upon, 
our script will print the names of any of the three 
moves, mainly to tell the player how the computer 
moved. These names are only equated to these 
variables when they are needed ‚Äì this way, the 
number assigned to each of them is maintained 
while it‚Äôs needed.
06 
Very simply, this creates a variable that 
can be used throughout the code to 
keep track of scores. We need to start it at zero 
now so that it exists, otherwise if we deÔ¨Å ned 
it in a function, it would only exist inside that 
function. The code adds a point to the computer 
or player depending on the outcome of the round, 
although we have no scoring for tied games in 
this particular version.
The breakdown
There are other modules you can import with 
basic Python. Some of the major ones are 
shown to the right. There are also many more 
that are included as standard with Python.
Python modules 
string
Perform common string operations
datetime and calendar
Other modules related to time
math
Advanced mathematical functions
json
JSON encoder and decoder
pydoc
Documentation generator and online help system
01 
02 
03 
04 
05 
06 

The Python Book  29
Python essentials
07 
Here we deÔ¨Å ne the actual beginning of the code, with the function 
we‚Äôve called ‚Äòstart‚Äô. It‚Äôs quite simple, printing our greeting to the 
player and then starting a while loop that will allow us to keep playing the 
game as many times as we wish. The pass statement allows the while loop 
to stop once we‚Äôve Ô¨Å nished, and could be used to perform a number of other 
tasks if so wished. If we do stop playing the game, the score function is then 
called upon ‚Äì we‚Äôll go over what that does when we get to it.
09 
We start the move function off by putting it into 
a while loop. The whole point of move is to obtain 
an integer between one and three from the player, so the 
while loop allows us to account for the player making an 
unsupported entry. Next, we are setting the player variable 
to be created from the player‚Äôs input with raw_input. We‚Äôve 
also printed instruction text to go along with it. The ‚Äò\n‚Äô we‚Äôve 
used in the text adds a line break; this way, the instructions 
appear as a list.
10 
The try statement is used to clean up code and 
handle errors or other exceptions. We parse what the 
player entered by turning it into an integer using int(). We use 
the if statement to check if it is either 1, 2, or 3 ‚Äì if it is, move 
returns this value back up to the game function. If it throws 
up a ValueError, we use except to do nothing. It prints an error 
message and the while loop starts again. This will happen 
until an acceptable move is made.
08 
We‚Äôve kept the game function fairly simple so we can break down 
each step a bit more easily in the code. This is called upon from the 
start function, and Ô¨Å rst of all determines the player move by calling upon 
the move function below. Once that‚Äôs sorted, it sets the computer move. It 
uses the random module‚Äôs randint function to get an integer between one 
and three (1, 3). It then passes the player and computer move, stored as 
integers, onto the result function which we use to Ô¨Å nd the outcome.
07 
08 
09 
10 
The code in action

30  The Python Book
Python essentials
11 
The result function only takes the variables 
player and computer for this task, which is 
why we set that in result(player, computer). We‚Äôre 
starting off by having a countdown to the result. 
The printed numbers are self-explanatory, but 
we‚Äôve also thrown in sleep from the time module 
we imported. Sleep pauses the execution of the 
look up what the text version of the move is called 
from the names we set earlier on, and then to 
insert that where {0} is.
13 
Here we‚Äôre simply calling the scores we 
set earlier. Using the global function 
allows for the variable to be changed and used 
outside of the variable, especially after we‚Äôve 
appended a number to one of their scores.
15 
If it‚Äôs not a tie, we need to keep checking, 
as it could still be a win or a loss. Within 
the else, we start another if statement. Here, 
we use the rules list from earlier to see if the 
losing move to the player‚Äôs move is the same 
as the computer‚Äôs. If that‚Äôs the case, we print 
the message saying so, and add one to the 
player_score variable from before.
code by the number of seconds in the brackets. 
We‚Äôve put a one-second pause between counts, 
then half a second after that to show the results.
12 
To print out what the computer threw, 
we‚Äôre using string.format(). The {0} in the 
printed text is where we‚Äôre inserting the move, 
which we have previously deÔ¨Å ned as numbers. 
Using names[computer], we‚Äôre telling the code to 
14 
The way we‚Äôre checking the result is 
basically through a process of elimination. 
Our first check is to see if the move the player 
and computer used were the same, which is the 
simplest part. We put it in an if statement so that 
if it‚Äôs true, this particular section of the code ends 
here. It then prints our tie message and goes back 
to the game function for the next step.
16 
If we get to this point, the player has lost. 
We print the losing message, give the 
computer a point and it immediately ends the 
result function, returning to the game function.
11 
12 
13 
14 
15 
16 
The code in action

The Python Book  31
Python essentials
17 
The next section of game calls upon 
a play_again function. Like the move 
function, we have human input, asking the player 
if they would like to play again via a text message 
with raw_input, with the simple ‚Äòy/n‚Äô suggestion in 
an attempt to elicit an expected response.
19 
If we don‚Äôt get an expected response, we 
will assume the player does not want to 
play again. We‚Äôll print a goodbye message, and 
that will end this function. This will also cause 
the game function to move onto the next section 
and not restart.
18 
Giving users an option of y/n like we have 
should expect a response in kind. The 
if statement checks to see if any of our deÔ¨Å ned 
positive responses have been entered. As Python 
doesn‚Äôt differentiate between upper or lower 
case, we‚Äôve made sure that it accepts both y and 
Y. If this is the case, it returns a positive response 
to game, which will start it again.
20 
Going back to the start function, after 
game Ô¨Å nishes we move onto the results. 
This section calls the scores, which are integers, 
and then prints them individually after the names 
of the players. This is the end of the script, as far 
as the player is concerned. Currently, the code 
won‚Äôt permanently save the scores, but you can 
have Python write it to a Ô¨Å le to keep if you wish.
21 
The Ô¨Å nal part allows for the script to 
be used in two ways. Firstly, we can 
execute it in the command line and it will work 
Ô¨Å ne. Secondly, we can import this into another 
Python script, perhaps if you wanted to add it as 
a game to a collection. This way, it won‚Äôt execute 
the code when being imported.
IF also has the ELIF (else if) operator, which can 
be used in place of the second IF statement 
we employed. It‚Äôs usually used to keep code 
clean, but performs the same function.
ELIF
17 
18 
19 
20 
21 
The code in action

32  The Python Book
Python essentials
This section imports the extra Python 
functions we‚Äôll need for the code ‚Äì 
they‚Äôre still parts of the standard 
Python libraries, just not part of the 
default environment
We‚Äôre again providing variables so we 
can keep score of the games played, 
and they‚Äôre updated each round
Our very basic graphics involve ASCII 
art of the game‚Äôs stages, printed out 
after every turn
Learn how to do some more Python 
coding by following our breakdown of a 
simple Hangman game
Program a 
game of 
Hangman 
One of the best ways to get to know Python is 
by building lots of simple projects so you can 
understand a bit more about the programming 
language. This time round, we‚Äôre looking at 
Hangman, a multi-round game relying on if 
and while loops and dealing with strings of text 
in multiple ways. We‚Äôll be using some of the 
techniques we implemented last time as well, so 
we can build upon them.
Hangman still doesn‚Äôt require the Pygame 
set of modules, but it‚Äôs a little more advanced 
than 
rock-paper-scissors. 
We‚Äôre 
playing 
around with a lot more variables this time. 
However, we‚Äôre still looking at comparisons, 
random selections and human input, along 
with splitting up a string, editing a list and even 
displaying rudimentary graphics.
You should continue to use IDLE for these 
tutorials. As we‚Äôve mentioned before, its built-
in debugging tools are simple yet effective and 
it can be used on any Linux system, as well as 
the Raspberry Pi.
Code listing
#!/usr/bin/env python2
from random import *
player_score = 0
computer_score = 0
def hangedman(hangman):
    graphic = [
    ‚Äú‚Äù‚Äù
        +-------+
        |
        |
        |
        |
        |
     ==============
    ‚Äú‚Äù‚Äù,
    ‚Äú‚Äù‚Äù
        +-------+
        |       |
        |       O
        |
        |
        |
    ===============
    ‚Äú‚Äù‚Äù,
    ‚Äú‚Äù‚Äù
    ‚Äú‚Äù‚Äù,
    ‚Äú‚Äù‚Äù
        +-------+
        |       |
        |       O
        |      -|-
        |      / \   
        |       
    ===============
    ‚Äú‚Äù‚Äù]
    print graphic[hangman]
    return
Resources
Python 2: www.python.org/download
IDLE: www.python.org/idle

The Python Book  33
Python essentials
The actual game starts here, with a while loop to 
let you continually play the game until you decide 
otherwise, then ending the program
The game rules are decided here, as well as the 
setup for the word and keeping track of tries and 
incorrect answers
Each round of the game is played here, asking for 
an input, then telling you if you were correct or not. 
It prints out the graphic and changes any variables 
that need to be updated, especially incorrect and 
correct guesses
After each round, the code checks if you‚Äôve won or 
lost yet ‚Äì the win condition being that you guessed 
the word, or losing if you‚Äôve made six guesses
The human input for the game takes the letter 
and turns it into something the code can use. It‚Äôs 
veriÔ¨Åed in the previous block of code and then 
referred back to if you‚Äôve entered an unsupported 
or already used character
The same class as last time, which allows you to 
select whether or not you wish to play again
Upon quitting the game, scores are given for the 
duration of the play session. We also end the script 
with the if __name__ code like before
def start():
    print ‚ÄúLet‚Äôs play a game of Linux Hangman.‚Äù
    while game():
        pass
    scores()
def game():
    dictionary = [‚Äúgnu‚Äù,‚Äùkernel‚Äù,‚Äùlinux‚Äù,‚Äùmageia‚Äù,‚Äùpenguin‚Äù,‚Äùubuntu‚Äù]
    word = choice(dictionary)
    word_length = len(word)
    clue = word_length * [‚Äú_‚Äù]
    tries = 6
    letters_tried = ‚Äú‚Äù
    guesses = 0
    letters_right = 0
    letters_wrong = 0
    global computer_score, player_score
    while (letters_wrong != tries) and (‚Äú‚Äù.join(clue) != word):
        letter=guess_letter()
        if len(letter)==1 and letter.isalpha():
            if letters_tried.find(letter) != -1:
                print ‚ÄúYou‚Äôve already picked‚Äù, letter
            else:
                letters_tried = letters_tried + letter
                first_index=word.find(letter)
                if  first_index == -1:
                    letters_wrong +=1
                    print ‚ÄúSorry,‚Äù,letter,‚Äùisn‚Äôt what we‚Äôre looking for.‚Äù
                else:
                    print‚ÄùCongratulations,‚Äù,letter,‚Äùis correct.‚Äù
                    for i in range(word_length):
                        if letter == word[i]:
                            clue[i] = letter
        else:
            print ‚ÄúChoose another.‚Äù
        hangedman(letters_wrong)
        print ‚Äú ‚Äú.join(clue)
        print ‚ÄúGuesses: ‚Äú, letters_tried
        if letters_wrong == tries:
            print ‚ÄúGame Over.‚Äù
            print ‚ÄúThe word was‚Äù,word
            computer_score += 1
            break
        if ‚Äú‚Äù.join(clue) == word:
            print ‚ÄúYou Win!‚Äù
            print ‚ÄúThe word was‚Äù,word
            player_score += 1
            break
    return play_again()
def guess_letter():
    print
    letter = raw_input(‚ÄúTake a guess at our mystery word:‚Äù) 
    letter.strip()
    letter.lower()
    print
    return letter
def play_again():
    answer = raw_input(‚ÄúWould you like to play again? y/n: ‚Äú)
    if answer in (‚Äúy‚Äù, ‚ÄúY‚Äù, ‚Äúyes‚Äù, ‚ÄúYes‚Äù, ‚ÄúOf course!‚Äù):
        return answer
    else:
        print ‚ÄúThank you very much for playing our game. See you next time!‚Äù
def scores():
    global player_score, computer_score
    print ‚ÄúHIGH SCORES‚Äù
    print ‚ÄúPlayer: ‚Äú, player_score
    print ‚ÄúComputer: ‚Äú, computer_score
    if __name__ == ‚Äò__main__‚Äô:
    start()
 Code highlighting
IDLE automatically highlights the code to make 
reading your work that bit easier. It also allows 
you to change these colours and highlighting in 
IDLE‚Äôs Preferences, in case you‚Äôre colour blind 
or are just used to a different colour scheme 
in general.
Code listing continued

34  The Python Book
Python essentials
I see ASCII
Here‚Äôs a close-up of the seven 
stages we‚Äôve used for Hangman‚Äôs 
graphics. You can change them 
yourself, but you need to make 
sure the quote marks are all in 
the correct place so that the art 
is considered a text string to be 
printed out.
#!/usr/bin/env python2
from random import *
player_score = 0
computer_score = 0
def hangedman(hangman):
    graphic = [
    ‚Äú‚Äù‚Äù
        +-------+
        |
        |
        |
        |
        |
     ==============
    ‚Äú‚Äù‚Äù,
    ‚Äú‚Äù‚Äù
def start():
    print ‚ÄúLet‚Äôs play a game of Linux Hangman.‚Äù
    while game():
        pass
    scores()
01 
02 
03 
04 
05 
01 
We begin by using this line to enter the path 
to the Python interpreter. This allows us to 
run the program inside a terminal or otherwise outside 
of a Python-speciÔ¨Åc IDE like IDLE. Note that we‚Äôre 
also using Python 2 for this particular script, as it is 
installed by default on most Linux systems and will 
therefore ensure compatibility.
02 
We‚Äôre importing the ‚Äòrandom‚Äô module slightly 
differently this time, importing the actual 
names of the functions from random rather than just 
the module itself. This allows us to use the functions 
without having syntax like random.function. The 
asterisk imports all the functions from random, 
although you can switch that for speciÔ¨Åc names of 
any of random‚Äôs functions. We‚Äôll be using the random 
function to select a word for the player to guess.
03 
Very simply, this creates a variable that can 
be used throughout the code to keep track 
of scores. We need to start it at zero now so that it 
exists; otherwise if we deÔ¨Åned it in a function, it would 
only exist inside that function. The code adds a point 
to the computer or player depending on the outcome 
of the round.
04 
Our simple graphics consist of a series of 
ASCII hanging man stages. We‚Äôre storing 
these in a function as a list of separate string objects 
so we can call upon them by passing on the number of 
incorrect guesses to it. There are seven graphics in all, 
like in the pen-and-paper version. We also include the 
print command with the function, so when it‚Äôs called it 
will completely handle the selection and display of the 
hanging man, with the Ô¨Årst one being printed after the 
Ô¨Årst letter is guessed.
05 
Here we deÔ¨Åne the actual beginning of the 
code, with the function we‚Äôve called ‚Äòstart‚Äô. 
It‚Äôs quite simple, printing our greeting to the player 
and then starting a while loop that will allow us to keep 
playing the game as many times as we wish. The pass 
statement allows the while loop to stop once we‚Äôve 
Ô¨Ånished, and could be used to perform a number 
 ‚Äú‚Äù‚Äù
        +-------+
        |
        |
        |
        |
        |
     ==============
    ‚Äú‚Äù‚Äù,
    ‚Äú‚Äù‚Äù
        +-------+
        |       |
        |       O
        |
        |
        |
    ===============
    ‚Äú‚Äù‚Äù,
    ‚Äú‚Äù‚Äù
        +-------+
        |       |
        |       O   
        |       |
        |
        |
    ===============
    ‚Äú‚Äù‚Äù,
    ‚Äú‚Äù‚Äù
        +-------+
        |       O
        |      -|
        |
        |    
        |     
    ===============
    ‚Äú‚Äù‚Äù,
    ‚Äú‚Äù‚Äù
        +-------+
        |       |
        |       O
        |      -|-
        |        
        |         
    ===============
    ‚Äú‚Äù‚Äù,
    ‚Äú‚Äù‚Äù
        +-------+
        |       |
        |       O
        |      -|-
        |      / 
        |        
    ===============
    ‚Äú‚Äù‚Äù,
    ‚Äú‚Äù‚Äù
        +-------+
        |       |
        |       O
        |      -|-
        |      / \   
        |       
    ===============
    ‚Äú‚Äù‚Äù]
 The rules
Although we‚Äôve moved some of 
the rules to the ‚Äògame‚Äô function 
this month, you can always put 
them back here and call upon 
them using the global variable, as 
we would do with the scores. For 
the words, you could also create a 
separate Ô¨Åle and import them like 
the random module.

The Python Book  35
Python essentials
of other tasks if so wished. If we do stop playing the 
game, the score function is then called upon ‚Äìwe‚Äôll go 
over what that does when we get to it.
06 
We have put a majority of the game code 
in the ‚Äògame‚Äô function this time around, as 
there‚Äôs not as much that needs to be split up. You can 
split it up further if you wish, using the style of code 
from last issue, if it would make the code cleaner 
for you or help you understand the building blocks a 
bit more.
07 
The Ô¨Årst four lines quickly set up the word 
for the player to guess. We‚Äôve got a small 
selection of words in a list here. However, these can be 
imported via HTML or expanded upon. Choice is used 
to select a random element from the list, which comes 
from the random module we imported. Finally, we 
ascertain how long the string is of the word to guess, 
and then create the clue variable with a number of 
underscores of that length. This is used to display the 
word as you build it up from guesses.
08 
We start to set up the rules and the individual 
variables to keep track of during the game. 
There can only be six incorrect guesses before the 
hanging man is fully drawn, or in our case displayed, 
so we set the tries variable to six. We‚Äôll keep track of 
the letters through letters_tried to make sure that not 
only will the player know, but also the code for when 
def game():
    dictionary = [‚Äúgnu‚Äù,‚Äùkernel‚Äù,‚Äùlinux‚Äù,‚Äùmageia‚Äù,‚Äùpenguin‚Äù,‚Äùubuntu‚Äù]
    word = choice(dictionary)
    word_length = len(word)
    clue = word_length * [‚Äú_‚Äù]
    tries = 6
    letters_tried = ‚Äú‚Äù
    guesses = 0
    letters_right = 0
    letters_wrong = 0
    global computer_score, player_score
    while (letters_wrong != tries) and (‚Äú‚Äù.join(clue) != word):
        letter=guess_letter()
        if len(letter)==1 and letter.isalpha():
            if letters_tried.find(letter) != -1:
                print ‚ÄúYou‚Äôve already picked‚Äù, letter
it‚Äôs checking against letters already played. Finally, 
we create empty variables for the number of guesses 
made, letters correct and letters incorrect, to make 
the code slightly easier. We also import the global 
scores here.
09 
We‚Äôre starting a while loop to perform the 
player selection and check the status of the 
game. This loop continues until the player wins or loses. 
It starts by checking if all the tries have been used up 
by seeing if letters_wrong is not equal to tries. As each 
try will only add one point to wrong, it will never go 
above six. It then concatenates ‚Äòclue‚Äô and sees if it‚Äôs the 
same as the word the computer selected. If both these 
statements are true, it goes on to the next turn.
10 
We call upon the function we‚Äôre using to 
input a letter and give it the variable ‚Äòletter‚Äô. 
We check what it returns by Ô¨Årst of all making sure 
it‚Äôs only a single letter, with len(letter), then by 
using isalpha to see if it‚Äôs one of the 26 letters of the 
alphabet. If these conditions are satisÔ¨Åed, we start 
a new if statement to make sure it‚Äôs a new guess, 
and tell the player if it‚Äôs already been chosen so they 
can start again. If all this is acceptable, we move on 
to the next section of the code to see if it‚Äôs a correct 
guess or not.
06
08
09
10
07
 Indentations
While IDLE will keep track of the 
indents in the code, if you‚Äôre using 
a text editor to write some Python, 
you‚Äôll have to make sure you‚Äôre 
using them correctly. Python is 
very sensitive to whether or not 
indents are used correctly, and it 
does aid in readability as well.

36  The Python Book
Python essentials
11
12 
13 
14 
16 
15 
11 
If it‚Äôs a new letter that we Ô¨Ånd acceptable, 
the Ô¨Årst thing we do is add it to the list 
of letters tried. This is done simply by adding 
the strings together. We then use the Ô¨Ånd 
command to search the word string for the letter 
entered, which will then return a number of the 
placement of the letter in the string. If it doesn‚Äôt 
Ô¨Ånd the letter, it returns a -1 value, which we use 
in the next if statement to see if the Ô¨Årst_index 
variable is -1. If so, it adds one to the number of  
letters_wrong and then prints a message to let 
the player know that it was an incorrect guess.
12 
If we‚Äôve got this far and the letter is not 
incorrect, than we can only assume 
it is correct. Through this simple process of 
elimination, we Ô¨Årst print out a message to let 
the player know that they‚Äôve been successful and 
then make a record of it.
13 
We‚Äôre going to start a small loop here so 
we can update the clue with the correct 
letter we‚Äôve added. We use the range function to 
tell the code how many times we wish to iterate 
over the clue by using the word_length variable. 
We then check to see which letter in the word 
has been guessed correctly and change that 
speciÔ¨Åc part of the clue to be that letter so it can 
be printed out for the player to see, and for us to 
check whether or not the game is over.
14 
We end the original if statement by telling 
the player to choose again if they did not 
enter a supported input. Before we go on to the 
next round of choices, we print out the hanging 
            else:
                letters_tried = letters_tried + letter
                first_index=word.find(letter)
                if  first_index == -1:
                    letters_wrong +=1
                    print ‚ÄúSorry,‚Äù,letter,‚Äùisn‚Äôt what we‚Äôre looking for.‚Äù
                else:
                    print‚ÄùCongratulations,‚Äù,letter,‚Äùis correct.‚Äù
                    for i in range(word_length):
                        if letter == word[i]:
                            clue[i] = letter
        else:
            print ‚ÄúChoose another.‚Äù
        hangedman(letters_wrong)
        print ‚Äú ‚Äú.join(clue)
        print ‚ÄúGuesses: ‚Äú, letters_tried
        if letters_wrong == tries:
            print ‚ÄúGame Over.‚Äù
            print ‚ÄúThe word was‚Äù,word
            computer_score += 1
            break
        if ‚Äú‚Äù.join(clue) == word:
            print ‚ÄúYou Win!‚Äù
            print ‚ÄúThe word was‚Äù,word
            player_score += 1
            break
    return play_again()
man graphic as it stands, by calling the graphic 
in the list that corresponds to the number of 
incorrect guesses that have been made. We then 
print how the clue currently looks, with a space 
in between each character, and then print the 
number of guesses that have been made.
15 
Here we check to see if the game is 
over again, Ô¨Årst of all comparing the  
letters_wrong to the number of tries. If that‚Äôs 
true, we print a message that the game has 
ended and reveal the mystery of the hidden word. 
We increase the computer‚Äôs score and break the 
loop. The next loop checks to see if the full clue 
concatenated is the same as the original word ‚Äì if 
that‚Äôs the case, we print the win message, the full 
word and add one point to the player score before 
breaking the loop again. This can also be done 
with ifs and elifs to avoid using breaks.
 Continuation
This code is still part of the 
game function we started on the 
previous page, so make sure your 
indentations are in alignment if 
you‚Äôre not using an IDE. If you plan 
to split this code up, we‚Äôd suggest 
starting with the word selection 
and results.

The Python Book  37
Python essentials
def guess_letter():
    print
    letter = raw_input(‚ÄúTake a guess at our mystery word:‚Äù) 
    letter.strip()
    letter.lower()
    print
    return letter
def play_again():
    answer = raw_input(‚ÄúWould you like to play again? y/n: ‚Äú)
    if answer in (‚Äúy‚Äù, ‚ÄúY‚Äù, ‚Äúyes‚Äù, ‚ÄúYes‚Äù, ‚ÄúOf course!‚Äù):
        return answer
    else:
        print ‚ÄúThank you very much for playing our game. See you next time!‚Äù
def scores():
    global player_score, computer_score
    print ‚ÄúHIGH SCORES‚Äù
    print ‚ÄúPlayer: ‚Äú, player_score
    print ‚ÄúComputer: ‚Äú, computer_score
    if __name__ == ‚Äò__main__‚Äô:
    start()
17
18
21
19
20
22
16 
We end the entire game function loop by 
calling upon return again, which we will 
then pass all the way up to the start function once 
it‚Äôs Ô¨Ånished.
17 
The human input function Ô¨Årst of 
all prints out a raw_input message. 
Once the player enters the letter, the function 
parses it to be used with the rest of the code. 
Firstly, strip is used to remove any white space 
from the input given, as we‚Äôve not given it any 
extra parameters. We then convert it into 
lower-case letters, as Python will not be able 
to correctly compare an upper-case character 
with a lower-case alternative. We then print the 
selection for the record and return it up to the 
game function.
18 
The last part of the game function is to 
ask the player if they wish to try again. 
The play_again function takes a human input 
with a simple message and then analyses the 
input so it knows what to send back.
19 
Giving users an option of y/n like we 
have should expect a response in kind. 
The if statement checks to see if any of our 
deÔ¨Åned positive responses have been entered. 
As Python doesn‚Äôt differentiate between upper 
or lower case, we‚Äôve made sure it accepts both 
y and Y. If this is the case, it returns a positive 
response to game, which will start it again.
20 
If we don‚Äôt get an expected response, 
we will assume the player does 
not want to play again. We‚Äôll print a goodbye 
message and that will end this function. This 
will also cause the start function to move onto 
the next section and not restart.
21 
Going all the way back to the start 
function, after game Ô¨Ånishes we move 
onto the results. This section is quite simple ‚Äì it 
calls the scores, which are integers, and then 
prints them individually after the names of the 
players. This is the end of the script, as far as 
the player is concerned. Currently, the code will 
not permanently save the scores, but you can 
have Python write it to a Ô¨Åle to keep if you wish.
22 
The Ô¨Ånal part of the code allows for 
the script to be used in two ways. 
Firstly, we can execute it in the command line 
and it will work Ô¨Åne. Secondly, we can import 
this into another Python script, perhaps if 
you wanted to add it as a game to a collection. 
This way, it will not execute the code when 
being imported.
 Homework
Now that you‚Äôve Ô¨Ånished with the code, why 
not make your own changes? Increase the 
word count; create different, selectable word 
categories; or even let people guess the full 
word. You have all the tools to do this in the 
current code and last month‚Äôs tutorial.

38  The Python Book
Python essentials
The Start 
Here we‚Äôre doing some minor setups so we can 
get our code to run with some extra modules not 
included with the basics
The Rules
We‚Äôre setting names for each dice roll so they can 
be properly identiÔ¨Åed to the player ‚Äì much more 
interesting than numbers
The Score
Again we‚Äôve got some basic variables set up so we 
can keep score of the games if we want to
The Script
The game is handled here, passing the player onto 
the next function to actually play, and handling the 
end of the session as well
The Game
We access the full game loop via here, and the 
function that allows us to play again if we‚Äôre 
so inclined
The Throw
The initial hand is dealt, so to speak, at the start of 
the throws function. This function handles all the 
decision making in the game, while passing off the 
dice rolls to another function
The Hand
We‚Äôve also got a special function so we can inform 
the player exactly what style of hand they have
The Decision
There are two rounds in this version of poker 
dice, and you can select how many dice you wish 
to re-roll in this small while loop that makes sure 
you‚Äôre also using a correct number
#!/usr/bin/env python2
import random
from itertools import groupby
nine = 1
ten = 2
jack = 3
queen = 4
king = 5
ace = 6
names = { nine: ‚Äú9‚Äù, ten: ‚Äú10‚Äù, jack: ‚ÄúJ‚Äù, queen: ‚ÄúQ‚Äù, king: ‚ÄúK‚Äù, ace: ‚ÄúA‚Äù }
player_score = 0
computer_score = 0
def start():
    print ‚ÄúLet‚Äôs play a game of Linux Poker Dice.‚Äù
    while game():
        pass
    scores()
def game():
    print ‚ÄúThe computer will help you throw your 5 dice‚Äù
    throws()
    return play_again()
        
def throws():
    roll_number = 5
    dice = roll(roll_number)
    dice.sort()
    for i in range(len(dice)):
        print ‚ÄúDice‚Äù,i + 1,‚Äù:‚Äù,names[dice[i]]
    result = hand(dice)
    print ‚ÄúYou currently have‚Äù, result
    while True:
        rerolls = input(‚ÄúHow many dice do you want to throw again? ‚Äú)
        try:
            if rerolls in (1,2,3,4,5):
                break
        except ValueError:
            pass
        print ‚ÄúOops! I didn‚Äôt understand that. Please enter 1, 2, 3, 4 or 5.‚Äù
Code listing
Put on your poker face and get ready to gamble as you hone 
your programming skill with a bit of poker dice
Play poker dice using Python 
So you‚Äôve learnt how to program tic-tac-toe 
and guessed your way to victory at hangman. 
Now it‚Äôs time to head to Las Vegas and play our 
cards right. Or in this case, virtual dice, and more 
like Reno as we continue with our Python game 
tutorials and introduce you to some poker dice.
We‚Äôre again using some of the lessons we‚Äôve 
already learnt, including random number 
generation, list creation and modiÔ¨Åcation, 
human input, rule setting, scoring and more. 
But we‚Äôll also be adding some new skills in this 
tutorial. Namely, we‚Äôll be creating and appending 
lists with random numbers, and using functions 
multiple times in one block of code to cut down 
on bloat.
Again, we recommend using IDLE, and we‚Äôre 
using Python 2 to ensure compatibility with a 
wider variety of distros, including the Raspberry 
Pi. So, we hope luck is a lady for you and that the 
odds are ever in your favour ‚Äì just keep those 
Ô¨Ångers crossed that you don‚Äôt roll a snake eyes 
(we are coding in Python, after all)! 
Resources
Python 2: www.python.org/download
IDLE: www.python.org/idle

The Python Book  39
Python essentials
The Re-roll
We‚Äôre doing the second set of rolls and starting 
the end of the game here by calling on the same 
function as before, but we‚Äôre also aware that 
choosing no re-rolls means the end of the game
The Dice
Here we‚Äôre Ô¨Ånding out which dice the player wants 
to re-roll, and also making sure that they enter 
a valid number. Just so they know they‚Äôre doing 
something, we print something after every turn
Second Hand
We change and display the new dice hand to end 
the game. Again, we make sure to tell the player 
what the actual hand they have is
The Rolls
The function we reuse to roll our virtual six dice 
using a simple while loop. This allows us to keep 
the codebase smaller
The Analysis
There are eight possible types of hands in poker 
dice, and we can use a bit of logic to work out all 
but one of them without checking against all 7,776 
outcomes ‚Äì in fact, we only speciÔ¨Åcally have to 
check for two
The Question
Our simple ‚Äòplay again‚Äô function that parses player 
input so we can restart or end the script
The End 
Scores are displayed at the end of the script, and 
the very Ô¨Ånal part allows us to import this into 
other Python scripts as a module
EXTRA FUNCTIONS
Splitting up actions into functions 
makes it easier to not only perform 
them multiple times, but reduce 
the amount of code. On larger 
projects, this can aid with speed.
    if rerolls == 0:
        print ‚ÄúYou finish with‚Äù, result
    else:
        roll_number = rerolls
        dice_rerolls = roll(roll_number)
        dice_changes = range(rerolls)
        print ‚ÄúEnter the number of a dice to reroll: ‚Äú
        iterations = 0
        while iterations < rerolls:
            iterations = iterations + 1
            while True:
                selection = input(‚Äú‚Äù)
                try:
                    if selection in (1,2,3,4,5):
                        break
                except ValueError:
                    pass
                print ‚ÄúOops! I didn‚Äôt understand that. Please enter 1, 2, 3, 4 or 5.‚Äù
            dice_changes[iterations-1] = selection-1
            print ‚ÄúYou have changed dice‚Äù, selection
        iterations = 0
        while iterations < rerolls:
            iterations = iterations + 1
            replacement = dice_rerolls[iterations-1]
            dice[dice_changes[iterations-1]] = replacement
        dice.sort()
        for i in range(len(dice)):
            print ‚ÄúDice‚Äù,i + 1,‚Äù:‚Äù,names[dice[i]]
        result = hand(dice)
        print ‚ÄúYou finish with‚Äù, result
def roll(roll_number):
    numbers = range(1,7)
    dice = range(roll_number)
    iterations = 0
    while iterations < roll_number:
        iterations = iterations + 1
        dice[iterations-1] = random.choice(numbers)
    return dice
    
def hand(dice):
    dice_hand = [len(list(group)) for key, group in groupby(dice)]
    dice_hand.sort(reverse=True)
    straight1 = [1,2,3,4,5]
    straight2 = [2,3,4,5,6]
    if dice == straight1 or dice == straight2:
        return ‚Äúa straight!‚Äù
    elif dice_hand[0] == 5:
        return ‚Äúfive of a kind!‚Äù
    elif dice_hand[0] == 4:
        return ‚Äúfour of a kind!‚Äù
    elif dice_hand[0] == 3:
        if dice_hand[1] == 2:
            return ‚Äúa full house!‚Äù
        else:
            return ‚Äúthree of a kind.‚Äù
    elif dice_hand[0] == 2:
        if dice_hand[1] == 2:
            return ‚Äútwo pair.‚Äù
        else:
            return ‚Äúone pair.‚Äù
    else:
        return ‚Äúa high card.‚Äù
    
def play_again():
    answer = raw_input(‚ÄúWould you like to play again? y/n: ‚Äú)
    if answer in (‚Äúy‚Äù, ‚ÄúY‚Äù, ‚Äúyes‚Äù, ‚ÄúYes‚Äù, ‚ÄúOf course!‚Äù):
        return answer
    else:
        print ‚ÄúThank you very much for playing our game. See you next time!‚Äù
def scores():
    global player_score, computer_score
    print ‚ÄúHIGH SCORES‚Äù
    print ‚ÄúPlayer: ‚Äú, player_score
    print ‚ÄúComputer: ‚Äú, computer_score
if __name__ == ‚Äò__main__‚Äô:
    start()
Code listing continued

405IF1ZUIPO#PPL
1ZUIPOFTTFOUJBMT
it later with a different number that the player 
chooses. We get Ô¨Åve random numbers in a list 
returned from the function, and we order it using 
sort to make it a bit more readable for the player 
and also later on for the hand function.
08 
Dice display 
We print out each dice, numbering them 
so the player knows which dice is which, and 
also giving it the name we set at the start of the 
script. We‚Äôre doing this with a loop that repeats 
itself the number of times as the dice list is 
long using the range(len(dice)) argument. The 
i is increased each turn, and it prints out that 
speciÔ¨Åc number of the dice list.
09 
Current hand
We want to Ô¨Ånd the type of hand the 
player has multiple times during the game, so set 
a speciÔ¨Åc function to Ô¨Ånd out. We pass the series 
of dice we have on to this function, and print.
10 
Throw again
Before we can throw the dice for the 
second round, we need to know which dice the 
#!/usr/bin/env python2
import random
from itertools import groupby
nine = 1
ten = 2
jack = 3
queen = 4
king = 5
ace = 6
names = { nine: ‚Äú9‚Äù, ten: ≈é10≈è, jack: ‚ÄúJ‚Äù, queen: ≈éQ≈è, king: ‚ÄúK‚Äù, ace: ‚ÄúA‚Äù }
player_score = 0
computer_score = 0
def start():
    print ≈éLetƒÅs play a game of Linux Poker Dice.≈è
    while game():
        pass
    scores()
def game():
    print ≈éThe computer will help you throw your 5 dice≈è
    throws()
    return play_again()
01 
02 
03 
04 
06 
05 
01 
Begin 
As before, we use this line to enter the 
path to the Python interpreter. This allows us to 
run the program inside a terminal or otherwise 
outside of a Python-speciÔ¨Åc IDE like IDLE. Note 
that we‚Äôre also using Python 2 for this script.
02 
Importing 
As well as importing the random module 
for our dice throws, we need to get the groupby 
function so we can order the dice in a way that is 
more readable and also easier for analysis when 
telling the player what hand they have.
03 
Cards 
While we‚Äôre using random numbers for 
the dice rolls, unless we assign the correct cards 
to each number, the player won‚Äôt know what 
they‚Äôve rolled and what constitutes a better 
hand. We set each card to a number and then 
equate what these should be printed out as.
04 
Scores 
As usual, we have the empty scores 
for the player and computer so we can update 
these as we go. While it‚Äôs not speciÔ¨Åcally used 
in this version of the code, it‚Äôs easy enough 
to expand on it and add your own simple 
computer roll, or limited AI for both rolls.
05 
Start 
We‚Äôre starting the interactive part of the 
code with the ‚Äòstart‚Äô function. It prints a greeting 
to the player, then starts a while loop that‚Äôll allow 
us to replay the game as many times as we wish. 
The pass statement allows the while loop to stop 
once we‚Äôve Ô¨Ånished. If we do stop playing the 
game, the score function is then called upon.
06 
Game
Like our Rock, Paper, Scissors code, 
def game pawns the rest of the game onto other 
functions, with its main function allowing us to 
keep repeating the game by passing the player 
through to the play_again function.
07 
Throws
For our Ô¨Årst throw, we want to have Ô¨Åve 
random dice. We‚Äôve set a variable here to pass 
on to our throwing function, allowing us to reuse 
RECYCLING
There are a few variables that 
have duplicates throughout the 
code ‚Äì while we‚Äôve been careful 
to make sure they work where 
we want them to, it‚Äôs not the best 
code conduct. The names of the 
variables don‚Äôt speciÔ¨Åcally matter 
‚Äì it‚Äôs just best to label them in a 
way you understand for bug Ô¨Åxing 
and others to read.

5IF1ZUIPO#PPL41
1ZUIPOFTTFOUJBMT
def throws():
    roll_number = 5
    dice = roll(roll_number)
    dice.sort()
    for i in range(len(dice)):
        print ≈éDice≈è,i + 1,≈è:≈è,names[dice[i]]
    result = hand(dice)
    print ≈éYou currently have≈è, result
    while True:
        rerolls = input(≈éHow many dice do you want to throw again? ≈é)
        try:
            if rerolls in (1,2,3,4,5):
                break
        except ValueError:
            pass
        print ≈éOops! I didnƒÅt understand that. Please enter 1, 2, 3, 4 or 5.≈è
    if rerolls == 0:
        print ≈éYou finish with≈è, result
    else:
        roll_number = rerolls
        dice_rerolls = roll(roll_number)
        dice_changes = range(rerolls)
        print ≈éEnter the number of a dice to reroll: ≈é
        iterations = 0
        while iterations < rerolls:
            iterations = iterations + 1
            while True:
                selection = input(≈é≈è)
                try:
                    if selection in (1,2,3,4,5):
                        break
                except ValueError:
                    pass
                print ≈éOops! I didnƒÅt understand that. Please enter 1, 2, 3, 4 or 5.≈è
            dice_changes[iterations-1] = selection-1
            print ≈éYou have changed dice≈è, selection
player wants to roll again. We start this by asking 
them how many re-rolls they want to do, which 
allows us to create a custom while loop to ask 
the user which dice to change that iterates the 
correct number of times. 
We also have to make sure it‚Äôs a number 
within the scope of the game, which is why 
we check using the try function, and print out  
a message which tells the user if and how they 
are wrong.
11 
Stick
One of the things we‚Äôve been trying to do 
in these tutorials is point out how logic can cut 
down on a lot of coding by simply doing process 
07 
08 
10 
11 
12
13
09 
INDENTATIONS
Watch the indentations again as 
we split the else function. The 
following page‚Äôs code is on the 
same level as roll roll_number, 
dice_rerolls and dice_changes in 
the code.
WHITE SPACE
The big if function at the end of 
throws doesn‚Äôt have many line 
breaks between sections ‚Äì you 
can add these as much as you want 
to break up the code into smaller 
chunks visually, aiding debugging.
of eliminations or following Ô¨Çow charts. If the 
user wants to re-roll zero times, then that means 
they‚Äôre happy with their hand, and it must be the 
end of the game. We print a message to indicate 
this and display their hand again.
12 
The re-rolls
Here‚Äôs where we start the second roll 
and the end of the game, using a long else to the 
if statement we just started. We Ô¨Årst of all make 
sure to set our variables ‚Äì updating roll_number 
to pass onto the roll function with the re-roll 
number the user set, and creating the list that‚Äôs 
the exact length of the new set of rolls we wish to 
use thanks to range(rerolls).
13 
Parse
We ask the player to enter the numbers 
of the dice they wish to re-roll. By setting an 
iterations variable, we can have the while loop 
last the same number of times as we want re-
rolls by comparing it to the reroll variable itself. 
We check each input to make sure it‚Äôs a number 
that can be used, and add the valid choices to the  
dice_changes list. We use iterations-1 here as 
Python lists begin at 0 rather than 1. We also print 
out a short message so the player knows the 
selection was successful.

42  The Python Book
Python essentials
14 
New dice
We‚Äôre resetting and reusing the iterations 
variable to perform a similar while loop to update 
the rolls we‚Äôve done to the original dice variable. 
The main part of this while loop is using the 
iterations-1 variable to Ô¨Ånd the number from 
dice_changes list, and using that to change that 
speciÔ¨Åc integer in the dice list with the number 
from the replacement list. So if the Ô¨Årst item on 
the dice_changes list is two, then the second 
item on the dices list is changed to the number 
we want to replace it with.
15 
Sorting 
We‚Äôre ending the throw function in 
basically the same way we ended the Ô¨Årst throw. 
First of all, we re-sort the dice list so that all the 
numbers are in ascending order. Then we print 
out the Ô¨Ånal cards that the dice correspond to, 
before again passing it onto the hand function 
so that we can fully determine the hand that the 
player has. We print out this result and that ends 
the function, sending the whole thing back to the 
game function to ask if you want to play again.
16 
Dice rolling 
The roll function is used twice in the 
code for both times that we roll the dice. Being 
able to use the same code multiple times means 
we can cut down on bloat in the rest of the 
script, allowing it to run a little faster, as we‚Äôve 
explained. It also means in this case that we can 
use it again if you want to change the game to 
three rounds, or modify it for real poker.
17 
Number of rolls 
We begin the whole thing by bringing 
over the roll_number variable into the function 
‚Äì this is because while in the original roll it will 
always be Ô¨Åve, the second roll could between 
one and the full Ô¨Åve dice. We create a list with 
the number of entries we need for each roll, and 
again set an iterations variable for the upcoming 
while loop.
18 
Remember
Much like the while loops in the rest of the 
code so far, we‚Äôre keeping it going until iterations 
is the same as roll_number. Each entry in the 
dice list is replaced with a random number using 
the random.choice function and keeping it in the 
range of the numbers variable, which is one to 
six for each side of the dice. After this is done, we 
return the dice variable to the throw function that 
makes up the majority of the game.
19 
Hand analysis
While not technically a hand of cards, 
the poker terminology still applies. We start in 
this function by setting up a few things. The Ô¨Årst 
part uses the groupby function we imported ‚Äì 
this is used in this case to count the numbers 
that make up the dice variable. If there are three 
twos, a four and a Ô¨Åve, it will return [3, 1, 1]. We‚Äôre 
using this to ascertain what kind of hand the 
player has. As the output of this groupby won‚Äôt 
be in any speciÔ¨Åc order, we use the sort function 
again to sort it; however, this time we use the 
reverse=TRUE argument to make the analysis 
easier again.
20 
Straights
Straights and high cards are odd ones 
out in poker dice, as they do not rely on being 
able to count any repetitions in the cards. 
There are, however, only two hands that create 
a straight in poker dice, so we have created 
two lists here that contain them. We can then 
check Ô¨Årst to see if the dice make these hands, 
and then if all other checks fail, it has to be a 
high card.
21  
Your hand
While seemingly lengthy, this a fairly 
simple if statement. As we stated before, we 
check to see if it‚Äôs one of the two straight hands. 
As there are no Ô¨Çushes or royal straight Ô¨Çushes 
in poker dice, we don‚Äôt have to worry about those. 
We then check to see if the Ô¨Årst item in the list 
is Ô¨Åve, which can only result in Ô¨Åve of a kind; 
similarly, if the Ô¨Årst item is four then the hand 
must be four of a kind. If the Ô¨Årst number is three, 
then it can be either a full house or three of a kind, 
        iterations = 0
        while iterations < rerolls:
            iterations = iterations + 1
            replacement = dice_rerolls[iterations-1]
            dice[dice_changes[iterations-1]] = replacement
        dice.sort()
        for i in range(len(dice)):
            print ‚ÄúDice‚Äù,i + 1,‚Äù:‚Äù,names[dice[i]]
        result = hand(dice)
        print ‚ÄúYou finish with‚Äù, result
def roll(roll_number):
    numbers = range(1,7)
    dice = range(roll_number)
    iterations = 0
    while iterations < roll_number:
        iterations = iterations + 1
        dice[iterations-1] = random.choice(numbers)
    return dice
14 
15
16 
18
17 
HIGHER OR LOWER
Which hand is best? What are the 
odds of getting certain hands in 
the game? Some of the answers 
are surprising, as the poker 
hands they‚Äôre based on trump the 
differing odds the dice produce. 
We‚Äôve ranked hands from highest 
to lowest.
Five of a Kind  .................6/7776
Four of a Kind  ............150/7776
Full House  .................300/7776
Straight  ......................240/7776
Three of a Kind  ........1200/7776
Two Pairs  .................1800/7776
One Pair  ...................3600/7776
High Card  ...................480/7776

The Python Book  43
Python essentials
def hand(dice):
    dice_hand = [len(list(group)) for key, group in groupby(dice)]
    dice_hand.sort(reverse=True)
    straight1 = [1,2,3,4,5]
    straight2 = [2,3,4,5,6]
    if dice == straight1 or dice == straight2:
        return ‚Äúa straight!‚Äù
    elif dice_hand[0] == 5:
        return ‚Äúfive of a kind!‚Äù
    elif dice_hand[0] == 4:
        return ‚Äúfour of a kind!‚Äù
    elif dice_hand[0] == 3:
        if dice_hand[1] == 2:
            return ‚Äúa full house!‚Äù
        else:
            return ‚Äúthree of a kind.‚Äù
    elif dice_hand[0] == 2:
        if dice_hand[1] == 2:
            return ‚Äútwo pair.‚Äù
        else:
            return ‚Äúone pair.‚Äù
    else:
        return ‚Äúa high card.‚Äù
    
def play_again():
    answer = raw_input(‚ÄúWould you like to play again? y/n: ‚Äú)
    if answer in (‚Äúy‚Äù, ‚ÄúY‚Äù, ‚Äúyes‚Äù, ‚ÄúYes‚Äù, ‚ÄúOf course!‚Äù):
        return answer
    else:
        print ‚ÄúThank you very much for playing our game. See you next time!‚Äù
def scores():
    global player_score, computer_score
    print ‚ÄúHIGH SCORES‚Äù
    print ‚ÄúPlayer: ‚Äú, player_score
    print ‚ÄúComputer: ‚Äú, computer_score
if __name__ == ‚Äò__main__‚Äô:
    start()
19 
20 
21 
22 
23 
24 
HOMEWORK
There is currently no scoring in 
place for this version of the game. 
Try adding a computer player, or 
create a rule set that requires a 
certain hand or higher. You could 
even make it two-player.
so we nest an if statement. Again, we do this for 
pairs, where that could be one or two pairs. If all 
else fails then, by a process of elimination, it can 
only be a high card. We give each outcome a text 
string to send back to the throw function so that it 
can be printed.
22 
Play again
As before, we ask the player for raw input 
with the text offering another game. Instead of 
parsing it, we assume the player will choose a 
speciÔ¨Å ed yes response based on the text, and if 
none of these versions is received, we print out 
the message thanking them for playing the game. 
This ends the game function.
23 
Final scores
Going all the way back to the start 
function, after the game Ô¨Å nishes we move onto 
the results. This section is quite simple ‚Äì it 
calls the scores, which are integers, and then 
prints them individually after the names of the 
players. This is the end of the script, as far as the 
player is concerned. Currently, the code will not 
permanently save the scores, but you can have 
Python write it to a Ô¨Å le to keep if you wish.
24 
Modules
The Ô¨Å nal part of the code allows for 
the script to be used in two ways. Firstly, we 
can execute it in the command line and it will 
work just Ô¨Å ne. Secondly, we can import this into 
another Python script, perhaps if you wanted to 
add it as a game to a collection. This last piece of 
code will prevent our script being executed when 
imported by another module ‚Äì it will only do so 
when being run directly. 
TEXT EDITORS
Instead of the IDE we‚Äôve suggested, you 
should also try coding in a text editor. Some 
of them are a little more lightweight and 
format code similar to the way the IDE does, 
separating functions and strings by colours 
etc. Some of the ones we‚Äôd recommend are 
the classic gedit, a popular text editor from 
GNOME desktops; Geany, which has a few 
IDE-esque features written into it; TEA, a 
multifunctioning text editor and project 
manager; and Jedit, a text editor that lives 
in the command line for minimum resource 
usage. These can also be used with multiple 
programming languages, so you can get used 
to them with Python, then make the switch.

44  The Python Book
Python essentials
The start 
Here we‚Äôre doing some minor setup, including getting a new 
module that helps us create a simple graphical interface
The imports 
We‚Äôre importing the three games we created in past issues so 
we can call upon or use them
The window 
Create a graphical window and give it a name so we can add 
some functions to it
The frame 
DeÔ¨Åne the dimensions of the window and give a rough guide to 
placement of the objects within
The welcome 
Print a message in the window and place it in a speciÔ¨Åc 
orientation. This works a little differently to print
The button 
The focus of this month‚Äôs tutorial is making Rock-Paper- 
Scissors work in a graphical interface, so we‚Äôre calling a new 
function we‚Äôre creating
The interface 
Creating and formatting buttons to start the other two tutorial 
games in the command line or shell
The exit 
Here we create a button that quits the window and ends  
the script. We‚Äôve also placed it speciÔ¨Åcally at the bottom of 
the window
The loop
The mainloop allows the main window to continue to work and 
be updated without exiting the program unless speciÔ¨Åed
#!/usr/bin/env python2
#Linux User & Developer presents: Mega Microgrames Collection
from Tkinter import *
import rockpaperscissors
import hangman
import pokerdice
root = Tk()
root.title (‚ÄúLinux User & Developer‚Äôs Mega Microgames Collection‚Äù)
mainframe = Frame(root, height = 200, width = 500)
mainframe.pack_propagate(0)
mainframe.pack(padx = 5, pady = 5)
intro = Label(mainframe, text = ‚Äú‚Äù‚ÄùWelcome to Linux User & Developers Mega 
Microgames Collection.
Please select one of the following games to play:
‚Äú‚Äù‚Äù)
intro.pack(side = TOP)
rps_button = Button(mainframe, text = ‚ÄúRock, Paper, Scissors‚Äù, command = 
rockpaperscissors.gui)
rps_button.pack()
hm_button = Button(mainframe, text = ‚ÄúHangman‚Äù, command = hangman.start)
hm_button.pack()
pd_button = Button(mainframe, text = ‚ÄúPoker Dice‚Äù, command = pokerdice.start)
pd_button.pack()
exit_button = Button(mainframe, text = ‚ÄúQuit‚Äù, command = root.destroy)
exit_button.pack(side = BOTTOM)
root.mainloop()
Main Interface Code Listing
Bring everything together with a Python GUI and take the next 
step in programming your own software
Create a graphical interface 
for Python games
The three basic games we have made in 
Python so far have all run in the command line 
or via IDLE, a Python IDE. While this allowed us 
to show off different ways to use Python code, 
we haven‚Äôt actually shown you how to present 
it yet. In this tutorial, we will take all three 
games and put them all into one neatly uniÔ¨Åed 
graphical interface.
To this end, we‚Äôll be making use of the small 
line of code we added at the bottom of each 
previous tutorial so we can import them as 
modules into our main graphical script. We‚Äôll 
also modify the existing code to add some 
graphical elements. To do all this we‚Äôll be using 
Tkinter, a default module available in Python 
that allows you to create windows and frames 
with fairly simple code.
All you need for this tutorial is an up-to-date 
copy of Python, from your distro‚Äôs repository 
or the website, and the IDLE development 
environment. This will also work great on 
Raspberry Pi distros, such as Raspbian.
Resources
Python 2: www.python.org/download
IDLE: www.python.org/idle

The Python Book  45
Python essentials
New imports
Import new modules that allow us to create the GUI 
part of Rock, Paper, Scissors, as well as removing 
the modules we no longer need
New interface
Our new main function allows us to call the 
majority of the game script when the rps_button is 
pressed. This contains the game components and 
the graphical components
New start
We‚Äôve changed the start function so that it no 
longer goes to the score function after it‚Äôs Ô¨Ånished. 
We‚Äôve also removed the score function, as we track 
that differently so it can be displayed properly
New game
We‚Äôve changed the game function so that it now 
takes the input from our graphical interface. We 
use a new variable to do this that works with the 
GUI, otherwise it works roughly the same as before
New results
The result function remains largely unchanged, 
only now it sends the outcome message to a 
variable we use for the interface, and generally 
uses the new GUI‚Äôs variables
New window
We create the game window with a slightly different 
method due to already having a ‚Äòmainloop‚Äô root 
window. We‚Äôre also giving it a name so you can 
identify it properly
New variables
Our new variables are set up so they can interact with 
both the game code and the interface code properly. 
We‚Äôve also made sure to have a default selection for 
the player so that the code runs properly
New frame
Determine the size and layout of the window for 
the game using a slightly different method than 
before. We‚Äôve also allowed for elements to be 
anchored in certain positions around the window
New choice
Here we place radio buttons in a specific 
configuration in the window, giving the user the 
choice of three moves. This is then passed along to 
the variable and used by the game code
New move
Here we allow for the computer‚Äôs move to be 
displayed under the ‚ÄòComputer‚Äô label
New button
Pressing the Play button we‚Äôve put here runs the 
game script, prints out the scores and Ô¨Ånally a 
message based on the outcome
New ending
We‚Äôve changed this so that the main script begins 
with gui now rather than the start function
#!/usr/bin/env python2
# Linux User & Developer presents: Rock, Paper, Scissors: The Video Game: The Module
from Tkinter import *
from ttk import *
import random
def gui():
    
    rock = 1
    paper = 2
    scissors = 3
    names = { rock: ‚ÄúRock‚Äù, paper: ‚ÄúPaper‚Äù, scissors: ‚ÄúScissors‚Äù }
    rules = { rock: scissors, paper: rock, scissors: paper }
    def start():
        while game():
            pass
    def game():
        player = player_choice.get()
        computer = random.randint(1, 3)
        computer_choice.set(names[computer])
        result(player, computer)
    def result(player, computer):
        new_score = 0
        if player == computer:
            result_set.set(‚ÄúTie game.‚Äù)
        else:
            if rules[player] == computer:
                result_set.set(‚ÄúYour victory has been assured.‚Äù)
                new_score = player_score.get()
                new_score += 1
                player_score.set(new_score)
            else:
                result_set.set(‚ÄúThe computer laughs as you realise you have been defeated.‚Äù)
                new_score = computer_score.get()
                new_score += 1
                computer_score.set(new_score)
    rps_window = Toplevel()
    rps_window.title (‚ÄúRock, Paper, Scissors‚Äù)
    player_choice = IntVar()
    computer_choice = StringVar()
    result_set = StringVar()
    player_choice.set(1)
    player_score = IntVar()
    computer_score = IntVar()
    rps_frame = Frame(rps_window, padding = ‚Äò3 3 12 12‚Äô, width = 300)
    rps_frame.grid(column=0, row = 0, sticky=(N,W,E,S))
    rps_frame.columnconfigure(0, weight=1)
    rps_frame.rowconfigure(0,weight=1)
    Label(rps_frame, text=‚ÄôPlayer‚Äô).grid(column=1, row = 1, sticky = W)
     Radiobutton(rps_frame, text =‚ÄôRock‚Äô, variable = player_choice, value = 1).grid(column=1, 
row=2, sticky=W)
     Radiobutton(rps_frame, text =‚ÄôPaper‚Äô, variable = player_choice, value = 2).grid(column=1, 
row=3, sticky=W)
     Radiobutton(rps_frame, text =‚ÄôScissors‚Äô, variable = player_choice, value = 
3).grid(column=1, row=4, sticky=W)
    Label(rps_frame, text=‚ÄôComputer‚Äô).grid(column=3, row = 1, sticky = W)
    Label(rps_frame, textvariable = computer_choice).grid(column=3, row=3, sticky = W)
    Button(rps_frame, text=‚ÄùPlay‚Äù, command = start).grid(column = 2, row = 2)
    Label(rps_frame, text = ‚ÄúScore‚Äù).grid(column = 1, row = 5, sticky = W)
    Label(rps_frame, textvariable = player_score).grid(column = 1, row = 6, sticky = W)
    Label(rps_frame, text = ‚ÄúScore‚Äù).grid(column = 3, row = 5, sticky = W)
    Label(rps_frame, textvariable = computer_score).grid(column = 3, row = 6, sticky = W)
    Label(rps_frame, textvariable = result_set).grid(column = 2, row = 7)
if __name__ == ‚Äò__main__‚Äô:
    gui()
ModiÔ¨Åed RPS Code Listing

465IF1ZUIPO#PPL
1ZUIPOFTTFOUJBMT
01 
02 
03 
04 
07 
08 
09 
06 
05 
01 
First line 
We use this line to enter the path to the 
Python interpreter. This lets us run the program 
inside a terminal or otherwise outside of a 
Python-speciÔ¨Åc IDE like IDLE. Note that we‚Äôre 
also using Python 2 for this particular script.
06 
Introductions
We create the intro variable as a label 
that lives in the main frame. We give it text to 
introduce the interface, using the triple quote 
marks to have it go across multiple lines and 
format better. We then use pack to display it, and 
tell Tkinter to put it at the top of the interface.
07 
Rock, Paper, Scissors 
We create a button for the Rock, Paper, 
Scissors game using the Button function. We 
attach to it the main frame, give it a label using 
02 
Import graphics 
Tkinter is the graphical interface we‚Äôre 
using and while it‚Äôs a standard Python function, 
you‚Äôll need to import the module so you can use it. 
We‚Äôve used the ‚Äòfrom [module] import *‚Äô method 
so that we can use the functions from it without 
having to add Tkinter at the beginning.
04 
Root window
Using the Tk() function creates the 
window we‚Äôre going to be placing everything 
into. We‚Äôve decided to call it root for now; 
however, you can call it anything you like, as 
long as you‚Äôre consistent with it. We‚Äôve also 
named it using the title command from Tkinter 
and a string of text.
05 
Main frame
The Ô¨Årst line has us set the variable 
mainframe as a Frame in the interface. We‚Äôve 
attached it to root, the main window, and given 
03 
Import games 
We‚Äôre importing the modules for the 
three games. We added the line at the bottom 
MAIN WINDOW
The main interface window that 
this code creates is fairly basic, 
but contains the functions we 
require. The window exit button 
will do the same job as the Quit 
button, and the Hangman and 
Poker Dice buttons run the old 
scripts in the Python shell.
#!/usr/bin/env python2
#Linux User & Developer presents: Mega Microgrames Collection
from Tkinter import *
import rockpaperscissors
import hangman
import pokerdice
root = Tk()
root.title (≈éLinux User & DeveloperƒÅs Mega Microgames Collection≈è)
mainframe = Frame(root, height = 200, width = 500)
mainframe.pack_propagate(0)
mainframe.pack(padx = 5, pady = 5)
intro = Label(mainframe, text = ≈é≈è≈èWelcome to Linux User & Developers Mega Microgames Collection.
Please select one of the following games to play:
≈é≈è≈è)
intro.pack(side = TOP)
rps_button = Button(mainframe, text = ≈éRock, Paper, Scissors≈è, command = rockpaperscissors.gui)
rps_button.pack()
hm_button = Button(mainframe, text = ≈éHangman≈è, command = hangman.start)
hm_button.pack()
pd_button = Button(mainframe, text = ≈éPoker Dice≈è, command = pokerdice.start)
pd_button.pack()
exit_button = Button(mainframe, text = ≈éQuit≈è, command = root.destroy)
exit_button.pack(side = BOTTOM)
root.mainloop()
it a minimum height and width in pixels. We 
use pack_propogate to create the window, and 
then make sure it‚Äôs the size that we‚Äôve deÔ¨Åned. 
We‚Äôve then used pack to pad the borders, 
allowing the contents of the window to not 
touch the sides of it.
of each script so we can do this. To make sure 
to differentiate the functions in each game, we 
will have to specify [module].[function] so there 
are no errors in the code.

The Python Book  47
Python essentials
#!/usr/bin/env python2
# Linux User & Developer presents: Rock, Paper, Scissors: The Video Game: The Module
from Tkinter import *
from ttk import *
import random
def gui():
    
    rock = 1
    paper = 2
    scissors = 3
    names = { rock: ‚ÄúRock‚Äù, paper: ‚ÄúPaper‚Äù, scissors: ‚ÄúScissors‚Äù }
    rules = { rock: scissors, paper: rock, scissors: paper }
    def start():
        while game():
            pass
    def game():
        player = player_choice.get()
        computer = random.randint(1, 3)
        computer_choice.set(names[computer])
        result(player, computer)
10 
11 
12
13
14
09 
Break the loop 
The exit button works similarly to the 
other buttons we‚Äôve created, but instead it uses 
the command root.destroy. This ends the loop 
that we‚Äôve created with root.mainloop(), which 
allows the interface code to continue looping, 
allowing us to continually use it. We place the 
exit button at the bottom of the window with 
‚Äòside = BOTTOM‚Äô.
12 
Game variables
The variables are staying the same 
so that we can do the same comparisons we 
made in the original code. We‚Äôve put them into 
the function itself so that they don‚Äôt affect the 
other imported code into the main interface ‚Äì
and so that when calling just this function, we 
don‚Äôt need to use global to bring them in.
14 
Game function
The game function has had a few 
modiÔ¨Åcations to make sure it works with 
the interface. First of all, the player variable 
is retried using get() on the special variable 
we‚Äôve created to contain the player choice. 
We do a similar thing for the computer, using 
‚Äòset‚Äô to change the variable in our interface-
friendly computer_choice value. We still use 
the name variable to set the text that goes into 
computer_choice. This then passes the player 
and computer variables along in the same way 
we did before.
13 
Start function
We‚Äôve removed the part that calls 
the score function from the start function, 
as we have the interface handle the scoring 
now. It still calls upon the game function, 
though, putting it into a loop so it can be 
used continuously. This function is called by 
the interface to begin the game by setting a 
computer move and then comparing it to the 
player‚Äôs choice.
10 
Game code 
Nothing much has changed in the start of 
this code, other than a few import changes. The 
code for running it in the command line is still 
PYTHON SHELL
Our other code will run in the shell 
or via a command line in the same 
way as before when the buttons 
are pressed.
08 
Other games
For the other two games, the code is 
mostly the same; however, we call upon the start 
function in both of them. In the Ô¨Ånal interface, 
this will cause the games to run in the shell or 
command line as they‚Äôve been running before.
11 
Game interface 
One of the biggest changes we‚Äôre making 
to this script is having it all contained in one 
function, ‚Äòdef gui‚Äô. The interface code needs to 
be put into a function, otherwise it will be run 
during import. While we‚Äôve chosen to put the 
entirety of the code in a function, you can also 
try just having the graphical interface code in 
one. All our variables are kept in here so that 
they still work properly.
there, and with a few modiÔ¨Åcations the code will 
run independently of the main interface. We‚Äôve 
removed the time module, as we no longer need 
it, and imported not only the Tkinter module, 
but the ttk module. The ttk module allows us to 
arrange the GUI in a grid, which will be slightly 
easier to use and understand.
text that appears on the button, and then have 
it run a command. In this case, we use the 
modiÔ¨Åed rockpapershotgun.py code that has a 
gui function, hence rockpapershotgun.py. We 
then use pack to place it in the window

48  The Python Book
Python essentials
    def result(player, computer):
        new_score = 0
        if player == computer:
            result_set.set(‚ÄúTie game.‚Äù)
        else:
            if rules[player] == computer:
                result_set.set(‚ÄúYour victory has been assured.‚Äù)
                new_score = player_score.get()
                new_score += 1
                player_score.set(new_score)
            else:
                result_set.set(‚ÄúThe computer laughs as you realise you have been defeated.‚Äù)
                new_score = computer_score.get()
                new_score += 1
                computer_score.set(new_score)
    rps_window = Toplevel()
    rps_window.title (‚ÄúRock, Paper, Scissors‚Äù)
    player_choice = IntVar()
    computer_choice = StringVar()
    result_set = StringVar()
    player_choice.set(1)
    player_score = IntVar()
    computer_score = IntVar()
15 
16
17 
19
20
18 
GAME WINDOW
In its default state, the game 
window will have rock selected 
and no message will be displayed. 
Once the player makes a move, the 
message will be displayed at the 
bottom and the computer‚Äôs move 
will be printed. There‚Äôs no quit 
button on this menu, but clicking 
the window exit will bring you back 
to the main interface.
15 
Result function
The result function still takes the same 
two variables as before, which we set in the 
game function. While technically we can use 
the variables set up for the interface, these 
are not pure integers and can cause an error if 
not handled correctly. With that in mind, we‚Äôve 
created an empty new_score variable that we 
can use to effectively clean the interface value 
before adding it back into it.
20 
Interface variables
Here is the reason we had to call and 
change the variables in a different manner. 
For Tkinter, we need to let the interface know 
whether or not a variable is an integer or a text 
value. IntVar and StringVar allow for these 
respectively. We‚Äôve also set the player_choice 
variable to be one, which we have already set as 
the choice for rock. This means there will at least 
be a default choice when the game is started, 
and it won‚Äôt cause an error.
21 
Game frame
We‚Äôve created the frame for our 
interface items slightly differently. Instead 
of using the pack command in the main 
interface, we‚Äôre using grid to make sure they‚Äôre 
orientated in such a way that makes sense 
for the user. Padding does just that, setting 
up values to make sure the items in the frame 
don‚Äôt touch the edge of the window. Using the 
.grid command, we then create this frame. 
The row and column variables allow for rows 
and columns to be included in the structure of 
16 
Tie
The logic for determining the result is 
the same as before. We Ô¨Årst do the easy check ‚Äì 
whether or not the numeric value for the player 
and computer variable is the same. What changes 
this time is that, instead of printing the text, 
we send the ‚ÄúTie game‚Äù message to our result 
variable using the set function from Tkinter.
18 
Lose
This part of the overall if statement 
works in the same way as before, by assuming 
that if it isn‚Äôt a tie or a win, it‚Äôs a loss. Like the 
new version of the win code, it then uses set 
to change the message that will be displayed 
to the player, and calls upon and changes 
the computer score by putting it through the  
new_score variable.
19 
New window
As the original window is part of the 
mainloop, we cannot have the window be 
created using Tk() like in the main interface 
code. As this window is coming off it, though, 
we instead create it using Toplevel(). This 
allows the window to run separately and on 
top of the main window. We‚Äôve also given 
17 
Win 
The if statement continues by seeing if 
the player has won. Like before, we use the rules 
we set to make the comparison for the code to 
it a name, which will not change the main 
window‚Äôs name in the process.
make. We set the result_set like we did in the 
tie game, with a different message to the user. 
Finally, we set the new_score variable to be the 
current player score, using the get function to 
obtain it, plus one to the score, and then use 
set again to put it back into the player_score 
variable. We can‚Äôt use += with the player_score 
variable, as it is not a standard variable.

The Python Book  49
Python essentials
    rps_frame = Frame(rps_window, padding = ‚Äò3 3 12 12‚Äô, width = 300)
    rps_frame.grid(column=0, row = 0, sticky=(N,W,E,S))
    rps_frame.columnconfigure(0, weight=1)
    rps_frame.rowconfigure(0,weight=1)
    Label(rps_frame, text=‚ÄôPlayer‚Äô).grid(column=1, row = 1, sticky = W)
     Radiobutton(rps_frame, text =‚ÄôRock‚Äô, variable = player_choice, value = 1).grid(column=1, row=2, 
sticky=W)
     Radiobutton(rps_frame, text =‚ÄôPaper‚Äô, variable = player_choice, value = 2).grid(column=1, row=3, 
sticky=W)
     Radiobutton(rps_frame, text =‚ÄôScissors‚Äô, variable = player_choice, value = 3).grid(column=1, 
row=4, sticky=W)
    Label(rps_frame, text=‚ÄôComputer‚Äô).grid(column=3, row = 1, sticky = W)
    Label(rps_frame, textvariable = computer_choice).grid(column=3, row=3, sticky = W)
    Button(rps_frame, text=‚ÄùPlay‚Äù, command = start).grid(column = 2, row = 2)
    Label(rps_frame, text = ‚ÄúScore‚Äù).grid(column = 1, row = 5, sticky = W)
    Label(rps_frame, textvariable = player_score).grid(column = 1, row = 6, sticky = W)
    Label(rps_frame, text = ‚ÄúScore‚Äù).grid(column = 3, row = 5, sticky = W)
    Label(rps_frame, textvariable = computer_score).grid(column = 3, row = 6, sticky = W)
    Label(rps_frame, textvariable = result_set).grid(column = 2, row = 7)
if __name__ == ‚Äò__main__‚Äô:
    gui()
21 
22 
23 
23 
24 
25 
22 
Player‚Äôs choice
We create a label for the player‚Äôs move 
and assign it to a grid location, on the Ô¨Årst row, 
on the Ô¨Årst column. We also justify it to the left 
using ‚Äòsticky = W‚Äô. We then add the radio buttons 
for the player‚Äôs move, each on the same column 
but the following row down. We give each choice 
a name, then assign it to the player_choice 
variable. We then make each choice have a 
numerical value that corresponds to the moves 
we‚Äôve determined in the Ô¨Årst set of rules.
23 
Computer‚Äôs move
We display the computer move here. 
First of all, we label what this is and then create 
24 
Press Play
The running of the code all hinges on 
the Play button. It‚Äôs very simple: we put it in the 
row between the Player and Computer move as 
part of our three-column system; and it runs the 
start function using the command option. Due to 
the loop of the interface, we can keep pressing 
this without needing to be asked to play again. 
Simply exiting the window will go back to the 
main interface window as well, meaning we do 
not need a speciÔ¨Åc quit button.
25 
Running score
We have two sets of scores to display 
‚Äì one for the player and the other for the 
26 
End game
The Ô¨Ånal part of the code allows for 
the script to be used by the main window, and 
also allows for it to run on its own when used 
in the command line or shell. You‚Äôll need to 
perform some modiÔ¨Åcations to make it run on 
its own, such as making it the mainloop and not 
a Toplevel window. However, it will run just Ô¨Åne 
from both without the need to be launched from 
the main interface.
the window, and the sticky allows us to justify 
items with speciÔ¨Åc directions ‚Äì in this case top, 
left, right and bottom justiÔ¨Åcation. Finally, we 
then make sure each column and row is treated 
equally by giving them the same weighting, and 
starting from zero.
a second label to display the actual move. We 
do this by adding the textvariable option to 
Label, and using the computer_choice variable 
we updated earlier in the game function. This 
merely prints the text from the names list and 
justiÔ¨Åes this to the left.
computer. We label these the same way we‚Äôve 
done with labelling the Player and Computer 
move, having them on a lower row but still in 
the relevant columns. Below that, we use the 
textvariable option again to get the numerical 
score we assigned to the separate score 
variable. Finally, we create another label to 
display the message for the game‚Äôs outcome

50  The Python Book
Python essentials
Complete your trio of games with a graphical interface for the 
hangman and poker dice code
Bring graphics to simple 
Python games
We have now created a simple selector for the 
trio of Python games we made previously. This 
interface was able to launch a GUI for our rock, 
paper, scissors game, and run the other two in 
the terminal. Now, we‚Äôre going to convert the 
hangman and poker dice codes to work in a 
similar way to rock, paper, scissors.
The trick with hangman comes in allowing 
for a different type of input, text, and the ability 
to have multiple rounds of the game. Tkinter 
allows for text entry, and we rely a lot less on 
‚Äòwhile‚Äô loops to play the game in its entirety. 
Poker Dice needs to keep the dice analysis 
code, and the option to change speciÔ¨Åc dice 
using checkboxes.
We‚Äôll be modifying a large amount of the 
original code to Ô¨Åt in with the new graphical 
scheme. This mainly involves cutting speciÔ¨Åc 
parts and having the Tkinter-speciÔ¨Åc code 
handle these itself. The code listings on these 
pages include the modiÔ¨Åed code ‚Äì we‚Äôll discuss 
the graphical part on the following pages.
Resources
Python 2: www.python.org/download
IDLE: www.python.org/idle
1 Imported
Here we‚Äôre doing the 
same minor setup, 
including getting 
the Tkinter module 
that helps us create 
a simple graphical 
interface
2 Words 
We‚Äôre keeping 
our variables that 
determine the word to 
guess here so it can 
be easily accessed 
anywhere in the code
3 Function 
Like last time, we‚Äôre 
putting the majority of 
our original code into a 
new function, gui
4 Analysis
We select the word 
and analyse it before 
continuing on with the 
rest of the code
5 Graphics
The hangedman 
function is largely 
unchanged, albeit with 
new code to display 
our ASCII graphics on 
the interface
6 Guesses 
We check the number 
of mistakes made, and 
call the guess_letter 
function to check the 
letter entered
from Tkinter import *
from ttk import *
from random import *
word = 0
word_length = 0
clue = 0
def gui():
    global word, word_length, clue
    dictionary = [‚Äúgnu‚Äù,‚Äùkernel‚Äù,‚Äùlinux‚Äù,‚Äùmagei
a‚Äù,‚Äùpenguin‚Äù,‚Äùubuntu‚Äù]
    word = choice(dictionary)
    word_length = len(word)
    clue = word_length * [‚Äú_‚Äù]
    tries = 6
    def hangedman(hangman):
        graphic = [
        ‚Äú‚Äù‚Äù
            +-------+
            |       |
            |       O
            |      -|-
            |      / \   
            |       
        ===============
        ‚Äú‚Äù‚Äù]
        graphic_set = graphic[hangman]
        hm_graphic.set(graphic_set)
    def game():
        letters_wrong = incorrect_guesses.get()
        letter=guess_letter()
        first_index=word.find(letter)
        if  first_index == -1:
            letters_wrong +=1
             incorrect_guesses.set(letters_
wrong)
        else:
            for i in range(word_length):
                if letter == word[i]:
                    clue[i] = letter
        hangedman(letters_wrong)
        clue_set = ‚Äú ‚Äú.join(clue)
        word_output.set(clue_set)
        if letters_wrong == tries:
            result_text = ‚ÄúGame Over. The word 
was ‚Äú + word
            result_set.set(result_text)
            new_score = computer_score.get()
            new_score += 1
            computer_score.set(new_score)
        if ‚Äú‚Äù.join(clue) == word:
            result_text = ‚ÄúYou Win! The word 
was ‚Äú + word
            result_set.set(result_text)
            new_score = player_score.get()
            new_score += 1
            player_score.set(new_score)
    def guess_letter():
        letter = letter_guess.get()
        letter.strip()
        letter.lower()
        return letter
    def reset_game():
        global word, word_length, clue
        incorrect_guesses.set(0)
        hangedman(0)
        result_set.set(‚Äú‚Äù)
        letter_guess.set(‚Äú‚Äù)
        word = choice(dictionary)
        word_length = len(word)
        clue = word_length * [‚Äú_‚Äù]
        new_clue = ‚Äú ‚Äú.join(clue)
        word_output.set(new_clue)
if __name__ == ‚Äò__main__‚Äô:
    gui()
01 
02 
03 
04 
05 
06 
Hangman Code Listing

The Python Book  51
Python essentials
1 More imports
We‚Äôve added the new imported 
modules we need to make Tkinter 
work and keep the rest the same
2 Dice list
The list that holds the dice is kept 
outside the main function so that it 
can be accessed everywhere
3 Rolls
Same goes for the roll function. 
It doesn‚Äôt speciÔ¨Åcally need to be 
inside the gui function anyway
4 Decisions
The checkboxes in the graphical 
code we‚Äôre going to create later will 
give us numbers we can analyse for 
the code. We retrieve these numbers 
and check them to Ô¨Ånd out which 
dice the user wishes to re-roll
5 Hands
Finally, our hand analysis function 
is the last part of the original code 
that is kept outside the gui function. 
Both this and the above function 
pass the necessary details back 
up the chain to then be added into 
the new graphical elements of the 
new interface
6 No dice
If no dice have been selected to 
re-roll, the hand output is changed 
to show a Ô¨Ånal message
7 Re-roll
This part is almost the same as 
before ‚Äì a new set of dice are rolled 
and then inserted into the list of dice 
like before, then re-sorted to make 
the hand analysis easier
8 More functions
The new gui function is the main 
change to the Poker Dice code, 
and as before includes the Tkinter 
elements and other parts of the 
original code
9 Game start
A simple function that we can use to 
activate the re-rolls of the dice
10 New hand
The new dice are named, analysed, 
and everything is then set for the gui 
to display the Ô¨Ånal outcome
11 Reset
Like with the hangman code, we 
have a function to reset all the 
variables, allowing you to start the 
game again
from Tkinter import *
from ttk import *
import random
from itertools import groupby
dice = 0
def roll(roll_number):
        numbers = range(1,7)
        dice = range(roll_number)
        iterations = 0
        while iterations < roll_number:
            iterations = iterations + 1
            dice[iterations-1] = random.
choice(numbers)
        return dice
def hand(dice):
    dice_hand = [len(list(group)) for key, 
group in groupby(dice)]
    dice_hand.sort(reverse=True)
    straight1 = [1,2,3,4,5]
    straight2 = [2,3,4,5,6]
    if dice == straight1 or dice == 
straight2:
        return ‚Äúa straight!‚Äù
    elif dice_hand[0] == 5:
        return ‚Äúfive of a kind!‚Äù
    elif dice_hand[0] == 4:
        return ‚Äúfour of a kind!‚Äù
    elif dice_hand[0] == 3:
        if dice_hand[1] == 2:
            return ‚Äúa full house!‚Äù
        else:
            return ‚Äúthree of a kind.‚Äù
    elif dice_hand[0] == 2:
        if dice_hand[1] == 2:
            return ‚Äútwo pair.‚Äù
        else:
            return ‚Äúone pair.‚Äù
    else:
        return ‚Äúa high card.‚Äù
def gui():
    global dice
    dice = roll(5)
    dice.sort()
    nine = 1
    ten = 2
    jack = 3
    queen = 4
    king = 5
    ace = 6
    names = { nine: ‚Äú9‚Äù, ten: ‚Äú10‚Äù, jack: 
‚ÄúJ‚Äù, queen: ‚ÄúQ‚Äù, king: ‚ÄúK‚Äù, ace: ‚ÄúA‚Äù }
    result = ‚ÄúYou have ‚Äú + hand(dice)
    
    def game():
        throws()
            
    def throws():
        global dice        
        dice1_check = dice1.get()
        dice2_check = dice2.get()
        dice3_check = dice3.get()
        dice4_check = dice4.get()
        dice5_check = dice5.get()
        dice_rerolls = [dice1_check, 
dice2_check, dice3_check, dice4_check, 
dice5_check]
        for i in range(len(dice_rerolls)):
            if 0 in dice_rerolls:
                dice_rerolls.remove(0)
        if len(dice_rerolls) == 0:
            result = ‚ÄúYou finish with ‚Äú + 
hand(dice)
            hand_output.set(result)
        else:
            roll_number = len(dice_rerolls)
            number_rerolls = roll(roll_num-
ber)
            dice_changes = range(len(dice_
rerolls))
            iterations = 0
            while iterations < roll_number:
                iterations = iterations + 1
                dice_changes[iterations-1] 
= number_rerolls[iterations-1]
            iterations = 0
            while iterations < roll_number:
                iterations = iterations + 1
                replacement = number_
rerolls[iterations-1]
                dice[dice_
changes[iterations-1]] = replacement
            dice.sort()
            new_dice_list = [0,0,0,0,0]
            for i in range(len(dice)):
                new_dice_list[i] =  
names[dice[i]]
            final_dice = ‚Äú ‚Äú.join(new_dice_
list)
            dice_output.set(final_dice)
            final_result = ‚ÄúYou finish with 
‚Äú + hand(dice)
            hand_output.set(final_result)
        
    def reset_game():
        global dice
        dice = roll(5)
        dice.sort()
        for i in range(len(dice)):
            empty_dice[i] =  names[dice[i]]
        first_dice = ‚Äú ‚Äú.join(empty_dice)
        dice_output.set(first_dice)
        result = ‚ÄúYou have ‚Äú + hand(dice)
        hand_output.set(result)
if __name__ == ‚Äò__main__‚Äô:
    gui()
01 
02 
03 
04 
05 
11 
10 
09 
08 
07 
06 
Poker Dice Code Listing

525IF1ZUIPO#PPL
1ZUIPOFTTFOUJBMT
01 
02 
03 
01 
First lines 
As usual, we start off each program with 
the code that lets us run it in the command line, 
followed by importing the necessary modules: 
random, to determine the word to use; Tkinter, 
for the majority of the graphical code; and 
06 
Games begin
All the analysis of the letter we‚Äôve 
entered is done in this function. To that end, we 
start by obtaining the incorrect guesses so far 
from the variable we‚Äôve set up so the interface 
can access it if we want it to. The letter from 
the entry Ô¨Åeld in the interface is then obtained 
and cleaned up so it can be used with the rest of 
the code.
07 
Check the letter
This section of the code is again largely 
unchanged ‚Äì the letter is taken and compared to 
the word with Ô¨Ånd to see if it matches with one 
of the letters. The if statement then adds one to 
the incorrect guess variable, or updates the clue 
variable to add the letter in the right spot.
09 
Update scores
Exactly as before, we check to see if the 
player has won or lost yet. In the event of either, 
a message is displayed to signify this, and the 
wins and losses score is updated using set.
02 
Global variables
We have kept these three variables 
outside of the gui function so they can be 
04 
Random word
We bring in the three variables with 
global so we can modify them throughout 
the code, and then set the word. As before, a 
random item from the list of words is selected 
with choice, the length is ascertained, and the 
clue to display is set.
08 
Update interface
These three lines set the graphic for this 
round, join the current clue together as a string, 
and then set it on the variable for the interface 
to read.
03 
Graphical function
We‚Äôre putting all the working code into 
the gui function so it can be activated from the 
main interface. This means we can import the 
Hangman code into the interface without the 
game window popping up, and only run it when 
we activate the gui function from here.
05 
The hanged man
The main difference this time for the 
Hangman graphics is that instead of printing 
these out, we‚Äôre going to display them in the 
interface. When the function is called and the 
graphic selected, it‚Äôs placed in the variable we‚Äôve 
set up in the interface code that we‚Äôre using to 
display the result.
ttk, for the grid code we‚Äôll be using to align the 
different elements.
accessed at all points in the code. Python 2 does 
not allow you to call upon global variables when 
you‚Äôre in a nested function, whereas in Python 3 
this could have gone into the gui function.
09 
08 
07 
06 
05 
04 
#!/usr/bin/env python2
from Tkinter import *
from ttk import *
from random import *
word = 0
word_length = 0
clue = 0
def gui():
    global word, word_length, clue
    dictionary = [≈égnu≈è,≈èkernel≈è,≈èlinux≈è,≈èmageia≈è,≈èpenguin≈è,≈èubuntu≈è]
    word = choice(dictionary)
    word_length = len(word)
    clue = word_length * [≈é_≈è]
    tries = 6
    def hangedman(hangman):
        graphic = [
        ≈é≈è≈è
            +-------+
            |       |
            |       O
            |      -|-
            |      / \   
            |       
        ===============
        ≈é≈è≈è]
        graphic_set = graphic[hangman]
        hm_graphic.set(graphic_set)
    def game():
        letters_wrong = incorrect_guesses.get()
        letter=guess_letter()
        first_index=word.find(letter)
        if  first_index == -1:
            letters_wrong +=1
            incorrect_guesses.set(letters_wrong)
        else:
            for i in range(word_length):
                if letter == word[i]:
                    clue[i] = letter
        hangedman(letters_wrong)
        clue_set = ≈é ≈é.join(clue)
        word_output.set(clue_set)
        if letters_wrong == tries:
            result_text = ≈éGame Over. The word was ≈é + word
            result_set.set(result_text)
            new_score = computer_score.get()
            new_score += 1
            computer_score.set(new_score)
        if ≈é≈è.join(clue) == word:
            result_text = ≈éYou Win! The word was ≈é + word
            result_set.set(result_text)
            new_score = player_score.get()
            new_score += 1
            player_score.set(new_score)
YOU LOSE
When you‚Äôve run out of guesses, 
the game stops. From here, you 
can also reset the game to play 
again if you wish.

5IF1ZUIPO#PPL53
1ZUIPOFTTFOUJBMT
10 
11 
15 
12
16
13
14
12 
Interface variables
Tkinter only works with speciÔ¨Åc variables 
‚Äì we‚Äôve created all the ones we need or can use 
here. IntVars take integers, while StringVars take 
strings. We‚Äôve used get and set throughout the 
rest of the code with these to get and set values.
14 
Clue to Hangman
These labels are fairly straightforward 
‚Äì we‚Äôre either giving them Ô¨Åxed text, or telling 
them to use a speciÔ¨Åc textvariable so they can 
be updated as we play the game.
13 
Framed window
The frame is set up the same way as 
last time. We pad the frame from the edge of 
the window, set a grid, give it sticky points at 
compass points, and allow for setting objects 
with speciÔ¨Åc row and column points.
16 
Results and reset
The rest of the code is similar to what 
we‚Äôve done already: labels to display Ô¨Åxed text 
and the scores/result text that change. The 
button that activates the reset function is also 
put at the bottom here. The Ô¨Ånal two lines allow 
us to import the module into the interface code.
10 
Sanitise input
The guess_letter function purely gets 
the letter from the player input variable, strips it 
of any formatting, makes it lower case, and then 
returns it back to the game function. This is so 
the letter can be used properly.
11 
New window
We use the Toplevel command from 
Tkinter like last month to separate the loops of 
the main interface and game window. We then 
use title to call it Hangman.
15 
Text entry
Entry here sets a text box we will add the 
letters to. The exportselection option makes it 
so selecting the letter won‚Äôt immediately copy it 
to the clipboard, and the textvariable selection 
is where the code stores the letter added. The 
button activates the game function, analysing 
the letter the player entered.
 The frame is set 
up as before 
 
    def guess_letter():
        letter = letter_guess.get()
        letter.strip()
        letter.lower()
        return letter
    def reset_game():
        global word, word_length, clue
        incorrect_guesses.set(0)
        hangedman(0)
        result_set.set(‚Äú‚Äù)
        letter_guess.set(‚Äú‚Äù)
        word = choice(dictionary)
        word_length = len(word)
        clue = word_length * [≈é_≈è]
        new_clue = ≈é ≈é.join(clue)
        word_output.set(new_clue)
    hm_window = Toplevel()
    hm_window.title (≈éHangman≈è)
    incorrect_guesses = IntVar()
    incorrect_guesses.set(0)
    player_score = IntVar()
    computer_score = IntVar()
    result_set = StringVar()
    letter_guess = StringVar()
    word_output = StringVar()
    hm_graphic = StringVar()
    hm_frame = Frame(hm_window, padding = ƒÇ3 3 12 12ƒÅ, width = 300)
    hm_frame.grid(column=0, row = 0, sticky=(N,W,E,S))
    hm_frame.columnconfigure(0, weight=1)
    hm_frame.rowconfigure(0,weight=1)
    Label(hm_frame, textvariable = hm_graphic).grid(column=2, row = 1)
    Label(hm_frame, text=ƒÅWordƒÅ).grid(column=2, row = 2)
    Label(hm_frame, textvariable = word_output).grid(column=2, row = 3)
    Label(hm_frame, text=ƒÅEnter a letterƒÅ).grid(column=2, row = 4)
    hm_entry = Entry(hm_frame, exportselection = 0, textvariable = letter_guess).grid(column = 2, row = 5)
    hm_entry_button = Button(hm_frame, text = ≈éGuess≈è, command = game).grid(column = 2, row = 6)
    Label(hm_frame, text = ≈éWins≈è).grid(column = 1, row = 7, sticky = W)
    Label(hm_frame, textvariable = player_score).grid(column = 1, row = 8, sticky = W)
    Label(hm_frame, text = ≈éLosses≈è).grid(column = 3, row = 7, sticky = W)
    Label(hm_frame, textvariable = computer_score).grid(column = 3, row = 8, sticky = W)
    Label(hm_frame, textvariable = result_set).grid(column = 2, row = 9)
    replay_button = Button(hm_frame, text = ≈éReset≈è, command = reset_game).grid(column = 2, row = 10)
if __name__ == ƒÇ__main__ƒÅ:
    gui()
THE HANGMAN GUI
Press the updated Hangman 
button to launch a new window. 
Here we have the initial graphic, 
word clue and entry for the player 
to interact with. The scores 
are set to zero, and no result 
message is displayed as no 
games have been played yet.
ORIGINAL INTERFACE
You‚Äôll also need the interface 
code from last issue, which 
already works with the modiÔ¨Åed 
Rock, Paper, Scissors code. The 
way it was left off means it won‚Äôt 
work with the new code, so you‚Äôll 
have to change the command in 
each button from [game].start 
to [game].gui.

54  The Python Book
Python essentials
17 
19
24
22
20
18 
21 
23 
22 
First roll
As the window opens, we immediately 
make the Ô¨Årst roll. This is then sorted, each 
number is attributed to a card, and then the 
result is created to be displayed in the main 
window. This is similar to how it worked before, 
but instead it‚Äôs now entered into the StringVars 
for the interface towards the end of the script
23 
Start game
When we activate the button that starts 
game, it immediately sends us to the rest of the 
code. This would also work if you had the button 
go to the throws function instead; however, you 
can add other functions to this part if you wish.
24 
Dice selection
The Ô¨Årst thing we do is Ô¨Ånd out what 
checkboxes have been ticked by the player. We 
then put these in a list so we can change out the 
correct dice numbers. We‚Äôve also brought in dice 
so we can check against that what the current 
dice rolls are.
20 
Hand of dice
Like roll, nothing has changed for the 
hand function. It‚Äôs simply now placed outside 
the gui function for the exact same reasons. 
It also means that you can easily import this 
function into another script if you wish.
21 
GUI start
As we‚Äôve mentioned last month and in 
the Hangman code, we put all the GUI code into 
a function so that we can call on it when we want 
to. In this case, pressing the Poker Dice button 
on the main interface activates pokerdice.gui, 
which is this function.
18 
Outside dice
For Poker Dice, there‚Äôs only one variable 
to show at any one time, the dice. Again, due to 
the nested functions, and because we‚Äôre using 
Python 2, we need to call it with global from here 
to make sure the game can be reset properly.
19 
Dice rolls
The roll function has been removed from 
the gui function so as not to create any code 
errors with some of its variables. It can be easily 
called within the nested functions. It hasn‚Äôt 
changed at all from the original code.
17 
Start over
The 
usual 
array 
of 
command-line 
compatibility and module importing here. The 
groupby function is speciÔ¨Åcally imported here 
for dice analysis.
#!/usr/bin/env python2
from Tkinter import *
from ttk import *
import random
from itertools import groupby
dice = 0
def roll(roll_number):
        numbers = range(1,7)
        dice = range(roll_number)
        iterations = 0
        while iterations < roll_number:
            iterations = iterations + 1
            dice[iterations-1] = random.choice(numbers)
        return dice
def hand(dice):
    dice_hand = [len(list(group)) for key, group in groupby(dice)]
    dice_hand.sort(reverse=True)
    straight1 = [1,2,3,4,5]
    straight2 = [2,3,4,5,6]
    if dice == straight1 or dice == straight2:
        return ‚Äúa straight!‚Äù
    elif dice_hand[0] == 5:
        return ‚Äúfive of a kind!‚Äù
    elif dice_hand[0] == 4:
        return ‚Äúfour of a kind!‚Äù
    elif dice_hand[0] == 3:
        if dice_hand[1] == 2:
            return ‚Äúa full house!‚Äù
        else:
            return ‚Äúthree of a kind.‚Äù
    elif dice_hand[0] == 2:
        if dice_hand[1] == 2:
            return ‚Äútwo pair.‚Äù
        else:
            return ‚Äúone pair.‚Äù
    else:
        return ‚Äúa high card.‚Äù
def gui():
    global dice
    dice = roll(5)
    dice.sort()
    nine = 1
    ten = 2
    jack = 3
    queen = 4
    king = 5
    ace = 6
    names = { nine: ‚Äú9‚Äù, ten: ‚Äú10‚Äù, jack: ‚ÄúJ‚Äù, queen: ‚ÄúQ‚Äù, king: ‚ÄúK‚Äù, 
ace: ‚ÄúA‚Äù }
    result = ‚ÄúYou have ‚Äú + hand(dice)
    
    def game():
        throws()
            
    def throws():
        global dice        
        dice1_check = dice1.get()
        dice2_check = dice2.get()
        dice3_check = dice3.get()
        dice4_check = dice4.get()
        dice5_check = dice5.get()
        dice_rerolls = [dice1_check, dice2_check, dice3_check, dice4_
check, dice5_check]
THE POKER DICE GUI
Two things are being printed out 
on the initial window. The Ô¨Årst 
set of dice, ordered in the way 
we did last time, and the current 
hand. The checkboxes activate 
a speciÔ¨Åc number that is used 
when re-rolling dice with the 
Reroll button.
EXTRA GAME FUNCTIONS
We mentioned that the game function 
doesn‚Äôt necessarily need to be used right 
now. You can either clean up the code and 
remove it, or add extra functions, such 
as being able to choose a random new 
selection of dice, or making it two-player. 
Experiment with what you want to do!

The Python Book  55
Python essentials
25 
Dice to re-roll
If a checkbox isn‚Äôt selected, we have 
it set to give a zero value. We want to remove 
these from the list so that the correct dice 
are changed, so we use the for loop to check 
each part of the list, and then use the remove 
function when the element does equal zero.
26 
Early Ô¨Ånish
If no dice have been selected to re-roll, 
the list will contain all 0s, which will then be 
removed. The length of this list will then also be 
zero, meaning we can use that to end the game if 
the player hits Reroll without selecting any dice.
27 
New dice
This 
else 
function 
works 
roughly 
the same as before. We start by getting the 
necessary information for how many dice to roll, 
and a list to put the re-rolls. We then roll as many 
new dice as we need with the Ô¨Årst while loop
28 
Game over
We use the same kind of while loop to 
replace the new numbers into the original list, 
much like last time. Then the dice are re-sorted, 
analysed, joined as a string and then set into the 
interface‚Äôs variable. The Ô¨Ånal hand message is 
also create and set.
29 
Graphical variables
As we‚Äôre rolling the dice as soon as 
we launch the game, but the interface code 
doesn‚Äôt start until the end, you can see that 
after creating the necessary variables, we also 
then set them. Of note, the dice have to be made 
into a string separately with the for loop before 
adding to the variable.
30 
Check buttons
The main new addition to this code is 
the check buttons with Checkbutton. You can 
set an on and off value, with default off being 0. 
We‚Äôve made it so that the check buttons return 
the same number as the dice they‚Äôre changing, 
which we explained how we used earlier in the 
code. The variable option sets whatever the 
outcome is to the speciÔ¨Åc Tkinter variable.
25 
26 
27 
28 
29 
30 
 The check 
buttons are new 
 
        for i in range(len(dice_rerolls)):
            if 0 in dice_rerolls:
                dice_rerolls.remove(0)
        if len(dice_rerolls) == 0:
            result = ‚ÄúYou finish with ‚Äú + hand(dice)
            hand_output.set(result)
        else:
            roll_number = len(dice_rerolls)
            number_rerolls = roll(roll_number)
            dice_changes = range(len(dice_rerolls))
            iterations = 0
            while iterations < roll_number:
                iterations = iterations + 1
                dice_changes[iterations-1] = number_rerolls[iterations-1]
            iterations = 0
            while iterations < roll_number:
                iterations = iterations + 1
                replacement = number_rerolls[iterations-1]
                dice[dice_changes[iterations-1]] = replacement
            dice.sort()
            new_dice_list = [0,0,0,0,0]
            for i in range(len(dice)):
                new_dice_list[i] =  names[dice[i]]
            final_dice = ‚Äú ‚Äú.join(new_dice_list)
            dice_output.set(final_dice)
            final_result = ‚ÄúYou finish with ‚Äú + hand(dice)
            hand_output.set(final_result)
        
    def reset_game():
        global dice
        dice = roll(5)
        dice.sort()
        for i in range(len(dice)):
            empty_dice[i] =  names[dice[i]]
        first_dice = ‚Äú ‚Äú.join(empty_dice)
        dice_output.set(first_dice)
        result = ‚ÄúYou have ‚Äú + hand(dice)
        hand_output.set(result)
                
    pd_window = Toplevel()
    pd_window.title (‚ÄúPoker Dice‚Äù)
    dice_output = StringVar()
    empty_dice = [0,0,0,0,0]
    for i in range(len(dice)):
        empty_dice[i] =  names[dice[i]]
    first_dice = ‚Äú ‚Äú.join(empty_dice)
    dice_output.set(first_dice)
    hand_output = StringVar()
    hand_output.set(result)
    dice1 = IntVar()
    dice2 = IntVar()
    dice3 = IntVar()
    dice4 = IntVar()
    dice5 = IntVar()
    result_set = StringVar()
    player_score = IntVar()
    computer_score = IntVar()
    pd_frame = Frame(pd_window, padding = ‚Äò3 3 12 12‚Äô, width = 300)
    pd_frame.grid(column=0, row = 0, sticky=(N,W,E,S))
    pd_frame.columnconfigure(0, weight=1)
    pd_frame.rowconfigure(0,weight=1)
    Label(pd_frame, text=‚ÄôDice‚Äô).grid(column=3, row = 1)
    Label(pd_frame, textvariable = dice_output).grid(column=3, row = 2)
    Label(pd_frame, textvariable = hand_output).grid(column=3, row = 3)
    Label(pd_frame, text=‚ÄôDice to Reroll?‚Äô).grid(column=3, row = 4)
    reroll1 = Checkbutton(pd_frame, text = ‚Äú1‚Äù, variable = dice1, onvalue = 1, offvalue 
= 0).grid(column=1, row = 5)
    reroll2 = Checkbutton(pd_frame, text = ‚Äú2‚Äù, variable = dice2, onvalue = 2, offvalue 
= 0).grid(column=2, row = 5)
    reroll3 = Checkbutton(pd_frame, text = ‚Äú3‚Äù, variable = dice3, onvalue = 3, offvalue 
= 0).grid(column=3, row = 5)
    reroll4 = Checkbutton(pd_frame, text = ‚Äú4‚Äù, variable = dice4, onvalue = 4, offvalue 
= 0).grid(column=4, row = 5)
    reroll5 = Checkbutton(pd_frame, text = ‚Äú5‚Äù, variable = dice5, onvalue = 5, offvalue 
= 0).grid(column=5, row = 5)
    pd_reroll_button = Button(pd_frame, text = ‚ÄúReroll‚Äù, command = game).grid(column = 
3, row = 6)
    replay_button = Button(pd_frame, text = ‚ÄúReset‚Äù, command = reset_game).grid(column 
= 3, row = 7)
if __name__ == ‚Äò__main__‚Äô:
    gui()
ONE WINDOW
The way we‚Äôve made these Tkinter 
interfaces is to have the games 
launch in a separate window. You 
can have them all running in one 
window, though, by replacing the 
labels and buttons of the original 
interface by putting them as 
different functions or classes. 
Make sure to add a quit button to 
the games that lets you go back 
to the main page.

56  The Python Book
Python essentials
Build an app for 
Android with Python
Master Kivy, the excellent cross-platform application 
framework to make your Ô¨Å rst Android app‚Ä¶
The great thing about Kivy is there are loads 
of directions we could take it in to do some 
pretty fancy things. But, we're going to make 
a beeline for one of Kivy's coolest features 
- the ability it affords you to easily run your 
programs on Android.
We'll approach this by Ô¨Å rst showing how to 
make a new app, this time a dynamic Breakout-
to be drawn anywhere on your screen and on 
any widget type.
Before we can do any of this we'll need a class 
for each kind of game object, which we‚Äôre going 
to pre-populate with some of the properties 
that we'll need later to control them. Remember 
from last time, Kivy properties are special 
attributes declared at class level, which (among 
other things) can be modiÔ¨Å ed via kv language 
and dispatch events when they are modiÔ¨Å ed 
(Fig. 02).
The Game class will be one big widget 
containing the entire game. We've speciÔ¨Å cally 
made it a subclass of FloatLayout because 
this special layout is able to position and size 
its children in proportion to its own position 
and size ‚Äì so no matter where we run it or 
how we resize the window, it will place all the 
game objects appropriately.
Next we can use Kivy's graphics instructions 
to draw various shapes on our widgets. We'll 
just demonstrate simple rectangles to show 
their locations, though there are many more 
advanced options you might like to investigate. 
In a Python Ô¨Å le we can apply any instruction 
by declaring it on the canvas of any widget, an 
example of which is shown in Fig. 03.                
This would draw a red rectangle with the 
same position and size as the player at its 
moment of instantiation ‚Äì but this has a 
Before anything else, let's throw together a 
basic Kivy app (Fig. 01). We've pre-imported 
the widget types we'll be using, which this 
time are just three: the basic Widget with 
no special behaviour, the ModalView with a 
pop-up behaviour as used last time, and the 
FloatLayout as we will explaine later. Kivy 
has many other pre-built widgets for creating 
GUIs, but this time we‚Äôre going to focus on 
drawing the whole GUI from scratch using 
Kivy's graphics instructions. These comprise 
either vertex instructions to create shapes 
(including rectangles, lines, meshes, and so 
on) or contextual graphics changes (such as 
translation, rotation, scaling, etc), and are able 
QHere we've drawn all the simple graphics 
for our game‚Ä¶ now we just have to make 
the shapes actually do something!
style game. We'll then be able to compile this 
straight to an Android APK that you can use just 
like any other. 
Of course, once you have mastered the 
basic techniques you aren't limited to using 
any particular kind of app, as even on Android 
you can make use of all your favourite Python 
libraries to make any sort of program you like. 
Once you've mastered Kivy, your imagination 
is the only limit. If you're pretty new to Kivy, 
don't worry, we won't assume that you have 
any pre-existing knowledge. As long as you 
have mastered some of the Python tutorials 
in this book so far, and so have a fairly good 
understanding of the language, you shouldn‚Äôt 
have any problems following along.

5IF1ZUIPO#PPL57
1ZUIPOFTTFOUJBMT
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.modalview import ModalView
    
__version__ = '0.1'  # Used later during Android compilation 
class BreakoutApp(App):
    pass
        
BreakoutApp().run()
Fig. 01
from kivy.graphics.context_instructions import Color
    from kivy.graphics.vertex_instructions import Rectangle
    class Player(Widget):
        def __init__(self, **kwargs):
            super(Player, self).__init__(**kwargs)
            with self.canvas:
                Color(1, 0, 0, 1)  # r, g, b, a -> red
                Rectangle(pos=self.pos, size=self.size)
            # or without the with syntax, self.canvas.add(...)
Fig. 03
from kivy.properties import (ListProperty, NumericProperty,
                                 ObjectProperty, StringProperty)
    class Game(FloatLayout):  # Will contain everything
        blocks = ListProperty([])
        player = ObjectProperty()  # The game's Player instance
        ball = ObjectProperty()  # The game's Ball instance
    class Player(Widget):  # A moving paddle
        position = NumericProperty(0.5)
        direction = StringProperty('none')
    class Ball(Widget):  # A bouncing ball
        # pos_hints are for proportional positioning, see below
        pos_hint_x = NumericProperty(0.5)
        pos_hint_y = NumericProperty(0.3)
        proper_size = NumericProperty(0.)
        velocity = ListProperty([0.1, 0.5])
    class Block(Widget):  # Each coloured block to destroy
        colour = ListProperty([1, 0, 0])
Fig. 02
problem, unfortunately, as the drawing is 
static. When we later move the player widget, 
the red rectangle will stay in the same place, 
and the widget will be invisible when it is in its 
real position.
We could Ô¨Å x this by keeping references to our 
canvas instructions and repeatedly updating 
their properties to track the player, but there's 
actually an easier way to do all of this - we 
can use the Kivy language we introduced last 
time. It has a special syntax for drawing on 
the widget canvas, which we can use to draw 
each of our widget shapes:
<Player>:
  canvas:
    Color:
      rgba: 1, 1, 1, 1
    Rectangle:
      pos: self.pos
      size: self.size
<Ball>:
  canvas:
    Color:
      rgb: 1, 0.55, 0
    Rectangle:
      pos: self.pos
      size: self.size
<Block>:
  canvas:
    Color:
      rgb: self.colour 
      # A property we predefined above
    Rectangle:
      pos: self.pos
      size: self.size
    Color:
      rgb: 0.1, 0.1, 0.1
    Line:
      rectangle: 
        [self.x, self.y, 
        self.width, self.height]
                
The canvas declaration is special, underneath 
it we can write any canvas instructions we 
like. Don't get confused, canvas is not a 
widget and nor are graphics instructions 
like Line. This is just a special syntax that is 
unique to the canvas. Instructions all have 
different properties that can be set, like the 
pos and size of the rectangle, and you can 
check the Kivy documentation online for all 
the possibilities. The biggest advantage is 
that although we still declare simple canvas 
instructions, kv language is able to detect 
what Kivy properties we have referred to and 
automatically track them, so when they are 
updated (the widget moves or is resized) the 
canvas instructions move to follow!
 Once you have the basic techniques, 
you aren‚Äôt limited to one app‚Ä¶ your 
imagination is the only limit 
 

58  The Python Book
Python essentials
You probably noticed we had one of the 
Block‚Äôs ‚ÄòColor‚Äô instructions refer to its colour 
property. This means that we can change 
the property any time to update the colour 
of the block, or in this case to give each block  
a random colour (Fig. 04).
Now that each of our widgets has a graphical 
representation, let‚Äôs now tell our Game where to 
place them, so that we can start up the app and 
actually see something there.
class Game(FloatLayout):
  def setup_blocks(self):
    for y_jump in range(5):
      for x_jump in range(10):
        block = Block(pos_hint={
          'x': 0.05 + 0.09*x_jump,
          'y': 0.05 + 0.09*y_jump})
        self.blocks.append(block)
        self.add_widget(block)
class BreakoutApp(App):
  def build(self):
    g = Game()
    g.setup_blocks()
    return g
Here we create the widgets we want then use 
add_widget to add them to the graphics tree. Our 
root widget on the screen is an instance of Game 
and every block is added to that to be displayed.
The only new thing is that every Block 
has been given a pos_hint. All widgets have 
this special property, and it is used by 
FloatLayouts like our Game to set their 
position proportionate to the layout. 
The 
dictionary 
is 
able 
to 
handle 
various 
parameters, 
but 
in 
this 
case 
‚Äòx‚Äôand 
‚Äòy‚Äô 
give 
x 
and 
y 
Block 
position as a relative fraction of the  
parent width and height. 
You can run the app now, and this time 
it will add 50 blocks to the Game before 
displaying it on the screen. Each should have 
one of the three possible random colours  
and be positioned in a grid, but you'll now 
notice their sizes haven't been manually set 
so they all overlap. We can Ô¨Åx this by setting 
their size_hint properties ‚Äì and let's also  
take this opportunity to do the same for the 
other widgets  as well (Fig. 05).
This takes care of keeping all our game 
widgets positioned and sized in proportion 
to the Game containing them. Notice that 
the Player and Ball use references to the 
properties we set earlier, so we'll be able to 
move them by just setting these properties 
and letting kv language automatically update 
their positions. 
The Ball also uses an extra property to 
remain square rather than rectangular, just 
because the alternative would likely look a 
little bit odd.
We've now almost Ô¨Ånished the basic 
graphics of our app! All that remains is to add 
a Ball and a Player widget to the Game.
<Game>:
  ball: the_ball
  player: the_player
  Ball:
    id: the_ball
  Player:
    id: the_player
You can run the game again now, and should 
be able to see all the graphics working 
properly. Nothing moves yet, but thanks to 
the FloatLayout everything should remain in 
proportion if you resize the game/window.
Now we just have to add the game 
mechanics. For a game like this you usually 
want to run some update function many times 
per second, updating the widget positions and 
carrying out game logic ‚Äì in this case collisions 
with the ball (Fig. 06).
The Clock can schedule any function at 
any time, either once or repeatedly. A function 
scheduled at interval automatically receives the 
time since its last call (dt here), which we've passed 
through to the ball and player via the references 
we created in kv language. It's good practice to 
scale the update (eg ball distance moved) by this 
dt, so things remain stable even if something 
interrupts the clock and updates don't meet  
the regular 1/60s you want.
At this point we have also added the first steps 
toward handling keyboard input, by binding to  
the kivy Window to call a method of the Player 
every time a key is pressed. We can then finish  
off the Player class by adding this key handler along 
with touch/mouse input.
class Player(Widget):
  def on_touch_down(self, touch):
    self.direction = (
      'right' if touch.x > self.parent. 
center_x else 'left')
  def on_touch_up(self, touch):
    self.direction = 'none'
  def on_key_down(self, keypress, 
scancode, *args):
    if scancode == 275:
      self.direction = 'right'
    elif scancode == 276:
      self.direction = 'left'
    else:
      self.direction = 'none'
  def on_key_up(self, *args):
    self.direction = 'none'
  def update(self, dt):
    dir_dict = {'right': 1, 'left': -1, 
QRunning the app shows our coloured blocks on the 
screen‚Ä¶ but they all overlap! We can fix that easily

The Python Book  59
Python essentials
'none': 0}
      self.position += (0.5 * dt * dir_ 
dict[self.direction])
These on_touch_ functions are Kivy's general 
method for interacting with touch or mouse input, 
they are automatically called when the input 
is detected and you can do anything you like in 
response to the touches you receive. In this case 
we set the Player's direction property in response 
to either keyboard and touch/mouse input, and 
use this direction to move the Player when its 
update method is called. We can also add the right 
behaviour for the ball (Fig. 07).                        
This makes the ball bounce off every wall by 
forcing its velocity to point back into the Game, 
as well as bouncing from the player paddle ‚Äì 
but with an extra kick just to let the ball speed 
change. It doesn't yet handle any interaction 
with the blocks or any win/lose conditions,  
but it does try to call Game.lose() if the  
ball hits the bottom of the player's screen,  
so let's now add in some game end code to handle 
all of this (Fig. 08). And then add the code in Fig. 09 
to your 'breakout.kv 'file.
This should fully handle the loss or win, 
opening a pop-up with an appropriate message 
and providing a button to try again. Finally, we 
have to handle destroying blocks when the  
ball hits them (Fig. 10).
This fully covers these last conditions, checking 
collision via Kivy's built-in collide_widget method 
that compares their bounding boxes (pos and 
size). The bounce direction will depend on how far 
the ball has penetrated, as this will tell us how it 
first collided with the Block.
So there we have it, you can run the code to 
play your simple Breakout game. Obviously it's 
very simple right now, but hopefully you can 
see lots of different ways to add whatever extra 
behaviour you like ‚Äì you could add different 
types of blocks and power-ups, a lives system, 
more sophisticated paddle/ball interaction, or 
even build a full game interface with a menu and 
settings screen as well.
We‚Äôre just going to finish showing one cool thing 
that you can already do ‚Äì compile your game for 
Android! Generally speaking you can take any Kivy 
app and turn it straight into an Android APK that  
will run on any of your Android devices. You can 
even access the normal Android API to access 
hardware or OS features such as vibration,  
sensors or native notifications.
We'll build for Android using the Buildozer tool, 
and a Kivy sister project wrapping other build 
tools to create packages on different systems. 
This takes care of downloading and running the 
Android build tools (SDK, NDK, etc) and Kivy's 
Python-for-Android tools that create the APK.
import random
    class Block(Widget):
        def __init__(self, **kwargs):
            super(Block, self).__init__(**kwargs)
            self.colour = random.choice([
                (0.78, 0.28, 0), )0.28, 0.63, 0.28), )0.25, 0.28, 0.78)])
Fig. 04
    from kivy.clock import Clock
    from kivy.core.window import Window
    from kivy.utils import platform
    class Game(FloatLayout):
        def update(self, dt):
            self.ball.update(dt)  # Not defined yet
            self.player.update(dt)  # Not defined yet
        def start(self, *args):
            Clock.schedule_interval(self.update, 1./60.)
        def stop(self):
            Clock.unschedule(self.update)
        def reset(self):
            for block in self.blocks:
                self.remove_widget(block)
            self.blocks = []
            self.setup_blocks()
            self.ball.velocity = [random.random(), 0.5]
            self.player.position = 0.5
    class BreakoutApp(App):
        def build(self):
            g = Game()
            if platform() != 'android':
                Window.bind(on_key_down=g.player.on_key_down)
                Window.bind(on_key_up=g.player.on_key_up)
            g.reset()
            Clock.schedule_once(g.start, 0)
            return g
Fig. 06
<Block>:
    size_hint: 0.09, 0.05
    # ... canvas part
<Player>:
    size_hint: 0.1, 0.025
    pos_hint: {'x': self.position, 'y': 0.1}
    # ... canvas part
<Ball>:
    pos_hint: {'x': self.pos_hint_x, 'y': self.pos_hint_y}
    size_hint: None, None
    proper_size: 
        min(0.03*self.parent.height, 0.03*self.parent.width)
    size: self.proper_size, self.proper_size
    # ... canvas part
Fig. 05

60  The Python Book
Python essentials
Here you  will be needing some basic 
dependencies, which can be installed with 
ease 
just 
by 
using 
your 
distro's 
normal 
repositories. 
The 
main 
ones 
to 
use 
are 
OpenJDK7, 
zlib, 
an 
up-to-date 
Cython,  
and Git. If you are using a 64-bit distro you will also 
be in need of 32-bit compatibility libraries for zlib, 
libstdc++, as well as libgcc. You can then go on and 
download and install Buildozer:
git clone git://github.com/kivy/buildozer
cd buildozer
sudo python2.7 setup.py install
When 
you‚Äôre 
done 
with 
that 
part 
you 
can 
then 
go 
on 
and 
navigate 
to 
your  
Kivy app, and you‚Äôll have to name the main code file 
‚Äòmain.py‚Äô, this is the access point that the Android 
APK will expect. Then:
buildozer init
This creates a ‚Äòbuildozer.spec‚Äô file, a settings file 
containing all the information that Buildozer needs 
to create your APK, from the name and version to 
the specific Android build options. We suggest that 
you check through the whole file just to see what's 
available but most of the default settings will be 
fine, the only thing we suggest changing is (Fig. 11).
There are various other options you will often 
want to set, but none are really all that vital right 
now, so you‚Äôre able to immediately tell Buildozer to 
build your APK and get going!
buildozer android debug
This will take some time, so be patient and it will 
work out fine. When you first run it, it will download 
both the Android SDK and NDK, which are large 
(at least hundreds of megabytes) but vital to the 
build. It will also take time to build these and to 
compile the Python components of your APK. A lot 
of this only needs to be done once,  as future builds 
will take a couple of minutes if you change the 
buildozer.spec, or just a few seconds if you've only 
changed your code.
The APK produced is a debug APK, and you can 
install and use it but there are extra steps if you 
want to fully digitally sign it so that it can be posted 
on the Play store. This isn't hard, and Buildozer 
can do some of the work, but you can check the 
documentation online for full details.
Assuming everything goes fine (it should!), 
your Android APK will be in a newly created 'bin' 
directory with the name ‚ÄòKivyBreakout-0.1-debug.
apk‚Äô. You can send it to your phone any way you 
like (eg email), though you may need to enable 
application installation from unknown sources in 
your Settings before you can install it.
 class Ball(Widget)
        def update(self, dt):
            self.pos_hint_x += self.velocity[0] * dt
            self.pos_hint_y += self.velocity[1] * dt
            if self.right > self.parent.right:  # Bounce from right
                self.velocity[0] = -1 * abs(self.velocity[0])
            if self.x < self.parent.x:  # Bounce from left
                self.velocity[0] = abs(self.velocity[0])
            if self.top > self.parent.top:  # Bounce from top
                self.velocity[1] = -1 * abs(self.velocity[1])
            if self.y < self.parent.y:  # Lose at bottom
                self.parent.lose()  # Not implemented yet
            self.bounce_from_player(self.parent.player)
        def bounce_from_player(self, player):
            if self.collide_widget(player):
                self.velocity[1] = abs(self.velocity[1])
                self.velocity[0] += (
                    0.1 * ((self.center_x - player.center_x) / 
                            player.width))
Fig. 07
class GameEndPopup(ModalView):
        message = StringProperty()
        game = ObjectProperty()
        
    class Game(Widget):
        def lose(self):
            self.stop()
            GameEndPopup(message='[color=#ff0000]You lose![/color]',
                         game=self).open()
        def win(self):  # Not called yet, but we'll need it later
            self.stop()
            GameEndPopup(message='[color=#00ff00]You win![/color]',
                         game=self).open()
Fig. 08
    <GameEndPopup>:
        size_hint: 0.8, 0.8  
        auto_dismiss: False  # Don't close if player clicks outside
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: root.message
                font_size: 60
                markup: True
                halign: 'center'
            Button:
                size_hint_y: None
                height: sp(80)
                text: 'Play again?'
                font_size: 60
                on_release: root.game.start(); root.dismiss()
Fig. 09

        self.parent.do_layout()
        self.parent.destroy_blocks(self)
        
class Game(FloatLayout):
    def destroy_blocks(self, ball):
        for i, block in enumerate(self.blocks):
            if ball.collide_widget(block):
                y_overlap = (
                    ball.top - block.y if ball.velocity[1] > 0
                    else block.top - ball.y) / block.size_hint_y
                x_overlap = (
                    ball.right - block.x if ball.velocity[0] > 0
                    else block.right - ball.x) / block.size_hint_x
                if x_overlap < y_overlap:
                    ball.velocity[0] *= -1
                else:
                    ball.velocity[1] *= -1
                self.remove_widget(block)
                self.blocks.pop(i)
                if len(self.blocks) == 0:
                    self.win()
                return  # Only remove at most 1 block per frame
Fig. 10
title = Kivy Breakout  # Displayed in your app drawer
package.name = breakout  # Just a unique identifying string,
                         # along with the package.domain
fullscreen = 0  # This will mean the navbar is not covered
log_level = 2  # Not vital, but this will print a lot more debug
               # information and may be useful if something
               # goes wrong
Fig. 11
Putting your APK 
on the Play Store
Find out how to digitally sign a release 
APK and upload it to an app store of 
your choice
1 
Build and sign a release APK
First we have to begin by creating a personal 
digital key, then using it to digitally sign a 
special release version of the APK. Run these 
commands, and follow the instructions they then 
give you.
## Create your personal digital key 
 
## You can choose your own
## keystore name, alias, and passwords.
$ keytool -genkey -v -keystore test- 
release-key.keystore \
   -alias test-alias -keyalg RSA 
-keysize 2048 -validity 10000
## Compile your app in release mode
$ buildozer android release 
## Sign the APK with your new key
$ jarsigner -verbose -sigalg 
SHA1withRSA -digestalg SHA1 \
   -keystore ./test-release-key.keystore \
   ./bin/KivyBreakout-0.1-release- 
unsigned.apk test-alias
## Align the APK zip file
$ ~/.buildozer/android/platform/android- 
sdk-21/tools/zipalign -v 4 \
   ./bin/KivyBreakout-0.1-release- 
unsigned.apk \
   ./bin/KivyBreakout-0.1-release.apk
3 
Upload your app to the store
Click 
'Add 
new 
application' 
to submit your app the store, 
including uploading your APK and 
adding 
description 
text. 
When 
everything is ready, simply click 
Publish, and it should take just a few 
hours for your app to go live!
2 
Sign up as a Google 
Play Developer
Visit 
https://play.google.com/
apps/publish/signup, 
and 
follow 
the instructions. You'll need to pay a 
one-off $25 charge, but then you can 
upload as many apps as you like.
Python essentials
QYour game should run on any modern Android device‚Ä¶ you 
can even build a release version and publish to an app store!

62  The Python Book
Python essentials
Python provides quick and easy way to build 
applications, including web apps. Read on to find out 
how to use it to build a feature-complete web app 
Making web apps with Python
02 
ConÔ¨Åguring the Django project 
settings
Before we start working on the application, 
let‚Äôs conÔ¨Ågure the Django project as per our 
requirements.
Edit ludIssueTracker/settings.py as follows 
(only parts requiring modiÔ¨Åcation are shown):
Database Settings: We will be using SQLite3 
as our database system.
NOTE: Red text indicates new code or  
updated code.
‚Äòdefault‚Äô: {
        ‚ÄòENGINE‚Äô: ‚Äòdjango.
db.backends.sqlite3‚Äô,
        ‚ÄòNAME‚Äô: ‚Äòludsite.db3,
Path settings
Django requires an absolute path for directory 
settings. But we want to be able to pass in the 
relative directory references. In order to do that 
we will add a helper Python function. Insert the 
following code at the top of the settings.py Ô¨Åle:
import os
def getabspath(*x):
 
return os.path.join(os.path.
abspath(os.path.dirname(__file__)), 
*x)
Now you can update the path options:
@code
TEMPLATE_DIRS = (
 
getabspath(‚Äòtemplates‚Äô)
)
MEDIA_ROOT = getabspath(‚Äòmedia‚Äô)
Python is known for its simplicity and 
capabilities. At this point it is so advanced 
that there is nothing you cannot do with 
Python, and conquering the web is one of the 
possibilities. When you are using Python for web 
development you get access to a huge catalogue 
of modules and community support ‚Äì make the 
most of them.
Web development in Python can be done 
in many different ways, right from using the 
plain old CGI modules to utilising fully groomed 
web frameworks. Using the latter is the most 
popular method of building web applications 
with Python, since it allows you to build 
applications without worrying about all that 
low-level implementation stuff. There are many 
web frameworks available for Python, such 
as Django, TurboGears and Web2Py. For this 
tutorial we will be using our current preferred 
option, Django.
01 
Creating the Django Project 
magazine issue tracker
The django-admin.py Ô¨Åle is used to create new 
Django projects. Let‚Äôs create one for our issue 
tracker project‚Ä¶
In Django, a project represents the site and 
its settings. An application, on the other hand, 
represents a speciÔ¨Åc feature of the site, like 
blogging or tagging. The beneÔ¨Åt of this approach 
is that your Django application becomes 
portable and can be integrated with other 
Django sites with very little effort.
$ django-admin.py startproject 
ludIssueTracker
A project directory will be created. This will also 
act as the root of your development web server 
that comes with Django. Under the project 
directory you will Ô¨Ånd the following items‚Ä¶
manage.py: Python script to work with your 
project.
ludIssueTracker: A python package (a directory 
with __init__.py Ô¨Åle) for your project. This 
package contains your project‚Äôs settings and 
conÔ¨Åguration data.
ludIssueTracker/settings.py: This Ô¨Åle contains 
all the conÔ¨Åguration options for the project. 
ludIssueTracker/urls.py: 
This 
Ô¨Åle 
contains 
various URL mappings.
wsgi.py: An entry-point for WSGI-compatible 
web servers to serve your project. Only useful 
when you are deploying your project. For this 
tutorial we won‚Äôt be needing it.
Resources
Python 2.7: 
https://www.python.org/download/releases/2.7/
Django version 1.4:  
https://www.djangoproject.com/

The Python Book  63
Python essentials
03 
Creating ludissues app
In this step we will create the primary 
app for our site, called ludissues. To do that, we 
will use the manage.py script:
$ python manage.py startapp 
ludissues
We will need to enable this app in the conÔ¨Åg Ô¨Åle 
as well:
INSTALLED_APPS = (
    .............
    'django.contrib.admin',
    ‚Äòludissues‚Äô,
)
04 
Creating the data model
This is the part where we deÔ¨Åne the 
data model for our app. Please see the inline 
comments to understand what is happening.
From django.db import models:
# We are importing the user 
authentication module so that we use 
the built
# in authentication model in this 
app
from django.contrib.auth.models 
import User
# We would also create an admin 
interface for our app
from django.contrib import admin
# A Tuple to hold the multi choice 
char fields.
# First represents the field name 
the second one repersents the 
display name
ISSUE_STATUS_CHOICES = (
MEDIA_URL = ‚Äò/media/‚Äô
Now we will need to enable the admin interface 
for our Django site. This is a neat feature of Django 
which allows the automatic creation of an admin 
interface of the site based on the data model. The 
admin interface can be used to add and manage 
content for a Django site.
Uncomment the following line:
INSTALLED_APPS = (
    ‚Äòdjango.contrib.auth‚Äô,
    ‚Äòdjango.contrib.contenttypes‚Äô,
    ‚Äòdjango.contrib.sessions‚Äô,
    ‚Äòdjango.contrib.sites‚Äô,
    ‚Äòdjango.contrib.messages‚Äô,
    ‚Äòdjango.contrib.staticfiles‚Äô,
    ‚Äòdjango.contrib.admin‚Äô,
    # ‚Äòdjango.contrib.admindocs‚Äô,
)
    ('new', 'New'),
    ('accepted','Accepted'),
    ('reviewed','Reviewed'),
    ('started','Started'),
    ('closed','Closed'),
)
class Issue(models.Model):
    # owner will be a foreign key 
to the User model which is already 
built-in Django
    owner = models.ForeignKey(User,n
ull=True,blank=True)
    # multichoice with defaulting to 
"new"
    status = models.CharField(max_
length=25,choices=ISSUE_STATUS_
CHOICES,default='new')
    summary = models.TextField()
    # date time field which will be 
set to the date time when the record 
is created
    opened_on = models.
DateTimeField('date opened', auto_
now_add=True)
    modified_on = models.
DateTimeField('date modified', auto_
now=True)
    def name(self):
        return self.summary.
split('\n',1)[0]
# Admin front end for the app. We 
are also configuring some of the
# built in attributes for the admin 
interface on
# how to display the list, how it 
will be sorted
# what are the search fields etc.
class IssueAdmin(admin.ModelAdmin):
    date_hierarchy = 'opened_on'
    list_filter = ('status','owner')
    list_display = ('id','name','sta
tus','owner','modified_on')
    search_fields = 
['description','status']
# register our site with the Django 
admin interface
admin.site.
register(Issue,IssueAdmin)
To have the created data model reÔ¨Çected in the 
database, run the following command:
$ python manage.py syncdb
You‚Äôll be also asked to create a superuser for it:
You just installed Django's auth 
system, which means you don't have 
any superusers defined.
Would you like to create one now? 
(yes/no): yes
05 
Enabling the admin site
The admin site is already enabled, 
but we need to enable it in the urls.py Ô¨Åle ‚Äì this 
contains the regex-based URL mapping from 
model to view. Update the urls.py Ô¨Åle as follows:
from django.conf.urls import 
patterns, include, url
from django.contrib import admin
admin.autodiscover()
urlpatterns = patterns(‚Äò‚Äô,
    url(r‚Äô^admin/‚Äô, include(admin.
site.urls)),
)
06 
Starting the Django web server
Django includes a built-in web server 
which is very handy to debug and test Django 
applications. Let‚Äôs start it to see how our admin 
interface works‚Ä¶
To start the web server:
$ python manage.py runserver
If you do not have any errors in your code, the 
server should be available on port 8000. To 
launch the admin interface, navigate your 
browser to http://localhost:8000/admin.
You will be asked to log in here. Enter the 
username and password that you created while 
syncing the database. 
After logging in, you will notice that all the apps 
installed in your project are available here. We are 
only interested in the Auth and LudIssues app. 
You can click the +Add to add a record. Click 
the Add button next to Users and add a few 
users to the site. 
Once you have the users inside the system, 
you can now add a few issues to the system. 
Q Admin login screen

64  The Python Book
Python essentials
07 
Creating the public user interface 
for ludissues
At this point, the admin interface is working. But 
we need a way to display the data that we have 
added using the admin interface. But there is no 
public interface. Let‚Äôs create it now.
We will have to begin by editing the main  
urls.py (ludIssueTracker/urls.py). 
urlpatterns = patterns(‚Äò‚Äô,
    (r‚Äô^‚Äô,include(‚Äòludissues.
urls‚Äô)),
    (r‚Äô^admin/‚Äô, include(admin.site.
urls)),
)
This ensures that all the requests will be 
processed by ludissues.urls Ô¨Årst.
08 
Creating ludissues.url
Create a urls.py Ô¨Åle in the app directory 
(ludissues/urls.py) with the following content:
from django.conf.urls import 
patterns, include, url
# use ludissues model
from models import ludissues
# dictionary with all the objects in 
ludissues
info = {
    ‚Äòqueryset‚Äô:ludissues.objects.
all(),
}
# To save us writing lots of python 
code
# we are using the list_detail 
generic view
#list detail is the name of view we 
are using
urlpatterns = patterns(‚Äòdjango.
views.generic.list_detail‚Äô,
#issue-list and issue-detail are the 
09 
Setting up template and media 
directories 
In this step we will create the template and 
media directories. We have already mentioned 
the template directory as 
TEMPLATE_DIRS = (
    getabspath(‚Äòtemplates‚Äô)
)
Which 
translates 
to 
ludIssueTracker/
ludIssueTracker/templates/. Since we will be 
accessing the templates from the ludissues 
app, the complete directory path would be 
ludIssueTracker/ludIssueTracker/templates/
ludissues. 
Create 
these 
folders 
in 
your  
project folder.
Also, create the directory ludIssueTracker/
ludIssueTracker/media/ for holding the CSS 
Ô¨Åle. Copy the style.css Ô¨Åle from the resources 
directory of the code folder.
To serve Ô¨Åles from this folder we need to make 
it available publicly. To do that, open settings.py 
and add the following lines in ludIssueTracker/
ludIssueTracker/urls.py:
from django.conf.urls import 
patterns, include, url
from django.conf import settings
# Uncomment the next two lines to 
enable the admin:
from django.contrib import admin
admin.autodiscover()
urlpatterns = patterns(‚Äò‚Äô,
    (r‚Äô^‚Äô,include(‚Äòludissues.
urls‚Äô)),
    (r‚Äô^admin/‚Äô, include(admin.site.
Q Admin homepage
Q The ‚ÄòAdd issue‚Äô menu
Q The list view for issues
Click the Add button next to Issues. Here you 
will notice that you can enter Owner, Status 
and Summary for the issue. But what about 
the opened_on and modiÔ¨Åed_on Ô¨Åeld that 
we deÔ¨Åned while modelling the app? They 
are not here because they are not supposed 
to be entered by the user. opened_on will 
automatically set to the date time it is created 
and modiÔ¨Åed_on will automatically set to the 
date time on which an issue is modiÔ¨Åed.
Another cool thing is that the owner Ô¨Åeld is 
automatically populated with all the users inside 
the site. 
We have deÔ¨Åned our list view to show ID, 
name, status, owner and ‚ÄòmodiÔ¨Åed on‚Äô in the 
model. You can get to this view by navigating to 
http://localhost:8000/admin/ludissues/issue/.
template names
#which will be looked in the default 
template
#directories
    url(r‚Äô^$‚Äô,‚Äôobject_
list‚Äô,info,name=‚Äôissue-list‚Äô),
    url(r‚Äô^(?P<object_
id>\d+)/$‚Äô,‚Äôobject_
detail‚Äô,info,name=‚Äôissue-detail‚Äô),
    
)
To display an issue list and details, we are using 
a Django feature called generic views. In this 
case we are using views called list and details. 
This allow us to create an issue list view and 
issue detail view. These views are then applied 
using the issue_list.html and issue_detail.html 
template. In the following steps we will create 
the template Ô¨Åles.

The Python Book  65
Python essentials
10 
Creating the template Ô¨Åles
Templates will be loaded from the 
ludIssueTracker/ludIssueTracker/templates 
directory. In Django, we start with the 
ludIssueTracker/ludIssueTracker/templates/
base.html template. Think of it as the master 
template which can be inherited by slave ones.
ludIssueTracker/ludIssueTracker/templates/
base.html
<!DOCTYPE html PUBLIC ‚Äú-//W3C//DTD 
XHTML Strict//EN‚Äù
‚Äú HYPERLINK ‚Äúhttp://www.w3.org/
TR/xhtml1/DTD/xhtml1-strict.dtd‚Äù 
http://www.w3.org/TR/xhtml1/DTD/
xhtml1-strict.dtd‚Äù>
<html>
 
<head>
 
 
<title>{% block title %}{% 
endblock %}LUD Issues</title>
 
 
<link rel=‚Äùstylesheet‚Äù 
href=‚Äù{{ MEDIA_URL }}style.css‚Äù 
type=‚Äùtext/css‚Äù media=‚Äùscreen‚Äù />
 
</head>
 
<body>
 
 
<div id=‚Äùhd‚Äù>
 
 
 
<h1>LUD Issue 
Tracker</span></h1>
 
 
</div>
 
 
<div id=‚Äùmn‚Äù>
 
 
 
<ul>
 
 
 
 
<li><a 
href=‚Äù{% url issue-list %}‚Äù 
class=‚Äùsel‚Äù>View Issues</a></li>
 
 
 
 
<li><a 
href=‚Äù/admin/‚Äù>Admin Site</a></li>
 
 
 
</ul>
 
 
</div>
 
 
<div id=‚Äùbd‚Äù>
 
 
 
{% block content %}
{% endblock %}
 
 
</div>
 
</body>
</html>
{{ variablename }} represents a Django variable.
(% block title %} represents blocks. Contents 
of a block are evaluated by Django and are 
displayed. These blocks can be replaced by the 
child templates. 
Q The magazine Issue Tracker in action ‚Äì list of issues
urls)),
    (r‚Äô^media/
(?P<path>.*)$‚Äô,‚Äôdjango.views.static.
serve‚Äô,
     {‚Äòdocument_root‚Äô:settings.
MEDIA_ROOT})
)
Now we need to create the issue_list.html  
template. This template is responsible for 
displaying all the issues available in the system.
ludIssueTracker/ludIssueTracker/templates/
ludissues/issue_list.html 
{% extends ‚Äòbase.html‚Äô %}
{% block title %}View Issues - {% 
endblock %}
{% block content %}
<table cellspacing=‚Äù0‚Äù 
class=‚Äùcolumn-options‚Äù>
<tr>
<th>Issue</th>
<th>Description</th>
<th>Status</th>
<th>Owner</th>
</tr>
{% for issue in object_list %}
<tr>
<td><a href=‚Äù{% url issue-
detail issue.id %}‚Äù>{{ issue.id }}</
a></td>
<td><a href=‚Äù{% url issue-
detail issue.id %}‚Äù>{{ issue.name 
}}</a></td>
<td>{{ issue.status }}</td>
<td>{{ issue.owner}}</td>
</tr>
{% endfor %}
</table>
{% endblock %}
Here we are inheriting the base.html Ô¨Åle that we 
created earlier. {% for issue in object_list %} 
runs on the object sent by the urls.py. Then we 
are iterating on the object_list for issue.id and 
issue.name.
Now we will create issue_detail.html. This 
template is responsible for displaying the detail 
view of a case.
ludIssueTracker/ludIssueTracker/templates/
ludissues/issue_detail.html
{% extends ‚Äòbase.html‚Äô %}
{% block title %}Issue #{{ object.id 
}} - {% endblock %}
{% block content %}
<h2>Issue #{{ object.id }} <span>{{ 
object.status }}</span></h2>
<div class=‚Äùissue‚Äù>
 
<h2>Information</h2>
 
<div class=‚Äùdate‚Äù>
 
 
<p class=‚Äùcr‚Äù>Opened {{ 
object.opened_on }} ago</p>
 
 
<p class=‚Äùup‚Äù>Last modified 
{{ object.modified_on }} ago</p>
 
</div>
 
<div class=‚Äùclear‚Äù>&nbsp;</div>
 
<div class=‚Äùblock w49 right‚Äù>
 
 
<p class=‚Äùass title‚Äù>Owner</
p>
 
 
<p class=‚Äùass‚Äù>{{ object.
owner }}</p>
 
</div>
 
<div class=‚Äùclear‚Äù>&nbsp;</div>
 
<div class=‚Äùblock‚Äù>
 
 
<p class=‚Äùdes 
title‚Äù>Summary</p>
 
 
<p class=‚Äùdes‚Äù>{{ object.
summary }}</p>
 
</div>
</div>
{% endblock %}
And that‚Äôs everything! The issue tracker app is 
now complete and ready to use. You can now 
point your browser at localhost:8000 to start 
using the app.

66  The Python Book
Python essentials
Python is a programming language that lets you work more quickly and 
integrate your systems more effectively. Today, Python is one of the most 
popular programming languages in the open source space. Look around 
and you will find it running everywhere, from various configuration tools 
to XML parsing. Here is the collection of 50 gems to make your Python 
experience worthwhile‚Ä¶
Basics
1. Running Python scripts 
On most of the UNIX systems, you can run 
Python scripts from the command line.
$ python mypyprog.py
2. Running Python 
programs from  
Python interpreter
The Python interactive interpreter makes it 
easy to try your Ô¨Årst steps in programming and 
using all Python commands. You just issue each 
command at the command prompt (>>>), one by 
one, and the answer is immediate. 
Python interpreter can be started by issuing 
the command:
$ python 
kunal@ubuntu:~$ python
Python 2.6.2 (release26-maint, Apr 
19 2009, 01:56:41) 
[GCC 4.3.3] on linux2
Type ‚Äúhelp‚Äù, ‚Äúcopyright‚Äù, ‚Äúcredits‚Äù 
or ‚Äúlicense‚Äù for more information.
>>> <type commands here>
In this article, all the code starting at the   
>>> symbol is meant to be given at the  
Python prompt.
It is also important to remember that Python 
takes tabs very seriously ‚Äì so if you are  
receiving any error that mentions tabs, correct 
the tab spacing.
3. Dynamic typing
In Java, C++, and other statically typed 
languages, you must specify the data type of 
the function return value and each function 
argument. On the other hand, Python is 
a dynamically typed language. In Python 
you never have to explicitly specify the data 
type of anything. Based on what value you 
assign, Python will keep track of the data  
type internally.
50 
Python
tips

The Python Book  67
Python essentials
x,y = my_function.minmax(25, 6.3)
9. Module defined names
Example:
The built-in function ‚Äòdir()‚Äô can be used to Ô¨Ånd 
out which names a module deÔ¨Ånes. It returns a 
sorted list of strings.
>>> import time
>>> dir(time)
[‚Äò__doc__‚Äô, ‚Äò__file__‚Äô, ‚Äò__name__‚Äô, 
‚Äò__package__‚Äô, ‚Äòaccept2dyear‚Äô, 
‚Äòaltzone‚Äô, ‚Äòasctime‚Äô, ‚Äòclock‚Äô, 
‚Äòctime‚Äô, ‚Äòdaylight‚Äô, ‚Äògmtime‚Äô, 
‚Äòlocaltime‚Äô, ‚Äòmktime‚Äô, ‚Äòsleep‚Äô, 
‚Äòstrftime‚Äô, ‚Äòstrptime‚Äô, ‚Äòstruct_
time‚Äô, ‚Äòtime‚Äô, ‚Äòtimezone‚Äô, ‚Äòtzname‚Äô, 
‚Äòtzset‚Äô]
10. Module internal 
documentation
You can see the internal documentation (if 
available) of a module name by looking at  
.__doc__.
Example:
>>> import time
>>> print time.clock.__doc__
clock() -> floating point number
This example returns the CPU time or real time 
since the start of the process or since the Ô¨Årst 
call to clock(). This has as much precision as the 
system records. 
11. Passing arguments  
to a Python script
Python lets you access whatever you have passed 
to a script while calling it. The ‚Äòcommand line‚Äô 
content is stored in the sys.argv list.
import sys
print sys.argv
12. Loading modules or 
commands at startup
You 
can 
load 
predeÔ¨Åned 
modules 
or 
commands at the startup of any Python 
script by using the environment variable 
$PYTHONSTARTUP. You can set environment 
variable $PYTHONSTARTUP to a Ô¨Åle which 
contains 
the 
instructions 
load 
necessary 
modules or commands .
13. Converting a string  
to date object
You can use the function ‚ÄòDateTime‚Äô to convert a 
string to a date object.
Example:
from DateTime import DateTime
dateobj = DateTime(string)
14. Converting a list  
to a string for display
You can convert a list to string in either of the 
following ways.
1st method:
>>> mylist = [‚Äòspam‚Äô, ‚Äòham‚Äô, ‚Äòeggs‚Äô]
>>> print ‚Äò, ‚Äò.join(mylist)
spam, ham, eggs
2nd method:
>>> print ‚Äò\n‚Äô.join(mylist)
spam
ham
eggs
15. Tab completion  
in Python interpreter
You can achieve auto completion inside Python 
interpreter by adding these lines to your .pythonrc 
Ô¨Åle (or your Ô¨Åle for Python to read on startup):
import rlcompleter, readline
readline.parse_and_bind(‚Äòtab: complete‚Äô)
This will make Python complete partially typed 
function, method and variable names when you 
press the Tab key.
16. Python  
documentation tool
You can pop up a graphical interface for searching 
the Python documentation using the command:
$ pydoc -g
You will need python-tk package for this to work.
17. Python  
documentation server
You can start an HTTP server on the given port on 
the local machine. This will give you a nice-looking 
access to all Python documentation, including 
third-party module documentation.
$ pydoc -p <portNumber>
18. Python development 
software
There are plenty of tools to help with Python 
development. Here are a few important ones:
IDLE: 
The 
Python 
built-in 
IDE, 
with 
autocompletion, function signature popup help, 
and Ô¨Åle editing.
IPython: Another enhanced Python shell with 
tab-completion and other features.
Eric3: A GUI Python IDE with autocompletion, 
class browser, built-in shell and debugger.
WingIDE: Commercial Python IDE with 
free licence available to open-source 
developers everywhere.
4. Python statements
Python uses carriage returns to separate 
statements, and a colon and indentation to 
separate code blocks. Most of the compiled 
programming languages, such as C and C++, use 
semicolons to separate statements and curly 
brackets to separate code blocks.
5.  == and = operators
Python uses ‚Äò==‚Äô for comparison and ‚Äò=‚Äô for 
assignment. Python does not support inline 
assignment, so there‚Äôs no chance of accidentally 
assigning the value when you actually want to 
compare it.
6. Concatenating strings
You can use ‚Äò+‚Äô to concatenate strings.
>>> print ‚Äòkun‚Äô+‚Äôal‚Äô
kunal
7. The __init__ method 
The __init__ method is run as soon as 
an object of a class is instantiated. The 
method is useful to do any initialization 
you 
want 
to 
do 
with 
your 
object. 
The  
__init__ method is analogous to a constructor in 
C++, C# or Java.
Example:
class Person:
  def __init__(self, name):
    self.name = name
  def sayHi(self):
   print ‚ÄòHello, my name is‚Äô, self.name
p = Person(‚ÄòKunal‚Äô)
p.sayHi()
Output:
[~/src/python $:] python initmethod.py
Hello, my name is Kunal
8. Modules
To keep your programs manageable as they 
grow in size, you may want to break them up into 
several Ô¨Åles. Python allows you to put multiple 
function deÔ¨Ånitions into a Ô¨Åle and use them as a 
module that can be imported into other scripts and 
programs. These Ô¨Åles must have a .py extension.
Example:
# file my_function.py
def minmax(a,b):
 if a <= b:
 min, max = a, b
 else:
 min, max = b, a
 return min, max
Module Usage
import my_function

685IF1ZUIPO#PPL
1ZUIPOFTTFOUJBMT
19. Executing functions 
at the time of Python 
interpreter termination
You can use ‚Äòatexit‚Äô module to execute functions 
at the time of Python interpreter termination.
Example:
def sum():
        print(4+5)
def message():
        print(≈éExecuting Now≈è) 
import atexit
atexit.register(sum)
atexit.register(message)
Output:
Executing Now
9
20. Converting from integer 
to binary, hexadecimal 
and octal
Python provides easy-to-use functions ‚Äì bin(), 
hex() and oct() ‚Äì to convert from integer to binary, 
decimal and octal format respectively.
Example:
>>> bin(24)
ƒÇ0b11000ƒÅ
>>> hex(24)
ƒÇ0x18ƒÅ
>>> oct(24)
ƒÇ030ƒÅ
21. Converting any  
charset to UTF-8
You can use the following function to convert any 
charset to UTF-8.
data.decode(≈éinput_charset_here≈è).
encode(ƒÇutf-8ƒÅ)
22. Removing  
duplicates from lists
If you want to remove duplicates from a list,  
just put every element into a dict as a key (for 
example with ‚Äònone‚Äô as value) and then check  
dict.keys().
from operator import setitem
def distinct(l):
    d = {}
    map(setitem, (d,)*len(l), l, [])
    return d.keys()
23. Do-while loops
Since Python has no do-while or do-until loop 
constructs (yet), you can use the following 
method to achieve similar results:
while True:
    do_something()
    if condition():
        break
24. Detecting system 
platform
To execute platform-speciÔ¨Åc functions, it is very 
useful to detect the platform on which the Python 
interpreter is running. You can use ‚Äòsys.platform‚Äô 
to Ô¨Ånd out the current platform.
Example:
On Ubuntu Linux
>>> import sys
>>> sys.platform
ƒÇlinux2ƒÅ
On Mac OS X Snow Leopard
>>> import sys
>>> sys.platform
ƒÇdarwinƒÅ
25. Disabling and enabling  
garbage collection
Sometimes you may want to enable or disable 
the garbage collector at runtime. You can  
use the ‚Äògc‚Äô module to enable or disable the 
garbage collection.
Example:
>>> import gc
>>> gc.enable
<built-in function enable>
>>> gc.disable
<built-in function disable>
26. Using C-based modules 
for better performance
Many Python modules ship with counterpart 
C modules. Using these C modules will  
give a signiÔ¨Åcant performance boost in 
complex applications.
Example:
cPickle instead of Pickle, cStringIO 
instead of StringIO .
27. Calculating maximum, 
minimum and sum  
out of any list or iterable
You can use the following built-in functions.
max: Returns the largest element in the list.
min: Returns the smallest element in the list.
sum: This function returns the sum of all 
elements in the list. It accepts an optional 
second argument: the value to start with when 
summing (defaults to 0).
28. Representing  
fractional numbers
Fraction instance can be created using the 
following constructor:
Fraction([numerator 
[,denominator]])
29. Performing  
math operations
The ‚Äòmath‚Äô module provides a plethora of 
mathematical functions. These work on integer 
and Ô¨Çoat numbers, except complex numbers. 
For complex numbers, a separate module is 
used, called ‚Äòcmath‚Äô. 
For example:
math.acos(x): Return arc cosine of 
x.
math.cos(x): Returns cosine of x.
math.factorial(x) : Returns x 
factorial.
30. Working with arrays
The ‚Äòarray‚Äô module provides an efÔ¨Åcient way to 
use arrays in your programs. The ‚Äòarray‚Äô module 
deÔ¨Ånes the following type:
array(typecode [, initializer])
Once you have created an array object, say 
myarray, you can apply a bunch of methods to it. 
Here are a few important ones:
myarray.count(x): Returns the 
number of occurrences of x in a.
myarray.extend(x): Appends x at the 
end of the array.
myarray.reverse(): Reverse the 
order of the array.
31. Sorting items
The ‚Äòbisect‚Äô module makes it very easy to keep 
lists in any possible order. You can use the 
following functions to order lists.
bisect.insort(list, item [, low [, 
high]])
Inserts item into list in sorted order. If item is 
already in the list, the new entry is inserted to 
the right of any existing entries.
bisect.insort_left(list, item [, low 
[, high]])
Inserts item into list in sorted order. If item is 
already in the list, the new entry is inserted to 
the left of any existing entries.
Built-in 
modules

The Python Book  69
Python essentials
32. Using regular  
expression-based 
search
The ‚Äòre‚Äô module makes it very easy to use regxp-
based searches. You can use the function  
‚Äòre.search()‚Äô with a regexp-based expression. 
Check out the example below. 
Example:
>>> import re
>>> s = ‚ÄúKunal is a bad boy‚Äù
>>> if re.search(‚ÄúK‚Äù, s): print 
‚ÄúMatch!‚Äù # char literal
...
Match!
>>> if re.search(‚Äú[@A-Z]‚Äù, s): print 
‚ÄúMatch!‚Äù # char class
... # match either at-sign or capital 
letter
Match!
>>> if re.search(‚Äú\d‚Äù, s): print 
‚ÄúMatch!‚Äù # digits class
...
33. Working with bzip2 (.bz2) 
compression format
You can use the module ‚Äòbz2‚Äô to read and write 
data using the bzip2 compression algorithm.
bz2.compress() :  For bz2 
compression
bz2.decompress() : For bz2 
decompression
Example:
# File: bz2-example.py
import bz2
MESSAGE = ‚ÄúKunal is a bad boy‚Äù
compressed_message = bz2.
compress(MESSAGE)
decompressed_message = bz2.
decompress(compressed_message)
print ‚Äúoriginal:‚Äù, repr(MESSAGE)
print ‚Äúcompressed message:‚Äù, 
repr(compressed_message)
print ‚Äúdecompressed message:‚Äù, 
repr(decompressed_message)
Output:
[~/src/python $:] python bz2-
example.py 
original: ‚ÄòKunal is a bad boy‚Äô
compressed message: ‚ÄòBZh91AY&SY\xc4\
x0fG\x98\x00\x00\x02\x15\x80@\x00\
x00\x084%\x8a  \x00‚Äù\x00\x0c\x84\r\
x03C\xa2\xb0\xd6s\xa5\xb3\x19\x00\
xf8\xbb\x92)\xc2\x84\x86 z<\xc0‚Äô
decompressed message: ‚ÄòKunal is a 
bad boy‚Äô
34. Using SQLite database 
with Python
SQLite is fast becoming a very popular embedded 
database because of its zero conÔ¨Åguration 
needed, and  superior levels of performance. You 
can use the module ‚Äòsqlite3‚Äô in order to work with 
SQLite databases.
Example:
>>> import sqlite3
>>> connection = sqlite.connect(‚Äòtest.
db‚Äô)
>>> curs = connection.cursor()
>>> curs.execute(‚Äò‚Äô‚Äôcreate table item
... (id integer primary key, itemno 
text unique,
... scancode text, descr text, price 
real)‚Äô‚Äô‚Äô)
<sqlite3.Cursor object at 0x1004a2b30>
35. Working with zip files
You can use the module ‚ÄòzipÔ¨Åle‚Äô to work with  
zip Ô¨Åles.
zipfile.ZipFile(filename [, mode [, 
compression [,allowZip64]]])
Open a zip Ô¨Åle, where the Ô¨Åle can be either a path 
to a Ô¨Åle (a string) or a Ô¨Åle-like object.
zipfile.close()¬∂
Close the archive Ô¨Åle. You must call ‚Äòclose()‚Äô before 
exiting your program or essential records will not 
be written.
zipfile.extract(member[, path[, 
pwd]])
Extract a member from the archive to the current 
working directory; ‚Äòmember‚Äô must be its full 
name (or a zipinfo object). Its Ô¨Åle information 
is extracted as accurately as possible. ‚Äòpath‚Äô 
speciÔ¨Åes a different directory to extract to. 
‚Äòmember‚Äô can be a Ô¨Ålename or a zipinfo object. 
‚Äòpwd‚Äô is the password used for encrypted Ô¨Åles.
36. Using UNIX-style 
wildcards to search  
for filenames
You can use the module ‚Äòglob‚Äô to Ô¨Ånd all the 
pathnames matching a pattern according to the 
rules used by the UNIX shell. *, ?, and character 
ranges expressed with [ ] will be  matched.
Example:
>>> import glob
>>> glob.glob(‚Äò./[0-9].*‚Äô)
[‚Äò./1.gif‚Äô, ‚Äò./2.txt‚Äô]
>>> glob.glob(‚Äò*.gif‚Äô)
[‚Äò1.gif‚Äô, ‚Äòcard.gif‚Äô]
>>> glob.glob(‚Äò?.gif‚Äô)
[‚Äò1.gif‚Äô]
37. Performing basic file 
operations (copy, delete 
and rename)
You can use the module ‚Äòshutil‚Äô to perform basic 
Ô¨Åle operation at a high level. This module works 
with your regular Ô¨Åles and so will not work with 
special Ô¨Åles like named pipes, block devices, and 
so on.
shutil.copy(src,dst)
Copies the Ô¨Åle src to the Ô¨Åle or directory dst. 
shutil.copymode(src,dst)
Copies the Ô¨Åle permissions from src to dst.
shutil.move(src,dst)
Moves a Ô¨Åle or directory to dst.
shutil.copytree(src, dst, symlinks 
[,ignore]])
Recursively copy an entire directory at src.
shutil.rmtree(path [, ignore_errors 
[, onerror]])
Deletes an entire directory.
38. Executing UNIX 
commands from Python
You can use module commands to execute UNIX 
commands. This is not available in Python 3 ‚Äì 
instead you need to use the module ‚Äòsubprocess‚Äô.
Example:
>>> import commands
>>> commands.getoutput(‚Äòls‚Äô)
‚Äòbz2-example.py\ntest.py‚Äô
39. Reading environment 
variables
You can use the module ‚Äòos‚Äô to gather operating-
system-speciÔ¨Åc information:
Example:
>>> import os
>>> os.path <module ‚Äòposixpath‚Äô 
from ‚Äò/usr/lib/python2.6/posixpath.
pyc‚Äô>>>> os.environ {‚ÄòLANG‚Äô: ‚Äòen_
IN‚Äô, ‚ÄòTERM‚Äô: ‚Äòxterm-color‚Äô, ‚ÄòSHELL‚Äô: 
‚Äò/bin/bash‚Äô, ‚ÄòLESSCLOSE‚Äô: 
‚Äò/usr/bin/lesspipe %s %s‚Äô, 
‚ÄòXDG_SESSION_COOKIE‚Äô: 
‚Äò925c4644597c791c704656354adf56d6-
1257673132.347986-1177792325‚Äô, 
‚ÄòSHLVL‚Äô: ‚Äò1‚Äô, ‚ÄòSSH_TTY‚Äô: ‚Äò/dev/
pts/2‚Äô, ‚ÄòPWD‚Äô: ‚Äò/home/kunal‚Äô, 
‚ÄòLESSOPEN‚Äô: ‚Äò| /usr/bin
lesspipe 
......}
>>> os.name
‚Äòposix‚Äô
>>> os.linesep
‚Äò\n‚Äô

70  The Python Book
Python essentials
40. Sending email
You can use the module ‚Äòsmtplib‚Äô to send email 
using an SMTP (Simple Mail Transfer Protocol) 
client interface.
smtplib.SMTP([host [, port]])
Example (send an email using Google Mail 
SMTP server):
import smtplib
# Use your own to and from email 
address  
fromaddr = ‚Äòkunaldeo@gmail.com‚Äô  
toaddrs  = ‚Äòtoemail@gmail.com‚Äô  
msg = ‚ÄòI am a Python geek. Here is 
the proof.!‚Äô  
# Credentials
# Use your own Google Mail 
credentials while running the 
program  
username = ‚Äòkunaldeo@gmail.com‚Äô  
password = ‚Äòxxxxxxxx‚Äô  
# The actual mail send  
server = smtplib.SMTP(‚Äòsmtp.gmail.
com:587‚Äô)
# Google Mail uses secure 
connection for SMTP connections  
server.starttls()  
server.login(username,password)  
server.sendmail(fromaddr, toaddrs, 
msg)  
server.quit()
41. Accessing  
FTP server
‚Äòftplib‚Äô is a fully Ô¨Çedged client FTP module for 
Python.  To establish an FTP connection, you 
can use the following function:
ftplib.FTP([host [, user [, passwd 
[, acct [, timeout]]]]])
Example:
host = ‚Äúftp.redhat.com‚Äù
username = ‚Äúanonymous‚Äù
password = ‚Äúkunaldeo@gmail.com‚Äù
import ftplib
import urllib2
ftp_serv = ftplib.
FTP(host,username,password)
# Download the file
u = urllib2.urlopen (‚Äúftp://
ftp.redhat.com/pub/redhat/linux/
README‚Äù)
# Print the file contents
print (u.read())
Output:
[~/src/python $:] python 
ftpclient.py
Older versions of Red Hat Linux have been moved 
to the following location: ftp://archive.download.
redhat.com/pub/redhat/linux/
42. Launching a webpage 
with the default web 
browser
The ‚Äòwebbrowser‚Äô module provides a convenient 
way to launch webpages using the default  
web browser.
Example (launch google.co.uk with system‚Äôs 
default web browser):
>>> import webbrowser
>>> webbrowser.open(‚Äòhttp://google.
co.uk‚Äô)
True
43. Creating secure hashes 
The ‚Äòhashlib‚Äô module supports a plethora of 
secure hash algorithms including SHA1, SHA224, 
SHA256, SHA384, SHA512 and MD5.
Example (create hex digest of the given text):
>>> import hashlib
# sha1 Digest
>>> hashlib.sha1(‚ÄúMI6 Classified 
Information 007‚Äù).hexdigest()
‚Äòe224b1543f229cc0cb935a1eb9593
18ba1b20c85‚Äô
# sha224 Digest
>>> hashlib.sha224(‚ÄúMI6 Classified 
Information 007‚Äù).hexdigest()
‚Äò3d01e2f741000b0224084482f905e9b7b97
7a59b480990ea8355e2c0‚Äô
# sha256 Digest
>>> hashlib.sha256(‚ÄúMI6 Classified 
Information 007‚Äù).hexdigest()
‚Äò2fdde5733f5d47b67 2fcb39725991c89 
b2550707cbf4c6403e fdb33b1c19825e‚Äô
# sha384 Digest
>>> hashlib.sha384(‚ÄúMI6 Classified 
Information 007‚Äù).hexdigest()
‚Äò5c4914160f03dfbd19e14d3ec1e74bd8b99
dc192edc138aaf7682800982488daaf540be
9e0e50fc3d3a65c8b6353572d‚Äô
# sha512 Digest
>>> hashlib.sha512(‚ÄúMI6 Classified 
Information 007‚Äù).hexdigest()
‚Äòa704ac3dbef6e8234578482a31d5ad29d25
2c822d1f4973f49b850222edcc0a29bb89077
8aea807a0a48ee4ff8bb18566140667fbaf7
3a1dc1ff192febc713d2‚Äô
# MD5 Digest
>>> hashlib.md5(‚ÄúMI6 Classified 
Information 007‚Äù).hexdigest()
‚Äò8e2f1c52ac146f1a999a670c826f7126‚Äô
44. Seeding random 
numbers
You can use the module ‚Äòrandom‚Äô to generate 
a wide variety of random numbers. The most 
used one is ‚Äòrandom.seed([x])‚Äô. It initialises 
the basic random number generator. If x is 
omitted or None, current system time is used; 
current system time is also used to initialise the 
generator when the module is Ô¨Årst imported.
45. Working with CSV 
(comma-separated 
values) files
CSV Ô¨Åles are very popular for data exchange over 
the web. Using the module ‚Äòcsv‚Äô, you can read and 
write CSV Ô¨Åles.
Example:
import csv
# write stocks data as comma-
separated values
writer = csv.writer(open(‚Äòstocks.
csv‚Äô, ‚Äòwb‚Äô, buffering=0))
writer.writerows([
(‚ÄòGOOG‚Äô, ‚ÄòGoogle, Inc.‚Äô, 505.24, 0.47, 
0.09),
(‚ÄòYHOO‚Äô, ‚ÄòYahoo! Inc.‚Äô, 27.38, 0.33, 
1.22),
(‚ÄòCNET‚Äô, ‚ÄòCNET Networks, Inc.‚Äô, 8.62, 
-0.13, -1.49)
])
# read stocks data, print status 
messages
stocks = csv.reader(open(‚Äòstocks.
csv‚Äô, ‚Äòrb‚Äô))
status_labels = {-1: ‚Äòdown‚Äô, 0: 
‚Äòunchanged‚Äô, 1: ‚Äòup‚Äô}
for ticker, name, price, change, pct 
in stocks:
    status = status_
labels[cmp(float(change), 0.0)]
    print ‚Äò%s is %s (%s%%)‚Äô % (name, 
status, pct)
47. Installing third-
party modules using 
setuptools
‚Äòsetuptools‚Äô is a Python package which lets you 
download, build, install, upgrade and uninstall 
packages very easily.
To use ‚Äòsetuptools‚Äô you will need to install 
from your distribution‚Äôs package manager. 
After installation you can use the command  
‚Äòeasy_install‚Äô to perform Python package 
management tasks.

The Python Book  71
Python essentials
Example (installing simplejson using 
setuptools):
kunal@ubuntu:~$ sudo easy_install 
simplejson
Searching for simplejson
Reading http://pypi.python.org/simple/
simplejson/
Reading http://undefined.org/
python/#simplejson
Best match: simplejson 2.0.9
Downloading http://pypi.python.
org/packages/source/s/simplejson/
simplejson-2.0.9.tar.gz#md5=af5e67a39c
a3408563411d357e6d5e47
Processing simplejson-2.0.9.tar.gz
Running simplejson-2.0.9/setup.py 
-q bdist_egg --dist-dir /tmp/easy_
install-FiyfNL/simplejson-2.0.9/egg-
dist-tmp-3YwsGV
Adding simplejson 2.0.9 to easy-
install.pth file
Installed /usr/local/lib/python2.6/
dist-packages/simplejson-2.0.9-py2.6-
linux-i686.egg
Processing dependencies for simplejson
Finished processing dependencies for 
simplejson
46. Logging to system log
You can use the module ‚Äòsyslog‚Äô to write to system 
log. ‚Äòsyslog‚Äô acts as an interface to UNIX syslog 
library routines.
Example:
import syslog
syslog.syslog(‚Äòmygeekapp: started 
logging‚Äô)
for a in [‚Äòa‚Äô, ‚Äòb‚Äô, ‚Äòc‚Äô]:
  b = ‚Äòmygeekapp: I found letter ‚Äò+a
  syslog.syslog(b)
syslog.syslog(‚Äòmygeekapp: the script 
goes to sleep now, bye,bye!‚Äô)
Output:
$ python mylog.py
$ tail -f /var/log/messages
Nov  8 17:14:34 ubuntu -- MARK --
Nov  8 17:22:34 ubuntu python: 
mygeekapp: started logging
Nov  8 17:22:34 ubuntu python: 
mygeekapp: I found letter a
Nov  8 17:22:34 ubuntu python: 
mygeekapp: I found letter b
Nov  8 17:22:34 ubuntu python: 
mygeekapp: I found letter c
Nov  8 17:22:34 ubuntu python: 
mygeekapp: the script goes to sleep 
now, bye,bye!
48. Generating PDF 
documents
‚ÄòReportLab‚Äô is a very popular module for PDF 
generation from Python. 
Perform the following steps to install ReportLab
$ wget http://www.reportlab.org/ftp/
ReportLab_2_3.tar.gz
$ tar xvfz ReportLab_2_3.tar.gz 
$ cd ReportLab_2_3
$ sudo python setup.py install
For a successful installation, you should see a 
similar message:
############SUMMARY INFO###########
###################################
#Attempting install of _rl_accel, sgmlop 
& pyHnj
#extensions from ‚Äò/home/kunal/python/
ReportLab_2_3/src/rl_addons/rl_accel‚Äô
###################################
#Attempting install of _renderPM
#extensions from ‚Äò/home/kunal/python/
ReportLab_2_3/src/rl_addons/renderPM‚Äô
# installing with freetype version 21
###################################
Example:
>>> from reportlab.pdfgen.canvas import 
Canvas
# Select the canvas of letter page size
>>> from reportlab.lib.pagesizes import 
letter
>>> pdf = Canvas(‚Äúbond.pdf‚Äù, pagesize = 
letter)
# import units
>>> from reportlab.lib.units import cm, 
mm, inch, pica
>>> pdf.setFont(‚ÄúCourier‚Äù, 60)
>>> pdf.setFillColorRGB(1, 0, 0)
>>> pdf.drawCentredString(letter[0] / 2, 
inch * 6, ‚ÄúMI6 CLASSIFIED‚Äù)
>>> pdf.setFont(‚ÄúCourier‚Äù, 40)
>>> pdf.drawCentredString(letter[0] / 2, 
inch * 5, ‚ÄúFor 007‚Äôs Eyes Only‚Äù)
# Close the drawing for current page
>>> pdf.showPage()
# Save the pdf page
>>> pdf.save()
Output:
@image:pdf.png
@title: PDF Output
49. Using Twitter API
You can connect to Twitter using the ‚ÄòPython-
Twitter‚Äô module. 
Perform the following steps to install  
Python-Twitter:
$ wget  http://python-twitter.
googlecode.com/files/python-twitter-
0.6.tar.gz
$ tar xvfz python-twitter*
$ cd python-twitter*
$ sudo python setup.py install
Example (fetching followers list):
>>> import twitter
# Use you own twitter account here
>>> mytwi = twitter.Api(username=‚Äôkunald
eo‚Äô,password=‚Äôxxxxxx‚Äô)
>>> friends = mytwi.GetFriends()
>>> print [u.name for u in friends]
[u‚ÄôMatt Legend Gemmell‚Äô, u‚Äôjono wells‚Äô, 
u‚ÄôThe MDN Big Blog‚Äô, u‚ÄôManish Mandal‚Äô, 
u‚ÄôiH8sn0w‚Äô, u‚ÄôIndianVideoGamer.com‚Äô, 
u‚ÄôFakeAaron Hillegass‚Äô, u‚ÄôChaosCode‚Äô, 
u‚Äônileshp‚Äô, u‚ÄôFrank Jennings‚Äô,..‚Äô]
50. Doing Yahoo! news 
search
You can use the Yahoo! search SDK to access 
Yahoo! search APIs from Python.
Perform the following steps to install it:
$wget http://developer.yahoo.com/
download/files/yws-2.12.zip
$ unzip yws*
$ cd yws*/Python/pYsearch*/
$ sudo python setup.py install
Example:
# Importing news search API
>>> from yahoo.search.news import 
NewsSearch
>>> srch = NewsSearch(‚ÄòYahooDemo‚Äô, 
query=‚ÄôLondon‚Äô)
# Fetch Results
>>> info = srch.parse_results()
>>> info.total_results_available
41640
>>> info.total_results_returned
10
>>> for result in info.results:
... print ‚Äú‚Äô%s‚Äô, from %s‚Äù % 
(result[‚ÄòTitle‚Äô], result[‚ÄòNewsSource‚Äô])
... 
‚ÄòAfghan Handover to Be Planned at London 
Conference, Brown Says‚Äô, from Bloomberg
.................
Third-party modules

Python
725IF1ZUIPO#PPL
8PSLXJUI
i&OIBODFZPVSTZTUFNTXJUI
1ZUIPOTQPXFSGVMDBQBCJMJUJFTw
74$SFBUEZOBNJDUFNQMBUFT
6TF+JOKB'MBTLBOENPSF
78&YUFOTJPOTGPS9#.$
&OIBODF9#.$XJUIUIJTUVUPSJBM
844DJFOUJ√∂DDPNQVUJOH
(FUUPHSJQTXJUI/VN1Z
88*OTUBOUNFTTBHJOH
(FUDIBUUJOHVTJOH1ZUIPO
943FQMBDFZPVSTIFMM
6TF1ZUIPOGPSZPVSQSJNBSZTIFMM
981ZUIPOGPSTZTUFNBENJOT
)PX1ZUIPOIFMQTTZTUFNBENJOJTUSBUJPO
1024DSBQF8JLJQFEJB
6TF#FBVUJGVM4PVQUPSFBEP√µJOF
88

5IF1ZUIPO#PPL73
78
84
75

745IF1ZUIPO#PPL
8PSLXJUI1ZUIPO
Create a dynamic webpage with Twitter and Flask‚Äôs rendering 
engine, Jinja2
Creating dynamic templates 
with Flask, Jinja2 and Twitter
Python and Flask are a great combination 
when you‚Äôre looking to handle the Twitter 
OAuth process and build requests to obtain 
tokens. We‚Äôve used Twitter here because of 
the large amount of easily digestible data 
available on it. However, since Twitter adheres 
to the standards set out by OAuth 1.0, the code 
we‚Äôve used to sign and build requests can 
be modiÔ¨Åed to work with any third-party API 
using the same standard without a great deal 
of work. For years PHP has been a mainstay 
of template generation, but now with well-
documented frameworks such as Flask, 
Sinatra and Handlebars, the ability to use 
powerful scripting languages greatly improves 
our ability to make great web services. Here, 
we‚Äôre going to use Python, Flask and its 
templating engine to display tweets. Flask 
comes with the super-nifty Jinja2 templating 
engine, If you‚Äôre familiar with Node.js or front-
end JavaScript, the syntax will look very 
similar to the Handlebars rendering engine. 
But, before we dive into that, we need to 
organise some of the example code that we‚Äôre 
using for this.
Resources
Python 2.7+
Flask 0.10.0: Ô¨Çask.pocoo.org
Flask GitHub:
github.com/mitsuhiko/Ô¨Çask
A Twitter account
Your favourite text editor
Code downloaded from FileSilo
01 
Rearranging our code 
Server code can get messy and 
unmaintainable quickly, so the Ô¨Årst thing we‚Äôre 
going to do is move our helper functions to 
another Ô¨Åle and import them into our project, 
much like you would a module. This way, it will 
be clear which functions are our server logic 
and endpoints and which are generic Python 
functions. Open the TwitterAuthentication Ô¨Åle 
downloaded from FileSilo (stored under Twitter 
OAuth Ô¨Åles) and locate the getParameters,  
sign_request 
and 
create_oauth_headers 
functions. Cut and paste them into a new Ô¨Åle 
called helpers.py in the root of your project 
folder. At the top of this Ô¨Åle we want to import 
some libraries.
import urllib, collections, hmac,  
binascii, time, random, string
from hashlib import sha1
Now we can head back over to server.py and 
import the helper functions back into our 
project. We do this by simply calling import 
02 
server.py modules
With a lot of the modules needed in this 
project having been moved to helpers.py, we 
can now remove most of them from server.py. 
If we amend our Ô¨Årst import statement to be‚Ä¶ 
import urllib2, time, random, json
‚Ä¶our project will continue to function as it did 
before. Note the addition of the json module: 
QThe template uses a loop to generate a list of Twitter tweets
helpers. Because Python is smart, It will look 
in the current directory for a helpers.py Ô¨Åle 
before it looks for a system module. Now every 
function included in helpers.py is accessible 
to our project. All we need to do to call them is 
prepend our the methods we called before with 
helper.function_name and it will execute. For  
sign_request, 
we‚Äôll 
need 
to 
pass 
our  
oauth_secret and consumer_secret for each 
request rather than accessing it from the 
session. Adjust the function declaration like so:
def sign_request(parameters, method, 
baseURL, consumer_secret, oauth_secret):

The Python Book  75
Work with Python
QThe BSD-licensed Flask is easy to set up 
and use ‚Äì check out the website for more info
we‚Äôll be using that later as we start handling 
Twitter data.
Having Flask use a rendering engine is 
super-simple. Flask comes packaged with 
the Jinja2 template rendering engine, so we‚Äôve 
nothing to install ‚Äì we just need to import the 
package into the project. We can do this by 
adding render_template to the end of our from 
flask import [‚Ä¶] statement.
03 
Our Ô¨Å rst template
Now that we have a rendering engine, 
we need to create some templates for it to 
use. In the root of our project‚Äôs folder, create 
a new folder called templates. Whenever 
we try to render a template, Flask will look in 
this folder for the template speciÔ¨Å ed. To get 
to grips with templating, we‚Äôll rewrite some 
of our authentication logic to use a template, 
rather than manually requesting endpoints. In 
templates, create an index.html Ô¨Å le. You can 
treat this HTML Ô¨Å le like any other ‚Äì included in 
the resources for this tutorial is an index.html 
that includes all of the necessary head tags and 
<!DOCTYPE> declarations for this Ô¨Å le.
04 
Rendering our template
In server.py, let‚Äôs create a route for ‚Äò/‚Äô to 
handle the authorisation process.
@app.route(‚Äò/‚Äô)
def home():
    if not ‚Äòoauth_token‚Äô in session:
        session.clear()
        session[‚Äòoauth_secret‚Äô] = ‚Äò‚Äô
        session[‚Äòoauth_token‚Äô] = ‚Äò‚Äô
    return render_template(‚Äòindex.html‚Äô)
It‚Äôs a simple function: all we want to do is check 
whether or not we have an oauth_token already 
and create those properties in the Flask session 
so we don‚Äôt throw an error if we try to access 
it erroneously. In order to send our generated 
template in response to the request, we return 
render_template(‚Äòindex.html‚Äô).
{% if session[‚Äòoauth_token‚Äô] != ‚Äú‚Äù %}
    <h1>Already Authorised</h1>
    <div class=‚Äùdialog‚Äù>
<p>Hello, You‚Äôve authenticated!<br>Let‚Äôs <a href=‚Äù/get-tweets‚Äù>get some tweets</a></p>
    </div>
{% else %}
    <h1>Authorisation required</h1>
    <div class=‚Äùdialog‚Äù>
        <p>We need to <a href=‚Äù/authenticate‚Äù>authenticate</a></p>
    </div>
{% endif %}
Fig 01
05 
Template variables
We can choose to send variables to our 
template with render_template(‚Äòindex.htm‚Äô, 
variableOne=value, variableTwo=Value) but 
in this instance we don‚Äôt need to as each template 
has access to the request and session variables.
Code on 
FileSilo

76  The Python Book
Work with Python
 Now we know how to build templates, 
let‚Äôs grab some tweets to display 
 
09 
Checking our session
and building our request
Before we start grabbing tweets, we want to 
run a quick check to make sure we have the 
necessary credentials and if not, redirect the 
user back the authorisation Ô¨Çow. We can do 
this by having Flask respond to the request 
with a redirection header, like so:
if session[‚Äòoauth_token‚Äô] == ‚Äú‚Äù or  
session[‚Äòoauth_secret‚Äô] == ‚Äú‚Äù:
        return redirect(rootURL)
Assuming we have all we need, we can start to 
build the parameters for our request (Fig 02).
You‚Äôll notice that the nonce value is different 
from that in our previous requests. Where the 
nonce value in our authenticate and authorise 
requests can be any random arrangement of 
characters that uniquely identify the request, 
for all subsequent requests the nonce needs 
to be a 32-character hexadecimal string using 
only the characters a-f. If we add the following 
function to our helpers.py Ô¨Åle, we can quickly 
build one for each request.
def nonce(size=32, chars=‚Äùabcdef‚Äù + 
string.digits):
    return ‚Äò‚Äô.join(random.choice  
(chars) for x in range(size))
10 
Signing and sending our request
We‚Äôve built our parameters, So let‚Äôs 
sign our request and then add the signature to 
the parameters (Fig 03).
Before we create the authorisation headers, 
we need to remove the count and user_id 
values 
from 
the 
tweetRequestParams 
dictionary, otherwise the signature we just 
created won‚Äôt be valid for the request. We can 
achieve this with the del keyword. Unlike our 
token requests, this request is a GET request, 
so instead of including the parameters 
in the request body, we deÔ¨Åne them as 
query parameters.
?count=tweetRequestParams[‚Äòcount‚Äô] 
&user_id=tweetRequestParams[‚Äòuser_id‚Äô]
11 
Handling Twitter‚Äôs response
Now we‚Äôre ready to Ô¨Åre off the request 
and we should get a JSON response back 
from Twitter. This is where we‚Äôll use the json 
module we imported earlier. By using the 
json.loads function, we can parse the JSON 
into a dictionary that we can access and we‚Äôll 
pass through to our tweets.html template.
tweetResponse = json. 
loads(httpResponse.read())
return render_template(‚Äòtweets.html‚Äô, 
data=tweetResponse)
Whereas before, we accessed the session 
to get data into our template, this time 
we‚Äôre explicitly passing a value through to 
our template.
12 
Displaying our tweets
Let‚Äôs create that template now, exactly 
the same as index.html but this time, instead of 
using a conditional, we‚Äôre going to create a loop 
to generate a list of tweets we‚Äôve received.
First, we check that we actually received 
some data from our request to Twitter. If we‚Äôve 
got something to render, we‚Äôre ready to work 
through it, otherwise we‚Äôll just print that we 
didn‚Äôt get anything.
Once again, any template logic that we want 
to use to generate our page is included between 
08 
Let‚Äôs get some tweets
So now we know how to build templates, 
let‚Äôs grab some tweets to display. In server.py 
deÔ¨Åne a new route, get-tweets,like so:
@app.route(‚Äò/get-tweets‚Äô)
@app.route(‚Äò/get-tweets/<count>‚Äô)
def getTweets(count=0):
You‚Äôll notice that unlike our other authentication 
endpoints, we‚Äôve made two declarations. 
The Ô¨Årst is a standard route deÔ¨Ånition: it will 
07 
Static Ô¨Åles
Pretty much every webpage uses 
JavaScript, CSS and images, but where do we 
keep them? With Flask we can deÔ¨Åne a folder 
for use with static content. For Flask, we create 
a static folder in the root of our project and 
access Ô¨Åles by calling /static/css/styles.css or 
/static/js/core.js. The tutorial resources include a 
CSS Ô¨Åle for styling this project.
Open index.html. All code executed in a Flask 
template is contained within {% %}. As this is our 
homepage, we want to direct users accordingly, 
So let‚Äôs check if we‚Äôve got an access token (Fig 01).
Between the ifs and else of the template is 
standard HTML. If we want to include some data 
‚Äì for example, the access token ‚Äì we can just add  
{{ session[‚Äòoauth_token‚Äô] }} in the HTML and it 
will be rendered in the page. Previously, in our /
authorised endpoint, we would display the OAuth 
token that we received from Twitter; however, now 
that we have a template, we can redirect our users 
back our root URL and have a page rendered for us 
that explains the progress we‚Äôve made.
06 
Getting lost
(and then found again)
With every server, some things get misplaced or 
people get lost. So how do we handle this? Rather 
than deÔ¨Åning a route, we can deÔ¨Åne a handler 
that deals with getting lost.
@app.errorhandler(404)
def fourOhFour(error):
  return render_template(‚Äòfourohfour.html‚Äô)
If a page or endpoint is requested and triggers a 
404, then the fourOhFour function will be Ô¨Åred. In 
this case, we‚Äôll generate a template that tells the 
user, but we could also redirect to another page or 
dump the error message.
intercept and handle the path get-tweets. The 
second lets us deÔ¨Åne a parameter that we can 
use as a value in our getTweets function. By 
including count=0 in our function declaration, 
we ensure that there will always be a default 
value when the function is executed; this way we 
don‚Äôt have to check the value is present before 
we access it. If a value is included in the URL, it 
will override the value in the function. The string 
inside the <variable name> determines the 
name of the variable. If you want the variable 
passed to the function to have a speciÔ¨Åc type, 
you can include a converter with the variable 
name. For example, if we wanted to make sure 
that <count> was always an integer instead of a 
Ô¨Çoat or string, we‚Äôd deÔ¨Åne our route like so:
@app.route(‚Äò/get-tweets/<int:count>‚Äô)

The Python Book  77
Work with Python
tweetRequestParams = {
    ‚Äúoauth_consumer_key‚Äù : consumer_key,
    ‚Äúoauth_nonce‚Äù : helpers.nonce(32),
    ‚Äúoauth_signature_method‚Äù : ‚ÄúHMAC-SHA1‚Äù,
    ‚Äúoauth_timestamp‚Äù : int(time.time()),
    ‚Äúoauth_version‚Äù : ‚Äú1.0‚Äù,
    ‚Äúoauth_token‚Äù : session[‚Äö√Ñ√≤oauth_token‚Äô],
    ‚Äúuser_id‚Äù : session[‚Äòuser_id‚Äô],
    ‚Äúcount‚Äù : str(count)
}
Fig 02
tweetRequest = helpers.sign_request(tweetRequestParams, ‚ÄúGET‚Äù, 
‚Äúhttps://api.twitter.com/1.1/statuses/user_timeline.json‚Äù, consumer_secret, 
session[‚Äòoauth_secret‚Äô])
tweetRequestParams[‚Äúoauth_signature‚Äù] = tweetRequest
makeRequest=urllib2.Request(‚Äúhttps://api.twitter.com/1.1/statuses/ 
user_timeline.json?count=‚Äù + tweetRequestParams[‚Äòcount‚Äô] + ‚Äú&user_id=‚Äù 
+ tweetRequestParams[‚Äòuser_id‚Äô])
del tweetRequestParams[‚Äòuser_id‚Äô], tweetRequestParams[‚Äòcount‚Äô]
makeRequest.add_header(‚ÄúAuthorization‚Äù, helpers.create_oauth_ 
headers(tweetRequestParams))
try:
    httpResponse = urllib2.urlopen(makeRequest)
except urllib2.HTTPError, e:
    return e.read()
Fig 03
{% if data %}
    
    <ul id=‚Äùtweets‚Äù>
        {% for tweet in data %}
            <li>
                <div class=‚Äùimage‚Äù>
                    <img src=‚Äù{{ tweet[‚Äòuser‚Äô][‚Äòprofile_image_url_https‚Äô] 
}}‚Äù alt=‚ÄùUser Profile Picture‚Äù>
                </div>
                <div class=‚Äùtext‚Äù>
                    <a>{{ tweet[‚Äòtext‚Äô]|forceescape }}</a>
                </div>
            </li>
        {% endfor %}
    </ul>
{% else %}
  <p>We didn‚Äôt get any tweets :(</p>
{% endif %}
Fig 04
13 
Flask Ô¨Ålters
Sometimes, when parsing from JSON, 
Python can generate erroneous characters 
that don‚Äôt render particularly well in HTML. 
You may notice that after tweet[‚Äòtext‚Äô] there 
is |forceescape, This is an example of a Flask 
Ô¨Ålter; it allows us to effect the input before we 
render ‚Äì in this case it‚Äôs escaping our values 
for us. There are many, many different built-
in Ô¨Ålters that come included with Flask. Your 
advisor recommends a full reading of all the 
potential options.
14 
Wrapping up
That‚Äôs pretty much it for templating 
with Flask. As we‚Äôve seen, it‚Äôs insanely quick 
and easy to build and deploy dynamic sites. 
Flask is great tool for any Python developer 
looking to run a web service. Although we‚Äôve 
used Twitter to demonstrate Flask‚Äôs power, 
all of the techniques described can be used 
with any third-party service or database 
resource. Flask can work with other rendering 
engines, such as Handlebars (which is 
superb), but Jinja2 still needs to be present 
to run Flask and conÔ¨Çicts can occur between 
the two engines. With such great integration 
between Flask and Jinja2, it makes little 
sense to use another engine outside of very 
speciÔ¨Åc circumstances.
{% %}. This time we‚Äôre creating a loop; inside the 
loop we‚Äôll be able to access any property we have 
of that object and print it out. In this template 
we‚Äôre going to create an <li> element for each 
tweet we received and display the user‚Äôs proÔ¨Åle 
picture and text of the tweet (Fig 04).
In our template we can access properties 
using either dot notation (.) or with square 
brackets ([]). They behave largely the same; 
the [] notation will check for an attribute on 
the dictionary or object deÔ¨Åned whereas the 
. notation will look for an item with the same 
name. If either cannot Ô¨Ånd the parameter 
speciÔ¨Åed, it will return undeÔ¨Åned. If this occurs, 
the template will not throw an error, it will simply 
print an empty string. Keep this in mind if your 
template does not render the expected data: 
you‚Äôve probably just mis-deÔ¨Åned the property 
you‚Äôre trying to access.
Unlike traditional Python, we need to 
tell the template where the for loop and if/
else statements end, so we do that with  
{% endfor %} and {% endif %}.

78  The Python Book
Work with Python
Python is the world‚Äôs most popular easy-to-use open source 
language. Learn how to use it to build your own features for 
XBMC, the world‚Äôs favourite FOSS media centre
Make extensions for 
XBMC with Python
XBMC is perhaps the most important thing that 
has ever happened in the open source media 
centre space. It started its life on the original 
Xbox videogames console and since then it has 
become the de facto software for multimedia 
aÔ¨Åcionados. It also has been forked into many 
other successful media centre applications such 
as Boxee and Plex. XBMC has ultimately grown 
into a very powerful open source application with 
a solid community behind it. It supports almost 
all major platforms, including different hardware 
architectures. It is available for Linux, Windows, 
Mac OS X, Android, iOS and Raspberry Pi.
In these pages we will learn to build extensions 
for XBMC. Extensions are a way of adding 
features to XBMC without having to learn the 
core of XBMC or alter that core in any way. One 
additional advantage is that XBMC uses Python 
as its scripting language, and this can be also 
used to build the extensions. This really helps 
new developers get involved in the project since 
Python is easy to learn compared to languages 
like C/C++ (from which the core of XBMC is made). 
XBMC supports various types of extensions (or 
Add-ons): Plugins, Programs and Skins. Plugins 
add features to XBMC. Depending on the type 
of feature, a plug-in will appear in the relevant 
media section of XBMC. For example, a YouTube 
plug-in would appear in the Videos section. 
Scripts/Programs are like mini-applications for 
XBMC. They appear in the Programs section. 
Skins are important since XBMC is a completely 
customisable application ‚Äì you can change 
Resources
XBMC: www.xbmc.org/download
Python 2.7x
Python IDE (optional)
Code on FileSilo
List of 
installed 
plug-ins
Current media 
selection
Rating (only available for 
hosted plug-ins)
ConÔ¨Ågure 
launcher
Opens 
changelog for 
the plug-in
Localised 
description string
the look and feel of just about every facet of 
the package. 
Depending 
upon 
which 
category 
your 
extension Ô¨Åts, you will have to create the 
extension directory accordingly. For example‚Ä¶
Plug-ins:
 
plugin.audio.ludaudi: An audio plug-in
 
plugin.video.ludvidi: A video plug-in 
 
script.xxx.xxx: A program
In this tutorial we will build an XBMC plug-in 
called LUD Entertainer. This plug-in will provide a 
nice way to watch videos from Reddit from within 
XBMC. Our plug-in will show various content such 
as trailers and documentaries from Reddit. We‚Äôll 
also allow our users to add their own Subreddit. 
Each video can then be categorised as Hot, New, 
Top, Controversial etc. With this plug-in we will 
demonstrate how easy it is hook into XBMC‚Äôs 
built-in method to achieve a very high-quality 
user experience. 
Due to space limitations, we aren‚Äôt able to print 
the full code here. We recommend downloading 
the complete code from FileSilo. 

The Python Book  79
Work with Python
01 
Preparing the directory structure
As we have mentioned previously, each 
XBMC extension type follows a certain directory 
naming convention. In this case we are building 
a video plug-in, so the plug-in directory name 
would be plugin.video.ludlent. But that‚Äôs just the 
root directory name ‚Äì we will need several other 
folders and Ô¨Åles as well.
The following describes the directory structure of 
LUD Linux Entertainer:
plugin.video.ludent ‚Äì Root Plugin directory
|-- addon.xml 
|-- changelog.txt 
|-- default.py
|-- icon.png
|-- LICENSE.txt
|-- README
`-- resources
    |-- lib
    `-- settings.xml
02 
Creating addon.xml
An addon.xml Ô¨Åle needs to be created in 
the root of the extension directory. The addon.xml 
Ô¨Åle contains the primary metadata from a XBMC 
extension. It contains overview, credits, version 
information and dependencies information about 
the extension. 
The root element of addon.xml is the <addon> 
element. It is deÔ¨Åned as:
<addon id="plugin.video.
ludent" name="LUD HSW Viewer" 
version="0.0.1" provider-
name="LUDK">
rest of the content is placed here
</addon>
Here, id is the identiÔ¨Åer for the plug-in, so 
it should be unique among all the XBMC 
extensions, and id is also used for the directory 
name; version tells XBMC the extension 
version number, which helps in its ability to 
deliver automatic updates ‚Äì XBMC follows the  
Major.Minor.Patch versioning convention; name is 
the English title of the plug-in.
Note: Steps 3 to 5 cover entries that need to be 
added within the addon.xml Ô¨Åle.
03 
Adding dependency information
Dependency inside an extension is 
managed using the <requires> element.
<requires>
<import addon="xbmc.python" 
version="2.1.0"/>
<import addon="plugin.video.
youtube" version="3.0.0"/>
<import addon="plugin.video.vimeo" 
version="2.3.0"/>
<import addon="plugin.video.
dailymotion_com" version="1.0.0"/>
</requires>
In the above code we have added a dependency 
to a library called xbmc.python version 
2.1. Currently it is added as a mandatory 
dependency. 
To 
make 
the 
dependency 
optional you will need to add optional="true"; 
eg 
<import 
addon="kunal.special" 
version="0.1.0" optional="true" />
In the above example we have added core 
dependency xbmc.python to 2.1.0 because it‚Äôs 
the version shipped with XBMC version Frodo 
12.0 and 12.1 . If you were to add xbmc.python 
to 2.0 then it would only work in XBMC Eden 11.0 
and not in the latest version.
For the current version of XBMC 12.1, the 
following versions of core XBMC components 
are shipped:
xbmc.python 2.1.0
xbmc.gui 4.0.0
xbmc.json 6.0.0
xbmc.metadata 2.1.0
xbmc.addon 12.0.0
In addition to xbmc.python we are also adding 
some third-party plug-ins as dependencies, 
such as plugin.video.youtube. These plug-ins 
will be installed automatically when we install 
plugin.video.ludent.
04 
Setting up the provider and 
entry point
Our extension is supposed to provide the video 
content for XBMC. In order to convey that, we 
have to set up the following element:
<extension point="xbmc.python.
pluginsource" library="default.
py">
<provides>video</provides>
</extension>
Here, the library attribute sets up the plug-in 
entry point. In this example default.py will be 
executed when the user activates the plug-in. 
The <provides> elements sets up the media 
type it provides. This also gets reÔ¨Çected in the 
placement of the plug-in. Since ours is a video 
plug-in, it will show up in the Videos section 
of XBMC.
05 
Setting up plug-in metadata
Metadata about the plug-in is provided in 
<extension point="xbmc.addon.metadata">. The 
following are the important elements‚Ä¶ 
<platform>: Most of the time, XBMC extensions 
are cross-platform compatible. However, if you 
depend on the native platform library that is only 
available on certain platforms then you will need 
to set the supported platforms here. Accepted 
values for the platform are: all, linux, osx, osx32, 
osx64, ios (Apple iOS) , windx (Windows DirectX), 
wingl (Windows OpenGL) and android.
<summary lang="en">: This gives a brief 
description of the plug-in. Our example sets the 
language attribute as English, but you can use 
other languages too.
<description>: A detailed description of the  
plug-in.
<website>: Webpage where the plug-in is hosted.
<source>: Source code repository URL. If you are 
hosting your plug-in on GitHub, you can mention 
the repository URL here. 
<forum>: Discussion forum URL for your plug-in.
<email>: Author email. You can directly type email 
or use a bot-friendly email address like max at 
domain dot com.
06 
Setting changelog, icon, fanart 
and licence
We need a few additional Ô¨Åles in the plug-in 
directory‚Ä¶
changelog.txt: You should list the changes made 
to your plug-in between releases. The changelog 
is visible from the XBMC UI. 
An example changelog:
0.0.1
- Initial Release
0.0.2
- Fixed Video Buffering Issue
icon.png: This will represent the plug-in in the 
XBMC UI. It needs to be a non-transparent PNG 
Ô¨Åle of size 256x256.
fanart.jpg (optional): The fanart.jpg is rendered 
in the background if a user selects the plug-in 
in XBMC. The art needs to be rendered in HDTV 
formats, so its size can range from 1280x720 
(720p) up to the maximum 1920x1080 (1080p).

80  The Python Book
Work with Python
License.txt: This Ô¨Åle contains the licence of 
the distributed plug-in. The XBMC project 
recommends the use of the Creative Commons 
Attribution-ShareAlike 3.0 licence for skins, 
and GPL 2.0 for add-ons. However, most of the 
copyleft licences can be used.
 
Note: For the purpose of packaging, extensions/
add-ons/themes/plug-ins are the same. 
07 
Providing settings for the plug-in
Settings can be provided by the Ô¨Åle 
resources/settings.xml. These are great for user-
conÔ¨Ågurable options. 
Partial: resources/settings.xml
<settings>
<category label="30109">
<setting id="filter" type="bool" 
label="30101" default="false"/>
<setting type="sep" />
<setting id="showAll" type="bool" 
label="30106" default="false"/>
<setting id="showUnwatched" 
type="bool" label="30107" 
default="true"/>
<setting id="showUnfinished" 
type="bool" label="30108" 
default="false"/>
<setting type="sep" />
<setting id="forceViewMode" 
type="bool" label="30102" 
default="true"/>
<setting id="viewMode" type="number" 
label="30103" default="504"/>
</category>
<category label="30110">
<setting id="cat_hot" type="bool" 
label="30002" default="true"/>
<setting id="cat_new" type="bool" 
label="30003" default="true"/>
</category>
</settings>
Here, label deÔ¨Ånes the language id string which 
will then be used to display the label. id deÔ¨Ånes 
the name which will be used for programmatic 
access. type deÔ¨Ånes the data type you want 
to collect; it also affects the UI which will be 
displayed for the element. default deÔ¨Ånes the 
default value for the setting. You should always 
use a default value wherever possible to provide a 
better user experience.
The following are a few important settings 
types that you can use‚Ä¶
text: Used for basic string inputs. 
ipaddress: Used to collect internet addresses. 
number: Allows you enter a number. XBMC will 
also provide an on-screen numeric keyboard for 
the input.
slider: This provides an elegant way to collect 
integer, Ô¨Çoat and percentage values. You can get 
the slider setting in the following format:
<setting label="21223" type="slider" 
id="sideinput" default="10" 
range="1,1,10" option="int" />
In the above example we are creating a slider with 
min range 1, max range 10 and step as 1. In the 
option Ô¨Åeld we are stating the data type we are 
interested in ‚Äì we can also set option to "Ô¨Çoat" 
or "percent".
bool: Provides bool selection in the form of on  
or off.
Ô¨Åle: Provides a way to input Ô¨Åle paths. XBMC will 
provide a Ô¨Åle browser to make the selection of Ô¨Åle. 
If you are looking to make selection for a speciÔ¨Åc 
type of Ô¨Åle you can use audio, video, image or 
executable instead of Ô¨Åle.
folder: Provides a way to browse for a folder‚Ä¶ 
Example:
<setting label="12001" type="folder" 
id="folder" source="auto" 
option="writeable"/>
Here, source sets the start location for the 
folder, while option sets the write parameter for 
the application.
sep & lsep: sep is used to draw a horizontal line 
in the setting dialog; lsep is used for drawing 
a horizontal line with text. They do not collect 
any input but are there for building better user 
interface elements‚Ä¶
<setting label="21212" type="lsep" 
/>
08 
Language support
Language 
support 
is 
provided 
in 
the form of the strings.xml Ô¨Åle located in  
resources/languages/[language 
name]. 
This 
approach is very similar to many large software 
projects, including Android, where static strings 
are never used. 
resource/language/english/string.xml 
example:
<?xml version="1.0" encoding="utf-8" 
standalone="yes"?>
<strings>
<string id="30001">Add subreddit</
string>
<string id="30002">Hot</string>
<string id="30003">New</string>
<string id="30004">Top</string>
<string id="30005">Controversial</
string>
<string id="30006">Hour</string>
<string id="30007">Day</string>
<string id="30008">Week</string>
<string id="30009">Month</string>
<string id="30010">Year</string>
</strings>
As you may have seen in the settings.xml 
example, all the labels are referring to string 
ids. You can have many other languages as 
well. Depending upon the language XBMC is 
running in, the correct language Ô¨Åle will be 
loaded automatically.
Post XBMC Frodo (12.1), strings.xml will be 
deprecated. Post Frodo, XBMC will be moved 
to a GNU gettext-based translation system; 
gettext uses PO Ô¨Åles. You can use a tool called  
xbmc-xml2po 
to 
convert 
strings.xml 
into 
equivalent PO Ô¨Åles.
09 
Building default.py
Since our plug-in is small, it will all be 
contained inside default.py. If you are developing 
a more complex add-on then you can create 
supporting Ô¨Åles in the same directory. If your 
library depends upon third-party libraries, you 
have two ways to go about it. You can either place 
the third-party libraries into the resources/lib 
folder; or bundle the library itself into a plug-in, 
then add that plug-in as the dependency in the 
addon.xml Ô¨Åle.
Our plug-in works with reddit.tv. This is the 
website from Reddit which contains trending 
videos shared by its readers. Videos posted on 
Reddit are actually sourced from YouTube, Vimeo 
and Dailymotion. 
We will be starting off default.py using the 
following imports:
import urllib
import urllib2
‚Ä¶
import xbmcplugin

The Python Book  81
Work with Python
import xbmcgui
import xbmcaddon
Apart 
from 
xbmcplugin, 
xbmcgui 
and 
xbmcaddon, the rest are all standard Python 
libraries which are available on PyPI (Python 
Package Index) via pip. You will not need to install 
any library yourself since the Python runtime for 
XBMC has all the components built in. 
urllib and urllib2 help in HTTP communication. 
socket is used for network I/O; re is used 
for regular expression matching; sqlite3 is 
the Python module for accessing an SQLite 
embedded database; xbmcplugin, xbmcgui and 
xbmcaddon contain the XBMC-speciÔ¨Åc routine.
10 
Initialising
During the initialisation process, we will 
be reading various settings from settings.xml. 
Settings can be read in the following way:
addon = xbmcaddon.Addon()
filterRating = int(addon.
getSetting("filterRating"))
filterVoteThreshold = int(addon.getS
etting("filterVoteThreshold"))
In order to read settings of type bool you will need 
to do something like:
filter = addon.getSetting("filter") 
== "true"
We are also setting the main URL, plug-in handle 
and the user agent for it:
pluginhandle = int(sys.argv[1])
urlMain = "http://www.reddit.com"
userAgent = "Mozilla/5.0 (Windows NT 
6.2; WOW64; rv:22.0) Gecko/20100101 
Firefox/22.0"
opener = urllib2.build_opener()
opener.addheaders = [(‚ÄòUser-Agent‚Äô, 
userAgent)]
11 
Reading localised strings
As mentioned, XBMC uses strings.xml to 
serve up the text. In order to read those strings, 
you will need to use getLocalizedString.
translation = addon.
getLocalizedString
translation(30002)
In 
this 
example, 
translation(30002) 
will 
return the string "Hot" when it is running in an 
English environment.
12 
Building helper functions
In this step we will look at some of the 
important helper functions.
getDbPath(): This returns the location of the 
SQLite database Ô¨Åle for videos. XBMC stores 
library and playback information in SQLite DB 
Ô¨Åles. There are separate databases for videos 
and music, located inside the .xbmc/userdata/
Database folder. We are concerned with the 
videos DB. It is preÔ¨Åxed with ‚ÄòMyVideos‚Äô‚Ä¶
def getDbPath():
    path = xbmc.
translatePath("special://userdata/
Database")
    files = os.listdir(path)
    latest = ""
    for file in files:
        if file[:8] == ‚ÄòMyVideos‚Äô 
and file[-3:] == ‚Äò.db‚Äô:
            if file > latest:
                latest = file
    return os.path.join(path, 
latest)
getPlayCount(url): Once we have the database 
location, we can get the play count using a 
simple SQL query. The MyVideo database 
contains a table called Ô¨Åles, which keeps a 
record of all the video Ô¨Åles played in XBMC by 
Ô¨Ålename. In this case it will be URL.
dbPath = getDbPath()
conn = sqlite3.connect(dbPath)
c = conn.cursor()
def getPlayCount(url):
    c.execute(‚ÄòSELECT playCount FROM 
files WHERE strFilename=?‚Äô, [url])
    result = c.fetchone()
    if result:
        result = result[0]
        if result:
            return int(result)
        return 0
    return -1
The above table is an example of a Ô¨Åles table.
addSubreddit(): Our plug-in allows users to add 
their own Subreddit. This function takes the 
Subreddit input from the user, then saves it in 
the subreddits Ô¨Åle inside the addon data folder.
The following sets the subreddits Ô¨Åle location:
subredditsFile = xbmc.
translatePath("special://profile/
addon_data/"+addonID+"/subreddits")
this translates into .xbmc/userdata/
addon_data/plugin.video.ludent/
subreddits
def addSubreddit():
    keyboard = xbmc.Keyboard(‚Äò‚Äô, 
translation(30001))
    keyboard.doModal()
    if keyboard.isConfirmed() and 
keyboard.getText():
        subreddit = keyboard.
getText()
        fh = open(subredditsFile, 
‚Äòa‚Äô)
        fh.write(subreddit+‚Äô\n‚Äô)
        fh.close()
This function also demonstrates how to take 
a text input from the user. Here we are calling 
the Keyboard function with a text title. Once it 
detects the keyboard, it writes the input in the 
subreddits Ô¨Åle with a newline character.
getYoutubeUrl(id): When we locate a YouTube 
URL to play, we pass it on to the YouTube plug-in 
(plugin.video.youtube) to handle the playback. To 
do so, we need to call it in a certain format‚Ä¶
def getYoutubeUrl(id):
    url = "plugin://plugin.
video.youtube/?path=/root/
video&action=play_video&videoid=" + 
id
    return url
idFile
idPath
strFilename
playCount
lastPlayed
dateAdded
1
1
plugin://plugin.
2013-08-06 23:47
2
2
plugin://plugin.
1
2013-08-07 22:42
3
2
plugin://plugin.
1
2013-08-08 00:09
4
2
plugin://plugin.
1
2013-08-08 00:55
5
2
plugin://plugin.
1
2013-08-08 00:58

82  The Python Book
Work with Python
Similarly for Vimeo:
def getVimeoUrl(id):
    url = "plugin://plugin.video.
vimeo/?path=/root/video&action=play_
video&videoid=" + id
    return url
And for Dailymotion:
def getDailyMotionUrl(id):
    url = "plugin://plugin.video.
dailymotion_com/?url=" + id + 
"&mode=playVideo"
    return url
Once we have the video URL resolved into the 
respective plug-in, playing it is very simple:
def playVideo(url):
    listitem = xbmcgui.
ListItem(path=url)
    xbmcplugin.
setResolvedUrl(pluginhandle, True, 
listitem)
13 
Populating plug-in content listing
xbmcplugin contains various routines 
for handling the content listing inside the 
plug-ins UI. The Ô¨Årst step is to create directory 
entries which can be selected from the XBMC 
UI. For this we will use a function called  
xbmcplugin.addDirectoryItem.
For our convenience we will be abstracting 
addDirectoryItem to suit it to our purpose, so 
that we can set name, URL, mode, icon image 
and type easily.
def addDir(name, url, mode, 
iconimage, type=""):
    u = sys.argv[0]+"?url="+urllib.
quote_plus(url)+"&mode="+str(mode)+"
&type="+str(type)
    ok = True
    liz = xbmcgui.ListItem(name, 
iconImage="DefaultFolder.png", 
thumbnailImage=iconimage)
    liz.setInfo(type="Video", 
infoLabels={"Title": name})
    ok = xbmcplugin.
addDirectoryItem(handle=int(sys.
argv[1]), url=u, listitem=liz, 
isFolder=True)
    return ok
On the same lines, we can build a function to 
place links as well‚Ä¶
def addLink(name, url, mode, 
iconimage, description, date):
    u = sys.argv[0]+"?url="+urllib.
quote_plus(url)+"&mode="+str(mode)
    ok = True
    liz = xbmcgui.ListItem(name, 
iconImage="DefaultVideo.png", 
thumbnailImage=iconimage)
    liz.setInfo(type="Video", 
infoLabels={"Title": name, "Plot": 
description, "Aired": date})
    liz.setProperty(‚ÄòIsPlayable‚Äô, 
‚Äòtrue‚Äô)
    ok = xbmcplugin.
addDirectoryItem(handle=int(sys.
argv[1]), url=u, listitem=liz)
    return ok
Based on the abstractions we have just created, 
we can create the base functions which will 
populate the content. But before we do that, 
let‚Äôs Ô¨Årst understand how Reddit works. Most of 
the Reddit content Ô¨Ålters are provided through 
something called Subreddits. This allows you to 
view discussions related to a particular topic. In 
our plug-in we are interested in showing videos; 
we also want to show trailers, documentaries 
etc. We access these using Subreddits. For 
example, for trailers it would be reddit.com/r/
trailers. For domains we can use /domain; for 
example, to get all the YouTube videos posted 
on Reddit, we will call reddit.com/domain/
youtube.com. Now you may ask what is the 
guarantee that this Subreddit will only list 
videos? The answer is that it may not. For that 
reason we scrape the site ourselves to Ô¨Ånd 
videos. More on this in the next step.
The Ô¨Årst base function we‚Äôll deÔ¨Åne is index(). 
This is called when the user starts the plug-in. 
def index():
    defaultEntries = ["videos", 
"trailers", "documentaries", 
"music"]
    entries = defaultEntries[:]
    if os.path.
exists(subredditsFile):
        fh = open(subredditsFile, 
‚Äòr‚Äô)
        content = fh.read()
        fh.close()
        spl = content.split(‚Äò\n‚Äô)
        for i in range(0, len(spl), 
1):
            if spl[i]:
                subreddit = spl[i]
                entries.
append(subreddit)
    entries.sort()
    for entry in entries:
        if entry in defaultEntries:
            addDir(entry.title(), 
"r/"+entry, ‚ÄòlistSorting‚Äô, "")
        else:
            addDirR(entry.title(), 
"r/"+entry, ‚ÄòlistSorting‚Äô, "")
    addDir("[ Vimeo.com ]", 
"domain/vimeo.com", ‚ÄòlistSorting‚Äô, 
"")
    addDir("[ Youtu.be ]", "domain/
youtu.be", ‚ÄòlistSorting‚Äô, "")
    addDir("[ Youtube.com 
]", "domain/youtube.com", 
‚ÄòlistSorting‚Äô, "")
    addDir("[ Dailymotion.com 
]", "domain/dailymotion.com", 
‚ÄòlistSorting‚Äô, "")
    addDir("[B]- 
"+translation(30001)+" -[/B]", "", 
‚ÄòaddSubreddit‚Äô, "")
    xbmcplugin.
endOfDirectory(pluginhandle)
Here, the penultimate entry makes a call to 
addSubreddit. listSorting takes care of sorting 
out the data based on criteria such as Hot, 
New etc. It also calls in Reddit‚Äôs JSON function, 
which returns nice easy-to-parse JSON data.
We have created a settings entry for all the 
sorting criteria. Based on what is set, we go 
ahead and build out the sorted list.
def listSorting(subreddit):
    if cat_hot:
        addDir(translation(30002), 
urlMain+"/"+subreddit+"/hot/.
json?limit=100", ‚ÄòlistVideos‚Äô, "")
    if cat_new:
        addDir(translation(30003), 
urlMain+"/"+subreddit+"/new/.
json?limit=100", ‚ÄòlistVideos‚Äô, "")
    if cat_top_d:
        
addDir(translation(30004)+": 
"+translation(30007), 
urlMain+"/"+subreddit+"/
top/.json?limit=100&t=day", 
‚ÄòlistVideos‚Äô, "")
    xbmcplugin.
endOfDirectory(pluginhandle)

The Python Book  83
Work with Python
In the code listed to the left here, we are 
opening the URL, then ‚Äì based on regular 
expression matches ‚Äì we are discovering 
the location title, description, date, ups, 
downs and rating. We are also locating 
video thumbnails and then passing them on  
to XBMC.
Later in the code, we also try to match the 
URL to a video provider. With our plug-in we are 
supporting YouTube, Vimeo and Dailymotion. 
If this is detected successfully, we call the 
helper functions to locate the XBMC plug-
in based playback URL. During this whole 
parsing process, if any exception is raised, the 
whole loop is ignored and the next JSON item 
is parsed.
15 
Installing & running the add-on
You can install the add-on using one of 
the following two methods: 
‚Ä¢ You can copy the plug-in directory to  
.xbmc/addons.
‚Ä¢ You can install the plug-in from the zip Ô¨Åle. To 
do so, compress the add-on folder into a zip Ô¨Åle 
using the command:
$ zip -r plugin.video.ludent.zip 
plugin.video.ludent
To install the plug-in from the zip Ô¨Åle,  open 
XBMC, go to System then Add-ons, then click 
‚ÄòInstall from zip Ô¨Åle‚Äô. The beneÔ¨Åt of installing 
from a zip Ô¨Åle is that XBMC will automatically 
try to install all the dependent plug-ins as well.
Once you have the plug-in installed, you can 
run it by going to the Videos Add-ons section of 
XBMC, selecting Get More‚Ä¶ and then clicking 
on LUD Reddit Viewer. 
You can access the settings dialog of the 
plug-in by right-clicking the LUD Reddit Viewer, 
then selecting ‚ÄòAdd-on settings‚Äô.
So, you have seen how robust and powerful 
XBMC‚Äôs extension system is. In this example, 
we were able to leverage the full power of 
Python 
(including 
those 
magical 
regular 
expression matches) from within XBMC. 
XBMC itself also offers a robust UI framework, 
which provides a very professional look for  
our add-on. 
As powerful as it may seem, we have only 
built a video plug-in. XBMC‚Äôs extension system 
also provides a framework for building fully 
Ô¨Çedged programs (called Programs). We will 
cover this in a later issue.
14 
Populating the episode view (listing videos)
At this point we have the URL in hand, which returns JSON data; now we need to extract the 
data out of it which will make sense to us. 
By looking at the JSON data, you can see there‚Äôs a lot of interesting information present here. For 
example, url is set to youtube.com/watch?v=n4rTztvVx8E; title is set to ‚ÄòThe Counselor ‚Äì OfÔ¨Åcial 
Trailer‚Äô. There also many other bits of data that we will use, such as ups, downs, num_comments, 
thumbnail_url and so on. In order to Ô¨Ålter out the data that we need, we will use regular expressions. 
There is one more thing to note: since we are not presenting directories any more but are ready to 
place content, we have to set the xbmcplugin.setContent to episodes mode. 
def listVideos(url):
    currentUrl = url
    xbmcplugin.setContent(pluginhandle, "episodes")
    content = opener.open(url).read()
    spl = content.split(‚Äò"content"‚Äô)
    for i in range(1, len(spl), 1):
        entry = spl[i]
        try:
            match = re.compile(‚Äò"title": "(.+?)"‚Äô, re.DOTALL).findall(entry)
            title = match[0].replace("&amp;", "&")
            match = re.compile(‚Äò"description": "(.+?)"‚Äô, re.DOTALL).
findall(entry)
            description = match[0]
            match = re.compile(‚Äò"created_utc": (.+?),‚Äô, re.DOTALL).findall(entry)
            downs = int(match[0].replace("}", ""))
            rating = int(ups*100/(ups+downs))
            if filter and (ups+downs) > filterVoteThreshold and rating < 
filterRating:
                continue
            title = title+" ("+str(rating)+"%)"
            match = re.compile(‚Äò"num_comments": (.+?),‚Äô, re.DOTALL).
findall(entry)
            comments = match[0]
            description = dateTime+"  |  "+str(ups+downs)+" votes: 
"+str(rating)+"% Up  |  "+comments+" comments\n"+description
            match = re.compile(‚Äò"thumbnail_url": "(.+?)"‚Äô, re.DOTALL).
findall(entry)
            thumb = match[0]
            matchYoutube = re.compile(‚Äò"url": "http://www.youtube.com/
watch\\?v=(.+?)"‚Äô, re.DOTALL).findall(entry)
            matchVimeo = re.compile(‚Äò"url": "http://vimeo.com/(.+?)"‚Äô, 
re.DOTALL).findall(entry)
            url = ""
            if matchYoutube:
                url = getYoutubeUrl(matchYoutube[0])
            elif matchVimeo:
                url = getVimeoUrl(matchVimeo[0].replace("#", ""))
            if url:
                addLink(title, url, ‚ÄòplayVideo‚Äô, thumb, description, date)
        except:
            pass
    match = re.compile(‚Äò"after": "(.+?)"‚Äô, re.DOTALL).findall(entry)
    xbmcplugin.endOfDirectory(pluginhandle)
    if forceViewMode:
        xbmc.executebuiltin(‚ÄòContainer.SetViewMode(‚Äò+viewMode+‚Äô)‚Äô)

84  The Python Book
Work with Python
Powerful calculations with 
NumPy, SciPy and Matplotlib
Scientific computing 
with NumPy
NumPy is the primary Python package for 
performing scientiÔ¨Åc computing. It has a 
powerful N-dimensional array object, tools 
for integrating C/C++ and Fortran code, linear 
algebra, 
Fourier 
transform, 
and 
random 
number capabilities, among other things. 
NumPy also supports broadcasting, which is 
a clever way for universal functions to deal in 
a meaningful way with inputs that do not have 
exactly the same form.
Apart 
from 
its 
capabilities, 
the 
other 
advantage of NumPy is that it can be integrated 
into Python programs. In other words, you may 
get your data from a database, the output of 
another program, an external Ô¨Åle or an HTML 
page and then process it using NumPy.
This article will show you how to install 
NumPy, make calculations, plot data, read and 
write external Ô¨Åles, and it will introduce you to 
some Matplotlib and SciPy packages that work 
well with NumPy.
NumPy also works with Pygame, a Python 
package for creating games, though explaining 
its use is beyond of the scope of this article.
It is considered good practice to try the 
various NumPy commands inside the Python 
shell before putting them into Python programs.
The examples in this article are using either 
Python shell or iPython.
A simple Python 
program for 
Polynomial Fitting!
A Python script 
that uses SciPy to 
process an image
Matplotlib 
generated output
Finding help  
is easy
Resources
NumPy: 
www.numpy.org
SciPy: 
www.scipy.org
Matplotlib: 
www.matplotlib.org
01 
Installing NumPy
Most 
Linux 
distributions 
have 
a 
ready-to-install package you can use. After 
installation, you can Ô¨Ånd out the NumPy version 
you are using by executing the following:
$ python
Python 2.7.3 (default, Mar 13 2014, 11:03:55) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or 
"license" for more information.
>>> numpy.version.version

The Python Book  85
Work with Python
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'numpy' is not defined
>>> import numpy
>>> numpy.version.version
'1.6.2'
>>>
Not only have you found the NumPy version but 
you also know that NumPy is properly installed.
02 
About NumPy
Despite its simplistic name, NumPy is 
a powerful Python package that is mainly for 
working with arrays and matrices.
There are many ways to create an array but 
the simplest is by using the array() function:
>>> oneD = array([1,2,3,4])
The 
aforementioned 
command 
creates 
a 
one-dimensional array. If you want to create a 
two-dimensional array, you can use the array() 
function as follows:
>>> twoD = array([ [1,2,3],
...                [3,3,3],
...                [-1,-0.5,4],
...                [0,1,0]] )
You can also create arrays with more dimensions.
03 
Making simple calculations
using NumPy
Given an array named myArray, you can Ô¨Å nd 
the minimum and maximum values in it by 
executing the following commands:
>>> myArray.min()
>>> myArray.max()
Should you wish to Ô¨Å nd the mean value of all 
array elements, run the next command:
>>> myArray.mean()
Similarly, you can Ô¨Å nd the median of the array 
by running the following command:
>>> median(myArray)
The median value of a set is an element that 
divides the data set into two subsets (left 
and right subsets) with the same number of 
elements. If the data set has an odd number of 
elements, then the median is part of the data 
set. On the other side, if the data set has an 
even number of elements, then the median is 
the mean value of the two centre elements of 
the sorted data set.
04 
Using arrays with NumPy
NumPy not only embraces the indexing 
methods used in typical Python for strings and 
lists but also extends them. If you want to select 
a given element from an array, you can use the 
following notation:
>>> twoD[1,2]
You can also select a part of an array (a slice) 
using the following notation:
>>> twoD[:1,1:3]
Finally, you can convert an array into a Python 
list using the tolist() function.
05 
Reading Ô¨Å les
Imagine that you have just extracted 
information from an Apache log file using AWK and 
you want to process the text file using NumPy.
The following AWK code Ô¨Å nds out the total 
number of requests per hour:
$ cat access.log | cut -d[ -f2 | cut -d] 
-f1 | awk -F: '{print $2}' | sort -n | uniq 
-c | awk '{print $2, $1}' > timeN.txt
The format of the text Ô¨Å le (timeN.txt) with the 
data is the following:
00 191
01 225
02 121
03 104
Reading the timeN.txt Ô¨Å le and assigning it to a 
new array variable can be done as follows:
aa = np.loadtxt("timeN.txt")
06 
Writing to Ô¨Å les
Writing variables to a Ô¨Å le is largely 
similar to reading a Ô¨Å le. If you have an array 
variable named aa1, you can easily save its 
contents into a Ô¨Å le called aa1.txt by using the 
following command:
In [17]: np.savetxt("aa1.txt", aa1)
As you can easily imagine, you can read 
the contents of aa1.txt later by using the 
loadtxt() function.
07 
Common functions
NumPy supports many numerical and 
statistical functions. When you apply a function 
to an array, the function is automatically applied 
to all array elements.
When working with matrices, you can Ô¨Å nd the 
inverse of a matrix AA by typing ‚ÄúAA.I‚Äù. You can 
also Ô¨Å nd its eigenvalues by typing ‚Äúnp.linalg.
eigvals(AA)‚Äù and its eigenvector by typing ‚Äúnp.
linalg.eig(BB)‚Äù.
08 
Working with matrices
A special subtype of a two-dimensional 
NumPy array is a matrix. A matrix is like an 
array except that matrix multiplication replaces 
element-by-element multiplication. Matrices 
are generated using the matrix (or mat) function 
as follows:
In [2]: AA = np.mat('0 1 1; 1 1 1; 1 1 1')
You can add two matrices named AA and BB by 
typing AA + BB. Similarly, you can multiply them 
by typing AA * BB.
03 
Making simple 
calculations

86  The Python Book
Work with Python
 SciPy is built on top of NumPy 
and is more advanced 
 
09 
Plotting with Matplotlib
The Ô¨Å rst move you should make is to 
install Matplotlib. As you can see, Matplotlib has 
many dependencies that you should also install.
The Ô¨Å rst thing you will learn is how to 
plot a polynomial function. The necessary 
commands 
for 
plotting 
the 
3x^2-x+1 
polynomial are the following:
import numpy as np
import matplotlib.pyplot as plt
myPoly = np.poly1d(np.array([3, -1, 1]).
astype(float))
x = np.linspace(-5, 5, 100)
y = myPoly(x)
plt.xlabel('x values')
plt.ylabel('f(x) values')
xticks = np.arange(-5, 5, 10)
yticks = np.arange(0, 100, 10)
plt.xticks(xticks)
plt.yticks(yticks)
plt.grid(True)
plt.plot(x,y)
The variable that holds the polynomial 
is myPoly. The range of values that will 
be plotted for x is deÔ¨Å ned using ‚Äúx = 
np.linspace(-5, 5, 100)‚Äù. The other important 
variable is y, which calculates and holds the 
values of f(x) for each x value.
It is important that you start ipython using 
the ‚Äúipython --pylab=qt‚Äù parameters in order 
to see the output on your screen. If you are 
interested in plotting polynomial functions, 
you should experiment more, as NumPy can 
also calculate the derivatives of a function and 
plot multiple functions in the same output.
10 
About SciPy
SciPy is built on top of NumPy and 
is more advanced than NumPy. It supports 
numerical integration, optimisations, signal 
processing, image and audio processing, 
and statistics. The example in Fig. 01 (to the left) 
uses a small part of the scipy.stats package that 
is about statistics.
The example uses two statistics distributions 
and may be difÔ¨Å cult to understand even if you 
know mathematics, but it is presented in order 
to give you a better taste of SciPy commands.
11 
Using SciPy for image processing
Now we will show you how to process 
and transform a PNG image using SciPy.
The most important part of the code is the 
following line:
In [36]: from scipy.stats import poisson, lognorm
In [37]: mySh = 10;
In [38]: myMu = 10;
In [39]: ln = lognorm(mySh)
In [40]: p = poisson(myMu)
In [41]: ln.rvs((10,))
Out[41]: 
array([  9.29393114e-02,   1.15957068e+01,   9.78411983e+01,
         8.26370734e-07,   5.64451441e-03,   4.61744055e-09,
         4.98471222e-06,   1.45947948e+02,   9.25502852e-06,
         5.87353720e-02])
In [42]: p.rvs((10,))
Out[42]: array([12, 11,  9,  9,  9, 10,  9,  4, 13,  8])
In [43]: ln.pdf(3)
Out[43]: 0.013218067177522842
Fig 01
09
Plotting with 
Matplotlib

The Python Book  87
Work with Python
 Process and transform a PNG 
image using SciPy 
 
12 
Other useful functions
It is very useful to be able to Ô¨Å nd out 
the data type of the elements in an array; it 
can be done using the dtype() function.
Similarly, the ndim() function returns the 
number of dimensions of an array.
When reading data from external Ô¨Å les, you 
can save their data columns into separate 
variables using the following way:
In [10]: aa1,aa2 = np.loadtxt("timeN.txt", 
usecols=(0,1), unpack=True)
The aforementioned command saves column 
1 into variable aa1 and column 2 into variable 
aa2. The ‚Äúunpack=True‚Äù allows the data to be 
assigned to two different variables. Please 
note that the numbering of columns starts 
with 0.
14 
Array broadcasting in NumPy
To close, we will talk more about 
array broadcasting because it is a very 
useful characteristic. First, you should know 
that array broadcasting has a rule: in order 
for two arrays to be considered for array 
broadcasting, ‚Äúthe size of the trailing axes for 
both arrays in an operation must either be the 
same size or one of them must be one.‚Äù
Put simply, array broadcasting allows 
NumPy to ‚Äúchange‚Äù the dimensions of an array 
by Ô¨Å lling it with data in order to be able to do 
calculations with another array. Nevertheless, 
you cannot stretch both dimensions of an 
array to do your job.
13 
Fitting to polynomials
The NumPy polyÔ¨Å t() function tries to Ô¨Å t 
a set of data points to a polynomial. The data 
was found from the timeN.txt Ô¨Å le, created 
earlier in this article.
The Python script uses a Ô¨Å fth degree 
polynomial, but if you want to use a different 
degree instead then you only have to change 
the following line:
coefficients = np.polyfit(aa1, aa2, 5)
image = np.array(Image.open('SA.png').
convert('L'))
This line allows you to read a usual PNG 
Ô¨Å le and convert it into a NumPy array for 
additional processing. The program will 
also separate the output into four parts and 
displays a different image for each of these 
four parts.
11 
Using SciPy for 
image processing
13 
Fitting to 
Polynomials

88  The Python Book
Work with Python
How to program both the client, complete with a GUI, and 
server of a simple instant messenger in Python
Instant messaging with Python
He‚Äôre we‚Äôll be implementing an instant 
messenger in Python with a client-server 
architecture. This means each client connects 
to the server, which relays any message that 
one client sends to all other clients. The server 
will also notify the other clients when someone 
joins or leaves the server. The instant messenger 
can work anywhere a TCP socket can: on the 
same computer with the loopback interface, 
across various computers on a LAN, or even 
over the internet if you were to conÔ¨Å gure your 
router correctly. However, our messages aren‚Äôt 
encrypted, so we wouldn‚Äôt recommend that.
Writing an instant messenger is an interesting 
technical problem that covers a bunch of 
areas that you may not have come across while 
programming before:
‚Ä¢ We‚Äôll be employing sockets, which are used 
to transmit data across networks.
‚Ä¢ We‚Äôll also be using threading, which allows a 
program to do multiple things at once.
‚Ä¢ We‚Äôll cover the basics of writing a simple 
graphical user interface with GTK, as well as 
how to interact with that from a different thread.
‚Ä¢ Finally, we‚Äôll be touching on the use of 
regular expressions to easily analyse and extract 
data from strings.
Before getting started, you‚Äôll need to have 
a Python2.x interpreter installed, as well as 
the PyGTK bindings and the Python2 GObject 
bindings. The chances are that if you have a 
system with a fair amount of software on it, 
you will already have these packages, so it may 
be easier to wait and see if you‚Äôre missing any 
libraries when you attempt to import them. All of 
the above packages are commonly used, so you 
should be able to install them using your distro‚Äôs 
package manager.
Resources
A computer ‚Äì running your favourite Linux 
distribution
Internet connection ‚Äì to access 
documentation
Python 2.x, PyGTK and GObject ‚Äì 
packages installed
The server notiÔ¨Å es 
all clients when a 
new client joins
Each message 
has a time stamp 
preÔ¨Å xed to it
Similarly, the server 
notiÔ¨Å es all clients 
when a client leaves
A client can detect 
when the server 
exits without 
crashing or hanging

The Python Book  89
Work with Python
01 
The server
The server will do the following jobs:
‚Ä¢ Listen for new clients
‚Ä¢ Notify all clients when a new client joins
‚Ä¢ Notify all clients when a client leaves
‚Ä¢ Receive and deliver messages to all clients
We‚Äôre going to write the server side of the 
instant messenger Ô¨Å rst, as the client requires 
it. There will be two code Ô¨Å les, so it‚Äôs a good 
idea to make a folder to keep them inside. You 
can create an empty Ô¨Å le with the command 
touch [filename], and mark that Ô¨Å le as 
executable using chmod +x [filename]. This 
Ô¨Å le is now ready to edit in your favourite editor.
[liam@liam-laptop Python]$ mkdir 
Python-IM
[liam@liam-laptop Python]$ cd 
Python-IM/
[liam@liam-laptop Python-IM]$ touch 
IM-Server.py
[liam@liam-laptop Python-IM]$ chmod 
+x IM-Server.py
02 
Starting off
As usual, we need to start off with the 
line that tells the program loader what it needs 
to interpret the rest of the Ô¨Å le with. In your 
advisor‚Äôs case, that line is: 
#!/usr/bin/env python2. 
On your system, it may need to be changed to 
#!/usr/bin/env/ python2.6 or #!/usr/
bin/env python2.7
After that, we‚Äôve written a short comment about 
what the application does, and imported the 
required libraries. We‚Äôve already mentioned 
what the threading and socket libraries are 
for. The re library is used for searching strings 
with regular expressions. The signal library is 
used for dealing with signals that will kill the 
program, such as SIGINT. SIGINT is sent when 
Ctrl+C is pressed. We handle these signals so 
that the program can tell the clients that it‚Äôs 
exiting rather than dying unexpectedly. The sys 
library is used to exit the program. Finally, the 
time library is used to put a sensible limit on how 
frequently the body of while loops execute.
#!/usr/bin/env python2
# The server side of an instant 
messaging application. Written as 
part of a Linux User & Developer 
tutorial by Liam Fraser in 2013.
import threading
03 
The Server class
The Server class is the main class of our 
instant messenger server. The initialiser of this 
class accepts a port number to start listening 
for clients on. It then creates a socket, binds the 
socket to the speciÔ¨Å ed port on all interfaces, 
and then starts to listen on that port. You can 
optionally include an IP address in the tuple that 
contains the port. Passing in a blank string like 
we have done causes it to listen on all interfaces. 
The value of 1 passed to the listen function 
speciÔ¨Å es the maximum number of queued 
connections we can accept. This shouldn‚Äôt be 
a problem as we‚Äôre not expecting a bunch of 
clients to connect at exactly the same time.
Now that we have a socket, we‚Äôll create an 
empty array that will be later used to store a 
collection of client sockets that we can echo 
messages to. The Ô¨Å nal part is to tell the signal 
library to run the self.signal_handler function, 
which we have yet to write, when a SIGINT or 
SIGTERM is sent to the application so that we 
can tidy up nicely.
class Server():
    def __init__(self, port):
# Create a socket and bind it to a 
port
        self.listener = socket.
socket(socket.AF_INET, socket.SOCK_
STREAM)
        self.listener.bind((‚Äò‚Äô, 
port))
        self.listener.listen(1)
        print ‚ÄúListening on port 
{0}‚Äù.format(port)
# Used to store all of the client 
sockets we have, for echoing
to them
        self.client_sockets = []
# Run the function self.signal_
handler when Ctrl+C is pressed
        signal.signal(signal.SIGINT, 
self.signal_handler)
        signal.signal(signal.
SIGTERM, self.signal_handler)
04 
The server‚Äôs main loop
The server‚Äôs main loop essentially 
accepts 
new 
connections 
from 
clients, 
adds that client‚Äôs socket to the collection of 
import socket
import re
import signal
import sys
import time
Threading: docs.python.org/2/library/
threading.html
Sockets: docs.python.org/2/library/
socket.html
Regular expressions: docs.python.
org/2/library/re.html
The signal handler: docs.python.org/
2/library/signal.html
PyGTK: www.pygtk.org/
pygtk2reference
GObject: www.pygtk.org/
pygtk2reference/gobject-functions.html
Useful 
documentation
sockets and then starts an instance of the 
ClientListener class, which we have yet to 
write, in a new thread. Sometimes, deÔ¨Å ning 
interfaces you are going to call before you‚Äôve 
written them is good, because it can give an 
overview of how the program will work without 
worrying about the details.
Note that we‚Äôre printing information as we go 
along, to make debugging easier should we need 
to do it. Sleeping at the end of the loop is useful 
to make sure the while loop can‚Äôt run quickly 
enough to hang the machine. However, this is 
unlikely to happen as the line that accepts new 
connections is blocking, which means that the 
program waits for a connection before moving 
on from that line. For this reason, we need to 
enclose the line in a try block, so that we can 
catch the socket error and exit when we can no 
longer accept connections. This will usually be 
when we‚Äôve closed the socket during the process 
of quitting the program.
    def run(self):
        while True:
# Listen for clients, and create a 
ClientThread for each new client
            print ‚ÄúListening for 
more clients‚Äù
            try:
                (client_socket, 
client_address) = self.listener.
accept()
            except socket.error:
                 sys.exit(‚ÄúCould not 

90  The Python Book
Work with Python
09 
Tidying up
We need to have a function to tidy up 
the thread. We‚Äôll call this either when the client 
sends us a blank string (indicating that it‚Äôs 
stopped listening on the socket) or sends us the 
string ‚ÄúQUIT‚Äù. When this happens, we‚Äôll echo to 
every client that the user has quit.
    def quit(self):
# Tidy up and end the thread
        self.listening = False
        self.socket.close()
        self.server.remove_
socket(self.socket)
        self.server.echo("{0} has 
quit.\n".format(self.username))
05 
The echo function
We need a function that can be called 
from a client‚Äôs thread to echo a message to each 
client. This function is pretty simple. The most 
important part is that sending data to sockets is 
in a try block, which means that we can handle 
the exception if the operation fails, rather than 
having the program crash.
    def echo(self, data):
# Send a message to each socket in 
self.client_socket
        print "echoing: {0}".
format(data)
        for socket in self.client_
sockets:
# Try and echo to all clients
            try:
                socket.sendall(data)
            except socket.error:
                print "Unable to send 
message"
06 
Finishing the Server class
The remainder of the Server class is 
taken up with a couple of simple functions; 
one to remove a socket from the collection of 
sockets, which doesn‚Äôt need an explanation, 
and the signal_handler function that we talked 
about in the initialiser of the class. This function 
stops listening for new connections, and 
unbinds the socket from the port it was listening 
on. Finally, we send a message to each client to 
let them know that we are exiting. The signal will 
continue to close the program as expected once 
the signal_handler function has ended.
    def remove_socket(self, socket):
07 
The client thread
The class that is used to deal with each 
client inherits the Thread class. This means 
that the class can be created, then started with 
client_thread.start(). At this point, the 
code in the run function of the class will be run in 
the background and the main loop of the Server 
class will continue to accept new connections.
We have to start by initialising the Thread base 
class, using the super keyword. You may have 
noticed that when we created a new instance of 
the ClientListener class in the server‚Äôs main loop, 
we passed through the server‚Äôs self variable. We 
do this because it‚Äôs better for each instance of the 
ClientListener class to have its own reference to 
the server, rather than using the global one that 
we‚Äôll create later to actually start the application.
class ClientListener(threading.
Thread):
    def __init__(self, server, 
socket, address):
# Initialise the Thread base class
        super(ClientListener, 
self).__init__()
# Store the values that have been 
passed to the constructor
        self.server = server
        self.address = address
        self.socket = socket
        self.listening = True
        self.username = "No 
Username"
08 
The client thread‚Äôs loop
The loop that runs in the client thread 
is pretty similar to the one in the server. It keeps 
listening for data while self.listening is true, 
and passes any data it gets to a handle_msg 
function that we will write shortly. The value 
passed to the socket.recv function is the size of 
10 
Handling messages
There are three possible messages our 
clients can send:
‚Ä¢ QUIT
‚Ä¢ USERNAME user
‚Ä¢ Arbitrary string to be echoed to all clients
The client will also send a bunch of empty 
messages if the socket has been closed, so we 
will end their thread if that happens. The code 
should be pretty self-explanatory apart from 
the regular expression part. If someone sends 
the USERNAME message, then the server tells 
every client that a new user has joined. This is 
tested with a regular expression. ^ indicates the 
start of the string, $ indicates the end, and the 
brackets containing .* extract whatever comes 
after ‚ÄúUSERNAME ‚Äù.
# Remove the specified socket from the 
client_sockets list
        self.client_sockets.
remove(socket)
    def signal_handler(self, signal, 
frame):
# Run when Ctrl+C is pressed
        print "Tidying up"
# Stop listening for new connections
        self.listener.close()
# Let each client know we are quitting
        self.echo("QUIT")
accept any more connections‚Äù)
            self.client_sockets.
append(client_socket)
            print ‚ÄúStarting client 
thread for {0}‚Äù.format(client_
address)
            client_thread = 
ClientListener(self, client_socket, 
client_address)
            client_thread.start()
            time.sleep(0.1)
the buffer to use while receiving data.
    def run(self):
# The thread's loop to receive and 
process messages
        while self.listening:
            data = ""
            try:
                data = self.socket.
recv(1024)
            except socket.error:
                "Unable to recieve 
data"
            self.handle_msg(data)
            time.sleep(0.1)
# The while loop has ended
        print "Ending client thread 
for {0}".format(self.address)

Work with Python
11 
Starting the server
The code that actually starts the Server 
class is as follows. Note that you are probably 
best picking a high-numbered port as you need 
to be root to open ports <1024.
if __name__ == "__main__":
    # Start a server on port 59091
    server = Server(59091)
    server.run()
13 
The client graphical user interface
The user interface of the client isn‚Äôt 
the main focus of the tutorial, and won‚Äôt be 
explained in as much detail as the rest of 
the code. However, the code should be fairly 
straightforward to read and we have provided 
links to documentation that will help.
Our MainWindow class inherits the gtk 
Window class, so we need to start by initialising 
that using the super keyword. Then we create 
the controls that will go on the window, connect 
any events they have to functions, and Ô¨Å nally 
lay out the controls how we want. The destroy 
event is raised when the program is closed, and 
the other events should be obvious.
GTK uses a packing layout, in which you use 
Vboxes and Hboxes to lay out the controls. V 
and H stand for vertical and horizontal. These 
controls essentially let you split a window 
up almost like a table, and will automatically 
decide the size of the controls depending on the 
size of the application.
GTK doesn‚Äôt come with a control to enter 
basic information, such as the server‚Äôs IP 
address, port and your chosen username, so 
we‚Äôve made a function called ask_for_info, 
which creates a message box, adds a text 
box to it and then retrieves the results. We‚Äôve 
done this because it‚Äôs simpler and uses less 
code than creating a new window to accept 
the information.
12 
The client 
Create a new Ô¨Å le for the client as we did 
for the server and open it in your favourite editor. 
The client requires the same imports as the 
server, as well as the gtk, gobject and datetime 
libraries. One important thing we need to do is to 
tell GObject that we‚Äôll be using threading, so we 
can call functions from other threads and have 
the main window, which is running in the main 
GTK thread, update.
class MainWindow(gtk.Window):
    def __init__(self):
# Initialise base gtk window class
        super(MainWindow, self).__
init__()
# Create controls
        self.set_title("IM Client")
        vbox = gtk.VBox()
        hbox = gtk.HBox()
        self.username_label = gtk.
Label()
        self.text_entry = gtk.
Entry()
        send_button = gtk.
Button("Send")
        self.text_buffer = gtk.
TextBuffer()
        text_view = gtk.
TextView(self.text_buffer)
# Connect events
        self.connect("destroy", 
self.graceful_quit)
        send_button.
connect("clicked", self.send_
message)
# Activate event when user presses 
Enter
        self.text_entry.
connect("activate", self.send_
message)
# Do layout
        vbox.pack_start(text_view)
        hbox.pack_start(self.
username_label, expand = False)
 We need to tell GObject that we‚Äôll be 
using threading 
 
    def handle_msg(self, data):
# Print and then process the message 
we‚Äôve just recieved
        print "{0} sent: {1}".
format(self.address, data)
# Use regular expressions to test for 
a message like "USERNAME liam"
        username_result = 
re.search('^USERNAME (.*)$', data)
        if username_result:
            self.username = 
username_result.group(1)
            self.server.echo("{0} 
has joined.\n".format(self.
username))
        elif data == "QUIT":
# If the client has sent quit then 
close this thread
            self.quit()
        elif data == "":
# The socket at the other end is 
probably closed
            self.quit()
        else:
# It's a normal message so echo it to 
everyone
            self.server.echo(data)
#!/usr/bin/env python2
# The client side of an instant 
messaging application. Written as 
part of a Linux User & Developer 
tutorial by Liam Fraser in 2013.
import threading
import gtk
import gobject
import socket
import re
import time
import datetime
# Tell gobject to expect calls from 
multiple threads
gobject.threads_init()

8PSLXJUI1ZUIPO
14 
ConÔ¨Å guring the client
This code is run after we‚Äôve added the 
controls to the main window, and asks the user 
for input. Currently, the application will exit if the 
user enters an incorrect server address or port; 
but this isn‚Äôt a production system, so that‚Äôs Ô¨Å ne. 
    def configure(self):
# Performs the steps to connect to 
the server
# Show a dialog box asking for server 
address followed by a port
        server = self.ask_for_
info("server_address:port")
# Regex that crudely matches an IP 
address and a port number
        regex = re.search('^(\d+\.\
d+\.\d+\.\d+):(\d+)$', server)
        address = regex.group(1).
strip()
        port = regex.group(2).
strip()
# Ask for a username
        self.username = self.ask_
for_info("username")
        self.username_label.set_
text(self.username)
# Attempt to connect to the server 
and then start listening
        self.network = 
Networking(self, self.username, 
address, int(port))
        self.network.listen()
 The server is going to echo the 
message to each client 
 
15 
The remainder of MainWindow
The rest of the MainWindow class has 
plenty of comments to explain itself, as follows. 
One thing to note is that when a client sends a 
message, it doesn‚Äôt display it in the text view 
straight away. The server is going to echo the 
message to each client, so the client simply 
displays its own message when the server 
echoes it back. This means that you can tell if 
the server is not receiving your messages when 
you don‚Äôt see a message that you send.
   def add_text(self, new_text):
# Add text to the text view
        text_with_timestamp = "{0} 
{1}".format(datetime.datetime.now(),
                                               
new_text)
# Get the position of the end of 
the text buffer, so we know where to 
insert new text
        end_itr = self.text_buffer.
get_end_iter()
# Add new text at the end of the buffer
        self.text_buffer.insert(end_
itr, text_with_timestamp)
    def send_message(self, widget):
# Clear the text entry and send the 
message to the server
# We don't need to display it as it 
will be echoed back to each client, 
including us.
        new_text = self.text_entry.
get_text()
        self.text_entry.set_text("")
        message = "{0} says: {1}\n".
format(self.username, new_text)
        self.network.send(message)
    def graceful_quit(self, widget):
# When the application is closed, 
tell GTK to quit, then tell the 
server we are quitting and tidy up 
the network
        gtk.main_quit()
        self.network.send("QUIT")
        self.network.tidy_up()
        hbox.pack_start(self.text_
entry)
        hbox.pack_end(send_button, 
expand = False)
        vbox.pack_end(hbox, expand 
= False)
# Show ourselves
        self.add(vbox)
        self.show_all()
# Go through the configuration 
process
        self.configure()
    def ask_for_info(self, 
question):
# Shows a message box with a text 
entry and returns the response
        dialog = gtk.
MessageDialog(parent = self, type = 
gtk.MESSAGE_QUESTION,
                                   
flags = gtk.DIALOG_MODAL |
                                           
gtk.DIALOG_DESTROY_WITH_PARENT,
                                   
buttons = gtk.BUTTONS_OK_CANCEL,
                                   
message_format = question)
        entry = gtk.Entry()
        entry.show()
        dialog.vbox.pack_end(entry)
        response = dialog.run()
        response_text = entry.
get_text()
        dialog.destroy()
        if response == gtk.RESPONSE_
OK:
            return response_text
        else:
            return None

The Python Book  93
Work with Python
17 
Running a function as a thread
The listener function above will be run 
as a thread. This is trivial to do. Enabling the 
daemon option on the thread means that it will 
die if the main thread unexpectedly ends.
    def listen(self):
# Start the listening thread
        self.listen_thread = 
threading.Thread(target=self.
listener)
# Stop the child thread from keeping 
the application open
        self.listen_thread.daemon = 
True
        self.listen_thread.start()
18 
Finishing the Networking class
Again, most of this code is similar to 
the code in the server‚Äôs Networking class. One 
19 
Starting the client
The main window is started by initialising 
an instance of the class. Notice that we don‚Äôt 
need to store anything that is returned. We then 
start the GTK thread by calling gtk.main().
if __name__ == "__main__":
# Create an instance of the main 
window and start the gtk main loop
    MainWindow()
    gtk.main()
21 
That‚Äôs it!
So, it‚Äôs not perfect and could be a little 
more robust in terms of error handling, but we 
have a working instant messenger server that 
can accept multiple clients and relay messages 
between them. More importantly, we have 
learned a bunch of new concepts and methods 
of working. 
20 
Trying it out
You‚Äôll want a few terminals: one to 
start the server, and some to run clients. Once 
you‚Äôve started the server, open an instance of 
the client and enter 127.0.0.1:port, where 
‚Äòport‚Äô is the port you decided to use. The server 
will print the port it‚Äôs listening on to make this 
easy. Then enter a username and click OK. Here 
is an example output from the server with two 
clients. You can use the client over a network 
by replacing 127.0.0.1 with the IP address of the 
server. You may have to let the port through your 
computer‚Äôs Ô¨Årewall if it‚Äôs not working.
[liam@liam-laptop Python]$ ./IM-
Server.py 
Listening on port 59091
Listening for more clients
Starting client thread for 
('127.0.0.1', 38726)
('127.0.0.1', 38726) sent: USERNAME 
client1
echoing: client1 has joined.
Listening for more clients
Starting client thread for 
('127.0.0.1', 38739)
('127.0.0.1', 38739) sent: USERNAME 
client2
echoing: client2 has joined.
Listening for more clients
('127.0.0.1', 38739) sent: client2 
says: Hi
echoing: client2 says: Hi
('127.0.0.1', 38726) sent: client1 
says: Hi
echoing: client1 says: Hi
('127.0.0.1', 38726) sent: QUIT
echoing: client1 has quit.
Ending client thread for 
('127.0.0.1', 38726)
^CTidying up
echoing: QUIT
Could not accept any more 
connections
('127.0.0.1', 38739) sent: 
echoing: client2 has quit.
Ending client thread for 
('127.0.0.1', 38739)
difference is that we want to add some things to 
the text view of our window. We do this by using 
the idle_add function of GObject. This allows 
us to call a function that will update the window 
running in the main thread when it is not busy. 
    def send(self, message):
# Send a message to the server
        print "Sending: {0}".
format(message)
        try:
            self.socket.
sendall(message)
        except socket.error:
            print "Unable to send 
message"
    def tidy_up(self):
# We'll be tidying up if either we are 
quitting or the server is quitting
        self.listening = False
        self.socket.close()
# We won't see this if it's us 
that's quitting as the window will 
be gone shortly
        gobject.idle_add(self.
window.add_text, "Server has 
quit.\n")
    def handle_msg(self, data):
        if data == "QUIT":
# Server is quitting
            self.tidy_up()
        elif data == "":
# Server has probably closed 
unexpectedly
            self.tidy_up()
        else:
# Tell the GTK thread to add some 
text when it's ready
            gobject.idle_add(self.
window.add_text, data)
16 
The client‚Äôs Networking class
Much of the client‚Äôs Networking class is 
similar to that of the server‚Äôs. One difference is 
that the class doesn‚Äôt inherit the Thread class ‚Äì 
we just start one of its functions as a thread. 
class Networking():
    def __init__(self, window, 
username, server, port):
# Set up the networking class
        self.window = window
        self.socket = socket.
socket(socket.AF_INET, socket.SOCK_
STREAM)
        self.socket.connect((server, 
port))
        self.listening = True
 # Tell the server that a new user 
has joined
        self.send("USERNAME {0}".
format(username))
    def listener(self):
# A function run as a thread that 
listens for new messages
        while self.listening:
            data = ""
            try:
                data = self.socket.
recv(1024)
            except socket.error:
                "Unable to recieve 
data"
            self.handle_msg(data)
# Don't need the while loop to be 
ridiculously fast
            time.sleep(0.1)

94  The Python Book
Work with Python
Python is a great programming language, but did you know that 
it is even capable of replacing your primary shell (command-line 
interface)? Here, we explain all‚Ä¶
We all use shell on a daily basis. For most 
of us, shell is the gateway into our Linux 
system. For years and even today, Bash has 
been the default shell for Linux. But it is getting a 
bit long in the tooth.
No need to be offended: we still believe Bash 
is the best shell out there when compared to 
some other UNIX shells such as Korn Shell 
(KSH), C Shell (CSH) or even TCSH.
This tutorial is not about Bash being 
incapable, but it is about how to breathe 
completely new life into the shell to do old 
things conveniently and new things which were 
previously not possible, even by a long shot.  So, 
without further delay, let‚Äôs jump in.
While the Python programming language 
may require you to write longer commands to 
accomplish a task (due to the way Python‚Äôs 
modules are organised), this is not something 
to be particularly concerned about. You can 
easily write aliases to the equivalent of the Bash 
command that you intend to replace. Most of 
the time there will be more than one way to do 
a thing, but you will need to decide which way 
works best for you.
Python provides support for executing 
system commands directly (via the os or 
subprocess module), but where possible we will 
focus on Python-native implementations, as 
this allows us to develop portable code.
Replace your shell 
with Python
You will require a version of Python installed on 
your system. The good news is you don‚Äôt have to 
do anything to get it installed. Most of the Linux 
distributions already ship with either Python 2.6 or 
Python 2.7 
Resources

The Python Book  95
Work with Python
 You can easily write aliases to the 
equivalent of the Bash command that 
you intend to replace 
 
SECTION 1: Completing basic shell 
tasks in Python
1. File management
The Python module shutil provides support for 
Ô¨Åle and directory operations. It provides support 
for Ô¨Åle attributes, directory copying, archiving 
etc. Let‚Äôs look at some of its important functions.
shutil module
copy (src,dst): Copy the src file to 
the destination directory. In this 
mode permissions bits are copied but 
metadata is not copied.
copy2 (src,dst): Same as copy() but 
also copies the metadata.
copytree(src, dst[, symlinks=False[, 
ignore=None]]): This is similar to ‚Äòcp 
-r‚Äô, it allows you to copy an entire 
directory. 
ignore_patterns (*patterns): ignore_
patterns is an interesting function 
that can be used as a callable for 
copytree(), it allows you to ignore 
files and directories specified by the 
glob-style patterns. 
rmtree(path[, ignore_errors[, 
onerror]]): rmtree() is used to delete 
an entire directory. 
move(src,dst): Similar to mv command it 
allows you to recessively move a file 
or directory to a new location.
Example:
>>>from shutil import copytree, ignore_
patterns
>>>copytree(source, destination, 
ignore=ignore_patterns(‚Äò*.pyc‚Äô, 
‚Äòtmp*‚Äô))
make_archive(base_name, format[, root_
dir[, base_dir[, verbose[, dry_run[, 
owner[, group[, logger]]]]]]] : Think 
of this as a replacement for tar, zip, 
bzip etc. make_archive() creates an 
archive file in the given format  
such as zip, bztar, tar , gztar. 
Archive support can be extended via 
Python modules. 
 
Example
>>> from shutil import make_archive
>>> import os
>>> archive_name = os.path.
expanduser(os.path.join(‚Äò~‚Äô, 
‚Äòludarchive‚Äô))
>>> root_dir = os.path.expanduser(os.
path.join(‚Äò~‚Äô, ‚Äò.ssh‚Äô))
>>> make_archive(archive_name, ‚Äògztar‚Äô, 
root_dir)
‚Äò/Users/kunal/ludarchive.tar.gz‚Äô
2. Interfacing operating system & 
subprocesses 
Python provides two modules to interface 
with the OS and to manage processes, called 
os and subprocess. These modules allow you 
to interact with the core operating system 
shell and let you work with the environment, 
processes, users and Ô¨Åle descriptors.
The subprocess module was introduced to 
support better management of subprocesses 
(part of which already exists in the os 
module) in Python and is aimed to replace 
os.system, os.spawn*, os.popen, popen2.* and 
commands.* modules.
os module
environ: 
environment 
represents 
the 
OS 
environment variables in a string object. 
example:
>>> import os
>>> os.environ
{‚ÄòVERSIONER_PYTHON_PREFER_32_BIT‚Äô: 
‚Äòno‚Äô, ‚ÄòLC_CTYPE‚Äô: ‚ÄòUTF-8‚Äô, ‚ÄòTERM_
PROGRAM_VERSION‚Äô: ‚Äò297‚Äô, ‚ÄòLOGNAME‚Äô: 
‚Äòkunaldeo‚Äô, ‚ÄòUSER‚Äô: ‚Äòkunaldeo‚Äô, ‚ÄòPATH‚Äô: 
‚Äò/System/Library/Frameworks/Python.
framework/Versions/2.7/bin:/Users/
kunaldeo/narwhal/bin:/opt/local/sbin:/
usr/local/bin:/usr/bin:/bin:/usr/sbin:/
sbin:/usr/local/bin:/usr/X11/bin:/opt/
local/bin:/Applications/MOTODEV_Studio_
For_Android_2.0.0_x86/android_sdk/
tools:/Applications/MOTODEV_Studio_For_
Android_2.0.0_x86/android_sdk/platform-
tools:/Volumes/CyanogenModWorkspace/
bin‚Äô, ‚ÄòHOME‚Äô: ‚Äò/Users/kunaldeo‚Äô, 
‚ÄòPS1‚Äô: ‚Äò\\[\\e[0;32m\\]\\u\\[\\e[m\\] 
\\[\\e[1;34m\\]\\w\\[\\e[m\\] \\
[\\e[1;32m\\]\\$\\[\\e[m\\] \\
[\\e[1;37m\\]‚Äô, ‚ÄòNARWHAL_ENGINE‚Äô: 
‚Äòjsc‚Äô, ‚ÄòDISPLAY‚Äô: ‚Äò/tmp/launch-s2LUfa/
org.x:0‚Äô, ‚ÄòTERM_PROGRAM‚Äô: ‚ÄòApple_
Terminal‚Äô, ‚ÄòTERM‚Äô: ‚Äòxterm-color‚Äô, 
‚ÄòApple_PubSub_Socket_Render‚Äô: ‚Äò/tmp/
launch-kDul5P/Render‚Äô, ‚ÄòVERSIONER_
PYTHON_VERSION‚Äô: ‚Äò2.7‚Äô, ‚ÄòSHLVL‚Äô: 
‚Äò1‚Äô, ‚ÄòSECURITYSESSIONID‚Äô: ‚Äò186a5‚Äô, 
‚ÄòANDROID_SDK‚Äô: ‚Äò/Applications/MOTODEV_
Studio_For_Android_2.0.0_x86/android_
sdk‚Äô,‚Äô_‚Äô: ‚Äò/System/Library/Frameworks/
Python.framework/Versions/2.7/bin/
python‚Äô, ‚ÄòTERM_SESSION_ID‚Äô: ‚ÄòACFE2492-
BB5C-418E-8D4F-84E9CF63B506‚Äô, ‚ÄòSSH_
AUTH_SOCK‚Äô: ‚Äò/tmp/launch-dj6Mk4/
Listeners‚Äô, ‚ÄòSHELL‚Äô: ‚Äò/bin/bash‚Äô, 
‚ÄòTMPDIR‚Äô: ‚Äò/var/folders/6s/pgknm8b118
737mb8psz8x4z80000gn/T/‚Äô, ‚ÄòLSCOLORS‚Äô: 
‚ÄòExFxCxDxBxegedabagacad‚Äô, ‚ÄòCLICOLOR‚Äô: 
‚Äò1‚Äô, ‚Äò__CF_USER_TEXT_ENCODING‚Äô: 
‚Äò0x1F5:0:0‚Äô, ‚ÄòPWD‚Äô: ‚Äò/Users/kunaldeo‚Äô, 
‚ÄòCOMMAND_MODE‚Äô: ‚Äòunix2003‚Äô}
You can also Ô¨Ånd out the value for an 
environment value:
>>> os.environ[‚ÄòHOME‚Äô]
‚Äò/Users/kunaldeo‚Äô
putenv(varname,value) : Adds or sets 
an environment variable with the given 
variable name and value.
getuid() : Return the current process‚Äôs 
user id.
getlogin() : Returns the username of 
currently logged in user
getpid(pid) : Returns the process group 
id of given pid. When used without 
any parameters it simply returns the 
current process id.
getcwd() : Return the path of the 
current working directory.
chdir(path) : Change the current 
working directory to the given path.

96  The Python Book
Work with Python
listdir(path) : Similar to ls, returns 
a list with the content of directories 
and file available on the given path.
Example:
>>> os.listdir(‚Äú/home/homer‚Äù)
[‚Äò.gnome2‚Äô, ‚Äò.pulse‚Äô, ‚Äò.gconf‚Äô, 
‚Äò.gconfd‚Äô, ‚Äò.beagle‚Äô, ‚Äò.gnome2_
private‚Äô, ‚Äò.gksu.lock‚Äô, ‚ÄòPublic‚Äô, 
‚Äò.ICEauthority‚Äô, ‚Äò.bash_history‚Äô, 
‚Äò.compiz‚Äô, ‚Äò.gvfs‚Äô, ‚Äò.update-
notifier‚Äô, ‚Äò.cache‚Äô, ‚ÄòDesktop‚Äô, 
‚ÄòVideos‚Äô, ‚Äò.profile‚Äô, ‚Äò.config‚Äô, 
‚Äò.esd_auth‚Äô, ‚Äò.viminfo‚Äô, ‚Äò.sudo_
as_admin_successful‚Äô, ‚Äòmbox‚Äô, 
‚Äò.xsession-errors‚Äô, ‚Äò.bashrc‚Äô, ‚ÄòMusic‚Äô, 
‚Äò.dbus‚Äô, ‚Äò.local‚Äô, ‚Äò.gstreamer-0.10‚Äô, 
‚ÄòDocuments‚Äô, ‚Äò.gtk-bookmarks‚Äô, 
‚ÄòDownloads‚Äô, ‚ÄòPictures‚Äô, ‚Äò.pulse-
cookie‚Äô, ‚Äò.nautilus‚Äô, ‚Äòexamples.
desktop‚Äô, ‚ÄòTemplates‚Äô, ‚Äò.bash_logout‚Äô]
mkdir(path[, mode]) : Creates a 
directory with the given path with the 
numeric code mode. The default mode is 
0777.
makedirs(path[, mode]) : Creates given 
path (inclusive of all its directories) 
recursively. The default mode is 0777. 
:
Example:
>>> import os
>>> path = ‚Äú/home/kunal/greatdir‚Äù
>>> os.makedirs( path, 0755 );
rename (old,new) : The file or 
directory ‚Äúold‚Äù is renamed to ‚Äúnew‚Äù 
If ‚Äúnew‚Äù is a directory, an error 
will be raised. On Unix and Linux, if 
‚Äúnew‚Äù exists and is a file, it will 
be replaced silently if the user has 
permission to do so.
renames (old,new) : Similar to rename 
but also creates any directories 
recessively if necessary.
rmdir(path) : Remove directory from the 
path mentioned. If the path already 
has files you will need to use shutil.
rmdtree() 
subprocess:
call(*popenargs, **kwargs) : Runs the 
command with arguments. On process 
completion it returns the returncode 
attribute.
Example:
>>> import subprocess
>>> print subprocess.call([‚Äúls‚Äù,‚Äù-l‚Äù])
total 3684688
drwx------+   5 kunaldeo  staff         
170 Aug 19 01:37 Desktop
drwx------+  10 kunaldeo  staff         
340 Jul 26 08:30 Documents
drwx------+  50 kunaldeo  staff        
1700 Aug 19 12:50 Downloads
drwx------@ 127 kunaldeo  staff        
4318 Aug 19 01:43 Dropbox
drwx------@  42 kunaldeo  staff        
1428 Aug 12 15:17 Library
drwx------@   3 kunaldeo  staff         
102 Jul  3 23:23 Movies
drwx------+   4 kunaldeo  staff         
136 Jul  6 08:32 Music
drwx------+   5 kunaldeo  staff         
170 Aug 12 11:26 Pictures
drwxr-xr-x+   5 kunaldeo  staff         
170 Jul  3 23:23 Public
-rwxr-xr-x    1 kunaldeo  staff  
1886555648 Aug 16 21:02 androidsdk.tar
drwxr-xr-x    5 kunaldeo  staff         
170 Aug 16 21:05 sdk
drwxr-xr-x   19 kunaldeo  staff         
646 Aug 19 01:47 src
-rw-r--r--    1 root      staff         
367 Aug 16 20:36 umbrella0.log
STD_INPUT_HANDLE: 
The 
standard 
input 
device. Initially, this is the console input buffer.
STD_OUTPUT_HANDLE: The standard output 
device. Initially, this is the active console  
screen buffer.
STD_ERROR_HANDLE: The standard error 
device. Initially, this is the active console  
screen buffer.
SECTION 2: IPython: a ready-made 
Python system shell replacement
In section 1 we have introduced you to the 
Python modules which allow you to do system 
shell-related tasks very easily using vanilla 
Python. Using the same features, you can build 
a fully featured shell and remove a lot of Python 
boilerplate code along the way. However, if 
you are kind of person who wants everything 
ready-made, you are in luck. IPython provides a 
powerful and interactive Python shell which you 
can use as your primary shell. IPython supports 
Python 2.6 to 2.7 and 3.1 to 3.2 . It supports  
two type of Python shells: Terminal based and  
Qt based. 
Just to reiterate, IPython is purely implemented 
in Python and provides a 100% Python-
compliant shell interface, so everything you 
have learnt in section 1 can be run inside 
IPython without any problems.
IPython is already available in most Linux 
distributions. Search your distro‚Äôs repositories to 
look for it. In case you are not able to Ô¨Ånd it, you 
can also install it using easy_install or PyPI.
IPython provides a lot of interesting features 
which makes it a great shell replacement‚Ä¶
Tab completion: Tab completion provides an 
excellent way to explore any Python object that 
you are working with. It also helps you to avoid 
making typos. 
Example :
In [3]: import o  {hit tab}
objc        opcode      operator    
optparse    os          os2emxpath  
In [3]: import os
In [4]: os.p   {hit tab}
os.pardir          os.pathconf_names  
os.popen           os.popen4          
os.path            os.pathsep         
os.popen2          os.putenv          
os.pathconf        os.pipe            
os.popen3          
Built In Object Explorer: You can add 
‚Äò?‚Äô after any Python object to view 
its details such as Type, Base Class, 
String Form, Namespace, File and 
Docstring. 
Example:
In [28]: os.path?
Type:       module
Base Class: <type ‚Äòmodule‚Äô>
String Form:<module ‚Äòposixpath‚Äô from 
‚Äò/System/Library/Frameworks/Python.
framework/Versions/2.7/lib/python2.7/
posixpath.pyc‚Äô>
Namespace:  Interactive
File:       /System/Library/Frameworks/

The Python Book  97
Work with Python
As you can see, it‚Äôs easy to tailor Python 
for all your shell environment needs. 
Python modules like os, subprocess 
and 
shutil 
are 
available 
at 
your 
disposal to do just about everything 
you need using Python. IPython turns 
this whole experience into an even 
more complete package. You get to do 
everything a standard Python shell 
does and with much more convenient 
features. IPython‚Äôs magic functions 
really do provide a magical Python shell 
experience. So next time you open a 
Bash session, think again: why settle for 
gold when platinum is a step away?
 IPython also comes with its own  
Qt-based console 
 
Python.framework/Versions/2.7/lib/
python2.7/posixpath.py
Docstring:
Common operations on POSIX pathnames.
Instead of importing this module directly, import 
os and refer to this module as os.path.  The  
‚Äòos.path‚Äô name is an alias for this module on 
POSIX systems; on other systems (eg Mac, 
Windows), os.path provides the same operations 
in a manner speciÔ¨Åc to that platform, and is an 
alias to another module (eg macpath, ntpath).
Some of this can actually be useful on non-
POSIX systems too, eg for manipulation of the 
pathname component of URLs.
You can also use double question marks (??) to 
view the source code for the relevant object.
Magic functions: IPython comes with a set of 
predeÔ¨Åned ‚Äòmagic functions‚Äô that you can call 
with a command-line-style syntax. IPython 
‚Äòmagic‚Äô commands are conventionally prefaced 
by %, but if the Ô¨Çag %automagic is set to on, 
then you can call magic commands without the 
preceding %.
To view a list of available magic functions, 
you can use ‚Äòmagic function %lsmagic‚Äô. Magic 
functions include functions that work with code 
such as %run, %edit, %macro, %recall etc; 
functions that affect shell such as %colors, 
%xmode, %autoindent etc; and other functions 
such as %reset, %timeit, %paste etc. Most of 
the cool features of  IPython are powered using 
magic functions.
Example:
In [45]: %lsmagic
Available magic functions:
%alias  %autocall  %autoindent  
%automagic  %bookmark  %cd  %colors  
%cpaste  %debug  %dhist  %dirs  
%doctest_mode  %ed  %edit  %env  %gui  
%hist  %history  %install_default_
config  %install_profiles  %load_ext  
%loadpy  %logoff  %logon  %logstart  
%logstate  %logstop  %lsmagic  %macro  
%magic  %page  %paste  %pastebin  %pdb  
%pdef  %pdoc  %pfile  %pinfo  %pinfo2  
%popd  %pprint  %precision  %profile  
%prun  %psearch  %psource  %pushd  %pwd  
%pycat  %pylab  %quickref  %recall  
%rehashx  %reload_ext  %rep  %rerun  
%reset  %reset_selective  %run  %save  
%sc  %sx  %tb  %time  %timeit  %unalias  
%unload_ext  %who  %who_ls  %whos  
%xdel  %xmode
Automagic is OFF, % prefix IS needed 
for magic functions
To view help on any Magic Function, call 
‚Äò%somemagic?‚Äô to read its docstring.
Python script execution and  runtime code 
editing: You can use %run to run any Python 
script. You can also control-run the Python 
script with pdb debugger using -d, or pdn 
proÔ¨Åler using -p. You can also edit a Python 
script using the %edit command. %edit will 
open the given Python script in the editor 
deÔ¨Åned by the $EDITOR environment variable.
Shell command support: If you are in the mood 
to just run a shell command, you can do it very 
easily by preÔ¨Åxing the command with ! .
Example :
In [5]: !ps
  PID TTY           TIME CMD
 4508 ttys000    0:00.07 -bash
84275 ttys001    0:00.03 -bash
17958 ttys002    0:00.18 -bash
In [8]: !clang prog.c -o prog
prog.c:2:1: warning: type specifier 
missing, defaults to ‚Äòint‚Äô [-Wimplicit-
int]
main()
^~~~
1 warning generated.
Qt console : IPython also comes with its own 
Qt-based console. This provides a number of 
features that are only available in a GUI, such 
as inline Ô¨Ågures, multiline editing with syntax 
highlighting, and graphical calltips .
You can start the Qt console with:
$ ipython qtconsole
If you get errors related to missing modules, 
make sure that you have installed the dependent 
packages, such as PyQt, pygments, pyexpect 
and ZeroMQ.
 Q IPython Qt console with GUI capabilities

98  The Python Book
Work with Python
Learn how Python can help in system administration as it dares to 
replace the usual shell scripting‚Ä¶
Python for system 
administrators
Parsing conÔ¨Åguration Ô¨Åles
ConÔ¨Åguration Ô¨Åles provide a way for applications 
to store various settings. In order to write a 
script that allows you to modify settings of a 
particular application, you should be able to 
parse the conÔ¨Åguration Ô¨Åle of the application. 
In this section we learn how to parse INI-style 
conÔ¨Åguration Ô¨Åles. Although old, the INI Ô¨Åle 
format is very popular with much modern open 
source software, such as PHP and MySQL. 
Excerpt for php.ini conÔ¨Åguration Ô¨Åle:
[PHP]
engine = On
zend.ze1_compatibility_mode = Off
short_open_tag = On
asp_tags = Off
precision    =  14
y2k_compliance = On
output_buffering = 4096
;output_handler =
zlib.output_compression = Off
[MySQL]
; Allow or prevent persistent links.
mysql.allow_persistent = On
mysql.max_persistent = 20
mysql.max_links = -1
mysql.default_port = 3306
mysql.default_socket =
mysql.default_host = localhost
mysql.connect_timeout = 60
mysql.trace_mode = Off
Python provides a built-in module called 
ConÔ¨ÅgParser (known as conÔ¨Ågparser in Python 
3.0). You can use this module to parse and create 
conÔ¨Åguration Ô¨Åles.
@code: writeconÔ¨Åg.py
@description: The following demonstrates 
adding MySQL section to the php.ini Ô¨Åle. 
@warning: Do not use this script with the 
actual php.ini Ô¨Åle, as it‚Äôs not designed to 
handle all aspects of a complete php.ini Ô¨Åle.
import ConfigParser
config = ConfigParser.
RawConfigParser()
config.add_section(‚ÄòMySQL‚Äô)
config.set(‚ÄòMySQL‚Äô,‚Äômysql.trace_
mode‚Äô,‚ÄôOff‚Äô)
config.set(‚ÄòMySQL‚Äô,‚Äômysql.connect_
timeout‚Äô,‚Äô60‚Äô)
config.set(‚ÄòMySQL‚Äô,‚Äômysql.default_
host‚Äô,‚Äôlocalhost‚Äô)
config.set(‚ÄòMySQL‚Äô,‚Äômysql.default_
port‚Äô,‚Äô3306‚Äô)
config.set(‚ÄòMySQL‚Äô,‚Äômysql.allow_
persistent‚Äô, ‚ÄòOn‚Äô )
config.set(‚ÄòMySQL‚Äô,‚Äômysql.max_
persistent‚Äô,‚Äô20‚Äô)
with open(‚Äòphp.ini‚Äô, ‚Äòap‚Äô) as 
configfile:
    config.write(configfile)
Output:php.ini
[MySQL]
mysql.max_persistent = 20
mysql.allow_persistent = On
mysql.default_port = 3306
mysql.default_host = localhost
mysql.trace_mode = Off
mysql.connect_timeout = 60
@code: parseconÔ¨Åg.py
@description: Parsing and updating the conÔ¨Åg 
Ô¨Åle
import ConfigParser
config = ConfigParser.ConfigParser()
config.read(‚Äòphp.ini‚Äô)
# Print config values
print config.get(‚ÄòMySQL‚Äô,‚Äômysql.
System administration is an important part of 
our computing environment. It does not matter 
whether you are managing systems at your work 
our home. Linux, being a UNIX-based operating 
system, already has everything a system 
administrator needs, such as the world-class 
shells (not just one but many, including Bash, csh, 
zsh etc), handy tools, and many other features 
which make the Linux system an administrator‚Äôs 
dream. So why do we need Python when Linux 
already has everything built-in?  Being a dynamic 
scripting language, Python is very easy to read 
and learn. That‚Äôs just not us saying that, but 
many Linux distributions actually use Python 
in core administrative parts. For example, Red 
Hat (and Fedora) system setup tool Anaconda 
is written in Python (read this line again, got the 
snake connection?). Also, tools like GNU Mailman, 
CompizConÔ¨Åg Settings Manager (CCSM) and 
hundreds of tiny GUI and non-GUI conÔ¨Åguration 
tools are written using Python. Python does not 
limit you on the choice of user interface to follow 
‚Äì you can build command-line, GUI and web apps 
using Python. This way, it has got covered almost 
all the possible interfaces.
Here we will look into executing sysadmin-
related tasks using Python.
Python-devel Python development 
libraries, required for compiling 
third-party Python module
setuptools setuptools allows you to 
download, build, install, upgrade, 
and uninstall Python packages 
with ease
Resources
Note
This is written for the Python 2.X series, 
as it is still the most popular and default 
Python 
distribution 
across 
all 
the 
platforms (including all Linux distros, 
BSDs and Mac OS X).

The Python Book  99
Work with Python
default_host‚Äô)
print config.get(‚ÄòMySQL‚Äô,‚Äômysql.
default_port‚Äô)
config.remove_option(‚ÄòMySQL‚Äô,‚Äômysql.
trace_mode‚Äô)
with open(‚Äòphp.ini‚Äô, ‚Äòwb‚Äô) as 
configfile:
    config.write(configfile)
Parsing JSON data 
JSON (also known as JavaScript Object 
Notation) is a lightweight modern data-
interchange format. JSON is an open standard 
under ECMA-262. It is a text format and is 
completely 
language-independent. 
JSON 
is also used as the conÔ¨Åguration Ô¨Åle format 
for modern applications such as Mozilla 
Firefox and Google Chrome. JSON is also 
very popular with modern web services such 
as Facebook, Twitter, Amazon EC2 etc. In 
this section we will use the Python module 
‚Äòsimplejson‚Äô to access Yahoo Search (using 
the Yahoo Web Services API), which outputs  
JSON data.
To use this section, you should have the 
following:
1. Python module: simplejson.
Note: You can install Python modules using the 
command ‚Äòeasy_install <module name>‚Äô. This 
command assumes that you have a working 
internet connection.
2. Yahoo App ID: The Yahoo App ID can be 
created 
from 
https://developer.apps.yahoo.
com/dashboard/createKey.html. 
The 
Yahoo 
App ID will be generated on the next page. See 
the screenshot below for details.
QGenerating the Yahoo App ID
simplejson is very easy to use. In the following 
example we will use the capability of mapping 
JSON data structures directly to Python data 
types. This gives us direct access to the JSON 
data without developing any XML parsing code. 
JSON PYTHON DATA MAPPING
JSON
Python
object
dict
array
list
string
unicode
number (int)
int, long
number (real)
Ô¨Çoat
TRUE
TRUE
FALSE
FALSE
null
None
For this section we will use the simplejson.
load function, which allows us to deserialise a 
JSON object into a Python object. 
@code: LUDSearch.py
import simplejson, urllib
APP_ID = ‚Äòxxxxxxxx‚Äô # Change this to 
your APP ID
SEARCH_BASE = ‚Äòhttp://search.
yahooapis.com/WebSearchService/V1/
webSearch‚Äô
class YahooSearchError(Exception):
    pass
def search(query, results=20, 
start=1, **kwargs):
    kwargs.update({
        ‚Äòappid‚Äô: APP_ID,
        ‚Äòquery‚Äô: query,
        ‚Äòresults‚Äô: results,
        ‚Äòstart‚Äô: start,
        ‚Äòoutput‚Äô: ‚Äòjson‚Äô
    })
    url = SEARCH_BASE + ‚Äò?‚Äô + 
urllib.urlencode(kwargs)
    result = simplejson.load(urllib.
urlopen(url))
    if ‚ÄòError‚Äô in result:
        # An error occurred; raise 
an exception
        raise YahooSearchError, 
result[‚ÄòError‚Äô]
    return result[‚ÄòResultSet‚Äô]
Let‚Äôs use the above code from the Python shell 
to see how it works. Change to the directory 
where you have saved the LUDYSearch.py and 
open a Python shell.
@code: Python Shell Output. Lines starting 
with ‚Äò>>>‚Äô indicate input
>>> execfile(‚ÄúLUDYSearch.py‚Äù)
>>> results = search(‚ÄòLinux User and 
Developer‚Äô)
>>> results[‚ÄòtotalResultsAvailable‚Äô]
123000000
>>> results[‚ÄòtotalResultsReturned‚Äô]
20
>>> items = results[‚ÄòResult‚Äô]
>>> for Result in items:
...     print 
Result[‚ÄòTitle‚Äô],Result[‚ÄòUrl‚Äô]
... 
Linux User http://www.linuxuser.
co.uk/
Linux User and Developer - 
Wikipedia, the free encyclopedia 
http://en.wikipedia.org/wiki/Linux_
User_and_Developer
Linux User &amp;amp; Developer | 
Linux User http://www.linuxuser.
co.uk/tag/linux-user-developer/
Gathering system 
information
One of the important jobs of a system 
administrator is gathering system information. 
In this section we will use the SIGAR (System 
Information Gatherer And Reporter) API to 
demonstrate how we can gather system 
information using Python. SIGAR is a very 
complete API and it can provide lot of 
information, including the following:
1. System memory, swap, CPU, load average, 
uptime, logins.
2. Per-process memory, CPU, credential info, 
state, arguments, environment, open Ô¨Åles.
3. File system detection and metrics.
4. Network interface detection, conÔ¨Åguration 
info and metrics.
5. TCP and UDP connection tables.
6. Network route table.
Installing SIGAR
The Ô¨Årst step is to build and install SIGAR. SIGAR 
is hosted at GitHub, so make sure that you have 
Git installed in your system. Then perform 
the following steps to install SIGAR and its  
Python bindings:
$ git clone git://github.com/
hyperic/sigar.git sigar.git
$ cd sigar.git/bindings/python
$ sudo python setup.py install
 Python doesn‚Äôt 
limit your choice 
of interface 
 

100  The Python Book
Work with Python
At the end you should see a output similar to 
the following :
Writing /usr/local/lib/python2.6/
dist-packages/pysigar-0.1.egg-info
SIGAR is a very easy-to-use library and can be 
used to get information on almost every aspect of 
a system. The next example shows you how.
The following code shows the memory and the 
Ô¨Åle system information
@code: PySysInfo.py
import os
import sigar
sg = sigar.open()
mem = sg.mem()
swap = sg.swap()
fslist = sg.file_system_list()
print ‚Äú==========Memory 
Information==============‚Äù
print ‚Äú\tTotal\tUsed\tFree‚Äù
print ‚ÄúMem:\t‚Äù,\
    (mem.total() / 1024), \
    (mem.used() / 1024), \
    (mem.free() / 1024)
print ‚ÄúSwap:\t‚Äù, \
    (swap.total() / 1024), \
    (swap.used() / 1024), \
    (swap.free() / 1024)
print ‚ÄúRAM:\t‚Äù, mem.ram(), ‚ÄúMB‚Äù
print ‚Äú==========File System 
Information===============‚Äù
def format_size(size):
    return sigar.format_size(size * 
1024)
print ‚ÄòFilesystem\tSize\tUsed\
tAvail\tUse%\tMounted on\tType\n‚Äô
for fs in fslist:
    dir_name = fs.dir_name()
    usage = sg.file_system_
usage(dir_name)
    total = usage.total()
    used = total - usage.free()
    avail = usage.avail()
    pct = usage.use_percent() * 100
    if pct == 0.0:
        pct = ‚Äò-‚Äô
    print fs.dev_name(), format_
size(total), format_size(used), 
format_size(avail),\
        pct, dir_name, fs.sys_type_
name(), ‚Äò/‚Äô, fs.type_name()
@Output
==========Memory 
Information==============
 
Total 
Used 
Free
Mem: 
8388608 6061884 2326724
Swap: 
131072 16048 115024
RAM: 
8192 MB
==========File System 
Information===============
Filesystem 
Size 
Used 
Avail 
Use% 
Mounted on 
Type
/dev/disk0s2 300G 175G 124G 59.0 / hfs 
/ local
devfs 191K 191K   0  - /dev devfs / 
none
Accessing Secure Shell 
(SSH) services 
SSH (Secure Shell) is a modern replacement for an 
old remote shell system called Telnet. It allows data 
to be exchanged using a secure channel between 
two networked devices. System administrators 
frequently use SSH to administrate networked 
systems. In addition to providing remote shell, SSH 
is also used for secure Ô¨Åle transfer (using SSH File 
Transfer Protocol, or SFTP) and remote X server 
forwarding (allows you to use SSH clients as X 
server). In this section we will learn how to use the 
SSH protocol from Python using a Python module 
called paramiko, which implements the SSH2 
protocol for Python. 
paramiko can be installed using the following 
steps:
$ git clone https://github.com/robey/
paramiko.git
$ cd paramiko
$ sudo python setup.py install
To 
the 
core 
of 
paramiko 
is 
the 
SSHClient 
class. 
This 
class 
wraps  L{Transport}, L{Channel}, and L{SFTPClient} 
to handle most of the aspects of SSH. You can use 
SSHClient as:
 client = SSHClient()
 client.load_system_host_keys()
 client.connect(‚Äòsome.host.com‚Äô)
 stdin, stdout, stderr = client.exec_
command(‚Äòdir‚Äô)
The following example demonstrates a full SSH 
client written using the paramiko module.
@code: PySSHClient.py
import base64, getpass, os, socket, sys, 
socket, traceback
import paramiko
import interactive
# setup logging
paramiko.util.log_to_file(‚Äòdemo_simple.
log‚Äô)
# get hostname
username = ‚Äò‚Äô
if len(sys.argv) > 1:
    hostname = sys.argv[1]
    if hostname.find(‚Äò@‚Äô) >= 0:
        username, hostname = hostname.
Note
If you are confused with the tab spacing of 
the code, look for the code files on FileSilo.
split(‚Äò@‚Äô)
else:
    hostname = raw_input(‚ÄòHostname: ‚Äò)
if len(hostname) == 0:
    print ‚Äò*** Hostname required.‚Äô
    sys.exit(1)
port = 22
if hostname.find(‚Äò:‚Äô) >= 0:
    hostname, portstr = hostname.
split(‚Äò:‚Äô)
    port = int(portstr)
# get username
if username == ‚Äò‚Äô:
    default_username = getpass.
getuser()
    username = raw_input(‚ÄòUsername 
[%s]: ‚Äò % default_username)
    if len(username) == 0:
        username = default_username
password = getpass.getpass(‚ÄòPassword 
for %s@%s: ‚Äò % (username, hostname))
# now, connect and use paramiko 
Client to negotiate SSH2 across the 
connection
try:
    client = paramiko.SSHClient()
    client.load_system_host_keys()
    client.set_missing_host_key_
policy(paramiko.WarningPolicy)
    print ‚Äò*** Connecting...‚Äô
    client.connect(hostname, port, 
username, password)
    chan = client.invoke_shell()
    print repr(client.get_transport())
    print ‚Äò*** SSH Server Connected! 
***‚Äô
    print
    interactive.interactive_
shell(chan)
    chan.close()
    client.close()
except Exception, e:
    print ‚Äò*** Caught exception: %s: 
%s‚Äô % (e.__class__, e)
    traceback.print_exc()
    try:
        client.close()
    except:
        pass
    sys.exit(1)
To run this code you will also need a custom 
Python class interactive.py which implements 

The Python Book  101
Work with Python
Administrators are comfortable with running raw 
scripts by hand, but end-users are not. So if you 
are writing a script that is supposed to be used by 
common users, it is a good idea to create a user-
friendly interface on top of the script. This way 
end-users can run the scripts just like any other 
application. To demonstrate this, we will create 
a simple GRUB conÔ¨Åguration tool which allows 
users to select default boot entry and the timeout. 
We will be creating a TUI (text user interface) 
application and will use the Python module 
‚Äòsnack‚Äô to facilitate this (not to be confused with 
the Python audio library, tksnack).
This app consists of two Ô¨Åles‚Ä¶
grub.py: GRUB ConÔ¨Åg File (grub.conf) Parser 
(available on FileSilo). It implements two main 
functions, readBootDB() and writeBootFile(), 
which are responsible for reading and writing the 
GRUB conÔ¨Åguration Ô¨Åle.
grub_tui.py: Text user interface Ô¨Åle for 
manipulating the GRUB conÔ¨Åguration Ô¨Åle using 
the functions available in grub.py.
@code:grub_tui.py
import sys
from snack import *
from grub import (readBootDB, 
writeBootFile)
def main(entry_
value=‚Äô1‚Äô,kernels=[]):
    try:
        (default_value, entry_
value, kernels)=readBootDB()
    except:
        print >> sys.stderr, 
(‚ÄúError reading /boot/grub/grub.
conf.‚Äù)
 
sys.exit(10)
    screen=SnackScreen()
    while True:
        g=GridForm(screen, (‚ÄúBoot 
configuration‚Äù),1,5)
        if len(kernels)>0 :
            
li=Listbox(height=len(kernels), 
width=20, returnExit=1)
            for i, x in 
enumerate(kernels):
                li.append(x,i)
            g.add(li, 0, 0)
            
li.setCurrent(default_value)
        bb = ButtonBar(screen, 
Writing a user interface using Python
Learn how to create a user-friendly interface using Python
(((‚ÄúOk‚Äù), ‚Äúok‚Äù), ((‚ÄúCancel‚Äù), 
‚Äúcancel‚Äù)))
        e=Entry(3, str(entry_
value))
        l=Label((‚ÄúTimeout (in 
seconds):‚Äù))
        gg=Grid(2,1)
        gg.setField(l,0,0)
        gg.setField(e,1,0)
        g.add(Label(‚Äò‚Äô),0,1)
        g.add(gg,0,2)
        g.add(Label(‚Äò‚Äô),0,3)
        g.add(bb,0,4,growx=1)
        result = g.runOnce()
        if 
bb.buttonPressed(result) == 
‚Äòcancel‚Äô:
            screen.finish()
            sys.exit(0)
        else:
            entry_value = 
e.value()
            try :
                c = int(entry_
value)
                break
            except ValueError:
                continue
    writeBootFile(c, 
li.current())
    screen.finish()
if __name__== ‚Äò__main__‚Äô:
    main()
Start the tool using the sudo 
command (as it reads the grub.
conf file)
$ sudo grub_tui.py
the interactive shell for the SSH session. Look 
for this Ô¨Åle on FileSilo and copy it into the same 
folder where you have created PySSHClient.py .
@code_Output
kunal@ubuntu-vm-kdeo:~/src/paramiko/
demos$ python demo_simple.py 
Hostname: 192.168.1.2
Username [kunal]: luduser
Password for luduser@192.168.1.2: 
*** Connecting...
<paramiko.Transport at 0xb76201acL 
(cipher aes128-ctr, 128 bits) 
(active; 1 open channel(s))>
*** SSH Server Connected! ***
Last login: Thu Jan 13 02:01:06 2011 
from 192.168.1.9
[~ $:]
If the host key for the SSH server is not added 
to your $HOME/.ssh/known_hosts Ô¨Åle, the 
client will throw the following error:
*** Caught exception: <type 
‚Äòexceptions.TypeError‚Äô>: unbound 
method missing_host_key() must be 
called with WarningPolicy instance 
as first argument (got SSHClient 
instance instead)
This means that the client cannot verify the 
authenticity of the server you are connected 
to. To add the host key to known_hosts, you 
can use the ssh command. It is important 
to remember that this is not the ideal way to 
add the host key; instead you should use ssh-
keygen. But for simplicity‚Äôs sake we are using 
the ssh client.
kunal@ubuntu-vm-kdeo:~/.ssh$ ssh 
luduser@192.168.1.2
The authenticity of host 
‚Äò192.168.1.2 (192.168.1.2)‚Äô can‚Äôt be 
established.
RSA key fingerprint is be:01:76:6a:b
9:bb:69:64:e3:dc:37:00:a4:36:33:d1.
Are you sure you want to continue 
connecting (yes/no)? yes
Warning: Permanently added 
‚Äò192.168.1.2‚Äô (RSA) to the list of 
known hosts.
So now you‚Äôve seen how easy it can be to 
carry out the complex sysadmin tasks using 
Python‚Äôs versatile language. 
As is the case with all Python coding, the 
code that is presented here can fairly easily 
be adopted into your GUI application (using 
software such as PyGTK or PyQt) or a web 
application (using a framework such as Django 
or Grok). 

102  The Python Book
Work with Python
Use the Beautiful Soup Python library to parse Wikipedia‚Äôs 
HTML and store it for ofÔ¨Çine reading
Scrape Wikipedia with 
Beautiful Soup
In this tutorial we‚Äôll use the popular Python 
library Beautiful Soup to scrape Wikipedia for 
links to articles and then save those pages for 
ofÔ¨Çine reading. This is ideal for when travelling 
or in a location with a poor internet connection.
The plan is simple: using Beautiful Soup 
with the HTML5Lib Parser, we‚Äôre going to load 
a Wikipedia page, remove all of the GUI and 
unrelated content, search the content for links 
to other Wikipedia articles and then, after a tiny 
bit of modiÔ¨Åcation, write them to a Ô¨Åle.
Even though it‚Äôs now the de facto knowledge 
base of the world, Wikipedia isn‚Äôt great when it 
comes to DOM consistency ‚Äì that is, IDs and 
classes are sometimes quite loose in their 
usage. Because of this, we will also cover how 
to handle all of the excess bits and bobs of the 
Wikipedia GUI that we don‚Äôt need, as well as the 
various erroneous links that won‚Äôt be of much 
use to us. You can Ô¨Ånd the CSS stylings sheet 
and a Python script pertaining to this tutorial at 
http://bit.ly/19MibBv.
Resources
Beautiful Soup:  
www.crummy.com/software/BeautifulSoup/
HTML5Lib: 
https://github.com/html5lib/html5lib-python
Python 2.6+ & WikiParser.zip
Six: https://pypi.python.org/pypi/six/ 
1 Import libraries
These are the libraries we are 
going to be using for this program
import os, sys, urllib2, argparse, datetime, atexit
from bs4 import BeautifulSoup
addresses = []
deepestAddresses = []
maxLevel = 1
storeFolder = "Wikistore " + str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M"))
undesirables = [ {"element" : "table", "attr" : {'class' : 'infobox'} }, {"element" : "table", "attr" : {'class' 
: 'vertical-navbox'}}, {"element" : "span", "attr" : {'class' : 'mw-editsection'}}, {"element" : "div", "attr" : 
{'class' : 'thumb'}}, {"element" : "sup", "attr" : {'class' : 'reference'}}, {"element" : "div", "attr" : {'class' 
: 'reflist'}}, {"element" : "table", "attr" : {'class' : 'nowraplinks'}}, {"element" : "table", "attr" : {'class' 
: 'ambox-Refimprove'}}, {"element" : "img", "attr" : None}, {"element" : "script", "attr" : None}, {"element" : 
"table", "attr" : {'class' : 'mbox-small'}} , {"element" : "span", "attr" : {"id" : "coordinates"}}, {"element" : 
"table", "attr" : {"class" : "ambox-Orphan"}}, {"element" : "div", "attr" : {"class" : "mainarticle"}}, {"element" 
: None, "attr" : {"id" : "References"}} ]
def init():
 
parser = argparse.ArgumentParser(description='Handle the starting page and number of levels we\'re going to 
scrape')
 
parser.add_argument('-URL', dest='link', action='store', help='The Wikipedia page from which we will start 
scraping')
 
parser.add_argument('-levels', dest="levels", action='store', help='How many levels deep should the scraping 
go')
 
args = parser.parse_args()
 
if(args.levels != None):
 
 
global maxLevel8
 
 
maxLevel = int(args.levels)
 
if(args.link == None):
 
 
print("You need to pass a link with the -URL flag")
 
 
sys.exit(0)
 
else:
 
 
if not os.path.exists(storeFolder):
 
 
 
os.makedirs(storeFolder)
 
 
grabPage(args.link, 0, args.link.split("/wiki/")[1].strip().replace("_", " "))
 
atexit.register(cleanUp)
def isValidLink(link):
 
3 Initialisation
This is the initialising function 
that we will use to handle the 
input from the user
01
02
03
2 Set up variables
These are some variables 
we‚Äôll use to keep track of the 
script‚Äôs progress
Full code listing

The Python Book  103
Work with Python
 
if "/wiki/" in link and ":" not in link and "http://" 
not in link and "wikibooks" not in link and "#" not in link 
and "wikiquote" not in link and "wiktionary" not in link 
and "wikiversity" not in link and "wikivoyage" not in link 
and "wikisource" not in link and "wikinews" not in link and 
"wikiversity" not in link and "wikidata" not in link:
 
 
return True
 
else:
 
 
return False
def grabPage(URL, level, name):
 
opener = urllib2.build_opener()
 
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
 
req = opener.open(URL)
 
page = req.read()
 
req.close()
 
soup = BeautifulSoup(page, "html5lib", from_encoding="UTF-8")
 
content = soup.find(id="mw-content-text")
 
if hasattr(content, 'find_all'):
 
 
global undesirables
 
 
for notWanted in undesirables:
 
 
 
removal = content.find_
all(notWanted['element'], notWanted['attr'])
 
 
 
if len(removal) > 0:
 
 
 
 
for el in removal:
 
 
 
 
 
el.extract()
 
 
also = content.find(id="See_also")
 
 
 
 
if(also != None):
 
 
 
also.extract()
 
 
 
tail = also.find_all_next()
 
 
 
if(len(tail) > 0):
 
 
 
 
for element in tail:
 
 
 
 
 
element.extract()
 
 
for link in content.find_all('a'):
 
 
 
 
 
 
href = link["href"]
 
 
 
if isValidLink(href):
 
 
 
 
if level < maxLevel:
 
 
 
 
 
stored = False;
 
 
 
 
 
for addr in 
addresses:
 
 
 
 
 
 
if addr 
== link.get("href"):
 
 
 
 
 
 
 
stored = True
 
 
 
 
 
if(stored == False):
 
 
 
 
 
 
title = 
link.get('href').replace("/wiki/", "")
 
 
 
 
 
 
addresses.append(str(title + ".html"))
 
 
 
 
 
 
grabPage("http://en.wikipedia.org" + link.get('href'), level + 1, 
title)
 
 
 
 
 
print title
 
 
 
link["href"] = link["href"].replace("/
wiki/", "") + ".html"
 
 
 
 
fileName = str(name)
 
 
if level == maxLevel:
 
 
 
deepestAddresses.append(fileName.
replace('/', '_') + ".html")
 
 
doctype = "<!DOCTYPE html>"
 
 
head = "<head><meta charset=\"UTF-8\" /><title>" + 
fileName + "</title></head>"
 
 
f = open(storeFolder + "/" + fileName.replace('/', 
'_') + ".html", 'w')
 
 
f.write(doctype + "<html lang=\"en\">" + head + 
"<body><h1>" + fileName + "</h1>" + str(content) + "</body></
html>")
 
 
f.close()
def cleanUp():
 
print("\nRemoving links to pages that have not been 
saved\n")
 
for deepPage in deepestAddresses:
 
 
rF = open(storeFolder + "/" + deepPage, 'r')
 
 
deepSoup = BeautifulSoup(rF.read(),  "html5lib", 
from_encoding="UTF-8")
 
 
for deepLinks in deepSoup.find_all('a'):
 
 
 
link = deepLinks.get("href")
 
 
 
 
 
 
pageStored = False
 
 
 
for addr in addresses:
 
 
 
 
if addr == link:
 
 
 
 
 
pageStored = True
 
 
 
if pageStored == False:
 
 
 
 
if link is not None:
 
 
 
 
 
if '#' not in 
link:
 
 
 
 
 
 
del 
deepLinks['href']
 
 
 
 
 
elif '#' in link 
and len(link.split('#')) > 1 or ':' in link:
 
 
 
 
 
 
del 
deepLinks['href']
 
 
wF = open(storeFolder + "/" + deepPage, 'w')
 
 
wF.write(str(deepSoup))
 
 
wF.close()
 
print("Complete")
 
 
if __name__ == "__main__":
 
init()
4 Get the page
Here we grab the 
page we want 
to store and 
remove the bits 
of the document 
we don‚Äôt need
5 Check links
Then we iterate 
through all of 
the <a> tags and 
check if there‚Äôs 
a valid link to 
another page we 
can grab, and 
tweak them for 
our own use
06
08
07
04
05
6 Copy to file
After that, We 
take the content 
we‚Äôve parsed 
and put it into 
a brand new 
HTML Ô¨Åle
7 Clean up
Once every 
page has been 
parsed and 
stored, we‚Äôll go 
on through and 
try to remove 
any dead links
8 Initialise
This is how we 
will initialise 
our script
Full code listing continued
 Wikipedia isn‚Äôt 
great when it comes to 
DOM consistency 
 

104  The Python Book
Work with Python
04 
Retrieving the page from the URL
Here we‚Äôre using URLLib2 to request 
the page the the user has asked for and then, 
05 
Trimming the fat
Wikipedia has a lot of nodes that we 
don‚Äôt want to parse. The content variable allows 
us to straight away ignore most of Wikipedia‚Äôs 
GUI, but there are still lots of elements that we 
don‚Äôt want to parse. We remedy this by iterating 
through the list ‚Äòundesirables‚Äô that we created 
01 
Install Beautiful Soup & HTML5Lib
Before we can start writing code, we 
need to install the libraries we‚Äôll be using for 
the program (Beautiful Soup, HTML5Lib, Six). 
The installation process is fairly standard: grab 
the libraries from their respective links, then 
unzip them. In the terminal, enter the unzipped 
directory and run python setup.py install for 
each library. They will now be ready for use.
02 
Creating some useful variables
These variables will keep track of the 
links we‚Äôve accessed while the script has been 
running: addresses is a list containing every link 
we‚Äôve accessed; deepestAddresses are the links 
of the pages that were the furthest down the 
link tree from our starting point; storeFolder is 
where we will save the HTML Ô¨Åles we create and 
maxLevel is the maximum depth that we can 
follow the links to from our starting page.
03 
Handling the user‚Äôs input
In the Ô¨Årst few lines of this function, 
we‚Äôre 
just 
creating 
a 
helper 
statement. 
Afterwards, we‚Äôre parsing any arguments 
passed into the program on its execution and 
looking for a -URL Ô¨Çag and a -levels Ô¨Çag. The 
-levels Ô¨Çag is optional as we already have a 
preset depth that we‚Äôll follow the links to, but 
we need a link to start from so if the -URL Ô¨Çag 
is missing, we‚Äôll prompt the user and exit. If we 
have a link, then we quickly check whether or 
not we have a directory to store Ô¨Åles in ‚Äì which 
we‚Äôll create if we don‚Äôt ‚Äì and then we‚Äôll Ô¨Åre off the 
function to get that page. Finally, we register a 
handler for when the script tries to exit. We‚Äôll get 
to that bit later.
02 
03 
WIKI-EVERYTHING
Wikipedia has so many different 
services that interlink with each 
other; however, we don‚Äôt want 
to grab those pages, so we‚Äôve 
got quite a lengthy conditional 
statement to stop that. It‚Äôs pretty 
good at making sure we only get 
links from Wikipedia.
INFINITE LINKS
Wikipedia has a lot of links and when you start following links to links to links, the 
number of pages you have to parse can grow exponentially, depending on the subject 
matter. By passing through the levels value, we put a cap on the amount of pages we 
can grab‚Äì- although the number of Ô¨Åles stored can still vary greatly. Use it wisely.
once we‚Äôve received that page, we‚Äôre going to 
pass the content through to Beautiful Soup 
with the soup variable. This gives us access 
to the methods we‚Äôre going to call as we parse 
the document.
 Wikipedia has a  
lot of nodes  
 

The Python Book  105
Work with Python
06
06 
Grabbing the links
By calling content.Ô¨Ånd_all(‚Äòa‚Äô) we get a 
list of every <a> in the document. We can iterate 
through this and check whether or not there is a 
valid Wikipedia link in the <a>‚Äôs href. If the link is 
a valid link, we quickly check how far down the 
link tree we are from the original page. If we‚Äôve 
reached the maximum depth we can go, we‚Äôll 
store this page and call it quits, otherwise we‚Äôll 
start looking for links that we can grab within it. 
For every page we request, we append its URL 
07 
Writing to Ô¨Åle
Now we create a Ô¨Åle to store the newly 
parsed document in for later reading. We 
change any ‚Äò/‚Äô in the Ô¨Ålename to ‚Äò_‚Äô so the script 
doesn‚Äôt try and write to a random folder. We 
also do a quick check to see how many links 
we‚Äôve followed since the Ô¨Årst page. If it‚Äôs the 
max level, we‚Äôll add it to the deepestAddresses 
list. We‚Äôll use this a little bit later.
08 
Tying up loose ends
After our script has iterated through 
every link on every page to the maximum level 
of depth that it can, it will try to exit. On line 34 
of the code (on the disc and online) in the init 
function, we registered the function cleanUp to 
execute on the program trying to exit; cleanUp‚Äôs 
job is to go through the documents that we‚Äôve 
downloaded and check that every link we‚Äôve left 
in the pages does in fact link to a Ô¨Åle that we 
have available. If it can‚Äôt match the link in the 
href to a Ô¨Åle in the addresses list, it will remove 
it. Once we‚Äôre done, we will have a fully portable 
chunk of Wikipedia we can take with us.
STYLING
Currently, the HTML page will 
use the built-in browser styles 
when rendering the page. If 
you like, you can include the 
style sheet included in the 
tutorial resources to make 
it look a little nicer. To use it, 
you can minify the script and 
include it inside a <style> tag 
in the head string on line 102, 
or you can rewrite the head 
string to something like:
head = ‚Äú<head><meta 
charset=\‚ÄùUTF-8\‚Äù /><title>‚Äù 
+ Ô¨ÅleName + ‚Äú</title><style>‚Äù 
+ str(open(‚Äú/PATH/TO/
STYLES‚Äù, ‚Äòr‚Äô).read()) + ‚Äú</
style></head>‚Äù
earlier on in the document. For each different 
div/section/node that we don‚Äôt want, we call 
Beautiful Soup‚Äôs Ô¨Ånd_all() method and use the 
extract() method to remove that node from the 
document. At the end of the undesirables loop, 
most of the content we don‚Äôt want any more will 
be gone. We also look for the ‚Äòalso‚Äô element in 
the Wiki page. Generally, everything after this 
div is of no use to us. By calling the Ô¨Ånd_all_
next() method on the also node, we can get a 
list of every other element we can remove from 
that point on.
to the addresses list; to make sure we don‚Äôt call 
the same page twice for each link we Ô¨Ånd, we 
check if we‚Äôve already stored it. If we have, then 
we‚Äôll skip over the rest of the loop, but if we‚Äôve 
not then we‚Äôll add it to the list of URLs that 
we‚Äôve requested and Ô¨Åre off a request. Once 
that check is done, We then do a quick string 
replace on that link so that it points to the local 
directory, not to the subfolder /wiki/ that it‚Äôs 
looking for.
 Beautiful 
Soup is a fast 
framework for 
many Python 
HTML parsers 
 

Python
1065IF1ZUIPO#PPL
with
108#VJMEUJDUBDUPFXJUI,JWZ
1SPHSBNOPVHIUTBOEDSPTTFT
112$SFBUFUXPTUFQ
BVUIFOUJDBUJPO
6TF5XJMJPGPSTBGFBVUIFOUJDBUJPO
1165XJUUFST0"VUIQSPDFTT
#VJMETJHOJOHSFRVFTUT
1201SPHSBNB4QBDF
*OWBEFSTDMPOF
.BLFUIFCBTJD1JWBEFSTHBNF
124"EEBOJNBUJPOBOETPVOE
&OIBODFZPVS1JWBEFSTHBNF
128.BLFBWJTVBMOPWFM
1SPHSBNBCPPLTUZMFHBNF
$SFBUF
128
108
116
i1ZUIPODBOIFMQDSFBUF
BNB[JOHQSPKFDUTUIBUBSF
GVOUPDPNQMFUFw

5IF1ZUIPO#PPL107
120

108  The Python Book
Create with Python 
Ease into the workings of Kivy by creating the pen-and-paper classic 
in just over 100 lines of Python...
Build tic-tac-toe with Kivy
Kivy is a highly cross-platform graphical 
framework for Python, designed for the 
creation of innovative user interfaces like 
multitouch apps. Its applications can run not 
only on the traditional desktop platforms of Linux, 
OS X and Windows, but also Android and iOS, plus 
devices like the Raspberry Pi.
That means you can develop cross-platform 
apps using Python libraries such as Requests, 
SQLAlchemy or even NumPy. You can even 
access native mobile APIs straight from Python 
using some of Kivy‚Äôs sister projects. Another 
great feature is the Cython-optimised OpenGL 
graphics pipeline, allowing advanced GPU effects 
even though the basic Python API is very simple. 
Kivy is a set of Python/Cython modules that 
can easily be installed via pip, but you‚Äôll need a 
few dependencies. It uses Pygame as a rendering 
backend (though its API is not exposed), Cython 
for compilation of the speedy graphics compiler 
internals, and GStreamer for multimedia. These 
should all be available through your distro‚Äôs 
repositories, or via pip where applicable.
With these dependencies satisÔ¨Åed, you 
should be able install Kivy with the normal pip 
incantation. The current version is 1.8.0, and the 
same codebase supports both python2 and 
python3. The code in this tutorial is also version-
agnostic, running in python2.7 and python3.3.
pip install kivy
If you have any problems with pip, you can use 
easy_instal via  easy_install kivy.
There are also packages or repositories available 
for several popular distros. You can find more 
QThe classic ‚ÄòHello World!‚Äô in Kivy GUI form, 
using the built-in Label widget
information on Kivy‚Äôs website. A kivy application is 
started by instantiating and running an ‚ÄòApp‚Äô class. 
This is what initialises our pp‚Äôs window, interfaces 
with the OS, and provides an entry point for the 
creation of our GUI. We can start by making the 
simplest Kivy app possible:
from kivy.app import App
class TicTacToeApp(App):
    pass
if __name__ == ‚Äú__main__‚Äù:
    TicTacToeApp().run()
You can already run this, your app will start up and 
you‚Äôll get a plain black window. Exciting!
We can build our own GUI out of Kivy widgets. 
Each is a simple graphics element with some 
specific behaviour of its own ranging from 
standard GUI functionality (eg the Button, Label 
or TextInput), to those that impose positioning on 
their child widgets (eg the BoxLayout, FloatLayout 
or GridLayout), to those abstracting a more 
involved task like interacting with hardware (eg 
the FileChooser, Camera or VideoPlayer). Most 
importantly, Kivy‚Äôs widgets are designed to be 
easily combined - rather than including a widget 
for every need imaginable, widgets are kept simple 
but are easy to join to invent new interfaces. We‚Äôll 
see some of that in this tutorial. 
Since ‚ÄòHello World!‚Äô is basically compulsory in 
any programming tutorial, let‚Äôs get it over with by 
using a simple ‚ÄòLabel‚Äô widget to display the text:
from kivy.uix.label import Label
We‚Äôll display the ‚ÄòLabel‚Äô by returning it as our app‚Äôs 
root widget. Every app has a single root widget, the 
top level of its widget tree, and it will automatically 
be sized to fill the window. We‚Äôll see later how to 
construct a full GUI by adding more widgets for this 
one, but for now it‚Äôs enough to set the root widget 
by adding a new method to the ‚ÄòApp‚Äô:
def build(self):
    return Label(text=‚ÄôHello World!‚Äô,
        font_size=100,
        color=0, 1, 0, 1))  # (r, g, b, a)
The ‚Äòbuild‚Äô method is called when the ‚ÄòApp‚Äô is run, 
and whatever widget is returned automatically 
becomes the root widget of that App‚Äô. In our case 
that‚Äôs a Label, and we‚Äôve set several properties - 
the ‚Äòtext‚Äô, ‚Äòfont_size‚Äô and ‚Äòcolor‚Äô. All widgets have 
different properties controlling aspects of their 
behaviour, which can be dynamically updated to 
alter their appearance later, though here we set 
them just once upon instantiation. 
Note that these properties are not just Python 
attributes but instead Kivy properties. These are 
accessed like normal attributes but provide extra 
functionality by hooking into Kivy‚Äôs event system. 
We‚Äôll see examples of creating properties shortly, 
and you should do the same if you want to use your 
variables with  Kivy‚Äôs event or binding functionality. 
That‚Äôs all you need to show some simple text, 
so run the program again to check that this does 
work. You can experiment with the parameters if it‚Äôs 
unclear what any of them are doing.
Our own widget: tic-tac-toe
Since Kivy doesn‚Äôt have a tic-tac-toe widget, we‚Äôll 
have to make our own! It‚Äôs natural to create a new 
widget class to contain this behaviour:
from kivy.uix.gridlayout import GridLayout
class TicTacToeGrid(GridLayout):
    pass
Now this obviously doesn‚Äôt do anything yet, 
except that it inherits all the behaviour of the 
Kivy GridLayout widget - that is, we‚Äôll need to 
tell it how many columns to have, but then it will 
 You can develop 
cross-platform 
apps using various 
Python libraries 
 

The Python Book  109
Create with Python
QA tic-tac-toe grid now accepting input, adding a O or X alternately
the former, creating a rule for the ‚ÄòTicTacToeGrid‚Äô 
widget by declaring that every ‚ÄòTicTacToeGrid‚Äô 
instantiated should have its ‚Äòcols‚Äô property set to 3.
We‚Äôll use some more kv language features later, 
but for now let‚Äôs go back to Python to create the 
buttons that will be the entries in our tic-tac-toe grid.
from kivy.uix.button import Button
from kivy.properties import ListProperty
class GridEntry(Button):
    coords = ListProperty([0, 0])
This inherits from Kivy‚Äôs ‚ÄòButton‚Äô widget, which 
interacts with mouse or touch input, dispatching 
events when interactions toggle it. We can hook 
into these events to call our own functions when a 
user presses the button, and can set the button‚Äôs 
‚Äòtext‚Äô property to display the ‚ÄòX‚Äô or ‚ÄòO‚Äô. We also 
created a new Kivy property for our widget, ‚Äòcoords‚Äô 
‚Äì we‚Äôll show how this is useful later on. It‚Äôs almost 
identical to making a normal Python attribute by 
writing ‚Äòself.coords = [0, 0]‚Äô in ‚ÄòGridEntry.__init__‚Äô.
As with the ‚ÄòTicTacToeGrid‚Äô, we‚Äôll style our new 
class with kv language, but this time we get to see 
a more interesting feature.
<GridEntry>:
    font_size: self.height
As before, this syntax defines a rule for how a 
‚ÄòGridEntry‚Äô widget should be constructed, this 
time setting the ‚Äòfont_size‚Äô property that controls 
the size of the text in the button‚Äôs label. The extra 
magic is that kv language automatically detects 
that we‚Äôve referenced the Button‚Äôs own height and 
will create a binding to update this relationship 
‚Äì when a ‚ÄòGridEntry‚Äô widget‚Äôs height changes, its 
‚Äòfont_size‚Äô will change so the text fits perfectly. 
We could have made these bindings straight 
from Python (another usage of the ‚Äòbind‚Äô method 
used later on), but that‚Äôs rarely as convenient as 
referencing the property we want to bind to.
Let‚Äôs now populate our ‚ÄòTicTacToeGrid‚Äô with 
‚ÄòGridEntry‚Äô widgets (Fig.01). This introduces a 
few new concepts: When we instantiated our 
‚ÄòGridEntry‚Äô widgets, we were able to set their 
‚Äòcoords‚Äô property by simply passing it in as a 
kwarg. This is a minor feature that is automatically 
handled by Kivy properties.
We used the ‚Äòbind‚Äô method to call the 
grid‚Äôs 
‚Äòbutton_pressed‚Äô 
method 
whenever 
the 
`GridEntry` 
widget 
dispatches 
an 
‚Äòon_release‚Äô 
event. 
This 
is 
automatically 
handled 
by 
its 
‚ÄòButton‚Äô 
superclass, 
and 
will occur whenever a user presses, then 
releases a ‚ÄòGridEntry‚Äô button. We could also  
bind to ‚Äòon_press‚Äô, which is dispatched when the 
button is first clicked, or to any Kivy property of  
the button, which is dispatched dynamically 
whenever the property is modified.
We added each ‚ÄòGridEntry‚Äô widget to our ‚ÄòGrid‚Äô 
via the ‚Äòadd_widget‚Äô method. That means each  
one is a child widget of the ‚ÄòTicTacToeGrid‚Äô, and 
so it will display them and knows it should 
automatically arrange them into a grid with the 
number of columns we set earlier.
Now all we have to do is replace our root widget 
(returned from ‚ÄòApp.build‚Äô) with a ‚ÄòTicTacToeGrid‚Äô 
and we can see what our app looks like.
automatically arrange any child widgets to fit 
nicely with as many rows as necessary. Tic-tac-toe 
requires three columns and nine children.
Here we introduce the Kivy language (kv), a 
special domain-specific language for making 
rules describing Kivy widget trees. It‚Äôs very simple 
but removes a lot of necessary boilerplate for 
manipulating the GUI with Python code - as a loose 
analogy you might think of it as the HTML/CSS to 
Python‚Äôs JavaScript. Python gives us the dynamic 
power to do anything, but all that power gets in the 
way if we just want to declare the basic structure 
of our GUI. Note that you never need kv language, 
you can always do the same thing in Python alone, 
but the rest of the example may show why Kivy 
programmers usually like to use kv.
Kivy comes with all the tools needed to use kv 
language; the simplest way is to write it in a file with 
a name based on our App class. That is, we should 
place the following in a file named ‚Äòtictactoe.kv‚Äô:
<TicTacToeGrid>:
    cols: 3  # Number of columns
This is the basic syntax of kv language; for each 
widget type we may write a rule defining its 
behaviour, including setting its properties and 
adding child widgets. This example demonstrates 
 Kivy comes 
with all the tools 
needed to use kv 
language 
 

110  The Python Book
Create with Python 
def build(self):
    return TicTacToeGrid()
    # Replaces the previous label
With this complete you can run your main Python 
file again and enjoy your new program. All being 
well, the single Label is replaced by a grid of 
nine buttons, each of which you can click (it will 
automatically change colour) and release (you‚Äôll 
see the printed output information from our 
binding). We could customise the appearance by 
modifying other properties of the Button, but for 
now we‚Äôll leave them as they are.
Has anyone won yet?
We‚Äôll want to keep track of the state of the board to 
check if anyone has won, which we can do with a 
couple more Kivy properties:
from kivy.properties import 
(ListProperty, NumericProperty)
class TicTacToeGrid(GridLayout):
    status = ListProperty([0, 0, 0,
    
    
        0, 0, 0,
  
       
        0, 0, 0])
    current_player = NumericProperty(1)
This adds an internal status list representing who 
has played where, and a number to represent the 
current player (1 for ‚ÄòO‚Äô, -1 for ‚ÄòX‚Äô). By placing these 
numbers in our status list, we‚Äôll know if somebody 
wins because the sum of a row, column or diagonal 
will be +-3. Now we can update our graphical grid 
when a move is played (Fig. 02).
You can run your app again to see exactly what 
this did, and you‚Äôll Ô¨Ånd that clicking each button 
now places an ‚ÄòO‚Äô or ‚ÄòX‚Äô as well as a coloured 
background depending on whose turn it is to  
play. Not only that, but you can only play one  
move in each button thanks to our status  
array keeping track of existing moves. 
This is enough to play the game but there‚Äôs one 
vital element missing... a big pop-up telling you 
when you‚Äôve won! Before we can do that, we need 
to add some code to check if the game is over. 
Kivy properties have another useful feature 
here, whenever they change they automatically 
call an ‚Äòon_propertyname‚Äô method if it exists  
and dispatch a corresponding event in Kivy‚Äôs  
event system. That makes it very easy to write 
code that will run when a property changes,  
both in Python and kv language. In our case  
we can use it to check the status list every time  
it is updated, doing something special if a player 
has filled a column, row or diagonal.
def on_status(self, instance, new_value):
    status = new_value
    # Sum each row, column and diagonal.
    # Could be shorter, but let‚Äôs be extra
    # clear what‚Äôs going on
    sums = [sum(status[0:3]),  # rows
            sum(status[3:6]),
            sum(status[6:9]),
            sum(status[0::3]),  # columns
            sum(status[1::3]),
            sum(status[2::3]),
            sum(status[::4]),  # diagonals
            sum(status[2:-2:2])]
    # Sums can only be +-3 if one player
    # filled the whole line
    if 3 in sums:
        print(‚ÄòOs win!‚Äô)
    elif -3 in sums:  
        print(‚ÄòXs win!‚Äô)
    elif 0 not in self.status:  # Grid full
        print(‚ÄòDraw!‚Äô)
This covers the basic detection of a won or drawn 
board, but it only prints the result to stdout. At this 
stage we probably want to reset the board so that 
the players can try again, along with displaying a 
graphical indicator of the result (Fig. 03).
Finally, we can modify the `on_status` method 
to both reset the board and display the winner  
in a ‚ÄòModalView‚Äô widget.
from kivy.uix.modalview import ModalView
This is a pop-up widget that draws itself on top of 
everything else rather than as part of the normal 
widget tree. It also automatically closes when the 
user clicks or taps outside it.
winner = None
if -3 in sums:
    winner = ‚ÄòXs win!‚Äô
elif 3 in sums:
    winner = ‚ÄòOs win!‚Äô
elif 0 not in self.status:
    winner = ‚ÄòDraw...nobody wins!‚Äô
if winner:
    popup = ModalView(size_hint=0.75, 0.5))
    victory_label = Label(text=winner,
QThe game with final additions, making the grid square and extending the interface

The Python Book  111
Create with Python
 Try swapping out the different widget 
types to see how other widgets behave 
 
        font_size=50)
    popup.add_widget(victory_label)
    popup.bind(on_dismiss=self.reset)
    popup.open()
This mostly uses the same ideas we already 
covered, adding the ‚ÄòLabel‚Äô widget to the 
‚ÄòModalView‚Äô then letting the ‚ÄòModalView‚Äô take 
care of drawing itself and its children on top of 
everything else. We also use another binding; this 
time to ‚Äòon_dismiss‚Äô, which is an event dispatched 
by the ‚ÄòModalView‚Äô when it is closed. Finally, we 
made use of the ‚Äòsize_hint‚Äô property common 
to all widgets, which in this case is used to set 
the ‚ÄòModalView‚Äô size proportional to the window 
‚Äì while a ‚ÄòModalView‚Äô is open you can resize 
the window to see it dynamically resize, always 
maintaining these proportions. This is another trick 
made possible by a binding with the ‚Äòsize_hint‚Äô Kivy 
property, this time managed internally by Kivy. 
That‚Äôs it, a finished program! We can now 
not only play tic-tac-toe, but our program 
automatically tells us when somebody has won, 
and resets the board so we can play again. Simply 
run your program and enjoy hours of fun!
Time to experiment
This has been a quick tour through some of Kivy‚Äôs 
features, but hopefully it demonstrates how 
to think about building a Kivy application. Our 
programs are built from individual Kivy widgets, 
interacting by having Python code run when their 
properties change (eg our ‚Äòon_status‚Äô method) 
or when they dispatch events (eg ‚ÄòButton‚Äô ‚Äòon_
release‚Äô). We also briefly saw kv language and 
experienced how it can automatically create 
bindings between properties. 
You can find a copy of the full program on 
FileSilo, which you can reference to check you‚Äôve 
followed everything correctly. We‚Äôve also added 
an extra widget, the ‚ÄòInterface‚Äô, with a structure 
coded entirely in kv language that demonstrates 
how to add child widgets this way. You can test 
it by uncommenting the ‚Äòreturn Interface()‚Äô line 
in ‚ÄòTicTacToeGrid.build‚Äô. It doesn‚Äôt do anything 
fundamentally different to what we already 
covered, but it does make extensive use of kv 
language‚Äôs binding ability to automatically update 
a label showing the current player, and to resize 
the TicTacToeGrid so that it is always square to 
fit within its parent. You can play with all these 
settings to see exactly how it fits together, or try 
things like swapping out the different widget types 
to see how other widgets behave.
class TicTacToeGrid(GridLayout):
    def __init__(self, *args, **kwargs):
        super(TicTacToeGrid, self).__init__(*args, **kwargs)
        for row in range(3):
            for column in range(3):
                grid_entry = GridEntry(
                    coords=(row, column))
                grid_entry.bind(on_release=self.button_pressed)
                self.add_widget(grid_entry)
    def button_pressed(self, instance):
        # Print output just to see what‚Äôs going on
        print(‚Äò{} button clicked!‚Äô.format(instance.coords))
Fig 01
# Note the *args parameter! It‚Äôs important later when we make a binding
# to reset, which automatically passes an argument that we don‚Äôt care about
def reset(self, *args):
    self.status = [0 for _ in range(9)]
    # self.children is a list containing all child widgets
    for child in self.children:
        child.text = ‚Äò‚Äô
        child.background_color = (1, 1, 1, 1)
    self.current_player = 1
Fig 03
def button_pressed(self, button):
        # Create player symbol and colour lookups
        player = {1: ‚ÄòO‚Äô, -1: ‚ÄòX‚Äô}
        colours = {1: (1, 0, 0, 1), -1: (0, 1, 0, 1)}  # (r, g, b, a)
        row, column = button.coords  # The pressed button is automatically
 
 
 
 
 # passed as an  argument
        # Convert 2D grid coordinates to 1D status index
        status_index = 3*row + column
        already_played = self.status[status_index]
        # If nobody has played here yet, make a new move
        if not already_played:
            self.status[status_index] = self.current_player
            button.text = {1: ‚ÄòO‚Äô, -1: ‚ÄòX‚Äô}[self.current_player]
            button.background_color = colours[self.current_player]
            self.current_player *= -1  # Switch current player
Fig 02
Code on 
FileSilo

112  The Python Book
Create with Python 
02 
Add credit
Just like a mobile phone operator, 
Twilio is not a free service ‚Äì although it is very 
inexpensive. In order to continue, we‚Äôll need 
to add a card and some funds to our newly 
created Twilio account. On the main page of the 
dashboard, you‚Äôll see a big blue dialog asking 
to upgrade your trial account; click through 
and follow the instructions to add a card and 
the amount of credit you would like to use. The 
minimum amount of $20 (around ¬£10 GBP) will 
be more than plenty for this and other projects. 
Once that‚Äôs done, you‚Äôre almost ready to start 
sending text messages ‚Äì but Ô¨Årst head back 
over to the Twilio dashboard and copy your 
account SID and auth token down somewhere, 
you‚Äôll need those a little later.
Increase security in access to your web services 
by building a simple two-step authentication 
with Twilio‚Äôs SMS APIs to help you 
Resources
Python 2.7+
Flask 0.10.0: 
Ô¨Çask.pocoo.org/
Flask Github: 
github.com/mitsuhiko/Ô¨Çask
A Twilio account: 
twilio.com
Twilio‚Äôs Python REST  
API Helper Library: 
github.com/twilio/twilio-python/zipball/master
MySQLDB: 
mysql-python.sourceforge.net
Create a two-step 
authentication with Twilio
01 
Get a Twilio account and  
phone number
Signing up to Twilio is pretty easy. First, head 
over to http://twilio.com and click the ‚ÄòSignup‚Äô 
button. At this point, the sign-up process 
doesn‚Äôt really differ from any other service, 
but after you‚Äôve entered an email address and 
password you‚Äôll be asked for a phone number. 
Given the nature of Twilio‚Äôs API, it makes sense 
for them to ask whether we‚Äôre human, and 
having them text us is a good way to conÔ¨Årm 
that. Hey, it‚Äôs a two-step authentication, which 
is exactly what we‚Äôre working towards. 
You can enter any number you have access 
to, be it a landline or mobile, to conÔ¨Årm who 
you are, but at this point we suggest you 
authenticate using a phone that can accept 
SMS (instead of a landline). Having entered your 
number, you‚Äôll receive a text to authenticate 
your phone ‚Äì enter it and you‚Äôll be presented 
with a Twilio phone number. This is your Twilio 
phone number and you‚Äôll be using it to send and 
receive our authentication texts.
Telephony is one of the most versatile 
technologies in our households. Despite being 
invented over 100 years ago, we still use the 
same basic infrastructure that once only carried 
the voices of people to deliver a rich multitude of 
media content at incredible speeds. As is often 
the case with wonderful things, they can often be 
complex too ‚Äì and yet phones are more important 
now to our daily lives than ever. So, what can we 
do to leverage some of that versatile technology? 
Well, for starters we can use an API. Twilio 
has created a RESTful API that removes a great 
deal of that complexity of telephony so that we 
can write apps and services that are able to 
deliver and receive both phone calls and SMS 
using various endpoints and services. Neat! In 
this tutorial, we‚Äôre going to look at using Twilio 
to help us create the basic Ô¨Çow for a two-step 
authentication system for logging into a service. 
We‚Äôre also going to be using Flask to help us 
create our routes and generate our pages, but 
little of Flask‚Äôs detail will be covered here.
QThe Twilio interface is kept nice and simple ‚Äì no unnecessary complications here

The Python Book  113
Create with Python
import MySQLdb
from flask import Flask, redirect, request, session, render_template
from twilio.rest import TwilioRestClient as twilio
import string, random, time
db = MySQLdb.connect(host="127.0.0.1", user="SQLUSER", 
passwd="SQLPASS",  db="two-step", port=3306)
expirationLength = 300
account_sid = "YOUR ACCOUNT SID"
auth_token = "YOUR ACCOUNT AUTH TOKEN"
client = twilio(account_sid, auth_token)
@app.route('/')
def index():
    return "index page"
@app.route('/login', methods=['GET'])
def login():
    return "login page"
@app.route('/check-user', methods=['POST'])
def checkUser():
    return "check user page"
@app.route('/logout')
def logout():
    return "logout page"
@app.route('/verify', methods=['GET'])
def twoStep():
    return "verify page"
@app.route('/check-code', methods=['POST'])
def checkCode():
    return "check code page"
if __name__ == '__main__':
    
    app.secret_key = 'R4nDOMCRypt0gr4ph1cK3yf0R5355i0N'
    app.run(host='0.0.0.0', debug=True)
Fig 01
03 
Install the Twilio Helper Library 
and MySQLDB
The Twilio helper library is a fantastic piece of 
code that lets you jump straight into sending and 
handling text messages in no time at all. There 
are a couple of ways to install the library: you can 
use either PIP or Easy_Install, like so
$ pip install twilio
$ easy_install twilio
Or you can download the source code for the 
helper library and run the ‚Äòsetup.py‚Äô Ô¨Åle. It 
really is as simple as that. Now, for storing the 
veriÔ¨Åcation tokens we‚Äôre going to use a MySQL 
database. To get Python talking to our SQL 
server, we‚Äôll use the Python module MySQLDB, 
the package for which you can grab like so‚Ä¶
apt-get install python-mysqldb 
In the tutorial resources we have included an 
SQL dump with the table structure. Import it 
into a database of your choosing. Assuming 
everything so far has gone swimmingly, you can 
create a new project folder/environment and 
add a new Ô¨Åle ‚Äòserver.py‚Äô.
04 
Server setup
Open the ‚Äòserver.py‚Äô Ô¨Åle for editing. The 
Ô¨Årst thing we're going to do is import the libraries 
we need for our authentication Ô¨Çow, create the 
endpoints for our server and assign some of the 
variables needed to run our Flask server. (Fig 01)
You may have noticed the account_sid and 
auth_token variable we‚Äôve set after the import 
statements. We‚Äôll use these with our Twilio 
client so we can interact with Twilio and our 
mobile phones. These settings can be found 
on the Twilio account dashboard, right below 
the header. We‚Äôve also connected to our SQL 
database, so make sure your SQL server is 
running before you Ô¨Åre up the app, otherwise 
you‚Äôll have an error thrown. Save, now if you run 
your ‚Äòserver.py‚Äô Ô¨Åle, you should be able to access 
the index page of your server at 127.0.0.1:5000/.
05 
Server logic
If you‚Äôve hit all of your server endpoints 
already, so far all you will see are the strings we 
returned at the end of endpoint declarations. 
These are not all that good-looking, so let‚Äôs 
add some Flask templates to pretty things 
up a little. The focus of this tutorial is not on 
the intricacies of Flask and as such, included 
on the DVD is a folder called ‚Äòtemplates‚Äô and 
another called ‚Äòstatic‚Äô; copy them both to the 
root of your current project folder and amend 
your endpoints as in Fig 02. If you revisit the 
pages again, things might seem a little out of 
whack at the moment, but don‚Äôt worry about 
that for the time being. It‚Äôs mostly because 
we‚Äôve not put together the server logic to help 
the templates Ô¨Ågure out what to do. 
Let‚Äôs deal with the ‚Äò/‚Äô path Ô¨Årst. All we‚Äôre 
doing here is checking the state of our session 
cookies and effecting how the index.html 
page renders according to that state. If the 
user isn‚Äôt logged in, we‚Äôll give them a link to the 
login page, if the user is logged in but hasn‚Äôt 
veriÔ¨Åed, then we‚Äôll give them a link to the 
code veriÔ¨Åcation page. Before we deliver the 
template we need to check that our session has 
its particular variables set, otherwise we‚Äôll end 
up getting KeyErrors.
@app.route(‚Äò/‚Äô)
def index():
    checkSessionState()
    return render_template(‚Äòindex.
html‚Äô)
def checkSessionState():

114  The Python Book
Create with Python 
    try:
        session[‚Äòverified‚Äô] == True
    except KeyError:
        session[‚Äòverified‚Äô] = ‚Äô‚Äô
    try:
        session[‚Äòloggedin‚Äô] == True
    except KeyError:
        session[‚Äòloggedin‚Äô] = ‚Äô‚Äô
    try:
        session[‚Äòuser‚Äô] == True
    except KeyError:
        session[‚Äòuser‚Äô] = ‚Äô‚Äô
    result = cur.fetchone()
    returnedPassword = result[2]
    returnedPhoneNumber = result[3]
We can then build an SQL statement using cur.
execute(). Notice the %s; this will be replaced with 
the value passed through in the next variable. We 
execute the statement with cur.fetchone(), which 
will get us the Ô¨Årst row that the query returns ‚Äì if 
there is no result we‚Äôll get None and we can then 
return the user to the login page with an error 
message. Let‚Äôs assume we‚Äôve requested a valid 
user ‚Äì we‚Äôll next check that the password assigned 
to that user is the same as the one submitted. If so, 
we‚Äôll generate the validation code to send to the 
user, which we‚Äôll store in the veriÔ¨Åcation table of 
our database until it‚Äôs used or expires. We‚Äôll need to 
create a new cursor to insert the veriÔ¨Åcation code 
into our table. After we‚Äôve executed the statement 
we need to commit the changes to the database, 
we do this with db.commit() ‚Äì we‚Äôll then add the 
results of the query to our session so we can check 
against them later. (Fig 03)
that will make up the body of our message, 
the number that we want to send it to and the 
number that we want to send it from. When 
inputting the number that we want to send it 
to, it‚Äôs best to use the +CountryCode type of 
phone number to avoid any ambiguity about 
the intended recipient. The number that we‚Äôre 
sending from is our Twilio number; you can 
use any Twilio number you have assigned to 
your account, so long as it has credit. As soon 
as we execute that code, the message will be 
sent and your SMS will go straight through to 
the telephone. The SID is the unique identiÔ¨Åer 
for the message/call sent; receiving it means 
the message has been executed successfully. 
After that, we can redirect our user to the 
veriÔ¨Åcation page with return redirect(‚Äò/
verify‚Äô) at the end of /check-user.
06 
Logging in
The Ô¨Årst step in two-step authentication 
is logging in with a traditional username/email 
and password. Access your database and create 
a new user with the following query:
INSERT INTO users (username, password, 
phonenumber) VALUES (‚ÄòA USERNAME', ‚ÄòA 
PASSWORD', ‚Äò+44YOURUSERSPHONENUMBER')
For the purposes of this tutorial, the password 
is plain text ‚Äì but we implore you, when you‚Äôre 
implementing passwords in a live environment, 
make sure that you hash them. Still, for now we‚Äôre 
going to use a plain text password. Our login.html 
template has a form that‚Äôs going to POST itself 
to check-user; here we'll check the validity of 
the credentials and then trigger the veriÔ¨Åcation 
if needed. So we‚Äôre going to use the MySQLDB 
module to get details from our database.
In order to query our database we need to 
create a cursor from which to execute our MySQL 
statements. We do this with cur = db.cursor():
@app.route(‚Äò/check-user', 
methods=[‚ÄòPOST'])
def checkUser():
  #session.clear()
  if request.method == ‚ÄòPOST':
    #print request.form['username']
    cur = db.cursor()
    cur.execute("""SELECT * FROM 
users WHERE username = %s""", 
(request.form[‚Äòusername'],))
07 
Send the veriÔ¨Åcation code
Now that we believe we‚Äôre dealing with 
a valid user, it‚Äôs time for the second step of our 
two-step process. On the line after where we 
stored a variable in our session, we make a call 
to sendVerificationCode 
(VERIFICATION 
CODE, USER PHONE NUMBER) and pass 
through the code we want to send to our user 
and the user‚Äôs phone number. So what does 
that function actually look like? It must be 
big, long and complicated because it deals 
with the telecommunications network, right? 
Wrong. It‚Äôs actually incredibly simple to send 
an SMS with Twilio. In fact, part of the inherent 
beauty of Twilio lies in its simplicity. To send a 
text, all we have to do is:
def sendVerificationCode(code, 
number):
  text = client.messages.create(
    body=‚ÄúYour verification code 
is:" + code,
    to=number,
    from_=‚Äú+YOURTWILIONUMBER"
  )
return text.sid
Using the client variable we used to instantiate 
the Twilio REST module, we can access the 
messages class and execute the create 
method. All we need to pass through is the text 
08 
Check veriÔ¨Åcation code
At this point the user will have received 
a text message with something along the lines 
of ‚ÄòYour veriÔ¨Åcation code is: 12cd56‚Äô and will 
be presented with the veriÔ¨Åcation page. If, at 
this point, they choose to browse around our 
site, they won‚Äôt be able to access anything that 
we don't want them to. Still, we‚Äôll know that 
they‚Äôve logged in, so if they head back to the 
veriÔ¨Åcation page, we can just let them input 
their code. Once they submit their code, it will 
be sent to the /check-code endpoint. 
Just like before when we checked for our 
user‚Äôs validity, we‚Äôre going to attempt to retrieve 
the veriÔ¨Åcation code and check it. (Fig 04)
First we‚Äôre simply going to retrieve the code 
and check the user it has assigned to it. If that 
user assigned to the code matches the user 
in our session, then we can be certain that 
the right person is logging in with the right 
code ‚Äì if not we can redirect them accordingly. 
Assuming the code is correct, we need to 
check it‚Äôs still valid. Back in Step 6, we created 
an expiration time that was Ô¨Åve minutes in the 
future from when the code was generated. If it‚Äôs 
been more than Ô¨Åve minutes (or whatever time 
you‚Äôve set on it) then we‚Äôre going to consider it 
invalid, delete the code from our table and then 
log out our user so they can start over, like so.
elif time.time() > expirationTime:
  expirySQL = db.cursor()
  expirySQL.execute("""DELETE FROM 
verification WHERE code=%s""",  
(codeToCheck,))

The Python Book  115
Create with Python
  expirySQL.close()
  session['loggedin'] == False
 return redirect('/logout')
If we manage to pass the tests so far, then 
we‚Äôve two-step veriÔ¨Åed our user ‚Äì hooray! 
Surprisingly easy, eh? Before we give our user 
free reign around our service, we still want 
to get rid of that token ‚Äì we don‚Äôt need it any 
more and we don‚Äôt want to risk someone else 
using it maliciously in the future.
else:
  delSql = db.cursor()
  delSql.execute("""DELETE FROM 
verification WHERE code=%s""", 
(codeToCheck,))
  delSql.close()
  db.commit()
  session['verified'] = True
  return redirect('/')
else:
  return redirect('/
verify?error=true')
And that‚Äôs it! Now we redirect our user to 
wherever we want them to be at the end of the 
process. In this instance we‚Äôre sending them 
back to our index page, which will render a 
success message and give the user a link to 
log out whenever they like ‚Äì but they could be 
redirected to their user page, and so on.
09 
Conclusion
In every web-based service, security 
is king. Users entrust more and more personal 
data and trends to services every day and it‚Äôs 
the responsibility of those services to maintain 
the privacy of that data as best they can. It‚Äôs no 
wonder that services such as Amazon, Google 
and Facebook have all implemented two-
step veriÔ¨Åcation across their services. With 
two-step authentication, a user can tie their 
account to one of the most personal things they 
own: their phone. With services like Twilio and 
some simple code, they contain people‚Äôs keys ‚Äì 
or at least a part of them.
@app.route('/')
def index():
  return render_template('index.html')
@app.route('/login', methods=['GET'])
def login():
  return render_template('login.html')
@app.route('/check-user', methods=['POST'])
def checkUser():
  return "check user page"
@app.route('/logout')
def logout():
  return "logout page"
@app.route('/verify', methods=['GET'])
def twoStep():
  return render_template('verify.html')
@app.route('/check-code', methods=['POST'])
def checkCode():
  return "check code page"
Fig 02
verficationCode = generateVerificationCode(size=6)
ins = db.cursor()
expiration = int(time.time() + expirationLength)
sql = "INSERT INTO verification (code, expiration, username) VALUES ('%s', 
'%s', 
'%s')" % (verficationCode, expiration, request.form['username'])
ins.execute(sql)
ins.close()
db.commit()
session['user'] = request.form['username']
session['loggedin'] = True
Fig 03
@app.route('/check-code', methods=['POST'])
def checkCode():
    
  if request.method == 'POST':
    codeToCheck = request.form['code']
        
    if not 'user' in session:
      return redirect('/login')
    else:
      cur = db.cursor()
      cur.execute("""SELECT * FROM verification WHERE code = %s""", (codeToCheck,))
      result = cur.fetchone()
      cur.close()
      if result != None:
        returnedUser = result[3]
        expirationTime = int(result[2])
        if returnedUser != session['user']:
          return redirect('/verify?error=true')
Fig 04

116  The Python Book
Create with Python 
Building and signing requests according to OAuth can be tricky. 
We explain the authentication process for Python and Flask
Handling Twitter‚Äôs
three-legged OAuth process
Once upon a time, Twitter was a favourite 
API for developers looking to write a 
quick weekend hack. Setup was quick, 
documentation was plentiful and the data 
available was vast. Fun times! But now things 
are a little different. With the Twitter API v1.1, 
authentication is not quite as easy as it once was 
(though the documentation is still plentiful and 
the data vast). Twitter now requires adherence 
to OAuth protocol v1 for all requests made to its 
API. It‚Äôs tempting to install a library and ignore all 
the complicated stuff ‚Äì and entirely appropriate 
if you‚Äôre putting together a quick hack project. 
However, understanding what‚Äôs going on in 
the authentication process will help you along 
when it comes to debugging problems you may 
encounter later if you have to start handling 
multiple users or requests. For this tutorial, we‚Äôll 
be using Flask ‚Äì a great, lightweight Python 
server framework to deÔ¨Åne routes, create 
sessions and handle parameters passed to and 
from Twitter. Flask is perfect for this project: as 
we‚Äôll see shortly, deÔ¨Åning routes and handling 
parameters is a piece of cake and saves us 
having to deal with a lot of the overheads that 
come with frameworks such as Django.
Resources
Python 2.7+
Flask 0.10.0: Ô¨Çask.pocoo.org
Flask GitHub:
github.com/mitsuhiko/Ô¨Çask
A Twitter account
Your favourite text editor
01 
Install Flask 
So, before we start writing code, let‚Äôs 
deal with the prerequisites. If you have pip 
on your system then installing is as simple as 
entering sudo pip install flask into your 
terminal. If you‚Äôre into building from source, you 
can head over to Flask‚Äôs GitHub and grab the 
latest version there.
02 
Create a Twitter app
Before we can do anything with Twitter, 
we need to create an app for their service. Go to 
https://dev.twitter.com and sign in. If you look 
in the top-right corner, you‚Äôll see your Twitter 
proÔ¨Åle picture; hover over it and a drop-down 
will appear. Select ‚ÄòMy Apps‚Äô and then click the 
‚ÄòCreate new app‚Äò button that appears on the 
next screen. Follow the instructions to set up 
the app. The information you enter here isn‚Äôt 
important right now ‚Äì at the end of the process 
you‚Äôll see a Ô¨Åeld titled ‚ÄòOAuth Settings‚Äô with a 
table of settings. We‚Äôll need those in a little bit.
03 
Importing Python modules
These are the modules we‚Äôll be using 
for this project. With the exception of Flask, 
all of the modules should be included with 
all versions of Python 2.7+. These modules 
are all used in the process of generating, 
signing and encoding each request we send 
to and from Twitter in the auth process. We 
need to be speciÔ¨Åc when importing sessions, 
requests etc from Flask, otherwise those 
aspects of the library won‚Äôt be included in the 
scope of the endpoints.
04 
Create global variables
for Twitter keys
Back in step 2 we created an app with Twitter. 
Now we need those variables that we saw 
in the OAuth Settings area of the ‚ÄòCreate 
my app‚Äô page. Fill in the consumer_key and  
consumer_secret variables. For now, leave the 
oauth_secret and oauth_token variables as 
blank strings ‚Äì we‚Äôll assign those later.
QThe OAuth Settings page for your new Twitter app ‚Äì you‚Äôll fill in various bits as you go

The Python Book  117
Create with Python
flask.py (cont. on next page)
import urllib, urllib2, collections, hmac, binascii, time, random
from hashlib import sha1
from flask import Flask, redirect, request, session
#Twitter OAuth Variables
consumer_key = ‚ÄúSrq7dzdIDule3RxSz9Ew‚Äù
consumer_secret = ‚ÄúBsurvs8Bk41VHjhLWzZCUHvZw9btpdxNZVgxjG8b0‚Äù
app = Flask(__name__)
@app.route(‚Äò/authenticate‚Äô)
def authenticate():
  session.clear()
  session[‚Äòoauth_secret‚Äô] = ‚Äò‚Äô
  requestParams = {
    ‚Äúoauth_callback‚Äù : ‚Äúhttp://192.168.1.5:5000/authorised‚Äù,
    ‚Äúoauth_consumer_key‚Äù : consumer_key,
    ‚Äúoauth_nonce‚Äù : str(random.randint(1, 999999999)),
    ‚Äúoauth_signature_method‚Äù : ‚ÄúHMAC-SHA1‚Äù,
    ‚Äúoauth_timestamp‚Äù : int(time.time()),
    ‚Äúoauth_version‚Äù : ‚Äú1.0‚Äù
  }
  theSig = sign_request(requestParams, ‚ÄúPOST‚Äù, ‚Äúhttps://api.twitter.com/oauth/ 
request_token‚Äù)
  requestParams[‚Äúoauth_signature‚Äù] = theSig
  request = urllib2.Request(‚Äúhttps://api.twitter.com/oauth/request_token‚Äù, ‚Äú‚Äù)
  request.add_header(‚ÄúAuthorization‚Äù, create_oauth_headers(requestParams))
  try:
    httpResponse = urllib2.urlopen(request)
  except urllib2.HTTPError, e:
    return e.read()
  responseData = getParameters(httpResponse.read())
  session[‚Äòoauth_token‚Äô] = responseData[‚Äòoauth_token‚Äô]
  session[‚Äòoauth_secret‚Äô] = responseData[‚Äòoauth_token_secret‚Äô]
  return redirect(‚Äúhttps://api.twitter.com/oauth/authorize?oauth_token=‚Äù + 
session[‚Äòoauth_token‚Äô])
@app.route(‚Äò/authorised‚Äô)
def authorised():
  if request.args.get(‚Äòoauth_token‚Äô, ‚Äò‚Äô) == session[‚Äòoauth_token‚Äô]:
 
 
    verifyRequestParams = {
      ‚Äúoauth_consumer_key‚Äù : consumer_key,
      ‚Äúoauth_nonce‚Äù : str(random.randint(1, 999999999)),
      ‚Äúoauth_signature_method‚Äù : ‚ÄúHMAC-SHA1‚Äù,
      ‚Äúoauth_timestamp‚Äù : int(time.time()),
      ‚Äúoauth_version‚Äù : ‚Äú1.0‚Äù,
      ‚Äúoauth_token‚Äù : session[‚Äòoauth_token‚Äô]
    }
    signVerification = sign_request(verifyRequestParams, ‚ÄúPOST‚Äù, ‚Äúhttps://api. 
twitter.com/oauth/access_token‚Äù)
    verifyRequestParams[‚Äúoauth_signature‚Äù] = signVerification
    verifyRequest = urllib2.Request(‚Äúhttps://api.twitter.com/oauth/access_token‚Äù,  
‚Äúoauth_verifier=‚Äù + request.args.get(‚Äòoauth_verifier‚Äô))
    verifyRequest.add_header(‚ÄúAuthorization‚Äù, create_oauth_ 
Code on  
FileSilo 
05 
Assigning a namespace
to the Flask app
Now we create an instance of the Flask class. 
This variable will be how we access all of the 
classes and properties associated with the 
Flask package. The __name__ property in this 
instance gives our Flask class an idea of the 
scope it‚Äôs operating in.
06 
Creating our Ô¨Årst route
In order to authorise our user, we need 
to create an endpoint that they can visit to 
trigger the process. This is where Flask comes in 
handy. Using the routes decorator (@app.route()) 
we can determine paths that trigger functions 
or actions. The Ô¨Årst endpoint we want to create 
is @app.route(‚Äòauthenticate‚Äô). The function 
we declare immediately after the decorator 
will be executed when that endpoint is called. 
Note that although we‚Äôve done so here, you do 
not need to name the function the same as the 
endpoint. Flask can deliver static Ô¨Åles as well as 
use template rendering engines, but for the sake 
of brevity we‚Äôre going to use return at the end of 
the function to deliver a simple text response 
showing our progress.
08 
Preparing to authorise our app
Now we need to start thinking about 
how we are going to submit data to Twitter. The 
OAuth protocol expects every request to be 
signed with a SHA1 hash so Twitter can check 
the integrity of the data it has received before 
allowing access to any personal information. 
07 
Creating a session with Flask
In order to maintain various properties 
and values speciÔ¨Åc to multiple users, we‚Äôre 
going to be storing our values in Flask sessions. 
A Flask session is almost exactly the same as 
using a cookie to store values, but with sessions 
we get a layer of cryptography to help keep user 
credentials secure. The values in our sessions 
behave just like a dictionary, so we can call 
all of the methods that dictionaries have. For 
example, we can call session.clear() if we 
want to log a user out of a service or restart the 
authentication process. We need to make sure 
that before we make any calls to our sessions, 
we‚Äôve set our session key, otherwise we‚Äôll get 
an error. In this example we‚Äôve chosen to insert 
the key just before app.run() so it will be set just 
before our server is executed. Like most keys, 
you must keep this key secret.

118  The Python Book
Create with Python 
ampersand in the middle. However, you may 
notice that we don‚Äôt have an OAuth secret yet. 
That‚Äôs okay: for this Ô¨Årst signing request we 
don‚Äôt need one. You may have noticed in our  
/authenticate 
endpoint 
that 
after 
we 
popped the session values, we reassigned 
session[‚Äòoauth_secret‚Äô] to ‚Äú‚Äù. This way we 
won‚Äôt get a KeyError message when we try to 
sign our request. When we get our callback 
in our /authorised endpoint, we‚Äôll assign our 
session[‚Äòoauth_secret‚Äô] for future requests.
11 
Hashing the key
Finally, we‚Äôre ready to hash the key. Using 
Python‚Äôs HMAC library, we pass our signing 
key, our result string (the concatenation of 
our escaped base URL and method with our 
parameters string) and from Python‚Äôs hashlib 
library, the SHA1 hash function. This results in 
a binary buffer with our signature ‚Äì that‚Äôs great, 
but we can‚Äôt send a buffer to Twitter‚Äôs server. 
On the next line, we pass our hashed variable 
through to the binascii library to convert it to a 
Base64 value. Now we have our signature which 
we‚Äôll return to the function that called it.
12 
Obtaining a request token
With Twitter API v1.1, we can no longer 
just request an access token to access user 
data. First, we need to obtain a request token 
and then exchange that for our Ô¨Årst access 
token. We don‚Äôt need the user to interact with 
anything at this point, so we can trigger this 
on the back-end and handle it ourselves. In 
the requestParams dictionary, we prepare 
the values we‚Äôll need to sign against and then 
submit these to Twitter to receive a request 
token. The oauth_callback Ô¨Åeld won‚Äôt do 
anything right now, but it‚Äôs where our app will 
redirect after we obtain our Ô¨Årst access token. 
We want to point it to our route /authorised. On 
line 27 we pass the requestParams through 
to the sign_request method. We then add the 
signature returned to the requestParameters 
that passed through to the signing function, as 
we‚Äôll be using these to build our authorisation 
headers next.
13 
Building the OAuth
authorisation headers
Much like when we sign our requests, we need 
to properly encode and format our authorisation 
headers, too. The main difference between  
sign_request() and create_oauth_headers() 
is that the signature base string (the string we 
build to generate our SHA1 signature) is all of 
the variables joined with ‚Äò&‚Äô, whereas our auth 
headers are joined with ‚Äò,‚Äô and prepended with 
the word ‚ÄòAuth‚Äô. Other than that, the two serve 
the same purpose. Here we‚Äôve separated the 
two out to emphasise the importance of the 
difference ‚Äì if either of these two functions 
returns a malformed string, the request will 
fail. Using the urllib2 module, we can prepare 
the request we‚Äôll submit. Notice the second 
parameter of the request function on line 31. 
If we omit this parameter, the request method 
will be GET; if it is included ‚Äì regardless of 
the content ‚Äì it will be a POST request. The 
parameter‚Äôs main function is to assign the body 
property of a request; it‚Äôs a little clumsy, but it‚Äôs 
something we‚Äôll need in a bit. 
14 
Making the Ô¨Årst request
Once we‚Äôve gotten the prepared auth 
headers back, we add them to the HTTP request 
and then call the open() method and wait for a 
response. If all has gone well, we should receive 
a string in the request response with our Ô¨Årst 
auth token and auth secret. To save us having to 
individually parse the string for properties, the 
function getParameters() will split the string up 
and return a dictionary we can access. We‚Äôll then 
store these values in our session for later.
15 
Redirecting the user
Now we have our Ô¨Årst set of credentials, 
we can redirect our user to the Twitter 
authorisations screen to let them grant 
access to their data. Because we haven‚Äôt sent 
anything to our client yet, we can use Flask‚Äôs 
redirect() method to send our user to the Twitter 
authorisation view. This request is one of the few 
that we can use URL parameters to send tokens 
to Twitter.
Most of the values included in the OAuth 
headers and signing process are self-
explanatory. However, one isn‚Äôt so obvious 
in its purpose. OAuth_Nonce is a randomly 
generated value ‚Äì often alphanumeric but 
as there is no defined convention, an integer 
between 1 and something large will serve its 
purpose. It exists so Twitter can check that it‚Äôs 
not been sent the same request twice.
A little about 
oauth_nonce
 Flask is perfect for this project: 
defining routes and handling parameters 
is a piece of cake 
 
In order to sign the request properly, we 
need to order the parameters of the request 
alphabetically, URL-encode them, concatenate 
them and then sign against them each time. This 
is where the headache of OAuth begins. Because 
we‚Äôll be doing this for most every request, we‚Äôre 
going to write a convenience function that does 
all of this for us: sign_request().
09 
Creating our signature
So, what‚Äôs going on in our sign_request() 
function? First, we need to URL-encode the 
base URL of the request, which we can do with  
urllib.quote(). Next, we create an ordered 
dictionary 
(OrderedDict) 
which 
sorts 
the 
parameters we‚Äôve passed through to the 
function alphabetically according to the key 
value. This is crucial as each request must be 
signed with all of the parameters concatenated 
alphabetically in order to be valid. Next, we 
create the variable requestString to build the 
Ô¨Årst part of our request body. This is made up 
of the method we‚Äôll be using for the request 
and the URL we‚Äôll be submitting to. We then 
iterate through the keys in the OrderedDict, 
concatenating and URL-encoding the key value 
pairs of the dictionary so we have something 
like key=value. Finally, we check whether or 
not we‚Äôre at the last key in the dictionary; if we 
aren‚Äôt then we‚Äôll append a ‚Äò&‚Äô to the parameter 
string in preperation for the next one to follow. 
Ultimately, we‚Äôll have a string that will appear as 
GET&http%3A%2F%2Fapi.twitter.com%2Fetc
%2F?key1=value1&key2=value2&key3=value3.
10 
The signing key
Now we need to create a signing key 
for our signature. As the code shows, it‚Äôs just 
our consumer_secret + oauth_secret with an 

The Python Book  119
Create with Python
headers(verifyRequestParams))
 
 
    try:
      httpResponse = urllib2.urlopen(verifyRequest)
    except urllib2.HTTPError, e:
      return e.read()
    responseData = getParameters(httpResponse.read())
    session[‚Äòoauth_token‚Äô] = responseData[‚Äúoauth_token‚Äù]
  return ‚ÄúAuthorised ‚Äú + session[‚Äòoauth_token‚Äô]
def getParameters(paramString):
  paramString = paramString.split(‚Äú&‚Äù)
  pDict = {}
  for parameter in paramString:
    parameter = parameter.split(‚Äú=‚Äù)
    pDict[parameter[0]] = parameter[1]
  return pDict
def sign_request(parameters, method, baseURL):
  baseURL = urllib.quote(baseURL, ‚Äò‚Äô)
  p = collections.OrderedDict(sorted(parameters.items(), key=lambda t: t[0]))
  requestString = method + ‚Äú&‚Äù + baseURL + ‚Äú&‚Äù
  parameterString = ‚Äú‚Äù
  for idx, key in enumerate(p.keys()):
    paramString = key + ‚Äú=‚Äù + urllib.quote(str(p[key]), ‚Äò‚Äô)
    if idx < len(p.keys()) - 1:
      paramString += ‚Äú&‚Äù
    parameterString += paramString
  result = requestString + urllib.quote(parameterString, ‚Äò‚Äô)
  signingKey = consumer_secret + ‚Äú&‚Äù + session[‚Äòoauth_secret‚Äô]
  print signingKey
  hashed = hmac.new(signingKey, result, sha1)
  signature = binascii.b2a_base64(hashed.digest())[:-1]
  return signature
def create_oauth_headers(oauthParams):
 
  oauthp = collections.OrderedDict(sorted(oauthParams.items(), key=lambda t: t[0]))
  headerString = ‚ÄúOAuth ‚Äú
  for idx, key in enumerate(oauthp):
    hString = key + ‚Äú=\‚Äù‚Äù + urllib.quote(str(oauthp[key]), ‚Äò‚Äô) + ‚Äú\‚Äù‚Äù
    if idx < len(oauthp.keys()) - 1:
      hString += ‚Äú,‚Äù
    headerString += hString
  return headerString
if __name__ == ‚Äò__main__‚Äô:
 
  app.secret_key = ‚ÄòR4nDOMCRypt0gr4ph1cK3yf0R5355i0N‚Äô
  app.run(host=‚Äô0.0.0.0‚Äô, debug=True)
16 
Handling access
If the user grants our application 
access, they will be redirected to the callback 
URL we deÔ¨Åned in step 12. The redirection 
will include URL parameters that are our 
access token and a token veriÔ¨Åer string. 
The Twitter documents state that we should 
check the access token we received in the 
URL parameters is the same as the one we 
obtained moments ago. If all has gone well, 
Our /authenticate endpoint will have stored 
our token in the session dictionary. If our 
stored token and the one Twitter returned 
matches, we can prepare to exchange our 
access token (which currently only has 
restricted privileges) for a fully Ô¨Çedged access 
token with read/write permissions (depending 
on the permissions you requested when you 
Ô¨Årst created the app). 
17 
Third (and Ô¨Ånal)
token exchange
So, same as before: we prepare our parameters 
for submission with sign_request(), build our 
auth headers and then Ô¨Åre off our request. 
Just like when we Ô¨Årst retrieved our request 
token, this is something that we can do in the 
background without user interaction. Providing 
everything has gone swimmingly, you will 
then be returned a fully authorised access 
token that you can start building your own 
requests with.
18 
Fire up your server
As you can see, we have ended our 
Ô¨Çask.py Ô¨Åle with:
if __name__ == ‚Äò__main__‚Äô:
  app.secret_key = 
‚ÄòR4nDOMCRypt0gr4ph1cK3yf0R5355i0N‚Äô
  app.run(host=‚Äô0.0.0.0‚Äô, debug=True)
If we didn‚Äôt include any parameters in the run 
function then our server would run and be 
accessible at 127.0.0.1: 5000, but it wouldn‚Äôt 
be accessible to external machines ‚Äì kind 
of defeats the point of having a server. By 
passing host=‚Äô0,0,0,0‚Äô, Flask will listen on any 
IP address it can for potential requests with a 
default port of 5000. debug=True is an error 
message beautiÔ¨Åer that Flask includes. Rather 
than crashing our server, an error page will be 
delivered detailing what went wrong in place of 
our expected return.
Code on  
FileSilo 

120  The Python Book
Create with Python 
Write your own RasPi shooter in 300 lines of Python
Part one: Program a 
Space Invaders clone
meander their way down the screen 
towards you, it‚Äôs your job to pick them 
off while dodging their random Ô¨Å re. 
When one wave is conquered, another 
faster, more aggressive wave appears. 
We‚Äôve tried to use many features of 
Pygame, which is designed to make 
the creation of games and interactive 
applications easier. We‚Äôve extensively 
used the Sprite class, which saves 
dozens of lines of extra code in making 
collision detection simple and updating 
the screen and its many actors a 
single-line command. 
We hope you agree that this is an 
exciting game to play and a great 
tool to learn more about Python and 
Pygame, but our sensory system is far 
from overloaded here. Don‚Äôt worry, as 
that will be covered in the next tutorial, 
adding animation and sound effects to 
our game to give it the spit and polish 
any self-respecting Space Invaders-
inspired shooter demands‚Ä¶
01 
Setting up dependencies
If you‚Äôre looking to get a better understanding of 
programming games with Python and Pygame, we strongly 
recommend you copy the Pivaders code in this tutorial into your 
own program. It‚Äôs great practice and gives you a chance to tweak 
elements of the game to suit you, be it a different ship image, 
changing the difÔ¨Å culty or the ways the alien waves behave. If you 
just want to play the game, that‚Äôs easily achieved too, though. 
Either way, the game‚Äôs only dependency is Pygame, which (if it 
isn‚Äôt already) can be installed from the terminal by typing:
  sudo apt-get install python-pygame
02 
Downloading the project
For Pivaders we‚Äôve used Git, a brilliant form of version 
control used to safely store the game Ô¨Å les and retain historical 
versions of your code. Git should already be installed on your Pi; if 
not, you can acquire it by typing:
  sudo apt-get install git 
As well as acting as caretaker for your code, Git enables you 
to clone copies of other people‚Äôs projects so you can work on 
them, or just use them. To clone Pivaders, go to your home 
folder in the terminal (cd ~), make a directory for the project 
(mkdir¬†pivaders), enter the directory (cd pivaders) and type:
  git pull https://github.com/russb78/pivaders.git 
When you‚Äôre learning to program in 
a new language or trying to master 
a new module, experimenting with a 
familiar and relatively simply project 
is a very useful exercise to help 
expand your understanding of the 
tools you‚Äôre using. Our Space Invaders 
clone is one such example that lends 
itself perfectly to Python and the 
Pygame module ‚Äì it‚Äôs a simple game 
with almost universally understood 
rules and logic. While the Invaders 
Resources
Raspbian: www.raspberrypi.org/
downloads
Python: www.python.org/doc
Pygame: www.pygame.org/docs

The Python Book  121
Create with Python
#!/usr/bin/env python2
import pygame, random
BLACK = (0, 0, 0)
BLUE = (0, 0, 255) 
WHITE = (255, 255, 255)
RED = (255, 0, 0)
ALIEN_SIZE = (30, 40)
ALIEN_SPACER = 20
BARRIER_ROW = 10
BARRIER_COLUMN = 4
BULLET_SIZE  = (5, 10)
MISSILE_SIZE = (5, 5)
BLOCK_SIZE = (10, 10)
RES = (800, 600)
class Player(pygame.sprite.Sprite):
  def __init__(self):
    pygame.sprite.Sprite.__init__(self) 
    self.size = (60, 55)
    self.rect = self.image.get_rect()
    self.rect.x = (RES[0] / 2) - (self.size[0] / 2)
    self.rect.y = 520
    self.travel = 7
    self.speed = 350
    self.time = pygame.time.get_ticks()
        
  def update(self):
    self.rect.x += GameState.vector * self.travel
    if self.rect.x < 0:
      self.rect.x = 0
    elif self.rect.x > RES[0] - self.size[0]:
      self.rect.x = RES[0] - self.size[0]
class Alien(pygame.sprite.Sprite):
  def __init__(self):
    pygame.sprite.Sprite.__init__(self) 
    self.size = (ALIEN_SIZE) 
    self.rect = self.image.get_rect()
    self.has_moved = [0, 0]
    self.vector = [1, 1]
    self.travel = [(ALIEN_SIZE[0] - 7), ALIEN_SPACER]
    self.speed = 700
    self.time = pygame.time.get_ticks()
  def update(self):
    if GameState.alien_time - self.time > self.speed:
      if self.has_moved[0] < 12: 
        self.rect.x += self.vector[0] * self.travel[0]
        self.has_moved[0] +=1
      else:
        if not self.has_moved[1]: 
          self.rect.y += self.vector[1] * self.travel[1]
        self.vector[0] *= -1 
        self.has_moved = [0, 0]
        self.speed -= 20
        if self.speed <= 100:
          self.speed = 100
      self.time = GameState.alien_time
class Ammo(pygame.sprite.Sprite):
  def __init__(self, color, (width, height)):
    pygame.sprite.Sprite.__init__(self) 
    self.image = pygame.Surface([width, height])
    self.image.fill(color)
    self.rect = self.image.get_rect() 
    self.speed = 0
    self.vector = 0
  def update(self):
    self.rect.y += self.vector * self.speed
    if self.rect.y < 0 or self.rect.y > RES[1]:
      self.kill()
class Block(pygame.sprite.Sprite):
  def __init__(self, color, (width, height)):
    pygame.sprite.Sprite.__init__(self) 
    self.image = pygame.Surface([width, height])
    self.image.fill(color)
    self.rect = self.image.get_rect()
class GameState:
  pass
class Game(object):
  def __init__(self):
    pygame.init()
    pygame.font.init()
    self.clock = pygame.time.Clock()
    self.game_font = pygame.font.Font(
    ‚Äòdata/Orbitracer.ttf‚Äô, 28)
    self.intro_font = pygame.font.Font(
    ‚Äòdata/Orbitracer.ttf‚Äô, 72)
    self.screen = pygame.display.set_mode([RES[0], RES[1]])
    self.time = pygame.time.get_ticks()
    self.refresh_rate = 20
    self.rounds_won = 0
    self.level_up = 50
    self.score = 0
    self.lives = 2
    self.player_group = pygame.sprite.Group()
    self.alien_group = pygame.sprite.Group()
    self.bullet_group = pygame.sprite.Group()
    self.missile_group = pygame.sprite.Group()
    self.barrier_group = pygame.sprite.Group()
    self.all_sprite_list = pygame.sprite.Group()
    self.intro_screen = pygame.image.load(
    ‚Äòdata/start_screen.jpg‚Äô).convert()
    self.background = pygame.image.load(
    ‚Äòdata/Space-Background.jpg‚Äô).convert()
    pygame.display.set_caption(‚ÄòPivaders - ESC to exit‚Äô)
    pygame.mouse.set_visible(False) 
    Player.image = pygame.image.load(
    ‚Äòdata/ship.png‚Äô).convert()
    Player.image.set_colorkey(BLACK)
    Alien.image = pygame.image.load(
    ‚Äòdata/Spaceship16.png‚Äô).convert()
    Alien.image.set_colorkey(WHITE)
    GameState.end_game = False
    GameState.start_screen = True
    GameState.vector = 0
    GameState.shoot_bullet = False
  def control(self):
    for event in pygame.event.get():
      if event.type == pygame.QUIT:
        GameState.start_screen = False
        GameState.end_game = True
      if event.type == pygame.KEYDOWN \
      and event.key == pygame.K_ESCAPE:
        if GameState.start_screen:
          GameState.start_screen = False
          GameState.end_game = True
          self.kill_all()
        else:
          GameState.start_screen = True
    self.keys = pygame.key.get_pressed()
    if self.keys[pygame.K_LEFT]:
      GameState.vector = -1
    elif self.keys[pygame.K_RIGHT]:
      GameState.vector = 1
    else:
      GameState.vector = 0
    if self.keys[pygame.K_SPACE]:
      if GameState.start_screen:
        GameState.start_screen = False
        self.lives = 2
        self.score = 0
        self.make_player()
        self.make_defenses()
        self.alien_wave(0)
      else:
        GameState.shoot_bullet = True
  def splash_screen(self):
    while GameState.start_screen:
      self.kill_all()
      self.screen.blit(self.intro_screen, [0, 0])
      self.screen.blit(self.intro_font.render(
      ‚ÄúPIVADERS‚Äù, 1, WHITE), (265, 120))
      self.screen.blit(self.game_font.render(
      ‚ÄúPRESS SPACE TO PLAY‚Äù, 1, WHITE), (274, 191))
Groups This 
long list of groups 
we‚Äôre creating are 
essentially sets.Each 
time we create one 
of these items, it‚Äôs 
added to the set so 
it can be tested for 
collisions and drawn 
with ease.
Clean clode 
Having all the most 
regularly used 
global variables 
clearly labelled 
here makes our 
code later on easier 
to read. Also, if we 
want to change the 
size of something, 
we only need to do 
it here and it will 
work everywhere.
Control Taking 
care of keyboard 
input is the control 
method. It checks 
for key events and 
acts accordingly 
depending whether 
we‚Äôre on the start 
screen or playing  
the game.
Rain bullets 
The Ammo class is 
short and sweet. 
We only need a few 
initialising attributes 
and the update 
method checks if it‚Äôs 
still on the screen. If 
not, it‚Äôs destroyed.
Get  
   the code:
bit.ly/ 
11k5f2x

122  The Python Book
Create with Python 
04 
Creating your own clone
Once you‚Äôve racked up a good 
high score (anything over 2,000 points is 
respectable) and got to know our simple 
implementation, you‚Äôll get more from 
following along with and exploring the 
code and our brief explanations of what‚Äôs 
going on. For those who want to make 
their own project, create a new project 
folder and use either IDLE or Leafpad (or 
perhaps install Geany) to create and save 
a .py Ô¨Åle of your own. 
05 
Global variables & tuples
Once 
we‚Äôve 
imported 
the 
modules we need for the project, 
there‚Äôs quite a long list of variables in 
block capitals. The capitals denote that 
these variables are constants (or global 
variables). These are important numbers 
that never change ‚Äì they represent things 
referred to regularly in the code, like 
colours, block sizes and resolution. You‚Äôll 
also notice that colours and sizes hold 
multiple numbers in braces ‚Äì these are 
tuples. You could use square brackets (to 
make them lists), but we use tuples here 
since they‚Äôre immutable, which means 
06 
Classes ‚Äì part 1
A class is essentially a blueprint 
for an object you‚Äôd like to make. In the 
case of our player, it contains all the 
required info, from which you can make 
multiple copies (we create a player 
instance in the make_player() method 
halfway through the project). The great 
thing about the classes in Pivaders is 
that they inherit lots of capabilities and 
shortcuts from Pygame‚Äôs Sprite class, 
as denoted by the pygame.sprite.Sprite 
found within the braces of the Ô¨Årst line 
of the class. You can read the docs to 
learn more about the Sprite class via
www.pygame.org/docs/ref/sprite.html. 
07 
Classes ‚Äì part 2
In Pivader‚Äôs classes, besides 
creating the required attributes ‚Äì these 
are simply variables in classes ‚Äì for the 
object (be it a player, an alien, some 
ammo or a block), you‚Äôll also notice all 
the classes have an update() method 
apart from the Block class (a method is 
a function within a class). The update() 
method is called in every loop through 
the main game (we‚Äôve called ours  
main_loop()) and simply asks the 
iteration of the class we‚Äôve created to 
move. In the case of a bullet from the 
Ammo class, we‚Äôre asking it to move 
down the screen. If it goes off either the 
top or bottom of the screen, we destroy 
it (since we don‚Äôt need it any more). 
08 
Ammo
What‚Äôs most interesting about 
classes, though, is that you can use one 
class to create lots of different things. 
09 
The game 
Our Ô¨Ånal class is called Game. This is where all the main 
functionality of the game itself comes in, but remember, so far 
this is still just a list of ingredients ‚Äì nothing can actually happen 
until a ‚ÄòGame‚Äô object is created (right at the bottom of the code). 
The Game class is where the central mass of the game resides, 
so we initialise Pygame, set the imagery for our protagonist 
and extraterrestrial antagonist and create some GameState 
attributes that we use to control key aspects of external classes, 
like changing the player‚Äôs vector (direction) and deciding if we 
need to return to the start screen, among other things. 
10 
The main loop
There are a lot of methods (class functions) in the Game 
class, and each is designed to control a particular aspect of 
either setting up the game or the gameplay itself. The actual logic 
that dictates what happens within any one round of the game is 
actually contained in the main_loop() method right at the bottom 
of the pivaders.py script and is the key to unlocking exactly what 
variables and functions you need for your game. Starting at 
the top of main_loop() and working line-by-line down to its last 
line, you can see exactly what‚Äôs being evaluated 20 times every 
second when you‚Äôre playing the game. 
12 
Main loop key logic ‚Äì part 2
Once collisions have been calculated, we need to see if 
the game is still meant to continue. We do so with is_dead() and 
defenses_breached() ‚Äì if either of these methods returns true, 
we know we need to return to the start screen. On the other 
hand, we also need to check to see if we‚Äôve killed all the aliens, 
from within win_round(). Assuming we‚Äôre not dead, but the 
aliens are, we know we can call the next_round() method, which 
creates a fresh batch of aliens and increases their speed around 
the screen. Finally, we refresh the screen so everything that‚Äôs 
been moved, shot or killed can be updated or removed from the 
screen. Remember, the main loop happens 20 times a second ‚Äì 
so the fact we don‚Äôt call for the screen to update right at the end 
of the loop is of no consequence. 
11 
Main loop key logic ‚Äì part 1
Firstly the game checks that the end_game attribute is 
false ‚Äì if it‚Äôs true, the entire loop in main_loop() is skipped and 
we go straight to pygame.quit(), exiting the game. This Ô¨Çag is set 
to true only if the player closes the game window or presses the 
Esc key when on the start_screen. Assuming end_game and 
start_screen are false, the main loop can start proper, with the 
control() method, which checks to see if the location of the player 
needs to change. Next we attempt to make an enemy missile and 
we use the random module to limit the number of missiles that 
can be created. Next we call the update() method for each and 
every actor on the screen using a simple for loop. This makes 
sure everyone‚Äôs up to date and moved before we check collisions 
in calc_collisions(). 
03 
Testing Pivaders
With Pygame installed and the 
project cloned to your machine (you can 
also Ô¨Ånd the .zip on FileSilo ‚Äì simply 
unpack it and copy it to your home 
directory to use it), you can take it for a 
quick test drive to make sure everything‚Äôs 
set up properly. All you need to do is type 
python pivaders.py from within the 
pivaders directory in the terminal to get 
started. You can start the game with the 
space bar, shoot with the same button 
and simply use the left and right arrows 
on your keyboard to move your ship left 
and right. 
you can‚Äôt reassign individual items within 
them. Perfect for constants, which aren‚Äôt 
designed to change anyway. 
You could, for example, have a pet class. From that class you 
could create a cat (that meows) and a dog (that barks). They‚Äôre 
different in many ways, but they‚Äôre both furry and have four 
legs, so can be created from the same parent class. We‚Äôve 
done exactly that with our Ammo class, using it to create both 
the player bullets and the alien missiles. They‚Äôre different 
colours and they shoot in opposite directions, but they‚Äôre 
fundamentally one and the same. This saves us creating extra 
unnecessary code and ensures consistent behaviour between 
objects we create.
We used widely available open source 
art and fonts to make the game

The Python Book  123
Create with Python
Dead or alive Probably two of the most 
important questions are answered here ‚Äì is 
the player dead or did you win the round?
Start the game The very last thing 
we do is create a Game object and call the 
main loop. Besides our constants, this is 
the only code that sits outside a class.
      pygame.display.flip()
      self.control()
  def make_player(self):
    self.player = Player()
    self.player_group.add(self.player)
    self.all_sprite_list.add(self.player)
  def refresh_screen(self):
    self.all_sprite_list.draw(self.screen) 
    self.refresh_scores()
    pygame.display.flip() 
    self.screen.blit(self.background, [0, 0])
    self.clock.tick(self.refresh_rate) 
  def refresh_scores(self):
    self.screen.blit(self.game_font.render(
    ‚ÄúSCORE ‚Äú + str(self.score), 1, WHITE), (10, 8))
    self.screen.blit(self.game_font.render(
    ‚ÄúLIVES ‚Äú + str(self.lives + 1), 1, RED), (355, 575))
  def alien_wave(self, speed):
    for column in range(BARRIER_COLUMN):
      for row in range(BARRIER_ROW):
        alien = Alien()
        alien.rect.y = 65 + (column * (
        ALIEN_SIZE[1] + ALIEN_SPACER))
        alien.rect.x = ALIEN_SPACER + (
        row * (ALIEN_SIZE[0] + ALIEN_SPACER))
        self.alien_group.add(alien) 
        self.all_sprite_list.add(alien)
        alien.speed -= speed
  def make_bullet(self):
    if GameState.game_time - self.player.time > self.player.speed:
      bullet = Ammo(BLUE, BULLET_SIZE)
      bullet.vector = -1
      bullet.speed = 26
      bullet.rect.x = self.player.rect.x + 28
      bullet.rect.y = self.player.rect.y
      self.bullet_group.add(bullet)
      self.all_sprite_list.add(bullet)
      self.player.time = GameState.game_time
    GameState.shoot_bullet = False
  def make_missile(self):
    if len(self.alien_group):
      shoot = random.random()
      if shoot <= 0.05:
        shooter = random.choice([
        alien for alien in self.alien_group])
        missile = Ammo(RED, MISSILE_SIZE)
        missile.vector = 1
        missile.rect.x = shooter.rect.x + 15
        missile.rect.y = shooter.rect.y + 40
        missile.speed = 10
        self.missile_group.add(missile)
        self.all_sprite_list.add(missile)
  def make_barrier(self, columns, rows, spacer):
    for column in range(columns):
      for row in range(rows):
        barrier = Block(WHITE, (BLOCK_SIZE))
        barrier.rect.x = 55 + (200 * spacer) + (row * 10)
        barrier.rect.y = 450 + (column * 10)
        self.barrier_group.add(barrier)
        self.all_sprite_list.add(barrier)
  def make_defenses(self):
    for spacing, spacing in enumerate(xrange(4)):
      self.make_barrier(3, 9, spacing)
  def kill_all(self):
    for items in [self.bullet_group, self.player_group,
    self.alien_group, self.missile_group, self.barrier_group]:
      for i in items:
        i.kill()
  def is_dead(self):
    if self.lives < 0:
      self.screen.blit(self.game_font.render(
      ‚ÄúThe war is lost! You scored: ‚Äú + str(
      self.score), 1, RED), (250, 15))
      self.rounds_won = 0
      self.refresh_screen()
      pygame.time.delay(3000)
      return True
  def win_round(self):
    if len(self.alien_group) < 1:
      self.rounds_won += 1
      self.screen.blit(self.game_font.render(
      ‚ÄúYou won round ‚Äú + str(self.rounds_won) + 
      ‚Äú  but the battle rages on‚Äù, 1, RED), (200, 15))
      self.refresh_screen()
      pygame.time.delay(3000)
      return True
  def defenses_breached(self):
    for alien in self.alien_group:
      if alien.rect.y > 410:
        self.screen.blit(self.game_font.render(
        ‚ÄúThe aliens have breached Earth defenses!‚Äù, 
        1, RED), (180, 15))
        self.refresh_screen()
        pygame.time.delay(3000)
        return True
  def calc_collisions(self):
    pygame.sprite.groupcollide(
    self.missile_group, self.barrier_group, True, True)
    pygame.sprite.groupcollide(
    self.bullet_group, self.barrier_group, True, True)
    if pygame.sprite.groupcollide(
    self.bullet_group, self.alien_group, True, True):
      self.score += 10
    if pygame.sprite.groupcollide(
    self.player_group, self.missile_group, False, True):
      self.lives -= 1
  def next_round(self):
    for actor in [self.missile_group, 
    self.barrier_group, self.bullet_group]:
      for i in actor:
        i.kill()
    self.alien_wave(self.level_up)
    self.make_defenses()
    self.level_up += 50
  def main_loop(self):
    while not GameState.end_game:
      while not GameState.start_screen:
        GameState.game_time = pygame.time.get_ticks()
        GameState.alien_time = pygame.time.get_ticks()
        self.control()
        self.make_missile()
        for actor in [self.player_group, self.bullet_group,
        self.alien_group, self.missile_group]:
          for i in actor:
            i.update()
        if GameState.shoot_bullet:
          self.make_bullet()
        self.calc_collisions()
        if self.is_dead() or self.defenses_breached():
          GameState.start_screen = True
        if self.win_round():
          self.next_round()
        self.refresh_screen()
      self.splash_screen()
    pygame.quit()
if __name__ == ‚Äò__main__‚Äô:
  pv = Game()
  pv.main_loop()
Refreshing 
the screen You 
need to carefully 
consider the way in 
which you update 
the screen. Blitting 
the background 
between actor 
movements is vital 
for clean animation.
Main loop This 
is the business end 
of our application. 
This loop executes 
20 times a second. It 
needs to be logical 
and easy for another 
coder to understand.
Guns ‚Äôn‚Äô ammo 
Bullets and missiles 
use the same parent 
class. We change a 
few key attributes 
originally initialised  
to create the 
behaviour we need; 
eg the vector for each 
is opposite. 
Get  
   the code:
bit.ly/ 
11k5f2x
 A class is essentially a blueprint 
 

124  The Python Book
Create with Python 
After writing a Space Invaders clone in just 300 lines of Python, 
now we expand it to include animation and sound
Part two: Add animation and 
sound to Pivaders
that goal would likely have been overshot at least twofold. 
Pygame‚Äôs ability to group, manage and detect collisions 
thanks to the Sprite class really made a great difference 
to our project, not just in terms of length but in simplicity. 
If you missed the Ô¨Å rst part of the project, you can Ô¨Å nd the 
v0.1 code listing on GitHub via git.io/cBVTBg, while you can 
Ô¨Å nd version v0.2, including all the images, music and sound 
effects we used, over at git.io/8QsK-w. 
Even working within the clearly deÔ¨Å ned framework 
Pygame offers, there are still a thousand ways we could 
have approached adding animation and sound. We could 
have created any one of a dozen classes to create and 
manage containers of individual images, or read in a sprite 
sheet (a single image full of smaller, separate images) 
which we could then draw (or blit) to the screen. For the 
sake of simplicity and performance, we integrated a few 
animation methods into our Game class and opted to use a 
sprite sheet. Not only does it make it very easy to draw to the 
screen, but it also keeps the asset count under control and 
keeps performance levels up, which is especially important 
for the Raspberry Pi. 
01 
Setting up dependencies
As 
we 
recommended 
with 
the last tutorial, you‚Äôll get much more 
from the exercise if you download 
the code (git.io/8QsK-w) and use it 
for reference as you create your own 
animations and sound for your Pygame 
projects. Regardless of whether you 
just want to simply preview and play or 
walk-through the code to get a better 
understanding of basic game creation, 
you‚Äôre still going to need to satisfy 
some basic dependencies. The two key 
requirements here are Pygame and Git, 
both of which are installed by default 
on up-to-date Raspbian installations. 
If you‚Äôre unsure if you have them, 
though, type the following at the 
command line:
  sudo apt-get install python-
pygame git
We had great fun creating our basic 
Space 
Invaders 
clone, 
Pivaders, 
for the previous tutorial. One of the 
key challenges with the project was 
keeping it to a manageable size ‚Äì just 
300 lines of Python. Without the use 
of Pygame‚Äôs strong set of features, 
Resources
Raspbian: www.raspberrypi.org
                                        /downloads
Python: www.python.org/doc
Pygame: www.pygame.org/docs
Art assets: opengameart.org 

The Python Book  125
Create with Python
class Game(object):
    def __init__(self):
        pygame.init()
        pygame.font.init()
        self.clock = pygame.time.Clock()
        self.game_font = pygame.font.Font(
        ‚Äòdata/Orbitracer.ttf‚Äô, 28)
        self.intro_font = pygame.font.Font(
        ‚Äòdata/Orbitracer.ttf‚Äô, 72)
        self.screen = pygame.display.set_mode([RES[0], RES[1]])
        self.time = pygame.time.get_ticks()
        self.refresh_rate = 20; self.rounds_won = 0
        self.level_up = 50; self.score = 0
        self.lives = 2
        self.player_group = pygame.sprite.Group()
        self.alien_group = pygame.sprite.Group()
        self.bullet_group = pygame.sprite.Group()
        self.missile_group = pygame.sprite.Group()
        self.barrier_group = pygame.sprite.Group()
        self.all_sprite_list = pygame.sprite.Group()
        self.intro_screen = pygame.image.load(
        ‚Äòdata/graphics/start_screen.jpg‚Äô).convert()
        self.background = pygame.image.load(
        ‚Äòdata/graphics/Space-Background.jpg‚Äô).convert()
        pygame.display.set_caption(‚ÄòPivaders - ESC to exit‚Äô)
        pygame.mouse.set_visible(False) 
        Alien.image = pygame.image.load(
        ‚Äòdata/graphics/Spaceship16.png‚Äô).convert()
        Alien.image.set_colorkey(WHITE)
        self.ani_pos = 5 # 11 images of ship 
        self.ship_sheet = pygame.image.load(  
        ‚Äòdata/graphics/ship_sheet_final.png‚Äô).convert_alpha()
        Player.image = self.ship_sheet.subsurface(
 
 
 
self.ani_pos*64, 0, 64, 61)
        self.animate_right = False
        self.animate_left = False
        self.explosion_sheet = pygame.image.load(
        ‚Äòdata/graphics/explosion_new1.png‚Äô).convert_alpha()
        self.explosion_image = self.explosion_sheet.subsurface(0, 0, 
 
79, 96)
        self.alien_explosion_sheet = pygame.image.load(
        ‚Äòdata/graphics/alien_explosion.png‚Äô)
        self.alien_explode_graphics = self.alien_explosion_sheet. 
subsurface(0, 0, 94, 96)
        self.explode = False
        self.explode_pos = 0; self.alien_explode = False
        self.alien_explode_pos = 0
        pygame.mixer.music.load(‚Äòdata/sound/10_Arpanauts.ogg‚Äô)
        pygame.mixer.music.play(-1)
        pygame.mixer.music.set_volume(0.7)
        self.bullet_fx = pygame.mixer.Sound(
        ‚Äòdata/sound/medetix__pc-bitcrushed-lazer-beam.ogg‚Äô)
        self.explosion_fx = pygame.mixer.Sound(
        ‚Äòdata/sound/timgormly__8-bit-explosion.ogg‚Äô)
        self.explosion_fx.set_volume(0.5)
        self.explodey_alien = []
        GameState.end_game = False
        GameState.start_screen = True
        GameState.vector = 0
        GameState.shoot_bullet = False
    def control(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                GameState.start_screen = False
                GameState.end_game = True
            if event.type == pygame.KEYDOWN \
            and event.key == pygame.K_ESCAPE:
                if GameState.start_screen:
                    GameState.start_screen = False
                    GameState.end_game = True
                    self.kill_all()
                else:
                    GameState.start_screen = True
        self.keys = pygame.key.get_pressed()
        if self.keys[pygame.K_LEFT]:
            GameState.vector = -1
            self.animate_left = True
            self.animate_right = False
        elif self.keys[pygame.K_RIGHT]:
            GameState.vector = 1
            self.animate_right = True
            self.animate_left = False
        else:
            GameState.vector = 0
            self.animate_right = False
            self.animate_left = False
        if self.keys[pygame.K_SPACE]:
            if GameState.start_screen:
                GameState.start_screen = False
                self.lives = 2
                self.score = 0
                self.make_player()
                self.make_defenses()
                self.alien_wave(0)
            else:
                GameState.shoot_bullet = True
                self.bullet_fx.play()
    def animate_player(self):
        if self.animate_right:
            if self.ani_pos < 10:
                Player.image = self.ship_sheet.subsurface(
 
 
 
self.ani_pos*64, 0, 64, 61)
                self.ani_pos += 1
        else:
            if self.ani_pos > 5:
                self.ani_pos -= 1
                Player.image = self.ship_sheet.subsurface(
 
 
 
self.ani_pos*64, 0, 64, 61)
        if self.animate_left:
            if self.ani_pos > 0:
                self.ani_pos -= 1
                Player.image = self.ship_sheet.subsurface(
 
 
 
self.ani_pos*64, 0, 64, 61)
        else:
            if self.ani_pos < 5:
                Player.image = self.ship_sheet.subsurface(
 
 
 
self.ani_pos*64, 0, 64, 61)
                self.ani_pos += 1
    def player_explosion(self):
        if self.explode:
            if self.explode_pos < 8:
                self.explosion_image = self.explosion_sheet. 
subsurface(0, self.explode_pos*96, 79, 96)
                self.explode_pos += 1
                self.screen.blit(self.explosion_image, [self.player. 
rect.x -10, self.player.rect.y - 30])
            else:
                self.explode = False
                self.explode_pos = 0
    def alien_explosion(self):
        if self.alien_explode:
            if self.alien_explode_pos < 9:
                self.alien_explode_graphics = self.alien_explosion_ 
sheet.subsurface(0, self.alien_explode_pos*96, 94, 96)
                self.alien_explode_pos += 1
                self.screen.blit(self.alien_explode_graphics, 
[int(self. explodey_alien[0]) - 50 , int(self.explodey_alien[1]) - 60])
            else:
                self.alien_explode = False
                self.alien_explode_pos = 0
                self.explodey_alien = []
    def splash_screen(self):
        while GameState.start_screen:
            self.kill_all()
            self.screen.blit(self.intro_screen, [0, 0])
            self.screen.blit(self.intro_font.render(
            ‚ÄúPIVADERS‚Äù, 1, WHITE), (265, 120))
            self.screen.blit(self.game_font.render(
            ‚ÄúPRESS SPACE TO PLAY‚Äù, 1, WHITE), (274, 191))
            pygame.display.flip()
            self.control()
            self.clock.tick(self.refresh_rate / 2) 
    def make_player(self):
        self.player = Player()
Pivaders.py listing from line 86 (continued on next page)
ship_sheet 
We set the player 
image to be equal to 
one small segment 
of the sprite sheet by 
using the ‚Äòani_pos‚Äô 
variable. Change the 
variable to change 
the picture
Set flags We‚Äôve 
added ‚Äòanimate_left‚Äô 
and ‚Äòanimate_right‚Äô 
Boolean Ô¨Ç ags to 
the control method. 
When they‚Äôre true, 
the actual animation 
code is called via a 
separate method 
fx.play()
Having already 
loaded the sound 
effect we want when 
we shoot, we now 
just need to call it 
when we press the 
space bar
Get 
   the code:
bit.ly/
1xPvY1F

126  The Python Book
Create with Python 
Above The Freesound site is a good place to Ô¨Ånd free and open sound effects for projects
04 
Animation & sound
Compared with the game from 
last month‚Äôs tutorial, you‚Äôll see it‚Äôs now 
a much more dynamic project. The 
protagonist ship now leans into the turns 
as you change direction and corrects 
itself when you either press the opposite 
direction or lift your Ô¨Ånger off the button. 
When you shoot an alien ship, it explodes 
05 
Finding images to animate
Before we can program anything, 
it‚Äôs wise to have assets set up in a way we 
can use them. As mentioned, we‚Äôve opted 
to use sprite sheets; these can be found 
online or created with GIMP with a little 
practice. Essentially they‚Äôre a mosaic 
made up of individual ‚Äòframes‚Äô of equally 
sized and spaced images representing 
each frame. Find ready-made examples 
at opengameart.org, as used here.
06 
Tweaking assets
While many of the assets on 
sites like opengameart.org can be used 
as is, you may want to import them into 
an image-editing application like GIMP 
to conÔ¨Ågure them to suit your needs ‚Äì as 
we did with our ship sheet asset to help 
us keep the code simple. We started with 
the central ship sprite and centred it into a 
new window. We set the size and width of 
the frame and then copy-pasted the other 
frames either side of it. We ended up with 
11 frames of exactly the same size and 
width in a single document. Pixel-perfect 
precision on size and width is key, so we 
can just multiply it to Ô¨Ånd the next frame. 
07 
Loading the sprite sheet
Since we‚Äôre inheriting from the 
Sprite class to create our Player class, we 
can easily alter how the player looks on 
screen by changing Player.image. First, 
we need to load our ship sprite sheet with 
pygame.image.load(). Since we made our 
sheet with a transparent background, 
we can append .convert_alpha() to the 
08 
Animation Ô¨Çags
Down the list in the initialising code for the Game class, 
we set two Ô¨Çags for player animation: self.animate_left and 
self.animate_right. In the Control method of our Game class, 
we use these to ‚ÄòÔ¨Çag‚Äô when we want animations to work using 
Boolean values. It allows us to ‚Äòautomatically‚Äô animate the 
player sprite back to its resting state (otherwise the ship will 
continue to look as if it‚Äôs Ô¨Çying left when it has stopped). 
end of the line so the ship frames render correctly (without any 
background). We then use subsurface to set the initial Player.
image to the middle ship sprite on the sheet. This is set by self.
ani_pos, which has an initial value of 5. Changing this value will 
alter the ship image drawn to the screen: ‚Äò0‚Äô would draw it leaning 
fully left, ‚Äò11‚Äô fully to the right. 
09 
The animation method 
These Ô¨Çags pop up again in the core animation code for 
the player: animate_player() within the Game class. Here we 
use nested if statements to control the animation and physically 
set the player image accordingly. Essentially it states that if the 
animate_right Ô¨Çag is True and if the current animation position 
is different to what we want, we incrementally increase the 
ani_pos variable and set the player‚Äôs image accordingly. The Else 
statement then animates the ship sprite back to its resting state 
and the same logic is then applied in the opposite direction. 
10 
Animating explosions
The player_explosion() and alien_explosion() methods 
that come after the player animation block in the Game class are 
similar but simpler executions of essentially the same thing. As 
we only need to run through the same predeÔ¨Åned set of frames 
(this time vertically), we only need to see if the self.explode and 
self.alien_explode Ô¨Çags are True before we increment the 
variables that change the image displayed. As the sprite sheet is 
vertical, the variables alien_explode_pos and explosion_image 
are set to a different part of subsurface than before. 
12 
Using sound effects
Loading and using sounds is similar to how we do so for 
images in Pygame. First we load the sound effect using a simple 
assignment. For the laser beam, the initialisation looks like this:
  self.bullet_fx = pygame.mixer.Sound(
    ‚Äòdata/sound/medetix__pc-bitcrushed-lazer-beam.ogg‚Äô)
Then we simply trigger the sound effect at the appropriate time. 
In the case of the laser, we want it to play whenever we press the 
space bar to shoot, so we place it in the Game class‚Äôs Control 
method, straight after we raise the shoot_bullet Ô¨Çag. 
If you‚Äôre struggling to Ô¨Ånd free and open sound effects, we 
recommend www.freesound.org. 
11 
Adding music to your project
Pygame makes it easy to add a musical score to a project. 
Just obtain a suitable piece of music in your preferred format (we 
found ours via freemusicarchive.org) and load it using the Mixer 
Pygame class. As it‚Äôs already been initialised via pygame.init(), 
we can go ahead and load the music with this code:
  pygame.mixer.music.load(‚Äòdata/sound/10_Arpanauts.ogg‚Äô)
  pygame.mixer.music.play(-1)
  pygame.mixer.music.set_volume(0.7)
The music.play(-1) requests that the music should start with the 
app and continue to loop until it quits. If we replaced -1 with 5, the 
music would loop Ô¨Åve times before ending. Learn more about the 
Mixer class via www.pygame.org/docs/ref/mixer.html.
03 
Navigating the project
The project is laid out quite 
simply across a few subfolders. Within 
pivaders sits a licence, readme and a 
second pivaders folder. This contains 
the main game Ô¨Åle, pivaders.py, which 
launches the application. Within the 
data folder you‚Äôll Ô¨Ånd subfolders for both 
graphics and sound assets, as well as the 
font we‚Äôve used for the title screen and 
scores. To take pivaders for a test-drive, 
simply enter the pivaders subdirectory  
(cd pivaders/pivaders) and type:
  python pivaders.py
Use the arrow keys to steer left and right 
and the space bar to shoot. You can quit 
to the main screen with the Esc key and 
press it again to exit the game completely. 
02 
Downloading pivaders
Git is a superb version control 
solution that helps programmers safely 
store their code and associated Ô¨Åles. 
Not only does it help you retain a full 
history of changes, it means you can 
‚Äòclone‚Äô entire projects to use and work 
on from places like github.com. To clone 
the version of the project we created for 
this tutorial, go to your home folder from 
the command line (cd ~) and type:
  git pull  https://github.com/
russb78/pivaders.git 
This will create a folder called 
pivaders ‚Äì go inside (cd pivaders) and 
take a look around. 
with several frames of animation and 
should you take Ô¨Åre, a smaller explosion 
occurs on your ship. Music, lasers and 
explosion sound effects also accompany 
the animations as they happen.

The Python Book  127
Create with Python
        self.player_group.add(self.player)
        self.all_sprite_list.add(self.player)
    def refresh_screen(self):
        self.all_sprite_list.draw(self.screen) 
        self.animate_player()
        self.player_explosion()
        self.alien_explosion()
        self.refresh_scores()
        pygame.display.flip() 
        self.screen.blit(self.background, [0, 0])
        self.clock.tick(self.refresh_rate) 
    def refresh_scores(self):
        self.screen.blit(self.game_font.render(
        ‚ÄúSCORE ‚Äú + str(self.score), 1, WHITE), (10, 8))
        self.screen.blit(self.game_font.render(
        ‚ÄúLIVES ‚Äú + str(self.lives + 1), 1, RED), (355, 575))
    def alien_wave(self, speed):
        for column in range(BARRIER_COLUMN):
            for row in range(BARRIER_ROW):
                alien = Alien()
                alien.rect.y = 65 + (column * (
                ALIEN_SIZE[1] + ALIEN_SPACER))
                alien.rect.x = ALIEN_SPACER + (
                row * (ALIEN_SIZE[0] + ALIEN_SPACER))
                self.alien_group.add(alien) 
                self.all_sprite_list.add(alien)
                alien.speed -= speed
    def make_bullet(self):
        if GameState.game_time - self.player.time > self.player.speed:
            bullet = Ammo(BLUE, BULLET_SIZE)
            bullet.vector = -1
            bullet.speed = 26
            bullet.rect.x = self.player.rect.x + 28
            bullet.rect.y = self.player.rect.y
            self.bullet_group.add(bullet)
            self.all_sprite_list.add(bullet)
            self.player.time = GameState.game_time
        GameState.shoot_bullet = False
    def make_missile(self):
        if len(self.alien_group):
            shoot = random.random()
            if shoot <= 0.05:
                shooter = random.choice([
                alien for alien in self.alien_group])
                missile = Ammo(RED, MISSILE_SIZE)
                missile.vector = 1
                missile.rect.x = shooter.rect.x + 15
                missile.rect.y = shooter.rect.y + 40
                missile.speed = 10
                self.missile_group.add(missile)
                self.all_sprite_list.add(missile)
    def make_barrier(self, columns, rows, spacer):
        for column in range(columns):
            for row in range(rows):
                barrier = Block(WHITE, (BLOCK_SIZE))
                barrier.rect.x = 55 + (200 * spacer) + (row * 10)
                barrier.rect.y = 450 + (column * 10)
                self.barrier_group.add(barrier)
                self.all_sprite_list.add(barrier)
    def make_defenses(self):
        for spacing, spacing in enumerate(xrange(4)):
            self.make_barrier(3, 9, spacing)
    def kill_all(self):
        for items in [self.bullet_group, self.player_group,
        self.alien_group, self.missile_group, self.barrier_group]:
            for i in items:
                i.kill()
    def is_dead(self):
        if self.lives < 0:
            self.screen.blit(self.game_font.render(
            ‚ÄúThe war is lost! You scored: ‚Äú + str(
            self.score), 1, RED), (250, 15))
            self.rounds_won = 0
            self.refresh_screen()
            self.level_up = 50
            self.explode = False
            self.alien_explode = False
            pygame.time.delay(3000)
            return True
    def defenses_breached(self):
        for alien in self.alien_group:
            if alien.rect.y > 410:
                self.screen.blit(self.game_font.render(
                ‚ÄúThe aliens have breached Earth defenses!‚Äù, 
                1, RED), (180, 15))
                self.refresh_screen()
                self.level_up = 50
                self.explode = False
                self.alien_explode = False
                pygame.time.delay(3000)
                return True
    def win_round(self):
        if len(self.alien_group) < 1:
            self.rounds_won += 1
            self.screen.blit(self.game_font.render(
            ‚ÄúYou won round ‚Äú + str(self.rounds_won) + 
            ‚Äú  but the battle rages on‚Äù, 1, RED), (200, 15))
            self.refresh_screen()
            pygame.time.delay(3000)
            return True
    def next_round(self):
        self.explode = False
        self.alien_explode = False
        for actor in [self.missile_group, 
        self.barrier_group, self.bullet_group]:
            for i in actor:
                i.kill()
        self.alien_wave(self.level_up)
        self.make_defenses()
        self.level_up += 50
    def calc_collisions(self):
        pygame.sprite.groupcollide(
        self.missile_group, self.barrier_group, True, True)
        pygame.sprite.groupcollide(
        self.bullet_group, self.barrier_group, True, True)
        
        for z in pygame.sprite.groupcollide(
        self.bullet_group, self.alien_group, True, True):
            self.alien_explode = True
            self.explodey_alien.append(z.rect.x)
            self.explodey_alien.append(z.rect.y)
            self.score += 10
            self.explosion_fx.play()
        if pygame.sprite.groupcollide(
        self.player_group, self.missile_group, False, True):
            self.lives -= 1
            self.explode = True
            self.explosion_fx.play()
    def main_loop(self):
        while not GameState.end_game:
            while not GameState.start_screen:
                GameState.game_time = pygame.time.get_ticks()
                GameState.alien_time = pygame.time.get_ticks()
                self.control()
                self.make_missile()
                self.calc_collisions()
                self.refresh_screen()
                if self.is_dead() or self.defenses_breached():
                    GameState.start_screen = True
                for actor in [self.player_group, self.bullet_group,
                self.alien_group, self.missile_group]:
                    for i in actor:
                        i.update()
                if GameState.shoot_bullet:
                    self.make_bullet()
                if self.win_round():
                    self.next_round()
            self.splash_screen()
        pygame.quit()
if __name__ == ‚Äò__main__‚Äô:
    pv = Game()
    pv.main_loop()
Get  
   the code:
bit.ly/ 
1xPvY1F

128  The Python Book
Create with Python 
Bridge the gap between books and videogames by creating an 
interactive novel or choose-your-own-adventure with Python 
and Pygame
Resources
Python 2: 
www.python.org/
Pygame: 
pygame.org/download.shtml
IDLE Python IDE
Game assets
Code from FileSilo (optional)
Make a visual novel  
game with Python
Most people look for a compelling story in 
modern videogames, and those that don‚Äôt 
have one are appearing less and less. A great 
way to tell a pure story is through the genre 
of visual novels, and you can make one fairly 
simply in Python. These interactive novels are 
an extremely popular form of entertainment in 
Japan, and usually work by having the player 
click through a story and make decisions as they 
go along in order to experience different plot 
points and endings.
QChange scenes to add more depth to the story, and allow the game to have decisions and routes
In Python, this is a relatively simple project 
to create, but with the addition of the Pygame 
module we can make it easier still, and even 
more expandable for the future. Pygame adds 
better support for positioning the images and 
text, creating display windows and using mouse 
and keyboard inputs, thereby simplifying the 
coding process.
We‚Äôll be coding this in standard Python 2, so 
make sure to run it in IDLE 2 and not IDLE 3 while 
you are writing, testing and coding.

The Python Book  129
Create with Python
02 
Get the Pygame code
Next we need to download the code 
for Pygame direct from the source. Still in the 
terminal, you can do this by typing in:
$ hg clone https://bitbucket.org/pygame/
pygame
Which will download it to the folder ‚Äòpygame‚Äô. 
Move to that using CD pygame in the terminal so 
we can continue building it.
03 
Build the Pygame module
To install it, we need to do it in two 
steps. First we need to prepare the code to 
install using the terminal with:
$ python setup.py build
Once that‚Äôs Ô¨Ånished you can then actually install 
it with:
$ sudo python setup.py install
This won‚Äôt take too long.
04 
Install in other ways
If the above doesn‚Äôt work (or is a bit 
daunting) you can check the website for binary 
and executable Ô¨Åles that will work on other 
operating systems and Linux distros. Head to 
http://pygame.org/download.shtml to get the 
Ô¨Åles you need for your speciÔ¨Åc system, including 
Windows and OS X. The rest of the tutorial will 
work in any OS.
01 
Get Pygame dependencies
The best way to install Pygame for your 
system is to compile it. To do this you need to 
Ô¨Årst install the right dependencies. Open up 
the terminal and install the following packages, 
which in Ubuntu looks like:
$ sudo apt-get install mercurial 
python-dev python-numpy libav-tools 
libsdl-image1.2-dev libsdl-mixer1.2-
dev libsdl-ttf2.0-dev libsmpeg-
dev libsdl1.2-dev  libportmidi-dev 
libswscale-dev libavformat-dev 
libavcodec-dev
05 
Get the visual novel Ô¨Åles
We‚Äôve uploaded the code to FileSilo, 
and here we‚Äôre going to walk you through what 
we‚Äôve done to make it work. Download the Ô¨Åles 
for the visual novel and unzip them. The two 
Ô¨Åles we care about for the moment are the 
visualnovel.py and script.py python Ô¨Åles ‚Äì this 
is where all the important code is.
06 
Understand the script Ô¨Åle
For the moment the script Ô¨Åle is small 
and literally just holds the script for the game. 
It‚Äôs made up of events for the visual novel to 
move between, line by line, by splitting it up into 
scenes. This includes the location of each line, the 
character, the actual line itself and information on 
how the game Ô¨Çows. These are matrices with the 
information in, and are completely customisable.

130  The Python Book
Create with Python 
09 
Add variables and assets
We add a mixture of information we 
need to run the novel. We deÔ¨Åne the size of the 
display screen to use (1000 pixels wide and 563 
high), along with some RGB colours for the code 
to use. We‚Äôre also telling Pygame what font to 
use and how large for certain sections and also 
loading images for the game.
10 
Start the game
Create a display for the game. Pygame 
works by constantly updating the display with 
new information. To show how this works, the 
menu function adds elements to the display 
(which we‚Äôve titled screen), such as Ô¨Ålling it 
with colour, adding shapes and using blit to add 
images or in this case text. Once you‚Äôve created 
a buffer of changes to the screen, you update it 
with the Ô¨Çip() function.
12 
Start the story
Our start_game function is called 
when the mouse clicks the right position and 
we prepare the game, getting the characters, 
locations and progression through the game 
script. The rest of this function uses this info to 
pull in data from the script to make the game 
Ô¨Çow properly.
07 
How the script relates
In our game, the code pulls in 
elements from the script Ô¨Åle as it goes. We'll 
explain how that works later, but this also 
allows us to implement decisions later on to 
change which direction the game might take 
you in.
08 
Starting the main game
We don‚Äôt need many modules for the 
current state of the visual novel. Here we‚Äôve 
imported the new Pygame module, our script 
as a module and the time module for aesthetic 
reasons ‚Äì we‚Äôre going to have the code pause in 
bits rather than just instantly change scenes to 
the next line. We also initialise Pygame with a 
simple pygame.init()
13 
First screen
The Ô¨Årst screen is handled differently, 
and acts to get every element up on the 
interface before we continue ‚Äì it makes the 
code take a little less time to process as we 
11 
See the mouse
As we‚Äôve created the button as a 
rectangle and now an image on the menu, we 
need to recognise when the mouse is hovering 
over it to know when the button is clicked. First 
we have to use event.get() to see the mouse 
in general, then we look for the position with 
get_pos(). After that, we wait for it to click, see 
where it clicked (using the co-ordinates of the 
rectangle) and make a decision after that.
 The code pulls in elements from 
the script file as it goes, allowing us to 
implement decisions later on 
 

The Python Book  131
Create with Python
15 
The starting function
We Ô¨Ånish our code bit with a simple 
function that starts off the entire game. This is 
just to encapsulate the entire code and allows us 
to add different ways of turning it off in the future. 
IDLE when running the Ô¨Åle will load everything 
up and then run the game() function at the end 
‚Äì this is similar to how you can add a __main__ 
function at the end which will start the code in the 
command line.
feel more interactive. This would not require 
much more code than the if statements, and 
it would also be a good way for you to look into 
adding graphical buttons to click and use the 
collide function.
17 
Move the assets
Currently the code has the script-
speciÔ¨Åc assets in the main visualnovel Ô¨Åle. 
These can be moved to the script, allowing 
you to make the visualnovel Ô¨Åle much more 
modular so that can you have multiple scripts 
with different assets to load at startup.
14 
Add variables and assets
Similarly to the way that our original 
startup code works, our next if statement and 
iteration checks to see what is different on the 
next line, and if it moves to a different scene 
function. It will also change anything that is 
different without Ô¨Ålling up the buffer more 
than needed. Where we‚Äôve made no change is 
labelled with a 0 in the scripts.
16 
Expand your code
The code written is very expandable, 
allowing you to add decisions that are logged 
to take you to different scenes (or routes in 
visual novel terminology) and make your game 
begin. The getattr allows us to use the string/
integer associated with our place in the story 
and call upon the relevant scene function from 
the script Ô¨Åle. We then use an if statement 
with an iterative function to successively add 
screen element to give the illusion that it‚Äôs 
building up the Ô¨Årst screen. We Ô¨Ånish it by 
advancing the progression value.
 The code here is very expandable, 
allowing you to add decisions that take 
you to different scenes 
 

development
1325IF1ZUIPO#PPL
148
Web
134%FWFMPQXJUI1ZUIPO
8IZ1ZUIPOJTQFSGFDUGPSUIFXFC
140#VJMEZPVSPXOCMPH
#FHJOEFWFMPQJOHZPVSCMPH
144%FMJWFSDPOUFOUUPZPVSCMPH
"EEDPOUFOUUPZPVSTJUF
148&OIBODFZPVSCMPH
$PNQMFUFZPVSCMPHXJUIBEEPOT
i$PNQBOJFTMJLF(PPHMFBOE/"4"
IBWFCFFOVTJOH1ZUIPOGPSZFBSTw
144
134

5IF1ZUIPO#PPL133

8FCEFWFMPQNFOU
1345IF1ZUIPO#PPL
Don‚Äôt be fooled into thinking Python is a restrictive language or 
incompatible with the modern web. Explore options for building 
Python web apps and experience rapid application development

8FCEFWFMPQNFOU
5IF1ZUIPO#PPL135
Django djangoproject.com
GOOD FOR: Large database-driven web apps with multiuser support 
and sites that need to have heavily customisable admin interfaces
Django contains a lot of impressive features, all in the name of interfaces 
and modules. These include autowiring, admin interfaces and database 
migration management tools by default for all of your projects and 
applications. Django will help to enable rapid application development for 
enterprise-level projects, whilst also enabling a clear modular reuseable 
approach to code using subapplications. 
Werkzeug 
werkzeug.pocoo.org
GOOD FOR: API creation, interacting with 
databases and following strict URL routes 
whilst managing HTTP utilitie
Werkzeug is the underlying framework for 
Flask and other Python frameworks. It provides 
a unique set of tools that will enable you to 
perform URL routing processes as well as 
request and response objects, and it also 
includes a powerful debugger.
Tornado tornadoweb.org
GOOD FOR: Web socket interaction and long polling due to its 
ability to scale to manage vast numbers of connections
Tornado is a networking library that works as a nonblocking web server 
and web application framework. It‚Äôs known for its high performance and 
scalability and was initially developed for friendfeed, which was a real-
time chat system that aggregated several social media sites. It closed 
down in April 2015 as its user numbers had declined steadily, but Tornado 
remains as active and useful as ever. 
Flask Ô¨Ç ask.pocoo.org
GOOD FOR: Creating full-featured RESTful APIs. Its ability to manage 
multiple routes and methods is very impressive
Flask‚Äôs aim is to provide a set of commonly used components such as 
URL routing and templates. Flask will also work on controlling the request 
and response objects, all-in-all this means it is lightweight but is still a 
powerful microframework.
PyramiD pylonsproject.org
GOOD FOR: Highly extensible and adaptable to any project 
requirement. Not a lightweight system either
Heavily focused on documentation, Pyramid brings all the much needed 
basic support for most regular tasks. Pyramid is open source and 
also provides a great deal of extensibility ‚Äì it comes with the powerful 
Werkzeug Debugger too.
Frameworks
Why?
Let‚Äôs take a look at some of the frameworks 
available when developing Python web applications
First released in 1991, companies 
like Google and NASA have been 
using Python for years
Thanks to the introduction of the Web Server 
Gateway Interface (WSGI) in 2003, developing 
Python web apps for general web servers 
became a viable solution as opposed to 
restricting them to custom solutions.
Python executables and installers are 
widely available from the ofÔ¨Å cial Python site at 
www.python.org.
Mac OS X users can also beneÔ¨Å t greatly 
from using Homebrew to install and manage 
their Python versions. Whilst OS X comes 
bundled with a version of Python, it has some 
potential drawbacks. Updating your OS may 
clear out any downloaded packages, and 
Apple‚Äôs implementation of the library differs 
greatly from the ofÔ¨Å cial release. Installing 
using Homebrew helps you to keep up to date 
and also means you get the Python package 
manager pip included.
Once Python is installed the Ô¨Å rst package to 
download should be virtualenv using ‚Äòpip install 
virtualenv‚Äô, which enables you to create project-
speciÔ¨Å c shell environments. You can run 
projects on separate versions of Python with 
separate project-speciÔ¨Å c packages installed.
Check out the detailed Hitchhiker‚Äôs Guide 
to Python for more information: docs.python-
guide.org/en/latest.

8FCEFWFMPQNFOU
1365IF1ZUIPO#PPL
Create an API
Let us explore the Flask microframework and build a 
simple yet powerful RESTful API with minimal code
01 
Install Flask
Create a new directory inside of 
which your project will live. Open a Terminal 
window and navigate to be inside your new 
directory. Create a new virtual environment 
for this project, placed inside a new directory 
called ‚Äòvenv‚Äô, and activate it. Once inside 
the new virtual shell, proceed to installing 
Flask using the ‚Äòpip install Flask‚Äô command.
virtualenv venv
. venv/bin/activate
pip install Flask
04 
Connect to Database
With the database path deÔ¨Å ned, 
we need a way to create connection to the 
database for the application to obtain data. 
Create a new method called ‚Äòconnet_db‚Äô to 
manage this for us. As a method we can call it 
when we set up a prerequest hook shortly. This 
will return a new open connection using the 
database details set in the conÔ¨Å guration object.
def connect_db():
return sqlite3.connect(app.
config[ƒÇDATABASEƒÅ])
07 
Populate the Database
To 
populate 
the 
database 
you 
can now run the init_db inside an active 
python shell. To do so enter a shell by typing 
‚Äòpython‚Äô inside your environment, and then 
running the command below. Alternatively, 
you can use the sqlite3 command and 
pipe the schema.sql Ô¨Å le into the database.
# Importing the database using the
init_db method
python
>>> from index import init_db
>>> init_db()
# Piping the schema using SQLite3
sqlite3 /tmp/api.db < schema.sql
02 
Create Index
Create a new Ô¨Å le in the root of the 
project location called ‚Äòindex.py‚Äô. The sample API 
will use a SQLite database, so we need to import 
that module for use in the application. We‚Äôll 
also import some core components from the 
Flask module to handle request management 
and response formatting as well as some other 
functions. The minimum import for a Flask 
application is Flask itself.
import sqlite3
from flask import Flask, request, g,
redirect, url_for, render_template, 
abort, jsonify
05 
Database Schema
Our SQLite database will only contain 
one table. Create a new Ô¨Å le called ‚Äòschema.sql‚Äô 
in the root of the project directory. This Ô¨Å ll will 
contain the SQL commands required to create 
the table and populate it with some sample 
bootstrapped data.
drop table if exists posts;
create table posts (
    id integer primary key autoincrement,
    title text not null,
    text text not null
);
insert into posts (title, text) values
(ƒÇFirst EntryƒÅ, ƒÇThis is some textƒÅ);
insert into posts (title, text) values
(ƒÇSecond EntryƒÅ, ƒÇThis is some more textƒÅ); 
insert into posts (title, text) values
(ƒÇThird EntryƒÅ, ƒÇThis is some more text
(again)ƒÅ);
08 
Request DB Connection
With 
the 
database 
created 
and 
populated we need to be able to ensure 
we have an open connection and close it 
accordingly when Ô¨Å nished. Flask has some 
decorator methods to help us achieve this. 
The before_request() method will establish 
the connection and stores it in the g object 
for use throughout the request cycle. We 
can then close the connection after the 
cycle using the teardown_request() method.
@app.before_request
def before_request():
  g.db = connect_db();
03 
Declare ConÔ¨Å g
For a small application we can declare 
conÔ¨Å guration options as upper-case name value 
pairs inside the main module, which we‚Äôll do now. 
Here we can deÔ¨Å ne the path and name of the 
SQLite database and also set the Flask debug 
output to True for development work. Initialise 
the Flask application to a namespace and then 
import the conÔ¨Å g values set directly above it. 
We then run the application. All routes must be 
placed above these last two lines.
# Config
DATABASE = ƒÇ/tmp/api.dbƒÅ
DEBUG = True
app = Flask(__name__)
app.config.from_object(__name__)
# Add methods and routes here 
if __name__ == ƒÇ__main__ƒÅ:
app.run() 
06 
Instantiate the Database
To populate the database with the new 
table and any associated data, we will need to 
import and apply the schema to the database. 
Add a new module import at the top of the 
project Ô¨Å le to obtain the ‚Äòcontextlib.closing()‚Äô 
method. What we will do next is create a method 
to initialise the database by reading the contents 
of schema.sql and executing it against the open 
database.
from contextlib import closing
def init_db():
  with closing(connect_db()) as db:
    with app.open_resource(ƒÇschema.sqlƒÅ,
mode=ƒÅrƒÅ) as f:
      db.cursor().executescript(f.read())
    db.commit() 
‚ÄúWorld-renowned image sharing service 
Instagram and social pin board Pinterest 
have also implemented Python as part of 
their web stack, opting for Django‚Äù

5IF1ZUIPO#PPL137
Python in 
the wild
Interested in Python development? 
You‚Äôd be in good company with big 
names currently using it
10 
Template Output
Flask expects templates to be available 
within the templates directory in the root of 
the project, so make sure that you create that 
directory now. Next, add a new Ô¨Å le called 
‚Äòshow_posts.html‚Äô. The dynamic values are 
managed using Jinja2 template syntax, the 
default templating engine for Flask applications. 
Save this Ô¨Å le in the templates directory.
<ul class=posts>
  {% for post in posts %}
  <li><h2>{{ post.title }}</h2>{{ post.
text|safe }}
  {% else %}
  <li>Sorry, no post matches your 
request.
  {% endfor %}
</ul>
13 
Run the application
To run your Flask application, navigate 
using the active Terminal window into the 
root of the project. Ensuring you are in an 
active 
virtual 
environment 
Python 
shell, 
enter the command to run the main index 
Ô¨Å le. The built-in server will start and the site 
will be accessible in the browser on default 
port 
local 
address 
http://127.0.0.1:5000.
python index.py
11 
Make an API Response
To create an API response we can 
deÔ¨Å ne a new route with a speciÔ¨Å c API endpoint. 
Once again, we query the database for all 
posts. The data is then returned as JSON, 
using the JSONify method to do so. We can 
add speciÔ¨Å c values such as post count and 
a custom message if you wish, as well as the 
actual posts variable, formatted as JSON.
@app.route(ƒÇ/api/v1/posts/ƒÅ, 
methods=[ƒÇGETƒÅ])
def show_entries():
  cur = g.db.execute(ƒÇselect title, text 
from posts order by id descƒÅ)
14 
API JSON Output
The root of the application will render 
the template we previously created. Multiple 
routes can be generated to create a rich web 
application. Visiting an API-speciÔ¨Å c URL in 
the browser will return the requested data as 
cleanly formatted JSON. The ability to deÔ¨Å ne 
custom routes like a versioned RESTful endpoint 
is incredibly powerful.
09 
Display Posts
Create your Ô¨Å rst route so that we can 
return and display all available posts. To query 
the database we execute a SQL statement 
against the stored db connection. The results 
are then mapped to values using Python‚Äôs 
dict method and saved as the posts variable. 
To render a template we then call render_
template() and pass in the Ô¨Å le name and the 
variable to display as the second argument. 
Multiple variables can be passed through as a 
comma-separated list.
@app.route(ƒÇ/ƒÅ)
def get_posts():
  cur = g.db.execute(ƒÇselect title, text 
from posts order by id descƒÅ)
  posts = [dict(title=row[0], text=row[1])
for row in cur.fetchall()]
  return render_template(ƒÇshow_posts.
htmlƒÅ, posts=posts)
12 
Get a speciÔ¨Å c Post
CTo obtain a speciÔ¨Å c post from the 
API we need to create a new route, which will 
accept a dynamic value as part of the URI. We 
can also choose to use this route for multiple 
request methods, which are in this case GET 
and DELETE. We can determine the method 
by checking the request.method value and 
run it against a conditional if/else statement.
@app.route(ƒÇ/api/v1/posts/<int:post_id>ƒÅ,
methods=[ƒÇGETƒÅ, ƒÇDELETEƒÅ])
def single_post(post_id):
  method = request.method
  if method == ƒÇGETƒÅ:
    cur = g.db.execute(ƒÇselect title, 
text from posts where id =?ƒÅ, [post_id])
  posts = [dict(title=row[0],
text=row[1]) for row in cur.fetchall()]
    return jsonify({ƒÇcountƒÅ: len(posts), 
ƒÇpostsƒÅ: posts})
  elif method == ƒÇDELETEƒÅ:
    g.db.execute(ƒÇdelete from posts
where id = ?ƒÅ, [post_id])
    return jsonify({ƒÇstatusƒÅ: ƒÇPost 
deletedƒÅ})
@app.teardown_request
def teardown_request(exception):
  db = getattr(g, ƒÇdbƒÅ, None)
  if db is not None:
    db.close() 
  posts = [dict(title=row[0], 
text=row[1]) for row in ur.fetchall()]
  return jsonify({ƒÇcountƒÅ: len(posts),
ƒÇpostsƒÅ: posts}) 
Disqus, the popular social interaction 
comment 
service 
provider, 
has 
been 
implementing 
their 
production 
applications in Python for a very long time. 
Python‚Äôs beneÔ¨Å t for the development 
team was its ability to scale effectively 
and cater for a large number of consumers 
whilst 
also 
providing 
an 
effective 
underlying API for internal and external 
use. The company are now starting to 
run some production apps in Go, but the 
majority of code still runs on Python.
World-renowned image sharing service 
Instagram and social pin board Pinterest 
have also implemented Python as part of 
their web stack, opting for Django to assist 
with the functionality and ability to cater 
for the many thousands of content views 
and requests made to their services.
Mozilla, 
Atlassian‚Äôs 
Bitbucket 
repository service, and popular satire site 
The Onion have all been noted as using 
Django for their products.

8FCEFWFMPQNFOU
1385IF1ZUIPO#PPL
Django application
development
Django is a full Python web-app framework 
with impressive command-line tools
01 
Create Virtual Environment
Create a new directory for your project 
and navigate inside it using a new Terminal 
window. Create a new virtual environment for 
this project, opting to use the latest Python 3. 
Your Python 3 location may vary, so be sure to 
set the correct path for the binary package.
virtualenv -p /usr/local/bin/python3 venv
01 
Generate the model
Open blog/models.py and create the 
Ô¨Å rst model class, providing the property names 
and types for each. You can dig deeper into 
Ô¨Å eld types via the docs here: bit.ly/1yln1kn. 
Once complete, open myblog/settings.py and 
add the blog app to the list of allowed installed 
applications so that the project will load it.
# blog/models.py
class Post(models.Model):
  title = models.CharField(max_
length=200)
  text = models.TextField()
# myblog/settings.py
INSTALLED_APPS = (ƒÇdjango.contrib.adminƒÅ, 
..., ƒÇdjango.contrib.staticfilesƒÅ, ƒÇblogƒÅ) 
04 
Initial Migration
Navigate into the project directory via 
the Terminal window. Some of the installed 
apps included in the project generation require 
database tables.
Using the helper. run a migration command to 
create all of these automatically. The Terminal 
window will keep you informed of all of your 
progress and what has been applied from the 
migration.
cd myblog
python manage.py migrate 
02 
Activate and Install
Using 
your 
Terminal 
window, 
activate the virtual environment to start the 
project-speciÔ¨Å c shell. VirtualEnv has a local 
version of the Python package manager 
pip installed, so it‚Äôs fairly straight forward 
to run the command to install Django.
. venv/bin.activate
pip install Django
02 
Data Migration
Any creation of models or changes to 
data need to be migrated. To do so we need 
to make migration Ô¨Å les from the model data, 
which generate sequentially numbered Ô¨Å les. 
Then we run a speciÔ¨Å c migration to generate 
the required SQL and the Ô¨Å nal migrate 
command performs the database execution.
python manage.py makemigrations blog
python manage.py sqlmigrate blog 0001
python manage.py migrate 
05 
Create App
Each Django project is made up of 
at least one application or module. Run the 
startapp command to create a new blog app 
module, which will generate the required 
code adjacent to the main project structure.
python manage.py startapp blog
03 
Create Core Project
The Django install contains some 
incredibly useful command-line tools, which 
will help you to run a number of repetitive and 
difÔ¨Å cult tasks. Let‚Äôs use one of them to create a 
fresh project structure for us. Run the django-
admin.py script with the name of the project that 
you want created.
django-admin.py startproject myblog
Installing 
Django
Database 
models
& migration
The installation of Django is 
relatively easy once you have 
python installed. See for yourself 
as we build a simple app here
Django‚Äôs ability to manage the 
migration and maintenance of 
database schema and project 
models is very impressive

8FCEFWFMPQNFOU
5IF1ZUIPO#PPL139
01 
Create Admin User
Django makes content administration 
incredibly easy and has an admin section 
available in a default project as standard 
at http://127.0.0.1:8000/admin. To log in you 
need to create a superuser account. Run 
the associated command and specify user 
details as required to then proceed and log in.
python manage.py createsuperuser
04 
Create a View
With the admin interface accepting 
new submissions for our post class we‚Äôll create 
a view page to display them. Open blog/views.
py and import the Post class from the models. 
Create a method to obtain all posts from the 
database and output them as a string.
from django.http import HttpResponse
from blog.models import Post
def index(request):
  post_list = Post.objects.order_by(ƒÇ-idƒÅ)
[:5]
  output = ƒÇ<br />ƒÅ.join([p.title for p
in post_list])
return HttpResponse(output)
02 
Switch on blog management
Having logged in to the administration 
interface you will be greeted with features to 
manage users and group roles and privileges, 
which alone are very powerful and provided for 
you by Django. There is not yet, however, any 
access to manage our blog posts so let‚Äôs turn 
that on.
05 
Manage the URLs
Create ‚Äòblog/urls.py‚Äô and add the code 
to import the views that were just made in the 
module and the accompanying URL patterns. 
Open myblog/urls.py and add the URL function 
call to implement a new URL for the app to 
display the view. Visit http://127.0.0.1:5000/
blog in your browser to render the new view.
# blog/urls.py
from django.conf.urls import patterns,url 
from blog import views
urlpatterns = patterns(ƒÇƒÅ,
  url(rƒÅ^$ƒÅ, views.index, name=ƒÅindexƒÅ),
)
# myblog/urls.py
urlpatterns = patterns(ƒÇƒÅ,
  url(rƒÅ^blog/ƒÅ, include(ƒÇblog.urlsƒÅ)),
  url(rƒÅ^admin/ƒÅ, include(admin.site.urls)),
)
03 
Enable Admin Management
To enable our module and associated 
models to be managed through the admin 
interface, we need to register them with the 
admin module. Open blog/admin.py and then go 
on to import and register the models in turn (we 
only have one of these currently though). Save 
the Ô¨Å le and refresh the admin site to see the 
posts that are now available to manage.
from django.contrib import admin
# Register your models here.
Autowiring the 
admin interface
Hosting 
Python 
apps
Admin sections can be 
problematic in their own right. 
Django provides an extensible 
admin interface for you
Admin sections can be 
problematic in their own right. 
Django provides an extensible 
admin interface for you
Heroku  heroku.com
This app is perhaps one of the most well-
known cloud hosting providers. Their stack 
server environments support a number 
of core web app languages including 
Python as standard. Their unique Toolbelt 
command-line features and integration 
with Git repositories, as well as being 
incredibly quick and easy to scale and 
improve performance, makes them an 
obvious choice. A free account will let you 
run a Python web app on one dyno instance 
without any cost.
Python Anywhere
www.pythonanywhere.com
Another hosted option, and one created 
speciÔ¨Å cally for Python applications in 
general is Python Anywhere. The free 
basic option plan has enough weight and 
power behind it to get you up and running 
with a Python web app without having to 
scale, but as soon as your project gains 
traction, you can switch plans and boost 
your plans performance.
It offers an incredibly impressive range 
of modules as standard, available to import 
into your application immediately to get you 
started, including Django and Flask should 
you need them.
Using the 
dev server
Django ships with a very helpful built-in 
development server, which will help you 
out by autocompiling and reloading 
after you have completed all of your Ô¨Å le 
changes. All you have to do to start 
the server is to run the ‚Äòpython 
manage.py runserver‚Äô command from 
your Terminal window within 
the project directory.

140  The Python Book
Web development
Django is of course able 
to read and write to SQL 
databases, but it needs 
very little prior knowledge 
to succeed in doing so
Django comes with a 
lightweight development 
server so you can test all 
your work locally
Learn how to use this extremely powerful 
Python-based web framework to create a 
complete blog from scratch in record time
Build your own blog 
with Django
Creating your own blog always feels like a 
great accomplishment. Sure, you could use the 
fantastic WordPress if you need a complete blog 
with every feature you‚Äôd ever need right now. And 
Tumblr exists for people who just want to write 
something, or post pictures of corgis in space. 
You don‚Äôt have full control from start to Ô¨Ånish 
with a prefabricated blog, though, and neither 
of these is written in the fantastic Django. 
Django is of course based on Python, the object-
orientated programming language designed to 
have clearly readable syntax. Due to its Python 
base, it‚Äôs an incredibly powerful and simple-to-
use language for web development with a vast 
array of applications.
So let‚Äôs use it to make a blog. In this Ô¨Årst 
section of the process we will explore how to set 
up Django, writing and reading to a database, 
creating a front- and back-end, and some 
interactions with HTML.
Resources
Python Source Code 
www.python.org/download/releases/2.7.2
Django Source Code 
www.djangoproject.com/download  
Using HTML and CSS in 
conjunction with Django is 
clear and straightforward; 
it‚Äôs much easier to bug-fix 
than PHP
Django comes with 
a generic back-end 
site that is set up in 
seconds, and easily 
customisable after that

The Python Book  141
Web development
01 
Install Python
Django is based on Python, and requires 
it to be installed to develop on. Python 2.7 is the 
recommended version, and this is installed with 
the python package. If you want to check your 
version, start the Python shell by typing ‚Äòpython‚Äô 
into the terminal.
02 
Install Django
Most operating systems will have a 
Django package available in the repository, like 
python-django in Debian. The Django website 
has a list if you have trouble Ô¨Ånding it, or you 
could build it from source. Make sure you install 
version 1.3.
03 
Verify your Django
To make sure Django installed properly, 
and that you have the right version, enter the 
Python shell by typing ‚Äòpython‚Äô and enter  
the following:
import django
print django.get_version()
It will return a version number if it has installed 
correctly, which should be 1.3.
04 
Start a new project
In the terminal, cd to the folder you 
want to develop the blog in, and then run the 
next command:
django-admin startproject myblog
Here, ‚Äòmyblog‚Äô can be replaced by whatever you 
wish to name the project, but we‚Äôll use it for the 
upcoming examples.
05 
Start the development server
Django comes with a lightweight 
development server to test out work locally. We 
can also use it to check our work, so cd to the 
myblog folder and then use:
python manage.py runserver
If all goes well, it should return zero errors. Use 
Ctrl+C to exit the server.
06 
ConÔ¨Ågure the database
The database settings are kept in the 
settings.py Ô¨Åle. Open it up with your favourite 
editor and go to the Databases section. Change 
ENGINE to:
‚ÄòENGINE‚Äô: ‚Äòdjango.db.backends.sqlite3‚Äô,
And in NAME, put the absolute path ‚Äì for 
example:
‚ÄòNAME‚Äô: ‚Äò/home/user/projects/myblog/
sqlite.db‚Äô,
Save and exit.
07 
Create the database
The database Ô¨Åle will be generated by 
using the command:
python manage.py syncdb
During the creation, it will ask you to set up a 
superuser, which you can do now.
The SQLite database Ô¨Åle will be created in 
your myblog folder.

142  The Python Book
Web development
 You don‚Äôt have full control from start 
to finish with a prefabricated blog ‚Äì but 
you will with Django 
 
08 
Create your blog
Now it‚Äôs time to create a blog app in your 
project. Type:
python manage.py startapp blog
This creates the models Ô¨Åle which is where all 
your data lives. You can change ‚Äòblog‚Äô to another 
name, but we‚Äôll use it in our examples.
09 
Start your blog model
We can now take the Ô¨Årst steps in 
creating our blog model. Open models.py and 
change it so it says the following:
from django.db import models
class Post(models.Model):
 
post = models.TextField()
This creates the Post class, which has a 
subclass that contains your blog text.
10 
Customise your blog
Let‚Äôs now expand the blog model a bit so 
it resembles a more classic blog:
class Post(models.Model):
 
post = models.TextField()
 
title = models.TextField()
 
author = models.CharField(max_
length=50)
 
pub_date = models.DateTimeField()
A CharField needs to have a character 
limit deÔ¨Åned, and DateTimeField holds the  
time values.
11 
Install your app
Your app needs to be installed to your 
project, which is very simple. Open the settings.
py Ô¨Åle again, go to the INSTALLED_APPS section 
and add:
‚Äòblog‚Äô,
Then run the following to create the database 
tables:
python manage.py sql blog
And Ô¨Ånally:
python manage.py syncdb
12 
Set up to post
Now we can create a post and test out 
our code. First though, enter the Python shell:
python manage.py shell
Then execute these commands to add all the 
necessary Ô¨Åelds and data:
from blog.models import Post
import datetime
13 
Let‚Äôs blog
Create the post. For this example, we 
will call it test_post:
test_post = Post()
Now let‚Äôs add the blog content:
test_post.post = ‚ÄòHello World!‚Äô
test_post.title = ‚ÄòFirst Post‚Äô
test_post.author = ‚ÄòMe‚Äô
test_post.pub_date = datetime.
datetime.now()
And then save it with:
test_post.save()
14 
Start the site back-end
To create the admin site, edit urls.py 
from the myblog directory, and uncomment or 
add the following lines:
from django.contrib import admin
admin.autodiscover()
url(r‚Äô^admin/‚Äô, include(admin.site.
urls)),
Save and exit, then edit settings.py and 
uncomment this line from INSTALLED_APPS:
‚Äòdjango.contrib.admin‚Äô,
The admin site is now at 127.0.0.1:8000/admin/.

The Python Book  143
Web development
24 
A functional blog
So there you have it! Navigating to 
127.0.0.1:8000/admin/ or 127.0.0.1:8000/myblog/ 
will show off the Ô¨Åne work you‚Äôve created. 
Django is dead easy to use once you know how, 
and there are plenty of tweaks you should be 
able to make after this tutorial.
15 
Setup the admin page
The admin page has a generic, usable 
template, but you need to conÔ¨Ågure it to view, 
edit, create and delete posts. First, create a new 
Ô¨Åle admin.py in the blog directory and enter:
from blog.models import Post
from django.contrib import admin
admin.site.register(Post)
To have the posts display nicely on the site, edit 
models.py and add:
class Post (models.Model):
 
‚Ä¶
 
def __unicode__(self):
 
 
return self.title
Save, and run:
python manage.py syncdb
The admin page is now usable! You should be 
able to see the other posts, and it‚Äôs now a lot 
easier to add more.
16 
Activate the front-end
Open up urls.py from the myblog 
directory in your editor and add the following to 
the urlpatterns section:
url(r‚Äô^myblog/‚Äô, ‚Äòblog.urls.index‚Äô)),
One of the examples in the Ô¨Åle can be 
uncommented and edited to this as well. It 
points to a model we will now create.
17 
Create another urls Ô¨Åle
You need to create another urls Ô¨Åle in the 
app directory, in our case blog/urls.py. Create it 
and add the following:
from django.template import Context, 
loader
from blog.models import Post
from django.http import HttpResponse
def index(request):
 
post_list = Post.objects.all() 
 
t = loader.get_template(‚Äòblog/
index.html‚Äô)
 
c = Context({
 
 
‚Äòpost_list‚Äô: poll_list,
 
})
 
return HttpResponse(t.render(c))
18 
Start the template
The code we‚Äôve just written looks for a 
template that currently doesn‚Äôt exist. We Ô¨Årst 
need to tell Django where templates are to be 
looked for in settings.py:
TEMPLATE_DIRS = (
 
‚Äò/home/user/projects/templates‚Äô,
)
You can put the template directory wherever you 
want, as long as it‚Äôs referenced here.
19 
Write a template
Now to write the site template. In our 
example, we‚Äôre using index.html:
{% for post in post_list %}
 
{{ post.title }}
 
{{ post.author }}
 
{{ post.pub_date }}
 
{{ post.post }}
{% endfor %}
This needs to be located in a folder with 
the same name as your app within the  
template directory.
20 
View your handiwork
Let‚Äôs make sure this worked. Start the 
developer server with:
python manage.py runserver
And navigate to 127.0.0.1:8000/myblog/.
It‚Äôs not pretty, but you should have 
successfully called upon your stored data. We‚Äôll 
spend the next steps tidying it up a bit.
21 
Format the front page
Go 
back 
into 
the 
template 
Ô¨Åle,  
index.html, and add the following html tags:
{% for post in post_list %}
 
<h2>{{ post.title }}</h2>
 
{{ post.author }} on {{ post.pub_
date }}
 
<p>{{ post.post }}</p>
{% endfor %}
This is just an example ‚Äì the post can be in any 
order with any tags.
22 
Spruce up the admin list
We‚Äôll do this in the admin.py Ô¨Åle in our 
blog directory; open it in your editor and make 
the following changes:
from blog.models import Post
from django.contrib import admin
class Admin(admin.ModelAdmin):
 
list_display = [‚Äòtitle‚Äô, ‚Äòauthor‚Äô, 
‚Äòpub_date‚Äô]
admin.site.register(Post, Admin)
In this case ‚Äòlist_display‚Äô is a Ô¨Åxed variable name.
23 
A logical post page
The new post page on the site might 
not be in an order you‚Äôre comfortable with. 
We‚Äôll change that now in admin.py with the  
following additions:
class Admin(admin.ModelAdmin):
 
list_display = [‚Äòtitle‚Äô, ‚Äòauthor‚Äô, 
‚Äòpub_date‚Äô]
 
fields = [‚Äòtitle‚Äô, ‚Äòpub_date‚Äô, 
‚Äòauthor‚Äô, ‚Äòpost‚Äô]
admin.site.register(Post, Admin)
Remember to save!
 Django is an incredibly powerful  
and simple-to-use language 
 

144  The Python Book
Web development
We continue building an awesome blog using the powerful 
Django framework, and this tutorial is all about the front-end 
content delivery
Deliver content to your blog
In the last tutorial we began to build the most 
basic of blogs, and learned how to use a bit of 
Django in the process. We can now set up a new 
project, create a database and write basic code 
With minimal extra code,  
our template can display  
the month archive from  
the sidebar
Django has built-in code to 
deal with pagination very 
cleanly and effectively
Allow your readers to 
give you feedback, and 
moderate them in the 
admin panel
With Django we can make  
simple sidebars that list  
archives by month
to read and write to the database. All simple 
stuff, but of course it‚Äôs core to building websites 
where Django might be called upon.
Here we will give the front end of the site 
an overhaul, making it more of the standard 
you would expect from a modern blog. This 
will include a sidebar, pages, post pages and 
the ability to add and moderate comments. 
In the process we will learn some more of 
the beneÔ¨Åts that come with using Django to  
develop websites.
You should keep using Django 1.3 for this 
tutorial, as we did before.
Resources
Python base:  
http://www.python.org/download/
Django source: https://www.
djangoproject.com/download/

The Python Book  145
Web development 
08 
Please turn over
Now we need to add the navigation 
links to the blog, so open the index template  
for editing:
{% if post_list.has_previous %}
 
<a href=‚Äù?list_page={{ post_list.
previous_page_number }}‚Äù>Newer </a>
{% endif %}
{% if post_list.has_next %}
 
<a href=‚Äù?list_page={{ post_list.
next_page_number }}‚Äù> Older</a>
{% endif %}
01 
New blog order
We left off last time with the blog 
displaying posts in chronological order, which 
isn‚Äôt very helpful to readers. To correct this, 
open up urls.py in the blog folder and edit the 
following line:
post_list = Post.objects.all().order_
by(‚Äú-pub-date‚Äù)
This makes sure that posts are displayed in 
reverse order (newest Ô¨Årst).
02 
A view to a page
You‚Äôll want to be able to link speciÔ¨Åc 
pages, of course, and to do that we Ô¨Årst have to 
deÔ¨Åne what goes into these pages in the urls.py 
Ô¨Åle in the blog folder:
def post_page(request, post_id):
 
post_page = Post.objects.
get(pk=post_id)
 
return render_to_response(‚Äòblog/
post.html‚Äô, {‚Äòpost_page‚Äô: post_page})
03 
Clean up your code
You may notice that we used a different 
return command to the index deÔ¨Ånition ‚Äì this 
is a shortcut that makes writing the code a bit 
easier. To get it working, add:
from django.shortcuts import render_to_
response
We recommend that you edit the index code to 
match post_page.
04 
Edit URLs
In urls.py in myblog we need to make 
some additions and modiÔ¨Åcations for the 
website to direct to the post correctly:
url(r‚Äô^myblog/$‚Äô, ‚Äòblog.urls.index‚Äô),
url(r‚Äô^myblog/(?P<post_id>\d+)/$‚Äô, 
‚Äòblog.urls.post_page‚Äô),
The post_id is the number of the post, which is 
auto-generated. The ‚Äò$‚Äô is important to make the 
redirection work.
05 
A post template
We told the post_page to point towards 
a template we now need to create. In the same 
location as index.html, create post.html with the 
following formatting to resemble the front page:
<h2>{{ post_page.title }}</h2>
{{ post_page.author }} on {{ post_page.
pub_date }}
<p>{{ post_page.post }}</p>
06 
Link to the page
Let‚Äôs get these links working from the 
main page. Open up the index.html Ô¨Åle and make 
the following change:
<h2><a href=/myblog/{{ post.pk }}>{{ 
post.title }}</a></h2>
This is a very simple addition using an absolute 
link, and requires no Ô¨Åddling with the views  
or model.
07 
Pagination
To get blog posts split up over pages, we 
need to make some additions to urls.py in the 
blog folder:
post_list = Post.objects.all().order_
by(‚Äú-pub_date‚Äù)
paginator = Paginator(post_list, 3)
try: list_page = request.GET.get(‚Äúlist_
page‚Äù, ‚Äò1‚Äô)
except ValueError: list_page = 1
post_list = paginator.page(list_page)
return render_to_response(‚Äòblog/index.
html‚Äô, {‚Äòpost_list‚Äô: post_list})

146  The Python Book
Web development
 We need to be able to process the 
data and metadata in the forms 
 
09 
Wrong page
Let‚Äôs add a quick bit of code to return 
somebody to the previous page if they get the  
URL wrong:
from django.core.paginator import 
Paginator, EmptyPage, InvalidPage
try:
 
post_list = paginator.page(list_
page)
except (EmptyPage, InvalidPage):
 
post_list = paginator.
page(paginator.num_pages)
The last part replaces ‚Äòpost_list = paginator.
page(list_page)‚Äô.
10 
Have your say
Everyone has their opinion on the 
internet. You can give your readers the ability to 
comment, and we‚Äôll start by editing models.py:
class Comment(models.Model):
 
author = models.CharField(max_
length=50)
 
text = models.TextField()
 
post = models.ForeignKey(Post)
 
def __unicode__(self):
 
 
return (self.post, self.text)
We‚Äôve made it so they can put their name with  
a comment.
11 
Back to the comment
We now need to add a small line to the 
urls.py Ô¨Åle in myblog so the comment can be 
posted then sent back to the original page:
url(r‚Äô^myblog/add_comment/(\d+)/$‚Äô, 
‚Äòblog.urls.add_comment‚Äô),
This URL pattern calls the ID of the page that 
you‚Äôre on.
12 
Form a comment
We need to be able to process the 
data and metadata in the forms, so let‚Äôs add 
a class to urls.py in the blog folder with the  
following additions:
from django.forms import ModelForm
from blog.models import Post, Comment
class CommentForm(ModelForm):
 
class Meta:
 
 
model = Comment
 
 
exclude = [‚Äòpost‚Äô]
13 
In the post
We need to attribute the comments to 
the post they‚Äôre being made on, so update the 
post_page deÔ¨Ånition:
from django.core.context_processors 
import csrf
def post_page(request, post_id):
 
post_page = Post.objects.
get(pk=post_id)
 
comments = Comment.objects.
filter(post=post_page)
 
d = dict(post_page=post_page, 
comments=comments, form=CommentForm())
 
d.update(csrf(request))
 
return render_to_response(‚Äòblog/
post.html‚Äô, d)
The CSRF tag is to prevent cross-site  
request forgery.
14 
Comment template
Let‚Äôs get the post page ready for 
comments by adding this to post.html:
<p>Comments:</p>
{% for comment in comments %}
 
{{ comment.author }}
 
<p>{{ comment.text }}</p>
{% endfor %}
<strong>Add comment</strong>
<form action=‚Äù{% url blog.urls.
add_comment post_page.id %}‚Äù 
method=‚ÄùPOST‚Äù>{% csrf_token %}
 
Name {{ form.author }}
 
<p>{{ form.text }}</p>
 
<input type=‚Äùsubmit‚Äù value=‚ÄùSubmit‚Äù>
</form>
15 
DeÔ¨Åne your comments
The Ô¨Ånal step is deÔ¨Åning the comments 
in blog/urls.py, and it‚Äôs a big one:
def add_comment(request, comment_id):
 
p = request.POST
 
if p.has_key(‚Äòtext‚Äô) and p[‚Äòtext‚Äô]:
 
 
author = ‚ÄòAnonymous‚Äô
 
 
if p[‚Äòauthor‚Äô]: author = 
p[‚Äòauthor‚Äô]
 
 
comment = Comment(post=Post.
objects.get(pk=comment_id))
 
 
cf = CommentForm(p, 
instance=comment)
 
 
cf.fields[‚Äòauthor‚Äô].required = 
False
 
 
comment = 
cf.save(commit=False)
 
 
comment.author = author
 
 
comment.save()
 
return HttpResponseRedirect(reverse
(‚Äòblog.urls.post_page‚Äô, args=[comment_
id]))
This ensures text has been entered, and if not 
speciÔ¨Åed author is ‚ÄòAnonymous‚Äô. Before testing, 
run syncdb so comment tables can be created.

The Python Book  147
Web development 
16 
Administrate
Like the posts, we can get the 
Admin page to see comments. Start editing  
blogs/admin.py to get this feature added:
from blog.models import Post, Comment
from django.contrib import admin
class PostAdmin(admin.ModelAdmin):
 
list_display = [‚Äòtitle‚Äô, ‚Äòauthor‚Äô, 
‚Äòpub_date‚Äô]
 
fields = [‚Äòtitle‚Äô, ‚Äòpub_date‚Äô, 
‚Äòauthor‚Äô, ‚Äòpost‚Äô]
admin.site.register(Post, PostAdmin)
17 
Comment-speciÔ¨Åc admin features
Now we can add the comment-speciÔ¨Åc 
admin features without causing any clashes:
class CommentAdmin(admin.ModelAdmin):
 
list_display = [‚Äòtext‚Äô, ‚Äòauthor‚Äô, 
‚Äòpost‚Äô]
admin.site.register(Comment, 
CommentAdmin)
This will show the comments on the admin site, 
and you can see the comment, the author and 
the post it‚Äôs connected to.
18 
Sidebar beginnings
Django makes it pretty easy to order 
posts by years and months, but Ô¨Årst we need to 
import some new models into blog/urls.py:
import time
from calendar import month_name
We‚Äôre going to deÔ¨Åne two new functions,  
month_timeline and month, to make the sidebar.
19 
Start to deÔ¨Åne month_timeline
First we need to get all the information 
from the posts:
def month_timeline():
 
year, month = time.localtime()[:2]
 
begin = Post.objects.order_by(‚Äòpub_
date‚Äô)[0]
 
month_begin = begin.pub_date.month
 
year_begin = begin.pub_date.year
 
month_list = []
The ‚Äò[:2]‚Äô makes sure we only get the time 
information we need.
20 
Finish your deÔ¨Ånition
Now we will order the posts by month 
and year starting from our Ô¨Årst month.
for y in range(year, year_begin-1, -1):
 
start, end = 12, 0
 
if y == year: start = month
 
if y == year_begin: end = month_
begin-1
 
for m in range(start, end, -1):
 
 
month_list.append((y, m, 
month_name[m]))
 
return month_list
21 
Return to reader
With the list organised, we can now 
deÔ¨Åne month so we can display it on the blog:
def month(request, year, month):
 
post_list = Post.objects.
filter(pub_date__year=year, pub_date__
month=month)
 
return render_to_response(‚Äòblog/
index.html‚Äô, dict(sidebar_list=post_
list, month_list=month_timeline()))
Now we need to link it up to the index template.
22 
Finalise your sidebar deÔ¨Ånition
Edit the return command on the index 
function to include the sidebar information:
return render_to_response(‚Äòblog/index.
html‚Äô, dict(post_list=post_list, 
sidebar_list=post_list.object_list, 
month_list=month_timeline()))
Then add this line to urls.py in myblog so a 
month page can be rendered:
url(r‚Äô^myblog/month/(\d+)/(\d+)/$‚Äô, 
‚Äòblog.urls.month‚Äô),
All we need to do now is display the information 
on the site.
24 
Sidebar Ô¨Ånale
Obviously it‚Äôs not at the side right now 
‚Äì that‚Äôs a job for the HTML and CSS. The info is 
there, though, and you can manipulate it any 
way you want. However, your blog is now a lot 
more friendly to your readers.
23 
Sidebar on the web
Go to the index template. First of all, 
change the Ô¨Årst line of the post forloop to:
{% for post in sidebar_list %}
Simple enough. Now we need to add the  
sidebar information:
{% for month in month_list %}
 
<p><a href=‚Äù{% url blog.urls.month 
month.0 month.1 %}‚Äù>{{ month.2 }}</a></
p>
{% endfor %}

148  The Python Book
Web development 
01 
Summarise
On a normal blog we‚Äôre going to have 
much longer articles. We can generate a 
summary of each of these on the index page 
template like so: 
<p>{{ post.post|truncatewords:3 }}</p>
This automatically takes the Ô¨Årst three words 
of the post ‚Äì of course, you can use any number.
To add to the previous tutorials, we‚Äôll 
cover some of the more advanced 
features you can utilise with the 
power of Django
Enhance your blog 
with extra features
We‚Äôve been building our Django blog to create 
and display posts, allow people to make 
comments, and Ô¨Ålter posts by month like a 
classic blog sidebar. We still have a bit of a 
way to go until it looks and behaves more like a 
classic blog, though.
In this tutorial, we‚Äôre going to add in 
summaries, excerpts, categories and Ô¨Ånally an 
RSS feed. This allows us to look at a few things ‚Äì 
Ô¨Årstly we‚Äôll get a better understanding of cross-
model referencing and how that works in the 
admin site. We will also go through how to make 
changes to the database, and how Django helps 
when creating an SQL query.
Finally, the RSS feed is part of a standard 
feed library in Django itself. We will learn how 
to import and use it to create a simple list of the 
latest entries that click through to the posts. By 
the end of the tutorial your Django blog will be  
Ô¨Ånally Ô¨Ånished!
Resources
Python base:  
http://www.python.org/download/
Django source: https://www.
djangoproject.com/download/
03 
Write an excerpt
To write the excerpt, or append it to the 
previous posts, we‚Äôll have to add it to the admin 
page. Open up admin.py and edit the Ô¨Åelds 
section of the AdminPost class to add excerpt:
fields = [‚Äòtitle‚Äô, ‚Äòpub_date‚Äô, 
‚Äòauthor‚Äô, ‚Äòpost‚Äô, ‚Äòexcerpt‚Äô]
02 
Manual excerpt
If you don‚Äôt want an automatic summary, 
we can add an excerpt Ô¨Åeld to our post model so 
you can craft one manually:
excerpt = models.TextField()
To limit the characters in your excerpt, use a 
CharField like for our author section.
 We‚Äôre going to add summaries, 
excerpts and an RSS feed 
 

The Python Book  149
Web development
04 
Excerpt or summary
You can replace the post content in the 
index template with the excerpt, but we can keep 
it as a backup for if the excerpt is empty:
{% if post.excerpt %} <p>{{ post.
excerpt }}</p> {% else %} <p>{{ post.
post|truncatewords:3 }}</p> {% endif %}
05 
Database error
If you‚Äôve decided to test the changes, 
06 
Database query
The output will show you what the SQL 
code is to add the models to the database. We 
want to add the excerpt Ô¨Åeld speciÔ¨Åcally, which 
should look something like this:
‚Äúexcerpt‚Äù text NOT NULL
Make a note of it.
07 
Alter table
To get into the database shell and add 
the Ô¨Åeld, run: $ python manage.py dbshell
Then we need to use an ALTER TABLE query: 
08 
Save the changes
We‚Äôve removed NOT NULL as we 
already have entries that won‚Äôt have an excerpt, 
and want to make it so an auto summary can be 
made. Save the changes with: COMMIT; and then 
exit the shell with: .quit
09 
Test it out
Now we can test out the excerpt code ‚Äì 
create a new post or edit an existing one to have 
an excerpt. If you‚Äôve followed our steps correctly 
it should work; if not, you may need to do a bit of 
bug Ô¨Åxing.
Create and 
manage parent 
and child 
categories as a 
separate function 
of the blog
Learn how to alter 
the database to 
create posts with 
categories, and 
add them to  
other posts
Have automatic summaries or manually 
crafted excerpts for your blog posts
Create custom 
RSS feeds using 
built-in Django 
functions
you‚Äôll have noticed our web server has stopped 
working. This is because there is no excerpt 
column in our database. Therefore we need to 
add the excerpt column. To Ô¨Ånd out how, run: 
$ python manage.py sqlall blog
ALTER TABLE ‚Äúblog_post‚Äù.
And then enter the code we noted down like so:
ADD ‚Äúexcerpt‚Äù text;

150  The Python Book
Web development 
10 
Category model
We can add a model for blog categories:
class Categories(models.Model): name 
= models.CharField(unique=True, 
max_length=200) slug = models.
SlugField(unique=True, max_length=100) 
parent = models.ForeignKey(‚Äòself‚Äô, 
blank=True, null=True, related_
name=‚Äôchild‚Äô) def __unicode__(self):  
return (self.name)
This allows for parent and child categories.
11 
Administrate categories
We can add it to the admin site by 
creating a Categories section in admin.py: 
class CategoriesAdmin(admin.
ModelAdmin): list_display = [‚Äòname‚Äô, 
‚Äòslug‚Äô, ‚Äòparent‚Äô] fields = [‚Äòname‚Äô, 
‚Äòslug‚Äô, ‚Äòparent‚Äô] admin.site.register 
(Categories, CategoriesAdmin)
Before we can make categories, though, we 
need to create the database table:
$ python manage.py syncdb
12 
Categorise the posts
Similarly to what we did with the 
13 
Database category
Like before, we‚Äôll Ô¨Ånd out the SQL needed 
to alter the table: $ python manage.py sqlall 
blog Which for our example returns a somewhat 
different code than before: ‚Äúcategory_id‚Äù 
integer NOT NULL REFERENCES ‚Äúblog_
categories‚Äù (‚Äúid‚Äù) It‚Äôs an ID we‚Äôre getting, not 
text, from the categories table.
14 
Alter table ‚Äì part 2
Again let‚Äôs enter the database shell:
python manage.py dbshell We‚Äôll continue 
much like before, but with the new code: ALTER 
TABLE ‚Äúblog_post‚Äù ADD ‚Äúcategory_id‚Äù 
integer REFERENCES ‚Äúblog_categories‚Äù 
(‚Äúid‚Äù); And Ô¨Ånally, to save: COMMIT;
15 
Administrate categories ‚Äì part 2
Now we can go back to admin.py and add the new category Ô¨Åelds to the PostAdmin model: 
list_display = [‚Äòtitle‚Äô, ‚Äòauthor‚Äô, ‚Äòpub_date‚Äô, ‚Äòcategory‚Äô] fields = [‚Äòtitle‚Äô, 
‚Äòpub_date‚Äô, ‚Äòauthor‚Äô, ‚Äòpost‚Äô, ‚Äòexcerpt‚Äô, ‚Äòcategory‚Äô] Our previous blog posts with no 
category have disappeared! To Ô¨Åx this, go back to models.py and make this change to the Post model: 
category = models.ForeignKey(Categories, blank=True, null=True) So we can now create 
categories separately, assign them to posts, and view posts without a category.
16 
Category display
As our urls.py in the blog directory gets 
all the post Ô¨Åelds, to the index template we just 
add: <p>Category: {{ post.category }}</
p> And to the post template: <p>Category: {{ 
post_list.category }}</p> 
17 
Category page
First we need to deÔ¨Åne our category in 
blog/urls.py. Import Categories and then add: 
def blog_categories(request, category_
id): categories = Categories.objects.
get(pk=category_id) We need the  
category_id to call the corresponding posts.
comments, we want to add a ForeignKey to 
the Post model so we can attribute a post to a 
category. Add this line: category = models.
ForeignKey(Categories)
And move Categories to the top of models.py.
 We can now 
create categories 
separately 
 

The Python Book  151
Web development
24 
RSS URLs
The Ô¨Ånal step is adding the feed 
URL to urls.py: url(r‚Äô^myblog/feed/$‚Äô, 
BlogFeed()), And now your blog is now fully 
functional. With a bit more tweaking and 
theming, you can get it online and blog away!
23 
RSS links
We need to deÔ¨Åne item_link for the 
feed so that the feed items can link to the right 
place. We have to give the complete URL and 
the post ID for it work: def item_link(self, 
post): link = ‚Äúhttp://127.0.0.1:8000/
myblog/‚Äù+str(post.pk) return link
18 
Category deÔ¨Ånition
Finish the deÔ¨Ånition by using the parent_
id to Ô¨Ålter the correct Posts, then render the 
response: category_posts = Post.objects.
filter(category=categories) return 
render_to_response(‚Äòblog/categories.
html‚Äô, dict(category_posts=category_
posts, categories=categories))
Again we‚Äôre calling a new template that we‚Äôll 
construct shortly.
19 
Category URLs 
We‚Äôll create the URL in urls.py as for the 
post page, only it‚Äôll give the slug of the category 
instead of an ID in the link: url(r‚Äô^myblog/
category/(?P<category_id>\d+/$‚Äô, ‚Äòblog.
urls.blog_categories‚Äô),
20 
Category template
We‚Äôll use something similar to the Index 
and Post template to create a category page 
template: {% for post in category_posts 
%} <h2><a href=/myblog/{{ post.pk }}>{{ 
post.title }}</a></h2> {{ post.author 
}} on {{ post.pub_date }} % if post.
excerpt %} <p>{{ post.excerpt }}</p> {% 
else %} <p>{{ post.post|truncatewords:3 
}}</p> {% endif %} <p>Category: {{ 
post.category }}</p> {% endfor %}
21 
Category clickthrough
Finally, let‚Äôs make the categories click 
through to the relevant page by changing the 
22 
RSS
Django has a built-in RSS framework. 
In blog/urls.py add: from django.contrib.
syndication.views import Feed class 
BlogFeed(Feed): title = ‚ÄúBlog Feed‚Äù link 
= ‚Äú/‚Äù def items(self): return Post.
objects.order_by(‚Äú-pub_date‚Äù) def item_
title(self, post): return post.title
category display to be: <p>Category: <a 
href=/myblog/category/{{ categories.pk 
}}>{{ post.category }}</a></p> This can go 
on the categories, post and index template.
 Finally, let‚Äôs make the categories 
click through to the relevant page 
 

Python
1525IF1ZUIPO#PPL
154
Use
1541SPHSBNNJOHJO1ZUIPOPO
3BTQCFSSZ1J
-FBSOIPXUPPQUJNJTFGPS1J
1581SPHSBN.JOFDSBGU1J
1MBZB.JOFDSBGUHBNFPO1J
162#VJMEBO-&%.BUSJY
6TF1JUPDPOUSPMMJHIUTFRVFODFT
1663BTQCFSSZ1JDBSDPNQVUFS
(FUXIFSFZPVSFHPJOHXJUI3BTQCFSSZ1J
XJUI1J
i1ZUIPOJTUIFQFSGFDU
GPVOEBUJPOGPSZPVS
3BTQCFSSZ1JQSPKFDUTw
162
158

5IF1ZUIPO#PPL153
166

1545IF1ZUIPO#PPL
6TF1ZUIPOXJUI1J
Learn the basics of programming in Python with the Raspberry 
Pi, laying the foundations for all your future projects
Programming in Python 
on the Raspberry Pi
This tutorial follows on from the one last 
issue: ‚ÄòSetting up the Raspberry Pi‚Äô, where we 
showed you how to prepare your SD card for 
use with the Raspberry Pi. The beauty of using 
an SD card image is that the operating system is 
ready to go and a development environment is 
already conÔ¨Ågured for us.
We‚Äôll be using a lightweight integrated 
development environment (IDE) called Geany 
to do our Python development. Geany provides 
a friendlier interface compared to text-based 
editors such as nano and will make it easier to 
get into the swing of things.
This tutorial will cover topics such as:
‚Ä¢ basic arithmetic
‚Ä¢ comparison operators, for example ‚Äòequal to‚Äô 
and ‚Äònot equal to‚Äô
‚Ä¢  control structures, for example loops and if 
statements
By the end, we‚Äôll have an advanced version of our 
‚Äòhello world‚Äô application. Let‚Äôs dive straight in‚Ä¶
Resources
A Raspberry Pi with all 
necessary peripherals
An SD card containing the  
latest Debian image for the 
Raspberry Pi  
http://www.raspberrypi.org/downloads
It‚Äôs important to think about data 
types. We convert the number to 
decimal to make sure that we  
don‚Äôt lose any decimal numbers 
during arithmetic
The stopping condition for a while loop 
has to be satisfied at some point in the 
code; otherwise the loop will never end!
It‚Äôs good practice to describe 
what the program‚Äôs purpose is at 
the top of the file. This will help 
you out when working on larger 
projects with multiple files
The print function can only accept string 
data types, so we need to convert any 
variables with a number data type to a string 
before we can print them to the screen

5IF1ZUIPO#PPL155
6TF1ZUIPOXJUI1J
01 
Staying organised
We don‚Äôt want to have messy folders on 
our new Pi, so let‚Äôs go to the Ô¨Å le manager and 
organise ourselves. Open the Ô¨Å le manager by 
clicking the icon next to the menu icon on the 
bottom left of the screen. Create a new folder 
by right-clicking and selecting New>Folder, then 
type a name and click OK. We created a folder 
called Python, and inside that created a folder 
called Hello World v2.
02 
Starting Geany
Start Geany by going to the LXDE menu 
and going to Programs. From here, select Geany. 
Once you‚Äôre in the Geany interface, create a new 
Python Ô¨Å le from a template by selecting ‚ÄòNew 
(with template)>main.py‚Äô. Delete everything in 
this template apart from the Ô¨Å rst line: #!/usr/
bin/env python. This line is important because it 
means you can run the code from the command 
line and the Bash shell will know to open it with 
the Python interpreter.
03 
Saving your work
It‚Äôs always a good idea to keep saving 
your work with Ctrl+S as you program, because 
it would be a shame to lose anything you‚Äôve been 
working on. To save your Ô¨Å le for the Ô¨Å rst time, 
either press Ctrl+S or go to the File menu and 
select Save. Give the Ô¨Å le a sensible name and 
save it in the tidy folder structure you created 
before. It‚Äôs a good habit to be well organised 
when programming, because it makes things 
much easier when your projects become bigger 
and more complicated.
04 
Setting it up
Having detailed comments in your 
code is important because it allows you to note 
down things you Ô¨Å nd confusing and document 
complex procedures. If another programmer has 
to work with your code in the future, they‚Äôll be 
extremely grateful.  Start by adding a comment 
with a description of what the program will do 
and your name. All comment lines start with a 
hash (#) and are not interpreted as code by the 
Python interpreter. We import the sys library 
so we can use the sys.exit function to close the 
program later on. We also import everything 
from the decimal library because we want to 
make use of the decimal type.
05 
Variables
A variable is data that is stored in 
memory and can be accessed via a name. Our 
program is going to start by asking for your 
Ô¨Å rst name, store that in a variable and then 
print out a welcome message. We‚Äôre going to 
add a comment that explains this and create 
a variable called Ô¨Å rstName. Notice how we‚Äôve 
capitalised the Ô¨Å rst letter of the second word to 
make it easier to read. We want the Ô¨Å rstName 
variable to hold the value returned by a function 
called raw_input, that will ask the user for input. 
The question is passed into the print function 
within brackets, and because this is a string 
it is enclosed within quotation marks. A string 
type is basically a collection of characters. Note 
the extra space we‚Äôve added after the colon 
because the user types their input straight after 
this question.
06 
Printing a message
Now that we have a value in Ô¨Å rstName, 
we need to output a welcome message to the 
screen. We print to the screen in Python using 
the print function. The print function is followed 
by a pair of brackets which enclose the values 
to print. When using the addition operator 
with strings, they are joined together. Note 
how Ô¨Å rstName doesn‚Äôt need to be enclosed by 
quotation marks because it is the name of a 
variable. If it was enclosed in quotation marks, 
the text Ô¨Å rstName would be output. We Ô¨Å nish off 
by adding a ‚Äò\n‚Äô character (new line character) to 
our output to leave one blank line before we start 
our next example.
 When using the addition operator 
with strings, they are joined together 
 

1565IF1ZUIPO#PPL
6TF1ZUIPOXJUI1J
07 
Fixing a small issue
The Debian image that we‚Äôre currently 
using has a small misconÔ¨Å guration issue in 
Geany. You‚Äôll know if you have this problem by 
trying to run your program with either the F5 
key or going to the Build menu and selecting 
Execute. If the issue is present then nothing 
will happen and you‚Äôll see a message saying 
‚ÄòCould not Ô¨Å nd terminal: xterm‚Äô. Not to worry, it‚Äôs 
easy to Ô¨Å x. Go to the Edit menu and then select 
Preferences. Go to the Tools tab and change the 
value for Terminal from xterm to lxterminal.
08 
Testing our program
Now we‚Äôve done that part, why not test 
it? It‚Äôs worth noting that you have to save before 
running the program, or anything you‚Äôve done 
since you last saved won‚Äôt be interpreted by 
Python. Run the program by pressing the F5 key. 
Input your name by typing it and then pressing 
the Enter key. Once you have done this, you‚Äôll see 
a welcome message. If the program exits with 
the code 0 then everything was run successfully. 
Press Enter to close the terminal.
09 
Working with numbers
We‚Äôre going to ask the user for a number 
by basically repeating the Ô¨Å rst couple of lines 
we did. Once the user gives us a number, we‚Äôll 
halve, square and double it. The raw_input 
function returns the value that the user input 
as a string. A string is a text-based value so 
we can‚Äôt perform arithmetic on it. The integer 
type in Python can only store whole numbers 
whereas the decimal type can store numbers 
with decimals. We‚Äôre going to do something 
called a type cast, which basically converts a 
10 
Performing arithmetic
The main arithmetic operators in Python 
are + - / *, the latter two being divide and 
multiply respectively. We‚Äôve created three new 
variables called numberHalved, numberDoubled 
and numberSquared. Notice that we don‚Äôt need 
to specify that they should be decimal because 
Python gives a type to its variables from the 
type of their initial value. The number variable 
is a decimal type, so all values returned from 
performing arithmetic on that number will also 
be of a decimal type.
11 
Printing our numbers
Now that we have performed our 
arithmetic, we need to print the results using 
the print function. The print function only 
accepts string values passed to it. This means 
that we need to convert each decimal value to 
a string using the str() function before they can 
be printed. We‚Äôre using a print statement with 
nothing between the quotation marks to print 
one blank line. This works because the print 
function always adds a new line at the end of 
its output unless told otherwise, so printing an 
empty string just prints a new line.
value with one type to another type. We‚Äôre going 
to convert our number string to a decimal value 
because it‚Äôs likely that decimals will be involved 
if we are halving numbers. If the number was of 
an integer type, any decimal values would simply 
be cut off the end, without any rounding. This is 
called truncation.
 Save before running the program, 
or anything you‚Äôve done since you last 
saved won‚Äôt be interpreted 
 
 The print 
function only 
accepts string 
values, so convert 
each decimal 
value to a string 
 

5IF1ZUIPO#PPL157
6TF1ZUIPOXJUI1J
12 
Input validation with While loops 
and If statements
To demonstrate a while loop and if statements, 
we will output a question to the user that 
requires a yes or no answer. We‚Äôre going to ask 
them if they want to continue ‚Äì and for this we 
require either a lower-case ‚Äòyes‚Äô, or a lower-
case ‚Äòno‚Äô. A while loop is a loop that runs until a 
condition is met. In this case, we will create a 
variable called yesOrNo and the while loop will 
run while yesOrNo is false. The yesOrNo variable 
will be a Boolean type that can be either True or 
False. The variable will be initialised with a value 
of False, or the while loop will not run.
A while loop has the format ‚Äòwhile [condition]:‚Äô 
‚Äì where any code that is part of the while loop 
needs to be indented in the lines below the 
colon. Any code that is not indented will not 
be part of the while loop. This is the same for 
an if statement. The condition is checked with 
the comparison operator ‚Äò==‚Äô. A single ‚Äò=‚Äô is an 
assignment operator whereas a double equals 
is a comparison operator. Another common 
comparison operator is ‚Äò!=‚Äô ‚Äì which means ‚Äònot 
equal to‚Äô.
We create a variable called ‚Äòresult‚Äô, which 
holds the result of the question, do you want to 
continue? We then check this result is valid with 
an if statement. Notice the ‚Äòor‚Äô operator which 
allows two conditions to be tested. If the user 
inputs a correct value then we set yesOrNo to 
True, which stops the while loop on the next run. 
Otherwise, we output an error message and 
the while loop will run again. The user can use 
the Ctrl+C command at the terminal to exit the 
program at any time.
13 
Continue or exit?
Next we will deal with the result 
that was stored during the while loop with if 
statements. If the user typed ‚Äòyes‚Äô then we 
will print ‚ÄòContinuing‚Äô. Otherwise, we will print 
‚ÄòExiting‚Äô and then call the sys.exit function. You 
don‚Äôt have to do anything else for the program 
to continue because it will simply carry on if the 
sys.exit function wasn‚Äôt called. This code also 
shows that the newline character \n can be 
used anywhere in a string, not just in separate 
quotation marks like above.
14 
Loops with numbers
We‚Äôll be using a while loop that uses a 
number and a <= (less than or equal to) operator 
as its stopping condition. The while loop will be 
used to increment the number by 1, printing the 
change on each loop until the stopping condition 
is met. The count variable allows us to know 
exactly how many times we have been through 
the while loop.
15 
Incrementing numbers with a loop
The while loop will run until the count is 
6, meaning that it will run for a total of 5 times 
because the count begins at 1. On each run, the 
while loop increments the number variable and 
then prints what is being added to the original 
number, followed by the result. Finally, the count 
is incremented.
16 
Finishing off
The Ô¨Å nal step is to print that the 
program is exiting. This is the last line and we 
don‚Äôt have to do anything else because Python 
simply Ô¨Å nishes when there are no more lines 
to interpret.
17 
Admire your work
Now that we‚Äôve Ô¨Å nished coding, save any 
changes you have made and run your program 
with the F5 key.
 The count 
variable lets us 
know exactly how 
many times we 
have been through 
the while loop 
 

1585IF1ZUIPO#PPL
6TF1ZUIPOXJUI1J
Learn how to get started with Minecraft Pi, a brilliant tool for 
learning to code Python on the Raspberry Pi... 
Program Minecraft Pi
Minecraft is a revolutionary sandbox game in which the 
protagonist, known only as Steve, is tasked with surviving 
and thriving in a huge, blocky 3D world considerably bigger 
than planet Earth. Each one-metre segment of the world 
is represented by a block. The block could be any one of a 
number of items and the deeper you dig into the earth the 
rarer the items might be. It‚Äôs your challenge to dig, build and 
survive against an army of nocturnal monsters by harnessing 
the items you discover. 
Minecraft Pi removes the survival element of the game, 
leaving you in a kind of Lego construction mode, where you 
have an inÔ¨Å nite supply of many of the game‚Äôs items and free 
reign to build with them. Minecraft Pi is also the only version 
of Minecraft (which is available on just about every gaming 
platform in circulation) where the player is actively encouraged 
to hack the world using a simple application programming 
interface (API). In this tutorial we‚Äôre going to learn the basics...
01 
Install Minecraft Pi
You‚Äôll need to have Minecraft Pi installed on your 
Raspberry Pi Ô¨Å rst ‚Äì you can Ô¨Å nd our full guide to doing that 
online at bit.ly/1mgAj7S. If you know what to do with a tar 
ball and don‚Äôt need to follow step-by-step instruction, you 
just need to download the following Ô¨Å le and unpack it into 
your home folder: bit.ly/1jpZ17Z.
02 
You must start X
There are a few things you need to bear in mind 
when coding and playing Minecraft on the Pi. Lots of people 
seem to get caught out by the fact the game won‚Äôt work 
from the command line. Assuming that you haven‚Äôt set your 
Pi to do so, you must start the desktop environment with 
startx. Launch the game from the terminal by entering the 
mcpi folder and typing:
  ./minecraft-pi

5IF1ZUIPO#PPL159
6TF1ZUIPOXJUI1J
04 
Tabbing out
One thing from our online Minecraft Pi tutorial (bit.
ly/1mgAj7S) that‚Äôs worth reiterating is the Ô¨Å ddly nature of 
playing Minecraft Pi and starting scripts at the same time. 
05 
Read the docs!
You might think there is no 
documentation to help you code with 
Minecraft Pi, but you‚Äôd be wrong. 
You see, one thing all good software 
scientists know is that the source code 
for a program doubles up as a great 
instruction manual. For example, all 
the block types and names you can use 
in the game can be found by browsing 
through the block.py script found in 
the 
/mcpi/api/python/mcpi 
folder. 
Even better, you are able to Ô¨Å nd all of 
the functions you can carry out in the 
game simply by looking in ‚Äòminecraft.
py‚Äô ‚Äì they‚Äôre even well commented so 
you know that setPos allows you to ‚Äòset 
entity position‚Äô. 
06 
A warning about scripts
What will you call your very 
Ô¨Å rst 
Minecraft 
Pi 
script? 
There‚Äôs 
an 
immediate 
temptation 
to 
call 
it ‚Äòminecraft.py‚Äô. Sadly, doing this 
can render the scripting aspect of 
Minecraft on the Raspberry Pi broken 
as 
you‚Äôve 
potentially 
overwritten 
the 
most 
important 
source 
code 
Ô¨Å le in the game. Take a look in the 
/mcpi/api/python/mcpi folder ‚Äì each 
Ô¨Å le name is out of bounds! 
07 
Copy the API folder
The best way to keep the original 
API Ô¨Å les of Minecraft Pi safe is to create 
a copy of the API folder that can be used 
separately. Do this by creating a new 
folder in your home folder and entering 
it (eg mkdir mc_projects && cd mc_
projects) and then typing the following: 
  cp -r ~/mcpi/api/python/* .
The space followed by the full stop is 
required at the end of the command. 
03 
Desktop shortcut
Launching the game from the terminal isn‚Äôt everyone‚Äôs 
cup of tea. Coupled with the fact you need a separate terminal 
window open to launch your Minecraft Pi scripts (meaning you 
need two terminal windows open) it‚Äôs worth creating a desktop 
shortcut to launch the game. Open a terminal and type:
  cd ~/Desktop
Now create a new desktop Ô¨Å le by typing: nano minecraft.
desktop and copy the following into it:
  [Desktop Entry]
  Name=Minecraft Pi
  Comment=Minecraft for the Pi
  Exec=/home/pi/mcpi/minecraft-pi
  Icon=/home/pi/mcpi/logo.png
  Terminal=false
  Type=Application
  Categories=Games;Education;
  StartupNotify=true
Press CTRL+X, Y and then press Enter in order to save the Ô¨Å le 
and exit. The icon isn‚Äôt in the mcpi folder by default, so you 
will need to do a Google Image search for the Minecraft icon, 
call it ‚Äòicon.png‚Äô and drop it into the folder. It needs to be 
256 x 256 pixels and you may need to restart your desktop 
environment before the icon appears.  
Minecraft Pi needs to be running before 
you will be able to start a Python script 
that interacts with the game. This being 
the case, you will need to press Tab 
from Minecraft Pi in order to release 
the mouse so that you can then interact 
with the terminal window and load all 
of your Python scripts.
 Create a new folder to keep 
the original API files safe 
 

1605IF1ZUIPO#PPL
6TF1ZUIPOXJUI1J
08 
Your Ô¨Årst script
Next we‚Äôll create a quick test script and make sure that 
we can successfully use the Python Minecraft API from its new 
location. Using your favourite text editor, type the following and 
save it as ‚Äòboilerplate.py‚Äô:
from mcpi.minecraft import Minecraft
from mcpi import block
mc = Minecraft.create()
mc.postToChat(≈éMinecraft API Connected≈è)
If Minecraft Pi isn‚Äôt running, start it now. When you‚Äôre in the 
game, press Tab to release the mouse, open a terminal window 
and navigate to your Minecraft project folder.
Once inside, type python boilerplate.py and hit return ‚Äì 
you will see the message ‚ÄòMinecraft API Connected‚Äô appear as 
text chat within Minecraft Pi. We recommend that you start all 
of your Minecraft Pi scripts with this boilerplate code. 
09 
It didn‚Äôt work?! 
If at this point you‚Äôre getting an error from Python, look 
back over your boilerplate code to ensure that everything‚Äôs 
correct ‚Äì nine times out of ten, it‚Äôs because of a typo. If you‚Äôre 
getting an import error you may have had an issue copying the 
API folder to the new location. Retrace your steps from the 
beginning and try again. 
10 
The fun starts here‚Ä¶
Now that we‚Äôve successfully tested our boilerplate 
code we can start having real fun with the Minecraft Pi API and 
Python. There are a wide range of options to take advantage 
of, such as getting and setting blocks, Ô¨Ånding and setting  
the player‚Äôs position, changing and setting the camera and  
11 
The co-ordinates system
It‚Äôs impossible to do anything in 
Minecraft Pi unless you‚Äôre familiar with 
reading and interpreting the games co-
ordinate system. It‚Äôs a fairly unusual 
system too, which switches the Y and Z 
co-ordinates in 3D space ‚Äì in Minecraft 
Pi ‚ÄòX‚Äô is sideways movement, ‚ÄòZ‚Äô is forward 
movement and ‚ÄòY‚Äô is vertical movement. 
You can always Ô¨Ånd your current co-
ordinates by glancing in the top-left 
Above Print your position on the screen so you can understand the co-ordinate system
12 
Origin point
When you load up a new 
Minecraft game for the Ô¨Årst time, you‚Äôll 
start at the exact centre of the map, 
meaning your co-ordinates will be 0, 0, 
0. Why is this useful? Because it makes 
building blocks and collections of blocks 
much easier for the beginner. At the 
origin point you don‚Äôt need to work out 
where your surrounding blocks are ‚Äì 
they‚Äôre simply plus or minus 0. 
corner of the screen, where they‚Äôre 
displayed. It‚Äôs worth taking a few minutes 
just to get familiar with the co-ordinates 
and how they change when you move 
around the game-world.
so on. The most commonly used API 
features, though, are the ones that 
revolve around manipulating the player‚Äôs 
position and creating new blocks at set 
positions in the game world. 

5IF1ZUIPO#PPL161
6TF1ZUIPOXJUI1J
14 
setBlock
The next most common action is setting a block to a 
certain type. You can Ô¨Å nd the full list of available blocks in the 
mcpi folder in a script called ‚Äòblocks.py‚Äô. We can append to our 
script in Step 13 by dropping a particular block type in our wake 
as we walk around the game world. After the ‚Äòmc.postToChat‚Äô 
line in our previous script add: mc.setBlock((my_pos), block.
STONE) so the while loop section of the script now looks like this: 
mc.postToChat(≈éStone path mode!≈è)
while True:
    my_pos = mc.player.getPos()
    mc.setBlock((my_pos), block.STONE)
    time.sleep(1)
15 
Teleport Steve
So far we‚Äôve read the location of 
the player and used it in the game, let‚Äôs 
Ô¨Å nish off by manipulating the player‚Äôs 
location using the setPOS method. In the 
following script we‚Äôre going to draw the 
player back to the origin point, assuming 
they‚Äôve wandered off and got lost:
from mcpi.minecraft import Minecraft
from mcpi import block
import time
mc = Minecraft.create()
mc.postToChat(≈éMinecraft API 
Connected≈è)
mc.player.setPos(0, 10, 0)
If you wanted to drop the player from a 
great height instead, you would change 
the Y co-ordinate to a large positive 
number. For example: 
mc.player.setPos(0, 65, 0). 
Above Left  MinecraftPi API works on multiple 
languages - look out for Python in this tutorial
Above Right Make use of the module to 
program games, movements and more
Above The Minecraft Python module allows 
you to create all materials any way you wish
13 
getPos
Let‚Äôs start out with a simple operation with the API 
‚Äì Ô¨Å nding your location. Knowing exactly where the player 
is in the game world is a surprisingly powerful and useful 
ability in Minecraft Pi. You can use it to help you do lots of 
things, including setting blocks near (or under) the player and 
triggering events (like Ô¨Å nding speciÔ¨Å c locations). Below we‚Äôll 
Ô¨Å nd the player location and set it to the variable my_pos and 
prove that it works by printing to the chat window. 
from mcpi.minecraft import Minecraft
from mcpi import block
import time
mc = Minecraft.create()
mc.postToChat(≈éMinecraft API Connected≈è)
while True:
    my_pos = mc.player.getPos()
    mc.postToChat(≈éMy position is:≈è + str(my_pos))
    time.sleep(1)
Now, when you activate this script when 
playing the game, you should notice that 
your character will drop a block of stone 
every second at your current location. 
You should also consider making use of 
the setBlocks  function to set a number 
of blocks simultaneously using the start 
co-ordinates and the end co-ordinates ‚Äì 
this can help you make bigger structures.
Enter the Kano
If you‚Äôve got a young Minecraft addict 
in your house that isn‚Äôt quite ready 
to try out Python scripting, there is 
another avenue for you. Kano OS 
is a new operating system for the 
Raspberry Pi designed for younger 
children. Integrated into the OS is 
a modiÔ¨Å ed version of Minecraft Pi, 
which uses a Scratch-like visual 
programming interface. It allows you 
to snap blocks together to manipulate 
the Minecraft world in much the same 
way as we have demonstrated here. 
You can learn more at
www.kano.me/downloads 
 Use the setBlocks function to set a 
number of blocks simultaneously 
 

162  The Python Book
LED Matrix display systems Ô¨Å nd use everywhere from gaudy 
kebab shops to impressive steampunk-styled systems
Build a complex LED matrix
Driving LEDs in an efÔ¨Å cient fashion is a science of its own. 
The common availability of single-board computers has put 
the necessary technology within reach of everyone.
When dealing with LED displays, two different systems 
must be considered. We will focus on traditional matrix-
based systems made up of one or more LEDs. Their 
affordable nature makes them ideally suited to classic display 
applications: they communicate currency prices, provide 
stock-brokers with updates from the trading Ô¨Ç oor and have 
even been used as basic displays for primitive oscilloscopes.
Finally, we will also provide you with an overview of 
electronic basics. This tutorial is a bit more advanced than the 
ones we usually run in this section of the magazine, and it‚Äôs 
also worth noting that we‚Äôre going to be programming with C 
rather than Python. Follow along using the code listing annos.
01 
Think about LEDs
Standalone LEDs are primitive ‚Äì they light up once 
current Ô¨Ç ows through them. Driving a few LEDs is as easy as 
connecting them to GPIO pins along with a resistor. Sadly, this 
method becomes wasteful once more than a few of them get 
involved ‚Äì driving 16 diodes ties up 16 pins.
02 
Arrange your diodes
Methods were devised to reduce the number of pins 
needed. Matrix-based systems are resilient to individual 
diode failures, and provide a pin-to-LED ratio of n=(n/2)^2. The 
following steps assume a 16x16 LED matrix which is made 
up according to Figure A. Since LEDs permit current in only 
one direction, you can enable a single LED by bringing the 
corresponding pins high and low.
Resources
Breadboard & wires
16x16 LED Matrix
2x 74HC238
2x 74HC244
16x 220 Ohm Resistor
Source code: FileSilo.co.uk

The Python Book  163
Use Python with Pi
04 
Separate concerns
Chip two goes by the name of 74HC244, which is 
described as an octal buffer with tri-state capability. Tri-State 
outputs can physically disconnect themselves from the bus 
line. This permits you to tie their outputs together without 
fear of short circuits. As long as all but one chip are in tri-state 
mode, no current can Ô¨Ç ow between high and low output pins.
03 
Harness the MUX
Our LED module has a total of 32 inputs, which 
overwhelms older versions of the RPi. The first way to restrict 
their number comes in the shape of the 74HC238, a component 
described as a 3-to-8 line decoder/demultiplexer. Its function is 
described in the Figure B image on the next page.
Above The extended version of this schematic is inside FileSilo.co.uk 
‚Äì  just sign in and download
05 
Round them up
Four GPIO pins control the enabled display ‚Äòline‚Äô. 
Three pins conÔ¨Å gure the address which is to be emitted, 
while the signal emitted from the fourth pin is connected to 
the activity inputs. This ensures that but one IC is active. The 
74HC244 ensures that but one of the two groups is active.
06 
ConÔ¨Å gure the pins
We used a library from Hussam Al-Hertani‚Äôs 
Hertaville blog (hertaville.com/2014/07/07/rpimmapgpio). 
The Ô¨Å rst step involves setting output functions. As the GPIOs 
are set to outputs, the tri-state feature might connect the 
internal state to the output pins of the IC. This could lead to 
internal shorting if the output is not turned off.
#include ‚Äú‚Ç¨≈ìmmapGpio.h‚Äù
#include <unistd.h>
#include <stdio.h>
GH¬∫QH3,1$
GH¬∫QH3,1$
GH¬∫QH3,1$
GH¬∫QH3,1$
GH¬∫QH3,1&6
GH¬∫QH3,1&6
GH¬∫QH3,1'
GH¬∫QH3,1'
GH¬∫QH3,1'
GH¬∫QH3,1'
GH¬∫QH3,1'
GH¬∫QH3,1'
GH¬∫QH3,1'
GH¬∫QH3,1'
void VHW$GGUHVV(unsigned FKDU _which, mmapGpio*BZKHUH
{
  if(_which&
  {
BZKHUH->ZULWH3LQ+LJK3,1$
  }
  else
  {
BZKHUH->ZULWH3LQ/RZ3,1$
  }
  if(_which&
  {
BZKHUH->ZULWH3LQ+LJK3,1$
  }
  else
  {
BZKHUH->ZULWH3LQ/RZ3,1$
  }
  if(_which&
  {
BZKHUH->ZULWH3LQ+LJK3,1$
  }
  else
  {
BZKHUH->ZULWH3LQ/RZ3,1$
  }
  if(_which&
  {
BZKHUH->ZULWH3LQ+LJK3,1$
  }
  else
  {
BZKHUH->ZULWH3LQ/RZ3,1$
  }
}
void VDIHO\6HW5RZ(unsigned FKDU _which, mmapGpio*BZKHUH
{
BZKHUH->ZULWH3LQ+LJK3,1&6
BZKHUH->ZULWH3LQ+LJK3,1&6
  if(_which==
  {
BZKHUH->ZULWH3LQ/RZ3,1&6
  }
  else
  {
Full code listing
Step 07
Step 12
Step 08
Figure A
 Our LED model has a 
total of 32 inputs, which 
overwhelms older 
versions 
 

164  The Python Book
Use Python with Pi 
08 
Select a row
In the 74HC244, we Ô¨Årst disable both units and proceed 
to turning on the one which is needed. This sequence prevents 
ghosting during the switching process.
09 
Do the main loop
The outer part of the loop consists of logic that 
manages the addressing of the individual rows. Our program 
must Ô¨Çash the individual LED groups one after another using 
the building blocks described in the next step.
10 
Complete the loop
Writing out data is accomplished in a sequence of three 
commands. We select the row, conÔ¨Ågure the column and then 
write out the data bits that are to be displayed. A small pause 
is observed in order to give the LEDs some time to ‚Äòburn into‚Äô 
the viewer‚Äôs eyes.
      _where->writePinLow(PINCS1);
  }
}
void setData(unsigned char _which, mmapGpio* _where)
{
    if(_which&1)
    {
        _where->writePinHigh(PIND0);
    }
    else
    {
        _where->writePinLow(PIND0);
    }
    if(_which&2)
    {
        _where->writePinHigh(PIND1);
    }
    else
    {
        _where->writePinLow(PIND1);
    }
    if(_which&4)
    {
        _where->writePinHigh(PIND2);
    }
    else
    {
        _where->writePinLow(PIND2);
    }
    if(_which&8)
    {
        _where->writePinHigh(PIND3);
    }
    else
    {
        _where->writePinLow(PIND3);
    }
    if(_which&16)
    {
        _where->writePinHigh(PIND4);
    }
    else
    {
        _where->writePinLow(PIND4);
    }
    if(_which&32)
    {
        _where->writePinHigh(PIND5);
    }
    else
    {
        _where->writePinLow(PIND5);
    }
    if(_which&64)
    {
        _where->writePinHigh(PIND6);
    }
    else
    {
        _where->writePinLow(PIND6);
    }
    if(_which&128)
    {
        _where->writePinHigh(PIND7);
    }
    else
Full code listing
07 
Power the MUX
Create a convenience function taking an address 
ranging from zero to 15. It is converted into pin outputs for our 
3-to-8-demultiplexer. The effect of this is that all but one of 
the sixteen rows is to be supplied with energy.
Step 08
Step 11
Figure B
Above Digital LED matrices like this one give you far more control over 
each individual ‚Äòpixel‚Äô in the display
Two versions of LED 
strips are offered. 
‚ÄòPrimitive‚Äô ones are 
based on analogue 
technology. In it, an 
entire strip of diodes 
has the colour set 
by the three input 
pins. Systems such 
as the mega-display 
shown in the left-
hand image require 
the use of the 
digital version. They 
are based on the 
concept of the shift 
register. Your system 
inputs individual 
colour values which 
are then pushed on 
along the strip.
LED 
stripes

The Python Book  165
Use Python with Pi
11 
Energy control
LEDs light up if current Ô¨Ç ows through them. SetData pulls 
the pins of the 74HC244 low to ensure that the energy supplied 
from the 74HC238 can Ô¨Ç ow through the diode.
12 
Avoid GPIO trouble
The Raspberry Pi Foundation has a tendency to change 
the layout of the expansion header regularly, a habit which 
professional manufacturers of process computers abhor. 
It‚Äôs recommended to handle the mapping between pins and 
functions via a set of deÔ¨Å nes. Our code is optimised for a 
Rev2 Raspberry Pi with a ‚Äòshort‚Äô header ‚Äì 40-pin variants will 
require readjustments making sure the physical pin numbers 
correspond to the logical GPIO numbers.
13 
Add example data
Test the code by setting the datastore to a value of your 
choice. Setting 64 to all Ô¨Å elds will disable one row in each part 
of the display.
14 
Kick it off
Check all connections between the planar and the 
single-board computer, and proceed to starting the compiled 
app. Don‚Äôt forget to use the sudo command ‚Äì direct memory 
access is restricted to root in order to prevent apps from 
causing havoc in the physical memory. Users are accustomed 
to this, so requiring them to put a sudo in front of the 
command doesn‚Äôt cause concern.
15 
Notice a Ô¨Ç icker
Sharp-eyed readers will notice an occasional Ô¨Ç icker 
where one line appears brighter than the others. This is 
caused by the stalling of the program ‚Äì if the kernel does 
other work, the switching routine can‚Äôt run. We could solve 
this problem by using a real-time Linux kernel. 
    {
        _where->writePinLow(PIND7);
    }
}
int main(void)
{
  mmapGpio rpiGpio; 
  //Set outputs
  rpiGpio.setPinDir(PINA0,mmapGpio::OUTPUT);
  rpiGpio.setPinDir(PINA1,mmapGpio::OUTPUT);
  rpiGpio.setPinDir(PINA2,mmapGpio::OUTPUT);
  rpiGpio.setPinDir(PINA3,mmapGpio::OUTPUT);
  //TURN OFF ASAP!
  rpiGpio.setPinDir(PINCS0,mmapGpio::OUTPUT);
  rpiGpio.writePinHigh(PINCS0);
  //TURN OFF ASAP!
  rpiGpio.setPinDir(PINCS1,mmapGpio::OUTPUT);
  rpiGpio.writePinHigh(PINCS1);
  rpiGpio.setPinDir(PIND0,mmapGpio::OUTPUT);
  rpiGpio.setPinDir(PIND1,mmapGpio::OUTPUT);
  rpiGpio.setPinDir(PIND2,mmapGpio::OUTPUT);
  rpiGpio.setPinDir(PIND3,mmapGpio::OUTPUT);
  rpiGpio.setPinDir(PIND4,mmapGpio::OUTPUT);
  rpiGpio.setPinDir(PIND5,mmapGpio::OUTPUT);
  rpiGpio.setPinDir(PIND6,mmapGpio::OUTPUT);
  rpiGpio.setPinDir(PIND7,mmapGpio::OUTPUT);
unsigned char dataStore[2][16];
for(int j=0;j<2;j++)
{
for(int k=0;k<16;k++)
{
  dataStore[j][k]=64;
}
}
  int blockCounter=0;
  int rowCounter=0;
      while(1)
    {
    blockCounter++;
    if(blockCounter==16)
    {
      if(rowCounter==0)
      {
        blockCounter=0;
        rowCounter=1;
      }
      else
      {
        blockCounter=0;
        rowCounter=0;
      }
    }
    safelySetRow(rowCounter, &rpiGpio);
    setAddress(blockCounter, &rpiGpio);
    setData(dataStore[rowCounter][blockCounter], &rpiGpio);
    usleep(50);
    
    }
     
  return 0;
}
Full code listing
Step 06
Step 09
Step 13
Step 10
Above This is the full schematic of the LED matrix that we‚Äôre working 
with here (you can also view it at its full size on FileSIlo)
Full code & 
schematics
FileSilo.co.uk

166  The Python Book

Cars are getting clever. These days, with smart navigation 
interfaces built into new cars, you don‚Äôt need to go out and 
buy yourself a TomTom to get help with directions. But if 
you‚Äôve got a Raspberry Pi then you don‚Äôt even need to buy 
that ‚Äì let alone a new car!
In this project we will show you how to build your own 
car computer with your Pi, a quality touchscreen like the 
9-inch model from SainSmart that we‚Äôre using here, and a 
few other bits like a GPS module and USB 3G modem. Your 
CarPi will be able to use open source navigation software 
Navit to show your route map on screen, plus speech 
synthesis to read out directions, and it will also be able to 
check your location and give you weather reports. It‚Äôll work 
as a music player too, of course.
It‚Äôs an ambitious project, but you will gain a solid 
understanding of custom-made interfaces, navigation 
software and geolocation data, touchscreen calibration, 
speech synthesis and more. While you don‚Äôt have to use 
the same SainSmart screen as us, we do recommend it for 
this project as it is one of the few large touchscreens out 
there for the Pi. There are more improvements at the end 
too, so check the components list, make sure you‚Äôve got 
everything and let‚Äôs get started!
Raspberry Pi 
Car Computer
Make your own touchscreen navigation 
system that gives directions, local 
weather reports and plays music
Use Python with Pi
The Python Book  167

168  The Python Book
01 
Basic conÔ¨Å guration
Boot up your Raspberry Pi and expand the Ô¨Å lesystem 
using raspi-conÔ¨Å g. Go to Advanced Options and disable the 
Serial connection ‚Äì you‚Äôll need this to talk to the GPS module 
later. In raspi-conÔ¨Å g, enable X at boot as the pi user. Say Yes to 
reboot. Once rebooted, ensure your packages are up to date with:
  sudo apt-get update
  sudo apt-get upgrade
04 
Connect the screen
The SainSmart screen doesn‚Äôt come with any written 
instructions. Instead there is a YouTube video on their website 
with details about how to put it together: bit.ly/1DF6eJJ. The 
important part is that the DC power supply should be 12V.
03 
Install navigation software
Begin to install the Navit navigation software by entering:
  sudo apt-get install navit gpsd gpsd-clients espeak
  sudo nano /etc/default/gpsd
  set START_DAEMON=‚Äútrue‚Äù
‚Ä¶and set:
  DEVICES=‚Äù/dev/ttyAMA0‚Äù
Start the GPS daemon with:
  sudo /etc/init.d/gpsd start
You can check it‚Äôs working by looking at the GPS data with:
  cgps -s
02 
Connect GPS module
Solder the pin headers onto the Adafruit GPS module. 
You can also solder the battery connector which is used to keep 
the device partially active, giving a faster Ô¨Å x. You only need to use 
4 pins: 3.3V, ground, serial transmit and serial receive. Power the 
Pi off again before connecting anything.
As we are using GPS, the antenna will have to go outside or 
under a window to gain signal. Connect the antenna to the board 
and power everything back on. The light on the GPS module will 
Ô¨Ç ash frequently while Ô¨Å nding a Ô¨Å x. Once it has one, it will blink 
every 15 seconds.
05 
Set the screen resolution
We will have to force the correct resolution (1024x600) 
for the screen by editing /boot/conÔ¨Å g.txt with sudo. To do so, 
add the following options:
  framebuffer_width=1024
  framebuffer_height=600
  hdmi_force_hotplug=1
  hdmi_cvt=1024 600 60 3 0 0 0
  hdmi_group=2
  hdmi_mode=87
For the changes to properly take effect you will need to reboot 
with sudo reboot.
06 
Download kernel source
To start the touchscreen, you need to compile an 
extra kernel module to support it. The program rpi-source 
(github.com/notro/rpi-source/wiki) will Ô¨Å nd the source of 
your kernel. Install rpi-source with:
  sudo wget https://raw.githubusercontent.com/notro/ 
  rpi-source/master/rpi-source -O usr/bin/rpi-source  
  && sudo chmod +x /usr/bin/rpi-source && /usr/bin/ 
  rpi-source -q -tag-update
Then run rpi-source to get the source of the running kernel.
Above We‚Äôre using 
Adafruit‚Äôs excellent 
GPS Breakout kit 
here: bit.ly/1G8X2gw

The Python Book  169
Use Python with Pi
#!/usr/bin/env python2
import os, sys, requests, pygame
from gps import *
from pygame.locals import *
class WeatherClient:
    apikey = ‚Äú7232a1f6857090f33b9d1c7a74721‚Äù
    @staticmethod
    def latlon():
        gpsd = gps(mode=WATCH_ENABLE)
 
# Needs better error handling        
        try:
            while True:
                report = gpsd.next()
                if report[‚Äòclass‚Äô] == ‚ÄòTPV‚Äô:
                    gpsd.close()
                    return report[‚Äòlat‚Äô], report[‚Äòlon‚Äô]
        except:
            return None, None
    @staticmethod
    def usefuldata(j):
        # Returns a string of useful weather data from a LOT of json
        d = j[‚Äòdata‚Äô][‚Äòcurrent_condition‚Äô][0]
        out = ‚ÄúNow - Temp: {0}C, Feels Like: {1}C, Description: {2}\n‚Äù\
              .format(d[‚Äòtemp_C‚Äô],
                      d[‚ÄòFeelsLikeC‚Äô],
                      d[‚ÄòweatherDesc‚Äô][0][‚Äòvalue‚Äô])
        hourly = j[‚Äòdata‚Äô][‚Äòweather‚Äô][0][‚Äòhourly‚Äô]
        hour_count = 1
        for h in hourly:
            out += (‚Äú+{0}hr - Temp: {1}C, Feels Like: {2}C, Chance of Rain:‚Äù
                    ‚Äú {3}%, Description: {4}\n‚Äù)\
                    .format(hour_count, 
                            h[‚ÄòtempC‚Äô],
                            h[‚ÄòFeelsLikeC‚Äô],
                            h[‚Äòchanceofrain‚Äô],
                            h[‚ÄòweatherDesc‚Äô][0][‚Äòvalue‚Äô])
        hour_count += 1
        # Rstrip removes trailing newline
        return out.rstrip()
    @staticmethod
    def update():
        errstr = ‚ÄúError getting weather data‚Äù
        lat, lon = WeatherClient.latlon()
        if lat == None or lon == None:
            return errstr
 
        api_req = (‚Äúhttp://api.worldweatheronline.com/free/v2/weather.ashx‚Äù
        ‚Äú?q={0}%2C{1}&format=json&key={2}‚Äù).format(lat, lon,
                                                   WeatherClient.apikey)
        r = None
07 
Update GCC
Recent Raspberry Pi kernels are 
compiled with GCC 4.8. Raspbian only 
comes with 4.6 so you will have to install 
4.8 to continue with the following steps. 
Do this by entering:
  sudo apt-get install -y gcc-4.8  
  g++-4.8 ncurses-dev
Then you have to set GCC 4.8 as  
the default:
  sudo update-alternatives  
  --install /usr/bin/gcc gcc /usr/ 
  bin/gcc-4.6 20
  sudo update-alternatives  
  --install /usr/bin/gcc gcc /usr/ 
  bin/gcc-4.8 50
  sudo update-alternatives  
  --install /usr/bin/g++ g++ /usr/ 
  bin/g++-4.6 20
  sudo update-alternatives  
  --install /usr/bin/g++ g++ /usr/ 
  bin/g++-4.8 50
08 
Pick the module to compile 
Rpi-source puts the kernel 
source in a folder called ‚Äòlinux‚Äô. To  
choose the USB Touchscreen Driver, 
enter the following:
  cd linux
  make menuconfig
  Device Drivers ->  Input device  
  support -> Generic input layer  
  (needed for keyboard, mouse,  
  ‚Ä¶)  -> Touchscreens (press space 
  to include)  -> USB Touchscreen  
  Driver (press M to make module)
Once you‚Äôve done that, you then need 
to make sure you save your changes as 
‚Äò.conÔ¨Åg‚Äô and run scripts/diffconÔ¨Åg to see 
the differences.
09 
Compile and install  
the module 
Now you need to compile and install the 
module. Do so by entering:
  make prepare
  make SUBDIRS=drivers/input/ 
  touchscreen modules
  sudo make SUBDIRS=drivers/input/ 
  touchscreen modules_install
  sudo depmod
If you unplug and reconnect the 
touchscreen, it should work Ô¨Åne but it 
will probably need calibrating.

170  The Python Book
Use Python with Pi 
10 
Calibrate the touchscreen 
At this point, you can easily calibrate the touchscreen by 
entering the following: 
  cd /etc/X11
  sudo mkdir xorg.conf.d
  cd xorg.conf.d
  sudo nano 99-calibration.conf
‚Ä¶with the following content:
  Section ‚ÄúInputClass‚Äù
      Identifier ‚Äúcalibration‚Äù
      MatchProduct ‚ÄúeGalax Inc. USB TouchController‚Äù
      Option   ‚ÄúSwapAxes‚Äù   ‚Äú1‚Äù
      Option   ‚ÄúInvertX‚Äù    ‚Äú1‚Äù
  EndSection
Invert X actually inverts Y because the axes have been swapped 
around. Reboot again for these changes to occur. Now the 
calibration is roughly correct, download an input calibrator that 
Adafruit have packaged already.
  wget http://adafruit-download.s3.amazonaws.com/ 
  xinput-calibrator_0.7.5-1_armhf.deb
  sudo dpkg -i xinput-calibrator_0.7.5-1_armhf.deb
  DISPLAY=:0.0 xinput_calibrator
DISPLAY=:0.0 is useful because you can run the program from 
any terminal (including an SSH session) and have it appear on 
the touchscreen. Touch the points on the screen as prompted. 
Once the program is Ô¨Å nished, you should get an output that is 
similar to the following:
  Option  ‚ÄúCalibration‚Äù   ‚Äú84 1957 270 1830‚Äù
Add it to the ‚Äò99-calibration.conf‚Äô Ô¨Å le that we created earlier 
just below the other Option entries.
11 
Download maps   
Navit needs maps; download them from maps.navit-
project.org. You can either use the web browser on the Pi or 
download the map from another machine and copy it using 
scp. Use the predeÔ¨Å ned area option to select where you live. 
The smaller the area that you pick, the less data you will have to 
process. Here the UK has a map size of 608 MB. Now move the 
map to the navit folder:
  mkdir -p /home/pi/.navit/maps
  mv /home/pi/Downloads/$your_map /home/pi/.    
  navit/$country.bin
For example:
  mv /home/pi/Downloads/osm_bbox_-9.7,49.6,2.2,61.2.bin  
  /home/pi/.navit/maps/UK.bin
12 
Navit conÔ¨Å guration
Sudo-edit /etc/navit/navit.xml with your favourite 
editor. Search for openstreetmaps. Now disable the sample 
map above, enable the openstreetmap mapset and set the 
data variable to where you just moved your map. In this case 
it looks like this:
   <!-- Mapset template for openstreetmaps -->
   <mapset enabled=‚Äúyes‚Äù>
   <map type=‚Äúbinfile‚Äù enabled=‚Äúyes‚Äù data=‚Äú/home/ 
    pi/.navit/maps/UK.bin‚Äù/>
  </mapset>
Then search for osd entries similar to:
  <osd enabled=‚Äúyes‚Äù type=‚Äúcompass‚Äù/>
‚Ä¶and enable the ones you want ‚Äì we recommend enabling 
them all. You may want to zoom in closer than the default map 
layout. A zoom value of 64 is useful. 
We‚Äôve looked at 
the PiTFT and the 
HDMIPi before, 
but the SainSmart 
touchscreen 
we‚Äôre using here is 
uniquely suited to 
many embedded 
projects. It‚Äôs larger 
than the PiTFT but 
also without the 
large bezels of the 
HDMIPi ‚Äì and it‚Äôs 
incredibly thin ‚Äìso 
it‚Äôs the kind of thing 
that is really useful 
for installation 
projects, whether 
that‚Äôs something as 
simple as a photo 
slideshow in a real 
picture frame or a 
home automation 
control interface 
embedded into a 
cupboard door.
Embed 
the screen
SainSmart‚Äôs 
9-inch HDMI/VGA 
touchscreen (bit.
ly/1Ciu4H9) has a 
fantastic display 
and is perfect 
for all sorts of  
Pi projects
The screen 
control panel that 
comes with the 
SainSmart screen 
enables you to 
easily  change the 
display settings 
(i.e. brightness, 
contrast, etc) as 
well as the input 
(i.e. HDMI, VGA, 
AV1, etc)
As well as the main 
controller board, 
the touch screen 
is connected to 
a four-line  USB 
controller  which 
then plugs into the 
Pi‚Äôs USB port
Adafruit‚Äôs Ultimate 
GPS Breakout kit 
provides Navit 
and the weather 
function with the 
location data that 
they require

The Python Book  171
Use Python with Pi
13 
Sound conÔ¨Åguration
Before 
conÔ¨Åguring 
speech 
support for Navit, conÔ¨Ågure the external 
sound card. You have to stop the 
Broadcom module from loading and 
remove some Raspberry Pi-speciÔ¨Åc ALSA 
(Advanced Linux Sound Architecture). 
To do this, sudo-edit /etc/modprobe and 
comment out (i.e. preÔ¨Åx with a #):
  snd-bcm2835
Then run:
  sudo rm /etc/modprobe.d/alsa*
Reboot for the changes to take effect. 
Use alsamixer to set the volume on the 
if it‚Äôs too quiet.
15 
Create speech script
Navit 
supports 
speech 
by 
running an external script and passing 
the text to speak as an argument. 
Create one using: 
  cd /home/pi/.navit
  wget  http://liamfraser.co.uk/ 
  lud/carpi/chime.wav
  touch speech.sh
  chmod +x speech.sh
 
Now edit speech.sh:
  #!/bin/bash
  aplay -r 44100 /home/pi/.navit/ 
  chime.wav
  espeak -vmb-en1 -s 110 -a 150  
  -p 50 ‚Äú$1‚Äù
Finally, test it with:
  ./speech.sh ‚ÄúHello World‚Äù
14 
Download a voice
The speech synthesis software 
needs a voice and a proprietary 
binary. You can get both by completing  
the following steps:
  sudo mkdir -p /usr/share/ 
  mbrola/voices/
  wget http://www.tcts.fpms.ac.be/ 
  synthesis/mbrola/dba/en1/en1- 
  980910.zip
  unzip en1-980910.zip
  sudo cp en1/en1 /usr/share/ 
  mbrola/voices
  wget http://www.tcts.fpms.ac.be/ 
  synthesis/mbrola/bin/raspberri_ 
  pi/mbrola.tgz
  tar zxvf mbrola.tgz
  sudo mv mbrola /usr/local/bin/
        try:
            r = requests.get(api_req)
        except requests.exceptions.RequestException as e:
            return errstr
        return WeatherClient.usefuldata(r.json())
class CarLauncher:
    def __init__(self):
        pygame.init()
        pygame.mixer.quit() # Don‚Äôt need sound
        screen_info = pygame.display.Info()
        self.screen = pygame.display.set_mode((screen_info.current_w,
                                               screen_info.current_h))
        pygame.display.set_caption(‚ÄòCar Launcher‚Äô)
        self.titlefont = pygame.font.Font(None, 100)
        self.wfont = pygame.font.Font(None, 30)
        self.w_text = None # Weather text
    def clean_background(self):
        background = pygame.Surface(self.screen.get_size())
        self.background = background.convert()
        self.background.fill((0, 0, 0))
        
        # Render title centered
        text = self.titlefont.render(‚ÄúCarPi Launcher‚Äù, 1, (255, 255, 255))
        textpos = text.get_rect()
        textpos.centerx = self.background.get_rect().centerx
        self.background.blit(text, textpos)
        
        self.screen.blit(self.background, (0,0))
        pygame.display.flip()
    def main_menu(self):
        # btns maps Text -> Rectangles we can do collision detection on
        self.btns = {‚ÄòMusic‚Äô : None, ‚ÄòNAV‚Äô : None, ‚ÄòWeather‚Äô : None}
        item_num = 1
        for key in self.btns:
            text = self.titlefont.render(key, 1, (255,255,255))
            textpos = text.get_rect()
            max_width = self.background.get_rect().width / len(self.btns)
            center_offset = max_width * 0.5
            # This y pos puts buttons just below title
            textpos.centery = self.background.get_rect().centery / 2
            textpos.centerx = (max_width * item_num) - center_offset
            self.btns[key] = textpos
            self.screen.blit(text, textpos)
            item_num += 1
        pygame.display.flip()
    def select_rect(self, rect, text):
        # Colour a rect the user has clicked in green
        surface = pygame.Surface((rect.w, rect.h))
        surface.fill((0, 255, 0))
        # Now we have to draw the text over it again
        t = self.titlefont.render(text, 1, (255,255,255))
        surface.blit(t, (0,0))
        self.screen.blit(surface, rect)
        pygame.display.flip()
Full code listing

172  The Python Book
Use Python with Pi 
17 
Install the music player
MPD is the music player back-end and pympdtouchgui 
is the front-end that needs installing manually:
  sudo apt-get install mpd ncmpcpp 
  wget http://www.spida.net/projects/software/ 
  pympdtouchgui/pympdtouchgui-0.320.tgz
  tar zxvf pympdtouchgui-0.320.tgz 
  cd pympdtouchgui-0.320/
  sudo python setup.py install
  # Fix hard coded path in software
  sudo ln -s /usr/local/share/pympdtouchgui/ /usr/  
  share/pympdtouchgui
run sudo passwd to set a password for root. From a computer 
with music on, run:
  scp -r music_folder root@pi_ip_address:/var/lib/ 
  mpd/music/
Then on the Pi, change the ownership of the music that 
you just copied:
  sudo chown -R mpd:audio /var/lib/mpd/music
20 
Install awesome window manager
Now you will need to write your own launcher for 
CarPi, which will run full-screen. To ensure every application 
is forced to full-screen, use awesome window manager in full-
screen mode.
  sudo apt-get install awesome
  sudo rm /etc/alternatives/x-session-manager
  sudo ln -s /usr/bin/awesome /etc/alternatives/x- 
  session-manager
When changing the default x-session-manager, awesome will 
be auto-started at boot instead of LXDE. If you reboot the Pi, 
awesome should then load up automatically.
19 
Update mpd music library
Ncmpcpp is a command line client for mpd. Type 
ncmpcpp and press U to update the library. Press 3 to 
browse the library and check the music is there, and press 
Q to quit. Pressing 1 will select the help screen if you want 
to do more.
16 
ConÔ¨Å gure Navit for speech
The last part is simple. Edit the Navit conÔ¨Å g Ô¨Å le again (/
etc/navit/navit.xml) and replace the following line:
  <speech type=‚Äúcmdline‚Äù data=‚Äúecho ‚ÄòFix the speech  
  tag in navit.xml to let navit say:‚Äô ‚Äò%s‚Äô‚Äù cps=‚Äú15‚Äù/>
‚Ä¶with:
  <speech type=‚Äúcmdline‚Äù data=‚Äú/home/pi/.navit/ 
  speech.sh %s‚Äù cps=‚Äú10‚Äù />
Now you can run Navit with DISPLAY=:0.0 navit and have 
fun experimenting.
18 
Copy music
Scp (secure copy protocol) was used here to copy 
music. First get the Pi‚Äôs IP address by running ip addr. Then 
It is deÔ¨Å nitely best 
to put this project 
together in a clean 
workspace so that 
you can clearly 
see what you‚Äôre 
working with and 
ensure everything is 
correctly wired and 
soldered, but the 
point of the project 
is to make this setup 
portable so that you 
can put it in your 
car and use it on 
the road. You could 
install everything 
into a single, hand-
made enclosure or 
customise a large 
bought one, or you 
could secure the 
various parts inside, 
for example, your 
glovebox or car 
doors. You‚Äôll also 
need to power both 
the screen and your 
Pi with a power pack 
and ensure that 
the GPS antenna is 
fastened into a good 
spot for signal.
Make it 
mobile
Above The pympdtouchgui front-end for the 
music player is surprisingly featureful
Above The Navit software comes with a host 
of options built into its menu hierarchy
 You will need to write your 
own launcher for CarPi 
 

The Python Book  173
Use Python with Pi
    def reset(self):
        self.clean_background()
        self.main_menu()
        self.render_weather()
    def execute(self, path):
        os.system(path)
        # os.system blocks so by the time we get here application
        # has finished
        self.reset()
    def render_weather(self):
        if self.w_text == None:
            return
        # Get y starting at the bottom of the nav button
        margin = 10
        y = self.btns[‚ÄòNAV‚Äô].bottomleft[1] + margin
        for t in self.w_text.split(‚Äú\n‚Äù):
            line = self.wfont.render(t.rstrip(), 1, (255,255,255))
            line_rect = line.get_rect()
            line_rect.centerx = self.background.get_rect().centerx
            line_rect.y = y
            self.screen.blit(line, line_rect)
            y += margin + line_rect.height
        
        pygame.display.flip() 
    def handle_events(self, events):
        for e in events:
            if e.type == QUIT:
                sys.exit()
            elif e.type == MOUSEBUTTONDOWN:
                pos = pygame.mouse.get_pos()
                # Check if it collides with any of the buttons
                for btn_text, rect in self.btns.iteritems():
                    if rect.collidepoint(pos):
                        self.select_rect(rect, btn_text)
                        if btn_text == ‚ÄúNAV‚Äù:
                            self.execute(‚Äú/usr/bin/navit‚Äù)
                        elif btn_text == ‚ÄúMusic‚Äù:
                            self.execute(‚Äú/usr/local/bin/pympdtouchgui‚Äù)
                        elif btn_text == ‚ÄúWeather‚Äù:
                            self.w_text = WeatherClient.update()
                            # Reset will render weather if string is populated
                            self.reset()
    def loop(self):
        clock = pygame.time.Clock()
        self.reset()
        
        while 1:
            self.handle_events(pygame.event.get())
            # 5 fps is plenty
            clock.tick(5)
if __name__ == ‚Äú__main__‚Äù:
    cl = CarLauncher()
    cl.loop() 
Full code listing
21 
Install the requirements 
for your launcher
The launcher is going to use a weather 
API 
combined 
with 
location 
data 
from the GPS receiver to give weather 
updates when requested. The nicest 
HTTP API for Python is requests, which 
you can install by doing the following:
  sudo apt-get install python-pip
  sudo pip install requests
23 
Start the launcher 
automatically
Sudo-edit /etc/xdg/awesome/rc.lua and 
move awful.layout.suit.max.fullscreen 
to the top of the layouts list. Add the 
following to the bottom of the Ô¨Å le:
  awful.util.spawn_with_shell(‚Äú/ 
  home/pi/carlauncher/carlauncher. 
  py‚Äù)
Now reboot again and the launcher 
should come up automatically.
24 
Future improvements
There 
are 
a 
number 
of 
improvements that could be made 
to the base project at this point:
‚Ä¢  Make the launcher switch between 
applications rather than start them 
again each time
‚Ä¢  Make the launcher look better 
aesthetically with icons
‚Ä¢  Use Mopidy instead of MPD so you 
can use Spotify
‚Ä¢  Further Navit conÔ¨Å guration to make 
it more featureful
‚Ä¢  An SSD or USB Ô¨Ç ash drive for storage 
to make things quicker
22 
Write the launcher code
Creating the code itself is pretty 
self explanatory, but you can use our 
ready-made version by downloading the 
CarPi package from FileSilo.co.uk and 
extracting carlauncher/carlauncher.py.

5SZ
JTTVFT
GPSKVTU
¬£5*
5IJTP√≤FSFOUJUMFTOFX6,EJSFDUEFCJUTVCTDSJCFSTUPSFDFJWFUIFJS√∂STUUISFFJTTVFTGPSb"GUFSUIFTFJTTVFTTVCTDSJCFSTXJMMUIFOQBZbFWFSZ
TJYJTTVFT4VCTDSJCFSTDBODBODFMUIJTTVCTDSJQUJPOBUBOZUJNF/FXTVCTDSJQUJPOTXJMMTUBSUGSPNUIFOFYUBWBJMBCMFJTTVF0√≤FSDPEF;((;*/NVTU
CFRVPUFEUPSFDFJWFUIJTTQFDJBMTVCTDSJQUJPOTQSJDF%JSFDUEFCJUHVBSBOUFFBWBJMBCMFPOSFRVFTU
5IJTJTBO64TVCTDSJQUJPOP√≤FS5IF64"JTTVFSBUFJTCBTFEPOBOBOOVBMTVCTDSJQUJPOQSJDFPGbGPSJTTVFTXIJDIJTFRVJWBMFOUUPBUUIF
UJNFPGXSJUJOHDPNQBSFEXJUIUIFOFXTTUBOEQSJDFPGGPSJTTVFTCFJOH:PVSTVCTDSJQUJPOXJMMTUBSUGSPNUIFOFYUBWBJMBCMFJTTVF
4QFDJBM
USJBMPGGFS
&YDMVTJWFPGGFSGPSOFX
&OKPZFE
UIJTCPPL 

'PSBNB[JOHPGGFSTQMFBTFWJTJU
XXXJNBHJOFTVCTDPVLMVE
2VPUFDPEF;((;*/
5SZJTTVFTGPSbJOUIF6,
PSKVTUQFSJTTVFJOUIF64"
	TBWJOHPGGUIFOFXTTUBOEQSJDF
%FEJDBUFEUP
BMMUIJOHT-JOVY
8SJUUFOGPSZPV
-JOVY6TFS%FWFMPQFSJTUIFPOMZ
NBHB[JOFEFEJDBUFEUPBEWBODFEVTFST
EFWFMPQFST*5QSPGFTTJPOBMT
*OEFQUIHVJEFTGFBUVSFT
8SJUUFOCZHSBTTSPPUTEFWFMPQFSTBOE
JOEVTUSZFYQFSUT
'SFFBTTFUTFWFSZJTTVF
'PVSPGUIFIPUUFTUEJTUSPTGFBUVSFFWFSZNPOUIo
MPHJOUP'JMF4JMPEPXOMPBEBOEUFTUUIFNBMM
"CPVU
UIF
NBH
0SUFMFQIPOF6,+PWFSTFBT	

$BMMTXJMMDPTUQQFSNJOVUFQMVTZPVSUFMFQIPOFDPNQBOZhTBDDFTTDIBSHF
TVCTDSJCFSTUPy

YOUR FREE RESOURCES
Log in tofilesilo.co.uk/bks-689and download your great resourcesNOW!
YOUR BONUS 
RESOURCES
ON FILESILO WITH THIS 
BOOKAZINE, FREE AND 
EXCLUSIVE FOR THE PYTHON 
BOOK READERS, YOU‚ÄôLL FIND A 
WEALTH OF RESOURCES, 
INCLUDING THE FOLLOWING‚Ä¶
‚Ä¢  A walkthrough on writing good-quality 
code with Python
‚Ä¢  A series of tutorials on making a PiSnake 
game with Raspberry Pi and Python 
‚Ä¢  A guide to using GUI with GTK
‚Ä¢  Everything you need to complete the 
tutorials in this book and become a 
Python expert
All the tutorial Ô¨Å les you‚Äôll need
Hours of free video tutorials 
Inspirational projects
PACKED WITH BRILLIANT 
DIGITAL CONTENT, AVAILABLE 
ANY TIME, ON DEMAND
filesilo.co.uk/bks-689
EVERYTHING 
YOU NEED 
TO BUILD ON
THE AWESOME  
SKILLS  IN THIS 
BOOKAZINE
ENHANCE YOUR PYTHON SKILLS
1765IF1ZUIPO#PPL

FILESILO ‚Äì THE HOME OF PRO RESOURCES
A rapidly growing library 
Updated continually with cool resources
Lets you keep your downloads organised
Browse and access your content from anywhere
No more torn disc pages to ruin your magazines
No more broken discs
Print subscribers get all the content
Digital magazine owners get all the content too!
Each issue‚Äôs content is free with your magazine
Secure online access to your free resources
Discover your free online assets
The most popular downloads are shown in 
the carousel here, so check out what your 
fellow readers are enjoying
Whether it‚Äôs programming tutorials or 
video workshops, categories make it easy 
to identify the content you‚Äôre looking for
Find out more about our online stores, and 
useful FAQs, such as our cookie and 
privacy policies and contact details
If you‚Äôre looking for a particular type of 
content, like software or video tutorials, 
use the filters here to refine your search
See key details for each resource 
including number of views and 
downloads, and the community rating
Discover our fantastic sister magazines 
and the wealth of content and information 
that they provide
The first time you use FileSilo, you‚Äôll need to 
register. After that, you can use your email 
address and password to log in
This is the new FileSilo site that replaces 
your disc. You‚Äôll find it by visiting the link on 
the following page
5IF1ZUIPO#PPL177

HOW TO USE
EVERYTHING YOU NEED TO KNOW ABOUT 
ACCESSING YOUR NEW DIGITAL REPOSITORY 
Having trouble with any of the techniques in this bookazine‚Äôs tutorials? Don‚Äôt know 
how to make the best use of your free resources? Want to have your work critiqued 
by those in the know? Then why not visit the Linux User & Developer and Imagine 
Bookazines Facebook pages for all your questions, concerns and qualms. There is a 
friendly community of fellow Linux and Open Source enthusiasts waiting to help you 
out, as well as regular posts and updates from the team behind Linux User & 
Developer magazine. Like us today and start chatting! 
facebook.com/ImagineBookazines
NEED HELP WITH
THE TUTORIALS?
To access FileSilo, please visit filesilo.co.uk/bks-689
01 
Follow the 
on-screen 
instructions to create an 
account with our secure 
FileSilo system, log in and 
unlock the bookazine by 
answering a 
simple question 
about it. You can 
now access the 
content for free 
at any time.  
02 
Once you have 
logged in, you are 
free to explore the wealth of 
content available on 
FileSilo, from great video 
tutorials and online guides 
to superb downloadable 
resources. And the more 
bookazines you purchase, 
the more your instantly 
accessible collection of 
digital content  will grow.
03 
You can access 
FileSilo on any 
desktop, tablet or 
smartphone device using 
any popular browser (such 
as Safari, Firefox or Google 
Chrome). However, we 
recommend that you use a 
desktop to download 
content, as you may not be 
able to download files to 
your phone or tablet.  
04 
If you have any 
problems with 
accessing content on 
FileSilo, or with the 
registration process, take a 
look at the FAQs online or 
email filesilohelp@
imagine-publishing.co.uk.
facebook.com/LinuxUserUK
1785IF1ZUIPO#PPL


The ultimate guide to coding with Python
Python
The
Put Python to work
Supercharge your system and make life 
easier with handy coding tutorials
Use Python with Raspberry Pi
Work on any Raspberry Pi model using its 
officially recognised language
OVER 2 HOURS
OF VIDEO TUTORIALS
Get to grips with the basics
Learn Python the right way and complete 
basic projects with our simple guides
Over 
20 
projects to 
complete

