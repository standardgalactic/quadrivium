Logic: Language and Information 1
§6-5 Negation in prolog
Jen Davoren

Negation as Failure in prolog
From what we have seen so far, prolog has no direct way of
handling negative information.

Negation as Failure in prolog
From what we have seen so far, prolog has no direct way of
handling negative information.
The best we can do is load up a logic program P into prolog ,
pose a query positively, and from the answer:
?- q.
false.

Negation as Failure in prolog
From what we have seen so far, prolog has no direct way of
handling negative information.
The best we can do is load up a logic program P into prolog ,
pose a query positively, and from the answer:
?- q.
false.
we are then tempted to conclude ∼q “sort-of follows” from program
P

Negation as Failure in prolog
From what we have seen so far, prolog has no direct way of
handling negative information.
The best we can do is load up a logic program P into prolog ,
pose a query positively, and from the answer:
?- q.
false.
we are then tempted to conclude ∼q “sort-of follows” from program
P . . . but, be warned: we cannot conclude that the formula ∼q is a
logical consequence of program P.

Negation as Failure in prolog
From what we have seen so far, prolog has no direct way of
handling negative information.
The best we can do is load up a logic program P into prolog ,
pose a query positively, and from the answer:
?- q.
false.
we are then tempted to conclude ∼q “sort-of follows” from program
P . . . but, be warned: we cannot conclude that the formula ∼q is a
logical consequence of program P.
New syntax: can write in a query ?- \+ q.

Negation as Failure in prolog
From what we have seen so far, prolog has no direct way of
handling negative information.
The best we can do is load up a logic program P into prolog ,
pose a query positively, and from the answer:
?- q.
false.
we are then tempted to conclude ∼q “sort-of follows” from program
P . . . but, be warned: we cannot conclude that the formula ∼q is a
logical consequence of program P.
New syntax: can write in a query ?- \+ q.
to ask whether the positive query for q will fail.

Negation as Failure in prolog
/* neg-001.pl */
p1 :- q1
p2 :- false.
q1.
q2 :- p2.
.
% /Users/jdavoren/Prolog/Prolog-code/neg-001
compiled 0.00 sec, 5 clauses
1 ?-

Negation as Failure in prolog
/* neg-001.pl */
p1 :- q1
p2 :- false.
q1.
q2 :- p2.
.
% /Users/jdavoren/Prolog/Prolog-code/neg-001
compiled 0.00 sec, 5 clauses
1 ?- p1.
true
2 ?-

Negation as Failure in prolog
/* neg-001.pl */
p1 :- q1
p2 :- false.
q1.
q2 :- p2.
.
% /Users/jdavoren/Prolog/Prolog-code/neg-001
compiled 0.00 sec, 5 clauses
1 ?- p1.
true
2 ?- p2.
false
3 ?-

Negation as Failure in prolog
/* neg-001.pl */
p1 :- q1
p2 :- false.
q1.
q2 :- p2.
.
% /Users/jdavoren/Prolog/Prolog-code/neg-001
compiled 0.00 sec, 5 clauses
1 ?- p1.
true
2 ?- p2.
false
3 ?- q1.
true
4 ?-

Negation as Failure in prolog
/* neg-001.pl */
p1 :- q1
p2 :- false.
q1.
q2 :- p2.
.
% /Users/jdavoren/Prolog/Prolog-code/neg-001
compiled 0.00 sec, 5 clauses
1 ?- p1.
true
2 ?- p2.
false
3 ?- q1.
true
4 ?- q2.
false
5 ?-

Negation as Failure in prolog
/* neg-001.pl */
p1 :- q1
p2 :- false.
q1.
q2 :- p2.
.
% /Users/jdavoren/Prolog/Prolog-code/neg-001
compiled 0.00 sec, 5 clauses
1 ?- p1.
true
2 ?- p2.
false
3 ?- q1.
true
4 ?- q2.
false
5 ?-
\+ p2.
true
6 ?-

Negation as Failure in prolog
/* neg-001.pl */
p1 :- q1
p2 :- false.
q1.
q2 :- p2.
.
% /Users/jdavoren/Prolog/Prolog-code/neg-001
compiled 0.00 sec, 5 clauses
1 ?- p1.
true
2 ?- p2.
false
3 ?- q1.
true
4 ?- q2.
false
5 ?-
\+ p2.
true
6 ?-
\+ q2.
true

Negation as Failure in prolog

Negation as Failure in prolog
Let P be the program listed in neg-001.pl.

Negation as Failure in prolog
Let P be the program listed in neg-001.pl.
For a goal G, we have the logical consequence relationship P |= G

Negation as Failure in prolog
Let P be the program listed in neg-001.pl.
For a goal G, we have the logical consequence relationship P |= G
exactly when, for all truth valuations v to the atoms, if v makes all
the clauses in P true, then v also makes all the atoms in G true.

Negation as Failure in prolog
Let P be the program listed in neg-001.pl.
For a goal G, we have the logical consequence relationship P |= G
exactly when, for all truth valuations v to the atoms, if v makes all
the clauses in P true, then v also makes all the atoms in G true.
Now if v makes all the clauses in P true, then it follows that
v(p1) = 1 and v(q1) = 1, because v makes true both the clauses
p1 :- q1. and q1.

Negation as Failure in prolog
Let P be the program listed in neg-001.pl.
For a goal G, we have the logical consequence relationship P |= G
exactly when, for all truth valuations v to the atoms, if v makes all
the clauses in P true, then v also makes all the atoms in G true.
Now if v makes all the clauses in P true, then it follows that
v(p1) = 1 and v(q1) = 1, because v makes true both the clauses
p1 :- q1. and q1.
This directly confirms that p1 and q1 really are logical
consequences of the program P – which we know already from
true answers to queries for p1 and q1, plus soundness of prolog.

Negation as Failure in prolog
However, the P clauses p2 :- false. and q2 :- p2. being true
under valuation v do not force the outcome that v(p2) = 0 and
v(q2) = 0 – although it is one possibility.

Negation as Failure in prolog
However, the P clauses p2 :- false. and q2 :- p2. being true
under valuation v do not force the outcome that v(p2) = 0 and
v(q2) = 0 – although it is one possibility.
A valuation v that gives v(p2) = 1 and v(q2) = 1 will also make
both those program clauses true.

Negation as Failure in prolog
However, the P clauses p2 :- false. and q2 :- p2. being true
under valuation v do not force the outcome that v(p2) = 0 and
v(q2) = 0 – although it is one possibility.
A valuation v that gives v(p2) = 1 and v(q2) = 1 will also make
both those program clauses true.
A different valuation v′ that gives v′(p2) = 0 and v′(q2) = 1 will
also make both those program clauses true.

Negation as Failure in prolog
However, the P clauses p2 :- false. and q2 :- p2. being true
under valuation v do not force the outcome that v(p2) = 0 and
v(q2) = 0 – although it is one possibility.
A valuation v that gives v(p2) = 1 and v(q2) = 1 will also make
both those program clauses true.
A different valuation v′ that gives v′(p2) = 0 and v′(q2) = 1 will
also make both those program clauses true.
So ∼p2 and ∼q2 are not logical consequences of program P,

Negation as Failure in prolog
However, the P clauses p2 :- false. and q2 :- p2. being true
under valuation v do not force the outcome that v(p2) = 0 and
v(q2) = 0 – although it is one possibility.
A valuation v that gives v(p2) = 1 and v(q2) = 1 will also make
both those program clauses true.
A different valuation v′ that gives v′(p2) = 0 and v′(q2) = 1 will
also make both those program clauses true.
So ∼p2 and ∼q2 are not logical consequences of program P,
in addition to the positive goal formulas p2 and q2 not being
logical consequences of program P.

Negation as Failure in prolog
Summary: negation symbol
\+
should be approached with caution!

Negation as Failure in prolog
Summary: negation symbol
\+
should be approached with caution!
Only to be used within a goal query, proceeding an atom,
to ask whether the positive query for that atom will fail.

Negation as Failure in prolog
Summary: negation symbol
\+
should be approached with caution!
Only to be used within a goal query, proceeding an atom,
to ask whether the positive query for that atom will fail.
A true answer to a negated query does not allow us to
conclude logical consequence for the negated atom.

End of Logic Programming section

