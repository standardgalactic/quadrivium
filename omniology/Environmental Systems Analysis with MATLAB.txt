Environmental
Systems Analysis
with MATLAB®
Stefano Marsili-Libelli

Environmental
Systems Analysis
with MATLAB®
Stefano Marsili-Libelli


Environmental
Systems Analysis
with MATLAB®
Stefano Marsili-Libelli

MATLAB® and Simulink® are trademarks of The MathWorks, Inc. and are used with permission. The MathWorks does 
not warrant the accuracy of the text or exercises in this book. This book’s use or discussion of MATLAB® and Simulink® 
software or related products does not constitute endorsement or sponsorship by The MathWorks of a particular peda-
gogical approach or particular use of the MATLAB® and Simulink® software.
CRC Press
Taylor & Francis Group
6000 Broken Sound Parkway NW, Suite 300
Boca Raton, FL 33487-2742
© 2016 by Taylor & Francis Group, LLC
CRC Press is an imprint of Taylor & Francis Group, an Informa business
No claim to original U.S. Government works
Version Date: 20160113
International Standard Book Number-13: 978-1-4987-0636-0 (eBook - PDF)
This book contains information obtained from authentic and highly regarded sources. Reasonable efforts have been 
made to publish reliable data and information, but the author and publisher cannot assume responsibility for the valid-
ity of all materials or the consequences of their use. The authors and publishers have attempted to trace the copyright 
holders of all material reproduced in this publication and apologize to copyright holders if permission to publish in this 
form has not been obtained. If any copyright material has not been acknowledged please write and let us know so we may 
rectify in any future reprint.
Except as permitted under U.S. Copyright Law, no part of this book may be reprinted, reproduced, transmitted, or uti-
lized in any form by any electronic, mechanical, or other means, now known or hereafter invented, including photocopy-
ing, microfilming, and recording, or in any information storage or retrieval system, without written permission from the 
publishers.
For permission to photocopy or use material electronically from this work, please access www.copyright.com (http://
www.copyright.com/) or contact the Copyright Clearance Center, Inc. (CCC), 222 Rosewood Drive, Danvers, MA 01923, 
978-750-8400. CCC is a not-for-profit organization that provides licenses and registration for a variety of users. For 
organizations that have been granted a photocopy license by the CCC, a separate system of payment has been arranged.
Trademark Notice: Product or corporate names may be trademarks or registered trademarks, and are used only for 
identification and explanation without intent to infringe.
Visit the Taylor & Francis Web site at
http://www.taylorandfrancis.com
and the CRC Press Web site at
http://www.crcpress.com

Dedication
To Patrizia,
who makes my day every day


vii
Contents
Preface..............................................................................................................................................xv
Acknowledgements..........................................................................................................................xix
Author..............................................................................................................................................xxi
Chapter 1	
Introduction...................................................................................................................1
1.1	
Environmental Systems Modelling, the Basic Concepts....................................1
1.2	
Attributes and Dichotomies of Environmental Models.....................................3
1.2.1	
Environmental Models as Balances......................................................3
1.2.2	
First-Principle versus Data-Driven Modelling......................................6
1.2.3	
Environmental Modelling Approach versus Data Availability.............7
1.3	
Practical Mechanistic Modelling.....................................................................12
1.3.1	
An Example of a Simple Mechanistic Model.....................................13
1.3.2	
Mass Balances..................................................................................... 14
1.3.3	
Energy Balances.................................................................................. 16
1.4	
Environmental Models as Dynamical Systems................................................ 18
1.5	
Linear Time-Invariant Dynamical Systems.....................................................20
1.6	
Discrete-Time LTI Dynamical System.............................................................22
1.7	
Stability of Discrete-Time Dynamical LTI Systems........................................23
1.7.1	
Who’s Who in the System...................................................................24
1.7.2	
Phase-Plane Portrait of Two-Dimensional Discrete-Time LTI 
Systems................................................................................................28
1.7.3	
Forced LTI Discrete-Time System......................................................29
1.7.4	
Steady State of LTI Discrete-Time Systems with Constant Input.......29
1.8	
Continuous-Time Linear Dynamical System...................................................30
1.8.1	
Stability of Continuous-Time LTI Systems......................................... 31
1.8.2	
Forced LTI Continuous-Time System.................................................34
1.8.3	
Some Simple Response Calculations: Step Response and 
Impulse Response................................................................................34
1.8.3.1	
An Application of an Impulse-Drive Linear Model: 
The Nash Reservoir.............................................................36
1.8.4	
Steady State of LTI Continuous-Time Systems with Constant Input......38
1.8.5	
Phase-Plane Behaviour of Two-Dimensional Continuous-Time 
LTI Systems...............................................................................................38
1.9	
Nonlinear Systems...................................................................................................40
1.9.1	
Linearization of a Nonlinear System........................................................41
1.9.2	
Stability of Nonlinear Systems.................................................................42
1.9.3	
Local Stability Analysis of Autonomous Nonlinear Systems.................43
1.9.4	
Limit Cycles...............................................................................................43
1.9.5	
Isoclines.....................................................................................................44
1.9.6	
Graphical Stability Analysis of One-Dimensional Autonomous 
Systems......................................................................................................44
1.9.6.1	
Graphical Stability of One-Dimensional 
Discrete- Time Systems........................................................44
1.9.6.2	
Graphical Stability of One-Dimensional 
Continuous- Time Systems...................................................48
1.9.7	
Global Stability Analysis of Autonomous Nonlinear Systems............49

viii
Contents
1.10	 Numerical Aspects and the Role of MATLAB.................................................51
1.10.1	 MATLAB Handling of Discrete-Time Models...................................52
1.10.2	 MATLAB Handling of Continuous-Time Models..............................54
1.10.3	 Introducing the Simulink Toolbox.......................................................57
1.10.4	 Two Simple Benchmark Models.........................................................60
1.10.4.1	 The Monod Kinetics............................................................60
1.10.4.2	 The Streeter & Phelps Water Quality Model....................... 61
1.11	 Worked Examples.............................................................................................63
1.11.1	 Simulating the Time-Varying Flow in a Cylindrical Tank.................64
1.11.2	 Simulating the Flow Dynamics in a Reservoir...................................66
1.11.3	 Analysis of a Discrete-Time System...................................................67
1.11.4	 MATLAB Simulation of a Discrete-Time System..............................68
1.11.5	 A Two-Reach S&P River Quality Model with Point Discharges........69
1.11.6	 A S&P River Quality Model with Non-Point Pollution......................72
Chapter 2	
Identification of Environmental Models.....................................................................77
2.1	
Introduction......................................................................................................77
2.1.1	
Formal Statement of the Identification Problem.................................77
2.1.2	
The Quality of the Data.......................................................................78
2.1.3	
Input Information Content...................................................................80
2.1.4	
The Error Functional........................................................................... 81
2.2	
Sensitivity Analysis as an Identifiability Test...................................................82
2.2.1	
Static Sensitivity..................................................................................83
2.2.1.1	
Static Sensitivity by Error Increment..................................84
2.2.1.2	
Static Sensitivity by Curvature............................................86
2.2.1.3	
Monte Carlo Sensitivity.......................................................86
2.2.1.4	
Joint Sensitivity of Parameter Couples................................86
2.2.2	
Dynamic (Trajectory) Sensitivity........................................................89
2.2.2.1	
Approximate Trajectory Sensitivity..................................... 91
2.2.2.2	
Sensitivity Ranking.............................................................92
2.3	
Gradient-Free Optimization Methods (Direct Search)....................................93
2.3.1	
Optimized Flexible Polyhedron..........................................................95
2.3.1.1	
Polyhedron Reshaping.........................................................96
2.3.2	
Termination Criterion..........................................................................98
2.3.2.1	
Optimized Simplex Search..................................................99
2.3.3	
Genetic Algorithm.............................................................................100
2.3.3.1	
Parameter Coding.............................................................. 101
2.3.3.2	
Basic Evolutionary Mechanisms.......................................102
2.3.3.3	
Similarity Templates.......................................................... 103
2.3.3.4	
GA in MATLAB...............................................................104
2.3.4	
Performance Assessment of the Combined Estimation Methods 
Applied to the Monod Kinetics......................................................... 105
2.3.5	
MATLAB Software Organization....................................................107
2.3.5.1	
Organization of the Error Function...................................108
2.4	
Validation of the Estimates............................................................................ 110
2.4.1	
Non-Parametric Tests: Testing the Credibility of the Model 
Response............................................................................................ 111
2.4.1.1	
Variance Accounted For.................................................... 112
2.4.1.2	
Regression Line F-Test...................................................... 112

ix
Contents
2.4.1.3	
Further Regression Line Statistics..................................... 114
2.4.2	
Analysis of the Residuals.................................................................. 114
2.4.2.1	
Autocorrelation Test.......................................................... 116
2.4.2.2	
Normality Test................................................................... 116
2.4.3	
Parametric Tests: Assessing the Credibility of the Parameter 
Values................................................................................................ 118
2.4.3.1	
Exact and Approximate Confidence Regions.................... 119
2.4.3.2	
The FIM.............................................................................120
2.4.3.3	
Approximations of the Covariance Matrix........................122
2.4.3.4	
A Parameter Estimation Reliability Test...........................123
2.4.3.5	
Parameter Validation for the Monod Kinetics...................124
2.4.4	
A MATLAB Exercise: Parameter Estimation of the S&P 
Model.......................................................................................125
2.4.4.1	
A Quick Guide to the Related Companion Software.....129
2.4.5	
Another MATLAB Exercise: Parameter Estimation of the 
Monod Model...........................................................................131
2.5	
PEAS: A Computer Package for Parameter Estimation of Ecological 
Models..........................................................................................................134
Chapter 3	
Analysis of Environmental Time Series................................................................... 139
3.1	
Introduction.................................................................................................... 139
3.2	
Time Domain versus Frequency Domain of Environmental Time Series..... 140
3.2.1	
Frequency Analysis of Sampled Time Series.................................... 140
3.2.1.1	
Aliasing.............................................................................. 141
3.2.1.2	
Feasible Frequency Range and Sampling Frequency........ 143
3.2.1.3	
Signal Components: Information, Artefacts, and Noise..... 144
3.2.1.4	
MATLAB Implementation of Frequency Analysis...........144
3.3	
Signal Regularization..................................................................................... 146
3.3.1	
Detrending......................................................................................... 146
3.3.2	
Outliers Detection and Removal....................................................... 147
3.3.3	
Denoising through Approximating Splines Smoothing....................150
3.3.3.1	
Replacement of Missing Data and Data Enhancement..... 153
3.3.3.2	
Outliers Revisited.............................................................. 155
3.3.4	
Time-Series Synthesis....................................................................... 155
3.3.4.1	
Wind Time-Series Synthesis for Lagoon Simulation........ 158
3.4	
Wavelet Signal Processing: Adaptive Combination of Time and 
Frequency Analysis........................................................................................ 162
3.4.1	
The Continuous Wavelet Transform..................................................164
3.4.2	
The Discrete Wavelet Transform....................................................... 166
3.4.3	
The MATLAB Wavelet Toolbox....................................................... 167
3.4.4	
Signal Denoising............................................................................... 169
3.4.5	
Numerical Differentiation of Noisy Signals...................................... 173
3.5	
Principal Components Analysis..................................................................... 174
3.5.1	
Feature Selection............................................................................... 175
3.5.1.1	
The PCA Transform.......................................................... 176
3.5.1.2	
The Biplot.......................................................................... 179
3.5.1.3	
The Scree Plot.................................................................... 179
3.5.1.4	
PCA on Correlation or Covariance?.................................. 180
3.5.2	
Data Reduction and Reconstruction.................................................. 181

x
Contents
3.5.3	
Consistency Statistics........................................................................ 183
3.5.3.1	
Hotelling’s T 2 and Q Statistics........................................... 184
3.5.3.2	
Contribution Variables....................................................... 185
3.5.4	
PCA and MATLAB.......................................................................... 185
3.5.5	
PCA Case Studies.............................................................................. 188
3.5.5.1	
Turbidity Analysis in a Potabilization Process.................. 188
3.5.5.2	
Fault Detection and Isolation in a Wastewater 
Treatment Process..............................................................190
Chapter 4	
Fuzzy Modelling of Environmental Systems............................................................ 193
4.1	
Introduction to the Fuzzy Logic..................................................................... 193
4.1.1	
Fuzzification......................................................................................196
4.1.1.1	
Possible Analytical Forms of mfs......................................196
4.1.2	
Basic Properties of Fuzzy Sets..........................................................196
4.1.3	
Logic Connectives: T-Norms and S-Norms......................................196
4.2	
Building a Fuzzy Inference System................................................................197
4.2.1	
Fuzzy Inference.................................................................................199
4.2.2	
Fuzzy Reasoning à la Mamdani........................................................201
4.2.2.1	
Fuzzy Inference à la Sugeno..............................................202
4.2.3	
Defuzzification..................................................................................203
4.2.3.1	
Fuzzification/Defuzzification Errors.................................204
4.3	
The MATLAB Fuzzy Toolbox.......................................................................205
4.3.1	
The FIS Editor...................................................................................206
4.3.2	
Structure of the FIS File....................................................................208
4.3.3	
An Example of Sugeno FIS: Function Approximation..................... 210
4.4	
Fuzzy Modelling............................................................................................ 213
4.4.1	
Mamdani versus Sugeno Models...................................................... 214
4.4.2	
An Example of a Heuristic Mamdani Fuzzy Model......................... 215
4.4.3	
ANFIS: A Systematic Modelling Approach.....................................220
4.4.3.1	
Introduction to the ANFIS Editor..................................... 221
4.4.3.2	
Function Approximation with ANFIS...............................225
4.4.3.3	
An ANFIS Tank Dynamical Model..................................225
4.5	
Fuzzy Clustering: Aggregating Data by Similarity........................................230
4.5.1	
Deterministic K-Means.....................................................................233
4.5.1.1	
The Limits of Hard Clustering: The Butterfly Data..........234
4.5.2	
Fuzzy C-Means Clustering................................................................234
4.5.2.1	
The Butterfly Data Revisited.............................................236
4.5.2.2	
Limits of the FCM Clustering...........................................238
4.5.3	
Assessment of the Partition Efficiency..............................................238
4.5.3.1	
Partition Entropy...............................................................238
4.5.3.2	
Separation Coefficient.......................................................239
4.5.4	
Fuzzy Clusters as Antecedents..........................................................240
4.5.5	
Fuzzy Clustering as a Diagnostic Tool..............................................242
4.5.5.1	
Fuzzy Cluster Diagnosis of an Anaerobic Digester...........243
4.5.6	
Adaptive FCM Clustering.................................................................243
4.5.7	
Automatic Generation of mfs............................................................245
4.5.8	
Gustafson–Kessel Fuzzy Clustering.................................................247
4.5.8.1	
Adaptive Volume GK Algorithm....................................... 251
4.5.9	
Fuzzy Maximum Likelihood Estimates............................................252
4.5.10	 Possibilistic C-Means Clustering......................................................253

xi
Contents
Chapter 5	
Population Dynamics Modelling..............................................................................257
5.1	
Single-Species Continuous-Time Population Models....................................257
5.1.1	
Stability of the Equilibrium of a Single-Species Growth Model......258
5.1.2	
The Logistic Growth Function..........................................................259
5.1.2.1	
Delayed Recruitment Logistic Growth..............................262
5.1.2.2	
Analytical Solution of the Logistic Equation....................264
5.1.3	
The Gompertez Growth Equation.....................................................265
5.1.4	
The Richards Growth Equation........................................................266
5.1.5	
The Bertalanffy Growth Equation....................................................267
5.1.6	
A Final Appraisal of the Logistic Equation......................................268
5.2	
Single-Species Discrete-Time Population Models.........................................270
5.2.1	
The Discrete-Time Logistic Equation............................................... 271
5.2.2	
Other Discrete-Time Population Growth Equations......................... 274
5.2.3	
Introducing Uncertainty as Demographic Variability......................276
5.2.4	
Age-Structured Populations..............................................................279
5.2.4.1	
Stable Age Distributions....................................................280
5.2.4.2	
A Simple Example of Leslie Model: The Great Tit 
(Parus major).....................................................................283
5.2.4.3	
A More Structured Leslie Model: The Poa annua Weed.....284
5.3	
Harvested Populations.....................................................................................287
5.3.1	
Constant Harvesting..........................................................................287
5.3.2	
Proportional Harvesting....................................................................290
5.3.2.1	
Harvesting Depensated Populations..................................292
5.4	
Competition....................................................................................................293
5.4.1	
MATLAB Analysis of Competition..................................................298
5.4.2	
An Example of Competition: Gause’s Protozoa................................300
5.4.3	
Competition for a Limited Resource.................................................302
5.4.4	
Extension to Multispecies Competition............................................304
5.4.4.1	
Vulnerability......................................................................304
5.5	
Prey–Predator Models....................................................................................306
5.5.1	
Lotka–Volterra Prey–Predator Model...............................................307
5.5.1.1	
A Helping Hand................................................................. 310
5.5.2	
Predator Functional Response........................................................... 312
5.5.3	
Generalizing the Prey–Predator Model............................................ 313
5.5.3.1	
A Pasture–Herbivore Model.............................................. 317
5.5.3.2	
The Strange Case of the Spruce Budworm........................ 319
5.6	
Food Chains....................................................................................................323
Chapter 6	
Flow Reactor Modelling............................................................................................329
6.1	
Continuous-Flow Reactor Modelling.............................................................329
6.1.1	
Single CSTR......................................................................................330
6.1.1.1	
Hydraulic Retention Time.................................................330
6.1.1.2	
Which Input for the CSTR?............................................... 331
6.1.1.3	
Linearization of the CSTR Dynamics............................... 332
6.1.2	
Chain of Cascaded CSTR.................................................................334
6.1.2.1	
MATLAB Modelling of the Cascaded CSTRs.................336
6.1.3	
Steady-State Analysis of the Cascaded CSTRs................................338
6.1.4	
Feedback CSTR................................................................................. 341
6.1.5	
Generalized CSTR............................................................................343

xii
Contents
6.2	
Plug-Flow Reactor..........................................................................................345
6.3	
Diffusive Reactor............................................................................................348
6.3.1	
An Example of Feedback CSTRs with Diffusion: The Lake 
Huron–Saginaw Bay System.............................................................349
6.3.2	
Diffusion and Dispersion.................................................................. 351
6.3.3	
Diffusive Reactor Modelling............................................................. 353
6.3.3.1	
Impulse Response of the Diffusive Reactor......................354
6.3.3.2	
Transport Delay Modelling...............................................356
6.3.3.3	
Lumped-Parameter Approximation of the Diffusive 
Reactor...............................................................................357
6.3.3.4	
Diffusion Estimation from the Pulse Response................ 358
6.3.4	
The ‘Follow-the-Plug’ Model, a Lagrangian Approach....................360
6.3.5	
Numerical Treatment of the Monodimensional 
Diffusive Equation.......................................................................... 361
6.3.5.1	
Selecting the Proper Boundary Conditions.......................363
6.3.5.2	
A Boundary Value Initialization Problem.........................365
6.3.5.3	
A Least-Squares Initialization Problem............................366
6.3.6	
Spatial Discretization of the Diffusive Reach Model.......................367
6.3.6.1	
Numerical Simulation of the Diffusive Reach Model 
in Time and Space............................................................. 371
6.3.6.2	
Comparison with the CSTR Chain....................................373
Chapter 7	
Microbial Kinetics Modelling...................................................................................377
7.1	
Enzymatic Reaction Kinetics.........................................................................377
7.1.1	
A Summary of Elementary Chemical Kinetics................................377
7.1.2	
Enzyme-Mediated Reaction Kinetics...............................................378
7.1.3	
Self-Inhibiting Kinetics.....................................................................382
7.1.4	
Other Kinetics of Interest..................................................................383
7.2	
Microbial Metabolism of Carbonaceous Substrates......................................384
7.2.1	
Basic Molecule/Microorganism Interactions of Environmental 
Interest...............................................................................................384
7.2.2	
The Energy of Microbial Growth......................................................387
7.2.3	
Modelling the Microorganism/Substrate Interactions: 
The Monod Model.............................................................................389
7.2.3.1	
Which Units for the Carbon-Based Quantities?................ 391
7.2.4	
The Catabolic Pathway in the Heterotrophic Aerobic Metabolism...... 392
7.2.5	
Endogenous Metabolism...................................................................394
7.2.6	
Other Kinetics of Carbonaceous Substances....................................395
7.2.6.1	
Unbalanced Growth...........................................................396
7.2.7	
The Matrix Format of Microbial Models..........................................397
7.2.8	
MATLAB Implementation of the Aerobic Heterotrophic Model.....399
7.2.9	
The Oxygen Transfer Rate................................................................399
7.2.9.1	
Oxygen Transfer in Natural Waters...................................402
7.2.9.2	
Oxygen Transfer in Wastewater Treatment.......................402
7.2.9.3	
Complete DO Dynamics in Microbial Systems................403
7.2.10	 A Naïve Wastewater Treatment Plant Model....................................404
7.2.11	 Anaerobic Heterotrophic Metabolism...............................................407
7.3	
Microbial Metabolism of Nitrogenous Substrates.......................................... 411
7.3.1	
Nitrification Modelling...................................................................... 416
7.3.1.1	
Simplified Nitrification Modelling in Natural Waters....... 416

xiii
Contents
7.3.1.2	
Detailed Two-Step Nitrification Modelling....................... 418
7.3.1.3	
More Advanced Nitrification Models................................ 419
7.3.2	
Denitrification Modelling.................................................................. 421
7.3.3	
MATLAB/Simulink Implementation of ASM3_2N.........................422
7.3.3.1	
Creating and Using MEX Files.........................................422
7.4	
Microbial Metabolism of Phosphorus............................................................424
7.4.1	
Droop Cell-Quota Model..................................................................428
7.4.2	
PIM Model........................................................................................430
7.4.3	
Phosphorus Removal in Wastewater Treatment Processes...............434
7.4.4	
The Sequencing Batch Reactor Process for Nutrient Removal......... 437
7.4.4.1	
MATLAB Implementation of the SBR Model.................. 437
7.4.5	
Controlling the SBR Switching with Fuzzy Logic........................... 439
7.4.6	
Indirect Detection of Process Transitions......................................... 439
7.4.6.1	
Anaerobic/Anoxic Patterns................................................ 439
7.4.6.2	
Aerobic Patterns................................................................440
7.4.7	
Design of the Fuzzy Switching Logic...............................................440
7.4.8	
Design of the Fuzzy Inference System for the Phase Switching.......441
7.4.8.1	
Anoxic/Anaerobic Phase....................................................444
7.4.8.2	
Aerobic Phase....................................................................444
Chapter 8	
Analysis of Aquatic Ecosystems...............................................................................447
8.1	
The Oxygen Cycle in the Aquatic Environment............................................447
8.1.1	
DO Distribution along the Water Column........................................447
8.1.2	
The Role of the Aquatic Vegetation..................................................449
8.1.3	
Solar Radiation Modelling................................................................450
8.1.4	
Photosynthesis Modelling................................................................. 453
8.1.4.1	
Temperature Limitation.....................................................454
8.1.4.2	
Nutrients Limitation.......................................................... 455
8.2	
A Short-Term Oxygen Dynamical Balance....................................................456
8.3	
Analysis of the Circadian DO Cycles by Wavelet Filtering and Fuzzy 
Clustering.....................................................................................................459
8.3.1	
Dyadic Decomposition Denoising.....................................................462
8.3.2	
Diurnal DO Cycle Characterization..................................................463
8.3.2.1	
Fuzzy Clustering................................................................464
8.4	
Extending the Spatial–Temporal Validity of DO Models..............................465
8.5	
Beyond Streeter & Phelps: A Water Quality Model Case Study ..................468
8.5.1	
A Tale of Two Rivers......................................................................... 473
8.5.1.1	
Sieve Basin......................................................................... 474
8.5.1.2	
Ombrone Basin.................................................................. 474
8.5.2	
Model Structure................................................................................. 475
8.5.2.1	
Analysis of the Reactive Terms.........................................477
8.5.2.2	
Introduction of the Nonpoint Pollution Sources................ 478
8.5.3	
Parameter Estimation........................................................................ 478
8.5.3.1	
Sensitivity Analysis and Parameter Identifiability............ 478
8.5.3.2	
Calibration Results............................................................480
8.5.3.3	
Lessons to Be Drawn from the Exercise...........................485
8.6	
Estimation of Nutrient Bioavailability in Rivers............................................485
8.6.1	
A Steady-State Model Relating S. capricornutum Growth to 
Nutrients............................................................................................486

xiv
Contents
8.6.2	
Estimation of the Bioavailable Nutrient Concentrations...................488
8.6.3	
Field Application of the Method....................................................... 491
8.7	
Modelling an Horizontal Subsurface Constructed Wetland..........................492
8.7.1	
Hydraulic Model Identification.........................................................493
8.7.2	
Pollution Abatement Model...............................................................495
8.7.3	
Model Identification..........................................................................496
8.8	
Environmental Assessment of a Coastal Lake and Surrounding Wetlands......497
8.8.1	
Modelling the Massaciuccoli Lake Water Balance.............................499
8.8.2	
Using the Calibrated Model to Assess the Efficiency of the 
Diversion.............................................................................................501
8.9	
A Fish Habitat Suitability Assessment Based on Fuzzy Logic........................502
8.9.1	
Development of the FISH Algorithm..................................................504
8.9.2	
The FISH Algorithm...........................................................................506
8.9.3	
Instream Flow Analysis with FISH.....................................................508
References...................................................................................................................................... 513
Index............................................................................................................................................... 529

xv
Preface
God always forgives, man sometimes, nature never
Pope Francis
This book brings together systems theory and environmental science, by recasting environmental 
problems into a common system-theoretic methodology. In this way, simple models can be devel-
oped and new insights can be gained, which could not have been achieved otherwise. System theory 
is inherently a ‘reductionist’ discipline and its integration with the naturally ‘holistic’ environmen-
tal science at first was not easy. The first pioneering attempts at translating ecological principles into 
mathematical laws (Maynard Smith, 1974; Rinaldi et al., 1979) were met with a somewhat super-
cilious reaction by ecologists, who resented the intrusion of mathematicians (let alone engineers!) 
into their turf, and looked down on the attempt at translating ecological concepts into mathematical 
relations. Over the years, ego clashes have gradually receded and now mathematical modelling has 
become a well-established branch of ecology, in which this book is naturally set.
This book is about developing dynamical models of environmental processes, using a wide vari-
ety of mathematical methods. The first four chapters introduce the analytical tools for investigating 
environmental models and data. The emphasis is evenly balanced between the mechanistic and 
the data-driven approaches, assessing the merits and liabilities of both. Theory is introduced in its 
most accessible form and is applied to test cases based on first-hand data and experiences. While 
Chapters 1 and 2 illustrate with the basic concepts of modelling and identification, Chapter 3 deals 
with data processing, rarely considered in the environmental analysis, by introducing numerical 
techniques to improve the quality of the data and to extract the information they carry, in the 
context of model building and verification. Chapter 4 introduces the basic concepts of fuzzy logic 
and applies them to the modelling of environmental systems. Chapters 5 through 7 apply these 
methodologies to specific aspects of environmental modelling: population dynamics, flow systems, 
and environmental microbiology. The last chapter (Chapter 8) combines the notions of the previous 
chapters into the analysis of several aquatic ecosystems’ case studies. 
I am quite aware of the limitations of this book, because it reflects my own research experience, 
and therefore it is strongly oriented towards the aquatic environment, while it completely disregards 
other equally important subjects such as air pollution, groundwater, or solid waste, simply because 
I never worked in those areas. 
Far from being a ‘theory’ book, its approach is eminently practical, in that every methodologi-
cal concept is translated into a MATLAB® code. Nevertheless, this is not a recipe cookbook, but it 
takes the reader through a logical sequence from the basic steps of model building and data analysis 
to implementing these concepts into working computer codes, and then into assessing their results. 
Who should read this book? Certainly anyone who is looking for an introduction of the mathemati-
cal aspects of ecology, or anyone who wants to take a fresh look at known problems from a differing 
viewpoint. This book may represent a first encounter with mathematical modelling before going on 
to more advanced books in the specific field of interest. 
I have set up a quiver full of arrows. Then it is up to the archer-reader to call the shots. As Figure 
1 shows, this book spins a web of relations among system theory and environmental issues, mov-
ing from the predominantly methodological first four chapters to the more applicative subsequent 
part, where specific environmental problems are addressed. Clockwise from the top of Figure 1, 
Chapter 1 summarizes the basic concepts of system theory for both linear and nonlinear models, 
while Chapter 2 is devoted to model identification. Chapter 3 considers the data acquired from 
the field, how their quality can be improved and the embedded information extracted. Chapter 4 
describes the fuzzy approach to modelling and data analysis, showing that fuzzy models in many 
cases have an advantage over their mechanistic counterparts, and how the fuzzy approach can be 

xvi
Preface
profitably used for data analysis and diagnosis. While the first four chapters illustrate the method-
ological aspects of environmental systems analysis, the subsequent chapters apply them to specific 
environmental problems. Chapters 5 deals with population dynamics, from single species to food 
webs, with an emphasis on investigating the conditions for species conservation, or on ­explaining 
unexpected behaviours like the catastrophic forest defoliation caused by the spruce budworm. 
Chapter 6 deals with flow modelling. Far from competing with hydraulic modelling, it considers 
some simple flow schemes, which provide the first level for aquatic ecosystem modelling. Chapter 7 
introduces the basic concepts of environmental microbiology, both in the natural and man-made 
environment. I strived to show the similarities and the differences of microbial processes in either 
setting, without getting too much involved in the analysis of wastewater treatment systems, given the 
many excellent textbooks available in this area (Bastin and Dochain, 1990; Orhon and Artan, 1994; 
Olsson and Newell, 1999; Dochain and Vanrolleghem, 2001; Gujer, 2008). The final Chapter 8 is a 
wrap-up chapter, in which I discuss several case studies drawn from my own experience. 
It has been said that any scientific book is partly autobiographical, and this one is no exception. 
In fact, being near the end of my academic career, I felt the need to gather the lecture material that 
I have amassed in over 30 years of environment analysis teaching. Educating has been an exciting 
experience all along, because I was fortunate enough to teach students with differing backgrounds 
and brilliant minds, ranging from automation to environmental engineering, which resulted in a 
fruitful cross-fertilization. Class projects frequently became master theses, and sometimes pro-
duced journal papers, with the students’ involvement as co-authors. These mixed classes reflected 
my own mixed background, which blended my early electronic engineering training with the sub-
sequent commitment to environmental issues. I felt that I owed this book to generations of students, 
who have now become accomplished professionals, and from whom I still receive a constant flow 
of affection and gratitude. Now, when we meet at professional gatherings or just over a pizza, they 
Chapter 1:
Systems
theory
Chapter 2:
Model
identiﬁcation
Chapter 3:
Data
analysis
Chapter 4:
Fuzzy
models
Chapter 5:
Population
dynamics
Chapter 6:
Flow systems
analysis
Chapter 7:
Microbial
energetics
and dynamics
Chapter 8:
Aquatic
ecosystems
FIGURE 1  This book spins a web of relations (clockwise from the top) among system theory and environmental 
issues, moving from the predominantly methodological first four chapters to the more applicative subsequent 
chapters where specific environmental problems are addressed.

xvii
Preface
love to reminisce over their student days and how much we enjoyed working together and learning 
together. This book is my token of gratitude for the endless affection and inspiration I have been 
receiving from them all.
All the material in this book has been intensively student-tested and the companion software has 
been honed through many critical reviews by cohorts of students. I have found that MATLAB is 
an ideal teaching, and learning, tool in that it provides a platform where mathematical ideas can be 
quickly converted into ready-to-run codes. Unlike other more formal programming languages, such 
as Fortran or C/C++, which require setting up complex structures, in MATLAB the user can imme-
diately translate the problem at hand into an executable code and get the results in no time. Many 
segments of the MATLAB code (referred to as scripts) are included in the boxes along the book to 
demonstrate the programming structure, while the complete software collection can be downloaded 
from the book web page in the CRC Press website and copied in the local hard disk. It is strongly 
suggested to maintain the original folder structure, with a master directory named ESA _ Matlab, 
in which each chapter folder contains the pertinent codes for that chapter, plus a ‘tools’ folder, 
which gathers all the utility functions common to all chapters. No installation is necessary, but once 
MATLAB is started, the master folder and its subfolders must be added on top of the MATLAB 
path. This software organization makes the path definition vital to retrieve the called functions. The 
exercises for each chapter have self-explanatory names and are referenced in the figure captions. Of 
course, this book should not be considered as a MATLAB primer, many of which are freely avail-
able in the web. So a certain basic MATLAB literacy is a prerequisite.
A brief clarification regarding an important mathematical notation. Throughout the book the 
imaginary unit is indicated by j, so that j
j
×
= −1. There was an old joke circulating in the past say-
ing how you could tell a mathematician from an engineer. When asked about the imaginary unit, 
the mathematician would say i i
× = −1, while the engineer would claim that j
j
×
= −1, and this book 
goes for the latter, though MATLAB uses i. Additional material is available from the CRC Press 
Web site: http://www.crcpress.com/product/isbn/​9781498706353. 
Stefano Marsili-Libelli
University of Florence, Italy
MATLAB® is a registered trademark of The MathWorks, Inc. For product information, please 
contact:
The MathWorks, Inc.
3 Apple Hill Drive
Natick, MA 01760-2098 USA
Tel: +1 508 647 7000
Fax: +1 508 647 7001
E-mail: info@mathworks.com
Web: www.mathworks.com


xix
Acknowledgements
Research is a constant swing from frustration to elation and back, and so is scientific book writing. 
Far from being a solitary activity, I am indebted to a vast number of people with whom I shared 
elation and to whom I am grateful for pulling me out of frustration. My first thanks goes to my wife 
Patrizia, a devoted and reliable life companion, for the loving empathy and constant encouragement, 
apart from discussing some mathematical aspects of the book, being a math teacher. My daughters 
Ilaria and Chiara provided an equally enthusiastic backing. Ilaria, an agricultural microbiologist, 
is also to be thanked for revising Chapter 7. Apart from the family circle, I am deeply grateful 
to several people for their vital contribution both as accomplished professional and as very close 
friends. Two very special persons stand out, without whom this endeavour could not have been 
accomplished: Irma S. Britton, CRC Press senior editor, and Professor Emeritus William D. Lakin, 
University of Vermont, Burlington, VT. Irma has been a dream editor, the one that any author 
would love to encounter. From her and her staff, I received endless support and encouragement. Her 
ability to answer my queries and smooth my workflow has been invaluable. Bill Lakin, a friend of 
long standing and an excellent mathematician, carefully reviewed the whole manuscript and pro-
vided valuable comments regarding both the English and the mathematical aspects. His support has 
been vital. I am also grateful to Dr. Alessandro Spagni, ENEA Bologna and University of Padua, 
co-author of many papers and careful reviewer of Chapter 7. A special thanks goes to Dr. Luca 
Palmeri, University of Padua, for being the first instigator of this book. Upon his suggestion, I was 
invited by CRC Press to write a brief endorsement of his book (Palmeri et al., 2014) and then I was 
asked whether I had a book proposal of my own. I said yes, CRC Press liked my proposal, and this 
is how it all started. Another precious instigator of this book has been Dr. Michela Mulas, Aalto 
University, Finland, who in 2012 invited me to teach a short course entitled ‘Environmental Data 
Modeling and Analysis’. The material I prepared for that course later became the kernel of this 
book and her enthusiastic support for the initiative always spurred me throughout my toil. Much of 
the material presented in this book is the result of research carried out with my assistant Elisabetta 
Giusti, PhD. Her invaluable input, her curiosity, and her hard-nosed determination supported me 
in many ways during our decade-long fellowship rich in scientific advances, frank discussions, 
forthright personal interaction. I am also deeply indebted to Professor Antony Jakeman, Australian 
National University and Editor-in-Chief, Environmental Modelling and Software (EMS), for his 
loyal friendship, optimistic wisdom and constant encouragement. He asked me to join the EMS 
editorial board in 2004 and that job has been a constant source of reward, satisfaction and personal 
growth. I am also deeply grateful to Michelle Herbert, IWA Journals Editorial Co-ordinator, who 
sympathetically modulated my Water Science & Technology editorial work flow while I was busy 
with the book, and quickly provided the permission to reproduce several figures from my WST 
papers. I am also indebted to Design Science (www.dessci.com), particularly Bob Mathews and 
Derrick Fimon, for helping me getting the most out of MathType 6.9 for Windows, a superb math 
editor, which I used extensively to write the many equations appearing in the book. My PhD stu-
dents Emanuele El Basri and Giacomo Barni are to be thanked for their helpful assistance and the 
revision of the MATLAB codes. I am also thankful to www.brainyquotes.com for providing me 
with a vast source of inspiring citations, some of which I used as chapter openers.
In further hindsight, I am grateful to my late parents, who taught me to love and respect Nature 
from my early days, and to the medical staff who helped me in my battle against cancer, particularly 
Professor Moretti, who took away the worst part of me, and Professor Amadori, who guided me 
through the painful path of chemotherapy with a strong hand, unabashed optimism, and a captivating 
smile. Teaching during these ‘medical’ months was not easy, and I am grateful to my family and to 
my students, who supported and encouraged me through that dire moments. I owe them all this new 

xx
Acknowledgements
lease of life, which made the book possible. In that time I experienced first-hand Winston Churchill’s 
quotation ‘Success is not final, failure is not fatal: it is the courage to continue that counts’.
Scientific research is a never-ending struggle to further our knowledge, but there are times when 
we must pause and take stock of our progress. I hope that you will enjoy reading this book, as much 
as I did in writing it, and after turning the last page, lean back—as I have done after writing the last 
line—and take time to stand and stare.
What is this life if, full of care,
We have no time to stand and stare.
No time to stand beneath the boughs
And stare as long as sheep or cows.
No time to see, when woods we pass,
Where squirrels hide their nuts in grass.
No time to see, in broad daylight,
Streams full of stars, like skies at night.
No time to turn at Beauty’s glance,
And watch her feet, how they can dance.
No time to wait till her mouth can
Enrich that smile her eyes began.
A poor life this if, full of care,
We have no time to stand and stare.
 W. H. Davies
Leisure, 1911
Florence,
July 30, 2015.

xxi
Author
Stefano Marsili-Libelli was born and educated in Florence, Italy. He received a cum laude MS 
degree in electronic engineering from the University of Pisa in 1973. Later in the same year, 
he joined the University of Florence on a post-graduate grant and has served in the Faculty of 
Engineering ever since, first as a technical assistant, then as an associate professor (since 1983), and 
finally as a full professor of environmental system modelling since 2000. 
He has always been active in promoting the system theory approach to the study of environ-
mental systems, both at a faculty level and in a broader context, teaching seminars and courses on 
environmental modelling and control at the University of Gent (Belgium), University of Leuven 
(Belgium), Institute of Hydroinformatics (IHE, Delft, the Netherlands), Institute of Environmental 
Biotechnology, TU Delft (the Netherlands), University of Glamorgan (Wales, UK), Aalto University 
(Finland) and University and Polytechnic of Valencia (Spain).
He spent study periods at the Institute of Hydrology, Wallingford (UK); International Institute 
of Applied Systems Analysis (IIASA), Laxenburg (Austria); University of Glamorgan (Wales, UK).
He established Erasmus bilateral links with the University of Gent (Belgium), University of Delft 
(the Netherlands) and University of Amsterdam (the Netherlands).
Apart from being a founding member of the environmental engineering curriculum at the 
University of Florence, and serving as the director of the Laboratory of Environmental Process 
Control, he joined several PhD faculties, among which the PhD curriculum in hydrodynamics 
and environmental modelling (Consortium among the Universities of Padua, Florence, Genoa and 
Trento) and the PhD curriculum of sanitary engineering (University of Rome 2). He is presently 
serving as a faculty member of the international PhD curriculum in civil and environmental engi-
neering (University of Braunschweig, University of Florence, University of Pisa and University of 
Perugia).
Dr. Marsili-Libelli’s teaching responsibilities have always been in the modelling and control of 
the environmental systems, particularly aquatic environment, both natural and man-made, develop-
ing models describing the ecology of lagoons and rivers, as well as new models of microbial kinetics 
to be applied in the control of wastewater treatment systems.
Other research interests include the modelling of the environment using the fuzzy sets approach 
and the identification of environmental models, for which he proposed new ad hoc optimization 
methods for parameter estimation and validation. Modelling applications range from the rivers 
and lagoon to subsurface constructed wetlands, anaerobic digesters, aerobic wastewater treatment 
processes and agricultural systems.
He is presently serving as an associate editor for the ISI international journals Environmental 
Modelling & Software (Elsevier) and Water Science & Technology (IWA Publishing).
He is member of the following scientific societies:
•	 International Environmental Modelling & Software society (iEMSs)
•	 International Society of Ecological Modelling (ISEM)
•	 International Water Association (IWA)
•	 Italian Society for Automation (ANIPLA)
Over the years, Dr. Marsili-Libelli has received the following awards:
•	 The paper Checchi N., Giusti E., Marsili-Libelli S. (2007). PEAS: A toolbox to assess the 
accuracy of estimated parameters in environmental models. Environmental Modelling & 
Software 22: 899–913, was awarded the Best Paper Award 2007 by the Int. J. Environmental 
Modelling & Software. 

xxii
Author
•	 Biennial Medal awarded by the International Environmental Modelling & Software ­society 
(iEMSs) in 2008.
•	 Nomination to iEMSs Fellow in 2008.
•	 Best paper award granted by AssoAutomazione (Italian association for automation) in the 
area of Technological Innovation in the Water Sector, biennial Forum for remote control of 
public utilities, Rome, October 2009.
•	 Nominated Reviewer of the year 2010 by the Editorial Board of the Int. J. Environmental 
Modelling & Software.
•	 Best paper award granted by AssoAutomazione (Italian association for automation) in the 
area of Competition and Sustainability in the Public Utilities, biennial Forum for remote 
control of public utilities, Bologna, November 2013.

1
1 Introduction
I became more and more convinced that even Nature could be understood as a relatively 
simple mathematical structure, but how can it be that mathematics, being after all a product 
of human thought which is independent of experience, is so admirably appropriate to the 
objects of reality?
Albert Einstein
This book is about building mathematical models of environmental systems, and using these ­models 
to analyse their behaviours. Models are mind representations of reality. They are at the basis of 
modern science, pioneered by Galileo Galilei and Isaac Newton. Environmental models, no mat-
ter how elaborate, have the peculiarity of being simplified representations of Nature’s complexity. 
Nevertheless, they helped scientists make inroads into understanding the functioning of the envi-
ronment in which we are living. To help us in this endeavour, computers make our mind creations 
come alive, so that we can explore a whole paradigm of what–if scenarios, and check the correct-
ness or fallacy of our assumptions.
1.1  ENVIRONMENTAL SYSTEMS MODELLING, THE BASIC CONCEPTS
Environmental models are abstract representations of reality that can be used to improve our under-
standing of the natural systems or to assist in taking management decisions. The task of the mod-
eller is to translate non-numerical concepts and facts into mathematical equations that describe the 
system evolution in quantitative terms, as illustrated in Figure 1.1. The first pioneering attempts 
at turning ecological principles into mathematical laws focused on population dynamics (Gause, 
1934; Morris and Miller, 1954; Leslie, 1957; May, 1974, 1976a; Maynard Smith, 1974). Since then 
mathematical modelling of ecosystems has won a growing acceptance in the field of ecology and 
is now an integral part of it (May, 1976b; Pielou, 1977; Casti, 1979; Begon and Mortimer, 1986; 
Hallam and Levin, 1986; Levin et al., 1989; Agren and Bosatta, 1996; Ricklefs and Miller, 1999; 
Clark and Mangel, 2000; Gotelli, 2001; Odum and Barrett, 2004; Rockwood, 2006; Pastor, 2008; 
Krebs, 2009; Legendre and Legendre, 2012; Mittelbach, 2012; Vandermeer and Goldberg, 2013).
Given the holistic nature of ecology, when we consider an ecosystem, we inevitably draw a 
line between the part of the ecosystem we want to study and what we want (or have) to leave out, 
thus making a somewhat arbitrary division between the inside and the outside of the subject of 
our study. No matter how we draw this boundary, however, the outside portion will continue to 
influence the evolution of the inside system, interacting with it through the boundary that we have 
drawn. We therefore create the somewhat artificial situation shown in Figure 1.2 and confine our 
study to the inner part of the ecosystem described by the variables x t( ). No matter where we set 
the border, the outside part will continue to influence its evolution by providing external inputs u t( ) 
crossing the ecosystem boundaries, whereas other dynamics z t( ), not directly related to the inside 
portion, will continue to evolve and influence the inner system behaviour.
Thus, when modelling an ecosystem, the following preliminary aspects must be addressed:
	
1.	Decide where to put the boundary
	
2.	Identify which inputs u t( ), either controllable or not, influence the inner ecosystem from 
the outside
	
3.	Determine which external dynamics z t( ) are relevant for the inner system, either directly 
or indirectly

2
Environmental Systems Analysis with MATLAB®
Thus, three sets of equations (models) must be considered: the inner system dynamics, described by 
the state variables x t( ), the input functions u t( ) and the outer dynamics z t( ) for the portion related 
to the generation of the inputs u t( ). Consequently, the basic model of our ecosystem is composed of 
the three main blocks of the following equations:
	
Inner system dynamics,
External inputs,
Extern
d
dt
x
f x u
u
f z
=
=
( , )
( )
al dynamics,
d
dt
z
h z
=








( )
	
(1.1)
Modelling can serve different purposes, and the end use of the model should be decided from 
the very start, because this decision will greatly affect the subsequent model development phase. 
Environmental modelling can be undertaken for the following purposes:
kc (Csat − C) − kbB
dt
dC
dt
dB
=
−kbB
=
Ecosystem
Model
FIGURE 1.1  The modelling process: from natural facts to their mathematical representation.
External 
dynamics 
Ecosystem
Internal
dynamics
External
effects
z(t)
x(t)
u(t)
External environment
Forcing
inputs
FIGURE 1.2  Ecosystems boundaries are stretchy and are usually set at our convenience.

3
Introduction
•	 Research: To gain a deeper insight into the ecosystem workings.
•	 Forecasting: To try to glean the possible ecosystem evolution in the future.
•	 Management: To assist in the development of management policies, assess the costs and 
benefits of alternative solutions and so on.
In the scheme of Figure 1.3, forecasting and management are closely linked because management 
decisions are based on the generation of what–if scenarios, for which the forecasting capabilities of 
models are required.
1.2  ATTRIBUTES AND DICHOTOMIES OF ENVIRONMENTAL MODELS
Some basic features of environmental models will now be discussed to illustrate that apparent con-
tradictions can, in fact, be reconciled by realizing that they represent complementary aspects of the 
same reality.
1.2.1  Environmental Models as Balances
First, it is important to understand that ecosystems are characterized by the flow of energy and 
matter (Pentz, 1972; Odum, 1983, 1988, 2000a; Odum and Odum, 2000; Agren and Bosatta, 1996; 
Ricklefs and Miller, 1999). In this sense, ecosystem models may be regarded as double ledgers, bal-
ancing inputs and outputs for both mass and energy. Figure 1.4 shows the main difference between 
energy and matter flows through the ecosystem. In particular, the energy flow is unidirectional and 
dissipative (lossy flow), whereas the materials flow is circular and conservative. Energy is carried 
through the ecosystem by matter, which is recycled between biotic and abiotic components.
The basic energy supply comes from the sun (solar energy), and in its unidirectional flow across 
the ecosystem, it is partially converted into matter, which may be regarded as an energy reservoir 
and transporter, never to come back again. Conversely, matter is neither created nor destroyed, 
but just transformed into matter of a different form. For example, inorganic carbon in the form of 
CO2 is converted into organic carbon by autotrophic organisms through photosynthesis, and then 
back again into CO2 by decomposers. Losses occur along the energy flow because the fraction 
that is not converted into matter is simply lost to the environment as heat or respiration. Thus, 
the net energy collected at the high end of the ecosystem (highly complex organisms) is just a 
small fraction of the incoming energy. Though matter can be regarded as an energy storage, and 
it can be expressed in the same units as energy (kcal or Joules), the cost of producing matter 
from energy greatly varies with the level of complexity of the organism. The concept of trans-
formity (Odum, 1988; Bastianoni, 2008; Jorgensen, 2008) was introduced to quantify the energy 
required to produce a unit of mass with a certain level of organization, in this way denoting that 
the value of the produced matter depends on the energy required to obtain the transformation. 
Modelling
for...
Research
Forecasting
Management
Level of complexity
Time-space horizon
Gain further insight into the
ecosystem workings
Try to forecast its
future evolution
Assist in the
decision process
FIGURE 1.3  The level of modelling detail depends on the final use and involves differing levels of complexity 
and model horizon (the arrows point to the increasing direction).

4
Environmental Systems Analysis with MATLAB®
Odum (1988) proposed this term by defining the solar transformity as the amount of solar energy 
(Joules) required to produce 1 Joule of matter of a certain complexity. So, while the incident solar 
radiation has obviously a transformity equal to 1, the more complex is an organism, the higher 
is its transformity. Thus, the embodied energy or emergy is a measure of the value of the matter 
of each organism in an ecosystem (Odum et al., 2000; Brown and Bardi, 2001; Brandt-Williams, 
2002; Jorgensen et al., 2004). Palmeri et al. (2014) thoroughly discuss these concepts and report 
numerical values for the transformity of many common materials. For example, crude oil has a 
transformity of 5.4, whereas the transformity of corn (8.3), caterpillar pupae (200), or aquacul-
ture shrimp (1300) denotes the increasing ecological values of these ecosystem components as 
they move up the evolutionary ladder.
An example will help to clarify the computation of energy flow in a simple ecosystem. Consider 
crop growth: besides water and nutrients, its subsistence is primarily based on the solar radiation, 
which provides the energy required to activate the photosynthetic process. Figure 1.5 shows some 
typical quantities to illustrate how this incoming energy is converted into organic matter through 
crop growth. It can be seen that only a very small fraction of the incoming solar energy is actually 
utilized by the plants (1.274%), which on the other hand are very efficient in converting that amount 
of energy into organic matter (82.5%). The resulting biomass (primary production) can be regarded 
as energy stored as matter, to be eventually utilized by other organisms (consumers), thus forming 
a food chain, as will be considered in Chapter 5.
The mass and energy balances of Figure 1.4 and the example of Figure 1.5 show the dif-
fering nature of the flow of energy and materials across the ecosystem boundaries. Figure 1.4 
is a qualitative picture describing the fate of the ecosystem components, whereas Figure 1.5 
represents a quantitative assessment of energy flow through a simple system composed of pri-
mary producers. Further, the numbers shown in Figure 1.5 are assumed to be constant in time 
(they could be regarded as long-term averages), whereas in fact the energy flow is always vary-
ing in time due to the daily and seasonal cycles. So static balances are always a simplification, 
which  ­sometimes may suffice in modelling the ecosystem, but more often may prove inad-
equate. We may opt for a static or a dynamical model depending on the importance of the time 
variations. The following are some considerations that can help to decide the most appropriate 
approach:
Respiration
Respiration
Heat
Gross
production
Net
production
Import
Export
Production
Materials
cycling
Energy 
Unidirectional
energy flow
Materials
recycling
Materials
transformations
Autotrophic
organisms
Incoming
solar
energy
Heterotrophic
organisms
Matter
FIGURE 1.4  Materials and energy balances across an ecosystem.

5
Introduction
•	 Static balance: Assumes that the system is at steady state, which may be reasonable on a 
long-term time horizon. Reconciles the long-term mass and energy flows.
•	 Dynamical balance: Keeps track of the short-term variations in the system. Reconciles 
the short-term rates of mass and energy conservation, taking into account the internal 
transformations.
Both balances should take into account not just the exchanges with the external world, but also 
the internal transformations, whereby one component is transformed into another through energy–­
matter conversion. It is up to the modeller to make the most appropriate choice for the problem 
at hand. Generally, a static balance is sufficient when the system is considered at steady state or 
when its dynamics is very slow. Usually, in this case, a long-term time horizon is considered and 
average quantities are used. In that balance, inputs and outputs should cancel out, considering the 
transformations between energy and mass, as in the example of Figure 1.5. On the other hand, on 
a short-term time horizon, the system total quantities may not be at equilibrium, with storage act-
ing as a sort of flywheel to compensate for the imbalances. In this case, a dynamical balance is 
required, involving the rates rather than the quantities, as in Equation 1.2 where the time step Δt 
figures prominently.
	
Rate
of
change
storage
input
output
transp












= ∆
∆
=
∆
−
∆
t
t
t
ort
internaltransformati
generation
utilization





+
∆
−
∆
t
t
ons





	
(1.2)
The basic features characterizing static and dynamical balances are summarized in Table 1.1. It 
can be seen that from the modelling viewpoint, the static balance is by far less demanding, because 
it just requires a balance of the average quantities, whereas the dynamical model requires further 
knowledge of the rates that govern the internal transformation. The pertinent mathematical tools 
are also different, because in the static case a set of simple algebraic equations will balance the 
Heat loss
(evaporation + reflection)
4.65 × 105
Net
production
4.95 × 103
Respiration
0.876 × 103
Crop
growth
Solar energy utilization
Incoming
solar
energy
4.71 × 105
Utilized solar energy
100 ⋅Incoming solar energy
Energy conversion
Converted solar energy
100 ⋅Incoming solar energy
4.71 × 105 − 4.65 × 105
= 100 ⋅
4.71 × 105
6.00 × 103
= 1.274%
4.71 × 105
= 100 ⋅
4.95 × 103
= 1.05%
4.71 × 105
= 100 ⋅
4.95 × 103
= 82.5%
6.00 × 103
100 ⋅
=
Converted solar energy
100 ⋅
Utilized solar energy
FIGURE 1.5  An example of energy flow across a simple ecosystem (crop growth) using typical energy values. 
It can be seen that just about 1% is eventually converted into organic matter but the conversion efficiency of 
primary producers is very high (82.5%). (Data from Pentz, M.J., Science Foundation Courses: Unit 20 Species 
and Populations, The Open University Press, Oxford, 86, 1972.)

6
Environmental Systems Analysis with MATLAB®
system, whereas in the dynamical case the modelling of time-varying rates requires the use of 
­difference or differential equations.
As a concluding remark about the differing features of static and dynamical models, consider the 
two situations shown in Figure 1.6 where an ecosystem is driven by a time-varying input, and its out-
put is to be monitored with reference to some threshold (perhaps representing some environmental 
limit, not to be exceeded). If the average input is considered and a static model is developed, based 
on static material and energy balances, then the upper time plot shows that the (average) model 
output appears to comply with the required limit. Instead, if the full input variability is considered 
(lower time plot) and a dynamical model is developed, the full output swings (and violations), previ-
ously lost in the static model, now become apparent. This new, more detailed analysis may reveal 
the inadequate environmental compliance and generally sheds more light into the system behaviour.
1.2.2  First-Principle versus Data-Driven Modelling
There are two basic approaches to modelling that may sometimes be combined, but otherwise rest 
on radically differing assumptions. Their main features are briefly summarized here, whereas both 
techniques will be treated in detail in subsequent chapters.
Mechanistic or first-principle modelling is the most conventional approach to model building. 
This approach constructs models on the basis of the available theory in the pertinent fields of knowl-
edge (physics, chemistry, biology, etc.). The modelling task is facilitated by the prior availability of 
TABLE 1.1
Characteristics of Static and Dynamical Balances
Static Balance
Dynamical Balance
Assumes that all the inputs and process variables have a 
constant value
Takes into account time-varying inputs and the internal variability
Assumes static mass and energy balances
Uses dynamical mass and energy balances
Neglects internal storage and reaction processes
Includes internal storage and reaction processes
Uses algebraic equations
Uses dynamical equations
u
u
Ecosystem
(Static model)
Ecosystem
(Dynamic model)
Assumes input
average as
design base
Includes input
variability
Assumes static
mass balances
Includes internal
dynamics
Environmental
limit
y
y
Output meets
environmental
limit (on average)
Output exceeds
environmental limit
(occasionally)
Threshold violations
FIGURE 1.6  Differing insights provided by static and dynamical modelling.

7
Introduction
the principles and equations required to set up the model, and the model-building process consists of 
selecting the right kind of equations and of adjusting the model parameters to obtain the best possible 
match between observations and model output. This latter aspect will be amply treated in Chapter 2. 
The mechanistic approach generally yields parsimonious (i.e. low complexity) models, whose inner 
workings are apparent and can be easily disseminated and understood by third parties. This approach 
is certainly appropriate when the aim of modelling is to gain a deeper phenomenological understand-
ing of the system, and the reality being modelled is known to rest on solid physical principles.
Data-driven models, on the other hand, are based on the opposite assumption that nothing is 
known of the internal functioning of the system, and the aim is just to match the data and the model 
outputs. Of course, data-driven models have a structure of their own, but this is totally predeter-
mined by the modeller in order to achieve the desired matching and has nothing to do with the 
actual inner structure of the system. This approach is preferable to the mechanistic method when 
the physical principles at the basis of the observed behaviour are not clearly understood, or when a 
mechanistic model would be too complex and/or too difficult to calibrate. These models are often 
called black-box models when the inner model structure is totally inaccessible, or grey-box models 
when a partial internal description is possible. There are several classes of data-driven models, 
depending on the mathematical approach: the most popular being the principal components analy-
sis, decision trees, neural networks (NNs) and fuzzy models (FMs), to name but a few. This list is 
surely neither exhaustive nor mutually exclusive, in the sense that two or more of these approaches 
can be combined to obtain a hybrid model that inherits the best properties of each. In all cases, the 
model structure depends on the method, and its dimension should be selected by the user seeking a 
compromise between model performance and computational complexity.
1.2.3  Environmental Modelling Approach versus Data Availability
Because the purpose of environmental modelling is to reproduce the observed natural behaviour, 
any model requires data for its construction and verification. Of the techniques just mentioned, not 
all have similar requirements when it comes to data needs: as expected, mechanistic models will 
be less data hungry thanks to their internal predetermined structure, whereas data-driven models, 
relying solely on data for their functioning, will require considerably more data for their training 
and validation. A rough qualitative diagram relating the amount of data required to build a model 
versus the available knowledge is shown in Figure 1.7. Now the characteristics of some data-driven 
methods are briefly described.
Principal component analysis and decision trees are the simplest, often preliminary, analyses 
that can be applied to the data. They can hardly be considered as proper models, because they just 
perform data manipulation in order to extract information from the data. In this sense, they might 
be rather considered as data-mining (Witten and Frank, 2005) techniques aimed at putting order 
in the data, for example, determining a set of sub-regions in the data space by aggregating data 
according to some kind of similarity. In this way, these methods are often capable of revealing hid-
den structures in the data, and they may pave the way towards more sophisticated analyses. Apart 
from the blind approach, which disregards cause–effect relationships in the data, the other major 
limit of these methods is the lack of time indexing, so that the sequential nature of the data is lost 
and only ensemble analysis is performed. For this reason, with reference to Figure 1.7, they can be 
placed in an area where little knowledge and few data are available, in the sense that the limited 
results expected from this analysis can be achieved even with a limited amount of data. Of course, 
the insight gained into the problem is also equally limited, and at the end of this analysis, we will 
be left none the wiser about the causes behind the observed behaviour.
Coming to more organized approaches, stochastic models (SMs), NNs and fuzzy systems all share 
the common feature of being truly data-driven, in the sense that their inner structure (or complexity) 
is decided by the user, possibly with an eye to the amount of available data and the purpose of model-
ling, but totally disconnected from the nature of the environmental process.

8
Environmental Systems Analysis with MATLAB®
The purpose of SMs (Astrom, 1970; Ljung, 1999; Box et al., 2008) is to reproduce the observed 
time-varying input–output behaviour without any attempt to explain the inner system structure 
from a mechanistic viewpoint. Their use should be preceded by a careful structural analysis to 
establish the cause–effect relationship in data, that is, to define the system inputs (causes) and 
outputs (effects) in order to understand which is which. SMs generally have a linear structure con-
sisting of three parts, which represent the contribution of the past outputs (auto-regressive, AR, 
part), of the deterministic inputs (exogenous part), and the influence of unmeasurable white noise 
on the system. The possible combination of past noise samples (moving average, MA, part) makes 
this term auto-correlated in the sense that it is partially predictable on the basis of past observa-
tions. This is not true for white noise, which is by definition unpredictable, because each sample 
is uncorrelated with all the previous samples. The concept of autocorrelation will be considered 
in detail in Chapters 2 and 3. Partially correlated noise is also referred to as coloured noise, as 
opposed to the wholly unpredictable white noise. A simple ARMA exogenous (ARMAX) model 
has the form
	
y
a y
a y
b u
b u
t
t
n
t n
t
m t m
=
+
+
+
+
+
−
−
−
−
1
1
AR
1
1
deterministic







exogenous input
1
1
MA part
(coloure






+
+
+
+
−
−
ε
ε
ε
t
t
n t n
c
c
d noise)





	
(1.3)
where the model parameters a
a b
b
c
c
n
m
n
1
1
1
,
,
,
,
,
,
,
,
…
…
…
(
) must be estimated in order to achieve the 
best possible agreement between the observed and the model outputs. The degrees of freedom of the 
model (1.3) consist of deciding how many past samples (n and m) should be considered in each part, 
considering that the MA part is generally—but not necessarily—of the same order as the AR part. 
Early modellers put a premium on keeping the model complexity low, and this resulted in very sim-
ple models, spawning the enormously successful field of adaptive control (Astrom, 1970), where the 
controller is based on a model that could be recalibrated in real time thanks to its simple structure.
SMs became popular in the 1970s when control engineers were confronted with difficult pro-
cesses, such as a gas furnace, paper mill and arc welding, which defied a first-principle approach, 
given the complexity and variability of the involved dynamics. The calibration of SMs generally 
requires a large amount of data, usually partitioned in calibration and validation data sets. The 
calibration of the MA part posed special problems because the past noise samples ε ε
ε
t
t
t n
,
,
,
1
−
−
…
(
) 
Mechanistic
models
PCA
Required data
Required knowledge
Data-driven models
Theory-driven models
Decision
trees
Stochastic
models
Data
transforms
Neural
networks
Fuzzy
models
FIGURE 1.7  Possible modelling paradigms in the knowledge versus data domain.

9
Introduction
were by definition unavailable. This difficulty was solved with the introduction of auxiliary vari-
ables called instrumental variables (Young, 1970). This theory was later structured and refined to 
become a MATLAB® toolbox (Young, 2006; Tych and Young, 2012).
NNs came later and share with SMs the narrow goal of reproducing an observed behaviour. 
Exploiting the parallel progress in computing power, NNs have a more complex structure and 
require more sophisticated calibration techniques than SMs. They also introduce inner nonlineari-
ties to make their behaviour more flexible. The workings of NNs were basically inspired by the 
basic element of the nervous system, the neuron, which reacts by activating its output (perception) 
when the input stimulus exceeds a given threshold. There are several neurological factors that can 
shape the neural response, and to account for this behaviour, a nonlinear activation function was 
introduced, an example of which is shown in Figure 1.8a. The input information is propagated 
to the output through an array of neurons, generally organized in an input layer, a hidden layer 
and an output layer, as shown in Figure 1.8b. The presence of the intermediate (hidden) layer 
greatly amplifies the flexibility of the NNs. The key to the success of the NNs is undoubtedly the 
backpropagation (BP) algorithm (Rumelhart and McClelland, 1986; Goldberg, 1989; Press et al., 
1986; Dahlquist and Bjorck, 2003) used to tune the weights of each neuron (often called synapsis 
to follow the nervous system analogy) in approximating the training data. The BP algorithm is an 
extension of a gradient descent in the synaptic space, sometimes ending in a local minimum, as its 
detractors pointed out. This criticism notwithstanding, the BP algorithm, and its many subsequent 
modifications, made the fortune of the NNs. For a thorough introduction to NNs, the reader is 
referred to the excellent survey by Lippmann (1987). NNs are extensively used in environmental 
modelling where very complex phenomena like algal blooms (Wilson and Recknagel, 2001) or the 
dynamics of aquatic insect populations (Obach et al., 2001) can be conveniently modelled with 
relatively simple NN structures.
FMs, which will be thoroughly described in Chapter 4, introduce the concept of approximate 
reasoning into the model, which is composed of a collection of logical rules. The model output is 
obtained as a weighted sum of the individual response of an array of classifiers, similar to the neural 
response, which in this case is softened by the concept of degree of membership obtained by compar-
ing the data to a predefined set of prototypical behaviours. FMs possess a higher degree of structure 
than the previous models, and this can be partially traded for a lesser data availability. For this 
reason, FMs have been put on the descending arc in the modelling paradigm of Figure 1.7. FMs are 
often combined with NNs to form neuro FMs (Kosko, 1992; Jang, 1993; Brown and Harris, 1994; 
Jang et al., 1996; Tsoukalas et al., 1997a, b; Fuller, 1999). In a nutshell, fuzzy reasoning consists of 
a collection of modus ponens implications whereby the degree of truth of the antecedents implies 
the degree of truth of the consequent. Contrary to conventional wisdom, for which a concept is either 
true or false, in fuzzy reasoning, the degree of truth runs smoothly from 0 (false) to true (1). Having 
defined a set of reference concepts (prototypes), the input variables are fuzzified by comparing them 
with the prototypes to obtain their degree of truth. Through an implication operator, these anteced-
ent degrees of truth are projected onto the consequent. All of the degrees of truth resulting from each 
rule are then combined through defuzzification to yield the reasoning outcome, which in our case is 
Input layer
Hidden layer
Output layer
x3
x2
x1
y1
y2
Input
Activation
ON
OFF
Activation function
Input
Activation
(a)
(b)
FIGURE 1.8  Typical neuron activation response (a) and a generic NN structure (b).

10
Environmental Systems Analysis with MATLAB®
the model output. All these operations will be described in detail in Chapter 4. Formally, the generic 
ith fuzzy rule can be written as
	
R
x
A
x
A
x
A
i
n
n
: if
is
and
is
and,
,and
is
1
1
2
2
antecedents
(
)
(
)
…
(
)











      then       
is
implication
c
y
B
i
i
(
)
onsequent



 	
(1.4)
where the degrees of truth of the antecedents x
xn
1,
,

(
) with respect to their prototypes (A1, …, An )
are combined (and-ed) prior to the implication (then) onto the consequent. Graphically, the fuzzy 
reasoning scheme is shown in Figure 1.9, in which the triangles represent the prototype membership 
functions.
The last paradigm in Figure 1.7 is the mechanistic (or first-principle) approach, which sets up the 
model by sifting into the appropriate knowledge domain. Given the vast knowledge embedded in 
the principles, much less is to be learned from the data, which are nevertheless necessary to produce 
a model that agrees with the observations, as explained in Chapter 2. A concluding comment on 
Figure 1.7 regards data versus information richness; in other words plentiful data are not necessar-
ily good data. There are situations in which data are abundant, but carry little information, so that 
the model will not learn much from those data. When dealing with experimental time series, the 
premium will be put on the richness of information carried by the data, rather than in their abun-
dance, as will be explained in Chapter 3. Several caveats should be considered when performing 
a preliminary data screening. In deciding whether a data-driven approach should be preferred to a 
mechanistic model, consider that the former is basically a data description, whereas the latter is a 
system description. In the first case, the series of experimental data should be closely examined to 
check their informative content and to make sure that they cover all the possible situations that we 
want to model, considering that data-driven models have less generalization capabilities than their 
mechanistic counterpart. Conversely, if a system description is pursued (mechanistic model), the 
generalization property is intrinsic to its structure, so that less data are required for its calibration, 
though they will still play a crucial role in testing and validating the model.
Remember that a good model can trade a large amount of data information for a small amount 
of system information and that a complex model is not necessarily more accurate and reliable than 
a simple one! In fact, very large models calibrated with very large data sets risk data over-fitting, 
meaning that the model response is systematically too close to the data, creating the illusion of a 
x1
x2
xn
Inference
rules
y
m membership
functions
μ1(x1) ... μm(x1)
μ1(xn) ... μm(xn)
n antecedent
variables
Defuzzification
ydefuz
Antecedents
Consequent
m membership
functions
FIGURE 1.9  Functional diagram of a fuzzy reasoning scheme.

11
Introduction
perfect model, but in fact just producing a replication of the data, and the noise that comes with 
them, and consequently it lacks generality.
With these caveats and limitations in mind, the model-building process can be summarized in 
Figure 1.10. It refers to mechanistic model building, but with small changes it can also be adapted 
to data-driven models. Starting from the upper left corner, there must be a motivation for build-
ing a model, be it a lofty scientific endeavour or a more mundane economic need. In all cases, the 
modelling effort should be appropriate for the model purpose, avoiding any attempt to overkill the 
problem by setting up a model that is more complex (and costly) than strictly necessary. Quoting 
Albert Einstein: ‘Everything should be made as simple as possible, but not simpler.’
Having defined the purpose (and budget) of the application, an objective function should be 
defined by which the model performance will be assessed, declaring beforehand which margin of 
error is acceptable. This is a critical step for the modeller, because it will set the yardstick by which 
the model will be eventually accepted or rejected. The modeller should be very honest in setting 
this acceptability mark, because too low a threshold will have little credibility, whereas a too high 
mark will be hardly ever met, possibly leading to the rejection of an otherwise useful model. So, be 
careful!
Considering the first iterative loop of Figure 1.10, the mathematical equations required to set up 
the model should now be selected. In the case of data-driven models, this step can be replaced by a 
selection of the most suitable approach of Figure 1.7. The model development core box involves the 
selection of the pertinent physical principles at the basis of the model and its adaptation to the case 
at hand. This is achieved through the inner loop of Figure 1.10, where calibration data are used to 
adjust the model parameter so that its response, obtained by simulation, is a good approximation of 
the observed behaviour according to a figure of merit that will be specified later. After the best pos-
sible agreement between model response and calibration data has been achieved, the procedure moves 
to the outer loop, in which another independent data set (validation data) is used to cross-check the 
model validity. Unlike the outer loop, in this case no further parameter adjustments are made, and the 
agreement between validation data and model response is again tested. This second check is aimed at 
assessing the model generality, represented by the ability to explain data with which it was not previ-
ously trained. Normally, this second match will be slightly worse than the calibration match, but some 
Model
development
Parameter
estimation
Selection of physical principles
and/or model variables
Model validation
Model application
Experimental data gathering
Simulations
Define model goals and
objective function
Application
problem
Calibration data
Validation data
Parametric
adjustments
Structural
adjustments
FIGURE 1.10  The model-building process as an iterative procedure.

12
Environmental Systems Analysis with MATLAB®
statistical tests should be passed before the model is validated. If validation fails, first the ­validity of 
this second data set should be scrutinized: are they equally representative of the typical model opera-
tional behaviour, albeit different from the calibration data? Are they general enough? Is the signal/
noise ratio comparable with the calibration data? If these questions are positively resolved, then the 
model structure should be reconsidered and its components changed accordingly until the new struc-
ture successfully passes both the calibration and validation tests, after which it can be released.
1.3  PRACTICAL MECHANISTIC MODELLING
The notions of the previous sections are enough to introduce some general guidelines for the 
­model-building process. In this section mechanistic (or first-principle) models will be considered 
as they are naturally related to the familiar principles of physics, chemistry and other branches of 
science. In mechanistic models, the first and most relevant aspect is the selection of the pertinent 
physical laws describing the system behaviour, so attention will now be focussed on specifying the 
structure of these models, leaving the parameter calibration task (a formidable one indeed!) for 
Chapter 2. Going back to the model-building diagram of Figure 1.10, the central block can now be 
expanded to reveal the finer inner structure of Figure 1.11.
As already discussed in Section 1.2.1, environmental models involve mass and energy dynamical 
equilibria, as described by Equation 1.2, to balance input–output flows and internal transformations 
(generation/utilization) within the control volume delimiting the system boundaries, as shown in 
Figure 1.12.
The dynamical balance Equation 1.2 is repeated here for convenience.
	
Rate
of
change
storage
input
output
transp












= ∆
∆
=
∆
−
∆
t
t
t
ort
internaltransformati
generation
utilization





+
∆
−
∆
t
t
ons





	
(1.5)
In mathematical terms, this implies that differential (or difference) equations must be written for the 
state x ∈
(
)
n  and output y∈
(
)
q  model variables in the form of Equation 1.6. In the continuous-
time case, the explicit reference to time t will be dropped for simplicity in the following. 
Basic laws
(physics, chemistry, etc.)
Basic dynamical
equations
Auxiliary
(non-dynamical)
equations
Mass and energy
balances
Model
development
FIGURE 1.11  The finer inner structure of the mechanistic model building: selecting the appropriate equation set.

13
Introduction
	
Continuous-time 
discrete-time
d
dt
x
f x u z
y
g x u z
x
=
(
)
= (
)



, ,
, ,
t
t
t
t
t
t
t
t
+ =
(
= (
)



1
f x u z
y
g x u z
,
,
,
,
	
(1.6)
In Equation 1.6, the vector-valued functions f i( )
→
: 

n
n and g i( )
→
: 

n
q may involve not 
only the state variables x ∈
(
)
n  and the inputs u∈
(
)
m , but also other variables z ∈
(
)
g  that are 
required by the rate equations, but do not appear on the left-hand-side derivative (or difference) 
of Equation 1.6. Unless these variables are expressed in terms of (x), the model equations are not 
matched in the sense that they cannot be solved because the state variables x( ), whose time deriva-
tives form the left side of the state equations, may not be fully matched by the expressions on the 
right side. In this case, the basic equations in Equation 1.6 must be complemented with auxiliary 
algebraic equations x
h x u z
= (
)
, ,
 in order to obtain a matching set of dynamical equations in which 
all the state variables x( ) appear on both sides of the equations, that is,
	
Continuous-time
discrete-time
d
dt
t
x
f
x u
y
g
x u
x
=
(
)
=
(
)



+
1
1
1
,
,
=
(
)
=
(
)



f
x u
y
g
x u
1
1
t
t
t
t
t
,
,
	
(1.7)
1.3.1  An Example of a Simple Mechanistic Model
Let us consider a cylindrical tank with constant cross section A, whose input flow (Fi) can be manip-
ulated, whereas the output flow is controlled by gravity, the water height (h) and the friction coef-
ficient of the output pipe kv, as shown in Figure 1.13.
Assuming a constant specific weight of the liquid γ, the mass balance around the control volume 
(i.e. the volume of the liquid in the tank) reduces to a volume balance
	
A dh
dt
F
F
=
−
i
o	
(1.8)
If we limit ourselves to this basic Equation 1.8, little progress can be achieved because the water 
height (h) is not directly related to the output flow (Fo), but if an auxiliary equation relating it to the 
water height is introduced, for example,
	
F
k
h
o
v
=
	
(1.9)
System
Generation
Utilization
Input
Output
Control volume
FIGURE 1.12  Rate balances are at the foundation of any dynamical model. The dashed box defines the 
control volume delimited by the system boundaries.

14
Environmental Systems Analysis with MATLAB®
then a matched model is obtained, in the sense that the state variable (h) appears on both sides of 
the state equation
	
A dh
dt
F
k
h
=
−
i
v
	
(1.10)
which can now be solved for the height h based on the knowledge of the input Fi.
1.3.2  Mass Balances
After this very simple preliminary example, we consider the general task of writing material bal-
ances, which are at the basis of reactor modelling (Stephanopoulos, 1984; Seborg et al., 1989). Not 
only the rate of the total mass in the system must balance out, but also the rate of each component. 
Going back to the example tank of Figure 1.13, suppose that the input stream Fi carries a dissolved 
substance ‘a’ with concentration Ca
i and that this substance is subject to transformations, for exam-
ple, it may be involved in a chemical reaction inside the tank that results in a concentration change. 
Then, in addition to the general mass rate balance Equation 1.8, the rate of change for the substance 
‘a’ (Ma) must also balance. This leads to the additional equation
	
dM
dt
d VC
dt
C dV
dt
V dC
dt
FC
F C
Vr
a
a
a
a
i
a
i
o
a
a
=
(
) =
+
=
−
±
	
(1.11)
where:
ra is the reaction rate of the substance ‘a’
the mass Ma has been expressed as the product of concentration (Ca) and the control volume (V)
It will also be assumed that the tank is perfectly mixed, so that the concentration (Ca) is the 
same inside and at the output of the tank. Substituting the volume derivative of Equation 1.8 into 
Equation 1.11 yields
	
V dC
dt
C
F
F
FC
F C
Vr
a
a
i
o
i
a
i
o
a
a
= −
−
(
) +
−
±
	
(1.12)
Rearranging the concentration terms (the terms F C
o
a and −F C
o
a cancel out), and dividing by the 
control volume V, the concentration rate balance is obtained as
	
dC
dt
F
V C
C
r
a
i
a
i
a
a
=
−
(
) ± 	
(1.13)
kv
Fi
Fo
h
A
FIGURE 1.13  A simple example illustrating the need for auxiliary equations.

15
Introduction
Equation 1.13 presents the same matching problem previously encountered in Equation 1.8, because 
the reaction rate ra does not contain any explicit reference to the concentration Ca. Though a full 
discussion on chemical kinetics will be given in Chapter 7, for the time being let us introduce an aux-
iliary equation assuming that the reaction rate ra follows a first-order kinetics, meaning that the reac-
tion velocity is proportional to the concentration Ca, that is, r
k C
a
a
a
= −
. The minus sign indicates that 
the substance ‘a’ disappears from the system as a consequence of the chemical reaction and some 
other product is formed instead, for which another equation should be written for mass continuity. 
However, as far as Equation 1.13 is concerned, substituting the explicit expression for the rate ra yields
	
dC
dt
F
V C
C
k C
F
V C
C
F
V
k
a
i
a
i
a
a
a
i
a
i
a
i
a
=
−
(
) −
=
−
+




	
(1.14)
In Equation 1.14, the first term represents the input, while the dynamics of the state variable Ca
(
) is 
controlled by two parameters with a very clear physical meaning: the first term F V
i
, often referred to 
as the dilution rate, represents the effect of the hydraulics, whereas the second term (ka) accounts for 
the effect of the chemical reaction. As a further comment, it should be noted that the output flow Fo 
does not explicitly appear in Equation 1.14, but it is still governed by the previous Equation 1.8, linking 
the height h (and ultimately the volume V) to the output flow Fo. Both equations should be treated in 
parallel, so that the complete model in the two state variables (h and Ca) has the following final form:
	
dh
dt
A F
k
h
dC
dt
F
Ah C
C
F
Ah
k
=
−
(
)
=
−
+










1
i
v
a
i
a
i
a
i
a
	
(1.15)
In general, if there are n mass components to be modelled in the system, (n + 1) mass balances will 
be required—a global mass balance and one specific rate balance for each component, as given in 
the following equation:
	
dV
dt
F
F
dC
dt
F
V C
F
V C
r C
C
dC
dt
F
V C
F
V C
n
=
−
=
−
± (
)
=
−
i
o
1
i
1
i
i
1
1
1
2
i
2
i
i
2
,
,
…
±
(
)
=
−
±
(
)













r C
C
dC
dt
F
V C
F
V C
r C
C
n
n
n
n
n
n
2
1
i
i
i
1
,
,
,
,
…

…

	
(1.16)
A final remark should be made concerning the dimensions of the quantities involved in the mass 
balance rate Equation 1.16. Since they refer to mass variations over time M T
⋅


−1 , each term in the 
balance must be consistent with these dimensions. Equation 1.15 seems to violate this principle, but 
a closer inspection proves the contrary. In the following equivalences, the brackets [.] denote dimen-
sions of the quantities indicated therein. The basic mass balance Equation 1.8 was derived from
	
dm
dt
m
m
d V
dt
F
F
=
−
→
=
−


i
o
i
i
o
γ
γ
γ
	
(1.17)

16
Environmental Systems Analysis with MATLAB®
where the mass flow m (the dot indicating time derivative) is equal to the volumetric flow F L T
3
1
⋅


− 
multiplied by the fluid-specific weight (or mass density) γ as m
F
= γ . A dimensional check can now 
be done
	
m
MT
F
ML L T
MT

= 


= 
= 

−
−
−
−
1
3
3
1
1
γ
	
(1.18)
where M, L and T denote the dimensions of mass, length and time, respectively. Thus, we can 
conclude that Equation 1.17 is dimensionally correct. Of course, this is just a necessary condition, 
because a balance may be dimensionally correct but conceptually wrong for other reasons (wrong 
choice of equations, wrong balance, etc.).
1.3.3  Energy Balances
We now turn our attention to the energy balance, considering that the energy rate of change must 
equal the algebraic sum of the input–output energy flows and the energy exchange across the control 
volume of Figure 1.12
	
dE
dt
E
E
Q
=
−
±



i
input
energy
flow
energy
rate
in the
system
heat
exchange
rate
mechanical
work
exchange
rate
±
W
	
(1.19)
where the dot superscript stands for time rate. If the energy exchanges involve only changes in the 
fluid temperature, then the situation can be described by the simple reactor of Figure 1.14.
In this case, Equation 1.19 simplifies into
	
dE
dt
Vc
dT
dt
Fc T
Fc T
Q
p
p
p
=
×
=
−
±
γ
γ
γ
i
	
(1.20)
where cp is the specific heat capacity c
L T
p

= 

−
−
2
2
1
Θ
 of the fluid, and its preferred SI units are 
[kcal Kelvin−1]. Dividing by γVcp shows that, in this simplified case, the energy balance reduces to 
a temperature balance
	
dT
dt
F
V T
F
V T
Q
Vc
=
−
±
i
p

γ
	
(1.21)
Fi, Ti
Fo, To
Q
V
FIGURE 1.14  A simple continuous flow tank reactor with heat exchange.

17
Introduction
A dimensional check of Equation 1.21 can be carried out in the same way as with Equation 1.17, namely
	
dT
dt
T
F
V T
L T
L
T



= 

[ ] =



= 
= 

−
−
−
−
Θ
Θ
Θ
Θ
1
3
1
3
1
kcal






=



−
−
−
−


 
   
 


Q
Vc
ML T
M
L L L T
p
Q
V
cp
γ
γ
2
3
1 3
3
2
2Θ





= 

−
ΘT
1
	
(1.22)
which shows that all the terms in Equation 1.21 have consistent dimensions.
It is worthwhile to point out the formal similarity between the mass balance Equation 1.13 and 
the heat balance Equation 1.21. Although the former establishes a mass balance involving kinetic 
rates, the latter balances heat transfer rates. In the first case, the state variable is the concentration 
Ca, whereas in the second it is the temperature T. Figure 1.15 shows the role played by each term in 
either equation: the input–output terms have the same dilution rate coefficient, whereas the inner 
dynamics is represented by the kinetic rate in the first case and the heat transfer rate in the second.
As to the heat exchange mechanisms in the reactor tank, Figure 1.16 illustrates two possibilities, 
although more on this can be found in Stephanopoulos (1984). In the first case (Figure 1.16a), heat is 
directly supplied by an electrical resistance. In the case of a two-way heat exchange, the resistance 
can be replaced by a Peltier cell in which the direction of the heat flux can be reversed by inverting 
the direction of the current. In this case, the electric power (P) is directly proportional to the heat 
transfer rate, that is, Q
P
= η , and Equation 1.21 can be rewritten as
	
dT
dt
F
V T
F
V T
P
Vc
=
−
±
i
p
η γ
	
(1.23)
ra
C
V
F
Ci
V
Fi
dt
dC
±
−
=
Input
Output
Internal dynamics
Q
T
V
γVcp
F
Ti
V
Fi
dt
dT
±
−
=
FIGURE 1.15  Formal similarity between the mass balance and the energy balance equations.
Fi, Ti
Fi, Ti
V,T
Fo, T
Fv
Fo, T
(a)
(b)
Heat supplied by
an electrical resistance
Heat supplied by
a heat exchanger
Q = η⋅P
Q = UA(Tv–T)
V,T
FIGURE 1.16  Differing possibilities of external heat supply: (a) through an electrical resistance and 
(b) through a jacket heat exchanger.

18
Environmental Systems Analysis with MATLAB®
where η is the efficiency of the heat generating/absorbing device, with the ± accounting for a 
­possible bidirectional heat exchange.
Figure 1.16b shows another possibility, much used in process engineering, in which the reactor 
is surrounded by a thermal jacket carrying a heating or coolant fluid with temperature Tv and flow 
rate Fv. In this case, the heat flux is determined by the temperature difference of the two fluids 
T
T
v −
(
) multiplied by the heat transfer coefficient U of the jacket wall of surface A. In this case, 
Equation 1.21 becomes
	
dT
dt
F
V T
F
V T
UA T
T
Vc
=
−
±
−
(
)
i
v
p
γ
	
(1.24)
where the heat exchange coefficient U can be related to the flow in the exchanger Fv by an empirical 
relation such as U
k F
h
b
=
v  with 0 8
1
. ≤
<
b
.
1.4  ENVIRONMENTAL MODELS AS DYNAMICAL SYSTEMS
The basic purpose of modelling is the understanding of the system working and the prediction of its 
future evolution. Before a reliable forecast can be produced, though, the model should be calibrated 
by comparing the actual and simulated outputs when the model is driven by the same experimen-
tal inputs that caused the observed output. Once a reasonable agreement between the actual and 
simulated model responses has been obtained, as will be explained in Chapter 2, forecasting is pos-
sible, provided an estimate of the future inputs is available. For this, the synthesis of inputs will be 
considered in Chapter 3. Supposing that to represents the current time, up to which the actual output 
is available, any attempt to estimate the system output for t > to can be regarded as prediction (or 
forecasting). Hence, it is important to provide credible system inputs on which the prediction will 
be based. This consideration takes us back to Figure 1.2, the selection of boundaries and the outer 
activities producing the external inputs u t( ). The synthesis of such credible system inputs will be 
considered in Chapter 3 (Figure 1.17).
Dynamical systems have the fundamental property of evolving in time and space, but their evolu-
tion is not random. Their structure, together with their past conditions, determines their actual state 
and influences their future. For this reason, the variables describing the evolution of a dynamical 
system are necessarily time-indexed. An elegant—and efficient—way of modelling these character-
istics in mathematical terms is the use of difference or differential equations, which keep track of 
the system evolution through their state, a set of system variables that globally represent the system 
u
Process
y
Actual
Simulated
Modelling of typical
input time series
d
Modelling of typical
disturbance time series
Compare predicted
(modelled) and actual
output under the same
conditions
Predicted
to
to
to
FIGURE 1.17  Modelling an environmental system implies the availability of typical input time series, both 
controllable and uncontrollable.

19
Introduction
history (Athans et al., 1974). Figure 1.18 shows the two possible representations of dynamical ­systems, 
­external and internal, given as follows:
	
1.	The external representation simply relates the system inputs and outputs, without any ref-
erence to the internal organization of the information. Given the memory characteristics of 
the dynamical system, this representation is not very economical since it should keep track 
of the entire history of the system evolution.
	
2.	The internal representation is much more efficient, because it condenses the past system 
history in the system state x t
n
( )∈, a set of internal variables that enables the full recon-
struction of the previous system evolution. The external input–output behaviour of point 1 
can be obtained by combining the system state with a memory-less part, which produces 
the system output y t
q
( )∈, based in the state x t
n
( )∈and the input u t
m
( )∈.
System evolution can be described in either continuous time or discrete time. In the former case, the 
time variable is considered as a continuous variable, that is, t ∈
+
, whereas in the latter time varies 
in discrete lumps that can be related to the ordinal sequence of integer numbers, that is, t ∈
+
. In the 
first instance, the system will be modelled with differential equations (Quinney, 1987; Dormand, 
1996; Butcher, 2003), whereas in the second difference equations (Elaydi, 2005; Goldberg, 2010) 
are used. In either case, Figure 1.18b shows the inner mechanism through which the memory and 
memory-less parts communicate. The form of the system update mechanism depends on the nature 
of the time-indexing. If the model is in discrete time, then the updating mechanism consists of 
projecting the current state x t( ) onto the next state x t
t
+
(
)
∆, where Δt is the time step, whereas in 
the continuous-time case the state projection requires the evaluation of the state time derivative. In 
either case, the following notations can be introduced:
Discrete-time system Ω
∆
( ):
x
t
t
t
x
x
→
+
	
State update equation
Output equation
(
)
(
)
x
f x u
y
g x u
t
t
t
t
t
t
t
+
=
=
∆
,
,





∈
∈
∈
∈
+
t
Z
n
m
q
,
,
,
x
u
y


	
(1.25)
A discrete-time model, defined by (1.25), has the following basic features:
•	 The time variable is constrained to assume only a set of discrete values at intervals Δt.
•	 The system update occurs only at those discrete times x
x
t
t
t
→
+∆.
Memory-less
part
Memory
part
State
update
Output y(t)
State
x(t)
1.  External representation
    No inside information
2.  Internal representation
    
Input/output
dynamics
Input u(t)
Input u(t)
Output y(t)
Explicit reference to
system state
(memory)
FIGURE 1.18  An internal system representation, separating the memory part from the memory-less input–
output link.

20
Environmental Systems Analysis with MATLAB®
•	 The system updating function f x u
,
(
) yields the next value of the state xt
t
+∆ given the 
­current state xt.
•	 No state transition is defined for any other time t ∉
+
.
To better understand the difference between the model time step Δt and the physical time t, 
Figure 1.19 shows the correspondence between the physical time and the sequence of samples t ∈
+
. 
In the latter case, the notion of physical time is lost and is substituted by the sequence index, that is,
	
x
x
x
x
x
x
x
x
t
t
t
t
t
t
t
+
+
+
∆
∆
∆
2
3
0
1
2
3
…





…
	
(1.26)
In the following, when dealing with discrete-time sequence, once the sampling interval Δt has been 
defined, the sequence notation will be used, so that the succession of states will be denoted by their 
sample number, as in the bottom row of Equation 1.26. Conversely, a continuous-time system is 
described by a set of differential equations as Equation 1.27. In the following, we shall introduce the 
notation of the upper dot to indicate time derivative, that is,  
x
x
d
dt
Continuous-time systems Ω( ): ( )
( )
x
x
x t
t →
	
State update equation
Output equation
x
f x u
y
g x u
=
=





∀∈
( , )
( , )
t




+
∈
∈
∈
,
,
,
x
u
y
n
m
q	
(1.27)
•	 The time variable may assume any value in t ∈
+
.
•	 The system state x t( ) is continuously updated and is defined for any t ∈
+
.
•	 The updating mechanism requires the use of the time derivative of the system state x.
1.5  LINEAR TIME-INVARIANT DYNAMICAL SYSTEMS
A very popular and much studied class of dynamical systems is the one in which the state update 
and output functions appearing in Equations 1.25 and 1.27 are linear and the system parameters 
are constant in time. A very lucid account of linear systems in the wider context of mathematical 
modelling and optimization is given in specialized textbooks (Athans et al., 1974; Banks, 1986). In 
Nature almost each and every phenomenon is governed by nonlinear laws, nevertheless, the huge 
wealth of knowledge available on linear systems makes these system very suitable to approximate 
Physical time
xt → xt+Δt
t → t + Δt
t → t + Δt
k → k + 1
Δt = 1 h
x20
x2
x20+Δt = x30
x2+Δt = x3
x2+1 = x3
x0
x1
x2
Δt = 10 min
Sample sequence
xk → xk+1
t ∈R+
k ∈Z+
t ∈R+
0 min
10 min
20 min
30 min
40 min
50 min
0
1
2
3
4
5
0 h
1 h
2 h
3 h
4 h
5 h
x4
FIGURE 1.19  Relationship between physical time and sample sequence.

21
Introduction
complex, nonlinear behaviours. Therefore, we are now including a brief summary of the main 
results in linear time-invariant (LTI) theory that will help us in analysing natural system, though 
we must always be aware that LTI represents an approximation and that often more sophisticated 
analytical tools are required. Now, we start by considering discrete-time LTI systems that can be 
represented by the following mathematical objects:
	
State update equation
Output equation
x
A x
B u
y
C x
D u
t
t
t
t
t
+ =
⋅
+
⋅
=
⋅
+
⋅
1
t
n
m
q
t





∈
∈
∈
∈
+




,
,
,
x
u
y
	
(1.28)
where the subscript t indicates time and the matrices A
B
C
D
∈
∈
∈
∈
×
×
×
×




n
n
n m
q n
q m
,
,
,
 are 
the linear operators that provide the required state update and input–output mappings. Their dimen-
sions are compatible with the dimension of the state (x), input (u) and output (y) vectors. The inner 
system structure of Figure 1.18 can then be specified as in Figure 1.20. Here, the memory element is 
represented by the unit delay operator z−
(
)
1  that shifts back the state by one time step
	
z
z
z
t
t
t
t
t
t
−
+
−
−
−
−
−
⋅
=
⋅
=
⋅
=
1
1
1
1
1
1
2
x
x
x
x
x
x

	
(1.29)
The state update mechanism is represented by the matrix A that projects the current state onto the 
next time step, that is, x
A x
t
t
+ =
⋅
1
. Matrices B, C and D simply add the appropriate input–output 
contributions to obtain the full system representation Equation 1.28.
Likewise, continuous-time linear dynamical systems can be described by the following 
­differential–algebraic equations:
	
State update equation
Output equation
x
A x
B u
y
C x
D u
=
⋅
+
⋅
=
⋅
+
⋅





∀t ∈
+
 	
(1.30)
where the explicit dependence of x and u on t has been omitted for clarity. The generic inner struc-
ture of Figure 1.18 now turns into the one shown in Figure 1.21. In this case, the memory element is 
represented by the integral of the state derivative x
x
( )t
dt
=
⋅
∫
, and the state update is performed by 
the system matrix A as in the discrete-time case, that is, x
A x
=
⋅, whereas the connecting matrices 
B, C and D play the same role as in the discrete-time case.
ut
yt
xt+1
xt
D
Memory
element
+
B
State
update
A
C
+
z−1
FIGURE 1.20  Inner structure of a discrete-time linear dynamical system.

22
Environmental Systems Analysis with MATLAB®
Equations 1.28 and 1.30 are local representation because they describe the local behaviour of 
the system. In the discrete-time case, the next state xt +1 can be computed via Equation 1.28 from 
xt and the input ut, but how could this be extended to compute, say, xt +10? Likewise, given the 
continuous-time system description of Equation 1.30, how can we evaluate the system response 
from a given time to to any other time ts in the future? In other words, we need tools to analyse 
the system and predict its behaviour at large, and not only locally. The next few paragraphs 
will briefly summarize the main results of the dynamical LTI system theory. The fundamental 
assumption is that the system properties can be gleaned from its structure, without the need to 
actually compute the system evolution, either via calculus or by numerical means. This is the 
great strength of the analysis that follows. Unfortunately, the differing nature of discrete-time and 
continuous-time systems prevents a common analysis, so that these analysis must follow separate 
paths, as described next.
1.6  DISCRETE-TIME LTI DYNAMICAL SYSTEM
Rewriting the first of Equation 1.28 without any external input u t( ) = 0, that is, considering an 
autonomous (or unforced) system, yields
	
x
x
t
t
+ =
⋅
1
A
	
(1.31)
Now, iterating Equation 1.31 from the initial t = 0, the following sequence is obtained:
	
x
x
x
x
x
x
x
x
1
0
2
1
0
3
2
0
=
=
=
×
×
=
=
×
×
×
A
A
A
A
A
A
A
A

	
(1.32)
which can be generalized into the global system representation
	
x
x
x
t
t
t
=
×
×
×
×
=
×
A
A
A
A






0
0	
(1.33)
because it determines the system state at any future time x t( ) from the initial state x
x
0
0
= ( )
t . The 
matrix At is referred to as the transition matrix because it relates states at differing times t
t
2
1
> , for 
example,
	
x
x
t
t
t
t
2
1
1
=
−
(
)
A
2
	
(1.34)
∫(x)dt
A
u
C
y
x
B
x
D
Memory
element
.
.
State
update
+
+
FIGURE 1.21  Inner structure of a continuous-time LTI dynamical system. The explicit time dependence 
has been omitted for clarity.

23
Introduction
The transition matrix Φ t t
t
t
1
2
1
, 2
(
) =
−
(
)
A
 has the properties shown in Table 1.2, which can be easily 
demonstrated with elementary matrix algebra.
Of all these properties, reversibility is particularly interesting because it shows that the flow of 
time can be reversed, so that both forward and backward simulation of the system can be equally 
performed.
1.7  STABILITY OF DISCRETE-TIME DYNAMICAL LTI SYSTEMS
A fundamental property of dynamical systems is stability of the equilibrium, defined as a persis-
tently quiescent state of the system. Stability is a property of the equilibrium and implies that once it 
is reached, it is maintained indefinitely, or, if some external perturbation occurs, the system returns 
to it after a time-limited transient. The notion of equilibrium is obviously common to linear and 
nonlinear systems, and for discrete-time system, it can be defined as
	
x
x
f x
:
=
( )	
(1.35)
The time index in Equation 1.35 can be dropped because equilibrium is by definition not time-
dependent, that is, x
x
x
x
t
t
t
n
=
=
=
=
+
+
1

. The equilibrium definition (1.35) will be considered 
again when dealing with nonlinear systems, which may have multiple equilibria, but for now let us 
consider the implications for LTI discrete-time unforced systems, for which Equation 1.35 becomes
	
x
x
=
⋅
A
	
(1.36)
In this case, x = 0 is an equilibrium, and if I
A
−
 is non-singular, this is the unique equilibrium. The 
question is if and how this equilibrium point will be reached and maintained. To answer this ques-
tion, we concentrate on the properties of the system matrix A. As an example, let us introduce the 
following two two-dimensional discrete-time systems:
	
x
x
x
t
t
+ =
⋅
= −
−
−




= 



= −
1
1
1
2
2
0 14
0 55
0 6
0 4
1
2
1
A
A
A
Σ
Σ
:
:
0
.
.
.
.
.14
0 55
0 6
0 4
1
2
−
−




= 



.
.
.
x0
	
(1.37)
The two system matrices differ by the values of the upper left element (a11). Their behaviour starting 
with the same initial condition x0
1
2
= 

T is strikingly different: Σ1 produces a stable trajectory 
with both state components quickly reaching zero, whereas Σ2 is clearly unstable, with both state 
TABLE 1.2
Properties of the Transition Matrix for Discrete-Time Systems
Property
Definition
Proof
Identity
Φ t t,(
) = I
A
A
I
t t
−
(
) =
=
0
Composition
Φ
Φ
Φ
t
t
t
t
t
1
2
2
3
1
3
1
2
3
,t
t ,t
,t
(
)⋅
(
) =
(
)
>
>
A
A
A
A
t
t
t
t
t
t
t
t
t
t
2
1
3
2
2
1
3
2
3
1
−
(
)
−
(
)
−+ −
−
⋅
=
=
Reversibility (provided that A–1 exists)
Φ
Φ
−(
) =
(
)
1
1
2
2
1
t t
t t
,
,
A
A
t
t
t
t
2
1
1
2
1
−
(
)
−
−
(
)
(
)
=
Commutability
A
A
⋅
(
) =
(
)⋅
Φ
Φ
t t
t t
1
2
1
2
,
,
A A
A
A
A
⋅
=
=
⋅
−
(
)
−+
(
)
−
(
)
t
t
t
t
t
t
2
1
2
1
2
1
1

24
Environmental Systems Analysis with MATLAB®
variables becoming unbounded, as shown in Figure 1.22. Could this behaviour be predicted without 
resorting to simulation? The answer is obviously YES and lies in the matrix A itself.
1.7.1  Who’s Who in the System
The behaviours of Figure  1.22 could have been predicted by analysing the system matrix A. 
Precisely, we know from linear algebra that a square matrix A∈
×
n n may be viewed as a linear 
operator that shifts and resizes vectors x ∈n. But there are privileged vectors (eigenvectors) that 
resist the influence of A and maintain their direction in n, being subject only to a resizing accord-
ing to the corresponding eigenvalues. The precise definition of these quantities arises from the 
eigenvector equation
	
Av
v
i
i
= λ
i 	
(1.38)
which states that the application of the matrix A to the eigenvector vi is equivalent to multiplying 
it by the corresponding eigenvalue λi. The eigenvectors then define invariant directions and can be 
assumed as a basis in the n Euclidean space, so that all other vectors can be expressed as their 
linear combinations. In particular, let the initial state vector x0 be expressed as a function of the 
eigenvectors v v
v
1
2
,
...
, , n
(
)  as shown in Figure 1.23.
0
2
4
6
8
10
12
14
−1.5
−1.0
−0.5
0.0
0.5
1.0
1.5
Time
x1
x2
0
2
4
6
8
10
12
14
−80
−60
−40
−20
0
20
40
60
80
100
x1
x2
Time
(a) 
(b) 
2.0
FIGURE 1.22  Trajectories of a stable (a) and an unstable (b) two-dimensional system.
x
v3
v2
v1
α3v3
α1v1
α2v2
FIGURE 1.23  Any vector x ∈n can be represented as a linear combination of the eigenvectors v v
v
1
2
,
,...,
.
n
(
)  

25
Introduction
	
x
v
v
v
v
0
1
1
2
2
1
=
+
+
+
=
=∑
α
α
α
α

n
n
i
i
i
n
	
(1.39)
Now, if we apply Equation 1.39 to the definition of autonomous system Equation 1.31, we can see 
that the evolution of the system state x t( ) can be expressed as a linear combination of eigenvalues 
and eigenvectors of the matrix A, where the constants α α
α
1
2
,
,
,
…
(
)
n  depend on the particular choice 
of x0.
	
x
x
v
v
v
t
t
t
i
i
i
n
t
i
i
i
n
t
i
i i
i
n
t
i
=
=
=
=
=
=
−
=
−
=
−
∑
∑
∑
A
A
A
A
A
A
0
1
1
1
1
1
2
α
α
α λ
α λi
i
i
n
i
i
t
i
i
n
2
1
1
v
v
=
=
∑
∑
=
=

α λ
	
(1.40)
Equation 1.40 clearly shows that the evolution of the state xt of an autonomous system is entirely 
determined by the eigenvalues and eigenvectors of the system matrix A. This result is particularly 
relevant for determining the stability of a system because in the last summation of Equation 1.40 
any eigenvalue with magnitude greater than 1 will produce a growing term λi
t as time increases, so 
that the corresponding eigenvector vi  will be progressively amplified, eventually leading to instabil-
ity, whereas any eigenvalue with magnitude smaller than 1 will contribute with a term that vanishes 
with time. It should be stressed that one unstable eigenvalue is enough to generate system instability, 
because it will provide a growing contribution that will eventually dwarf all the other stable modes 
that converge to zero. If in Equation 1.40, the initial condition x0 coincides with one eigenvalue, 
then the system trajectory is bound to follow that eigenvalue and the contribution of all the ­others 
will be zero. This can be easily demonstrated by setting to zero all the α coefficients but one. 
Repeated application of Equation 1.39 with x
v
0 =
i  yields
	
x
v
x
x
v
v
x
x
v
v
x
Ax
A
v
v
0 =
=
=
=
=
=
×
=
=
=
×
=
i
i
i i
i i
i
i
i
i
i
1
0
2
1
2
3
2
2
3
A
A
A
A
λ
λ
λ
λ
λ
i
t
i
t
i

x
v
= λ
	
(1.41)
showing that the system trajectory will never abandon the direction defined by vi, its magnitude 
being only altered by the eigenvalue factor λi
t as time progresses. To better understand the influence 
of eigenvalues on the system evolution, let us consider again the unstable system Σ2 of Equation 1.37 
and compute its eigenvectors and eigenvalues
	
A = −
−
−



⇒
=
−
−








= −
1 14
0 55
0 6
0 4
1
1
.
.
.
.
v
0.9448
0.3276
1.3
λ
307 
0.3029
0.9530
0.5907
v2
2
=
−








=








λ
	
(1.42)
Clearly, v1 is the unstable eigenvector, because the corresponding eigenvalue λ1 has magnitude greater 
than 1, whereas v2  is the stable one. Now, instead of selecting an arbitrary initial condition x0, let us 

26
Environmental Systems Analysis with MATLAB®
initialize the system (1.42) with one of its eigenvectors. In Figure 1.24a, the system was initialized 
with the unstable eigenvector v1 and the resulting system evolution is clearly unstable. In Figure 1.24b, 
the initial state was instead set equal to the stable eigenvector v2 . In this case, the trajectory cannot be 
influenced by v1 and the state tends to zero along v2 . Figure 1.24c shows both simulations in the state 
space: when x
v
0
1
=
, the trajectory remains on the line defined by v1 and becomes unstable, whereas 
when x
v
0
2
=
 the trajectory ends in the origin regardless of the unstable eigenvalue v1.
To compute the eigenvalues of the matrix A, let us elaborate on the defining Equation 1.38
	
A
A
I
⋅=
⋅
→
−
(
)⋅=
v
v
v
λ
λ
0	
(1.43)
Because we are looking for non-zero eigenvectors v, solving Equation 1.43 implies that the matrix 
A
I
−λ  must be singular and therefore its determinant must be zero:
	
det
0
A
I
−
(
) =
λ
	
(1.44)
The eigenvalues are the roots of the polynomial Equation 1.44, which has in general n roots 
­(eigenvalues), not necessarily distinct, either real or complex conjugate because A is a real matrix. 
Having established that the evolution of an autonomous (unforced) system is entirely determined 
by its eigenvalues, a correspondence can be established between the location of the eigenvalues 
in the complex plane and the system stability, considering that an eigenvalue with magnitude less 
than 1 is stable, one with magnitude greater than 1 is unstable, and those with magnitude equal to 
1 are marginally stable (they neither converge to zero nor diverge to infinity). Figure 1.25 shows the 
correspondence between the eigenvalues location in the complex plane λ
σ
ω
=
+ j , where j is the 
imaginary unit defined as j2
1
= −, and the unforced system response. The portion of the complex 
plane inside the unit circle λ <
(
)
1  represents the stability region, in the sense that any eigenvalue 
inside this area produces a stable response. In general, the eigenvalue location determines the sys-
tem behaviour as sketched in Figure 1.25. With reference to the letters in the figure, the cases of 
Table 1.3 may occur.
It is interesting to note that the same damped oscillatory behaviour can be obtained with three 
different eigenvalue locations (a, b, h), with the damping decreasing as the eigenvalue approaches 
the unit circle boundary. In general, the eigenvalues inside the unit circle are well behaved in 
the sense that they produce a stable response, whereas those outside the unit circle will cause 
the system to diverge because they produce an unbounded response. Obviously, just a single 
unstable eigenvalue suffices in destabilizing the whole system, because its growing response will 
soon overwhelm the decreasing contributions of the stable eigenvalues. As a concluding remark, 
1
2
3
4
5
6
7
−1.0
−0.8
−0.6
−0.4
−0.2
x1
x2
x1
x2
xo = v1
xo = v2
v1
v2
0.0
0.2
0.4
Time
x
1
2
3
4
5
6
7
−6
−5
−4
−3
−2
−1
0
1
2
3
4
Time
(a)
(b)
(c)
x
−6 −5 −4 −3 −2 −1 0 1 2 3 4
−2.0
−1.5
−1.0
−0.5
0.0
0.5
1.0
1.5
x1
x2
FIGURE 1.24  System trajectories initiated along an eigenvector are bound to remain on it. In (a) the initial 
condition of the system (1.42) was selected parallel to the unstable eigenvector λ2, whereas in (b) the initial 
condition was parallel to the stable eigenvector λ1. In (c), the white dots represent the system evolution along 
the unstable v1, whereas the blue dots show the evolution along the stable eigenvector v2.

27
Introduction
TABLE 1.3
Correspondence between Eigenvalue Position and System Response 
for a Discrete-Time System as Shown in Figure 1.25
Case
Eigenvalue
λλ == σσ ±± ωω
j
(
)
System Response
a
Stable, negative real
λ
σ
σ
=
(
)
−<
<
(
)
1
0
Damped oscillations
b
Stable, complex conjugate 
λ
σ
ω
σ
ω
1 2
1
1
, =
±
(
)
−<
<
(
)
−<
<
(
)
j
j
j
Damped oscillations
c
Unstable, complex conjugate
λ
σ
ω
σ
1 2
1
, =
±
(
)
>
(
)
j
Unbounded oscillations
d
Unstable, positive real
λ
σ
σ
=
(
)
>
(
)
1
Unbounded monotonic response
e
Simply stable, positive real 
λ
σ
σ
=
(
)
=
(
)
1
Constant response
f
Stable, positive real 
λ
σ
σ
=
(
)
<
<
(
)
0
1
Damped monotonic response
λ < 1 stable
> 1 unstable
= 1 marginally stable
λ
λ
λ = 1
(b)
(c)
(d)
(e)
(f)
(a)
(g)
(h)
jω
σ
×
×
×
×
×
×
×
×
FIGURE 1.25  Correspondence between eigenvalue location in the complex plane and unforced discrete-time 
system response.
(Continued)

28
Environmental Systems Analysis with MATLAB®
stability is a much coveted property in engineering because an unstable technological system 
will almost surely wreak havoc in an orderly organization. In nature, instead, instability is often 
associated with growth and may be a desirable characteristic, at least to some extent. So, we must 
resist the temptation to label stability (or any other system property for that matter) with human 
good/bad connotations.
1.7.2  Phase-Plane Portrait of Two-Dimensional Discrete-Time LTI Systems
An easy graphical way to represent the evolution of two-dimensional system is the so-called phase-
plane portrait (PPP), which consists of plotting the two state components x t
1,  and x
t
2, , one versus the 
other, instead of plotting each of them versus time. Figure 1.24c has anticipated this representation, 
in which the characteristic traits of the system behaviour emerge more clearly, and the PPP provides 
a powerful and intuitive analysis tool that will be much used in the following, especially when deal-
ing with two-species ecosystems (Chapter 5). Figure 1.26a shows how the system time evolution can 
be translated into its phase portrait just by plotting one state variable versus the other. Of course, this 
representation is limited to two-dimensional systems, but in this context it represents an effective 
graphical tool for analysing the system behaviour.
−2
−1
0
1
2
−1.5
−1.0
−0.5
0.0
0.5
1.0
1.5
0
50
100
x1
x2
150
−1.5
−1.0
−0.5
0.0
0.5
1.0
1.5
Time
x2
x1
(a)
(b)
FIGURE 1.26  Translating the system time behaviour (a) into its PPP (b) by plotting x1 versus x2.
TABLE 1.3 (Continued)
Correspondence between Eigenvalue Position and System Response 
for a Discrete-Time System as Shown in Figure 1.25
Case
Eigenvalue
λλ == σσ ±± ωω
j
(
)
System Response
g
Simply stable
λ
σ
σ
=
(
)
= −
(
)
1
Sustained bounded oscillations
λ
σ
= ±
(
)
=
(
)
j
0
h
Stable, negative real
λ
σ
σ
=
−<
<
(
)
(
)
1
0
Damped oscillations

29
Introduction
1.7.3  Forced LTI Discrete-Time System
Having clarified that stability is an intrinsic property of an autonomous system, we now reintroduce 
the forcing term and consider the full system Equation 1.28 repeated here for convenience
	
x
x
u
t
t
t
+ =
⋅
+
⋅
1
A
B
	
(1.45)
In what way will the input affect the system behaviour? Certainly, the input ut will not affect stabil-
ity, though a stable system may become unstable if it is subject to an unbounded input, but it will 
then surely influence system evolution and its steady state. To obtain the global representation with 
input, let us repeat the iteration scheme of Equation 1.33, but this time using the full system of 
Equation 1.45
	
x
x
u
x
x
u
x
u
u
x
u
u
x
x
1
0
0
2
1
1
0
0
1
2
0
0
1
3
=
⋅
+
⋅
=
+
=
+

+
=
+
+
=
A
B
A
B
A A
B
B
A
AB
B
A
2
2
2
0
0
1
2
3
0
2
0
1
2
+
=
+
+

+
=
+
+
+
B
A A
AB
B
B
A
A B
AB
B
u
x
u
u
u
x
u
u
u

	
(1.46)
By inspection, it can be seen that the first term in each summation is the transition matrix At ⋅x0 
already encountered as Equation 1.33, whereas the other terms form a summation of the past inputs 
up to time t weighted by decreasing powers of A. Equation 1.46 can be separated into two terms
	
x
x
u
t
t
t
i
i
i
t
=
⋅
+
−
+
(
)
=
−
∑
A
A
B
0
1
0
1
unforced  response
input forcing
	
(1.47)
with the first term representing the contribution of the initial condition x0 and the second the influ-
ence of all the past inputs. This second term is referred to as a convolution summation. Now, if a 
constant input u is applied, the system steady state x must satisfy the condition
	
x
u
=
⋅
+
⋅
A
B
x
	
(1.48)
Solving for x yields
	
x
I
A
B u
=
−
(
)
⋅
⋅
−1
	
(1.49)
So, the steady state of a stable forced discrete-time LTI will linearly depend on the steady-state input 
value u.
1.7.4  Steady State of LTI Discrete-Time Systems with Constant Input
As an example consider the following two-dimensional system with one input
	
x
x
x
x
u
t
t
t
t
1
1
2
1
1
2
0
1
0 7
1
1
2
,
,
,
,
.
+
+



= −



× 


+ 


×
t	
(1.50)

30
Environmental Systems Analysis with MATLAB®
Assuming a constant value for the input u = 0 5. , the steady state can be computed according to 
Equation 1.49 as
	
x = 


−−










× 


×
= −
−
1
0
0
1
0
1
0 7
1
1
2
0 5
1 4286
1
.
.
.
0
1.0000
1.4286



× 


×
= 



1
2
0 5
1 4286
0 9286
.
.
.
	
(1.51)
An inspection of the system eigenvalues λ1 2
0 5
,
.
=
± j0.6708 ensures its stability because 
λ1 2
1
, =
<
0.8367
, so that the steady state x is reached from any initial condition with a damped 
oscillatory response (Table 1.3, case b) because the eigenvalues are complex conjugate. The time 
plot and the PPP of this example are shown in Figure 1.27.
Equation 1.47 represents the global response of the system and in principle yields the system 
evolution for any time horizon given the initial condition and the input u. However, this equation is 
hardly ever used in practice, both because of the computational difficulties involved and for its lim-
ited use in providing information about the system response, which can be obtained by eigenvalues 
analysis, as we have seen. As to the time evolution, numerical methods are preferred, and this will 
be all the more true for continuous-time system for which the equivalent of Equation 1.47 requires 
even more complex calculus.
1.8  CONTINUOUS-TIME LINEAR DYNAMICAL SYSTEM
We now go on to consider dynamical systems for which time is now a continuous variable, and 
the system evolution is described by the vector differential Equation 1.30 with constant matrices 
A B C D
, , ,
(
), repeated here for convenience.
	
State update equation
Output equation
x
x
u
y
x
u
=
⋅
+
⋅
=
⋅
+
⋅





∀
A
B
C
D
t ∈
+
 	
(1.52)
1.0
1.2
1.4
1.6
1.8
0.7
0.8
0.9
1.0
1.1
1.2
1.3
1.4
0
5
10
15
20
25
0.8
1.0
1.2
1.4
1.6
1.8
2.0
Time
(a)
(b)
x2
xo = (1,1)
x1
x1
x2
x = (1.4286,0.9286)
FIGURE 1.27  Time plot (a) and PPP (b) of the example model Equation 1.51. The steady state x is approached 
by damped oscillations because the eigenvalues are complex conjugate with magnitude less than 1.

31
Introduction
Again, let us consider the special case of an autonomous system
	
x
x
=
⋅
A
	
(1.53)
Equation 1.53 can be solved by separation of variables in a formally similar way to scalar differen-
tial homogeneous equations
	
d
dt
e
x
t
x
x
x
=
⋅
→
=
⋅
A
A
0	
(1.54)
where xo is the initial condition. Equation 1.54 is the global system representation for LTI 
­continuous-time system, equivalent to Equation 1.33 in the discrete-time case. The matrix exponen-
tial in Equation 1.54 can be approximated by a Taylor series expansion
	
e
t
t
t
k
t
t
k
k
k
A
I
A
A
A
A
=
+
⋅+
⋅
+
⋅
+
=
⋅
=
∞
∑
1
2
1
3
1
2
2
3
3
0
!
!
!

	
(1.55)
In Equation 1.54, e
t
A  represents the system transition matrix in much the same way as that defined 
by Equation 1.34 for discrete-time LTI systems and for which we can define similar properties, 
illustrated in Table 1.4.
1.8.1  Stability of Continuous-Time LTI Systems
We now investigate the stability of the equilibrium for unforced continuous-time systems, as we have 
done in Section 1.7 for discrete-time systems. Since the system is now described by a vector differential 
equation, a necessary condition for equilibrium is that the time derivative vanishes as t →∞, that is,
	
lim
t→∞
=
⇒
⋅
=
⇒
=
x
x
x
0
0
0
A
	
(1.56)
As with discrete-time systems, we can now prove that the stability of the equilibrium x = 0 depends 
on the eigenvalues of the matrix A. Following the same approach already used for discrete-time sys-
tems, the unforced system evolution can be expressed as a function of its eigenvalues. To begin with, 
consider the case in which the initial condition coincides with the ith eigenvector x
v
0 =
i . Expanding 
TABLE 1.4
Properties of the Transition Matrix ΦΦ
==
−−
t t
e
A t
t
1
2
,
2
1
(
)
(
) for Continuous-Time Systems
Property
Definition
Proof
Identity
Φ t t,(
) = I
e
e
t t
A
I
−
(
) =
=
0
Composition
Φ
Φ
Φ
t
t
t
t
t
1
2
2
3
1
3
1
2
3
,t
t ,t
,t
(
)⋅
(
) =
(
)
>
>
e
e
e
e
t
t
t
t
t
t
t
t
t
t
A
A
A
A
2
1
3
2
2
1
3
2
3
1
−
−
−
+
−
−
(
)
(
)
(
)
(
)
⋅
=
=
Reversibility
Φ
Φ
−(
) =
(
)
1
1
2
2
1
t t
t t
,
,
e
e
e
t
t
t
t
t
t
A
A
A
2
1
1
2
2
1
1
−
(
)
−
−
(
)
−
−
(
)




=
=
Commutability
A
A
⋅
=
⋅
( )
( )
Φ
Φ
t
t
A
A
I
A
A
A
A
A
I
A
A
⋅
=
⋅
+
⋅+
⋅
+…
=
+
⋅+
⋅
+…
=
+
⋅+




e
t
t
t
t
t
t
1
2
1
2
1
2
2
2
2
3
2
!
!
!
A
A
A
A
2
2
⋅
+… ⋅
=
⋅




t
e
t

32
Environmental Systems Analysis with MATLAB®
the transition matrix as in Equation 1.55, and remembering that if vi  is an eigenvector it satisfies the 
equation Av
v
i
i i
= λ
, then Ak
i
k
i
v
v
= λ
 for any integer k > 0 and
	
x
v
x
v
v
v
v
v
v
v
A
i
t
i
i
t
i
i
i
i
i
i
i i
e
e
t
t
t
t
=
⋅
=
=
=
+
+
+
+
=
+
+
A
A
A
A
1
2
1
3
2
2
3
3
!
!

λ
1
2
1
3
2
2
3
3
0
!
!
!
λ
λ
λ
λ
i
i
i
i
i
k k
i
k
t
i
t
t
t
k
e i
v
v
v
v
+
+
=
=
=
∞
∑

	
(1.57)
Equation 1.57 shows that if the initial state coincides with an eigenvector, its evolution will depend 
on that eigenvector vi alone, with the corresponding eigenvalue λi acting as a modulating coefficient. 
This result is the continuous-time equivalent of Equation 1.41 in the discrete-time case. Now, since 
the eigenvectors form a basis in n, the state x can be expressed as a linear combination of the 
eigenvectors, that is,
	
x
v
v
v
v
=
+
+
+
=
=∑
β
β
β
β
1 1
2 2
1

n n
i i
i
n
	
(1.58)
Substituting Equation 1.57 yields
	
x
x
v
v
v
v
=
=
+
+
+
=
=
=
∑
∑
β
β
β
β
β
λ
λ
λ
λ
i
i
i
n
t
t
n
t
n
i
t
i
i
n
e
e
e
e
n
i
1
1
1
2
2
1
1
2

	
(1.59)
where the coefficients βi depend on the initial conditions. Equation 1.59 is the continuous-time 
equivalent of Equation 1.40 and shows that the behaviour of the autonomous system is totally 
determined by the eigenvalues of the system matrix A, which can be computed again with 
Equation 1.44
	
det λI
A
−
(
) = 0	
(1.60)
giving rise to relations between eigenvalues and system responses similar to those established for 
discrete-time systems. However, given the exponential form of the transition matrix e
t
A , the conclu-
sions will be radically different. With reference to the complex plane λ
σ
ω
=
± j , the stability bound-
ary is given in this case by the imaginary axis ±
(
)
jω . In fact, any eigenvalue with negative real part 
will give an exponentially damped contribution in Equation 1.59
	
e
j
t
−
±
(
)
σ
ω 	
(1.61)
while an eigenvalue with positive real part will produce an unbounded term
	
e
j
t
σ
ω
±
(
) 	
(1.62)
By similar considerations that have led to Table 1.3 and Figure 1.25, the following correspondences 
between eigenvalues position in the complex plane and system response can be determined for a 
continuous-time system, as shown in Figure 1.28 and Table 1.5. In general, the following conclu-
sions can be drawn:
•	 An eigenvalue with positive real part σ >
(
)
0  produces an unstable behaviour e t
σ
(
).
•	 An eigenvalue with negative real part σ <
(
)
0  produces a stable behaviour e
t
−
(
)
σ .

33
Introduction
•	 A real eigenvalue with multiplicity k greater than 2 produces a contribution t
e
k
t
−1 λ .
•	 A single couple of purely imaginary eigenvalues ±
(
)
jω  produces a sustained bounded 
oscillation.
•	 Multiple purely imaginary eigenvalues ±
(
)
jω  produce an oscillatory unstable behaviour.
The case of multiple roots is further clarified in Figure 1.29 showing three different cases of multiple 
eigenvalues, depending on the sign of the real part. If the eigenvalue is stable σ <
(
)
0 , then as its mul-
tiplicity k increases, so does the hump of the response. This kind of behaviour will often be encoun-
tered when modelling cascaded reactors, which are often convenient approximations of hydraulic 
systems, an example of which is treated in Section 1.8.3.1. The other two cases are pathological 
situations of unstable systems and are not normally encountered in models of environmental systems.
×
×
×
×
(a)
Stable, slow mode
Oscillatory mode
(weakly unstable)
(b)
Exponentially
unstable,
oscillatory
(c)
Exponentially
unstable
(d)
Constant mode
(simply stable)
(e)
Stable,
damped
oscillations
(f)
Stable, fast mode
(g)
Stability half-plane
σ < 0
λ = σ + jω
σ
jω
σ < 0
asymptotically stable x → 0
σ > 0
asymptotically unstable x → ±∞
simply stable
weakly unstable
σ = 0 single root
σ = 0 multiple roots
×
FIGURE 1.28  Correspondence between eigenvalue location in the complex plane and autonomous continuous-
time system response. The stability region is the left-hand half complex plane (light blue area).
TABLE 1.5
Correspondence between Eigenvalue Position and System Response for a Continuous-Time 
System as Shown in Figure 1.28
Case
Eigenvalue
λλ == σσ ±± ωω
j
(
)
System Response
a
Negative real small 
λ
σ
= −
Monotonic, slowly decreasing
b
Imaginary conjugate 
λ
ω
= ± j
Sustained bounded oscillations (weakly unstable)
c
Complex conjugate with positive real part 
λ
σ
ω
1 2, =
± j
Unbounded oscillations (strongly unstable)
d
Positive real 
λ
σ
=
Unbounded monotonic growth
e
Zero 
λ = 0
Constant response (weakly unstable)
f
Complex conjugate with negative real part
λ
σ
ω
1 2, = −± j
Damped oscillations
g
Negative real large 
λ
σ
= −
Monotonic, fast decreasing

34
Environmental Systems Analysis with MATLAB®
1.8.2  Forced LTI Continuous-Time System
Having studied the intrinsic system property of stability, we now reintroduce the input term in the first 
equation (1.52) and seek its formal solution, which is similar to Equation 1.47 with the difference that 
in place of the summation, we now have a convolution integral representing the input contribution
	
x
x
b
t
e
e
u
d
t
t
t
( ) =
+
−
(
)
∫
A
A
0
unforced response
0
input forcing

σ
σ
σ
( )





	
(1.63)
As with discrete-time LTI system, linearity allows for the superposition of the effects, so that the 
first contribution, controlled by the initial conditions x0 and the matrix A, is summed to the input 
contribution, represented by the convolution integral. Equation 1.63, like its discrete-time version 
Equation 1.47, is conceptually important to investigate the system properties, but is hardly ever used 
to determine the system response in practice because the input u may not have a simple mathemati-
cal form, and therefore, the integral may not have an analytical solution. As will be fully treated in 
the following, in most cases numerical methods will be preferred to simulate the system behaviour. 
However, in very simple cases (e.g. a constant input), Equation 1.63 can actually be solved. Let 
us consider a single-input system with a constant value u0. In this case, the convolution integral in 
Equation 1.63 can be handled via Taylor series expansion of the transition matrix, whereby each 
term can be separately integrated
	
e
u d
e e
u d
e
e
u d
e
t
t
t
t
t
t
t
A
A
A
A
A
I
A
A
−
(
)
−
−
∫
∫
∫
=
=
=
−
+
σ
σ
σ
σ
σ
σ
σ
b
b
b
A
0
0
0
0
0
0
2σ
σ
σ
σ
σ σ
σ
σ
2
3
3
0
0
0
0
2
2
3
2
3
2
!
!
!
−
+






=
−
+
−
∫
∫
∫
A
I
A
A
A
b
A
u d
e
d
d
d
t
t
t
t
σ
σ
3
0
0
0
3! d
u
t
t
+






∫
∫
b
	
(1.64)
1.8.3  Some Simple Response Calculations: Step Response and Impulse Response
Now, consider the even simpler case in which the system matrix A reduces to a scalar, that is, 
A = −a. Thus, the system dynamics reduces to the scalar differential equation
k = 1
tk–1 eλi ⋅t  k ≥ 2
tk−1e−σ⋅t
tk−1eσ⋅t
tk−1 e0t = tk−1
k = 2
k = 3
k = 1
k = 2
k = 3
k = 1
k = 2
k = 3
Exponentially stable
Exponentially unstable
Simply unstable
t
t
t
if σ < 0
if σ > 0
if σ = 0
FIGURE 1.29  Response produced by an eigenvalue of multiplicity k, depending on its real part.

35
Introduction
	
x
x
= −⋅
+
⋅
a
b u0	
(1.65)
Assuming that the initial condition is zero, that is, x0
0
= , the system (1.65) can be thought to be 
driven abruptly from a zero steady state x =
(
)
0  to another steady state determined by the constant 
input u0 applied at t =
+
0 . This situation is often referred to as step response, meaning that the input 
abruptly changes from 0 to u0 in a step-wise mode. The first term in Equation 1.63 vanishes, and the 
convolution integral becomes
	
x t
e
bu d
e
bu
e
d
e
bu e
a
e
bu
a t
t
at
a
t
at
a
t
at
( ) =
=
=
=
−
−
(
)
−
−
−
∫
∫
σ
σ
σ
σ
σ
0
0
0
0
0
0
0
0
1
1
e
a
bu
a
e
at
at
−





=
−
(
)
−
	
(1.66)
The response of this system is graphically presented in Figure 1.30, showing that the steady-state 
value depends not only on the input value u0 but also on the system parameters a and b, whereas the 
speed with which the asymptotic value is reached depends only on a, the system time constant, as 
shown by Equation 1.66.
Now consider again the system (1.65), but this time the input is represented by a Dirac δ t( ) 
impulse, which can be defined as follows:
	
(
( )
(
( )
(
( )
( )
i)
ii)
iii)
δ
δ
δ
δ
t
t
t dt
t dt
=
∀≠
= ∞
=
=
−∞
∞
+
∫
∫
0
0
0
1
0
0
	
(1.67)
As shown in Figure 1.31, the Dirac impulse can be viewed as the limit of a distribution of rectan-
gular pulses of duration a and amplitude 1/a. When a tends to zero, the amplitude tends to infinity 
but the strength of the impulse (height times duration) is still unit.
Basically, the Dirac impulse is non-zero only at t = 0 and has unit area. Now suppose again 
that the system starts from zero initial condition, so that its evolution is entirely determined by 
the convolution integral, which can be solved by using the above properties (1.67) of the Dirac 
pulse
	
x
b
b
b
t
e
d
e
e
d
e
d
e
t
t
t
t
( ) =
( )
=
( )
=
( )
=
−
(
)
−
+
+
∫
∫
∫
A
A
A
A
σ
σ
δ σ
σ
δ σ
σ
δ σ
σ
0
0
0
0
0
Atb
	
(1.68)
t
x(t)
bu0 (1–e−At)
a
bu0
a
FIGURE 1.30  Response of the system (1.65) to a constant input u0 starting with zero initial condition.

36
Environmental Systems Analysis with MATLAB®
Therefore, the state and output of the system are
	
x
b
c
b
t
e
y t
e
t
t
( ) =
( ) =
A
A
	
(1.69)
By inspection of Equation 1.69, it appears that the application of a Dirac impulse is equivalent to 
altering the initial system condition from 0 to b, the input matrix. From then on, the subsequent 
evolution is that of an autonomous system starting from the new initial condition b.
1.8.3.1  An Application of an Impulse-Drive Linear Model: The Nash Reservoir
A simple yet effective linear model is due to the famous mathematician John Nash, who inspired the 
successful movie A Beautiful Mind starring Russell Crowe in the title role and who was killed in a 
car crash in May 2015. Nash developed a simple model of a reservoir by cascading a certain number 
of elementary reservoirs (Rinaldi et al., 1979), as illustrated in Figure 1.32. The system states are 
the volumes of each tank and the outflow is proportional to the last volume, that is, q
k xn
=
⋅
. The 
dynamics of each reservoir is given by the difference between the incoming and outgoing flows, 
similar to the example of Section 1.3.1
	
x
k x
k x
i
i
i
=
⋅
−⋅
−1
	
(1.70)
The system representation of the ensemble of n tanks in series is therefore
	




x
x
x
x
k
k
k
k
k
n
1
2
3
0
0
0
0
0
0
0
0
0
0
0
…
















=
−
…
−
…
−
…
…
…
…
…
…
−k
x
x
x
xn
















⋅
…
















+
…








1
2
3
1
0
0
0








⋅
=
…

⋅
u
q
k
0
0
0
x
	
(1.71)
a
δ(t)
δ(t)
→
→
a → 0
δ(t)
a
1
a
1
a
1
t
a
t
a
t
FIGURE 1.31  The Dirac impulse can be viewed as a distribution of pulses of constant unit area, but ­decreasing 
duration.

37
Introduction
To obtain the impulse response of the system (1.71), we can use the result of Equation 1.69 and ini-
tialize the system with the initial condition x
b
0( ) =  appearing in Equation 1.71. Considering as an 
example, the cascade of five reservoirs, the state impulse response is shown in Figure 1.32, whereas 
the output variations for several values of the reservoir constant k are shown in Figure 1.33. The 
analysis of the system can be carried a step further. Consider again the output impulse response in 
the form of the second Equation 1.69 and notice that the matrix A of the system (1.71) is lower trian-
gular; therefore, it has n eigenvalues, all equal to −k. Thus, we can express the impulse response as
	
y t
e
T n
t
T
e
T
k
t
n
t
T
( ) =
=
−
(
)




=
−
−
c
b
A
1
1
1
1
!
where
	
(1.72)
The time of the maximum flow can be computed by setting the output derivative to zero and solving 
for t to yield
	
t
n
T
max =
−
(
)
1
	
(1.73)
This result will be considered again in Chapter 6, when dealing with the impulse response of 
real reactors. As a concluding remark of this section, analysing the system response to apparently 
0
50
100
150
200
250
300
350
400
0
10
20
30
40
50
60
70
80
90
100
Time (h)
Volume (m3)
x1
x2
x3
x4
x5
u(t)
x1
x2
x3
x4
x5
q = kx5
FIGURE 1.32  Schematic representation of the Nash reservoir model, consisting of a number of cascaded 
tanks. The volume variations in response to a flow pulse are shown in the left-hand diagram.
0
100
200
300
400
500
k = 0.04
k = 0.03
k = 0.02
k = 0.01
600
700
800
900
1000
0
0.02
0.04
0.06
0.08
Time (h)
Flow (m3 s−1)
FIGURE 1.33  Impulse response of the Nash reservoir model for several values of the flow constant k.

38
Environmental Systems Analysis with MATLAB®
unrealistic inputs might appear to be an arid academic exercise. The contrary is in fact true because 
step and impulse inputs (or their real-world approximations) will be often encountered in practice, 
and the notions learned here will undoubtedly become useful in due course.
1.8.4  Steady State of LTI Continuous-Time Systems with Constant Input
Let us now consider again the basic system Equation 1.52 and determine its steady state in the case 
of constant input. A necessary condition for the equilibrium is that the time derivative vanishes, that 
is, x = 0, so that the system Equation 1.52 becomes
	
0 =
⋅
+
⋅
⇒
= −
⋅
⋅
−
A
B
A
B
x
u
x
u
1
	
(1.74)
As an example, consider the following system:
	


x
x
x
x
u
1
2
1
2
1
2



= −
−



× 


+ 


×
0
1
0.3
1.1
	
(1.75)
The system is stable because the eigenvalues of the system matrix A are negative real (λ1 = –0.5; 
λ2 = –0.6). Selecting u = 0 5. , the steady state can be computed according to Equation 1.74 as
	
x
b
A
= −
= −−
−



× 


×
−
−
A 1
1
1
2
u
b
3.6667
3.3333
1
0






0 5
0 5
.
.
(
) =
−




u
5.1667 	
(1.76)
Figure 1.34 shows the time behaviour (a) and the corresponding PPP (b) of the ­system (1.75) in reach-
ing the steady state computed via Equation 1.76.
1.8.5  Phase-Plane Behaviour of Two-Dimensional Continuous-Time LTI Systems
This analysis is the continuous-time counterpart of that presented in Section 1.7.2 for two-­
dimensional systems. Plotting the two components of the state one versus the other is an effective 
graphical method to analyse the system behaviour. As a motivation for considering this tool, let us 
anticipate that the stability of many two-dimensional ecosystems, like population dynamics, can be 
0
5
10
15
20
−1
0
1
2
3
4
5
6
Time
(a)
(b)
x1
x0 = (1,1)
x2
x2
0
1
2
3
4
5
6
−0.8
−0.6
−0.4
−0.2
0.0
0.2
0.4
0.6
x1
x = (5.1667,−0.5)
FIGURE 1.34  Time plot (a) and PPP (b) of the system (1.75) to reach the steady state x of Equation 1.76 from 
the initial condition x0 when driven by a constant input u = 0 5. .

39
Introduction
handled very efficiently with this method. To get a feeling of the effect of each system eigenvalue 
on its evolution, let us reconsider the time portraits of Figure 1.28. So, let us now consider again a 
two-dimentional unforced system
	


x
x
a
a
a
a
x
x
1
2
11
12
21
22
1
2



= 


× 


	
(1.77)
The following figures show the correspondence between the location of the eigenvalues in the com-
plex plane and the system evolution in the phase plane. In the case of complex conjugate eigenvalues 
(Figure 1.35), using complex trigonometry, the unforced response can be shown to be an exponen-
tially damped sinusoid
	
x t
e
e
e
e
e
e
e
e
t
t
t
j t
t j t
t
j t
j t
t
( ) =
+
=
+
=
+
(
) =
−
+
−
−
−
−
−
λ
λ
σ
ω
σ
ω
σ
ω
ω
σ
1
2
2cos ωt
(
)	
(1.78)
where the damping rate is controlled by the real part e
t
−
(
)
σ  and the oscillation has a period equal 
to T = 2π
ω . So the system trajectory, called a focus, is a spiral that converges to the origin if σ < 0 or 
diverges if σ > 0.
Figure 1.36 shows the behaviour produced by two real eigenvalues: if the real part is negative, 
then the trajectories will tend to the origin without encircling it because the oscillatory term is 
missing ω =
(
)
0 .
The cases presented in Figure 1.37 are surely the most interesting: in the case of real eigenvalues 
with opposite signs, the unstable one will eventually prevail making the whole system unstable. In 
fact, the corresponding unstable eigenvector v2
(
) will attract the trajectories, whereas the contribu-
tion of the stable one v1
( ) will tend to zero. We shall encounter a saddle case when dealing with the 
steady-state regime of diffusive reactors, in Chapter 6.
Eigenvalues
PPP
×
×
×
×
jω
λ1,2 = −σ ± jω
Complex conjugate
eigenvalues with
negative real part
λ1,2 = σ ± jω
Complex conjugate
eigenvalues with
positive real part
jω
σ
σ
A—Stable focus 
B—Unstable focus 
x2
x2
x1
x1
FIGURE 1.35  PPP in the case of complex conjugate eigenvalues with either negative or positive real part.

40
Environmental Systems Analysis with MATLAB®
1.9  NONLINEAR SYSTEMS
Though linear systems can explain many natural phenomena, the majority of natural systems are 
governed by nonlinear laws, for which we need other analysis tools. Consequently, it is necessary to 
include here a brief survey of nonlinear systems, recalling the notions that will be used in the follow-
ing. For a full treatment of nonlinear systems, the reader is referred to specialized textbooks (Cook, 
1986; Drazin, 1992; Kolk and Lerman, 1992; Strogatz, 1994; Kaplan and Glass, 1995). It appears that 
there is no better way of defining a nonlinear system than just a system that is not linear. This nega-
tive definition does not shed much light onto the subject, and the first attempt at studying a nonlinear 
A—Asymptotically
stable node
All the trajectories
tend to the stable
point (origin)
B—Asymptotically
unstable node
All the trajectories
diverge to infinity
x2
x2
x1
x1
Eigenvalues
PPP
jω
jω
×
×
×
×
λ1 = −σ1;  λ2 = −σ2
Real negative
eigenvalues
λ1 = σ1;  λ2 = σ2
Real positive
eigenvalues
σ
σ
FIGURE 1.36  PPP in the case of real eigenvalues either both negative or positive.
A—Saddle (unstable)
The trajectories are
initially influenced by
both eigenvalues but
as time progresses
the unstable
eigenvalue becomes
dominant
×
×
×
×
B—Centre
(weakly unstable)
Closed trajectories
whose distance
from the origin
depends on the
initial conditions
v2
v1
x2
x1
x2
x1
Eigenvalues
jω
σ
σ
jω
PPP
λ1 = −σ1; λ2 = σ2
Real eigenvalues
with opposite signs
λ1 = jω; λ2 = −jω
Imaginary conjugate
eigenvalues
FIGURE 1.37  PPP in the case of real eigenvalues with opposite signs or in the case of purely imaginary 
conjugate eigenvalues.

41
Introduction
system is usually to try to approximate it with a linear system. This approach has the merit of enabling 
the use of many of the tools that were described in Section 1.5, though we shall see that this approach 
has its limits. Thus, the first technique that will be introduced here is the linearization method.
1.9.1  Linearization of a Nonlinear System
Given a generic nonlinear dynamics, either discrete-time or continuous-time,
	
Discrete-time
continuous-time
x
f x u
y
g x u
t
t
t
t
t
t
+ =
(
)
= (
)



1
,
,
x
f x u
y
g x u
x
u
y
=
(
)
= (
)



∈
∈
∈
,
,



n
m
q
	
(1.79)
linearization means finding an approximating LTI system in the neighbourhood of an equilibrium 
(or fixed) point x u
,
(
), where Equation 1.79 becomes
	
d t
c t
0
. .
,
,
. .
,
,
x
f x u
y
g x u
f x u
y
g x u
=
(
)
=
(
)



=
(
)
=
(
)



	
(1.80)
Let us consider the discrete-time case first. Decomposing each quantity into its equilibrium 
and incremental part, that is, x
x
x
t
t
=
+  and u
u
u
t
t
=
+ , a Taylor series expansion of the first of 
Equation 1.79 around the fixed point x u
,
(
) yields
	
x
x
x
f x u
f
x
x
f
u
x
x u
x u
t
t
t
t
t
u
+
+
(
)
(
)
=
+
≅
(
) + ∂
∂
+ ∂
∂
+
(
)
1
1
2




,
,
,
Ο
	
(1.81)
which, neglecting the second-order terms Ο2 xt
(
) and noticing that the two terms x and f x u
,
(
) 
­cancel out at equilibrium, simplifies into
	



x
f
x
x
f
u
x u
x u
t
t
tu
+
(
)
(
)
= ∂
∂
+ ∂
∂
1
,
,
	
(1.82)
In Equation 1.82, the two matrices
	J
f
x
x u
= ∂
∂
=
∂
∂
∂
∂
…
∂
∂
∂
∂
∂
∂
… ∂
∂
…
…
…
…
∂
∂
(
)
,
f
x
f
x
f
x
f
x
f
x
f
x
f
n
n
n
1
1
1
2
1
2
1
2
2
2
x
f
x
f
x
n
n
n
n n
1
2
∂
∂
… ∂
∂






















∈
∂
∂
=
(
)
×
(
)
x u
x u
f
u
,
,

∂
∂
∂
∂
…
∂
∂
∂
∂
∂
∂
…
∂
∂
…
…
…
…
∂
∂
∂
∂
…
∂
f
u
f
u
f
u
f
u
f
u
f
u
f
u
f
u
f
m
m
n
n
1
1
1
2
1
2
1
2
2
2
1
2
n
m
n m
u
∂






















∈
(
)
×
x u
,

	 (1.83)
determine the dynamics of the approximating linear system in the neighbourhood of the equilib-
rium x u
,
(
). The output equation can be linearized in a similar manner to yield
	



y
g
x
x
g
u
x u
x u
t
t
tu
= ∂
∂
+ ∂
∂
(
)
(
)
,
,
	
(1.84)
In the continuous-time case,
	
d
dt
x
x
f x u
f x u
x
x
f x u
u
u
x
x u
x u
+
(
) ≅
(
) + ∂(
)
∂
+ ∂(
)
∂
+
( )
(
)
(
)




,
,
,
,
,
Ο2
	
(1.85)

42
Environmental Systems Analysis with MATLAB®
As with Equation 1.81, being d
dt
x
f x u
=
(
) =
,
0 according to Equation 1.80 and neglecting the higher 
order terms of the expansion Ο2, Equation 1.85 simplifies into
	



x
f x u
x
x
f x u
u
u
x u
x u
= ∂(
)
∂
+ ∂(
)
∂
(
)
(
)
,
,
,
,
	
(1.86)
which is the linear approximation of the continuous-time nonlinear system (1.79) in the neighbour-
hood of the fixed point x u
,
(
), formally equivalent to the discrete-time linearization of Equation 1.82. 
The output equation can be similarly linearized by a Taylor series expansion
	



y
g x u
x
x
g x u
u
u
x u
x u
= ∂(
)
∂
+ ∂(
)
∂
(
)
(
)
,
,
,
,
	
(1.87)
Obviously, the validity of the two linearized system Equations 1.82 and 1.87 is limited to the small 
perturbations 
x u
,
(
) around the equilibrium x u
,
(
), which determine the system matrices, in particu-
lar of the system matrix J, often referred to as the Jacobian of the system, and formally defined by 
Equation 1.83.
1.9.2  Stability of Nonlinear Systems
The notion of stability has a much wider meaning for nonlinear systems than for linear systems and 
depends on the equilibria x u
,
(
), which may be more than one. Considering an autonomous system, 
a general definition of stability is given as follows.
An equilibrium x is (locally) asymptotically stable if given any initial condition x0 for which 
x
x
0 −
< ε, there exists a constant δ > 0 for which x
x
−
< δ, asymptotically meaning that lim ( )
t
t
→∞
=
x
x.
	
x
x
x
x
0
0
−
<
∃
−
<
>
ε
δ
δ
ε δ
:
,
with
	
(1.88)
As Figure  1.38a shows, this sufficient condition implies that any trajectory originating in the 
­neighbourhood of the equilibrium remains confined in its vicinity, in spite of small perturbations 
that tend to displace x from the equilibrium x. Figure 1.38b portrays the domain of attraction B x( ) 
of the equilibrium x, defined as the region including all the initial conditions x0 that produce trajec-
tories converging into x.
	
B
t
t
x
x
x
x
( )
∀
→
{
}
→∞

0 : lim ( )
	
(1.89)
In general, an autonomous nonlinear system may have more than one equilibrium, each with its own 
domain of attraction.
x0
x0
(1)
x0
(2)
(a)
(b)
x0
(3)
x
x
ε
δ
B(x)
FIGURE 1.38  Graphical representation of a stable equilibrium (a) and of its domain of attraction (b).

43
Introduction
1.9.3  Local Stability Analysis of Autonomous Nonlinear Systems
The linearization just introduced can be used to determine the local system stability by using the 
tools already developed for linear systems in Sections 1.7 and 1.8.1. If the Jacobian matrix is non-
singular, some conclusions can be drawn by examining its eigenvalues. The non-singularity con-
dition is necessary for the linear term to be dominant and its behaviour to be determined by its 
eigenvalues; otherwise, the system behaviour might be controlled by the higher order terms of the 
Taylor expansion and the linear approximation would be meaningless.
If J is non-singular, then some conclusions about stability can be drawn by eigenvalues inspection, 
as summarized in Table 1.6. It can be seen that the linear analysis is far from exhaustive, because 
many important cases may remain unanswered when the eigenvalues are placed on the boundary 
of the (linear) stability region. Moreover, the possibility of more than one equilibrium, each with its 
own domain of attraction, gives the analysis only a local validity. For the cases in which the linear 
analysis is conclusive and for two-dimensional systems, the characterization of the equilibrium in 
terms of the eigenvalues position follows the classification of Figures 1.35 through 1.37.
1.9.4  Limit Cycles
Unlike their linear counterpart, autonomous nonlinear systems may have other equilibria in the 
form of closed curves, which correspond to a periodic solution that retraces the same trajectory 
indefinitely. The limit cycle, occurring for σi =
(
)
0 , is the typical equilibrium for which the linear 
analysis fails, but it should not be confused with the sustained bounded oscillations examined in 
Table 1.3 case g, for discrete-time LTI systems, and in Table 1.5 case b, for continuous-time LTI 
systems, shown in Figure 1.37b. In fact, the two behaviours are radically different: in the linear case, 
the amplitude of the cycle depends on the initial conditions, whereas the limit cycle is a structural 
property, which has its own shape irrespective of the initial conditions. Moreover, a limit cycle is 
an isolated closed trajectory, in the sense that neighbouring trajectories will either converge to it 
(stable limit cycle) or diverge from it (unstable limit cycle).
In Figure 1.39a, the stable limit cycle (left) attracts all of the trajectories, both from the inside 
and the outside. Conversely, an unstable limit cycle Figure 1.39b will repel any trajectory, so that 
all outside trajectories will tend to infinity, but what about the inner trajectories? They must leave 
the unstable limit cycle but cannot terminate in x because this is an unstable fixed point. So inside 
an unstable limit cycle, there must exist another stable limit cycle collecting the trajectories escap-
ing from the outer unstable limit cycle. Conversely, a stable limit cycle may contain an unstable 
one (right), in which case the inner trajectories repelled by the inner unstable limit cycle will 
TABLE 1.6
Classification of Stability by System Linearization
Eigenvalues of J
Discrete-Time
Continuous-Time


x
J x x
== ( )⋅
x
λi <1
σi < 0
Asymptotically stable
Asymptotically stable
λi <1
σi > 0
Asymptotically unstable Asymptotically unstable
λi =1
σi = 0
Simply stable
No conclusion
Simple eigenvalue
Simple eigenvalue
λi =1
σi = 0
Weakly unstable
No conclusion
At least one multiple eigenvalue
At least one multiple eigenvalue

44
Environmental Systems Analysis with MATLAB®
terminate in x itself, which is now a stable fixed point, as shown in Figure 1.39c. Limit cycles are 
very ­important in Nature because they describe systems that produce self-sustained oscillations, 
even in the absence of external periodic inputs, such as the cardiac rhythm, or the fluctuations often 
observed in population dynamics.
1.9.5  Isoclines
A powerful graphical tool for stability analysis, most often used with two-dimensional continuous-
time autonomous systems, is the method of isoclines. As the word implies, isoclines are constant 
slope loci in the phase plane, which are intersected by the system trajectories with a prescribed 
slope. Taking the ratio between the two state equations of a two-dimensional system yields the 
definition of slope in the phase plane:
	
dx
dt
f
x x
dx
dt
f
x x
dx
dx
dx
dt
dx
dt
1
1
1
2
2
2
1
2
2
1
2
1
=
(
)
=
(
)
⇒
=
⇒
,
,
:
slope
horizontal isocline
vertical isocline
dx
dt
dx
dt
2
1
0
0
=
=






	
(1.90)
Of particular importance are the isoclines on which the derivative of either state variable vanishes 
(dashed lines in plots b and c in Figure 1.40). In general, there is no reason why the isoclines should 
be straight lines. Their intersection, if it exists, determines the system equilibrium because at that 
point both derivatives are zero. In Chapter 5, extensive use of the isoclines will be made, showing 
that there may be more than one intersection point, corresponding to multiple equilibria.
1.9.6  Graphical Stability Analysis of One-Dimensional Autonomous Systems
Another graphical method for analysing the stability of one-dimensional autonomous systems is 
now considered. The rationale for this approach is that an equilibrium must satisfy both the system 
dynamics and the quiescent condition.
1.9.6.1  Graphical Stability of One-Dimensional Discrete-Time Systems
Let us begin by considering a discrete-time system. Equilibrium means that the following two equa-
tions must be simultaneously satisfied:
	
x
f x
x
x
t
t
t
t
+
+
= ( )
=



1
1
system dynamics
equilibrium condition	
(1.91)
x
x
x
Stable limit cycle
(a)
(b)
(c)
Unstable limit cycle
FIGURE 1.39  Limit cycles as periodic solutions of a nonlinear autonomous system associated with the 
­equilibrium x. The limit cycles may be stable and isolated (a), but if there is an unstable limit cycle, then there 
must be an inner stable limit cycle to collect the inbound escaping trajectories (b), or an outer stable limit cycle 
(c). The thin lines are sample trajectories either converging to a limit stable cycle or leaving it, if unstable.

45
Introduction
So, we might just as well drop the t index, because at the equilibrium both of Equation 1.91 become 
independent of time. Figure 1.41 is a graphical representation of Equation 1.91, and the equilibrium 
point is represented by a dot at the intersection between the function f xt
( ) representing the sys-
tem dynamics and the static assumption x
x
t
t
+ =
1
. Generally, dealing with ecological quantities, we 
are interested only in positive values of the variable, and therefore, we seek equilibria in the first 
quadrant x >
(
)
0 . The following method, introduced by May (1976a, b, 2001) in connection with 
population dynamics, can be used to assess the stability of a scalar nonlinear discrete-time system. 
Figure 1.41a shows the graphical location of the equilibrium at the intersection of the two equali-
ties in Equation 1.91, whereas Figure 1.41b shows how an iteration can be started from the initial 
Isocline
(a)
Trajectories
dx2
dx1
Slope =
x2
x1
(b)
= 0
dx1
dt
x1
x2
(c)
= 0
dx2
dt
x1
x2
Equilibrium isoclines
FIGURE 1.40  Definition of isoclines (dashed curves) as constant slope loci; (a) shows an example of 
a generic isocline, whereas (b) and (c) show equilibria isoclines where the derivative of either x1 or x2 
vanishes.
xt
xt+1
xt+1 = f (xt)
xt+1 = xt
Equilibrium
x0
x2
f (x1)
x1
f (x0)
f (x2)
xt
xt+1
xt+1 = xt
(a)
(b)
FIGURE 1.41  Graphical representation of equilibrium for a one-dimensional discrete-time system (a) and its 
stability analysis by successive iterations (b). The inset in (b) shows the time response of the system.

46
Environmental Systems Analysis with MATLAB®
condition x0 to evaluate the corresponding f x0
(
), which in turn yields x
f x
1
0
= (
) and so on. The 
following sequence is thus generated:
	
x
f x
x
f x
x
f x
0
0
1
1
2
2
→(
) →
→(
) →
→(
)	
(1.92)
which converges to the equilibrium point only if the following inequality, the so-called Lipschitz 
condition (Athans et al., 1974), is satisfied
	
f x
f x
x
x
f
x
t
t
t
t
+
+
(
) −( )
−
=
<
1
1
1
∆
∆
	
(1.93)
The inset in Figure 1.41b shows the time response of the system, whose damped oscillations termi-
nate at the equilibrium.
Thus, stability can be assessed by testing the slope of the function f x( ) at the equilibrium point, 
as shown in Figure 1.42. Taking the limit of Equation 1.93 for ∆x →0, the following stability condi-
tions are obtained:
	
Unstable equilibrium
Limit cycle
lim
lim
∆
∆
∆
∆
∆
x
x
f
x
df
dx
f
→
→
=
>
0
0
1
∆
∆
∆
∆
x
df
dx
f
x
df
dx
x
=
=
=
<
→
1
1
0
Stable equilibrium
lim
	
(1.94)
xt+1
xt
f2(x)
f1(x)
f0(x)
xt+1 = xt
Δf2
Δf2
Δx2
Δx2
> 1 ⇒ unstable
Δf0
Δf0
Δx0
Δx0
= 1 ⇒ limit cycle
Δf1
Δf1
Δx1
Δx1
< 1 ⇒ stable
FIGURE 1.42  Graphical stability analysis of a one-dimensional discrete-time system.

47
Introduction
Because in principle there is no constraint on the shape of f x( ), there may be more than one 
intersection with the quiescent line x
x
t
t
+ =
1
. Figure 1.43 shows a rather fanciful f x( ) with two 
equilibria, whose stability can be graphically analysed using Equation 1.94. It can be seen that 
the iterations relative to the unstable equilibrium (white square) diverge, whereas those around the 
stable point (blue dot) converge.
An interesting question regards the choice of the initial condition x0 leading to either equilib-
rium. This brings us back again to the concept of the domain of attraction of the equilibrium, 
sketched in Figure 1.39. There is no general rule to determine its boundary, which must be obtained 
by numerical simulations.
It is interesting that limit cycles can be detected with this method because they correspond to iter-
ations that are exactly superimposed. Numerically, this implies that df
dx =1, as shown in Figure 1.44, 
where successive iteration retraces the same path indefinitely.
xt+1 = xt
xt+1
xt+1 = f (xt)
dx
df < 1
dx
df > 1
xt
Stable iterations from x0
(1)
Unstable iterations from x0
(2)
x0
(1)
x0
(2)
FIGURE 1.43  Graphical analysis of a stable (blue dot) equilibrium and an unstable one (white square). The 
solid lines show the iterations starting from x0
(1) converging to the stable equilibrium, whereas the dashed lines 
starting from x0
(2) diverge from the unstable equilibrium.
xt
xt+1
xt+1 = xt
x2
x1
f (x0)
f (x2)
x0
df
dx
= 1
FIGURE 1.44  Graphical representation of the limit cycle condition. The time response is shown in the inset.

48
Environmental Systems Analysis with MATLAB®
There is just one additional case to be examined and that is when the derivative of f x( ) is 
much larger than one. In this case, the iterations may span the whole quadrant in a chaotic manner, 
without ever passing by the same point twice, as shown in Figure 1.45. A chaotic trajectory may be 
mistaken for a random behaviour, but it is not so. In fact, whereas infinite realizations of a random 
process never replicate themselves exactly, the chaotic trajectory is deterministic because if initial-
ized with the same starting condition, it will exactly replicate itself.
One-dimensional discrete-time systems have the peculiarity of giving rise to chaotic behaviour, 
whereas chaos can only develop in continuous-time system of at least order 3 (Strogatz, 1994). 
A remarkable example of a single discrete-time equation with chaotic behaviour will be studied next 
in the context of population dynamics (May, 1976a).
1.9.6.2  Graphical Stability of One-Dimensional Continuous-Time Systems
Now we turn to the analysis of continuous-time one-dimensional autonomous system, for which the 
equilibrium conditions, similar to Equation 1.91, are
	
0 = ( )
f x 	
(1.95)
Thus, the equilibrium points are determined by the intersections of the system dynamics f x( ) 
with the real positive axis, instead of the 1:1 line as in the discrete-time case. Linearizing the 
system dynamics x
f x
= ( ) according to Equation 1.86 around an equilibrium point x defined by 
Equation 1.95 yields
	


x
f
x
x
x
= ∂
∂
	
(1.96)
where ∂
∂
f
x x represents the one-dimensional Jacobian of the system, and therefore, the criteria of 
Table 1.6 apply, of course with the exception of complex conjugate solutions because the system is 
one dimensional and has therefore only one solution. So, we can conclude that the local stability of 
the equilibrium point can be decided by the following rules, similar to Equation 1.94:
	
Stable equilibrium
Unstable equilibrium
df
dx
df
dx
<
>
0
0
	
(1.97)
0
2
4
6
8
10
12
14
16
18
20
0
10
20
30
40
50
60
Time
0
(a)
(b)
10
20
30
40
50
60
0
10
20
30
40
50
60 xt+1
xt
FIGURE 1.45  An example of a discrete-time system with a chaotic behaviour. The iteration portrait 
(a) shows that each step reaches a new point on f x( ) around the equilibrium point (white square) that is never 
reached. The corresponding time plot (b) is apparently random.

49
Introduction
while the linearization does not yield any definitive conclusion for df
dx = 0. This condition is 
­graphically depicted in Figure 1.46 where f x( ) intersects the x-axis three times, two of which 
with negative derivative (blue dots), corresponding to a stable equilibrium, and one with positive 
derivative (white square), denoting instability. These concepts will be at the basis of the analysis of 
population dynamics considered in Chapter 5.
1.9.7  Global Stability Analysis of Autonomous Nonlinear Systems
We have seen in Section 1.9.3 the limits of the local stability analysis based on linearization, also 
referred to as Lyapunov first method. Now, we define an equilibrium x
n
∈ to be globally asymp-
totically stable if all the trajectories originating in its domain of attraction, defined in Figure 1.38b, 
converge to x. Although this notion has already been introduced, an operational definition based 
on the Lyapunov function will now be considered (Athans et al., 1974; Cook, 1986; Strogatz, 1994). 
Given a continuous-time system with an equilibrium at the origin (the equilibrium can be moved to 
the origin by a suitable change of coordinates, if needed)
	
x
f x
f
=
( )
=
( )


0
0 	
(1.98)
the second, or direct, Lyapunov method is based on the analysis of a continuous scalar function 
V x( ) such that its time derivative along a trajectory is given by
	


V
V
x x
V
x f
i
i
i
n
i
i
i
n
x
x
( ) =
∂
∂
=
∂
∂
( )
=
=
∑
∑
1
1
	
(1.99)
Sufficient conditions for the origin x = 0 to be globally asymptotically stable are
	
V
V
V
0
0
along a trajectory
( ) =
( ) >
∀≠
( ) <



0
0
0
x
x
x

	
(1.100)
The Lyapunov function V x( ) can be regarded as an energy function whose minimum lies at the 
equilibrium. The main difficulty in applying the direct Lyapunov method is finding a suitable 
f(x)
x
> 0
dx
df
dx
df
dx
df
< 0
< 0
Stable equilibrium
Unstable equilibrium
FIGURE 1.46  Graphical stability analysis of a one-dimensional autonomous continuous-time system.

50
Environmental Systems Analysis with MATLAB®
function V x( ), which is generally defined as a quadratic form of the state x. For linear systems, a 
commonly used function is x
x
T ⋅
⋅
P
 with P > 0 a positive definite matrix. Applying this function to 
the continuous-time system x
x
=
⋅
A
 yields
	
dV
dt
T
T
T
T
T
T
T
T
T
=
+
= (
)
+
=
+
=
+
(
)


x
x
x
x
x
x
x
x
x
x
x
x
x
Px
P
A
P
PA
A P
PA
A P
PA
so that
with
>0
dV
dt
T
= −x
x
Q
Q
	
(1.101)
so the system is asymptotically stable if a positive definite matrix Q can be found such that
	
A P
PA
Q
Q
T
+
(
) = −
>
with
0	
(1.102)
For a nonlinear system, finding a Lyapunov function is not so straightforward. Krasovskii’s method 
(Krasovskii, 1956; Gu et al., 2003; Kharitonov and Zhabko, 2003; Stojanovic et al., 2007) suggests 
using the quadratic norm of the state derivative
	
V
d
dt
T
x
x
f
x
f x
( ) =
=
( )⋅( )
2
	
(1.103)
If its time derivative can be computed as




f
f
x
x
x
x
x
x
f
x
F
F
( ) = ∂
∂
∂
∂=
⋅
=
( ) =
t
V
( )
( )
with
Jacobian matrix
then
T
T
T
T
T
T
T
T
V
⋅
+
⋅
=
⋅
⋅
+
⋅
⋅
=
+
(
)
<
⇔
+
<
f
f
f
f
f
f
f
f
f


F
F
F
F
F
F
therefore
0
0
	
(1.104)
Further, if
	
lim
x
f
x
f x
→∞
( )⋅( ) →∞
T
	
(1.105)
then the origin is globally asymptotically stable. The power of the Krasovskii method is that the 
global stability of the nonlinear system x
f x
=
( ) can be analysed by just considering its Jacobian, as 
in the local analysis. In particular, it suffices that the matrix F
F
T +
 has eigenvalues with a negative 
real part. As an example, consider the following nonlinear autonomous system
	
dx
dt
x
dx
dt
x
x
x
1
1
2
1
2
2
3
= −
=
−
−






	
(1.106)

51
Introduction
for which the origin is obviously an equilibrium. Applying the Krasovskii theorem, we get
	
f x
x
x
x
( ) = −
−
−




⇒
( ) = −
−−




( ) +
( ) = −
x
x
x
x
x
T
1
1
2
2
3
2
2
1
0
1
1 3
F
F
F
2
1
1
2
6
2
2
−−




x
	
(1.107)
The eigenvalues of F
F
T +
 have negative real part for any value of x2. Moreover, because
	
f
x
f x
f
x
f x
x
T
T
x
x
x
x
( )⋅( ) =
+
−
−
(
)
⇒
( )⋅( ) →∞
→∞
1
2
1
2
2
3 2
lim
	
(1.108)
the origin is globally asymptotically stable.
1.10  NUMERICAL ASPECTS AND THE ROLE OF MATLAB
In the previous sections, we have examined the structural properties of systems, stressing that most 
of them can be gleaned from the analysis of the local (or closed-form) representation, Equation 1.25 
for discrete-time case systems and Equation 1.27 in the continuous-time case, without the need 
of actually solving the model equations. In fact, the knowledge of the analytical solution is nei-
ther practical nor desirable because the main model characteristics, such as stability and type of 
response, can be inferred from the model structure itself. Further, the system inputs hardly ever 
have an analytical form, which makes the application of calculus impossible. This is all the more 
true for nonlinear systems, for which ad hoc methods must be used, given the limited applicability 
of the linear approximation.
Given these premises, an efficient numerical tool is required to carry out the modelling exer-
cise. Its purpose is the production of environmental scenarios and providing answers to the what-if 
questions so often encountered in environmental decision-making. The availability of a compu-
tational platform is also essential for other purposes connected to the modelling practice, such as 
parameter calibration, system optimization and signal analysis. This platform should provide ade-
quate functionalities to deal with these problems and yet present a user-friendly interface for easy 
programming and ample graphical capabilities. The MATLAB platform (The Mathworks Inc. 
www.mathworks.com) possesses all these features and is widely accessible in the academic world, 
either in teaching laboratories, central campus servers or as a low-cost student version. Public 
domain MATLAB-like platforms are also available, such as Octave, O-Matrix, or Mlab. A thorough 
review of these and other similar software can be found at http://www.scientific-­computing.com/ 
review1.html.
It is beyond the scope of this book to provide a basic MATLAB tutorial, for which introductory 
books exist (see, e.g. Gilat, 2005; Pratap, 2006) and manuals are freely available over the Internet, 
either directly from the MATLAB Documentation centre in The Mathworks website, Wikipedia or 
even Youtube. MATLAB codes are referred to as scripts because, like a script, the MATLAB inter-
preter scans and executes each line in the sequence they are written. The freedom of specifying and 
handling objects such as matrices, vectors, strings and Booleans without any prior formal definition, 
like in C, makes programming easy and the resulting code immediately intelligible. The efficiency of 
MATLAB in handling vector and matrices lies in the powerful primitive functions that process each 
of these objects in a compact way using array operators. As an example, Box 1.1 compares the time 
required to compute the function sin
/
x
x
( )
 in 105 points equally spaced between −5 and 5. First, the 

52
Environmental Systems Analysis with MATLAB®
function evaluation is done using array operators that are characterized by a period (.) preceding the 
arithmetic operators. In this way, array multiplication A.*B produces a new array in which each ele-
ment is the product of the corresponding elements in A and B. The same applies for division (./) and 
power (.^), whereas it coincides with the arithmetic operations for addition and subtraction. The results 
shown at the bottom of Box 1.1 are quite striking, because the first method is 6378.0 times faster than 
the conventional loop operation, in which each component of the array is individually addressed. This 
is why MATLAB users are strongly encouraged to use vector/matrix operations and avoid loops. In 
fact, MATLAB is fairly weak in handling iterative loops, where each instruction will be interpreted 
every time the loop is iterated. However, in the case of discrete-time models, loops are inevitable 
because at each step a new input sample is injected into the system and an update of the state vector is 
performed.
1.10.1  MATLAB Handling of Discrete-Time Models
Discrete-time systems, such as Equation 1.28, involve the iteration of the state vector xt to obtain the 
state at the next time step xt+1. Simulation of a discrete-time model then reduces to functional evalu-
ations and vector update, where the newly obtained vector xt+1 is substituted to the old before the 
next iteration is started. Of course, an initial value for xt must be provided, as well as a termination 
criterion in terms of the maximum number of iterations. As an example, consider the model (1.50) 
and suppose that it is driven by a random input. The following Box  1.2  shows the  MATLAB 
script that simulates the system and plots the results, which are presented in  Figure  1.47. 
BOX 1.1  A SIMPLE COMPUTATIONAL EXAMPLE SHOWING THE TIME 
SAVED BY USING ARRAY OPERATIONS INSTEAD OF INDEXED LOOPS
clear
% generate 100,000 equally spaced points
x=linspace(-10,10,100000);
% Compute the sin(x)/x function
% using array operations
tic
y=sin(x)./x;
toc
% Print the elapsed time
% Compute the sin(x)/x function
% indexed variables in a loop
tic
for i=1:length(x)
    yy(i)=sin(x(i))/x(i);
end
toc
% Print the elapsed time
%----------------------------
Elapsed time is 0.001727 seconds.
Elapsed time is 10.970103 seconds.
Elapsed time ratio = 6.3780e+003

53
Introduction
BOX 1.2  MATLAB SCRIPT TO COMPUTE EQUATION 1.50 ITERATIVELY
% Discrete-time model eq. (4.24)
%
clear
% Definition of system matrices
A=[0 1;-0.24 1];
b=[1 2]’;
Tmax=50;
% Initial condition
x=[5 5]’;
% Prepare a matrix of results
X=x;
for t=1:Tmax
    % Model iteration
    x_new=A*x+b*rand(1);
    % Store the result for plotting
    X=[X x_new];
    % replace the new state for the old 
    x=x_new;
end
figure(1)
plot(X(1,:),’-o’,’MarkerFaceColor’,’w’,’MarkerSize’,8)
set(gca,’FontName’,’Arial’,’FontSize’,14)
hold on
plot(X(2,:),’:ob’,’MarkerFaceColor’,’b’,’MarkerSize’,8)
legend(‘x_1’,’x_2’,’location’,’north’,’orientation’,’horizontal’)
xlabel(‘time’)
ylabel(‘x_1,x_2’)
x1
x2
10
20
30
40
2
3
4
5
6
Time
x1,x2
FIGURE 1.47  System (1.50) response to a random input starting from the initial condition x
T
= 

5
5
.

54
Environmental Systems Analysis with MATLAB®
Notice that, thanks to MATLAB capability for handling vectors and matrices, the model ­iteration 
x_new=A*x+b*rand(1) is performed vector-wise with the asterisk ‘*’ implementing the matrix 
multiplication, without having to worry about individual components.
Another example of a discrete-time equation that can be simulated by direct iteration is the 
Ricker single-species growth equation, which will be considered later in Chapter 5
	
x
x
R
t
t
xt
K
+ =
×
−




1
1
max
	
(1.109)
This equation describes the evolution of a population xt as a function of its carrying capacity K and 
its growth rate Rmax. In spite of its innocent look, Equation 1.109 may exhibit surprisingly differing 
behaviours depending on the value of Rmax, as already pointed out in Section 1.9.6.1. The pertinent 
MATLAB script is listed in Box 1.3, and the model responses for two differing values of Rmax are 
shown in Figure 1.48. In Figure 1.48a, the growth rate R is such that it drives the population to a 
steady state through damped oscillations, whereas in b the large value of R produces a pseudo-
random chaotic behaviour.
1.10.2  MATLAB Handling of Continuous-Time Models
The simulation of continuous-time model is considerably more complex because it involves the 
numerical solution of differential equations. Basically, there are two kinds of differential equa-
tions: those that start from an initial condition and move forward, and those for which the initial 
and final points of the solution are given. The first kind gives rise to the so-called initial-value 
problem, whereas the second defines a boundary-value problem. Although it is fairly straightfor-
ward to perform forward integration from a given initial condition, composed of the initial val-
ues of the function and of its derivatives, it is more difficult to satisfy the boundary condition, in 
BOX 1.3  MATLAB SCRIPT TO SIMULATE THE RICKER MODEL
IT_max=20; % Maximum number of steps
K=20; % Carrying capacity
Rmax=6.8; % Growth rate
x=0.5*K; % Initial population
Xs=zeros(1,IT_max); % Prepare empty vector of results
Xs(1)=x; % Set the initial population
         % as the first vector element
% Start simulation
for t=1:IT_max
  x1=x*Rmax^(1-x/K);
  Xs(t)=x; % Store partial result
  x=x1; % Exchange the new state for the old
end
Figure(1)
plot(Xs,’-o’)
xlabel(‘time’)
ylabel(‘Population’)

55
Introduction
which the conditions are specified at both ends of the integration domain. In this case, successive 
­approximation of the initial derivatives is required, in order to satisfy the conditions at the other 
extreme of the integration interval. The successive approximation of the initial derivative originates 
the so-called shooting method, reminiscing of the improving accuracy in hitting a target repre-
sented by the final (boundary) condition, as will be considered in Chapter 6. The two methods are 
sketched in Figure 1.49 for a first-order differential equation.
Since we are interested in the solution starting from an initial condition x0 onwards, we shall 
consider only initial-value problems for the time being, although boundary-value problems may be 
encountered in river quality modelling and will be treated in Chapter 6. In practice, given a dif-
ferential equation x
f x
= ( ), we want to extend the solution from x t( ) to x t
h
+
(
). This requires an 
approximation of the derivative to project the solution from the current time t to the next integration 
time t + h, with h being the integration step. The crudest (and inaccurate) numerical approximation 
of the derivative is the Euler method, which projects the current value of the solution x t( ) along 
the tangent at f x( ) so that x t
h
+
(
) is approximated as shown in Figure 1.50, where the error in 
­estimating x t
h
+
(
) is quite evident.
Instead of moving from t to t + h in a single step, more accurate methods use intermediate steps to 
improve the derivative projection. The fourth-order Runge–Kutta (FORK) method is a very popular 
(and accurate) algorithm that approximates x t
h
+
(
) based on intermediate function evaluations in 
R = 6.8
Sample
(a)
(b)
Population density
30
25
20
15
10
50
2
4
6
8
10
12
14
16
18
20
R = 18
Population density
0
2
4
6
8
10
12
14
16
18
20
Sample
60
50
40
30
20
10
0
FIGURE 1.48  Differing behaviours of the Ricker equation (1.109) as a function of the growth rate R. In 
(a), a moderate value of R produces a damped oscillatory stable response, whereas in (b) a large R value results 
in a chaotic behaviour.
(a)
(b)
t
f (t0)
tf
f (t0)
f (t0)
f (t1)
t0
t0
f (t)
f (x)
t
FIGURE 1.49  Possible integration conditions of a first-order differential equation. In the initial-value 
problem (a), the solution is specified on the basis of the initial value of the function and its derivative, 
whereas in the boundary-value problem (b), the value of the function is specified at the boundaries of the 
solution domain.

56
Environmental Systems Analysis with MATLAB®
the middle of the integration interval t
h
+
(
)
2 , as shown in Figure 1.51a. The intermediate weights 
k
k
1
4
,…
(
)
,
 and the next solution point x t
h
+
(
) are computed by Equation 1.110
	
x t
h
x t
h k
k
k
k
k
f t x t
k
f t
h x
h k
+
(
) = ( ) +
+
+
+
(
)
=
( )
(
)
=
+
+


6
2
2
2
2
1
2
3
4
1
2
1
,
,



=
+
+




=
+
+
⋅
(
)










k
f t
h x
h k
k
f t
h x
h k
3
2
4
3
2
2
,
,
	
(1.110)
There is a vast body of literature concerning numerical integration methods based on the FORK 
algorithm, one of its most important variations being the adaptation of the integration step size h, as 
shown in Figure 1.51b, depending of the shape of the function f x( ) to maintain a constant integra-
tion error, or the ability to deal with stiff systems of differential equations (Quinney, 1987), involv-
ing simultaneous equations with widely differing time scales. In this latter case, the difficulty is 
represented by the choice of the integration step h, because fast equations would require a short step 
h, but this would unnecessarily hamper the solution of slow equations for which a longer h would 
t
x(t + h)
h
Current state
Projected
future state
x(t)
f(x)
True
future state
t + h
FIGURE 1.50  Illustration of the Euler numerical integration method.
k1
k2
k4
h/2
k3
h
t+h/2
t
(a)
(b)
t+h
x(t + h)
x(t)
Large derivative
small h
Small derivative
large h
Small derivative
large h
t
h
x(t)
FIGURE 1.51  Graphical illustration of the FORK integration method (a) and the need to adapt the integra-
tion step to the function shape (b).

57
Introduction
suffice. For a deeper understanding of the fascinating world of numerical methods, the reader is 
referred to the abundant available literature (see, e.g. Athans et al., 1974; Chapra and Canale, 1991; 
Press et al., 1986; Dormand, 1996; Dahlquist and Bjorck, 2003). In particular, differential equa-
tions are accurately treated by Butcher (2003), whereas boundary-value problems are considered by 
Quinney (1987).
Coming to the use of MATLAB for solving systems of ordinary differential equations, there are 
a number of different solvers and it is up to the user to select the most appropriate method for the 
problem at hand. These methods fall in two main categories: fixed step and variable step, based on 
either the Euler or Runge–Kutta algorithm just explained, with the latter method offering several 
versions, depending on the order of the approximation. There are also specific methods for stiff 
systems of equations.
1.10.3  Introducing the Simulink Toolbox
There are two ways for handling initial-value problems in MATLAB: one is to use the appropriate 
primitive, with the following syntax [t, x] = ode45(‘model _ name’,[time _ span], x0) 
where ode45, among others, is the differential equation solver using a FORK method, and the 
function ‘model _ name’ contains the model definition. The other, immensely more powerful, 
approach is to build the model using the Simulink® toolbox and running it from a calling MATLAB 
script. The great advantage of building the model with Simulink is the friendly graphical editor, 
the huge paradigm of available functions and the wide choice of integration methods. Further, a 
Simulink-implemented model controlled by a MATLAB script can be linked to all the other func-
tionalities of the platform, such as optimization, signal analysis and graphics.
There are of course other simulation platforms to build and simulate nonlinear dynamical mod-
els. One that gained some favour in the ecological community is STELLA (http://www.iseesystems.
com), which, however, does not compare to MATLAB in terms of functional capabilities and ease 
of use. Also, STELLA uses a graphical language that follows the notation introduced by Odum 
(1983), which won little acceptance outside the ecological circles, because the resulting diagrams 
are not as intuitive as the Simulink models.
The combined MATLAB/Simulink approach will be used throughout this book, but first let us 
try the purely MATLAB-based approach, if anything, to discover its limitations. As an example, 
consider the well-known logistic equation describing the growth of a single-species population 
(Chapter 5 will be devoted to population dynamics). This continuous-time differential equation 
describes the growth rate of a single species as
	
dx
dt
r x
x
K
= ⋅⋅
−




1
	
(1.111)
where:
r is the growth rate
K is the population carrying capacity, that is, its limit population density
These parameters, though conceptually equivalent to those defined in Equation 1.109, have a 
­significantly different meaning and role, as will be explained in Chapter 5. Solving this equa-
tion with MATLAB requires the prior definition of the right-hand side of Equation 1.111 as a 
MATLAB function. Then, a MATLAB script is defined in which the ode45 solver calls this 
function to compute the solution. The two pieces of code (function and main script) are listed 
in Box 1.4. They must be saved as separate file, with the logist function being invoked by the 
calling MATLAB script. Let us examine the pros and cons of this modelling approach: packing 
all the model equation in a single function is certainly handy, but lacks flexibility. However, the 
main limitation of this method is the inability to interact with the model during runtime, for 

58
Environmental Systems Analysis with MATLAB®
example, changing the inputs and/or the parameters during the simulation. The latter is a fun-
damental aspect of the model identification techniques treated in Chapter 2. Another difficulty 
is parameters passing the definition of the logist function requires the input arguments to be 
the time and the integration variable, that is, (t, x). If we want to experiment with the effect of 
varying the growth rate r or the carrying capacity K, these parameters should be passed to the 
function by declaring them global, enabling the function logist to access their values, set by 
the MATLAB script, in the common memory area reserved to MATLAB-named Workspace. 
This method of parameter passing will be instrumental when using the combined MATLAB/
Simulink approach for parameter estimation and optimization. As a bottom line, the simulation 
of continuous time models using the direct MATLAB integration is rather clumsy and is defi-
nitely unsuitable for the kind of problems that we shall be treating in this book. Conversely, the 
Simulink graphic environment represents a very attractive alternative for handling all kinds of 
models, either continuous-time, discrete-time or a hybrid combination of the two. This toolbox 
has a very intuitive user interface consisting of a window into which graphic symbols represent-
ing computational functions can be dragged from the library palette and connected (wired) to 
form a diagram that represents the model. Behind the graphical interface, Simulink generates 
an m-file, invisible to the user, that is run by the MATLAB interpreter like any other MATLAB 
script when the pertinent command (sim) is invoked. The computation of a Simulink diagram 
is based on the data-flow approach, whereby the output of each block is produced as soon as all 
BOX 1.4  MATLAB SCRIPT FOR THE DIRECT 
SOLVING OF THE LOGISTIC EQUATION
% Example of Logistic equation
% direct solution with the
% Matlab solver ODE45
global r, K % make r and K visible to Logist
t0=0;tfin=40; % Simulation interval
K=10;         % Carrying capacity
x0 = 0.5;     % Initial population
% Call the ODE solver in the loop
for r=0.2:0.1:0.4
[t,x] = ode45(‘logist’,[t0 tfin], x0);
% Plot of the solution
Figure(1)
plot(t,x)
hold on
end
% Plot the results 
xlabel(‘time’)
ylabel(‘population’)
title(‘Logistic equation with ODE45 solver’)
function xp = logist(t,x)
global r, K% Repeat the global statement in the
        % receiving function
% Logistic equation 
xp = r*x*(1-x/K);

59
Introduction
the required data are available at its inputs. Simulink has a powerful sorting algorithm, which 
schedules the block evaluation order to comply with the data flow of the diagram. The logical 
data availability implicit in the sorting requires that no block in a loop has contemporary data at 
its input and outputs, in which case an algebraic loop error is generated. To avoid this, each loop 
should contain at least one integrator, or another memory element like a delay block, to avoid 
the simultaneity issue.
Though the generated Simulink file (with extension *.mdl) can be run on its own, it is very 
convenient to control its execution from a calling MATLAB script as previously described, so that 
the MATLAB/Simulink model combination has a nested structure as illustrated in Figure 1.52. The 
Simulink model is invoked with the command sim, with the following minimal syntax:
	
[t, x, y] = sim(‘Model_Name’,t_final);	
(1.112)
where the left-hand side contains three vectors, respectively, containing the simulation times (t) and 
the corresponding integrator outputs (x) and model outputs (y). The model name is a string refer-
ring to the model that we want to simulate (without the.mdl extension), from 0 until the final time 
t _ final. Other options controlling the simulation may be added by the expert user.
The example of Figure 1.52 refers again to the logistic model, so that this approach can be com-
pared with the previous one, based on the ode45 MATLAB solver. In this simple example, the two 
methods produce identical results, as Figure 1.53 shows, but with the model complexity growing, 
the combined MATLAB/Simulink approach provides superior flexibility and is definitely the pre-
ferred approach to ecosystem modelling.
In fact, the MATLAB environment provides the amplest freedom in specifying the simulation 
conditions and in plotting the results, whereas the Simulink toolbox, with its a graphical representa-
tion, provides the highest flexibility in model building. Further, running the model from a calling 
MATLAB script enables full control of the simulation in the most diverse conditions. One last 
advantage of the Simulink approach is the ability to feed the model with numerically defined input 
functions, a feature that is of paramount importance when calibrating models subject to experimen-
tal inputs.
MATLAB
SIMULINK
Model
x
dx
dt
K
= r ⋅ x ⋅ 1 −
clear
% Define parameters 
% and initial conditions
K=10;tfin=40;x0=0.5;
%
% Simulation loop
%
figure(1)
hold off;clf
for r=0.2:0.1:0.4
[t,x,y]=sim('logistic',tfin);
plot(t,x)
hold on
end
FIGURE 1.52  Nested structure of Simulink-implemented model controlled by a MATLAB script. The arrow 
shows the connection between the two environment, with Simulink launched by the MATLAB command sim.

60
Environmental Systems Analysis with MATLAB®
1.10.4  Two Simple Benchmark Models
Chapter 2 will deal with model identification, and of course some example models will be required 
to demonstrate the various properties and procedures. Therefore, we now introduce two very sim-
ple, but much studied, models that will be used as benchmarks in Chapter 2.
1.10.4.1  The Monod Kinetics
This model, which will be treated in great detail in Chapter 7, is amply described in the biochemical 
and environmental literature (Maynard Smith, 1974; Holmberg, 1982; Campbell, 1983; Roels, 1983; 
Bailey and Ollis, 1986; Battley, 1987; Orhon and Artan, 1994; Cloete and Muyima, 1997; Jorgensen 
and Bendoricchio, 2001), and it is at the basis of all the models describing the interaction between 
a biodegradable substrate and a microbial mass that feeds upon it. The full derivation of the model 
will be described in Chapter 7, but for now it suffices to introduce its basic equations and show its 
MATLAB implementation. The model equations describing the substrate consumption and the bio-
mass growth in a batch, that is, a closed vessel, are
	
Substrate
1
Biomass
max
s
max
s
dS
dt
Y
S
K
S X
dX
dt
S
K
S X
b X
h
= −
+
=
+
−




µ
µ


	
(1.113)
Though the derivation of the model and the biochemical meaning of its parameters will be explained 
in due course, some basic considerations can be anticipated here:
•	 The substrate is supposed to be totally biodegradable, and therefore it decays to zero, being 
consumed by the biomass. Its rate of consumption follows the same dynamics of the bio-
mass growth and the proportion (yield factor) Y denotes the fact that for each unit of con-
sumed substrate, Y units of biomass are produced, that is, Y
X
S
= ∆
∆.
•	 A fixed fraction (bh) of the biomass decays.
•	 The biomass growth rate cannot exceed its maximum value µmax
(
).
•	 The relative speed of the reaction is represented by the so-called half-saturation constant 
Ks
(
), where a small value implies that the biomass grows at a high rate (near μmax) even 
with a limited substrate availability.
0
5
10
15
20
25
30
35
40
0
1
2
3
4
5
6
7
8
9
10
Time
(a)
(b)
Population
r = 0.2
r = 0.4
r = 0.3
Population
0
5
10
15
20
25
30
35
40
0
1
2
3
4
5
6
7
8
9
10
Time
r = 0.2
r = 0.4
r = 0.3
FIGURE 1.53  Simulation of the logistic growth equation with the direct ode45 solver (a) or via Simulink 
(b), with the ode45 (Dormand-Prince) integration method. The results obviously coincide.

61
Introduction
As in the previous examples, Equation 1.113 will be implemented with a Simulink model, shown in 
Figure 1.54, controlled by a MATLAB script (Box 1.5).
The resulting batch simulation is shown in Figure 1.55. Here, the substrate is gradually con-
sumed, providing nourishment for the biomass, which starts growing exponentially after an initial 
incubation period. When the substrate is not sufficient to sustain the rising population, the biomass 
stops growing and begins to decline until all the available substrate in the batch, including the decay 
material produced by the dead biomass, is exhausted.
This model is at the basis of many biotechnical and environmental microbial models and will be 
used in Chapter 2 as an important benchmark for model identification.
1.10.4.2  The Streeter & Phelps Water Quality Model
Another fundamental, and tutorially relevant, model is the river water quality dynamics due to 
Streeter and Phelps (S&P) to explain the dissolved oxygen (DO) sagging curve in a river, down-
stream of a pollution point source (Rinaldi et al., 1979; Tchobanoglous and Schroeder, 1985; 
Chapra, 1997). This oversimplified model describes the interaction between a biodegradable 
BOX 1.5  MATLAB SCRIPT LAUNCHING THE BATCH 
MONOD MODEL SIMULATION
% Nominal parameter values
Ks=20;Y=0.5;Mu=0.5;bh=0.03;
% Batch simulation horizon
tfin=150;
% Initial conditions
So=10;Xo=0.1;
% Launch the simulation
[t,x,y]=sim(‘Monod_model’,[0 tfin]);
figure(1)
plot(t,x(:,1),’b’,t,x(:,2),’:b’)
xlabel(‘time’)
ylabel(‘concentration (mg/l)’)
legend(‘Substrate’,’Biomass’)
Monod kinetics
Mu∗u[1]∗u[2]/(Ks+u[1])
-K-
1/s
1/Y
Sum
bh
Decay rate
S_int
X_int
Biomass
Substrate
S
X
1/s
+
−
FIGURE 1.54  Simulink model implementing the basic Monod Equation 1.113 as Monod _ model.mdl in 
the ESA _ Matlab\Exercises\Chapter _ 1 folder.

62
Environmental Systems Analysis with MATLAB®
substance (similar to the substrate in the Monod kinetics) expressed as the biochemical oxygen 
demand (BOD) and the DO in the river, which is used to oxidize this pollutant. Again, postpon-
ing the in-depth description and extensions of the model to Chapters 7 and 8, its basic equa­tions 
are
	
BOD
DO
sat
dB
dt
k
B
dC
dt
k
C
C
k
B
b
c
b
= −
⋅
=
−
(
) −
⋅






	
(1.114)
0
50
100
150
0
1
2
3
4
5
6
7
8
9
10
Time (h)
Concentration (mg/L)
Substrate
Biomass
Incubation
Exponential growth
Limit growth
Decay
FIGURE 1.55  Simulation results for the Monod batch model Equation 1.113 obtained with the Go _
Monod.m launch MATLAB script in the ESA _ Matlab\Exercises\Chapter _ 1  folder. After an 
initial incubation period, the biomass grows exponentially until it reaches its maximum development. After 
that it begins to decay for the lack of substrate.
Csat
BOD decay rate
BOD
BOD
BOD_out
−kb
DO saturation
Sum1
Re-oxygenation
Sum
DO
DO
DO_out
kc
+
+
+
−
1
1
s
s
FIGURE 1.56  Simulink model implementing the S&P Equation 1.114. This Simulink model (SP_reach.mdl) 
can be retrieved from the ESA_Matlab\Exercises\Chapter_1\Streeter&Phelps folder.

63
Introduction
In Equation 1.114, the time is to be considered as flow time, that is, the time taken by the water to 
travel downstream and Csat is the DO saturation concentration. Again, a Simulink model can be set 
up to implement the model Equation 1.114, as shown in Figure 1.56. The MATLAB launch script is 
listed in Box 1.6, whereas Figure 1.57 shows the system evolution. The DO sag downstream of the 
discharge is eventually recovered through the natural re-oxygenation, as shown in the simulation 
of Figure 1.57.
1.11  WORKED EXAMPLES
This section presents some worked examples relative to the theory presented in this chapter. The 
exercises include both the theory and the MATLAB programming. The code developed in each 
BOX 1.6  MATLAB SCRIPT LAUNCHING THE S&P MODEL
Csat=8; % DO saturation
Qm=10; % Uprstream flow
Bm=7; % Upstream BOD
Cm=Csat % Saturated upstream DO
Qs=0.5; % Sewer flow
Bs=40; % Sewer BOD
Kb=0.15; % BOD decay rate
Kc=0.20; % river re-oxygenation rate
ts=50; % Maximum flow time
% Compute upstream conditions
Bo=(Bm*Qm+Qs*Bs)/(Qm+Qs)
Co=Cm*Qm/(Qm+Qs)
%
% Reach simulation
%
[t,x,y]=sim(‘SP_reach’,[0 ts]);
0
10
20
30
40
50
0
1
2
3
4
5
6
7
8
9
Flow time (h)
Concentration (mg O2/L)
BOD
DO
Csat
FIGURE 1.57  Evolution of the S&P model for a single pollution point source.

64
Environmental Systems Analysis with MATLAB®
exercise can be retrieved from the related software collection. To avoid mistaking litres for number 1, 
the former will be indicated with a capital L whenever ambiguity may arise.
1.11.1  Simulating the Time-Varying Flow in a Cylindrical Tank
With reference to the system illustrated in Figure 1.13, consider a cylindrical tank with a cross ­section 
of 20 cm2, subject to square-wave input, which varies between 1 and 3 L/min with a frequency of 
10−3 L/min. The outlet friction coefficient is kv
1.2
=
. Build the Simulink model and simulate the 
system around its steady-state value. What is the effect of varying any of the system parameters?
Solution
The model equation to be used is the global mass balance Equation 1.10, where h represents the 
height of the liquid
	
A dh
dt
F
k
h
=
−
i
v
	
(1.115)
The steady-state value can be obtained by setting the derivative of h to zero in that equation so that 
the equilibrium point can be determined as
	
h
F
k
0
2
= 



b
v
	
(1.116)
where Fb is the average flow, that is, Fb
L/min
=
=
(
)
+
1 3
2
2
. Substituting the numerical values yields 
h0
2.7778 cm
=
. The Simulink model is shown in Figure 1.58, and the corresponding MATLAB 
launch script is shown in Box  1.7, whereas its response to a square wave input is shown in 
Figure 1.59.
It is left to the reader to experiment with differing values of the parameters. In particular, what 
is the effect of doubling the frequency of the square wave?
The software for this exercise can be found in Exercises\Chapter _ 1\Ex.1.11.1 _ Tank 
and consists of the launch script Go _ tank.m and of the Simulink model tank.mdl.
Variable flow
(square wave)
Fb
Offset flow
Flow
Fo
Output flow
1/A
Tank cross section
Integrator
Incremental height
Fin
Input flow (resampled)
Kv*sqrt(u)
h
+
+
+
−
1s
FIGURE 1.58  Simulink model of Exercise 1.11.1 tank.mdl in the ESA_Matlab\Exercises\
Chapter_1\Ex.1.11.1_Tank folder.

65
Introduction
BOX 1.7  MATLAB LAUNCH SCRIPT FOR EXERCISE 1.11.1
A=20;     % Tank cross-section (cm^2)
Fi=1;     % Input variable flow (L/min)
Kv=1.2;   % Outlet friction coefficient
Fb=2;     % Offset flow (L/min)
w=0.001;  % Square wave frequency (1/min)
tfin=2000;% Final simulation time (min)
ho=(Fb/Kv)^2; % Initial condition (steady-state)
% Launch the simulation
[t,x,y]=sim(‘tank’,tfin);
figure(1)
set(1,’Position’,[78   140   866   459])
subplot(2,1,1)
plot(t,h)
hold on
plot([0 tfin],[ho ho],’:k’)
ylabel(‘height (cm)’)
subplot(2,1,2)
plot(t,Fin,’:b’,t,Fo)
hold on
plot([0 tfin],[Fb Fb],’:k’)
ylabel(‘Flow (L/min)’)
legend(‘Fi’,’Fo’,’location’,’northoutside’,
…’orientation’,’horizontal’)
xlabel(‘time (min)’)
0
200
400
600
800
1000
1200
1400
1600
1800
2000
0
200
400
600
800
1000
1200
1400
1600
1800
2000
0
2
4
6
8
Height (cm)
1.0
1.5
2.0
2.5
3.0
Flow (L/min)
Time (min)
Fb
Fi
Fo
FIGURE 1.59  Model response of Exercise 1.11.1. This graph was produced by the MATLAB script Go _
tank.m in the ESA _ Matlab\Exercises\Chapter _ 1\Ex.1.11.1 _ Tank folder.

66
Environmental Systems Analysis with MATLAB®
1.11.2  Simulating the Flow Dynamics in a Reservoir
Consider the reservoir of Figure 1.60 where, unlike in the previous exercise, the input and output 
flows are at the same level. The dynamical equation describing the volume variation can be written as
	
dV
dt
F
F
F
V
=
−
=
−
i
o
i
α
β	
(1.117)
where the exponential law in the second term α
β
V  is the equivalent of the square root term of 
Equation 1.115 and represents the outlet rating curve, defined by the parameters α and β, which are 
supposed to be known α
β
=
×
=
(
)
−
2 4 10
0 875
2
.
;
.
. Build the Simulink model and simulate the system 
around its steady-state value.
Solution
The steady-state volume can be obtained by setting the derivative of Equation 1.117 to zero and 
solving for V0
	
V
e
F
0 =
(
)−( )


{
}
ln
ln
/
b
α
β 	
(1.118)
where, as in the previous exercise, Fb represents the average input flow. The Simulink model 
implementing Equation 1.117, with the initial condition provided by Equation 1.118, is shown in 
Figure 1.61, while the MATLAB launch script is listed in Box 1.8. The model response is shown 
in Figure 1.62. Regarding the launch script of Box 1.8, the input data vector can be replicated by 
concatenating the original data set as many times as required, as shown in lines 27–32 where Cr is 
the repetition parameter.
The software for this exercise can be found in Exercises\Chapter _ 1\Ex.1.11.2 _ Lake 
and consists of the launch script Go _ lake.m and of the Simulink model Lake _ volume.mdl. 
Several data files are provided for the simulation.
Fo = αV β
Fi
V
FIGURE 1.60  The reservoir considered in Exercise 1.11.2.
F_input
Portata
+−
Input ﬂow
Volume
Volume output
Input ﬂow
(resampled)
F_output
1s
Output ﬂow
Rating curve
alfa*u[1]^n
Volume
FIGURE 1.61  Simulink model for Exercise 1.11.2. The resampled input flow has as many samples as inte-
gration steps, regardless of the number of samples in Portata. The Simulink model Lake _ volume.mdl 
can be retrieved from the ESA _ Matlab\Exercises\Chapter _ 1\Ex.1.11.2 _ Lake folder.

67
Introduction
1.11.3  Analysis of a Discrete-Time System
Given the discrete-time system described by the following dynamical model
	
x
t
x
t
x
t
x
t
1
2
1
2
1
1
0
1
0 25
0
0
1
+
(
)
+
(
)








= 


×
( )
( )








+
.



× ( )
u t 	
(1.119)
determine the eigenvalues of the system (1.119) and discuss its stability; indicate the kind of response 
of the autonomous system u =
(
)
0 ; determine its equilibrium when the system is subject to a constant 
input u =1.
BOX 1.8  MATLAB LAUNCH SCRIPT FOR EXERCISE 1.11.2
g=uigetfile(‘Flow*.mat’,‘Load calibration data’);
eval([‘load ‘ g]);
Cr=input(‘Number of cyclic repetitions ’);
% Rating curve parameters
alfa=2.4e-2;    % Flow coefficient
beta=0.875;     % Flow exponent
ts=Portata(:,1);
q=Portata(:,2);
 
Ts=ts;Q=q;
if Cr>1,
    for j=1:Cr
      Ts=[Ts;ts+Ts(end)];
      Q=[Q;q];
    end
end
Fb=mean(Q); % Mean input flow
Vo=exp((log(Fb)-log(alfa))/beta); % Steady state volume
tfin=Ts(end);
Portata=[Ts Q];
% Launch the simulation
[t,x,y]=sim(‘Lake_volume’,tfin);
figure(1)
set(1,‘Position’,[252 61 844 579])
set(gca,‘FontName’,‘Arial’,‘FontSize’,14)
subplot(211)
plot(t,F_input,‘:b’,t,F_output,‘b’,‘LineWidth’,2)
set(gca,‘FontName’,‘Arial’,‘FontSize’,14)
legend(‘Input flow’,‘Output flow’,…
‘location’,‘northoutside’,‘orientation’,‘horizontal’)
ylabel(‘Flow (m^3/d)’)
subplot(212)
plot(t,Volume,‘LineWidth’,2)
set(gca,‘FontName’,‘Arial’,‘FontSize’,14)
ylabel(‘Volume (m^3)’)
xlabel(‘time (d)’)

68
Environmental Systems Analysis with MATLAB®
Solution
The system is represented in canonical controllable form (Athans et al., 1974), hence the system 
matrix can be written explicitly as a function of the eigenvalues λ λ
1
2
,
(
) as
	
A = −
+




0
1
1
2
1
2
λ λ
λ
λ
	
(1.120)
and the characteristic polynomial can be written by inspection as
	
s
s
2
1
2
1
2
0
−
+
(
) +
⋅
=
λ
λ
λ
λ
	
(1.121)
because a21
1
2
= −λ λ  and a22
1
2
=
+
λ
λ . Hence, the eigenvalues are the roots of the equation
	
s2
1
2
0 25
0
0 5
0 5
−
=
→
=
= −
.
.
.
λ
λ
	
(1.122)
Because both eigenvalues are inside the unit circle, the system is asymptotically stable. However, 
since λ2
0 5
= −. , there will be a damped oscillating response. It is left to the reader as an exercise to 
write the pertinent MATLAB script and run the simulation.
1.11.4  MATLAB Simulation of a Discrete-Time System
Given the discrete-time system described by the following system equation
	
x
t
x
t
x
t
x
t
1
2
1
2
1
1
+
(
)
+
(
)








= −



×
( )
( )







0.2
0.3
5
0.1

+ 


×
0
1
u	
(1.123)
implement a MATLAB script to simulate the system evolution with a constant input u = 6 15
.
 for 
0 ≤≤
t
20 and initial conditions x 0
1
0 5
( ) =
−


.
T. Compute also the equilibrium state x.
0
200
400
600
800
1000
1200
0
200
400
600
800
1000
1200
3
4
5
Flow (m3/d)
Input ﬂow
Output ﬂow
320
340
360
380
Volume (m3)
Time (d)
FIGURE 1.62  Reservoir model response of Exercise 1.11.2. This graph was produced by the MATLAB 
script Go _ Lake.m in the ESA _ Matlab\Exercises\Chapter _ 1\Ex.1.11.2 _ Lake folder.

69
Introduction
Solution
The MATLAB script, which simulates the system for the given time length, is listed in Box 1.9. 
In the first lines, the eigenvalues and eigenvectors of the system matrix are computed to assess the 
system stability. Then, a simulation loop is set up for the required ten time steps. At each itera-
tion, the new state x _ t1 replaces the old state x. Finally, the equilibrium state is computed with 
Equation 1.49. The reader is encouraged to develop the relevant MATLAB script.
1.11.5  A Two-Reach S&P River Quality Model with Point Discharges
This exercise is aimed at extending the S&P single-reach model to a two-reach system, each with 
an upstream point discharge.
Solution
The S&P model equation to be used for each reach has already been defined as Equation 1.114, and 
therefore, the same Simulink model of Figure 1.56 can be used without changes. The new aspect 
of the exercise is the combination of the two reaches, as shown in Figure 1.63, which will require 
a change in the initial conditions at the beginning of each reach where the new point source of 
­pollutant enters the river.
BOX 1.9  MATLAB SCRIPT FOR EXERCISE 1.11.4
A=[0.2,0.3;-5,0.1]; % System matrix
disp(‘Eigenvalues and Eigenvectors’)
[v,e]=eig(A)
% System definition
u=6.15;% Constant input
b=[0;1];
t=0;
x=[1 -0.5]’; % Initial conditions
xo=x;
X=[];T=[];
while t<20        %Simulation loop
    x_t1=A*x+b*u;
    X=[X; x’];
    x=x_t1;
    T=[T t];
    t=t+1;  
end
figure(1)
plot(X(:,1),X(:,2),‘-ob’)
hold on
plot(xo(1),xo(2),‘ob’)
% Computation of the final equilibrium
I2=eye(2);
A1=inv(I2-A);
x_eq=A1*b*u
plot(x_eq(1),x_eq(2),‘sb’,…
‘MarkerSize’,8,‘MarkerFaceColor’,‘b’)

70
Environmental Systems Analysis with MATLAB®
The extension of the basic S&P equations to this combined system requires that the computation 
is broken down in the following steps:
	
1.	Compute the upstream initial conditions at section 1 by mixing the upstream quality with 
that of the first discharge, that is,
	
B
B Q
Q B
Q
Q
C
C Q
Q C
Q
Q
1
1
1
1
1
1
1
1
=
+
+
=
+
+
us
us
s
s
us
s
us
us
s
s
us
s
	
(1.124)
	
2.	Integrate the S&P equations up to point 2, that is, from 0 to t2, immediately upstream of the 
second discharge
	
3.	Stop the integration there and compute the initial conditions for the second reach by mix-
ing the final quality of the first reach, at point 2, with the second discharge, that is,
	
B
B
Q
Q
Q B
Q
Q
Q
C
C
Q
Q
C Q
Q
Q
3
2
1
2
2
1
2
3
2
1
2
2
=
+
(
) +
+
+
=
+
(
) +
+
us
s
s
s
us
s
s
us
s
s
s
us
s
s
1
2
+ Q
	
(1.125)
	
4.	Use these new initial conditions to integrate the S&P equations along the second reach, 
until the final point is reached. Notice that the integration interval for this second simula-
tion will be from 0 to t
t
f −2 and not t f
There is no need to redefine a new Simulink model with respect to the single-reach model already 
shown in Figure 1.56, which can be used to simulate each reach, provided the appropriate ini-
tial conditions are recomputed before simulating the next reach, as outlined in step 3. The launch 
MATLAB script is shown in Box 1.10, where the plotting details have been omitted for clarity. The 
Simulation results are shown in Figure 1.64, where the discontinuities caused by the changes in the 
initial conditions are clearly visible.
The software for this exercise can be retrieved from the ESA _ Matlab\Exercises\
Chapter _ 1\Streeter&Phelps folder and consists of the launch script Go _ SP _ 2reach.m 
and of the Simulink model SP _ reach.mdl.
ts = 0
Qs1
Bs1
Cs1
ts = t2
Qs2
Bs2
Cs2
Qus
Bus
Cus
ts = tf
1
2
3
4
Compute the new initial conditions
after mixing with the second discharge
Upstream initial conditions
after mixing with the ﬁrst discharge
FIGURE 1.63  Schematization of the two-reach river system with point discharges, considered in Exercise 
1.11.5 and implemented in the MATLAB script Go _ SP _ 2reach.m in the ESA _ Matlab\Exercises\
Chapter _ 1\Streeter&Phelps folder.

71
Introduction
BOX 1.10  SIMULATION OF THE TWO-REACH S&P 
RIVER QUALITY MODEL, EXERCISE 1.11.5
% Two-reach Streeter & Phelps water quality modelling
clear
close all
clc
prompt={‘Upstream flow [m^3/s]’,...
        ‘Upstream BOD [mg/l]’,...
        ‘Upstream DO [mg/l]’,...
        ‘Upstream discharge flow [m^3/s]’,...
        ‘Upstream discharge BOD [mg/l]’,...
        ‘Upstream discharge DO [mg/L]’,...
        ‘DO Saturation’};
def={‘5’,’3’,’8’,’0.5’,’30’,’0’,’8’};
dati=inputdlg(prompt,‘Upstream loading conditions’,1,def,‘on’);
dati=char(dati);
Qm=str2num(dati(1,:));
Bm=str2num(dati(2,:));
Cm=str2num(dati(3,:));
Qs=str2num(dati(4,:));
Bs=str2num(dati(5,:));
Cs=str2num(dati(6,:));
Csat=str2num(dati(7,:));
% Upstream initial conditions
Q1=Qm+Qs
Bo=(Bm*Qm+Qs*Bs)/Q1
Co=(Cm*Qm+Cs*Qs)/Q1
prompt={‘Kb [1/h]’,...
        ‘Kc [1/h]’,...
        ‘Reach total length [h]’,...
        ‘Second discharge location [h]’,...
        ‘Second discharge flow [m^3/s]’,...
        ‘Second discharge BOD [mg/l]’,...
        ‘Second discharge DO [mg/L]’};
def={‘0.12’,’0.15’,’40’,’15’,’0.35’,’20’,’2’};
dati=inputdlg(prompt,‘River system parameters’,1,def,‘on’);
dati=char(dati);
Kb=str2num(dati(1,:));
Kc=str2num(dati(2,:));
L=str2num(dati(3,:)); 
ts2=str2num(dati(4,:));
Qs2=str2num(dati(5,:)); 
Bs2=str2num(dati(6,:));
Cs2=str2num(dati(7,:));
% Simulation of the first reach
Boo=Bo;Coo=Co; % Save upstream conditions for later
[t,x,y]=sim(‘SP_reach’,[0 ts2]);
last=length(tsim);
BOD1=BOD;DO1=DO;t1=tsim;
B1=BOD(last)
C1=DO(last)
Box 1.10 continued

72
Environmental Systems Analysis with MATLAB®
1.11.6  A S&P River Quality Model with Non-Point Pollution
In this exercise, we consider a single-reach river system with an upstream point discharge and where 
a fraction of the downstream reach is subject to a diffuse pollution. How do we include this distrib-
uted input into the model?
Box 1.10 continued
% Second discharge mixing
Qm1=Qm+Qs
Bo=(B1*Qm1+Qs2*Bs2)/(Qm1+Qs2)
Co=(C1*Qm1+Cs2*Qs2)/(Qm1+Qs2)
% Simulation of the second reach
[t,x,y]=sim(‘SP_reach’,[0 L-ts2]);
last=length(tsim);
B_finale=BOD(last)
C_finale=DO(last)
% Combine the two reaches
BOD=[BOD1’ BOD’];
DO=[DO1’ DO’];
tsim=[t1’ (tsim+ts2)’];
figure(1)
hold off;clf
plot(tsim,BOD,‘:b’,tsim,DO,‘b’,‘LineWidth’,2)
a=axis;
axis([a(1) a(2) 0 ceil(max(Boo,Coo))])
xlabel(‘Reach length (h)’)
ylabel(‘Concentration (mg/l)’)
0
5
10
15
20
25
30
35
40
0
1
2
3
4
5
6
7
8
Reach length (h)
Concentration (mg/L)
5.4545
7.2727
0.90163  
6.6164
2.0443
6.3402  
0.10178
7.7462
DO
BOD
FIGURE 1.64  Simulation results for the two-reach S&P model considered in Exercise 1.11.5. This graph 
was produced by the MATLAB script Go _ SP _ 2reach.m in the ESA _ Matlab\Exercises\
Chapter _ 1\Streeter&Phelps folder.

73
Introduction
Solution
Contrary to the previous exercise, the non-point pollution acts as an input to the BOD equation, rather 
than changing its initial conditions. Further, the units for this input are no longer in mg/L but in mg/L 
per unit of flow time, that is, mg/L h. The modified Simulink model is shown in Figure 1.65, where 
the constant distributed BOD input has been implemented as the difference of two step functions, the 
first switching on at the beginning of the distributed load and the other at the end. For the rest, the 
model is the same as that shown in Figure 1.56 and the launch MATLAB script is shown in Box 1.11.
Step
Step1
Sum3
-Kb
BOD decay rate
Saturation DO
Reaeration rate
Kc
Csat
Clock
Simulation time
tsim
Sum2
BOD
1
s
1
s
BOD_out
DO_out
BOD
DO
DO
Sum
Sum1
BOD_in
Distributed BOD
+
−
+
−
+
+
+
+
FIGURE 1.65  A modified S&P Simulink model accommodating a non-point BOD input, as considered 
in Exercise 1.11.6. This Simulink model (SP _ distr _ const.mdl) can be retrieved from the ESA _
Matlab\Exercises\Chapter _ 1\Streeter&Phelps folder.
0
5
10
15
20
25
30
35
40
0
2
4
6
8
10
12
14
16
Flow time (h)
Concentration (mg/L)
15
2.03  
5.3257  
5.8333
1.67  
6.1157  
BOD
DO
Csat
Non-point BOD
FIGURE 1.66  Evolution of BOD and DO in a reach with a partial non-point BOD input, considered in 
Exercise 1.11.6. This graph was produced by the MATLAB script Go _ SP _ distr _ const.m in the 
ESA _ Matlab\Exercises\Chapter _ 1\Streeter&Phelps folder.

74
Environmental Systems Analysis with MATLAB®
BOX 1.11  SIMULATION OF A SINGLE-REACH S&P RIVER QUALITY 
MODEL WITH A PARTIAL NON-POINT BOD INPUT, EXERCISE 1.11.6
prompt={‘Upstream BOD [mg/l]’,...
      ‘Upstream DO [mg/l]’,...
      ‘DO Saturation [mg/l]’,...
      ‘Upstream flow [m^3/s]’,...
      ‘Upstream discharge flow [m^3/s]’,...
      ‘Upstream discharge BOD [mg/l]’,...
      ‘Upstream discharge DO [mg/l]’,...
      ‘Kb BOD decay rate [1/h]’,...
      ‘Kc Reaeration rate [1/h]’,...
      ‘Final flow time [h]’,...
      ‘Initial non-point BOD flow time [h]’,...
      ‘Final non-point BOD flow time [h]’,...
      ‘Non-point BOD value [mg/L.h]’};
def={‘10.0’,‘7.0’,‘8’,‘5.0’,‘1.0’,‘40’,‘0’,‘0.1’,‘0.15’,‘40’,‘20’, 
‘30’,‘0.6’};
dati=inputdlg(prompt,‘River system definition’,1,def,‘on’);
dati=char(dati);
Bm=str2num(dati(1,:));
Cm=str2num(dati(2,:));
Csat=str2num(dati(3,:));
Qm=str2num(dati(4,:));
Qs=str2num(dati(5,:));
Bs=str2num(dati(6,:));
Cs=str2num(dati(7,:));
% Initial BOD
Bo=(Qm*Bm+Qs*Bs)/(Qm+Qs);
% Initial DO
Co=(Cm*Qm+Cs*Qs)/(Qm+Qs);
Kb=str2num(dati(8,:));
Kc=str2num(dati(9,:));
tfin=str2num(dati(10,:));
T1=str2num(dati(11,:)); 
Tf=str2num(dati(12,:)); 
Bu=str2num(dati(13,:)); 
% Simulation
[t,x,y]=sim(‘SP_distr_const’,tfin);
figure(1)
hold off;clf
plot(tsim,BOD,‘:b’,tsim,DO,‘b’)
a=axis;
axis([0 tfin+1 0 max(Csat+1,Bo+1)])
xlabel(‘Flow time (h)’)
ylabel(‘Concentration (mg/l)’)
hold on
plot([0 tfin],[Csat Csat],‘--b’)
fill(tsim,BODin,[223/255 233/255 0.999])
legend(‘BOD’,‘DO’,‘Csat’,‘non-point BOD’)
title(‘Non-point BOD Streeter & Phelps model’)
Box 1.11 continued

75
Introduction
The system evolution is depicted in Figure 1.66, showing that the effect of the distributed BOD 
input is that of increasing the BOD and decreasing the DO. In this sense, a reach with a non-point 
BOD input can be detected by a reversal of the BOD/DO trend normally observed downstream of 
a point BOD source pollution, where the BOD decreases exponentially and the DO produced the 
well-known sag downstream of the discharge point.
The software for this exercise can be found in ‘Exercises\Chapter_1\Streeter&Phelps’ and 
consists of the launch script Go _ SP _ distr _ const.m and of the Simulink model SP _
distr _ const.mdl.
Box 1.11 continued
BOD1=interp1(tsim,BOD,T1)
DO1=interp1(tsim,DO,T1)
plot(0,Bo,‘sb’,‘MarkerSize’,8,‘MarkerFaceColor’,‘b’)
text(0,Bo,[‘  ‘,num2str(Bo)],‘vert’,‘bottom’)
plot(T1,BOD1,‘sb’,‘MarkerSize’,8,‘MarkerFaceColor’,‘b’)
text(T1,BOD1,[num2str(BOD1),’  ‘],‘vert’,‘bottom’,‘hor’,‘right’)
plot(T1,DO1,‘ob’,‘MarkerSize’,8,‘MarkerFaceColor’,‘b’)
text(T1,DO1,[num2str(DO1),’  ‘],‘vert’,‘bottom’,‘hor’,‘right’)
plot(0,Co,‘ob’,‘MarkerSize’,8,‘MarkerFaceColor’,‘b’)
text(0,Co,[‘  ‘,num2str(Co)],‘vert’,‘bottom’)
Bf=BOD(length(BOD));
plot(tfin,Bf,‘sb’,‘MarkerSize’,8,‘MarkerFaceColor’,‘b’)
text(tfin,Bf,[num2str(Bf),’  ‘],‘vert’,‘bottom’,‘hor’,‘right’)
Cf=DO(length(DO));
plot(tfin,Cf,’ob’,‘MarkerSize’,8,‘MarkerFaceColor’,‘b’)
text(tfin,Cf,[num2str(Cf),’  ‘],‘vert’,‘bottom’,‘hor’,‘right’)


77
2 Identification of 
Environmental Models
Identification is the process of constructing a mathematical model of a dynamical system 
from observation and prior knowledge.
John Norton (1986)
2.1  INTRODUCTION
The last part of the quotation (the prior knowledge) of this all-encompassing definition has already 
been treated in Chapter 1, where we considered the various model building alternatives. Now, we 
concentrate on the other aspect of the above definition, which consists of a reconciliation between 
observations and model response.
As we have seen in Chapter 1, environmental models consist of a set of dynamical equations in 
which some numerical parameters appear. These constants are instrumental in shaping the model 
response, thus making its behaviour as close as possible to the observed data that the model is 
intended to mimic. Identification is the procedure through which the model parameters are assigned 
the numerical values that make the model response ‘as close as possible’ to the observed behaviour. 
The qualitative statement (as close as possible) is illustrated in Figure 2.1 and will soon be defined 
in precise mathematical terms, but for now let us just consider it as the fundamental endeavour of 
the identification problem.
2.1.1  Formal Statement of the Identification Problem
The parameter calibration problem can be formally stated in the following terms: given a model 
(acting as a constraint to the optimization algorithm) and a set of experimental observations, find 
the set of parameter values that minimize the sum of squared errors between the observed data and 
the model response, as illustrated in Figure 2.1. Thus, the three basic ingredients in our problem are 
as follows:
	
The model:
exp
exp
d
dt
n
q
np
x
f x u
P
x
y
y
g x u
P
P
=
∈
∈
=
∈






( ,
, )
( ,
, )



	
(2.1)
	
The data:
exp
exp
exp
exp
exp
1
2
Y
y
y
y
y
=
















∈
t
t
t
t
q
k
N

 	
(2.2)
where (t1, t2, . . . , tk, . . . , tN) are the N sampling instants.

78
Environmental Systems Analysis with MATLAB®
and
	
The error functional: E
t
t
T
k
N
k
t
k
k
k
( )
( )
( )
exp
P
y
P
y
Q
y
P
=
−


=∑
1
−


∈
×
y
Q
t
k
q q
k
exp

	
(2.3)
The data of Equation 2.2 refer to the q system outputs y∈q. In some lucky cases, the whole system 
state may be directly observable, that is, y
x
=
∈n, in which case the error functional (2.3) becomes
	
E
t
t
T
k
N
k
t
t
k
n n
k
k
k
k
( )
( )
( )
exp
exp
P
x
P
x
Q
x
P
x
Q
=
−


−


∈
=
×
∑
1

	
(2.4)
Thus, the optimization problem can be stated as the search for the optimal parameters P that mini-
mizes the error functional (2.3) or (2.4), having the model (2.1) as a constraint, and using the experi-
mental data (2.2), namely
	
P=
( )
(
)
arg min
.
P
P
E
subject to model 2 1 	
(2.5)
However, before taking up the task of finding the ‘best’ parameter values, there are some prelimi-
nary steps that should be performed. These operations include:
•	 Data gathering, validation and accuracy characterization
•	 Error functional definition
•	 Sensitivity analysis, to assess the parameter influence on the output
•	 Numerical optimization, using a suitable search method
•	 Validation of the estimates, to assess their consistency
2.1.2  The Quality of the Data
Choosing the right data is crucial for a successful identification. The data of Equation 2.2 should 
be fully representative of the actual system behaviour and reasonably noise-free, or being affected 
by noise with more or less known characteristics. The matrix Qk in the error functional (2.3) or 
(2.4) has the role of weighing the data according to their accuracy and is generally defined as the 
εtk
Data
Model
Time
Value
tk
k
min
2 →
∑εtk
FIGURE 2.1  The fundamental goal of model identification: minimize the sum of squared errors between the 
data and the model response.

79
Identification of Environmental Models
reciprocal of the measurement errors. Suppose that at each sampling instant tk, each measurement 
is replicated m times, so that we have a data set arranged as in Equation 2.6:
	
Y
y
y
y
y
y
y
y
exp =
←
→
…
…
( )
( )
( )
( )
( )
( )
N
t
t
t
t
t
t
N
N
samples
1
2
1
2
1
1
1
2
2
2




t
m
t
m
t
m
N
m
1
2
( )
( )
( )
…














↑
↓
y
y
replicates 	
(2.6)
Averaging the m replicates taken at each measuring time tk yields
	
y
m
y
m
y
y
t
t
i
i
m
t
t
i
t
i
m
k
k
k
k
k
=
=
−
−
(
)








( )
=
( )
=
∑
∑
1
1
1
1
2
1
1
2
σ
	
(2.7)
which is repeated for each measured quantity, so that the data matrix becomes
	
Y
y
y
y
exp =
±
±
±












t
t
t
t
t
t
N
N
1
1
2
2
σ
σ
σ

	
(2.8)
An example is shown in Figure 2.2. In general, the quantities in Equation 2.8 can be computed, even 
when the number of replicates at each tk varies from sample to sample.
(a)
 
Time
±σ
Value
Value
y
(b)
Time
At each sampling
time tk we have m
replicates of the
measurement
FIGURE 2.2  If each measurement is replicated m times (a), we can condense this information by taking the 
average and standard deviation of the set of samples at each time tk. In the (b) plot, the same information is 
conveyed by the set average ( )
y  and standard deviation (
)
±σ .

80
Environmental Systems Analysis with MATLAB®
If we do not have replicates at each sampling instant, and therefore we cannot compute Equation 2.7 
directly, we can estimate the standard deviation representing the measurement accuracy with the tech-
nical specifications supplied by the instrument manufacturer. In any case, the weighting matrix Qk is 
defined as a diagonal matrix of the reciprocal variances, that is,
	
Qk
t
t
t
k
k
k w
=
( )
…
( )
…
…
…
( )


















1
1
0
0
0
1
2
0
0
0
0
0
0
1
2
2
2
σ
σ
σ




	
(2.9)
where the matrix dimension w is equal to either q or n, depending on whether output or state mea-
surements are considered. It is important to remember that for each sampling instant tk, a specific 
Qk matrix is defined on the basis of the local error statistics. However, if the matrix reflects just the 
instrument accuracy, then it is constant over all the sampling instants, and the subscript k may be 
dropped. Figure 2.3 shows two short data series, one with a variable accuracy for each measure-
ment and the other with constant accuracy. In either case, the matrix Q reflects the measurement 
accuracy, in the sense that accurate measurements produce a matrix with large diagonal elements, 
and vice versa. We shall get back to the quality of the observations, when a link will be established 
between data noise and parameter accuracy.
2.1.3  Input Information Content
The model data may be generated in response to a particular time evolution of the input. The abil-
ity of an input time series of activating all the system modes for as long as required to achieve a 
good parameter estimation is called persistent excitation (Bellman and Åström, 1970; Mareels 
et al., 1987; Shimkin and Feuer, 1987; Ljung and Glad, 1994; Ding and Chen, 2005; Willems 
et al., 2005). Several input classes were defined as ‘persistently exciting’ if their power spectrum 
Variable accuracy data
Constant accuracy data 
σ1
σ2
σ3
σ
σ
σ
Value
tk
ytk  ± σtk
ytk  ± σ
1
2
Qk  =  σk
1
Q
  = σ2
Time
FIGURE 2.3  An example of a data set with variable accuracy (above) and with constant accuracy (below): 
the shaded area on the right shows the average and standard deviation characterizing the matrix Q. In the case 
of constant variance, the index k is dropped.

81
Identification of Environmental Models
is never less than a prescribed quantity for any given time window. The step input is the simplest 
persistently exciting input, but more elaborate (and efficient) choices range from white noise to 
pseudo-random binary sequences that mimic the behaviour of white noise, though assuming only 
two levels.
2.1.4  The Error Functional
The definition of the error functional (2.3) or (2.4) deserves some comment. First of all, we refer to 
each of them as a functional, rather than a function, because it encompasses the whole time evolu-
tion over the sampling instants t
tN
1,...,
(
). The optimization procedure that will be described in the 
next section is intended to reach the minimum of that functional, and thus find the ‘optimal’ value of 
the parameters P, which represent the best approximation to the otherwise unknown ‘true’ param-
eters. If there are no systematic modelling errors, the difference between the data and the model 
response is an approximation of the data variance
	
σ2
2
1
1
∼s
E
N
n
N
n
p
p
t
t
T
k
N
k
t
t
k
k
k
k
=
−
=
−
−


−
=∑
( )
( )
( )
exp
ex
P
y
P
y
Q
y
P
y
p

	
(2.10)
and it would be nice to recast this object into a framework that would enable some statistical con-
sideration. If the number of data N is large enough, the errors y
P
y
t
t
k
k
( ) −


exp  can be considered as 
normally distributed, and their sum of squares is χ2-distributed with N
np
−
 degrees of freedom 
(Press et al., 1986; Bates and Watts, 1988). Thus, an error functional such as in Equation 2.10 can 
be viewed as a χ2 goodness-of-fit statistics to assess the significance of the calibration. The limit 
χ2 value can be computed in MATLAB® with the primitive function X = chi2inv(alpha, 
DF), where alpha is the confidence level and DF is the number of degrees of freedom.
In the previous section, the weighting matrix Qk was assumed to represent the measurement accu-
racy (or uncertainty), but other kinds of weighting factors can be adopted when a special emphasis is 
required on a portion of the data. Figure 2.4 shows four possible weighting methods. Reconsidering 
the weighting matrix Qk no longer associated with the measurement noise, but as a weighting fac-
tor emphasizing some feature of the data, the following are but a few options in its new role. It is 
assumed, as in Equation 2.9, that the matrix Qk is diagonal Qk
k
w
= diag(
).
	
1.	Proportional weighting: The importance of the data grows with their magnitude, attribut-
ing more importance to the largest data with a proportional factor α,
	
w
y
k
tk
= α
exp 	
(2.11)
	
2.	Inverse weighting: The importance of the data is inversely proportional to their value, with 
a factor β,
	
w
y
k
tk
= β
1
exp 	
(2.12)
	
3.	Derivative weighting: The importance of the data is proportional to the magnitude of their 
derivative, giving more importance to the fast changing data, with a factor γ,
	
w
y
y
t
t
k
t
t
k
k
k
k
=
−
−
+
+
γ
1
1
exp
exp
	
(2.13)

82
Environmental Systems Analysis with MATLAB®
	
4.	Robust weighting: The data outside a feasibility band are considered as outliers (consid-
ered in detail in Chapter 3) and severely scaled down, being considered as unreliable data 
or an abnormally large deviation,
	
w
y
y
k
t
t
k
k
=
+(
)








1
1
2
2
exp
if  
 is outside the feasib
exp
ility band
if  
 is inside the feasibility band
exp
1
ytk







	
(2.14)
2.2  SENSITIVITY ANALYSIS AS AN IDENTIFIABILITY TEST
Before actually embarking on the—sometimes troublesome—task of finding the ‘best’ parameter 
values, in the sense outlined in the previous section, it is strongly advisable to have a closer look 
at the system structure and determine what is the role played by each parameter. This preliminary 
analysis is often referred to as sensitivity analysis and is very useful in simplifying the subsequent 
task of the actual parameter estimation.
The central role of the sensitivity analysis is to make sure that the system is identifiable, that 
is, its parameters can be estimated on the basis of the available data. Structural identifiability 
was initially aimed at making sure that the model structure was such as to allow its parameters 
to be estimated. Lack of identifiability may occur when a parameter variation has no effect on 
the observed system output (real structural identifiability), but more often it occurs because the 
wrong data are used for the estimation. In the past, research was limited to the former motive, and 
(a)
(b)
 
Outliers
(c)
(d)
Feasibility band
FIGURE 2.4  Four possible definitions of error weighting factors wk: (a) proportional weighting; (b) inverse 
weighting; (c) derivative weighting; and (d) robust weighting.

83
Identification of Environmental Models
analytical methods (Pohjanpalo, 1978) were proposed to make certain that the model structure was 
such as to guarantee model identifiability. The limit of those methods, apart from the extensive 
calculus involved, was a too clear-cut yes/no answer, whereas, in practice, it is more reasonable to 
consider identifiability as a gradual model property, jointly considering the model structure and the 
available data (Van Tongeren, 1995; Kong et al., 1996; Dochain and Vanrolleghem, 2001; Marsili 
Libelli et al., 2001; Petersen et al., 2001; Reichert and Vanrolleghem, 2001; De Pauw, 2005; Sin 
et al., 2005; Lindenschmidt, 2006; Spindler, 2014). Consequently, present-day identifiability tests 
involve both the structure and the data. In this section, we shall concentrate on the former, having 
already considered the data in Section 2.1.2.
Sensitivity is defined as the variation in the observed variable (either output or state) relative to 
the parameter variation, that is,
	
State sensitivity S
Output sensitivi
p
p
i
i
i
i
p
p
x
x
x
lim
∆
∆
∆
→=
= ∂
∂
0
ty Sp
y
p
i
i
i
i
y
p
y
p
lim
∆
∆
∆
→=
= ∂
∂






0
	
(2.15)
Depending on the context in which the parameter variation Δpi is considered, differing aspects 
of its influence on the model are brought to the fore. There are two complementary approaches to 
­sensitivity: static and dynamical, and both will be examined.
2.2.1  Static Sensitivity
If we want to know the effect of a parameter variation on the whole simulation horizon of our 
model, the simplest way to compute this effect is to perform a number of simulations with perturbed 
parameter values. Because it is difficult to discern the effect of simultaneous parameter variations, 
let alone present them graphically, it is advisable to vary only one or two parameters at a time and 
assess the results, which will take the form of curves or surface relating a model figure of merit 
to the parametric perturbation. This figure of merit can be defined by borrowing the basic error 
functional definitions (2.3) or (2.4). However, in this case, no data are involved, so we should drop 
the accuracy matrix Qk, because we shall not be comparing data versus model output, but rather 
nominal versus perturbed model trajectories, defined, respectively, as simulations performed by 
keeping the selected parameter at its nominal value, or by perturbing it. Thus, the previous func-
tional definitions (2.3) or (2.4) reduce to the following comparison of model trajectories obtained 
with perturbed model parameters:
	
∆E
k
k
T
k
k
k
=
−
(
)
−
(
)
∑x
x
x
x
pert
nom
pert
nom
State sensitivity functioonal
Output sensitivity fun
pert
nom
pert
nom
y
y
y
y
k
k
T
k
k
k
−
(
)
−
(
)
∑
ctional






	
(2.16)
In Equation 2.16, the summations are extended to a set of k samples freely selected along the tra-
jectories, as shown in Figure 2.5, and not necessarily coinciding with the experimental samples. In 
the left plot (a), the nominal and perturbed trajectories are plotted, starting with the same initial 
conditions. An arbitrary set of points is selected to compute the difference between each perturbed 
trajectory and the nominal one. In the right plot (b), the squared sums resulting from Equation 2.16 
are plotted as a function of the perturbation increment ∆pi. There is no compelling reason to select 
equally spaced perturbations, but it helps in the computations.
The shape of the sensitivity curves thus obtained may have the forms (a) or (b) in Figure 2.6. 
A fairly flat curve (a) obviously implies a low sensitivity because large parametric variations result 

84
Environmental Systems Analysis with MATLAB®
in a moderate increase of the sensitivity. Conversely, curve (b) denotes a high sensitivity. The 
schemes in (c) and (d) indicate two possible quantifications of the sensitivity.
2.2.1.1  Static Sensitivity by Error Increment
Figure 2.6c takes the ratio of the error functional increment ∆E pi
(
) to the parameter perturbation 
δpi as a measure of the sensitivity to pi. To remove the dependence on the relative magnitude of the 
parameter, select a common percentage increment as pnom 1±
(
)
δ , and compute the corresponding 
increments δE1 and δE2 of the functional. The sensitivity can then be defined as the average
pnom
k = 1
k = N
ynom
Time
(a)
(b)
Δpi
(3)
Δpi
(2)
Δpi
(1)
ΔE−3
ΔE1
ΔE2
ΔE3
ΔE (pi)
ΔE−2
ΔE−1
Δpi
(1)
−
Δpi
(3)
−
Δpi
(3)
Δpi
(2)
−
Δpi
(2)
Δpi
(1)
−
Δpi
(1)
Δpi
(2)
−
Δpi
(3)
−
FIGURE 2.5  An example of producing perturbed trajectories (all starting with the same initial conditions) 
and computing the sensitivity functional ΔE (a). In (b), the values of ΔE are plotted as a function of the varying 
magnitude of the perturbation Δpi.
ro
pi
pi
(a)
(c)
(d)
(b)
ΔE(pi)
ΔE(pi)
ΔE(pi)
pnom (1 – δp)
pnom (1 + δp)
nom
pi
δE1
δE2
nom
pi
nom
pi
pi
nom
pi
pi
ΔE(pi)
FIGURE 2.6  Possible look of the single-parameter sensitivity outlooks for a generic parameter pi. In (a), a 
fairly flat curve indicates a low sensitivity, whereas the steeper curve in (b) denotes a high sensitivity. Two pos-
sible numerical formalizations are shown in (c) and (d). Parameter sensitivities can be ranked by considering 
the average increment of ΔE corresponding to symmetrical parameter perturbations ±δp (c), or by computing 
the curvature (
)
1/ro  of the sensitivity curve in the neighbourhood of pnom, as in (d).

85
Identification of Environmental Models
	
S
E
E
pi = δ
δ
1
2
+
2
	
(2.17)
In this way, sensitivities can be directly compared, with larger values corresponding to higher 
sensitivities.
As an example, Figure  2.7 shows the static sensitivities of the Monod kinetic model 
(Section 1.10.4.1)
	
Substrate
Biomass
dS
dt
Y
S
K
S X
dX
dt
S
K
S X
b X
s
s
h
= −
+
=
+
−




1 µ
µ
max
max


	
(2.18)
caused by the perturbation of one parameter at a time around the nominal values 
µmax
. ,
,
. ,
.
=
=
=
=
(
)
0 5
20
0 5
0 03
K
Y
b
s
h
. In this case, both state variables (S and X) are observed, so 
the sensitivity functional (2.16) is computed as
	
E
S
S
X
X
k
k
k
k
k
k
SX
pert
nom
pert
nom
=
−
(
) +
−
(
)
∑
∑
2
2
	
(2.19) 
0.44
0.46
0.48
0.5
0.52
0.54
0.56
0
200
400
600
800
1000
Sμmax = 469.6289
SY 
 = 43.7131
Sbh = 38.3579
SKs = 291.5642
ΔE
ΔE
ΔE
μmax
26
28
30
32
34
0
100
200
300
400
500
Ks
0.44
0.46
0.48
0.5
0.52
0.54
0.56
0
20
40
60
80
Y
ΔE
0.026
0.028
0.03
0.032
0.034
0
10
20
30
40
50
60
bh
FIGURE 2.7  Static sensitivity of the Monod kinetics model perturbing only one parameter at a time by the 
same relative amount ±δp/pnom = ±10%. The dots represent the corresponding variations δE, while the sensi-
tivity computed with Equation 2.17 is shown on top of each plot.

86
Environmental Systems Analysis with MATLAB®
Obviously, each sensitivity curve is zero when the parameter is at its nominal value. Notice the 
magnitude spread of the four vertical scales, emphasizing the differing influence of each parameter 
on the model response.
2.2.1.2  Static Sensitivity by Curvature
The method outlined in Figure 2.6d considers instead the curvature of the functional ∆E pi
(
) in the 
neighbourhood of the nominal value pnom. This quantity is defined as the reciprocal of the radius, 
which is computed via the second derivative:
	
Φ
∆
=
=
∂
∂






−
1
2
2
1
r
E
p
o
i
pnom
	
(2.20)
Numerically, the second derivative can be approximated as follows (Abramowitz and Stegun, 1970):
	
r
E
E
E
E
E
E
o =
∂
( )
∂





≅−
−
(
) +
−
(
) −
( ) +
( ) −
2
2
2
16
30
0
16
∆
∆
∆
∆
∆
∆
δ
δ
δ
δ
δ
2
12
2
δ
δ
(
)	
(2.21)
where δ represents a relatively small increment of pi around its nominal value pnom.
2.2.1.3  Monte Carlo Sensitivity
Instead of performing simulation with a parameter perturbed by fixed increments, the Monte Carlo 
approach can be followed, which consists of producing a large number of simulations with the 
perturbed parameter drawn from a statistically defined population. The distribution of the target 
quantity, for example, the value of a state variable at a certain time along the simulation, is statisti-
cally analysed in comparison with the statistics of the perturbed parameter.
Suppose that the perturbed parameter is drawn from a normal distribution with mean equal 
to the nominal value and a variance comparable with the expected range of variation, that is, 
p
N p
i
i
pi

nom,σ
(
). Then, the Monte Carlo simulations will produce a distribution of the target vari-
able. By comparing the variances of the two distributions, the influence of the perturbed parameter 
can be assessed.
As an example, consider again the Monod kinetics (2.18), and let us perform a set of Monte Carlo 
simulations by extracting the parameter Ks from a normal distribution of known characteristics, that 
is, K
N K
s
s
Ks

,
,
nom σ
(
). Setting the target variable as the biomass concentration at a given time dur-
ing the simulation, the result of Figure 2.8 is obtained. The influence of Ks on that particular aspect 
of the model can be assessed by comparing the relative magnitude of the variances. In general, the 
behaviour of Figure 2.9 can be analysed, with a high-sensitivity target quantity exhibiting an ampli-
fication of the parameter variance, whereas a low-sensitivity target will compress the parameter 
variance.
2.2.1.4  Joint Sensitivity of Parameter Couples
Extending the perturbation method to a parameter couple may reveal interesting aspects of the error 
surface, and possible inter-parametric interactions. Consider again the Monod model (2.19), but this 
time two parameters, μmax and Ks, are jointly perturbed. Figure 2.10 presents two views of the static 
sensitivity portrait.
In the 3D plot (a), the minimum is placed in a flat valley, and this should be taken as a warn-
ing of possible numerical problems for the search algorithm. The contour portrait (b) shows sev-
eral contours of the previous surface, again emphasizing the narrow valley where the minimum is 
located. This kind of visualization can reveal interesting aspects in the error function surface, such 
as parameter correlation, that are likely to cause numerical difficulties for the search algorithm. 

87
Identification of Environmental Models
Knowing the shape of the error surface may help select the favourable zones where the search can 
be started, or avoid unfavourable regions, which might cause the search to go astray.
The shape of the error functional obviously depends on the observed variables. Figure 2.11 com-
pares the Monod error functional for different choices of the output variables. Here, in addition to 
the full error functional ESX of Equation 2.19, we consider two other cases in which only one state 
variable is observed:
0
10
20
30
40
50
60
70
80
90
100
0.0
0.5
1.0
1.5
2.0
2.5
3.0
3.5
Time (h)
Biomass (mg/l)
Nominal trajectory
Kso
FIGURE 2.8  An example of Monte Carlo sensitivity assessment of the biomass fluctuation at 30 h into the 
batch, caused by a random Ks drawn from a normal distribution of known characteristics.
High
sensitivity
Low
sensitivity
pi variations
amplified in the output
pi variations
compressed in the output
pi
nom
pi
P (pi)
P(y)
2σp
y
ynom
ynom
y
P (y)
2σy
2σy
FIGURE 2.9  The sensitivity of a target quantity (in the case the model output y) can be assessed by the 
amplification or compression of the variance of the parameter distribution.

88
Environmental Systems Analysis with MATLAB®
	
E
S
S
E
X
X
S
k
k
k
X
k
k
k
=
−
(
)
=
−
(
)
∑
∑
pert
nom
pert
nom
2
2
	
(2.22)
The three possible cases of Equations 2.19 and 2.22 are plotted in the subspace of the two critical 
parameters μmax and Ks. In the first case, ESX of Equation 2.19, both state variables are observed, 
whereas in the other two cases (ES or EX) of Equation 2.22 only one of them is available. Figure 2.11 
indicates that the substrate (S) gives the largest contribution to the overall sensitivity, whereas the rel-
ative weight of the biomass (X) is comparatively minor. Thus, substrate is the most important variable 
μmax
ΔE(P) = 1, 10, 50, 250, 1000, 2000 
0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75
10
12
14
16
18
20
22
24
26
28
30
Ks
(b)
Nominal parameters
= minimum
ΔE (μmax, Ks)
1600
1400
1200
1000
800
600
400
200
10
15
20
25
30
0.7
Flat bottom
(a)
Ks
μmax
0.6
0.5
0.4
0.3
FIGURE 2.10  Static sensitivity portraits of the Monod model with respect to the µmax,Ks
(
) parameter ­couple. 
The 3D plot (a) shows that the minimum is placed in a flat trough, which may cause numerical problems to the 
search algorithm seeking the optimal parameters. The contour portrait (b) shows some levels of the same error 
function, emphasizing the narrow valley where the minimum is located.
Nominal parameters
ESX
ES
EX
15000
10000
ESX, ES, EX
μmax
KS
5000
0
40
30
20
0.3
0.4
0.5
0.6
0.7
FIGURE 2.11  Differing shapes of the error functional, depending on which output variables are considered.

89
Identification of Environmental Models
in the estimation. In some sense, Figure 2.11 reverses the sensitivity problem that was initially posed 
in terms of the parameters, whereas it is now considered from the observed variables viewpoint.
2.2.2  Dynamic (Trajectory) Sensitivity
A different approach is now considered to show the influence of each parameter along the system 
evolution. Deriving the definition of sensitivity (2.15) with respect to time and exchanging the order 
of the derivatives yields
	
d
dt
p
p
d
dt
p
p
x p
i
i
i
i
i
∂
∂



= ∂
∂



= ∂(
)
∂
= ∂(
)
∂
⋅∂
x
x
f x
f
x
x
,
,
nom
x
f
∂
+ ∂
∂
p
p
i
i
	
(2.23)
producing the dynamic sensitivity system
	
S
S
p
x p
p
n
p
i
n
i
i
i
x
x
x
J
f
J
f
x
=
⋅
+ ∂
∂
= ∂(
)
∂
with
nom
,
	
(2.24)
The sensitivity dynamical equation (2.24) is to be solved in conjunction with the system equations, 
because the matrix Jn is similar to the Jacobian, but it is not computed at the equilibrium because it 
follows the nominal trajectory xnom obtained with nominal parameter values. The importance of this 
new sensitivity definition lies in its relation to system evolution, because it reveals the influence of 
each parameter along the system trajectory, hence its name of trajectory sensitivity. In other words, 
it provides information on the parts of the trajectory in which the parameter influence is greatest. 
The data collected during this time are therefore the most effective in parameter estimation. Thus, 
trajectory sensitivity can be used to plan a data acquisition campaign, concentrating the sampling 
effort at the times when the data are most effective for estimating a given parameter.
This concept will be considered again in due course, when discussing the validity of the esti-
mates and how their accuracy can be maximized. For now, let us elaborate on Equation 2.24. To 
obtain the sensitivity system, calculus must be applied to obtain the Jacobian matrix Jn and the 
other term ∂
∂
f
pi, which can be regarded as an input. Of course, ∂
∂
f
pi is obtained by evaluating 
the derivative of the system function with respect to the parameter of interest pi. Figure 2.12 shows a 
Nominal
model
Sensitivity
systems
un (t)
Sp1
There are np
sensitivity
systems
x
Sp2
x
Spnp
x
xn (t)
xn = f (xn, un, p)
x
∂f
∂p2
Sp2 = Jn . 
x
Sp2+ 
∂f
∂pnp
 = Jn . Spnp+ 
x
Spnp
x
∂f
∂p1
x
Sp1 = Jn . 
x
Sp1 + 
FIGURE 2.12  Trajectory sensitivity system, including the model evolving along its nominal trajectory and 
np sensitivity systems fed with the nominal state trajectory, incorporated in Jn.

90
Environmental Systems Analysis with MATLAB®
general trajectory sensitivity system composed of the system model, evolving with nominal param-
eters, and a bank of np sensitivity systems, one for each parameter of interest. Notice that the latter 
systems are not autonomous, because the pseudo-Jacobian matrix Jn must be fed with the nominal 
state trajectory xnom along the system evolution. The last term in each sensitivity system, ∂
∂
f
pi, is 
the derivative of the system equations with respect to each parameter and only the column of the 
relevant parameter pi should be used.
As an example, consider again the Monod model (2.18), and suppose that we want to set up the 
sensitivity system for its four parameters. Using the notation of Equation 2.24, the sensitivity terms 
take the form
	
J
f
x
x
n
f
S
f
X
f
S
f
X
Y
=
∂
∂




=
∂
∂
∂
∂
∂
∂
∂
∂












=
−
⋅µ
nom
1
1
2
2
1
max
max
max
max
⋅
+
(
)
⋅
−
⋅µ
⋅
+
µ
⋅
+
(
)
⋅
µ
⋅
+
−

K
K
S
X
Y
S
K
S
K
K
S
X
S
K
S
b
s
s
s
s
s
s
h
2
2
1













	
(2.25)
	
∂
∂
=
∂
∂µ
∂
∂
∂
∂
∂
∂
∂
∂µ
∂
∂
∂
∂
∂
∂
f
P xnom
f
f
K
f
Y
f
b
f
f
K
f
Y
f
b
s
h
s
1
1
1
1
2
2
2
2
max
max
h
s
s
s
Y
X S
K
S
Y
X S
K
S
Y
X S
K












=
−
⋅
⋅
+
⋅µ
⋅
⋅
+
⋅µ
⋅
⋅
1
1
1
2
2
max
max
(
)
+
⋅
+
−µ
⋅
⋅
+
−












S
X S
K
S
X S
K
S
X
s
s
0
0
2
max
(
)
 
(2.26)
These equations generate four sensitivity systems, one for each parameter, which can be composed 
as follows:
Sensitivity to μmax:
	


S
S
Y
K
K
S
X
Y
S
K
S
S
X
s
s
s
µ
µ
µ
µ
max
max
max
max
m






=
−
⋅
+
(
)
⋅
−
⋅µ
⋅
+
1
1
2
ax
max
max
max
K
K
S
X
S
K
S
b
S
S
s
s
s
h
S
X
+
(
)
⋅
µ
⋅
+
−














× 


2
µ
µ



+
−
⋅
⋅
+
⋅
+












1
Y
X S
K
S
X S
K
S
s
s
	
(2.27)
Sensitivity to Ks:
	


S
S
Y
K
K
S
X
Y
S
K
S
K
K
K
S
K
X
s
s
s
s
s
s
s





=
−
⋅
+
(
)
⋅
−
⋅µ
⋅
+
1
1
2
µ
µ
max
max
max
+
(
)
⋅
µ
⋅
+
−














× 




+
⋅µ
S
X
S
K
S
b
S
S
Y
s
h
K
S
K
X
s
s
2
1
max
max ⋅
⋅
+
(
)
−µ
⋅
⋅
+
(
)














X S
K
S
X S
K
S
s
s
2
2
max
	
(2.28)
Sensitivity to Y:
	


S
S
Y
K
K
S
X
Y
S
K
S
K
K
S
Y
S
Y
X
s
s
s
s
s





=
−
⋅
+
(
)
⋅
−
⋅µ
⋅
+
+
1
1
2
µ
µ
max
max
max
(
)
⋅
µ
⋅
+
−














× 




+
⋅µ
⋅
⋅
2
2
1
X
S
K
S
b
S
S
Y
X
s
h
Y
S
Y
X
max
max
S
K
S
s +










0
	
(2.29)

91
Identification of Environmental Models
Sensitivity to bh:
	


S
S
Y
K
K
S
X
Y
S
K
S
K
K
b
S
b
X
s
s
s
s
h
h





=
−
⋅
+
⋅
−
⋅µ
⋅
+
1
1
2
µ
µ
max
max
max
(
)
(
s
s
h
K
S
K
X
S
X
S
K
S
b
S
S
X
d
d
+
⋅
µ
⋅
+
−












× 




+ −




)
max
2
0
	
(2.30)
Apart from the considerable calculus involved, the exact computation of sensitivities with the 
above method requires the joint simulation of the original model, to generate the nominal trajec-
tory, and of the sensitivity systems for the parameters of interest, all arranged as in Figure 2.12. If 
the model consists of a considerable number of equations and/or parameters, this may represent a 
formidable challenge. Fortunately there is a way to obtain equally accurate sensitivities in a much 
simpler way.
2.2.2.1  Approximate Trajectory Sensitivity
If we relax the basic hypothesis under which the sensitivity system (2.24) was derived, that 
is, S
y
p
y
p
p
y
p
=
(
) = ∂
∂
(
)
→
lim
∆
∆
∆
0
, and instead assume that each parameter is perturbed by a finite 
increment Δp, then a handy way of computing an approximate trajectory sensitivity is available 
(Petersen, 2000; Petersen et al., 2003; De Pauw, 2005). Consider perturbing one parameter p by a 
very small (but finite) amount ∆p = ±δ, and perform the simulations with perturbed parameters, in 
addition to the nominal simulation with reference parameter value pnom. Then, the sensitivity Sp
y is 
computed as the average of the two side sensitivities S+ and S−:
	
p
y
p
y
p
y
S
y
y
nom
pert
nom
nom
nom
pert
pert
1
1
+
(
)→
→
−
(
)→



→
=
−
+
−
+
+
δ
δ
nom
nom
nom
pert
nom
δ
δ
⋅
=
−
⋅






→
=
+
−
−
+
−
p
S
y
y
p
S
S
S
p
y
2
	
(2.31)
If the incremental perturbation ∆p = ±δ is small enough, then Equation 2.31 is an accurate approxi-
mation of the trajectory sensitivity system (2.24) without having to go through all the involved 
calculus. A word of caution is due here regarding very complex models, for which the choice of δ 
may become critical, and its optimal value should be determined (De Pauw, 2005; Iacopozzi et al., 
2007). As an example, Figure 2.13 compares the exact (2.27) and approximate (2.31) sensitivities 
of the Monod kinetics to the maximum growth rate μmax. Though for δ = 0 05
.
 there is still some 
discrepancy between the two sensitivities, for a smaller value δ =
(
)
0 0001
.
 the two trajectories coin-
cide for all practical purposes. Figure 2.14 shows the trajectory sensitivities for the complete set of 
parameters in the Monod kinetics.
The trajectory sensitivity approach can be used for planning the data collection with a view 
towards parameter estimation. In fact, the instants in which the magnitude of the sensitivity to 
a parameter is large are those in which that parameter has the highest influence on the system 
response, and hence the data collected in those time lapses will carry the highest amount of infor-
mation for its estimation. Figure 2.15 shows the most effective time brackets for collecting substrate 
and biomass data for μmax estimation.
In a similar way, the sensitivities of the Streeter & Phelps (S&P) model
	
BOD
DO
sat
dB
dt
K
B
dC
dt
K
C
C
K
B
b
c
b
= −
⋅
=
−
(
) −
⋅






	
(2.32)

92
Environmental Systems Analysis with MATLAB®
with respect to its parameters Kb and Kc, can be obtained, as shown in Figure 2.16, for the single 
reach case with upstream point source. The shaded areas along the BOD and DO curves indicate the 
most favourable portion of the system evolution for gathering data used to estimate the two model 
parameters Kb and Kc. The sensitivity of BOD to Kc was not traced, being identically zero, because 
this parameter does not appear in the BOD model equation.
2.2.2.2  Sensitivity Ranking
The graphical representation of trajectory sensitivities yields a visual appraisal of the role played by 
each parameter along a certain system evolution. This information can be used as a basis for plan-
ning a data collection campaign, but when it comes to ranking the parameters according to their 
sensitivity, a numerical figure of merit is certainly preferable. This numerical information can be 
extracted from the sensitivity trajectories by sampling them at regular intervals and computing their 
root-mean-square (RMS) value, that is,
	
ξi
p
y
k
N
j
q
p
N
S
k
i
n
i
j
=
=
=
= ∑
∑
1
( )
1,
,
2
1
1

	
(2.33)
Extending the computation of Equation 2.33 to all of the np parameters in the model, they can be 
ranked according to their scores ξ, so that we can decide which are the most sensitive and limit the 
estimation to that critical subset. The N sampling times in Equation 2.33 can be freely selected and 
are not required to coincide with the actual sampling times.
Time (h)
0
20
40
60
80
100
120
140
160
180
200
−30
−20
−10
0
10
Substrate (mg/l)
Substrate          
Exact sensitivity to μmax
Approx. sensitivity to μmax for δ = 0.05
Biomass
Exact sensitivity to μmax
Approx. sensitivity to μmax for δ = 0.05
0
20
40
60
80
100
120
140
160
180
200
−5
0
5
10
Time (h)
Biomass (mg/l)
FIGURE 2.13  Comparison of exact and approximate trajectory sensitivities of the Monod kinetics to µmax. 
The approximate sensitivities for δ = 10−4 are superimposed to the exact ones, while some deviation is discern-
ible for δ = 0.05.

93
Identification of Environmental Models
2.3  GRADIENT-FREE OPTIMIZATION METHODS (DIRECT SEARCH)
Having assessed the shape of the error functional and ranked the parameter sensitivities, we are 
now in a position to move onto the actual parameter estimation, limiting the procedure to the subset 
of parameters with the highest sensitivity. In fact, the number of parameters that can successfully 
be estimated depends on their identifiability and the amount of available data. A very rough rule of 
thumb suggests that for each parameter, at least a dozen data should be available, so the amount of 
parameters that can actually be estimated is determined not only by their intrinsic identifiability, but 
also by the data availability. A more compelling reason for using as many data as possible is based 
on the fact that the statistics used to judge the quality of the estimation χ2 and F hold if the number 
of data is sufficiently large.
Having resolved this preliminary selection problem, we now turn our attention to practical methods 
for searching the minimum of the error functional (2.4) using a gradient-free method for two good rea-
sons. First, the analytical solution to the model (2.1) is almost always unavailable, so the gradient could 
not be obtained via calculus. Second, in narrow valley situations, such as encountered with the Monod 
kinetics and shown in Figure 2.10, the gradient method, projecting the search in the direction of maxi-
mum slope, may bounce back and forth between the almost parallel walls of the valley. Figure 2.17 
compares the performance of gradient and search methods in coping with the narrow valley problem. 
Clearly, the search method has an edge, and is to be preferred in this context.
0
50
100
150
200
250
−30
−20
−10
0
10
Substrate sensitivity
Time (h)
Substrate (mg/l)
Substrate
Sensitivity to μ
0
50
100
150
200
250
−5
0
5
10
Biomass sensitivity
Time (h)
Biomass (mg/l)
Biomass
Sensitivity to μ
0
50
100
150
200
250
0
5
10
Substrate sensitivity
Time (h)
Substrate (mg/l)
Substrate
10*Sensitivity to Ks
0
50
100
150
200
250
−1
0
1
2
Biomass sensitivity
Time (h)
Biomass (mg/l)
Biomass
10*Sensitivity to Ks
0
50
100
150
200
250
0
5
10
15
Substrate sensitivity
Time (h)
Substrate (mg/l)
Substrate
Sensitivity to bh/10
0
50
100
150
200
250
−10
−5
0
5
Biomass sensitivity
Time (h)
Biomass (mg/l)
Biomass
Sensitivity to bh/10
0
50
100
150
200
250
0
5
10
Substrate sensitivity
Time (h)
Substrate (mg/l)
Substrate
Sensitivity to Y
0
50
100
150
200
250
0
2
4
6
Biomass sensitivity
Time (h)
Biomass (mg/l)
Biomass
Sensitivity to Y
FIGURE 2.14  Trajectory sensitivities of the Monod kinetic to the four parameters computed with the 
approximate method and δ = 10−4. Note the largely differing magnitudes, which are unimportant in the sen-
sitivity assessment.

94
Environmental Systems Analysis with MATLAB®
0
50
100
150
200
−30
−20
−10
0
10
Time (h)
Substrate (mg/l)
0
50
100
150
200
−5
0
5
10
Time (h)
Biomass (mg/l)
Substrate
Sensitivity to μmax
Biomass
Sensitivity to μmax
Maximum
sensitivity
Maximum
sensitivity
Maximum
sensitivity
FIGURE 2.15  Use of the trajectory sensitivity to select the information-rich data for the estimation of µmax. 
In this case, the favourable time brackets of substrate and biomass almost coincide, with an additional biomass 
window in the endogenous phase.
0
10
20
30
40
50
60
70
80
0
5
10
Time (h)
Conc. (mg/l)
0
10
20
30
40
50
60
70
80
−40
−20
0
20
Time (h)
Sensitivity
BOD
DO
DOsat
BOD
SKb
DO
SKc
DO
SKc
High-sensitivity zone
FIGURE 2.16  Trajectory sensitivities of the Streeter & Phelps model. The high sensitivity zone is located 
around the DO_sag.

95
Identification of Environmental Models
The optimization of Equation 2.4 is usually solved through a numerical search combined with 
a simulation engine to obtain the model output for each new trial of the parameter vector P. The 
simplex algorithm, which will soon be described in detail, is an improved version of the classical 
flexible polyhedron (Nelder and Mead, 1965; Himmelblau, 1972), with an optimized expansion 
(Marsili-Libelli and Castelli, 1987; Marsili-Libelli, 1992). Other efficient search methods are the 
quasi-Newton (QN) method (Himmelblau, 1972; Press et al., 1986). The algorithm implemented in 
the MATLAB Optimization Toolbox uses the Broyden, Fletcher, Goldfarb, and Shanno (BFGS) ver-
sion (Shanno, 1970). It should be recalled that BFGS is just one implementation of the QN optimiza-
tion method. Alternative methods exist, such as the Davidson, Fletcher, and Powell (DFP) algorithm 
(Himmelblau, 1972), although the BFGS method can be regarded as the best performing one. The 
QN algorithm is well suited for highly correlated problems because it approximates the error func-
tional with the Hessian matrix (second order), and not with the Jacobian (first order), as does the 
Gauss–Newton method. The Levenberg–Marquardt algorithm should also be mentioned as one of 
the most popular nonlinear optimization methods, although it has been criticized as inadequate for 
a wide range of parameter estimation problems (De Pauw, 2005).
Another important aspect to consider is that all of the above optimization methods are inherently 
unconstrained, although parameter estimation sometimes requires constraints on parameter values, 
for example positivity. There are several reasons that prevent the introduction of constraints in the 
simplex search (Marsili-Libelli et al., 2003; Checchi and Marsili-Libelli, 2005; Marsili-Libelli and 
Checchi, 2005). First of all, constraints may disrupt the convergence process, introduce a wide 
discretion margin and produce a less realistic covariance matrix. Further, if the search is left uncon-
strained, an incorrect problem formulation can be easily detected, for example, if negative or ‘wild’ 
parameter values are found. The problems arising from imposing constraints are well treated by 
Ruano et al. (2007).
2.3.1  Optimized Flexible Polyhedron
All the direct search methods originated from the basic flexible polyhedron algorithm (Nelder 
and Mead, 1965; Himmelblau, 1972; Kuester and Mize, 1974). The basic idea is to evaluate the 
error functional for several combinations of the parameter values, discard the worst and substitute 
it with a better one, whose selection is the core of the search algorithm. Given np parameters, 
the ‘flexible polyhedron’ has np +1 vertices P P
P
P
1
2
1
,
,
,
,
…
(
)
+
n
n
p
p
, so that it covers a convex non-
degenerate region of the parameter space (the ‘hull’). After testing the error functional with each 
of the np +1 combinations, a ranking is made, and the worst one is replaced with a better one. 
p2
p2
p1
p1
(a)
(b)
FIGURE 2.17  Problems created by a ‘narrow valley’ error functional. The gradient-based method (a) makes 
little progress because its projection is orthogonal to the contour lines. A search method (b) reaches the mini-
mum quickly once the valley direction has been detected.

96
Environmental Systems Analysis with MATLAB®
The problem is to make an educated guess to select the new parameter vector, which will be 
referred to simply as ‘point’, in the parameter space. Figure 2.18 shows the worst point replace-
ment procedure in a two-parameter space: after evaluating E P
( ) for all the vertices by model 
simulation, the worst is discarded and replaced by a new one. The question now is how to select 
a new point that will improve the search.
2.3.1.1  Polyhedron Reshaping
The simplex polyhedron is called ‘flexible’, and not without reason. In fact, it is conceived to change 
its shape and adapt to the error surface in its search for the minimum. Once all the vertices have 
been tested and ranked as P
P
max
min
,
,
…
(
), the worst point Pmax is excluded from the set, and the cen-
troid of the remaining np points is computed as their average
	
P
P
cen
1
max
1
=
=
≠∑
np
i
i
i
np
	
(2.34)
One of the following operations is then performed, depending on the relative merit of each point, 
along the search direction defined by the line joining Pmax to Pcen:
Reflection: This preliminary operation defines a new point Pr along the direction P
P
max →
(
)
cen  as
	
P
P
P
P
r =
+
−
(
)
>
cen
cen
α
α
max
0	
(2.35)
E
rP
(
) is then compared with the previous values. Based on its relative merit, one of the three opera-
tions of Figure 2.19 is made:
Expansion: If E
E
r
(
)
(
)
min
P
P
<
, the reflected point is better than the previous best Pmin
(
), so the 
search is continued along the same direction, and a new expanded point Pexp is determined as
	
P
P
P
P
exp
max
=
+
−
(
)
>
cen
cen
γ
γ
1	
(2.36)
p2
Model
simulation
E(P) evaluation
New P1
p1
P3 ≡ (p1, p2) → E(P3)
3
3
P2 ≡ (p1, p2) → E(P2)
2
2
P1 ≡ (p1, p2) → E(P1)
1
1
Pi ≡ (p1, p2)
i
i
E(P1) > E (P2) > E(P3)
FIGURE 2.18  Substitution of the worst point (vertex) of the old polyhedron (hatched triangle). In this case, 
the ranking resulted in P1 being the worst point, and it is replaced by the new P1. Convexity requires the poly-
hedron to have np + 1 vertices.

97
Identification of Environmental Models
Now, the new point Pnew is determined, depending on the comparison between Pr and Pexp, as follows:
	
P
P
P
P
P
P
P
r
new
if
if
=
<
>



exp
exp
exp
(
)
(
)
(
)
(
)
E
E
E
E
r
r
	
(2.37)
Reflection: If the merit of the reflected point is intermediate between the maximum and minimum 
points, then the reflected point already computed with Equation 2.35 is retained as the new point, 
that is,
	
P
P
P
P
P
new
if
=
>
>
r
r
E
E
E
(
)
(
)
(
)
max
min 	
(2.38)
Contraction: If the expansion does not bring any improvement, that is, if E
E
P
P
r
(
) >
(
)
max , then the 
new point is selected inside the old polyhedron according to
	
P
P
P
P
P
new
cen
cen
=
=
+
−
(
)
<
<
c
β
β
max
0
1	
(2.39)
Finally, If E
E
cP
P
(
) >
(
)
max , then the simplex must be shrunk to sink deeper into the bottom of the 
error surface. This is accomplished through a 
Reduction: All the vertices are brought closer to the best point Pmin
(
) by reducing all of its sides 
by a fixed amount
	
P
P
P
P
i
i
i
p
i
n
i
new
old
old
min
0
1
1,
,
1 and
min
(
)
(
)
(
)
=
+
−
(
)
<
<
=
+
≠
δ
δ

	
(2.40)
 
Pmax
E(Pr) < E(Pmin)
Expansion
E(Pexp) < E(Pr) ⇒ Pnew = Pexp
E(Pmax) > E(Pr) > E(Pmin)
Reflection
Pnew = Pr
E(Pr) > E(Pmax)
Contraction
Pnew = Pc
Pexp
E(Pexp) > E(Pr) ⇒ Pnew = Pr
Pmin
Pr
Pcen
Basic reflection
Pmax
Pmin
Pcen
Pr
Pc
Pr
Pmin
Pmax
Pmin
Pcen
Pr
Pcen
Pmax
FIGURE 2.19  The three basic operations through which the simplex changes its shape starting with the 
reflected point (filled triangle). The final new point is indicated by the filled square, while a hollow circle 
indicates the centroid.

98
Environmental Systems Analysis with MATLAB®
2.3.2  Termination Criterion
To terminate the search, a test for flatness is made on the polyhedron. In fact, when all the vertices 
yield nearly the same functional level within a specified tolerance ε, it is assumed that the search 
has reached the bottom of the surface, that is, it is close to the minimum. Therefore, the terminating 
criterion can be stated as
	
ε ≥
( ) −(
)


=
+
∑
1
2
1
1
n
E
E
p
i
i
np
P
Pcen
	
(2.41)
It might be suggested that the search can be stopped when the error has reached a certain value. 
Optimistically (or naively), one might suggest to stop the search when E Pmin
(
) = 0, but this value 
would never be reached in practice, because there will always be a residual error due to the noise 
affecting either the data and/or model approximations. Setting a nonzero value for E Pmin
(
) would 
not work either, because there is no clue on how to set an appropriate value. Hence, the constraint 
(2.41) emerges as the only sensible stopping criterion. To elaborate further on the behaviour of the 
search near the minimum, consider that the data actually used for the estimation are the sum of the 
‘true’ model error y t( ) and the measurement noise v t( ), as shown in Figure 2.20 for the case of a 
single output and a single parameter. Thus, the minimum of the error functional is the combination 
of two error terms, due to the model mismatch and/or to the presence of measurement noise, that is,
	
E p
E
E p
min
mod
min
(
) =
=
(
) =
perfect model & no noise
 & 
0
perfe
0
0
σ =
ct model & noise
 & 
0
model error &
E
E p
N
n
s
p
mod
min
=
≠
(
) =
−
(
)
0
2
σ
 noise
 & 
0
E
E p
E
N
n
s
p
mod
min
mod
≠
≠
(
) =
+
−
(
)





0
2
σ
	(2.42)
Figure  2.21 shows the effects of modelling and measurement errors following the scheme of 
Figure 2.20.
The bottom curve represents the ideal case of perfect model and noiseless measurements. In this 
case, the estimated value of the parameter p pmin
(
) converges to its true value ptrue and E
p
1
0
true
(
) = . 
The second curve represents the case of perfect model and noisy measurements. In this case, the 
residual error is just the noise variance, that is, E
p
N
s
2
2
min
(
) =
−
(
)
1
. In the third curve, there are 
both modelling Emod
(
) and measurement errors σ2
2
s
(
), so the minimum error will be the sum 
of both factors, that is, E
p
E
N
s
3
2
min
mod
(
) =
+
−
(
)
1
. If both errors are moderate, then the algorithm 
will still converge to the true parameter value p
p
min =
true, but if modelling and/or measurement 
Model
True model response
y(t)
v(t) ∼ N(0, σ2)
y(t)
m(t) = y(t) + v(t)
Noise-free samples
m(t) = y(t)
Noisy samples
m(t) = y(t) + v(t)
+
FIGURE 2.20  Modelling the measurement error as an additive noise affecting the output.

99
Identification of Environmental Models
errors are large, the minimum of the error functional may be shifted, so that the estimator will no 
longer converge to the true value (upper curve). An example of the effect of noise on the estimation 
is provided in Figure 2.22, where the maximum growth rate µmax
(
) of the Monod kinetics is esti-
mated with ‘clean’ and noisy data. The static sensitivity curve is affected by noise that also shifts 
the minimum variance that only coincides with the true value for very low noise.
2.3.2.1  Optimized Simplex Search
One of the weaknesses of the basic simplex search is that the polyhedron reshaping parameters 
α β γ δ
, , ,
(
) are constant throughout the search. On the other hand, the search could be improved 
by adjusting the local expansion to reach the local minimum in the current search direction, as 
shown in Figure  2.23. This improvement was introduced by setting up a unidirectional search 
(Marsili-Libelli and Castelli, 1987; Marsili-Libelli, 1992) based on the Fibonacci interval elimina-
tion (Himmelblau, 1972). This approach results in fewer, but more effective expansions, and has 
proved particularly efficient in coping with the ‘narrow valley’ problem.
pmin  ≠ ptrue
pmin = ptrue
E4 (pmin)
E3 (ptrue)
E2 (ptrue)
E1 (ptrue)
(N − 1)s2
Emod + (N − 1)s2
E(p)
FIGURE 2.21  Effect of model and measurement error on the estimation accuracy, in the single parameter case.
0.45 0.46 0.47 0.48 0.49 0.50 0.51 0.52 0.53 0.54 0.55
0.00
0.25
0.50
0.75
1.00
1.25
1.50
1.75
2.00
2.25
2.50
0
20
40
60
80
100
120
140
160
0
2
4
6
8
10
12
Time (h)
μmax
Conc. (mg/l) 
E(μmax)
Substrate σ2 = 0
Substrate σ2 = 0.2485
Biomass   σ2 = 0
Biomass   σ2 = 0.2485
σ2 = 0.2485
σ2 = 0.0543
σ2 = 0.0
σ2 = 0.0147
σ2 = 0.1210
(a)
(b)
FIGURE 2.22  An example of how noisy measurement may shift the minimum of the error functional. The 
noiseless and noisy measurement are shown on the left (a), while (b) depicts the changes in the error functional 
due to the noisy measurements. If the noise is moderate, the minimum still coincides with the true parameter 
value, but it is shifted away as the noise increases.

100
Environmental Systems Analysis with MATLAB®
2.3.3  Genetic Algorithm
The other major weakness of the search algorithm is that it explores a limited range of the domain at 
any one time, so there is the risk that the polyhedron becomes trapped in a local minimum, and ter-
minates the search there if the stopping criterion (2.41) based on its flatness is met. For this reason, 
it is advisable to run a global optimization algorithm prior to the simplex search. This algorithm, 
though not as accurate as the simplex, will not be sidetracked by local minima or other undesirable 
error function features, and it will quickly find the approximate location of the global minimum. 
This information can then be used to start the flexible polyhedron algorithm.
Genetic algorithms (GAs) represent a highly efficient search procedure for the determination of 
global extremal points of multivariable functions, imitating the patterns of genetic reproduction in 
living organisms. GAs work by successive modifications of a collection (or population in genetics 
parlance) of parameter combinations in the search space, after appropriate coding and bundling 
them into numerical strings termed chromosomes. The initial, randomly chosen, set of chromosomes 
evolves through a number of operations (selection, crossover and mutation), so that subsequent 
generations produce more and more chromosomes in the neighbourhood of the global optimum, 
according to a previously defined fitness functional. Thus, GAs are the mathematical version of 
the ‘survival of the fittest’ strategy: they evolve, improving the qualities of the population towards 
a given fitness objective, and for this reason no terminating criterion such as Equation 2.41 can be 
defined. The population simply evolves until the programmed number of generations is reached, and 
the best chromosome in the last generation is assumed to be the overall best.
GAs were introduced by Goldberg (1989) and Holland (1992). A more recent interesting publi-
cation (Poli et al., 2008) can be found on the internet (http://www.gp-field-guide.org.uk) to get an 
overview of the method. GAs differ from conventional search algorithms in the following aspects:
•	 GAs work with a coding of the parameters, not the parameters themselves.
•	 GAs’ search is highly parallel, using a collection (population) of points (parameters com-
binations), not a single one, thus thoroughly covering the search region and avoiding being 
trapped into local extrema.
p2
E(p1, p2)
p1
Local minimum
Optimized expansion
FIGURE 2.23  Optimized search along the reflection line. The black line indicates the section of the E(P) 
surface that includes the search direction, along which the local minimum is reached.

101
Identification of Environmental Models
•	 GAs use probabilistic, not deterministic, transition rules to modify the initial population 
over successive generations.
•	 GAs have a high implicit parallelism, making them numerically very efficient.
Thanks to their derivative-free, highly parallel search method, GAs are highly insensitive to discon-
tinuities and irregularities in the fitness function.
2.3.3.1  Parameter Coding
This very important preliminary operation involves bundling all the parameters into a single string 
(chromosome). The most frequently used conversion transforms the real numbers into decimal 
integers corresponding to a binary coding. Having defined the range of the parameter values as 
R r
r
min
max
,
(
) and the number of bits of the base-2 integer coding β
( ), a given decimal number p is 
converted into a base-10 integer as
	
g
p
r
r
r
=
−
−
−
(
)




INT
min
max
min
2
1
β
	
(2.43)
As an example, suppose that the selected range is R = −
(
)
1 1,
, and that we are going to use β =12 bits 
for the coding. Then, the number p = 0 2345
.
 would be converted as
	
g =
−−
(
)
−−
(
)
−
(
)








=
−
(
)


INT
INT 1.2345
0 2345
1
1
1
2
1
2
4096 1
12
.


= 2528	
(2.44)
As a counterproof, let us transform the result of Equation 2.44 back into the original number. 
Inverting Equation 2.43 yields
	
p
r
r
r
g
=
+
−
(
)
−
(
)
min
max
min
2
1
β
	
(2.45)
Substituting the values of Equation 2.44
	
p = −+
−−


−
(
)
= −+
=
1
1
1
2528
4096 1
1
2 2528
4095
0 2347
(
)
.
	
(2.46)
we recover the original p, within the precision provided by the number of bits (12 in this case). 
In fact it can be seen that the last digit in Equation 2.46 is not correctly recovered. To conserve the 
n-decimal precision of the original values v
n
10
10
=
−, the equivalent binary precision v2
2
=
−β should 
use a number of digits β equal to
	
β =



= 



intsup
n
n
log
0.69314718
102
	
(2.47)
In MATLAB, the int sup is implemented by the ceil (ceiling) upper round-off operator.
Once the parameters have been converted into integers, they are organized in chromosomes by 
arranging them into a single string. In this operation, the boundaries among individual parameters 
are lost, and the string is considered (and processed) as a whole entity. Suppose that we want to 
code a vector of five parameters specified with a 4 decimal places precision in the range −
(
)
1 1,
. 
Then, Equation 2.47 suggests that to maintain the given precision, 14 bits are required, in fact, 
ceil(4/log10(2)) = 14. Thus, the conversion that conserves the original precision yields

102
Environmental Systems Analysis with MATLAB®
	
P = [0.2345 -0.2363 0.7867 -0.4593 0.3745]
 
⇓ 
(2.48)
	
G = [40451|25231|58523|17716|45039]
where the bars delimit the field of each parameter, but will be ignored by the GA, as G will be 
regarded as a single string.
2.3.3.2  Basic Evolutionary Mechanisms
The GA has three basic mechanisms to ‘improve’ the quality (or the ‘fitness’ in GA parlance) of the 
population, as the collection of the various chromosomes is called, all borrowed from the world 
of genetics. The optimization procedure starts from a population of randomly chosen chromo-
somes and generates successive populations, applying the operators of reproduction and ­mutation. 
Reproduction is composed of two operations: selection and crossover.
Selection stimulates the generation of offspring from the best-fitting chromosomes. Each chro-
mosome is evaluated in terms of its relative fitness, in much the same way as each point of the sim-
plex is evaluated with respect of the error functional E(P). Then, each chromosome receives a rating 
based on the ratio of its fitness to the average fitness, which determines how many offspring it is 
allowed to generate. In this way, the chromosomes with the highest fitness produce more offsprings, 
whereas those with below average fitness are destined for extinction.
Crossover consists of splitting a chromosome pair at a random location with reciprocal exchange 
of one half, thus causing a mutual flow of information between pairs. In this way, in the next gen-
eration there will be two new chromosomes with new gene combinations. Both these operations are 
illustrated in Figure 2.24.
C1
(k) 
=
Chromosome
f(x)
f(x)/ftot
favg
f(x)/favg
Offsprings
A
B
467
89
9.448
0.378
0
49.575
[A      B      C      D] → [A      B      B      D]
1.983
2
C
D
263
27.919
235.5
942
100
4
1.116
1
Total
A
B
C
D
1 offspring
1 offspring
0 offspring
2 offspring
Selection
Crossover
1
1
1
1
1 ]
[
]
[
1
0
0
0
C2
(k) 
=
1
0
1
1
1
0
1
0
1
C1
(k + 1) 
=
1
1
1
1
1 ]
[
]
[
0
0
0
1
C2
(k + 1) 
=
1
0
1
1
1
1
1
0
0
Next generation
123
13.057
0.522
1
FIGURE 2.24  Fundamental operations on chromosomes: in the selection, each individual chromosome is 
allowed to reproduce in proportion to its fitness, whereas in the reproduction, chromosome couples exchange 
genetic material, giving birth to new chromosomes. The figures in the table are just for demonstrating the 
selection method and do not refer to any example in particular.

103
Identification of Environmental Models
Mutation introduces a random gene change in a chromosome. Usually, the mutation likelihood 
is kept constant at a low value for all genes, but fitness-dependent mutation has also been proposed 
(Marsili-Libelli and Alba, 2000).
2.3.3.3  Similarity Templates
As the population evolves following the above operations, it may happen that some gene patterns are 
more successful than other, and should therefore be preserved, or even privileged, in their propa-
gation. These patterns are called similarity templates or schema, and are defined, for example, as
	
H = [1  0  1  *  1  *  1  *]	
(2.49)
where the symbol ‘*’ indicates a ‘don’t care’ gene, meaning that it may take any value, whereas the 
other genes are to be preserved, and therefore should not be involved in crossover and mutation. The 
length of a schema is computed as the difference between the positions of the last and the first fixed 
gene. Hence, in the example of Equation 2.49, the length is δ H
(
) =
−=
7 1
6. Longer schemes are 
more difficult to preserve because they are more likely to be disrupted by crossover. On the other 
hand, the length is a measure of the scheme importance.
Goldberg (1989) and Holland (1992) have demonstrated how schema evolve through successive 
generations. Let m(H, k) be the number of chromosomes with a given template H at the kth genera-
tion. Then, its number at the next generation will be
	
m H k
m H k f H
f
f
N
fi
i
N
,
,
+
(
) =
(
) (
)
=
=∑
1
1
1
where
	
(2.50)
and f  is the mean fitness of the population at the kth generation. Equation 2.50 shows that schema with 
fitness above the average will expand in the next generation, whereas schema with fitness below the 
average will produce fewer and fewer offspring in successive generations. The propagation Equation 
2.50 can be rewritten, considering a schema H that is above the average by an amount c f
⋅ as
	
m H k
m H k f
c f
f
c
m H k
,
,
,
+
(
) =
(
)
+ ⋅
=
+
(
)⋅
(
)
1
1
	
(2.51)
Considering the evolution of the population from the start k =
(
)
0  yields
	
m H t
m H
c
k
,
,
(
) =
(
)⋅
+
(
)
0
1
	
(2.52)
which means that above-average schema increase exponentially over the generations, whereas 
underperformers disappear at the same rate. The problem with long schema is their possible break-
down due to crossover, thus losing the distinctive features embedded in their pattern. For this rea-
son, attention is focused on short templates, or building blocks, which are less likely to be disrupted 
by crossover. The previous fundamental theorem can be viewed in terms of building blocks, mean-
ing that a schema is a collection of many short similarity templates that propagate independently 
and exponentially over generations, depending on their fitness.
A schema may be disrupted by crossover, and its robustness depends on its length, with long 
schema being more likely to succumb to crossover. The probability that a schema of length δ in a 
chromosome of  genes is cut across is given by
	
p
H
δ
δ
= (
)
−

1 	
(2.53)

104
Environmental Systems Analysis with MATLAB®
so its survival will be
	
p
p
H
s
d
= −
= −
−
1
1
1
δ(
)

	
(2.54)
If a random crossover occurs inside the schema with probability pc, then the survival probability 
becomes
	
p
p
H
s
c
≥−
⋅
−
1
1
δ(
)

	
(2.55)
Assuming that selection and crossover are independent random processes, then the probability that 
a schema survives in the next generation is given by the combination of the two terms (2.50) and 
(2.55). If the effect of mutation is also added, assuming that it can change only one gene at any one 
time with probability pm 1, the global dynamics of the schema is given by
	
m H k
m H k
f H
f
p
H
c
(
,
)
(
, )
(
)
+
≥
−
⋅(
)
−
1
1
1
reproduction
survival
crosso
δ

ver
survival
mutation
survival
−
⋅(
)










p
H
m δ
	
(2.56)
2.3.3.4  GA in MATLAB
The MATLAB Optimization Toolbox provides an implementation of the GA with the solver named ga. 
Its syntax is similar to the syntax of the other optimization functions implemented in the toolbox, and its 
complete form is
	
[
]
(
P,fval,exitflag  
= ga errorfcn,np,A,b,Aeq,beq,LB,UB,@nonlccon,options)
	
(2.57)
The solver ga returns the np-dimensional solution P, together with the value fval of the error func-
tional E P( ), at the solution P, and the flag exitflag indicates the exit conditions. As to the input 
parameters, the first one calls the error functional, defined as either a MATLAB function file or an 
anonymous function, using the function handler ‘@’. In the latter case, please refer to the MATLAB 
help for its definition. The second input np is the dimension of the parameter vector P. If an uncon-
strained optimization is performed, all the other input parameters should be set as empty quantities 
‘[]’. In the case of constrained optimization, the parameters A and b define the linear inequalities 
A × P ≤ b, whereas Aeq and beq defined the linear equalities Aeq x P = beq, with the vectors LB 
and UB representing respectively the lower and upper bounds for the solution LB≤P≤UB.
The last input, options, is a structure that includes all the solver settings, such as the maxi-
mum number of generations (‘generations’) or the maximum duration of the optimiza-
tion process (‘TimeLimit’). The creation of the initial population can also be defined here 
(CreationFcn), together with the number and the type of the populations (PopulationSize 
and PopulationType), the selection of the fittest individuals (SelectionFcn) and the method 
used for the mutations (MutationFcn).
The CreationFcn option generates the initial population. Setting it to ‘uniform’ creates an 
initial random population with uniform distribution, whereas ‘feasible population’ defines 
an initial well-distributed population that satisfies all the constraints. Choosing ‘custom’, a cus-
tomized generation method can be defined with the data type indicated in PopulationType. 
This option is used to set the data type of P, which can be either ‘doubleVector’ for real 

105
Identification of Environmental Models
variables ‘bitString’ if they are bit strings or ‘custom’ if they are user defined, in which case 
the user must specify the creation, mutation and crossover functions. If the PopulationType 
option is set to ‘bitString’ or ‘custom’, linear and nonlinear constraints cannot be specified. 
The PopulationSize option defines the number of chromosomes of which the population is 
composed. A large population means a more accurate search of the solution with a more accurate 
exploration of the domain, but, of course, slows down the computation. For each option, the toolbox 
offers a set of pre-defined methods, but it is also possible to include user-defined methods. All these 
specifications can be created using the gaoptimset prior to the actual optimization. More details 
of the ga solver can be found in the MATLAB Help.
2.3.4  Performance Assessment of the Combined Estimation 
Methods Applied to the Monod Kinetics
The combined performance of the above search algorithms is now tested on the Monod kinetics, 
assumed as our benchmark. Though we have already studied the shape of the error functional and 
ruled out the existence of local minima, at least in the region of interest, nevertheless, starting the 
simplex search from a good point would surely expedite the procedure. A good test for any estima-
tion algorithm is to generate data by simulating the model with known parameters and use them 
as experimental data. If the algorithm is correct, the estimated parameters should coincide, within 
inevitable round-off errors, with the original parameters used to generate the data.
We start the estimation by generating a population of parameters, and use a GA to explore the 
domain. After a certain number of generations, the GA will indicate the location of the minimum 
with a precision depending on the size of the population (N) and the number of generation. At this 
stage, we do not need to set very stringent requirements, as the main objective is to avoid pitfalls into 
which the simplex may fall, such as local minima. Consequently, when the GA obtains a rough esti-
mate of the minimum, we can use this to initialize the simplex, which will provide more precision.
Figure 2.25 shows the two phases of the estimation of the two main (and most troublesome) 
parameters in the Monod kinetics. In the first phase, illustrated in Figure 2.25a, a GA with a popu-
lation of 30 chromosomes selects the region around the minimum, and its best chromosome after 
20 iterations is µmax =
=
(
)
.
,
.
0 4587
26 8417
Ks
. In Figure 2.25b, the simplex algorithm, initialized 
with the GA result, reaches the exact parameter values. Notice that the search is predominantly 
concentrated along the valley bottom.
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
1.1
1.2
10
15
20
25
30
35
40
45
50
55
60
Ks
Ks
Initial population
Final population
Best GA result
Ks = 26.8417
μmax = 0.4587
μmax
μmax
True minimum
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
1.1
1.2
10
15
20
25
30
35
40
45
50
55
60
True minimum
Search main direction
along the valley bottom
Estimated
minimum
(a)
(b)
FIGURE 2.25  Estimation of the parameter couple (μmax,Ks). In (a), the GA explores the domain with a 
population of 30 chromosomes. This preliminary phase ends after the prescribed number of generations. At 
that time most of the points (solid dots) are closer to the minimum than the initial population (hollow circles). 
In (b), the best chromosome is selected as the starter for the simplex, which reaches the true parameters by 
exploring predominantly along the valley bottom.

106
Environmental Systems Analysis with MATLAB®
A full estimation (parameters plus initial conditions), shown in Figure 2.26, requires consider-
ably more iterations, and the decrease of the error functional (b) is marked by several plateaus, 
where the algorithm seems to make little progress. These are the phases when a new search direc-
tion is tested by the optimized expansion sub-algorithm of Section 2.3.2.1.
In the case of noisy data, shown in Figure 2.27a, the error functional is raised by an amount 
equal to the total measurement variance, provided that there are no modelling errors, as shown 
in Figure 2.21. As Figure 2.27b shows, the minimum of the error functional (Emin) equals the 
total noise variance on the data, while it retains its smoothness thanks to its averaging proper-
ties. Thus,
	
E
N
S
S
X
X
E
k
k
k
N
k
k
k
N
P
P
( ) =
−
−
(
) +
−
(
)








→
( )
=
=
∑
∑
1
1
2
1
2
1
exp
exp
min
≈≈
+
σ
σ
S
X
2
2	
(2.58)
However, numerical inaccuracies may creep into the computation of the error functional, whose 
surface may become ‘ripply’, as shown in Figure 2.28. The simplex may be trapped inside its 
many tiny local minima, if its size is too small as a result of many consecutive contractions and/or 
reductions.
Figure 2.29b shows the more elaborate search pattern of the simplex in finding the minimum, 
ending the exploration near the true parameters in spite of the noise affecting the data, Figure 2.29c, 
which is more evident in the inset (d).
N
k = 1
E = 1012 Σ (Sk − Sk
exp)
2 + (Xk − Xk
exp)
2
Iterations
Simplex search summary
Number of reflections: 110
Number of expansions: 59
Number of optimized expansions: 27
Number of contractions: 874
Number of reductions: 0
Estimated parameters
Mu = 0.500148
Ks = 30.0103
Y = 0.499996
bh = 0.0299994
So = 9.99998
Xo = 0.0999869
(a) 
(b) 
0
500
1000
1500
2000
2500
0
20
40
60
80
100
0
2
4
6
8
10
1010
105
100
1015
Time (h)
Concentration (mg/l)
Substrate
Biomass
(c)
0.2
50
45
40
35
30
25
20
15
10
0.3
0.4
0.5
0.6
0.7
0.8
μmax = 0.5 per h
Ks = 30 mg/l
Y = 0.5
bh = 0.03 per h 
So = 10 mg/l
Ks = (mg/l)
μmax (per h)
Xo = 0.1 mg/l
True parameters
FIGURE 2.26  Full estimation of the Monod kinetics, including the initial conditions, with noise-free 
data (a). The decrease of the error functional (b) is uneven and very slow in the final part. In (c), the search 
progress is shown in the (µmax, Ks) subspace, terminating almost at the true values (hollow diamond). Notice 
the privileged search direction along the valley bottom.

107
Identification of Environmental Models
2.3.5  MATLAB Software Organization
We now turn our attention to the software implementation of the estimation algorithm. Figure 2.30 
shows how the various modules are organized. In addition to the main script, there are two func-
tions (simplex and error functions) and the Simulink® model. The main script specifies the nature 
of the problem (experimental data, model definition, simplex options, etc.). It also defines the global 
variables that will be made visible to the error function, and then passed on to the Simulink model. 
In fact, global variables, defined in a script, are normally available to the called Simulink model 
0
10
(a)
(b)
20
30
40
50
60
70
80
90
100
−4
−2
0
2
4
6
8
10
12
Time (h)
Concentration (mg/l)
Substrate
Biomass
Noisy substrate
Noisy biomass
σ2 = 1.8236
s
σ2 = 1.9272
X
40
35
30
25
20
E
15
10
5
0
4540 35 30
Ks
20 15
0.3
0.4
0.5
0.6
25
μmax
Emin = σ2
 + σ2
 = 3.7350
X
S
FIGURE 2.27  When noisy measurements are used, as in (a), the minimum (Emin) of the error functional E 
equals the total measurement variance, as shown in (b), provided that there is no inherent model error. Due to 
the averaging property of E, the functional retains its smoothness, regardless of the noisy measurements. This 
result is in agreement with Figures 2.12 and 2.22b.
40
30
20
10
E
0
45
40
Ks
μmax
35
25
20
0.3
0.4
0.5
0.6
15
30
FIGURE 2.28  Numerical inaccuracies in the computation of the error functional may produce a ripply sur-
face with many small local minima, in which the search algorithm can be trapped.

108
Environmental Systems Analysis with MATLAB®
through the common memory area called Workspace, but in this case the model is called by a func-
tion, which does not possess the prerogatives to publish its internal variables to the Workspace. 
Hence, the variables created in the error function would not be visible by the Simulink, and thus 
the need to define them as global. All the involved MATLAB modules (main and functions) should 
have the same global declaration, with the same variable names, before any executable statement. 
As Figure 2.30 shows, the main script loads the experimental data, defines the model and the sim-
plex options, and then invokes the simplex function that supervises the optimization and releases 
control back to the main script after the search is terminated, because either the minimum has been 
reached (within the prescribed precision) or the maximum number of iterations has been exceeded. 
There may be a downstream processing section, where results are displayed and the estimates are 
validated, organized as shown in Box 2.1.
2.3.5.1  Organization of the Error Function
This function plays a crucial role in the estimation and should be specified by the user because it 
unbundles and passes the parameter to the Simulink model while supervising the computation of the 
actual estimation error. The basic structure of the pertinent MATLAB function is listed in Box 2.2.
Its salient features are the following: unbundling of the parameter vector to pass the real param-
eter names to the Simulink model, launching the simulation, synchronizing the simulation outputs 
with the experimental sampling times and computing the error functional.
Two aspects deserve further comment: the presence of the global statement and the synchroni-
zation. As to the first, a MATLAB function does not possess the prerogative to pass variables to 
another function (in this case a Simulink model), but the global declaration solves this parameter 
passing problem. The other aspect is synchronization, which requires the model outputs to be avail-
able at exactly the same instants as the experimental samples. This aspect is further clarified in 
Figure 2.31, showing how the model outputs are interpolated to be evaluated at the same sampling 
times as the experimental data.
0
20
40
60
80
100
0
2
4
6
8
10
12
Time (h)
μmax
Conc. mg(l)
Ks
0.2
0.3
0.4
0.5
0.6
0.7
10
15
20
25
30
35
40
True parameters
Estimated parameters
Starting parameters
Simplex search summary
Number of reflections: 202
Number of expansions: 94
Number of optimized expansions: 80
Number of contractions: 458
Number of reductions: 0
Estimated parameters
Mu = 0.485149
Ks = 29.0469
Y = 0.500823
bh = 0.0300709
Estimated initial conditions
So = 10.0102
Xo = 0.102525
(a)
(b)
(c)
(d)
FIGURE 2.29  A full Monod kinetics calibration, including all the four parameters and the initial conditions, 
using noisy data. The calibration results are summarized in (a), whereas in (b) the arrows show the progress 
of the search path. The noisy data are shown in (c) with the inset (d) providing a magnified view of the noise 
near the maximum growth time.

109
Identification of Environmental Models
BOX 2.1  BASIC STRUCTURE OF THE MAIN SCRIPT FOR THE 
ESTIMATION OF THE MONOD KINETIC PARAMETERS
There are three main segments to be considered: loading the experimental data, 
performing the optimization and the optional downstream processing of the results.
% Global parameters definition
global Mu Ks Kd Y So Xo
% Load experimental data
%
g=uigetfile(‘Mono*.mat’,‘Load calibration data’);
eval([‘load’ g]);
%
% Setting optimization options
options(1)=1;     % Print intermediate results
options(2)=0.01;  % Error tolerance on parameters
options(3)=0.01;  % Simplex flatness tolerance
options(14)=5000; % Maximum allowable iterations
% Optimization call
[Par_Best,options]=simplex(‘Ferr_Monod’,Par,options,[],Model_
Name,tfin,Data_exp);
ParBest=ParCal;
% Downstream processing
% ...................
• Experimental data loading
• Model deﬁnition
• Initial parameters definition
• Global variables deﬁnition
• Simplex routine call
Simplex
Error function
Simulation control
Data synchronization
E(P) evaluation
Simulink model
runs the simulation
Model definition
Experimental data
Initial parameters
Simplex options
Simulation
control
Ptest
Workspace
Global
variables
Iteration
Main script
Functions
E(Ptest)
Ptest
E(Ptest)
FIGURE 2.30  Software organization for the simplex search. The variables declared as ‘global’ are made 
available to the Simulink model through the calling error function.

110
Environmental Systems Analysis with MATLAB®
2.4  VALIDATION OF THE ESTIMATES
Having gone through the previous computational tasks, we are only halfway to completing a serious 
parameter estimation job. We now must assess the results in terms of their credibility and reliability. 
To this end, two complementary approaches are possible, and both should be pursued, in the sense 
that each provides one kind of assessment, which the other cannot yield. Figure 2.32 provides an 
overview of the two approaches, with various procedures to validate the identification.
BOX 2.2  BASIC STRUCTURE OF THE MATLAB FUNCTION 
COMPUTING THE ERROR FUNCTIONAL
Possible plotting instructions have been omitted for clarity.
function E = Ferr_Monod(Par,Model_Name,tfin,Data_exp)
global Mu Ks Y bh So Xo
% Unbundle parameters
Ks=Par(1); Mu=Par(2); Y=Par(3); Kd=Par(4); 
% Launch simulation
[t,x,y]=sim(Model_Name,tfin);
% Synchronize data and simulations
% Mono are the simulation outputs
% Mono(:,1) is the Substrate
% Mono(:,2) is the Biomass
% Data_exp(:,1) contains the experimental sampling times
% Data_exp(:,2) contains the experimental samples
% The simulation output is interpolated
% at the experimental data sampling times Data_exp(:,1)
ys1=interp1(Mono(:,1),Mono(:,2),Data_exp(:,1));
ys2=interp1(Mono(:,1),Mono(:,3),Data_exp(:,1));
% Compute the error functional
s1=sum((Data_sperim(:,2)-ys1).^2); % Substrate error
s2=sum((Data_sperim(:,3)-ys2).^2); % Biomass error
E=s1+s2;
Data and simulation
output are synchronized
t
t1
t2
t3
t4
Experimental data
Native simulation output
Synchronized simulation output 
Sampling times
ε1
ε2
ε3
ε4
FIGURE 2.31  Synchronizing the simulation output to the experimental data is crucial for the correct evalua-
tion of the error functional. Normally, simulation steps are decided by Simulink to comply with the integration 
error specifications, but for a correct computation of the errors ε( ) between data and model outputs the latter 
must be evaluated at the sampling instants by interpolation.

111
Identification of Environmental Models
These tests can be divided into two main categories: non-parametric and parametric. In the first 
category, the focus is on the agreement between the data and the model response, whereas in the 
second, the parameter values are assessed per se, no matter how good the model fit is. We begin 
with considering the first category of tests, which could be regarded as preliminary in the sense that 
if the model fails these tests, then it is unlikely to pass the second category, and its structure should 
be reconsidered. Before actually embarking on the analysis, however, it should be considered that 
validation is performed on a statistical basis, and therefore we should view the results of our analysis 
from a statistical standpoint. This requires the formulation of a hypothesis (the null hypothesis Ho), 
and its acceptance or rejection will be based on a statistical rationale. In this case, our null hypoth-
esis can be formulated as
	
Ho  we cannot rule outdata/model agreement
:
	
(2.59)
which is to say, in the typically oblique statistical jargon, that we consider our model correct if we 
cannot prove it wrong. The null hypothesis Ho is subject to two types of errors:
•	 Type I error: failing to accept a correct Ho
•	 Type II error: failing to reject a wrong Ho
Of course, we should also specify the significance level α of taking a wrong decision, that is, we 
would observe values greater than the one produced by the test only α of the time by chance. 
Normally, we set this margin of error at α = 5%. The two errors are not symmetrical, and they 
depend on the method used to test Ho. Generally, there is an ample tolerance in accepting Ho.
2.4.1  Non-Parametric Tests: Testing the Credibility of the Model Response
The purpose of these tests is to check the agreement between data and model response without 
considering the correctness of the parameter values, which will be treated in the next set of valida-
tion tools. A wide review of non-parametric methods for testing the performance of environmental 
models can be found in Bennett et al. (2013).
Variance accounted for
(VAF)
Residual analysis
Autocorrelation
(whiteness)
Gaussian
distribution
Linear regression
(F-test)
Fisher information matrix
(FIM)
Covariance matrix
Parameter conﬁdence region
Testing the credibility of
the model response
Testing the credibility of
the parameter values
Validation
of the
estimates
FIGURE 2.32  Procedures for the validation of the identified model.

112
Environmental Systems Analysis with MATLAB®
2.4.1.1  Variance Accounted For
This test is well known under several alternative names, being also referred to as Coefficient of 
Determination or Nash–Sutcliffe Model Efficiency. It is not a very strict test that compares the inner 
data variability to the model residuals, namely
	
VAF
where
model
=
−
−
(
)
−
(
)










=
∑
∑
100 1
2
2
y
y
y
y
y
k
k
k
m
k
k
m
exp
exp
 output
experimental data
mean
y
y
yk
exp
exp
=
=
(
)
	
(2.60)
According to Equation 2.60, variance accounted for (VAF) yields the percentage of data variabil-
ity explained by the model, so that the remaining part can be attributed to either noise or unmod-
elled dynamics. The numerator is the sum of squared modelling errors (residuals), whereas the 
denominator represents the fluctuations of the experimental data around their mean value. In other 
words, it tests the ability of the model to beat the squared data variability. Not a big deal indeed, 
but nevertheless it may yield a rough indication of model performance, which can be considered 
acceptable if VAF is above the 80%–90% range. Very bad models may even yield a negative VAF 
when the fraction in Equation 2.60 is greater than 1, in which case the differences between data 
and model are greater than the inner data variability, denoting a dramatic modelling failure. In any 
case, this test should not be considered exhaustive, and more accurate validation tools are required, 
as described in the following section.
2.4.1.2  Regression Line F-Test
A simple and yet effective way to check for model/data agreement is to plot the model outputs versus 
the data and see how they distribute with respect to the 1:1 line that would indicate perfect agree-
ment. It should be considered that this procedure removes the time indexing from the analysis, and 
we just test the direct correspondence of each data/model output pair, and time synchronization is 
assumed as a prerequisite. A perfect matching would result in all of the points lying exactly on the 
1:1 line, that is, the line with unit slope passing through the origin. We then reformulate our null 
hypothesis as a specific case of Equation 2.59:
	
Ho  the regression line does not significantly differ from
:
 the 
 line
1 1
:
	
(2.61)
In MATLAB, the regression line can be computed with the following procedure. First, a polyno-
mial of first degree (the regression line) is fitted to the data with the polyfit command with the 
following syntax:
	
ab = polyfit(x,y,1);	
(2.62)
where x and y are the model and data vectors and 1 is the degree of the fitted line of the form 
y
x
a
=
⋅
+
b
. Command (2.62) produces the regression line coefficients arranged in descending 
order, so that b is the slope and a the intercept. To trace the regression line on the graph, the com-
mand polyval is used
	
yr = polyval(ab,x);	
(2.63)
which computes the regressed values of the data (yr) based on the coefficients ab and the model 
outputs (x). Figure 2.33 shows the scatter diagram produced by pairing data and model outputs. 
A first rough check can be performed by computing the correlation coefficient r between the x and 
y data series:

113
Identification of Environmental Models
	
r
x
x
y
y
x
x
y
y
x
x
k
k
k
N
k
k
N
k
k
N
k
=
−
(
)
−
(
)
−
(
)
−
(
)
=
=
=
=
∑
∑
∑
1
2
1
2
1
model output
=
(
)
=
=
(
)



mean
data
mean
x
y
y
y
k
k
k
	
(2.64)
but it will soon become apparent that this indicator is of little help, because there are no statistical 
limit values against which it can be tested. A better test (Haefner, 2005) is to draw a regression line 
on the data and test its equivalence to the 1:1 line by examining the fitted line coefficients a b
,
(
). 
Thus, our null hypothesis (Ho) is that the slope of the regression line is (statistically) equal to 1 and 
its intercept is (statistically) zero simultaneously. To test this Ho, a quantity following the F-statistics 
was proposed (Haefner, 2005):
	
F
Na
a b
x
b
x
S
S
y
N
k
k
N
k
k
N
yx
yx
k
2
2
2
2
1
2
1
2
2
2
1
1
2
,
−
=
=
=
+
−
(
)
+
−
(
)
=
∑
∑
α
where
−
(
)
−
=
⋅
+
=
∑
y
N
y
b x
a
k
k
N
k
k


2
1
2
with
	
(2.65)
The denominator term Syx
2  is the residual mean squared error, equal to the difference between the 
data yk
(
) and their equivalent on the regression line y( ).
The null hypothesis Ho cannot be rejected if Equation 2.65 yields a value smaller than the 
threshold value of the F-statistics for that confidence level and degrees of freedom. The latter can 
be directly obtained with MATLAB as finv(0.95,2,N-2), meaning that we would observed 
by chance a larger value (i.e., we would reject the model) only 1 − 0.95 = 5% of the times.
Equation 2.65 is not without pitfalls, which in many cases may lead to the rejection of a good 
model (type I error). For example, if the model is very good, the denominator term Syx
2  is very 
small, producing a large F that would lead to (an incorrect) model rejection. The test also tends to 
fail when the number of data N is large, resulting in a very large first term in the numerator. A last 
warning regards the slope b, which may cause the second numerator term to change sign, depending 
a ≈ 0
Ho:
b ≈ 1
Model xi
Data yi
(xi, yi)
μy
μx
yi = a + bxi
ˆ
a
b
1:1
FIGURE 2.33  Producing a scatter diagram from pairs of data/model responses. The departure from the 
perfect agreement (1:1 line) is then statistically tested by examining the regression line coefficients (a, b).

114
Environmental Systems Analysis with MATLAB®
on b being smaller or larger than one. In the latter case, the factor b −
(
)
1  may lower the value of F, 
increasing the chance of accepting models with slope smaller than 1.
2.4.1.3  Further Regression Line Statistics
Several model quality indicators, in addition to the F-test, are reviewed by Haefner (2005) to vali-
date the model and to detect the components mainly responsible for validation failure. Among them, 
the ones based on the mean square error prediction (MSEP) can be considered
	
MSEP =
−
(
) =
−
(
) +
−
(
) +
−
(
)
∑
1
1
2
2
2
2
2
N
x
y
x
y
S
rS
r
S
k
k
k
x
y
y	
(2.66)
where: 
x and y are the mean values of the model outputs and of the data
r is the correlation coefficient
S
S
x
y
and 
 are the standard deviations
Normalizing Equation 2.66 to MSEP yields
	
1
1
2
2
2
2
=
−
(
) +
−
(
) +
−
(
)
=
+
+
x
y
S
rS
r
S
x
y
y
MSEP
MSEP
MSEP
ME
SE
NC	
(2.67)
The first term (ME) accounts for the differences between means, the second (SE) regards slope dif-
ferences, as it compares the two standard deviations through the correlation coefficient, while the 
third (NC) accounts for the effect of noise, that is, the random component of the error. Figure 2.34 
reviews some cases of success and failure in applying the F-test to the regression line, with the aid 
of the additional indicators in Equation 2.67. In case (a), a good model, coinciding with the 1:1 line, 
is correctly accepted, in spite of the masking noise with standard deviation σ = 0 4. . Of the three 
indicators, NC is the largest, indicating the presence of noise as the disturbing element. In case (b), 
a bad model (both slope and intercept are wrong) is rightly rejected, in spite of the same noise as 
before affecting the data. The ME and SE indicators show that both the intercept and the slope are 
responsible for the rejection. Cases (c) and (d) present the typical statistical errors: in (c), a type I 
error is made by rejecting a good model. This is caused by the very small term in the denominator of 
the F-statistics (Equation 2.65), where the very small residuals contribute to a large F. Conversely, 
case (d) shows the failure to reject a wrong model because of the large noise, as confirmed by the 
dominant value of the NC factor. In all cases, the correlation coefficient r of Equation 2.64 would 
yield practically no clue.
2.4.2  Analysis of the Residuals
The essence of model identification is to define the best possible model structure (or should we settle 
for ‘plausible’?) and leave out the unwanted disturbance (generally referred to as ‘noise’). In this 
quest, we strive to include all of the possible dynamics that we believe the system to possess, and to 
exclude the random fluctuations due to measurement errors or changes in the environmental condi-
tions. Because they are—by definition—random, we hope that if our model is structurally correct 
and includes all the systems dynamics, what is left out (the residuals) is just noise. Further, we 
make the assumption that the noise samples are uncorrelated and come from a normal distribution, 
although the latter assumption is fairly difficult to meet in environmental models. Thus, the task of 
separating the structural part of the system from the noise is illustrated in Figure 2.35, where the 
residuals are analysed for autocorrelation (or the lack of it), suspecting that autocorrelated residuals 
may be due to unmodelled dynamics, in which case the model structure should be reconsidered.

115
Identification of Environmental Models
(a) 
(b) 
0
10
20
30
40
0
5
10
15
20
25
30
35
40
Data
Model
F-statistics 0.2363 against a limit value of 3.2448
y = 0.0 + 1.0 . x + 0.4 . ε
r = 0.9993
ME = 0.0015
SE = 0.0107
NC = 0.9877
y = 0.0 + 1.0 . x + 0.004 . ε
r = 1.0000
ME = 0.1183
SE = 0.0545
NC = 0.8241
y = 0.1 + 0.9 . x + 4 . ε
r = 0.9115
ME = 0.0595
SE = 0.0654
NC = 0.8736
y = 0.2 + 0.9 . x + 0.4 . ε
r = 0.9994
ME = 0.7021
SE = 0.2534
NC = 0.0266
0
10
20
30
40
0
5
10
15
20
25
30
35
40
Data
Model
F-statistics 696.5901 against a limit value of 3.2448
(c)
(d)
0
10
20
30
40
0
5
10
15
20
25
30
35
40
Data
Model
F-statistics 4.0554 against a limit value of 3.2448
0
10
20
30
40
0
5
10
15
20
25
30
35
40
Data
Model
F-statistics 2.7494 against a limit value of 3.2448
FIGURE 2.34  Merits and liabilities of applying the F-statistics to the regression line. In (a), a good model 
is accepted in spite of the masking noise ε( ). In (b), a bad model (both the intercept and slope are wrong) is 
rejected. In (c), an error is made by rejecting a good model (too good in fact), whereas in (d) a bad model is 
accepted because of the large masking noise.
Data
Model
Autocorrelation
test
White
(uncorrelated)
Coloured
(correlated)
k∑ε2
k
−
+
Residuals
Normality test
Rethink the
model structure
FIGURE 2.35  Road map in the analysis of the residuals: autocorrelated residuals may suggest an inadequate 
model structure and should lead to a reassessment of its structure.

116
Environmental Systems Analysis with MATLAB®
2.4.2.1  Autocorrelation Test
This subject is amply treated in the major stochastic systems identification literature (Ljung, 1999; 
Box et al., 2008), so it will be only briefly recalled here. The autocorrelogram of a time series is 
obtained by multiplying its elements by their replicas shifted by k places (lags), as illustrated in 
Figure 2.36, and normalizing by their variance:
	
ρ
ε ε
ε
k
i
i k
i
N k
i
i
N
=
⋅
+
=
−
=
∑
∑
1
2
1
	
(2.68)
The statistically zero confidence band can be computed as ±
−
1 96
.
N k , where N is the number of samples 
in the time series. As Figure 2.36 shows, the confidence band gradually widens with k, because as 
the lag increases, the number of samples contributing to the autocorrelation decreases, and hence 
the tolerance increases. If all the elements of the autocorrelogram computed by Equation 2.68 are 
inside the zero confidence band, then the residuals are uncorrelated and we can consider them as 
purely random (or white) noise. Conversely, autocorrelated residuals may arise from unmodelled 
dynamics, which should lead to a revision of the model structure.
2.4.2.2  Normality Test
The second test that we may want to perform on the residuals is their normality, which reinforces 
the hypothesis that they are truly random errors coming from a normal distribution, unless we 
have reasons to believe that the residuals may have been generated by some other distribution 
(e.g., lognormal, Weibull, etc.). Generally, this check is made by comparing the cumulative dis-
tribution obtained from the histogram of the residuals with a known distribution. The one-sample 
Kolmogorov–Smirnov (KS) test (Massey, 1951; Marsaglia et al., 2003) compares the samples of a 
data vector x with a standard normal distribution y, and the null hypothesis H0 is that they originate 
1.0
0.5
0.0
−0.5
k
Non-zero
autocorrelation
samples
ρk
ρk
Statistically zero autocorrelation band
1.0
0.5
0.0
−0.5
k
Statistically zero autocorrelation band
N − k
± 1.96
N − k
± 1.96
Coloured noise
White noise
k
[ε1       ε2        ε3        …     εN]
[ε1       ε2        ε3        …      εN]
[ε1       ε2        ε3        …      εN]
[ε1       ε2        ε3        …      εN]
ρk =
i = 1
N
∑ε2 → σ2 
i
i = 1
N − k
∑εi.εi + k
σ2
wk =
i = 1
N − k
∑εi.εi + k
FIGURE 2.36  Definition of autocorrelation of a time series. Each element of the autocorrelogram is obtained 
by multiplying the samples of the series with their replica shifted by k places and normalized by the samples 
variance (k = 0). Below, a sample autocorrelogram is shown indicating some correlation (the one-lag sample 
is outside the statistically zero band).

117
Identification of Environmental Models
from the same standard distribution. After computing the cumulative distributions W x
1( ) and W
y
2( ), 
the test statistics consider the maximum difference max W x
W
y
1
2
( ) −
( )
(
) and compares this with 
the maximum allowable difference. The MATLAB function for this test is
	
h = kstest(x,y,alpha)	
(2.69)
where the output h is 1 if the test rejects the null hypothesis at the alpha significance level, or 
0 otherwise. The interesting aspect of the KS test is that the comparative distribution can be speci-
fied by the user, often using the normal distribution fitted to the data. As an alternative, the Lilliefors 
test (Lilliefors, 1967) can be used. In this test, the null hypothesis is that the data vector x comes 
from a normal distribution. The MATLAB syntax is
	
h = lillietest(x,alpha)	
(2.70)
and, as with the KS test, the answer is 1 if the null hypothesis is rejected at the alpha significance 
level. Unlike the KS test, in which the null distribution must be completely specified, this test can be 
used when the null distribution must be estimated. The Lilliefors test applies the same KS statistics 
to max W x
W x
( ) −
( )
(
)

, where W x( ) is the empirical cumulative distribution obtained from the his-
togram of the x data vector and W x
( ) is the normal distribution fitted to the same data. Figure 2.37 
shows the steps for applying the Lilliefors test: first, the histogram is constructed by counting the 
number of occurrences in a particular range of values. These frequencies form the histogram, which 
is then fitted with a normal distribution. The Lilliefors test is then computed by applying the KS 
statistics to the maximum difference between the cumulative distributions.
The example shown in Box 2.3 performs a Lilliefors test on two sets of numbers, the first coming 
from a normal distribution, produced by the internal MATLAB random number generator (randn), 
and the second generated by a uniform random number generator (rand). In both cases, the test 
correctly detects the agreement or disagreement with the normal distribution.
−1.0
−0.5
0.0
0.5
1.0
0.0 0.2 0.4 0.6 0.8 1.0
20
40
60
80
100
120
140
−0.5
−1.0
0.0
0.5
1.0
Sample
Data
−1.0
−0.5
0.5
1.0
0.0
0.2 0.4 0.6 0.8
Cum. Prob.
Count the
number of data
falling in a
given interval
(bin)
Compare the
cumulative
distribution with
that obtained by
a fitted known
distribution
Construct the
histogram as a
frequency count
Fit a normal
distribution to
the histogram
Obtain the
cumulative
distribution
by summing
the frequency
counts
W(x)
W(x)
ˆ
Data
Lilliefors test
ˆ
x
max (|W(x)−W(x)|)
FIGURE 2.37  Histogram construction and comparison of the empirical and fitted cumulative distributions 
for the Lilliefors test.

118
Environmental Systems Analysis with MATLAB®
2.4.3  Parametric Tests: Assessing the Credibility of the Parameter Values
Now, we turn our attention to the second series of tests indicated in Figure 2.32 and challenge the 
validity of the estimated parameters. Unlike the examples presented so far, where the data were 
generated by a model with known parameters, and the game was to guess their values having the 
‘true’ values as a yardstick, in real life there is no such thing as ‘real’ parameters, so we have no way 
of comparing our results with a set of reference values. All we can hope for is one or more indica-
tors that tell us that the estimated values are ‘plausible’. This leads to the definition of a ‘confidence 
region’, within which we cannot reject the null hypothesis Ho stating that the estimated parameters 
coincide with the ‘real’ ones.
BOX 2.3  AN EXAMPLE OF LILLIEFORS TEST FOR A DATA VECTOR OF 
10,000 NUMBERS COMING FROM A NORMAL OR UNIFORM DISTRIBUTION
Both distributions are correctly detected by the test.
% Generate random
% numbers with a 
% Normal distribution
X=randn(10000,1);
%Construct the histogram
hist(X)
%Apply the Lilliefors test
lillietest(X)
ans = 0 (Normality accepted)
% Generate random
% numbers with a 
% uniform distribution
X=rand(10000,1);
%Construct the histogram
hist(X)
%Apply the Lilliefors test
lillietest(X)
ans = 1 (Normality rejected)

119
Identification of Environmental Models
2.4.3.1  Exact and Approximate Confidence Regions
Confidence regions are of primary importance because they provide a way to assess the accuracy of 
the parameter estimates P. They represent the set of parameter values producing a model response 
within prescribed statistical boundaries. Because the error functional described by Equation 2.3 or 
2.4 represents the ‘closeness’ of the experimental data to the fitted model, it is justifiable to base 
the confidence region on the contours of E P
( ), so that any level E
c E
P
( ) =
⋅( )
P corresponds to a 
differing degree of confidence, depending on the increment c, for which it is difficult to specify a 
statistically significant value unless N is large, in which case ∆E
E
E
=
( ) −
( )
P
P has the necessary 
χ2 asymptotic properties to apply the F-statistics (Seber and Wild, 1989). In that case, the confidence 
region of the estimated parameters P can be related to the F-statistics by the equality
	
∆E
E
E
E
n
N
n F
p
p
n
N n
p
p
=
( ) −
( ) =
( )
−
−
P
P
P


,
α
	
(2.71)
For parameters satisfying Equation 2.71, the null hypothesis cannot be rejected at the α confidence 
level. Figure 2.38 illustrates how the level increase ΔE projects the confidence region onto the 
parameter space.
The numerical difficulty in estimating the exact confidence regions has been considered by 
Vanrolleghem and Keesman (1996) and Dochain and Vanrolleghem (2001) who, on the basis of a 
previous work by Lobry and Flandrois (1991), proposed a successive contraction method to find the 
value of E P
( ) corresponding to the prescribed value of the F-statistics. In the following, an approxi-
mate method for computing the confidence region will be discussed.
The other important aspect of the confidence region is its relationship with the parameter covari-
ance matrix. In the linear model case,
	
y = X P
y
X
P
⋅
+
∈
∈
∈
∈
×
×
×
×
ε
ε




n
n n
n
n
p
p
1
1
1
;
;
;
	
(2.72)
where εN 0
2
, Iσ
(
) is a random noise with normal distribution, the parameters P and the covari-
ance matrix C can be directly estimated by the normal equations (Ljung, 1999)
p1
p2
E(P)
ΔE
E(P)ˆ
60
40
20
−20
−40
−60
−100
−50
0
50
100
0
FIGURE 2.38  A 3D view of the exact parameter confidence region, represented by the shaded area in the 
(p1, p2) plane, defined by a statistically significant increase ΔE of the error functional defined by Equation 2.71.

120
Environmental Systems Analysis with MATLAB®
	
P=
⋅
(
)
⋅
⋅
=
⋅
(
)



−
−
X
X
X
y
C
X
X
T
T
T
1
2
1
σ
	
(2.73)
In addition to providing the link between measurement uncertainty and estimated parameters 
accuracy, the covariance matrix C defines the parameter confidence region. This region, often 
referred to as confidence ellipsoid, can be defined as the region in the np parameter space that 
would contain the ‘real’ parameters for a given error margin, for example, 100(1 − α)%. For param-
eter values inside this region we cannot reject the null hypothesis that the estimated values are not 
significantly different from the ‘real’ ones. For this reason, the confidence ellipsoid is defined in 
terms of the F-statistics (Bates and Watts, 1988), with the covariance matrix C provided by the 
second Equation 2.73,
	
P
P
P
C
P
P
:
1
−
(
)
−
(
) ≤
{
}
−
−


T
p
n
N n
n F p
p
,
α
	
(2.74)
The F-statistics has a confidence level of 100(1 − α)% with np parameters and N − np degrees of 
freedom. Unfortunately, for nonlinear models, there is no such direct method as Equation 2.73 to 
compute the parameter covariance matrix C, but there are two differing ways to approximate the 
matrix C, by extending the results of the linear theory, or through a second-order expansion of the 
error functional E P
( ). However, first we must introduce a significant quantity that plays a central 
role in the parameter accuracy assessment: the FIM.
2.4.3.2  The FIM
This matrix, which plays a fundamental role in model identification and represents the link with 
the parameter sensitivity of Section 2.2, can be derived by perturbing the error functional in the 
neighbourhood of the optimal parameters P as follows:
	
E
t
t
T
k
N
k
t
t
k
k
k
k
P
P
P



+
(
) =
+
(
)−


+
(
)−


=∑
δ
δ
δ
P
y
P
y
Q
y
P
y
exp
exp
1
	
(2.75)
The output variation produced by the parameter perturbation P
P


→
+δP can be approximated by 
a first-order expansion
	
y
y
t
t
k
k
k
P
P


+
(
) ≈
( ) + ∂
∂



×
δ
δ
P
y P
P
P
( )
	
(2.76)
Substituting Equation 2.76 into Equation 2.75 yields
	
E
E
T
t
T
k
N
k
t
k
k
P
P


+
(
) ≅
( )+
∂
∂




∂
∂












=∑
δ
δ
P
P
y
P
Q
y
P
1
δP	
(2.77)
If we want to increase the accuracy of the error functional, we should maximize the quantity in 
brackets in Equation 2.77, which represents the sensitivity of the error functional in the neighbour-
hood of the minimum P. This quantity is referred to as the FIM,
	
FIM =
∂
∂




∂
∂




=∑
y
P
Q
y
P
t
T
k
N
k
t
k
k
1
	
(2.78)

121
Identification of Environmental Models
which is a function of both the model sensitivity ∂
∂
(
)
y
P
tk
 and the measurement noise through the 
matrix Qk. It will be shown in the next section that this matrix can be used to approximate the param-
eter covariance matrix C and to plan the most favourable conditions for data sampling in such a way 
to maximize the estimation accuracy. It is clear from Equation 2.77 that the sensitivity of the error 
functional can be increased by making the FIM term as large as possible. While the Qk matrix is deter-
mined by the measurement conditions and equipment, the sensitivity term can be manipulated to some 
extent by choosing the sampling times tk to render the FIM matrix as large as possible. In the following, 
several criteria for maximizing the FIM will be illustrated, constituting a whole theory of experiment 
planning known as optimal experiment design (Fedorov, 1972; Dochain and Vanrolleghem, 2001).
A simple example will now show how to compute the FIM in practice. Consider a model with one 
output, two parameters, and three sampling times t t t
1
2
3
, ,
(
). Then, assuming a constant measurement 
variance s2, the FIM definition of Equation 2.78 yields
	
FIM =
=
1
1
2
2
s
s
∂
∂
∂
∂












× ∂
∂
∂
∂



+
∂
∂
∂
y
p
y
p
y
p
y
p
y
p
y
t
t
t
t
t
t
1
1
1
1
2
1
2
1
2
1
2
2
2
3
3
2
1
2
1
2
∂












× ∂
∂
∂
∂



+
∂
∂
∂
∂





p
y
p
y
p
y
p
y
p
t
t
t
t







× ∂
∂
∂
∂
















∂
∂




∂
y
p
y
p
y
p
y
t
t
t
t
3
3
1
1
2
1
2
1
1
1
1
1
1
2
2
1
2
2
∂
∂
∂
∂
∂
∂
∂
∂
∂


















+
∂
p
y
p
y
p
y
p
y
p
y
t
t
t
t
t2
2
2
2
2
2
1
2
1
2
2
1
2
2
∂




∂
∂
∂
∂
∂
∂
∂
∂
∂
∂








p
y
p
y
p
y
p
y
p
y
p
t
t
t
t
t










+
∂
∂




∂
∂
∂
∂
∂
∂
∂
∂
∂
y
p
y
p
y
p
y
p
y
p
y
t
t
t
t
t
t
3
3
3
3
3
3
1
2
1
2
2
1
∂
































p2
2
	(2.79)
which can be generalized to the case of k measurements,
	
FIM =
∂
∂




∂
∂
∂
∂
∂
∂
∂
∂
∂
∑
∑
∑
1
2
1
2
1
2
2
1
s
y
p
y
p
y
p
y
p
y
p
y
t
k
t
t
k
t
t
k
t
k
k
k
k
k
k
p
s
S
S S
S S
k
k
p
k
k
p
k
p
k
k
p
∂


















=
(
)
∑
∑
∑
2
2
2
2
1
1
1
2
1
k
p
k
k
p
k
S
2
2
2
∑
∑(
)












	
(2.80)
Figure 2.39 shows the synchronization between output sampling points and sensitivity computation 
to implement the numerical evaluation of the FIM according to Equation 2.80.
yt
S
y
p
t
t
Output samples
Sensitivity samples
FIGURE 2.39  Output and sensitivity sampling points for the practical FIM computation.

122
Environmental Systems Analysis with MATLAB®
2.4.3.3  Approximations of the Covariance Matrix
For nonlinear models, no equivalent exists for the normal Equation 2.73, and therefore there is no 
exact method for computing the covariance matrix, but there are two possible approximations. The 
first one (Ljung, 1999; Petersen, 2000; Dochain and Vanrolleghem, 2001) approximates C with the 
inverse of the FIM:
	
C
y
P
y
P
FIM =
=
∂
∂




∂
∂












−
=
−
∑
FIM 1
2
1
1
s
t
T
t
k
N
k
k
	
(2.81)
As an alternative, C can be approximated by a second-order expansion of the objective error func-
tion in the neighbourhood of the minimum E P( ) involving the Hessian matrix (Seber and Wild, 
1989; Press et al., 1986; Marsili-Libelli, 1992; Marsili-Libelli et al., 2003; Checchi and Marsili-
Libelli, 2005)
	
C
H
H
P P
H
T
s
E
=
∂
∂∂
−
2 2
2
1
where
=
P
	
(2.82)
Specific numerical algorithms for computing these approximations exist (Press et al., 1986; Marsili-
Libelli et al., 2003; De Pauw, 2005). Now, we can go back to the approximate definitions of the 
parameter confidence regions, which can be defined as follows:
	
Jacobian Conf. Reg.
H
FIM
P
P
C
P
:
,
exp
−
(
)
−
(
) ≤
{
}
−
−
P
P


T
p
n
N
n
n F p
p
1
α
essian Conf. Reg.
P
P
C
P
:
,
exp
−
(
)
−
(
) ≤
{
}
−
−
P
P


T
H
p
n
N
n
n F p
p
1
α
	
(2.83)
with the approximate covariance matrices CFIM and CH computed with Equations 2.81 and 2.82, 
respectively. Each Equation 2.83 is a quadratic function representing the approximate confidence 
ellipsoid in the np parameter space. This can be shown by diagonalizing the equivalent covariance 
matrix, that is, C
U U
−=
1
Λ
T, where U is the matrix of eigenvectors of C−1, and Λ =
…
(
)
diag λ λ
λ
1
2
,
,
,
np  
is the diagonal matrix of its eigenvalues. Introducing the change of ­coordinates z
U
P
=
−
(
)
T
P and 
shifting the origin in P, Equation 2.83 can be written as an ­np-dimensional ellipsoid:
	
λ
α
k
k
k
n
p
n
N
n
z
n F
p
p
p
2
1
=
−
∑
=
,
exp
	
(2.84)
with axis lengths inversely proportional to λk . Therefore, the smaller the eigenvalue, the larger the 
uncertainty of the corresponding parameter.
For direct visual inspection, Equation 2.84 can be projected onto a two-dimensional subspace. 
Let p p
i
j
,
(
) be the parameter couple of interest. Then, Equation 2.83 becomes
	
p
p
i i
i j
j i
j j
p
p
i
i
j
j
i
i
j
−
−


(
)
(
)
(
)
(
)








−
−
p
p
p



C
C
C
C
,
,
,
,
1
−





=
−
pj
N
n
F
p
2
2,
exp
α
	
(2.85)
Rewriting Equation 2.84 with np = 2 yields
	
λ
λ
α
1
1
2
2
2
2
2
2
2
z
z
F N
+
=
−
,
exp 	
(2.86)

123
Identification of Environmental Models
Using the eigenvalues u and v obtained from the similarity transformation
	
C i i
C i j
C j i
C j j
,
,
,
,
(
)
(
)
(
)
(
)








= 

(
)



−1
1
2
u
v
u
v
diag λ λ
	
(2.87)
The equations to trace the confidence ellipse centred in p
p


i
j
,
(
) can be defined in polar coordinates 
ξi and ξ j as
	
ξ
λ
φ
λ
φ
φ
α
α
i
N
N
i
F
u
F
u
=
( ) −
( ) +
≤
≤
−
−
2
2
0
2
2
2
1
1
2
2
2
2
,
,
exp
exp
cos
sin
p
for
π
ξ
λ
φ
λ
φ
α
α
j
N
N
j
F
v
F
v
=
( ) −
( ) +
−
−
2
2
2
2
1
1
2
2
2
2
,
,
exp
exp
cos
sin
p
	
(2.88)
In either case, the confidence interval δpi of each individual parameter pi can be computed as
	
δ
α
p
C
i
N n
t
i i
p
= ±
⋅
(
)
−
,
	
(2.89)
where:
tN np
−
α
 is Student’s t distribution for the given confidence level 100 (1 − α)%
N − np are the degrees of freedom
This statistics is consistent with the multivariate F distribution for np = 1, because t
F
N n
N n
p
p
−
−
=
α
α
1,
. 
Substituting either CFIM or CH in place of C in Equation 2.89 yields the approximate confidence 
bounds of the estimated parameters pi. It is important to notice that though δpi refers to a single 
parameter, it takes into account the full np-dimensional confidence region through the matrix C.
2.4.3.4  A Parameter Estimation Reliability Test
In addition to providing different confidence regions, the two approximations CFIM and CH provide a 
reliability test for the estimated parameters based on their inherent conceptual difference. This test 
is fully presented and discussed in specific papers (Marsili-Libelli et al., 2003; Checchi and Marsili-
Libelli, 2005; Marsili-Libelli and Checchi, 2005; Checchi et al., 2007). The FIM approximation 
CFIM is based on the sensitivities, whereas the Hessian approximation CH depends on the shape 
of the error surface. For nonlinear systems, CH is the most comprehensive approximation because 
it includes the effect of the curvature, reflecting the degree of nonlinearity induced by the model 
structure (Bates and Watts, 1988; Seber and Wild, 1989; Marsili-Libelli et al., 2003), while CFIM, 
being based on a linear approximation, does not contain this term. Because the curvature effect 
vanishes in the neighbourhood of E P( ), comparing the two confidence regions yields a measure of 
the estimation reliability, because if the two regions diverge, this implies that the search terminated 
at a point where the effect of the curvature is still significant, and therefore this cannot be the real 
minimum of E P
( ) (Marsili-Libelli et al., 2003). Conversely, if the two regions provided by CFIM and 
CH coincide, this means that the curvature effect is negligible, and the identification can be consid-
ered reliable. In this case, these regions also coincide with the exact confidence region determined 
on the basis of the error surface (Lobry and Flandrois, 1991). It should be recalled, however, that the 
curvature, amplifying the estimation errors, is an indicator of a failure to reach the minimum, but 

124
Environmental Systems Analysis with MATLAB®
it is not influenced by model inadequacy and residual characteristics. Its vanishing merely indicates 
that the residuals are orthogonal to the response surface in the neighbourhood of P, but it does not 
attempt to characterize them, for example, whether they are normally distributed and uncorrelated. 
This test is therefore an assessment of the quality of the optimization, and not of the model struc-
ture. Though visual inspection of the two regions may often suffice in judging their coincidence, 
numerical tests have been developed for their exact definition (Checchi and Marsili-Libelli, 2005; 
Marsili-Libelli and Checchi, 2005; Checchi et al., 2007).
2.4.3.5  Parameter Validation for the Monod Kinetics
To demonstrate the above validation method based on the coincidence or divergence of the confi-
dence ellipsoids defined by Equation 2.83, the parameters of the Monod kinetics were again esti-
mated using noisy data and starting the search from two differing initial guesses, as described in 
detail in Marsili-Libelli et al. (2003). The initial and final parameter values are listed in Table 2.1, 
and the final estimates in the µmax,Ks
(
) plane are shown in Figure 2.40 for both cases: case 1 (suc-
cessful estimation) and case 2 (faulty estimation). In real life, where the ‘real’ parameter values 
are unknown, there would be no way of knowing whether the results are reliable. For this rea-
son, the previous validity test is used, and the confidence ellipses with the two methods are com-
pared. Figure 2.41 shows the coincidence of the ellipses, denoting that the estimated parameters 
TABLE 2.1
Estimation of the Monod Kinetics from Noisy Data (σ = 0.05) with Differing 
Simplex Starting Points
Ks mgCODL 1
−−
(
)
µµ
−−
max
1
h(
)
Y
bh h 1
−−
(
)
Starting Point
E P( )
True values
20.000
0.500
0.500
0.030
Case 1
19.0997
0.483
0.525
0.0303
[22.0 0.5 0.37 0.04]T
0.265
Case 2
31.605
0.711
0.485
0.0289
[33.3 0.8 0.57 0.08]T
0.548
Source:	 Marsili-Libelli, S. et al., Ecol. Model., 165, 127–146, 2003.
17.5 18.0 18.5 19.0 19.5 20.0 20.5 21.0
0.43
0.44
0.45
0.46
0.47
μmax
μmax
0.48
0.49
0.50
0.51
0.52
0.53
30.0 30.5 31.0
31.5 32.0 32.5 33.0
33.5
0.64
0.66
0.68
0.70
0.72
0.74
0.76
0.78
Case 1
Ks
Ks
Case 2
FIGURE 2.40  Contour portrait of E P
( ) and the importance of a good search initialization. The dot indi-
cates the location of the minimum P reached by the optimization algorithm for the two simplex initialization 
points of Table 2.1. Only in case 1 the true minimum is reached. (Redrawn with permission from Marsili-
Libelli, S. et al., Ecol. Model., 165, 127–146, 2003.)

125
Identification of Environmental Models
are reliable, whereas Figure 2.42 shows a considerable divergence, which should be interpreted as 
a warning that the final estimates are unreliable and deserve further investigation. For the ‘good’ 
estimates of case 1, the confidence intervals of the individual parameters are then computed by 
Equation 2.89 and listed in Table 2.2.
2.4.4  A MATLAB Exercise: Parameter Estimation of the S&P Model
To wrap up the previous notions, let us again consider the simple S&P model consisting of two river 
reaches, each with an upstream point source of biodegradable pollutant. The model (2.32) will be 
used again, but now the exercise is aimed at the selection of differing sampling points along the 
DO trajectories and see how the differing sampling alternatives influence the estimation of the 
model parameters K K
b
c
,
(
). But first, let us consider how the selection of the variables included in 
the error functional changes the nature of the estimation: if both model variables (BOD and DO) 
are used, then Figure 2.43a shows that the parameter correlation, giving rise to the ‘narrow valley’ 
shape, increases. In fact, the EBOD DO
,
 contours are more elongated than those produced by EDO. 
Further, Figure 2.43b shows that BOD gives a significant contribution, but being more difficult to 
measure than DO, it will not be much missed in the subsequent estimation, based on DO alone.
Two interconnected MATLAB scripts were designed for this exercise, and their use is illustrated 
in the flowchart of Figure 2.44. The software described here can be retrieved from the companion 
software bundle, in the subfolder \Exercises\Chapter_2\Calibrate_S&P. The first module to be used 
15
20
25
0.40
0.45
0.50
0.55
15
20
25
0.49
0.50
0.51
0.52
0.53
15
20
25
0.0295
0.0300
0.0305
0.0310
0.0315
0.40
0.45
0.50
0.55
0.49
0.50
0.51
0.52
0.53
0.40
0.45
0.50
0.55
0.0295
0.0300
0.0305
0.0310
0.0315
0.49
0.50
0.51
0.52
0.53
0.0295
0.0300
0.0305
0.0310
0.0315
Ks
Ks
Ks
Y
Y
Y
bh
bh
μmax
μmax
μmax
bh
CH
CFIM
FIGURE 2.41  Confidence ellipsoids in the case 1 estimation. The coincidence of the confidence regions 
computed with the Hessian (dashed line) and the FIM matrix (solid line) indicates that the simplex converged 
to the ‘real’ parameters (dot). (Redrawn with permission from Marsili-Libelli, S. et al., Ecol. Model., 165, 
127–146, 2003.)

126
Environmental Systems Analysis with MATLAB®
is Fisher _ contour _ SP _ DO.m. It enables the user to simulate a sampling campaign by 
clicking with the mouse around the highest sensitivity spots (right-click to exit the sampling). Then, 
the FIM and the estimation bounds are computed based on these samples. All the data and the 
computed quantities (error surface, FIM, covariance matrix and parameter bounds) are then saved 
for the subsequent estimation, performed by the other module (Cal _ SP _ DO.m), which also vali-
dates the estimates by applying both the non-parametric and parametric methods.
Figure 2.45 shows the estimation results of the S&P model with a noisy data set (DO _ sag _
noise.mat) concentrated in the high-sensitivity zones. Given the data and the model, the FIM can 
be computed before the estimation, so that the expected confidence intervals for the two parameters 
are known in advance. In this case, these values are δ
δ
K
K
b
c
= ±
= ±
(
)
0 01059
0 011368
.
;
.
, as shown 
0.49
0
20
40
60
0.2
0.4
0.6
0.8
1.0
1.2
0
20
40
60
0.46
0.47
0.48
0.49
0.50
0.51
0
20
40
60
0.027
0.028
0.029
0.030
0.031
0.2
0.4
0.6
0.8
1
0.46
0.47
0.48
0.50
0.51
0.2
0.4
0.6
0.8
1
0.027
0.028
0.029
0.030
0.031
0.47
0.49
0.51
0.027
0.028
0.029
0.030
0.031
Ks
Ks
Ks
Y
Y
Y
μmax
bh
bh
bh
CH
CFIM
μmax
μmax
FIGURE 2.42  Confidence ellipsoids in the case 2 estimation. The divergence between the two confidence 
regions indicates that the simplex did not converge to the ‘real’ parameters (dot). (Redrawn with permission 
from Marsili-Libelli, S. et al., Ecol. Model., 165, 127–146, 2003.)
TABLE 2.2
Values and Confidence Intervals of the Correctly Estimated Monod Kinetic 
Parameters (Case 1 in Table 2.1)
Ks mg CODL 1
−−
(
)
µµ
−−
max
1
h(
)
Y
bh h 1
−−
(
)
Case 1
19.09968 ± 1.72181
0.48298 ± 0.03212
0.50524 ± 0.01139
0.03025 ± 0.00057
Source:	 Marsili-Libelli, S. et al., Ecol. Model., 165, 127–146, 2003.

127
Identification of Environmental Models
in the left part of Box 2.4. After performing the actual model calibration, the results confirm that the 
estimated parameters are indeed inside the expected confidence intervals. In fact,
	
δ
δ
K
K


b
c
=
<
= −
> −
0 0028218
0 01059
0 0037711
0 011368
.
.
.
.
	
(2.90)
EDO
Kb
Kc
0.09
0.10
0.11
0.12
0.13
0.14
0.15
0.16
0.12
0.14
0.16
0.18
0.20
0.22
0.24
0.26
0.28
0.30
EBOD,DO
EBOD,DO
EDO
400
300
200
EBOD.DO, EDO
100
0
0.10 0.15
0.20
0.25
0.160.140.120.100.08
Kb
Kc
0.06
0.30
(a)
(b)
FIGURE 2.43  Contour profile (a) and 3D visualization (b) of the error functionals for the calibration of the 
Streeter & Phelps model using either both state variables BOD and DO (dashed lines) or only DO (solid lines). 
The counterintuitive result is that using only DO measurements, the ‘narrow valley’ problem is alleviated, 
though the gradient decreases. The 3D surface (b) shows that, although BOD gives a considerable contribu-
tion, it narrows the bottom of the functional.
Simulate the S&P model
with nominal parameters
Compute trajectory
sensitivities
Acquire the
‘experimental’ data
Compute the
estimation statistics:
FIM, covariance matrix,
and estimation bounds
Save the results
Load the previous
results
Perform the
estimation
Validate the
estimates
Parameters inside
the confidence
region?
VAF
Regression
F-test
Autocorrelation?
Normally
distributed?
Analysis of the
residuals
Sampled data, FIM,
Conﬁdence bounds
Preliminary operations
Fisher_contour_SP_DO.m
Model calibration and validation
Cal_SP_DO_Fish.m
Ferr_SP.m
SP.mdl
FIGURE 2.44  Software organization of the MATLAB scripts for the complete estimation of the Streeter & 
Phelps model, in the subfolder \Exercises\Chapter_2\Calibrate_S&P.

128
Environmental Systems Analysis with MATLAB®
The residual analysis in Figure 2.45b and d confirms that they are uncorrelated and normally dis-
tributed (both the KS and he Lilliefors test confirm this), and the F-test on the regression line in 
Figure 2.47a also confirms that the null hypothesis (regression line coinciding with the 1:1 line) can-
not be rejected. The estimated parameters are well within the 95% confidence contour of the error 
functional, as shown in Figure 2.45c.
Figure 2.46a shows another example of the S&P model identification, but this time a highly 
biased data set (DO _ bias.mat) was used, where it is assumed that the oximeter has a strong bias, 
so that its readings are consistently lower than the actual DO value. In addition, it has a low accuracy 
(high divergence with true values) but a high precision (little measurement dispersion). The prelimi-
nary computation of the FIM yields surprisingly lower confidence bounds, due to the high precision 
δ
δ
K
K
b
c
= ±
= ±
(
)
0 0055481
0 0065491
.
;
.
 that are not satisfied by the subsequent estimation; in fact, 
the differences between real and estimated parameters are
	
δ
δ
K
K


b
c
= −
< −
=
>
.
.
.
.
0 027927
0 0055481
0 046436
0 0065491
	
(2.91)
Also, Figure 2.46c shows that the estimated parameters are just on the border of the 95% confidence 
contour of the error functional. The residual analysis in Figure 2.46b indicates a high autocorrela-
tion, as a consequence of a biased model, whereas the F-test of Figure 2.47b yields an extremely 
0
10
20
30
40
5
6
7
8
9
River length (km)
DO Conc. (mg/l)
True Kb = 0.1200   Est. Kb = 0.1172
True Kc = 0.2000   Est. Kc = 0.2038
Calibrated model
Nominal model
Data
Kb
Kc
(c)
−0.8−0.6−0.4−0.2 0.0 0.2 0.4
0
1
2
3
Residuals
Rel. freq.
Hist.
Fitted pdf
−1
0
1
0.0
0.2
0.4
0.6
0.8
1.0
Residuals
Cum. Distr.
Exp. cdf
Fitted cdf
(d)
0.08
0.06
0.10
0.12
0.14
0.16
0.18
0.10
0.15
0.20
0.25
0.30
True parameters
Est. parameters
20
40
60
80
100
−0.8
−0.6
−0.4
−0.2
0.0
0.2
0.4
Sample
Residuals
0
2
4
6
8
10
−1
0
1
Lag
Resid. autocorr.
(a)
(b)
FIM approx. conf. region
Exact conf. region
FIGURE 2.45  Estimation results for the Streeter & Phelps model using the data file DO _ sag _ noise.
mat. In (a), the fitted model response is compared with the ‘real’ response, showing their coincidence. In (c), 
the dashed contour corresponds to the 95% exact confidence region and includes the approximate confidence 
region based on the FIM. The estimated parameters are well inside both regions. The graphs in (b) assess 
the residuals, showing the lack of autocorrelation, while in (d) the Gaussian cdf is well approximated by the 
experimental cumulative distribution.

129
Identification of Environmental Models
high F value, confirming that this identification should be rejected as a consequence of the poor 
data quality.
2.4.4.1  A Quick Guide to the Related Companion Software
The \Exercises\Chapter_2\Calibrate_S&P folder contains the set of MATLAB/Simulink functions 
demonstrated in the previous section. It is warned that the S&P model is very simple and should be 
viewed as an educational aid only. Here is how to use the two main scripts:
•	 Fisher_controur_SP_DO.m allows the user to generate a model response by input-
ting the two-reach river characteristics in the appropriate dialogue. It then displays a graph 
with the model response in terms of BOD and DO along the two reaches. In this graph, the 
user can select data by left-clicking on the DO curve (it is assumed that only DO data are 
acquired). To terminate the data selection process, right-click anywhere in the graph window. 
Remember that the last right-clicked point will not be included in the data set. It is advisable 
to produce several data files (DO*.mat) before proceeding to the calibration, to have several 
sets of usable data. At the end of the data input session, several graphs are produced:
•	 A contour portrait of the error functional centred on the (Kb, Kc) couple used to gener-
ate the simulation.
•	 A 3D surface of the same error functional, again centred on the (Kb, Kc) couple used to 
generate the simulation.
•	 The FIM, computed on the basis of the sensitivity functions and the data error variance, 
defined as the difference between the clicked points and the corresponding simulation.
BOX 2.4  STREETER & PHELPS MODEL CALIBRATION: COMPARISON 
OF THE ESTIMATION RESULTS WITH DATA FILES
File name: DO_bias
-------------------------------------------
Preliminary data analysis
-------------------------------------------
Var. of DO meas. 0.032087
Estimation confidence band for Kb = ± 0.0055481
Estimation confidence band for Kc = ± 0.0065491
----------------------------
--- Estimation Results ---
----------------------------
Variance Accounted For 94.6089 %
------------------------------------------
Kolmogorov-Smirnov Test: 0 
Normality hypothesis accepted at 95 %
Lilliefors Test: 1
Normality hypothesis rejected at 95 %
-------------------------------------------
Residual analysis
Residual mean value − 0.67535
Residual variance 0.029617
-------------------------------------------
Estimated Kb = 0.14793
Estimated Kc = 0.15356
Estimation error for Kb − 0.027927 equal to 23.2726 %
Estimation error for Kc 0.046436 equal to 23.2178 %
-------------------------------------------
File name: DO_sag_noise 
-----------------------------------------
Preliminary data analysis
-----------------------------------------
Var. of DO meas. 0.05017
Estimation confidence band for Kb = ± 0.01059
Estimation confidence band for Kc = ± 0.011368
-----------------------------------------
--- Estimation Results ---
-----------------------------------------
Variance Accounted For 92.6251 %
-----------------------------------------
Kolmogorov - Smirnov Test: 0
Normality hypothesis accepted at 95 %
Lilliefors Test:  0
Normality hypothesis accepted at 95 %
-----------------------------------------
Residual analysis
Residual mean value 0.0043753
Residual variance 0.042787
-----------------------------------------
Estimated Kb = 0.11718
Estimated Kc = 0.20377
Estimation error for Kb 0.0028218 equal to 2.3515 %
Estimation error for Kc − 0.0037711 equal to 1.8856 %
-----------------------------------------

130
Environmental Systems Analysis with MATLAB®
0
10
20
30
40
4
5
6
7
8
9
River length (km)
DO Conc. (mg/l)
True Kb = 0.1200   Est. Kb = 0.1479
True Kc = 0.2000   Est. Kc = 0.1536
Calibrated model
Nominal model
Data
Kb
Kc
0.06
0.08
0.10
0.12
0.14
0.16
0.18
0.10
0.15
0.20
0.25
0.30
True parameters
−1
−0.5
0
1
2
3
Residuals
Rel. freq.
Hist.
Fitted pdf
−2
−1
0
0.0
0.2
0.4
0.6
0.8
1.0
Residuals
Cum. Distr.
Exp. cdf
Fitted cdf
10
20
30
40
50
60
70
−1.0
−0.5
Sample
Residuals
0
1
2
3
4
5
6
7
−1
0
1
Lag
Resid. autocorr.
(a)
(b)
(c)
(d)
Est. parameters
FIM approx. conf. region
Exact conf. region
FIGURE 2.46  Estimation results for the Streeter & Phelps model using the data file DO _ bias.mat. 
In (a), the fitted model response is compared with the ‘true’ response, showing their disagreement. In (c), the 
dashed contour indicates the 95% exact confidence region, while the dashed ellipse represents the approxi-
mate confidence region based on the FIM. The two regions are significantly divergent, with the estimated 
parameters placed just on the boundary of the exact confidence region. The graphs in (b) assess the residuals, 
showing a strong autocorrelation, while the Gaussian cdf is hardly approximated by the experimental cumula-
tive distribution.
File name: DO_sag_noise.mat
r = 0.9679
ME = 4.4898e-005
SE = 0.0184
NC = 0.9816
File name: DO_bias.mat
r = 0.9811
ME = 0.9231
SE = 0.0094
NC = 0.0544
5.5
6.0
6.5
7.0
7.5
8.0
8.5
6.0
6.5
7.0
7.5
8.0
Data
Model
F-statistics 0.9755 against a limit value of 3.0837
5.0
5.5
6.0
6.5
7.0
7.5
5.6
5.8
6.0
6.2
6.4
6.6
6.8
7.0
7.2
7.4
7.6
Data
Model
F-statistics 599.9116 against a limit value of 3.1296
(a)
(b)
FIGURE 2.47  F-test on the regression lines performed for the calibration results of Figure 2.45 in (a) and of 
Figure 2.46 in (b), against the 1:1 perfect correspondence (black dashed line). In the (a) case the model can be 
accepted, while in the (b) case the model calibrated with the DO bias.mat data can be confidently rejected. 
Consider that in both cases the r coefficient has a (deceptively) very high value.

131
Identification of Environmental Models
Based on the FIM, the expected parameter estimation bounds are computed and all the data 
are saved in a.mat file (starting with DO suffix) in the following order:
–	 DO _ sperim: clicked ‘experimental’ data
–	 DO _ Param: all the parameters needed to reproduce the simulation
–	 E, Par1, Par2: matrices to reproduce the contour and 3D portrait of the error 
functional
–	 Kb _ nom, Kc _ nom: nominal values of the parameters Kb and Kc used in the 
simulation
•	 Cal _ SP _ DO _ Fish.m is to be launched next: it performs the calibration of the two 
model parameters (Kb, Kc). First, a DO*.mat file containing all the information generated 
by Fisher _ controur _ SP _ DO.m as described above must be loaded by selecting 
it from a menu. After this file is loaded in the Workspace, the user is required to provide 
suitable initial values the (Kb, Kc) couple. It is suggested to try several differing starting 
estimates, as discussed in Figures 2.41 and 2.42. Then, the estimation procedure is started 
and its progress can be followed by observing the simulated system response with the cur-
rent parameters values and the location of the current search point in the (Kb, Kc) space. 
Upon convergence, this module produces the following results:
•	 The ‘real’ and calibrated model responses are compared with the data.
•	 The estimated parameter values are displayed and compared with the ‘real’ ones.
•	 The estimated (Kb, Kc) couple is displayed as a diamond in the contour figure.
•	 The VAF is computed.
•	 The estimation residuals are tested for whiteness with the autocorrelation test.
•	 Their distribution is tested for normality through the KS and the Lilliefors tests.
2.4.5  Another MATLAB Exercise: Parameter Estimation of the Monod Model
This exercise illustrates the difficulties of estimating the parameters of the Monod kinetics, 
described by Equation 2.18. The relevant software can be retrieved from the folder \Exercises\
Chapter _ 2\Calibrate _ Monod of the companion software. Unlike the S&P model, the dif-
ficulties arise mainly from the high correlation among parameters, particularly that of the couple 
µmax,Ks
(
), as amply described in Section 2.2.1. This exercise follows the same path as the previous 
one, but there are some differences. The estimation will be limited to the ‘critical’ parameter couple 
µmax,Ks
(
), while the other parameters and the initial conditions are considered known. It is left to 
the reader to extend the identification to the four model parameters and to the initial conditions 
(hint: extend the parameter vector in Ferr _ Monod.m).
The workflow, shown in Figure 2.48, is similar to that illustrated for the S&P model identifica-
tion. First, the Monod batch model is simulated with given parameters, and the trajectory sensitivi-
ties for both variables (substrate and biomass) are computed. Then, a certain number of data (Nexp) 
are uniformly sampled in the high-sensitivity interval, which can be extended to the whole simula-
tion horizon. With this information the measurement accuracy matrix Q, as per Equation 2.9, and 
the FIM are computed as follows:
	
Q =












1
0
0
1
2
2
σ
σ
S
X
	
(2.92)
where σS
2 and σX
2  are the (constant) variances of the substrate and biomass samples, equal to the 
added measurement noise. The FIM matrix is computed using Q of Equation 2.92 and the sensitiv-
ity matrix S evaluated on the basis of the sampled data S
X
k
N
k
k
,
,
,
,
exp
= …
(
)
1

132
Environmental Systems Analysis with MATLAB®
	
Sk
k
k
s
k
k
s
S
S
K
X
X
K
=
∂
∂
∂
∂
∂
∂
∂
∂












µ
µ
max
max
	
(2.93)
as
	
FIM =
⋅
⋅
=
∂
∂
+
∂
∂
=∑








S
Q S
k
T
k
k
N
S
k
X
k
S
X
1
2
2
2
1
1
exp
max
max
σ
µ
σ
µ





=
=
∑
∑
∂
∂
⋅∂
∂
+
∂
∂
⋅
2
1
1
2
2
1
1
k
N
k
N
S
k
k
s
X
k
S
S
K
X
exp
exp
max
max
σ
µ
σ
µ
∂
∂












=
=
∑
∑
X
K
k
s
k
N
k
N
1
1
exp
exp
1
1
2
2
1
σ
µ
σ
µ
S
k
k
s
X
k
k
s
k
N
S
S
K
X
X
K
∂
∂
⋅∂
∂
+
∂
∂
⋅∂
∂








=
max
max
exp
∑
∑
∑
=
=
=
∂
∂
+
∂
∂








k
N
S
k
s
X
k
s
k
N
k
N
S
K
X
K
1
2
2
2
2
1
1
1
1
exp
exp
e
σ
σ
xp
∑








	
(2.94)
The parameter covariance matrix is approximated by inverting the FIM of Equation 2.94, 
from which the confidence intervals for the individual parameters µmax and Ks are computed 
according to Equation 2.89. The contour of the error functional can also be traced by repeated 
simulations with perturbed parameters µmax,Ks
(
), as already shown in Figure 2.10 or 2.27 in 
the noisy data case.
Simulate the Monod model
with nominal parameters
Compute trajectory
sensitivities
Acquire the
‘experimental’ data
Compute the
estimation statistics:
FIM, covariance matrix
and estimation bounds
Save the results
Load the previous
results
Perform the
estimation
Validate the
estimates
Compute the exact
confidence region 
Autocorrelation?
Normally
distributed?
Sampled data, FIM,
Conﬁdence bounds
Preliminary operations
Fisher_contour_Monod.m
Model calibration and validation
Cal_Monod.m
Analysis of the
residuals
Ferr_Monod.m
Monod.mdl
FIGURE 2.48  Workflow for the Monod kinetics identification, considered in the Example 2.4.5. The perti-
nent software can be found in the folder \Exercises\Chapter_2\Calibrate_Monod.

133
Identification of Environmental Models
With this preliminary information, the identification procedure continues according to the 
­second box in the flow diagram of Figure 2.48. First, the sampled data and the FIM are loaded, 
then the simplex optimization is launched and the optimal parameters are assessed. The main dif-
ference between the Monod model flowchart of Figure 2.48 and the corresponding S&P workflow 
of Figure 2.44 is in the sensitivity of the Monod model to the number and quality of the data. To 
highlight this aspect, the data preparation module (Fisher _ contour _ Monod.m) has two 
data-generation options, controlled by the flag Im in line 104: the samples to be used in the estima-
tion can be limited to the high-sensitivity interval (Im=1) or can be taken uniformly over the entire 
simulation horizon (Im=2). Specifically, in the first option the number of data specified by the user 
Nexp
(
) are uniformly sampled only in the interval in which the sensitivities are greater than 40% 
of their maximum values. Through the initial menu, the user can also specify the variance of the 
measurement noise. The sampled data, nominal parameters, error function and FIM can be saved in 
a data file to be used by the subsequent Cal _ Monod.m script, which performs the actual estima-
tion and validation.
As anticipated, the identification of the Monod kinetics presents several difficulties, due to the 
high parameter correlation. For this reason, it will be now shown that it also requires a large number 
of accurate data to achieve a successful identification. Table 2.3 compares the results obtained with 
data affected by a noise of varying intensity, in the case of uniform or concentrated sampling. The 
first two rows indicate that with a large number of samples (500) and no noise a perfect identifica-
tion can be achieved. The accuracy of the estimates degrades as the noise variance increases. As 
predicted, the estimation error is always contained in the confidence bands estimated with the FIM. 
However, as Figure 2.49 shows, this condition considers only one parameter at a time, represented 
by each side of the dashed rectangle, while the confidence region considers the joint confidence of 
the two parameters simultaneously. Hence, having the estimates inside the FIM confidence region 
is a much stronger constraint than satisfying the single-parameter error bound. Two other consid-
erations can be drawn by examining Figure 2.49: first, the simplex search develops mainly along 
the FIM confidence region; secondly, there is a considerable divergence between the exact and FIM 
confidence regions, confirming the difficulty of this exercise. One last consideration can be drawn 
by comparing the two confidence regions in Figure 2.49: the estimated parameter couple is certainly 
inside the ellipse defined by the FIM, but it is not contained in the exact confidence region, which is 
not based on the linear approximation.
TABLE 2.3
Estimation Results for the Monod Model Identification Exercise, Section 2.4.5
Estimated Confidence Band and 
Actual Estimation Error for µmax
Estimated Confidence Band and 
Actual Estimation Error for Ks
Estimated 
Parameter Values
Data File Name
±±δδµµmax
εεµµmax
±±δδK s
εεKs
μmax
K s
Monod_500_0_All
±1.5184 × 10−8
4.3612 × 10−8
±1.2746 × 10−6
3.5779 × 10−5
0.45000
30.0000
Monod_500_0_HS
±1.1190 × 10−7
−3.3716 × 10−7
±9.4296 × 10−6
−2.7848 × 10−6
0.45000
30.0000
Monod_500_01_All
±1.7282 × 10−4
3.4395 × 10−5
±1.4507 × 10−2
3.3251 × 10−3
0.44997
29.9967
Monod_500_01_HS
±1.1673 × 10−4
1.2141 × 10−4
±9.8365 × 10−3
1.0351 × 10−2
0.44988
29.9896
Monod_50_01_All
±4.7423 × 10−4
3.3686 × 10−4
±9.808 × 10−2
2.8363 × 10−2
0.44966
29.9716
Monod_50_01_HS
±5.1921 × 10−4
1.2782 × 10−4
±4.3746 × 10−2
1.0945 × 10−2
0.44987
29.9891
Monod_50_10_All
±5.0478 × 10−2
−3.7764 × 10−2
±4.2373
−3.1075
0.48776
33.1075
Monod_50_10_HS
±4.5277 × 10−2
−1.1024 × 10−2
±3.815
−0.9053
0.46103
30.9053

134
Environmental Systems Analysis with MATLAB®
2.5  PEAS: A COMPUTER PACKAGE FOR PARAMETER 
ESTIMATION OF ECOLOGICAL MODELS
The previous parameter estimation and validation analysis for environmental system was condensed 
into a MATLAB toolbox named PEAS for Parameter Estimation Accuracy Software (Checchi 
et al., 2007), which performs both the operations described in the previous sections using a user-
friendly graphical interface to minimize the required programming. The user is required to specify 
the model structure using the MATLAB/Simulink syntax, enter the experimental data, provide an 
initial parameter guess and select an estimation method. PEAS provides several model assessment 
methods, in addition to parameter estimation, such as error function plotting, trajectory sensitivity 
and Monte Carlo analysis, which are useful to assess the suitability of the experimental data to the 
estimation problem. After the parameters have been estimated, the reliability of the identification 
is assessed, approximate and exact confidence regions are computed, and a confidence test is pro-
duced. The Monte Carlo analysis is available for approximate accuracy assessment whenever the 
model structure prevents the application of the confidence regions method.
The PEAS toolbox is available for free on request to the author on an ‘as is’ basis. A minimum 
of MATLAB programming skill is required, and in the case of a complex model, C programming 
of the Simulink S-function is suggested, but not strictly required.
Ks
0.40
0.42
0.44
0.46
0.48
0.50
26
27
28
29
30
31
32
33
34
True parameters
Estimated parameters
Approximate confidence region based on
the FIM
Exact region based on
the error functional
μmax
±δKs
±δμmax
FIGURE 2.49  Estimation results for the Monod model exercise of Section 2.4.5, obtained with the data file 
Monod_50_10HS.mat. There is a considerable divergence between the confidence region based on the error 
functional (exact) (thick dashed line) and that based on the FIM (thin solid line). It is interesting to notice 
that the estimated parameters are in the FIM region, but just outside the exact region. Further, the parameter 
confidence intervals based on the FIM result in the grey dashed rectangle, which is much wider than the FIM 
region.

135
Identification of Environmental Models
A few features of the PEAS toolbox are now reviewed. Figure 2.50 shows its software organi-
zation, which is composed of a graphic user interface, a modelling section and the computational 
engines. The user is taken through this logical sequence from top to bottom by first defining a 
model, together with its simulation specifications, then performing the estimation, after selecting 
the method, accuracy and weights, and finally assessing the results.
The user can define the problem and the experimental data through the main GUI, shown in 
Figure 2.51, after specifying the model either as a Simulink model (*.mdl), an M-file script (*.m) 
or as a compiled-C in either the *.mexw32 or *.mexw64 version, depending on whether you have a 
32-bit or a 64-bit operating system. Additional interfaces are provided for model viewing. Then, the 
estimation algorithm is selected, choosing between a modified simplex with optimized expansion, 
a QN method, the Levenberg–Marquardt method (Himmelblau, 1972; Press et al., 1986; Marsili-
Libelli, 1992) or a combination of simplex and QN, where the former is the starting algorithm, and 
the latter is initialized with the simplex result. After the estimation is completed, three-parameter 
estimation assessment tools are available: computation of exact and approximate confidence regions, 
shown in Figure 2.52, and Monte Carlo analysis, shown in Figure 2.53.
Model view
Model info
Model representations
S-function
model
M.file
model
Simulink
model
Exact
regions
Confidence
regions
Monte Carlo
analysis
Gridding
Parameter
estimation
Computational engines
Methods
Models
Interfaces
Legend
GUI
Introductory section
Input menu
Parameter menu
Data menu
User interface
FIGURE 2.50  PEAS is composed of three main sections: graphical user interface, model representations 
and computational engines. The GUI frontend lets the user define the problem and the experimental data, 
then the model is specified and finally the selected methods are invoked. (Reproduced with permission from 
Checchi, N. et al., Environ. Model. Softw., 22, 899–913, 2007.)

136
Environmental Systems Analysis with MATLAB®
FIGURE 2.51  PEAS opening screen and initial interface, prompting the user to define the model and spec-
ify the estimation conditions. The example shown here refers to the Monod kinetics. (Reproduced with per-
mission from Checchi, N. et al., Environ. Model. Softw., 22, 899–913, 2007.)
FIGURE 2.52  PEAS can perform the estimation reliability test by comparing differing confidence ellip-
soids, as described in Section 2.4.3.4. In this example, the estimation fails to satisfy the ellipsoids coincidence. 
This behaviour was caused by an improper choice of the initial parameter guess and resulted in major estima-
tion errors. (Reproduced with permission from Checchi, N. et al., Environ. Model. Softw., 22, 899–913, 2007.)

137
Identification of Environmental Models
FIGURE 2.53  Monte Carlo analysis of the four estimated parameters of the Monod kinetics. The estimated 
values are represented by the dashed lines, and their confidence intervals by the dotted lines. (Reproduced 
with permission from Checchi, N. et al., Environ. Model. Softw., 22, 899–913, 2007.)


139
3 Analysis of Environmental 
Time Series
True genius resides in the capacity for evaluation of uncertain, hazardous, and conflicting 
information.
Winston Churchill
3.1  INTRODUCTION
By time series, we mean a collection of homogeneous time-indexed data. The most important 
­purpose of data is to carry information, and it is our prime goal to extract the useful information 
by separating it from unwanted interferences. In the context of environmental data, these data sets 
may be data either with which a model is identified (see Chapter 2) or which serve as a model input 
in simulations or scenario generation. In either case, these data cannot be used on an ‘as is’ basis, 
because there may be several features—or the lack of them—that make them unsuitable for direct 
use. The data are generally affected by noise due to sampling inaccuracies—the extreme case being 
the ­‘outliers’, that is, data well outside their reasonably expected range—or there may be missing 
data. The sampling process itself may alter the data to a significant extent. It should always be 
remembered that in the environmental sciences, the practice of data collection is often troublesome 
and costly, which partly justifies their scarcity and the need to make the most of what we have 
available.
For these reasons, data treatment prior to their use in modelling and analysis is mandatory, both 
to improve their quality and to bring to the fore the information embedded therein. In this chapter, 
the techniques of data analysis will be reviewed with the aim of separating the informative content 
from the noise that affects it, supplementing missing data, and in general, making data more reliable 
for modelling purposes.
A time series is composed of a collection of samples taken at discrete time intervals from an intrin-
sically continuous process. Environmental time series may be acquired either manually or via auto-
matic equipment. In the former case, the sampling involves the action of an operator and subsequent 
laboratory analysis, whereas in the latter case, unattended sampling stations are used. The first sam-
pling mode is usually reserved for chemical parameters that require sophisticated laboratory process-
ing, while automatic sampling can be used for comparatively simpler parameters, such as temperature, 
pH, flow and level. Recently the spectrum of chemical parameters that can be directly acquired by 
automated sampling stations has expanded to include specific ions such as NH ,NO
NO ,PO
4
2
3
4
+
−
−
−
,
2 , 
though the cost, reliability and maintenance issues still prevent their widespread use.
Manual data are often sampled at uneven rates, are relatively scarce, present a higher rate of 
missing data and need to be validated, whereas data coming from automatic monitoring stations are 
generally more abundant, sampled at regular intervals and are generally validated at the source, at 
least at a preliminary level, if the sensors are properly maintained.
Environmental data analysis can be divided into three main phases: data examination, filtering, 
and usage.
Data examination is based on a synthetic event description, to understand how the data are 
created and what is their meaning in the current context. Then, the data are preliminarily 
assessed in terms of their deterministic and random components, and the grossly inconsis-
tent samples are discarded.

140
Environmental Systems Analysis with MATLAB®
Data filtering performs the removal of the previously detected unwanted features, such as the 
removal of artefacts or of the stochastic component (denoising), together with outlier detec-
tion and removal. The data are then validated, and a more in-depth analysis is started with 
the aim of pattern detection and information extraction.
Data usage of the processed time series may range from forecasting future behaviour to 
synthetic time-series generation to be used as inputs in model simulation and scenario 
generation.
3.2  TIME DOMAIN VERSUS FREQUENCY DOMAIN 
OF ENVIRONMENTAL TIME SERIES
Figure 3.1 shows the basic signal decomposition into its deterministic and stochastic components. 
The former can be further decomposed into several components that differ mainly by their rate of 
change, with the trend being the slowest component, while the other components have increasingly 
higher rates. The decomposition of Figure 3.1 can be explained as follows:
Deterministic part: It contains the signal information and is, by definition, its reproducible 
part. It includes trend, cyclic and seasonal components, with the following meanings:
Trend: A long-term variation (very low frequency), which can be generally represented by 
a linear relation.
Cyclic components: A collection of periodic fluctuations, which can be represented by a 
collection of sinusoids of multiple frequencies.
Seasonality: A particular cyclic component with a seasonal periodicity.
Stochastic part: This is the totally unpredictable (noisy) component of the signal, unless it 
has some inner ‘autocorrelation’ (see Chapter 2), which can be represented by an auto-
regressive (AR) stochastic model (see Chapter 1).
3.2.1  Frequency Analysis of Sampled Time Series
When the signal is examined in its native time domain, it is very difficult, if not impossible, to 
extricate the previously described components, whereas a frequency analysis will naturally separate 
Cyclic components
Trend
Seasonality
Deterministic part
(reproducibile and
predictable)
Stochastic part
(not reproducible
nor predictable)
Original signal
Information
Noise
FIGURE 3.1  Decomposition of an environmental signal into its most significant components.

141
Analysis of Environmental Time Series
the components in the various frequency bands. The mathematical transformation that converts a 
time function s t( ) into a frequency function S f( ), and vice versa, was introduced by the French 
mathematician Jean B. Joseph Fourier (1768–1830), and is referred to as the continuous Fourier 
transform (FT) (Oppenheim and Schafer, 2010; Lyons, 2011), defined as follows:
	
S f
s t
e
dt
s t
S f
e
df
j
ft
j
ft
( ) =
( )⋅
( ) =
( )⋅
−
−∞
∞
−∞
∞
∫
∫
2
2
1
2
π
π
π
	
(3.1)
where:
j =
−1 is the imaginary unit
f (Hz) is the frequency, expressed in hertz (periods per second) or radians per second (rad/s)
In practice, we shall be dealing not with continuous signals, but with a collection of samples acquired 
at Ts intervals. As we shall see, the sampling process produces a fundamental alteration in the fre-
quency spectrum of the original signal. In fact, we are no longer dealing with a continuous signal 
s t( ), but with a discrete-time signal consisting of a collection of samples s
t
s kTs
*( ) =
(
)
{
}, as shown in 
Figure 3.2, so that if S f( ) is the FT of the original continuous signal, the frequency content of the 
sampled signal S
f
*( ) is made up of infinite replicas of S f( ), spaced by multiples of the sampling 
frequency fs
sT
=1/  (see, e.g., Oppenheim and Schafer, 2010)
	
S
f
T
S f
kf
s k
s
*( ) =
+
(
)
=−∞
∞
∑
1
	
(3.2)
3.2.1.1  Aliasing
The FT of a sampled signal is generally referred to as the discrete FT (DFT), and Equation 3.2 
describes how the original signal spectrum S f( ) is changed into S
f
*( ) as a consequence of the 
sampling process. In this context, it is not necessary to delve into the mathematical details of the 
FT and into the derivation of Equation 3.2, for which excellent textbook treatments are available 
(Oppenheim and Schafer, 2010; Lyons, 2011). It is, however, important to understand the role of the 
sampling frequency fs, which, if wrongly selected, may considerably alter the frequency content of 
the original signal. Figure 3.3 provides a graphical visualization of Equation 3.2 showing the side-
bands originated by sampling, with more bands extending from −∞ to +∞.
So long as the sampling frequency fs is larger than twice the maximum frequency of the signal 
baseband, that is, f
f
s > 2 max, the sidebands are well separated, so that the baseband can be recov-
ered with a low-pass filter with bandwidth fmax, as shown in Figure 3.3a. However, if the sampling 
frequency is lower than twice fmax, that is, f
f
s < 2
max, the sidebands will contribute to the frequency 
content inside the baseband (Figure 3.3b), so that its frequency content is permanently altered as 
Sampling
process
Sampling frequency
Continuous-time
signal
Discrete-time
sampled signal
s(t)
s∗(kTs)
1
fs =
Ts
Ts
t
kTs
Samples
FIGURE 3.2  Schematization of the sampling process, which extracts discrete samples s*(kTs) from the 
­continuous-time signal s(t) spaced by Ts time intervals.

142
Environmental Systems Analysis with MATLAB®
shown in Figure 3.3c, and no recovery of the original signal is possible by subsequent low-pass fil-
tering. This alteration is termed aliasing, meaning that a frequency alias creeps into the baseband 
causing distortion. To avoid aliasing, the sampling frequency should satisfy the so-called Nyquist 
constraint
	
f
f
f
s
N
max <
=
2
	
(3.3)
which guarantees that sampling will not produce aliasing, by keeping the sidebands separate, as 
in Figure 3.3a. In general, the signal bandwidth fmax is not known in advance, and Equation 3.3 is 
often used in reverse by pre-filtering of the signal with an anti-aliasing low-pass filter that limits the 
signal bandwidth to a prescribed upper limit f
fN
max 
 so that Equation 3.3 is amply satisfied and the 
subsequent sampling does not produce aliasing. The other possibility is to act on the opposite end of 
the inequality f
fN
max 
 by increasing the sampling frequency. This approach, however, may have 
some drawbacks, such as the need for more sophisticated data acquisition systems or the increased 
dimension of the collected data, with obvious storage and handling problems.
To recast the aliasing problem in the more familiar time domain, Figure 3.4 shows two differing 
samplings of the same sinusoid with frequency f =1.333Hz. In the first case of Figure 3.4a, the 
sampling frequency fs = 10Hz is well above the Nyquist limit and no aliasing occurs
fs
Signal
base band
2
fs
0
Side band
created by sampling
Side band
created by sampling
Signal
base band
fs > fmax
− fmax
fmax
0
− fmax
− fmax
fmax
− fs
− fs
fs
2
fs < fmax
2
Intrusion of side band
into the base band
Intrusion of side band
into the base band
Distorted
base band
(a)
(b)
(c)
fmax
FIGURE 3.3  Sampling a continuous-time signal results in a proliferation of its original frequency spectrum 
with infinite replicas centred at multiples of the sampling frequency fs. If the sampling frequency is larger than 
twice the maximum baseband frequency (a), then the baseband of the signal is unaffected, but if this condition 
is not satisfied, the sidebands invade the baseband (b) altering its frequency content (c).

143
Analysis of Environmental Time Series
	
f
f
f
f
s
s
=
=



>
⇒
1.333Hz
10Hz
No aliasing
2
	
(3.4)
but if the sampling frequency is lowered to fs =1Hz, then aliasing is produced. In fact,
	
f
s
=
=



<
⇒
1.333Hz
1Hz
Aliasing!
f
f
f
s
2
	
(3.5)
and the alias frequency fa can be computed as
	
fa
s
s
s
f
f
f
f
=
+




(
) −
=
2
2
mod
0.333Hz	
(3.6)
The result of this ‘under-sampling’ is that an unaware user will (erroneously) believe that the data 
were sampled from the dashed sinusoid in Figure 3.4b with frequency fa = 0.333Hz given by 
Equation 3.6.
3.2.1.2  Feasible Frequency Range and Sampling Frequency
The other important aspect of Equation 3.3 is that once fs is selected, the frequency analysis can be 
confined to the Nyquist limit frequency fN
sf
=
/2 because beyond this limit, the frequency spec-
trum is made of infinite (and useless) replicas of the baseband. In practice, sampled environmental 
time series comes in the form of data sets whose sampling period is determined by the people who 
actually collected the data and over which the system analyst has no control. If, for example, we 
know that a certain set of data was sampled 10 min apart, the frequency analysis can be extended 
at most up to f ≤
⋅
31/h. In fact,
	
T
f
f
s
s
=
=
→
=
→
≤
10
60
1
6
3
6 h
1/h
1/h	
(3.7)
so the feasible frequency range is 0–3 1/h. Further, the computer algorithms performing the DFT 
are generally known as fast FT (FFT) and solve the problem of having to process a huge number of 
coefficients. If N data were processed in the conventional way, the number of required arithmetical 
Original signal
Reconstructed signal
Samples
(a)
(b)
0
1
2
3
4
0
1
2
3
4
−1.0
−0.5
0.0
0.5
1.0
Time
Time
Amplitude
−1.0
−0.5
0.0
0.5
1.0
Amplitude
FIGURE 3.4  Sampling and reconstruction of a sinusoid using a sampling frequency satisfying the Nyquist 
constraint (a), and in violation of the Nyquist limit, causing aliasing (b), causing the original signal to be 
mistaken for an (erroneous) low-frequency sinusoid. This graph was obtained with the MATLAB script 
Ex _ Aliasing.m in the ESA _ Matlab\Exercises\Chapter _ 3\Time _ Series folder.

144
Environmental Systems Analysis with MATLAB®
operations would be in the order of N 2, whereas an FFT algorithm can do it in N ⋅
( )
log N  opera-
tions. Almost all FFT algorithms are happier if the number of data to be processed is a power of 2. 
There is an abundant specialized literature about the FFT algorithms and their computer implemen-
tation (Duhamel and Vetterli, 1990; Frigo and Johnson, 2005).
To clarify how the sampling frequency may change the appearance of environmental data, 
Figure 3.5 shows a week-long portion of a dissolved oxygen (DO) time series, automatically sampled 
at 1 h intervals, in the Arno River upstream of the city of Florence (courtesy of the Regional Agency 
for Environmental Protection, ARPAT).
The three graphs in the left column show the same portion of data sampled at 1, 2, and 4 h, respec-
tively, whereas the graphs in the right column show the corresponding frequency analysis. The peri-
odic components at 24 and 12 h are indicated by the dashed vertical lines. Each frequency graph is 
limited to frequencies up to f
f
N =
s/2, and as the sampling period Ts is increased, the graphs appear 
‘stretched’ to the right because the frequency range is decreased. The corresponding time graphs on 
the left appear increasingly ‘chunky’ as the distance between samples (indicated by dots) increases. If 
the sampling period were increased beyond the 12 h or the 24 h periodicity, some important circadian 
characteristics would be lost. In general, the guidelines for selecting Ts may be summarized as follows:
A short Ts implies 
•	 Expensive sampling equipment and procedures
•	 A large amount of data
•	 Capture of possible important high-frequency phenomena
•	 Redundant or poorly informative data
•	 Noise samples (containing no information)
•	 ‘Boring data’ (few significant variations, little information)
A long Ts implies
•	 Economical sampling equipment and procedures
•	 A small amount of data
•	 Possible information loss due to
•	 Cut-off of potentially important high-frequency f
fN
>
(
) phenomena
•	 Aliasing → Baseband distortion
3.2.1.3  Signal Components: Information, Artefacts, and Noise
The example of Figure 3.5 shows how the frequency components of the signal are distributed in the 
range (0–fs /2), and we are now in a position to reconsider the signal decomposition of Figure 3.1 
from a frequency viewpoint. Figure 3.6 shows that, generally, the information-rich part is situated 
in the low-frequency part of the spectrum. Seasonality and cyclic components usually have a well-
defined frequency range (e.g., hours, days, months), so they normally appear in the spectrum as fairly 
distinct lines, like the 12 h and 24 marks in Figure 3.5. The noise (random) component is usually 
confined to the high-frequency end of the spectrum. Artefacts, usually man-made non-periodic dis-
turbances due to mechanical or electrical interferences, are somewhere in the middle between cycles 
and noise, because, being short lived, they contain high-frequency components. This frequency 
partition is important in view of signal conditioning, which tends to preserve the meaningful part 
of the signal and discard the non-informative components. In principle, a low-pass filter could do 
the job, but given the frequent superposition of the components, we shall need more sophisticated 
algorithms to ‘separate the wheat from the chaff’.
3.2.1.4  MATLAB Implementation of Frequency Analysis
We now turn to describing the MATLAB® programming behind the graphs presented in Figure 3.5 
and more generally to illustrate the frequency analysis of a time series in this platform. The FFT is 

145
Analysis of Environmental Time Series
850
900
950
5
6
7
8
9
10
11
Time (h)
Data
Time-series samples
850
900
950
5
6
7
8
9
10
11
Time (h)
Data
Time-series samples
850
900
950
5
6
7
8
9
10
11
Time (h)
Data
Time-series samples
0.0
0.1
0.2
0.3
0.4
0.5
10−5
10−4
10−3
10−2
10−1
100
Freq (1/h)
Normalized power spectrum
Frequency spectrum for Ts = 1.000 h
0.0
0.05
0.10
0.15
0.20
0.25
10−5
10−4
10−3
10−2
10−1
100
Freq (1/h)
Normalized power spectrum
10−4
10−3
10−2
10−1
100
Normalized power spectrum
Frequency spectrum for Ts = 2.000 h
Frequency spectrum for Ts = 4.000 h
Power spectrum
24 h period
12 h period
Power spectrum
24 h period
12 h period
0.0
0.02
0.04
0.06
0.08
0.10
0.12
Freq (1/h)
Power spectrum
24 h period
12 h period
FIGURE 3.5  A dissolved oxygen time series in Arno River upstream of the city of Florence, sampled at 
­differing frequencies. Of course, only sampling frequencies lower than the original one can be used. The same 
portion of data is shown in the left graph and the corresponding frequency spectrum is shown in the right 
graphs, which extend up to the Nyquist frequency fN
s
= f /2. The 24 and 12 h period lines are traced in each 
frequency spectrum as vertical dashed lines. In the left graphs the dots represent the samples, connected with 
straight lines just for visual representation. These graphs were obtained with the MATLAB script Ex _ FFT _
Sampling _ Time.m in the ESA _ Matlab\Exercises\Chapter _ 3\Time _ Series folder.

146
Environmental Systems Analysis with MATLAB®
a basic MATLAB primitive (fft) and could, in principle, be used ‘as is’, but the correct graphical 
data presentation requires an additional bit of programming, which is listed in Box 3.1. After load-
ing the data set, which includes two distinct quantities (time and value), the sampling interval Ts is 
computed as the average time interval between consecutive samples (it is hoped that the sampling 
is uniform). The length of data is computed and the largest power of 2 subset is extracted. In fact, 
working with data sets of exactly 2L expedites the computation. Otherwise, the original data set 
would be padded with zeros until some 2L length is reached, prior to processing by the fft function. 
The FFT produces a set of coefficient Y, which is a vector of the same length as the 2L data portion. 
Because they cover the symmetrical spectrum around the origin, only half of them need to be plot-
ted. The frequency range (0–fs/2) for the plot is created with the command
	
f = Fs/2*linspace(0,1,N_samples/2+1); 	
(3.8)
which shows that the FFT produces a discrete frequency spectrum (a line spectrum) with the com-
ponents spaced by Fs/N _ samples. The single-sided normalized power spectrum is computed as
	
abs(Y(1:N_samples/2+1)/abs(Y(1))).	
(3.9)
Because the spectral components Y are complex numbers, abs(Y) is equivalent to 
sqrt(Y.*conj(Y)) where conj produces the conjugate of a complex number. Remember that the 
FFT produces a bilateral frequency spectrum, so in command (3.9) only half the coefficients need 
to be plotted, and hence the indexing of the vector Y of command (3.8). The frequency spectrum 
may be presented on a linear or log scale, depending on their spread and on which characteristics we 
are most interested in. The MATLAB script of Box 3.1 was used to produce the frequency analysis 
presented in Figure 3.5.
3.3  SIGNAL REGULARIZATION
Now that the basic features of the time series have been explored in both the time and frequency 
domains, we can set out to improve their characteristics and remediate possible flaws. The opera-
tions that can be performed include detrending, detection and removal of outliers, smoothing and 
replacement of missing data, usually accomplished in this order.
3.3.1  Detrending
With the decomposition of Figure 3.1 in mind, the first component to be removed is the trend. This 
operation can be done by subtracting from the data the fitted least-squares line (regression line). 
f
Trend
Cyclicity
Seasonality
Noise
Artefacts
Low
frequency
Middle
frequency
High
frequency
Very low
frequency
Stochastic processes
2
fs
s ( f )
FIGURE 3.6  Frequency allocation of the signal components of Figure 3.1.

147
Analysis of Environmental Time Series
MATLAB provides the specific function detrend to do this job. Otherwise, this can be done 
with polyfit to compute the regression line coefficients and then subtract the linear contribution 
thus obtained from the data with the polyval function. The coefficients of the regression line are 
computed with the command b = polyfit(x,y,1), where 1 indicates that we are fitting a line 
to the data, and the trend line is given by y_trend=b(2)+b(1)*x. If b(1) ≠ 0, there is a data 
trend. The detrended data are then obtained by subtracting the trend line from the data, that is, 
y_detrend=y-y_trend. Both detrending methods are demonstrated in the MATLAB script of 
Box 3.2, and a sample detrended time series is shown in Figure 3.7. The detrended data have zero-
mean value, and this can be useful when detrending several data sets before joining them to produce 
a longer stationary time series.
3.3.2  Outliers Detection and Removal
Odd data may occur in any time series and, if overlooked, can disrupt all subsequent regularization 
operations. Therefore, these ‘strange’ data, usually referred to as outliers, should be dealt with prior 
to any further data processing, apart from detrending.
BOX 3.1  BASIC STRUCTURE OF THE MAIN SCRIPT 
FOR THE FREQUENCY ANALYSIS
The FFT function computes the fast Fourier transform of the data. It is advisable 
to select a power of 2 portion of the data for computational efficiency. The full 
MATLAB script (Ex _ FFT _ sampling _ time.m) can be retrieved from 
the ESA _ Matlab\Exercises\Chapter _ 3\Time _ Series folder.
% load the data
g=uigetfile(‘*.mat’,‘Load raw data’);
eval([‘load’ g]);
% In the data file t is the time and q is the data set
% Ts is the sampling interval
% Define the kind of plot (linear or Log)
plotlog=1; % Select the linear plot
dt=diff(t); % Find the sampling intervals 
Ts=mean(dt); % The sampling time is the average sampling intervals
Fs=1/Ts;     % Sampling frequency
% Frequency analysis
L=length(q); % Compute the time-series length
% Next power of 2 in the data length
N_samples = 2^(nextpow2(L)-1); 
% Compute the FFT of the power-of-2-long data set
Y = fft(q,N_samples)/L; 
% Compute the frequency range for plotting up to the Nyquist limit
f = Fs/2*linspace(0,1,N_samples/2+1); 
switch plotlog
	
case 1 % Linear plot
plot(f,abs(Y(1:N_samples/2+1)/abs(Y(1))))
	
case 2 % Log plot
semilogy(f,abs(Y(1:N_samples/2+1)/abs(Y(1)))) 
end
% Downstream processing
% ……………………………………………..

148
Environmental Systems Analysis with MATLAB®
BOX 3.2  MATLAB SCRIPT FOR DATA DETRENDING
The full MATLAB script (Ex _ Detrending.m) can be retrieved from the 
ESA _ Matlab\Exercises\Chapter _ 3\Time _ Series folder.
%% load the data
g=uigetfile(‘*.mat’,‘Load raw data’);
eval([‘load ’ g]);
figure(1)
% Plot original data
plot(t,q,‘.-’)
hold on
% Perform detrending
qt=detrend(q);
plot(t,qt,‘:r’)
%
%% Home-made detrending
% Compute regression coefficient
yp=polyfit(t,q,1);
% Compute regression line
yt=polyval(yp,t);
plot(t,yt,‘--k’,‘LineWidth’,2)
% Subtract regression from the data
ydt=q-yt;
% Plot detrended data
plot(t,ydt,‘:g’)
0
6
12
18
24
−200
−100
0
100
200
300
400
500
600
700
Time (h)
Flow (m3/h)
Original data
Detrended data
Trend line
FIGURE 3.7  An example of detrended data, with zero-mean value. The trend line, which is subtracted 
from the original data, is also shown. This graph was obtained with the MATLAB script Ex _ FFT _
Detrending.m in the ESA _ Matlab\Exercises\Chapter _ 3\Time _ Series folder.

149
Analysis of Environmental Time Series
There are several definitions of outliers and consequently different ways to treat them, but first their 
very presence should be questioned. Are they just wild data produced by error or by some kind of arte-
fact, or instead is there a reasonable explanation for their presence? Once their lack of significance has 
been assessed, there are several ways to eliminate them or bring them back into the fold of ‘good’ data.
An outlier is a sample that lies at an abnormal distance from other values in a coherent data set. This 
is, of course, a very subjective definition. A more objective definition may be formulated in statistical 
terms, for example, as the data lying outside the first and fourth quartile of the data population. This is a 
very severe restriction because it assumes that the time series is fairly stationary, with the well-behaved 
data remaining in the two central quartiles. This definition could be somewhat relaxed if we extend the 
tolerance band outwards and consider as outliers the data outside the bracket between, say, the 10th 
and the 90th percentiles. Figure 3.8 applies this definition to the same data of Figure 3.7, from which it 
appears that this definition may be unsuitable for data with a cyclic fluctuation. In fact, labelling as outli-
ers the data with the smallest values at the beginning of the series is clearly unfair, although the data with 
peak values in the second half of the record do deserve to be classified as outliers.
Another possibility is to consider the data rate of change. Assuming that in nature, abrupt variations 
are rare and that data usually vary with a limited rate, the new outlier definition could be based on an 
abnormal rate of change, rather than on the value itself. So if the data rate of change ∆sk is computed as
	
∆s
s t
s t
t
t
k
N
k
k
k
k
= (
) −( )
−
=
+
k 1
,
,
+1
1 
	
(3.10)
then the percentile discrimination is applied to the ∆sk sequence rather than to the data, and the 
samples for which ∆sk falls outside the 10th–90th percentile bracket may be considered as outliers. 
This procedure is applied to the same data series of Figure 3.8, and the result is shown in Figure 3.9. 
The rate of change is checked for compliance with the 10th–90th percentile bracket, and the data 
whose rate of change is outside this band are marked as outliers, as shown in Figure 3.9c. It can be 
seen that this new definition is fairer on the data with a definite cyclic component and penalizes data 
with a large sudden variation from their neighbour.
0
6
12
18
24
0
100
200
300
400
500
600
700
Time (h)
Data
0
200
400
600
800
0.0
0.2
0.4
0.6
0.8
1.0
Data range
Cum. distr.
Good data
Outliers
(a)
(b)
FIGURE 3.8  Definition of outliers on the basis of percentiles. The data falling outside the 10th–90th per-
centiles of the cumulative distribution (thick line in (b)) are considered as outliers (shown as hollow squares 
in (a)). Notice how inappropriate this definition may be for the initial data. These graphs were obtained 
with the MATLAB script Ex _ Outliers _ Perc _ Rates.m in the ESA _ Matlab\Exercises\
Chapter _ 3\Time _ Series folder.

150
Environmental Systems Analysis with MATLAB®
Other outlier definitions are obviously possible and can be defined for specific contexts and 
needs. This issue will be reconsidered in conjunction with data smoothing, labelling as outliers the 
data with a significant departure from their smoothed counterpart.
3.3.3  Denoising through Approximating Splines Smoothing
After having assessed the data both in the time and frequency domains, and having removed the 
wild data as outliers, we now turn to the task of removing, or at least reducing, the noise affecting 
the data, which as we have seen, is generally confined to the high end of the frequency spectrum.
There are several good reasons why we may want to ‘denoise’ a time series. Noise affects data 
accuracy and may mask important information, essential for modelling, calibration, forecasting 
and so on. Further, noisy signals cannot be numerically differentiated, and this may become a seri-
ous limitation whenever the information we are seeking is contained in the data time derivative. 
Differentiation of a noisy signal amplifies the noise, with obvious disruption of the information 
contained in the data. Therefore, data smoothing prior to numerical differentiation is essential, and 
in this chapter, we shall consider two smoothing techniques, based either on spline approximation 
or on wavelet filtering.
Smoothing is a numerical technique to decrease the data ‘roughness’ and represents a simple 
and effective way of reducing the unwanted disturbance in the data, especially in anticipation of 
their numerical differentiation. It is based on the approximating properties of a family of functions 
named splines (De Boor, 2001), reminiscent of the bygone flexible ruler used to draw curves with 
china ink and tracing paper, that preserve derivative continuity. A spline is a numeric function that 
is piecewise defined by polynomials, each of which approximates the function in a specific portion 
of the domain. All these polynomials are connected to each other at specific points (knots) in a way 
that preserves derivative continuity up to a certain order. Figure 3.10 shows how a function f x( ) can 
be approximated by a collection of splines whose knots are placed at strategic positions along the 
domain. The placing of knots and the universal approximating properties of splines can be found 
in the specific literature (De Boor, 2001) and it will not be discussed here, being beyond the scope 
of this book.
0
6
12
18
−3000
−2000
−1000
0
1000
2000
3000
Time (h)
Data rate
−5000
0
5000
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Data rate
Cum. distr.
0
6
12
18
24
0
100
200
300
400
500
600
700
Time (h)
(a)
(b)
(c)
24
Signal outliers
Rate outliers
FIGURE 3.9  Outliers definition on the basis of maximum allowable rate. The data rate of change is shown in 
(a), with the squares indicating the values outside the 10th–90th percentile bracket (b). The resulting outliers 
are shown in (c). This method provides a fairer outlier detection, with a penalty on abnormal rate of change. 
These graphs were obtained with the MATLAB script Ex_Outliers_Perc_Rates.m in the ESA _
Matlab\Exercises\Chapter _ 3\Time _ Series folder.

151
Analysis of Environmental Time Series
We have already encountered the problem of approximating a function in a least-squares sense, 
that is, by minimizing the sum of squared errors. In fact, this has represented the main objective 
of Chapter 2 that dealt with model identification. Now, we require an additional property of the 
approximation: smoothing. Approximating splines smoothing is a trade-off between two conflicting 
objectives:
•	 Information conservation, which tends to place the approximation as close as possible to 
the data.
•	 Smoothing, which tends to distance the approximation from the (noisy) data.
An attractive way of reconciling these two opposite features is to define the objective function as a 
combination of the approximating and smoothing effects
	
p
y k
ys k
p
t d ys k
dt
dt
( )
( )
−
(
) +
−
(
)
( )
( )
∫
approximation





2
2
2
2
1
λ
smoothing





k
N
=∑
1
	
(3.11)
and to seek its minimum with respect to the smoothing parameter p∈(
)
0,1 . If p = 1, we get the 
interpolating spline, with no smoothing effect. As p is decreased from 1 towards 0, the emphasis 
in Equation 3.11 will gradually shift from approximation to smoothing until, for p = 0 the least-
squares regression line is obtained. There is no general rule for selecting the right p value, which is 
strongly data dependent. The MATLAB function
	
ys=csaps x,y,p
(
)	
(3.12)
provides an ‘adjustable’ cubic spline in which the smoothing parameter p determines the relative 
importance of one term over the other and should be selected by the user. The output of Equation 3.12, 
ys, is the smoothed version of the original data y, whereas x is the independent variable; in our case, 
the time t, and p is the smoothing parameter. There are several factors that can assist in deciding 
the right amount of smoothing. Insufficient smoothing may leave too much noise in the data and 
thus fail its denoising purpose. On the other hand, too much smoothing may erode the information 
contained in the data, making them less informative. The frequency analysis can be used to compare 
the frequency spectra before and after smoothing, checking which frequencies have been attenuated, 
remembering the relative location of the signal components illustrated in Figure 3.6. Therefore, the 
smoothing is expected to have the highest impact on the medium-to-high frequencies. Figure 3.11 
shows the smoothing of a flow time-series data sampled at 1 h intervals by varying the smoothing 
parameter p.
x
f (x)
Spline knots
Cubic spline
(a)
(b)
FIGURE 3.10  Approximation of a function f x( ) (solid curve) by local cubic splines (dashed curves) with 
suitably placed knots (a). A cubic spline is composed of seven polynomial segments connected at the knots as 
shown in (b).

152
Environmental Systems Analysis with MATLAB®
2
4
6
8
10
12
0.0
Freq (1/h)
2
4
6
8
10
12
0.0
Freq (1/h)
0
500
1000
2
4
6
8
10
12
14
Time (h)
0
500
1000
Time (h)
0
500
1000
Time (h)
Smoothed data with p = .5
Smoothed data with p = .05
Smoothed data with p = .005
0.0
Freq (1/h)
0
500
1000
2
4
6
8
10
12
14
16
18
Time (h)
Time-series samples
0.0
10−3
10−2
10−1
100
Freq (1/h)
Norm. pwr. spectrum
10−3
10−2
10−1
100
Norm. pwr. spectrum
10−3
10−2
10−1
100
Norm. pwr. spectrum
10−3
10−4
10−2
10−1
100
Norm. pwr. spectrum
Flow (m3/h)
Flow (m3/h)
Flow (m3/h)
Flow (m3/h)
0.5
0.5
0.5
0.5
FIGURE 3.11  The effect of the smoothing parameter p on a noisy time series of flow data sampled at 1 h 
intervals. The time portraits (left column) show the progressive loss of the ‘spiky’ features as the smooth-
ing is increased (p is decreased). This is confirmed by the frequency analysis (right column) where the high 
end of the spectrum is progressively attenuated. The dashed lines in the frequency portraits indicate the 24 
and 12 h cycles. These graphs were obtained with the MATLAB script Ex _ Spline _ Smooth.m in the 
ESA _ Matlab\Exercises\Chapter _ 3\Time _ Series folder.

153
Analysis of Environmental Time Series
The progressive high-frequency loss as p is decreased is apparent in the frequency portraits 
(right column). It is up to the user to decide which portion of the spectrum can be cut out in the 
smoothed signal. Apart from improving the signal-to-noise ratio, smoothing may have two other 
applications: the replacement of missing data and the detection of outliers.
3.3.3.1  Replacement of Missing Data and Data Enhancement
Data in a time series may be missing as a consequence of a faulty equipment, or because some sam-
ples have been declared as outliers and removed. The approximating smoothing spline may be used 
to replace a limited amount of missing data with their corresponding approximation. Figure 3.12 
shows a time series in which some data have been deleted. In the MATLAB file, this was accom-
plished by replacing the numerical values of the samples that we wanted to consider as missing with 
NaN (Not a Number). NaN’s in a numeric data vector are simply ignored when the data are pro-
cessed, and in particular, they are not plotted. In Figure 3.12, they are shown as hollow squares to 
indicate their position in the original file, but the approximating spline does not consider them when 
performing the data smoothing, for which only the remaining data (solid dots in the graph) are used. 
The reader can compare the relative position of the reconstructed data (filled squares) with respect 
to the original, but unknown, missing data (hollow squares). The solid line joining the known data 
becomes dashed when connecting reconstructed data.
The importance of a wise selection of the smoothing parameter p in missing data reconstruc-
tion is highlighted in Figure 3.13, in which the same portion of a data set including three missing 
samples was reconstructed with three differing choices for p = .99 (very close to the data, with little 
smoothing), p = .5 (medium smoothing) and p = .01 (strong smoothing). A large p value, favouring 
data fidelity, produces the closest approximation to the missing data, while the other two choices 
yield poor reconstruction. Further, the longer the data gap, that is, the number of consecutive miss-
ing data, the more uncertain will be the reconstruction, so this technique must be applied with great 
care and without excessive expectations. In fact, it is appropriate for replacing isolated missing data, 
but not for reconstructing more than a few consecutive missing data, for which specific techniques 
are available.
p = .9
12
200
300
400
500
600
Time (h)
Flow (m3/h)
Available data
Missing data
Reconstructed data
Time-series reconstr.
FIGURE 3.12  Missing data reconstruction using smoothing splines with p = .9. The hollow squares rep-
resent the missing data and the filled squares are their replacement obtained by spline smoothing. The line 
joining the data is dashed when it connects reconstructed data (filled squares). This graph was obtained 
with the MATLAB script Ex _ Spline _ Missing _ Data.m in the ESA _ Matlab\Exercises\
Chapter _ 3\Time _ Series folder.

154
Environmental Systems Analysis with MATLAB®
An example of denoising through smoothing is shown in Figure 3.14, in which the DO circadian 
fluctuations are apparent, though partly masked by noise. The latter can be removed by spline smoothing, 
with the selection of p monitored by checking the frequency spectrum. It can be seen that the smaller the 
value of p, the more pronounced is the noise removal, without affecting the daily pattern, marked by the 
dashed line corresponding to the 24 h period.
Data enhancing via spline smoothing may be used when preparing input files for ecosystem simu-
lation. Often, there are not enough experimental data to perform a long-range simulation, or the data 
are too sparse. In this case, applying an approximating smoothing spline to the data produces a data 
file with ample, well-behaved data, which can be used as input to the simulation model. Figure 3.15 
shows the water quality data enhancement required to provide the inputs to the Massaciuccoli Lake 
simulation model (Giusti et al., 2011b) developed in Aquatox (Park and Clough, 2014).
300
350
400
450
500
550
600
650
Time (h)
Time (h)
Time (h)
p = .99
p = .5
p = .01
(a)
(b)
(c)
Known data
Missing data
All data smoothing
Missing data smoothing
Flow (m3/h)
300
350
400
450
500
550
600
650
Flow (m3/h)
300
350
400
450
500
550
600
650
Flow (m3/h)
FIGURE 3.13  Differing choices for p produce very different reconstructions of the missing data. In (a), a p 
near unity produces a fairly close reconstruction of the three missing data (hollow squares). In (b), the medium 
smoothing (p = .5) yields regular data and good reconstruction of all but one missing data, while in (c), the 
very small value of p makes the reconstructed data too far from the originals.
Time (h)
p = .007
p = .07
p = .7
50
100
150
200
250
350
300
0
DO (mg/L)
10
8
6
10
8
6
10
8
6
Original data
10
8
6
Norm. Power spectrum
100
p = .007
p = .07
p = .7
Original spectrum
Attenuated noise
due to smoothing
Frequency (1/h)
Noise in the
original signal
10−2
10−4
100
10−4
100
10−4
100
10−4
10−1
FIGURE 3.14  An example of FFT-assisted smoothing of a dissolved oxygen time series in the Orbetello 
lagoon (thin black line in the upper-left plot). The smoothing effect is clearly reflected in the frequency spec-
tra, where the effect of noise attenuation is quite evident, without disrupting the basic time pattern. The dashed 
line in the spectra corresponds to the 24 h period, which is unaffected by smoothing.

155
Analysis of Environmental Time Series
3.3.3.2  Outliers Revisited
The use of smoothing approximations can lead us to reconsider the definition of outliers in the light 
of data regularization. In fact, we can now assess the consistency of the data by comparing the 
raw data with their smoothed version and consider as outliers the samples for which the difference 
between raw and smoothed values exceeds a certain threshold. So we are again considering the 
definition of outliers in terms of a derived quantity, as in Figure 3.9, which in this case is represented 
by the residuals defined as the difference between the original and the smoothed data. Figure 3.16 
shows a new definition of outlier, represented by data whose difference with the smoothed data is 
outside the 10th–90th percentile bracket. Of course, this definition is heavily p-dependent as the 
number of outliers will tend to increase with the amount of smoothing. In this example, p = .99 
was selected, so that the smoothing approximation (thick dashed line) is still reasonably close to the 
data. If a lower p is selected, then the number of outliers will increase considerably.
Because we are dealing with residuals, their characteristics may be regarded as a further check 
for the choice of p. In fact, we have seen in Chapter 2 the importance of checking the residual 
autocorrelation and normality, and we can now use these characteristics as further guidance in 
the selection of the smoothing parameters. Figure 3.17 shows the autocorrelation of the smoothed 
DO data of Figure 3.14 smoothed with p = .7. A lower p would have caused a proliferation of 
outliers, whereas, on the other hand, a 1-lag autocorrelation is acceptable in view of moderate 
smoothing.
3.3.4  Time-Series Synthesis
Separating the components of a time series may assist in the synthesis of more series, to enhance 
the input library of model simulation. As previously noted, the two main constituents of a time 
series are the deterministic pattern and the stochastic disturbance. We are now in a position to 
shape or alter each element and produce more synthetic time series by recombining them as shown 
in Figure 3.18. In this procedure, the deterministic part may be viewed as a kind of ‘average’ 
behaviour determined by the primary environmental agents, which can be predicted on the basis 
of a sufficiently comprehensive historical data set describing the typical behaviours to be expected 
0.0
1.0
2.0
3.0
Jan
Apr
Jul
Oct
Jan
Jan
Apr
Jul
Oct
Jan
Jan
Apr
Jul
Oct
Jan
0.0
0.5
1.0
1.5
NH4
+ (mg L−1)
BOD5 (mg L−1)
NO3
− (mg L−1)
PO4
3− (mg L−1)
TSS (mg L−1)
0.0
0.2
0.4
0.6
0.8
Data
Spline smoothing
Data
Spline smoothing
Data
Spline smoothing
Jan
Apr
Jul
Oct
Jan
Jan
Apr
Jul
Oct
Jan
0
5
10
15
0
50
100
150
200
Data
Spline smoothing
Data
Spline smoothing
FIGURE 3.15  Data enhancement via smoothing splines to construct sufficient data for feeding a wetland 
water quality model. (Reprinted with permission from E. Giusti et al. 2011b, Water Science & Technology, 63, 
2061–2070, IWA Publishing.)

156
Environmental Systems Analysis with MATLAB®
0
6
12
18
24
0
200
400
600
800
Time (h)
Original data
Smoothed data
0
6
12
18
24
−200
−100
0
100
200
300
Time (h)
Residuals (m3/h)
−200
−100
0
100
200
300
0.0
0.2
0.4
0.6
0.8
1.0
Data range
Cum. distr.
Residuals
Outliers
Flow (m3/h)
(a)
(b)
(c)
FIGURE 3.16  Outliers detection using a smoothing spline with p = .99. (a) compares the original and 
smoothed data. (b) plots their differences (residuals), while (c) shows their cumulative distribution, defining 
as outliers the data whose residuals lie outside the 10th–90th percentile bracket. These graphs were obtained 
with the MATLAB script Ex _ Spline _ Smooth _ Outliers.m in the ESA _ Matlab\Exercises\
Chapter _ 3\Time _ Series folder.
0.5
0.0
−0.5
50
100
150
200
250
300
350
DO residuals (mg/L)
Time (h)
Outlier threshold
Non-zero autocorrelation for 1 lag
0.50
1.00
0.00
1
19
3
17
5
15
7
11
9
13
Lag
(a)
(b)
FIGURE 3.17  Residual autocorrelation analysis of the DO data of Figure 3.14 for p = .7. (a) shows the time 
plot of the residuals with the outliers limits set by the cumulative distribution, while (b) shows their autocor-
relation. The non-zero 1-lag autocorrelation is acceptable vis-à-vis the limited number of resulting outliers. 
A smaller p would have produced a much larger number of outliers. The Lilliefors test suggests rejecting the 
normality hypothesis for the residuals distribution.

157
Analysis of Environmental Time Series
in that context. Conversely, the stochastic part is the random component, influenced by secondary 
environmental agents, and by its very nature it is not predictable from the past observations. Yet, 
this part too is generally context dependent in terms of autocorrelation and probability density 
function. 
In defining the characteristics of the deterministic module of the time series, several aspects 
must be considered. The time series normally contains circadian periodicities due to the cyclic vari-
ability of the environmental variables on a daily/weekly/monthly/yearly basis. Examples of this are 
the daily periodicity of wastewater flow and organic load, both linked to the daily cycle of human 
activities, or the daily periodicity of DO in rivers and lakes due to the solar radiation, which stimu-
lates photosynthesis. Other ‘typical’ periodic behaviours in domestic wastewater may be due to 
differing weekdays and weekend habits, whereas in natural waters, the DO daily patterns strongly 
differ in summer and winter. So it is important to define a criterion to decide under which circum-
stances a behaviour is considered representative, its period and the typical conditions under which 
it occurs. By observing a large number of similar behaviours, the typical features of this pattern 
can be isolated and will form the basis for the deterministic component of the synthetic time series.
As an example, Figure 3.19 (Marsili-Libelli, 2004) shows two sets of observed daily data from 
which representative patters have been extracted. In (a), 30 daily patterns of DO in the Orbetello 
lagoon were recorded during April 2001. The strong increase around noon is due to the intense algal 
activity, as will be better explained in Chapter 8, and the typical hourly behaviour (thick line) is 
obtained as the mean of the observations. In (b), five typical loading patterns were observed at the 
Deterministic part
Stochastic part
Synthesized time-series
FIGURE 3.18  Time-series synthesis by combining the deterministic and stochastic components.
4
6
8
10
12
14
16
DO (mg/L)
0
6
12
18
24
Time of day
(a)
150
200
250
300
350
400
Flow (m3/h)
0
6
12
18
24
Time of day
1
2
3
4
5
(b)
FIGURE 3.19  Typical patterns isolation in daily recurring behaviours. (a) shows the circadian evolution of 
dissolved oxygen in the Orbetello lagoon, whereas (b) shows five typical daily loading profiles of a wastewater 
treatment plants. (Reproduced with permission from Marsili-Libelli, S., Ecol. Model., 174, 67, 2004.)

158
Environmental Systems Analysis with MATLAB®
input to a small wastewater treatment plant treating domestic reject water. The five observed typical 
loading patterns have the following explanations:
	
1.	Low load (summer)
	
2.	Medium load with wide daily variability
	
3.	High load with large daily variability
	
4.	Low load with moderate daily variability
	
5.	Medium load with average daily variability
While the extraction of the daily patterns is fairly simple, the identification of the stochastic com-
ponent is more complex and hinges on the ability to identify the noise-generating stochastic process 
in terms of autocorrelation and probability density function. Figure 3.20 shows the four steps in the 
synthesis of environmental time series. First, the deterministic pattern is isolated. There may be a 
collection of possible patterns, such as the ones in Figure 3.20b for the daily wastewater loading 
profiles. The residuals (observation pattern) are then analysed for autocorrelation (Figure 3.20c) and 
distribution (Figure 3.20d). Then, more random data series can be generated with these characteris-
tics and summed back to the pattern to obtain a synthetic time series. The resulting time series may 
look like the one shown in Figure 3.21.
3.3.4.1  Wind Time-Series Synthesis for Lagoon Simulation
Wind is the prime mover in shallow water, such as the Orbetello lagoon on the Tyrrhenian coast 
of central Italy (see the inset in Figure 3.22). In the development of a comprehensive lagoon water 
quality model (Giusti and Marsili-Libelli, 2006), the wind modelling was included as an input gen-
erator for long-term simulation to understand the role played by the wind in determining the water 
movement and the dispersal of seeds, the basis for submerged vegetation expansion.
(a)
Isolate the deterministic part of
experimental time-series by smoothing
(b)
Compute the residuals
0
50
100
150
200
250
300
0
100
200
300
400
500
600
Time (h)
0
50
100
150
200
250
300
−300
−200
−100
0
100
200
300
Time (h)
Residual flow (mc/h)
(d)
Fit a Gaussian distribution to
the histogram (Lilliefors test: OK)
(c)
Compute the autocorrelation and check for
periodic components (in this case 1 h)
Resid. autocorr.
−300 −200 −100
0
100
200
300
0.00
0.02
0.04
0.06
0.08
0.10
0.12
0.14
Residual flow (mc/h)
Rel. freq.
−0.4
−0.2
0.0
0.2
0.4
0.6
0.8
1.0
0
5
10
15
20
Lag
Original residuals
Synthetic residuals
Flow (m3/h)
FIGURE 3.20  The four steps in constructing a synthetic time series. First, isolate the deterministic trend (a), 
then analyse the residuals (b–d) to generate more random patterns which can be summed to the basic deter-
ministic trend (a) to produce an endless number of combinations.

159
Analysis of Environmental Time Series
0
100
200
300
400
500
600
50
100
150
200
250
300
350
400
450
500
Try to smooth out the joining
point, though noise may mask
the effect
Time (h)
Flow (m3/h)
FIGURE 3.21  Two synthetic time-series modules are joined together to produce a longer record of synthetic 
data. There may be a joining problem that could be avoided by careful matching the initial and final deriva-
tives, though the noise may partially mask the discontinuity.
20 40 60 80
30
210
60
240
90
120
150
330
180
0
270
300
20 40 60 80
30
210
60
240
90
270
120
150
330
180
0
20 40 60
300
Orbetello
lagoon
FIGURE 3.22  Wind statistics observed in the two ponds of the Orbetello lagoon. (Reproduced with permis-
sion from Giusti, E. and Marsili-Libelli, S., Ecol. Model., 196, 379, 2006.)

160
Environmental Systems Analysis with MATLAB®
The model was based on three years (2001–2004) of data acquired by two fixed stations placed 
in the middle of the two ponds that form the Orbetello lagoon. From those data, it was observed 
that the wind distribution in the two basins is substantially different, given the differing shield-
ing provided by the Monte Argentario promontory on the sea side. Therefore, two wind models 
were set up, one for each pond, with correlated time series. The available data were used to form 
the reference daily sequence. These data were originally sampled at 10 min intervals, with about 
20% of missing data. To fill the gaps, the most frequent value in the corresponding time slot was 
considered. Then, a synthetic daily value was extracted by considering the prevailing wind of the 
day as the one blowing for at least three consecutive hours with a constant direction and a speed 
of at least 0.5 m/s, which was assumed as the minimum wind speed required to produce a water 
movement. Several synthetic time series were obtained from these reference data by the following 
procedure:
	
1.	The deterministic trend was obtained by spline smoothing.
	
2.	The autocorrelation of the residuals was computed to determine the order of the AR model 
producing the stochastic component of the series.
	
3.	The synthetic sequence was then obtained by adding the residuals generated by the AR 
models to the deterministic trend data.
Further, because a correlation was observed between the same-day wind speeds in the two basins, 
a correlated noise was used to drive the AR models and conserve this feature in the synthetic data. 
The observed wind series were then decomposed as shown in Figure 3.23, with the smoothed part 
forming the deterministic backbone of the series and the stochastic part being further analysed for 
autocorrelation and normal probability density function.
In fact, the synthesized stochastic residuals should have the same autocorrelation as their observed 
counterparts. The order of the stochastic model was assumed equal to the first non-zero residual, that is, 
3, as shown in Figure 3.24, which compares the autocorrelation of the original and synthetic random time 
series, whereas the Gaussian distributions estimated from the wind samples are shown in Figure 3.25.
0
90
180
270
360
0
5
10
Days
wW (m/s)
Original time-series
Smoothed time-series
Deterministic
pattern
Stochastic part
Smoothed time-series
Residuals
Autocorrelation
↓
Model order
Normality
↓
Forcing function
Time-series synthesis
Stochastic
model
FIGURE 3.23  Extracting information from the observed wind data to construct a synthetic time series.

161
Analysis of Environmental Time Series
0
2
4
6
8
10
−0.5
0.0
0.5
1.0
Lag (d)
0
2
4
6
8
10
Lag (d)
0
2
4
6
8
10
Lag (d)
0
2
4
6
8
10
Lag (d)
Original time-series
Synthetic time-series
Original time-series
Synthetic time-series
Original time-series
Synthetic time-series
Original time-series
Synthetic time-series
Residual αE autocorr.
−0.5
0.0
0.5
1.0
Residual wE autocorr.
−0.5
0.0
0.5
1.0
Residual wW autocorr.
−0.5
0.0
0.5
1.0
Residual αW autocorr.
FIGURE 3.24  Autocorrelation of the observed and synthetic wind time series. (Reproduced with permission 
from Giusti, E. and Marsili-Libelli, S., Ecol. Model., 196, 379, 2006.)
−4
−2
0
2
4
−3
−2
−1
0
1
2
3
Residual wE (m/s)
Residual wW (m/s)
−100
−50
0
50
100
0.0
0.1
0.2
Rel. freq. (1/d)
0.0
0.1
0.2
Rel. freq. (1/d)
0.0
0.1
0.2
Rel. freq. (1/d)
0.0
0.1
0.2
Rel. freq. (1/d)
Residual αE (°)
−100
−50
0
50
100
Residual αW (°)
FIGURE 3.25  Fitting the experimental wind histograms obtained from the smoothed time series. The 
­normal distribution hypothesis passed the Kolmorogov–Smirnov test. (Reproduced with permission from 
Giusti, E. and Marsili-Libelli, S., Ecol. Model., 196, 379, 2006.)

162
Environmental Systems Analysis with MATLAB®
The correlated AR models for the wind direction and speed in the two basins were estimated 
from the data using the Yule–Walker method (Friedlander and Porat, 1984), which minimizes 
the forward least-squares prediction error based on the estimated autocorrelation function. The 
following four AR models were obtained for wind angle and speed in the two East and West 
ponds:
Angle East
( )
0.31863
(
1)
0.37667
(
2)
0.27547



α
=
α
α
E
E
i
i
i
−
⋅
−
−
⋅
−
−
E
⋅
−
+
⋅
= −
⋅
−
−



α
σ
α
α
Ei(
1)
( )
Angle West
( )
0.29189
(
1)
0.3
i
e
i
i
i
E
E
W
W
α
3872
(
2)
0.27405
(
3)
( )
Speed East
( )
⋅
−
−
⋅
−
+
⋅
= −



α
α
σ
W
W
W
W
E
i
i
e
w
i
α
i
0.28069
(
1)
0.36070
(
2)
0.28083
(
3)
(1
)
⋅
−
−
⋅
−
−
⋅
−
+
−



w
i
w
i
w
i
v
E
E
E
σW
w
W
E
w
E
W
W
e
i
v
e
i
w
i
w
i
⋅
+ ⋅
⋅
= −
⋅
−
−.
( )
( )
Speed West
( )
0.22924
(
1)
0 2
σ


9776
(
2)
0.25496
(
3)
(1
)
( )
( )
⋅
−
−
⋅
−
+
−
⋅
+ ⋅
⋅


w
i
w
i
v
e
i
e
i
W
W
W
w
W
E
w
E
σ
σ
v
i = ,…
1
,365
	(3.13)
The speed time series are driven by two independent normally distributed uncorrelated noise 
sources e
t
E ( ) and e
t
W ( ) with standard deviations σE and σW. To reproduce the observed same-
day speed correlation between the two basins, a driving function was constructed combining 
the two noises with the correlation coefficient v = 0.732. This provided consistently related 
time series with a correlation very close to the observed value of 0.7. The synthetic time series 
were obtained by adding the smoothed deterministic part (trend data) to the pertinent stochastic 
model, to obtain 
	
Angle East
trenddata
smoothing
stochastic
co
α
α
α
E
E
s
E
i
i
i
( ) =
+
( )
( )

mponent
Angle West
Speed East
α
α
α
W
W
s
W
E
E
s
i
i
i
w
i
w
i
( ) =
+
( )
( ) =
+
( )
( )



w
i
w
i
w
i
w
i
E
W
W
s
W
( )
( ) =
+
( )
Speed West
( )
	
(3.14)
A sample of a synthetic time series derived by the above method is shown in Figure 3.26, where it 
is compared to the original data.
3.4  WAVELET SIGNAL PROCESSING: ADAPTIVE COMBINATION 
OF TIME AND FREQUENCY ANALYSIS
The FT described in Section 3.2 performs a harmonic decomposition and reveals the frequency 
content of a time signal, but it has limitations: in addition to losing any time information, the signal 
is supposed to be stationary, meaning that the same frequency resolution is applied for any time 
portion of the signal. To overcome this limitation, in 1946, Gabor adapted the FT considering only 
a portion of the signal through a time window. This short-term FT (STFT) is a compromise between 
time and frequency, but its accuracy depends on the window width, which was the same for all 
frequencies, whereas many signals may require a more flexible approach, where the window can be 
adapted to the time and frequency features of the signal. Intense research ­spanning several decades 
has produced the wavelet transform (WT) that, adapting the time/frequency ­window to the signal 
characteristics, has shown great potential and applicability in many areas of science and engineer-
ing (Rioul and Vetterli, 1991; Vidakovic and Mueller, 1991; Heil, 1993; Strang, 1994; Graps, 1995; 

163
Analysis of Environmental Time Series
Goswami and Chan, 2008; Walker, 2008; Misiti et al., 2010; Yajnik, 2012). The WT provides an 
adaptive window with long time-intervals to analyse low-frequency phenomena, and short time-
intervals to analyse high-frequency phenomena. So the signal analysis is performed over a grid of 
time–frequency slots whose dimensions are adapted to the local signal characteristics. The qualita-
tive difference between the FT and the WT is shown in Figure 3.27.
0
90
180
270
360
0
90
180
270
360
0
90
180
270
360
0
90
180
270
360
0
90
180
270
360
0
90
180
270
360
0
5
10
0
5
10
Days
αE (°)
αW (°)
wE (m/s)
wW (m/s)
Original time-series
Smoothed time-series
FIGURE 3.26  Smoothed wind time series obtained from the wind data over the period 2001–2004. The thin 
dashed lines represent the original data and the thick solid lines are the smoothed deterministic component, 
obtained with p = .0924. (Reproduced with permission from Giusti, E. and Marsili-Libelli, S., Ecol. Model., 
196, 379, 2006.)
Time
Frequency
Time
Scale
frequency
Frequency
Amplitude
Time
Amplitude
Time
Amplitude
Time
Amplitude
FT
Wavelet transform
FIGURE 3.27  While the FT uses a set of constant sinusoids, the Wavelet Transform adapts the transforma-
tion to the signal local features through a bank of scalable wavelets.

164
Environmental Systems Analysis with MATLAB®
As the name suggests, a wavelet (‘little wave’) is non-zero only for a limited time span, as opposed 
to the ‘great wave’ used by Fourier, the sine function that exists from −∞ to +∞. A function qualifies 
as a wavelet ψ
( ) if it exists only in the finite interval (−T, T) and satisfies the following properties:
	
zero mean value
finite energy
ψ
ψ
ψ
ψ
u du
u du
u du
T
T
( )
=
( )
=
( )
=
−
−∞
∞
∫
∫
0
2
2 u du
T
T
( )
=
−
−∞
∞
∫
∫
1
	
(3.15)
In addition to the literature already cited, a very good tutorial is available online (http://users.rowan.
edu/~polikar/WAVELETS/WTtutorial.html). Many functions satisfy conditions (3.15), and the 
most popular wavelets are due to Haar, Morlet, Meyer and Daubechies, as surveyed by Heil (1993).
3.4.1  The Continuous Wavelet Transform
Like splines, wavelets use the concept of local approximation, here in two dimensions (time and 
scale). A signal is decomposed into a combination of ‘daughter’ wavelets, originated from a ‘mother’ 
wavelet, which can be adapted to the local signal properties, both in amplitude and in frequency, 
through the two basic operations of shifting and scaling. Given a generic wavelet ψ a b t
, ,
(
), where a 
and b represent the scaling and shifting factors, the continuous wavelet transform (CWT) is defined 
as the integral of the signal s(t) multiplied by the scaled and shifted wavelet ψ t a b
, ,
(
)
	
C a b
a
s t
t
b
a
dt
,
1
( )
(
) =
⋅
−




−∞
∞∫
ψ
	
(3.16)
If the wavelet is stretched a >
(
)
1 , it contains predominantly low frequencies and yields a global 
signal approximation including slowly changing, coarse features corresponding to low frequencies. 
Conversely, if it is shrunk a <
(
)
1 , the compressed wavelet contains predominantly high frequencies, 
and yields a detailed portrait of the rapidly changing details in a small portion of the signal s t( ). 
Thus, high scales correspond to stretched wavelets, which consider in coarse details a large portion 
of the signal (the signal is zoomed out), whereas the low scales correspond to compressed wavelets, 
providing insight into a small portion of the signal, of which the fine details will be revealed (the 
signal is zoomed in). Through shifting and scaling, shown in Figure 3.28, the entire signal is cov-
ered in an adaptive way.
In principle, the CWT of a signal is performed through the following steps:
	
1.	Select a wavelet (some examples of which are shown in Figure 3.29) and compare it to an 
initial portion of the signal.
	
2.	Calculate a number (c) that adapts the wavelet to that signal section. The magnitude of c is 
a measure of the similarity between the signal portion and the wavelet.
	
3.	Shift the wavelet forward and repeat steps 1 and 2 to cover the whole signal.
	
4.	Repeat steps 1 through 3 with a different scale.
	
5.	Repeat steps 1 through 4 for all scales.
The CWT produces a huge amount of coefficients, and the results are difficult to interpret. They are 
often presented in graphical form, as in Figure 3.30, where it is applied to a sine wave with a sudden 
frequency change.
The scales used in this example are up to the fifth power of two 2
32
5 =
(
). The FT would have 
been incapable of adapting to the frequency change at t = 500 and detect the exact instant when 
the break occurred, whereas the wavelet coefficients change to adapt to the discontinuity. In the 

165
Analysis of Environmental Time Series
graphical representation of the coefficients, the time/scale graph associates a colour with the 
­magnitude of the c coefficient, indicating that they are large at scales near the frequencies of the 
signal or near discontinuities. The CWT detects both the abrupt transitions and the steady oscilla-
tions in the signal. The central break in the middle of the signal affects the CWT coefficients at all 
scales. On the other hand, the maxima and minima of the steady-state sinusoid are represented by 
0
1
2
3
4
5
6
7
0
1
2
3
4
5
6
7
0
1
2
3
4
5
6
7
0
1
2
3
4
5
6
7
−1
0
1
−1
0
1
−1
0
1
−1
0
1
−1
0
1
−1
0
1
2
1
ψ(t) a = 1
ψ(t)
ψ(t−1)
ψ(t−2)
ψ(2t) a = 
4
1
ψ(4t) a = 
0
1
2
3
4
5
6
7
0
1
2
3
4
5
6
7
t
t
t
t
t
t
Scaling
Shifting
FIGURE 3.28  Graphical illustration of the two main wavelet operations: Scaling changes the frequency 
range of the wavelet, whereas Shifting changes the portion of the signal to which it is applied.
0.0
0.5
1.0
−2
−1
0
1
2
Haar
−5
0
5
−5
0
5
−5
0
5
−0.5
0.0
0.5
−0.5
0.0
0.5
1.0
Meyer
Morlet
−0.2
0.0
0.2
0.4
0.6
0.8
Mexican hat
0
2
4
6
−0.5
0.0
0.5
1.0
db4
0
5
10
0.0
0.5
1.0
db6
0
2
4
6
0.0
0.5
1.0
sym4
0
5
10
15
0.0
0.5
1.0
sym8
FIGURE 3.29  A survey of the most-used wavelet elementary functions. A full catalogue can be found in the 
MATLAB Wavelet Toolbox Help.

166
Environmental Systems Analysis with MATLAB®
large CWT coefficients at high scales and are not apparent at small scales. Following this analysis, 
even hidden signal changes that are not as apparent as this break could be detected by observing 
changes in the coefficients.
3.4.2  The Discrete Wavelet Transform
As clearly shown in Figure 3.30, the CWT is computationally demanding, and the amount of its 
coefficients is overwhelming. The analysis of environmental time series could be more easily car-
ried out by restricting the scales to powers of 2, thus performing a dyadic signal decomposition, 
without loss of accuracy. The discrete wavelet transform (DWT) is defined by
	
s t
c
t
k
jk
j
k
j
( )
2
=
−
(
)
=−∞
∞
=−∞
∞
∑
∑
2 /j ψ 2
	
(3.17)
The wavelets ψ 2 jt
k
−
(
) are 2 j scaled and k shifted versions of the original wavelet ψ. The 
DWT decomposes the signal into approximations and details. The approximations are the 
high-scale, low-frequency components of the signal, whereas the details refer to the low-scale, 
high-frequency components. However, there is a problem in this decomposition: at each step 
the two signals (Approximations and Details) combined have twice the number of samples as 
the original signal. Therefore, to keep the sample number constant, down-sampling is applied, 
by retaining every other sample after the decomposition, so that half samples are available at 
double period. This is equivalent to doubling the sampling period at each doubling of scale, so 
at each step lower frequencies are involved. Figure 3.31 shows the dyadic decomposition tree of 
a signal. At each step an approximation/details pair is created, and the period doubles because 
of down-sampling. Likewise, the number of data on which the DWT is performed is halved. 
This process may be repeated for as many steps as required by the frequency range of interest 
and is limited either by the availability of samples or because the sampling period becomes 
too long.
Time b
Absolute values of C(a,b) coeﬃcients for scales = 1 →  32.
Scales a
100
200
300
400
500
600
700
800
900
1000
1
7
13
19
25
31
100
200
300
400
500
600
700
800
900
1000
−1
0
1
Sine wave with frequency break
Time
20
40
60
80
100
120
Low scales = high frequencies
High scales = low frequencies
FIGURE 3.30  CWT of a sine wave with a sudden frequency change. The lower graph shows the absolute 
values of the CWT coefficients up to scale 31. The colour scale on the right gives an idea of the relative coef-
ficient magnitudes. (Adapted from the MATLAB Wavelet Toolbox Demos.)

167
Analysis of Environmental Time Series
3.4.3  The MATLAB Wavelet Toolbox
If we were to set up wavelet signal processing from scratch, we would be confronted with a formi-
dable task. Luckily, the Wavelet Toolbox is a very comprehensive environment in which all the use-
ful wavelet functions can be found. Abundant demos and a very detailed help make the toolbox very 
friendly and useful, even for the novice. Given a time series that we want to analyse, its DWT can 
be accomplished with a few, effective, commands. The first thing to decide is the kind of wavelet 
to use and the maximum level of decomposition. As to the first, several wavelets can be tested, but 
from experience, the Morlet or Meyer wavelets appear to give the best results in environmental data 
processing. Regarding the level of decomposition, it is not advisable to push the dyadic splitting too 
far, because of possible data shortage and lack of interest in the very long period of the last stages. 
A good compromise is generally to extend the decomposition for two or three steps, but not more. 
At this level, the noise components should have been sufficiently ‘tamed’.
The multilevel decomposition tree of Figure 3.32 operates by filtering the signal X
( ) with either a 
low-pass (approximation) or a high-pass (detail) filter, followed by down-sampling. The actual wave-
let decomposition is formed by the last approximation and all the details W
A D D
D
n
n
dec
1
~
,
,
,...,
2
(
). 
If the original signal has N samples, Wdec may contain at most n
N
=
( )
log2
 levels.
The MATLAB command producing the DWT decomposition is
	
C,L = wavedec x,N,wname ;


(
) 	
(3.18)
where:
x is the data vector
N is the maximum level of decomposition
wname is a string containing the name of the wavelet
cA1
cA2
cA3
cD1
Original signal
N → N/2
Ts → 2Ts
N/2 → N/4
2Ts → 4Ts
N/4 → N/8
4Ts → 8Ts
Low-pass
High-pass
N samples
samples
2
N
cD2
samples
4
N
cD3
samples
8
N
Low-pass
Low-pass
High-pass
High-pass
FIGURE 3.31  Dyadic decomposition into Approximation (through a low-pass filter) and Details (through 
a high-pass filter) to obtain the DWT of a signal. Because of down-sampling at each step, the period is 
doubled.

168
Environmental Systems Analysis with MATLAB®
The output data consist of two vectors, the coefficient vector C and their lengths L. Therefore, 
the output is not the processed signal, but the set of coefficients, both approximations and details, 
bundled in the vector C of Figure 3.32, and whose lengths are stored in the vector L. To view the 
coefficients, the approximations and the details, the following commands are required, after wave-
dec has been executed:
	
View the approx. coefficients	
cAl = appcoef (C,L,i);
	
View the details coefficients	
cDi = detcoef (C,L,i);
(3.19)
	
View the ith approximation	
Ai = wrcoef ('a',C,L,wname,i);
	
View the ith detail	
	
Di = wrcoef ('d',C,L,wname,i);
In commands (3.19), the index i refers to the level of the decomposition, and therefore i
L
≤
(
). It 
should be reminded that the exact number of coefficients in the decomposition is not accurately 
predictable, because the windowing effects of the algorithm is such that the coefficients at a given 
level are not exactly half those of the previous level.
The wavelet-filtered signal can be reconstructed by summing the last approximation An and all 
the details (D1, D2, …, Dn), that is,
	
s t
A
D
n
i
i
n
( )
=
+
=∑
rec
1
	
(3.20)
The corresponding MATLAB command is
	
S_rec = waverec C,L,wname ;
(
) 	
(3.21)
where the input parameters have the same meaning as in commands (3.19). Therefore, the recon-
struction hinges on the coefficient vector C and of course refers to the same wavelet (wname) 
X
A1
cA3
cD3
cD2
cD1
L(cA3)
L(cD3)
L(cD2)
L(cD1)
L(X)
C:
L:
A2
A3
D2
D1
D3
[C, L] = wavedec (x, N, wname);
cA3
cD1
cD2
cD3
Time-series length
N=3
FIGURE 3.32  Vectors of coefficients produced by the wavelet decomposition function wavedec. The func-
tion returns the coefficients of the last approximation and of all the details up to the Nth level. The coefficients 
are plotted at the bottom of the figure, but in practice, they are hardly ever looked at.

169
Analysis of Environmental Time Series
used for the decomposition. The reconstructed signal has the same number of samples as the 
original signal.
3.4.4  Signal Denoising
Among the many application of wavelets, the one that is particularly important in this context is 
denoising, which is another way of improving the data quality, as we have already attempted with 
smoothing splines. Going back to the previous paragraph, one might wonder what is the use of 
performing a series of operations (decomposition + reconstruction) that eventually reproduces the 
original signal. The answer is that in the decomposition the signal was partitioned into different 
components, each of which could be separately manipulated before reassembling all of the parts to 
reconstruct the signal. Denoising does exactly that: it separately processes the parts where the noise 
is predominant before reconstructing the signal. The details, containing mainly high-frequency 
components, can be treated for noise removal by hard or soft thresholding, as will be shown in a 
moment, after which the signal is reconstructed by summing all the processed details Dithr to the 
last approximation An. Thus the denoised reconstruction signal is similar to Equation 3.20 but with 
altered details, that is,
	
s t
A
D
n
i
i
n
( )
=
+
=∑
dn
thr
1
	
(3.22)
The details in Equation 3.22 differ from those in Equation 3.20 in that they have been ‘thresholded’ 
to reduce their noise contribution. It should be stressed that the thresholding process involves all 
the details, and not just those of the last level. The logical sequence of decomposition, thresholding 
of the details, and reconstruction is described in Figure 3.33, relative to the denoising of a pH sig-
nal, typically affected by noise. It shows the signal decomposition down to level 2 and the separate 
thresholding of the two details coefficients D1 and D2. The denoised signal is then the sum of the 
processed components, as in Equation 3.22.
Figure 3.34 shows two possible thresholds to be applied to the details coefficients: in the ‘hard’ 
case, all the details coefficients smaller than a given threshold δ are set to zero, whereas in the ‘soft’ 
case, the non-zero coefficient after hard thresholding are compressed toward zero by an amount 
equal to the threshold δ
Original
signal
A1
D1
A2
Low-pass
High-pass
D2
Thresholding
+
Denoised
signal
First
decomposition
Second
decomposition
Reconstruction
Sdn = A2 + D1thr+ D2thr
Low-pass
High-pass
FIGURE 3.33  Logical sequence of the denoising process, applied here to the denoising of the pH signal 
in a sequencing batch reactor. The signal is first decomposed (down to level 2 in this example), and then the 
details coefficients are thresholded before reconstruction. In this way, the high-frequency part of the signal is 
conditioned, and the reconstructed signal is the sum of the last approximation (A2) and the conditioned details. 
(Reproduced with permission from Marsili-Libelli, S., Water Res., 40, 1095, 2006.)

170
Environmental Systems Analysis with MATLAB®
	
Hard threshold
if
if
Soft threshold
ht
st
D
D
D
D
D
D
i
i
i
i
i
i
=
>
≤



=
δ
δ
0
−
>
≤



δ
δ
δ
if
if
D
D
i
i
0
	
(3.23)
The differing effects of hard or soft thresholding are shown in Figure 3.35.
MATLAB provides a specific denoising command wden, whose syntax and options are shown 
in Figure 3.36. It can operate directly on the signal (X) or on its decomposition ([C,L]), computed 
by a previous wavedec command. The other input parameters control the manner in which the 
threshold is computed and applied, in addition to the level of decomposition and the type of wavelet. 
As shown in Figure 3.36, there are four possible methods to compute the threshold:
	 1.	rigrsure: Applies Stein’s Unbiased Risk (SURE) and computes the threshold as 
δ =
(
)
2
2
ln
log
N
N
	 2.	heursure: A heuristic variant of the rigrsure
	 3.	sqtwolog: Universal threshold computation δ =
2logN, the one used to compute the 
thresholds in Figure 3.35
	 4.	minimaxi: Minimum of maximum mean squared error
−1
−0.5
0
0.5
1
−1
−0.5
0
0.5
1
No threshold
Coeﬀ
−1
−0.5
0
0.5
1
Coeﬀ
−1
−0.5
0
0.5
1
Coeﬀ
Coeﬀ
−1
−0.5
0
0.5
1
Coeﬀ
−1
−0.5
0
0.5
1
Coeﬀ
Hard threshold
Soft threshold
δ
δ
FIGURE 3.34  Thresholding methods to alter the relative importance of the details coefficients.
Threshold
0
20
40
60
80
100
120
0
20
40
60
80
100
120
−15
−10
−5
0
5
10
15
−15
−10
−5
0
5
10
15
(a)
(b)
Before thresholding
After thresholding
Before thresholding
After thresholding
Coefficient number
Coefficient number
FIGURE 3.35  Differing effect of ‘hard’ (a) or “soft” (right) thresholding. In hard thresholding, the details 
inside the threshold band (filled dots) are set to zero, whereas those outside are unchanged (filled and hol-
low dots superimposed). In the soft thresholding (b), the details inside the band are equally set to zero, 
but those outside are moved inwards (see arrows) by a half threshold width. These graphs were obtained 
with the MATLAB script Ex _ Wavelet_ Thresholding.m in the ESA _ Matlab\Exercises\
Chapter _ 3\Time _ Series folder.

171
Analysis of Environmental Time Series
Denoising assumes that the signal model is s t
f t
N
( ) = ( ) +
(
)
σ
0 1,
, where the ‘true’ signal f t( ) is 
affected by an additive zero-mean noise with a Gaussian distribution N 0 1,
(
) and standard devia-
tion σ. To estimate the actual noise level, wden offers three options for the multiplicative threshold 
rescaling parameter SCAL:
	 1.	one: No rescaling
	 2.	sln: Estimates σ based on first-level coefficients
	 3.	mln: Estimates σ based on all levels
The best combination of denoising parameters must be adapted to the characteristics of the signal 
being processed. For example, Figure 3.37 shows a portion of the denoised DO in the Orbetello 
[XD, CXD, LXD] = wden (X, TPTR, SORH, SCAL, N, 'wname')
Input signal (X)
or
decomposition coeﬃcients [C,L]
Treshold selection rule
‘rigrsure’
‘heursure’
‘sqtwolog’
‘minimaxi’
Tresholding
‘hard’
‘soft’
Noise scaling
‘one’
‘sln’
‘mln’
Decomposition
level
Wavelet
name
Denoised
signal
Tresholded
wavelet
coeﬃcients
FIGURE 3.36  Syntax of the denoising command wden. It can operate on either the data (X) or their previ-
ous decomposition ([C,L]). The output data consist of the denoised signal and related coefficients.
320
340
360
380
400
1
2
3
4
5
6
7
Time (h)
DO (mg/L)
Data
An
Denoised
N = 4; method = heursure; threshold = soft; scale = sln
FIGURE 3.37  Details of the denoised DO signal with a four-level decomposition applied to a portion of the 
DO data of Figure 3.19. In this case the approximation A4 would be totally unsuitable for denoising.

172
Environmental Systems Analysis with MATLAB®
lagoon for five running days, using a level 4 decomposition with a heursure soft thresholding. 
As a general rule, if the decomposition is not very deep (two levels at most), then A2 may provide 
a satisfactory denoised signal, but with deeper decompositions, the difference between An and the 
denoised signal defined by Equation 3.22 increases dramatically.
A final comparison of the four denoising method provided by the wden command are shown in 
Figure 3.38, where they are applied to a portion of DO recording in the Orbetello lagoon. It appears 
that some methods do not provide enough denoising because they follow the data too closely (par-
ticularly rigrsure and minimaxi), whereas heursure and sqtwolog are less distracted by 
wild data and provide a very robust denoising, especially heursure.
Do-It-Yourself addicted may not find in the wden command a level of control that they like. In 
this case, a more hands-on approach is provided by the group of commands shown in Figure 3.39. 
First, the signal is decomposed, and then details are processed with the wthcoef command, 
0.0
0.05
0.10
0.15
0.20
0.25
0.30
0.35
0.40
0.45
0.50
10−4
10−3
10−2
10−1
100
101
102
Freq. (1/t)
Pwr. spectrum
Data
Rigrsure
Heursure
Sqtwolog
Minimax
200
220
240
260
280
300
320
340
7
8
9
10
11
12
13
Time (h)
DO (mg/L)
Data
Rigrsure
Heursure
Sqtwolog
Minimax
1
12h
1
24h
(a)
(b)
FIGURE 3.38  Comparison in time (a) and frequency (b) of the various denoising methods applied to a 
portion of the DO data of Figure 3.19. The heuristic method (heursure) appears to be the most robust, 
being least affected by ‘wild’ data and providing the highest attenuation in the high-frequency band. These 
graphs were obtained with the MATLAB script Ex_Wavelet_Denoising_Comparison.m in the 
ESA_Matlab\Exercises\Chapter _ 3\Time _ Series folder.

173
Analysis of Environmental Time Series
enabling full control over which details are to be thresholded and in which way. The denoised signal 
is eventually reconstructed using the processed details.
3.4.5  Numerical Differentiation of Noisy Signals
Often the information we want to extract from the data is embedded in their derivative rather than in 
the data themselves. On the other hand, differentiating noisy data may end in frustration because the 
noise will be amplified by the operation and produce totally unreliable results. Therefore, denois-
ing is mandatory prior to differentiation if we are to produce meaningful results. The most-used 
numerical differentiation formulas with a finite increment h are (Abramowitz and Stegun, 1970; 
Hildebrand, 1974; Dahlquist and Bjorck, 2003)
	
A
B
dx
dt
x t
h
x t
h
h
dx
dt
x t
h
x t
h
x t
h
x t
≅
+
(
) −
−
(
)
≅
−
(
) −
−
(
) +
−
(
) −
+
2
1
12
2
8
8
2h
d x
dt
x t
h
x t
x t
h
h
d x
dt
x t
h
(
)


≅
+
(
) −
( ) +
−
(
)
≅
−
−
(
) +
C
D
2
2
2
2
2
2
1
12
2
16
30
16
2
2
x t
h
x t
x t
h
x t
h
h
−
(
) −
( ) +
+
(
) −
+
(
)
	
(3.24)
Formulas A and C in Equation 3.24 are simple centred differences, where B and D use two points on 
each side of the central point and are, therefore, more accurate. Numerical accuracy is largely deter-
mined by the prior signal conditioning, hence the need to remove as much noise as possible. For 
this reason, preliminary denoising is recommended, and wavelets can assist in this task better than 
splines, because the latter cannot control the information embedded in the approximation, whereas 
wavelets, with their approximation/details separation provide a more efficient signal/noise partition-
ing. It should be recalled that if differentiation is applied to the denoised signal, the increment h is 
equal to the sampling interval, but if it is applied to approximations, it should be considered that 
each approximation has a sampling interval, that is, n h
⋅, where n is the approximation level. This 
should be considered when applying Equation 3.24. Figure 3.40 demonstrates the importance of 
Decomposition
Details thresholding
Reconstruction
thresholding
‘hard’
‘soft’
Treshold
values
Details levels to
be thresholded
[C, L] = wavedec (X, Level, wname);
Perform thresholding
X_den = waverec (cD_den, L, wname);
cD_den = wthcoef (‘t’ , C, L, N, T, SORH);
FIGURE 3.39  The Do-It-Yourself (DIY) version of denoising: after decomposing the signal, the command 
wthcoef enables direct control over which details should be the thresholded and how. The signal is eventu-
ally reconstructed with the manipulated details.

174
Environmental Systems Analysis with MATLAB®
denoising prior to differentiation, and that trying this operation on the raw data is completely use-
less. The heursure and sqtwolog methods provide the smoothest differentiation.
An application of denoising wavelets to the pH signal is shown in Figure 3.41 following the 
block diagram of Figure 3.33. This signal is particularly noisy because it is measured with a high 
impedance probe, which may easily pick up all sorts of electromagnetic disturbances. On the 
other hand, when pH is used to control the switching in sequencing batch reactors, the important 
information is to be found in its rate of change, rather than in the pH value itself. If numerical 
differentiation is performed on the raw signal, the noise is amplified to such an extent that it 
makes the derived signal useless. Instead, as Figure 3.41b shows, the differentiation performed on 
the denoised signal is much smoother and can be used to infer the important process transitions 
(Marsili-Libelli, 2006).
3.5  PRINCIPAL COMPONENTS ANALYSIS
Principal Component Analysis (PCA) is a widely used statistical technique to extract relevant 
information hidden in the data. Because of its wide and deep coverage in the statistical literature 
(Dunteman, 1989; Jolliffe, 2002; Ringnér, 2008; Abdi and Williams, 2010), only the basic concepts 
DO
dt
220
240
260
280
300
320
340
−0.5
0.0
0.5
1.0
Time (h)
Data
Rigrsure
Heursure
Sqtwolog
Minimax
200
FIGURE 3.40  Numerical differentiation of a portion of the dissolved oxygen data of Figure 3.38. The 
­differentiation of the raw data is totally useless, whereas the smoothest derivatives are provided by the heur-
sure and sqtwolog methods that are almost superimposed in this example. This graph was obtained 
with the MATLAB script Ex _ Wavelet _ Denoising _ Comparison.m in the ESA _ Matlab\
Exercises\Chapter _ 3\Time _ Series folder.
0
20
40
60
80 100 120 140 160 180 200
7.8
7.9
8.0
8.1
8.2
pH
8.3
8.4
8.5
8.6
Raw pH
(a)
0
20
40
60
80 100 120 140 160 180 200
−0.04
−0.03
−0.02
−0.01
0.00
0.01
0.02
0.03
0.04
Time (min)
Time (min)
dt
d(pH)
Raw pH derivative
(b)
Denoised pH
Denoised derivative
FIGURE 3.41  The pH signal is known to be noisy because it is measured with a high impedance probe, and 
therefore it is liable to pick up all sorts of disturbances. (a) compares the raw pH signal with its denoised coun-
terpart, whereas (b) shows the same comparison for the derivatives. Notice how the differentiation amplifies 
the noise, hence the need to denoise prior to derivation.

175
Analysis of Environmental Time Series
will be recalled here, together with a summary of the main MATLAB commands to perform PCA. 
Given a data set X ∈
×
N p, where N is the number of observations and p the number of features of 
each observation, PCA is a linear transformation with two objectives: feature selection and dimen-
sion reduction. The first objective is achieved through a change of the reference coordinates and a 
ranking of the features of X, whereas the second (optional) goal consists of reducing the number of 
features from p to a < p, controlling the related loss of information.
3.5.1  Feature Selection
The features (or variables) of a multidimensional data set in general are related to one another, in 
the sense that the variability of each one may influence the others. This interdependence, in addition 
to masking the full significance of each feature and hiding the information embedded in the data, 
represents a redundancy by partially replicating the information in several variables. A measure of 
redundancy in a multidimensional data set is the covariance matrix computed on the zero-mean 
data matrix x obtained from X by subtracting the average of each feature 1 ...,
,
p
(
)
	
x
N
X i j
x
j
p
j
i
N
j
j
j
=
(
)
=
−
=
=∑
1
1
1
,
,...,
x
X
	
(3.25)
The diagonal elements of the (symmetrical) covariance matrix C are the variance of each feature, 
whereas the off-diagonal terms represent the mutual interaction between feature couples
	
C
x
x
=
−
⋅
=
1
1
1
2
12
1
21
2
2
2
1
2
N
T
p
p
p
p
p
σ
ρ
ρ
ρ
σ
ρ
ρ
ρ
σ
...
...
...
...
...
...
...
2
2
1
1
1
1
1














=
−
⋅
=
=
−
⋅
=
σ
ρ
ρ
j
j
T
j
jk
kj
j
T
k
N
N
j k
x
x
x
x
,
,..., p	 (3.26)
From the covariance matrix C of Equation 3.26, the correlation matrix can be obtained by normal-
izing C by the joint variances
	
R :
,
,
,
,
,...,
,r
C j k
C j j
C k k
j k
p
i j =
(
)
(
)× (
)
=1
	
(3.27)
The diagonal elements of R are all one, and the off-diagonal terms represent the correlation between 
feature couples. Normally, PCA is performed on zero-mean data, indicated with x in Equation 3.25, 
but often standardized data xs are also used, meaning that in addition to having zero mean they 
should also have unit variance, that is,
	
x
X
s
x
=
−
σ
	
(3.28)
The implications of performing PCA on either zero-mean or standardized variables will be dis-
cussed later. However, the covariance matrix computed with the standardized variables is equal to 
the correlation matrix. The covariance and correlation matrices have an appealing graphical repre-
sentation, at least in two dimensions, and their tracing follows the same procedure already described 
in Chapter 2. For this, consider a two-feature data set, that is, p = 2 and let w1
2
,w
(
) and λ λ
1
2
,
(
) be 
the eigenvectors and the eigenvalues of C. Then, similar to the confidence ellipse considered in 
Chapter 2, the related ellipse centred at the origin can be traced according to

176
Environmental Systems Analysis with MATLAB®
	
x
x
w
w
w
w
1
2
11
12
21
22
1
2
1 96
0
0
1 96



= 


⋅








⋅−
.
.
cos
λ
λ
ϕ
sin
,
ϕ
ϕ
π




∈(
)
0 2
	
(3.29)
The more elongated the ellipse, the higher the correlation, whereas two uncorrelated variables 
would produce a circle. The multiplying factor 1.96 means that if the data come from a Normal dis-
tribution, the ellipse will include on average 95% of its samples. As an example, Figure 3.42a shows 
100 samples of a two-dimensional time series. The correlation between the two variables x x
1
2
,
(
) is 
apparent from the covariance and correlation symmetrical matrices
	
C
R
=
−
−




=
−
−
0 2359
0 3333
0 3333
0 6773
1 0000
0 8340
0 8340
1
.
.
.
.
.
.
.
.0000



	
(3.30)
In Figure 3.42b, the eigenvectors w w
1
2
,
(
) of C determine the direction of the covariance ellipse, 
whose length is given by the eigenvalues λ1
2
,λ
(
).
Contrary to the orientation of the covariance ellipse, which is determined by its eigenvectors, the 
correlation matrix has an invariant 45° tilt, and its shape indicates the extent of the correlation between 
the two variables ρ( ). In fact, the eigenvectors and eigenvalues of a 2 × 2 correlation matrix are
	
R
w
w
2
1
2
1
1
1
2
2
2
2
2
2
2
2
1
= 


→
=
−
























=
ρ
ρ
λ
;
;
−
= +
ρ
λ
ρ
2
1
	
(3.31)
so that by inspection, the correlation ellipse gives an immediate visual representation of the correla-
tion between the two variables, as shown in Figure 3.43. A thick ellipse indicates a low correlation 
(a), while a lean ellipse denotes a high correlation (c).
3.5.1.1  The PCA Transform
If data redundancy is related to correlation, the linear transformation that we are seeking should 
change the reference basis of the data to eliminate the off-diagonal terms of C. As Figure 3.44 shows, 
0
20
40
60
80
100
−1
0
1
Sample
x1
0
20
40
60
80
100
−2
0
2
Sample
x2
−2
−1
0
1
2
−2.5
−2.0
−1.5
−1.0
−0.5
0.0
0.5
1.0
1.5
2.0
x1
x2
(a)
(b)
FIGURE 3.42  Two correlated time series. From the 100 samples shown in (a), it is very hard to detect any 
correlation, which instead is clearly shown by the correlation ellipse (b), whose shape is determined by the 
eigenvectors (black arrows) of Cx according to Equation 3.29.

177
Analysis of Environmental Time Series
the axes of the new system of coordinates z are aligned with the principal axes of the covariance 
ellipse, given by the eigenvectors, so that the spread (variance) of each variable is maximal and per-
pendicular to all others.
The required similarity transformation is therefore defined by the eigenvectors and eigenvalues 
of C.
	
C
W L W
L
W
C W
Z
X W
X
Z W
W
w w
w
L
=
⋅
⋅
=
⋅
⋅
→
=
⋅
=
⋅
= 

=
T
T
T
p
where
,
diag
1
2, ...,
λ1
2
,
,...,
λ
λ p
(
)	
(3.32)
(a)
Low
(b)
Medium
(c)
High
x1
x1
x1
λ2
λ1 = 1 − ρ = 0.75
λ2 = 1 + ρ = 1.25
λ2
λ2
λ1
λ1
λ1
x2
x2
x2
(1, ρ)
(1, ρ)
(1, ρ)
1.0
0.25
1.0
0.25
R =
−0.7071
0.7071
0.7071
0.7071
W =
λ1 = 1 − ρ = 0.5
λ2 = 1 + ρ = 1.5
1.0
0.5
1.0
0.5
R =
−0.7071
0.7071
0.7071
0.7071
W =
λ1 = 1 − ρ = 0.25
λ2 = 1 + ρ = 1.75
1.0
0.75
1.0
0.75
R =
−0.7071
0.7071
0.7071
0.7071
W =
FIGURE 3.43  (a−c) Correlation ellipses show the degree of interdependence between variables. The ellipses 
are always oriented at 45°, and their eigenvalues are directly related to the correlation coefficient ρ12. The dots 
indicate where the ellipse crosses the unit square.
x1
x2
w1
w2
(x1, x2) = original reference
(w1, w2) = variance maximizing reference (eigenvectors)
Maximal resolution
on w2 from this
direction
Maximal resolution
on w1 from this
direction
Maximum variance
Minimum variance
FIGURE 3.44  Graphical representation of the change of basis of Equation 3.32, providing maximum data 
resolution.

178
Environmental Systems Analysis with MATLAB®
In Equation 3.22, WT is used in place of W −1 because the eigenvector matrix W is orthonormal, 
hence WT =
−
W 1. In the new basis, the transformed data Z have a diagonal covariance matrix, thus 
solving the first problem of removing the redundancy among data features. However, PCA goes a 
step further and ranks the eigenvector matrix W according to the decreasing magnitude of the cor-
responding eigenvalue. Thus, the rearranged similarity matrix P becomes
	
P =








p
p
p
p
p
p
p
p
p
p
p
p
p
pp
11
12
1
21
22
2
1
2
...
...
...
...
...
...
...






↑
↑
↑
>
>
>
λ
λ
λ
1
2

p
	
(3.33)
where the columns of P are still the eigenvectors of C, but now they are sorted according to the 
decreasing magnitude of the corresponding eigenvalue. So, the PCA transform is obtained from 
Equation 3.32 by substituting the sorted matrix P in place of W, that is,
	
Z
X P
X
Z P
=
⋅
=
⋅
T 	
(3.34)
Like W, P too is orthonormal, meaning that its columns are mutually orthogonal and have unit 
length, that is,
	
p
p
P
P
i
T
j
i k
k
p
T
i
j
p
i
p
.
,...,
,
=
≠
=
=
=
=
−
∑
0
1
1
2
1
1
	
(3.35)
Figure 3.45 summarizes the procedure for obtaining the principal components (PCs) from the given 
data set. After subtracting the average from each feature, the covariance matrix C is computed. Its 
eigenvectors, once rearranged according to the decreasing magnitude of the corresponding eigenvalue, 
form the basis of the new reference system that provides maximum data resolution for the transformed 
data Z. In Figure 3.45, the typical PCA jargon is added, whereby the eigenvectors are called loadings, 
the eigenvalues are called latent variables and the transformed variables Z are referred to as scores.
Thus, we can summarize the main aspects of PCA: it is a linear data transformation that elimi-
nates the data redundancy (represented by covariance) and at the same time maximizes the infor-
mation (represented by variance). In ranking the eigenvectors, it also indicates to what extent each 
original variable contributes to the new ones. The columns of the P matrix (or loadings) are obtained 
through an orthonormal transformation with these properties:
•	 Each PC is a linear combination of the original variables.
•	 The PCs are mutually orthogonal, that is, they are uncorrelated (the redundant information 
is eliminated).
•	 The covariance matrix of the transformed data is diagonal and its eigenvalues are equal to 
the variance of each feature, that is,
	
cov
,
,...,
,
,...
Z
Z
Z
( ) =
−
⋅
=
−
(
) =
−
1
1
1
1
1
1
1
2
1
2
2
2
N
N
N
T
p
diag
diag
λ λ
λ
σ σ
,
.
σp
2
(
) 	
(3.36)

179
Analysis of Environmental Time Series
3.5.1.2  The Biplot
Once the original data set has been transformed according to Equation 3.34, we can look into the 
new data in search of fresh information. Each column of the P matrix contains the coefficients 
of one PC, sorted by decreasing magnitude of the corresponding eigenvalue. They represent the 
coefficients of the linear combinations of the original variables that generate the PCs. For exam-
ple, the elements of first column show how much each original variable contributes to the first 
PC, that is,
	
p1
11
21
1
1
=














←
←
p
p
p
x
p
...
 contribution of
to PC
 cont
1
ribution of
to PC
 contribution of
to PC
x
xp
2
1
1
...
←
	
(3.37)
and the same applies to the other columns p
p
p
2
3
,
, ,
...
p
(
). The biplot is the graphic equivalent of 
Equation 3.37 as it visualizes each variable’s contribution to the PCs, and unfortunately it is limited 
to 2D and 3D visualizations. The axes of the biplot are the first two or three PCs, the columns of 
P are represented as unit vectors and the scores (observations transformed in the PC space) are 
represented as dots. Figure 3.46 shows a two-dimensional biplot where the axes represent the PCs 
(columns of P). It visualizes the magnitude and sign of each variable’s contribution to the first two 
or three PCs, and how each observation is represented in terms of those components. The disper-
sion of the scores is equal to their standard deviation, which is given by the square root of the cor-
responding eigenvalue.
3.5.1.3  The Scree Plot
Another graphical aid providing insight into the PCA is the scree plot (PCA jargon again), which is 
generally composed of two plots: one showing the amount of data variability explained by each PC, 
and the other showing the magnitude of the sorted eigenvalues. Given the ranking of the columns 
of P and of the corresponding eigenvalues, the contribution of each PC and the cumulative sum can 
be computed as
Eigenvectors
ranking
P
Eigenvectors
(loadings)
[w1, w2, ..., wp]
Covariance matrix
xT  ⋅ x
1
N − 1
C =
Data
N × p
x ∈
Eigenvalues
(latent variables)
(λ1, λ2, ..., λp)
L = WT ⋅ C ⋅ W
C = W ⋅ L ⋅ WT
Scores
Z = X ⋅ P
FIGURE 3.45  The PC transformation consists of computing the similarity matrix P, which makes the cova-
riance matrix diagonal and reordering its columns (eigenvectors) according to the relative magnitude of the 
corresponding eigenvalues. The typical PCA nomenclature is added for completeness.

180
Environmental Systems Analysis with MATLAB®
	
q
i
p
v
q
k
p
i
i
p
i
k
k
i
=
+
+
+
=
=
=
=∑
λ
λ
λ
λ
1
2
1
1
1

,...,
,...,
	
(3.38)
An example is shown in Figure 3.47. The individual (bar) and cumulative (line and dot) explained 
variance (a) specifies how much each PC contributes to the total data information, whereas the 
ranked magnitude of the eigenvalues (b) indicates which components of the data are expanded 
λ >
(
)
1  or compressed λ <
(
)
1 . 
3.5.1.4  PCA on Correlation or Covariance?
PCs may be computed using either the covariance or the correlation matrix. The covariance PCA 
uses the zero-mean data x computed with Equation 3.25, whereas the correlation PCA operates on 
standardized data defined by Equation 3.28. If the variables have comparable magnitudes, either 
approach can be used, but if they differ by some order of magnitude the method should be selected 
with care. In fact, it should be reminded that in the correlation PCA all the variables are equally 
important because they all are standardized to have unit variance, whereas in covariance PCA, each 
variable retains its original variance. If the variables differ in magnitude, then correlation PCA may 
be advisable to make all the variables comparable; otherwise the largest one will bias the results. 
However, there is no definitive answer as to which data to use (zero-mean or standardized) and the 
decision should be taken on a case-by-case basis. Let us consider the pros and cons of each choice:
	
1.	Covariance PCA:
	
a.	 Maintains the natural proportions among variables
	
b.	 It is sensitive to units, emphasizing the importance of the largest variables
	
2.	Correlation PCA:
	
a.	 Operating on standardized data it is insensitive to units
	
b.	 The results bear no relation with covariance
−1.0
−0.5
0.0
0.5
1.0
−1.0
−0.5
0.0
0.5
1.0
p1
p2
PC1
PC2
0.7363
−0.6766
0.7363
0.6766
P =
λ1 = 1.0188
λ2 = 0.1402
std (z1) = √
⎯λ1  = √
⎯⎯⎯⎯ = ±1.0094
1.0188
std (z2) = √⎯
λ2  = √
⎯⎯⎯⎯ = ±0.3744
0.1402
PT
1 ⋅ P2 = PT
2 ⋅ P1 = 0
PT
1 ⋅ P1 = PT
2 ⋅ P2 = 1
FIGURE 3.46  A 2D biplot showing the relative position of the two eigenvalues (latent vectors) and the rela-
tive spread of the scores (dots) inside the bands delimited by the standard deviations, which are determined by 
the eigenvectors (latent values) of the PCA matrix P.

181
Analysis of Environmental Time Series
As an example, consider Figure 3.48, which compares the covariance ellipses and the biplots of a 
100 samples record of two correlated variables x x
1
2
,
(
) with x
x
2
1
20
∼
⋅
. Performing the PCA on the 
zero-mean data (a), rather than on standardized data (b), produces totally different results. In fact, 
the largely differing orders of magnitudes in case (a) are such that x2 totally dominates the analysis. 
The covariance and the PCA matrices in the two cases are
A
( )




=
−
−
= −
C
P
A
A
0 2572
7 2595
7 2595
293 2540
0 0248
0 9997
0
.
.
.
.
.
.
.9997
0 0248
0 0248
0 9997
0 9997
1
1
2
2
1
.
.
.
.




( )
( )
= −
⋅
+
⋅
=
⋅
z
x
x
z
x
A
A
+
⋅
=
−
−
=
( )




0 0248
1 0000
0 8359
0 8359
1 0000
0 7071
2
.
.
.
.
.
.
x
B
B
B
C
P
0 7071
0 7071
0 7071
0 7071
0 7071
0
1
1
2
2
.
.
.
.
.
.




( )
( )
=
⋅
+
⋅
=
z
x
x
z
B
B
7071
0 7071
1
2
⋅
+
⋅
x
x
.
	(3.39)
The dominance of x2 clearly shows in (a,) whereas in (b) the two components have comparable 
magnitude. A similar difference emerges from the comparison of the biplots, where (c) shows that 
x2 totally dwarfs the PC2, whereas (d) shows a more balance contribution of both variables to the two 
PCs. The point made by this example is that if one feature is considerably larger than the others, it 
will dominate the PCA by being itself a good approximation of PC1 (see Figure 3.48c), and the other 
features may be almost lost in comparison. On the other hand, standardization tends to level out the 
differences, so it should be applied with care. Cases where a single feature dominates over the oth-
ers should be avoided, though no general guideline can be set and the decision on whether the data 
should be standardized must be taken on a case-by-case basis.
3.5.2  Data Reduction and Reconstruction
Now, we turn to the second goal of PCA, considering the possibility of reducing the complexity of the 
data set without losing too much information. Needless to say, we have to find a compromise between 
the amount of information we are prepared to discard and the advantage of dealing with less data. 
1
2
3
4
5
0.0
0.2
0.4
0.6
0.8
1.0
1
2
3
4
5
0.0
0.5
1.0
λi
1.5
2.0
2.5
Eigenvalues
Ampliﬁed    information
Compressed    information
vi
Fraction of explained variance
Cumulative explained variance
(a)
(b)
FIGURE 3.47  Scree plot showing the fraction of explained variance (a) for each ranked eigenvalue (b). Any 
eigenvalue greater than 1 amplifies the information along its PC.

182
Environmental Systems Analysis with MATLAB®
By inspection of the scree plot of Figure 3.47, a reduction in the number of features is possible if 
we limit the PC transform to the components for which the corresponding eigenvalue is larger 
than a prescribed threshold. In principle, λ =1 should be the natural yardstick between information 
amplification λ >
(
)
1  and compression λ <
(
)
1 , but it is advisable to make a more conservative choice 
and retain the columns of P for which λ > 0.7 (Dunteman, 1989; Jolliffe, 2002). The selection of 
the maintained components can be cross-checked with the cumulative explained variance given 
by Equation 3.38. Normally, a valid reduction should conserve at least 80% of the total variability. 
Data reduction is performed by partitioning the P matrix between the retained and discarded parts
	
P
P
= 

=
⋅
−
a
p a
a
a
| P
Z
X P
,	
(3.40)
and using only the left sub-matrix Pa, which contains the retained eigenvalues of the PC trans-
formation to obtain the reduced transformed data Za. The selection of a suitable a
p
<
 is assisted 
by the scree plot of Figure 3.47, which indicates the loss of information related to the reduc-
tion. The drawback of this operation is that when we retrieve the original data by inverse PCA 
transform
−20
0
20
−40
−30
−20
−10
0
10
20
30
40
Zero-mean data
x1
x2
−2
0
2
−4
−3
−2
−1
0
1
2
3
4
Standardized data
x1
x2
(a)
(b)
−1.0
−0.5
0.0
0.5
1.0
−1.0
−0.5
0.0
0.5
1.0
x1
x2
PCA on cov. mat.
PC2
PC1
(c)
−0.5
0.0
0.5
−0.6
−0.4
−0.2
0.0
0.2
0.4
0.6
x1
x2
PC2
PCA on corr. mat.
PC1
(d)
FIGURE 3.48  Comparison of PCA using zero-mean or standardized data with significantly different orders 
of magnitude. The covariance ellipses are shown (a) for the zero-mean data, which shows an overwhelming 
dominance of the largest variables (x2), as opposed to (b) where the standardization removes this dominance. 
The same happens with the biplots, where in (c) the PC1 is totally dominated by x2, whereas the biplot in (d) 
yields a more balance portrait.

183
Analysis of Environmental Time Series
	
X
Z W
X
Z W
E
a
a
a
T
a
a
T
=
=
+
	
(3.41)
the data retrieved with the reduced PCA Xa
(
) will differ from the original data by the residual 
matrix E, which represents the contribution of the discarded components. As an example, consider a 
data set composed of three variables: per cent saturation (%) of DO, pH and temperature (°C). These 
data were acquired by an automatic sampling station placed along the Arno River (Italy) upstream 
of the city of Florence in September 2006. Figure 3.49 shows the reconstruction accuracy by using 
all the three PCs (a = 3), the first two PCs (a = 2) or just the first PC (a = 1). Obviously, the fewer 
the PCs, the lower is the accuracy.
The scree plot of Figure 3.50 shows that one PC would yield a sufficiently accurate reconstruction, 
because only λ1 is above the 0.7 threshold and the explained variance would be in excess of 90%.
3.5.3  Consistency Statistics
PCA is often used to check the consistency of a data set, and for this reason, it is at the basis of many 
fault detection algorithms. In this context, it has been widely applied to process monitoring and to 
wastewater treatment processes (Schraa et al., 2006; Alferes et al., 2013; Nagy-Kiss and Schutz, 2013).
0
20
40
60
−2
0
2
DO
a = 3
0
20
40
60
−2
0
2
pH
−2
0
2
pH
−2
0
2
pH
0
20
40
60
−5
0
5
Sample
Sample
T
−5
0
5
T
−5
0
5
T
0
20
40
60
0
20
40
60
0
20
40
60
−2
0
2
DO
−2
0
2
DO
a = 2
0
20
40
60
a = 1
0
20
40
60
0
20
40
60
Sample
Standardized data
Reconstructed data
FIGURE 3.49  Data retrieval from the PCA transform. The left column shows the perfect reconstruction 
obtained using the full PCA space (a = 3), whereas the other two columns show the loss of reconstruction 
accuracy when a subspace of decreasing dimension (a = 2 or a = 1) is used. These graphs were obtained 
with the MATLAB script Ex _ PCA _ Reconstr _ Reduced.m in the ESA _ Matlab\Exercises\
Chapter _ 3\PCA folder.

184
Environmental Systems Analysis with MATLAB®
3.5.3.1  Hotelling’s T 2 and Q Statistics
The typical consistency measure used with PCA is Hotelling’s T 2 (Hotelling, 1931, 1947), which 
may be viewed as a generalization of the Student-t statistics used in hypothesis testing. When PCA 
is applied to a given set of data, assumed as the reference data set, we may be interested in knowing 
whether some later sample originating from the same process can still be explained by that model, 
or if a significant divergence can be detected. Given X ∈
×
N p, suppose that a PCA model Z
X P
=
⋅
 
was computed. Then Hotelling’s T 2 is defined as
	
T 2
1
=
⋅
⋅
−
Z
L
Z
T
	
(3.42)
with L =
(
)
diag λ λ
λ
1
2
,
,
,

p  given by Equation 3.32. We can use T 2 as a hypothesis testing variable, 
with the null hypothesis Ho being that the data can be explained by the given PCA. For this, the T 2 
value can be related to an F-statistics (Hotelling, 1947; Dunteman, 1989; Mason et al., 2001; Jolliffe, 
2002) to set an acceptability threshold
	
T
p N
N
p
FN p p
lim
,
2
1
=
−
(
)
−
−
α
	
(3.43)
where FN p p
−,
α
 is the Fisher statistics with N − p and p degrees of freedom and 100 1−
(
)
α  confidence 
level. T2 is unaffected by standardization, so it yields the same results when applied to the zero-
mean data x or to the standardized data xs.
If a dimension reduction has been made, the T 2 will record anomalies in the subspace of the 
retained components PC PC
PC with
1
2
,
,
,

a
a
p
<
(
) but not on the excluded ones PC
PC
a
p
+
(
)
1,
,

. 
Any anomaly in this subspace will be detected by the Q-statistics, defined as the sum of squared 
residuals of the active PCs (Russell et al., 2000; Villegas et al., 2010)
	
Q
T
T
=
−
⋅
(
)
x
I
L L
x 	
(3.44)
In a similar manner to the T 2, the Q-statistics too should be compared to a threshold value given by
	
Q
h c
h h
h
lim
(
)
(
)
=
+
+
−








θ
θ
θ
θ
θ
α
1
0
2
1
2
0
0
1
2
1
1
2
1
0
/
	
(3.45)
where cα is the (1 − α) quantile of the normal distribution and the various quantities in Equation 3.45 
are defined as
−0.5
0.0
0.5
−0.5
0.0
0.5
−0.5
0.0
0.5
DO
pH
T
1
2
3
0
0.5
1
PCn
Perc. variance
1
2
3
0
1
2
3
Eigenvalues
PC1
PC2
PC3
Fraction of expl. var.
Cum. expl. var.
(a)
(b)
PCn
FIGURE 3.50  Scree plot (a) and biplot (b) of the Arno River data used in Figure 3.49.

185
Analysis of Environmental Time Series
	
θ
λ
θ
λ
θ
λ
θ θ
θ
1
1
2
2
1
3
3
0
1
2
3
2
1
1
2 3
=
=
=
= −
= +
= +
= +
∑
∑
∑
i
i a
p
i
i a
p
i
i a
p
h
	
(3.46)
The geometric interpretation of T2 and Q is shown in Figure 3.51.
3.5.3.2  Contribution Variables
Hotelling’s T 2 and the Q statistics are global indicators that certain data diverge from the majority 
of the data set, but they do not single out which variable of the original data X is responsible for the 
anomaly. To get a further insight into the fault, the contribution variables (CVs) are a tool that may 
shed more light into the analysis. They are defined as
	
CV
1/2
= z L
PT
⋅
⋅
−
	
(3.47)
which is similar to the inverse PCA of Equation 3.34, so the CVs are consistent with the original 
reference system X. This allows the user to immediately grasp its meaning without having to go 
through the inspection of the single variables.
Figure 3.52 shows how the T 2 and the CVs react to an abrupt change in the data. The same data 
from the Arno River shown in Figure 3.49 are used here, but in this record a malfunction of the pH 
probe was simulated at about 30 h, represented by a short signal drop (Figure 3.52a). The dip in 
the PCA scores (Figure 3.52b) is hardly discernible, but the jump in T 2 is significant (Figure 3.52c). 
This is, however, a global indication of a substantial divergence from the normal behaviour, while 
the CVs (Figure 3.52d) clearly single out pH as the faulty variable.
3.5.4  PCA and MATLAB
MATLAB Statistics toolbox provides full PCA capability. The main commands and their relation-
ships are summarized in Figure 3.53. The PCA can be obtained by directly processing the data 
matrix X consisting of N observations (rows) and p variables (columns) with the command 
	
P,score,L,T2 = princomp X) 
(


	
(3.48)
PC1
PC3
PC2
T2
Q
T2
lim
FIGURE 3.51  A geometric representation of the T 2 and Q statistics. It is assumed that the three-dimensional 
original space has been reduced to a two-dimensional subspace. Hotelling’s T 2 shows when an observation 
diverges from the ‘normal’ set (asterisks), delimited by Tlim, in the retained PC1–PC2 subspace, whereas the 
Q statistics shows when a residual, in this case along the PC3 component, exceeds the threshold limit Qlim.

186
Environmental Systems Analysis with MATLAB®
The column mean values are automatically subtracted from X, making the data zero-mean before 
processing, but their relative magnitudes are unaffected. If it is desired to compute the PCA on stan-
dardized data, they should be pre-processed using the zscores command and then either prin-
comp or pcacov commands can be used, with the latter operating directly on the covariance or 
correlation matrix. Going back to command (3.48), its output consists of the PCA matrix P, referred 
to as coeff in MATLAB, while the transformed data are referred to as score, while L is the vector 
0
12
24
36
48
60
72
−30
−20
−10
0
10
20
30
40
Time (h)
0
12
24
36
48
60
72
Time (h)
PCA scores
−8
−6
−4
−2
0
2
CV
CV1
CV2
CV3
0
12
24
36
48
60
72
0
10
20
30
40
Time (h)
T 2
(b)
(d)
(c)
50
100
150
DO %
0
5
10
pH
0
12
24
36
48
60
72
20
25
T (°C)
(a)
pH dip
CV2 dip
Time (h)
T2
lim
T2 jump
z1
z2
z3
FIGURE 3.52  Detecting an anomaly in the data through T 2 and CV. Around 30 h pH has a dip (a), which is 
recoded as a T 2 jump (c). At the same time, the CVs single out CV2 (pH) as the responsible variable (d). This 
backtracking would not have been possible with the scores, two of which exhibit a small dip (b). These graphs 
were obtained with the MATLAB script Ex _ PCA _ Rosano _ T2 _ CV.m in the ESA _ Matlab\
Exercises\Chapter _ 3\PCA folder.
Data
(X)
Xz = Zscore (X)
C = cov (X)
Standardization
Covariance
matrix
[P, L, explVar] = pcacov (C)
[P, score, L, T2] = princomp (X)
PCA on the data
PCA on the
covariance or correlation
matrix
[Resid, rec] = pcares (X, a)
Reduced order PCA 
[CumVar] = scree (L)
biplot (P)
FIGURE 3.53  Main MATLAB commands to perform the PCA.

187
Analysis of Environmental Time Series
of the eigenvalues already sorted in descending order, and T2 is Hotelling’s indicator of the distance 
of each observation from the ‘core’ of the observations, as discussed in Section 3.5.3.1. If PCA on the 
covariance or correlation matrix is pursued, then the following command should be used:
	
[
]
, ,explVar
p
P L
cacov C
=
( ).	
(3.49)
In this case, the scores are not included among the output variables, because pcacov does not oper-
ate on the data. The PC matrix (P) and the eigenvalues (L) are the same as in command (3.48), but in 
this case the third output explVar is a vector containing the percentage of the variance explained 
by each PC, starting with the largest (PC1). In practice, this is equivalent to the cumulative explained 
variance of the scree plot of Figure 3.47a. The sample code listed in Box 3.3 shows the basic com-
mands to perform the PCA on a data set. 
After loading the data, the transform matrix (P), the transformed scores (Z) and the eigenvalues 
(L) can be obtained with the single command princomp, which also provides Hotelling’s T 2. The 
results of the PCA can be visualized with the scree plot, in view of a possible dimension reduc-
tion, or with the biplot, which indicates how each original variable is reflected in the PCs. The 
last lines show how the scores (Z) can be reconverted back into the original data (X) by computing 
the inverse transformation of Equation 3.34. A comparison is made in Figure 3.54 between the 
full data recovery (R2 X) and the first-order approximation (R1 X) of a random time series. While 
a perfect data reconstruction is obtained with R2, the retrieval provided by R1 is, as expected, not 
nearly as good.
BOX 3.3  ESSENTIALS OF PCA COMPUTATION
load Data
%% Perform PCA transform
[P,Z,L,T2]=princomp(X);
% Draw the scree plot
scree(L,2)
% Draw the biplot
figure(3)
vl={‘ x_1’,‘ x_2’}; % Set the labels
biplot(P,‘Scores’,Z,‘VarLabels’,vl)
% ----------------------------------
%% Draw Hotelling's T^2
plot(T2)
hold on
% Draw the Tlim line for comparison
T_lim=(p*(N-1)/(N-p))*finv(0.95,p,N-p);
plot([0 length(T2)],[T_lim T_lim],‘--k’)
% ----------------------------------
%% Retrieve the data by 
%  inverse PCA transform
figure(5)
% Inverse PCA transform
X1=Z*P'; % Full order data retrieval
% compare with inverse reduced
% reconstruction of order 1
% R1 = first order data retrieval
[resid,R1]=pcares(X,1); 
% ----------------------------------

188
Environmental Systems Analysis with MATLAB®
3.5.5  PCA Case Studies
Two applications are now discussed in which the use of PCA can assist in extracting information 
from the data, which could not be otherwise apparent. The broad applicability of PCA is also 
demonstrated by applying this method to two widely differing time series: the turbidity trend in a 
potabilization process, and the detection of faults in a wastewater treatment process.
3.5.5.1  Turbidity Analysis in a Potabilization Process
The recording of Figure 3.55 shows the main parameters of the raw water drawn from the Arno 
River to be processed by the potabilization plant of the municipality of Florence (Italy). The data 
span the first half of 2013 and include the abstraction flow from the river, the raw water temperature 
and its turbidity. The flocculant dosage and the output turbidity after the clarification stage, repre-
senting the process output, are also recorded. The main goal of the clarification-flocculation process 
is to cope with the input turbidity peaks, indicated by the shaded areas, and limit the variability of 
the output turbidity as much as possible prior to the sand filtering, which represents the next process 
stage, and which are very sensitive to input turbidity variations.
The PCA may assist in establishing relations between the process inputs and its output, and 
indicate which inputs are most responsible for the output variations. Given the large magnitude dif-
ferences of the variables, the data are standardized prior to PCA processing. Then, the scree plot 
in Figure 3.56a indicates that the feature dimensions could be reduced from five to three. Further, 
the biplot of Figure 3.56b shows to what extent the process variables contribute to the first two 
PCs and how they are correlated to one another. In particular, the input turbidity (Turbin) and the 
flocculant dosage (Floc) are strictly related, but the river flow also plays an important role, and its 
influence is almost equally shared between PC1 and PC2, whereas the temperature is almost entirely 
0
50
100
150
−0.8
−0.6
−0.4
−0.2
0.0
0.2
0.4
0.6
0.8
Reconstructed variables
Samples
0
50
100
150
Samples
X1
X1
R2X1
R1X1
X2
R2X2
R1X2
−1.5
−1.0
−0.5
0.0
0.5
1.0
1.5
X2
FIGURE 3.54  Comparison of full and reduced order reconstruction of the observations, obtained with the last 
few lines of the sample code in Box 3.3. The complete MATLAB script is Ex _ PCA _ Reconstruction _
Random _ Data.m in the ESA _ Matlab\Exercises\Chapter _ 3\PCA folder.

189
Analysis of Environmental Time Series
represented by PC2. The positive correlation between river flow and Turbin indicates that turbidity 
obviously increases during high-flow events.
Figure 3.57 examines the consistency of the variables trend: Hotelling’s T 2 indicates when the 
process behaviour globally diverges from its normal condition by exceeding the threshold defined by 
Equation 3.43. It can be seen that the T 2 peaks correspond to the turbidity events induced by a flood 
condition, but the CVs provide a further insight into each event. For example, the input turbidity is 
the main feature responsible for events (A)–(C) and (E), but in event (D) the flow is also involved. 
(C)
20
40
60
80
100
120
140
160
1
1.2
1.4
River ﬂow
(m3/s)
20
40
60
80
100
120
140
160
5
15
25
T (°C)
20
40
60
80
100
120
140
160
0.2
0.6
1
Floc. (L/s)
20
40
60
80
100
120
140
160
200
700
1200
Turbin
20
40
60
80
100
120
140
160
1
3
5
Turbout
Time (d)
(A)
(B)
(D)
(D)
(E)
FIGURE 3.55  Turbidity case study: the four input variables that influence the output turbidity in a potabili-
zation process are recorded for the period January–June 2013. The major turbidity events are highlighted by 
the shaded areas and they cause an increase in the output turbidity.
1
2
3
4
5
0
0.5
1
PCn
Perc. variance
Perc. expl. var.
Cum. expl. var.
1
2
3
4
5
0
1
2
3
Eigenvalues
PCn
−1
−0.5
0
0.5
1
−1
−0.5
0
0.5
1
River ﬂow
Temp
Floc
Turbin
Turbout
PC1
PC2
(a)
(b)
FIGURE 3.56  Scree plot (a) and 2D biplot (b) of the turbidity recording of Figure 3.55.

190
Environmental Systems Analysis with MATLAB®
This information may be used for process control, for example, by trimming the flocculant dosage 
according to the kind of turbidity event.
3.5.5.2  Fault Detection and Isolation in a Wastewater Treatment Process
The use of PCA for fault detection and isolation (FDI) is well established, and important engineer-
ing results have been achieved thanks to this technique (Lennox and Rosen, 2002; Yoo et al., 2002, 
2006; Rosen et al., 2003; Schraa et al., 2006; Corominas et al., 2009, 2011). The case study pre-
sented here is fully documented elsewhere (Baggiani and Marsili-Libelli, 2009), and only the fault 
detection motivation and results are summarized here. The monitoring algorithm was implemented 
on a full-scale activated sludge plant in Tuscany (Italy) with a capacity of 88,600 PE treating a mix 
of domestic sewage and septic tank discharges. The process was conceived for biological nutrient 
removal by fitting a pre-denitrifying tank followed by three parallel-fed oxidation tanks and three 
secondary settlers. Nutrient removal requires sophisticated ion-specific probes, which need constant 
maintenance and monitoring. For this reason, PCA-based diagnostic software was set up to process 
the probe signals in real time and discriminate between sensor failure and process anomalies. The 
process data consisted of ammonium-N (NH4
+) and oxidized-N NO
OX
X
(
) measurements at the outlet 
of the oxidation tanks and one additional oxidized nitrogen measurement at the output of the anoxic 
denitrification stage NO
DEN
X
(
). In this project, PCA was used to detect the departure of operational 
data from the correct performance, previously defined on the basis of an initial record of ‘normal’ 
data, assumed as a yardstick, and to be updated during real-time operation. The faults were detected 
by checking the global statistics T 2 and Q against their thresholds, together with the CVs, to indicate 
which sensor was responsible for each fault. The innovative aspect of the project is in the real-time 
updating of the reference data set, which is constantly refreshed with new data, provided they are 
0
20
40
60
80
100
120
140
160
0
10
20
River ﬂow
0
20
40
60
80
100
120
140
160
0
10
20
Floc.
0
20
40
60
80
100
120
140
160
0
10
20
Turbin
Contribution variables
(A)
(B)
(C)
(D)
(D)
(E)
0
20
40
60
80
100
120
140
160
0
50
100
150
Time (d)
T2
T2
T2
lim
FIGURE 3.57  Consistency indicators (CV and T2) for the turbidity recording of Figure 3.55. The shaded 
areas indicate which variable was mainly responsible for the anomalies globally indicated by T2.

191
Analysis of Environmental Time Series
proved to represent a ‘correct performance’ indication. The discrimination ­procedure whereby new 
data are accepted or rejected into the reference data set is fully described in Baggiani and Marsili-
Libelli (2009) and is based on a T 2 check, setting a stricter acceptance limit well below Tlim.
Some examples are now presented, drawn from the plant operational record during the experi-
mentation phase (September 2007–June 2008) implemented in collaboration with the Information 
Technology department of the responsible integrated water cycle manager (Acque SpA), to illustrate 
the performance of the FDI procedure. Figure 3.58 shows how the FDI reacts to a malfunction of 
the ammonium-N probe (NH4
+), which at day 7.2 in the recording fails to operate properly. Both T 2 
and Q jump out of the plot to slowly return later, though neither of these indicators return below 
their thresholds because the faulty sensor was not promptly repaired. The problem with a delayed 
repair of the fault is that bad data continue to be produced, and obviously they are not accepted into 
the reference data set of the FDI. In this way, there is a risk of the database becoming impoverished, 
or at least becoming outdated for lack of fresh data. The contribution plot, shown in the lower part 
of the figure, indicates that the NH4 sensor was responsible for the malfunction. It could be argued 
that a simple checking of the NH4 sensor output could do the job equally well, but the FDI algo-
rithm is conceived to detect more complex faults and, thanks to the contribution plots, can assist 
the operator with a centralized information about the state of the plant, by immediately indicating 
CV plot
6.0
6.2
6.4
6.6
6.8
7.0
7.2
7.4
7.6
7.8
8.0
0
20
40
60
80
100
T 2
Q
Days
0
5
10
15
20
25
6.0
6.2
6.4
6.6
6.8
7.0
7.2
7.4
7.6
7.8
8.0
Qlim
(mg N/L)
6.0
6.2
6.4
6.6
6.8
7.0
7.2
7.4
7.6
7.8
8.0
0
10
20
30
NH4
+ probe fault
NH4
+
T2
lim
NOXDEN
NOXOX
NH4
+ NOXDEN NOXOX
FIGURE 3.58  Detection of an NH4
+ sensor fault through T2 and Q statistics. The fault diagnosis is confirmed 
by the contribution plots, which indicate that the NH4
+ sensor caused the fault. The CV bars refer to the time 
when the peak T2 occurred. (Reproduced with permission from Baggiani, F. and Marsili-Libelli, S., Water 
Sci. Technol., 60, 2949, 2009.)

192
Environmental Systems Analysis with MATLAB®
the faulty element. This aspect becomes important when many sensors are connected to the FDI and 
concurrent failures must be resolved.
Figure 3.59 shows the discriminating capacity of the CVs (Section 3.5.3.2) in addition to the 
global indicator T 2 and Q. In this instance, the first warning was caused by a sudden decrease of 
the oxidized nitrogen measurement in the oxidation tank NO
OX
X
(
), but this decrease was not large 
enough to be diagnosed as a sensor fault. Rather, it could be ascribed to an excess ammonia loading. 
The CV plot clearly indicates which sensor was mainly responsible for the alarm. The second warn-
ing, instead, was clearly recognized by the CVs as caused by the ammonia sensor (NH4
+), whose 
output remained near zero for nearly 14 h, after which the sensor was repaired and resumed normal 
operation. In response to this, the T 2 returns below the Tlim
2  threshold as soon as the fault was fixed, 
contrary to the previous example of Figure 3.58.
4.0
4.2
4.4
4.6
4.8
5.0
5.2
5.4
5.6
5.8
6.0
0
10
20
(mg N/L)
4.0
4.2
4.4
4.6
4.8
5.0
5.2
5.4
5.6
5.8
6.0
0
5
10
15
20
25
Days
T 2
CV plot
CV plot
NH4
+ NOXDEN NOXOX
NH4
+
NH4
+ fault
NOXDEN
NOXOX
NOXOX anomaly
NH4
+ NOXDEN NOXOX
T2
lim
FIGURE 3.59  Discrimination between differing faults through nitrogen measurements and T2 statistics and 
CVs, which play a fundamental role in discriminating the nature of the two faults. (Reproduced with permis-
sion from Baggiani, F. and Marsili-Libelli, S., Water Sci. Technol., 60, 2949, 2009.)

193
Fuzzy Modelling of 
Environmental Systems
Neurosis is the inability to tolerate ambiguity.
Sigmund Freud
4.1  INTRODUCTION TO THE FUZZY LOGIC
In the previous chapters, we have dealt with ‘normally’ defined concepts and measurements, in 
the sense that each concept was unequivocally defined by its attributes. We have used, therefore, a 
single-valued logic associated with a clear-cut partition of the reality, where a concept is either true 
or false. This clear-cut logic is a legacy of ancient positivistic societies, such as the Romans, for 
whom tertium non datur (there is not a third option). In contrast, our flexible, or hypocritical, soci-
ety tolerates, and even invites, ambiguity. Sometimes, ambiguity is even necessary for our survival, 
or at least for our peace of mind.
In this chapter, we move away from the ‘conventional’ logic and consider a multi-valued logic in 
which the boundary between true and false becomes blurred—hence the term ‘fuzzy’—and a concept 
can be anything between the extremes of true or false, with its degree of truth varying smoothly from 
zero (totally false) to one (totally true). Fuzzy logic was conceived to handle such uncertain situations. 
It was first introduced by the Iranian-born mathematician Lofti Zadeh (Zadeh, 1965; Yager et al., 
1987) and has been a hot issue in science and engineering ever since, spawning a vast literature in 
mathematics (Klir and Folger, 1988; Pedrycz, 1995, 1996; Patyra and Mlynek, 1996; Jamshidi et al., 
1997; Pelletier, 2000; Hajek, 2010). Moreover, it has been successfully applied to such diverse fields as 
industrial engineering (Sugeno, 1985; Hirota, 1993; Lu, 1996) and environmental sciences (Ganoulis, 
1994, 2009; Bàrdossy and Duckstein, 1995; Marsili-Libelli and Cianchi, 1996). It also paved the way 
for advances in control engineering (Pedrycz, 1993; Kandel and Langholz, 1994; Yager and Filev, 
1994; Nguyen et al., 1995; Ross, 1995; Passino and Yurkovic, 1998; Abonyi, 2003), artificial intelli-
gence, pattern recognition and machine learning (Yager and Zadeh, 1994; Jang et al., 1996; Roger and 
Sun, 1997; Kecman, 2001; Theodoridis et al., 2010; Marsland, 2015; Padhi and Simon, 2015).
According to fuzzy logic, a concept is hardly ever completely true or completely false, but it is 
rather somewhere in between these two extremes. Further, no concept exists per se but is defined in 
comparison to a reference concept (the prototype). A simple example of this difference is shown 
in Figure 4.1, in which instead of a singleton number defining the number x*, as we instinctively 
use in everyday logic, the concept of degree of similarity (or degree of truth or degree of member-
ship) is introduced, defined by the membership function (mf) A
x
a
:µ ( ) centred around the reference 
(prototype) value x, so that the mf µa x *
(
) replaces the value x* itself. Thus, what is important in 
fuzzy logic is not the independent value of a concept, but its similarity to a predefined prototype.
Another example is given in Figure 4.2, considering the statements ‘Real numbers smaller than 
20’ and ‘Temperature between 15 and 25°C’ in the crisp and fuzzy contexts. The crisp logic makes a 
hard distinction by classifying each entry as either true (1, black) or false (0, white), whereas the fuzzy 
logic ranks the truth of each statement, depending on the relative similarity with the reference concept.
What might appear as a mere complication when dealing with simple numbers, does, in fact, 
open vast possibilities for including non-numerical information in the logical process. In broad 
terms, fuzzy logic could be defined as an approximate reasoning method dealing with vaguely 
defined concepts. Figure 4.3 shows how a concept (temperature) can be defined using linguistic 
4

194
Environmental Systems Analysis with MATLAB®
terms (low, medium and high) and translated into precise mathematical terms through a set of suit-
ably selected reference mfs used as prototypes. The novel aspect with respect to crisp logic is that 
a concept may ‘straddle’ differing, if not conflicting, definitions (e.g., low temperature vs. medium 
temperature), a situation totally alien to crisp logic.
Another ‘conventional wisdom’ belief to be dispelled is that fuzzy logic is a newly baked concoc-
tion for probability. In the opening editorial of the IEEE Transaction on Fuzzy Systems, Bezdek 
(1993) proposed a nice example to clarify the difference between fuzziness and probability, which 
is illustrated in Figure 4.4. In Bezdek’s example, the ‘weary traveller’ is confronted with two bottles 
Support
Singleton
x∗
Support
x∗
X
A
x
X
X → A : x → μa (x)
μa (x∗)
(a)
(b)
FIGURE 4.1  The basic difference between crisp and fuzzy logic is representing the number x*. In the crisp 
logic (a) x* is represented by its numerical value, whereas in fuzzy logic (b) it is defined by its similarity to a 
given concept x.
Crisp
Fuzzy
Degree of
membership
Crisp
Fuzzy
Support = Temperature (°C)
1
0
15
25
Concept
Temperature between
15°C  and 25°C 
Crisp set
Fuzzy set
1
0
Support = Real numbers
1
0
Concept
Real numbers
R < 20
20
Crisp set
Fuzzy set
(a)
(b)
Degree of
membership
FIGURE 4.2  Differing representations of the same concept in either crisp or fuzzy logic. While crisp logic uses 
only the ‘equal’ and ‘not equal’ concepts (represented by the dashed lines), fuzzy reasoning is based on the concept 
of similarity with respect to the concept represented by the solid curves. In this way, the crisp true/false duality 
is softened by the membership grade that can vary continuously between 0 (no similarity) to 1 (full similarity).

195
Fuzzy Modelling of Environmental Systems
containing an unknown liquid. Bottle A is labelled ‘Drinkable with fuzziness = 0.9’, whereas the 
label on bottle B reads ‘Drinkable with probability = 0.9’. Which bottle should he drink from? Let 
us elaborate: in bottle A, there is for sure some liquid that resembles drinking water to a consider-
able degree (90%). It may not be mountain spring water but it is drinkable nonetheless. What is 
clear is that the statement ‘Drinkable with fuzziness = 0.9’ means that the liquid inside has been 
tested and found drinkable to a high degree. Then as a result of the test that label has been issued. 
Temperature
Low
Medium
High
Linguistic variable
Linguistic terms
(qualifiers)
Semantic rule
Membership
functions
Support
T (°C)
Overlapping regions
μ
1
0
Degree of truth
μlow
μmedium
μhigh
FIGURE 4.3  The full logical path of translating a linguistic concept (temperature) into a set of mfs. The 
novel aspect of fuzzy logic is the partial overlapping of the mfs (shaded areas), indicating that differing con-
cepts are not necessarily mutually exclusive.
A: Drinkable with
    fuzziness = 0.9
B: Drinkable with
       probability = 0.9
Which bottle would
you rather drink from?
FIGURE 4.4  The ‘weary traveller’ coming to terms with the fundamental difference between fuzziness and prob-
ability. (From Bezdek, J. C., IEEE Trans. Fuzzy Syst., 1, 1–5, 1993.)

196
Environmental Systems Analysis with MATLAB®
Conversely, the label on bottle B sounds a bit spooky. It says that the bottle contains some liquid that 
over a large number of trials of similar bottles proved to be drinkable in 90% of the cases. This is 
a statement based on statistical testing on many similar samples, but no assurance is given for that 
particular sample, for which there is one chance out of ten that it could be anything from dreadful 
to poisonous. Obviously, Bezdek concludes that it is advisable to drink from the bottle with the 
fuzzy label, and how could anyone disagree with him? This entertaining and instructive example 
underlines the different kind of information provided by fuzziness (proven similarity of concepts) 
as opposed to probability (statistical averaging). In other words, fuzziness identifies a certain a 
posteriori quality, whereas probability represents an uncertain a priori expectation. Needless to 
say, after opening bottle B, its probability either jumps to 1 or plummets to 0, but—alas—too late.
4.1.1  Fuzzification
The previous examples indicate that to enter the fuzzy world, a concept needs to be fuzzified, mean-
ing that its value or its semantics must be converted from absolute to relative by comparison to a set 
of reference concepts, mathematically represented by the mfs. Figure 4.5 illustrates the conversion 
of the real number x* from crisp to fuzzy, producing a set of mfs:
	
x
x
x
*
( *)
( *)
fuzzification

→


0
0
2
3
µ
µ
	
(4.1)
Equation 4.1 refers to the example of Figure 4.5, where only μ2 and μ3 yield a non-zero degree of 
membership, while μ1 and μ4 are not involved. Fuzzification therefore implies substituting a vector 
of degrees of membership to the original number or concept.
4.1.1.1  Possible Analytical Forms of mfs
There is great freedom in shaping the mfs and the MATLAB® Fuzzy Toolbox provides a wide 
choice of predefined functions, as shown in Figure 4.6. Each of them has a number of ‘handles’ 
(numerical parameters) that can be manipulated to change its shape, as exemplified in Box 4.1 for 
the gauss2mf mf, an asymmetrical Gaussian function with four shape parameters, which repre-
sent the variance and mean of each half Gaussian (left and right of the middle).
4.1.2  Basic Properties of Fuzzy Sets
The basic properties of fuzzy sets are summarized in Table 4.1. The elementary set operations of 
union and intersection are shown in the first row of Figure 4.7, whereas the second row shows a 
result quite unlike the crisp sets: the union of a fuzzy set A with its complement A
x
a
:
( )
1−


µ
 is not 
the universe, and the intersection is not empty. The last row shows the relationship between union 
and intersection fuzzy sets.
4.1.3  Logic Connectives: T-Norms and S-Norms
In Figure 4.7, the fuzzy union and intersection were implemented with the min and max operators, 
but this is not the only choice. A whole class of alternate operators can be defined, provided they 
x∗
Membership functions
Support X
μ1(x)
μ2(x)
μ3(x)
μ4(x)
μ2(x∗)
μ3(x∗)
FIGURE 4.5  Fuzzification of the crisp concept x* means computing its degree of membership with respect 
to the set of mfs µ µ µ µ
1
2
3
4
,
,
,
(
).

197
Fuzzy Modelling of Environmental Systems
satisfy the properties of S-norms for the ‘or’ ∨
( ) connector and T-norms for the ‘and’ ∧
( ) connector, 
respectively, as shown in Table 4.2.
4.2  BUILDING A FUZZY INFERENCE SYSTEM
We are now going to use the fuzzy sets just defined to implement an automated fuzzy inference 
system (FIS), capable of deducing a logical result on the basis of the given premises. The deductive 
logic is based on the modus ponens rule of inference. It represents a widely accepted method for the 
construction of deductive reasoning, whereby given an antecedent and a consequent, the truth of 
the latter is determined by the truth of the former. In crisp logic, the antecedent may only be either 
BOX 4.1  MF PARAMETRIZATION (LEFT) AND 
ITS CORRESPONDING SHAPE (RIGHT)
The mf handles p are shown as squares in the graph.
0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
x
mf
p(3)
p(1)
p(2)
% Support
x=[0:0.01:1];
mf_type='gauss2mf';
% mf parameters
p= [0.185 0.538 0.0742 0.697];
% mf evaluation
mf = evalmmf(x,p,mf_type);
figure(1)
plot(x,mf)
xlabel('support')
ylabel('mf')
p(4)
0.0
0.2
0.4
0.6
0.8
1.0
trapmf
gbellmf
trimf
gaussmf
gauss2mf
smf
0.0
0.2
0.4
0.6
0.8
1.0
zmf
psigmf
dsigmf
pimf
sigmf
Support
Support
FIGURE 4.6  Mfs available in the MATLAB Fuzzy Toolbox.

198
Environmental Systems Analysis with MATLAB®
TABLE 4.1
Basic Fuzzy Sets Properties
Property
Definition
Normality: a fuzzy set is said to be normal if there exists at 
least one element whose membership is equal to one.
∃
=
x
x
µ( )
1 
Height: largest membership grade of any element in the 
set A.
h A
x
x
( )
max ( )
=
µ
 
Support: the crisp subset X in the domain of x for which all 
mfs are nonzero.
Supp
and
( )
( )
A
x
x
x
X
=
>
∈
{
}
µ
0
 
Core: crisp subset of A containing the elements with 
membership equal to one.
Core
and
( )
( )
A
x
x
x
X
=
=
∈
{
}
µ
1
 
Containment: given two fuzzy sets A and B, A is said to be 
contained in B if 
B
A
x
x
x
X
B
A
⊂
>
∀∈
|
( )
( )
µ
µ
for
 
B
A
Equality: fuzzy sets A and B are said to be equal if
A
B
B
A
x
x
x
X
B
A
⊂
⊂
⇒
=
∀∈
and
for
µ
µ
( )
( )
 
Cardinality: extends the notion of conventional sets. For 
fuzzy sets with n elements, it is defined as the sum of 
membership grades.
Card A
x
A
i
i
n
( ) =
(
)
=∑µ
1
 
α-cut: subset of A formed by the elements whose 
membership is greater than α.
A
x
X
x
A
α
µ
α
=
∈
≥
{
}
|
( )
 
x
α
Fuzzy union (OR)
A ∨ B : max {μA (x), μB (x) x ∈X}
A ∧ B : min { μA (x), μB (x) x ∈X}
Fuzzy intersection (AND)
A ⊂ C and B ⊂ C
D ⊂ A and D ⊂ B
D ⊂ C
D ⊂ C
D
C
X ≠ A ∨ A : max {μA(x), 1 − μA(x) x ∈X}
∅ ≠ A ∧ A : min {μA(x), 1 − μA(x) x ∈X}
X
A
A
A
X
A
X
A
B
X
A
B
Fuzzy union with complement
Fuzzy intersection with complement
If  C = A ∨ B and D = A ∧ B, then
FIGURE 4.7  Logical operations on fuzzy sets. The shaded areas represent the result of the operation.

199
Fuzzy Modelling of Environmental Systems
true or false, thus implying that the consequent is also either true or false, but in fuzzy logic, things 
get a lot more interesting because the degree of truth of the consequent is determined (actually 
upper limited) from the degree of truth of the antecedent, of which it cannot be greater. In other 
words, the consequent cannot be ‘truer’ than its premises. Thus, fuzzy logic provides an attractive 
way to deal with partially true statements, which can be composed with the logical operators or and 
and to yield the degree of truth of the implied concept.
4.2.1  Fuzzy Inference
In strictly logical terms, given a fuzzy antecedent x
X
∈
 and a fuzzy consequent y
Y
∈ the modus 
ponens inferential logic rule R can be stated as
	
R
x
A
y
B
R X
Y
:
:
,
if
is
then
is
(
)
(
)
×
→[
]
0 1 	
(4.2)
where A and B are fuzzy sets defined by their mfs, so that the linguistic statements x
A
is
(
) and y
B
is
(
) 
actually produce the degrees of membership µa x
( ) and µb y
( ) on their supports X and Y. Therefore, the 
implication R operates over the Cartesian product of the two spaces (antecedent X) and (consequent 
Y). Far from being a trivial tautology, Equation 4.2 states that the degree of truth of A determines the 
upper bound for the degree of truth of B, according to the logical operators previously defined. In par-
ticular, the implication then is normally implemented with a T-norm, representing a logical and ∧
( ). 
Substituting the mfs in Equation 4.2 yields the practical rule of inference:
	
R
x
y
x
y
x
y
a
b
a
b
a
b
:
min
,
µ
µ
µ
µ
µ
µ
( ) ∧
( ) →
( )
( )
(
)
( )×
( )
min operator
producct operator



	
(4.3)
Now we encounter a new problem: x and y are defined over two independent supports X and Y, 
so the relation of Equation 4.3 should be defined over the Cartesian product with a considerable 
increase of the computational complexity 

→
2. However, we do not need to carry on the whole 
TABLE 4.2
Definition of T-Norms and S-Norms to Implement the Fuzzy Logical 
Operations of Union and Intersection
T-Norm = AND ∧∧
( )
S-Norm = OR ∨∨
( )
T
x
x
x
x
A
B
A
B
µ
µ
µ
µ
( )
( )
(
) =
( ) ∧
( )
,
S
x
x
x
x
A
B
A
B
µ
µ
µ
µ
( )
( )
(
) =
( ) ∨
( )
,
Boundedness (The smallest prevails):
T
T a
T
a
a
0 0
0
1
1
,
;
,
,
(
) =
(
) =
(
) =
Monotonicity:
b
c
T a b
T a c
≤
⇒
(
) ≤
(
)
,
,
Commutativity
T a b
T b a
,
,
(
) =
(
)
Associativity:
T a T b c
T T a b c
,
,
,
,
(
)
(
) =
(
)
(
)  
Boundedness (The largest prevails):
S
S a
S
a
a
1 1
1
0
0
,
;
,
,
(
) =
(
) = (
) =
Monotonicity:
b
c
S a b
S a c
≤
⇒(
) ≤(
)
,
,
Commutativity
S a b
S b a
,
,
(
) = (
)
Associativity:
S a S b c
S S a b c
,
,
,
,
(
)
(
) =
(
)
(
)  
Possible T-norms
Standard
intersection
,
min
Algebraic
product
,
T a b
a b
T a b
(
)
( , )
=
(
) = a
b
T a b
a
b
×
(
) =
+
−
(
)
Lukasiewicz
intersection
,
max
,0
1
Possible S-norms
Standard
union
,
max
,
Probabilistic
sumt
,
S a b
a b
S a b
a
b
a
(
)
(
)
=
(
) =
+
−
×b
S a b
a
b
Lukasiewicz
union
,
min
,
(
) =
+
(
)
1

200
Environmental Systems Analysis with MATLAB®
two-dimensional relation R because this is actually computed only for the current value x * of the 
antecedent. Therefore, instead of the whole Cartesian product, only the ‘slice’ for x
x
=
* is required, 
and relation (4.3) simplifies into
	
R
x
y
y x
x
y
y x
a
b
b
a
b
b
:
*
|
*
min
* ,
|
µ
µ
µ
µ
µ
µ
(
) ∧
( ) →
(
) =
(
)
( )
(
)
min operator
*
*
(
) =
(
)×
( )



µ
µ
a
b
x
y
product operator
	
(4.4)
Figure 4.8 shows three possible representations of the fuzzy implication (4.2) for the two most com-
monly used operators (min and product). Figures 4.8a and b show the full extent of the implication 
represented by the relational operator (min in a and prod in b) over the entire domains X and Y, 
whereas Figures 4.8c and d show the ‘slicing’ of the implication surface for x
x
=
*. In these cases, 
the implication reduces to the one-dimensional shaded area. In the last row, Figures 4.8e and f show 
the same one-dimensional implications deduced from the previous two-dimensional plots. This last 
representation will be the preferred one to describe the implication in the following.
The implication of Equation 4.2 can be extended to include more than one antecedent and differing 
connectors. The general rule, however, is that the overall degree of truth of the antecedents determines 
the degree of truth of the consequent. An example of how a composite antecedent might look like is
	
if
is
and
is
or
is not
x
A
x
A
x
A
1
1
2
2
3
3
(
)
(
)
(
)	
(4.5)
Degree of membership
‘min’ operator
‘prod’ operator  
Degree of membership
0
1
x∗
x∗
y
x∗
y
0
1
y
0
1
Degree of membership
0
1
x∗
y
Degree of membership
Degree of membership
Degree of membership
R(x,y) = min (μa (x), μb (y))
R : (X × Y) → [0,1]
min (μa (x), μb (y))
μa (x) × μb (y|x∗)
R : (X × Y) → [0,1]
R(x,y) = μa (x) × μb (y)
μb (y|x∗)
μa (x)
μa (x)
μb (y)
μb (y)
μb (y|x∗)
μb (y|x∗)
μb (y|x∗)
μa (x)
μa (x)
(a)
(b)
(c)
(d)
(e)
(f)
FIGURE 4.8  Three different aspects of the fuzzy implication for the two most common operators (min 
and prod). Figures (a) and (b) show the whole implication surface resulting from the Cartesian product. 
Figure (c) and (d) show that the whole antecedent domain can be reduced to the single x* antecedent value. 
Figures (e) and (f) present the same results, but with independently plotted supports x and y. The shaded 
areas represent the mf resulting from the implication.

201
Fuzzy Modelling of Environmental Systems
whose computational version in terms of mfs is
	
µ
µ
µ
a
a
a
x
x
x
1
2
3
1
2
3
1
(
) ∧
(
) ∨
−
(
)


AND
OR
NOT

 



 	
(4.6)
The resulting degree of truth of Equation 4.6 determines the highest degree of truth of the conse-
quent. Thus, the general ith rule Ri would look like
	
R
A
A
x
A
i
i
i
n
n i
:
,
,
,
if
is
and
is
and
and
is
Antecedents
x
x
1
1
2
2
(
)
(
)
(
)
…









then
is
Consequent
y
Bi
(
)	
(4.7)
which, using T-norms as connectives, translates into
	
µ
µ
µ
1
1
2
2
,
,
,
,
i
i
n i
n i
b
x
x
x
v
y
i
(
) ∧
(
) ∧
∧
(
) ∧
( )

	
(4.8)
Figure 4.9 provides a graphical representation of a rule with two antecedents (x1 and x2) and trian-
gular mfs. The two examples differ in the choice of the ‘then’ operator, whereas the ‘min’ is used 
in both cases as the ‘and’ connector, which means that the antecedent with the smallest degree of 
truth prevails in the implication.
4.2.2  Fuzzy Reasoning à la Mamdani
Fuzzy reasoning is based on a set of implications (rules) where each consequent output is determined 
by the combination of the antecedents, as in Equation 4.7. This structure of fuzzy reasoning, which 
will now be discussed, was introduced by Mamdani (Procyk and Mamdani, 1979). In general, a 
complete FIS will involve m rules like Equation 4.7, which can be combined with the new connective 
else, usually implemented as a logical ‘or’ ∨
( ) because each rule represents an alternative outcome of 
the reasoning, albeit in a non-exclusive fuzzy sense. The various rules thus combined yield the FIS:
	
R
x
A
x
A
x
A
y
B
i
i
i
i
n
n i
i
i
:
and
,
,
,
if
is
and
is
and
is
then
is
1
1
2
2
(
)
(
)
(
)
(
)

=1,
,
m	
(4.9)
In Equation 4.9, each rule is composed of n antecedent variables x x
xn
1
2
,
,
,

(
) each of which is 
fuzzified with q mfs A
A
A
i
i
i q
,
,
,
,
,
,
1
2 
(
) according to the fuzzification rule:
	
x
A
x
i
n
y
B
v
y
k
q
i
i k
i k
i
i
i
i
i
is
is
,
,
,
;
,
, .
(
) →
(
)
=
,
(
) →
(
)
=
µ
1
1


	
(4.10)
if (x1 is A1) and (x2 is A2) then (y is B) ⇒ vb (y) = (μ1(x1) ∧ μ2(x2)) ∧ μb(y)
1
0
(a)
(b)
1
0
1
0
1
0
1
0
1
0
A1
A2
x1
x2
x
x
y
μ1 (x1)
A1
A2
μ1 (x1)
μb
μ2 (x2)
x1
x
x2
x
y
μb
μ2 (x2)
vb (y) = min (min(μ1(x1), μ2(x2)), μb(y))
vb (y) = min (μ1(x1), μ2(x2)) ×  μb(y)
FIGURE 4.9  Graphical representation of a fuzzy implication with two antecedents, using differing ‘then’ 
operators: ‘min’ in case (a) and ‘prod’ in case (b). In both cases, the ‘and’ between antecedents were imple-
mented with a ‘min’ operator, therefore the antecedent with the smallest degree of truth prevails.

202
Environmental Systems Analysis with MATLAB®
The maximum number of different rules m that can be written given n antecedents each defined 
with q mfs is therefore
	
Maximum number of rules: m
n
= q .	
(4.11)
Further, assuming that the rules of Equation 4.9 are composed with an else operator, which has the 
S-norm properties, then the set of rules can be written in a compact form as
	
R
x
v
y
j i
i
i
i
j
n
i
m
:
.
,
µ
(
) ∧
(
)






=
=
1
1 ∩
∪
	
(4.12)
The maximum number of rules computed by Equation 4.11 is a purely combinatorial result, which 
in practice may be redundant. In fact, several rules are likely to be discarded as being contradic-
tory or unrealistic. Though rules can be directly defined by inspection, if the relevant information 
is available, a more systematic approach to rule writing may consist of writing down the whole set 
of possible combinations, according to Equation 4.11, and later pruning the lot by removing the 
inconsistent rules. A further refinement can then be made by running the FIS with the available data 
and discarding the rules that are activated in less than a given percentage of instances, for example, 
less than 5%.
4.2.2.1  Fuzzy Inference à la Sugeno
An alternative structure of an FIS was later proposed by Takagi and Sugeno (1985), who supposed 
that the consequent could be a deterministic (crisp) quantity, thus modifying Equation 4.9 into
	
R
x
A
x
A
x
A
y
b
i
i
n
n
i
i
:
and,
,
,i
,i
,i
if
is
and
is
and
is
then
1
1
2
2
(
)
(
)
(
)
=
=

1,
, .
m 	
(4.13)
Compared with the previous Mamdani definition, Equation 4.13 may appear as a setback. However, 
this approach paved the way to incredible developments, given the freedom to define the conse-
quents in the most diverse ways, from a numerical constant, as in Equation 4.13, to anything from a 
linear function to full dynamical systems that could be blended by the antecedents degree of truth 
to represent any complex system behaviour in differing regions of operation.
Figure 4.10 summarizes the possible operators to be used in building an FIS in either Mamdani 
or Sugeno logic. The intra-rule connectors are normally of the ‘and’ kind (T-norms), whereas the 
Rules connective
max among
consequents
Implication
min or prod
Antecedent
connectives
min or prod 
ELSE
y1 is B1 Mamdani
y1 = b1 Sugeno
y2 is B1 Mamdani
y2 = b1 Sugeno
R1 : if  x1 is A1,1 and x2  is A2,1 then
R2 : if x1 is A1,2 and x2  is A2,2 then
μ1,1 (x1)
μ1,2 (x1)
μ2,2 (x2)
μ2,1 (x2)
↑
↑
↑
↑
FIGURE 4.10  Summary of possible operators used in building an FIS.

203
Fuzzy Modelling of Environmental Systems
rules are linked by ‘else’ statements implemented as ‘or’ connectors (S-norms). The ‘then’ connec-
tor is always implemented as a T-norm.
4.2.3  Defuzzification
The result of the FIS of Equations 4.9 or 4.13 is either a fuzzy set (Mamdani) as shown in Figure 4.11 
or a set of constants v b
i
i
(
) in the Sugeno logic of Figure 4.12.
In either case, the outcome of the FIS is not compatible with ‘human’ logic, which requires a 
crisp output. The FIS result must then be defuzzified to yield a unique result. In other words, defuzz-
ification designates the ‘most representative’ crisp equivalent of the fuzzy reasoning outcome. In 
the Mamdani logic, there are several ways to compute the defuzzified equivalent of the output ydefuz
(
). 
ELSE
x
x
x
x
1
0
1
0
1
0
R2
1
0
1
0
1
0
1
0
R1
A1,1
A1,2
A1,2
R1 : if (x1 is A1,1) and (x2 is A2,1) then y1 = b1
R2 : if (x1 is A1,2) and (x2 is A2,2) then y2 = b2
else
v1 = min (μ1,1 (x1), μ2 (x2))
v2 = min (μ1,2 (x1), μ2,2 (x2))
μ1,1 (x1)
μ1,2 (x1)
A2,2
μ2,2 (x2)
b1
y
y
y
b1
b2
b2
x1
x2
μ2,1 (x2)
FIGURE 4.12  Composition of two Sugeno fuzzy rules (R1 and R2) resulting in the consequent bars at the far 
right. Both the ‘and’ and the ‘then’ connectors were implemented with the ‘min’ operator, whereas ‘max’ was 
used for the ‘else’ connector.
y
1
0
y
1
0
1
0
1
0
1
0
1
0
1
0
y
ELSE
x
x
x
x
R1
R2
A1,1
B1
B2
A1,2
A2,2
R1 : if (x1 is A1,1) and (x2 is A2,1) then (y1 is B1)
R2 : if (x1 is A1,2) and (x2 is A2,2) then (y2 is B2)
else
v1 = min (μ1,1 (x1), μ2 (x2))
v2 = min (μ1,2 (x1), μ2,2 (x2))
μ1,1 (x1)
μ1,2 (x1)
μ2,2 (x2)
x1
A1,2
x2
μ2,1 (x2)
FIGURE 4.11  Composition of two Mamdani fuzzy inference rules (R1 and R2) producing the consequent mf 
shown at the far right. Both the ‘and’ and the ‘then’ connectors were implemented with the ‘min’ operator, 
whereas ‘max’ was used for the ‘else’ connector.

204
Environmental Systems Analysis with MATLAB®
The most popular of them is the ‘centre-of-gravity’ (COG), or centroid, method, which considers 
the output fuzzy set as a geometrical figure whose value on the y-axis can be determined as
	
y
y v y dy
v y dy
Y
Y
defuz =
⋅( )
( )
∫
∫
	
(4.14)
where the integral is extended to the whole support Y, as shown in Figure 4.13a. Numerical inte-
gration poses some practical problems, because the shape of the output fuzzy set is not known in 
advance and changes with the inputs as the FIS evolves, but it can be approximated by a discrete set 
of nz values, as shown in Figure 4.13b, so that the integral (4.14) may be replaced by a summation
	
y
y v y
v y
i
i
i
n
i
i
n
z
z
defuz =
⋅( )
( )
=
=
∑
∑
1
1
	
(4.15)
In the Sugeno case, this approximation is not necessary because the FIS produces a set of discrete 
outputs, represented in Figure 4.13c by a collection of bars, placed at the consequent output values 
bi
( ), each of height vi. Therefore, the ydefuz value is computed as a weighted sum similar to (4.15),
	
y
b v
v
i
i
i
m
i
i
m
defuz =
⋅
=
=
∑
∑
1
1
	
(4.16)
with the summation extended to the number of consequents m.
In addition to the COG method, the MATLAB Fuzzy Toolbox provides several alternate defuzz-
ification methods in the Mamdani case, as shown in Figure 4.14. The bisector method divides the 
output mf into two parts of equal area. If trapezoidal mfs are used, the output is likely to have a flat 
top, in which case any of the three methods (som, mom, lom) can be used. They would yield ydefuz 
as the smallest, middle or maximum value of the highest flat part of the mf.
Regardless of the method used for the defuzzification, the structure of the FIS is summarized 
in Figure 4.15. First, the antecedent variables are fuzzified to produce their degrees of truth with 
respect to the predetermined mfs. They yield the degree of activation of each rule from which the 
final output is obtained by defuzzification.
4.2.3.1  Fuzzification/Defuzzification Errors
The processes of fuzzification and defuzzification (fuz/defuz) begin and end the FIS and as such 
are the two communication ports between the crisp and the fuzzy worlds. They are non-linear 
data transforms that might introduce some error in this two-way conversion process. To compare 
the performance of the two fuzzy logic approaches (Mamdani and Sugeno), Figure 4.16 shows a 
Y
(a)
(b)
(c)
ydefuz
y1
bi
yi
ydefuz
ydefuz
ynz
Y
Y
v(y)
vi
v(yi)
FIGURE 4.13  Mamdani and Sugeno defuzzification methods. In the Mamdani theoretical case (a) the COG 
ydefuz can be obtained by integration of the continuous mf. In practice (b) this is reduced to nz values and the 
integral is approximated by a weighted summation. In the Sugeno case (c) the output is naturally a collection 
of discrete values and ydefuz is computed by the weighted sum of the consequent values.

205
Fuzzy Modelling of Environmental Systems
simple logic that converts a number (x) into its fuzzy equivalent and then back into a crisp quantity. 
In the Mamdani case, the same mfs are used in both the antecedent and the consequent. Because 
the two quantities are in the same principle, any difference is due to errors introduced by the fuz/
defuz operations. In this example, we used triangular mfs that overlap at the middle value (0.5). 
It is known (Pedrycz, 1995) that this mfs arrangement yields the best results in terms of fuzzifica-
tion errors. Nevertheless, some errors appear in Figure 4.16b due to the fact that the first and last 
triangular mfs do not have the same symmetrical shape of the internal ones and therefore have a 
lesser weight in the defuzzification. Conversely, the Sugeno logic does not introduce any fuz/defuz 
error, as can be seen in Figure 4.16c.
4.3  THE MATLAB FUZZY TOOLBOX
The MATLAB Fuzzy Toolbox provides all the basic functionalities required to build an FIS and 
much more. Its features will now be illustrated.
x1
x2
xn
Inference
rules
q membership
functions
n antecedents
Defuzzification
ydefuz
ydefuz
Antecedents
Consequent
q membership
functions 
Fuzzification
Antecedent
degrees of truth
μ1 (x1) ... μq (x1)
μ1 (xn) ... μq (xn)
Mamdani
Sugeno
FIGURE 4.15  Structure of a Mamdani or Sugeno FIS. First, the antecedent variables are fuzzified to pro-
duce their degrees of truth with respect to the predefined mfs. The inference rules combine this information 
to produce the degree of truth of the consequents, from which the final output is obtained by defuzzification.
cog
bisector
mom
som
lom
cog = centre of gravity
bisector = divides the mf in two equal halves
som = smallest of maximum
mom = middle of maximum
lom = largest of maximum
FIGURE 4.14  Defuzzification methods available in the MATLAB Fuzzy Toolbox.

206
Environmental Systems Analysis with MATLAB®
4.3.1  The FIS Editor
The best way for the beginner to become familiar with the world of fuzzy reasoning is to move 
the first steps within the Fuzzy Editor in the MATLAB Fuzzy Toolbox, where a complete FIS can 
be set up without writing any code. The editor consists of the five interconnected views shown in 
Figure 4.17, whose capabilities are now briefly described in the order in which they are normally 
used. The following discussion, and related screen shots, refers to a simple non-technical example 
drawn from the fuzzy toolbox demos, named tipper2, which suggests how to tip the waiter at a 
restaurant. The decision is based on two factors (antecedents): quality of food and quality of service, 
and the consequent is obviously the tip amount.
	
a.	FIS definitions: This is the first window to appear when the editor is invoked by typing 
fuzzy in the command window. If the user wants to edit a previously defined FIS, this can 
be retrieved by typing fuzzy <fisname>, where <fisname> is an existing .fis file. 
In the upper part of the window, the FIS structure is depicted, with the antecedents on the 
left, the rules in the middle (specifying whether they follow a Mamdani or a Sugeno logic) 
and the consequent on the right. In the lower part of the window, the user can specify the 
kind of connectors and the defuzzification method. By double-clicking on an antecedent 
icon, the control is transferred to the membership editor.
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Input x
Output y
Error introduced
by the leftmost mf
Error introduced by
the rightmost mf
Mamdani Input/Output
Sugeno Input/Output 
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Input x
Output y
(a)
(b)
(c)
Compare
x and y
Input
x
Output
y
Fuzzification
0.0 0.2 0.4 0.6 0.8 1.0
Sugeno
defuzzification
Mamdani
defuzzification
Mamdani Ri : if (x is Ai) then (y is Ai)
Sugeno Ri : if (x is Ai) then y = Ai
0.0 0.2 0.4 0.6 0.8 1.0
0.0 0.2 0.4 0.6 0.8 1.0
FIGURE 4.16  Comparison of fuzzification/defuzzification errors in the Mamdani and Sugeno fuzzy logic 
shown in (a). The Mamdani errors (b) near the boundaries of the domain are caused by the different shape of 
the external mfs, which are half the size of the central ones. By contrast, the Sugeno logic (c) does not intro-
duce any such errors.

207
Fuzzy Modelling of Environmental Systems
	
b.	Membership editor: In this window, the mfs of each antecedent can be defined (type, 
­support, etc.). Each mf can be assigned a verbal label, which will be used in the rule defi-
nition. Each mf can be manually changed by clicking and dragging the ‘handles’ in the 
graph, whose numerical values are displayed in the window below. Once all the mfs have 
been defined, the user can switch to the rule editor window
	
c.	Rule editor: By default, the inference rules are specified in a ‘verbose’ way, that is, 
using the syntax used in Equations 4.9 for the Mamdani logic or in Equations 4.13 for 
the Sugeno logic, and using the labels defined in the previous window (b). Each rule 
can be set up simply by clicking on the antecedent labels, selecting the connectors, 
and finally clicking on ‘add rule’. Existing rules can be changed by reformulating 
the rule and then clicking ‘change rule’. An unwanted rule can be discarded by 
highlighting the rule and clicking ‘delete rule’. All rules, by default, have a weight 
of 1, but the user may decide to reduce the importance of a rule by inputting a smaller 
weight, for example, 0.5, meaning that the maximum degree of truth of that rule will 
be 0.5 instead of 1.
	
	
With reference to the tipper example, let us examine the rules and see how they make 
sense. Here are the rules:
	
1:if service is poor or food is rancid then tip is cheap
2:if ser
(
)
(
)
(
)
vice is good then tip is average
3:if service is excellent or f
(
)
(
)
(
)
ood is delicious
then tip is generous
(
)
(
)
	
(4.17)
(a)
(b)
(c)
(d)
(e)
FIGURE 4.17  The five views of the Fuzzy Editor for the tipper2.fis example. The three windows in the 
upper row refer to the design environment: (a) FIS definition; (b) membership editor; (c) rule editor; while the 
lower row shows the two windows where the FIS can be tested: (d) rule viewer, and (e) surface viewer.

208
Environmental Systems Analysis with MATLAB®
	
Contrary to common practice, the antecedents of rules 1 and 3 in Equation 4.17 are linked 
with an or connector, whereas and is the most used connector. The second rule has only 
one antecedent. The rules (4.17) are written in what MATLAB calls a verbose format, 
using the linguistic labels defined in the membership editor of Figure 4.17b, but other more 
synthetic formats are available, such as symbolic or indexed.
	
	
Having going through the three previous steps, the FIS is now fully specified and can 
be tested. The FIS editor provides two graphical tools (viewers) to check the behaviour of 
the inference system just set up: the rule viewer and the surface viewer.
	
d.	Rule viewer: This interactive window shows the FIS output when the vertical lines are 
clicked and dragged over each antecedent support. The degrees of activation of all the mfs 
are shown in colour and a thick bar shows the defuzzified output value. By spanning the 
entire antecedent supports, the user can check the output changes and get an idea of the 
overall FIS working.
	
e.	Surface viewer: While the previous rule viewer provides an output corresponding to a 
specific selection of the antecedent values, the surface presents a global view of how each 
combination of antecedents yields the FIS output. If there is only one antecedent, the graph 
reduces to a curve relating the input (antecedent) to the output (defuzzified consequent). 
If there are two antecedents, the three-dimensional graph shows the surface relating them 
to the defuzzified output. If there are more than two antecedents, the user can select the 
pair of antecedents to be displayed.
4.3.2  Structure of the FIS File
Once the FIS has been designed and tested, it can be saved either to the workspace for immediate 
use or to the disk for permanent storage in a file with the extension .fis. In this way, MATLAB 
recognizes FIS file as a structure organized as follows:
	
1
name: tipper
2
type: mamdani
3
andMethod: min
4
orMethod:
'
'
'
'
'
'
 max
5
defuzzMethod: centroid
6
impMethod: min
7
aggMetho
'
'
'
'
'
'
d: max
8
input: [1x2 struct]
9
output: [1x1 struct]
10
rule: 
'
'
[1x3 struct]
	
(4.18)
The first seven lines of the structure (4.18) define the name and type of the FIS together with the 
inference method, then lines 8–10 declare the dimensions of the input, the output and the rules 
which are themselves structures nested in the overall FIS structure. Their detailed content is shown 
in Box 4.2, where each input/output element is defined by name, range (support) and number of 
mfs, whose parameters are also defined in terms of label, type of mf and ‘handles’, that is, param-
eters controlling its shape relative to the support. The rules are defined in the so-called indexed 

209
Fuzzy Modelling of Environmental Systems
form that requires some explanation: the numbers before the comma refer to the antecedents, 
whereas the one after the comma points to the consequent. The number in parentheses is the rule 
weight (generally 1) and the rightmost number refers to the kind of antecedent connector (1 for 
and, 2 for or). The correspondence between the verbose and indexed formats of the first rule is 
shown in Table 4.3.
BOX 4.2  DETAILED STRUCTURE OF THE ‘TIPPER.FIS’ SUB-
STRUCTURES DEFINING THE INPUTS, THE OUTPUT AND THE RULES
[Input1]
Name=’service’
Range=[0 10]
NumMFs=3
MF1=’poor’:’gaussmf’,[1.5 0]
MF2=’good’:’gaussmf’,[1.5 5]
MF3=’excellent’:’gaussmf’,[1.5 10]
 
[Input2]
Name=’food’
Range=[0 10]
NumMFs=2
MF1=’rancid’:’trapmf’,[0 0 1 3]
MF2=’delicious’:’trapmf’,[7 9 10 10]
 
[Output1]
Name=’tip’
Range=[0 30]
NumMFs=3
MF1=’cheap’:’trimf’,[0 5 10]
MF2=’average’:’trimf’,[10 15 20]
MF3=’generous’:’trimf’,[20 25 30]
[Rules]
1 1, 1 (1): 2 
2 0, 2 (1): 1 
3 2, 3 (1): 2
TABLE 4.3
Correspondence between the ‘Verbose’ and the ‘Indexed’ Formats for Rule Representation 
in the MATLAB Fuzzy Editor
Antecedent 1
Antecedent 2
Consequent
Weight
Connector
Verbose format
(service is poor) or
(food is rancid) then
(tip is cheap)
(1)
Indexed format
1
1
1
(1)
2
Symbol explanation
Input 1, mf1
Input 2, mf1
Output, mf1
rule weight
antecedent connector
OR
The example refers to the first rule of the tipper2.fis, Equation 4.17.

210
Environmental Systems Analysis with MATLAB®
The Fuzzy Editor is very handy for beginners, but it may become a limitation for the advanced 
user, who will find it more convenient to build an FIS using MATLAB commands, the most 
common being listed in Table 4.4. Using these commands, the user can directly write a script 
performing all the required operations to set up an FIS, which can be eventually stored as a.fis 
file onto the hard disk with the writefis command and not the save command reserved for 
saving data files.
4.3.3  An Example of Sugeno FIS: Function Approximation
The following example demonstrates how a Sugeno FIS can be set up to approximate a set of data 
in the least-squares sense, as described in Chapter 2. Let us assume that the data are available as 
N x y
,
(
) couples over a support x =
(
)
0
10
,...,
. We want to approximate the function y
f x
=
( ) by a 
Sugeno FIS consisting of the following three simple rules having three straight lines as consequents:
	
R
x
y
a
x
b
R
x
y
a
x
b
1
1
1
1
2
2
2
: if
is Small then
=
+
: if
is Medium then
=
+
(
)
⋅
(
)
⋅
2
3
3
3
3
: if
is Large then
=
+
R
x
y
a
x
b
(
)
⋅
	
(4.19)
TABLE 4.4
Some Frequently Used FIS Editing Commands, Defined as Fields in the FIS Structure
Command
Purpose
a=newfis(‘fis_name’)
Defines a new FIS
a.input(1).range=[min max];
a.input(1).mf(1).name=‘mf_name’;
a.input(1).mf(1).type=‘mf_type’;
a.input(1).mf(1).params=[par1 par2 …];
Defines the attributes of each mf of each antecedent
(to be repeated for all the inputs and for each mf)
a.output(1).name=‘‘;
a.output(1).range=[0 30];
a.output(1).mf(1).name=‘cheap’
a.output(1).mf(1).type=‘trimf’;
a.output(1).mf(1).params=[0 5 10]
Defines the attributes of the consequent
(to be repeated for each mf)
a=readfis(‘fis_name’)
Loads the FIS ‘fis_name’ into the workspace by 
creating the corresponding structure a
writefis(a,’fis_name’)
Writes the workspace fis ‘a’ into a.fis file named 
‘fis_name’
showrule(a)
Lists the rules in the previously loaded ‘a’ FIS
ruleedit(a)
Edits the rules in the previously loaded ‘a’ FIS
a = addrule(a, ruleList)
Adds rules contained in the matrix ‘ruleList’ to the 
previously loaded ‘a’ FIS (one rule per row)
plotmf(a, varType, varIndex)
Plots the required mf contained in the previously loaded ‘a’ 
FIS, with varType representing the ‘input’ (antecedent) 
or ‘output’ (consequent) variables, and varIndex 
referring to the mf number.
Fuzzy Logic Controller 
Inserts an FIS into a Simulink model.

211
Fuzzy Modelling of Environmental Systems
where the three mfs labelled Small, Medium and Large can be suitably defined to cover the support. 
The FIS output is then obtained by defuzzification, according to Equation 4.16, as
	
y
yi
i
i
i
i
fit =
⋅
=
=
∑
∑
µ
µ
1
3
1
3
	
(4.20)
where μi is the degree of truth of each antecedent. Assuming that the antecedent mfs have been 
suitably defined, the adjustable parameters are the coefficients a b a b a b
1
1
2
2
3
3
,
,
,
,
,
(
) of the linear con-
sequents. Thus, we have an optimization problem similar to the one considered in Chapter 2, which 
can be defined as
	
min
,
a b
k
N
i
i
y k
y
k
(
)
=
( ) −
( )
(
)
∑
fit
2
1
	
(4.21)
Figure 4.18 shows the antecedent mfs, each defined by four parameters, and the data to be approxi-
mated. The approximation yfit is then obtained by blending the three linear consequents through 
defuzzification (4.20).
In this optimization problem, the six consequent coefficients of Equation 4.19 have to be adjusted. 
Their initial values can be guessed by computing the regression lines in the intervals where each 
line best approximates the data, as illustrated in Box 4.3 and in Figure 4.19a, while the mfs are 
defined in (b). Following the general procedure of Chapter 2 for setting up the optimization proce-
dure, an error function is defined (Ferr _ fun) to compute the sum of squared errors (sse) as a 
function of the consequent parameters (Par), as shown in Box 4.4. The degrees of truth of each rule 
(Mu) are passed as external parameters via the global statement, together with the data (x, y), and 
the data dimension (n) required to compute the sse.
MATLAB script
………………..
Pm1 = [1.36 −0.4 1.19 0.78];
Pm2 = [0.793 2.51 0.966 3.53];
Pm3 = [0.941 5.804 1.36 10.4];
………………..
0
2
4
6
8
10
0.0
0.5
1.0
1.5
2.0
2.5
x
y
FIGURE 4.18  The antecedent mfs can be defined in the fuzzy editor to cover the three main sections of the 
data shown in the right graph. A separate approximating line is associated with each section. The mf param-
eters shown in the box are copied into the MATLAB script.

212
Environmental Systems Analysis with MATLAB®
After computing the individual model outputs (ym), the fitted output (y _ fit) is obtained by 
defuzzification. The sum of squared errors (sse) is computed in the last line. In the main script, 
the optimization procedure, supervised by Simplex, is then invoked as ParBest=Simplex 
(‘Ferr _ fun’,Par, options), and the results are shown in Figure 4.19c, where it can be seen 
that a good data fit is obtained, although the final linear consequents are fairly different from the initial 
ones.
In particular, the middle line, corresponding to the medium antecedent, looks ‘wrong’, but it 
should be recalled that the overall model output is a blending of the three lines through defuzzifica-
tion (4.20). The FIS parameters (antecedent mfs, initial and optimized consequent coefficients) are 
shown in Table 4.5.
BOX 4.3  GENERATING THE INITIAL VALUES (PAR) OF THE 
REGRESSION COEFFICIENTS IN THE SUB-DOMAINS OF X
The parameters are grouped in the matrix Par, where each row 
corresponds to the coefficients of each approximating line.
% First line
i1=find(x<1.8);
   p1=polyfit(x(i1),y(i1),1);
   y1=polyval(p1,x(i1));
% Second line
i2=find((x>2.2)&(x<5));
   p2=polyfit(x(i2),y(i2),1);
   y2=polyval(p2,x(i2));
% Third line
i3=find(x>5);
   p3=polyfit(x(i3),y(i3),1);
   y3=polyval(p3,x(i3));
% Initial parameter matrix
Par=[p1;p2;p3];
0
2
4
6
8
10
0.0
0.5
1.0
Degree of truth
Large
Medium
Small
x
x
(b)
(c)
0
2
4
6
8
10
0
1
2
y
x
(a)
y2 = a2 •  x + b2
y3 = a3 •  x + b3
y1 = a1 •  x + b1
0
2
4
6
8
10
0.0
0.5
1.0
1.5
2.0
2.5
y
Data
Fit
ŷ2 = â2 •  x + b2
ŷ3 = â3 •  x + b3
ŷ1 = â1 •  x + b1
FIGURE 4.19  Piece-wise linear approximation of the data (a) and antecedent mfs (b). The optimized conse-
quents and the resulting data approximation are shown in (c). These graphs were obtained with the MATLAB 
script 
Function _ Approx _ Sugeno.m 
in 
the 
ESA _ Matlab\Exercises\Chapter _ 4\
Function _ Approx folder.

213
Fuzzy Modelling of Environmental Systems
As a concluding remark on this exercise, it should be considered that the antecedent mfs were 
manually adjusted by tweaking their ‘handles’ in the membership window of the fuzzy editor, as 
shown in Figure 4.18 and were not changed during the optimization. For this reason, the mfs (Mu) 
are passed as parameters to the function Ferr _ fun once and for all, with a considerable ­saving 
in computational time. If the antecedent parameters had been included in the estimation, this would 
not have been possible, and there would have been 3 4
3 2
18
×
+ ×
=
 parameters to optimize. This 
extension is left to the reader as an exercise, though it can be anticipated that this example will 
be reconsidered soon by using a much more powerful method (ANFIS) to obtain a more accurate 
approximation of the data by estimating all the above 18 parameters.
4.4  FUZZY MODELLING
The example of the previous section considered the fuzzy approximation of a simple static model 
y
f x
=
( ), but we are primarily interested in dynamical models, whose behaviour by definition 
depends on their past history, as amply treated in Chapter 1. Given the implication structure of an 
FIS, we shall consider discrete-time dynamical models written in the following form:
	
y
f
y
y
y
u
u
k
k
k
k n
k
k
n
y
u
=
(
)
−
−
−
−
−−
1
2
,
,
,
,
,
,


δ
δ
	
(4.22)
where:
n
n
y
u
+
(
) is the model order, given by the number of past input and outputs needed to compute 
the current output
δ ≥ 1 is the input/output delay, meaning that the most recent input uk−
(
)
δ  influencing the current 
output yk
(
) has entered the system δ samples earlier
BOX 4.4  DEFINITION OF THE ERROR FUNCTION TO 
OPTIMIZE THE CONSEQUENT COEFFICIENTS IN THE 
FUNCTION APPROXIMATION EXERCISE FUN_UP_DOWN
function sse=Ferr_fun(Par)
global Mu x y n
ym=zeros(n,3);
% Compute individual models
for w=1:3
ym(:,w)=Par(w,1)*x+Par(w,2);
end
% Compute model output by defuzzification
y_fit= sum(ym.*Mu’,2)./sum(Mu’,2);
% Compute sum of squared errors
sse=sum((y-y_fit).^2)/n;
TABLE 4.5
Antecedent and Consequent Parameters for the Exercise of Section 4.3.3
Antecedent Parameters
Initial Consequent Parameters
Optimized Consequent Parameters
Pm1=[1.36 - 0.4 1.19 0.78];
Pm2=[0.793 2.51 0.966 3.53];
Pm3=[0.941 5.804 1.36 10.4];
0.9752 0.3067
-0.4287 3.0951
0.1031 0.5197
0.9166 0.2684
-0.2746 2.4548
0.1027 0.5243

214
Environmental Systems Analysis with MATLAB®
No special assumption is made to the model structure, which may be non-linear both in the past 
inputs and outputs, and in the parameters.
4.4.1  Mamdani versus Sugeno Models
The general model structure of Equation 4.22 can be represented by either a Mamdani or a Sugeno 
FIS. In both cases, the antecedents are defined as a collection of mfs, whereas the consequent may 
be another fuzzy set (Mamdani) or a deterministic quantity (Sugeno) ranging from a constant to a 
specific dynamical model, which best describes the system behaviour in a certain operating region. 
In the Mamdani case, the model structure can be described by the generic rule
	
R
y
Y
y
Y
i
k
i
k n
n
i
y
y
: if
is
and
is
output past samples
−
( )
−
( )
(
)
(
)
1
1
…
…





…
…
and
is
and
is
input
u
U
u
U
k
i
k
n
n
i
u
u
−
( )
−−
( )
(
)
(
)
δ
δ
δ
past samples
then
is





,
y
Y
k
i
i
( )
( )
(
)
0
	 (4.23)
where Y
Y
U
U
Y
i
n
i
i
n
i
i
y
u
1
0
( )
( )
( )
( )
( )
(
)
,
,
,
,
,
,


δ
 are suitably defined mfs and δ ≥1 is the input–output delay. 
As already pointed out by Equation 4.11 that computes the number of possible rules, the set of rules 
(4.23) may quickly become explosive, because if q mfs are used to define each antecedent, the maxi-
mum number of rules m is
	
m
q
n
n
y
u
=
+
(
)	
(4.24)
which suggests that the model order n
n
y
u
+
(
) should be kept as low as possible. The general struc-
ture of a Mamdani fuzzy dynamical model is shown in Figure 4.20.
Inference
rules
n delays
yk
yk
uk−δ
yk−1
z−1
z−1
z−1
yk−ny
yk−n
yk−1
uk−δ−nu
Past inputs
Past outputs
Defuzzification
Inputs
multiplexing
.......
.......
(U δ
(i), ...,  
u
U n
(i))
(Y 0
(i))
Antecedents
(Y 1
(i), ...,  
y
Y n
(i))
FIGURE 4.20  General structure of a Mamdani fuzzy dynamical model. The dynamic nature of the model 
is reflected in the delay chain, used to store the past model outputs. A similar arrangement can be set up for 
storing past input data.

215
Fuzzy Modelling of Environmental Systems
In the Sugeno logic, the fuzzy model (4.23) becomes
	
R
y
Y
y
Y
i
k
i
k n
n
i
y
: if
is
and
is
output pastsamples
−
( )
−
( )
(
)
(
)
1
1
…
…






…
…
and
is
and
is
input pas
u
U
u
U
k
i
k
n
n
i
u
u
−
( )
−−
( )
(
)
(
)
δ
δ
δ
tsamples
then





…
…
y
f
y
y
u
k
i
i
k
k n
k
y
( )
−
−
−
=
1,
,
,
,
,
δ
uk
nu
−−
(
)
δ
	 (4.25)
where the consequents f
y
y
u
u
i
k
k n
k
k
n
y
u
−
−
−
−−
(
)
1,
,
,
,
,


δ
δ
 can be any deterministic function, rang-
ing from a constant (singleton) to a local linear model such as
	
y
a
y
a
y
b
u
b
u
k
i
i
k
n
i
k n
i
k
n
i
k
n
u
u
( )
( )
−
( )
−
( )
−
( )
−−
=
⋅
+
+
⋅
+
⋅
+
+
⋅
1
1
1


δ
δ
	
(4.26)
that approximates the system behaviour in a specific operating region. Its structure is shown in 
Figure 4.21.
The common feature of the two fuzzy models (4.23) and (4.25) is the delay chain needed to 
store the past model output to be used as antecedents as the system evolves in discrete-time steps. 
As already pointed out in Chapter 1, memory is the essential feature of dynamical models and the 
delay chain is essential to ‘remember’ the model past outputs. Another common feature of fuzzy 
models is their intrinsically discrete-time nature, whereby the model output is evaluated at Ts time 
intervals.
4.4.2  An Example of a Heuristic Mamdani Fuzzy Model
We are now going to set up a fuzzy model of the pressure tank system, previously considered in 
Section 1.3, using the Mamdani fuzzy logic. Assuming that we do not know the laws of hydrau-
lics, the model is set up by just looking at the input–output data, thus adopting the data-driven 
approach. The mechanistic model developed in Section 1.3 will be used only to generate the data 
Inference
rules
Defuzzification
yk
m consequent
functions
......................
n  delays
uk−δ
yk−1
yk−1
yk
yk−ny
yk−n
uk−δ−nu
Past inputs
Past outputs
Inputs
multiplexing
(U δ
(i), ...,  
u
U n
(i))
Antecedents
(Y 1
(i), ...,  
y
Y n
(i))
y1 = f1 (y,u)
ym = fm (y,u)
z−1
z−1
z−1
......
......
FIGURE 4.21  General structure of a Sugeno fuzzy dynamical model. As in the previous case, the dynamic 
nature of the model is reflected in the delay chain, used to store the past model outputs. A similar arrangement 
is can be set up for storing past input data.

216
Environmental Systems Analysis with MATLAB®
for training and validation, and as a comparison. The pressure flow equation, recalled here for 
convenience, is
	
A dh
dt
F
k
h
v
=
−
	
(4.27)
where:
A is the tank cross section
kv is the friction coefficient of the outlet
F is the input flow
h is the height of the liquid in the tank
The input–output data used to train the fuzzy model are shown in Figure 4.22, together with the 
deterministic model (4.27).
To build the fuzzy model, the following operations are sequentially performed:
	
1.	Definition of the ‘meaningful’ regions of the data for support delimiting.
	
2.	Definition of the number and type (triangular, Gaussian, etc.) of the mfs.
	
3.	Definition of the model structure (number of past inputs and outputs) and of its rules of 
inference.
Point 1 reminds us that the model will ‘learn’ what we ‘teach’ it, in other words, if we train the 
model using data in a given range, it will be lost when confronted with data outside this region. 
Consequently, we must check that our training data are exhaustive and span the entire domain of 
operation.
kv
h
F
0
100
200
300
400
500
600
1.0
1.5
2.0
2.5
3.0
3.5
4.0
4.5
5.0
5.5
6.0
Time (min)
1.0
1.5
2.0
2.5
3.0
3.5
4.0
4.5
5.0
5.5
6.0
h (m)
F (L/min) 
F
h
Deterministic model
A
F−kv
=
dh
dt
h
FIGURE 4.22  Input–output data from the tank with pressure output flow, used to set up the fuzzy model. 
The upper-right inset shows the deterministic model derived from elementary hydraulics (see Section 1.3).

217
Fuzzy Modelling of Environmental Systems
Point 2 requires that we cover the data range with a ‘complete’ set of mfs, meaning that over the 
whole support at least one mf will yield a non-zero degree of truth. Then, the mathematical form of 
the mfs can be selected and each of them may be given a linguistic label.
Point 3 regards the model structure, in the sense that we should decide the number of past inputs 
and outputs that contribute to the current output. Remembering Equation 4.24 and to avoid an 
explosive number of rules, the model order should be kept as low as possible. In this example, it was 
decided to include the last two inputs and outputs, so that the general model structure of Equation 
4.26 now becomes
	
h
f h
h
F
F
k
k
k
k
k
=
(
)
−
−
−
−
1
2
1
2
,
,
,
	
(4.28)
We also assume that there is no additional delay in the model input δ =
(
)
1 . The actual relationship 
f •
( ) of Equation 4.28 is of no concern here, as it will be approximated by the fuzzy rules.
Assuming that three mfs have been defined as in the left column of Figure 4.23, we now propose 
a heuristic method to define the rules, having set the model structure as in Equation 4.28.
Let us consider a two-sample wide moving window, as shown in Figure 4.24, encompassing 
sampling the instants k k
k
,
,
−
−
(
)
1
2 . By sliding the window (this could be actually done by tracing 
it on a transparency film) over the data, the relative position of the input and output samples define 
the rule for the current position of the window. It should be recalled that given three mfs and four 
antecedents, the maximum number of independent rules is a staggering 3
81
4 =
, but this method is 
not likely to generate the whole lot, nor we will need all of them.
By scanning the data set of Figure 4.24, the rules listed in Table 4.6 were generated and inserted 
in the rule editor of Figure 4.17c, together with the mfs definitions. Then the FIS can be saved to 
disk and incorporated in the Simulink® diagram of Figure 4.25 using the Simulink controller block.
The communication between the fuzzy editor and the Simulink diagram is shown in Figure 4.26. 
The FIS named Tank.fis, previously saved in the hard disk, is retrieved by the launch MATLAB 
script Go _ Fuzzy _ Tank.m with the readfis command (not load!) and assigned to a struc-
ture named Tank, which must be written in the input mask of the Fuzzy Logic Controller Simulink 
block. The FIS and the Simulink structure may have differing names, but the name of the struc-
ture in the Simulink block must be the same as the one retrieved with the readfis command as 
detailed in Figure 4.26.
0
100
200
300
400
500
600
1.0
1.5
2.0
2.5
3.0
3.5
4.0
4.5
5.0
5.5
6.0
Time (min)
F
h
F_high
F_medium
F_low
h_high
h_medium
h_low
mfs
Labels
FIGURE 4.23  Covering the data with a suitable collection of mfs (left) corresponding to the linguistic labels 
shown on the right side. The darkest shaded bands show where each membership is close to one. The dots 
represent the sampled data.

218
Environmental Systems Analysis with MATLAB®
The performance of the fuzzy model is shown in Figure 4.27, where it is compared to the deter-
ministic model that it was supposed to mimic.
Though the model agreement between the fuzzy output (h_fuzzy) and the real height (h) is not 
very good, some useful conclusions may be drawn from this naive exercise, whose pros and cons 
are now assessed:
Pros:
•	 It is not necessary to know the system structure, nor its internal (mechanistic) working.
•	 The data-driven model is derived only on the basis of observed behaviours.
Cons:
•	 No previous knowledge is available to assist in the definition of the model structure 
(e.g., its order, number and shape of mfs, number and nature of the rules).
•	 The model validity is limited to the range of the observations. Having trained the 
model with flow in the 2–6 L/min range, how would the model behave if the flow were 
increased to 10 L/min? The present training provides no rule for this value, so the 
model could not reproduce that behaviour.
0
100
200
300
400
500
600
1.0
1.5
2.0
2.5
3.0
3.5
4.0
4.5
5.0
5.5
6.0
Time (min)
F
h
F_high
F_medium
F_low
h_high
h_medium
h_low
Labels
k
k
k−1
k−1
k−2
k−2
If (hk−1 is h_medium) and (hk−2 is h_low)
and (Fk−1 is F−high) and (Fk−2 is F_medium) then (hk is h−high)
FIGURE 4.24  Heuristic rule definition by sliding a two-sample moving window (shaded area) over the data. 
The relative positions of input and output samples in the window define the current rule (upper box). Each time 
the window is advanced by one step a new rule can be defined by inspection.
TABLE 4.6
Heuristic Rules for the Tank Fuzzy Model
	 1.	If (h1 is h_medium) and (f1 is f_high) and (f2 is f_medium) and (h2 is h_low) then (h is h_high)
	 2.	If (h1 is h_medium) and (f1 is f_high) and (f2 is f_low) and (h2 is h_medium) then (h is h_high)
	 3.	If (h1 is h_low) and (f1 is f_high) and (f2 is f_low) and (h2 is h_low) then (h is h_low)
	 4.	If (h1 is h_medium) and (f1 is f_high) and (f2 is f_medium) and (h2 is h_low) then (h is h_high)
	 5.	If (h1 is h_medium) and (f1 is f_medium) and (f2 is f_low) and (h2 is h_medium) then (h is h_low)
	 6.	If (h1 is h_high) and (f1 is f_medium) and (f2 is f_high) and (h2 is h_high) then (h is h_high)
	 7.	If (h1 is h_high) and (f1 is f_high) and (f2 is f_medium) and (h2 is h_high) then (h is h_high)
	 8.	If (h1 is h_medium) and (f1 is f_low) and (f2 is f_medium) and (h2 is h_high) then (h is h_low)

219
Fuzzy Modelling of Environmental Systems
……………
Tank =readfis
('Tank');
[t,x,y] = sim (‘Tank_Fuzzy_Mamdani', tfin);
……………
Fuzzy logic controller
Fuzzy editor
Launch MATLAB script
Go_Fuzzy_Tank.m
FIGURE 4.26  Connection between the fuzzy editor and the Simulink diagram. After developing the FIS in 
the fuzzy editor, the FIS named Tank.fis is stored in the hard disk, to be retrieved by the launch MATLAB 
script Go _ Fuzzy _ Tank.m with the readfis command and assigned to a structure named Tank, which 
is then written into the input mask of the Fuzzy Logic Controller Simulink block. The FIS and the Simulink 
structure may have differing names.
Input flow data
[t_data′ F′]
-K-
Gain
Integrator
Kv*sqrt(u[1])
Pressure flow law
Height
Flow
+
−
f
1/s
1/z
1/z
1/z
1/z
F(k−1)
F(k−1)
h(k−2)
Tank
h(k)
h(k−1)
Clock
tsim
t_d
Simulation continuous time
Simulation sampled time
h_fuz
h
FIGURE 4.25  Simulink diagram implementing the tank fuzzy model (Tank _ fuzzy _ mamdani.mdl 
in the ESA _ Matlab\Exercises\Chapter _ 4\Heuristic _ Fuzzy _ Tank folder). The fuzzy 
model is represented by the blue blocks, including the fuzzy logic controller implementing the FIS. The Mux 
at its input bundles the antecedent data in the order in which the rules are defined (see Table 4.6). The upper 
diagram in grey is the deterministic model for comparison.

220
Environmental Systems Analysis with MATLAB®
Given the limits of this heuristic approach, the question arises as to whether there are systematic 
methods to develop a valid fuzzy model (dynamical or otherwise). The answer is fortunately ‘yes’, 
as will be explained in the next section.
4.4.3  ANFIS: A Systematic Modelling Approach
Those who were disappointed by the previous results will be relieved to learn that several systematic 
approaches are available to obtain good fuzzy models from the data, thus retaining the advantage 
of avoiding the heavy theoretical involvement required by mechanistic modelling and still produce 
a model capable of accurately reproducing the observed behaviour.
One such approach is the so-called ANFIS, for Adaptive Neuro-Fuzzy Inference System, which 
was originally proposed by Jang (1993) and was later used, among other applications, to model 
wastewater treatment processes (Tay and Zhang, 1999, 2000), drinking water processes (Wu et 
al., 2014) and, in general, in the context of soft-sensors development (Dürrenmatt and Gujer, 2011; 
Haimi et al., 2013). ANFIS is a composite neuro-fuzzy structure that implements Sugeno-type 
fuzzy logic in the form
	
R
x
A
x
A
f
b
i
i
n
n
i
i
i
T
i
: if
is
and
is
then
1
1
( )
( )
(
)
(
)
=
⋅
+


a
x
	
(4.29)
where x ∈
(
)
n  is the vector of inputs and ai
ib
,
(
) are the coefficients of the linear Sugeno conse-
quents. The novelty of ANFIS with respect to the previous Sugeno model of Equation 4.25 is that 
this algorithm can adapt both the antecedent mfs and the linear consequents using a hybrid learning 
algorithm based on a combination of the least-squares and the backpropagation methods to mini-
mize the sum of squared differences between the ANFIS output and a training data set. The general 
ANFIS structure is shown in Figure 4.28: the inputs x ∈
(
)
n  are fuzzified and the degree of truth 
is evaluated as the product of the individual degrees of truth of the antecedents:
	
wi
i
i
=
( )
∏µ
x 	
(4.30)
0
100
200
300
400
500
600
1.0
1.5
2.0
2.5
3.0
3.5
4.0
4.5
5.0
5.5
6.0
Time (min)
F
h
h_ fuzzy
FIGURE 4.27  Fuzzy tank model response (dotted line) compared to the training data (solid line) obtained 
with the Simulink model of Figure 4.25. This graph was obtained with the MATLAB script Go _ Fuzzy _
Tank.m in the ESA _ Matlab\Exercises\Chapter _ 4\Heuristic _ Fuzzy _ Tank folder.

221
Fuzzy Modelling of Environmental Systems
Then, each degree of truth is normalized with respect to their sum 
	
ξi
i
i
i
w
w
= ∑
	
(4.31)
so that the global model response is given by
	
f
f
i i
i
=∑ξ
	
(4.32)
The optimization algorithm adjusts the parameter of each rule (4.29) to minimize the squared error 
Δ f 2 between the model output and the training data set.
ANFIS can be accessed in two ways: either through a graphical user interface (GUI) or directly 
through MATLAB commands. The GUI approach is recommended for the beginner, whereas the 
experienced user may prefer to write the MATLAB script directly. Both methods will now be illus-
trated by reworking the two previous examples: the function approximation presented in Section 
4.3.3 and the tank dynamical model of Section 4.4.2.
4.4.3.1  Introduction to the ANFIS Editor
The four basic operations that can be performed in the ANFIS editor are now briefly described. 
More information can be found in the MATLAB help. The screenshots showing these operations 
are illustrated in Figure 4.29 and they should be performed sequentially, as described below.
	
1.	Data loading: The ANFIS editor requires the data to be organized in a matrix with each 
column representing one input and the last column containing the output data. Each row 
represents an observation. The data should be saved in ASCII format and not as a .mat 
binary file. The .dat extension is not essential, but it helps.
	
2.	FIS generation: An initial FIS is generated with the selected type and number of mfs 
specified by the user. There are several FIS generating methods available, but the default 
(grid partition) is recommended for the beginner.
	
3.	FIS training: After having specified the FIS structure, training can now begin, and the 
‘hybrid’ method is recommended, applying a mix of least squares and backpropagation. 
The graphic panel will show the error trend over the training epochs.
Σ
Antecedent
mfs
∏
iΣ
ξ1
ξ1f1
ξn fn
ξn
∏
Input variables
x1
xn
w1
w1
wi
iΣ
wn
wi
wn
ftrain
Antecedents adjustment
Consequents adjustment
Parameters
optimization
Linear
consequents
......
......
......
aT
1 
• x + b1
Σξi fi
i
f  = 
Δ f 2
+
−
aT
n 
• x + bn
FIGURE 4.28  General structure of ANFIS. The dashed lines indicate the adjustment paths of both the ante-
cedents and the consequents, depending on the squared error between the ANFIS output f( ) and the training 
data ftrain
(
).

222
Environmental Systems Analysis with MATLAB®
	
4.	FIS testing: When training is completed, the FIS is ready for testing. This can be done 
using the same training data or other data sets (checking and validation). If those data sets 
were not loaded during the initial phase (step 1), the user can go back to panel 1 and load 
the additional data, clicking on the pertinent radio button so that the editor can discrimi-
nate among training, testing and checking data sets.
The ANFIS editor is very handy, as the user can go back to any panel and redo the parts that require 
a second thought. The apparent downside is that of working in a closed environment from which it 
appears to be difficult to export any result. Luckily, this is not so, as the editor is capable of generat-
ing a.fis file that can be opened in the normal fuzzy editor or loaded directly onto the MATLAB 
workspace for further processing, as shown in Figure 4.30.
For those who prefer to do without the ANFIS editor, the same procedure can be programmed using 
the MATLAB commands genfis1 and anfis. The first generates the initial FIS, while the second 
performs the adaptation. Figure 4.31 shows the two possible paths to produce an independent Simulink 
model containing an ANFIS-generated FIS. After splitting the data into training and validation 
subsets, the ANFIS can be set up either by writing a MATLAB script or by using the ANFIS editor. 
 
1–Load data
3–FIS training
4–FIS testing
2–FIS generation
1
2
3
4
FIGURE 4.29  The four basic tasks that must be performed sequentially in the ANFIS editor are indicated 
by the circled numbers in (1), which is the ANFIS splash screen. Each active panel is then outlined in the 
subsequent screen shots.

223
Fuzzy Modelling of Environmental Systems
In either case the resulting FIS can be saved onto the hard disk (or workspace) with the writefis 
command. The saved FIS can then be retrieved and imported into the MATLAB launch script with 
the readfis command that loads an FIS structure into the MATLAB Workspace, from where it 
can be incorporated into the fuzzy controller block of the Simulink model.
If we decide to do without the ANFIS editor, the steps required to create an ANFIS directly in a 
MATLAB script are illustrated in Table 4.7. After loading the data, coming either from a previous 
(a)
(b)
(c)
(d)
(e)
(f)
FIGURE 4.30  Exporting and managing the results of the ANFIS editor into the fuzzy editor. (a) exporting 
the FIS from the ANFIS editor, (b) importing the FIS into the fuzzy editor, (c) Viewing the mfs in the fuzzy 
editor, (d) viewing the rules in the fuzzy editor, (e) viewing the rules at work in the fuzzy editor and (f) viewing 
the control surface in the fuzzy editor.

224
Environmental Systems Analysis with MATLAB®
TABLE 4.7
Detailed Command Sequence to Create and Export an ANFIS
Task
Command Lines in the MATLAB Script
Load simulation data and create the 
data structure
load Sim_Data
………………………………
for k=4:n
Data(k-3,:) = [F(k-1) h(k-1) h(k)];
End
Split the data into a training and a 
validation data set
TrnData=Data(1:n1,:);
chkData=Data(n1 + 1:end,:);
Set ANFIS parameters
numMFs = 3;
mfType = ‘gauss2mf’;
epoch_n = 10;
trnOpt=[epoch_n 0 0 0.8 1.2];
Generate initial FIS
in_fis = genfis1(TrnData, numMFs, mfType);
Train ANFIS
[Tank_Sug, error1,ss, CSTR_Sug2,error2] = anfis(TrnData, 
in_fis, trnOpt, [], chkData);
Save FIS to file
writefis(FIS_name,’Tank_Sug);
I/O
data
Train
data
Data
restructuring
FIS
structure
writefis(‘filename’)
Model_Name=readfis(‘filename’)
Model_Name
Simulink model
ANFIS editor
% Data restructuring
TrnData=Data(1:n1,:);
chkData=Data(n1+1:end,:);
% ANFIS training
in_fis = genfis1(TrnData,numMFs,mfType);
[Tank_Sug] = anfis(TrnData,in_fis,trnOpt,[],chkData,1);
MATLAB script
Val
data
FIGURE 4.31  The two ways to export the FIS structure created in the ANFIS editor onto a Simulink model. 
After dividing the data into a training and a validation subset, the ANFIS can be created either by direct 
MATLAB programming (MATLAB script) or through the ANFIS editor. In either case, the resulting FIS 
can be saved to disk with the writefis command and imported into a Simulink model with the readfis 
command and fuzzy controller block.

225
Fuzzy Modelling of Environmental Systems
simulation or from the field, they are split into two subsets (training and checking or validation). 
Then, the ANFIS structure is defined in terms of number and shape of the mfs. The number of 
training epochs should also be specified, together with other optimization parameters. An initial 
FIS is then generated from which the whole neuro-fuzzy structure is tuned with the training data 
and validated with the check data. The tuned ANFIS can then be saved to disk for independent use 
within a Simulink model.
4.4.3.2  Function Approximation with ANFIS
Let us now use ANFIS to revisit the function approximation problem already encountered in Section 
4.3.3. The main difference from the previous attempt is that now both the antecedent mfs and the 
coefficients of the linear consequents are tuned, as opposed to the previous case when only the 
consequents were adjusted. A sample MATLAB script to obtain the function approximation of the 
previous example is listed in Box 4.5, whereas the influence of the number of mfs on the approxima-
tion accuracy is shown Figure 4.32.
It can be seen that if too few mfs are used (a) the approximation is poor, but using too many mfs 
(c) may result in ‘overfitting’, with the approximation running too close to the data, to the extent that 
even the noise or all sorts of numerical artefacts are included in the FIS. The right choice is shown 
in (c) where using five mfs provides a good functional approximation and yet leaves the noise out. 
The adjustment of the antecedent mfs operated by ANFIS is shown in Figure 4.33 comparing the 
initial and final mfs.
4.4.3.3  An ANFIS Tank Dynamical Model
The tank exercise of Section 4.4.2 is now revisited by generating an ANFIS model. First of all, it 
should be pointed out that in the original formulation (Jang, 1993) ANFIS has no internal feedback 
path, like that used in Figure 4.20 for the Mamdani dynamical model and in Figure 4.21 for its 
Sugeno counterpart. On the other hand, there is no provision for modifying the MATLAB ANFIS 
BOX 4.5  MATLAB SCRIPT PERFORMING THE ANFIS 
TRAINING TO THE FUNCTIONAL DATA FUN_UP_DOWN
% Load the data representing the function
load Fun_up_down
% Assign the data to x and y vectors
x=Mis_exp(:,1);
y=Mis_exp(:,2);
% Build the training data set
trnData = [x y];
% define the number and type of mfs
numMFs = 15; 
mfType = ‘gbellmf’;
% Set the number of training iterations
epoch_n = 20;
% Generate the initial FIS
in_fis = genfis1(trnData,numMFs,mfType);
% Train the ANFIS with the data
out_fis = anfis(trnData,in_fis,epoch_n);
% Compare the results with the data
plot(x,y,’o’) % Plot the data
hold on
plot(x,evalfis(x,out_fis)); % Plot the ANFIS output

226
Environmental Systems Analysis with MATLAB®
structure. So the only way of dealing with dynamical systems in the ANFIS context is to reshape 
the data in a format compatible with ANFIS. If we maintain the previous choice of limiting the 
model structure to the two last inputs and outputs, each row of the ANFIS input data matrix should 
be structured as
	
Data
,:
input data
k
F k
F k
h k
h k
(
)
(
)
(
) (
) (
)
=
−
−
−
−
1
2
1
2







h k( )










output data
	
(4.33)
where k represents the generic sampling instant. Each line of the matrix (4.33) can be constructed by 
concatenating time-shifted copies of the recorded data, with the last column containing the output 
data. The data organization to produce the training data set is illustrated in Figure 4.34.
With the training data structured as in Equation 4.33, the generic Sugeno ANFIS rule looks 
like this:
	
R
F
F
F
F
h
H
h
i
k
i
k
i
k
i
k
:if
is
and
is
and
is
and
i
−
( )
−
( )
−
( )
−
(
)
(
)
(
)
1
1
2
2
1
1
2 s
then
H
h
a
h
a
h
b
F
b
i
k
i
i
k
i
k
i
k
i
2
1
1
2
2
1
1
2
( )
( )
( )
−
( )
−
( )
−
( )
(
)
=
⋅
+
⋅
+
⋅
+
⋅F
c
k
i
−
( )
+
2
	
(4.34)
where F
F
H
H
i
i
i
i
1
2
1
2
( )
( )
( )
( )
(
)
,
,
,
 are the antecedent mfs used in the ith rule. It is important to notice that 
in the consequent expression the past samples of the full output h
h
k
k
−
−
(
)
1
2
,
 are used instead of the 
(a)
(b)
0
2
4
6
8
10
0.5
1.0
1.5
2.0
x
y
Training data
ANFIS output
Training data
ANFIS output
10
0
2
4
6
8
0.5
1.0
1.5
2.0
x
y
Training data
ANFIS output
(c) 
0
2
4
6
8
10
0.5
1.0
1.5
2.0
x
y
FIGURE 4.32  The number of mfs influences the accuracy of the FIS. In (a) using too few mfs results in a poor 
accuracy, whereas in (c) the high number of mfs produces an ‘overfitting’, with the approximation too close to 
the data, so that even the noise is modelled. The middle choice (b) uses five mfs and yields the best approxi-
mation. These graphs were obtained with the MATLAB script ANFIS _ Numeric _ Func _ approx.m in 
the ESA _ Matlab\Exercises\Chapter _ 4\ANFIS\ANFIS _ Funct _ Approx folder.

227
Fuzzy Modelling of Environmental Systems
1
2
3
4
5
6
7
8
9
0.0
0.2
0.4
0.6
0.8
1.0
x
Degree of membership
0
10
Initial mfs
Final mfs
FIGURE 4.33  Comparison of initial (solid line) and adjusted (dashed line) mfs after adjusting the ANFIS to 
the function of Figure 4.32 with five mfs.
[t_data'F_data']
1/A
Gain
F
F
t
215
3.1375
220
3.1631
225
3.1873
3.2105
k–2
k–1
k
230
235
3.2231
240
3.2556
3.2783
1.3526
1.3646
1.3777
1.3916
1.4063
1.4216
1.4374
Input data
Output data
245
for k = 3:n
end
Data (k,:)= [F(k −   1)
F(k −    2)
h(k −    1)
h(k −    2)
h(k)];
h
Integrator
Pressure flow law
Kv*sqrt(u[1])
h
Input data from
workspace
+
−
1s
FIGURE 4.34  Data organization in the ANFIS format for the tank exercise. The input data are obtained 
from the simulation of the deterministic model (upper box). The for loop (lower box) organizes the data input 
matrix in which the first four columns are the delayed samples of flow (F) and height (h). The last column is 
the output (current height).

228
Environmental Systems Analysis with MATLAB®
local model outputs h
h
k
k
i
i
−
−
( )
( )
(
)
1
2
,
. ANFIS implements the whole rule paradigm, which according to 
Equation 4.24 consists of 3
81
4 =
 different rules if three mfs are defined for each antecedent. The 
overall FIS complexity is shown in Figure 4.35.
Though the result is satisfactory (see Figure 4.38), especially when compared to the previous 
Mamdani example of Section 4.4.2, the price to pay is a staggering model complexity in terms of 
number of rules (81) and tuning parameters (429!). Thus, it makes sense to ask whether a simpler, 
easier-to-tune, model would perform just as well. To this end, a reduced model structure is now 
considered, which uses only one-step-back information. The generic fuzzy rule of this first-order 
model has the form
	
R
F
F
h
H
h
a
h
b
i
k
i
k
i
k
i
i
k
i
:if
is
and
is
then
−
( )
−
( )
( )
( )
−
(
)
(
)
=
⋅
+
1
1
1
1
1
1
1
( )
−
( )
⋅
+
F
c
k
i
1
	
(4.35)
and the related data structure of Equation 4.33 simplifies into
	
Data k
F k
h k
h k
,   
 
 
:
(
)
(
) (
)
( )
=
−
−
1
1
input data
output data
















	
(4.36)
After performing the usual ANFIS training, the resulting FIS can be exported to disk. It should be 
remarked once more that the FIS produced by ANFIS has exactly the same structure and attributes 
of an FIS created in the fuzzy editor described in Section 4.3.1. However, because this represents 
a dynamical model, its simulation requires the set up of a Simulink model, which includes the 
fuzzy controller block using the FIS just created, as already encountered in the previous exercise 
of Section 4.3.1.
The communication between the MATLAB script and the Simulink model is shown in 
Figure 4.36 for the first-order model and in Figure 4.37 for the second-order model.
Fk−1
Fk−2
hk−1
hk
hk−2
ANFIS info: 
Number of nodes: 193
Number of linear parameters: 405
Number of nonlinear parameters: 24
Total number of parameters: 429
Number of training data pairs: 100
Number of checking data pairs: 96
Number of fuzzy rules: 81
FIGURE 4.35  Structure of the Sugeno tank second-order model produced by ANFIS. The info box shows 
that the model contains the full paradigm of fuzzy rules (81), and that the number of model parameters is 
staggering (429!).

229
Fuzzy Modelling of Environmental Systems
Now, the tank exercise is completed, but before assessing the results, let us recap the various 
actions taken so far:
	
1.	The data were generated by simulating the tank model (4.27). They were then divided 
into two equal portions for training and validation. The data were then reorganized as in 
Equation 4.33 or 4.36, as required by the selected data structure, as shown in Figure 4.34 
for the second-order model.
	
2.	An ANFIS neuro-fuzzy network was trained using the training data portion, and when a 
satisfactory performance was reached, the tuned FIS was exported.
	
3.	A Simulink model was set up to include a fuzzy controller whose input is the data previ-
ously generated, reshaped as already mentioned. In any case the Mux connections are 
critical, and care must be place in connecting its inputs in exactly the same sequence (top 
to bottom) as defined by Equation 4.33 or 4.36, and by providing the right amount of unit 
delays.
	
4.	A MATLAB launch script was set up to load the data, the FIS, perform the simulation and 
plot the results. The dialogue between the launch script and the Simulink model is shown 
in detail in Figure 4.36 for the first-order model, and in Figure 4.37 for the second-order 
model.
Now we can conclude the tank exercise by comparing the performance of the first- and second-
order models, as shown in Figure 4.38 and Table 4.8. It can be seen that the simpler first-order 
model ­produces a performance comparable to that of the second-order model, though having a 
…………………
Tank=readfis(‘Tank_Sug2');
…………………
[t,x,y]=sim(‘Tank2_fuzzy_Sugeno',tfin);
…………………
Tank2_fuzzy_Sugeno.mdl
call to Simulink model
Reference to the FIS
is made in the fuzzy
controller block
[t_dot′ F_dot′]
f
Flow
-K-
1/s
1/z
1/z
F(k−1)
h_fuz
h(k)
h
Height
Integrator
Kv∗sqrt(u[1])
Pressure flow law
Tank
Gain
+
−
From
workspace
MATLAB launch script
[F(F-1) h(k-1)];
h(k−1)
FIGURE 4.36  Incorporating the previously developed FIS in the first-order Simulink tank model via the 
MATLAB launch script. The readfis command loads the FIS into the Workspace where it is made avail-
able to the fuzzy controller Simulink block. The name of the FIS inside the latter must be the same created by 
readfis (‘Tank’ in this example). The mechanistic model (in grey) is just for output comparison. The per-
tinent MATLAB/Simulink codes can be retrieved from the ESA _ Matlab\Exercises\Chapter _ 4\
ANFIS\ANFIS _ Tank folder.

230
Environmental Systems Analysis with MATLAB®
much simpler structure that makes its use much more attractive from the computational viewpoint. 
In fact, while the execution time for the second-order model was 0.285977 s, the first-order model 
took only 0.084738 s.
The fundamental lesson to be learned from this example is that with data-driven models an 
accurate calibration can more than make up for a limited model complexity. This largely holds for 
mechanistic models too, the general rule being that a simple well-calibrated model is almost always 
superior to a complex, poorly calibrated one.
4.5  FUZZY CLUSTERING: AGGREGATING DATA BY SIMILARITY
The term Cluster Analysis was first introduced by Tryon (1939) to indicate the grouping of obser-
vations according to some notion of similarity. Data in the same cluster are supposed to share 
a common trait to some extent. Cluster Analysis was originally applied to numerical taxonomy 
(Michener and Sokal, 1957; Sokal and Michener, 1958; Sokal, 1961; Sokal and Rohlf, 1962), and 
later was extensively applied to virtually every branch of science and technology, and particularly 
in the analysis of ecological data (Dillon and Goldstein, 1984; Pielou, 1984; Gotelli, 2001; Gotelli 
and Ellison, 2004; Legendre and Legendre, 2012). The objects considered in Cluster Analysis are 
observations described by a set of variables (features), in much the same way as the observations 
considered in principal component analysis, Section 3.5. Thus, the data will be represented by the 
same notation as a matrix X ∈
×
N p, where each of the N rows represents one observation x, each 
possessing p features. The similarity measure is related to the relative ‘distance’ among data, and 
…………………
Tank=readfis(‘Tank_Sug4');
…………………
[t,x,y]=sim(‘Tank4_fuzzy_Sugeno',tfin);
…………………
Tank4_fuzzy_Sugeno.mdl
f
Flow
+
−
[t_dot'F_dot']
From
workspace
-K-
1/s
1/z
1/z
1/z
1/z
F(k−1)
h
Gain
Integrator
h_fuz
h(k)
Pressure flow
Tank
Height
Kv∗sqrt(u[1])
call to Simulink model
Reference to the FIS
is made in the fuzzy
controller block
MATLAB launch script
[F(k-1) F(k-2) h(k-1) h(k-2)];
F(k−2)
h(k−2)
h(k−1)
FIGURE 4.37  Communication between the MATLAB launch script and the Simulink model for the sec-
ond-order Sugeno FIS. The Mux input sequence must follow the data organization scheme. The pertinent 
MATLAB/Simulink codes can be retrieved from the ESA _ Matlab\Exercises\Chapter _ 4\ANFIS\
ANFIS _ Tank folder.

231
Fuzzy Modelling of Environmental Systems
the many clustering algorithms differ in the way such distance is computed, according to the link-
age criterion, the most popular of which, shown in Figure 4.39, are:
•	 Average linkage: considers the average of the distances between all pairs of data.
•	 Single linkage (nearest neighbour): aggregates data according to the minimum distance.
•	 Complete linkage (farthest neighbour): considers the maximum distance among data.
0
200
400
600
800
1000
1.3
1.4
1.5
1.6
1.7
1.8
Time (min)
Time (min)
h (m)
Training
Validation
0
200
400
600
800
1000
1.3
1.4
1.5
1.6
1.7
1.8
Time (min)
h (m)
Training
Validation
real h
ANFIS h
Δh (m)
First-order model
hk = a1 • hk−1 + b1 • Fk−1 + c
hk = a1 • hk−1 + a2 • hk−2 + b1  • Fk−1  + b2  • Fk−2  + c
Second-order model
0
200
400
600
800
1000
−0.15
−0.10
−0.05
0.00
0.05
0.10
Δh (m)
0
200
400
600
800
1000
−0.10
−0.05
0.00
0.05
0.10
Time (min)
Training
Validation
Training
Validation
FIGURE 4.38  Performance of the ANFIS tank models with training and validation data. The upper row 
shows the original data and the output of the ANFIS models, while the lower row shows a magnified view of 
the modelling errors. The slight accuracy loss of the first-order model (notice the small spike around t = 580) 
is more than offset by its reduced complexity. These graphs were obtained with the MATLAB scripts Go _
Tank2 _ fuzzy.m and Go _ Tank4 _ fuzzy.m in the ESA _ Matlab\Exercises\Chapter _ 4\
ANFIS\ANFIS _ CSTR folder.
TABLE 4.8
Comparison of ANFIS Models for the Tank Exercise, on the Basis of the Data Structure, 
Network Complexity and Sum of Squared Errors (SSE)
First-Order Model
Second-Order Model
[F(k-1)h(k-1) h(k)];
[F(k-1) F(k-2) h(k-1) h(k-2) h(k)];
Number of nodes: 35
Number of linear parameters: 27
Number of nonlinear parameters: 24
Total number of parameters: 51
Number of training data pairs: 100
Number of checking data pairs: 96
Number of fuzzy rules: 9
Number of nodes: 193
Number of linear parameters: 405
Number of nonlinear parameters: 24
Total number of parameters: 429
Number of training data pairs: 100
Number of checking data pairs: 96
Number of fuzzy rules: 81
SSE = 0.2772
Execution time = 0.084738 s.
SSE = 0.2671
Execution time = 0.285977 s.

232
Environmental Systems Analysis with MATLAB®
•	 Centroid linkage (K-means): unlike the previous methods, it minimizes the within-cluster 
distance between the data and a centroid (v). It is an iterative method in which each obser-
vation is assigned to the cluster with the nearest centroid. The number of clusters (c) is 
selected a priori and placed initially at random in the data set. The distance between each 
point and the centroids are then computed by assigning each point to the cluster with the 
nearest centroid. At each iteration the centroids are re-computed and the process ends 
when the centroids are stable.
The choice of the kind of linkage is highly discretionary and depends on the nature of the problem 
as well as on the pursuit of the analysis. Figure 4.40 shows how the single linkage or the com-
plete linkage criteria perform with two data sets, one with an elongated shape, while the other has 
Complete linkage
Single linkage
Average linkage
xi
xj
xi
xi
xj
xj
k-means
max (xi, xj)
x
min (xi, xj)
x
xi
xj
vi
vj
FIGURE 4.39  Grouping criteria based on the distance among points in a data set. The K-means differs from 
the other methods in that it considers distances from a non-member of the data set (the centroid v).
Single linkage
(a)
Complete linkage
(b)
(c)
(d)
FIGURE 4.40  The single linkage criterion tends to produce elongated clusters, so it is well suited for the data 
in (a) but not for those in (c). Likewise, the complete linkage criterion forms compact spherical clusters, so it 
is appropriate for the data in (d) but not for those in (b).

233
Fuzzy Modelling of Environmental Systems
a roughly spherical appearance. In the first instance, the single linkage is more appropriate (a), 
whereas the complete linkage yields a better separation (d) with the spherical data.
The main difference between the first three methods and the K-means is that the former are 
hierarchical methods in the sense that data are assigned into clusters with an increasing (agglom-
erative) or decreasing (divisive) criterion. The K-means method instead starts with an initial cen-
troid guess and progressively associates data with clusters to minimize a function of the sum of 
squared distances. In the latter case, the number of clusters is arbitrarily assigned prior to the 
partition. All the algorithms discussed in the following are derived from the basic K-means itera-
tive method.
From this brief introduction, it is clear that the definition of distance plays a crucial role in clus-
tering. Among the many possibilities, those that will be used in what follows are:
	
1.	Euclidean distance: squared sum of the differences between xi and x j
	
dij
i
j
T
i
j
i
j
2
2
=
−
(
)
−
(
) =
−
x
x
x
x
x
x
	
(4.37)
	
2.	Mahalanobis distance: squared sum of the differences between xi and x j weighted by a 
norm-inducing matrix W
	
dij
i
j
i
j
T
i
j
i
j
,
,
W
W
x x
x
x
W x
x
x
x
2 (
) =
−
(
)
−
(
) =
−
	
(4.38)
4.5.1  Deterministic K-Means
Let us start by considering a hard partition, meaning that if a point xk is assigned to a cluster vi 
µij =
(
)
1 , its membership to all the other clusters must be zero. If we group all the membership in a 
matrix U with as many rows as clusters and as many columns as observations U ∈
(
)
×
c N , this will 
consist of zeros and ones only. The K-means iterative method just described seeks to minimize the 
following partition criterion Jhc, where the subscript hc stands for hard cluster
	
J
d
d
hc
ik
k
N
i
c
ik
k
i
ik
=
=
−
=
= ∑
∑
min
µ
2
1
1
2
2
with
x
v
	
(4.39)
In Equation 4.39, c is the number of clusters and μik is the (0/1) membership of the kth point xk to 
the ith cluster Ci represented by its centroid vi. Thus, the membership matrix will have the following 
aspect:
	
U
x
C
=










∈
=
⊂
×
µ
µ
µ
µ
µ
µ
µ
µ
11
12
1
1
2
1
…
…

N
c
c
cN
c N
ik
k
i




with
if
ik =



0
otherwise 	
(4.40)
The K-means algorithm starts by choosing c centroids at random and repeatedly evaluates Equation 
4.39 until two subsequent matrices differ in norm by less than a prescribed quantity ε > 0
	
U
U
t
t
−
≤
−1
ε	
(4.41)
The limit of hard (or crisp) clustering is that it is unable to deal with borderline cases, where assign-
ing a point to one cluster rather than another is problematical and a full membership µ =
(
)
1  or a 
total exclusion µ =
(
)
0  would be equally unjustified.

234
Environmental Systems Analysis with MATLAB®
4.5.1.1  The Limits of Hard Clustering: The Butterfly Data
The so-called butterfly data are a well-known benchmark for clustering methods (Bezdek, 1981). 
The data, shown in Figure 4.41, are symmetrical about the central grey point and any hard partition 
with c = 2 would inconclusively assign it to either cluster. In fact, given the data coordinates
	
X = 



0
2
4
1
2
3
2
2
2
1
2
3
0
2
4
0
0
0
1
1
1
2
3
4
5
5
5
6
6
6
T
	
(4.42)
any of the two hard partitions U1 and U2
	
U1
1
1
1
1
1
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
= 



                
                                central point
↓
↑
=
U2
1
1
1
1
1
1
1
1
0
00
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1




	
(4.43)
that differ by only the central point membership would prove equally unfair. In fact, the central 
point (8th column) is the one ‘recalcitrant’ element, which cannot be satisfactorily assigned to either 
cluster, meaning that its ‘ambiguity’ cannot be accommodated by deterministic clustering. We must 
conclude that this data set has no ‘hard’ satisfactory solution.
4.5.2  Fuzzy C-Means Clustering
To overcome the limitations of hard K-means clustering, Bezdek (1981) proposed its fuzzy counter-
part (Fuzzy C-means or FCM for short), thus paving the way to a whole series of fuzzy clustering 
algorithms, which will be described in the following. Bezdek’s idea was to ‘fuzzify’ the partition 
functional (4.39) by weighting the Euclidean distance (4.37) with the fuzzy membership, namely
	
J
c m
d
d
fc
ik
m
ik
k
N
i
c
ik
k
i
T
k
i
( ,
)
,
=
(
)
=
−
(
)
−
(
)
=
= ∑
∑
µ
2
1
1
2
with
x
v
x
v
	
(4.44)
0
1
2
3
4
5
6
0
1
2
3
4
x2
C1
C2
x1
?
FIGURE 4.41  Graphical representation of the butterfly data, which draw their name by looking like the 
wings of a butterfly. Assigning the blue dots to one cluster and the white ones to another is an easy task, but 
what about the central grey dot? The dashed lines delimit the core of the clusters C1 and C2.

235
Fuzzy Modelling of Environmental Systems
where vi are the centroids and m∈
∞

)
1,
 is the fuzzy exponent. This coefficient plays a very impor-
tant role in adjusting the fuzziness of the partition, in the sense that the larger is m, the less ‘blurred’ 
is the partition. To visualize its effect on a fuzzy mf, consider the Figure 4.42, in which a generic 
mf μm is plotted for increasing values of m. The shape of the original mf becomes narrower as m 
increases, making the distinction sharper. In the subsequent examples, a value m = 2 will be nor-
mally adopted, as with FCM this choice will suit most of the situations. However, with other cluster-
ing algorithms, we shall see that the choice of m has a major influence on the algorithm behaviour, 
and its choice may become critical.
In fuzzy clustering, the membership can smoothly vary between 0 (no membership) to 1 (full 
membership). Therefore each element can (partially) belong to more than one cluster, hence the abil-
ity to deal with ambiguous or borderline cases. However, the overall sum of the memberships must 
be 1 (complete assignment), and in a data set of N elements, the sum of the memberships to each 
cluster cannot be greater than N. Given these assumptions, the functional (4.44) has only a trivial 
solution unless we introduce the complete assignment constraint
	
µik
i
c
k
N
=
=
=∑
1
1
1
,
,

	
(4.45)
Thus, the FCM problem can be reformulated as a constrained optimization problem by combining 
the fuzzy membership functional (4.44) with the constraint (4.45),
	
min
subject to
U V
,
( ,
)
J
c m
d
k
fc
ik
m
ik
k
N
i
c
ik
i
c
(
) =
(
)
=
=
=
=
=
∑
∑
∑
µ
µ
2
1
1
1
1
1,
,
N 	
(4.46)
which may be turned into an unconstrained minimization problem via the Lagrange multiplier λ
( ),
	
min
,
,
U V
(
)
=
=
=
(
)
(
) =
(
)
+
−






∑
∑
J
c m
d
fc
ik
m
ik
ik
i
c
k
N
i
c
µ
λ
µ
2
1
1
1
1
∑
	
(4.47)
where the optimization involves both the membership matrix U ∈
(
)
×
c N  and the centroid matrix 
V ∈
(
)
×
p c  along the iterative scheme outlined in Box 4.6.
0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
x
μ(x)
μm
m = 1
m = 1.5
m = 2
m = 3
FIGURE 4.42  Effect of the fuzzy exponent m on the shape of a mf. As m increases the mf becomes narrower 
and the fuzziness decreases.

236
Environmental Systems Analysis with MATLAB®
The FCM algorithm (Bezdek, 1981; Bezdek and Pal, 1995) provides the optimal partition U
(
) 
and the centroids location V
( ) as
	
U :
,
,
,
,
µik
ik
jk
m
j
j i
c
d
d
k
N
i
c
=
(
)
=
=
−
=
≠
∑
1
1
1
2
1
1


	
(4.48)
	
V v
x
:
,
,
i
ik
m
k
k
N
ik
m
k
N
i
c
=
(
)
(
)
=
=
=
∑
∑
µ
µ
1
1
1 
	
(4.49)
where the distances are computed according to Equation 4.44. As in any K-means algorithm, the 
minimization of FCM functional (4.46) is solved iteratively as outlined in Box 4.6, and the two 
quantities µik
i
and v
(
) are intertwined. Figure 4.43 shows a simple step-by-step example of comput-
ing the memberships and the centroids for a 2D data set. The procedure shown for the generic point 
xk is to be repeated for the whole data set.
4.5.2.1  The Butterfly Data Revisited
Let us go back to the elusive butterfly data of Section 4.5.1.1 and apply the FCM algorithm with 
m = 2 to find a fuzzy cluster partition. Figure 4.44 shows the new partition with the central point 
correctly receiving a µ = 0 5.  membership to both clusters and the centroids being slightly displaced 
as a result of the ‘push’ exerted by the other cluster and the complete membership constraint of 
Equation 4.45.
BOX 4.6  ITERATIVE STRUCTURE OF THE FCM ALGORITHM
Starting with a random U 0
( ) repeat for t = 1, 2, ….
	
1.	Compute the centroids
	
v
x
i
ik
ik
t
t
m
k
k
N
t
m
k
N
i
c
( )
−
(
)
=
−
(
)
=
=
(
)
(
)
=
∑
∑
µ
µ
1
1
1
1
1,
,

	
2.	Compute the distances
	
dik
t
k
i
t
2
2
( )
( )
=
−
x
v
	
3.	Update the partition matrix
	
U t
ik
t
t
t
m
j
j i
c
d
d
k
N
ik
jk
( )
( )
( )
( )
−
=
≠
=
(
)
=
∑
:
,
,
µ
1
1
2
1
1

Until U
U
t
t
( )
−
(
)
−
<
1
ε

237
Fuzzy Modelling of Environmental Systems
The centroids location is computed as
	
V
v
v
= 



↑
↑
0 85
5 14
2 00
2 00
1
2
.
.
.
.
	
(4.50)
whereas the new membership matrix is
U = 0 86 0 97 0 86 0 94 0 99 0 94 0 88 0 5 0 12 0 06 0 01 0 06 0 14 0 03 0
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
14
0 14 0 03 0 14 0 06 0 01 0 06 0 12 0 5 0 88 0 94 0 99 0 94 0 86 0 97 0 86
.




↑
central point
	 (4.51)
where each column correctly sums to 1.
xk
d2k
d1k
d1k = (xk – v1)T (xk – v1)
d2k = (xk – v2)T (xk – v2)
v1
v2
xk ∈R2
1
μ1k = 
1
μ2k = 
N
k = iΣ
m
(μ1k)
ν1 = 
xk
N
k = iΣ
m
(μ1k)
N
k = iΣ
m
(μ2k)
ν2 = 
xk
N
k = iΣ
m
(μ2k)
2
m–1
d1k
d2k
2
m–1
d2k
d1k
FIGURE 4.43  Practical computation of the FCM partitions with 2D data, showing how the distances and the 
memberships for the generic point xk (blue dot) are computed with respect to the centroids v
v
1
2
and
, indicated 
as black squares.
v1
v2
x1
0
1
2
3
4
5
6
0
1
2
3
4
x2
a > 0.8
a > 0.8
μ = 0.5
C1
C2
FIGURE 4.44  The butterfly data revisited with the FCM algorithm. Now the central point is (correctly) 
assigned a 0.5 membership to both clusters, acknowledging its borderline position. The two centroids (black 
squares) are slightly displaced inside each cluster because of the ‘push’ of the other cluster, and the dashed 
curves now have the meaning of α-cuts enclosing the portion of each cluster with membership greater than 0.8.

238
Environmental Systems Analysis with MATLAB®
4.5.2.2  Limits of the FCM Clustering
The Euclidean distance used in Equation 4.44 tends to produce spherical clusters, which may not 
be appropriate if the data have an elongated shape. Figure 4.45 shows two examples of 2D data 
FCM clustering. In case (a), the data naturally have a roughly spherical distribution, which fits well 
with the FCM. In contrast, in case (b) the data are located in elongated patterns, which conflict 
with the propensity of the FCM to produce spherical clusters. The result is that improbable clusters 
are produced, with data clearly not associated with any cluster are assigned the ‘no-man’s-land’ 
membership of 0.5. Notice also that the isolated point in the lower-left corner, which is undeserv-
edly assigned a 0.5 membership as well, whereas its grade should be much lower, being alien to the 
overall data distribution. We shall come back to this oddity later, when we introduce the possibilistic 
clustering in Section 4.5.10.
4.5.3  Assessment of the Partition Efficiency
Before moving on to more flexible fuzzy clustering algorithms, let us pause to reconsider the impact 
of arbitrarily choosing the number of clusters (c). We have seen in Section 4.5.1 that K-means algo-
rithms are not capable of determining the level of association of the data and therefore cannot sug-
gest the best number of clusters, which has to the specified—arbitrarily for now—as an external 
parameter. But how can we be sure, apart from some naive visual check, that we have selected the 
‘best’ number of clusters? Is there a way to assess the efficiency of the partition? To answer this 
question, let us remember that the purpose of clustering a data set is to ‘bring order’ in the data, in 
the sense that the information contained therein will hopefully come to the fore thanks to clustering. 
Now, we introduce some objective notion to quantify the improvement brought about by clustering 
in terms of data separation.
4.5.3.1  Partition Entropy
The first and foremost measure of partition efficiency is the information entropy (IE), which can be 
viewed as an indicator of how much order is brought into the data, or rather how much uncertainty 
is removed, by clustering. Derived from the second law of thermodynamics, where entropy is a 
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
x2
x2
x2
x1
(a)
(b)
0.9
0.9
0.9
0.9
0.9
0.9
0.75
0.5
0.5
0.9
0.5
0.5
0.75
0.75
0.75
0.75
0.75
0.9
0.9
0.9
0.9
0.9
0.75
0.75
0.75
0.75
0.5
0.5
0.5
0.5
0.75
0.9
0.9
0.75
0.9
0.9
FIGURE 4.45  Suitable (a) and unsuitable (b) partitions produced by the FCM algorithm. In the first case 
(a), the data are distributed in roughly spherical patterns so that they are well explained by the FCM partition, 
whereas in (b) they follow an elongated pattern, which the Euclidean distance of FCM cannot accommodate. 
These graphs were obtained with the MATLAB script Go _ FCM.m in the ESA _ Matlab\Exercises\
Chapter _ 4\Fuzzy _ Clustering\FCM folder.

239
Fuzzy Modelling of Environmental Systems
measure of disorder, IE (Shannon, 1948) is largely used in communication to indicate the informa-
tive content of a coded message. In fuzzy sets, the normalized IE for a set of N data partitioned into 
c clusters is defined as (Bezdek, 1981)
	
H
c N
N
n
ik
k
N
ik
i
c
= −−(
)
⋅
(
)
=
= ∑
∑
1
1
1
1
µ
µ
log
/ 	
(4.52)
It measures the residual uncertainty after the data are partitioned into c clusters, so that the smaller 
it is the more ‘certain’ is the partition. Hn may vary between 0 (‘hard’ partition with no uncertainty) 
and a maximum of log c
( ) corresponding to all the memberships equal to 1/c (maximal uncertainty).
4.5.3.2  Separation Coefficient
This coefficient measures the clusters ‘compactness’ by comparing their ‘radius’, defined as the 
maximum fuzzy-weighted intra-cluster distance, with the distances among centroids,
	
r
d
i
c
i
k N
ik
ik
=
(
)
=
≤≤
max
,
,
1
1
µ

	
(4.53)
The separation coefficient g is the maximum ratio between the sum of pairs of radii r r
i
j
,
(
) and the 
inter-cluster distance dij,
	
g
r
r
d
i j c
i
j
ij
=
+






≤
max
,
	
(4.54)
The notion of cluster radius and of separation coefficient are shown in Figure 4.46, together with 
the three possibilities of well-separated (a), tangent (b) and intersecting clusters (c), depending on 
the relative magnitude of g.
Figure 4.47 shows how the variations of the normalized entropy with respect to its maximum 
value log c
( ) can be used as an indicator of the partition efficiency. In fact, the relative partition 
entropy defined as
	
H
H
H
c
n
n
n
max
log
=
( )	
(4.55)
d13
d12
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
x1
x2
C3
r3
r2
C2
C1
r1
d23
a – Well-separated clusters
b – Tangent clusters
c – Intersecting clusters
g = max
< 1
ri + rj
ri
rj
ri
rj
ri
rj
dij
dij
dij
dij
g = max
= 1
ri + rj
dij
g = max
> 1
ri + rj
dij
FIGURE 4.46  The separation coefficient g, comparing the clusters radii to their mutual distance (shown in 
the left plot), is a measure of the clusters compactness. The three possible situations (well-separated, tangent 
and intersecting clusters) are shown on the right.

240
Environmental Systems Analysis with MATLAB®
shows where Hn stands with respect to its range. In this example, Equation 4.55 indicates that 
c = 4 is the most efficient partition.
4.5.4  Fuzzy Clusters as Antecedents
We have already seen that when a set of fuzzy rules involves many antecedents, each with several 
mfs, the number of rules may soon become overwhelming, as shown by Equation 4.11. Fuzzy clus-
tering offers an alternative to this ‘curse of dimensionality’ because the degree of truth of a compos-
ite antecedent can be computed as the degree of membership to a cluster, so there will be as many 
rules as clusters, irrespective of the number of features of the data or the number of antecedent mfs. 
Figure 4.48 compares the two alternatives to obtain the overall degree of truth of the antecedent.
The conventional fuzzification procedure (a), where each of the n input variables is fuzzified 
with q mfs, results in the number of possible rules being qn, which may quickly become explosive, 
even for moderate values of q and n. Figure 4.48b shows instead the clustered antecedents approach, 
where the number of rules depends only on the number of clusters. The rule syntax is obviously 
different, and surely more compact in case (b), as the following example shows. Let us consider 
two Sugeno fuzzy rules, one with conventional antecedents and the other with cluster antecedents:
	
conventional 
antecedents
if
is
and
is
and
is
R
x
x
x
i
n
n
:
1
1
2
2
X
X
X
(
)
(
) 
(
)
=
(
)
then y
f
x x
x
i
i
n
1
2
,
,
,

	 (4.56)
	
cluster antecedents
if
then
R
x x
x
C
y
f
x x
x
i
n
i
i
i
n
:
,
,
,
,
,
,
1
2
1
2


(
) ⊂
=
(
)	
(4.57)
Hn = 0.4247  g = 1.2723
Hn = 0.6478  g = 1.1170
Hn = 0.7640  g = 1.0450
Hn = 0.5303  g = 0.8542
Hn = 0.4859  g = 0.6560
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
x1
x1
x1
x1
x2
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
x2
x2
c = 2
c = 3
c = 4
x1
x2
x2
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Number of clusters
2
3
4
5
6
0.35
0.40
0.45
0.50
0.55
0.60
0.65
0.70
Hn/Hn max
Best partition
c = 5
c = 6
Best partition
FIGURE 4.47  Assessing the efficiency of differing partitions using the normalized entropy. Plotting the 
ratio of the normalized entropy with respect to its maximum value shows that c = 4 (bold box) is the most 
efficient partition. The black squares indicate the location of the centroids.

241
Fuzzy Modelling of Environmental Systems
where in the second rule the notation x
Ci
⊂
(
) denotes the membership of the point x to the cluster 
Ci. In the conventional case, each antecedent variable is individually fuzzified using a bank of q mfs 
and then and-ed with all the others to produce the overall antecedent degree of truth. So there are q 
mfs for each of the n input variables, and consequently m
qn
=
 rules (see Figure 4.48a). Conversely, 
in the clustered antecedent approach, all the n input variables contribute simultaneously to deter-
mine the degree of truth with respect to each cluster. As a result, the number of rules is equal to 
the number of clusters, irrespective of the number of inputs. This new approach, though, has some 
repercussions on the way the rules are written and requires a previous ‘training’ to determine the 
clusters, which are completely specified by their centroids and the fuzzy exponent m. After that, 
any new point z can be classified by again applying Equation 4.48. However, in this case there is no 
iteration involved, because the centroids are already specified and the memberships of the new point 
z can be directly computed as
	
µ
µ
µ
i
iz
jz
m
j
j i
c
c
d
d
z
z
z
z
( ) =
(
)
⇒
→
( )
( )
[
]
−
=
≠
∑
1
2
1
1
1
,
,

	
(4.58)
The new point z receives its degree of membership with respect to the c clusters of the partition irre-
spective of its dimensions p. If p
c
 this results in a considerable dimensional saving. Figure 4.49 
shows the location of the new point z (triangle) and the computation of the distances producing the 
degree of membership to each cluster according to Equation 4.58.
Equation 4.58 can be used to classify any new entry z( ) with respect to a set of pre-existing clus-
ters C
C
1,
,

c
(
). Following the example of Figure 4.49 the following FIS can be set up:
	
if
then
else
if
then
else
if
th
z
C
z
z
C
z
z
C
⊂
(
)
=
( )
⊂
(
)
=
( )
⊂
(
)
1
1
1
2
2
2
3
y
f
y
f
en
else
if
then
y
f
y
f
3
3
4
4
4
=
( )
⊂
(
)
=
( )
z
z
C
z
	
(4.59)
x1
x2
xn
m
m
qn rules
n
q
0.0
0.5
1.0
Degree of membership
Ci
(a) 
(b) 
x2
x1
μ1 (x1, x2) → c rules
FIGURE 4.48  The antecedent degree of truth can be obtained in two ways. (a) shows the conventional fuzzi-
fication procedure, which may lead to an explosive proliferation of rules. (b) shows the clustered antecedents 
approach, where the number of rules depends only on the number of clusters.

242
Environmental Systems Analysis with MATLAB®
where the notation z
C
⊂
(
)
i  produces µi z( ). The actual output y is then obtained by defuzzification, 
according to Equation 4.16,
	
y
yi
i
i
i
i
=
⋅
( )
( )
=
=
∑
∑
µ
µ
z
z
1
4
1
4
	
(4.60)
It is important to emphasize the computational advantage of Equation 4.59, whose dimension is 
equal to the number of clusters (c) independently of the dimension of z ∈p. This approach can be 
profitably used in fuzzy modelling where the generic Sugeno modelling rule (4.25) could simply be 
written as
	
R
y
y
u
u
y
f
y
y
i
k
k n
k
k
n
i
k
i
i
k
k
y
u
:
,
,
,
,
,
,
,
if
then
−
−
−
−−
( )
−
(
) ⊂
=
1
1



δ
δ
C
−
−
−−
(
)
=
n
k
k
n
y
u
u
u
i
c
,
,
,
,
,
δ
δ


1
	(4.61)
The cluster-Sugeno model can then be described by the structure of Figure 4.50. The degrees of 
membership produced by the previously trained clusters C
C
1,
,

c
(
) activate the consequents of 
Equation 4.61 which can be viewed as local models, each best describing the system behaviour 
when its variables are in the neighbourhood of the pertinent cluster. After defuzzification the past 
outputs are fed back into the model, together with the vector of past inputs, according to the model 
definition. This approach is amply described in Babuska (1998) while public domain MATLAB 
toolboxes with interesting exercises by the same author can be downloaded from the following web 
site http://www.dcsc.tudelft.nl/~rbabuska/.
4.5.5  Fuzzy Clustering as a Diagnostic Tool
Diagnosis is another possible application of fuzzy clustering. Suppose that a training data set has 
produced a reference partition, in terms of centroids location, which together with the value of the 
fuzzy exponent m form a knowledge base KB = (
)
{
}
v
v
1,
,
,

c
m . Any new data can be classified with 
respect to that KB using Equation 4.58. If the clusters can be associated with any significant system 
condition, then the degree of membership to each cluster can be used as a diagnostic tool. Though 
the number of clusters c may be predetermined by other means in view of a specific diagnostic 
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
x1
x2
C1
C4
C3
z
C2
d2z → μ1 (z)
d3z → μ3 (z) d4z → μ4 (z)
d1z → μ1 (z)
FIGURE 4.49  Classification of a new point z (triangle) with respect to the previously determined clusters 
C
C
1
4
,
,

(
) through Equation 4.58. The black squares indicate the position of the centroids.

243
Fuzzy Modelling of Environmental Systems
purpose, nonetheless it is still a good idea to check the efficiency of the partition with the entropy 
defined by Equation 4.55.
4.5.5.1  Fuzzy Cluster Diagnosis of an Anaerobic Digester
The use of fuzzy cluster diagnostics can be illustrated by the following example (Marsili-Libelli and 
Beni, 1996; Marsili-Libelli and Müller, 1996; Müller et al., 1997). The state of an anaerobic digester, 
whose microbiology is briefly described in Section 7.2.11, can be inferred by the characteristics of the 
off-gas, which is a mixture of about 60% methane (CH4) and 40% carbon dioxide (CO2). An additional 
small part of hydrogen (H2) is normally present, but a concentration exceeding a threshold of about 
200–300 ppm, depending on the digester, may indicate a malfunction, for example an organic over-
load (Marsili-Libelli and Beni, 1996). To obtain sufficient data relative to normal and pathological 
process operations, several organic overload shocks were administered to a pilot anaerobic digester 
and it was found that such data could be grouped into four typical behaviours in terms of hydrogen 
and gas flow: normal, overload, toxic, inhibition. Clustering these data with c = 4 and m = 2 pro-
duced the set of centroids indicated by the black squares in Figure 4.51. The typical response of the 
digester to an organic overload shock is indicated by the blue arrows in Figure 4.51.
4.5.6  Adaptive FCM Clustering
In the diagnostic use of FCM clustering the KB = (
)
{
}
v
v
1,
,
,

c
m  is the yardstick against which each 
new information item is assessed by computing its membership via Equation 4.58. The validity of this 
procedure hinges on the assumption that the KB is constant in time, which seldom occurs in practice, 
where a shift in the reference conditions against which new data are compared is often observed. This 
leads to the conclusion that in many instances some form of adaptation of the KB must be introduced 
to keep the diagnostics up to date with the changing conditions. It is therefore desirable to include 
some trend-following capability and make the clustering procedure adaptive.
Now it remains to decide which data are allowed to update the KB by changing the centroid 
position, and consequently the diagnostic capability of the algorithm. This poses the problem of 
discriminating between ‘good’ and ‘bad’ data, depending on their information content with respect 
to the existing KB. Of the many possibilities (Pal and Bezdek, 1994), we describe here one method 
presented in Marsili-Libelli (1998), where the updating value of each new entry is assessed on the 
basis of the normalized partition entropy of Equation 4.52. The new point joins the cluster and alters 
the centroid position only if this results in a decrease (or a very moderate increase ε > 0) of the 
incremental partition entropy ΔHn, namely
	
∆H
H
H
H
n
n
n
n
=
(
) −
(
)
(
)
≤
U
U
U
new
old
old
ε	
(4.62)
Partition clusters Clustered
degrees of truth
yk−1
yk−ny
…
Defuzzification
…
Past outputs
Delay chain
•••
•••
uk
Delay chain
Consequent local models
Past inputs
z−1
z−1
uk−δ
(μ1,…,μc)
yk
(i) = fi( yk−1,…, yk−ny, uk−δ ,…, uk−δ−nu)
z−1
z−1
uk−δ−nu
yk
i . μi
c
i = 1Σ
yk = 
μi
c
i = 1Σ
FIGURE 4.50  General structure of a Sugeno dynamical model with clustered antecedents. The delay chains 
are required for storing the past inputs and outputs.

244
Environmental Systems Analysis with MATLAB®
where Uold and Unew are the membership matrices before and after the inclusion of the new point. 
In this way, only the data which improve the order in the partition contribute to the KB updating. In 
practice, the updating algorithm can be based on a moving window of length N, equal to the dimen-
sion of the initial training set. At each new entry z, the operations shown in Box 4.7 are performed, 
with the oldest data being discarded and replaced by the new ‘good’ data, if they qualify as such. 
Though updating is certainly desirable when ∆Hn < 0, the reason for allowing some small positive 
increase in ΔHn can be justified with the need to follow the data evolution, even if this does not 
immediately result in a crisper partition.
BOX 4.7  ENTROPY-BASED UPDATING OF CENTROIDS IN FCM CLUSTERING
	
1.	Classify z via Equation 4.58 z
z
→
( )
µi
.
	
2.	Add the new membership vector µi z( ) as the rightmost (newest) column of U and 
discard the leftmost (oldest) column, corresponding to the first entry of the training 
set. There are now two matrices, representing the old partition Uold
(
) and the updated 
one Unew
(
).
	
3.	Compute the partition entropy of both matrices via Equation 4.52 and evaluate the 
incremental entropy ΔHn
	
∆H
H
H
H
n
n
n
n
=
(
) −
(
)
(
)
U
U
U
new
old
old
	
4.	If ∆Hn < ε (with ε > 0 small), then allow z to update the partition by re-computing 
the centroids.
400
350
300
250
200
150
Hydrogen (ppm)
100
500.0
0.5
1.0
1.5
Gas flow (l/h)
Normal
Inhibition/underload
Toxic
2.0
Overload
Cluster centres
0.9 α-cut
2.5
3.0
2
3
1
4
FIGURE 4.51  Mapping of gas flow and hydrogen concentration data obtained by administering an organic 
overload shock to a pilot digester. Four clusters with a clear process meaning were identified from the data 
and labelled to serve as a diagnostic tool. Typically, the response of the digester to the shock follows the 
sequel indicated by the arrows. (Reproduced with permission from Marsili-Libelli, S. and Müller, A., Pattern 
Recogn. Lett., 17, 651–659, 1996.)

245
Fuzzy Modelling of Environmental Systems
The adaptive diagnostic just described is now applied to the anaerobic digester shock experi-
ments already described in Section 4.5.5.1 and illustrated in Figure 4.51. We now consider two new 
shock experiments from the study by Müller et al. (1997), where the differing rates of hydrogen 
production relative to gas flow makes the diagnostics difficult, and yet the two experiments should 
be recognized as belonging to the same class of organic shocks. Of the two experiments, shown in 
Figure 4.52 the first was used for training and the second for updating the online detection.
In Figure 4.53, the experimental data are plotted in the detection variables space, together with 
the shock trend lines and detection results. The evolution of the test shock experiment 2 is depicted 
in the cluster space, showing that the centroids, trained with experiment 1, are ‘pulled’ towards this 
new trajectory by the adaptation mechanism.
Because the trend line in experiment 2 has a lower slope than in experiment 1, some adap-
tive capability is needed to adjust the trained clusters to the new situation. Adopting the updating 
mechanism of Equation 4.62 with ε = 0 05
.
 only a fraction of the data in experiment 2 influences the 
clusters and produces an update of the centroids. Figure 4.54 shows the threshold memberships 
μmax and μmin relative to cluster 1 (overload) and cluster 2 (normal). The selection of the maximum 
permissible update rate ε is highly application-dependent and should be tuned on a case-by-case 
basis. A large ε would produce an excessive updating, with the danger of destroying the initial KB, 
whereas a too small value would hamper the adaptation, thus impairing the learning capability of 
the algorithm.
4.5.7  Automatic Generation of mfs
The KB obtained by clustering a training data set can be used to generate mfs following the 
approach described in Section 4.5.4, which resulted in Equation 4.58. Given a scalar variable xmin ≤ 
x ≤ xmax for which KB = (
)
{
}
v
v
1,
,
,

c
m  has been trained, let us define an evenly spaced vector of 
values as x =[xmin:dx:xmax] spanning the interval of interest x
x
min
max
,
(
) with resolution dx. 
This vector of values can be classified through Equation 4.58 with respect to the previous KB. 
Gas flow (l/h)
1.0
2.0
0.0
3.0
Gas ﬂow (l/h)
0
20
40
60
80
100
0
100
200
300
Time (h)
0
10
20
30
40
50
60
100
150
200
250
300
Time (h)
1.0
2.0
0.0
3.0
Hydrogen (ppm)
Hydrogen (ppm)
Experiment n. 1
Experiment n. 2
Hydrogen
Gas flow
FIGURE 4.52  Two additional shock load experiments demonstrate the adaptive diagnostic method. 
Experiment 1 was used for training the initial KB, whereas experiment 2 was used to demonstrate the adapta-
tion based on partition entropy.

246
Environmental Systems Analysis with MATLAB®
300
280
260
240
220
200
180
160
Hydrogen (ppm)
Gas flow (l/h)
1.4
1.6
1.8
2.0
2.2
2.4
2.6
‘Overload’
centroid
‘Normal’
centroid
Shock trend lines
Updating
overload
samples
Non-updating
overload
samples
exp. 1
exp. 2
Updating samples
+ + +
× × ×
Non-updating samples
FIGURE 4.53  Diagnostics of the two shock load experiments shown in Figure 4.52, with the dots indicating 
the training data from experiment 1. The trend lines indicate that the two experiments are significantly different, 
and yet the adaptation mechanism ‘pulls’ the centroids towards the new trend, being influenced by the updating 
new data (x) only. (Reproduced with permission from Mueller, A. et al., Water Res., 31, 3157–3167, 1997.)
0
20
40
60
80
100
120
140
160
180
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Sample number
Update of cluster 1 (overload)
μmax = 0.8553
μmin = 0.1854
No update
Update of cluster 2 (normal)
Degree of membership
Updating samples
Non-updating samples
FIGURE 4.54  Updating thresholds for the two clusters describing the “normal” and “overload” conditions 
of the experiments of Figure 4.52. The dots in the grey bands indicate the samples that contribute to the 
­centroid updating.

247
Fuzzy Modelling of Environmental Systems
These memberships can be visualized as a one-dimensional plot and can be used for diagnostics, 
as in the previous section, or they can represent the shape of antecedent mfs in a conventional 
Mamdani or Sugeno FIS.
As an example, let us consider a six-month record drawn from the potabilization plant of the City 
of Florence (Italy). It shows the output turbidity, expressed as formazine turbidity units (FTU), after 
the flocculation stage and before the sand filters. The water turbidity at this point in the potabiliza-
tion process is critical because the sand filters yield an optimal performance only for a narrow range 
of turbidity, normally around 2 FTU. Whenever the turbidity departs from this range the flocculant 
dosing should be adjusted to bring the turbidity back at the desired value. Thus, turbidity diagnos-
tics is the first step towards feedback control of the clarification–flocculation process. Figure 4.55 
shows the KB obtained by clustering the turbidity data recorded during the first half of 2010 with a 
30 min sampling interval. Clustering this record with c = 4 and m = 2 yields the following centroids 
V == 1.1787  2.4825  1.7889  3.5078
[
] expressed as FTU. The mfs in the right graph were obtained 
by classifying a vector of turbidity values between 0 and 6 (FTU). It can be observed that each mf 
exhibits some ‘humps’ in the lower part (left part, considering the CW rotation). This is caused 
by the total membership constraint (4.45) embedded in the FCM algorithm. For the same reason, 
values of x much outside the range of interest are classified with the common value μ = 1/c, which 
is far from being realistic.
Both these undesirable features, and the fact that the numerical mfs of Figure 4.55 cannot be 
transferred to any FIS where analytical mfs are required, can be removed by approximating them 
with one of the mathematically defined mfs in the MATLAB Fuzzy Toolbox library. We are again 
confronted with a parameter calibration problem, and while Box 4.8 outlines the general procedure 
for the mfs approximation, Box 4.9 shows the practical implementation for the calibration of a single 
mf. These operations must be repeated for all the FCM-generated numerical mfs, and applied to the 
data-generated mfs of Figure 4.55 to produce the approximated analytical mfs shown in Figure 4.56.
4.5.8  Gustafson–Kessel Fuzzy Clustering
We have seen in Section 4.5.2.2 that the main limit of the FCM clustering algorithm is its metric. 
In fact using the Euclidean norm forces the clusters to be spherical, regardless of the data shape. 
To overcome this limitation, the Gustafson–Kessel (GK) fuzzy clustering algorithm (Gustafson and 
0
1
2
3
4
5
6
0.0
0.5
1.0
Turbidity (FTU)
Degree of membership
Jan
Feb
Mar
Apr
May
Jun
0
1
2
3
4
5
6
Turbidity (FTU)
Month of the year
High
Very
high
Normal
Low
FIGURE 4.55  Building a KB of turbidity data, recorded at the potabilization plant of the city of Florence 
(Italy) during the first half of 2010, selecting c = 4 and m = 2. The mfs produced by the FCM are shown on 
the right. These graphs were obtained with the MATLAB script Automatic _ mfs _ tuning.m in the 
ESA _ Matlab\Exercises\Chapter _ 4\Membership _ Estimation folder.

248
Environmental Systems Analysis with MATLAB®
BOX 4.8  PROCEDURE FOR FITTING AN ANALYTICAL 
MF TO THE FCM-GENERATED CLUSTER DATA
	
1.	Select the mf type. A suggestion is to use gauss2mf for the central memberships, 
zmf for the leftmost mf, and smf for the rightmost one. Once the mf type has been 
selected a function handle can be defined as model = @gausmf (a fancy name 
that has nothing to do with the MATLAB gauss2mf) meaning that in the opti-
mization the objective function will be the gauss2mf mf. This is a handy way of 
specifying a function within another function, as illustrated in the next Box 4.9.
	
2.	Guess a set of initial parameters, depending of the mf type. In the example of 
Box 4.9, the initial parameters of the gauss2mf are guessed from the mean and 
variance of the xdata. They are then grouped in the vector start _ point, to be 
later passed to the optimization.
	
3.	Define the body of the objective function.
	
4.	Launch the optimization with the built-in MATLAB command estimates = 
fminsearch(model, start _ point, options) where model points to the 
handle @gausmf previously defined.
BOX 4.9  MATLAB FUNCTION TO FIT AN ANALYTICAL 
MF TO THE FCM-GENERATED CLUSTER DATA
The script in the box refers to the middle mfs (gauss2mf), but 
the full MATLAB function (fit _ mf.m in the ESA _ Matlab\
Exercises\Chapter _ 4\Membership _ Estimation folder) fits 
also the first and last mfs using the zmf and smf fuzzy mfs.
function [estimates, model] = fit_mf(xdata,ydata,ord,c)
% Initial parameters estimates
    c1=0.9*mean(xdata);
    c2=1.1*mean(xdata);
    sig1=0.5*var(xdata);
    sig2=0.7*var(xdata);
% Form the initial parameters vector
start_point = [sig1 c1 sig2 c2];
% Define the function handle
model = @gausmf;
%-----------------------------------------------------------------
% Actual parameters optimization
options=optimset(‘MaxIter’,1e8,’MaxFunEvals’,1e8,
…’TolFun’,1e-6,’TolX’,1e-6);
estimates = fminsearch(model,start_point,options);
%-----------------------------------------------------------------
    function [sse, FittedCurve] = gausmf(par)
        % Objective function for parameter fitting
        % Fit the data to the selected analytical mf (gauss2mf)
        FittedCurve = gauss2mf(xdata,par);
        % Difference between numerical and analytical mfs
        ErrorVector = FittedCurve - ydata; 
        sse = sum(ErrorVector.^2); % Sum of squared errors

249
Fuzzy Modelling of Environmental Systems
Kessel, 1979) used the Mahalanobis distance defined by Equation 4.38, which is now rewritten by 
introducing the norm-inducing matrices Ai,
	
dik
k
i
T
i
k
i
i
p p
i
,A
x
v
A x
v
A
2
=
−
(
)
−
(
)
∈
×
with

	
(4.63)
The GK fuzzy partition functional becomes
	
J
c m
d
gk
ik
m
ik
k
N
i
c
( ,
,
)
,
Ai
Ai
=
(
)
=
= ∑
∑
µ
2
1
1
	
(4.64)
Now, the optimization involves not only the membership matrix U ∈
(
)
×
c N  and the centroid matrix 
V ∈
(
)
×
c p , but also the matrices Ai, one for each cluster. It was suggested (Gustafson and Kessel, 
1979; Babuska, 1998) that a feasible minimum of Equation 4.64 can be obtained by constraining the 
determinant of Ai to be positive,
	
det
.
Ai
i
(
) =
>
ρ
0 	
(4.65)
Without specific information about the possible values of cluster volume, it can be assumed that 
ρ =1. Minimizing Equation 4.64 with the constraint (4.65) yields the following expression for Ai 
(Babuska, 1998; Abonyi, 2003):
	
A
F
F
i
i
i
p
i
= 

−
ρ det(
)
/1
1	
(4.66)
where Fi
p p
∈
×

 is the fuzzy covariance matrix defined as
	
Fi
ik
m
k
i
T
k
i
k
N
ik
k
N
m
=
(
)
−
(
)
−
(
)
(
)
=
=
∑
∑
µ
µ
x
v
x
v
1
1
	
(4.67)
and the centroids vi
p i
c
∈
=
(
)

…
|
,
,
1
 are computed as
1.5
2.0
2.5
3.0
3.5
4.0
0.0
0.2
0.4
0.6
0.8
1.0
Turbidity (FTU)
Degree of membership
mf data
Centroids
Fitted mf
FIGURE 4.56  Fitting analytical mfs from the MATLAB Fuzzy Toolbox to the FCM-generated numerical 
membership data with the procedure outlined in Box 4.8. The leftmost mf was fitted to a zmf, the rightmost 
to an smf, while the central ones were adapted to a gauss2mf. Notice that the intermediate ‘humps’ of the 
numerical mfs (thin black lines) have disappeared, together with the asymptotic behaviour towards the 1/c 
common value. This graph was obtained with the MATLAB script Automatic _ mfs _ tuning.m in the 
ESA _ Matlab\Exercises\Chapter _ 4\Membership _ Estimation folder.

250
Environmental Systems Analysis with MATLAB®
	
v
x
i
ik
m
k
k
N
ik
m
k
N
i
c
=
(
)
(
)
=
=
=
∑
∑
µ
µ
1
1
1,
, .

	
(4.68)
The point-to-centroid distance (4.63) can be rewritten by substituting Equation 4.66 for the norm-
inducing matrix Ai as
	
dik
k
i
T
k
i
i
i
p
i
i
,
/
(
)
F
x
v
x
v
F
F
2
1
1
=
−
(
)
−
(
)


−
ρ det
	
(4.69)
so that the mfs become
	
µik
m
j
j i
c
ik
jk
d
d
i
c
k
N
i
i
=
(
)
=
=
−
=
≠
∑
1
1
1
2
1
1
,
,
,
,
,
,
F
F


	
(4.70)
where dik
i
,F and d jk
i
,F are computed via Equation 4.69. Though the memberships (4.70) have the same 
formal expression of their FCM counterpart, the distances are computed by taking into account the 
fuzzy covariance matrix (4.67). The GK algorithm can adapt the shape of the cluster to the data by 
including the fuzzy covariance matrix in the distance computation (4.69), but this involves a greater 
computational complexity because the inverse and the determinant of the fuzzy covariance matrices 
Fi must be computed at each iteration, as shown in Box 4.10.
BOX 4.10  ITERATIVE STRUCTURE OF THE GK ALGORITHM
Starting with a random U 0
( ) repeat for t = 1, 2, ….
	
1.	Compute the centroids
	
v
x
i
t
ik
t
m
k
k
N
ik
t
m
k
N
i
c
( )
−
(
)
=
−
(
)
=
=
(
)
(
)
=
∑
∑
µ
µ
1
1
1
1
1,
,

	
2.	Compute the fuzzy covariance matrix
	
F
x
v
x
v
i
t
ik
t
m
k
i
t
T
k
i
t
k
N
ik
t
m
k
N
( )
−
(
)
( )
( )
=
−
(
)
=
=
(
)
−
(
)
−
(
)
(
)
∑
µ
µ
1
1
1
1
∑
	
3.	Compute the distances
	
dik
t
k
i
t
T
k
i
t
i
i
t
p
i
t
i
,
/
F
x
v
x
v
F
F
( )
( )
( )
( )
( ) −
=
−
(
)
−
(
)


(
)
2
1
1
ρ det
(
)
	
4.	Update the partition matrix
	
U
F
F
t
ik
t
t
t
m
j
j i
c
d
d
k
N
ik
i
jk
i
( )
( )
( )
( )
−
=
≠
=
(
)
=
∑
:
,
,
,
,
µ
1
1
2
1
1

Until U
U
t
t
( )
−
(
)
−
<
1
ε

251
Fuzzy Modelling of Environmental Systems
4.5.8.1  Adaptive Volume GK Algorithm
Though the introduction of the fuzzy covariance into the norm-inducing matrix considerably 
improves the flexibility of the algorithm, the fixed volume assumption (4.65) does not fully exploit 
the potential of the adaptive norm. For this reason, several improvements to the basic GK algorithm 
were proposed (Krishnapuram and Kim, 1999; Babuska et al., 2002; Kaymak and Setnes, 2002) in 
which the cluster volumes ρi were estimated from the data. In particular, Krishnapuram and Kim 
(1999) proposed to estimate the cluster volume according to
	
ρ
λ
i
j
ij
i
p
p
= 



min
det
(
)
(
) /
F 1
	
(4.71)
where λij
j
p
,
,
,
=
(
)
1 
 are the p eigenvalues of the fuzzy covariance matrix Fi. The iterative scheme 
of the adaptive volume algorithm is shown in Box 4.11.
To demonstrate the better adaptability of the GK algorithm to the shape of the data and the 
additional improvement brought about by the volume adaptation, Figure 4.57 compares the two GK 
BOX 4.11  ITERATIVE STRUCTURE OF THE GK 
ALGORITHM WITH ADAPTIVE CLUSTER VOLUMES
Starting with a random U 0
( ) repeat for t = 1, 2, ….
	
1.	Compute the centroids
	
v
x
i
t
ik
t
m
k
k
N
ik
t
m
k
N
i
c
( )
−
(
)
=
−
(
)
=
=
(
)
(
)
=
…
∑
∑
µ
µ
1
1
1
1
1,
,
	
2.	Compute the fuzzy covariance matrix
	
F
x
v
x
v
i
t
ik
t
m
k
i
t
T
k
i
t
k
N
ik
t
k
N
( )
−
(
)
( )
( )
=
−
(
)
=
=
(
)
−
(
)
−
(
)
(
)
∑
∑
µ
µ
1
1
1
1
m
	
3.	Estimate the cluster volumes
	
ρ
λ
i
t
k
ik
t
i
t
p
p
( )
( )
/
=
(
)










(
)
( )
min
det F
1
	
4.	Compute the distances
	
dik
t
k
i
t
T
k
i
i
t
i
t
p
i
t
i
,
/
F
x
v
x
v
F
F
( )
( )
( )
( )
( ) −
=
−
(
)
−
(
)


(
)
2
1
1
ρ det
t( )
(
)
	
5.	Update the partition matrix
	
U
F
F
t
ik
t
t
t
m
j
j i
c
d
d
k
N
ik
i
jk
i
( )
( )
( )
( )
−
=
≠
=
(
)
=
∑
:
,
,
,
,
µ
1
1
2
1
1

Until U
U
t
t
( )
−
(
)
−
<
1
ε

252
Environmental Systems Analysis with MATLAB®
versions with a data set in which the nature of the data would result in an awkward FCM cluster-
ing, given their non-spherical shape. Although the basic GK algorithm (a) performs better than the 
FCM, still the centroid n. 3 is placed in an unrealistic position, straddling part of the data in clusters 2 
and 3. Conversely, the adaptive volume version (b) keeps all the data of cluster 2 together and places 
the third centroid where it is expected to be, near the small clump of data in the lower right corner. 
The better discrimination of the adaptive version is confirmed by the normalized entropy value, 
which is significantly lower, and of the separation coefficient, which indicates that the clusters are 
now well separated g <
(
)
1 , whereas in the constant volume version they were intersecting.
4.5.9  Fuzzy Maximum Likelihood Estimates
Further progress in adapting the cluster shape to the data is provided by the fuzzy maximum like-
lihood estimates (FMLE) clustering, which uses a distance norm based on the fuzzy maximum 
likelihood estimates
	
d
N
ik
i
ik
k
N
k
i
T
i
k
i
i
,
det
exp
Φ
Φ
Φ
=
(
)
(
)
−
(
)
−
(
)




=
−
∑
1
2
1
1
1
1
2
µ
x
v
x
v
	
(4.72)
This differs from the GK distance (4.69) in two ways: the distance is weighted exponentially, and 
the matrix Φi
	
Φi
ik
k
i
T
k
i
k
N
ik
k
N
=
−
(
)
−
(
)
=
=
∑
∑
µ
µ
x
v
x
v
1
1
	
(4.73)
0.0
(a)
(b)
0.2
0.4
0.6
0.8
0.0
0.2
0.4
0.6
0.8
1.0
0.75
0.75
0.75
0.9
0.9
x1
x1
x2
Hn = 0.3624  g = 1.5841  m = 2.0
Hn = 0.2268  g = 0.8150  m = 2.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
x2
0.75
0.9
0.75
0.9
0.9
0.75
0.5
0.5
0.75
0.9
0.75
0.9
0.5
0.5
6.0
0.5
0.5
0.5
0.75
0.75
0.5
0.5
0.5
0.5
0.75
0.75
0.75
0.9
0.75
0.75
0.9
0.5
0.5
0.5
0.75
0.75
0.75
6.0
6.0
0.75
0.5
0.5
0.75
0.75
0.75
0.9
0.9
6.0
0.9
0.9
0.75
0.5
0.5
0.75
0.5
0.5
0.5
0.5
1
3
1
2
3
2
0.75
0.9
FIGURE 4.57  Comparison of the two versions of the GK clustering algorithm. In (a) the constant volume 
constraint produces intersecting clusters (g > 1) with the rightmost centroid (3) straddling two data clouds. In 
contrast, the adaptive volume version (b) produces a much more definite separation (g < 1), which is reflected 
by the lower Hn value, and a much more reasonable centroid location. These graphs were obtained with 
the MATLAB script Go _ GK _ Vol.m in the ESA _ Matlab\Exercises\Chapter _ 4\Fuzzy _
Clustering\GK folder.

253
Fuzzy Modelling of Environmental Systems
is similar to Fi of Equation 4.67, save for the fact that the membership μik is not raised to the expo-
nent m. The other major difference with the GK algorithm is the lack of any constraint in the cluster 
volume, given the ‘natural’ ability of this algorithm to conform to the data through the distance 
computation (4.72). The iterative scheme, outlined in Box 4.12, is the same as that of FCM and GK, 
but the exponential distance makes the convergence more problematical, so that FMLE requires a 
careful initialization, possibly provided by a previous GK partition. Figure 4.58 compares the per-
formance of the FMLE clustering algorithm to the adaptive volume GK over the same data set. It 
can be seen that FMLE achieved an even greater separation, delineates the cluster boundary better, 
and is less sensitive to the value of the fuzzy exponent m.
4.5.10  Possibilistic C-Means Clustering
We now examine a clustering method that strives to eliminate, or at least relax, the total mem-
bership constraint (4.45) embedded in all of the previous methods. This new algorithm, termed 
Possibilistic C-means (PCM), follows the same approach of the previous algorithms, in the 
BOX 4.12  ITERATIVE STRUCTURE OF THE FMLE ALGORITHM
Starting with a random U 0
( ) repeat for t = 1, 2, ….
	
1.	Compute the centroids
	
v
x
i
t
ik
t
m
k
k
N
ik
t
m
k
N
i
c
( )
−
(
)
=
−
(
)
=
=
(
)
(
)
=
∑
∑
µ
µ
1
1
1
1
1,
,

	
2.	Compute the matrices
	
Φi
t
ik
t
k
i
t
T
k
i
t
k
N
ik
t
k
N
( )
−
(
)
( )
( )
=
−
(
)
=
=
−
(
)
−
(
)
∑
∑
µ
µ
1
1
1
1
x
v
x
v
	
3.	Compute the distances
	
d
N
ik
t
i
t
ik
t
k
N
k
i
t
T
i
t
i
,
det
exp
Φ
Φ
Φ
( )
( )
−
(
)
=
( )
=
(
)
(
)
−
(
)
∑
1
2
1
1
1
1
2
µ
x
v
( ) −
( )
(
)
−
(
)




1 x
v
k
i
t
	
4.	Update the partition matrix
	
U t
ik
t
ik
t
jk
t
m
j
j i
c
d
d
k
N
i
i
( )
( )
( )
( )
−
=
≠
=
(
)
=
∑
:
,
,
,
,
µ
1
1
2
1
1
Φ
Φ

Until U
U
t
t
( )
−
(
)
−
<
1
ε

254
Environmental Systems Analysis with MATLAB®
sense that the constraint is embedded in the objective functional via a Lagrange multiplier, but 
in this case the term ΣΣµ −
(
)
1  is weighted by a multiplier that decreases its relative importance 
(Krishnapuram and Keller, 1993; Babuska, 1998; Pal et al., 2005). The objective functional 
thus becomes
	
min
,
,
µ η
η
µ
η
µ
J X
ik
m
k
i
k
N
i
c
i
i
c
ik
m
k
N
i
(
) =
(
) ⋅
−
+
⋅
−
(
)
=
=
=
=
∑
∑
∑
x
v
A
1
1
1
1
1
∑
	
(4.74)
where Ai are norm-inducing matrices that define the point-to-centroid distance and ηi
i
c
>
= …
(
)
0
1
,
,
,
 
are positive constants, hopefully small enough to effectively relax the total membership constraint. 
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
x1
x1
x1
x2
x2
x2
Hn = 0.0000 g = 0.5421 m = 2.0
Hn = 0.1866  g = 0.5548 m = 2.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Hn = 0.0000 g = 0.5421 m = 3.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
x1
x2
Hn = 0.4326  g = 0.7234  m = 3.0
0.9
0.75
0.75
0.9
0.9
0.75
0.75
0.9
6.0
0.75
0.75
0.75
0.75
0.75
0.75
0.5
0.5
0.9
0.9
0.5
0.9
0.75
0.75
0.75
0.75
0.75
0.9
0.9
0.5
0.5
0.9
0.9
0.75
0.5
0.75
0.9
0.9
0.9
0.9
0.9
0.75
0.75
0.5
0.5
0.75
0.9
0.9
0.75
0.5
0.75
0.75
0.75
0.75
0.75
0.9
0.75
0.75
0.75
0.9
0.9
0.5
0.5
0.75
0.5
FIGURE 4.58  Comparison of FLME (left) and adaptive volume GK (right) clustering algorithms of the 
same data set. The separation achieved by the FMLE is superior to that provided by the GK algorithm, even in 
the adaptive volume version. Note how the FMLE is less sensitive to the value of the fuzzy exponent m and its 
contour lines better conform to the data. These graphs were obtained with the MATLAB script Go _ FMLE.m 
in the ESA _ Matlab\Exercises\Chapter _ 4\Fuzzy _ Clustering\FMLE folder.

255
Fuzzy Modelling of Environmental Systems
If we restrict to the case A
I
i =  in the functional (4.74), we are back at the FCM algorithm, but with 
a relaxed membership constraint. The introduction of the new multipliers ηi greatly complicates the 
minimization of Equation 4.74 and a suggested choice (Krishnapuram and Keller, 1993) is to relate 
the new weights to the distances, that is,
	
η
µ
µ
i
ik
m
ik
k
N
ik
m
k
N
K
d
K
=
(
) ⋅
(
)
>
=
=
∑
∑
2
1
1
0
with
	
(4.75)
where the distance dik are the Euclidean norm of Equation 4.37. The memberships are then com-
puted as a function of the constraint coefficients ηi,
	
µ
η
ik
ik
i
m
d
=
+(
)
−
1
1
2
1
	
(4.76)
and the centroids are computed as in the FCM algorithm according to the iterative scheme of 
Box 4.13. Because the minimization of Equation 4.74 is fairly critical, it is advisable to abandon 
the random initialization and start with a feasible partition such as that produced by a preliminary 
FCM clustering.
Figure 4.59 compares the results of PCM and FCM clustering on the same set of data with two 
very problematical data, which could be regarded as outliers and do not deserve to be assigned to 
BOX 4.13  ITERATIVE STRUCTURE OF THE PCM ALGORITHM
Starting with a good U 0
( ) (e.g., pre-computed with the FCM algorithm) repeat for t = 1, 2, ….
	
1.	Compute the centroids
	
v
x
i
t
ik
t
m
k
k
N
ik
t
m
k
N
i
c
( )
−
(
)
=
−
(
)
=
=
(
)
(
)
=
∑
∑
µ
µ
1
1
1
1
1,
,

	
2.	Compute the distances
	
dik
t
k
i
t
T
k
i
t
( )
( )
( )
=
−
(
)
−
(
)
2
x
v
x
v
	
3.	Compute the possibilistic constraint
	
η
µ
µ
i
t
ik
t
m
ik
t
k
N
ik
t
m
k
N
K
d
K
( )
−
(
)
( )
=
−
(
)
=
=
(
) ⋅
(
)
>
∑
∑
1
1
1
1
2
0
with
	
4.	Update the partition matrix
	
U t
ik
t
ik
t
i
j
j i
c
m
d
k
N
( )
( )
( )
=
≠
−
=
(
)
=
∑
:
,
,
µ
η
1
1
1
2
1

Until U
U
t
t
( )
−
(
)
−
<
1
ε

256
Environmental Systems Analysis with MATLAB®
either cluster. The PCM correctly classifies them with a zero membership, whereas the FCM assigns 
a very unrealistic ∼0.5 membership as a consequence of the total memberships constraint. Notice 
also the very low value of m, very near the admissible minimum (m = 1), which makes the PCM 
algorithm very discriminative.
0.0
0.5
μ = (0 0)
μ = (0 0)
0.5
0.5
0.5
0.5
0.9
0.5
0.9
0.9
6.0
0.9
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
x2
x2
x1
0.0
0.5
1.0
x1
PCM clustering with m = 1.1
0.0
0.2
0.4
0.6
0.8
1.0
FCM clustering with m = 2
μ = (0.4715 0.5285)
0.75
0.9
0.9
0.9
0.75
0.75
0.75
0.9
0.9
0.9
0.5
0.5
0.5
0.75
μ = (0.5136 0.4864)
FIGURE 4.59  Comparison of PCM and FCM clustering of a data set with two outliers. The possibilistic 
clustering (left) is able to exclude these points from both clusters, whereas the FCM algorithm (right) yields an 
ambiguous classification. These graphs were obtained with the MATLAB script Go _ PCM.m in the ESA _
Matlab\Exercises\Chapter _ 4\Fuzzy _ Clustering\PCM folder.

257
Population Dynamics 
Modelling
Either we limit our population growth or the natural world will do it for us, and the natural 
world is doing it for us right now.
David Attenborough
The evolution of populations has always been a central theme in mathematical modelling and in Chapter 1 
we have already mentioned that after the pioneering efforts by Maynard Smith (1974) mathematical 
modelling of populations, viewed as the central players in the ecosystem, has become a mainstay in ecol-
ogy (Odum, 1983; Ricklefs and Miller, 1999; Gotelli, 2001; Odum and Barrett, 2004; Rockwood, 2006; 
Vandermeer and Goldberg, 2013). In this chapter, we shall examine the basics of population dynamical 
models, starting with single-species modelling, and then expanding the analysis to include the interac-
tions between competing species, eventually culminating in the modelling of the entire food web.
The goal of population dynamics is to provide a quantitative description of the evolution of a 
group of individuals (the population), belonging to one or more species, which share the resources of 
the same environment. When working with quantitative models, it is important to define the units in 
which the population is expressed. The basic unit will always be population density, understood as 
the number of individuals per unit of habitat (surface or volume), and if we deal with single-­species 
models, then population density alone (e.g., individuals/unit surface or individuals/unit ­volume) 
might suffice. However, when we consider several species, which might range from the flea to the 
elephant, simply counting individuals could become impossible, particularly when we describe the 
interactions among them and with the environment. Furthermore, when it comes to considering 
their impact on the ecosystem, surely a flea does not exert the same environmental pressure as an 
elephant; nonetheless it is a necessary component of the ecosystem. Thus, we must agree on a com-
mon unit, such as the energy content of each organism, which will be expressed in kcal/unit surface 
or kcal/unit volume. Using this common unit, energy transfer across differing trophic levels can 
be established regardless of the species in each level, as we have already considered in Chapter 1. 
This approach has been fully exploited in constructing thermodynamical models (Jorgensen and 
Svirezhev, 2004), as briefly mentioned in Chapter 1. As to the scale of modelling, several options 
are available (Odum and Odum, 2000). We will start with simple single-species models (Maynard 
Smith, 1974; Pielou, 1977; Begon and Mortimer, 1986; Renshaw, 1991; Vandermeer and Goldberg, 
2013), and then move on to multispecies models (Turchin, 2003; Mittelbach, 2012).
5.1  SINGLE-SPECIES CONTINUOUS-TIME POPULATION MODELS
The growth of a single-species population is amply treated in many ecology textbooks, so only 
the main results will be recalled here. A single-species growth model is based on the following 
simplifying assumptions, which will be progressively relaxed as we move towards more realistic 
models. For now, we assume that the individuals in the population are all constantly reproductive, 
that each new-born is immediately fertile, and that the growth rate is proportional to the size of the 
population. Under these assumptions (that will be relaxed later), the growth of a population x can be 
described by the following ordinary differential equation:
 
dx
dt
x F x
=
⋅
( )	
(5.1)
5

258
Environmental Systems Analysis with MATLAB®
where F x
( ) is the population growth function, which should satisfy the following hypotheses to 
have a stable and limited model:
 
1
0
0
2
0
3
0
0
.
.
.
F x
x
F x
dF x
dx
x
( ) >
∀>
( ) =
( ) <
∀>
	
(5.2)
The first condition states that F x( ) must be positive for all x. The second states that at the equilib-
rium x, the function F x( ) must vanish, whereas the third requires its derivative to be a decreas-
ing function, implying that the growth must relent as the population approaches its equilibrium. 
Figure 5.1a shows some possible shapes for F x
( ), from which some departure is possible due to 
the Allee effect (b), which states that a population cannot grow if its density is below a ‘critical’ 
value so small that mating and reproduction is very difficult. For this reason, at very low density the 
growth function may become negative, indicating that the impaired reproductive ability will make 
the population decrease even more. This departure from the theoretical shape of the growth func-
tion is indicated by the blue shading in Figure 5.1b.
5.1.1  Stability of the Equilibrium of a Single-Species Growth Model
Apart from the Malthusian model, which considers an unlimited growth, ecological and biological 
factors always impose a limit to growth. This translates in the mathematical property of equilibrium 
and its stability, as already seen in Chapter 1. Because stability is a property of the equilibrium, 
before investigating the model stability we must compute its equilibrium and then decide whether 
this is stable or not. A necessary condition for the equilibrium of the growth model (Equation 5.1) is 
the vanishing of its derivative, so we seek the solutions to the stationary equation
 
0 =
⋅( )
x F x 	
(5.3)
Because we assume a non-zero population x >
(
)
0 , Equation 5.3 reduces to solving for F x( ) = 0. 
The equilibrium solutions of Equation 5.3 are therefore 
 
x F x
: ( ) = 0	
(5.4)
To analyse the stability of the, generally multiple, equilibria x in the sense already treated in Section 
1.9.2, we consider small perturbations about the equilibrium x, that is, x
x
x
=
+ , so that 

x
x
= . 
Linearizing the model (Equation 5.1) in this neighbourhood according to Equation 1.84 yields
0
F(x)
F(x)
–x
x
Fmax
Allee effect
x
(a)
(b)
0
FIGURE 5.1  General aspect of the growth function (a) and possible departure due to the Allee effect (b).

259
Population Dynamics Modelling
 
dx
dt
F x
x
x
x


=
∂( )
∂





⋅	
(5.5)
where the term in parentheses can be regarded as the one-dimensional Jacobian of the system. The 
(local) stability of the linearized model (Equation 5.5) depends on the sign of the derivative of the 
growth function at the equilibria. Figure 5.2 shows a growth function exhibiting depensation, that is, 
negative growth rate for low population densities (the Allee effect). This growth function intersects 
the x-axis at three points, two of which (1 and 3) yield a negative derivative of the Jacobian function 
in Equation 5.5, and are therefore stable, whereas in point 2 the derivative is positive, hence this point 
is unstable. To dispel the intuitive notion that stability is ‘good’ and instability ‘bad’, let us consider 
that a stable equilibrium will attract the trajectories: in the case of point 1 that will mean extinction. 
Likewise the instability of point 2 has a positive meaning, because it fosters population growth away 
from extinction and towards the other stable equilibrium (3). We shall soon get back to the ecological 
implications of stability, but for now let us recall that Equation 5.5 is the general tool for assessing the 
stability of a growth model.
5.1.2  The Logistic Growth Function
Undoubtedly, the most popular single-species growth model is the logistic equation, which has 
enjoyed great popularity for some time as a significant improvement to the unrealistic Malthusian 
model, which predicted unlimited growth. Because limitation is observed in any population grow-
ing in a finite environment and depending on its resources for its development, this equation intro-
duces self-limitation in the form
 
dx
dt
r x
x
K
= ⋅⋅
−




1
	
(5.6)
where:
r is the growth rate
K is the carrying capacity
The latter plays a major role in population growth as it represents the maximum density that the 
population can reach in that environment. Consequently, it represents the role of the environment in 
fostering or limiting the development of the population, in terms of food, shelter, nesting sites and so 
on. However, the environment does not have an influence on the growth rate r, which is an intrinsic 
characteristic of each species. According to Equation 5.6, a population with an initial density xo 
grows until it reaches the carrying capacity K, which represents a stable equilibrium, as depicted in 
Maximum growth rate
x · F(x)
x
Unstable equilibrium
∂F(x)
∂x
Stable equilibrium
∂F(x)
< 0
∂x
2
1,3
2
1
3
–x
> 0
–x
FIGURE 5.2  Graphical and analytical assessment of the equilibria of a single-species growth model. 
Equilibria 1 and 3 are stable, whereas the equilibrium 2 is unstable.

260
Environmental Systems Analysis with MATLAB®
Figure 5.3, in which the growth rate is also shown. The growth curve has an inflexion point when 
the population density is half the carrying capacity, at which level the growth rate is maximal. The 
population density producing the maximum growth rate vmax can be determined by solving for the 
value xmax at which the derivative of the growth function with respect to x vanishes, namely
 
x
d
dx rx
x
k
r
x
K
dx
dt
dx
dt
x
max
1
1
2
0
but
0
for
⇔
−







=
−




=
≠
<
→−
=
→
=
K
x
K
x
K
1
2
0
2
max
	
(5.7)
This justifies the previous observation that the logistic growth has an inflexion point at half the 
maximum (carrying) capacity, irrespective of the initial population density xo. Substituting xmax into 
the growth function yields the maximum growth rate as
 
v
r x
x
K
r K
K
K
rK
max
max
max
1
2 1
2
1
4
= ⋅
−



= ⋅
−
⋅



=
	
(5.8)
The relationship among the various quantities in Equations 5.7 and 5.8 are illustrated in Figure 5.4.
Growth rate
Carrying capacity
Maximum growth rate
Time
Population density
Population
K
K
2
xo
FIGURE 5.3  Time evolution of a population according to the logistic equation (solid line) and its growth rate 
(dashed line). The maximum growth coincides with the inflexion point.
0
2
4
6
8
10
0.0
1.0
x · F(x) =
rK
vmax = 4
K
xmax = 2
x
K
r · 1 −
x
K
r · x · 1 −
x
Growth  rate
r
0.5
K
FIGURE 5.4  Analysis of the logistic growth function. Its curve (solid line) is symmetrical with respect to 
the middle growth point where the maximum growth occurs. The growth function (dashed line) is linear and 
terminates at the equilibrium x = K.

261
Population Dynamics Modelling
The carrying capacity represents a globally stable equilibrium, and the population in that state 
is able to cope with perturbations that tend to shift it away from the equilibrium. Linearizing the 
growth function around x
K
=
 yields
 
∂
∂
⋅⋅
−








= −
=
x r x
x
K
r
x K
1
	
(5.9)
so after a perturbation displacing the population from K, the population will return to the equilib-
rium with an approximate dynamics
 
dx
dt
r x
x
x
e
o
r t




= −⋅
→
=
⋅
−⋅	
(5.10)
where xo represents the initial displacement from equilibrium. The time constant T
r
r = /1  is some-
times termed the ‘return time’.
The importance of the logistic model is primarily pedagogical to introduce the subject of popula-
tion dynamics. However, there are cases where it can actually be fitted to laboratory or field observa-
tion, without the need to use more complex models, which will be considered in the following. For 
example, in Figure 5.5 shows a logistic growth model fitted to the data from two populations of the 
same species of snails growing in differing environments. The interesting fact about this exercise is 
that in both cases the growth rate (r) is the same, whereas the carrying capacity (K) varies according 
to the ability of the environment to provide favourable growth conditions.
It is worthwhile to mention that the generality of the logistic equation has made it applicable 
in scientific areas outside ecology, such as in the neurological sciences, where it has been used 
to robustly model the human intracranial pressure–volume relationship. Lakin and Gross (1992) 
developed a logistic fit for the experimentally determined pressure–volume relationship to replace 
previous fits used for this relationship, which were usually exponential in nature. While exponential 
0
2
4
6
8
10
12
14
16
18
0
1000
2000
3000
4000
5000
6000
Time (weeks)
Snails
K = 6000
K = 2500
r = 0.936   K1 = 6000
Logistic model
Data
= 
x1
K1
dx1
dt
r · x1 · 1 −
r = 0.936   K2 = 2500
 = 
x2
K2
dx2
dt
r · x2 · 1 −
FIGURE 5.5  Fitting the logistic model to snail populations grown in differing environments. Calibrating the 
model to the two sets of data yields the same growth rate but differing carrying capacities.

262
Environmental Systems Analysis with MATLAB®
models can provide reasonably good fits to experimental data on the lower reaches of the ­pressure–
volume curve, close to the resting pressure where compliances are relatively large because volume 
changes can be easily accommodated by the intracranial venous system, the exponential fits increas-
ingly deviate from the measured data on the upper reaches of the pressure–volume curve (beyond 
the inflexion point). By contrast, the logistic fit provides excellent agreement with the experimental 
data over the entire (non-fatal) range of interest of the pressure–volume curve. Use of the logistic 
equation also facilitated a clear explanation of the physiological mechanisms that lead to the pres-
sure–volume relationship. In the context of a compartmental mathematical model for the human 
systemic circulatory system, Stevens and Lakin (2005) used logistic functions as mathematical 
representations that provide a smooth connection between a maximum effect and a minimum effect 
for the autonomic and central nervous system reflexes that maintain arterial pressure, cardiac output 
and cerebral blood flow. Indeed, these logistic representations form the heart of the mathematical 
model. The power of the logistic representations is such that, even though the compartment model 
itself is quite simple, it was capable of accurately describing the pressure, volume and flow dynamics 
of the human circulatory system over the full physiological range of human pressures and volumes. 
5.1.2.1  Delayed Recruitment Logistic Growth
Let us now begin to relax some of the conditions under which the logistic model was derived. First 
of all, we may challenge the hypothesis that an individual is reproductive right after birth. If we 
introduce a delay between the birth and the onset of fertility, this implies that the population actu-
ally contributing to growth is not the entire population at time t, but only that portion born at an 
earlier time t −δ, where δ is the time delay required by the newborn individuals to reach the repro-
ductive maturity. For example, only adult insects lay eggs, whereas the larval stage accounts for 
the bulk of the population. In general, delayed growth occurs when the environment affects mostly the 
young age groups and influences their sexual maturity. To account for the presence of the delay, the 
logistic equation (5.6) can be rewritten as
 
dx
dt
r x
x t
K
= ⋅⋅
−
−
(
)






1
δ
	
(5.11)
which has the same equilibrium x
K
=
, but a very different dynamic behaviour. Figure 5.6 shows 
that the delay has a destabilizing effect and may eventually lead to limit cycles, examined in Section 
1.9.4. The stability of the equilibrium around the carrying capacity can again be investigated by 
considering the linearized model around K, where x
K
x
=
+ 
 
dx
dt
r
K
x t
K
x t
K
r
K
x t
x t
K





= ⋅
+ ( )
(
)
−
+
−
(
)






= −⋅
+ ( )
(
)
−
(
)
1
δ
δ = −⋅
−
(
) −
( )⋅
−
(
)
r x t
r x t
x t
K



δ
δ
	
(5.12)
Neglecting the second-order term 

x t
x t
( )⋅
−
(
)
δ , the linearized dynamics around the carrying 
capacity is
 
dx
dt
r x t


+ ⋅
−
(
) =
δ
0	
(5.13)
It might appear that r is the only factor influencing the dynamics, but this is not the case given the 
presence of the delayed population x t −
(
)
δ . In fact, Equation 5.13 has infinite roots, introduced by 
the delay. This becomes evident when studying the associated characteristic equation obtained via 
the Laplace transform

263
Population Dynamics Modelling
 
s x s
r x s
e
s
r e
s
s
⋅( ) + ⋅( )⋅
=
⇒
+ ⋅
=
−⋅
−⋅


δ
δ
0
0	
(5.14)
where s is the complex Laplace variable. Equation 5.14 is a transcendental equation and as such it 
has infinite solutions. However, its exponential term can be approximated by a second-order Taylor 
expansion
 
e
s
s
s
−⋅≅−⋅+
⋅
δ
δ
δ
1
2
2
2
! 	
(5.15)
Substituting this term into Equation 5.14 yields
 
s
r
r
s
2
2
2
21
2
0
+
−
+
=
δ
δ
δ
	
(5.16)
which describes the behaviour of the delay equation (5.13) in the neighbourhood of the equilibrium 
x
K
=
. The root locus of Figure 5.7 describes the location of the two roots as a function of the delay 
δ: for δ
δ
<
1 the two roots are both negative real, but as the delay increases beyond δ1, they bifur-
cate becoming complex conjugate, corresponding to an oscillatory behaviour, which is less and 
less damped as δ increases because their real part decreases, until it vanishes for δ
δ
=
2, where the 
locus crosses the imaginary axis. From there on the real part becomes positive as δ
∞
→
, resulting 
in an unstable behaviour. This is a case in which the linearized approximation fails (see Table 1.7) 
and only numerical simulation can give the real picture of the model behaviour, which is shown in 
Figure 5.6, where the initially (for small δ) damped oscillation turns into sustained oscillations and 
eventually produces a limit cycle.
A thorough review on predator–prey models with discrete delay can be found in Ruan (2009). 
What might appear as a purely mathematical trick is in fact observed in nature, where there is 
ample evidence of reproductive delay inducing periodic oscillations, as in the well-studied case 
of the sheep blowfly (Lucilia cuprina). Periodic fluctuations in this population were observed by 
Nicholson (1954) and were later analysed in the context of complex behaviours of population 
models (May, 1974, 1976b; Mueller and Joshi, 2000). More recently, a fuzzy model was also pro-
posed (Rashkovsky and Margaliot, 2007), and this example is still being analysed in the advanced 
0
10
20
30
40
50
0
5
10
15
20
25
30
35
δ = 3
δ = 2
δ = 1
δ = 0
Time (days)
Population
FIGURE 5.6  Effect of reproductive delay on the dynamic behaviour of the logistic model with delay 
­equation (5.11).

264
Environmental Systems Analysis with MATLAB®
statistical framework (Brillinger, 2013). Other examples of fluctuating populations, for example, of 
Rotifers, are available in the literature (Snell and Serra, 1998; Gonzalez and Descamp-Julien, 2004).
5.1.2.2  Analytical Solution of the Logistic Equation
Equation 5.6 with an initial condition xo can be solved by calculus to yield
 
x t
K
K
x
x e
K
e
K
x
x
o
o
r t
r t
o
o
( ) =
+
−
=
+
=
−




−
−
(
)
1
1
((
)
)
ln
/
with
.
.
β
β
	
(5.17)
We have seen that the main limitation of the logistic equation is that the resulting sigmoid response 
has a fixed inflexion at x
K
=
/2 as a consequence of the linear exponential term β −
(
)
r t. . Many 
alternate expressions for modelling growth have been proposed, each of them derived in different 
contexts and based on differing biological assumptions. Their common endeavour was to add flex-
ibility to the logistic response, in particular making the sigmoid non-symmetrical. These models 
introduce a non-linear exponential term in place of the linear term β −⋅
(
)
r t  so that Equation 5.17 
can be generalized into
 
x t
K
e
t
( ) =
+
( )
1
Φ
	
(5.18)
with the exponential term satisfying the usual conditions for a growth function given by Equation 5.2. 
In particular,
 
1.
2.
d
t
dt
e
t
t
Φ
Φ
( ) <
=
→∞
( )
0
0
lim
	
(5.19)
−4
−3
−2
−1
0
−1.5
−1.0
−0.5
0.0
0.5
1.0
1.5
Real part
Imaginary part
δ = 0.5
δ2 = 1.43
δ1 = 0.591733661
r = 0.7
K = 10
δ → ∞
FIGURE 5.7  Stability analysis of the linearized equation (5.16). For small values of the delay, the roots are 
both negative real, implying exponential stability, until at δ1 they bifurcate in a couple of complex conjugate 
roots, implying an oscillatory behaviour. The other interesting value is δ2 where the conjugate roots are purely 
imaginary, and the model produces a limit cycle. For δ
δ
>
2, the roots have a positive real part, so that the model 
becomes unstable. This graph was obtained with the MATLAB script Go _ root _ locus _ delay.m in 
the ESA _ Matlab\Exercises\Chapter _ 5\Single\Single _ continuous _ time folder.

265
Population Dynamics Modelling
5.1.3  The Gompertez Growth Equation
In the search of a more flexible growth model, the Gompertez model is surely one of the oldest, 
having been conceived as early as 1825(!) to explain certain census data. Today, it is largely used in 
plant growth dynamics for its ability to incorporate the ageing mechanism typical of plant leaves 
(Berger, 1981; Causton and Venus, 1982). Its differential form is
 
dx
dt
r
x
K
x
g
=
⋅⋅
−
(
)
ln
ln
	
(5.20)
which can be solved analytically to yield
 
x t
K e e
r t
( )
(
)
(
)
=
⋅
−
−
β
. 	
(5.21)
It can be seen that the growth rate varies in time as
 
R t
r
K
x t
r
K
Ke
r
K
K
e
g
g
e
g
r
r t
( )
ln
ln ( )
ln
ln
ln
ln
(
)
=
−
(
) =
−(
)
(
)
=
−
+
−
−
−
β
β
.
.
.
t
g
r t
r
e
(
)
−
(
)
(
) =
⋅
β
	
(5.22)
The maximum growth rate can be found by deriving Equation 5.20 with respect to x and setting the 
derivative to zero. 
 
d
dx
dx
dt
r
K
x
rx
x
r
K
r
x
r x



=
−
(
) +
−







= ⋅
−⋅
−⋅
ln
ln
ln
ln
1
⋅
=
1
0
x
	
(5.23)
Solving for x yields
 
x
e
K
max
ln
=
−
(
)
1 	
(5.24)
Figure 5.8 shows some examples of population growth described by the Gompertez equation (5.20) 
with a varying growth coefficient r, whereas the composite growth rate, given by Equation 5.22, is 
0
20
40
60
80
100
120
140
160
180
200
0
1
2
3
4
5
6
7
8
9
10
Time (days)
Population
r = 0.04
20∗ growth rate
x
0.06
xmax
∙
0.08
0.1
FIGURE 5.8  Population growth according to the Gompertez equation (5.20) for several values of the growth 
rate r. As required, the maximum growth rate (dots) is now flexible.

266
Environmental Systems Analysis with MATLAB®
shown by the dashed lines. The Gompertez dynamics is based on the assumption that growth relents 
as time progresses as a result of ageing. In other words, the exponential term in Equation 5.22 
expresses the fact that the reproductive capability decreases as the average age of the population 
increases.
5.1.4  The Richards Growth Equation
Another flexible sigmoid model used to describe the vegetation growth from a single leaf to a whole 
plant (Causton and Venus, 1982) is due to Richards, which can be viewed as a further generalization 
of the logistic growth function. Its differential form is
 
dx
dt
x r
n
x
K
r
r
n
n
r
r
=
⋅
−






1
	
(5.25)
With respect to the logistic equation, it introduces a third parameter nr
(
) that controls the point of 
inflexion xmax
(
), where the maximum growth rate occurs. Applying the same procedure used for the 
Gompertez model, the point of inflexion is determined as
 
x
K
nr
nr
max
1/
1
=
+
(
)
	
(5.26)
Of course, Equation 5.25 reduces to the logistic for n =1, but otherwise it is able to anticipate or 
delay the population development, because the point of inflexion depends on K and nr. Figure 5.9 
shows the influence of the growth coefficient rr on the growth, with the inflexion point remaining at 
the same population level determined by Equation 5.26, whereas Figure 5.10 shows the effect of the 
coefficient nr in delaying the population development. Thus, the Richards and the Gompertez mod-
els have opposite effects, in the sense that while growth decreases with ageing in the Gompertez 
model, in the Richards model mature populations have a higher growth rate.
An application of the Richards model to the growth of the algae Selenastrum capricornutum is 
described later in Section 8.6. This microalga, now renamed Raphidocelis subcapitata, has a moon-
shaped body of length between 8 and 14 µm, and a width between 2 and 3 µm. It is considered as a 
0
10
20
30
40
50
60
0
5
10
15
20
25
Time (days)
Population
K
0.6
0.9
1.2
10∗ growth rate
x
xmax
∙
xmax = 
∙
r = 0.3
(1 + nr)1/nr
FIGURE 5.9  Population growth according to the Richards equation (5.25) for several values of the growth 
rate rr, while K and nr, which define the inflexion point (grey dots) through Equation 5.26, are kept constant.

267
Population Dynamics Modelling
primary bio-indicator species to assess the levels of nutrients or toxic substances in freshwater envi-
ronments. The calibrated Richards model is compared to S. capricornutum growth data in Figure 8.43.
5.1.5  The Bertalanffy Growth Equation
This model (Von Bertalanffy, 1969) is yet another extension to a non-symmetric sigmoid and has 
the differential form
 
dx
dt
r
x
k
x
b
n
d
b
=
⋅
−
⋅	
(5.27)
The hypothesis underlying this model equation is that the population dynamics is the net result 
of growth r
x
b
nb
⋅
(
) and decay k
x
d ⋅
(
), both related to the biomass x( ). This model was originally 
derived for bacterial populations in which nutrient uptake, and therefore growth, is assumed to be 
proportional to bacterial surface. For this reason, the exponent should theoretically be in the inter-
val 2/3 ≤ nb ≤ 1. The decay term is assumed to be density-dependent, that is, proportional to the 
biomass itself. The carrying capacity does not appear explicitly in the Bertalanffy model, but it can 
be computed from the equilibrium by setting x = K, to yield
 
0 =
⋅
−
⋅
r
K
k
K
b
n
d
b
	
(5.28)
which can be solved for the decay coefficient kd
 
k
r
K
d
b
nb
=
⋅
−
(
)
1 	
(5.29)
or for the growth rate factor rb
 
r
k
K
b
d
nb
=
−
(
)
1 	
(5.30)
As a concluding remark on these single-species growth models, their evolution towards the equi-
librium, represented by the carrying capacity, and their growth rate along this trajectory are shown 
in Figure 5.11.
0
20
40
60
80
100
120
0
2
4
6
8
10
Time (days)
Population
nr = 2
10∗ growth rate
x
xmax
∙
nr = 3
nr = 4
nr = 5
nr = 6
FIGURE 5.10  Population growth according to the Richards equation (5.25) for several values of the coef-
ficient nr, which has the effect of delaying the growth and of changing the inflexion point (grey dots).

268
Environmental Systems Analysis with MATLAB®
In this figure, parameters were adjusted to reach the same steady state for all models x
K
=
(
), and 
the increased flexibility with respect to the logistic equation introduced by the additional parameters 
in the other models is evident. The maximum growth rate of the logistic is symmetric with respect 
to the population, occurring at xmax
2
=
/
K
, whereas for the Gompertez equation the maximum is 
reached for lower densities, that is, for younger populations. In fact, this model accounts for the 
diminished reproductive capacity of ageing populations. The Bertalanffy model shares the character-
istic of anticipating the maximum growth rate, whereas the Richards model has an opposite behav-
iour, shifting the maximum growth rate towards a higher (more mature) population. The Simulink® 
model used to produce the graphs of Figure 5.11 is shown in Figure 5.12, and the MATLAB® launch 
script is listed in Box 5.1.
5.1.6  A Final Appraisal of the Logistic Equation
The Bertalanffy model is appealing because it separates growth and decay in the population dynam-
ics of simple organisms. In fact, that model was originally developed to describe microbial growth. 
This consideration might lead us to criticize the logistic model for not having a similar birth-­and-
death structure. In fact, however, this is not so, as can be easily demonstrated as follows. Let us 
consider the birth and death processes as population-dependent, with the birth rate decreasing as 
the population grows, remembering that the carrying capacity can be viewed as a limit to growth. 
The death rate, on the other hand, is increased by food scarcity or, more generally, by a crowding 
effect. Thus
 
Birth process:
Death process:
b
p
x
d
p
x
−
⋅
+
⋅
1
2
	
(5.31)
0
10
20
30
0
1
2
3
4
5
Time (days)
Population
0
1
2
3
4
5
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
Population
Growth rate
Logistic
Gompertez
Richards
Bertalanﬀy
(a)
(b)
FIGURE 5.11  Comparison of single-species growth functions. (a) shows the evolution of the popula-
tion towards its equilibrium (carrying capacity), whereas (b) compares the growth rates as the population 
evolves along the trajectories shown in (a). These graphs were obtained with the MATLAB script Growth_
Compare.m in the ESA_Matlab\Exercises\Chapter_5\Single\Single_continuous_time 
folder.

269
Population Dynamics Modelling
Because the model must (dynamically) balance these two processes, the growth equation will be
 
dx
dt
x
b
p
x
d
p
x
x
b
d
x p
p
x b
d
x
=
⋅
−
⋅
(
) −
+
⋅
(
)


=
⋅
−
−
+

=
−
(
)
−
1
2
1
(
)
(
1
2
p
p
b
d
1
2)
+
−




	
(5.32)
Now, defining the new coefficients
 
r
b
d
K
b
d
p
p
=
−
=
−
+
and
1
2
	
(5.33)
we recover the logistic equation
 
dx
dt
r x
x
K
= ⋅⋅
−




1
	
(5.34)
This allows us to view the logistic model in a new light, particularly by considering that the two 
parameters r and K are not independent from one another, but can be viewed as balancing the opposite 
forces of birth and death. In this sense, r
b
d
=
− represents the net growth rate at the very early stage 
of population development x
K

(
), and of course, for a population to grow, it must be b
d
>
. The 
structuring of K is more complex as it includes the density-dependent parameters p1 and p2, which 
determine the sensitivity of the population to the crowding effect.
An example of a usable birth-and-death model is that employed by the International Whaling 
Commission (Morales-Zárate et al., 2004; Basille et al., 2008; Freeman, 2008) to estimate the whale 
population around the globe
Logistic model
Richards model
Richards_pop
x_R
Bertalanﬀy_pop
x_B
Bertalanﬀy model
Pop_Bertalanﬀy
rate_B
To workspace 3
Growth fun Bertalanﬀy
Pop_Richards
rate_R
To workspace 1
Growth fun Richards
Gompertez model
Growth fun Gompertez
Gompertez_pop
Pop_Logistic
Pop_Gompertez
Logistic_pop
rate_L
rate_G
x_L
x_G
Logistic growth fun
To workspace 2
To workspace
r∗u(1)∗(1−u(1)/K)
rg∗u[1]∗(log(K)−log[1]))
u(1)∗(rr/nr)∗(1−(u(1)/K∧nr)
rb∗u(1)∧nb−kd∗u(1)
1/s
s1
1 −
 s
1 −
 s
FIGURE 5.12  Simulink model to simulate the four single-species growth models described in Figure 5.11. 
The launch MATLAB script is listed in Box 5.1, while the Simulink model is Growth _ Models.mdl in the 
ESA _ Matlab\Exercises\Chapter _ 5\Single\Single _ continuous _ time folder.

270
Environmental Systems Analysis with MATLAB®
 
dx
dt
x t
p
q
x t
K
k
x t
z
d
= ( )⋅
+
−
−
(
)













−
⋅( )
1
δ
	
(5.35)
where the parameters have a clear biological meaning:
p is the pregnancy rate
q is the probability of survival to the adult stage
z is the sensitivity to the depensation effect
δ is the time required to reach the reproductive maturity (6 years for the blue whale, 25 years for 
the sperm whale)
5.2  SINGLE-SPECIES DISCRETE-TIME POPULATION MODELS
We are now prepared to challenge two of the basic assumptions under which the continuous-time 
models were developed, that is, the continuous reproduction hypothesis and (save for the logistic 
model with delay) the lack of time lag between birth and reproductive maturity. These assumptions 
may become crucial if the population is sparse, or the developmental lag is a considerable frac-
tion of the mean lifespan. In many cases, a discrete-time representation of growth may be more 
BOX 5.1  LAUNCH MATLAB SCRIPT FOR THE COMPARISON 
OF THE FOUR SINGLE-SPECIES CONTINUOUS-TIME 
POPULATION MODELS DESCRIBED IN SECTION 5.1
xo=0.01; % Initial population
K= 5; % Common Carrying capacity
nr=1.5; % Richards exponent
nb=0.667; % Bertalanffy exponent
kd=0.6436; % Bertalanffy decay rate
r=0.5; % Logistic growth rate
rg=0.35; % Gompertez growth rate
rr=0.5; % Richards growth rate
rb=1.1; % Bertalanffy growth rate
tfin=30; % Simulation horizon
figure(1)
set(1,‘Position’,[683 493 784 464])
% Simulate models
[t,x,y]=sim(‘Growth_Models’,tfin);
% Plot results
subplot(121)
plot(t,x_L,‘b’,t,x_G,‘:b’,t,x_R,‘--b’,t,x_B,‘-.b’)
set(gca,‘FontName’,‘Arial’,‘FontSize’,14)
xlabel(‘time (days)’)
ylabel(‘population’)
subplot(122)
plot(x_L,rate_L,‘b’,x_G,rate_G,‘:b’,x_R,rate_R,‘--b’,x_B,rate_B,‘-.b’)
set(gca,‘FontName’,‘Arial’,‘FontSize’,14)
xlabel(‘population’)
ylabel(‘Growth rate’)
legend(‘Logistic’,‘Gompertez’,‘Richards’,‘Bertalanffy’,‘location’,‘north’,
‘orientation’,‘horizontal’)

271
Population Dynamics Modelling
realistic, especially with non-overlapping generations. Insects are an example here, as their adult 
life is ­relatively short and mainly devoted to egg laying. When the next generation comes to life, 
the previous one would have already died, so they are non-overlapping. On the other hand, in many 
species, generations do overlap because their biology is such that individuals remain fertile for a 
considerable fraction of their lifespan. Discrete-time growth models should not be regarded only as 
approximation of continuous-time processes. In many ways, they portray more closely what actually 
happens in nature, because they easily allow for the inclusion of the time lag required by newborn 
individuals to reach the reproductive stage. In addition to explaining some naturally observed behav-
iours, discrete-time growth equations have also been studied for their complex behaviour, which is 
not paralleled by their continuous-time counterparts (May, 1974, 1976, 2001; Turchin, 2003; Solé 
and Bascompte, 2006).
5.2.1  The Discrete-Time Logistic Equation
To develop a discrete-time growth model, consider again the logistic growth Equation 5.6 assuming 
that the population is observed only at discrete-time sampling intervals h so that the time derivative 
can be approximated with a finite difference
 
dx
dt
x t
h
x t
h
r x t
x t
K
≅
+
(
) −( ) = ⋅( )⋅
−( )






1
	
(5.36)
Considering the index k ∈
+
 in place of the physical sampling times t t
h t
h
,
,
,
+
+ 2  as in Equation 
1.26, yields the discrete-time model
 
x
x
x
h r
h r
K
k
k
k
+ =
⋅
−




= +
⋅
=
⋅



1
1
1
α
β
α
α
β
with
	
(5.37)
This discrete representation can be further simplified by introducing the new variable z
x
= ( / )
β α  to 
yield
 
z
z
z
k
k
k
+ =
⋅
⋅
−
(
)
1
1
α
	
(5.38)
In spite of its innocent look, Equation 5.38 has received considerable attention for its varied and 
surprising behaviour, as thoroughly investigated by May (1974, 1976a) who studied its stability with 
the graphical tools of Section 1.9.6. As already discussed in Chapter 1, the stability of Equation 5.38 
depends on the magnitude of the Jacobian at the equilibrium, which can be computed by setting 
z
z
z
k
k
+ =
=
1
 
z
az
z
z
=
⋅
−
(
) ⇒
=
−
1
1
α
α 	
(5.39)
producing the Jacobian at z  as
 
d
dz
z
z
z
α
α
α
α
α
⋅⋅
−
(
)


=
−
−



=
−
1
1
2
1
2
	
(5.40)
The linearized equation around z  is therefore
 


z
z
k
k
+ =
−
(
)
1
2
α
	
(5.41)

272
Environmental Systems Analysis with MATLAB®
The equilibrium requires that
 
−<
−
< ⇒<
<
⇒
<
<
<
<
1
2
1
1
3
1
2
2
3
α
α
α
α
monotonicresponse
oscillatoryresponnse



	
(5.42)
For α in the stability region, the linearized analysis is confirmed by the first two plots of Figure 5.13 
showing that, depending on the value of α, the response changes from monotonic (a) to a damped 
oscillation (b), as predicted by Equation 5.42. For α > 3, the linearized analysis fails to explain the 
model behaviour, which in fact exhibits a limit cycle as soon as α exceeds 3, eventually moving 
towards chaos when α is further increased.
Another aspect of Equation 5.38 studied by May (1976a) is the so-called period-doubling, which 
can be studied by rewriting this equation in two successive steps
 
z
z
z
z
z
z
k
k
k
k
k
k
+
+
+
+
=
⋅
−
(
)
=
⋅
−
(
)
1
2
1
1
1
1
α
α
	
(5.43)
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
(a)
α = 1.75
(b)
α = 2.80
zk+1
zk
0.0
0.2
0.4
0.6
0.8
1
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
(d)
α = 3.90
(c)
α = 3.20
zk+1
zk
zk+1
zk
zk+1
zk
FIGURE 5.13  The behaviour of the normalized discrete-time logistic equation (5.38) is influenced by the 
value of α, ranging from a monotonic response (a), to damped oscillations (b), to a limit cycle (c), and eventu-
ally to chaos (d). These graphs were obtained with the MATLAB script Go _ Logistics _ dt.m in the 
ESA _ Matlab\Exercises\Chapter _ 5\Single\Single _ discrete _ time folder.

273
Population Dynamics Modelling
Substituting the first equation into the second and eliminating the intermediate variable zk+1 yields 
the two-step-ahead discrete-time equation
 
z
z
z
z
z
k
k
k
k
k
+ =
−
−
(
)
(
)
−
(
)
2
2 1
1
1
α
α
	
(5.44)
whose equilibrium can be found by solving the steady-state equation
 
α
α
α
α
z
z
z
3
2
2
2
1
1
1
0
−
+
+
(
) −+
= 	
(5.45)
Equation 5.45 has three roots, one of them being the same as for the one-step-ahead equation, that is, 
z1
1
=
−
(
)
α
α
/ , whereas the other two roots are the solutions of the second-order algebraic equation
 
α
α
α
z
z
2
1
1
1
0
−
+
(
) +
+



= 	
(5.46)
For α > 3, a series of bifurcations of the steady state appear, first by generating a limit cycle that 
oscillates between two differing steady states. As α increases, more bifurcations occur, and the 
period doubling becomes more and more frequent until it turns into chaos, as shown in Figure 5.14.
The progression of steady states as α increases, better known as bifurcation diagram or the 
‘Feigenbaum bubbles’, is shown in Figure 5.15.
Each dot in the graph represents one steady state, recorded after simulating a sufficiently long 
growth period. In the first part, there is only one equilibrium, and hence a single dot appears. The 
first bifurcation occurs when the system oscillates between two values (limit cycle), and then at the 
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
zk
zk
zequil = 0.285
α = 1.400
zequil = 0.629
α = 3.000
(a)
(b)
zk+1
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
zequil = 0.844
α = 3.449
zequil = 0.922
α = 3.800
(d)
(c)
zk
zk+1
zk
zk+1
zk+1
FIGURE 5.14  The behaviour of the two-step-ahead normalized discrete-time logistic equation (5.44) is 
influenced by the value of α, ranging from a monotonic response (a), to damped oscillations (b), to a limit cycle 
(c), eventually to chaos (d). These graphs were obtained with the MATLAB script Go _ Logist _ dt _
period2.m in the ESA _ Matlab\Exercises\Chapter _ 5\Single\Single _ discrete _ time 
folder.

274
Environmental Systems Analysis with MATLAB®
second bifurcation the stationary oscillation involves four points, and so on until chaos ensues: there 
is no proper steady state, and the population fluctuates all over the place’. May (1976a) showed that 
for 3
1
6
<
< +
α
 a limit cycle develops, then for α between 3.44949 and 3.54409 there is a sus-
tained oscillation among four values. As α increases, each period of oscillation bifurcates into two 
more periods, so that the population jumps among 8, 16, 32,…, 2n equilibria, until for α > 3.56995 
the behaviour become chaotic. The ratio between the lengths of two successive such bifurcation 
intervals approaches the Feigenbaum constant δ = 4.66920 (Feigenbaum, 1978).
5.2.2  Other Discrete-Time Population Growth Equations
Other discrete-time population models have been proposed in the context of natural resources man-
agement (Ginzburg and Golemberg, 1985; Begon and Mortimer, 1986; Levin et al., 1989; Akçakaya 
et al., 1999). The general form of these model can be written as
 
x
x
R x
k
k
k
+ =
⋅(
)
1
	
(5.47)
where the growth function R, itself a function of xk, can include several sources of population fluc-
tuations, such as environmental variability due to climate or habitat changes, as well as intrinsic 
variability such as variations in the reproductive rate. The most popular of such models are the 
Beverton–Holt model (also known as Contest), which has been used for fishery management,
 
x
R
K
R
x
x
K x
k
k
k
k
+ =
⋅
⋅
−
+
⋅
1
max
max
	
(5.48)
and the Ricker model (also known as Scramble), which has been applied to model wild populations,
 
x
x
R
k
k
x
K
k
+
−
(
)
=
⋅
1
1
max
(
/
) 	
(5.49)
These two models exhibit radically different behaviours, and their growth rates R xk
(
), with deeply 
differing meanings and values, are plotted in Figure 5.16.
Both models have their equilibrium at the carrying capacity K, but whereas the Contest model 
(Equation 5.48) reaches its steady state monotonically, the Ricker model (Equation 5.49) can 
Second period doubling
First period doubling
Chaotic behaviour
2.5
0.0
0.2
0.4
x
0.6
0.8
1.0
3.0
3.5
4.0
r
FIGURE 5.15  Bifurcation of equilibria of the discretized logistic equation (5.38) as a function of the 
growth rate r. The proliferation of period doublings eventually leads to a chaotic behaviour. This graph was 
obtained with the MATLAB script Feigenbaum_Logistic.m in the ESA_Matlab\Exercises\
Chapter _ 5\Single\Single _ discrete _ time folder.

275
Population Dynamics Modelling
produce several strikingly different behaviours, ranging from monotonic, oscillatory, limit cycle to 
eventually chaotic, in much the same way as the discrete-time logistic equation.
The common feature of these two models is that the growth factor R xk
(
) in Equation 5.47 tends 
to unity as the population tends to the equilibrium. This is always true for the Beverton–Holt model, 
whereas for the Ricker model this holds only if the growth factor is such as to produce a mono-
tonic or damped oscillatory response. The behaviour of the Ricker model (Equation 5.49) can be 
studied with the same graphical approach used for the discrete-time logistic. Figure 5.17 shows the 
0
10
20
30
40
0
1
2
3
4
5
Population
Growth rate
Ricker
Beverton–Holt
K = 25
FIGURE 5.16  Comparison of population-dependent growth rates of the Ricker and Beverton–Holt discrete-
time models. In both models the growth rate approaches unity as the population reaches the carrying capacity, 
in this case K = 25.
(a)
Damped oscillatory response
Rmax = 6.80
(c)
Chaotic response
Rmax = 15.90
(b)
Limit cycle response
Rmax = 8.00
0
20
40
60
0
10
20
30
40
50
60
0
10
20
30
40
50
0
10
20
30
40
50
0
10
20
30
40
50
0
10
20
30
40
50
zk
0
5
10
15
20
5
10
15
20
25
30
Time
Population
0
5
10
15
20
5
10
15
20
25
30
35
Time
Population
0
5
10
15
20
0
10
20
30
40
50
60
Time
Population
zk+1
zk
zk+1
zk
zk+1
FIGURE 5.17  Behaviour of the Ricker model (Equation 5.49) depending on the value of the growth factor Rmax. 
The upper graphs show the z z
k
k
,
1
+
(
) plane for the equilibrium analysis, whereas the lower graphs show the cor-
responding time portrait. These graphs were obtained with the MATLAB script Go_Ricker.m in the ESA_
Matlab\Exercises\Chapter_5\Single\Single_discrete_time folder.

276
Environmental Systems Analysis with MATLAB®
graphical equilibrium analysis (upper row) and the corresponding time response of this model as 
Rmax varies, producing a damped oscillatory response (a), a limit cycle (b), and a chaotic behaviour 
as Rmax increases. 
Like the discrete-time logistic model, the Ricker model has the period-doubling property, as 
shown in Figure 5.18, that was generated in the same way as Figure 5.15 and presents a similar 
aspect, with period doubling becoming more and more frequent oscillations until eventually giving 
rise to chaos.
5.2.3  Introducing Uncertainty as Demographic Variability
So far, we have assumed that the model parameters remain constant throughout the simulation 
horizon, but in nature several factors, such as climate and habitat changes, human intervention, 
influence the reproduction. This affects the population growth, which can be decomposed into the 
sum of a ‘structural’ species-dependent base growth factor R plus a climatic variation ∆R, as shown 
in Figure 5.19.
As an example, the growth rate of certain Shrews (Crocidura russula) inhabiting Swiss gardens 
was found to be influenced by several external factors (Akçakaya et al., 1999)
 
∆R
P
S
T
T
s
w
=
⋅
−
⋅
+
⋅
−
⋅
0 73
0 78
0 50
0 83
.
.
.
.
	
(5.50)
where:
P is the spring monthly precipitation
S is the winter snowfall
Ts is the average monthly temperature in summer
Tw is its winter counterpart
It is not easy to incorporate such fluctuations into the growth mechanism, unless the ­environment–
species interactions are analysed in detail on a case-by-case basis. Here, it suffices to introduce 
the uncertainty on population development as a generic demographic variability, leaving it to spe-
cific studies to establish the precise relationship between the cause (environmental influence) and 
Second period
doubling
First period
doubling
Chaotic behaviour
z
Rmax
5
0
1
2
3
4
5
10
15
20
FIGURE 5.18  Period doubling bifurcations, eventually leading to chaos, in the Ricker model (Equation 5.49). 
This graph was obtained with the MATLAB script Feigenbaum _ Ricker.m in the ESA _ Matlab\
Exercises\Chapter _ 5\Single\Single _ discrete _ time folder.

277
Population Dynamics Modelling
the effect (growth rate variations). Let us consider the Beverton–Holt model, which is ­certainly 
‘tame’ enough to withstand this structural extension, and let us consider that, according to Equation 
5.47, the growth rate can be viewed as the ratio between the population at two successive sam-
pling times, that is,
 
R t
x
x
k
k
( ) =
+1	
(5.51)
Figure 5.16 has already shown that the growth rates of both the Ricker and the Beverton–Holt 
models tends to unity as the population approaches its carrying capacity, but now we want to struc-
ture the growth rate R a bit further, assuming that, in addition to its deterministic value given by 
Equation 5.48 (Beverton–Holt) or by Equation 5.49 (Ricker), the growth rate of Equation 5.51 also 
has a random part to model the demographic variability, namely
 
R t
R t
v t
v t
N
p
( ) =
( ) + ( )
( ) =
(
)
with
0,σ
	
(5.52)
In this representation, v t( ) is the random component, modelled as a Gaussian white noise with zero 
mean and σ p standard deviation. Figure 5.19 shows the effect of demographic variability in caus-
ing fluctuations around the steady-state population level (carrying capacity) and the correspond-
ing variations in the growth rate around the unit value reached at steady state. The characteristics 
of a fluctuating population can be analysed from a statistical viewpoint, considering the distribu-
tion of the mean values of the population after the carrying capacity has been nominally reached. 
Furthermore, if we know which factor has caused the demographic variability, we could attempt 
to establish a relationship between the statistical distribution of the driving factor (cause) and the 
1.2
0
20
40
60
80
100
120
1.1
1.0
Population
Time
Growth rate
Time
Unperturbed growth rate
Carrying capacity
(a)
(b)
0
50
150
100
0
50
150
100
FIGURE 5.19  The effect of demographic variability. In (a), the population fluctuates around its carrying 
capacity. At the same time, the growth rate fluctuates around the steady-state value (b). The dashed lines 
represent the noise-free ideal situation.

278
Environmental Systems Analysis with MATLAB®
statistic of the steady-state population (effect). This study involves a Monte Carlo approach, where a 
large number of simulations are performed, each with a perturbed parameter drawn from a random 
process with known characteristics, as shown in Figure 5.20. An example of this Monte Carlo analy-
sis is given in Figure 5.21, in which (a) shows the histogram of the fluctuating populations between 
time 80 and 160, whereas (b) shows the cumulative frequency distribution with the 5th and 95th 
percentiles, that can be related to the probability of extinction or explosion.
0
20
40
60
80
100
120
140
160
Population
Time
x → K
x + 1.96 × σp
x −1.96 × σp
σp
100
80
60
40
20
0
K
po
σv
FIGURE 5.20  A possible link between the observed demographic variability around the steady state and the 
distribution of the perturbing factor around its nominal value po. After performing a large number of simula-
tions (10,000) with perturbed growth factor, the population confidence bands are traced for x
p
±
⋅
1.96 σ , with 
the thick black line representing the average population. The inset hints at the possibility of establishing a 
relationship between the variability of p and that of the steady-state population.
95
100
105
0
0.5
1
Population
Cum. freq.
(b)
97.64
102.37
Extinction
Explosion
0.95
0.05
Pop < 5%
Pop > 95%
95
100
105
0.0
0.05
0.10
0.15
Population
Rel. freq.
K
(a)
FIGURE 5.21  Statistical analysis of the previous Monte Carlo simulations. (a) shows the histogram of the 
fluctuating populations between time 80 and 130, whereas (b) shows the cumulative frequency distribution 
with the 5th and 95th percentiles, which can be related to the probability of extinction or explosion.

279
Population Dynamics Modelling
5.2.4  Age-Structured Populations
We are now going to challenge another initial hypothesis on growth modelling, the one claiming 
that the all the ­individuals of a population have the same age, or rather that age is not a distinc-
tive feature. Practical observations contradict this assumption and, in particular, it is clear that 
fecundity is unevenly distributed across the individual’s lifespan, with an infertile period from 
birth to sexual maturity, and a declining reproductive capacity caused by ageing. The initial 
idea of dividing the individuals of a population into age groups was initially proposed by Leslie 
(1945), and age-­structured population models are now widely used in ecological studies (Begon 
and Mortimer, 1986; Pastor, 2008). By necessity, age-structured models have a discrete-time 
representation because they consider a finite number of age classes, and therefore the transition 
from one class to the next is timed accordingly. In the Leslie model, the population at time k Xk
(
) 
is divided into n age groups
 
Xk
k
k
k n
T
x
x
x
= 

,
,
,
1
2

	
(5.53)
where the first class includes all the newborns that survive to enter the second class. The transition 
from one age group to another is governed by the graph of Figure 5.22: the fraction of individu-
als from the generic age-group xk i,  at time k that survive until the next time σi
(
) contribute to the 
generation of newborns (first class) with their fertility rate fi
( ). Of course the model considers the 
female population.
So the model describing the transition from one age class to the next and the generation of new-
borns is
 
x
f x
f x
f x
f x
x
x
k
k
k
k
n
k n
k
i
i
k i
+
+
−
=
+
+
+
=
11
0 1
1
0
2
2
0
3
3
0
1
1
,
,
,
,
,
,
,
σ
σ
σ
σ
σ

−



1
	
(5.54)
where:
σ0 is the survival rate of the newborns
fi is the fertility of the ith class
Equation 5.54 can be written in compact matrix notation as
 
X
M X
k
k
+ =
⋅
1
	
(5.55)
Survival
σi
Fertility
fi
Time k
Time k + 1
xk,i
xk+1, i+1
xk+1,1
FIGURE 5.22  Evolution of the generic ith age group in the Leslie model. The survivors of the ith class at 
time k contribute to the newborn in the next time step k + 1.

280
Environmental Systems Analysis with MATLAB®
where the system matrix is structured as
 
M =













−
σ
σ
σ
σ
σ
σ
σ
σ
0 1
0
2
0
3
0
1
2
1
0
0
0
0
0
0
0
0
0
0
f
f
f
fn
n
n










	
(5.56)
The survival rates can be estimated as the ratio between the individuals in the i-th class at the cur-
rent time (k) and the individuals in the younger class (i-1) at the previous time (k-1), that is,
 
σi
k i
k
i
x
x
i
n
=
=
−
−
−
,
,
,
,
1
1
1
1

	
(5.57)
The elements in the first row of the matrix in Equation 5.56 are the product of the fraction of new-
borns produced by each age group fi
( ) multiplied by the survival rate σ0
(
) of the first age group. 
The last row also needs some explanation, being different from the previous ones. By matrix multi-
plication, the last model equation would read
 
x
x
x
k
n
n
k n
n
k n
+
−
−
=
⋅
+
⋅
1
1
1
,
,
,
σ
σ
	
(5.58)
which makes sense if we consider the last age group as an open-ended group in the sense that it 
includes the individuals of age n or more, up to an indefinite upper limit. Therefore, in Equation 5.58 
the first term represents the survival rate of the individuals previously in the n − 1 age group, 
whereas the second term accounts for the individuals who were already in the nth class at the previ-
ous time (k) and have survived (in the same class of course) until the next time (k + 1). In this way, σn 
may be regarded as a true survival rate within the nth age group. An alternative option is to consider 
the nth age group just as a sink that receives the surviving individuals from the (n − 1)th group, in 
which case σn = 0. This assumption will be used throughout Section 5.2.4.
The practical implementation of Equation 5.57 is not as straightforward as it may appear, because 
the population varies, and therefore the ratios may fluctuate. For this reason, it is important to per-
form a census survey at a time when the population can be assumed to be fairly stationary. However, 
the problem of reliably sampling a population, especially in the wild, poses major problems to field 
ecologists, and has given rise to many elaborate techniques that are used to estimate populations in 
the field (Krebs, 1998, 2009; Morris and Doak, 2002; Magurran, 2004).
5.2.4.1  Stable Age Distributions
In age-structured models, two concepts have a special importance: the stability of the population as 
a whole, and the stability of the age distribution. In particular, one may ask whether there are stable 
age distributions that guarantee the global stability (meaning that the total number of individuals 
of the population is stable). These two concepts are interrelated, as will be shown next. The age-
structured model (Equation 5.55) is linear, so we can use the methods illustrated in Chapter 1 to 
study its stability, which depends on the eigenvalues of the matrix M of Equation 5.56, that can be 
computed by solving the matrix equation
 
det
det
M
I
−
(
) =
−
−
−
−
λ
σ
λ
σ
σ
σ
σ
λ
σ
λ
σ
0 1
0
2
0
3
0
1
2
1
0
0
0
0
0
0
0
f
f
f
fn
n








−
















=
λ
0	
(5.59)

281
Population Dynamics Modelling
which yields the nth-order polynomial equation
 
λ
λ
σ
λ
σ σ
σ σ σ
σ
n
n
n
n
n
f
f
f
−
−
−
−
=
−
−
−
1
0 1
2
0
1 2
0
1
2
1
0


	
(5.60)
Defining pi
i
=
−
σ σ
σ
0
1
1

, Equation 5.60 can be written as
 
λ
λ
λ
λ
n
n
n
n i
i
i
n
n
p f
p f
p f
p f
−
−
−
−
−
=
−
−
−
1
1 1
2
2
2
0


	
(5.61)
so that its eigenvalues are functions of the survival and fertility rates. The Perron–Frobenius theo-
rem (see, e.g., Gantmacher, 2000) states that a non-negative irreducible matrix has a dominant, real 
and positive, eigenvalue λ1
(
) that is a simple root of the characteristic equation, and its module is 
larger than that of any other eigenvalue. Furthermore, all of the components of the corresponding 
eigenvector are positive. This theorem provides us with the important result that the asymptotic 
evolution of the population as a whole depends only on λ1, that is,
 
lim
k
k
k
o
k
c
→∞
=
⋅
→
X
M
X
v
λ1 	
(5.62)
where the constant c depends on the initial population X0
(
). Asymptotically, the evolution of the 
population and its age-class distribution separate into the following facts:
	
1.	The whole population grows with a rate given by λ1
 
X
X
k
k
k
k
i
k
x
x
+
→∞
+
=
⋅
⇒
=
1
1
1
1
1
λ
λ
lim
,
,
	
(5.63)
	
2.	The asymptotic age-class distribution is determined by the eigenvector v associated with λ1
 
lim
,
,
k
k
k i
i
i
i
x
x
v
v
→∞
+
+
=
=
1
1
1
1
λ
σ 	
(5.64)
A simple, yet instructive, application of the Perron–Frobenius theorem to the Leslie matrix 
is the so-called Fibonacci’s rabbits example. Consider a rabbit population with the following 
characteristics:
•	 The population is divided into three age groups
•	 Each rabbit survives exactly three classes
•	 Each female generates one female while in the first age-class and another one while in the 
second class
•	 The initial population includes one female
According to these definitions, the Leslie matrix for the rabbit example is
 
M =










1
1
0
1
0
0
0
1
0
	
(5.65)
whose characteristic equation is
 
λ λ
λ
2
1
0
−
−
(
) = 	
(5.66)

282
Environmental Systems Analysis with MATLAB®
The dominant eigenvalue is λ1
1
5 2
1 618
=
+
=
(
)
.
/
, which is precisely the Fibonacci ratio
 
F
F
F
F
F
F
r
k
k
k
k
k
=
=
+
+
−
−
1
1
2
with
	
(5.67)
and in fact the population grows with rate
 
lim
.
,
,
k
k
i
k
x
x
→∞
+
=
=
1
1
1
1 618
λ
	
(5.68)
as shown in Figure 5.23.
Now let us reconsider Equation 5.63 to better understand the asymptotic behaviour of the Leslie 
model. Because the evolution of the population is ultimately governed by the dominant eigenvalue, 
that is, Mv
v
= λ1 , we can write 
 
σ
σ
σ
σ
σ
σ
σ
0 1
0
2
0
3
0
1
2
1
0
0
0
0
0
0
0
0
0
0
f
f
f
fn
n








−
















×
















=
















v
v
v
v
v
v
v
v
n
n
1
2
3
1
1
2
3


λ
	
(5.69)
where v = 

v
vn
T
1
 is the stationary age distribution. Expanding Equation 5.69 row-wise yields
 
σ
σ
σ
λ
σ
λ
0 1 1
0
2 2
0
1 1
1
1
1
1
2
f v
f v
f v
v
i
v
v
i
n
n n
i
i
i
+
+
+
=
=
=
=
−
−

…
for
for
,
, 	
(5.70)
The components of the second equation can be expressed in terms of v1
 
σ
λ
σ
λ
σ
λ
σ σ
λ
σ σ
σ
i
i
i
i
i
v
v
v
v
v
v
v
v
−
−
−
=
⇒
=
=
=
=
1
1
1
2
1 1
1
3
2 2
1
1
2 1
1
2
1
2
1
;
;
,
…

λ1
1
1
2
i
v
i
n
−
= ,
,
…
	
(5.71)
1
2
3
0
2
4
6
8
10
12
14
16
18
0
200
400
600
800
1000
Generation
Leslie model for the Fibonacci rabbits
Age group
Individuals in each group
FIGURE 5.23  Evolution of the Fibonacci rabbit population.

283
Population Dynamics Modelling
Defining the quantities
 
p
i
n
p
i
i
=
=
=
−
σ
σ
1
1
1
2
1


,
,
	
(5.72)
so that
 
v
p v
i
i
i
=
−
λ1
1
1	
(5.73)
and substituting Equation 5.71 into Equation 5.70 yields
 
σ
λ
λ
λ
λ
0 1
2
2
1
1
1
1
1
1
1
f
p f
p f
p f
n
n
n
i
i
i
i
n
+
+
+
=
⇒
=
−
−
=∑

	
(5.74)
The stationary distribution in the age groups can be found by again using Equation 5.73 as
 
π
σ
σ
λ
σ λ
σ σ λ
i
i
n
i
i
v
v
v
v
v
v
v
v
=
+
+
+
=
+
+
+
−
1
2
1
1
1
1
1
1
1
1
1
2
1
2
1



(
)
(
)
(
)
/
/
/
+
=
⋅
⋅
−
−
−
−
=
∑
(
)
σ σ
σ
λ
λ
λ
1
2
1
1
1
1
1
1
1
1

n
n
i
i
j
j
j
n
v
p
p
/
	
(5.75)
which shows that the stationary age distribution depends on the dominant eigenvalue λ1 as well as 
on the survival coefficients σ
σ
1
1
,
,

n−. Therefore, Equations 5.74 and 5.75 define the characteristics 
of the asymptotic population. If, for example, we are interested in finding the conditions for zero 
growth, then we substitute λ1
1
=  in Equation 5.74, which becomes
 
p f
p
p
i
i
i
n
i
i
j
j
n
=
=
=
=
∑
∑
1
1
0
1
π
	
(5.76)
involving both the fertility and survival coefficients.
5.2.4.2  A Simple Example of Leslie Model: The Great Tit (Parus major)
As an example, consider the following Leslie matrix used to model a population of Great tit (Parus 
major). The time-step in this case is 1 year and six classes are enough to cover the average lifespan 
of this avian species. The survival rates were obtained from census data, and we ask what number 
of eggs laid by each age group could stabilize the population. In this case, the fertility coefficients 
are the number of eggs, and σ0
0 09
= .
 means that only 9% of the eggs give rise to a young chick 
surviving until the next year
 
Mgt
f
f
f
f
f
=
0
0 6667
0
0
0
0
0
0
0 3333
0
0
0
0
0
0
0 45
0
0
0
0
0
0
2
0
2
0
2
0
2
0
2
σ
σ
σ
σ
σ
.
.
.
0
0 6667
0
0
0
0
0
0
0 1667
0
.
.




















	
(5.77)

284
Environmental Systems Analysis with MATLAB®
Egg laying is largely influenced by the habitat (food availability, nesting sites, etc.). If, in a given 
habitat, each female lays three eggs, the matrix of Equation 5.77 becomes
 
Mgt =
0
0 27
0 27
0 27
0 27
0 27
0 6667
0
0
0
0
0
0
0 3333
0
0
0
0
0
0
0 45
0
0
0
0
0
.
.
.
.
.
.
.
.
0
0 6667
0
0
0
0
0
0
0 1667
0
.
.




















	
(5.78)
and the population is doomed because the dominant eigenvalues is a meagre λ1
0.6481
=
. To have a 
stable population, each female should lay on average 10.416 eggs, which yields the following matrix
 
Mgt =
0
0 6667
0
0
0
0
0
0
0 3333
0
0
0
0
0
0.9374
0.9374
0.9374
0.9374
0.9374
.
.
0
0 45
0
0
0
0
0
0
0 6667
0
0
0
0
0
0
0 1667
0
.
.
.




















	
(5.79)
This new matrix has indeed λ1
1
= . The resulting stable population is shown in Figure 5.24.
5.2.4.3  A More Structured Leslie Model: The Poa annua Weed
So far, we have supposed that the Leslie survival and fertility coefficients are constant throughout 
the simulation, but there are cases in which these factors may vary as a function of the population 
density. This self-regulatory feedback mechanism controls the density variations by limiting the 
1 
2
3
4
5
6
5
10
15
0
20
40
60
80
100
Individuals
Time (years)
Age group
1 
2
3
4
5
6
Age group
Individuals
FIGURE 5.24  Evolution of the Great tit (Parus major) population with the Leslie matrix of Equation 5.79. 
The stable distribution is shown in the inset. These graphs were obtained with the MATLAB script Go _
Leslie_Great_tit.m in the ESA_Matlab\Exercises\Chapter_5\Single\Leslie_Models 
folder.

285
Population Dynamics Modelling
new generations. Such is the case for the Poa annua weed (Begon and Mortimer, 1986), for which 
a five-class Leslie model was developed with the structure of Figure 5.25. 
The population is divided in to five age groups: seeds, seedlings, young plant, adult plant, old 
plants, for which the Leslie matrix can be written as follows:
 
Mpa
s
s
P
B
B
B
G
P
P
P
=
















0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
2
3
0
1
2
	
(5.80)
Field studies have suggested that the matrix coefficients can be structured as a function of the total 
P. annua population as follows:
 
P
e
N
N
B
B
N
0
0 00005
1
3
0 75
0 25
27726
0
27726
100
=
−
<
>



=
=
(
)
.
.
.
for
for
e
B
e
P
G
N
N
s
s
−
−
=
=
=
0 0001
2
0 0001
200
0 2
0 05
.
.
.
.
	
(5.81)
where N is the total population density. The zero in the second place of the first row of Mpa 
means that the seedlings do not generate seeds, whereas their survival P0
(
) strongly depends on 
the total weed density, as do the seed generation coefficients B B B
1
2
3
,
,
(
) of the fully developed 
plants. Simulating the model (Equation 5.80) with the suggested parameters (Equation 5.81) 
yields the weed evolution of Figure 5.26, showing an almost stable age distribution (white bars 
at the right end).
The eigenvalues change during the simulation as a result of the density functions of Equation 5.81, 
as shown in Figure 5.27, until they reach their final location, indicated by the grey dots. The popula-
tion is almost stationary because the final matrix and its eigenvalues are complex conjugate, save 
for the dominant λ1 of course.
 
Seeds
Seedlings
Young
plants
Adult
plants
Old
plants
P0
B1
Gs
Ps
Germination
Dormant seeds
Seed production
Survival
Survival
Survival
P1
B2
P2
B3
FIGURE 5.25  Model structure for the P. annua weed. The triangles represent the survival and fertility coef-
ficients, whereas the boxes indicate the age groups.

286
Environmental Systems Analysis with MATLAB®
 
Mpa =
0.2000
25.3172
50.6344
25.3172
0.0500
0 0000
0 0000
0 0000
0 0
.
.
.
. 000
0 0000
0 0000
0 0000
0 0000
0 0000
0 0000
0 0000
.
.
.
.
.
.
.
0.2531
0.7500
0.0000
0.7500
0 0000
0 0000
0 0000
0 0000
0 0000
.
.
.
.
.
















=
=
±
= −
±
 
1.0513          
0.0274
0.8359
0.4530
0.1
λ
λ
λ
1
2 3
4 5
,
,
j
j
997
	
(5.82)
1
2
3 4
5
6
7
8
9 10 11 12 13
1
2
3
4
5
106
104
102
100
Age group
Time (years)
Log Pop.
FIGURE 5.26  Evolution of the age-structured model (Equations 5.80 and 5.81) until a stable zero-growth dis-
tribution is reached. The white bars on the right indicate the stable age distribution. The spread of the population 
values suggested to plot the logarithm of the results. This graph was obtained with the MATLAB script Go _
Leslie _ Poa.m in the ESA _ Matlab\Exercises\Chapter _ 5\Single\Leslie _ Models folder.
−1.5
−1.0
−0.5
0.0
0.5
1.0
1.5
−1.5
−1.0
−0.5
0.0
0.5
1.0
1.5
Real axis
Imaginary axis
Final eigenvalues
FIGURE 5.27  Evolution of the eigenvalues of the matrix (5.80) during the simulation of Figure 5.26. The major 
grey dots indicate their final location. This graph was obtained with the MATLAB script Go _ Leslie _
Poa.m in the ESA _ Matlab\Exercises\Chapter _ 5\Single\Leslie _ Models folder.

287
Population Dynamics Modelling
That λ1 is slightly larger than one is due to the fact that the population has not yet reached its 
steady state, or its ‘climax’ in ecological terms. Lengthening the simulation horizon, for exam-
ple, to 100 years results in λ1
1 0000
= .
, thus confirming that the system indeed tends to a stable 
population.
5.3  HARVESTED POPULATIONS
Populations may have an economic value, and their exploitation has been the subject of many bio-
economic studies. Models for determining the amount of harvest that would not impair the popu-
lation development have been proposed, with a special emphasis to fisheries (Clark, 1990) and 
wildlife management (Starfeld and Bleloch, 1986). Setting up a single-species exploitation model 
requires adding a harvesting term to the previous growth models, to yield
 
dx
dt
x F x
h x
=
⋅
( ) −( )	
(5.83)
where in addition to the growth function F x( ), we now have a subtractive term h x( ) representing 
the rate at which the resource (i.e., part of the population) is withdrawn from its habitat. We shall 
now proceed to assess the stability of Equation 5.83, which in this case means sustainability of the 
exploitation, as a function of the harvesting term h x( ). The aim of the analysis will be the deter-
mination of a limit to the withdrawal that will reconcile the economic return with the population 
survival. 
5.3.1  Constant Harvesting
One of the major problems in implementing a sustainable harvesting policy is the knowledge, or at 
least a good estimate, of the actual wild population stock (Young et al., 1994; Krebs, 1998, 2009; 
Morris and Doak 2002; Gonzalez and Descamp-Julien, 2004; Freeman, 2008; Mittelbach, 2012). 
Let us begin our analysis by considering a constant withdrawal policy that does not require any 
stock estimate. This means that the harvesting term h x
h
( ) =  is constant. Adopting a logistic model 
for the population, Equation 5.83 then becomes
 
dx
dt
r x
h
= ⋅⋅
−



−
1
x
K
	
(5.84)
The question now is how much sustainable harvesting effort can be applied without bringing the 
population to extinction. The steady-state population can be computed by setting the derivative of 
Equation 5.84 to zero and solving for x. Figure 5.28 shows the three possible settings, depending on 
the level at which the constant harvesting line crosses the logistic curve.
For the lower line, there are two intersection points, with differing stability characteristics. Point 
A corresponds to a positive derivative of the growth curve, and therefore is unstable, as already 
discussed in Section 5.1.1, whereas point B is stable, having a negative derivative. Consequently, 
this latter point is the stable equilibrium under harvesting, and it will attract the system trajectories 
provided they start from the right of point A, so that the population will settle at the stable value 
x
K
<
, instead of K if it were not harvested. However, this policy is not entirely safe, because if the 
harvesting begins before point A has been surpassed, that is, for populations x
x
<
*, the population 
will be pushed back towards extinction. Figure 5.29 shows several trajectories for differing har-
vesting start times. If harvesting begins before the population has grown beyond x *, the unstable 
equilibrium will push it back towards extinction. Conversely, any harvesting starting at x
x
>
* will 
terminate at the stable population x.

288
Environmental Systems Analysis with MATLAB®
A relationship between the harvesting effort h and the steady population x can be obtained by 
solving Equation 5.84 for x after setting the derivative to zero and considering only the stable solu-
tion, which will necessarily be for x
K
>
/2
 
0
1
4
2
2
2
2
= ⋅⋅
−



−
=
−
+
⇒
=
+
−
>
r x
x
K
h
x
Kx
Kh
r
x
K
K
Kh r
K
(
)
/
	
(5.85)
x   F (x)
h > MSY
h < MSY
x
K
0
A
B
x
x∗
MSY = rK
4
F (x)
dx
> 0
F (x)
dx
< 0
FIGURE 5.28  Three possible situations in the constant harvesting policy. Only the lower one (solid line) 
is sustainable, whereas the others either are metastable, or directly lead to extinction. MSY stands for maxi-
mum sustainable yield. The harvested population settles at the stable x
K
<
 value, whereas x * represents the 
unstable equilibrium.
Time
Population
Start of harvesting 
Unexploited population
x
K
x∗
FIGURE 5.29  Population trajectories depending on the harvesting start time. If the exploitation begins 
when the population has not yet exceeded the unstable equilibrium x *
(
), the trajectory will be pushed towards 
the extinction. On the contrary, any harvesting beginning with a population x
x
start >
* will reach the stable 
harvested level x. This graph was obtained with the MATLAB script Go _ const _ harvest.m in the 
ESA _ Matlab\Exercises\Chapter _ 5\Harvest folder.

289
Population Dynamics Modelling
Figure 5.30 shows the amount of possible return obtained by applying a certain harvesting effort, 
ranging from the MSY corresponding to the minimum sustainable population xMSY, to nil in the 
case of no harvesting.
The constant harvesting policy seems safe enough, but there is one last caveat regarding the 
kind of population being exploited. Figure 5.31 shows the impact that the same harvesting varia-
tion ∆h may have on two populations with differing growth rates. Species with a low growth rate, 
­usually referred to as K-strategists by ecologists, rely on the stability of the population and have 
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
5.0
5.5
6.0
6.5
7.0
7.5
8.0
8.5
9.0
9.5
10
Harvest
h
K
x
Population
MSY =
1
=
=
rK
0.4 × 10
4
4
xMSY =
5
=
K
2
FIGURE 5.30  Amount of harvest as a function of the exploitation level h, for the logistic parameter values 
indicated in the graph. The possible harvest values range from a maximum corresponding to the minimum 
sustainable population xMSY to nil in the case of no harvesting.
0.0
0.5
1.0
1.5
5.0
5.5
6.0
6.5
7.0
7.5
8.0
8.5
9.0
9.5
10
Δh
Δh
Harvest
Population
Δx1
Δx2
r1 = 0.2
r2 = 0.6
FIGURE 5.31  Differing effects of harvesting depending on the population growth rate. If the growth rate is 
relatively low, even a small harvesting variation may have a major impact on the population.

290
Environmental Systems Analysis with MATLAB®
a low growth rate. If the population level is altered, returning to the previous level may be difficult, 
and hence the perturbation can be considerable. Conversely, populations with a high growth rate, 
known as r-strategists, are quick to replace the missing individuals thanks to their robust fertility, 
which makes them much more resilient to harvesting variations.
5.3.2  Proportional Harvesting
In the previous section, we have examined the risk of implementing a constant harvesting pol-
icy, which may result in an irreversible depletion of the resource. This drawback has motivated a 
safer exploitation policy based on proportional harvesting. We shall see that this approach always 
produces a stable harvesting policy, but it has the disadvantage of requiring a knowledge of the 
exploited stock which, as previously pointed out, is not an easy task. The proportionally harvested 
population dynamics, still assuming an intrinsic logistic growth, is therefore
 
dx
dt
r x
x
K
g x
= ⋅⋅
−



−
⋅
1
	
(5.86)
where g represents the fraction of the stock x that is withdrawn per unit of time.
Again, we now analyse the equilibrium of Equation 5.86 as a function of the harvesting factor g 
by setting the derivative to zero. The equilibrium population can be computed as
 
0
1
1
= ⋅⋅
−



−
⋅
⇒
==
−




r x
x
K
g x
x
K
g
r 	
(5.87)
and the yield is defined as
 
Y
g x
=
⋅	
(5.88)
The stability condition requires that the total derivative with respect to x to be negative, thus
 
dF
dx
d
dx rx
x
K
gx
r
x
K
g
r
K
g r
x
x
=
−



−




=
−



−
=
−
−
1
1
2
1
2
1 ( / )
(
)





−
=
−
−







−
=
−
+
−
= −+
<
⇒
<
K
g
r
g
r
g
r
r
g
g
r
g
g
1
2 1
2
2
0
r
	
(5.89)
By inspecting Figure 5.32 it can be seen that this stability constraint g
r
<
(
) is satisfied so long as 
the harvesting line g x
⋅
(
) intersects the growth curve, whose maximum derivative r( ) representing 
its upper limit for x = 0. It is easy to show that the growth curve derivative is always less than g
 
d x F x
dx
d
dx rx
x
K
r
x
K
r
K
x
x
⋅( )
(
) =
−








=
−
<
<
<
1
2
0
for
	
(5.90)
The only exception, as will be shown later, is the case in which the population has depensation in its 
initial part. Equation 5.87 yields a harvest/population relationship similar to Equation 5.85, which 
shows that the MSY still occurs for 

291
Population Dynamics Modelling
 
x
K
g
r
x
K
r
K
K
r
Y
g
x
MSY
MSY
MSY
max
MSY
MSY
=
⇒
=
−



=
−



=
⇒
=
⋅
2
1
1
2
2
	
(5.91)
However, unlike with constant harvesting, a withdrawal g
r
> /2 does not destabilize the popula-
tion, though it does result in a smaller yield. The proportional harvesting situation is shown in 
Figure 5.33, in which (a) shows the intersection between the growth curve and the harvest line with 
slope g produces the equilibrium population x.
The resulting yield Y
g x
=
⋅ is then plotted in (b) versus the proportional harvest g. It can be 
seen that the (b) curve has the same maximum yield as the constant policy for x
K
=
/2, but a fur-
ther increase of the exploitation does not destabilize the population, though resulting in a smaller 
yield.
x . F (x)
B
x
0
A
x2
x1
K
F(x)
dx
−g2 < 0
F(x)
dx
−g1 < 0
g2
g1
FIGURE 5.32  Two possible proportional harvesting policies, both resulting in a stable equilibrium.
x
g
Y
(a)
(b)
x . F (x)
x
K
2
=
r
g
2
=
g = r
rK
MSY
4
=
g
FIGURE 5.33  Computation of the yield curve for proportional harvesting. The intersection between the 
growth curve and the harvest line (a) produces the yield that is plotted as a function of g in (b). The MSY is 
the same as that of the constant harvest, but a large g does not destabilize the population, though it results in 
a lower yield. Proportional harvest can be simulated with the MATLAB script Go_prop_harvest.m in the 
ESA _ Matlab\Exercises\Chapter _ 5\Harvest folder.

292
Environmental Systems Analysis with MATLAB®
5.3.2.1  Harvesting Depensated Populations
The only case in which proportional harvesting can produce a destabilizing effect is when the 
growth curve exhibits a depensation, consisting of a reduced growth for small population values. 
This representation is borrowed from the fishery biological literature to indicate growth curves 
with an initial upward convexity, resulting in lesser growth. Two possible depensation curves exist, 
depending on whether the growth is just reduced (simple depensation) or becomes negative (criti-
cal depensation), as shown in Figure 5.34. Proportional harvesting of a depensated population may 
lead to a violation of the stability condition (Equation 5.89), as shown in Figure 5.35, in which B 
is unstable because the derivative of the growth curve is greater than g, whereas A is conditionally 
stable (metastable), unlike C which has no unstable counterpart. The maximum sustainable, though 
metastable, equilibrium is when g is the tangent to the growth curve.
Regarding the stability of the harvesting policy, if we repeat the procedure leading to the con-
struction of the yield curve of Figure 5.33, the situation becomes problematic because, as a conse-
quence of the inflexion in the growth curve, we have seen that the intersection with the g line may 
produce two solutions, one of which is unstable.
In this case, the yield curve will have two branches, a stable one and an unstable one, with 
the former being subject to being destabilized by the unstable counterpart, depending on the level of 
x.F(x)
x.F(x)
x
x
(a)
(b)
d2(x.F(x))
dx2
> 0
d2(x .F(x))
dx2
> 0
d2(x.F(x))
dx2
< 0
d2(x .F(x))
dx2
< 0
x∗
x∗
FIGURE 5.34  Depensated growth curves. Simple depensation (a) still provides positive growth for all x, 
whereas critical depensation (b) may involve a negative growth rate for small populations. In both cases, 
depensation presents an initially upward convexity, for 0 <
<
x
x *.
Maximum
stable g
Conditional
stability
equilibrium
Unstable
equilibrium
x
Unconditional
stability
equilibrium
A
B
C
D
x.F(x)
d
dx (xF(x))|x −g < 0    but    g > r
d
dx(xF(x))|x −g < 0    and    g < r
d
dx(xF(x))|x > g
FIGURE 5.35  Harvesting a depensated population may result in two equilibria (A and B) if the harvest line 
crosses the growth curve in two points. In point B, the derivative condition is violated, and hence B is unstable, 
whereas A is stable. Point C is unconditionally stable because it has no counterpart in the ascending branch 
of the growth curve. D represents the metastable point where the harvest line is tangent to the growth curve.

293
Population Dynamics Modelling
the population, which may fall in the domain of attraction of the unstable point and thus be pushed 
back to the origin (extinction). Figure 5.36 shows how these solution branches are formed in the case 
of simply or critically depensated populations.
5.4  COMPETITION
So far, we have considered a single-species population, a highly improbable case in practice, because 
the same habitat is normally shared by several species. Sharing the same resource inevitably creates 
a competitive situation, which we are now going to consider by extending the logistic model to n 
species as follows:
 
dx
dt
x
r
x
i
n
i
i
i
ij
j
j
n
=
−








=
=∑γ
1
1,
,

	
(5.92)
Possibly unstable values of g
x
g
Y
Stable branch
Unstable branch
Unstable points
Metastable points
Stable points
(a)
(b)
x .F (x)
x
g
Y
Stable branch
Unstable branch
(c)
(d)
x . F (x)
FIGURE 5.36  Proportional harvesting with a depensated growth curve. In (a), the dashed harvest lines pro-
duce two equilibria, the leftmost of which is unstable (black dots) and a (meta)stable one (grey dots), whereas 
the solid harvest lines produce only one stable equilibrium (blue dots). The corresponding effort/yield curve (b) 
has an upper stable branch (solid line) and an underlying unstable branch (dashed line) for the values of g corre-
sponding to the dashed lines. The lower graphs (c) and (d) show the same computation for a critically depensated 
growth curve. In this case all the effort values produce an unstable equilibrium. These graph were obtained with 
the MATLAB scripts Yield_depensated.m and Yield_critical_depens.m in the ESA_Matlab\
Exercises\Chapter_5\Harvest folder.

294
Environmental Systems Analysis with MATLAB®
where 
ri is the growth rate of each species,
γii are the intraspecific competition coefficients,
γij with i ≠ j are the interspecific competition coefficients.
Let us begin by considering the competition between two species, so that Equation 5.92 becomes
 
dx
dt
x
r
x
x
dx
dt
x
r
x
x
1
1
1
11 1
12
2
2
2
2
22
2
21 1
=
−
−
(
)
=
−
−
(
)






γ
γ
γ
γ
	
(5.93)
The equilibrium can be determined by setting the derivative to zero. Solving for x1 and x2 yields
 
x
r
x
x
r
x
1
1
12
2
11
2
2
21 1
22
=
−
=
−
γ
γ
γ
γ
	
(5.94)
It can be seen that Equation 5.94 represents two lines in the x x
1
2
,
(
) plane. The equilibrium will be 
admissible if they cross in the first quadrant, that is, x x
1
2
0
,
(
) > , while its feasibility depends on the 
Jacobian of Equation 5.93. This matrix can be obtained by deriving with respect to x1 and x2 at the 
equilibrium of Equation 5.94
 
J =
−
−
(
)
−
−
(
)
d
dx
r x
x
x x
d
dx
r x
x
x x
d
dx
r
1
1 1
11 1
2
12 1 2
2
1 1
11 1
2
12 1 2
1
2
γ
γ
γ
γ
x
x
x x
d
dx
r x
x
x x
2
22
2
2
21 1 2
2
2
2
22
2
2
21 1 2
−
−
(
)
−
−
(
)












=
γ
γ
γ
γ
r
x
x
x
x
r
x
x
x x
1
11 1
12
2
12 1
21 2
2
22
2
21 1
2
2
1
2
−
−
−
−
−
−




(
)
γ
γ
γ
γ
γ
γ
,
	
(5.95)
Substituting the equilibrium values of Equation 5.94 into Equation 5.95 produces the Jacobian at 
the equilibrium
 
J =
−
−
−
−
−
−




r
x
x
x
x
r
x
x
1
11 1
12
2
12 1
21 2
2
22
2
21 1
2
2
γ
γ
γ
γ
γ
γ
	
(5.96)
which yields information about the stability of the equilibrium through its eigenvalues, as discussed 
in Chapter 1 for continuous-time systems. However, there is a more intuitive approach to the analy-
sis of the equilibrium using the isocline approach (Section 1.9.5). Recalling their definition,
 
dx
dt
f
x x
dx
dt
f
x x
dx
dx
dx dt
dx dt
1
1
1
2
2
2
1
2
2
1
2
1
=
(
)
=
(
)
⇒
=
⇒
,
,
:
slope
/
/
horizontal isocline
vertical isocline
dx
dt
dx
dt
2
1
0
0
=
=






	
(5.97)
whereby the x1
0
=  isocline (equilibrium of the first species x1) are crossed by vertical trajectories, 
and the x2
0
=  (equilibrium of the second species x2) are traversed horizontally. Equation 5.94 is in 
fact our equilibrium isocline, and its portrait is shown in Figure 5.37 in which, from Equation 5.94, 
the points of intersection with the axes are given by

295
Population Dynamics Modelling
 
x
r
x
x
r
x
x
r
x
x
r
K
1
1
12
2
11
1
1
12
2
2
1
12
2
1
1
11
1
0
0
=
−
→
=
⇔
=
⇒
=
=
⇔
=
=




γ
γ
γ
γ
γ


=
−
→
=
⇔
=
=
=
=
⇔
=






x
r
x
x
r
x
r
K
x
x
r
2
2
21 1
22
1
1
2
2
22
2
2
1
2
21
0
0
γ
γ
γ
γ
	
(5.98)
Notice that in Equation 5.98, the carrying capacities for the two species can be determined as the 
ratio between the growth rate and the intraspecific competition coefficient. Because each isocline is 
an equilibrium locus, the trajectory will tend to it in the sense indicated by the dashed arrows. In the 
light-blue areas, the species is below its carrying capacity and hence the time derivative is positive, 
whereas in the grey areas, the species exceeds its carrying capacity, and therefore its time derivative 
is negative. The four possible combinations of the relative isoclines positions, and hence of the kind 
of equilibrium, are shown in Figure 5.38.
In the first two cases (A and B), the intersection of the isoclines is outside the first quadrant, 
which means that no feasible x1
2
,
0
x
(
) >  equilibrium is possible, and only the species whose iso-
cline is external survives (species 1 in A and species 2 in B). In the other two cases (C and D), the 
isoclines do cross in the first quadrant, but only C results in a stable coexistence, whereas in D 
which species prevails depends on the initial conditions. Now let us consider the four cases in detail, 
examining the trajectory from an arbitrary initial condition to the equilibrium. Figure 5.39 shows 
the survival of species 1, and Figure 5.40 the survival of species 2. In general, when the intersection 
is outside the first quadrant, the species with the lower isocline is doomed.
Figure 5.41 instead shows the competitive coexistence where the intersection of the isoclines is a 
stable point, whereas Figure 5.42 shows the case in which the intersection is unstable and repels the 
trajectories that end in either species’ carrying capacity while the other becomes extinct. 
The dashed curve passing through the intersection of the two isoclines is called a separatrix 
because it separates the domains of attraction of the two stable equilibria. Being very difficult to 
determine analytically, it is normally estimated by numerical means by producing a large number of 
trajectories near the expected boundary and approximating the divide by observing their direction.
x1
x2
dx1
dt
r1
γ12
r2
K2
γ22
=
A
= 0
γ11
r1 = K1
γ21
r2
x1
B
x1 < 0
x2 < 0
x2 > 0
x1 > 0
x2
dx2
dt = 0
FIGURE 5.37  Graphical analysis of the two-species competitive equilibrium with the method of isoclines. 
A shows the equilibrium isocline for x1, and B depicts the equilibrium isoclines for x2. The pertinent variable 
has a positive time derivative in the light blue areas and negative one in the grey area. The dashed arrows 
indicate the component of the trajectories in approaching the equilibrium.

296
Environmental Systems Analysis with MATLAB®
x2
x2
x1
x1
x1
x1
x2
x2
A—Species 1 prevails
C—Stable coexistence
B—Species 2 prevails
D—Unstable coexistence
= 0
dt
dx1
= 0
dt
dx2
FIGURE 5.38  Possible mutual positions of the isoclines giving rise to four differing equilibria. Only C 
results in a stable coexistence, whereas in all other cases only one species survives while the other becomes 
extinct.
x2
r1
γ12
r2
γ21
K2
r2
γ22
=
0
dx1
dt =
0
dx2
dt =
x2 > 0
1 < 0
x1
2 < 0
r1
γ11
K1
=
x∙
x∙
1 = 0
x∙
∙
x1 > 0
∙
x2 < 0
∙
x1 > 0
∙
FIGURE 5.39  Trajectories in the case of the survival of species 1, whose isocline is above that of species 2. 
The coloured areas show the differing sign of the time derivative, and all the trajectories point to the carry-
ing capacity of species 1, irrespective of the initial conditions, while species 2 becomes extinct. This graph 
was obtained with the MATLAB script Go _ Extinction _ 2.m in the ESA _ Matlab\Exercises\
Chapter _ 5\Competition folder.

297
Population Dynamics Modelling
We are now going to work out a set of analytical conditions for the competitive equilibrium. Let 
us consider again the equilibrium equations
 
dx
dt
x
r
x
x
dx
dt
x
r
x
x
d
d
1
1
1
11 1
12
2
2
2
2
22
2
21 2
=
−
−
(
)
=
−
−
(
)






⇒
γ
γ
γ
γ
t
r
x
x
r
x
x
=
=
+
=
+



0
1
11 1
12
2
2
22
2
21 2
γ
γ
γ
γ
	
(5.99)
x2
r1
γ12
K2
r2
γ22
=
K1
r1
γ11
=
r2
γ21
0
dx1
dt =
0
dx2
dt =
2 > 0
x1 > 0
x1
1 < 0
x∙
x∙
∙
x1 = 0
∙
x2 > 0
∙
x1 < 0
∙
2 < 0
x∙
FIGURE 5.40  Trajectories in the case of the survival of species 2, whose isocline is above that of ­species 1. 
The coloured areas show the differing sign of the time derivative, and all the trajectories point to the carry-
ing capacity of species 2, irrespective of the initial conditions, while species 1 becomes extinct. This graph 
was obtained with the MATLAB script Go _ Extinction _ 1.m in the ESA _ Matlab\Exercises\
Chapter _ 5\Competition folder.
0
=
0
=
dt
dx2
r1
γ12
K2 = r2
γ22
K1 = r1
γ11
r2
x1
x2
γ21
dx1
dt
x1 < 0
∙
x1 > 0
∙
x2 < 0
∙
x2 > 0
∙
x1 > 0
∙
x2 < 0
∙
x2 > 0
∙
x1 < 0
∙
FIGURE 5.41  Stable coexistence of both species. The equilibrium point is globally stable because it is reached 
from any initial condition. This graph was obtained with the MATLAB script Go _ Comp _ Equil.m in the 
ESA _ Matlab\Exercises\Chapter _ 5\Competition folder.

298
Environmental Systems Analysis with MATLAB®
from which the linear system on the right-hand side can be solved for x1 and x2
 
γ
γ
γ
γ
γ
γ
γ γ
11
12
21
22
1
2
1
2
1
1 22
2 12
11







= 


⇒
=
−
x
x
r
r
x
r
r
22
12
21
1
2 11
1 21
11 22
12
21
−
=
−
−
γ γ
γ
γ
γ γ
γ γ
x
r
r
	
(5.100)
Requiring the solution to be in the first quadrant x x
1
2
0
,
(
) >  yields
 
r
r
r
r
r
r
K
r
r
K
1 22
2 12
2 11
1 21
1
12
2
22
2
2
21
1
11
1
0
0
γ
γ
γ
γ
γ
γ
γ
γ
−
>
−
>
⇒
>
=
>
=






	
(5.101)
This result confirms the relative position in which the isoclines in Figure 5.41 cross the x1 and x2 axes. 
The biological interpretation of this conclusion is that stable coexistence is possible only if the carrying 
capacity of each species is less than the ratio between the other species’ growth rate divided by the intra-
specific competition coefficient. In other words, coexistence requires the interspecific competition to 
be moderate with respect to the carrying capacity. Conversely, when interspecific competition is strong 
the exclusion principle holds, with the prevailing species being determined by the initial conditions.
5.4.1  MATLAB Analysis of Competition
Before proceeding further, let us consider the MATLAB implementation of the competitive interac-
tions just introduced. The Simulink model implementing the two-species competition is shown in 
Figure 5.43 and consists of two function blocks containing the interaction expressions, followed by 
two integrators. The simulation output is exported to the workspace via the matrix simout.
Species 1 prevails
Species 2 prevails
dt
dx1 = 0
dt
dx2 = 0
Separatrix
K2 = r2
γ22
r1
γ12
 > 0
 > 0
K1 = r1
γ11
r2
γ21
x1 < 0
∙
x2 < 0
∙
x2∙
 < 0
x2∙
x1∙
 > 0
x1∙
FIGURE 5.42  Competitive exclusion. The prevailing species depends on the initial conditions. Notice that 
the intersection point is unstable and repels the approaching trajectories. The separatrix curve divides the 
domains of attraction of the two equilibria and obviously passes through the unstable equilibrium at the 
intersection. This graph was obtained with the MATLAB script Go _ Comp _ Exclusion.m in the ESA _
Matlab\Exercises\Chapter _ 5\Competition folder.

299
Population Dynamics Modelling
This model has been used to simulate each of the four possible equilibria, with the launch 
MATLAB script setting the conditions to obtain any of them. The main body of the script is listed 
in Box 5.2 for the stable coexistence arrangement of Figure 5.41. To simulate the other possibilities 
(survival of one species or competitive exclusion) the parameters should be selected as indicated in 
the pertinent column of Box 5.3.
BOX 5.2  MATLAB LAUNCH SCRIPT FOR THE COMPETITIVE EQUILIBRIUM 
MODEL, MAKING USE OF THE COEXIST.MDL SIMULINK MODEL
% Simulation of competitive equilibrium
clear
% Set the model coefficients
r1=0.2;
r2=0.15;
g11=0.01;
g12=0.015;
g21=0.003;
g22=0.03;
% Set the final simulation time
tfin=300;
figure(1)
hold off;clf
% Extremal isocline points
% species 1
K1=r1/g11;
P1=r1/g12;
%species 2
K2=r2/g22;
P2=r2/g21;
figure(1)
hold off;clf
plot([K1,0],[0,P1],'b']) % Species 1 isocline
hold on
plot([P2,0],[0,K2],':b') % Species 2 isocline
% Enter the initial conditions
butt=1;
while butt==1
[x1o,x2o,butt]=ginput(1);
plot(x1o,x2o,'o')
Box 5.2 continued
u[1]∗(r1-g11∗u[1]-g12∗u[2])
1
s
Fcn
Species 1
Species 2
Simout
Fcn1
To workspace
u[2]∗(r2-g22∗u[2]-g21∗u[1])
1
s
FIGURE 5.43  Simulink two-species competition model. The simulation results are exported to the work-
space as the simout matrix. This Simulink model (Coexist.mdl) can be retrieved from the ESA _
Matlab\Exercises\Chapter _ 5\Competition folder.

300
Environmental Systems Analysis with MATLAB®
All the MATLAB software to simulate the four possible conditions of the competitive equilibrium 
is available from the ESA _ Matlab\Exercises\Chapter _ 5\Competition folder.
5.4.2  An Example of Competition: Gause’s Protozoa
We are now going to revisit a historical experiment that the Russian ecologist Georgy Gause (1934) 
carried out by growing two species of protozoa (Paramecium aurelia and Paramecium caudatum), 
first separately, and then in the same environment. He observed that while each species alone devel-
oped up to the carrying capacity, when grown together one species prevailed over the other, which 
was brought near extinction, though there was ample food for both. The data from his experiments 
were later analysed by Leslie (1957), who was the first to apply mathematical modelling to these 
data to explain the observed behaviour. The analysis can be made in two steps: first a logistic model 
is fit to the data of each species grown alone (Figure 5.44), then a competition model is fit to the 
combined growth data (Figure 5.45).
It can be seen that the P. aurelia becomes dominant at the expense of the declining population 
of P. caudatum, although food is plentiful for both species. The parameters of the three models are 
grouped in Table 5.1, from which it can be seen that the competition has a major impact on both 
species parameters.
Box 5.2 continued
[t,x,y]=sim('coexist',tfin);
plot(simout(:,1),simout(:,2))
drawnow
xlabel('x1')
ylabel('x2')
end
% Form the competition coefficients matrix
G=[g11 g12;g21 g22];
R=[r1 r2]’;
% Compute the equilibrium
Xo=G\R
% Compute the Jacobian
J=[r1-2*g11*Xo(1)-g12*Xo(2) -g12*Xo(1);-g21*Xo(2) r2-g21*Xo(1) 
-2*g22*Xo(2)];
% Compute the eigenvalues
L=eig(J)
BOX 5.3  SUGGESTED MODEL COEFFICIENT TO OBTAIN 
EACH OF THE THREE REMAINING EQUILIBRIA
Competitive exclusion
Species 1 survival
Species 2 survival
r1=0.4;
r2=0.2;
g11=0.01;
g22=0.02;
g12=0.06;
g21=0.01;
K1=r1/g11;
K2=r2/g22;
r1=0.2;
r2=0.15;
g12=0.0067;
g21=0.0107;
g11=0.0100;
g22=0.0060;
K1=20;
K2=25;
r1=0.2;
r2=0.15;
g12=0.0114;
g21=0.0062;
g11=0.0100;
g22=0.0060;
K1=20;
K2=25;

301
Population Dynamics Modelling
2
4
6
8
10
12
14
16
18
20
0
50
100
150
200
250
2
4
6
8
10
12
14
16
18
20
0
100
200
300
400
500
600
700
Time (days)
Population
P. caudatum
P. aurelia
Time (days)
Population
P. aurelia data
P. aurelia model
P. caudatum data
P. caudatum model
FIGURE 5.44  Fitting the Gause Paramecia data (Gause, 1934) when each species is grown separately.
0
5
10
15
20
25
0
50
100
150
200
250
300
350
Time (days)
Population
P. aurelia data
P. aurelia model
P. caudatum data
P. caudatum model
FIGURE 5.45  Fitting the Gause Paramecia data (Gause, 1934) when both species share the same environ-
ment, giving rise to competition. The P. caudatum is clearly the succumbing species.
TABLE 5.1
Comparison of Protozoa Logistic Parameters in Separate and Common 
Growth Conditions
Separate Growth (Logistic Model)
Common Growth (Competition Model)
Parameter
P. aurelia
P. caudatum
P. aurelia
P. caudatum
r
0.6555
0.5472
0.7045
0.7901
K
576.7464
202.1490
354.4325
218.3363
γ11
0.00113655
–
0.0019876
–
γ22
–
0.00270691
–
0.0036185
γ12
–
–
0.000629
–
γ21
–
–
–
0.001977

302
Environmental Systems Analysis with MATLAB®
Consider that while in the separate growth experiments the carrying capacity K was directly 
estimated, when fitting the competitive model it is computed as the ratio between the growth factor 
(r) and the intraspecific competition coefficients, that is, K
r
1
1
11
/
=
γ  and K
r
2
2
22
/
=
γ . Figure 5.46 pres-
ents the same data in the now familiar species phase plane. The competition equilibrium is located 
at the intersection of the two isoclines with a very low value for the P. caudatum, confirming that 
this species is greatly affected by the competition and forced near to extinction by the pressure of 
the competing species P. aurelia. As a result of these experiments, Gause formulated the competi-
tive exclusion principle, stating that two species competing for the same resource cannot coexist at 
constant population values if other ecological factors remain constant. The species with the largest 
ratio ri/γii = Ki will prevail in the long term, either leading to the extinction of its competitor, or 
forcing it to shift towards a different ecological niche. This long-term behaviour is obviously not 
apparent from the short time experiments considered here, so the equilibrium shown in Figure 5.46 
may be temporary, and eventually lead to the extinction of the P. caudatum.
5.4.3  Competition for a Limited Resource
So far, we have assumed an unlimited common resource, but if the two species compete for a lim-
ited resource, how will their coexistence be affected? To investigate this new aspect of competition, 
consider a model where, in addition to growth, each species is influenced by the availability of a 
resource T and its exploitation by the two species, that is, f T x x
,
,
1
2
(
). The competitive model thus 
becomes
 
dx
dt
x
r
f T x x
dx
dt
x
r
f T x x
1
1
1
1
1
2
2
2
2
2
1
2
=
−
(
)
(
)
=
−
(
)
(
)






α
α
,
,
,
,
	
(5.102)
If we assume a linear exploitation model for the resource T
 
f T x x
T
x
x
,
1 2
1 1
2
2
(
) =
−
−
β
β
	
(5.103)
0
50
100
150
200
250
300
350
400
0
200
400
600
800
1000
1200
P. aurelia
= 1119.8
r1
γ12
= 354.4325
r1
γ11
= 399.6004
r2
γ21
= 218.3363
r2
γ22
P. caudatum
P. aurelia
P. caudatum
FIGURE 5.46  Phase-plane portrait for the Paramecia competition, confirming Gause’s conclusions. The 
stable coexistence is largely imbalanced in favour of the P. aurelia, which is able to maintain a much larger 
population than the P. caudatum, which is driven close to extinction as a consequence of competition.

303
Population Dynamics Modelling
meaning that the resource T is linearly depleted by the exploitation, Equation 5.102 can be written as
 
dx
dt
x
r
T
x
x
dx
dt
x
r
T
x
x
1
1
1
1 1 1
1
2
2
2
2
2
2
1 1
2
2
2
=
−
+
+
(
)
=
−
+
+
(
)


α β
α β
α β
α β




	
(5.104)
The question is whether this new interaction may lead to stable coexistence, and the answer is, alas, 
No. Computing the equilibrium isoclines from Equation 5.104 yields
 
0
0
1
1 1 1
1
2
2
2
2
1 1
2
2
2
1
2
1
2
=
−
+
+
=
−
+
+



⇒
= −
+
−
r
T
x
x
r
T
x
x
x
x
T
r
α β
α β
α β
α β
β
β
1
1 1
1
2
1
2
2
2
1
α β
β
β
α β
x
x
T
r
= −
+
−






	
(5.105)
Clearly, the two isoclines have the same slope −
(
)
β β
2
1
/
, and the intercepts with the axes are
 
Isocline species
I
1
0
0
1
1
1 1
2
1
2
1
1 2
x
T
r
x
x
x
T
r
=
−
=
=
=
−






α β
α β
;
socline species 2
0
0
1
2
2
2
2
1
2
2
2 1
x
T
r
x
x
x
T
r
=
−
=
=
=
−







α β
α β
;









	
(5.106)
as shown in Figure 5.47. Because there is no intersection between the two isoclines, no coexistence 
is possible, and the prevailing species will be that with the ‘outer’ isocline, for which the following 
inequality holds
 
T
r
T
r
−
>
−
1
1 1
2
2
2
α β
α β 	
(5.107)
x2
x1
Species 1
T−r1
α1β2
T−r2
α2β2
T−r1
α1β1
T−r2
α2β1
Species 2
Survival of species 1
Extinction of species 2
FIGURE 5.47  Competitive exclusion in the case of a limited resource. The two isoclines have the same 
slope, therefore no coexistence is possible, and the species with the outward isocline prevails.

304
Environmental Systems Analysis with MATLAB®
If the inequality is reversed, then the species 2 will prevail.
Possible extensions to the above linear resource model could come from including secondary 
food sources, which could force the isoclines to cross somewhere in the first quadrant and produce 
an equilibrium, whose stability would have to be investigated on a case-by-case basis. In practice, 
the exploitation terms could be non-linear, limiting the exploitation of the resource (this issue will 
be considered when dealing with the functional response of a predatory population) and creating 
some type of saturation. Furthermore, the environmental factors may induce a fluctuating pressure 
of the dominating population, giving some relief to the other species, which may occasionally pre-
vail. As a result, several equilibria (either stable or unstable) may develop.
5.4.4  Extension to Multispecies Competition
Now let us return to the general n-species competition model (Equation 5.92) and consider the linear 
term, which can be written in matrix form
 
r
x
r
r
r
i
ij
j
j
n
m
−







⇒
−
=
=












=
=∑γ
γ
1
1
2
11
r
AX
0
r
A
with

γ
γ
γ
γ
γ
γ
γ
γ
12
1
21
22
2
1
2







m
m
m
m
mm












	
(5.108)
so that the equilibrium can be computed by solving a linear system of equations
 
0 =
−
⇒
=
>
−
r
AX
X
A r
X
0
1
	
(5.109)
The stability of the multiple species equilibrium can be studied with the Lyapunov method treated 
in Section 1.9.7, according to which the system (5.92) is globally stable if and only if the following 
conditions hold (Goh, 1976, 1977)
	
1.	X
0
>  (admissible equilibrium)
	
2.	∃
=
(
) >
⇒
+
≤
C
CA
A C
0
diag c c
cm
T
1
2
0
,
,
,

	
3.	Having defined
 
V
c
x
x
x
x
x
c
i
n
i
i
i
i
i
i
i
n
i
=
−
−




>
=
=∑
ln
,
,
1
0
1
with

	
(5.110)
	
4.	Its time derivative V
T
T
=
−
+
−
(
)(
) (
)(
)
1 2
/
X
X
CA
A C X
X  vanishes only in X.
5.4.4.1  Vulnerability
Suppose that the environment induces a perturbation through some piecewise continuous functions 
u t
i ( ), which might represent a fractional population withdrawal
 
dx
dt
x
r
x
u t
x
i
i
i
ij
j
j
n
i
i
=
−







+
( )⋅
=∑γ
1
	
(5.111)
and suppose that these perturbation functions are bounded, that is,
 
−≤
( ) ≤
ξ
ξ
u t
i
	
(5.112)

305
Population Dynamics Modelling
then the derivative of the previous Lyapunov function (5.110), computed along the solutions of the 
model (5.111), becomes
 

…
V
u
u
T
T
T
n
T
=
−
(
)
+
(
)
−
(
) +
−
(
)
= 

1
2
1
X
X
CA
A C
X
X
X
X
Cu
u
with
	
(5.113)
where the matrix C =
(
)
diag c
cn
1,
,

 is selected to have its smallest element equal to 1. Furthermore, 
because the matrix −
+
(
)
1
2 CA
A C
T
 is symmetric and negative definite, its eigenvalues are positive 
real. An invulnerability condition can be derived as follows (Goh, 1976, 1979, 1980). Given a sphere 
of radius R around the equilibrium point X if the following inequality holds
 
λ
ξ
0 > c
n
R
	
(5.114)
where:
 
λ0
1
2
1
1
=
−
+
(
)
=
(
)
=
minimumeigenvalueof
diag
CA
A C
C
T
n
c
c
c
c
,
,
max
,
,

c
c
c
n
n
(
)
=
(
)
1
1
min
,
,

	
(5.115)
then V ≤ 0 for every X inside that sphere of radius R
 
X
X
X
X
−
(
)
−
(
) =
T
R2	
(5.116)
Thus, for every population X the Lyapunov function (5.113) and its derivative have the following 
properties:
 
V
V
X
X
( ) ≤
( ) ≤
µ
and

0	
(5.117)
where µ is the maximum value of the Lyapunov function on the boundary of the sphere of radius R. 
Conditions (5.117) imply that every trajectory originating in this region will remain inside the 
sphere indefinitely, at least as long as the assumptions of Equation 5.112 on the input function hold. 
Therefore, the radius R and the upper value of the Lyapunov function µ define the region of invul-
nerability with respect to the class of disturbances u bounded by Equation 5.112.
Consider next the following example (Goh, 1976) with two competing populations with dynamics
 
dx
dt
x
x
x
dx
dt
x
x
x
1
1
1
2
2
2
1
2
22
0 1
2 1
5
0 7
0 2
=
⋅
−
⋅
−
⋅
(
)
=
⋅−+
⋅
−
⋅
(
)
.
.
.
.
	
(5.118)
which has a non-trivial equilibrium at x
x
1
2
10
10
=
=
,
. Defining C =
(
)
diag 1 3
,
 yields
−
+
(
) = −




−
−
−



+ −
−
1
2
1
2
1
0
0
3
0 1
2 1
0 7
0 2
0 1
0 7
2 1
CA
A C
T
.
.
.
.
.
.
.
−













= 



0 2
1
0
0
3
0 1
0
0
0 6
.
.
.
	 (5.119)
and thus λ0
0 1
= . . From Equation 5.114, the perturbation upper bound can be computed as
 
ξ
λ
<
=
⋅
=
0
0 1 5
3 2
0 1179
R
c
n
.
.
	
(5.120)

306
Environmental Systems Analysis with MATLAB®
The populations inside the invulnerability region must jointly satisfy the Lyapunov function (5.110) 
and the spherical condition constraint (5.116), that is,
 
µ =
=
−
−










−
(
)
=∑
max
ln
x
i
i
i
i
i
i
i
n
i
V
c
x
x
x
x
x
1
subject to X
X
T
R
X
X
−
(
) =
2	
(5.121)
Therefore, for any initial condition in R, the Lyapunov function will be such that
 
V x x
V
1
2
0
,
and
(
) ≤
≤
µ

	
(5.122)
which means that the trajectory will be confined in the bounded region V x x
1
2
,
(
) ≤µ around the 
equilibrium, even in the presence of a bounded disturbance. This example was simulated with the 
Simulink model of Figure 5.48, and the phase-plane portrait of the two populations is shown in 
Figure 5.49, in which the common point between the sphere of radius R and the Lyapunov function 
is indicated, yielding the maximum of the latter V = 5 7935
.
.
5.5  PREY–PREDATOR MODELS
In the previous section, we considered two or more species competing for a common resource, but 
what happens when one species becomes the food resource of the other? In this case, we have a 
prey–predator relationship between the two species, and its extension to many species ecosystem 
becomes a food chain or a food web, as will be discussed later. Now let us begin by setting out some 
basic hypotheses on which the prey–predator interaction hinges:
	
1.	The resource is not unlimited, being represented by the exploited prey population
	
2.	Without predation, the prey behaves like a single-species population, reaching its carrying 
capacity
	
3.	Without prey the predator cannot survive, assuming that no alternative food source is 
available
	
4.	The (lossy) energy transfer is unidirectional from the prey to the predator
Product
Populations
×1
×2
+
+
+
+
u[1]∗(r1-g11∗u[1]-g12∗u[2])
1
s
1
s
Pop_1
Pop_2
u[2]∗(r2-g21∗u[1]-g22∗u[2])
Random Saturation 1
Disturbance on ×1
Random    Saturation 1
Disturbance on ×2
Product 1
FIGURE 5.48  Simulink model to demonstrate the vulnerability condition (5.121). Two separate noise 
generators were used, one for each population, to obtain independent disturbances. This Simulink model 
(Lyap _ Vulnerabity.mdl) can be retrieved from the ESA _ Matlab\Exercises\Chapter _ 5\
Competition folder.

307
Population Dynamics Modelling
Under these assumptions, the dynamical prey–predator model can be written as follows:
 
Prey
Predator
dx
dt
x F x
y p x
dy
dy
m y
c y p x
=
⋅
( ) −
⋅( )
= −
⋅
+ ⋅
( )
.
	
(5.123)
where:
F x( ) is the prey growth function
p x( ) is the functional response of the predator, to be examined later
m is the extinction rate of the predator
c is the energy conversion efficiency of the predation
The many prey–predator models that have been proposed over the years basically differ in the forms 
of the two functions F x( ) and p x( ). Some options are now examined.
5.5.1  Lotka–Volterra Prey–Predator Model
This is undoubtedly the first and still the most popular model of this kind. It considers a prey logistic 
growth with growth rate r and carrying capacity K and a simple, multiplicative interaction for the 
predation term, which is equivalent to a linear unbounded predation rate. Under these assumptions 
the Lotka–Volterra model can be written as
 
Prey
Predator
dx
dt
r x
x
K
b
x y
dy
dy
m y
b
x y
= ⋅⋅
−



−
⋅⋅
= −
⋅
+
⋅⋅
1
12
21
	
(5.124)
5
10
15
20
4
6
8
10
12
14
16
18
V(x1, x2) = 5.7935
max (V)
(x1, x2)∈R
20
x1
x2
R
Start point
Equilibrium point
FIGURE 5.49  Phase-plane portrait of the two populations, whose trajectories are inside the shaded area, 
where the Lyapunov function satisfies the conditions (5.122). This graph was produced with the MATLAB script 
Go _ Lyap _ Vulnerability.m in the ESA _ Matlab\Exercises\Chapter _ 5\Competition 
folder.

308
Environmental Systems Analysis with MATLAB®
The lossy energy flow requires that b
b
21
12
<
, meaning that the energy subtracted from the prey is not 
fully transferred to the predator, for reasons that will be examined in detail later. The equilibrium of 
the system (5.124) can be found by computing the isoclines of both species as
 
0
1
0
1
12
21
12
= ⋅⋅
−



−
⋅⋅
= −
⋅
+
⋅⋅
⇒
⋅
−



=
⋅
r x
x
K
b
x y
m y
b
x y
r
x
K
b
y
x = m
b21
	
(5.125)
It can be seen that the prey isocline has a negative-slope, whereas the predator isocline is a vertical 
line. Substituting the second equation into the first, the following equilibrium is obtained as
 
y
r
b
m
b K
x
m
b
=
−




=






12
21
21
1
	
(5.126)
which represents a feasible x y
,
(
) > 0 equilibrium only if
 
K > m
b21
	
(5.127)
In fact, if this condition is not satisfied, the two isoclines do not cross in the first quadrant. The two 
possible equilibria are shown in Figure 5.50, which presents the feasible equilibrium (a) given by 
the intersection of the two isoclines, and the unfeasible solution (b) when the condition (5.127) is not 
met, leading to the extinction of the predator and the full development of the prey, which reaches 
its carrying capacity.
Prey
(a)
(b)
Predator
Predator
K
b12
r
b12
r
b21
m
b21
m
0
=
dy
dt
Prey
K
0
=
dx
dt
0
=
dy
dt
0
=
dx
dt
x
x
y
x
y
y
FIGURE 5.50  Graphical computation of the Lotka–Volterra prey–predator system. In (a), the feasible equi-
librium is determined by the intersection of the equilibrium isoclines, whereas in (b), no feasible equilibrium 
is possible, leading to the extinction of the predator, while the prey reaches its carrying capacity K.

309
Population Dynamics Modelling
Figure 5.50 also shows the phase-plane trajectories from an arbitrary initial condition to the 
equilibrium, whichever this may be. In the feasible equilibrium case (a), the isoclines divide the first 
quadrant in four sectors with differing derivative signs that cause the trajectory to spiral in a coun-
terclockwise direction. Other possible trajectories will be considered soon, but first let us discuss the 
stability of the equilibrium (5.126) under the condition (5.127). From the model (Equation 5.124), 
the derivatives with respect to x and y can be computed as
 
∂
∂
=
−



−
=
−



−
−



f
x
r
x
K
b y
r
m
b K
b
r
b
m
b K
1
12
21
12
12
21
1
2
1
2
1
= −
∂
∂
= −
= −
∂
∂
=
=
−


mr
b K
f
y
b x
m b
b
f
x
b y
b
r
b
m
b K
21
1
12
12
21
2
21
21
12
21
1



∂
∂
= −
+
= −
+
=












f
y
m
b x
m
b
m
b
2
21
21
21
0
	
(5.128)
from which the Jacobian can be determined as
 
J =
−
⋅
⋅
−
−
⋅
















m r
b
K
m b
b
b
r
b
m
b
K
21
12
21
21
12
21
1
0
	
(5.129)
Its eigenvalues are
 
det
det
λ
λ
λ
I
J
−
(
) =
+
⋅
⋅
−
−
⋅









m r
b
K
m b
b
b
r
b
m
b
K
21
12
21
21
12
21
1







=
⋅
+
⋅
⋅



+
⋅⋅
−
⋅




=
+
⋅
⋅
λ
λ
λ
λ
m r
b
K
m r
m
b
K
m r
b
21
21
2
21
1
K
m r
m
b
K
+
⋅⋅
−
⋅



=
1
0
21
	
(5.130)
 
λ =
−
⋅
⋅
±
⋅
⋅
(
) −
⋅
⋅
−
⋅
(
)
((
) / (
))
(
) / (
)
(
/ (
))
m r
b
K
m r
b
K
m r
m
b
K
21
21
2
21
4
1
2
	
(5.131)
From Equation 5.131, we find that the eigenvalues have a negative real part if
 
1
0
21
21
−
⋅
>
⇒
>
m
b
K
K
m
b 	
(5.132)
so the previous feasibility condition (Equation 5.127) also implies stability of the equilibrium. Real 
negative eigenvalues are obtained for
 
m r
b
K
b
K
m
⋅
⋅
>
⋅
−
(
)
21
21
4
	
(5.133)

310
Environmental Systems Analysis with MATLAB®
and in this case the model response is monotonic. Table 5.2 shows some parameter sets that produce 
the three possible behaviours of the Lotka–Volterra model: stable equilibria (oscillatory or mono-
tonic) or unstable equilibrium with predator extinction.
Notice that, in the latter case, one eigenvalue is positive real, indicating instability. The model 
responses for the parameter values of Table 5.2 are shown in Figure 5.51 for the stable oscillatory 
case, in Figure 5.52 for the stable monotonic case, and in Figure 5.53 for the predator extinction 
case.
5.5.1.1  A Helping Hand
In the latter case, one may wonder whether some corrective action could be taken to stabilize the 
system and avoid the predator extinction. One possibility is to provide an external food supply to 
make up for the insufficient prey. This is often done to support starving herbivore populations in 
natural parks during the winter months. To model this additional input, Equation 5.124 can be 
rewritten as
0
5
10
15
20
0.0
0.5
1.0
1.5
2.0
2.5
(Xo, Yo)
Prey
(a)
(b)
Predator
0
20
40
60
80
2
4
6
8
10
Time
Populations
Prey
Predator
FIGURE 5.51  Phase portrait (a) and time trend (b) of the Lotka–Volterra model in the case of a stable oscil-
latory equilibrium, obtained with the parameters values taken from the pertinent column of Table 5.2. These 
graphs were produced with the MATLAB script Go _ Lotka _ Volterra.m in the ESA _ Matlab\
Exercises\Chapter _ 5\Prey _ Predator\Lotka _ Volterra folder.
TABLE 5.2
Possible Behaviours of the Lotka–Volterra Prey–Predator Model as a Function 
of Its Parameters
Parameter
Feasible Equilibrium 
(Oscillatory)
Feasible Equilibrium 
(Monotonic)
Unfeasible Equilibrium 
(Predator Extinction)
r
0.4
30
1.4
K
20
18
10
m
0.5
5
4.6
b12
0.33
1.5
0.3
b21
0.1
0.5
0.4
Eigenvalues
λ1 2
0 0500
0 3841
,
.
.
= −
± j
λ
λ
1
2
10 0000
6 6667
= −
= −
.
.
λ
λ
1
2
2 0754
0 4654
= −
=
.
.

311
Population Dynamics Modelling
 
Prey
Predator
dx
dt
r x
x
K
b
x y
F
dy
dy
m y
b
x y
= ⋅⋅
−



−
⋅⋅
+
= −
⋅
+
⋅⋅
1
12
21
	
(5.134)
where F can be viewed as the additional food supply rate, which of course has the dimension of 
energy over time. Plotting the predator isocline with F as a parameter yields the family of curves 
generated by the new the prey isocline which, contrary to the previous linear case of Equation 5.125, 
is non-linear.
0
(a)
(b)
5
10
15
20
0
5
10
15
20
25
(Xo,Yo)
Prey
Predator
0.0
0.5
1.0
5
10
15
20
25
Time
Populations
Prey
Predator
FIGURE 5.52   Phase portrait (a) and time trend (b) of the Lotka–Volterra model in the case of a stable mono-
tonic equilibrium, obtained with the parameters values taken from the pertinent column of Table 5.2. These 
graphs were produced with the MATLAB script Go _ Lotka _ Volterra.m in the ESA _ Matlab\
Exercises\Chapter _ 5\Prey _ Predator\Lotka _ Volterra folder.
0
(a)
(b)
5
10
15
0
2
4
6
8
(Xo,Yo)
Prey
Predator
0
1
2
3
4
5
2
4
6
8
10
12
14
16
18
Time
Populations
Prey
Predator
FIGURE 5.53  Phase portrait (a) and time trend (b) of the Lotka–Volterra model in the case of unfeasible 
equilibrium leading to the predator extinction, obtained with the parameters values taken from the pertinent 
column of Table 5.2. These graphs were produced with the MATLAB script Go _ Lotka _ Volterra.m 
in the ESA _ Matlab\Exercises\Chapter _ 5\Prey _ Predator\Lotka _ Volterra folder.

312
Environmental Systems Analysis with MATLAB®
 
F
b
x y
r x
x
K
=
⋅⋅
−⋅⋅
−




12
1
	
(5.135)
With this additional manipulated variable F, we can decide the level of the predator that we want 
to sustain by recomputing the equilibrium, while keeping the prey level of the original steady state, 
that is, x
m b
=
/ 21. Substituting this value in Equation 5.135, we obtain the required additional food 
supply
 
F
b
m
b
y
r
m
b
m
b
K
=
⋅
⋅
−⋅
⋅
−
⋅




12
21
21
21
1
	
(5.136)
where y is the desired predator level. Figure 5.54 shows how the prey isoclines change as a function 
of the additional energy supply (a) and how the new equilibrium is reached (b).
5.5.2  Predator Functional Response
The Lotka–Volterra model supposes that there is an unbounded predation rate, whereas in nature 
it is well known that the predator is limited in its voracity by several factors. They represent an 
upper bound on the predation by introducing some form of saturation that is globally referred to as 
the predator functional response. Generally, three kinds of functional responses are known, whose 
shapes are shown in Figure 5.55.
0
(a)
(b)
5
10
15
0
5
10
15
Prey
Predator
F = 0 
5
10
15
20
0
5
10
15
0
5
10
15
Prey
Predator
x = 11.5
y = 5
Prey isoclines as a function of F
Selecting F for a prescribed y
F = 19.665
(xo, yo)
FIGURE 5.54  Changing the prey isoclines by adding an external foodsource (a) and the new equilibrium, 
with the amount of food selected to sustain a prescribed predator population (b). The right-hand graph was 
produced with the MATLAB script Go _ Food _ Supply _ LV.m in the ESA _ Matlab\Exercises\
Chapter _ 5\Prey _ Predator\Lotka _ Volterra folder.
Prey
Prey
Prey
Predation rate
Predation rate
Predation rate
Type 1
Type 2
Type 3
FIGURE 5.55  The three possible shapes of the predator functional response. The insets show typical ani-
mals exhibiting this kind of response: the crustacean Daphnia, the Deer and the Panda.

313
Population Dynamics Modelling
The type 1 functional response is typical of a filtering organism, such as the crustacean Daphnia, 
which feeds by filtering water and retaining the plankton. Its feeding capacity is limited by the 
maximum water flow through the filtering apparatus. The type 2 response is typical of herbivores 
that gradually reach satiety, and its analytical form can be derived as follows. Define the following 
feeding parameters:
•	 T = total feeding time
•	 Tr = prey search time
•	 Tm = total prey feeding time
•	 tm = single prey feeding time = search area per time unit
•	 pa = prey capture probability
•	 x = prey density
Then, the amount of prey captured during the search time Tr is
 
D
p
q x T
a
r
=
⋅⋅⋅
	
(5.137)
and the total feeding time Tm amounts to
 
T
T
T
T
t
p
q x
m
r
r
m
a
=
+
=
⋅
+
⋅
⋅⋅
(
)
1
	
(5.138)
Thus, the total feeding time is
 
T
T
T
T
t
p
q x
m
r
r
m
a
=
+
=
⋅
+
⋅
⋅⋅
(
)
1
	
(5.139)
Thus, the quantity of prey consumed in the time unit, that is, the functional response, can be 
expressed as
 
p x
D
T
p
q x T
t
p
q x T
x
t
x
p
q
a
r
m
a
r
m
a
( ) =
=
⋅⋅⋅
+
⋅
⋅⋅
(
)
=
⋅
+
⋅
⋅
=
⋅
1
1
α
α
α
with
	
(5.140)
which tends to the saturation value 1/tm
(
) as the prey density grows indefinitely. This response is 
typical of animals with a good mobility, for which feeding is primarily limited by the time required 
for prey manipulation. The type 3 response is found in animals with lesser mobility, which have 
problems in finding food when this is scarce. The type 3 functional response can be described either 
by an exponential sigmoid, providing a better control for low prey density, or by a polynomial sig-
moid, which is more appropriate when good control is required for high prey density
 
Exponential sigmoid
Polynomial sigmoid
p x
a
b e
p x
a
c x
( ) =
+
⋅
( ) =
+
−⋅
1
1
b x n
⋅
−
	
(5.141)
5.5.3  Generalizing the Prey–Predator Model
Now that we have better defined the predator functional response, the prey–predator model can be 
generalized into what is known as the Kolmogorov generalized prey–predator model (Freedman, 
1980; Brauer and Castillo-Chaves, 2014)
 
Prey
Predator
dx
dt
x g x
y p x
dy
dt
m y
c y p x
=
⋅( ) −
⋅( )
= −
⋅
+ ⋅
⋅( )






	
(5.142)

314
Environmental Systems Analysis with MATLAB®
with the following conditions for the growth g x( ) and the predator response p x( ) functions:
 
conditions on
conditions on
( )
0
g x
p x
g
g K
dg
dx
p
( )
( )
>
=
<
=
( )
( )
li
0
0
0
0
0
m
x
p x
dp
dx
→∞
=
>
( )
const.
0
	
(5.143)
The conditions on g x( ) are basically the same that were defined for a single-species growth model, 
whereas those on f x( ) are connected to the predator functional response. Two broad classes of 
functions satisfying the previous conditions (5.143) are
 
g x
r
x
K
p
p x
ax
X
x
n
p
n
s
n
n
( ) =
−











>
( ) =
+
>
1
0
0	
(5.144)
which encompass every kind of growth, including depensation, and all functional responses of type 
2 and 3. Figure 5.56 shows the possible shapes of the two functions as their parameters p and n vary. 
It can be seen that for p =1, the linear logistic growth function is obtained. The exponent n controls 
the shape of the functional response of the predator: n ≤ 1 produces a type 2 response, whereas for 
n >1 a type 3 response is obtained.
Now we substitute the functions (5.144) in the generalized model (Equation 5.142)
 
dx
dt
x r
K
y
ax
X
x
dy
dt
y
m
c
ax
X
p
n
s
n
n
n
s
n
=
⋅
−











−
⋅
+
=
⋅−
+ ⋅
+
1
x
xn













	
(5.145)
and set out to compute the system equilibrium by setting the derivatives to zero
0
5
10
15
0.0
0.05
0.10
0.15
0.20
0.25
0.30
0.35
0.40
x
g(x)
0
5
10
15
0
1
2
3
4
5
x
p(x)
4
3
2
1
Type 2: n ≤ 1
Type 3: n > 1
4
3
2
1
p = 1 Logistic growth
p = .5
n = 0.5
FIGURE 5.56  Possible shapes of the generalized prey–predator model functions g x( ) and p x( ) defined by 
Equation 5.144.

315
Population Dynamics Modelling
 
0
1
0
=
⋅
−











−
⋅
+
=
⋅−
+ ⋅
+




x r
K
y
ax
X
x
y
m
c
ax
X
x
p
n
s
n
n
n
s
n
n
x









	
(5.146)
from which the two equilibrium isoclines are obtained
 
Prey isocline
Predator isoc
y
r
a
x
K
X
x
x
p
s
n
n
n
=
−











⋅
+
−
1
1
line
/
x
X
m
c a
m
s
n
=
⋅
−




1
	
(5.147)
Substituting x from the second equation (5.147) into the first yields the equilibrium y from which 
the Jacobian can be computed as
 
J =
−
+
(
)








−
⋅⋅
⋅
+
(
)
−
⋅
−
r
p
x
K
y a X
n x
X
x
a x
X
p
s
n
n
s
n
n
n
s
n
1
1
1
2
+
⋅⋅⋅
⋅
+
(
)
















−
x
y c a X
n x
X
x
n
s
n
n
s
n
n
1
2
0
	
(5.148)
To show the flexibility of the generalized prey–predator model (5.145), Figure 5.57 shows its equi-
librium isoclines obtained with differing values of the predation coefficient m while all the other 
parameters were kept constant at the values shown in Table 5.3.
The m parameter influences only the predator isocline (vertical line), while the prey isocline is 
the same for all m. The equilibria, resulting from the intersection of the two isoclines, are all stable 
in the large and represent widely differing behaviours, ranging from monotonic to a limit cycle, as 
listed in Table 5.3. Some of these results may come as a surprise from a biological viewpoint. In par-
ticular, the case of equilibrium 1 in Figure 5.57 and Table 5.3 shows that the predator population 
0
5
10
15
0
2
4
6
8
10
Prey
Predator
1
2
3
4
Prey isocline
Predator isocline
FIGURE 5.57  Possible equilibria over the isoclines of the generalized model (5.147) as a function of the 
predation coefficient m. See Table 5.3 for the values of the parameters.

316
Environmental Systems Analysis with MATLAB®
is greater than the prey, as though the predator could sustain itself with a very small predation 
­factor, in fact m = 0.0221 in this case. As m increases the pressure on the prey increases too, and for 
m > 0.08 the predator population is less than the prey.
The phase-plane portraits (Figure 5.58) and time behaviour (Figure 5.59) of the model (5.145) 
deserve more comments: at equilibrium point 1 in Figure 5.57, the eigenvalues are real negative 
Phase-plane trajectory
Predator isocline
Prey isocline
0
5
10
15
0
2
4
6
8
10
Prey
Predator
0
5
10
15
0
2
4
6
8
10
Prey
Predator
(1)
(3)
5
10
0
15
0
2
4
6
8
10
Prey
Predator
0
5
10
15
0
2
4
6
8
10
Prey
Predator
(2)
(4)
FIGURE 5.58  Phase-plane portraits of the generalized prey–predator model (5.147) as a function of the 
predation coefficient m. See Table 5.3 for the values of the parameters. The numbers refer to the equilibria of 
Figure 5.57 and of Table 5.3. These graphs were produced with the MATLAB script Go _ Kolmogorov.m 
in the ESA _ Matlab\Exercises\Chapter _ 5\Prey _ Predator\Kolmogorov folder.
TABLE 5.3
Possible Behaviours of the Generalized Prey–Predator Model (Equation 5.145) 
While m Is Varied and the Other Parameters Have the Following Constant Values: 
r
K
p
n
X
a
c
s
==
==
==
==
==
==
==
1;
15;
2.2;
2;
2;
2;
0.08
Point
m
Equilibrium
Eigenvalues
Behaviour
1
0.0221
x
y
=
=
0 8000
2 8954
.
.
λ
λ
1
2
0 6698
0 0567
= −
= −
.
.
Stable monotonic
2
0.0800
x
y
=
=
2 000
1 9762
.
.
λ
λ
1
2
0 0131
0 2809
0 0131
0 2809
= −
+
= −
−
.
.
.
.
j
j
Stable oscillatory
3
0.1479
x
y
=
=
7 0000
3 0778
.
.
λ
λ
1
2
0 1755
0 1035
=
=
.
.
Stable limit cycle
4
0.1563
x
y
=
=
13 0000
1 7971
.
.
λ
λ
1
2
1 34688
0 0014
= −
= −
.
.
Stable monotonic
(slow-fast mixed modes)

317
Population Dynamics Modelling
(see Table 5.3), so the system is expected to converge monotonically to the steady state, but what is 
surprising is that the speed of the prey in reaching the equilibrium (Figure 5.59) is much faster than 
that of the predator at the beginning of the simulation, and then it slows down considerably. In fact, 
the phase-plane trajectory (Figure 5.58) is almost superimposed to the prey isocline, which is the 
locus where its time derivative tends to zero. Thus, the speed of the trajectory in the neighbourhood 
of the isocline is very slow. This explains the apparently strange behaviour of the prey, reflected in 
the time plot of Figure 5.59 (1). The general rule is that trajectories are moving fast when they are 
far from the isoclines and slow when they are near. This also explains the behaviours in the other 
cases. By comparing the phase-plane portraits of Figure 5.58 to the time plots of Figure 5.59, it 
also appears that the limit cycle has fast and slow branches, but the extreme case is that of point 4, 
where the descending branch of the prey isocline is reached very fast. However, once the trajectory 
hugs this locus, it takes ages to reach the equilibrium. The fast/slow behaviour around equilibria 1 
and, even more, 4 is reflected in the differing order of magnitude of the eigenvalues (see Table 5.3) 
controlling the slow and fast modes of the system.
5.5.3.1  A Pasture–Herbivore Model
As an application of the previous generalized prey–predator model, let us next consider a pasture 
grazed by a population of herbivores. In this case, the prey (vegetation)—predator (herbivores) 
model can be set up under the following assumptions:
•	 The vegetation (V) is modelled with a birth-and-death model where the growth is a func-
tion of the rainfall r t( ), and the decay p
( ) is proportional to the vegetation itself
•	 Additionally, the vegetation is consumed by the herbivores with a grazing coefficient q
0
10
20
30
40
50
0
2
4
6
8
10
Time
Populations
0
20
40
60
80
100
0
2
4
6
8
10
Time
Populations
0
100
200
300
400
500
0
5
10
15
Time
Populations
0
10
20
30
40
0
5
10
15
Time
Populations
Prey
Predator
(1)
(2)
(3)
(4)
FIGURE 5.59  Time behaviour of the generalized prey–predator model (5.147) as a function of the predation 
coefficient m. See Table 5.3 for the values of the parameters. The numbers refer to the equilibria of Figure 5.57 
and of Table 5.3.

318
Environmental Systems Analysis with MATLAB®
•	 The herbivores behave like a real predator in the sense that without pasture the population 
will die with extinction rate m
•	 The herbivores normalized functional response is of type 2
•	 The grazing conversion efficiency s is less than q
Under these assumptions, the model can be written as
 
Vegetation
Herbivores
dV
dt
r t
p V
q f V
H
dH
dt
m H
s f V
= ( ) −
⋅
−
⋅( )⋅
= −
⋅
+ ⋅( )⋅






H
	
(5.149)
where
 
f V
V
K
V
v
( ) =
+
	
(5.150)
From Equations 5.149 and 5.150, the equilibrium isoclines can be computed as
 
dV
dt
r
p V
q f V
H
H
r
p V
K
V
q V
dH
dt
m H
s
V
K
V H
v
v
=
⇒
−
⋅
=
⋅( )⋅
⇒
=
−
⋅
(
)
+
(
)
⋅
=
⇒
⋅
=
+
0
0
⇒
=
−
(
)







V
K
s m
v
(
)
/
1
	
(5.151)
where the average rain-induced growth r
r t
=
( )
(
)
mean
 was considered instead of the time-varying 
rainfall samples. Figure 5.60 shows the equilibrium point at the intersection of the isoclines, with 
the arrows in each quadrant indicating the direction of the trajectories, whereas Figure 5.61 shows 
the Simulink model implementing Equation 5.149. Simulating the system with a fluctuating rainfall 
yields the results of Figure 5.62, where in the phase-plane portrait (a), the trajectory meanders about 
the equilibrium because of the fluctuating rainfall. The steady state could eventually be reached 
V
H
Equilibrium
V = 0
H = 0
V =  
H
H
H
V
V
H
V
V
Kv
s
m −1
FIGURE 5.60  Isoclines and equilibrium of the vegetation–herbivores model (Equation 5.151). In each 
quadrant, the sign of the derivatives is indicated by a vector (solid arrow for vegetation, dashed arrow for 
herbivores).

319
Population Dynamics Modelling
only if the rainfall would remain constant at its average value r, which was used to compute the 
equilibrium point. In the time portrait (b), the herbivore population clearly lags the vegetation fluc-
tuations, because of its internal dynamics.
5.5.3.2  The Strange Case of the Spruce Budworm
An interesting example of vegetation–insect interaction, with a major ecological impact, is 
undoubtedly that of the spruce budworm (Choristoneura fumiferana, Clemens) that causes defo-
liation in vast areas of Canada and North America during its periodical outbreaks. This insect, 
and its adverse effects on the spruce and fir forests, have been studied for more than half a century 
Rainfall
Rain
White noise
Rain variance
Type II grazing
Sum 2
p
1/s
Rain
To workspace 3
Veg
To workspace
Herb
To workspace 1
1/s
p
Product
r
q
Sum
dV/dt
Sum 1
dH/dt
q
s
s
r
(Mu∗u[1])/(Kv + u[1])
-K-
+
+
+
+
−
+
−
×
FIGURE 5.61  Simulink diagram implementing the vegetation–herbivores model (Equation 5.151). This 
Simulink model is available as veg _ herb.mdl in the ESA _ Matlab\Exercises\Chapter _ 5\
Pasture folder.
300
150
200
250
0
20
40
60
80
100
120
140
Vegetation
(a)
(b)
Herbovores
Vegetation
Herbivores
Equilibrium
Trajectory
0
200
400
600
800
1000
50
100
150
Rain
0
200
400
600
800
1000
100
200
300
Veg.
0
200
400
600
800
1000
0
50
100
Herb.
Time (d)
FIGURE 5.62  Simulation of the vegetation–herbivores model (Equation 5.151) with a fluctuating rainfall. 
In the phase-plane portrait (a), the trajectory meander around the equilibrium, which it would reach only for 
a constant rainfall. In the time portrait (b), the herbivores lag the vegetation as a result of its internal dynam-
ics. These graphs were obtained with the MATLAB script Go _ Vegetation _ Herbivores.m in the 
ESA _ Matlab\Exercises\Chapter _ 5\Pasture folder.

320
Environmental Systems Analysis with MATLAB®
(Morris and Miller, 1954). Mathematical models have been produced to describe its outbreaks, 
which causes extensive forest defoliation (Ludwig et al., 1978, 1979; Royama, 1984; Royama et al., 
2005). The last major outbreak occurred in the 1970s and damaged more than 50 million ha of 
Canadian forest. Minor infestations were reported between 1999 and 2003, and after a lull, an 
increase of forest damage has been observed since 2006, which is suspected to be a warning sign 
of a new possible massive outbreak. More information on this major pest can be found in the 
National Resources Canada web site (http://www.nrcan.gc.ca/forests/insects-diseases/13383) from 
where this information was obtained. The spruce budworm life cycle is outlined in Figure 5.63, 
in which the larvae feeding period is highlighted. This period represents the critical phase when 
defoliation occurs, causing extensive tree mortality, because the fallen leaves (or needles) cannot 
regrow fast enough to sustain the plant life.
In building the spruce budworm model (Ludwig et al., 1978), the following assumptions were 
made:
•	 The budworm population follows a logistic growth in the absence of predation
•	 The carrying capacity K is related to the foliage density, and it is possible to estimate its 
value
•	 The budworm is subject to predation by insectivorous birds, whose functional response 
is of type 3, meaning that when the budworm density is low, the predation is very low, 
but when the density increases the predation increases at a faster rate, as described by 
Equation 5.141. In particular, in this case, the following form has been selected for the 
functional response
 
p B
B
B
( ) =
⋅
+
β α
2
2
2 	
(5.152)
where:
B represents the budworm density
α β
,  are parameters shaping the functional response
Under these assumptions, the spruce budworm model is the following:
 
dB
dt
r
B
B
K
B
B
B
B
=
⋅
⋅
−



−
+
1
2
2
2
β α
	
(5.153)
Adults emerge from pupae,
lay eggs during summer
Eggs hatch after
less than 2 weeks
Larvae spin a
silken cocoon
and hibernate
until spring
In spring larvae feed
into buds and needles
causing defoliation
Larvae pupate
for 3–5 weeks
FIGURE 5.63  Life cycle of the spruce budworm. The dangerous phase, when the larvae start feeding, has a 
coloured background.

321
Population Dynamics Modelling
The behaviour of this model is best studied by defining the normalized budworm density x
B
=
/α, 
so that Equation 5.153, at steady state dB dt
/
0
=
(
), can be written as
 
r
x
K
x
x
B
B
⋅
−



−⋅
+
(
)
=
1
1
0
2
2
α
β
α
α
	
(5.154)
which after multiplication by α β
/  and defining the quantities
 
R
r
Q
K
B
B
=
⋅
=
α
β
α 	
(5.155)
yields the dimensionless steady-state equation
 
R
x
Q
x
x
⋅
−



−+
=
1
1
0
2
	
(5.156)
whereas the normalized dynamical model is
 
dx
dt
R
x
Q
x
x
=
⋅
−



−+
1
1
2 	
(5.157)
Equation 5.156 has three roots, but they are all real at the intersections between the logistic growth 
rate (left) and the type 3 functional response. These solutions are controlled by the parameter R, 
which plays the role of a growth rate, and Q, which is a normalized carrying capacity. Figure 5.64 
shows the possible relative positions of the two terms of Equation 5.156. In (a), it can be seen that 
the number and location of the equilibria depends on the value of R. In general, there is only one 
intersection, but for a critical range of R values a third (unstable) solution appears in between the 
two stable equilibria, repelling the trajectories towards the other equilibria. Figure 5.64b plots the 
time derivative, starting from differing initial conditions, and invariably ending in a stable equi-
librium point. The two trajectories starting very near to points 1 and 2, close to the unstable point 
(white square), terminate in either the square or dot stable equilibria, depending on whose domain 
of attraction the initial condition was placed. 
By varying both R and Q, the domain of these parameters is divided as shown in Figure 5.65, in 
which a ‘cusp’ shaped area exists in which there are three real roots, that is, three equilibria occur, 
one of which is unstable.
The time behaviour of the model (5.157) in Figure 5.66a shows a non-linear oscillation between 
the two stable equilibria, while the slow sine trend of R is shown in (c).
Because the R variations span the critical range in which a third unstable equilibrium develops, 
a hysteresis results from the variable x being unable to settle at the unstable point and instead being 
attracted to either stable equilibrium, depending on its previous values. The (b) graph shows the 
values of R as a function of the equilibria. The range of instability is indicated by the valley (dotted 
curve) and is relative to the multi-valued branch of the equilibrium curve R x( ). When x decreases 
from a high value, it travels through the upper branch of the hysteresis loop, but when it comes from 
the low values it goes through the lower branch. The two branches reunite when the R x( ) function 
again becomes single valued, asymptotically tending to Q for large R values. Here we have consid-
ered the limited case of a single dynamical equation (5.157), but in Ludwig et al. (1978) the study 
is carried much further by removing the hypothesis of constant parameters and including two more 
variables related to the forest stand and its energy content, eventually explaining the conditions 
leading to the pest outbreaks.

322
Environmental Systems Analysis with MATLAB®
x
R1
R2
R3
Unstable equilibrium
Stable equilibria
Q
x
1 + x2
0
1
2
3
4
5
6
7
8
0.0
0.2
0.4
0.6
0.8
1
0
−1
dx/dt
(b)
(a)
x
1
2
x
Q
R 1−
FIGURE 5.64  Possible equilibria of the steady-state equation (5.156) (a) when the logistic normalized rate R var-
ies and Q = 8. Given the shape of the normalized functional response, one or three intersections may occur. In the 
latter case, the middle point (white square) is unstable, whereas all the others are stable (blue circles or squares). In 
(b), the dynamical trajectories of Equation 5.157 (thick lines) show that the system converges to a stable point (blue 
dots/squares), even if the initial condition (1 or 2) is very near the unstable equilibrium point (white square), even-
tually settling in either stable equilibria. These graphs were obtained with the MATLAB script Go _ spruce _
budworm.m in the ESA _ Matlab\Exercises\Chapter _ 5\Spruce _ budworm folder.
0.2
0.3
0.4
0.5
0.6
0.7
0.8
5
10
15
20
Q
R
0.1
1 equilibrium
1 equilibrium
3 equilibria
one of which
is unstable
FIGURE 5.65  Exploring the distribution of the equilibria in the (R,Q) parameter space. In the grey area, 
only one stable equilibrium is possible, but in the ‘cusp’ shaped blue area, three equilibria are generated by the 
mechanism illustrated in Figure 5.64, one of which is unstable.

323
Population Dynamics Modelling
5.6  FOOD CHAINS
When more species share resources in the same habitat, they define a whole set of trophic rela-
tions that can be viewed as a food chain if there is a cascaded path from one species to the next, 
or rather as a food web if there are several paths connecting the trophic levels. Specifying the 
details of a trophic web is a very complex task and requires a deep knowledge of the habitat and 
the inhabiting species. A notable example of a fishery-oriented ecosystem modelling is Ecopath 
(Christensen and Pauly, 1992; Christensen and Walters, 2004; Christensen et al., 2008), which 
can now be considered as the leading software for modelling aquatic trophic networks, particu-
larly for assessing the viability of a marine ecosystem and for fisheries management. Ecopath, 
in the present version 6, is coupled with a dynamical simulation platform (Ecosim) and is freely 
downloadable from its web site (www.ecopath.org). As with many software packages dealing 
with environmental systems, Ecopath is considerably data hungry, requiring a vast amount of 
information to produce reliable results, including a detailed species inventory, their diet and other 
habitat data. It’s output is equally complex and yields operational directions that can be used for 
fishery management.
On a much more modest level, and for pedagogical purposes, a simple food chain will be illus-
trated here and implemented in MATLAB to gain some hands-on experience. Figure 5.67 illustrates 
the main energy and matter cycling paths in a food chain consisting of three main trophic levels 
(Primary Producers, Herbivores and Carnivores), each transferring—with considerable losses—
energy to the next trophic level. The Decomposers is a fourth trophic level, whose task is to recy-
cle the dead matter from each level into the nutrients pool, to be used by the Primary Producers, 
whereas the Respiration compartment accounts for all non-recoverable energy losses, using the 
oxygen produced by photosynthesis.
The energy balance for each trophic level is given by the algebraic sum of incoming and outgoing 
energy fluxes. Consequently, the generic energy balance will look like
 
dx
dt
F
F
F
F
i =
−
−
−
in
out
resp
decomp	
(5.158)
where xi represents the energy budget of the ith trophic level. Using the notations of Figure 5.67, that 
trophic chain translates into the following energy balances:
0
2
4
6
8
10
0.0
0.2
0.4
0.6
0.8
1.0
x
R
Locus of equilibria
Hysteresis path
Q
0
200
400
600
800
1000
2
4
6
x
0
200
400
600
800
1000
0
0.25
0.50
0.75
1.00
Time
Time
R
(a)
(b)
(c)
FIGURE 5.66  (a) Time evolution of the normalized budworm model (Equation 5.156) with a slow-varying 
growth rate R spanning the ‘cusp’ region of Figure 5.65 (c). In this range of R values, a hysteresis loop is 
developed (b), depending on whether R is increasing or decreasing. Q is the asymptotic value of the extreme 
branch of the R/x curve.

324
Environmental Systems Analysis with MATLAB®
 
Primary Producers
Herbivores
dx
dt
F
F
F
F
dx
dt
F
F
1
01
12
14
10
2
12
=
−
−
−
=
−
23
24
20
3
23
34
30
4
14
−
−
=
−
−
=
F
F
dx
dt
F
F
F
dx
dt
F
Carnivores
Decomposers
+
+











F
F
24
34
	
(5.159)
Because the solar energy is the ultimate energy source F01
(
) for the entire ecosystem, this source 
must be accounted for by the energy budget of each compartment, with the net loss due to respira-
tion, so we have a ‘global’ balance in the form
 
dx
dt
F
F
i
i
i
i
=
−∑
∑
01
0	
(5.160)
where:
i is extended to all the trophic levels in the ecosystem
the Fi0 represent the energy losses due to respiration (including that of the Decomposers)
Solar
energy
Nutrients
pool
Oxygen
Carnivores
decomposition
Decomposers
Carnivores
Primary
producers
Respiration
Primary
Producers
uptake
Carnivores
respiration
Photosynthesis
Nutrients
recycling
Energy
loss
Energy
loss
Herbivores
Primary
Producers
decomposition
Herbivores
respiration
Primary Producers
respiration
Herbivores
decomposition
FIGURE 5.67  A simple food chain consisting of three trophic levels: Primary Producers, Herbivores, 
Carnivores, connected by narrowing arrows representing the diminishing energy transfer from one trophic 
level to the next. The Decomposer provides a nutrients recycle path, whereas the Respiration compartment 
represents an unrecoverable energy loss.

325
Population Dynamics Modelling
Now, the form of the energy fluxes remains to be specified. There are several options, assuming that 
the energy flows from the donor compartment xi
( ) to the acceptor compartment x j
(
):
 
Donor dependent
Receptor dependent
Mutua
F
k
x
F
k
x
ij
ij
i
ij
ij
j
=
×
=
×
l dependency
Lotka
Volterra
F
k
x
x
F
k
x
x
ij
ij
i
j
ij
ij
j
ij
=
⋅
⋅
−
=
⋅
⋅
−
⋅
1 β
j
ij
ij
j
ij
i
ij
j
F
k
x
x
x
(
)
=
⋅
⋅
−
⋅
−
⋅
(
)
Competitive
Functionalrespo
1 α
β
nse
F
k x
x
x
ij
ij
i
j
i
=
⋅
+











γ
	
(5.161)
A simple model for the trophic chain of Figure 5.67 will now be set up assuming that the solar 
energy varies with a yearly cycle that can be approximated with a sinusoid, and that the energy 
transfer between compartments can be modelled with a functional response of type 2. Then, the 
generic model (Equation 5.159) can be specified as follows, supposing that we are modelling a pas-
ture where herbivores graze and are, in turn, predated by carnivores
 
Pasture
Grass growth
dx
dt
r
s t
K
s t
x
Y
g
x
P
x
x
g
g
h
h
g
1
1
1
1
1
=
⋅
( )
+ ( )
⋅
−
⋅
⋅
+
⋅
2
1
2
1
1
2
Grazing
Decay
Herbivor
Herbivores
−
⋅
=
⋅
+
⋅
k
x
dx
dt
g
x
P
x
x
d
h
g
g
es growth
Carnivores predation
Decay
−
⋅
⋅
+
⋅
−
⋅
1
2
2
3
2
Y
g
x
P
x
x
k
x
c
c
c
dh
Carnivores
Carnivores growth
Decay
dx
dt
g
x
P
x
x
k
x
c
c
dc
3
2
2
3
3
=
⋅
+
⋅
−
⋅












	
(5.162)
where the solar energy function s t( ) can be synthesized from the data as explained in Chapter 3. 
The Decomposer compartment was left out of this simplified model as it only becomes impor-
tant when the recycled material is considered, as amply treated in Agren and Bosatta (1996) for 
the growth/predation coupled dynamics between primary production (grass) and herbivores, and 
between herbivores and carnivores. The decay terms include both decomposition and respiration. 
If we reintroduce a Decomposer compartment, then the two components of this term should be 
separated again. In Equation 5.162, the predation/growth terms are coupled by the yield coef-
ficients that account for the lossy energy transfer. They should be interpreted as the amount of 
predator growth per unit of up taken prey, so Y <1. The numerical values of the parameters of the 
model (Equation 5.162) are listed in Table 5.4. Figure 5.68 shows the Simulink model implement-
ing the three equations (5.162).
For a clean representation, the blocks implementing each equation were grouped into a sub-
system, which can be easily expanded to reveal its internal structure just by double-clicking on it, 
as shown in Figure 5.69 for the Pasture subsystem, in Figure 5.70 for the Herbivores subsystem, 
and in Figure 5.71 for the Carnivores subsystem. A period of 3.8 years was simulated with the 
parameter values of Table 5.4, and the model output are shown in Figure 5.72, together with the 
fluctuating solar radiation. It can be seen that all of the variables stabilize into a steady-state 
yearly fluctuations.

326
Environmental Systems Analysis with MATLAB®
Sol_Rad
Grass_Growth
Grazing
Product2
Sum
Herb
Grazing_Yield
Decay_Grass
kdg
rg*u(1)/(kg+u[1])
g1*u[1]/(Pr1+u[1])
×
Product1
×
+
−
−
2
1/s
1
dGrass/dt
Grass_out
1/Yh
1
FIGURE 5.69  Inner structure of the pasture subsystem. The circled numbers indicate the input/output ports.
Sol_rad
From workspace
Pasture
Grazing
Predation
Herbivores
Carnivores
Sol_Rad
To workspace 4
Herb
Carn_in
Herb_out
Herb_in Carn_out
Grass_in
Sol_Rad
Grass_out
Grass
To workspace 2
Herb
To workspace 1
Carn
To workspace
FIGURE 5.68  Simulink diagram implementing the food chain model (Equation 5.162). Each compartment 
has been grouped as a subsystem. Double-clicking on each blue block shows the inner structure of each sub-
system, as illustrated in the following figures.
TABLE 5.4
Parameter Values and Initial Conditions for the Food Chain Model 
(Equation 5.162)
Parameter Value
Meaning and Units
rg = 0.8721
Grass growth rate (1/d)
Kg = 83
Solar radiation half velocity constant (kcal/m2·d)
Pg = 668
Grass half velocity constant (kg/m2)
Yh = 0.141
Herbivores grazing yield (—)
kdg = 0.23
Grass decay rate (1/d)
gh = 0.02224
Herbivores growth rate (1/d)
kdc = 0.02103
Grass decay rate (1/d)
gc = 0.00673
Carnivores growth rate (1/d)
Pc = 854
Carnivores half velocity constant (kg/m2)
Yc = 0.025
Carnivores yield constant (—)
kdc = 0.00122
Carnivores decay rate (1/d)
Go = 12,500
Initial pasture energy (kcal/m2)
Ho = 360
Initial herbivores energy (kcal/m2)
Co = 17
Initial carnivores energy (kcal/m2)

327
Population Dynamics Modelling
Grass_in
1/Yc
Product
Product1
Sum
Integrator
Herb_out
2
1
Herb_Growth
kd1
Herb_decay1
Herb_Predation
Herb_decay
Carn_in
g1*u/(Pr1+u)
1/s
1
g2*u/(Pr2+u)
×
×
+
−
−
FIGURE 5.70  Inner structure of the herbivores subsystem. The circled numbers indicate the input/output ports.
1
Herb_in
Herb_Predation
Carn_decay
×
kdc
Sum
1/s
1
Carn_out
Int
Product 1
g2*u/(Pr2+u)
+
−
FIGURE 5.71  Inner structure of the carnivores subsystem. The circled numbers indicate the input/output ports.
0
200
400
600
800
1000
1200
1400
0.0
0.5
1.0
1.5
2.0
x 105
Pasture
Biomass (kcal/m2)
Solar radiation
Biomass (kcal/m2)
0
200
400
600
800
1000
1200
1400
100
200
300
400
500
Herbivores
Time (d)
Biomass (kcal/m2)
0
200
400
600
800
1000
1200
1400
10
20
30
40
Carnivores
Solar radiation
(w/m2.d)
800
900
700
FIGURE 5.72  Simulation of the food chain model (Equation 5.162) with the parameter values and initial 
conditions of Table 5.4. It can be seen that the fluctuations induced by a varying solar radiation dampen 
down along the food chain where the carnivores eventually stabilize. The considerable loss of energy along 
the chain is typical, though widely variable, of all kinds of ecosystems. These graphs were obtained with the 
MATLAB script Go_Food_Chain_Solar_Rad.m in the ESA_Matlab\Exercises\Chapter_5\
Food_Chain folder.


329
6 Flow Reactor Modelling
In rivers, the water that you touch is the last of what has passed and the first of that which 
comes.
Leonardo da Vinci
We are now going to take a closer look at the inner workings of the environmental processes, 
broadly outlined in Chapter 1. In particular, we have already encountered the problem of setting the 
ecosystem boundaries and of modelling the inner dynamics. Since we shall be considering aquatic 
ecosystems, either natural or man-made, the hydraulics of the waterbody will be of primary impor-
tance to describe the overall system dynamics. This chapter will be devoted to the modelling of the 
reaction vessel, be it an artificial reactor used for wastewater treatment, or a natural waterbody, such 
as a river or a lake.
6.1  CONTINUOUS-FLOW REACTOR MODELLING
A liquid takes the shape of its containment vessel, which defines its shape but cannot control its 
internal movements. Since these water movements are as important as the (bio)chemical reac-
tions which develop therein in defining the overall behaviour of the aquatic environmental system, 
equal attention will be devoted to modelling both these aspects. This chapter will be devoted to the 
hydraulics of the reacting environment, while the chemical and biochemical aspects will be consid-
ered in Chapter 7. Figure 6.1 shows the possible schemes of the reaction volume.
The batch reactor (a) is a closed vessel where no input/output flows are present during the reac-
tion, which is determined by the initial conditions only. Batch reactors are very common in the 
pharmaceutical or food industry, where substrate and microbial inoculum are initially mixed in the 
vessel, and the reaction proceeds with a given time sequence (the ‘recipe’) in terms of temperature 
profile, aeration, mixing, etc. and, at the end of the process, the products are extracted and separated 
(downstream processing). In the natural environment, river impoundments can be approximated 
with a batch reactor, at least during the periods in which this volume is isolated from the rest of the 
waterbody, for example, during low flow. There are no flux transport terms in a batch reactor, and 
the reaction is determined only on the basis of the kinetics terms. We have already seen such an 
example in Section 1.10.4.1, introducing the Monod kinetics in a closed vessel.
The single continuously stirred tank reactor (CSTR) (b) is the next possibility, when a continu-
ous flow is constantly routed through the vessel, which is continuously stirred to ensure a complete 
mixing, hence the acronym CSTR. In this case, both the hydraulic and the kinetic terms contribute 
to the overall reaction rate.
The cascaded CSTR (c) is the next choice, used when a single CSTR does not suffice to reach the 
required degree of reaction.
The plug-flow (PF) reactor (d) will be shown to be the limit of the previous case when an infi-
nite number of infinitely small CSTR is cascaded. It critically rests on the assumption that each 
liquid element does not mix with the adjacent elements, but travels through the tubular reactor as 
an isolated ‘plug’ (hence its name). Its optimality with respect to the previous case (c) will be dem-
onstrated, as well as its usefulness in approximating certain wastewater treatment plants or river 
reaches.
The diffusive reactor (e) is the real-world version of the PF when longitudinal diffusion is sig-
nificant and cannot be overlooked. This scheme is the most versatile in approximating real-world 
river reaches.

330
Environmental Systems Analysis with MATLAB®
6.1.1  Single CSTR
The batch reactor of Figure 6.1a will be considered later when dealing with the reaction kinetics, but 
for now, let us consider the single CSTR of Figure 6.1b, which we have already briefly encountered in 
Section 1.3.1, where a cylindrical vessel was used to demonstrate basic mass conservation principles. 
In that example, we have already examined the general case of time-varying volume. Now, we consider 
instead the most frequent case of constant volume. This case automatically makes the total mass bal-
ance unnecessary, because the input and output flows balance at any one time, that is, F
F
F
in
out
=
=
. 
Under this assumption, the component mass balance Equation 1.13 can now be written as
	
dC
dt
F
V C
C
r C
=
−
(
) ± ( )
in
	
(6.1)
where the first term accounts for the CSTR hydraulics, and the reaction rate r C
( ) will be speci-
fied later.
6.1.1.1  Hydraulic Retention Time
Let us consider the dilution rate q
F V
=
/
 and its reciprocal ϑ = 1/ =
/
q
V F. This term, often referred 
to as hydraulic retention time (HRT), is an important parameter in the CSTR dynamic behaviour. 
To clarify the meaning and role of the HRT, consider injecting a known mass of inert tracer Mo into 
the system. If the injection time is short enough to be approximated by a Dirac pulse of strength 
Mo, the injection immediately sets the concentration in the reactor, previously zero, to C
V
o
o
= M / . 
Since the tracer is inert, r C
( ) = 0, and if no further tracer is injected, that is, Cin = 0, for any t > 0 
Equation 6.1 becomes
	
dC
dt
C
C
Co
= −
( ) =
ϑ
with initial condition
0
	
(6.2)
Equation 6.2 can be integrated by separation of the variables to yield
	
C t
C
e
o
t
( ) =
⋅
−/ϑ	
(6.3)
The plot of Equation 6.3 is shown to the right of the CSTR in Figure 6.2. The shaded area represents 
the amount of tracer still inside the reactor for t
t
≥*, which can be computed as
	
M t
F C t
dt
t
*
*
(
) =
⋅( )⋅
∞
∫
	
(6.4)
(c) 
(d) 
(e) 
(b) 
(a)
FIGURE 6.1  Possible reactor configurations from the batch (a) to the single CSTR (b), cascaded CSTRs (c), 
plug-flow (d), and diffusive reactor (e), each resulting in differing hydraulic regimes, which greatly influences 
the system behaviour, as will be illustrated in this chapter.

331
Flow Reactor Modelling
If we consider C t( ) given by Equation 6.3 as a distribution of concentrations inside the reactor, then 
the average residence time tm
(
) can be computed as
	
t
t C
e
dt
C
e
dt
t
e
e
dt
m
o
t
o
t
t
t
=
⋅
⋅
⋅
⋅
⋅
=
−⋅
⋅
+
⋅
−
∞
−
∞
−
∞
−
∞
∫
∫
/
/
/
/
ϑ
ϑ
ϑ
ϑ
ϑ
ϑ
0
0
0
0∫
∫
−
∞
−
∞
⋅
=
⋅
⋅
=
e
dt
t
e
t
t
/
/
ϑ
ϑ
ϑ
ϑ
0
0
0
because
	
(6.5)
Equation 6.5 shows that ϑ can indeed be regarded as the average residence time of the fluid particles 
inside the reactor. Further, if the tracer is non-reactive, the full amount of injected mass Mo must be 
recovered at the output. Thus,
	
M
VC
FC t dt
FC
e
dt
o
o
o
t
=
=
=
∞
−
∞
∫
∫
( )
0
0
/ϑ
	
(6.6)
but
	
e
dt
e
t
qt
−
∞
−
∞
∫
= −
=
/ϑ
ϑ
ϑ
0
0
	
(6.7)
Substituting in Equation 6.6 yields
	
M
FC
e
dt
FC
V C
o
o
t
o
o
=
=
⋅
=
⋅
−
∞∫
/ϑ
ϑ
0
	
(6.8)
which shows that indeed all of the tracer is recovered at the output.
6.1.1.2  Which Input for the CSTR?
There are two possible inputs to the CSTR: flow F and input concentration Cin. Though, in general, 
both may be assumed to be time varying, let us first consider the two special cases in which one is 
kept constant while the other is allowed to vary. Assuming a first-order kinetic term −⋅
(
)
k C , in the 
two cases the resulting models are fundamentally different
	
Constant feed concentration
Constant flo
in
dC
dt
F
V C
F
V C
k C
=
⋅
−
⋅
−⋅
w
in
dC
dt
F
V
k C
F
V C
= −
+




+
	
(6.9)
t = 0 
F = cost.
t
Mo
Mo
Mo ⋅ δ(t)
M(t*)
t
Cin
t*
C(0  −) = 0 
C(0 +) = Co = V
V,C
FIGURE 6.2  Defining the HRT through a tracer pulse injection. The impulsive nature of the injection causes 
the concentration to rise instantly from 0 to Co = Mo/V.

332
Environmental Systems Analysis with MATLAB®
Figure 6.3 shows the two input situations described by the Equation 6.9. In the constant input con-
centration case, the flow is allowed to vary, with its variations influencing the HRT. The resulting 
model is nonlinear because the middle term is the product between the input F and the state variable C. 
In the constant-flow case, the model is instead linear in the concentration, because the input F is 
assumed to be constant. Hence, the dynamic coefficient 1/ +
ϑ k
(
) is composed of two terms, the 
first being the contribution of the hydraulics, through the HRT, and the second being the kinetic 
contribution.
Let us now consider the constant-flow case, which is described by a linear system, still assuming 
a first-order kinetics. The steady-state relationship between the input and output concentrations can 
be determined as
	
qC
q
k C
C
C
q
q
k
k
N
in
out
in
Da
=
+
(
)
⇒
=
+
=
+
⋅
=
+
1
1
1
1
ϑ
	
(6.10)
where the product of the kinetic constant and the HRT ϑ =
(
)
1/q  is referred to as the Damköhler 
number NDa
(
) in the chemical engineering literature (see, e.g., Levenspiel, 1972). Equation 6.10 can 
also be used in reverse to compute the HRT ϑ*
(
) required to obtain a prescribed extent of reaction 
β=
/
out
in
C
C  given the kinetic rate k
	
ϑ
β
* =



−





=



−






1
1
1
1
1
k
C
C
k
in
out
	
(6.11)
6.1.1.3  Linearization of the CSTR Dynamics
If the flow is assumed to be the system input, then we have already seen that the system is nonlinear. 
Suppose that the flow switches between two values F1 and F2 with F
F
1
2
>
. The CSTR response is 
asymmetrical because the flow is part of the time constant
	
−
+



→
−
+




−
+




F
V
k
F
V
k
F
V
k
1
2
Fast time constant
Slow  time constant






	
(6.12)
and the asymmetrical output concentration is shown in Figure 6.4.
This system can be linearized by selecting an equilibrium pair q C
o
o
,
in
(
) from which the steady-
state output concentration can be computed as
	
C
q
q
k C
o
o
o
o
out
in
=
+
	
(6.13)
(b) 
Constant flow feed
(a) 
Constant conc. feed
F
Cin
F,Cin
F,C
V,C
F
F,Cin
F,C
Cin
Cin
V,C
FIGURE 6.3  Possible input choices for the CSTR. In (a), the input concentration is kept constant, while the 
flow varies. In (b), instead, the flow is kept constant, while the input concentration varies.

333
Flow Reactor Modelling
The incremental linear model now has the form
	
dC
dt
f
C
C
f
q
q
f
C
C
C
q
C
i
o
o
io




= ∂
∂
+ ∂
∂
+ ∂
∂
in
in
	
(6.14)
which by computing the partial derivatives, yields
	
∂
∂
= −
+
(
)
∂
∂
=
−
∂
∂
=











⇒
= −
f
C
q
k
f
q
C
C
f
C
q
dC
dt
C
o
q
o
o
i C
o
o
o
io
in

q
k C
C
C
q
q C
o
o
o
o
i
+
(
)
+
−
(
) +



in
	
(6.15)
If instead, the kinetic is of second order, that is, −⋅
k C 2, the reactor dynamics becomes
	
dC
dt
q C
C
k C
=
−
(
) −
⋅
in
2	
(6.16)
and its equilibrium value can be computed by solving the second-order algebraic equation
	
k C
q
C
q
C
o
o
o
o
o
⋅
+
⋅
−
⋅
=
2
0
in
	
(6.17)
whose only feasible solution is
	
C
q
q
kq C
k
o
o
o
o
o
= −
+
+
2
4
2
in 	
(6.18)
The linearized model in this case is
	
∂
∂
= −
+
(
)
∂
∂
=
−
∂
∂
=











⇒
f
C
q
kC
f
q
C
C
f
C
q
dC
d
C
o
o
q
o
o
i C
o
o
o
io
2
in

t
q
kC
C
C
C
q
q C
o
o
o
o
o
i
= −
+
(
)
+
−
(
) +
2



in
	
(6.19)
C
 + k
Slow time constant
Fast time constant
F1
F1
F1
F2
0
5
10
15
0
5
10
15
20
1.0
1.5
2.0
2.5
0
5
10
15
20
F,Cin
F,C
Cin
V,C
V
 + k
F2
V
FIGURE 6.4  A square-wave input flow produces an asymmetrical response of the CSTR with first-order kinet-
ics, because the varying flow changes the reactor time constant. This simulation was obtained with the MATLAB 
script Go _ CSTR _ square _ flow.m in the ESA _ MATLAB\Exercises\Chapter _ 6\CSTR folder.

334
Environmental Systems Analysis with MATLAB®
The comparison between the step response of a CSTR with second-order kinetics and its linearized 
approximation according to Equation 6.19 is shown in Figure 6.5.
6.1.2  Chain of Cascaded CSTR
The amount of reaction provided by a single CSTR may not provide the required extent of reaction. 
For this reason, CSTRs are often cascaded, as we have already seen in the case of the Nash chain 
of reservoirs, Section 1.8.3.1. Let us first consider a pair of cascaded CSTRs with a first-order kinet-
ics, as depicted in Figure 6.6, in which the output of the first CSTR C1
(
) is the input to the second. 
Assuming a constant flow throughout the system, the combined model is
	
dC
dt
F
V C
F
V C
kC
dC
dt
F
V C
F
V C
kC
1
1
1
1
1
2
2
1
2
2
2
=
−
−
=
−
−
in
	
(6.20)
which can be written in matrix form as
	


C
C
F
V
k
F
V
F
V
k
C
C
F
V
1
2
1
2
2
1
2
1
0
0





=
−
−
−
−












× 


+










Cin	
(6.21)
0.0
0.5
1.0
1.5
2.0
2.5
3.0
0.72
0.74
0.76
0.78
0.80
0.82
Time
Concentration
Old regime
New regime
Nonlinear model
Linearized model
FIGURE 6.5  Comparison between the step response of a CSTR with second-order kinetics and its linear-
ized approximation, which is accurate in the neighbourhood of the old regime, but grossly wrong near the 
new regime. This simulation was obtained with the MATLAB script Go _ CSTR _ secons _ ord.m in the 
ESA _ MATLAB\Exercises\Chapter _ 6\CSTR folder.
Cin
C1
C2 = Cout
V1,C1
V2,C2
FIGURE 6.6  A cascade of two CSTRs in series.

335
Flow Reactor Modelling
By inspection, it can be seen that the system matrix is lower–triangular, and its eigenvalues are
	
λ
λ
λ λ
1
1
2
2
1
2
0
= −
−
= −
−
<
F
V
k
F
V
k
,
	
(6.22)
So we can conclude that the system is always stable because its eigenvalues are real negative.
The cascaded arrangement can be extended to n CSTRs, and the overall model then becomes
	
dC
dt
F
V C
F
V C
kC
dC
dt
F
V C
F
V C
kC
dC
dt
F
V C
n
n
n
1
1
1
1
1
2
2
1
2
2
2
1
=
−
−
=
−
−
=
−
−
in

F
V C
kC
n
n
n
−
	
(6.23)
or, in matrix form,
	



C
C
C
F
V
k
F
V
F
V
k
n
1
2
1
2
2
0
0
0
...
...
...
...
...
.














=
−
−
−
−
..
...
0
0
0
1
2
F
V
F
V
k
C
C
C
n
n
n
−
−






















×












+
















F
V
C
1
0
0
...
in	
(6.24)
The system matrix is still lower–triangular, with eigenvalues
	
λ
λ
λ
λ λ
λ
1
1
2
2
1
2
0
= −
−
= −
−
= −
−
<
F
V
k
F
V
k
F
V
k
n
n
n
,
,
,
...
	
(6.25)
Therefore, the cascade of n CSTRs is unconditionally stable. Regarding the time response of the 
CSTR chain, Figure 6.7 shows that the impulse injection changes the initial condition of the first 
tank from zero to M V
o/  while all the others remain at zero. Hence, the impulse response of the first 
tank is radically different from that of the following tanks, which start from their naturally zero 
initial conditions. The concentration peak is progressively delayed along the reactor chain, but the 
area of each response is still equal to the injected mass Mo.
In analysing the impulse response already treated in Section 1.8.3.1 we now take a step further. 
Let us suppose that a unit pulse of inert tracer is injected into the tank. We have already computed 
the response as
	
1
1
1
0
1
0
=
=
=
×
−
(
) ⇒
=
−
(
)
∞
−
−
∞
∫
∫
C t dt
A
t
e
dt
A
n
q
A
q
n
n
qt
n
n
( )
!
!	
(6.26)
where:
q is the dilution rate constant and 
A is a normalization factor, so that the output concentration can be written as

336
Environmental Systems Analysis with MATLAB®
	
C t
q
n
t
e
n
n
qt
( )
!
=
−
(
)
−
−
1
1
	
(6.27)
If the amount of injected tracer is Mo, then
	
M
VC
F C
q
C t
C
q
n
t
e
o
o
o
n
n
qt
=
=




⇒
=
−
(
)
−
−
−
0
1
1
1
( )
!
	
(6.28)
6.1.2.1  MATLAB Modelling of the Cascaded CSTRs
Before examining more reactor structures, let us pause and consider the MATLAB® ­implementation 
of the reactor chain that produced the graphs in Figure 6.7. First, a Simulink® model is set up for the 
elementary CSTR, and then this structure is replicated for the whole chain by connecting identical 
subsystems, as shown in Figure 6.8.
The launch MATLAB script is conceived to simulate both the impulse and the step response. We 
have already seen that the former is obtained by changing the initial condition of the first reactor to 
C
M V
o
o
=
/  while leaving all the other initial conditions and the input concentration Cin to zero. The 
step response, instead, is obtained by leaving all the initial conditions to zero and setting the input 
concentration to the desired value Cin. If the same script is to simulate both regimes, it is convenient 
to use a switch command with labels ‘step’ and ‘impulse’ to set up the appropriate simulation 
conditions, as listed in Box 6.1. Figure 6.9 shows the simulated response obtained with the Simulink 
model of Figure 6.8 and the MATLAB launch script of Box 6.1.
0
50
100
150
200
250
0.00
0.05
0.10
0.15
0.20
0.25
0.30
0.35
0.40
0.45
0.50
Time
Concentration (mg L−1)
CSTR1
CSTR2
CSTR3
CSTR4
Mo
Mo
Cin(0 +) =  V1
C2(0) = 0
C3(0) = 0
C4(0) = 0
FIGURE 6.7  Impulse response of a chain of cascaded CSTRs. A finite amount of tracer (Mo) is injected into 
the first reactor and propagates through the chain as shown in the lower graph.

337
Flow Reactor Modelling
Ci
Ci
In1
Out1
CSTR1
1
In1
1
Out1
q
q + k
Dilution
Integrator
Dilution + kinetics
In1
Out1
CSTR2
In1
Out1
CSTR3
In1
Out1
CSTR4
Pulse
To workspace
+
−
1s
FIGURE 6.8  Simulink diagram of the CSTR _ cascade.mdl model, showing the system modularity: a 
cascade of CSTRs can be formed by modelling the single CSTR (lower inset) and connecting them in series. 
Of course, the initial conditions of each subsystem must be set up individually (see launch MATLAB script 
in Box 6.1).
0
50
100
150
0.0
0.1
0.2
0.3
0.4
0.5
Time (min)
Concentration (mg L−1)
0
50
100
150
0.0
0.2
0.4
0.6
0.8
1.0
Time (min)
Concentration (mg L−1)
Impulse response with k = 0
Step response with k = 0
Impulse response with k = 0.05
Step response with k = 0.05
CSTR1
CSTR2
CSTR3
CSTR4
0
50
100
150
0.0
0.1
0.2
0.3
0.4
0.5
Time (min)
Concentration (mg L−1)
CSTR1
CSTR2
CSTR3
CSTR4
CSTR1
CSTR2
CSTR3
CSTR4
0
50
100
150
0.0
0.1
0.2
0.3
0.4
0.5
Time (min)
Concentration (mg L−1)
CSTR1
CSTR2
CSTR3
CSTR4
FIGURE 6.9  Impulse and step response of a chain of CSTR with inert (k = 0) and reactive (k = 0.05) 
tracer obtained with the combination of the Simulink model of Figure 6.8 and of the MATLAB script of 
Box 6.1. The full launch MATLAB script is Go _ CSTR _ chain.m in the ESA _ MATLAB\Exercises\
Chapter _ 6\Cascade _ CSTR folder.

338
Environmental Systems Analysis with MATLAB®
6.1.3  Steady-State Analysis of the Cascaded CSTRs
Though the kinetic constant is the same for all tanks, Figure 6.9d shows more clearly than the 
pulse response of Figure 6.9c that the tracer abatement is not uniform along the reactor chain, with 
the first tank producing the largest reduction, and the subsequent tanks apparently contributing by 
progressively smaller amounts. How can this be explained? Let us recall that, according to the first-
order kinetics, the reaction rate is proportional to the concentration, that is,
	
dC
dt
k C
= −⋅	
(6.29)
Therefore, the higher the concentration C, the faster will be its decay, and hence the decreasing con-
centration along the chain produces a progressively slower reaction rate, reducing the contribution 
of each reactor along the cascade. Now, we set out to investigate the efficiency of the cascade under 
two differing viewpoints, by posing the following two optimization problems:
	
1.	Given a prescribed extent of reaction β = C
C
out
in
/
, determine the minimum total retention 
time Θmin
(
), supposing that all the tanks have equal HRT ϑ=
/
Θ n.
	
2.	Given the total retention time Θ, find the largest achievable extent of reaction βmax.
BOX 6.1  MATLAB LAUNCH SCRIPT TO SIMULATE THE 
IMPULSE AND STEP RESPONSE OF THE CSTR CHAIN
% Select the response
% Select the input (uncomment the desired one)
% input_mode=‘pulse’; 
input_mode=‘step’;
V=20;    % Volume of each CSTR (L)
F=1;     % Flow (L/min)
q=F/V;   % Dilution rate
k=0.05;  % Reaction first-order kinetics
switch input_mode
  case ‘pulse’
      Mo=10;   % Amount of injected tracer (mg)
      Co=Mo/V; % Initial concentration of first CSTR 
      Ci=0;    % No input
  case ‘step’
      Ci=1;    % Input concentration for t>0
      Co=0;    % Zero initial conditions for all CSTRs
end
tfin=250;
[t,x,y]=sim(‘CSTR_cascade’,tfin);
figure(1)
plot(t,pulse(:,4),‘b’,t,pulse(:,3),‘:b’,t,pulse(:,2),‘-.b’, 
t,pulse(:,1),‘--b’,‘LineWidth’,2)
set(gca,‘FontName’,‘Arial’,‘FontSize’,12)
switch input_mode
  case ‘pulse’
    legend(‘CSTR1’,‘CSTR2’,‘CSTR3’,‘CSTR4’,‘location’,‘northeast’)
  case ‘step’
    legend(‘CSTR1’,‘CSTR2’,‘CSTR3’,‘CSTR4’,‘location’,‘east’)
end
xlabel(‘time (min)’)
ylabel(‘Concentration (mg/L)’)

339
Flow Reactor Modelling
Let us now start by considering the first problem. Suppose that the reaction follows a first-order 
kinetics, so that the extent of reaction is related to the kinetic rate and the retention time of each 
CSTR ϑ
( ) by the relation
	
β
ϑ
=
=
+
⋅




C
C
k
n
out
in
1
1
	
(6.30)
First, let us show that the total HRT required to achieve the same extent of reaction with two cas-
caded reactors ϑ2
(
) is less than that of a single CSTR ϑ1
(
). If both systems are to provide the same 
extent of reaction
	
β
ϑ
ϑ
=
+
⋅



=
+
⋅
1
1
1
1
2
2
1
k
k
 Two cascaded
CSTR
One single
CSTR
	
(6.31)
solving for ϑ1 yields
	
ϑ
ϑ
ϑ
ϑ
1
2
2
2
2
2
=
+
⋅
(
) >
⋅
k
	
(6.32)
Thus, the total HRT of the single CSTR ϑ1
(
) is more than twice the HRT of each CSTR ϑ2
(
) of 
the chain, demonstrating that the same extent of reaction can be achieved with a lower HRT, that 
is, a smaller total volume in the cascade arrangement. This result can be generalized to a chain of n 
cascaded elements by solving Equation 6.30 for the HRT of the single reactor in the chain
	
ϑ
β
n
n
k
=



−










1
1
1
1
	
(6.33)
Figure 6.10a shows the reduction of the HRT of each reactor of the cascade ϑn
(
) with the increas-
ing number n of elements in the chain. The dashed line is the no-improvement case, where the total 
volume is simply divided by the number of elements. Since the cascaded CSTRs (dotted line) are 
always below the no-improvement locus (dashed line), there is indeed an improvement in splitting 
a given reaction volume in a chain of equal CSTRs. Figure 6.10a also shows that the improvement 
provided by the chain is higher at the beginning, and then tapers out, so that the reactors added after 
the first few elements bring little, if any, improvement. Consequently, it makes sense to look for the 
minimum overall HRT Θmin
(
) that can be achieved, regardless of the number of reactors.
This can be computed as the limit of Θ =
⋅
n
n
ϑ , with ϑn given by Equation 6.33, for n →∞.
 
Θmin
/
lim
lim
=
⋅
(
) =
×




−








→∞
→∞
n
n
n
n
n
n
k
c
ϑ
β
1
1
1
1
defining
=
=










−








=
−
→∞
→
1
1
1
1
1
1
0
β
β
x
n
n
c
n
n
x
x
then lim
lim
/
x
e
x
e
x
c
c
e
x
x
c
x
c
x
x
c
=
−
=
−
⋅
( )
( )
−
→
( )
( )
→
( )
lim
ln
ln
lim
ln
ln
ln
0
0
1
1
but
1
1
1
1
x
c
k
⋅
( )
=
=




ln
ln
min
thus,
Θ
β
	(6.34)

340
Environmental Systems Analysis with MATLAB®
Equation 6.34 solves the first of the two problems that we have just posed. It yields the minimum 
overall HRT Θmin
(
) for a prescribed extent of reaction β. The advantage of splitting decreases for 
large values of n, and Figure 6.10b shows that the total HRT of the chain can never be less than Θmin 
given by Equation 6.34.
Now, we turn our attention to problem 2: find the largest achievable extent of reaction βmax, for a 
prescribed total retention time Θ. Suppose that the chain is composed of equal reactors, each with 
HRT ϑn equal to a fraction of the total HRT, that is, ϑn
n
= Θ/ . Then, the extent of reaction can be 
computed by rearranging Equation 6.30 in terms of the overall HRT
	
β =
=
+
⋅










C
C
k n
n
out
in
1
1
Θ
	
(6.35)
Considering the logarithm of β and taking the limit for n →∞ yield
	
lim ln
lim
ln
/
lim
n
n
n
C
C
k
n
n
→∞
→∞
→∞



=
−
+(
)





=
−
out
in
1
1
1
Θ
1
1
2
2
+(
)
(
)

−(
)


−
= −
k
n
k
n
n
k
Θ
Θ
Θ
/
	
(6.36)
Thus, the maximum achievable extent of reaction βmax for a prescribed total HRT Θ is
	
βmax =
=
−
C
C
e k
out
in
Θ	
(6.37)
Figure 6.11 shows the decreasing normalized output concentration Cout at the output of each CSTR 
in the chain for a varying number of HRT partitioning, computed as
	
C
i
C
i
k
i
i
n
C
out
out
out
in
with
and
C
( ) =
−
(
)
+
⋅(
)
≤≤
( ) =
=
1
1
2
1
1
Θ
	
(6.38)
By comparison, the output obtained by Equation 6.37 as the normalized HRT varies from 0 to 1 is 
also shown in the figure.
1
2
3
4
5
6
7
8
9
10
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Normalized single HRT
Number of reactors
1
2
3
4
5
6
7
8
9
10
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Normalized total HRT
Number of reactors
(a)
(b)
Normalized HRT of each single CSTR
Normalized total HRT
Cascaded CSTRs
Equal partition
Cascaded CSTRs
Limit HRT Θmin
Θmin
FIGURE 6.10  (a) Improvement in the HRT of each cascaded reactor ϑn
(
) to achieve a prescribed extent of 
reaction β. By comparison, the dashed curve shows the case of no improvement. (b) Total HRT as a function 
of the number of chain elements to achieve the same β. The dashed line represents the minimum HRT Θmin
(
) 
of Equation 6.34 achievable with an infinite chain of CSTRs.

341
Flow Reactor Modelling
	
C
C
e
C
k
out
in
in
with
and
=
⋅
≤
≤
=
−⋅ϑ
ϑ
0
1
1	
(6.39)
Note that the normalized concentration at the end of the system is always above the value of the 
dashed curve, indicating that the abatement achieved by Equation 6.39 is the limit extent of reac-
tion. We shall see in Section 6.2 that a physical reactor, the PF, is indeed capable of achieving this 
extreme extent of reaction βmax for a given volume. Equation 6.37 solves the second optimization 
problem of determining the maximum achievable extent of reaction for a given HRT Θ.
6.1.4  Feedback CSTR
In some cases, the flow along the CSTR chain is not unidirectional, as there may exist a counter-
current returning part of the flow to the upstream reactor. There are several practical instances of 
this bidirectional flow, as exemplified in Figure 6.12. In (a), two communicating waterbodies of 
largely differing dimensions, for example, a lake and a embayment, can exchange mass through 
diffusion; in (b) two counter-rotating impellers in a wastewater oxidation tank create opposing 
currents with a bidirectional mass exchange; (c) shows the situation of a stratified lake during the 
summer months. The lake is practically divided into two horizontal layers, the upper Epilimnion 
and the lower Hypolimnion, which exchange mass through vertical mixing; finally, in (d) the mass 
exchange takes place between the waterbody of a lake or river and the bottom sediment through the 
opposite processes of settling and resuspension. The difficulty in modelling any of these situations 
rests in the fact that the internal exchange flows are not easily measurable, especially when they are 
not bulk fluxes, but are driven by diffusion, as will be explained shortly.
Let us model the feedback two-tank system according to the scheme of Figure 6.13, with F21 rep-
resenting the feedback flow from tank 2 back into tank 1, while F12 is the forward flow. Supposing 
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Normalized HRT
Partitioning in 2 reactors
CSTRs
PF
Cout
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Normalized HRT
Partitioning in 6 reactors
CSTRs
PF
Cout
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Normalized HRT
Partitioning in 4 reactors
CSTRs
PF
Cout
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Normalized HRT
Partitioning in 8 reactors
CSTRs
PF
Cout
FIGURE 6.11  Normalized concentration at the output of each CSTR of the chain for differing numbers of 
reactors as a function of the normalized HRT. The dashed curve indicates the minimum output concentra-
tion achieved by the PF reactor (Section 6.2). These graphs were obtained with the MATLAB script Go _
Fractionation.m in the ESA _ MATLAB\Exercises\Chapter _ 6\Cascade _ CSTR folder.

342
Environmental Systems Analysis with MATLAB®
that a chemical reaction takes place in the system with a first-order kinetic, and that the kinetic rate 
constant k is the same for both tanks, the model of the feedback system can be written as
	
tank 1
tank  2
in
in
dC
dt
F
V C
F
V C
F
V C
kC
dC
dt
F
V C
1
1
21
1
2
12
1
1
1
2
12
2
=
+
−
−
=
1
21
2
2
2
2
2
−
−
−
F
V C
F
V
C
kC
out
	
(6.40)
which, in compact matrix notation, becomes
	


C
C
F
V
k
F
V
F
V
F
V
F
V
k
1
2
12
1
21
1
12
2
21
2
2





=
−
−
−
−
−












out
× 


+










C
C
F
V
C
1
2
1
0
in
in	
(6.41)
The steady-state solution of Equation 6.41 can be computed as
	
C
C
F
V
k
F
V
F
V
F
V
F
V
k
= −
⋅⋅
= −
−
−
−
−
−











−
A
b
1
12
1
21
1
12
2
21
2
2
in
out

×










×
−1
1
0
F
V
C
in
in	
(6.42)
Epilimnion
Hypolimnion
Mixing
Mixing
Resuspension
Settling
Water
Sediment
Bay
Lake
(a)
(b)
(c)
(d)
Diﬀusion
FIGURE 6.12  Examples of feedback CSTRs. (a) A lake and a smaller embayment can exchange mass 
through diffusion. (b) Two counter-rotating impellers in a wastewater treatment tank create counter currents. 
(c) During the summer stratification, the two horizontal layers of a lake have a limited mass exchange through 
vertical mixing. (d) Mass exchanges between the waterbody and the sediment in a lake or river occur through 
the opposite processes of settling and resuspension.
Fin,Cin
Fout,Cout = C2
F12,C1
F21,C2
V1,C1
V2,C2
FIGURE 6.13  Ideal scheme of a two-tank feedback system, with the counter-current flow F21 representing 
the feedback path.

343
Flow Reactor Modelling
and its stability depends on the eigenvalues of the system matrix A. Their real part is negative if
	
tr A
A
( ) =
+
(
) <
( ) =
⋅
>
λ
λ
λ
λ
1
2
1
2
0
0
and
det
	
(6.43)
which, in this case, yields
	
tr
F
V
F
V
F
V
k
F
V
k
F
A
A
( ) = −
−
−
−



<
( ) =
+



⋅
12
1
21
2
2
12
1
2
0
out
det
21
2
2
21
1
12
2
0
V
F
V
k
F
V
F
V
+
+



−
⋅





>
out
	
(6.44)
The eigenvalues are mainly influenced by the size of the two volumes. If V1 and V2 differ by one 
or more orders of magnitude, then the eigenvalues, which are always negative real as shown by 
Equation 6.44, also differ by one or more orders of magnitude, thus generating a stiff system 
(Quinney, 1987; Dormand, 1996; Butcher, 2003), with a fast and a slow mode. This is reflected in 
the variable behaviour of C1 in Figure 6.14, where the initial fast mode is gradually replaced by 
the slow mode. Figure 6.15 confirms, on a logarithmic scale, the dependence of the eigenvalues λ1 
and λ2 on the volume ratio. While the fast mode λ2
(
) remains almost constant for a volume ratio 
above five, the slow mode progressively approaches zero, thus making the slow mode more and 
more dominant.
6.1.5  Generalized CSTR
We are now in a position to generalize the CSTR model by writing a balance across the boundaries 
of the control volume, indicated by the dashed marquee in Figure 6.16, considering the following 
inputs and outputs:
0
5
10
15
20
25
30
35
40
45
50
0
5
10
15
20
25
30
Concentration
Time
Fast mode
Slow mode
C1
C2
Fin = Fout = 2; 
k = 0.02
V1 = 2, V2 = 200
λ1 = −0.0300
λ2 = −1.5250
F12 = 3, F21 = 1
⇒
FIGURE 6.14  The feedback system of Figure 6.13 may become stiff if the volumes are significantly differ-
ent. In this case, the system response includes both a fast and a slow mode.

344
Environmental Systems Analysis with MATLAB®
•	 Dilution input F C
⋅
(
)
in
•	 Mass loading input W
(
)
•	 Sediment resuspension flux from the sediment to the water compartment through the cross 
section A and upward velocity vr v A C
r
s
(
)
•	 Sedimentation flux from the water compartment to the sediment through the cross section A 
and downward velocity vs v A C
s
(
)
Combining the above features yields the dynamics of the water compartment as
	
V dC
dt
W
F C
J
J
F C
k C V
r
s
=
+
⋅
+
−
−
⋅
−
⋅
⋅
in
	
(6.45)
The sedimentation and resuspension fluxes Jr and J s can be regarded as mass transfer terms involv-
ing the particulate matter and can be parametrized as first-order kinetics, defining an average equiv-
alent depth h
V A
=
/
	
h
V
A
J
v AC
vV
h C
V kC
k
v
h
=
⇒
=
=
=
=
with
	
(6.46)
0
10
−101
−100
−10−1
−10−2
20
30
40
50
60
70
80
V2/V1
λ1 → Slow mode
λ2 → Fast mode
FIGURE 6.15  Eigenvalues of the feedback system of Figure 6.14 as a function of the volume ratio.
A
V
C
W
Water
F,Cin
F,C
Cs
Sediment
vs
vr
FIGURE 6.16  Conceptual scheme of a generalized CSTR, which includes external mass loading (W), re-­
suspension (vr) and sedimentation (vs). The control volume for the mass balance is indicated by the dashed box.

345
Flow Reactor Modelling
so the two mass fluxes across the water-sediment boundary can be written as
	
J
V k C
k
v
h
J
V k C
k
v
h
r
r
s
r
r
s
s
s
s
=
=
=
=
with
with
	
(6.47)
Substituting Equation 6.47 into the dynamic balance Equation 6.45 and dividing by the volume V 
yield the generalized CSTR model
	
dC
dt
W
V
q C
k
C
k
C
q C
k C
r
s
s
=
+
⋅
+
⋅
−
⋅
−
⋅
−
⋅
in
	
(6.48)
6.2  PLUG-FLOW REACTOR
Extending to the limit, the chain of CSTRs of Section 6.1.2, Equation 6.37 has demonstrated 
that in principle a reactor exists which can maximize the extent of reaction βmax for a given HRT. 
Such a reactor is not a mathematical abstraction, though, but an actual tubular reactor, provided 
that the hydraulic regime is such that each element of fluid (the ‘plug’) does not mix with the 
adjacent ones, implementing in fact a cascade of tiny CSTRs in each of which the reaction goes 
on without any interference from the neighbouring elements, that is, without any cross-mixing. 
Many physical examples of tubular reactors exist that approximate the PF condition well, such 
as a slow-flowing river or, in a wastewater treatment plant, a reaction tank whose length is much 
greater than its cross section.
The PF is best modelled as a steady-state system in which the hydraulic regime is constant and 
the flow time ts is related to the longitudinal dimension (x) of the reactor by the relation
	
t
x
u x
s = ( )
	
(6.49)
where:
x is the distance from the upstream end of the reactor and 
u x( ) is the flow velocity, averaged across the reactor section
Without chemical kinetics, the PF introduces a mere input–output delay so that its output is a 
delayed version of the input
	
C
t
C
t
out
in
( ) =
−
(
)
δ 	
(6.50)
The delay δ coincides with the PF HRT ϑPF. In fact, if V is the reactor volume, from Equation 6.49 
it follows that
	
V
S x
F
S u
V
F
S x
S u
x
u
=
⋅
=
⋅



⇒
=
=
⋅
⋅
=
=
ϑ
δ
PF
	
(6.51)
where S is the reactor cross section. If a chemical reaction takes place inside the tubular reactor, 
then its development is the same as would occur in a batch reactor travelling through the tubular 
reactor with velocity u defined by Equation 6.49. Combining the travel time with the reaction rate, 
the concentration along the reactor can be expressed either as a function of the flow time ts or as a 
function of the position along the reactor length (x) as

346
Environmental Systems Analysis with MATLAB®
	
C t
C
t
t
e
C x
C
e
s
s
k t
k x
u
s
( ) =
−
(
)⋅
( ) =
⋅
−⋅
−
in
in
	
(6.52)
Figure 6.17 shows the concentration along the PF, computed either as a function of flow time ts or as 
a function of position along the reactor length, according to Equation 6.52.
If the PF is considered to be in a hydraulic steady state, the delay due to travel time becomes 
irrelevant and the extent of reaction can be computed by considering the spatial dimension only. 
Assuming again a first-order kinetic, the chemical transformation along the PF can be modelled as
	
dC
dt
k C
dC
dx u
k C
dC
dx
k
u C
s
= −⋅
⇒
= −⋅
⇒
= −
/
	
(6.53)
Separating the variables and integrating along the reactor length yields
	
dC
C
k
dx
u
C
C
k
u L
k S
F L
k
C
C
C
C
L
in
out
out
in
out
i
∫
∫
= −



= −
= −
= −⋅
=
0
ln
ϑ
n ⋅
−⋅
e k ϑ
	
(6.54)
which coincides with the limit value of the CSTR chain Equation 6.39, apart from the normaliza-
tion factor Cin =
(
)
1 . Consider that in the PF model, the input term does not appear explicitly, but is 
incorporated in the initial condition Cin.
So far, we have considered a first-order kinetic, which is the most widespread, but there are other 
possibilities, and it is interesting to compare the performance of the PF to that of the CSTR using a 
few other types of kinetics.
Zero-order kinetics. In this case the reaction rate is constant, irrespective of the concentration, 
that is,
Cin
Cin
Cout
Cout
C(x)
C(x) = Cin ⋅ e
ku x
−
x1
x = L
x = 0
t1 = x1
u
t2 = x2
u
C(x1) = Cin ⋅ e
ku x1
−
C(t1) = Cin(t − t1) e−kt1
C(x2) = Cin ⋅ e
ku x2
−
C(t2) = Cin(t − t2) e−kt2
ts(L) = Lu
V
F
L ⋅ S
F
 = 
 =  = ϑPF
Cout = C(L) = Cin ⋅ e−k.ϑPF
x2
FIGURE 6.17  Concentration along a tubular reactor operated with a PF regime, expressed either as a func-
tion of flow time or as a function of position. The travel time along the reactor is equal to its HRT ϑPF.

347
Flow Reactor Modelling
	
CSTR
PF
in
dC
dt
q
C
C
k
dC
dx
k
u
=
⋅
−
(
) −
= −
	
(6.55)
from which the HRTs can be computed as
	
CSTR
PF
CSTR
0
in
out
PF
in
out
ϑ
ϑ
( )
=
−
(
)
= −
= −
= −⋅
∫
∫
1
0
k C
C
dC
k
u
dx
k
u L
k
C
C
L
⇒
=
−
(
)
( )
ϑPF
in
out
0
1
k C
C
	
(6.56)
Equation 6.56 shows that in the case of a zero-order reaction, the PF does not offer any advantage 
over the CSTR.
Second-order kinetics. In this case, the CSTR dynamics is given by Equation 6.16, from which 
the steady-state equivalent HRT ϑCSTR
2( )
(
) can be computed as
	
ϑCSTR
out
in
out
2
1
1
( )
=
⋅
−




k C
C
C
	
(6.57)
where as in the PF case
	
dC
dx
k
u C
= −
2	
(6.58)
from which the HRT can be computed by integrating along the reactor length L
	
dC
C
k
u
dx
k C
C
C
L
C
C
2
0
2
1
1
= −
⇒
=
=
⋅
−




∫
∫
( )
in
out
PF
out
out
in
ϑ
	
(6.59)
Comparing the two HRTs given by Equations 6.57 and 6.59, it can be seen that ϑ
ϑ
PF
CSTR
2
2
( )
( )
<
, so the 
PF does yield a better performance, in terms of a smaller volume, in the case of a second-order 
kinetics.
Monod kinetics reaction. If the reaction is enzyme controlled and follows a Monod kinetics, as 
introduced in Section 1.10.4.1 and further explored in Chapter 7, then the CSTR model is
	
dC
dt
q C
C
K
C C
s
=
−
(
) −
+
in
µmax
	
(6.60)
from which the HRT can be computed as
	
ϑ
µ
CSTR
in
out
out
out
M
s
C
C
K
C
C
(
) =
−
(
)
+
(
)
⋅
max
	
(6.61)
while the corresponding PF model is
	
dC
dx
u K
C C
s
= −
+
1 µmax
	
(6.62)

348
Environmental Systems Analysis with MATLAB®
Separating the variables and integrating along the reactor length L yield
	
K
C
C
dC
u
dx
s
C
C
L
M
+
= −
= −
⋅
∫
∫
(
)
in
out
PF
µ
µ
ϑ
max
max
0
	
(6.63)
from which the HRT of the PF can be obtained as
	
ϑ
µ
PF
in
out
in
out
M
s
K
C
C
C
C
(
) =
⋅



−
−
(
)






1
max
ln
	
(6.64)
Comparing Equations 6.61 and 6.64, we can see that ϑ
ϑ
PF
CSTR
M
M
(
)
(
)
<
. So even in the Monod case, the 
PF represents an improvement with respect to the CSTR, because it provides the same extent of the 
reaction with a smaller volume.
6.3  DIFFUSIVE REACTOR
We have previously examined the two extreme cases with respect to diffusion. At one end we had 
the CSTR with its perfect mixing, that is, infinite diffusion. At the other end, we considered the PF, 
where there is no diffusion at all. In between these two extremes we had diffusion creeping in, when 
we considered the case of the feedback CSTRs (Section 6.1.4), where the return flow is often repre-
sented by diffusion, or the generalized CSTR (Section 6.1.5), where resuspension and sedimentation 
are essentially diffusive processes. All of these examples have anticipated the widespread natural 
process of diffusion, whereby a certain amount of a substance dissolved in the water tends to expand 
in the opposite direction of its gradient, that is, from high concentration to low concentration zones. 
This principle is expressed by the Fick law
	
J
D dC
dx
= −
	
(6.65)
which states that the diffusive flux J is inversely proportional to the gradient of the concentration C 
along the direction of diffusion x, with D being the diffusion coefficient. In Equation 6.65, we have 
assumed for simplicity that diffusion is unidirectional along the longitudinal dimension (x), but dif-
fusion could well take place in two or all three of the spatial coordinates. Diffusion, as opposed to 
advection, does not transfer mass through bulk transport, but only by its concentration gradient and 
therefore can take place in a still liquid. Figure 6.18 shows the difference between advection, based 
on bulk transport (a), diffusion in still water (b), and the combination of both (c), which makes the 
initial ‘blob’ gradually expand as it diffuses outward.
Space
Space
(a) 
Time
Time
Time
(c) 
Space
(b) 
FIGURE 6.18  In pure advection (a), particles move along the bulk flux and maintain their initial shape (PF), 
whereas in (b), diffusion in still water makes the initial mass expand due to concentration gradient. In (c), the 
two processes are combined so that the initial mass both expands and is transported downstream.

349
Flow Reactor Modelling
A practical problem with gradients is to delimit their spatial extent, which in this case could be 
referred to the mixing length ξ illustrated in Figure 6.19.
The gradient is limited to the boundary layer of surface A and thickness ξ between the two areas 
with constant concentrations C1 and C2, and the diffusive flux can be approximated as
	
V dC
dt
JA
DA dC
dx
DAC
C
x
1
1
2
= −
=
≅−
−
∈ξ
ξ
	
(6.66)
A practical problem with diffusion is the accurate determination of the diffusive coefficient D, 
whose dimensions are [L2T−1]. Also, the diffusive surface A and the mixing length ξ are elusive 
quantities, and generally they are all grouped into a single parameter D′ defined as the diffusion 
mass transfer coefficient
	
D
DA
L T
′ =


−
ξ
3
1 	
(6.67)
With this substitution, the diffusion Equation 6.66 takes the simple form
	
V dC
dt
D C
C
C
C
1
2
1
1
2
=
−
(
)
>
′
with
	
(6.68)
6.3.1  An Example of Feedback CSTRs with Diffusion: 
The Lake Huron–Saginaw Bay System
The Lake Huron–Saginaw Bay system, a part of the Great Lakes across the US–Canadian bor-
der, provides an example of waterbodies that communicate through diffusion. This system, 
shown in Figure 6.20, has been studied by Chapra (1979, 1997) to illustrate the role of diffu-
sion, as opposed to bulk transport, and to estimate the diffusion mass transfer coefficient D′ of 
Equation 6.67.
The Lake–Bay system can be modelled as two CSTRs coupled by diffusion, for which the feed-
back arrangement of Section 6.1.4 can be used, with the loading situation shown in Figure 6.21. 
If we consider the dynamics of a conservative substance, such as chlorides, the Equation 6.40 can 
be adapted by making the following assumptions:
•	 The chlorides enter the system by mass loading in the bay only, that is, W
C
C
1
1
2
0
0
=
=
=
;
in
in
.
•	 Being a conservative substance, there are no kinetic terms, that is, k
k
1
2
0
=
= .
•	 The mass of chlorides is transferred by diffusion between the lake and the bay.
A
V
Mixing length
x
ξ
C1
C2
dC
dx
C2 − C1
ξ
FIGURE 6.19  The mixing length ξ is defined as the thickness of the intermediate layer through which dif-
fusion occurs.

350
Environmental Systems Analysis with MATLAB®
According to the scheme of Figure 6.21, the dynamical equations of the system can be written as 
follows:
	
Lake
Bay
out
V dC
dt
F C
D C
C
F
C
V dC
dt
W
F C
D C
1
1
2
2
2
1
1
2
2
2
2
2
=
⋅
+
−
(
) −
⋅
=
−
⋅
−
′
′
2
1
−
(
)
C
	
(6.69)
which can be written in matrix form as
	


C
C
F
D
V
F
D
V
D
V
F
D
V
C
C
1
2
1
2
1
2
2
2
1





=
−
+
+
−
+












×
out
′
′
′
′
2
2
2
0
1



+










⋅
V
W 	
(6.70)
To estimate the diffusion mass transfer coefficient D′, Chapra (1997) suggested setting the deriva-
tive of the Bay Equation 6.69 to zero and solving for D′
	
D
W
F C
C
C
′ =
+
−
2
2
2
2
1
	
(6.71)
Using the numerical values in Table 6.1 provided by Chapra (1997) yields
	
′ =
×
−×
⋅
−
=
×
(
)
−
D
0 353 10
7 10
15 2
15 2
5 4
12
9
10
3
1
.
.
.
.
2.5163 10
m year
	
(6.72)
Lake
Huron
Saginaw
Bay
Diffusion
F2
Fout
(a) 
The Great Lakes system
Ontario
Ontario
Ontario
Ohio
Illinois
Pennsylvania
New York
Wisconsin
Michigan
Michigan
Minnesota
Canada
U.S.A
(b) 
The Lake Huron–Saginaw Bay system
FIGURE 6.20  In the Great Lakes system (a), the Lake Huron–Saginaw Bay (b) system is an example of two 
waterbodies (shown in differing colour shades in the inset) linked by diffusion.
F1
F2
W2
Fout,C1
D′ (C2 − C1)
F2,C2
V1,C1
V2,C2
FIGURE 6.21  Modelling of the Lake Huron–Saginaw Bay system as two feedback CSTRs connected by 
diffusion.

351
Flow Reactor Modelling
In that study, Chapra (1997) did not specify whether the chloride concentrations in Table 6.1 used 
to compute D′ through Equation 6.72 could be considered as steady-state values, but from a check 
of the system Equation 6.69, it appears that they are not. In fact, summing the two Equations 6.69 at 
steady state yields
	
C
W
F
1
2
9
9
3
353 10
161 10
=
=
×
×
=
(
)
−
out
2.1925
g m
	
(6.73)
which is independent of the diffusion coefficient D′. Further, solving the matrix Equation 6.70 with 
zero derivatives yields the steady-state concentrations
	
C
C
1
3
2
3
12 6906
=
(
)
=
(
)
−
−
2.1925 g m
g m
.
	
(6.74)
Obviously the values of C1 computed by the two methods coincide, but they differ from the value 
used by Chapra (1997). Simulating the dynamical system (Equation 6.69) with the values of Table 6.1 
and the diffusion D′ obtained from Equation 6.72 yields the results of Figure 6.22a, where the con-
centrations converge to the steady-state values predicted by Equation 6.74. Given the stiff nature of 
the system, with the eigenvalues of the system matrix of Equation 6.70 being
	
λ
λ
1
2
= −
−
0.0458
=
4.0277	
(6.75)
initializing the system with the value C1 given by Equations 6.73 or 6.74 results in a constant value of 
C1, whereas initializing C2 with a high value shows the fast/slow mode typical of stiff systems, with 
the short-lived fast mode shown in the inset of Figure 6.22a. Finally, to investigate the influence of 
the diffusion coefficient D′ on the steady-state regime, the embayment model (6.69) was simulated 
for a wide range of D′ and the steady-state concentrations were plotted in Figure 6.22b, from which 
it can be seen that the concentration gradient decreases while D′ increases, because a greater diffu-
sion tends to equalize the concentrations.
6.3.2  Diffusion and Dispersion
Dispersion is often used as a comprehensive term indicating the dispersal of substances in natural 
waters due to many coexisting processes, such as molecular diffusion, turbulent mixing and mixing 
due to shear. Given the high complexity of dispersion and mixing, the interested reader is referred 
to specialized texts (Fisher et al., 1979; Benedini and Tsakiris, 2013), and only a brief review is 
included here. We have seen that the molecular diffusion considered in the previous section is due 
TABLE 6.1
Parameter Values for the Lake Huron–Saginaw Bay Example
Water Body
Parameter
Symbol
Value
Units
Lake Huron
Volume
V1
3507 × 109
m3
Outflow
Fout
161 × 109
m3 yr−1
Chloride conc.
C1
5.4
g m−3
Saginaw Bay
Volume
V2
8 × 109
m3
Outflow
F2
7 × 109
m3 yr−1
Chloride conc.
C2
15.2
g m−3
Source:	 Chapra, S.C., Surface Water-Quality Modeling, McGraw-Hill, New York, 
844, 1997.

352
Environmental Systems Analysis with MATLAB®
to a concentration gradient across the mixing zone, but this is not the only possible mixing process, 
as shown in Figure 6.23, where the difference between diffusion (b) and turbulent mixing (c) is 
illustrated and compared with the no-mixing PF regime.
This is a consequence of the lack of axial velocity differences across the plug front, as in 
Figure 6.23a. Conversely, the concentration gradient is the only force inducing molecular diffusion, 
acting even in a still fluid, as in Figure 6.23b, whereas (c) refers to a third possibility, involving tur-
bulent diffusion produced by axial velocity gradient, which results in eddies that mix particles with 
differing speeds. Whatever the cause, dispersion, with units of (cm2 s−1), according to Chapra (1997) 
is related to the dimension of the waterbody, with turbulent mixing being the main dispersal force 
in large lakes and streams with values ranging from 100 to 108 cm2 s−1, while molecular diffusion is 
in the order of 10−6–10−2 cm2 s−1. The latter, therefore, becomes negligible with respect to turbulent 
mixing in large waterbodies. Chapra (1997) also reported a linear relation with a 4/3 slope between 
the length scale and the turbulent diffusion for large water masses, such as the Great Lakes and 
oceans.
0
50
100
150
0
5
10
15
20
25
30
Time (yr)
(a)
Simulation with computed D′
Concentration (g m−3)
Fast mode
Slow mode
Lake Conc.
Bay Conc.
0
30
50
0
5
10
15
20
10
30
40
25
30
Diﬀusion D′ × 10−9 (m3 yr−1)
(b)
Sensitivity to D′
Concentration (g m−3)
Lake Conc.
Bay Conc.
FIGURE 6.22  (a) The Lake Huron—Saginaw Bay embayment model was simulated with D′ computed by 
Equation 6.72. The inset shows a magnified view of the short-lived fast mode controlled by λ2 of Equation 
6.75, which dies out in about 6 years, then making way for the slow mode controlled by λ1. In (b), the sensitiv-
ity of the steady-state concentrations to D′ was computed. The dashed vertical line refers to the steady state 
obtained with the computed D′ value used in (a). These graphs were obtained with the MATLAB script Go _
Bay _ Lake _ Chlorides.m in the ESA _ MATLAB\Exercises\Chapter _ 6\Bay _ Lake folder.
(a)
(b)
(c)
Bulk ﬂow
Molecular diﬀusion
FIGURE 6.23  Possible mechanisms of particle mixing in a channel flow. (a) No mixing (plug-flow); 
(b) molecular diffusion due to concentration gradient in a still fluid; (c) dispersion due to turbulent mixing 
caused by eddies originated by axial velocity gradient.

353
Flow Reactor Modelling
For slow-flowing rivers having Froude numbers Fr= /
u
g h
⋅
(
) less than 0.5, the Fisher formula 
(Fisher, 1967; Fisher et al., 1979) yields an estimate of the diffusion as
	
D
u w
h
ghs
=
(
)
−
0 011
2
2
1
.
m s
2
	
(6.76)
where:
u (m s−1) is the average stream velocity
w is the river width (m)
s is the slope
h is the average depth (m)
g is the gravity acceleration (m s−2)
In river modelling, axial dispersion is usually greater than radial dispersion, which is often neglected 
unless the stream is exceptionally wide and slow flowing. Table 6.2 compares the computation of 
dispersion with the Fisher formula (6.76) for a slow-flowing river and a mountain stream.
6.3.3  Diffusive Reactor Modelling
We can now summarize the various factors governing the movements of a fluid in a channel, 
including advection and diffusion, by setting up a model for the diffusive reactor, as depicted in 
Figure 6.1e. Figure 6.24 considers a cylindrical section of thickness dx in a diffusive reactor of 
section S. Assuming that the flow variations are much slower than those of the concentration, 
we can consider the flow velocity a function of the abscissa x alone, that is, u
u x
= ( ), while C 
is a function of both abscissa and time, that is, C
C x t
=
(
)
,
. The following mass balance can be 
written around the differential cylinder of volume dV
S dx
=
⋅
 of Figure 6.24 considering the 
following components and, assuming for simplicity, that the diffusion coefficient D is constant 
across dx:
•	 Bulk transport input through the upstream section u x
S C x t
( )
( , ).
⋅
⋅
•	 Dispersion input through the upstream section −
⋅
∂
∂
D S C
x
x t, .
•	 Bulk transport output through the downstream section −
+
⋅
⋅
+
u x
dx
S C x
dx t
(
)
(
, ).
•	 Dispersion output through the downstream section −
⋅
∂
∂
+
D S C
x x dx t,
.
•	 Internal chemical transformation S dx f C
⋅
⋅
( ).
The dynamical concentration balance inside the differential cylinder dV can then be written by 
combining the above terms to yield
TABLE 6.2
Examples of Dispersion Computation with the Fisher Formula (6.76)
Component
Symbol
Slow-Flowing River
Mountain Stream
Velocity (m s−1)
u
0.45
0.7
River width (m)
w
10
4
Slope
s
0.0005
0.005
Average depth (m)
h
2
0.2
Froude number
Fr
0.1016
0.4997
Fisher Dispersion (m2 s−1)
D
1.1245
4.3536

354
Environmental Systems Analysis with MATLAB®
	
S dx C
t
u S C
DS C
x
u S C
D S C
x
x t
x t
x dx
⋅
∂
∂
=
⋅
⋅
−
∂
∂


−
⋅
⋅
−
⋅
∂
∂

+
,
,
,t
S dx f C x t
+
⋅
⋅
(
)


,
	 (6.77)
Then, dividing by the differential volume dV
S dx
=
⋅
 and letting dx →0 yield, after rearranging, the 
longitudinal dispersion dynamics
	
∂
∂
= −∂
∂
+
∂
∂
+
( )
C
t
u C
x
D
C
x
f C
2
2
	
(6.78)
This well-known partial differential equation (PDE) describes in a very concise way the monodi-
mensional diffusive evolution in time and space of a substance dissolved in the moving water, but it 
also conceals some important difficulties. First of all, it contains two parameters (u and D) that must 
be specified by other means before solving Equation 6.78. The stream velocity u must be computed 
separately by means of specific numerical hydraulics software, such as the public domain HEC–RAS, 
kindly made available by the US Army Corps of Engineers (http://www.hec.usace.army.mil/software/
hec-ras/). This well-diffused and reliable software will provide the velocity field u, given the river mor-
phological characteristics and the selected flow regime. The practical determination of the diffusion is 
more complex, as it requires tracer experiments, some of which will now be described. Alternatively, 
diffusion may be approximated by the Fisher Equation 6.76. In any case, it is important to understand 
that until these two quantities are known, at least in approximate form, no attempt can be made at solv-
ing Equation 6.78 by the numerical approach that will be described later.
6.3.3.1  Impulse Response of the Diffusive Reactor
Though we have just said that the diffusive Equation 6.78 is not very easy to handle, there are, how-
ever, some instances for which an analytical solution can be obtained. One such case is an upstream 
tracer pulse of mass M injected in a very short time lapse δt, thus approximating an impulse input. 
This special loading condition translates into the following boundary conditions (Levenspiel, 1972; 
Chapra, 1997; Tchobanoglous and Schroeder, 1985; Palmeri et al., 2014):
	
C x
x
C x t
t
t
C
t
t
C
t
M
F
t
t
x
( , )
lim
( , )
( , )
( , )
( ,
0
0
0
0
0
0
0
0
0
=
>
=
∀>
=
<
=
⋅
∈
→∞
δ
δ
δ
δ
t
C
t
t
t
)
( , )
0
0
=
>










	
(6.79)
u(x)
C(x)
u(x + dx)
C(x + dx)
F
F
L
x + dx
x
0
Reactor length
S
FIGURE 6.24  Schematization of a diffusive reactor with length L and cross section S. The mass balance is 
computed around the coloured cylinder of thickness dx.

355
Flow Reactor Modelling
for which the diffusion Equation 6.78 has the following analytical solution:
	
C
x t
M
S
D t
e
t
x u t
D t
δ
π
,
/
(
) =
⋅
⋅
⋅
−
−⋅
(
)
⋅⋅
(
)
2
2 4
	
(6.80)
reminiscent of a Gaussian function, if it were not for the time t at the denominator. Figure 6.25 
shows the numerical representation of Equation 6.80 with suitable parameters. It can be seen that 
the pulse changes the initial conditions, as already examined in Section 6.1.2, and defines the initial 
concentration profile along the reactor.
Apart from its theoretical importance, Equation 6.80 can actually be used to estimate the diffu-
sion coefficient D of real water streams. If the length x is fixed at the end of the reach being investi-
gated, then Equation 6.80 can be adapted to describe the variation of tracer at the downstream end 
of the reach, by setting x
L
=
, so that the impulse response is only a function of time
	
C
L t
M
S
D t
e
t
L u t
D t
δ
π
,
(
) =
⋅
⋅
⋅
−
−⋅
(
)
⋅⋅








2
2
4
	
(6.81)
To test the agreement between Equation 6.81 and real tracer data, the experimental laboratory 
equipment shown in Figure 6.26 was set up.
The experimental rig, which is thoroughly described elsewhere (Marsili-Libelli, 1997), consists 
of a 4-metre-long pipe equipped with a flow-control loop to ensure a constant flow, and a conduc-
tivity cell at the downstream end, measuring the conductivity variations induced by a pulse-like 
injection of saturated salt water at the upstream end of the reactor. Equation 6.81 was then fitted to 
the data, with D being the only unknown parameter. The result of this estimation exercise is shown 
in Figure 6.27, from which a rough value of the diffusion can be estimated, although the agreement 
between the data and the impulse response Equation 6.81 is far from satisfactory. In addition to 
missing the steep leading edge of the pulse, there is a considerable model/data disagreement in the 
trailing part (the ‘tail’) of the experiment, where the data seem to fluctuate randomly. This is due to 
possible dead zones in the conductivity flow-cell, where tracer particles may be held up for a con-
siderable time lapse to be released later, giving rise to the disagreement between the data and the 
theoretical response in the trailing part of the experiment. Hence, we need a better model for pulse 
response of the diffusive reactor.
0.0
0.5
1.0
1.5
2.0
0.0
0.2
0.4
0.6
Length
Time
Time proﬁle at the
upstream end
@ x = 0
Initial proﬁle
along the reactor
@ t = 0+
FIGURE 6.25  Diffusive reactor pulse response computed with Equation 6.80 with the following parameters: 
u = 0.6; M = 0.1; S = 1; D = 9. This graph can be obtained with the MATLAB script Go _ Pulse.m in the 
ESA _ MATLAB\Exercises\Chapter _ 6 folder.

356
Environmental Systems Analysis with MATLAB®
6.3.3.2  Transport Delay Modelling
We have seen that dispersion, due to a combination of diffusion and turbulent mixing, ‘spreads’ 
the initially narrow tracer pulse along the flow direction. However, the first concentration changes 
at the outlet are observed after a time lag due to the travel time of the pulse along the reactor. This 
transport delay tlag
(
), which is clearly a function of the flow rate, can be estimated in several ways. 
In principle, it can be related to flow by a hyperbolic law
	
t
A
B
F
lag =
+
	
(6.82)
where:
F is the flow rate
A and B are suitable constants, depending on the reactor shape
Feed tank
Flow
measurement
Feed
Pump
Tubular reactor
Flow-cell
conductivity
measurement
Output
ﬂow
Conductivity
signal conditioning
Pump
power drive
Flow
signal conditioning
Analog/digital
interface
Process
computer
Tracer
injection
FIGURE 6.26  Experimental set-up to determine the diffusion in a tubular reactor. (Reproduced with per-
mission from Marsili-Libelli, S. and Colzi, A., Control Eng. Pract., 6, 707–713, 1998.)
0
20
40
60
80
100
120
0.00
0.05
0.10
0.15
0.20
0.25
0.30
0.35
0.40
0.45
Time (s)
Conductivity (mS)
Flow = 0.8 (L min−1)
D = 210 (cm2 s−1)
u = 10.0453 (cm  s−1)
Model
Data
tlag
0
20
40
60
80
0.00
0.05
0.10
0.15
0.20
0.25
0.30
0.35
0.40
10
30
50
70
Time (s)
Conductivity (mS)
Flow = 1.1 (L min−1)
D = 56 (cm2 s−1)
u = 13.8123 (cm s−1)
tlag
FIGURE 6.27  Fitting the theoretical impulse response Equation 6.81 with the data obtained from the experi-
mental set-up of Figure 6.26, with tlag representing the transport delay before the tracer pulse begins to show 
at the outlet. The poor data agreement in the descending branch of the response may be due to tracer particles 
trapped in the flow cell, but it also shows the limits of the theoretical Equation 6.81 in modelling real tracer data.

357
Flow Reactor Modelling
However, other approximations are possible, and to assess their validity an experiment was carried 
out using the same laboratory set-up of Figure 6.26 to find a relationship between the flow rate and 
the transport delay, as shown in Figure 6.28. Three approximating functions were tested: single 
exponential, double exponential and hyperbolic law.
The fitting results are reported in Table 6.3 and confirm the suitability of the hyperbolic function. 
As an alternative, the double exponential yields a slightly better fit, but this is at the expenses of a 
much more complex function. Further, the wide confidence intervals of the estimated parameters 
denote the scarce reliability of this model.
6.3.3.3  Lumped-Parameter Approximation of the Diffusive Reactor
Having separated the transport delay tlag
(
) from the internal dynamics opens the way to a lumped-
parameter approximation of the diffusive reactor, which can be decomposed into the structure of 
Figure 6.29, where the initial PF introduces the transport delay tlag and the CSTR chain models the 
internal dynamics.
If all the CSTRs have equal HRT ϑ
( ), the impulse response can be expressed by Equation 6.28, 
where the peak concentration Cmax can be found by setting its time derivative to zero, to yield
Delay data
Single exponential
Double exponential
and hyperbole
0.6
0.7
0.8
0.9
1.0
1.1
1.2
1.3
1.4
1.5
Flow rate (L min−1)
20
25
30
35
tlag (s)
FIGURE 6.28  Experimental data relating the transport delay (tlag) to the flow rate, obtained with the experi-
mental set-up of Figure 6.26, and the function fitting of Table 6.3.
TABLE 6.3
Possible Approximations of the Flow Rate–Transport Delay Data of Figure 6.28
Single Exponential
Double Exponential
Hyperbole
t
a e bF
lag =
−
t
a e
a e
a
b F
b F
lag =
+
+
−
−
1
2
3
1
2
t
A
B
F
lag =
+
a = 62.8532 ± 2.96
b = 0.93133 ± 0.098
a1 = 75.218 ± 70.04
a2 = 30.218 ± 28.76
a3 = 0.442 ± 0.38
b1 = 2.723 ± 0.89
b2 = 0.473 ± 2.87
A = 2.1124 ± 0.81
B = 22.036 ± 0.83
χ2 = 3.1943
χ2 = 1.4243
χ2= 1.6152

358
Environmental Systems Analysis with MATLAB®
	
t
n
C
C
n
n
e
o
n
n
max
max
!
=
⋅
−
(
)
=
⋅
−
(
)
−
(
)
⋅
−
−
−
(
)
ϑ
ϑ
1
1
1
1
1
1 	
(6.83)
where tmax is computed from the onset of the output pulse, obtained by subtracting tlag from the exper-
imental time. Figure 6.30a defines the impulse response parameters tmax and Cmax of Equation 6.83, 
while Figure 6.30b shows its fitting to the tracer experiment of Figure 6.27b.
By comparing these two fittings, it can be concluded that the lumped-parameter model of 
Figure  6.29 represents a better description of the diffusive reactor than that obtained with the 
impulse response method of Equation 6.81. There are instances, however, where even this model 
appears to lack the flexibility required to fit experimental diffusion data. Particularly, in the model 
of Figure 6.29, the shape of the pulse response is a function of the number of CSTRs (n), and the 
equal CSTRs assumption may represent a limit to good fitting. More complex, and flexible, lumped-
parameter structures to approximate a diffusive reactor have been proposed (Marsili-Libelli, 1997; 
Marsili-Libelli and Checchi, 2005), and these will be examined in more detail in the next chapters.
6.3.3.4  Diffusion Estimation from the Pulse Response
The pulse response Equation 6.81 is skewed by the presence of the time factor in the denominator, 
but as the measuring point is moved downstream, the response becomes more and more symmetri-
cal, and it can be approximated with a normal curve
	
G t t
C
e
m
m
m
u
t tm
m
,
,σ
σ
(
) =
⋅
−
−
(
)
⋅
2
2
2
2
	
(6.84)
CSTR 1
CSTR 2
•   •   •   •
Transport delay
tlag
CSTR n
C(t)
ϑ
ϑ
ϑ
FIGURE 6.29  Diffusive reactor approximation consisting of a PF, to simulate the transport delay (tlag), and 
a chain of CSTRs.
0
20
40
60
80
0.0
0.1
0.2
0.3
0.4
Time (s)
Concentration
(a)
(b)
C(t)
C(t)
Cm
Coffset
tlag
tm
t
F = 1.1 (L min−1)
Co = 1.38 (ms)
n = 3
ϑ = 2.4086 (s)
tlag = 15.478 (s)
FIGURE 6.30  Output impulse response of the diffusive reactor approximation of Figure 6.29. (a) Theoretical 
response with relevant parameters. (b) Fitting the curve (a) to the tracer experiment of Figure 6.27b. The last 
graph was obtained with the MATLAB script Diffusive _ pulse _ CSTR _ chain.m in the ESA _
MATLAB\Exercises\Chapter _ 6\Cascade _ CSTR folder.

359
Flow Reactor Modelling
with Cm and tm already defined in Figure 6.30a. Thus, the diffusion coefficient D can be estimated 
by equating the exponential terms of Equations 6.81 and 6.84
	
L
u t
D t
u
t
tm
m
−⋅
(
)
⋅
⋅
=
−
(
)
⋅
2
2
2
2
4
2 σ
	
(6.85)
Substituting L
tm

⋅u in the left-hand expression yields
	
u
t
t
D t
u
t
t
m
m
m
2
2
2
2
2
4
2
−
(
)
⋅
⋅
=
−
(
)
⋅σ
	
(6.86)
Equating the denominators and solving for D at the time of the output peak tm yields
	
D
t
m
m
σ2
2⋅
	
(6.87)
Figure 6.31 shows that the pulse response approaches a normal distribution as the measuring point 
is moved downstream, making the approximation of Equation 6.86 more and more accurate. The 
smaller the D value, the better the normal approximation.
100
200
300
400
500
600
700
800
900
1000
0.00
0.05
0.10
L = 20 (m)
L = 40 (m)
L = 60 (m)
Concentration (mS)
Concentration (mS)
Concentration (mS)
0
0.02
0.04
0.06
0
0.02
0.04
0.06
Normal approximation
Pulse response
Cm
Cm
Cm
tm
2σ
tm
2σ
tm
2σ
Time (s)
100
200
300
400
500
600
700
800
900
1000
Time (s)
100
200
300
400
500
600
700
800
900
1000
Time (s)
FIGURE 6.31  Extending the reactor length far from the injection point shows that the pulse response can 
be approximated with the normal curve, whose variance increases with the distance as a consequence of mix-
ing. Using the normal approximation, the diffusion coefficient can be approximated with Equation 6.87. This 
graph was obtained with the MATLAB script Diffusive_Length_Gauss.m in the ESA_MATLAB\
Exercises\Chapter_6\Diffusive_River folder.

360
Environmental Systems Analysis with MATLAB®
6.3.4  The ‘Follow-the-Plug’ Model, a Lagrangian Approach
Let us go back to the basic diffusional PDE (6.78) and try to work out a simplified solution in the 
case of hydraulic constant regime and no diffusion D =
(
)
0 . The first textbook which considered 
this aspect in details was Rinaldi et al. (1979). In this case the general Equation 6.78 simplifies into
	
∂
∂
+
∂
∂
= −( )
C
t
u C
x
f C 	
(6.88)
which can be solved in a simple way that will lead to the Streeter and Phelps model already encoun-
tered. Computing the differential of the concentration yields
	
dC
C
t dt
C
x dx
= ∂
∂
+ ∂
∂
	
(6.89)
which, dividing by total time differential dt, produces 
	
dC
dt
C
t
C
x
dx
dt
C
t
C
x u
f C
= ∂
∂
+ ∂
∂
= ∂
∂
+ ∂
∂
= −( )
	
(6.90)
Thus, the PDE (6.88) reduces to an ordinary differential equation (ODE) provided that the domain 
of integration is a characteristic line, along which the following relations hold
	
dt
dt
dx
dt
u
s
s
=
=






1
	
(6.91)
Leonardo da Vinci’s quotation at the beginning of this chapter, in modern terms, may be viewed 
as an Eulerian observer, looking from a fixed location at the fluid as it flows past. Conversely, the 
approach followed here is based upon a Lagrangian assumption, which requires that the observer 
follows an individual element of fluid as it moves through space and time (Batchelor, 2000). 
Figure 6.32 shows the practical consequences of taking samples along a characteristic line: if each 
sample is timed so that the distances along the river and the sampling times are in agreement with 
the characteristic line defined by Equation 6.91, then, according to Equation 6.90, Equation 6.88 
simply reduces to
	
dC
d
f C
dC
dx
u f C
τ = −
⇒
= −
( )
( )
1
	
(6.92)
If the Streeter and Phelps kinetics are substituted into Equation 6.92, the model can be expressed 
either in flow-time ts( ) or in the reach length x( )
	
dB
dt
k
B
dC
dt
k
C
C
k
B
dB
dx
u k
B
dC
dx
u
s
b
s
c
b
b
= −
⋅
=
−
(
) −
⋅






= −
⋅
=
sat
1
1 k
C
C
u k
B
c
b
sat −
(
) −
⋅






1
	
(6.93)

361
Flow Reactor Modelling
where the relation between the two independent variables is given by Equation 6.91. Figure 6.33 
gives a pictorial view of a hypothetical observer taking samples from a boat which, being without 
oars, is forced to glide with the stream, that is, to ‘follow-the-plug’.
6.3.5  Numerical Treatment of the Monodimensional Diffusive Equation
So far, we have considered a special solution to the PDE (6.88), by considering either a special class 
of inputs (the pulse) or by neglecting the diffusion and choosing a very particular domain of integra-
tion, such as a characteristic line. In the first instance, the purpose of that exercise was the estima-
tion of the diffusion coefficient, either from the pulse response function Equation 6.81, or from the 
normal distribution curve Equation 6.86, using the lumped-parameter approximation of Figure 6.29. 
This approach is widely used in chemical engineering practice, where the reactor has a well-defined, 
regular shape and the loading conditions are precisely controlled. In the ‘follow-the-plug’ case, the 
x1 = u × ts1
f(C)
x2 = u × ts2
x3 = u × ts3
ts1
ts2
ts3
x1
ts1
ts2
ts3
x2
x3
u
 = − 
dC
dx
1
u
 = 1
dt
dts
 = u
dx
dts
⇒
FIGURE 6.32  Implementation of the ‘follow-the-plug’ sampling strategy, which simplifies the original PDE 
(6.88) without diffusion into the ODE (6.92). The equivalence between the time kinetics and the space kinet-
ics holds only if the PDE is solved along a characteristic line corresponding to a specific hydraulic regime u.
u
Characteristic line
x1
x2
x3
ts1
ts2
ts3
t = ts1
x = x1
t = ts2
x = x2
t = ts3
x = x3
FIGURE 6.33  Pictorial representation of the ‘follow-the-plug’ concept. Imagine an observer taking samples 
from a boat without oars, which moves with the current. The samples taken at various instants t
t
t
s
s
s
1
2
3
,
,
(
) in 
the water next to the boat are related to the positions x x x
1
2
3
,
,
(
) by the characteristics line shown in the inset.

362
Environmental Systems Analysis with MATLAB®
aim was to obtain a very simple model, in which only the kinetics terms would be required to fully 
specify the model evolution, without much concern about boundary conditions, which became nor-
mal initial conditions.
We now turn our attention to the more general problem of approximating the solution of the 
diffusive equation when the goal is to represent the features of a natural water course whose shape 
may have all the irregularities typical of natural environments. This implies that its hydraulic 
regime may be variable, and that diffusion, be it molecularly or most likely turbulent, cannot be 
ignored anymore. If the diffusive Equation 6.78 is to describe the transport, diffusion and chemical 
transformation of a dissolved pollutant, the following boundary conditions should be introduced:
	
Upstream boundary profile
for
C
t
t
0
0
,
(
)
∀> 	
(6.94)
	
Initial concentration profile
for
C x
x
L
,0
0
(
)
≤
≤	
(6.95)
The spatio-temporal domain of the solutions to the diffusive model with these boundary condi-
tions is illustrated in Figure 6.34, showing the feasible trajectories of pollutant particles travelling 
downstream.
The first boundary condition Equation 6.94 represents the upstream input pollutant concentra-
tion in time, while Equation 6.95 provides the initial concentration profile in space along the whole 
reach. Starting from a steady-state condition is not strictly required, but it helps, making the simu-
lation start from a consistent profile and avoiding lengthy numerical transients in the simulation, 
which may even lead to numerical instability. According to Figure 6.34, a volume of water starting 
Lu
ts = 
Initial boundary condition
(steady-state)
Downstream concentration of 
pollutant started @ t = 0
upstream
Trajectory of pollutant entering the
reach @ t = 0
ts travel time
C (x, t)
C (x, t)
C (0, t1)
C (0, t2)
C (L, t2)
C (L,t1 + ts)
C (L,t2 + ts)
C (0, 0)
No variation from
initial steady-state
x
L
t
Upstream boundary condition C (0, t) t ≥ 0
Initial boundary condition C (x, 0) 0 ≤ x ≤ L
Upstream boundary condition C(0, t)
(input proﬁle for t > 0)
Downstream boundary
⎛
⎝
⎛
⎝
C (x, 0)
FIGURE 6.34  Graphic representation of the boundary conditions of Equations 6.94 and 6.95 in the uni-
directional diffusive domain. The pollutant feasible trajectories originating from the upstream end follow the 
black curves (characteristic lines) and reach the downstream boundary after the travel time ts. Only trajecto-
ries starting at t < 0 can exist in the blue triangle. The initial steady state is represented by the double blue line 
and represents the space boundary condition, while the upstream time boundary condition is the blue dashed 
line on the left.

363
Flow Reactor Modelling
at the initial time (t = 0) from the upstream end (x = 0) with pollutant concentration C 0 0
,
(
) travels 
downstream along a characteristic line described by the relationship u
s
= x t/  where ts is the flow 
time and u is the stream velocity. Water volumes, starting at later times t1 and t2, each travel along 
their own characteristic lines and reach the downstream end at t
ts
1 +  and t
ts
2 + , respectively, where 
t
L u
s =
/  is the travel time across the reach length (L). If the pollutant is reactive, internal transforma-
tions may occur in the water volumes while they travel along the reach.
6.3.5.1  Selecting the Proper Boundary Conditions
While the first boundary condition Equation 6.94 requires the knowledge of the input concentra-
tion C
t
0,
(
) for all t > 0, together with the velocity profile u x t,
(
) along the reach, the second con-
dition is more elaborate, as it requires the computation of a steady-state solution to the diffusive 
Equation 6.78. As noted, starting from a steady-state condition is not strictly required, but it helps. 
Therefore, let us now consider the steady-state form of Equation 6.78 by setting the left-hand time 
derivative to zero so that the original PDE becomes an ODE in the spatial dimension (x) only
	
0
2
2
= −
+
+
( )
u dC
dx
D d C
dx
f C 	
(6.96)
Equation 6.88 is best handled in a normalized form by introducing the new variable z = x L
/ , to yield
	
d C
dz
uL
D
dC
dz
kL
D
C
2
2
2
=
⋅
+
⋅
	
(6.97)
which can be put in matrix form by defining the two new variables C
C
1 =
 and C
dC
dz
2 =
	
dC
dz
dC
dz
L k
D
uL
D
C
C
1
2
2
1
2
0
1












=










⋅


	
(6.98)
Its characteristic equation is
	
λ
λ
2
2
0
−
−
=
uL
D
kL
D
	
(6.99)
which can be solved for the eigenvalues
	
λ =
±



+
uL
D
uL
D
kL
D
2
4
2
	
(6.100)
Equation 6.100 shows that the two eigenvalues are real with opposite signs, so we have the saddle 
­situation illustrated in Figure 1.36, and we can conclude that the steady-state boundary Equation 6.96 
is intrinsically unstable for any value of its parameters k D u
,
,
(
) whose influence on the eigenvalues 
is shown in Figure 6.35.

364
Environmental Systems Analysis with MATLAB®
Each factor has a differing influence on the eigenvalues. Figure 6.35a shows that an increas-
ing kinetic constant increases the divergence of the eigenvalues, while Figure 6.35b shows that an 
increase of the diffusion coefficient D dampens the system response, with the eigenvalues approach-
ing zero from opposite directions. Finally, Figure 6.35c demonstrates that the effect of the veloc-
ity has an opposite effect on the eigenvalues, increasing the unstable one λ2
(
), while the stable λ1 
approaches the zero value, thus becoming dominant. In summary, any combination of the three 
parameters results in an unstable saddle configuration, as shown by the two sample trajectories in 
the phase plane portrayed in Figure 6.36. This, however, does not imply that Equation 6.98 can-
not be used. In fact, if the simulation ends well before the influence of the unstable eigenvector 
dominates the trajectory, this does not prevent the use of this model for computing a feasible space 
boundary condition.
Figure 6.37 shows the two trajectories of Figure 6.36 in the spatial domain of the normalized 
reach length. In (a), a monotonic concentration decrease of the pollutant is shown, while (b) dis-
plays a very strange case in which the pollutant increases in the final part of the reach. This very 
0.0
0.2
0.4
0.6
0.8
1.0
k × 10−4 (s−1)
−10
−5
0
5
10
(a)
2
4
6
8
9
D × 103 (m2 s−1)
−10
−5
0
5
10
(b)
λ2 > 0
λ2 > 0
λ1 > 0
λ1 > 0
λ2 > 0
λ1 > 0
1
3
5
7
0.02
0.04
0.06
0.08
0.09
u (m s−1)
−0.5
0.5
2.0
(c)
0.0
1.0
1.5
0.01
0.03
0.05
0.07
FIGURE 6.35  The eigenvalues of the steady-state boundary Equation 6.96 are influenced by the value of the 
parameters. In (a) increasing the kinetic constant makes the eigenvalue diverge, while in (b) diffusion D has 
the opposite effect. In (c) the effect of the velocity (u) is mixed, with the stable eigenvalue becoming more and 
more dominant. In any case, one eigenvalue is always positive real (dashed curves) and therefore the system 
is unstable.
0
5
10
15
−20
−15
−10
−5
−5
0
5
10
15
20
v2 → λ2 > 0
v1 → λ1 > 0
Trajectory 1
Trajectory 2
dz
dC
C
Upstream
boundary
Downstream
boundary
Cout = 2.5
Cin = 10
FIGURE 6.36  Phase plane portrait of two example solutions to the steady-state diffusive Equation 6.98. The 
straight blue lines indicate the direction of the eigenvectors, with v1 (solid line) corresponding to the stable 
eigenvalue λ1, while v2 (dashed line) corresponds to the unstable eigenvalue λ2. Both trajectories (thick curves) 
are eventually attracted by the unstable eigenvector v2, but the simulations end well before it dominates the 
solution.

365
Flow Reactor Modelling
unnatural behaviour is discussed next and is due to the mathematical boundary constraints, rather 
than to a plausible chemical reason.
6.3.5.2  A Boundary Value Initialization Problem
The numerical simulation of the stationary concentration profile, either in the form of Equation 6.97 
or in the state-space representation of Equation 6.98, being a second-order ODE, requires two initial 
conditions. On the other hand, the numerical methods illustrated in Section 1.10.2 use forward inte-
gration starting from initial conditions, which should be specified at the beginning of the integra-
tion domain. This is easily done with a first-order differential equation, for which the initial value 
can be estimated or obtained from experimental observation, while in the case of the second-order 
equation it also requires the knowledge of the initial derivate ′
Cin, for which it is difficult to obtain a 
good estimate. It would be easier, instead, to specify the pollutant concentration at both ends, that 
is, C
C
in =
( )
0  and C
C
out =
( )
1 , which is referred to as a boundary value problem (BVP), while the 
Simulink integration algorithms are all initial value problem–oriented methods. Consequently, we 
are confronted with the problem of transforming the constraint on C 1( ) into a condition for ′
Cin. 
There are several approaches to infer ′
Cin from C 1( ), and the most popular is the so-called shooting 
method (Quinney, 1987). This method operates by successive approximation of the initial derivative 
′
Cin as a function of the final ‘shooting’ error, that is, the difference between the target final concen-
tration Cout and the actual end point of the simulation C 1( ). Thus, the BVP translates into an initial 
derivative search that can be posed as
	
′
=
( ) −


′
C
C
C
C
in
opt
out
in
argmin
1
2	
(6.101)
which ends when the squared difference is less than a prescribed quantity ε > 0. The optimal shoot-
ing search Equation 6.101 is implemented by linking the Simulink implementation of Equation 6.97 
and the search for the optimal initial derivative, as shown in Figure 6.38. This method solves the 
BVP and determines the initial derivative ′
Cin so that the solution differs from the prescribed end 
point Cout by less than ε > 0. But how feasible is this solution? Although the solution in Figure 6.37a 
looks feasible (monotonic decrease of the pollutant concentration), the one in Figure 6.37b is cer-
tainly not. In fact, the final upward branch is very difficult to explain from a chemical viewpoint, 
though it makes sense mathematically, because it satisfies the given boundary conditions. It appears 
that a large chemical kinetic rate degrades the pollutant too quickly, with the result that the final 
0.0
0.2
0.4
0.6
0.8
1.0
0
2
4
6
8
10
Normalized length z
Concentration
Cout = 2.5
Cin = 10
λ1 = −3.1523
λ2 = 3.1723
0.0
(a)
(b)
0.2
0.4
0.6
0.8
1.0
0
2
4
6
8
10
Normalized length z
Concentration
Trajectory 1
Trajectory 2
Cout = 2.5
Cin = 10
u = 10 −3 (m s−1)
D = 5′ × 10 3 (m2 s−1)
L = 10 5 (m)
k = 5′ × 10 −7 (s−1)
u = 10 −3 (m s−1)
D = 5′ × 10 3 (m2 s−1)
L = 105 (m)
k = 5′ × 10 −7 (s−1)
λ1 = −0.9900
λ2 = 1.0100
FIGURE 6.37  The two trajectories of Figure 6.36, with differing values of the kinetic constant, plotted versus 
the normalized length. In (a), trajectory 1 reaches the output concentration monotonically. In (b), trajectory 2 
has an internal minimum, a situation with no chemical justification.

366
Environmental Systems Analysis with MATLAB®
concentration is reached well before the end of the reach, thus requiring a hypothetical additional 
injection to make up for the missing pollutant and meet the end boundary condition, which is awk-
ward. Thus the BVP, which looks very neat from a mathematical point of view, may yield an envi-
ronmentally inconsistent solution, and therefore it should be regarded with some suspicion.
6.3.5.3  A Least-Squares Initialization Problem
Now, we take a much more practical approach to the solution of the steady-state profile Equation 
6.97. In practice, it is likely that pollutant concentration measurements Ci
exp are available at some 
sampling points along the reach, rather than at the end points only. In this case, it makes sense to 
initialize the model with an initial derivative ′
Cin such that the sum of squared differences between 
the experimental points Ci
exp and the corresponding model responses Ci
exp is minimized. Thus, the 
objective function (6.101) now becomes
	
′
=
=
−
(
)
′
′
∑
∑
C
C
C
C
i
i
C
i
i
i
in
opt
in
in
argmin
argmin
exp
ε2
2	
(6.102)
which is very similar to the error functional encountered in Chapter 2 when dealing with the param-
eter estimation problem. In this case, however, the goal of Equation 6.102 is to find the best initial 
derivative 
′
Cin so that the model solution approximates the experimental observations Ci
exp in the 
least square sense. The previous computational scheme of Figure 6.38 must now be modified to be 
consistent with Equation 6.102, as shown in Figure 6.39, where the shooting algorithm is replaced 
u*L/D
uL/D
k*L*L/D
kL^2/D
dC/dz
C
To workspace
Sum
+
+
C
C (1)
z = 1
z = 0
Compute the
ﬁnal concentration
Set the new
initial derivative
1s
1s
Error minimization algorithm
Cout
Cin
Cin′
min (C (1) − Cout)2
Cin′
FIGURE 6.38  Implementation of the shooting method to find the initial concentration derivative C′in to 
obtain the prescribed final value Cout. This computational scheme can be launched by the MATLAB script 
Steady_Diffusive_BVP.m in the ESA_MATLAB\Exercises\Chapter_6\Steady_State_​
Diffusive_Reactor folder.

367
Flow Reactor Modelling
by an error minimization search. A least-squares solution is sought because, in general, the number 
of constraints, represented by the experimental observations, is greater than the two boundary con-
ditions C
C
in
in
and
′
(
). For this reason, this solution is much more robust than the previous BVP and 
rules out absurd results such as that of Figure 6.37b.
Figure 6.40 compares the two solutions, Least Squares (LS) and Boundary Value Problem 
(BVP), to the steady-state diffusive Equation 6.97, showing that the LS solution is influenced by 
all the intermediate data along the reach. Since the model parameters are well posed, the two 
solutions are very close, but the LS approach is by far more robust, being overdetermined. By 
contrast, the BVP solution considers only the extreme constraints, and anything can happen in 
between the end points, as demonstrated in Figure 6.37b.
6.3.6  Spatial Discretization of the Diffusive Reach Model
So far, we have set the boundary conditions required for the integration of the unidirectional dif-
fusive Equation 6.78. Now, while retaining the time continuity, we consider its actual numerical 
solution by spatial discretization. The reach is partitioned into n cells Δx long, connected by advec-
tion and diffusion, each with its internal chemical kinetics, according to the discretization scheme 
shown in Figure 6.41. To derive the discrete-space cell dynamics, consider the generic cell located 
at the abscissa x, while the upstream cell is located at x
x
−
(
)
∆
, and the downstream cell at x
x
+
(
)
∆
. 
Adjacent cells communicate via advection ui
( ) and diffusion Di
(
). The pollutant concentration 
u*L/D
uL/D
k*L*L/D
kL^2/D
dC/dz
C
To workspace
Sum
+
+
C
z = 1
z = 0
Compute the 
concentration
along the reach
Set the new
initial derivative
1s
1s
Error minimization algorithm
Cout
Ci
exp
Cin
Cin′
min Σ εi
2 =  min Σ (Ci − Ci
exp)2
Cin′
Cin′
i
i
εi
FIGURE 6.39  Implementation of the least-squares method to find the initial concentration derivative C′in 
minimizing the sum of squared differences between the model output (blue dots) and the data (blue squares) 
without regard to the final value Cout. This computational scheme can be launched by the MATLAB script 
Steady_Diffusive_LS.m in the ESA_MATLAB\Exercises\Chapter_6\Steady_State_
Diffusive_Reactor folder.

368
Environmental Systems Analysis with MATLAB®
inside the cell Ci
(
) is assumed to be homogeneous (CSTR hypothesis), and chemical transforma-
tions are governed by the internal kinetics f Ci
(
). Now, approximating the first- and second-order 
spatial derivatives in Equation 6.78 with a second-order Taylor expansion based on central finite 
differences yields the following quantities:
	
C x
x
C x
C
x
x
C
x
x
C x
x
C x
C
x
x
x
x
x
+
(
)
( ) + ∂
∂
+
∂
∂
+
−
(
)
( ) −∂
∂
+
∆
∆
∆
∆
∆


1
2
1
2
2
2
2
Ο
2
2
2
2
2
∂
∂
+
C
x
x
x
∆
Ο
	
(6.103)
To simplify the notation, assign the subscript i( ) to the central cell, with the light blue shading in 
Figure 6.41. The upstream cell will have the index i −
(
)
1 , while the downstream cell will be indexed 
as i +
(
)
1 .
0.0
0.2
0.4
0.6
0.8
1.0
2
3
4
5
6
7
8
9
10
Normalized length
Concentration  (mg L−1)
u = 0.1 × 10 2 (m s−1)
D = 5 × 103 (m2 s−1)
L = 105 (m)
k = 0.5 × 10−6 (s−1)
Experimental observations
BVP steady-state solution
LS steady-state solution
Cout
FIGURE 6.40  Comparison of LS and BVP solutions to the steady-state diffusion Equation 6.97. It can 
be seen that the LS solution is determined by the data along the normalized length, while the BVP solu-
tion considers only the final constraint. These graphs were obtained with the MATLAB scripts Steady _
Diffusive _ BVP.m and Steady _ Diffusive _ LS.m in the ESA _ MATLAB\Exercises\
Chapter _ 6\Steady _ State _ Diffusive _ Reactor folder.
C(x − Δx) = Ci−1
Di−1
ui−1
C(x + Δx) = Ci+1
Di+1
ui+1
C(x) = Ci
Di
ui
Advection
Diﬀusion
Δx
Δx
Δx
FIGURE 6.41  Spatial discretization scheme of the river reach to derive the time dynamics for each cell, 
which can be considered as a CSTR that communicates with the adjacent cells via advection (mono­directional) 
and diffusion (bidirectional).

369
Flow Reactor Modelling
With this new notation, by summing or subtracting the Equation 6.103, the approximate first- and 
second-order derivatives are obtained as
	
∂
∂
−
⋅
∂
∂
−⋅
+
+
−
+
−
C
x
C
C
x
C
x
C
C
C
x
i
i
i
i
i
i
i
i
i


1
1
2
2
1
1
2
2
2
∆
∆
	
(6.104)
Substituting these approximations into the Equation 6.78 yields the discrete-space approximation of 
the unidimensional diffusion equation
	
dC
dt
u C
C
x
D C
C
C
x
i
i
i
i
i
i
i
i
i
i
= −
−
+
−
+
+
−
+
−
1
1
advection
diffusi
2∆
∆
1
1
2
2
on
chemical
transformations
...
+
=
f C
i
n
i
(
)
,
,
1
	
(6.105)
The spatial discretization (6.105) has transformed the single PDE 6.78 into a set of n ODEs, whose 
initial conditions C
i
n
i 0
1
( )
=


,
,
,
...
 can be obtained by the initial steady-state profile discussed in 
Section 6.3.5. Assuming for simplicity that the chemical transformation in each cell follows a first-
order kinetic −
⋅
k C
i
i, the generic Equation 6.105 may be written by grouping the terms common to 
C
C
i
i
i
−
+
1
1
,
and C
	
dC
dt
C
k C
C
i
i
i
i
i
i
i
i
=
+
−
(
)
+
−
+
α
β
γ
1
1	
(6.106)
with the combined parameters
	
α
β
γ
i
i
i
i
i
i
i
i
i
i
i
i
i
u
x
D
x
D
x
D
x
u
x
=
+
= −
=
−
2
2
2
2
2
2
∆
∆
∆
∆
∆
	
(6.107)
resulting in a set of linear dynamical system composed of n cells
	
dC
dt
C
k C
C
dC
dt
C
k
C
C
dC
dt
n
1
1
1
1
1
1
2
2
2
1
2
2
2
2
3
=
+
−
(
)
+
=
+
−
(
)
+
=
α
β
γ
α
β
γ
in

α
β
γ
n
n
n
n
n
n
C
k
C
−+
−
+
(
)










1
	
(6.108)
or in matrix form
	




C
C
C
C
k
k
n
1
2
3
1
1
1
2
2
2
2
3
3
0
0
0
0
0
0
...
















=
−
−
β
γ
α
β
γ
α
β −
−
+
















k
k
C
C
C
n
n
n
n
3
3
1
2
3
0
0
0
0
0
γ
α
β
γ
...
...
...
...
...
C
C
n
















+
















α1
0
0
0
...
in	
(6.109)
By inspection, it can be seen that the system matrix has a tridiagonal structure with similar terms, 
save for the last row, which requires a simple explanation. The last, nth, cell has no downstream 

370
Environmental Systems Analysis with MATLAB®
counterpart, and hence its diffusion term would be missing. But the model was developed under 
the ‘open-end’ assumption, meaning that the river condition would remain the same beyond the 
downstream boundary. It is therefore necessary to introduce a further, virtual cell—a ‘ghost cell’ if 
you like—to preserve the diffusional continuity at the downstream end. This ghost cell is assumed 
to have the same concentration as the previous nth cell and no kinetics, so that C
C
n
n
+ =
1
. For this 
reason, the diagonal term βi
k
−
1 is changed into β
γ
n
n
n
k
−
+
 in the last row. The space-discretized 
continuous-time diffusive reach model is shown in Figure 6.42, where each cell is linked to the 
adjacent ones via advection and diffusion. The first cell receives the upstream input C
t
in ( ) that 
represents the time boundary condition, while the steady-state profile obtained by solving the 
steady-state spatial Equation 6.97 with either the BVP or the LS method provides the initial condi-
tion for each cell.
Here, we have a problem of redundancy, because the solution to Equation 6.97 represents a continu-
ous concentration profile, whereas for the initialization of the n cells, only n discrete initial conditions 
are required. There are two possibilities to obtain a meaningful initial condition for each cell from 
the continuous profile, by taking either the average concentration or the middle cell concentration, as 
illustrated in Figure 6.43.
Advection
Diﬀusion
Cin
Cout
C1
C1 (0)
C2 (0)
Cn (0)
C2
Cn
Cn
Cin (t) @ x = 0
x
t
River reach partitioned in n cells
Initial steady-state proﬁle
C− (x) @ t = 0
Extra ‘ghost’ cell
Reach upstream input
• • •
FIGURE 6.42  Spatial discretization of the mono-dimensional diffusion equation. The reach is partitioned 
into n completely mixed cells that communicate by means of advection and diffusion. The ‘open-end’ assump-
tion requires the introduction of a ‘ghost’ cell after the last cell, with the same concentration. The previously 
computed steady-state profile provides the initial condition for each cell.
Cell average concentration
Cell middle concentration
Cell-partitioned river reach
Stationary continuous proﬁle
C (x)
x
FIGURE 6.43  Differing methods for extracting the cell initial conditions from the steady-state concentra-
tion profile. The triangles represent the within-cell average concentration, while the squares indicate the mid-
cell concentration.

371
Flow Reactor Modelling
6.3.6.1  Numerical Simulation of the Diffusive Reach Model in Time and Space
Let us now recap the work done so far: the system structure has been space-discretized and its 
boundary conditions have been specified using one of the procedures described in Section 6.3.5, 
including both the initial steady-state profile and the upstream input time-series C
t
in ( ). 
In the following example, we are going to simulate the river system with the linear model 
Equation 6.109, assuming a first-order chemical kinetics. Figure 6.44 shows how the eigen-
values of the system matrix Equation 6.109 are influenced by the velocity (a) and by the dif-
fusion (b). In both cases, their negative real part is constrained by the kinetic constant (k), 
thus ensuring the system stability. The vertical line at –k constraints the eigenvalues in the 
left-half-plane, representing a stability boundary that makes the system more robust as the 
kinetic constant increases.
The MATLAB–Simulink implementation of this model is very simple. The river system is 
represented by the Simulink linear model in Figure 6.45, where a single linear state-space block 
incorporates the four matrices which represent the model, including the initial conditions borrowed 
from the steady-state initial profile. The upstream loading is supplied as an input by the from 
Workspace block, while the output concentration matrix is routed to the workspace by the to 
Workspace data sink.
The MATLAB launch script is listed in Box 6.2 for the data input part, including the estima-
tion of the diffusion with the Fisher formula Equation 6.76. The subsequent Box 6.3 shows how the 
system matrices are formed prior to being transferred to the Simulink state-space block. This script 
Real eigenvalues
Complex eigenvalues
Real eigenvalues
Complex eigenvalues
−0.5
−0.4
−0.04
−0.3
−0.03
−0.2
−0.02
−0.01
0.1
0
0.1
0
0.01
0.02
0.03
0.04
Real (λ)
Imaginary (λ)
u = 0.05 m s−1
D = 0.2221 m2 s−1
D = 0.1777 m2 s−1
D = 0.2777 m2 s−1
D ≥ 0.5553 m2 s−1
u = 0.03 m s−1
u = 0.01 m s−1
u = 0.07 m s−1
← −2
← −2
(a) 
−1.0
−0.8
−0.05
−0.6
−0.03
−0.4
−0.02
−0.01
−0.2
0
−0.04
0
0.01
0.02
0.03
0.05
0.04
Real (λ)
Imaginary (λ)
(b) 
−k
−k
FIGURE 6.44  The eigenvalues of the system matrix Equation 6.109 are influenced by the velocity (a) and by 
the diffusion (b). In both cases, their negative real part is constrained by the kinetic constant (k), thus ensur-
ing the system stability. These graphs were obtained with the MATLAB script Diffusive _ River _
Eigenvalues.m in the ESA _ MATLAB\Exercises\Chapter _ 6\Diffusive _ River folder.
Upstream input
Reach model
Concentration
[t_in C_in]
x′ = Ax + Bu
y = Cx + Du
C
FIGURE 6.45  Simulink implementation of the river reach model Equation 6.109. The initial profile is passed 
as initial condition to the reach model state-space block.

372
Environmental Systems Analysis with MATLAB®
simply implements the system constants defined in Equation 6.107, launches the simulation, and 
plots the results.
A sample simulation is shown in Figure 6.46. The simulation starts with the specified initial 
profile, and since the upstream loading is zero for the entire simulation horizon, the concentra-
tion tends to flatten out and would eventually tend to zero for a sufficiently long simulation time. 
In this case, the velocity profile and the diffusivity are assumed to be the same for all the cells 
u
D
=
=
(
)
−
−
0 1
0 01
1
2
1
.
;
.
ms
m s
.
Figure 6.47 compares the same simulation with the PF case, in which the diffusivity is set to zero. 
In both cases, the peak concentration travels downstream with the stream velocity, but while in the 
diffusive case (a) the pollutant spreads to adjacent cells as a result of diffusion, in the PF case (b) it 
remains confined to the water volume where it started, which travels downstream without mixing, 
in agreement with the PF hypothesis. In both cases, the slope of the peak in the time–space domain 
is given by the velocity u = x t/ .
BOX 6.2  PRELIMINARY OPERATIONS TO SIMULATE THE RIVER 
MODEL EQUATION 6.109: BOUNDARY CONDITIONS LOADING
clear 
close all
% Load Initial Concentration profile
load Init_Conc
% Assign time and values of experimental observations
t_exp=Mis_exp(:,1);
C_exp=Mis_exp(:,2);
% Compute maximum reach length
L=ceil(t_exp(end));
% Set the number of cells
N_cell=30;
% Compute length of each cell
dz=L/(N_cell-1);
z=0:dz:L;
% Interpolate the initial profile to fit the cells
C_iniz=csaps(t_exp,C_exp,0.9,z);
% Load velocity data
load U_data
% Smooth the velocity profile to fit the cells
u=csaps(t_data,Y_data,0.9,z);
% Estimate the Diffusion with Fisher’s formula
uo=mean(u);   % Average velocity (m/s)
w=15;         % Reach width (m)
s=0.0001;     % slope
h=1.5;        % average depth (m)
Dif=0.011*uo^2*w^2/(h*sqrt(9.81*s*h))
% Chemical kinetics
k=0.03; % (1/s)
% Load input upstream data
load Cin_data
t_in=Mis_exp(:,1);
% set the simulation time
tfin=t_in(end);
% Input upstream concentration
C_in=Mis_exp(:,2);

373
Flow Reactor Modelling
6.3.6.2  Comparison with the CSTR Chain
As a concluding remark, we are now going to compare the space-discretized diffusive model Equation 
6.109 to the comparatively simpler model in which each cell of Figure 6.42 is replaced by a CSTR. 
The two structures are shown in Figure 6.48 with the pertinent dynamical equation for the generic cell.
Recall that the CSTR chain model of Equation 6.24 is
	



C
C
C
q
k
q
q
k
q
q
n
n
n
1
2
1
2
2
0
0
0
0
0
0


















=
−
−
−
−
−
−
...
...
k
C
C
C
q
C
q
F
n
i
i












×












+












=
1
2
1
0
0


Vi
	
(6.110)
BOX 6.3  SET-UP OF MODEL EQUATION 6.109 AND SIMULATION LAUNCH
% Set-up the system matrix
A=zeros(N_cell,N_cell);
B_mat=zeros(N_cell,1);
C_mat=ones(1,N_cell);
for i=1:N_cell
  a(i)=u(i)/(2*dz)+Dif/(dz*dz);
  b(i)=-2*Dif/(dz*dz);
  c(i)=Dif/(dz*dz)-u(i)/(2*dz);
end
% First row
A(1,1)=b(1)-k;A(1,2)=c(1);
B_mat(1)=a(1);
% Middle rows
for i=2:N_cell-1
A(i,i-1)=a(i-1);
A(i,i)=b(i)-k;
A(i,i+1)=c(i-1);
end
% Last row
A(N_cell,N_cell-1)=a(N_cell-1);
A(N_cell,N_cell)=b(N_cell)-k+c(N_cell);
% Simulate the model
[t, x,y]=sim(‘Reach_model’,tfin);
% Plot the results
figure(2)
surf(t,z,x’)
axis tight
xlabel(‘time (h)’)
ylabel(‘river length (km)’)
shading interp
view([140 58])
grid off
zlabel(‘Conc. (mg/L)’)
rotate3d on

374
Environmental Systems Analysis with MATLAB®
Here, the system matrix is sub-diagonal and its eigenvalues are given by the diagonal elements, 
as shown by Equation 6.25. In the CSTR chain, the diffusive term is clearly missing, as the only 
coupling between adjacent cells is given by advection through the dilution rate q. Clearly, the latter 
model Equation 6.110 is more robust, lacking the destabilizing effect of diffusion, but is also less 
accurate, omitting the diffusive term that plays an important role in the dynamics of river quality. 
To make the two models equivalent, the dilution rate q of the CSTR chain, used in Equation 6.110, 
was computed from the cell partitioning as follows:
	
q
F
V
u S
x S
u
x
=
=
⋅
⋅
=
∆
∆	
(6.111)
Initial steady-state proﬁle
Final proﬁle
Upstream
time trend
1.0
0.8
0.6
0.4
Concentration (mg L−1)
0.2
0
10
20
30
40
0
5
10
15
Time (h)
Reach length (km)
FIGURE 6.46  Simulation of the space–time evolution of a river reach with the model Equation 6.109, starting 
with a given steady-state profile, with given constant velocity (u = 0.1 m s−1) and diffusivity (D = 0.01 m2 s−1). 
Since the input concentration is zero for the whole simulation period, the final profile flattens out and would 
eventually tend to zero, given enough simulation time. This graph was obtained with the MATLAB script 
Go _ Diffusive _ River.m 
in 
the 
ESA _ MATLAB\Exercises\Chapter _ 6\Diffisive _
River folder.
Diﬀusive reactor
u = 0.1 m s−1
Time (h)  
Reach length (km)
(b)
PF reactor
50
40
30
20
10
0
50
40
30
20
10
0
Time (h)  
Reach length (km)
(a)
u = 0.1 m s−1
FIGURE 6.47  (a) Same simulation of Figure 6.46, presented as a contour graph, showing that the initial 
peak travels downstream with the stream velocity (u = 0.1 m s−1). The concentration spread is due to diffu-
sion. By comparison, in (b) the same reach is simulated with PF conditions (D = 0) and no pulse spreading 
occurs. These graphs were obtained with the MATLAB script Go _ Diffusive _ River.m in the ESA _
MATLAB\Exercises\Chapter _ 6\Diffusive _ River folder.

375
Flow Reactor Modelling
All the other parameters and boundary conditions, such as the initial profile C
x
in ( ) and the time-
varying input C
t
in ( ), are the same. Figure 6.49 compares the two model responses, showing the 
better control that the diffusive model (a) has over the variable river conditions. Instead, the CSTR 
chain model (b) has less control over the domain, especially in the downstream reaches, where the 
input propagates with more delay along the CSTR chain, given the lack of diffusion.
Diffusive discrete-space reach model
Cin
Ci
Cn = Cout
Cin
Ci
Cn = Cout
(b)
(a)
CSTR chain reach model
dCi
dt  = − qiCi + qiCi−1 − k . Ci
Input
advection
Onput
advection
Chemical
kinetics
Advection
Diffusion
Ci+1 − Ci−1
2Δ xi
Ci+1 − 2Ci + Ci−1
Δ xi
2
dCi
dt  = − ui
Chemical
kinetics
 − k . Ci
 + Di
FIGURE 6.48  Comparison between the space-discretized diffusive model Equation 6.109 (a) and the CSTR 
chain Equation 6.110 (b). In the latter, the feedback diffusive term is missing and the cells communicate only 
by advection.
5
1.4
Concentration
(mg L−1)
1.6
1.8
10
z (km)
Time (h)
15
20
25
(a)
(b)
80
60
40
20
0
5
1.2
1.4
Concentration
(mg L−1)
1.6
1.8
10
z (km)
Time (h)
15
20
25
80
60
40
20
0
FIGURE 6.49  Comparison of diffusive river simulation using the two model schemes of Figure 6.48: (a) diffusive 
discrete-space model response, (b) CSTR chain model response. This comparison was produced by the MATLAB 
script Go_Diffusive_River.m in the ESA_MATLAB\Exercises\Chapter_6\Diffusive_River 
folder.


377
7 Microbial Kinetics Modelling
We talk about life as being dull as ditchwater, but is ditchwater dull? Naturalists with 
­microscopes have told me that it teems with quiet fun.
G.K. Chesterton
The focus of the preceding chapter was on the hydraulics of the system, and we assumed for 
­simplicity that in the previous examples, the chemical transformations were governed by a first-
order kinetics. This assumption made the model equations linear, facilitating its development and 
analysis. In this chapter, we are going to acknowledge that, in contrast, a wide variety of chemical 
transformations occurring in nature follow differing kinetics, and, in particular, we are going to 
focus on the role of microorganisms, which are involved in almost all of the natural ­chemical trans-
formations. In Section 1.10.4.1, we introduced the Monod kinetics to have a benchmark model for 
our early exercises. This kinetics is the cornerstone of microbial transformation, and it is now time 
to put it into a broader context, explore its biochemical background and to take a wider look at the 
biochemical component of environmental models.
7.1  ENZYMATIC REACTION KINETICS
A brief review of chemical kinetics is now presented to introduce the biochemical reactions that will 
be encountered in environmental systems.
7.1.1  A Summary of Elementary Chemical Kinetics
Let us begin by recalling the basic notions of chemical equilibrium and reaction kinetics (Alberty, 
1979; Houston, 2006; House, 2007; Marin and Yablonsky, 2011). Consider the reversible equilib-
rium between reagents and products,
 
a A
b B
c C
d D
k
k
[ ]
[ ]
[ ]+ [ ]
reagents
products
dir
inv
+
 




⇀

↽


 



 	
(7.1)
where:
A
B
[ ] [ ]
,
 represent the molar concentrations of the reagents
C
D
[ ] [ ]
,
 represent those of the products
a b c
, , ,d
(
) are stoichiometric constants that balance the equilibrium
By the law of mass–action, the forward and reverse reaction rates can be defined as
 
Forward reaction rate
dir
dir
r
a
d A
dt
b
d B
dt
k
A
= −
= −

=
⋅
1
1
⋅
= −
= −


a
b
B
r
c
d C
dt
d
d D
Backward reaction rate
inv
1
1

=
⋅⋅

dt
k
C
D
c
d
inv
	
(7.2)

378
Environmental Systems Analysis with MATLAB®
and thus the overall reaction rate R is given by
 
R
r
r
k
A
B
k
C
D
k
A
a
b
c
d
=
−
=
⋅⋅−
⋅⋅

=
⋅
dir
inv
dir
inv
dir
⋅−⋅









a
b
c
d
B
C
D
keq
	
(7.3)
where the equilibrium constant keq is defined as
 
k
k
k
C
D
A
B
c
d
a
b
eq
dir
inv
=
= [ ] ⋅[ ]
[ ] ⋅[ ]
	
(7.4)
From the previous definitions, it might appear that the reaction rate could be written simply by 
inspecting the chemical equilibrium (7.1) and using the stoichiometric constants as the rate expo-
nents in Equation 7.3, but this is not so, unless the chemical equilibrium (7.1) is elementary, that 
is, it is not the sum of several reaction steps. In the latter case, only the dynamically relevant steps, 
that is, the rate-limiting steps, should be considered for the exponents. As an example of this lack 
of correspondence when the equilibrium is the sum of several reaction steps, consider the following 
irreversible chemical equilibrium, where the brackets have been omitted for clarity
 
A
B
C
k
+
→

2
	
(7.5)
If the law of mass–action is directly applied, the reaction rate should be
 
r
k A B
= −⋅
⋅
2	
(7.6)
In contrast, a chemist who knows about this reaction would tell us that the experimentally observed 
reaction rate is in fact
 
r
k A B
obs = −⋅
⋅
	
(7.7)
How can we resolve this conflict? Obviously, it is the theory that should conform to the data and not 
the other way around, so we ask our chemist again, who will tell us that the stoichiometric equilib-
rium (7.5) is actually the sum of two steps: a slow one in which one mole of A reacts with one mole 
of B to form an intermediate AB*, followed by a fast step in which the intermediate reacts with the 
second mole of B to yield the product C. From a kinetic viewpoint, the second step is unimportant, 
being much faster than the first, which in turn limits the reaction rate. Thus, before actually writing 
the kinetic rate equation by using the stoichiometric weights, the equilibrium (7.5) should be decom-
posed into its elementary steps, if we suspect there is any. In the present case,
 
First step (slow)
Second step (fast)
A
B
AB
AB
B
C
k
+
→

+
→
*
*
	
(7.8)
thus, considering only the slow step yields the correct kinetics of Equation 7.7. This simple example 
illustrates that care must be taken in using the stoichiometric constants as kinetic exponents, as 
this can be done only if the chemical equilibrium is elementary and not the sum of several steps, in 
which case only the slow steps should be considered as kinetically relevant.
7.1.2  Enzyme-Mediated Reaction Kinetics
Now, we move on to consider an enzyme-mediated chemical reaction, which transforms a sub-
strate (S) into a product (P) due to the catalytic action of an enzyme (E). The enzyme is a complex 

379
Microbial Kinetics Modelling
molecule that acts as a catalyst by making the reaction possible by lowering the activation energy 
barrier, but it does not take part in the reaction itself (Roels, 1983; Bailey and Ollis, 1986). The 
enzymatic reaction occurs when the substrate binds to a specific spot on the enzyme to form an 
activated complex, which then reacts to yield the product and eventually releases the enzyme. 
Because most of the enzymes have only one binding site, it makes sense to assume that one mole 
of enzyme combines with one mole of substrate. At the end of the reaction, the product will be 
released, and the enzyme will still be available to catalyse more substrate molecules. The enzyme-
mediated reaction can then be described by the following chemical equilibrium:
 
S
E
ES
P
E
k
k
k
+
→

+
1
2
3

⇀

↽


*
	
(7.9)
supposing that the unstable intermediate (ES*) can either react back to the reagents or proceed 
forward to yield the product (P), the latter path being considered here as irreversible, eventually 
releasing the enzyme (E). Knowing that the equilibrium (7.9) is elementary, we can write the reac-
tion rates by inspection:
 
Substrate
Activated complex
dS
dt
k
E S
k
ES
dES
dt
k
E S
= −
⋅
⋅
+
⋅
=
⋅
⋅
1
2
1
*
*
−
+
(
)⋅
=
⋅








k
k
ES
dP
dt
k
ES
2
3
3
*
*
Product
	
(7.10)
The system of equations (7.10) describes the enzymatic reaction in any setting, but to derive the 
well-known Michaelis–Menten model for an enzymatic reaction, and then the subsequent Monod 
microbial kinetics, some simplifying assumptions must be made:
•	 The enzyme is not consumed during the reaction and is released on its completion. 
Therefore, during the reaction, the sum of the free (E) and complexed (ES*) enzyme is 
constant and equal to the initial enzyme quantity Eo. Thus, E
E
ES
o =
+
*.
•	 The activated complex ES* is at steady state, because its formation and dissociation bal-
ance at any one time; thus dES
dt
*
≅0.
Applying the steady-state assumption to the second equation yields
 
dES
dt
k E S
k
k
ES
E S
k
k
k
ES
K ES
s
*
*
*
*
≅
⇒
⋅
=
+
(
)
⇒
⋅
=
+
(
)
=
0
1
2
3
2
3
1
	
(7.11)
Now, from the first assumption, we can express the free enzyme as E
E
ES
o
=
−
* and substitute it 
in Equation 7.11 to yield
 
E
ES
S
K ES
E
S
K
S ES
ES
E
S
K
S
o
s
o
s
o
s
−
(
)
=
⇒
⋅
=
+
(
)
⇒
=
⋅
+
(
)
*
*
*
*
	
(7.12)
This allows the elimination of the second equation, so that −
=
dS dt
dP dt. Thus, the system of 
equations (7.10) reduces to a single equation
 
−
=
=
=
+
dS
dt
dP
dt
S
K
S
s
µ
µ
min
max
	
(7.13)

380
Environmental Systems Analysis with MATLAB®
where
 
µmax
and
=
⋅
=
+
k
E
K
k
k
k
o
s
3
2
3
1
	
(7.14)
Several important conclusions can be drawn from Equation 7.13:
•	 The maximum reaction rate µmax is linearly related to the total enzyme in the system, as 
per Equation 7.14.
•	 The nonlinear reaction rate (Equation 7.13) is modulated by the constant Ks, which depends 
on the ratio between the forward and backward equilibrium constants. Ks is also called 
half-velocity constant because when K
S
s =
, the reaction rate is µmax/2.
Figure 7.1 shows the Michaelis–Menten kinetics as a function of the available substrate. The maxi-
mum reaction rate µmax is reached for very large values of the substrate, while for S
Ks
=
 the reaction 
rate is half of that value. The initial slope of the kinetics is µmax/Ks, and therefore for small values of 
the substrate, the Michaelis–Menten kinetics can be approximated by a first-order reaction:
 
dS
dt
K
S
s
= −
⋅
µmax
	
(7.15)
while for large values of S, it tends to the constant value µmax, thus becoming a zero-order kinetics.
We have seen that the formation of the activated complex (ES*) and its reversibility are the key 
elements of the enzymatic reactions. The onset of the steady state depends on the relative abundance 
of the enzyme with respect to the substrate. If relatively little enzyme is available, it will imme-
diately bind to the substrate, so that the steady-state hypothesis is satisfied, and the reaction rate 
follows Equation 7.13, but if the enzyme concentration is of the same order as the substrate, then 
the binding will involve only a fraction of the enzyme and the reaction dynamics will be different. 
This latter case is illustrated in Figure 7.2a, in which the initial substrate/initial enzyme ratio is 
one, resulting in wide variations of ES*. Conversely, Figure 7.2b shows that if the enzyme is scarce, 
the onset of the steady state is almost immediate (inset), and the reaction proceeds as predicted by 
the Michaelis–Menten theory. Figure 7.3 shows the Simulink® model, launched by the MATLAB® 
script in Box 7.1, used to produce these simulations.
0
5
10
15
20
25
30
0
0.1
0.2
0.3
0.4
0.5
Substrate (mg L−1)
Reaction rate (1/h)
Ks = S
μmax
μmax/Ks
μmax/2
FIGURE 7.1  The Michaelis–Menten kinetics as a function of the available substrate (S). The initial slope is 
equal to µmax/Ks, and when K
S
s = , the reaction rate is µmax/2. The reaction rate tends to µmax for large values 
of the substrate.

381
Microbial Kinetics Modelling
Differing hypotheses can be formulated regarding the reversibility of the reaction paths in the 
equilibrium (7.9). If, for example, the second transformation is assumed to be reversible
 
E
S
ES
P
k
k
k
k
+
1
2
3
4

⇀

↽



⇀

↽


*
	
(7.16)
then by similar reasoning that led to Equation 7.13, the following kinetics can be obtained:
 
µ
µ
µ
µ
µ
rr
s
p
p
s
p
p
p
s
K
S
K P
S
K
P
K
k
k
K
k
k K
=
−
+
+
=
=
max
max
with
1
2
3
1
4
	
(7.17)
Initial enzyme
Eo
X
E
E.S
K1
1
S
S
To workspace
Substrate
Sum
Sum
Activated
complex
Product
Product formation
To workspace1
To workspace2
ES
P
1
S
1
S
K2
+
+
_
+
_
_
Forward
Backward
ES∗ decay
K2 + K3
K3
FIGURE 7.3  Simulink diagram to study the effect of relative enzyme abundance on the Michaelis–Menten 
reaction.
0
100
200
300
400
500
600
0
2
4
6
8
10
(b) 
Eo/So = 0.01
Concentration (mg L−1)
Time (min)
S
ES∗
P
0
1
2
3
4
5
6
0
2
4
6
8
10
(a) 
Eo/So = 1
Concentration (mg L−1)
Time (min)
S
ES∗
ES∗
P
FIGURE 7.2  Time evolution of the Michaelis–Menten enzymatic reaction with differing initial enzyme 
concentrations. In (a), the enzyme is so abundant that the ES* is never at steady state, thus violating the second 
hypothesis, while in (b), the shortage of enzyme almost immediately establishes the steady-state regime for 
the activated complex (see the inset). The graphs were produced with the MATLAB script listed in Box 7.1 
and the Simulink model of Figure 7.3.

382
Environmental Systems Analysis with MATLAB®
7.1.3  Self-Inhibiting Kinetics
An important case of enzymatic reaction is the one that involves two active sites and the genera-
tion of two activated complexes, only one of which generates the final product, while the other is 
stable. The second active site is often referred to as the inhibition site, because it does not release the 
enzyme. This reaction scheme can be described by the following equilibria:
 
E
S
ES
ES
S
ES
P
E
k
k
k
k
k
+
→
+
→

+
1
2
4
5
3
2

⇀

↽



⇀

↽


*
*
	
(7.18)
While the lower branch is the same as in Equation 7.9, the upper one leads to a stable compound 
ES2
(
) that sequesters the enzyme, which is no longer able to perform its catalytic function. As a 
result, the reaction rate slows down due to lack of enzyme, and because of the two-sided role of the 
substrate, which contributes to the product formation when it is scarce and binds to the active site, 
BOX 7.1  LAUNCH SCRIPT TO SIMULATE THE MICHAELIS-
MENTEN ENZYMATIC REACTION WITH THE POSSIBLE ONSET OF 
THE STEADY STATE OF THE ACTIVATED ENZYME. THE SCRIPT 
REFERS TO THE MM_BASIC SIMULINK MODEL OF FIGURE 7.3
% Select the enzyme initial concentration Eo to avoid (1) or
% reproduce (2) the steady-state condition
ESS=1;
switch ESS
    case 1
% Initial conditions to simulate the lack of steady-state for ES*
Eo=10;  % Initial enzyme
So=10;  % Initial substrate
tfin=6;
    case 2
% Initial conditions to simulate the steady-state for ES*
Eo=0.1; % Initial enzyme
So=10;  % Initial substrate
tfin=600;
end
% Other initial conditions
ESo=0;Po=0;
% Kinetic constants
K1=1;
K2=4;
K3=1;
% Note that the half velocity constant Ks=(K2+K2)/K1=5
% Launch the simulation
[t,x,y]=sim(‘MM_basic’,tfin);
figure(1)
set(1,‘Position’,[279 244 557 323])
plot(t,S,t,ES,‘:b’,t,P,‘-.b’)
set(gca,‘FontName’,‘Arial’,‘FontSize’,14)
title([‘Eo/So = ’,num2str(Eo/So)])
ylabel(‘Conc. (mg/l)’)
xlabel(‘time (min)’)
legend(‘S’,’ES*’,‘P’)

383
Microbial Kinetics Modelling
but slows the reaction when it is abundant and binds to the enzyme in the secondary site as well. For 
this reason, this mechanism is referred to as self-inhibitory. By applying the same basic hypotheses 
of enzyme conservation (including the sequestered fraction) and steady state of the activated com-
plex, the Haldane kinetics (Bailey and Ollis, 1986) is obtained:
 
µ
µ
µ
hald
max
max
with
=
+
+
=
+
=
=
⋅
1
1
2
3
1
5
4
3
K
S
S
K
K
k
k
k
K
k
k
k
E
s
i
s
i
o
	
(7.19)
Figure 7.4 shows the reaction rate of the Haldane kinetics, which unlike Michaelis–Menten is not 
monotonic. In fact, the reaction rate increases with the substrate up to Smax, after which it decreases 
because of self-inhibition. The peak concentration Smax can be found by setting the derivative of the 
kinetics with respect to S to zero, to yield
 
d
dt
S
K
S
S
K
K
S
K
K
S
S
K
S
K
s
i
i
s
i
s
+
+












=
−
+
+






=
⇒
=
2
2
2
2
0
max
⋅Ki 	
(7.20)
Thus, the substrate concentration producing the maximum reaction rate Smax is the geometric mean 
of the two kinetic constants. The reader is referred to Bailey and Ollis (1986) for a thorough survey 
of many other inhibitory mechanisms, which are beyond the scope of this book.
7.1.4  Other Kinetics of Interest
So far, we have considered a limiting substrate, meaning that its concentration controls (limits) the 
reaction kinetics. An alternate, and very common, case is when, in addition to the one just exam-
ined, the reaction is based on another substrate. The second substrate in this case is not inhibiting, in 
0
5
10
15
20
25
30
0
0.2
0.4
0.6
0.8
1
Substrate (mg L−1)
Reaction rate (1/h)
Smax
μ∗
μmax = 5
S1
S1
Ks = 10
Ki = 2
FIGURE 7.4  Haldane kinetic reaction rate as a function of the substrate. Unlike the Michaelis–Menten 
kinetics, the reaction rate increases with the substrate up to Smax, after which it decreases because of self-
inhibition. Thus, there are two substrate values (S1 and S2) straddling Smax and producing the same reaction 
rates. This graph was obtained with the MATLAB script Haldane.m in the ESA _ Matlab\Exercises\
Chapter _ 7\Enzyme _ Kinetics folder.

384
Environmental Systems Analysis with MATLAB®
the Haldane sense, because it does not bind with the substrate, but its presence decreases the overall 
reaction rate. This mechanism can be modelled as
 
µ
µ
S S
S
K
S
K
K
S
s
s
s
1
2
1
1
2
1
2
2
,
(
) =
+
⋅
+
max
Internally
limiting
substrate
Externally
limiting
substrate
	
(7.21)
In Equation 7.21, the first fraction is the Michaelis–Menten term, with S1 acting as the internally 
limiting substrate, while in the second term S2 is the externally limiting factor. In fact, the reac-
tion rate is inversely proportional to the concentration of S2, meaning that its presence acts as 
a restraining term on the reaction. A typical example of this mechanism will be observed with 
denitrifying microorganisms that are ‘distracted’ from their role (reducing nitrogen oxides into 
molecular nitrogen) by the oxygen availability. These facultative microorganisms prefer oxygen as 
their electron acceptor, as it allows them to activate a more robust adenosine triphosphate (ATP)-
producing metabolism. If oxygen is absent, however, they settle for NO3
− or NO2
− as electron accep-
tors, hence the term ‘facultative’, resulting in a less energetic metabolism. In fact, in most activated 
sludge models (Henze et al., 2000), the µmax for the denitrification reaction is about 80% of the 
same rate in aerobic conditions. Returning to Equation 7.21, in that case oxygen is the ‘distracting’ 
substrate S2, because its concentration would make the second term smaller and slow down the 
entire kinetics.
Another very common occurrence is when the microorganisms need more than one substrate 
for their growth. In 1840, J. Liebig proposed his Law of the Minimum, suggesting that the growth 
of organisms that require multiple substrates is limited by the single substrate that is in shortest 
supply relative to demand (Palmeri et al., 2014). This can be expressed as the product of several 
Michaelis–Menten factors:
 
µ
µ
S
S
S
K
S
S
K
S
S
K
S
n
s
sL
n
S
n
n
1
1
1
2
2
2
1
,...,
(
) =
+
⋅
+
⋅
⋅
+
max

	
(7.22)
In this way, the single smallest substrate in the product affects the overall growth rate.
7.2  MICROBIAL METABOLISM OF CARBONACEOUS SUBSTRATES
The natural cycle of carbon is well described by Cloete and Muyima (1997), and it is sketched in 
Figure 7.5, which can be viewed as four intertwined cycles. From top to bottom, the upper part 
describes how organic carbon, briefly indicated as CH O
2
(
)n, is synthesized from inorganic carbon 
CO2
(
) through either an anaerobic (left) or aerobic (right) path. The lower part of the diagram shows 
the two main paths through which the organic carbon thus generated is again oxidized to inorganic 
carbon, via an anaerobic (left) or an aerobic (right) path.
Figure 7.6 shows the main difference in carbon transformations through the aerobic (a) or the 
anaerobic (b) metabolism. In the aerobic pathway, nearly half of the organic carbon entering the 
system is assimilated into the biomass, whereas in the anaerobic pathway, most of it is converted 
into a gas mix of carbon dioxide (CO2) and methane (CH4). This is due to the very different micro-
organisms involved, with their differing metabolic mechanisms and yield factors, as will later be 
explained.
7.2.1  Basic Molecule/Microorganism Interactions of Environmental Interest
There exists a vast microbiological literature describing the biology of the microorganisms, both 
in natural (Campbell, 1983; Battley, 1987; Madigan et  al., 2009) and man-made environments 
(Orhon and Artan, 1994; Cloete and Muyima, 1997; Henze et al., 2000; Gijzen, 2001) so only a brief 

385
Microbial Kinetics Modelling
review of the biochemical foundations of cell metabolism will be included here, as many excellent 
textbooks, first and foremost the Lehninger textbook (Nelson and Cox, 2008), are available. The 
energy and material flows in an ecosystem are illustrated in Figure 7.7, with the solar radiation being 
the prime energy source, which sustains the entire food chain through the anabolic and catabolic 
pathways.
There are two complementary processes, through which the organisms transform the biodegrad-
able materials:
•	 Assimilative (or anabolic) processes that transform the biodegradable substances (the 
substrate) into cell components, thus contributing to the biomass growth, and releasing 
metabolites such as H2O, CO2, NH4, etc. in the process.
•	 Dissimilative (or catabolic) processes, multi-stage reduction–oxidation (redox) reactions 
that release energy that the microorganisms use for their assimilative processes.
Aerobic
metabolism
Corg biomass
∼  49%
Corg effluent
 ∼ 2%
CO2 gas
∼ 49%
Corg influent
100%
(a)
Anaerobic
metabolism
Corg biomass
2 ∼ 4%
Corg effluent
1 ∼ 8%
CO2 + CH4 gas
90 ∼ 95%
Corg influent
100%
(b)
FIGURE 7.6  Differing partitioning of carbon in the aerobic (a) and in the anaerobic (b) metabolism. In (a), 
nearly half the available organic carbon is metabolized into cell biomass, whereas in (b), most of the organic 
carbon is transformed into gas, with very little biomass growth.
(CH2O)n
CO2
CH4
CO2
Respiration
Aerobic
carbon
ﬁxation
Fermentation
Anaerobic
carbon
ﬁxation
Methane
oxidation
Methanogenesis
Corg production
Corg removal
Anaerobic metabolism
Aerobic metabolism
FIGURE 7.5  Natural carbon cycle can be viewed, from top to bottom, as the production/removal of organic 
carbon, or, from left to right, as carbon transformations that depend on the electron acceptor. Either way, the 
diagram hinges on the organic carbon (centre) and its inorganic counterpart (CO2). The left branch is based on 
the anaerobic metabolism, and the result is methane production, whereas the right branch is based on aerobic 
metabolism.

386
Environmental Systems Analysis with MATLAB®
The metabolism of microorganisms is based on four basic ingredients:
•	 An energy source, providing energy for the assimilative (anabolic) processes.
•	 A carbon source, the prime material for the build-up of biomass.
•	 An electron donor, to sustain the oxidation half reaction in the redox process.
•	 An electron acceptor, to sustain the reduction half reaction in the redox process.
Depending on the nature of these four factors, the metabolic pathway can have differing aspects, 
as summarized in Table 7.1, with the main distinction being between autotrophic and heterotrophic 
microorganisms. The former use inorganic carbon (CO2) as their carbon source, while the latter 
utilize a wide variety of organic compounds for their growth.
From the modelling viewpoint, it is important to remember that both metabolic pathways 
­(anabolic and catabolic) must be considered in a proper mass and energy balance.
Solar energy
Photosynthesis
Organic
compounds
Respiratory
chain
Metabolites
Biomass growth
Biological work
Anabolic pathway
(materials supply)
Catabolic pathway
(energy supply)
CO2 , H2O
FIGURE 7.7  Energy and material flows in an ecosystem are initiated by the solar energy and they sustain the 
entire food chain through the anabolic and catabolic pathways.
TABLE 7.1
Summary of Microbial Metabolic Factors
Energy Source
Metabolism
Carbon 
Source
Electron 
Donor
Electron 
Acceptor
Process
Solar energy 
(reduction 
half-reaction 
missing)
Photo-autotrophic
CO2
H2O
CO2
Photosynthesis
Chemical 
energy
Chemo-autotrophic
CO2
Inorganic 
molecules
H2, Fe2+, 
NH4
+, NO2
−
O2
NO3
−
Oxidation
+
Assimilation
(e.g. Nitrification)
Chemo-heterotrophic
Organic carbon
Organic carbon
O2
Aerobic respiration
NO3
−
Anoxic respiration
Organic carbon
Organic carbon
Organic carbon
Anaerobic 
fermentation

387
Microbial Kinetics Modelling
7.2.2  The Energy of Microbial Growth
Depending on the kind of metabolism, Figure 7.8 illustrates the interactions between the micro-
organisms and the substrate, showing that for photo-autotrophic organisms, the energy is directly 
available as solar radiation (a). Conversely, for the chemo-trophic organism in (b) and (c), catabolic 
reactions provide the energy necessary for biosynthesis, the main difference being in the nature of 
the carbon source.
The basic energy storage/release mechanism in chemo-trophic microorganisms is based on the 
nucleoside adenosine and its derivatives obtained by adding two or three phosphoric acid groups to 
form adenosine diphosphate (ADP) or adenosine triphosphate (ATP). Figure 7.9 shows the closed 
cycle through which ATP is formed by phosphorylation at the expense of the energy released from 
the substrate metabolic reactions. Conversely, the enzymatic hydrolysis releases energy inside the 
cell to sustain its anabolic activities. The two complementary reactions illustrated in Figure 7.9 are 
(Bailey and Ollis, 1986; Orhon and Artan, 1994)
 
ADP
ATP
7.3 kcal
ATP
H O
Phosphorilation
2
Hydro
+

→

= −
+
−
P
G
i
∆
mol 1
lysis
ADP
7.3 kcal

→

+
=
−
P
G
i
∆
mol 1 	
(7.23)
While phosphorylation requires energy to incorporate one Pi, its mirror reaction (hydrolysis) 
releases the same amount of energy. For this reason, ATP/ADP can be regarded as the ‘energy 
shuttle in the cell’ (Bailey and Ollis, 1986).
The respiratory chain is sketched in Figure 7.10 to visualize the electron ‘waterfall’ from the 
energy level of the donor to the comparatively lower energy of the acceptor. In the process, some ∆G 
may be large enough to generate one or more ATP through oxidative phosphorylation.
Figure 7.11 shows the respiratory chains of environmental interest. Depending on the kind of 
electron acceptor, the magnitude of the energy gap ∆G may produce a varying number of ATP 
molecules, thus making the metabolism more or less lively. In fact, anaerobes are rather sluggish 
bacteria with very slow dynamics, whereas aerobic metabolism is comparatively faster. But then, it 
Substrate
(organic carbon)
Anabolism
Catabolism
Energy
Biomass
(c)
Substrate
(inorganic carbon)
Anabolism
Catabolism
Energy
Biomass
(b) 
Solar energy
Energy
Substrate
(inorganic carbon)
(a) 
Biomass
Anabolism
FIGURE 7.8  The three types of microbial metabolism: (a) photo-autotrophic metabolism; (b) chemo-­
autotrophic metabolism; and (c) chemo-heterotrophic metabolism. Photo-autotrophic organisms use the solar 
energy to metabolize inorganic carbon (a), whereas lithotrophs use chemical energy drawn from inorganic 
carbon for biosynthesis (b). Chemo-heterotrophs follow a similar pathway, but use organic carbon both as an 
energy and carbon source.

388
Environmental Systems Analysis with MATLAB®
should be reminded that anaerobes were the earliest forms of like on Earth, well before an atmo-
sphere was established, so they made do with what they had, which was not much. Anyone should 
be sympathetic to these tiny forerunners of life on our planet, which are still with us, doing an 
obscure but vital job.
There are many alternate electron acceptors in nature (Hemond and Fechner, 1999), and their 
sequence of redox potentials is illustrated in Figure 7.12, which shows an increasing trend from the 
most sluggish reaction (methanogenesis) to the brisk aerobic respiration.
Of course, each respiration process is typical of one or more types of microorganisms, most of 
which are obligate users of certain electron acceptors, with some exceptions, like the already men-
tioned facultative heterotrophs, which can perform aerobic respiration if oxygen, their preferred 
electron acceptor, is available, but in its absence can settle for nitrate-N or nitrite-N as alternates. In 
this case, however, the comparatively smaller ∆G, reflected in the smaller redox potential, yields a 
lesser ATP production in the respiratory chain.
Electron
donor
Electron
acceptor
e−
e−
e−
e−
Biologically available energy release
Heat
Cell
Respiratory chain
(catabolism)
ATP
ATP
O2
2−
SO4
NO3
−
+
Corg
NH4
Free
energy
change
ΔG
FIGURE 7.10  In the respiratory chain, electrons ‘fall down’ from the higher energy level of the donor to the 
relatively lower level of the acceptor, and in the process release the energy required to form one or more ATP 
molecules, depending of the magnitude of the free energy change ΔG.
ATP
ADP
Phosphorylation
Hydrolysis
Substrate
(energy source)
Metabolites
Biomass synthesis and
endogenous metabolism
Energy
storage
−ΔG
Energy
release
ΔG
Pi
Pi
Respiratory chain
FIGURE 7.9  The cell wheel of energy revolves around the ATP/ADP couple: substrate degradation reac-
tions provide the energy to attach one inorganic phosphorus (Pi) to ADP (phosphorylation), thus forming the 
energy-rich ATP. The reverse process of hydrolysis occurs in the respiratory chain and releases the energy 
required for the anabolic processes.

389
Microbial Kinetics Modelling
7.2.3  Modelling the Microorganism/Substrate Interactions: The Monod Model
In Section 7.1, we have introduced the enzymatic reactions assuming that the enzyme was an 
external agent artificially supplied to start the reaction. This is what happens in many industrial 
processes producing drugs or food. In nature, however, the availability of the enzymes is directly 
related to the organisms that produce these substances for their metabolism. Consequently, in 
transferring the enzymatic reaction from the lab to the environment, the dynamics of the living 
900
600
300
0
−300
Aerobic 
respiration
Denitriﬁcation
Mn reduction
Fe reduction
S reduction
Methanogenesis
O2
NO2
−, NO3
−
MnO2
Fe(OH)3
SO4
2−
CO2
Electron
acceptor
Eh (mV)
FIGURE 7.12  The RedOx sequence in natural processes. (Data from Hemond, H. F. and Fechner, E. J., 
Chemical Fate and Transport in the Environment, Academic Press, San Diego, CA, 433pp, 1999.)
Anoxic
respiration
Anaerobic
fermentation
Electron
transfer
Carbon
transformation
RedOx potential (mV)
Negative
Weakly negative
or near zero
Positive
Substrate
(organic
carbon)
Fermentation
products
(organic carbon)
C
Substrate
(organic
carbon)
C
CO2
CO2
Substrate
(organic
carbon)
C
Aerobic
respiration
2−
−
−
2−
NO2 , NO3 , SO4 , CO3
Corg
e−
e−
Internal electron
exchange
Internal RedOx
reactions
Corg
Corg
Corg
O2
Respiratory
chain
≈  −400 mV to −100 mV
≈ −50 mV to 10 mV
>10 mV
e−
e−
FIGURE 7.11  Microbial heterotrophic metabolism is determined by the extent of the respiratory chain and its 
ability to produce more or less energy. From left to right, the energy change increases, as does the ATP-producing 
potential. From the macroscopic viewpoint, the differing metabolisms can be related to the redox potential.

390
Environmental Systems Analysis with MATLAB®
organism producing the enzyme must be accounted for, side by side with the enzymatic ­reaction. 
There are several hypotheses on how the microorganisms produce the enzyme they need. The first 
fundamental findings are due to Jacques Monod (1949), and it is widely acknowledged that the 
enzyme production is directly proportional to the biomass (Campbell, 1983). Let us recall that 
the maximum reaction rate µmax =
⋅
k
Eo
3
 is directly proportional to the quantity of available enzyme 
so, to transfer the enzyme kinetics into the natural environment, we must include the dynamics 
of the enzyme-producing biomass. This implies that we now have two coupled equations: one 
for the substrate utilization, and another for the biomass growth. To some extent, this situation is 
reminiscent of the prey–predator model encountered in Section 5.5, but with some important dif-
ferences. The substrate can be considered as the prey, although it does not have a growth dynamics 
of its own. Likewise, the biomass, viewed as the predator, cannot grow without the nourishment 
provided by the substrate, though its decay (endogenous metabolism) is far more complex than the 
simple linear extinction usually assumed for the predator. Going back to the microbial version of 
the enzymatic reaction, the maximum growth rate µmax now becomes biomass-specific. The fol-
lowing model uses the activated sludge models (ASM) notation (Henze et al., 2000), where the 
dissolved components are expressed as S and the particulate components as X. Here, we consider 
a dissolved substrate S that can be directly utilized by the biomass, while the particulate substrate 
should be previously hydrolysed. This distinction is somewhat different from the purely physical 
classification that considers soluble any component that can filter through a membrane with 0.45 
µm porosity. In our case, the distinction is based on the biological availability of the substances, 
rather than on their physical dimensions, as sketched in Figure 7.13.
Several new concepts and parameters must be introduced before the model is fully specified:
•	 We must specify the fraction of new biomass ∆X
(
) synthesized through the utilization of 
a fraction of soluble substrate ∆S
(
). The yield factor term is defined as Y = ∆X/∆S. Going 
back to Figure 7.6, the aerobic and anaerobic metabolisms greatly differ in the values of Y, 
which determines which fraction of the available organic carbon is assimilated as new 
biomass.
•	 As mentioned earlier, the biomass is subject to decay through endogenous metabolism, 
a comprehensive term including all of the cell processes that do not result in growth. 
Decay is generally assumed to affect a proportion of the biomass, and is thus expressed 
as b X
⋅
.
S
X
0.45 μ
(a)
(b)
Biomass
Biomass
S
X
Biomass can assimilate only
the dissolved component
Te soluble
component ﬁlters
through the 0.45 μ
membrane
FIGURE 7.13  Physical (a) and biological (b) definitions of particulate matter.

391
Microbial Kinetics Modelling
Thus, the two equations that define the Monod model for the substrate/biomass interaction can 
be written as
 
Substrate utilization
Biomass growth
dS
dt
Y
S
K
S X
dX
dt
s
= −
+
=
1 µ
µ
max
max
S
K
S X
b X
s +
−⋅






	
(7.24)
which are exactly the pair of equations that we have already encountered in Chapters 1 and 2, if only 
as a mathematical object. Now, we must regard them as much more than just that, considering the 
legacy brought to us by several decades of dedicated microbiological research.
7.2.3.1  Which Units for the Carbon-Based Quantities?
Equations 7.24 relate two very different carbonaceous quantities: substrate, including a wide 
variety of biodegradable organic carbon molecules, and biomass, encompassing an equally vast 
inventory of microorganisms. These two heterogeneous variables can coexist in Equations 7.24 
and be related to one another because both are expressed in the same units, precisely mg O2/L. 
In fact, both are measured by their oxygen equivalent, that is the amount of oxygen required 
to oxidize those substances into inert products. The chemical oxygen demand (COD) is in fact 
a global parameter expressing the amount of oxygen consumed in the chemical oxidation of 
all the carbonaceous substances, regardless of their precise nature and composition (Orhon 
and Artan, 1994; Metcalf & Eddy Inc., 2003; Sawyer et al., 2003; Brezonik and Arnold, 2011; 
Leslie Grady et al., 2011). Thus, COD is a unifying parameter, allowing very different sub-
stances to be compared and related, as in Equations 7.24. The oxygen-equivalent assumption, 
or the COD common denominator, will be used throughout and is comparable to the energy 
equivalent that was used in Chapters 1 and 5 to relate differing species in the same food chain 
on the basis of energy transfer, rather than on specific biomass weight. COD is a very precise 
and reproducible measure of the carbonaceous substances in the system, and accounts for the 
electron exchange in redox reactions (Orhon and Artan, 1994), but unfortunately, it does not 
reflect the biological mechanisms through which the bacteria metabolize those substrates. To 
reproduce these reactions, the biochemical oxygen demand (BOD) must be used, consisting of 
measuring the oxygen uptake of a batch in which substrate and bacteria interact like in their 
natural environment (Sawyer et  al., 2003). The simple BOD-measuring equipment setup is 
sketched in Figure 7.14, while Figure 7.15 shows a typical time plot obtained from a BOD test 
modelled by a substrate/biomass interaction model (Marsili-Libelli, 1986). In the beginning, 
there is an incubation phase, during which the biomass grows enough to produce a measurable 
oxygen consumption. Then, the rapidly biodegradable substances are consumed and, when they 
are fully metabolized, the biomass begins to hydrolyse the slowly degradable fraction (plateau) 
before being able to assimilate it.
The BOD bottle method reproduces the natural conditions and the metabolic capabilities of 
­bacteria, and hence it yields exactly the amount of oxygen consumed by the bacteria in metabolizing 
the biodegradable fraction of the carbonaceous substrates contained in the bottle. It has, however, 
the drawbacks common to all biological methods: poor reproducibility and the length of the test, 
normalized to five days, because the rate at which the bacteria degrade the substrates may depend 
on many uncontrollable factors, and in any case it cannot be accelerated at will. On the other hand, 
many substances that the COD test can oxidize are not biodegradable. Hence, for a given sample of 
water or wastewater, the BOD will be always less, often much less, than COD. Figure 7.16 shows a 
typical partitioning of a municipal wastewater used in the ASM models (Henze et al., 2000). The 
entire lot can be measured as COD, but only the dissolved components and part of the particulate 
X s
(
) can be measured by the BOD biological test. Several components can be isolated by specific 
analytical methods, shown in the rightmost column.

392
Environmental Systems Analysis with MATLAB®
7.2.4  The Catabolic Pathway in the Heterotrophic Aerobic Metabolism
Only half of the story, however, is told by the now familiar equations (7.24). In fact, they describe the 
anabolic part of the microbial metabolism, though we know from Section 7.2.2 that no cell anabolism 
is possible without an energy source, exploited by the catabolic metabolism. From Equations 7.24, 
we also notice that only the Y fraction of the substrate is utilized for growth, so if the substrate is 
totally biodegradable, the remaining 1–Y must follow the catabolic pathway. We will now consider 
this other pathway to set up the remaining part of the microbial metabolism considering, with refer-
ence to Figure 7.11, aerobic respiration, thus assuming that oxygen is the available electron acceptor. 
25
50
100
150
200
0
300
250
200
150
100
50
0
Time (h)
BOD (mg O2/l)
Incubation
Assimilation of rapidly
biodegradable compounds
Plateau
Assimilation of slowly
biodegradable compounds
Data
Model
FIGURE 7.15  A sample BOD test. At the beginning, the biomass is too small to produce any appreciable 
oxygen consumption, but as it grows (incubation), it consumes first the rapidly biodegradable fraction of the 
waste. The plateau is likely due to the hydrolysis of slowly biodegradable compounds that are consumed last. 
The figure shows that a kinetic model can explain this observed behaviour. (Reproduced with permission from 
Marsili-Libelli, S., Environ. Technol. Lett., 7, 341–350, 1986.)
O2
CO2
K(OH)2
ΔP
Patm
BOD scale
Hg
Water sample
under test
FIGURE 7.14  Setup scheme for the BOD test. The water sample contains both the substrate and the micro-
organisms, whose metabolism consumes oxygen and releases carbon dioxide. This is captured by the reagents, 
usually K(OH)2, so that the net gas pressure gap with respect to the atmospheric pressure (Patm) can be mea-
sured by the mercury-filled U-tube. The scale is marked directly in BOD units (mg O2/L).

393
Microbial Kinetics Modelling
Now, we can specify Figure 7.8c better as Figure 7.17, in which the rate of substrate utilization rs
( ) 
must balance the rate of biomass synthesis rX
(
) and the rate of oxygen utilization ro
( )
 
r
r
r
r
Y dS
dt
dX
dt
r
Y dS
dt
Y
Y
dX
dt
s
X
o
x
s
o
=
+
⇒
=
=
=
−
(
)
= −−






1
1
	
(7.25)
In Equations 7.25, the subscript ‘s’ refers to the synthetic (growth) part of the biomass dynamics in 
Equations 7.24, that is, neglecting the b X
⋅
 term.
Now, regarding the endogenous respiration term, there are two hypotheses, shown in the two 
schemes of Figure 7.18, which imply differing oxygen utilizations. In the growth–decay model (a), 
the endogenous metabolism is considered as an oxygen-consuming process, while in the death–
regeneration case (b), it does not consume oxygen, representing just the undoing of the cell, though 
part of the recycled material will be again metabolized, and hence will consume oxygen, as already 
explained. Therefore, the catabolic part of the biomass dynamics, with So indicating the dissolved 
oxygen (DO) concentration, can be written in the two cases as
 
Growth
decay
Death
regeneration
−
= −−
+
−⋅
−
dS
dt
Y
Y
S
K
S X
b X
dS
o
s
o
1
µmax
dt
Y
Y
S
K
S X
s
= −−
+






1
µmax
	
(7.26)
In the death–regeneration model, the oxygen consumption is related only to synthesis.
SI
SA
SF
XS
25
30
1
1
1
125
30
30
25
Dissolved COD
Chemical analysis
VFA analysis
(Gas chromatography)
Respirometric test
Chemical analysis
mg/L
Volatile fatty acids
Readily fermentable
biodegradable substrate
Slowly biodegradable substrate
Heterotrophic biomass
Inert non-biodegradable organics
Inert non-biodegradable organics
Autotrophic biomass XA
Phosphorus accumulating organisms XPAO
Stored poly-hydroxy-alkanoate XPHA
BOD = SA + SF + αXS
with α not exactly known
?
Particulate COD
Component
Typical
value
BOD
Measurement
technique
XH
XI
FIGURE 7.16  Components of a municipal wastewater adopted as a reference in the ASM models. The blue 
boxes indicate the particulate components. The whole lot can be expressed as COD, while the extent of the 
BOD equivalence includes the dissolved component and a variable part of the particulate components. The ana-
lytical method to measure each component is indicated on the right. (After Henze, M. et al., Activated Sludge 
Models: ASM1, ASM2, ASM2d and ASM3, IWA Scientific and Technical Report no. 9, London, 121pp, 2000.)

394
Environmental Systems Analysis with MATLAB®
7.2.5  Endogenous Metabolism
A further note on endogenous metabolism is necessary. As noted, it includes all the metabolic 
processes that do not result in biomass growth, but nevertheless require energy that the cell pro-
duces through the dissimilative pathway, which we have already examined. These processes may 
include the utilization of previously sequestered substrate, the use of the cell own protoplasm and 
eventually the release of cell material when the cell walls break down (lysis). There are alter-
native schools of thought regarding endogenous metabolism, whose multi-faceted nature is well 
described in van Loosdrecht and Henze (1999), while an interesting assessment of the evolution of 
activated sludge (the ‘wastewater’ version of microbial dynamics) modelling is provided by Gujer 
(2006). The evolution of endogenous metabolism modelling is illustrated in Figure 7.18, recall-
ing the very wise suggestion (van Loosdrecht and Henze, 1999) that a good-fitting model is not 
necessarily correct from a microbiological viewpoint, and that not all the processes mentioned in 
the ASM models are microbiologically correct. Initially, the growth–decay model, Figure 7.18a, 
was used, in which a fixed portion of the biomass b X
⋅
(
) decayed, and this process was considered 
Death–regeneration
(a)
(b)
Growth–decay
XI
Decay
External substrate
b . X
S
Growth
X
fI . b . X 
Mineralized fraction
XS
X
XI
External substrate
(1 − fI ) b . X 
Biodegradable fraction
Regeneration
Death
Hydrolysis
SS
FIGURE 7.18  Two possible approaches to endogenous respiration modelling. The classical growth–decay 
approach (a) has given way to the death–regeneration mechanisms (b), adopted in the ASM models. XS indi-
cates particulate biodegradable material that can be used by the biomass (X) only after conversion into soluble 
substrate (SS) through hydrolysis.
Substrate
Respiration
Biomass
Energy for
the synthesis
Yield factor
Y
Respiration factor
1−Y
s
dX
rX = dt
dSo
ro = dt
dS
rs =
dt
FIGURE 7.17  The substrate utilization rate must balance the synthetic rate rX in the anabolic pathway and 
the oxygen utilization rate ro in the catabolic pathway. So represents the oxygen concentration.

395
Microbial Kinetics Modelling
to be oxygen consuming. Later, the death–regeneration process has been replaced by the ‘death–
regeneration’ hypothesis, Figure 7.18b, in which a fraction fI of the material released during the 
cell decay becomes inert, thus no longer utilizable, f
b X
I ⋅⋅
, while the remaining part 1−
(
)⋅⋅
f
b X
I
 
is recycled as particulate biodegradable substrate X s
(
), which can still be used by the active cell, 
provided it is previously hydrolysed into soluble substrate SS
(
). While in the old scheme, the decay 
was considered as an oxygen-consuming process, in the death–regeneration model no oxygen con-
sumption is involved, or rather it is shifted to the reuse of the recycled material in the regeneration 
phase. Incorporating the death–regeneration model into the basic substrate–biomass basic model 
(7.24) yields the new model
 
Substrate utilization
Biomass
dS
dt
Y
S
K
S X
f
b
X
s
I
= −
+
+
−
(
)⋅
⋅
1
1
µmax
dr
growth
dX
dt
S
K
S X
b
X
s
=
+
−
⋅






µmax
dr
	
(7.27)
where the second term in the substrate equation represents the regeneration term provided by 
the recycle of still biodegradable cell material. For simplicity, the intermediate hydrolysis stage 
X
S
S
S
→
(
) has been omitted, so it is assumed that the released material is already in soluble form. 
Jeppsson (1996) pointed out that, as a consequence of the death–regeneration hypothesis, the decay 
constant bdr in Equations 7.27 is larger than the corresponding parameter in the growth–decay 
model (7.24), their relationship being
 
b
b
Y
fI
dr
gd
=
−
−
(
)
1
1
	
(7.28)
where:
bdr indicates the endogenous constant in the death–regeneration hypothesis
bgd is the corresponding parameter in the traditional growth–decay model
The mineralized part of the substrate cannot be utilized by the biomass. Its asymptotic value can be 
found by setting the substrate derivative in Equations 7.27 to zero to yield
 
dS
dt
Y
S
K
S X
f
b
X
S
K
f
b
Y
f
s
I
s
I
I
= −
+
+
−
(
)
⋅
=
⇒
=
−
(
)
−
−
(
)
1
1
0
1
1
µ
µ
max
dr
dr
max
bdr
	
(7.29)
7.2.6  Other Kinetics of Carbonaceous Substances
The Monod kinetics not only represents the fundamental interaction model between carbonaceous 
substances and the heterotrophic biomass, but has also been extended to other contexts, such as the 
nitrogenous species and the autotrophic biomass, as described in Section 7.3. In special cases, this 
dynamics can be approximated with a first-order kinetics, as in Equation 7.15. This simplification is 
at the basis of the Streeter–Phelps model, already introduced in Section 1.10.5, describing the fate 
of BOD in water-quality models (Rinaldi et al., 1979; Chapra, 1997). In that model, the coupling 
between the two variables, BOD and DO, was made possible by the use of common units (mgO2/L) 
for the carbonaceous substance and for the DO, resulting in a very simple model:
 
BOD
DO
sat
dB
dt
k
B
dS
dt
k
S
S
k
B
b
o
r
o
o
b
= −
⋅
=
−
(
) −
⋅
	
(7.30)

396
Environmental Systems Analysis with MATLAB®
The consumption term −
⋅
k
B
b
 is the same in both equations as a result of the common units of 
mgO2/L. The first term in the DO equation is the re-aeration rate and will be considered next in 
Section 7.2.9.1.
7.2.6.1  Unbalanced Growth
Having considered the simplest form of carbonaceous substance dynamics, let us now turn to the 
other end of the modelling spectrum and explain the observed behaviour of delayed growth. In fact, 
in practice, it may happen that the disappearance of substrate from the medium is not immediately 
matched by a corresponding microbial growth. This is often referred to as unbalanced growth. The 
reason for this behaviour is in the storage of carbonaceous material inside the cell, to be later metab-
olized. The ASM3 model (Henze et al., 2000) introduces a new variable with respect to ASM1 to 
take into account this storing property of microorganisms. This new variable (XSTO) is an intermedi-
ate between the external soluble substrate and the cell material. It represents an internal reserve of 
organic storage polymers, mostly polyhydroxyalkonates (PHA), glycogen and other polysaccharides 
and lipids. This additional variable does not directly correspond to the chemical analysis of those 
molecules, but it was introduced as a component of XH to describe the delayed growth (Gujer et al., 
1999). Figure 7.19 shows the main differences between the ASM1 and ASM3 models regarding the 
heterotrophic biomass. The ASM1 is based on the death-regeneration assumption of Figure 7.18b, so 
that decay does not consume oxygen, and part of the decayed cell material is recycled as particulate 
substrate. Conversely, in the ASM3, endogenous respiration produces only mineralized particulate, 
but is oxygen consuming. In general, the ASM3 tends to decouple the autotrophic and heterotrophic 
metabolisms and reintroduces the concept of oxygen-consuming endogenous respiration. A full 
assessment of the two models and their differences can be found in Gujer et al. (1999) and Gernaey 
et al. (2004).
XS
XH
XI
External
substrate
SS
So
Hydrolysis
Growth
Decay
Decay
(a)
XS
XH
XI
External
substrate
(b)
SS
So
Hydrolysis
Growth
End. resp.
XSTO
Storage
FIGURE 7.19  Main differences between (a) ASM1 and (b) ASM3 models regarding the heterotrophic bio-
mass. The ASM1 adopts the death-regeneration assumption of Figure 7.18b, whereas in ASM3 endogenous 
respiration does not produce any recycled particulate matter, but is oxygen consuming.

397
Microbial Kinetics Modelling
7.2.7  The Matrix Format of Microbial Models
Microbial models describing complex substrate/biomass interactions involve both kinetic processes 
and stoichiometry. A compact notation to describe both of these aspects is the matrix format, used 
in the ASM models (Henze et al., 2000). The matrix consists of as many rows as rate processes ρ j
(
) 
and as many columns as components. The empty elements of the matrix should be interpreted as 
zeros, while the non-zero entries are the stoichiometric coefficients v ji
(
) relating the ith component 
to the jth process. The total reaction rate ri( ) for the ith component is obtained by the weighted sum 
of the rate processes for the related coefficients, that is,
 
r
v
i
ji
j
j
=
⋅
∑
ρ 	
(7.31)
Apart from the ease of assembling the kinetics for each variable, the matrix format allows a quick 
continuity check, provided, as discussed in 7.2.3.1, that consistent units are used for all the variables. 
The sign convention is that the oxygen equivalent of COD subtracted from the variable is negative, 
while that added to the variable is positive. Immediate verification of the continuity of COD, electric 
charge, nitrogen and phosphorus is an additional benefit of the matrix format. The generic continu-
ity equation encompassing all the j processes and the c materials is
 
0 =
⋅
∀
∑v
i
i
ji
ci
j
	
(7.32)
where the coefficient ici represents the fraction of material c in component i. As an example, iN SS
,  
indicates that every gram of COD in the Ss component contains iN SS
,  grams of nitrogen. Figure 7.20 
illustrates the correspondence between the matrix format and the dynamical model equations. For 
each variable (column), the stoichiometric coefficient corresponding to every process in which the 
variable is involved multiplies the pertinent rate (row). The weighted sum of the rates defines the 
dynamical equation for that variable. The solid and dashed paths in Figure 7.20 refer to the S1 vari-
able only. It is left to the reader to verify the second equation.
v21 ρ2
v11 ρ1
dt
dS1
r2 = v12 ρ1 + v22 ρ2
dt
dS2 =
+
= r1 =
Process
r1
r2
Rates
v11
v12
v22
S1
S2
Components
= Σvij ρj
j
ri
v21
Σ
X
X
ρ1
ρ2
FIGURE 7.20  From the matrix format to the dynamical equations, illustrated with a hypothetical example. 
For each variable (column), each stoichiometric coefficient multiplies the pertinent rate (row). The weighted 
sum of the rates defines the dynamical equation for that variable. The solid and dashed paths refer to the S1 
variable only (hatched grey area).

398
Environmental Systems Analysis with MATLAB®
Moving a step further, the matrix format of a simple hydrolysis–growth–decay model is shown 
in Table 7.2, while the flow diagram is sketched in Figure 7.21. In this model, there are four variables 
X
S S
X
s
s
o
H
,
,
,
(
) and three processes ρ ρ ρ
1
2
3
,
,
(
) representing the reaction rates of hydrolysis, growth 
and decay. The dynamical equation for each variable can be obtained by selecting the pertinent 
column, and multiplying the non-zero stoichiometric coefficients for the corresponding process, 
namely
 
dX
dt
K
X
X
f
b X
dS
dt
X X
K
X X
X
s
h
X
H
I
H
H
s
h
X
H
= −
+
+
−
(
)
=
+
µ
µ
X X
X
s
H
s
H
s
H
s
H
/
/
/
/
1
−
+
+
=
+
+
−
1
Y
S
K
S
S
K
S X
dX
dt
S
K
S
S
K
S X
b X
dS
H
s
s
s
o
o
o
H
H
s
s
s
o
o
o
H
H
H
µ
µ
max
max
o
H
H
s
s
s
o
o
o
H
dt
Y
Y
S
K
S
S
K
S X
= −−
+
+
1
µmax
	
(7.33)
XS
XH
External
substrate
SS
So
Hydrolysis
Growth
Decay
1 − fI
1
YH
−
1 − YH
YH
−
FIGURE 7.21  The flow diagram of the simple model expressed in matrix format in Table 7.2, producing the 
set of Equations 7.33. The stoichiometric coefficients are shown next to the pertinent link.
TABLE 7.2
Matrix Format of a Simple Hydrolysis–Growth–Endogenous Metabolism Model
Process
Components
Rates
Xs
Ss
So
XH
Hydrolysis
–1
  1
ρ
µ
1 =
+
h
X
H
K
X
X
X
X
X
s
H
s
H
Growth
−1
YH  
−−
1 Y
Y
H
H
 
  1
ρ
µ
2 =
+
+
max
S
K
S
S
K
S X
s
s
s
o
o
o
H
Endogenous metabolism
1−fI
–1
ρ3 = b X
H
H  

399
Microbial Kinetics Modelling
7.2.8  MATLAB Implementation of the Aerobic Heterotrophic Model
The full microbial metabolic model is obtained by combining the substrate utilization with the 
two microbial pathways, anabolic (growth) and catabolic (oxygen utilization). The complete batch 
model in the growth–decay hypothesis then becomes
 
Substrate utilization
Biomass growth
dS
dt
Y
S
K
S X
s
= −
+
1 µmax
(anabolism)
Oxygen utilization
(catabolism)
max
gd
dX
dt
S
K
S X
b
X
dS
s
=
+
−
⋅
µ
o
s
dt
Y
Y
S
K
S X
b
X
= −−
+
−
⋅









1
µmax
gd
	
(7.34)
while in the death–regeneration case, we have the additional regeneration term in the substrate 
equation and no endogenous respiration term in the oxygen equation
 
Substrate utilization
dS
dt
Y
S
K
S X
f
b
X
s
I
= −
+
+
−
(
)⋅
⋅
1
1
µmax
dr
Biomass growth
(anabolism)
Oxygen utilization
(
max
dr
dX
dt
S
K
S X
b
X
s
=
+
−
⋅
µ
catabolism)
max
dS
dt
Y
Y
S
K
S X
o
s
= −−
+









1
µ
	
(7.35)
The two models were implemented in the Simulink diagram of Figure 7.22, while Figure 7.23 
shows the simulation of a batch in which the same amount of initial biomass and substrate inter-
act until all the available substrate is consumed. While in the growth–decay assumption (a), all 
the substrate is assimilated, in the death–regeneration case (b) a residual inert fraction of the 
substrate remains, according to Equation 7.29. The substrate/biomass evolution is very similar in 
the two cases, with the only exception that in the death–regeneration model the inert fraction of 
the substrate is not metabolized. The oxygen utilization plots are the absolute value of the third 
equation of each model and represent the cumulative consumed oxygen throughout the batch. 
They correspond to the evolution of the BOD measurement obtained with the BOD bottle test of 
Figure 7.14, conventionally lasting five days, and resulting in the cumulative oxygen utilization 
similar to Figure 7.15, though the plateau related to slowly degradable material is now absent. The 
equivalence between the two models requires that the decay coefficients bgd and bdr be related by 
Equation 7.28.
7.2.9  The Oxygen Transfer Rate
Figure 7.24 shows the two basic mechanisms through which oxygen dissolves into the water, either 
through the free liquid surface or from gas bubbles. In both cases, the driving force of diffusion, 
according to Fick’s law, is the concentration gradient, which in this case is represented by the oxygen 
deficit S
S
o
o
sat −
(
). Thus, oxygen tends to penetrate into the liquid phase where it has a concentration 
So
(
), which is lower than the saturated concentration Si
sat
(
) it has in the gaseous phase. The effi-
ciency of the oxygen transfer is determined by the oxygen transfer rate coefficient kr, whose dimen-
sion is the reciprocal of time T −


1 . The oxygen transfer rate (rrear), which is controlled by several 
factors, is given by the product between the deficit and the transfer rate coefficient (Tchobanoglous 

400
Environmental Systems Analysis with MATLAB®
and Schroeder, 1985; Orhon and Artan, 1994; Chapra, 1997; Metcalf & Eddy Inc., 2003; Leslie 
Grady et al., 2011).
 
r
k
S
S
r
o
o
rear
sat
2
mgO /L h
=
−
(
)
(
)	
(7.36)
In Figure 7.24, two differing notations are used for this coefficient, which is usually referred to as kr 
in the case of natural surface re-aeration, while K a
L  is generally used in the wastewater literature to 
indicate forced aeration. The oxygen saturation concentration So
sat is proportional to the gas partial 
pressure PO2 according to Henry’s law of gas solubility,
 
S
K
P
o
h
sat
O
O
2
2
=
⋅
	
(7.37)
where Henry’s constant for oxygen at 20°C is 42 88
1
1
.
mg L
atm
−
−
(
). By comparison, the solu-
bility constant for nitrogen is only 19.012 mg L
atm
−
−
(
)
1
1 , while it is much larger for CO2 
1667.6 mg L
atm
−
−
(
)
1
1 . Because the oxygen percentage in the air is 20.9%, the maximum concen-
tration of oxygen that can be dissolved in the water by air blowing is therefore
Growth–decay
Death–regeneration
(1−fi)*u[1]
Regeneration
b1
Decay1
b
Decay
(1−Y)/Y
Catabolic coefficient 1
(1-Y)/Y
Catabolic coefficient
(a)
(b)
−1/Y
Anabolic coefficient 1
−1/Y
Anabolic coeff.
+
+
+
+
+
−
+
−
DO_dr
To workspace5
X_dr
To workspace4
S_dr
To workspace3
DO_gd
To workspace2
X_gd
To workspace1
S_gd
To workspace
Sum5
Sum3
Sum2
Sum1
Mmax∗u[1]∗u[2]/(u[1] + Ks)
Monod kinetics1
Mmax∗u[1]∗u[2]/(u[1] + Ks)
Monod kinetics
1/s
Int_X2
1/s
Int_X1
1/s
Int_S2
1/s
Int_S1
1/s
Int_DO1
1/s
Int_DO
FIGURE 7.22  Simulink model to simulate the batch Monod kinetics with the two differing endogenous metab-
olism hypotheses: (a) growth–decay; (b) death–regeneration. This Simulink model can be retrieved as Monod _
Batch _ GD _ DR.mdl in the ESA _ Matlab\Exercises\Chapter _ 7\Enzyme _ Kinetics folder.

401
Microbial Kinetics Modelling
Gas phase
Liquid phase
Pliq < Psat
So < So
sat
So = So
sat
Pgas = Psat
KLa
kr
Gas
bubble
Pgas = Psat
FIGURE 7.24  The two main oxygen diffusion mechanisms in the liquid phase. In natural systems, surface 
diffusion is the prevailing mechanism, while in wastewater plants, the air is injected through bottom diffusers. 
The wavy arrows indicate the direction of diffusion.
0
20
40
60
80
100
120
2
4
6
8
10
Time (h)
Concentration (mg  L−1)
Substrate
Biomass
0
20
40
60
80
100
120
0
0
2
4
6
8
10
Time (h)
Oxygen uptake (mg.h  L−1)
0
20
40
60
80
100
120
2
4
6
8
10
Time (h)
Concentration (mg  L−1)
Substrate
Biomass
0
20
40
60
80
100
120
0
0
2
4
6
8
10
Time (h)
Oxygen uptake (mg.h  L−1)
Death–regeneration
(a)
(b)
Growth–decay
FIGURE 7.23  Simulation of the batch Monod model obtained with the Simulink diagram of Figure 7.22. 
In (a), the classic ‘growth–decay’ model implies that all the substrate is metabolized, while in (b), the ‘death–
regeneration’ model results in a residual inert fraction of the substrate. These graphs were obtained with the 
MATLAB script Go _ Monod _ Batch _ GD _ DR.m in the ESA _ Matlab\Exercises\Chapter _ 7\
Enzyme _ Kinetics folder.

402
Environmental Systems Analysis with MATLAB®
 
So
sat
air
8.9619 mg L
=
×
=
−
42 88
0 209
1
.
.
	
(7.38)
whereas if pure oxygen at the atmospheric pressure PO2 =
(
)
1  is used, the saturation concentration 
increases almost fivefold to
 
So
sat
O2
mg L
=
×
=
−
42 88
1 000
42 88
1
.
.
.
	
(7.39)
7.2.9.1  Oxygen Transfer in Natural Waters
In natural waters, diffusion occurs through the water surface, and several authors (Tchobanoglous 
and Schroeder, 1985; Chapra, 1997) have proposed to structure the kr re-aeration coefficient in the 
second equation of the Streeter–Phelps model (7.30) as a function of the stream velocity, river depth 
and the state of the surface, that is,
 
k
u
h
r =
⋅
⋅
−
α
β
γ	
(7.40)
with the coefficients α β γ
, ,
(
) being positive quantities. Equation 7.40 indicates that the re-aeration 
increases with the water velocity and decreases with the river depth. In addition, kr depends on the 
temperature through the Arrhenius law
 
k T
k
r
r
T
( )
(
)
=
⋅
−
(
)
20
20
θ
	
(7.41)
where
T is the temperature (°C),
θ =1 0243
.
 is the Arrhenius constant.
A thorough survey of available re-aeration models and parameters can be found in Chapra (1997), 
who collected the findings of many researchers obtained in differing river morphologies. Regarding 
the influence of temperature and salinity, the following empirical relation holds for natural waters:
 
S
T Sal
T
T
Sal
o
sat
,
.
.
.
.
.
(
) =
−
⋅
+
⋅
−
⋅
+
14 6244
0 367134
0 0044972
0 0966
0
2
00005
0 0002739
2
⋅
⋅
+
⋅
T Sal
Sal
.
	
(7.42)
where
T is the temperature (°C),
Sal (‰) is the salinity.
7.2.9.2  Oxygen Transfer in Wastewater Treatment
In the wastewater literature, the oxygen transfer coefficient is usually indicated as K a
L . It expresses 
the forced oxygen transfer rate obtained by blowing air into the oxidation tank containing a mix of 
water and activated sludge (Metcalf & Eddy Inc., 2003; Rieger et al., 2006), while natural re-aeration 
is considered negligible compared to the aeration needs of the sludge, because the surface is often 
covered with bubbles or foam that hinders the natural atmospheric diffusion. Injecting gas from the 
bottom of the oxidation tank, which is the normal practice in wastewater engineering, requires that the 
pressure generated by the blower at the diffuser depth (Pblw) is greater than the hydraulic head, that is
 
P
P
h
blw
atm
=
+




1
10 44
.
	
(7.43)
where h (m) is the depth of the diffusers, as shown in Figure 7.25. This pressure increase is ben-
eficial for oxygen solubility, which is proportionally increased according to Equation 7.37. As an 
example, if the diffusers are submersed at 4 m below the surface, the oxygen saturation becomes

403
Microbial Kinetics Modelling
 
S
K
P
h
o
h
sat
O
atm
2
mg L
=
⋅
+



=
+



=
1
10 44
42 88 1
4
10 44
20 36
.
.
.
.
−
(
)
1 	
(7.44)
Conventionally, the oxygen saturation level of the entire tank is computed at half the depth of sub-
mergence; thus
 
S
K
P
h
o
h
sat
O
atm
2
=
⋅
+










=
×
+



1
2
10 44
42 88
0 209 1
2
10 44
.
.
.
.
=
(
)
−
10 68
1
.
mg L
	
(7.45)
Thick sludge suspensions, like those encountered in wastewater oxidation tanks, hinder the diffu-
sion of oxygen and the saturation value obtained by Equation 7.44 should be decreased by as much 
as 20%. Other factors determine the actual oxygen transfer efficiency, first of all the bubble diam-
eter. Fine bubbles, with diameter less than 3 mm, have a high efficient surface/volume ratio and are 
generally preferred. The oxygen transfer coefficient K a
L  is a global parameter representing the rate 
of oxygen transfer from the gas phase to the liquid phase, and as such, it is often left unstructured. 
On the other hand, air flow rate is the primary manipulated variable in wastewater process control, 
and it would therefore be desirable to relate K a
L  to the air flow Ua
(
). Experimental data confirm 
that a linear relationship can be established between air flow and K a
L  by separating the natural 
­re-aeration Ko
(
) from the forced oxygen transfer caused by gas flow,
 
K a
K
K
U
L
o
a
a
=
+
⋅
	
(7.46)
Figure 7.26 shows that air flow data correlate well with the observed K a
L  values.
7.2.9.3  Complete DO Dynamics in Microbial Systems
Going back to the microbial metabolism of carbonaceous substrates, we can now complement the 
oxygen utilization equations (7.26) with an oxygen supply term to obtain the full DO dynamics. In 
fact, Equations 7.26 describe only the oxygen depletion due to the uptake by the biomass, while the 
complete DO dynamics is obtained by adding an oxygen supply term to balance the consumption. 
This term was already defined in Equation 7.36, and in the case of wastewater treatment models, the 
transfer rate coefficient can be further structured as in Equation 7.46. Thus, the oxygen supply term 
takes the form K a S
S
L
o
o
sat −
(
)  and the full DO dynamics becomes
Patm = 1
Pblw
h
Blower
Diﬀusers
FIGURE 7.25  A submerged diffuser system powered by a blower is normally used to dissolve air into the 
water–sludge mixed liquor. To produce bubbles, the blower must provide a pressure (Pblw) greater than the one 
created by the hydraulic head (h).

404
Environmental Systems Analysis with MATLAB®
 
Growth decay
Death
sat
max
gd
−
=
−
(
) −−
+
−
⋅
−
dS
dt
K a S
S
Y
Y
S
K
S X
b
X
o
L
o
o
s
1
µ
regeneration
sat
max
dS
dt
K a S
S
Y
Y
S
K
S X
o
L
o
o
s
=
−
(
) −−
+






1
µ
	
(7.47)
depending on which metabolic model is adopted. In the death–regeneration case, it is assumed that 
decay is not an oxygen-consuming process.
7.2.10  A Naïve Wastewater Treatment Plant Model
A very simple, almost naïve, model can now be set up to illustrate the previous interactions between 
the carbonaceous substrate and the heterotrophic biomass. Because a continuous-flow system is 
considered, the batch equations must be complemented with the flow terms to obtain the process 
scheme of Figure 7.27.
The process model can be obtained by complementing the previous batch kinetics, based on the 
death–regeneration case of Equations 7.35, with the flow terms to yield
Secondary settler
Oxidation
Ua
(1 − w) F , S
(1 + r) F , S
F , Si
rF , Xr
S ≈ 0
wF , Xr
Recycle flow
Waste flow
S , X
Xe ≈ 0
V
Vs
FIGURE 7.27  An extremely simplified wastewater treatment plant to demonstrate the previous substrate–
biomass interactions.
0
10
20
30
40
50
60
70
80
90
0
2
4
6
8
10
12
Air ﬂow (Nm3 h−1)
R2 = 0.9256
KLa = 9.4581 + 7.0145 • Ua
KLa (h−1)
Ko  = 9.4581
FIGURE 7.26  Correlation between air flow (Ua) and KLa obtained from a set of experimental data. (Courtesy 
of Nokia OY.)

405
Microbial Kinetics Modelling
 
dS
dt
Y
S
K
S X
q
r S
f
b X
q S
dX
dt
S
K
S X
s
I
i
s
= −
+
−
+
(
)
+
−
(
)
+
⋅
=
+
−
1
1
1
µ
µ
max
dr
max
b X
q
r X
qrX
dS
dt
K
U
S
S
Y
Y
S
K
S X
q
r
o
a
a
o
o
s
dr
sat
max
−
+
(
)
+
=
⋅
−
(
) −−
+
−
+
1
1
1
µ
r S
q
F
V
o
(
)









=
	
(7.48)
where the following assumptions have been made:
•	 The influent flow F carries an organic load with concentration Si, but no biomass Xi ≈
(
)
0  
nor oxygen Soi ≈
(
)
0 .
•	 The recycle biomass (sludge) concentration from the settler underflow is X r, to be defined later.
•	 The substrate concentration in the recycle flow is negligible Sr ≈
(
)
0 .
•	 No solids (sludge) are discharged in the effluent X e ≈
(
)
0 .
•	 The recycle flow is expressed as a fraction r of the process flow F
r F
r =
⋅
(
).
The secondary settler is a very complex plant component, and a widely used model based on the 
hindered flux theory (Takács et al., 1991) was used in the standard benchmark model (Copp, 2002; 
Jeppsson et al., 2007). Simpler models based on the same theory can also be used in reduced-
order models (Marsili-Libelli, 1993). In the present, extremely simplified, model, the settler can be 
assumed to be at steady-state, and with reference to Figure 7.28, the underflow concentration X r
(
) 
can be obtained from the mass balance
 
F
r X
F
w X
F w
r X
e
r
1
1
+
(
)
=
−
(
)
+
+
(
)
	
(7.49)
which, assuming that Xe ≈ 0, yields
 
X
r
w
r X
r =
+
+
1
	
(7.50)
Thus, the recycle concentration X r is a function of the recycle and waste fraction of the process 
flow, and because r <1 and w is usually very small w <
(
)
0 1. , the recycle concentration X r is usually 
greater than X . In fact, the primary function of the secondary settler is to separate the treated water 
from the sludge and to concentrate it in the underflow. Substituting Equation 7.50 into the biomass 
equation in Equations 7.48 yields
 
dX
dt
S
K
S X
b
X
q
r X
rq
r
r
w X
S
K
S X
b
X
q
s
s
=
+
−
⋅
−
+
(
)
+
+
+
=
+
−
⋅
−
µ
µ
max
max
dr
dr
1
1
w
r
r
w X
1+
+
	
(7.51)
(1 − w) F . Xe
(1 + r) F . X
r . F . Xr
Xe ≈ 0
w .F . Xr
Waste ﬂow
Recycle ﬂow
FIGURE 7.28  A steady-state mass balance around the secondary settler.

406
Environmental Systems Analysis with MATLAB®
In this way, the internal variable X r is eliminated, and the model becomes
 
dS
dt
Y
S
K
S X
q
r S
f
b X
qS
dX
dt
S
K
S X
b
s
I
i
s
= −
+
−
+
(
)
+
−
(
)
+
=
+
−
1
1
1
µ
µ
max
dr
max
dr
sat
max
⋅
−
+
+
=
⋅
−
(
) −−
+
−
+
(
)
X
qw
r
r
w X
dS
dt
K
U
S
S
Y
Y
S
K
S X
q
r
o
a
a
o
o
s
1
1
1
µ
So









	
(7.52)
As an exercise, let us now compute the steady state of the model (7.52) by setting the derivatives of 
the first two equations to zero. The steady-state oxygen balance will be computed later, as this does 
not affect the steady state of the first two variables. Solving the steady-state equations
 
0
1
1
1
0
= −
+
−
+
(
)
+
−
(
)
+
=
+
−
⋅
−
Y
S
K
S X
q
r S
f
b X
qS
S
K
S X
b
X
q
s
I
i
s
µ
µ
max
dr
max
dr
w
r
r
w X
1+
+
	
(7.53)
for S and X yields
 
S
K
b
a
b
a
a
qw
r
r
w
X
q
S
r S
Y b
a
s
i
=
+
(
)
−
+
(
)
=
+
+
=
−
+
(
)
+
(
)
dr
max
dr
dr
with
µ
1
1
1
−
−
(
)
1
f
b
I
dr
	
(7.54)
Figure 7.29 shows the steady-state profiles of substrate and biomass as a function of the two control 
variables: the dilution rate q, depending on the process flow, and the waste ratio w, controlling the 
sludge age, or mean cell residence time (MCRT), defined as the total amount of sludge in the system 
X
V
X
V
s
s
ox
ox
⋅
+
⋅
(
) divided by the amount of sludge wasted per day, that is,
 
MCRT =
⋅
+
⋅
⋅
⋅
X V
X
V
w X
F
s
s
r
	
(7.55)
where X s is the sludge concentration in the settler, occupying a Vs volume.
Substituting these values into the DO equation and assuming a desired oxygen level So, the 
steady-state aeration requirement is obtained as
 
U
Y
Y
S
K
S X
b
X
q
r S
K
S
S
a
s
o
a
o
o
=
−
+
+
⋅
+
+
(
)
−
(
)
1
1
µmax
gd
sat
	
(7.56)
Before we actually set up the Simulink model for Equations 7.52, a fourth equation could be added 
to introduce a very simple dynamics of the secondary settler, in addition to the steady-state balance 
of Equation 7.50. Suppose that the settler acts like a buffer with dilution rate q = F/V
s
s, where Vs is 

407
Microbial Kinetics Modelling
the equivalent settler volume, already defined in Equation 7.55. A simple mass balance around this 
component yields
 
dX
dt
q
r X
q r
w X
r
s
s
r
=
+
−
+
(
)
(
)
1
	
(7.57)
which is consistent with the steady-state mass balance equation (7.50). Adding this fourth equa-
tion to the previous model equations (7.52) yields the complete simple wastewater treatment plant 
(WWTP) model, whose Simulink implementation is shown in Figure 7.30.
This model produced the results of Figure 7.31. The simulation horizon is 720 h long, correspond-
ing to 30 days of operation. During this period, the upper figure shows that the input substrate fluctu-
ates with a fairly regular daily cycle, but at hours 221 and 558, a larger input peak occurs, producing a 
brief overload. The biomass increases almost immediately and returns to the normal level after a few 
days, being followed by the underflow biomass with a similar but slower trend X r
(
). The increased 
biological activity induces a larger oxygen utilization, and because the air flow is constant, the DO 
decreases to almost zero. In practice, a low DO level should be avoided because it adversely affects 
the biomass dynamics. The DO dependence of microbial dynamics is accounted for in the complex 
ASM models (Henze et al., 2000), to which the reader is referred for more details on wastewater 
treatment models.
7.2.11  Anaerobic Heterotrophic Metabolism
Let us now look up again at Figure 7.11 and concentrate on the leftmost instance, the case in which 
no external electron acceptor is available. Definitely, this is the most disadvantaged situation for 
the microbial metabolism, as the respiratory chain cannot use any external electron acceptor. 
This results in slow growth and limited assimilation, as shown in Figure 7.6b. The anaerobic 
q (1/h)
(a)
(b)
0.05 0.10 0.15
1.5
2.5
2.5
3
3.5
4.5
5.5
6.5
6
4.5
5
3.5
4
4
3
3
2
2.5
2
0.20 0.25 0.30 0.35 0.40 0.45
0.01
0.02
w
0.03
0.04
0.05
0.06
0.07
0.08
0.09
0.10
q (1/h)
w
0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45
0.01
0.02
0.03
0.04
0.05
0.06
0.07
200
400
400
0.08
0.09
0.10
2
400
600
600
800
1000
1200
1400
800
FIGURE 7.29  Steady-state profiles of substrate (a) and biomass (b) as a function of the dilution rate (q) and 
the waste fraction (w), computed with Equations 7.54.

408
Environmental Systems Analysis with MATLAB®
transformation of carbonaceous substrates is a very complex system of reactions and involves sev-
eral coexisting microbial communities (Rozzi et al., 1985) with specific kinetics (Pavlostatis and 
Giraldo-Gomez, 1991). Figure 7.32 shows a very simplified scheme of reactions globally referred 
to as anaerobic digestion. There are three main groups of microorganisms: the acetoclastic bac-
teria, which transform the various organic molecules into short-chain volatile fatty acids (VFA), 
mostly acetic acid (CH3COOH) but also propionic (CH3CH2COOH), butyric (CH3(CH2)2COOH), 
valeric (CH3(CH2)3COOH) in minor proportions. As indicated in the scheme of Figure 7.32, the 
volatile fatty acids follow differing paths: acetic acid on one side and the heavier VFAs (propi-
onic, butyric, etc.) on the other. While acetic acid is directly metabolized by acetoclastic metha-
nogens producing a gas mixture of methane (CH4) and carbon dioxide (CO2), the heavier VFAs 
are mediated by obligate hydrogen producers, which are inhibited by the hydrogen they produce 
and are dependent on its removal by methanogens, which are in turn inhibited by an excess of 
VFAs.
Several models have been developed to describe the anaerobic digestion process (Rozzi, 1984; 
Marsili-Libelli and Beni, 1996) before the anaerobic digestion model n. 1 (ADM1) was proposed 
(Batstone et al., 2002a, 2002b) and became the definitive reference model for this type of process, 
to be widely used in the applications (Shang et al., 2005; Batstone et al., 2006).
A simplified model (Marsili-Libelli and Beni, 1996) is briefly summarized here. It was developed 
to study the digester behaviour in organic shock load conditions, already analysed in Section 4.5.5 
from the pattern recognition viewpoint. In this context, the goal of the model was the prediction 
of the bicarbonate alkalinity required to counterbalance the pH decrease caused by an increased 
level of VFAs. The model assumes that the substrate is available in dissolved form and is partly 
(1−fp)*bh*u[1]
Regeneration
(r−w)*q
Recycle3
(1+r)*q
Recycle2
(1+r)*q
recycle
r+w
q
Dilution
b
Xr_int
1
s
X_int
S_in
To workspace1
Mono
To workspace
Sum4
Sum3
+−
Sum2
Sum
1/s
S_int
Product
Mu*u[1]*u[2]/(Ks+u[1])
Monod
qs
[t_in, S_in]
From workspace
1
s
DO_int
Ua
Air ﬂow
Csat
DO sat
(1+r)*q
DO recycle
Ka
Aeration
(1−Y)/Y
-1/Y
1+r
+
+
+
−
−
+
−
−
+
+
−
+
−
×
1
s
FIGURE 7.30  Simulink model implementing the WWTP equations (7.52). The Simulink model ASTP _
simple _ DO _ dr.mdl can be retrieved from the ESA _ Matlab\Exercises\Chapter _ 7\WWTP 
folder.

409
Microbial Kinetics Modelling
assimilated by the acetoclastic biomass with ys,a yield factor, and is partly converted into VFAs 
through Yvfa, whereas the remaining fraction yields CO2. Likewise, acetic acid yields both carbon 
dioxide and methane through yco,m and ych, respectively, and only part of it is taken up by methano-
gens through ys,m. The interactions at the basis of the model, together with the related yield factors, 
are sketched in Figure 7.33.
The entire model cannot be described in detail here and the reader is referred to the original 
publication (Marsili-Libelli and Beni, 1996) for a full description. However, two interesting aspects 
of the model are worth considering in the context of microbial kinetics:
•	 A Monod kinetics was used for the substrate conversion into acetic acid, with an addi-
tional multiplying term depending on the input substrate concentration (Sin), as suggested 
by Pavlostatis and Giraldo-Gomez (1991).
•	 The methanogenic bacteria are very pH-sensitive, being inhibited by an excessive amount 
of the un-ionized fraction of the acetic acid, which plays the double role of substrate/inhibi-
tor. Thus, they are modelled with a Haldane kinetics.
The difficulty in controlling an anaerobic digestion process rests primarily in the pH sensitivity 
of methanogenic bacteria. If the digester is overloaded with the organic substrate, the acetogenic 
bacteria produce a large quantity of VFA, which inhibits the methanogens and creates a VFA build-
up. This leads to the acidification of the digester, and eventually to the destruction of the biomass. 
Therefore, pre-emptive remedial strategies have been proposed to correct the pH before an irrevers-
ible damage is created (Rozzi, 1984; Hawkes et al., 1992; Müller et al., 1997). The batch model 
equations of the digester are then
Xr (mg L−1)
0
100
200
300
400
500
600
700
1500
1600
1700
Time (h)
DO (mg L−1)
0
100
200
300
400
500
600
700
800
0
5
10
X (mg L−1)
0
100
200
300
400
500
600
700
700
750
800
850
BOD (mg L−1)
0
100
200
300
400
500
600
700
2
4
6
Si (mg L−1)
0
100
200
300
400
500
600
700
400
600
800
FIGURE 7.31  Simulation result of the simple WWTP model equations (7.52). The dotted lines represent 
the average values. This simulation was obtained with the MATLAB script Go_WWTP_DO_dr.m in the 
ESA _ Matlab\Exercises\Chapter _ 7\WWTP folder.

410
Environmental Systems Analysis with MATLAB®
 
Organic
substrate
dS
dt
y
y
y
S
K
S
s a
a
a
s a
= −
+
+






+
⋅
1
,
,
,
,
vfa
co
max
µ
S
K
S
X
dX
dt
S
K
S
S
K
s a
a
a
a
s a
in
in
max
in
+
⋅
=
+
⋅
+
,
,
,
Acetogenic
bacteria
µ
s a
in
a
d a
a
a
a
s a
s a
S
X
k
X
dV
dt
S
K
S
S
K
S
,
,
,
,
,
⋅
−
⋅
=
+
⋅
+
Acetic
acid
µ
max
in
in
co
ch
max
⋅
−
⋅
−
+
+






+
+
X
k
X
y
y
y
K
HAc
HAc
K
a
d a
a
s m
m
m
s m
i m
,
,
,
,
,
,
1
1
µ
Methanogenic
bacteria
max
dX
dt
K
HAc
HAc
K
k
X
m
m
s m
i m
d m
m
=
+
+
−
⋅
µ
,
,
,
,
1
	
(7.58)
where µa
s a
d a
K
k
,max
,
,
,
,
(
) are the Monod parameters of the acetogenic bacteria, µm
s m
d m
K
k
,max
,
,
,
,
(
) 
those of the methanogenic bacteria, and the various yield factors are illustrated in Figure 7.33. HAc 
is the un-ionized fraction of acetic acid, which can be computed from the chemical equilibrium of 
acetic acid Sa
(
),
Acetic acid
Other VFA’s
Acetate
Acetoclastic
methanogens
Obligate H2-
producing
acetogens
Obligate H2-
utilizing
methanogens
H2 + CO2
CH4 + CO2
(70% of total CH4)
CH4
(30% of total CH4)
Hydrolysis
fermentation
Substrate
FIGURE 7.32  Main pathways and microbial communities in the anaerobic digestion process. (Reproduced 
with permission from Marsili-Libelli, S. and Beni, S., Ecol. Model., 84, 215–232, 1996.)

411
Microbial Kinetics Modelling
 
HAc
S
K
H
a
a
=
+
+
1
	
(7.59)
with dissociation constant Ka. Equations 7.58 must then be complemented with the dynamics of 
­carbon dioxide (CO2) and methane (CH4) gas production and the electrochemical equilibrium 
required to determine the H+ concentration used in Equation 7.59. The full description of the pH 
model can be found in Marsili-Libelli and Beni (1996).
7.3  MICROBIAL METABOLISM OF NITROGENOUS SUBSTRATES
Nitrogen is present in each and every compartment of the environment, given its property to cycle 
globally in various forms. Figure 7.34 provides a sketch of the nitrogen cycle in the environment, 
where it cycles between its organic form (Norg) in living organisms and their litter, and its inorganic 
form, which is either utilized as NH4
+ and NO3
− by the primary producers, or eventually returned to 
the atmosphere as dinitrogen (N2).
The anthropogenic nitrogen cycle (Gijzen and Mulder, 2001) illustrated in Figure 7.35 shows a 
worrying imbalance between the large use of nitrogen-based fertilizer and inefficient food produc-
tion methods.
The consequence of this imbalance is a vast release of unused nitrogen, which contaminates both 
groundwater and surface waterbodies. A further difference between the natural and anthropogenic 
nitrogen cycles is shown in Figure 7.36, where the role of the decomposers has been largely replaced 
by the artificial—and expensive—wastewater treatment processes.
yvfa
yCH4,m
ys,m
ys,a
yCO2,a
yCO2,m
Dissolved
substrate
VFA
(acetic acid)
CH4
CO2
Methanogenic
biomass
Xm
Acidogenic
biomass
Xa
pH and
bicarbonate
alkalinity
computation
Bicarbonate
alkalinity
in the
digester
Bicarbonate
alkalinity
in the feed
FIGURE 7.33  Interactions that form the basis of the simplified model, showing the yield factors controlling 
the conversion from one stage to another. (Reproduced with permission from Marsili-Libelli, S. and Beni, S., 
Ecol. Model., 84, 215–232, 1996.)

412
Environmental Systems Analysis with MATLAB®
Atmospheric
N2
Fertilizers
Urea/NH4
+ − NO3
−
N-removal
NH4
+
NO2
−
NO3
−
Eutrophication
Nitrogen in waste
Norg, NH4
+
Proteins (Norg)
Human
consumption
30%
industrial
N-ﬁxation
10% of applied N
is transformed in
proteins
Only 1% of proteins is 
consumed by humans
Only 5% of
wastewater receives
tertiary treatment
NH4
+
NO3
−
→
→
→
FIGURE 7.35  The anthropogenic nitrogen cycle (Gijzen, 2001; Gijzen and Mulder, 2001) shows worrying 
imbalances between the high amount of fertilized being applied to agricultural soil, and the inefficiency of 
food production. 
NO2
−
Nitrite-N
NH4
+
Ammonium-N
Ammonium
oxidizing 
bacteria
Nitrite
oxidizing
bacteria
N2
Norg
Detritus
Norg
Amino acids and proteins
in plants and animals
N2
in the atmosphere
Decomposition
Ammoniﬁcation
Assimilation
by plants 
Assimilation
by plants
Nitrogen-fixing
bacteria in soil
N2
Nitrogen-fixing
bacteria in
root nodules
Biological nitrification
Denitrifying
bacteria
Denitrifying
bacteria
NO3
−
Nitrite-N
FIGURE 7.34  Nitrogen is present in all the compartments of the environment, given its ability to cycle glob-
ally. Nitrogen in the atmosphere cannot be directly utilized, but specific nitrogen-fixing bacteria in the soil 
convert it to ammonium-N, which is also produced by the decomposition of waste organic-N. The biological 
nitrification chain provides inorganic nitrogen in the forms that the plants can utilize (NH4
+ and NO3
–), while 
the denitrifying bacteria produce dinitrogen (N2) to be released into the atmosphere, thus closing the cycle.

413
Microbial Kinetics Modelling
The forms of nitrogen present in the various environmental compartments are
•	 Dinitrogen (N2) in the atmosphere.
•	 Reduced inorganic nitrogen, such as ammonia and ammonium-N NH , NH
3
4
+
(
), in the 
pedosphere and hydrosphere.
•	 Oxidized inorganic nitrogen, as nitrite and nitrate NO , NO
2
3
−
−
(
), in the pedosphere and 
hydrosphere.
•	 Organic nitrogen (Norg), in the biosphere (food web), pedosphere and hydrosphere.
The main transformations in the nitrogen cycle are
•	 Biological nitrogen fixation by bacteria in the pedosphere and hydrosphere.
•	 Assimilation and biosynthesis in the biosphere.
•	 Decomposition by bacteria and fungi in the pedosphere and hydrosphere.
•	 Hydrolysis of particulate biodegradable organic nitrogen.
•	 Ammonification, converting organic nitrogen into ammonia.
•	 Biological ammonium-N oxidation by autotrophic bacteria in the pedosphere and 
hydrosphere.
•	 Biological denitrification by heterotrophic bacteria in the pedosphere and hydrosphere.
The relations among these processes were already outlined in Figure 7.34 and are now be briefly 
reviewed.
Nitrogen fixation is a process in which dinitrogen is converted into ammonium-N according to 
the enzymatic reaction
 
N
H
NH
nitrogenase
4
2
8
6
2
+
+

→

+
−
+
e
	
(7.60)
This process is performed in both the soil and the water by nitrogen-fixing bacteria. The com-
mon factor in both cases is a specific enzyme (nitrogenase). In the soil, the genus Rhizobium 
performs fixation by forming root nodules in symbiosis with legumes. This can fix from 50 to 
200 kg N ha–1 yr–1. Non-symbiotic bacteria, like Azotobacter and Clostridium, can fix between 5 
and 20 kg N ha–1 yr–1. In the water, blue-green algae (Oscillatoris princeps and Gloeocapsa sp.) 
can fix between 10 and 50 kg N ha–1 yr–1.
Ammonification is part of the biological degradation of organic nitrogen compounds, like pro-
teins, that act as carbon source for heterotrophic bacteria, which uptake some of the nitrogen for their 
growth and release the excess as ammonium-N. The two most important ammonification processes 
N2
Fixation
Assimilation
by plants
Animal
proteins
Reject organic N
Decomposers
N2
Fixation
Assimilation
by plants
Animal
proteins
Reject organic N
Wastewater treatment (nitriﬁcation/denitriﬁcation)
(a)
(b)
FIGURE 7.36  Differing nitrogen cycles: (a) in the natural N cycle the reduction to dinitrogen is minimized 
by the decomposers shortcut. The anthropogenic N cycle (b), instead, goes to great length (and costs) to close 
the loop to dinitrogen.

414
Environmental Systems Analysis with MATLAB®
are deamination, an enzymatic reaction consisting of the removal of an amine group, which is then 
converted to ammonium-N, and the hydrolysis of urea, catalysed by a specific enzyme (urease),
 
NH
CO + H O
CO + 2NH + energy
2 2
2
urease
2
3
(
)

→

	
(7.61)
Both processes are energy producing, and the bacteria use this energy for their growth.
Nitrification is the biological process in which specialized autotrophic bacteria oxidize the 
ammonium-N, first into nitrite by ammonium oxidizers, and then into nitrate, by nitrite oxidizers, 
in the presence of oxygen. The biological oxidation of ammonium-N is also an energy-producing 
process, which provides the autotrophs with the energy required to assimilate CO2, their carbon 
source. The nitrification consists of the following two steps:
 
NH + 3
2 O
NO + 2H + H O + energy
NO
4
+
2
ammonium-N
oxidizers
2
+
2

→

−
2
2
nitrite
oxidizers
3
+ 1
2 O
NO + energy
−
−

→

	
(7.62)
The first nitrification step lowers the pH, because for each NH4
+ oxidized two H+ are generated. Hence, 
to maintain a constant pH, two moles of bicarbonate should be added for each mole of oxidized 
­ammonium-N. However, because nitrification requires oxygen, and an air flow is usually present, at least 
in artificial nitrification, the CO2 stripping due to the air flow may partly offset the acidifying effect of 
nitrification. The amount of oxygen required for the complete nitrification of one mole of ammonium-N 
can be computed by inspection of the stoichiometry of Equations 7.62. Because 4 g of oxygen is required 
to oxidize 1 g of ammonium-N, the amount of oxygen required in the two nitrification steps is
 
First step
1.5O
1N =1.5 32
14
=3.43 gO
g N
Second step
0.5O
1N
= 0.5
2
2
2
×
×32
14
=1.14 gO
g N
2 	
(7.63)
The combined oxygen requirement for the oxidation of 1 g of ammonium-N is thus 3 43 1 14
4 57
.
.
.
+
=
 
g of oxygen. We shall see later that the actual amount of consumed oxygen is less than the stoichio-
metric equivalent of Equations 7.63, because part of the nitrogen is assimilated by the autotrophs, 
rather than oxidized.
Denitrification is the reduction of the oxidized forms of nitrogen NO and NO
2
3
−
−
(
) to dinitrogen 
(N2) by means of heterotrophic facultative bacteria, facultative meaning that they can use nitrite/
nitrate as alternate electron acceptors when oxygen is not available. Being heterotrophs, they require 
organic carbon both as a carbon source and an electron donor. The reduction chain is
 
NO
NO
NO
N O
N
3
2
2
2
−→
→
→
→
−
	
(7.64)
and the stoichiometry of denitrification from nitrate or nitrite is
 
1
5 NO
6
5 H
N
3
5 H O
energy
from
2
org
3
2
1
10
−
+
−
+
+

→

+
+
e
C
X H
	
(7.65)
 
1
3 NO
4
3 H
1
6 N
2
3 H O
energy
from
2
org
2
2
−
+
−
+
+

→

+
+
e
C
X H
	
(7.66)
Recall the definition of the yield coefficient, where YD is the substrate fraction utilized in the denitri-
fication anabolic pathway and 1−
(
)
YD  is the remaining part utilized in the catabolic pathway. From 
Equation 7.65, for one-fifth of nitrogen reduced one mole of electron is required, whereas in the case 

415
Microbial Kinetics Modelling
of nitrite, from Equation 7.66, for one-third of nitrogen reduced one mole of electron is required. 
Because one mole of electron is equivalent to 8 g of oxygen (Orhon and Artan, 1994), the removal 
of 1 g of COD will provide the reduction of
 
1
14
5
1
8
1
2.857
NO
N
g COD
3
reduced
removed
−
(
)
=
−
−
(
)
(
)
−
Y
Y
g
D
D
	
(7.67)
grams of nitrate-N. Likewise, in the reduction of nitrite, one-third of nitrogen is required, so that the 
corresponding grams of nitrite reduced for each gram of COD is
 
1
14
3
1
8
1
1 714
−
(
)
=
−
−
(
)
(
)
−
Y
Y
g
g
D
D
.
NO
N
COD
2
reduced
removed
	
(7.68)
It should be recalled that even though the heterotrophic bacteria performing denitrification are the 
same that degrade COD by oxidation, if oxygen is available, the yield coefficients may be different 
in the two cases, thus Y ≠ YD. As a consequence of denitrification, the total amount of carbonaceous 
substrate (
)
SS  removed by anoxic respiration on either nitrite or nitrate is, including also the oxygen 
uptake for aerobic respiration,
 
S
Y
Y S
Y S
s
D
D
o
=
−
+ −
+ −
2.857
1
S
1.714
1
1
1
NO
NO
3
2
	
(7.69)
where the last term represents the amount of substrate removed by aerobic respiration if DO is 
­available, for which the yield coefficient is Y. When oxygen is not available, the facultative micro-
organisms switch to anoxic respiration and metabolize the organic substrate in the proportions 
indicated by the first two terms.
Though the natural nitrification/denitrification chain normally includes all of the steps just exam-
ined, in man-made nitrogen removal processes, it is sometime profitable to limit the extent of the 
reaction to nitrite, avoiding the extension to nitrate (Giusti et al., 2011c). The so-called nitrite shortcut 
reaction scheme is illustrated in Figure 7.37, which shows the possible savings in oxygen and organic 
carbon:
 
NH oxidation to NO
NH
2O
NO
H O
2H
NH oxidation to NO
4
+
3
2
−
+
−
+
+
+
→
+
+
4
2
3
4
2
−
+
−
+
−
+
→
+
+
⇒
%
NH
1.5O
NO
H O
2H
25
 O saving
NO denitrification
6
2
2
4
2
2
3
NO
5CH OH
CO
3N
6HCO
7H O
NO denitrification
6 NO
3
2
2
3
2
3
2
2
2
−
−
−
−
+
+
→
+
+
+ CH OH
3CO
3N
6HCO
3H O
40
 C
saving
2
2
2
org
+
→
+
+
⇒
%
−
2
3
	
(7.70)
The nitrite shortcut
N2
COD (e−)
COD (e−)
O2
Nitrification
Denitrification
O2
O2
−25%
−40% COD
NO3
−
NO3
−
NH4
+
NO2
−
NO2
−
FIGURE 7.37  The nitrite shortcut (blue area) results in a considerable saving in oxygen and organic carbon. 
(Reproduced with permission from Giusti, E. et al., Environ. Modell. Softw., 26, 938–949, 2011c.)

416
Environmental Systems Analysis with MATLAB®
7.3.1  Nitrification Modelling
As we have seen, the biological nitrification process includes two successive oxidations performed 
by specialized autotrophic bacteria. A simplified one-step kinetics is often sufficient to describe the 
nitrification process in natural environments, whereas more complex two-step models are required 
when a detailed description of the nitrification process is needed (Orhon and Artan, 1994; Leslie 
Grady et al., 2011). Even in the context of complex models, the ASM family (Henze et al., 2000) 
considers nitrification as a single-step reaction, thus neglecting the intermediate nitrite-N. On the 
other hand, in many environmental studies and in the wastewater engineering practice, monitoring 
this intermediate component is mandatory, because of its adverse effects on many living organisms, 
and for human health in particular. Further, as pointed out in Equations 7.70, nitrite can become the 
pivotal component in specialized nitritation processes, based on the nitrite shortcut of Figure 7.37, 
with obvious savings in oxygen and organic carbon. Specialized nitrogen removal processes, such 
as SHARON, which is an acronym for Single reactor High activity Ammonia Removal Over Nitrite 
(Hellinga et al., 1998, 1999; Mulder et al., 2001), or the sequencing batch reactors (SBRs) treating 
special waste (Spagni et al., 2008; Spagni and Marsili-Libelli, 2009) are technological implementa-
tions of the nitrite shortcut, to name but a few. Several models of increasing complexity will now 
be presented that can be used in differing contexts, from simplified river water-quality models, to 
detailed wastewater process models.
7.3.1.1  Simplified Nitrification Modelling in Natural Waters
In the QUAL2E (Brown and Barnwell, 1987) and in QUAL2K (Chapra and Pelletier, 2003; 
Pelletier et  al., 2006) water-quality models, nitrification is described by the single-step reaction 
NH
2O
NO
H O
2H
4
2
2
++
++
++
++
++
→
−
3
 with an oxygen-limited first-order kinetics. A simple ­ammonium-N 
dynamics thus takes the form
 
dS
dt
k
S
S
K
S
k
T
S
S
K
S
X
hn
o
o
o
n
v
NH
N
in
NH
NH
NH
veg
4
org
4
4
4
=
⋅
−
+
⋅
( )⋅
−
+
δ
	
(7.71)
where the first term represents the organic nitrogen ammonification, the second describes the oxida-
tion into nitrate and the last term accounts for the ammonium-N uptake by the submerged vegetation 
(Xveg) with a preference factor δ( ) of NH4 over NO3 (Di Toro et al., 1975; Brown and Barnwell, 1987; 
Asaeda and Van Bon, 1997; Asaeda et al., 2000, 2001). This term can be modelled as
 
δ =
+
S
S
S
NH
NO
NH
4
3
4
	
(7.72)
According to Equation 7.72, the preferred form of nitrogen utilized by the submerged vegetation 
is ammonium-N, because its assimilation requires less energy than that of nitrate-N (Britto and 
Kronzucker, 2001), but when its concentration falls below that of the nitrate-N SNO3
(
), the primary 
producers switch to this alternate form of inorganic nitrogen, as plotted in Figure 7.38 for a nitrate 
concentration of 5 mg N L–1.
The nitrate-N produced by Equation 7.71 is then consumed by denitrification and plant uptake:
 
dS
dx
S
K
S
k
T
S
S
K
S
X
k
S
o
o
o
n
v
dn
NO3
4
3
3
3
NH
NO
NO
veg
NO
=
+
⋅
( )⋅
−
−
(
)⋅
+
−
⋅
1
δ
	
(7.73)
In Equation 7.73, the first term is the counterpart of the second term of Equation 7.71 describing the 
oxidation of ammonium-N to nitrate. The second term accounts for the utilization of nitrate by the 
vegetation, with a preferential factor 1−
(
)
δ , and the third term is the denitrification rate.
An example of natural nitrification in rivers can be observed in Figure 7.39. In October 1989, 
there was a considerable ammonium-N spillage in the Arno River, caused by dredging of the dams 
upstream of the city of Florence. This massive upheaval of the sediments brought a considerable 

417
Microbial Kinetics Modelling
amount of detritus to the surface, with subsequent resuspension of reduced material containing 
vast quantities of ammonium-N, which flowed downstream. This caused an alarm at the water 
potabilization plant of the city of Florence, located just 30 km downstream from the dredged area, 
and the nitrogen in the river was closely monitored for the next few days after the beginning of the 
event. Figure 7.39 shows the nitrification process observed just upstream of the abstraction point 
of the potabilization plant, with the ammonium-N being gradually oxidized to nitrite, and then to 
nitrate-N. It is left as an exercise for the reader to digitize the data and approximate them with a 
first-order nitrification model.
0
50
100
150
200
250
22
20
18
16
14
12
10
4
3
2
1
0
NO2 concentration (mg − N L−1)
NO3 , NH4 concentration (mg − N L−1)
NO3
−
Time (h)
NH4
+
NO2
−
FIGURE 7.39  An ammonia spillage event in the River Arno. The recording started at 8:00 am on 7 October 
1989. The plots show the natural ammonium oxidation to nitrite and nitrate.
0
5
10
15
0
0.2
0.4
0.6
0.8
1
NH4 concentration (mg − N L−1)
NH4 preference factor
SNO3 = 5 (mg − N  L−1)
NH4 pref.
NO3 pref.
FIGURE 7.38  Ammonium-N preference factor described by Equation 7.72. When the concentration of 
ammonium-N falls below the nitrate half-saturation, in this case 5 mg N L–1, the uptake is shifted to this form 
of inorganic N. This graph was obtained with the MATLAB script Ammonia_Pref.m in the ESA_Matlab\
Exercises\Chapter _ 7 folder.

418
Environmental Systems Analysis with MATLAB®
7.3.1.2  Detailed Two-Step Nitrification Modelling
The single-step and first-order kinetic are simplifying assumptions in modelling the nitrogen 
cycle in natural waters, given an inability to obtain detailed information about the autotrophic 
populations. However, in wastewater processes, a two-step description of the nitrification process 
is possible, because the autotrophs are abundant enough to be reliably measured, and advisable, 
because nitrites are a source of concern and there are specialized processes that are focussed on 
this nitrogen form. As already mentioned SHARON is one of them, being based on the advantage 
of ammonium oxidizers over nitrite oxidizers depending on the differing temperature response of 
the two genera (Hellinga et al., 1998). SHARON is often coupled with the ANAMMOX process 
(Van Dongen et al., 2001), whose name is an acronym for anoxic ammonium oxidation. Other 
examples of two-step nitrification models have been proposed (Nowak et al., 1995; Ossenbruggen 
et al., 1996; Hellinga et al., 1999).
A basic two-step nitrification model includes two autotrophic microbial populations: the ammo-
nium oxidizers (Xaob) and the nitrite oxidizers (Xnob), whose growth rates can be structured as Monod 
kinetics with two limiting substrates: DO and the pertinent nitrogen species, NH4
+ in the first step, 
and NO2
− in the second step. In this model, the nitrogen assimilation by the autotrophic biomass is 
represented by the yield factors Yaob and Ynob.
 
First step NH
NO
4
2
NH
aob
max
aob
NH
4
4
+
−
→
= −
⋅(
)⋅
+
⋅
dS
dt
Y
pH
S
K
S
S
o
o
o
1 µ
α
K
S
X
dX
dt
pH
S
K
S
S
K
S
X
o
o
o
NH
NH
aob
A1
max
aob
NH
NH
NH
a
4
4
4
4
4
+
=
⋅(
)⋅
+
⋅
+
µ
α
ob
aob
aob
−
⋅
b
X
	
(7.74)
 
Second step NO
NO
NO
nob
max
nob
NO
2
2
3
1
−
−
→
= −
⋅(
)⋅
+
⋅
dS
dt
Y
pH
S
K
S
S
o
o
o
µ
α
2
2
NO
NO
NH
NH
NH
nob
A2
max
nob
K
S
K
K
S
X
dX
dt
pH
S
K
S
S
i
i
o
o
o
2 +
⋅
+
=
⋅(
)⋅
+
⋅
µ
α
NO
NO
NO
NH
NH
NH
nob
nob
nob
2
2
K
S
K
K
S
X
b
X
i
i
2 +
⋅
+
−
⋅
	
(7.75)
In the first step, described by Equation 7.74, the kinetics is controlled by two limiting substrates: 
DO So
(
) and ammonium-N SNH4
(
), with half-velocity constants Ko and KNH4, while the second step 
described by Equation 7.75 is more complex because, in addition to the two limiting substrates, 
ammonium-N acts as an inhibitor with constant K
i
NH . The nitrate-N production rate is the opposite 
of the nitrite-N decay; thus dS
dt
dS
dt
NO
NO
3
2
= −
.
The oxygen requirements for nitrification follow the stoichiometry already computed in 
Equations 7.63, and thus the rate of oxygen consumption for nitrification is
 
dS
dt
Y
Y
dS
dt
Y
Y
dS
dt
o = −
−
⋅
−
−
⋅
3 43
1 14
.
.
aob
aob
NH
nob
nob
NO
4
2 	
(7.76)
assuming that the oxygen consumption due to autotrophic decay is negligible. The nitrification 
kinetics is very sensitive to both pH and temperature and can be inhibited by an excess of nitrite, 
which lowers the pH, or by an excess of ammonium-N, which increases the pH, in addition to the 

419
Microbial Kinetics Modelling
inhibiting effect already accounted for in Equations 7.75. The rate reduction factor α pH
(
) multi­
plying the maximum growth rates in Equations 7.74 and 7.75 can be expressed as a function of the 
two limits pK
pK
1
2
,
(
) shown in Figure 7.40,
 
α pH
pK
pH
pH
pK
(
) =
+
+
−
−
1
1 10
10
1
2 	
(7.77)
The temperature influences both maximum growth rates as follows:
 
µ
µ
T
e
T
( ) = (
)⋅
−
(
)
15
0 059
15
.
	
(7.78)
Table 7.3 shows the broad range of values for the parameters in the two-step nitrification model 
(7.74)–(7.75).
It is interesting at this point to establish a link between heterotrophic and autotrophic metabo-
lisms, as shown in Figure 7.41.
Here, the autotrophic metabolism (blue box) and the heterotrophic metabolism (grey boxes) are 
linked together by the nitrogen transformations. Both nitrification and Corg assimilation require 
­oxygen and release CO2, which is metabolized by the autotrophs. Instead, the facultative hetero-
trophs performing denitrification require Corg for the reduction of oxidized nitrogen.
7.3.1.3  More Advanced Nitrification Models
A more specialized two-step nitrification and denitrification model, derived from the ASM3 kinet-
ics, is the ASM3_2N model summarized here and fully described elsewhere (Iacopozzi et al., 2007). 
Here, the ammonium oxidizers and the nitrite oxidizers have separate growth kinetics:
5
6
7
8
9
10
pH
NO2
− inhibition
NH4
+ inhibition
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
α (pH)
pK1
pK2
FIGURE 7.40  Sensitivity of nitrification to pH, whose optimal value is around 7.5. The factor α indicates the 
maximum growth rate reduction of both autotrophic groups at low pH, the inhibiting agent is the nitrite, while 
at high pH the ammonium-N acts as an inhibitor. Ammonium-N inhibition is also explicitly accounted for in 
the second nitrification step of Equations 7.74.

420
Environmental Systems Analysis with MATLAB®
 
r
S
K
S
S
K
S
S
K
S
X
r
o
o
o
A
A
aob
aob
NH
NH
NH
ALK
ALK
ALK
aob
4
4
4
=
⋅
+
⋅
+
⋅
+
⋅
µmax
,
,
nob
nob
NH
NH
NH
ALK
ALK
ALK
NO
4
4
4
=
⋅
+
⋅
+
⋅
+
⋅
µmax
,
,
,
S
K
S
K
K
S
S
K
S
S
o
o
o
I
I
A
2
2
2
NO
NO
nob
K
S
X
+
⋅
	
(7.79)
which are similar to the previous model (7.74)–(7.75), with the introduction of alkalinity as a 
further limiting factor. As in the previous model, the second step is inhibited by the presence of 
­ammonium-N. In addition to these growth rates, the model also considers the endogenous respira-
tion, both aerobic and anoxic:
Denitriﬁcation
Nitriﬁcation
Corg
O2
CO2
XH
XI
NH4
+
XH
XA
XA
Energy
Energy
NO2
−
NO3
−
O2
N2O
N2
Corg assimilation
Corg pathway
CO2 pathway
Ya1
Ya2
YD
Y
FIGURE 7.41  The autotrophic metabolism (blue box) and the heterotrophic metabolism (grey boxes) are 
linked together by the nitrogen transformations. Both nitrification and Corg assimilation require oxygen and 
release CO2, which is metabolized by the autotrophs. The facultative heterotrophs performing denitrifica-
tion require Corg for the reduction of oxidized nitrogen. For each anabolic transformation, the yield factor is 
indicated.
TABLE 7.3
Possible Range of Values of the Parameters in the 
Two-Step Nitrification Model Equations (7.74 and 7.75)
Parameter
Range of Values
Units
µmax
aob
0.46–2.2
d−1
µmax
nob
 
0.28–1.45
d−1
Yaob
0.03–0.16
–
Ynob
0.02–0.08
–
Ko
0.5–1.3
mg O2 L−1
KNH4
0.06–5.6
mg N L−1
KNO2
0.06–8.4
mg N L−1
K
i
NH
1.00–2.1
mg N L−1
baob
0.05–0.15
d−1
bnob
0.01–0.02
d−1

421
Microbial Kinetics Modelling
 
Aerobic end. resp. of 
A
aob
end,aob
aob,O
aob
2
X
r
b
K
K
S
X
o
o
o
Ox
=
⋅
+
⋅
erobic end. resp. of 
A
nob
end,nob
nob,O
nob
2
X
r
b
K
K
S
X
o
o
o
Ox
=
⋅
+
⋅
noxic end. resp. of 
aob
end,aob
Anox
aob,NO
NO
2
X
r
b
K
K
S
S
o
o
o
=
⋅
+
⋅
2
2
2
NO
NO
aob
nob
end,nob
Anox
nob
Anoxic end. resp. of 
K
S
X
X
r
b
+
⋅
=
,NO
NO
NO
NO
aob
3
3
3
3
⋅
+
⋅
+
⋅
K
K
S
S
K
S
X
o
o
o
	
(7.80)
The stoichiometry of these kinetics have been recomputed with respect to the ASM3 model, as fully 
described in Iacopozzi et al. (2007) and further extended to accommodate the nitritation process of 
Figure 7.37 (Giusti et al., 2011c).
7.3.2  Denitrification Modelling
Denitrification is the inverse process, whereby oxidized forms of nitrogen NO and NO
2
3
−
−
(
) are 
enzymatically reduced to dinitrogen (N2) through a complex chain of biochemical reactions per-
formed by heterotrophic facultative bacteria. In the simplest form, which is frequently used in 
water-quality models, denitrification can be described by a first-order kinetics, as in Equation 7.73. 
More detailed descriptions, used in wastewater treatment, consider that the facultative heterotro-
phic biomass X H
(
) can reduce either nitrite or nitrate by anoxic respiration with double limitation 
Monod kinetics involving organic carbon Ss
(
) and each oxidized nitrogen species, with DO acting 
as an external inhibitor, because the presence of oxygen adversely affects this process:
 
r
K
K
S
S
K
S
S
K
S
r
K
dn
H
dn
o
o
o
s
s
s
dn
H
dn
,
,
NO
NO
NO
NO
NO
2
2
2
2
3
=
⋅
+
⋅
+
⋅
+
=
⋅
µ
η
µ
η
o
o
o
s
s
s
K
S
S
K
S
S
K
S
+
⋅
+
⋅
+
NO
NO
NO
3
3
3
	
(7.81)
The factor η ≈0 8.  reduces the maximum growth rate µH with respect to aerobic growth as a con-
sequence of the smaller biochemical energy (ATP) produced by anoxic respiration. The organic 
substrate consumption is given by the first two terms of Equation 7.69, so that the nitrate and nitrite 
consumption rates and the heterotrophic growth due to denitrification are
 
dS
dt
Y
Y
r
X
dS
dt
Y
Y
r
D
D
dn
H
D
D
dn
NO
NO
NO
NO
2
2
3
3
= −
−
×
= −
−
×
1
1 713
1
2 857
.
.
,
,
X
dX
dt
r
r
X
b
X
H
H
dn
dn
dn
H
H
H
=
+
(
)
−
⋅
,
,
NO
NO
2
3
	
(7.82)
where the yield factors for denitrification are given by Equations 7.67 and 7.68. In the already men-
tioned ASM3_2N model, the anoxic growth on nitrite and nitrate (denitrification) is based on the 
stored particulate material (XSTO), while additional limiting factors are ammonium-N and alkalinity:
 
r
K
K
S
S
K
S
S
K
S
X
X
K
dn
H
dn
o
o
o
H
,NO
NO
NO
NO
NH
NH
NH
STO
2
2
2
2
4
4
4
/
=
⋅
+
⋅
+
⋅
+
⋅
µ
η
STO
STO
NO
NO
NO
NO
NH
/
3
3
3
3
+(
)
⋅
=
⋅
+
⋅
+
⋅
X
X
X
r
K
K
S
S
K
S
S
K
H
H
dn
H
dn
o
o
o
,
µ
η
4
NH
NH
STO
STO
STO
4
4
/
/
+
⋅
+(
)
⋅
S
X
X
K
X
X
X
H
H
H
	
(7.83)

422
Environmental Systems Analysis with MATLAB®
These kinetics were further modified to consider the nitrogen removal through the nitrite shortcut 
illustrated in Equations 7.70 and in Figure 7.37, as described in Giusti et al. (2011c).
A last remark on denitrification regards the importance of hydrolysis. It can be seen from 
Equations 7.69 that denitrification requires considerable quantities of soluble organic substrate 
Corg due to an inability to use particulate substrate directly. If soluble substrate is depleted, then 
hydrolysis may become the bottleneck of the entire process, limiting the availability of Corg. 
The kinetics involved in anoxic hydrolysis is the same as in the aerobic counterpart, save for a 
correction of ηanox
0.4
≈
 for the maximum rate kh, which accounts for the lower reaction speed 
in anoxic conditions. Thus, the anoxic hydrolysis rate producing soluble organic substrate can 
be written as
 
dX
dt
k
X
X
K
X
X
X
s
h
s
H
X
s
H
H
= −
⋅
+
ηanox
	
(7.84)
7.3.3  MATLAB/Simulink Implementation of ASM3_2N
The already cited ASM3_2N model (Iacopozzi et al., 2007) was implemented in the MATLAB/
Simulink platform following the Benchmark guidelines (Copp, 2002). This initiative, supported by 
the European Union under (Cooperation in Science and Technology) COST 682 and 624 actions, 
defined a simulation protocol for wastewater treatment processes and control strategies (Gernaey 
et al., 2004; Vrecko et al., 2006; Jeppsson et al., 2007; Nopens et al., 2009). The full Benchmark 
protocol is available at the web URL http://apps.ensic.inpl-nancy.fr/benchmarkWWTP/, while the 
MATLAB script implementing the ASM3_2N model is available in the companion software, in the 
ESA _ Matlab\Exercises\Chapter _ 7\ASM3 _ 2N folder.
7.3.3.1  Creating and Using MEX Files
The software organization of ASM3_2N is shown in Figure 7.42. Given the complexity of the model 
structure, including structured kinetics and stoichiometric matrix, it was decided to implement 
the most computationally intensive parts as MEX files, where the acronym stands for MATLAB 
Executable. MEX modules are dynamically linked subroutines, which may be written in C, C++ 
or Fortran, that can be invoked from within the MATLAB environment and executed as if they 
were built-in functions. They use both MATLAB runtime libraries, language-specific libraries or 
specialized runtime libraries, hence the dynamic linking. To integrate non-MATLAB code in the 
MATLAB or Simulink framework, the external language source code, for example, a C code, is 
required, and a compatible compiler must be installed; then it is possible to build the MEX file sim-
ply by typing mex filename.c in the command window, and the corresponding filename.
mexw64 will be created. In this case, the extension means that the file will be compatible with a 
Windows 64 bit operating system. This arrangement preserved the advantages of both platforms 
(MATLAB and C), making the superior execution speed of an executable code available in the 
Simulink block diagram.
The implementation of the full ASM3_2N model is based on four custom S-function MEX 
blocks shown in Figure 7.43, which are now briefly described. The input/output dimensions of the 
blocks are consistent with the six soluble and eight particulate wastewater components in the ASM3 
model, as depicted in Figure 7.16.
7.3.3.1.1  CSTR
This block implements the set of reactions in either the anoxic or aerobic tank, depending on the 
presence/absence of the air flow. Its inputs are the soluble and particulate components, together with 
water and air flows, while its outputs are the same quantities at the next timestep.

423
Microbial Kinetics Modelling
7.3.3.1.2  Settler
This block implements the Takásc settler model (Takács et al., 1991) using 10 horizontal layers, with 
the feed placed at the height of the sixth layer. This model is the one normally adopted in all of the 
benchmark studies (Copp, 2002).
7.3.3.1.3  Mixer
This utility block combines two mixing flows, diluting matching input components of each input to 
generate the output, consistent with the ASM3 wastewater composition of Figure 7.16.
7.3.3.1.4  Splitter
This utility block generates the COD partition required by the ASM3 model from unstructured 
COD data, according to Figure 7.16, whereas the other inputs (ammonia, alkalinity and flow) are 
simply fed through.
The ASM3_2N Simulink model is shown in Figure 7.44. It is a simplified version of the 
Benchmark configuration, with only one anoxic and one aerated biological reactors, followed by 
the secondary Takásc settler model. The input is processed by the splitter to produce the required 
COD partition, then two mixers merge the internal and external flows with the input flow, and then 
the following blocks implement the anoxic and aerated reaction tanks. The two blocks in the return 
paths introduce a transport delay required to avoid algebraic loops and to add realism by taking into 
account the actual flow delays introduced by the recycle flow routing. The simulation is launched 
by the MATLAB script Go _ Plant3 _ 2step _ 2V.m, which loads the initial conditions, plant 
MATLAB launch file
Go_ASM3_2N_2V.m
Simulink model
*.mexw64
Graph
Dry
weather
Benchmark
input
ﬁles
Storm
weather
Rain
weather
Simulation
parameters
User editable
model and simulation
parameter ﬁles
Stoichiometric
matrix
Settler
parameters
Plant
parameters
Initial
conditions
FIGURE 7.42  Software organization of ASM3_2N operating in the Benchmark protocol. The MATLAB 
launch file Go _ ASM3 _ 2N _ 2V.m supervises the entire simulation: after loading the pertinent input file 
and the specified model parameters, it invokes the Simulink module, which performs the simulation using 
the precompiled *.mexw64 routines as model blocks. The Graph module performs the graphical post-pro-
cessing. The relevant launch script, Simulink model and other routines can be retrieved from the ESA _
Matlab\Exercises\Chapter _ 7\ASM3 _ 2N folder. (Reproduced with permission from Iacopozzi, I. 
et al., Environ. Modell. Softw., 22, 847–861, 2007.)

424
Environmental Systems Analysis with MATLAB®
configuration, stoichiometric matrix and then launches the Simulink model plant3 _ 2step _
base _ 2v.mdl shown in Figure 7.44 with the Benchmark input data for the dry weather condi-
tion, shown in Figure 7.45.
Some of the corresponding outputs are shown in Figure 7.46, while the cumulative output statis-
tics for the nitrogen species in the output flow are shown in Figure 7.47.
They were computed with the methods used in Chapter 3 (see e.g. Figures 3.7, 3.8 and 3.15) to 
obtain a cumulative distribution of an experimental time series.
7.4  MICROBIAL METABOLISM OF PHOSPHORUS
The natural phosphorus cycle is characterized by a vast storage compartment, releasing phosphorus 
on a geological time scale through atmospheric erosion and slow dissolution of mineral phosphorus 
(e.g. apatite). In the water cycle, the phosphorus cycle of interest is much faster. It is also simpler 
than the nitrogen cycle because there is no gaseous form of phosphorus, which can basically exist in 
two forms: organic P and inorganic P, as orthophosphate PO4
3−
(
). The other difference with nitrogen 
is the lack of a phosphorus equivalent of nitrification, because P can only be absorbed and released 
by the vegetation and stored in the sediment. 
A simplified P cycle in the aquatic environment is shown in Figure 7.48, where the particulate 
organic phosphorus (POP) pool is fed by several inputs (Pinput) from various kinds of waste or detri-
tus. It is then hydrolysed into dissolved organic phosphorus (DOP) and converted back into inor-
ganic phosphorus PO4
3−
(
) through regeneration. In this form, it is stored in the aquatic vegetation 
(PV) and partly utilized for growth. Part of POP settles as detritus in the upper sediment layers, and 
its subsequent resuspension and dissolution depend on the oxido-reduction state of the sediment, 
while the part that buries deep into the sediment is transformed back into inorganic by diagenesis. 
Mixer
Fout
1
6
8
S
X
Outputs
1
6
8
1
6
8
F1
S1
X1
F2
S2
X2
Inputs
6
8
Inputs
Splitter
SALK
SNH4
COD
Fin
1
Outputs
Fout
S
X
1
1
1
1
CSTR
8
Sout
6
Xout
Outputs
1
Fin
8
Sin
6
Xin
1
Uair
Inputs
1
Fout
F
Settler
8
Se
6
Xe
Outputs
1
Fin
8
Sin
6
Xin
1
Fr
Inputs
1
1
Fw
8
Sr
6
Xr
Fr
1
20
Jr
FIGURE 7.43  The four main model blocks implementing the ASM3_2N model in the Simulink platform. 
The connection stubs indicate which variables are supposed to serve as an input or output for that particular 
connector. Thick arrows denote a data vector, whose dimension is indicated above the line. Each block is 
implemented as a precompiled S-function. (Reproduced with permission from Iacopozzi, I. et al., Environ. 
Modell. Softw., 22, 847–861, 2007.)

425
Microbial Kinetics Modelling
INPUTS
Vd/u[1]
teta
To
Settler3_2step
SECONDARY SETTLER
Qa
RECYCLE FLOW
Qw
Q spurgata
Qric
Q ric dal sed
Q out sed
Q ingr sed
S_out_aero3
X_out_aero1
Q_ric_aero1
S_ric_int
X_ric_int
Q_ric_int
INTERNAL RECYCLE
Mixer3_2step
INTERNAL MIXING
EXTERNAL MIXING
S_ric_sed
X_ric_sed
Q_ric_sed
S_ric
X_ric
Q_ric
EXTERNAL RECYCLEW
Mixer3_2step
Splitter3_2step
COD SPLITTER
Cstr3_2step
ANOXIC TANK
Cstr3_2step
AEROBIC TANK
Ua_anox1
Ua_aero1
[t_in,SALK_in]
[t_in,SNH4_in]
[t_in,COD_in]
[t_in,Q_in]
+
_
+
_
_
FIGURE 7.44  Complete Simulink diagram implementing the ASM3_2N model, connecting the main S-function blocks. The two blocks in the return paths introduce 
a transport delay required to avoid algebraic loops and to add realism by taking into account the actual flow delays introduced by the internal and external recycles. This 
Simulink model plant3 _ 2step _ base _ 2v.mdl can be retrieved from the ESA _ Matlab\Exercises\Chapter _ 7\ASM3 _ 2N folder. (Reproduced with 
permission from Iacopozzi, I. et al., Environ. Modell. Softw., 22, 847–861, 2007.)

426
Environmental Systems Analysis with MATLAB®
50
60
70
80
Output COD
COD (mg L−1)
0
2
4
6
8
10
12
14
0
10
20
Time (d)
SNH4
SNO2
SNO3
Total output nitrogen
Output N2
2
4
6
8
(mg − N L−1)
(mg − N L−1)
FIGURE 7.46  A sample of ASM3_2N model output regarding total output COD, the amount of output 
dinitrogen produced by the denitrification process and the various nitrogen forms in the liquid output. These 
graphs were obtained with the MATLAB launch script Go _ ASM3 _ 2N _ 2V.m in the ESA _ Matlab\
Exercises\Chapter _ 7\ASM3 _ 2N folder.
Time (d)
0
2
4
× 104
Qin (m3 d−1)
200
400
600
CODin (mg L−1)
0
2
4
6
8
10
12
14
0
50
SNH4,in (mg − N L−1)
Input flow
Input ammonium-N
Input COD
FIGURE 7.45  The Benchmark input files for the dry weather conditions.

427
Microbial Kinetics Modelling
If the detritus is sufficiently oxidized, phosphorus is normally sequestered as FePO4, but if reducing 
conditions prevail, then phosphorus can be released according to the reaction
 
FePO
HS
FeS
HPO
4
4
2
+
+
+
−
−
−
→
e
	
(7.85)
releasing phosphorus in biologically available form. The change from an oxidized to a reduced sedi-
ment condition may be caused by a low-DO condition (hypoxia), which can trigger eutrophication 
Sediment
PO4
3−
POP
DOP
Psed
Sedimentation
Hydrolysis
Uptake
Dissolution
Release
Regeneration
PV
Plant cell
P/H2S/Fe
equilibrium
Pinput
RedOx
conditions
Water
FIGURE 7.48  Basic phosphorus cycle in the aquatic environment. The POP is hydrolysed into dissolved 
organic phosphorus (DOP), and then regenerated (mineralized) into orthophosphate PO4
3−
(
). In this form 
(PV), it is utilized by the plant cell. Subsequent release as decaying material is recycled into POP and partly 
settled in the upper sediment layer. Its eventual dissolution depends on the oxidation/reduction condition of 
the sediment.
NH4 (mg − N L−1)
Cum. freq.
0
5
10
0
0.10
0.20
0.30
0.40
0.50
0.60
0.70
0.80
0.90
1,00
NO2 (mg − N L−1)
0
1
2
0
0.10
0.20
0.30
0.40
0.50
0.60
0.70
0.80
0.90
1,00
NO3 (mg − N L−1)
0
5
10
15
0
0.10
0.20
0.30
0.40
0.50
0.60
0.70
0.80
0.90
1,00
FIGURE 7.47  Cumulative distributions of the three output nitrogen species shown in Figure 7.46 during 
the 2-week simulation period. The dashed lines indicate some relevant discharge limit, and the correspond-
ing exceedance statistics. In the plots above, it can be seen that the ammonium-N and nitrite are well below 
their thresholds, while only 30% of the samples are below the nitrate limit. These graphs were obtained 
with the MATLAB launch script percentiles.m in the ESA _ Matlab\Exercises\Chapter _ 7\
ASM3 _ 2N folder on completion of the previous simulation of Figure 7.46.

428
Environmental Systems Analysis with MATLAB®
by the release of inorganic P according to the reaction (7.85). The iron, sulphur and phosphorus 
cycling, and their relation to possible eutrophication, is thoroughly described in the literature 
(Azzoni et al., 2001; Melia et al., 2003; Nizzoli et al., 2006; Giordani et al., 2009). As to the role 
of phosphorus in the vegetation, Droop (1983) introduced the notion of cell quota as the growth-
controlling factor and the concept of a nutrient pool inside the cell was further developed by John 
and Flynn (2000). The common feature of both phosphorus models is that the uptake is not imme-
diately related to growth, which may start well after the nutrient is absorbed from the water. Growth 
is sustained by the nutrient reserves in the cell until a lower limit is reached, below which this pool 
cannot be used anymore. The two approaches are sketched in Figure 7.49, where the cell quota (a) 
receives and stores the external nutrient, while in the PIM hypothesis (b), a more complex storage 
mechanisms is envisaged.
7.4.1  Droop Cell-Quota Model
Droop (1983) formulated the cell-quota hypothesis as ‘the quantity of substrate to produce a given 
biomass’. In this sense, the cell quota can be regarded as a yield factor, but it also represents an 
internal nutrient pool on which growth depends, but which cannot be completely depleted. On the 
basis of these considerations, the following three-variable cell-quota model can be set up:
 
P uptake
Cell quota
dP
dt
u P
k
P
P
dQ
dt
u P
k
P
k
Q
m
p
m
P
Q
q
= −
+
+
=
+
−
−



in
µ
1

=
−




−
Q
dX
dt
Y
k
Q Q
k X
Q
q
d
Biomass growth
1
1
µ
	
(7.86)
Comparing model (7.86) with the previous Monod-based substrate/biomass interactions, it can be 
seen that growth is mediated by the cell quota, which acts as an internal reservoir. The Simulink 
model of Figure 7.50 implements the cell-quota model (7.86), where the uptake and the quota con-
sumption are implemented with two fcn block. The three integrators produce the required state 
variables of the model (P, Q, X).
The launch MATLAB script is listed in Box 7.2, and it is very straightforward. After defining 
the model parameters, it invokes the Simulink model named Cell _ quota.mdl and plots the 
results. Given the large amount of simulation data, a decimation factor of 10 was introduced in the 
To Workspace blocks to limit the number of plotted data, hence the need to store a decimated 
simulation time ts. The results plotted in Figure 7.51 clearly show the delayed growth with respect 
to the phosphorus uptake and the cell quota settling at its lower limit equal to kq. Because no further 
PQUOTA
PO4
3−
PO4
3−
(a) 
Plant cell
SIP
SOP
Poly-P
(b) 
Plant cell
FIGURE 7.49  Two models of phosphorus utilization in the plant cell. (a) The cell-quota model (Droop, M. R., 
Bot. Mar., 26, 99–112, 1983) considers only one growth-controlling storage compartment inside the cell, while 
in (b), the phosphate interaction model (PIM) has three separate internal compartments: soluble inorganic P 
(SIP), polyphosphate (Poly-P) and structural organic P (SOP) (John, E. H. and Flynn, K. J., Ecol. Model., 125, 
145–157, 2000.)

429
Microbial Kinetics Modelling
BOX 7.2  LAUNCH SCRIPT FOR THE CELL-QUOTA MODEL 
(DROOP, 1983) INVOKING THE SIMULINK MODEL OF FIGURE 7.50
clear
close all
Po=15; % Initial nutrient concentration
% Parameter vector bundle
Um=0.042;   % Uptake maximum rate
Mq=0.001;   % Cell-quota maximum rate
kq=1.5;     % Cell-quota constant
ks=15;      % Uptake half-velocity
kd=0.00013; % Biomass decay rate
Xo=0.3;     % Initial biomass
Qo=0.0015;  % Initial cell-quota
Y=0.75;     % Yield factor
% Simulation
tfin=10000; % Final simulation time
Dec=10; % Simulation data decimation factor
[t,x,y]=sim(‘Cell _ Quota’,tfin);
% Plot simulation results
figure(1)
plot(ts,S,‘-.b’,ts,Q,‘b’,ts,X,‘:b’,‘Linewidth’,2)
set(gca,‘FontName’,‘Arial’,‘FontSize’,14)
legend(‘Ext. Substrate’,‘Cell-Quota’,‘Biomass’,‘location’,‘northeast’)
xlabel(‘time (h)’)
ylabel(‘Concentration (mg/L)’)
Um*u[1]/(ks + u [1])
Uptake
Kd
Decay
− K −
Yield
Ts
Simulation time
Mq*(1 − kq/(u[1]))*u[1]
Quota consumption
S
Phosphorus
1
s
Gain1
Clock
1
s
Cell
quota
1
s
Cell
growth
Q
Cell-quota
X
Biomass
Phosphorus
− 1
−
+
−
+
FIGURE 7.50  Simulink diagram implementing the cell-quota phosphorus uptake and cell growth model. This 
Simulink model is available as Cell _ Quota.mdl in the ESA _ Matlab\Exercises\Chapter _ 7\
Phosphorus folder.

430
Environmental Systems Analysis with MATLAB®
nutrient was supplied after the initial condition Po =
(
)
15 mg P L
/
, the biomass decays with rate kd 
after having reached its peak development by exploiting the reserves provided by the cell quota.
7.4.2  PIM Model
An improvement to the cell-quota concept was later provided by John and Flynn (2000), who pro-
posed a PIM corresponding to the scheme of Figure 7.49b. In this model, phosphorus is shared by 
three internal storage pools: Poly-P, SIP and SOP. The authors claim that PIM can simulate the 
decoupling of phosphate transport and assimilation, especially in transient regimes and P-limited 
conditions. Another important aspect of introducing Poly-P as a phosphorus pool is that in this 
way inorganic polyphosphate can be accumulated in very large quantities to support prolonged growth, 
even in the absence of external P. For a complete description of the PIM, the reader is referred to the 
original paper (John and Flynn, 2000), where the model is fully described in Table 1 (model equations) 
and Table 2 (model parameters). Here, we concentrate on its Simulink implementation, which dif-
fers from the previous Simulink models examined so far, with the exception of the ASM3_2N 
model. In fact, in the latter case, the complex dynamics of the microbial metabolism were imple-
mented with the S-function block hosting a pre-compiled C-code. In the implementation of PIM, an 
intermediate approach was used: the S-function block was still used, but instead of embedding an 
external code, a MATLAB script was inserted into the S-function template according to the scheme 
presented in Figure 7.52.
The detailed Simulink model is shown in Figure 7.53 and the internal structure of the S-function 
is listed in Box 7.3, using the template available in the Simulink library.
The advantage of PIM over the cell-quota model is the flexibility in simulating differing levels of 
poly-P accumulation, and to decouple P transport from assimilation. In fact, comparing the external 
P exhaustion in Figure 7.55 with the poly-P accumulation in Figure 7.54, it can be seen that the latter 
resource is used after the external P has been completely exhausted.
Differing levels of Poly-P accumulation can be simulated through the PIM, by acting on the 
PolyPmax constant. It can be shown that the decline in carbon growth is slower in species with a 
0
2
4
6
8
10
0
5
10
15
Concentration (mg L−1)
Ext. substrate
Cell Quota
Biomass
Time (h × 103)
kq →
FIGURE 7.51  Simulation of the cell-quota model of Figure 7.50 in the case of no continuous external phos-
phorus input. The cell quota settles to the kq constant value, while growth is delayed with respect to phospho-
rus uptake, and then decays because of endogenous metabolism with rate kd. This simulation was produce by 
the MATLAB script Go _ CQ.m in the ESA _ Matlab\Exercises\Chapter _ 7\Phosphorus folder.

431
Microbial Kinetics Modelling
BOX 7.3  MATLAB SCRIPT INCORPORATED IN THE 
S-FUNCTION TO IMPLEMENT THE PIM KINETICS
function  [sys, x0] = PIM _ Kinetics(t,x,u,flag)
%S-FUNCTION implementation of the PIM
% Phosphorus kinetics according to John and Flynn,(2000).
%
global P IC
% Parameter values and initial conditions
% are passed as external objects via a global statement
if abs(flag) == 1,
% Parameter vector unbundle
Box 7.3 continued
f(u)
Uptake
tsim
Simulation time
SOP
SOP_out
SIP
SIP_out
PolyP
PolyP_out
PIM_kinetics
PIM
Ptrans
P transport
1
s
Integrator
dC
Growth_rate
Pex
External P
du/dt
Derivative
Clock
C
C_out
FIGURE 7.53  Simulink diagram implementing the PIM model (John and Flynn, 2000). The PIM kinetics is 
implemented with an S-function incorporating MATLAB code, as described in Figure 7.52, while the uptake 
function is a function block requiring external integration. The thick arrows indicate transmission of a data 
vector. This Simulink model is available as PIM.mdl in the ESA _ Matlab\Exercises\Chapter _ 7\
Phosphorus folder. The PIM_Kinetics block is an S-function incorporating the PIM _ Kinetics.m in 
the same folder.
MATLAB launch file
Simulink model
MATLAB script
PIM_kinetics
Graphs
Input data
FIGURE 7.52  Software organization to incorporate an S-function MATLAB script. The MATLAB code is 
written in the S-function template and then incorporated into the Simulink model.

432
Environmental Systems Analysis with MATLAB®
Box 7.3 continued
KqP=P(1);
PolyPmax=P(2);
Ksip =P(3);
Kps =P(4);
Kpt1=P(5);
Kpt2=P(6);
PTkSIP=P(7);
PTKs=P(8);
QoP=P(9);
SIPmax=P(10);
Ksop1=P(11);
Ksop2=P(12);
SOPmax=P(13);
Umax=P(14);
% Intermediate variables
PAmax=SOPmax*Umax;
PTmax=4*PAmax;
PolyP=x(1);SIP=x(2);SOP=x(3);C=x(4);
PT=PTmax*(u/(u+PTKs))*(1-SIP/SIPmax)/((1-SIP/SIPmax)+PTkSIP);
PolyPs=2*PAmax*(SIP/(SIP+Ksip))*((1-PolyP/PolyPmax)^4)/(((1-PolyP/
PolyPmax)^4)+Kps);
PolyPt=PAmax*(PolyP/(PolyP+Kpt1))*((1+SIP/SIPmax)^4)/(((1+SIP/
SIPmax)^4)+Kpt2);
SOPs=PAmax*(SIP/(SIP+Ksop2))*((1-SOP/SOPmax)^4)/(((1-SOP/
SOPmax)^4)+Ksop1);
Cmu=Umax*(SOP-QoP)/(SOP-QoP+KqP);
dC=C*Cmu;
dPolyP=PolyP*Cmu;
dSIP=SIP*Cmu;
dSOP=SOP*Cmu;
% Model equations
dx(1)=PolyPs-PolyPt-dPolyP;
dx(2)=PolyPt+PT-SOPs-PolyPs-dSIP;
dx(3)=SOPs-dSOP;
dx(4)=dC;
sys = dx;
end
if flag == 3,
% If FLAG==3, then SIMULINK wants to know what the next output is.
% **** In this template system, y gets the current state x ****
% (SYS =) Y = X
for i=1:4
     if x(i)<0.001, x(i)=0.001;
     end
end
sys = x;
end
Box 7.3 continued

433
Microbial Kinetics Modelling
Box 7.3 continued
if flag == 0,
% This part takes care of all initialization; it is used only once.
% The sizes vector is six elements long, and it looks like this:
sizes(1) = 4;	 %	
number of continuous states
sizes(2) = 0;	 %	
number of discrete states
sizes(3) = 4;	 %	
number of system outputs
sizes(4) = 1;	 %	
number of system inputs
sizes(5) = 0;	%	
number 
of 
discontinuous 
roots; 
unused 
­feature, set to zero
sizes(6) = 0;
% Set the initial conditions on the states
x0 = IC;
sys = sizes’;
end
if flag==2 |flag==4
% Flags not considered here are treated as unimportant.
% Notice that since there are no discrete states in this system,
% there is no need to deal with FLAG==2 or FLAG==4.
% Output is set to [].
sys = [];
end     % if abs(flag) == ...
0
20
40
60
80
100
0
0.002
0.004
0.006
0.008
0.010
0.012
Poly-P
Time (h)
0
20
40
60
80
100
1
1.5
2
2.5
3
3.5
4 × 10−3
SIP
Time (h)
μg − Poly − P/μg − C
μg − P/μg − C
0
50
100
150
200
250
300
0
0.005
0.01
0.015
0.02
SOP
Time (h)
0
50
100
150
200
250
300
0
0.5
1
1.5
2
Biomass-C
Time (h)
C biomass
C growth rate
mg − P/mg − C
μg − C/ml
0
0.005
0.01
0.015
0.02
μg − C/ml.h
FIGURE 7.54  PIM simulation describing the evolution of the differing P forms inside the cell. These graphs 
were obtained with the MATLAB script Go_PIM.m in the ESA_Matlab\Exercises\Chapter_7\
Phosphorus folder.

434
Environmental Systems Analysis with MATLAB®
higher Poly-P accumulation, representing a competitive advantage of this species over others with a 
more limited Poly-P storage capacity.
7.4.3  Phosphorus Removal in Wastewater Treatment Processes
Phosphorus has no gaseous form in the natural environment, apart from the phosphine poisonous 
gas (PH3) (Han et al., 2010), and thus it cannot be disposed of through a chain of biochemical reac-
tions, such as the nitrification–denitrification nitrogen counterpart. The only possibility for remov-
ing phosphorus from the environment is to accumulate it in some living organism, and then remove 
that organism with its P pool. In fact, we have just seen that many plant cells, especially microalgae 
and some specialized bacteria, have the ability to build internal P reserves. In wastewater technol-
ogy, polyphosphate accumulating organisms (PAOs) have been isolated and can remove phosphorus 
from the wastewater if kept in adequate conditions, such as the Dephanox process (Bortone et al., 
1999) and in SBRs (Marsili-Libelli et al., 2001; Wilderer et al., 2001; Artan and Orhon, 2005).
 PAOs are bacteria that, under certain environmental conditions ( feast/famine), can accumulate 
phosphorus inside the cell, removing it from wastewater (Mino et al., 1998; Hesselmann et al., 
1999; Seviour et al., 2003; Oehmen et al., 2007). As we have seen, the capability of accumulating 
intracellular phosphorus is common to many plant cells and bacteria. What makes PAOs different 
from other P-accumulating organisms is the ability to store phosphorus as poly-β-hydroxybutyrate 
(PHB), and to consume simple carbon compounds by generating energy from internally stored 
polyphosphate and glycogen (Beun et al., 2000, 2002; Carta et al., 2001) without the availability 
of an external electron acceptor. The glycogen metabolism is described in Dircks et al. (2001), 
who showed that formation and consumption of glycogen appears to be much faster than for PHB. 
Competition for carbonaceous substrate between PAOs and denitrifiers during simultaneous nitro-
gen and phosphorus removal depends on the nature of the carbon source (Lopez-Vazquez et al., 
2009; Guerrero et al., 2011) and may lead to competition between the two groups, PAOs and the 
glycogen-accumulating organisms (GAOs), as investigated by Lanham et al. (2014). PAOs can oper-
ate in three differing conditions with strikingly differing behaviours.
0
10
20
30
40
50
60
0
0.01
0.02
0.03
0.04
0.05
Time (h)
ext-P 
10∗P-transport
0
10
20
30
40
50
60
70
80
90
100
0
0.05
0.1
0.15
0.2
0.25
Time (h)
Cell P:C (μg − P μg−1 C) 
μg − P ml−1
FIGURE 7.55  PIM simulation describing the external P transport and P:C ratio inside the cell. These graphs 
were obtained with the MATLAB script Go _ PIM.m in the ESA _ Matlab\Exercises\Chapter _ 7\
Phosphorus folder.

435
Microbial Kinetics Modelling
	
1.	In anaerobic conditions and with external substrate available, they metabolize acetate 
(HAc) using the stored Poly-P as energy source. In the process, phosphorus is released and 
internal PHB reserves are built up. In these conditions, they have a competitive advantage 
over other heterotrophs, being able to metabolize the substrate without external electron 
acceptors (Figure 7.56a).
	
2.	In anoxic NO3
−
(
) or aerobic O2
(
) conditions, and without external substrate, they utilize 
the previously produced phosphorus and produce new cells equipped with their own PHB 
reserves. The amount of phosphorus accumulated in the process is greater than that previ-
ously released, resulting in a net P removal from the wastewater (Figure 7.56b).
	
3.	In anoxic NO3
−
(
) or aerobic O2
(
) conditions, and with external substrate, this is converted 
into PHB, and at the same time phosphorus is released, thus achieving the opposite result 
(Figure 7.56c).
(a) 
Glycogen
PHB
HAc
ATP
Poly-P
Pi
NADH2
P release
O2/NO3
−
H2O/N2
Glycogen
Poly-P
PHB
New cell
Growth
Glycogen
PHB
HAc
ATP
Poly-P
Pi
NADH2
P uptake
(b) 
Glycogen
PHB
HAc
ATP
Poly-P
Pi
NADH2
P uptake
(c) 
O2/NO3
−
H2O/N2
FIGURE 7.56  The three states of PAOs ‘feast–famine’ metabolism: (a) anaerobic conditions with exter-
nal substrate; (b) anoxic/aerobic conditions without external substrate; and (c) anoxic/aerobic conditions with 
external substrate.

436
Environmental Systems Analysis with MATLAB®
Thus, PAOs are characterized by an unbalanced growth (feast–famine regime), during which they 
can assimilate the external substrate in anaerobic conditions to build internal reserves, while they 
grow in anoxic or aerobic conditions using their internal reserves, if external substrate is not avail-
able. Given their peculiar metabolism, PAOs are disadvantaged in normal activated sludge processes 
with aerobic conditions and external carbon availability, while they have a competitive advantage in 
processes alternating anaerobic/anoxic to aerobic phases, where they accumulate more phosphorus 
in the anaerobic phase than they release during the aerobic phase. In addition, they can also perform 
denitrification during the anoxic phase.
Figure 7.56 illustrates the three metabolic states of PAO metabolism. In (a), the external 
substrate (HAc) is metabolized into PHB under anaerobic conditions. The required energy is 
provided by ATP, which is phosphorylated by the Poly-P reserves, while the reducing power 
(NADH2) is provided by the glycogen and phosphorus is released in the process. In (b), no exter-
nal substrate is available. Therefore, PHB is used as a substrate for the oxidative phosphorylation 
of ATP and the glycogen is replenished, thanks to the external electron acceptors (O2 or NO3
−). 
External phosphorus is taken up to resupply the Poly-P chains and new cells are generated, with 
their own supplies of Poly-P. In this way, the P-uptake is greater than the previous P release and a 
net P removal is obtained. In (c), both external substrate and electron acceptors are available. The 
PHB reserves are replenished using this carbon source, and phosphorus is released in the process. 
From the wastewater engineering viewpoint, this is an undesirable situation, because phosphorus 
is released instead of being removed. The P-removal processes are conceived to alternate between 
the (a) and (b) situations, avoiding the occurrence of (c). In these conditions, the phosphorus 
cycling between the two phases is illustrated in Figure 7.57. During the anaerobic phase, PAOs 
build up PHB reserves using the external carbon source (HAc) and release P according to the 
mechanism of Figure 7.56a. After all the substrate has been consumed, aeration is switched on. 
The PAO metabolism shifts to the growth condition of Figure 7.56b, uptaking P from the water. 
The combined cycle results in a net P removal.
Anaerobic phase
Aerobic phase
0
50
100
150
200
250
300
Time (min)
HAc
PO4
3−
P uptake
P release
PHB
Concentrations
Net P removal
FIGURE 7.57  Phosphorus exchange during the anaerobic/aerobic cycling. During the anaerobic phase, PAOs 
build up PHB reserves using the external carbon source (HAc) and release P according to the mechanism of 
Figure 7.56a. When aeration is switched on, their metabolism shifts to the growth condition of Figure 7.56b 
and uptake P from the water. The combined cycle results in a net P removal. This graph was obtained with the 
MATLAB script Go _ SBR.m in the ESA _ Matlab\Exercises\Chapter _ 7\SBR folder.

437
Microbial Kinetics Modelling
7.4.4  The Sequencing Batch Reactor Process for Nutrient Removal
Given the unbalanced growth regime of PAOs, alternating periods of phosphorus uptake and cell 
growth in differing periods, a specific process configuration has been conceived to provide these 
bacteria with the appropriate feast/famine conditions in which they can perform P removal. The 
sequencing batch reactor (SBR), first introduced by Irvine and Ketchum (1989), is a simple and 
effective engineering solution to provide the required alternating conditions for P-removal by PAOs, 
and also the anoxic/oxic conditions for the denitrification by facultative heterotrophs and the same 
PAOs. SBR is now a well-established engineering solution for nutrient removal from wastewater 
(Wilderer et al., 2001; Artan and Orhon, 2005). The engineering aspects of SBRs are thoroughly 
described in specialized textbooks (Metcalf & Eddy Inc., 2003; Leslie Grady et al., 2011).
The phases of the SBR are sequentially organized as in Figure 7.58. In phase 1, the reactor is 
filled with the raw effluent. In phase 2, the reactor is kept in anoxic/anaerobic conditions by stirring 
without aeration. In phase 3, the air is switched on so that the conditions become aerobic. After the 
aeration is switched off, the mixed liquor is allowed to settle, and then the treated water is extracted 
from the clarified zone (5) and eventually the excess sludge is extracted (6), after which the SBR 
is ready to start a new cycle. Traditionally, the SBR timing is fixed, with the length of each phase 
shown in Figure 7.59 so that a full cycle is completed in 6 h, but a considerable improvement can 
be obtained by adapting the switching sequence to the actual state of the reactions, as will be illus-
trated in the next section.
7.4.4.1  MATLAB Implementation of the SBR Model
The established model describing the microbial reactions related to nutrient (N and P) removal 
is the ASM2d model (Henze et al., 2000) that, unlike ASM1 and ASM3, contains the P-removal 
reactions described in the previous section. The model involves twenty state variables and a large 
Fill
2
3
4
1
6
5
Anaerobic
anoxic
reaction
Aerobic
reaction
Settle
SBR
cycle
Water
extraction
Sludge
extraction
FIGURE 7.58  The six phases of the SBR cycle. In 1, the reactor is filled with the effluent; in 2, the reactor is 
stirred and kept in anaerobic/anoxic conditions; in 3, the air is switched on; in 4, the mixed liquor is allowed 
to settle; in 5, the treated water is extracted; and in 6, the excess sludge is extracted. Then, the reactor is ready 
for another cycle.

438
Environmental Systems Analysis with MATLAB®
number of reaction processes and numerical parameters. For this reason, a block Simulink imple-
mentation of the SBR model would be too complex and inefficient, and again the MEX S-function 
approach has been adopted (Marsili-Libelli et al., 2001). In fact, calling a compiled C-code from 
an S-function block improves the computation speed by at least a factor of 100 and makes the 
source code more compact. The same software engineering approach, already used to code the 
ASM3_2N model of Section 7.3.3, was followed here. A single S-function suffices to implement 
all of the SBR reactions, while the control inputs (fill, aeration, extraction, and sludge waste) 
are implemented as pulse generators. The simulation is launched by the MATLAB script Go _
SBR.m, which first passes the parameters and initial conditions to the Simulink model and then 
plots the simulation results. It was decided to pass the parameters to the S-function through a 
global statement, so that they could be manipulated outside the SBR S-function. This is neces-
sary during the model calibration (see Chapter 2), where the parameters are changed by the opti-
mization algorithm at each simulation run. The model was calibrated, as shown in Figure 7.60, 
with data from an experimental SBR treating an effluent containing both nitrogen and phosphorus. 
Exp. PO4
Model PO4
35
30
25
20
15
10
5
0
0
50
100
150
200
250
300
Time (min)
PO4 (mg L−1)
Model NO3
Experimental NO2
Experimental NO3
Model NO2
0
50
100
150
200
250
300
Time (min)
NO2, NO3 (mg–N L−1)
Fill
Anaerobic
Aerobic
Fill
Anaerobic
Aerobic
FIGURE 7.60  Comparison between the experimental data and the calibrated SBR model output, considering 
an effluent with both phosphorus and nitrogen. These graphs were obtained with the MATLAB script Go _
SBR.m in the ESA _ Matlab\Exercises\Chapter _ 7\SBR folder. (Redrawn from Marsili-Libelli, S. 
et al., Water Sci. Technol., 43, 69–76, 2001.)
Time (min)
30
150
300
360
0
Fill
Anaerobic/anoxic
Aerobic
Settle
Water
extraction
Sludge
extraction
FIGURE 7.59  Typical length of each SBR phase, with a full cycle duration of 6 h.

439
Microbial Kinetics Modelling
The experimental setup was located in the ENEA Laboratories in Bologna, Italy (www.enea.it) and 
is described elsewhere (Marsili-Libelli et al., 2001; Spagni et al., 2001; Luccarini et al., 2002). A 
closer look at Figure 7.60 shows that the during the fill phase, and the subsequent anaerobic period, 
there is a progressive phosphorus release, which is later re-absorbed during the aerobic phase, after 
the carbonaceous substrate has been eliminated. The nitrogen transformations, instead, are limited 
to denitrification during the fill/anaerobic phases, while during the aerated phase, the intermediate 
nitrite is oxidized to nitrate, to be denitrified in the anoxic phase of the next cycle.
7.4.5  Controlling the SBR Switching with Fuzzy Logic
As previously mentioned, normally the SBR cycle has a fixed duration, with each phase being timed 
regardless of the process requirements. This may result in an inefficient operation and a waste of 
energy. Because the SBR process is often used in low-cost applications and/or with aggressive 
effluents, the key control factor is the use of simple and cheap online process measurements to infer 
the concentration of the chemical variables NH ,NO ,NO ,PO
4
2
3
4
2
+
+
−
−
(
), while it would be difficult and 
expensive to measure them directly. There has long been a general consensus on two main issues: 
that SBR control aims to adapt the switching sequence to the actual load and that physico-chemical 
parameters such as pH, oxido-reduction potential (ORP) and DO may be used as indirect process 
indicators.
This section summarizes the results obtained by using fuzzy logic to control the SBR switching 
sequence. First, the relevant process transitions are defined; then a switching fuzzy logic is defined 
to terminate each reactive phase as soon as the relevant chemical transformations are completed.
7.4.6  Indirect Detection of Process Transitions
If all the relevant process quantities NH ,NO ,NO ,PO
4
+
2
3
4
2
−
−
(
)
+
 could be easily measured in real time, 
switching could be performed according to the following simple rules:
	
1.	The anaerobic/anoxic phase ends when both the nitrate-N has been denitrified and all the 
available organic carbon is used in the process, as in Figure 7.61. At this time the aeration 
could be switched on.
	
2.	The aerobic phase ends when all the phosphate-P is taken up by the PAO or all the ­ammonium-N 
is converted into nitrate-N, whichever takes longer, as illustrated in Figure 7.62. At this time the 
aeration could be switched off.
Though ion-specific probes are becoming cheaper and more reliable, still their use in the SBR technol-
ogy is still limited for economical and maintenance considerations. In their place, indirect quantities 
such as pH, ORP and DO, which can be measured cheaply and reliably, are used as indirect pattern 
indicators to signal the end of each phase and switch the process accordingly. The ­correspondence 
between such indicators and the process state can be established by inspecting Figure 7.61 for the 
anaerobic/anoxic phase, and Figure 7.62 for the aerobic phase. In both cases, the slope of these 
physico-chemical measurements can be related to significant events in the SBR reaction.
7.4.6.1  Anaerobic/Anoxic Patterns
During this phase, the pH-influencing processes are denitrification and P-release, generally occur-
ring in this order. Figure 7.61 shows that the end of denitrification produces a brief pH increase, 
after which it decreases as a consequence of phosphorus release. The ORP further decreases as the 
process gets deeper into anaerobic conditions. Eventually, when all the available nitrate is reduced 
and all the phosphorus is released, both pH and ORP level off, with the remaining fraction of the 
phase becomes redundant. In summary, the relevant transitions indicating the end of this phase are 
the changes in ORP slope and the ‘kick’ and levelling of pH.

440
Environmental Systems Analysis with MATLAB®
7.4.6.2  Aerobic Patterns
During this phase ammonia is oxidized into nitrate, whereas phosphorus is utilized by the PAO 
provided that no organic carbon is available. Figure 7.62 shows that the relevant process variables 
are pH and DO, while ORP carries little information when positive. The pH exhibits an inflexion at 
the end of phosphorus uptake, while DO levels off when all the ammonium-N has been oxidized. 
However, because during the aerobic phase nitrification and P-uptake are concurrent processes, pH 
may exhibit differing patterns depending on which ends first. This complex behaviour has been 
thoroughly examined by Spagni et al. (2001), who observed differing pH patterns as a consequence 
of the relative duration of ammonia oxidation and P-uptake, in addition to CO2 stripping, respon-
sible for a rapid increase of pH at the beginning of the aerobic phase. According to this analysis 
two differing behaviours may occur, depending on whichever process ends first. If nitrification ends 
before P-uptake, the end of ammonia oxidation is marked by a change in the slope of pH, but it is 
difficult to detect the so-called ammonia valley (Kim et al., 2004; Akin and Ugurlu, 2005; Hu et al., 
2005). Conversely, if P-uptake ends before nitrification, the ‘ammonia valley’ is clearly identifiable, 
confirming the effect of P-uptake on pH. In the first part of the aeration phase, the pH increase is due 
to CO2 stripping and P-uptake, when the latter ends pH starts decreasing due to ammonia oxidation. 
The ‘aerobic pH apex’ can be related to the end of P-uptake.
7.4.7  Design of the Fuzzy Switching Logic
From the behaviours shown in Figures 7.61 and 7.62 the relevant patterns in Table 7.4 were defined 
as phase-end indicators.
End of
denitriﬁcation
0
50
100
7.5
8
8.5
9
150
− 200
− 100
0
100
End of
P-release
Change in
ORP slope
pH “kick”
pH levels oﬀ
pH
ORP (mV)
Time (min)
0
10
20
30
PO4
2−
Maximum P release
Exact anaerobic phase
NO3
−
0
4
8
12
N − NO3 (mg L−1)
PO4 (mg L−1)
Phase redundancy
FIGURE 7.61  Trends of the main process variables during the anaerobic/anoxic phase. When all the phos-
phorus is released the pH levels off and the ORP changes slope, while the end of denitrification is signalled 
by a pH kick. After these transitions, whichever comes last, no other transformation occurs and the rest of the 
phase is redundant. (Reproduced with permission from Marsili-Libelli, S., Water Res., 40, 1095–1107, 2006.)

441
Microbial Kinetics Modelling
Because the information is contained in the signal variations, these signals must be carefully 
denoised before numerical differentiation is applied. For this, the dyadic wavelet denoising of 
Sections 3.4.2 and 3.4.3 is used in the scheme of Figure 3.33, and the denoised pH and ORP signal 
are shown in Figure 7.63.
Once sufficiently smooth numerical derivatives have been obtained, they were classified with 
respect to the patterns of Table 7.4 by clustering a set of training data as in Section 4.5.4 using the 
Gustafson–Kessel algorithm of Section 4.5.8.
The use of the clusters is the same as that already demonstrated in the case of the diagnosis 
of an anaerobic digester in Section 4.5.5.1 and further described elsewhere (Marsili-Libelli and 
Müller, 1996; Mueller et al., 1997). The partition entropy criterion of Equation 4.52 showed that two 
clusters C
C
AA
1
AA
2
,
(
) represent the optimal partition for the anaerobic/anoxic phase, as illustrated in 
Figure 7.64, while three clusters C
C
C
OX
1
OX
2
OX
3
,
,
(
) best describe the data during the aerobic phase, as 
shown in Figure 7.65. These figures also show the trajectory of a training and a validation experi-
ment, and the consequent centroid displacement induced by the adaptation mechanisms described 
in Section 4.5.6.
7.4.8  Design of the Fuzzy Inference System for the Phase Switching
The fuzzy inference system capable of recognizing these indicators requires the steps illustrated in 
the overall diagram of Figure 7.66, which includes preliminary filtering, numerical differentiation, 
pattern recognition and feature extraction.
End of
nitriﬁcation
7.5
8
8.5
9
End of
P-uptake
pH
Time (min)
0
10
20
30
PO4 (mg L−1)
Exact aerobic phase
0
4
8
12
N (mg L−1)
150
200
250
300
350 0
2
4
6
DO (mg L−1)
DO
pH
PO4
2−
DO levels oﬀ
pH inﬂexion
pH levels oﬀ
Phase redundancy
NH4
+
NO2
−
NO3
−
FIGURE 7.62  Trends of the main process variables during the aerobic phase. The previously released phos-
phorus is absorbed and the pH inflexion indicates its elimination. The levelling off of the DO signals indicates 
that all the ammonium-N is oxidized to nitrate-N. After these transitions, whichever comes last, no other 
transformation occurs and the rest of the phase is redundant. (Reproduced with permission from Marsili-
Libelli, S., Water Res., 40, 1095–1107, 2006.)

442
Environmental Systems Analysis with MATLAB®
Using the cluster structure just determined and using the approach of Section 4.5.4, two FIS are 
now designed, one for the anaerobic/anoxic phase, and one for the aerobic phase. Another external 
variable, time, was been added for safety, to prevent both premature termination and excessive dura-
tion of the phase. The lower time limit was specified through a set of fuzzy memberships assuming 
that the aerobic phase should last long enough to ensure consistent ammonia oxidation, whereas the 
minimum anoxic/anaerobic duration is related to loading and denitrification.
0
20
40
60
80
100
120
140
160
180
200
− 0.04
− 0.03
− 0.02
− 0.01
0
0.01
0.02
0.03
0.04
Time (min)
(a)
(b)
20
40
60
80
100
120
140
160
180
− 15
− 10
− 5
0
5
10
15
20
25
Time (min)
0
(
)
dt
pH
d
dt
d (ORP)
Raw derivative
Wavelet derivative
Raw derivative
Wavelet derivative
FIGURE 7.63  Wavelet denoising and numerical derivative of the (a) pH and (b) ORP signals. (Reproduced 
with permission from Marsili-Libelli, S., Water Res., 40, 1095–1107, 2006.)
TABLE 7.4 
Process Indicators for SBR Switching
Phase
Terminated Process
Indicator
Anaerobic anoxic
Denitrification
pH kicks up and then falls 
ORP negative slope increases
P-release
pH slope levels off
Aerobic
Nitrification
DO slope levels off
P-uptake
pH inflexion point
Source:	 Marsili-Libelli, S., Water Res., 40, 1095–1107, 2006. Reproduced 
with permission.

443
Microbial Kinetics Modelling
− 0.05
0
0.05
0.1
0.15
0.2
0.25
0.3
− 0.005
0
0.005
0.01
0.015
0.02
0.025
0.03
0.035
0.04
0.045
dt
d (pHdn)
dt
d (DOdn)
Phase start
Phase end
Training data
Centroid update
Validation data     
+ + + + 
0.8
0.8
0.9
0.9
0.9
0.9
0.8
0.8
0.8
0.8
FIGURE 7.65  Three clusters, with centroids v1, v2 and v3, describe the critical transitions during the aerobic 
phase in the space of the denoised derivatives of pH and DO. The trajectories relative to two experiments are 
shown, together with the centroid adaptation during training. (Reproduced with permission from Marsili-
Libelli, S., Water Res., 40, 1095–1107, 2006.)
− 20
− 15
− 10
− 5
0
×10− 3
 − 20
− 15
− 10
− 5
0
5
10
15
Phase start
Phase end
Training data
Centroid update
Validation data     
+ + + + 
dt
d (pHdn)
dt
d (ORPdn)
v1
v2
0.8
0.8
0.8
0.9
0.9
0.8
FIGURE 7.64  Two clusters, with centroids v1 and v2, describe the transitions during the anaerobic/anoxic 
phase in the space of the denoised derivatives of pH and ORP. The trajectories relative to two experiments 
are shown, together with the centroid adaptation during training. (Reproduced with permission from Marsili-
Libelli, S., Water Res., 40, 1095–1107, 2006.)

444
Environmental Systems Analysis with MATLAB®
7.4.8.1  Anoxic/Anaerobic Phase
The following two Sugeno rules are defined:
 
R
d pH
dt
d ORP
dt
C
t
T
y
R
AA
dn
dn
AA
AA
AA
IF
AND
THEN
1
1
1
1
0
:
,
(
)
(
)





⊂
⊂
=
AA
dn
dn
AA
AA
AA
IF
AND
THEN
2
2
2
2
1
:
,
d pH
dt
d ORP
dt
C
t
T
y
(
)
(
)





⊂
⊂
=
	
(7.87)
where the time thresholds T
T
AA
1
AA
2
,
(
) are the safeguards against the abnormal phase duration. The 
indicator of the anaerobic phase-end is obtained by defuzzification:
 
y
yi
i
i
i
i
AA
AA
AA
AA
=
⋅
=
=
∑
∑
µ
µ
1
2
1
2
	
(7.88)
with yAA representing the likelihood that anaerobic/anoxic phase is approaching its end.
7.4.8.2  Aerobic Phase
The rules for the end of the aerobic phase are similar to the previous equations (7.87), but because three 
clusters represented the optimal partition, this inference engine is composed of three Sugeno rules:
 
R
d pH
dt
d DO
dt
C
t
T
y
R
OX
dn
dn
OX
OX
OX
O
IF
AND
THEN
1
1
1
1
0
:
,
(
)
(
)





⊂
⊂
=
X
dn
dn
OX
OX
OX
IF
AND
THEN
2
2
2
2
0 7
:
,
.
d pH
dt
d DO
dt
C
t
T
y
R
(
)
(
)





⊂
⊂
=
OX
dn
dn
OX
OX
OX
IF
AND
THEN
3
3
2
3
1
:
,
d pH
dt
d DO
dt
C
t
T
y
(
)
(
)





⊂
⊂
=
	
(7.89)
d (DOdn)
dt
d (pHdn)
dt
d (ORPdn)
dt
C1
AA
C2
AA
C2
OX
C1
OX
C3
OX
Anaerobic/anoxic clusters
Aerobic clusters
{RAA , R12}
{T1
AA ,T2
AA}
{R1
OX , R2
OX , R3
OX}
{T1
OX ,T2
OX}
{μi
AA}
{μi
OX}
α = 0.95
α = 0.95
OX phase
switch off
AA phase
switch off
Diadic wavelet decomposition
soft threshold denoising
Numerical derivative
ORP
pH
DO
FIGURE 7.66  Structure of the fuzzy inference system to switch the reactive SBR phases. The derivative 
of the process signals are denoised in real-time, then their values are classified according to the predefined 
clusters to form the antecedents to the fuzzy rules of Equations 7.87 and 7.89. The defuzzified outputs are 
compared with a threshold α =
(
)
0 95
.
 and when exceeded, switching is activated.

445
Microbial Kinetics Modelling
from which the defuzzified aerobic output is obtained as
 
y
yi
i
i
i
i
OX
OX
OX
AOX
=
⋅
=
=
∑
∑
µ
µ
1
3
1
2
	
(7.90)
which, like the previous yAA of Equation 7.88, represents the likelihood that anaerobic/anoxic phase 
is about to end. So, the output of the combined FIS is represented by the two mutually exclusive 
defuzzified values y
y
y
= 

Aa
OX . To be operational, this output must be converted into a crisp 
On/Off switching command, which is obtained from either yAA or yOX, whichever is active, via 
thresholding with an α-cut = 0.95, that is, whichever variable is greater than 0.95 is assumed to 
be ‘true’ and drives the controller. Figure 7.67 shows the testing of the fuzzy inference algorithm 
just described with a pilot SBR operated in the ENEA Bologna Laboratories, confirming that the 
FIS-driven switching can save a considerable time over the conventional cycle, thus allowing more 
wastewater to be treated each day. Further applications of this method and more experimental results 
can be found in the relevant literature (Marsili-Libelli et al., 2008; Spagni et al., 2008; Spagni and 
Marsili-Libelli, 2009, 2010).
−100
7.8
8.0
8.2
8.4
8.6
8.8
Standard cycle
360 min
Switched cycle
Switched cycle
Switched cycle
Standard cycle
360 min
Standard cycle
360 min
ORP (mV)
−50
0
50
100
pH
0
200
400
600
800
1000
1200
Time (min)
Switched cycle
AA = Anaerobic/Anoxic
OX = Aerobic 
AA
OX
S&E
TS
S&E = Settling and extraction
TS = Time saving
FIGURE 7.67  Experimental record of the fuzzy switching logic of Equations 7.87 through 7.89, applied to 
a bench scale SBR in the ENEA Laboratories, Bologna, Italy. This logic produces an early switching in both 
phases and the time saved for each cycle, compared to the standard duration, is indicated by the grey boxes.


447
Analysis of Aquatic Ecosystems
I hear babies cryin’, I watch them grow
They’ll learn much more than I’ll ever know
And I think to myself, what a wonderful world
Louis Armstrong
In this final chapter, we will review all of the techniques presented in the previous chapters and put 
them to work with real environmental analysis problems. The emphasis here will be on the impor-
tance of combining two or more approaches, and it will be shown that such joint usage can achieve 
results that could not be obtained by employing a single technique alone. The range of applications 
presented here covers the various aspects of the aquatic environment. First, an application of an 
extended Streeter & Phelps (S&P) model will be presented and applied to some small Italian riv-
ers. Then, the analysis will move on to the estimation of bioavailable nutrients in natural waters 
by controlled microalgae growth. Next, we shall consider the modelling of constructed wetlands, 
involving both structural modelling and parameter estimation, and, finally, a lagoon ecosystem will 
be considered from several viewpoints, including modelling and management.
8.1  THE OXYGEN CYCLE IN THE AQUATIC ENVIRONMENT
In this section, a simple dynamic balance for dissolved oxygen (DO) will be introduced, utiliz-
ing the concepts of general modelling (Chapter 1), model identification (Chapter 2), and microbial 
metabolism and oxygen transfer (Chapter 7). As Figure 8.1 shows, this model consists of two con-
sumption terms (sediment and aquatic oxygen demand to oxidize the carbonaceous and nitrogenous 
biodegradable compounds) and two re-supply terms (diffusion from the atmosphere and photo-
synthesis). While the former has already been considered in Section 7.2.9 in regard to the oxygen 
transfer and solubility notions, a model of photosynthesis will now be introduced to describe the 
other re-supply terms in the oxygen balance. However, first let us consider a more detailed spatial 
DO description along the water column.
8.1.1  DO Distribution along the Water Column
So far, we have considered the average DO concentration in the water body as it if were evenly 
distributed from the surface to the bottom. A closer look, though, reveals that for several reasons, 
its distribution may change considerably with depth, as shown in Figure 8.2. At the surface, the 
DO concentration equals the saturation value because of atmospheric diffusion, while at shallow 
depths it may become supersaturated as a consequence of photosynthesis, as this process produces 
pure oxygen, while the saturation is referred to the air gas mixture, according to Equation 7.37. As 
light becomes scarcer with depth, photosynthesis decreases, and respiration and sediment oxygen 
demand (SOD) consume oxygen, lowering its concentration. In the upper layer of the sediment, 
decomposition processes consume the remaining oxygen until, after a short distance, the DO is 
fully depleted.
Of course, it makes sense to consider the vertical DO profile only when the depth of the water 
body is considerable and a euphotic (well-lit) upper zone can be distinguished from a low-light 
deep zone. As an example, Figure 8.3 shows the seasonal variations of the vertical DO profile in 
the Bilancino Lake, whose location will be given later in Figure 8.31, where during the summer 
8

448
Environmental Systems Analysis with MATLAB®
stratification, a stable gradient is created, which is disrupted by mixing during the cold season. 
The winter DO profiles (14 February and 30 December) show a well-mixed lake with an almost 
constant DO profile. The high DO value can be explained by the reduced metabolic activities, given 
the low temperature. The two summer profiles (23 June and 3 October) denote a strongly stratified 
lake, with supersaturation in the Epilimnion (upper layer), and a severe oxygen depletion in the 
Hypolimnion (deep layer) due to the fact that the oxygen consumed by the oxidation processes is no 
longer resupplied by mixing from the upper layer.
Solar
radiation
Diﬀusion from the
atmosphere
SOD
Photosynthesis
CBOD and NH4
oxidation
DO
dynamics
FIGURE 8.1  Pictorial view of the oxygen cycle in natural waters. There are two consumption terms: oxygen 
demand from the aquatic environment and from the sediment, and two supply factors: photosynthesis and 
diffusion from the atmosphere.
Depth
z = 0
Super-saturation
due to photosynthesis
Oxygen consumption
due to SOD
0
Water
Fast oxygen
depletion in the
upper layers of the
sediment
Atmosphere
Sediment
Light intensity
zmax
0
z
z
Diﬀusion from the
atmosphere
So
So
sat
FIGURE 8.2  DO profile along the water column. At the surface, the DO is at the saturation value because of 
atmospheric diffusion, while at shallow depths it may become supersaturated as a consequence of photosyn-
thesis. As light becomes scarcer with depth, photosynthesis decreases, while the SOD depletes the DO con-
centration even more. In the upper layer of the sediment, the decomposition processes consume the remaining 
oxygen.

449
Analysis of Aquatic Ecosystems
8.1.2  The Role of the Aquatic Vegetation
Of the two oxygen supply terms, diffusion from the atmosphere into a natural stream has been 
treated in Section 7.2.9.1. The other fundamental process of photosynthesis is briefly considered 
here, while more details can be found in specialized textbooks (Jorgensen and Bendoricchio, 2001; 
Falkowski and Raven, 2007; Kirk, 2011). Photosynthesis is the single most important process in 
the biosphere. Using the energy supplied by the sun, it converts carbon dioxide into glucose and 
its polymers, thus providing the primary food source for the consumers. It also closes the carbon 
and oxygen cycles by reducing the carbon oxidized by respiration CO2
(
) and producing oxygen, as 
shown in the cyclic path of Figure 8.4. The basic photosynthetic reaction can be expressed as
	
6
6
6
2
2
6
12
6
2
CO
H O
C H O
O
Chl a
+
+

→

+
−
hv
	
(8.1)
0
2
4
6
8
10
12
−25
−20
−15
−10
−5
0
DO (mg/l)
Depth (m)
14 Feb
23 Jun
3 Oct
30 Dec
Stratiﬁed lake
Mixed lake
FIGURE 8.3   DO profiles along the water column in the Bilancino Lake, as a consequence of thermal 
stratification. The winter DO profiles on the right (14 February and 30 December) show that during the win-
ter the lake is well mixed, with no DO gradient. The DO profile is almost constant at a high level due to 
reduced metabolic activities caused by the low temperature. Instead, the two profiles on the left (23 June 
and 3 October) describe a strongly stratified lake, with supersaturation in the Epilimnion (upper layer), and a 
severe oxygen depletion in the Hypolimnion (deep layer) due to consumption processes no longer balanced by 
mixing (Publiacqua SpA is gratefully acknowledged for the data availability).
Primary producers
6CO2 + 6H2O              C6H12O6 + 6O2
Respiration
(CO2)
Photosynthesis
(Biomass + O2)
Solar
radiation
Chl−a
Consumers
C6H12O6 + 6O2 → Biomass + CO2
FIGURE 8.4  Energy and matter cycling between primary producers and consumers through the comple-
mentary processes of respiration and photosynthesis.

450
Environmental Systems Analysis with MATLAB®
where hv represents the photon energy provided by the solar radiation, which is a function of its 
wavelength v( ).
Special organelles, called chloroplasts and containing chlorophyll (Chl-a), are able to absorb 
the photosynthetically active radiation (PAR) in the waveband between the 690 and 430 nm wave-
lengths, thus providing the energy required for the reaction (8.1). The huge variety of photosynthetic 
organisms in the aquatic environment have differing growth rates, depending on several factors 
that will be examined shortly, but as a general rule it is observed that the smaller the organism, the 
quicker its response to environmental conditions. As an example, Figure 8.5 shows the differing 
response of the three major groups of submerged vegetation to the annual and daily cycles.
The growth of the aquatic vegetation depends on three factors: temperature, nutrients, and solar 
radiation (Chapra, 1997; Chapra and Pelletier, 2003; Cole and Wells, 2015). Each species has a spe-
cific optimal range or a limitation zone for these factors, as shown in Figure 8.6, whose effects will 
now be examined in detail.
8.1.3  Solar Radiation Modelling
Not all of the incoming solar radiation stimulates photosynthesis, but only the radiation in the 
700–400 nm wavelength range. This fraction of the broadband radiation is referred to as PAR and 
represents the main input to the photosynthesis model that we are going to develop. Measurements 
and models to calculate PAR have been proposed (Alados et al., 1996; Knyazikhin et al., 1998; 
Rosati et al., 2004; Sudhakar et al., 2013), and a rough estimate considers that PAR represents 
about 56% of the incoming radiation. If radiation data are available from a meteorological station 
near the site of interest, they can be used, after suitable smoothing and interpolation. However, 
in many cases, such data are difficult to find, so they can be replaced by synthetic data computed 
on the basis of the following simple astronomical formulas, more details of which can be found 
Phytoplankton
Macroalgae
Macrophytes
Phenology (annual cycle)
Winter Spring Summer Autumn
Winter Spring Summer Autumn
Winter Spring Summer Autumn
Growth
Daily cycles
Photosynthesis
0                    12                   24
Time of day
0                    12                   24
Time of day
0                    12                   24
Time of day
Spring–Summer
Autumn–Winter
FIGURE 8.5  Differing annual and daily cycles of the submerged vegetation. As a general rule, the smaller 
the organism, the faster is its response to the environmental conditions. Phytoplankton grows almost all year 
round and has a marked diel oxygen production, while macroalgae have two growth peaks in spring and 
autumn, and the macrophytes have only one peak, with rather limited diel variations.

451
Analysis of Aquatic Ecosystems
in France and Thornley (1984). To compute the total daily radiation for a given location, the year 
angle yn must be defined as
	
y
n
n =
×
−




360
80
365
	
(8.2)
where n is the calendar day beginning on January 1st. The year angle yn is zero at the vernal equinox, 
while n = 80 corresponds to March 21st.
The other preliminary quantity that must be defined is the solar declination δ, defined as the 
angle (in degrees) between the equatorial plane and the line joining the sun to the earth. This quan-
tity can be computed as a function of the year angle yn with the following empirical expression 
adapted from France and Thornley (1984), where δ = 0° at the equinoxes, δ = +23.45° on 21 June 
and δ = −23.45° on 23 December
	
δ =
−
(
) +
(
) +
(
) +
0 38092
0 76996
32 265
0 36958
2
0 1
.
.
cos
.
sin
.
cos
.
y
y
y
n
n
n
0868
2
sin
yn
(
)	 (8.3)
From Equations 8.2 and 8.3, the photoperiod f, defined as the fraction of light hours in the 24-h day 
length, given the day number n and the latitude φ, can be computed as
	
f =
−
⋅
(
)
−
2
360
1
cos
tan
tan
ϕ
δ 	
(8.4)
where the constraint tan
tan
ϕ
δ
⋅
<1 must hold for any n. Because the maximum values of d is 
23.45° and tan 23 45
0 4348124
.
.
(
) =
, it follows that tan
.
ϕ < 2 29984, which yields a maximum φ 
value of 66.5°, corresponding to the latitude of the polar circles, beyond which a 24-h daylight spell 
is possible.
The total daily radiation throughout the year can be estimated by fitting a sine function
	
J
J
J
J
n
J
n =
+
⋅+
(
)
1
2
3
4
sin
	
(8.5)
I (W/m2)
Optimal
radiation
range
Growth
(a)
T (°C)
Optimal
temperature
range
Growth
(b)
Nutrients (mg/l)
Nutrient
limitation
zone
Growth
(c)
FIGURE 8.6  The three factors controlling the growth of aquatic vegetation. In (a) and (b), there is an optimal 
range for temperature and solar radiation, while the nutrients availability (c) has a limitation zone.

452
Environmental Systems Analysis with MATLAB®
where the four parameters J J
J
J
1
2
3
4
,
,
,
(
) are location dependent. On a daily basis the instantaneous 
radiation I (t) is related to the total radiation Jn according to
	
I t
J
f
t
f
f
t
f
I
n
( ) =
+
−
(
)
°










−
≤
≤
+
1
0 5 360
2
0 5
2
cos
.
.
for  0.5
t( ) =





0
otherwise
	
(8.6)
where the 24-h daytime has been normalized between 0 and 1. Obviously, the time outside the inter-
val 0.5 ± f/2 represents the dark portion of the day. Figure 8.7 shows the results of the previous astro-
nomical computations for a given latitude (43.7° N). The average daily radiation is computed in (b), 
recalling that the solar constant, that is, the incoming radiation measured outside the atmosphere, 
is about 1361 W/m2, so the most commonly used unit for the solar radiation is watt per square metre 
(W/m2). Of course, Equations 8.5 and 8.6 do not consider the cloud cover. Figure 8.7a shows the pho-
toperiod computed with Equation 8.4, while (c) displays the trend of the instantaneous radiation at the 
same latitude and on the summer solstice. The shaded area in (c) represents the total daily radiation 
and coincides with the dot in (b). Equations 8.5 and 8.6 give the required radiation data, provided 
Lat = 43.7° N
Lat = 43.7° N
21 June Lat = 43.7° N
Inst. sol. rad.
(W/m2)
(c)
(b)
(a)
Jan
Feb
Mar
Apr
May
Jun
Jul
Aug
Sep
Oct
Nov
Dec
0.3
0.4
0.5
0.6
Calendar month
Jan
Feb
Mar
Apr
May
Jun
Jul
Aug
Sep
Oct
Nov
Dec
Calendar month
Photoperiod
0
5000
10,000
Daily sol. rad.
(Wh/m2)
0
500
1000
In = 6453.6162
0
3
6
9
12
15
18
21
24
Time of day (h)
Daily radiation pattern for 21 June
In = 6453.5616
Inst. sol. rad.
Total daily sol. rad.
Photoperiod for 21st June
0.7
Summer solstice
Winter solstice
FIGURE 8.7  Astronomical computation of photoperiod (a) through Equation 8.4 and solar radiation (b) for 
a given latitude (43.7° N) by fitting Equation 8.5 to the data provided by the ENEA Solar Energy computation 
web site (http://www.solaritaly.enea.it/CalcRggmmOrizz/Calcola1.php). The yellow-filled area shown in (c) 
represents the daily radiation pattern on the summer solstice, whereas the dotted line shows that its integral 
eventually equals the total daily radiation for that day (dot in b), within the tolerance of numerical integration. 
These graphs were obtained with the MATLAB script Go _ Sol _ Rad.m in the A _ ESA _ Matlab\
Exercises\Chapter _ 8\Sol _ Rad folder.

453
Analysis of Aquatic Ecosystems
that Equation 8.5 is calibrated for the location of interest. As noted, these equations do not consider 
light attenuation by the cloud cover, or by other factors that may attenuate the solar radiation actually 
reaching the surface. These correction factors may be introduced as a multiplicative factor. Their 
variability can be modelled as random series on the basis of statistical observations, following the 
method used in Section 3.3.4.1. for synthetizing the wind series in the Orbetello lagoon.
8.1.4  Photosynthesis Modelling
On a daily basis, the photosynthetic rate is a function of the incoming solar radiation provided by 
Equation 8.6. Terrestrial and aquatic plants have very different responses, with the former exhibit-
ing a monotonic response
	
ϕT
k
k
t
I t
I
I t
I
( ) =
( )
+
( )
(
)
/
/
1
2 	
(8.7)
while aquatic plants have their maximum photosynthetic rate confined to a range of radiation 
intensities
	
ϕA
s
I t
I
t
I t
I
e
s
( ) =
( ) ⋅
−( )
1
	
(8.8)
implying that photosynthesis is inhibited at high light intensities. The two shape parameters, Ik in 
Equation 8.7 and Is in Equation 8.8, have differing values and meanings and are species specific. 
These light response functions are shown in Figure 8.8. Equation 8.8 is, in principle, applicable to 
all kinds of aquatic plants, from phytoplankton (Steele, 1962; Bannister, 1974; Jassby and Platt, 
1976) to macrophytes (Lapointe et al., 1984).
The photosynthetic oxygen production can be integrated over the optical depth of the water body. 
In this operation, we should take into account the light attenuation down the water column, until a 
depth is reached (optical depth) defined as the depth zmax  where its intensity is too weak to sustain 
photosynthesis. The Beer–Lambert law is used to describe the light attenuation with the depth z 
from the water surface
	
I z
I
e
o
k
z
e
( ) =
⋅
−
⋅	
(8.9)
where ke is the attenuation factor, which may depend on both inert suspended material and vegeta-
tion density (self-shading). In the case of free floating vegetation, such as algae and phytoplankton, 
the total photosynthesis can be computed over the entire water column, from the surface to the 
0
10
15
Low-light plants
Intense-light plants
5
√2
1
0.0
0.2
0.4
0.6
0.8
1.0
φT (t)
Ik = 2.5
Is = 2.5 Is = 5
Ik = 5
0
(b)
(a)
10
20
5
0.0
0.2
0.4
0.6
0.8
1.0
φA (t)
15
I (W/m2)
I (W/m2)
FIGURE 8.8  Photosynthetic response to the solar radiation of terrestrial plants (a), described by Equation 
8.7, and of aquatic plants (b), described by Equation 8.8.

454
Environmental Systems Analysis with MATLAB®
optical depth zmax. Integrating the photosynthetic rate (8.8) over the optical depth and taking into 
account the light attenuation (8.9) yields
	
Φ t
I
t
I
e
e
dz
o
s
k
z
I
t
I
e
z
e
o
s
ke z
( ) =
( ) ⋅
×








−
⋅
−
( )⋅⋅−
⋅
∫
1
0
max
	
(8.10)
thus providing the total instantaneous photosynthesis
	
Φ t
k
e
e
e
I
t
I
e
I
t
I
o
s
ke z
o
s
( ) =
−








−
( )⋅
−
( )⋅
−
⋅
1
1
1
max
	
(8.11)
If we limit ourselves to considering the average daily radiation Im over the photoperiod f, Equation 8.11 
simplifies into
	
Φm
e
I
I
e
I
I
f
k
e
e
m
s
ke z
m
s
=
−






−
⋅
−
−
⋅
1
1
max
	
(8.12)
Numerical methods for the integration of photosynthesis can be found in Walsby (1997).
8.1.4.1  Temperature Limitation
Each aquatic species has an optimal range of temperatures, which can be approximated with one of 
the following expressions:
	
fT
T To
=
−
(
)
θ
	
(8.13)
	
f
T
T
a
T
o
b
=
+
−
(
)


1
1
	
(8.14)
Equation 8.13 is the typical Arrhenius temperature dependence θ 1 066
.
(
), while Equation 8.14 
defines a bell-shaped range of temperatures around the optimal value To, with a and b as shape 
parameters. At temperate latitudes the solar radiation is saturating, so the main limiting factor 
becomes the photoperiod f, and many species have a ‘window’ of optimal combinations of tempera-
ture and photoperiod, whose influence on growth can be described by the following function
	
f
c e
f
g f
fo
= −
+ ⋅
−
(
)
1
1
1
	
(8.15)
Combining Equation 8.14 with Equation 8.15, a joint temperature–photoperiod limiting function is 
obtained
	
f
T
T
a
c e
T p
o
b
g p
po
, =
+
−
(
)


×
−
+ ⋅




−
(
)
1
1
1
1
1
	
(8.16)
Considering the daily temperature and the photoperiod recorded at the Orbetello lagoon 
(see Figure 8.31) in 2002, Figure 8.9 is obtained, showing that the May–July period is the most 
favourable for the development of the algae and the macrophytes in the lagoon.

455
Analysis of Aquatic Ecosystems
8.1.4.2  Nutrients Limitation
Inorganic nitrogen and phosphorus limit the development of the aquatic vegetation, and various 
expressions of the Michaelis–Menten kind have been proposed to model this limitation, that is, with 
a saturation for large concentrations. The most commonly used expressions are
Minimum law:
	
ΦN
m
m
m
N
K
N
N
K
N
N
K
N
min
min
,
,
,
=
+
+
+




1
1
1
2
2
2

	
(8.17)
Product law:
	
ΦN
m
m
m
N
K
N
N
K
N
N
K
N
prod =
+
×
+
×
×
+
1
1
1
2
2
2

	
(8.18)
Harmonic mean law:
	
ΦN
m
m
m
N
K
N
N
K
N
N
K
N
harm
1
1
1
2
2
2
1
1
1
1
=
+
+
+
+
+
+

	
(8.19)
Combining the previous limiting terms yields the dynamics of photosynthesis, which can be 
expressed as the increase in chlorophyll-a Chl-a
(
) inside the primary biomass, from which the 
0
10
20
30
40
T (°C)
0.40
0.45
0.50
0.55
0.60
Photoperiod
Feb
Mar
Apr
May
Jun
Jul
Aug
Sep
Oct
Nov
Dec
Jan
0.0
0.2
0.4
0.6
0.8
1.0
Growth
limitation
Photoperiod
Temperature
Growth factor
(a)
(b)
(c)
FIGURE 8.9  Combined effect of temperature and photoperiod, according to Equation 8.16, in determining 
the joint growth factor. The coloured bands indicate the optimal ranges for temperature (a) and photoperiod (b). 
Their combined effect is shown in (c), where the shaded area indicates the most favourable combination. 
The data refer to the year 2002 in the Orbetello lagoon.

456
Environmental Systems Analysis with MATLAB®
carbon growth rate and the oxygen production rate can be deduced. Approximately, the average 
ratio αo
(
) of organic matter (OM) to Chl-a is of the order of 145 mg OM dry weight per mg Chl-a 
(Cole and Wells, 2015), and the oxygen production α1
(
) and uptake for respiration α2
(
) are of the 
order of 1.4–1.8 and 1.6–2.3, respectively (Brown and Barnwell, 1987). Consequently, the basic 
Chl-a dynamics can be written as
	
d
dt
k
t
f
f
k
g
A
T
p
N
a
Chl
Chl
growth
decay
=
⋅
( )⋅
⋅
⋅
−
⋅
ϕ
Φ
	
(8.20)
which translates into the OM dynamics
	
dA
dt
k
t
f
f
k
o
g
A
T
p
N
o
a
=
⋅
⋅
( )⋅
⋅
⋅
−
⋅
⋅
α
ϕ
α
Φ
growth
decayChl 	
(8.21)
and into the DO dynamics
	
dS
dt
S
S
k
t
f
f
o
o
o
o
g
A
T
p
N
=
−
(
) +
⋅
( )⋅
⋅
⋅
Kr
sat
re-aeration
photo
α α
ϕ
1.
.
Φ
synthesis
CBOD and SOD
oxidation
algal respi
Chl
−
( )
−
⋅
⋅
R t
k
o
a
α α
2.
ration
	
(8.22)
8.2  A SHORT-TERM OXYGEN DYNAMICAL BALANCE
The three factors controlling photosynthesis in Equation 8.20 operate on widely differing time-
scales, and their influence will be examined in later sections of this chapter. While the temperature 
influence is predominantly seasonal and the nutrients operate on a monthly to weekly time-scale, 
the solar radiation determines the daily fluctuations in DO, which is the most important supply 
term, at least during the spring and summer seasons. In this section, we are going to develop and 
test a short-term (daily) oxygen balance that can be set up by considering only the influence of the 
solar radiation and assuming that the other factors (nutrients and temperature) remain constant over 
a daily time horizon.
Figure 8.10 illustrates this point by showing the large day DO swings due to daytime photosyn-
thesis that are frequently observed in rivers during summer, as analysed in Marsili-Libelli (1991). 
The fact that the DO exceeds the saturation value during the time of maximal solar radiation is 
due to photosynthesis, which produced pure oxygen, while the saturation is referred to the air gas 
mixture, hence DO concentrations above the saturation value are frequently observed during the 
light hours. During these periods, oxygen production is greater than its consumption (P > R), while 
the reverse is true during the night and low-light hours, when photosynthesis is weak or absent, but 
respiration continues all the same (P < R). A simple model can now be proposed to describe the 
daily DO fluctuations, considering the river reach as a CSTR whose oxygen balance can be written 
from Equation 8.22 in a simpler form
	
dS
dt
K
S
C
a I t
I
e
R
o
r
o
s
I t
I
t
s
=
−
(
) +
−
−
sat
( )
( )
1
	
(8.23)
where the first term represents the oxygen transfer rate from the atmosphere, and the second term is 
the photosynthetic oxygen production rate. The last term Rt
(
)  is representative of all the respiration 
processes, including algae respiration, carbonaceous biochemical oxygen demand (CBOD) oxida-
tion and SOD. Although the equivalence coefficient a
o
=
⋅
(
)
α
α1  between photosynthesis and oxy-
gen production rate is, in principle, known, its variability with the prevailing algal species and the 
environmental conditions suggests estimating it from the data, rather than using literature ­values. 

457
Analysis of Aquatic Ecosystems
The same considerations apply to the other constants in Equation 8.23, such as the re-aeration 
coefficient Kr
(
) and the ‘knee radiation’ Is
(
). The global respiration rate Rt
(
) incorporates a large 
number of differing time-varying processes, but on the short time-scale it can be considered as a 
constant and estimated along with the other parameters. Therefore, Equation 8.23 is a typical case 
of a simple model whose validity heavily depends on a robust identification. This will be demon-
strated along the guidelines outlined in Chapter 2. First, the error functional is defined as follows:
	
E
S
k
S
k
o
o
k
=
( ) −
( )
(
)
=∑
mod
obs
2
1
24
	
(8.24)
where:
So
mod are the hourly DO values obtained from the model
So
obs are the corresponding observations
Then, the estimation problem consists of minimizing this error functional with respect to the four 
parameters, that is,
	
min
,
, ,
K
R a I
r
t
s E
(
)
	
(8.25)
Before undertaking the actual minimization of the functional (8.24), the parameter sensitivity, both 
static and dynamical, will be considered, and after the optimal parameters have been obtained, a 
validation with the regression line F-test will follow. The data from two consecutive days (3 and 
4 August 2006) were considered, collected by the regional environmental authority (ARPAT) in 
the Arno River upstream of the city of Florence. The first day was used for the calibration, and the 
following day for the validation. First, the static sensitivities, shown in Figure 8.11, were computed 
and did not reveal any critical situation, because all the parameters appear to have regular sensi-
tivity plots. Then, the trajectory sensitivities were computed (Figure 8.12), selecting an incremen-
tal perturbation δ = 0 001
.
. The maximal sensitivity intervals, highlighted by the shaded areas, are 
almost all located in the central daytime hours, save for the re-aeration coefficient Kr, which has a 
5.5
6.5
7.5
8.5
9.5
10.5
11.5
0
1
2
3
4
5
6
DO (mg/l)
P > R
P < R
7
Time (d)
So
So
sat
FIGURE 8.10  A week-long record of diurnal DO fluctuations in the Arno River upstream of the city of 
Florence during the last week of August 2006. During the daytime, the photosynthetic oxygen production 
drives the DO concentration well above the saturation level, whose value varies as a consequence of the tem-
perature variations. In these conditions, production (P) prevails over respiration (R), while during the night 
hours, the reverse is true (P < R).

458
Environmental Systems Analysis with MATLAB®
0.1
0.2
0.3
0.4
0.5
0.6
0
50
100
150
E
0.5
1.0
1.5
2.0
2.5
0
20
40
60
80
100
E
1
2
3
4
5
0
5
10
15
20
25
30
E
1000
2000
3000
4000
5000
0
10
20
30
40
50
E
Kr
Rt
Is
a
FIGURE 8.11  Static sensitivity of the model parameters in Equation 8.23. These graphs were obtained with 
the MATLAB script Go _ River _ Resp.m in the ESA _ Matlab\Matlab _ Examples _ Home\
Chapter _ 8\River _ Respiration folder.
0
0
5
10
15
0
−5
0
5
10
0
0
5
10
0
6
12
18
24
−10−4
10−4
0
Time (h)
SKr
DO
DO
DO
DO
DO
SRt
DO
SIs
DO
Sa
DO
FIGURE 8.12  Trajectory sensitivity of the model parameters in Equation 8.23. The maximal sensitivity 
intervals are shaded. These graphs were obtained with the MATLAB script Go _ River _ Resp.m in the 
ESA _ Matlab\Matlab _ Examples _ Home\Chapter _ 8\River _ Respiration folder.

459
Analysis of Aquatic Ecosystems
maximum around dawn and another in the afternoon, because in these intervals it is comparatively 
the most important oxygen supply term. However, having hourly DO data covering the entire period, 
it was decided to use them all, though their efficiency in the estimation depends on the time of day.
The parameters were then ranked according to their sensitivities by computing the following 
quantity:
	
S
S
k
p
p
k
=
( )
(
)
=∑
DO
2
1
24
	
(8.26)
The sensitivity ranking is shown in Table 8.1, together with the estimated parameter values and their 
confidence intervals. It appears that the sensitivities are distributed along a wide range of values, 
with the re-aeration coefficient being the most sensitive and the ‘knee radiation’ the least sensitive. 
However, given the lack of critical aspects in the estimation, it was decided to estimate the whole 
lot, even if the number of data is only just sufficient. The Fisher Information Matrix (FIM) and the 
covariance matrix were computed to determine the parameters confidence intervals of Table 8.1, 
while Figure 8.13 shows the contours of the error functional (8.24) in the subspace of the two 
most sensitive parameters K
R
r
t
,
(
), whose 95% confidence region is indicated by the dotted contour. 
Finally, Figure 8.14 shows the calibration and validation results, together with the corresponding 
solar radiation data, representing the model input.
To validate the estimated parameters, a regression line F-test is performed, for both the calibra-
tion and the validation runs. The results, shown in Figure 8.15, confirm that in both cases there is 
no reason to reject the hypothesis that the model response is in agreement with the observed data.
8.3  ANALYSIS OF THE CIRCADIAN DO CYCLES BY 
WAVELET FILTERING AND FUZZY CLUSTERING
The validity of the previous DO model is limited to a few consecutive days, beyond which its sim-
plifications are no longer valid. Any attempt to extend its time horizon is doomed to failure because 
it would conflict with the assumption of considering respiration terms as constant and neglecting the 
external inputs, while that model considered the river reach as a virtual batch. Furthermore, with 
that model, little progress is made, both into identifying the causes that produce the fluctuations and 
in interpreting their ecological significance. In this section, we take a step further in the diagnostic 
aspect, considering the causes responsible for the DO daily swings, which represent an environ-
mental indicator. However, rather than attempting to build a dynamical model, this section will 
describe a method for diagnosing the state of the aquatic ecosystem from the observed DO varia-
tions, using a method based on wavelet denoising, described in Section 3.4, and fuzzy clustering, 
illustrated in Section 4.5. This study was carried out in the Orbetello lagoon, which is located on 
Italy’s west coast, along the Tyrrhenian sea, and consists of two shallow coastal ponds with a com-
bined surface of approximately 27 km2 and an average depth of 1 m. Two water quality monitoring 
TABLE 8.1
Estimated Parameters of the DO Model (Equation 8.23)
Parameter
Units
Sensitivity Ranking
Estimated Value
Confidence Interval
Kr
1/h
34.6373
0.3446
±0.1397
Rt
mgO2/l h
13.0315
1.4402
±0.098782
a
mgO2/l h
3.8282
2.6408
±1.222
Is
W/m2
0.0024
   3244
±2.2538

460
Environmental Systems Analysis with MATLAB®
stations, indicated by the two circles in Figure 8.16, communicate hourly physico-chemical data to 
the Orbetello Lagoon Managerial Office headquarters.
Around 2003, a scientific committee was set up to study the lagoon ecosystem and take remedial 
actions to improve the deteriorating environmental quality caused by the accumulating nutrients in 
the sediment and ensuing eutrophication. The main problem in the Orbetello Lagoon is the control 
of the submersed vegetation, given the critical coexistence between macroalgae (Chaetomorpha 
linum, Cladophora vagabunda, Gracilaria verrucosa, Ulva rigida) and rooted macrophytes, mostly 
Ruppia maritima (de Biasi et al., 2003; Lenzi et al., 2003). Macroalgae are of epiphytic origin, but, 
after reaching their maturity, they float in dense mats and absorb a large quantity of nutrients, even-
tually producing sudden blooms that cause dystrophic crises (Park and Jaffé, 1996; Christian et al., 
1998; Azzoni et al., 2001; Zeng et al., 2006). In fact, when the macroalgae decompose after their 
bloom, the oxygen consumption due to their decomposition exceeds the photosynthetic production, 
and the imbalance may cause hypoxia or anoxia. The causes of the dystrophic crises are well under-
stood and documented (Christian et al., 1996; Azzoni et al., 2001; Melia et al., 2003; Nizzoli et al., 
2006; Giordani et al., 2009), and, by analysing the DO fluctuations, we are able to assess the quality 
of the ecosystem and predict possible dystrophic crises determined by an abnormally low DO level. 
Thus, the shape of the DO daily cycle contains important season-dependent ecological informa-
tion, which this method attempts to extract from noisy data. As we have seen, daytime DO has a 
well-defined afternoon peak due to photosynthesis, often well above the saturation level, because 
as explained in Sections 7.2.9 and 8.2, the DO saturation is referred to the oxygen percentage in the 
air (20.9%, see Equation 7.38), while photosynthesis produces pure oxygen. Thus, the saturation 
concentration may increase, as predicted by Equation 7.39, from about 9 to over 42 mg/l. When the 
growth phase ends, the fast anoxic decomposition enriches the sediment with reduced organic nitro-
gen (Christian et al., 1998). These reducing conditions can be detected by low, almost constant DO 
Kr
Rt
0.20
0.25
0.30
0.35
50
10
50
50
25
25
2.113
2.113
2.113
2.113
10
1
0.5
0.5
1
1
10
25
50
25
50
10
25
50
10
10
25
0.40
0.45
0.50
0.8
1.0
1.2
1.4
1.6
1.8
2.0
FIGURE 8.13  Contour of the error functional (8.24) for the two most sensitive parameters in Equation 
8.23. Its regular shape, together with the absence of local minima or of narrow valleys, rules out numerical 
problems for the Simplex search. The dotted contour line indicates the 95% confidence region of the estimated 
parameters. These graphs were obtained with the MATLAB script Go _ River _ Resp.m in the ESA _
Matlab\Matlab _ Examples _ Home\Chapter _ 8\River _ Respiration folder.

461
Analysis of Aquatic Ecosystems
4.0
4.5
5.0
5.5
6.0
6.5
7.0
7.5
8.0
0
6
12
18
24
DO (mg/l)
Time (h)
DO val. data
Model DO
4.5
5.0
5.5
6.0
6.5
7.0
7.5
8.0
8.5
DO (mg/l)
Time (h)
Model DO
DO cal. data
0
6
12
18
24
0
6
12
18
24
0
100
200
300
400
500
600
700
800
900
1000
Solar radiation (W/m2)
Solar radiation (W/m2)
(c)
Time (h)
0
6
12
18
24
0
100
200
300
400
500
600
700
800
900
1000
(d)
Time (h)
(a)
(b)
FIGURE 8.14  Calibration and validation of the parameters in Equation 8.23. The calibration data and the 
calibrated model response are shown in (a), while the input solar radiation for the same day is shown in 
(c). The same quantities for the validation data are shown in (b) and (d). These graphs were obtained with 
the MATLAB script Go _ River _ Resp.m in the ESA _ Matlab\Matlab _ Examples _ Home\
Chapter _ 8\River _ Respiration folder.
5
6
7
8
4.5
5.0
5.5
6.0
6.5
7.0
7.5
8.0
8.5
Data
4.5
5.0
5.5
6.0
6.5
7.0
7.5
8.0
Data
Model
F-stat. 0.0234 vs. Flim = of 3.4221
F-stat. 2.5815 vs. Flim = of 3.4221
(a)
5
6
7
8
Model
(b)
FIGURE 8.15  F-test for the calibration (a) and validation (b) data for the model (Equation 8.23). In both cases, the 
regression line F-test is passed. These graphs were obtained with the MATLAB script Go _ River _ Resp.m in 
the ESA _ Matlab\Matlab _ Examples _ Home\Chapter _ 8\River _ Respiration folder.

462
Environmental Systems Analysis with MATLAB®
and low daytime oxidation–reduction potential (ORP) in the water, which corresponds to near-zero 
or negative ORP at the sediment surface, as reported by Azzoni et al. (2001).
The analysis of the diel DO cycles is based on wavelet filtering and fuzzy clustering, as described 
in Marsili-Libelli and Arrigucci (2004). The reasons for applying this two-step procedure are the 
following:
	
1.	DO data are normally affected by noise in many ways, and a dyadic wavelet decomposi-
tion (Section 3.4.2), with its multi-scale property, can reveal data trends that other signal 
analyses can miss. It can also denoise the data without appreciable signal degradation 
by retaining low-frequency components, which are usually ecologically meaningful, and 
rejecting high-frequency disturbances.
	
2.	Once the basic patterns are isolated, the filtered data are sorted into a number of meaning-
ful behaviours through fuzzy clustering. In particular, the Fuzzy Maximum Likelihood 
Estimator (FMLE) algorithm (Section 4.5.9) is used for its variable metric and cluster 
volume adaptability.
Figure 8.17 shows the algorithm organization used to extract the relevant information from the DO 
daily cycles: first, the daily data are denoised by a dyadic wavelet decomposition, and then the rel-
evant features are extracted and clustered to determine the relevant prototypes. The correspondence 
between such prototypes and specific ecological conditions is then assessed.
8.3.1  Dyadic Decomposition Denoising
Recalling the notions explained in Section 3.4.4, the dyadic wavelet decomposition of a signal at 
the k level is fully represented by the coefficients of the Approximation cAk and of the Detail cDk. 
The latter contains most of the noise component, which adapts to the signal behaviour. Denoising 
can be obtained by limiting the details by thresholding, that is, compressing the coefficients with 
magnitude below the threshold towards zero. Then, the denoised signal is obtained by combining 
the original Approximation coefficients cAk and the modified Details cD cD
cDk
1
2
′
′
′
(
)
,
,
,

, as shown 
in Figure 3.32. The resulting signal is smooth enough to provide a reliable extraction of the three 
features defined in Figure 8.18. For this application, the Meyer wavelet was found to be the best 
Western
monitoring
station
Eastern
monitoring
station
Italy
Tuscany
Orbetello
lagoon
FIGURE 8.16  Location of the Orbetello lagoon, at the southern border of Tuscany (left). It is composed 
(right) of two communicating shallow coastal ponds.

463
Analysis of Aquatic Ecosystems
performer, and a level 2 decomposition proved sufficient to remove the unwanted noise without 
excessively decreasing the number of available data per cycle.
8.3.2  Diurnal DO Cycle Characterization
Some distinctive features must now be defined to characterize each daily DO cycle. The features’ 
selection must be parsimonious yet exhaustive at the same time, and after some trial and error the 
Features
extraction
FMLE
features
clustering
Cycle
features
Daily DO patterns
DO (mg/l)
DO (mg/l)
Time of day (h)
6
12
18
24
6
8
10
12
14
16
18
0
Time of day (h)
6
12
18
24
6
8
10
12
14
16
18
0
Classiﬁed DO patterns
Wavelet
decomposition
Classiﬁcation
Cluster 1
Cluster 2
Cluster 3
FIGURE 8.17  Algorithm organization to extract circadian patterns from the DO data in the Orbetello 
lagoon. The various daily DO data (top-left graph) are filtered by a dyadic wavelet decomposition, then the 
features describing each cycle are extracted and clustered by similarity, isolating significant patterns. The 
upper-right corner graph shows the various patterns, identified by differing line styles.
24
Time (h)
DO (mg/l)
6
12
18
α
DOmin
DOmax
Noisy data
Denoised
time-series
FIGURE 8.18  Features identifying the denoised DO daily cycle: the minimum and maximum DO value and 
the angle of the line connecting these extremes. The denoised signal is compared to the original noisy data.

464
Environmental Systems Analysis with MATLAB®
triplets of features illustrated in Figure 8.18, minimum DO DOmin
(
), maximum DO DOmax
(
), and 
the angle of the line connecting these two extremes α
( ), provided an efficient description of the 
daily DO cycle. After clustering the DO data, the corresponding temperature, pH and ORP patterns 
were associated to them for further processing.
8.3.2.1  Fuzzy Clustering
The triplets of data corresponding to the DO cycles were clustered using the FMLE algorithm, 
given its cluster volume adaptability. The optimal number of clusters (c = 3) was determined with 
the partition entropy criterion (Section 4.5.3.1), and the patterns that received a low membership, 
near the theoretical minimum of 1/3, to all the three clusters, were labelled as unclassified. Several 
years between 2000 and 2005 were analysed. As an example, Figure 8.19 shows the results for 
2001, where three clusters could classify the majority of the observed cycles, with the following 
characteristics:
•	 Cluster 1 groups typical late summer behaviours, where the DO takes almost any value 
with little diurnal variation. This behaviour is typical of a mature algal population, which 
is less sensitive to the solar radiation.
6
12
18
24
0
2
4
6
8
10
12
14
16
18
Time of day (h)
Cluster 3
6
12
18
24
0
2
4
6
8
10
12
14
16
18
Cluster 2
6
12
18
24
0
2
4
6
8
10
12
14
16
18
Cluster 1
DO (mg/l)
DO (mg/l)
DO (mg/l)
FIGURE 8.19  The DO pattern classification of the year 2001 produced three clusters, with definite seasonal 
characters.

465
Analysis of Aquatic Ecosystems
•	 Cluster 2 represents typical end-of-winter and spring situations, with very close cycles 
characterized by strong afternoon peak due to intense photosynthesis.
•	 Cluster 3 is typical of the winter situation, with low oxygen due to a declining and decay-
ing algal population.
•	 Unclustered cycles present none of the previous characteristics. They may occur almost 
randomly throughout the year, and may be caused by adverse weather conditions, which 
prevent the development of the full diel cycle.
Figure 8.20 shows the distribution of the three clusters, plus the unclustered data, over the year 
2001. It can be seen that there is a considerable match between the seasonality and each classified 
cluster, with the unclustered cycle distributed evenly throughout the year.
Repeating this procedure for the data collected during 2003, the entropy criterion indicates 
that four clusters are the best choice for these data, and the timeline of these patterns is shown in 
Figure 8.21. However, a closer look into cluster 2 reveals that a further partition is possible into 
clusters 2a and 2b.
As shown in Figure 8.22, this subpartition is obtained by clustering the ORP data that exhibit 
two differing patterns. This discrimination is particularly relevant because it isolates the pattern 
associated with a dystrophic crisis. This is characterized by very low daytime DO and large nega-
tive ORP, both indicative of strongly reducing chemical conditions at the sediment surface, which 
is conducive to nutrient release and subsequent eutrophication. The dystrophic patterns of DO and 
ORP during the crisis are shown in Figure 8.23, where the DO is very close to zero, and with almost 
no daytime rise, while the ORP has deep night time negative peaks.
8.4  EXTENDING THE SPATIAL–TEMPORAL VALIDITY 
OF DO MODELS
The two previous sections have considered the analysis of the diel DO variations from fundamen-
tally differing viewpoints. In Section 8.2, we have developed a simple dynamical model with a very 
limited time horizon, while in Section 8.3 the time horizon of the fluctuations was extended to the 
full yearly cycle and analysed from the pattern recognition viewpoint, but the dynamical nature of 
the fluctuation was disregarded. In this section, we shall attempt a more comprehensive description 
of the DO dynamics, reintroducing its dynamical nature in the short time-scale, and yet retaining 
the seasonal characterization of a long time horizon. The motivation for this study was the already-
mentioned environmental remediation project for the Orbetello lagoon, for which a complex eco-
logical model was developed (Giusti and Marsili-Libelli, 2005, 2006). This section summarizes the 
results presented in Giusti and Marsili-Libelli (2009) and explains how the short and long time-
scales can be combined in a bank of models with a fuzzy activation depending on the circumstances. 
1
2
3
Unclustered
data
01/01/01
15/03/01
27/05/01
08/08/01
20/10/01
31/12/01
Cluster no.
Year 2001 timeline
FIGURE 8.20  Seasonal distribution of the classified and unclassified patterns of Figure 8.19. The data that 
receive a membership to all clusters near to 1/3 are classified as ‘unclustered’.

466
Environmental Systems Analysis with MATLAB®
To some extent, this study complements and extends the previous case study of Section 8.3, in which 
the circadian DO fluctuations were just regarded as behavioural classes. Now the classification is 
made on models, rather than on behaviours, and we shall see that this has important implications for 
the model identification. The structure of the dynamical DO model describing the diel fluctuations 
as a function of the supply and consumption terms is shown in Figure 8.24, while its details can 
be found in the relevant publication (Giusti and Marsili-Libelli, 2009; Giusti et al., 2010). The DO 
module integrates into a comprehensive lagoon model, initially termed ‘LaguSoft 1.0’ (Giusti and 
Marsili-Libelli, 2005), and later enhanced into ‘LaguSoft 2.0’ (Giusti and Marsili-Libelli, 2006). 
Here, we use the integrated model shown in Figure 8.25, obtained by the integration of LaguSoft 
2.0, and the DO model of Figure 8.24, to explain the daily DO cycles on a yearly basis.
Using the hourly DO data collected in the years 2001–2004, the most representative daily pat-
terns were extracted with the same techniques described in the previous section, obtaining the four 
clusters of ephemeral parameters DO
DO
min
max
,
,α
(
) shown in Figure 8.26, together with their cen-
troids whose numerical values are listed in Table 8.2.
Using the DO patterns corresponding to the prototypical diel cycles, four models were identified, 
as shown in Figure 8.27.
In these models, all of the parameter values were drawn from the literature or from previously 
calibrated models, save for four parameters that were specifically calibrated for this application, 
as described in Giusti and Marsili-Libelli (2009). Now, the problem is how to blend these four 
models to find the best cycle approximation for any calendar day. The most obvious solution could 
be the fuzzy combination of all the model responses, according to the membership of the day with 
respect to the four clusters, but this approach produced disappointing results. A much better result 
was obtained, as described in Giusti and Marsili-Libelli (2009), by using a single model whose 
parameters are a fuzzy combination of the four prototypical parameter sets, weighted by the degree 
of activation of the corresponding cluster, as illustrated in Figure 8.28. A validation run of the DO 
model with fuzzy patched parameters is shown in Figure 8.29, where the model was tested against 
the observations in the most critical spring period. Between 1 and 3 June the data acquisition was 
disrupted by a DO probe failure, but the model still provided a consistent output.
Cluster 2b
Cluster 2a
1
2
3
4
5
Cluster no.
Unclustered
data
16/01/03
07/03/03
26/04/03
15/06/03
04/08/03
23/09/03
12/11/03
2a
2b
Dystrophic crisis
Subcluster no.
31/05/03
12/06/03
24/06/03
06/07/03
18/07/03
30/07/03
11/08/03
23/08/03
04/09/03
16/09/03
28/09/03
10/10/03
Year 2003 timeline
FIGURE 8.21  The timeline of the daily patterns during 2003. The inner structure of cluster 2 isolates the 
dystrophic crisis. The data which have a membership to all clusters near to 1/4 are classified as ‘unclustered’.

467
Analysis of Aquatic Ecosystems
The integrated DO model, thus calibrated and tested, was used to predict the DO concentrations 
over the lagoon, given the calendar day and the previously modelled synthetic solar radiation data. 
As an example, Figure 8.30 shows the DO spatial distribution at four differing days, considered suf-
ficiently representative of the four seasonal behaviours. Spring is confirmed as a highly transitional 
period, with clusters 3 and 4 being activated almost equally, whereas summer, autumn and winter 
are well represented by clusters 2, 4, and 1, respectively. In agreement with observations, summer 
has the lowest DO distribution, whereas winter has the highest, thanks to a diminished vegetation 
density and lower temperatures. In the eastern lagoon, the DO concentrations are usually lower, 
given the higher macroalgae concentration, but the widgeon grass prairie in the southern part pro-
duces a considerable oxygenation. In general, the DO-depleted areas as indicated by the model were 
confirmed by direct observations.
6
12
18
24
0
Cluster 2
2
4
6
8
10
12
14
16
18
DO (mg/l)
DO (mg/l)
Time of day (h)
6
12
18
24
Time of day (h)
Dystrophic crisis
Cluster 2b
Cluster 2b
Cluster 2b
6
12
18
24
0
2
4
6
8
10
12
Time (h)
6
12
18
24
Time (h)
6
12
18
24
Time (h)
6
12
18
24
Time (h)
6
12
18
24
Time (h)
6
12
18
24
Time (h)
Cluster 2a
0
Cluster 2a
5
10
15
20
25
30
35
Temp (°C)
7.5
8.0
8.5
9.0
9.5
pH
DO (mg/l)
0
2
4
6
8
10
12
0
5
10
15
20
25
30
35
Temp (°C)
7.5
8.0
8.5
9.0
9.5
pH
Cluster 2a
−400
−200
0
200
400
ORP (mV)
Cluster 2b
Cluster 2a
Cluster 2a
Cluster 2b
FIGURE 8.22  The finer cluster structure of the 2003 data, revealing a subcluster (2b) containing the typical 
features of the dystrophic crisis, with strongly negative ORP and high pH.

468
Environmental Systems Analysis with MATLAB®
8.5  BEYOND STREETER & PHELPS: A WATER 
QUALITY MODEL CASE STUDY
The case study proposed in this section draws heavily from the notions explained in Chapter 2 
(parameters estimation, FIM), Chapter 6 (Flow dynamics, follow-the-plug), and Chapter 7 (reac-
tion kinetics, nitrogen and phosphorus dynamics in rivers). The discussion that follows is a résumé 
of the material presented in Marsili-Libelli and Giusti (2008). The pioneering S&P model consid-
ered in the previous chapters is a very effective pedagogical tool to introduce the concepts of river 
POM
DOM
Denitriﬁcation
DO
Nitriﬁcation
Reaeration
SOD
Submerged
vegetation
Solar radiation
Temperature
Salinity
Photosynthesis
Hydrolysis
Oxidation
Organic matter decay
Organic nitrogen decay
DOM = Dissolved organic matter
POM = Particulate organic matter
SOD = Sediment oxygen demand
FIGURE 8.24  Structure of the dynamical DO module to reproduce the diel DO fluctuations in the Orbetello 
Lagoon: The DO dynamics has two supply terms (re-aeration and photosynthesis) and three consumption 
terms (nitrification, oxygen demand from DOM and SOD). (Reproduced with permission from Giusti, E. and 
Marsili-Libelli, S., Ecol. Model., 220, 2415–2426, 2009.)
0
5
10
DO (mg/l)
−500
0
500
ORP (mV)
2
4
6
8
10
12
13
11
9
7
5
3
1
ORP
DO
Time (d)
23 June 2003
4 July 2003
Start
End
FIGURE 8.23  Time portrait of the dystrophic crisis in the Orbetello lagoon at the end of June 2003, indi-
cated by the shaded area, whose density is proportional to the 2b cluster membership. The onset of the crisis 
is foretold by the lowering DO values, followed by the ORP plummeting to large negative values. The end 
of the episode is first indicated by a sharp ORP rising, followed by the sluggish DO increasing fluctuations. 
(Courtesy of the Orbetello Lagoon Scientific Committee, Grosseto, Italy.)

469
Analysis of Aquatic Ecosystems
quality illustrated in the previous chapters (Rinaldi et al., 1979). Furthermore, its structural simplic-
ity allows a quick and reliable identification of its parameters. On the other hand, it oversimplifies 
the reactions that determine the water quality in a river, and for this reason it has been superseded 
by more detailed models, which include not only the fate of carbonaceous substances, but also the 
kinetics of nutrients, the contribution of algae to DO balance through photosynthesis, and the fate 
of toxicants. The most comprehensive model of all these processes is the IWA River Model N. 1, 
RWQM1 (Reichert et al., 2001), which was produced by a task group set up by the International 
Water Association (IWA) along the same successful guidelines that resulted in the already cited 
activated sludge models (ASM) (Henze et al., 2000), described in Chapter 7. Subsequent studies 
were aimed at assessing the structural properties of RWQM1 and the identifiability of its parameters 
(Reichert and Vanrolleghem, 2001). Before RWQM1 was published, other public domain water 
quality models were made available by the United States Environmental Protection Agency (US 
EPA), such as QUAL2E (Brown and Barnwell, 1987), later improved to become QUAL2K (Chapra 
and Pelletier, 2003), and eventually QUAL2Kw (Pelletier et al., 2006), equipped with a parameter 
calibration functionality based on genetic algorithms, while a more general two-dimensional model 
DO
dynamics
• Compute sediment nutrient release
   
• Compute NH3 unionised fraction
• Compute advection/diffusion
• Compute SOD
Cell hourly
output
Cell daily
input
Cell daily
output
New cell
boundary
conditions
Velocity field
Environmental
conditions
LaguSoft 1.0
Update Manning
coefficients
• Import daily contribution by
   advection/diffusion
• Compute hourly evolution of cell
   dynamics
• Hourly time step increment
• Compute hourly DO balance
Hourly cell dynamics
Daily lagoon dynamics
• Bathymetry
• Manning coefficients
• Hydraulic boundary conditions
Swamp
• Seed dynamics
• Plant dynamics
• Seed germination
Widgeon grass
cellular automata
Boundary conditions
• Wind
• Climate
• Loadings
LaguSoft 2.0
• Compute solar radiation
• Compute photoperiod
• Account for seasonality
DO dynamics inputs
FIGURE 8.25  Integration between LaguSoft 2.0 (Giusti and Marsili-Libelli, 2006) and the DO dynamics 
of Figure 8.24 to develop the present DO cycle modelling. (Reproduced with permission from Giusti, E. and 
Marsili-Libelli, S., Ecol. Model., 220, 2415–2426, 2009.)

470
Environmental Systems Analysis with MATLAB®
with enhanced hydrodynamic and water quality capabilities has been released from the Portland 
State University and the US Army Corps of Engineers (Cole and Wells, 2015). AQUATOX (Clough, 
2014; Park and Clough, 2014) is a more specialized EPA software package dealing with toxic mate-
rials. It is a general ecological risk model that gives the combined fate and effects of toxic chemi-
cals, with the aid of an extensive internal library of chemical molecules, plants and animals. In this 
book, however, we strive to use MATLAB®/Simulink® as a tool for translating ideas into working 
computer codes, so we shall confine our development to this domain, while it is left to the reader to 
explore the vast and varied world of public domain water quality models just described.
While the QUAL2 model family is appropriate for rivers of considerable length and detailed 
ecological structure, an ad hoc approach may be preferable for smaller rivers, which pose specific 
problems due to data scarcity, lack of major investments as a consequence of their minor importance 
and the large number of diverse inputs, especially if they flow through densely populated areas. 
0
5
10
15
20
0
5
10
15
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
Cluster 1
Data
Centroid
Cluster 2
Data
Centroid
Cluster 3
Data
Centroid
α
Cluster 4
Data
Centroid
DOmin (mg/l)
DOmax (mg/l)
FIGURE 8.26  Four clusters of daily DO patterns were defined on the basis of the three DO features 
of Figure 8.18. The larger grey shapes indicate the cluster prototypes, whose numerical values are listed 
in Table  8.2. (Reproduced with permission from Giusti, E. and Marsili-Libelli, S., Ecol. Model., 220, 
­2415–2426, 2009.)
TABLE 8.2
Prototypical Values of Daily DO Patterns in 
the Orbetello Lagoon DO Model
Cluster
DOmin
DOmax
α
1
7.86
10.71
0.31345
2
2.88
6.61
0.45162
3
3.67
6.62
0.40291
4
1.16
2.65
0.08602
Source:	 Giusti, E. and Marsili-Libelli, S., Ecol. Model., 220, 
2415–2426, 2009.

471
Analysis of Aquatic Ecosystems
Furthermore, it is questionable whether model complexity always pays off in terms of prediction 
accuracy vis-à-vis the modelling effort, evaluated in terms of money and manpower to gather the 
data and develop the model (Pearl, 1978; Halfon, 1983; Lindenschmidt, 2006). For these reasons, it 
is difficult to adapt major water quality models, such as QUAL2 or RWQM1, which would require a 
considerable budget and data-gathering effort to minor river systems. This paragraph describes the 
development of a model to implement a water quality study in two small, but ecologically important, 
rivers in Tuscany (Italy), whose location is illustrated in Figure 8.31.
0
0
2
4
6
8
10
12
Time (h)
DO (mg/l)
24
6
12
18
Cluster 1
Average
data
Model
Cluster 2
Average
data
Model
Cluster 3
Average
data
Model
Cluster 4
Average
data
Model
FIGURE 8.27  Identification of the four prototypical DO models corresponding to the four prototypes 
of Figure  8.26. (Reproduced with permission from Giusti, E. and Marsili-Libelli, S., Ecol. Model., 220, 
2415–2426, 2009.)
DO
daily
data
FMLE
clustering
DO
daily
model
Degrees of
activation
Calibrated
parameter
sets
[ p1   p2   p3   p4 ]
Prototypes
[ C1   C2   C3   C4 ]
Diurnal solar radiation cycle
Temperature, Salinity
Fuzziﬁed
parameters
model
pˆ
[  μ1   μ2   μ3   μ4  ]
=
k = 1
4
ˆp
Σ μk
k = 1
4Σ pk ⋅ μk
DO(t)
FIGURE 8.28  The DO model is obtained by a fuzzy combination of the prototypical parameters, weighted 
by the degree of activation of the corresponding cluster in Table 8.2. (Reproduced with permission from 
Giusti, E. and Marsili-Libelli, S., Ecol. Model., 220, 2415–2426, 2009.)

472
Environmental Systems Analysis with MATLAB®
30/05/03
0
2
4
6
8
10
DO (mg/l)
01/06/03 02/06/03 03/06/03 04/06/03 05/06/03 06/06/03 07/06/03 08/06/03 09/06/03
31/05/03
Fuzzy cluster activation
Fuzzy Par
Data
Year 2003 timeline
Cluster
Sensor failure
C4
C3
C2
C1
FIGURE 8.29  DO model validation, including an episode of DO sensor failure. The upper boxes show the 
daily activation of the four prototypes of Table 8.2. (Reproduced with permission from Giusti, E. and Marsili-
Libelli, S., Ecol. Model., 220, 2415–2426, 2009.)
Autumn
0
1
2
3
4
5
6
Summer
0
0.5
1
1.5
2
2.5
3
3.5
4
4.5
Spring
0
1
2
3
4
5
6
DO (mg/l)
DO (mg/l)
DO (mg/l)
DO (mg/l)
Winter
0
1
2
3
4
5
6
7
8
C1
C2
C3
C4
C1
C2
C3
C4
C1
C2
C3
C4
C1
C2
C3
C4
FIGURE 8.30  DO distribution predicted by the integrated model shown in Figure 8.25. For each day in the 
example, the upper horizontal bars indicate the degree of activation of the prototypical behaviours, showing the 
good correspondence between clusters and seasons. The vertical bars show the scale of the DO concentration. 
(Reproduced with permission from Giusti, E. and Marsili-Libelli, S., Ecol. Model., 220, 2415–2426, 2009.)

473
Analysis of Aquatic Ecosystems
This study was partly supported by the regional environmental protection agency (ARPAT) in 
the context of a region-wide project of river water quality awareness, and the developed model is 
fully described elsewhere (Marsili-Libelli and Giusti, 2008). The study was based on an ad hoc 
data-collection campaign, for which the most effective sampling spots were selected by a prelimi-
nary sensitivity study. With the collected data, the model was then calibrated and further structural 
changes were made on the basis of the information acquired on the field, specifically regarding the 
parameter and distributed-inputs structuring. Thus, in developing this study, several notions treated 
in the previous chapters were used: the Streeter & Phelps model (Rinaldi et al., 1979) was the basis 
on which the actual model was built, sensitivity analysis was used to find the most efficient sam-
pling locations in terms estimation accuracy, the parameter estimation and validation techniques 
of Chapter 2 were used to determine the best model parameters, and finally a set of Monte Carlo 
simulations were run to test the model robustness, using the PEAS package (Checchi et al., 2007).
8.5.1  A Tale of Two Rivers
The two rivers considered in this study, Sieve and Ombrone, are both part of the Arno River system 
and have widely differing characteristics. Hydraulically, both rivers are subject to massive winter 
and autumn floods, while they reduce to almost a trickle during the summer months. In this period 
the river quality becomes critical and a water quality model is needed. The models were developed 
for typical low-flow conditions, which were determined by averaging the daily flows during the 
summer months to obtain a typical flow of 2.9 m3/s for the Sieve, and 1.7 m3/s for the Ombrone.
Leghorn
Pisa
Pistoia
Prato
Florence
Arezzo
Arno
Ombrone
Sieve
Rabatta
WWTP
Vicchio
WWTP
Baciacavallo
WWTP
Candeli
WWTP
Bilancino
Lake
Tyrrhenian sea
0
10
20
30
40
km
N
E
W
S
Italy
Tuscany
FIGURE 8.31  Location of the Ombrone and Sieve rivers, representing two of the main right bank tributaries 
to the Arno River, in Tuscany, outlined as a shaded area in the upper-left inset. (Reproduced with permission 
from Marsili-Libelli, S. and Giusti, E., Environ. Model. Softw., 23, 451–463, 2008.)

474
Environmental Systems Analysis with MATLAB®
8.5.1.1  Sieve Basin
The quality of the Sieve River is definitely the best in the Arno basin, and a great deal of efforts 
is being made to conserve its pristine conditions. The reach considered here extends from the 
upstream Bilancino reservoir down to the confluence with the Arno, for a total length of 47 km. 
The water released from the Bilancino reservoir, normally 3 m3/s, is meant to provide the minimum 
sustainable flow during the summer months, and to feed adequate water to the Florence potabili-
zation plant, placed at about 20 km downstream of the confluence into the Arno. The slope of the 
reach is less pronounced in the upstream part and increases in the final part. This, together with the 
major tributaries located in the downstream portion, makes the final part of the river much richer 
in flow than the upstream part. However, the increased depth in this portion counterbalances the 
higher flow, and no increase in re-aeration rate was observed. There are two wastewater treatment 
plants discharging into the Sieve River, located at Rabatta and downstream of Vicchio, as, shown 
in Figure 8.31, but many untreated discharges and nonpoint agricultural pollution sources, detected 
during this study, make a considerable contribution to the river pollution. In setting up the model, 
information about these sources was obtained through direct interviews with local municipal offi-
cers, or was estimated in the model calibration phase, as explained later. The river description in 
terms of characteristics and sources (point and nonpoint) is shown in Figure 8.32.
8.5.1.2  Ombrone Basin
Unlike the Sieve, the Ombrone River flows through a heavily industrialized area dominated by the 
textile centre of Prato and is subject to many discharges, some of which are untreated, in addition 
to the output of the major wastewater treatment works of Baciacavallo, with a capacity exceed-
ing 750,000 PE. A smaller wastewater treatment plant is located at Candeli, 3 km downstream of 
Baciacavallo, with a capacity of 5000 PE. The reach under study is 15 km in length and can be 
divided into two parts with widely differing characteristics. The upstream part, 10 km long, flows 
through a densely populated area, with artificial riverbanks and many pollution sources, whereas 
Sieve river
Nonpoint CBOD
Photosynthetic
oxygen
production
Nonpoint
NO3
Bilancino
reservoir
Dicomano
Ruﬁna
Vicchio
Untreated
point sources
NH4 + CBOD
Treated
point
source
Rabatta
WWTP
Vicchio
WWTP
0
5
10
15
20
25
30
35
40
45
50
Sampling points along the river (km)
Ponte ai Noci 
Castellina
Sagginale 
Vicchio 
Vicchio
WWTP
Forteto 
Dicomano
Stentatoio 
Colognole 
Rabatta
WWTP
FIGURE 8.32  Distribution of measuring points (upward arrows), point and nonpoint sources along the 
Sieve River. (Reproduced with permission from Marsili-Libelli, S. and Giusti, E., Environ. Model. Softw., 23, 
­451–463, 2008.)

475
Analysis of Aquatic Ecosystems
the downstream reach, of about 5 km, is relatively unspoiled, with densely vegetated riparian zones 
and sparse human settlements. In this reach, the photosynthetic activity is considerable, given the 
high nutrient content of the incoming water, and self-purification is very active. The river descrip-
tion, in terms of loadings and sampling stations, is shown in Figure 8.33.
8.5.2  Model Structure
The model is intended to describe the water quality along each river in a hydraulic steady-state 
condition, and therefore the locations along the river length are identified through their flow-times 
relative to the stationary dominant flow regime. In this condition, the quality variables along the 
river are referred to the physical location (length from the upstream end) for an easy visualization, 
but are related by the underlying ‘follow-the-plug’ assumption. Carbonaceous and nitrogenous sub-
stances are the main pollutants in both rivers, so the model includes the degradation of the CBOD 
and the two main nitrogen species: ammonium-N and nitrate-N. An important source term is given 
by the photosynthetic oxygen production, which is particularly strong in the downstream part of 
the Ombrone. A single general structure for the model was set up, and then adapted to the specific 
characteristics of the two rivers. In this way, the generality of the model and its flexibility can be 
appreciated. The model equations and the parameters’ structures are grouped in Table 8.3, while 
Table 8.4 indicates by a check mark ✓ which process in the block diagram of Figure 8.34 is included 
in each river model.
Furthermore, by comparing the model response to the data, it was concluded that sometimes a 
constant kinetics worked better than a structured one, and vice versa. To provide the best param-
etrization in each situation, a switching block was introduced, as in Figure 8.35, where the most 
suitable parametrization was activated, depending on the location along the river. This figure refers 
to the ammonium-N kinetics, for which a first-order reaction was found appropriate in the upstream 
part, while a Monod kinetics performed better in the downstream part. The value xs represents the 
downstream distance controlling the switching.
Ombrone river
Nonpoint CBOD and NO3
Photosynthetic oxygen production
Caserana
Untreated
nonpoint
source
Treated
point
source
Baciacavallo
WWTP
Candeli
WWTP
Sampling points along the river (km)
0
5
10
15
Molin N.
Molino 
Asse
Castelletti
Stazione
FIGURE 8.33  Distribution of measuring points (upward arrows), point and nonpoint sources along the Ombrone 
River, which presents a considerable photosynthetic oxygen production, shown as the lower box. (Reproduced 
with permission from Marsili-Libelli, S. and Giusti, E., Environ. Model. Softw., 23, 451–463, 2008.)

476
Environmental Systems Analysis with MATLAB®
TABLE 8.3
Processes and Structured Parameters Included in the Sieve–Ombrone River Water 
Quality Model
Dynamics
dB
dx
u x K
x B
B
x
b
d
= −
+
1
( )
( )
( )
d
dx
u x K
x
u x
K
K
a
al
f
NH
NH
NH
NH
4
4
4
4
1
1
= −
⋅
−
⋅
+
( )
( )
( ) δ
d
dx
u x K
x
u x
K
K
u x K
a
al
f
o
NO
NH
NO
NO
NO
3
4
3
3
3
1
1
1
1
=
⋅
−
−
(
)⋅
+
−
⋅
+
( )
( )
( )
( )
δ
NO3d x
( )
d
dx
u x K u
u x K
x B
u x
Y
Y
K
r
b
a
a
a
DO
DO
DO
sat
=
−
(
) −
−
−
(
)
1
1
1
4 57
( )
( )
( )
( )
( )
.
(xx
x
ph
)
( )
⋅
+
NH
DO
4
Sieve
Ombrone
K
x
K
K
x
K
x
a
a
sa
aa
( )
_max
=
+
>
<



NH
NH
4
4
21
21
K
x
K
f T
x
K
f T
x
a
a
a
( ) =
⋅
<
<
⋅
>


_ max
_ max
( ,
,
)
.
( ,
,
)
.
1
2
0
10 5
10 5
pH DO
pH DO

=
⋅+
+
⋅
−
−
−
f T
e
K
C
T x
pk
pH x
pH x
pK
os
T
( ,
,
)
( ( )
)
( )
( )
pH DO
DO
15
1
1 10
10
1
2
+




DO
K
x
K
x
x
x
b
bm
( ) =
⋅
<
≤
<
<
<
1 802
0
.
12.492
2.479
12.492
16.859
0.451
16.859
<



48.454
K
x
K
x
K
x
b
b
b
( ) =
<
<
>



1
2
0
10 5
10 5
.
.
K u
K
u x
r
c
( )
( )
.
=
3 6
Source:	 Marsili-Libelli, S. and Giusti, E., Environ. Model. Softw., 23, 451–463, 2008.
TABLE 8.4
Processes Included in Each Model
Process
Sieve
Ombrone
BOD degradation
✓
✓
BOD nonpoint source
✓
NO3-N nonpoint source
✓
Nitrification (first order)
✓
Nitrification (half-saturation)
✓
NH4-N assimilation by submerged vegetation
✓
NO3-N assimilation by submerged vegetation
✓
Denitrification
✓
✓
Re-aeration
✓
✓
Photosynthetic oxygen production
✓
✓
Source:	 Marsili-Libelli, S. and Giusti, E., Environ. Model. Softw., 23, 451–463, 2008.

477
Analysis of Aquatic Ecosystems
8.5.2.1  Analysis of the Reactive Terms
With reference to the diagram of Figure 8.34 and to Table 8.3, the reactive processes included 
in the model are degradation of dissolved carbonaceous substances, ammonium oxidation, algal 
uptake and denitrification and DO balance, including depletion by degradation and supply by physi-
cal re-aeration and photosynthetic production. Because the model is space-referenced through the 
‘follow-the-plug’ assumption, the variation of flow and velocity along the course was included in the 
model. Given the differing morphology of the two rivers, the general model of Table 8.3 had to be 
adapted to each river including the appropriate processes as shown in Table 8.4. To relate this model 
structure with the complexity grades introduced by Lindenschmidt (2006), the BOD was differenti-
ated between carbonaceous (CBOD) and nitrogenous components (NBOD), with a loose coupling 
between the DO-BOD cycle and the algae–nitrogen interaction. Phosphorus was not included in 
Submerged
vegetation
growth
Assimilation
Re-aeration
δ
1−δ
NH4
+
BOD
CO2
N2
DO
Bd
NO3d
Model variable
Metabolic process
Nonpoint
Sources
Distributed inputs
Direct implication
Indirect implication
Biodegradation
Nitriﬁcation
Nitrification
DOph
NO3
−
FIGURE 8.34  Water quality variables and transformation included in the river model structure. (Reproduced 
with permission from Marsili-Libelli, S. and Giusti, E., Environ. Model. Softw., 23, 451–463, 2008.)
Switch
−Ka_max/(Ksa + u[1])
Kaa
NH4
+
xs
+
−
Half-saturation
kinetics for x < xs
Linear kinetics
for x > xs
FIGURE 8.35  Mechanising a variable structure parameter in Simulink requires a switch block which routes 
either input to the output, depending on the sign of the central input. In this case, when this is negative, that is, 
x < xs, the half-saturation kinetics is used, while for x > xs this is replaced by the linear kinetics. xs represents 
the switching time, or rather the switching length, because the independent variable is downstream length.

478
Environmental Systems Analysis with MATLAB®
the model because, in both rivers, its concentration was too low to be observed and modelled reli-
ably. Furthermore, almost the entire algae population is composed of N-limited species, and its 
interaction with dissolved inorganic nitrogen is described by the preferential absorption coefficient 
d introduced by Brown and Barnwell (1987) in the QUAL2E model. The relatively simple model 
structure is partially offset by structuring some parameters as a function of the varying river mor-
phology. In fact, it was observed that only by relating some parameters to the river characteristics, 
a good data fit could be obtained. The main examples of this approach are the CBOD biodegrada-
tion rate Kb, which depends on the river characteristics (water flow, river bed morphology, depth), 
as pointed out by several studies (Thomann and Mueller, 1987; Chapra, 1997; Chapra and Pelletier, 
2003; Pelletier et al., 2006). In the model of Table 8.3, this parameter has a variable structure, 
depending on the location, and is implemented with a switching block, such as the one shown in 
Figure 8.35 for the kinetics of the ammonium-N oxidation, which varies between a first-order or a 
half-velocity kinetics depending on the river conditions. Furthermore, the photosynthetic oxygen 
production DOph x
( )  varies widely on a daily and seasonal basis, as we have seen in Sections 8.1.4 
and 8.2. Because this model has a spatial reference (x) originating from the flow-time steady-state 
assumption, Section 6.3.4, an average value will be identified for the photosynthetic term on the 
basis of in situ inspections to assess the level of vegetative development. All these structured 
parameters, in addition to requiring a careful study of the river morphology, introduce a large num-
ber of switching functions into the model, which not only increases its complexity but also makes 
its parameter estimation more difficult (Checchi and Marsili-Libelli, 2005; Checchi et al., 2007), 
as already pointed out in Chapter 2.
8.5.2.2  Introduction of the Nonpoint Pollution Sources
Detecting the effects of nonpoint sources can be a daunting task, involving indirect estimation of 
basin characteristics and land use, as shown by Azzellino et al. (2006). In this study, each point 
source is modelled by diluting the discharge with the upstream flow, and restarting the integration 
with the new initial conditions. Nonpoint sources of CBOD, NH4-N and the average photosynthetic 
oxygen production rate DOph x
( ) , which are very difficult to detect, were introduced as unknown 
piecewise constant inputs and estimated together with the other model parameters. This increases 
the difficulty of the parameter estimation and adversely affects the global identifiability by introduc-
ing even more switching functions. The pros and cons of introducing the point and nonpoint pollu-
tion sources into the estimation are discussed in Marsili-Libelli and Giusti (2008), while Heathwaite 
(2003) analyses the processes whereby nutrients are exported to the rivers and how effective and 
economically viable mitigation decisions can be made.
8.5.3  Parameter Estimation
The relatively simple model structure of Table 8.3 produces good results only if its parameters 
are accurately estimated. The techniques illustrated in Chapter 2 are applied here, starting with a 
sensitivity analysis, which has the double purpose of ranking the parameters according to their sen-
sitivity, and hence their expected estimation accuracy, and of selecting the most efficient sampling 
spots characterized by a high sensitivity. For the practical model identification, the PEAS software 
(Section 2.4.5) was used.
8.5.3.1  Sensitivity Analysis and Parameter Identifiability
The problem of selecting the best compromise in terms of data availability, computational complex-
ity, and model accuracy limits the number of parameters that can be reliably estimated. In this case, 
the problem is made more difficult by the need to include the unknown nonpoint sources as addi-
tional parameters. The selection of the identifiable parameter subset is a particularly relevant subject 
in environmental system identification, particularly in wastewater treatment models (Weijers and 
Vanrolleghem, 1997; Petersen, 2000; Dochain and Vanrolleghem, 2001; Brun et al., 2002; Gernaey 

479
Analysis of Aquatic Ecosystems
et al., 2004; De Pauw, 2005; Sin et al., 2005; Ruano et al., 2007). Almost all of these studies are 
based on trajectory sensitivity functions, and ultimately refer to the FIM, which can be used as a 
figure of merit to assess the identifiability of a parameter subset, and to design the best experiment, 
that is, sampling campaign planning, in terms of estimation accuracy (Fedorov, 1972; Atkinson 
and Donev, 1992; Versyck et al., 1998; Checchi and Marsili-Libelli, 2005). As already discussed 
in Chapter 2, maximizing the FIM implies minimizing the estimation error covariance matrix C, 
because C
F
=
−1 (Equation 2.81).
The identifiable parameter subset for this exercise was determined with a two-step procedure. 
First, the parameters were ranked according to their global sensitivity index, similar to other indexes 
already in use (Reichert and Vanrolleghem, 2001; De Pauw, 2005), and defined as
	
ξi
k
ij
k
N
j
q
p
N
S
i
n
=
(
)
=
=
= ∑
∑
1
1
2
1
1
,
,

	
(8.27)
where:
S
y
k
p
k
ij
j
i
= ∂
( )
∂
 is the jth output sensitivity with respect to the ith parameter computed at the kth 
sampling instant
np is the number of model parameters
N is the number of experimental data for the q output variables
The parameters of the model in Table 8.3 are then ranked in Table 8.5 according to their sensitivity 
scores, computed according to Equation 8.27.
TABLE 8.5
Sensitivity Scores of the Model Parameters for the Two Rivers Computed with Equation 8.27
River
Parameter
ξ
Sieve
Ksa
791 25
376 76
181 65
69 79
.
.
.
.






Core parameters
Ka_max
Kb
Ko
Bd
49.49
Nonpoint sources
NO3d
25.29
DOph
10.77
Kc
5.28
Literature or heuristic values
Kao
0.43
Ombrone
Ka_max 
313 68
198 46
150 98
44 61
.
.
.
.






Core parameters
Kb
Kal
Ko
DOph
42.38
Nonpoint source
Kc 
17.29
Literature or heuristic values
Kf 
13.68
Kos
11.12
Kao
4.90
Note:	 On the basis of the identifiability results shown in Figure 8.36 for the Sieve River and in Figure 8.37 for the Ombrone 
River, only the ‘core’ parameters and the nonpoint sources were actually calibrated. The other parameter values were 
either adapted from the literature, or obtained from direct sources.

480
Environmental Systems Analysis with MATLAB®
The second step in the development is to build a sequence of sensitivity matrices Sm
q m
∈
×

 lim-
ited to the first m parameters in the sensitivity ranking
	
S
y
p
y
p
y
p
y
p
y
p
y
p
y
p
y
p
m
m
m
q
q
=
∂
∂
∂
∂
∂
∂
∂
∂
∂
∂
∂
∂
∂
∂
∂
∂
1
1
1
2
1
2
1
2
2
2
1
2
…
…
…




∂
∂






















=
y
p
m
n
q
m
p
with
2,
,
…
	
(8.28)
from which a sequence of FIMs Fm
m m
∈
×

 of increasing order (m) are formed
	
F
S
Q
S
m
m
T
k
m
k
N
p
m
n
=
(
)
(
)
=
=∑
1
2
with
,
,
	
(8.29)
In this way, F2 considers the two most sensitive parameters, F3 considers the previous couple plus 
the third most sensitive parameter, and so on, until all the parameters have been included. The 
Optimal Experiment Design criteria A, E and mod E, defined in Table 8.6, are then applied to the 
FIM sequence F
F
2,
,

np
(
) to detect any significant changes in the indicators while the FIM order 
is increased.
Figure 8.36 shows the identifiability test for the Sieve River. As expected, as far as the core 
parameters only are considered, all the criteria of Table 8.6 remain almost constant at a safe value, 
but as soon as the nonpoint sources are added, they exhibit a considerable variation, denoting a 
significant degradation in the identification performance. The same behaviour is obtained for the 
Ombrone River, as shown in Figure 8.37.
8.5.3.2  Calibration Results
The set of estimated parameters are listed in Table 8.7 for the Sieve River, and in Table 8.8 for the 
Ombrone River.
Each table reports the estimated value of the parameter in the form, p±
(
)
σ p , with its con-
fidence intervals computed with Equation 2.89, which takes into account the limited number 
of experimental data. It can be seen in both tables that while the parameters are estimated 
with a relatively small confidence interval, denoting a high estimation accuracy, the nonpoint 
source estimates come with a fairly large confidence interval, as predicted by the identifiability 
indicators of Figures 8.36 and 8.37. Figures 8.38 and 8.39 compare the model output with the 
experimental observations, represented by its average and standard error, for DO/CBOD and 
NH4/NO3, respectively.
TABLE 8.6
Optimal Experiment Design Criteria Based on FIM (F)
Criteria
Method
Effect
A
min(tr F−1)
Minimization of the arithmetic mean of parameter errors
E
max(λmin)
Maximizes the minimum eigenvalues of F, which is proportional to the length 
of the largest axis of the confidence ellipsoid
mod E
min(λmax/λmin)
Minimizes the condition number of F

481
Analysis of Aquatic Ecosystems
2
3
4
5
6
7
8
9
10−20
10−15
10−10
10−5
100
105
1010
1015
1020
A
E
mod E
Core
parameters
Nonpoint
sources
np
OED criteria
FIGURE 8.36  Identifiability test for the Sieve River as a function of the number of estimated parameters np. 
The core parameters (Ksa, Ka_max, Kbm, Ko) are indexed from 1 to 4, whereas indexes from 5 to 7 refer to 
the ­nonpoint sources Bd, NO3d, DOph. (Reproduced with permission from Marsili-Libelli, S. and Giusti, E., 
Environ. Model. Softw., 23, 451–463, 2008.)
2
3
4
5
6
7
8
9
10−15
10−10
10−5
100
105
1010
1015
1020
A
E
mod E
Core
parameters
Nonpoint
source
np
OED criteria
FIGURE 8.37  Identifiability test for the Ombrone River as a function of the number of estimated parameters np. 
The core parameters (Ka_max, Kb, Kal, Ko) are indexed from 1 to 4, whereas index 5 refers to the nonpoint source 
DOph. In this case also, the introduction of nonpoint source identification makes the entire estimation more difficult. 
(Reproduced with permission from Marsili-Libelli, S. and Giusti, E., Environ. Model. Softw., 23, 451–463, 2008.)

482
Environmental Systems Analysis with MATLAB®
The thin grey lines are Monte Carlo model trajectories generated by perturbing the estimated 
parameter p with a value drawn from the Gaussian distribution with a standard deviation equal to 
the parameter confidence interval, that is, N
p
p,σ
(
). The same comparison for the Ombrone River 
is presented in Figure 8.40 for the DO/CBOD couple, and in Figure 8.41 for the nitrogen species. 
It is interesting to notice that, in both rivers, the family of perturbed trajectories never exceeds the 
measurement error bands.
TABLE 8.7
Calibrated Parameters of the Sieve River Model
Parameter 
Estimated Value and Monte Carlo 
Confidence Limits p±± σσp
Length (km)
Ksa
0.037 ± 0.032
0 < x < 48.4
Ka_max
0.048 ± 0.089
0 < x < 48.4
Kbm
0.029 ± 0.008
0 < x < 48.4
Ko
0.139 ± 0.073
0 < x < 48.4
Bd
0.321 ± 0.282
35 < x < 48.4
NO3d
0.385 ± 0.158
8.2 < x < 21.4
DOph
2.11 ± 0.281
0 < x < 10
Constant value
Reference
Ya
0.24
Brown and Barnwell (1987); Chapra (1997)
Kc
1.5
Thomann and Mueller (1987); Chapra (1997)
Kaa
0.075
Chapra (1997)
TABLE 8.8
Calibrated Parameters of the Ombrone River Model
Parameter 
Estimated Value and Monte Carlo 
Confidence Limits p±± σσp
Length (km)
Kb
0.109 ± 0.043
0 < x < 10.5
0.009 ± 0.001
10.5 < x < 14.6
Kal
0.512 ± 0.106
0 < x < 10.5
0.093 ± 0.092
10.5 < x < 14.6
Ka_max
0.117 ± 0.031
0 < x < 10.5
0.137 ± 0.064
10.5 < x < 14.6
Ko
0.117 ± 0.077
0 < x < 10.5
0.137 ± 0.093
10.5 < x < 14.6
DOph
1.656 ± 0.279
0 < x < 7.1
1.760 ± 0.684
7.1 < x < 10.4
3.847 ± 0.632
10.4 < x < 14.6
Constant value
Reference
Ya
0.24
Brown and Barnwell (1987); Chapra (1997)
Kf
0.026
Lindenschmidt (2006)
Kc
0.85 0 < x < 10.5
Thomann and Mueller (1987); Chapra (1997)
0.67 10.5 < x < 14.6
d
0.2
Brown and Barnwell (1987); Chapra (1997)
Ct
0.1
Jorgensen and Bendoricchio (2001)
pK1
5
Jorgensen and Bendoricchio (2001)
pK2
8.8
Jorgensen and Bendoricchio (2001)
Kos
1.34
Lindenschmidt (2006)

483
Analysis of Aquatic Ecosystems
0
5
10
15
20
25
30
35
40
45
50
0
2
4
6
8
10
12
14
Rabatta
WWTP
Vicchio
Vicchio
WWTP
Dicomano
Ruﬁna
CBOD
DO
Downstream distance (km)
mgO2 L−1
CBOD Data and error
DO Data and error
DOsat
Model CBOD
Model DO
FIGURE 8.38  Performance of the calibrated model for the Sieve River for DO and CBOD. The experimen-
tal data are represented by their mean (dot or square) and error (bar), while the model response is represented 
by the dotted/dashed lines. The thin grey lines represent Monte Carlo simulations generated with parameter 
values drawn from a Gaussian distribution N
p
p,σ2
(
). (Reproduced with permission from Marsili-Libelli, S. 
and Giusti, E., Environ. Model. Softw., 23, 451–463, 2008.)
0.0
0.5
1.0
1.5
2.0
2.5
3.0
3.5
Rabatta
WWTP
Vicchio
Vicchio
WWTP
Dicomano
Ruﬁna
0
5
10
15
20
25
30
35
40
45
50
0
Downstream distance (km)
mg NL−1
NH4 Data and error
NO3 Data and error
Model NH4
Model NO3
FIGURE 8.39  Performance of the calibrated model for the Sieve River for ammonium-N and nitrate-N. The 
experimental data are represented by their mean (dot or square) and error (bar), while the model response is 
represented by the dotted/dashed lines. The thin grey lines represent Monte Carlo simulations generated with 
parameter values drawn from a Gaussian distribution N
p
p,σ2
(
). (Reproduced with permission from Marsili-
Libelli, S. and Giusti, E., Environ. Model. Softw., 23, 451–463, 2008.)

484
Environmental Systems Analysis with MATLAB®
0
5
10
15
3
4
5
6
8
9
10
11
mg O2/L
Downstream distance (km)
7
CBOD
DO
DOsat
Baciacavallo
WWTP 
Candeli
WWTP 
CBOD Data and error
DO Data and error
DOsat
Model CBOD
Model DO
FIGURE 8.40  Performance of the calibrated model for the Ombrone River for DO and CBOD. The experi-
mental data are represented by their mean (dot or square) and error (bar), while the model response is rep-
resented by the dotted/dashed lines. The thin grey lines represent Monte Carlo simulations generated with 
parameter values drawn from a Gaussian distribution N
p
p,σ2
(
). (Reproduced with permission from Marsili-
Libelli, S. and Giusti, E., Environ. Model. Softw., 23, 451–463, 2008.)
0
5
10
15
0
1
2
3
4
5
6
mg N/L
Downstream distance (km)
NO3
NH4
Baciacavallo
WWTP
Candeli
WWTP 
NO3 Data and error
Model NH4
NH4 Data and error
Model NO3
FIGURE 8.41  Performance of the calibrated model for the Ombrone River for ammonium-N and nitrate-N. 
The experimental data are represented by their mean (dot or square) and error (bar), while the model response 
is represented by the dotted/dashed lines. The thin grey lines represent Monte Carlo simulations generated 
with parameter values drawn from a Gaussian distribution N
p
p,σ2
(
). (Reproduced with permission from 
Marsili-Libelli, S. and Giusti, E., Environ. Model. Softw., 23, 451–463, 2008.)

485
Analysis of Aquatic Ecosystems
8.5.3.3  Lessons to Be Drawn from the Exercise
Considering the Sieve River, while the DO/CBOD levels are satisfactory along the entire river 
length, the nitrogen behaviour requires some explanation. In the upstream part, the river flows 
through a cattle farming area, which explains the rising values of ammonium-N up to the Vicchio 
wastewater treatment plant (WWTP). Downstream of this point, the land use is predominantly agri-
cultural, and nitrate from fertilizers is predominant, while nitrate discharged by the small WWTPs 
is negligible. The Sieve River study was required (and funded) by the Regional Environmental 
Agency (ARPAT) to acquire a tool for the assessment of various management options. The results of 
the possible environmental actions are shown in Figure 8.42, which compares the various scenarios 
generated by introducing one hypothesis at a time. It is found that upgrading the Rabatta WWTP 
brings only a small, local contribution, while eliminating the unchecked nonpoint sources down-
stream of Dicomano would result in the most important improvement.
From the environmental viewpoint, there are two major differences between the Sieve and 
Ombrone. While the Sieve River flows through a basically unspoilt territory and receives very lim-
ited treated discharges, the Ombrone River is more exposed to organic pollution and receives a con-
siderable flow and load contribution from the major WWTP of Baciacavallo, which in the summer 
months makes up almost entirely for the river flowrate. The asset of this river, however, is the con-
siderable photosynthetic oxygen production of the downstream reach, which results in a fair quality 
improvement. The deep oxygen sag downstream of Baciacavallo is indicative of the major load 
discharged by this plant, but also of a strong river recovery due to the self-purification mechanisms.
8.6  ESTIMATION OF NUTRIENT BIOAVAILABILITY IN RIVERS
The case examined in this section draws heavily from the notions explained in Chapter 2 regard-
ing parameter estimation, while its aim is to determine the bioavailable fraction of nutrients in 
rivers. This is important for both water quality assessment and for understanding the cycling 
of nutrients in the aquatic ecosystem. In many ecological models of complex aquatic ecosys-
tems, the concentration of nutrients has been based on chemical analyses (Crispi et al., 1998; 
Kiirikki and Haapama, 1998; Jamu and Piedrahita, 2002; Arhonditsis and Brett, 2005; Kuo 
et al., 2006; Zhang and Jørgensen, 2005), but the difference between bulk concentration and its 
0
5
10
15
20
25
30
35
40
45
50
0
2
4
6
Rabatta
WWTP
Vicchio
Vicchio
WWTP
Dicomano
Ruﬁna
CBOD (mg O2 L−1)
Downstream distance (km)
Eliminating Dicomano untreated
point-source discharge
Eliminating nonpoint-source
CBOD discharge downstream
of Dicomano
Actual conditions
Rabatta WWTP upgrade
FIGURE 8.42  Scenarios generation on the basis of the calibrated model for the Sieve River. The effects 
of the various management decisions are clearly shown by the differing model behaviours. As expected, the 
largest improvement is obtained by eliminating the unchecked nonpoint sources in the downstream part of 
the river. (Reproduced with permission from Marsili-Libelli, S. and Giusti, E., Environ. Model. Softw., 23, 
451–463, 2008.)

486
Environmental Systems Analysis with MATLAB®
bioavailable fraction is often overlooked, though only the latter is relevant for the characteriza-
tion of water quality from a biological viewpoint. In fact, the biologically available fraction of 
nitrogen and phosphorus may be significantly lower than the gross chemically measured con-
centration of these elements, and it has a fundamental importance in terms of eutrophication 
and habitat assessment. This fraction cannot be determined by standard chemical analyses, but 
it requires a biological assay, which relates the nutrient abundance to the growth of a known 
microalgae species in a controlled environment. Selenastrum capricornutum, recently renamed 
Raphidocellis subcapitata, has been selected as the test organism for its widespread presence 
in natural streams and for its sensitivity to different nutrients. For this reason, this species has 
been extensively reported in the literature as a significant water quality indicator (Chiaudani and 
Vighi, 1976; Nyholm, 1978, 1985; Nyholm and Lingby, 1988). To relate the trophic potential of a 
river to the observed variations in the growth characteristics of S. capricornutum, the following 
method was developed:
	
1.	A growth model for the S. capricornutum was set up as a function of nutrient concentra-
tions. This model was then calibrated with laboratory data, growing several batches of pre-
viously starved algae with known initial nutrient concentrations. A sample calibration run 
of the Richards model, Section 5.1.4, against optical density data from a S. capricornutum 
in vitro batch is shown in Figure 8.43. The population carrying capacity was modelled by 
Equation 8.30 as a function of the nutrient initial concentration in the batch.
	
2.	The unknown bioavailable nutrient concentrations was inferred by growing new starved 
batches in river water samples until the carrying capacity was reached.
8.6.1  A Steady-State Model Relating S. capricornutum Growth to Nutrients
The controlled growth of microalgae has been extensively researched. Multispecies assays with 
organic nitrogen sources were considered (Elgavish et al., 1980; Berman and Chava, 1999), and 
0
50
100
150
200
250
0
0.05
0.1
Time (h)
Optical density
Richards model
Optical density data
FIGURE 8.43  Calibration of the Richards model, Section 5.1.4, with the optical density data relative to an 
in vitro batch of S. capricornutum. This calibration was obtained with the MATLAB script Selen _ Cal.m 
in the ESA _ Matlab\Exercises\Chapter _ 8\Selenastrum\Selen folder.

487
Analysis of Aquatic Ecosystems
the experimental conditions* are detailed in Marsili-Libelli et al. (1997). It was experimentally 
observed that a batch of S. capricornutum grown in a controlled medium fully develops in about 
14 days (300 h), following the Richards growth function as shown in Figure 8.43, and that the 
steady-state eventually reached depends on the initial nutrients concentration.
To calibrate the model, particularly its nutrient-limited carrying capacity, nine batches of previ-
ously starved S. capricornutum cells were grown in controlled conditions, and their number was 
related to the optical density of the medium as shown in Figure 8.44.
To model this double limitation mechanism a Liebig’s law was proposed (Nyholm and Lingby, 
1988; Sterner and Grover, 1998) consisting of a double Monod kinetics. This approach was initially 
tried, but resulted in poor fitting of the experimental data. Instead, the mathematical model which 
best described the relationship between steady-state algal density and initial nutrient concentration 
was the following
	
G
N
K
N
P
K
P
n
p
=
+
+
+
α
1
1
	
(8.30)
where N and P represent the nutrient concentrations (mg/l), and the constants α,
,
K
K
n
p
(
)  are to be 
estimated by minimizing the following error functional
	
E
K
K
G
i j
G
i j
G
i j
n
p
α,
,
,
,
,
mod
(
) =
(
) −
(
)
(
)






=
= ∑
∑
obs
obs
2
1
1
j
i
3
3
	
(8.31)
where Gobs are the observed cell densities of Table 8.9, inferred from the optical density according to 
the linear approximate relationship shown in Figure 8.44, and Gmod are the optical densities gener-
ated by Equation 8.30.
*	 The cooperation of the ARPAT Prato Provincial Laboratory is gratefully acknowledged.
4.5
4.0
3.5
3.0
2.5
2.0
1.5
1.0
0.5
0.0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
0.4
0.45
Data
Linear approximation
Second-order approx.
Optical density
Cell count × 106
FIGURE 8.44  The correspondence between cell count and optical density can be approximated with a linear 
relationship in a limited range of cell density.

488
Environmental Systems Analysis with MATLAB®
The indexes i j
,
(
) refer to the initial nutrient concentrations corresponding to the headings of 
Table  8.9. The estimated parameter values are listed in Table  8.10, and their cross-correlation 
matrix is
	
C =
−
−
1 00001
0 0276
0 2009
0 0276
1 0000
0 0768
0 2009
0 0768
1 000
.
.
.
.
.
.
.
.
.
0










	
(8.32)
showing that the cross-correlations are fairly small, thus confirming that the model (8.30) is not 
overparametrized. The surface of the observed cell density distribution as a function of the initial 
nutrients and its estimate according to Equation 8.31 are compared in Figure 8.45.
8.6.2  Estimation of the Bioavailable Nutrient Concentrations
The calibrated model (8.30) can now be used in reverse to determine the bioavailable frac-
tion of nitrogen and phosphorus in a water sample by observing the ultimate algal growth in 
that medium, from which the unknown bioavailable nutrient quantities are inferred. However, 
there is a mathematical snag, because the nonlinear equation (8.30) cannot be inverted to com-
pute two unknown quantities N
P
x
x
and
(
) from one observed quantity (algal final density). To 
make the problem mathematically determined, we adopted the following procedure: three more 
samples were generated from the initial water sample by adding to the raw water, containing 
unknown nutrient concentrations N
P
x
x
,
(
), either an increment of one nutrient (ΔP or ΔN) or 
the same increment of both (ΔP and ΔN) in separate batches. The steady-state cell densities 
G
i
i
obs,
,
,
=
(
)
0
3

 in these four conditions are related to the initial nutrient concentrations in 
the following way:
TABLE 8.9
Steady-State Cell Density (106 cell/ml) as a Function of Initial Nutrient 
Concentration
Nutrient Concentration
N = 0.22 (mg/l)
i = 1
N = 0.44 (mg/l)
i = 2
N = 0.88 (mg/l)
i = 3
P = 0.02 (mg/l)
j = 1
0.450
0.716
0.820
P = 0.04 (mg/l)
j = 2
0.442
0.922
1.186
P = 0.08 (mg/l)
j = 3
0.470
0.918
1.432
Note:	 The indexes i and j refer to the nutrient combinations in each batch.
TABLE 8.10
Estimated Values of the Model Parameters in Equation 8.30
Parameter
Units
Value and Confidence Interval
Kn
(mg/l)
5.62789 ± 0.107768
Kp
(mg/l)
0.168063 ± 0.0033893
α
–
1.50984 ± 0.0265657

489
Analysis of Aquatic Ecosystems
	
G
N
K
N
P
K
P
G
N
N
K
N
N
P
K
P
G
obs
x
n
x
x
p
x
obs
x
n
x
x
p
x
ob
o
=
+
+
+
=
+
+
+
+
+
1
1
1
1
1
1
1
2
∆
∆
s
x
n
x
x
p
x
obs
x
n
x
x
p
N
K
N
P
P
K
P
P
G
N
N
K
N
N
P
P
K
=
+
+
+
+
+
=
+
+
+
+
+
+
1
1
1
1
1
1
3
∆
∆
∆
∆
∆
P
P
x + ∆
	
(8.33)
These four values generate a unique four-edge polyhedron on the nonlinear growth surface of 
Equation 8.30, as shown in Figure 8.46.
The problem of finding the unknowns N
P
x
x
,
(
), now overdetermined by the four conditions of 
Equation 8.33, can be solved in the least-squares sense by minimizing the error functional
	
N
P
G
G
G
x
x
N P
i
i
i
i
,
arg min
,
(
) =
−






(
)
=∑
obs
obs
0
3
2
	
(8.34)
where the Gis are generated by the search algorithm initialized with a problem-compatible set of ini-
tial concentration N
P
x
x
,
(
). It is important to notice that the model parameters K
K
n
p
,
,α
(
)  are algal 
specific, so as far as S. capricornutum is used for the assay, there is no need to repeat step 1 and 
(1,1)
(2,1)
(3,1)
(1,2)
(2,2)
(3,2)
(1,3)
(2,3)
(3,3)
N limitation zone
P limitation zone
Cell density data
0.16
0.14
0.12
0.10
0.08
0.06
0.04
Cell/ml × 107
0.08
0.06
0.04
0.02
Phosphorus (mg/l)
Nitrogen (mg/l)
0.8
0.6
0.4
0.2
1.0
FIGURE 8.45  Calibration of the steady-state S. capricornutum development as a function of nutrient con-
centrations, as described by Equation 8.30. The numbers in parentheses refer to the entries of Table 8.9. The 
domain is clearly divided in two zones, where either N or P is the limiting nutrient.

490
Environmental Systems Analysis with MATLAB®
recalibrate the model, which can be directly applied to differing water samples, provided starved 
algal inoculum are used. A typical search pattern is shown in the contour map of Figure 8.47, where 
the minimum is correctly located by the simplex algorithm. The polyhedron obtained by differential 
addition of nutrients is shown as a shaded area.
G2
obs
G0
obs
G1
obs
G3
obs
0
0
0.05
0.10
0.00
0.05
0.10
0.15
0.20
0.2
0.4
0.6
Nitrogen (mg/l)
Phosphorus (mg/l)
Cell/ml × 107
0.8
1.0
FIGURE 8.46  The observed cell densities form a four-edge polyhedron on the nonlinear growth surface of 
Equation 8.30. This graph was obtained with the MATLAB script Go _ Selen.m in the ESA _ Matlab\
Matlab _ Examples _ Home\Chapter _ 8\Selenastrum folder.
0.1
0.01
0.02
0.03
0.04
0.05
0.06
0.07
0.08
0.09
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
N (mg/l)
P (mg/l)
Search points
Global minimum
FIGURE 8.47  Contour map of the error functional (Equation 8.34) and search pattern to estimate the 
unknown bioavailable nutrient concentrations Nx and Px. The shaded rectangle represents the polyhedron 
formed by the four samples defined by Equation 8.33. This graph was obtained with the MATLAB script Go_
Nutrients.m in the ESA _ Matlab\Matlab _ Examples _ Home\Chapter _ 8\Selenastrum 
folder.

491
Analysis of Aquatic Ecosystems
8.6.3  Field Application of the Method
The method just described was applied to the assessment of nutrient bioavailability along the course 
of the Arno River, using samples routinely taken by ARPAT for the normal water quality monitor-
ing. The samples were taken across the mouth of the main tributaries, as indicated by the circled 
numbers in Figure 8.48.
Points 1 and 2 refer to the most upstream tributary, the Chiana channel, an artificial water chan-
nel flowing through an area with intensive cattle farming. Points 3 and 4 are placed across the 
Bisenzio confluence and account for the loading generated by the textile district. Point 5 is located 
downstream of the Ombrone tributary, which is shortly downstream of the Bisenzio confluence, 
and carries the load from the Pistoia area, where a significant portion of pollution is generated by 
domestic and greenhouse farming. The last two points (6 and 7) straddle the Usciana confluence, the 
most downstream tributary, carrying pollution from the leather district. All the samples were taken 
on the same day during the summer low-flow conditions, and thus, given the high temperature and 
the low dilution, refer to a high-pollution situation.
From each sample, the associated triplet was obtained by adding 1 mg/l of nitrogen and 50 mg/l 
of phosphorus in bioavailable form. Algae were then grown in these media, and the final cell 
densities were recorded and used in the previous algorithm to determine the bioavailable nutrient 
concentrations, as shown in Table 8.11 and graphed in Figure 8.49, showing the major contribu-
tions of Bisenzio, Ombrone, and Usciana. The impact of the Chiana is rather limited, because 
it flows into the relatively unpolluted upstream part of the Arno, where self-purification is very 
active. The substantial nitrogen contribution from the Bisenzio tributary is later diluted with the 
flow coming from the Ombrone tributary, which, in turn, is rich in phosphorus. The cumulative 
Leghorn
Pistoia
Prato
Florence
Arezzo
Arno
Ombrone
Sieve
Bilancino
reservoir
Tyrrhenian sea
0
10
20
30
40
km
N
E
W
S
Chiana
Elsa
Era
7
6
5
4
3
2
1
Usciana
Pisa
Italy
Tuscany
Bisenzio
FIGURE 8.48  The Arno River and its tributaries. The sampling points for the bioavailable nutrients cam-
paign were selected upstream and downstream of the major confluences. The numbers refer to the locations 
listed in Table 8.11.

492
Environmental Systems Analysis with MATLAB®
effect along the stream, due to additional nonpoint pollution sources, is represented by the rela-
tively high value at point 6, further augmented by the nitrogen load delivered by the Usciana 
tributary.
8.7  MODELLING AN HORIZONTAL SUBSURFACE CONSTRUCTED WETLAND
The study illustrated in this section involves the basic notions of structural modelling treated in 
Chapter 1 and in Chapter 6 concerning the flow modelling. It also involves the model identification 
techniques explained in Chapter 2. The aim of this section is the development of a simple dynamical 
model for a horizontal subsurface constructed wetland (HSSCW). This type of wastewater treatment 
represents an important low-impact alternative to conventional wastewater treatment processes for 
low strength domestic sewage, or for tertiary treatment. The design of constructed wetlands has 
evolved from early empirical rules to advanced models, which try to explain the complexity of 
hydraulics in a porous medium combined with the many processes involved in pollution reduc-
tion (Kadlec and Wallace, 2009). Still, recent studies suggest that the interdependence between 
hydraulics and kinetics is so strong, and influenced by such a large number of factors, that even 
the early complex models (Wynn and Liehr, 2001; Mashauri and Kayombo, 2002; Langergraber, 
2003; Kincanon and McAnally, 2004) proved inadequate to fully explain the observed behav-
iours and provide a reliable estimation of their parameters. Only recently the numerical aspects 
of this complex man-made ecosystem were thoroughly addressed (Langergraber et  al., 2009a) 
0.00
1.00
2.00
3.00
4.00
5.00
6.00
7.00
8.00
9.00
0
20
40
60
80
100
120
140
River length (km)
Conc. (mg/l)
Nitrogen
Phosphorus*10
Chiana
Bisenzio
Ombrone
Usciana
1 2
3
4
5
6
7
4
5
6
7
FIGURE 8.49  Bioavailable nutrient concentrations along the Arno River. The numbers refer to the sampling 
locations shown in Table 8.11 and in Figure 8.48. The contribution of some tributaries is considerable.
TABLE 8.11
Estimation of Bioavailable Nutrients at the Sampling Points Shown in Figure 8.48
Sampling Point
Location
N (mg/l)
P (mg/l)
1
Upstream of Chiana
0.6267
1.6
2
Downstream of Chiana
0.6454
4.0
3
Upstream of Bisenzio
2.6263
23.1
4
Downstream of Bisenzio
7.7922
76.9
5
Downstream of Ombrone
2.9156
114.4
6
Upstream of Usciana
5.7252
59.2
7
Downstream of Usciana
8.4411
67.8

493
Analysis of Aquatic Ecosystems
and biokinetic models based on the ASM approach were proposed (Langergraber et al., 2009b; 
Pálfy and Langergraber, 2014). A comprehensive review of existing models was recently published 
(Meyer et al., 2015), while more details about the flow model described in this section can be found 
in Marsili-Libelli and Checchi (2005).
8.7.1  Hydraulic Model Identification
We are going to follow a different approach, and present a model with a very simple, but easily iden-
tifiable structure, to describe the hydraulics and carbon removal of HSSCW. The model structure 
proposed here is fully described in Marsili-Libelli and Checchi (2005) and extends the distributed 
parameters approach described in Chapter 6 as an extension of the tank-in-series model (Levenspiel, 
1972; Marsili-Libelli, 1997; Rousseau et al., 2004). Figure 8.50 shows the flow routing scheme used to 
model the horizontal subsurface flow in the porous media, while Table 8.12 lists the model equations.
TABLE 8.12
Model Equations for the Composite Flow Structure of Figure 8.50 
Component
Model Equations
Series branch, first CSTR, volume V1
dC
dt
F
V C
F
V C
1
1
1
1
=
−
in
Series branch, second CSTR, volume V1
dC
dt
F
V C
F
V C
2
1
1
1
2
=
−
Series branch, third CSTR, volume V1
dC
dt
F
V C
F
V C
3
1
2
1
3
=
−
First parallel branch, flow partition b, volume V2
dC
dt
bF
V C
bF
V C
4
2
3
2
4
=
−
Second parallel branch, flow partition (1–b), volume V3
dC
dt
b F
V
C
b F
V
C
5
3
3
3
5
1
1
=
−
(
)
−
−
(
)
Output dilution
C
bC
b C
* =
+
−
(
)
4
5
1
Plug-flow dead-time
C
t
C
t
out( )
*(
)
=
−δ
Source:	 Marsili-Libelli, S. and Checchi, N., Ecol. Model., 187, 201–218, 2005.
V2
F . b
F . (1 − b)
V1
V1
V1
V3
C1
C2
C3
C4
Cout
F
δ
C5
C*
F
Cin
Plug-Flow (PF)
FIGURE 8.50  Basic structure of the subsurface constructed wetland hydraulic model, consisting of a front chain 
of three CSTRs, followed by a split into two parallel branches, and a plug-flow section accounting for the dead-
time. (Reproduced with permission from Marsili-Libelli, S. and Checchi, N., Ecol. Model., 187, 201–218, 2005.)

494
Environmental Systems Analysis with MATLAB®
The flow model consists of a front chain of three CSTRs of equal volume V1, followed by two 
parallel branches of differing volumes V2 and V3, and a trailing plug-flow section to account for 
the input–output dead-time d. In diffusive reactors, the latter can still be defined as the time delay 
between a pulse injection and the rising edge of the output concentration (Marsili-Libelli, 1997), 
as discussed in Section 6.3.3.2. In this sense, dead-time should not be confused with hydraulic 
residence time as it is normally defined (Levenspiel, 1972; Chazarenc et al., 2003; Persson and 
Wittgren, 2003). To estimate the parameters p = (
)
V V V b
1
2
3
,
,
, ,δ  of the model of Figure 8.50, the 
following error functional was defined
	
E
N
n
C
C
p
i
i
i
N
p
( ) =
−
−
(
)
( )
( )
=∑
1
2
1
out
obs
	
(8.35)
where:
C i
obs
( ) is the set of observed output tracer concentrations
C i
out
( ) is the corresponding model output
The shape of this error functional poses several numerical problems, shown in Figure 8.51.
The identification appears difficult because the parameter couples V V
1
2
,
(
) and V b
3,
(
) pres-
ent local minima (Figure 8.51a and c), so the simplex should be carefully initialized within the 
domain of attraction of the global minimum. A further problem is represented in Figure 8.51b by 
0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
V2
V1
Local minimum
Global minimum
(a)
V2
V3
b
0
0.5
1
1.5
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
1.1
1.2
Global minimum
Horizontal trough
(b)
1
1.5
2
2.5
3
3.5
4
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
1.1
1.2
Local minimum
Global minimum
b
(c)
FIGURE 8.51  Contours of the error surface for estimating the parameters of the wetland flow structure of 
Figure 8.50. The estimation is made difficult by the presence of local minima (a and c) and a long horizontal 
trough (b) representing an indeterminate region of convergence. The location of the global minimum is indi-
cated by the dot. (Reproduced with permission from Marsili-Libelli, S. and Checchi, N., Ecol. Model., 187, 
201–218, 2005.)

495
Analysis of Aquatic Ecosystems
the horizontal trough in the V b
2,
(
) subspace, where the search could be impaired by the lack of 
gradient. This is a consequence of the obvious fact that diverting the entire flow to V3 (b = 1) makes 
the model insensitive to V2. This behaviour, however, is not symmetrical between V2 and V3, because 
V3 is the dominant branch. This problem can be avoided by a proper simplex initialization. The 
agreement between the tracer data and the hydraulic model of Figure 8.50 and Table 8.12 is shown 
in Figure 8.52.
8.7.2  Pollution Abatement Model
In the subsurface constructed wetlands, a rich microbial colony soon becomes established as a 
biofilm around the porous media and the root zone, providing a self-purification action and reduc-
ing the incoming polluting load (Werner and Kadlec, 1996; Brix, 1997; Werner and Kadlec, 2000; 
Kadlec, 2003; Kadlec and Wallace, 2009). The best kinetics to describe these purification pro-
cesses is still open to debate (Meyer et al., 2015) and should be decided on a case-by-case basis. 
In this example, two hypotheses have been tested, comparing a first-order and a Monod kinetics, 
as suggested by Mitchell and McNevin (2001), for the abatement of the carbonaceous substances, 
expressed as biodegradable COD. To augment the hydraulic model of Table 8.12 with the pollution 
abatement terms, a first-order or a Monod kinetics were added, assuming that no reaction occurred 
in the last stage plug-flow (PF). In this way, assuming that Ci is the COD concentration in the ith 
tank, the dynamics of each CSTR takes the form
	
First-order kinetics
Monod kineti
dC
dt
F
V C
F
V C
k C
i
i
i
i
i
i
i
i
=
−
−
−1
1
cs
dC
dt
F
V C
F
V C
RC
K
C
i
i
i
i
i
i
i
i
s
i
=
−
−
+
−1
	
(8.36)
In the Monod kinetics case, R is the equivalent of the maximum growth rate μmax divided by the 
yield coefficient Y, that is, R
Y
= µmax/ . Being both unknown and difficult to estimate, they were 
lumped into a single parameter, as suggested by Dochain and Vanrolleghem (2001). A relation-
ship may be established between the two models (Equation 8.36) by considering that for COD 
0.0
0.2
0.4
0.6
0.8
1.0
1.2
1.4
1.6
1.8
2.0
0
20
40
60
80
100
120
140
Time (h)
Tracer conc. (mg/l)
Data
Model
FIGURE 8.52  Fitting the model of Table 8.12 and Figure 8.50 with experimental data using lithium as a 
tracer. (Reproduced with permission from Marsili-Libelli, S. and Checchi, N., Ecol. Model., 187, 201–218, 
2005.)

496
Environmental Systems Analysis with MATLAB®
concentrations well below the half-velocity constant C
K
i
s

(
), the Monod kinetics may be approx-
imated by a first-order kinetics with rate coefficient k
R Ks
1 
/
. However, given the already large 
number of parameters vis-à-vis the limited number of available data, the first-order kinetics looks 
attractive, given the difficulties of estimating the Monod parameters. In fact, looking at the percent-
age confidence intervals for the kinetic coefficients in Table 8.13, it can be concluded that a much 
more robust model is obtained using a first-order kinetic approximation.
8.7.3  Model Identification
Direct samples were collected at a constructed wetland site, with a surface of 12 m2 that was planted 
with Phragmites australis two years before the experiment. The filling medium had an average 
diameter of 8 mm and a porosity of 35%. More details can be found in Marsili-Libelli and Checchi 
(2005). The parameters of the kinetic models (Equation 8.36) were estimated by minimizing the 
error functional of Equation 8.35, and their confidence intervals were computed as percentages of 
the estimated values as
	
δ
δ
α
α
p
i
t
i i
p
p
i
t
N
n
i
H
N
n
p
p
FIM
FIM
( )
( , )
( )
exp
exp
= ±
×
= ±
−
−
−
−
1 2
1 2
100
C

CH
i
i i
p
( , )

×100
	
(8.37)
where
tN
np
exp −
−
1 2
α
 is the t-Student distribution for N
np
exp −
(
) degrees of freedom,
α is the confidence level, 
C is the covariance matrix, computed by either approximation (FIM or Hessian).
As explained in Section 2.4.3.3, comparing these two approximations, FIM and Hessian, provides 
an accuracy check, depending on their agreement or disagreement. It must be recalled that the FIM 
approximation CFIM is based on the sensitivity trajectories, whereas the Hessian approximation CH 
TABLE 8.13
Estimated Parameters and Confidence Intervals for the Constructed 
Wetland Model of Figure 8.50 and Tracer Data of Figure 8.52
Parameter and Units
p
δδpFIM (%)
δδpH (%)
Volume V1 (m3)
0.1226
±2.246
±2.271
Volume V2 (m3)
0.2263
±23.514
±25.049
Volume V3 (m3)
1.5545
±4.313
±4.313
Flow split b
0.6268
±7.881
±8.891
Dead time d (h)
5.98
–
–
Tracer mass Mo (g)
3.1011
–
–
Estimated tracer Mest (g)
3.1578
±1.789
±1.820
k1 (1/d)
0.0265
±48.792
±51.094
R (1/d)
204.9
±4521.179
±1525.342
Ks (mg/l)
7737.7
±4605.091
±1536.262

497
Analysis of Aquatic Ecosystems
depends on the shape of the error surface. For nonlinear systems, this may be heavily influenced 
by the ­curvature, reflecting the degree of nonlinearity in the parametrization (Bates and Watts, 
1988; Seber and Wild, 1989), so neglecting this term may have a significant effect. Comparing the 
confidence intervals obtained with CFIM or CH represents a way to assess the curvature effect, and 
hence the extremal nature of the estimated parameters p. It has been shown with practical examples 
(Marsili-Libelli et al., 2003; Checchi and Marsili-Libelli, 2005) that when the two intervals are 
very near, the curvature effect is negligible and the identification can be relied upon. Conversely, 
if the search terminates at a point differing from the minimum, where the curvature may cause the 
two approximations to disagree, this should be considered as a warning that the estimation is not 
reliable. In this example, the first-order kinetic estimation proved more reliable than the Monod 
kinetics, as the confidence intervals in Table 8.13 show. It is interesting to notice that the ratio of 
the Monod parameters R Ks
/
. /
.
.
=
=
204 9 7737 7
0 02648 is in excellent agreement with the calibrated 
value of k1 = 0.0265. This confirms the validity of the assumption that when the substrate is consid-
erably lower than the half-saturation constant, the first-order kinetics is a good approximation of the 
Monod kinetics. Furthermore, the inadequacy of the Monod kinetics is confirmed by the very high 
correlation between R and Ks, as shown by the very narrow and elongated shape of the confidence 
ellipses in Figure 8.53.
This confirms that the only quantity that can be reliably estimated is their ratio, equal to k1, 
rather than their separate values. The low value of the kinetic constant k1 is also in agreement with 
the con­clusion of Wynn and Liehr (2001), who reported heterotrophic maximum growth rates as 
three orders of magnitude smaller than the values used for conventional wastewater treatments. The 
model with the calibrated first-order kinetic is compared to the data in Figure 8.54.
8.8  ENVIRONMENTAL ASSESSMENT OF A COASTAL 
LAKE AND SURROUNDING WETLANDS
This section describes the environmental assessment of a particularly sensitive ecosystem in 
Tuscany: the Massaciuccoli Lake on the Tyrrhenian coast, central Italy and the surrounding areas, 
shown in Figure 8.55.
50
100
150
200
250
300
350
400
450
0.5
1.0
1.5
2.0
2.5
× 104
R (1/d)
KS (mg/l)
Exact surface curve 95%
Hessian ellipsoid 95%
FIGURE 8.53  Comparison of approximate ellipses in the (R, Ks) space for the identification of the Monod 
term of Equation 8.36. The cross indicates the estimated point, and the shape of the contours reveals an 
extremely high parameter correlation, indicating a poor identifiability of the Monod kinetics. For this reason, 
the first-order approximation was preferred.

498
Environmental Systems Analysis with MATLAB®
The Massaciuccoli Lake is a coastal lake receiving water from a web of draining channels from 
the surrounding cultivated plots, whose soil is mainly composed of peat. The main threats to this 
fragile ecosystem come from saltwater intrusion, subsidence and nonpoint agricultural pollution, 
resulting from a difficult coexistence between agricultural land use and environmental protection. 
The land subsidence around the lake and the considerable water usage for irrigation produce a 
severe water shortage and saltwater intrusion, as shown in the scheme of Figure 8.56.
0
50
100
150
200
250
0
50
100
150
200
250
300
Time (h)
COD (mg L−1)
CODin data
CODout data
CODout model
FIGURE 8.54  Performance of the fitted model obtained by augmenting the fitted hydraulic model of 
Table 8.12 with the first-order kinetics of Equation 8.36. (Reproduced with permission from Marsili-Libelli, 
S. and Checchi, N., Ecol. Model., 187, 201–218, 2005.)
Abstraction
point
Diversion
routing
channel
South side
pumping
North side
pumping
Bufalina
artiﬁcial
outﬂow
Burlamacca channel natural outﬂow
Tyrrhenian coast
Massaciuccoli
Lake
River Serchio
FIGURE 8.55  The Massaciuccoli Lake and surrounding wetlands. In the figure the main components of the 
water augmentation project are outlined: the diversion route from the Serchio River is outlined, together with 
the existing Burlamacca and Bufalina outgoing channels.

499
Analysis of Aquatic Ecosystems
To alleviate this water imbalance, a diversion from the nearby Serchio River is envisaged, as part 
of the environmental improvement scheme of the Massaciuccoli Lake area. The water flow around 
the Massaciuccoli Lake is shown in Figure 8.55, where the route of the possible diversion from the 
Serchio River is shown, together with the existing input and output channels and the pumping sta-
tion drawing water from the wetlands and delivering it back into the lake.
8.8.1  Modelling the Massaciuccoli Lake Water Balance
The main lake problem is the water conservation during the summer months, when the water level 
falls below the sea level. This, in addition to representing a water shortage for irrigation, favours the 
intrusion of saltwater along the Burlamacca channel bottom. The Serchio River abstraction is pri-
marily conceived to mitigate this level drop, but this model demonstrates that not all the water diverted 
from the river contributes to the volume enhancement because of infiltration, an effect that should 
be accounted for in defining the abstraction policy. Before defining the lake model, its inputs were 
synthesized by using the time-series techniques of Chapter 3, as shown in Figure 8.57, combining the 
water inflow from the ditches and pumps with the rainfall. More details and the rainfall/runoff model 
and the input flow synthesis can be found in the specific publications (Giusti et al., 2011a, b). The lake 
Lake
Drain
ditch
Wetland
Inﬁltration
Run-oﬀ
Cultivated
land
Evapo-
transpiration
Inﬁltration
Inﬁltration
Δh < 0
Rainfall
Saltwater
intrusion
FIGURE 8.56  The water imbalance between the lake and the surrounding areas. Because of the subsidence, 
the lake is at a higher level than the adjacent areas and a considerable amount of water is lost to infiltration. 
Because the lake level is often lower than the mean sea level, saltwater intrusion is also possible.
Hydrological
data
Drainage
ﬂow data
+
Runoﬀ
daily ﬂow
Drain
daily ﬂow
Rainfall-
Runoﬀ
model
Correlation
Envisioned
diversion scheme
Input ﬂow
time-series
Diverted ﬂow
Massaciuccoli Lake
water balance model
FIGURE 8.57  The input flow to the lake is modelled as a combination of rainfall and surface drain flow. The 
envisioned diversion is also accounted for. (Adapted with permission from Giusti et al., Water Sci. Technol., 
63, 2061–2070, 2011b.)

500
Environmental Systems Analysis with MATLAB®
volume model is described by the schematic diagram of Figure 8.58, where the evapotranspiration 
rate and the outflow rating curves (Burlamacca and Bufalina) were experimentally determined from 
local data provided by the Serchio River Water Authority.
The following flow balance can be written
	
dV
dt
Q
Q
Q
Q
Q
Q
Q
=
+
−
−
−
−
−
lake
in
Serchio
in
wdr
out
et
out
Bur
out
Buf
out
gw
out
h
V
S V
=
( )
	
(8.38)
where the right-hand terms have the following meanings:
V	 	
Lake volume (m3)
h	 	
Lake mean depth (m)
S V( )	
Lake variable surface (m2)
QBuf
out	
Bufalina outflow (m3/d)
Qlake
in 	
Lake surface inflow (m3/d)
Qet
out	
Gross evapotranspiration (m3/d)
QSerchio
in
	 Serchio diversion input (m3/d)
Qwdr
out	
Lake water withdrawal (m3/d)
QBur
out	
Burlamacca outflow (m3/d)
Qgw
out	
Groundwater infiltration (m3/d)
The groundwater seepage was modelled with the following equations:
	
Q
h
h
h
h
h
f d
gw
gw
out
gw
gw
for
otherwise
= −⋅
−
>



= −−⋅
( )
α
β
γ
0
	
(8.39)
where
Qgw
out is the estimated flow of lake water lost to groundwater seepage,
hgw is the depth of the underground water table,
f(d) is the function describing variable depth of the water table (Di Toro, 2001).
 
Groundwater
Lake
Refractory
sediment
hgw
Input
time-series
modelling
Evapotranspiration
Surface outflow
Burlamacca
Bufalina
Infiltration
Labile
sediment
hlake
hsea
FIGURE 8.58  Massaciuccoli Lake water balance modelling, using the input model of Figure 8.57 and con-
sidering the groundwater infiltration.

501
Analysis of Aquatic Ecosystems
The parameter α is the gauge factor for the groundwater head, β represents the offset value of the 
water table depth and γ is a scaling factor of the function f(d). These two dimensionless parameters 
modulate the seasonal variations of the hgw term. The Simulink model describing the water budget 
model of Equations 8.38 and 8.39 is shown in Figure 8.59. It was then calibrated by minimizing the 
sum of squared errors between the observed hobs
(
)  and simulated hsim
(
) lake levels observed daily 
in the years 2000–2006 with each year representing a separate calibration horizon and thus yielding 
a separate parameter set.
	
min
, , ,
,
α β γ Q
Q
i
i
i
h
h
in
out
obs
sim
(
)
=
−
(
)
∑
2
1
365
	
(8.40)
The calibrated model is compared to the observed lake levels throughout the year 2006 in Figure 8.60.
The parameters of the infiltration submodel of Equation 8.39 were assessed with the sensitivity 
analysis described in Marsili-Libelli and Giusti (2008), and they were then estimated with reason-
able accuracy from the level data ( hi
obs ) using the PEAS toolbox (Checchi et al., 2007). Table 8.14 
shows the estimation results with their 95% confidence intervals. These parameters showed con-
siderable variations over the years, reflecting the influence of climate changes on the groundwater 
seepage mechanism. As an example, 2003 was an exceptionally warm and dry year, and the cor-
responding α value is the highest of the set. The relation with the cumulative hydrograph is equally 
interesting, showing the saturation of β.
8.8.2  Using the Calibrated Model to Assess the Efficiency of the Diversion
The calibrated model was used to compare the present situation with the envisioned policy of rout-
ing part of the water from the Serchio River into the lake whenever the lake level falls below a 
prescribed threshold, now set at 10 cm below sea level. Instream flow considerations required that 
the river flow downstream of the abstraction should not be less than 6 m3/s; therefore, the maximum 
diverted flow was set at 3 m3/s. The simulation of Figure 8.61 shows that with this routing scheme 
the water imbalance would be greatly reduced and that the lake level would be maintained at the 
Surface scaling
+
+
−
−
−
−
−
Depth
surface
scaling
(ΣQ)/S
Groundwater level
Groundwater
Depth
Clock
Evapo-
transpiration
Bufalina rating curve
Burlamacca rating curve
Groundwater ﬂow
s
1
S
Qlake
in
Qwdr
out
QSerchio
in
Qet
out
QBuf
out
Qgw
out
hlake
hlake
hgw = − β − γ × ϕ(d)
hlake
hsea
Qgw
out= −α ×    h−hgw   × (h >hgw)
FIGURE 8.59  Simulink model of the Massaciuccoli Lake water balance.

502
Environmental Systems Analysis with MATLAB®
prescribed level, except for a short period in September when drought is most acute. However, as 
Figure 8.62 shows, much of the diverted water would be lost to infiltration in the summer months 
when the water table is lowest and the soil porosity highest, as a consequence of the increased head. 
So the routing policy should be carefully reviewed to limit the additional water loss.
8.9  A FISH HABITAT SUITABILITY ASSESSMENT BASED ON FUZZY LOGIC
In this section, we describe a method for assessing the environmental quality of the aquatic habitat 
based on synthetic hydraulic and water quality parameters. The method is meant to overcome the 
limitations of IFIM (Instream Flow Incremental Methodology, Bovee et al., 1998) based on the suit-
ability response of target fish species to river parameters through a fuzzy inference system (FIS), 
as described in Chapter 4. Through the use of simulated river conditions, a wide range of scenarios 
can be generated to detect potentially critical situations. The FIS was then adapted to produce a 
fuzzy index for the suitability of the habitat (FISH) by determining the range of admissible flows for 
Lake level w.r.t. sea level (m)
0.0
0.2
−0.2
−0.4
−0.6
0.4
0.6
0.8
Month
J
F
M
A
A
M
J
J
S
O
N
D
Mean sea level
Measured level
Simulated level
FIGURE 8.60  Calibration of the Massaciuccoli Lake water balance model with the level data of 2006. The 
water depletion during the summer month is quite evident. The level data were kindly provided by the Serchio 
River Water Authority.
TABLE 8.14
Calibrated Parameters of the Groundwater Seepage (Equation 
8.39) in the Massaciuccoli Lake Water Balance Model
Year
Estimated Values and 95% Confidence Interval
α × 10−4
β
γ
2000
1.9945 ± 0.0135
3.8182 ± 0.0182
0.3321 ± 0.0534
2001
4.5665 ± 0.0079
1.2401 ± 0.0173
0.0195 ± 0.0404
2002
4.8954 ± 0.0181
0.6719 ± 0.0163
0.4029 ± 0.0728
2003
5.5628 ± 0.0066
0.6811 ± 0.0163
0.2639 ± 0.0271
2004
4.8667 ± 0.0118
0.7177 ± 0.0146
0.2128 ± 0.0472
2005
3.9185 ± 0.0102
0.8953 ± 0.0173
0.2682 ± 0.0361
2006
3.8167 ± 0.0054
0.9037 ± 0.0192
0.3826 ± 0.0214

503
Analysis of Aquatic Ecosystems
which the habitat suitability is preserved to a prescribed degree. The approach and the main results 
will be described here, while the full description of the FISH method can be found in the specific 
publications (Marsili-Libelli et al., 2008a, 2013) whose results are described here.
The fuzzy approach to the definition of habitat suitability had been previously used (Young 
et al., 2000) for its ability to incorporate nonnumerical information into its rule base, often com-
plementing the scarcity of field data. Furthermore, the inherent uncertainty of ecological vari-
ables can be accounted for in the definition of rules and membership functions (Prato, 2007), 
and results can be easily grasped by nontechnical parties, such as decision makers and stake-
holders (Van Broekhoven et al., 2006). A fuzzy approach had already been used to develop the 
MesoCASiMiR method (Schneider et al., 2001), which was later applied at differing levels in the 
trophic chain, from macro-invertebrates to fish (Mouton et al., 2006, 2007, 2008; Fukuda and 
Hiramatsu, 2008; Fukuda, 2009; Fukuda et al., 2011). Habitat indicators based on fuzzy logic 
were also developed and compared with expert knowledge based systems (Marchini et al., 2009; 
Mouton et al., 2009), indicating that the combination of both approaches can improve model 
Period of severe
water imbalance
Reduced imbalance
due to the diversion
Simulated level without diversion
Mean sea level
Minimum allowable level
Simulated level with diversion
Lake level w.r.t. sea level (m)
0.0
0.2
−0.2
−0.4
−0.6
0.4
0.6
0.8
Month
J
F
M
A
A
M
J
J
S
O
N
D
FIGURE 8.61  Comparison of yearly lake level with (solid line) and without (dashed line) the Serchio River 
diversion, showing that this can greatly reduce the summer imbalance. 
Without diversion
With diversion
Inﬂitration ﬂow (m3/s)
0.4
0.5
0.3
0.2
0.1
0.0
0.6
0.7
0.8
Month
J
F
M
A
A
M
J
J
S
O
N
D
FIGURE 8.62  Comparison of seepage flow in the present situation (dotted line) and with the diversion. It 
can be seen that as a consequence of the increased head, the quantity of water lost by infiltration is increased.

504
Environmental Systems Analysis with MATLAB®
reliability, especially in site extrapolation of local results. However, the importance of expert 
judgment in deciding the final fuzzy model acceptability has recently been reaffirmed (Fukuda 
et al., 2011; Mouton et al., 2011; Wieland et al., 2011).
8.9.1  Development of the FISH Algorithm
The goal of this paper was to extend the habitat assessment from the analysis of an existing situ-
ation to a variety of hypothetical scenarios involving differing hydraulic and water quality data. 
This study cannot be compared to much more complex habitat suitability methods (Mouton et al., 
2009) or species distribution models (Fukuda et al., 2011), because it only aims to provide a simple 
instream flow analysis tool for river management. Given the scarce data availability often encoun-
tered in instream flow analysis, this method makes minimum use of field data and emphasizes the 
importance of the expert in supplementing the missing data, in specifying the habitat characteris-
tics, and in the interpretation of results.
The FISH algorithm is based on synthetic hydraulic and ecological parameters. Its aim is the 
generation of a whole paradigm of possible scenarios based on combinations of flow and quality 
variations obtained by simulation. Its aims are threefold:
•	 Incorporating expert-knowledge into the FIS as a complement to the available field data
•	 Extending the analysis to a combination of synthetic flow/quality scenarios generated by 
HEC-RAS (Brunner, 2010) and QUAL2K (Chapra and Pelletier, 2003; Pelletier et al., 2006), 
thus enabling the generation of a grid of scenarios in the flow/water quality 2D domain
•	 Providing integration into a Decision Support System for the management of regulated 
rivers by extending the old notion of hydraulic instream flow into a broader concept of 
ecological instream flow
The preliminary knowledge on which the FISH method is based is now considered. First, a suitable 
model must be available for the hydraulics and the quality of the river under study. Then, the target 
fish species must be selected. In the following, the algorithm will be applied to the Arno River, 
whose catchment is shown in Figure 8.63, and for which a HEC-RAS/QUAL2K hydraulic/quality 
model was developed and calibrated, as shown in Figure 8.64.
Greve
Main tributaries
Water abstraction (drinking water)
Major wastewater treatment plant
Reach boundary
Headwater
Downstream
boundary
Chiana
Ambra
Ciuﬀenna
Pesa
Ombrone Bisenzio
Elsa
Usciana
Era
Sieve
WWTP
Water
plant
Florence
WWTP
WWTP
WWTP
WWTP
FIGURE 8.63  Catchment of the Arno River, for which the FISH algorithm was applied. The portion of the 
river course considered in this study (thick line) was divided into 30 reaches. There are 11 main tributaries 
and 5 major wastewater treatment plants, together with 1 large water treatment plant providing drinking water 
to the city of Florence. (Reproduced with permission from Marsili-Libelli, S. et al., Environ. Model. Softw., 
41, 27–38, 2013.)

505
Analysis of Aquatic Ecosystems
Regarding the target species, Barbel (Barbus tyberinus) and European chub (E. chub) (Leuciscus 
cephalus) were selected, these being the most widespread autochthonous and reophylic species in 
the region. Their average response to the environmental parameters is described by the suitability 
curves shown in Figure 8.65. These were determined by combining literature studies (McMahon, 
1982; McMahon et al., 1984; Raleigh et al., 1986; Svobodova et al., 1993; Lamouroux and Capra, 
2002; Lamouroux and Souchon, 2002; Moir et al., 2005; Ayllón et al., 2012; Macura et al., 2012) with 
Flow (m3/s)
Flow data
Flow model
NH3 data
NH3 model
DO data
DO model
DO saturation
0
2
4
6
8
10
12
DO (mg/l)
2
3
4
5
6
7
8
9
10
NH3 (mg/l)
0.00
0.01
0.02
0.03
0.04
0.05
River length (km)
0
20
40
60
80
100
120
140
160
WWTP
discharge
Tributaries
Diversion
FIGURE 8.64  Calibration of the Arno River joint Hec-Ras/QUAL2Kw model for the typical summer low-
flow regime, used to generate the FISH scenarios. The variables used in this study (Flow, DO, and NH3) are 
shown with the arrows indicating the position of the main tributaries of the wastewater treatment plants, and of the 
diversion of the Florence potabilization plant. The calibration data were kindly provided by the regional envi-
ronmental protection authority (ARPAT). (Reproduced with permission from Marsili-Libelli, S. et al., Environ. 
Model. Softw., 41, 27–38, 2013.)

506
Environmental Systems Analysis with MATLAB®
direct observations obtained with the IFIM sampling protocol (Nocita et al., 2009). Furthermore, 
the suitability curves of Figure 8.65 are fuzzified into three classes of merit (low, medium, and high) 
using the membership functions shown in Figure 8.66.
8.9.2  The FISH Algorithm
With this preliminary information available (flow and quality river model and fuzzy suitability 
curves), the FISH algorithm can now be described. Its general structure is outlined in Figure 8.67. 
The fuzzy inference algorithm uses the knowledge described above to determine the composite 
FISH index through fuzzy inference (Algorithm 1). Critical reaches can then be detected via a low-
flow sensitivity analysis, for which Algorithm 2 performs an instream flow analysis. Algorithm 1 
consists of the four steps listed in Box 8.1.
The organization of Algorithm 1 is illustrated in Figure 8.68: the scenario information (river flow 
and quality) generates the antecedents of the FIS, while the consequent singletons are defined for 
both species as high (H = 1.0), middle high (MH = 0.77), middle (M = 0.5), middle low (ML = 0.33), 
and low (L = 0.1).
The inference rules were obtained by examining some direct fish abundance data in the summer 
low flow (SLF) and assuming that they represented a rough approximation of the habitat suitability. 
This comparison, shown in Figure 8.69, should by no means be considered a calibration in the strict 
sense, but was used nonetheless as a guideline to adjust the inference rules for the two species, 
together with expert judgement, eliminating the rules that were never activated by more than 2.5% 
0
2
4
6
8
10
12
0.0
0.2
0.4
0.6
0.8
1.0
DO (mg/l)
Barbel
E. chub
DOSI
0.00
0.01
0.02
0.03
0.04
0.05
0.0
0.2
0.4
0.6
0.8
1.0
NH3 (mg/l)
NH3,SI
0.0
0.5
1.0
1.5
0.0
0.2
0.4
0.6
0.8
1.0
U (m/s)
USI
0.0
0.5
1.0
1.5
2.0
2.5
0.0
0.2
0.4
0.6
0.8
1.0
H (m)
HSI
FIGURE 8.65  Suitability curves for the target species Barbel (Barbus tyberinus) and E. chub (Leuciscus 
cephalus). The suitability index for each parameter varies between 0 (totally unsuitable) and 1 (perfectly suit-
able). (Reproduced with permission from Marsili-Libelli, S. et al., Environ. Model. Softw., 41, 27–38, 2013.)

507
Analysis of Aquatic Ecosystems
DOM
DOH
Dissolved oxygen
Unionized ammonia
River velocity
River depth
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
DOSI
USI
HSI
NH3,SI
Degree of membership
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Degree of membership
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Degree of membership
0.0
0.5
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Degree of membership
DOL
UM
UH
UL
HM
HH
HL
NH3,M
NH3,H
NH3,L
FIGURE 8.66  Fuzzification of the suitability curves of Figure 8.65 into three membership functions (L, 
Low; M, Medium; H, High). (Reproduced with permission from Marsili-Libelli, S. et al., Environ. Model. 
Softw., 41, 27–38, 2013.)
Suitability
curves
HEC-RAS
Fuzzy
inference
system
FISH
Instream flow
analysis
Critical
transects
Algorithm 1: FISH index
Algorithm 2: Instream flow analysis
Low flow
sensitivity
Flow domain
Prior knowledge-base
(hydraulics, water quality, biology)
Suitability
fuzziﬁcation
River data
Water quality
knowledge base
DO
NH3
Velocity Depth
Hydraulic
knowledge base
Biological
knowledge base
Target
species
B. tyberinus
L. cephalus
QUAL2K
Quality domain
FIGURE 8.67  General outline of the FISH algorithm. The prior knowledge about the river hydraulics and 
ecology are used as input data to the suitability curves. Algorithm 1 computes the FISH index via the FIS, 
while Algorithm 2 performs an instream flow analysis based on the critical areas detected by Algorithm 1. 
(Reproduced with permission from Marsili-Libelli, S. et al., Environ. Model. Softw., 41, 27–38, 2013.)

508
Environmental Systems Analysis with MATLAB®
of the total, and to adjust the membership functions. After this pruning, the 14 rules were retained 
for the Barbel (Table 8.15), and 20 rules were defined for E. chub (Table 8.16).
8.9.3  Instream Flow Analysis with FISH
Instream flow analysis is a part of the IFIM (Bovee et al., 1998) that assesses the impact of flow 
alterations on stream habitat. We are now going to use FISH to detect reaches where the habitat 
suitability is critically affected by flow. We define the sustainable instream flow {Qinstream} as the 
BOX 8.1  STEPS OF ALGORITHM 1 IN THE FISH METHOD
•	 Step 1: Generate the synthetic hydraulic/quality data for the prescribed flows and 
reaches
•	 Step 2: Define a set of membership functions for the fuzzification of the suitability 
curves
•	 Step 3: Compute the individual fuzzy suitability responses
•	 Step 4: Process the suitability indexes through the fuzzy inferential system to obtain 
the FISH along all the reaches for each computed flow.
Sugeno fuzzy
inference rules
Suitability curves
Fuzziﬁcation
Sugeno
consequents
Water
quality
scenario
Antecedents
H
MH
ML
L
M
SI
DO
River
parameters
FISH
Step 1
Step 2
Step 3
Step 4
DOSI
μDOSI
USI
μUSI
HSI
μHSI
NH3,SI
μNH3,SI
FIGURE 8.68  Detailed organization of Algorithm 1 for computing the FISH index. Step 1 generates the 
river parameters; Step 2 produces the relative suitability indexes. Step 3 fuzzifies this information producing 
the antecedents of the Sugeno inferential system; Step 4 computes the FISH index on the basis of the avail-
able knowledge base. (Reproduced with permission from Marsili-Libelli, S. et al., Environ. Model. Softw., 41, 
27–38, 2013.)

509
Analysis of Aquatic Ecosystems
0
50
100
150
0.0
0.2
0.4
0.6
0.8
1.0
FISH
FISH
Obs. density
0.0
2.0
4.0
6.0
8.0
10.0
Obseved biomass density (g/m2)
Barbel
QSLF = 0.5 (m3/s)
E. chub
0
50
100
150
0.0
0.2
0.4
0.6
0.8
1.0
FISH
0.0
0.5
1.0
1.5
2.0
Obseved biomass density (g/m2)
River length (km)
QSLF = 0.5 (m3/s)
FISH
Obs. density
FIGURE 8.69  FISH computation (left scale) for the Arno River in the summer low-flow condition 
QSLF
3
m s
=
(
)
0 5.
. Some observed fish densities for the same conditions are shown for comparison (right 
scale). (Reproduced with permission from Marsili-Libelli, S. et al., Environ. Model. Softw., 41, 27–38, 2013.)
TABLE 8.15
Inferential Fuzzy Rules for the Barbel
1. 
If (DO is M) 
and (NH3 is H) 
and (U is M) 
and (H is L) 
then (S is ML)
2. 
If (DO is L)
and (NH3 is M)
and (U is M)
and (H is L) 
then (S is L)
3. 
If (DO is H)
and (NH3 is H)
and (U is M)
and (H is M) 
then (S is MH)
4.
If (DO is M)
and (NH3 is M)
and (U is H)
and (H is H) 
then (S is H)
5. 
If (DO is L)
and (NH3 is L)
and (U is M)
and (H is M) 
then (S is ML)
6. 
If (DO is M)
and (NH3 is M)
and (U is M)
and (H is H) 
then (S is MH)
7. 
If (DO is M)
and (NH3 is M)
and (U is M)
and (H is L) 
then (S is MH)
8. 
If (DO is M)
and (NH3 is H)
and (U is M)
and (H is M) 
then (S is MH)
9. 
If (DO is L)
and (NH3 is H)
and (U is L)
and (H is L) 
then (S is L)
10. 
If (DO is M)
and (NH3 is M)
and (U is H)
and (H is M) 
then (S is H)
11. 
If (DO is H)
and (NH3 is H)
and (U is H)
and (H is H) 
then (S is H)
12.
If (DO is H)
and (NH3 is H)
and (U is M)
and (H is H) 
then (S is MH)
13. 
If (DO is L)
and (NH3 is M)
and (U is L)
and (H is H) 
then (S is L)
14. 
If (DO is M)
and (NH3 is M)
and (U is M)
and (H is M) 
then (S is MH)
Source:	 Marsili-Libelli, S. et al., Environ. Model. Softw., 41, 27–38, 2013.

510
Environmental Systems Analysis with MATLAB®
flow range for which FISH remains above the fourth quartile (FISH75) of its statistical distribution, 
or above a minimum threshold (FISHmin), whichever is greater
	
Q
Q
instream
FISH
FISH
FISH
FISH
{
} =
>
(
) ∧
>
(
)


arg
min
75
	
(8.41)
Algorithm 2 develops along the five steps listed in Box 8.2. This second algorithm extends the 
capabilities of Algorithm 1 by determining the flow values between which the suitability never 
deteriorates below a set threshold. Repeated application of Algorithm 1 for a suitable set of flows, 
BOX 8.2  STEPS OF ALGORITHM 2 IN THE FISH METHOD
•	 Step 1: Select a critical reach based on FISH
•	 Step 2: Run the hydraulic water quality model for the entire flow set at the selected 
reach
•	 Step 3: Evaluate FISH, according to Algorithm 1, as a function of flow
•	 Step 4: Compute the FISH cumulative distribution as a function of flow and deter-
mine the lower FISH limits
•	 Step 5: Determine the instream inflow range {Qinstream}, according to Equation 8.41.
TABLE 8.16
Inferential Fuzzy Rules for the E. Chub
1. 
If (DO is H) 
and (NH3 is M)
and (U is M) 
and (H is H) 
then (S is H)
2. 
If (DO is H) 
and (NH3 is M) 
and (U is M) 
and (H is L) 
then (S is M)
3. 
If (DO is L) 
and (NH3 is H) 
and (U is M) 
and (H is L) 
then (S is ML)
4.
If (DO is H) 
and (NH3 is L) 
and (U is H) 
and (H is L) 
then (S is MH)
5. 
If (DO is H) 
and (NH3 is L) 
and (U is M) 
and (H is L) 
then (S is H)
6. 
If (DO is M) 
and (NH3 is L) 
and (U is M) 
and (H is L) 
then (S is ML)
7. 
If (DO is L) 
and (NH3 is M) 
and (U is M) 
and (H is L) 
then (S is L)
8. 
If (DO is H) 
and (NH3 is H) 
and (U is M) 
and (H is M) 
then (S is MH)
9. 
If (DO is M) 
and (NH3 is M) 
and (U is H) 
and (H is H) 
then (S is H)
10. 
If (DO is H) 
and (NH3 is M) 
and (U is L) 
and (H is L) 
then (S is ML)
11. 
If (DO is H) 
and (NH3 is H) 
and (U is H) 
and (H is L) 
then (S is ML)
12. 
If (DO is M) 
and (NH3 is M) 
and (U is M) 
and (H is H) 
then (S is MH)
13. 
If (DO is M) 
and (NH3 is M) 
and (U is L) 
and (H is M) 
then (S is MH)
14. 
If (DO is H) 
and (NH3 is M) 
and (U is M) 
and (H is M) 
then (S is ML)
15. 
If (DO is M) 
and (NH3 is H) 
and (U is M) 
and (H is M) 
then (S is MH)
16. 
If (DO is M) 
and (NH3 is M) 
and (U is H) 
and (H is M) 
then (S is H)
17. 
If (DO is H) 
and (NH3 is H) 
and (U is H) 
and (H is H) 
then (S is H)
18. 
If (DO is H) 
and (NH3 is H) 
and (U is M) 
and (H is H) 
then (S is MH)
19. 
If (DO is M) 
and (NH3 is M) 
and (U is M) 
and (H is M) 
then (S is MH)
20. 
If (DO is H) 
and (NH3 is L) 
and (U is M)
and (H is H) 
then (S is MH)
Source:	 Marsili-Libelli, S. et al., Environ. Model. Softw., 41, 27–38, 2013.

511
Analysis of Aquatic Ecosystems
and the subsequent statistical distribution of FISH, yields the flow intervals ∆Q
(
)  in which the 
suitability is above a prescribed minimum level. This analysis can be useful in gaining further 
insight into critical reaches, or for assessing diversions in regulated rivers. Figure 8.70 shows the 
application of Algorithm 2 to the critical fifth reach in the Arno River, in which the habitats of the 
two species are widely separated. It also shows that the E. chub would be greatly disadvantaged 
by a flow decrease.
ΔQbarbel
ΔQE.chub
75th percentile
FISHmin = 0.7 limit
0.5
0.6
0.7
0.8
0.9
0.0
0.2
0.4
0.6
0.8
1.0
FISH
Cum. Freq.
Barbel
E. chub
(a)
0
6
2
4
8
10
12
0.50
0.60
0.55
0.65
0.75
0.70
0.80
0.85
0.90
Flow (m3/s)
FISH
(b)
FIGURE 8.70  (a) Cumulative FISH distribution and selection of the suitability limits for the two target 
species evaluated for the Arno River at reach #5 around QSLF. (b) The admissible flow range is computed by 
considering the last quartile FISH75 and an absolute FISHmin of 0.7 (thick lines), whichever is greater (in this 
example, the latter holds for the Barbel). The dots and diamonds refer to the actual flow values used for the 
interpolation (thin solid lines). (Reproduced with permission from Marsili-Libelli, S. et al., Environ. Model. 
Softw., 41, 27–38, 2013.)


513
References
Abdi, H. and Williams, L. J., 2010. Principal component analysis. Wiley Interdisciplinary Reviews: 
Computational Statistics, 2, 433–459.
Abonyi, J., 2003. Fuzzy Model Identification for Control, Birkhauser, Boston, MA, 273pp.
Abramowitz, M. and Stegun, I. A., 1970. Handbook of Mathematical Functions with Formulas, Graphs, and 
Mathematical Tables, Dover, New York, 1022pp.
Agren, G. and Bosatta, E., 1996. Theoretical Ecosystem Ecology, Cambridge University Press, Cambridge, 
234pp.
Akçakaya, H. S., Burgman, M. A., and Ginzburg, L. R., 1999. Applied Population Ecology: Principles and 
Computer Exercises Using RAMAS EcoLab 2.0, Sinauer Associates, Sunderland, MA.
Akin, B. S. and Ugurlu, A., 2005. Monitoring and control of biological nutrient removal in a Sequencing Batch 
Reactor. Process Biochemistry, 40, 2873–2878.
Alados, I., Foyo-Moreno, I., and Alados-Arboledas, L., 1996. Photosynthetically active radiation: Measurements 
and modelling. Agricultural and Forest Meteorology, 78, 121–131.
Alberty, R. A., 1979. Physical Chemistry, John Wiley & Sons, New York, 682pp.
Alferes, J., Tik, S., Copp, J., and Vanrolleghem, P. A., 2013. Advanced monitoring of water systems using in situ 
measurement stations: Data validation and fault detection. Water Science & Technology, 68, 1022–1030.
Arhonditsis, G. B. and Brett, M. T., 2005. Eutrophication model for Lake Washington (USA): Part I. Model 
description and sensitivity analysis. Ecological Modelling, 187, 140–178.
Artan, N. and Orhon, D., 2005. Mechanism and Design of Sequencing Batch Reactors for Nutrient Removal, 
IWA Scientific and Technical Report no. 19, London, 100pp.
Asaeda, T., Trung, V. K., and Manatunge, J., 2000. Modeling the effects of macrophyte growth and decomposi-
tion on the nutrient budget in shallow lakes. Aquatic Botany, 68, 217–237.
Asaeda, T., Trung, V. K., Manatunge, J., and Van Bon, T., 2001. Modelling macrophyte-nutrient-­phytoplankton 
interactions in shallow eutrophic lakes and the evaluation of environmental impacts. Ecological 
Engineering, 16, 341–357.
Asaeda, T. and Van Bon, T., 1997. Modelling the effects of macrophytes on algal blooming in eutrophic ­shallow 
lakes. Ecological Modelling, 104, 261–287.
Astrom, K. J., 1970. Introduction to Stochastic Control Theory, Academic Press, New York, 299pp.
Athans, M., Dertouzos, M. L., Spann, R. D., and Mason, S. J., 1974. Systems, Networks, and Computation: 
Multivariable Methods, McGraw-Hill, New York, 552pp.
Atkinson, A. C. and Donev, A. N., 1992. Optimum Experimental Designs, Clarendon Press, Oxford, 352pp.
Ayllón, D., Almodóvar, A., Nicola, G. G., and Elvira, B., 2012. The influence of variable habitat suitability 
criteria on PHABSIM habitat index results. River Research and Applications, 28, 1179–1188.
Azzellino, A., Salvetti, R., Vismara, R., and Bonomo, L., 2006. Combined use of the EPA-QUAL2E simulation 
model and factor analysis to assess the source apportionment of point and non point loads of nutrients to 
surface waters. Science of the Total Environment, 371, 214–222.
Azzoni, R., Giordani, G. M., Bartoli, M., Welsh, D. T., and Viaroli, P. L., 2001. Iron, sulphur and phosphorus 
cycling in the rhizosphere sediments of a eutrophic Ruppia cirrhosa meadow (Valle Smarlacca, Italy). 
Journal of Sea Research, 45, 15–26.
Babuska, R., 1998. Fuzzy Modeling for Control, Kluwer Academic Publishers, Boston, MA, 260pp.
Babuska, R., van der Veen, P. J., and Kaymak, U., 2002. Improved covariance estimation for Gustafson-Kessel 
clustering. In: Proceedings of the IEEE International Conference on Fuzzy Systems, Honolulu, HI, pp. 
1081–1085.
Baggiani, F. and Marsili-Libelli, S., 2009. Real-time fault detection and isolation in biological wastewater treat-
ment plants. Water Science & Technology, 60, 2949–2961.
Bailey, J. E. and Ollis, D. F., 1986. Biochemical Engineering Fundamentals, McGraw-Hill, New York, 984pp.
Banks, S. P., 1986. Control Systems Engineering, Prentice Hall, New York, 614pp.
Bannister, T. T., 1974. Production equations in terms of chlorophyll concentration, quantum yield, and upper 
limit to production. Limnology and Oceanography, 19, 1–12.
Bàrdossy, A. and Duckstein, L., 1995. Fuzzy Rule-Based Modeling with Applications to Geophysical, Biological 
and Engineering Systems, CRC Press, Boca Raton, FL, 232pp.

514
References
Basille, M., Calenge, C., Marboutin, É., Andersen, R., and Gaillard, J.-M., 2008. Assessing habitat selec-
tion using multivariate statistics: Some refinements of the ecological-niche factor analysis. Ecological 
Modelling, 211, 233–240.
Bastianoni, S., 2008. Eco-exergy to emergy flow ratio. In: S. E. Jorgensen (ed.), Encyclopedia of Ecology. 
Elsevier B.V., Amsterdam, the Netherlands, pp. 979–983.
Bastin, G. and Dochain, D., 1990. On-Line Estimation and Adaptive Control of Bioreactors, Elsevier B.V., 
Amsterdam, the Netherlands, 394pp.
Batchelor, G. K., 2000. An Introduction to Fluid Dynamics, Cambridge University Press, Cambridge, 615pp.
Bates, D. M. and Watts, D., 1988. Nonlinear Regression Analysis and its Applications, John Wiley & Sons, 
New York, 392pp.
Batstone, D. J., Keller, J., Angelidaki, I., Kalyuzhnyi, S. V., Pavlostathis, S. G., Rozzi, A., Sanders, W. T., 
Siegrist, H., and Vavilin, V. A., 2002a. Anaerobic Digestion Model No. 1, IWA Scientific and Technical 
Report no. 13, London, 77pp.
Batstone, D. J., Keller, J., Angelidaki, I., Kalyuzhnyi, S. V., Pavlostathis, S. G., Rozzi, A., Sanders, W. T., Siegrist, H., 
and Vavilin, V. A., 2002b. The IWA anaerobic digestion model no 1 (ADM1). Water Science & Technology, 
45, 65–73.
Batstone, D. J., Keller, J., and Steyer, J. P., 2006. A review of ADM1 extensions, applications, and analysis: 
2002–2005. Water Science & Technology, 54, 1–10.
Battley, E. H., 1987. Energetics of Microbial Growth, John Wiley & Sons, New York, 450pp.
Begon, M. and Mortimer, M., 1986. Population Ecology, Blackwell, Oxford, 220pp.
Bellman, R. and Åström, K. J., 1970. On structural identifiability. Mathematical Biosciences, 7, 329–339.
Benedini, M. and Tsakiris, G., 2013. Dispersion in rivers and streams. In: Water Quality Modelling for Rivers 
and Streams, Water Science and Technology Library 70. Springer-Verlag, Berlin, Germany, 288pp.
Bennett, N. D., Croke, B. F. W., Guariso, G., Guillaume, J. H. A., Hamilton, S. H., Jakeman, A. J., Marsili-
Libelli, S. et al., 2013. Characterising performance of environmental models. Environmental Modelling & 
Software, 40, 1–20.
Berger, R. D., 1981. Comparison of the Gompertez and logistic equations to describe plant disease progress. 
Phytopathology, 71, 716–719.
Berman, T. and Chava, S., 1999. Algal growth on organic compounds as nitrogen sources. Journal of Plankton 
Research, 21, 1423–1437.
Beun, J. J., Dircks, K., Van Loosdrecht, M. C. M., and Heijnen, J. J., 2002. Poly-beta-hydroxybutyrate metabo-
lism in dynamically fed mixed microbial cultures. Water Research, 36, 1167–1180.
Beun, J. J., Verhoef, E. V., Van Loosdrecht, M. C. M., and Heijnen, J. J., 2000. Stoichiometry and kinet-
ics of poly-beta-hydroxybutyrate metabolism under denitrifying conditions in activated sludge cultures. 
Biotechnology and Bioengineering, 68, 496–507.
Bezdek, J. and Pal, N. R., 1995. On cluster validity for the fuzzy c-means model. IEEE Transactions on Fuzzy 
Systems, 3, 370–379.
Bezdek, J. C., 1981. Pattern Recognition with Fuzzy Objective Function Algorithms, Plenum Press, New York, 
256pp.
Bezdek, J. C., 1993. Fuzzy models—What are they, and why? IEEE Transactions on Fuzzy Systems, 1, 1–5.
Bortone, G., Marsili-Libelli, S., Tilche, A., and Wanner, J., 1999. Anoxic phosphate uptake in the DEPHANOX 
process. Water Science & Technology, 40, 177–185.
Bovee, K. D., Lamb, B. L., Bartholow, J. M., Stalnaker, C. B., Taylor, J., and Henriksen, J., 1998. Stream 
Habitat Analysis Using the Instream Flow Incremental Methodology, U.S. Geological Survey, Biological 
Resources Division Information and Technology Report, Fort Collins, CO, 131pp.
Box, G. E. P., Jenkins, G. M., and Reinsel, G. C., 2008. Time Series Analysis, Forecasting and Control, John 
Wiley & Sons, New York, 784pp.
Brandt-Williams, S. L., 2002. Handbook of Emergy Evaluation: A Compendium of Data for Emergy 
Computation, Center for Environmental Policy, University of Florida, Gainesville, FL, 40pp.
Brauer, F. and Castillo-Chaves, C., 2014. Mathematical Models in Population Biology and Epidemiology, 
Springer Science & Business Media, New York, 508pp.
Brezonik, P. and Arnold, W., 2011. Water Chemistry: An Introduction to the Chemistry of Natural and 
Engineered Aquatic Systems, Oxford University Press, Oxford, 808pp.
Brillinger, D. R., 2013. Aligning some Nicholson sheep-blowfly data sets with system input. Stat, 2, 9–21.
Britto, D. T. and Kronzucker, H. J., 2001. Constancy of nitrogen turn-over kinetics in the plant cell: Insights 
into the integration of subcellular N fluxes. Planta, 213, 175–181.
Brix, H., 1997. Do macrophytes play a role in constructed treatment wetlands? Water Resources Research, 
35, 11–17.

515
References
Brown, L. C. and Barnwell, T. O., 1987. The Enhanced Stream Water Quality Models QUAL2E and QUAL2E-
UNCAS: Documentation and User Manual. Environmental Research Laboratory, US Environmental 
Protection Agency, Athens, GA, 189pp.
Brown, M. and Harris, C., 1994. Neurofuzzy Adaptive Modelling and Control, Prentice Hall, London, 
508pp.
Brown, M. T. and Bardi, E., 2001. Handbook of Emergy Evaluation—A Compendium of Data for Emergy 
Computation, Center for Environmental Policy, University of Florida, Gainesville, FL, 94pp.
Brun, R., Kühni, M., Siegrist, H., Gujer, W., and Reichert, P., 2002. Practical identifiability of ASM2d 
­parameters—Systematic selection and tuning of parameter subsets. Water Research, 36, 4113–4127.
Brunner, G., 2010. HEC-RAS River Analysis System. Hydraulic Reference Manual, Version 4.1, US Army 
Corps of Engineers Hydrologic Engineering Center, Davis, CA, 790pp.
Butcher, J. C., 2003. Numerical Methods for Ordinary Differential Equations, John Wiley & Sons, New York, 
440pp.
Campbell, R., 1983. Microbial Ecology, Blackwell, Oxford, 191pp.
Carta, F., Beun, J. J., Van Loosdrecht, M. C. M., and Heijnen, J. J., 2001. Simultaneous storage and degradation 
of PHB and glycogen in activated sludge cultures. Water Research, 35, 2693–2701.
Casti, J. L., 1979. Connectivity, Complexity, and Catastrophe in Large-Scale Systems, John Wiley & Sons, 
London, 203pp.
Causton, D. R. and Venus, J. C., 1982. The Biometry of Plant Growth, Edward Arnold, New York, 320pp.
Chapra, S. C., 1979. Applying phosphorus loading models to embayments. Limnology and Oceanography, 24, 
168–171.
Chapra, S. C., 1997. Surface Water-Quality Modeling, McGraw-Hill, New York, 844pp.
Chapra, S. C. and Canale, R., 1991. Numerical Methods for Engineers with Software and Programming 
Applications, McGraw-Hill, New York, 944pp.
Chapra, S. C. and Pelletier, G. J., 2003. QUAL2K: A Modeling Framework for Simulating River and Stream 
Water Quality. Documentation and Users Manual, Civil and Environmental Engineering Department, 
Tufts University, Medford, MA, 121pp.
Chazarenc, F., Merlin, G., and Gonthier, Y., 2003. Hydrodynamics of horizontal subsurface flow constructed 
wetlands. Ecological Engineering, 21, 165–173.
Checchi, N., Giusti, E., and Marsili-Libelli, S., 2007. PEAS: A toolbox to assess the accuracy of estimated 
parameters in environmental models. Environmental Modelling and Software, 22, 899–913.
Checchi, N. and Marsili-Libelli, S., 2005. Reliability of parameter estimation in respirometric models. Water 
Research, 39, 3686–3696.
Chiaudani, G. and Vighi, M., 1976. Comparison of different techniques for detecting limiting or surplus 
­nitrogen in batch cultures of Selenastrum capricornutum. Water Research, 10, 725–729.
Christensen, V. and Pauly, D., 1992. Ecopath II—A software for balancing steady-state ecosystem models and 
calculating network characteristics. Ecological Modelling, 61, 169–185.
Christensen, V. and Walters, C. J., 2004. Ecopath with ecosim: Methods, capabilities and limitations. Ecological 
Modelling, 172, 109–139.
Christensen, V., Walters, C. J., Pauly, D., and Forrest, R., 2008. Ecopath with Ecosim Version 6: User Guide, 
Fisheries Centre, University of British Columbia, Vancouver, Canada. Available on the web at http://
www.ecopath.org/.
Christian, R. R., Forés, E., Comin, F., Viaroli, P. L., Naldi, M. C., and Ferrari, I., 1996. Nitrogen cycling 
networks of coastal ecosystems: Influence of trophic status and primary producer form. Ecological 
Modelling, 87, 111–129.
Christian, R. R., Naldi, M., and Viaroli, P., 1998. Construction and analysis of static, structured models of 
nitrogen cycling in coastal ecosystems. In: A. L. Koch, J. A. Robinson, and G. A. Milliken (eds.), 
Mathematical Modelling in Microbial Ecology. Chapman & Hall, New York, pp. 162–192.
Clark, C. W., 1990. Mathematical Bioeconomics: The Optimal Management of Renewable Resources, John 
Wiley & Sons, New York, 386pp.
Clark, C. W. and Mangel, M., 2000. Dynamic State Variable Models in Ecology, Methods and Applications, 
Oxford University Press, Oxford, 289pp.
Cloete, T. E. and Muyima, N. Y. O., 1997. Microbial Community Analysis, IWA Scientific and Technical Report 
no. 5, London, 98pp.
Clough, J. S., 2014. AQUATOX (RELEASE 3.1 plus), US EPA Office of Water, Washington, DC, 102pp.
Cole, T. M. and Wells, S. A., 2015. CE-QUAL-W2: A Two-Dimensional, Laterally Averaged, Hydrodynamic 
and Water Quality Model, Version 3.72, Portland State University, Portland, OR, 797pp.
Cook, P. A., 1986. Nonlinear Dynamical Systems, Prentice Hall, Englewood Cliffs, NJ, 216pp.

516
References
Copp, J. B., 2002. The COST Simulation Benchmark: Description and Simulator Manual, Office for Official 
Publications of the European Community, Luxembourg, 154pp.
Corominas, L., Villez, K., Aguado, D., Rieger, L., Rosén, C., and Vanrolleghem, P. A., 2009. Evaluation of 
fault-detection strategies performance in wastewater treatment processes. In: 10th IWA Conference on 
Instrumentation, Control, and Automation, Cairns, Australia, June 14–17.
Corominas, L., Villez, K., Aguado, D., Rieger, L., Rosén, C., and Vanrolleghem, P. A., 2011. Performance 
­evaluation of fault detection methods for wastewater treatment processes. Biotechnology and 
Bioengineering, 108, 333–344.
Crispi, G., Crise, A., and Solidoro, C., 1998. Three-dimensional oligotrophic ecosystem models driven by 
physical forcing: The Mediterranean Sea case. Environmental Modelling and Software, 13, 483–490.
Dahlquist, G. and Bjorck, A., 2003. Numerical Methods, Dover Publication, London, 573pp.
De Biasi, A. M., Benedetti-Cecchi, L., Pacciardi, L., Maggi, E., Vaselli, S., and Bertocci, I., 2003. Spatial 
heterogeneity in the distribution of plants and benthic invertebrates in the lagoon of Orbetello (Italy). 
Oceanologica Acta, 26, 39–46.
De Boor, C., 2001. A Practical Guide to Splines, Springer-Verlag, New York, 346pp.
De Pauw, D., 2005. Optimal experimental design for calibration of bioprocess models: A validated software 
toolbox. PhD Thesis, University of Gent (B), Gent, Belgium. Available on the web at http://biomath.
ugent.be/publications/download/depauwdirk_phd.pdf.
Di Toro, D. M., 2001. Sediment Flux Modeling, Wiley-Interscience, New York, 624pp.
Di Toro, D. M., O’Connor, D. J., Thomann, R. V., and Mancini, J. L., 1975. Phytoplankton-Zooplankton-
Nutrient interaction model for wastern Lake Erie. In: B. C. Patten (ed.), Systems Analysis and Simulation 
in Ecology, Vol. 3. Academic Press, New York, pp. 424–475.
Dillon, W. R. and Goldstein, M., 1984. Multivariate Analysis Methods and Applications, John Wiley & Sons, 
New York, 587pp.
Ding, F. and Chen, T., 2005. Identification of Hammerstein nonlinear ARMAX systems. Automatica, 41, 
1479–1489.
Dircks, K., Beun, J. J., Loosdrecht, M. C. M., Heijnen, J. J., and Henze, M., 2001. Glycogen metabolism in 
aerobic mixed cultures. Biotechnology and Bioengineering, 73, 85–94.
Dochain, D. and Vanrolleghem, P. A., 2001. Dynamic Modelling and Estimation in Wastewater Treatment 
Processes, IWA Publishing, London, 342pp.
Dormand, J. R., 1996. Numerical Methods for Differential Equations: A Computational Approach, CRC Press, 
Boca Raton, FL, 384pp.
Drazin, P. G., 1992. Nonlinear Systems, Cambridge University Press, Cambridge, 317pp.
Droop, M. R., 1983. 25 years of algal growth kinetics: A personal view. Botanica Marina, 26, 99–112.
Duhamel, P. and Vetterli, M., 1990. Fast Fourier transforms: A tutorial review and a state of the art. Signal 
Processing, 19, 259–299.
Dunteman, G. H., 1989. Principal Component Analysis, SAGE Publication, Newbury Park, CA, 487pp.
Dürrenmatt, D. J. and Gujer, W., 2011. Data-driven modeling approaches to support wastewater treatment plant 
operation. Environmental Modelling & Software, 30, 47–56.
Elaydi, S., 2005. An Introduction to Difference Equations, Springer Science & Business Media, New York, 
540pp.
Elgavish, A., Elgavisd, G. A., and Berman, T., 1980. Intracelluar phosphorus pools in intact algal cells. FEBS 
Letters, 117, 1–6.
Falkowski, P. G. and Raven, J. A., 2007. Aquatic Photosynthesis, Princeton University Press, Princeton, NJ, 
484pp.
Fedorov, V. V., 1972. Theory of Optimal Experiments, Academic Press, New York, 292pp.
Feigenbaum, M. J., 1978. Quantitative universality for a class of nonlinear transformations. Journal of 
Statistical Physics, 19, 25–52.
Fisher, B. H., 1967. The mechanics of dispersion in natural streams. Journal of the Hydraulics Division, ASCE, 
93, 187–216.
Fisher, H. B., List, E. J., Koh, R. C. J., Imberger, J., and Brooks, N. H., 1979. Mixing in Inland and Coastal 
Waters, Academic Press, San Diego, CA, 483pp.
France, J. and Thornley, J. H. M., 1984. Mathematical Models in Agriculture, Butterworths, London, 335pp.
Freedman, H. I., 1980. Deterministic Mathematical Models in Population Ecology, Marcel Dekker, New York, 
254pp.
Freeman, M. M. R., 2008. Challenges of assessing cetacean population recovery and conservation status. 
Endangered Species Research, 6, 173–184.

517
References
Friedlander, B. and Porat, B., 1984. The modified Yule-Walker method of ARMA spectral estimation. IEEE 
Transactions on Aerospace Electronic Systems, 20, 158–173.
Frigo, M. and Johnson, S. G., 2005. The design and implementation of FFTW3. Proceedings of the IEEE, 93, 
216–231.
Fukuda, S., 2009. Consideration of fuzziness: Is it necessary in modelling fish habitat preference of Japanese 
medaka (Oryzias latipes)? Ecological Modelling, 220, 2877–2884.
Fukuda, S., De Baets, B., Mouton, A. M., Waegeman, W., Nakajima, J., Mukai, T., Hiramatsu, K., and Onikura, N., 
2011. Effect of model formulation on the optimization of a genetic Takagi–Sugeno fuzzy system for fish 
habitat suitability evaluation. Ecological Modelling, 222, 1401–1413.
Fukuda, S. and Hiramatsu, K., 2008. Prediction ability and sensitivity of artificial intelligence-based habitat 
preference models for predicting spatial distribution of Japanese medaka (Oryzias latipes). Ecological 
Modelling, 215, 301–313.
Fuller, R., 1999. Introduction to Neuro-Fuzzy Systems, Physica-Verlag, Berlin, Germany, 289pp.
Ganoulis, J., 2009. Risk Analysis of Water Pollution, Wiley-VCH, Weinheim, Germany, 311pp.
Ganoulis, J. G., 1994. Engineering Risk Analysis of Water Pollution: Probabilities and Fuzzy Sets, Wiley-VCH, 
Weinheim, Germany, 306pp.
Gantmacher, F. R., 2000. Matrix Theory, Vol. 2, American Mathematical Society, Providence, RI, 276pp.
Gause, G. F., 1934. The Struggle for Existence, Williams & Wilkins, Baltimore, MD.
Gernaey, K. V., van Loosdrecht, M. C. M., Henze, M., Lind, M., and Jørgensen, S. E., 2004. Activated sludge 
wastewater treatment plant modelling and simulation: State of the art. Environmental Modelling & 
Software, 19, 763–783.
Gijzen, H. J., 2001. Anaerobes, aerobes and phototrophs: A winning team for wastewater management. Water 
Science & Technology, 44, 123–132.
Gijzen, H. J. and Mulder, A., 2001. The nitrogen cycle out of balance. Water 21(3), 38–40.
Gilat, A., 2005. MATLAB: An Introduction with Applications, John Wiley & Sons, New York, 343pp.
Ginzburg, L. R. and Golemberg, E. M., 1985. Lectures in Theoretical Population Biology, Prentice Hall, 
Englewood Cliffs, NJ, 246pp.
Giordani, G., Zaldívar, J. M., and Viaroli, P., 2009. Simple tools for assessing water quality and trophic status 
in transitional water ecosystems. Ecological Indicators, 9, 982–991.
Giusti, E. and Marsili-Libelli, S., 2005. Modelling the interactions between nutrients and the submersed 
­vegetation in the Orbetello lagoon. Ecological Modelling, 184, 141–161.
Giusti, E. and Marsili-Libelli, S., 2006. An integrated model for the Orbetello lagoon ecosystem. Ecological 
Modelling, 196, 379–394.
Giusti, E. and Marsili-Libelli, S., 2009. Spatio-temporal dissolved oxygen dynamics in the Orbetello lagoon by 
fuzzy pattern recognition. Ecological Modelling, 220, 2415–2426.
Giusti, E., Marsili-Libelli, S., and Gualchieri, A., 2011a. Modelling a coastal lake for flood and quality manage-
ment. In: Watermatex 2011: 8th IWA Symposium on Systems Analysis and Integrated Management, San 
Sebastian, Spain, pp. 396–404.
Giusti, E., Marsili-Libelli, S., and Mattioli, S., 2011b. A fuzzy quality index for the environmental assessment 
of a restored wetland. Water Science & Technology, 63, 2061–2070.
Giusti, E., Marsili-Libelli, S., Renzi, M., and Focardi, S., 2010. Assessment of spatial distribution of sub-
merged vegetation in the Orbetello lagoon by means of a mathematical model. Ecological Modelling, 
221, 1484–1493.
Giusti, E., Marsili-Libelli, S., and Spagni, A., 2011c. Modelling microbial population dynamics in nitritation 
processes. Environmental Modelling & Software, 26, 938–949.
Goh, B. S., 1976. Nonvulnerability of ecosystems in unpredictable environments. Theoretical Population 
Biology, 10, 83–95.
Goh, B. S., 1977. Global stability in many-species systems. American Naturalist, 111, 135–143.
Goh, B. S., 1979. Robust stability concepts for ecosystem models. In: E. Halfon (ed.), Theoretical Systems 
Ecology: Advances and Case Studies. Academic Press, San Diego, CA, pp. 467–489.
Goh, B. S., 1980. Management and Analysis of Biological Populations, Elsevier Science B.V., Amsterdam, the 
Netherlands, 299pp.
Goldberg, D. E., 1989. Genetic Algorithms in Search, Optimization, and Machine Learning, Addison-Wesley, 
Reading, MA, 412pp.
Goldberg, S., 2010. Introduction to Difference Equations, Dover Books on Mathematics, New York, 288pp.
Gonzalez, A. and Descamp-Julien, B., 2004. Population and community variability in randomly fluctuating 
environments. Oikos, 106, 105–116.

518
References
Goswami, J. C. and Chan, A. K., 2008. In: K. Chang (ed.), Fundamentals of Wavelets: Theory, Algorithms and 
Applications, Wiley, New York, pp. 359–361.
Gotelli, N. J., 2001. A Primer of Ecology, Sinauer Associates, Sunderland, MA, 265pp.
Gotelli, N. J. and Ellison, A. M., 2004. A Primer of Ecological Statistics, Sinauer Associates, Sunderland, MA, 
510pp.
Graps, A., 1995. Introduction to wavelets. IEEE Computational Science & Engineering, 2, 50–61.
Gu, K., Kharitonov, V. L., and Chen, J., 2003. Stability of Time-Delay Systems, Birkhauser, Boston, MA, 
353pp.
Guerrero, J., Guisasola, A., and Baeza, J. A., 2011. The nature of the carbon source rules the competition 
between PAO and denitrifiers in systems for simultaneous biological nitrogen and phosphorus removal. 
Water Research, 45, 4793–4802.
Gujer, W., 2006. Activated sludge modelling: Past, present and future. Water Science & Technology, 53, 
111–119.
Gujer, W., 2008. System Analysis for Water Technology, Springer-Verlag, Berlin, Germany, 462pp.
Gujer, W., Henze, M., Mino, T., and van Loosdrecht, M. C. M., 1999. Activated sludge model no. 3. Water 
Science & Technology, 39, 183–193.
Gustafson, D. and Kessel, W., 1979. Fuzzy clustering with a fuzzy covariance matrix. In: 1978 IEEE Conference 
on Decision & Control, San Diego, CA, pp. 761–766.
Haefner, J. W., 2005. Modeling Biological Systems: Principles and Applications, Springer Science & Business 
Media, New York, 475pp.
Haimi, H., Mulas, M., Corona, F., and Vahala, R., 2013. Data-derived soft-sensors for biological wastewater 
treatment plants: An overview. Environmental Modelling & Software, 47, 88–107.
Hajek, P., 2010. Fuzzy logic. Stanford Encyclopaedia of Philosophy. Available on the web at http://plato.­
stanford.edu/archives/fall2010/entries/logic-fuzzy/.
Halfon, E., 1983. Is there a best model structure? II. Comparing the model structures of different fate models. 
Ecological Modelling, 20, 153–163.
Hallam, T. G. and Levin, S. A., 1986. Mathematical Ecology, Springer-Verlag, Berlin, Germany, 457pp.
Han, C., Gu, X., Geng, J., Hong, Y., Zhang, R., Wang, X., and Gao, S., 2010. Production and emission of 
­phosphine gas from wetland ecosystems. Journal of Environmental Sciences, 22, 1309–1311.
Hawkes, F. R., Rozzi, A. G., Black, K., Guwy, A. J., and Hawkes, D. L., 1992. The stability of anaerobic 
­digesters operating on a food-processing wastewaters. Water Science & Technology, 25, 73–82.
Heathwaite, A. L., 2003. Making process-based knowledge useable at the operational level: A framework for 
modelling diffuse pollution from agricultural land. Environmental Modelling & Software, 18, 753–760.
Heil, C., 1993. Ten lectures on wavelets (Ingrid Daubechies). SIAM Review, 35, 666–669.
Hellinga, C., Schellen, A. A. J. C., Mulder, J. W., van Loosdrecht, M. C. M., and Heijnen, J. J., 1998. The 
SHARON process: An innovative method for nitrogen removal from ammonium rich waste water. Water 
Science & Technology, 37, 135–142.
Hellinga, C., van Loosdrecht, M. C. M., and Heijnen, J. J., 1999. Model based design of a novel process for 
nitrogen removal from concentrated flow. Mathematical and Computer Modelling of Dynamical Systems, 
5, 351–371.
Hemond, H. F. and Fechner, E. J., 1999. Chemical Fate and Transport in the Environment, Academic Press, 
San Diego, CA, 433pp.
Henze, M., Gujer, W., Mino, T., and van Loosdrecht, M. C. M., 2000. Activated Sludge Models: ASM1, ASM2, 
ASM2d and ASM3, IWA Scientific and Technical Report no. 9, London, 121pp.
Hesselmann, R. P. X., Werlen, C., Hahn, D., van der Meer, J. R., and Zehnder, A. J. B., 1999. Enrichment, 
­phylogenetic analysis and detection of a bacterium that performs enhanced biological phosphate removal 
in activated sludge. Systematic and Applied Microbiology, 22, 454–465.
Hildebrand, F. B., 1974. Introduction to Numerical Analysis, McGraw-Hill, New York, 669pp.
Himmelblau, D. M., 1972. Applied Nonlinear Programming, McGraw-Hill, New York, 498pp.
Hirota, K., 1993. Industrial Applications of Fuzzy Technology, Springer-Verlag, Tokyo, Japan, 310pp.
Holland, J. H., 1992. Adaptation in Natural and Artificial Systems, MIT Press, Cambridge, MA, 211pp.
Holmberg, A., 1982. On the practical identifiability of microbial growth models incorporating Michaelis-
Menten type non-linearities. Mathematical Biosciences, 62, 23–43.
Hotelling, H., 1931. The generalization of student’s ratio. Annals of Mathematical Statistics, 2, 360–378.
Hotelling, H., 1947. Multivariate quality control illustrated by the testing of sample bombsights. In: O. Eisenhart 
(ed.), Selected Techniques of Statistical Analysis. McGraw-Hill, New York, pp. 113–184. 
House, J. E., 2007. Principles of Chemical Kinetics, Elsevier Academic Press, Amsterdam, the Netherlands, 
336pp.

519
References
Houston, P. L., 2006. Chemical Kinetics and Reaction Dynamics, Dover Publication, New York, 330pp.
Hu, L., Wang, J., Wen, X., and Qian, Y., 2005. Study on performance characteristics of SBR under limited dis-
solved oxygen. Process Biochemistry, 40, 293–296.
Iacopozzi, I., Innocenti, V., Marsili-Libelli, S., and Giusti, E., 2007. A modified activated sludge model no. 3 
(ASM3) with two-step nitrification-denitrification. Environmental Modelling & Software, 22, 847–861.
Irvine, R. L. and Ketchum, L. H., 1989. Sequencing Batch Reactors for biological wastewater treatment. CRC 
Critical Reviews Environmental Control, 18, 255–294.
Jamshidi, M., Titli, A., Zadeh, L. A., and Boverie, S., 1997. Applications of Fuzzy Logic: Towards High Machine 
Intelligence Quotient Systems, Prentice Hall, Upper Saddle River, NJ, 423pp.
Jamu, D. M. and Piedrahita, R. H., 2002. An organic matter and nitrogen dynamics model for the ecologi-
cal analysis of integrated aquaculture/agriculture systems: I. Model development and calibration. 
Environmental Modelling & Software, 17, 571–582.
Jang, J. R., 1993. ANFIS: Adaptive-network-based fuzzy inference system. IEEE Transaction on Systems, 
Man, and Cybernetics, 23, 665–685.
Jang, J. S. R., Sun, C. T., and Mizutani, A. Y., 1996. Neuro-Fuzzy and Soft Computing: A Computational 
Approach to Learning and Machine Intelligence, Prentice Hall, San Diego, CA, 614pp.
Jassby, A. D. and Platt, T., 1976. Mathematical formulation of the relationship between photosynthesis and 
light for phytoplankton. Limnology and Oceanography, 21, 540–547.
Jeppsson, U., 1996. Modelling aspects of wastewater treatment processes. PhD Thesis, University of Lund (S), 
Lund, Sweden.
Jeppsson, U., Pons, M.-N., Nopens, I., Alex, J., Copp, J. B., Gernaey, K. V., Rosen, C., Steyer, J.-P., and 
Vanrolleghem, P. A., 2007. Benchmark simulation model no. 2: General protocol and exploratory case 
studies. Water Science & Technology, 56, 67–78.
John, E. H. and Flynn, K. J., 2000. Modelling phosphate transport and assimilation in microalgae: How much 
complexity is warranted? Ecological Modelling, 125, 145–157.
Jolliffe, I. T., 2002. Principal Component Analysis, Second Edition, Springer Series in Statistics, Springer-Verlag 
Berlin, Germany, 487pp.
Jorgensen, S. E., 2008. Eco-exergy as an ecosystem health indicator. In: Encyclopedia of Ecology. Elsevier 
B.V., Amsterdam, the Netherlands, pp. 977–979.
Jorgensen, S. E. and Bendoricchio, G., 2001. Fundamentals of Ecological Modelling, Elsevier B.V., Amsterdam, 
the Netherlands, 530pp.
Jorgensen, S. E., Odum, H. T., and Brown, M. T., 2004. Emergy and exergy stored in genetic information. 
Ecological Modelling, 178, 11–16.
Jorgensen, S. E. and Svirezhev, Y., 2004. Towards a Thermodynamic Theory for Ecological Systems, Elsevier 
B.V., Amsterdam, the Netherlands, 366pp.
Kadlec, R. H., 2003. Pond and wetland treatment. Water Science & Technology, 48, 1–8.
Kadlec, R. H. and Wallace, S. D., 2009. Treatment Wetlands, CRC Press, Boca Raton, FL, 1016pp.
Kandel, A. and Langholz, G., 1994. Fuzzy Control Systems, CRC Press, Boca Raton, FL, 624pp.
Kaplan, D. and Glass, L., 1995. Understanding Nonlinear Dynamics, Springer, New York, 420pp.
Kaymak, U. and Setnes, M., 2002. Fuzzy clustering with volume prototypes and adaptive cluster merging. 
IEEE Transactions on Fuzzy Systems, 10, 705–711.
Kecman, V., 2001. Learning and Soft Computing, MIT Press, Boston, MA, 541pp.
Kharitonov, V. L. and Zhabko, A. P., 2003. Lyapunov-Krasovskii approach to the robust stability analysis of 
time-delay systems. Automatica, 39, 15–20.
Kiirikki, M. and Haapama, J., 1998. Linking the growth of filamentous algae to the 3D-ecohydrodynamic 
model of the Gulf of Finland. Environmental Modelling & Software, 13, 503–509.
Kim, J. H., Chen, M., Kishida, N., and Sudo, R., 2004. Integrated real-time control strategy for nitrogen 
removal in swine wastewater treatment using sequencing batch reactors. Water Research, 38, 3340–3348.
Kincanon, R. and McAnally, S. A., 2004. Enhancing commonly used model predictions for constructed wet-
land performance: As-built design considerations. Ecological Modelling, 174, 309–322.
Kirk, J. T. O., 2011. Light and Photosynthesis in Aquatic Ecosystems, Cambridge University Press, Cambridge, 
649pp.
Klir, G. J. and Folger, T. A., 1988. Fuzzy Sets, Uncertainty, and Information, Prentice Hall, New York, 355pp.
Knyazikhin, Y., Martonchik, J. V., Myneni, R. B., Diner, D. J., and Running, S. W., 1998. Synergistic algorithm 
for estimating vegetation canopy leaf area index and fraction of absorbed photosynthetically active radia-
tion from MODIS and MISR data. Journal of Geophysical Research, 103, 32257–32276.
Kolk, W. R. and Lerman, R. A., 1992. Nonlinear System Dynamics, Van Nostrand Reinhold, New York, 
350pp.

520
References
Kong, Z., Vanrolleghem, P. A., Willems, P., and Verstraete, W., 1996. Simultaneous determination of inhibition 
kinetics of carbon oxidation and nitrification with a respirometer. Water Research, 30, 825–836.
Kosko, B., 1992. Neural Networks and Fuzzy Systems, Prentice Hall, London, 449pp.
Krasovskii, N. N., 1956. On the application of the second method of Lyapunov for equations with time delays. 
Prikladnaya Matematika i Mekhanika, 20, 315–327.
Krebs, C. J., 1998. Ecological Methodology, Benjamin Cummings, San Francisco, CA, 624pp.
Krebs, C. J., 2009. Ecology: The Experimental Analysis of Distribution and Abundance, Benjamin Cummings, 
San Francisco, CA, 655pp.
Krishnapuram, R. and Keller, J., 1993. A possibilistic approach to clustering. IEEE Transactions on Fuzzy 
Systems, 1, 98–110.
Krishnapuram, R. and Kim, J., 1999. A note on the Gustafson-Kessel and adaptive fuzzy clustering algorithms. 
IEEE Transactions on Fuzzy Systems, 7, 453–461.
Kuester, J. L. and Mize, J. H., 1974. Optimization Techniques with FORTRAN, McGraw-Hill, New York, 500pp.
Kuo, J. T., Lung, W. S., Yang, C. P., Liu, W. C., Yang, M. D., and Tang, T. S., 2006. Eutrophication modelling 
of reservoirs in Taiwan. Environmental Modelling & Software, 21, 829–844.
Lakin, W. D. and Gross, C. E., 1992. A nonlinear haemodynamic model for the arterial pulsatile component of 
the intracranial pulse wave. Neurological Research, 14, 219–225.
Lamouroux, N. and Capra, H., 2002. Simple predictions of instream habitat model outputs for target fish popu-
lations. Freshwater Biology, 47, 1543–1556.
Lamouroux, N. and Souchon, Y., 2002. Simple predictions of instream habitat model outputs for fish habitat 
guilds in large streams. Freshwater Biology, 47, 1531–1542.
Langergraber, G., 2003. Simulation of subsurface flow constructed wetlands-results and further research needs. 
Water Science & Technology, 48, 157–166.
Langergraber, G., Giraldi, D., Mena, J., Meyer, D., Peña, M., Toscano, A., Brovelli, A., and Korkusuz, E. A., 
2009a. Recent developments in numerical modelling of subsurface flow constructed wetlands. Science of 
the Total Environment, 407, 3931–3943.
Langergraber, G., Rousseau, D. P. L., García, J., and Mena, J., 2009b. CWM1: A general model to describe bio-
kinetic processes in subsurface flow constructed wetlands. Water Science & Technology, 59, 1687–1697.
Lanham, A. B., Oehmen, A., Saunders, A. M., Carvalho, G., Nielsen, P. H., and Reis, M. A. M., 2014. Metabolic 
modelling of full-scale enhanced biological phosphorus removal sludge. Water Research, 66, 283–295.
Lapointe, B. E., Tenore, K. R., and Dawes, C. J., 1984. Interactions between light and temperature on the 
physiological ecology of Gracilaria tikvahiae (Gigartinales: Rhodophyta). Marine Biology, 80, 161–170.
Legendre, P. and Legendre, L., 2012. Numerical Ecology, Elsevier B. V., Amsterdam, the Netherlands, 990pp.
Lennox, J. and Rosen, C., 2002. Adaptive multiscale principal components analysis for online monitoring of 
wastewater treatment. Water Science & Technology, 45, 227–235.
Lenzi, M., Palmieri, R., and Porrello, S., 2003. Restoration of the eutrophic Orbetello lagoon (Tyrrhenian Sea, 
Italy): Water quality management. Marine Pollution Bulletin, 46, 1540–1548.
Leslie, P. H., 1945. The use of matrices in certain population mathematics. Biometrika, 33, 183–212.
Leslie, P. H., 1957. An analysis of the data for some experiments carried out by Gause with populations of the 
protozoa, Paramecium aurelia and Paramecium caudatum. Biometrika, 44, 314–327.
Leslie Grady, C. P., Daigger, G., Love, N. G., and Filipe, C. D. M., 2011. Biological Wastewater Treatment, 
IWA Publishing; CRC Press, Boca Raton, FL, 991pp.
Levenspiel, O., 1972. Chemical Reaction Engineering, John Wiley & Sons, New York, 578pp.
Levin, S. A., Hallam, T. G., and Gross, L. J., 1989. Applied Mathematical Ecology, Springer-Verlag, Berlin, 
Germany, 491pp.
Lilliefors, H. W., 1967. On the Kolmogorov-Smirnov test for normality with mean and variance unknown. 
Journal of the American Statistical Association, 62, 399–402.
Lindenschmidt, K. E., 2006. The effect of complexity on parameter sensitivity and model uncertainty in river 
water quality modelling. Ecological Modelling, 190, 72–86.
Lippmann, R. P., 1987. An introduction to computing with neural nets. IEEE ASSP Magazine, 4, 4–22.
Ljung, L., 1999. System Identification: Theory for the User, Prentice Hall, Upper Saddle River, NJ, 609pp.
Ljung, L. and Glad, T., 1994. On global identifiability for arbitrary model parametrizations. Automatica, 30, 
265–276.
Lobry, J. R. and Flandrois, J.-P., 1991. Comparison of estimates of Monod’s growth model from the same data 
set. Binary, 3, 20–23.
Lopez-Vazquez, C. M., Oehmen, A., Hooijmans, C. M., Brdjanovic, D., Gijzen, H. J., Yuan, Z., and van 
Loosdrecht, M. C. M., 2009. Modeling the PAO-GAO competition: Effects of carbon source, pH and 
temperature. Water Research, 43, 450–462.

521
References
Lu, Y. Z., 1996. Industrial Intelligent Control: Fundamentals and Applications, John Wiley & Sons, New 
York, 325pp.
Luccarini, L., Porrà, E., Spagni, A., Ratini, P., Grilli, S., Longhi, S., and Bortone, G., 2002. Soft sensors for 
control of nitrogen and phosphorus removal from wastewaters by neural networks. Water Science & 
Technology, 45, 101–107.
Ludwig, D., Aronson, D. G., and Weinberger, H. F., 1979. Spatial patterning of the spruce budworm. Journal 
of Mathematical Biology, 8, 217–258.
Ludwig, D., Jones, D. D., and Holling, C. S., 1978. Qualitative analysis of insect outbreak systems: Spruce 
budworm and forest. Journal of Animal Ecology, 47, 315–332.
Lyons, R. G., 2011. Understanding Digital Signal Processing, Prentice Hall, Upper Saddle River, NJ, 954pp.
Macura, V., Škrinár, A., Kaluz, K., Jalčovíková, M., and Škrovinová, M., 2012. Influence of the morphological 
and hydraulic characteristics of mountain streams on fish habitat suitability curves. River Research and 
Applications, 28, 1161–1178.
Madigan, M. T., Martinko, J. M., Dunlap, P. V., and Clark, D. P., 2009. Brock Biology of Microorganisms, 
Pearson, San Francisco, CA, 1056pp.
Magurran, A. E., 2004. Measuring Biological Diversity, Blackwell, Oxford, 256pp.
Marchini, A., Facchinetti, T., and Mistri, M., 2009. F-IND: A framework to design fuzzy indices of environ-
mental conditions. Ecological Indicators, 9, 485–496.
Mareels, I. M. Y., Bitmead, R. R., Gevers, M., Johnson, C. R., Kosut, R. L., and Poubelle, M. A., 1987. How 
exciting can a signal really be? Systems and Control Letters, 8, 197–204.
Marin, G. B. and Yablonsky, G. S., 2011. Kinetics of Chemical Reactions, Wiley-VCH, Weinheim, Germany, 
428pp.
Marsaglia, G., Tsang, W. W., and Wang, J., 2003. Evaluating Kolmogorov’s distribution. Journal of Statistical 
Software, 8, 1–4.
Marsili-Libelli, S., 1986. Modelling batch BOD exertion curves. Environmental Technology Letters, 
7, 341–350.
Marsili-Libelli, S., 1991. Modelling photosynthetic oxygen production in rivers. Environmental Technology, 
12, 59–67.
Marsili-Libelli, S., 1992. Parameter estimation of ecological models. Ecological Modelling, 62, 233–258.
Marsili-Libelli, S., 1993. Dynamic modelling of sedimentation in the activated sludge process. Civil Engineering 
Systems, 10, 207–224.
Marsili-Libelli, S., 1997. Simple model of a transport/diffusion system. Proceedings of the IEEE, Control 
Theory & Applications, Part. D, 144, 459–465.
Marsili-Libelli, S., 1998. Adaptive fuzzy monitoring and fault detection. International Journal of COMADEM, 
1, 31–38.
Marsili-Libelli, S., 2004. Fuzzy pattern recognition of circadian cycles in ecosystems. Ecological Modelling, 
174, 67–84.
Marsili-Libelli, S., 2006. Control of SBR switching by fuzzy pattern recognition. Water Research, 
40, 1095–1107.
Marsili-Libelli, S. and Alba, P., 2000. Adaptive mutation in genetic algorithms. Soft Computing, 4, 76–80.
Marsili-Libelli, S. and Arrigucci, S., 2004. Circadian patterns recognition in ecosystems by wavelet filter-
ing and Fuzzy clustering. In: Proceedings of the iEMSs 2004 International Congress: “Complexity and 
Integrated Resources Management,” Osnabruck (D), Germany, pp. 63–68. 
Marsili-Libelli, S. and Beni, S., 1996. Shock load modelling in the anaerobic digestion model. Ecological 
Modelling, 84, 215–232.
Marsili-Libelli, S. and Castelli, M., 1987. An adaptive search algorithm for numerical optimization. Applied 
Mathematics and Computation, 23, 341–357.
Marsili-Libelli, S. and Checchi, N., 2005. Identification of dynamic models for horizontal subsurface con-
structed wetlands. Ecological Modelling, 187, 201–218.
Marsili-Libelli, S. and Cianchi, P., 1996. Fuzzy ecological models. In: W. Pedrycz (ed.), FUZZY MODELING. 
Paradigms and Practices. Kluver Academic Publications, Boston, MA, pp. 141–164.
Marsili-Libelli, S. and Colzi, A., 1998. Fuzzy control of a transport/diffusion system. Control Engineering 
Practice, 6, 707–713.
Marsili-Libelli, S. and Giusti, E., 2008. Water quality modelling for small river basins. Environmental Modelling 
& Software, 23, 451–463.
Marsili-Libelli, S., Giusti, E., and Nocita, A., 2013. A new instream flow assessment method based on 
fuzzy habitat suitability and large scale river modelling. Environmental Modelling & Software, 41, 
27–38.

522
References
Marsili-Libelli, S., Guerrizio, S., and Checchi, N., 2003. Confidence regions of estimated parameters for eco-
logical systems. Ecological Modelling, 165, 127–146.
Marsili-Libelli, S., Limberti, A., and Conti, A., 1997. Modelling algal growth rate for trophic testing. In: 
Proceedings of the 11th Forum for Applied Biotechnology. Universiteit Gent (B), Ghent, Belgium, 
pp. 1609–1615.
Marsili-Libelli, S. and Müller, A., 1996. Adaptive fuzzy pattern recognition in the anaerobic digestion process. 
Pattern Recognition Letters, 17, 651–659.
Marsili-Libelli, S., Nocita, A., Giusti, E., and Saccà, M., 2008. A new definition of minimum sustainable flow 
based on water quality modelling and fuzzy processing. In: iEMSs 2008 International Congress on 
Environmental Modelling and Software. Barcelona (ES), Spain, pp. 288–294.
Marsili-Libelli, S., Ratini, P., Spagni, A., and Bortone, G., 2001. Implementation, study and calibration of a 
modified ASM2d for the simulation of SBR processes. Water Science & Technology, 43, 69–76.
Marsili-Libelli, S., Spagni, A., and Susini, R., 2008. Intelligent monitoring system for long-term control of 
sequencing batch reactors. Water Science & Technology, 57, 431–438.
Marsland, S., 2015. Machine Learning: An Algorithmic Perspective, CRC Press, Boca Raton, FL, 437pp.
Mashauri, D. A. and Kayombo, S., 2002. Application of the two coupled models for water quality management: 
Facultative pond cum constructed wetland models. Physics and Chemistry of the Earth, 27, 773–781.
Mason, R. L., Young, J. C., and Charles, L., 2001. Applying Hotelling’s T statistic to batch processes. Journal 
of Quality Technology, 33, 466–479.
Massey, F. J., 1951. The Kolmogorov-Smirnov test for goodness of fit. Journal of the American Statistical 
Association, 46, 68–78.
May, R. M., 1974. Biological populations with non-overlapping generations: Stable points, stable cycles, and 
chaos. Science, 186, 645–647.
May, R. M., 1976a. Simple mathematical models with very complicated dynamics. Nature, 261, 459–467.
May, R. M., 1976b. Theoretical Ecology: Principles and Applications, Blackwell, Oxford, 489pp.
May, R. M., 2001. Stability and Complexity in Model Ecosystems, Princeton University Press, Princeton, NJ, 304pp.
Maynard Smith, J., 1974. Models in Ecology, Cambridge University Press, Cambridge, 157pp.
McMahon, T. E., 1982. Habitat Suitability Index Models: Creek Chub, FWS/OBS-82/10.4, Biological Services 
Program, Fish and Wildlife Service, Department of Interior, Fort Collins, CO, 34pp.
McMahon, T. E., Gebbart, G., Maughan, O. E., and Nelson, P. C., 1984. Habitat Suitability Index Models and 
Instream Flow Suitability Curves: Warmouth, FWS/OBS-82/10.67, Division of Biological Service, U.S. 
Department of the Interior, Washington, DC, 33pp.
Melia, P., Nizzoli, D., Bartoli, M., Naldi, M., Gatto, M., and Viaroli, P. L., 2003. Assessing the potential impact 
of clam rearing in dystrophic lagoons: An integrated oxygen balance. Chemistry and Ecology, 00, 1–18.
Metcalf & Eddy Inc., 2003. Wastewater Engineering: Treatment and Reuse, McGraw-Hill, New York, 1819pp.
Meyer, D., Chazarenc, F., Claveau-Mallet, D., Dittmer, U., Forquet, N., Molle, P., Morvannou, A. et al., 2015. 
Modelling constructed wetlands: Scopes and aims—A comparative review. Ecological Engineering, 80, 
205–213.
Michener, C. D. and Sokal, R. R., 1957. A quantitative approach to a problem of classification. Evolution, 
11, 130–162.
Mino, T., Van Loosdrecht, M. C. M., and Heijnen, J. J., 1998. Microbiology and biochemistry of the enhanced 
biological phosphate removal process. Water Research, 32, 3193–3207.
Misiti, M., Misiti, Y., Oppenheim, G., and Poggi, J. M., 2010. Wavelets and Their Applications, Wiley-ISTE, 
New York, 352pp.
Mitchell, C. and McNevin, D., 2001. Alternative analysis of BOD removal in subsurface flow constructed wet-
lands employing Monod kinetics. Water Research, 35, 1295–1303.
Mittelbach, G. G., 2012. Community Ecology, Sinauer Associates, Sunderland, MA, 400pp.
Moir, H. J., Gibbins, C. N., Soulsby, C., and Youngson, A. F., 2005. PHABSIM modelling of Atlantic salmon 
spawning habitat in an upland stream: Testing the influence of habitat suitability indices on model ­output. 
River Research and Applications, 21, 1021–1034.
Monod, J., 1949. The growth of bacterial cultures. Annual Review of Microbiology, 3, 371–394.
Morales-Zárate, M. V., Arreguı́n-Sánchez, F., López-Martı́nez, J., and Lluch-Cota, S. E., 2004. Ecosystem 
trophic structure and energy flux in the Northern Gulf of California, México. Ecological Modelling, 174, 
331–345.
Morris, R. F. and Miller, C. A., 1954. The development of life tables for the spruce budworm. Canadian Journal 
of Zoology, 32, 283–301.
Morris, W. F. and Doak, D. F., 2002. Quantitative Conservation Biology, Sinauer Associates, Sunderland, MA, 
480pp.

523
References
Mouton, A. M., Alcaraz-Hernández, J. D., De Baets, B., Goethals, P. L. M., and Martínez-Capel, F., 2011. Data-
driven fuzzy habitat suitability models for brown trout in Spanish Mediterranean rivers. Environmental 
Modelling & Software, 26, 615–622.
Mouton, A. M., De Baets, B., and Goethals, P. L. M., 2009. Knowledge-based versus data-driven fuzzy habitat 
suitability models for river management. Environmental Modelling & Software, 24, 982–993.
Mouton, A. M., Schneider, M., Depestele, J., Goethals, P. L. M., and De Pauw, N., 2007. Fish habitat modelling 
as a tool for river management. Ecological Engineering, 29, 305–315.
Mouton, A. M., Schneider, M., Kopecki, I., and Goethals, P. L. M., 2006. Application of MesoCASiMiR: 
Assessment of Baetis rhodani habitat suitability. In: 3rd Biennial Meeting of the International 
Environmental Modelling and Software Society. Burlington, VT. Available on the web at http://www 
.iemss.org/iemss2006/sessions/all.html.
Mouton, A. M., Schneider, M., Peter, A., Holzer, G., Müller, R., Goethals, P. L. M., and De Pauw, N., 2008. 
Optimisation of a fuzzy physical habitat model for spawning European grayling (Thymallus ­thymallus L.) 
in the Aare river (Thun, Switzerland). Ecological Modelling, 215, 122–132.
Mueller, A., Marsili-Libelli, S., Aivasidis, A., Lloyd, T., Kroner, S., and Wandrey, C., 1997. Fuzzy control of 
disturbances in a wastewater treatment process. Water Research, 31, 3157–3167.
Mueller, L. D. and Joshi, A., 2000. Stability in Model Populations, Princeton University Press, Princeton, NJ, 
321pp.
Mulder, J. W., van Loosdrecht, M. C., Hellinga, C., and van Kempen, R., 2001. Full-scale application of the 
SHARON process for treatment of rejection water of digested sludge dewatering. Water Science & 
Technology, 43, 127–134.
Müller, A., Marsili-Libelli, S., Aivasidis, A., Lloyd, T., Kroner, S., and Wandrey, C., 1997. Fuzzy control of 
disturbances in a wastewater treatment process. Water Research, 31, 3157–3167.
Nagy-Kiss, A. M. and Schutz, G., 2013. Estimation and diagnosis using multi-models with application to a 
wastewater treatment plant. Journal of Process Control, 23, 1528–1544.
Nelder, J. A. and Mead, R., 1965. A simplex method for function minimization. Computer Journal, 7, 
308–313.
Nelson, D. L. and Cox, M. M., 2008. Lehninger Principles of Biochemistry, W.H. Freeman, New York, 1100pp.
Nguyen, H. T., Sugeno, M. R. T., and Yager, R. R., 1995. Theoretical Aspects of Fuzzy Control, John Wiley & 
Sons, New York, 359pp.
Nicholson, A. J., 1954. An outline of the dynamics of animal populations. Australian Journal of Zoology, 
2, 9–65.
Nizzoli, D., Bartoli, M., and Viaroli, P. L., 2006. Nitrogen and phosphorous budgets during a farming cycle of 
the Manila clam Ruditapes philippinarum: An in situ experiment. Aquaculture, 261, 98–108.
Nocita, A., Massolo, A., Vannini, M., and Gandolfi, G., 2009. The influence of calcium concentration on the 
distribution of the river bullhead Cottus gobio L. (Teleostes, Cottidae). Italian Journal of Zoology, 76, 
348–357.
Nopens, I., Batstone, D. J., Copp, J. B., Jeppsson, U., Volcke, E., Alex, J., and Vanrolleghem, P. A., 2009. An 
ASM/ADM model interface for dynamic plant-wide simulation. Water Research, 43, 1913–1923.
Norton, J. P., 1986. An Introduction to Identification, Academic Press, London, 310pp.
Nowak, O., Svardal, K., and Schweighofer, F., 1995. The dynamic behaviour of nitrifying activated sludge 
system influenced by inhibiting wastewater compounds. Water Science & Technology, 31, 115–124.
Nyholm, N., 1978. A simulation model for phytoplankton growth and nutrient cycling in eutrophic, shallow 
lakes. Ecological Modelling, 4, 297–310.
Nyholm, N., 1985. Response variable in algal growth inhibition tests—Biomass or growth rate? Water Research, 
19, 273–279.
Nyholm, N. and Lingby, J. E., 1988. Algal bioassay in eutrophication research—A discussion in the ­framework 
of a mathematical analysis. Water Research, 22, 1293–1300.
Obach, M., Wagner, R., Werner, H., and Schmidt, H. H., 2001. Modelling population dynamics of aquatic 
insects with artificial neural networks. Ecological Modelling, 146, 207–217.
Odum, E. and Barrett, G. W., 2004. Fundamentals of Ecology, Cengage Learning, Andover, 624pp.
Odum, H. T., 1983. Ecosystems Ecology: An Introduction, Wiley-Interscience, New York, 644pp.
Odum, H. T., 1988. Self-organization, transformity, and information. Science, 242, 1132–1139.
Odum, H. T., 2000a. Emergy Accounting, Center for Environmental Policy, University of Florida, Gainesville, 
FL, 20pp.
Odum, H. T., 2000b. Handbook of Emergy Evaluation: A Compendium of Data for Emergy Computation 
Folio # 2: Emergy of Global Processes, Center for Environmental Policy, University of Florida, 
Gainesville, FL, 28pp.

524
References
Odum, H. T., Brown, M. T., and Brandt-Williams, S., 2000. Handbook of Emergy Evaluation Folio # 1: 
Introduction and Global Budget, Center for Environmental Policy, University of Florida, Gainesville, 
FL, 17pp.
Odum, H. T. and Odum, E. C., 2000. Modeling for All Scales, Academic Press, San Diego, CA, 458pp.
Oehmen, A., Lemos, P. C., Carvalho, G., Yuan, Z., Keller, J., Blackall, L. L., and Reis, M. A. M., 2007. 
Advances in enhanced biological phosphorus removal: From micro to macro scale. Water Research, 41, 
2271–2300.
Olsson, G. and Newell, B., 1999. Wastewater Treatment Systems, IWA Publishing, London, 742pp.
Oppenheim, A. V. and Schafer, R. W., 2010. Discrete-Time Signal Processing, Prentice Hall, Upper Saddle 
River, NJ, 1120pp.
Orhon, D. and Artan, N., 1994. Modelling of Activated Sludge Systems, Technomics Publications, Basel, 
Switzerland, 589pp.
Ossenbruggen, P. J., Spanjers, H., and Klapwik, A., 1996. Assessment of a two-step nitrification model for 
activated sludge. Water Research, 30, 939–953.
Padhi, N. P. and Simon, S. P., 2015. Soft Computing with MATLAB Programming, Oxford University Press, 
Oxford, 550pp.
Pal, N. R. and Bezdek, J. C., 1994. Measuring fuzzy uncertainty. IEEE Transactions on Fuzzy Systems, 2, 
107–118.
Pal, N. R., Pal, K., Keller, J. M., and Bezdek, J. C., 2005. A possibilistic fuzzy c-means clustering algorithm. 
IEEE Transactions on Fuzzy Systems, 13, 517–530.
Pálfy, T. G. and Langergraber, G., 2014. The verification of the constructed wetland model no. 1 implementa-
tion in HYDRUS using column experiment data. Ecological Engineering, 68, 105–115.
Palmeri, L., Barausse, A., and Jorgensen, S. E., 2014. Ecological Processes Handbook, CRC Press, Boca 
Raton, FL, 386pp.
Park, R. A. and Clough, J. S., 2014. Aquatox (Release 3.1 plus) Technical Documentation, US EPA, Office of 
Water, Washington, DC, 344pp.
Park, S. S. and Jaffé, P. R., 1996. Development of a sediment redox potential model for the assessment of post-
depositonal metal mobility. Ecological Modelling, 91, 169–181.
Passino, K. M. and Yurkovic, S., 1998. Fuzzy Control, Addison-Wesley, Reading, MA, 475pp.
Pastor, J., 2008. Mathematical Ecology, John Wiley & Sons, Oxford, 329pp.
Patyra, M. J. and Mlynek, D. M., 1996. Fuzzy Logic: Implementations and Applications, John Wiley & Sons, 
New York, 317pp.
Pavlostatis, S. G. and Giraldo-Gomez, E., 1991. Kinetics of anaerobic treatment: A critical review. Critical 
Reviews in Environmental Control, 21, 411–490.
Pearl, J., 1978. On the connection between the complexity and credibility of inferred models. International 
Journal of General Systems, 4, 255–264.
Pedrycz, W., 1993. Fuzzy Control and Fuzzy Systems, John Wiley & Sons, New York, 350pp.
Pedrycz, W., 1995. Fuzzy Sets Engineering, CRC Press, Boca Raton, FL, 332pp.
Pedrycz, W., 1996. Fuzzy Modelling Paradigm and Practices, Kluver Academic Publishers, Boston, MA, 
394pp.
Pelletier, F. J., 2000. Mathematics of fuzzy logic. The Bulletin of Symbolic Logic, 6, 342–346.
Pelletier, G. J., Chapra, S. C., and Tao, H., 2006. QUAL2Kw—A framework for modeling water quality in 
streams and rivers using a genetic algorithm for calibration. Environmental Modelling & Software, 21, 
419–425.
Pentz, M. J., 1972. Science Foundation Courses: Unit 20 Species and Populations, The Open University Press, 
Oxford, 86pp.
Persson, J. and Wittgren, H. B., 2003. How hydrological and hydraulic conditions affect performance of ponds. 
Ecological Engineering, 21, 259–269.
Petersen, B., 2000. Calibration, identifiability and optimal experiment design of activated sludge models. PhD 
Thesis. University of Gent (B), Gent, Belgium. Available on the web at http://biomath.rug.ac.be/publica-
tions/download/petersenbritta_phd.pdf.
Petersen, B., Gernaey, K., Devisscher, M., Dochain, D., and Vanrolleghem, P. A., 2003. A simplified method 
to assess structurally identifiable parameters in Monod-based activated sludge models. Water Research, 
37, 2893–904.
Petersen, B., Gernaey, K., and Vanrolleghem, P. A., 2001. Practical identifiability of model parameters by com-
bined respirometric-titrimetric measurements. Water Science & Technology, 43, 347–355.
Pielou, E. C., 1977. Mathematical Ecology, John Wiley & Sons, New York, 385pp.

525
References
Pielou, E. C., 1984. The Interpretation of Ecological Data: A Primer on Classification and Ordination, John 
Wiley & Sons, New York, 263pp.
Pohjanpalo, H., 1978. System identifiability based on the power series expansion of the solution. Mathematical 
Biosciences, 41, 21–33.
Poli, R., Langdon, W. B., and Mcphee, N. F., 2008. A Field Guide to Genetic Programming. Lulu, Raleigh, 
NC, 233pp.
Pratap, R., 2006. Getting Started with MATLAB 7, Oxford University Press, Oxford, 244pp.
Prato, T., 2007. Assessing ecosystem sustainability and management using fuzzy logic. Ecological Economics, 
61, 171–177.
Press, W. H., Flannery, B. P., Teukolsky, S. A., and Vetterling, W. T., 1986. Numerical Recipes: The Art of 
Scientific Computing, Cambridge University Press, Cambridge, 818pp.
Procyk, T. J. and Mamdani, E. H., 1979. A linguistic self-organizing controller. Automatica, 15, 15–30.
Quinney, D., 1987. An Introduction to the Numerical Solution of Differential Equations, John Wiley & Sons, 
New York, 283pp.
Raleigh, R. F., Zuckermann, L. D., and Nelson, P. C., 1986. Habitat suitability index models and instream flow 
suitability curves: Brown trout. U.S. Fish and Wildlife Service Biological Report, 82, 36–43.
Rashkovsky, I. and Margaliot, M., 2007. Nicholson’s blowflies revisited: A fuzzy modeling approach. Fuzzy 
Sets and Systems, 158, 1083–1096.
Reichert, P., Borchardt, D., Henze, M., Rauch, W., Shanahan, P., Somlyòdy, L., and Vanrolleghem, P. A., 2001. 
River Water Quality Model No. 1, IWA Scientific and Technical Report no. 12, London, 131pp.
Reichert, P. and Vanrolleghem, P. A., 2001. Identifiability and uncertainty analysis of the river water quality 
model no. 1 (RWQM1). Water Science & Technology, 43, 329–338.
Renshaw, E., 1991. Modelling Biological Populations in Space and Time, Cambridge University Press, 
Cambridge, 403pp.
Ricklefs, R. E. and Miller, G. L., 1999. Ecology, W.H. Freeman, New York, 822pp.
Rieger, L., Alex, J., Gujer, W., and Siegrist, H., 2006. Modelling of aeration systems at wastewater treatment 
plants. Water Science & Technology, 53, 439–447.
Rinaldi, S., Soncini-Sessa, R., Stehfest, H., and Tamura H., 1979. Modeling and Control of River Quality, 
McGraw-Hill, New York, 380pp.
Ringnér, M., 2008. What is principal component analysis? Nature Biotechnology, 26, 303–304.
Rioul, O. and Vetterli, M., 1991. Wavelets and signal processing. IEEE Signal Processing Magazine, 8, 14–38.
Rockwood, L. L., 2006. Introduction to Population Ecology, Blackwell, Oxford, 339pp.
Roels, J. A., 1983. Energetics and Kinetics in Biotechnology, Elsevier, Amsterdam, the Netherlands, 330pp.
Roger, J. S. and Sun, C. T., 1997. Neuro-Fuzzy and Soft Computing: A Computational Approach to Learning 
and Machine Intelligence, Prentice Hall, New York, 614pp.
Rosati, A., Metcalf, S. G., and Lampinen, B. D., 2004. A simple method to estimate photosynthetic radiation 
use efficiency of canopies. Annals of Botany, 93, 567–574.
Rosen, C., Röttorp, J., and Jeppsson, U., 2003. Multivariate on-line monitoring: Challenges and solutions for 
modern wastewater treatment operation. Water Science & Technology, 47, 171–179.
Ross, T. J., 1995. Fuzzy Logic with Engineering Applications, McGraw-Hill, New York, 600pp.
Rousseau, D. P. L., Vanrolleghem, P. A, and De Pauw, N., 2004. Model-based design of horizontal subsurface 
flow constructed treatment wetlands: A review. Water Research, 38, 1484–1493.
Royama, T., 1984. Population dynamics of the spruce budworm Choristoneura fumiferana. Ecological 
Monographs, 54, 429–462.
Royama, T., MacKinnon, W. E., Kettela, E. G., Carter, N. E., and Harting, L. K., 2005. Analysis of spruce bud-
worm outbreak cycles in New Brunswick, Canada, since 1952. Ecology, 86, 1212–1224.
Rozzi, A. G., 1984. Modelling and control of anaerobic digestion processes. Transactions of the Institute of 
Measurement and Control, 6, 153–159.
Rozzi, A. G., Merlini, S., and Passino, R., 1985. Development of a four population model of the anaerobic 
degradation of carbohydrates. Environmental Technology Letters, 6, 610–619.
Ruan, S., 2009. On nonlinear dynamics of predator-prey models with discrete delay. Mathematical Modelling 
of Natural Phenomena, 4, 140–188.
Ruano, M. V., Ribes, J., De Pauw, D. J. W., and Sin, G., 2007. Parameter subset selection for the dynamic 
calibration of activated sludge models (ASMs): Experience versus systems analysis. Water Science & 
Technology, 56, 107–115.
Rumelhart, D. E. and McClelland, J. L., 1986. Parallel Distributed Processing, MIT Press, Cambridge, MA, 
567pp.

526
References
Russell, E. L., Chiang, L. H., and Braatz, R. D., 2000. Fault detection in industrial processes using canonical 
variate analysis and dynamic principal component analysis. Chemometrics and Intelligent Laboratory 
Systems, 51, 81–93.
Sawyer, C. N., McCarty, P. L., and Parkin, G. F., 2003. Chemistry for Environmental Engineering and Science, 
McGraw-Hill, New York, 752pp.
Schneider, M., Jorde, K., Zoellner, F., and Kerle, F., 2001. Development of a user-friendly software for ecologi-
cal investigations on river systems, integration of a fuzzy rule-based approach. In: 15th International 
Symposium Informatics for Environmental Protection, Zürich, Switzerland, pp. 354–360. 
Schraa, O., Tole, B., and Copp, J. B., 2006. Fault detection for control of wastewater treatment plants. Water 
Science & Technology, 53, 375.
Seber, G. A. F. and Wild, C. J., 1989. Nonlinear Regression, Wiley-Interscience, New York, 792pp.
Seborg, D. E., Edgar, T. F., and Mellichamp, D. A., 1989. Process Dynamics and Control, John Wiley & Sons, 
New York, 717pp.
Seviour, R. J., Mino, T., and Onuki, M., 2003. The microbiology of biological phosphorus removal in activated 
sludge systems. FEMS Microbiology Reviews, 27, 99–127.
Shang, Y., Johnson, B. R., and Sieger, R., 2005. Application of the IWA Anaerobic Digestion Model (ADM1) 
for simulating full-scale anaerobic sewage sludge digestion. Water Science & Technology, 52, 487–492.
Shanno, D. F., 1970. Conditioning of quasi-Newton methods for function minimization. Mathematics of 
Computing, 24, 647–656.
Shannon, C. E., 1948. A mathematical theory of communication. Bell System Technical Journal, 27, 379–423.
Shimkin, N. and Feuer, A., 1987. Persistency of excitation in continuous-time systems. Systems and Control 
Letters, 9, 225–233.
Sin, G., van Hulle, S. W. H., De Pauw, D. J. W., van Griensven, A., and Vanrolleghem, P. A., 2005. A critical 
comparison of systematic calibration protocols for activated sludge models: A SWOT analysis. Water 
Research, 39, 2459–2474.
Snell, T. W. and Serra, M., 1998. Dynamics of natural rotifer populations. Hydrobologia, 368, 29–35.
Sokal, R. R., 1961. Distance as a measure of taxonomic similarity. Systematic Zoology, 10, 70–79.
Sokal, R. R. and Michener, C. D., 1958. A statistical method for evaluating systematic relationships. Kansas 
University Science Bulletin, 38, 1409–1438.
Sokal, R. R. and Rohlf, F. J., 1962. The comparison of dendrograms by objective methods. Taxon, 11, 33–40.
Solé, R. V. and Bascompte, J., 2006. Self-Organization in Complex Ecosystems, Princeton University Press, 
Princeton, NJ, 371pp.
Spagni, A., Buday, J., Ratini, P., and Bortone, G., 2001. Experimental considerations on monitoring ORP, 
pH, conductivity and dissolved oxygen in nitrogen and phosphorus biological removal processes. Water 
Science & Technology, 43, 197–204.
Spagni, A. and Marsili-Libelli, S., 2009. Nitrogen removal via nitrite in a sequencing batch reactor treating 
sanitary landfill leachate. Bioresource Technology, 100, 609–614.
Spagni, A. and Marsili-Libelli, S., 2010. Artificial intelligence control of a sequencing batch reactor for nitro-
gen removal via nitrite from landfill leachate. Journal of Environmental Science and Health. Part A, 
45, 1085–1091.
Spagni, A., Marsili-Libelli, S., and Lavagnolo, M. C., 2008. Optimisation of sanitary landfill leachate treatment 
in a sequencing batch reactor. Water Science & Technology, 58, 337–343.
Spindler, A., 2014. Structural redundancy of data from wastewater treatment systems: Determination of indi-
vidual balance equations. Water Research, 57, 193–201.
Starfeld, A. M. and Bleloch, A. L., 1986. Building Models for Conservation and Wildlife Management, 
Macmillan, New York, 304pp.
Steele, J. H., 1962. Environmental control of photosynthesis in the sea. Limnology and Oceanography, 7, 
115–271.
Stephanopoulos, G., 1984. Chemical Process Control: An Introduction to Theory and Practice, Prentice Hall, 
New York, 696pp.
Sterner, R. W. and Grover, J. P., 1998. Algal growth in warm temperate reservoirs: Kinetic examination of 
nitrogen, temperature, light, and other nutrients. Water Research, 32, 3539–3548.
Stevens, S. A. and Lakin, W. D., 2005. A mathematical model of the systemic circulatory system with logis-
tically defined nervous system regulatory mechanisms. Mathematical and Computer Modelling of 
Dynamical Systems, 12, 555–576.
Stojanovic, S. B., Debeljkovic, D. L., and Mladenovic, I., 2007. A Lyapunov-Krasovskii methodology for 
asymptotic stability of discrete time delay system. Serbian Journal of Electrical Engineering, 4, 
109–117.

527
References
Strang, G., 1994. Wavelets. American Scientist, 82, 250–255.
Strogatz, S. H., 1994. Nonlinear Dynamics and Chaos, Perseus Books Publications, Cambridge, MA, 498pp.
Sudhakar, K., Srivastava, T., Satpathy, G., and Premalatha, M., 2013. Modelling and estimation of photosyn-
thetically active incident radiation based on global irradiance in Indian latitudes. International Journal of 
Energy and Environmental Engineering, 4, 1–8.
Sugeno, M., 1985. Industrial Applications of Fuzzy Control, North Holland, Amsterdam, the Netherlands, 
269pp.
Svobodova, Z., Lloyd, R., Machova, J., and Vykusova, B., 1993. Water Quality and Fish Health, EIFAC 
Technical Paper. No. 54, FAO, Rome, Italy, 59pp.
Takács, I., Patry, G. G., and Nolasco, D., 1991. A dynamic model of the clarification thickening process. Water 
Research, 25, 1263–1271.
Takagi, T. and Sugeno, M., 1985. Fuzzy identification of systems and its applications to modeling and control. 
IEEE Transaction on Systems, Man, and Cibernetics, 15, 116–132.
Tay, J. H. and Zhang, X., 1999. Neural fuzzy modeling of anaerobic biological wastewater treatment systems. 
ASCE Journal of Environmental Engineering, 125, 1149–1159.
Tay, J. H. and Zhang, X., 2000. A fast predicting neural fuzzy model for high-rate anaerobic wastewater treat-
ment system. Water Research, 34, 2849–2860.
Tchobanoglous, G. and Schroeder, E. D., 1985. Water Quality, Addison-Wesley, Reading, MA, 768pp.
Theodoridis, S., Pikrakis, A., Koutroumbas, K., and Cavouras, D., 2010. Introduction to Pattern Recognition: 
A MATLAB Approach, Academic Press, Burlington, VT, 219pp.
Thomann, R. V. and Mueller, J. A., 1987. Principles of Surface Water Quality Modeling and Control, Harper & 
Row Publications, Cambridge, MA, 644pp.
Tryon, R. C., 1939. Cluster Analysis, Edwards Brothers, Ann Arbor, MI.
Tsoukalas, L. H., Uhrig, R. E., and Zadeh, L. A., 1997a. Fuzzy and Neural Approaches in Engineering, Wiley-
Interscience, New York, 600pp.
Tsoukalas, L. H., Uhrig, R. E., and Zadeh, L. A., 1997b. Fuzzy and Neural Approaches in Engineering, 
MATLAB Supplement, Wiley-Interscience, New York.
Turchin, P., 2003. Complex Population Dynamics: A Theoretical/Empirical Synthesis, Princeton University 
Press, Princeton, NJ, 450pp.
Tych, W. and Young, P. C., 2012. A MATLAB software framework for dynamic model emulation. Environmental 
Modelling & Software, 34, 19–29.
van Broekhoven, E., Adriaenssens, V., De Baets, B., and Verdonschot, P. F. M., 2006. Fuzzy rule-based macro-
invertebrate habitat suitability models for running waters. Ecological Modelling, 198, 71–84.
van Dongen, U., Jetten, M. S. M., and Van Loosdrecht, M. C. M., 2001. The SHARON-Anammox process for 
treatment of ammonium rich wastewater. Water Science & Technology, 44, 153–160.
van Loosdrecht, M. C. and Henze, M., 1999. Maintenance, endogenous respiration, lysis, decay and predation. 
Water Science & Technology, 39, 107–117.
van Tongeren, O. F. R., 1995. Data analysis or simulation model: A critical evaluation of some methods. 
Ecological Modelling, 78, 51–60.
Vandermeer, J. H. and Goldberg, D. E., 2013. Population Ecology: First Principles, Princeton University Press, 
Princeton, NJ, 263pp.
Vanrolleghem, P. A. and Keesman, K. J., 1996. Identification of biodegradation models under model and data 
uncertainty. Water Science & Technology, 33, 91–105.
Versyck, K. J., Claes, J. E., and Van Impe, J. F., 1998. Optimal experimental design for practical identification 
of unstructured growth models. Mathematics and Computers in Simulation, 46, 621–629.
Vidakovic, B. and Mueller, P., 1991. Wavelets for kids: A tutorial introduction. Victoria, 1–35.
Villegas, T., Fuente, M., and Rodríguez, M., 2010. Principal component analysis for fault detection and diag-
nosis: Experience with a pilot plant. In: Proceedings of the 9th WSEAS, Advances in Computational 
Intelligence, Man-Machine Systems and Cybernetics, Merida, Venezuela, pp. 147–152.
Von Bertalanffy, 1969. General System Theory: Foundations, Development, Applications, George Brazziler, 
New York, 269pp.
Vrecko, D., Gernaey, K. V., Rosen, C., and Jeppsson, U., 2006. Benchmark simulation model no. 2 in MATLAB-
Simulink: Towards plant-wide WWTP control strategy evaluation. Water Science & Technology, 54, 
65–72.
Walker, J. S., 2008. A Primer on Wavelets and Their Scientific Applications, Chapman & Hall/CRC Press, New 
York, 320pp.
Walsby, A. E., 1997. Numerical integration of phytoplankton photosynthesis through time and depth in a water 
column. New Phytologist, 136, 189–209.

528
References
Weijers, S. R. and Vanrolleghem, P. A., 1997. A procedure for selecting best identifiable parameters in calibrat-
ing activated sludge model no.1 to full scale plant data. Water Science & Technology, 36, 69–79.
Werner, T. M. and Kadlec, R. H., 1996. Application of residence time distributions to stormwater treatment 
systems. Ecological Engineering, 7, 213–234.
Werner, T. M. and Kadlec, R. H., 2000. Wetland residence time distribution modeling. Ecological Engineering, 
15, 77–90.
Wieland, R., Mirschel, W., Groth, K., Pechenick, A., and Fukuda, K., 2011. A new method for semi-automatic 
fuzzy training and its application in environmental modeling. Environmental Modelling & Software, 26, 
1568–1573.
Wilderer, P. A., Irvine, R. L., and Goronszy, M. C., 2001. Sequencing Batch Reactor Technology, IWA Scientific 
and Technical Report no. 10, London, 76pp.
Willems, J. C., Rapisarda, P., Markovsky, I., and Moor, B. L. M. De, 2005. A note on persistency of excitation. 
Systems and Control Letters, 54, 325–329.
Wilson, H. and Recknagel, F., 2001. Towards a generic artificial neural network model for dynamic predictions 
of algal abundance in freshwater lakes. Ecological Modelling, 146, 69–84.
Witten, I. H. and Frank, E., 2005. Data Mining, Elsevier, Amsterdam, the Netherlands, 524pp.
Wu, W., Dandy, G. C., and Maier, H. R., 2014. Protocol for developing ANN models and its application to the 
assessment of the quality of the ANN model development process in drinking water quality modelling. 
Environmental Modelling and Software, 54, 108–127.
Wynn, T. M. and Liehr, S. K., 2001. Development of a constructed subsurface-flow wetland simulation model. 
Ecological Engineering, 16, 519–536.
Yager, R. R. and Filev, D. P., 1994. Essentials of Fuzzy Modeling and Control, John Wiley & Sons, New York, 
388pp.
Yager, R. R., Ovchinnikov, S., Tong, R., and Nguyen, H. T., 1987. Fuzzy Sets and Applications: Selected Papers 
by L.A. Zadeh, John Wiley & Sons, New York, 684pp.
Yager, R. R. and Zadeh, L. A., 1994. Fuzzy Sets, Neural Networks, and Soft Computing, Van Nostrand Reinhold, 
New York, 440pp.
Yajnik, A., 2012. Wavelet Analysis and Its Applications: An Introduction, Alpha Science Intern, London, 150pp.
Yoo, C. K., Choi, S. W., and Lee, I., 2002. Disturbance detection and isolation in the activated sludge process. 
Water Science & Technology, 45, 217–226.
Yoo, C. K., Vanrolleghem, P. A., and Lee, I., 2006. Fault detection, monitoring and diagnosis of a sequenc-
ing batch reactor for integrated wastewater treatment management system. Environmental Engineering 
Research, 11, 1–14.
Young, O. R., Freeman, M. M. R., Osherenko, G., Andersen, R. R., Caulfield, R. A., Friedheim, R. A., Langdon, 
S. J., Ris, M., and Usher, P. J., 1994. Subsistence, sustainability, and sea mammals: Reconstructing the 
international whaling regime. Ocean & Coastal Management, 23, 117–127.
Young, P. C., 1970. An instrumental variable method for real-time identification of a noisy process. Automatica, 
6, 271–287.
Young, P. C., 2006. The CAPTAIN toolbox for MATLAB. In: 14th IFAC Symposium on System Identification, 
Newcastle, Australia. pp. 410–415.
Young, W. J., Lam, D., Ressel, V., and Wong, I., 2000. Development of an environmental flows decision support 
system. Environmental Modelling and Software, 15, 257–265.
Zadeh, L. A., 1965. Fuzzy sets. Information and Control, 8, 338–353.
Zeng, X., Rasmussen, T. C., Beck, M. B., Parker, A. K., and Lin, Z., 2006. A biogeochemical model for metab-
olism and nutrient cycling in a Southeastern Piedmont impoundment. Environmental Modelling and 
Software, 21, 1073–1095.
Zhang, J. and Jørgensen, S. E., 2005. Modelling of point and non-point nutrient loadings from a watershed. 
Environmental Modelling & Software, 20, 561–574.

Environmental Science
“… a clear and comprehensive exposition of not only the fundamental mathematical and 
statistical techniques needed to model environmental systems, but also of the underlying 
philosophy that produces models that are physically realistic and result in predictions that are 
relevant to taking action in the real world. The development of material in each chapter is lucid 
and will be accessible to students and the novice modeler, yet detailed enough to be of interest 
to experienced researchers. The example situations that are modeled are both interesting and 
timely. … This work is destined to become a classic in the environmental modeling literature.”
—William D. Lakin, Ph.D., Professor of Mathematics, Statistics, and Biomedical Engineering, 
Emeritus, The University of Vermont, Burlington, USA
“This book is a must for those starting out on modeling and for those who need more technical 
background, and indeed pragmatic guidance, the latter partly deriving from the author’s wealth 
of experience. Beautifully written and illustrated in a truly didactic way, it uses ecological 
models much of the time to give focus. But it really is an excellent book for anyone interested in 
understanding systems and their key concepts and methods. A bonus for students and teachers 
is the provision of MATLAB® based exercises to reinforce the learning potential and enhance 
skill development.”
—Tony Jakeman, Australian National University, Canberra
Explore the inner workings of environmental processes using a mathematical approach. 
Environmental Systems Analysis with MATLAB® combines environmental science concepts 
and system theory with numerical techniques to provide a better understanding of how our 
environment functions. The book focuses on building mathematical models of environmental 
systems and using these models to analyze their behaviors. Designed with the environmental 
professional in mind, it offers a practical introduction to developing the skills required for 
managing environmental modeling and data handling. The companion software, freely 
downloadable from the book’s web site, provides a flexible numerical playground where the 
examples illustrated in the text can be reproduced and adapted to the problem at hand.
ISBN: 978-1-4987-0635-3
9 781498 706353
90000
K24821
w w w . c r c p r e s s . c o m
6000 Broken Sound Parkway, NW 
Suite 300, Boca Raton, FL 33487
711 Third Avenue 
New York, NY 10017
2 Park Square, Milton Park 
Abingdon, Oxon OX14 4RN, UK
an informa business
www.crcpress.com
Environmental Systems Analysis
with MATLAB®
Stefano Marsili-Libelli

