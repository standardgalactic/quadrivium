© 2019 MathByte Academy

One common concrete implementation of an associative array (aka dictionary) is a hash map
Hash Maps (aka Hash Table)
Suppose we have an array of 7 slots, initially containing nothing
0
1
2
3
4
5
6
Now suppose we are going to want to store these maps
'john' à John
'eric' à Eric
'michael' à Michael
'graham' à Graham
We'll define a function that will return an integer value for all these strings ('john', 'eric', etc)
à that will be unique for each of these strings
à is between 0 and 6
à always returns the same integer for the same string
(deterministic)
© 2019 MathByte Academy

Hash Tables
0
1
2
3
4
5
6
h(s)
'john' à 2
'eric' à 4
'michael' à 0
'graham' à 5
'john'
John
'eric'
Eric
'michael'
Michael
'graham'
Graham
Storing a key/value pair:
à calculate h(key)
à idx
à store value in slot idx
Looking up a value by key:
à calculate h(key)
à idx
à return value in slot idx
© 2019 MathByte Academy

Hash Functions
Creating the function h(key) when we know all the possible keys ahead of time is easy
Reality check:
most of the time we don't know all the possible keys ahead of time
In reality, creating such a function is hard
Bounding the returned index value is not difficult
à modulo
x % 7
à 0, 1, 2, 3, 4, 5, 6
Ensuring uniqueness is hard
how to ensure that h(k1) != h(k2) if k1 != k2
maybe we don't need to…
© 2019 MathByte Academy

Hash Functions
A hash function is a function (in the mathematical sense)
! = # ⇒%(!) = %(#)
(deterministic)
that maps from a set (domain) of arbitrary size (possibly infinite)
to another (smaller) set of fixed size (range)
ℎ: * →,
where - , < -(*)
For our hash tables, we'll also want:
à the range to be a defined subset of the non-negative integers
0, 1, 2, 3, …
à the generated indices for expected input values to be uniformly distributed (as much as possible)
Note that we do allow getting the same output for different keys
i.e.    ℎ/0 = ℎ/1 ⇏/0 = /1
© 2019 MathByte Academy

Example
def h(key, num_slots):
return len(key) % num_slots
h('john', 11) à 4
h('eric', 11) à 4
h('michael', 11) à 7
h('graham', 11) à 6
collision
h('john', 5) à 4
h('eric', 5) à 4
h('michael', 5) à 2
h('graham', 5) à 1
collision
h('alexander', 11) à 9
h('alexander', 5) à 4
© 2019 MathByte Academy

Example
def h(key, num_slots):
total = sum(ord(c) for c in key)
return total % num_slots
ord('a') à 97
ord('b') à 98
ord('z') à 122
ord('A') à 65
ord('Z') à 90
ord('B') à 66
…
…
…
h('john', 11) à 431 % 11 = 2
h('eric', 11) à 419 % 11 = 1
h('michael', 11) à 723 % 11 = 8
h('graham', 11) à 625 % 11 = 8
h('alexander', 11) à 948 % 11 = 2
h('john', 5) à 431 % 5 = 1
h('eric', 5) à 419 % 5 = 4
h('michael', 5) à 723 % 5 = 3
h('graham', 5) à 625 % 5 = 4
h('alexander', 5) à 948 % 5 = 3
All these hash functions have collisions…
© 2019 MathByte Academy

Dealing with Collisions
chaining
0
1
2
3
4
['john', John]
['eric', Eric]
['michael', Michael]
[graham', Graham]
h('john', 5) à 431 % 5 = 1
h('eric', 5) à 419 % 5 = 4
h('michael', 5) à 723 % 5 = 3
h('graham', 5) à 625 % 5 = 4
h('alexander', 5) à 948 % 5 = 3
['alexander', Alexander]
© 2019 MathByte Academy

Dealing with Collisions
probing (linear)
0
1
2
3
4
h('john', 5) à 431 % 5 = 1
h('eric', 5) à 419 % 5 = 4
h('michael', 5) à 723 % 5 = 3
h('graham', 5) à 625 % 5 = 4
h('alexander', 5) à 948 % 5 = 3
['john', John]
['eric', Eric]
['michael', Michael]
['graham', Graham]
['alexander', Alexander]
other types of probing 
à must generate the same sequence of valid indices for any given key
3 à 4 à 0 à 1 à 2
1 à 2 à 3 à 4 à 0
4 à 0 à 1 à 2 à 3
3 à 4 à 0 à 1 à 2
4 à 0 à 1 à 2 à 3
Probe Sequence
© 2019 MathByte Academy

Fetching Elements
h('john', 5) à 431 % 5 = 1
h('eric', 5) à 419 % 5 = 4
h('michael', 5) à 723 % 5 = 3
h('graham', 5) à 625 % 5 = 4
h('alexander', 5) à 948 % 5 = 3
3 à 4 à 0 à 1 à 2
1 à 2 à 3 à 4 à 0
4 à 0 à 1 à 2 à 3
3 à 4 à 0 à 1 à 2
4 à 0 à 1 à 2 à 3
Probe Sequence
0
1
2
3
4
['john', John]
['eric', Eric]
['michael', Michael]
['graham', Graham]
['alexander', Alexander]
find 'michael' à hash = 3
à probe sequence:
is 'michael' at index 3?
à no
à no
à yes
3 à 4 à 0 à 1 à 2
is 'michael' at index 4?
is 'michael' at index 0?
à return item
à in reality more complex than this, but this is the basic idea
find 'alexander' à hash = 3
à probe sequence:
is 'alexander' at index 3?
à yes
3 à 4 à 0 à 1 à 2
à return item
à this is why the hash of a key should not change over it's lifetime
© 2019 MathByte Academy

Sizing Issues
When we create a hash table, how big should it be?
We don't know how big it will become
we can't make it arbitrarily large à memory constraints
à start small, and grow it over time as needed
à resizing is expensive
à recompute hashes
à move data around
à over allocate
(create more slots than necessary)
à algorithms exist to optimize the cost of doing this© 2019 MathByte Academy

Other Issues
what happens when items are deleted
à this can affect probing algorithm
à compacting the table when items are deleted
choice of hash function
gets complicated
beyond the needs of this course
à https://en.wikipedia.org/wiki/Hash_table
© 2019 MathByte Academy

