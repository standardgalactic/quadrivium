Gibberish is Displayed
This happens because the serial
monitor is receiving data at a
different speed than expected.
To fix this, click the pull-down
box that reads "*** baud" and
change it to "9600 baud".
CIRC-10
Code (no need to type everything in just)
Not Working? (3 things to try)
More, More, More:
More details, where to buy more parts, where to ask more questions.
http://tinyurl.com/c89tvd
Making it Better
Nothing Seems to Happen
This program has no outward
indication it is working. To see
the results you must open the
Arduino IDE's serial monitor.
(instructions on previous page)
Outputting voltage:
This is a simple matter of changing one line. Our sensor
outputs 10mv per degree centigrade so to get voltage we
simply display the result of getVoltage().
delete the line
temperature = (temperature - .5) * 100;
Outputting degrees Fahrenheit:
More informative output:
Changing the serial speed:
Again this is a simple change requiring only math. to go
degrees C ----> degrees F we use the formula.
( F = C * 1.8) + 32 )
add the line
Lets add a message to the serial output to make what is
appearing in the Serial Monitor more informative. To do
this first revert to the original code then change:
The change to the first line means when we next output it will
appear on the same line, then we add the informative text and
a new line.
If you ever wish to output a lot of data over the serial line time
is of the essence. We are currently transmitting at 9600 baud
but much faster speeds are possible. To change this change
the line:
Upload the sketch turn on the serial monitor, then change the
speed from 9600 baud to 115200 baud in the pull down menu.
You are now transmitting data 12 times faster.
temperature =
(((temperature - .5) * 100)*1.8) + 32;
Serial.println(temperature);
Serial.println(temperature);
---->
Serial.print(temperature);
Serial.println(" degrees centigrade");
Serial.begin(9600); ----> Serial.begin(115200);
before
Temperature Value is
Unchanging.
Try pinching the sensor with
your fingers to heat it up or
pressing a bag of ice against it
to cool it down.
Download the Code from ( http://tinyurl.com/dfj8rs)
(copy the text and paste it into an empty Arduino Sketch)
/* ---------------------------------------------
* |
Arduino Experimentation Kit Example Code |
* |
CIRC-10 .: Temperature :.
|
* ---------------------------------------------
*
*
A simple program to output the current temperature
*
to the IDE's debug window
*
For more details on this circuit:
*
http://tinyurl.com/c89tvd
*/
//TMP36 Pin Variables
int temperaturePin = 0;//the analog pin the TMP36's
//Vout pin is connected to
//the resolution is
//10 mV / degree centigrade
//(500 mV offset) to make
//negative temperatures an option
void setup()
{
Serial.begin(9600);
//Start the serial connection
//with the copmuter
//to view the result open the
//serial monitor
//last button beneath the file
//bar (looks like a box with an
//antenae)
}
void loop()
// run over and over
again
{
float temperature =
getVoltage(temperaturePin);
//getting the voltage reading from the
//temperature sensor
temperature = (temperature - .5) * 100;//converting from 10 mv
//per degree wit 500 mV
//degrees ((volatge - 500mV) times 100)
Serial.println(temperature); //printing the result
delay(1000);
//waiting a second
}
/*
* getVoltage() - returns the voltage on the analog input
* defined by pin
*/
float getVoltage(int pin){
return (analogRead(pin) * .004882814);//converting from a 0
//to 1024 digital range
// to 0 to 5 volts
//(each 1 reading equals ~ 5 millivolts
}
offset to
CIRC-10
What We’re Doing:
.:Temperature:.
.:TMP36 Precision Temperature Sensor:.
What's the next phenomena we will measure with our Arduino?
Temperature. To do this we'll use a rather complicated IC
(integrated circuit) hidden in a package identical to our
P2N2222AG transistors. It has three pins ground, signal and +5
volts, and is easy to use. It outputs 10 millivolts per degree centigrade
on the signal pin (to allow measuring temperatures below freezing there is a 500 mV offset
). To convert this from the digital value to degrees we will use some
of the Arduino's maths abilities. Then to display it we'll use one of the IDE's rather powerful
features, the debug window. We'll output the value over a serial connection to display on the
screen. Let's get to it.
One extra note, this circuit uses the Arduino IDE's serial monitor. To open this, first upload the
program then click the button which looks like a square with an antennae.
The TMP36 Ddatasheet:
http://tinyurl.com/plbx38
eg.
25 C = 750 mV, 0 C = 500mV
°
°
The Circuit:
Wire
TMP36
Temperature Sensor
x1
2 Pin Header
x4
CIRC-10
Breadboard sheet
x1
Schematic:
+5 volts
TMP36
(precision
temperature
sensor)
gnd
(ground) (-)
Arduino
analog
pin 0
gnd
+5v
signal
Parts:
the chip will have
TMP36 printed on it
.:download:.
.:view:.
breadboard layout sheet
assembling video
http://tinyurl.com/ctdjod
http://tinyurl.com/d85jyx
The Internet

