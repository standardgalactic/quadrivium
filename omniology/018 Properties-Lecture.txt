©2019 MathByte Academy

Properties
We saw that we can define "bare" attributes in classes and instances
class MyClass:
def __init__(self, language):
self.language = language 
obj = MyClass('Python')
print(obj.language)
obj.language = 'Java'
direct access to 
language
attribute
In many languages direct access to attributes is highly discouraged
Instead the convention is to make the attribute private, and create public getter and setter methods
Although we don't have private attributes in Python, we could write it this way:
class MyClass:
def __init__(self, language):
self._language = language
def get_language(self):
return self._language
def set_language(self, value):
self._language = value 
What code would you rather write?
print(obj.language)
obj.language = 'Java'
or
print(obj.get_language())
obj.set_language('Java')
©2019 MathByte Academy

Properties
class MyClass:
def __init__(self, language):
self._language = language
def get_language(self):
return self._language
def set_language(self, value):
self._language = value 
In this case, language is considered an instance property
But is only accessible via the get_language and 
set_language methods
There are some good reasons why we might want to approach attributes using this programming style
à provides control on how an attribute's value is set and returned
If you start with a class that provides direct access to the language attribute, and later need to 
change it to use accessor methods, you will change the interface of the class
any code that uses the attribute directly: obj.language = 'Java'
will need to be refactored to use 
the accessor methods instead:
obj.set_language('Java')
©2019 MathByte Academy

Python has a Solution!
We can use the property class to define properties in a class:
class MyClass:
def __init__(self, language):
self.language = language
class MyClass:
def __init__(self, language):
self._language = language
def get_language(self):
return self._language
def set_language(self, value):
self._language = value
language = property(fget=get_language, fset=set_language)
m = MyClass('Python')
m.language = 'Java'
print(m.language)
m = MyClass('Python')
m.language = 'Java'
print(m.language)
à changed an attribute to a property without changing the class interface!
©2019 MathByte Academy

The property Class
property is a class (type)
à constructor has a few parameters:
fget
fset
fdel
doc
specifies the function to use to get instance property value
specifies the function to use to set the instance property value
specifies the function to call when deleting the instance property
a string representing the docstring for the property
In general we start with plain attributes, and if later we need to change to a 
property we can easily do so using the property class without changing the 
interface
©2019 MathByte Academy

class MyClass:
def __init__(self, language):
self._language = language
def get_language(self):
return self._language
def set_language(self, value):
self._language = value
language = property(fget=get_language, fset=set_language)
m = MyClass('Python')
m.__dict__ à {'_language': 'Python'}
m.language = 'Java'
m.__dict__ à {'_language': 'Java'}
'language' is not in m.__dict__
Remember how Python looks for attributes:
à searches instance namespace first
à but also looks in class namespace
à finds language which is a property object that has get and set accessors
à uses the accessor methods
(how? à later…)
©2019 MathByte Academy

Coding
©2019 MathByte Academy

