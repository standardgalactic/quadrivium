Architecture and Governance for Communication Services

Architecture and Governance
for Communication Services
Emmanuel Bertin
Noël Crespi
Series Editor
Guy Pujolle

First published 2013 in Great Britain and the United States by ISTE Ltd and John Wiley & Sons, Inc.
Apart from any fair dealing for the purposes of research or private study, or criticism or review, as
permitted under the Copyright, Designs and Patents Act 1988, this publication may only be reproduced,
stored or transmitted, in any form or by any means, with the prior permission in writing of the publishers,
or in the case of reprographic reproduction in accordance with the terms and licenses issued by the
CLA. Enquiries concerning reproduction outside these terms should be sent to the publishers at the
undermentioned address:
ISTE Ltd
John Wiley & Sons, Inc.
27-37 St George’s Road
111 River Street
London SW19 4EU
Hoboken, NJ 07030
UK
USA
www.iste.co.uk
www.wiley.com
© ISTE Ltd 2013
The rights of Emmanuel Bertin and Noël Crespi to be identified as the authors of this work have been
asserted by them in accordance with the Copyright, Designs and Patents Act 1988.
Library of Congress Control Number: 2012954576
British Library Cataloguing-in-Publication Data
A CIP record for this book is available from the British Library
ISBN: 978-1-84821-491-0
Printed and bound in Great Britain by CPI Group (UK) Ltd., Croydon, Surrey CR0 4YY

Table of Contents
Foreword . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
ix
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
xi
Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
xv
Chapter 1. Describing Service Architectures . . . . . . . . . . . . . . .
1
1.1. The telecommunications community . . . . . . . . . . . . . . . . .
2
1.1.1. The service and global functional planes of the
intelligent network . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2
1.1.2. From TINA to the NGN. . . . . . . . . . . . . . . . . . . . . . .
8
1.1.3. The OMA and the concept of the enabler. . . . . . . . . . . .
11
1.2. The Web community . . . . . . . . . . . . . . . . . . . . . . . . . . .
16
1.2.1. Web services as fundamental structural units . . . . . . . . .
16
1.2.2. Semantic description of resources . . . . . . . . . . . . . . . .
18
1.2.3. Semantic description of Web services . . . . . . . . . . . . . .
19
1.3. The IT community . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
1.3.1. Service-oriented architectures . . . . . . . . . . . . . . . . . . .
23
1.3.2. The concept of view . . . . . . . . . . . . . . . . . . . . . . . . .
26
1.3.3. Enterprise architecture and urbanization . . . . . . . . . . . .
28
1.4. Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33
Chapter 2. Convergence of Service. . . . . . . . . . . . . . . . . . . . . .
35
2.1. Overview of communication services . . . . . . . . . . . . . . . .
35
2.1.1. Telecoms services and the NGN . . . . . . . . . . . . . . . . .
35
2.1.2. The NGN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
36

vi
Architecture and Governance for Communication Services
2.1.3. Towards convergence . . . . . . . . . . . . . . . . . . . . . . . .
47
2.1.4. Implementation of convergent services . . . . . . . . . . . . .
50
2.2. Common developments of the service sector . . . . . . . . . . . .
52
2.2.1. The service production viewpoint: from need
to service . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
54
2.2.2. The service use viewpoint: customer, consumer
and user . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
58
2.2.3. From service to service system . . . . . . . . . . . . . . . . . .
61
2.3. Application to telecoms services. . . . . . . . . . . . . . . . . . . .
63
2.3.1. Telecoms services from the point of view of
production?. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
63
2.3.2. Telecoms services from the point of view of use? . . . . . .
66
2.3.3. How to structure telecoms services? . . . . . . . . . . . . . . .
68
2.4. Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
74
Chapter 3. Building an Architectural Framework for
Telecom Services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
77
3.1. A business reference view for telecom services . . . . . . . . . .
78
3.1.1. Activities from the business view. . . . . . . . . . . . . . . . .
78
3.1.2. Service processes . . . . . . . . . . . . . . . . . . . . . . . . . . .
84
3.1.3. Application to telecom services . . . . . . . . . . . . . . . . . .
90
3.2. A functional reference view for telecom services . . . . . . . . .
91
3.2.1. Components of the functional view . . . . . . . . . . . . . . .
91
3.2.2. Functional patterns . . . . . . . . . . . . . . . . . . . . . . . . . .
94
3.2.3. Application to telecom services . . . . . . . . . . . . . . . . . .
96
3.3. A technical reference view for telecom services . . . . . . . . . .
99
3.3.1. The elements of the technical view. . . . . . . . . . . . . . . .
99
3.3.2. Technical roles and reference points . . . . . . . . . . . . . . .
102
3.4. Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
104
Chapter 4. Modeling and Case Study . . . . . . . . . . . . . . . . . . . .
107
4.1. The business reference view . . . . . . . . . . . . . . . . . . . . . .
108
4.1.1. Modeling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
108
4.1.2. Illustrations. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
109
4.2. Functional reference view . . . . . . . . . . . . . . . . . . . . . . . .
116
4.2.1. Modeling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
116
4.2.2. Illustration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
128
4.3. The technical reference view . . . . . . . . . . . . . . . . . . . . . .
142
4.3.1. Modeling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
142

Table of Contents
vii
4.3.2. Illustration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
144
4.4. Functional view of a service . . . . . . . . . . . . . . . . . . . . . .
157
4.4.1. Modeling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
158
4.4.2. Illustration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
164
4.5. The technical view of a service. . . . . . . . . . . . . . . . . . . . .
175
4.5.1. Modeling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
176
4.5.2. Illustration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
179
4.6. The applicative view of a service . . . . . . . . . . . . . . . . . . .
185
4.6.1. Modeling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
187
4.6.2. Illustration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
194
4.7. Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
208
Chapter 5. Organizational and Software Applications. . . . . . . . .
211
5.1. An aid for the construction of service offers . . . . . . . . . . . .
211
5.1.1. Service design . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
211
5.1.2. Evaluation and comparison of services . . . . . . . . . . . . .
212
5.1.3. Service management. . . . . . . . . . . . . . . . . . . . . . . . .
216
5.2. An aid for the rationalization of services. . . . . . . . . . . . . . .
218
5.2.1. The case of enablers . . . . . . . . . . . . . . . . . . . . . . . . .
218
5.2.2. The case of software service . . . . . . . . . . . . . . . . . . . .
220
5.2.3. The case of semantic services . . . . . . . . . . . . . . . . . . .
222
5.3. An aid for achieving service convergence . . . . . . . . . . . . . .
223
5.3.1. A technical pattern for the Web/IMS convergence . . . . . .
224
5.3.2. Unified access to services . . . . . . . . . . . . . . . . . . . . .
228
5.3.3. Inter-service communication. . . . . . . . . . . . . . . . . . . .
233
5.4. Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
238
Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
239
Appendix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
245
Bibliography. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
249
List of Figures and Tables. . . . . . . . . . . . . . . . . . . . . . . . . . . .
263
Index. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
269

Foreword
This book constitutes a significant advance for architects in building
communication services. The authors address the challenging issue of
compiling together service concepts gathered from various communities,
such as from Telco, the Web and information technology (IT) sectors, to
present a clear method for designing service architectures using different
perspectives: business, functional, technical and applications.
The book provides a very coherent flow. This allows the reader to obtain
an in-depth knowledge on the topic when read sequentially, but at the same
time each chapter is self-contained enough so that the reader can
comprehend each one separately.
Its broad analysis of the communication service area, the technically
sound treatment throughout, combined with a deliberately structured writing
approach make this book suitable for various purposes. First, it establishes a
solid survey for newcomers to communication services; those who wish to
learn about existing architectures in different domains and communities.
Second, it stands as a must-have reference for graduate and undergraduate
courses that include service communication topics. Third, this book is a key
tool for professionals who work in the area of communication services, as it
will help them to better understand the concepts they are handling every day,
and to define more precisely the functional and technical requirements of
service architectures by formalizing them with a simple method. This book
will be a valuable resource for network operators and service providers in
their design and organization of telecommunication services.

x
Architecture and Governance for Communication Services
Finally, the book merges perfectly the background of its authors and
incorporates, on the one hand, the pedagogy that leads to very enjoyable
reading and, on the other hand, the usefulness and timeliness of a relevant
problem that is becoming a core issue for major players in the current
Internet era.
Thomas Magedanz
Professor of the chair for Next Generation Networks at TU Berlin
Director of the Next Generation Network Infrastructures (NGNI)
Competence Center at Fraunhofer Institute FOKUS
Germany
February 2013

Introduction
Communication service architectures have been the object of numerous
studies. More recently, evolutions (revolutions) in technology, markets and
usage have forced us to reconsider how we describe these architectures.
In effect, telecoms services are no longer the prerogative of operators.
Service providers without a network make use of the universal network, the
Internet, to provide their services, such as Skype, Google and YouTube.
They do not rely on a network architecture to provide their services, but on
technical architectures that come from the Web and information technology
(IT) worlds. These service providers, who generally have a revenue model
based on advertising, have greatly changed telecom services by giving a
greater consideration of the user of a service rather than of the client of a
network access offer.
Communication services hence are evolving rapidly. They are no longer
limited to interpersonal vocal communication, but integrate functions such as
email, address books and instant messaging. The emergence of social
networks – which may also include these features – is another important
element
of
this
transformation.
Content
services
are
becoming
flagship services, and prototypes allow them to be paired up with
conversation services. As a way to best manage and profit from this
abundance of services, some service providers are offering users the tools to
combine different service features or even assemble services to respond
to their specific needs. The boundaries between different services are
becoming
ever
less
defined.
For
example,
contacts
in
an
address

xii
Architecture and Governance for Communication Services
book service can be used both when sending an email and when making a
telephone call. Thus the user can access an environment where services are
capable of interacting with each other.
Today, the idea of building a monolithic application containing all
services is an illusion at least for reasons of technical feasibility of
upgradability (for the introduction of new features). Service architectures are
becoming more and more complex as they are composed of a multitude of
interacting modules.
If the description of network architectures is relatively clear, being based
on
the
results
of
decades
of
standardization,
the
description
of
communication service architectures is much less defined. Terms denoting a
technical environment for the execution of informatics applications are often
used, such as application server (AS) and service platform or service
delivery platform (SDP), to indicate the service rendered, for example
referring to telephone AS or presence AS. Moreover, telcos tend to
standardize enablers – i.e. reusable applications in the frameworks of
different services – to provide frequently used functions, without clarifying
the construction methods of these enablers or distinguishing between the
enablers that provide a service to users and those that provide a technical
facility.
This
book
proposes
a
general
framework
to
better
describe
communication service architectures. It aims both to formalize these
architectures by using a syntax and a semantics that are common to different
services, and to respond to recurring questions about service design, such as
the identification of the functional coverage of enablers or service-
oriented architecture (SOA) services, the relevance of service compositions
to the user, and the communication between services in a converging
environment.
We begin by analyzing the existing methods of describing service
architectures in telecoms, Web and IT communities in Chapter 1. Next, we
present an overview of communication services in Chapter 2. We discuss the
changes in these communication services, matching them most generally
with the service sector of the economy. This step leads us, in Chapter 3, to
propose
invariants
for
the
formalization
of
communication
service
architectures across three views of reference: a business view, a functional

Introduction
xiii
view and a technical view. Chapter 4 deals with case studies, illustrating
these
different
views
and
their
implementation
to
describe
service
architectures. Finally, we finish with Chapter 5, where we highlight the
added value of this method through examples of organizational and software
applications.

Acknowledgements
The authors would like to extend their thanks to their colleagues who
helped them in the writing of this book, in particular Angel Cuevas, Hervé
Le Corre, Serge Fdida, Yvon Kermarrec, Luigi Lancieri, H. Shah Newaz,
Rogier Noldus, Guy Pujolle, Jacques Simonin and Djamal Zeghlache.
The authors welcome comments and suggestions for changes that could
be used for future editions of this book. Our email addresses are:
noel.crespi@telecom-sudparis.eu
emmanuel.bertin@orange.com

Chapter 1
Describing Service Architectures
This topic has already given rise to numerous works in the telecoms, Web
and IT communities. In this chapter, our objective is not to scrutinize these
works in exhaustive detail, but to extract the key results and significant
points.
What is the point of service architectures? Through the different sections
of this chapter, we will see that they allow for a response to the concerns of
stakeholders in the design of a service. Early in the process, this is achieved
by aiding the decision-makers to identify the major challenges of the service
(e.g. technical challenges and functional challenges) and their positioning in
relation to each other, including from the perspective of cooperation and cost
control. Later in the process, it is achieved by supplying the service’s
development and deployment teams with a formal and unequivocal
statement
of
requirements
concerning
the
various
features
to
be
developed/deployed and the relationships between them. The manager of a
development/deployment project can thus reach a clear vision of the tasks to
be completed. A service architecture can therefore be considered as the
setting for deliberation between the various stakeholders in the design of a
service, particularly between the numerous decision-makers (marketing,
technical, financial, etc.) and the many development and deployment teams
(network, service platforms, etc.). Given that each stakeholder has their own
vocabulary, occupation and constraints, this deliberation is publicized by
representations (the service architecture) and by people (the architects of the
service).

2
Architecture and Governance for Communication Services
Let us now specify the content of these service architectures, which we
will find in different forms later in this chapter. The term “architecture” is
usually defined in dictionaries as “the organization of the components that
make up a system”. “Organization” is defined as the “way in which a whole
is constituted for its functioning”. We could therefore define architecture as
the way in which a system is constituted by basic components for its optimal
functioning, taking into account technical and economic constraints.
Architecture is the response to requirements (services rendered, cost, reusing
existing features, etc.); these requirements being fulfilled due to the
identification of the constituent components in connection with each other.
In each section of this chapter, we will therefore return to this search for
constituent components in connection to fulfill requirements.
In this chapter, we will deliberately not deal with the term “service” in
depth. We will point out the significance of the term within each research
community, but we will not seek to analyze it in global terms; this will be
the objective of Chapter 2.
1.1. The telecommunications community
1.1.1. The service and global functional planes of the intelligent network
The world of telecoms has substantial experience of service design. It can
take us back to the concept of service in the 1970s with the switches of the
public switched telephone network (PSTN). The behavior of these switches
is defined by a state machine, defining the basic telephone service. Little by
little, telecoms operators and equipment manufacturers made possible
modifications to this basic behavior, triggered by various factors. These
modifications
were
called
supplementary
services.
They
were
first
implemented in the switches’ code. Then since the end of the 1980s, in order
to minimize delays and reduce development costs, the modifications were
also implemented in external entities, through what was called the Intelligent
Network (IN). The first service architectures that were distinct from
telecommunications infra-architectures were introduced in the 1980s with
the concept of the IN, and commercial deployments began at the beginning
of the 1990s for fixed and mobile networks.
The basic principle of the IN is to ask the switch, under certain
circumstances, to interrupt its default processing in a particular point of its
state machine in order to call on another service platform, and then to

Describing Service Architectures
3
interpret the commands received from that platform. The IN thus introduced
a dissociation between network and services, as illustrated in Figure 1.1,
taken from the “standard Q.1201” [ITU 92a].
Figure 1.1. Separation of service and access
The basic principle of the IN is to separate the call control plane (the
switches) from logic and service data held in a service platform. In the IN
model, a new functional entity is introduced in the switches, the Service
Switching Function (SSF), which has the role of interfacing the switch’s
resources with service logic held in a service platform called Service Control
Function (SCF). The protocol used between the SSF and the service platform
belongs to the Intelligent Network Application Part (INAP) family, and
allows the service platform to have a precise view of the network and to
control it to some extent. Triggering mechanisms allow the service platform
to have call control, or to be notified of certain events.
In separating the control plane from the service logic, the IN architecture
was the precursor to the Next Generation Network (NGN), which we will
discuss later.
To implement this principle in a normalized manner and to facilitate
service designs according to this method, the IN community defined a
“conceptual model” (called INCM, Intelligent Network Conceptual Model,
in ITU-T Q.1201). This model consists of four planes, each plane
corresponding to a different structural view (as discussed in section 1.3.1):
– The service plane [ITU 97a] describes an IN service such that it can be
seen by a user of the service, for example a freephone number, call
forwarding, speed dial or credit card calling.
– The global functional plane [ITU 97b] describes the course of a service,
according to a formal method, through a chain of formal components called
Service Independent Building Block (SIBs).
T1813410-91
Services
Access
Customer equipment
Service capabilities
Services
IN-structured network
Access
Access capabilities
Access
Access capabilities
(Non-IN) Sub-network

4
Architecture and Governance for Communication Services
– The distributed functional plane [ITU 93a] no longer describes the
course the service rendered, but the service’s software implementation. A
service’s implementation architecture defines the entities that have been
implemented, linked by protocols and their behavior.
– The physical plane [ITU 93b] describes the implementation of the
distributed functional plane on physical machines.
The service and global functional planes allow for the definition of
services; the distributed functional and physical planes allow for the definition
of their logical and physical fulfillment in a particular environment. Let us
discuss in detail the planes that are specifically dedicated to service
architecture: the service functional plane and the global functional plane.
In the service plane, there is a composition of service features. For
example, a freephone number service could be composed of a “call
distribution” service and a “queuing” service. The service plane is presented
in the following way in “standard Q.1202”, defined as:
The service plane illustrates the fact that services guaranteed
by the IN can be described to the final user or subscriber with
the help of a set of generic blocks called ‘service features’. (…)
A service feature is a specific aspect of a service which can
equally be used in conjunction with other services or service
features within the framework of a commercial offer. It is either
an essential part of a service or an optional section offered in
order to improve the service. The service plane represents a
view exclusively oriented towards services. This view does not
contain any information about the implementation of services in
networks (for example, an IN-style implementation cannot be
seen). All that we perceive of it is the behavior of the network
linked to the service, in the way that this behavior will appear,
for example, to a user of the service. [ITU 97a] (author’s
emphasis in italic)
As the last sentence indicates, the architecture of an IN service is
incorporated in the service plane from an external view of the service, and
not from the internal functioning of networks or platforms. In this first plane,
it is the perception of the service by its users that is fundamental. The
proposed architecture is summarized in Figure 1.2.

Describing Service Architectures
5
Figure 1.2. Architecture of service features
The IN’s standardization effort is largely based on network mechanisms,
both in fixed networks [Q.1214, Q.1218] and the mobile network
[GSM 03.78, GSM 09.78]. In both cases, standards define the behavior of
network features such as switches, service platforms and the relationships
between these.
In the 1990s, the deployment of second-generation mobile networks gave
rise to new demands regarding the IN. One of the fundamental ideas of the
Global System for Mobile Communications (GSM) is roaming, which
allows a mobile user to use coverage from a network other than his/her usual
operator, as is the case with international roaming, for example. The
interface between switch and service platform which was until then
half-open – that is, open but not specified – therefore had to become fully
specified and open. Operators whose network consisted of switches from
different manufacturers also expressed the same need to deploy a
homogeneous service in a heterogeneous network. The protocols (of the
INAP family) and procedures have since been specified in great detail in the
standard CAMEL [GSM 03.78], allowing any switch to be controlled by any
service platform. This description is primarily based on a Specification and
Description Language (SDL, [ITU 92b]) formalism adapted by the European
Telecommunications
Standards
Institute
(ETSI).
These
works
have,
however, remained at the level of interface between the service and
functional planes, defining the interactions between the service platform and
networks. In the majority of cases, services or service features are not
defined in this case in mobile networks. One reason for explaining this
absence is the necessity for the builders of these standards, manufacturers
and operators, not to reveal their strategy of service development.

6
Architecture and Governance for Communication Services
Following on from [MAG 07], we can still consider this model as a
precursor to the approaches to service composition that is currently in
fashion, for example through the so-called Web 2.0 services.
However, this breakdown of services into service features has never been
fully exploited in the IN community. First, the Q.12x2 specifications remain
silent on how to identify service features beyond the criterion of common
sense (i.e. trying to identify common points from known services). Second,
these same standards do not describe how to use service features in lower
planes to arrive at a logical architecture, particularly how to transmit service
composition in lower planes. Third, manufacturers have not used support
from these service features to specify their services from the point of view of
users. As N. Simoni highlights in [SIM 07]:
The standard cites [service features] almost as an example,
without defining the rules of architecture, nor those of service
composition.
Work on the service plane has ultimately concentrated to a large extent
on the problem of service interactions, as brought to light, for example, in
[KEC 98] – a service interaction designating an undesired behavior
occurring
when
several
services
are
triggered
during
the
same
communication. Starting from the definition of teleservices (such as the
basic call), and of supplementary services that are compatible with
teleservices but whose compatibility is to be determined case by case, formal
mechanisms of service description have been developed, for example in
SDL. These service descriptions have been strongly oriented toward the
detection, in principle, of the incompatibility between services, but have had
mixed results as detailed in [GOU 06]. These descriptions have therefore
weighed little on the service plane, where only highly visible cases of
incompatibility can be detected, but have concentrated on the other planes.
Let us move on to the global functional plane. On this plane, a service is
described as a chain of components, the SIBs. This plane is defined by the
“standard Q.1203” [ITU 97b]:
The global functional plane models the functionality of the
network from a global point of view. (…) In this plane, services
and service features are redefined in terms of large network
functions that are necessary for their support. These functions

Describing Service Architectures
7
are not specific to services or service features (SF) and are
called service independent building blocks (SIB).
SIBs are not a refinement of service features. They are independent of
services and they model, as indicated in the first sentence of the above
definition, the “large functions” rendered by the network (i.e. the switches,
IN platforms and associated resources).
A SIB is therefore a function of the technical system that supports
services, a function that we seek to isolate as unitary and combinable with
other functions to meet service needs (described in the service view). A total
of 13 SIBs are defined in “standard CS1” [ITU 93c], including, for example,
a charge for determining the charging for a call, the screen for comparing a
value with others on a list or queue for call queuing. These 13 SIBs would
have to suffice for describing all possible services from the service features
of the service plane. However, with SIBs being defined as the abstraction of
a network’s functionalities, the specificities of different manufacturers have
given rise to an excessive number of proprietary SIBs on top of standardized
SIBs.
Furthermore,
the
standardized
SIBs
were
only
approved
in
standardization after the first IN implementations, while proprietary SIBs
were already in use, thus considerably reducing their impact. Finally, given
the significant fixed costs related to the IN, there was probably a limited
number of profitable services that could be implemented.
One of the big questions left open by the conceptual model of the IN is,
without doubt: How to move from the service plane to the global functional
plane, that is how to translate a description of the behavior of a service as
perceived by the user into a description of the behavior of the network? In
the case of the IN, this translation was left to the service developer’s
expertise. Through the global functional, distributed functional and physical
planes, the intended move was from the specification of a service to the
software code. In fact, several examples of both industrial and academic
works, for instance as described in [NAJ 99], have focused on a service
creation environment allowing for the transcription of a specific service in
the form of an SIB sequence code that can be used on IN platforms. Such a
perspective has, of course, led to a more complex global functional view, as
SIBs must not only describe a service’s architecture but also accurately
specify its behavior in order to derive an implementation. Ideally, service
development work would also have been taken to the global functional plane
level. The value added by the service developer was then precisely within

8
Architecture and Governance for Communication Services
the transition from service plane to global functional plane, and in theory the
other transitions could be automated. In practice, this approach has never
been made operational. On the one hand, as we have said, the aim of
automation requires the service description to become more complex,
making it a de facto service code and also the IN expert’s prerogative; on the
other hand, this automation has never been fully achieved since manual
recovery/transfer of the final code is always necessary.
In this work, we will retain the distinction between service description in
the service plane and network behavior modeling in the global functional
and distributed functional planes of the IN. We will not go into detail here
about service creation, for example by the generation of a code from a
service architecture description, but will limit ourselves to the consideration
of several viewpoints to describe service architectures, which will constitute
a reference to development teams.
1.1.2. From TINA to the NGN
The
Telecommunications
Information
Networking
Architecture
Consortium (TINA-C) initiative, described, for example, in [INO 98],
attempted to surpass the IN’s limitations but did not address the issue of the
transition from service plane to global functional plane. The concept of a
generic service session, independent of the executed services1, has instead
been defined – a session being a temporary relationship between objects for
the completion of a task within a given time (these objects will be both an
abstraction of features perceived by users and of technical features). The first
requirement of TINA-C is as follows:
1: Support of a wide range of services. The TINA service
architecture has to support telecommunication, management
and information services and should be open to allow the
introduction of new classes of services. The service architecture
addresses the evolution of services, and should be able to
support new requirements and business needs. [INO 98]
To fulfill this requirement, several roles and several session types have
been defined, as illustrated in Figure 1.3.
1 In doing so, it may have announced the NGN, which will be specified without an explicit
vision of service as we will see in Chapter 2.

Thes
marketp
followin
applicat
IT worl
path for
particul
On t
Standar
Global
telecom
together
services
layers o
this stan
– bas
processi
se works ar
place than o
ng [MAG 07
tions in the t
d with servic
r the conside
arly object m
the Internati
rdization Sec
Information
mmunications
r, as present
s are concern
of service, cl
ndard, we can
seware funct
ing and stora
Figure 1.3. T
re doubtless
of a service
7], that these
telecoms wo
ce-oriented a
eration of th
methods and
ional Teleco
ctor (ITU-T
n
Infra-arc
s,
informati
ted, for exam
ned, the Y.1
lassified acco
n distinguish
tions, includ
age functions
TINA-C session
sly closer t
architecture
e concepts di
rld, but in fa
architectures
he IT world’
software com
ommunicatio
) side, work
hitecture
(G
ion
and
e
mple, in [AS
10 standard
ording to the
h:
ding informat
s;
Describing
n architecture
to the defin
e. It is also
id not lead t
act found sol
(SOA). TIN
’s methods i
mponents.
on Union –
k has been
GII)
in
or
ntertainment
SA 96] or [M
[ITU 98a] d
e functions t
tion transpor
Service Archite
nition of a
surprising
to the deploy
lid applicatio
NA-C also op
in telecoms
Telecommu
carried out
rder
to
br
t
industries
MOR 98]. A
defines a typ
that support
rtation funct
ectures
9
service
to note,
yment of
on in the
pened the
services,
unication
t on the
ring
the
s
closer
As far as
pology in
them. In
tions and

10
Architecture and Governance for Communication Services
– middleware
functions,
based
on
baseware
functions,
including
application/service creation functions.
Figure 1.4. Typology of GII functions
In Figure 1.4, the arrow from function A to function B means that
function A supplies a service to function B, and therefore that function B
uses function A. Information transportation functions are, for example, those
of an Integrated Services Digital Network (ISDN), PSTN or the Internet.
Processing and storage functions can include those of a PC, STB (set-top
box), file server or video server. Middleware functions include security,
format conversion, authentication, billing and conference bridges. However,
this model does not come with instructions on the conditions of its validity
and lifespan, and progress in telecoms services in recent years would require
its modification. It is probably lacking in uniformity between baseware
(abstraction of transport resources and processing/storage of information)
and middleware (which are transverse functionalities between services and
resources) functions. This division could therefore be used to describe a
service, but it cannot really describe a service architecture.
The ETSI has also distinguished different service types. In the technical
specification TS 22.101, the last version being [3GPP 09], communication
services are divided into conversational services, messaging services,
fonctions de transport
fonctions de traitement
et de stockage
fonctions intergicielles
applications
les utilisateurs et leurs applications
services de télécommunication
services de traitement et de stockage
services intergiciels
Users and their applications
applications
Middleware functions
middleware services
telecommunications services
processing and storage services
Processing and storage
functions
Transportation functions

Describing Service Architectures
11
retrieval services and broadcasting services, whether this is controlled by the
user (e.g. with video on demand) or not (e.g. with television). However, this
distinction remains high level and there is a lack of explanation of its origin
and conditions of validity.
More recently, as part of the NGN, which will be described at the
beginning of Chapter 2, several initiatives have grown around services.
There have been debates [COC 02] to determine whether the NGN should
standardize services, or whether the services should remain exclusively the
responsibility of service providers who use the NGN. The economic model
of European operators as service providers (not just providers of network
infrastructures) and their wish to distinguish between themselves through
services, linked with the desire to “cash in” the NGN deployments with
services, has led several standardizing bodies to take a greater interest in
services.
1.1.3. The OMA and the concept of the enabler
The Open Mobile Alliance (OMA)2 is a consortium, founded in 2002,
that brings together telecoms and IT industries with the following aim:
The mission of the Open Mobile Alliance is to facilitate
global user adoption of mobile data services by specifying
market driven mobile service enablers that ensure service
interoperability across devices, geographies, service providers,
operators, and networks while allowing businesses to compete
through innovation and differentiation.
This objective is a good summary of the position of standardization
organizations in relation to services. To avoid standardizing services and
facilitate the possibility of a differentiation between operators in terms of
something other than tariffs, the OMA, and also the ETSI and ITU-T, opted
to standardize service capabilities, called service capabilities by the 3rd
Generation Partnership Project (3GPP), service support capabilities by the
ITU-T and service enablers by the OMA. The ITU-T’s service support
capabilities typically include [CAR 05] presence, localization, group
management,
message
management, broadcast/multicast or
equipment
management. The ETSI’s service capabilities are, for example, presence
2 http://www.openmobilealliance.org/

12
Architecture and Governance for Communication Services
[3GP 07a], messaging [3GP 07b] or conference calling [3GP 07c]. The
OMA’s service enablers bring together [OMA 07b] data synchronization,
equipment management, electronic rights management, downloading, email
notification, instant messaging, presence or mobile localization. These
features, which for the sake of simplicity we will collectively call enablers,
are reusable application modules, whose behavior toward their environment
is fully specified. Theoretically, an enabler from one manufacturer could
even be used by another manufacturer’s service platform. This approach
allows for greater interoperability between equipment, operators and service
providers. It also creates the possibility of an improved user experience.
Effectively, each enabler has a clearly defined responsibility, for example for
data such as user presence or preferences, which means that the user only
has to enter this information once for all the services that need it. Indeed, if
each service requiring user presence as information were to implement a
function to capture and publish it, the user would have to publish his/her
presence (or install client presence software) as many times as the services.
With a presence enabler, the enabler centralizes this information and
distributes it to all the relevant services, simplifying interaction with the user
and reducing the network load generated by the use of presence. In more
technical cases, such as the synchronization of data between mobile terminal
and service platform, the service will not reuse an information but will reuse
a synchronization mechanism between the service and the terminal.
Enablers can be seen as building blocks for the construction of services,
as presented in the article [BER 04]. While SIBs must be considered as
logical operators (e.g. SIB Compare, SIB Screen and SIB Translate), entirely
independent of services specified by their sequence3, enablers are not
independent of the offered service but constitute a feature of it, which is
reusable in other services. An enabler can be approximated in this sense by a
service feature of the IN’s service plane. The difference with a service
feature lies in the fact that an enabler prescribes not only the service
rendered but also its technical fulfillment and the application interface to
access it, as shown in the OMA’s definitions:
(an enabler is) A technology intended for use in the
development, deployment or operation of a service; defined in a
specification, or group of specifications, published as a package
by OMA. [OMA 07a]
3 This aspect is also highlighted by the fact that they are called “service independent”.

Describing Service Architectures
13
An enabler should specify one or more public interfaces.
[OMA 07b]
An enabler can be seen as a variation in the telecoms world principal
of the reusable software component of SOA, which we will introduce
in
the
following
section.
Work
on
enablers
continues
in
the
Application Programming Interface (API) specification movement for
telecommunication networks, notably on the initiative of the Parlay group,
founded in 1998. Parlay’s initial aim was to specify application interfaces over
telecoms call control equipment to allow third-party service providers to fulfill
simple services, for example click-to-dial. The group then aligned itself more
with
the
ETSI’s
Open
Service
Access
(OSA)
initiative.
Common
specifications have therefore been published, most notably for call control,
messaging and presence APIs [MOE 03].
An enabler differs nevertheless from an API as from an SOA service, as
it is specified not only by its interface but also by its place in an
environment, constituted by other enablers, network resources and services,
all linked by reference points. Unlike SOAs, it does not have a unique access
protocol such as http, but integrates into a complex protocol environment.
Furthermore, while the semantics of operations to be fulfilled by an SOA
service is unique to that service, this semantics will be induced by the
protocol. The behavior of an enabler is also specified in more detail than that
of an API. Finally, an enabler is based on precise technology (such as
syncML for data synchronization), whereas an API is generally regarded as
independent from the underlying technology, but with this often being
reflected through the API’s input parameters.
In addition, as indicated in the OMA’s definition above, an enabler
presents a normative character (defined in a specification). Ultimately, a
component or a technology constitutes an enabler through standardization.
The ITU-T, the ETSI and the OMA therefore do not propose criteria for
determining the coverage of an enabler, but a method “standardization”, and
a concerted standardization between enablers. In effect, if they were
specified independently from one another, there would be a risk of the
enablers partially overlapping, i.e. that they would offer redundant functions.
Service providers would therefore have difficulty combining different
enablers to make a service. As shown by the OMA, we would be in the
following situation:

14
Architecture and Governance for Communication Services
Integration and deployment of services is complicated and
expensive; high implementation efforts for applications wanting
to use several capabilities; there is no common integration of
the different services from the point of view of the end-user
(e.g. no common group management or user profile across
multiple services). [OMA 07b]
To avoid this, the OMA has introduced the notion of the intrinsic
function, which is defined as:
those functions that are essential in fulfilling the intended
task of the specified enabler. For example, the Position
Calculation function is intrinsic to Secure User Plane Location;
Authentication is intrinsic to Single Sign On; Encryption is an
intrinsic function of Digital Rights Management. [OMA 07b]
The OMA specifies that an enabler should only contain intrinsic
functions:
any requirements or features that are not intrinsic to an
enabler
should
not
be
specified
within
the
enabler’s
specification.
This requirement gives assurance that different enablers will not offer the
same function. This guarantees that, for example, there will not be an
authentication function in every enabler, although most do require one. This
idea of intrinsic function does not, however, fully deal with the question of
the functional coverage of enablers. First, an intrinsic function can mean
either a service functionality, perceived by the user – such as a contact group
management or user profile function – or the abstraction of a technology –
such as a push or watermarking function. Furthermore, the separation of
intrinsic functions is not clear. It remains ultimately subjective, as
recognized by the OMA:
The classification of intrinsic and non-intrinsic is subjective
and needs to be done on a per enabler basis.
OMA enablers, ETSI service capabilities and ITU-T service support
capabilities are important tools for the convergence of services that we will
discuss in Chapter 2. They effectively allow different telecoms services to

Describing Service Architectures
15
share and reuse data and functions. But their construction method is heavily
linked to standardization. It is due to the contradicting arguments on
standardization that their functional coverage (their intrinsic functions) can
be determined and legitimized.
How can this method for building converging services be extended within
service providers or operators? Can an operator structure his/her services by
building his/her own enablers? How? One solution is to implement instances
of “standardization” inside service providers, with the same role as in
organizations such as the OMA in constructing non-redundant and legitimate
enablers. But due to the hierarchical nature of businesses, the debate will
probably be less controversial than in the case of standardization that has
been developed taking into account different viewpoints and interests.
Another solution, which could support the first solution, is to implement
rules and procedures – conforming to the functioning methods of big
business – on the one hand to identify the service functions that could be the
subject of an enabler, and on the other hand to help service development
teams to identify the relevant enablers for their projects, and allow them, in
principle, to validate the consistency of a service created in this way. In
Chapters 3 and 4, we will present an approach that can provide the basis for
such rules and procedures.
To conclude this exploration of the notion of service in the telecoms
world, let us emphasize two points. First, we need to consider the service
plane of the IN and the related notion of service features. These service
features are a first step toward reusable service components for the
fulfillment of different services. Second, the notion of the enabler, which has
extended the service component concept by coupling the service rendered
with an effectively reusable implementation. This pairing between service
rendered and implementation makes service architectures uniform by
imposing just one technical solution to respond to service needs. This in fact
leads to a complete standardization of enablers, which restricts their
lifecycles (an enabler will take time to be specified and to be implemented).
It therefore also restricts the services’ lifecycles, if they are supposed to be
based as much as possible on the enablers.
We will now examine the description of service architectures in the Web
community.

16
Architecture and Governance for Communication Services
1.2. The Web community
1.2.1. Web services as fundamental structural units
From an architectural point of view, the Web can be seen as a group of
resources that is accessible via hypertext links. These resources are the
fundamental architectural units of the Web. The term “resource” is to be
understood in the following way, according to the RFC 3986 Uniform
Resource Identifier (URI): Generic Syntax:
The term ‘resource’ is used in a general sense for whatever
might be identified by a URI.
Familiar examples include an
electronic document, an image, a source of information with a
consistent purpose (e.g. ‘today’s weather report for Los
Angeles’), a service (e.g. an HTTP-to-SMS gateway), and a
collection of other resources.
A resource is not necessarily
accessible via the Internet; e.g. human beings, corporations, and
bound books in a library can also be resources.
Likewise,
abstract concepts can be resources, such as the operators and
operands of a mathematical equation, the types of a relationship
(e.g. ‘parent’ or ‘employee’), or numeric values (e.g. zero, one,
and infinity).
In the Web community, a service is thus seen as a resource among others,
in the same way as an electronic document or an image, the service being,
like any resource, accessible by a URI. Once the fundamental mechanisms of
the Web were in place, the Web community started becoming more
specifically interested in services in the early 2000s, by specifying
mechanisms dedicated to services. The World Wide Web Consortium
(W3C) defines a Web service in the following way:
A Web service is a software system designed to support
interoperable machine-to-machine interaction over a network. It
has an interface described in a machine-processable format
(specifically WSDL, Web Services Description Language).
[http://www.w3.org/TR/ws-gloss/]
More precisely, a Web service is an application or a software component
with the following properties:
– It is identified by a URI.

Describing Service Architectures
17
– Its interfaces and links (binding) can be defined in Extensible Markup
Language (XML), particularly in WSDL.
– Its definition (interfaces and service links) are discoverable by other
Web services, for example by a Universal Description Discovery and
Integration (UDDI) registry.
– It can interact directly with other Web services via XML and the use of
Internet Protocol.
A technical reference architecture for Web services has emerged rapidly
[CHA 03]. This architecture is made up by the Web service’s requester,
provider and registry. The Web service provider publishes the services
he/she is offering in a Web service registry. The Web service requester
consults this registry to find the right service, and then makes contact with
the corresponding provider.
As shown, for example, in [KAR 07], these concepts can work in
conjunction with those of TINA-C’s broker and retailer or with Parlay’s
framework [MOE 03].
Figure 1.5. Reference architecture in Web services
Web services are described by their interface, usually in WSDL, which
specifies the service’s features, i.e. its input and output parameters. In the
Web community, therefore, a service architecture consists of a group of Web
services interacting in the pattern shown in Figure 1.5. A broader reflection
on the links between services has been conducted, particularly in the context
of the semantic Web community.
Web service registry
Web service requester
Web service provider
publish
find
bind (access)

18
Architecture and Governance for Communication Services
1.2.2. Semantic description of resources
The term Semantic Web, attributed to Tim Berners-Lee [BER 01], covers
a vision rather than precise tools. This vision can be summarized in the
following aim: enable machines to consider Web-based information sources
and take higher level information from them in order to respond to requests.
For example, automatically creating a list of French neo-classical painters, or
of the works of a particular author, starting out from the raw information
available on the Internet. Methods based solely on keyword searching or
textual proximity to keywords are not sufficient for these tasks. They do not
allow for a distinction to be made between, for example, books by Albert
Camus and books about Albert Camus, or between a painter working within
a trend or rejecting that trend, as textual proximity to the search terms could
come up in both cases. This kind of data manipulation by machines creates a
need for an information architecture that can be accessed via the Internet in a
formalism allowing for the automatic processing of numerous and varied
sources. For this purpose, the semantic Web community has adopted the
concept of metadata, a metadatum being a piece of data used to describe
another data [BER 01]. All informational resources can be described by
metadata.
Unlike
basic
data,
metadata
follow
a
semantics
that
is
comprehensible to machines. These metadata are not keywords, but are
rather structures. Thus, a painter and his/her alignment with an artistic trend
could be indicated by metadata attached to a painting. In order to be efficient
metadata will, of course, have to use keywords such as “neo-classical”. The
Resource Description Framework (RDF) model, published in 1999, allows
for the description of resources with the help of metadata, as well as the links
between metadata4. Artificial intelligence software called inference engines
can then conduct logical reasoning using metadata.
An agreement on a selective and coherent list of the metadata to use to
describe resources is, however, unrealistic in an environment as broad and
open as the Web. The Semantic Web community has therefore also worked
on models of knowledge representation. This work has produced ontology
languages like the Ontology Web Language (OWL); an ontology being
understood, according to T.R. Gruber’s [GRU 93] famous definition, as:
4 A metadatum or a link can also be considered as a resource and described with the aid of
other metadata.

Describing Service Architectures
19
The specification of a conceptualization of a field of
knowledge.
An ontology therefore defines a set of metadata for the description of a
domain, and the relations between these metadata through preconditions. An
ontology can therefore take into account the relationships between metadata.
They are usually intended to be created and shared by several people
working in the same knowledge field. Someone wishing to describe a
resource can therefore attach the metadata he/she uses for this to an existing
ontology, by indicating the relationships between the metadata and the
ontology concepts to which they refer. An ontology can be constructed, and
also automatically generated, from a set of representative structured
documents, but this can give mixed results as discussed, for example, in
[BED 08].
1.2.3. Semantic description of Web services
The Semantic Web community has sought to apply these principles to
Web services. It has also taken an interest in service description, launching
initiatives for the addition of a semantic description to Web services, as
shown, for example, in [ZEN 01, ZHI 07] or [ARR 06]. Web services are
thus considered as resources and described by metadata, which we refer to as
service ontology. Two complementary directions were investigated. On the
one side, specifications were proposed for the addition of semantic
annotations to WSDL files, such as Semantic Annotations for WSDL
(SAWSDL) [MEN 07]. On the other side, other specifications aimed, in a
more ambitious but less incremental way, at describing a service in all its
different dimensions rather than just its input and output parameters. Two
Web services with the same signature could effectively perform completely
different services. A service with an input parameter of two telephone
numbers could, for instance, just as well be a click-to-dial service as a call
forwarding service from the first number to the second. Specifications such
as OWL for Services (OWL-S) aim at supporting the construction of Web
service description ontologies. A Web service has three dimensions: the
service profile, the process model and the grounding. The service profile
described what service is rendered, the process model described how the
service is used, and the grounding describes how to interact on a practical
level with the service. The profile and the process model are abstract
characterizations of the service, while the grounding forms the relationship

20
Architecture and Governance for Communication Services
between these abstract descriptions and the concrete messages exchanged by
the producer and the consumer of the Web service, via a given protocol.
Other works have concentrated on the construction of Web service
marketplaces. These works aim to create an environment of discovery and
access to services, which are described semantically according to coherent
ontologies. This would enable the discovery of services from a user’s
statement of requirement, thanks to the inference mechanisms. In addition,
semantic annotations would facilitate the automatic creation of a service to
respond to a certain requirement. Works such as [SHI 08] or [LEC 09]
propose
a
correspondence
algorithm
between
the
input
and
output
parameters of a Web service, these being described semantically in order to
detect the relationships between them (equivalence, affiliation, etc.). A chain
of Web services can thus be automatically conceived in response to a
statement of requirement in the form of input and output parameters. The
semantic Web community proposes an automatization of services’ discovery
and of service composition tasks, by categorically modelizing the knowledge
of humans who could do these tasks. In a target view, users would be able to
express (in natural language, for example) their requirement so that a service
can be automatically created to respond to it, the marketplace relying for this
on the services it registered. This marketplace would link numerous services
without formerly agreed consistency, the selection of services and their
consistent functioning being assured by semantic technologies (such as
semantic annotations, ontologies and inference engines). The notions
describing each service and the users (preferences, profile and context)
would be defined as ontologies. Reasoning on these ontologies would ensure
coherence between these notions. These approaches aim to resolve the
difficulties (that we will discuss in the following section) for SOA services,
such as service identification, service granularity and service lifecycle
management.
In terms of telecoms architectures, work has been undertaken on ontology
construction for communication services, such as in the IST SPICE project
(http://ontology.ist-spice.org/index.html). Service marketplaces are also the
subject of study for telecoms services, as in the CELTIC Servery project
(http://projects.celtic-initiative.org/servery/).
However,
these
remain
prospective, as they face several obstacles.

Describing Service Architectures
21
Figure 1.6. Marketplace concept in the CELTIC Servery project
First, a problem of critical mass and industrial maturity, as indicated in
[HAM 07]. Semantic tools are still in the academic development phase, and
ontological construction and inference tools remain largely unused outside of
research projects, as their relevance, reliability and ease of use are not
currently fully adequate. There is also a scaling problem, particularly in
terms of performance and complexity management.
A more fundamental problem is the lifecycle of an ontology. In the
semantic paradigm, the relevance of the response to a given need relies on
the quality of the ontology that enables the linking of metadata describing
services and user needs. How can these ontologies be created and
developed? It could be done centrally, by a team responsible for the
consistent construction and maintenance of an ontology. But this team might
then neglect the problems of completeness, lifecycle, service identification
and service granularity that these mechanisms were supposed to resolve. The
ontological tool therefore holds only a weak advantage over less developed
processes such as the specification of a list of metadata. It could also be done
automatically, by detecting the most commonly used keywords in service
interfaces and linking these together. But as can be seen in [BED 08], such
automatic
mechanisms
are
only
relevant
if
based
on
a
consistent
classification, and otherwise will produce inconsistent ontologies. Semantic
service annotation also poses a problem. If this annotation is created
centrally, by a team responsible for the semantic annotation of new services,
the benefit is minimal compared with a more traditional system such as the
one advocated for the lifecycle management of SOA services. And in the
case of a marketplace providing many services, this team would soon be
overstretched. But requiring service designers to mark up their services
Utilisateur
Telcos
Fournisseur
de Service
Services,
Ressources,
Produits
Management
Composition
Publication
Découverte
Consommation
Contrôle d'accès
Publication
place de marché
SERVERY
TELCOs
Service
Provider
User
Marketplace
Management
Services,
Resources,
Products
Discovery
Use
Design
Publication
Publication
Access control

22
Architecture and Governance for Communication Services
themselves by referring to an existing ontology would be extremely
restricting. They would effectively have to be familiar not only with
semantic tools and languages but also existing ontologies, and be able to
form a link between the concepts they handle and those of the ontology,
which practically equates to the task of service specification in the semantic
form. We often see, as shown, for example, in [HEP 07] or [ROC 07], a lag
between the technical vocabulary of service developers and that of service
users. Correspondence between the two is not immediately accessible, as it is
not about translation or finding synonyms but two different perspectives of
the service, without an unequivocal link between the concepts handled by
each.
Furthermore, there is a contradiction that can be revealed between the
approach of SOAs and the semantic approach. In effect, the semantic Web,
as shown, for instance, in [PAT 07], follows a white box or open-world
paradigm, i.e. the universe of discourse tends to encompass all services
offered, including the detail of their properties [ROL 00]. On the other hand,
SOA service platforms, as we will see in the following section, have a black
box or closed-world approach, exposing as little as possible of their internal
functioning, in order to guarantee a loose coupling between different
services.
Finally, the semantic paradigm requires data to be comprehensible to
machines, without doubt to the disadvantage of humans. Like some of the
formal SDL descriptions in the fixed IN, an ontology is not instantly
readable; semantic data are designed first and foremost to be read by
machines. This makes it difficult to generalize these methods for service
architecture design.
What should we retain from this journey? Unlike the telecoms
community, which sought to identify service components independently of
each other and then link them to perform a service, the Web community and
the Semantic Web community emphasize the importance of links as essential
vehicles of knowledge. Services, and even service features or the so-called
unitary services, are not completely independent blocks. There are links,
prerequisites
and
dependencies
between
services
and
with
infra-
architectures, which semantic methods seek to accurately capture in
ontologies. In this work, we will not position ourselves explicitly in the
semantic paradigm, but we will try to respond to the above questions, left

Describing Service Architectures
23
open by this paradigm, via a classification of telecoms services and the links
between different perspectives of a service.
1.3. The IT community
The term information technology (IT) refers to the whole of enterprise
computing. The Information Technology Association of America (ITA,
http://www.itaa.org/) defines the term IT as:
The study, design, development, implementation, support or
management
of
computer-based
information
systems,
particularly software applications and computer hardware.
1.3.1. Service-oriented architectures
In the IT world, work on services is guided by the needs of information
systems (IS). An IS can be defined as follows [OBR 97]:
An information system is a set of people, procedures and
resources that collects, transforms and disseminates information
in an organization.
Information systems are a key tool in the strategy of a business; their job
is to implement business processes by serving as a support to information
management. The computerized realization of an IS is called an informatics
system. The alignment of the IS with a company’s business is a major
challenge, as detailed, for example, in [HEN 93] or [SIM 07].
However, the business of services companies is evolving toward a
decompartmentalization of organizational entities in order to respond to
client needs. This evolution is especially observable in the economic sector
of services, as we will see in Chapter 2. IS should therefore evolve from a
very compartmentalized “vertical” organization, where each organizational
entity manages its IS autonomously as they do not need to communicate or
exchange (the business processes they support being unique to one
organizational entity), to a more “horizontal” organization, where the IS of
the different organizational entities continually make exchanges to support
transverse processes between the company’s various functions, in order to
respond to client needs. Let us consider, for example, the domain of banking

24
Architecture and Governance for Communication Services
insurance. If, 15 years ago, a banking network could make a client change
their account number when they changed branch, today
that same client
could not only keep their account number but also use it to access various
financial and insurance products via multiple distribution channels (branch,
call center and Web). This decompartmentalization is also the rule in the
e-commerce sector, as shown, for example, in [MOR 03].
The
IT
world
created
the
SOA
concept
to
facilitate
this
decompartmentalization. In the SOA paradigm, IS applications are broken
down into software services, i.e. independent application units that fulfill a
fixed and limited business function, accessible via an open and defined
interface; this concept of software service was essentially implemented with
the aid of Web services, seen previously. SOA has been defined by its initial
proponents, IBM, in [CHA 03] as:
an application architecture within which all functions are
defined as independent services with well defined invokable
interfaces which can be called in defined sequences to form
business processes.
In the methods of analysis of business processes, such as [SIM 04],
following [BOO 99], a business process is understood as:
a sequence of management actions carried out by a
company, which produces a result whose value is perceptible
and measurable value to an individual subject of the modeled
domain [SIM 04].
In the SOA paradigm, this sequence of management actions can be
carried out by a chain of calls to software services, at least when these
management actions are computerized. Business processes can also be
specified in appropriate language, such as the Business Process Modeling
Language (BPML), and this description can be translated into a script of the
software services to be linked, expressed in Business Process Execution
Language (BPEL), for example.
As well as this concept of software services, the SOA approach also
specifies architecture principles. Software services must be:

Describing Service Architectures
25
– highly cohesive, i.e. all the functions offered by one software service
must be consistent and not incongruous;
– loosely coupled, i.e. a software service must only handle data from
outside its area of responsibility via other software services, and not do so
directly.
Different software services can then be put together, i.e. used one after
another to create a more complex service. For example, a software service
for automatic translation followed by one for sending text messages would
give the possibility of sending a translation via a text message. Linking
service A and service B is possible as long as service A has an output
parameter that is of the same type as an input parameter of service B.
Languages such as BPEL allow for the specification of such links, including
logical conditions. These scripts or software services are a means of
automating business processes.
But in attempting to achieve business processes with the aid of software
services, the IT community found that the principle challenge was not
technical. Technically, invocation protocols or specification languages for
the sequencing of software services are operational. But the main challenge
resides in the identification of software services to be built. How can the
boundary of these independent application units be defined? Should a
software service be fine-grained, with a service identifiable by function, or
more coarse-grained, with a set of consistent functions performing a business
objective? With fine-grained services there is a risk of overabundance; it
could be impossible to manage the lifecycles of every service, and difficult
for a designer to determine what services to use. With coarse-grained
services there is a risk of a lag between the business objectives that
historically governed the establishment of a service and the current
objectives. These objectives vary depending on the business strategy and the
external environment (regulation, legislation, competition, market, etc.)5.
And how can independence between services be maximized when the
services are coarse-grained? These issues are, in fact, quite similar to those
of enablers that we encountered earlier.
5 A section of the IT community has studied the alignment between the strategy of a
company, its business processes and its information system, for example [HEN 93, BLE 06]
or [SIM 07].

26
Architecture and Governance for Communication Services
Transposition of the SOA paradigm to communication services is
efficient to a certain extent. It makes it possible to provide reusable access to
some functions of platforms and telecommunications networks; these
functions often being those identified by Parlay, such as click-to-call,
geolocation or the sending of text messages. This transposition does,
however, face a major pitfall. Software services in the IT world are initially
designed to access IS functions, classically data processing functions.
Invoking a service means either requesting data or requesting the processing
of data. The value of a communication service in itself lies not in its capacity
to process data but in its capacity to put things in relation to each other. The
heart of a communication service cannot therefore be reduced to a series of
requests/responses between machines, as different stakeholders will be
implicated in the service, for instance the maker and the receiver of a call in
a
telephone
service.
Protocols,
such
as
Session
Initiation
Protocol
(SIP, [IET 02]) or Simple Mail Transfer Protocol (SMTP), which structure
exchanges between parties are essential for communication services, but are
not included in the SOA paradigm, where protocols are not seen as a support
for the invocation of software services. Furthermore, the SOA paradigm
does not consider essential aspects of communication services, such as the
quality of the human–machine interface, or the network effect (or network
externality) based on the use of a given protocol, carrying a given semantics.
In this work, we will propose a method of describing communication
services that responds to the concerns raised. The identification of the scope
of services from a non-software point of view related to the business of the
service provider, then the construction of an application architecture that can
take into account both the software services and the usual protocols of the
telecoms world. We will now see how the IT community has formalized this
notion of a point of view to describe the architecture of a system.
1.3.2. The concept of view
Faced with the complexity of informatics systems, the software
engineering community has gradually developed concepts to master this
complexity. In the 1990s, notably under the impetus of the Object
Management Group (OMG), it adopted the concept of view. The “standard
IEEE 1471” [IEE 00], for example, defines the concepts of view and point of
view in the following way:

Describing Service Architectures
27
A view is a representation of a whole system from the
perspective of a related set of concerns.
A point of view is the specification of the mode of constructing a view:
A viewpoint is a specification of the conventions for
constructing and using a view, a pattern or template from which
to develop individual views by establishing the purposes and
audience for a view and the techniques for its creation and
analysis. [IEE 00]
The standard also introduces the attributes of a view:
Each viewpoint shall be specified by a viewpoint name, the
stakeholders to be addressed by the viewpoint, the concerns to
be addressed by
the viewpoint, the language, modeling
techniques, or analytical methods to be used in constructing a
view based upon the viewpoint. [IEE 00]
Each view of a system must therefore respond to the concerns of the
stakeholders in a system. For an IS, these stakeholders will be, for example,
the final user of the system, the architect, the developer or the manager.
This concept of point of view has been employed in numerous
frameworks. One of the most famous is without doubt the 4 + 1 framework
proposed by Kruchten [KRU 95]. As the name suggests, it proposes four
points of view on the system, linked by scenarios illustrating the system’s
essential functionalities.
Figure 1.7. Points of view in the 4 + 1 framework [KRU 95]

28
Architecture and Governance for Communication Services
The attributes of these views (as presented) are described in Table 1.1.
Point of view
Logic
Process
Development
Physical
Scenarios
Objective
Indicate the
service that the
system is to
provide
Indicate the
competition and
synchronization
aspects of the
design
Describe the
static
organization
of the
software
Describe the
implementation
of software onto
hardware
Discover the
key concepts of
the design and
validation
Stakeholders
Architect, user
Architect,
designer,
integrator
Architect,
developer,
manager
Architect,
designer
Architect, user,
developer
Concerns
Functionalities
Performance,
availability, etc.
Organization,
reusability,
portability,
etc.
Scalability,
performance
Comprehension
Modelization
concepts
Classes,
associations,
heritage
Events,
messages
Subsystems,
components
Machinery,
bandwidth
Classes, events,
stages
Table 1.1. Points of view in the 4 + 1 framework
Following this work, the concept of the point of view will play a key role.
It is comparable with the IN’s plane concept, but clarifies it. While the IN
planes can be seen as a layered architecture, with designers only considering
the plane above theirs, the concept of view is more flexible and specifies the
criteria for the constitution of a view, as a tool for responding to the concerns
of the stakeholders in a system. We will now examine how this concept of
view has been applied to IS.
1.3.3. Enterprise architecture and urbanization
Enterprise Architecture (EA) and urbanization methods emerged before
SOA methods, as a variation of the concept of view in the framework of
business IS. But these methods remain relevant for implementing SOAs, as
they aim to take on the major difficulty discussed above, i.e. the
implementation of software services that are consistent with the company’s
strategy.

Describing Service Architectures
29
EA methods aim to facilitate the evolution of business IS. They offer a
representation of the IS through different views, in order to make it
comprehensible to the decision-makers while also ensuring a certain amount
of consistency between the decision-makers’ view, the development teams’
view and the hosting teams’ view. They generally work within four key
steps, as shown in [SIM 09] or [URB 06]:
– mapping what exists, i.e. identifying and describing the company’s
resources (human or software) and their positioning in the IS, as well as their
responsibility for the information handled by the IS;
– defining an ideal target that fully conforms with the company’s
strategy;
– moving toward the target, i.e. setting tasks to achieve within a certain
time in order to move the existing IS closer to the target;
– itemizing these tasks in development projects. The architecture that is
implemented in these projects must therefore fit in with the target.
In the British and American works, numerous EA methods have been
proposed, including frameworks by Zachman [ZAC 87], the Department of
Defense
Architecture
Framework
(DoDAF,
http://dodcio.defense.gov/
Portals/0/Documents/DODAF/DoDAF_Volume_I.pdf) [DoD], The Open
Group Architecture Framework (TOGAF, http://www.opengroup.org/togaf/)
and
the
Information
Technology
Infra-architecture
Library
(ITIL,
http://www.itil-officialsite.com/home/home.asp). There is, thus, such an
abundance of EA methods that some [SCH 03] describe this as a jungle.
These different methods are generally defined with a liberal perspective.
They are relatively unrestrictive (for the modelization of points of view, for
example) and do not seek to hierarchize and systemize this modelization, the
most important thing being the dynamics that are sparked in the company
[SAL 08].
In France, a more constrained framework has been born with the
urbanism of IS. Urbanization emerged in big businesses during the 1990s,
particularly in the banking sector, faced with controlling their IS. Jacques
Sassoon, the first urbanization project manager at Crédit Agricole and later
the Société Générale popularized the application of the city metaphor to IS
[SAS 98]. From this perspective, an IS can be structured, like a Haussman-
style town, into zones, districts and blocks, linked by communication routes.
This division into blocks, as well as the rules of construction applicable to

30
Architecture and Governance for Communication Services
each block, can be rationally documented in the image of a British Local
Development Plan (formerly the Local Plan). A validation committee can
then authorize or not authorize each modification project of an IS depending
on whether or not it respects the rules that apply to the block in which it is
located. These principles were completed, notably by Christophe Longépé,
who was in charge of urbanization at Sema and then at the Société Générale,
by formalizing views, with a model and rules associated with each view. He
also distinguishes four viewpoints on the IS in [LON 06], the division into
blocks being essentially the prerogative of functional and applicative views:
– “The business process view, that describes the business processes and
also the relationships between them;
– the functional view, that describes the functions that the information
system has to support;
– the applicative view, that describes all the software elements of the
computer system that automates the information system;
– the technical view, that describes the overall technical architecture.”
In other words, the business view responds to the question of “why”, the
functional view responds to the question of “what”, the technical view
responds to the question of “with what” and the applicative view responds to
the question of “how” [SIM 09]. Urbanization is therefore defined as the
process of applying these principles to a particular business.
Urbanization is to organize the gradual and continuous
transformation of the information system, to simplify it, to
optimize its added value and to make it more responsive and
flexible towards strategic business changes, while relying on
technical opportunities of the market. It defines rules and a
coherent, stable and modular context, in which different
stakeholders are referring to any investment decision in the
Information System. [Urba-EA]
As highlighted by Contini [CON 02], urbanization rests, unlike EA
methods, on the presupposition that sufficiently stable invariants can be
identified to hierarchize the blocks and enforce rules that will endure, if not
forever then for a long time. In fact, in his first urbanization plan for the
Société Générale, J. Sassoon considered bank products, basic units offered
by a bank, to be sustainable. C. Longépé formalizes this concept by

Describing Service Architectures
31
considering several types of invariants: those coming from the business
view, called concept classes; those linked to the aims of a business IS (an
exchange zone, a data repository zone, a referential zone for data and rules, a
steering zone, an operations zone and a resource zone); those coming from
the technical view, such as the three-tier model of technical architecture.
This concept of the invariant is not immediately compatible with the agile
enterprise model, constantly adapting to external developments to maximize
its profits. A problem, but also without doubt an interest, of urbanization lies
in the identification of these invariants in the company’s business, beyond
tactical developments. By applying this process to telecoms services in
Chapter 3, we will further discuss this question of invariants for
communication services.
The principles of EA and urbanization have already been applied by
telecoms operators – not to telecoms services, but to the internal activities of
operators or telecoms service providers. In other words, the task of defining
a framework and the organization of an IS was carried out on services’
fulfillment, billing and supervision, but not on the use of these services.
Importantly, to telecoms operators the term “information system” denotes
systems that carry out these actions of fulfillment, billing and supervision,
but not the service platforms that provide the service. Historical reasons
explain this. Operators have long provided only network services, i.e. the
establishment of a connection. The key challenge was therefore the
implementation of this connectivity at the network equipment level (via their
provisioning), billing and supervision6. In their urbanization processes,
operators therefore focused on their internal processes, and not on the
processes that they shared with their clients.
These tasks have been notably executed by a standardization organization
called the TeleManagement Forum (TMF). The key areas addressed by the
TMF in this sector are the definition of a reference framework of business
processes, the definition of a set of standard business processes, the
definition of systems for the realization of business processes and
the implementation of solutions. The TMF has therefore formalized the
enhanced
Telecom
Operation
Map
(eTOM)
model,
summarized
in
Figure
1.8.
For
more
details,
see
eTOM
(http://www.tmforum.org/
BestPracticesStandards/BusinessProcessFramework/1647/Home.html).
6 Recent work has, however, applied the principles of urbanization to network services,
notably F. Menai in [MEN 05]

32
Architecture and Governance for Communication Services
Figure 1.8. eTom reference framework
The rows and columns in Figure 1.8 constitute the invariants that we just
mentioned for telecoms service management. The rows represent the main
domains of the IS, which can be compared to areas of urbanization. These
are the customer relationship, service management, resource management
and supplier management. The columns represent the main groups of
business processes internal to telecoms operators:
– fulfillment, to sell and implement a service;
– assurance, to guarantee the quality of the desired service;
– billing, to invoice the service that has been provided;
– operations support and readiness, to ensure the smooth running of all
the above processes.
As we have indicated, this work has not addressed what the value of a
service brings to its users, i.e. the use of this service. Service platforms are
seen as resources, in the same way as a router or a switch. But service
platforms are stakeholders in a system. They support interactions with users.
And they interact with other service platforms and with networking
equipment, so that a service is guaranteed from end to end. The usual
questions concerning the urbanization of IS, such as arranging in blocks,

Describing Service Architectures
33
dividing functional responsibilities between these blocks and the means of
communication between themselves, fully apply to current service platforms,
of which the architecture needs to be structured and streamlined. We will
see in Chapter 2 how this need of the architecture arises from the evolution
of communication services to user-centric services, centered on the user.
Unlike the approach proposed, for example, in [VUD 03], an extension of
eTOM to take service use into account does not seem relevant. The
invariants of services are not effectively the same as those of internal service
management processes, which are summarized in the columns and rows in
Figure 1.8. In Chapter 3, we will determine what is stable in rapidly evolving
services.
1.4. Summary
At the beginning of this chapter, we defined architecture as the way in
which a system is constituted by basic components for its optimal
functioning. What are these basic components in the telecoms, Web and IT
communities? They are, without doubt, network functionalities for IN
services, service platforms for NGN services, resources for the Web and
software services for SOAs.
If these components are defined case by case and without a fixed method,
we could soon fall into the traps of over-abundance, confusion and lack of
control. With urbanization and EA methods, we have seen that to orient the
conception of these features toward a company’s strategy, we must identify a
target, as well as invariants to use as a basis for identifying these
components, to describe their relationships. The search for these invariants is
not the prerogative of urbanization, but crosses the telecoms, Web and IT
communities. These are the service features and SIBs for IN services,
enablers for NGN service platforms, ontology concepts for Web resources
and business process activities for SOA services. For communication
services, the search for invariants often lacks method, partly due to not
showing how to manage their lifecycle (why and how to introduce or remove
them?) and partly due to not always clearly distinguishing between the
different aspects of a service (functional, technical and applicative). We will
now see in Chapter 2 what the basic features that make up telecoms
services are.

Chapter 2
Convergence of Service
Before trying to describe telecoms service architectures, we must
accurately detail the characteristics of these services and how they evolve.
Section 2.1 provides an overview of current communication services and
concludes that there are a lack of comprehension tools and design rules for
these new services. As communication services are part of the broader sector
of services in general, in section 2.2 we will put the new communication
services back into the common trends of the economic service sector and
seek to determine how the evolution of the service sector can help us to
better understand this. This will lead us in section 2.3 to emphasize the
central role of users in the new generations of services.
2.1. Overview of communication services
Let us point out straightaway that the term “service” will not be used here
in the software sense seen in Chapter 1 for Web services. A service is
defined here as an immaterial business activity made available by a service
provider and offering an added value to a user [GRI 06]. As we will see,
telecommunications
activities
also
necessitate
numerous
interactions
between user and service provider.
2.1.1. Telecoms services and the NGN
Unlike Internet services, telecoms services have not historically been
driven by usages, but by technology, and particularly standardization. This

36
Architecture and Governance for Communication Services
has been the case, for example, for the public switched telephone network
(PSTN),
the
GSM
(Global
System
for
Mobile
Communications)
Supplementary
Services
and
the
IN
services.
The
carrying
out
of
standardization activities clearly implies a view to offer services and
developments in the business of operators, but this view remains largely
implicit. However, standardization actors first agree on a global technical
view, on technical objectives to fulfill. The last big wave of standardization
in communication services is the NGN, which was developed by ETSI via
the IP Multimedia Subsystem (IMS). The NGN’s principles were defined at
the end of the 1990s by telecoms operators and equipment manufacturers in
order to respond to the need to reduce operations and capital costs, and to
allow for the creation of new applications. The services that could be offered
by operators were then conditioned to the access network used, for example
the GSM for IN mobile services with CAMEL, and the PSTN for IN-fixed
services. The technical view of the NGN was therefore to unite the different
operator networks (the PSTN, the GSM network and the data network) into
just one network that would support several services. This was done by
following a layer pattern that is traditional to telecoms: layer N provides
interfaces to layer N + 1 and uses the interfaces provided by layer N – 1. The
NGN also generalized the principle of separation between signaling and
media streams, which has been introduced in the PSTN and the GSM with
the semaphore network, a logical network dedicated to signaling transport,
and adopted by the voiceover IP protocols defined at the end of the 1990s at
the Internet Engineering Task Force (IETF) with real-time protocol (RTP)
and then at the ITU with H.323 [ITU 96] and H.248 [ITU 98b].
2.1.2. The NGN
The NGN refers generally to communication and multimedia network
architectures that were first specified at the end of the 1990s, and whose
design/deployment cycle runs mainly from 2000 to 2015. It brought
innovation in the form of a formal separation and independence between the
transport, control and service levels, by using a shared IP transport network
for all services, regardless of the access type used. The NGN was designed
to be open to a wide range of services and as a means of achieving the
convergence of data and conversational services, via the transformation of
the architectures and mechanisms of the core PSTN and GSM networks, in
order to combine the reliability and control of these telephone networks with

Convergence of Service
37
the flexibility and openness of the Internet. This transformation was
motivated by several factors:
– the development of access networks and the arrival of broadband;
– the generalization of the IP protocol to become the only transport
protocol;
– the development of usages towards multimedia services converging
voice/data (mainly via the internet) and fixed/mobile telephone services.
The choice of a packet core network for the NGN necessitated the
introduction of new types of communication protocols, especially for data
transport, and for the establishment of communication sessions.
2.1.2.1. Definition and functional architecture
All the NGN’s definitions overlap on these major points:
– multiple broadband access networks: xDSL, 3G or 4G;
– one single/sharable core network for different types of access and
different types of multimedia services;
– a core network architecture that is separated into three layers for
transport, control and services as per the ETSI (see Figure 2.1) or into two
strata for transport and service as per the ITU (see Figure 2.2), with
standardized and open interfaces being defined between each layer.
Regarding an NGN network’s architecture according to the ITU,
[KNI 05] distinguishes a service stratum and a transport stratum (see
Figure 2.1). The transport stratum includes:
– the data transfer functions of the core network and access networks,
such as UMTS Terrestrial Radio Access (UTRAN), wireless local area
network (WLAN) and Digital Subscriber Line (xDSL);
– the control functions of these transfer functions (e.g. monitoring the
registration of a terminal to a network, or admission control);
– the user profile at transport level (e.g. data relating to registration in the
network);
–
media
stream
manipulation
functions
(e.g.
playing
vocal
announcements or transcoding).

38
Architecture and Governance for Communication Services
The service stratum includes:
– service control functions (e.g. establishing call sessions or triggering
services);
– the user profile at service level (e.g. the list of subscribed services that
can be triggered);
– applicative functions, which are independent of service control
functions and should offer the necessary flexibility for the fulfillment of
various services. These applicative functions can be added later by the
service control during the session establishment process and can also initiate
or terminate sessions.
In the ETSI’s work, the control functions of the transport and service
strata are merged in a same control layer.
These functions and their architecture are represented in Figure 2.2.
The technological vision that led to the standardization of the NGN was
clear and well supported, as we have just seen. This vision was relevant at
that time, since on the one hand, it was in continuity with the historic
development of telecoms into multiservice networks and on the other hand,
it was based on fairly general technologies and protocols (such as session
initiation protocol (SIP)), even if this often results in the addition of some
specific features. However, the vision of services that are achievable with the

Convergence of Service
39
NGN has never been formalized. Effectively, the majority of the telecoms
community that worked on the standardization of the NGN considered that
the definition of services was not within its jurisdiction. In 2002, the
following phrase was written by Jean-Yves Cochennec, vice chair of the
SG13 commission at the ITU-T, in an article aiming to popularize the work
being carried out around the NGN [COC 02]:
To face the explosion of user demand for new services,
NGN should support the provision of all kinds of services.
Figure 2.2. NGN architecture
This quotation illustrates the lack of a clear requirement for the services
that would be offered by the NGN. In other words, the NGN was not
developed to respond to precise service needs but to be generic and
independent of the services offered. In the IN, a process going from the
specification to the implementation of services was defined with the four
planes of the INCM, including the definition of service features on the
service plane and of SIBs on the global functional plane. No equivalent
conceptual framework has been defined for NGN services. Although

40
Architecture and Governance for Communication Services
attempts have been made to do so, especially by Parlay/OSA, a recognized
and normative framework for NGN services has not been defined. This
approach can be explained by the desire to offer a multiservice network, thus
not prejudging the services offered. But what is valuable for the lower layers
of a network is no longer valuable for applicative functions. The choice of
protocols and mechanisms at the control layer level create limits and
constraints on what services are achievable. These limits have not been set,
discussed or clarified. The NGN community could, for example, have
defined a domain of validity for the NGN: what types of service is the NGN
useful for, and when is it not useful? These reflections were made a
posteriori, for example with the controversy over the usefulness of the IMS.
It is true that responding to these questions is a delicate matter, particularly
because of the strong link between service and technology in the telecoms
culture. Similarly, with the definition of the mobile IN, even though the
major technical developments were based on a set of requirements for
normalized and specified services in what the ETSI calls “stage 1”, there was
no major reflection on how to describe its aims and application domains, and
the choice of used services was eventually made empirically, guided by the
technical means made available for these services. Let us now detail these
technical means within the NGN.
2.1.2.2. Historical motivations of the NGN
As we have seen, the NGN architecture is based on the separation
between the transport, control and service functions for the user. The
transport functions in a multimedia communication network allow physical
access to the network and the routing of all multimedia streams between
communicants.
In contrast, in a traditional telephony architecture (PSTN and GSM), a
particular type of access is associated with a core network and a specific

Convergence of Service
41
service architecture. In fact, in the PSTN, the switches simultaneously
manage terminal access, switching and service delivery. The NGN
architecture opens this model and ensures the separation of the transport and
control functions of the core network. A multimedia communication needs
multiple control functions: terminal registration, media stream admission
control, establishment of multimedia sessions and control of network
resources. These functions handle the signaling exchanges needed for the
establishment of a session from a terminal and manage the transport layer.
Signaling in NGN architectures is dominated by SIP protocol, which was
designed
for
the
establishment,
modification
and
termination
of
communication sessions (voice/video, conferences, presence information
management, event notification, instant messaging, etc.).
Uses of telecommunication services have greatly evolved since the
normalization of the PSTN and GSM networks. Users are now at the center
of their means of communication and use them in complementary and
coordinated ways. Traditional means (of reaching a far-off contact) have
been improved by:
– the use of new means of communication (from instant messaging to
videoconferencing);
– the use of new means of controlling availability (from call forwarding
to presence management);
– differentiated use of means of communication depending on context
(professional, personal, mobility, etc.);
– new usages (from IPTV to quadruple play offers and online social
networks).

42
Architecture and Governance for Communication Services
The very first vocal calls on data networks were established with the RTP
protocol [IET 96]. Communication just needed to be established between
two users on an IP network. The establishment of a connection assumes that
the two parties agree, via another means of communication, on parameters
such as the IP address, port and codec used. This simple method has major
problems, particularly the fact that the users have to know the different IP
addresses of the people they want to contact – which is not simple,
especially when a dynamic address system is used. It was therefore
necessary to define complementary protocols at the applicative level that
would allow the establishment of communication. However, the RTP
remains widely used today for the transportation of media streams, by
combining it with other protocols such as SIP.
2.1.2.3. The IP Multimedia Subsystem
IMS is a subsystem specified by 3GPP and defines an architecture that is
capable of providing a set of communication services to users by using,
among others, the UMTS or enhanced packet system (EPS) packet domain
as the access network. IMS then evolved to take other packet domains into
account, such as WLAN, DSL and PacketCable. This major evolution of
UMTS toward an all-IP network is a concrete example of the use of the
NGN’s principles.
2.1.2.3.1. IMS entities
The IMS architecture is built up from the following components:
– mobile equipment (User Equipment (UE)).
– the IP-Connectivity Access Network (IP-CAN). The role of the IP-
CAN is to interconnect the UE with the IMS or with an external IP service
domain, other than IMS.
– IMS applications held in Application Servers (ASs).
The entities that make up the IMS architecture can be put into three
categories: (1) control plane entities (call session control functions (CSCFs),
home subscriber server (HSS)), (2) entities for interworking with other
network domains, such as the circuit domain (breakout gateway control
function (BGCF), media gateway control function (MGCF), signalling
gateway (SGW)), and (3) ASs and media resource control platforms (AS,
media resource function controller (MRFC), media resource function
processor (MRFP)). This is schematically depicted in Figure 2.5.

Convergence of Service
43
Figure 2.5. General architecture of IMS
Functional entities providing session control are particular SIP servers
called CSCFs. A major contribution of the IMS architecture is the distinction
between several functional types of SIP server. This separation, which
makes it possible to distinguish between those functions relating to access
and those relating to service provision, is very important for a clear
definition of information exchange in a roaming situation, in the multi-
operator context and in a multi-vendor context. Three types of CSCF
constituting the session control layer can be distinguished:
– Proxy-CSCF (P-CSCF): this is the first point of contact of the IMS for
users1. The P-CSCF forwards SIP messages to the mobile equipment,
Interrogating-CSCF (I-CSCF) or Serving-CSCF (S-CSCF), depending on the
session case. The P-CSCF also ensures the integrity of the SIP signaling by
maintaining a security association with the user, and controls the execution
of media policies. The P-CSCF is further responsible for compression and
decompression of SIP messages in order to reduce signaling on the radio
path between user and network. Like other CSCFs, it generates call data
records (CDR), which are necessary for taxation and which get collected by
the gateway charging function (GCF).
1 In practical deployment, a session border gateway (SBG) may be functionally connected
between UE and P-CSCF.

44
Architecture and Governance for Communication Services
– I-CSCF: this is the point of contact for all connections intended for a
user or service in the network, especially external connections. During the
registration phase, the I-CSCF interrogates the HSS in order to determine the
S-CSCF associated with the user (if already registered). It is the point of
entry into the network for all SIP signaling. It can also apply topology hiding
inter-network gateway (THIG) function by hiding the configuration and
topology of the network from external viewing.
– S-CSCF: this is the functional entity responsible for session control and
service support. Another main function of the S-CSCF is registrar: subscribers
of the IMS network deposit their contact address in the registrar. This enables
the registrar to forward SIP messages toward the destination subscriber’s
terminal (using that terminal’s contact address). The S-CSCF ensures the
authentication and authorization of users, executes media policies and forwards
SIP messages. As with the IN, here the fundamental notion of triggering allows
the session control to be passed to the service layer. This triggering is based on
the use of filtering criteria called the initial filter criteria (iFC), which describe
the conditions and modalities of the triggering.
The interface between the S-CSCF and the service layer (the IMS Service
Control, or ISC, interface) is based on SIP protocol and allows access to
services located in the ASs. An AS can be located in the operator network or
in a third-party network (i.e. network operated by a party other than the
operator) and, unlike IN, the same protocol is used up to the service layer as
is used between the SIP servers in the IMS network. In IMS service
architecture, such as that defined in [3GP 02a], three types of AS host the
service logic and form the service execution layer [3GP 02a]: SIP ASs,
CAMEL Servers and OSA. In practice, only the SIP ASs are used. Let us
note that services can be composed from service capabilities such as
Multimedia
Telephony
[3GPP
09,
3GPP
10],
Presence
[3GP
04a],
Multimedia Messaging [3GP 04c] and Conferencing [3GP 04b].
Certain applications can also be executed directly in a SIP-Proxy (especially
S-CSCF) that has been specially adapted for frequently used services and that
do not require subscriber data (e.g. displaying error messages).
The media resource function (MRF) is the functional entity responsible
for the handling of media streams (on the user plane) and is used for, among
others, mixing RTP streams (e.g. for conferencing services), the generation
of announcements (voice/video) and transcoding. The MRF is made up of

Convergence of Service
45
two functional entities: the MRFC, which receives SIP messages from ASs,
and the MRFP, which is responsible for the processing of multimedia
streams. The MRFP is controlled by the MRFC, or directly from a SIP-AS,
via the H.248 protocol [ITU 98b].
The HSS is the master database of an IMS network, where user data are
stored. According to 3GPP specifications, the HSS includes the Home
Location Register (HLR) and the Authentication Centre (AuC). In practical
use, HSS (for IMS and EPS) and HLR/AuC (for CS and PS network) may be
separate functional entities. The HSS stores users’ identities, registration
information, access parameters and service triggering information. When
network has several HSS (in almost all cases), the subscription locator
function (SLF) is used to locate the HSS associated with a user.
2.1.2.3.2. Triggering
3GPP has defined mechanisms for invoking ASs, which makes it possible
to pass control to the service layer. The requirement is quite similar to that of
the IN: not to invoke each service systematically but to do so specifically
once the triggering criteria are met. As in the case of the IN, service data are
associated with triggering criteria.
IMS triggering mechanisms are based on filter criteria and service point
triggers (SPTs) [3GP 05]. The iFC allow the S-CSCF to trigger, in a
predetermined order, the invocation of services in ASs for a session or stand-
alone transaction. The SPT defines the triggering criteria that must be met in
order to invoke a service. These filters are used statically and downloaded
via the Cx interface from the HSS when a S-CSCF is assigned to the user, or
upon receipt of an incoming request for an unregistered user [3GP 08,
3GP 02b]. Once a user is registered in an S-CSCF, the iFC are active and
permit the triggering of the services that are associated with that user.
Figure 2.6 shows the distribution of iFC in the HSS and the S-SCSF.
A Filter Criteria contains the following information:
– address of the AS to be contacted;
– priority of the FC;
– Trigger Point composed by one or more SPTs;
– the treatment to be applied by default if the AS is not reachable;

46
Architecture and Governance for Communication Services
– optional service information that shall be added to the message body
before it is sent to the AS.
Figure 2.6. Service triggering in IMS
If the S-CSCF receives a SIP request and the triggering criteria are met, it
passes control to the service layer: it invokes the service by sending SIP
message to the corresponding AS. The triggering only applies to initial
requests and therefore the service invocation mechanism is static.
If a user has subscribed to several services, several iFC will be present in
his/her service profile. When the S-CSCF receives a SIP request, it first
verifies whether the triggering criteria are met for the iFC with the highest
priority. If the triggering criteria are met, it sends the request to the
corresponding AS. The AS executes the service logic and sends a SIP
message back to the S-CSCF (for instance the potentially modified request).
The S-CSCF will then continue this processing with the other iFC
corresponding to the subscribed services.
2.1.2.4. Comparison with IN
We can make a technical comparison between IN and IMS: the
combination of SSF and switch (such as MSC) corresponds to the CSCF for
session control; the IN server corresponds to the AS functions for services;
the CAMEL Subscription Information (CSI) corresponds to the iFC for
triggering; the triggering criteria of the CSI correspond to the iFC criteria,
ApplicationServer
Service Logic
Service PlatformTrigger Points
PlatformTrigger Points
SIPInterface
HSS
S-CSCF
S
P
T
S
P
Filter Criteria
sFC
SIP
SIP
SIP
iFC
Sh

Convergence of Service
47
etc. We should, however, note several important differences between the two
architectures: in the case of IN, INAP is used to allow the IN server to
control the SSF (and therefore switch functions) or to be notified of events.
In the case of IMS, SIP is used from terminal to the AS, which can handle all
the signaling messages associated with a transaction. A consequence of this
difference is that the mechanisms used for the management of interactions in
IN are mostly unworkable for the NGN. Furthermore, the separation
between teleservice, bearer service and supplementary service/service
feature no longer exists in the NGN.
2.1.3. Towards convergence
As we have just seen, numerous technical means have been standardized
and implemented in the NGN framework. What vision of future services and
the telecommunications market oversaw the development of these means?
Without a set of requirements or a method for designing NGN services, we
can guess that the NGN community logically chose to implicitly reuse the
services it knew, like those of the IN and supplementary services.
The triggering mechanisms of NGN services are thus perfectly adapted to
the services of the 1990s, i.e. telephone services mainly consisting of a
modification of the call process. Despite a desire for genericity (possible
triggering from any protocol element of a SIP message), these triggering
mechanisms are effectively linked to SIP protocol, that is to an initiation
protocol for call sessions, and only provisioned by the operator (therefore
not open to service composition by users).
Significantly,
an
element
like
the
service
capability
interaction
management (SCIM) (see, for instance, [GOU 06]) was designed to offer
greater flexibility to service invocation but has never been specified in detail.
Consideration of the needs of new services at the SCIM level would lead to a
considerable difficulty with implementation [GOU 07]. The NGN is, in
summary, no more or no less than a secure infrastructure that enables the
establishment of real-time multimedia communication sessions between
users, which can be managed by applications.
Nevertheless, actors in the telecoms world have had to translate this
technical vision into a service vision in order to create and commercialize
their offers. This service vision is often summarized by the word

48
Architecture and Governance for Communication Services
“convergence”. This term is used both by academics such as [ARB 04] and
by executives such as [LOM 08], as well as in the specialized press under
names such as “fixed-mobile convergence” or “voice/data convergence”, as
summarized in [BRO 08]. But the word “convergence” is misleading
because it actually combines two convergences: of networks and of services.
Network convergence refers to the possibility of offering the same
services from different access networks. It is the immediate translation in
service terms of the technical possibilities offered by the NGN. For example,
the same telephony service can be used via ADSL access or 3G mobile
access. This convergence of networks has been described metaphorically as
the move from a “silo” architecture (where the transfer, control and
application layers are strongly linked) to a layered architecture (where these
layers are clearly separated and linked by standardized and generally open
interfaces), as shown in Figure 2.7.
Figure 2.7. Network convergence
The terminal is logically interfaced with the control layers and
applications, and not principally with the transfer layer.
Service convergence in itself is not simply the commercial translation of
the technical possibilities of the NGN, but constitutes the set of requirements
that the NGN lacked during the phase of its definition. This convergence of
services denotes the integration, on the user’s initiative, of different services
(different functionalities and even different providers) within one service
environment, enabling them to share certain attributes and cooperate with
each other. For example, in such an environment, the user may have
subscribed to a telephone service and an email service that share one address
book, containing both telephone numbers and email addresses. Or, a
person’s state of presence, captured by a presence service, could be a
accès mobile
contrôle de service
mobile
app 1
app 2
app…
accès fixe
contrôle de service
fixe
app 1' app 2'
app…
accès
mobile
contrôle de service
unifié
app 1
app 2
app…
accès
fixe
fixed access
mobile access
fixed
access
mobile
access
control of unified
service
control of fixed
service
control of mobile
service
app 1 app 2
app…
app 1’ app 2’
app…
app 1 app 2
app…

Convergence of Service
49
triggering criterion for a call forwarding service. When a new service is
added to a user environment, this service can cooperate with the existing
services, for example a new instant messaging service would use the same
address book to create a friends list. The term “service environment” refers
to the impression the user gets that his/her different services are all part of
the same environment; not an environment in the software sense. The user is,
metaphorically, at the center of an ecosystem of services. This view is
therefore called “user-centric”, in particular by actors of the telecoms
industry such as Orange [LOM 08], but also Telefonica, for example in
[LIZ 08].
Figure 2.8. Service convergence
Innovative communication services seek to combine, for example, vocal
communication, instant messaging, presence or an address book, as
described in 2004 [BER 04] and launched in 2007 through the Rich
Communication Suite (RCS) initiative (http://www.gsma.com/rcs/). This
convergence can be seen as telecoms services’ variation on the fundamental
changes taking places in the socioeconomic sector, as we will see in the
section 2.2. We can, with [GRI 07], summarize this view as the move from
the “killer application” paradigm to the “killer environment” paradigm. In
section 2.3, we will see how such a service environment can qualify as a
service system. This service convergence can be realized independently of
network convergence, as demonstrated by
Internet services. Service
providers such as Google or Yahoo have begun offering user-centric
services. In the case of Google, its email (gmail), calendar (google calendar)
and instant messaging (Google Talk) can cooperate in order to provide a
unified service environment to the user.
Service convergence can also be combined with network convergence.
The service environment described above can also be directly accessed from
app 1
app 2
app…
environnement de
services convergents
app 1
app 2
app…
Converged service
environment
app 1
app 2
app…
app 1
app 2
app…

50
Architecture and Governance for Communication Services
multiple access networks. In this case, the main difficulty lies more in the
adaptation of service interfaces to the terminals of these access networks (a
PC, a cell phone) than network access to the service platforms, which can be
achieved indirectly via the unifying network (the Internet). European projects,
such
as
SPICE
(http://ontology.ist-spice.org/index.html)
and
Servery
(http://projects.celtic-initiative.org/servery/) have studied what IMS (and thus
also network convergence) brings to service convergence. The results,
although interesting, do not show a decisive contribution from the IMS to
service convergence, for reasons that are, in our opinion, related to the
specification process of the NGN discussed above.
2.1.4. Implementation of convergent services
To achieve such converged services, companies in the telecoms sector
worked in continuity with former standardization work. As seen in
Chapter 1, they developed the concept of service capability and enabler,
as a standardized feature, which the industry would draw on when
designing services. A service capability could be, for example, messaging
or presence. These enablers link a service provided with a technology and
a technical implementation. For example, in a messaging enabler, the
message-sending service is paired with the multimedia messaging service
(MMS) protocol and the MMS User Agent (UA) architecture and MMS
Center. In a presence enabler, the subscription, collection and notification
of users’ presence are combined with SIP for Instant Messaging and
Presence Leveraging Extensions (SIMPLE) protocol and a presence
AS architecture. This makes it possible to link different services based on
these capabilities, even when they are offered by different providers,
because
ultimately
they
come
from
the
same
technology.
Work
has even been conducted into the possibility of service providers offering
these
capabilities
to
other
providers
(especially
by
Parlay/OSA).
As mentioned in Chapter 1, standardization work leaves two major
questions
unanswered:
how
can
service
capabilities
be
identified
beyond
a
simple “accreditation”
of
existing
technologies
(and
therefore more driven by technology than by service), and how can
different service capabilities be effectively combined to provide a
complete service?
Service composition can be seen as a generalization and an extension of
this principle of service capabilities. The principle of service composition is

Convergence of Service
51
to combine services from one or more providers to create a new service.
Depending on the case, this can be done either by a professional or an
amateur developer, or even an end-user without any particular development
skills, as shown in [LAG 09a]. In all cases, the elementary service in a
composition plays the role of service capability or enabler in relation to the
composed service. This approach can also be seen as a response to the need
for a personalized service environment. Effectively, users or developers are
more likely to respond to the user’s particular requirements than an operator.
The main contribution of this approach is less the principle of composing
services itself, already highlighted by [MAG 07] or [SIM 07], than it is about
offering workable technologies to achieve this aim. However, for now this
approach remains confined to limited services, such as Yahoo Pipes2, and
can hardly be generalized. The industrialization of such a unified service
environment faces numerous obstacles, including:
– the identification of composable services or enablers: can all services be
put together with others, or not? How can the functional perimeter of a basic
service or an enabler be determined?
– the functional coherence of the composition: does the composed service
or set of enablers provide a coherent result for the user? How can risks of
incoherence be identified in advance? How can the same data (e.g. a user
profile) be used in several services?
– the variety of enablers or services to compose: the enablers and
services are disparate, both in terms of interface (protocol, API, etc.) and
functioning (parameters, data models); how can these different elements be
matched up?
These subjects have received little attention in existing works. There is no
clear and universal design method for these services to be composed. There
is also no clear separation between services rendered and technical solutions.
However, since the added value of a composed service over a standard
service is the response to a specific need, the most important issue is the
relevance of the service rendered, even if a technical solution for composing
the services is clearly indispensable. The issue of the service rendered
remains
to
be
industrialized.
For
that,
we
will
venture
beyond
communication services and into the service sector in general, to seek a fair
formulation of this issue.
2 http://pipes.yahoo.com/pipes/.

52
Architecture and Governance for Communication Services
2.2. Common developments of the service sector
Alongside communication services, the service sector is composed of
several other domains, detailed in classifications of economic activity such
as that published by [NAI 07]: health services, social services, education
services, financial or insurance services, public administration services, etc.
The service sector is the main driver of activity and growth in more
economically developed countries, as illustrated in the following table
(Table 2.1), published by the International Labour Organization in [ILO 08].
We can further reveal that the USA’s economy has become almost
exclusively a service economy (80% of the GDP).
Sector’s share in overall employment
Year
1997
2007
Agricultural sector
6.1%
3.9%
Industrial sector
28.3%
24.5%
Service sector
65.6%
71.5%
Table 2.1. Share by sector in overall employment in developed economies
These figures illustrate the transformation of industrialized societies,
driven by offer and demand into service societies, as highlighted, for
example, by [CHI 01, CHE 06] or [SPO 08]. This transformation has been
explored by many authors since the 1980s. Jean-Claude Delaunay states in
[DEL 87] that:
The
industrial
society
of
the
last
two
centuries
is
disappearing. The main aspects of the current service revolution
may be observable to all but they are much less easily
interpreted.
A few years later, the entrepreneur Gérard Mulliez wrote “The customer
driven company – A service revolution” [MUL 94] with the American
consultant Richard Whiteley, author of [WHI 91]. Mulliez concludes with
the shift “from a consumer society to a service society”. This transformation
is now effective. The majority of businesses in the service sector have
integrated a move from product-centricity to customer-centricity into their

Convergence of Service
53
strategy, as shown, for example, in [SHA 06, DAY 06] or [KEL 06]. This
customer-centricity can be seen as the logical outcome of the very concept of
service. With studies on the service concept, the customer has gradually
emerged as a factor differentiating services from products. According to
André Barcet in his thesis on services [BAR 87]:
Services are not immediately produced like goods. The
reason is firstly that a service is an act that connects. From this
point of view it is radically different from a product. Products
imply that there is an act, a production process, and the
objective of this process is the result of the production, i.e. the
product itself. A service does not have this type of finality itself,
but in the effects it brings. The service’s logic is dominated by
that which we call the service rendered.
As discussed long ago by [ZEI 96], a service is realized when it is used.
While the realization phase of a product, for instance a car, is independent
from the product use phase, for instance driving of the car, a service cannot
be realized without a user (which pre-exists the use and specification of the
service and the possibility of providing it). This point is commonly called the
“inseparability of production and consumption” [GRO 07]). To go further in
our study, we must consider a service as being inseparable, both in the
activity of the provider and the service rendered to the consumer. To once
again cite [BAR 87]:
We can therefore say that the concept of service has a
largely ambiguous character from the moment at which it can
be applied to very different levels (...). This characteristic is
unlikely to be coincidental. In some ways it is the concretization
of the service-specific problem of not being able to allow the
distinction between the production and the use of a service;
these two acts, although intellectually separable, are at least
partially concurrent and co-related.
Keeping
this
close
relationship
in
mind,
we
will
identify
the
characteristics of services and their evolutions first from the point of view of
production and then from that of use. We will then look at how recent work
has tried to include these two viewpoints in a service system.

54
Architecture and Governance for Communication Services
2.2.1. The service production viewpoint: from need to service
The difference between products and services does not simply equate to a
distinction between the material and the immaterial. The most important part
of a service approach is providing a service to a customer, that is offering the
skills and effort to create a (jointly defined) beneficial situation that the user
cannot, or does not want to, reach independently. Service implementation
arises from the needs of users. These are not “standard” needs, but are
individual and specific. Frédéric Bastiat, a 19th Century French economist
and politician, who was a pioneer in his approach of basing the economy on
services and has been cited by many authors from the service domain such as
[LUS 08], observed in his Economic Harmonies in 1851:
Need, effort, satisfaction: this is an economic view of man.
We have seen that the terms “need” and “satisfaction” are
essentially incommunicable, as they each refer to a feeling,
which is the most personal thing in the world, and one precedes
and determines effort and the other follows and rewards it. It is
therefore Effort that is exchanged, and it cannot be otherwise
since
exchange
implies
activity
and
Effort
is
the
only
manifestation of our active principle.
Then:
I have just defined a service. It is the effort, that belongs to
one man, while the need and the satisfaction belong to another.
According to this definition, a service is therefore essentially the effort
(or, to be more precise, the chain of activities) of the service providers that
the consumer seeks out to fulfill a requirement. This type of definition has
been taken up by the marketing community, for example:
Services are deeds, processes and performances. [ZEI 96]
Or the following:
[Services are] any act or performance that one party can
offer to another that is essentially intangible. [KOT 88]
How exactly can a service be built from the individual needs of
consumers? Two types of approach can be distinguished.

Convergence of Service
55
In
a
standardized
approach,
the
organizations
(businesses,
administrations) consider services as mass products, and therefore design,
produce and market them as products. Service production is thus objectively
disconnected from the needs of that service’s customers, and instead relies
on a definition of services by the company’s marketing or R&D department,
based on an estimation of customer needs in general. These estimated needs
can come from, for instance, market analysts and competitive offers or an
implicit representation of customer needs for service designers [FLI 08]. The
organization of industrial enterprises generally reflects this way of working,
with specialized “silos” for each particular function, for example a design
silo, a production silo and an IT silo [KEL 06].
Figure 2.9. Standardized approach to service production
A “standard” service (that has not been, and cannot be, personalized) is
offered at the end of the chain. Customers can choose between several offers
packaging these services, in the same way that they could choose between
several car models from a manufacturer. Production precedes requirement,
offer precedes demand; it is a typical way of working in an industrial or
supply company. In the telecommunications field, we can think of Minitel or
GSM as “standardized” services (from the monopolizing position of Minitel
and effective standardization of the GSM), which came before user needs.
This model, called a cathedral model in [LOM 08], has certainly become
inadequate for the telecommunications sector, which is constantly and
rapidly evolving.
An individualized approach
is also
possible. Some services are
personalized and adapted to the customer’s needs, but this is often done by
individuals or small companies. There is a clear difference between a general
practitioner (GP), where the service adapts to the patient, and a hospital,
where to some extent the patient has to adapt to the service. When a service
provider is an individual, the customer can negotiate with the provider in
order to have their needs considered in a personalized way. For example, a
plumber can adapt his/her service to a customer’s specific requirements, as
Service
rendu
Besoin
Need
Service
rendered

56
Architecture and Governance for Communication Services
long as the requirements fit in with the services offered by the plumber.
Some organizations use this model to formalize the services that they can
offer and the requirements that they can fulfill, for instance through the
writing of a “project of establishment” in the medico-social or education
fields. The service provided to each user can thus be formalized in this
framework. Article 8 of French law number 2002-2 of 2 January 2002,
renewing social and medico-social action, states:
A residence contract (...) is developed with the participation
of the received person or their legal representative. This
contract (...) defines the objectives and the nature of acceptance
or support in respect of ethical and deontological principles,
recommendations of good professional practice and the project
of establishment. It details the list and the nature of services
offered and their estimated cost.
In terms of organization, this would be translated as a horizontal
structure, with each layer corresponding to distinct occupations and
competences, and thus proposing specific services. A customer’s need is
taken on by a multidisciplinary team that deals with it from start to finish. As
shown in [KEL 06], members of an organization with different competences
and occupations can coordinate with others and make exchanges via an
informal translation mechanism; each occupation having not only its own
specific view of the requirement to be fulfilled and the solutions to be
offered, but also its own specific vocabulary with which to express these.
These coordination mechanisms are represented in Figure 2.10 by the dotted
arrows between the layers.
Figure 2.10. Individualized approach to service production
The service rendered is no longer standardized, but personalized for the
recipient. However, this approach still has significant disadvantages for
industrial organizations. It effectively necessitates a great amount of
coordination between the different organizational entities, which could take
Besoin
Service
rendu
Need
Service
rendered

Convergence of Service
57
the form of numerous meetings, for example [KEL 06]. As each case is
treated individually, it is difficult to capitalize on stable business processes.
In the telecommunications framework, such an approach can be envisaged
for tailor-made offers to major customers, but is out of the question for mass
services. Furthermore, as highlighted in [RUS 06], this approach is hard to
achieve for automated machine-based services, such as communication
services.
A front-office/back-office approach makes it possible to respond to these
issues. This approach involves establishing a front-end processor to handle
customer needs by calling on and coordinating different organizational
entities. This allows these entities to maintain relatively standardized
activities while also being able to respond to a specific need.
Figure 2.11. Front-office/back-office approach to service production
This way of working is notably identified by [KWA 08] and [KEL 06] as
a compromise for providing adapted services to the customer while
maintaining an efficient organization. This pattern can be found in several
areas, for example dividing service companies between where they interact
with customers and where they process their internal operations. This pattern
can also be seen in the implementation of front-offices in public services, for
example the creation of jobcenters or disabled people’s centers in order to
support every needs of jobseekers or disabled people while maintaining
distinct organizations that deal with each service aspect. This front-office is
therefore responsible for breaking down a client’s need into standard
services that can be processed by the different silos, and if necessary to
render these standard services to the client in order to produce a dedicated
result. As shown in [ZEI 06], this makes it possible to improve the “user
experience” by making different entities cooperate in order to respond to
specific customer needs. Some writers, such as [RUS 06], highlight the way
in which this organization pattern allows a move from mass production to
Service
rendu
Besoin
Need
Service
rendered

58
Architecture and Governance for Communication Services
mass services, and that it is therefore typical of a service or demand
company.
2.2.2. The service use viewpoint: customer, consumer and user
Until now we have used the terms “customer”, “consumer” and “user”
indistinctly, but they should be differentiated. A customer is defined in
dictionaries as a “person requiring a service for a fee”, while a user is a
person who “produces a desired effect from something by making it work”
The user is therefore, by definition, in an active position in relation to the
service, which is not necessarily true in the case of the consumer. These
definitions are consistent with those of the TeleManagement Forum [TMF].
We can therefore distinguish three separate roles in relation to the producer
of a service, adopting the following terminology:
– the customer, with whom the service producer has a commercial
relationship;
– the consumer, who is the beneficiary of the service and gains value
from it by the satisfaction of his/her needs;
– the user, who acts to make the service function.
Concerning telecoms services, these three roles are often mixed up,
except in the case of business services where the customer is the IT or
telecoms department, the consumer is the enterprise and the users are the
employees.
We will not explore the concept of the customer here, as we will not be
studying the commercial relationship between customer and service
provider, which is described in detail by the TMF through the processes of
ordering/delivery, after-sales services and billing (fulfillment, assurance and
billing). Studies of the service level agreement (SLA), measuring the
adequacy between a provided service and the contract specifying it, also
come under this category.
The notion of consumer leads to the question of the value of the service
consumed. Studying the value of a product or service for its consumer is the
object of a discipline called value analysis, a “Method of competition,
organized
and
creative,
aiming
to
meet
user
needs
in
a
specific
design approach, by functional, economic and multidisciplinary approaches”
[NFX 91]. This discipline takes an interest in products in a broad sense,

Convergence of Service
59
defined as “what is (or will be) provided to a user to respond to his/her
need”, for example a piece of equipment, a service, a system, a structure and
an industrial process. It should be noted that the AFNOR standards quoted
here use the term “user” rather than “consumer”, but they still refer to the
consumer in terms of the terminological framework introduced above.
Hereafter, we will just focus on functional analysis, that is the part of this
discipline that looks at how needs are satisfied by a provided service, and not
the cost-related aspects. The term “analysis” used here does not have the
same meaning as it does in the field of software engineering, since functional
analysis is not only limited to a set of requirements but also includes
structural product design choices through the technical function concept that
we will introduce below. The fundamental concept of functional analysis is:
Amongst the functions of the product appear the service
functions that express the participation of the product to
consumer satisfaction. These are either usage functions or
estimation functions, respectively following their objective and
subjective nature. They are distinct from technical functions,
which are not directly perceivable to the user, but are used by
the designer in a given solution of the product so that it meets
the service functions. [NFX 91]
A service function is defined as:
An action that is expected of a product (or produced by it) to
respond to an element of a given user’s need. [NFX 91]
A technical function is defined as:
An action that is internal to a product (between its
component parts), chosen by the designer-producer as part of a
solution to ensure service functions. [NFX 91]
The objective of a functional analysis is to document the move from
needs to technical solutions, via the mediation of service functions and
technical functions.
Methods such as functional analysis system technique (FAST) or
structured analysis and design technique (SADT) make it possible to
formalize this move diagrammatically. The representation of the IN SIBs on
the global functional plane also comes from the SADT formalization.

60
Architecture and Governance for Communication Services
Figure 2.12. Functional analysis approach
Let us now examine the concept of the user in more detail. [SPO 08]
defines a service as a process of exchanges during which economic value is
co-produced by the user and the provider. The user is effectively involved in
creating the service’s value. In the field of medicine, a general practitioner
(GP) requires the participation of the user (i.e. the patient) in order to be able
to find the right cure, for example by accurately describing symptoms,
cooperating with examinations (say “ah”, etc.) and following treatment. Part
of the value of a medical service is, therefore, determined by the good will of
the patient, since the GP and the patient co-produce the service’s value.
These examples seem a long way off from communication services, but we
are illustrating the “quintessence” of a service relationship. Let us return to
communication services with a business services example. In an business IP
telephone service hosted by an operator (e.g. IP Centrex or cloud-based SaaS
IPBX), the beneficiary of the service – the consumer – is the business that
receives the value of it (gains in the telecoms budget and productivity
through more effective collaboration between employees, especially when
on the move). This value is not just produced by the service provider, but
also by the employees through their appropriate use of the service.
An advertising-based economic model makes this distinction even more
interesting. In this type of economic model, services are free and the service
provider receives revenue from advertisements. The value of the service for
besoin
fonction de
service #1
fonction de
service #2
fonction
technique
#1.1
fonction
technique
#1.2
fonction
technique
#1.3
fonction
technique
#2.1
need
service
function 2
service
function 1
technical
function 1.1
technical
function 1.3
technical
function 2.1
technical
function 1.2

Convergence of Service
61
its provider therefore depends on the provider’s ability to generate
advertising revenue, that is to make sure that the advertisements are seen. In
an advertising model, the user becomes the most important figure by being
the one who can view the advertisements while using the service. The user’s
personal interests and preferences are targeted in order to maximize
advertising revenues.
Concerning communication services, the concept of the user can be used
to refer to the people who are involved in the rendered service but are
external to the service provider. This issue can be found not only in all
network services, including telephone services, but also in social networks.
In a blog service, who/what is the consumer of the “leave a comment”
function? The answer is not obvious, and the concept of the user makes it
possible to work on the service offered while completely eluding the
question. In general, in telecoms services, providers of telecoms services
give users the capacity to fulfill actions by themselves.
2.2.3. From service to service system
The importance of the concept of the user and of co-creation of value has
been highlighted in recent years by academic researchers and industry
professionals seeking to go beyond existing works in the marketing
community to conceptualize services. This work is multidisciplinary in
construction as different service aspects are studied in different disciplines,
such as economy, marketing, sociology, management or computer science.
This attempt to conceptualize is, nonetheless, conducted from an IT
perspective, particularly under the leadership of IBM, with a view to finding
a better match between the IT supply and the needs of the service sector,
identified as growth drivers for the computerization of business processes.
As stated in [CHE 06], this theme is called service science or service
science, management and engineering (SSME). Within it, a service is first
defined as a process of exchange between stakeholders.
A service includes an exchange between two or more
parties. [MET 01]
This exchange is co-generated by both parties. [CHE 06]

62
Architecture and Governance for Communication Services
The study of this exchange process led researchers to envisage a service
as a complex system, made up of actors (especially the one that provides the
service and the one that profits from it), products (machines, software, etc.)
shared information and a process linking it all together, as shown by the
following citations.
Service systems comprise service providers and service
clients working together. [TIE 03]
The actors of a service system (client, provider) “are connected
by value propositions, and shared information. [SPO 07]
Service systems are value-creation networks composed of
people, technology, and organizations. [MAG 06]
In general, a service system can be considered to be a
combination or recombination of three essential components —
people, processes and products. [TIE 08]
We define a service system as a value co-production
configuration of people, technology, other internal and external
service systems, and shared information. [SPO 07]
A service system can be made up of other service systems. These
concepts make it possible to consider service diversity more simply,
especially self-service. In this case, the user is strongly implicated in the
production of value. In the case of a cafeteria, the fact that the user carries
their own plate from counter to counter can produce value both for the
consumer (who can choose more easily between dishes and benefit from an
attractive price) and the provider (who saves on staffing and logistics costs).
Consumer, user and provider are therefore the stakeholders in a service
system, where the user and the provider collaborate to satisfy the needs of
the consumer.
With the SSME research community, we move away from a common
vision of service as the provision of an immaterial asset in response to a
need, as in section 2.13, to a broader vision in which several actors
collaborate to co-create value through the realization of a service process, as
shown in Figure 2.14.

Convergence of Service
63
Figure 2.13. Service as the provision of an immaterial asset
Figure 2.14. Service as system
2.3. Application to telecoms services
We can now re-examine the evolutions of telecoms services in light of
section 2.2.3.
2.3.1. Telecoms services from the point of view of production?
From a production viewpoint, telecoms services demonstrate the patterns
that we saw earlier. Through these patterns, the evolution of telecoms service
architectures, which were introduced in the first section of this chapter, can
be read again. Service convergence effectively entails moving from a “silo”
pattern, where consumers have to respond to their own needs by invoking
various
applications,
to
a
front-office/back-office
pattern,
where
a
coordination entity or unified service environment takes on the task of
invoking the different applications. This front-office/back-office pattern can
also be found in the IMS architecture, where the S-CSCF, which can be
completed by the SCIM, ensures the invocation of various applications
following a request from the service user.
Client
Fournisseur
besoin
service rendu
Customer
Provider
need
service rendered
Acteur 1
Acteur .. n
Processus de service
Actor 1
Actor n
Service process

64
Architecture and Governance for Communication Services
This same front-office/back-office can also be found in the Web world,
for example with the work of an SOA service broker.
Figure 2.15. IMS service environment
Figure 2.16. SOA service environment
These technologies are seen as a means of achieving a converged service
environment, as seen in section 2.1.3 of this chapter. However, problems
relating to the separation between protocols and technical solutions make the
establishment of a unique front-office a delicate matter. This leads complex
technical environments to enable service convergence (Figure 2.17). Some
works, such as [BLU 08a], distinguish between application access “from
below” with Session Initiation Protocol (SIP) or “from above” with http.
This separation into multiple front-offices makes it difficult to manage
and develop the system. The same information would have to be duplicated
SOA broker
requête
réponse
App 1
App 1
App 1
request
response
SOA broker
App 1
App 1
App 1

Convergence of Service
65
several times, creating risks of divergence. Successfully having a common
front-office for all different services would necessitate two prerequisites.
First, it must be capable of implementing a technical environment to support
the different protocols and solutions being considered, as stated in [BER 08].
From our point of view, there can only be one front-office, acting as a
service access interface, even if technical modification and establishment
mechanisms for a session exist elsewhere (Figure 2.18).
Figure 2.17. Convergent service environments SOA + IMS
Figure 2.18. Seamless converged service environment
As in the section 2.2.1, it must be capable of clearly itemizing the
functions of different applications, in the same way that each organizational
entity defines the services it offers in the previous section. Indeed, this is
interface d'accès aux services
requête
réponse
App 1
App 1
App 1
request
response
Service access interface
App 1
App 1
App 1

66
Architecture and Governance for Communication Services
essential
for
coordinating
these
applications
by
determining
which
application to invoke in response to which needs. This also makes it possible
to identify and reuse information that is common to different applications,
such as user profiles and preferences. We must therefore define a semantics
that can apply to various telecoms services and that makes it possible to
describe these services’ functions and data. In other words, we must
determine the invariants on which the description of a telecom service
architecture should be based. This will be the subject of Chapter 3. To do
this, we must first consider telecoms services from the point of view of use.
2.3.2. Telecoms services from the point of view of use?
Functional analysis methods that have been applied to telecoms services
have resulted in a methodology that consists of first writing a statement of
service requirements containing the needs that the service must fulfill, and
then, in response to this, developing specifications that offer solutions. In
fact, these statements of requirement are most often based on previously
used technological solutions. The needs listed are also frequently not the
result of a consumer needs analysis but are instead based on the functions
that can be provided by previously used technological solutions, or on the
features of competing services. Requirements are generally expressed
without distinguishing between functional and non-functional aspects, and
without separating the needs of the different parties involved in the service.
This is due to the lack of a common formalization that could be used to
generate this statement of requirements: there is no normalized list of
possible needs or functions that could be proposed in response to these
needs.
The construction of a common list of requirements to which telecoms
services could respond is not a simple matter. Which requirements should be
considered? Some works such as [GHA 07] attempt to categorize telecoms
systems according to a theoretical classification of human needs, like the
Maslow Hierarchy. Apart from the fact that this type of classification of
human needs should be approached with caution, these systems are largely
unworkable as they do not provide any practicable tools and are too general
for telecoms services.
In order to move forward, it is essential to consider the viewpoints and
objectives of the different stakeholders participating in the course of a

Convergence of Service
67
service. Although stakeholders’ viewpoints can seem subjective, they
are used quite conventionally to describe the requirements of a system
[ROL 00]. It is, for instance, recommended when writing UML use cases,
such as in [COC 97]. This leads to a black box approach: the service is
described as it is seen by those that handle it externally.
Linking use cases to actors’ goals is so very significant
because it shifts the writer’s attention away from the function
lists that most programmers worry about and puts it back on the
users: What the users really want to accomplish with the
software are their goals when using the software. If the software
supports those goals, the software will yield the greatest
business value. [COC 97]
The different actors in the service are also collaborators and stakeholders
in the realization of the service. The main actors are the user and the service
provider.
The primary actor is only one of the stakeholders. The
organization that owns the system is another, a government
regulatory agency might be another, and there might be others
as well. [COC 97]
We could apply these principles in an attempt to conceptualize technical
solutions (i.e. “the function lists that most programmers worry about”). For
example, we would discuss the need to communicate in writing rather than
the need to send an email. Although the revelation of a need has often been
triggered by the existence of a technical solution, this lack of correlation can
facilitate the consideration of several technical solutions responding to the
same need. We can identify certain general consumer needs to which
telecoms services respond:
– instant communication by voice, video or writing;
– sending/receiving messages;
– consumption of multimedia content.
These needs become service functions in the functional analysis sense,
for example an instant communication function, a messaging function or a
content consumption function. Service provider needs are then added to

68
Architecture and Governance for Communication Services
these consumer needs, for example managing users’ access rights to
services, depending on their subscriptions.
A hierarchy can be identified in these needs. Rights management is a
need on which others will be based. But this list of needs or service functions
remains at a high level and does not allow for a precise semantics describing
the service rendered by different telecoms providers. We could specify the
needs by attaching technical solutions to them, such as email or instant
messaging. This could help us to allocate commercial offers into broad
categories of the needs to which they respond, but it would not help with the
development of a common semantics to answer the questions left open in
section 2.1, such as the functional perimeter of enablers or the functional
coherence of a composition of telecoms services. However, we will see in
Chapter 3 that these high-level requirements are a starting point for
identifying service processes from a business viewpoint of telecoms
services.
2.3.3. How to structure telecoms services?
In section 2.3.1 of this chapter, we introduced the need for common
semantics to describe telecoms services. In section 2.3.2, we saw that a
consumer
needs-based
approach
would
not
allow
for
an
accurate
construction of such semantics. In order to move forward, we will now
envisage telecoms services as service systems. In section 2.2.3, we presented
a service as a process of exchanges and as the co-creation of value. Rather
than the classic consumer/provider relationship, we will emphasize the link
between user and service system. This will naturally lead to a study of how a
user participates in a service, which seems the most relevant perspective to
investigate. The user and service system should not be considered as two
separate entities (as the roles of consumer and provider), but should be
viewed from a systems theory perspective: the user is one of the components
of the service system. This perspective differs from approaches that aim to
automatically create services from the basis of consumer needs, for example
[SHI
08]
or
[MAR
08].
These
approaches,
focusing
on
the
consumer/producer relationship, face obstacles, including the formalization
of the consumer’s need and the industrialization (scaling) of matching
keywords from the consumer’s stated need with keywords from the service’s
software interfaces proposed by the developer/producer (one being usage
logic and one being technical logic), as we have seen in Chapter 1 in relation
to Web semantics mechanisms. A more relevant medium-term perspective

Convergence of Service
69
would be to leave the user to translate the consumer’s needs, following the
self-service principle. Returning to the terms of functional analysis, this
would expose users to the first level of a service’s technical functions and let
them build their own service to respond to their needs as consumers. This
view is also called user generated services (UGS).
In this view, the user and the service provider are two stakeholders, two
agents of the service, who collaborate to achieve a service process that
generates value for the consumer of the service. This can be aptly applied to
telecoms services, in which the user actively participates. In a service
without user participation, Alice would dictate a message for Bob to a
secretarial service, which would then find Bob’s coordinates and send the
message. In dictating a telecom service, Alice searches for Bob’s address in
her address book, writes an email and sends it. The user and the service
provider collaborate within the service system in order to provide a value to
the consumer. The user and the consumer are usually the same person, but
do not have to be. We have also seen that the consumer of a telecoms service
could be a business and the user could be an employee of the business, for
example in a call center. In any case, it is the user’s competence that allows
him/her to translate the consumer’s needs into services he/she can access. In
this view, action, rather than need, becomes the fundamental concept for the
establishment of a common semantics to describe telecoms services. The
user and the provider participate jointly to provide a service to the consumer
via the fulfillment of business actions, these actions being supported by
technical solutions. The following figure illustrates these relationships.
Figure 2.19. Course of a telecom service
Service télécom
Utilisateur(s)
Fournisseur(s)
déroulement
de service
agit
sur
agit
sur
solution(s)
technique
supporte
consommateur
besoin
service rendu
Telecoms service
Provider(s)
User(s)
acts
on
acts
on
service
procedure
supports
technical
solution(s)
need
service rendered
consumer

70
Architecture and Governance for Communication Services
It may be necessary to consider several users or providers for the same
service. For a phone service, we would consider the user making the call, the
phone service provider and the user receiving the call. The service provider’s
actions and the user’s actions are not inherently different. For example, in
the case of self-produced content services such as YouTube, the user fulfills
certain actions (such as publishing a video) that would be assigned to the
service provider in a classic video-on-demand (VOD) service. With
so-called Web 2.0 services, it is not even uncommon for the majority of
actions to be carried out by the user.
The service rendered to the consumer can be described by service
functions, with reference to functional analysis. These service functions
correspond to a product’s actions in order to respond to a consumer need; the
term “product” referring here to the entire service system, including the user.
But what interests us here, for the construction of our service description
semantics, is not the service rendered to the consumer but rather how the
service is run via the actions of the user and the service provider. These
actions are similar to technical functions in the vocabulary of functional
analysis, since they describe the internal functioning of a product, which is
still to be understood as the service system including the user.
Figure 2.20. Technical functions and service functions for telecoms services
For example, in the case of a messaging service function, the technical
functions that can perform this service function would include searching and
selecting a contact from a contact list, sending a message and delivering it to
the recipient’s inbox.
Service télécom
Utilisateur(s)
Fournisseur(s)
déroulement
de service
solution(s)
technique
supporte
consommateur
fonction de service
fonction
technique
Telecoms service
Provider(s)
User(s)
technical
function
supports
service
procedure
technical
solution(s)
service function
consumer

Convergence of Service
71
A significant part of Chapter 3 will be dedicated to establishing technical
functions into semantics of a reference for describing telecoms services. We
will define a technical function as an action capability that can be
implemented by users or providers. The support of the course of a service by
a technical solution will also have to be defined in order to facilitate its
integration into one front-office. We will see, in Chapter 3, how technical
solutions can be described using the technical patterns that are common to
different solutions.
In the interest of building a blueprint for describing telecoms services, we
will examine the course of services in order to deduce their technical
functions, as well as examine the common patterns in technical solutions. To
do this, we will refer to EA concepts, which were introduced in Chapter 1.
We have seen that the information systems urbanization community used to
consider information systems according to four points of view: the business
view, the functional view, the technical view and the applicative view. In our
case, we will not examine a company’s information system on the basis of
the course of its internal business processes, but we will, rather, be
examining telecoms service systems on the basis of the course of services.
However, EA concepts give us a solid base for the construction of our
service description semantics with reference to different points of view. We
will also construct a reference architecture for telecoms services, based on
similar principles to those of enterprise urbanization references or enterprise
reference architectures. We propose and describe the telecoms service
systems according to four views:
– a business view describing the course of a service as perceived by the
stakeholders that collaborate in the rendered service.
– a functional view describing the technical functions (in the functional
analysis sense) used to realize this service. In section 3.2.2, we will see how
the technical functions mentioned above will help us to identify the
necessary invariants for this view.
– a technical view describing the main technical roles and service
protocols (the technical solution in the functional analysis sense).
– an applicative view describing the applications involved in realizing the
service.

72
Architecture and Governance for Communication Services
Figure 2.21. The four dimensions of a telecom service
In the following chapters, we will look at the key concepts of these views
and the relationships between them, which will be formalized in a meta-
model.
Although these four views allow us to describe a telecom service, the
question of establishing a reference semantics remains entirely open.
Each service could be described, on the basis of these views, with its own
vocabulary in order to indicate its functions or technical roles. We must
therefore create reference views to support our common semantics. The
functional and technical views of a service3 must then describe this
service based on these reference views. Chapter 3 will be dedicated to the
construction of these reference views. The business reference view will
contain the course of an operator’s main services as perceived by the
stakeholders in these services. The functional reference view will list the
action capabilities offered by telecoms services. The technical reference
view will describe the key protocols and technical roles available for the
3 We will see that a business view is not necessary for describing each service. We will also
not propose a reference semantics for the applicative view, since each service is described
with its own vocabulary but with reference to the standard descriptions of the functional and
technical views.
Vue métier
Vue fonctionnelle
Vue technique
Vue Applicativ e
est exécutée dans
implémente
permet
satisfait
allows
satisfies
is executed within
implements
Business view
Technical view
Functional view
Applicative view

Convergence of Service
73
implementation of these services. We will then be able to describe the
architecture of a service through a functional view of this service (based
on the functional reference view), a technical view (based on the
technical reference view) and an applicative view showing how the
functions in the functional view are executed in the environment of the
technical view.
Figure 2.22. Method of describing the architecture of a telecoms service
In Chapter 3, we will see how to construct these reference views, and
then in Chapter 4, we will see how to use them to describe telecoms services,
whether these are simple services, enablers or composed services. At each
stage, we will develop a metamodel to formalize the relationships between
the concepts used. In Chapter 3, we will propose a service urbanization
metamodel in order to construct the telecoms service reference architecture.
In Chapter 4, we will introduce a service architecture metamodel in order to
Vue applicative du service
Vue fonctionnelle de référence
Vue fonctionnelle du service
Vue métier de référence
Vue technique de référence
Vue technique du service
se conforme à
se conforme à
implémente
est exécuté dans
satisfait
permet
Business reference view
Technical reference view
Functional reference view
Functional service view
Technical service view
Applicative service view
implements
is executed within
conforms to
conforms to
allows
satisfies

74
Architecture and Governance for Communication Services
describe telecoms services from this reference point. Chapter 5 will be
dedicated to applying the results that have been obtained.
In this work, we will not use tools from Web semantics, such as
ontologies. The development of a reference semantics could, in fact, be
compared to the construction of an ontology, that is “the specification of a
conceptualization of a field of knowledge” as per the definition cited from
[GRU 93]. However, we prefer to work from the basis of the conceptual
tools of EA, which are much more focused and structured, presenting fairly
strict syntactical boundaries, throughout this meta-modelization. We will
also opt to build on an established foundation of the field rather than create a
dictionary from scratch. In Chapter 5, we will see that our results can serve
as a base corpus for the construction of an ontology for describing telecoms
services. As mentioned in Chapter 1, an ontology provides particularly
relevant results when its base corpus is coherent. The concepts that we will
introduce in the meta-models mentioned above can be seen as construction
lines for creating a reference semantics; lines that can also be erased from
subsequent applications.
2.4. Summary
Throughout this chapter, we have sought to identify the elements that
constitute a communication service. We have distinguished between the
viewpoints of production and use. From the point of view of use, a service is
characterized by its service functions, representing the service’s value for its
consumer, and by its technical functions, representing the joint actions of the
user and the provider to realize these service functions. Communication
services are increasingly self-service systems where the user is involved in
the rendering of the service, especially for service convergence where the
user navigates in a unified service environment. From the point of view of
production, a service is characterized by a technical solution supporting
these functions, as well as by a separation between what is seen by the user
(front-office) and what is not (back-office), this separation being essential
for self-service and thus for the realization of a service convergence view.
The functionalities presented in a front-office correspond logically to the
technical functions of the use viewpoint, the realization of these functions
being then borne out by the back-office.

Convergence of Service
75
We propose to unite these constituent elements of a service with the four
points of view of information system urbanization: the business view for
service functions, the functional view for technical functions, the technical
view for technical solutions and the applicative view for the link between
technical solution and technical functions, and especially for the distribution
of functions between front-office and back-office.
We must now identify the invariants and a semantics of reference for the
construction of a business reference view, a functional reference view and a
technical reference view. This will be the object of the following chapter,
where we will propose a construction method for these invariants, which we
will illustrate with examples. We will then be able to describe in detail, in
Chapter 4, the communication service architecture from a functional service
view, a technical service view and an applicative service view, linking the
previous two. This will enable us to easily compare services and identify
reusable components, as we will see in Chapter 5.

Chapter 3
Building an Architectural Framework
for Telecom Services
In Chapter 2, we discussed the multiple angles of a telecom service. This
is a service performed by stakeholders following a defined course, as well as
a technical solution supporting the actions of these stakeholders. We have
also seen that we lack a common semantic to formally describe the course of
telecom services, and this lack is blurring architectural issues such as the
construction of enablers or the composition of services. Using good practices
for the urbanization of information systems, we have proposed a description
of telecom services, in both their functional and technical dimensions,
according to four views. We will now look at the question: how to build this
common semantics? In other words, what invariants can we use to describe a
telecom service architecture? The response is threefold. First, we will study
the actions undertaken during a service (existing or target) by the actors
collaborating to render that service, and determine a business reference view
from this. Second, we will characterize the functions of the services via the
action capabilities provided by telecom services, in order to build a
functional reference view. Finally, we will see how to model technical
solutions used in the implementation of these services, in order to identify a
technical reference view. In each section, we will introduce concepts and
links that exist between them. These concepts will be formalized in Chapter
4 by means of a meta-model that will support our construction of a common
semantic. The applicative view will not be addressed in this chapter, because
it does not possess a true reference semantic, but it is described from

78
Architecture and Governance for Communication Services
functional and technical points of view. In Chapter 4, we will discuss how
this reference semantic can help us to clarify our architectural issues, thus
applying an applicative view.
3.1. A business reference view for telecom services
What is a telecom service from the viewpoint of the actors who
participate to render the service? Generally speaking, a telecom service gives
its users the ability to carry out actions of communication. Telecom
operator’s services thus provide the ability to make telephone calls,
exchange messages, watch a television channel, etc. From the viewpoint of a
given user, the service is triggered by actions on his/her part, such as dialing
a telephone number or selecting a television channel. User interactions are
an essential part of communication services, which cannot be provided
without this interaction. According to the classification developed in
[PIN 08], telecom services can be considered customer-intensive, that is
requiring regular entries of users, to use the terminology developed in
Chapter 2. Our key proposition in the following section will be to describe
the functions of a telecom service through the actions it allows its users to
carry out. Our intention is to justify the existence of a stable description of
these actions through a business view for telecom services. We will seek a
middle ground between a high-level description of the purpose of a service
and a detailed description of the needs of a specific user. This approach is
compatible with the description of a service by the intentions of its users,
insofar as there is a strong link between the description of an intent to act
and the description of an action. The idea of action nevertheless offers us
more precision than a generic idea of intention, in particular for the linking
of a sequence of actions among several actors.
3.1.1. Activities from the business view
For enterprise information systems, the business view is usually made up
of the business processes of the company, for example the purchasing
process or the selling process. As indicated in [SIM 07], a process can be
defined as a series of connected activities in order to achieve a business goal.
Each activity is a group of manual or automatic tasks that require resources
to complete and produce added value. What are the activities in a telecom
service, from a business viewpoint? Following the logic of Chapter 2, these
are actions carried out by the stakeholders in the service. In developing this

Building an Architectural Framework for Telecom Services
79
proposition, we immediately come up against a problem: what are the
actions to be considered? To which we might add the corollary: how do we
define the user who is acting?
In fact, we can consider actions specific to a person, themselves
corresponding to a specific need, for example phoning one’s grandmother to
wish her a happy birthday. Phoning a neighbor would then be a distinct
action. In this case, an action is inseparable from the real person who carries
it out, such as calling grandmother. The user is therefore a given person. At
this level, studies concerning telecom services are sociological in nature.
This research involves studying the actions of real people (a 36-year-old
woman living in Paris, university-educated, calling from her home in the
morning before she leaves for work, to speak to a plumber about a water
leak), and then grouping these people into categories in order to compile
statistics about more general trends.
We can also consider the physical actions taken as a part of the usage of a
service: for example, lifting the receiver, pressing keys to dial a number,
typing text, and pushing a button, as well as the mental processes that allow
us to understand the meaning of these actions. Here, the user is defined
solely by his/her physical and mental capabilities. Studies at this level
related to telecom services involve the design and ergonomics of service
interfaces. They lead to the grouping of users according to their motor,
psychomotor and cognitive capabilities. The study of mental models is used,
for example, to categorize the way various people perform a service.
However, our objective of describing the architectures of telecom
services leads us to another view: decontextualized actions that correspond
to the objective technical purpose of the service: not wishing grandmother a
happy birthday, or pressing buttons, but that of making a telephone call – i.e.
the request
of communication or the acceptance of
a
request for
communication; in other words, the ability to talk to one another. The user
who carries out these actions can thus be seen as having a role, defined
solely by his/her capability to manipulate (create, emit, receive, etc.)
information according to the possibilities offered by the service. The user of
which we are speaking here is therefore not a real person, but rather the role
played by a person when he uses a service (e.g. the role of caller or the role
of callee in a telephone service), as cited, for example, in [LAM 03]. Let us
note that we will henceforth use the UML term “actor” most often, rather
than the term “role”.

80
Architecture and Governance for Communication Services
This concept of the user is, however, subject to the criticism formulated
by usage sociology, for example in [NYG 86], of seeing the user only as a
technical subsystem, a generic representation that the service’s design
engineer makes of those using his/her service [FLI 08]. Nevertheless it
seems, as we will outline below, that language provides a framework that
goes well beyond the service designer’s representations, as long as we
remain in the domain of common language between designers and users.
We have just defined the level of action that we will consider for the
description of telecom services in an intuitive manner. A precise theoretical
framework would take us far beyond the realm of telecommunications,
requiring the development of theories on action and language. So as not to
go too far off the subject, we will first clarify the previous discussion by
comparing a telecom service to a tool, and then we will outline several
theoretical considerations in order to show the possibility of a rigorous
justification, rather than to achieve it.
We often speak of communication tools to designate usual telecom
services such as email, instant messaging, telephones and television. A tool
provides the capability to carry out a simple action. The Oxford English
Dictionary defines a tool as “a device or implement, especially one held in
the hand, used to carry out a particular function”. Let us consider, for
example, a commonly used, mass-marketed tool: the screwdriver. This tool
is used to carry out the simple action of turning a screw. This action can be
included within a larger action, for example putting together a piece of
furniture. It can also be broken down itself into elementary physical actions:
press the screwdriver against the screw, turn the handle clockwise etc.
However, these elementary actions can be seen as contingent. We can also
turn a screw with an electric screwdriver, using different physical actions.
The action of turning a screw can also be considered outside of any context
of completion, in a decontextualized manner. Additionally, the action of
turning a screw implicitly designates an actor: the person who is carrying out
the action of turning the screw. This actor is not a real person, but an
abstraction, a role, that allows us to speak about the action of turning a screw
in general, and not about the action of a specific person. The actions we wish
to consider in describing telecom services are intuitively of the same type as
the actions that can be carried out with a tool.
Theoretical works on the semantics of action insist on the validity of
various descriptions of a single action, as we intuitively exposed above. The

Building an Architectural Framework for Telecom Services
81
British analytic philosopher Elizabeth Anscombe is famed for her analyses
of the ideas of action and intention [ANS 57 p. 37]:
A man is pumping water into the cistern which supplies the
drinking water of a house. Someone has found a way of
systematically
contaminating
the
source
with
a
deadly
cumulative poison whose effects are unnoticeable until they can
no longer be cured. The house is regularly inhabited by a small
group of party chiefs, with their immediate families, who are in
control of a great state; they are engaged in exterminating the
Jews and perhaps planning a world war. The man who
contaminated the source has calculated that if these people are
destroyed some good men will get into power who will govern
well, or even institute the Kingdom of Heaven on earth and
secure a good life for all the people; and he has revealed the
calculation, together with the fact about the poison, to the man
who is pumping. (…) This man’s arm is going up and down, up
and down. Certain muscles, with Latin names which doctors
know, are contracting and relaxing. (…) Further, the pump
makes a series of clicking noises, which are in fact beating out a
noticeable rhythm. Now we ask: What is this man doing? What
is the description of his action?
Answer: The question has many answers that allow the
grading of intentions; all of the descriptions are equally valid. In
particular, we can just as well designate the action in terms of
the first thing a person does as we can in terms of the final
desired result.
Here, we move on from the need to identify the actions of the
stakeholders in a service to the need to describe their actions. Between
phoning, phoning one’s grandmother, or picking up the receiver and pressing
the keys, the action can be considered identical but the description of the
action differs.
Describing an action requires naming that action. We find this naming
imperative in theoretical works on language, as, for example, in the work of
the language philosopher John Searle (known in the artificial intelligence
community for his Chinese chamber paradox) [SEA 05]:

82
Architecture and Governance for Communication Services
My dog has very good vision, indeed much better than mine.
But I can still see things he cannot see. We can both see, for
example, a man crossing a line carrying a ball. But I can see the
man score a touchdown and the dog cannot (…). To see a
touchdown scored he would have to be able to represent what is
happening as the scoring of a touchdown, and without language
he cannot do that.
It is language that allows us to describe actions, and also to think about
them in terms beyond physical actions, the perception of which is sensory. In
European languages, this naming is devolved to the so-called action verbs.
The subject of an action verb is the actor (or agent) and the complement is
the object on which the action is exerted. In the action of phoning his
grandmother
to
wish
her
a
happy
birthday,
and
in
the
action
of phoning her plumber because her faucet is leaking, the action verb is the
same: in both cases it is telephoning, even though the goal and the
context differ.
These action verbs have a definitional aspect. Language is in fact an
abstract structure, imposing interpretative limitations and involving logical
presuppositions [KAU 05]. An action verb such as that of scoring a
touchdown, to use Searle’s example, refers to a group of constitutive rules:
putting both feet in the opposing end zone with the ball in your hand during
a valid play sequence. The term “language-game” is thus used to indicate
this
definitional
dimension,
independently
of
the
specific
empirical
accomplishments carried out by the given actors. This language allows us to
give an explicit description of decontextualized actions, in which we are not
interested in the completion of an action by a particular person, but rather in
an impersonal description of what implied semantically by the use of an
action verb and a direct object. We will then be mindful of the words used to
describe our actions as part of telecom services, and it will be seen that these
words are common to all of the businesses in the telecom sector and to their
users, such as, for example, sending an email, watching a television channel,
or sending a text message. Indeed, to use the terminology of [RUS 06],
telecom services are widely standardized (not in the sense of validation by a
standardization organization, but in the sense that these services are provided
identically to tens of millions of people).

Building an Architectural Framework for Telecom Services
83
This gives us several elements to specify the type of actions being
considered in our case. These are actions independent of any context of
execution (such as the person executing the action, their interest in acting,
the service provider, the physical means of accessing the service, etc.). They
are described by action verbs that are common to all contexts of execution.
They involve logical presuppositions that we will then develop in the form
of a process.
Another approach, proposed in some works for the description of
services, for example [ROL 09], is based on the idea of intention. This idea
can be connected to the idea of action, as pointed out by Elisabeth
Anscombe, who affirms in [ANS 57] that:
Roughly speaking, a man intends to do what he does. But of
course that is very roughly speaking. It is right to formulate it,
however, as an antidote against the absurd thesis which is
sometimes maintained: that a man’s intended action is only
described by describing his objective. (Section 25)
By analyzing the work on these ideas of intention and action, P. Ricœur
even affirms [RIC 90] that:
The mutual involvement between the questions ‘what?’ and
‘why?’ acts fully in both directions: from description (of an
action) toward explanation (of that action) but also vice-versa,
from explanation toward description. (p. 90)
We also find this strong link between intention and description in many
philosophers of action, notably Donald Davidson in his benchmark essay
“Actions, Reasons and Causes” [DAV 63].
Here, we will prioritize the idea of action over that of intention. It is, from
our point of view, a more efficient entry point for our purposes, since it is
closer to the concepts of the business view of the information system’s
urbanization, such as the concept of business activity. It will allow us to
focus on the interactions between service and user on the one hand, and on
the other hand to take into account the sequences of actions in the form of a
process, clarifying the various roles played by users. It is indeed simpler to
consider that the action of an actor in accepting a telephone call is preceded

84
Architecture and Governance for Communication Services
by that of another actor in making a call, rather than to consider that the
intention of the caller to make a call must precede the intention of the
recipient to accept this call.
Now that we have finished with this digression, intended to better explain
the nature of the concepts we are dealing with, we will look at how to
identify these actions in telecom services.
3.1.2. Service processes
In section 3.1.1, we discussed the actions of the users of a telecom
service, described independently of any specific execution context, using
action verbs and direct objects. The service provider’s actions can be
similarly described. For example, the email service provider will deliver
emails to its recipients; the television service provider will broadcast
television channels. Our proposition is that, depending on the usage
viewpoint, the course of a service can be represented as a sequence of
actions carried out by the actors in the service system, with these actors
including the roles of the user(s) and those of the service provider(s). Let us
illustrate
this
proposition
with
a
service
outside
the
world
of
telecommunications. In the postal service, a sender mails a letter and the
postal service provider delivers it to the recipient. Therefore, we have broken
down a typical postal service procedure into two actions. This breakdown is
intuitively obvious, but it is not immediately justifiable. The difficulty lies in
the criteria of choice of actors and actions. For example, we could have
added an actor who writes the letter, an actor who attaches the stamp, an
actor who sorts the mail, or an actor who transports it on the train. We can,
however, identify objective criteria leading to this choice. First of all, the
actions are those perceived during the use of the service. The actions of the
service provider, initiated by the user’s action, will therefore be perceived as
a single action that corresponds to what the user requests from the provider
as a service. Actions such as sorting the mail or transporting it are not taken
into account; only the action of delivering the mail, which includes the
sorting and transport as part of standard process. The challenge is to
disassociate an “external” view of the service that manifests its functional
added value from an internal view. This last one is usually favored in service
architectures and corresponds to the internal processes of the service
provider. It is therefore contingent on a specific technical execution.
Contrariwise, the external view will be common even if the technical
executions differ, for example between an IMS telephone service and a peer-

Building an Architectural Framework for Telecom Services
85
to-peer telephone service. Next, the actions taken into account are necessary
actions, whatever the particular context of execution of a service. Actions
such as attaching a stamp or writing a letter do not appear, since they are
contingent to a certain mode of execution. These criteria are quite consistent
with the criteria of a definition of a business activity in a business process.
The sequence of actions is a typical sequence, common to all specific
execution contexts and vice versa; we can consider this sequence of actions
as constitutive of the service. Thus, when an actor mails a letter and then
another actor delivers it, this can be seen as semantically constitutive of a
postal service. Whatever the context, and whatever the vocabulary used by
the service provider, such a service will be perceived as a postal service.
This is, of course, a retrospective view, which in no way reflects the way in
which the elements characterizing a service evolve as time progresses, but is
aimed solely at indicating the current sense of the service. We can consider
this sequence as the formal definition of the use of a postal service (this
example is obviously given as an illustration only, and we have not
researched it in its entirety; essential aspects such as the validity of the
postage or the recipient’s address have not been taken into account; we will
see next how such limitations can be modeled in the case of telecom
services).
This
formal
definition
can
be
seen
as
a
tacit
minimal
understanding shared between every user of the service and its provider.
This understanding is usually not codified; there is no explicit way to use a
haircutting service (an example we discussed in [BER 09]) or a medical
consultation. As emphasized in [CHE 06], the clarification of such a tacit
understanding is an important aspect of the computerization of the service
sector.
Users or service providers can thus be presented generically by actors,
with each actor being responsible for the execution of an action (or a group
of actions, when these must be done by the same actor). The proceeding of a
service can therefore be seen as a process, in which the domain being
modeled is no longer the activities of a business, but the system of telecom
services. The definition of a business process seen in Chapter 1 can be
modified as follows (the changes are in italic), to define a service process:
A service process is a sequence of actions, carried out by the
stakeholders in the service, which produces a result whose
value
is
perceptible
and
measurable
for
each
of
these
stakeholders.

86
Architecture and Governance for Communication Services
As we have noted, these stakeholders correspond to the business
collaborators in the methods of analysis of business processes [SIM 09,
p. 25]:
A business collaborator represents a role or group of roles
played in the execution of business processes by an individual
or organizational unit, internal to the domain being modeled.
According to this terminology, both the user and the service provider are
business collaborators.
We will use the UML notations recommended in the analysis of business
processes and represent the course of a service by an activity diagram, with
actors represented by swim lanes in these diagrams and actions represented
by UML activities. With regard to terminology, we prefer to speak of
“service” rather than “business” (e.g. a service process rather than a business
process), in order to emphasize the fact that we are not taking the view of the
production of services (which is the profession of service companies), but
rather that of their use.
Let us return to our example of the postal service. Service actions occur
one after another in a defined order. Thus, the action of delivering the letter
is necessarily preceded by the action of mailing the letter; the action of
delivering a letter requires a mailed letter. This can be logically translated
into a dependence of the action “deliver a letter” on the action “mail a
letter”. We will see throughout the process that it is truly the action of
delivering a letter that is dependent on the action of mailing a letter, and not
the other way around. A delivered letter has always been mailed first. This
sequence of actions can naturally be represented by a UML activity diagram,
as shown below.
The definition of responsibilities between actors is apparent. The
“sender” actor is responsible for the “post letter” action, while the “postal
service provider” actor is responsible for the “deliver letter” action. Unlike
most models of the business process from the information systems business
view, the user of the service (i.e. the sender) appears in the process not as its
initiator, but rather as a stakeholder in it, who is responsible for the
execution of certain actions. While a model oriented toward the internal
business processes of a postal service provider would show the mailing of a

Building an Architectural Framework for Telecom Services
87
letter as the event initiating the process, this mailing by the sender becomes,
in our service view, a “post letter” action.
Figure 3.1. Process of a postal service
The actions that make up telecom services are information manipulation
actions (selection, transmission, display, etc.). This follows naturally from
the definition of telecommunications as “the telegraphic or telephonic
communication of audio, video, or digital information over a distance by
means of radio waves, optical signals, etc., or along a transmission line”
(Collins Dictionary). We can deduce the nature of this information from the
objects manipulated during the actions being considered. If we continue with
our example of the postal service (which is a long-distance information
transmission service by manual or mechanical means), in the action of
mailing a letter, the object being manipulated is a “letter”. Grammatically
speaking, the information manipulated in an action will be the direct object
of the verb describing the action. Each action creates or modifies objects
necessary to the service. The action of mailing a letter thus produces a
mailed letter. An action can also require an object produced by another
action. For example, the delivery of a letter uses a mailed letter. It is
interesting to note that the understanding of these objects is tacitly shared
among the various actors (user, provider) in a service, and their clarification
is the whole challenge of service processes. Additionally, these objects can
be described by a particular state. For example, a letter can be in the written
state, in the posted state, in the delivered state or in the read state.

88
Architecture and Governance for Communication Services
This object can be connected to the idea of a business entity defined in
methods of analysis of business processes:
A business entity is the representation (image in the
information system) of a concept manipulated by the business
in its activity. It is an object produced or used by one or
more
business
processes,
and
therefore
manipulated
by
business
collaborators.
It
is
a
significant
business
idea,
directly understandable and able to be shared by the various
individual actors in the domain being modeled. [SIM 09, p. 24]
A business activity is (…) defined by the information
(business entities) it uses at the entry point and that which it
produces at the exit point. [SIM 09, p. 25]
Using our terminology, we would call these service entities. By adapting
the above definition to our context, a service entity can be defined in the
following manner (changes are in italic):
A service
entity is the representation (image in the
information
system)
of
a
concept
manipulated
by
the
stakeholders in a service in their actions. It is an object
produced or used by one or more service processes, and
therefore manipulated by the stakeholders in the service. It is a
significant idea of service, directly understandable and able to
be shared by the various individual actors in the domain being
modeled.
These service entities can be added to the UML activity diagram shown
previously. An arrow from an action to a service entity means that the action
produces this service entity, and an arrow from a service entity to an action
means that the action uses this service entity. The state of a service entity,
once the action is finished, is represented in brackets.
The links between service entities can also be represented in a UML class
diagram, usually called an information model in enterprise architecture
methods. Links between service entities are structural links and independent
of the state of the entity. Figure 3.3 shows the link between letter and stamp.

Building an Architectural Framework for Telecom Services
89
Figure 3.2. Service processes and entities
Figure 3.3. Relationships between service entities
We have now briefly formalized an external view of the course of a
postal service. This formalization into a sequence of actions has the
advantage of being easily understandable by all stakeholders involved in the
service. Indeed, it can be validated by a marketing department as a target in
terms of the behavior of a service from the user’s view. This can be related
to marketing practices such as the definition of the user journey, illustrated
in [DUB 08]. This also corresponds to methods of service design (in the
ergonomics/use sense and not the applicative sense), such as, for example,
the definition of a service as a sequence of tasks [ZEI 85] or the
representation in a circle around the user of the necessary action sequences
[CAI 07]. Moreover, the identification of service actors and the links
between these actors can be correlated with the value chain of the service
letter
stamp
0..1
*

90
Architecture and Governance for Communication Services
and its business model. Even though the relationships being considered
between actors are not contractual links or financial flows, there is
often
a
cross-reference
between
contractual
relationships
and
usage
relationships.
3.1.3. Application to telecom services
Now let us transpose these ideas to telecom services. We immediately
face a difficulty: telecom services are usually considered by engineers
directly from a technical or applicative angle. Service processes or entity
models are not formally constructed, even though they are contained more or
less explicitly in requirements generated by a marketing department, for
example. We will formalize them using the service procedures. For services
specified in standardized protocols, such as SIP for conversational services,
we can, however, root out the service processes hidden in protocol standards.
Service actors and their actions can appear between the lines for example in
the traits of Alice, Bob and Carol, names commonly used in IETF standards
to designate users. RFC 3261, specifying the SIP protocol, contains 152
occurrences of the word Alice, 198 occurrences of the word Bob and 41
occurrences of the word Carol. So we can read:
Alice calls Bob using his SIP identity, a type of Uniform
Resource Identifier (URI) called a SIP URI. [IET 02]
Or
The 200 (OK) contains a message body with the SDP media
description of the type of session that Bob is willing to establish
with Alice. (p. 15)
Thus, we see in the very text of the RFC, the service actors (Alice the
caller and Bob the callee), their actions (Alice calls Bob) and the information
they are manipulating (a SIP URI that corresponds to the telephone number
and an SDP media session type is established between them).
This work has been done here for the most emblematic telecom services.
This type of service process modeling is used to clarify and bring to the level
of a process concepts that seem technical (such as SIP URI or media
session), but which are in fact entities essential to the use of the service, the
understanding of which is shared between users and service providers.

Building an Architectural Framework for Telecom Services
91
Non-technical groups such as marketing departments are then better able to
understand and validate the course of a service. Formal modeling and
illustrations are discussed in detail in Chapter 4.
3.2. A functional reference view for telecom services
We saw in the previous section that a telecom service, in the same way as
a tool, offers its users the capability to execute actions, and that these actions
can be described in an impersonal and decontextualized manner. We will
now look at how to formalize these action capabilities through the functional
reference view of telecom services.
3.2.1. Components of the functional view
We have seen that the functional view of business information systems is
defined by C. Longépé [LON 06] as describing “the functions of the
information system that are used to support the business process”. The
functional architecture is, therefore, “the structuring of the information
system into communicating functional blocks”. The definition of these
blocks has certain permanence, and they can be considered as invariant
during the time of a project. In the enterprise architecture approach, this
structure follows that of a local urban design plan (LUDP), as we saw in
Chapter 2. The functions of the information system are divided into
functional zones, functional quarters and functional blocks. A functional
block is described by the elementary functions it carries out. Elementary
functions, then, correspond to the smallest unit on which groupings into
blocks, quarters, and zones are based. We will now focus on the
identification of these elementary functions in the case of telecom services.
As noted in section 2.3.3 of Chapter 2, these elementary functions
correspond to technical functions, in the sense of the functional analysis
presented in section 2.2.2. Recall their definition; a technical function is:
An action that is internal to a product (between its
component parts), chosen by the designer-producer as part of a
solution to ensure service functions.
In our case of telecom services, the designer-producer is the person who
designs the sequence of a service, the person who specifies the service from
the user’s view, and not the person who develops the technical solution.

92
Architecture and Governance for Communication Services
Technical functions do not describe a technical solution, but rather the way
in which the service takes place. They describe what the technical solution
must provide. For example, consider the functional analysis of a bicycle. The
service functions of moving forward, turning and slowing down are ensured,
respectively, by the technical functions of the transmissions of movement,
steering and braking. These technical functions are then achieved via a
technical solution: the transmission of movement will be executed by the
pedals, chain, cogwheels and rear wheel; but it can also be achieved by an
engine, axles, driveshaft and wheels in another context of implementation.
These technical functions are relatively standardized within the same
technical domain. The words “transmission” and “distribution” in mechanics
designate precise and different technical functions. A list of common
technical functions will allow us simultaneously to describe a service in a
standardized manner and to better identify the technical solutions liable to
achieve this service. Because we are working here within the terminological
framework of the planning of information systems, we will speak of service
elementary functions (SEFs) rather than of technical functions, particularly
as the word “technical” can cause confusion with the technical view of a
service. We will now seek to deduce these elementary functions from the
service processes seen in the previous section.
Our proposition is to define an SEF in telecom services as an action
capability provided by a service to its stakeholders. By “action capability”,
we mean the possibility to act, offered to an actor by a service. Thus, a
telephone service offers the caller the capacity to make a call, the provider
the capability to deliver that call and the callee the capability to answer the
call. A video-on-demand service offers the spectator the capability to select a
video in a catalog and to watch it, and the provider the capability to
broadcast the video. These action capabilities are not specific to a given
service or a given use, but are decontextualized. An elementary function can
therefore be seen as a support allowing an actor to carry out an action. We
saw in the previous section that the constitutive actions of telecom services
can be described by an action verb and the direct object designating the
information being manipulated. For example, in the action of sending an
email, the action verb is “send” and the information being manipulated, in
the position of direct object, is “an email”. The support action capability will
thus be the “capability to send an email”. This action capability allows us to
characterize the functions of a service. For example, a messaging service is
defined as providing this capability to send an email.

Building an Architectural Framework for Telecom Services
93
However, a list of elementary functions is not sufficient to describe
precisely the course of a service. If we limited ourselves to describing a
service by listing the action capabilities it provides, we would be less precise
than in the business view, where service processes are not only made up of a
list of actions, but also specify the sequencing of these actions and the
information exchanged (via service entities). To get around this limit, we can
formalize
functional
operations,
with
each
functional
operation
corresponding to the interface of the execution of one, and only one,
elementary function. If the elementary function is “the capability to send an
email”, the corresponding operation is “sending an email”. We can
immediately see a strong link with the actions of the business view, a link
that we will study in the following section. Then, we can, as we will see in
Chapter 4 with the functional view of a service, describe a service by a
sequence of functional operations. Moreover, because an operation receives
entry data and produces exit data, we will make these data correspond to
service entities.
It is indeed interesting to consider, in our model, not only the action
capabilities
provided
by
services,
but
also
the
information
being
manipulated, as we saw in Chapter 2 with service entities. However, service
entities are not sufficient to describe the information being manipulated with
accuracy. So, if we consider only email or messaging entities, we cannot
distinguish between a draft message, a sent message and a received message,
even though these are different data. In addition, we cannot consider a
received message as a “message”-type instance, because “received message”
is not an instance, but a type. The states of entities are a way to distinguish
among them, but it seems more pertinent to have data specific to each state
in order to manipulate them more easily, while remaining in compliance
with the good practices of a business’s architecture. We will call these data
as functional service data. These functional data are connected to an
operation, as “sent message” is connected to “sending a message”. More
precisely, functional data can be defined as the type of data produced by an
operation when it is used: the action of sending a message produces a sent
message. Each piece of functional data comes from a service entity in a
particular state, for example the functional data “sent message” comes from
the “message” service entity in the sent state. A service offering an SEF
elementary function must be capable of simultaneously offering the action
capability and of managing the data produced by this action. For example, a
service offering the capability to compose an email must simultaneously
provide the tools to edit the message and manage the composed message.

94
Architecture and Governance for Communication Services
A detailed modeling of all these ideas will be presented in Chapter 4.
3.2.2. Functional patterns
The work we have done to build business service processes gives us a
tool to identify SEF elementary functions based on the actions carried out as
part of a service. However, we are trying to identify generic action
capabilities that are not connected to a particular service. We have seen the
importance of the mediation of language in order to achieve this result.
First of all, we must develop a list that we will use to describe, in an
unambiguous manner, the functioning of telecom services for their
stakeholders. This uses a common nomenclature to designate all elementary
functions. First, we propose naming an elementary function with “capability
to”, followed by an action verb, and then by the service entity manipulated
during the action in the complementary position. For example, “capability to
send a message”. With regard to service entities, a lexical harmonization can
take place here for example between equivalent words such as “text” and
“SMS”. With regard to action verbs, we can harmonize them a priori by
defining a highly reduced list of action verbs to be used when naming action
capabilities.
To do this, we will introduce functional patterns, designed for their
generic and abstract character, based on the services provided by a telecom
operator and corresponding to its functional strategy. By functional strategy,
we mean the types of functions that fall within the competence of a telecom
operator. This functional strategy corresponds to a strategic invariant,
beyond the tactical variety of services implemented. Indeed, some action
capabilities close to telecom services are not in fact within the scope of the
service itself, but rather of related services. Thus, the creation of a document
or spreadsheet falls under the aegis of applications such as Word or Excel,
but not of telecom services. The creation of a file is, therefore, not among
our functional patterns. The provision of capabilities to create files, for
example with office tools such as word processors or spreadsheets, does not
currently enter into the functional strategy of telecom service providers. We
can compare this idea of functional strategy to that of the business barrier
evoked notably by D. Lombard [LOM 08].

Building an Architectural Framework for Telecom Services
95
The
first
pattern
is
the
historic
telecommunications
pattern:
the
communication pattern. A sending function is used to transform initial
information into a message, with a recipient address and a sender. A delivery
function is used to transform this message into received information,
according to the rules of distribution and to registration linking addresses
and recipients.
The second pattern is the Web pattern, and more generally the media
pattern: the diffusion pattern. A publication function is used to transform
initial information (e.g. a blog post or video) into published information with
an owner and within a container (e.g. a blog or catalog). A selection function
is used to navigate within the container to choose information, in accordance
with its authorizations.
Operation
Definition
Near meanings
Issue
Emit information toward recipients,
specified by a reachable address.
To capture, to pull
To send, to issue, to compose
Deliver
Deliver a message to one or more
recipients, specified by their reachable
address, possibly according to rules of
distribution.
To push, to distribute, to notify, to
provide, to deliver to transfer, to
forward, to route
To receive, to answer, to download
Publish
Publish information within a container.
To store, to fetch, to collect
To publish, to upload
Browse
Navigate within a group of elements in
a container, to select one or more
element.
To sort, to filter, to match, to
select, to get
To choose, to search
Define
Define, configure a reference.
To define, to create, to configure,
to setup, to set
Enforce
Verify the validity of information in
comparison to a reference.
To apply, to enforce, to follow, to
check
Table 3.1. List of generic functional operations (GFO)
Finally, a third pattern is an information parameter setting pattern: the
configuration pattern. It is used to define the information used in the

96
Architecture and Governance for Communication Services
previous patterns, such as distribution rules, authorizations or containers. A
definition function is used to define a reference, possibly based on other
information. An application function is used to determine pertinent
information from initial and reference information (e.g. the authentication of
a user by a login and password seized according to an identifying reference
password that produces an authentication token).
The
generic
functional
operations
(GFO)
of
these
patterns
are
recapitulated in Table 3.1. In the “near meaning” column, we have listed the
verbs designating an action from the perspective of the service provider (e.g.
“to distribute”) and those designating the same action from the perspective
of the user (e.g. “to receive”).
3.2.3. Application to telecom services
It is important to present a possible alternative for the construction of
SEF, an alternative that we have not retained here. It would consist of
deducing the SEF from the technical functions executed by the service
platforms and software applications of a telecom operator, by generalizing
them and rendering them abstract. A function such as “route an SIP
message”, rendered by the IMS core and its ASs, could be abstracted into the
SEF elementary function phone call delivering capability. This alternative
has not been retained. Even though it might be a relatively intuitive way to
proceed for engineers, it has the disadvantage of basing SEF not on the
action capabilities offered to service actors, but on the technical capabilities
offered by service platforms. SEF tends to reflect the functioning of these
platforms and not the functioning of the service, and we are surreptitiously
abandoning the point of view of use in favor of the point of view of service
production. An engineer will also tend to consider that a service such as
Skype or a conversational service based on IMS do not carry out the same
SEF, since their technical execution is very different – peer-to-peer in one
case and centralized in the other – while the functioning of the service in
itself, aside from any technical and non-functional aspect such as Quality of
Service (QoS) or security, is relatively similar. Moreover, experience shows
that the task of abstracting the functioning of service platforms is delicate in
organizational terms. Every project team naturally tends to emphasize the
specificities of its platform rather than the common functions, because the
organizational existence of the team is justified by these specificities.
Therefore, it is difficult for project teams themselves to construct a

Building an Architectural Framework for Telecom Services
97
functional reference view that will be common to all projects. However, the
construction by a third-party team of enterprise architects, not involved in
the various projects, requires thorough expertise from these architects on all
existing service platforms, in order to be able to abstract and generalize the
functioning. However, this thorough expertise is generally the privilege of
the individuals who are in contact with the technologies, and therefore of the
project teams, but not of a transverse team of enterprise architects. The
architects must therefore bring together experts from various project teams
to listen to them and identify the common functions, with the contribution of
enterprise architects being principally methodological. This approach can
give
results,
but
works
only
in
a
collaborative
atmosphere,
when
organizational inertia is not too strong. Additionally, defined functions are at
risk of differing in granularity depending on the domain.
Deducing the SEF from the activities of service processes correlated with
functional patterns has the advantage of being an objective approach based
on service processes. The makeup of the functional reference view is
therefore not contaminated by the technical issues of the different project
teams, remaining solely at the level of the action capabilities offered. This
allows us to begin with the service offered, which is naturally expressed in
non-technical language (not technical jargon), which eases the task of
generalization. This approach can also serve as the basis for a team of
enterprise architects who will collect from the project teams not the
functioning of their platforms, but the service processes they execute, with
these processes being much simpler to establish objectively. This also allows
work to be done a priori on services that have not yet been deployed by a
telecom operator and not only on a number of platform or application lines
wide enough to be able to generalize their functioning. The only condition is
that the base actions allowed by these services must be identified; that is they
must be sufficiently common (e.g. with actors other than telecom operators
or non-computerized) to be able to be named.
Conversely, this can have the disadvantage of being exhaustive. Should it
be necessary to analyze all of the services offered by a telecom operator in
the form of a usage process in order to deduce the SEF? This is not the case,
because only some services, the most representative services, must be
analyzed; the other services can be summarized as a composition of existing
elements in these important services (possibly with different technical
aspects, as we will see in Chapter 4). In fact, the various telecom services are
indeed most often a recombination of elements existing in other services, as

98
Architecture and Governance for Communication Services
already noted in the Intelligent Network with the service elements mentioned
in Chapter 1, and a service is a combination of service elements, and these
service elements are finite in number (22 for INAP CS1 specifications).
Likewise, a finite number of SEF is used to describe the entirety of services
offered by a network operator. We will call these the reference SEF. Two
cases can be used to describe a new service. Either this new service can be
described with reference SEF (which is the vast majority of cases) or this
new service will actually contain a rupture in terms of the action capability
provided to the actors in the service, and it must be described in the form of
a service process in order to deduce the concepts being manipulated and the
new SEF(s) that will be used to describe this new service, generally in
combination with reference SEF. This new SEF (or SEFs) will not be
immediately incorporated into the corpus of the reference SEF. They will not
be considered as a reference SEF until the services requiring them are
important enough in the business strategy.
This discussion leads us to the question of the lifecycle of SEFs. The
proximity of SEF to the service process allows us to connect SEF to a
business strategy, more easily than in an approach that is based on existing
applications, which are not directly connected to the business strategy. It is
in fact difficult to determine the importance of an application in the business
strategy, while it is much easier to determine the importance of a service
being offered. A validation of the service processes by the organization in
charge of a company’s marketing can guarantee the alignment of the
business activities of these processes with the company’s strategy. The
lifecycle of an SEF is therefore as follows. An SEF appears to formalize a
new action capability introduced by a new service. This SEF becomes a
reference SEF when one or more of the service processes containing the
activity from which it is generated are considered (e.g. by a strategic
marketing entity) as sufficiently important in the business’s strategy. This
SEF is withdrawn as a reference SEF when the service process or processes
containing the activity from which it is generated has lost all importance in
the business’s strategy. As the business strategy evolves independently of the
SEF, consistency between the usage process and the SEF can be verified at
each evolution using automatic tools, as described in [SIM 09] with the
definition of metric measuring the alignment between the usage process and
the SEF.

Building an Architectural Framework for Telecom Services
99
Moreover, we will see in Chapter 5 that computer tools can be used for
each project to describe its functional architecture using the functions of the
functional reference view. After this study of a functional reference view for
telecom services, we will address the construction of a technical reference
view, a technical view fully disconnected from the functional view.
3.3. A technical reference view for telecom services
Two services providing the same service, and the proceeding of which is
similar, if not identical, can nevertheless be executed technically in a very
different manner. For example, Skype and MSN Messenger provide a
relatively similar service (at least, they share numerous functionalities),
though one is executed in a distributed manner by means of a network of
peers, and the other is executed in a centralized manner in client–server
mode. Therefore, in order to be able to describe a service system completely,
we must be able to distinguish between these two cases. This requires a
study of technical solutions that we have deliberately left out of our
discussion
in
the
previous
sections,
in
order
to
separate
technical
considerations from considerations of the service rendered and its execution,
as these considerations overlap too often. We will now study how to
assemble a technical reference view of telecom services, incorporating the
business reference view and the functional reference view. In Chapter 4, we
will see how to link these different views of the architecture of a service in
its totality.
3.3.1. The elements of the technical view
The technical view of business information systems is defined in
[LON 06] as describing “all of the materials, basic software, and
technologies used”, with the technical architecture being “the structuring of
the technical infrastructure means to be implemented in order to computerize
the company’s activity”. Similarly, the technical reference view for telecom
services will contain technical solutions that can be implemented in order to
computerize the execution of services.
The fact that classic telecom service functions connected to standards
explain why the domain of functional architecture (through a functional view
as presented in section 3.3) is little developed in the telecom community.
A technical solution, for example IMS, supports a specific service in a

100
Architecture and Governance for Communication Services
privileged manner – for example telephony – since this technical solution
has been specified in this objective. In the software world, technical
solutions (such as databases, hypertext preprocessor (PHP) servers and
servlet engines) are generic and are not intrinsically carriers of any particular
service, as they are programmable and able to receive a code that will direct
the behavior. This is an important difference between telecom services and
software services. Constructing a telecom service architecture will therefore
consist of identifying low-level technical functions (e.g. “generate a SIP
request”) that responds to the need of the service, based on standard
functions, and then deducing from these the technical components of the
solution (SIP terminal, SIP proxy, etc.) and their data exchange via
protocols. This is strongly related to the design of a technical object. Thus, in
the example of the functional analysis of a bicycle in Chapter 2, the technical
function of the transmission of movement is executed by exchanges of
energy between the pedals, chain, cogwheels and rear wheel. The problem of
integration tests and end-to-end tests is thus particularly significant for
telecom services. This is to ensure that the various technical components of
the solution, which are meant to be able to work together due to their
compliance with standards, are actually compatible and ensure together the
low-level technical functions retained by the service architect once
assembled in their environment.
Conversely, designing a software architecture consists of identifying
consistent software modules in order to meet a functional need, and
controlling the coupling between these software components. These software
modules can thus be developed by different teams, evolve independently
during the lifecycle of the software and be updated separately, in compliance
with their contracts. The problem of consistency and coupling occurs less for
classic telecom services, as it will have already been addressed early in the
process as part of standardization
1. The perimeter of a technical solution is
itself defined in the standard, and its coupling with the other components is
specified by the protocol. On the contrary, the software architect must
determine himself the perimeter of the software modules and their coupling,
in accordance with the environment being used, as well as functional and
non-functional criteria. Consistency can often be syntactic (an error-
management module, a man–machine interface management module, etc.),
temporal (an initialization module, a close module, etc.) or functional, when
1 This problem occurs, however, at the level of integration and tests, as standards or their
implementation can lack consistency or conceal tight couplings.

Building an Architectural Framework for Telecom Services
101
a module brings together all of the elements necessary to the execution of a
functionality simultaneously for the interface, processing and data. Coupling
defines the level of dependence between modules. A loose coupling
facilitates
evolutions
by
allowing
concentration
of
modifications
on
identified
modules
and
minimizing
side
effects.
A
good
software
architecture must at least identify the level of coupling between the different
modules, in order to facilitate the lifecycle of the software. Insofar as
possible,
the
software
architect
applies
the
principle
of
strong
consistency/loose coupling: a software module is strongly consistent and
loosely coupled with the other components. Functional consistency is
usually considered the strongest (refer, for example, to these levels of
consistency in [PRE 92]).
The search for functional consistency is manifested in a traceability link
between SEF and software modules, without refining technical functions (at
least at the architectural level). For example, the software development of a
social network including a text messaging function. Ideally, the software
architect will seek to bring together all of the functions connected to this
messaging within an independent module, loosely coupled with the rest of
the software of the social network. This module can then evolve
independently of the rest of the service, for example by allowing, in a
subsequent version, to send and attach images as well as text. The functions
of sending messages, receiving messages and looking up messages will then
be grouped into the same software module. The topology of the technical
elements (client/server, distribution of modules, etc.) does not appear, as it is
managed by the commonplace low layers of the software (e.g. the
mechanism
for consultation of a Web page by
a navigator or a
communications link by events between modules). The mechanisms that will
be
used
inside
this
software
module
(e.g.
a
mechanism
of
subscription/notification of received messages, or the regular checking of a
message inbox, or the checking of an inbox following the notification of the
arrival of a message) are not determined by the software architect of the
social network service, but by the developer of the messaging function. In
fact, the coupling between software modules has been determined in such a
manner (e.g. the definition of the API between the messaging module and
the other modules) so that the choice of one mechanism or another at the
level of the messaging module will not impact the other modules. Likewise,
in a Web optic, a telephone call generating function will not necessarily give
rise to a terminal component and a call server component, but rather give

102
Architecture and Governance for Communication Services
rise to a single software module, responsible for both the user interface and
server mechanisms at once.
As our intention here is to describe communication services, whether
their implementation is telecom or software oriented, a refinement of the
technical functions of services does not seem pertinent. On the other hand,
existing technical solutions are limited for both the software architect and the
telecom architect. In our example of a social network, we are implicitly in a
homogeneous technical environment and a Web environment (navigator,
Web server and database) within which the service is executed. However, an
architect must often deal with existing and varying technical environments.
Thus, the design of the architecture of our messaging module will differ
strongly if the messaging function must be coupled with an IMS technical
environment. Our needs are twofold. On the one hand, we must define a list
of technical environments, and particularly of communication links that will
allow the transfer of information. On the other hand, we must define the
applicative components executing the SEF within one or more technical
environments; these applicative components can be either software modules,
applications, or telecom service platforms, such as OMA enablers or call
control servers.
In the next sections, we will look at how to specify this list of technical
environments and communication links, by taking into account both telecom
and software technical solutions. We will then in Chapter 4 be able to
propose, with the applicative view of a service, a description of applicative
components such as implementing an SEF supported by a technical
environment.
3.3.2. Technical roles and reference points
When we wish to describe the technical solution supporting a service
system, we usually describe the technical components of this system; that is
its technical architecture. The technical components of a telephony service
are, for example, a terminal and a call server, etc. We have observed that
technical components and their topology are often the same in different
service systems. For example, the use of a three-tier layered architecture is
found in developments executing various services.

Building an Architectural Framework for Telecom Services
103
Generally speaking, a technical environment can be described using two
concepts: the technical elements that make up the environment and the
communication links between these technical elements. A communication
link between two technical elements allows these elements to exchange
flows of information via a specific mechanism such as, for example, a
protocol or a remote procedure call. In our example of the bicycle, the
communication link would correspond to the link between two elements of
the technical solution, such as the cogs creating a link between the pedals
and the chain. In the telecom world, this link is normally specified by
defining a reference point coupling these two elements. Like [MEN 05], we
define a reference point in this case as an abstraction of the coupling
between two elements via a specific protocol. This abstraction is sometimes
called an interface in certain standards for example there is the Gm interface
between UE and P-CSCF in the IMS. In other words, Gm is an abstraction of
the coupling between UE and P-CSCF via the SIP protocol. We prefer the
term reference point to that of interface so as not to cause confusion with the
external view of a functional component, which is also called an interface.
For the sake of simplicity, we will call the reference point either by its
standardized name if there is any or by an arbitrary name in the absence of a
standard.
Technical elements take their meaning through their insertion into a
technical environment and by their couplings with other elements via
reference points. Thus, a Web Service Consumer element makes sense only
in a link with a Web Service Provider, via a Web Service reference point. A
technical element can thus be seen as a role vis-à-vis one or more reference
points. We will therefore call these technical elements of technical roles. The
reference point is oriented; a technical role can in fact be either at the source
of exchanges with another technical role, or it can be at the destination,
depending on the message exchange pattern, which is classic in both
client/server architectures and telecommunication network architectures
[MEN 05]. A technical role can thus either send requests toward another
technical role via a reference point or receive requests from another technical
role via a reference point.
According to the classic layered model in telecom, formalized, for
example, in the ITU-T G.805 and G.809 standards, a reference point or
technical role can render abstract the lower level mechanisms. Figure 3.4
illustrates the concepts of division and layers as defined at the ITU.

104
Architecture and Governance for Communication Services
Figure 3.4. Division and breakdown into layers
A reference point can thus be broken down itself into two technical roles
and one lower level reference point. A protocol call flow typically involves
several technical roles in a lifeline, and a technical role can be broken down
into more detailed technical roles and reference points. Thus, a SIP/Web
service link will be a composition of a Web Service Provider role (for
messages leaving the Web service side) and a UE role (for the SIP side). In
the definition of technical roles, we will not go into detail with regard to the
functioning of a technical environment, but rather will focus on the
boundaries of this environment.
3.4. Summary
In this chapter, we have considered invariants in a telecom service.
Although services evolve rapidly in what are nowadays flexible enterprises,
both technically and regarding the offered functionalities what remains that
is stable enough to be able to be considered an invariant in the middle term?
We have identified three types of invariants:
– service process activities: linguistic invariants in the description of the
service rendered by its stakeholders (user, service provider);
– functional patterns: strategic invariants in the major functions provided
by a telecom operator (communication, diffusion or configuration of
information);
– technical patterns: technical invariants in protocols or architectural
models (e.g. IMS or so-called three-tier architecture).

Building an Architectural Framework for Telecom Services
105
These different invariants can be described according to the best practices
of IT enterprise architecture, in order to obtain the reference semantics we
discussed in Chapter 2:
– The business reference view therefore contains the linguistic invariants
(service processes).
– The functional reference view contains strategic invariants correlated
with the linguistic invariants to give rise to elementary functions (SEF),
functional operations (service functional operation (SFO)), and functional
data (service functional data (SFD)); where these functions, operations and
data represent the strategy of an operator applied to a particular business
domain.
– The technical reference view contains technical invariants, represented
by a group of reference points (RP) and technical roles (TR).
In Chapter 4, we will look at how to use, precisely, the concepts
introduced here in order to describe communication services using these
reference views.

Chapter 4
Modeling and Case Study
In Chapter 3, we studied the key concepts involved in building reference
views. In this section, we will look at how to model them formally using
UML notations, and then look at how to use them to describe any existing or
new telecom service. To do this, we will first return to the three reference
views introduced in Chapter 3: the business, functional and technical views.
Then, we will describe a service or a combination of services via three
views: the functional, technical and applicative view of a service. We will
not use the business reference view to describe a given service. As we have
seen, the functional reference view actually contains a semantic to describe
the course of services, which allows us an objective comparison of the
functional views created by different teams. The business reference view is
useful in constructing the functional reference view and in managing its
lifecycle (addition or withdrawal of a functional component). On the
contrary, during the conception of telecom services, the use cases are the
most often used. We will see that these use cases can be directly transcribed
into the functional view of the service. We will, however, use the applicative
view, which was not used to construct a reference view. This applicative
view links the functional components of a service and the technical roles
used to implement it. Remember the elements of a service system introduced
at the end of Chapter 2 (Figure 2.22). The functional view of a service will
describe the sequence of the service; the technical view of a service will
describe the technical solution retained; and the applicative view of the

108
Architecture and Governance for Communication Services
service will describe the way in which the sequence of the service is
executed by the technical solution.
4.1. The business reference view
4.1.1. Modeling
We can summarize the concepts that we have used for the business
reference view and the relationships between them in a meta-model. An
action is carried out as part of a service process. It is implemented by a
service stakeholder. It produces and uses service entities in a particular
service entity state, through the produce link and use link association class
(the interest in using an association class will be shown later in the meta-
model). Service entities can be in relationships with each other.
Figure 4.1. Meta-model of the business reference view

Modeling and Case Study
109
4.1.2. Illustrations
As an example, we will consider here the following telecom service
processes, each corresponding to a service function (as in functional
analysis); that is, the response to a type of need on the part of telecom
service consumers:
– making a phone call;
– sending and viewing messages;
– selecting and playing multimedia content (music or a video);
– accessing a subscribed service (connecting, signing in).
Events triggering process activities are represented in the form of the
() signal. Other processes can also be described, such as the publication of
one’s context (localization and presence) and its consultation by a third
party, or even the consulting of a calendar and the making of an
appointment, or the storing of files online. So as not to weigh down our
discussion, we will confine ourselves to the four processes indicated.
4.1.2.1. Making a phone call
The making and receiving of phone calls are described by the following
service process.
The stakeholders (actors) are the caller, the callee and the telephony
service provider. When a consumer of the service wishes to communicate
vocally and instantaneously with a contact, the caller user selects the
telephone number and then makes the call, provided that he/she has the right
to access the service. The service provider delivers the call, after having
verified the validity of the callee’s telephone number, which typically results
in ringing the callee. If the callee answers, this produces a communication
session that allows the caller and the callee to communicate. We can see the
similarities, as well as the differences, with the following process. Thus, the
verification of rights is carried out at the time the message is sent in one
case, and at the time the call is made in the other. These differences are
inevitable, due, for example, to differences in perception between the people
describing these processes. In section 4.1.2.2, we will see how functional

110
Architecture and Governance for Communication Services
patterns allow us, via a harmonization of actions, to emphasize similarities
and distinguish between superficial and structural differences.
Figure 4.2. Process of making and receiving calls
The service entities involved in the process are as follows:
– the address, which represents a reachability address such as a telephone
number or an email address;
– the address list, which represents a list of addresses, for example an
address book or a phone book;
– the phone call, which represents a request to establish a phone call;

Modeling and Case Study
111
– access rights, which represent the user’s right to access the service;
– the communication session, which represents an established phone call.
The relationships between these entities are shown in Figure 4.3. A
request to establish a phone call refers to a caller and a callee. A
communication session refers to a request to establish a telephone call.
Figure 4.3. Relationships between service entities in telephony
4.1.2.2. Sending and reading messages
The sending and reading of messages are described by the following
service process.
The stakeholders (actors) are the sender, the recipient and the messaging
service provider. The process begins when a consumer of the service wishes
to communicate via messaging with recipients. The sender selects their
addresses from a list, composes the message and sends it. The service
provider delivers the message into the recipients’ inboxes, after having
verified the sender’s access rights and the validity of the recipients’
addresses. When a consumer of the service wishes to read messages, the
receiver accesses his/her inbox, after verification of his/her access rights,
and can then read his/her messages.
The entities in this service process are as follows:
– the address, which represents a reachability address such as a telephone
number or an email address;
– the address list, which represents a list of addresses, for example an
address book or a phone book;
address
phone call
communication session
address list
*
*
0..1
1
caller
*
*
1
1
callee

112
Architecture and Governance for Communication Services
– the message, which represents a text message;
– access rights, which represent the recipient’s right to access his/her
inbox.
Figure 4.4. Process of sending and reading messages
The relationships between these entities are shown in Figure 4.5. A list of
addresses contains addresses. A message possesses a sender address and n
destination addresses.

Modeling and Case Study
113
4.1.2.3. Selecting and playing multimedia content
The selection and playing of audiovisual media are described by the
following service process.
The stakeholders (actors) are the viewer and the audiovisual service
provider. A consumer of the service wishes to consume audiovisual content.
The viewer selects this content from a catalog, depending on his/her rights to
access the content of the catalog. The service provider verifies these rights
and broadcasts the content. The user can then consume the audiovisual
content.
Figure 4.5. Relationships between messaging service entities
The service entities in this process are as follows:
– the catalog, which represents the list of audiovisual content available
for a given consumer;
– access rights, which represent the user’s right to access the service;
– audiovisual content, which represents media content (televisual or
musical).
The relationships between these entities are shown in Figure 4.7. A
catalog of audiovisual content contains audiovisual content.
4.1.2.4. Accessing a subscribed service
Access to a service is described by the following service process.
The stakeholders (actors) are the person being identified (the principal,
to
use
the
terminology
of
the
Liberty
Alliance
consortium
(http://www.projectliberty.org/), centered on the management of online
identity) and the service provider he/she is trying to access. A consumer
wishes to access a service. The principal user enters his/her credentials
address
message
address list
sender
*
*
* recipient
1
*
*

114
Architecture and Governance for Communication Services
(typically a login name and password) if he/she is identified by the service
provider via a user account, or he/she starts up his/her equipment (hardware
or software) if it is this equipment (e.g. a SIM card) that is identified by the
service provider. The service provider determines the rights attached to these
credentials or equipment and creates an authentication session as a result of
which the principal receives access to the services to which he/she is
entitled.
Figure 4.6. Process of selecting and playing media
Figure 4.7. Relationships between audiovisual service entities
audiovisual content
catalog
*
1..*

The
– the
This can
a certifi
– acc
The
access r
service entit
e access toke
n be, for exa
cate (such as
cess rights, w
relationship
right to a serv
Figur
ac
Figure 4.8. P
ties in this pr
en, which re
ample, a logi
s a mobile te
which repres
ps between t
vice is assign
re 4.9. Relations
ccess right
Process of acces
rocess are as
epresents the
in and passw
elephone with
sent the user’
these entitie
ned to an acc
ships between s
*
*
granted to
Modelin
ssing a service
follows:
means of ac
word, or a dev
h a SIM card
’s right to acc
s are shown
cess token.
service access e
access tok
ng and Case Stu
ccessing the
vice configu
d);
cess the serv
n in Figure
entities
en
udy
115
service.
ured with
vice.
4.9. An

116
Architecture and Governance for Communication Services
4.2. Functional reference view
4.2.1. Modeling
4.2.1.1. Functional patterns
The concepts of functional patterns seen in Chapter 3 are formalized in
the following meta-model.
Figure 4.10. The concept of a functional pattern
These concepts will be formalized according to stereotypical UML
categories:
– Generic Functional Operation (GFO);
– Generic Functional Data (GFD).
With these functional patterns, we are interested in the generic actions
that are used in a telecom service, with “generic” meaning in this case
independent of the entity being manipulated in this action. A functional
pattern comprised of a GFO that produces and uses GFD. A GFO is an
operation that can potentially manipulate any type of service entity. For
example, “send” is a GFO that can apply to a “message” entity in the

Modeling and Case Study
117
operation “send a message” as well as to a “call” entity in the operation
“send a call”, or even to a “multimedia content” entity in the operation “send
multimedia content”. GFD is the type of functional data manipulated by a
GFO. A generic functional “send” operation will require, for example, the
GFD “destination address”. The necessity of a destination address is
structurally included in the meaning of “to send”. This GFD can be seen as a
role played by data with regard to a GFO. With these functional patterns, we
will thus obtain not just a list of verbs to name these operations, but a
definition of entry and output parameters that must contain an operation
when named by a given verb.
In Chapter 3, we identified three patterns typical of telecom services, and
which combine in existing services. These patterns can be formalized in the
following models (Figures 4.11, 4.12 and 4.13).
Figure 4.11. Functional pattern of communication
4.2.1.2. Elementary functions, operations and data
How do we formalize elementary functions, functional operations and
functional data to describe a service? According to best practices in
enterprise architecture and software engineering (Unified Process (UP) and
UML), as described, we suggest formalizing them via stereotypical UML
categories:
– Service Elementary Function (SEF)1;
1 In Chapter 3, we have already seen the “service function” term within the context of
functional analysis. The service elementary function term is used here in a completely
different sense: a service elementary function in the context of our model corresponds to a
technical function in the sense of functional analysis.
«GFO»
issue
«GFD»
issued
information
«GFD»
information
«GFD»
destination
address
«GFD»
sender
«GFO»
deliver
«GFD»
deliv ered
information
«GFD»
delivery rules
«GFD»
registration
«uses»
«uses»
«produces»
«uses»
«produces»
«uses»
«uses»
«uses»

118
Architecture and Governance for Communication Services
– Service Functional Operation (SFO);
– Service Functional Data (SFD).
Figure 4.12. Functional pattern of diffusion
Figure 4.13. Functional pattern of configuration
Access to an SFD is gained via an SFO. We have chosen for each SFO to
produce only a single SFD. This allows us to create a strong link between the
data being manipulated and the processes manipulating this data. This means
«GFD»
information
«GFO»
publish
«GFD»
container
«GFD»
owner
«GFO»
browse
«GFD»
rights
«GFD»
selected
information
«GFD»
published
information
«uses»
«produces»
«uses»
«uses»
«produces»
«uses»
«uses»
«uses»
«GFO»
define
«GFD»
defined
information
«GFO»
enforce
«GFD»
information
«GFD»
information
«GFD»
enforced
information
«produces»
«uses»
«uses»
«uses»
«produces»

Modeling and Case Study
119
that each type of action produces one and only one type of data, and each
type of data is produced by one and only one type of action. A functional
operation produces one and only one functional data as output parameter and
uses n (where n ≥0) as entry parameter. These ideas are summarized in the
following UML meta-model.
Figure 4.14. The ideas of SEF, SFO and SFD
Operations can be seen as operators that manipulate functional data. For
example, the action “send an email” will use the functional data “composed
message” to produce the functional data “sent message”. These relationships
of use are a translation at the functional level of the fact that a business
activity requires for its execution a service entity (in a particular state)
produced by another business activity. The interest of these operations will
be clarified afterwards with the use of sequence diagrams to describe a
service.
In addition, the relationships between SFO can result in dependencies
between SEF. When an operation SFO-1 (where SFO-1 is corresponding to
an elementary function SEF-1) uses an item of functional data SFD-2
produced by another operation SFO-2 (SFO-2 corresponding to an
elementary function SEF-2), this is equivalent to a dependence of SEF-1 on
SEF-2. Such dependence means that SEF-1 needs SEF-2 in order to carry

120
Architecture and Governance for Communication Services
out its own function. There is therefore a strong link between functional
data, a functional operation and an elementary function.
In the context of enterprise architecture and information systems,
elementary functions are grouped into functional blocks. These blocks
produce and use functional data. They produce and use functional
operations, and these production and utilization links (or functional routes)
make up the external view of their relationships. These functional blocks are
then grouped into functional quarters, and these quarters are themselves
grouped into functional zones. In telecom services, it is interesting to adopt
the same types of divisions; not only in order to comply with best practices
in information systems planning, but also to use the highest level concepts
that allow us to hide the details of a domain through groupings such as
quarters or zones.
We will formalize these functional blocks using the stereotypical UML
category Service Functional Component (SFC), with the term component
recalling that a functional block possesses an external view. The use by an
SFC A component of an SFO B operation (a uses link) means that the SFO
A operation provided by this SFC A (a provides link) has as its input
parameter the data SFD B produced (output parameter) by the SFO B
operation.
4.2.1.3. Formal procedure to identify operations, functions and data
To identify the SFO functional operations of telecom services, we will
now combine functional patterns with the usage processes of the business
view. This will allow us to anchor SFO, SEF and SFD simultaneously in the
sequences of services and in the major groups of action capabilities provided
by telecom services. Based on these patterns, we can first define the rules of
nomenclature.
An SFO operation will be named by an action verb as described in a
functional pattern, followed by the service entity manipulated during the
action; for example, “issue message”.
An SEF elementary function will be named by the gerund of the verb of
the
corresponding
operation,
preceded
by
the
service
entity
being
manipulated during the action, and followed by the word “capability” to
indicate that we are dealing with a capacity for action. For example,
“message-issuing capability”.

Modeling and Case Study
121
Figure 4.15. Meta-model of the functional reference view
The SFD output parameter of an SFO is designated by the action verb of
the SFO in the passive tense, followed by the service entity being
manipulated; for example, “issued message” for the SFO issue message.
Since functional data are so strongly linked to the operation that produces it,
this link should be reflected in its name.
An SFO operation named “B A”, where B is an action verb and A is a
service entity, consists of the execution by a service system of action B on
entity A. For example, the SFO functional operation “make a call”
designates the execution of the action of making a call by the service system
composed of the caller, the telephony terminal, the network and the operator.
An SFD called “B-ed A” is the data produced during this action; for
example, “made call”. An SEF called “A B-ing capability” is the capability
offered by a service system to apply action B to service entity A. This formal
naming reflects the way in which functional operations and data are
constructed. To this we can add more user-friendly naming, expressing in a
simpler manner the meaning of the component or the functional data. For
example, we can associate the user-friendly name “send message function”
with the SEF message-issuing capability, or the user-friendly name “sent

122
Architecture and Governance for Communication Services
message data” with the SFD issued message. This allows us simultaneously
to preserve the harmonization of the names of SEF, SFO and SFD according
to the functional patterns seen above, and to adapt their names to the
vocabularies of the various domains.
Let us look at how to deduce SFO operations from the business view. We
saw in the previous section that an action from the business view produces
and uses service entities in a particular state. We have seen that the
association between action and entities in a particular state can be modeled
by two association categories; one for the production of the entity and the
other for its use. In this section, we see that there is an association category
linking an SFO operation with the SFD data rendered by this operation and
another association category linking this SFO operation to the SFD data
necessary when inputting this operation. To deduce a functional reference
view of our business reference view, we will make these association
categories correspond semantically, as illustrated in Figure 4.16.
This allows us to link, for example, a “send message” action producing a
sent message with the SFO operation “send message” producing the SFD
data “sent message”.
We do still have to describe how to take into account the functional
patterns in the definition of SEF, SFO and SFD. GFO operations and GFD
data are also linked via two association categories; one concerning the
production of data and the other its use. A semantic correspondence between
these association categories and those linking SFO and SFD will also be
created, as illustrated in Figure 4.17.
This allows us, finally, to construct our functional reference view by
semantically connecting the action of sending a message producing a
message in the sent state, to a GFD operation “send” producing the GFD
data “sent information” and then to lead to the SFO operation “send a
message” producing the SFD data “sent message”.
4.2.1.4. Construction algorithm of the functional reference view
Let us summarize. Each UML activity of a usage process can give rise to
an SFO and an SEF provided that this activity can be correlated with one of
the functional patterns we have just seen. We thus apply the following
method to our processes:

Fig
1) If
directly
broken
service
entity, t
activity
2) If
patterns
item of
item of
produce
the SFO
stage 2
of the f
correlat
activity
produce
the SFO
carried
2 This wo
and funct
gure 4.16. Link
f an activity
to stage 2.
down into m
entity in a p
then we deter
. If this is no
f an activity
s, and if the e
f GFD, then
f functional
ed by this act
O. If not, we
if an activity
functional pa
ed with an it
and an item
ed by this act
O. If not, we
out until all a
ork of adapting
tional operation
k between functi
produces on
If an activity
more elemen
particular sta
rmine a serv
ot possible, w
can be corr
entity produc
we deduce
data SFD f
tivity, with t
e rework the
y can be corr
atterns, and i
tem of GFD,
m of SFD f
tivity, with t
e rework the
activities are
g the business v
ns can be carried
ional reference
ne and only o
y produces s
ntary activiti
ate. If an act
vice entity ma
we fuse it wit
related with
ced by this a
an SFO ope
from the ser
this SFD con
process so
related with
if the entity
, then we de
from the ser
this SFD con
e process so
e studied.
view in order to
d out using an a
Modelin
view and busin
one service e
several servi
ies producin
tivity does n
anifesting th
th another ac
a GFO of o
activity can b
eration from
rvice entity
nstituting the
that this is t
a generic GF
produced by
duce an SFO
rvice entity
nstituting the
that this is
be able to ded
alignment study
ng and Case Stu
ness reference v
entity, then w
ce entities, t
ng one and o
not produce a
e added valu
tivity.
one of the fu
be correlated
this activity
in a particu
e output para
the case2. W
GFO operatio
y this activity
O operation f
in a particu
e output para
the case. St
duce elementary
y as defined in [
udy
123
view
we move
then it is
only one
a service
ue of this
unctional
d with an
y and an
ular state
ameter of
We repeat
on of one
y can be
from this
ular state
ameter of
tage 2 is
y functions
[SIM 09].

124
Architecture and Governance for Communication Services
Figure 4.17. Link with functional patterns

Modeling and Case Study
125
3) For each operation SFO, we consider each item of GFD used by the
GFO with which the SFO is correlated. If generic data can be connected to a
service entity in a particular state used by the activity from which the SFO is
deduced, then the SFO uses, as its input parameter, the SFD generated by
this service entity in a particular state. Service entities omitted in service
processes can be added if necessary.
4) An elementary function SEF is deduced from each SFO, corresponding
to the capacity of a service system to offer this SFO.
Thanks to these rules, we can obtain a single model for SEF, SFO and
SFD based on the usage processes executed by different teams, insofar as the
rules of construction of a usage process have been respected. It is possible to
add SFD input parameters at the level of SFO if they have been forgotten or
omitted in the usage process. A reflection on the added value of each SFO,
seen as a production operator of an item of functional data based on n others,
can in fact lead to the identification of new usage links, which must
retroactively be justified in the usage processes.
Let us apply this method, for example, to the service process of a
telephone call. The requesting call activity produces the phone call entity in
the requested state, and uses the reachable address entity in the selected
state. Let us discuss the previous four stages in the following:
1) The requesting call activity does not produce an entity. The added
value of this activity is the making of a phone call to a recipient. This added
value can be manifested by the production of a “phone call” service entity in
the “requested” state.
Figure 4.18. Modification of a service process
2) The requesting call activity can be correlated with the generic function
GFO issue stemming from the functional pattern of communication. The
phone call entity in the requested state can be correlated with the generic
data GFO issued information, which corresponds to information generated.
We therefore deduce from the requesting call activity the operation SFO
[requested]
:phone call
requesting a call

126
Architecture and Governance for Communication Services
issue phone call, and the functional data item SFD issued phone call is
deduced from the phone call entity in the requested state.
Figure 4.19. Construction of a functional operation and of the
produced functional data
3) The generic operation GFO issue uses an item of generic data GFD
destination address, which can be linked to the entity address in the selected
state, since the address entity represents the reachable address of the
recipient of the call request.
4) An elementary function SEF phone call-issuing capability is deduced
from the operation SFO issue phone call.

Modeling and Case Study
127
Moreover, we have already seen the benefit of grouping elementary
functions SEF into functional components SFC. We will carry out a very
simple grouping here. Elementary functions SEF, operations SFO and data
SFD are grouped into an SFC according to the entity from which they result,
an entity recalled in their nomenclature. An SFC will therefore be used to
manipulate a service entity from the business view through various
operations. Thus, the elementary function SEF message-issuing capability
will itself be contained in the component SFC message. This “message”
block will thus offer an SFO issue message operation and will be responsible
for the data produced by this operation, that is the SFD issued message. With
this method of grouping, functional blocks combine two sources of
legitimacy. They are simultaneously generated from the business view
through the entity they manage, and generated from the functional patterns
through the operations they offer on this entity.
Figure 4.20. Construction of the functional data used
Caller:
Selecting callee address
lki
h
[selected]
callee number:reachable address
[recognized]
caller phone:way to access
wish to communicate with X
requesting a call
decision
Callee:
answering the call
call answered
callee alerted
[recognized]
callee phone:way to access
decision
Telephony provider:
:audio conversation
delivering call
[provided]
callee:reachable address
[delivered]
:phone call
answering the call
call answered
callee alerted
[recognized]
callee phone:way to access
decision
Selecting callee address
[selected]
callee number:reachable address
delivering call
[recognized]
caller phone:way to access
wish to communicate with X
requesting a call
decision
[provided]
callee:reachable address
[delivered]
:phone call
lki
h
:audio conversation
class communication pattern
«GFO»
issue
«GFD»
issued
information
«GFD»
initial information
«GFD»
destination
address
«GFD»
sender
d
«
«produces»
«uses»
«uses»
«uses»
class Phone call
«SFO»
issue phone call
«SFD»
selected reachable
address
«input»

128
Architecture and Governance for Communication Services
4.2.2. Illustration
Let us examine the SFO and SFD corresponding to the service processes
described in section 4.2.1: sending and reading messages, making a phone call,
selecting and playing multimedia content, and accessing a subscribed service.
4.2.2.1. Construction of SFO operations
By applying our method as detailed in the following, we obtain the
following SFO:
SFO
Generated by GFO
Generated by the activity
SFO define access right
GFO define
Grant access right (fulfillment process)
SFO enforce access right
GFO enforce
Creating authentication session
SFO define access token
GFO define
Provide access (fulfillment process)
SFO define catalog
GFO define
–
SFO define communication
session
GFO define
Answering the call
SFO browse content
GFO browse
Choosing audiovisual content
SFO deliver content
GFO deliver
Watching or listening audiovisual content
SFO issue content
GFO issue
Sending audiovisual content
SFO publish content
GFO publish
–
SFO define delivery device
GFO define
–
SFO browse message
GFO browse
Consulting messages
SFO deliver message
GFO deliver
Delivering message
SFO define message folder
GFO define
–
SFO issue message
GFO issue
Sending the message
SFO publish message
GFO publish
Synchronizing mailbox
SFO define messaging rule
GFO define
–
SFO deliver phone call
GFO deliver
Delivering call
SFO issue phone call
GFO issue
Requesting a call
SFO browse address
GFO browse
Selecting callee address (phone call
process)/selecting addresses (messaging
process)
SFO define address list
GFO define
–
SFO publish address
GFO publish
–
SFO define registration
GFO define
–
SFO enforce registration
GFO enforce
–
SFO define routing rule
GFO define
–
SFO enforce routing rule
GFO enforce
Delivering call
Table 4.1. List of SFO corresponding to the preceding service processes

Modeling and Case Study
129
Note that some SFO are not generated by any activity. In fact, functional
patterns lead us to take into account the pertinent SFO for which we have not
identified activities. This leads us back to reworking the business reference
view in order to propose these new activities for it. As an example, for the
process of selecting and playing audiovisual media, the broadcast pattern
leads us to add the publication of content and the constitution of a catalog,
which is quite pertinent. In addition, the communication pattern allows us to
note the forgetting of an activity of selecting equipment (video or audio
player) to be used to play the content. The process can therefore become as
shown on Figure 4.21 (changes are tinted). We can see how functional
patterns allow us to harmonize the business reference view and to make it
more reliable, both retroactively.
Figure 4.21. Improvement of the process of selecting and playing media content
The activities added are pertinent to the use of the service. The business
reference view can therefore be consolidated by working on the functional
patterns.

130
Architecture and Governance for Communication Services
Moreover, the SFO obtained can be defined in detail and linked to the
SFD they produce, as shown in Table 4.2.
Formal name
of SFO
User-friendly
name of SFO
Description
Formal name
of SFD
produced
User-friendly
name of SFD
generated
Description
SFO define
access right
manage right
Creation or
modification
of access
rights to a
service or to
data for a user;
this creation
can be made
by the service,
the IS or by
another user
(authorization
to access
personal data)
SFD defined
access right
Access right
data
Access rights
to a target (e.g.
a service,
content or
context)
SFO enforce
access right
Authenticate
Authentication
of a user and
control of
his/her rights
to access a
target (service,
content, etc.)
SFD enforced
access right
Service access
token data
Access rights
to a service,
the validity of
which has
been verified
in a specific
context of
access to a
target (service,
content, etc.)
by a
requesting
party
authenticated
by his/her
access token
Table 4.2. Description of SFO and SFD obtained from the
preceding service processes

Modeling and Case Study
131
SFO define
access token
manage identity
Creation or
modification
of an account
or identity
with a service
provider,
including the
creation of
possible
linked
credentials
SFD defined
access token
Identity data
User identity
and associated
credentials
SFO define
catalog
Manage
catalog
Creation or
modification
and making
available of a
catalog of
content
SFD defined
catalog
Content
catalog data
Catalog of
content created
or modified by
the content
aggregator
SFO define
communication
session
Setup
communication
session
Establishment
of a
communication
session
following an
accepted phone
call, with the
possibility of
call hold,
retrieve and
end
SFD defined
communication
session
Communicati
on session
data
Telephony
communication
established
following a call
SFO browse
content
Access catalog
Navigation in a
catalog of
content
(including
searches) to
select an
element
SFD selected
content
Targeted
content
Element of a
content catalog
chosen by a user,
for example
following
navigation in the
catalog
Table 4.2. (Continued) Description of SFO and SFD obtained from the
preceding service processes

132
Architecture and Governance for Communication Services
SFO deliver
content
Render
content
Delivery by a
broadcaster of
media content to a
user, individually
or in broadcast, by
playing this
content, with the
possibility of
pausing, repeating
and stopping
SFD delivered
content
Media render
data
Media content
received by
the recipient
of this content,
with the
possibility of
pausing,
repeating and
stopping
SFO issue
content
Serve
content
Emission of media
content from a
storage point of this
content (e.g. a
network source)
SFD issued
content
Media stream
data
Media content
emitted
toward a
recipient
SFO publish
content
Publication of
media content by a
owner of this
content
SFD
published
content
Content master
data
Audiovisual or
audio content
published by
the owner of
the content
SFO define
delivery
device
Choice of media
player with which
to diffuse content
SFD defined
delivery
device
Media player
data
Target address
of a content
emission
SFO browse
message
Display
message
Navigation in a list
of received
messages
(including
searches), possibly
for the purpose of
selecting an item
SFD selected
message
Read message
data
Message
displayed or
having been
displayed
SFO deliver
message
Message
delivery
Delivery of a
message into the
inbox of its
recipient(s)
SFD delivered
message
Incoming
message data
Message
received by
the message
recipient
SFO define
message
folder
Manage
message
box
Creation and
modification of a
message storage
space (inbox) and
of the associated
folder tree
SFD defined
message
folder
Message folder
data
Message
storage space
(inbox) and
associated
folder tree
Table 4.2. (Continued) Description of SFO and SFD obtained from the
preceding service processes

Modeling and Case Study
133
SFO issue
message
Send
message
Composition and
sending of a text
message to one or
more recipients,
including the addition
of attachments
SFD issued
message
Sent message
data
Message
composed and
sent by a user
to one or more
recipients
SFO publish
message
Store
message
Storage, filing or
deletion of a received
message in an inbox,
either via a rule or
manually
SFD
published
message
Stored
message data
Message filed
automatically
or manually
by a user
SFO define
messaging
rule
Edit
messaging
rule
Definition of a
redirection rule,
filtering or filing of
received messages
SFD defined
messaging
rule
Messaging
rule data
Rule for
redirection,
filtering or
filing of
received
messages
SFO deliver
phone call
Route
incoming
call
Delivery of an
incoming phone call
SFD
delivered
phone call
Incoming call
request data
Phone call
received by a
user
SFO issue
phone call
Route
outgoing
call
Issue of an outgoing
phone call to a
recipient
SFD issued
phone call
Outgoing call
request data
Phone call
made by a
user
SFO browse
address
Display
directory
Navigation into a list
of reachable address
(including searches),
possibly to select an
item in order to
communicate
SFD selected
reachable
address
Communicatio
n target data
Reachable
address
chosen by a
user intending
to act with it
(e.g. by
sending a
message)
SFO define
address list
Set
contact
list
Establishment of a list
of addresses (address
book, contact list,
phone book, etc.)
SFD defined
address list
Address book
data directory
List of
reachable
address, such
as an address
book or a
phone book
Table 4.2. (Continued) Description of SFO and SFD obtained from the
preceding service processes

134
Architecture and Governance for Communication Services
SFO publish
address
Creation or
modification of a
reachable address,
for example in a
phone book or
address book
SFD
published
address
address record
data
Created or
modified
address, either
by a user or an
administrator
(e.g. in a
phone book)
SFO define
registration
Register
terminal
Establishment of a
temporary link
between
equipment
connected to the
network and a
reachability
address (e.g. a
telephone number)
SFD defined
registration
Terminal
registration
data
Temporary
link between a
reachability
address and
equipment
connected to a
network
SFO enforce
registration
Determination of
the registration to
be used in a given
case
SFD enforced
registration
SFO define
routing rule
Edit
communica-
tion rule
Definition of call
forwarding rules,
filtering of
received calls, etc.
SFD defined
routing rule
Reachability
rule data
Call
forwarding
rule and
filtering rules
SFO enforce
routing rule
Determination of
the routing rule to
be used in a given
case
SFD enforced
routing rule
Table 4.2. (Continued) Description of SFO and SFD obtained from the
preceding service processes
4.2.2.2. SFD functional data
The SFD used as input parameters by each SFO are shown in
Table 4.3.

Modeling and Case Study
135
SFO
SFD used as input by the SFO
SFO define access right
SFD defined access token
SFO enforce access right
SFD defined access right and SFD defined access token
SFO define access token
–
SFO define catalog
–
SFO define communication
session
SFD delivered phone call
SFO browse content
SFD defined catalog, SFD published content and SFD
enforced access right
SFO deliver content
SFD issued content
SFO issue content
SFD selected content, SFD enforced access right and
SFD delivery device
SFO publish content
SFD defined catalog
SFO define delivery device
–
SFO browse message
SFD published message, SFD defined message folder and
SFD enforced access right
SFO deliver message
SFD issued message
SFO define message folder
SFD enforced access right
SFO issue message
SFD selected address and SFD enforced access right
SFO publish message
SFD delivered message, SFD defined routing rule and
SFD defined message folder
SFO define messaging rule
SFD enforced access right, SFD defined message folder
SFO deliver phone call
SFD issued phone call, SFD enforced access right, SFD
enforced routing rule and SFD enforced registration
SFO issue phone call
SFD selected address and SFD enforced access right
SFO browse address
SFD enforced access right, SFD defined address list and
SFD published reachable address
SFO define address list
–
SFO publish address
SFD defined address list and SFD enforced access right
SFO define registration
–
SFO enforce registration
SFD defined registration and SFD enforced access right
SFO define routing rule
–
SFO enforce routing rule
SFD defined routing rule
Table 4.3. Functional data used by each SFO

136
Architecture and Governance for Communication Services
4.2.2.3. SEF elementary functions
The SEF corresponding to each SFO are listed in the following Table 4.4.
SFO
Corresponding SEF
SFO define access right
SEF access right defining capability
SFO enforce access right
SEF access right enforcing capability
SFO define access token
SEF access token defining capability
SFO define catalog
SEF catalog defining capability
SFO define communication session
SEF communication session defining capability
SFO browse content
SEF content browsing capability
SFO deliver content
SEF content delivering capability
SFO issue content
SEF content issuing capability
SFO publish content
SEF content publishing capability
SFO define delivery device
SEF delivery device defining capability
SFO browse message
SEF message browsing capability
SFO deliver message
SEF message delivering capability
SFO define message folder
SEF message folder defining capability
SFO issue message
SEF message issuing capability
SFO publish message
SEF message publishing capability
SFO define messaging rule
SEF messaging rule defining capability
SFO deliver phone call
SEF phone call delivering capability
SFO issue phone call
SEF phone call issuing capability
SFO browse address
SEF address browsing capability
SFO define address list
SEF address list defining capability
SFO publish address
SEF address publishing capability
SFO define registration
SEF registration defining capability
SFO enforce registration
SEF registration enforcing capability
SFO define routing rule
SEF routing rule defining capability
SFO enforce routing rule
SEF routing rule enforcing capability
Table 4.4. Elementary functions corresponding to each SFO

Modeling and Case Study
137
4.2.2.4. SFC functional components
The content of Tables 4.3 and 4.4 can also be represented in the graphic
form of class diagrams with dependence links between SFO and SFD. A
category diagram can, for example, represent the SFO operations of an SFC
component and their dependencies. As an example, the following figures
(Figures 4.22–4.24) are the class diagrams of several SFC.
Figure 4.22. Operations offered by SFC Phone call
We can easily recognize the functional pattern of communication,
completed solely by access rights.
Here, we can identify a sequencing of the functional pattern of
communication (for the sending/delivery of a message), and then of the
diffusion pattern (for the publication/reading of the message). The message
publication operation corresponds to the synchronization activity of the
inbox. The rules that automatically place messages into folders are not
routing rules (from the communication pattern), but rules linked to the
publication of the message (from the diffusion pattern).
«SFO»
issue phone call
«SFO»
deliver phone call
«SFD»
issued phone call
«SFD»
delivered phone
call
«SFD»
selected address
«SFD»
enforced access
right
«SFD»
enforced
registration
«SFD»
enforced routing
rule
«input»
«input»
«input»
«output»
«input»
«input»
«input»
«ouput»

138
Architecture and Governance for Communication Services
Here, we can recognize a sequencing of the diffusion pattern (for the
publication and then the selection of content), and the communication
pattern (for the sending of content and the delivery to its recipient). The
SFD-defined delivery address corresponds to the destination address of the
communication pattern. This element, which was not identified at the
business view level, is nevertheless an essential element, corresponding to
the choice of receiving media player.
Figure 4.23. Operations offered by SFC Message
«SFO»
issue message
«SFD»
issued message
«SFO»
deliver message
«SFD»
delivered
message
«SFO»
publish message
«SFD»
published
message
«SFD»
selected address
«SFD»
enforced access
right
«SFD»
defined message
folder
«SFO»
browse message
«SFD»
selected message
«SFD»
defined
messaging rule
«output»
«input»
«input»
«input»
«input»
«input»
«output»
«input»
«input»
«output»
«input»
«input»
«output»

Modeling and Case Study
139
Figure 4.24. Operations offered by SFC content
4.2.2.5. Functional quarters and zones
The grouping
of SEF elementary
functions into
SFC functional
components, and then into functional quarters and functional zones, is
detailed in Table 4.5. The grouping into SFC is done as explained at the end
of section 4.2.1.3. The grouping into quarters and zones is suggested here in
an arbitrary fashion, depending on the proximity of the functions being
manipulated. The issue of quarters and zones is mainly that of categorization
and more rapid comprehension of the functional reference view. As for
blocks, an automated design can be created, as proposed in [SIM 09].
SEF elementary
function
SFC functional
component
Functional quarter
Functional zone
SEF access right
defining capability
SFC access right
Identity and rights
User characteristics
SEF access right
enforcing capability
Table 4.5. Grouping into functional quarters and zones
«SFO»
browse content
«SFD»
selected content
«SFO»
issue content
«SFD»
issued content
«SFO»
deliver content
«SFD»
delivered content
«SFD»
published content
«SFD»
enforced access
right
«SFD»
defined catalog
«SFD»
defined delivery
device
«SFO»
publish content
«input»
«output»
«output»
«input»
«input»
«input»
«input»
«output»
«input»
«input»
«input»
«output»

140
Architecture and Governance for Communication Services
SEF access token
defining capability
SFC access token
Identity and rights
User characteristics
SEF catalog
defining capability
SFC catalog
Content publication and
access
Multimedia
SEF
communication
session defining
capability
SFC communication
session
Communication setup
Live
communication
SEF address
browsing capability
SFC address
Address book
User characteristics
SEF address
publishing
capability
SEF address list
defining capability
SFC address list
Address book
User characteristics
SEF content
browsing capability
SFC content
Content publication and
access
Multimedia
SEF content
delivering
capability
SEF content issuing
capability
SEF content
publishing
capability
SEF delivery device
defining capability
SFC delivery device
Content control
Multimedia
SEF message
browsing capability
SFC message
Message publication
and access
Messaging
Table 4.5. (Continued) Grouping into functional quarters and zones

Modeling and Case Study
141
SEF message
delivering
capability
SEF message
issuing capability
SEF message
publishing
capability
SEF message folder
defining capability
SFC message folder
Messaging control
Messaging
SEF messaging rule
defining capability
SFC messaging rule
Messaging control
Messaging
SEF phone call
delivering
capability
SFC phone call
Communication setup
Live
communication
SEF phone call
issuing capability
SEF registration
defining capability
SFC registration
Communication control
Live
communication
SEF registration
enforcing capability
SEF routing rule
defining capability
SFC routing rule
Communication control
Live
communication
SEF
routing
rule
enforcing capability
Table 4.5. (Continued) Grouping into functional quarters and zones
Thus, we get four functional zones:
– messaging, composed of functional quarters:
- messaging control,
- message publication and access;

142
Architecture and Governance for Communication Services
– live communication, composed of functional quarters:
- communication control,
- communication setup;
– multimedia, composed of functional quarters:
- content publication and access,
- content control;
– user characteristics, composed of functional quarters:
- address book,
- identity and rights.
These zones can be completed by the study of other types of telecom
services in the business view. Thus, taking into account the presence services
would, for example, undoubtedly lead to the addition of user context to the
user characteristics zone.
We can represent the content of zones and quarters through class
diagrams. The Figures 4.25 and 4.26 show the SFC and their SFO usage and
production links for the communication setup and address book zones.
4.3. The technical reference view
4.3.1. Modeling
These ideas introduced in section 3.3 on the technical reference view can
be meta-modeled as shown in the Figure 4.27.
These ideas will be represented by stereotypical UML classes:
– Technical Role (TR);
– Reference Point (RP).
An reference point is defined as semi-directional. When exchanges can be
initiated by two technical roles, two reference points of the same name and
opposing directions will be defined. The links between technical role and
reference point are called:

Modeling and Case Study
143
– “request via” when the technical role starts exchanges toward another
technical role via the reference point;
– “receives via” when the technical role is the recipient of a request made
by another technical role via the reference point. This recipient technical role
can then respond to the request via the reference point.
Figure 4.25. Communication quarter setup
Figure 4.26. Address book quarter
«SFC»
address
«SFO»
publish address
«SFO»
browse address
«SFO»
enforce access
right
«SFO»
define address
list
«SFC»
address list
realizes
realizes
«uses»
«uses»
realizes

144
Architecture and Governance for Communication Services
Figure 4.27. Meta-model of the technical reference view
4.3.2. Illustration
We
are
not
attempting
here
to
identify
technical
environments
exhaustively, but merely to present several of them. In this context, we have
studied the following technical environments, chosen either for their current
importance in the telecom sector, or for their exemplary character, as well as
for the diversity of applications covered, which paves the way for the
generalization and adaptability of the approach.
– IMS architecture;
– SOA architecture;
– Web three-tier architecture;
– Internet email architecture;
– SMS architecture;
– OMA XML Document Management (XDM) architecture;
– IPTV architecture;
– Human–machine interfaces (Graphical User Interface, GUI).
4.3.2.1. IMS architecture
The technical pattern of IMS is shown in Figure 4.28, as specified in
[ETS 05].

The
Techn
User E
(UE)
main technic
nical role
Equipment
T
re
p
Tabl
Figure 4.
cal roles of I
The communica
– initiates
eference point;
– initiates re
presence service
le 4.6. Technica
28. IMS technic
MS are show
D
ation terminal:
and receives c
equests toward
e, via the Ut ref
al roles of the IM
Modelin
cal pattern
wn in Table 4
Description
communication
particular app
ference point.
MS technical pa
ng and Case Stu
4.6.
n requests via
lications, for e
attern
udy
145
the Gm
xample a

146
Architecture and Governance for Communication Services
Call Session
Control Function
(CSCF)
The call server:
– receives and sends communication requests from the UE via the
Gm reference point;
– receives communication requests from other CSCF via the Mw
reference point.
– sends requests toward the HSS via the Cx reference point;
– sends requests toward the AS via the ISC reference point.
Home Subscriber
Server (HSS)
The subscribers server:
– receives requests from the CSCF via the Cx reference point;
– receives requests from AS via the Sh reference point.
Application
Server (AS)
The services server:
– receives requests from the CSCF via the ISC reference point;
– receives requests from the UE via the Ut reference point;
– sends requests toward the HSS via the Sh reference point.
Table 4.6. (Continued) Technical roles of the IMS technical pattern
The protocols usually chosen for these reference points are shown in
Table 4.7.
Reference point
Protocol
Gm
SIP
Mw
SIP
ISC
SIP
Cx
DIAMETER
Sh
DIAMETER
Ut
http
Table 4.7. Usual protocols of the IMS technical pattern

4.3.2.2.
With
describe
architec
The
Techn
WSC f
Service
Consum
WSP fo
Service
SOA archite
h regard to t
ed, for examp
cture shown i
principal tec
nical role
for Web
e
mer
T
for Web
e Provider
T
re
Tabl
ecture
the SOA patt
ple, by [CHA
in section 1.2
Figure 4.2
chnical roles
The software cli
– seeks out W
– calls on W
The software cli
– receives ca
– publishes
eference point.
le 4.8. Technica
tern, the pat
A 03]. This i
2.1 (Figure 1
29. SOA techni
of SOA are
D
ient who consum
Web services v
Web services via
ient who provid
alls via the bind
the Web serv
al roles of the S
Modelin
ttern is show
is a formaliza
1.6).
cal pattern
shown in Ta
Description
mes a Web serv
ia the find refer
a the bind refere
des a Web servi
d reference poin
vices that it pr
SOA technical p
ng and Case Stu
wn in Figure
ation of the t
able 4.8.
vice:
rence point;
ence point.
ice:
nt;
rovides via the
attern
udy
147
4.29, as
technical
e publish

148
Architecture and Governance for Communication Services
WSD for Web
Service
Directory
A Web services directory:
– receives searches from WSC via the find reference point;
– receives publications from WSP via the publish reference point.
Table 4.8. (Continued) Technical roles of the SOA technical pattern
The protocols usually chosen for these reference points are shown in
Table 4.9.
Reference point
Protocol
Bind
SOAP, REST
Find
UDDI
Publish
UDDI
Table 4.9. Usual protocols of the SOA technical pattern
4.3.2.3. Web three-tier architecture
With regard to three-tier architectures, the classic pattern, as described,
for example, in [LON 01], is shown in Figure 4.30.
The principal technical roles of three-tiers architectures are as follows.
Technical role
Description
Web page
The presentation tier, ensuring interaction with the user:
– generates requests toward the service logic via the service
access reference point and formats responses.
Service logic
The business tier, implementing service logic:
– receives requests from Web pages via the service access
reference point;
– utilizes persistent data via the data access reference point.
Data object
The data tier, storing permanent data:
– receives requests from the service logic via the data access
reference point.
Table 4.10. Technical roles of the three-tier technical pattern

The
Table 4
4.3.2.4.
With
598 IET
As a
includes
Transfe
(MS) el
slightes
univoca
protocols u
.11.
Ref
Service acc
Data access
Table 4.
Internet ema
h regard to e
TF Internet M
an example, t
s the Mail U
r Agent (M
lements, as w
t formalizati
al basis for te
Figure 4.30.
usually chose
ference point
cess
s
.11. Usual prot
ail architectu
email, the tec
Mail Architec
the schema p
User Agent (M
MTA), Mail D
well as the l
ion of this sc
echnical arch
. Three-tier tech
en for these
RPC p
Data r
tocols of the thr
ure
chnical patte
cture, is show
proposed by
MUA), Mail
Delivery Ag
links betwee
chema render
hitecture.
Modelin
hnical pattern
e reference p
Protocol
protocols
request languag
ree-tier technica
ern, as descri
wn in Figure
IETF is show
Submission
gent (MDA)
en these elem
rs its usage m
ng and Case Stu
points are sh
ges
al pattern
ibed at IETF
4.31.
wn in Figure
Agent (MSA
and Messag
ments. Howe
more difficu
udy
149
hown in
F in RFC
e 3.36. It
A), Mail
ge Store
ever, the
lt, as the

150
Ar
The
Figure 4
Techni
Mail U
Agent
Mail
Submis
Agent
rchitecture and
principal
4.12.
ical role
User
(MUA)
Mes
–
–
ssion
(MSA)
Man
–
–
Table
Governance for
Figure 4.3
technical ro
ssaging agent:
– sends emails
– retrieves ema
naging agent for
– receives mess
– sends messag
e 4.12. Technica
r Communicati
31. Email techn
oles of em
Des
to MSA via the
ails from MS vi
r emails genera
sages from MU
ges to MTA via
al roles of the e
on Services
ical pattern
mail messag
scription
e MUA–MSA r
a the MUA–MS
ated by local use
UA via the MUA
the MSA–MTA
mail technical p
ging are sh
reference point;
S reference poin
ers:
A–MSA referen
A reference poi
pattern
hown in
;
nt.
nce point;
int

Modeling and Case Study
151
Mail Transfer
Agent (MTA)
Managing agent for emails coming from other domains:
– sends to or receives messages from other MTA via the
MTA–MTA reference point;
– sends messages to MTA.
Mail Delivery
Agent (MDA)
Managing agent for delivering emails into inbox:
– receives messages from MTA via the MTA–MDA reference point;
– sends messages to MS via the MDA–MS reference point.
Message Store
(MS)
Email storage space:
– receives messages from MDA via the MDA–MS reference point;
– receives requests from MUA via the MUA–MS reference point.
Table 4.12. (Continued) Technical roles of the email technical pattern
The protocols usually chosen for these reference points are shown in
Table 4.13.
Reference point
Protocol
MUA–MSA
SMTP
MSA–MTA
SMTP
MTA–MTA
SMTP
MTA–MDA
SMTP
MDA–MS
SMTP
MUA–MS
POP, IMAP
Table 4.13. Usual protocols of the email technical pattern
4.3.2.5. SMS (text messaging) architecture
With regard to the SMS (text messaging) pattern as described in
[3GP 01], at the protocol level application, each reference point (RP) could
be broken down into lower-level protocol procedures.

152
Architecture and Governance for Communication Services
Figure 4.32. Email technical pattern according to IETF

The
Table 4
Techn
Short M
Entity
SMS C
(SMSC
Mobile
(MS)
principal te
.14.
nical role
Message
(SME)
E
Center
C)
R
p
e Station
M
p
Table
Figure 4.3
echnical role
Entity generatin
– sends SMS
Receives and dis
– receives m
point;
– distributes
Mobile terminal
– receives m
point.
e 4.14. Technica
33. SMS techni
es of SMS
D
ng the SMS:
S to SMSC via
stributes SMS:
messages from
s messages to M
l receiving SMS
messages from
al roles of the S
Modelin
cal pattern
(text messa
Description
the SME–SMS
SME via the
MS via the SMS
S:
SMSC via th
SMS technical p
ng and Case Stu
aging) are sh
SC reference po
SME–SMSC
SC–MS referenc
he SMSC–MS
pattern
udy
153
hown in
oint.
reference
ce point.
reference

154
Ar
The
Table 4
4.3.2.6.
With
http://w
OMA X
docume
the refe
aggrega
The
Tec
XDM
(XD
XDM
(XD
rchitecture and
protocols u
.15.
Refe
SMS-SMSC
SMSC-MS
Table
OMA XDM
h
regard
www.openmo
XDM is an en
ents stored in
erence point
ation proxy).
principal tec
chnical role
M Client
DMC)
C
M Server
DMS)
S
p
Table 4.1
Governance for
usually chose
erence point
e 4.15. Usual pr
architecture
to
OMA
obilealliance.
nabler define
n a reference
can be broke
Figure 4.34.
chnical roles
Client entity ab
– sends requ
Server entity sto
– receives m
point.
16. Technical r
r Communicati
en for these
MAP
MAP
rotocols of the S
e
A
XDM,
org/], the p
ed at OMA u
e from a clien
en down into
OMA XDM tec
of XDM are
Des
le to manipulat
uests to XDMS
oring XML doc
messages from
oles of the OMA
on Services
e reference p
Protocol
SMS technical p
as
defi
attern is sho
used in the m
nt. In the SM
o lower leve
chnical pattern
e shown in T
scription
te an XML docu
S via the XDM r
cuments:
m XDMC via t
MA XDM technic
points are sh
pattern
fined
in
own in Figu
management
MS technical
l procedures
able 4.16.
ument:
reference point
the XDM refer
cal pattern
hown in
[OMA,
ure 4.34.
of XML
l pattern,
s (e.g. an
.
rence

The
Table 4
4.3.2.7.
With
taken an
The
Techn
Media
protocols u
.17.
Refer
XDM
Table 4.1
IPTV archit
h regard to I
nd simplified
principal tec
nical role
renderer
E
M
M
Table
usually chose
rence point
17. Usual proto
tecture
PTV, we can
d from [ITU
Figure 4.3
chnical roles
Entity playing m
– sends quer
MD reference po
– sends requ
MD reference po
e 4.18. Technica
en for these
XCAP
ocols of the OMA
n consider th
08].
35. IPTV techni
of IPTV are
D
media to the use
ries to media d
oint.
uests to media d
oint.
al roles of the IP
Modelin
e reference p
Protocol
P
MA XDM technic
he pattern sh
ical pattern
as shown in
Description
er:
delivery to play
delivery to play
IPTV technical p
ng and Case Stu
points are sh
cal pattern
hown in Figu
n Table 4.18.
y a given media
y a given medi
pattern
udy
155
hown in
ure 4.35,
a, via the
a, via the

156
Architecture and Governance for Communication Services
Media
controller
Entity controlling user rights and availability of requested media content:
– receives messages from the media renderer via the MA reference
point;
– sends requests to DRM server via the C-DRM reference point;
– receives verification requests from media delivery via the MC
reference point.
DRM server
Rights management entity:
– receives messages from the media controller via the C-DRM
reference point.
Media
delivery
Media content diffusion entity:
– receives requests for the diffusion of media content from the media
renderer via the MD reference point;
– sends verification requests to the media controller via the MC
reference point.
Table 4.18. (Continued) Technical roles of the IPTV technical pattern
The protocols usually chosen for these reference points are shown in
Table 4.19.
Reference point
Protocol
MA
RTSP, SIP
MC
COPS
MD
RTSP, RTP
C-DRM
License protocol
Table 4.19. Usual protocols of the IPTV technical pattern
4.3.2.8. Human–machine interface architecture
With regard to human–machine interfaces (HMI), the pattern is very
simple.
A technical role person sends requests to a machine via a GUI. The GUI
reference point is not created by protocols, but by devices that make
information tangible, such as keyboards, a mouse and screens, and even
interfaces that capture and interpret voices or gestures in the case of
advanced HMI. The reference point can also be in the opposite sense, when

it is the
case of
as a sou
section
4.4. Fun
Let u
views. W
represen
operator
concept
characte
nomenc
stakeho
then def
grouped
SFC off
offered
particul
and in p
machine tha
a telephone
urce and des
4.1.
nctional view
us recall the
We began w
nted in the f
r. From thes
ts
of
these
erizing
the
clature, we
lders in a se
fined SFD an
d these SEF
ffering SFO a
by a telec
arity of serv
particular a c
at makes con
ring. Obviou
stination of
Figure 4.3
w of a servic
part of Chap
with the acti
form of a pr
e, we deduce
e
typical
s
e
operation
constructed
ervice, and S
nd the input
F into SFC,
and therefor
com operato
vices by stud
composed se
ntact first wit
usly, here we
flow, and no
36. HMI techni
ce
pter 3 concer
ions taken b
rocess, for th
ed service en
ervices.
Th
ns
made
b
SFO, to c
SEF, corresp
and output p
for service
re able to ch
or. In this s
dying how t
ervice, using
Modelin
th the person
e are conside
ot as a servi
ical pattern
rning the bus
by the stakeh
he typical se
ntity models
hen,
using
by
followin
characterize
ponding to th
parameters of
functional c
haracterize th
section, we
to describe a
g its action c
ng and Case Stu
n; for exampl
ering a perso
ice stakehold
siness and fu
holders in a
ervices of a
that cover th
functional
ng
a
harm
the actions
hese operati
f each SFO.
components,
he action cap
will return
any telecom
capabilities,
udy
157
le, in the
on solely
der as in
unctional
service,
telecom
he major
patterns
monious
s of the
ons. We
We then
with an
pabilities
n to the
service,
and thus

158
Architecture and Governance for Communication Services
formally using its SFC, SFO and SFD. These action capabilities are an
important tool in constructing user-centric service architectures. We
presented the convergence of services as the possibility of composing
various services (blended services) in order to meet the needs of the service
consumer. We are considering a convergent service to be an assemblage of
action capabilities offered by different services. To do this, we will pursue
the approach initiated in the intelligent network with service elements, in
which every service is seen as a combination of service elements.
4.4.1. Modeling
We now have to study the best way to describe a service or a combination
of services using the functional reference view, SFC and SFD. According to
proper practice in software engineering, the starting point in describing a
system that will be created with software is to identify the use cases
characterizing this system, as well as the scenarios stemming from these use
cases3. These ideas are common in software engineering and are described in
detail in [COC 97] and [ALE 04], for example. Using a few well-chosen
scenarios, we can describe a service in a representative manner. The more
functionalities the service possesses, the more its scenarios need to be
described. Scenarios describing cases of error, which are essential for
software development, will not be emphasized here, since they have little
impact on functional architecture; that is, on the SFC describing the service
and the dependences between them.
Let us look at an address book service, for example. In this service, the
typical use case is as follows: an owner actor, the owner of the address book,
can manage his/her contacts (add, change or delete contacts or addresses of
these contacts) or consult his/her address book. We can see, then, that there
are two use cases: “manage contacts” and “consult address book”.
For the “manage contacts” use case, we will consider the following
scenario 1: the owner actor connects to his/her address book and adds an
entry (last name, first name and telephone number) in his/her friends list;
he/she approves the entry and it is added. Scenario 2 is as follows: for the
3 A Scenario is an example of the working of a service, wherein all possible logical directions
for the use cases are decided upon. For instance, for the use case “Making a telephone call”, a
scenario might be as follows: “The caller picks up his telephone and dials the callee’s number,
he hears the ringing tone, and the callee answers by picking up his telephone”.

Modeling and Case Study
159
“consult address book” use case: the owner actor connects to his/her address
book, scrolls down the list of his/her contacts and selects one contact. He/she
can then see the addresses saved for this contact.
Figure 4.37. Use case of an address book service
In the functional view of a service, we will start from these representative
scenarios to describe the sequence of services, translating them into the
reference semantic of the functional view defined in Chapter 3. Scenarios
established for different projects and by different teams will thus be
expressed using a common semantic, and so will be able to be compared and
positioned with respect to one another.
Now, let us look at how to represent the functional view of a service. We
propose formalizing this functional view as sequence diagrams composed of
SFC, where each message exchange between SFCs manifests as an
interaction between these SFCs. This representation in the form of sequences
allows us to specify the dynamic of the service by showing the links between
action capabilities. Interactions between SFC via messages do not indicate
temporal succession, but a relationship of dependency. A message from an
SFC A to an SFC B means that the action capabilities modeled by the SFC A
require the result of the implementation of the action capabilities modeled by
the SFC B to be implemented; that is, that the SFC requires for its execution
a functional data produced by the SFC B, and for this reason it triggers a
functional operation on the SFC B. Again, this triggering does not
Address Book
manage contacts
consult address
book
owner

160
Architecture and Governance for Communication Services
necessarily follow on from invocation by the SFC A in a temporal sense, but
it must have taken place in order for the SFC A to be able to carry out its
own activity. The return message contains SFD B, the functional data being
requested. This order of functional dependency is not linked to the temporal
order of invocation of the components. It is sometimes similar to the
temporal order, and sometimes opposes it. The lifeline of the component in
the sequence diagram is not a manifestation of the temporal life of the
component, but of its “functional life”; that is, the activity of this component
during which it obtains all of the functional data necessary for its execution.
The invocations by an SFC A of other functional components are the way in
which these functional data are recovered. They allow us to show that the
SFC A depends on these other components, since it needs the functional data
they control; that is, which they produce. The sequence diagram can be
compared to a process of transformation of n primary functional data items
(rendered in the return messages from SFC that do not call on other SFC)
into final functional data indicating the result of the service (rendered in the
final return message).
The approach to describe a service is as follows. First of all, as we have
seen, we identify the representative use cases of the service, and then the
scenarios typical of these use cases. Using these typical scenarios, we deduce
the SFC involved in the service, establishing a sequence diagram from the
scenario representative of the service. First, we determine the first functional
component of the scenario, which will return the final functional data of the
scenario. For example, if the scenario concerns a telephone service and stops
at the point at which the callee’s telephone rings, the first functional
component of the scenario will be the SFC component “phone call”, in
which the SFO operation “deliver phone call” is in charge of the delivery of
the call to the caller, and which sends back the SFD functional data
“delivered phone call” corresponding to a call delivered to the callee. This
first functional component is initiated by a lifeline representing the scenario
itself, which is usual in software engineering. The other functional
components of the sequence correspond to the operations required by this
first component to carry out the scenario. The messages exchanged between
components allow the components to obtain the functional data they need.
The existing dependencies among functional reference components are an
aid for the architect in the construction of his/her sequence diagrams. When
an architect adds an SFO operation into a functional sequence, he/she will
actually consider all of the functional data needed by this SFO as input. And,
for each functional data item used by this SFO, he/she will examine whether

Modeling and Case Study
161
these functional data are useful within the context of the scenario being
considered. If the answer is yes, he/she will add the component producing
this functional data into the sequence, which will be invoked by the SFC
containing this SFO. In the same manner, unexpected dependencies in the
functional reference view can be added when the scenario requires them.
Moreover, if a service scenario requires an action capability that is not
defined in the reference SFC, new functional components can be added to
describe the service. These components do not, however, become reference
SFC, but remain specific to the service.
Continuing with the example of the address book service, the functional
view of the service is made up of SFC sequences derived from these
scenarios. For scenario 1, inputting contacts, the elementary functions
necessary are the capacity to publish a reachable address (telephone number,
email address, Skype address, etc.); the capacity to create a list of addresses
(e.g. a “friends” list, a “colleagues” list and the root list) and the capacity to
authenticate and approve access. These elementary functions are connected,
respectively, to the components SFC address, SFC address list and SFC
access right. The SFC address is the first SFC of the sequence, because it
carries out the business objective of the scenario; that is, the addition of a
contact with a reachable address. The SFC address requires the SFC access
right because access to the address book is dedicated, and the user who
accesses it must be authenticated. The SFC address requires the SFC address
list because the addition of a contact is done in a contact list, which must
have been previously created, whether it is a new list or the default list.
Now consider the functional view of the second scenario. The elementary
functions implemented in this scenario are the capacity to navigate within an
address book; the capacity to authenticate and give access; the capacity to
install a contact list and the capacity to publish a reachable address. These
elementary functions are, respectively, contained by the SFC address, SFC
access right, SFC address list and SFC address. The SFC address is the first
SFC of the sequence, since it creates the aim of the scenario, which is to
consult a reachable address. The SFC address is dependent on the SFC
access right, because access to the address book is subject to authentication
and authorization, which would not be the case, for example, in a directory
service. The SFC address is dependent on the SFC address list, since
consultation involves a particular address book. The SFC address invokes
the publish address SFO of the SFC address, since a search involves
previously published addresses.

162
Architecture and Governance for Communication Services
Figure 4.38. Functional sequence of the contact management scenario
Figure 4.39. Functional sequence of the address book consultation scenario
«SFC»
:address
«scenario»
manage contacts
«SFC»
:address list
«SFC»
:access right
publish address()
enforce access right()
enforced access right()
define address list()
defined address list()
published address()
«scenario»
consult address
book
«SFC»
:address
«SFC»
:access right
«SFC»
:address list
«SFC»
:address
browse address()
enforce access right()
enforced access right()
define address list()
defined address list()
publish address()
published address()
selected address()

Modeling and Case Study
163
The description of a service scenario in the form of an SFC sequence
allows us to compare different services, with each service being described in
the same manner. Pertinent metrics can even be defined at this level, such as,
for example, a metric measuring the innovation of a service or its
complexity. We will propose several of these in Chapter 5.
We can formalize these new concepts in a service architecture meta-
model that is distinct from the planning meta-model in Chapter 3. The work
of describing services with SFC is therefore completely separate from the
work of designing SFC based on service processes.
Figure 4.40. Meta-model of the functional view of a service
We could also have described a service in a static form by listing the SFC
it executes. This type of representation has the advantage of simplicity, but
cannot be used to define the dynamic of the service. As an example, the class
diagram (Figure 4.41) shows the functional components of our address book
service and their dependencies.
Reference view
meta-model:
Service Functional
Operation
Functional
sequence
Scenario
use case
instantiate
instantiate
realizes

164
Architecture and Governance for Communication Services
Figure 4.41. Dependencies between functional components of an address book service
This type of representation does not allow us to link with scenarios, since
it remains static. We are therefore unable to justify the dependencies
between functional components. However, this type of schema shows a
summary view of the various components and their dependencies and can be
used to complement the sequence diagrams for communication purposes.
Other representations are also feasible. Scenarios can be described
functionally by activity diagrams, representing SFC in the form of
swimlanes and functional operations in the form of activities in these
swimlanes. However, sequential representation is most compliant with
proper practices in software engineering and the planning of information
systems [SIM 09].
4.4.2. Illustration
We will now illustrate this approach with three basic services:
– a telephony service, with “calling a correspondent on the telephone” as
use case;
– a video on demand service, with “watching a video” as use case;
– a messaging service, with “consulting emails” as use case.
«SFC»
:access right
«SFC»
:address list
«SFC»
:address

Modeling and Case Study
165
In each case, we will first consider a very simple description, probably
equivalent in terms of detail to the description created in the absence of a
functional reference view. Then, we will see how this reference view guides
us in the taking into account the functional issues in these use cases.
4.4.2.1. Example of a telephony service
The first use case, calling a correspondent on the telephone, is initiated by
the caller.
Figure 4.42. Telephony service use case
Suppose that this use case is described by a marketing team with the
following scenario. Alice selects Bob’s telephone number in her address
book service (as seen in section 4.4.1) and clicks on his number to initiate a
call to him; Bob’s telephone rings.
In a first approximation, this scenario can be described functionally by
the sequence diagram shown in Figure 4.43.
As explained in the previous section, this sequence diagram shows an
order of prerequisites and not a temporal order. The diagram means that the
objective of the scenario is for a telephone call to be routed to Bob’s
telephone (a delivery modeled by the phone call SFC and invoked by the
deliver phone call SFO). The execution of this delivery requires that a
telephone call has been issued (this issuance is initiated via the issue phone
call SFO). The execution of this call issuance requires Alice to be able to
search and choose a telephone number in her address book (search and
selection modeled by the SFC address). As previously seen, the fact that an
SFC A requires an SFC B is modeled by the invocation by the SFC A of the
operation offered by the SFC B.
caller
make call

166
Architecture and Governance for Communication Services
Figure 4.43. Functional sequence of the (simplified) telephone call scenario
This sequence diagram describes the call issuance scenario with the
nomenclature defined in the functional reference view seen in Chapter 3, as
it uses the SFO defined in this functional view. As previously mentioned,
this will allow us easily to compare scenarios described by different project
teams. However, this sequence diagram leaves out important functional
issues, and the functional reference view will help us to identify them.
Consider the SFO involved in this sequence diagram. If we replace these
SFOs in the functional reference view presented above, we can see that some
SFO use SFD produced by other SFO. For example, the deliver phone call
SFO uses the enforced routing rule SFD data produced by the enforce
routing rule SFO. So, we can study the pertinence of each of these links of
use in the context of the scenario being studied. The functional reference
view, then, becomes not only a means of formalizing service scenarios with
a common nomenclature, but also an aid in completing a scenario by
identifying all the functions necessary to its execution, and by asking the
right questions. In our example, this questioning of the scenario by the
functional reference view leads us to identify both the functions envisioned
«SFC»
:phone call
«SFC»
:phone call
«scenario»
make phone call
«SFC»
:address
deliver phone call()
issue phone call()
browe address()
selected address()
issued phone call()
delivered phone call()

Modeling and Case Study
167
in a first approximation, and new elementary functions to be taken into
account:
– the caller authentication function (the phone call SFC invokes the
operation enforce access right SFO);
– the address book owner authentication function, which must be
consistent with that of the caller (the SFC address invokes the operation
enforce access right SFO);
– the initiate additional services function, such as, for example, replying
to a message or blocking the identity of the caller (the phone call SFC
invokes the enforce routing rule SFO operation);
– the routing toward a physical terminal function, corresponding to the
number dialed, possibly with simultaneous ringing (the phone call SFC
invokes the enforce registration SFO operation).
These new functions and their relationships with the previously identified
functions are shown in Figure 4.44. The functional reference view has thus
helped us to show, from the design phase of the service scenarios, non-trivial
functional issues such as the taking into account the additional services used
by the callee, or the consistency necessary between authentication and the
rights of the caller and those of the owner of the address book.
4.4.2.2. Example of a video service
Now we will look at another use case: watching a video on demand
(VOD). This use case is initiated by the video consumer.
A scenario describing this use case is as follows: Alice chooses a video in
the Orange catalog of VOD, and watches this video. In a first approximation,
this scenario can be described functionally by the sequence diagram shown
in Figure 4.46.
The scenario requires content to be played to Alice by a media player
(delivery and playing modeled by the operation deliver content SFO of the
content SFC). This playing of video content requires Alice to be able to
search and choose this content in a catalog (search and selection modeled by
the SFO browse content of the SFC content). As in the previous case, we can
render this scenario more pertinent by questioning it with the functional
reference view. We can then identify the missing elementary functions:

168
Architecture and Governance for Communication Services
Figure 4.44. Functional sequence of the telephone call scenario (complete)
Figure 4.45. Video service use case
– the delivery of the content to the media player (the SFC content invokes
the operation SFO issue content);
– the authentication of Alice and the determination of her rights to access
the content catalog (the SFC content invokes the operation SFO enforce
access right);
– the authentication of Alice and the determination of her rights to
download a video, which must be consistent with Alice’s rights in
the catalog (the SFC content invokes the operation SFO enforce access
right);
«SFC»
:phone call
«SFC»
:phone call
«SFC»
:address
«SFC»
:access right
«SFC»
:routing rule
«SFC»
:registration
«scenario»
make phone call
deliver phone call()
issue phone call()
enforce access right()
enforced access right()
browse address()
enforce access right()
enforced access right()
selected address()
issued phone call()
enforce routing rule()
enforced routing rule()
enforce registration()
enforced registration()
delivered phone call()
watcher
watch video

Modeling and Case Study
169
– the determination of the content delivery address; that is, the address of
the media player that will play the content; this address must be correlated
with the authentication of Alice (the SFC content invokes the operation SFO
define delivery device).
Figure 4.46. Functional sequence of the video consumption scenario (simplified)
These new functions and their relationships with the functions previously
identified are shown in Figure 4.47. Once again, the functional reference
view helps us to identify important functional issues, such as the delivery of
content (which will be carried out in a very different manner for live content
vs. non-live content), or the correlation between the authentication of Alice
and the address of her media player. This will lead to a dialog with the
marketing team, which will use this scenario to determine how to resolve
these functional issues. For example, the marketing team will be able to
decide that the correlation between the authentication of Alice and her media
player is done through the association on the service platform between
Alice’s identity and the address of a set-top box.

170
Architecture and Governance for Communication Services
Figure 4.47. Functional sequence of the video consumption scenario (complete)
4.4.2.3. Example of a messaging service
Finally, consider a third use case, the consultation of emails. This use
case is initiated by the mailbox owner.
Figure 4.48. Email messaging service use case
In one scenario for this use case, Alice accesses her mailbox and consults
her emails. This scenario can be simply represented functionally by the
sequence diagram shown in Figure 4.49.
«scenario»
watch vidéo
«SFC»
:content
«SFC»
:content
«SFC»
:access right
«SFC»
:content
«SFC»
:delivery device
deliver content()
issue content()
browse content()
enforce access right()
enforced access right()
selected content()
enforce access right()
enforced access right()
define delivery device()
defined delivery device()
issued content()
delivered content()
mailbox owner
consult emails

Modeling and Case Study
171
Figure 4.49. Functional sequence of the email consultation scenario (simplified)
This scenario requires Alice to be able to search, consult and select
messages (possibilities modeled by the SFC message, via the operation SFO
browse message). Starting from the functional view, we can, as before,
enrich this sequence diagram with:
– the function of creating and managing the mailbox (the SFC message
invokes the operation SFO define message folder);
– the function of managing access rights (the SFC message invokes the
operation SFO enforce access right);
– the function of storing and filing messages (the SFC message invokes
the operation SFO publish message);
– the function of routing messages using the destination address (the SFC
message invokes the operation SFO deliver message).
As in the previous case, questioning via the functional reference view
brings to light significant functional issues. These issues could certainly be
identified without using the functional reference view, thanks solely to the
professional expertise of the architects in charge of carrying out these
scenarios. However, the functional reference view provides an interesting
conceptual means to move from an “artisanal” service design approach
based on individual expertise to a more industrial service design approach,
«scenario»
consult mail
«SFC»
:message
browse message()
selected message()

172
Architecture and Governance for Communication Services
based on compliance with the internal business process rules of telecom
services.
Figure 4.50. Functional sequence of the email consultation scenario (complete)
4.4.2.4. Case of a combined service: VideoMe
In the case of a combined service, the functional view allows us to
consider in detail how the action capabilities of various services are able to
combine. In fact, the combination of services does not consist simply of
juxtaposing services, or of adding them together, but mixing them. We refer
to these as blended services [O’CO 08]. With the functional view of a
composed service, we have an end-to-end view of this blend. The units of
the composition are thus no longer services or enablers, each with its own
perimeter of responsibility, but functional operations, the action capabilities
furnished by these services or enablers. Consider a composed service
combining two of our previously seen services; for example, a service to
broadcast a video to a person with whom one is trying to make a phone call,
illustrated by the following scenario: Alice selects Bob in her address book;
she then chooses a video to send to him and clicks on his number to initiate a
call to him. Bob’s telephone rings and the video plays to him at the same
«scenario»
consult mail
«SFC»
:message
«SFC»
:message
«SFC»
:message folder
«SFC»
:message
«SFC»
:access right
browse message()
define message folder()
enforce access right()
defined message folder()
enforce access right()
enforced access right()
publish message()
message folder defining()
defined message folder()
deliver message()
delivered message()
published message()
selected message()

Modeling and Case Study
173
time. We will call this service VideoMe. This scenario can be represented in
a first approximation by the sequence diagram shown in Figure 4.51, which
combines the two sequence diagrams previously seen.
Figure 4.51. Functional sequence of the VideoMe scenario (simplified)
As mentioned previously, significant functional issues do not appear. We
can then complete this simplified view using detailed sequence diagrams of
the call and video scenarios previously seen in the preceding figures. Here,
we can see exactly what makes up the telephony and video services, which
shows us the sequences of operations carried out identically to the previous
services, as well as where the differences occur. For example, the sequence
of operations in making a call (following the operation SFO deliver phone
call) remains unchanged. The sequences of functional operations that are
commonly used in various composed services provide us interesting
information about potential enablers. It may actually be useful to define the
enabler that carries out this sequence.
«scenario»
videoMe
«SFC»
:content
«SFC»
:phone call
«SFC»
:content
«SFC»
:phone call
«SFC»
:address
deliver content()
deliver phone call()
issue phone call()
browse address()
selected address()
browse content()
selected content()
issued phone call()
delivered phone call()
delivered content()

174
Architecture and Governance for Communication Services
Figure 4.52. Functional sequence of the VideoMe scenario (complete)

Modeling and Case Study
175
Let us also emphasize on two new functional issues related to the
composition shown in Figure 4.52.
On one hand, we have the necessity of a correlation between Alice’s
authentication by the telephony service and her authentication by the video
content access service (via the SFO enforce access right).
On the other hand, we have the necessary link between Bob and the
address where the video content is distributed. In other words, how do we
determine the address of the media player that will play the content to Bob?
The designer of the service may, for example, choose to link this media
player address to Bob’s telephone number, for example by requesting a
client to download and play the video and get registered with the service
using Bob’s phone number. This is the solution represented in the preceding
sequence diagram with a link between the SFC delivery address and the SFC
reachable address. In order to determine the delivery address of the content
we need a reachable address. The service designer could also have chosen to
link Bob’s media player to his phone terminal. The terminal would have to
expose its video capabilities. This would be, for example, the function SFC
phone call, which would be linked to SFC delivery address. Just as for a
unitary service, the functional reference view is therefore used to solve
major functional issues of composed services.
The functional view of a composed service, therefore, gives us an end-to-
end view of the service rendered via the action capabilities implemented by
the service actors, but does not allow us to separate these functions into the
technical systems supporting unitary services, for example by indicating how
the telephony platform and the video platform must communicate. Before
addressing this question with the applicative view of a service, we must
determine the technical view of the services.
4.5. The technical view of a service
We have just looked at how to describe the functional view of a service.
A service can also be described using the technical roles that it implements.
Just as for the functional view, the use of the list of technical roles and
reference points defined in the technical reference view allows different
teams to describe the technologies of their services with the same
vocabulary, as well as to refine their technical vision of the service.

176
Architecture and Governance for Communication Services
4.5.1. Modeling
The description of this technical view poses no particular difficulties. It is
a matter of identifying the major technologies used in the service and
describing them with a common semantic.
For this, we must consider the technical solution containing the service.
In this context, we will look at the solution solely from a technical point of
view, independent of the service it supports. Take the sample of an
elementary telephony service supported by an OpenSER SIP proxy and by
X-Lite softphone SIP terminals. From the technical point of view, we will
consider the OpenSER proxy and the X-Lite softphone without considering
the service rendered. A completely different service from the functional
point of view, such as an instant messaging service, could be based on
exactly the same technical solution. Conversely, a functionally similar
service could be based on a completely different technical solution, such as
an IMS core or even a peer-to-peer network, as in the case of Skype.
A technical solution can be broken down into execution nodes, that is
into the group of materials and software under the umbrella of the same
project, and acting as a whole with respect to the exterior. An execution node
must therefore be understood not as a machine, but as a perimeter of
responsibility. In this vein, it is possible for an execution node to be broken
down into more finely grained nodes describing a responsibility more
precisely. For example, an Alcatel-Lucent Open Service Platform (OSP)
service platform and an Oracle WebLogic application server are nodes of
execution. Likewise, the execution support of an enabler is an execution
node, for example an XDM server (http://www.openmobilealliance.org/) or
an SIP proxy. In our example above, the OpenSER proxy and the X-Lite
softphone are execution nodes. A component of a service platform can also
be considered as an execution node if this element is sufficiently
autonomous and possesses a clear perimeter of responsibility. These
execution nodes offer interface with the exterior that can be characterized
technically by one or more reference points defined in the technical view
reference. The fact that an execution node exposes a reference point means
that it plays the technical role providing this reference point. A WebLogic
AS can therefore play the role of a Web service provider. If a reference point
connects two nodes of execution, it means that each of the nodes plays the
role of one of the technical roles participating in this reference point. For
example, the X-Lite softphone and OpenSER proxy are connected by a

Modeling and Case Study
177
client/proxy SIP reference point. Reference points are used to describe nodes
of execution with a semantic common to all services. The technical reference
view also allows the architect to question his/her technical view of a service,
by verifying that nodes of execution do play the roles of all technical roles
pertinent to the service.
We can formalize these concepts in the service description meta-model.
Figure 4.53. Meta-model of the technical view of a service
The method of description of the technical view consists of identifying
execution nodes and then describing the links between them, or the external
interfaces they expose via the reference points defined in the technical
reference view. New reference points can be added if necessary. The first
analysis is confined to execution nodes of the highest level. A detailed
deconstruction of the various execution nodes, for example going as far as
the level of the operating system of an item of equipment, will only be
carried out if it will help to clarify a significant architectural issue for the
project. The links between execution nodes will not necessarily be physical
links, but rather logical links responding to an architectural issue. For
example, the link between a navigator and a Web server can be directly
represented without the intermediary of routers, a proxy and firewalls. A
more detailed view can then be created, specifying the detailed realization of
each reference point in terms of the infrastructure used. Overall, the

178
Architecture and Governance for Communication Services
technical view can be considered as a high-level representation of a detailed
view of the infrastructure.
Let us return to the example of an address book service. Technically, this
service is carried out by an OMA address book enabler, called Network
Address Book (NAB). As the specifications of this enabler are still in
progress, we will adopt a simplified technical architecture, in which the
service involves:
– a user who plays the role of an individual in the sense of the HMI
technical pattern. It is connected to the NAB client by the GUI reference
point, implemented by the user interface of the NAB client.
– a NAB client, which is the terminal used to consult the address book. It
plays the role of an XDM client in the sense of the XDM technical pattern. It
is connected to the address book server by the XDM reference point of the
XDM technical pattern, with this reference point being implemented by the
XCAP protocol. This NAB client provides a GUI reference point from
the IHM pattern, which allows the user to manipulate it. Therefore, it also
plays the role of a machine, in the sense of the HMI pattern.
– a NAB server, which stores the contact lists of all users. It plays the role
of an XDM server in the sense of the XDM technical pattern discussed in
Chapter 3. It provides the XDM-AP reference point to be interrogated by an
XDM client.
Figure 4.54. Technical view of an address book service
These execution nodes and their reference points make up the technical
view of the address book service. The direction of the arrows shows the
direction of the emission of the requests; the user invokes the NAB client via
the GUI reference point.
NAB client
NAB server
user
GUI
XDMC-XDMS

Modeling and Case Study
179
4.5.2. Illustration
Let us return now to our three previous examples of the telephony, video,
and messaging services.
4.5.2.1. Example of a telephony service
The telephony service is, for example, used with an IMS technical
solution. The execution nodes play the technical roles of the IMS pattern:
– the phone terminal, which plays the role of UE;
– the call server, which plays the role of CSCF;
– the profile server, which plays the role of HSS;
– the telephony AS, which plays the role of AS.
These nodes are connected by reference points as defined in the technical
reference view. The service also needs a platform to manage user address
books, and for this it requires the NAB server defined in the technical view
of our address book service. The NAB client role is played here by the phone
terminal. There is thus only one execution node, the terminal, which
simultaneously plays the role of phone terminal and XDM client. This is
shown by the two reference points used by the terminal: Gm for its role of
phone terminal and XDM for its role of NAB client.
The links with technical roles of the technical reference view are shown
in Table 4.20.
Execution node
Technical role played
Source technical pattern
User
Person
HMI
Phone
Machine
HMI
UE
IMS
XDM client
XDM
Call server
CSCF
IMS
Telephony AS
AS
IMS
User profile server
HSS
IMS
NAB
XDM server
XDM
Table 4.20. Execution nodes of a telephony service

180
Architecture and Governance for Communication Services
Figure 4.55. Technical view of a telephony service
We can also show the links with the reference points of the technical
reference view.
Execution node
Exposed reference point
Source technical pattern
User
–
–
Terminal
GUI
HMI
Gm
IMS
Call server
Gm
IMS
ISC
IMS
Table 4.21. Reference points of a telephony service
terminal
call server
user profile
server
telephony AS
NAB
user
GUI
Mw
Cx
ISC
XDM
Gm

Modeling and Case Study
181
Telephony AS
ISC
IMS
User profile server
Cx
IMS
NAB
XDM
XDM
Table 4.21. (Continued) Reference points of a telephony service
4.5.2.2. Example of a video service
The video service is, for example, used with a triple-play technical
solution. The execution nodes are a video decoder called STB, a portal
called the content access portal, a video control platform called the IPTV
VOD controller and a VOD diffusion platform called VOD delivery.
Figure 4.56. Technical view of a video service
The links with the elements of the technical reference view are shown in
Table 4.22.
media renderer
Content Access
Portal
IPTV VOD
Controller
IPTV VOD
Delivery
user
GUI
MC
service access
MD
MA

182
Architecture and Governance for Communication Services
Execution node
Technical role played
Source technical pattern
User
Person
HMI
Media renderer
Machine
HMI
Web page
Web
Media renderer
IPTV
Content access portal
Service logic
Web
IPTV VOD controller
Media controller
IPTV
IPTV VOD delivery
Media delivery
IPTV
Table 4.22. Execution nodes of a video service
We can also show the links with the reference points of the technical
reference view.
Execution node
Exposed reference point
Source technical pattern
Media renderer
GUI
HMI
Content access portal
Service access
Web
IPTV VOD controller
MA
IPTV
MC
IPTV
IPTV VOD delivery
MD
IPTV
Table 4.23. Reference points of a video service
4.5.2.3. Example of a messaging service
The messaging service is, for example, used with a Webmail technical
solution. The execution nodes are a Web page, a Webmail service platform,
a back-end mail containing mailboxes, an SMTP server and an identity and
authentication management platform, which we will call Identity Provider
(IDP).

Modeling and Case Study
183
The links with the elements of the technical reference view are shown in
Table 4.24.
Execution node
Technical role played
Source technical pattern
User
Person
HMI
Webmail page
Machine
HMI
Web page
Web
Webmail service logic
Service logic
Web
MUA
email
IDP
Service logic
Web
SMTP server
MSA
email
MTA
email
MDA
email
Mail back-end
MS
email
Table 4.24. Execution nodes of an email messaging service
Figure 4.57. Technical view of an email messaging service

184
Architecture and Governance for Communication Services
We can also show the links with the reference points of the technical
reference view.
Execution node
Exposed reference points
Source technical pattern
Webmail page
GUI
HMI
Webmail service logic
Service access
Web
IDP
Service access
Web
SMTP server
MUA-MSA
email
MSA-MDA
email
Mail back-end
MUA-MS
email
MDA-MS
email
Table 4.25. Reference points of an email messaging service
4.5.2.4. Case of a composed service: VideoMe
Although for the functional view of a composed service, the service was
envisioned from end to end, we will deconstruct the service according to the
technical systems responsible for its execution. We will have a telephony
execution node and a video execution node, with each containing the
execution nodes of the unitary services seen previously. The separation
between these high-level execution nodes also occurs via reference points.
This deconstruction allows us to describe with precision the technical
systems implemented in a composed service, as a combination of execution
nodes of unitary services.
The construction of the technical view is naturally linked to technical
considerations, as well as to the functional view. For example, in the
functional view of our composed service, we have considered the link
between Bob and the address where the video content is distributed. The
response chosen in the functional view has an impact on the reference point
to be used between the two systems, and vice versa. We can see, then, how
much the study of the functional view and that of the technical view must be
done concomitantly, even though we are presenting them here successively
in order to clarify our remarks. The link between these two views will be the
object of the applicative view.

Modeling and Case Study
185
In our example, the VideoMe system will play the roles of the terminal
and media renderer. The combination between telephony and video services
is carried out at the end-point level and not at a server level. The technical
functioning is therefore as follows:
– the phone terminal is specific to the VideoMe service;
– the media renderer is specific to the VideoMe service;
– the telephony system is unchanged;
– the video consultation system is unchanged.
Figure 4.58. Technical view of the VideoMe service
4.6. The applicative view of a service
The applicative view of a service constitutes the link between the
functional and technical views of this service. In best practices of the
enterprise architecture of the information systems, this view contains the IT
videoMe system
telephony system
call server
user profile
server
telephony AS
video system
IPTV VOD
Controller
IPTV VOD
Delivery
NAB
Content Access
Portal
terminal
media renderer
user
IHM
GUI
service access
MD
MA
videoMe-1
XDM
Gm
MC
Mw
Cx
ISC

186
Architecture and Governance for Communication Services
applications used in implementing the functions of the functional view on
the execution nodes of the technical view. In our case of telecom service
systems, this view will simultaneously contain IT applications and
components that are more telecom-oriented, such as call servers.
The specificity of the applicative view in comparison to the technical
view is less intuitive in the telecom world than in the IT world. In computer
systems, the dissociation between application and execution node is
relatively clear. An AS designates unequivocally in computing an execution
node that supports applications, without presupposition as to what this
application does. An AS will support a meeting room reservation application
in the same way as it supports an automatic document translation application
or an online poker application. In the telecom world, the term AS designates
simultaneously both an execution node and the application carried by this
execution node. Thus, we speak of a telephony server application or of a
presence server application above an IMS core. This is probably a
consequence of the strong link between protocols and services in the telecom
world, as we discussed in section 3.3. A protocol such as http is used to
transport all types of data, and is even used for the transport of telephony call
setup signaling or real-time data – when applications such as Skype
encapsulate real-time audio flows on http in order to bypass firewall
protections. A protocol such as SIP is designed to convey multimedia
session setup signaling, and is mainly used for transporting telephony call
setup signaling data. This is the consequence of two different cultures. In the
computing world, the provision of network connectivity and the provision of
applications are historically separated and achieved by different actors. In
the telecom world, the provision of network connectivity and the provision
of telecom services (highest among them being those of telephony) are
historically blended and achieved by the same actors, with this grouping
undoubtedly originally due to the real-time constraints and universal
character of telephony – a telephony service must allow anyone connected to
the network to be reached. This difference between computing and telecom
culture
is
becoming
increasingly
less
pertinent,
however,
with
the
converging of IT applications and telecom applications, as illustrated by
MSN Messenger, Skype and Google Grand Central. Nevertheless, this
motivates our desire to promote a strong disassociation between the
functional view, the technical view and the applicative view, including those
for telecom services. The distinction between the applicative and technical
views for telecom services will thus be a question of perspective rather than
difference in nature. A telephony server application will be seen in the

Modeling and Case Study
187
technical view solely through the protocol interfaces that it exposes and uses,
described by reference points, and through its behavior with regard to these
interfaces described by technical roles. In this technical view, a telephony or
presence server application will be described similarly if their protocol
interfaces are identical. However, in the applicative view, these same server
applications will be seen as applications executing different functions,
though they are carried by similar execution nodes.
4.6.1. Modeling
The applicative view of a service describes the implementation of the
functional view of this service on the technical view. This view is made up
of applicative components exposing applicative operations, linked to each
other by connectors and managing applicative data. We will call these
applicative components Service Applicative Component (SAC).
Applicative components can be, for example, a call server or a presence
server. An applicative component is described by the SFO functional
operation(s) that it implements, and by the execution node(s) used for this
purpose. As previously stated, deconstruction into applicative components
allows us to separate between the various modules of a project (for software
development) or between the different spheres of responsibility (for a
deployment of telecom platforms), for example between network and service
platforms, or between different enablers. The objective is not to describe in
detail the internal functioning of software or platforms, this will be the
responsibility of the team in charge of software development or of the team
in charge of platform integration. This detailed description can also be seen
as a refinement, or a “zoomed” view of each applicative component. The
structuring into applicative components is thus a way of separating the main
service modules by specifying the responsibilities of each of them, before
entering further into a detailed design. Applicative data are the main data
manipulated by the applicative component. Each applicative component is
therefore responsible for applicative data. An applicative component can
contain applicative components of a lowest level, which can be used to detail
an architecture by “zooming” in on each applicative component.
The description of software architecture in applicative components,
applicative data, applicative operations and connectors is classic in software
engineering and in the enterprise architecture of computer systems. Software

188
Architecture and Governance for Communication Services
architecture is defined by the Software Engineering Institute at Carnegie
Mellon University (http://www.sei.cmu.edu/), as follows:
“The software architecture of a program or computing
system is the structure or structures of the system, which
comprise software elements, the externally visible properties of
those elements, and the relationships among them”.
In this definition, we see the ideas of components (software elements) and
of connectors carrying the interactions between components (included in the
relationships among them). We can represent them using stereotypical UML
classes as:
– UML components stereotyped Service Applicative Components (SACs)
for applicative components;
– UML operations called Service Applicative Operations (SAOs), which
are operations carried by SAC applicative components;
– SAC component ports, expressing the technical roles executed by these
SAC components, that is the technical roles for which the role is played by
the execution node from which the component results;
– classes of association for connectors (from the suggestion by [IVE 04]),
which link the applicative component ports to each other via a reference
point, and carry one or more SAO applicative operations. The direction of
the association is that in which operations are invoked. Each class of
association is called by the name of the reference point it implements.
How do we identify the applicative components of a service? Three
different approaches are viable: leaving the perimeter of the applicative
components to the assessment of the individuals manipulating the applicative
view, defining them using the functional view and defining them by using
the technical view.
The first approach, of the bottom-up type, is to leave it to the architect of
a service project to identify the applicative components of his/her service, in
connection with the team in charge of development (as part of a computing
development-based project), or of integration (as part of a telecom
integration-based project). This approach has the benefit of a very good
understanding of the architecture by the team (development or integration) in
charge of implementing it. The applicative components would then be

Modeling and Case Study
189
interesting components from a development or integration perspective. This
approach does, however, have at least two disadvantages. First, the
applicative architectures of different projects are not very comparable, as
they are developed by different teams according to different criteria; this
diversity can even occur within a single service, when different teams are
involved or composed services are in play. Second, there is a risk that the
components will be of excessively fine granularity in order to reflect detailed
design specifications. This approach cannot therefore be used to guarantee
proper separation between the logic of the architecture and that of
development or integration.
The second approach, guided by the functional view, is to identify an
applicative component by its SEF elementary function or SFC functional
component. This would be, for example, an applicative component SAC Call
issuing or a component Call that would be supported, in the case of IMS, by
the execution nodes UE, CSCF, HSS and AS. The applicative component
SAC Call issuing would thus represent all of the interactions between UE,
CSCF, HSS and AS. This approach clearly shows the link between the
functional view and the technical view, through the link between an
applicative component (here resulting directly from a functional component)
and an execution node. An applicative component will be strongly cohesive,
as it includes all the elements necessary for the execution of the functional
component to which it corresponds. It will be weakly coupled, as these
external
interfaces
will
correspond
to
interactions
between
different
functional components. Conversely, this approach reproduces in fine in the
applicative view the logic of the functional view. Moreover, the SEF
elementary functions or SFC functional components of the functional view
are by nature end-to-end functions, which will mobilize a chain of execution
nodes in order to be executed. Thus, in our IMS example, the SFC call
issuing is implemented by a sequence of applications, which are supported
by the execution nodes UE, CSCF, HSS and AS. This approach would lead
to a too high level of granularity in the applicative view; a single applicative
component bringing together UE, CSCF, HSS and AS would be of too high
a level to be presented in a comprehensible manner by the applicative
architecture development or by integration teams implementing it. In
addition, another applicative component based on the same execution nodes,
for example for the publication of presence information, would result from
another functional component and would thus give rise to another
applicative component, without a link to the first applicative component in
the applicative view. Unlike the first approach, this leads to an applicative

190
Architecture and Governance for Communication Services
view that is not efficient enough for service development or integration
teams, and which would undoubtedly be perceived as too theoretical and not
pertinent with regard to their concerns.
The third approach, which we believe is an interesting compromise, as we
will show in the following section, defines:
– an SAC applicative component for each execution node of the
service;
– a connector between SACs for each reference point between execution
nodes;
– an SAO applicative operation for each SFO functional operation in the
rendering, of which, this SAC applicative component participates, with this
applicative operation being carried by a connector;
– a functional data item SAD for each SFD functional data item produced
by an SFO functional operation in the rendering of which this SAC
applicative component participates.
In our IMS example, this gives an applicative component UE, a CSCF
component, an HSS component and an AS component, with each of these
components exposing an operation resulting from the SFO issue phone call.
These operations are, respectively, used on connectors resulting from the
reference points Gm, Cx and ISC of the technical view of the service. These
applicative operations do not carry out the totality of the SFO, but participate
in the execution of this SFO, with each operation representing a stage in the
end-to-end execution of the SFO. Each operation, then, has an added value
of its own. This added value will be verified in connection with the
development team so as not to confuse the data flow path and functional
capitals gains (an applicative component only provides an applicative
operation if it is actually involved in rendering the functional operation from
which this applicative operation orginates, and not only if it is present on the
data flow path). This approach has the benefit of an alignment by
construction between the applicative view and the technical view, which
allows this applicative view to be homogenized. It also allows us to take into
account the end-to-end execution of a functional component by a sequence
of execution nodes. The method proposed to identify the applicative
components is therefore:
– identification of the execution nodes involved in the execution of each
functional operation invoked in the functional sequences describing the

Modeling and Case Study
191
service in the service functional view. We obtain n execution nodes, with
each involved in oi functional operations. These n execution nodes are
connected by m reference points;
- the creation of n applicative components, one per execution node,
- the creation of m connectors between applicative components, one per
reference point between the execution nodes from which the applicative
components are generated, with the possible orientation of this connector
resulting from that of the reference point. A connector gives rise to a port in
each applicative component that links this connector, representing the
technical role played by the execution node from which the component
results,
- for each applicative component, the creation of oi applicative
operations corresponding to the functional operations in the execution of
which the execution node generating the applicative component is involved.
An applicative operation can refer to several functional operations when
these functional operations are strongly linked,
- verifying with the teams in charge of development or integration the
added value of each applicative operation created, and describing these
operations. This can lead to merging or separation of applicative operations,
- linking each applicative operation to the connector on which it is
used,
- for each applicative component, the creation of oi applicative data
items, one per item of functional data making up the return parameter of the
functional
operations
from
which
the
applicative
operations
of
the
applicative component result,
- verifying with the teams in charge of development or integration the
added value of each item of applicative data created and justify these
textually.
Thus, applicative operations modify the participation of the applicative
component in the execution of a functional operation, with each applicative
operation playing a specific role in this execution. This method provides a
simple means of applying the principle of weak coupling and that of strong
coherence. The applicative components that participate in the execution of
the same functional operation form a group of strongly coherent components
(functional cohesion). In a telephony system, all of the elements involved in

192
Architecture and Governance for Communication Services
the execution of the SFO issue phone call form a strongly cohesive group,
such as UE, CSCF, HSS and AS in telephony. The communication links
between technical roles to implement the SFO (e.g. the SIP messages
circulating among these elements in order to execute a call setup) can be
shown in a sequence diagram, possibly indicating the connectors carrying
these operations. The precise data flows (e.g. the SIP messages used) will be
detailed by the teams in charge of this applicative component. These
concepts are recalled in the meta-model below. The link between connectors
and
reference
points
repeats
the
proposition
of
F.
Menai
[MEN 05].
Figure 4.59. Meta-model of the applicative view of a service
Let us return to our example of an address book service. The four
operational functions of the system are: SFO Enforce access right, SFO

Modeling and Case Study
193
Define contact list, SFO Publish reachable address and SFO Browse
reachable address. The execution nodes are the user, the NAB client and the
NAB server, which are each a priori involved in the four functional
operations.
From this, we deduce three applicative components: SAC user, SAC NAB
client and SAC NAB server. The connectors between these SAC components
are as follows:
– a connector between SAC user and SAC NAB client, which implements
the GUI reference point;
– a connector between SAC NAB client and SAC NAB server, which
implements the XDM reference point.
SAC user does not expose any applicative operation. Each of the two
other
applicative
components
provides
four
applicative
operations,
corresponding to the four functional operations whose added value can be
justified. With regard to the applicative component SAC NAB client:
– the applicative operation SAO Launch terminal is used to initialize the
terminal and to authenticate the user. It corresponds to the functional
operation SFO Enforce access right. It is carried by the GUI reference point
of the NAB client;
– the applicative operation SAO Create list allows the user to request for
the creation of a contact list. It corresponds to the functional operation SFO
Define address list. It is carried by the GUI reference point of the NAB
client;
– the applicative operation SAO Create contact allows the user to enter a
new contact via a form. It corresponds to the functional operation SFO
Publish address. It is carried by the GUI reference point of the NAB client;
– the applicative operation SAO Select contact is used to select a contact
from a list. It corresponds to the functional operation SFO Browse address.
It is carried by the GUI reference point of the NAB client.
With regard to the applicative component SAC NAB server:
– the applicative operation SAO Authenticate is used to initialize the
terminal and to authenticate the user. It corresponds to the functional
operation SFO Enforce access right. It is carried by the XDM reference
point of the NAB server.

194
Architecture and Governance for Communication Services
– the applicative operation SAO Set list is used to create a list of contacts
(either by the user via his/her NAB client or directly by another software
component,
for
example
in
the
fulfillment
information
system).
It
corresponds to the functional operation SFO Define address list. It is carried
by the XDM reference point of the NAB server.
– the applicative operation SAO Set contact is used to create a contact. It
corresponds to the functional operation SFO Publish address. It is carried by
the XDM reference point of the NAB server.
– the applicative operation SAO Browse NAB is used to navigate in
the
address
book.
It
corresponds
to
the
functional
operation
SFO
Browse address. It is carried by the XDM reference point of the NAB
server.
Figure 4.60. Applicative view of an address book service
We have now described the applicative view of our address book service,
correlating its functional view with its technical view. The applicative
operations offered by each applicative component do show added value. This
applicative view is clear, simple and unequivocal for a development team,
which can easily adapt it.
4.6.2. Illustration
We will now go into more detail concerning the applicative views of our
three service examples.
«SAC»
User
person
«SAC»
NAB client
machine
XDMC
«SAC»
NAB server
XDMS
GUI
+
SAO Create contact() : void
+
SAO Create list() : void
+
SAO Launch terminal() : void
+
SAO Select contact() : void
XDM
+
SAO Authenticate() : void
+
SAO Browse NAB () : void
+
SAO Set contact () : void
+
SAO Set list () : void

Modeling and Case Study
195
4.6.2.1. Example of a telephony service
In the case of the telephony service, the applicative components are thus
the user, the terminal, the call server, the telephony AS, the profile server
and the NAB, as discussed previously. These components provide the
applicative operations described in Table 4.26, resulting from the functional
operations indicated.
Applicative
component
Applicative operation provided
Source functional operation
User
Alert user
Deliver phone call
Terminal
Launch terminal
Enforce access right
Select contact
Browse address
Launch call
Issue phone call
Deliver call
Deliver phone call
Call server
Register
Enforce access right
Route originating call
Issue phone call
Route terminating call
Enforce registration
Deliver phone call
User profile server
Assignment request
Enforce access right
Get profile
Enforce registration
Enforce routing rule
Telephony AS
Trigger Supplementary services
Enforce routing rule
NAB
Browse NAB
Browse address
Table 4.26. Applicative functional link for a telephony service
The exposure of an operation by the applicative component representing
the user may seem abusive. Nevertheless, if we consider the user as an
execution node, source and destination of flow, then these flows can execute
a functional operation in the applicative view. Here, the delivery of a phone
call involves the notification of the user, typically manifested by a telephone

196
Architecture and Governance for Communication Services
ring. This notification can thus be represented by an applicative operation
exposed
by
the
component
SAC
user,
as
for
another
applicative
component.
The applicative execution of each functional operation can therefore be
described by a sequence diagram, for example for the SFO issue phone
call.
Figure 4.61. Example of the applicative implementation of SFO issue phone call
Here, the applicative operation SAO launch call of the applicative
component SAC terminal is used to initiate a call from the terminal. It is
usually carried by an HMI from the terminal. The applicative operation SAO
route originating call of the applicative component SAC call server is used
to request the call server to route a call.
Each applicative operation is supported by a reference point from the
technical view of the service. In the case of our telephony service, these links
are shown in Table 4.27.
The static applicative architecture is represented in Figure 4.62.

Modeling and Case Study
197
Once the execution of each functional operation has been described by a
sequence of applicative operations (possibly reduced to a single applicative
operation), we can deduce from this the execution of entire scenarios. To do
this, we place all of the applicative components in the applicative sequence
identified previously. Each message between functional components in the
functional sequence is then translated into one or more messages between
applicative components. This sequence of applicative components follows a
temporal order this time. The direction of messages is therefore not the same
as in the functional view.
Applicative
component
Applicative operation
Carried by the connector
stemming from reference
point
User
Alert user
GUI
Terminal
Launch terminal
GUI
Select contact
Launch call
Deliver call
Gm
Call server
Register
Gm
Route originating call
Route terminating call
Mw
User profile server
Assignment request
Cx
Get profile
Telephony AS
Trigger supplementary services
ISC
NAB
Browse NAB
XDM
Table 4.27. Applicative technical link for a telephony service
4.6.2.2. Example of a video service
In the case of the video service, the applicative components are the user,
the media renderer, the call server, the telephony AS, the profile server and
the NAB. These components provide the applicative operations described in
Table 4.28, resulting from the functional operations indicated.
The applicative execution of each functional operation can then be
described by a sequence diagram, for example, for SFO browse content.

198
Architecture and Governance for Communication Services
Figure 4.62. Applicative view of a telephony service
Applicative
component
Applicative operation provided
Source functional operation
User
Media renderer
Select content in catalog
Browse content
Play content
Deliver content
Content access portal
Authenticate user
Enforce access right
Get catalog
Browse content
IPTV VOD controller
Order content
Define delivery device
Check rights
Enforce access right
IPTV VOD delivery
Start streaming
Issue content
Table 4.28. Applicative functional link for a video service
«SAC»
User
man
«SAC»
Terminal
machine
UE
XDMC
«SAC»
Call Serv er
CSCF
CSCF
CSCF
CSCF
«SAC»
User Profile Serv er
HSS
«SAC»
Telephony AS
AS
«SAC»
NAB
XDMS
GUI
+
launch call() : void
+
launch terminal() : void
+
select contact() : void
Gm
+
deliver call() : void
Gm
+
register() : void
+
route originating call() : void
Mw
+
route terminating call() : void
ISC
+
trigger supplementary services() : void
XDM
+
browse NAB() : void
Cx
+
assignment request() : void
+
get profile() : void
GUI
+
alert user() : void

Modeling and Case Study
199
Figure 4.63. Applicative sequence of the telephone call scenario
Here, the applicative operation SAO select content in catalog of the
applicative component SAC media renderer is used to consult the catalog. It
is usually carried by an HMI of the media renderer. The applicative
operation SAO get catalog of the applicative component SAC content access
portal is used to recover the catalog to be consulted.
In the case of our video service, the applicative technical links are listed
in Table 4.29.
«scenario»
make phone call
«SAC»
terminal
«SAC»
call server
«SAC»
NAB
«SAC»
telephony AS
«SAC»
user profile server
User
launch terminal()
register()
select contact()
browse NAB()
launch call()
route originating call()
assignment request()
get profile()
trigger supplementary services()
route terminating call()
deliver call()

200
Architecture and Governance for Communication Services
Figure 4.64. Example of the applicative implementation of the SFO browse content
Applicative
component
Applicative operation
Carried by the connector
stemming from reference
point
User
Media renderer
Choose content
GUI
Play content
Content access portal
Authenticate user
Service access
Get content page
IPTV VOD
controller
Order content
MA
Check rights
MC
IPTV VOD delivery
Start streaming
MD
Table 4.29. Applicative technical link for a video service
The
static
applicative
architecture
can
thus
be
represented
in
Figure 4.65.
«SAC»
:media renderer
«SAC»
:Content Access
Portal
«SAC»
User
«SFO»
:browse content
select content in catalog()
get catalog()

Modeling and Case Study
201
Figure 4.65. Applicative view of a video service
Once the execution of each functional operation has been described by a
sequence of applicative operations (possibly reduced to a single applicative
operation), we can deduce from this the execution of entire scenarios.
4.6.2.3. Example of a messaging service
In the case of the messaging service, the applicative components are the
user, the Webmail page, the Webmail service logic, the IDP identity and
authentication management platform, the SMTP server and the messaging
back-end (message store). These components provide the applicative
operations described in the Table 4.30, stemming from the functional
operations indicated.

202
Architecture and Governance for Communication Services
Figure 4.66. Applicative sequence of the video consumption scenario
Applicative
component
Applicative operation provided
Source functional operation
User
Webmail page
Display mailbox
Browse message
Create folder
Define message folder
Webmail service
logic
Manage emails
Browse message
Manage folders
Define message folder
IDP
Authenticate
Enforce access right
SMTP server
Receive email
Deliver message
Mail back-end
Store email
Publish message
Get email
Browse message
Set folder
Define message folder
Table 4.30. Applicative functional link for an email messaging service
«scenario»
watch vidéo
«SAC»
media renderer
«SAC»
content access
portal
«SAC»
IPTV VOD
controller
«SAC»
IPTV VOD
delivery
User
select content
in catalog()
authenticate user()
get catalog()
play content()
order content()
start streaming()
check rights()

Modeling and Case Study
203
The applicative execution of each functional operation can then be
described by a sequence diagram, for example, for SFO browse message.
Figure 4.67. Example of the applicative implementation of the SFO browse message
Here, the applicative operation SAO display mailbox of the applicative
component SAC Webmail page is used to request consultation of the
mailbox. It is initiated by the user from the Webmail page, which plays an
HMI role with respect to the user. The applicative operation SAO manage
emails of the applicative component SAC Webmail service logic allows the
page to recover the data to be displayed. The interface SAO get email of the
applicative component SAC mail back-end is used to obtain raw data,
typically via IMAP messages. The applicative technical links are shown in
Table 4.31.
Applicative
component
Applicative operation
Carried by the connector
stemming from reference point
User
Webmail page
Display mailbox
GUI
Create folder
Table 4.31. Applicative technical link for a messaging service

204
Architecture and Governance for Communication Services
Webmail service
logic
Manage emails
Service access
Manage folders
IDP
Authenticate
Service access
SMTP server
Receive email
MTA-MDA (SMTP)
Mail back-end
Store email
MDA-MS (SMTP)
Get email
MUA-MS (IMAP)
Set folder
Table 4.31. (Continued) Applicative technical link for a messaging service
The
static
applicative
architecture
can
then
be
represented
in
Figure 4.68.
Figure 4.68. Applicative view of a messaging service

Modeling and Case Study
205
Once the execution of each functional operation has been described by a
sequence of applicative operations (possibly reduced to a single applicative
operation), we can deduce from this the execution of entire scenarios.
Figure 4.69. Applicative sequence of the email consultation scenario
4.6.2.4. The case of a composed service
The principle is similar in the case of a composed service. In the case of
the VideoMe service, the applicative components are the terminal, the call

206
Architecture and Governance for Communication Services
server, the telephony AS, the profile server and the NAB. These components
provide the applicative operations described in Table 4.32, generated by the
functional operations indicated.
Applicative
component
Applicative operation provided
Source functional operation
User
Launch VideoMe terminal
Enforce access right
Issue phone call
VideoMe system
Launch VideoMe call
Browse address
Browse content
Deliver VideoMe call
Deliver phone call
Deliver content
Define delivery device
Telephony system
Register
Enforce access right
Route originating call
Issue phone call
Route terminating call
Enforce registration
Deliver phone call
Assignment request
Enforce access right
Get profile
Enforce registration
Enforce routing rule
Trigger supplementary services
Enforce routing rule
Browse NAB
Browse address
Video system
Authenticate user
Enforce access right
Get catalog
Browse content
Order content
Define delivery device
Check rights
Enforce access right
Start streaming
Issue content
Table 4.32. Applicative functional link for the VideoMe service

Modeling and Case Study
207
The applicative technical links are listed in Table 4.33.
Applicative
component
Applicative
operation
Carried by the connector
stemming from reference point
User
VideoMe system
Select callee
GUI
Launch call
Select content in catalog
Deliver call
Gm
Play content
VideoMe-1
Telephony system
Register
Gm
Route originating call
Route terminating call
Mw
Assignment request
Cx
Get profile
Trigger supplementary
services
ISC
Browse NAB
XDM
Video system
Authenticate user
Service access
Get catalog
Order content
MA
Check rights
MC
Start streaming
MD
Table 4.33. Applicative technical link for the VideoMe service
The static applicative architecture can be shown in a general manner in
Figure 4.70, clearly separating the responsibilities and interfaces of each
component. This figure clearly shows the different systems making up the
composed service and the links between them that are both functional and
technical.

208
Architecture and Governance for Communication Services
Figure 4.70. Applicative view of the VideoMe service
4.7. Summary
In this chapter, we have modeled, in detail, the reference views defined in
Chapter 3, and proposed an approach for describing communication services,
based on the functional and technical reference views.

Modeling and Case Study
209
The functional view of a service describes the execution of a service
scenario by its stakeholders, via a sequence of functional operations. This
sequence is seamless; in the execution of the service, it takes into account
neither technical boundaries (such as the terminal, platform, or network
used) nor boundaries of responsibility (such as unitary services in the case of
a composed service). This functional view thus corresponds to an end-to-end
vision of the service.
The technical view of a service describes the technical environment of the
service, through a group of execution nodes connected by reference points.
An execution node should not be seen solely as a technical infrastructure, but
as a perimeter of responsibility on material and software components. A
breakdown of responsibility such as the front-office/back-office pattern will
thus appear in the technical view of the service. The technical view is
therefore not seamless, but allows us, conversely, to formally identify
heterogeneities, and particularly the different systems (unitary services)
forming a composed service.
The applicative view of a service describes the implementation of the
sequence of the service (functional view) in a given technical environment
(technical view). It is a matter of identifying the applicative operations,
resulting from functional operations, provided by each of the execution
nodes via a given reference point. This view is used to simultaneously
visualize the decomposition of the service into components with assigned
responsibilities on their perimeter, and the way in which these components
support the actions of the service’s stakeholders.
In Chapter 5, we will look at various applications of these results to
facilitate service convergence.

Chapter 5
Organizational and Software Applications
In this chapter, we consider some of the applications that have been
carried out using the service architecture description approach described in
the previous chapters.
5.1. An aid for the construction of service offers
First, the functional reference view is an aid for the design, evaluation
and management of telecom services and enablers.
5.1.1. Service design
Telecom service design is usually managed by a marketing department.
Following an initial set of requirements, several exchanges take place
between the marketing department and the technical teams responsible for
service development in order to transform this marketing need into a
technical solution. This mechanism remains traditional and poorly equipped
[KEL 06], with marketing teams often being reluctant to use strict methods
and formal artifacts. The work done on a given project will not necessarily
be reused for similar needs, unless the project teams are made up of the same
people. The functional reference view presented in Chapter 3 is an aid for
this transformation task. SEF functions offer support for organizing the
marketing need. Most needs, both functional and non-functional, can be
attached to an SEF. For example, for a messaging service, the storage

212
Architecture and Governance for Communication Services
capacity of the inbox can be attached to the function “SEF message folder
defining capability”. The proximity of SEFs to the business view means that
they are intelligible to the marketing team, and their formal and structured
makeup means that they are useful as the basis of an applicative architecture
design, as we saw with the service applicative view in Chapter 4.
These SEFs make it possible to formalize a marketing need within a
standardized vocabulary. This then facilitates the examination of this need
and the move toward a technical solution. Furthermore, dependencies
between SEFs can help marketing teams to extend their questioning to
connected functional needs. An elementary function can refer to another
service, for instance the contact selection function requires the use of the
address book service.
Following this definition of the functional outline of an offer, a marketing
team can split the service into a sequence of tasks to be carried out by the
user. This is a classic process in the field of human–machine relationship
ergonomics, known as the Hierarchical Task Analysis (HTA) method
[ANN 04]. Each task can then be transposed into an SEF, and the sequence
of tasks can be translated into a sequence of SFO operations. This provides a
formalized framework to the team responsible for the development or
integration. As shown in the previous chapter, each SFO can be linked to an
execution node within an application component. Thus, SFO sequences
provide end-to-end service test cases.
5.1.2. Evaluation and comparison of services
Once a service is formalized according to the functional, technical and
applicative views, it becomes much easier to share these architectures within
an organization such as a telecom operator. Internal Websites, for instance,
can be put in place to give interested parties access to the architecture from
different service projects. Technical architectures can, for example, be
shared in order to study good practices and define new technical patterns.
The same applies to applicative architectures; a development team can
consult the technical solutions that have been implemented to meet a
functional need, and reuse the same solutions for a similar need. The
characteristics of the functional need being researched can be identified in
precise detail, for example by only searching for technical solutions that
implement a given sequence of functional operations. This formalization can

Organizational and Software Applications
213
also help support validation committees by verifying that the solutions
recommended by the organization for responding to a certain type of need
have been effectively used. A committee could, therefore, require the
implementation of a functional operation such as SFO deliver phone call to
use the IMS technical pattern (and thus the SIP protocol) and the use of an
IMS technical solution provided by a given equipment manufacturer. The
architecture evaluation and validation procedures defined in the enterprise
architecture of information systems can therefore be applied to telecom
services due to the invariants defined in the functional and technical
reference views.
Furthermore, this description, following classic enterprise architecture
views, enables the application of automatic consistency verifications, which
can help support these validation committees. We can thus envisage
measuring the alignment between the functional view of a service and the
functional reference view, or the applicative view. Such alignment metrics
have been notably developed by Jacques Simonin in [SIM 07].
Finally, taking these metrics makes it possible to numerically qualify
particular aspects of a telecom service. We will now suggest some of these,
which should be considered more as works in progress than as definitive
results. First, we must decide what aspects to qualify. We will use four
aspects here:
– the complexity of a service use;
– the complexity of its development;
– the innovation of a service;
– the complexity of its integration.
The complexity of use can be characterized by the number of functional
SFC components present in the sequence. With the convention of an SFC by
service entity, the number of SFCs denotes the number of service concepts
that must be manipulated by the stakeholders from the service in order to
achieve it. The complexity of a service can also be measured on the basis of
the complexity of the functional sequences that describe it. It can be
characterized by the number of invocations of the functional operations of
the sequence. This denotes the number of manipulations of the service
concepts that the stakeholders in the service must carry out in order to

214
Architecture and Governance for Communication Services
achieve the sequence. The metric of complexity of use must comply with the
following properties:
– with a constant number of SFCs in the sequence: the service is more
complex when the number of SFO operations increases;
– with a constant number of SFOs in the sequence: the service is more
complex when the number of SFC components increases;
– in an initial estimation, we could consider the addition of a component
or operation to increase the complexity of use in the same way.
A satisfactory metric of the complexity of use could therefore be the
average between the number of SFCs and the number of SFOs. The values
corresponding to our examples from Chapter 4 are shown in Table 5.1.
VideoMe service logically appears as the most complex service to use.
Service
Number of SFCs
Number of SFOs
Average
Telephone
5
7
6
Video
3
5
4
Messaging
3
7
5
VideoMe
7
12
9.5
Table 5.1. Metric of complexity of use
The complexity of development of a service can be approached from the
complexity of processing the components that go into achieving it. The most
complex applicative components are often those that require the maintenance
of a session that correlates the results from different requests. This aspect
can be approached via the number of outgoing invocations of a component,
that is the number of operations this component will invoke, including
towards itself. For certain components, this value will be zero. These are the
end chain components, which effectuate a process that does not require other
operations. These components are usually simpler to develop. The metric of
complexity of development should increase with the increase in the number
of outgoing invocations of a component in the sequence. A satisfactory
metric of complexity could therefore be the sum of the outgoing invocations
of each component in the sequence. The values corresponding to our
examples from Chapter 4 are shown in Table 5.2. The VideoMe service is
the most complex service to develop, mainly because it requires the
development of the services that compose it.

Organizational and Software Applications
215
Service
Total number of outgoing invocations
Telephony
5 + 0 + 0 + 1 + 0 = 6
Video
5 + 0 + 0 = 5
Messaging
5 + 0 + 1 = 6
VideoMe
5 + 6 + 0 + 0 + 0 + 0 + 0 = 11
Table 5.2. Metric of complexity of development
The innovation of a service can be measured in relation to the reference
functional view. If a service exactly reproduces the components and
operations of the reference functional view, it does not show innovation.
Innovation can come either from a new functional component or from the
addition of an outgoing invocation to a functional component. The values
corresponding to our examples from Chapter 4 are shown in Table 5.3. The
telephone, messaging and video services logically do not show innovation,
whereas the VideoMe service shows more innovation.
Service
Number of new
SFCs
Number of new
outgoing invocations
Average
Telephone
0
0
0
Video
0
0
0
Messaging
0
0
0
VideoMe
0
2
1
Table 5.3. Metric of innovation
The complexity of integration can be measured on the basis of the
number of components involved in one functional operation. Indeed,
applicative components implementing the same functional operation share
inherently strong links (tight coupling). Therefore, their integration is an
important issue, which must be validated by extensive integration testing.
The values corresponding to our examples from Chapter 4 are shown in
Table 5.4. In this metric, only cases where the number of SAC components
involved in one SFO operation is greater than or equal to two should be
considered (because only one SAC for an SFO does not indicate an
integration issue). Therefore, we should subtract one from the number of
SACs per SFO.

216
Architecture and Governance for Communication Services
Service
Sum of the number of SACs per
SFO
Sum of the number of SACs per
SFO minus 1
Telephone
2+3+3+2+2+2=14
1+2+2+1+1+1=8
Video
1+2+1+2+1=7
0+1+0+1+0=2
Messaging
1+1+1+3+3=9
0+0+0+2+2=4
VideoMe
1+2+2+1+1+2+2+2+3+1=17
0+1+1+0+0+1+1+1+2+0=7
Table 5.4. Metric of complexity of integration
Interestingly, the telephone service seems to be the most complex service
to integrate. This is consistent with field experience in telecom service
architecture. The components of a telephone service are not excessively
complex to develop, but their implementation requires significant integration
work and end-to-end testing.
5.1.3. Service management
As stated in section 1.3.3, we have not addressed service management
processes such as fulfillment and billing, but have dealt with service usage.
Nevertheless, management processes may have to take into account the
dependencies between services, especially in the case of composed services.
For example, in the case of a composed service such as VideoMe, telephone
resources as well as video selection and viewing resources must be
provided. Our work on the usage of services could help formalize these
dependencies.
In service management systems such as those defined in the TMF, an
important part, localized at the Service Management and Operations level in
the eTOM process framework, consists of moving from the definition of an
offer as subscribed by the client toward the identification of the resources to
provide in order to deliver this offer. This activity is called Service
Configuration and Activation. Generally, it requires a complete description of
resources to configure and activate for each offer. There are two coexisting
approaches in the state of the art. First, there is a centralized configuration
through workflow engines such as IBM WebSphere Business Integration
Collaborations for Telecommunications. This type of product makes it
possible to define a sequence of resources to provide when an offer is
subscribed to, with the help of business objects abstracting the offers as well
as the resources. A business object abstracting an offer points to business
objects abstracting the resources to configure in order to fulfill this offer.

Organizational and Software Applications
217
Second, there are decentralized solutions, as proposed in [GRI 08] and
[SCH 08], where service platforms themselves take responsibility for a large
part of these operations by establishing an “operation manager” module for
each offer, which can provide necessary resources for that offer. In both
cases, the list of resources to be provided for each offer is a prerequisite.
These lists are often directly generated with the syntax and semantics of the
software
used,
for
example
IBM
WebSphere
Business
Integration
Collaborations. They are difficult to reuse for other offers, and therefore their
definition is an important stage in the development of a telecom service.
Describing a service offer in the form of a sequence of functional
operations facilitates their generation. Each functional operation performed
by the service can be described in the applicative view by a chain of SAC
components (see, e.g. Figures 4.63 and 4.66), the applicative components
being precisely the resources that are necessary for functional operation.
These chains, therefore, indicate the resources (service platforms and
network equipment) to be provided for each functional service operation so
that this operation can be carried out in the service framework. The chains
can also be taken up and modified during the offer’s lifecycle. When
changing the offer’s functional outline by adding or removing a functional
operation to the sequence of functional operations describing the offer, the
applicative impacts can be immediately identified in terms of which
component should no longer be provided and the new component that is to
be provided. These mechanisms have been notably studied in [GRI 08].
Furthermore, these applicative sequences that link functional operations
with resources can also be used in the process of supervision (assurance). In
the event of resource failure (detected by the supervision software in the
network equipment or service platforms), the applicative sequences make it
possible to determine which functional operations have been impacted by
this failure and, from there, which actions the stakeholders in the telecom
services will no longer be able to carry out. This makes it possible to bring
up relevant information in order to judge the severity of the failure.
In conclusion, the works presented in Chapters 3 and 4 constitute an aid
for the construction of telecom service offerings. They enable the
establishment of a consistent process for creating an offer, from its design by
the marketing team to its management, through its validation by ad hoc
decision-makers and its development or integration. A service architecture
that is described according to the process presented in Chapter 4 constitutes

218
Architecture and Governance for Communication Services
a
place
for
deliberation
between
the
different
stakeholders
in
the
construction of a service offer, the business analysts, decision-makers,
developers, integrators and operators. We will now look at how the
functional reference view provides an aid for the identification of the
functional scope of enablers or software services.
5.2. An aid for the rationalization of services
In Chapter 1, we distinguished between different types of applicative
elements whose purpose is to be reused in the construction of telecom
services: enablers, SOA software services. We indicated the difficulty in
clearly determining the functional perimeter desirable for these elements and
how this work has been carried out in standardization processes for enablers
or in the so-called SOA governance processes by enterprises, the processes
being poorly instrumented. We also saw how the Web semantics paradigm,
when applied to software services, faces the classic problem of lacking a
common vocabulary between the services’ stakeholders. We now examine
how the functional reference view enables us to clarify these issues.
5.2.1. The case of enablers
As discussed in Chapters 1 and 2, the question of identifying enablers and
their functional scope does not have a clear answer, the best solution is
currently being found in a standardization process so that multiple
viewpoints can be compared without hierarchical distinctions being made.
Following on from the previous chapters, we can propose another route.
An enabler, like a service, can be described through a functional view, a
technical view and an applicative view. Therefore, developing an enabler
involves the identification of its functional and technical scopes. The
enablers specified at the OMA, such as European Telecommunications
Standards Institute (ETSI) service capacities, focus either on the functional
dimension (the enabler provides a basic service to the user, which can be
reused by other services) or on the technical dimension (the enabler
encapsulates a technical solution, which can then be reused to implement
services). Of course, enablers focusing on the functional dimension also
specify a technical view that indicates to which technical environment the
enabler can be integrated. However, enablers focusing on the technical view
only minimally define a functional view.

Organizational and Software Applications
219
An enabler focusing on the functional view must correspond with the
company’s functional strategy and develop according to this strategy. The
elements of the functional reference view constitute stable blocks that are
defined on the basis of the company’s strategy and have to develop alongside
it. In our perspective, such an enabler will generally register as fulfilling a set
of basic functions of the functional reference view. Through example, we can
examine how the areas that we proposed as a logical grouping of basic
functions can correspond to the existing enablers (see Table 5.5).
An enabler focusing on the technical dimension must correspond with the
company’s technical strategy. It derives its legitimacy not from the service
rendered to the stakeholders but from the technology behind it. For example,
at the OMA, the OMA Data Synchronization enabler specifies the
synchronization of data between a mobile client and a server via the
SyncML protocol; the OMA Download enabler specifies downloading from
a mobile client to a server; and the XDM enabler specifies the management
of
XML
documents.
Similarly,
at
the
ETSI,
the
MMS-forwarding,
Bidirectional Broadband conversational audio streaming and Media Gateway
service capabilities correspond to a realization of reference points. Such an
enabler must therefore, from our perspective, implement a reference point of
the technical reference view.
We have thus determined the criteria for identifying and defining
enablers. It seems relevant to distinguish between enablers that focus on the
functional dimension and enablers that focus on the technical dimension.
Different names could even be used, such as functional enabler and technical
enabler. Functional enablers have to follow the company’s functional
reference architecture, implementing a consistent set of basic functions. An
enabler implementing just one function would be inadequate, as it would be
too dependent on other components. The functional quarter is the right scale,
which, as we have seen, groups homogeneous functions according to the
nature of the information processed. Table 5.5 shows that this level is
consistent with existing standards. Technical enablers have to follow the
technical reference architecture. Therefore, they have to be positioned for
realizing one or more reference points.
In both cases, before specifying an enabler, it is necessary to determine
the reference points or functions that it will fulfill. If these reference points
or functions do not exist in the reference architecture, the opportunity should
be taken to add them, studying their functional or technical weight in relation

220
Architecture and Governance for Communication Services
to the company’s functional or technical strategy. These stages also enable
the formalization of the scope of an enabler and the assessment of its
importance for the company.
Functional reference
quarter
OMA Enabler [OMA 07]
TISPAN Service
capability [ETS 06]
Address book
OMA Converged Address
Book
Communication setup
OMA IP Multimedia
Subsystem
Communication Control
Content publication and
access
OMA Mobile Broadcast
Services
Identity and rights
OMA Identity Management
Framework
Logon/Sign-on
Message publication and
access
OMA Converged IP
Messaging
MMS-session control
Table 5.5. Functional areas and TISPAN service capabilities
5.2.2. The case of software service
We saw in Chapter 1 that the identification of SOA services raises issues.
But like for enablers, the functional reference view helps us to identify these
software services. While enablers focus on a relatively large functional scope
in order to be as independent of each other as possible, the functional scope
of SOA services is usually more limited. As discussed in Chapter 1, an SOA
service presents an interface, for example in WDSL, indicating its operations
with their input and output parameters. An SOA service can, therefore, be
independent of other services despite having a restricted functional scope, as
it receives the necessary incoming information. This obviously implies that,
as we will further develop below, software components invoking the service
share the same semantics and syntax with it for these input parameters. Calls
to different SOA services can then be chained together in order to produce a
more complex service, the chain being created with an orchestration engine,
for example as in [MAR 08] and [BLU 08a].
The task of identifying basic functions from business processes carried
out in Chapter 3 gives us a tool for identifying SOA services in the case of
telecom services. We have identified basic functions using two criteria
(consistency with service processes and consistency with the company’s
functional strategy), which are also valid for identifying SOA services.

Organizational and Software Applications
221
In the field of telecom services, SOA services are mainly used to provide
interfaces (Application Programming Interface (API)) to partners; these
APIs allow telecom service capabilities to be exposed. This is, for example,
the case for France Telecom with the Orange Partner program1 or for
Telefonica with the program Open Movilforum2. Functional operations such
as those presented in Chapter 3 also provide us a list of typical SOA services
for telecommunications. As we have mentioned, businesses usually name
SOA services according to a common vocabulary, typically using a limited
list of verbs for the operations. Our approach goes further, allowing the
service rendered to be characterized by an operation according to a common
semantics: that of the functional reference view.
Table 5.6 shows the correspondence between SOA services in the
telecom world and the SFO operations presented in Chapter 4. The SOA
services come from the Parlay X group, whose mission is to define APIs for
Web services above telecommunication networks. These specifications were
also endorsed by the ETSI in the OSA framework.
Example of Parlay X Web service and
corresponding ETSI OSA standard
Corresponding SFO operation
sendSms (ETSI ES 202 504-4)
SFO issue message
makeCallSession (ETSI ES 202 504-2)
SFO issue phone call
setRules (ETSI ES 202 504-10)
SFO define routing rule
startMediaStream (ETSI ES 202 504-19)
SFO deliver content
createGroup (ETSI ES 202 504-13)
SFO define address list
addMember (ETSI ES 202 504-13)
SFO publish address
Table 5.6. Parlay X Web services and functional operations
SFO operations do not, of course, specify the detail of an SOA service,
but they are an interesting tool for defining its functional outline.
This
approach
is
also
applicable
to
software
services
such
as
Representational State Transfer (REST) services. For promoters of this
applicative architecture style, the data published by software services are an
essential characteristic, to the extent that this style is principally based on the
identification of these data and on their manipulation via the operations of
the http protocol (GET, POST, PUT, DELETE) [FIE 00]. The main issue is,
1 http://www.orangepartner.com
2 http://open.movilforum.com

222
Architecture and Governance for Communication Services
therefore, no longer service identification but data identification. For
example, in the case of the telecom services examined in [LOZ 08], the
manipulated data are IMS call sessions or presence status. In this case, there
are SFD data that serve as the basis for defining the scope of these software
services.
5.2.3. The case of semantic services
Faced with the multitude of available SOA services in a business or on
the Internet, cataloging these services becomes a major issue. As mentioned
in Chapter 1, current work, especially in European projects, is directed
toward the establishment of marketplaces through which a broad variety of
services can be accessed by following simple procedures. In addition to a
point of access that is unique to services, marketplaces being studied in
academic projects generally integrate semantic mechanisms in order to
describe services in a way that can be understood by machines. Works
focusing on services in ad hoc networks, such as [MAG 08], present the
same requirement for a common way of describing services to discover
similarities. Because of these semantic descriptions, it is possible to
automatically propose a service according to a need. The objective is,
therefore, to find the most suitable SOA service for a need that is expressed
in natural language (see, e.g. [TAR 07]). Lighter mechanisms, such as the
classification of keywords, are not sufficient for this as they only allow high-
level service categorization.
Ontologies, as introduced in Chapter 1, have been developed for this in
order to make the link between semantic service annotations and user needs.
However, as shown, for example, in [HEP 07], the construction of these
ontologies is a very difficult task. As we have seen, it requires systematically
linking the vocabulary used by the user to describe their needs with the
technical vocabulary used by the developers to characterize their services.
Technologies that are based on a semantic framework for automatically
putting together Web services – Semantic Web Services (SWS) such as Web
Service Modeling Framework (WSMF) – permit the definition of a goal, but
it remains very difficult for them to be fully automatically linked to a
service. These solutions remain very complex at the implementation level
and currently have not led to generalizable results. A particular difficulty
they face is putting the use and applicative aspects of a service into relation.
As explained in [ROC 07], simply putting the vocabulary, which is used to

Organizational and Software Applications
223
describe a service, into an ontology is not sufficient; a true work of
conceptualization is essential.
The functional description of services, such as those we have seen, brings
tools for establishing a telecom service ontology. A functional operation is
effectively a pivot between the use aspects of a service (the actions of the
stakeholders in the service) and its applicative aspects (the applicative
components and their applicative operations carried out by reference points).
These concepts were introduced in the European project Servery, with the
notion of abstract service [LAG 12a]. An abstract service is the functional
description of a service, outside of any non-functional consideration, as
described in [BOU 09]. Being based on the functional reference view, an
abstract service can be defined as a set of SFO operations. In the simplest
case, an abstract service can be unitary, that is it could correspond to only
one SFO operation. An abstract service can also be more complex,
composed of several SFOs that are chained with branching logic. In both
cases, the SFO operations and their dependencies are represented by the
concepts in an ontology. Service developers can therefore attach their
services to these abstract services. For example, an abstract service that is
defined by the SFO operation send message could correspond to concrete
software services such as an Orange Web service for sending text messages
and a Telefonica REST service for the same function. These abstract
services can be discovered, shared and composed by users in the same way
as with the classic software services. Our aim is that the translation of an
abstract service into a concrete software service only happens at runtime,
during the execution of the service.
The functional reference view is thus an aid for the identification of
reusable elements for telecom service architectures, including enablers,
software services and ontology concepts. We will now analyze how these
results can be used to facilitate service convergence, particularly through the
example of the Web/IMS convergence.
5.3. An aid for achieving service convergence
In Chapter 2, we discussed the issues of service convergence. We will
now look at how the service architecture description approach discussed in
Chapters 3 and 4 constitutes a tool for achieving this convergence, using
various examples. First, we will seek a technical pattern to clarify the issue

224
Architecture and Governance for Communication Services
of the Web/IMS convergence according to the front-office/back-office
division introduced in sections 2.2.1 and 2.3.1. Next, we will look at how, in
this front office, different service capabilities can be presented to users and
composed by them in response to a consumer need, as discussed in section
2.3.3, and how these capabilities that are presented to users can follow a
semantics that is shared with the back-office components. This will lead us
to
generalize
and
extend
the
concept
to
other
converged
service
environments by examining how the functional reference view can support
communication between services.
5.3.1. A technical pattern for the Web/IMS convergence
In relation to our discussion in Chapter 2, the distinction between the
functional view and technical view allows us to clarify architectures. The
distinction between protocols such as SIP and HTTP results from the
technical view. The different services that can be composed to respond to a
need result from the functional view. Figures 2.17 and 2.18 show common
methods of representation for convergence architectures. These figures are
of a high level. We can edit them and make them more useful using the
service architecture description approach discussed in Chapter 4.
Figure 5.1, which is reproduced here from Chapter 2, shows, according to
our framework, the technical view of a service, that is a set of execution
nodes linked by reference points.
Figure 5.1. SOA + IMS converged service environment

Organizational and Software Applications
225
The execution nodes that correspond to this figure are:
– the user, as sender and receiver of streams via human–machine
interfaces (note that the GUI reference point between the UE and the user is
bidirectional, like the Gm reference point, as the user sends requests to the
UE terminal and also receives notifications from it);
– presentation interfaces, with a terminal for the IMS (UE) and a User
Interface (UI) for SOA services;
– brokers, with the CSCF for the IMS and the SOA broker;
– application servers for both the IMS and SOA.
Figure 5.2. Technical view of an SOA + IMS converged service environment
The representation method adapted here has several advantages. First, it
allows us to explicitly place ourselves in a technical view. Second, the
reference points (of the technical reference architecture) are a valuable aid
for a precise description without omission. Finally, this method makes it
possible to easily foresee possible evolutions (toward an applicative view or
modifying technical roles).
user
UE
UI
broker
AS
CSCF
GUI
GUI
service access
Gm
ISC
Ut
bind

226
Architecture and Governance for Communication Services
Figure 5.2, which is also reproduced here from Chapter 2, constitutes the
proposed architecture for a Web/IMS convergence that fully adheres to the
front-office/back-office system presented at the end of section 2.2.2.
Figure 5.3. Seamless converged service environment
We can represent this architecture more formally by adding a “service
access interface” execution node and removing the UI execution node.
Reconfiguration of the reference points between execution nodes is
sufficient to do this. The UE terminal is striped off its user interface, as all
service interfaces are centralized in the “service access interface” execution
node. It is also necessary to add a “service access” reference point from the
Web technical pattern. Its name, therefore, changes to “Web-enabled UE”.
This execution node could correspond to an SIP/Web service gateway, such
as that described in [VER 09]. This architecture is presented in Figure 5.4.
Because of this formalization, we can immediately see an inconsistency.
Although the GUI and Gm reference points are bidirectional, the service
reference point is not. The “Web-enabled UE” execution cannot, therefore,
notify the user of an incoming call. For this, we must add a reference point
that we will call “RP Web push” from the “TR service logic” technical role
to the “TR Web page” technical role. This reference point can typically be
created using the mechanisms of the technical solution Adobe Flash (via the
Real Time Messaging Protocol (RTMP)), like in [VER 09], based on the
Cometd push technology via the HTTP protocol, or in html5 via the
WebSocket technology. This corrected architecture is represented in Figure
5.5. The figure constitutes a technical pattern for the Web/IMS convergence
that fully conforms to the front-office/back-office pattern.
interface d'accès aux services
requête
réponse
App 1
App 1
App 1
request
response
Service access interface
App 1
App 1
App 1

Organizational and Software Applications
227
Figure 5.4. Technical view of a seamless converged service environment (provisional)
Figure 5.5. Technical view of a seamless converged service environment (final)

228
Architecture and Governance for Communication Services
Broker, AS and CSCF execution nodes correspond to existing and well-
known equipment in the IMS or SOA field. The Web-enabled UE execution
node corresponds to products under examination. Industrial products are
starting to come onto the market, such as AdobeFlash Media Gateway3,
Nexcom NeXpresso4 and Androme Intellivic5, or, more recently, the
WebRTC technology being standardized at the Internet Engineering Task
Force (IETF) and the W3C. The service access interface could be realized
through widgets in a service aggregator, as discussed in [LAG 12b]. An
aggregator is a Web page that can display multiple independent Web
interfaces, widgets or gadgets. Each service is graphically represented in the
form of a widget, defined by the W3C as follows:
Widgets
are
small
client-side
Web
applications
for
displaying and updating remote data that are packaged in a way
to allow a single download and installation on a client machine,
mobile phone, or mobile Internet device.
Such interfaces are also being investigated in the CELTIC Servery
project [BOU, 09] under the name of Personal Service Environment (PSE).
Figure 5.6 presents a screenshot of the access interface together with the
services presented in [LAG 08].
Once the question of the technical pattern for the Web/IMS convergence
has been resolved, we must ask how a common semantics can link user,
front office (service access interface) and back office (AS).
5.3.2. Unified access to services
For an example of this technical pattern, we must look at the
corresponding applicative view. The user, broker, Web-enabled UE and
CSCF execution nodes will result in one SAC component, which is shared by
the different services provided. However, the service access interface and
AS execution nodes are specific to each service. Therefore, there are
multiple service access interface and AS components (e.g. in the form of
3 http://www.adobe.com/products/flashmediainteractive/
4 http://www.nexcom.fr/nexpresso-flash.pdf
5 http://www.intellivic.com/

Organizational and Software Applications
229
widgets), according to the services offered in this architecture. The service
access interface component constitutes the front-office part of a service and
the AS component constitutes the back-office part, as per the pattern shown
at the end of section 2.2.2. The question raised at the end of Chapter 2 was
that of a common semantics for front office and back office, so here for
widgets and AS. The SEF functions and SFO operations defined in the
functional reference view respond to this need.
Figure 5.6. Example of access interface together with services
In the applicative view, the term “AS” is a generic term that covers
enablers, SOA software services and SIP services. These AS can, therefore,
be described, as seen in Chapter 4, by applicative operations, that is SFO
operations carried out by reference points. The bind reference point carries
the functional operations offered by SOA services and the ISC reference
point carries the functional operations offered or used by SIP services. Other
reference points may be involved in the case of enablers.
We also saw in section 5.2 that enablers and software services are needed
to be rationalized by a common semantics in order to avoid functional
repetition and facilitate service composition. This issue is also faced by those

230
Architecture and Governance for Communication Services
working on widgets and service access interfaces. For example, in the
service aggregator illustrated in Figure 5.6, how can consistency between the
functions provided by the different elements be ensured? The widgets
presented in this interface could be effectively redundant, or implement
functionalities that are too complex. As shown in [LAG 09b], widgets should
only implement atomic functionalities in order to be easily integrated into a
converged service environment. Therefore, we propose the following
definition of widgets (we have highlighted the difference with the W3C
definition in italic).
Widgets are small client-side Web applications for offering
atomic functionalities of an enterprise application that are
packaged in a way to allow a single download and installation
on a client machine, mobile phone, or mobile Internet device.
[LAG 09b]
This is consistent with the work developed by J. Raskin, designer of the
Macintosh human–machine interface, in [RAS 00]
Instead of providing application programs, software vendors
will provide command sets that offer a collection of related
operations. For example, instead of a program for doing
photographic manipulation, a vendor would provide a number
of independent commands that, collectively, provide exactly the
same range of operations. The user would install as many or as
few as he/she finds useful rather than having to install a huge
application, of which only a fraction would be used.
How can these atomic functionalities be determined? Once again we can
be guided by the functional reference view, like for enablers and software
services. These atomic functionalities, which are often determined by
intuition, can be found easily in the functional reference view. Figure 5.7
shows the correspondence between widgets and SEF functions. The only
widget without a corresponding SEF is the map display widget. We did not
consider cartography in our analysis of telecom service processes in
Chapter 2. A more extensive analysis would certainly take it into account,
which would undoubtedly give an SEF in the functional reference view such
as “location browsing capability”. As for the SEF “call log browsing
capability”, this corresponds to navigation in a call log.

Organizational and Software Applications
231
Figure 5.7. Widgets and elementary functions
The description of widgets, SOA services and enablers through the
functional reference view makes it possible to envisage greater consistency
in service architectures. A widget, an SOA service and an enabler can all be
described in a uniform way by the same functional operation, the operation
being carried out by reference points – RP GUI for widgets, RP bind for
SOA services and various reference points (according to protocols)
for enablers. This means that the need expressed in [YEL 08] can be fulfilled
with greater consistency between the front end and back end of services in
converged service environments.
Services can be chained together in response to a precise user need. This
chain can be either constructed by a developer, for example with the aid of
languages such as BPEL, or generated spontaneously, for example in
response to a need expressed in natural language.
This unified description paves the way for a unified service composition,
as discussed, for example, in [LAV 09] and [ARB 04]. A user can navigate a
list of service capabilities or enter a command in natural language. If it
SEF contact browsing
capability
SEF phone call
issuing capability
SEF content browsing
capability
SEF call log browsing
capability
SEF message issuing
capability

232
Architecture and Governance for Communication Services
already exists, the complete service (front end and back end) is made
available to the user. If it only exists in the form of a back-end service, a
widget can be automatically generated on the basis of the service signature.
The interface style is adapted according to the functional operation
requested. If there is no service corresponding to the request, a new service
can be created by composing existing services. As software service inputs
and outputs are described through the functional operations they perform, the
construction of a chain of services is facilitated, especially in relation to
approaches like [LÉC 09] that do not define a pivot model. The functional
service description serves as the foundation for this composition.
Figure 5.8 shows a widget in which the user can enter their need in
natural language, alongside a calendar display widget (corresponding to an
SEF appointment browsing capability) and a message display widget
(corresponding to an SEF message browsing capability).
Figure 5.8. Service construction and composition widget
The request in natural language (typically expressed with verbs and
complements) is transformed into a functional service description, taking
into account the different idioms and synonyms for expressing the same
function. This functional description is then translated into a back-end

Organizational and Software Applications
233
service chain. A new widget is generated to request the necessary inputs and
display the result if necessary. For example, the following widget was
generated in response to the natural language command “send sms”. Input
fields are generated for entering the mobile number and the message.
Figure 5.9. Result of a service composition
This work was notably developed by Mariano Belaunde [BEL 08] in the
framework of the Servery project.
5.3.3. Inter-service communication
In the examples presented, the composition of services is designed in
advance as a chaining of given services, the chaining having been specified
by either a developer or a user. But we could also, in an autonomic
perspective, such as that presented in [LAG 12b], let each service invoke
others, without these invocations being predetermined by a composition
script. Instead of composing services in advance, each service would be able
to cooperate with others in a converged service environment. This
cooperation is generally coded into the behavior of a service by its
developer, but can also be generated on the users’ initiative, in response to
their requests. This extends the service composition framework toward inter-
service communication. There are no more unitary or composed services;
instead, there are services that can invoke each other without being aware of
each other beforehand. This can be seen as the target achievement of the
converged service environment that we saw in Chapter 2.

234
Architecture and Governance for Communication Services
We saw in Chapter 1 how the SOA paradigm involves decomposing
applications into elementary functions, SOA services. We also saw, in the
previous section, that this type of decomposition could be valuable for
graphic interfaces, through the widget concept. Inter-service communication
makes it possible to envisage the ad hoc construction of a consistent set of
functionalities, which we usually call an application, by assembling
components from similar services – SOA services, widgets – that
communicate with each other.
Thus, it is a question, from a more decentralized perspective, of letting
each service component invoke other service components. An address book
component could invoke a telephony component in order to make a call to a
selected contact. Calling on a predefined telephony component should not be
written in the code of the address book component, or we would be back to a
centralized mode where all the components are known in advance. Instead,
the address book component must be able to call on the telephony
component when this appears in the environment. Each service component,
therefore, becomes “adaptive”, that is it is able to adapt to the service
capabilities that are presented in its environment. This environment, which
can be compared to the unified service environment illustrated in
Figure 2.18 (Figure 5.2), is the service component execution framework.
While classic service component invocation methods only allow predefined
and fixed connections between components, this approach makes it possible
to dynamically combine service components, without the person who makes
the request needing to be familiar in advance with the available components
in the unified service environment.
This environment could be, for example, an operating system (OS).
Google Android, one of the most recent operating systems, enables only
such a communication between service components. Each component can
express an intent, which is defined as follows:
An intent is an abstract description of an operation to be
performed. (…) An intent provides a facility for performing late
runtime binding between the code in different applications. Its
most significant use is in the launching of activities, where it
can be thought of as the glue between activities. It is basically a
passive data structure holding an abstract description of an
action to be performed. The primary pieces of information in an
intent are: action (the general action to be performed (…) and

Organizational and Software Applications
235
data (the data to operate on, such as a person’s record in the
contacts database, expressed as a URI).
Some examples of action/data pairs are ACTION_VIEW
content://contacts/1 (display information about the person
whose identifier is “1”) or ACTION_DIAL content://contacts/1
(display the phone dialer with the person filled in).
The OS determines the best service component for realizing this intent.
For example, when the intent is “calling a contact”, a telephone component
is invoked. This resolution is not determined in advance, rather it is dynamic.
Each service component effectively declares which actions it can carry out
and on what kind of data. When an intent involves that action and data type,
the component will be invoked. For more details, see [AND], and also [ROL
09] for a theoretical background of the notion of intent for the SOA
paradigm.
This approach has been applied to telecom services by Niklas Blum in
[BLU 08b] with the Intent-based Service Request (InSerT). The unified
service environment is thus a set of telecom service platforms. An intent
would be, for example, “sending a text message”. Applicative components
could be declared as sending text messages and others could be declared as
needing to send text messages.
Such an approach is also applicable to widgets, as shown by Nassim Laga
in [LAG 12b]. The unified service environment is therefore a service
aggregator, presented in a Web page. Widgets can declare the data they
produce and the data they accept as input. For example, a directory widget
could declare its capability to accept contact data (in order to display its
directory page), and a call log or email retrieval widget could declare its
capability to produce contact data. Linking these widgets can be done in at
least two ways:
– First, the fact that the unified service environment is constantly
presented to the user in the form of a Web page gives the user the initiative
for communication between widgets. It is not the service component that is
programmed to emit an intent that will be resolved in the environment, but it
is the environment that offers the user the possibility of running the service
offered by a component from the data produced by another component. This
possibility can be provided graphically using various methods. A drag and

236
Architecture and Governance for Communication Services
drop mechanism can be put in place between widgets. For example, a
contact can be dragged from a call log widget to a directory widget. This
mechanism is detailed in [LAG 09b]. Another mechanism could consist of
the automatic addition of icons in each widget. Each icon symbolizes
another widget on the page that can be invoked on the basis of information
produced by the first widget. This mechanism is detailed in [LAG 09a].
– Second, links between types of widgets can be created by an
administrator role, and links between types of widgets for all users for whom
this administrator is responsible, for example a link between call log widgets
and directory widgets. These links are automatically updated according to
the widgets presented on the page, that is in the unified service environment.
This facilitates the implementation of business processes when the
environment is used in the scope of an enterprise.
The three cases we have just described – operating systems, telecom
service
platforms,
service
aggregators
–
all
raise
the
question
of
correspondence between the request from a service component and the
capabilities declared by the other service components. This correspondence
can be achieved in various ways. Let us take up our three examples again. In
the case of Google Android, correspondence is achieved via a limited
vocabulary, predefined by Google: the action requested in an intent, such as
ACTION_VIEW and ACTION_DIAL. In the case of communicative
widgets, our current implementation is based on a common formatting of the
data that are generated and accepted by these widgets. For example, a
common format would be used for contact data. Therefore, we have given
preference to microformats [MIC], data formatting with the help of XHTML
attributes on which there is a certain level of consensus in the Web
community. For example, contact data are formatted according to the hCard
microformat. However, this approach still poses a completeness problem.
Not all the necessary data are specified in the form of microformats. In the
case of the InSerT proposition for telecom service platforms, there is no
predefined data format or vocabulary, but correspondence is instead
achieved by semantic mechanisms. A telecommunications service ontology
would enable the creation of a link between requests from a service
component, expressed in a vocabulary unique to this component (or, rather,
to its developers), and the capabilities offered by other service components,
these capabilities also being expressed in a unique vocabulary for each
component. Although this can work in simple cases – for example with
synonyms such as “send SMS” and “send text message” – it is difficult, as

Organizational and Software Applications
237
discussed in Chapter 1, to construct a telecom service ontology without a
stable base, which can be linked to different semantic variations. Therefore,
in our three cases, we can see the need for a reference vocabulary, as a
shared semantics in the first two cases and as a basis for the construction of
an ontology in the third case. The method of constructing this reference
vocabulary has not been investigated for these cases. In the first case, it is at
Google’s discretion. In the second case, it follows the good practices
established by the microformat community but is not extendable to new
needs (no microformat has thus far been defined for telephone calls). In the
third case, it relies on a communication service ontology of which the
construction method has not been described.
Our work in Chapter 3 on a functional reference model provides the basis
for this reference vocabulary, the advantage being that the construction
method for the vocabulary is entirely explicit. It is based on elements that are
considered to be invariant over a sufficiently long period of time: the entities
manipulated by service stakeholders, their actions on these entities and the
functional patterns of the telecom field. We have also made the lifecycle of
this vocabulary explicit, especially in terms of telecom operator strategy.
The functional reference view makes it possible to formalize the
capabilities offered and the capabilities requested by a service component. It
can also enable us to better control the links between service components, in
terms of links between SFO operations and SFD data. For example, we can
consider that a service component implementing the function SFO-A can
only invoke components that produce the SFD-X data that are the input
parameters of SFO-A.
Practically, the use of this functional reference view can lead the work in
several directions:
– the construction of an ontology in the specific field of communication
service functions, which can then be used either to resolve the link between a
natural language request and service component capabilities or to resolve the
requests for service component capabilities;
– the characterization of widgets of a service aggregator through SFO
operations, that is both the service entities they manipulate and the actions
on these service entities that they enable. We can thus envisage building on
the dependencies of the functional reference view (the fact that a functional

238
Architecture and Governance for Communication Services
operation requires, as an input parameter, an output parameter produced by
another functional operation) to propose preferential links between widgets.
5.4. Summary
In this chapter, we have seen various applications and perspectives on the
results from Chapters 3 and 4, both organizational and software applications.
Organizational applications make a direct advantage from our approach
toward an unequivocal description of services architectures. This effectively
facilitates exchanges between the people involved in the design of a service:
the marketing team who design the service’s functional scope, the technical
specifiers who specify the technologies to be used, the architecture
committees
who
try
to
reuse
existing
applicative
components,
the
development teams who implement the service, the integration teams who
put it in place, the information system teams who develop its fulfillment,
after-sales processes, etc. Different service architectures can be easily
compared, including via formal means such as metrics. In addition to a
common semantics for describing service architectures, the functional and
technical reference views are also a tool for identifying reusable applicative
components (enablers, SOA services, widgets, etc.) and can help us to make
a
distinction
between
functional
and
technical
reusabilities.
These
organizational applications can be immediately applied to explain the service
convergence issues introduced in Chapter 2.
Software applications consist of the integration of reference semantics
into IT software in order to be able to achieve service convergence more
simply. This includes facilitating service management by supplying service
platforms with references to the applicative operations implemented by these
platforms and to the reference points displayed. It also includes facilitating
service discovery by identifying basic concepts for implementing a
consistent ontology of telecom services. Finally, it includes facilitating inter-
service communication by supplying each widget or service platform with
references to the applicative operations they implement or use, so that the
links between these components can be dynamically implemented according
to their presence in the same service environment.

Conclusion
We started out with a simple question: how can communication service
architectures be described, when service convergence pushes out a
traditional way of constructing these architectures, on a case-by-case basis,
in order to move toward a common approach for different services? The very
idea of architecture implies the existence of a structured framework that can
support exchanges between the multiple stakeholders in the design of a
service.
Our opening question has led us in two directions. On the one hand,
given that an architecture is defined as a system is constituted by basic
components for its optimal functioning, which components should be
considered when the system is a communication service? On the other hand,
how can we define a comparative base of stable invariants if we want to be able
to express these components not only according to a common syntax or
formalization, but in respect of a common semantic, in order to be able to
compare them, identify possible reusability, validate the relevance of their
composition and, finally, integrate them into a converged service environment?
We first discussed the tendency toward converged communication
services by distinguishing between service convergence and network
convergence and then by putting this service convergence back into the
general context of the service sector.
We then adopted the methodology of EA and information system
urbanization in order to consider the constituent elements of a service

240
Architecture and Governance for Communication Services
according to four viewpoints: business, functional, technical and applicative.
A business reference view, a functional reference view and a technical
reference view carry a reference semantics serving to express the functional
view, the technical view and the applicative view of a service1, as per
Figure 2.22, which is shown below.
Figure 2.22 (repeat). Method of describing the architecture of a telecoms service
1 These views can, of course, include specific service features that are not defined in a
reference view.
Vue applicative du service
Vue fonctionnelle de référence
Vue fonctionnelle du service
Vue métier de référence
Vue technique de référence
Vue technique du service
se conforme à
se conforme à
implémente
est exécuté dans
satisfait
permet
Business reference view
Functional reference view
Functional service view
Technical reference view
Technical service view
Applicative service view
allows
satisfies
conforms to
conforms to
is executed within
implements

Conclusion
241
We have shown that these views were suitable for communication
services and formalized each one. We clearly defined terms such as service
and user, which are habitually used in a certain vague semantics; their sense
often varying depending on the community (telecoms, Web and IT) and the
position of the person using them (service marketing, network marketing,
software
architect,
technical
architect,
service
platform
developer,
fulfillment or billing application designer, etc.).
The question of invariants remains. What is there in telecoms service
architectures that is stable enough to constitute a reference? Having
explicitly asked this question, which is often implicit in existing works on
service architectures in the telecoms community, we proposed three types of
invariants:
– semantic invariants describing the joint actions of stakeholders in a
service (typically the user and the service provider) to render that service;
– strategic invariants describing the major functions in a telecoms
operator’s business (communication, distribution, information configuration,
etc.);
– technical invariants describing protocols and technical architecture
models (e.g. the three-tier architecture).
We then constructed the business reference view with semantic
invariants, the technical reference view with technical invariants and the
functional reference view by mapping strategic invariants with semantic
invariants.
Our aim is not so much to establish a methodology for generalizing
and abstracting the abundance of communication services, as it is to raise
the
importance
and
the
possibility
of
meticulously
characterizing
communication service functionalities in order to distinguish and to find
links between the following:
– functional architecture;
– technical architecture, usually favored by telecoms architects;
– applicative architecture, usually favored by software architects.
Concerning service convergence, we showed the importance of a
technical view that is defined quite loosely in comparison with layered

242
Architecture and Governance for Communication Services
telecoms models, with the concepts of technical role and reference
point allowing for the consideration of telecoms technical patterns, such as
the IMS just as much as IT technical patterns, such as SOA architectures.
The applicative view is therefore quite efficient and innovative as it
enables
representation,
in
a
clear
formalization,
of
the
end-to-end
functioning of a service, including IT and telecoms components, network
elements and service platforms, and indicates how they contribute to the
realization of a service via the applicative operations carried by reference
points.
At the end of this book, the reader might wonder whether we have
succumbed to a “French passion for generality and abstraction”2 in
excessively
reducing
the
complexity,
diversity
and
abundance
of
communication services. Our approach should not be considered as an
inseparable whole, but rather as a toolbox, which can be mobilized in
different contexts and especially in the context of service convergence. The
business reference view can support marketing teams to establish user
journeys that are shared by different service offerings, and the functional
view can support these same marketing teams with the design and
formalization of service offerings. The functional reference view and the
technical reference view can be used independently to help identify
applicative components that can be reused, such as enablers or SOA
services, as well as to help construct a telecoms service ontology. The
integration of semantic service descriptions into software applications paves
the way for dynamic links between these applications, either in response to a
user request or at the initiative of the applications themselves or of their
execution environment; this perspective being extendable to service
management applications.
In conclusion, let us recall the following three points:
– the good balancing of the four views of EA for communication
services, subject to precisely defining what is represented by the business
and functional views in this framework;
– the importance of formalizing, in the applicative view, the link between
the protocols (or technical architecture models) and the end-to-end
functionalities rendered through these protocols, with the concepts of
applicative component and applicative operation, these concepts being
2 In the words of the historian Pierre Rosanvallon in [ROS 04].

Conclusion
243
particularly applicable to converged services as they are valuable both for IT
and telecoms components;
– the possibility, and the importance, of determining invariants in
telecoms services to improve architecture design and validation as well as to
facilitate interservice communication and the automatic construction of
composed services in a converged service environment.

Appendix 1
A1.1. Acronyms for the functional, technical and applicative views
GFD
Generic Functional Data
GFO
Generic Functional Operation
RP
Reference Point
SAC
Service Applicative Component
SAD
Service Applicative Data
SAO
Service Applicative Operation
SEF
Service Elementary Function
SFC
Service Functional Component
SFD
Service Functional Data
SFO
Service Functional Operation
TR
Technical Role
A1.2. Other acronyms
AFNOR
Association française de normalisation
API
Application Programming Interface
AS
Application Server

246
Architecture and Governance for Communication Services
BPEL
Business Process Execution Language
BPML
Business Process Modeling Language
CAMEL
Customized Applications for Mobile Network
CSCF
Call Session Control Function
DoDAF
Department of Defense Architecture Framework
DRM
Digital Rights Management
EA
Enterprise Architecture
eTOM
Enhanced Telecom Operation Map
ETSI
European Telecommunications Standards Institute
FAST
Functional Analysis System Technique
GII
Global Information Infrastructure
GSM
Global System for Mobile communications
GUI
Graphical User Interface
HMI
Human Machine Interface
HSS
Home Subscriber Server
IDP
Identity Provider
IETF
Internet Engineering Task Force
IMS
IP Multimedia Subsystem
IN
Intelligent Network
INCM
Intelligent Network Conceptual Model
InSerT
Intent-based Service RequesT
IPTV
IP Television
IT
Information Technology
ITIL
Information Technology Infrastructure Library
ITU
International Telecommunication Union
MDA
Mail Delivery Agent
MMS
Multimedia messaging service
MS
Message Store
MS
Mobile Station
MSA
Mail Submission Agent
MTA
Mail Transfer Agent
MUA
Mail User Agent
NAB
Network Address Book
NGN
Next-Generation Network

Appendix 1
247
NGS
Next-Generation Services
OMA
Open Mobile Alliance
OMG
Object Management Group
OSA
Open Service Access
OWL
Ontology Web Language
OWL-S
OWL for Services
PLU
Plan Local d'Urbanisme
PSTN
Public Switched Telephone Network
RCS
Rich Communication Suite
RDF
Resource Description Framework
RTP
Real Time Protocol
SADT
Structured Analysis and Design Technique
SAWSDL
Semantic Annotations for WSDL
SCIM
Service Capability Interaction Management
S-CSCF
Serving Call Session Control Function
SDP
Service Delivery Platform
SIB
Service Independent Building Block
SIM
Subscriber Identity Module
SIMPLE
SIP for Instant Messaging and Presence Leveraging Extensions
SIP
Session Initiation Protocol
SLA
Service-Level Agreement
SME
Short Message Entity
SMS
Short Message Service
SMSC
SMS Center
SMTP
Simple Mail Transfer Protocol
SOA
Service-Oriented Architecture
SPD
Session Description Protocol
SSME
Service Science, Management and Engineering
STB
Set-Top Box
TINA-C
Telecommunications Information Networking Architecture
Consortium
TMF
TeleManagement Forum

248
Architecture and Governance for Communication Services
TOGAF
The Open Group Architecture Framework
UE
User Equipment
UGS
User-Generated Services
UML
Unified Modeling Language
URI
Uniform Resource Identifier
VOD
Video On Demand
W3C
World Wide Web Consortium
WS
Web Service
WSC
Web Service Consumer
WSD
Web Service Directory
WSDL
Web Service Description Language
WSP
Web Service Provider
XDM
XML Document Management
XDMC
XDM Client
XDMS
XDM Server

Bibliography
[3GP 99] 3GPP TS 23.078: Customised Applications for Mobile network Enhanced
Logic (CAMEL) Phase 3 – Stage 2, 1999.
[3GP 01] 3GPP, TS 03.40, Technical realization of the Short Message Service
(SMS), V7.5.0 (2001-12), 2001.
[3GP 02a] 3GPP TS 23.218: IP Multimedia (IM) session handling; IM call model;
Stage 2, 2002.
[3GP 02b] TS29.229: Cx and Dx interfaces based on the Diameter protocol;
Protocol details, 2002.
[3GP 04a] 3GPP TS 24.141: Presence service using the IP Multimedia (IM) Core
Network (CN) subsystem; Stage 3, 2004.
[3GP 04b] 3GPP TS 24.147: Conferencing using the IP Multimedia (IM) Core
Network (CN) subsystem; Stage 3, 2004.
[3GP 04c] 3GPP TS 24.247: Messaging using the IP Multimedia (IM) Core
Network (CN) subsystem; Stage 3, 2004.
[3GP 05] TS 23.198, Open Service Access (OSA); Stage 2, 2005.
[3GP 07a] 3GPP, Presence service using the IP Multimedia (IM) Core Network
(CN), 2007.
[3GP 07b] 3GPP, Messaging using the IP Multimedia (IM) Core Network (CN)
subsystemsubsystem; TS 24.141, version 7.4.0, 7 September; TS 24.247, version
7.2.0, 7 June, 2007.
[3GP 07c] 3GPP, Conferencing using the IP Multimedia (IM) Core Network (CN)
subsystem, TS 24.147, version 7.6.0, 7 September, 2007.
[3GP 08] 3GPP TR23.810: Study on Architecture Impacts of Service Brokering
(Release 8), 2008.

250
Architecture and Governance for Communication Services
[3GP 09] 3GPP TS 22.101, Service principles (Release 8), 2009.
[ALE 04] ALEXANDER I., MAIDEN N., “Scenarios, stories, and use cases: the modern
basis for system development”, Computing & Control Engineering Journal,
vol. 15, no. 5, pp. 24–29, 2004.
[AND] ANDROID, http://developer.android.com/index.html
[ANN 04] ANNETT J., “Hierarchical task analysis”, The Handbook of Task Analysis
for Human–Computer Interaction, Lawrence Erlbaum Associates, Mahwah, NJ,
pp. 67–82, 2004.
[ANS 00] ANSCOMBE E., Intention, Harvard University Press, Cambridge,
Massachusetts and London, England, 2000.
[ARB 04] ARBANOWSKI S., BALLON P., DAVID K., DROEGEHORN O., EERTINK H.,
KELLERER W., VAN KRANENBURG H., RAATIKAINEN K., POPESCU-ZELETIN R.,
“I-centric communications: personalization, ambient awareness, and adaptability
for future mobile services”, IEEE Communications Magazine, vol. 42, no. 9,
pp. 63–69, September 2004.
[ARR 06] ARROYO S., LOPEZ-COBO J.M., “Describing Web services with semantic
metadata”, International Journal of Metadata Semantics and Ontologies, vol. 1,
pp. 76–82, 2006.
[ASA
96]
ASATANI
K.,
NOGAMI
S.,
“Trends
in
the
standardization
of
telecommunications on GII, multimedia, and other network technologies and
services”, IEEE Communications Magazine, vol. 34, no. 6, pp. 32–46, 1996.
[BAC 08] BACHMANN A., MOTANGA A., MAGEDANZ T., “Requirements for an
extendible IMS client framework, in (LINDA)” XIE J., TUGCU T. (eds),
Proceedings
of
the
1st
International
Conference
on
MOBILe
Wireless
MiddleWARE, Operating Systems, and Applications, MOBILWARE 2008,
Volume 278 of ACM International Conference Proceeding Series, Innsbruck,
Austria, 13–15, February 2008.
[BAR 87] BARCET A., La Montée des services, vers une économie de la servuction,
PhD Thesis, University of Lyon II, 1987.
[BED 08] BEDINI I., GARDARIN G., NGUYEN B., “Deriving ontologies from XML
Schema”, Proceedings 4émes Journées francophones sur les Entrepôts de
Données et l’Analyse en ligne (EDA 2008), 5–6 June, Toulouse, France, 2008.
[BEL 08] BELAUNDE M., FALCARIN P., “Realizing an MDA and SOA marriage for
the development of mobile services”, Proceedings of the 4th European
Conference on Model Driven Architecture: Foundations and Applications, 9–13
June, Berlin, Germany, 2008.

Bibliography
251
[BER 01] BERNERS-LEE T., HENDLER J., LASSILA O., The Semantic Web, Scientific
American Magazine, 15 May, pp. 29–37, 2001.
[BER 04] BERTIN E., BURY E., LESIEUR P., “Intelligence distribution in next-
generation networks: an architectural framework for multimedia services”, IEEE
International Conference on Communications (ICC 2004), 20–24 June, Paris,
2004.
[BER 08] BERTIN E., CRESPI N., “Next generation communication services: a usage
perspective”, ServiceWave 2008, LNCS, vol. 5377, Springer-Verlag, pp. 86–97,
2008.
[BER 09] BERTIN E., CRESPI N., “Service business processes for the next generation
of services: a required step to achieve service convergence”, Annals of
Telecommunications, vol. 64, nos. 3–4, pp. 187–196, 2009.
[BLE 06] BLEISTEIN S.J., COX K., VERNER J., “Validating strategic alignment of
organizational IT requirements using goal modeling and problem diagrams”,
Journal of Systems and Software, vol. 79, no. 3, pp. 362–378, 2006.
[BLU 08a] BLUM N., MAGEDANZ T., SCHREINER F., “Definition of a service
delivery platform for service exposure and service orchestration in next
generation networks”, UbiCC Journal, vol. 3, no. 3, pp. 102–111, 2008.
[BLU 08b] BLUM N., DUTKOWSKI S., MAGEDANZ T., “InSeRt: an Intent-based
service request API for service exposure in next generation networks”, Special
Track on Service Engineering in a converging Telecommunications/Web 2.0
World at the 3rd International Symposium on Leveraging Applications of
Formal Methods, Verification and Validation (ISoLA 2008), Greece, October
2008.
[BOO 99] BOOCH G., RUMBAUGH J., JACOBSON I., The Unified Modeling Language
– User Guide, Addison-Wesley, 1999.
[BOU 09] BOUSSARD M., FODOR S., CRESPI N., IRIBARREN V., LE ROUZIC J.P.,
BEDINI I., MARTON G., MORO FERNANDEZ D., LORENZO DUENAS O., MOLINA
B., “SERVERY: the web-telco marketplace”, ICT-Mobile Summit 2009,
Santander, Spain, June 2009.
[BRA 05] BRAUN C., WINTER R., “A comprehensive enterprise architecture
metamodel and its implementation using a metamodeling platform”, Enterprise
Modelling and Information Systems Architectures, Gesellschaft für Informatik,
Bonn, pp. 64–79, 2005.
[BRO 08] BROADBENT S., BAUWENS V., “Understanding convergence”, ACM
Interactions, vol. 15, no. 1, pp. 23–27, 2008.

252
Architecture and Governance for Communication Services
[CAE 07] CAETANO J., SANTOS P., RENDITORE P., DEMARTINI M., FALCARIN P.,
BALADRÓN C., AGUIAR J., CARRO B., “Introducing the user to the service
creation world: concepts for user centric service creation, personalization and
notification”, 16th IST Mobile & Wireless Communications Summit, Budapest,
Hungary, July 2007.
[CAI 07] CAI H., CHUNG J.Y., SU H., “Relooking at services science and services
innovation”, Proceedings of the IEEE International Conference on e-Business
Engineering (ICEBE 2007), 24–26 October, Hong Kong, China, pp. 427–432,
2007.
[CAR 05] CARUGI M., HIRSCHMAN B., NARITA A., “Introduction to the ITU-T NGN
focus group release 1: target environment, services, and capabilities”, IEEE
Communication Magazine, vol. 43, no. 10, pp. 42–48, October 2005.
[CHA 03] CHANNABASAVAIAH K., HOLLEY K., TUGGLE E., “Migrating to a service-
oriented architecture”, IBM Developer-Works, 16 December 2003.
[CHE 06] CHESBROUGH H., SPOHRER J., “A research manifesto for services
science”, Communications of the ACM, vol. 49, no. 7, pp. 35–40, 2006.
[CHI 01] CHILD J., MCGRATH R.G., “Organizations unfettered: organizational form
in an information-intensive economy”, Academy of Management Journal,
vol. 44, no. 6, pp. 1135–1148, 2001.
[CLU 06] CLUB URBA-EA, Urbanisme des SI & gouvernance, Dunod, 2006.
[COC 02] COCHENNEC J.Y., “Activities on next-generation networks under global
information infrastructure in ITU-T”, IEEE Communications Magazine, vol. 40,
no.7, pp. 98–101, July 2002.
[COC 97] COCKBURN A., “Goals and use cases”, JOOP, vol. 10, no. 5, pp. 35–40,
1997.
[CON 02] CONTINI I., “L’apport historique de l’urbanisme des villes pour
lurbanisme des systèmes dinformation”, Colloque Urbanisation des Systèmes
dInformation, 24 June, Paris, 2002.
[DAV 63] DAVIDSON D., “Actions, reasons, and causes”, Journal of Philosophy,
vol. 60, no. 23, pp. 685–700, 1963.
[DAY 06] DAY G.S., “Aligning the organization with the market”, MIT Sloan
Management Review, vol. 48, no. 1, pp. 41–49, 2006.
[DEL 87] DELAUNAY J.C., GADREY J., Les Enjeux De La Société De Service,
Presses de Sciences Po, Paris, 1987.
[DUB 08] DUBBERLY H., EVENSON S., “On modeling the experience cycle”, ACM
Interactions, vol. 15, no 3, pp. 11–15, 2008.

Bibliography
253
[ES 05] ES 282 001, Telecommunications and Internet converged Services and
Protocols for Advanced Networking (TISPAN), NGN Functional Architecture
Release 1, 2005.
[FIE 00] FIELDING R.T., TAYLOR R.N., “Principled design of the modern Web
architecture”, Proceedings of the 22nd International Conference on Software
Engineering, 4–11 June, Limerik, Ireland, pp. 407–416, 2000.
[FLI 08] FLICHY P., “Technique, usage et représentations”, revue Réseaux, vol. 26,
no. 148–149, Lavoisier, 2008.
[GHA 07] GHADIRI N., NEMATBAKHSH M.A., BARAANI-DASTJERDI A., GHASEM-
AGHAEE N., “A context-aware service discovery framework based on human
needs model”, ICSOC, pp. 404–409, 2007.
[GOU 06] GOUYA A., CRESPI N., BERTIN E., “SCIM (Service Capability Interaction
Manager) implementation framework in IMS”, IEEE International Conference
on Communications (ICC 2006), Istanbul, Turkey, June 2006.
[GOU 07] GOUYA A., CRESPI N., BERTIN E., OUESLATI L., “Managing service
capability and service feature interactions in the IMS of UMTS”, Business
Models and Drivers for Next Generation IMS Service, International Engineering
Consortium, 2007.
[GRI 06] GRIDA BEN YAHIA I., BERTIN E., CRESPI N., DESCHREVEL JP., “Service
definition for NGN”, International Conference on Networking (ICN 2006),
Mauritus, April 2006.
[GRI 08] GRIDA BEN YAHIA I., BERTIN E., CRESPI N., “Self-managed next
generation services: How autonomic principles address the challenge of NGS
management? ” ICIN, Bordeaux, October 2008.
[GRI
07]
GRIFFIN
D.,
PESCH
D.,
“A
survey
on
Web
services
in
telecommunications”,
IEEE
Communications
Magazine,
vol.
45,
no.
7,
pp. 28–35, July 2007.
[GRO 07] GRÖNROOS C., In Search of New Logic for Marketing. Foundations of
Contemporary Theory, John Wiley & Co., Chichester, West Sussex, England,
2007.
[GRU 93] GRUBER T.R., Towards Principles for the Design of Ontologies Used for
Knowledge Sharing in Formal Ontology in Conceptual Analysis and Knowledge
Representation, Kluwer Academic, 1993.

254
Architecture and Governance for Communication Services
[HAM 07] HAMADACHE K., BERTIN E., BOUCHACOURT A., BEN YAHIA I.,
“Context-aware
communication
services:
an
ontology
based
approach”,
International Workshop
on
Context
Modeling
and
Management for
Smart
Environments (CMMSE 2007) in Conjunction with the IEEE ACM 2nd International
Conference on Digital Information Management (ICDIM 2007), France, Lyon,
October 2007.
[HEN 93] HENDERSON J.C., VENKATRAMAN N., “Strategic alignment: leveraging
information technology for transforming organizations”, IBM Systems Journal,
vol. 32, no. 1, pp. 4–16, 1993.
[HEP 07] HEPP M., “Possible ontologies: How reality constrains the development of
relevant ontologies”, IEEE Internet Computing, vol. 11, no. 1, pp. 90–96, 2007.
[HES 08] HESSELMAN C., CESAR P., VAISHNAVI I., BOUSSARD M., KERNCHEN R.,
MEISSNER S., SPEDALIERI A., SINFREU A., RÄCK C., “Delivering interactive
multimedia
services
in
dynamic
pervasive
computing
environments”,
Proceedings of the 1st International Conference on Ambient Media and Systems,
11–14 February, Quebec, Canada, pp. 1–8, 2008.
[IEE
00]
IEEE,
Standard
1471,
Recommended
Practice
for
Architectural
Description of Software-Intensive Systems, September 2000.
[IET 96] IETF RFC 1889: RTP: a transport protocol for real-time applications,
January 1996.
[IET 00] IETF RFC 3015: Megaco Protocol Version 1.0, November 2000.
[IET 02] IETF RFC 3261: SIP: Session Initiation Protocol, 2002.
[IET 03] IETF RFC 3550: RTP: a transport protocol for real-time applications,
July 2003.
[ILO 08] International Labour Office: January 2008.
[ITU 88] ITU recommendation Q.931: ISDN user-network interface layer 3
specification for basic call control, 1998.
[ITU 92a] ITU-T Q.1201, Principles of intelligent network architecture, 1992.
[ITU 92b] ITU-T Z.100, Specification and Description Language (SDL), 1992.
[ITU 93a] ITU-T Q.1204, Intelligent network – Distributed functional plane
architecture, 1993.
[ITU 93b] ITU-T Q.1205, Intelligent network – Physical plane architecture, 1993.
[ITU 1993c] ITU-T Q.1211, Introduction to intelligent network capability set 1,
1993.

Bibliography
255
[ITU 96] ITU recommendation H.323: Visual telephone systems and equipment for
local area networks which provide a non-guaranteed quality of service, May
1996.
[ITU 97a] ITU-T Q.1202, Intelligent network – Service plane architecture, 1997.
[ITU 97b] ITU-T Q.1203, Intelligent network – Global functional plane architecture,
1997.
[ITU 98a] ITU-T Y.110, Infrastructure mondiale de l’information: Principes et
architecture générale, 1998.
[ITU
98b]
ITU
recommendation
H.248:
Control
protocol
for
multimedia
communication, February 1998.
[ITU 08] ITU-T Y.1910, IPTV Functional Architecture, 2008.
[INO 98] INOUE Y., CUHA D., BERNDT H., “The TINA Consortium”, IEEE
Communications Magazine, vol. 36, no. 9, pp.130–136, September 1998.
[IVE 04] IVERS J., CLEMENTS P., GARLAN D., NORD R., SCHMERL B., SILVA J.R.O.,
Documenting Component and Connector Views with UML 2.0, Technical report
CMU/SEI-2004-TR-008, Carnegie Mellon University, April 2004.
[KAI 05] KAISLER S.H., ARMOUR F., VALIVULLAH M., “Enterprise architecting:
critical problems”, Proceedings of the 38th Annual Hawaii International
Conference on System Sciences (HICSS 2005), 3–6 January, Hawaii, p. 224b,
2005.
[KAR 07] KARUNAMURTHY R., KHENDEK F., GLITHO R.H., “A business model for
dynamic
composition
of
telecommunication
Web
services”,
IEEE
Communications Magazine, vol. 45, no. 7, pp. 36–43, 2007.
[KAU 05] KAUFMANN L., CLEMENT F., Le monde selon John Searle, Paris, Cerf,
2005.
[KEC 98] KECK D.O., KUEHN P.J., “The feature and service interaction problem in
telecommunications systems: a survey”, IEEE Transactions on Software
Engineering, vol. 24, no. 10, pp. 779–796, 1998.
[KEL 06] KELLERT P., TOUMANI F., Les Web services sémantiques, Revue I2
(Information-Interaction-Intelligence), Paris, France, 2006.
[KEL 06] KELLOGG K.C., ORLIKOWSKI W.J., YATES J., “Life in the trading zone:
structuring coordination across boundaries in postbureaucratic organizations”,
Organization Science Journal, vol. 17, no 1, pp. 22–44, 2006.
[KNI 05] KNIGHTSON K., MORITA N., TOWLE T., “NGN architecture: generic
principles, functional architecture, and implementation”, IEEE Communications
Magazine, vol. 43, no 10, pp. 49–56, October 2005.

256
Architecture and Governance for Communication Services
[KOT 88] KOTLER P., Marketing Management: Analysis, Planning, Implementation
and Control, 6th ed., Prentice Hall, Englewood Cliffs, NJ, 1988.
[KRU 95] KRUCHTEN P., “Architectural blueprints – the 4+1 view model of
software architecture”, IEEE Software, vol. 12, no. 6, pp. 42–50, 1995.
[KWA 08] KWAN S.K., MIN J.H., “An evolutionary framework of service systems”,
International Conference on Service Science (ICSS 2008), Beijing, China, April
2008.
[LAG 08] LAGA N., BERTIN E., CRESPI N., “A unique interface for Web and
telecom services: from feeds aggregator to services aggregator”, ICIN,
Bordeaux, October 2008.
[LAG 09a] LAGA N., BERTIN E., CRESPI N., “Building a user friendly service
dashboard: automatic and non-intrusive chaining between widgets”, IEEE
International Workshop on Web X.o in IEEE Congress on Services (SERVICES
2009), Los Angeles, July 2009.
[LAG 09b] LAGA N., BERTIN E., CRESPI N., “A Web based framework for rapid
integration of Enterprise applications”, ACM International Conference on
Pervasive Services, Imperial College, London, July 2009.
[LAG 12a] LAGA N., BERTIN E., CRESPI N., BEDINI I., MOLINA B., ZHAO Z., “A
flexible service selection for executing virtual services”, World Wide Web
Journal, 2012.
[LAG 12b] LAGA N., BERTIN E., GLITHO R., CRESPI N., “Widgets and composition
mechanism for service creation by ordinary users”, IEEE Communications
Magazine, vol. 50. no 3, pp. 52–60, March 2012.
[LAM 03] LAMB R., KLING R., “Reconceptualizing users as social actors in
information systems research”, Management Information Systems Quarterly, vol.
27, no. 2, pp. 197–235, 2003.
[LAV 09] LAVINAL E., SIMONI N., SONG M., MATHIEU B., “A next-generation
service overlay architecture”, Annals of Telecommunications, vol. 64, nos. 3–4,
pp. 175–185, 2009.
[LÉC 09] LÉCUÉ F., BOISSIER O., DELTEIL A., LÉGER A., “Web service composition
as a composition of valid and robust semantic links”, International Journal of
Cooperative Information Systems (IJCIS), vol. 18, no. 1, pp. 1–62, 2009.
[LIU 06] LIU L., CHI C., JIN J., YU E., “Strategic capability modelling of services”,
2nd International Workshop on Service-Oriented Computing: Consequences for
Engineering Requirements (SOCCER 2006), Minneapolis, September 2006.

Bibliography
257
[LIZ 08] LIZCANO D., SORIANO J., REYES M., HIERRO J.J., “EzWeb/FAST:
reporting on a successful Mashup-based solution for developing and deploying
composite applications in the upcoming ubiquitous SOA”, International
Conference
on
Mobile
Ubiquitous
Computing
Systems
Services
and
Technologies (UBICOMM 2008), 29 September–4 October, Valencia, Spain, pp.
488–495, 2008.
[LO 07] LO A., YU E., “From business models to service-oriented design: a
reference catalog approach”, ER, LNCS 4801, Springer-Verlag, pp. 87–101,
2007.
[LOM 08] LOMBARD D., Le village numérique mondial – La deuxième vie des
réseaux, Odile Jacob, Paris, April, 2008.
[LON 01] LONGEPE C., Projet d'urbanisation du système d'information – Démarche
pratique avec cas concret, 3rd ed., Dunod, Paris, 2001.
[LOZ 08] LOZANO D., GALINDO L.A., GARCIA L., “WIMS 2.0: converging IMS and
Web 2.0. Designing REST APIs for the exposure of session-based IMS
Capabilities”, The 2nd International Conference on Next Generation Mobile
Applications, Services and Technologies (NGMAST 2008), 16–19 September,
pp. 18–24, 2008.
[LUS 06] LUSCH R.F., VARGO S.L., “Service-dominant logic: reactions, reflections
and refinements”, Marketing Theory, vol. 6, no. 3, pp. 281–288, 2006.
[LUS 08] LUSCH R.F., VARGO S.L., WESSELS G., “Toward a conceptual foundation
for service science: contributions from service-dominant logic”, IBM Systems
Journal, vol. 47, no. 1, pp. 5–13, 2008.
[MAG 07] MAGEDANZ T., BLUM N., DUTKOWSKI S., “Evolution of SOA concepts
in telecommunications – a Déjà vu?” Special Issue on Service Oriented
Architectures, IEEE Computer, vol. 40, no. 11, pp. 46–50, 2007.
[MAG 08] MAGHMOUMI C., ANDRIATRIMOSON T.A., GABER J., LORENZ P., “A
service based clustering approach for pervasive computing in ad hoc networks”,
Global Telecommunications Conference, IEEE GLOBECOM, 30 November–4
December, New Orleans, 2008.
[MAG 06] MAGLIO P., SRINIVASAN S., KREULEN J.T., SPOHRER J., “Service
systems, service scientists, SSME”, and innovation, Communications of the
ACM, vol. 49, no 7, pp. 81–85, July 2006.
[MAR 08] MARGARIA T., “The semantic Web services challenge: tackling
complexity at the orchestration level”, 13th IEEE International Conference on
Engineering of Complex Computer Systems (ICECCS 2008), 31 March–3 April,
Belfast, pp. 183–189, 2008.

258
Architecture and Governance for Communication Services
[MEN 05] MENAÏ M.F., FROMENTOUX G., GAÏTI D., LEMERCIER M., “A UML tool
for
urbanism
and
control
architecture
design
applied
to
3GPP
based
architectures”, Proceedings of the International Tele-Traffic Congress, vol. 6b,
pp. 1987–1996, 2005.o
[MEN 07] MENTZAS G., KAFENTZIS K., GEORGOLIOS P., “Knowledge services on
the semantic web”, Communications of the ACM, vol. 50, no. 10, pp. 53–58,
2007.
[MET 01] METCALFE J.S., “Modern evolutionary economic perspectives: an
overview”, Frontiers of Evolutionary Economics, Edward Elgar, 2001.
[MIC] Microformats, http://microformats.org/
[MOE 03] MOERDIJK A.J., KLOSTERMANN L., “Opening the networks with
Parlay/OSA: standards and aspects behind the APIs”, IEEE Network, vol. 17,
no. 3, pp. 58–64, 2003.
[MOR 03] MORLEY C., DEFUDE B., BUTELLE F., LANG D., “Enabling tools for e-
commerce”, Annals of Telecommunications, vol. 58, nos. 1–2, pp. 8–58, 2003.
[MOR 98] MORRE B.W., “The ITU's role in the standardization of the GII”, IEEE
Communications Magazine, vol. 36, no. 9, pp. 98–106, September 1998.
[MUL 94] MULLIEZ G., WHITELEY R., La dynamique du client – Une révolution des
services, Maxima, Paris, 1994.
[NFX 91] NF X50-151, Analyse de la valeur – Analyse fonctionnelle – Expression
fonctionnelle du besoin et cahier des charges fonctionnel, December 1991.
[NAI 07] NAICS: North American Industry Classification System 2007, US
Department of Commerce, September 2007.
[NAJ 99] NAJM E., OLSEN F., VIGNES S., “From SIBS to distributed Objects: a
transformation approach for service creation”, IFIP 5th International Conference
on Intelligence in Networks (SMARTNET 1999), 22–26 November, Pathumthani,
Thailand, pp. 403–417, 1999.
[NUF 07] NUFFEL D., “Towards a service-oriented methodology: business-driven
guidelines for service identification”, On the Move to Meaningful Internet
Systems (OTM 2007), 25–30 November, Springer, Vilamoura, Portugal, 2007.
[NYG
86]
NYGAARD
K.,
“Program
development
as
a
social
activity”,
INFORMATION PROCESSING 86, Elsevier Science (IFIP 1986), Proceedings
of the the IFIP 10th World Computer Congress, 1–5 September, Dublin, Ireland,
pp. 189–198, 1986.
[OBR 97] OBRIEN J., Les systèmes d'information de gestion, De Boeck University,
1997.

Bibliography
259
[OCO 08] OCONNELL J., “Federation of user data for multi-domain blended
services”, ICIN Conference, Bordeaux, October 2008.
[OMA 07a] OMA, Dictionary for OMA specifications, Approved Version 2.6,
OMA-ORG-Dictionary-V2_6-20070614-A, June 2007.
[OMA, 07b] OMA, OMA service environment, Approved Version 1.0.4, 01, OMA-
AD-Service-Environment-V1_0_4-20070201-A, February 2007.
[PAT 07] PATEL-SCHNEIDER P.F., HORROCKS I., “A comparison of two modelling
paradigms in the Semantic Web”, Web Semantic, vol. 5, no 4, pp. 240–250,
2007.
[PIN 08] PINHANEZ C., “Service systems as customer-intensive systems and its
implications for service science and engineering”, Proceedings of the 41st
Annual Hawaii International Conference on System Sciences, 7–10 January,
IEEE Computer Society, Washington, 2008.
[PRE 92] PRESSMAN R.S., Software Engineering: A Practitioners Approach,
3rd ed., McGraw-Hill, 1992.
[RAS 00] RASKIN J., The Humane Interface – New directions for Designing
Interactive Systems, ACM Press, Addison-Wesley, 2000.
[RIC 90] RICŒUR P., Soi-même comme un autre, Le Seuil, Paris, 1990.
[ROC 07] ROCHE C., “Saying is not modelling”, Natural Language Processing and
Cognitive Science (NLPCS 2007), ICEIS, Funchal, Portugal, pp. 47–56, June
2007.
[ROL 00] ROLLAND C., PRAKASH N., “From conceptual modelling to requirements
engineering”, Annals of Software Engineering, vol. 10, nos. 1–4, pp. 151–176,
2000.
[ROL 10] ROLLAND C., KIRSCH-PINHEIRO M., SOUVEYET C., “An intentional
approach to service engineering”, IEEE Transactions on Service Computing,
Special issue on Requirements Engineering for Services (REFS), IEEE,
October–December, vol. 3, no. 4, pp. 292–305, 2010.
[ROS 04] ROSANVALLON P., Le Modèle politique français, La société civile contre
le jacobinisme de 1789 à nos jours, Le Seuil, Paris, 2004.
[RUS 06] RUST R.T., MIU C., “What academic research tells us about service”,
Communications of the ACM, vol. 49, no. 7, pp. 49–54, July 2006.
[SAL 08] SALINESI C., THEVENET L.H., “Enterprise Architecture, des problèmes
pratiques à l'innovation”, Ingénierie des systèmes d'information, vol. 13,
pp. 75–105, 2008.
[SAS 98] SASSOON J., Urbanisation Des Systèmes D'information, Hermès, 1998.

260
Architecture and Governance for Communication Services
[SCH 06] SCHEKKERMAN J., How to Survive in the Jungle of Enterprise
Architecture Frameworks: Creating or Choosing an Enterprise Architecture
Framework, Trafford Publishing, 2003.
[SCH 08] SCHREINER F., BLUM N., JACAK P., WEIK P., MAGEDANZ T., “Towards
standardized NGN OSS mechanisms for automated service provisioning and
fault management for OSIMS-based NGNs”, Journal of Network and Systems
Management, vol. 16, no. 1, pp. 63–91, 2008.
[SEA 05] SEARLE J.R., “What is an institution?”, Journal of Institutional
Economics, vol. 1, pp. 1–22, 2005.
[SHA 06] SHAH D., RUST R.T., PARASURAMAN A., STAELIN R., DAY G.S., “The
path to customer centricity”, Journal of Service Research, vol. 9, no. 2, pp. 113–
124, 2006.
[SHI 08] SHIAA M., FALCARIN P., PASTOR A., LÉCUÉ F., SILVA E., PIRES LF.,
“Towards the automation of the service composition process: case study and
prototype implementations”, Proceedings of the ICT-Mobile Summit 2008,
10–12 June, Stockholm, Sweden, pp. 1–8, 2008.
[SIM 04] SIMONIN J., ALIZON F., “Démarche d'urbanisation métier de type
organisationnel”,
17th
International
Conference
Software
and
Systems
Engineering and their Applications, Paris, France, 2004.
[SIM 07a] SIMONI N., Des réseaux intelligents à la nouvelle génération de services,
Hermes-Lavoisier, Paris, February 2007.
[SIM 07b] SIMONIN J., LE TRAON Y., JÉZÉQUEL J.M., “An enterprise architecture
alignment measure for telecom service development”, Proceedings of the 11th
IEEE International EDOC Conference, Annapolis, pp. 476–483, 2007.
[SIM 08] SIMONIN J., ALIZON F., DESCHREVEL J.P., LE TRAON Y., JÉZÉQUEL J.M.,
NICOLAS B., “EA4UP: an enterprise architecture-assisted telecom service
development method”, Proceedings of the 12th IEEE International Enterprise
Distributed
Object
Computing
(EDOC)
Conference,
15–19
September,
München, Germany, pp. 279–285, 2008.
[SIM 09] SIMONIN J., Conception de l'architecture d'un système dirigée par un
modèle d'urbanisme fonctionnel, PhD Thesis, University of Rennes 1, January
2009.
[SPO 07] SPOHRER J., MAGLIO P., BAILEY J., GRUHL D., “Steps toward a science of
service systems”, IEEE Computer, vol. 40, no. 1, pp. 71–77, 2007.

Bibliography
261
[SPO 08] SPOHRER J., VARGO S.L., CASWELL N., MAGLIO P., “The service system
is the basic abstraction of service science”, Proceedings of the 41st Annual
Hawaii International Conference on System Sciences, 7–10 January, pp. 104–
104, 2008.
[TAR 07] TARKOMA S., BHARAT B., KOVACS E., VAN KRANENBURG H.,
POSTMANN E., SEIDL R., ZHDANOVA A., “SPICE: a service platform for future
Mobile IMS Services”, Proceedings of IEEE International Symposium on World
of Wireless, Mobile and Multimedia Networks (WoWMoM 2007), Helsinki,
Finland, June 2007.
[TIE 03] TIEN J.M., BERG D., “A case for service systems engineering”, Journal of
Systems Science and Systems Engineering, vol. 12, no. 1, pp.113–128, 2003.
[TIE 08] TIEN J.M., “Services: a systems perspective”, IEEE Systems Journal,
vol. 2, no. 1, pp. 146–157, 2008.
[TIS 06] TISPAN TR 181 004, NGN Generic capabilities and their use to develop
services, 2006.
[VAR 04] VARGO S.L., LUSCH R.F., “Evolving to a new dominant logic for
marketing”, Journal of Marketing, vol. 68, no. 1, pp. 1–17, 2004.
[VER 09] VERDOT V., BOUSSARD M., BOUCHÉ N., SHANMUGALINGAM S.,
FOURNIGAULT L., “The bridging of two worlds: a web-IMS communication
solution”, The 5th IASTED European Conference on Internet and Multimedia
Systems and Applications (EuroIMSA 2009), Cambridge, July 2009.
[VUD 03] VU DUONG T., FROMENTOUX G., LE ROUX J.L., “A global framework for
architecture analysis in telecommunications”, IEEE Global Telecommunications
Conference (GLOBECOM 2003), 1–5 December, pp. 2896–2902, 2003.
[WHI 91] WHITELEY R., The Customer-driven Company: Moving From Talk to
Action, Perseus Books, 1991.
[YEL 08] YELMO J.C., DEL ALAMO J.M., TRAPERO R., FALCARIN P., YU J.,
CARRO B., BALADRON C., “A user-centric service creation approach for next
generation networks”, Proceedings of ITU-T/IEEE Innovations in NGN Future
Network and Services Conference, Geneva, Switzerland, May 2008.
[ZAC 87] ZACHMAN J.A., “A Framework for information systems architecture”,
IBM Systems Journal, vol. 26, no. 3, pp. 276–292, 1987.
[ZAH 08] ZAHA J.M., DUMAS M., HOFSTEDE A.H.M., BARROS A., DECKER G.,
“Bridging
global
and
local
models
of
service-oriented
systems”,
IEEE
Transactions on Systems, Man, and Cybernetics – Part C: Applications and
Reviews, vol. 38, no. 3, pp. 302–318, 2008.

262
Architecture and Governance for Communication Services
[ZEI 85] ZEITHAML V., PARASURAMAN A., BERRY L.L., “Problems and strategies in
services marketing”, Journal of Marketing, vol. 49, pp. 33–46, 1985.
[ZEI 96] ZEITHAML V., BITNER M.J., Services Marketing, McGraw-Hill, New York,
NY, 1996.
[ZEI 06] ZEITHAML V., BITNER M.J., GREMLER D., Services Marketing: Integrating
Customer Focus Across the Firm, 4th ed., McGraw-Hill, New York, NY, 2006.
[ZEN 01] ZENG H., SON T.C., “Semantic Web Services”, IEEE Intelligent Systems,
vol. 16, no. 2, pp. 46–53, 2001.
[ZHI 07] ZHIXIONG J., LEQIU Q., XIN P., “A formal framework for description of
semantic Web services”, Proceedings of the 7th IEEE International Conference
on Computer and Information Technology, IEEE Computer Society, 16–19
October, Washington, pp. 1065–1070, 2007.

List of Figures and Tables
List of Figures
1.1. Separation of service and access . . . . . . . . . . . . . . . . . . . . . .
3
1.2. Architecture of service features . . . . . . . . . . . . . . . . . . . . . .
5
1.3. TINA-C session architecture . . . . . . . . . . . . . . . . . . . . . . . .
9
1.4. Typology of GII functions. . . . . . . . . . . . . . . . . . . . . . . . . .
10
1.5. Reference architecture in Web services . . . . . . . . . . . . . . . . .
17
1.6. Marketplace concept in the CELTIC Servery project . . . . . . . . .
21
1.7. Points of view in the 4 + 1 framework [KRU 95] . . . . . . . . . . .
27
1.8. eTom reference framework . . . . . . . . . . . . . . . . . . . . . . . . .
32
2.1. The principles of an NGN network . . . . . . . . . . . . . . . . . . . .
38
2.2. NGN architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
39
2.3. The transport layer of the NGN . . . . . . . . . . . . . . . . . . . . . .
40
2.4. Control layer of the NGN . . . . . . . . . . . . . . . . . . . . . . . . . .
41
2.5. General architecture of IMS. . . . . . . . . . . . . . . . . . . . . . . . .
43
2.6. Service triggering in IMS . . . . . . . . . . . . . . . . . . . . . . . . . .
46
2.7. Network convergence. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
48
2.8. Service convergence . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
49
2.9. Standardized approach to service production . . . . . . . . . . . . . .
55
2.10. Individualized approach to service production . . . . . . . . . . . .
56
2.11. Front-office/back-office approach to service production . . . . . .
57
2.12. Functional analysis approach . . . . . . . . . . . . . . . . . . . . . . .
60
2.13. Service as the provision of an immaterial asset . . . . . . . . . . . .
63
2.14. Service as system . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
63
2.15. IMS service environment. . . . . . . . . . . . . . . . . . . . . . . . . .
64
2.16. SOA service environment . . . . . . . . . . . . . . . . . . . . . . . . .
64

264
Architecture and Governance for Communication Services
2.17. Convergent service environments SOA + IMS . . . . . . . . . . . .
65
2.18. Seamless converged service environment . . . . . . . . . . . . . . .
65
2.19. Course of a telecom service . . . . . . . . . . . . . . . . . . . . . . . .
69
2.20. Technical functions and service functions for
telecoms services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
70
2.21. The four dimensions of a telecom service . . . . . . . . . . . . . . .
72
2.22. Method of describing the architecture of a telecoms service. . . .
73
3.1. Process of a postal service. . . . . . . . . . . . . . . . . . . . . . . . . .
87
3.2. Service processes and entities. . . . . . . . . . . . . . . . . . . . . . . .
89
3.3. Relationships between service entities . . . . . . . . . . . . . . . . . .
89
3.4. Division and breakdown into layers. . . . . . . . . . . . . . . . . . . .
104
4.1. Meta-model of the business reference view . . . . . . . . . . . . . . .
108
4.2. Process of making and receiving calls . . . . . . . . . . . . . . . . . .
110
4.3. Relationships between service entities in telephony. . . . . . . . . .
111
4.4. Process of sending and reading messages . . . . . . . . . . . . . . . .
112
4.5. Relationships between messaging service entities . . . . . . . . . . .
113
4.6. Process of selecting and playing media. . . . . . . . . . . . . . . . . .
114
4.7. Relationships between audiovisual service entities . . . . . . . . . .
114
4.8. Process of accessing a service . . . . . . . . . . . . . . . . . . . . . . .
115
4.9. Relationships between service access entities. . . . . . . . . . . . . .
115
4.10. The concept of a functional pattern . . . . . . . . . . . . . . . . . . .
116
4.11. Functional pattern of communication . . . . . . . . . . . . . . . . . .
117
4.12. Functional pattern of diffusion . . . . . . . . . . . . . . . . . . . . . .
118
4.13. Functional pattern of configuration . . . . . . . . . . . . . . . . . . .
118
4.14. The ideas of SEF, SFO and SFD . . . . . . . . . . . . . . . . . . . . .
119
4.15. Meta-model of the functional reference view . . . . . . . . . . . . .
121
4.16. Link between functional reference view and business
reference view . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
123
4.17. Link with functional patterns . . . . . . . . . . . . . . . . . . . . . . .
124
4.18. Modification of a service process . . . . . . . . . . . . . . . . . . . .
125
4.19. Construction of a functional operation and of the
produced functional data. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
126
4.20. Construction of the functional data used . . . . . . . . . . . . . . . .
127
4.21. Improvement of the process of selecting and playing
media content. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
129
4.22. Operations offered by SFC Phone call . . . . . . . . . . . . . . . . .
137
4.23. Operations offered by SFC Message . . . . . . . . . . . . . . . . . .
138
4.24. Operations offered by SFC content . . . . . . . . . . . . . . . . . . .
139
4.25. Communication quarter setup . . . . . . . . . . . . . . . . . . . . . . .
143

List of Figures and Tables
265
4.26. Address book quarter . . . . . . . . . . . . . . . . . . . . . . . . . . . .
143
4.27. Meta-model of the technical reference view. . . . . . . . . . . . . .
144
4.28. IMS technical pattern . . . . . . . . . . . . . . . . . . . . . . . . . . . .
145
4.29. SOA technical pattern. . . . . . . . . . . . . . . . . . . . . . . . . . . .
147
4.30. Three-tier technical pattern . . . . . . . . . . . . . . . . . . . . . . . .
149
4.31. Email technical pattern . . . . . . . . . . . . . . . . . . . . . . . . . . .
150
4.32. Email technical pattern according to IETF. . . . . . . . . . . . . . .
152
4.33. SMS technical pattern. . . . . . . . . . . . . . . . . . . . . . . . . . . .
153
4.34. OMA XDM technical pattern . . . . . . . . . . . . . . . . . . . . . . .
154
4.35. IPTV technical pattern . . . . . . . . . . . . . . . . . . . . . . . . . . .
155
4.36. HMI technical pattern. . . . . . . . . . . . . . . . . . . . . . . . . . . .
157
4.37. Use case of an address book service. . . . . . . . . . . . . . . . . . .
159
4.38. Functional sequence of the contact management scenario . . . . .
162
4.39. Functional sequence of the address book
consultation scenario . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
162
4.40. Meta-model of the functional view of a service. . . . . . . . . . . .
163
4.41. Dependencies between functional components of an
address book service . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
164
4.42. Telephony service use case . . . . . . . . . . . . . . . . . . . . . . . .
165
4.43. Functional sequence of the (simplified) telephone call
scenario . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
166
4.44. Functional sequence of the telephone call scenario
(complete). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
168
4.45. Video service use case . . . . . . . . . . . . . . . . . . . . . . . . . . .
168
4.46. Functional sequence of the video consumption
scenario (simplified) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
169
4.47. Functional sequence of the video consumption
scenario (complete) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
170
4.48. Email messaging service use case . . . . . . . . . . . . . . . . . . . .
170
4.49. Functional sequence of the email consultation
scenario (simplified) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
171
4.50. Functional sequence of the email consultation
scenario (complete) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
172
4.51. Functional sequence of the VideoMe scenario
(simplified) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
173
4.52. Functional sequence of the VideoMe scenario
(complete). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
174
4.53. Meta-model of the technical view of a service . . . . . . . . . . . .
177
4.54. Technical view of an address book service . . . . . . . . . . . . . .
178
4.55. Technical view of a telephony service . . . . . . . . . . . . . . . . .
180
4.56. Technical view of a video service . . . . . . . . . . . . . . . . . . . .
181

266
Architecture and Governance for Communication Services
4.57. Technical view of an email messaging service . . . . . . . . . . . .
183
4.58. Technical view of the VideoMe service . . . . . . . . . . . . . . . .
185
4.59. Meta-model of the applicative view of a service . . . . . . . . . . .
192
4.60. Applicative view of an address book service . . . . . . . . . . . . .
194
4.61. Example of the applicative implementation of SFO
issue phone call . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
196
4.62. Applicative view of a telephony service . . . . . . . . . . . . . . . .
198
4.63. Applicative sequence of the telephone call scenario. . . . . . . . .
199
4.64. Example of the applicative implementation of the
SFO browse content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
200
4.65. Applicative view of a video service . . . . . . . . . . . . . . . . . . .
201
4.66. Applicative sequence of the video consumption scenario . . . . .
202
4.67. Example of the applicative implementation of the
SFO browse message. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
203
4.68. Applicative view of a messaging service . . . . . . . . . . . . . . . .
204
4.69. Applicative sequence of the email consultation scenario . . . . . .
205
4.70. Applicative view of the VideoMe service . . . . . . . . . . . . . . .
208
5.1. SOA + IMS converged service environment . . . . . . . . . . . . . .
224
5.2. Technical view of an SOA + IMS converged
service environment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
225
5.3. Seamless converged service environment . . . . . . . . . . . . . . . .
226
5.4. Technical view of a seamless converged service
environment (provisional). . . . . . . . . . . . . . . . . . . . . . . . . . . . .
227
5.5. Technical view of a seamless converged service
environment (final) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
227
5.6. Example of access interface together with services . . . . . . . . . .
229
5.7. Widgets and elementary functions. . . . . . . . . . . . . . . . . . . . .
231
5.8. Service construction and composition widget. . . . . . . . . . . . . .
232
5.9. Result of a service composition . . . . . . . . . . . . . . . . . . . . . .
233
2.22 (repeat). Method of describing the architecture of a
telecoms service . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
240
List of Tables
1.1. Points of view in the 4 + 1 framework . . . . . . . . . . . . . . . . . .
28
2.1. Share by sector in overall employment in developed
economies. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
52

List of Figures and Tables
267
3.1. List of generic functional operations (GFO). . . . . . . . . . . . . . .
95
4.1. List of SFO corresponding to the preceding service
processes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
128
4.2. Description of SFO and SFD obtained from the preceding
service processes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
130
4.3. Functional data used by each SFO. . . . . . . . . . . . . . . . . . . . .
135
4.4. Elementary functions corresponding to each SFO . . . . . . . . . . .
136
4.5. Grouping into functional quarters and zones . . . . . . . . . . . . . .
139
4.6. Technical roles of the IMS technical pattern . . . . . . . . . . . . . .
145
4.7. Usual protocols of the IMS technical pattern . . . . . . . . . . . . . .
146
4.8. Technical roles of the SOA technical pattern . . . . . . . . . . . . . .
147
4.9. Usual protocols of the SOA technical pattern. . . . . . . . . . . . . .
148
4.10. Technical roles of the three-tier technical pattern . . . . . . . . . .
148
4.11. Usual protocols of the three-tier technical pattern . . . . . . . . . .
149
4.12. Technical roles of the email technical pattern . . . . . . . . . . . . .
150
4.13. Usual protocols of the email technical pattern . . . . . . . . . . . .
151
4.14. Technical roles of the SMS technical pattern . . . . . . . . . . . . .
153
4.15. Usual protocols of the SMS technical pattern . . . . . . . . . . . . .
154
4.16. Technical roles of the OMA XDM technical pattern . . . . . . . .
154
4.17. Usual protocols of the OMA XDM technical pattern . . . . . . . .
155
4.18. Technical roles of the IPTV technical pattern . . . . . . . . . . . . .
155
4.19. Usual protocols of the IPTV technical pattern . . . . . . . . . . . .
156
4.20. Execution nodes of a telephony service. . . . . . . . . . . . . . . . .
179
4.21. Reference points of a telephony service . . . . . . . . . . . . . . . .
180
4.22. Execution nodes of a video service . . . . . . . . . . . . . . . . . . .
182
4.23. Reference points of a video service . . . . . . . . . . . . . . . . . . .
182
4.24. Execution nodes of an email messaging service . . . . . . . . . . .
183
4.25. Reference points of an email messaging service . . . . . . . . . . .
184
4.26. Applicative functional link for a telephony service . . . . . . . . .
195
4.27. Applicative technical link for a telephony service . . . . . . . . . .
197
4.28. Applicative functional link for a video service . . . . . . . . . . . .
198
4.29. Applicative technical link for a video service . . . . . . . . . . . . .
200
4.30. Applicative functional link for an email messaging service . . . .
202

268
Architecture and Governance for Communication Services
4.31. Applicative technical link for a messaging service. . . . . . . . . .
203
4.32. Applicative functional link for the VideoMe service . . . . . . . .
206
4.33. Applicative technical link for the VideoMe service . . . . . . . . .
207
5.1. Metric of complexity of use. . . . . . . . . . . . . . . . . . . . . . . . .
214
5.2. Metric of complexity of development. . . . . . . . . . . . . . . . . . .
215
5.3. Metric of innovation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
215
5.4. Metric of complexity of integration . . . . . . . . . . . . . . . . . . . .
216
5.5. Functional areas and TISPAN service capabilities. . . . . . . . . . .
220
5.6. Parlay X Web services and functional operations . . . . . . . . . . .
221

Index
3-tiers architectures, 148
3GPP, 11
A
Action capability, 71, 92, 98, 161
Activity, 78–84
Address book, 110
Aggregator, 228
Android, 234, 236
API, 13, 221
Applicative view, 185–187
Architecture view, 213
AS, 42, 146, 179, 181, 195,
197, 228
Assurance, 14, 58, 217
B
Billing, 10, 31, 58, 216, 241
BPEL, 24
BPML, 24
Business entity, 88
Business process, 24, 30, 33, 85, 86,
91, 172
Business strategy, 25, 98
Business view, 71, 75, 78–84, 120,
122, 127, 138, 142, 212
C, D
CAMEL, 5, 36, 44, 46
Client, 58–61
Communication pattern, 95, 129,
137, 138
Configuration pattern, 95
Consumer, 58–61
CSCF, 146
Customer-centricity, 52, 53
Diffusion pattern, 95, 137, 138
DoDAF, 29
E
EA, 28
Elementary function, 92–94, 96
Email, 12, 48, 49, 67–69, 92, 144,
150, 151, 152, 170
Enabler, 11–15
Enterprise architecture, 28–33
eTOM, 31
ETSI, 5, 218
F
FAST, 59
Filter Criteria, 45–46
Front-office/back-office, 57–58

270
Architecture and Governance for Communication Services
Fulfillment, 4, 12, 15, 31, 38, 58, 69,
194, 216, 238, 241
Functional analysis, 59–60, 66, 67,
69–71, 91, 92, 100, 109
Functional block, 91, 120, 127
Functional data, 93, 105, 121, 123,
125, 127, 134–135, 160,
190, 191
Functional pattern, 116, 118, 120,
125, 137
Functional view, 157–175
Functional zone, 139
G, H
GFD, 116
GFO, 95–96
GII, 9
GSM, 5
GUI, 144
HSS, 42
I
I-CSCF, 43
IETF, 36
iFC, 44
IMS, 36
IMS architecture, 144–146
IN, 2
INAP, 3
INCM, 3
Information system, 23, 30, 31, 71,
75, 83, 88, 91, 194, 238
Intention, 78, 81, 83, 84, 102
Intrinsic functions, 14
Invariants, 30, 31, 33, 66, 71, 75, 77,
104, 105, 213
IPTV, 155–156
IS, 23
ISC, 44
IT, 23
ITIL, 29
ITU-T, 9
L, M
Local Plan, 30
Marketing, 1, 54, 55, 61, 89, 90, 91,
98, 165, 169, 211, 212, 217, 238
Marketplace, 20, 21
Messaging, 111–112
Metadata, 18, 19, 21
Metrics, 163, 213, 238
MRF, 44
N
Natural language, 20, 222, 231, 232,
233, 237
Network convergence, 48
NGN, 3
NGN architecture, 39, 40
NGN services, 39, 40, 47
O, P
OMA, 11
Ontology, 19
OSA, 13
OWL, 18
OWL-S, 19
P-CSCF, 43
Parlay, 13, 26, 40, 50, 221
Ports, 188
Project team, 96
PSTN, 2
R
RCS, 49
RDF, 18
Reference business view, 72, 78–91,
108–115
Reference functional view, 215

Index
271
Reference point, 142
Reference semantic, 77, 78, 159
Reference technical view, 144–157
Reference views, 72, 73, 107, 213
REST, 221
RP, 105, 142
RTP, 36
S
S-CSCF, 43
SAC, 187
SADT, 59
SAO, 190
SAWSDL, 19
SCIM, 47
SDL, 5
SEF, 92
Semantic annotation, 21
Semantic Web, 17–23
Semantic Web services, 222
Service applicative view, 212
Service architecture, 1–33
Service capability, 47, 50, 51
Service composition, 6, 20, 47, 50,
231, 233
Service convergence, 48–50
Service design, 211–212
Service entity, 88
Service functional view, 191
Service interactions, 6
Service process, 63, 85
Service provider, 17, 21, 176
Service Science, 61
Service sector, 35, 51–63, 85
Service stakeholders, 237
Service system, 61–63
Service technical view, 75
SFC, 120
SFD, 105, 118
SFO, 105, 118
SIB, 7
Silo, 48
SIP, 38
SMS, 94, 151–154
SOA, 9
Software architecture, 100, 101, 187,
188
SSME, 61
SWS, 222
T
Technical role, 142
Technical view, 71, 99–102,
175–185
Telecom services, 78–91, 96–104
Telephony, 40
TINA-C, 8
TMF, 31
TOGAF, 29
TR, 105, 142
U
UDDI, 17
Unified service environnement, 49,
51, 63, 74, 234–236
Urbanism, 29
Urbanization, 28–33, 73, 75, 77, 83
URI, 16
Use case, 158–159, 164–165,
167–168, 170
User Generated Services, 69
User-centric, 33, 49, 158
UTRAN, 37
V, W, X
Value analysis, 58
VideoMe, 172–175, 184–185,
207, 208
VOD, 70

272
Architecture and Governance for Communication Services
W3C, 16
Web, 6
Web service, 16
WebRTC, 228
Widget, 228
WSDL, 16, 17, 19
WSMF, 222
XDM, 144

