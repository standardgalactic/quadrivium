Категориальная 
абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
 
 
 
Комментарий к слайду  
 
В данной лекции будут рассмотрены вопросы, относящиеся к технике построения и 
выразительным возможностям такой формализации языков программирования как 
категориальной абстрактной машины.  
 

Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Содержание лекции
1.
Процедура трансляции функциональной программы в 
КАМ-код
2.
Кодирование ламбда-термов  по де Брейну
3.
Трансляция кода де Брейна в термы категориальной 
комбинаторной логики
4.
Синтаксис и семантика языка инструкций КАМ
5.
Цикл работы КАМ
6.
Сравнение КАМ с виртуальной машиной в .NET
7.
Библиография
 
 
 
Комментарий к слайду  
 
В ходе лекции будет рассмотрена формализация процедуры преобразования текста 
программы на языке функционального программирования в код категориальной 
абстрактной машины. При этом фактически будет предпринята попытка моделирования 
процедуры работы транслятора для того или иного языка программирования.   
 
Схема процедуры трансляции является многоэтапной и включает следующие стадии: 
1) преобразование текста программы на языке функционального программирования в 
выражение ламбда-исчисления; 
2) преобразование полученного выражения ламбда-исчисления в так называемый 
(промежуточный) код де Брейна (de Brujin); 
3) преобразование 
полученного 
кода 
де 
Брейна 
в 
терм 
категориальной 
комбинаторной логики; 
4) преобразование полученного терма категориальной комбинаторной логики в 
последовательность инструкций категориальной абстрактной машины; 
5) выполнение результирующей последовательности инструкций категориальной 
абстрактной машины с означиванием в среде вычислений. 
 
При 
этом 
существенное 
внимание 
будет 
уделено 
анализу 
синтаксических 
и 
семантических особенностей инструкций категориальной абстрактной машины. 
 
Формальное исследование логики и процедуры смены состояний (или, иначе, цикла 
работы) категориальной абстрактной машины позволит провести сравнительный анализ 
возможностей КАМ и виртуальной машины, применяемой в технологической платформе 
.NET. 
 
Лекция завершится обзором литературы для более глубокого исследования материала. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Постановка задачи
Требуется построить вариант комбинаторной логики для 
моделирования семантики вычислений на языке 
программирования с помощью функции вычисления 
значения. 
При этом существенно используются:
1)
условия для декартово замкнутых категорий (д.з.к.);
2)
характеристические равенства, определяющие поведение 
операторов, задающих денотационную семантику языка 
функционального программирования.
 
 
 
Комментарий к слайду  
 
Исходя из представленных тем для обсуждения, произведем детализацию постановки 
задачи. 
 
Итак, требуется построить вариант формальной системы комбинаторной логики для 
моделирования семантики вычислений.  
 
Под вычислениями будем понимать трансляцию конструкций, которые заданы на языке 
программирования, 
в 
код 
категориальной 
абстрактной 
машины 
(возможно, 
с 
использованием некоторого промежуточного кода) с последующим означиванием 
результирующего кода в той или иной среде.  
 
Означивание кода категориальной абстрактной машины производится с помощью 
функции вычисления значения.  
 
При 
такой 
постановке 
задачи 
необходимо 
принять 
во 
внимание 
ряд 
ранее 
сформулированных условий, в частности: 
1) условия, необходимые для построения формальной системы декартово замкнутых 
категорий (или, сокращенно, д.з.к.), рассмотренные нами в ходе предыдущей 
лекции; 
2) характеристические равенства, которые определяют поведение операторов, 
задающих денотационную семантику языка функционального программирования,  
в том числе и инструкций категориальной абстрактной машины. 
 
 
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Условия для категорий
Состояния КАМ должны принадлежать пространству 
д.з.к., т.е. должны выполняться условия:
1)
определена функция тождества; 
2)
определена операция композиции;
3)
определена операция образования упорядоченной пары 
объектов <•,•>;
4)
определена операция взятия первого элемента пары;
5)
определена операция взятия второго элемента пары;
6)
определена операция преобразования терма из 
алгебраической формы в аппликативную;
7)
определена операция применения функции к аргументу.
 
 
 
Комментарий к слайду  
 
Напомним условия, необходимые для построения формальной системы декартово 
замкнутых категорий (или, сокращенно, д.з.к.), рассмотренные нами в ходе предыдущей 
лекции.  
 
Формальная система с декартово замкнутыми категориями должна удовлетворять 
следующим условиям: 
 
1) определена функция тождества, или тождественное преобразование (имеющее в 
комбинаторной логике аналог в форме комбинатора тождества I); 
 
2) определена операция композиции или построения сложной функции (имеющая в 
комбинаторной логике аналог в форме комбинатора тождества B); 
 
3) определена операция образования упорядоченной пары объектов <·,·>; 
 
4) определена операция взятия первого элемента из упорядоченной пары объектов; 
 
5) определена операция взятия второго элемента из упорядоченной пары объектов;  
 
6) определена операция преобразования терма из алгебраической формы в 
аппликативную; 
 
7) определена операция аппликации или применения функции к аргументу. 
 
Заметим, что выполнение перечисленных условий необходимо для того, чтобы обеспечить 
принадлежность состояний категориальной абстрактной машины пространству декартово 
замкнутых категорий. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Характеристические равенства
Напомним перечень характеристических равенств для 
инструкций КАМ:
(ass)
(x o y) z = x (y z);
(fst)
Fst [x, y] = x;
(snd)
Snd [x, y] = y;
(dpair)
<x, y> z = [x z, y z];
(ac)
ε [Λ (x) y, z] = x [y, z];
(quote)
(‘ x) y = x, 
где (ass) устанавливает связь аппликации и композиции, 
(dpair) – спаривания и формирования совокупности.
 
 
 
Комментарий к слайду  
 
Напомним характеристические равенства, которые определяют поведение операторов, 
задающих синтаксис и семантику языка инструкций категориальной абстрактной 
машины: 
 
(ass) 
 
(x o y) z = x (y z); 
 
(fst) 
 
Fst [x, y] = x;  
 
(snd)  
Snd [x, y] = y;  
 
(dpair)  
<x, y> z = [x z, y z];   
 
(ac) 
 
ε [Λ (x) y, z] = x [y, z];  
 
 
(quote)  
(‘ x) y = x. 
 
Заметим, что соотношение (ass) устанавливает связь аппликации и композиции, 
соотношения (fst) и (snd) – первой и второй проекций для операции образования 
упорядоченной пары, соотношение (dpair) – спаривания и формирования совокупности, 
соотношение (ac) – каррирования и апплицирования, а (quote)  – цитирования.  
 
Заметим также, что данный перечень характеристических соотношений категориальной 
комбинаторной логики является базисным и получен с учетом устранения избыточных 
комбинаторов из рассматриваемой формальной системы.  
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Порядок трансляции в КАМ-код
При трансляции в КАМ-код исходные программы 
подвергаются следующей последовательности 
преобразований: 
1)
программа на функциональном языке (например, SML);
2)
ламбда-терм как формализация программы;
3)
код де Брейна (de Brujin) для ликвидации коллизий 
обозначений;
4)
терм ККЛ;
5)
КАМ-код (программа на языке инструкций КАМ).
Затем происходит выполнение КАМ-кода с учетом среды 
вычислений.
 
 
 
Комментарий к слайду  
 
 
Завершив этап предварительной подготовки необходимого набора соотношений, 
перейдем непосредственно к реализации поставленной задачи формализации процедуры 
трансляции функциональной программы. 
 
Схема 
процедуры 
трансляции 
текста 
программы 
на 
языке 
функционального 
программирования  в результирующую последовательность инструкций категориальной 
абстрактной машины  является многоэтапной и включает следующие стадии: 
1) преобразование 
текста 
программы 
на 
языке 
функционального 
программирования в соответствующее выражение ламбда-исчисления; 
2) преобразование полученного выражения ламбда-исчисления в так называемый 
(промежуточный) код де Брейна (de Brujin); 
3) преобразование полученного кода де Брейна в терм категориальной 
комбинаторной логики; 
4) преобразование полученного терма категориальной комбинаторной логики в 
последовательность инструкций категориальной абстрактной машины; 
5) выполнение результирующей последовательности инструкций категориальной 
абстрактной машины с означиванием в среде вычислений. 
 
Подчеркнем, что собственно последовательность инструкций категориальной абстрактной 
машины (или, в сокращенной терминологии, КАМ-код) еще не является конечной целью 
нашего исследования. 
 
Итогом 
процедуры 
трансляции 
является 
выполнение 
результирующей 
последовательности инструкций категориальной абстрактной машины с означиванием в 
зависимости от существующей среды вычислений. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Код де Брейна
Числом де Брейна называется глубина связывания 
переменной (количество ламбда-абстракций до 
переменной) без единицы.
При трансляции в код де Брейна:
•
числа де Брейна соответствует комбинаторам n;
•
комбинатор S соответствует аппликации;
•
комбинатор Λ = λx.(λz.x[y,z]) соответствует абстракции;
•
комбинатор ‘ = K = λx.(λy.x) соответствует цитированию.
Пример кодирования: λx.λy.((+x)y) →Λ(Λ(S(S(‘+1),0))).
 
 
Комментарий к слайду  
 
Первый этап процедуры трансляции, а именно, преобразование текста программы на 
языке функционального программирования в соответствующее выражение ламбда-
исчисления, был достаточно подробно рассмотрен нами ранее, в ходе изучения 
синтаксиса языка программирования SML в сопоставлении с синтаксисом ламбда-
исчисления. 
 
Рассмотрим более подробно второй этап процедуры трансляции, который состоит в 
преобразовании 
полученного 
выражения 
ламбда-исчисления 
в 
так 
называемый 
(промежуточный) код де Брейна, названный так по имени своего создателя. Смысл 
перехода к коду де Брейна состоит в большей унификации записи и ликвидации коллизии 
обозначений переменных в ламбда-термах. 
 
Числом де Брейна называется глубина связывания переменной (которое понимается как 
количество ламбда-абстракций, находящихся в ламбда-терме до данной переменной) без 
единицы. 
 
При трансляции текста программы на языке функционального программирования в код 
де Брейна производятся следующие преобразования: 
1) числа де Брейна, замещающие переменные ламбда-термов, заменяются на 
соответствующие комбинаторы n, рассмотренные в ходе предыдущей лекции; 
2) операция аппликации заменяется на комбинатор S; 
3) операция абстракции заменяется на комбинатор Λ = λx. (λz. x [y, z]); 
4) операция цитирования (в случае наличия в ламбда-терме констант) заменяется на 
комбинатор цитирования ‘ = K = λx. (λy. x). 
 
Проиллюстрируем кодирование ламбда-терма по де Брейну следующим примером. Пусть 
требуется закодировать ламбда-терм следующего вида: λx. λy. ((+x) y).  
 
В результате получаем код де Брейна следующего вида: Λ (Λ ( S ( S (‘ +1), 0 ))). 

Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Среда вычислений
Среда вычислений при кодировании по де Брейну
понимается как конечное упорядоченное множество пар 
вида (<переменная>, <значение>).
При трансляции ламбда-терма в код де Брейна - пару 
вида (<терм де Брейна>, <среда>) согласно равенствам 
0![x,y] = y;
(n+1)![x,y] = n! x;
S[x,y]z = xz(yz);
Λ (x) yz = x[y,z];
среда вырождается в пустую и обозначается как “( )”, а 
значения переменных явно присутствуют в коде.
 
 
 
Комментарий к слайду  
 
В наших рассуждениях неоднократно использовалось понятие среды вычислений. Среда 
имеет важнейшее значение в теории и практике языков программирования, поскольку она 
определяет условия для выполнения той или иной программы в зависимости от 
характеристик компьютера, операционной системы, транслятора и другого окружения 
программы, в котором последняя функционирует. Из истории языков программирования 
естественным образом следует, что в ходе эволюции программных систем среда 
изменялась в сторону повышения адаптивности и универсальности. Пожалуй, апогеем 
развития современных вычислительных сред является исследуемая нами технологическая 
платформа Microsoft .NET. 
 
Формализуем понятие среды вычислений применительно к категориальной абстрактной 
машине. 
 
При кодировании ламбда-выражений по де Брейну среда вычислений понимается как 
конечное упорядоченное множество пар вида (<переменная>, <значение>). 
 
При трансляции ламбда-терма в код де Брейна, который представляет собой пару вида 
(<терм де Брейна>, <среда>) в соответствии с характеристическими равенствами  
 
 
0! [x, y] = y; 
 
(n+1)! [x, y] = n! x; 
 
S [x, y] z = x z (y z); 
 
Λ (x) y z = x [y, z]; 
 
среда вырождается в пустую и обозначается как “( )”, а значения переменных явным 
образом присутствуют в результирующем коде. 
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Трансляция в термы ККЛ
Переход от кода де Брейна к терму ККЛ выполняется на 
основе характеристических равенств:
(ass)
(x o y) z = x (y z);
(fst)
Fst [x, y] = x;
(snd)
Snd [x, y] = y;
(dpair)
<x, y> z = [x z, y z];
(ac)
ε [Λ (x) y, z] = x [y, z];
(quote)
(‘ x) y = x.
При этом список «инструкций» ККЛ имеет вид:
< ,  >  Fst  Snd  ‘ Λ ε
 
 
 
Комментарий к слайду  
 
Рассмотрим следующий этап процедуры трансляции, который состоит в преобразовании 
полученного кода де Брейна в выражение категориальной комбинаторной логики.  
 
Переход от кода де Брейна к терму категориальной комбинаторной логики выполняется 
на основе известных характеристических равенств: 
 
(ass) 
 
(x o y) z = x (y z); 
 
(fst) 
 
Fst [x, y] = x;  
 
(snd)  
Snd [x, y] = y;  
 
(dpair)  
<x, y> z = [x z, y z];   
 
(ac) 
 
ε [Λ (x) y, z] = x [y, z];  
 
 
(quote)  
(‘ x) y = x. 
 
Таким образом, в результате данного этапа трансляции получается «программа» в форме 
выражения 
категориальной 
комбинаторной 
логики, 
вполне 
аналогичном 
языку 
программирования.  
 
При 
этом 
список 
«инструкций» 
«языка 
программирования» 
категориальной 
комбинаторной логики имеет следующий вид («команды» разделены пробелами и 
указаны без двойных кавычек): 
 
 
< ,  >  Fst  Snd  ‘ Λ ε. 
 
 

Трансляция в КАМ-код
Переход от инструкций ККЛ к КАМ-коду выполняется 
согласно следующей схеме:
№
ККЛ
КАМ
Пояснение
1.
Fst
car
Голова списка (первый элемент пары)
2.
Snd
cdr
Хвост списка (второй элемент пары)
3.
<
push
Помещение терма на вершину стека
4.
,
swap
Обмен значений терма и вершины стека
5.
>
cons
Вершина стека - в голову терма
6.
ε
app
Аппликация
7.
Λ
cur
Каррирование
8.
‘
quote Цитирование 
Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
 
 
 
Комментарий к слайду  
 
Рассмотрим следующий этап процедуры трансляции, который состоит в преобразовании 
полученного выражения категориальной комбинаторной логики в «инструкции» «языка 
программирования» категориальной абстрактной машины. 
 
Отображение выражений категориальной комбинаторной логики в соответствующие 
«инструкции» категориальной абстрактной машины удобно представить в форме 
следующей таблицы: 
 
№ 
п/п 
Терм 
ККЛ 
Инструкция 
КАМ 
Пояснение 
1 
Fst 
car 
Голова списка (взятие первого элемента упорядоченной пары) 
2 
Snd 
cdr 
Хвост списка (взятие второго элемента упорядоченной пары) 
3 
< 
push 
Значение терма помещается на вершину стека 
4 
, 
swap 
Значения терма и вершины стека меняются местами 
5 
> 
cons 
Вершина 
стека 
помещается 
в 
голову 
терма; 
стек 
«проталкивается» 
6 
ε 
app 
Аппликация 
7 
Λ 
cur 
Каррирование 
8 
‘ 
quote 
Цитирование 
 
 
 

 
Логика работы КАМ
Исходный терм языка программирования компилируется 
в ламбда-терм, код де Брейна, ККЛ и затем в КАМ-код.
Каждая инструкция изменяет состояние КАМ, которое 
определяется значениями тройки {T, C, S}, где
№
Код
Обозн. 
Пояснение
1.
T
Терм
Среда вычислений (первоначально пуста)
2.
C
Код
«Программа» на «языке» КАМ
3.
S
Стек
Модель оперативной памяти компьютера
Таким образом, процесс работы КАМ сводится к смене
состояний вида: {T, C, S} →{T’, C’, S’}. 
Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
 
 
Комментарий к слайду  
 
Напомним, 
что 
схема 
процедуры 
трансляции 
текста 
программы 
на 
языке 
функционального программирования  в результирующую последовательность инструкций 
категориальной абстрактной машины  является многоэтапной и включает следующие 
стадии: 
1) преобразование 
текста 
программы 
на 
языке 
функционального 
программирования в соответствующее выражение ламбда-исчисления; 
2) преобразование полученного выражения ламбда-исчисления в код де Брейна; 
3) преобразование полученного кода де Брейна в терм категориальной 
комбинаторной логики; 
4) преобразование полученного терма категориальной комбинаторной логики в 
последовательность инструкций категориальной абстрактной машины; 
5) выполнение результирующей последовательности инструкций категориальной 
абстрактной машины с означиванием в среде вычислений. 
 
При этом каждая инструкция категориальной абстрактной машины изменяет состояние 
КАМ, которое определяется значениями тройки {T, C, S}. Смысл состояния КАМ удобно 
представить в форме следующей таблицы: 
 
№ 
п/п 
Код элемента 
состояния КАМ 
Обозначение элемента 
 состояния КАМ 
Пояснение 
1 
T 
Терм 
Среда вычислений (первоначально 
пуста) 
2 
C 
Код 
«Программа» на «языке» КАМ 
3 
S 
Стек 
Модель 
оперативной 
памяти 
компьютера 
 
Таким образом, процесс работы КАМ сводится к смене состояний вида:  
{T, C, S} → {T’, C’, S’}.  
 

Цикл работы КАМ
Циклом работы КАМ назовем множество всевозможных 
изменений (динамики) ее состояний (см. таблицу):
T
C
S
|
T’
C’
S’
t
push.C
S
|
t
C
t.S
t
swap.C
s.S
|
s
C
t.S
t
cons.C
s.S
|
[s,t]
C
S 
S
(cur C).C1
S
|
C:s
C
S 
S
(quote c).C
S
|
c
C
S 
[s,t]
car.C
S
|
s
C
S 
[s,t]
cdr.C
S
|
t
C
S
[C:s,t]
app.C1
S
|
[s,t] 
C@C1
S
Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
 
 
 
Комментарий к слайду  
 
Для завершения описания процедуры функционирования категориальной абстрактной 
машины осталось описать динамику состояний КАМ. 
 
Циклом работы КАМ назовем множество всевозможных изменений (динамики) ее 
состояний. 
 
Цикл работы КАМ удобно представить в форме следующей таблицы: 
 
Старое состояние КАМ 
Новое состояние КАМ 
Терм 
Код 
Стек 
Терм 
Код 
Стек 
t 
push.C 
S 
t 
C 
t.S 
t 
swap.C 
s.S 
s 
C 
t.S 
t 
cons.C 
s.S 
[s, t] 
C 
S 
S 
(cur C).C1 
S 
C:s 
C 
S 
S 
(quote c).C 
S 
c 
C 
S 
[s, t] 
car.C 
S 
s 
C 
S 
[s,t] 
cdr.C 
S 
t 
C 
S 
[C:s, t] 
app.C1 
S 
[s, t] 
C@C1 
S 
 
Поскольку в данной таблице рассмотрены все возможные инструкции категориальной 
абстрактной машины, можно сделать вывод о том, что формализация проведена в полном 
объеме. 
 
 
 
 
 
 

Развернутый пример вычислений на КАМ (1)
Пример. 
Вычислить на КАМ значение суммы целых чисел 1 и 2 в 
каррированной форме:
val curry= fn f =>fn x => fn y => f(x,y);
fun sum a b = a + b;
(curry sum) 1 2;
Решение.
1. Результат трансляции программы в ламбда-терм:
(λx. x 1 ((λx. x ) 2)) +.
Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
 
 
 
Комментарий к слайду  
 
Проиллюстрируем процедуру трансляции программы на языке функционального 
программирования в последовательность инструкций категориальной абстрактной 
машины с последующим вычислением результирующего значения в среде следующим 
показательным примером. 
 
Рассмотрим текст следующей программы на языке функционального программирования 
SML: 
 
val curry= fn f =>fn x => fn y => f(x,y); 
fun sum a b = a + b; 
(curry sum) 1 2; 
 
Заметим, что данная программа на языке SML реализует функцию вычисления значения 
суммы целых чисел 1 и 2, представленную в каррированной форме. 
 
Рассмотрим поэтапно процедуру трансляции программы на языке функционального 
программирования в последовательность инструкций категориальной абстрактной 
машины с последующим вычислением результирующего значения в среде. 
 
На первом этапе процедуры трансляции произведем преобразование текста программы на 
языке функционального программирования в соответствующее выражение ламбда-
исчисления. 
 
В результате получим: (λx. x 1 ((λx. x ) 2)) +. 
 
 
 
 
 

Развернутый пример вычислений на КАМ (2)
2. Результат трансляции ламбда-терма в код де Брейна:
(λ.0 1 ((λ.0) 2) +.
3. Результат трансляции кода де Брейна в терм ККЛ:
< Λ (< < Snd, ‘1> ε, < Λ (Snd), ‘2 > ε > ε) , ‘+> ε.
4. Результат трансляции терма ККЛ в КАМ-код:
push cur (push push cdr swap quote 1 cons app swap push cur 
(cdr) swap quote 2 cons app cons app) swap quote + cons app
5. Создав таблицу с графами, соответствующими терму, 
коду и стеку КАМ, производим вычисления согласно 
инструкциям КАМ из п.4 до окончательного результата.
Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
 
 
 
Комментарий к слайду  
 
На втором этапе процедуры трансляции произведем преобразование полученного 
выражения ламбда-исчисления в код де Брейна. 
 
В результате получим: (λ.0 1 ((λ.0) 2) +. 
 
 
На третьем этапе процедуры трансляции произведем преобразование полученного кода де 
Брейна в терм категориальной комбинаторной логики. 
 
В результате получим:  
 < Λ (< < Snd, ‘1> ε, < Λ (Snd), ‘2 > ε > ε) , ‘+> ε. 
 
 
На четвертом этапе процедуры трансляции произведем преобразование полученного 
терма категориальной комбинаторной логики в последовательность инструкций 
категориальной абстрактной машины. 
 
В результате получим:  
push cur (push push cdr swap quote 1 cons app swap push cur (cdr) 
swap quote 2 cons app cons app) swap quote + cons app. 
 
На пятом этапе процедуры трансляции произведем выполнение результирующей 
последовательности инструкций категориальной абстрактной машины с означиванием в 
среде вычислений. 
 
Создав таблицу с графами, соответствующими терму, коду и стеку КАМ, производим 
вычисления согласно инструкциям КАМ, полученным в предыдущем пункте до 
окончательного результата. 
 
Последний пункт преобразований предлагается произвести самостоятельно в качестве 
упражнения. 

Сравнение КАМ со схемой трансляции в .NET
1.
Схема трансляции в .NET содержит абстрактную машину
2.
Абстрактная машина .NET транслирует исходный текст 
на языке программирования в высокоуровневый 
ассемблер – аналог КАМ-кода
3.
Виртуальная машина .NET способна осуществлять 
трансляцию из широкого спектра языков 
программирования, в том числе, в отличие от КАМ, и для 
императивных языков (C++, C# и др.)
4.
Виртуальная машина .NET, как и КАМ, отличается 
высокой аппаратной совместимостью
5.
Виртуальная машина .NET лучше адаптирована для 
объектно-ориентированных языков программирования
Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
 
 
 
Комментарий к слайду  
 
 
Подводя итоги рассмотрения формальной системы категориальной комбинаторной логики 
и ее применения для реализации категориальной абстрактной машины на состояниях, 
принадлежащих пространству декартово замкнутых категорий, можно сделать следующие 
выводы (в сопоставлении КАМ с виртуальной машиной технологической платформы 
Microsoft .NET). 
 
Во-первых, как уже упоминалось ранее, схема трансляции в .NET явно содержит в своем 
составе абстрактную машину. 
 
Во-вторых, абстрактная машина .NET транслирует исходный текст на языке 
программирования в высокоуровневый ассемблер (известный под названием Microsoft 
Intermediate Language, или, сокращенно, MSIL), который в значительной степени является 
аналогичным  коду категориальной абстрактной машины. 
 
В-третьих, виртуальная машина .NET способна осуществлять трансляцию из широкого 
спектра языков программирования, в том числе, в отличие от категориальной абстрактной 
машины, и для императивных языков (C++, C#  и целого ряда других языков 
программирования). 
 
В-четвертых, виртуальная машина .NET, как и категориальная абстрактная машина, 
отличается высокой аппаратной совместимостью, поскольку реализует целый ряд 
механизмов, обеспечивающих безопасную схему вычислений. 
 
Наконец, в-пятых, отметим, что виртуальная машина .NET лучше адаптирована для 
объектно-ориентированных языков программирования (в том числе для языка C#, 
который будет рассмотрен нами во второй части курса). 
 
 

Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Библиография (1)
1.
Plotkin G.D. Call-by-name, call-by-value and the λ-calculus. 
Theoretical computer science, 1, pp. 125-159, 1936 
2.
Cousineau G., Curien P.-L., Mauny M. The categorical 
abstract machine. Science of Computer Programming 8(2): 
173-202, 1987
3.
Curry H.B., Feys R. Combinatory logic, vol.I, North Holland, 
Amsterdam, 1958
4.
Scott D.S. Domains for denotational semantics. ICALP 1982, 
577-613
 
 
 
Комментарий к слайду  
 
К сожалению, в рамках времени, отведенных на одну лекцию, можно лишь в общих 
чертах охарактеризовать категориальную абстрактную машину и рассмотреть отдельные 
примеры работы ее базового варианта. Для более детального ознакомления с 
особенностями, достижениями и проблемами в области исследований абстрактных машин 
рекомендуется следующий список литературы: 
 
1. Plotkin G.D. Call-by-name, call-by-value and the λ-calculus. Theoretical computer science, 1, 
pp. 125-159, 1936  
 
2. Cousineau G., Curien P.-L., Mauny M. The categorical abstract machine. Science of 
Computer Programming 8(2): 173-202, 1987 
 
3. Curry H.B., Feys R. Combinatory logic, vol.I, North Holland, Amsterdam, 1958 
 
4. Scott D.S. Domains for denotational semantics. ICALP 1982, 577-613 
 
Кратко остановимся на источниках. В работе [1] излагается взаимосвязь различных 
стратегий вычисления в зависимости от типа передачи параметров функции. Работа [2] 
содержит 
описание 
категориальной 
абстрактной 
машины. 
В 
работах 
[3,4] 
рассматриваются вопросы, связанные с теоретическим обоснованием функционирования 
категориальной абстрактной машины, а именно, с формальной системой комбинаторной 
логики и денотационной семантикой вычислений.  
 
 

Современные языки программирования и .NET: I семестр
Лекция 11: Категориальная абстрактная машина
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Библиография (2)
5.
Hindley J.R., Seldin J.P. Introduction to combinators and λ-
calculus. London Mathematical Society Student Texts, 1, 
Cambridge University Press, 1986
6.
Turner D.A. A new implementation technique for applicative 
languages. Software – Practice and Experience, 9:21-49, 1979
 
 
 
 
Комментарий к слайду  
 
Продолжим обсуждение работ, посвященных исследованию категориальной абстрактной 
машины. 
 
Приведем окончание библиографического списка. 
 
5. Hindley J.R., Seldin J.P. Introduction to combinators and λ-calculus. London Mathematical 
Society Student Texts, 1, Cambridge University Press, 1986 
 
 
6. Turner D.A. A new implementation technique for applicative languages. Software – Practice 
and Experience, 9:21-49, 1979 
 
В работе [5] излагается взаимосвязь основополагающих формальных систем ламбда-
исчисления и комбинаторной логики. В работе [6] рассматриваются вопросы, связанные с 
реализацией современных языков функционального программирования.  
 

