©2019 MathByte Academy

Recap
class Circle:
def __init__(self, r):
self._r = r
custom initializer à instance method (bound to instance)
@staticmethod
def create_unit_circle():
return Circle(1)
static method – not bound to anything
origin = (0, 0)
class attribute – Circle.origin
_r is an instance attribute
(private by convention only)
@classmethod
def set_origin(cls, x, y):
cls.origin = (x, y)
class method – bound to class
c = Circle()
à c in an instance of Circle
à can still access using c._r
Circle.set_origin(10, 10)
c2 = Circle.create_unit_circle()
à can also be called using c.set_origin(10, 10)
@property
def radius(self):
return self._r
@radius.setter
def radius(self, value):
self._r = value
instance property (radius) with getter/setter methods
def double_radius(self):
self._r *= 2
instance method – bound to instance
c.double_radius()
©2019 MathByte Academy

