©2019 MathByte Academy

Overriding Functionality
When we inherit from another a class, we inherit its attributes, including all callables
à we can choose to redefine an existing callable in the sub class
à this is called overriding
class Person:
def say_hello(self):
return 'Hello!'
def say_bye(self):
return 'Bye!'
class Student(Person):
def say_hello(self):
return 'Yo!'
p = Person()
s = Student()
<obj>.say_hello()
<obj>.say_bye()
Hello!
Yo!
Bye!
Bye!
uses override
uses inherited
©2019 MathByte Academy

Overriding Functionality
When we create any class, we can override any method defined in the parent class, including 
inherited ones
à including those defined in object
class Person:
def __init__(self, name):
self.name = name
def __repr__(self):
return f'Person(name={self.name})'
p = Person('john')
str(p) à Person(name=john)
s = Student('eric'')
str(s) à Student(name=eric)
class Student(Person):
def __repr__(self):
return f'Student(name={self.name})'
overrides __init__ in object
overrides __repr__ in object
overrides __repr__ in Person
inherits __init__ from Person
©2019 MathByte Academy

Tip
Objects have a property:
à returns the class the object was created from
Classes have a property:
__name__
à returns a string containing the name of the class
To get the name (string) of the class used to create an object
à object.__class__.__name__
class Person:
def __init__(self, name):
self.name = name
def __repr__(self):
return f'Person(name={self.name})'
class Student(Person):
def __repr__(self):
return f'Student(name={self.name})'
__class__
class Person:
def __init__(self, name):
self.name = name
def __repr__(self):
return f'{self.__class__.__name__}(name={self.name})'
class Student(Person):
pass
instead we can do this, and get the same effect:
©2019 MathByte Academy

Overriding and the inheritance chain
à there are some subtle points here to note.
Suppose we have this type of hierarchy:
Person
- eat() à "Person eats"
- sleep() à "Person sleeps"
- work() à "Person works"
- routine() à eat() work() sleep()
p = Person()
p.routine() à
Person eats
Person works
Person sleeps
Now we create a Student class that overrides the work() method only:
Student:
- work() à "Student studies"
what happens when we call routine() on a Student instance?
s = Student()
à runs routine as defined in Person class – but bound to s
à routine calls eat()
à sleep() in Person class bound to s
à … calls work()
à finds the override in Student!!!
à uses the override in Student
à Person eats
à Student studies
à Person sleeps
à s.routine()
à… calls sleep()
à eat() in Person class bound to s
©2019 MathByte Academy

Coding
©2019 MathByte Academy

