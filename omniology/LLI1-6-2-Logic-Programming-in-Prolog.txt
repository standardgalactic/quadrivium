Logic: Language and Information 1
§6-2 Logic Programming in prolog
Jen Davoren

Practical Automated Reasoning
To find decidable, and practically computable, classes of
logical consequence problem:
▶restrict to a simple fragment of the language: program
clauses and goals;
▶use a proof system with only one rule: a resolution rule;
keep it simple for dumb machines!
Logic Programming is a direct, declarative style of computer
programming using logic-based languages such as prolog or
datalog.

Program clauses and logic programs
A program clause or definite clause is a formula of one of two
kinds:
(p1 & p2 & · · · & pm)
⊃
q
conditional rule
q
fact
where m ⩾0 and p1, p2, . . . , pm, q are all atomic formulas.
(Case of m = 0 gives facts.)

Program clauses and logic programs
A program clause or definite clause is a formula of one of two
kinds:
(p1 & p2 & · · · & pm)
⊃
q
conditional rule
q
fact
where m ⩾0 and p1, p2, . . . , pm, q are all atomic formulas.
(Case of m = 0 gives facts.)
A logic program P is a list A1, A2, . . . , An of program clauses.

Program clauses and logic programs
A program clause or definite clause is a formula of one of two
kinds:
(p1 & p2 & · · · & pm)
⊃
q
conditional rule
q
fact
where m ⩾0 and p1, p2, . . . , pm, q are all atomic formulas.
(Case of m = 0 gives facts.)
A logic program P is a list A1, A2, . . . , An of program clauses.
A goal G is a list r1, r2, . . . , rk of atoms, and the corresponding
goal formula is the conjunction B = (r1 & r2 & · · · & rk).

Program clauses and logic programs
A program clause or definite clause is a formula of one of two
kinds:
(p1 & p2 & · · · & pm)
⊃
q
conditional rule
q
fact
where m ⩾0 and p1, p2, . . . , pm, q are all atomic formulas.
(Case of m = 0 gives facts.)
A logic program P is a list A1, A2, . . . , An of program clauses.
A goal G is a list r1, r2, . . . , rk of atoms, and the corresponding
goal formula is the conjunction B = (r1 & r2 & · · · & rk).
Automated reasoning task: determine whether or not:
P |= G
that is,
A1, A2, . . . , An |= B

Exercise: program clauses
Which one or more of the following propositional formulas
can be re-written as a logic program: that is, logically
equivalent to either a program clause or a conjunction of
program clauses.
Assume p, p1, p2, p3, q, q1, q2 are all atomic formulas.
(a)
p & (q1 ∨q2)
(b)
∼p1 ∨∼p2 ∨∼p3 ∨q
(c)
(p1 & p2) ⊃(q1 & q2)
(d)
(p1 & p2) ⊃(q1 ∨q2)
(e)
p1 ⊃(p2 ⊃(p3 ⊃q))

Exercise Solution: program clauses
The following propositional formulas can be re-written as a
logic program: that is, logically equivalent to either a program
clause or a conjunction of program clauses.
Here, p, p1, p2, p3, q, q1, q2 are all atomic formulas.
(a)
p & (q1 ∨q2)
NO
(b)
∼p1 ∨∼p2 ∨∼p3 ∨q
YES
(p1 & p2 & p3) ⊃q
(c)
(p1 & p2) ⊃(q1 & q2)
YES
((p1 & p2) ⊃q1) &
((p1 & p2) ⊃q2)
(d)
(p1 & p2) ⊃(q1 ∨q2)
NO
(e)
p1 ⊃(p2 ⊃(p3 ⊃q))
YES
(p1 & p2 & p3) ⊃q

Program clauses and logic programs in prolog
A program clause or definite clause is written in prolog as:
or
where m ⩾0 and p_1, p_2, ..., p_m, q are all atomic
formulas. (Case of m = 0 gives facts.)
Read “ : −” as “if ”, and commas between p_i’s as “and”.

prolog idiosyncracies
▶Meaning of program clauses (m ⩾1): We can establish the
atom q if we first establish all of p_1, p_2, and up to p_m.

prolog idiosyncracies
▶Meaning of program clauses (m ⩾1): We can establish the
atom q if we first establish all of p_1, p_2, and up to p_m.
▶Facts q.
have no body, just a head.

prolog idiosyncracies
▶Meaning of program clauses (m ⩾1): We can establish the
atom q if we first establish all of p_1, p_2, and up to p_m.
▶Facts q.
have no body, just a head.
▶Atoms must have names starting with a lower-case letter, then
followed by upper-case letters, lower-case letters, digits or an
underscore _.

prolog idiosyncracies
▶Meaning of program clauses (m ⩾1): We can establish the
atom q if we first establish all of p_1, p_2, and up to p_m.
▶Facts q.
have no body, just a head.
▶Atoms must have names starting with a lower-case letter, then
followed by upper-case letters, lower-case letters, digits or an
underscore _.
▶Program clauses must end with “.”
.

prolog idiosyncracies
▶Meaning of program clauses (m ⩾1): We can establish the
atom q if we first establish all of p_1, p_2, and up to p_m.
▶Facts q.
have no body, just a head.
▶Atoms must have names starting with a lower-case letter, then
followed by upper-case letters, lower-case letters, digits or an
underscore _.
▶Program clauses must end with “.”
.
▶The order of atoms within a clause, and the order of program
clauses in a program, both matter in how prolog runs.

Program clauses and logic programs in prolog
A logic program P is a list A1, A2, . . . , An of program clauses,
saved in plain text file with name of form “progname.pl”.

Program clauses and logic programs in prolog
A logic program P is a list A1, A2, . . . , An of program clauses,
saved in plain text file with name of form “progname.pl”.
A goal G is a list of atoms:
?- r_1, r_2, ..., r_k.
Let logic formula B be the conjunction of the r_j’s.

Program clauses and logic programs in prolog
A logic program P is a list A1, A2, . . . , An of program clauses,
saved in plain text file with name of form “progname.pl”.
A goal G is a list of atoms:
?- r_1, r_2, ..., r_k.
Let logic formula B be the conjunction of the r_j’s.
Automated reasoning task: determine whether or not:
P |= G
that is,
A1, A2, . . . , An |= B

Example prolog program
/* weather-001.pl */
windy :- melbourne.
windy :- yackandandah.
light_rain :- melbourne.
dry :- yackandandah.
hot35 :- northern_victoria.
mild25 :- central_victoria.
central_victoria :- melbourne.
northern_victoria :- yackandandah.
high_fire_danger :- windy, dry, hot35.
yackandandah.

Example prolog program
/* weather-001.pl */
windy :- melbourne.
windy :- yackandandah.
light_rain :- melbourne.
dry :- yackandandah.
hot35 :- northern_victoria.
mild25 :- central_victoria.
central_victoria :- melbourne.
northern_victoria :- yackandandah.
high_fire_danger :- windy, dry, hot35.
yackandandah.
1 ?- high_fire_danger.

Example prolog program
/* weather-001.pl */
windy :- melbourne.
windy :- yackandandah.
light_rain :- melbourne.
dry :- yackandandah.
hot35 :- northern_victoria.
mild25 :- central_victoria.
central_victoria :- melbourne.
northern_victoria :- yackandandah.
high_fire_danger :- windy, dry, hot35.
yackandandah.
1 ?- high_fire_danger.
ERROR: windy/0: Undefined procedure: melbourne/0
Exception: (8) melbourne ?

Example prolog program
/* weather-001.pl revised */
windy :- melbourne.
windy :- yackandandah.
light_rain :- melbourne.
dry :- yackandandah.
hot35 :- northern_victoria.
mild25 :- central_victoria.
central_victoria :- melbourne.
northern_victoria :- yackandandah.
high_fire_danger :- windy, dry, hot35.
yackandandah.
melbourne :- false.

Example prolog program
/* weather-001.pl revised */
windy :- melbourne.
windy :- yackandandah.
light_rain :- melbourne.
dry :- yackandandah.
hot35 :- northern_victoria.
mild25 :- central_victoria.
central_victoria :- melbourne.
northern_victoria :- yackandandah.
high_fire_danger :- windy, dry, hot35.
yackandandah.
melbourne :- false.
1 ?- high_fire_danger.

Example prolog program
/* weather-001.pl revised */
windy :- melbourne.
windy :- yackandandah.
light_rain :- melbourne.
dry :- yackandandah.
hot35 :- northern_victoria.
mild25 :- central_victoria.
central_victoria :- melbourne.
northern_victoria :- yackandandah.
high_fire_danger :- windy, dry, hot35.
yackandandah.
melbourne :- false.
1 ?- high_fire_danger.
true.
2 ?-

Logical consequence questions answered by prolog
Let P be a logic program and let G be the goal:
?- r_1, r_2, ..., r_k.
To get prolog to answer the question whether or not P |= G,

Logical consequence questions answered by prolog
Let P be a logic program and let G be the goal:
?- r_1, r_2, ..., r_k.
To get prolog to answer the question whether or not P |= G,
▶load the program file containing P into prolog : can use
File→Consult. . . or File→Load. . . in some versions.

Logical consequence questions answered by prolog
Let P be a logic program and let G be the goal:
?- r_1, r_2, ..., r_k.
To get prolog to answer the question whether or not P |= G,
▶load the program file containing P into prolog : can use
File→Consult. . . or File→Load. . . in some versions.
▶enter the goal atoms in G in a list after the query prompt ?-

Logical consequence questions answered by prolog
Let P be a logic program and let G be the goal:
?- r_1, r_2, ..., r_k.
To get prolog to answer the question whether or not P |= G,
▶load the program file containing P into prolog : can use
File→Consult. . . or File→Load. . . in some versions.
▶enter the goal atoms in G in a list after the query prompt ?-
▶end list with full-stop . and then press “return” key;

Logical consequence questions answered by prolog
Let P be a logic program and let G be the goal:
?- r_1, r_2, ..., r_k.
To get prolog to answer the question whether or not P |= G,
▶load the program file containing P into prolog : can use
File→Consult. . . or File→Load. . . in some versions.
▶enter the goal atoms in G in a list after the query prompt ?-
▶end list with full-stop . and then press “return” key;
▶then prolog answers with either true or false

Logical consequence questions answered by prolog
Let P be a logic program and let G be the goal:
?- r_1, r_2, ..., r_k.
To get prolog to answer the question whether or not P |= G,
▶load the program file containing P into prolog : can use
File→Consult. . . or File→Load. . . in some versions.
▶enter the goal atoms in G in a list after the query prompt ?-
▶end list with full-stop . and then press “return” key;
▶then prolog answers with either true or false or . . .

Logical consequence questions answered by prolog
Let P be a logic program and let G be the goal:
?- r_1, r_2, ..., r_k.
To get prolog to answer the question whether or not P |= G,
▶load the program file containing P into prolog : can use
File→Consult. . . or File→Load. . . in some versions.
▶enter the goal atoms in G in a list after the query prompt ?-
▶end list with full-stop . and then press “return” key;
▶then prolog answers with either true or false or . . .
prolog gets stuck in a loop and crashes!

Logical consequence questions answered by prolog
Let P be a logic program and let G be the goal:
?- r_1, r_2, ..., r_k.
To get prolog to answer the question whether or not P |= G,
▶load the program file containing P into prolog : can use
File→Consult. . . or File→Load. . . in some versions.
▶enter the goal atoms in G in a list after the query prompt ?-
▶end list with full-stop . and then press “return” key;
▶then prolog answers with either true or false or . . .
prolog gets stuck in a loop and crashes! or reports some other
error.

prolog queries answered
The proof method is a refutation procedure: in effect, we suppose
the program P is true but the initial goal G is false (that is, one of its
atoms is false), and then prolog tries to derive a contradiction.
See later lesson, §6-4 How prolog Answers Queries.

prolog used in current AI systems
IBM’s artificial intelligence computer “Watson”
uses prolog for logical intelligence.
First developed to compete on U.S. game show Jeopardy.

prolog software
http://www.swi-prolog.org
Free, open-source prolog implementation
for MS-Windows, Mac OSX, and Linux.
Latest stable release: version 6.6.1
http://www.swi-prolog.org/download/stable
Copyright ©1990-2013 University of Amsterdam

Next Up: prolog project: Sudoku puzzles

Acknowledgements
IBM Watson computer, by Clockready (Own work)
[CC-BY-SA-3.0] via Wikimedia Commons
http://en.wikipedia.org/wiki/File:IBM_Watson.PNG
Idea for weather forecast propositional prolog program:
Prof. Alex Simpson, School of Informatics, University of Edinburgh.
SWI-Prolog logo, University of Amsterdam [CC BY SA 3.0]
http://www.swi-prolog.org/

