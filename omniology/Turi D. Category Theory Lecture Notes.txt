Category Theory Lecture Notes
Daniele Turi
Laboratory for Foundations of Computer Science
University of Edinburgh
September 1996 ‚Äì December 2001

Prologue
These notes, developed over a period of six years, were written for an eighteen lectures
course in category theory. Although heavily based on Mac Lane‚Äôs Categories for the Working
Mathematician, the course was designed to be self-contained, drawing most of the examples
from category theory itself.
The course was intended for post-graduate students in theoretical computer science at the
Laboratory for Foundations of Computer Science, University of Edinburgh, but was attended
by a varied audience.
Most sections are a reasonable account of the material presented
during the lectures, but some, most notably the sections on Lawvere theories, topoi and Kan
extensions, are little more than a collection of deÔ¨Ånitions and facts.
Contents
Introduction
1
1
Universal Problems
1
1.1
Natural Numbers in set theory and category theory . . . . . . . . . . . . . . .
1
1.2
Universals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
2
Basic Notions
7
2.1
Categories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
2.2
Functors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9
2.3
Initial and Final Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10
2.4
Comma Categories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10
3
Universality
11
4
Natural Transformations and Functor Categories
14
5
Colimits
18
5.1
Coproducts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
18
5.2
Coequalisers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
18
5.3
Pushouts
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19
5.4
Initial objects as universal arrows . . . . . . . . . . . . . . . . . . . . . . . . .
20
5.5
Generalised Coproducts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
22
5.6
Finite Colimits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
22
5.7
Colimits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
ii

6
Duality and Limits
25
6.1
Universal arrows from a functor to an object
. . . . . . . . . . . . . . . . . .
25
6.2
Products . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
26
6.3
Equalisers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
26
6.4
Pullbacks
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
27
6.5
Monos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
28
6.6
Limits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
29
7
Adjunctions
31
7.1
From Universal Arrows to Adjunctions . . . . . . . . . . . . . . . . . . . . . .
31
7.2
Adjunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
34
7.3
From Adjunctions to Universal Arrows . . . . . . . . . . . . . . . . . . . . . .
35
7.4
Adjoints for Preorders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
39
8
Preservation of Limits and Colimits
39
9
Monads
41
9.1
Algebras of a Monad . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
41
9.2
Comparison Functors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
43
9.3
Free Algebras . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
43
10 Lawvere Theories
45
11 Cartesian Closed Categories
48
11.1 Curry-Howard-Lawvere Isomorphism . . . . . . . . . . . . . . . . . . . . . . .
49
12 Variable Sets and Yoneda Lemma
50
13 Set theory without sets
53
13.1 Subobject ClassiÔ¨Åers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
53
13.2 Topoi
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
54
14 Kan Extensions
55
15 2-Categories
56
Further Reading
57
iii

Lecture I
Introduction
Aim
‚Ä¢ Learn category theory?
There is a lot to learn and we do not have much time. The crucial notion is that of adjunction
and the course is geared towards getting there as quickly and as naturally as possible. Hard
in the beginning, but it pays-oÔ¨Ä. Above all we aim to:
‚Ä¢ Learn to reason categorically!
When one learns a foreign language it is often advised to listen to the language Ô¨Årst, learning
to understand the words before knowing how they are spelled. This is hard at Ô¨Årst, but
it pays back. Similarly, in this course we shall try and refrain from relating categories to
other subjects and we shall try and work with examples and exercises from category theory
itself.
Surprisingly, one can go a long way without mentioning the traditional examples
from mathematics and computer science: category theory is, by and large, a self-contained
discipline.
Before starting, let us recall what the words category and categorical mean in English:
Category: class or group of things in a complete system of grouping.
Categorical: (of a statement) unconditional, absolute.
(DeÔ¨Ånitions from the Oxford dictionary.)
1
Universal Problems
In this Ô¨Årst lecture we introduce universal problems. Following [Mac86, ¬ßII.3], we show that
the recursion theorem is a categorical, compact way of expressing the Peano axioms for the
natural numbers. This leads to Lawvere‚Äôs notion of natural number object.
1.1
Natural Numbers in set theory and category theory
What are the natural numbers?
A1 Traditional, set-theoretic answer (Peano, one century ago):
The natural numbers form a set N such that:
1. ‚àÉzero ‚ààN
2. ‚àÄn ‚ààN, ‚àÉsucc n ‚ààN
3. ‚àÄn ‚ààN, succ n Ã∏= zero ‚ààN
1

4. ‚àÄn, m ‚ààN, succ n = succ m
+3 n = m (injectivity)
5. ‚àÄA ‚äÜN (zero ‚ààA ‚àßa ‚ààA
+3 succ a ‚ààA)
+3 A = N
These axioms determine N uniquely up to isomorphism. (We shall prove this categori-
cally in a moment.)
A2 Categorical answer (Lawvere, 60‚Äôs):
A natural number object
0 ‚ààN
s / N
(in Set) consists of
‚Äì a set N
‚Äì with a distinguished element 0 ‚ààN
‚Äì and an endofunction s : N
/ N
which is universal in the sense that for every structure
e ‚ààX
g / X
there exists a unique function f : N
/ X such that
‚Äì f(0) = e
‚Äì f(s(n)) = g(f(n)) for all n in N
The two characterisations are equivalent:
Theorem 1.1 A1 ks
+3 A2
Proof.
(A1
+3 A2) ‚â°Recursion Theorem (see proof in [Mac86, page 45].)
(A2
+3 A1)
(1) and (2) by deÔ¨Ånition, setting N = N, zero = 0 and succ n = s(n).
(3) by contradiction: assume s(n) = 0 and consider a structure
e ‚ààX
g / X
with:
‚Ä¢ X = {e, d}
‚Ä¢ g(e) = g(d) = d
Then, by A2, there exists f : N
/ X such that
f(0) = e
f(s(n)) = g(f(n))
But if s(n) = 0 then f(s(n)) = e Ã∏= d = g(f(n)).
(4) Exercise 1.2.
(5) We Ô¨Årst express A2 in a really categorical way. For this we need to establish
a language of diagrams.
2

Diagrams
Given functions f : X
/ Y , g : Y
/ Z, h : X
/ Z we say that the diagram
X
f
/
h
 A
A
A
A
A
A
A
Y
g

Z
commutes if and only if g(f(x)) = h(x) for all x in X. We write then:
g ‚ó¶f = h
Of course, we can add identity functions wherever we want without aÔ¨Äecting commutation.
Eg:
X
f
/
idX

Y
g

X
h
/ Z
Another example:
X
h
@
@
@
@
@
@
@
@
f
/ Y
g

f‚Ä≤
/ Y ‚Ä≤
g‚Ä≤

Z
k
/ Z‚Ä≤
commutes iÔ¨Äk(g(f(x))) = k(h(x)) = g‚Ä≤(f‚Ä≤(f(x))) for all x in X.
A trivial yet important remark is that every element x of a set can be regarded as a function
from a one-element (ie singleton) set {‚àó} to X. Moreover, this correspondence is a bijection.
From now on we then write 1 for the generic singleton set and
x : 1
/ X
as an alternative (very convenient!) notation for
x ‚ààX
Finally, a dashed arrow
X
f
/_
_
_
Y
indicates that there is a unique map f from X to Y .
A2 with diagrams
We can now rephrase the two equations of A2 (and the uniqueness
condition) as follows:
1
id1

0
/ N
f



s
/ N
f



1
e
/ X
g
/ X
3

Proof of Theorem 1.1 (continued)
First note that everything in sight in the diagram
1
id1

0
/ N
f



s
/ N
f



1
id1

0
/ A
i

s|A
/ A
i

1
0
/ N
s
/ N
commutes, where
i : A
/ N
is the evident inclusion function associated to A ‚äÜN, and
s|A : A
/ A
is the restriction of s : N
/ N to A (which we assume it exists by A1.5).
Trivially, also
1
id1

0
/ N
idN

s
/ N
idN

1
0
/ N
s
/ N
commutes, hence, by the uniqueness condition in A2, we have that
i ‚ó¶f = idN
By the following lemma this implies that f is injective:
Lemma 1.2 (Right inverses are injective) Given two composable
functions f and g, if g ‚ó¶f is the identity then f is injective.
We can then conclude that N ‚äÜA, since the codomain A of the injective function
f is A ‚äÜN.
Theorem 1.3 A2 (hence A1) determines N uniquely up to isomorphism.
Proof. We need to prove that if there exists another structure
1
0‚Ä≤
/ N‚Ä≤
s‚Ä≤
/ N‚Ä≤
satisfying A2 then there exists an isomorphisms between N and N‚Ä≤. That is, we
would like to establish the existence of f : N
/ N‚Ä≤ and f‚Ä≤ : N‚Ä≤
/ N such that
4

f‚Ä≤ ‚ó¶f = idN and f ‚ó¶f‚Ä≤ = idN‚Ä≤. We are going to Ô¨Ånd these two functions f and f‚Ä≤
using the universal property of both structures given by A2:
1
id1

0
/ N
f



s
/ N
f



1
id1

0‚Ä≤
/ N‚Ä≤
f‚Ä≤



s‚Ä≤
/ N‚Ä≤
f‚Ä≤



1
0
/ N
s
/ N
but also
1
id1

0
/ N
idN

s
/ N
idN

1
0
/ N
s
/ N
hence
f‚Ä≤ ‚ó¶f = idN
Similarly,
f ‚ó¶f‚Ä≤ = idN‚Ä≤
1.2
Universals
. . . there exists a unique function such that . . .
‚Ä¢ Existence: deÔ¨Åne entities
‚Ä¢ Uniqueness: prove properties
Theorem 1.4 A universal construction deÔ¨Ånes an entity uniquely up to isomorphism.
Proof. Very much like for Theorem 1.3.
Exercises
E 1.1 Prove that A2 implies the following (where X √ó N is the cartesian product of the sets
X and N):
Primitive Recursion. For every set X with a distinguished element e ‚ààX and
a function h : X √ó N
/ X there exists a unique function f : N
/ X such that
‚Ä¢ f(0) = e
‚Ä¢ f(s(n)) = h(f(n), n) for all n in N.
Hint: apply A2 to g : X √ó N
/ X √ó N, where g(x, n) = (h(x, n), n).
5

E 1.2 Use the above primitive recursion to prove that A2 implies the fourth Peano axiom
(injectivity). (Hint. You want to prove that the successor is injective. For this you can use
Lemma 1.2 with respect to predecessor and successor. The predecessor function p : N
/ N
is deÔ¨Ånable by primitive recursion.)
6

Lecture II
2
Basic Notions
Category theory is the mathematical study of universal properties:
‚Ä¢ it brings to light, makes explicit, and abstracts out the relevant structure, often hidden
by traditional approaches;
‚Ä¢ it looks for the universal properties holding in the categories of structures one is working
with.
Category Theory vs Set Theory: primitive notions
Set Theory:
‚Ä¢ membership and equality of those abstract collections called sets
‚Äì an object is determined by its content.
Category Theory:
‚Ä¢ composition and equality of those abstract functions called arrows
‚Äì understand one object by placing it in a category and studying its relation with
other objects of the same category (using arrows), or related categories (using
functors, ie arrows between categories).
Informatics: we want to understand programs abstractly, independently from their imple-
mentation.
2.1
Categories
A category is a (partial) algebra of abstract functions:
‚Ä¢ arrows with identities and a binary composition (partial) operation
‚Äì obeying generalised monoid laws.
More formally, a category C consists of:
‚Ä¢ A collection ObjC of objects A, B, C, . . . , X, Y, . . ..
‚Ä¢ For each pair of objects A and B, a collection C(A, B) of arrows f : A
/ B from A
to B;
‚Äì A is the domain and B is the codomain of f : A
/ B;
7

‚Äì the collection of all arrows f, g, h, k, . . . of C is denoted by ArrC;
‚Äì arrows are also called maps or morphisms.
‚Ä¢ For each object A, an identity arrow idA : A
/ A.
‚Ä¢ For each pair of arrows
A
f / B
g / C
a composite arrow
g ‚ó¶f : A
/ C
These data have to satisfy the following generalised monoid laws.
1. Identity: if A
f / B, then
idB ‚ó¶f = f = f ‚ó¶idA
2. Associativity: if A
f / B
g / C
h / D, then
(h ‚ó¶g) ‚ó¶f = h ‚ó¶(g ‚ó¶f)
Examples
1. Categories freely generated by directed graphs.
2. Degenerate categories such as:
‚Ä¢ Sets ‚Äì ie categories where all arrows are identities.
‚Ä¢ Monoids ‚Äì ie categories with only one object.
‚Ä¢ Preorders: categories with at most one arrow between every two objects.
3. 0, 1, ¬∑
/ ¬∑, œâ.
4. Opposite categories Cop: obtained by reversing the arrows of given categories C, while
keeping the same objects.
5. Set: the category of (small) sets and functions; composition is the usual function com-
position (and so is in the remaining examples). Note that type matter: the identity on
the natural numbers is a diÔ¨Äerent function from the inclusion of the natural numbers
into the integers.
6. Set‚àó: pointed sets (ie sets with a selected base-point) and functions preserving the base
point.
7. N: Ô¨Ånite ordinals and functions.
8. FinSet: Ô¨Ånite sets and functions.
9. Preord: preorders and monotone functions.
10. Poset: partial orders and monotone functions.
8

11. Cpo: complete partial orders and continuous functions.
12. Mon: monoids and monoid homomorphisms.
13. Grp: groups and group homomorphisms.
14. SL: semi-lattices and join-preserving functions.
15. Top: topological spaces and continuous functions.
16. Met: metric spaces and non-expansive functions.
17. CMet: complete metric spaces and non-expansive functions.
2.2
Functors
A functor is a homomorphism of categories
F : C
/ D
ie a morphism of categories preserving the structure, namely identities and composition.
Formally, a functor F : C
/ D consists of a function X 
/ F(X) from the objects of C to
the objects of D and a function f 
/ F(f) from the arrows of C to the arrows of D such that:
F(idX) = idFX
F(g ‚ó¶f) = F(g) ‚ó¶F(f)
Thus functors preserve all commuting diagrams, hence, in particular, isomorphisms.
Functors between sets are functions, between preorders are monotone functions, between
monoids are monoid homomorphisms, between groups are isomorphisms (because a group
is a category with one object and where every map has an inverse, and functors preserve
isomorphisms).
For every category C, there is an evident identity functor
IdC : C
/ C
Moreover, there is a composition G ‚ó¶F : B
/ D of functors F : B
/ C and G : C
/ D,
namely (G ‚ó¶F)(X) = G(F(X)) and (G ‚ó¶F)(f) = G(F(f)).
A category C is small if its collection ObjC of objects and its collection ArrC of arrows are sets; it is
locally small if the collection C(A, B) of arrows from A to B is a set for each pair of objects A and
B. N is small, while the category Finset is only locally small, although every Ô¨Ånite set is isomorphic
to a Ô¨Ånite ordinal. In the above examples, the categories 5, 6, and from 8 to 17 are not small, but only
locally small.
Cat is the corresponding category of all (small) categories and functors between them.
E 2.1 Check that Cat, the category of all small categories, is indeed a category, ie check
that the identity and the associative laws hold.
9

Lecture III
2.3
Initial and Final Objects
An object is initial in a category C if for every object X in C there exists a unique arrow in
C from it to X. (It need not exist!)
Initial objects are unique up to isomorphism.
Notation for ‚Äòthe‚Äô initial object: 0.
An object is Ô¨Ånal (or terminal) in a category C if for every object X in C there exists a
unique arrow in C from X to it. (Again, a category may have no Ô¨Ånal object.) Note that:
A Ô¨Ånal in C iÔ¨ÄA initial in Cop
therefore,
Ô¨Ånal objects are unique up to isomorphism.
Notation for ‚Äòthe‚Äô Ô¨Ånal object: 1.
The initial object in a preorder is the bottom element, if it exists; the Ô¨Ånal object is the
top. In Set the initial object is the empty set, while the Ô¨Ånal object is the (unique up to
isomorphism) singleton set. In Cat the initial object is the empty category 0, with no objects
nor arrows, and the Ô¨Ånal object is the category 1 with only one object and one arrow (the
identity).
2.4
Comma Categories
Crucial for this course is Lawvere‚Äôs notion of a comma category. Given a category C, an
object A of C and a functor U : D
/ C, the comma category (A ‚ÜìU) is the category of
arrows from A to U, with objects ‚ü®Y, h : A
/ UY ‚ü©given by arrows of C of type A
/ UY ,
where Y can range over the objects of D. The homomorphisms f : ‚ü®Y, h : A
/ UY ‚ü©
/
‚ü®Y ‚Ä≤, h‚Ä≤ : A
/ UY ‚Ä≤‚ü©are given by arrows f : Y
/ Y ‚Ä≤ of D such that Uf ‚ó¶h = h‚Ä≤. I like to
draw all this as follows.
C
D
U
o
A
h /
h‚Ä≤
!D
D
D
D
D
D
D
D
UY
Uf

Y
f

UY ‚Ä≤
Y ‚Ä≤
Please try and conform to this notation (with U going from right to left) as we shall use it
extensively throughout the course.
10

Exercises
E 2.2 Write down the proof that initial objects are unique up to isomorphism.
E 2.3 (We shall need this later on.) Just write down the more general notion of comma
category (T ‚ÜìU) involving two functors T and U with the same codomain
B
T
/ C
D
U
o
that we have seen in the lecture. Also, write the two ‚Äòprojection‚Äô functors P : (T ‚ÜìU)
/ B
and Q : (T ‚ÜìU)
/ D.
3
Universality
A universal arrow from an object A of C to a functor U : D
/ C consists of an initial
object in the comma category (A ‚ÜìU), ie an object FA of D and arrow Œ∑A : A
/ UFA of
C which are universal in the sense that for every Y of D and every h : A
/ UY of C there
exists a unique arrow h‚ôØ: FA
/ Y in D such that Uh‚ôØ‚ó¶Œ∑A = h. Diagrammatically:
C
D
U
o
A
Œ∑A /
h
!D
D
D
D
D
D
D
D
UFA
Uh‚ôØ

FA
h‚ôØ



UY
Y
It is at Ô¨Årst hard to get accustomed to switching between the two categories C and D along
the functor U and in getting the right order in the quantiÔ¨Åcations involved, but this notion
is to category theory what the ‚àÄœµ‚àÉŒ¥ formulation of continuity is to analysis. It is important
to realize that the object FA is by no means initial in D: there might be more than one
arrow from FA to Y , but h‚ôØis the unique arrow such that the triangle in the above diagram
commutes.
Exercise
E 3.1 (Important!) Try and prove the following theorem.
Theorem 3.1 In the above situation, assume that, for every object A of C there
is a universal arrow Œ∑A : A
/ UFA from A to U. This deÔ¨Ånes a function F from
the objects A of C to objects FA def
= FA of D. Then, by universality, this extends
to a functor F : C
/ D in the opposite direction of U.
11

Lecture IV
Proof of Theorem 3.1
The action of F on arrows is deÔ¨Åned as follows:
C
D
U
o
A
Œ∑A /
f

UFA
UFf

FA
Ffdef
= (Œ∑B‚ó¶f)‚ôØ



B
Œ∑B / UFB
FB
Using universality one can prove that F is a functor F : C
/ D, that is:
FidA = idFA
Fg ‚ó¶Ff = F(g ‚ó¶f)
2
Example 3.2 A monoid M = ‚ü®M, e, m‚ü©consists of a carrier set M and an associative mul-
tiplication operation m : M √ó M
/ M with a unit e ‚ààM:
m(x, m(y, z)) = m(m(x, y), z)
m(x, e) = x = m(e, x)
for all x, y, z in M. A monoid homomorphism is a function between carriers which respects
unit and multiplication. It is easy to see that monoids and their homomorphisms form a
category Mon.
There is a trivial yet powerful forgetful functor
Set o
Mon : U
which maps a monoid ‚ü®M, e, m‚ü©to its carrier M and a homomorphism f : ‚ü®M, e, m‚ü©
/
‚ü®M‚Ä≤, e‚Ä≤, m‚Ä≤‚ü©to itself f : M
/ M‚Ä≤ by forgetting that it is a homomorphism.
An important property of this forgetful functor is that for every set A there is a universal
arrow from A to U, which gives rise, by the above theorem to a functor
F : Set
/ Mon
This F maps a set A to the set A‚àóof Ô¨Ånite words over A, with concatenation as multiplication
and with the empty word œµ as unit. The universal arrow Œ∑A : A
/ UFA = A‚àómaps an
element a of A to the one letter word ‚ü®a‚ü©. For every monoid ‚ü®M, e, m‚ü©and every function
h : A
/ M, there exists clearly only one monoid homomorphism h‚ôØ: FA
/ ‚ü®M, e, m‚ü©such
that h‚ôØ‚ü®a‚ü©= h(a).
Can you think of more similar examples?
12

Note that we can describe the category Mon without using elements as follows. A monoid
consists of a set M together with functions m : M √ó M
/ M and e : 1
/ M such that
M √ó M √ó M
id√óm/
m√óid

M √ó M
m

M √ó M
m
/ M
M √ó 1
id√óe /
‚àº
=
&L
L
L
L
L
L
L
L
L
L
M √ó M
m

1 √ó M
e√óid
o
‚àº
=
yrrrrrrrrrr
M
Monoid homomorphisms f : ‚ü®M, e, m‚ü©
/ ‚ü®M‚Ä≤, e‚Ä≤, m‚Ä≤‚ü©are then functions f : M
/ M‚Ä≤ such
that the diagrams
M √ó M
f√óf /
m

M‚Ä≤ √ó M‚Ä≤
m‚Ä≤

M
f
/ M‚Ä≤
1
e
~~~~~~~~
e‚Ä≤
 A
A
A
A
A
A
A
A
M
f
/ M‚Ä≤
commute.
Exercises
E 3.2 (Important.) Consider the particular case of comma category when (T ‚ÜìU) is with
respect two parallel functors T, U : B
/ C (ie, B = D). Assume there is a functor
œÑ : B
/ (T ‚ÜìU)
such that
P ‚ó¶œÑ = Q ‚ó¶œÑ = IdB
(identity functor on B)
(Recall: P and Q are the evident projection functors.) The question is: how would a generic
such œÑ look like? Again, here spell out the details of the functor œÑ, looking at the type of
œÑ(X) and of œÑ(f) for generic X and f in B.
E 3.3 Given another parallel functor V : B
/ C and a functor
œë : B
/ (U ‚ÜìV )
such that
P ‚ó¶œë = Q ‚ó¶œë = IdB
can you deÔ¨Åne a ‚Äòcomposite‚Äô functor
œëœÑ : B
/ (T ‚ÜìV )
such that
P ‚ó¶(œëœÑ) = Q ‚ó¶(œëœÑ) = IdB?
13

Lecture V
4
Natural Transformations and Functor Categories
Given two parallel functors T, U : B
/ C, a natural transformation from T to U is a
functor
œÑ : B
/ (T ‚ÜìU)
such that
P ‚ó¶œÑ = Q ‚ó¶œÑ = IdB
In other words, it is a mapping of each object A of B to an arrow
œÑA : TA
/ UA
of C such that, for every arrow f : A
/ B of B, the diagram
TA
œÑA /
Tf

UA
Uf

TB
œÑB / UB
One usually writes either œÑ : T
¬∑ / U or œÑ : T
+3 U for such a natural transformation.
Theorem 3.1 (continued)
Given a functor U : D
/ C, if for every object A of C there
exists a universal arrow Œ∑A : A
/ UFA from A to U, we know that the function F from
objects of C to objects of D extends, by universality, to a functor F : C
/ D in the opposite
direction of U. Moreover:
‚Ä¢ The arrow Œ∑A is natural in A
Œ∑ : Id
+3 UF
Proof. By deÔ¨Ånition,
A
Œ∑A /
f

UFA
UFf

B
Œ∑B / UFB
commutes for every arrow f : A
/ B of C.
2
Thus, for instance, the function A
/ A‚àómapping an element a of A to the one letter word
‚ü®a‚ü©is natural in the set A. Any more examples?
Given another parallel functor V : B
/ C and a natural transformation œë : U
+3 V , one can
deÔ¨Åne a composite
œë ‚ó¶œÑ : T
+3 V
by putting
(œë ‚ó¶œÑ)A
def
= œëA ‚ó¶œÑA
14

TA
œÑA /
(œë‚ó¶œÑ)A
%
Tf

UA
Uf

œëA / V A
V f

TB
œÑB /
(œë‚ó¶œÑ)B
9
UB
œëB
/ V B
Note that this composition is associative because deÔ¨Åned in terms of the composition of arrows
in C. Also note that, given any functor T from B to C, there is also an evident identity natural
transformation
idT : T
+3 T
(idT )X
def
= idTX
For every two categories B and C, one can then form the functor category CB having as
object functors from B to C and as arrows natural transformations between them. Intuitively,
objects of CB are diagrams of ‚Äúshape‚Äù B and arrows are morphisms which preserve this shape.
Example 4.1 Take
B = 1
f
(
g
6 2
Then an object X of CB is a functor
1
f
(
g
6 2
X
/ C
that is, a diagram
X1
Xf *
Xg
4 X2
in C. An arrow œÑ between two such diagrams X and Y is a natural transformation œÑ : X
+3 Y ,
that is a pair of arrows œÑ1 and œÑ2 in C
X1
Xf *
œÑ1

Xg
4 X2
œÑ2

Y1
Y f
*
Y g
4 Y2
such that
‚Ä¢ œÑ2 ‚ó¶Xf = Y f ‚ó¶œÑ1
‚Ä¢ œÑ2 ‚ó¶Xg = Y g ‚ó¶œÑ1
15

For every two categories C and B there exists a ‚Äòconstant‚Äô functor
‚àÜ: C
/ CB
called the diagonal functor mapping an object C of C to the constant diagram of shape B
in C where all objects are copies of C and all arrows are copies of idC : C
/ C. Thus:
(‚àÜC)(B) def
= C
(‚àÜC)(h) = idC
for every object B and every arrow h of B. Similarly, ‚àÜmaps an arrow f : C
/ C‚Ä≤ to the
constant natural transformation
(‚àÜf)B
def
= f : (‚àÜC)(B)
/ (‚àÜC‚Ä≤)(B)
for every B in B.
Example 4.2 Let B be the category ¬∑ ¬∑ with two objects and no arrows (apart from the
identities). Then
C
¬∑ ¬∑
is the category of pairs (C1, C2) of objects of C. The diagonal functor
‚àÜ: C
/ C
¬∑ ¬∑
acts as follows.
C
f


/
C
f

C
f

C‚Ä≤
C‚Ä≤
C‚Ä≤
Consider now a (not necessarily universal) arrow from a generic object (C1, C2) of C
¬∑ ¬∑ to
the above diagonal functor
C
¬∑ ¬∑ o
C : ‚àÜ
That is, an object of ((C1, C2) ‚Üì‚àÜ). By deÔ¨Ånition, this consists of two arrows f1 : C1
/ C
and f2 : C2
/ C of C. As a useful convention, let us write them as follows:
C1
f1
 A
A
A
A
A
A
A
C2
f2
~}}}}}}}
C
(1)
Exercises
E 4.1 Consider two parallel functors T, U : C
/ D, a functor G : D
/ E, a functor
F : B
/ C, and a natural transformation œÑ : T
+3 U.
a) Try and deÔ¨Åne a natural transformation, say GœÑ, of type
GT
+3 GU
16

b) Try and deÔ¨Åne a natural transformation, say œÑF , of type
TF
+3 UF
E 4.2 Assume the universal arrow from a generic object (C1, C2) of C
¬∑ ¬∑
to ‚àÜC exists,
where ‚àÜis the diagonal functor from C to C
¬∑ ¬∑ . Describe it.
E 4.3 Same as the previous exercise but for the category of Example 4.1 instead of Example
4.2.
17

Lecture VI
5
Colimits
5.1
Coproducts
A coproduct of two objects C1 and C2 of a category C is a universal arrow the object
(C1, C2) of C
¬∑ ¬∑ to ‚àÜC exists, where ‚àÜis the diagonal functor from C to C
¬∑ ¬∑ . A moment
thought shows that such a universal (if it exists!) consists of an object of C, which we denote
by C1 + C2, together with two arrows
C1
Œπ1
/ C1 + C2
C2
Œπ2
o
such that for every pair of arrows as in (1) there exists a unique arrow (which we denote
[f1, f2]) making the following diagram commute.
C1
f1
>
>
>
>
>
>
>
>
>
>
>
>
Œπ1
/ C1 + C2
[f1,f2]




C2
f2
            Œπ2
o
C
Equationally:
f1 = [f1, f2] ‚ó¶Œπ1
[f1, f2] ‚ó¶Œπ2 = f2
Terminology.
The object C1 + C2 is called the coproduct (or sum) of C1 and C2; the
arrows Œπ1 and Œπ2 are the Ô¨Årst and second injection of the coproduct; the arrow [f1, f2] is the
copairing of f1 and f2. With respect to the general deÔ¨Ånition of universal arrow, we have
that:
‚Ä¢ C1 + C2 = F(C1,C2)
‚Ä¢ (Œπ1, Œπ2) = Œ∑(C1,C2)
‚Ä¢ [f1, f2] = (f1, f2)‚ôØ
Clearly, by Theorem 3.1, if C has all coproducts then + is a functor.
Remark. A coproduct puts two objects together while keeping them distinct, that is, keeping
the ability to do a case analysis.
5.2
Coequalisers
For B = 1
u
(
v
6 2 , we have already described the category CB.
Let us change notation
though, and rather than explicitly writing the functor X from B to C we consider directly
the objects of CB as parallel arrows
X
f
*
g
4 X‚Ä≤
(2)
18

in C.
Note that before we used the symbols f and g for the arrows of B, while now we use them
for a generic object of CB. You should now write the arrows of CB using this new notation.
After having done this you should be able to see an arrow from (2) to the diagonal functor
corresponding to this category as an arrow h : X‚Ä≤
/ Z such that
h ‚ó¶f = h ‚ó¶g
The coequaliser of two parallel arrows X
f
*
g
4 X‚Ä≤ in C is the universal arrow (if it exists)
from them (regarded as an object of CB) to the diagonal functor CB o
C : ‚àÜ. Spelling out
the details, it consists of an object C and an arrow q : X‚Ä≤
/ C of C such that
q ‚ó¶f = q ‚ó¶g
and, moreover, every h : X‚Ä≤
/ Z such that h ‚ó¶f = h ‚ó¶g factorises uniquely through q;
formally, the latter means that there exists a unique arrow h‚ôØ: C
/ Z in C such that
h‚ôØ‚ó¶q = h. Diagrammatically:
h ‚ó¶f = h ‚ó¶g
X
f
*
g
4 X‚Ä≤
q
/
h
 A
A
A
A
A
A
A
A
C
h‚ôØ



Z
5.3
Pushouts
For
B =
1
u 
v===
2
3
we have that the objects of CB are diagrams in C of the form
X1
f
}||||||||
g
!B
B
B
B
B
B
B
B
X2
X3
and arrows to the diagonal functor are pairs of arrows h and k making the diagram
X1
f
}||||||||
g
!B
B
B
B
B
B
B
B
X2
h
!C
C
C
C
C
C
C
C
X3
k
}{{{{{{{{
Z
(3)
19

commute. Equationally: h ‚ó¶f = k ‚ó¶g.
The universal such an arrow (if it exists) is called the pushout of f and g. Spelling out the
details, it consists of a pair of arrows p and q in C such that p ‚ó¶f = q ‚ó¶g
X1
f
}||||||||
g
!B
B
B
B
B
B
B
B
X2
p
!C
C
C
C
C
C
C
C
X3
q
}{{{{{{{{
P
(4)
and with the universal property that for every commuting square as in (3) there exists a
unique arrow r such that r ‚ó¶p = h and r ‚ó¶q = k. Diagrammatically:
X1
f
}||||||||
g
!B
B
B
B
B
B
B
B
X2
h

p
!C
C
C
C
C
C
C
C
X3
k
 q
}{{{{{{{{
P
r



Z
The diagram in (4) is then called a pushout square.
When f = g, the pushout of f and f is called the cokernel pair of f.
5.4
Initial objects as universal arrows
The initial object (if it exists) in a category C is easily seen to be the universal arrow from the
unique object of the Ô¨Ånal category 1 (with one object and no arrow apart from the identity)
to the unique functor from C to 1. But then note that
C0 ‚àº= 1
where 0 is the initial category with no object, hence the initial object of C is the universal
arrow from the unique object of C0 to the diagonal functor ‚àÜ: C
/ 1.
Exercises
E 5.1 (Important.) Use universality to prove that in every category with coproducts the
following holds:
a) C1 + C2 ‚àº= C2 + C1
b) (C1 + C2) + C3 ‚àº= C1 + (C2 + C3)
20

c) C + 0 ‚àº= C (where 0 is the initial object in C)
E 5.2 Prove that the following law holds for the copairing operation.
For all arrows f1 : A1
/ C, f2 : A2
/ C, h : C
/ D,
h ‚ó¶[f1, f2] = [h ‚ó¶f1, h ‚ó¶f2]
E 5.3 Let C(A, C) be the set of arrows from A to C in C.
Prove that in every category C with coproducts the following isomorphism (of sets!) holds:
C(A1, C) √ó C(A2, C) ‚àº= C(A1 + A2, C)
Hint. Do not use universality but just note that one side of the isomorphism is:
(A1
f1 / C, A2
f1 / C) 
/ A1 + A2
[f1,f2]/ C
E 5.4 Prove that the disjoint union
X + Y ‚àº= X
¬∑‚à™Y def
= {(0, x) | x ‚ààX} ‚à™{(1, y) | y ‚ààY }
of two sets X and Y is the coproduct of X and Y in Set, the category of sets and functions.
(Hint: the left injection X
/ X + Y maps x to ‚ü®0, x‚ü©.)
E 5.5 Recall N is the category of Ô¨Ånite ordinals
0 = ‚àÖ, 1 = {0}, 2 = {0, 1}, 3 = {0, 1, 2}, . . .
and all functions. Prove that in N coproduct is addition:
n + m ‚àº= n + m
E 5.6 The coproduct in Mon, the category of monoids and monoid homomorphisms, of two
free monoids A‚àóand B‚àóis simple:
A‚àó+ B‚àó‚àº= (A + B)‚àó
Prove this.
Can you construct the coproduct X + Y of two monoids X and Y that are not free? (It is
not easy! You still need to use the coproduct in Set and free monoids, but also quotient by a
suitable equivalence relation.)
21

Lecture VII
5.5
Generalised Coproducts
Let S be an arbitrary set (regarded as a category, ie objects are elements of S and all arrows
are identities). An S-coproduct is a universal arrow from an object of CS to the corresponding
diagonal functor. This generalises the (binary) coproduct. One writes
a
s‚ààS
Cs
for the coproduct of an S-indexed family of objects Cs in C and
Œπs : Cs
/ a
s‚ààS
Cs
for the s-th injection. One also has a generalised notion of copairing which we shall call
cotupling.
5.6
Finite Colimits
Proposition 5.1 A category with pushouts and initial object has also coproducts.
Proof. We can use the pushout square
0
~} } } }
 A
A
A
A
C1
p
 A
A
A
A
A
A
A
C2
q
~}}}}}}}
P
to deÔ¨Åne
C1 + C2
def
= P,
Œπ1
def
= p,
Œπ2
def
= q
One can check that this is a coproduct.
2
Proposition 5.2 A category with coproducts and coequalisers has also pushouts.
Proof. The pushout of
X1
f
}||||||||
g
!B
B
B
B
B
B
B
B
X2
X3
is obtained by Ô¨Årst taking the coproduct X2 +X3 and then the coequaliser of the two parallel
arrows Œπ1 ‚ó¶f and Œπ2 ‚ó¶g of type X
/ X2 + X3.
2
Remark 5.3 A coequaliser is a pushout of parallel arrows. An initial object is a ‚àÖ-coproduct.
22

5.7
Colimits
A colimit for a functor J : B
/ C is nothing but a universal arrow from J to the diagonal
functor ‚àÜ: C
/ CB. Let us try and understand this concise deÔ¨Ånition in more elementary
terms. First of all we have learnt to see a functor J : B
/ C as a diagram of shape B in C.
A generic arrow œÑ : J
+3 ‚àÜY from J to ‚àÜis then a cone under J consisting of a vertex Y
(which is an object of C) and one arrow
œÑB : JB
/ Y
(of C) for each object B of B making the triangle
JB
œÑB
!B
B
B
B
B
B
B
B
Ju
/ JB‚Ä≤
œÑB‚Ä≤
}{{{{{{{{
Y
for every arrow u : B
/ B‚Ä≤. In other words, all the subcones commute.
With a slight abuse of notation we shall also write œÑ : J
+3 Y for such a cone.
A colimit for J is then a universal such cone. That is, a cone ¬µ : J
/ ColimJ which is
universal in the sense that every cone œÑ : J
+3 Y factorises uniquely through ¬µ; that is, there
exists a unique arrow œÑ ‚ôØ: ColimJ
/ Y in C such that for every B in B the triangle
JB
¬µB

œÑB
$H
H
H
H
H
H
H
H
H
ColimJ œÑ ‚ôØ
/_
_
_
Y
commutes.
Please note that this triangle, in contrast with the previous one, does not involve the arrows of B.
Terminology: ¬µ is the colimiting cone of J, the vertex ColimJ of the colimit is the colim-
iting object of J, and œÑ ‚ôØis mediating arrow corresponding to œÑ given by the universal
property of the colimit.
Theorem 5.4 A category with coequalisers and generalised coproducts is cocomplete in
the sense that it has all (small) colimits:
Given J : B
/ C, for B small, ColimJ is the coequaliser of the parallel arrows
`
u‚ààArrB J(dom(u))
f
.
g
0
`
B‚ààObjB JB
where f is the copairing of the family of arrows
J(dom(u))
Œπdom(u)/ `
B‚ààObjB JB
and g is the copairing of the family of arrows
J(dom(u))
Ju / J(cod(u))
Œπcod(u)/ `
B‚ààObjB JB
23

Moreover, the universal cone ¬µ : J
+3 ColimJ at an object B is
JB
ŒπB
/ `
B‚ààObjB JB
q
/ ColimJ
where q is the coequalising arrow.
Proof. We shall prove this theorem later on (using duality).
2
Exercises
E 5.7 An arrow X
f / Y in C is epi if, for every pair of parallel arrows Y
g
)
h
5 Z in C,
g ‚ó¶f = h ‚ó¶f
implies that
g = h
In Set the epi arrows are the surjective functions.
Prove that f is epi if and only if the following square is a pushout (more precisely, a cokernel
pair).
X
f

f
/ Y
idY

Y
idY
/ Y
E 5.8 In Set coequalisers exist. Indeed, the coequaliser q : Y
/ C of two parallel functions
f, g : X
/ Y is obtained by quotienting Y by the least equivalence relation E ‚äÜY √ó Y
containing all pairs ‚ü®f(x), g(x)‚ü©for x in X.
Check that this is really the case, proving that such a quotient enjoys the universal property
of coequalisers.
E 5.9 We have constructed in two previous exercises coproducts and coequalisers in the
category Set of sets and functions. Now use Proposition 5.2 to construct pushouts in Set.
Do the same in Mon.
24

Lecture VIII
6
Duality and Limits
Duality Principle
Every categorical property, structure or theorem expressed in terms of diagrams
of arrows has a dual such ‚Äì obtained by reversing the arrows.
Note:
you reverse arrows but not functors!
But you do reverse natural transformations
(because they are families of arrows).
Examples
Statement
Dual Statement
X
f / Y
X
f
o
Y
X = dom(f)
X = cod(f)
X
id / X
X
id
o
X
h = g ‚ó¶f
h = f ‚ó¶g
isomorphism
isomorphism
initial object 0
Ô¨Ånal object 1
initial objects are unique up to iso
Ô¨Ånal objects are unique up to iso
universal arrow from A to U : D
/ C
universal arrow from U : D
/ C to A
coproducts
products
coequalisers
equalisers
pushouts
pullbacks
colimits
limits
...
...
6.1
Universal arrows from a functor to an object
Given a functor U : D
/ C and an object A of C, a universal arrow from U to A consists
of an object, say, GA of D and an arrow ŒµA : UGA
/ A of C such that for every object Y
of D and every arrow h : UY
/ A of C there exists a unique arrow h‚ô≠: Y
/ GA such that
ŒµA ‚ó¶Uh‚ô≠= h. Diagrammatically:
D
U
/ C
Y
h‚ô≠



UY
h
"D
D
D
D
D
D
D
D
D
Uh‚ô≠



GA
UGA
ŒµA / A
25

6.2
Products
The dual of a coproduct is called a product. Formally, given two objects C1 and C2 of a
category C, their product (if it exists) consists of an object C1 √ó C2 of C and two arrows
œÄ1 : C1√óC2
/ C1 and œÄ2 : C1√óC2
/ C2 of C such that for every object A of C and every pair
of arrows f : A
/ C1 and g : A
/ C2 of C there exists a unique arrow ‚ü®f, g‚ü©: A
/ C1 √ó C2
such that f = œÄ1 ‚ó¶‚ü®f, g‚ü©and g = œÄ2 ‚ó¶‚ü®f, g‚ü©. Diagrammatically:
A
f
            ‚ü®f,g‚ü©




g
>
>
>
>
>
>
>
>
>
>
>
>
C1
C1 √ó C2
œÄ1
o
œÄ2 / C2
Terminology. œÄ1 and œÄ2 are the Ô¨Årst and second projection of the product, respectively;
‚ü®f, g‚ü©is the pairing of f with g.
C1 + C2
C1 √ó C2
=
=
universal arrow
universal arrow
from (C1, C2)
from ‚àÜ: C
/ C
¬∑ ¬∑
to ‚àÜ: C
/ C
¬∑ ¬∑
to (C1, C2)
E 6.1 Dualise C1 + C2 ‚àº= C2 + C1, (C1 + C2) + C3 ‚àº= C1 + (C2 + C3), C + 0 ‚àº= C;
6.3
Equalisers
The dual of a coequaliser is called an equaliser. Formally, given two parallel arrows
X
f
*
g
4 X‚Ä≤
in C, their equaliser consists of an object E and an arrow e : E
/ X of C such that
f ‚ó¶e = g ‚ó¶e
and, moreover, every h : Z
/ X such that f ‚ó¶h = g ‚ó¶h factorises uniquely through e;
formally, the latter means that there exists a unique arrow h‚ô≠: Z
/ E in C such that
e ‚ó¶h‚ô≠= h. Diagrammatically:
f ‚ó¶h = g ‚ó¶h
Z
h‚ô≠



h
 @
@
@
@
@
@
@
@
E
e
/ X
f
*
g
4 X‚Ä≤
Terminology. E is called the equalising object.
26

Coequaliser of X ‚áíX‚Ä≤
Equaliser of X ‚áíX‚Ä≤
=
=
universal arrow
universal arrow
from X ‚áíX‚Ä≤
from ‚àÜ: C
/ C
¬∑ ‚áí¬∑
to ‚àÜ: C
/ C
¬∑ ‚áí¬∑
to X ‚áíX‚Ä≤
6.4
Pullbacks
The dual of a pushout is called a pullback.
Formally, given two arrows with a common
codomain
X2
f
!B
B
B
B
B
B
B
B
X3
g
}||||||||
X1
their pullback consists of a pair of arrows p and q in C such that f ‚ó¶p = g ‚ó¶q
P
p
}{{{{{{{{
q
!C
C
C
C
C
C
C
C
X2
f
!B
B
B
B
B
B
B
B
X3
g
}||||||||
X1
(5)
and with the universal property that for every pair of arrows h and k in C such that f‚ó¶h = g‚ó¶k
there exists a unique arrow r such that p ‚ó¶r = h and q ‚ó¶r = k. This is expressed in the
following diagram, where everything in sight commutes:
Z
h

k

r



P
p
}{{{{{{{{
q
!C
C
C
C
C
C
C
C
X2
f
!B
B
B
B
B
B
B
B
X3
g
}||||||||
X1
The diagram in (5) is then called a pullback square.
When f = g, the pullback of f and f is called the kernel pair of f.
Note that the category B such that a pullback is a universal arrow from the diagonal functor
‚àÜ: C
/ CB, where
B = 2
u ===
3
v
 
1
27

and not
B =
1
u 
v===
2
3
as in the case of pushouts.
E 6.2 Dualise the following statements.
‚Ä¢ a category with coproducts and coequalisers has pushouts;
‚Ä¢ a category with initial object and pushouts has coproducts.
6.5
Monos
The notion of a monic arrow is dual to that of an epi arrow: an arrow Y
f / Z in C is monic
if, for every pair of parallel arrows X
g
)
h
5 Y
in C,
f ‚ó¶g = f ‚ó¶h
implies that
g = h
In Set the monic arrows are the injective functions.
We can now generalise Lemma 1.2.
Proposition 6.1 (Right inverses are monic) Given two composable arrows f and g, if
g ‚ó¶f is the identity then f is monic.
Dually, left inverses are epi.
Right inverses are called sections and left inverses are called retractions.
E 6.3 Dualise the following statement.
‚Ä¢ f is epi iÔ¨Ä
X
f

f
/ Y
idY

Y
idY
/ Y
is a pushout square;
28

6.6
Limits
A limit for a functor F : B
/ C is a universal arrow from F to the diagonal functor
‚àÜ: C
/ CB. That is, a cone ¬µ : LimF
/ F which is universal in the sense that every cone
œÑ : Y
+3 F factories uniquely through ¬µ; that is, there exists a unique arrow œÑ ‚ôØ: Y
/ LimF
in C such that for every B in B the triangle
Y
œÑB
zvvvvvvvvv
œÑ ‚ôØ



FB
¬µB / LimF
commutes.
Terminology: ¬µ is the limiting cone of F, LimF is the limiting object of F, and œÑ ‚ôØis
mediating arrow corresponding to œÑ given by the universal property of the limit.
Exercises
E 6.4 Pasting Lemma. [Mac97, page 72, exercise 8]
Assume everything in sight in the following diagram commutes.
¬∑

/ ¬∑

/ ¬∑

¬∑
/ ¬∑
/ ¬∑
(Assign your favourite names to the objects and arrows.)
‚Ä¢ If both squares are pullbacks, prove that the outside rectangle (with top and bottom
edges the evident composites) is a pullback.
‚Ä¢ If the outside rectangle and the right-hand square are pullbacks, prove that so is the
left-hand square.
E 6.5 Pullbacks of monics are monic.
Consider a square
¬∑
/
m‚Ä≤

¬∑
m

¬∑
/ ¬∑
which is a pullback.
First prove that if m is monic then also m‚Ä≤ is monic; next dualise this property.
E 6.6 First prove that equalisers are monic; next dualise this property.
E 6.7 Dualise the notion of colimit and the theorem saying that a category with coequalisers
and generalised coproducts has all (small) colimits (Thm 5.4). Try and prove the theorem.
29

E 6.8 The category Set of sets and functions has equalisers. The equalising object for two
parallel functions f, g : X
/ X‚Ä≤ is the set
E def
= {x ‚ààX | f(x) = g(x)}
The exercise consists in Ô¨Årst checking that this is indeed the case and then use it to give an
explicit description of pullbacks in Set in terms of cartesian products and equalisers.
30

Lecture IX
7
Adjunctions
‚ÄúThe multiple examples, here and elsewhere, of adjoint functors tend to show that adjoints
occur almost everywhere in many branches of Mathematics. It is the thesis of this book that
a systematic use of all these adjunctions illuminates and clariÔ¨Åes these subjects.‚Äù [Mac97]
Category theory is the study of universal properties, formalised in terms of the notion of
universal arrow. Constructions are canonical when they enjoy a universal property, but what
does actually give rise to such constructions? The answer is ‚Äì adjunctions.
We introduce adjunctions using, once more, universal arrows, and later show how, in turn,
adjunctions deÔ¨Åne universal arrows. It is important to bear in mind that each of the three
equivalent presentations of adjunctions that we study has its own relevance and that a full
understanding of this deep notion requires an understanding of all three presentations.
7.1
From Universal Arrows to Adjunctions
The hypotheses of Theorem 3.1 suÔ¨Éce to deÔ¨Åne an adjunction. Indeed, we can extend that
theorem as follows.
Theorem 7.1 Given a functor U : D
/ C, if for every object A of C there exists a universal
arrow Œ∑A : A
/ UFA from A to U, then the following holds:
1. The function F from objects of C to objects of D extends, by universality, to a functor
F : C
/ D
in the opposite direction of U.
2. The arrow Œ∑A is natural in A
Œ∑ : Id
+3 UF
3. For every object Y of D there is a universal arrow ŒµY : FUY
/ Y from F to Y obtained
by universality:
C
D
U
o
UY
idUY
$J
J
J
J
J
J
J
J
J
Œ∑UY / UFUY
UŒµY

FUY
ŒµY
def
= (idUY )‚ôØ



UY
Y
4. The arrow ŒµY is natural in Y
Œµ : FU
+3 Id
31

Proof. The proof of (1) is Theorem 3.1. The proofs of (2) and (4) are an immediate conse-
quence of the way F and Œµ are deÔ¨Åned. Before proving (3) let us restate the theorem in a
more schematic way. Our hypothesis:
‚àÄA ‚ààC
‚àÉŒ∑A : A
/ UFA
such that
‚àÄf : A
/ UY
‚àÉ!f‚ôØ: FA
/ Y s.t. f = Uf‚ôØ‚ó¶Œ∑A
The Ô¨Årst part of the theorem gives:
‚àÄh : A
/ B
Fh def
= (Œ∑B ‚ó¶h)‚ôØ: FA
/ FB
The third part consists of
‚àÄY ‚ààD
‚àÉ!ŒµY
def
= (idUY )‚ôØ: FUY
/ Y s.t. idUY = UŒµY ‚ó¶Œ∑UY
plus the claim that the following holds:
‚àÄg : FA
/ Y
‚àÉ!g‚ô≠: A
/ UY s.t. g = ŒµY ‚ó¶Fg‚ô≠
Existence of g‚ô≠.
g‚ô≠def
= A
Œ∑A / UFA
Ug / UY
Note that, g‚ô≠is deÔ¨Åned in such a way that it makes
g = (g‚ô≠)‚ôØ
hence it suÔ¨Éces to show that
(g‚ô≠)‚ôØ= ŒµY ‚ó¶Fg‚ô≠
But this follows from the naturality of Œ∑.
Uniqueness of g‚ô≠. Assume given a k : A
/ UY such that g = ŒµY ‚ó¶Fk. We have k‚ôØ: FA
/ Y .
If k‚ôØ= ŒµY ‚ó¶Fk then k‚ôØ= g = (g‚ô≠)‚ôØ, hence we would have the desired result that k = g‚ô≠. But
this again follows from the naturality of Œ∑.
2
We can now dualise:
32

C
U
o
D
C
F / D
‚àÄA ‚ààC : A
Œ∑A / UFA
‚àÄY ‚ààD : FUY
ŒµY / Y
‚àÄf:A
/UY
‚àÉ!f‚ôØ:FA
/Y s.t. f=Uf‚ôØ‚ó¶Œ∑A
‚àÄg:FA
/Y
‚àÉ!g‚ô≠A
/UY s.t. g=ŒµY ‚ó¶Fg‚ô≠
‚àÄh:A
/B
Fhdef
= (Œ∑B‚ó¶h)‚ôØ:FA
/FB
‚àÄk:X
/Y
Ukdef
= (k‚ó¶ŒµX)‚ô≠:UX
/UY
F extends to a functor opposite to U
U extends to a functor opposite to F
Œ∑ : Id
+3 UF
Œµ : FU
+3 Id
‚àÄY ‚ààD
‚àÉ!ŒµY
def
= (idUY )‚ôØ:FUY
/Y s.t. idUY =UŒµY ‚ó¶Œ∑UY
‚àÄA‚ààC
‚àÉ!Œ∑A
def
= (idF A)‚ô≠:A
/UFA s.t. idF A=ŒµF A‚ó¶FŒ∑A
Œµ : FU
+3 Id
Œ∑ : Id
+3 UF
‚àÄg:FA
/Y
‚àÉ!g‚ô≠:A
/UY s.t. g=ŒµY ‚ó¶Fg‚ô≠
‚àÄf:A
/UY
‚àÉ!f‚ôØ:FA
/Y s.t. f=Uf‚ôØ‚ó¶Œ∑A
g‚ô≠def
= Ug ‚ó¶Œ∑A
f‚ôØdef
= ŒµY ‚ó¶Ff
g = (g‚ô≠)‚ôØ
f = (f‚ôØ)‚ô≠
Note that ( )‚ôØand ( )‚ô≠are each other‚Äôs inverse; that is, writing C(A, B) for the (possibly
large) set of arrows from A to B in C, we have the following bijection:
D(FA, Y )
‚àº=
C(A, UY )
f‚ôØ
o

f
g

/
g‚ô≠
Exercise
E 7.1 Prove that the operation ( )‚ôØassociated to a universal arrow Œ∑A : A
/ UFA from A
to U is natural in the sense that, for every f : A
/ UY ,
‚àÄh : A‚Ä≤
/ A
(f ‚ó¶h)‚ôØ= f‚ôØ‚ó¶Fh
and
‚àÄk : Y
/ Y ‚Ä≤
(Uk ‚ó¶f)‚ôØ= k ‚ó¶f‚ôØ
(The Ô¨Årst is by naturality of Œ∑ and the second by deÔ¨Ånition.)
Dually, for every g : FA
/ Y ,
‚àÄk : Y
/ Y ‚Ä≤
(k ‚ó¶g)‚ô≠= Uk ‚ó¶g‚ô≠
and
‚àÄh : A‚Ä≤
/ A
(g ‚ó¶Fh)‚ô≠= g‚ô≠‚ó¶h
33

7.2
Adjunctions
DeÔ¨Ånition 7.2 An adjunction from a category C to a category D is given by a pair of
opposite functors
C
F
) D
U
i
and, for all A in C and Y in D, a bijection
œïA,Y : D(FA, Y ) ‚àº= C(A, UY )
which is natural in the sense that, for every g : FA
/ Y ,
‚àÄk : Y
/ Y ‚Ä≤
œï(k ‚ó¶g) = Uk ‚ó¶œï(g)
and
‚àÄh : A‚Ä≤
/ A
œï(g ‚ó¶Fh) = œï(g) ‚ó¶h
Notation and terminology. The above adjoint situation is denoted by
C
F
)
‚ä•
D
U
i
or by ‚ü®F ‚ä£U, œï‚ü©and F is the left adjoint of U, while U is the right adjoint of F; also,
œï‚àí1(f) and œï(g) are the left and right adjuncts of f and g respectively.
The above shows that we already know two situations where we can ‚Äòconstruct‚Äô an adjunction,
namely when we have a universal arrow from A to U for every object A of C or, equivalently,
when we have a universal arrow from F to Y for every object Y of D.
An example is given by a category C which has all colimits of shape B:
CB
Colim

‚ä£
C
‚àÜ
U
The dual case is for a category C with all limits of shape B:
CB
Lim
	
‚ä£
C
‚àÜ
I
An other example is the adjunction from Set to Mon, with the forgetful functor as right
adjoint and the free monoid functor as left adjoint.
34

Lecture X
7.3
From Adjunctions to Universal Arrows
We have seen that universal arrows give rise to adjunctions. We now prove the converse.
First note that the naturality conditions for an adjunction ‚ü®F ‚ä£U, œï‚ü©are equivalent to the
following: for every f : A
/ UY ,
‚àÄk : Y
/ Y ‚Ä≤
œï‚àí1(Uk ‚ó¶f) = k ‚ó¶œï‚àí1(f)
and
‚àÄh : A‚Ä≤
/ A
œï‚àí1(f ‚ó¶h) = œï‚àí1(f) ‚ó¶Fh
Theorem 7.3 An adjunction
C
F
)
‚ä•
D
U
i
œïA,Y : D(FA, Y ) ‚àº= C(A, UY )
determines:
i) a natural transformation
Œ∑ def
= œï(idF ) : IdC
+3 UF
with Œ∑A : A
/ UFA universal from A to U for every object A of C and such that
œï(g) = Ug ‚ó¶Œ∑A. Such Œ∑ is called the unit of the adjunction.
ii) a natural transformation
Œµ def
= œï‚àí1(idU) : FU
+3 IdD
with ŒµY : FUY
/ Y universal from F to Y for every object Y of D and such that
œï‚àí1(f) = ŒµY ‚ó¶Ff. Such Œµ is called the counit of the adjunction.
Moreover the triangular identities
U
Œ∑U +3
idU
&F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
UFU
UŒµ

U
F
FŒ∑

idF
&F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
FUF
ŒµF
+3 F
hold for such Œ∑ and Œµ.
Proof. (Unit.) For every f : A
/ UY put
f‚ôØdef
= œï‚àí1(f)
We have that f = Uœï‚àí1(f) ‚ó¶œï(idFA) because, by the naturality of œï, Uœï‚àí1(f) ‚ó¶œï(idFA) =
œï(œï‚àí1(f) ‚ó¶idFA). This shows existence. Uniqueness is similar, since if we have a g such that
f = Ug ‚ó¶œï(idFA) then the same reasoning as above shows that œï(g) = f, hence g = œï‚àí1(f).
This also gives:
œï(g) = Ug ‚ó¶œï(idFA)
35

(Counit.) By duality, this also prove the counit case.
(Triangular identities.) We prove the Ô¨Årst triangular identity ‚Äì the proof of the second is
dual.
UŒµY ‚ó¶Œ∑UY = UŒµY ‚ó¶œï(idFUY ) = œï(ŒµY ‚ó¶idFUY ) = œï(ŒµY ) = idUY
2
Corollary 7.4 œï is completely determined by its value at idF .
2
Sometimes adjunctions are denoted using unit and counit instead of the bijection œï:
‚ü®F ‚ä£U, Œ∑, Œµ‚ü©
Corollary 7.5 Adjoint functors determine each other uniquely up to isomorphism.
2
Proposition 7.6 Let F and U be two opposite functors
C
F
) D
U
i
Let Œ± : IdC
+3 UF and Œ≤ : FU
+3 IdD be two natural transformations such that the following
triangular identities hold:
U
Œ±U +3
idU
&F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
UFU
UŒ≤

U
F
FŒ±

idF
&F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
FUF
Œ≤F
+3 F
Then F is left adjoint to U.
2
Exercises
E 7.2 Naturality of œï. We have called a bijection of hom-sets
œïA,Y : D(FA, Y ) ‚àº= C(A, UY )
natural if for every g : FA
/ Y ,
‚àÄk : Y
/ Y ‚Ä≤
œï(k ‚ó¶g) = Uk ‚ó¶œï(g)
and
‚àÄh : A‚Ä≤
/ A
œï(g ‚ó¶Fh) = œï(g) ‚ó¶h
The exercise consists in showing that this is naturality in a formal sense, namely with respect
to the following functors associated to the (possibly large) sets D(FA, Y ) and C(A, UY ). Note
that the exercise is easy once you understand how these (very important) functors act.
36

The claim is that œï is natural in Y with respect to
D
D(FA, )
/ SET
Y
k


/

/
D(FA, Y )
k‚ó¶( )

‚àãg
Y ‚Ä≤

/
D(FA, Y ‚Ä≤)
‚àãk ‚ó¶g
and
D
C(A,U( ))
/ SET
Y
k


/

/
C(A, UY )
Uk‚ó¶( )

‚àãf
Y ‚Ä≤

/
C(A, UY ‚Ä≤)
‚àãUk ‚ó¶f
and it is natural in A with respect to the contravariant functors
Cop
C( ,UY )
/ SET
A

/

/
C(A, UY )
( )‚ó¶h

‚àãf
A‚Ä≤
h
O

/
C(A‚Ä≤, UY )
‚àãf ‚ó¶h
and
Cop
D(F( ),Y )
/ SET
A

/

/
D(FA, Y )
( )‚ó¶Fh

‚àãg
A‚Ä≤
h
O

/
D(FA‚Ä≤, Y )
‚àãg ‚ó¶Fh
E 7.3 Do you see what an adjunction boils down to in case the two categories are preorders
and the two functors are order-reversing functions?
E 7.4 Composition of Adjoints.
Show that if
C
F
)
‚ä•
D
U
i
F
(
‚ä•
E
U
i
37

then
C
FF (
‚ä•
E
UU
i
What are the unit and counit of FF ‚ä£UU?
38

Lecture XI
7.4
Adjoints for Preorders
See [Mac97, ¬ßIV.5].
8
Preservation of Limits and Colimits
A functor F : C
/ D preserves colimits of shape B if for every functor H : B
/ C then:
1. if ColimH exists then also ColimFH exists and ColimFH = F(ColimH), and
2. if ¬µ : H
+3 ‚àÜColimH is a colimiting cone for H then
FH
F¬µ+3 F‚àÜColimH ‚àº= ‚àÜFColimH ‚àº= ‚àÜColimFH
is a colimiting cone for FH.
Theorem 8.1 Left adjoints are cocontinuous in the sense that they preserve colimits.
Dually, right adjoints are continuous, ie they preserve limits.
This theorem is often used to prove that a functor is not an adjoint.
In order to prove the theorem we need the following lemma.
Lemma 8.2 Adjunctions lift to functor categories:
CB
F B *
‚ä•
DB
UB
j
C
F
)
‚ä•
‚àÜ
O
D
U
i
‚àÜ
O
F B‚àÜ= ‚àÜF,
UB‚àÜ= ‚àÜU
where, for all H : B
/ C and K : B
/ C,
F B(H) def
= FH,
UB(K) def
= UK
that is,
F B = F ‚ó¶( ),
UB = U ‚ó¶( )
Proof. Unit and counit of F B ‚ä£UB are deÔ¨Åned using unit and counit of F ‚ä£U: for every H
in CB,
Œ∑B
H
def
= Œ∑H,
ŒµB
K
def
= ŒµK
Then the proof follows from the triangular identities for F ‚ä£U instantiated at H and K. 2
39

Proof of the Theorem.
Use composition of adjoints, uniqueness of adjoints, the fact that
adjunctions lift to functor categories, and the fact that (assuming that all colimits and limits
of shape B exist) ‚àÜis right adjoint to Colim and left adjoint to Lim. For colimits:
CB
F B
+
‚ä•
‚ä¢
Colim

DB
UB
k
‚ä¢
Colim

C
F
*
‚ä•
‚àÜ
J
D
U
j
‚àÜ
J
F B‚àÜ= ‚àÜF,
UB‚àÜ= ‚àÜU
FColim ‚ä£‚àÜU, ColimF B ‚ä£UB‚àÜ, and ‚àÜU = UB‚àÜimply that FColim ‚àº= ColimF B, hence
FColimH ‚àº= ColimF BH ‚àº= ColimFH
.
This proves (1). Try and prove (2) as an exercise.
2
Note that this implies, for instance, that the coproduct of two free monoids A‚àóand B‚àóover
objects A and B of a category with coproducts C is (A + B)‚àó, since ( )‚àó, together with its
canonical monoid structure, is left adjoint to the forgetful functor U : Mon
/ Set.
Another application of the theorem gives us that if a functor is a left adjoint then it preserves
epis, because epis are colimits, namely suitable pushouts as shown in an exercise. Dualising
this, right adjoints preserve monos.
As mentioned above, the theorem is also useful to prove that a functor has no adjoint. For
instance, let A be an object of a complete category C: why, if A is not the Ô¨Ånal object 1 then
the functor product with A
√ó A : C
/ C
cannot have a left adjoint?
Exercises
E 8.1 Study Freyd‚Äôs Adjoint Functor Theorem [Mac97, ¬ßV.6].
E 8.2 This is important: try and do it!
Given an adjunction ‚ü®F ‚ä£U, Œ∑, Œµ‚ü©from C to D, deÔ¨Åne a functor T and a natural transformation
¬µ as follows, where T 2 def
= T ‚ó¶T:
T def
= UF : C
/ C
¬µ def
= UŒµF : T 2
+3 T
Prove that then the following diagrams (monoid laws in some sense!) commute.
T 3
T¬µ +3
¬µT

T 2
¬µ

T 2
¬µ
+3 T
T
Œ∑T
+3
idT
$A
A
A
A
A
A
A
A
A
A
A
A
A
A
T 2
¬µ

T
TŒ∑
ks
idT
z }}}}}}}
}}}}}}}
T
Hint. For the triangles use the triangular identities of the adjunction.
40

Lecture XII
9
Monads
A monad T = ‚ü®T, Œ∑, ¬µ‚ü©on a category C consists of
‚Ä¢ an endofunctor T : C
/ C on C,
‚Ä¢ a ‚Äòunit‚Äô Œ∑ : IdC
+3 T and
‚Ä¢ a ‚Äòmultiplication‚Äô ¬µ : T 2
+3 T
such that the diagrams
T 3
T¬µ +3
¬µT

T 2
¬µ

T 2
¬µ
+3 T
T
Œ∑T
+3
idT
$A
A
A
A
A
A
A
A
A
A
A
A
A
A
T 2
¬µ

T
TŒ∑
ks
idT
z }}}}}}}
}}}}}}}
T
commute.
Exercise 8.2 shows that:
Theorem 9.1 Every adjunction gives rise to a monad.
2
Thus, in particular, the adjunction we have seen from Set to Mon gives rise to a monad
mapping an object X to the free monoid X‚àóover it (and forgetting the monoid structure).
9.1
Algebras of a Monad
We have seen how to get from adjunctions to monads. We now look at the converse.
DeÔ¨Ånition 9.2 Given a monad T = ‚ü®T, Œ∑, ¬µ‚ü©on a category C, the (Eilenberg-Moore) category
T-Alg (or CT ) of T-algebras has objects X = ‚ü®X, h‚ü©given by an object X of C and a morphism
h : TX
/ X of C satisfying the following T-algebra laws:
T 2X
Th /
¬µX

TX
h

TX
h
/ X
X
Œ∑X /
idX
!D
D
D
D
D
D
D
D
TX
h

X
The (homo)morphisms f : ‚ü®X, h‚ü©
/ ‚ü®X‚Ä≤, h‚Ä≤‚ü©of T-Alg are given by morphisms f : X
/ X‚Ä≤
such that
TX
Tf /
h

TX‚Ä≤
h‚Ä≤

X
f
/ X‚Ä≤
commutes.
2
41

Example 9.3 For every object X of C, the multiplication of the monad ¬µX : TTX
/ TX
is a T-algebra; note that ¬µX is also T-algebra homomorphism from ‚ü®T 2X, ¬µTX‚ü©to ‚ü®TX, ¬µX‚ü©.
There is an evident forgetful functor
UT : T-Alg
/ C
mapping an algebra ‚ü®X, h‚ü©to its carrier X, as in the forgetful functor of monoids. The natural
question to ask then is whether this functor has an adjoint. We start by considering whether
we can build a functor in the opposite direction at all. Well, we know that ¬µX : TTX
/ TX
is a T-algebra, for every object X; moreover, by naturality of ¬µ, we have that
T 2X
T 2f /
¬µX

T 2X‚Ä≤
¬µX‚Ä≤

TX
Tf
/ TX‚Ä≤
commutes for every map f : X
/ X‚Ä≤. Because T is a functor, this assignments give then
rise to a functor
F T : C
/ T-Alg
Theorem 9.4 (Every monad is deÔ¨Åned by its algebras.)
For every monad T = ‚ü®T, Œ∑, ¬µ‚ü©on a category C, the above functor F T is left adjoint to the
forgetful functor UT .
Proof. The unit Œ∑T of the adjunction is simply the unit Œ∑ of the monad; the value of the
counit ŒµT at a T-algebra ‚ü®X, h‚ü©is simply the structure map h : F T UT ‚ü®X, h‚ü©= TX
/ X.
For such Œ∑T and ŒµT the triangular identities are trivial (exercise).
2
Exercises
E 9.1 Finish oÔ¨Äthe proof of Theorem 9.4.
E 9.2 Prove that for every monoid M = ‚ü®M, e, m‚ü©, the endofunctor
√ó M : Set
/ Set
mapping a set X to the set X √ó M is a monad. (Hint. Unit and multiplication of the monad
are deÔ¨Åned in terms of the two operations e and m of the monoid.)
E 9.3 What are the algebras of the monad of the previous exercise?
42

Lecture XIII
9.2
Comparison Functors
An adjunction ‚ü®F ‚ä£U, ŒΩ, Œµ‚ü©from C to D is a resolution for a monad T = ‚ü®T, Œ∑, ¬µ‚ü©on C if
T = UF, Œ∑ = ŒΩ, ¬µ = UŒµF . Clearly, the above adjunction ‚ü®F T ‚ä£UT , Œ∑T , ŒµT ‚ü©is a resolution
for the monad T. The following theorem shows that actually it is the Ô¨Ånal resolution (in a
suitable sense):
Theorem 9.5 Comparison of adjunctions with algebras.
For every resolution ‚ü®F ‚ä£U, Œ∑, Œµ‚ü©from C to D of a monad T there exists a unique comparison
functor K : D
/ CT such that UT K = U and KF = F T :
D
K
/_
_
_
_
_
_
_
U

‚ä£
CT
UT
w
‚ä£
C
F
W
F T
7
Proof. The functor K maps an object Y of D to the morphism UŒµY : TUY
/ UY , which
is a T-algebra structure because of one triangular identity for the adjunction F ‚ä£U and
naturality of the counit Œµ. The action of K on arrows is f 
/ Uf and this clearly gives a
functor. One can easily check that this is the unique functor which satisÔ¨Åes the two equations
above.
2
The above comparison functor is an isomorphism if and only if the functor U ‚Äòcreates‚Äô suitable
coequalisers (Beck‚Äôs Theorem [Mac97, Thm VI.7.1]). This is true for the forgetful functors
associated to each category of algebras in the traditional sense (eg, monoids, groups, semi-
lattices, etc), hence the ordinary notion of algebraic variety is encompassed by the notion
of algebras of a monad [Mac97, ¬ßVI.8]. Try and see as an exercise how the algebras of the
free monoid monad ( )‚àólook like and what is the isomorphism given by the corresponding
comparison functor.
9.3
Free Algebras
The above theorem shows that the category CT of T-algebras is Ô¨Ånal (in a suitable sense)
among the resolutions of the monad T. The initial resolution also exists and is of interest.
It is given by the category of free T-algebras. Equivalently, for every resolution F ‚ä£U from
C to D of T one can consider the category with objects of the form FA and maps simply all
the maps FA
/ FB in D. There is a way to reduce every such representation to a canonical
one which does not depend on the choice of the resolution. The trick is to use the bijection
of the adjunction to have everything expressed in terms of C and T, rather than D and F.
Indeed we have that, since D(FA, Y ) ‚àº= C(A, UY ), in particular
D(FA, FB) ‚àº= C(A, UFB) = C(A, TB)
This leads to the following deÔ¨Ånition.
43

DeÔ¨Ånition 9.6 The Kleisli category CT of a monad T = ‚ü®T, Œ∑, ¬µ‚ü©on a category C has objects
given by the very same objects of C and morphisms A
/T B given by morphisms A
/ TB
in C. The identity on an object A is given by the unit of the monad at A, ie Œ∑A : A
/ TA,
and composition of f : A
/ TB with g : B
/ TC is deÔ¨Åned ad ¬µC ‚ó¶Tg ‚ó¶f : A
/ TC. The
monad laws ensure that this is indeed a category.
2
The following two opposite functors
FT : C
/ CT
(A
g / B) 
/ (A
g / B
Œ∑B / TB)
UT : CT
/ C
(A
f / TB) 
/ (TA
Tf / T 2B
¬µB / TB)
give another resolution FT ‚ä£UT of the monad T which is initial:
CT
L
/_
_
_
_
_
_
_
UT

‚ä£
D
U
w
‚ä£
C
FT
X
F
7
(Cf [Mac97, ¬ßVI.5].)
One can easily show that, in any category C with Ô¨Ånal object and coproducts, the endofunctor
1 +
: C
/ C is a monad (with evident unit and multiplication). For C = Set, its Kleisli
category is the category pSet of sets and partial functions, and its category of algebras is the
category Set‚àóof pointed sets and point-preserving functions; the (super-unique!) comparison
functor between the two categories is an isomorphism.
Exercises
E 9.4 Consider the powerset endofunctor on Set
PX = {Œ± ‚äÜX}
P(f)(Œ±) = {fx | x ‚ààŒ±}
This is a monad, with the singleton function as unit and the ‚Äòbig union‚Äô operation as multi-
plication:
Œ∑X : X
/ PX
x 
/ {x}
¬µX : P2X
/ PX
A 
/ [
A =
[
Œ±‚ààA
Œ±
Prove that its algebras are complete semilattices and its maps are join-preserving functions.
Next, prove that the Kleisli category of the powerset monad has sets as objects and binary
relations as arrows. (Hint. Note that a function of type X
/ PY is the same as a relation
R ‚äÜX √ó Y .) What is composition?
E 9.5 Read the Introduction of [Mac97].
44

Lecture XIV
10
Lawvere Theories
The traditional way of deÔ¨Åning an algebraic theory is by giving a set of operators and some
axioms. For instance, the algebraic theory of groups consists of a multiplication of arity 2,
an inverse of arity 1, and a unit of arity 0 together with the following axioms:
(x ¬∑ y) ¬∑ z = x ¬∑ (y ¬∑ z),
x ¬∑ x‚àí1 = e = x‚àí1 ¬∑ x,
x ¬∑ e = x = e ¬∑ x
A group is then a model (in the sense of Ô¨Årst-order equational logic) for this theory, that is,
a set G and operations of type G2
/ G, G
/ G, G0 = 1
/ G validating the axioms. This,
however, is only one of the possible presentations of the theory of groups. Indeed, if we use
just one operator t of arity 3 (think of t(x, y, x) as x ¬∑ y‚àí1 ¬∑ z) and the axioms
t(x, x, y) = y = t(y, x, x),
t(t(x, u, z), y, v) = t(x, t(y, z, u), v) = t(x, u, t(z, y, v))
we are still deÔ¨Åning the same theory, in the sense that its models are again exactly groups.
We have seen that monads (and their algebras) allow for a presentation-independent account
of algebraic theories, but, as their name suggests, they do not reveal much of the structures
giving rise to them. An alternative approach which, while being independent from the choice
of presentation, still treats the operators as primitive data is in terms of Lawvere theories, a
categorical formulation of the notion of clones (ie suitably closed sets of operations) used in
universal algebra [Coh81].
DeÔ¨Ånition 10.1 A Lawvere theory is a category L with Ô¨Ånite products and with a distin-
guished object A such that every other object of L is a Ô¨Ånite power of A:
‚àÄX ‚ààObjL. X ‚àº= An (for some n ‚ààN)
The object A is called the fundamental object of L. An arrow œâ : An
/ A of L is called an
n-ary operation (and, in particular, arrows of type A0 = 1
/ A are called constants). One
can regard operations of arity n as terms with By the universal property of products, we have
L(An, Am) ‚àº= L(An, A)m
(6)
that is, every arrow Œ± : An
/ Am is the tupling of m operations Œ±i : An
/ A (i = 1, . . . , m).
Note that every Lawvere theory L has to contain at least the projections
œÄ(n)
i
: An
/ A
since L has Ô¨Ånite products.
DeÔ¨Ånition 10.2 A model (or algebra) of a Lawvere theory L consists of a product preserving
functor
M : L
/ Set
(More generally, one can consider models to be product preserving functors M : L
/ C,
where C is any category with Ô¨Ånite products.)
45

The value M(A) of the model M at the fundamental object A is the carrier of the model.
Let us put
|M| def
= M(A)
(7)
Since M preserves Ô¨Ånite products, we have
M(An) ‚àº= (MA)n = |M|n
thus the image under M of an n-ary operation Œ± of L is a function
MŒ± : |M|n
/ |M|
A natural transformation Œ∏ : M
+3 N between two models is easily seen as an algebra
homomorphism. Indeed, if
(MA)n (Œ∏A)n /
MŒ±

(NA)n
NŒ±

MA
Œ∏A
/ NA
commutes for every operation Œ± : An
/ A then Œ∏ is natural, because every map of L is given
by tupling operations and the models preserve Ô¨Ånite products (hence projections).
For every Lawvere theory L we have thus a category Mod(L) with L-models as objects and
natural transformations between them as arrows. The deÔ¨Ånition in (7) extends to a (forgetful)
functor
|‚àí| : Mod(L)
/ Set
This has a (free model) left adjoint
FL : Set
/ Mod(L)
For every Ô¨Ånite set S with n elements,
FL(S) = L(AS, ) ‚àº= L(An, ) : L
/ Set
Thus, the carrier of the free model over a set of n generators is the set FL(S)(A) = L(An, A)
of all n-ary operations of L.
Given a set of operators, one can easily generate the Lawvere theory associated to it: the
n-ary operations correspond to terms with (possibly) n variables; in particular, projections
correspond to variables. In general, Lawvere theories are in 1-1 correspondence with Ô¨Ånitary
monads on Set, for a suitable notion of ‚ÄòÔ¨Ånitary‚Äô. The latter are, in turn, in 1-1 correspon-
dence with ordinary algebraic theories. These correspondences extend to models of algebraic
theories, algebras of Ô¨Ånitary monads on Set, and ordinary algebras.
Note. Lawvere theories are not treated in [Mac97]. I used material from [Law73b], [Wra75] and [Bor94].
You might want to have a look at [Coh81] for an account of universal algebra which also contains (in
the 1981 edition) a chapter on Category Theory and Universal Algebra, including Lawvere theories.
46

Exercises
E 10.1 Let Nop be the opposite of the category of natural numbers and all functions. Show
that Lawvere theories are equivalent to product preserving functors
Nop
/ C
that are bijective on objects.
E 10.2 Consider, for any set A, the functor (product with A)
√ó A : Set
/ Set
X 
/ X √ó A
Prove that it preserve colimits.
Hint. Show that it has a right adjoint, namely the exponential functor
( )A : Set
/ Set
X 
/ Set(A, X)
h 
/ h ‚ó¶( )
mapping a set X to the set of all functions from A to X. The counit ŒµX : XA √ó A
/ X of
the adjunction maps a pair ‚ü®f, a‚ü©to f(a), ie it is evaluation.
47

Lecture XV
11
Cartesian Closed Categories
Recall that we have ‚Äòinternalised‚Äô the notion of element using maps from the Ô¨Ånal object;
that is, we have regarded maps x : 1
/ X from 1 to an object X as elements x of X.
Now, intuitively, a cartesian closed category is a category which can ‚Äòthink‚Äô of its own arrows
as being functions, that is, a category with internal notions of function space, evaluation,
composition, etc.
For functions, the key idea is that the evaluation of a function f : A
/ X is a universal
arrow from the functor product with A in Set
√ó A : Set
/ Set
to X.
DeÔ¨Ånition 11.1 Let A be an object of a category C with binary products. The right adjoint
of
√ó A : C
/ C, if it exists, is denoted by
( )A : C
/ C
and is called the exponential functor; the corresponding counit is called the evaluation
map and we denote it by
evA
X : XA √ó A
/ X
.
Note that Cat has exponentials, namely functor categories.
One way to denote exponentials XA is as A
+3 X. This stems from a logical reading of the
adjunction. Indeed, in a preorder P with meets ‚àß, if we interpret ‚â§as logical entailment ‚ä¢
(sorry for the overloading, but please do not read this as adjunction but as entailment here!)
and ‚àßas conjunction, then the above adjunction is nothing but the well-known deduction
theorem:
a ‚àßb ‚ä¢c
a ‚ä¢(b
+3 c)
The exponential XA gives the desired notion of internal function space. For instance, we can
now deÔ¨Åne an internal notion of composition:
CB √ó BA
/ CA
CB √ó BA √ó A
id√óevA
B/
CB √ó B
evB
C/ C
If a category C has Ô¨Ånal object, binary products and exponentials, then we have:
1 √ó A ‚àº= A
f / B
1
‚åúf‚åù/ BA
48

The map
‚åúf‚åù, an internal element of BA, is called the name of f.
Note that we can apply and compose names of functions. For instance:
1
‚åúf‚åù/ BA
1
a / A
1
‚ü®‚åúf‚åù,a‚ü©/
BA √ó A
evA
B/ B
DeÔ¨Ånition 11.2 A cartesian closed category (CCC) is a category C with binary prod-
ucts, exponentials, and terminal object, that is, the following functors have right adjoints:
C
! / 1
C
‚àÜ/ C ¬∑ ¬∑
C
√óA/ C
for every A in C.
11.1
Curry-Howard-Lawvere Isomorphism
I strongly recommend to read Dana Scott‚Äôs seminal article on the relationship between carte-
sian closed categories and the Œª-calculus [Sco80], both for its form and its content.
Exercises
E 11.1 Prove that in a CCC, just like in arithmetic, the following holds:
1. 1A ‚àº= 1
2. X1 ‚àº= X
3. (X √ó Y )A ‚àº= XA √ó Y A
4. XA√óB ‚àº= (XA)B
Hint: 1 and 3 are trivial, while for 2 and 4 use transpositions and the uniqueness of adjoints.
E 11.2 Recall the contravariant functor
C( , A) : Cop
/ Set
from the naturality exercise (Exercise 7.3.4) on adjunctions.
Prove that, for all functors
K : Cop
/ Set, any natural transformation
œÑ : C( , A)
+3 K
is completely determined by its value at the identity idA : A
/ A on A.
Hint. Use the naturality of œÑ and the fact that we start from a set of arrows to prove that
œÑX(f) = (Kf)(œÑA(idA))
for every arrow f : X
/ A.
49

Lecture XVI
12
Variable Sets and Yoneda Lemma
First a deÔ¨Ånition we shall use later: a functor H : C
/ D is full (resp. faithful) if the function
C(X, Y )
/ D(FX, FY )
f 
/ Hf
is surjective (resp. injective).
We now consider the functor category SetCop for a given small category C. Functors X :
Cop
/ Set are called presheaves over C and can be regarded as sets varying over C or
C-sets: for each object c of C we have a set Xc ‚Äì the (variable) set X at stage c.
The
functoriality of X corresponds to a ‚Äòright action‚Äô of C on X: for every map f : c‚Ä≤
/ c in C
we have a function (we are in Set!) Xf : Xc
/ Xc‚Ä≤ mapping the elements x of the set X at
c to elements x.f of X at stage c‚Ä≤. Using the notation x.f = X(f)(x) we have just introduced
we can write the functoriality condition of X as
x.(f ‚ó¶g) = (x.f).g
x.idc = x
for every g : c‚Ä≤‚Ä≤
/ c‚Ä≤, which explains why we can speak of a right action of C over X. The
elements x of Xc are also called elements of sort c.
A canonical example of variable set is given by the representable functor
yC(c) def
= C( , c) : Cop
/ Set
for every object c in C. (Cf the naturality exercise (Exercise 7.3.4) on adjunctions.) The
following proposition tells us that in fact the map
yC : C
/ SetCop
c 
/ C( , c)
is a full and faithful functor embedding C into SetCop.
Proposition 12.1 For all objects c and d in C, every natural transformation from C( , c) to
C( , d) is of the form
C( , h) : C( , c)
+3 C( , d)
for some map h : c
/ d in C.
2
The proof of this fact, in turn, is a corollary of the following lemma, due to the Japanese
categorist Yoneda (and so the above embedding yC is called the Yoneda embedding of C into
the category of presheaves over C).
Lemma 12.2 (Yoneda.) For all presheaves X : Cop
/ Set, there is a bijection (in Set!)
between the set of natural transformations from yC(c) = C( , c) to a variable set X and the
elements of X at the stage c:
SetCop(yC(c), X) ‚àº= Xc
50

Proof. First note that any natural transformation
œÑ : C( , c)
+3 X
is completely determined by its value at the identity idc : c
/ c on c. Indeed, the naturality
of œÑ implies that the diagram
c
C(c, c)
( )‚ó¶f

œÑc
/ Xc
( ).f

c‚Ä≤
f
O
C(c‚Ä≤, c)
œÑc‚Ä≤ / Xc‚Ä≤
commutes for every map f : c‚Ä≤
/ c. This is a diagram of functions, hence œÑc‚Ä≤(e ‚ó¶f) = œÑc(e).f
for all e ‚ààC(c, c), ie for all endomaps e : c
/ c on c. In particular, we can take e = idc and
obtain
œÑc‚Ä≤(f) = œÑc(idc).f
Now, clearly, the desired bijection can be obtained by mapping a natural transformation œÑ :
yC(c)
+3 X to œÑc(idc) ‚ààXc and, conversely, an element x of Xc to the natural transformation
(f : c‚Ä≤
/ c) 
/ x.f.
2
I learned to look at presheaves as C-sets from [Law89]. I would like now to quote the following
passage from that paper which beautifully explains what the Yoneda lemma really tells us:
For any C-set X and any object a of C, the set of elements of X of sort a is
naturally identiÔ¨Åable with the set of SetCop-morphisms from C( , a) to X.
It
is thus justiÔ¨Åed, as well as extremely useful, to adjoin to the parenthetically-
introduced abuse still a further abuse of notation and to henceforth regard the
elements of X of sort a as morphisms a
/ X in SetCop; thus the action of C on
any C-set becomes a special case of composition of morphisms
c‚Ä≤
f
/
xf
@
@
@
@
@
@
@
c
x

X
now all in SetCop as does the application of a morphism œï to an element, and the
homogeneity (naturality) property of every X
/ Y in SetCop becomes a special
case of the associativity of composition in SetCop:
c‚Ä≤
f
/
xf
@
@
@
@
@
@
@
c
x

œïx
 @
@
@
@
@
@
@
@
X
œï
/ Y
Proposition 12.3 For every small category C, the category SetCop is cartesian closed.
51

Proof. Assume the exponential XY exists for two presheaves X and Y over C. Then, by
Yoneda,
XY (c) ‚àº= SetCop(yC(c) √ó Y, X)
(8)
for every object c in C. For the rest of the proof see, eg, [MM92, Prop. I.6.1, pg 46].
2
Note that there is also a dual Yoneda embedding, namely
Cop
/ SetC
c 
/ C(c, )
and a corresponding lemma.
Not surprisingly, the Yoneda embedding yC has a universal property. First note that SetCop
pointwisely inherits all limits and colimits from Set thus, in particular it is cocomplete.
Proposition 12.4 For every functor H from C to any cocomplete category E there exists a
unique cocontinuous (ie colimit preserving) functor H‚ôØ: SetCop
/ Set such that H‚ôØ‚ó¶yC = H.
C
yC /
H
#F
F
F
F
F
F
F
F
F
F
SetCop
H‚ôØ
cocontinuous



E
Proof. It is a consequence of the fact that every C-set X is a (canonic) colimit of a diagram
of representable functors. (See, eg, [Mac97, ¬ßIII.7].)
2
Thus SetCop is the free cocomplete category over C and the fact that yC is full and faithful
implies that even if C may miss some or all colimits, we can always regard it as part of the
larger category SetCop which does have all colimits. Note that this almost gives us a left
adjoint to the forgetful functor from the category of cocomplete categories and cocontinuous
functors to the category of all categories, except from the fact that we would need a Yoneda
embedding not only for small but also for large categories (and in that case yC would be the
universal arrow from C to such forgetful functor).
Exercise
E 12.1 (Important.) Let 2 be the two-elements set {true, false}. For every subset S of a given
set X we have a corresponding characteristic function:
œÜS : X
/ 2
œÜS(x) =
 true
if x ‚ààS
false
otherwise
Prove that
S
/

1
true

X
œÜS
/ 2
is a pullback square (where S
/ X is the evident inclusion function and S
/ 1 is the unique
arrow from S into the terminal object 1).
52

Lecture XVII
13
Set theory without sets
13.1
Subobject ClassiÔ¨Åers
Two monic arrows m : S ‚Ü£X and m‚Ä≤ : S‚Ä≤ ‚Ü£X with a common codomain are equivalent if
there is an isomorphism f : S ‚àº= S‚Ä≤ such that m‚Ä≤ ‚ó¶f = m. A subobject of X is an equivalence
class of monic arrows into X. Write Sub(X) for the set of all subobjects of X. If the category
has pullbacks then this extends to a functor Sub : Cop
/ Set. In the sequel we shall identify
subobjects with the monic arrows representing them.
Recall that a category with terminal object and pullbacks has Ô¨Ånite limits.
DeÔ¨Ånition 13.1 A subobject classiÔ¨Åer for a category C with Ô¨Ånite limits consists of an object
‚Ñ¶(of C) and a monic arrow true : 1 ‚Ü£‚Ñ¶universal in the sense that for every monic S ‚Ü£X
there exists a unique arrow œÜS : X
/ ‚Ñ¶such that
S
/


1
true

X
œÜS
/_
_
_
‚Ñ¶
is a pullback square.
In other words there is an isomorphism
Sub(X) ‚àº= C(X, ‚Ñ¶)
S ‚Ü£X
X
/ ‚Ñ¶
natural in X.
An example is clearly 2 in Set. But also sets over time X : œâ
/ Set have a subobject
classiÔ¨Åer which gives ‚Äútime till truth‚Äù: it is the constant presheaf
N‚àû
p
/ N‚àû
p
/ N‚àû
p
/ ¬∑ ¬∑ ¬∑
where N‚àûis the set of natural numbers with inÔ¨Ånity and p is the predecessor function (map-
ping n + 1 to n, while leaving 0 and ‚àûunchanged). Then 0 is true, n is ‚Äòn steps till true‚Äô,
and ‚àûis ‚Äònever true‚Äô. In general:
Proposition 13.2 The category SetCop of presheaves over a small category C has a subobject
classiÔ¨Åer.
Proof. See, eg, [MM92, ¬ßI.4].
2
53

13.2
Topoi
If a category is cartesian closed and has a subobject classiÔ¨Åer then one can deÔ¨Åne a power
object
PX def
= ‚Ñ¶X
for every object X of C. Note that then:
S ‚Ü£X
X
/ ‚Ñ¶
1
/ PX
In the case C = Set, PX is the powerset of X and the above correspondences boil down to the
fact that subsets are the same as predicates and the same as elements of powerset. Note also
that the evaluation map X √ó ‚Ñ¶X
/ ‚Ñ¶is nothing but the element predicate X √ó PX
/ ‚Ñ¶.
DeÔ¨Ånition 13.3 An elementary topos is a cartesian closed category E with all Ô¨Ånite limits
and a subobject classiÔ¨Åer.
Examples: the category Set of ordinary sets, but also all categories SetCop of variable sets.
Exercises
E 13.1 We know from Proposition 13.2 that every category of presheaves has a subobject
classiÔ¨Åer ‚Ñ¶. Use Yoneda to show that
‚Ñ¶(c) ‚àº= Sub(yC(c))
for every object c of C.
E 13.2 Nice ‚Äì it gives a very powerful notion!
For any category E, a functor
C
J / D
induces a functor
EC
( )‚ó¶J
o
ED
between the functor categories ED and EC; its action on an object H of ED, ie on a functor
H : D
/ E, is simply precomposition with J:
C
J / D H / E
The question is: how does a universal arrow from a generic object G of EC to the functor
( ) ‚ó¶J : ED
/ EC look like? It is a pair (L, Œ∑G) with L : D
/ E and Œ∑G : G
+3 LJ such
that . . . ?
Hint. Beware that the diÔ¨Éculty is in the fact that our objects are functors and our maps
are natural transformations. The diagram I would like to see should have the functors writ-
ten as arrows rather than as objects; the fact that composition with J is a simple (meta)
functor makes it possible to express the universal property of the universal arrow in not too
complicated a diagram, although you need three dimensions.
54

Lecture XVIII
14
Kan Extensions
The Ô¨Årst edition of [Mac71] ends with a section entitled ‚ÄòAll concepts are Kan extensions‚Äô.
Here we introduce Kan extensions using, once more, universal arrows. In fact, (left) Kan
extensions are the answer to Exercise 13.2:
DeÔ¨Ånition 14.1 A left Kan extension of a functor G : C
/ E along a functor J : C
/ D is
a universal arrow ‚ü®LanJG, Œ±‚ü©from G (regarded as an object of the functor category EC) to
EC
( )‚ó¶J
o
ED
Thus it consists of a functor
LanJG : D
/ E
and a natural transformation
Œ± : G
+3 LanJG ‚ó¶J
which are universal in the sense that for every functor H : D
/ E and every natural trans-
formation œï : G
+3 H ‚ó¶J there exists a unique natural transformation œï‚ôØ: LanJG
+3 H
such that œï = (œï‚ôØ)J ‚ó¶Œ±.
EC
ED
( )‚ó¶J
o
G
Œ±
+3
œï
!)J
J
J
J
J
J
J
J
J
J
J
J
J
J
J
J
J
J
J
J
LanJG ‚ó¶J
(œï‚ôØ)J

LanJG
œï‚ôØ






H ‚ó¶J
H
More elementary, the left Kan extension of G along J consists of a diagram
C
J
/
Œ± +3
G

D
LanJG

E
such that for all diagrams
C
J
/
œï +3
G

D
H

E
there exists a unique œï‚ôØ: LanJG
+3 H such that œï = (œï‚ôØ)J ‚ó¶Œ±.
Alternatively, we can state this in terms of the following bijection natural in H:
55

LanJG
+3 H
G
+3 HJ
Dually, a right Kan extension of G along J is a universal arrow ‚ü®RanJG, Œ≤‚ü©from
EC
( )‚ó¶J
o
ED
to G:
C
J
/
Œ≤
ks
G

D
RanJG

E
HJ
+3 G
H
+3 RanJG
Proposition 14.2 Colimits are left Kan extensions.
Proof. First note that objects and arrows of a category C are in 1-1 correspondence with
functors of type 1
/ C and natural transformations between them, respectively. Next, note
that a cone from a functor F : B
/ C to an object X : 1
/ C is a natural transformation
from F to X‚ó¶!, where ! is the unique functor from B to the terminal category 1. It is then
clear that:
ColimF ‚àº= Lan!F
and the colimiting cone is the natural transformation of the Kan extension.
2
Dually, limits are right Kan extensions.
Proposition 14.3 A functor has a right adjoint if and only if the left Kan extension of the
identity along F exists and is preserved by F.
Proof. See [Mac97, Thm X.7.2].
2
Further examples: essential geometric morphisms of presheaves and of monoid actions in
particular.
15
2-Categories
See [Mac97, ¬ßXII.3].
56

Further Reading
The aim of this course was to learn to reason in a categorical way. I hope we have achieved
this.
Now you should be in the position to easily access Mac Lane‚Äôs book [Mac71].
In
particular, Chapters IV, V, and VI will strengthen your understanding of adjunctions, limits,
and monads, Chapter VII will introduce you to monoidal categories, and Chapter X to Kan
extensions. The new edition [Mac97] also contains important material on topos theory, 2-
categories, bicategories, and presheaves. Beyond that, I would recommend categorical logic
and Ô¨Åbrations [Jac99, Pho92], enriched category theory [Law73a], and any further writing by
Lawvere such as [Law70, Law69, Law91].
Links
‚Ä¢ <http://www.mta.ca/‚àºcat-dist/categories.html>
‚Ä¢ <http://www.acsu.buffalo.edu/‚àºwlawvere/>
References
[Bor94] F. Borceux. Handbook of Categorical Algebra. Cambridge University Press, Cam-
bridge, 1994.
[Coh81] P.M. Cohn. Universal Algebra, volume 6 of Mathematics and its applications. Reidel,
1981.
[Jac99]
Bart Jacobs. Categorical Logic and Type Theory. Number 141 in Studies in Logic
and the Foundations of Mathematics. North Holland, Elsevier, 1999.
[Law69] F. W. Lawvere. Diagonal arguments and cartesian closed categories. In Category
Theory, Homology Theory and their Applications, II (Battelle Institute Conference,
Seattle, Wash., 1968, Vol. Two), pages 134‚Äì145. Springer-Verlag, Berlin, 1969.
[Law70] F. William Lawvere. Equality in hyperdoctrines and comprehension schema as an
adjoint functor. In A. Heller, editor, Proceedings 17th AMS Symp. in Pure Maths.
on Applications of Categorical Algebra, New York, NY, USA, 10‚Äì11 Apr 1968, vol-
ume 17 of Proceedings Symposia in Pure Maths., pages 1‚Äì14. American Mathematical
Society, Providence, RI, 1970.
[Law73a] F. William Lawvere. Metric spaces, generalized logic, and closed categories. In
Rendiconti del Seminario Matematico e Fisico di Milano, XLIII. TipograÔ¨Åa Fusi,
Pavia, 1973.
[Law73b] F. William Lawvere. Perugia notes. Unpublished, 1973.
[Law89] F. William Lawvere. Qualitative distinctions between some toposes of generalized
graphs. In Categories in Computer Science and Logic, volume 92. American Math-
ematical Society, 1989.
57

[Law91] F. W. Lawvere. Some thoughts on the future of category theory. In A. Carboni,
M. C. Pedicchio, and G. Rosolini, editors, Category Theory. Proceedings of the Inter-
national Conference held in Como, Italy, July 22‚Äì28, 1990, volume 1488 of Lecture
Notes in Mathematics, pages 1‚Äì13. Springer-Verlag, 1991.
[Mac71] Saunders Mac Lane. Categories for the Working Mathematician, volume 5 of Grad-
uate Texts in Mathematics. Springer-Verlag, New York, 1971.
[Mac86] S. Mac Lane. Mathematics Form and Function. Springer Verlag, New York, 1986.
[Mac97] S. Mac Lane. Categories for the Working Mathematician, volume 5 of Graduate
Texts in Mathematics. Springer-Verlag, Berlin, 2nd edition, 1997. (1st ed., 1971).
[MM92] Saunders Mac Lane and Ieke Moerdijk.
Sheaves in geometry and logic.
LNMS.
Springer Verlag, 1992.
[Pho92] W. Phoa. An introduction to Ô¨Åbrations, topos theory, the eÔ¨Äective topos and modest
sets. Technical Report ECS-LFCS-92-208, University of Edinburgh, 1992. Available
as <http://www.dcs.ed.ac.uk/lfcsreps/EXPORT/92/ECS-LFCS-92-208>.
[Sco80]
Dana Scott. Relating theories of the Œª-calculus. In J.R. Hindley and J.P. Seldin,
editors, To H.B. Curry: Essays on combinatory logic, lambda calculus and formalism,
pages 403‚Äì450. Academic Press, 1980.
[Wra75] G. Wraith. Algebraic theories. Technical Report 22, Matematisk Institut, Aarhus
Universitet, February 1975.
58

