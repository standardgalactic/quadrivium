Cover

PREFACE
ABOUT THE BOOK
This book contains 200 very important JavaScript interview questions.
ABOUT THE AUTHOR
Happy Rawat has around 15 years of experience in software development. 
He helps candidates in clearing technical interview in tech companies. 
About the book

Fundamentals
1. Basics & Fundamentals
2. Variables & Datatypes
3. Operators & Conditions
4. Arrays
5. Loops
6. Functions
7. Strings
8. DOM
9. Error Handling
10. Objects
Advanced
11. Events
12. Closures
13. Asynchronous - Basics
14. Asynchronous - Promises
15. Asynchronous - Async Await
16. Browser APIs & Web Storage
17. Classes & Constructors
18. ECMAScript & Modules
19. Security & Performance
Scenario & Coding (50 Questions)
20. Tricky Short Questions
21. Feature Development
22. Coding Questions
Chapters

Chapter 1: Basics
Q1. What is JavaScript? What is the role of JavaScript engine?
Q2. What are client side and server side?
Q3. What are variables? What is the difference between var, 
let, and const ?
Q4. What are some important string operations in JS?
Q5. What is DOM? What is the difference between HTML and 
DOM?
Q6. What are selectors in JS?
Q7. What is the difference between getElementById, 
getElementsByClassName and getElementsByTagName?
Q8. What are data types in JS? 
Q9. What are operators? What are the types of operators in 
JS?
Q10. What are the types of conditions statements in JS?

Chapter 1: Basics
Q11. What is a loop? What are the types of loops in JS?
Q12. What are Functions in JS? What are the types of 
function?
Q13. What are Arrow Functions in JS? What is it use?
Q14. What are Arrays in JS? How to get, add & remove 
elements from arrays?
Q15. What are Objects in JS? 
Q16. What is Scope in JavaScript?
Q17. What is Hoisting in JavaScript?
Q18. What is Error Handling in JS?
Q19. What is JSON?
Q20. What is asynchronous programming in JS? What is its 
use?

Q. What is JavaScript? What is the role of JavaScript engine?
❖JavaScript is a programming language that is used for 
converting static web pages to interactive and dynamic
web pages.
❖A JavaScript engine is a program present in web 
browsers that executes JavaScript code. 
JavaScript Engines
V8
(Chrome)
Spider-
Monkey
(Firefox)
Javascript
-Core
(Safari)
Chakra
(Edge)

Q. What is JavaScript? What is the role of JavaScript engine?

Q. What are Client side and Server side?
❖A client is a device, application, or software 
component that requests and consumes 
services or resources from a server.
❖A server is a device, computer, or software 
application that provides services, resources, 
or functions to clients.

Q. What are variables? What is the difference between var, let, and const ?
❖Variables are used to store data.

Q. What are variables? What is the difference between var, let, and const ?
❖const can be assigned only once, and its 
value cannot be changed afterwards.
❖var creates a function-scoped
variable.
❖let creates a block-scoped
variable

Q. What are some important string operations in JS?

Q. What are some important string operations in JS?

Q. What is DOM? What is the difference between HTML and DOM?
DOM Tree(Real)
❖The DOM(Document Object Model) represents the web 
page as a tree-like structure that allows JavaScript to 
dynamically access and manipulate the content and 
structure of a web page.
Static HTML

Q. What are selectors in JS?
❖Selectors in JS help to get specific elements from 
DOM based on IDs, class names, tag names.
DOM Selector 
methods
getElementById()
getElementsByClassName()
getElementsByTagName()
querySelector()
querySelectorAll()

Q. What is the difference between 
getElementById, getElementsByClassName and getElementsByTagName?

Q. What are data types in JS? 
Types of Data Types
Primitive
Numbers
Strings
Booleans
Undefined
Null
Non-Primitive
Object
Array
Function
Date
RegExp
❖A data type determines the type of variable.

Q. What are operators? What are the types of operators in JS?
❖Operators are symbols or keywords used 
to perform operations on operands.

Q. What are operators? What are the types of operators in JS?
Type of Operators
Arithmetic 
Operators
Assignment 
Operators
Comparison 
Operators
Logical Operators
String Operators

Q. What are the types of conditions statements in JS?

Q. What are the types of conditions statements in JS?
Types of condition statements
1. If/ else statements
2. Ternary operator
3. Switch statement

Q. What is a loop? What are the types of loops in JS?
JavaScript loops
for
while
do-while
for…of
for…in
❖A loop is a programming way to run a piece of 
code repeatedly until a certain condition is met. 
1. Initialization
2. Condition
3. Increment

Q. What are Functions in JS? What are the types of function?
❖A function is a reusable block of code
that performs a specific task.
Function keyword 
Function name 
Parameters list
Function body 
Function call 
Argument list

Q. What are Functions in JS? What are the types of function?
Types of 
Functions
Named Function
Anonymous Function
Function Expression
Arrow Function
IIFE
Callback Function
Higher-Order Function

Q. What are Arrow Functions in JS? What is it use?
❖Arrow functions, also known as fat arrow 
functions, is a simpler and shorter way for 
defining functions in JavaScript. 
Parameters list
Function body

Q. What are Arrays in JS? How to get, add & remove elements from arrays?
❖An array is a data type that allows you to 
store multiple values in a single variable. 
Multiple
Variables
Array1
Array2
Array3
Array4

Q. What are Arrays in JS? How to get, add & remove elements from arrays?
Arrays methods
Get
indexOf()
find()
filter()
Slice()
Add
push()
concat()
Remove
pop()
shift()
splice()
Modify
map()
forEach()
Others
join()
length
sort()
reverse()
reduce()
some()
every()

Q. What are Arrays in JS? How to get, add & remove elements from arrays?
❖Pictorial representation of important method of arrays

Q. What are Objects in JS? 

Q. What are Objects in JS? 
❖An object is a data type that allows you to 
store key-value pairs. 
Object
String/ number/ 
boolean/ null/ 
undefined
Array
Function
Object

Q. What is Scope in JavaScript?
❖Scope determines where variables are 
defined and where they can be accessed.
Global
Function
Block

Q. What is Hoisting in JavaScript?
❖Hoisting is a JavaScript behavior where functions and variable 
declarations are moved to the top of their respective scopes 
during the compilation phase. 
Hoisting
Function hoisting
Variable Hoisting

Q. What is Error Handling in JS?
❖Error handling is the process of 
managing errors.

Q. What is JSON?
UI/ Client/ Frontendend
API Server/ Middleware
Request
Response
(JSON)
❖JSON (JavaScript Object Notation) is a lightweight 
data interchange format.
❖JSON consists of key-value pairs.

Q. What is asynchronous programming in JS? What is its use?

Q. What is asynchronous programming in JS? What is its use?
❖Asynchronous programming allows multiple tasks or 
operations to be initiated and executed concurrently.
❖Asynchronous operations do not block the execution 
of the code.
Use of 
Asynchronous 
Operations
Fetching Data from API
Downloading Files
Uploading Files
Animations and Transitions
Time taking operations…

Chapter 2: Variables & Datatypes
Q. What are variables? What is the difference between var, 
let, and const ?
Q. What are data types in JS? 
Q. What is the difference between primitive and non-primitive 
data types? 
Q. What is the difference between null and undefined in JS?
Q. What is the use of typeof operator?
Q. What is type coercion in JS?

Q. What are variables? What is the difference between var, let, and const ?
❖Variables are used to store data.

Q. What are variables? What is the difference between var, let, and const ?
❖const can be assigned only once, and its 
value cannot be changed afterwards.
❖var creates a function-scoped
variable.
❖let creates a block-scoped
variable

Q. What are data types in JS? 
Types of Data Types
Primitive
Numbers
Strings
Booleans
Undefined
Null
Non-Primitive
Object
Array
Function
Date
RegExp
❖A data type determines the type of variable.

Q. What is the difference between primitive and non-primitive data types? 
Types of Data Types
Primitive
Numbers
Strings
Booleans
Undefined
Null
Non-Primitive
Object
Array
Function
Date
RegExp

Memory
(Managed by Javascript Engine inside broswers)
Q. What is the difference between primitive and non-primitive data types? 
❖Primitive data types can hold only single value.
❖Primitive data types are immutable, meaning their 
values, once assigned, cannot be changed.
8888888
(memory address)
25
9999999
(memory address)
30
❖Non primitive data types can hold multiple value.
❖They are mutable and their values can be changed.

Q. What is the difference between primitive and non-primitive data types? 

Q. What is the difference between null and undefined in JS?
❖(A stand on the wall with 
also a paper holder) 
Means there is a valid 
variable with also a value 
of data type number.
❖(There is just a stand on 
the wall) Means there is a 
valid variable with a value 
of no data type.
❖(There is nothing on the wall) 
Means variable is incomplete 
variable and not assigned 
anything.

Q. What is the difference between null and undefined in JS?
❖undefined: When a variable is declared but 
has not been assigned a value, it is 
automatically initialized with undefined. 
❖null: null variables are intentionally assigned 
the null value.
❖Undefined can be used when you don’t have 
the value right now, but you will get it after 
some logic or operation.
❖Null can be used, when you are sure you do not 
have any value for the particular variable.

Q. What is the use of typeof operator?
❖typeof operator is used to determine the 
type of each variable.
❖Real application use -> typeOf operator 
can be used to validate the data received 
from external sources(api).

Q. What is type coercion in JS?
❖Type coercion is the automatic 
conversion of values from one data 
type to another during certain 
operations or comparisons. 
❖Uses of type coercion:
1. Type coercion can be used during 
String and Number concatenation.
2. Type coercion can be used while 
using Comparison operators.

Chapter 3: Operators & Conditions
Q. What are operators? What are the types of operators in JS?
Q. What is the difference between unary, binary, and ternary 
operators?
Q. What is short-circuit evaluation in JS?
Q. What is operator precedence?
Q. What are the types of conditions statements in JS?
Q. When to use which type of conditions statements in real 
applications?
Q. What is the difference between == and ===?
Q. What is the difference between Spread and Rest operator 
in JS?

Q. What are operators? What are the types of operators in JS?
❖Operators are symbols or keywords used 
to perform operations on operands.

Q. What are operators? What are the types of operators in JS?
Type of Operators
Arithmetic 
Operators
Assignment 
Operators
Comparison 
Operators
Logical Operators
String Operators

Q. What is the difference between unary, binary, and ternary operators?
Operators based on number of operands
Unary Operator
Binary Operator
Ternary Operator

Q. What is short-circuit evaluation in JS?
❖Short-circuit evaluation stops the execution as 
soon as the result can be determined without 
evaluating the remaining sub-expressions.

Q. What is operator precedence?
❖As per operator precedence, operators with 
higher precedence are evaluated first.

Q. What are the types of conditions statements in JS?

Q. What are the types of conditions statements in JS?
Types of condition statements
1. If/ else statements
2. Ternary operator
3. Switch statement

Q. When to use which type of conditions statements in real applications?
❖If…else : for complex, different & 
multiline execution.
❖Benefit: Cover all scenarios.
❖Ternary operators : for simple 
conditions & single value evaluations.
❖Benefit: Short one line syntax.
❖Switch case: For same left side 
values.
❖Benefit: More structured code.

Q. What is the difference between == and ===?
❖Loose Equality (==) operator compares 
two values for equality after performing 
type coercion
❖Strict Equality (===) operator compares 
two values for equality without
performing type coercion.
❖Normally === is preferred in use to get 
more accurate comparisons.

Q. What is the difference between Spread and Rest operator in JS?
❖The spread operator(...) is used to expand or 
spread elements from an iterable (such as an 
array, string, or object) into individual elements.
Uses of Spread 
Operator
Copying an Array
Merging Arrays
Passing Multiple 
Arguments to a Function

Q. What is the difference between Spread and Rest operator in JS?
❖The rest operator is used in function parameters 
to collect all remaining arguments into an array. 

Chapter 4: Arrays
Q. What are Arrays in JS? How to get, add & remove elements from arrays?
Q. What is the indexOf() method of an Array?
Q. What is the difference between find() and filter() methods of an Array?
Q. What is the slice() method of an Array?
Q. What is the difference between push() and concat() methods of an Array?
Q. What is the difference between pop() and shift() methods of an Array?
Q. What is the splice() method of an Array?
Q. What is the difference between the slice() and  splice() methods of an Array?
Q. What is the difference map() and forEach() array methods of an Array?
Q. How to sort and reverse an array?
Q. What is Array Destructuring in JS?
Q. What are array-like objects In JS?
Q. How to convert an array-like object into an array?

Q. What are Arrays in JS? How to get, add & remove elements from arrays?
❖An array is a data type that allows you to 
store multiple values in a single variable. 
Multiple
Variables
Array1
Array2
Array3
Array4

Q. What are Arrays in JS? How to get, add & remove elements from arrays?
Arrays methods
Get
indexOf()
find()
filter()
Slice()
Add
push()
concat()
Remove
pop()
shift()
splice()
Modify
map()
forEach()
Others
join()
length
sort()
reverse()
reduce()
some()
every()

Q. What are Arrays in JS? How to get, add & remove elements from arrays?
❖Pictorial representation of important method of arrays

Q. What is the indexOf() method of an Array?
❖IndexOf() method gets the index of a specified 
element in the array.

Q. What is the difference between find() and filter() methods of an Array?
Array methods for getting elements
find()
filter()
slice()
❖find() method get the first element
that satisfies a condition.
❖filter() method get an array of elements
that satisfies a condition.

Q. What is the slice() method of an Array?
Array methods for getting elements
find()
filter()
slice()
❖Slice() method get a subset of the array from 
start index to end index(end not included).

Q. What is the difference between push() and concat() methods of an Array?
❖Push() will modify the original 
array itself.
❖Concat() method will create the new array
and not modify the original array.
Array methods for adding elements
Push()
concat()

Q. What is the difference between pop() and shift() methods of an Array?
❖pop() will remove the last element
of the array
Array methods for removing elements
pop()  
shift()
❖Shift() will remove the first element
of the array

Q. What is the splice() method of an Array?
❖The splice() method is used to add, remove, or 
replace elements in an array.

Q. What is the difference between the slice() and  splice() methods of an Array?
❖The slice() method is used get a subset of the array 
from the start index to the end index(end not 
included).
❖The splice() method is used to add, remove, or 
replace elements in an array.

Q. What is the difference map() and forEach() array methods of an Array?
❖The map() method is used when you want to 
modify each element of an array and create a 
new array with the modified values. 
❖The forEach() method is used when you want 
to perform some operation on each element 
of an array without creating a new array. 
Array methods for modification and iteration
map()  
forEach()

Q. How to sort and reverse an array?
❖Array can be sorted or reversed by using 
sort() and reverse() methods of array.

Q. What is Array Destructuring in JS?
Multiple
Variables
Array1
Array2
Array3
Array4
Structuring
Destructuring
❖Array destructuring allows you to extract elements from an array 
and assign them to individual variables in a single statement.
❖Array destructuring is introduced in ECMAScript 6 (ES6).

Q. What is Array Destructuring in JS?

Q. What are array-like objects In JS?
❖Array-like objects are objects that have indexed 
elements and a length property, similar to 
arrays, but they may not have all the methods 
of arrays like push(), pop() & others.
Types of array 
like object
arguments
Strings
HTML collections

Q. How to convert an array-like object into an array?
Methods to 
convert an 
array-like object 
into an array
Array.from()
Spread Syntax (...)
Array.prototype.slice.call()

Chapter 5: Loops
Q. What is a loop? What are the types of loops in JS?
Q. What is the difference between while and for loops?
Q. What is the difference between while and do-while loops?
Q. What is the difference between break and continue 
statement?
Q. What is the difference between for and for…of loop in JS?
Q. What is the difference between for…of and for…in loop?
Q. What is forEach method? Compare it with for…of and 
for…in loop?
Q. When to use for…of loop and when to use forEach method 
in applications?

Q. What is a loop? What are the types of loops in JS?
JavaScript loops
for
while
do-while
for…of
for…in
❖A loop is a programming way to run a piece of 
code repeatedly until a certain condition is met. 
1. Initialization
2. Condition
3. Increment

Q. What is the difference between while and for loops?
❖For loop allows to iterate a block of code 
a specific number of times.
❖for loop is better for condition with 
initialization and with increment because 
all can be set in just one line of code.
❖While loop execute a block of code while a 
certain condition is true.
❖While loop is better when there is only 
condition, no initialization, no increment.

Q. What is the difference between while and do-while loops?
❖While loop execute a block of code 
while a certain condition is true.
❖The do-while loop is similar to the while 
loop, except that the block of code is 
executed at least once, even if the 
condition is false.

Q. What is the difference between while and do-while loops?

Q. What is the difference between break and continue statement?
❖The "break" statement is used to 
terminate the loop. 
❖The "continue" statement is used to 
skip the current iteration of the loop 
and move on to the next iteration. 

Q. What is the difference between for and for…of loop in JS?
❖for loop is slightly more complex having more 
lines of code whereas for…of is much simpler
and better for iterating arrays.

Q. What is the difference between for…of and for…in loop?
❖for…of loop is used to loop through the 
values of an object like arrays, strings. 
❖It allows you to access each value directly, 
without having to use an index.
❖for…in loop is used to loop through the properties of an 
object. 
❖It allows you to iterate over the keys of an object and 
access the values associated by using keys as the index.

Q. What is forEach method? Compare it with for…of and for…in loop?
❖forEach() is a method available on arrays or object that 
allows you to iterate over each element of the array and 
perform some action on each element.

Q. When to use for…of loop and when to use forEach method in applications?
❖forEach method iterate over each element
of the array and perform some action on 
each element.
❖for...of loop is suitable when you need 
more control over the loop, such as 
using break statement or continue 
statement inside.

Chapter 6: Functions
Q. What are Functions in JS? What are the types of function?
Q. What is the difference between named and anonymous 
functions? When to use what in applications?
Q. What is function expression in JS?
Q. What are Arrow Functions in JS? What is it use?
Q. What are Callback Functions? What is it use? 
Q. What is Higher-order function In JS?
Q. What is the difference between arguments and 
parameters?
Q. In how many ways can you pass arguments to a function?

Q. What are Functions in JS? What are the types of function?
❖A function is a reusable block of code
that performs a specific task.
Function keyword 
Function name 
Parameters list
Function body 
Function call 
Argument list

Q. What are Functions in JS? What are the types of function?
Types of 
Functions
Named Function
Anonymous Function
Function Expression
Arrow Function
IIFE
Callback Function
Higher-Order Function

Q. What is the difference between named and anonymous functions? 
When to use what in applications?
❖Named functions have a name identifier
❖Anonymous functions do not have a name identifier
and cannot be referenced directly by name.
❖Use named functions for big and complex logics.
❖Use when you want to reuse one function at 
multiple places.
❖Use anonymous functions for small logics.
❖Use when want to use a function in a single place.

Q. What is function expression in JS?
❖A function expression is a way to define a function 
by assigning it to a variable.

Q. What are Arrow Functions in JS? What is it use?
❖Arrow functions, also known as fat arrow 
functions, is a simpler and shorter way for 
defining functions in JavaScript. 
Parameters list
Function body

Q. What are Callback Functions? What is it use? 
❖A callback function is a function that is 
passed as an argument to another function.
Callback function
Higher-order function

Q. What is Higher-order function In JS?
❖A Higher order function:
1. Take one or more functions as arguments(callback function) OR
2. Return a function as a result
Callback function
High-order function

Q. What is the difference between arguments and parameters?
❖Parameters are the placeholders defined 
in the function declaration.
❖Arguments are the actual values passed 
to a function when it is invoked or called. 

Q. In how many ways can you pass arguments to a function?
Ways you can pass arguments to a function 
Positional Arguments
Named Arguments
Arguments Object

Q. How do you use default parameters in a function?
❖In JavaScript, default parameters allow you to 
specify default values for function parameters.

Q. What is the use of event handling in JS?
❖Event handling is the process of responding to user actions in a web page. 
❖The addEventListener method of Javascript allows to attach an event 
name and with the function you want to perform on that event.
Click Event: addEventListener('click', handler)
Mouseover Event: addEventListener('mouseover', 
handler)
Keydown Event: addEventListener('keydown', 
handler)
Keyup Event: addEventListener('keyup', handler)
Submit Event: addEventListener('submit', handler)
Focus Event: addEventListener('focus', handler)
Blur Event: addEventListener('blur', handler)
Change Event: addEventListener('change', handler)
Load Event: addEventListener('load', handler)
Resize Event: addEventListener('resize', handler)
Callback function
Event

Q. What are First-Class functions in JS?
❖A programming language is said to have 
First-class functions if functions in that 
language are treated like other variables.
Functions treated 
like variables
1. Assignable
2. Passable as Arguments
3. Returnable as Values

Q. What are Pure and Impure functions in JS?
1. A pure function is a function that always 
produces the same output for the same input.
2. Pure functions cannot modify the state.
3. Pure functions cannot have side effects.
1. An impure function, can produce different 
outputs for the same input.
2. Impure functions can modify the state.
3. Impure functions can have side effects.

Q. What is Function Currying in JS?
❖Currying in JavaScript transforms a function with 
multiple arguments into a nested series of 
functions, each taking a single argument.
❖Advantage : Reusability, modularity, and 
specialization. Big, complex functions with 
multiple arguments can be broken down into 
small, reusable functions with fewer arguments.

Q. What are call, apply and bind methods in JS?
❖call, apply, and bind are three 
methods in JavaScript that are used to 
work with functions and control how 
they are invoked and what context 
they operate in. 
❖These methods provide a way to 
manipulate the this value and pass 
arguments to functions.

Chapter 7: Strings
Q. What is a String? 
Q. What are template literals and string interpolation in 
strings?
Q. What is the difference between single quotes (''), double 
quotes ("") & backticks (``)?
Q. What are some important string operations in JS?
Q. What is string immutability?
Q. In how many ways you can concatenate strings?

Q. What is a String? 
❖A string is a data type used to store and 
manipulate data.

Q. What are template literals and string interpolation in strings?
❖A template literal, also known as a template 
string, is a feature introduced in ECMAScript 
2015 (ES6) for string interpolation and 
multiline strings in JavaScript.

Q. What is the difference between single quotes (''), double quotes ("") & backticks (``)?

Q. What are some important string operations in JS?

Q. What are some important string operations in JS?

Q. What is string immutability?
❖Strings in JavaScript are considered immutable
because you cannot modify the contents of an 
existing string directly. 
Memory
(Managed by Javascript Engine inside browsers)
8888888
(memory address)
Interview
9999999
(memory address)
Interview Happy

Q. In how many ways you can concatenate strings?
Ways to concatenate strings 
+ Operator
Concat() method 
Template literals
Join() method

Chapter 8: DOM
Q. What is DOM? What is the difference between HTML and DOM?
Q. How do you select, modify, create and remove DOM elements?
Q. What are selectors in JS?
Q. What is the difference between getElementById, 
getElementsByClassName and getElementsByTagName?
Q. What is the difference between querySelector() and 
querySelectorAll()?
Q. What are the methods to modify elements properties and 
attributes?
Q. What is the difference between innerHTML and textContent?
Q. How to add and remove properties of HTML elements in the DOM 
using JS?
Q. How to add and remove style from HTML elements in DOM using JS?
Q. How to create new elements in DOM using JS? What is the 
difference between createElement() and cloneNode()?
Q. What is the difference between createElement() and 
createTextNode()?

Q. What is DOM? What is the difference between HTML and DOM?
DOM Tree(Real)
❖The DOM(Document Object Model) represents the web 
page as a tree-like structure that allows JavaScript to 
dynamically access and manipulate the content and 
structure of a web page.
Static HTML

Q. How do you select, modify, create and remove DOM elements?
DOM Methods
Selecting DOM elements
getElementById(id)
querySelector
(selector)
querySelectorAll
(selector)
getElementsByClassName
(className)
getElementsByTagName
(tagName)
getElementsByName
(name)
Modifying element 
properties and 
attributes
textContent
innerHTML
setAttribute(name, 
value)
removeAttribute(na
me)
style.property
Creating & 
appending 
elements
createElement
(tagName)
appendChild
(node)
cloneNode
(deep)
Removing 
elements
remove()
removeChild
(node)
Adding and 
removing event 
listeners
addEventListen
er(type, 
listener)
removeEventLi
stener(type, 
listener)

Q. What are selectors in JS?
❖Selectors in JS help to get specific elements from 
DOM based on IDs, class names, tag names.
DOM Selector 
methods
getElementById()
getElementsByClassName()
getElementsByTagName()
querySelector()
querySelectorAll()

Q. What is the difference between 
getElementById, getElementsByClassName and getElementsByTagName?

Q. What is the difference between querySelector() and querySelectorAll()?

Q. What are the methods to modify elements properties and attributes?
DOM methods 
for modifying 
elements and 
their properties
textContent
innerHTML
setAttribute()
removeAttribute()
style.setProperty
classList.add()

Q. What is the difference between innerHTML and textContent?
DOM methods 
for modifying 
elements and 
their 
properties
textContent
innerHTML
setAttribute()
removeAttribute()
style.setProperty
classList.add()

Q. How to add and remove properties of HTML elements in the DOM using JS?
DOM methods 
for modifying 
elements and 
their properties
textContent
innerHTML
setAttribute()
removeAttribute()
style.setProperty
classList.add()

Q. How to add and remove style from HTML elements in DOM using JS?
DOM methods 
for modifying 
elements and 
their 
properties
textContent
innerHTML
setAttribute()
removeAttribute()
style.setProperty
classList.add()

Q. How to create new elements in DOM using JS? What is the difference between 
createElement() and cloneNode()?
DOM methods 
to create 
elements 
dynamically
createElement()
cloneNode()
createTextNode()
innerHTML
insertAdjacentHT
ML()
document.write()

Q. What is the difference between createElement() and createTextNode()?
DOM methods to 
create elements 
dynamically
createElement()
cloneNode()
createTextNode()
innerHTML
insertAdjacentHT
ML()
document.write()

Chapter 9: Error Handling
Q. What is Error Handling in JS?
Q. What is the role of finally block in JS?
Q. What is the purpose of the throw statement in JS?
Q. What is Error propagation in JS?
Q. What are the best practices for error handling?
Q. What are the different types of errors In JS?

Q. What is Error Handling in JS?
❖Error handling is the process of 
managing errors.

Q. What is the role of finally block in JS?
❖Finally, block is used to execute some 
code irrespective of error. 

Q. What is the purpose of the throw statement in JS?
❖The throw statement stops the execution 
of the current function and passes the 
error to the catch block of calling 
function.
Method1
(try-catch)
Method2
(throw)

Q. What is Error propagation in JS?
❖Error propagation refers to the process of 
passing or propagating an error from one 
part of the code to another by using the 
throw statement with try catch.
Method1
(try-catch)
Method2
(throw)

Q. What are the best practices for error handling?

Q. What are the different types of errors In JS?
Types of errors 
Syntax Error
Reference Error
Type Error
Range Error

Chapter 10: Objects
Q. What are Objects in JS? 
Q. In how many ways we can create an object?
Q. What is the difference between an array and an object?
Q. What is the difference between array and objects?
Q. How do you add or modify or delete properties of an object?
Q. Explain the difference between dot notation and bracket notation?
Q. What are some common methods to iterate over the properties of 
an object?
Q. How do you check if a property exists in an object?
Q. How do you clone or copy an object?
Q. What is the difference between deep copy and shallow copy in JS?
Q. What is Set Object in JS?
Q. What is Map Object in JS?
Q. What is the difference between Map and Object in JS?

Q. What are Objects in JS? 

Q. What are Objects in JS? 
❖An object is a data type that allows you to 
store key-value pairs. 
Object
String/ number/ 
boolean/ null/ 
undefined
Array
Function
Object

Q. In how many ways we can create an object?
Ways to create and initialize an object  
Object Literal
Object Constructor
Object.create() Method

Q. What is the difference between an array and an object?

Q. How do you add or modify or delete properties of an object?

Q. Explain the difference between dot notation and bracket notation?
❖Both dot notation and bracket notation are used 
to access properties or methods of an object.
❖Dot notation is more popular and used due to its 
simplicity.
❖Limitation of dot notation - In some scenarios bracket 
notation is the only option, such as when accessing 
properties when the property name is stored in a 
variable.

Q. What are some common methods to iterate over the properties of an object?
4 Ways to iterate over 
the properties of an 
object
1. for...in loop
2. Object.keys() & 
forEach()
3. Object.values() & 
forEach()

Q. How do you check if a property exists in an object?

Q. How do you clone or copy an object?
Ways to clone 
or copy an 
object
1. Spread Syntax 
(...)
2. Object.assign() 
3. JSON.parse() & 
JSON.stringify() 

Q. What is the difference between deep copy and shallow copy in JS?
❖Shallow copy in nested objects case
will modify the parent object 
property value, if cloned object 
property value is changed. But deep 
copy will not modify the parent 
object property value.

Q. What is Set Object in JS?
❖The Set object is a collection of unique values, 
meaning that duplicate values are not allowed. 
❖Set provides methods for adding, deleting, and 
checking the existence of values in the set.
❖Set can be used to remove duplicate values from 
arrays.

Q. What is Map Object in JS?
❖The Map object is a collection of key-value
pairs where each key can be of any type, 
and each value can also be of any type. 
❖A Map maintains the order of key-value 
pairs as they were inserted. 

Q. What is the difference between Map and Object in JS?

Chapter 11: Events
Q. What are Events? How are events triggered?
Q. What are the types of events in JS?
Q. What is Event Object in JS? 
Q. What is Event Delegation in JS? 
Q. What is Event Bubbling In JS?
Q. How can you stop event propagation or event bubbling in 
JS?
Q. What is Event Capturing in JS?
Q. What is the purpose of the event.preventDefault() method 
in JS?
Q. What is the use of "this" keyword in the context of event 
handling in JS?
Q. How to remove an event handler from an element in JS?

Q. What are Events? How are events triggered?

Q. What are Events? How are events triggered?
❖Events are actions that happen in the 
browser, such as a button click, mouse 
movement, or keyboard input. 
Event handler/ 
Callback function
Event

Q. What are the types of events in JS?
Click Event: addEventListener('click', handler)
Mouseover Event: addEventListener('mouseover', 
handler)
Keydown Event: addEventListener('keydown', 
handler)
Keyup Event: addEventListener('keyup', handler)
Submit Event: addEventListener('submit', handler)
Focus Event: addEventListener('focus', handler)
Blur Event: addEventListener('blur', handler)
Change Event: addEventListener('change', handler)
Load Event: addEventListener('load', handler)
Resize Event: addEventListener('resize', handler)
Event

Q. What is Event Object in JS? 
❖Whenever any event is triggered, the 
browser automatically creates an event 
object and passes it as an argument to the 
event handler function.
❖The event object contains various 
properties and methods that provide 
information about the event, such as the 
type of event, the element that triggered 
the event etc.

Q. What is Event Delegation in JS? 

Q. What is Event Delegation in JS? 
❖Event delegation in JavaScript is a 
technique where you attach a single 
event handler to a parent element to 
handle events on its child elements. 

Q. What is Event Bubbling In JS?

Q. What is Event Bubbling In JS?
❖Event bubbling is the process in JavaScript 
where an event triggered on a child element 
propagates up the DOM tree, triggering event 
handlers on its parent elements. 

Q. How can you stop event propagation or event bubbling in JS?
❖Event bubbling can be stopped by calling 
stopPropagation() method on event.

Q. What is Event Capturing in JS?

Q. What is Event Capturing in JS?
❖Event capturing is the process in JavaScript 
where an event is handled starting from the 
highest-level ancestor (the root of the DOM 
tree) and moving down to the target element.

Q. What is the purpose of the event.preventDefault() method in JS?
❖The event.preventDefault() method is 
used to prevent the default behavior
of an event and the link click will be 
prevented.

Q. What is the use of "this" keyword in the context of event handling in JS?
❖“this” keyword refers to the element
that the event handler is attached to.

Q. How to remove an event handler from an element in JS?
❖removeEventListener() method is used 
to remove event handler from element.

Chapter 12: Closures
Q. Explain the concept of Lexical Scoping?
Q. What is Closure?
Q. What are the benefits of Closures?
Q. What is the concept of Encapsulation in the context of 
closures?
Q. What are the disadvantage or limitations of Closures?
Q. How can you release the variable references or closures 
from memory?
Q. What is the difference between a Regular Function and a 
Closure?

Q. Explain the concept of Lexical Scoping?
❖The concept of lexical scoping ensures that 
variables declared in an outer scope are 
accessible in nested functions.

Q. What is Closure?
❖A closure in JavaScript is a combination of 
a function and the lexical environment.

Q. What are the benefits of Closures?
❖A closure in JavaScript is a combination of a function and the 
lexical environment.
❖Closures are used to modify data or variables safely.
❖Benefits of Closures:
1. Closure can be used for data modification with data 
privacy(encapsulation) 
2. Persistent Data and State - Each time createCounter() is 
called, it creates a new closure with its own separate count 
variable.
3. Code Reusability - The closure returned by createCounter() is 
a reusable counter function. 

Q. What is the concept of Encapsulation in the context of closures?
❖Encapsulation is bundling or wrapping of data 
and function together to provide data security/ 
data privacy.

Q. What are the disadvantage or limitations of Closures?
❖Memory Leaks - If closures are not properly managed, 
they can hold onto unnecessary memory because 
Closures retain references to the variables they access.

Q. How can you release the variable references or closures from memory?
❖You can release the reference to the closure by setting 
closure to null.

Q. What is the difference between a Regular Function and a Closure?
❖Regular functions do not retain access to their 
reference variables after execution completes.
❖Closures retain access to their reference 
variables event after execution completes.

Chapter 13: Asynchronous programming – Basics
Q. What is asynchronous programming in JS? What is its use?
Q. What is the difference between synchronous and 
asynchronous programming?
Q. What are the techniques for achieving asynchronous 
operations in JS?
Q. What is setTimeout()? How is it used to handle 
asynchronous operations?
Q. What is setInterval()? How is it used to handle 
asynchronous operations?
Q. What is the role of callbacks in fetching API data 
asynchronously?
Q. What is callback hell? How can it be avoided?

Q. What is asynchronous programming in JS? What is its use?

Q. What is asynchronous programming in JS? What is its use?
❖Asynchronous programming allows multiple tasks or 
operations to be initiated and executed concurrently.
❖Asynchronous operations do not block the execution 
of the code.
Use of 
Asynchronous 
Operations
Fetching Data from API
Downloading Files
Uploading Files
Animations and Transitions
Time taking operations…

Q. What is the difference between synchronous and asynchronous programming?

Q. What are the techniques for achieving asynchronous operations in JS?
Asynchronous 
Operations 
Techniques
setTimeout
setInterval
Callbacks
Promises
Async/await
Generators with yield
Event-driven programming

Q. What is setTimeout()? How is it used to handle asynchronous operations?
❖setTimeout() is a built-in JavaScript function 
that allows you to schedule the execution 
of a function after a specified delay 
asynchronously.

Q. What is setInterval()? How is it used to handle asynchronous operations?
❖setInterval() is a built-in JavaScript function that 
allows you to repeatedly execute a function at a 
specified interval asynchronously.
Timeout(10 sec)
Start Function
setTimeout
Timeout(10 sec)
setInterval
Start Function

Q. What is the role of callbacks in fetching API data asynchronously?
❖Callbacks in JavaScript are functions that are 
passed as arguments to other functions.

Q. What is callback hell? How can it be avoided?
❖Callback hell, also known as the "pyramid of doom," 
refers to the situation when multiple nested callbacks
are used, leading to code that becomes difficult to 
read, understand, and maintain.  

Chapter 14: Asynchronous programming - Promises
Q. What are Promises in JavaScript?
Q. How to implement Promises in JavaScript?
Q. When to use Promises in real applications?
Q. What is the use of Promise.all() method?
Q. What is the use of Promise.race() method?
Q. What is the difference between Promise.all() and 
Promise.race()?

Q. What are Promises in JavaScript?
❖Important points about promises:
1. Promises in JavaScript are a way to handle 
asynchronous operations. 
2. A Promise can be in one of three states: pending, 
resolved, or rejected.
3. A promise represents a value that may not be available 
yet but will be available at some point in the future.

Q. How to implement Promises in JavaScript?

Q. How to implement Promises in JavaScript?

Q. When to use Promises in real applications?
❖Promises are useful when you need to perform 
time taking operations in asynchronous manner
and later handle the results when the result is 
available.
Use of Promises in 
Real Applications
API calls
File handling
Data fetching
Animations and visual 
effects
Event handling

Q. What is the use of Promise.all() method?

Q. What is the use of Promise.all() method?
❖Promise.all() is used to handle multiple promises concurrently. 
❖Promise. all() takes an array of promises as input parameter and returns a single promise.
❖Promise.all() waits for all promises to resolve or at least one promise to reject. 

Q. What is the use of Promise.race() method?
❖Promise.race() is used to handle multiple promises concurrently. 
❖Promise.race() takes an array of promises as input parameter and returns a single promise.
❖Promise.race() waits for only one promise to resolve or reject.

Q. What is the difference between Promise.all() and Promise.race()?

Chapter 15: Asynchronous Programming - Async Await
Q. What is the purpose of async/ await? Compare it with 
Promises?
Q. Explain the use of async and await keywords in JS?
Q. Can we use async keyword without await keyword and vice 
versa?
Q. How do you handle errors in async/ await functions?

Q. What is the purpose of async/ await? Compare it with Promises?
promise 
constructor/ 
resolve/ 
reject
then()/ 
catch()
try{}/ 
catch()
Async-Await
Promises

Q. What is the purpose of async/ await? Compare it with Promises?
❖Similarities and differences between promises and async-await:
1. Promises and async/await can achieve the same goal of 
handling asynchronous operations.
2. async/await provides a more concise and readable syntax that 
resembles synchronous code whereas Promises use a chaining 
syntax with then() and catch() which is not that readable.
3.
async/await still relies on Promises for handling the 
asynchronous nature of the code.

Q. Explain the use of async and await keywords in JS?
❖The async keyword is used to define a function 
as an asynchronous function, which means the 
code inside async function will not block the 
execution other code.
❖The await keyword is used within an async 
function to pause the execution of the function 
until a Promise is resolved or rejected. 

Q. Can we use async keyword without await keyword and vice versa?
❖Yes, we use async keyword without await keyword.
❖await keyword cannot be used without async. 

Q. How do you handle errors in async/ await functions?
❖In async/await functions, we can handle 
errors using try/catch blocks.

Chapter 16: Browser APIs & Web Storage
Q. What is a window object?
Q. What are Browser APIs in JS?
Q. What is Web Storage, and its use? How many types of web 
storage are there?
Q. What is Local Storage? How to store, retrieve and remove 
data from it?
Q. What is Session Storage? How to store, retrieve and 
remove data from it?
Q. What is the difference between LocalStorage and 
SessionStorage?
Q. How much data can be stored in localStorage and 
sessionStorage?
Q. What are cookies? How do you create and read cookies?
Q. What is the difference between cookies and web storage?
Q. When to use cookies and when to use web storage?

Q. What is a window object?
❖The Window object represents a window in browser. 
❖Window object serves as the entry point for interacting with 
the browser.
❖It is not the object of javascript. 

Q. What are Browser APIs in JS?
❖Browser APIs (Application Programming 
Interfaces) in JavaScript are a collection 
of built-in interfaces and methods
provided by web browsers. 
Broswer
APIs
DOM API
Eg: getElementById(), querySelector(), createElement(), 
appendChild(), and addEventListener().
XMLHttpRequest (XHR)
Eg: open(), send(), setRequestHeader(), and 
onreadystatechange event
Fetch API
Eg: fetch(), then(), json(), and headers.get()
Storage API
Eg: localStorage, sessionStorage
History API
Eg: pushState(), replaceState(), go(), and back()
Geolocation API
Eg: getCurrentPosition(), watchPosition(), and clearWatch()
Notifications API
Eg: Notification.requestPermission(), new Notification(), and 
notification.onclick()
Canvas API
Eg; getContext(), fillRect(), drawImage(), and beginPath()
Audio and Video APIs
Eg: HTMLMediaElement (audio and video elements), play(), 
pause(), currentTime(), and volume()

Q. What is Web Storage, and its use? How many types of web storage are there?
❖The Web Storage is used to store 
data locally within the browser. 
Types of web storage
Local storage
Session storage
❖5 uses of web storage:
1. Storing user preferences or settings. (for eg: theme 
selection(dark/ light), language preference etc.
2. Caching data to improve performance.
3. Remembering User Actions and State.
4. Implementing Offline Functionality.
5. Storing Client-Side Tokens.

Q. What is Local Storage? How to store, retrieve and remove data from it?
❖LocalStorage is a web storage feature provided by 
web browsers that allows web applications to store 
key-value pairs of data locally on the user's device.
❖Uses of local storage:
1. Storing user preferences like language preference.
2. Caching data to improve performance.
3. Implementing Offline Functionality.
4. Storing Client-Side Tokens.

Q. What is Session Storage? How to store, retrieve and remove data from it?
❖SessionStorage is a web storage feature provided by 
web browsers that allows web applications to store 
key-value pairs of data locally on the user's device. 
❖Uses of session storage:
1. Storing Form Data.
2. Storing Temporary Data.
3. Maintaining shopping cart list.
4. Implementing Step-by-Step Processes.

Q. What is the difference between LocalStorage and SessionStorage?

Q. How much data can be stored in localStorage and sessionStorage?
❖5-10MB per origin(approx)
❖It varies with browsers
1. Google Chrome: 10MB per origin
2. Mozilla Firefox: 10MB per origin
3. Safari: 5MB per origin
4. Microsoft Edge: 10MB per origin.

Q. What are cookies? How do you create and read cookies?
❖Cookies are small pieces of data that are stored 
in the user's web browser.

Q. What is the difference between cookies and web storage?

Q. When to use cookies and when to use web storage?
❖Uses cookies when:
1. If you need to access the stored data on the server-side. 
For example, username and password in login forms.
2. When you want to do cross-domain data sharing.
❖Uses web storage when:
1. If you need to store larger amounts of data.
2. For simpler and more efficient way to store and retrieve 
data compared to cookies.

Chapter 17: Classes, Constructors, this & Inheritance
Q. What are Classes in JS?
Q. What is a constructor?
Q. What are constructor functions?
Q. What is the use of this keyword?
Q. Explain the concept of prototypal inheritance?

Q. What are Classes in JS?
❖Classes serve as blueprints for creating objects 
and define their structure and behavior.
❖Advantages of classes:
1. Object Creation
2. Encapsulation
3. Inheritance
4. Code Reusability
5. Polymorphism
6. Abstraction

Q. What is a constructor?
❖Constructors are special methods within 
classes that are automatically called when 
an object is created of the class using the 
new keyword. 

Q. What are constructor functions?
❖constructor functions are a way of creating objects
and initializing their properties. 

Q. What is the use of this keyword?
❖this keyword provides a way to access the
current object or class.

Q. Explain the concept of prototypal inheritance?
❖Prototypal inheritance allows objects to inherit 
properties and methods from parent objects.

Chapter 18: ECMAScript & Modules
Q. What is ES6? What are some new features introduced by 
it?
Q. What are Modules in JS?
Q. What is the role of export keyword?
Q. What are the advantages of modules?
Q. What is the difference between named exports and default 
exports?
Q. What is the difference between static and dynamic 
imports?
Q. What are module bundlers?

Q. What is ES6? What are the new features introduced by it?
ES6 Features
let and const
Arrow Functions
Classes
Template Literals
Destructuring Assignment
Default Parameters
Rest and Spread Operators
Promises
Modules
❖ECMAScript(ES6) is the standard which 
JavaScript follows.

Q. What are Modules in JS?
❖Modules in JS are a way to organize code into 
separate files, making it easier to manage and 
reuse code across different parts of an application.

Q. What are Modules in JS?

Q. What is the role of export keyword?
❖export keyword allows you to specify functions 
for use in other external modules.

Q. What are the advantages of modules?
1. Reusability
2. Code Organization
3. Improved Maintainability
4. Performance Optimization via lazy loading
5. Encapsulation via independent and self-contained unit

Q. What is the difference between named exports and default exports?
❖Named exports allow you to export multiple 
elements from a module.
❖Default export allows you to export a single 
element as the default export from a module.

Q. What is the difference between static and dynamic imports?
❖Static imports are typically placed at the top of the file 
and cannot be conditionally or dynamically determined.
❖Dynamic imports can be called conditionally or within 
functions, based on runtime logic, allowing for more 
flexibility in module loading.

Q. What are module bundlers?
❖Module bundlers in JavaScript are tools that combine multiple 
modules or files into a single optimized bundle that can be 
executed by a web browser.
Popular 
module 
bundlers
Webpack
Rollup
Parcel
Browserify
RequireJS

Chapter 19: Security & Performance
Q. What is eval() function in JS?
Q. What is XSS (Cross-Site Scripting) attack?
Q. What is SQL Injection attack?
Q. What are some best practices for security in JS?
Q. What are the best practices for improving performance in JS?

Q. What is eval() function in JS?
❖eval() is a built-in function that evaluates 
a string as a JavaScript code and 
dynamically executes it. 

Q. What is XSS (Cross-Site Scripting) attack?
❖XSS (Cross-Site Scripting) is a security attack when a user/ hacker insert 
some malicious script code in input fields to steal or manipulate content.

Q. What is SQL Injection attack?
❖SQL Injection is a security attack when a user/ hacker insert some 
malicious SQL script code in input fields to steal or manipulate content.

Q. What are some best practices for security in JS?
❖Best practices for implementing security in JS:
1. Input Validation: Always validate and sanitize user input to prevent 
XSS (Cross-Site Scripting) and SQL injection attacks.
2. Avoid Eval: Avoid using eval() to execute dynamic code as it can 
introduce security risks by executing untrusted code. 
3. Secure Communication: Always use HTTPS not HTTP for secure 
communication.
4. Authentication and Authorization: Use strong password hashing 
algorithms.

Q. What are the best practices for improving performance in JS?
❖Best practices for improving performance in JS:
1. Minimize HTTP Requests: Combine and minify JavaScript 
files into a single file to reduce the number of HTTP 
requests. For eg: use module bundlers.
2. Use Asynchronous Operations: Utilize callbacks, 
promises, or async/await to perform asynchronous 
operations and avoid blocking the main thread.
3. Minimize DOM Manipulation
4. Avoid Memory Leaks: Remove event listener when 
events are no more required.
5. Cache Data: Store frequently used data in memory or 
browser storage.
6. Lazy Loading: Use lazy loading techniques to load 
resources only when they are needed, improving initial 
page load time.
7. Optimize Images

Chapter 20: Scenario based - Tricky Short Questions
Q. How to execute a piece of code repeatedly after some fix 
time?
Q. How to handle asynchronous operations In JS?
Q. How to manipulate and modify CSS styles of HTML elements 
dynamically?
Q. How to handle errors and exceptions in your code?
Q. How to store key-value pairs & efficiently access and 
manipulate the data?
Q.  How to iterate over elements in an array and perform a 
specific operation on each element?
Q. How to dynamically add or remove elements from a web 
page?
Q. What method is used to retrieve data from an external API?
Q. How to manage the state in a web application?
Q. How to implement a queue or a stack like data structure in JS?

Chapter 20: Scenario based – Tricky Short Questions
Q. How do you attach an event handler to an HTML 
element?
Q. How to perform actions based on keyboard events in JS?
Q. How to fetch data from multiple APIs in parallel and 
process the results together?
Q. What are the methods to manipulate JSON data 
efficiently?
Q. How to get the current URL of a webpage?
Q. How do you find the length of an array in JS?
Q. How to create a copy of an array?
Q. How do you access individual characters in a string?
Q. How can you check if a string contains a specific 
substring?
Q. Can you modify the value of a variable captured in a 
Closure?

Q. How to execute a piece of code repeatedly after some fix time?
❖By using setInterval() functions.

Q. How to handle asynchronous operations In JS?
❖By using Promises or async/ await mechanism.

Q. How to manipulate and modify CSS styles of HTML elements dynamically?
❖By using  DOM manipulation method style.setProperty().

Q. How to handle errors and exceptions in your code?
❖By using try...catch statement.

Q. How to store key-value pairs & efficiently access and manipulate the data?
❖By using Objects or Maps.

Q.  How to iterate over elements in an array and perform a specific 
operation on each element?
❖By using Array methods forEach() or map() or for...of loop.

Q. How to dynamically add or remove elements from a web page?
❖By using DOM manipulation methods like createElement(), appendChild(), or removeChild().

Q. What method is used to retrieve data from an external API?
❖By using fetch() API.

Q. How to manage the state in a web application?
❖By using State management libraries (e.g., Redux, MobX) 
or JavaScript frameworks (e.g., React, Angular, Vue.js).

Q. How to implement a queue or a stack like data structure in JS?
❖By using Arrays which can be used to implement 
queues and stacks in JavaScript.

Q. How do you attach an event handler to an HTML element?
❖addEventListener() method is used to 
attach event handler to an HTML element. 

Q. How to perform actions based on keyboard events in JS?
❖By using event listeners for keyboard events like keydown, keyup, or 
keypress.

Q. How to fetch data from multiple APIs in parallel and process 
the results together?
❖By using Promise.all() method in the asynchronous programming.

Q. What are the methods to manipulate JSON data efficiently?
❖By using JSON.parse() and JSON.stringify() methods.

Q. How to get the current URL of a webpage?

Q. How do you find the length of an array in JS?
❖The length property returns the number of elements
in the array.

Q. How to create a copy of an array?

Q. How do you access individual characters in a string?
❖We can access individual characters by using 
bracket notation or charAt() method. 

Q. How can you check if a string contains a specific substring?
Check if a 
string contains 
a specific 
substring
Includes()
indexOf()
Regular 
expression

Q. Can you modify the value of a variable captured in a Closure?
❖Yes. When a closure captures a variable from its outer 
scope, it retains a reference to that variable. This 
reference allows the closure to access and modify the 
variable, even if the outer function has finished executing.

Chapter 21: Scenario based – Feature Development
Q. How to validate user input as they type in a form?
Q. How to implement pagination for displaying large sets of data?
Q. How to implement drag-and-drop functionality for elements on a 
web page?
Q. How to implement a feature that allows users to search for specific 
items in a large dataset?
Q. How to implement a feature that allows users to perform live 
search suggestions as they type?
Q. How to implement a real-time chat application using JS.
Q. How to create an infinite scrolling feature using JS when a user 
reaches the bottom of a webpage?
Q. How to implement a toggle switch that changes the theme 
(light/dark mode) of a website when clicked.
Q. How to use JS to dynamically update date in real time on webpage?
Q. How to prevent a form from being submitted without required 
fields being filled?

Q. How to validate user input as they type in a form?
❖By using event handling or event listeners on input event.

Q. How to implement pagination for displaying large sets of data?
❖By using Slice() method or pagination libraries like 
react-paginate or vue-pagination.

Q. How to implement drag-and-drop functionality for elements on a web page?
❖By setting draggable=“true” for the element in html file
❖By adding event listener to dragstart event in JS.

Q. How to implement a feature that allows users to search for specific 
items in a large dataset?
❖By using array methods filter() and includes().

Q. How to implement a feature that allows users to perform live search
suggestions as they type?
❖By using input event on element and by using fetch() API to retrieve 
search suggestions from the server.

Q. How to implement a real-time chat application using JS.
❖By using WebSockets - WebSockets allow data to 
be sent in both directions using a single connection 
between a client and a server.

Q. How to implement a real-time chat application using JS.

Q. How to create an infinite scrolling feature using JS when a user 
reaches the bottom of a webpage?

Q. How to implement a toggle switch that changes the theme (light/dark 
mode) of a website when clicked.

Q. How to use JS to dynamically update date in real time on webpage?

Q. How to prevent a form from being submitted without required fields 
being filled?

Chapter 12: Coding
Q. Write a function that returns the reverse of a string?
Q. Write a function that returns the longest word in the sentence.
Q. Write a function that checks whether a given string is a 
palindrome or not?
Q. Write a function to remove duplicate elements from an array.
Q. Write a function that checks whether two strings are anagrams 
or not?
Q. Write a function that returns the number of vowels in a string.
Q. Write a function to find the largest number in an array.
Q. Write a function to check if a given number is prime or not?
Q. Write a function to calculate the factorial of a number.
Q. Write a program to remove all whitespace characters from a 
string.
Q. Write a function to find the sum of all elements in an array.

Chapter 12: Coding
Q. Write a function to find the average of an array of numbers.
Q. Write a function to sort an array of numbers in ascending order.
Q. Write a function to check if a given array is sorted in ascending 
order or not.
Q. Write a function to merge two arrays into a single sorted array.
Q. Write a function to remove a specific element from an array.
Q. Write a function to find the second largest element in an array.
Q. Write a function to reverse the order of words in a given 
sentence.
Q. Write a function to find the longest common prefix among an 
array of strings.
Q. Write a function to find the intersection of two arrays.
Q. Write a function to calculate the Fibonacci sequence up to a 
given number.

Q. Write a function that returns the reverse of a string?

Q. Write a function that returns the longest word in the sentence.

Q. Write a function that checks whether a given string is a palindrome or not?
❖A palindrome is a word that reads the same forward and backward.

Q. Write a function to remove duplicate elements from an array.

Q. Write a function that checks whether two strings are anagrams or not?
❖An anagram is a word formed by rearranging the letters of another word.

Q. Write a function that returns the number of vowels in a string.

Q. Write a function to find the largest number in an array.

Q. Write a function to check if a given number is prime or not?

Q. Write a function to calculate the factorial of a number.

Q. Write a program to remove all whitespace characters from a string.

Q. Write a function to find the sum of all elements in an array.

Q. Write a function to find the average of an array of numbers.

Q. Write a function to sort an array of numbers in ascending order.

Q. Write a function to check if a given array is sorted in ascending order or not.

Q. Write a function to merge two arrays into a single sorted array.

Q. Write a function to remove a specific element from an array.

Q. Write a function to find the second largest element in an array.

Q. Write a function to reverse the order of words in a given sentence.

Q. Write a function to find the longest common prefix among an array of strings.

Q. Write a function to find the intersection of two arrays.

Q. Write a function to calculate the Fibonacci sequence up to a given number.
❖The Fibonacci series starts with 0 and 1. Each subsequent number is the sum of the two preceding numbers.

Good 
Luck

