Logic: Language and Information 1
§6-1 Logic, Computers, and Automated Reasoning
Jen Davoren

Logic and Computers

Pre-history of Automated Reasoning
Thomas
Hobbes
(1588-1679)
We must not therefore think that
computation, that is, ratiocination, has place
only in numbers, as if man were distinguished
from other living creatures by nothing but the
faculty of numbering; for magnitude, body,
motion, time, degrees of quality, action, conception,
proportion, speech and names [. . .] are capable of
addition and subtraction. Now such things as
we add or subtract, that is, which we put into
account, we are said to consider, compute, reason,
or reckon.
The English Works of Thomas Hobbes of
Malmesbury; Vol. 1: De Corpore (1655).

Pre-history of Automated Reasoning
Gottfried
Wilhelm
Leibniz
(1646-1716)
Leibniz proposed a characteristica
universalis, a universal symbolic
language for science, mathematics
and philosophy.
This language will be the greatest
instrument of reason [. . .] for when
there are disputes among persons, we
can simply say: Let us calculate,
without further ado, and see who is
right. The Art of Discovery (1685).

Logician’s Dreams
David Hilbert
(1862-1943)
Hilbert’s metamathematical program
(1920): attempting to show that all of
mathematics follows from a correctly
chosen finite system of axioms; and
that some such axiom system can be
shown to be provably consistent.

Logician’s Dreams
David Hilbert
(1862-1943)
Hilbert’s metamathematical program
(1920): attempting to show that all of
mathematics follows from a correctly
chosen finite system of axioms; and
that some such axiom system can be
shown to be provably consistent.
The consistency of more complicated
systems, such as real analysis, could be
proven in terms of simpler systems
such as arithmetic on the natural
numbers.

Impossibility of Logician’s Dreams: Gödel
Kurt Gödel
(1906-1978)
[on left, with Einstein;
Princeton 1950.]
Gödel’s Incompleteness Theorems
(1931): any formal logic system
expressive enough to describe
arithmetic on the natural numbers
(1) is incomplete if it is consistent;
and
(2) the consistency of the system
cannot be proved within the
system itself.

Impossibility of Logician’s Dreams: Turing
Alan Turing
(1912-1954)
Turing formalised concepts
of computation and algorithm
with Logical Computing
Machine model, subsequently
called Turing machine model.
Turing 1936: the Halting
Problem for Turing machines
is algorithmically undecidable:
it is not possible to decide
algorithmically whether a given
Turing machine will halt on a given
input.

Turing’s Test of Machine Intelligence
Computer passes the Turing Test if human interrogator
cannot tell whether response is from a person or not. An
input-output test of intelligence.
I believe that at the end of the century the use of words and general
educated opinion will have altered so much that one will be able to
speak of machines thinking without expecting to be contradicted.
A. M. Turing (1950) Computing Machinery and
Intelligence. Mind 49: 433-460 (Mind Association, Oxford
University Press).

Computing logical consequence
Given logic formulas A1, A2, . . . , An and B,
determine whether or not:
A1, A2, . . . , An |= B

Computing logical consequence
Given logic formulas A1, A2, . . . , An and B,
determine whether or not:
A1, A2, . . . , An |= B
Direct semantic evaluation in Propositional Logic:
k-many atomic propositions in A1, A2, . . . , An, B gives
2k-many truth table rows/valuations, so an explicit check of
all of these is dumb and impractical.

Computing logical consequence
Millennium Prize problem (1 million US dollars):
is there a better method for deciding propositional logical
consequence that is polynomially bounded (rather than
exponentially bounded) in the number of atoms in the input
formulas?
Equivalently, does P = NP ??
[Clay Mathematics Institute, http://www.claymath.org/
millenium-problems/p-vs-np-problem]

Computing logical consequence
Soundness and completeness of the proof tree method:
A1, A2, . . . , An |= B
if and only if
A1, A2, . . . , An ⊢PfTr B

Computing logical consequence
Soundness and completeness of the proof tree method:
A1, A2, . . . , An |= B
if and only if
A1, A2, . . . , An ⊢PfTr B
But too many rules to choose between; hard to implement
in a computer program.

Practical Automated Reasoning
To find decidable, and practically computable, classes of
logical consequence problem:
▶restrict to a simple fragment of the language: program
clauses and goals (together known as Horn clauses);
▶use a proof system with only one rule: keep it simple for
dumb machines!

Practical Automated Reasoning
To find decidable, and practically computable, classes of
logical consequence problem:
▶restrict to a simple fragment of the language: program
clauses and goals (together known as Horn clauses);
▶use a proof system with only one rule: keep it simple for
dumb machines!
Logic Programming is a direct, declarative style of computer
programming using logic-based languages such as prolog or
datalog.

Next Up: Logic Programming in Prolog

Acknowledgements
Laptop by mystica [public domain]
http://openclipart.org/detail/15413/laptop-by-mystica
Thomas Hobbes (1588-1679), English philosopher,
artist unknown, [public domain] via Wikimedia Commons
http://commons.wikimedia.org/wiki/File:Thomas_Hobbes.jpeg
Portrait of Gottfried Leibniz (1646-1716), German philosopher,
artist Christoph Bernhard Francke, circa 1700.
Herzog-Anton-Ulrich-Museum, Braunschweig, Germany.
[public domain] via Wikimedia Commons
http://commons.wikimedia.org/wiki/File:Gottfried_Wilhelm_von_Leibniz.jpg

Acknowledgements (cont.)
Portrait of David Hilbert (1862-1943), German mathematician,
artist unknown [CC BY SA 2.0]; Mathematisches Forschungsinstitut
Oberwolfach, Germany: archives of P. Roquette, Heidelberg.
http://owpdb.mfo.de/detail?photo_id=9240
Kurt Gödel and Albert Einstein, Princeton 1950,
photographer unknown [public domain]
http://kgs.logic.at/index.php?id=23
Photograph of The Stacked Slate Sculpture of Alan Turing by Stephen Kettle,
Photograph by Jon Callas from San Jose, USA, [CC BY 2.0],
via Wikimedia Commons
http://commons.wikimedia.org/wiki/File:Alan_Turing.jpg

