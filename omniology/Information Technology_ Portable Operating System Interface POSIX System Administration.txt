INTERNATIONAL 
STANDARD 
ANSIAEEE 
Std 1387.2 
First edition 
1999-2-26 
Information technology - 
Portable 
Operating System Interface (POSIXm) 
system administration - 
Part 2: 
Software administration 
Technologies de I'information - 
Administration du systeme de I'interface du 
systeme operatoire portable (POSIX@) - 
Partie 2: Adminisfration du logiciel 
Reference number 
ISO/IEC 15068-2: 1999(E) 
ANSVIEEE 
Std 1387.2, 1995 edition 

Abstract: This standard is part of the POSIX@ series of standards for applications and user 
interfaces to open systems. It defines a software packaging layout, a set of information 
maintained about software, and a set of utility programs to manipulate that software and 
information. 
Keywords: data processing, open systems, operating system, packaging, portable applica- 
tion, POSIX@, software, system administration, utilities 
POSIX is a registered trademark of the Institute of Electrical and Electronics Engineers, Inc. 
The Institute of Electrical and Electronics Engineers, Inc. 
345 East 47th Street, New York, NY 10017-2394, USA 
Copyright O 1999 by the 
Institute of Electrical and Electronics Engineers, Inc. 
All rights reserved. Published 1996. 
Printed in the United States of America. 
ISBN 0-738 1 - 1568- 1 
No part of this publication may be reproduced in any form, 
in an electronic retrieval system or otherwise, 
without the prior written permission of the publisher. 
26 February 1999 

IEEE Standards documents are developed within the Technical Committees of 
the IEEE Societies and the Standards Coordinating Committees of the IEEE 
Standards Board. Members of the committees serve voluntarily and without com- 
pensation. They are not necessarily members of the Institute. The standards 
developed within IEEE represent a consensus of the broad expertise on the sub- 
ject within the Institute as well as those activities outside of IEEE that have 
expressed an interest in participating in the development of the standard. 
Use of an IEEE Standard is wholly voluntary. The existence of an IEEE Standard 
does not imply that there are no other ways to produce, test, measure, purchase, 
market, or provide other goods and services related to the scope of the IEEE Stan- 
dard. Furthermore, the viewpoint expressed at the time a standard is approved 
and issued is subject to change brought about through developments in the state 
of the art and comments received from users of the standard. Every IEEE Stan- 
dard is subjected to review at least every five years for revision or r e h a t i o n .  
When a document is more than five years old and has not been re&rmed, it is 
reasonable to conclude that its contents, although still of some value, do not 
wholly reflect the present state of the art. Users are cautioned to check to deter- 
mine that they have the latest edition of any IEEE Standard. 
Comments for revision of IEEE Standards are welcome from any interested party, 
regardless of membership affiliation with IEEE. Suggestions for changes in docu- 
ments should be in the form of a proposed change of text, together with appropri- 
ate supporting comments. 
Interpretations: Occasionally questions may arise regarding the meaning of por- 
tions of standards as they relate to specific applications. When the need for 
interpretations is brought to the attention of the IEEE, the Institute will initiate 
action to prepare appropriate responses. Since IEEE Standards represent a con- 
sensus of all concerned interests, it is important to ensure that any interpretation 
has also received the concurrence of a balance of interests. For this reason, the 
IEEE and the members of its technical committees are not able to provide an 
instant response to interpretation requests except in those cases where the matter 
has previously received formal consideration. 
Comments on standards and requests for interpretations should be addressed to: 
Secretary, IEEE Standards Board 
445 Hoes Lane 
P.O. Box 1331 
Piscataway, NJ 08855-1331 
IEEE Standards documents may involve the use of patented technology. Their 
approval by the Institute of Electrical and Electronics Engineers does not mean 
that using such technology for the purpose of conforming to such standards is 
authorized by the patent owner. It is the obligation of the user of such technol- 
ogy to obtain all necessary permissions. 

Contents 
PAGE 
Section 1: General . . . . . . . . . . . . . . . . . . . .  1 
1.1 Scope . . . . . . . . . . . . . . . . . . . . .  1 
. . . . . . . . . . . . . . . .  
1.2 Normative References 
3 
. . . . . . . . . . . . . . . . . . .  
1.3 Conformance 
3 
. . . . . . . . . . . . . . . . . . .  
1.4 Test Methods 
8 
. . . . . . . . .  
Section 2: Terminology and General Requirements 
9 
. . . . . . . . . . . . . . . . . . .  
2.1 Conventions 
9 
. . . . . . . . . . . . . . . . . . . .  
2.2 Definitions 
12 
. . . . . . . . . . .  
2.3 Dependencies on Other Standards 
27 
. . . . . . . . . . . . . . .  
Section 3: Software Structures 
29 
. . . . . . . . . . . . . . . .  
3.1 Software-Collection 
30 
. . . . . . . . . . . . . . . . . . .  
3.2 Distribution 
32 
. . . . . . . . . . . . . . . . . . . . .  
3.3 Media 
33 
. . . . . . . . . . . . . . . . .  
3.4 Installed-Software 
33 
3.5 Vendor . . . . . . . . . . . . . . . . . . . . .  34 
. . . . . . . . . . . . . . . . . . . .  
3.6 Software 
35 
. . . . . . . . . . . . . . . . . . . .  
3.7 Products 
36 
. . . . . . . . . . . . . . . . . . . . .  
3.8 Bundles 
39 
. . . . . . . . . . . . . . . . . . . . .  
3.9 Filesets 
42 
. . . . . . . . . . . . . . . . . . .  
3.10 Subproducts 
44 
. . . . . . . . . . . . . . . . . .  
3.11 SoftwareFiles 
45 
. . . . . . . . . . . . . . . . . . . . . .  
3.12 Files 
46 
. . . . . . . . . . . . . . . . . . .  
3.13 Control-Files 
48 
. . . . . . . . . . .  
Section 4: Software Administration Utilities 
51 
. . . . . . . . . . . .  
4.1 Common Definitions for Utilities 
51 
. . . . . . . . . . . .  
4.2 
swask - 
Ask for user responses 
90 
. . . . . . . . . . . .  
4.3 
swconf i g  - 
Configure software 
93 
. . . . . . . . . . . . .  
4.4 
swcopy - 
Copy distribution 
97 
. . . . . . . . . . . .  
4.5 
swinstall - 
Install software 
102 
. . . . . . . . . . . .  
4.6 
swl is t - 
List software catalog 
114 
. . . . . . . . . .  
4.7 swrnodi f y - 
Modify software catalog 
118 
. . . . . . . . . . .  
4.8 swpackage - 
Package distribution 
121 
. . . . . . . . . . . .  
4.9 swremove - 
Remove software 
125 
. . . . . . . . . . . . .  
4.10 swveri f y - 
Verrfy software 
131 
. . . . . . . . . . . . .  
Section 5: Software Packaging Layout 
137 
. . . . . . . . . . . . . . . .  
5.1 Dxectory Structure 
137 
. . . . . . . . . . . .  
5.2 Software Definition File Format 
141 
. . . . . . . . . . .  
5.3 Serial Format and Multiple Media 
158 
. . . . . . . . . . . . .  
Annex A (informative) Bibliography 
161 

. . . . . . . . . . .  
Annex B (informative) Rationale and Notes 
. . . . . . . . . . . . . . . . . . . . .  
B.l General 
. . . . . . . . .  
B.2 Terminology and General Requirements 
. . . . . . . . . . . . . . . .  
B.3 Software Structures 
. . . . . . . . . . . .  
B.4 Software Administration Utilities 
. . . . . . . . . . . . . .  
B.5 Software Packaging Layout 
. . . . . . . . . . . . .  
Annex C (informative) Sample Files 
. . . . . . . . . . . . . . . . . . .  
C . 1 Defaults File 
. . . . . . . . . . . . . .  
C.2 Product Specification File . . . . . . . . . . . . . .  
C.3 Software Packaging Layout 
. . . . . . . . . . . . . . . . . . .  
C.4 INDEXFile . . . . . . . . . . . . . . . . . . . .  
C.5 INFO File 
. . . . . . . . . . . . . . . . . .  
C.6 Control Script 
. . . . . . . . .  
Annex D (informative) Portability Considerations 
. . . . . . . . . . . . . . . . .  
D.l User Requirements 
. . . . . . . . . . . . . . .  
D.2 Portability Capabilities . . . . . . . . . . . . . . .  
D.3 Profding Considerations 
. . . . . . . . . . . . . . . . . .  
Alphabetic Topical Index 
FIGURES 
. . . . .  
Figure 5-1 . 
Example of Software Packaging Layout 
. . . . . . .  
Figure B-1 . 
Roles in Software Administration 
Figure B-2 . 
Example of Software Structure . . . . . . .  
. . . . . . . .  
Figure B-3 . 
Software Object Containment . . . . . . . .  
Figure B-4 . 
Software Object Inheritance 
Figure B-5 . 
Fileset State Transitions (Within Distributions) . . 
Figure B-6 . 
Fileset State Transitions (Within Installed Software) 
. . . . . . . . .  
Figure B-7 . 
Installation State Changes . . . . . . . . .  
Figure B-8 . 
Order of Install Operations 
. . . . . . . .  
Figure B-9 . 
Order of Remove Operations 
. . . . . . . . . . .  
Figure B-10 . 
SDU INFO file format 
. . . . . . . . .  
Figure B-11 . 
SVR4 pkgmap fde format 
TABLES 
. . . . . . . . . . .  
Table 2-1 . 
Typographical Conventions 
Table 3-1 . 
Attributes of the Software-Collection Common Class . . 
Table 3-2 . 
Attributes of the Distribution Class . . . . . . . .  
. . . . . . . . . . .  
Table 3-3 . 
Attributes of the Media Class 
Table 3-4 . 
Attributes of the Installed Software Class . . . . . .  
Table 3-5 . 
Attributes of the Vendor Class . . . . . . . . . .  
Table 3-6 . 
Attributes of the Software Common Class . . . . . .  
Table 3-7 . 
Attributes of the Product Class . . . . . . . . . .  
iii 

Table 3-8 
Table 3-9 
Table 3-10 
Table 3-11 
Table 3-12 
Table 3-13 
Table 4-1 
Table 4-2 
Table 4-3 
Table 4-4 
Table 4-5 
Table 4-6 
Table 4-7 
Table 4-8 
Table 4-9 
Table 5-1 
Table B-1 
Table B-2 
Table B-3 
Table B-4 
Table B-5 
Table B-6 
Table D-1 
. . . . . . . . . .  
. 
Attributes of the Bundle Class . . . . . . . . . .  
. 
Attributes of the Fileset Class 
. . . . . . . . .  
. 
Attributes of the Subproduct Class 
. . . .  
. 
Attributes of the SoftwareFiles Common Class 
. . . . . . . . . . .  
Attributes of the File Class 
. 
. . . . . . . . .  
. 
Attributes of the Control File Class . . . . . . . . .  
. 
Software-spec Version Identifiers 
. . . . . . . . . . . . . .  
. 
Script Return Codes 
. . . . . . . . . . . . . . . .  
. 
Event Status 
. . . . . . . . . . . . .  
. 
General Error Events 
. . . . . . . . . . . . . . . .  
Session Events 
. 
. . . . . . . . . . . . .  
Analysis Phase Events 
. 
. . . . . . . . . . . .  
. 
Execution Phase Events 
. . . . . . . . . . . . . . . .  
Return Codes 
. 
. . . . . . . . . . . . . . . .  
Default Levels 
. 
. . . . . . . . . . .  
. 
File Attributes for INFO File 
. . . . . . . . .  
. 
Possible Attributes of a Host Class 
. . . .  
. 
Mapping from Software to DMTF Component ID 
. . . . . . .  
. 
Comparison of Some Existing Practices 
. 
Comparison of Software Administration Packages . . .  
. 
Comparison of Existing Practice for Software Packaging . 
Packaging Layout Comparisons . . . . . . . . . .  
. 
. . . . . . .  
. 
1387.2 Portability Capability Summary 

International Standard ISOIIEC 15068-2: 1998(E) 
IS0 (the International Organization for Standardization) and IEC (the Interna- 
tional Electrotechnical Commission) form the specialized system for world- 
wide standardization. National bodies that are members of IS0 or IEC 
participate in the development of International Standards through technical 
committees established by the respective organization to deal with particular 
fields of technical activity. IS0 and IEC technical committees collaborate in 
fields of mutual interest. Other international organizations, governmental and 
non-governmental, in liaison with IS0 and IEC, also take part in the work. 
In the field of information technology, IS0 and IEC have established a joint 
technical committee, ISOJIEC JTC 1. Draft International Standards adopted by 
the joint technical committee are circulated to national bodies for voting. Pub- 
lication as an International Standard requires approval by at least 75% of the 
national bodies casting a vote. 
International Standard ISO/IEC 15068-2 was prepared by Joint Technical 
Committee ISOmEC JTC 1, Information technology, Subcommittee SC22, Pro- 
gramming languages, their environments and system sofhvare interfaces. 
ISO/IEC 15068 consists of the following parts, under the general title Infom- 
tion technology-Portable operating system interface (POSIX): 
- 
Part 1: (reserved for future use) 
- 
Part 2: Sofhvare administration 
- 
Part 3: User and group account administration 
- 
Part 4: Print administration 
Annexes A through D of this part of ISO/IEC 15068 are for information only. 

Introduction 
(This Introduction is not a normative part of ISOAEC 15068-2 Information technology - Portable 
Operating System Interface (POSE) system administration - 
Part 2: Software administration, but 
is included for information only.) 
System administration utilities vary widely between vendors, being an area where 
there are currently no formal standards that have proved to be significant in prac- 
tice. This makes the task of system administration difficult. The objective of this 
part of ISOIIEC 15068 is to address this problem for software administration, a 
specific area of system administration, and to contribute to the overall solution of 
administering computing environments, both stand-alone and distributed. 
In pursuit of this goal, this part of ISOIIEC 15068 defines a software packaging lay- 
out, a set of information maintained about software, and a set of utility programs 
to manipulate that software and information. These definitions provide the flexi- 
bility necessary for system administrators to enforce policies suitable to their 
environments. 
Organization of the Standard 
The standard is dwided into the following sections: 
(1) General 
(2) Terminology and General Requirements 
(3) Software Structures 
(4) Software Administration Utilities 
(5) Software Packaging Layout 
Also included are the following annexes: 
- Bibliography (Annex A) 
- Rationale and Notes (Annex B) 
- Sample Files (Annex C) 
- Portability Considerations (Annex D) 
This introduction and the annexes are not considered a normative part of the 
standard. 
Conformance Measurement 
In publishing this part of ISOhEC 15068, both IEEE and the POSM.7.2 developers 
simply intend to provide a yardstick against which various operating system 
implementations may be measured for conformance. It is not the intent of either 
the IEEE or POSIX.7.2 developers to measure or rate any products or to reward or 
sanction the product of any vendor as standard by these or any other means. The 
responsibility for determining the degree of conformance or lack thereof with this 
part of ISOIIEC 15068 rests solely with the individual evaluating the product 
claiming to be in conformance with the standard. 
Introduction 

Base Documents 
Much of the original text came to the developers of this part of ISOIIEC 15068 from 
UNM System Laboratories (the pkg* utilities) and Hewlett-Packard (HP 
Software Distribution Utilities). For further details and comparisons of various 
existing practices, see B.4 and B.4.5. 
Extensions and Supplements to This Standard 
Activities to extend t h s  standard to address additional requirements are in pro- 
gress and similar efforts can be anticipated in the future. This is an outline of 
how these extensions will be incorporated and how users of this document can 
keep track of that status. 
Extensions are approved as supplements to this document following the IEEE 
standards procedures and eventually as International Organization for 
StandardizationIInternational Electrotechcal Committee (ISO/IEC) standards. 
Approved supplements are published separately and distributed with orders from 
the IEEE for this document until the full document is reprinted and such supple- 
ments are incorporated in their proper positions. 
If there are any questions about the completeness of your version, you may con- 
tact the IEEE Computer Society, (202) 371-0101, or the IEEE Standards Office, 
(908) 562-3800, to determine what supplements have been published. 
Supplements may contain either required functions or optional facilities. Supple- 
ments may add additional conformance requirements (see 1.3, which defines new 
classes of conforming systems or applications). 
It is undesirable (but perhaps unavoidable) for supplements to change the func- 
tionality of the already defined facilities. 
If you are interested in participating in addressing IEEE 1387 issues and develop 
ing the IEEE PI387 standards, please send your name, address, and phone 
number to the Secretary, IEEE Standards Board, P.O. Box 1331,445 Hoes Lane, 
Piscataway, NJ 08844-1331, USA. 
When writing, ask to have your letter forwarded to the chairperson or appropriate 
reviewerldeveloper of IEEE Std 1387.2-1995. 
vii 

ISOIIEC 15068-2 was prepared by the IEEE P1387.2 Working Group, sponsored by 
the Portable Applications Standards Committee of the IEEE Computer Society. 
At the time this part of ISOIIEC 15068 was approved, the membershp of the IEEE 
P1387.2 Working Group was as follows: 
Portable Applications Standards Committee 
Chair: 
Lowell Johnson 
Vice-Chair: 
Charles Severance 
Functional 
Chairs: 
Andy Bihain 
Jon Spencer 
Andrew Josey 
Jay Ashford 
Bany Needham 
Treasurer: 
Peter Smith 
Secretary: 
Charles Severance 
IEEE P1387 Working Group Officials 
Chair: 
Vice-Chair: 
Technical Editor: 
Secretary: 
Martin Kirk 
Steve Carter (1988-1990) 
Jay Ashford 
David Hinnant (1988-1991) 
Matt Wicks (1991-1993) 
Robert Robillard (1991-1993) 
Shoshana O'Brien (1989-1991) 
Bob Baumann (1988-1990) 
Bernard Kinsler (1990-1995) 
John Pokladnik (1990) 
Mark Colburn (1989) 
IEEE P1387.2 Working Group Officials 
Chair: 
Jay Ashford 
Technical Editors: 
Jay Ashford, George Williams 
Matt Wicks (1991-1993) 
Jay Ashford 
Richard Alexander 
Barrie Archer 
Jay Ashford 
Shane Claussen 
Jim Darling 
Frances Dodson 
Frank Dogil 
Janet Frazer 
Jay Goldberg 
Michael Gutmann 
Steve Howell 
David Humphreys 
IEEE P1387.2 Technical Reviewers 
Jerry Rubin 
George Williams 
Matt Wicks 
IEEE P1387.2 Working Group 
Louis Imershein 
John Jobs 
Jim Johnson 
Judy Kale 
Martin Kirk 
Esti Koen 
Steve Lamotte 
Sean Landis 
Fu-Tin Man 
Norbert Marrek 
Laura Micks 
Tom Murphy 
Ken Nicholson 
Per Pedersen 
Daryl Roberts 
Helmut Roth 
Jeny Rubin 
Nigel Titley 
Stephe Walli 
Matthew Wicks 
George Williams 
Neil Winton 
Jane Zysk 
viii 
Introduction 

The following persons provided valuable input during the balloting period: 
Francesco Borgna 
Theodore Collins 
Cheng Hu 
Shane P. McCarron 
Mike Ryan 
Brenda Parsons 
Larry Spieler 
Dieter Putatzki 
Marc J. Stephenson 
Walter Wong 
The following persons were on the balloting committee: 
Barrie Archer 
Jay Ashford 
Jason Behm 
Michael E. Browne 
Dana Carson 
Shane Claussen 
Frances Dodson 
Ron Elliott 
Michael E. Falck 
David Fiander 
Dan Geer 
Michel Glen 
Dave Grindeland 
Geoff Hall 
Barry Hedquist 
Joseph Hungate 
Louis Imershein 
Hal Jespersen 
Judy S. Kerner 
Lawrence Kilgallen 
Martin J. Kirk 
Esti Koen 
George Kriger 
Thomas M. Kurihara 
Sean Landis 
Jim Moore 
John S. Morris 
Mo Oloumi 
Paul Rabin 
David Radford 
Rick Roelling 
Frank Rone 
Jerrold Rubin 
James G. Tanner 
Mark-Rene Uchida 
Matthew Wicks 
George Williams 
Walter Wong 
Oren Yuen 
When the IEEE Standards Board approved this standard on June 14,1995, it had 
the following membership: 
E. G. "Al" Kiener, Chair 
Donald C. Loughry, Vice Chair 
Andrew G. Salem, Secretary 
Gilles A. Baril 
Clyde R. Camp 
Joseph A. Cannatelli 
Stephen L. Diamond 
Harold E. Epstein 
Donald C. Fleckenstein 
Jay Forster* 
Donald N. Heirman 
Richard J. Holleman 
Jim Isaak 
Ben C. Johnson 
Sonny Kasturi 
Lorraine C. Kevra 
Ivor N. Knight 
Joseph L. Koepfinger* 
D. N. "Jim" Logothetis 
L. Bruce McClung 
Marco W. Migliaro 
Mary Lou Padgett 
John W. Pope 
Arthur K. Reilly 
Gary S. Robinson 
Ingo Rusch 
Chee Kiow Tan 
Leonard L. Tripp 
*Member Emeritus 
Also included are the following nonvoting IEEE Standards Board liaisons: 
Satish K. Aggarwal 
Richard B. Engelman 
Robert E. Hebner 
Chester C. Taylor 
Rochelle L. Stern 
ZEEE Standards Project Editor 


INTERNATIONAL STANDARD 
ISO/IEC 15068-2: 1997 
Information technology - Portable Operat- 
ing System Interface (POSIX) system 
administration - Part 2: Software adminis- 
tration 
Section 1: General 
1.1 Scope 
This part of ISOAEC 15068 defines a software packaging layout and utilities that 
operate on that packaging layout as well as software installed from that packaging 
layout. The scope of this part of ISOhEC 15068 is administration of software 
across distributed systems. This administration includes, but is not limited to, 
packaging of software for distribution, distribution of software to systems, instal- 
lation and configuration of software on systems, and removal of software from sys- 
tems. 
This part of ISOhEC 15068 is motivated by many factors, including a desire by sys- 
tem administrators and software suppliers to have a common way of installing 
and removing software. To meet the needs of these groups, this part of ISO/IEC 
15068 consists of several components, listed below. The readers of this part of 
ISOAEC 15068 include system administrators, suppliers of software that imple- 
ment this part of ISOhEC 15068, and suppliers of software that use implementa- 
tions of this part of ISOhEC 15068. Readers in each of these categories may find 
their attention drawn to different sections. 
The key components are listed below. 
Software structures 
This part of ISOhEC 15068 defines a hierarchical set of structures 
used to define software. Information is kept about the software 
based on these structure definitions. The structure definitions apply 
both to installed software and to software prepared for installation 
1.1 Scope 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
but not yet installed. 
Software packaging layout 
This part of ISOAEC 15068 defines the organization of software on a 
distribution medium, the information held about that software, and 
the way in which such information is represented. This enables both 
portability of software distributions across systems of different archi- 
tecture, and the use of different media to distribute software (includ- 
ing both file system and serial image forms). 
Information kept about software 
This part of ISOAEC 15068 defines the information that is held about 
software, both installed software and distributions. This provides a 
consistent view of software, even when that software is provided from 
various sources. The way in which the information is held is 
undefined within this part of ISOIIEC 15068. 
Utilities to administer software 
This part of ISOAEC 15068 defines a utility to convert software into 
the packaging layout, known as a distribution. This part of ISOIIEC 
15068 also contains utilities to examine the information in a distribu- 
tion, copy software from one distribution to another, install software 
from a distribution, remove software from a distribution, and verify 
the integrity of a distribution. There are also utilities for configuring 
installed software, verifying the integrity of installed software, exa- 
mining and modifying the information held about installed software, 
and for removing installed software from a system. This provides 
administrators with a consistent method of dealing with software 
across all conforming systems. 
Distributed software administration 
This part of ISOIIEC 15068 defines the concepts, and the utility syn- 
tax and behaviors, for managing software in a distributed environ- 
ment. This includes the concept of different software administration 
roles (developer, packager, manager, source, target, and client). 
Different utilities involve different roles, and different roles may be 
distributed across multiple systems within a single command execu- 
tion. 
This part of ISOIIEC 15068 is based upon the knowledge of, and documentation 
for, existing programs that assume an interface and architecture similar to that 
described by POSM.1 (2)') and POSM.2 (3). Any questions regarding the definition 
of terms or the semantics of an underlying concept should be referred to 
POSKl(2) and POSM.2 {3}. This part of ISOhEC 15068 does not require the use 
of any specific programming language and, in particular, does not require the use 
of the C language. This part of ISOIIEC 15068 is based upon the knowledge of, and 
documentation for, existing programs that utilize C-language interfaces. Any 
questions regarding the definition of terms or the semantics of an underlying 
1) The numbers in curly brackets correspond to those of the references in 1.2. When preceded by a 
"B," the numbers correspond to those of the bibliography in Annex A. 
1 General 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
concept in this language should be referred to C Standard (B13). 
1.2 Normative References 
The following standards contain provisions that, through references in this text, 
constitute provisions of this part of ISO/IEC 15068. At the time of publication, the 
editions indicated were valid. All standards are subject to revision, and parties to 
agreements based on this part of ISO/IEC 15068 are encouraged to investigate the 
possibility of applying the most recent editions of the standards listed below. 
Members of IEC and IS0 maintain registers of currently valid International Stan- 
dards. 
1 
ISO/IEC 646: 1991, Information technology-IS0 
7-bit coded character set 
for information interchange (International Reference ~ersion).~) 
(2) 
ISO/IEC 9945-1: 1996 
(ANSI/IEEE 
Std 
1003.1-1996), Information 
technology - 
Portable Operating System Interface (POSIX") - 
Part 1: Sys- 
tem Application Program Interface ( ' I )  [C Language]. 33) 
(3) 
ISOAEC 9945-2: 1993 
(ANSUEEE 
Std 
1003.2-1992), Information 
technology - Portable Operating System Interface (POSIX") - Part 2: 
Shell and Utilities. 
(4) 
ISO/IEC 10646-1: 1993, Information technology-Universal 
Multiple-Octet 
Coded Character Set (UCS)--Part 1: Architecture and Basic Multilingual 
Plane. 
1.3 Conformance 
1.3.1 Implementation Conformance 
1.3.1.1 Conforming POSIX7.2 Implementation 
A Conforming POSIX.7.2 Implementation, also known as a "conforming imple- 
mentation," shall meet all the following criteria: 
(1) The system shall support all interfaces defined within this part of ISOIIEC 
15068. These interfaces shall support all the functional behavior 
described herein. The interfaces covered by this definition of confor- 
mance include, but are not limited to, utilities and their options and 
extended options, the behavior of the utilities, including the generation of 
events; events; structures; attributes and their values; and file formats. 
2) ISO/IEC documents can be obtained from the IS0 Central Secretariat, Case Postale 56,l rue de 
Varembe, CH-1211, Geneve 20, SwitzerlandlSuisse. 
3) IEEE publications are available from the Institute of Electrical and Electronics Engineers, 445 
Hoes Lane, P.O. Box 1331, Piscataway, NJ 08855-1331, USA. 
1.3 Conformance 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
(2) The system may provide additional or enhanced utilities, functions, or 
facilities not required by this part of ISOIIEC 15068. Nonstandard exten- 
sions should be identified as such in the system documentation. Nonstan- 
dard extensions should conform to 2.10.2, of POSM.2 (3). Nonstandard 
extensions, when used, may change the behavior of utilities, functions, or 
facilities defined by this part of ISOIIEC 15068. In such cases, the confor- 
mance document for the implementation (see 2.2.1.3) shall define an exe- 
cution environment (i.e., shall provide general operating instructions) in 
which a Strictly Conforming POSIX.7.2 Distribution may be operated 
upon and yield the behavior specified by this part of ISOIIEC 15068. In no 
case shall such an environment require modification of a Strictly Con- 
forming POSlX.7.2 Distribution. 
An implementation shall be a Conforming POSIX.7.2 Implementation if all the cri- 
teria for such are met with the exception of those features that depend on the 
existence of conforming implementations of either POSIX.1 (2) or POSM.2 (3). In 
this case, the conformance document for the Conforming POSM.7.2 Implementa- 
tion shall describe the behavior of the implementation of all features of the imple- 
mentation, or of a Strictly Conforming POSIX.7.2 Distribution, that depend on the 
function of POSM.l (2) or POSM.2 (3). See 2.3.1 and 2.3.2. 
1.3.1.2 Limited Conformance POSIX7.2 Implementation 
A Limited Conformance POSIX.7.2 Implementation shall meet all of the criteria 
established for a Conforming POSIX.7.2 Implementation (see 1.3.1.1) with the fol- 
lowing exception: 
- For the value of HOST in specifications of sources and targets (see 4.1.4.21, 
the system may support only the local machine. While this type of limited 
conformance removes support for remote operations, the syntax of all utili- 
ties and files shall remain identical to that required for Conforming 
POSIX.7.2 Implementations. The way in which this limitation is imposed 
by the implementation shall be implementation defined. 
1.3.1.3 Documentation 
A conformance document with the following information shall be available for an 
implementation claiming conformance to this part of ISOAEC 15068. The confor- 
mance document shall have the same structure as this part of ISOIIEC 15068, with 
the information presented in the appropriately numbered sections. Sections that 
consist solely of subordinate section titles, with no other information, are not 
required. 
The conformance document shall not contain information about extended facilities 
or capabilities outside the scope of this part of ISOIIEC 15068, unless those exten- 
sions affect the behavior of a Strictly Conforming POSIX.7.2 Distribution; in such 
cases, the documentation required by the previous subclause shall be included. 
The conformance document shall contain a statement that indicates the full name, 
number, and date of this part of ISOAEC 15068 that applies. The conformance 
document may also list software standards approved by ISOIIEC or any ISOIIEC 
member body that are available for use by a Conforming POSIX.7.2 Implementa- 
tion or by a Conforming POSIX.7.2 Distribution. Applicable characteristics where 
4 
1 General 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (Ef 
IEEE Std 1387.2-1995 
documentation is required by one of these standards, or by standards of govern- 
ment bodies, may also be included. 
The conformance document shall describe the behavior of the implementation for 
all implementation-defined features defined in this part of ISOIIEC 15068. This 
requirement shall be met by listing these features and providing either a specific 
reference to the system documentation or full syntax and semantics of these 
features. When the value or behavior in the implementation is designed to be 
variable or customizable on each instantiation of the system, the implementation 
provider shall document the nature and permissible ranges of this variation. 
When information required by this part of ISOIIEC 15068 is related to the underly- 
ing operating system and is already available in the POSM.l {2) or POSM.2 (3) con- 
formance document, the implementation need not duplicate this information in 
the conformance document for this part of ISO/IEC 15068, but may provide a 
cross-reference for this purpose. 
The conformance document shall indicate whether the implementation is based on 
an underlying operating system that is fully conforming to both POSM.1{2) and 
POSM.2 (3). 
If the implementation is not based on a conforming implementation of POSIX.1{2), 
then the conformance document shall describe the behavior of the implementation 
for all features of a Strictly Conforming POSM.7.2 Distribution that depend on 
the function of POSM.1 (2). See 2.3.1. 
If the implementation is not based on a fully conforming implementation of 
POSM.2 {3), then the conformance document shall describe the behavior of the 
implementation for all features of a Strictly Conforming POSM.7.2 Distribution 
that depend on the function of POSM.2 (3). This dependency includes all of the 
utilities of POSM.2 {3), including the shell. See 2.3.2. 
The conformance document may specify the behavior of the implementation for 
those features where this part of ISO/IEC 15068 states that implementations may 
vary or where features are identified as undefined or unspecified. 
No specifications other than those described in this subclause (1.3.1.3) shall be 
present in the conformance document. 
The phrase "shall be documented" in this part of ISOIIEC 15068 means that docu- 
mentation of the feature shall appear in the conformance document, as described 
previously, unless the system documentation is explicitly mentioned. 
The system documentation should also contain the information found in the con- 
formance document. 
1.3.1.4 Conforming Implementation Options 
Additional utility options, distribution formats, or software structure attributes 
and values, may be provided in other related standards or in future revisions to 
this part of ISOIIEC 15068, without requiring this part of ISO/IEC 15068 to be 
updated. 
1.3 Conformance 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSK SYSTEM ADMINISTRATION - 
1.3.2 Distribution Conformance 
All distributions claiming conformance to this part of ISOAEC 15068 fall within 
one of the categories in the following subclauses. 
1.3.2.1 Strictly Conforming POSIX.7.2 Distribution 
A Strictly Conforming POSM.7.2 Distribution is a distribution that requires only 
the facilities described in this part of ISO/IEC 15068 (including any required facili- 
ties of the underlying operating system; see 2.3). Such a distribution 
(1) Shall contain only those files and directories defined in the Software 
Packaging Layout (see Section 5) 
(2) Shall contain only those software structures and attributes within those 
structures described in this part of ISOhEC 15068 
(3) Shall use only the values of software structure attributes defined as valid 
within described in this part of ISOAEC 15068 
(4) Shall use only the POSM.2 (3) shell, sh, to invoke control files 
(5) Shall not use facilities, structures, attributes, or values designated as 
obsolescent 
Within this part of ISOIIEC 15068, any restrictions placed upon a Conforming 
POSIX.7.2 Distribution also shall restrict a Strictly Conforming POSM.7.2 Distri- 
bution. 
1.3.2.2 Conforming POSIX.7.2 Distribution 
A Conforming POSM.7.2 Distribution is a distribution that uses only the facilities 
described in this part of ISOAEC 15068 and implied facilities of the underlying 
operating system. See 2.3. Such a distribution shall use only the POSM.2 (3) 
shell, sh, to invoke control files. In addition to the software structures, and attri- 
butes within those structures, allowable in a Strictly Conforming POSM.7.2 Dis- 
tribution, a Conforming POSIX.7.2 Distribution can also contain: 
(1) Additional attributes in the manner supported by this part of ISOhEC 
15068. 
(2) Additional files within the distribution, except where this part of ISOhEC 
15068 prohibits such files. 
The term Conforming POSM.7.2 Distribution is used to describe either of the two 
following distribution types. 
1.3.2.2.1 ISOIIEC Conforming POSM.7.2 Distribution 
An ISOIIEC Conforming POSLX.7.2 Distribution shall also include a statement of 
conformance that documents all other ISO/IEC standards used. 
1.3.2.2.2 <National Body> Conforming POSM.7.2 Distribution 
A <National Body> Conforming POSM.7.2 Distribution differs from an ISO/IEC 
Conforming POSM.7.2 Distribution in that it also may use specific standards of a 
single ISO/IEC member body referred to here as "dVationa1 Body>." Such a 
6 
1 General 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
distribution shall include a statement of conformance that documents all other 
dational Body> standards used. 
1.3.2.3 Conforming POSM.7.2 Distribution Using Extensions 
A Conforming POSM.7.2 Distribution Using Extensions is a distribution that 
differs from a Conforming POSM.7.2 Distribution only in that it either requires 
behavior of an implementation other than that which is specified by this part of 
ISO/IEC 15068, or requires invocation of control files with other than the 
POSIX.2 (3) shell, or both. 
NOTE: One example of non-standard behavior is that of requiring implementations to understand, 
and take action based upon, the values of various vendor-defined attributes. Another example of 
non-standard behavior is the ability to properly handle files with names drawn from other than the 
portable filename character set. Vendors creating such distributions are encouraged to transform 
filenames using UTF-8 (4). 
In addition to the documentation required of a Conforming POSM.7.2 Distribu- 
tion, such a distribution 
(1) Shall fully document its requirements for these extended facilities, 
whether required within the software packaging layout, within the utili- 
ties defined in this part of ISO/IEC 15068, or both 
(2) Shall document whether it is possible to convert this distribution into a 
Conforming POSM.7.2 Distribution, and what those steps are 
(3) Shall document the extent to which the software contained in the distri- 
bution can be managed by the utilities in accordance with this part of 
ISO/IEC 15068 
(4) Shall document the requirement for any interpreter other than the 
POSM.2 (31 Shell 
A Conforming POSM.7.2 Distribution Using Extensions shall be either an 
ISOIIEC Conforming POSM.7.2 Distribution Using Extensions, or a <National 
Body> Conforming POSM.7.2 Distribution Using Extensions. See 1.3.2.2.1 and 
1.3.2.2.2. 
1.3.2.4 Documentation 
A conformance document with information required by 1.3.2 shall be available for 
a distribution claiming conformance to this part of ISOIIEC 15068. 
The conformance document shall contain a statement that indicates the full name, 
number, and date of this part of ISOIIEC 15068 that applies. The conformance 
document may also list software standards approved by ISOAEC or any ISO/IEC 
member body that are available for use by a Conforming POSM.7.2 Implementa- 
tion or by a Conforming POSM.7.2 Distribution. Applicable characteristics where 
documentation is required by one of these standards, or by standards of govern- 
ment bodies, may also be included. 
1.3 Conformance 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
264 
1.4 Test Methods 
265 
There are no specific test methods for this part of ISOIIEC 15068. 
1 General 

ISOnEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Section 2: Terminology and General Requirements 
2.1 Conventions 
2.1.1 Editorial Conventions 
This part of ISOJIEC 15068 uses the following editorial and typographical conven- 
tions. A summary of typographical conventions is shown in Table 2-1. 
Table 2-1 - Typographical Conventions 
Reference 
Attribute of a Structure (object) 
:-Language Data Type 
:-Language Function 
Zross Reference: Annex 
Cross Reference: Clause 
Cross Reference: Other Standard 
Cross Reference: Section 
Cross Reference: Subclause 
Defined Term 
Definition Citation 
Environment Variable 
Error Number 
Event Status: Event Code 
Example Input 
Example Output 
Figure Reference 
File Name 
Keyword 
Parameter 
Script Types 
Special Character 
Symbolic Constant, Limit 
Table Reference 
Utility Extended Option 
Utility Extended Option with Value 
Utility Name 
Utility Operand 
Utility Option 
Utility Option with Option-Argument 
Value of an Attribute 
Example 
filesets or product.filesets 
long 
system (1 
Annex A 
2.3 
ISOlIEC 9999-1 (nl 
Section 2 
2.3.4, 2.3.4.5, 2.3.4.5.6 
(see text) 
[POSIx.l (211 
PATH 
[EINTR] 
SW-ERROR: SW-10-ERROR 
echo Hello, World 
Hello, World 
Figure 7-1 
/ tmp 
fileqermissions 
<directory pathname> 
preinstall 
<newline> 
(-POSlX-VDISABLE), (LINE-MAXI 
Table 6-1 
reinstall 
reinstall=true 
awk 
file-name 
-C 
-w width 
true 
2.1 Conventions 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
The Bold font is used to show brackets that denote optional arguments in a utility 
synopsis, as in 
c u t  [-c list 1 [file-name] 
These brackets shall not be used by the application unless they are specifically 
mentioned as literal input characters by the utility description. 
There are symbols enclosed in angle brackets (< >): 
Parameters 
Parameters, also called metavariables , are in italics, 
such as <directory pathname>. The entire symbol, 
including the brackets, is meant to be replaced by the 
value of the symbol described within the brackets. 
In some examples, the  old Courier font is used to indicate the output of .the 
system that resulted from some user input, shown in Courier. 
Defined terms are shown in three styles, depending on context: 
(1) Terms defined in 2.2.1, and 2.2.2 are expressed as subclause titles. Alter- 
native forms of the terms appear in brackets]. At the conclusion of this 
type of definition, the designation of a standard within brackets] indi- 
cates that the text of the definition was copied from that standard, with 
only editorial changes, if any. 
(2) The initial appearances of other terms, applying to a limited portion of 
the text, are in italics. 
(3) Subsequent appearances of the term are in the Roman font. 
Symbolic constants are shown in the following two styles - those within curly 
brackets are intended to call the attention of the reader to values in <I.imi ts . h> 
and <unistd.h>; those without braces are usually defined by one or a few 
related functions. There is no semantic difference between these two forms of 
presentation. 
Events are shown within text in uppercase form and enclosed in parentheses. 
This is done to call the attention of the reader to the values described in 4.1.6.2. 
Filenames and pathnames are shown in Courier. When a pathname is shown 
starting with $HOME/, this indicates the remaining components of the pathname 
are to be related to the directory named by the user's HOME environment 
variable. 
The style selected for some of the special characters, such as <newline>, 
matches the form of the input given to the localedef utility (see 2.5.2 of 
POSIX.2 (3)). Generally, the characters selected for this special treatment are 
those that are not visually distinct, such as the control characters <tab> or 
<newline>. 
Literal characters and strings used as input or output are shown in various ways, 
depending on context as follows: 
%, begin 
When no confusion would result, the character or string is ren- 
dered in the Courier font and used directly in the text. 
2 Terminology and General Requirements 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
'c' 
In some cases a character is enclosed in single-quote characters, 
similar to a character constant used by several programming 
languages. Unless otherwise noted, the quotes shall not be used 
as input or output. 
Ilstringn In some cases, a string is enclosed in double-quote characters 
similar to a string constant used by several programming 
languages. Unless otherwise noted, the quotes shall not be used 
as input or output. 
Defined names that are usually in lowercase, particularly function names, are 
never used at the beginning of a sentence or anywhere else that English usage 
would require them to be capitalized. 
Parenthetical expressions within normative text also contain normative informa- 
tion. The general typographic hierarchy of parenthetical expressions is: 
The square brackets are most frequently used to enclose a parenthetical expres- 
sion that contains a function name [such as waitpid01 with its built-in 
parentheses. 
In some cases, tabular information is presented inline; in others it is presented in 
a separately labeled table. This arrangement was employed purely for ease of 
reference and there is no normative difference between these two cases. 
Annexes marked as normative are parts of the standard that pose requirements, 
exactly the same as the numbered sections, but have been moved to near the end 
of the document for clarity of exposition. Informative annexes are for information 
only and pose no requirements. All material preceding page 1 of the document 
(the "front matter") and the two indexes at the end are also only informative. 
NOTES that appear in a smaller point size have one of two different meanings as 
follows, depending on their location: 
- When they are within the normal text of the document, they are the same 
as footnotes - informative, posing no requirements on implementations, 
distributions, or applications. 
- When they are attached to tables or figures, they are normative, and can 
include requirements. 
Text marked as examples (including the use of "e.g.") is for information only. 
The table in this section refers to constructs from the C language. This part of 
ISO/IEC 15068 itself has no requirement for the use of the C language or any other 
programming language in particular. However, this part of ISOIIEC 15068 has 
been developed with the use of concepts from POSM.1{2} and POSM.2 (31, and 
those standards do make use of C-language constructs. The use of C-language 
constructs within this part of ISO/IEC 15068 is simply to provide reference to the 
appropriate parts of POSM.l (2) and POSM.2 (3). As far as this part of ISO/IEC 
15068 is concerned, use of equivalent function from other languages is acceptable. 
In some cases certain characters are interpreted as special characters by the 
shell. In the normative portions of this part of ISO/IEC 15068, these characters 
are shown without escape characters or quoting (see 3.2 in POSM.2 {3}). In all 
examples, however, quoting has been used, showing how sample commands 
2.1 Conventions 
11 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
(utility names combined with arguments) could be passed correctly to a shell (see 
sh in 4.56 of POSIX.2 {3)), or as a string to the system 0 
function. 
The typographical conventions listed here are for ease of reading only. Editorial 
inconsistencies in the use of typography are unintentional and have no normative 
meaning in this part of ISO/IEC 15068. 
2.1.2 Grammar Conventions 
Portions of this part of ISOIIEC 15068 are expressed in terms of a special grammar 
notation. It is used to portray the complex syntax of certain program input. The 
grammar is based on the syntax used by the yacc utility (see A.3 in POSM.2 (31). 
However, it does not represent fully functional yacc input suitable for program 
use. The lexical processing and all semantic requirements are described only in 
textual form. The grammar is not based on source used in any traditional imple- 
mentation and has not been tested with the semantic code that would normally be 
required to accompany it. Furthermore, there is no implication that the partial 
yacc code presented represents the most efficient, or only, means of supporting 
the complex syntax within the utility. Implementations may use other program- 
ming languages or algorithms, as long as the syntax supported is the same as that 
represented by the grammar. 
The following typographical conventions are used in the grammar; they have no 
significance except to aid in reading. 
- The identifiers for the reserved words of the language are shown with a 
leading capital letter. These are terminals in the grammar. Examples: 
While, Case. 
- The identifiers for terminals in the grammar are all named with uppercase 
letters and underscores. Examples: NEWLINE, ASSIGN-OP, NAME. 
- The identifiers for nonterminals are all lowercase. 
2.2 Definitions 
2.2.1 Terminology 
For the purposes of this part of ISOIIEC 15068, the following definitions apply: 
2.2.1.1 application: Includes both humans and executable programs that use 
implementations of this part of ISO/IEC 15068. Such executable programs can 
include control files within a distribution. 
2.2.1.2 can: An indication of a permissible optional feature or behavior available 
to a distribution or to someone using a utility defined in this part of ISOIIEC 
15068; the implementation shall support such features or behaviors as mandatory 
requirements. 
2 Terminology and General Requirements 

PART 2: SOFTWARE ADMINISTRATION 
ISOIIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
2.2.1.3 conformance document: A document provided by an implementor that 
contains implementation details as described in 1.3.1.3-. 
NOTE: See 2.2.1.3 of POSM.2 13). 
2.2.1.4 implementation:."h object providing, to distributions and users, the 
services defined by this part of ISOIIEC 15068. 
The word implementation is to be interpreted to mean that object, after it has 
been modified jn accordance with the;manufactur.ef.s ins$ypctions to: 
- Configure it for conformance ,withthis part of ISOIIEC 15068; 
- Select some of the various optional facilities described by this part of 
ISOIIEC 15068, through customization by local system administrators or 
operators. 
An exception to this meaning occurs when discussing conformance documentation 
or using the term implementation defined. 
NOTE: See 2.2.1.5 and 1.3.1.3. 
2.2.1.5 implementation defined: An indication that the implementation pro- 
vider shall define and document the requirements for correct program constructs 
and correct data of a value or behavior. 
When the value or behavior in the implementation is designed to be variable or 
customizable on each instantiation of the system, the implementation provider 
shall document the nature and permissible ranges of this variation. 
NOTE: See 1.3.1.3. See also 2.2.1.5 of POSM.2 (31. 
2.2.1.6 may: An indication of an optional feature or behavior of the implementa- 
tion that is not required by this part of ISOAEC 15068, although there is no prohi- 
bition against providing it. 
A Strictly Conforming POSM.7.2 Distribution is permitted to use such features, 
but shall not rely on the implementation's actions in such cases. To avoid ambi- 
guity, the reverse sense of may is not expressed as may not, but as need not. 
2.2.1.7 obsolescent: An indication that a certain feature may be considered for 
withdrawal in future revisions of this part of ISOAEC 15068. 
NOTE: See 2.2.1.7 of POSK2 13). 
2.2.1.8 shall: An indication of a requirement on the implementation or on 
Strictly Conforming POSM.7.2 Distributions, where appropriate. 
2.2.1.9 should: 
(1) With respect to implementations, an indication of an implementation 
recommendation, but not a requirement. 
(2) With respect to distributions, an indication of a recommended practice for 
distributions, and a requirement for Strictly Conforming POSIX.7.2 
2.2 Definitions 
13 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX 
SYSTEM ADMINISTRATION - 
Distributions. 
D 
2.2.1.10 system documentation: All documentation provided with an imple- 
mentation, except the conformance document. 
Electronically distributed documents for an implementation are considered part of 
the system documentation. 
NOTE: See 2.2.1.10 of POSIX.2 (3). 
2.2.1.11 undefined: An indication that this part of ISOfIEC 15068 imposes no 
portability requirements on applications for erroneous program construction, 
erroneous data, or use of an indeterminate value. 
Implementations (or other standards) may specify the result of using that value or 
causing that behavior. An application using such behaviors is using extensions, as 
defined in 1.3.2.3. 
NOTE: See 2.2.1.11 of POSM.2 (3). 
2.2.1.12 unspecified: An indication that this part of ISOIIEC 15068 imposes no 
portability requirements on applications for a correct program construction or 
correct data. 
Implementations (or other standards) may specify the result of using that value or 
causing that behavior. An application requiring a specific behavior, rather than 
tolerating any behavior when using that functionality, is using extensions, as 
defined in 1.3.2.3. 
NOTE: See 2.2.1.12 of POSIX.2 (3). 
2.2.2 General Terms 
For the purposes of this part of ISOfIEC 15068, the following definitions apply: 
2.2.2.1 absolute path: If the underlying system is based upon a conforming 
implementation of POSM.1 (2); then a pathname that begins with /; otherwise, 
absolute path is implementation defined. 
2.2.2.2 alternate root directory: A pathname other than / for managing 
installed software. 
2.2.2.3 analysis phase: The steps a software administration utility performs, 
before modifymg the target, while attempting to ensure that the execution of 
operations on the target will succeed. 
2.2.2.4 attribute: A component of an object, possessing a name and one or more 
values. 
2 Terminology and General Requirements 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
2.2.2.5 autorecovery: The process of restoring installed cD 
was in prior to the invocation, and subsequent faiW- dur 
swinstall utility. 
2.2.2.6 autoselect: The autoaatic selection, within a utility, of software beyond 
that directly specified by the user in order to meet the dependencies of the user- 
specified software. 
2.227 b
u
a
b
 
. - -, 1s a grou~~fig 
"i x5Goftware objects, 
such as all or parts of other bundles and prcducts. 
- - - 
NOTE: See 3.8. 
2.2.2.8 catalog: The metadata describing all the software objects that are a part 
of a single software-collection (distribution or installed-software object). 
Catalogs exist both in distributions and for installed software, although storage of 
catalogs for installed software is undefined within this part of ISOtIEC 15068. 
A catalog in a distribution shall always use the exported catalog structure, since it 
is required to be stored in a portable or exported catalog structure. A catalog for 
installed software shall use the exported catalog structure when information is 
listed with swlist -v. 
NOTE: See Section 5. 
2.2.2.9 class: Describes the structure and attributes of each level of the software 
hierarchy that is used to organize and manage software files. 
2.2.2.10 client role: The location where the software is actually executed or 
used (as opposed to the target where it is actually installed). 
The configuration of software is performed by this role. 
2.2.2.11 command line interface: A means of invoking utilities by issuing com- 
mands from within a POSM.2 {3) shell, implying that neither graphics nor win- 
dows are required. 
2.2.2.12 common class: Defines those aspects of different software objects that 
are the same. 
The common classes for this part of ISOIIEC 15068 are software-collections, 
software, and software-files. The names of these classes are also used to generi- 
cally describe any object that shares that common class. 
2.2.2.13 compressed file: A file that has been transformed in a manner 
intended to reduce its size without loss of information. 
2.2.2.14 containment: A relationship between two objects such that one is said 
to belong to, or form part of, the other. 
2.2 Definitions 
15 

, - 
263 
264 
265 
266 
no- 
< > 
268 
269 
270 
271 
272 
273 
274 
275 
276 
277 
278 
279 
280 
281 
282 
283 
284 
285 
286 
287 
288 
289 
290 
291 
292 
ISOAT *3 15068-2: 1997 (E) 
IEEE ;td 1387.2-1995 
INFORMATION TECHNOLOGY-POSE 
SYSTEM ADMINISTRATION - 
\ 
ects exceb, r+mre-collection objects shall be contained within exactly one 
.;.=I, 
>f software-collection objects is undefined within this 
pa; , , idOIIEC 150L 
2.2.2.15 control directory: The direcL, .- 
below which the control-files for 
filesets and products are stored within expoi ted catalogs for distributions and 
installed software. 
-I_/-_ 
2.2.2.16 coimol-uies. i 1: . 
l- w L  
<at. 
unhties, the INFO 
file describing thc I L , ~ S  111 a nleset, and other files associated with a software 
object. 
2.2.2.17 control script: A control-file associated with a software object that is 
executed by the software administration utilities. 
2.2.2.18 corequisite: The specification in a software object such that another 
software object shall be installed, in conjunction with the installation of the first, 
and configured in conjunction with the configuration of the first. 
2.2.2.19 decimal character string: A sequence of characters from the set of 
decimal digits the first of which shall not be the digit zero. 
Decimal character strings shall consist only of the following characters: 
0 1 2 3 4 5 6 7 8 9  
Within software definition files of exported catalogs, all such strings shall be 
encoded using IRV ( 1). 
2.2.2.20 default option: The value for an extended option as defined in a 
defaults file. 
NOTE: See 2.2.2.21 and 2.2.2.35. 
2.2.2.21 defaults file: A system-specific or user-specific file that contains the 
default values for extended options used by the software administration utilities. 
2.2.2.22 dependency: A software object that is a prerequisite, corequisite or 
exrequisite for a software object defining a dependency-spec. 
A dependency is the object upon which another object depends. 
2.2.2.23 dependency-spec: A so£ tware-spec that describes a dependency. 
NOTE: See 4.1.4.1. 
2.2.2.24 dependent: A software object that specifies a prerequisite, corequisite 
or exrequisite on another software object. 
2.2.2.25 developer role: Where software is developed, tested, and maintained. 
16 
2 Terminology and General Requirements 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
This role is outside the scope of this part of ISO/IEC 15068. 
2.2.2.26 directory medium: A medium that contains a distribution in a 
POSM.1 (2) hierarchical file system format. 
NOTE: An example of this is a distribution contained in a POSM.1 (21 file system format on a CD- 
ROM. 
2.2.2.27 distribution: A software-collection containing software in the software 
packaging layout. 
2.2.2.28 distribution catalog: The catalog of metadata for a distribution 
software-collection. 
Unlike a catalog for an installed-software object, a distribution catalog is stored in 
a particular exported catalog structure that is part of the software packaging lay- 
out. 
2.2.2.29 distribution path: The pathname below which the catalog describing 
the distribution is located. 
If the distribution is on a single medium, all software for it is located below this 
path. 
2.2.2.30 downdate: Installation of software with a revision older than that of 
the software currently installed in the same location. 
This is also referred to as downgrading or reverting. 
2.2.2.31 event: An occurrence that may require reporting by the utilities defined 
in this part of ISO/IEC 15068. 
The reporting of an event may cause data to be written to stdout, stderr, or to a 
log file. 
2.2.2.32 execution phase: The operations a software administration utility per- 
forms that modify the target. 
2.2.2.33 exported catalog: Refers to information organized in the exported 
catalog structure of the standard packaging layout. 
It is used for distribution catalogs as well as exporting installed software catalogs 
using s w l i s  t -c catalog. 
Within software definition files of an exported catalog, all data that can be 
encoded using IRV (11, shall be. Any such data that cannot be so encoded shall be 
transformed using UTF-8 (4). 
NOTE: See Section 5. 
2.2 Definitions 

ISOllEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
2.2.2.34 exrequisite: The specification in a software object such that it shall not 
be installed if one or more specific software objects are installed. 
2.2.2.35 extended option: The options that can be specified with the -x option. 
These options may be defined in defaults files or options files. 
2.2.2.36 filename: A POSIX.1{2} filename with characters drawn from the 
POSM.1{2) portable filename character set. 
NOTE: See 2.2.2.60 of POSIX.l (2). 
2.2.2.37 filename character string: A sequence of characters from the portable 
filename character set, not including the / (slash) character. 
Within software definition files of exported catalogs, all such strings shall be 
encoded using IRV { 1). 
NOTE: See 2.2.2.60 of POSM.l (2). 
2.2.2.38 fileset: Defines the files that make up a software object, and is the 
lowest level of software object that can be specified as input to the software 
administration utilities. 
NOTE: See 3.9. 
2.2.2.39 file storage structure: The storage directories in the software packag- 
ing layout under which the actual software files for each fileset are located. 
NOTE: See Section 5. 
2.2.2.40 fully qualified software-spec: A so£ tware-spec that always 
identifies a software object unambiguously. 
NOTE: See 4.1.4.1. 
2.2.2.41 graphical user interface: A means of presenting function to a user 
through the use of graphics. 
All such interfaces are outside the scope of this part of ISO/IEC 15068. 
2.2.2.42 hard link: A directory entry, as defined in 2.2.2.17. of POSIX. 1 (2). 
2.2.2.43 hexadecimal character string: A sequence of characters from the set 
of hexadecimal digits, preceded by the two characters Ox (zero followed by a lower- 
case "?). 
Hexadecimal character strings shall consist only of the following characters: 
0 1 2 3 4 5 6 7 8 9 A B C D E F x  
Within software definition files of exported catalogs, all such strings shall be 
encoded using IRV { 1). 
18 
2 Terminology and General Requirements 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
2.2.2.44 host: A machine that contains software managed by this part of ISOIIEC 
15068. 
NOTE: A host may contain both installed-software and distribution software~collections. The 
name of the host is the starting point for finding all software on that machine managed by this part 
of ISO/IEC 15068. The path attribute of a software-collection, along with the specification of a host, 
can be used on the command line to identify a particular software-collection to be managed by this 
part of ISO/IEC 15068. 
2.2.2.45 host character string: A sequence of characters describing a host, as 
defined in 2.2.2.44. 
Within software definition files of an exported catalog, all data that can be 
encoded using IRV (1) shall be. Any such data that cannot be so encoded shall be 
transformed using UTF-8 (4). 
2.2.2.46 INDEX file: The file within an exported catalog containing the meta- 
data describing the software objects and attributes for all bundles, products, sub- 
products and filesets. 
NOTE: The format of this file is defined in 5.2. 
2.2.2.47 INFO file: For each product and fileset, the file within an exported cata- 
log containing the metadata describing the software-file objects and attributes. 
NOTE: The format of this file is defined in 5.2. 
2.2.2.48 inheritance: The way in which the attribute definitions of a common 
object class are used as a part of the definition of other object classes. 
The definition of the new object class includes the definition of the common class 
plus the additional definitions specific to the new object class. 
2.2.2.49 installed software: Any software object created by the use of the 
s w i n s t a l l  utility. 
2.2.2.50 installed-software: 
A 
software~collection containing 
installed 
software. 
This software is in a state ready for use, or ready to be shared by client systems. 
A directory path on a system and an installed-software catalog together identify a 
unique installed-software object. 
2.2.2.51 installed-software catalog: The catalog of metadata for an 
installed-software software~collection. 
Unlike a catalog for a distribution object, the storage and format of an 
installed-software catalog is undefined within this part of ISOIIEC 15068. The 
ability to dump and restore all or part of an installed-software catalog into an 
exported catalog structure is included in this part of ISO/IEC 15068. 
2.2 Definitions 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
393 
2.2.2.52 installed-software path: The root directory of an installed-software 
394 
object; the pathname below which all software for that object shall be installed. 
2.2.2.53 integer character string: A decimal character string, an octal charac- 
ter string, or a hexadecimal character string. 
NOTE: See 2.2.2.19, 2.2.2.63, and 2.2.2.43. 
2.2.2.54 interactive: The behavior of a utility or control-script which requires 
input from the user during its execution. 
2.2.2.55 kernel: The nucleus of the operating system. 
NOTE: See B.2.2.2 of POSM.1(2). 
2.2.2.56 kernel fileset: A fileset in which one or more of the referenced files 
forms part of the kernel, and denoted by having the value of its iskernel attribute 
set to true. 
2.2.2.57 locatable fileset: A fileset for which permission is granted to install the 
files in a different location as specified by the user, and denoted by having the 
value of its is-locatable attribute set to true. 
2.2.2.58 locatable software: Software that contains locatable filesets. 
2.2.2.59 manager role: Where each task is initiated. 
The manager role is concerned with taking appropriate action at the completion or 
failure of a task. 
2.2.2.60 metadata: The information kept about software. 
It consists of the values of the various attributes of each of the objects. 
2.2.2.61 newline string: A white space string consisting only of the <newline> 
character. 
NOTE: The term white space string is defined in 2.2.2.110 and <newline> character is defined in 
2.2.2.107 of POSM.2 (3). 
2.2.2.62 object: An instance in the software hierarchy that can be operated 'on 
using the software administration utilities. 
2.2.2.63 octal character string: A sequence of characters from the set of octal 
digits the first of which shall be the digit zero. 
Octal character strings shall consist only of the following characters: 
0 1 2 3 4 5 6 7  
Within software definition files of exported catalogs, all such strings shall be 
encoded using IRV (1). 
20 
2 Terminology and General Requirements 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
2.2.2.64 options file: A file that can be specified with the -x option. This file 
contains extended option definitions that override default definitions. 
NOTE: See 2.2.2.21. 
2.2.2.65 packager role: Where software that has been developed is organized in 
a form suitable for distribution. 
2.2.2.66 pathname: A POSM.1 (2) pathname with characters drawn from the 
POSIX.l (2) portable character set. 
NOTE: See 2.2.2.60 of POSK.1 (2). 
2.2.2.67 pathname character string: A sequence of characters from the port- 
able filename character, including the / (slash) character. 
NOTE: See 2.2.2.60 of POSK.1 (2). 
Within software definition files of exported catalogs, all such strings shall be 
encoded using IRV (1). 
2.2.2.68 portable character string: A sequence of characters from the portable 
character set as defined in 2.2.2.130 and 2.4 of POSM.2 (3). 
Within software definition files of exported catalogs, all such strings shall be 
encoded using IRV 111. 
2.2.2.69 prerequisite: The specification in a software object that implies it shall 
not be installed until after some other software object is installed, and configured 
until after the other software object is configured. 
NOTE: The manner of honoring such a prerequisite is described in 4.5.7.1 and 4.5.7.2. 
2.2.2.70 product: A software object used to define a set of related software. 
Filesets are contained within products. 
2.2.2.71 product specification file (PSF): The input file used to define the 
structure and attributes of software objects and related files to be packaged by the 
swpackage utility. 
2.2.2.72 proxy install: A proxy install uses an alternate root directory as the 
target path. 
2.2.2.73 recovery: The ability of the s w i n s t a l l  utility, for a failed software 
install, to return the system to the state that it was in before the failure, including 
restoring the files. 
2.2.2.74 reboot fileset: A fileset which, if installed, requires reboot of the 
operating system to complete its installation, and denoted by having the value of 
its is-reboot attribute set to true. 
2.2 Definitions 
2 1 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE 
SYSTEM ADMINISTRATION - 
2.2.2.75 rebooting: An implementation-defined procedure generally used to ter- 
minate and then restart operations on the target system. 
2.2.2.76 role: The context in which an operation is executed. 
The utilities in this part of ISO/IEC 15068 require the ability to perform operations 
on more than one system, perhaps by more than one person. These operations are 
separated into distinct roles including developer, packager, manager, source, tar- 
get, and client. 
2.2.2.77 selection phase: The set of steps performed by software administration 
utility to process selections and options. 
2.2.2.78 serial medium: A medium that contains a POSM.1 (21 extended tar or 
extended cpi o archive. 
NOTE: See 10.1.1 and 10.1.2 of POSIX.1 (2). 
2.2.2.79 session: An execution of a software administration command from ini- 
tiation to completion on all applicable roles. 
2.2.2.80 shell token string: A sequence of shell tokens. 
A shell token string shall be a portable character string. 
NOTE: See 2.2.2.68. Shell tokens are defined in 3.3 of POSM.2 (3). 
2.2.2.81 software: A generic term referring to software objects or a structured 
set of files. 
This term can refer to the objects forming the hierarchical structure (software 
objects), or to the actual files and control-files (software files). 
NOTE: See 2.2.2.90. 
2.2.2.82 software-collection: A grouping of software objects that are managed 
by the software administration utilities. 
Software-collections are the sources and targets of these utilities. This part of 
ISOIIEC 15068 defines two types of software-collections: installed-software and 
distributions. 
2.2.2.83 software common class: The common class describing the common 
attributes associated with the hierarchical structure of software objects defined by 
this part of ISO/IEC 15068. 
2.2.2.84 software definition files: The files containing the software structure 
and detailed attributes for distributions, installed-software, bundles, products, 
subproducts, filesets, files, and control-files. 
This includes the INDEX and INFO files and the PSF. 
2 Terminology and General Requirements 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
To communicate metadata information relating to both distributions and installed 
software, software definition files serve as input to, or output from, the various 
software administration utilities. The format used by software administration 
utilities to store metadata relating to installed software is undefined. 
NOTE: See 5.2. 
2.2.2.85 software file: A generic term referring to the files and control-files that 
are contained within software objects and managed by the utilities in this part of 
ISO/IEC 15068. 
2.2.2.86 software-file common class: The common class that relates the two 
types of files defined by this part of ISO/IEC 15068, namely the actual files that 
make up the software, plus the control-files that are executed by the utilities 
when operating on software. 
2.2.2.87 software-files: A generic term referring to file and control-file objects 
(those that share the same software-file common class). 
2.2.2.88 software hierarchy: Hierarchical organization of objects that are 
managed by the software administration utilities. 
2.2.2.89 software location: The directory relative to the installed-software root 
directory where the relocatable files of the software have been located. 
2.2.2.90 software object: An object that inherits attributes of the software com- 
mon class, meaning a bundle, product, subproduct, or fileset object. 
2.2.2.91 software packaging layout: The format for software in a distribution. 
It contains the metadata for the distribution catalog in a well-defined exported 
form, as well as the files for the software objects in that distribution. 
NOTE: For a detailed description, see Section 5. 
2.2.2.92 software pattern match string: A sequence of one or more strings, 
each made up of a sequence of one or more characters from the shell "Pattern 
Matching Notation" strings described in 3.13, of POSIX.2 (31, and with the mean- 
ing defined in that clause. If there are two or more strings, the strings are 
separated by the 1 character. 
The match is true if any of the sequences of strings match according to 3.13 of 
posnr.2 (31. 
A software pattern match string shall be portable character string. 
2.2.2.93 software-spec: A string that is used to identify one or more software 
objects for input to a software administration utility. 
NOTE: See 4.1.4.1.1. 
2.2 Definitions 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
2.2.2.94 source: The specification of a source distribution object for a software 
administration utility. The source host provides a means to locate the source role 
and the source path is a path accessible to the source host. 
2.2.2.95 source host: The host portion of a source specification. 
2.2.2.96 source path: The pathname portion of a source specification. 
2.2.2.97 source role: Where the software exists in a form suitable for distribu- 
tion, forming a context for the establishment of a repository of software from 
which the manager may choose to distribute to targets. 
Software exists in the source until it is removed by a task initiated by the 
manager. The source role provides a repository where software may be stored and 
provides access for those roles that require the software. 
2.2.2.98 subproduct: A software object that is a grouping of software filesets 
and other subproducts within a product. 
NOTE: See 3.10. 
2.2.2.99 symbolic link: A type of file that contains a pathname. 
Rather than containing data itself, this type of file will resolve to another, as 
defined by the contained pathname. The way in which this type of file is handled 
by implementations of this part of ISOIIEC 15068 is undefined. 
NOTE: It is not the intention of this part of ISOflEC 15068 to define symbolic links in a manner 
inconsistent with POSM.1{2). However, no approved POSIX standard currently contains symbolic 
links. This definition is a placeholder until such time as an approved standard provides the 
definition. See POSKla (B211. 
2.2.2.100 system: An implementation of this part of ISOhEC 15068. 
2.2.2.101 target: The specification of a target distribution object, or installed 
software object, for a software administration utility. The target host provides a 
means to locate the target role and the target path is a path accessible to the tar- 
get host. 
2.2.2.102 target host: The host portion of a target specification. 
2.2.2.103 target path: The pathname portion of a target specification. 
2.2.2.104 target role: Where software is installed, removed, listed, and other- 
wise operated on by the utilities. 
For example, when installing software, the target is where software is installed 
after having been delivered from a source. As another example, the target for a 
copy operation command refers to the distribution to which products are added. 
For management operations like removing software, the target refers to either the 
24 
2 Terminology and General Requirements 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
installed-software objects or the distributions from which software is being 
removed. 
2.2.2.105 update: Installing a newer revision of software than one that is 
currently installed, into the same location. 
This is also referred to as upgrading. 
2.2.2.106 vendor: A supplier of packaged software. 
This term applies to anyone who creates packaged software, including commercial 
and non-commercial suppliers, system administrators, and end users. 
2.2.2.107 vendor-defined: An item, such as a nonstandard attribute, that is 
defined by the vendor that created (packaged) the software. 
2.2.2.108 vendor-supplied: An item, such as a control file, that is supplied by 
the creator (packager) of the software. 
2.2.2.109 version: A unique identification of software based on the attributes of 
the software. Version differentiates software objects with the same value of the 
tag attribute. 
Versions of bundles or products have the same value of the tag attribute and will 
differ by the value of at least one of revision, architecture, vendor-tag, location, or 
qualifier attributes. The location and qualifier attributes only apply to software in 
installed-software software-collections. 
A fileset is considered a version of another fileset if they have the same fi2eset.tag 
and their respective products have the same product.tag. 
2.2.2.110 white space string: A sequence of one or more white space characters 
(as defined in 2.2.2.191 of POSM.2 (3)) including <space>, <tab>, and <new- 
line>. 
Within software definition files of exported catalogs, all such strings shall be 
encoded using IRV 111. 
2.2.2.111 wildcard character: One of *? [ (asterisk, question mark, open 
bracket). 
Such characters are used in software pattern match strings 2.2.2.92. 
2.2.3 Abbreviations 
For the purposes of this part of ISOIIEC 15068, the following abbreviations apply: 
2.2.3.1 API: Application Programming Interface 
2.2 Definitions 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE SYSTEM ADMINISTRATION - 
2.2.3.2 CLI: Command Line Interface, as defined in 2.2.2.11. 
2.2.3.3 C Standard: 
ISO/IEC 9899: 1990, 
Information 
technology- 
Programming languages-C {B 13). 
2.2.3.4 CRC: Cyclic Redundancy Check. 
2.2.3.5 GUI: Graphical User Interface, as defined in 2.2.2.41. 
2.2.3.6 IRV: ISO/IEC 646: 1991, Information technology-IS0 
7-bit coded char- 
acter set for information interchange, International Reference Version (1). 
2.2.3.7 newline: A newline string, as defined in 2.2.2.61. 
2.2.3.8 0s: Operating System. 
2.2.3.9 POSM.l: ISO/IEC 9945-1: 1990 (ANSIDEEE Std 1003.1-1990): Informa- 
tion technology-Portable Operating System Interface (POSIX")-Part 1: System 
Application Program Interface (API) [C Language] (2). 
2.2.3.10 POSM.la: 
IEEE 
P1003.la, 
Draft 
Standard 
for 
Information 
technology-Portable Operating System Interface (POSIX")-Part 1: System Appli- 
cation Program Interface (API) [C Language] (B21). 
2.2.3.11 POSIX.2: ISO/IEC 9945-2: 1993 (ANSIJIEEE Std 1003.2-1992): Infor- 
mation technology-Portable Operating System Interface (POSI2)-Part 2: Shell 
and Utilities (3). 
2.2.3.12 POSM.7.2: This part of ISO/IEC 15068. 
2.2.3.13 PSF: product specification file as defined in 2.2.2.71. 
2.2.3.14 symlink: symbolic link, as defined in 2.2.2.99. 
2.2.3.15 UTF-8: UCS Transformation Format 8, as defined in ISOIIEC 10646- 
1: 1993, Information technology-Universal 
Multiple-Octet Coded Character Set 
(UCS)-Part 1: Architecture and Basic Multilingual Plane, Amendment 2: UCS 
Transformation Format 8 (UTF-8), 1996 (4). 
2.2.3.16 white space: A white space string, as defined in 2.2.2.110. 
2 Terminology and General Requirements 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
2.3 Dependencies on Other Standards 
2.3.1 Features Inherited From POSM.l 
This subclause describes some of the features provided by POSM.1{2) that are 
assumed to be globally available to all conforming implementations. This sub- 
clause does not attempt to detail all the POSM.1{2) features that are required by 
all the utilities defined in this part of ISOIIEC 15068; the utility descriptions point 
out additional functionality required to provide the corresponding features 
needed. 
The following subclauses describe frequently used concepts. Utility description 
statements override these defaults when appropriate. 
2.3.1.1 File System 
The hierarchical directory structure of POSM.1{2) is assumed to be available, as 
well as support for case-sensitive file names. In addition, various file attributes 
are also assumed to be present, including the following - type, owner, group, 
mode, uid, gid, mtime, major, and minor. 
2.3.1.2 Environment Variables 
The existence of environment variables in general is assumed, as well as PATH, 
LANG, LC-ALL, LCCTYPE, LC-MESSAGES, LC-TIME, and TZ, in particu- 
lar. 
2.3.1.3 Data Interchange Format 
The ability to read and write the data interchange formats of POSM.l (2) is 
assumed, including both extended t a r  and extended cpio. See 10.1.1 and 10.1.2 
of POSM.1 (2). See also 5.3. 
2.3.2 Features Inherited From POSM.2 
This subclause describes some of the features provided by POSM.2 (3) that are 
assumed to be globally available to all systems conforming to this part of ISO/IEC 
15068. This subclause does not attempt to detail all of the POSM.2 {3} features 
that are required by all the utilities and control scripts defined in this part of 
ISOIIEC 15068; additional functionality required may be found in the utility 
descriptions and in 4.1.6.1. 
All of the utilities defined in POSM.2 (3) are required, including the shell inter- 
preter (sh). This assures a portable environment for executable control files. 
2.3 Dependencies on Other Standards 


ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
1 
Section 3: Software Structures 
This section describes the software classes and attributes applicable to software 
administration. Each utility in Section 4 describes the operations on the software 
objects including how the values of the attributes affect the behavior of the opera- 
tions. Whether these operations and behaviors are implemented as procedures on 
software structures or by other means is undefined within this part of ISOAEC 
15068. 
The software administration classes form a hierarchy that consists of distribu- 
tions, media, installed-software, vendors, bundles, products, subproducts, filesets, 
control-files, and files. 
At each level, this hierarchy is defined by containment attributes that reference 
objects at lower levels. Operations on objects of lower levels, such as files, are 
actually enacted by operations on objects of higher levels. For example, files may 
be created in a distribution by copying a software product. 
A "common classyy is used to define attributes that are common between related 
objects. Objects inherit attribute definitions from common classes as well as their 
individual attributes. This provides a logical relationship between the objects that 
share the same common class. The software administration common classes are 
software-collection, software, and software-file. 
Objects that share the same common class are also referred to generically as 
software-collections, software objects, and software-files. 
In tables in this section, attributes are listed with various properties. The attri- 
butes and their values manifest themselves as part of the utilities defined in Sec- 
tion 4 and the software packaging layout in Section 5. 
The names of attributes are as provided. If the underlying host allows for the dis- 
tinction of case, the attribute names shall be sensitive to case. Where values of 
attributes are shown, if the underlying host allows for the distinction of case, the 
values of attributes shall be sensitive to case. If the underlying host does not 
allow for the distinction of case for either the name or value of an attribute, the 
way in which case differences are handled is implementation defined. 
The attribute tables in this section list the following information: 
Attribute 
The name of the attribute, also used as the keyword for the attribute. 
Length 
The maximum permitted length of the value of the attribute. 
All attribute values in this part of ISOAEC 15068 are represented 
only as strings. The length is the maximum permitted length of the 
value in bytes or, for attributes whose values are lists, the maximum 
permitted number of items permitted in the list. Since the means of 
3 Software Structures 
29 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
storing such data for installed software is undefined within this part 
of ISO/IEC 15068, an implementation may store such values inter- 
nally in different structures for installed software. See 2.2.2.28, 
2.2.2.33, and 2.2.2.51. 
Permitted Values 
The character sequences permitted as values for this attribute. 
Default Value 
The value of the attribute if the attribute is not specified. 
A default value of   one means the system shall not supply a value in 
cases where the attribute has not been specified and the attribute is 
not one whose values are generated dynamically. See 5.1.1 and 5.2. 
The attribute tables are broken into the following three groups: 
(1) The top group contains the attributes that are used to identify a particu- 
lar instance. 
(2) The middle group contains the rest of the attributes that describe other 
information or behaviors for the object. 
(3) The bottom group contains the attributes that describe the objects con- 
tained within this object. The way in which these lists are represented in 
software definition files is described in 5.2. The way in which these lists 
are represented by swlist is described in 4.6.3. 
Beyond this convention, the order of attributes shown in this section is not 
significant. For any attribute ordering rules, see 5.2. Some attributes do not 
apply to software objects in both distributions and installed-software objects. See 
5.2 for details. 
Management of lists of software~collections contained within a host is undefined 
within this part of ISOIIEC 15068. See 4.1.4.2 for the way in which 
software-collections are identified relative to a software host. 
3.1 Software-Collection 
A software-collection is the common class from which distribution and 
installed-software objects inherit. 
A software~collection can contain product and bundle software objects. A 
software-collection can contain multiple versions of the same product or bundle 
software objects, namely products or bundles that share the same value for the tag 
attribute. 
Each software-collection has a catalog associated with it that contains the meta- 
data describing all software objects in that c~llection.~' 
NOTE: For distribution software_collections, the catalog information is stored in the software 
packaging layout in an exported catalog structure. For installed-software objects, how the catalog 
information is stored (whether in a file or database, for example) is undefined within this part of 
ISOLEC 15068. 
3 Software Structures 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Table 3-1 - Attributes of the Software-Collection Common Class 
-- 
- 
Attribute 
I 
~ e n g t h - -  r 
Permitted Values 
1 
Default Value 
path 
I Undefined I Pathname character string 
I Implementation defined 
dfiles 
64 
Filename character string 
layout-version 
 files 
Filename character string 
df iles 
pf iles 
bundles 
products 
3.1.1 Software-Collection Attributes 
of bundle-sof tware-specs 
of 
product~software~specs 
The attributes listed in Table 3-1 and described in the following, characterize each 
instance of the software~collection class, and are inherited by each instance of the 
distribution and installed-software classes: 
Empty list 
Empty list 
bundles 
A list of bundle-so£ tware-specs. 
Each software-spec 
shall refer to a bundle. 
Each 
sof tware-spec shall be fully qualified. See 4.1.4.1 for the syn- 
tax of so£ tware-spec. 
dfiles 
The name of the directory in the exported catalog structure 
below 
which 
any attributes stored 
as files for the 
software~collection are stored (see 5.1). 
layout-version 
This attribute, and its value, are included for future use. 
path 
The identifier for a particular software collection on a host. 
The value of the path attribute shall be an absolute path. The 
default value of this attribute is implementation defined. See 
4.1.5.2. 
 files 
The name of the directory in the exported catalog structure 
below which any control-files, and attributes stored as files, for 
the product are stored (see 5.1). 
products 
A list of product-so£ tware-specs. 
Each software-spec 
shall refer to a product. 
Each 
so£ tware-spec shall be fully qualified. See 4.1.4.1 for the syn- 
tax of sof tware-spec. 
3.1 Software-Collection 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
3.2 Distribution 
A distribution contains product and bundle software objects. It is contained on a 
distribution media or may be part of the file store of a system. The distribution 
may contain a variety of software products and bundles, and that software may be 
applicable to a variety of hardware architectures or operating systems. 
The distribution class inherits attributes from the software-collection common 
class. 
A particular distribution object is identified within a host by the path attribute. 
For distributions, the path attribute is the pathname to the directory containing a 
distribution in the directory format of the software packaging layout, or a file or 
device file containing a distribution in a serial format of the software packaging 
layout. 
Distributions can contain more than one version of a product or bundle. A version 
is uniquely identified within a distribution by the values of the revision, 
vendor-tag, and architecture attributes. 
able 3-2 - Attributes of the Distribution Class 
3.2.1 Distribution Attributes 
Default Value 
Attribute 
uuial 
media 
The attributes listed in Table 3-2 and described in the following, along with the 
attributes listed in Table 3-1, characterize each instance of the distribution class: 
media 
A list of media.sequence-number values for the distribution if 
the distribution spans multiple media. Each medium in a distri- 
bution shall have its media.sequence-number in the INDEX file 
defined for that medium. See 5.3. An implementation may 
include definitions for all media in the global INDEX file found on 
the 
first 
medium 
in 
the 
distribution. 
The 
media.sequence-number for the first medium in the distribution 
shall be 1 and shall be the first item in the list. 
Length 
64 
Undefined 
uuid 
A string that should uniquely identify a distribution. 
Permitted Values 
The way in which a unique string is generated is undefined. 
This attribute is used for determining whether subsequent 
media are from the same set as the one that an install or copy 
started with. This attribute shall be defined for distributions 
that span multiple media. 
Portable character string 
List of media sequence-number 
values 
3 Software Structures 
Empty string 
Empty list 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
150 
3.3 Media 
151 
The media class is used to describe the media attributes for distributions that 
152 
span multiple media. 
153 
Table 3-3 - Attributes of the Media Class 
154 
155 
1 
Attribute 
I 
Len&h 
I 
Permitted Values 
I 
Default Value I 
156 
/ sequence-nurnber 
1 
64 
1 Portable character string 
I 
I 
3.3.1 Media Attributes 
The attribute listed in Table 3-3 and described in the following, characterizes each 
instance of the media class: 
sequence-number 
Identifies a particular media when a distribution spans multiple 
media. 
It is used for identifying the correct medium on which to find the 
distribution files when the distribution spans multiple media. 
3.4 Installed-Software 
The installed-software class is used to describe the bundle and product software 
that has been installed on a file system. 
The installed-software class inherits attributes from the software-collection com- 
mon class. 
A particular installed-software object is identified within a host by both the path 
attribute (defined in the software-collection class) and the catalog attribute. For 
installed-software objects, the path attribute is the root directory for the 
installed-software object below which all the software files are installed. 
An installed-software object can contain multiple versions of a product or bundle. 
Multiple product and bundle versions are distinguished by the same attributes as 
distribution products, plus the user-specifiable location and qualifier attributes. 
Multiple product versions may be installed at the same time in an 
installed-software object. Different product versions may be installed into 
different locations, and different filesets from different product versions may be 
installed in the same location. 
3.4 Installed-Software 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE 
SYSTEM ADMINISTRATION - 
Table 3-4 - Attributes of the Installed Software Class 
3.4.1 Installed-Software Attributes 
Attribute 
catalog 
The attribute listed in Table 3-4 and described in the following, along with the 
attributes listed in Table 3-1, characterizes each instance of the installed-software 
class: 
catalog 
Along 
with 
the path 
attribute, 
identifies 
a 
single 
installed-software object. 
Length 
Undefined 
Different installed-software objects may have the same value for 
the path attribute if and only if the value of their catalog attri- 
butes are different. 
The catalog attribute is evaluated relative to the path attribute. 
It may be a POSKl(2) pathname or other identifier: together 
they form the key to the undefined catalog storage for this 
installed-software object. 
Permitted Values 
Portable character string 
3.5 Vendor 
Default Value 
Undefined 
The vendor class is used to describe the attributes of the vendors associated with 
products and bundles. 
Each product or bundle identifies a vendor with a vendor-tag that identifies a par- 
ticular vendor object. The vendor-tag attribute is used to distinguish products 
and bundles from different vendors that share the same product or bundle tag. 
Table 3-5 - Attributes of the Vendor Class 
256 
1 
Portable character string 
Empty string 
Undefined 
Portable character string 
Empty string 
Attribute 
tag 
3 Software Structures 
Length 
64 
Permitted Values 
Filename character string 
Default Value 
Empty string 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
3.5.1 Vendor Attributes 
The attribute listed in Table 3-5 and described in the following, characterizes each 
instance of the installed-software class: 
description 
tag 
title 
A more detailed description of the vendor or information about 
the vendor. 
A short identifymg name of the vendor that supplied the pro- 
duct. 
This attribute is used to to distinguish products and bundles 
from different vendors, and for resolving software specifications. 
Each software vendor should attempt to have a unique value for 
the tag attribute. 
A longer name of the vendor that supplied the product. It is 
used for presentation purposes. 
3.6 Software 
Software is the common class from which products, bundles, filesets and subpro- 
ducts inherit. 
Table 3-6 - Attributes of the Software Common Class 
Attribute 
tag 
3.6.1 Software Common Attributes 
createfime 
description 
mod-time 
size 
title 
The attributes listed in Table 3-6 and described in the following, characterize each 
instance of the software common class, and are inherited by each instance of the 
product, bundle, fileset, and subproduct classes: 
Length 
64 
create-time 
A value that shall be set by the implementation to be the time 
that the catalog information for this object was first written. 
16 
Undefined 
16 
32 
256 
Time shall be represented as seconds since the Epoch, as defined 
in 5.6.1.3 of POSM.1 (2). 
Permitted Values 
Filename character string 
description 
A more detailed description of the software object. 
Default Value 
None 
Integer character string 
Portable character string 
Integer character string 
Integer character string 
Portable character string 
mod-time 
A value that shall be set by the implementation to be the time 
that the catalog information for this object was last written. 
None 
Empty string 
None 
None 
Empty string 
3.6 Software 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
Time shall be represented as seconds since the Epoch, as defined 
in 5.6.1.3 of POSIX.l (2). 
size 
The sum of the sizes in bytes of all files and control-files con- 
tained within the software object. 
For objects other than filesets, the value is computed dynami- 
cally as required. See 5.2.6,5.2.7, and 5.2.8. 
tag 
A short name associated with the software object. 
It is the one attribute that is always required to identify a 
software object. For more information on software selections, 
see 4.1.4.1. 
title 
A longer name associated with the software object, used for 
display purposes. 
3.7 Products 
Products can contain filesets, which can be grouped into subproducts. Products 
are named by their tag attributes. A particular product object is uniquely 
identified within a software-collection by the tag attribute and by the version dis- 
tinguishing attributes. The attributes that uniquely distinguish a particular pro- 
duct version within a software-collection are revision, architecture, vendor-tag, 
location, and qualifier. 
The product class shall inherit the attributes of the software common class. 
See 4.1.4.1.2 on software compatibility. 
3.7.1 Product Attributes 
The product attributes listed in Table 3-7 and described in the following, along 
with the attributes listed in Table 3-6, characterize each instance of the product 
class: 
allfilesets 
This is a list of all filesets defined for the product, as opposed to 
what is currently installed, described by the filesets attribute. 
The allfilesets attribute is used to determine completeness of 
this product when another software object has a dependency on 
this product. In checking a product prerequisite or corequisite, 
the existence of a fileset.tag in allfilesets that is not actually 
installed or available indicates that the dependency is not 
satisfied. 
This does not affect exrequisites as they test whether any of the 
contents of the dependency specification are present instead of 
all of the contents tested for prerequisites or corequisites. 
architecture A vendor-defined string used to distinguish variations of a pro- 
duct. 
It is used for presentation purposes and for resolving software 
specifications. If a product with the same value of the revision 
3 Software Structures 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Attribute 
architecture 
location 
qualifier 
revision 
vendor-tag 
all filesets 
control-directory 
copyright 
directory 
instance-id 
is-locatable 
postkernel 
layout-version 
machine-type 
number 
0s-name 
0s-release 
aspersion 
control files 
subproducts 
filesets 
Table 3-7 - Attributes of the Product Class 
Length 
64 
Undefined 
64 
64 
64 
Undefined 
Undefined 
Undefined 
Undefined 
16 
8 
Undefined 
64 
64 
64 
64 
64 
64 
Undefined 
Undefined 
Undefined 
Permitted Values 
Portable character string 
Pathname character string 
Portable character string 
Portable character string 
Filename character string 
List of fileset tag values 
Filename character string 
Portable character string 
Pathname character string 
Filename character string 
One of: true, false 
Pathname character string 
1.0 
Software pattern matching string 
Portable character string 
Software pattern matching string 
Software pattern matching string 
Software pattern matching string 
List of controlJle.tag values 
List of subproduct.tag values 
List of fileset.tag values 
Default Value 
Empty string 
<product.directory> 
Empty String 
Empty string 
Empty string 
Empty list 
Empty string 
/ 
true 
implementation defined 
1.0 
Empty string 
Empty string 
Empty string 
Empty string 
Empty string 
Empty list 
Empty list 
Empty list 
and vendor-tag attributes has different versions of software for 
different target architectures, or any other variation (such as 
supported locale), then the value of the architecture attribute 
shall be different for each version. No additional semantics shall 
be assumed for its value. 
control-directory 
control files 
copyright 
directory 
  he name of the product control directory below which the 
control-files for the product are stored within an exported cata- 
log. 
See 5.1. 
A list of the values of the tag attribute for all the control-files in 
the product. 
These scripts are executed before and after software load, and 
before and after software removal. 
The copyright notice for the product. 
The vendor-defined directory commonly associated with the pro- 
duct. 
Generally, this will be the directory in or below which all (or 
mostly all) files within the product are installed. 
For a product that has filesets with is-locatable equals true, all 
files that contain this directory as the first part of their path can 
3.7 Products 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
be relocated to the location directory during installation by 
replacing 
the 
product.directory 
portion 
with 
the 
product.location. 
filesets 
A list of the values of the tag attribute for all the filesets in the 
product that are currently installed (in an installed-software 
object) or available (in a distribution). 
instance-id 
A single attribute that distinguishes versions of products (and 
bundles) with the same tag. 
It is a simple form of the version distinguishing attributes, valid 
only within the context of an exported catalog. 
is-locatable 
A Boolean value indicating whether any of the filesets in the pro- 
duct have the is-locatable attribute set to true. 
layout-version 
This attribute, and its value, are included for future use. 
location 
Used for resolving so£ tware-specs for installed software. 
A specific product location refers to all filesets of that product 
that are installed at that location. This is the path beneath 
which the relocatable files of that product are stored. See 
4.5.7.3.1. 
This attribute is valid only for products in installed-software. 
machine-type 
number 
0s-name 
0s-release 
0s-version 
A software pattern matching string describing valid machine 
members of the uname structure as defined by 4.4.1 of 
POSIX.1 (2). 
It is used for determining compatibility. 
The semantics associated with the values of this attribute are 
undefined. 
This attribute can be used to store such vendor-defined values as 
part number, order number or serial number. 
A software pattern matching string describing valid sysname 
members of the uname structure as defined by 4.4.1 of 
POSIX.1 (2). 
It is used for determining compatibility. 
A software pattern matching string describing valid release 
members of the uname structure as defined by 4.4.1 of 
POSnz.1 (2). 
It is used for determining compatibility. 
A software pattern matching string describing valid version 
members of the uname structure as defined by 4.4.1 of 
POSIX.1 (2). 
It is used for determining compatibility. 
3 Software Structures 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
postkernel 
The path to the script that is run after the kernel filesets have 
been installed. 
Any product containing kernel filesets should include this path. 
If this attribute is supplied, the corresponding script shall be run 
if it exists relative to the root directory of the installed-software. 
If this attribute is not supplied, then the implementation-defined 
path (the default value for the attribute) shall be used if it exists 
relative to the root directory of the installed-software. Note that 
the use of an alternate root directory may mean that the default 
path does not exist relative to the root directory of the 
installed-software. 
qualifier 
revision 
subproducts 
vendor-tag 
3.8 Bundles 
Specified by a user when installing software and used for 
identifymg a product (or set of product versions) using a logical 
name. 
Applies only to products in installed-software. 
A vendor-defined string describing the revision of the product. 
It is used for presentation purposes and for resolving software 
specifications. The revision shall be interpreted as a . (period) 
separated string. See 4.1.4.1. 
A list of the values of the tag attribute for all the subproducts in 
the product. 
A short identifymg name of the vendor that supplied the 
product. 
This attribute may also be used to identify a vendor object 
containing additional attributes describing the vendor. 
This attribute is used to distinguish software objects, allowing 
more than one vendor to produce a product with the same value 
of the other version distinguishing attributes. It is used for 
presentation purposes and for resolving software specifications. 
Bundles are groupings of software objects. Bundles contain references to pro- 
ducts, parts of products, or other bundles. A software object can be referenced by 
more than one bundle. 
The bundle class shall inherit the attributes of the software common class. 
A particular bundle object is uniquely identified within a software~collection by 
the tag and by the version distinguishing attributes. The attributes that uniquely 
distinguish a particular bundle version are revision, architecture, location, 
vendor-tag, and qualifier. 
Bundles, like products, are named by their tag attributes and share the same 
name space as products. Products and bundles shall be considered together in 
determining a unique value for instance-id. 
3.8 Bundles 
39 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
Bundles and products include many of the same attributes. No bundle attributes 
are automatically derived from the contained product attributes. They are defined 
independently. See 4.1.4.1.2 on software compatibility. 
Bundle definitions are copied or installed when explicitly specified in a software 
selection for swcopy and swinstall respectively. They remain installed until 
explicitly removed or until all of their contents are removed. 
Table 3-8 - Attributes of the Bundle Class 
Attribute 
architecture 
location 
qualifier 
revision 
vendor-tag 
contents 
copyright 
directory 
instance-id 
islocatable 
layoutgersion 
machine-type 
number 
0s-name 
0s-release 
0s-version 
Length 
64 
Undefined 
64 
64 
64 
Undefined 
Undefined 
Undefined 
16 
8 
64 
64 
64 
64 
64 
64 
Permitted Values 
Portable character string 
Pathname character string 
Portable character string 
Portable character string 
Filename character string 
List of software-specs 
Portable character string 
Pathname character string 
Filename character string 
One of: true, f a l s e  
1.0 
Software pattern matching string 
Portable character string 
Software pattern matching string 
Software pattern matching string 
Software pattern matching string 
Default Value 
Empty string 
<bundle.directory> 
Empty String 
Empty string 
Empty string 
Empty list 
Empty string 
Empty string 
1 
t r u e  
1.0 
Empty string 
Empty string 
Empty string 
Empty string 
Empty string 
3.8.1 Bundle Attributes 
The attributes listed in Table 3-8 and described in the following, along with the 
attributes listed in Table 3-6, characterize each instance of the bundle class: 
architecture 
contents 
copyright 
directory 
instance-id 
A vendor-defined string used to distinguish variations of a 
bundle. 
It is used for presentation purposes and for resolving software 
specifications. 
A list of software-specs that defines the list of software 
grouped into this bundle, as originally defined in the PSF. 
A copyright notice for the bundle. 
The default directory (and location) of the bundle. 
This is the default path prefixed, when the bundle is installed, to 
the location of each product and bundle specification within this 
bundle. 
A single attribute that distinguishes versions of bundles (and 
products) with the same tag. 
3 Software Structures 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
It is a simple form of the version distinguishing attributes, valid 
only within the context of an exported catalog. 
is-locatable 
A Boolean vaue indicating whether any of the contents in the 
bundle have the islocatable attribute set to true. 
layout-version 
This attribute, and its value, are included for future use. 
location 
An attribute whose value is set when installing software and 
used for resolving software-specs for installed software. 
When installing a bundle the bundle.location is prefixed to the 
location specification for each sof tware-spec in the contents 
of the bundle, before that sof tware-spec is resolved. 
The contents attribute of the bundle is not modified. 
Applies only to bundles in installed-software. 
machine-type A software pattern matching string describing valid machine 
members of the uname structure as defined in 4.4.1 of 
number 
0s-name 
0s-release 
0s-version 
qualifier 
revision 
POSIx.1 (2). 
It is used for determining compatibility. 
The semantics associated with the values of this attribute are 
undefined. 
This attribute can be used to store such vendor-defined values as 
part number, order number or serial number. 
A software pattern matching string describing valid sysname 
members of the uname structure as defined in 4.4.1 of 
POSIx.1 (2). 
It is used for determining compatibility. 
A software pattern matching string describing valid release 
members of the uname structure as defined in 4.4.1 of 
POSIx.1 (2). 
It is used for determining compatibility. 
A software pattern matching string describing valid version 
members of the uname structure as defined in 4.4.1 of 
POSIx.1 (2). 
It is used for determining compatibility. 
Specified by a user when installing software, and used for identi- 
fyng a bundle (or set of bundle versions) using a logical name. 
Applies only to bundles in installed-software. 
A vendor-defined string used to distinguish different revisions of 
bundles from one another. 
It is used for presentation purposes and for resolving software 
specifications. 
3.8 Bundles 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
vendor-tag 
A short identifymg name of the vendor that supplied the bundle. 
This attribute shall be used to identify a vendor object containing 
additional attributes describing the vendor. 
This attribute is used to distinguish bundles, allowing more than 
one vendor to produce a bundle with the same value of the tag 
attribute. 
3.9 Filesets 
The fileset class is used to define a set of software files. The fileset is the smallest 
level of software that can be managed by the tasks defined in this standard. 
The fileset class inherits attributes from the software common class. Filesets con- 
tain the actual files and control-files that make up the software product. A partic- 
ular fileset object is identified within a product by the tag attribute. 
NOTE: A fileset is strictly contained within the product. There cannot be more than one fileset in 
the product with the same tag. A fileset cannot be in more than one product. However, a product 
may be referenced by more than one bundle. 
%ble 3-9 - Attributes of the Fileset Class 
Attribute 
control-directory 
corequisites 
exrequisites 
is-kernel 
is-locatable 
is-reboot 
location 
media-sequence-number 
prerequisites 
revision 
state 
control files 
files 
Length 
Undefined 
Undefined 
Undefined 
8 
8 
8 
Undefined 
Undefined 
Undefined 
64 
16 
Undefined 
Undefined 
Permitted Values 
Filename character string 
List of dependency-specs 
List of dependency-specs 
One of: true, f a l s e  
One oE true, f a l s e  
One oE true, f a l s e  
Pathname character string 
List of media.sequence-number 
values 
List of dependency-specs 
Filename character string 
One 
of 
con£ igured, 
i n s t a l l e d ,  
corrupt, 
removed, available, tran- 
s i e n t  
List of controlfile.tag values 
List of file.path values 
Default Value 
<fileset.tag> 
Empty list 
Empty list 
f a l s e  
t r u e  
f a l s e  
<product.directory> 
1 
Empty list 
None 
None 
Empty List 
Empty List 
3 Software Structures 

control files 
corequisites 
exrequisites 
files 
is-kernel 
is-locatable 
is-reboot 
location 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
PART 2: SOFTWARE ADMINISTRATION 
3.9.1 Fileset Attributes 
The attributes listed in Table 3-9 and described in the following, along with the 
attributes listed in Table 3-6, characterize each instance of the fileset class: 
control-directory 
The name of the fileset control directory below which the 
control-files for the fileset are stored within an exported catalog. 
See 5.1. 
A list of the values of the tag attribute for the control-files in the 
fileset. 
A list of dependency-specs for software required to be 
installed and configured for this fileset to work. 
Dependencies shall be considered when copying, installing, 
configuring, verifymg, and removing software. See 4.3.7.2, 
4.4.7.2,4.5.7.2,4.9.7.2, and 4.10.7.2. 
The software specified by the dependency-spec shall be com- 
plete in order for the dependency to be resolved successfully. See 
allfilesets in 3.7. 
A list of dependency-specs for software required not to be 
installed when this fileset is installed. 
Dependencies shall be considered when installing, configuring, 
verifymg, and removing software. See 4.3.7.2, 4.5.7.2, 4.9.7.2, 
and 4.10.7.2. 
No part of the software specified by the dependency-spec may 
be installed in order for this dependency to be resolved success- 
fully. 
A list of the values of the path attribute for the files in the fileset. 
A Boolean value indicating the fileset requires a kernel rebuild. 
A Boolean value indicating if the fileset may be re-located during 
installation. 
A Boolean value indicating the host on which the fileset is 
configured should be re-booted. 
Specifies the location below which relocatable files are stored. 
This attribute is only valid for filesets in installed software. It 
differs from the product.directory attribute only if relocation was 
specified during installation. See 4.5.7.3.1. 
media-sequence-number 
Identifies the media.sequence-number for the medium on which 
the files for this fileset is found. 
If a single fileset spans multiple media, this attribute identifies a 
list of media.sequence-number values, identifying all of the 
media on which the fileset is found. In that case, the order of the 
list shall be interpreted as the order in which to read the media. 
See 3.2,3.3, and 5.3. 
3.9 Filesets 
43 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
prerequisites A list of dependency-specs for software required to be 
installed prior to the installation of this fileset and configured 
prior to the configuration of this fileset. 
Dependencies shall be considered when copying, installing, 
configuring, verifpg, and removing software. See 4.3.7.2, 
4.4.7.2,4.5.7.2,4.9.7.2, and 4.10.7.2. 
The software specified by the dependency-spec shall be com- 
plete in order for the dependency to be resolved successfully. See 
allfilesets in 3.7. 
Circular definitions should be 
avoided within package 
definitions. Behavior when circular definitions are encountered 
is implementation defined. 
revision 
Defines the revision of the fileset. 
It is used for presentation purposes and for resolving software 
specifications. 
state 
An indication of the current status of the fileset. 
This attribute may have one of the following values: con£ i g -  
ured, i n s t a l l e d ,  corrupt, removed, available, and 
transient. 
3.10 Subproducts 
Subproducts are groupings of filesets and subproducts within a single product. 
Subproducts do not contain filesets or subproducts within the name space of the 
subproduct, but instead refer to them. A subproduct can refer to another subpro- 
duct. A subproduct or fileset can be referenced by more than one subproduct. 
The subproduct class shall inherit the attributes of the software common class. 
A particular subproduct object is named, and identified within a product, by the 
tag attribute. The values of the tag attribute of all subproducts and filesets shall 
be unique within a product. 
Subproduct definitions are copied or installed when any fileset specified in the 
contents of the subproduct is copied or installed with swcopy or s w i n s t a l l  
respectively. They remain installed until explicitly removed or until all of their 
contents are removed. 
Table 3-10 - Attributes of the Subproduct Class 
Attribute 
I 
Length 
/ 
Permitted Values 
44 
3 Software Structures 
Default Value 
contents 
I 
I 
I 
Undefined 
List of tag values 
Empty list 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
3.10.1 Subproduct Attributes 
The attributes listed in Table 3-10 and described in the following, along with the 
attributes listed in Table 3-6, characterize each instance of the subproduct class: 
contents 
A list of tag values that defines the list of filesets and subpro- 
ducts grouped into this subproduct. 
3.1 1 Software-Files 
Software-file is the common class that files and control-files inherit from. A 
software-file is a file as defined in POSM.1 {2}. 
Table 3-11 - Attributes of the Software-Files Common Class 
cksum 
compressed~cksum 
compression-state 
Attribute 
Length 
Permitted Values 
compression-type 
revision 
size 
source 
Integer character string 
Integer character string 
Integer character string 
One 
of: 
uncompressed, 
compressed, 
not-compressible 
Filename character string 
Portable character string 
Integer character string 
Pathname character string 
64 
64 
16 
Undefined 
Default Value 
None 
None 
None 
uncompressed 
Empty string 
Empty string 
None 
None 
3.1 1.1 Software-File Common Attributes 
The attributes listed in Table 3-11 and described in the following, characterize 
each instance of the software-file class, and are inherited by each instance of the 
files and control-files classes: 
cksum 
An integer character string representing a 32-bit cyclic redun- 
dancy check (CRC) identical to that returned in the first field of 
the output of the cksum utility, as defined in 4.9 of POSE2 (31. 
compressed-cksum 
Indicates the cksum CRC of the compressed software file in the 
same manner as the cksum attribute. 
This attribute may be used to verify the integrity of a 
compressed file, and to help determine if a file to be copied is 
already present at the target. 
compressed-size 
Indicates the size of the compressed software file in the same 
manner as the size attribute. 
3.11 Software-Files 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
This attribute can be used for computation of disk space analysis 
when the file will remain compressed after a copy. 
compression-state 
Indicates which one of the following conditions is true: 
- Uncompressed but permitted to be compressed in a distribu- 
tion (if this attribute has the value uncompressed or if no 
value is supplied for the attribute) 
- Already compressed (if this attribute has the value 
compressed) 
- Uncompressed and not permitted to be compressed in a dis- 
tribution 
(if 
this 
attribute 
has 
the 
value 
not-compressible) 
compression-type 
Specifies the compression method used to compress the file if the 
value of the compression-state attribute is compressed. 
The values supported for compression-type are implementation 
defined. The way in which an implementation uses this value to 
implement or execute the compression or uncompression of a file 
is undefined. 
revision 
Describes a string indicating the revision level of the file. 
size 
Indicates the size of the software file in bytes. 
This attribute has the same values and meaning as st-size 5.6.1 
of POSM.l (2). 
source 
When used in a PSF, this attribute specifies the pathname of the 
file or control-file to be placed in the distribution by the swpack- 
age utility. 
3.12 Files 
Files are the actual files and directories that make up the fileset. Many of the file 
attributes (such as owner, group, and mode) are derived from, and dependent 
upon, a POSM.1 (2) file system. 
The file class inherits attributes from the software-file common class. 
A particular file object is identified within a fileset by the path attribute. When a 
file is located on a distribution, the path attribute indicates the intended installa- 
tion location of the file. The value of the path attribute is also the path below the 
storage directory for that fileset within file storage structure of the distribution 
(see 5.1.2). While a file is installed (in an installed-software object), the path attri- 
bute indicates the actual location of the file. This path is relative to the root direc- 
tory for that installed-software object. 
For regular files, the value of the size attribute is the actual file size in bytes. For 
symbolic links, this is the string length of the linksource attribute. For hard 
links, directories, and block and character special files, this is always zero. These 
types are set to zero since the actual space required by these types depends on the 
46 
3 Software Structures 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
file system. An implementation should consider the impact of these types as part 
of disk space analysis. 
The cksum attribute only has meaning for a file with type of regular file. 
Table 3-12 - Attributes of the File Class 
Attribute 
path 
gid 
group 
is-volatile 
link-source 
major 
minor 
mode 
mtime 
owner 
type 
uid 
Length 
Undefined 
16 
Undefined 
8 
Undefined 
16 
16 
16 
16 
Undefined 
8 
16 
Permitted Values 
Default Value 
Pathname character string 
Integer character string 
Filename character string 
One oE t r u e ,  f a l s e  
Pathname character string 
Portable character string 
Portable character string 
Octal character string 
Integer character string 
Filename character string 
Oneof: f ,  d, h, s ,  p, b, c 
Integer character string 
None 
Undefined 
Empty string 
f a l s e  
None 
None 
None 
None 
None 
Empty string 
f 
Undefined 
3.12.1 File Attributes 
The attributes listed in Table 3-12 and described in the following, along with the 
attributes listed in Table 3-11, characterize each instance of the file class: 
g id 
group 
is-volatile 
link-source 
major 
minor 
The numeric group id of the file. 
This attribute has the same values and meaning as stxid, 5.6.1 
of POSM.1 (2). 
The group name of the file. 
This attribute has the same values and meaning as gr-name, 
9.2.1 of POSM.1 (2). 
Indicates a file whose contents can change, or that can be 
removed after it has been installed. 
The pathname of the target of the link. 
This attribute only has meaning if the file type is a hard or sym- 
bolic link. 
This attribute only has meaning if the file type is character or 
block special file. 
This attribute has the same values and meaning as the devmajor 
field in the tar archive specified in 10.1.1 of POSM.1{2}. 
This attribute only has meaning if the file type is character or 
block special file. 
This attribute has the same values and meaning as the devminor 
field in the tar archive specified in 10.1.1 of POSM.1 (2). 
3.12 Files 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
mode 
An octal representation of the permissions bits of the file. 
This attribute has the same values and meaning as st-mode, 
5.6.1 of POSIX.l (21, except that this attribute has no meaning if 
the file type is a hard or symbolic link. 
mtime 
The time of the last data modification of the file. 
This attribute has the same values and meaning as st-mtime, 
5.6.1 of POSM.1 (2). 
owner 
The name of the owner of the file. 
This attribute has the same values and meaning as pw-name, 
9.2.2 of POSIX.l (2). 
path 
The pathname of the file. 
type 
Supported file types are those described in 5.6.1.1 of POSM.l (21, 
plus hard link and symbolic link. 
The permitted values of this attribute are the following: f (regu- 
lar file), d (directory), h (hard link), s (symbolic link), p [named 
pipe (FIFO)], b (block special device), and c (character special 
device). 
uid 
The numeric user id of the file. 
This attribute has the same values and meaning as st-uid, 5.6.1, 
of POSIX.l (21. 
3.13 Control-Files 
Control-files can be scripts, data files, or INFO files. The product and fileset INFO 
files in the software packaging layout are included as control-files. Control scripts 
are the vendor-supplied scripts executed at various steps by the software adminis- 
tration utilities. 
The control-file class inherits attributes from the software-file common class. 
A particular control-file object is identified within a product or fileset by the tag 
attribute. The path attribute is the storage location of the file relative to the con- 
trol directory. For distributions, the control directory is the directory in the 
software packaging layout where 
the control-files 
are stored. 
For 
installed-software objects, this control directory location is undefined. 
3.13.1 Control-File Attributes 
The attributes listed in Table 3-13 and described in the following, along with the 
attributes listed in Table 3-11, characterize each instance of the control-file class: 
interpreter 
The name of the interpreter used to execute those control-files 
that are executed as part of the utilities defined in this part of 
ISOIIEC 15068. 
3 Software Structures 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
760 
Table 3-13 - Attributes of the Control File Class 
Attribute 
I 
Length 
I 
Permitted Values 
I 
Default Value 
tag 
1 
64 
1 Filename character string 
I None 
Within a distribution, a value for this attribute other than sh 
implies that the distribution is neither a Strictly Conforming 
POSM.7.2 Distribution nor a Conforming POSM.7.2 Distribu- 
tion. Such a distribution may be a Conforming POSM.7.2 Distri- 
bution with Extensions. See 1.3.2. 
interpreter 
path 
result 
path 
The filename of the control-file. 
Multiple control-file entries can have the same value of the path 
attribute. This implies that the same script is executed in 
different steps within the execution of a utility. 
Undefined 
Undefined 
16 
result 
Contains the result of the execution of the control script. 
This attribute is only valid for control-files in installed-software. 
A complete list of legal results is contained in Table 3-13. 
Filename character string 
Filename character string 
One 
of 
none, 
success, 
failure, warning 
tag 
The identifier of the control-file. 
sh 
None 
none 
All control files are loaded and maintained within the distribu- 
tion and installed software catalogs by the utilities defined in 
this part of ISOnEC 15068. These utilities execute control scripts 
with particular tags at various steps in the execution of the util- 
ity. The values for the controlfile.tag attribute for which this 
part of ISOIIEC 15068 defines behavior are as follows: request, 
response, checkinstall, preinstall, postinstall, 
unpreinstall, 
unpostinstall, 
verify, 
fix, 
checkremove, preremove, postremove, configure, 
unconfigure, and space. 
3.13 Control-Files 


ISOlIEC 15068-2: 1997 (El 
IEEE Std 1387.2-1995 
Section 4: Software Administration Utilities 
The Software Administration Utilities are the utilities that shall be implemented 
in all systems conforming to this part of ISO/IEC 15068. 
4.1 Common Definitions for Utilities 
This part of ISOIIEC 15068 defines the following utilities: swask, swcopy, 
swconfig, s w i n s t a l l ,  s w l i s t ,  swmodify, swpackage, swremove, and 
swverify. These utilities share many common definitions and behaviors. This 
section describes those common definitions and behaviors. These utilities conform 
to the utility syntax guidelines in 2.10.2 of POSK.2 (3). 
4.1.1 Synopsis 
The followin; is the general synopsis format for the utilities: 
<sw-utility> [ -d 11 1 -r I [-PI [-UI [-a attribute] [-c catalog] 
1-s source] [- f file] [- t targetfile] [-x option=ualuel 
[ -X optionsfiles] [software-selections I [@ targets] 
4.1.2 Description 
The utilities all operate on software~elections in source or target 
software~collections or both. 
4.1.3 Options 
Each of the utilities in this standard does not support all of the options shown as 
follows. Each utility shall support the options indicated in its synopsis subclause 
and those indicated after the description of the options in this subclause. All 
options can be repeated. Except where otherwise stated within this part of 
ISOIIEC 15068, the behavior for repeated options is undefined. In addition to 
those shown below, the -W (capital-W) option shall be reserved for implementation 
extensions. See 2.10.2 of POSM.2 (3). 
-a attribute 
Used to specify the attributes on which the utility shall operate. 
This option can be used multiple times to specify a set of attributes. 
Applies to s w l i s  t ,  and swmodi f y. 
4.1 Common Definitions for Utilities 
51 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE 
SYSTEM ADMINISTRATION - 
-c catalog 
Used to specify a file with the software definition file syntax or direc- 
tory with the exported catalog structure. 
This is where software catalog information (metadata) is to be stored 
to or retrieved from. If this information fits into one file, then the 
catalog can be a file, otherwise it shall be a directory. See section 5 
and 5.2. 
Applies to swask, swconfig, swinstall, s w l i s t ,  and swmo- 
dify. 
-d 
Indicates to the utility that the operation is on a distribution instead 
of installed-software. 
Applies to swlist, swmodify, swremove, and swverify. 
- f file 
Reads the list of software-selections from file. 
If this option is specified multiple times, all the software specified by 
each file shall be included in the operation. All of the software 
specified by using this option, as well as all the software specified 
directly as arguments to the utility, shall be included in the opera- 
tion. 
The file shall contain one software selection per line where a software 
selection uses the syntax for sof tware-spec defined in 4.1.4.1. 
Blank lines shall be ignored. Within the file, the # (pound) character 
shall act as a comment character. On any line containing a # (pound) 
character, all characters that follow the # (pound) character up to, 
but excluding, the next <newline>, shall be ignored. 
Applies to all utilities. 
- P 
Previews the operation without making any permanent modifications 
to the target. 
An implementation should run any control scripts that are executed 
as part of the selection or analysis phase of the command being pre- 
viewed, but shall not run any that are executed in the execution 
phase. 
This option can be used with any or all of the other options to under- 
stand the impact of an operation before performing it. 
Applies to swconf ig, swcopy, swinstall, swmodif y, swpack- 
age, and swremove. 
- r 
Indicates to the utility that the operation is on an installed-software 
object located at an alternate root, instead of either a distribution or 
the installed-software object located at /. 
Applies to swinstall, swlist, swmodify, swremove, and 
swveri f y. 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOlIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
-S source 
Specifies the software source for the operation. 
For swins t a l l ,  swask, and swcopy a source can be specified using 
the syntax in 4.1.4.2. For swpackage, the source shall be a product 
specification file. 
Applies to swask, swcopy, swinstall, and swpackage. 
- t targetfile 
Reads the list of targets from targetfile. 
If this option is specified multiple times, all the targets specified by 
each file shall be included in the operation. All of the targets 
specified by using this option, as well as all the targets specified 
directly as arguments to the utility, shall be included in the opera- 
tion. 
The file shall contain one target per line, where a target uses the syn- 
tax for software~co~~ection~spec 
defined in 4.1.4.2. Blank 
lines shall be ignored. Within the file, the # (pound) character shall 
act as a comment character. On any line containing a # (pound) 
character, all characters that follow the # (pound) character up to, 
but excluding, the next <newline>, shall be ignored. 
Applies to swconfig, swcopy, swinstall, s w l i s t ,  swmodify, 
swpackage, swremove, and swverify. 
-u 
This is the option used to specify undo or delete behavior to a utility. 
Applies to swconf i g  and swmodi f y. 
-x option=value 
Used to override the value of an extended option in the defaults file. 
The extended options supported are described in 4.1.5.2. This option 
can be specified multiple times. If any extended option is defined 
more than once, the precedence rules from 4.1.5.3.1 shall be used. 
Applies to all utilities. 
- x options file 
Used to override the defaults specified in the system defaults file. 
The options supported are described in 4.1.5.2. This option can be 
specified multiple times. If any extended option from any file is 
defined more than once, the precedence rules from 4.1.5.3.1 shall be 
used. 
The file shall have the format defined in 4.1.5.3. 
Applies to all utilities. 
4.1.3.1 Non-interactive Operation 
All utilities except swask are by default non-interactive. The s w i n s t a l l  and 
swconf i g  utilities also define interactive modes for executing request scripts 
independent of the swask utility. 
4.1 Common Definitions for Utilities 
53 

ISOAEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE SYSTEM ADMINISTRATION - 
The way in which swinstall, swcopy, and swpackage utilities handle multi- 
ple volumes for sources or targets is implementation defined. 
4.1.4 Operands 
There are two types of operands that may be specified on the command line - 
software~selections and targets. The software-selections refer to the software 
objects (bundles, products, subproducts and filesets) on which to be operated. The 
targets refer to the target software-collections where the software selections are 
applied. These two operand types shall be separated by the @ operand. With the 
exception of swpackage, the behavior of all utilities defined in this part of 
ISOIIEC 15068 is undefined if no software~selections are provided. 
4.1.4.1 Software Specification and Logic 
The following specifies the syntax for software selections in utilities 
$of tware-spec) and in dependency specifications (dependency-spec). This 
syntax shall be applied by the utilities to search a software-collection catalog for 
software. See 2.1.2 for the grammar conventions for this syntax. Note that the 
tokens shown below are defined in 2.2.2.68,2.2.2.37, and 2.2.2.92. 
NOTE: For examples of the use of specifications in this section, see Annex C. 
%token 
FILENAME-CHARACTER-STRING 
/* as defined in 2.2.2.37 
*/ 
%token 
NEWLINE-STRING 
/* as defined in 2.2.2.61 
*/ 
%token 
PORTABLE-CHAR?iCTER-STRING 
/* as defined in 2.2.2.68 
*/ 
%token 
SOFTWARE-PATTERN-MATCH-STRING /* as defined in 2.2.2.92 */ 
%token 
WHITE-SPACE-STRING 
/* as defined in 2.2.2.110 */ 
%start software-selections 
software-spec 
bundle-software-spec 
bundle-qualifier 
product-software-spec 
product-qualifier 
subproduct-qualifier 
software-selections ws software-spec 
software-spec 
bundle-software-spec 
product~software~spec 
bundle-qualifier version 
bundle-qualifier 
I . '  product-qualifier version 
bundle-qualifier 
I . '  bundle-tag 
bundle-tag 
product-qualifier version 
product-tag subproduct-qualifier fileset-qualifier 
/* empty */ 
subproduct-qualifier I . '  subproduct-tag 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 
1997 (El 
IEEE Std 1387.2-1995 
fileset-qualifier 
bundle-tag 
product-tag 
fileset-tag 
subproduct-tag 
version 
version-qualifier 
swqattern 
ver-id 
rel-op 
dotted-string 
ws 
I '.' subproduct-tag 
, 
: / *  empty */ 
I 
I . '  
fileset-tag 
: swqattern 
: swqattern 
: swqattern 
: swqattern 
: /* empty * /  
I I , * '  
I version-qualifier 
: version-qualifier ver-item 
I ver-item 
: ',' ver-id '=' 
I ', ' ver-id 
I = '  
swqattern 
( 
'
,
I
 'r' rel-op dotted-string 
: SOFTWARE-PATTERN-MATCH-STRING 
: FILENAME-CHARACTER-STRING 
: WHITE-SPACE-STRING 
183 
%start dependency-spec 
184 
8% 
185 
dependency-spec 
: dependency-spec ' 1 '  software-spec 
186 
I software-spec 
187 
18s 
If the sof tware-spec identifies a bundle, product or subproduct software object, 
then all filesets contained within that object are included as part of that 
specification. For software selections, this means that all of these filesets are 
4.1 Common Definitions for Utilities 
55 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE SYSTEM ADMINISTRATION - 
included. For dependency specifications, this means that all of these filesets are 
needed in order to meet the dependency. 
If a sof tware-spec identifies a set of filesets that is less that the entire set of 
filesets within a bundle or product, the sof tware-spec identifies a partial bun- 
dle or product. 
Only the specified strings shall be used to generate a sof tware-spec. Blanks 
shall not appear between items. The s w s a t t e r n  and dotted-string shall be 
enclosed in quotes if they contain blanks or commas. The bundle-tag, 
product-tag, subproduct-tag, and f ileset-tag shall consist of one or 
more characters from the filename character set, with the exception that the fol- 
lowing three characters . , : (period, comma, and colon) shall not be used. 
Searching a software-collection catalog for software using a so£ tware-spec 
yields a list of zero or more software objects that match the software-spec. 
The rules to be used in the search shall be the following: 
(1) The software-spec shall be compared against software in the software 
collection. The leftmost s w s a t t e r n  of the software-spec 
is 
matched against the tag attribute of all bundles and products in the 
software collection. All objects that match are initially included for con- 
sideration. If the s w s a t t e r n  does does not match any bundle or pro- 
duct, no objects are included. 
The version specified in the sof tware-spec shall be compared against 
the revision, architecture, vendor-tag, location, and qualifier attributes of 
the objects matching the leftmost s w g a t t e r n .  If any ver-id in the 
so£ tware-spec does not match its corresponding attribute, that object 
is removed from consideration. If the same ver-id is given more than 
once, all the comparisons specified are performed and all shall succeed to 
be considered a match. 
a b l e  4-1 - Software-spec Version Identifiers 
revision 
qualifier 
An implementation may define additional ver-id items along with the 
attributes and objects to which they apply. 
For each object still included for consideration, each successive 
s w q a t t e r n ,  left to right, is applied to the bundles, products, subpro- 
ducts and filesets within that object. The same s w q a t t e r n  may match 
multiple bundle, product, subproduct, and fileset objects. If any 
s w s a t t e r n  does not match any objects within the current object, the 
current object is removed from consideration. If a fileset matches a 
s w q a t t e r n  but there is still an unmatched s w s a t t e r n  in the 
sof tware-spec, that fileset is not selected. 
When there are no more s w s a t t e r n s  left in the sof tware-spec, all 
the objects identified by the rightmost s w g a t t e r n  of 
the 
56 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOlIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
software-spec are included in the list of software that match the 
so£ tware-spec. 
(2) The comparison performed when the operator is = shall be a software 
pattern match as described in 2.2.2.92. If the ver-id is specified and 
the value is an empty string, then the comparison is successful only if the 
corresponding attribute is not specified. See 4.1.4.1.1. 
When rel-op is used, the comparison shall be performed on the 
specified attribute by dividing it into segments separated by the . (period) 
character. 
NOTE: As defined in the syntax for ver-item, this comparison is required for revision 
only and any other comparison is undefined. 
If there is no period in an attribute, it contains one segment. The seg- 
ments shall be compared with the corresponding segments of the 
dot ted-s tring. If all characters in both segments to be compared are 
decimal digit characters (0-9), the comparison shall be based on the 
decimal numeric value of the segments, starting with the leftmost seg- 
ment. 
NOTE: Leading zeros are acceptable in such segments. 
If either segment includes any character other than a decimal digit char- 
acter, a string comparison shall be made to determine the relation. 
String comparisons shall be made using, as a collation sequence, the 
order of characters in IRV {I}. If one operand has fewer segments than 
the other, the unmatched segments shall be compared against the value 
0 (zero). 
When applied to software in installed software collections, use of either 
the 1 (location) or q (qualifier) ver-id shall cause comparison with the 
value of the location or qualifier attribute respectively for each product or 
bundle in the installed-software object. 
For distributions, use of either the 1 (location) or q (qualifier) ver-id 
shall be ignored for the purpose of comparisons. Although not used for 
comparisons, the location and qualifier ver-ids are used by the swin- 
s t a l l  utility as the location attribute for installing the software, and the 
qualifier attribute for the software, respectively. 
When software selections are applied to a source or target, and a 
s o f t w a r e s p e c  resolves to more than one software object, then the 
so£ tware-spec shall be considered ambiguous. An ambiguous selec- 
tion may be elective or incidental. An elective ambiguous selection occurs 
when a s w s a t t e r n  in a software-spec contains a wildcard charac- 
ter or when the version contains a rel-op, or when the s w g a t t e r n  is 
missing. In all other cases the selection is an incidental ambiguous selec- 
tion. An incidental ambiguous selection is only valid for s w l  i s t ,  and for 
other utilities generates an event. 
(SW-ERROR: SW-SELECTION-NOT-FOUND-AMBIG) 
If the so£ tware-spec begins with a bundle.tag definition, then that 
bundle definition is copied or installed with swcopy or swinstall. 
Thus, a software-spec that matches one or more bundles can be used 
with all other utilities, but only if they were explicitly installed or copied. 
4.1 Common Definitions for Utilities 
57 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE 
SYSTEM ADMINISTRATION - 
However, all subproduct definitions are copied or installed independently 
of whether they were explicitly selected. Thus, a sof tware-spec that 
matches subproducts can always be used on existing products. 
For both bundles and subproducts, if some part of their contents exist, then the 
selection can be found; therefore, any operation will succeed. If none of their con- 
tents exist, then the selection cannot be found; therefore, the operation will fail 
(for those selections not found) as defined in the individual Extended Description 
subclause of each utility. 
4.1.4.1.1 Fully Qualified Software-spec 
A fully qualified so£ tware-spec is one in which no fields contain a shell pattern 
match string and all version-distinguishing attributes are specified as 
nver-id=<uahe> " (if a value is supplied) or as "ver-id= " (if no value is sup- 
plied or if the value supplied is an empty string). Note that a fully qualified 
software-spec always identifies a software object unambiguously. 
When a software-spec is generated by s w l i s  t ,  only the following tags are 
included: the product tag for products, the bundle tag for bundles, the product and 
fileset tag for filesets, and the product and subproduct tag for subproducts. 
4.1.4.1.2 Software Compatibility 
Products contain attributes (0s-name, 0s-version, 0s-release, and machine-type) 
related to the uname0 function defined by 4.4.1 of POSM.1 (2). These attributes 
shall be used by the swinstall, swconfig, and s w e r i f y  utilities to deter- 
mine if software is compatible with a target host. A product is considered compa- 
tible with a target host if each of the uname attributes of the product contains a 
pattern in its definition that matches the corresponding values returned by the 
mame() function on the target host. If any of these attributes is undefined, it is 
considered to match any target host. The compatibility test applies to all com- 
ponents of a product, including subproducts and filesets. 
Bundles, like products, possess uname attributes. The values of the bundle 
uname attributes determine the compatibility of the bundle in conjunction with 
the corresponding attributes of products within the bundle. A product specified as 
part of a bundle shall be considered compatible if both the product and bundle 
uname attributes designate that the software is compatible. As with products, if 
any of these attributes is undefined, it is considered to match any target host. 
4.1.4.2 Source and Target Specification and Logic 
Source and target software-collections are specified using the following syntax. 
See 2.1.2 for the grammar conventions for this syntax. 
%token 
HOST-CHARACTER-STRING 
/* as defined in 2.2.2.43 
*/ 
%token 
PATHNAME-CHARACTER-STRING 
/* as defined in 2.2.2.64 
*/ 
%start target 
%% 
target 
: software~collection_spec 
software~collection~spec 
: HOSTCHARACTER-STRING 
I : '  
PATHNAME-CHARACTER-STRING 
58 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISODEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
I HOST-CIIARACTER-STRING 
I : '  
I HOST-CHARACTER-STRING 
I 
PATHNAME-CHARACTER-STRING 
%start source 
%% 
source 
: software~collection_spec 
The : (colon) is required if both the host and pathname are specified, or if the host 
portion starts with a / (slash). The pathname portion shall be an absolute path. 
The colon is not allowed by itself. 
The HOST-CHARACTER-STRING portion refers to the implementation-defined 
identifier for a host. If it is not specified, then the local host is assumed. 
The PATHNAME-CHARACTER-STRING portion refers to the software-collection 
path attribute (the location on the host of the distribution or installed-software 
object). 
When the PATHNAME-CHARACTER-STRING is not specified for installed-software, 
the directory / is used. A PATHNAME-CHARACTER-STRING other than / for an 
installedsoftware object is referred to as an alternate root directory. When the 
PATHNAME-CHARACTER-STRING is not specified for source distributions, the 
value of the distribution~ource-directory default option is used. When the 
PATHNAME-CHARACTER-STRING is not specified for target distributions, the 
value of the distributiontarget-directory default option is used. 
For installed-software objects, the value of the installed~software~catalog 
option 
is used to further clarify which installed software object is actually being targeted. 
Multiple installed-software objects may share the same path attribute, but they 
have separate catalog information because they are distinct objects. The 
installed-software 
path 
attribute, 
prefixed 
to 
the 
value 
of 
the 
installed~software~catalog 
option, forms the key for the object into the catalog 
information. Use of the installed~software~catalog 
is independent of the -c 
option. 
An implementation shall support source and target distributions in the directory 
format described in 5.3 for all utilities. An implementation shall support a source 
distribution in the serial format for swask, swinstall, and swcopy utilities. 
An implementation shall support a target distribution in the serial format for 
swlist, swcopy, and swpackage. Whether data on an existing target distribu- 
tion in serial format is overwritten or merged is implementation defined. An 
implementation need not support a target distribution in the serial format for 
swverify, swremove, and swmodify. Unless otherwise stated, support for 
serial distributions shall include support for both extended t a r  and extended 
cpio archives. See 5.3. The format of these archives is defined in Section 10. of 
POSIx.1 (2). 
4.1 Common Definitions for Utilities 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
4.1.5 External Influences 
4.1.5.1 Defaults and Options Files 
The defaults file allows setting of system wide defaults for extended options that 
define information (location of files and other objects), behavior, and policy control 
items for the utilities defined in this part of ISOIIEC 15068. The location of the 
defaults file is implementation defined. An implementation may define separate 
defaults files for each task. These options also may be specified for each user in 
the manager role in the file $HOME/ . swdef aul t s. 
4.1.5.2 Extended Options 
The utilities in this part of ISO/IEC 15068 support the following extended options 
as noted. If a default value is defined, it is listed after the = (equal sign). 
allow-downdate=false 
Controls the ability to replace a fileset with one of a lower revision. 
If allow-downdate=false, do not allow installation of a lower revision 
of a fileset that is already installed at a higher revision in this loca- 
tion. 
If allow-downdate=true, allow installation of a lower revision of a 
fileset. 
Applies to swinstall. 
allow~incompatible=false 
Controls the ability to install software that is not compatible with the 
underlying operating system, as defined in 4.1.4.1.2). 
If allow-incompatible=false, do not allow incompatible software to be 
operated on if the installed-software path is /. 
If allow-incompatible=true, then attempt the operation. 
Applies to swinstall, swconf ig, and swverify. 
allow-multiple-versions =false 
Controls the ability to configure multiple versions of a product. 
If allow-multiple-versions=false, do not attempt to configure a 
second version of a fileset if one is already configured. If 
allow-multiple-versions=true , then attempt the operation. 
Applies to swconf ig. 
ask = false 
Controls the ability to execute request scripts for selected software. 
If ask=false, the utilities shall not run any request scripts for 
selected software. The behavior of swask for ask=false, is 
undefined. 
If askdrue, the utilities shall execute all request scripts for 
selected software after resolving selections, but before initiating 
analysis on the targets. This is the default value for swask. 
60 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 
1997 (El 
IEEE Std 1387.2-1995 
If ask=as-needed, the utilities shall execute any request scripts for 
selected software that does not already have a response file in the 
control directory where the script would be executed. The location of 
this control directory depends on whether the -c option has been set. 
Applies to swask, swconf ig, and swinstall. 
autoreboot =false 
Controls automatic rebooting of the target host. If autoreboot =false, 
do not automatically reboot the target host, even if a fileset installed 
requires a reboot to take effect. 
If autoreboot=true, automatically reboot the target host if a fileset 
requiring a reboot is installed. 
Applies to swinstall. 
autorecover =false 
Controls automatic recovery if an error occurs during install, as 
specified in 4.5.7.3.8. 
If autorecover=false and an install error occurs, no error recovery 
shall be provided at all, not even as an extension to this part of 
ISOhEC 15068. Consequently, no attempt shall be made to restore 
the original state of the system prior to install. The value of the 
fileset state attribute shall be set to corrupt. 
If autorecouer=true and an error occurs, implementations shall, for 
any fileset having an install error, execute the u n p o s t i n s t a l l  
script (if the p o s t i n s t a l l  script had been run) and the unprein- 
s t a l l  script, restore the files within the fileset from a copy saved 
prior to the failed install, and the restore the value of the state attri- 
bute. After recovery of the applicable filesets, installation can con- 
tinue with the rest of the filesets in that product and the rest of the 
products in the software selections. 
NOTE: Since failure prior to executing the preinstall script should have no side 
effects, a failure implies that the unpreinstall script requires execution. 
Applies to swinstall. 
autoselect-dependencies =as-needed 
Controls automatic dependency selection. 
If autoselect-dependencies =true, (the default for all utilities except 
swins t a l l  and swcopy), prerequisite and corequisite dependencies 
shall be autoselected if possible during the selection phase. 
Autoselection of a dependency is done using the software selection 
logic found in 4.1.4.1. These dependencies are then operated on as if 
they were selected explicitly. 
If autoselect-dependencies =as-needed, (the default for s w i n s t a l l  
and swcopy), then autoselected dependencies shall only be operated 
upon if the dependency is not already met on the target. This value 
only applies to swcopy and swins t a l l .  
If autoselect-dependencies =false, then no dependencies shall be 
autoselected for operation. For install and copy, if the dependencies 
4.1 Common Definitions for Utilities 
61 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
are not already met on the target, an error shall occur when 
enforcedependencies =true. 
Applies to swask, swconfig, swcopy, swinstall, and swver- 
i f y .  
autoselectdependents =false 
Controls automatic dependency selection. 
If autoselect-dependents =true, dependent software (software that 
depends on this software) shall be autoselected if possible during the 
selection phase. This dependent software shall be operated upon 
unless the dependency can be met by other software on the target. If 
dependent software exists that cannot still meet its dependencies 
through other unselected software, then an error shall occur. 
If autoselect-dependents=false, no dependent software shall be 
autoselected. 
Applies to swconf ig, and swremove. 
check-contents =true 
Controls verification of file contents. 
If check-contents =true, then swverify shall check the mtime, size, 
and cksum attributes of files. 
If check-contents=false, then s w e r i f y  shall not check the attri- 
butes. 
This applies to both distribution and installed-software files. 
Applies to swveri f y. 
checkqermissions =true 
Controls verification of file permissions. 
If checkqermissions =true, then s w v e r i  f y shall check the owner, 
uid, group, gid, mode attributes of files, and the major and minor 
attributes of device files. 
If checkqermissions =false, then swveri f y shall not check the 
attributes. 
This only applies to installed-software files. 
Applies to swver i f y. 
check-requisites =true 
Controls verification of fileset requisites. 
If check-requisites =true, then swveri f y shall check the prere- 
quisites, corequisites, and exrequisites attributes of files. 
If check-requisites =false, then swverify shall not check the attri- 
butes. 
This applies to both distribution and installed-software. 
Applies to swveri f y. 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
check-scripts =true 
Controls the running of the verify script. 
If check-scripts =true, then swveri f y shall run the vendor-supplied 
verify script for each fileset when operating on installed-software 
objects. When the -F option of swverify is used, the vendor- 
supplied fix script is also executed. 
If check-scripts=false, then swverify shall not not run the scripts. 
Applies to sweri f y. 
check-volatile =false 
Controls check of volatile files. 
If check-volatile =true, then swver i f y shall include files whose 
is-volatile attribute is set to true in its check of files and their 
attributes. 
If check-volatile =false, then sweri f y shall not include volatile 
files. This is useful to eliminate potentially "spurious" reports from 
swverify when the only file changes are those to files known in 
advance to be volatile. 
Applies to swveri f y. 
compress files =false 
Controls whether uncompressed files are to be compressed in the 
target distribution, as specified by the value of compression-type . 
If compressfiles=true, then all files except those that have a 
compression-state of not-compressible shall be compressed, or 
shall remain compressed. 
If compress_files=false, uncompressed files shall not be compressed, 
and the status of any compressed file shall be determined by the 
value of uncompressfiles . 
Applies to swcopy. 
compression-type =implementation-defined-value 
Specifies the compression type used to compress the software files. 
The values supported for compression-type are implementation 
defined. 
The way in which an implementation uses this value to implement or 
execute the compression or uncompression of a file is undefined. 
Applies to swcopy. 
defer-configure=false 
Controls automatic configuration at install. 
If defer-configure=false, software being installed shall also be 
configured when the root directory is 1. 
If defer-configure=true, then the software is installed but not 
configured, and may require configuration (using swconf ig) before 
being used. 
4.1 Common Definitions for Utilities 
63 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
Applies to swinstall. 
distribution~source~directory 
=implementation-defined-value 
Specifies the default distribution directory. 
When a source specification does not contain a path specification, the 
value of this extended option shall be used as as the default source 
distribution directory. When a source specification does contain a 
path specification, it shall be used. 
Applies to swask, swcopy, and s w i n s t a l l .  
distribution-target-directory =implementation-defined-value 
Specifies the default distribution target. 
When a target specification does not contain a path specification, the 
value of this extended option shall be used as the default distribution 
target. When a target specification does contain a path specification, 
it shall be used. For swpackage, this shall be used only when 
media-type =directory . 
Applies to swcopy, swlist, swmodify, swpackage, swremove, 
and swveri fy. 
distribution-target-serial =implementation-defined-value 
Specifies the default distribution target. 
When a target specification does not contain a path specification and 
media-type=serial, the value of this extended option shall be used as 
the default distribution target. When a target specification does con- 
tain a path specification, it shall be used. 
Applies to swpackage. 
enforce-dependencies =true 
Controls the enforcement of dependency specifications. 
If enforce-dependencies =true, no utility except swremove and the 
unconfigure option of swconfig shall proceed unless necessary 
dependencies have been selected, or already exist in the proper state 
on the target. The swremove utility and the unconfigure portion of 
the swconfig utility shall not proceed if operating on the selected 
software leaves dependent software with their dependencies 
unresolved beyond what existed before the utility was executed. 
If enforce-dependencies =false, then all utilities shall proceed even if 
some dependencies are not met. Enforcement of dependencies is 
independent of whether or not they were autoselected. 
Applies to swconfig, swcopy, swinstall, swremove, and 
swveri f y. 
enforce-dsa =true 
Controls the handling of disk space analysis errors. 
If enforce-dsa =true, the implementation-defined error handling pro- 
cedure shall be invoked when the disk space analysis indicates there 
is not enough disk space. 
64 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
If enforce-dsa=false, then the operation shall be attempted even if 
disk space analysis indicated a problem. 
Applies to swcopy, s w i n s t a l l ,  and swpackage. 
enforce-locatable =true 
Controls the handling of errors when relocating a non-relocatable 
fileset. 
If enforce-locatable=true, an error shall be generated if an attempt 
is made to relocate a non-relocatable fileset. 
If enforcelocatable =false, an attempt shall be made to relocate the 
fileset in any case. 
Applies to s w i n s t a l l  and s w e r i f y .  
enforce-scripts =true 
Controls the handling of errors generated by scripts. 
If enforce-scripts =true, the implementation-defined error handling 
procedure shall be invoked when the vendor-supplied scripts return 
an error. 
If enforcescripts =false, all script errors shall be treated as warn- 
ings, and the utility shall attempt to continue operation. 
Applies to swins t a l l  and swremove. 
files 
Lists the pathnames of file objects to be added or deleted. 
If files='filel file2 file3 ...', then catalog information for those files 
shall be added or deleted. When files are added, the attributes of the 
file are retrieved from the actual file on the installed file system. File 
objects being added or deleted can also be specified in the INFO file 
format. There is no supplied default. 
Applies to swmodi f y. 
follow-symlinks=false 
Controls the following of symbolic links 
If follow-symlinks=false, then do not follow any symbolic links that 
may exist in the packaging source. 
If follow-symlinks=true , then attempt to follow symbolic links. 
Applies to swpackage. 
installed-software-catalog =implementation-defined-value 
Specifies installed software catalog. 
This extended option, along with the installed-software path attri- 
bute, defines the logical installed-software object upon which the 
utility is operating. This extended option is resolved relative to the 
PATHNAME-CHARACTER-STRING portion of the targets operand. 
See 4.1.4.2. 
This option allows an implementation to define where the catalog 
information is stored. This option also allows multiple logical 
4.1 Common Definitions for Utilities 
65 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
installed-software 
objects 
to 
share 
the 
PATHNAME-CHARACTER-STRING where the software is installed. 
Applies to swask, swconfig, swinstall, swlist, swmodify, 
swremove, and swveri f y. 
logfile = implementation-de fined-value 
Specifies the location of the the logfile for the management role. 
Logfile structure for all roles, logfile locations for other roles, and the 
effect of this option on logfile location is implementation defined. 
Applies to all utilities except s w l i s t .  
loglevel = 1 
Controls the amount of output sent by the utility to log files (not to 
stdout and stderr). 
See 4.1.6.5. 
Applies to all utilities except s w l  i s t . 
media-capacity = 0 
The storage capacity in megabytes of the output media. 
A value of 0 (zero) indicates an infinite capacity. 
Applies to swpackage. 
media-type =directory 
The default media type. 
If media-type=directory, the distribution is located in the value of 
the distribution-target-directory option. 
If media-type=serial, the distribution is located in the value of the 
distribution-target-serial option. 
Applies to swpackage. 
one-liner =implementation-defined-value 
Specifies attributes to list. 
The oneliner option specifies the attributes to list by default when 
neither -v and -a attribute options are specified. Only attributes 
that apply to each object listed are included for that object. At least 
one of the tag attribute (of products, subproducts, filesets and control 
scripts) or the path attribute (of files) shall be included. The order of 
attributes in the output listing need not be the order of the attributes 
specified in this option. The listing format used by oneliner is 
undefined. 
Applies to s w l i s  t. 
reconfigure =false 
Controls reconfiguring of software. 
If reconfigure=false, do not reconfigure software if it is already in the 
con£ igured state. If reconfigure=true, reconfigure the software 
even if it is already in the con£ igured state. 
66 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Applies to swconf ig 
recopy =false 
Controls copying of filesets. 
If recopy=false, do not copy a fileset that is already available on the 
target at the same version. 
If recopy =true, then copy the fileset in any case. 
Applies to swcopy. 
reinstall =false 
Controls reinstallation of filesets. 
If reinstall=false, do not install a fileset that already has the same 
version already installed. 
If reinstall=true, then reinstall the fileset even if this version is 
already installed. 
Applies to swinstall. 
select-local =true 
Controls default selection of target. 
If select-local =true, and no targets are specified, then the local host 
shall be selected as the target. 
If select-local =false, then the local host shall not be automatically 
included. 
Applies to all utilities except swask and swpackage. 
software 
Specifies a default set of sof tware-selections for the utility. 
Applies to all utilities in this part of ISO/IEC 15068. 
targets 
Specifies a default set of targets for the utility. 
See the select-local option. 
Applies to all utilities in this part of ISO/IEC 15068 except swpack- 
age. 
uncompressJiles = false 
Controls whether compressed files are to be uncompressed in the tar- 
get distribution, as specified by the value of the compression-type 
attribute of the file. 
If uncompress-files =false, all files with a compression-state attribute 
value of compressed shall remain compressed, and the status of 
uncompressed 
files shall be 
determined by the value of 
compressJiles . 
If uncompress-filesdrue, all compressed files shall be uncompressed 
before being written to the target distribution. 
Applies to swcopy. 
4.1 Common Definitions for Utilities 

ISOAEC 15068-2: 1997 (El 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
verbose = 1 
Controls the amount of output sent by the utility to stdout and 
stderr, but not to log files. 
For values that are non-negative integers, an increase in verbose 
shall not decrease the information sent stdout and stderr. All 
implementations shall support the values 0 (zero) and 1 (one). If 
verbose=O, nothing shall be written to either stdout or stderr. The 
effect of other values of verbose is undefined. See also 4.1.6.3 and 
4.1.6.4. 
Applies to all utilities in this part of ISOhEC 15068. 
4.1.5.3 Extended Options Syntax 
The syntax is the same for options specified on the command line and for those 
specified in the options file. See 2.1.2 for the grammar conventions for this syn- 
tax. Individual options use this syntax as follows: 
%token 
FILENAME-CHARACTER-STRING /* as defined in 2.2.2.37 
*/ 
%token 
PORTABLE-CHARACTER-STRING /* as defined in 2.2.2.68 
*/ 
%token 
SHELL-TOKEN-STRING 
/* as defined in 2.2.2.80 
* /  
%token 
WHITE-SPACE-STRING 
/* as defined in 2.2.2.110 
*/ 
%start software-option 
%% 
software-option 
command-qualifier 
I 
value 
multiyalue 
single-value 
command 
keyword 
command-qualifier keyword '=' value 
/* empty */ 
command ' . ' 
multi-value 
single-value 
value ws singleyalue 
single-value 
SHELL-TOKEN-STRING 
FILENAME-CHARACTER-STRING 
FILENAME-CHARACTER-STRING 
WHITE-SPACE-STRING 
With respect to this syntax, the following apply: 
4 Software Administration Utilities 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
PART 2: SOFTWARE ADMINISTRATION 
command 
A keyword prefixed by the command name applies to that utility only. 
If no prefix exists, then the keyword applies to all the utilities that support 
it. 
keyword 
Names the option or operand being defined, e.g., allow-incompatible for 
swinstall, and verbose for all the utilities. 
The allowable characters for a keyword are as defined in the filename 
character set, plus the - (hyphen) character. 
value 
Assigns the value to the keyword. 
All extended options are single valued except those that contain lists of 
sof tware-specs 
or sof t w a r e ~ c o l l e c t i o n ~ s p e c s .  Quoting of 
strings and escaping of characters shall be handled as specified in 3.2 and 
3.3 of POSM.2 (3). 
When specified on the command line, multiple option specifications can be 
included after a single -x option if included in quotes and separated by white 
space. Multiple -x options can also be used. 
For option and defaults files, blank lines and all comment text shall be ignored. 
Comment text is any sequence of characters beginning with a # (pound) character 
that is neither escaped nor quoted, and continues through the end of that line. 
If the white space between single values contains a <newline>, either it shall be 
escaped or the entire value shall be quoted. 
The following are examples of this syntax: 
loglevel=l 
allow-incompatible=£alse 
autoselect-dependen~ies=~as~needed" 
software=wFoo,r=1.2,a=hp-ux bar,a=Aix-3.2" 
targets="hosta:/ hostb hostc:" 
targets="hosta:/ 
hostb 
hostc: 
" 
4.1.5.3.1 Precedence for Option Specification 
Multiple option or operand specifications have a precedence that defines which 
specifications are used. 
Only the option specifications with the highest level of precedence are used for 
each option and operand. The precedence is the following, in increasing order: 
(1) System defaults file 
(2) User defaults file 
4.1 Common Definitions for Utilities 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
(3) Options file 
(4) Command line options and operands 
If there are multiple instances of options at any particular level, then the follow- 
ing rules apply: 
- If both keyword and command. keyword exist in the set of defaults or 
options files for this level, the command uses the latter, more specific, 
definition. 
- All values for software and targets options from all levels are included in 
the resulting software~elections and target-selections for the command. 
- For options besides software and targets, the behavior, when multiple or 
conflicting specifications are made, is undefined. This rule applies to 
options such as -s source where implementations may choose to assign a 
logical interpretation to multiple source specification. The same rule 
applies to options that are mutually exclusive. 
4.1.5.4 Standard Input 
4.1.5.5 Input Files 
The sections describing the swpackage and swrnodify utilities specifies addi- 
tional input files specific to those utilities. 
4.1.5.6 Access and Concurrency Control 
An implementation of this part of ISOIIEC 15068 shall allow a user to create, 
modify, delete, and access a catalog that describes a software object located where 
it is permissible for that user to respectively create, modify, delete, and access 
files. Other authorization, authentication and concurrency control requirements 
and mechanisms are undefined within this part of ISO/IEC 15068. This part of 
ISOhEC 15068 does provide event definitions that an implementation can use for 
access and concurrency control errors. 
If the user of a utility does not have the proper authorization to run a utility, 
access a software-collection, or access software objects within that utility, the tar- 
get may generate an event. 
(SW-ERROR: SW-ACCESS-DENIED) 
If the concurrency control mechanism prevents simultaneous operation on a 
software collection or software object, the target may generate an event. 
(SW-ERROR: SW-CONFLICTING-SESSION-IN-PROGRESS) 
If the command will proceed anyway, then the target may generate an event. 
(SW-WARNING: SW-CONFLICTING-SESSIONJN-PROGRESS) 
If the concurrency control mechanism fails for other reasons, the target may gen- 
erate an event. 
(SW-ERROR: SW-SOC-LOCK-FAILURE) 
4 SoRware Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
4.1.5.7 Environment Variables 
Environment variables are a feature of this part of ISO/IEC 15068 inherited from 
POSM.l (2). The following environment variables shall affect the execution of all 
the utilities defined in this part of ISOIIEC 15068: 
LANG 
LC-ALL 
LC-CTYPE 
LC-MESSAGES 
LC-TIME 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
This variable shall determine the locale to use for the 
locale categories when both LC-ALL and the correspond- 
ing environment variable (beginning with LC-) do not 
specify a locale. 
See 2.6 of POSM.2 {3}. 
This variable shall determine the locale to be used to over- 
ride any values for locale categories specified by the set- 
tings of LANG or any environment variables beginning 
with LC-. 
This variable shall determine the interpretation of 
sequences of bytes of text data as characters (e.g., single- 
versus multibyte characters in values for vendor-defined 
attributes). 
This variable shall determine the language in which mes- 
sages should be written. 
This variable shall determine the format of dates 
(create-date and mod-date) when displayed by s w l  i s t . 
It should also be used by all utilities when displaying 
dates and times in stdout, stderr, and logging. 
This variable shall determine the time zone for use when 
displaying dates and times. 
4.1.6 External Effects 
4.1.6.1 Control Script Execution and Environment 
The utilities defined in this part of ISOIIEC 15068 shall cause control files to be 
interpreted according to the following rules: 
(1) If no value is set for the controlfile.interpreter attribute, or if the value is 
set to either the empty string or sh, the script shall be interpreted by the 
POSM.2 (3) shell. 
(2) If the value of controlfile.interpreter is set to a value other than the 
empty string or sh, then the utility shall determine the availability of the 
interpreter in an operating system dependent fashion equivalent to 
searching PATH for an executable file with a filename equivalent to the 
value of controlfile.interpreter. If the interpreter is determined to be 
available, the control file shall be interpreted using that interpreter. 
(3) If no interpreter is available, then a return code value of 1 (one) shall be 
presumed for the script, and all other actions defined for that return code 
shall be assumed. See 4.2,4.3,4.5,4.9, and 4.10. 
4.1 Common Definitions for Utilities 
7 1 

ISOlIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
During the execution of each such control script, the following environment vari- 
ables shall be defined for the environment of the control-script: 
SW-CATALOG 
The value of the installed-software.catalog attribute indicating the 
location or 
identification of 
the catalog relative 
to the 
SW-ROOT-DIRECTORY. 
SW-CONTROL-DIRECTORY 
The directory where the executing script is located. 
This directory shall be readable from within control script execution 
and shall be writable from commands within control scripts when the 
request script is being executed. All control-£ iles shall be 
readable by any control script. 
SW-CONTROL-TAG 
The tag of the script being executed. 
This allows the control-script to tell what tag is being executed when 
the actual script path is defined for more than one tag. 
SW-LOCATION 
The base directory where the product or fileset will be installed or is 
already installed. 
This is the value of the location attribute. 
SW-PATH 
A PATH that, at least, contains all utilities defined by the 
Posnz.2 (3). 
NOTE: POSIX.2 (31, in 7.8 and B.lO.l, requires and defines the C function confstr0 
that obtains such a PATH. 
SW-ROOT-DIRECTORY 
The installed-software.path attribute of the installed software object 
within which the software containing this control-file shall be 
installed. 
This is the directory relative to which all operations with the script 
shall be performed. 
NOTE: For example, if this normally has a value of /, but if a proxy install is done 
to a target directory /mnt / tes t /, this shall have the value of /mnt / tes t/. 
S W-SESSION-OPTIONS 
The pathname of a file containing the value of every option defined 
for the software utility being executed, using the options syntax 
described in 4.1.5.3. 
The option syntax shall be restricted such that the command prefix 
shall not be used, there shall be no spaces on either side of the = 
(equal sign), and multiple valued options shall have the values 
quoted. 
This environment variable allows scripts to retrieve any options and 
values for this command other than the ones provided explicitly via 
environment 
variables. 
When 
the 
file 
pointed 
to 
by 
72 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOlIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
SW-SESSION-OPTIONS is made available to request scripts, 
the 
targets 
option 
shall 
contain 
a 
list 
of 
so£ tware-collection-specs 
for all targets specified for the 
command. When the file pointed to by SW-SESSION-OPTIONS is 
made available to other scripts, the targets option shall contain the 
single software~collection~spec 
for the targets on which the 
script is being executed. 
An 
implementation 
should 
ensure 
that 
each 
so£ tware-collec tion-spec contained in the value of the targets 
option is the same between invocations of commands. This will help 
ensure that any per-target information stored by the request script 
can be located by the subsequent scripts. 
SW-SOFTWARE-SPEC 
The value of the fully qualified software-spec identifymg the 
software object containing this control script. 
See 4.1.4.1.1. 
4.1.6.1.1 Control Script Stdout and Stderr 
The scripts may send information, particularly about reasons for error conditions 
to stdout and stderr. The utilities shall log stdout and stderr to the logfile of the 
role executing the script. 
4.1.6.1.2 Control Script Return Code 
The scripts shall return with a return code of 0 (zero), 1, or 2. Additionally, chec- 
k i n s t a l l ,  checkremove, con£ igure, and unconf i g u r e  scripts may return 
with a return code of 3. The return codes 4 through 31 (inclusive) are reserved for 
future use. The meaning of these return codes is shown in the following table: 
Table 4-2 - Script Return Codes 
Return Code I 
Effect of Return Code 
I 
Status 
The script executed successfully. The utility will proceed 
normally. 
The script had an error. The utility shall generate an error 
event and implement the error procedure delined for this 
script type. 
The script had a warning. The utility will generate a warn- 
ing event and continue. 
The script is forcing a deselection of this product or fileset. 
I The utility will generate a note and skip this product or 
fileset during any further processing. 
Reserved. 
SW-NOTE 
SW-ERROR 
SW-WARNING 
SW-NOTE 
All scripts, with the exception of the request script, shall be non-interactive. 
An implementation can define behaviors for additional script return codes. Any 
such behavior is implementation defined. 
Return codes with no behavior defined by either this part of ISO/IEC 15068 or the 
implementation should be treated using the behavior associated with return code 
4.1 Common Definitions for Utilities 
73 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
4.1.6.2 Asynchronous Events 
The following are the set of events generated by the utilities defined in this part of 
ISOIIEC 15068. These events are generated during the course of a execution of a 
utility. See 4.1.6.5. 
The event codes and their numeric values are listed in Table 4-4 through Table 4- 
7, inclusive. 
NOTE: Not all events are generated by each utility. For example, events related to script execu- 
tion only apply to swinstall, swask, swremove and swverify. The specific events generated 
by each utility are defined in the appropriate subclause for that utility. 
Each event generated also has a severity status associated with it. The event 
status that can occur for each event is also listed. Event status also has a numeric 
value, as described in Table 4-3, Table 4-4, Table 4-5, Table 4-6, and Table 4-7. In 
addition, all numeric values between 0 and 255 (inclusive) are reserved, either for 
use in this part of ISOIIEC 15068 (as described in the accompanying tables) or for 
use in future revisions of this part of ISOIIEC 15068. 
Table 4-3 - Event Status 
I Status 
I 
Effect of Event 
I 
Value 
A command shall not have an exit code of zero if any SW-ERROR event occurred 
during the course of a command. 
SW-NOTE 
SW-ERROR 
SW-WARNING 
The descriptions in the following tables describe the conditions that lead to this 
event, and the set of possible event status values for the event. The tables also 
include "Manager info" and "Target info", describing the additional information 
that may be logged for manager and target role event logging, respectively. See 
4.1.6.5. 
Table 4-4 lists general source and target role events. The way in which some of 
these events are generated (if at all) may be different for different implementa- 
tions. Table 4-5 lists the source and target role events related to initialization of a 
session and ending a session. The way in which some of these events are gen- 
erated (if at all) may be different for different implementations. Table 4-6 lists the 
source and target role events related to the analysis phase of the commands. 
Some of these are also related to the execution phase of the commands. Table 4-7 
lists the target role events related to the execution phase. 
The operation continues normally 
implementation-defined error 
handling 
procedure is 
invoked 
The operation continues normally 
4.1.6.3 Stdout 
0 
1 
2 
Events with a status of SW-NOTE shall, if permitted by the value verbose, be 
directed to stdout. Manager role events shall, if permitted by the value verbose, 
be directed to stdout. Nothing shall be written to stdout if verbose=O (zero). The 
74 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Table 4-4 - General Error Events 
Event Code 
;W-ILLEGAL-STATE-TRANSITION 
Event Status 
SW-ERROR 
SW-ERROR 
SW-ERROR 
SW-ERROR 
SW-ERROR 
SW-ERROR 
SW-ERROR 
SW-ERROR 
Description 
The manager is requesting a 
phase out of order. Manager info: 
target. 
Target 
info: 
current 
phase. 
The manager has contacted the 
wrong target, or this is not a valid 
manager 
for 
this 
session. 
Manager info: target. Target info: 
information about the initiator. 
An illegal or unrecognized option 
was sent. Manager info: target, 
number of options. Target info: 
option names and values. 
The user has insufficient privilege 
to perform the requested opera- 
tion. Manager info: target. Tar- 
get info: information about the 
initiator. 
The target role had a memory 
allocation error (e.g., out of swap). 
Manager info: target. Target info: 
reasons for error. 
The target role had a resource 
allocation error such as maximum 
number of processes reached, 
maximum number of files open, 
etc. Manager info: target. Target 
info: reasons for error. 
The target role had an internal 
implementation error. Manage1 
info: target. Target info: reasons 
for error. 
An I/0 error occurred while per 
forming this command. Manage1 
info: target. Target info: reason5 
for error. 
writing of any target role events to stdout is undefined. 
4.1.6.4 Stderr 
If any events with a status of SW-ERROR or SW-WARNING occur on a target role, 
this information shall be communicated to the management role. In addition, at 
least a single message for that target shall, if permitted by the value verbose, be 
directed to the stderr of the management role. Nothing is written to stderr if ver- 
bose=O (zero). 
The sending of any additional messages to stderr of the management role is 
undefined. 
See verbose in 4.1.5.2. 
4.1 Common Definitions for Utilities 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM 
SYSTEM ADMINISTRATION - 
Table 4-5 - Session Events 
Event Code 
(Event Status I 
Description 
Manager info: target. 
et info: reasons for error. 
target role is not accepting 11 
ew requests. Manager info: 
rget. Target info: reasons for 
that may affect the 
of 
this 
command. 
info: target, number 
s. Target info: infor- 
out other sessions. 
command begins on the 28 
get. Manager info: target. 
get info: information about 
initiator of the command. 
nds on the tar- 29 
SW-ERROR 
SW-ERROR 
SW-ERROR 
SW-NOTE 
get. Target info: none. 
e limit of source or target 30 
e sessions on this host has 
eady 
been 
reached. 
anager info: target, number 
sessions. 
Target 
info: 
ber of sessions, limit. 
requested target or source 31 
are collections does not 
st. Manager info: target. 
get info: reasons for error. 
sofkware_collection exists, 32 
the information is corrupt. 
ager info: target. Target 
. reasons for error. 
target software~collection 34 
not previously exist and 
s created. 
Manager info: 
arget. Target info: none. 
4 Software Administration Utilities 
IW-CONFLICTING-SESSION-IN-PROGRES&W~ERROR 
A conflicting session is in pro- 
that will prevent this 
operation (error), or cause its 
results to possibly be invalid 
(warning). Manager info: tar- 
get. Target info: information 
about other sessions. 
cannot set the proper access 
control to this source or target. 
Manager info: target. Target 
info: reasons for error. 
;W-SOCLOCK-FAILURE 
35 
36 
SW-WARNINGgress 
SW-ERROR 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Table 4-5 - Session Events (concluded) 
Event Code 
Event Status 
IW-ERROR 
IW-NOTE 
IW-ERROR 
IW-NOTE 
IW-ERROR 
SW-NOTE 
IW-ERROR 
3W-ERROR 
3W-ERROR 
SW-NOTE 
SW-WARNING 
Description 
l'he software~collection is a read 
mly source for a read source or 
arget (note), or is a target to be 
modified (error). Manager info: 
arget. Target info: none. 
l'he software~collection is on a 
remote file system. 
(Whether 
note or error is implementation 
iefined). Manager info: target. 
h g e t  info: none. 
We distribution is an incorrect 
Lype for the command (e.g., a tape 
For swremove). Manager info: 
target. Target info: reasons for 
srror. 
The distribution has a serial for- 
mat (e.g., a tape). Manager info: 
target. Target info: none. 
The software~collection is of the 
wrong 
type 
(distribution 
or 
installed-software) for the opera. 
tion. Manager info: target. Tar 
get info: target type. 
Cannot open logfile to log thc 
software~collection 
events 
Manager info: target. Target info 
reasons for error. 
The software collection is inade. 
quately specified for the opera, 
tion. Manager info: target. Tar 
get info: reason for error 
The target role is currentlj 
analyzing or executing a com 
mand and will terminate the ses 
sion once completed. Managel 
info: target. Target info: none. 
The target role failed to initiatt 
the reboot operation of an instal 
command and requires manua 
reboot. 
Manager info: target 
Target info: reasons for error. 
4.1.6.5 Logging 
The management role and target role each log events. The way in which logging 
is implemented, including the location of the logfiles, is implementation defined. 
Which messages, if any, are placed in the source role logfile is undefined. 
All implementations shall support the values 0 (zero), 1 (one) and 2. If 
loglevel=O, nothing shall be written to log files. The target role shall log all 
events, except file level events, when loglevel=l . The target role shall redirect, to 
the logfile, stderr and stdout from control scripts when loglevel=l. When 
loglevel=2, the target role shall log file level events. For values which are non- 
4.1 Common Definitions for Utilities 
77 

ISOAEC 15068-2: 1997 (El 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
Table 4-6 - Analysis Phase Events 
Event Code 
SW-ANALYSISBEGINS 
Event Status 
SW-NOTE 
SW-NOTE 
SW-WARNING 
SW-ERROR 
SW-NOTE 
SW-NOTE 
SW-NOTE 
SW-ERROR 
SW-ERROR 
SW-ERROR 
Description 
The analysis phase begins on the 
target. 
Manager info: target. 
Target info: none. 
The analysis phase ends on the 
target. The analysis may have 
succeeded, had warnings, andlor 
errors. 
Manager info: target. 
Target info: none. 
One 
or 
more 
filesets were 
excluded automatically as the 
software identified as exrequisites 
was also specified to be selected. 
Manager info: target, number of 
filesets. 
Target 
info: 
so£ tware-specs 
One or more checkinstall or 
checkremove scripts have caused 
the software to be unselected and 
excluded from further processs- 
ing. 
Manager 
info: 
target, 
number of filesets. Target info: 
software-specs 
One 
or 
more 
configure 
or 
unconfigure scripts have caused 
the software to be unselected and 
excluded from hrther processs- 
ing. 
Manager 
info: 
target, 
number of filesets. Target info: 
so£ tware-specs 
The software selection was found, 
but its state was corrupt or 
transient. Manager info: tar- 
get, number of selections Target 
info: so£ tware-specs 
Failure contacting or retrieving 
information from the source. 
Manager info: target. Target info: 
reasons for error. 
The source does not have a media 
number of 1 (needed for retrieval 
of the INDEX). Manager info: tar- 
get, current media number. Tar- 
get info: current media number. 
1164 
negative integers, an increase in loglevel shall not decrease the information logged 
1165 
for a given role. All other behavior regarding logging is undefined. 
1166 
See loglevel in 4.1.5.2. 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Table 4-6 - Analysis Phase Events (continued) 
Event Code 
iV-SELECTION-NOT-FOUND 
hent Status 1 
Description 
pall 
W-ERROR 
W-NOTE 
W-ERROR 
W-NOTE 
W-ERROR 
ne or more software selection 
62 
annot be found. This is an erro 
or install or copy; otherwise, 
F e .  
Manager 
info: 
targel 
umber of selections. Target info: 
so£ tware-specs 
er version exists. This is 
: so£ tware-specs 
of tware-specs 
. target, number of file 
s. Target info: file sys 
: target, number o 
Target info: file sys 
or more products 
a new version in an 
. Whether error or w 
1213 
4.1.7 Extended Description 
1214 
See the individual utility descriptions for the complete extended descriptions of 
1215 
each task. This subclause lists the steps common to the utilities. 
1216 
There are three phases in the utilities as follows. Targets may be processed in any 
1217 
order or in parallel. 
(1) Selection phase - 
The user specifications are resolved, including source, target, and 
4.1 Common Definitions for Utilities 
79 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
Table 4-6 -Analysis Phase Events (continued) 
1 
Event Code 
I Event Status 
SW-WARNING 
SW-NOTE 
SW-ERROR 
SW-WARNING 
SW-ERROR 
S W-WARNING 
SW-WARNING 
SW-ERROR 
SW-ERROR 
I 
I 
software selections. 
(2) Analysis phase - 
Description 
I value 
The command is operating on an 
69 
 xis sting multiple version of one or 
more products. If trying to install 
two versions into one location, 
generate an event. Warning or 
note 
controlled 
bv 1 
allow~multiple~versions option. 
Manager info: target, number of 
products. 
Target 
info: - 1 
sof tware-specs 
I 
enforce-dependencies 
option. 
Manager info: target, number of 
filesets. 
Target 
info: 
so£ tware-specs, 
One or more dependencies cannot 
be met. Whether error or warn- 
ing 
is 
controlled 
by 
dependency-specs 
1 
70 
so£ tware-specs 
I 
One or more products are incom- 
patible for this target. Whether 
error or warning is controlled by 
allow-incompatible 
option. 
Manager info: target, number of 
products. 
Target 
info: 
One or more checkinstall,[ 72 
71 
checkremove or v e r i f y  scripts 
had a warning. Manager info: 
target, number of filesets. Target 
info: sof tware-specs 
I 
One or more checkinstall,\ 73 
checkremove or verify scripts 
failed. 
Manager info: target, 
number of filesets. Target info: 
software-specs 
I 
Disk space analysis is over the 
minimum free limit, but not the 
overall limit 
on 
the target. 
Whether error or warning is con- 
trolled by enforce-dsa 
option. 
Manager info: target, number of 
file systems. Target info: file sys- 
tem names, amount over the 
minimum free. 
The utility attempts to discover conditions that may cause failure when 
operating on the selected s o b a r e  
(3) Execution phase - 
The actual operations on the software objects take place 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Table 4-6 - Analysis Phase Events (continued) 
Event Code 
Event Status 
3W-ERROR 
3W-WARNING 
SW-ERROR 
SW-WARNING 
SW-NOTE 
SW-NOTE 
SW-NOTE 
SW-NOTE 
SW-NOTE 
Description 
Disk space analysis is over the 
absolute limit. Whether error or 
warning 
is 
controlled 
by 
enforce-dsa 
option. 
Manager 
info: target, number of file sys- 
tems. Target info: file system 
names, amount over the limit. 
Disk space analysis had an inter- 
nal error and failed to run. 
Whether error or warning is con- 
trolled by enforce-dsa 
option. 
Manager info: target, number of 
filesets. 
Target 
info: 
so£ tware-specs 
One or more filesets have the 
same revision and are being rein- 
stalled because reinstall =true or 
recopy =true. Manager info: tar- 
get, number of filesets. Target 
info: so£ tware-specs 
One or more filesets are already 
configured Whether they are 
reconfigured is controlled 
by 
reconfigure option. Manager info: 
target, number of filesets. Target 
info: software-specs 
One or more filesets will be 
skipped because of another error 
within their product. (Error ham 
dling is implementation defined). 
Manager info: target, number ol 
filesets. 
Target 
info: 
so£ tware-specs 
One or more filesets will bc 
skipped because of a global errox 
(such as disk space analysir 
failure) within the analyze phase. 
(Error handling is implements 
tion defined). Manager info: tar 
get, number of filesets. Targei 
info: so£ tware-specs 
One or more files would bc 
created or removed on a remo& 
file system. (Policy for loading 
remote files is implementatiox 
defined). Manager info: target 
number of files. Target info: fik 
paths. 
When a utility initiates a session on a target, generate an event. 
(SW-NOTE: SW-SESSION-BEGINS) 
When the session completes, generate an event. 
(SW-NOTE: SW-SESSION-ENDS) 
4.1 Common Definitions for Utilities 

ISOnEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE SYSTEM ADMINISTRATION - 
Table 4-6 - Analysis Phase Events (concluded) 
Event Code 
Event Status 
SW-WARNING 
SW-WARNING 
SW-ERROR 
SW-WARNING 
SW-ERROR 
Description 
One or more files will not be 
attempted to 
be 
created 
or 
removed on a read only file sys- 
tem. 
Manager 
info: 
target, 
number of files. Target info: file 
paths. 
One or more files could not be 
removed (e.g., text busy, or non- 
empty directories). Manager info: 
target, number of files. Target 
info: file paths. 
One or more files had warnings in 
analysis or execution. Manager 
info: target, number of files. Tar- 
get info: file paths. 
One or more files had errors in 
analysis or execution. Manager 
info: target, number of files. Tar- 
get info: file paths. 
A fileset is not locatable. Con- 
trolled by the enforce-locatable 
option. 
Manager info: target, 
number of filesets. Target info: 
so£ tware-specs 
One or more filesets have the 
same revision and are being 
skipped because reinstall =false 
or recopy =false. Manager info: 
target, number of filesets. Target 
info: so£ tware-specs 
Value 
- 
82 
83 
84 
85 
86 
87 
4.1.7.1 Selection Phase 
This subclause summarizes the common tasks in the selection phase. Errors and 
warnings are listed along with the tasks. 
4.1.7.1.1 Starting a Session 
On invocation, each command processes options as defined in 4.1.5.3.1. 
The command shall exit if the user does not have appropriate privilege. Since 
implementation of the security scheme is unspecified within this part of ISO/IEC 
15068, appropriate privilege is implementation defined. An implementation may 
generate the following events at any point in the execution of the command if they 
are applicable to that implementation: 
(SW-ERROR: SW-ACCESS-DENIED) 
(SW-ERROR: SW-ILLEGAL-OPTION) 
(SW-ERROR: SW-MEMORY-ERROR) 
(SW-ERROR: SW-RESOURCE-ERROR) 
(SW-ERROR: SW-INTERNAL-ERROR) 
(SW-ERROR: SW-TERMINATION-DELAYED) 
(SW-ERROR: SW-10-ERROR) 
82 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOIIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Table 4-7 - Execution Phase Events 
Event Code 
Event Status I 
Descri~tion 
baluc 
W-NOTE 
JCLxecution 
arget. 
Manager 
phase info: 
b&ins target. 
on &I 88 
arget info: none. 
W-NOTE 
he execution phase ends on th 
89 
W-WARNIN 
arget. 
Manager info: target. 
W-ERROR 
W-NOTE 
W-ERROR 
W-ERROR 
SW-NOTE 
IW-NOTE 
). Manager info: 
media sequence n 
info: 
needed 
w e n t  media sequence number. 
more 
p r e i n s t a l l  95 
reremove, unpreinstall, o 
f i x  scripts had a warning. 
anager info: target, number o 
cripts. 
Target 
info: 
of tware-spec, script tag i
1415 
4.1.7.1.2 Specifying %rgets 
1416 
A target is specified using the syntax in 4.1.4.2. Each target shall pass the follow- 
1417 
ing validation checks. If any of these checks fail, the command shall invoke the 
1418 
implementation-defined error handling procedure. 
1419 
- If the target role was unable to initialize the session on the target host, gen- 
1420 
erate an event. 
1421 
(SW-ERROR: SW-AGENT-INITIALIZATION-FAILED) 
- If administrative access is denied by the target role on the target, generate 
an event. 
4.1 Common Definitions for Utilities 
83 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
%ble 4-7 - Execution Phase Events (continued) 
Event Code 
Event Status 
SW-WARNING 
SW-ERROR 
SW-WARNING 
SW-ERROR 
SW-WARNING 
SW-WARNING 
SW-ERROR 
SW-WARNING 
SW-ERROR 
SW-WARNING 
Description 
One 
or 
more 
p r e i n s t a l l ,  
preremove, unpreinstall, or 
f i x  scripts failed. Manager info: 
target, number of scripts. Target 
info: so£ tware-spec, script tag 
One or more filesets had a warn- 
ing. 
Manager 
info: 
target, 
number of filesets. Target info: 
so£ tware-specs 
One or more filesets had an error. 
Manager info: target, number of 
filesets. 
Target 
info: 
so£ tware-specs 
Oneor more p o s t i n s t a l l ,  pos- 
tremove, or u n p o s t i n s t a l l  
scripts had a warning. Manager 
info: target, number of filesets. 
Target info: so£ tware-specs 
Oneormore p o s t i n s t a l l ,  pos- 
tremove, or u n p o s t i n s t a l l  
scripts failed. Manager info: tar- 
get, number of filesets. Target 
info: so£ tware-specs 
The postkernel kernel build 
script had a warning. Manager 
info: target. Target info: reasons 
for error. 
The kernel 
failed 
to build. 
Manager info: target. Target info: 
reasons for error. 
One or more configure or 
unconfigure scripts had 
a 
warning. Manager info: target, 
number of scripts. Target info: 
sof tware-specs, script tag 
Value 
(SW-ERROR: SW-ACCESS-DENIED) 
- Except for swinstall, swcopy, and swpackage, if the target does not 
exist on a host, generate an event. 
(SW-ERROR: SW-SOC-DOES-NOT-EXIST) 
- For swinstall, swcopy, and swpackage, if the target directory does not 
exist on a host, it is created with default attributes and an event is gen- 
erated. 
(SW-NOTE: SW-SOC-CREATED) 
- If the target is corrupt, generate an event. 
(SW-ERROR: SW-SOC-IS-CORRUPT) 
- If the target is the wrong type (installed-software or distribution) for the 
target type the user specified (with a -r or -d option respectively), generate 
an event. 
(SW-ERROR: SW-SOCJNCORRECTTTYPE) 
84 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Table 4-7 - Execution Phase Events (concluded) 
Event Code 
BEGINS 
Event Status 
SW-WARNING 
SW-ERROR 
SW-ERROR 
SW-WARNING 
SW-ERROR 
SW-ERROR 
SW-ERROR 
SW-NOTE 
SW-NOTE 
SW-NOTE 
Description 
One or more configure or 
unconfigure 
scripts 
failed. 
Manager info: target, number of 
scripts. 
Target 
info: 
so£ tware-specs, script tags 
An update to the catalog informa- 
tion for installed-software or dis- 
tributions failed. Manager info: 
target. Target info: reasons for 
error. 
One or more r e q u e s t  scripts had 
a 
warning. 
Manager 
info: 
so£ tware-specs 
One or more r e q u e s t  scripts 
failed. 
Manager 
info: 
software-specs 
A file could not be compressed or 
uncompressed. 
Manager 
info: 
target. Target info: filepath. 
File is missing fi-om the source or 
target 
software_collection. 
Manager info: target, number of 
files. Target info: file path. 
The execution phase of a fileset 
begins. 
Manager info: target. 
Target info: so£ tware-spec 
The execution of a control script 
begins. 
Manager info: target. 
Target info: 
so£ tware-spec, 
control script tag 
The execution phase of file begins. 
Manager info: target. Target info: 
file path. 
Value - 
104 
105 
106 
107 
112 
113 
117 
118 
119 
- 
- If both a distribution object and an installed-software object exist at the 
location specified in the target, and neither the -d nor the -r option is 
specified, generate an event. 
(SW-ERROR: SW-SOC-AMBIGUOUS-TYPE) 
- If the target is a serial distribution, generate an event. 
(SW-NOTE: SW-SOC-IS-SERIAL) 
- If the command is swcopy or swpackage, a serial distribution shall be 
overwritten by default. If the command is swremove, swmodify, or 
swveri f y, and the implementation does not support these on a serial dis- 
tribution, generate an event. 
(SW-ERROR: SW-SOC-INCORRECT-MEDIA-TYPE) 
- If the target is not able to open the implementation-defined logfde, generate 
an event. 
(SW-ERROR: SW-CANNOT-OPEN-LOGFILE) 
4.1 Common Definitions for Utilities 

ISOAEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
- If the operation needs to modify the target, and it is on a read-only media or 
file system, generate an event. 
(SW-ERROR: SW-SOC-IS-READ-ONLY) 
- An implementation may generate the following events, if they are applica- 
ble to that implementation, when validating a target: 
(SW-ERROR: SW-SERVTCE-NOT-AVATLABLE) 
(SW-WARNING: SW-OTHER-SESSIONS-IN_PROGRESS) 
(SW-ERROR: SW-CONNECTION-LIMITEXCEEDED) 
(SW-NOTE : SW-SOC-IS-REMOTE) 
(SW-ERROR: SW-FILESYSTEMS-NOT-MOUNTED) 
(SW-ERROR: SW-FILESYSTEMS-MORE-MOUNTED) 
4.1.7.1.3 Specifying the Source 
This subclause only applies to swcopy and swinstall. The source contains 
software organized in the software packaging layout. A target can be specified 
using the syntax in 4.1.4.2. 
If source is specified, then it is resolved in the context of the management role. If 
source is not specified, then a default value is supplied as defined in 4.1.5.3.1. 
A source shall satisfy the following validation checks: 
- If the source does not exist or if it cannot be accessed, generate an event. 
(SW-ERROR: SW-SOURCE-ACCESS-ERROR) 
- If administrative access is denied by the source role for that source, gen- 
erate an event. 
(SW-ERROR: SW-ACCESS-DENIED) 
- Obtain information on what software is available from the source. If the 
information cannot be retrieved, or if an problem occurs while processing it, 
generate an event. 
(SW-ERROR: SW-SOURCEoACCESSSERROR) 
- If the source is a serial medium, and the media-sequence-number is not 1, 
generate an event. 
(SW-ERROR: SW-SOURCE-NOT-FIRST-MEDLA) 
NOTE: Only the first medium has the catalog information on it. 
4.1.7.1.4 Software Selections 
Software selections can be specified on the command line or in an input file using 
the syntax in 4.1.4.1. 
4.1.7.2 Analysis Phase 
This subclause summarizes the common operations and events in the analysis 
phase. The analysis phase occurs before the execution phase, and involves execut- 
ing checks to determine whether or not the execution should be attempted. 
When the analysis phase begins, generate an event. 
(SW-NOTE: SW-ANALYSISBEGINS) 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
To begin the analysis phase, the management role (the host on which the utility 
was invoked) communicates the selection information to each target in the target 
list. The target role accesses the source (for s w i n s t a l l  or swcopy) or target 
(for other utilities) to get the product catalog information for the software selec- 
tions. The product catalog information includes control script information in the 
controlfiles attribute of filesets within each product. 
- An implementation may generate any of the following events, if they are 
applicable to that implementation, when attempting the analysis or execu- 
tion phase. 
(SW-ERROR: SW-AGENT-INITIALIZATION-FAILED) 
(SW-ERROR: SW-ILLEGAL-STATE-TRANSITION) 
(SW-ERROR: SW-BAD-SESSION-CONTEXT) 
- If the target role cannot access the source, generate an event. 
(SW-ERROR: SW-SOURCEoACCESSSERROR) 
- If an implementation supports access control for particular operations for 
particular software objects, and if access is denied for any software object, 
generate an event. 
(SW-ERROR: SW-ACCESS-DENIED) 
- If a fileset has an error for which there is not a more specific event defined, 
generate the generic event. 
(SW-ERROR: SW-FILESET-ERROR) 
- If a fileset has a warning for which there is not a more specific event 
defined, generate the generic event. 
(SW-WARNING: SW-FILESET-WARNING) 
- An implementation may generate the following events as applicable to the 
error handling procedures for that implementation: 
(SW-NOTE: SW-SKIl?PEDoPRODUCTTERROR) 
(SW-NOTE: SW-SKIl?PEDoGLOBALALERROR) 
(SW-WARNING: SW-FILE-IS-READ-ONLY) 
See each utility section for the analysis operations specific to each utility. When 
the analysis phase ends, generate an event. 
(SW-NOTE: SW-ANALYSIS-ENDS) 
4.1.7.3 Execution Phase 
This subclause summarizes the common operations and events in the execution 
phase. 
When the execution phase begins, generate an event. 
(SW-NOTE: SW-EXECUTION-BEGINS) 
The execution phase proceeds through the steps defined for each utility. The fol- 
lowing events are common to all utilities: 
- When the execution phase executes a script, generate an event. 
(SW-NOTE: SW-CONTROL-SCRIPT-BEGINS) 
- When the execution phase begins the key operation on a fileset (such as 
loading or removing), generate an event. 
(SW-NOTE: SW-FILESET-BEGINS) 
4.1 Common Definitions for Utilities 
87 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
- When the execution phase begins the key operation on a file (such as load- 
ing or removing), generate an event. 
(SW-NOTE: SW-FILEBEGINS) 
- If at any time there is an error rebuilding any catalog files, generate an 
event. 
(SW-ERROR: SW-DATABASE-UPDATE-ERROR) 
- If a fileset has an error for which there is not a more specific event defined, 
generate the generic event. 
(SW-ERROR: SW-FILESETERROR) 
- If a fileset has a warning for which there is not a more specific event 
defined, generate the generic event. 
(SW-WARNING: SW-FILESET-WARNING) 
- For s w i n s t a l l  and swcopy from a distribution that spans multiple 
media, an implementation may generate the following events to convey 
needed media change information. An implementation may, but need not, 
provide such support for other utilities. 
(SW-ERROR: SW-WRONG<sW_ERRoR:sW_WRoNG_MEDIA_SET)MEDIAIASET) 
(SW-NOTE: SW-NEED-MEDIA-CHANGE) 
(SW-NOTE: SW-CURRENT-MEDIA) 
- An implementation may generate the following events for software that will 
not be executed due to analysis results for that software. 
(SW-NOTE: SW-SELECTION-SKIPPED-IN-ANALYSIS) 
(SW-ERROR: SW-SELECTION-NOT-ANALYZED) 
See each utility section for the execution operations specific to each utility. When 
the execution phase completes, generate an event. 
(SW-NOTE: SW-EXECUTION-ENDS) 
4.1.7.3.1 Fileset State Transitions 
A conforming implementation shall maintain the state attribute of each fileset to 
identify the condition and validity of that package. A conforming implementation 
shall use these and only these states as valid values of the fileset.state attribute. 
configured 
Indicates the fileset in an installed-software object has 
been configured. 
This state applies to filesets in installed-software 
objects. 
i n s t a l l e d  
Indicates that the specified fileset has been installed 
successfully. 
corrupt 
Indicates that the most recent attempt to handle the 
fileset was not successful and any recovery actions that 
were attempted were similarly unsuccessful. 
SoRware can transition from this state via the swin- 
s t a l l ,  swcopy, or swremove utilities. 
Other 
implementation-defined methods may also exist for 
transitioning from this state. 
88 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
This state applies to filesets in distributions and 
installed-software objects. 
removed 
This state indicates that the files for the fileset has been 
removed but the information remains. 
The default behavior when removing software with 
swremove is to also remove its information (metadata) 
from the catalog. An implementation may define a 
means for removing software, while maintaining the 
catalog information. The catalog information can be 
separately removed with the swmodi f y utility. 
This state applies to filesets in distributions and 
installedsoftware objects. 
available 
Indicates the fileset is present in the distribution and 
may be operated on (copied, installed, etc.) using the 
appropriate utilities. 
This state applies to filesets in a distribution. 
t r a n s i e n t  
Indicates that the fileset is currently being acted upon 
by one of the utilities that modify software files, thus 
the state of the software is not well defined. 
This state should be replaced by another before the util- 
ity completes. The presence of this state in the 
software-collection when no utility is running indicates 
that a utility was previously interrupted (power failure, 
kill, etc.) and was not able to record a final state indica- 
tion into the software-collection catalog. In such case, 
the implementation-defined recovery procedures can be 
used to restore the product to a another state. 
This state applies to filesets in distributions and 
installed-software objects. 
4.1.8 Exit Status 
The utility shall return one of the following exit codes: 
Table 4-8 - Return Codes 
1 Return Code I 
Definition 
The utility was successful on all targets 
The utility failed on all targets 
The utility failed on some targets 
The exit status for the swpackage utility is different since it is not a distributed 
1681 
utility. 
4.1 Common Definitions for Utilities 

ISOIIEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
4.1.9 Consequences of Errors 
Utilities can operate on multiple software objects contained in multiple targets. 
Whether an error impacts a particular software object, all software objects in the 
target, or all targets, is implementation defined. One exception to this is the 
minimum error recovery procedure described in 4.5.7.3.8 that describes fileset 
level recovery during install. 
4.1.9.1 Error Conditions 
The conditions leading to errors are described in 4.1.6.2 and 4.1.7. 
4.2 swask - 
Ask for user responses 
4.2.1 Synopsis 
swask 1-c catalog] 1-f file] [-s source] [- t targetfile] [-x option=value] 
[ -X optionsfilel [software~selections 
1 [@ targets] 
4.2.2 Description 
The swask utility runs the interactive software request scripts for the software 
objects selected. These scripts store the responses to the response files for later 
use by the swinstall and swconf ig utilities. 
The swinstall and swconfig can also run the interactive request scripts 
directly. 
4.2.3 Options 
The swask utility supports the following options. Where there is no description, 
the description in 4.1 applies. 
- c  catalog 
Specifies the pathname to an exported catalog structure, below which 
the response files created by the request scripts are stored for 
later use. 
If the - c  catalog option is omitted, the utility shall use the source 
catalog, <distribution.path>/catalog, as the directory in which to 
store the response files. Hence, these response files will be the 
ones available for use by the control scripts executed by swinstall. 
-f file 
1712 
-s source 
4 SoRware Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
- t targetfile 
-x option=value 
-x options file 
4.2.4 Operands 
The swask utility supports the software-selections operand described in 4.1. 
Specifymg values for the targets operand does not imply operations on the target 
role. The values are simply written as a list of targets for the targets option in the 
file made available to the request script via the SW-SESSION-OPTIONS 
environment variable. See 4.1.6.1. 
4.2.5 External Influences 
See 4.1 for descriptions of external influences common to all utilities. 
4.2.5.1 Extended Options 
The swask utility supports the following extended options. The description in 4.1 
applies. 
autoselect-dependencies =true 
distribution-source-directory =implementation-defined-value 
distribution-sourceserial =implementation-defined-value 
logfile =implementation-defined-value 
loglevel = 1 
software 
verbose = 1 
4.2.6 External Effects 
See 4.1. 
4.2.7 Extended Description 
See 4.1 for general information. There are two phases in the swask utility, as fol- 
lows: 
(1) Selection phase 
(2) Execution phase 
4.2 swask - 
Ask for user responses 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
4.2.7.1 Selection Phase 
The software selections apply to the software available from the distribution 
source if the -s option was specified. Otherwise, the software selections apply to 
software that has been already installed on the targets. Each specified selection is 
added to the selection list after it passes the following checks: 
- If the -s option is specified and the selection is not available from the 
source, generate an event. If the -s option is not specified and the selection 
is not available from the target, generate an event. 
(SW-ERROR: SW-SELECTION-NOT-FOUND) 
- If a unique version can not be identified, generate an event. 
(SW-ERROR: SW-SELECTION-NOT-FOUND-AMBIG) 
Add any dependencies to the selection list if autoselect-dependencies =true. 
4.2.7.2 Execution Phase 
For each selected software that has a request control script: 
- If it does not already exist, build the necessary control directories of the 
exported catalog structure to hold the response file for that software 
object. 
NOTE: If there are multiple product versions selected, they shall have separate control 
directories as specified in the sohare packaging layout. Update the global INDEX in the 
exported catalog structure so the appropriate version can be identified later. 
- Set the value of the SW-CONTROL-DIRECTORY environment variable 
to the directory below which the request script writes the response file. 
It may be set to the control directory where the response file will eventu- 
ally be held, or it may be set to another, temporary, directory. 
If a response file can be found from one of the following sources, searched in 
the order specified, then the implementation shall ensure that the response 
file 
is 
contained 
within 
the 
directory 
pointed 
to 
by 
SW-CONTROL-DIRECTORY. The means for doing this (e.g., copy, link, 
syrnlink) is undefined. 
(1) If -c catalog was specified, any response file already existing below 
that catalog 
(2) If -s was not specified, any response file from the catalog of the tar- 
get or targets specified 
(3) If -s was specified, any response file already existing in the source 
catalog 
If ask=true, execute the request script. If ask=as-needed, execute the 
request script only if a response file does not already exist in the control 
directory. The request script shall write a single response file in the 
control directory defined by the supplied environment variable 
SW~CONTROL~DIRECTORY. 
NOTE: The swinstall and swconf ig utilities will distribute the response file to the 
targets for use by that targets control scripts. 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
- If a request script returns an error and enforcescripts =true, generate 
an event and invoke the implementation-defined error handling pro- 
cedures. 
(SW-ERROR: SW-REQUEST-ERROR) 
- If a request script returns an error and enforce-scripts=false, gen- 
erate an event. 
(SW-WARNING: SW-REQUEST-ERROR) 
- If a request script returns a warning, generate an event. 
(SW-WARNING: SW-REQUEST-WARNING) 
4.2.8 Exit Status 
See 4.1. 
4.2.9 Consequences of Errors 
See 4.1. 
4.3 swconf i g  - Configure software 
4.3.1 Synopsis 
swconfig [-PI 1-ul [-c catalog] 1-f file] [-t targetfile] [-x option=value] 
I 
-X optionsfilel [software-selections I [@ targets 1 
4.3.2 Description 
The swconf i g  command configures, unconfigures, and reconfigures installed 
software on the target hosts specified on the command line for execution on those 
hosts. 
Configuration primarily involves executing vendor-supplied con£ igure and 
unconfigure scripts. These scripts configure or unconfigure the installed 
software. They are only executed on the target hosts that are intended to actually 
run the software. Software can be configured more than once by rerunning the 
con£ igure scripts. 
Configuration can also be done as part of the swinstall and swremove utilities. 
4.3.3 Options 
The swconf i g  utility supports the following options. Where there is no descrip- 
tion, the description in 4.1 applies. 
4.3 swconf ig - 
Configure software 

ISOAEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE SYSTEM ADMINISTRATION - 
-c catalog 
If this option is specified, then use the exported catalog structure at 
this path as the source of the response files. 
If ask=true or ask=as-needed, the control directories in the exported 
catalog structure are used for both the eventual source of the 
response files, and the control directory where the request 
scripts are executed in order to create any needed response files. 
-f file 
-P 
- t targetfile 
- u 
Undo configuration 
This option tells the swconf i g  utility to unconfigure the software, 
instead of configuring it. 
-x option=value 
-X optionsfile 
4.3.4 Operands 
The swconf i g  utility supports the software-selections and targets operands 
described in 4.1. 
4.3.5 External Influences 
See 4.1 for descriptions of external influences common to all utilities. 
4.3.5.1 Extended Options 
The swconf i g  utility supports the following extended options. The description in 
4.1 applies. 
allow-incompatible= false 
allow~multiple~versions 
= false 
ask = false 
autoselect-dependencies =true 
autoselect-dependents =false 
enforce-dependencies =true 
installed~sof?ware~catalog 
=implementation-defined-value 
logfile =implementation-de fined-value 
loglevel = 1 
reconfigure =false 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
select-local =true 
software 
targets 
verbose = 1 
4.3.6 External Effects 
See 4.1. 
4.3.7 Extended Description 
See 4.1 for general information. There are three key phases in the swconf i g  
utility: 
(1) Selection phase 
(2) Analysis phase 
(3) Execution phase 
4.3.7.1 Selection Phase 
Software selections apply to the software installed on the target. Each specified 
selection is added to the selection list after it passes the following checks: 
- If the selection is not found, generate an event. 
(SW-WARNING: SW-SELECTION~NOTTFOUND) 
- If the selection is not found at that product location but it does exist in 
another location, generate an event. 
(SW-WARNING: SW~SELECTION~NOT~FOUND~RELATED) 
Add any dependencies to the selection list if autoselect-dependencies =true and the 
task is configure. 
Add any dependents to the selection list if the 
autoselect-dependents =true and the task is unconfigure. 
If asktrue then execute the request scripts for the selected software as 
described in the swask utility. See 4.2.7. 
4.3.7.2 Analysis Phase 
The following checks are made: 
- If configuring, check for compatibility of selections and, if the software is 
not compatible, generate an event as follows. See 4.1.4.1.2. 
- If allow-incompatible=true, generate an event. 
(SW-WARNING: SW-NOT-COMPATIBLE) 
- If allow-incompatible=false, generate an event. 
(SW-ERROR: SW-NOT-COMPATIBLE) 
- If configuring and the state is corrupt or transient, generate an event. 
(SW-ERROR: SW-SELECTION-IS-CORRUPT) 
4.3 swconf ig - 
Configure software 
95 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
- If the state is already configured when configuring, or not configured when 
unconfiguring, generate an event. This event is independent of whether the 
software will be reconfigured or not, which in turn is controlled by the 
reconfigure option. 
(SW-NOTE: SW-ALREADY_cONFIGURED) 
- If configuring this software will create a new configured version of a fileset 
(see 2.2.2.109,) then generate an event as follows. 
- If allow~multiple~versions 
=true, generate an event. 
(SW-WARNING: SW-NEW-MULTIPLE-VERSION) 
- If allow~multiple~versions 
=false, generate an event. 
(SW-ERROR: SW-NEW-MULTIPLE-VERSION) 
- If the dependencies are not in the configured state and have not been 
autoselected to be configured, generate an event as follows. 
- If enforce-dependencies =false, generate an event. 
(SW-WARNING: SW-DEPENDENCY-NOT-MET) 
- If enforce-dependencies =true, generate an event. 
(SW-ERROR: SW-DEPENDENCY-NOT-MET) 
4.3.7.3 Execution Phase 
The sequential relationship between the configure operations is shown in the fol- 
lowing list. Products are ordered by prerequisite dependencies if any. Fileset 
operations are also ordered by any prerequisites. 
(1) Configure each product. 
(a) Run configure script for the product. 
(b) Configure each fileset in the product. 
[I] Run the configure script for the fileset. 
[2] Update the result of the script (control-file). Update the state 
of the fileset to configured in the database for the 
installed-software object. 
If there is no con£ igure script for a fileset the state of the fileset is still changed 
as specified above. 
4.3.7.3.1 Unconfigure Operations 
For unconfigure, the order of the products and filesets within the products is the 
reverse of the order of products and filesets for configure. The operations are: 
(1) Unconfigure each product. 
(a) Unconfigure each fileset in the product. 
[I] Run the unconf igure script for the fileset. 
[2] Update the result of the script. Update the state of the fileset 
in the product to installed in the database for the 
installed-software object. 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
(b) Run the unconf igure script for the product. 
If there is no unconfigure script for a fileset the state of the fileset is still 
changed as specified above. 
4.3.7.3.2 Executing con£ igure Scripts 
In this operation, swconf ig executes vendor-supplied configure or unconf ig- 
ure scripts. 
The con£ igure scripts shall not be interactive; however, they may access the 
response file generated by an interactive request script. If any response file 
has been generated, it will exist in the directory pointed to by 
SW-CONTROL-DIRECTORY. 
- If a con£ igure script returns an error and enforce-scripts =true, generate 
an event and invoke the implementation-defined error handling procedures. 
(SW-ERROR: SW-CONFIGURE_ERROR) 
- If a configure script returns an error and enforce-scripts =false, generate 
an event. 
(SW-WARNING: SW~CONFIGURE~ERROR) 
- If the conf igure script returns a warning, generate an event. 
(SW-WARNING: SW-CONFIGURE-WARNING) 
- If a configure script has a return code of 3, generate an event, and 
exclude the fileset (or all filesets within the product for a product level 
script) from any state change between con£ igured and installed). 
(SW-NOTE: SW-CONFIGURE-EXCLUDE) 
4.3.8 Exit Status 
See 4.1. 
4.3.9 Consequences of Errors 
See 4.1. 
4.4 swcopy - 
Copy distribution 
4.4.1 Synopsis 
SWCOPY [-PI [ - £ file1 [ -s source I [ - t targetfile] [ -x option=value] 
[ -X optionsfilel [software-selections I [@ targets 1 
4.4 swcopy - 
Copy distribution 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
4.4.2 Description 
The swcopy utility copies or merges software from any source distribution to a 
target distribution on the local host, or to the targets specified on the command 
line. The distribution can then be accessed by the swinstall utility as a source. 
4.4.3 Options 
The swcopy utility supports the following options. Where there is no description, 
the description in 4.1 applies. 
-f file 
- P 
-s source 
- t targetfile 
-x option=value 
-X optionsfile 
4.4.4 Operands 
The swcopy utility supports the software~elections and targets operands 
described in 4.1. 
Whether data on an existing target distribution in serial format is overwritten or 
merged is implementation defined. 
4.4.5 External Influences 
See 4.1 for descriptions of external influences common to all utilities. 
4.4.5.1 Extended Options 
The swcopy utility supports the following extended options. The description in 
4.1 applies. 
autoselectdependencies =as-needed 
compressJiles =false 
compression-type =implementation-defined-value 
distribution~ource-directory =implementation-defined-value 
distribution-target-directory =implementation-defined-value 
enforce-dependencies =true 
enforce-dsa =true 
logfile =implementationde fined-value 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOlIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
loglevel = 1 
recopy =false 
select-local =true 
software 
targets 
uncompress_files = false 
verbose = 1 
4.4.6 External Effects 
See 4.1. 
4.4.7 Extended Description 
See 4.1 for general information. The following are the three key phases in the 
copy utility: 
(1) Selection phase 
(2) Analysis phase 
(3) Execution phase 
4.4.7.1 Selection Phase 
If a software selection has dependency specifications on other software and 
autoselect-dependencies =true, this software shall be automatically selected using 
the method described in 4.1.4.1. The resulting selection shall be unambiguous to 
be effective. This automatically selected software is then copied along with the 
rest of the selected software. If autoselect-dependencies =if-needed, then 
automatically selected software is only copied if the dependency is not already 
met. 
The swcopy utility supports corequisite and prerequisite dependencies for 
autoselection, but treats them equally (no ordering considerations like swin- 
s tall). The swcopy utility ignores exrequisites. 
For swcopy each selection added to the selected software list shall satisfy the fol- 
lowing validation checks. If any of these checks result in an error, the selection 
shall not be added to the list. 
- If the selection is not available from the source, generate an event. 
(SW-ERROR: SW-SELECTION-NOT-FOUND) 
- If a unique version can not be identified, generate an event. 
(SW-ERROR: SW-SELECTION-NOT-FOUND-AMBIG) 
No compatibility filtering is done for swcopy. 
4.4 swcopy - 
Copy distribution 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
4.4.7.2 Analysis Phase 
The target role uses the file size information obtained from the source to deter- 
mine whether or not the copy utility proceeds on the given target. If any target 
fails any of the analysis operations, the software attempted to be copied is deter- 
mined by the implementation-defined error handling procedures. 
The target role checks the following requirements: 
- If the target distribution does not exist on a host, create the path to the tar- 
get with default attributes and generate an event. 
(SW-NOTE: SW-SOC-CREATED) 
- Check that selected filesets are not the same version as already available. 
If they are the same version, generate an event as follows. 
- If recopy=false, note that these filesets will be skipped by generating an 
event, 
(SW-NOTE: SW-SAME-REVISION-SKIPPED) 
- If recopy=true, note that they will be recopied by generating an event. 
(SW-NOTE: SW-SAME-REVISIONJNSTALLED) 
- Verify that the needed dependencies of the filesets are met. If the needed 
dependencies are not met, generate an event as follows. 
- If enforce-dependencies =true, generate an event. 
(SW-ERROR: SW-DEPENDENCYoNOTTMET) 
- If enforce-dependencies =false, generate an event. 
(SW-WARNING: SW-DEPENDENCY-NOT-MET) 
- Check that there is enough free disk space on the target file system to copy 
the selected products. 
- If there is not enough disk space and enforce-dsa=true, generate an 
event. 
(SW-ERROR: SW-DSA-OVER-LIMIT) 
- If there is not enough disk space and enforce-dsa=false, generate an 
event. 
(SW-WARNING: SW-DSA-OVER-LIMIT) 
How disk space analysis is implemented is undefined. However, an implementa- 
tion shall account at least for the sizes of the files and control-files being copied. 
4.4.7.3 Execution Phase 
As the result of a swcopy, products and bundles, if specified, are copied to the tar- 
get, which is a distribution software object. 
When creating serial distributions, an implementation shall support one or both of 
the POSM.1{2] extended cpio or extended tar archive formats. Whether an 
implementation supports writing both archive formats or only one, and which of 
the formats is supported if only one, is implementation defined. 
The relationship between the fileset loading and state transitions for swcopy is 
shown in the following list. 
100 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
(1) Copy each product. 
(a) Create the distribution catalog information for the product and its 
contained subproducts. 
(b) Copy each fileset in the product. 
[I1 Create the distribution catalog information for the fileset, set- 
ting the state to transient. 
[2] Load the files for the fileset. 
[3] Update the state of the fileset to available. 
(2) Copy each bundle. 
(a) Create the distribution catalog information for the bundle. 
4.4.7.3.1 File Loading 
In this step, swcopy copies the files from the source onto the target. 
If a file load fails for any other reason such as a lost connection to the remote 
source or tape eject, then the fileset load fails. The following are the errors that 
can occur during the file loading step: 
- If an error or warning occurs while loading a file onto a target, an event is 
generated and, for errors, the implementation-defined error handling pro- 
cedures invoked. 
- Whether remote files are loaded is implementation defined. If the file is on 
a remote file system, generate an event as follows. 
- If the file was loaded, generate an event. 
(SW-NOTE: SW-FILE-IS-REMOTE) 
- If the file was not loaded, generate an event. 
(SW-WARNING: SW-FILE-IS-REMOTE) 
- If the error was a source access problem, the user may attempt to correct 
the problem and start over with the fileset that had the failure. 
(SW-ERROR: SW-SOURCE-ACCESS-ERROR) 
4.4.7.3.2 Compression 
If compressfiles=true is specified, then the files shall be compressed as follows in 
copying to the target distribution: 
- INDEX and INFO files shall not be compressed. 
- All files that have the compressionstate attribute undefined or its value set 
to uncompressed shall be compressed. If the file cannot be compressed, 
generate an event. 
(SW-ERROR: SW-COMPRESSION-FAILURE) 
- All files that have the value of the compressionstate attribute set to 
not-compressible shall be copied as is. 
- A source file that is already compressed, and has the value of its 
compression-type attribute equal to the value of the compression-type 
extended option, shall be copied as is. 
4.4 swcopy - 
Copy distribution 
101 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
- If a source file is already compressed, and the value of its compression-type 
attribute is different than the value of the compression-type extended 
option, the behavior is undefined. Unless the implementation can success- 
fully uncompress the file and then compress it with the correct type, gen- 
erate an event. 
(SW-ERROR: SW-COMPRESSION-FAILURE) 
If uncompressfiles=true, the files shall be uncompressed as follows in copying to 
the target distribution: 
- All files with a compression~tate attribute value of compressed shall be 
uncompressed as part of the copy. If the file cannot be uncompressed, gen- 
erate an event. 
(SW-ERROR: SW-COMPRESSION-FAILURE) 
- All other files shall be copied as is. 
If neither compress_jiles=true nor uncompressfiles=true, then the files shall be 
copied as is. Behavior when both are set to true is undefined. 
4.4.7.3.3 Copying Into Existing Products 
When a fileset is copied into an existing target product, the attributes of this exist- 
ing product may be affected as follows. If an attribute exists in the product from 
which the fileset came, the value of this attribute is set in the target product. Any 
attributes in the target product not found in the product from which the fileset 
came are left unaltered. It is possible for attributes to be set multiple times as 
'filesets from different products are copied into the target product. 
4.4.8 Exit Status 
See 4.1. 
4.4.9 Consequences of Errors 
See 4.1. 
2113 4.5 swinstall - Install software 
2114 4.5.1 Synopsis 
2115 
s w i n s t a l l  [-PI [-rl [-c catalog] [-f file] [-s source] [-t targetfile] 
2116 
1-x option=valuel [ -X optionsfiles] [software-selections I [@ tar- 
2117 
gets I 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
4.5.2 Description 
The swinstall utility installs software from a distribution to installed-software 
objects on the targets. It may also configure the software. The software is not 
necessarily available for use until after it has been configured. 
4.5.3 Options 
The swinstall utility supports the following options. Where there is no descrip- 
tion, the description in 4.1 applies. 
-c catalog 
If this option is specified, then use the exported catalog structure at 
this path as the source of the response files. 
If ask=true or ask=as-needed, the control directories in the exported 
catalog structure are used for both the eventual source of the 
response files, and the control directory where the the request 
scripts are executed in order to create any needed response files. 
-f file 
- P 
- r 
-s source 
- t targetfile 
-x option=value 
-X optionsfile 
4.5.4 Operands 
The swinstall utility supports the software-selections and targets operands 
described in 4.1. 
The utility supports software selection operands with [l=location] part of the 
syntax, designating the product.location 
directory that 
replaces 
the 
product.directory attribute when installing the software. 
4.5.5 External Influences 
See 4.1 for descriptions of external influences common to all utilities. 
4.5.5.1 Extended Options 
The swinstall utility supports the following extended options. The description 
in 4.1 applies. 
allow-downdate=false 
4.5 swinstall - 
Install software 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
allow~incompatzble=false 
ask = false 
autoreboot =false 
autorecover =false 
autoselect-dependencies =as-needed 
defer-con figure = false 
distribution-source-directory =implementation-defined-value 
enforce-dependencies =true 
enforce-locatable =true 
enforce-scripts =true 
enforce-dsa =true 
installed~software~catalog 
=implementation-defined-value 
logfile =implementation-de fined-value 
loglevel =l 
reinstall = false 
select-local =true 
software 
targets 
verbose = 1 
4.5.6 External Effects 
See 4.1. 
4.5.7 Extended Description 
See 4.1. for general information. The following are the three key phases in the 
swins t a l l  utility: 
(1) Selection phase 
( 2 )  Analysis phase 
(3) Execution phase 
4.5.7.1 Selection Phase 
Multiple versions of a software product can exist from the source, distinguished by 
their respective "version distinguishing attributes" (revision, architecture, and 
vendor-tag). If the method described in 4.1.4.1 results in an ambiguous selection, 
the following method is used to identify a single version: 
104 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOflEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
- If allow-incompatible=false, the target uname attributes are used to filter 
the available products to only those that are compatible with the target sys- 
tems, then the version with the highest possible product.reuision is chosen 
from this filtered list. If this filtering and selection of a highest revision 
does not result in a unique version, then no version is selected. If 
allow-incompatible=true, then only the highest revision is used to try to 
determine a unique version. In either case, if there is still an ambiguous 
selection, no version is selected. See 4.1.4.1.2. 
If a software selection has dependency specifications on other software, and the 
option autoselect-dependencies =true, the dependency software is attempted to be 
automatically selected using the same method to determine a single version. This 
automatically selected software is then installed along with the rest of the selected 
software. If autoselect-dependencies =as-needed , then dependency software is 
attempted to be automatically selected and installed only if the dependency is not 
already met on the target. 
If a fileset has an exrequisite on another software object, and that other software 
object is part of the specified software selection, either explicitly or as part of 
another selection, then the fileset is excluded. If two filesets have exrequisites on 
each other, then the behavior is implementation defined. 
For swinstall each selection added to the selected software list shall satisfy the 
following validation checks. If any of these checks result in an event with a status 
of SW-ERROR, the selection is not added to the list and the implementation- 
defined handling procedure can be invoked. 
- If the selection is not available from the source, generate an event. 
(SW-ERROR: SW-SELECTION~NOTTFOUND) 
- If a unique version can not be identified, generate an event. 
(SW-ERROR: SW-SELECTION-NOT-FOUND-AMBIG) 
- If an attempt is made to select more than one version of a given product 
targeted for the same location, generate an event. 
(SW-ERROR: SW-EXISTING-MULTIPLE-VERSION) 
- If allow-incompatible=true, then for each target where the software 
selected is incompatible with that target (see 4.1.4.1.2), generate an event. 
(SW-WARNING: SW-NOTCOMPATIBLE) 
- If allow-incompatible=false, then for each target where the software 
selected is incompatible with that target (see 4.1.4.1.2), generate an event. 
The implementation-defined error handling procedure shall be invoked. 
(SW-ERROR: SW-NOT-COMPATIBLE) 
- Check if a non-default product location has been specified and, if so, gen- 
erate an event as follows. 
- If enforce-locatable =true, generate an event. 
(SW-ERROR: SW-NOT-LOCATABLE) 
- If enforce-locatable =false, generate an event. 
(SW-WARNING: SW-NOT-LOCATABLE) 
- If the software is excluded, generate an event. 
(SW-NOTE: SW-EXREQUISITE-EXCLUDE) 
4.5 swinstall- Install sohare 

ISOlIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX 
SYSTEM ADMINISTRATION - 
If ask=true, then execute the software request scripts for the selected software 
as described in the swask utility. See 4.2.7. 
4.5.7.2 Analysis Phase 
The target role uses the file size information and checkinstall scripts obtained 
from the source to determine whether or not the install utility proceeds on the 
given target. When failures occurs in the disk space analysis and checkins tall 
scripts, it is implementation defined whether or not to proceed with a partial list 
of software selections. 
If any target generates an event with a status of SW-ERROR during any of the 
analysis operations, the software attempted to be installed is determined by the 
implementation-defined error handling procedures. 
The target role checks the following requirements: 
- If the target installed-software object does not exist on a host, create the 
path to the target with default attributes, and generate an event. 
(SW-NOTE: SW-SOC-CREATED) 
- Check that selected filesets are not the same version as already installed. 
If any of the selected filesets have already been installed with the same ver- 
sion, generate an event as follows. 
- If reinstall =false, note that they will be skipped by generating an event. 
(SW-NOTE: SW-SAME-REVISION-SKIPPED) 
- If reinstall=true, note that they will be reinstalled by generating an 
event. 
(SW-NOTE: SW-SAMEREVISION-INSTALLED) 
- Check that selected filesets are not lower versions of the fileset already 
installed on the host. If the any of the selected filesets are already installed 
with a higher version, generate an event as follows. 
- If allow-downdate=false, generate an event. 
(SW-ERROR: SW-HIGHER-REVISPON-INSTALLED) 
- If allow-downdate=true, generate an event. 
(SW-WARNING: SW-HIGHER-REVISION-INSTALLED) 
- Execute vendor-supplied checkinstall scripts to perform product- 
specific checks of the target. 
- If a checkins tall script returns an error, and enforce-scripts =true, 
generate an event and invoke the implementation-defined error han- 
dling procedure. 
(SW-ERROR: SW-CHECK-SCRIPT-ERROR) 
- If a checkinstall script returns an error and enforcescripts =false, 
generate an event. 
(SW-WARNING: SW-CHECK-SCRIPT-ERROR) 
- If a checkins ta 11 script returns a warning, generate an event. 
(SW-WARNING: SW-CHECK-SCRIPT-WARNING) 
106 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
- If a checkinstall script has a return code of 3, generate an event and 
unselect the fileset (or all filesets in the product for a product level 
script). 
(SW-NOTE: SW-CHECK-SCRIPT-EXCLUDE) 
- Verify that the needed dependencies of the filesets are met. If any of the 
dependencies are not met, generate an event as follows. 
- If enforce-dependencies =true, generate an event. 
(SW-ERROR: SW-DEPENDENCY-NOT-MET) 
- If enforce-dependencies =false, generate an event. 
(SW-WARNING: SW-DEPENDENCY-NOT-MET) 
- Check that there is enough free disk space on the target file system to 
install the selected products. 
- If there is not enough disk space and enforce-dsa=true, generate an 
event. 
(SW-ERROR: SW-DSA-OVER-LIMIT) 
- If there is not enough disk space and enforce-dsa=false, generate an 
event. 
(SW-WARNING: SW-DSA-OVER-LIMIT) 
- An implementation may generate an event, as follows, if disk space analysis 
encountered any problems that prevented the analysis. 
- If enforce-dsa =true, generate an event. 
(SW-ERROR: SW-DSA-FAILED-TO-RUN) 
- If enforce-dsa =false, generate an event. 
(SW-WARNING: SW-DSA-FAILED-TO-RUN) 
How disk space analysis is implemented is undefined. However an implementa- 
tion shall account at least for the sizes of the files and control-files being installed, 
the additional sizes from the vendor-supplied space file described in 5.2, and any 
additional space required by the implementation-defined recovery process for sav- 
ing files when autorecover =true. 
4.5.7.3 Execution Phase 
The execution phase is the third part of the installation process, and is entered 
once either the selections have passed the analysis phase with no events with a 
status of SW-ERROR or if permitted by the implementation-defined error handling 
procedures. 
The relationship between the preinstall and postinstall scripts, fileset 
loading, and state transitions for swinstall is shown in the following list. Pro- 
ducts are ordered by prerequisite dependencies if any. Fileset operations are also 
ordered by any prerequisites. 
(1) Install each product. 
(a) Create the installed-software catalog information for the product 
and its contained subproducts. 
4.5 swinstall - 
Install software 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
(b) Run the preinstall script for the product. 
(c) Install each fileset in the product. 
[I] Create the installed-software catalog information for the 
fileset, setting the state to transient. Also update the state 
of any existing fileset that is being updated or downdated to 
transient. 
[2] Run the preins t a1 1 script for the fileset. 
[3] Load the files for the fileset. 
[4] Run the post instal 1 script for the fileset. 
[51 Update the results of the scripts. Update the state of the 
fileset to installed. Also set the state of any existing fileset 
that is being updated or downdated to removed or remove the 
catalog information for that fileset. 
(d) Run the postinstall script for the product. 
(2) Install each bundle. 
(a) Create the installed-software catalog information for the bundle. 
(3) Configure each product in accordance with 4.3.7.3.2. 
Configuration shall be done at this point by the swins tall utility only if 
defer-configure=false, the target directory is /, and no filesets with the 
is-reboot attribute equal to true have been installed. 
(a) Run the con£ igure script for the product. 
(b) Configure each fileset in the product. 
111 Run the con£ igure script for the fileset. 
[2] Update the result of the script. Update the state of the fileset 
to configured in the catalog for the installed-software 
object. 
Configuration shall not be executed by swinstall if the software creates a multi- 
ple version, the target directory is not /, or if the software is incompatible and 
allow-incompatible=false (see 4.1.4.1.2). In these cases, swconf ig may be used. 
If events with a status of SW-ERROR are detected during the execution phase, the 
swinstall utility generates the appropriate event, any log entries, and invokes 
the implementation-defined error handling procedures. For each fileset that 
failed, the installed-software catalog is updated to the state corrupt. 
4.5.7.3.1 File Location 
If an alternate root directory was specified (a value for installed-software.path 
other than /), then the alternate root directory is used as a prefix to the file.path 
attribute to determine the file location in the file system. See 4.1.4.2. 
The file.path shall be modified if the product is locatable and a new 
product.location is specified (using the l=location software specification). The 
product.directory part of the file.path is replaced by the value product.location 
attribute before a file is placed in the target file system. 
108 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOtIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
NOTE: If a product is locatable (has the pr0duct.i~-locatable attribute set to true), all files that 
have the value of product.directory as the initial part of their path shall be installed to a new loca- 
tion if one has been specified. The product.directory attribute is the base directory for the files that 
are locatable within a specific product. 
If a bundle.location is specified (using the 1 = l o c a t i o n  software specification 
when specifymg a bundle), then the bundle.location shall be prefixed to the loca- 
tion specification for each software-spec in the contents of the bundle prior to 
replacement of the product.directory part of the file.path. 
4.5.7.3.2 Preinstall Scripts 
In this step of the execution phase, s w i n s t a l l  executes product and fileset 
p r e i n s t a l l  scripts. 
- If a p r e i n s t a l l  script returns an error and enforce-scripts=true gen- 
erate an event and invoke the implementation-defined error handling pro- 
cedures. 
(SW-ERROR: SW-PRE-SCRIPT-ERROR) 
- If a p r e i n s t a l l  script returns an error and enforcescripts =false, gen- 
erate an event. 
(SW-WARNING: SW-PRE-SCRIPTERROR) 
- If a p r e i n s t a l l  script returns a warning, generate an event. 
(SW-WARNING: SW-PRE-SCRIPT-WARNING) 
Control scripts shall adhere to the specifications in 4.1.6.1. 
4.5.7.3.3 File Loading 
In this step, s w i n s t a l l  loads the files from the source onto the target file system 
according to information obtained from the source distribution. All file types are 
created using the attributes defined for those files in the source distribution. Reg- 
ular files (i.e., those with a file.type of f )  are loaded using the content from the 
source distribution. 
If the source file is a regular file or a directory and its path already exists on the 
target file system as a symbolic link, then the symbolic link is followed and the file 
is stored in the path defined by the symbolic link. 
If the source file is a symbolic link, then the existing path is replaced by symbolic 
link. 
- If there are too many levels of symbolic links, then the file is skipped and 
an event is generated. 
(SW-WARNING: SW-FILE-WARNING) 
NOTE: It is not the intention of this part of ISOLEC 15068 to define symbolic links in a 
manner inconsistent with POSM.1{2]. However, no approved POSM standard currently 
contains symbolic links. This definition is a placeholder until such time as an approved 
standard provides the definition. See (B21). 
The file owner and group names are set to the values specified for the fileowner 
and file-gid attributes for the source file. If the target host does not contain those 
file owner and group names, the file uid and gid shall set to the numeric values 
specified for these attributes for the source file. If no values are specified for these 
attributes, the uid and gid shall be set to the effective uid and gid of the current 
4.5 swinstall - Install software 
109 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
2388 process. See 5.2.13.3. 
2389 
- If the user or group of the file is not defined on the target host, or either of 
these attributes are not defined for the file, generate an event. 
(SW-WARNING: SW-FILE-WARNING) 
If the mode attribute of the file has the set user id on execution (s-ISUID) 
bit set and either the user attribute of the file is not defined on the target 
host or the user attribute is not specified for the file, the corresponding 
mode bit in the file system shall not be set when installing the file and an 
event shall be generated. See 5.6.1.2 of POSM.1 (21. 
(SW-ERROR: SW-FILE-ERROR) 
If the mode attribute of the file has the set group id on execution 
(s-ISGID) bit set and either the group attribute of the file is not defined on 
the target host or the group attribute is not specified for the file, the 
corresponding mode bit in the file system shall not be set when installing 
the file and an event shall be generated. See 5.6.1.2 of POSM.l {2). 
(SW-ERROR: SW-FILE-ERROR) 
The value of the file.mode attribute on the file is set to the value of the file.mode 
attribute for the source file. An exception is that directories that already exist are 
not modified. If no values are specified for this attribute, the mode shall be set to 
the default file creation mode for the current process. 
If there is an existing installed file that matches the values supplied in the distri- 
bution for the path, cksum, date, and size attributes, the file is not reloaded unless 
the user has specified that the fileset is being reinstalled. 
If a file load fails for any other reason such as a lost connection to the remote 
source or tape eject, then the fileset install fails. 
The following are problems that may occur during the file load step: 
- If a problem occurs while loading a file onto a target, an event is generated 
and, for events with a status of SW-ERROR, the implementation-defined 
error handling procedures invoked. If there are too many levels of symbolic 
links, generate an event. 
(SW-ERROR: SW-FILE-ERROR) 
- Whether remote files are installed is implementation defined. If the file is 
on a remote file system, generate an event as follows. 
- If the file was loaded, generate an event. 
(SW-NOTE: SW-FILE-IS-REMOTE) 
- If the file was not loaded, generate an event. 
(SW-WARNING: SW-FILE-IS-REMOTE) 
- If a file can not be updated because it is busy, or. it is a directory, then move 
that file to an implementation-defined location and generate an event. How 
these files are eventually removed is also implementation defined. 
(SW-WARNING: SW-FILE-NOT-REMOVABLE) 
- If the source becomes inaccessible for any reason during the process of load- 
ing files, generate an event. 
(SW-ERROR: SW-SOURCEoACCESSSERROR) 
110 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOnEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
If autorecover=true, then all files that are being updated shall be saved. It is 
implementation defined where these files are saved. The saved files for filesets in 
each product are removed in an implementation-defined manner at some point 
after that product completes the execution phase. 
4.5.7.3.4 Compression 
When installing files, all compressed files shall be uncompressed as follows as part 
of file loading: 
- All files that have the compression-state attribute value of compressed 
shall be uncompressed, according to the value of compression-type attri- 
bute. The way in which this is done is implementation defined. If the file 
cannot be uncompressed, generate an event. 
(SW-ERROR: SW-COMPRESSION-FAILURE) 
4.5.7.3.5 Postinstall Scripts 
In this step, swins tall executes the product and fileset pos tins tall scripts. 
- If a post install script returns an error and enforce-scripts =true, gen- 
erate an event and invoke the implementation-defined error handling pro- 
cedures. 
(SW-ERROR: SW-POST-SCRIPT-ERROR) 
- If a postinstall script returns an error and enforcescripts =false, gen- 
erate an event. 
(SW-WARNING: SW-POST-SCRIPT-ERROR) 
- If a post ins tall script returns a warning, generate an event. 
(SW-WARNING: SW-POST-SCRIPT-WARNING) 
4.5.7.3.6 Kernel Scripts 
Special customization and install steps are executed when processing kernel 
filesets. Kernel filesets are those for which the value of the is-kernel attribute is 
true, causing swinstall to modify the fileset load order and to invoke the post- 
kernel script. Apart from this, swinstall has no special functionality for instal- 
ling kernels. 
The postkernel scripts are those specified by the value of the product.postkerne1 
attribute or by the implementation-defined default. The functions invoked by this 
postkernel script are implementation defined. Examples of use include rebuilding 
the kernel or moving a new default kernel into place. 
The postkernel script shall not be interactive, and shall issue all informative and 
error messages to stdout and stderr, which shall be redirected to the log file. In 
addition, the postkernel script shall provide a standard return value indicating 
success (0, meaning zero), error (I), or warning (2). 
- If the postkernel script had an error, invoke the implementation-defined 
error handling procedures and generate an event. 
(SW-ERROR: SW-POSTKERNEL-ERROR) 
If the postkernel script had a warning, generate an event. 
(SW-WARNING: SW-POSTKERNEL-WARNING) 
4.5 swinstall - 
Install software 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE SYSTEM ADMINISTRATION - 
2471 
The kernel filesets are processed before the rest of the filesets. All products are 
2472 
first processed for their kernel filesets, and then all products are processed for 
2473 
their non-kernel filesets. The ordering of products and filesets, as follows, also 
2474 
adheres to prerequisites, just as normal filesets: 
Install the kernel filesets for each product. 
(a) Create the installed-software catalog information for the product. 
(b) Run the preins tall script for the product. 
(c) Install each kernel fileset in the product. 
[ll Create the installed-software catalog information for the 
fileset, setting the state to transient. 
[21 Run the preinstall script for the kernel fileset. 
[31 Load the files for the kernel fileset. 
141 Run the postinstall script for the kernel fileset. 
[51 Update the results of the scripts. Update the state of the 
fileset to installed. 
(d) Run the postinstall script for the product. 
Perform steps after installing kernel filesets by calling the zero or more 
scripts defined by the product.postkerne1 attributes of each product with 
a kernel fileset and the implementation-defined default postkernel script 
if a product does not define a product.postkerne1 attribute. 
Install the rest of the filesets for each product as described in 4.5.7.3, 
omitting the kernel filesets already installed. 
After all filesets have been installed, the implementation-defined reboot 
procedure is executed on the target host if a fileset with the isreboot 
attribute 
set 
to 
true 
has 
been 
installed 
and 
the 
SW-ROOT-DIRECTORY is /, and autoreboot =true. If rebooting, the 
software is not configured. The products will be configured afier the 
reboot in an implementation-defined manner using the swconfig utility. 
If not rebooting, then configure each product as described in 4.5.7.3, 
(including both kernel and non-kernel filesets). 
2501 
4.5.7.3.7 Rebooting the System 
2502 
If this step is required, the target role executes the implementation-defined reboot 
2503 
procedure after all products have been installed. It is performed only when 
2504 
s o h a r e  is installed that requires a reboot as part of its installation (indicated by 
2505 
the is-reboot fileset attribute). 
2506 
- If the system fails to execute the reboot step, generate an event. 
2507 
(SW-ERROR: SW-CANNOT-INITIATE-REBOOT) 
4 SoRware Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 fE) 
IEEE Std 1387.2-1995 
4.5.7.3.8 Recovery 
Within the execution phase of a particular product (from the product preinstall 
step through the product postinstall step), if any preinstall script, file loading, 
or postinstall script fails for a fileset, that fileset shall be deemed to have 
failed during install. The failure of a product postinstall script shall be con- 
sidered the same as if all fileset post instal 1 scripts had failed. 
If such a failure occurs and autorecover =false, no recovery shall be provided for 
any filesets deemed to have failed during install, and the fileset state attribute of 
those filesets shall be set to corrupt. No further attempt shall be made to install 
such filesets during the current invocation of swinstall. Install can proceed on 
other filesets that did not fail during install. 
If an install failure occurs and autorecover =true, at least the following minimal 
error recovery shall be provided at the fileset level. Additional recovery behavior, 
such as recovering the whole product or all products, is implementation defined. 
Additionally, if enforce-dependencies=true, implementations should take into 
account other filesets in the product that have a dependency on that failed fileset. 
The recovery is initiated at the point of failure, recovering the affected filesets, 
then continuing from the point of failure to the remaining filesets. 
Recovery involves running unpos t ins tall scripts, restoring files, and running 
unpreinstall scripts. The relationship between these steps for each product is 
shown in the following list: 
NOTE: In general, the order used when autorecover=true is the same as that normally used for 
successful steps. The reverse order is used when recovery steps are being executed. 
(1) Create the installed-software catalog information for the product. 
(2) Run the preinstall script for the product. 
If the preinstall script fails, or if all filesets have failed, run the pro- 
duct unpreins tall script, remove the catalog information for the pro- 
duct, and go on to the next product. 
(3) Install each fileset in the product. 
(a) Create the installed-software catalog information for the fileset, set- 
ting the state of it and the fileset being updated to transient. 
(b) Run the preinstall script for the fileset. 
If the preinstall script fails, run the unpreinstall script for 
the fileset, remove the catalog information for the fileset, restore the 
state of the fileset being updated, and go on to the next fileset. 
(c) Load the files for the fileset. 
Before loading any files, save any existing files that will be ovenvrit- 
ten by a file being loaded from the fileset, and then load the files for 
the fileset. If the fileset loading fails, restore the saved files for the 
fileset, delete all loaded files for which there is no saved file, and 
perform the previously described recovery step for this fileset. 
(d) Run the post ins tall script for the fileset. 
4.5 swinstall - 
Install software 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
If the postinstall script fails, run the unpostinstall script 
for the fileset, and perform steps (3b) and (3c) for this fileset. 
2551 
(e) Update the results of the scripts. Update the state of the fileset to 
2552 
installed. 
(4) Run the product post ins tall script. 
If the product postinstall script fails, run the product unpostin- 
stall script, and perform each of the previously described recovery 
steps for each fileset. 
(5) This is the first point in the process where the saved files may be 
removed. Remove the catalog information for filesets that were updated, 
or set the state of those filesets to removed. 
4.5.8 Exit Status 
See 4.1. 
4.5.9 Consequences of Errors 
See 4.1. 
4.6 swlist - 
List software catalog 
4.6.1 Synopsis 
swlist [ -d I 1 I -r I 1-vl [-a attribute] [-c catalog] [-f file] [-1 level] 
[ - t targetfilel [ -x option=value I [ -X optionsfilel 
[software~selections 
1 [@ targets] 
4.6.2 Description 
The swlist utility displays information about software that has been installed on 
a system or is in a distribution. 
When combined with swmodify there is a complete readwrite interface to the 
installed-software and distribution catalog information. 
4.6.3 Options 
The swlis t utility supports the following options. Where there is no description, 
the description in 4.1 applies. 
-a attribute 
Specifies which attributes to list. 
Multiple attributes may be listed by specifymg multiple -a attribute 
options. Only attributes that apply to each object listed are included 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
for that object. When used with the -v option, the attributes are in 
the software definition file format. When the -v option is not 
specified, then the listing format is undefined (see one-liner extended 
option). 
In addition to all attribute names defined in this part of ISO/IEC 
15068, three additional items shall be supported by the -a attribute 
option: 
createdate 
If this value is specified, swlis t shall return a 
sequence of characters representing the date associated 
with the create-time attribute. 
The format of this sequence of characters in the POSIX 
locale shall be equivalent to the default date format 
described in 4.15.6.1 of POSM.2 {3}. 
date "+%a %b %e %H:%M:%S %Z %Yn 
The format for other locales is undefined. 
mod-date 
If this value is specified, swlist shall return a 
sequence of characters representing the date associated 
with the mod-time attribute. 
The format of this sequence of characters in the POSIX 
locale shall be equivalent to the default date format 
described in 4.15.6.1 of POSM.2 (3): 
date "+%a %b %e %H:%M:%S %Z %Yn 
The format for other locales is undefined. 
soft ware-spec 
If this value is specified, swlis t shall return the fully 
qualified so f tware-spec for the object, as defined in 
4.1.4.1.1, instead of listing the identified objects. 
The so£ tware-spec includes the tag of the object, the 
tag of the associated product (if this object is a fileset or 
subproduct), and the version distinguishing attributes of 
this object or its associated product (if this object is a 
fileset or subproduct). 
These additional items can also be used with the oneliner extended 
option. 
.c catalog 
Provides a means to list the full catalog structure. 
If the -c option is specified, output from swlist is written to an 
exported catalog structure instead of stdout. 
The -c option specifies a directory below which the catalog informa- 
tion for the specified objects and attributes are stored. The exported 
catalog 
structure 
is 
used 
both 
for 
distributions 
and 
installed-software catalog information. See 5.1.1. 
4.6 swlist - 
List software catalog 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
-f file 
- 1  level 
Specifies level at which to list the objects below the specified 
software. 
Level may have values from the enumerated list bundle, product, 
subproduct, f i l e s e t ,  control-£ i l e ,  f i l e .  If the -1 level 
option is not included, then only the object at the level directly below 
the specified software or software-collection is listed. See Table 4-9. 
Table 4-9 - Default Levels 
bundle 
products 
~roduct 
filesets 
If no level is specified for bundle and subproduct specifications, all 
the available or currently installed product and fileset objects, 
resolved recursively, are listed. 
subproduct 
fileset 
Multiple -1 level options may be used to explicitly control what 
objects are included. 
filesets 
files 
- t targetfile 
- v 
List all the attribute value pairs of the objects specified. 
The -v option specifies that the format of the output shall be in the 
INDEX file format, as defined in 5.2. Which attributes and objects 
are included is controlled by other options and operands. If the -a 
option is defined, then only those attributes are listed, otherwise all 
attributes are listed. If there is no -v option, then the listing format 
is undefined (see oneliner extended option). 
- x optionsfile 
4.6.4 Operands 
The s w l i s t  utility supports the software~selections and targets operands 
described in 4.1. If no software~elections are provided, all software in the catalog 
(either distribution or installed software) shall be selected. 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
4.6.5 External Influences 
See 4.1 for descriptions of external influences common to all utilities. 
4.6.5.1 Extended Options 
The swlist utility supports the following extended options. The description in 
4.1 applies. 
distribution-target-directory =implementation-defined-value 
one-liner =implementation-de fined-value 
select-local =true 
software 
targets 
4.6.6 External Effects 
See 4.1 for general information. 
4.6.7 Extended Description 
See 4.1 for general information. The following are the two phases in the swlist 
utility: 
(1) Selection phase 
(2) Execution phase 
4.6.7.1 Selection Phase 
If there are no software selections specified, then all software from the catalog is 
processed. Otherwise, each selection added to the selected software list shall 
satisfy the following validation check: 
- If the selection is not available from the catalog file, generate an event. 
(SW-ERROR: SW-SELECTION-NOT-FOUND) 
Unlike all other utilities in this part of ISOIIEC 15068, swlist includes all 
software that matches a specification, even if the specification is ambiguous. 
4.6.7.2 Execution Phase 
The attributes for the selections determined from the previous phase are listed in 
the formats defined by the options. 
4.6 swlist - 
List software catalog 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
4.6.8 Exit Status 
See 4.1. 
4.6.9 Consequences of Errors 
See 4.1. 
4.7 swmodif y - 
Modify software catalog 
4.7.1 Synopsis 
swmodify [ -d I I I -r I [-PI [ - u ]  [ - a  attribute=value] [-c catalog] 
- f file I [ - t targetfile] [ -x option=value I [ -x optionsfilel 
[software-selections ] [@ targets ] 
4.7.2 Description 
The swmodi fy utility provides an object and attribute update, create, and delete 
interface to the distribution and installed-software catalog information indepen- 
dent of the other utilities. When combined with swlist, there is a complete 
readhvrite interface to the installed-software and distribution catalog information. 
4.7.3 Options 
The swmodi f y utility supports the following options. Where there is no descrip- 
tion, the description in 4.1 applies. 
-a attribute=ualue 
As an alternative to using a software definition file format to describe 
the file attributes, this option may be used to add or modify a single 
attribute (e.g., is-locatable). If combined with the -u option, this 
may be used to delete an attribute. 
Only one of the - c  catalog and -a attribute options may be 
specified. 
- c  catalog 
T h s  option specifies the pathname of the catalog information. If it is 
a file, then it shall be a file using the software definition file syntax, 
in 5.2.1, that defines the objects and attributes desired to be created 
or modified. 
If it is a directory, then it shall have the exported catalog structure. 
For example, this could be a directory containing the output of the 
swl i s t - c  command. 
Only one of the - c  catalog and -a attribute options may be 
specified. 
118 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
-d 
-f file 
- P 
-r 
- t targetfile 
-u 
Deletes the objects or attributes specified. 
-x option=value 
-x optionfile 
4.7.4 Operands 
The swmodi f y utility supports the software-selections and targets operands 
described in 4.1. 
This utility need not support a target distribution in the serial format. 
4.7.5 External Influences 
See 4.1 for descriptions of external influences common to all utilities. 
4.7.5.1 Extended Options 
The swmodi f y utility supports the following extended options. The description in 
4.1 applies. 
distribution-target-directory =implementation-defined-value 
installed~software~catalog 
=implementation-defined-value 
files 
logfile =implementation-de fined-val ue 
loglevel = 1 
select-local =true 
software 
targets 
verbose = 1 
4.7.5.2 Standard Input 
4.7.5.3 Input Files 
The source input files may be in one of the following: 
- software definition file 
Described in 5.2. 
4.7 swmodify - 
Modify software catalog 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
- exported catalog structure 
Described in 5.2. 
Note that this structure may be used to describe the installed-software 
catalog information. There shall be a separate product.instance-id for each 
version of the product. 
NOTE: An installed version is distinguished by the same attributes as in a distribution, 
plus the location attribute. 
4.7.6 External Effects 
See 4.1. 
4.7.7 Extended Description 
See 4.1 for general information. The swmodify utility consists of the following 
three phases: 
(1) Selection Phase 
(2) Analysis Phase 
(3) Execution Phase 
4.7.7.1 Selection Phase 
4.7.7.1.1 Specifying the Source 
The source selection differs from the general information in 4.1 in that the source 
is a catalog file or set of catalog files in the software packaging layout format 
instead of a distribution, so there are no access control events for accessing the 
catalog file. 
- If the file parsing discovers syntax errors or missing but required attri- 
butes, generate an event. 
(SW-ERROR: SW-SOURCE-ACCESS-ERROR) 
4.7.7.1.2 Software Selections 
If there are no software selections specified, then all software from the catalog is 
processed. Otherwise, each selection added to the selected software list shall 
satisfy the following validation checks. If any of these checks result in an error, 
the selection is not added to the list. 
- If the selection is not available from the catalog file, generate an event. 
(SW-ERROR: SW-SELECTION~NOTTFOUND) 
- If a unique version can not be identified, generate an event. 
(SW-ERROR: SW-SELECTION-NOT-FOUND-AMBIG) 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOIIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
4.7.7.2 Analysis Phase 
See 4.1. 
4.7.7.3 Execution Phase 
The execution phase.modifies the target catalog. Certain errors can occur when 
modifylng the catalog. 
- If a file cannot be found in order to look up its attributes for modifylng the 
catalog, generate an event. 
(SW-ERROR: SW-FILE-NOT-FOUND) 
More complex rules apply when modifymg attributes inherited from the product to 
the fileset level. The filesets and is-locatable attributes are updated only by 
swpackage and swmodify. If a fileset definition is removed with swmodify, 
the filesets attribute shall be updated. 
If swmodify is used to change a fileset islocatable attribute, then the 
corresponding product attribute shall be recalculated. 
4.7.8 Exit Status 
See 4.1. 
4.7.9 Consequences of Errors 
See 4.1. 
4.8 swpackage - 
Package distribution 
4.8.1 Synopsis 
swackage [-PI 1-f file1 [-s psfl[-x option=ualue] [-x optionsfile] 
[software-selections 1 [@ targets ] 
4.8.2 Description 
The swpackage utility packages files from the local host into software objects 
that can be managed by the utilities in this part of ISOIIEC 15068 using the 
definitions from a PSF. The swpackage utility packages software into 
distributions that can be installed, copied or otherwise distributed or managed. 
4.8 swpackage - 
Package distribution 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
4.8.3 Options 
The swpackage utility supports the following options. Where there is no 
description, the description in 4.1 applies. 
- f file 
-s psf 
This option specifies the pathname of the PSF, which describes the 
details of the packages that swpackage operates on. 
-x option=value 
-X optionsfile 
4.8.4 Operands 
The swpackage utility supports the software-selections and targets operands 
described in 4.1 with one exception. The utility may support only a single, local 
distribution target. 
If no software-selections are provided, all software described by the PSF shall be 
selected. 
Whether data on an existing target distribution in serial format is overwritten or 
merged is implementation defined. 
4.8.5 External Influences 
See 4.1 for descriptions of external influences common to all utilities. 
4.8.5.1 Extended Options 
The swpackage utility supports the following extended options. The description 
in 4.1 applies. 
distribution-targetdirectory =implementation-defined-value 
distribution-target-serial =implementation-defined-value 
enforce-dsa =true 
follow-symlinks=false 
logfile =implementation-de fined-value 
loglevel = 1 
media-capacity = 0 
media-type =directory 
psf-sourcefile=psf 
4 SoRware Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
software 
verbose = 1 
4.8.5.2 Product Specification File 
See Section 5. 
4.8.6 External Effects 
See 4.1. 
4.8.7 Extended Description 
The swpackage utility consists of the following three phases: 
(1) Selection Phase 
(2) Analysis Phase 
(3) Execution Phase 
4.8.7.1 Selection Phase 
4.8.7.1.1 Specifying Targets 
The target selection differs from the general information in 4.1 in that there may 
be only one target. If the target is a serial distribution, swpackage sets default 
tape types and sizes as described in 4.8.5.1. 
4.8.7.1.2 Specifying the Source 
The source selection differs from the general information in 4.1 in that the source 
shall be a PSF, instead of a distribution. Hence there are no access control events 
for accessing the PSF. 
The selection phase reads (and parses) the PSF as follows to obtain the informa- 
tion from the source PSF: 
- The product, subproduct, and fileset structure 
- The files contained in each fileset 
- The attributes associated with these objects 
If the file parsing discovers syntax errors, or missing but required attributes, gen- 
erate an event. 
(SW-ERROR: SW-SOURCE-ACCESS-ERROR). 
4.8.7.1.3 Software Selections 
If there are no software selections specified, then all software from the PSF is pro- 
cessed. Otherwise, each selection added to the selected software list shall satisfy 
the following validation checks. If any of these checks result in an error, the 
selection is not added to the list. 
4.8 swpackage - 
Package distribution 
123 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
- If the selection is not available from the PSF, generate an event. 
(SW-ERROR: SW-SELECTION-NOT-FOUND) 
- If a unique version can not be identified, generate an event. 
(SW-ERROR: SW-SELECTION-NOT-FOUND-AMBIG) 
4.8.7.2 Analysis Phase 
The analysis phase consists of the following steps: 
- Check the dependency specifications for irregularities (such as circular 
prerequisites or missing dependencies). If there are irregularties, generate 
an event. 
(SW-WARNING: SW-DEPENDENCY-NOT-MET) 
- Before a new storage directory is created, check to see if this product ver- 
sion has the same identifylng attributes as an existing product version, 
namely the same tag, revision, architecture, and vendor-tag. If all the 
identifylng attributes match, then the user is repackaging (modifying) an 
existing version. If a fileset within that product is being repackaged, gen- 
erate an event. 
(SW-NOTE: SW-SAME-REVISION-INSTALLED) 
- Check the existence and attributes of the control-files and files that the 
PSF defines. If any are missing, generate an event. 
(SW-ERROR: SW-FILE-NOT-FOUND) 
- Check that there is enough free disk space on the target file system to pack- 
age the selected products. 
- If there is not enough space and enforce-dsa =true, generate an event. 
(SW-ERROR: SW-DSA-OVER-LIMIT) 
- If there is not enough space and enforce-dsa =false, generate an event. 
(SW-WARNING: SW-DSA-OVER-LIMIT) 
4.8.7.3 Execution Phase 
The execution phase packages the source files and information into a product and 
creates, or merges the product into, the target distribution. 
When creating a serial distribution, an implementation shall support one or both 
of POSIX.l (2) extended cpio or extended tar archive formats. Whether an 
implementation supports writing both archive formats or only one, and which for- 
mat is supported if only one, is implementation defined. 
When packaging a product, the storage directory within the target distribution is 
createdlupdated directly by swpackage. For each unique version of the product, 
a directory is created using the defined product.tag attribute and a unique 
sequence number for all the product versions which use the same tag as specified 
in Section 5. 
The swpackage command generates certain attributes as specified in 5.2. 
More complex rules apply when modifying packaging attributes inherited from the 
product to the fileset level. The filesets and is-locatable attributes are updated 
only by swpackage and swmodi f y. When packaging, the value of the filesets 
124 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
attribute is set to include all the filesets in the PSF, plus any others that already 
exist in the distribution but are not in the PSF. In the latter case, the user is 
warned that the PSF is not complete. 
If undefined, the product.is-locatable attribute is set by swpackage if any of the 
filesets in the filesets list are locatable. If none of the filesets are locatable, or if 
that cannot be determined, then the value of the pr0duct.i~-locatable attribute is 
set to f a l s e .  If defined, the product-islocatable attribute is used to define the 
value of the islocatable attribute for any filesets that do not have islocatable 
defined. If the value of the is-locatable attribute is defined at both the product 
and fileset level, then the fileset definition shall override the product definition. 
Certain errors can occur as follows when packaging the files: 
- If a file can not be added to the distribution for any reason, generate an 
event. 
(SW-ERROR: SW-FILE-ERROR) 
4.8.8 Exit Status 
The swpackage utility returns as follows: 
0 
The products specified in the PSF were successfully packaged onto 
the media. 
1 
An error occurred in parsing the PSF. The media was not modified. 
2 
An error during the packaging operation. The media has been 
modified. Review the log file for details. 
4.8.9 Consequences of Errors 
See 4.1. 
4.9 swremove - 
Remove software 
4.9.1 Synopsis 
swremove [ -d 1 1 1 -r 1 [-PI [- f file] [- t targetfile] [ -x option=valuel 
[ -x optionsfilel [software-selections I [@ targets I 
4.9.2 Description 
The swremove utility performs the opposite function of the install software utility 
or the copy software utility. It removes installed software or software stored in a 
distribution. 
The swremove utility removes software installed at the local host or at the tar- 
gets specified on the command line. It also removes software from local or remote 
distributions. 
4.9 swremove - 
Remove software 
125 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
4.9.3 Options 
The swremove utility supports the following options. Where there is no descrip- 
tion, the description in 4.1 applies. 
-d 
-f file 
- P 
- r 
- t targetfile 
-x option=value 
-X optionsfile 
4.9.4 Operands 
The swremove utility supports the software~selections and targets operands 
described in 4.1. 
This utility need not support a target distribution in the serial format. 
4.9.5 External Influences 
See 4.1 for descriptions of external influences common to all utilities. 
4.9.5.1 Extended Options 
The swremove utility supports the following extended options. The description in 
4.1 applies. 
autoselect-dependents =false 
distribution-target-directory =implementation-defined-value 
enforce-dependencies =true 
enforce-scripts =true 
installed~software~catalog 
=implementation-de fined-value 
logfile =implementation-de fined-value 
loglevel =l 
select-local =true 
software 
targets 
verbose = 1 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
4.9.6 External Effects 
See 4.1. 
4.9.7 Extended Description 
See 4.1 for general information. The swremove utility consists of three main 
phases as follows: 
(1) Selection phase 
(2) Analysis phase 
(3) Execution phase 
4.9.7.1 Selection Phase 
As opposed to swinstall, software selections apply to the target distribution or 
installed-software. 
Each specified selection shall pass the following checks. If a specification does not 
pass a check, the implementation- defined error handling procedure is invoked. 
- If the selection is not found, generate an event. 
(SW-WARNING: sw-SELECTION-NOT-FOUND) 
- If the selection is not found at that product directory, generate an event. 
(SW-WARNING: SW~SELECTION~NOT~FOUNDDRELATED) 
- If a single version of the software is not uniquely identified from the pro- 
duct and product attributes specified, generate an event. 
(SW-ERROR: SW-SELECTION-NOT-FOUND-AMBIG) 
Add any dependent software to the selection list if autoselect-dependents =true. 
4.9.7.2 Analysis Phase 
1 
This subclause details the analysis phase. The analysis phase occurs before the 
removing of files begins and involves executing checks to determine whether or 
not the removal should be attempted. No aspect of the target host environment is 
modified, so canceling the removal after these operations has no negative effect. 
The target role makes the following checks: 
- When removing installed software, execute vendor-supplied checkremove 
scripts to perform product-specific checks of the target. 
- If a checkremove script returns an error and enforcescripts =true, an 
event is generated and the implementation-defined error handling pro- 
cedure is invoked. 
(SW-ERROR: SW-CHECK-SCRIPT-ERROR) 
- If a checkremove script returns an error and enforce-scripts=false, 
generate an event. 
(SW-WARNING: SW-CHECK-SCRIPT-ERROR) 
4.9 swremove - 
Remove software 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
- If a checkremove script returns a warning, generate an event. 
(SW-WARNING: SW-CHECK-SCRIPT-WARNING) 
- If a checkremove script has a return code of 3, generate an event and 
unselect the fileset (or all filesets in the product for a product level 
script). 
(SW-NOTE: SW-CHECK-SCRIPT-EXCLUDE) 
- Verify that the dependencies are met. The swremove utility does not 
remove a fileset if it is required by other filesets that have not been selected 
for removal or cannot be removed. If a non-selected fileset depends on a 
selected fileset, generate an event as follows. 
- If enforce-dependencies =true, invoke the implementation-defined error 
handling procedure and generate an event. 
(SW-ERROR: SW-DEPENDENCY-NOT-MET) 
- If enforce-dependencies =false, generate an event. 
(SW-WARNING: SW-DEPENDENCY-NOT-MET) 
If a software object has been specified for removal and there is a bundle referring 
to that object that has not also been specified for removal, the behavior is imple- 
mentation defined. Likewise, if a fileset or subproduct object has been specified 
for removal, and there is a subproduct referring to that object that has not also 
been specified for removal, the behavior is implementation defined. 
4.9.7.3 Execution Phase 
For installed-software, the sequential relationship between the unconf igure, 
preremove, and postremove scripts, and removing files for swremove is 
shown in the following list. The unconf igure scripts are only run if the target 
directory is /. 
(1) Unconfigure each product. 
If the fileset has been configured more than once, the unconfigure 
script shall unconfigure each instance. 
(a) Unconfigure each fileset in the product. 
[I] Run the unconf igure script for the fileset. 
[2] Update the result of the script. Update the state of the fileset 
in the product to i n s t a l l e d  in the database for the 
installed-software object. 
(b) Run the unconf igure script for the product. 
(2) Remove each product. 
(a) Run the preremove script for the product. 
(b) Remove each fileset in the product. 
111 Update the state of the fileset to t r a n s i e n t  in the catalog for 
the installed-software object. 
[21 Run the preremove script for the fileset. 
4 Software Administration Utilities 

. PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
131 Remove the files for the fileset. 
[4] Run the pos tremove script for the fileset. 
[51 Update the results of the scripts. Update the state of the 
fileset to removed in the catalog for the installed-software 
object or remove the catalog information for the fileset. 
(c) Run the postremove script for the product. 
(d) If the catalog information has been removed for all filesets in the 
product, an implementation can also remove the catalog information 
for the product and its contained subproducts. 
(3) Remove each bundle. 
(a) Remove the installed-software catalog information for the bundle. 
(4) If the catalog information has been removed for all products and bundles 
in the installed-software object, an implementation can also remove the 
catalog information for the installed-software object. 
For each fileset that failed to be removed, the installed-software catalog informa- 
tion is updated to the state corrupt. 
4.9.7.3.1 Executing preremove Scripts 
In this step of the execution phase, swremove executes the software preremove 
scripts. 
- If a preremove script returns an error and enforcescripts =true, generate 
an event and invoke the implementation-defined error handling procedures. 
(SW-ERROR: SW-PRE-SCRIPT-ERROR) 
- If a preremove script returns an error and enforce-scripts =false, generate 
an event. 
(SW-WARNING: SW-PRE-SCRIPT-ERROR) 
- If a preremove script returns an warning, generate an event. 
(SW-WARNING: SW-PRE-SCRIPT-WARNING) 
When swremove is removing software from a distribution, no scripts shall be run. 
4.9.7.3.2 File Removing 
In this step, swremove removes the files from the target. The target role 
attempts to remove each file from the target file system according to information 
obtained in the software-selections sent. 
If swremove cannot remove a file (either because the file is busy [ETXTBSYI, or 
for some other reason), the file name and the reason are logged so an administra- 
tor can take corrective action. 
(SW-WARNING: SW-FILE-NOT-REMOVABLE) 
If a filename is a symbolic link, the target is not removed. To achieve this 
behavior, the swremove utility handles symbolic links according to the following 
rules: 
4.9 swremove - 
Remove software 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
- If a file was recorded in the catalog as a symbolic link to another file, and it 
is still a symbolic link on the file system, remove the symbolic link, but do 
not remove the target file. 
- If a file was recorded in the catalog as a file, but exists as a symbolic link on 
the file system, remove the symbolic link, but do not remove the target file. 
- If the pathname to the file includes a symbolic link, this path is followed 
and the correct file is removed. 
All files that are targets of symbolic links are removed when the fileset to which 
they belong is removed. 
4.9.7.3.3 Executing postremove Scripts 
In this step of the execution phase, swremove executes software postremove 
scripts. 
- If a postremove script returns an error and enforce-scripts =true, gen- 
erate an event and invoke the implementation-defined error handling pro- 
cedures. 
(SW-ERROR: SW-POST-SCRIPT-ERROR) 
- If a postremove script returns an error and enforce-scripts=false, gen- 
erate an event. 
(SW-WARNING: SW-POST-SCRIPT-ERROR) 
- If a pos tremove script returns an warning, generate an event. 
(SW-WARNING: SW-POST-SCRIPT-WARNING) 
4.9.7.3.4 Kernel Recofiguration 
If the is-kernel attribute of the fileset is true, then a warning message to rebuild 
the kernel is displayed and also recorded in the log file. However, swremove does 
not modify any of the kernel generation files. 
4.9.7.3.5 Removing From a Distribution 
The list of operations is simpler for removing filesets from a distribution than for 
installed-software. 
(1) Remove each product. 
(a) Remove each fileset in the product. 
[ll Update the state of the fileset to transient in the catalog for 
the distribution. 
[21 Remove the files for the fileset. 
[31 Update the state of the fileset to removed in the catalog for 
the distribution or remove the catalog information for the 
fileset. 
(b) If the catalog information has been removed for all filesets in the 
product, an implementation can also remove the catalog information 
for the product and its contained subproducts. For each fileset that 
failed to be removed, the distribution catalog information is updated 
to the state corrupt. 
130 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
(2) Remove each bundle. 
(a) Remove the distribution catalog information for the bundle. 
(3) If the catalog information has been removed for all products and bundles 
in the distribution object, an implementation can also remove the catalog 
information for the distribution object. 
4.9.8 Exit Status 
See 4.1. 
4.9.9 Consequences of Errors 
See 4.1. 
4.10 swverify - 
Verify software 
4.10.1 Synopsis 
s w v e r i f y  [ -d 1 1 1  -r 1 [ - I ? ]  
1 - f  file] [-t targetfile] [-x option=value] 
[ -X optionsfilel [softwareselections 1 [@ targets I 
4.10.2 Description 
The s w v e r i f y  utility checks the accuracy of software in distributions and 
installed-software. The utility checks the integrity of directory structures and the 
files. Discrepancies are reported on stderr along with a detailed explanation of the 
problem. 
4.10.3 Options 
The s w v e r i f y  utility supports the following options. Where there is no descrip- 
tion, the description in 4.1 applies. 
- d 
-f file 
-F 
Correct problems as well as report them. 
If checkqermissions =true, correct the corresponding problems 
reported. 
If check-scripts =true, correct the corresponding problems reported. 
The -F option only applies to installed software. 
4.10 swverif y - 
Verify software 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
- r 
- t targetfile 
-x option=value 
-x optionsfile 
4.10.4 Operands 
The swverify utility supports the software-selections and targets operands 
described in 4.1. 
This utility need not support a target distribution in the serial format. 
4.10.5 External Influences 
See 4.1 for descriptions of external influences common to all utilities. 
4.10.5.1 Extended Options 
The swveri f y utility supports the following extended options. The description in 
4.1 applies. 
allow-incompatible= false 
autoselect-dependencies =true 
check-contents =true 
checkqermissions =true 
check-requisites =true 
check-scripts =true 
check-volatile =false 
distribution-target-directory =implementation-defined-value 
enforce-dependencies =true 
enforce-locatable =true 
installed~software~catalog 
=implementation-de fined-value 
logfile =implementation-defined-value 
loglevel = 1 
select-local =true 
software 
targets 
verbose = 1 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
4.10.6 External Effects 
See 4.1. 
4.10.7 Extended Description 
See 4.1. for general information. The key phases in the swverif y utility are the 
following: 
(1) Selection phase 
(2) Analysis phase 
(3) Execution phase 
4.10.7.1 Selection Phase 
Like swremove, software selections apply to the software installed (or available in 
the case of a distribution). 
Each specified selection is added to the selection list after it passes the following 
checks: 
- If the selection is not found, generate an event. 
(SW-WARNING: SW-SELECTION-NOT-FOUND) 
- If the selection is not found at that product location, but that product exists 
at another location, generate an event. 
(SW-WARNING: SW-SELECTION-NOT-FOUND-RELATED) 
Add any dependencies to the selection list if autoselect-dependencies =true. 
4.10.7.2 Analysis Phase 
This subclause details the analysis phase for swverif y. No aspect of the target 
host environment is modified unless the -F option is specified. The target role 
accesses its software-collection catalog to get the information for the selected 
software. 
The target role makes the following checks: 
- For each product that is incompatible with the uname attributes of the tar- 
get host, generate an event as follows. See 4.1.4.1.2. 
- If allow-incompatible=false, generate an event. 
(SW-ERROR: SW-NOT-COMPATIBLE) 
- If allow-incompatible=true , generate an event. 
(SW-WARNING: SW-NOT-COMPATIBLE) 
Applies to installed software. 
- For each fileset whose state is other than installed, con£ igured, 
available, or removed, generate an event. 
(SW-WARNING: SW-SELECTION-IS-CORRUPT) 
Applies to distributions and installed software. 
4.10 swverif y - 
Verify software 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
- If a dependency cannot be met, generate an event as follows. 
- If enforce-dependencies =true, generate an event. 
(SW-ERROR: SW-DEPENDENCY-NOTMET) 
- If enforcedependencies =false, generate an event. 
(SW-WARNING: SW-DEPENDENCY-NOT-MET) 
Applies to distributions and installed software. 
- Executes vendor-supplied verify scripts. 
- If a verify script returns an error, generate an event. 
(SW-ERROR: SW-CHECK-SCRIPT-ERROR) 
- If a verify script returns an warning, generate an event. 
(SW-WARNING: SW-CHECK-SCRIPT-WARNING) 
Applies to installed software. 
- The following file level checks are made: 
- Check for missing files and directories. For installed software, if 
check-volatile=false, then this check shall not be made for files with 
fi1e.i~-volatile equal true. 
Applies to distributions and installed software. 
- Check for files that have been modified. 
- For distributions, check size, cksum, and mtime. 
- For installed software, check mode, owner, group, size, cksum, 
mtime, revision, major, and minor, if defined for that file object. 
If check-volatile =false, then these checks shall not be made for files 
withfi1e.i~-volatile equal to true. 
- If a file is compressed, then the compressed-size and compressed~cksum 
attributes of the file should be checked instead of the size and cksum 
attributes. 
, 
Applies to distributions. 
- Check symbolic links for correct values. 
Applies to distributions and installed software. 
If any of these checks fail for any file, generate an event. 
(SW-ERROR: SW-FILE-ERROR) 
4.10.7.3 Execution Phase 
If the -F option is set, then the execution phase operations are run. 
4.10.7.3.1 Executing fix Scripts 
In this step, swverify executes vendor-supplied fix scripts if operating on 
installed software. Scripts are executed in the same order as verify scripts. 
134 
4 Software Administration Utilities 

PART 2: SOFTWARE ADMINISTRATION 
- If a fix script returns an error, generate an event. 
(SW-ERROR: SW-PRE-SCRIPT-ERROR) 
- If a fix script returns a warning, generate an event. 
(SW-WARNING: SW-PRE-SCRIPT-WARNING) 
Control scripts shall adhere to the specifications in 4.1.6.1. 
4.10.7.3.2 File Level Fix 
The following file level fixes are made: 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
- Missing directories are created (except volatile unless the check-volatile 
option is true) 
- Files that have been modified (except volatile unless the check-volatile 
option is true) are fixed for mode, owner, group, major, and minor, as appli- 
cable 
- Symbolic links are recreated to correct their values 
If any of these fixes fail for any file, generate an event. 
(SW-ERROR: SW-FILE-ERROR) 
4.10.8 Exit Status 
See 4.1. 
4.10.9 Consequences of Errors 
See 4.1. 
4.10 swverif y - 
Verify software 


ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Section 5: Software Packaging Layout 
This section describes the software packaging layout. The software packaging lay- 
out consists of 
(1) The directory structure consisting of the following major components: 
- The exported catalog structure containing software information 
including software definition files and customize scripts used by the 
instalhpdate and copy utilities 
- The file storage structure that contains the actual software files for 
each fileset 
(2) The software definition file formats and the objects and attributes they 
contain, INDEX for software definitions and INFO for file and control-file 
definitions (used by all the utilities defined in this part of ISOIIEC 15068), 
the PSF for product specification (used by swpackage), and the space 
file (used by disk space analysis in install). 
(3) The serial format of the layout containing an archive of files in the direc- 
tory structure. 
This ordering of directories and files shall also apply to distributions on a 
set of hierarchical file systems that span multiple media. 
Thus, two distinct (but related) formats for the software packaging layout are sup- 
ported by this part of ISO/IEC 15068 - a directory structure format that resides 
within a POSM.1 (2) hierarchical file system (disk, CD-ROM, etc.), and a bit 
stream serial format that resides within a POSM.l (2) extended cpio or extended 
tar archive. 
A Strictly Conforming POSE 7.2 Distribution shall not contain any other files or 
directories besides those explicitly entered in the distribution catalog. A Conform- 
ing POSM.7.2 Distribution can contain other files and directories besides those 
belonging to the distribution. 
28 
5.1 Directory Structure 
29 
This clause describes the directory structure for the software packaging layout, 
30 
and how this representation stores the definitions of the software and file objects 
31 
contained within it. The directory structure is a POSM.1{2) hierarchical file sys- 
32 
tem containing files in the software packaging layout. 
33 
This part of ISO/IEC 15068 defines a single directory structure for directory and 
serial distributions. The software packaging layout can be stored in the following 
two forms: 
5.1 Directory Structure 
137 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE 
SYSTEM ADMINISTRATION - 
- A direct access file system as described in this clause 
- A serial access extended cpio or extended tar archive as described in 5.3 
of POSM.l (21 
The same structure offers optimal load performance for serial distributions while 
providing a simple structure for directory distributions. This structure shall apply 
to each medium if the distribution spans multiple media. 
The structure supports multiple versions of a product contained within a single 
distribution, where versions are distinguished by a unique combination the pro- 
duct tag, revision, architecture, and vendortag attributes. 
Figure 5-1 shows the directory structure of a software packaging layout located 
under a directory path. 
Directorv or File 
Pur~ose 
Contains all information about the distribution 
Global index of distribution and its contents 
Contains distribution attributes stored in files 
Storage for information on the first product 
Contains all product attributes stored in files 
Control-file information for this product 
First vendor-defined control-file 
Additional vendor-defined control-files 
Storage for information and scripts on this fileset 
File and control-file information for this fileset 
First vendor-defined control-file 
Additional vendor-defined control-files 
Storage for information and scripts on the next fileset 
Storage for information on the next product 
Storage for this product's filesets 
Storage for this fileset's files 
Path to first file 
Path to additional files 
Storage for next fileset's files 
Actual directory structure of files 
Storage for next product's filesets 
Figure 5-1 - Example of Software Packaging Layout 
The directory structure for the software packaging layout is divided into the fol- 
lowing two areas: 
- The exported catalog structure, consisting of control directories containing 
the software definition files that describe the products contained in the dis- 
tribution, as well as the software control-files 
138 
5 Software Packaging Layout 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
- The software file storage structure, consisting of the product and fileset 
storage directories, under which the actual software files for each fileset are 
located 
5.1.1 Exported Catalog Structure 
The catalog structure describes the software contained in the distribution. It is 
organized by product, and each product is organized by fileset. The specific con- 
tents are described in the following subclauses. 
5.1.1.1 INDEX File 
The distribution catalog shall contain a global INDEX file as follows: 
This INDEX file contains the definition of all software objects in the distri- 
bution. 
5.1.1.2 Distribution Files 
The catalog/d£ iles/ directory contains files used to store certain attributes of 
the distribution object. The distribution information stored can include the follow- 
ing: 
A distribution attribute can be stored as a separate file, the file name of 
which can be the name of the attribute. 
5.1.1.3 Product Catalog 
The catalog files for 
each product 
are stored 
under 
a directory 
catalog/ <product-control-directory> //. The way in which the value of each 
fileset control directory is determined is defined in 5.1.2.1. 
5.1.1.4 Product Control Files 
The catalog/ <product-control-directory>/lpf i 1 es / directory contains the 
control-files for the product object. The product control-files include the follow- 
ing: 
A product attribute can be stored as a separate file, the file name of which 
can be the name of the attribute. 
- INFO 
Contains the definitions for the control-file objects contained within the 
product. 
- checkinstall 
preinstall 
5.1 Directory Structure 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
postremove 
The vendor-supplied control scripts for the product. 
All other vendor-defined control-files for this product. 
5.1.1.5 Fileset Control Files 
The catalog / <product~control~directory~//~fileset~control~directory 
directory 
contains the control-files for the fileset object. The way in which the value of each 
fileset control directory is determined is defined in 5.1.2.1. The fileset control-files 
include the following: 
A fileset attribute can be stored as a separate file, the filename of which can 
be the name of the attribute. 
- INFO 
Contains the definitions for the control-file and file objects contained within 
the fileset. 
- checkinstall 
preinstall 
.. . 
postremove 
The vendor-supplied control scripts for the fileset. 
All other vendor-defined control-files for this fileset. 
5.1.2 File Storage Structure 
The second portion of a distribution contains the actual software files contained in 
each fileset object. 
The files of each fileset are store in a directory with the name 
<fileset-control-directory> 
that 
is 
itself 
in 
a 
directory 
called 
<product-control-directory> . 
Each regular file (ones for which file.type is f) is stored in a location defined by 
appending the file.path attribute to the path of the fileset file storage directory. 
This may require the creation of additional directories. Other file types (direc- 
tories, except as needed to store files; hard links and symbolic links) are not 
required to exist in the distribution. The POSM.1 {2} file permissions for files in 
the file storage area are undefined. 
5.1.2.1 Control Directory Names 
In the simplest case, the value of the product.tag attribute is the name of the pro- 
duct control directory. The fileset.tag attribute is used as the name of the fileset 
control directory. The following two conditions complicate this simple naming: 
140 
5 Software Packaging Layout 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
(1) Length of the tag attribute exceeds (POSM-PATH-MAX) of the system 
where the distribution resides. 
(2) Name collision with an existing product control directory. 
Given that multiple versions of a product may be contained in the same 
distribution, collisions from product control directories named by the tag 
attribute are common. 
These conditions are met by defining a control-directory attribute for each pro- 
duct and fileset that is unique within the distribution. The attribute uses the fol- 
lowing syntax: 
%token 
FILENAME-CHARACTER-STRING / *  as defined in 2.2.2.37 */ 
%start control-directory 
%% 
control-directory 
: tagqart 
I tagqart "." instance-idqart 
: FILENAME-CHARACTER-STRING 
tagqart 
instance-idqart 
: FILENAME-CHARACTER-STRING 
, 
The t a g s a r t  may be the product or fileset tag attribute, truncated as necessary 
to meet any filename length restrictions of the operating system. 
The i n s t a n c e - i d g a r t  is a string that, when added after the "." (period), 
defines a control-directory that, for products, is unique within the distribu- 
tion and, for filesets, is unique within the product. For products, this 
i n s  t a n c e - i d g a r t  may be the instance-id of the product if that instance-id 
was generated considering other products t a g g a r t s  in addition to tag attri- 
butes. 
5.2 Software Definition File Format 
The software definition files contain the software structure and the detailed attri- 
butes for distributions, installed-software, bundles, products, subproducts, 
filesets, files, and control-files. While information on installed software is 
represented in this form as input to, or output from, the various software adminis- 
tration utilities, the actual storage of this metadata for installed software is 
undefined. This subclause describes the format of the software definition files as 
follows: 
- The INDEX file contains the definition of distribution or installed-software 
objects as well as the software objects contained within those 
software~collections. The information in this file is primarily used in selec- 
tion phases of the utilities. 
- The INFO file contains the definition of the software files and control-files 
for a product or fileset within a distribution or installed-software object. 
The information in this file is primarily used in analysis and execution 
5.2 Software Definition File Format 
141 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX 
SYSTEM ADMINISTRATION - 
phases of the utilities. 
- The PSF also contains the definition of distribution attributes, software 
objects, and the software files and control-files for the product and fileset 
software objects. This file is created by the software vendor and used by the 
packaging tool to create the distribution, represented by the INDEX and 
INFO files, in the software packaging layout. 
The PSI? supports the same syntax as the INDEX and INFO files. Addi- 
tional syntactic constructs are supported for specifying files and 
control-files. This file is used in selection, analysis, and packaging phases 
of the swpackage command. 
Additionally, there is a space file that is created by the software vendor for addi- 
tional disk space needed for a product or fileset. This file is used in the analysis 
phase of the swinstall command to account for additional disk space required. 
5.2.1 Software Definition File Syntax 
The INDEX and INFO files have essentially the same syntax and semantics as the 
PSF. One key difference is that the INDEX file does not contain control-file and 
file definitions, the INFO file contains only control-file and file definitions, and the 
PSF file contains all definitions. In a distribution, each product and fileset has a 
separate INFO file. 
The software specification file syntax is as follows. See 2.1.2 for the grammar con- 
ventions for this syntax and Annex C for examples of syntax usage. 
%token 
FILENAME-CHARACTER-STRING 
/* as defined i n  2.2.2.37 
*/ 
%token 
NEWLINE-STRING 
/* as defined i n  2.2.2.61 
*/ 
%token 
PATHNAME_CHARACTER-STRING /* as defined i n  2.2.2.67 */ 
%token 
SHELL-TOKEN-STRING 
/* as defined i n  2.2.2.80 
*/ 
%token 
WHITE-SPACE-STRING 
/* as defined i n  2.2.2.110 */ 
%start software-definition-file 
% % 
software-definition-file : INDEX 
I INFO 
I PSF 
INDEX 
: soc-definition 
soc-contents 
: info-contents 
INFO 
PSF 
m e d i a  
: distribution-definition 
soc-contents 
: /* empty */ 
I media-definition 
5 Software Packaging Layout 

PART 2: SOFTWARE ADMINISTRATION 
ISODEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
vendors 
bundles 
products 
product-specification 
subproducts 
f ilesets 
fileset-specification 
control-files 
files 
fileset-contents 
fileset-content-items 
info-contents 
info-content-items 
product-contents 
: /* empty */ 
I vendors NEWLINE-STRING vendor-definition 
I vendor-definition 
: /* empty */ 
I bundles NEWLINE-STRING bundle-definition 
I bundle-definition 
: /* empty * /  
I products NEWLINE-STRING product-specification 
I product-specification 
: product-definition 
product-contents 
: /* empty */ 
I subproducts NEWLINE-STRING subproduct-definition 
I subproduct-definition 
: filesets NEWLINE-STRING fileset-specification 
I fileset-specification 
: fileset-definition 
fileset-contents 
/* fileset contents not valid in INDEX files */ 
: /* empty */ 
/ control-files NEWLINE-STRING control-file-definition 
I control-file-definition 
: /* empty */ 
I files NEWLINE-STRING file-definition 
I file-definition 
: fileset-contents NEWLINE-STRING fileset-content-items 
I fileset-content-items 
: control-files 
I files 
: info-contents NEWLINE-STRING info-content-items 
I info-content-items 
: control-files 
1 files 
: product-contents NEWLIIW-STRING product-content-items 
I product-content-items 
5.2 Software Definition File Format 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
product-content-items 
soc-contents 
soc-content-items 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
: control-files 
/* control-files not valid in INDEX files */ 
I subproducts 
I filesets 
: soc-contents NEWLINE-STRING soc-content-items 
I soc-content-items 
: vendors 
I bundles 
I products 
: distribution-definition 
I installed-software-definition 
I 
distribution-definition : software-definition 
media 
, 
media-definition 
: software-definition 
I 
installed-software-definition : software-definition 
I 
vendor-definition 
: software-definition 
; 
bundle-definition 
: software-definition 
product-definition 
: software-definition 
subproduct-definition 
: software-definition 
fileset-definition 
: software-definition 
control-file-definition : software-definition 
I extended-definition 
/* extended-definition only valid in PSF files */ 
file-definition 
: software-definition 
I extended-definition 
/* extended-definition only valid in PSF files */ 
software-definition 
: object-keyword NEWLINE-STRING 
attribute-value-list 
attributeyalue-list 
: /* empty */ 
5 Software Packaging Layout 

PART 2: SOFTWARE ADMINISTRATION 
ISOlIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
I attribute-value-list attribute-definition NEWLINE-STRIN( 
I attribute-definition NEWLINE-STRING 
attribute-definition 
: attribute-keyword WHITE-SPACE-STRING attribute-value 
ob j ect-keyword 
: FILENAME-CHARACTER-STRING 
attribute-keyword 
: FILENAME-CHARACTER-STRING 
extended-definition 
: extended-keyword WHITE-SPACE-STRING attribute-value 
extended-keyword 
: FILENAME-CHARACTER-STRING 
attribute-value 
: attribute-value WHITE-SPACE-STRING singleyalue 
I singleyalue 
I 
' < I  WHITE-SPACE-STRING PATHNAME-CHARACTER-STRING 
I 
'<' PATHNAME-CHARACTER-STRING 
single-value 
: SHELL-TOKEN-STRING 
The following syntax rules are applicable to software definition files: 
All keywords and values are represented as character strings. 
Each keyword is located on a separate line. Keywords can be preceded by 
white space (tab, space). White space separates the keyword from the 
value. 
Comments can be placed on a line by themselves or after the keyword- 
value syntax. They are designated by preceding them with the # (pound) 
character. The way in which comments are used in INDEX and INFO is 
undefined. 
All object keywords have no values. All attribute keywords have one or 
more values. 
An attribute value ends on the same line as the keyword with one excep- 
tion. Attribute values can span lines if and only if the value is prefixed 
and suffixed with the 
(double quote) character. 
When an attribute value begins with < (less than), the remainder of the 
string value shall be interpreted as a filename whose contents will be 
used as a quoted string value for the attribute. For INDEX files, the 
filename shall be a path relative to the control directory for that distribu- 
tion, product, or fileset. For PSF files, the filename shall be a path to a 
file on the host that contains the file. 
The use of " (double quote) is not required when defining a single line 
string value that contains embedded white space. Trailing white space 
shall be removed; embedded white space shall be used. The quotes can be 
used. 
5.2 Software Definition File Format 

ISOlrEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
(8) The 
(double quote), # (pound), and \ (backslash) characters can be 
included in multi-line string values by "escaping" them with 
\ 
(backslash). 
(9) The order of attributes is not significant, except that the layout-version 
shall be the first attribute defined in an INDEX file for a distribution or 
installed-software object. 
5.2.1.1 Keyword and Attribute Semantics 
The keywords and attribute types have the following semantics: 
The object keywords distribution, installed-so£ tware, bundle, 
product, subproduct, £ i l e s e t ,  control.-£ i l e ,  and f i l e  each 
define a new object of that type. The keywords d i s t r i b u t i o n ,  
i n s  talled-so£ tware, product, and f i l e s e t  also define nested 
blocks that contain the objects describing the software hierarchy. 
If an attribute is not supplied, then its default value shall be used, unless 
no default value is permitted. 
Attributes that have Boolean permitted values shall be described by the 
strings t r u e  and false. 
Attributes that have an enumerated set of permitted values shall be 
described by one of the enumerated values. Enumerated values shall not 
contain spaces and shall be case sensitive. In addition, abbreviations of 
the string shall not be allowed. For example, conf is not equivalent to 
con£ igured. 
For attributes whose values are integer character strings, the default 
value shall be used if the attribute is not supplied. If the first two charac- 
ters of an integer character string are Ox (zero followed by a lowercase 
Y", then the value shall be interpreted as hexadecimal. Otherwise, if 
the first character of an integer character string is 0 (zero), then the 
value shall be interpreted as octal. Attribute values denoting time shall 
be integer character strings that signify seconds since the Epoch. 
Attributes whose permitted values are lists of tags or so£ tware-specs 
can be described either by one or more repeating keywords, each listing 
one or more tags or sof tware-specs separated by white space (e.g., for 
subproduct.contents or fileset.prerequisites), or by blocks of object frag- 
ments (e.g., product, fileset, and file definitions). 
The former is used when the hierarchy is defined by reference, and the 
latter is used when the hierarchy is defined by containment. For exam- 
ple, subproducts and filesets are contained within products, but filesets 
are referenced by subproducts. 
Attributes 
that 
have 
permitted 
values 
of 
softwaregattern-matching-string 
are software pattern match- 
ing strings as described in 2.2.2.92. For all product attributes related to 
the uname structure (as defined in 4.4.1 of POSM.l (211, an empty string 
value is treated as equivalent to * (asterisk), implying a universal match. 
5 Software Packaging Layout 

PART 2: SOFTWARE ADMINISTRATION 
ISOlIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
5.2.1.2 Vendor-Defined Keywords and Attributes 
A software definition file can contain keywords (implying attributes) not defined 
by this part of ISOIIEC 15068. All such keywords in a file not recognized by an 
implementation shall be preserved (along with their associated values) by being 
transferred to the resulting INDEX or INFO files created by swpackage or 
swcopy. For any keyword, the keyword itself shall be a filename character 
string. 
The value associated with any keyword shall be processed as an 
a t  tribute-value (see 5.2.1) and thus can be continued across multiple input 
lines or can reference a file containing the value for the keyword. 
Implementations that make use of keywords beyond those described in this part of 
ISOIIEC 15068 take actions they believe appropriate for those keywords. The han- 
dling of any keywords that are both not defined by this part of ISOIIEC 15068, and 
still recognized by an implementation, is undefined. 
5.2.2 Distribution Definition 
distribution 
layoutgersion 
path 
df i l e s  
pf i l e s  
uuid 
layour-version 
path 
dfiles 
pfiles 
wid 
INDEX and PSF files can contain distribution definitions. Neither file contains the 
path attribute. Its value is generated dynamically by s w l i s t .  
The bundles, media, and products attributes are not stored as attributes, but 
rather as bundle, media, and product definitions. These attributes are not 
included in s w l i s t  -v output. Rather, they are generated dynamically only by 
s w l i s  t -a attribute. 
A PSF does not require a distribution definition. The PSF shall not contain the 
uuid attribute. It is generated dynamically, if needed, by swcopy and swpack- 
age. 
An INDEX file shall contain the layout-version attribute as the first attribute 
defined in the file. Distributions that span multiple media shall contain the uuid 
attribute. 
5.2.3 Media Definition 
media 
sequencegumber 
sequence-number 
INDEX files for distributions can contain media definitions. 
An INDEX file for a distribution shall contain the sequence-number attribute if the 
distribution spans multiple media. 
5.2 Software Definition File Format 

ISOAEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
444 
5.2.4 Installed Software Definition 
445 
installed-software 
446 
layoutgersion 
447 
path 
448 
df iles 
449 
pf iles 
450 
catalog 
layout-version 
path 
dfiles 
pfiles 
catalog 
451 
The storage of catalogs for installed software is undefined. With the use of the 
452 
swlist utility, the contents of such catalogs may be manifested in exported cata- 
453 
log form. The rules contained within this subclause shall apply when the contents 
454 
of an installed software catalog is manifested in exported catalog form. 
455 
INDEX files can contain installed-software definitions. This describes the attri- 
456 
butes for installed-software objects when listed in exported catalog structure 
457 
using swl i s t. 
458 
The products and bundles attributes are not stored as attributes, but rather as 
459 
product and bundle definitions. These attributes are not included in swlist -v 
460 
output. Rather, they are generated dynamically only by swl i s t -a attribute . 
461 
An INDEX file does not contain the path or catalog attributes; they are generated 
462 
dynamically by swl i s t . 
463 
An INDEX file shall contain the layout-version attribute as the first attribute 
464 
defined in the file. 
465 
5.2.5 Vendor Definition 
466 
vendor 
467 
tag 
468 
title 
469 
description 
rag 
title 
description 
470 
INDEX and PSF files can contain vendor definitions. The tag attribute is required 
471 
for all vendor objects. 
472 
5.2.6 Bundle Definition 
473 
bundle 
474 
tag 
475 
architecture 
476 
location 
477 
qualifier 
478 
revision 
479 
vendor-tag 
480 
contents 
481 
copyright 
482 
create-time 
483 
description 
484 
directory 
485 
instance-id 
486 
is-locatable 
487 
machine-type 
488 
mod-t ime 
number 
0s-name 
0s-release 
tag 
architecture 
location 
qualifier 
revision 
vendor-tag 
contents 
copyright 
createtime 
description 
directory 
instancejd 
is-locatable 
machine-rype 
mod-time 
number 
0s-name 
0s-release 
5 Software Packaging Layout 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
o s g e r s i o n  
size 
t i t l e  
0s-version 
size 
title 
INDEX and PSF files can contain bundle definitions. The tag and contents attri- 
butes are required for all bundles. 
Neither file contains the size attribute. The value of the size attribute is gen- 
erated dynamically based on the sizes of the filesets currently contained within 
the bundle. 
An INDEX file shall also contain an instance-id attribute. The value of the 
instance-id attribute is generated dynamically by swpackage or swcopy. An 
INDEX file for installed software shall contain a create-time attribute and a 
mod-time attribute for each bundle. 
Only bundle definitions for installed software may contain either the location or 
qualifier attributes; bundle definitions for distributions shall not contain either 
the location or qualifier attributes. 
A PSF should not contain either the location or qualifier attributes; they shall be 
ignored when parsing the file. 
5.2.7 Product Definition 
product 
t a g  
architecture 
qualifier 
revision 
vendor-tag 
all-filesets 
control-directory 
copyright 
create-time 
directory 
description 
instance-id 
is-locatable 
postkernel 
location 
machine-type 
mod-t i m e  
number 
0s-name 
0s-release 
0s-version 
size 
t i t l e  
tag 
architecture 
qualifier 
revision 
vendor-tag 
allJilesets 
control-directory 
copyright 
create-time 
directory 
description 
instance-id 
is-locatable 
postkernel 
location 
machine-type 
mod-time 
number 
0s-name 
0s-release 
0s-version 
size 
title 
INDEX 
and PSF files can contain product definitions. The tag and 
control-directory attributes are required for all products. 
Neither file contains the size attribute. The value of the size attribute is gen- 
erated dynamically based on the sizes of the filesets currently contained within 
the product. 
An INDEX file for installed software shall contain a create-time attribute and a 
mod-time attribute for each product. 
5.2 Software Definition File Format 
149 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
The controlfiles, filesets, and subproducts attributes are not stored as attributes, 
but rather as control-£ i l e ,  f i l e s e t ,  and subproduct definitions. These 
attributes are not included in s w l i s t  -v output. Rather, they are generated only 
by s w l i s t  -a attribute. 
An INDEX file shall contain an instance-id attribute. The value of the instance-id 
attribute is generated by swpackage or swcopy. An INDEX file shall also con- 
tain an allfilesets attribute in addition to the fileset definitions. This attribute is 
generated by swpackage and represents all filesets defined for the product, as 
opposed to those that are currently contained within the product. The value of 
the filesets and allfilesets attributes may differ, since some originally defined 
filesets might not be copied or installed. Only product definitions for installed 
software may contain either the location or qualifier attributes; product 
definitions for distributions shall not contain either the location or qualifier attri- 
butes. 
A PSF should not contain either the location or qualifier attributes; they shall be 
ignored when parsing the file. 
5.2.8 Subproduct Definition 
subproduct 
tag 
contents 
create-time 
description 
mod-t ime 
size 
title 
tag 
subproducts 
create-rime 
description 
mod-time 
size 
title 
INDEX and PSF files can contain subproduct definitions. The tag and contents 
attributes are required for all subproducts. 
Neither file contains the size attribute. The value of the size attribute is gen- 
erated dynamically based on the sizes of the filesets currently contained within 
the subproduct. 
An INDEX file for installed software shall contain a create-time attribute and a 
mod-time attribute for each subproduct. 
5.2.9 Fileset Definition 
fileset 
tag 
control-directory 
corequisites 
create-time 
description 
exrequisites 
is-reboo t 
is-kernel 
is-locatable 
location 
media-sequence-number 
mod-time 
prerequisites 
revision 
tag 
control-directory 
corequisites 
create-time 
description 
exrequisites 
is-reboot 
is-kernel 
is-locatable 
location 
media-sequence-number 
mod-time 
prerequisites 
revision 
5 Software Packaging Layout 

PART 2: SOFTWARE ADMINISTRATION 
583 
s i z e  
584 
state 
585 
t i t l e  
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
size 
state 
title 
INDEX and PSF files can contain fileset definitions. The tag and control-directory 
attributes are required for all filesets. 
The controlfiles and files attributes are not stored as attributes, but rather as 
control-file and file definitions. These attributes are not included in 
swlis t -v output. Rather, they are generated only by swlis t -a attribute. 
An INDEX file shall contain a size attribute for each defined fileset. Fileset 
definitions for distributions that span multiple media shall contain the 
media-sequence-number attribute. An INDEX file for installed-software shall 
contain a create-time and a mod-time attribute for each fileset. 
A PSF should not contain the location, media-sequence-number, size, or state 
attributes; they shall be ignored when parsing the file. The value of the size attri- 
bute is generated dynamically by swpackage based on the sizes of the files and 
control-files. 
5.2.10 Control-File Definition 
control-file 
tag 
cksum 
compressed-cksum 
compressed-size 
compression-state 
compression-type 
interpreter 
path 
revision 
s i z e  
source 
result 
tag 
cksum 
compressed-cksum 
compressed-size 
compression-state 
compression-type 
interpreter 
path 
revision 
size 
source 
result 
INFO and PSF files can contain control-file definitions. 
A PSF should not contain the cksum, compressed-cksum, compressed-size, 
compression-state, compression-type, size, or result attributes; they shall be 
ignored when parsing the file. The values of the size and cksum attributes are 
generated dynamically by swpackage based on the source file. A PSF shall con- 
tain a source attribute. A PSF can contain a path attribute. If it does not, 
swpackage shall use the basename obtained from the value of the source attri- 
bute as the value of the path attribute. A PSF can contain a tag attribute. If it 
does not, swpackage shall use the basename obtained from the value of the path 
attribute as the value of the tag attribute. The swpackage utility shall resolve 
the value of the tag attribute after it resolves the value of the path attribute. 
An INDEX file shall contain the tag, path, cksum, and size attributes. Control-file 
definitions for installed software shall also contain the result attribute. INDEX 
files should not contain the source attribute; it shall be ignored when parsing the 
file. 
The swpackage command automatically includes the INFO file itself as a control 
file and adds the tag, path, and size attributes for it. The value of the cksum attri- 
bute for the INFO control-file itself is not defined. An implementation can choose 
5.2 Software Definition File Format 
151 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
to store certain software object attributes, such as copyright, as control-files. 
5.2.1 1 File Definition 
f i l e  
path 
cksum 
compressed-cksum 
compressed-size 
compression-state 
compression-type 
gid 
group 
is-volatile 
link-source 
major 
minor 
mode 
m t  i m e  
owner 
revision 
s i z e  
source 
path 
cksum 
compressed-cksum 
compressed-size 
compression-state 
compression-type 
gid 
group 
is-volatile 
link-source 
major 
minor 
mode 
mtime 
owner 
revision 
size 
source 
fYPe 
uid 
INFO and PSF can contain file definitions. 
A PSF shall contain a source attribute. A PSF should not contain the cksum 
qompressed-cksum compressed-size, compression-state, compression-type, or size 
attributes; they shall be ignored when parsing the file. Device files (including the 
major and minor attributes) should not be defined in a PSF (but can be added via 
swmodify after being created by a configure script); they shall be ignored 
when parsing the file. The values of the size and cksum attributes are generated 
dynamically by swpackage based on the source file. A PSF can contain a path 
attribute, otherwise the source is used to defined the path by swpackage. A PSF 
can contain gid, group, link-source, mode, mtime, owner, type, and uid attributes, 
otherwise they are retrieved from the source file by swpackage. A PSF can con- 
tain is-volatile and revision attributes. Automatic determination of the file revi- 
sion is implementation defined. 
An INFO file should not contain the source attribute; it shall be ignored when 
parsing the file. Table 5-1 shows the required, optional, and non-applicable attri- 
butes for each of the file types in an INFO 
file. The file types are described in 3.13. 
Within a fileset, no more than one copy of a file shall be stored with the same 
path. 
Within a PSF file, if the same file is defined more than once, the attributes from 
the last definition shall be used and shall redefine the attributes previously 
defined. This action shall not cause additional copies of the file to be stored in the 
distribution. All attributes not specifically listed shall remain unchanged. 
5 Software Packaging Layout 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (El 
IEEE Std 1387.2-1995 
Table 5-1 - File Attributes for INFO File 
attribute 
type 
path 
size 
link-source 
mode 
owner 
P"-P 
uid 
gid 
cksum 
major 
minor 
is-volatile 
mtime 
revision 
Key: R: Required 0: Optional , Ignored 
5.2.12 Extended Control-File Definitions 
checkinstall 
preinstall 
postinstall 
verify 
fix 
checkremove 
preremove 
postremove 
configure 
unconfigure 
request 
unpreinstall 
unpostinstall 
space 
control-file 
source 
source 
source 
source 
source 
source 
source 
source 
source 
source 
source 
source 
source 
source 
source 
[path I 
[path I 
[path I 
[path I 
[path I 
[path] 
[path I 
[path I 
[path I 
[path I 
[path] 
[path] 
[path] 
[path I 
[path I 
A PSF can contain extended control-file definitions. Each control-file definition 
defines the source attribute (the source file) to be used for the script. The keyword 
(meaning checkinstall, p r e i n s t a l l ,  etc.) defines the tag of the script, which 
tells the utilities when to execute the script. 
If the optional path is supplied, it shall be the file name in the distribution (rela- 
tive to the control directory for the software containing this script) used to store 
the file; otherwise, the controlfile.tag attribute is used as the file name. This also 
allows a vendor to define one script to be executed for multiple tags. The script 
can determine the tag being executed by the SW-CONTROL-TAG environment 
variable. 
If the control-£ i l e  keyword is used, then the basename of the source attribute 
is the tag of the control-file. 
5.2 Software Definition File Format 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
5.2.13 Extended File Definitions 
A PSF can contain extended file definitions. The swpackage utility supports 
these extended file definition mechanisms: 
directory mapping 
A PSF can point the swpackage utility at a source directory con- 
taining the files for the fileset. In addition, a PSF can map this 
source directory to the appropriate (destination) directory containing 
this subset of the filesets files. 
recursive (implicit) file definition 
If a directory mapping is active, a PSF can direct the swpackage 
utility to include all files (recursively) from within the directory in 
the fileset. 
explicit file definition 
For all or some of the files in the fileset, a PSF can name each source 
file and destination path with a one line per file syntax. 
default permission definition 
For all or some of the files in the fileset, a PSF can define a default 
set of permissions. 
excluding files 
Files that otherwise would be included can be explicitly excluded. 
including files 
File definitions may be included from a separate file. 
These mechanisms can all be used in combination with the others. 
5.2.13.1 Directory Mapping 
directory 
source 
[path] 
This syntax defines a source directory under which subsequently listed files are 
located. In addition, the user can map the source directory to a destination direc- 
tory under which the packaged files will be located. 
The destination directory shall be an absolute pathname, and shall be used as a 
prefix to the path attribute for each of the files. 
The source directory can be either an absolute pathname, or a relative pathname. 
If relative, the swpackage utility interprets it relative to the current working 
directory in which the utility was invoked. 
If the source directory does not exist, the swpackage utility shall generate an 
error. 
5.2.13.2 Recursive File Definition 
f i l e  * 
This syntax directs the swpackage utility to include every file (and directory) 
within the current source directory in the fileset. The swpackage utility 
attempts to include the entire recursive contents of the source directory in the 
fileset. 
154 
5 Software Packaging Layout 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
The d i r e c t o r y  keyword shall be specified before the f i l e  * specification is 
used. After finishing the recursive processing of the source directory, the 
swpackage utility processes further specifications with respect to the original 
directory. 
All other attributes for the destination file object are taken from the source file, 
unless a f ile_permissions keyword is active. This keyword is described 
below. 
The user can specify multiple d i r e c t o r y  and f i l e  * pairs to gather all files 
from different source directories into a single fileset. 
5.2.13.3 Explicit File Definition 
file [-t type] [ - m  model 
[-o owner[,uid] ] 
[ - g  
group 1, gidl [ - n l  [ - v l  source [path] 
Instead of, or in addition to, the recursive file specification, the user can explicitly 
specify the files to be packaged into a fileset. 
This syntax may be used to redefine an attribute of a previously defined file. All 
attributes not specifically listed remain the same. 
The d i r e c t o r y  keyword can be used to define a source (and destination) for 
explicitly specified files. If no d i r e c t o r y  keyword is active, then the full source 
path and the absolute destination path (the path attribute) shall be specified for 
each file. 
The meaning of each of these fields is as follows: 
f i l e  
This keyword specifies an existing file or directory, perhaps within 
the currently active source directory, to include in the fileset. It can 
also specify a directory, hard link, or symbolic link that does not exist 
as a source file, but is created when the fileset is installed. 
source 
When specifylng an existing source file, this value defines the path to 
it. 
If this is a relative path, the swpackage utility searches for it rela- 
tive to the source directory set by the directory keyword. If no 
source directory is active, the swpackage utility searches for it rela- 
tive to the current working directory in which the utility was 
invoked. 
All attributes for the destination file object are taken from the source 
file, unless a f i l e g e r m i s s i o n s  keyword is active, or the -m, -0, 
or -g options are also included in the file specification. 
When specifylng a new directory to be created upon installation 
where there is no destination path specified, the source defines the 
path of the installed directory. When specifylng a new hard link or 
symbolic link to be created upon installation, the source defines the 
pathname of the installed file to use as the source for the new file. 
path 
When specifymg a new or existing source file, this value defines the 
destination path at which the file will be created or installed. If path 
is a relative path, the active destination directory set by the direc- 
t o r y  keyword shall be prefixed to it. If the path is relative, and no 
5.2 Sofiware Definition File Format 
155 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
destination directory is active, the swpackage utility shall generate 
an error. If the path is not specified, then the source is used as the 
path with the appropriate mapping done with the active destination 
directory (if any). 
- t type When creating a new directory, hard link or symbolic link (a file in 
the fileset that does not exist in the source), this option shall be 
specified to define the file type. The following file types can be 
created: 
d 
Create a directory. If only the source is specified, it is 
used as the path. Otherwise, the source is used to 
retrieve the attributes for the directory created at path. 
If the path is not specified, or any attributes, then 
default values of the attributes shall be implementation 
defined. 
h 
Create a hard link. Both the source and path shall be 
specified. The source is the pathname of the installed 
file object to be used as the source for the new hard link 
(the link-source attribute). 
s 
Create a symbolic link. Both the source and path shall 
be specified. The source is the pathname of the installed 
file object to be used as the source for the new symbolic 
link (the linksource attribute). 
Files with the types c (character special), b (block special), and p 
(named pipe I FIFO) are not supported by swpackage and swin- 
s t a l l  and can be created via a configure control script. In gen- 
eral, device files and pipes are created during system configuration 
on the system actually running the software. Also, there can be files 
of other types that the swpackage utility does not recognize and 
that shall therefore cause an error. 
-m mode This option defines the (octal) mode for a file or directory. 
-0 [owner] Luid 
This option defines the name or uid, or both, of the owner of the des- 
tination file. If only the owner is specified, then the owner and uid 
attributes are set for the destination file object based on the database 
of the packaging host. If only the uid is specified, it is set as the uid 
attribute for the destination object and no owner name is assigned. 
If both are specified, each sets the corresponding attribute for the file 
object. If neither are specified, then the owner and uid of the file 
shall be used as found in the file system of the packaging host. See 
4.5.7.3.3. 
During an installation, the owner attribute is used to set the owner 
name and uid unless the owner name is not defined in the target sys- 
tem user database. In this case, the value of the uid attribute is used 
to set the uid. 
-9 kroupl Ggidl 
This option defines the name or gid, or both, of the group of the desti- 
nation file. If only the group is specified, theh the group and gid 
attributes are set for the destination file object based on the database 
156 
5 Software Packaging Layout 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
of the packaging host. If only the group is specified, and it contains 
digits only, it is interpreted as the gid, and is set as the gid attribute 
for the destination object; no group name is assigned to the object. If 
both are specified, each sets the corresponding attribute for the file 
object. If neither are specified, then the group and gid of the file 
shall be used as found in the file system of the packaging host. See 
4.5.7.3.3. 
During an installation, the group attribute is used to set the group 
name and gid, unless the group name is not defined in the target sys- 
tem group database. In this case, the gid attribute is used to set the 
gid. 
-n 
This option indicates that the file is not compressible. 
- v 
The use of -v on a source line is used to specify that the file is vola- 
tile (contents, attributes or existence can change after installation). 
5.2.13.4 Default Permission Definition 
f ileqermissions [-m mode I -u umask] [ - o  [owner[, ] ] [uid] ] 
[ - g  [group[, ] ] [gid] ] 
A destination file object inherits the mode, owner, and group of the source file. 
The f i l e s e r m i s s i o n s  keyword can be specified as follows to set a default per- 
mission mask, owner, and group for all the files being packaged into the fileset: 
f i l e g e r m i s s i o n s  
This keyword only applies to the fileset it is defined in. Multiple 
f i l e s e r m i  s s ions can be specified, and subsequent definitions 
simply replace previous definitions. 
-m mode This option defines a default (octal) mode for all file objects. 
-u umask 
Instead of specifymg an octal mode as the default, the user can 
specify an octal urnask() value that gets "subtracted" from the mode 
of an existing source file, or applied for each nonexistent file, to gen- 
erate the mode of the destination file. 
By specifymg a urnask0 value the user can set a default mode for 
executable files, non-executable files, and directories. A specific mode 
can be set for any file, as described above. 
-0 [owner[,]] [uidl 
This option defines the name or uid, or both, of the owner of the des- 
tination file. See the discussion of the -0 option in 5.2.13.3. 
-g kroup[,ll kid1 
This option defines the name or gid, or both, of the group of the desti- 
nation file. See the discussion of the - g  option in 5.2.13.3. 
5.2.13.5 Excluding Files 
exclude source 
A file listed after the exclude keyword that was previously included, for example 
from a recursive file definition, is excluded from the list of files. 
5.2 SoRware Definition File Format 
157 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX 
SYSTEM ADMINISTRATION - 
If the source specifies a directory, then all files below that directory are excluded. 
5.2.13.6 Including Files 
file < includefile 
The file keyword can be used to include definitions for files from a separate 
include-file by specifymg a < (less than) character followed by the include-file. 
5.2.14 Space Control-file 
path 
[ + 1 - ] size 
For each path listed in the space file, the swinstall utility shall add the size, 
in bytes, to the disk space requirements. The size can be positive (reflecting the 
maximum transient or permanent disk space required for the install), or negative 
(reflecting space freed by one of the scripts executed by the swinstall com- 
mand). An implementation shall consider positive records and may consider nega- 
tive records. 
5.3 Serial Format and Multiple Media 
A distribution in the serial format of the software packaging layout is a bit-stream 
representation, implemented as a set of POSIX.l (2) extended cpio or extended 
tar archives which contain files in the directory structure of the software packag- 
ing layout defined in Section 5. 
A serial distribution can be stored on any serial medium. A serial distribution can 
also be stored in any file, within the file system, which supports the storing of 
POSIX.1(2) extended cpio or extended tar archives. How a system reads or 
writes to the different media devices is outside the scope of this part of ISOhEC 
15068. 
Implementations shall support serial distributions if the underlying operating sys- 
tem supports the pax utility, as defined in POSIX.2 (31, or otherwise supports 
reading and writing of the extended tar and extended cpio archives defined in 
POSIX.1{2]. If serial distributions are supported, the serial distribution formats 
supported shall include extended tar and extended cpio. 
The distribution is implemented as a set of one or more POSIX.1{2} extended 
cpio or extended tar archives. The archives reside on a set of one or more serial 
media, or in a file. Each media in a serial distribution shall contain one and only 
one archive. 
A distribution may span multiple media in a hierarchical structure. In this case, 
the set of files on any particular media, including the attributes defined in any 
software definition files, should be similar to that for a serial archive. In other 
words, the decision for which files are put on which media should be the same 
whether the distribution is serial or hierarchical. Space considerations on media 
may cause some differences. 
The following are the rules regarding ordering of files within serial distributions. 
These rules, including generation of the fileset.media~equence-number, are 
implemented by the swpackage utility. 
158 
5 Software Packaging Layout 

PART 2: SOFTWARE ADMINISTRATION 
ISOOEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
(1) The catalog files (which contain all the information describing the 
software contained in the distribution), as well as the control scripts, in 
this relative order. 
(a) The global INDEX file, as described in 5.1.1.1 
(b) The distribution files, as described in 5.1.1.2 
(c) The product catalog files, product by product, as described in 5.1.1.3 
[I] The product control files, as described in 5.1.1.4 
[21 The fileset control files, fileset by fileset, as described in 5.1.1.5 
(2) The actual software files, fileset by fileset, as described in 5.1.2 
(a) Prerequisites of filesets before the filesets that depend on them 
(b) Kernel filesets before non-kernel filesets (except where kernel 
filesets have prerequisites on non-kernel) 
(3) Each medium shall have (as its first file, if a serial medium) 
(a) A global INDEX file, catalog1INDEX that shall at least contain the 
distribution.uuid and media.sequence-number attributes (used to 
identify a particular media within a particular distribution) 
(4) Each archive shall start at the beginning of the medium. Multiple 
archives on one medium are not allowed. 
Additionally, in order to increase the usability of multiple media serial distribu- 
tions, the following guidelines should be used and in decreasing importance: 
- Each medium should contain complete files wherever possible. If a file is 
larger than the the capacity defined by the media-capacity option, then the 
behavior is implementation defined. 
- Each medium should contain complete filesets whenever possible or practi- 
cal. The fileset.media-sequence-number attribute is the number of the 
medium where the fileset begins. If a fileset is larger then the medium size, 
then the fileset.media-sequence-number attribute shall contain the list of 
media.sequence-numbers describing the media that contain this fileset. 
- Each medium should contain complete products whenever possible or prac- 
tical. 
- Each medium should contain needed dependencies whenever possible or 
practical. 
Thus, a conforming implementation shall be able to 
- Read the INDEX off of the first medium for the Selection Phase 
- Scan the first medium (and those following as needed) for the necessary 
catalog files for the Analysis Phase 
- Request the next needed medium for the next needed fileset based on 
mediasequence-number during the Execution Phase 
- Request the next medium when the fileset spans media 
5.3 Serial Format and Multiple Media 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
967 
Note that in all respects, a serial distribution shall conform to the specifications of 
968 
the extended cpio or extended tar archives. See 10.1.1 and 10.1.2 of 
969 
POSM.1 (21. This includes, but is not limited to, the following: 
970 
- Recording format 
971 
- Character sets 
5 Software Packaging Layout 

ISOflEC 15068-2: 1997 ( E )  
IEEE Std 1387.2-1995 
Annex A 
(informative) 
Bibliography 
Desktop Management Task Force Desktop Management 
Interface 
Specification, Version 1 .O, 29 April 1994. 
IS0 639: 1988, Code for the representation of names of languages.2) 
ISOAEC 2022: 1994, Information technology-Character code structure and 
extension techniques. 
IS0 2047: 1975, Information processing-Graphical 
representations for the 
control characters of the 7-bit coded character set. 
IS0 3166: 1993, Codes for the representation of names of countries. 
IS0 4217: 1995, Codes for the representation of currencies and funds. 
ISO/IEC 4873: 1991, Information technology-IS0 
8-bit code for informa- 
tion interchange-Structure and rules for implementation. 
ISOAEC 6429: 1992, Information technology-Control 
functions for coded 
character sets. 
ISO/IEC 6937: 1994, Information technology-Coded graphic character set 
for text communication-Latin 
alphabet. 
{BlO) IS0 8601: 1988, Data elements and interchange formats-Information 
interchange-Representation of dates and times. 
(B11) ISO/IEC 8806: 1991, 
Information 
technology-Computer 
graphics- 
Graphical Kernel System for Three Dimensions (GKS-3D) language 
bindings-Part 4:C 
(B12) IS0 8859, Information processing-8-bit 
single-byte coded graphic charac- 
ter sets. (Parts 1 to 10 published.) 
(B13) ISOAEC 9899: 1990, Programming ~ a n ~ u a ~ e s - ~ . ~ )  
1) DMTF documents can be obtained via the World Wide Web from h t  tp : / /www . dmt f . org / 
2) IS0 documents can be obtained from the IS0 office, 1 rue de Varembe, Case Postale 56, 
CH-1211, Geneve 20, SwitzerlandSuisse. 
3) IEC documents can be obtained from the IEC office, 3 rue de Varembe, Case Postale 131, 
CH-1211, Genhve 20, SwitzerlandSuisse. 
Annex A Bibliography 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
(B141 ISOAEC 10164-18: 1997, Information technology - Open Systems Intercon- 
nection - Systems Management - Part 18: Software Management Func- 
tion. 
(B151 ISO/IEC 10646-1: 1993, Information technology-Universal 
Multiple-Octet 
Coded Character Set (UCS)-Part 
1: Architecture and Basic Multilingual 
Plane. 
(B16) ISOIIEC TR 10000-1: 1992, Information technology-Framework and taxon- 
omy of International Standardized Profiles-Part 1: General principles and 
documentation framework. 
(B17) ISODEC JTC 1 N1335, Final Report of ISOIIEC JTC I TSG-1 on Stan- 
dards necessary to define Interfaces for Application Portability (UP). 
(B18) International Organization for Standardization/Association Frangaise de 
Normalisation. ' Dictionary 
of 
Computer 
Science IDictionnaire 
de 
L'lnformatique. Geneva/Paris: ISOIAFNOR, 1989. 
(B19) IEEE Std 100-1992, IEEE Standard Dictionary of Electrical and Electron- 
ics ~ e r m s . ~ )  
(B20) IEEE Std 1003.0-1995, IEEE Guide to the P O S I 2  Open Systems Environ- 
ment (OSE). 
(B21) IEEE P1003.la/D12, Draft Revision to Information technology-Portable 
Operating System Interface (POSIX") Part 1: System Application Program 
Interface (API) [C ~anguagep) 
(B221 IEEE P2003lD7, Standard for Information Technology-Test Methods for 
Measuring Conformance to P O S E .  
(B23) IEEE P2003.2/Dll, Standard for Information Technology-Test 
Methods 
for Measuring Conformance to POSIX"-Part 2: Shell and Utilities. 
(B24) RFC 819, Su, Z. and Postel, J. B. Domain naming convention for Internet 
user applications. 6, 
(B25) RFC 822, Crocker, D. Standard for the format of ARPA Internet text mes- 
sages. 
(B26) RFC 920, Postel, J. B. and Reynolds, J. K. Domain requirements. 
(B27) RFC 921, Postel, J. B. Domain name system implementation schedule - 
revised. 
(B28) RFC 1123, Braden, R. T. Requirements for Internet hosts - application 
and support. 
4) IEEE publications can be obtained from IEEE Publications, 445 Hoes Lane, P.O. Box 1331, 
Piscataway, NJ 08855-1331. Telephone: 1 (800) 678-IEEE or +1 (908) 981-1393 (outside US). 
5) Numbers preceeded by P are IEEE authorized standards projects that were not approved by the 
IEEE Standards Board at the time this publication went to press. For information about 
obtaining drafts, contact the IEEE. 
6) Internet Requests for Comments (RFC) are available from the DDN Network Information 
Center, SRI International, Menlo Park, CA, USA 94025. 
A Bibliography 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
(B29) RFC 1514, Grillo, P. and Waldbusser, S. Host Resources MIB 
(B30) American Telephone and Telegraph Company. 
System V Interface 
Definition (SVID), Issues 2 and 3. Morristown, NJ: UNM Press, 1986, 
1989.~' 
(B31) University of California at Berkeley-Computer 
Science Research Group. 
4.3 Berkeley Software Distribution, Virtual VAX-11 Version. Berkeley, CA: 
The Regents of the University of California, April 1986. 
(B32) WOpen Company, Ltd. XIOpen Preliminary Specification, Systems 
Management: Distributed Software Administration. Reading, UK: WOpen 
Company, 1995. 
(B33) XIOpen 
Company, 
Ltd. 
XIOpen 
Guide, 
Systems 
Management: 
Identification of Management Services. Reading, UK: WOpen Company, 
1993. 
(B34) XJOpen Company, Ltd. XIOpen Guide, Systems Management: Managed 
Object Guide. Reading, UK: XlOpen Company, 1993. 
(B35) WOpen Company, Ltd. XIOpen CAE Specification, Systems Management: 
Management Protocols M I .  Reading, UK: WOpen Company, 1994. 
IB36) WOpen Company, Ltd. XIOpen Guide, Systems Management: Reference 
Model. Reading, UK: WOpen Company, 1993. 
(B37) XIOpen Company, Ltd. XIOpen Preliminary Specification, The Common 
Object Request Broker: Architecture and Specification. Reading, UK: 
XlOpen Company, 1993. 
(B38) WOpen Company, Ltd. XIOpen Portability Guide, Issue 2. Amsterdam: 
Elsevier Science Publishers, 1987. 
IB39) WOpen Company, Ltd. XIOpen Specification, XIOpen Portability Guide, 
Issue 3. Reading, UK: XlOpen Company, 1992. 
(B40) XtOpen Company, Ltd. XIOpen Specification, XPG4. Reading, UK: 
104 
7) This is one of several documents that represent an industry specification in a related area. The 
105 
creators of such documents may be able to identify newer versions that may be interesting. 
Annex A Bibliography 


ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Annex B 
(informative) 
Rationale and Notes 
B.l General 
B.l.l Scope 
A number of areas are not covered in this part of ISOIIEC 15068. A few things 
(such as physical media) are truly outside the scope of this part of ISOAEC 15068. 
However, some things are listed as either undefined or unspecified due to time 
and resource constraints as well as the inability to reach consensus. Areas 
thought to be the subject of future revisions or extensions to this part of ISOAEC 
15068 include the archiving of compressed files, partial product replacement, and 
end user customization. Standardizing the current content of this part of ISO/IEC 
15068 was considered the most essential task, providing a basis for future imple- 
mentation and for future development of standards. 
The requirement for all POSM.2 (3) utilities and all the file system features of 
POSM.1{2} generated significant discussion. The assertion was made that the 
underlying operating system need not be fully POSM.l (2) or POSIX.2 (31 confor- 
mant. With the requirement left as it is, implementation on such systems as 
DOS, OSl2, MVS, VMS, etc., is feasible. Some guidance, however, should be sup- 
plied by implementors of this part of ISO/IEC 15068 to those who write scripts to 
be packaged in distributions. It is actually those scripts that have significant 
dependencies on the features of the underlying operating system. Assured porta- 
bility of scripts is not possible without assurance of an interpreter and utilities. 
By allowing other interpreters, some concession has been made to assist in 
managing existing software in the real world. The best portability assumption is 
that the checkinstall, p r e i n s t a l l ,  and p o s t i n s t a l l  scripts should not 
depend on features beyond those of POSM.2 (3) or POSM.1{2). The configure 
scripts run only on the systems that actually use the software, hence, they need 
not be as portable as the preinstall and postinstall scripts. 
This part of ISO/IEC 15068 specifies distributed operations without specifymg the 
mechanism for such. Clearly, this could represent a serious problem for intero- 
perability. It was noted that the existing practices used remote procedure calls, 
with technologies that are not currently specified as formal standards. References 
to such documents were recognized as impediments to formal international stan- 
dardization. The work to specify interoperability for this part of ISOAEC 15068 is 
in progress at XlOpen and the reader is referred to {B32]. 
B.l General 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
B.1.2 Normative References 
There is no additional rationale provided for this clause. 
B.1.3 Conformance 
The conformance classes defined in this part of ISOIIEC 15068 are derived some- 
what from the examples of POSM.l (2) and POSM.2 {3), with variations to support 
unique situations. This part of ISOfIEC 15068 contains no API at all, which (in the 
minds of many) eliminates the Application Conformance classes of POSM.1(2) and 
POSM.2 {3). Implementation Conformance is based on implementation of the util- 
ities defined in this part of ISOlIEC 15068, and on the proper POSM.1{2) and 
POSM.2 (3) support from the operating system. There is a new conformance class, 
Distribution Conformance, to allow suppliers of software to package their software 
in a conformant manner. Distributions have many of the characteristics of appli- 
cations using POSM.2 (3), since the distributions contain executables (presumably 
shell scripts). 
B.1.3.1 Implementation Conformance 
This class requires support of all the POSM.1{2) and POSM.2 (3) functionality 
referenced in this part of ISOIIEC 15068. The requirements from POSM.l (2) are 
primarily for hierarchical file system support, including the file attributes of 
owner, group, and mode. In addition, the POSM.2 (3) utilities are required to sup- 
port portable scripts. 
This assures that every Conforming Implementation will be able to install any 
Strictly Conforming Distribution properly, including the proper settings of file 
attributes. One might question this need if one is installing software particular to 
a system that is not POSM.1{2) conformant. It is the pervasive ability to serve 
the software over a distributed file system that makes critical the need for all Con- 
forming Implementations to understand at least one set of well specified operating 
system behavior. The one set of operating system behavior we have chosen is 
POSM.l (2). The need for POSM.2 (31 is primarily driven by the presence of exe- 
cutable control files within distributions. At least one guaranteed mechanism is 
required to invoke those files, and the shell interpreter was chosen for that pur- 
pose. Further, developers of portable scripts need a guarantee of some basic set of 
utilities with which to work, and the POSM.2 (3) utilities were chosen for that pur- 
pose. 
A Conforming Implementation need not include the POSM.l (2) and POSM.2 (3) 
implementation itself, but shall document how such can be obtained for the sys- 
tems that the implementation supports. It is reasonable to assume that a given 
implementation, conformant in the presence of proper POSM.1 (2) and POSM.2 (3) 
support from the operating system, may still operate correctly on some distribu- 
tions even when the proper operating system support is not present in full or in 
part. 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
B.1.3.2 Distribution Conformance 
B.1.3.2.1 Strictly Conforming POSIX.7.2 Distribution 
The Strictly Conforming Distribution class is intended to provide the highest 
degree of portability for a distribution. Conformance to this class guarantees that 
any conforming implementation can install this software properly. 
B.1.3.2.2 Conforming POSM.7.2 Distribution 
The Conforming Distribution class is intended to guarantee that any conforming 
implementation can copy or install this software properly. This class also allows 
for additional functionality, which may come either from implementations that 
can take advantage of additional attributes, or from software being able to store 
and retrieve that information from any Conforming Implementation. 
B.1.3.2.3 Conforming POSM.7.2 Distribution Using Extensions 
This class is intended to allow evolution of this standard, but in an open, con- 
sistent and well-documented manner. Examples of this are compressed media or 
bootable serial media. Both of these are features were recognized as important, 
but upon which consensus was not reached. 
This class also provides flexibility for distributions needing to conform to other 
constraints related to the support of POSM.l (2) and POSM.2 (3). Users among 
the developers of this part of ISOIIEC 15068 strongly voiced the desire to support 
interpreters other than sh. Support for other interpreters also permits the use of 
such distributions on systems, such as DOS, which are not conformant with 
POSIX.1 (21 or POSM.2 (3). 
B.1.3.2.4 Documentation 
There is no additional rationale provided for this subclause. 
B.1.4 Test Methods 
There is no additional rationale provided for this clause. 
B.2 Terminology and General Requirements 
B.2.1 Conventions 
B.2.1.1 Editorial Conventions 
There is no additional rationale provided for this subclause. 
B.2 Terminology and General Requirements 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
107 
B.2.1.2 Grammar Conventions 
108 
There is no additional rationale provided for this subclause. 
109 
B.2.2 Definitions 
110 
In defining standards for software administration, the concept of roles is used to 
111 
specify the way interactions occur in order for software administration to take 
112 
place. Figure B-1 shows the various roles, including those that are outside the 
113 
scope of this part of ISO/IEC 15068, as well as those within that scope. 
/ 
Manager 
I 
' . . swinstall, swcopy, swremove 
I 
swpackage, , 
' 
; swlist 
. , swlist, swmodify 
, 
I swcopy 
'. , swverify 
I swinstall 
* - . 
_ swconfig 
, 
1 -  
data flow 
Client 
. 
- - - - - - control flow 
out of scope 
................................................ 
. 
L' 
i 
. 
127 
Figure B-1 - Roles in Software Administration 
Package 
role 
1-28 
Distributed applications require actions to be performed in more than one place 
129 
(system or directory). These distributed portions have often been referred to as 
130 
client and server. Software administration tasks also are often initiated by 
different users at different times. Since the terms client and server have imple- 
mentation implications beyond the scope of this part of ISOJIEC 15068, the more 
168 
B Rationale and Notes 
swinstall, swremove 
swlist, swmodify 
Target 
role 
Source 
role 
SWCOPY 
swinstall > 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
neutral concept of role is introduced. This stems from a need to refer to things 
that occur logically, if not physically, on what might be thought of as a client or 
server. In the context of this part of ISO/IEC 15068, roles are simply a convenient 
way of referring to where function is apparent, with no implication for how this is 
actually implemented. 
It may be helpful to think of roles as separate processes, one per role, but that is 
only one possible implementation. Roles may operate on separate systems, or 
hosts, although all roles may operate on the same host. For example, the pack- 
ager role creates an initial distribution. When copying this distribution, the 
source role provides read access to the distribution files, while the target role 
writes the new copy. This new copy may then be read by another source role for 
another install or copy. 
For any implementation, a role consists of the entire set of tasks that may occur 
within the role. A task is a set of well-defined behaviors and state changes in the 
managed objects. Tasks are initiated by the system administrator using a specific 
command in the command line interface (CLI). Tasks are defined by this part of 
ISO/IEC 15068 in terms of the state changes on the software objects on target 
hosts. 
As each task proceeds, different roles are involved. These roles may be realized on 
a single machine or could involve a different machine for each role. 
Developer Role 
Where the software is developed, tested, and main- 
tained. 
This role is outside the scope of this part of ISO/IEC 
15068. In Figure B-1, software is developed by the 
development role in some environment that results in it 
being in the developed state. 
Manager Role 
Where each task is initiated and is concerned with tak- 
ing appropriate action at the completion or failure of a 
task. 
Manager control is understood as a more common need 
than target control, so at least that should be supported. 
For this reason, the manager role sets the options for a 
task, and each of the target hosts implements those 
options. So, any extension involves a set of ways to 
define selected control over particular policies. A design 
for this has not been pursued beyond recognizing the 
complexity of the problem. 
The manager role provides the means of controlling the 
way software is created, transferred, and installed. In 
particular it provides an administrative interface to the 
other roles, enabling their activities to be controlled in a 
coordinated manner. 
Packager Role 
Where software that has been developed is organized in 
a form suitable for distribution. 
The packager role transforms a product from the format 
produced by the developer role to the format specified by 
B.2 Terminology and General Requirements 
169 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
189 
Source Role 
190 
191 
192 
198 
Target Role 
215 
Client Role 
216 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
this part of ISO/IEC 15068 for use by the next stage of 
the process, the source, and manager roles. The pack- 
ager role defines the requirements for this transforma- 
tion to be successful - the input (the product 
specification file, and the files it describes), the com- 
mand line interface to initiate the transformation 
(swpackage) utility, and the output of the packaging 
task (packaging layout). 
Two distinct, but related, formats for packaged software 
are supported by this part of ISOIIEC 15068 - a struc- 
tured format residing within a POSM.1 (21 hierarchical 
file system (such as disk, CD, etc.), and a bit stream 
representation residing on any serial device or file (such 
as tape, tar archive file, etc.). 
Where the software exists in a form suitable for distri- 
bution and hence forms a context for the establishment 
of a repository of software from which the manager may 
choose to distribute to the target. 
Software exists in the source until it is removed by a 
task initiated by the manager. 
The source role provides a repository where software 
may be stored, and provides access for those roles that 
require the software. 
The target of a task. 
For example, when installing software, the target is 
where software is installed after having been delivered 
from a source. As another example, the target for a 
copy task command refers to the distribution where pro- 
ducts are added. For management tasks like removing 
software, 
the 
target 
refers 
to 
either 
the 
installed-software objects or the distributions from 
which software is being removed. 
Part of the distributed model involves the target role 
granting permission to the manager role to perform 
various software administration tasks. Authority for 
certain classes of tasks may be individually controllable, 
for example, modifying vs. listing installed products. 
While it is entirely conceivable that the target may want 
to restrict the way authorized tasks are performed, it is 
beyond the scope of this part of ISO/IEC 15068. 
Where the software is actually executed or used, which 
may be different from where it is actually installed. 
Software is configured for use on the client. 
An example is installing for an environment where 
many hosts share software from one system. Diskless 
systems are one example of systems that do such 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
sharing. A manager role initiates the install task with 
the source role serving the software from the distribu- 
tion and the target role installing the software on a 
fileserver. After the installation is complete, then a 
client role on each client sharing this software performs 
configuration for the shared software and the client 
host. 
It is important to understand the difference between the target and client roles. 
The client role is where the software is actually used and where configuration of 
the software takes place, while the target role is where the software is installed. 
Although in many cases these are the same machines, in some cases they are 
different and the separation of configuration from installation is important. Each 
target from the targets operand of an install or configure task may identify a tar- 
get role (if installing but not configuring), a client role (if just configuring), or both 
(if installing and configuring). 
Two examples of when these roles refer to different machines are: 
- Proxy install (installing on one system for use by another system) where 
configuration of the software is done separately, because the target may not 
have the necessary capabilities or information, or both, for configuring the 
client. 
- The target is a file server, and there are multiple clients that access the 
software installed on the file server. Each client may require separate 
configuration as targets of swconf ig. 
Figure B-1 shows a split between the manager role and the other roles. The 
administrative interface to software administration is provided in the manager 
role, from which the individual tasks that take place in the other roles are con- 
trolled. 
This part of ISOIIEC 15068 defines a set of utilities that is such an administrative 
interface. These utilities provide basic facilities for controlling the individual 
tasks. Other management applications may be built that provide much more 
comprehensive software administration facilities. This part of ISOtIEC 15068 
defines facilities that enable management applications to control software 
administration across any number of systems with conforming implementations. 
One item of note among the general terms is the definition of symbolic link (see 
2.2.2.99). While not yet standardized (see POSKla {B21)), symbolic links are an 
entrenched part of existing practice. This part of ISOIIEC 15068 makes no 
attempt to independently define symbolic links. Rather, the functional charac- 
teristics of symbolic links are undefined. 
B.2 Terminology and General Requirements 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
257 
B.3 Software Structures 
258 
An example of the structure of the software objects for this part of ISOJIEC 15068 
259 
is illustrated in Figure B-2. 
distribution 0 lcd 
264 
Figure B-2 - Example of Software Structure 
265 
At the top of the hierarchy is a host, which is a system that conforms to this part 
266 
of ISO/IEC 15068. It is the starting point for finding all the software on that sys- 
267 
tem that falls within this part of ISOAEC 15068. A host contains 
268 
software~collections. 
26s 
There are two distinct types of software~collections, as listed in the following, that 
270 
may exist within a conformant system: 
271 
distribution 
A distribution consists of software products, in a form 
272 
ready for installation. A distribution may also contain 
273 
software bundles. There may be many distributions 
274 
within a host. 
275 
installed-software 
An installed-software object consists of products 
276 
installed from a distribution. An installed-software 
277 
object may also contain software bundles. There may be 
278 
other installed-software objects for use by this system 
279 
or for other systems. 
280 
Software is organized into a hierarchy of objects, as described in the following, 
281 
that are operated on by the utilities defined in this part of ISOIIEC 15068: 
282 
product 
A product consists of filesets and control scripts, plus all 
the associated metadata. The content of a product may 
be specified as a collection of subproducts, filesets, or a 
172 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
combination of the two. 
bundle 
A bundle is a grouping of other software objects and is a 
convenient way to reference a set of software. 
fileset 
A fileset consists of the actual files plus control scripts. 
Filesets are generally the lowest level of software object 
that can be operated on by the utilities. 
subproduct 
Subproducts are a grouping of other subproducts, or of 
filesets, or of some combination, that resolve to a group 
of filesets. Subproducts are a convenient way to aggre- 
gate filesets. 
The software-files define the files and control-files that are contained in the 
software objects that are operated on during a software administration utility. 
There are two classes of software-files as described in the following: 
control-file 
Control-files consist of control scripts and other files 
that are used in various ways by the utilities. Control 
scripts are executed by the utilities at various points in 
a task. Control scripts provide a way to perform steps, 
in addition to those executed by the utilities, at various 
points in the task such as preinstall checking, postin- 
stall customization, configuration, and verification. 
Either a single script with multiple entry points, or mul- 
tiple scripts can be defined. 
file 
Most control scripts are run on the target, which may be 
a different architecture than the client on which the 
software operates. 
They should, therefore, use 
POSIX.2 (3) utilities, except where they can determine 
that they are running on the client. 
In addition to scripts, other control-files provide input 
to the control scripts, or to the utilities directly (e.g., the 
response and space control-files). 
Files are the lowest level of object defined by this part of 
ISO/IEC 15068. Files contain the attributes describing 
the file including the contents of the file and its installed 
location. 
The distributions and installed-software objects are the sources or targets of a 
software administration command. The software objects (products, filesets, bun- 
dles, and subproducts) are the objects that are being applied to those targets. 
This part of ISOIIEC 15068 describes the structure and the attributes for 
software-collections, software objects, and software-files. It also describes the 
behaviors for the utilities that operate on these objects. However, these structure 
definitions are not managed object classes in the IS0 sense because the behaviors 
are not described in terms of methods within object classes. 
NOTE: Object classes are templates for the creation of object instances. They are analogous to the 
definition statements used in programming languages to define data structures that will be created 
later. Objects contain more than data structures, in that they also possess methods (procedures 
that are executed by objects). A well-formed object class has methods defined that handle all object 
B.3 Software Structures 
173 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
data manipulation, including creation, modification, and listing, so that the actual storage of the 
data is appropriately hidden from the application using the objects. 
Figure B-3 shows the components of the software object hierarchy. The contain- 
ment arrows designate objects that are defined within the context of their contain- 
ing objects. An object can only exist within one containing object. The identifier of 
an object (for example, the tag attribute of a fileset) only needs to be unique within 
the scope of the containing object. 
The reference arrows designate objects that are included when this object is 
operated on. An object may be referred to by more than one object. Bundles need 
not refer to entire products, but can refer to individual filesets or subproducts. 
Fileset and subproduct objects can be referenced directly by bundles by also iden- 
tifylng the product of which the fileset or subproduct is a part. 
Figure B-4 shows the software administration common classes and the software 
objects that inherit attributes from these common classes. 
Interoperability between implementations of this part of ISO/IEC 15068 may be 
achieved through the definition of methods for the first two of these common 
classes, software-collections and software. The software-collections are the 
source and target objects for software administration, while the software objects 
are the objects that are operated on within the context of the software-collections. 
Operations on individual software-files independent of operations on software 
objects is undefined. 
This part of ISO/IEC 15068 also does not define how remote file systems are 
managed. In the simplest case, each file system is "local" to a single host, and all 
installations may be directed to the file system through an agent process on that 
host. Thus, files on a file system are contained within one of the installed 
software collections contained below that host. On the other hand, an implemen- 
tation may also choose to allow installation to a remote file system over a remote 
file system protocol. That is, the target process is running on a host that is 
different from the one that contains the file system. In this case, the files on that 
file system may be contained within the same software collection as before, or may 
be contained within a local software collection. In another implementation, all 
software collections may be stored within a global naming service instead of below 
any particular host. 
An implementation may choose to define a software host object, or manage 
software as part of a more general host object. The attributes of a host object that 
are of interest to this part of ISO/IEC 15068 are shown in the following table: 
The following are the attributes of the hosts that contain software-collections 
managed by this part of ISOAEC 15068: 
distributions The list of distribution.path attributes for distributions in the 
software host object. 
These describe the PATHNAME portion of a software-collection 
source or target. 
host 
Identifier used to specify the host portion of a software source or 
target. 
Identification of a remote host system is dependent on the net- 
working services implementation and thus the syntax and 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOIIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Software 
Hosts 
Software 
Collections 
Software 
Software 
Files 
Distribution .I; 
I 
(same objects as 
Installed Software) 
containment 
- - - - - > 
reference 
Installed 
Software 
Figure B-3 - Software Object Containment 
semantics of the host name is undefined within this part of 
ISOIIEC 15068. 
installed-software 
The list of installed-software.path and installed-software.catalog 
attributes for installed-software objects in the software host 
object. 
These describe the PATHNAME portion of a software-collection 
target. 
machine-type 
Corresponds to the machine member of the uname0 structure 
B.3 Software Structures 
175 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE SYSTEM ADMINISTRATION - 
Software Collection 
Distribution 
Installed Software 
Software 
Product 
Bundle 
Fileset 
Subproduct I 
Software File 
Control File 
Figure B-4 - Software Object Inheritance 
defined in 4.4.1 of POSM. 
1 (2). 
It is the hardware type on which the system is running. 
Corresponds to the sysname member of the uname0 structure 
defined in 4.4.1 of POSM.l (2). 
It is the name of this implementation of the operating system. 
Corresponds to the release member of the uname0 structure 
defined in 4.4.1 of POSM.l (2). 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Table B-1 - Possible Attributes of a Host Class 
Attribute 
host 
0s-name 
0s-release 
0s-version 
machine-type 
It is the release level of the operating system implementation. 
distributions 
installed-software 
0s-version 
Corresponds to the version member of the uname() structure 
defined in 4.4.1 of POSE. 1 {2}. 
Length 
Undefined 
32 
32 
32 
32 
It is the version level of this release of the operating system. 
Undefined 
Undefined 
B.3.1 Software-Collection 
Permitted Values 
Portable character set 
Portable character set 
Portable character set 
Portable character set 
Portable character set 
This class definition exists for convenience in defining the classes that inherit 
from it. It is not intended that any direct instances of this class be created, but 
only of the classes that inherit from it. 
Default Value 
None 
None 
None 
None 
None 
List of distribution directories 
List of installed-software direc- 
tones and catalog identifiers 
Multiple versions of products and bundles are possible when subsequent releases 
of a product or bundle have different revision numbers, and when products or bun- 
dles targeted for different machine types or other OS attributes define the archi- 
tecture attribute differently. 
Empty list 
Empty list 
The layout-version attribute is the version number of this part of ISOIIEC 15068 to 
which the distribution conforms. The name of this part of ISOIIEC 15068 (e.g., 
P1387.2-19xx) was considered but there was concern that the delay between IEEE 
acceptance and IS0 acceptance would make it hard to pick the year correctly. It 
is not clear when to change the number from 1.0 to 1.1 or even from 1.x to 2.0. 
It is possible for an INDEX file describing a distribution to contain products with 
different values of layout-version. The software-collection layout-version refers 
only to the format of the distribution attributes and the product keyword. After 
the product keyword, the product layout-version defines the format of the 
definitions of all objects within that product. 
B.3.2 Distribution 
POSM.l (21 allows for different pathname and filename sizes. Thus it is possible 
for a distribution to be created on one system and not be readable or installed on 
another system (each of which conforms with this part of ISOIIEC 15068) because 
of differences in their POSM.1 (2) {NAME-MAX} and {PATH-MAX). Considera- 
tion was given to attributes defining the longest sizes of file names and paths on a 
distribution, but these were not included since their use could neither ensure 
failure nor success of installing or copying a particular product from the distribu- 
tion. Another issue implementors should consider is the maximum name and 
B.3 Software Structures 
177 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
path that may be contained within a supported archive. 
The need for the media-sequence-number attribute is to number the tapes (or 
disks or whatever) if a distribution is on more than one of them. If there is only 
one, then its number is 1. 
The following attributes at one point were listed as distribution attributes. How- 
ever, it was determined that the only time it could be guaranteed that these attri- 
butes were accurate was for an initial distribution definition. As soon as a 
swcopy or swremove operation occurred on a distribution, the attributes could 
be invalid because it would be impossible to modify these attributes in any logical 
manner based on the operation. It is recognized that these attributes are valuable 
and many vendors may choose to put them in as vendor extensions. 
tag 
title 
description 
revision 
media-type 
copyright 
create-time 
number 
architecture 
A short name associated with the distribution, used for selecting 
the distribution from the command line 
A longer name used for display purposes. 
A more detailed description of the contents of the distribution. 
A revision associated with the distribution. 
Describes the type of media being used (e.g., CD-ROM, 8 mm, 
etc.) 
The copyright notice for the distribution. 
The date, in seconds since the Epoch, when the distribution was 
made. 
' 
The vendor part number for the distribution. 
A sequence of characters used by a vendor to describe the 
machine or product. 
This is presumably more "user friendly" than the values 
returned by the uname utility. 
Usually distributions will be created upon creation of the first product with 
swpackage or swcopy. Usually distributions will be removed as a part of remov- 
ing the last product with swremove. An implementation may choose to provide 
more explicit control for creation and deletion of empty distributions. The 
swcopy and swremove utilities should be used for this purpose. The swrnodi f y 
utility may also be used. 
B.3.3 Media 
There is no additional rationale provided for this clause. 
B.3.4 Installed-Software 
This class definition exists for convenience in defining the classes that inherit 
from it. It is not intended that any direct instances of this class be created, but 
only of the classes that inherit from it. 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
The installed-software catalog may be located by something as simple as a path- 
name where the catalog is stored as a file, or it could be located in a more compli- 
cated fashion such as with a key from a directory service used to identify all or 
part of a database. 
B.3.5 Vendor 
The vendor.tag attribute is intended to distinguish software objects from different 
vendors that happen to have the same product.tag. A vendor should attempt to 
choose a vendor.tag that is unique among all vendors. 
B.3.6 Software 
This class definition exists for convenience in defining the classes that inherit 
from it. It is not intended that any direct instances of this class be created, but 
only of the classes that inherit from it. 
This standard has defined four related software objects - products, filesets, bun- 
dles, and subproducts. See Figure B-4. Implementations are encouraged to 
present these to the user as hierarchy of similar "software" objects, and to actually 
implement these so that they differ only as needed. That is to say, an implemen- 
tation should use inheritance from a common class as much as possible. The 
rationale for the four differently named software objects is as follows: 
- Products and filesets are concepts firmly entrenched in existing practice. 
All of the many practices that have contributed to this standard have 
included these two levels. Manageable software objects necessarily includes 
some files to manage. This is the basis of a software product. Additionally, 
most application software has both required and optional pieces, so often 
only a subset of the product may be installed. Thus, a fileset is chosen as a 
"set of files" and a product is a collection of filesets that have a number of 
shared attributes, and are distributed in a single distribution (usually from 
a single vendor). 
- It was agreed that a "recursive notational convenience" was very desirable. 
Additionally, many (but not all) existing practices had realized the need for 
various overlapping groupings of software into new "configurations." Bun- 
dles and subproducts are merely "macro" or "recursive" products and 
filesets, respectively. Just as products and filesets are a bit different, the 
use of bundles and subproducts are a bit different. Bundles provide a way 
to make products out of existing products or parts of products. Subproducts 
provide a way to provide selectable units that may overlap in fileset con- 
tents. For example, a fileset may be part of "runtime" support as well as 
"development" environment subproducts. Finally, bundles and subproducts 
are recursive in that they may contain other bundles and subproducts, 
respectively. 
- The containment of filesets and subproducts within products allows for 
derived naming of components of a product - that is, a simple tag for a 
component relative to a more complex name (tag, revision, vendor-tag, 
architecture) for a product. In addition, this leads to distributions with a 
simple directory structure for filesets within products. 
B.3 Software Structures 
179 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
The need to localize the following descriptive software and vendor attributes was 
recognized - 
title, description and copyright. However, since the existing practice 
for localization of software information files in portable media is immature, this 
has been deferred to a possible future revision of this part of ISOIIEC 15068. 
Until a future revision of this part of ISOIIEC 15068 addresses localization, one 
recommended way to internationalize these attributes is to create vendor-defined 
attributes with the format 
keyword.<LANG> 
where keyword is "description", "title", or "copyright", and <LANG> is the value of 
the LANG environment variable. An implementation should then recognize if 
LANG is set to a value other than its default and search for a corresponding attri- 
bute. If that attribute does not exist, then the default one will be used. For exam- 
ple 
product 
tag Greatproduct 
title "This is great!" 
title.FRENCH "C'est magnifique!" 
title.GERMAN "Sehr gut!" 
description"Long boring paragraph why this is great" 
description.FRENCH "... 
description.GERMAN '... 
. . . 
Note that the tag, revision, and other attributes that affect the defined behavior of 
the implementation, shall not be internationalized. For this revision of this part 
of ISO/IEC 15068, this includes all defined attributes except title, description, and 
copyright. 
The size for the software may be larger than that supported by the POSM.lI2) 
size-t structure since software can contain many files. It is recommended that an 
implementation allocate at least 64 b for the internal storage of the software size 
attribute. 
An effort has been made to support the attributes needed by the Desktop Manage- 
ment Task Force (DMTF) {Bl}. and the Internet Host Resources MIB (RFC 1514) 
(B29). The information requested by the two is similar. This discussion only men- 
tions one of the two (DMTF), but is applicable to both. 
The DMTF Component ID Group contains the required attributes. The mapping 
between software attributes and those for the Component ID Group can be 
derived as shown in the following table: 
Table B-2 - Mapping from Software to DMTF Component ID 
564 
Note that create-date, shown in Table B-2, is not really an attribute. However, it 
behaves as as an attribute when executing swlis t -a create-date . 
DMTF Attribute 
Manufacturer 
l'roduct 
Version 
Serial Number 
Installation 
Verify 
180 
B Rationale and Notes 
POSIX.7.2 Attribute 
vendor-title 
title 
revision 
number 
creakdate 
(swverify) 
POSE Example 
Any Computer System, Inc. 
Widget Maker 
A. 10.0 
~1234-13245 
199306291000.00 
0 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Tymg DMTF Verify to swverify (and s w l i s t )  execution on the software object 
seems closest to the intention of DMTF. DMTF defines the followingvalues: 
Value 
----- 
0 
1 
2 
4 
5 
6 
7 
Meaning 
- - - - - - - - 
an error occurred; check status code 
component does not exist 
verify not supported 
component exists, functionality untested 
component exists, functionality unknown 
component exists, functionality no good 
component exists, functionality good 
The swverify command can generate return codes for DMTF value 6 (return 
code 1) and value 7 (return code 0). The s w l i s t  command can be used to test for 
existence, DMTF 1. A lack of v e r i f y  scripts could be related to DMTF 2 or 
DMTF 7. 
B.3.7 Products 
The value of the revision attribute is interpreted as a . (period) separated string, 
as defined in 3.7 and further in 4.1.4.1. This definition permits the use of such a 
string, but does not require it. The string can be constructed entirely without the 
use of periods. An example of the comparison is 
~1.003.01 < ~.004.00 
< ~.000.00 
A1-003-01 < A-004-00 < B-000-00 
First < Second < Third 
First < Fourth < Second 
Historically, some implementations computed the value of instance-id sequen- 
tially, while other implementations have used an algorithm based on the product 
tag, vendor-tag, and the various machine type attributes. No implementation is 
specified, other than to guarantee that the tag and instance-id uniquely identify 
the product within the distribution or installed-software object. This is to make it 
easier to specify a particular product when there are other products sharing the 
same tag as would be the case when there are different product instances in a dis- 
tribution for several machine types or multiple concurrent versions on a host. 
The vendor-tag attribute is intended to be universally unique to distinguish pro- 
duct and bundle software objects that otherwise would be treated as the same 
object if the tag, revision, and architecture attributes were the same. Guarantee- 
ing universal uniqueness is difficult at best, and no need was seen at present to 
cause the value of vendor-tag to be either some sort of machine-generated univer- 
sally unique value or officially registered. 
Multiple versions of the "same" product or bundle (ones with the same value for 
the tag attribute) is supported by each version possessing values of the version 
distinguishing attributes unique within that installed software catalog. 
The architecture attribute should include information related to four uname0 
structure members. The architecture attribute is needed for so£ tware-specs 
since the patterns used for determining compatibility in the attributes related to 
uname0 can be somewhat complex and contain patterns, while so£ tware-specs 
themselves can contain patterns. 
B.3 Software Structures 
181 

ISOnEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
It is recommended that a set of guidelines be used for the architecture attributes 
to maintain a consistent "syntax" for related architectures. This increases the 
usability of this field for users selecting software. An example guideline is to order 
any information contained in the value of the attribute in a consistent way, 
separated by a consistent delimiter. For example 
architecture sunos-4.1-sun4 
for a product with the attributes 
0s-name sunos 
0s-rev 4.1.* 
0s-ver * 
machine-type sun4* 
Another example is 
architecture hp-ux-9qa-risc 
for a product with the attributes 
0s-name hp-ux 
0s-rev 9.*110.* 
0s-ver [a. .el 
machine-type 9000/[6..8]??? 
Product machine attributes describe the target systems on which this product 
may be installed. Each of these keywords are related to a POSM.1{2) uname0 
member and may be defined as a simple string, or a software pattern matching 
notation. How compatible software is determined depends on whether the pro- 
ducts are being installed on the system that will be using them, or whether the 
installation will be used by other systems with perhaps different attributes. 
If a uname attribute is undefined, the behavior is essentially the same as if it were 
defined to be * (meaning compatible with all systems). 
The product directory for an application should be the directory that is part of all 
paths in the product. Thus, if an application has three filesets that contain files 
below /appl /console, /appl /agent, and Iappl Ida ta respectively, the 
product.directory attribute should be set to /appl. If a user relocates the product 
with a command like 
swinstall appl,r=l.O,l=/disk2/appl 
then all three filesets have the same location attribute. If the user relocates the 
product to three different locations 
swinstall appl.console1r=l.0,1=/diskl/appl 
swinstall appl.agent,r=l.O,l=/disk2/appl 
swinstall appl.data.r=l.O,l=/disk3/appl 
then each fileset will have a different location attribute. There will be three pro- 
duct instances containing the three filesets (since products versions are dis- 
tinguished by location), but the user can still identify all three filesets as one with 
the specification 
swverif y appl, r=l .O, 1=* 
Alternatively, the user could relate all these locations with the same version 
qualifier, such as Iq=current " as follows: 
swinstall appl.console,r=l.0,1=/diskl/appl,q=current 
182 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
swinstall appl.agent,r=l.O,l=/disk2/appl,q=current 
swinstall appl.data,r=l.O,l=/disk3/appl,q=current 
And subsequently identify all pieces with 
swverify appl,q=current 
The postkernel attribute supports the ability to install one operating system in 
proxy (to an alternate root) by another implementation that does not understand 
that operating system. All products that contain kernel filesets that will be 
installed into the same installed-software object should have the same path 
defined. There should be one core OS kernel fileset that includes this path in its 
set of files so that it has been installed by the time the postkernel script is exe- 
cuted. 
In general, a product with no p r e i n s t a l l  or p o s t i n s t a l l  scripts is recover- 
able. However, if there are p r e i n s t a l l  or p o s t i n s t a l l  scripts, then 
unpreinstall and unpostinstall scripts shall be provided if any steps need 
to be undone to support autorecovery. 
There was an issue whether dependencies should be an attribute of a product. 
The following types of dependencies have been discussed: 
- Fileset to fileset within a product 
- Fileset to (some other) product 
- Fileset in one product to fileset in another product 
- Product to product 
- Product to fileset in some other product 
- Product to fileset in that product (essentially mandatory fileset) 
The last three dependency types are not necessary if the first three types exist 
(which they do), since those dependencies can be specified in terms of the others. 
For example, if an entire product depends on a second product, then the second 
product can be defined as a dependency for all filesets in the first product. 
The developers of this part of ISOIIEC 15068 recognized that numerous additional 
dependency requirements are possible, particularly for software updates. These 
may be handled via checkinstall scripts, and can be considered for future revi- 
sions of this part of ISOIIEC 15068. 
The intention behind the inclusion of the layout-version attribute within a pro- 
duct is that it be required if its value is different than that for its associated 
software-collection. 
B.3.8 Bundles 
Bundles serve two purposes - 
they allow the software supplier to group different 
subsets of products into new configurations or products, and they allow the 
software administrator to build useful groups of software (configurations) from 
already defined bundles and products. 
The bundle class does not have location or directory attributes. This is because 
so£ tware-specs within the bundles can refer to products with different default 
directory attributes or even products that have been relocated. 
B.3 Software Structures 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE SYSTEM ADMINISTRATION - 
Bundles have "uname" attributes that only have any value if the bundle aggregate 
has a different compatibility than that of any of its contents. Besides offering 
more control to the person defining the bundle, it is useful in a GUI that wants to 
only display compatible software by default. For example, a bundle may contain 
one product that operates on a system with an uname attribute of "A" and another 
product that operates on systems with uname attributes of "A" or "B". In this 
case, it might be useful to define the bundle attribute to be "A". Since it is possible 
that not all the bundles contents exist in a particular distribution or 
installed-software object, it may not be possible to determine the compatibility of 
the bundle in all cases unless the bundle attributes are also defined. 
The vendor-tag attribute is intended to be universally unique to prevent naming 
clashes for similarly named products and bundles from different vendors. 
Guaranteeing universal uniqueness is difficult at best; it was deemed unnecessary 
at present to cause the value of vendor-tag to be either some sort of machine- 
generated universally unique value or officially registered. 
The intention behind the inclusion of the layout-version attribute within a bundle 
is that it be required if its value is different than that for its associated 
software-collection. 
The value of the bundlexontents attribute is not modified when a location is 
specified for a bundle, allowing future resolutions of its contents to remain con- 
sistent. For example, assume bundles "CAT" and "DOGn, and products ltFOOn 
and "BAR", all with directory attributes defined as / I. 
bundle 
tag CAT 
contents DOG, l=/dog BAR, l=/bar 
bundle 
tag DOG 
contents FOO,l=/foo 
When the bundle "CAT" is installed and relocated to /cat, the following objects 
are installed: 
CAT, l=/cat 
DOG, l=/cat /dog 
FOO,l=/cat/dog/f oo 
BAR, l=/cat/bar 
So, when resolving ICAT, 1= / c a t  " in installed software, applying the proper loca- 
tions to the software-specs 
in the contents will result in the same 
so£ tware-specs in the installed software. 
Bundle definitions are only copied or installed when explicitly specified since they 
are external to the product and not always applicable to the use of the product 
installed. The creator of a product has no control over what bundles reference it. 
For example, a product may be a member of numerous bundles, and many of those 
bundles will likely have nothing to do with the bundles and products chosen to be 
installed. Also, see B.3.10. 
Bundles and subproducts have lists defining their contents that are always copied 
tontents is a static attribute). So, if a partial bundle or product is copied, the 
value of the contents attribute does not change. However, by comparing that 
attribute to what objects are actually installed, "completeness" of a bundle or sub- 
product can be determined. 
184 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
740 
B.3.9 Filesets 
741 
The media-sequence-number is used for serial distributions to describe which 
742 
media the archive containing the fileset starts on. There is generally one archive 
743 
per media, unless a fileset is larger than a media. Each media has a unique 
744 
sequence number whether it begins an archive or continues a previous one. 
745 
At one point a fileset class attribute existed that could contain the value of recom- 
746 
mended, mandatory, or optional. The attribute was removed because it was felt 
747 
that this part of ISOhEC 15068 could not specify any behavior for the attribute. It 
748 
would be possible to make a specific fileset mandatory by having all other filesets 
749 
in that product specify it as either a prerequisite or corequisite. 
750 
Another way to handle recommended, mandatory, or optional filesets would be to 
751 
create subproducts with tags of the appropriate names. Although this part of 
752 
ISO/IEC 15068 does not specify any behavior based on the name of subproduct.tag, 
753 
a specific implementation could define behavior as an extension. 
754 
B.3.10 Subproducts 
755 
Unlike bundles, subproduct definitions (that are internal to a product) are copied 
756 
or installed when any fileset specified in the contents attribute of the subproduct 
757 
is copied or installed. Products are meant to be sets of related software and are 
758 
usually created and managed by one person or organization. Additionally, subpro- 
759 
ducts are normally used to specify useful subsets of filesets within the product, 
760 
which in turn are useful for dependencies. With subproducts, the "parts make up 
761 
the whole." 
762 
B.3.11 Software-Files 
763 
This class definition exists for convenience in defining the classes that inherit 
764 
from it. It is not intended that any direct instances of this class be created, but 
765 
only of the classes that inherit from it. 
766 
The compression-type attribute allows compressing and uncompressing of indivi- 
767 
dual files during swcopy, and uncompressing during swinstall. The way in 
768 
which an implementation uses this attribute is undefined, although the general 
769 
thought 
was 
that 
this 
would 
normally 
be 
the 
name 
of 
a 
770 
c~mpre~~i~n/~nc~mpre~sion 
routine with a simple interface. An implementation 
771 
should be flexible in locating routines specified by compression-type, utilizing any 
772 
or all of the following: 
773 
- Built-in knowledge of the compression-type format for compressing and 
774 
uncompressing 
775 
- The product control directory for a program named in compression-type 
776 
- PATH on the target system for a program named in compression-type 
777 
NO particular compression method is specified in the standard largely because the 
778 
developers of this part of ISOhEC 15068 saw no standard for file compression and 
779 
did not want to specify all of the details of the compression methodology as part of 
this part of ISOtIEC 15068. It was generally agreed that to achieve adequate 
interoperability, a single method of consensus should be supported by all 
B.3 Software Structures 
185 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
implementations. It is likely that the format used by the gzip utility is appropri- 
ate for all implementations. Each implementation may support any number of 
other methods. 
The interface to the compression routine was also left unspecified. It is recom- 
mended that input be taken from stdin and output be directed to stdout, that the 
routine operate with no option to imply compress, and that a -u option imply 
uncompress. However, specific compression routines may require more complex 
interfaces. 
The group also considered archiving of compressed files, i.e., concatenation or 
other combination into a single file. The main purpose of this would be to save 
cluster space on diskette distributions. It was finally decided that the risks for 
current standardization were too high - especially if an archive extended over 
more than one diskette - and the issue was left implementation dependent. In 
implementing this, there should be consideration of the following factors: 
- A new archive~ource attribute to indicate that the file contents are within 
a named archive. 
- Defining a new fileset archive-type attribute with values of empty string, 
cat, or the name of an archive routine like tar. The type c a t  indicates 
simple appending to an archive file. If cat (or even possibly tar) were 
used, an archive-offset attribute would indicate where within the archive 
the file started. This could be used for fast single-file extraction using 
either size or compressed-size. 
- Extended options on swcopy for archivefiles and archive-type (similar to 
compressfiles and compression-type ). The uncompressfiles =true option 
on swcopy would both unarchive and uncompress. 
- An archiver interface that permitted appending or extracting one file at a 
time. 
- The archiver, like the compressor, could be distributed in the product con- 
trol directory. 
Finally, compression support for swpackage was considered, and deemed as 
unnecessary, since compression can be achieved by copying after packaging. But 
an implementation can easily add attributes to achieve this function. 
B.3.12 Files 
The letters chosen for the file type attribute are consistent with the syntax of the 
find utility with the -type option, as defined in POSM.2 (31. Hard links are not 
specifically mentioned in 5.6.1.1 of POSIX.l {2). Symbolic links are not mentioned 
in POSM.1 (21 but are included to support existing practice. Work to standardize 
symbolic links is included in POSE. l a  (B2 1). 
Implementations running on operating systems that do not support a POSIX.1{2] 
file system can interpret the defined attributes in any appropriate way. See 
1.3.1.1. Any implementation can extend file attributes with additional attributes 
appropriate to the file system in question. To avoid confusion when defining new 
attributes for a particular file system, it might be best to prefix such attributes 
with a designator of the file system. An example, for a FAT file system, might be 
186 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
the attributes FATHidden and FAT-Readonly. 
There was some debate whether the major and minor attributes are appropriate 
or not since there is no standard that specifies how these files are created. In 
addition, this part of ISO/IEC 15068 specifies that the serial distribution be in 
POSM.1(2) cpio or t a r  format; however these attributes are biased towards t a r  
format as opposed to cpio format. 
Other SVR4 supported file types are f ,  d, 1, s (like SDU RF, DR, HL, SL); b, c, p 
(special files and pipes); and e, v, x (editable and volatile files; and exclusive direc- 
tories). 
Considered was a size file type (z) that was removed in favor of the space 
control-file similar to SVR4. An implementation may choose to internally imple- 
ment a size type or a separate size-file object to represent the data from this file. 
The developers of this part of ISOIIEC 15068 considered an is-exclusive (directory) 
attribute that was removed due to objections that the utilities would remove files 
that they did not have recorded in their database. Also, this was not a common 
need, and can be implemented either as vendor extension or by having software 
f i x  script implement similar functionality. 
There has been much discussion about compression being handled within the 
scope of this part of ISO/IEC 15068. Currently there are ways that both implemen- 
tations and individual software products can handle compression. Compression 
can be handled through cooperation of the source and target roles, if they are from 
the same implementation. Software vendors can choose to ship their files 
compressed and uncompress them as part of the p o s t i n s t a l l  script. They can 
add a space control-file to account for the extra space required. 
A similar need would apply to other post processing, such as for ANDF files that 
are processed as part of postinstall or configuration. 
Though it may be adequate for protecting against accidental damage, the existing 
POSM.2 (3) cksum is considered inadequate for virus protection. Implementa- 
tions may wish to create additional vendor-defined attributes and utility behaviors 
for this purpose. 
Each of the prerequisite or corequisite dependency-specs in the list is required 
to resolve successfully in order for dependencies to be met. 
Also, a 
dependency-spec can contain alternate software-specs separated by the I 
(vertical line) character (see 4.1.4.1). So, if a fileset has a corequisite dependency 
on software, expressed with a Boolean equation ( A  I B I c ) 6r ( D I E) , this can be 
specified in a PSF as 
corequisite A ~ B ~ C  
corequisite D I E  
There are files (particularly for OS software such as / e t c / r c  for SVR4 and 
autoexec. b a t  for DOS) that are modified between software update times. 
These may be termed modifiable files. Although OS modifiable files are slowly 
being replaced by mechanisms where applications can simply add their own 
requirements as separate read-only files in a particular directory, there currently 
would be some value in supporting features where modifiable files are compared 
with the original files to see what changes need to be applied during software 
updates. Actually implementing these changes is a more difficult problem since it 
B.3 Software Structures 
187 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
requires knowledge of the formats of the files being updated. Similarly, reversing 
(during swremove) changes made to modifiable files (during swinstall and 
swconf ig) is an exceedingly difficult problem. The existing practice for treating 
modifiable files is fairly ad-hoc. It was not feasible to address all of the possible 
needs for updating modifiable files. Instead, it does provide the attribute 
is-volatile for files that may be modified after installation, and leaves the rest of 
the treatment of modifiable files as either implementation defined, or handled in 
control scripts. This area may be considered for a future revision of this part of 
ISOLEC 15068. 
B.3.13 Control Files 
Using tags as the identifier of when a script should be executed (independent of 
the path the script is stored as) allows anywhere from one file per tag to one file 
for all tags. A concern on PC or DOS systems is that requiring more than one con- 
trol script for all tags is a space problem. Instead, software vendors might prefer 
a single master script that took care of all needs. Multiple scripts are also sup- 
ported, since many software vendors favor this approach over a "mega-script." 
However, other vendors may prefer the single script approach, especially to save 
space if there are many scripts defined for this product that share a lot of the 
same code. 
Control files do not have mode, owner, group, uid, gid, and mtime attributes since 
they are not necessary for the execution of the control scripts or for the manage- 
ment of these files within the distribution or installed software catalog. However, 
an implementation shall ensure that they are executable. 
The interpreter attribute has two uses. It is useful for those who choose not to use 
the POSM.2 (31 shell, i.e., sh. It is also useful for systems that would not other- 
wise require POSM.2 (31. Those creating distributions and control files are 
encouraged to use the POSM.2 (3) shell for portability. 
B.4 Software Administration Utilities 
Software administration involves the control of software throughout the software 
life cycle from the organization or creation of a software object through its instal- 
lation, maintenance phases, and eventual removal. 
The following tasks are identified in this part of ISOLEC 15068. The defined utili- 
ties provide a way of accomplishing these tasks except as noted. 
Install software (swins tall) 
This task takes software from a source distribution and 
installs it on a target file system in a form suitable to be 
configured on this system or another system sharing 
this software. Parts of software products (subproducts 
or filesets) can be installed or reinstalled at different 
times. 
In the case where the system on which the software is 
installed will also be using the software (i.e., it is acting 
as both a target and client role), configuring the 
188 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
software can be combined with the install software task. 
Reinstall software (swinstall) 
This task is simply installing the exact same software 
that was previously already installed. 
Configure software (swconf ig) 
This task takes place on the client role that will be 
using the installed software. Configuration makes that 
software ready to use. Configured software can also be 
reconfigured as required or can be unconfigured (to 
deactivate a particular version or prepare it for remo- 
val). 
Update software (swinstall) 
This task updates the target file system by installing a 
newer revision of software than is already installed. 
This is also referred to as upgrading. 
The new revision of software can be installed in the 
same location as the current revision. In this case, the 
software configure scripts executed by the configure 
task need to handle saving or updating the necessary 
configuration data. 
The new revision of software can alternatively be 
installed in a location different than the current revi- 
sion. In this case, the old revision may be unconfigured 
by the unconfigure script executed as part of the 
unconfigure task, and the new revision is configured by 
the configure scripts executed as part of the 
configure task. 
Downdate software (swins t a l l )  
This task "downdates" the target file system by instal- 
ling an older revision of software than is already 
installed. This is also referred to as "downgrading" or 
"reverting." 
The older revision of software can be installed in the 
same location as the current revision. In this case, the 
configuration process of the older version handles the 
necessary changes in configuration. 
The older revision of software can alternatively be 
installed in a location different from that of the current 
revision. In this case, the new revision can be 
unconfigured via the unconfigure task, and the older 
revision can be configured either independently, or as 
part of install. 
Recover software (swinstall) 
This task restores the previous version of software (if it 
exists) in the case where an update, downdate, or rein- 
stall of software fails. This part of ISOIIEC 15068 
defines the minimum required support for automatic 
B.4 Software Administration Utilities 
189 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
recovery process in the install task. 
Apply software patch (swinstall) 
This task replaces part of a software fileset with a new 
set of files by installing a fileset with those new files in 
the same location as the fileset being patched. This is 
also referred to as fixing software. 
This part of ISO/IEC 15068 currently does not provide 
any special functionality for patching software. Filesets 
related through naming conventions and prerequisites 
can be used. Backup of patched files can be achieved via 
install control scripts. 
Consensus was not reached as to how patches should be 
managed and what level of functionality is required. 
Issues include whether patches are cumulative or com- 
plete, whether they involve partial products or filesets 
(or even files), how volatile files should be managed, 
naming or versioning schemes, and the level of rollback 
support required (number of patch removes that are 
supported for cumulative patches). It was concluded 
that this could not be standardized at this point, but 
that this part of ISOIIEC 15068 does provide a sufficient 
base for implementing patch functionality. 
Remove installed software (swremove) 
This task removes software from an installed-software 
object where it previously was installed. Parts of 
software products (subproducts or filesets) can be 
removed at different times. 
If the system where the software is installed was also 
using the software, unconfiguring the software can be 
combined with the remove software task. 
Remove software patch (swremove) 
This task removes a patch fileset. This is also referred 
to as rejecting software. 
This part of ISOfIEC 15068 does not provide any special 
functionality for patching software. Filesets related 
through naming conventions and prerequisites can be 
used. Restoring patch files when removing the patched 
can be achieved via remove control scripts. 
Verify the installed software (swveri f y) 
This task checks that software previously installed still 
exists and is intact. If operating on a system that was 
configured to use the software, it can also check that the 
software is configured properly. 
List installed software information ( s w l i s  t) 
This task provides a list of the software that has been 
installed on a target. Options are available to specify 
which software packages are to be listed and to control 
190 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
the amount of information provided. 
Fix installed software information (swrnodi f y, swveri f y) 
This task modifies information about software that has 
been installed on a target. Options are available to 
specify which software packages, and what information 
about those packages, are modified. 
Package software (swpackage) 
This task takes place in the packager role and 
transforms developed software into the software packag- 
ing layout suitable for distribution. The metadata that 
defines the software objects to be packaged is contained 
in the product specification file (PSF). 
Copy distribution software (swcopy) 
This task copies distribution software between a source 
and a target, for subsequent use of that target as a 
source. Copying software can be used to merge distribu- 
tions, to distribute products to the installation targets, 
and then install from that local copy, or to copy part of a 
distribution to a removable media for physical distribu- 
tion (as opposed to electronic distribution). 
Remove distribution software (swremove) 
This task removes products from a target distribution. 
ChecWverify distribution software ( s w v e r i  f y) 
This task checks that a target distribution exists and is 
intact. 
List distribution information (swl is t ) 
This task lists source or target distribution information. 
Options are available to specify which objects in a distri- 
bution are to be listed, and to control the amount of 
information provided. 
Fix distribution information (swmodi f y, swveri f y) 
This task modifies information that describes, and is 
contained within, target distributions. Options are 
available to specify which objects in a distribution are 
modified. 
License installed software (undefined) 
How software licenses are managed is undefined within 
this part of ISOIIEC 15068. 
The task definitions were based on study of existing practice for software adminis- 
tration. This included presentations on existing practice by many different system 
vendors and system administrators. From these, a functionally adequate base 
was selected upon which all parties could build. While it was recognized that this 
did not address every concern, it was felt that that the utility descriptions (includ- 
ing detailed behavior), software structure definitions, and media layout, provided 
an excellent starting point. After comparing various existing practices, these 
choices appeared to be quite similar to other existing practices in many details of 
these key areas. 
B.4 Software Administration Utilities 
191 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE SYSTEM ADMINISTRATION - 
Table B-3 below compares and contrasts the SVR4, HP-UX, SCO Unix, and AIX 
software management utilities. While this table is neither complete nor current, 
it does provide a useful comparison of existing practices. 
Table B-3 - Comparison of Some Existing Practices 
Functionality 
install soRware 
SVR4 pkg* 
pkgadd 
read to spool 
store interactive 
session 
pkgtrans 
(pkgadd -s) 
custom+ archive 
installation 
pkgask 
user interaction 
(interactive 
scripts) 
check 
installa- 
tion 
display software 
package info 
make a package 
generate prelim- 
inary input to 
packager 
remove a pack- 
age 
swcopy 
I 
I 
HP-UX sw* 
custom+ 
packages 
can 
have interactive 
scripts (custom- 
ize, etc.) 
pkgchk 
pkginfo 
pkgmk 
pkgproto 
p k p  
bffcreate 
AM 
installp 
swinstall allows 
a session to be 
saved 
customize scripts 
and 
check 
scripts are not 
interactive 
not applicable 
swlist 
B.4.1 Common Definitions for Utilities 
yes 
each 
package 
may 
have 
a 
configuration 
script 
yes 
swpackage 
not 
applicable 
(swpackage may 
do some of this) 
swremove 
B.4.1.1 Synopsis 
There is no additional rationale provided for this subclause. 
smit allows a 
session 
to 
be 
saved 
scripts called by 
installp may not 
interactive 
l ~ ~ c h k  
custom+ 
B.4.1.2 Description 
There is no additional rationale provided for this subclause. 
~ S ~ P P  
distmaster 
distmaster 
custom+ 
B.4.1.3 Options 
Yes 
not applicable 
not applicable 
The -d option is needed to remove ambiguity for utilities that operate on both dis- 
tributions and installed software. 
The -r option is needed for the following reasons. Installing software at / 
involves a somewhat different set of operations than software installed at an alter- 
nate root, as well as a different implied use. Software installed on alternate roots 
is not configured in the context of the target where the software is installed, but 
rather in the context of the client actually running the software. Another 
difference is that the target is not rebooted after installing software that requires 
192 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
a reboot (the clients of the software need to be rebooted). An alternate root con- 
taining operating system software can be thought of as a root to which one could 
chroot(). From a usability standpoint, it is important that alternate roots are 
understood to be different than relocating a software product, or specifymg an 
alternate catalog for the same root. 
Related to the - s  option, an implementation could define an additional source 
syntax to use well-known sources whose existence is available through some sort 
of directory service. 
The - s  option could be extended to supported multiple source specifications. 
There are several possible ways to interpret multiple sources, including searching 
sources sequentially, ignoring all specifications after the first one, using the last 
specification, or choosing the "best7' source based on criteria such as performance 
or ability to reduce network load. It may even be desirable for multiple source 
specifications to be interpreted differently for different commands. 
An implementation may implement the -p option (preview) by simply executing 
the command through the analysis phase. Alternatively, an implementation may 
emulate the execution phase, listing the operations that would occur, including 
listing control scripts that would be run, but not actually performing those opera- 
tions. As preview is undefined, other alternatives are possible. 
B.4.1.3.1 Non-interactive Operation 
It is recognized that there may need to be some sort of interaction with the user in 
order to handle multiple volumes (e.g., tapes) for sources and targets. 
B.4.1.4 Operands 
Discussion pointed to the fact that the @ character does not have any applicable 
precedence as a separator of operands. It was concluded that the use of @ in mail 
addresses and BSD commands is a bit different. Another point was that having 
two lists of operands was not desirable in any case. 
On the other hand, the two types of operands are the two key objects upon which 
the utilities operate. The syntax is valid according to the utility guidelines from 
2.10.2 of POSM.2 (3). Distributed utilities extend the problem space that 
POSM.2 (3) has already addressed, thus the need for precedence might be less. 
Thus, it was decided that the @ was acceptable, and perhaps desirable over the 
alternatives. 
One alternative was to move one or both operands to options (such as -s for 
software and -T for targets). But, it was felt that this was not necessary because 
there are already - f and - t options for files containing lists of operands. Another 
point was that listing target operands on the command line was not critical in any 
case, as an administrator of many systems would not use either the @ targets or 
-T target syntax. 
B.4.1.4.1 Software Specification and Logic 
Using a less formal grammar convention that defines zero or one item by enclosing 
these items in [ I  (brackets) and zero or more repeated items in { 1 (braces), the 
following shows a common subset of the so£ tware-spec syntax: 
B.4 Software Administration Utilities 
193 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
software-spec 
: bundle-tags [ product-tags ] [ version ] 
I product-tags [ version 1 
I 
' * I  
[ version ] 
bundle-tags 
: bundle { ' . ' bundle 1 
I 
product-tags 
: product 
[ 
I . '  subproduct { 
I . '  subproduct ) ] 
[ '.' fileset ] 
, 
version 
: { ',r' rel-op revision 1 
[ ',a=' architecture ] 
[ ' , v=' vendor-tag ] 
[ ',I=' location ] 
[ ',q=' qualifier ] 
I 
' r * '  
re 1-op 
: t = = r  
1 
! = I  1 
# > = I  I 
# < = I  
I 
# < #  
I 
# > #  
The keywords bundle, product, subproduct, and f i l e s e t  refer to the tag 
attributes of those objects. The value of revision is usually a dot separated 
string compared to the value of the revision attribute of the first object. The 
values of architecture, vendor-tag, location, and q g a l i f  ier are usually 
exact strings or patterns compared to the like-named attributes of the first object. 
These version attributes can validly be specified like r e v i s i o n  is, but operators 
and multiple specifications do not make much sense. 
Examples of so£ tware-specs are 
* 
Networks 
Networks.Xl1 
Networks.Xl1.Runtime,a=*80?86* 
XI1 
X11.Runtime 
X11.Runtime.r=4,v=C1oneInc 
Xll.Runtime,r>=4.0,r<5.0 
Xll,r=4.03.07,1=/usr/XllR4 
Xll,r=5.00,1=/usr/X11R5,q=latest 
X11, * 
*, a=*80?86* 
A so£ tware-spec shall begin with a bundle or product tag. A particular bundle 
or product object can be determined since they share the same name space (they 
also have different instance-id attributes). 
The location attribute applied to the product means all filesets in that product in 
that location. This is the same set of filesets as if the location attribute was 
applied to the filesets. 
Since 
the 
components 
of 
the 
version-qualif i e r  
of 
a 
bundle-so£ tware-spec refer to the attributes of bundle objects, there is no 
way to select one version of a product if more than one version is specified in the 
bundlexontents. Neither the inclusion of multiple versions of a product within a 
bundle, nor the specifymg of partial bundles, is seen as the normal use model, so 
194 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
having this part of ISOAEC 15068 limit the flexibility slightly in this area was 
deemed as acceptable. 
This part of ISOIIEC 15068 permits the use of values other than those defined in 
4.1.4.1 for ver-id. This part of ISOAEC 15068 also permits the use of ver-id in 
conjunction with attributes and objects other than the first listed in a 
so£ tware-spec. This allows additional flexibility for identifying software 
objects. 
A possible syntax for these vendor extensions include, but are not limited to 
ver-id 
attribute 
object 
revision 
architecture 
vendor-tag 
location 
revision 
architecture 
vendor-tag 
location 
revision 
location 
bundle 
bundle 
bundle 
bundle 
product 
product 
product 
product 
f ileset 
f ileset 
The ver-id fr is seen as most useful since it can identify a particular fileset 
object within a product where the product may not have a revision, but the fileset 
does. Note however, that any object can still be identified with only the attributes 
defined in this part of ISOAEC 15068. For example, if a bundle includes two par- 
tial products with the same tag value but different revisions or locations, these 
partial products could be identified with the standard syntax by excluding the 
bundle 
portion 
of 
the 
so£ tware-spec. 
For 
example, 
bundle. product, pr=l .3 could also be identified by a so£ tware-spec of 
product, r=1.3. 
In another example, the fileset that could be identified by its revision 
kproduct . f ileset, fr=1.3) could also be identified by a so£ tware-spec 
(e.g., product, r=revision), where revision refers to the product revision, 
including possibly the empty string. 
Relocation occurs by replacing the product.directory part of each file path as it 
occurs in the distribution, with the location specified and using the resulting path 
for installation. This is still relative to the installed-software directory described 
below. See 4.5.7.3.1 for more information. 
Using a swsattern in a so£ tware-spec is a way for the user to indicate that 
all software objects that match the software-spec are to be included. For 
example, applying the software-spec "*" to swcopy means to copy all 
software in the distribution. Applying the so£ tware-spec 
" FOO , *" to 
swremove means to remove all versions of Foo. 
The behavior for swlist is different (by default including all software if none is 
specified) because this is the command that is used to find all versions of software, 
and because listing cannot negatively affect the state of the software-collection. 
If using software pattern matching notation characters on the command line, they 
shall be escaped or enclosed in single quotes to avoid matching files in the current 
working directory. 
B.4 Software Administration Utilities 
195 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
This specification provides the means to select products and specify dependencies 
using a single syntax. The use of the shell-type pattern match specified in 3.13 of 
POSM.2 (3) allows for reasonable specification of sets of values that share such 
patterns. Thus, for example, a specification of 
a=HP-uX*" may be used to 
select packages for any of a set of architectures. The specification using the rela- 
tional operators provides support for testing the type of releaselversion 
specifications that are frequently used by vendors. In particular, it provides sup- 
port for testing when a numeric test is needed (e.g., comparing 2.9 to 2.10 as ver- 
sion levels of a product). Additional operators such as >> were considered. The 
specification of the >> operator allows the user to specify the selection of the most 
recent (highest version number) of a set of otherwise identical packages. This 
exposes to the interface the mechanism used by swins t a l l  to select such a pack- 
age. 
The range of attributes that may be specified allows for selection of packages that 
may be needed to support code serving to alternate architectures, or other operat- 
ing environments. In addition, it provides the needed support to specify installed 
software that may only be distinguished by the location of installation. 
Examples of fully qualified so£ tware-specs are 
Foo, r=3 -0, 
a=, v=XT 
BundleA.Foo,r=l.O,a=,v=XT 
Dow.Bar,r=2.0,a=SunOS,v=,~=/opt/foo.2 
It is possible for bundles to contain sof tware-specs that are not fully qualified. 
This is not recommended for bundle definitions provided by software vendors 
because the results of operations on this bundle may be undesirable for an 
administrator. However, there is some flexibility provided by ambiguous software 
specs that administrators may want to use. 
For example, a bundle with contents *  a an" could be used to manipulate all 
Man" filesets or subproducts in all products. 
If a vendor includes any wildcards in a so£ tware-spec in a bundle definition, 
then the vendor-tag attribute should be included and its value should have no 
wildcards, thus limiting the scope of the pattern matching. 
The difference between "FOO, v= and ~ ~ F O O ~  
is that the first will only match a 
product or bundle " F O O ~  where vendor is not defined, while the second will 
match a product or bundle 
FOO with any vendor definition. 
B.4.1.4.2 Source and Target Specification and Logic 
Using a less formal grammar convention that defines zero or one item by enclosing 
these items in [ 1 (brackets) and zero or more repeated items in { 1 (braces), the 
following shows a common subset of the software~collection~spec 
syntax: 
software~collection~spec : [ host ] [ ':' I 
[ path I 
Examples of distribution so f tware-coll ec t ion-specs are 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
hostA: /var/spool /sw 
15.1.94.296 
15.1.94.296:/depots/applications 
Examples of installed-software s o  f tware-co 1 l e c  t ion-specs are 
/ 
hostA 
hostA.cloneinc.com 
hostA: / 
15.1.94.296 
15.1.94.296:/exports/applications 
Target distributions in the serial format need not be supported for swverify, 
swremove, and swmodify as this requires the implementation to unload the 
entire distribution, merge in the changes, then reload it. The user can accomplish 
this (and an implementation can implement this) by first copying the distribution 
into a directory format, implementing the changes, then copying the distribution 
back to the serial media. This operation also could require significant temporary 
disk space. 
A similar rationale applies to swcopy, and swpackage, which by default, 
overwrite the existing distribution instead of merging in the specified software. 
B.4.1.5 External Influences 
B.4.1.5.1 Defaults and Options Files 
For SVR4 or similar file system layout, the defaults file may be located in 
/var/adm/sw/def aults. The use of this location is strongly encouraged. 
The difference between "system-level" defaults and "site-level" defaults was dis- 
cussed. 
The former is provided by the implementation of the utilities and the latter is con- 
structed by the administrator. The intent here is for the implementation to 
respect any customizations to the system level defaults file, so it can be used for 
site policies. It is recommended that implementations "hard code" the defaults as 
opposed to relying on the system file containing all definitions, and provide a 
means to support new options in future releases without changing the site specific 
values in the system defaults file. 
B.4.1.5.2 Extended Options 
For SVR4 or similar file system layout, distribution~source~directory 
may be set 
to /var/spool/sw. The use of this location is encouraged. 
For SVR4 or similar file system layout, distribution-target-directory may be set to 
/var/spool /sw. The use of this location is encouraged. 
For SVR4 or similar file system layout, installed~software~catalog 
may be set to 
/var/adm/sw/catalog. The use of this location is encouraged. The catalog 
may simply be a pathname of a directory where the database containing the cata- 
log is stored, or may be a key into a directory service specifylng a catalog in a file 
or database, or any other implementation-defined method of specifylng a catalog. 
B.4 Software Administration Utilities 
197 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
The location of the storage for the catalog itself is implementation defined. 
The s w i n s t a l l  utility, and other utilities that operate on installed-software, 
modify the catalog information based on the outcome of the utility. Information 
contained within the catalog is resolved in the context of each target. 
Originally, it was thought that a catalog would be kept as a flat file in a directory 
that could be specified using this option. In the interest of generality, so that 
implementors might be allowed to use databases, the catalog attribute is now 
described as a key. This allows an implementor to either use a flat file or a data- 
base or some other form of persistent storage for the information, yet still be able 
to separate the address space as desired. The motivation for permitting the 
separate address space stems from the following two cases. First, it seems desir- 
able to allow ordinary (non-root) users to be able to use s w i n s t a l l  to store 
software in their own private space. Likely the only real restriction is a potential 
lack of write authority to the central storage for the catalog, hence the ability to 
create a separate catalog. This also allows a user to manage personal software 
with utilities such as swremove or other utilities. Second, installations may wish 
to deploy stable versions of their software in the normal location, and a test ver- 
sion installed in a second location where access may be more tightly controlled. 
There may even be other versions installed that are under development. Since 
this software may have identical attributes, it is desirable to allow such separate 
space for management. Both of these examples show the need for separate 
domains of software management. 
Two 
values 
of 
autoselect-dependencies (autoselect-dependencies =true and 
autoselect-dependencies =as-needed) support different possible policies by the 
user. Having autoselect-dependencies =true ensures that all targets are kept in 
sync, while having autoselect-dependencies =as-needed prevents the possibility of 
updating dependency software to a higher revision unnecessarily. 
Autoselection of a dependency across products is possible if a compatible product 
version with the highest revision that meets the dependency is unique. In other 
words, the same rules apply for dependency selection as for normal selection as 
described in 4.1.4.1. 
For the ask option, the checkinstall and configure scripts are required to 
detect needed response files when they are necessary, and return with the 
appropriate warning or error. 
For the installed~software~catalog 
option, the catalog and the directory together 
form a key to identify one installed-software object. For example, this would allow 
the files on the file system to besplit up into different management domains. For 
example, OS software, networking software, and application software could be in 
three different logical installed-software objects, although they are all installed 
under the root file system. 
B.4.1.5.3 Extended Options Syntax 
In the interest of having a single common extended option syntax for all the 
POSM system administration standards, the following syntax was agreed upon. 
As of this writing, the syntax is a superset of that used by this part of ISO/IEC 
15068, IEEE P1387.3, and IEEE P1387.4. 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
1341 
%token 
FILENAME-CHARACTER-STRING /* as defined in 2.2.2.37 */ 
1342 
%token 
NEWLINE-STRING 
/* as defined in 2.2.2.61 */ 
1343 
%token 
PORTABLE-CHARACTER-STRING / *  as defined in 2.2.2.68 */ 
1344 
%token 
SHELL-TOKEN-STRING 
/ *  as defined in 2.2.2.80 */ 
1345 
%token 
WHITE-SPACE-STRING 
/ *  as defined in 2.2.2.110 */ 
1346 
%start sysadmin-option 
% % 
sysadmin-option 
qualifier 
compulsory~qualifier 
command-qualifier 
option 
operator-value 
value-qualifier 
value 
single-value 
value-structure 
value-list 
command 
keyword 
OP-ws 
: qualifier option operator-value 
: compulsory~qualifier 
command-qualifier 
, 
: /* empty */ 
( command I .  ' 
: keyword op-ws 
. , - - I  
. -- 
I value-qualifier '=' value 
, 
: op-ws value ws single-value 
I op-ws singleyalue 
: value-structure 
I SHELL-TOKEN-STRING 
: ' 
op-ws value-list op-ws ' 1 '  
: /* empty */ 
I value-list ws single-value 
1 singleyalue 
: FILENAME-CHARACTER-STRING 
: SHELL-TOKEN-STRING 
: /* empty */ 
I ws 
B.4 Software Administration Utilities 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
ws 
: WHITE-SPACE-STRING 
%start command-line-options 
%% 
command-line-options 
: command-line-options ws sysadmin-option 
( sysadmin-option 
%start options-file 
8% 
options-file 
: options-file NEWLINE-STRING option-file-line 
1 option-file-line 
option-file-line 
: op-ws op-comment 
I op-ws sysadmin-option op-ws op-comment 
op-commen t 
: /* empty */ 
A - (hyphen) qualifier indicates a compulsory behavior while = (equal) 
indicates a non-compulsory behavior. 
For options that support multiple values, values can be added to the 
existing list of values by using the += (plus equal) operator. Similarly, 
values can be removed by using the -= (hyphen equal) operator. Any 
option can be set to the default value by using the == (equal equal) opera- 
tor and value combination. 
A shell token can be an unquoted or quoted string according to the rules 
of token recognition rules described in 3.3 of POSIX.2 (3). For example, it 
can use single or double quotes and can contain like quotes if escaped 
with backslash. It can also support the same level of internationalization 
as the POSM shell. 
The multiple value convention is consistent with white space separating 
tokens in commands (operands) and allows commas to be used in the 
single-value. This also allows multiple values to be specified without 
using quotes (although quotes are still needed for multiple values on the 
command line). 
If the extended option specification contains any white space at all, then 
the entire specification shall be quoted if used on a command line. This is 
because the -x option, which conforms to POSM.2 {3), requires exactly 
one value that is then processed using the above syntax. 
When specified on the command line, multiple option specifications can 
be included after a single -x option if included in quotes and separated by 
spaces. Multiple -x options may also be used. 
For option and defaults files, blank lines and all comment text [any 
sequence of characters beginning with an unescaped # (pound) and con- 
tinuing through the end of that line] are ignored according to the shell 
token recognition rules as described in 3.3 of POSIX.2 (3). 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
B.4.1.5.3.1 Precedence for Option Specification 
The first rule defines typical precedence of system defaults, then a user defined 
set of defaults, then per task exceptions or specifications. The second rule sup- 
ports normal use models of defining multiple "sets" of target-selections and 
software-selections, and being able to operate on the union of those sets. Also, the 
- f and - t options are simply another form for specifymg operands, and are at the 
same level of precedence, and are thus combined with other selections. The third 
rule is generally an error, and the behavior is undefined (i.e., it may be an error, 
or an implementation may chose to implement last- or first-wins). For example on 
HP-UX: 
$ cc -0 -g x.c 
$ cc: warning 414: Debug and Optimization are mutually exclusive. 
-g option ignored. 
$ cc -g -0 x.c 
$ cc: warning 414: Debug and Optimization are mutually exclusive. 
-0 option ignored. 
It might be convenient to have a mechanism to allow the system administrator to 
define a default in the system defaults file that cannot be overridden by a user. 
Such a function may be supplied by an implementation as an extension. This may 
also be considered as part of a future revision to this part of ISOIIEC 15068. 
B.4.1.5.4 Standard Input 
There is no additional rationale provided for this subclause. 
B.4.1.5.5 Input Files 
There is no additional rationale provided for this subclause. 
B.4.1.5.6 Access and Concurrency Control 
For example, if the installed-software-catalog is referenced by a path on the file 
system, then the user can create a catalog in their own user work space (creating 
their own installed-software object), and install and manage software in that 
installed-software object. 
If the catalog is stored in a file, then a corresponding ability to create an 
installed-software object (and thus, a catalog) is needed. 
Access control includes such things as requiring particular authority to operate on 
particular software or software-collections. Concurrency control is the prevention 
of more than one writer at a time to the catalog or data areas. Restrictions to 
prevent multiple concurrent writers were originally part of the draft, but later 
determined to be excessively restrictive. It is conceivable that more than one 
writer could safely be active at a time if the work involves no common files. 
Failure to allow multiple concurrent readers of the catalog, or other data files, is 
strongly discouraged. 
There are two aspects to access control as follows: 
- Those related to file system access and hence determined by the operating 
system (i.e., the ability to write the files described by the sofware file 
B.4 Software Administration Utilities 
201 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
objects) 
- Any additional access control on the software objects, including access to 
(possibly remote) software collections 
For access control to the files themselves, this part of ISO/IEC 15068 defaults to 
the file permissions defined by POSM.l (2). File attributes are defined for the 
files, hence the implementation will set the POSKl(2) file permissions based on 
those values. Deviations from this model are permitted only for implementations 
running on file systems that are not POSM.1 conformant, and then only as long 
as the implementation documents the resulting behavior. 
Any additional access control to the software objects defined in this part of 
ISOAEC 15068 (e.g., permission to install specific software into specific software 
collections on specific hosts), is undefined. An implementation may choose to have 
no access control. For example, anyone may install any software to any system as 
long as the previous POSM.1 (2) file permissions are satisfied. An implementation 
may also choose to provide both authorization and authentication for access to all 
software objects and hosts, as well as a distributed interface for managing the 
access control lists. 
Like the definition of the model to implement distributed aspects of this standard, 
access control beyond that required by the underlying operating system is 
undefined. It was determined that both of these rely on technologies that have 
not been formally standardized, and may better be addressed in other forums. 
B.4.1.6 External Effects 
B.4.1.6.1 Control Script Execution and Environment 
The provision for interpreters other than sh was requested by users among the 
developers of this part of ISOAEC 15068, as well as producers representing sys- 
tems that might lack a POSM.2 (3) or even POSM.1 (2) operating system. By mak- 
ing this provision, many felt that a greater degree of acceptance and usefulness 
could be gained. 
The restrictions placed on the option syntax are such that each of the options can 
be easily parsed and hence set by a control script by simply sourcing the file. The 
term "sourcing" as used here implies the use of the "." command in the POSM.2 (3) 
shell. For example, the following are formats for the SW-SESSION-OPTIONS 
file that can be sourced: 
It is possible for the scripts to determine the loglevel for the command from the 
file pointed to by SW-SESSION-OPTIONS, and use that to affect the amount of 
202 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
1510 
stdout generated. 
An implementation may have an implementation-defined user controllable 
behavior that invokes error handling procedures in the case of warnings returned 
from script execution. 
The purpose of the environment variables is to pass vital information to the 
scripts so that they may operate appropriately under different circumstances. For 
example, 
they 
may 
want 
to 
take 
very 
different 
actions 
when 
SW-ROOT-DIRECTORY is some value other than /. It has also been discussed 
that there may need to be some way to pass other information to these scripts 
such as option values specified in the defaults and options file that control policy. 
This can be achieved with the SW-SESSION-OPTIONS variable, which points 
to a file containing all the options passed to the command, including options, selec- 
tions, and targets. 
One reason that this part of ISOfiEC 15068 differentiates install and remove 
scripts from configure scripts is to separate installing software from 
configuring software for actual use. This supports installing software to alternate 
root directories on servers for use by clients that configure that software. 
The developers of this part of ISOfiEC 15068 also discussed, but did not include, 
the use of several of these variables for setting the value of specific utility options 
when the utilities are called from control scripts. These variables are as follows: 
SW-ROOT-DIRECTORY 
could be used to specify the directory portion of all target operands 
SW-LOCATION 
could be used to specify product.location portion of all software-- 
selection operands 
SW-CATALOG 
could be used to specify the value of the installed-software-catalog 
option 
The scripts need to be aware of the environment under which they are operating. 
The environments that these scripts run under are as follows: 
- All scripts 
Each script shall be passed its script tag, the root directory to which instal- 
ling, the product directory where the product is located, and the control 
directory where the script is being executed from, as the environment vari- 
ables SW-CONTROL-TAG, SW-ROOT-DIRECTORY, SW-LOCATION, 
and SW-CONTROL-DIRECTORY, respectively. 
- p r e i n s t a l l ,  p o s t i n s t a l l ,  preremove, postremove, unprein- 
s t a l l ,  u n p o s t i n s t a l l  
The i n s t a l l  and remove scripts are run when loading or removing the 
software, or when recovering from a failed install. These may be executed 
by s w i n s t a l l  or swremove running on a host with a different architec- 
ture from the software. So, only the set of POSM.2 (3) utilities are 
guaranteed to be available on the server. Since the architecture of the file 
server is not necessarily known, the path to these commands is passed to 
the scripts via the environment variable SW-PATH. 
B.4 Software Administration Utilities 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
Additionally, these scripts need to know the alternate root directory so that 
operations are within the context of that root, not the root of the file server. 
(This directory is supplied to the scripts via an environment variable 
SW-ROOT-DIRECTORY.) It is critical that SW-ROOT-DIRECTORY 
is honored by these scripts. 
- checkinstall, checkremove, v e r i f y  
It is expected, but not assumed, that these scripts mostly check the state of 
a system that will actually run the software. For the install check (chec- 
k i n s t a l l )  script, again only a minimum set of commands is guaranteed to 
be available. This is because all check scripts are executed before any new 
software is installed. For the remove check and verify scripts 
(checkremove and verify), files from this software and its prerequisites 
are guaranteed to be available. 
Because of alternate root installation, these scripts also need to be aware of 
the SW-ROOT-DIRECTORY. 
These scripts configure the system for the software. Therefore they can run 
architecture specific commands, including files that are part of the software 
that defines the scripts. They are only run within the context of the system 
that will actually use the software. The SW-ROOT-DIRECTORY will 
always be /. 
B.4.1.6.1.1 
Control Script Behavior 
Control scripts allow vendors to perform tasks and operations, in addition to those 
that the tasks perform. The swinstall, swverify, and swremove utilities 
may each execute one or more vendor-supplied scripts. The presence of these 
scripts in the distribution is optional. Vendors of software to be installed need 
only provide those scripts that meet a particular need of the software. The follow- 
ing summarizes the standard scripts: 
request (Request script) 
This is the only script that may be interactive. This script may be 
run by swask, swinstall, or swconf i g  after selection, and before 
the "analysis" phase in order to request information from the 
administrator that will be needed for the configure script when 
that script is run later. 
This script is executed on the manager role and it is the responsibil- 
ity of the script to write all information into the response file in the 
directory 
where 
the 
script 
is 
being 
executed 
(the 
SW-CONTROL-DIRECTORY). The utilities will then copy this 
file to the SW-CONTROL-DIRECTORY on the target role where 
the configure and other scripts are executed from. This 
response file may be used by any other scripts, but particularly the 
con£ i g u r e  script. 
A recommended syntax for the response file is a set of attribute- 
value pairs that can be easily sourced by the configure script. For 
example, a request script might look like the following: 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
echo "Enter path to locate the database" 
read $path 
echo dbqath=$path >> $SW-CONTROL-DIR/response 
And the using con£ igure script: 
$dbqath=$default-db~ath 
if [ -f $SW-CONTROL-DIR/response 1 
then 
. $SW-CONTROL-DIR/response 
fi 
create-db ( $db_path ) 
response (Response file) 
The response file is generated by the request script and located 
in the same directory as that and the other scripts. The format and 
content of the response file is implementation defined. For exam- 
ple, it may be a list of environment variable definitions so that the 
consumer script can just source this file. 
checkinstall (Install check script) 
This script is run by swinstall during the "analysis" phase in an 
attempt to ensure that the installation (and configuration) succeeds. 
For example, the OS run state, running processes, or other prere- 
quisite conditions beyond dependencies may be checked. Running 
this script shall be free of side-effects, e.g., processes may not be 
killed, files may not be moved or removed, etc. 
preins tall (Install preload script) 
This script is run by swinstall prior to loading the software files. 
For example, this script may remove obsolete files, or move an exist- 
ing file aside during an update. 
This script and the next script are part of the "load" phase of the 
software installation process. Within each product, all preins tall 
scripts are run (order is dictated by any prerequisites), all filesets are 
loaded, then all pos tins tall scripts are run. 
pos tins tall (Install postload script) 
This script is run by swinstall after loading the software files. For 
example, this script may move a default file into place. 
unpreins tall (Recovery preload script) 
This script is run by swinstall after restoring the software files 
when recovering filesets. For example, this script may undo the 
actions of the preinstall script. 
unpos t ins tall (Recovery postload script) 
This script is run by swinstall before restoring the software files if 
the postinstall script has been run. It can be used to undo the 
actions of the pos tinstall script. 
veri f y (Verify script) 
B.4 Software Administration Utilities 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
This script is run by the swverify command any time after the 
software has been installed or configured. Like other scripts it is 
intended to verify anything that the commands do not verify by 
default. For example, this script may check that the software is 
configured properly and has a proper license to use it. 
f i x  
(Fix script) This script is run by the swverify command when the 
-F option is used. Its purpose is to correct any problems reported by 
the v e r i f y  script. 
checkremove (Remove check script) 
The remove check script is run by swremove during the remove 
"analysis" phase to allow any vendor-defined checks before the 
software is permanently removed. For example, the script may 
check whether anyone is currently using the software. 
preremove (Preremove script) 
This script is executed just before removing files. It may be destruc- 
tive to the software being removed, as removal of files is the next 
step. It is the companion script to the install postload script (pos- 
t i n s t a l l ) .  For example, it may remove files that the install post- 
load script created. 
This script and the next script are part of the "remove" phase of the 
software remove process. 
Within each product, all remove 
preremove scripts are run (in the reverse order dictated by any 
prerequisites), all files are removed, then all remove postremove 
scripts are run. 
postremove (Postremove script) 
This script is executed just after removing files. It is the companion 
script to the the install preload script (preins tall). For example, 
if this was a patch fileset, then the install preload script may move 
the original file aside, and this remove postload script may move the 
original file back if the patch was removed. 
con£ i g u r e  (Configure script) 
This script is executed by s w i n s t a l l  after all software has been 
installed (including loading files and running p o s t i n s t a l l  scripts) 
if software is being installed at /. It is also may run by swconf ig, 
even if the software has already been configured (allowing the 
administrator to reconfigure software). 
unconf i g u r e  (Unconfigure script) 
This script is executed by swremove before any software is removed 
(including removing files and running preremove scripts), if remov- 
ing from software installed at /. It is may also be run by swconf ig. 
Other scripts 
The vendor may include other control scripts, such as a script that is 
sourced by the above scripts, or scripts not defined in this part of 
ISOIIEC 15068. The location of the control scripts is passed to all 
scripts via an environment variable SW-CONTROL-DIRECTORY. 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOlIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
B.4.1.6.1.2 Control Script Return Code 
This part of ISOAEC 15068 only specifies return codes from scripts that affect 
operation of the utilities. If the script writer wants to convey additional informa- 
tion to the user, such information should be written to stderr or stdout, which gets 
recorded by the target role logging. See 4.1.6.5. 
A implementation that supports additional behaviors may initiate those behaviors 
based on implementation-defined return values from control scripts. 
B.4.1.6.2 Asynchronous Events 
Control script execution and file operations only generate note events at the begin- 
ning of the step, not at both the beginning and the end. This is because there is 
an event immediately after each script or file completes (e.g., the next file begin- 
ning, or the end of fileset execution). Additionally, if there is any error with the 
script or file, there is a warning or error event generated after the file completes. 
B.4.1.6.3 Stdout 
There is no additional rationale provided for this subclause. 
B.4.1.6.4 Stderr 
There is a variety of warnings and errors that could occur at the target role. It is 
desirable that this information be communicated back to the management role 
and displayed on stderr of the management role. Of course the detail of the infor- 
mation is determined by the verbose level. However, since this part of ISOAEC 
15068 does not specify the communication mechanism between the management 
and target roles, it should not place unnecessary requirements on this communi- 
cation mechanism, especially since this could be occurring in a distributed 
environment with the management role communicating with multiple target 
roles. Thus the only requirement here is that the target role be able to communi- 
cate a binary fail/success back to the management role. 
B.4.1.6.5 Logging 
For the management role, the information placed in the logfile is equivalent to the 
information sent to stderr and stdout if the verbose level was the same value as 
the loglevel. 
The stdout, stderr, and logfde output should contain the severity of the event as 
part of the output message. For example 
NOTE: 
The analysis phase succeeded on target "zook:/". 
WARNING: Target "zook:/": 
2 configure scripts had warnings. 
B.4.1.7 Extended Description 
B.4.1.7.1 Selection Phase 
An implementation may define other valid source specifications, such as "well- 
known" sources that may be available via a directory service or an object request 
broker. 
B.4 Software Administration Utilities 
207 

ISOlIEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
B.4.1.7.2 Analysis Phase 
There is no additional rationale provided for this subclause. 
B.4.1.7.3 Execution Phase 
I 
modify 
I 
I 
(non-existent) 
REMOVED 
I I 
remove complete 
stancopy 
/ 
I 
start copy 
I 
cmd failed 
TRANSIENT 
start cmd 
start cmd 
L 
AVAILABLE u 
cmd = [ copy I remove 1 
Figure B-5 - Fileset State Transitions (Within Distributions) 
It is clear that some vendors may want additional states. But allowing other 
values would make it problematic for any implementation trying to make deci- 
sions on how to deal with filesets with unrecognized states. An implementation 
may create an additional fileset attribute that would further modify the meaning 
of the attribute. For example, they may create an attribute called state-info and 
this attribute may have the value of f iles-missing when the state attribute is 
set to corrupt. There could be several valid values of this new attribute to 
describe various possibilities of a corrupt state. Of course, since this would be 
an implementation-specific extension, other implementations would not need to 
recognize this attribute or its semantics. 
Figure B-5 and Figure B-6 show the state transition diagrams for Installed 
Software and Distributions. 
B.4.1.8 Exit Status 
There is no additional rationale provided for this subclause. 
B.4.1.9 Consequences of Errors 
Since the utilities in this part of ISOIIEC 15068 operate on multiple software 
objects for multiple targets, the handling of error conditions (which is basically a 
policy decision) is complex. For example, should success be only all or nothing; or 
only, if all operations succeed for a specific host; or only, if all operations succeed 
208 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
r - - - - - - - - - - -  
I 
I (non-existent) 
REMOVED 
remove complete 
I
1
 
start install I 
1 
start install 
install complete 
start cmd 
Jl 
l 
Jl 
/ 
INSTALLED 
I 
TRANSIENT 
configure 
1 
I 
unconfigure 
I CONFIGURED / 
f 
start cmd 
cmd failed 
< 
- 
cmd = [ install I remove ] 
CORRUPT 
Figure B-6 - Fileset State Transitions (Within Installed Software) 
for a specific product on all hosts? The type of error or errors causing such 
definitions of success or failure is implementation defined. Whether or not the 
user may specify policies regarding the way in which errors are handled is also 
implementation defined. 
B.4.2 swask - 
Ask for user responses 
The purpose of this utility is to provide support for interactive requirements for 
software. By being able to execute these interactive scripts independently of 
swinstall and swconf ig, it allows those utilities to still be scheduled for non- 
interactive execution. 
The request scripts can be used to ask the administrator questions, or requests, 
where responses are needed by the software before installation or configuration. 
B.4.2.1 Synopsis 
There is no additional rationale provided for this subclause. 
B.4 Software Administration Utilities 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSK SYSTEM ADMINISTRATION - 
B.4.2.2 Description 
The utility may be used to perform the following task: 
- Answer the requests of software that has interactive customization needs 
The swask utility and request scripts are for software specific questions only. 
It does not provide any mechanism for implementation specific questions, 
although an implementation can choose to support implementation, site, or 
system-specific enhancements as normal implementation extensions. 
B.4.2.3 Options 
There is no additional rationale provided for this subclause. 
B.4.2.4 Operands 
There is no additional rationale provided for this subclause. 
B.4.2.5 External Influences 
There is no additional rationale provided for this subclause. 
B.4.2.6 External Effects 
There is no additional rationale provided for this subclause. 
B.4.2.7 Extended Description 
This part of ISOIIEC 15068 has not included a naming convention or structure for 
storing per client response information. If a request script requires per client 
information, then it needs to store that information for all clients in the 
response file, and then locate the appropriate information during configuration. 
This part of ISOIIEC 15068 provides a means for the request script to determine 
which clients are being requested, and for the configure script to determine 
that client. See 4.1.6.1. 
For example, a request script that requests per client keys is as follows: 
. $SW-SESSION-OPTIONS 
set - $targets 
echo 'keys="' > response 
for i i n  Stargets 
do 
echo enter key for $i 
read j 
echo $i $j >> response 
done 
echo ' " '  >> response 
And the corresponding con£ i g u r e  script that looks up the correct key from the 
response file: 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
. response 
set - $keys 
while [ -n $1 I 
do 
if [ "$1" = "$targetsu I 
then 
echo key is $2 
break 
fi 
shift; shift; 
done 
An implementation needs to ensure that any response files that already exist in 
the source or the catalog are copied to the SW-CONTROL-DIRECTORY before 
the request script is executed. The order of checks for response files allows 
for the following precedence: 
- User input (if ask=true) 
- Pre-existing response file 
- Pre-existing client configuration 
- Model response file (from source) 
There are numerous ways to implement where the request scripts are executed 
and what SW-CONTROL-DIRECTORY is set to, for the command 
swask -s source -c catalog Foo.Bar 
Example implementation A: 
mkdir catalog/Foo/Bar 
copy request script' for Foo.Bar to catalog/Foo/Bar 
copy any necessary response file to catalog/Foo/Bar 
if catalog/Foo/Bar/response exists, no action 
else if source/catalog/Foo/Bar/response exists, copy it 
set SW~CONTROL~DIRECTORY=catalog/Foo/Bar 
execute catalog/Foo/Bar/request 
(remove catalog/Foo/Bar/request) 
Example implementation B: 
mkdir catalog/Foo/Bar /usr/tmp/aaaa43542/Foo/Bar 
copy request script for Foo.Bar to /usr/tmp/aaaa43542/Foo/Bar 
copy any necessary response file to catalog/Foo/Bar 
if catalog/Foo/Bar/response exists, no action 
else if source/cata~og/Foo/Bar/response 
exists, copy it 
set SW~CONTROL~DIRECTORY=catalog/Foo/Bar 
execute /usr/tmp/aaaa43542/Foo/Bar/request 
(remove /usr/tmp/aaaa43542/Foo/Bar) 
Example implementation C: 
mkdir /usr/tmp/aaaa43542 
copy any necessary response file to /usr/tmp/aaaa43542 
if catalog/Foo/Bar/response exists, copy it 
else if source/cata~og/Foo/Bar/response exists, copy it 
set SW-CONTROL-DIRECTORY=/usr/tmp/aaaa43542 
execute source/cata~og/Foo/Bar/request 
mkdir catalog/Foo/Bar 
cp /usr/tmp/aaaa43542/response catalog/Foo/Bar 
(remove /usr/tmp/aaaa43542) 
B.4 Software Administration Utilities 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
B.4~2.8 Exit Status 
There is no additional rationale provided for this subclause. 
B.4.2.9 Consequences of Errors 
There is no additional rationale provided for this subclause. 
B.4.3 swconf i g  - Configure software 
The purpose of configuration is to configure the host for the software, and 
configure the product for host-specific information. For example, software may 
need to modify the /etc/rc setup file, or the default environment set in 
/etc/profile. It may need to ensure that proper codewords are in place for 
that host, or do some compilations. Unconfiguration undoes these steps. 
B.4.3.1 Synopsis 
There is no additional rationale provided for this subclause. 
B.4.3.2 Description 
This utility may be used to perform the following tasks: 
- configuring software on target hosts that will actually be running the 
software 
- configuring independent of the remove and install utilities 
- configuring or unconfiguring hosts that share software from another host 
where the software is actually installed 
- reconfiguring when configuration failed, was deferred, or needs to be 
changed 
B.4.3.3 Options 
There is no additional rationale provided for this subclause. 
B.4.3.4 Operands 
There is no additional rationale provided for this subclause. 
B.4.3.5 External Influences 
There is no additional rationale provided for this subclause. 
B.4.3.6 External Effects 
There is no additional rationale provided for this subclause. 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
B.4.3.7 Extended Description 
When there is no script, the software is still transitioned to con£ igured by 
swconf ig. The state of the fileset without any configuration requirements is still 
changed to denote to the users of the software that the software is ready to use. 
Having one state for both software that requires configuration, and for software 
that does not, is easier than checking that all software that requires configuration 
is in the configured state, and that all software that does not require configuration 
is in the installed state. 
If there are not sufficient (or any for that matter) responses in the response file, 
the conf igure script can log that further interaction is required and exit with a 
failure. This can prompt the user to execute the swconf ig utility with ask=true. 
The request script is executed at the manager role at the end of the selection 
phase, after the user has specified the software, but before analysis or execution 
begins on the target roles. The developers of this part of ISO/IEC 15068 considered 
defining a separate phase between the selection and analysis phases for swcon- 
fig and swinstall, but maintained the request steps as part of the selection 
phase for simplicity. 
Reconfiguration may be useful when some system configuration has changed. 
This may include running with ask=true so the user can input different informa- 
tion. 
There is the case where the configure script is not sufficient for configuring the 
software. If there is another configuration process that needs to be run, then this 
process should not change the state of the software to configured. After the other 
process is run, it can change the state to configured using the swmodif y utility. 
There are also situations where there can be multiple configurations of the same 
installed-software object. This part of ISOIIEC 15068 does not currently address 
this except by putting the burden on the software to manage the multiple 
configurations. This part of ISOhEC 15068 does support the user rerunning the 
con£ igure script each time a new configuration is needed. Using swconf ig -u 
can likewise interact with the user to unconfigure one, but not all, of the 
configurations. For both of these cases, if the script exits with return code 3, the 
software does not transition to the installed (i.e., unconfigured) state. 
The configure scripts should also adhere to specific guidelines. For example, 
these scripts are only executed in the context of the host that the software will be 
running on so they are not as restrictive as customize scripts. However, in a disk- 
less or NFS environment, they need to use file locking on any updates to shared 
files, as there may be multiple con£ igure scripts operating at the same time on 
these shared files. The con£ igure and unconf igure scripts need to be nonin- 
teractive, but may use the information in the response files generated by the 
ask script. 
For diskless, cold install (initial OS install), and generally building an OS to a 
separate disk, swconf ig can be automatically run after the system reboots to its 
real host to configure all unconfigured filesets. 
This part of ISOhEC 15068 does not define how file sharing, including diskless 
machines, should be implemented. However, separable configuration and installa- 
tion steps provide the basic building blocks. 
B.4 Software Administration Utilities 
213 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
One possible file sharing solution involves each client having its own installed 
software catalog from which the shared software can be configured, and the con- 
figured state can be recorded. This catalog can be built by "link installing" the 
software; instead of loading files and running p r e i n s  t a l l  and pos t i n s  t a l l  
scripts, link each product's files to the client file system. Then, build the catalog 
information of this linked software as if it were installed and configure the client. 
Another possible solution involves each client recording its configured state in a 
shared installed software catalog. In order to do this, the installed software could 
maintain a configured-instances attribute to hold a list of configured client names. 
Each client's con£ igure and unconf i g u r e  script could add or delete its name 
from this list. 
These scripts could also control whether the installed software state attribute was 
changed from i n s t a l  l e d  to con£ igured via swconf ig. If configuring, then 
the reconfigure option would need to be set to true. If unconfiguring, then the 
unconfigure script could exit with a return code of 3 (exclude) unless the 
configured-instances attribute was empty so that the installed software state 
would remain con£ igured. 
B.4.3.7.1 Examples 
B.4.3.8 Exit Status 
There is no additional rationale provided for this subclause. 
B.4.3.9 Consequences of Errors 
There is no additional rationale provided for this subclause. 
B.4.4 swcopy - Copy distribution 
B.4.4.1 Synopsis 
There is no additional rationale provided for this subclause. 
B.4.4.2 Description 
This utility may be used to perform the following tasks: 
- Copy software from one distribution to another 
- Merge software from one distribution into another 
- Copy software to a temporary distribution located to improve s w i n s t a l l  
reliability or performance 
B.4.4.3 Options 
There is no additional rationale provided for this subclause. 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
B.4.4.4 Operands 
There is no additional rationale provided for this subclause. 
B.4.4.5 External Influences 
There is no additional rationale provided for this subclause. 
B.4.4.6 External Effects 
There is no additional rationale provided for this subclause. 
B.4.4.7 Extended Description 
The swcopy utility operates much like the swinstall utility. The key distinc- 
tion between swcopy and swinstall is the way products are loaded. With 
swcopy, products are not installed for general use below the root directory. 
Instead, they are placed into a distribution, which can then act as a source for 
swinstall. 
B.4.4.7.1 Examples 
Copy the software-selections listed in / tmp/ load. produc t s other default 
values defined in the /var/adm/sw/def 
aults file) as follows: 
swcopy -f /tmp/load.products 
Remove a product Foo from the distribution on the tape device /dev/rctO as fol- 
lows: 
swcopy -s /dev/rctO \* @ /tmp/depotN 
swremove -d Foo @ /tmp/depotn 
swcopy - s  /tmp/depot \* @ /dev/rctOM 
B.4.4.8 Exit Status 
There is no additional rationale provided for this subclause. 
B.4.4.9 Consequences of Errors 
There is no additional rationale provided for this subclause. 
B.4.5 swinstall - Install software 
The install software task can have different connotations depending upon the life 
cycle stage of the software package. Figure B-7 illustrates the various state tran- 
sitions that can occur during an installation of software. These transitions 
comprise the set of install software tasks supported by this part of ISOIIEC 15068. 
The facilities provided by swinstall and swcopy are basic building blocks on 
which other function may be built. A few examples are shown below simply for 
the purpose of illustration. In the course of the illustration, various network sizes 
are given, but they are fictitious and supplied solely for illustration. 
B.4 Software Administration Utilities 
215 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
source 
software not already 
containing 
install 
on system, software 
packages 
on a system able to 
be used 
original sources 
(supplier's copy) 
re-install 
software existed, replace 
- 
with exactly same version 
(preserveldon't preserve 
customer changes) 
upgrade -, 
software existed, replace 
with newer version 
patch 
software existed, patchlfix 
C- 
at (not new version) 
software existed, add 
another version (both 
then exist) 
1987 
Figure B-7 - Installation State Changes 
1988 
- Some users might consider s w i n s t a l l  to work well for doing remote ins- 
1989 
tallation to tens of machines. But with hundreds of machines, perhaps a 
1990 
better strategy would be to use swcopy to place a distribution on several 
1991 
servers for use in several parallel swinstall invocations. And this exam- 
1992 
ple could be cascaded for hierarchical operation with thousands or hun- 
1993 
dreds of thousands of machines. 
1994 
- In addition, organizations that use special purpose software distribution 
1995 
programs could choose to use swcopy for that purpose, sending a copy of a 
1996 
distribution to some number of machines, pausing until assured that copies 
1997 
have arrived intact at all machines before proceeding, and finally causing 
1998 
swins t a l l  to begin work on each machine at the same time. 
1999 
- An installation process that makes efficient use of network resources might 
2000 
analyze the routing of distributions or files, discover that some traverse a 
2001 
common path before diverging, and cause only one copy to be sent over the 
2002 
common link using the swcopy utility. 
2003 
Table B-4 includes all functionality initially considered for inclusion in the install 
2004 
software task. The second column describes the various operations while the first 
2005 
column lists the degree of support provided by the SVR4, HP-UX, and SCO Unix 
200s software management utilities. 
2007 
B.4.5.1 Synopsis 
zoos 
There is no additional rationale provided for this subclause. 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
!I'able B-4 - Comparison of Software Administration Packages 
Operation Description 
Specification of the source 
pkgadd 
-d device 
I 
Ability to run noninteractively 
Ability to specify one or more packages to 
install 
Ability to provide default options I behavior 
from a file 
Force replacement of existing product 
Reboot aRer installing if necessary 
Destination directory (relative installation) 
Display table of contents from source (local l 
remote) 
-S sessionfile 
Ability to run noninteractively based on a 
saved interaction 
Verbose output 
Logfile location; pkgadd send mail (to root?) 
Provide name of file containing a list of pack- 
ages to install 
swinstall 
-s source 
yes 
-r response 
-n 
pkginst 
-a admin 
OVERWRITE 
AUTOBOOT 
BASEDIR 
pkginfo 
-d 
pkgcat 
Put package into file system (install an 
archive) 
custom+ 
Yes 
Disk space analysis; addl space rqmts 
Product precheck 
-n 
product 
config file 
-S sessiodle 
-F 
-r 
-d 
swlist 
d 
swinstall -t 
yes 
Yes 
Yes 
not applicable 
sends mail 
not applicable 
-S 
Product customize 
Fileset precheck 
Yes 
Yes 
? 
Yes 
Yes 
Yes 
yes 
? 
not applicable 
-L 
-f 
Yes 
Yes 
Fileset customize 
Support for product specific interaction wluser 
B.4.5.2 Description 
swcopy 
Yes 
no 
This utility may be used to perform the following tasks: 
Yes 
Yes 
no 
no 
Yes 
- Install operating system or application software, including configuration of 
operating system or application software as part of the install 
Yes 
Yes 
no 
Yes 
Yes 
Dependency checking 
- Reinstall the exact same version as already installed 
Yes 
Yes 
Yes 
Yes 
- Update (or upgrade) operating system or application software to a higher 
revision, and downdate (or downgrade) operating system or application 
software to a lower revision 
Yes 
some support 
1 no support 
- Apply software patches that have been packaged as standard software 
objects (filesets) 
yes 
- Install additional versions of software when one already exists 
B.4 Software Administration Utilities 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
B.4.5.3 Options 
There is no additional rationale provided for this subclause. 
B.4.5.4 Operands 
There is no additional rationale provided for this subclause. 
B.4.5.5 External Influences 
There is no additional rationale provided for this subclause. 
B.4.5.6 External Effects 
There is no additional rationale provided for this subclause. 
B.4.5.7 Extended Description 
The operations of the execution phase involve actual modification of the target file 
system and environment, and so from this point the utility is committed to the 
installation (in the sense that restoration to the state prior to load may not be pos- 
sible). 
Initially, swinstall, as well as swremove, would not act upon files in remote 
file systems. Although this was viewed as a good idea, it was removed. A vendor 
could check for local vs. remote file systems as a value-added feature, although it 
would require use of non-POSM functionality. It should be noted that such a file 
system check involves policy, and thus should be overridable. 
The normal use model is to install the latest revision of the product that matches 
the machine attributes of the targets. The default options fit this use model even 
when the targets specified have different uname attributes. As an example, 
assume the following command was issued: 
s w i n s t a l l  -s source productl @ h o s t l  host2 
Further assume that hostl and host2 have different uname attributes and that 
the source contains instances of productl that match the uname attributes of the 
two targets. The resulting install places the instance of productl that matches 
the uname attributes of hostl onto hostl, and the instance of productl that 
matches the uname attributes of host2 onto host2. 
The use of allow-incompatible=true is not the normal use model, and thus it is 
difficult to build in automatic filtering of selections. Thus, the user is required to 
uniquely specify which version is to be installed. 
During disk space analysis, an implementation need only process paths with posi- 
tive sizes in the space file to generate a maximum transient disk space require- 
ment. 
Both space freed after successfully installing products when 
autorecover=true and negative size records can be used to generate a second and 
final disk space requirement. 
218 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Configuration occurs on hosts where the software is to be used, as opposed to the 
hosts that are serving software. For example, a host of one OS or architecture 
may be a file server of software for another OS or architecture. Configuration is 
where the software is configured specifically for or by the host, or vice versa, 
where the host is configured for or by the software. Examples are any compila- 
tion, modifying the host default PATHNAME for the software, or configuring the 
software for host-specific parameters. Contrast this to p r e i n s t a l l  and pos- 
t i n s t a l l  scripts that should be written in a portable and relative (to the root 
directory) way since they may be executed in proxy. They are appropriate for 
operations that manage the files in the software that are to be served as an instal- 
lation as opposed to being use as a configuration. Because the root directory is /, 
this is not an alternate root or proxy install, i.e., the software is intended to be 
used on this host. When the root directory is not 1, then a proxy install situation 
should be assumed, and the client of this installation instead should be rebooted 
and run the configuration. These client steps are undefined within this part of 
ISOIIEC 15068. Since reboot is done only in non-proxy installations, the imple- 
mentation of the "target role" that runs on the target architecture can execute the 
implementation-defined reboot process and then execute swcon f i g. 
Reboot is executed after all filesets, kernel or otherwise, have been installed in 
order to avoid multiple reboots. This rationale is similar to a situation in kernel 
building. In that case, kernel building is only done after all filesets with the 
is-kernel attribute set to t r u e  are loaded in order to avoid multiple kernel builds. 
The operating system underlying an implementation may require additional sup- 
port for rebooting. For example, some systems may require intermediate reboots 
(reboot during the install process, with the install process continued after reboot). 
This, in turn, may require additional script return codes, or additional semantics 
for the is-reboot attribute. Clearly such additions are peculiar to the require- 
ments of particular operating systems. Such additions should be documented by 
the implementation. 
A file that is defined as l<product.directory>l<file> is (by default) installed in the 
same location as follows: / <product.directory> 1 <file>. 
If a location was specified in the software selections, then the file is instead 
installed to the location as follows: l<product.location>l<file>. 
Additionally, if both an alternate root and a location was specified, the file is 
installed to the location as follows: / alternate-root> I <product.location> I <file>. 
An example use for a p r e i n s t a l l  script might be saving existing files before 
loading new ones. An example use for a p o s t i n s t a l l  script might be to clean 
up previously installed versions of a product, or to move a default file into place. 
These scripts are supplied by the vendor and are executed by the target role on 
each target. Note that the target role is not necessarily the system that will be 
using the software (the client role), and that multiple client roles may share the 
software from the same target role. 
It is not sufficient to only state that the postkernel script is implementation 
defined. The name of the script, and also its location in the file system on each 
target host, should be known. Since kernel filesets can be loaded for alien archi- 
tectures (e.g., in diskless workstations), this script should also be aware of the 
effective root directory through the SW-ROOT-DIRECTORY environment vari- 
able. In general, all products with kernel filesets for a particular architecture 
B.4 Software Administration Utilities 
219 

ISOAEC 15068-2: 1997 (El 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX 
SYSTEM ADMINISTRATION - 
Example Dependencies: 
Order of Install Operations: 
Analysis Phase: 
checkinstall 
1 
Execution Phase: 
preinstall 
file loading 
postinstall 
I Pl I 
postinstall 
configure 
Figure B-8 - Order of Install Operations 
should have the same product.postkerne1 attribute defined. This script is con- 
tained within the product that contains the core operating system filesets. The 
implementation-defined default path value for postkernel permits operating sys- 
tem implementation agreements that simplify the need for each product to define 
this attribute. A side effect of this product level attribute is that different pro- 
ducts in the same distribution and same installation could conceivably have 
220 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOlIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
different values for the name of the script. In that case, multiple (probably redun- 
dant) kernel builds would occur and the order of fileset loads and kernel rebuilds 
would have to be specified. 
The postkernel step after kernel filesets have been loaded is based on the SDU 
model for kernel building. This model supports both rebuilding of the kernel for 
OS updates, and insertion of an appropriate default kernel for new installations or 
installation in proxy. It also supports ensuring that a working kernel is in place 
before committing to the bulk of the install. For example, updating the HP-UX 
operating system to a new revision requires installing kernel related filesets and 
rebuilding the kernel successfully before loading the rest of the filesets. This 
ensures that the new kernel is operational (noted by the success of the postkernel 
script) before loading filesets whose executables will not run on the previous ker- 
nel. If the kernel build step was not insured to be successful, then you could have 
an unusable or even unbootable system. 
When the installation is being done in proxy, the kernel build step should move a 
default new kernel into place instead of building a new kernel, since the architec- 
ture of the installed software may be different from the architecture of the server 
(the target role performing the installation). The script may check if it is an alter- 
nate root install by checking the SW-ROOT-DIRECTORY environment vari- 
able, and for the purpose of kernel building, it should take actions appropriate to a 
proxy install. Then, a new kernel containing the appropriate configuration (e.g., 
drivers) for the software installed may be built after or during the implementation 
specific configuration step (configuration occurs in the context of the system using 
the software). 
Since the postkernel script is part of the target installed-software object, there is 
flexibility as to what actual steps are performed. For example, if a "cross- 
compiler" kernel building functionality existed in the target role, a new kernel 
could actually be built even in proxy. 
There have been requests for removal of the required postkernel script return 
codes in 4.5.7.3.6, making them undefined. It was concluded that it is important 
to keep them. 
B.4.5.7.1 Examples 
Install the C and Pascal products from the network source, sw-server as follows: 
swinstall -s sw-server cc pascal 
Install the C and Pascal products on some remote hosts as follows: 
swinstall -s sw-server cc pascal @ hostA hostB hostC 
Update the Omniback product from a CD-ROM mounted at /cd as follows: 
swinstall -s /cd omniback 
Install an incompatible version of Omniback as follows: 
swinstall -x allow-incompatible=true omniback,a=foreign 
Install all products from the cartridge tape /dev/rctO as follows: 
swinstall -s /dev/rctO \* 
B.4 Software Administration Utilities 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX 
SYSTEM ADMINISTRATION - 
Install the software-selections listed in / tmp/ install. products on the 
hosts listed in / tmp/install .hosts as follows: 
swinstall -f /tmp/install.products -h /tmp/install.hosts 
B.4.5.8 Exit Status 
There is no additional rationale provided for this subclause. 
B.4.5.9 Consequences of Errors 
There is no additional rationale provided for this subclause. 
B.4.6 swlist - List software 
The swlist utility provides the means to read the catalog information. For 
installed-software, this information is stored in an implementation specific 
fashion. 'A read interface is needed to support portability between conforming 
implementations. In particular, an implementation may need to export current 
data for import into a new implementation. 
A read interface should also support the objective of distributed administration by 
providing a standard interface for output of information about software being 
managed by any conforming implementation. 
Finally, a vendor integrating into the standard software management environ- 
ment needs a standard way to query the catalog about itself as well as other pro- 
ducts, both from vendor-supplied scripts and the product execution itself. 
The swlist command line interface meets these key objectives. There could be 
an additional requirement that a standard programmatic interface be defined for 
access to the catalog by related management applications, as well as software pro- 
duct executables. This objective can only be (reasonably) met by defining language 
specific or language independent interfaces, as well as the data structures needed 
to represent at least single software attributes. Alternatively, a standard object- 
oriented interface for retrieving objects and attributes from a standard adminis- 
tration catalog could be defined through which this part of ISO/IEC 15068 could 
support its defined software objects. This is not an objective of this part of ISOhEC 
15068 at this time. 
B.4.6.1 Synopsis 
There is no additional rationale provided for this subclause. 
B.4.6.2 Description 
It may be used to perform the following tasks: 
- list distribution, installed-software, sofiware and software-file objects 
- list the attributes of each of the objects 
Discussed, but not included, is a possible vendor extension for swlist to provide 
an interface into displaying the attributes of the defaults files for the various 
222 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
utilities. The syntax for listing an attribute would be 
swlist -1 <utility> -a <option> 
B.4.6.3 Options 
The -v output is the parsable form as it is in a known format, with attribute (key- 
word value) pairs. It is analogous to a POSIX.2 {3) 1s long listing. The undefined 
format should include at least the object tag attribute (for product, subproduct, 
fileset, control-file) or path attribute (for files). 
Management of the host object (which contains the attributes for lists of distribu- 
tions and installed-software objects) is undefined within this part of ISOAEC 
15068. Still, -1 distribution and - 1 installed-software can be used to get lists of 
distributions and installed-software objects respectively on the host. 
To list the files in a fileset object, then no -1 option is needed. But, to list both 
the files and control-files, then both - 1 file and - 1 controlfile are needed. Like- 
wise, -1 fileset and -1 subproduct can be used together to list both the subpro- 
duct and fileset objects contained in a product. 
If the -v is not specified, a typical implementation might list all attributes 
specified on one line per object. 
Both the -1 and -a options can be used to obtain lists of contained objects where 
-1 returns available or currently installed objects and -a returns all objects 
defined in the original distribution. Only the -1 option can be used to obtain 
attributes of those contained objects. Note that the keyword for -a attribute is 
just the plural of the keyword for -1 level . For example 
swlist -a control-files <fileset> 
lists the defined control-file tags for the fileset, while 
swlist -1 control-file -a result <fileset> 
lists the result attribute of each control-file object in the fileset. 
Note that the -1 option could be extended to one more level, host, that would list 
all distributions on the host. 
Both the targets operand and the [-s source] option were considered for adminis- 
trator convenience, but the latter was removed from this part of ISOAEC 15068. 
The former is used to list software available from a distribution that is being used 
as a target. The latter was possible for listing software available from a distribu- 
tion that is being used as a source with other commands; however, it can also be 
accessed as a target. 
In addition to all attribute names defined in part of ISOAEC 15068, the following 
three 
additional items 
are 
supported 
by 
the 
-a attribute 
option: 
so£tware~spec,mod~dateandcreate~date. 
The so£ tware-spec item is supported in order for users of swlist to generate 
the exact fully qualified so£ tware-spec needed to uniquely identify a software 
object. This was included because creating a so£ tware-spec from the correct 
version distinguishing attributes is moderately difficult. 
The mod-date and create-da t e items are intended for use by administrators 
to easily see when the software object was first installed or available, or when it 
was last modified. The format of these strings should be time zone and locale 
dependent,suchas "Jan 1 4  1993 4:30 pMU. 
B.4 Software Administration Utilities 
223 

ISOAEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSlX SYSTEM ADMINISTRATION - 
In addition, so£ tware-spec, date, and create-date should not be stored in 
any software definition file. If they are found there, they will be ignored. 
Whether they are implemented as attributes, methods on existing attributes, or 
some other method, it does not matter. They may be specified like any other attri- 
butes for administrator convenience. 
B.4.6.4 Operands 
There is no additional rationale provided for this subclause. 
B.4.6.5 External Influences 
The one-liner extended option is used to create default output for the novice user, 
as well as for the experienced user. A typical implementation might list all attri- 
butes in the oneliner on one line per object. The tag and path attribute behavior 
also applies if the one-liner is undefined or set to no attributes. If the tag and 
path are really not desired in the output, then the -a attribute option may be 
used. 
More advanced support for formatting output, such as a format option using 
printfo syntax, was discussed, but it was deemed that this is a reasonable area for 
vendor extension, and not necessary for this part of ISOIIEC 15068 given the -v 
parsable format. 
B.4.6.6 External Effects 
There is no additional rationale provided for this subclause. 
B.4.6.7 Extended Description 
B.4.6.7.1 Examples 
List all distributions on a host 
swlist -d -1 distribution @ host 
List all products in the default distribution 
swlist -d 
List all files in an installed fileset 
swlist Product.Fileset 
swlist -a files Product.Fileset 
swlist -1 file Product.Fileset 
List all files and control-files in a fileset, in INFO file format 
swlist -v -1 file -1 control-file Product.Fileset 
List the states of control-files in product 
swlist -a state -1 control-file Product 
List the definition of the contents of a bundle in the default distribution 
swlist -d -a products -a bundles Bundle 
Dump an installed-software catalog 
swlist -1 file -1 control-file -1 bundle -1 subproduct -c exported-catalo 
List a fileset software object into the software definition file format 
swlist -1 fileset -v -c exported-catalog Product.Fileset 
List a product's copyright 
swlist -a copyright Product 
List the values of all product and fileset software tag, revision, and title attributes 
224 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
from the default distribution 
swlist -d -1 fileset -x one-liner='tag revision title' 
B.4.6.8 Exit Status 
There is no additional rationale provided for this subclause. 
B.4.6.9 Consequences of Errors 
There is no additional rationale provided for this subclause. 
B.4.7 swmodify -.Modify software catalog 
The swmodi f y command provides the write interface to the catalog information. 
For installed software this may be in an implementation specific manner. A write 
interface is needed to support portability between conforming implementations. 
In particular, an implementation may need to import current data dumped from a 
previously used implementation. 
Another objective of this part of ISO/IEC 15068 to provide administrator portabil- 
ity. A write interface provides a standard way for administrators to integrate 
software initially administered (installed) using other tools besides those defined 
in this part of ISOIIEC 15068. 
Finally, there needs to be a standard way for a software vendor to access and 
modify attributes in the catalog belonging to their product from their vendor- 
defined scripts, or from the execution of the product itself. 
The swmodif y command line interface meets these key objectives. There could 
be an additional requirement that a standard programmatic interface be defined 
for access to the catalog by the target role. The objective here would be to be able 
to link in different conforming catalog implementations with the conforming tar- 
get role. This objective can only be (reasonably) met by defining a programmatic 
interface, as well as the data structures needed to represent all software objects 
and attributes. Alternatively, a standard object-oriented interface for setting and 
committing objects to a standard administration catalog could be defined through 
which this part of ISOIIEC 15068 could support its defined software objects. This 
is not an objective of this part of ISO/IEC 15068 at this time. 
B.4.7.1 Synopsis 
There is no additional rationale provided for this subclause. 
B.4.7.2 Description 
This utility may be used to perform the following tasks: 
- Modify or fix attributes at all levels of a distribution or installed-software 
object. 
- Add and delete software objects from within scripts or other management 
interfaces. 
B.4 Software Administration Utilities 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
- Add and delete software file objects from scripts or other management 
interfaces. This is similar to i n s t a l l f  in SVR4. 
- Convert the format of installed-software databases such as when one data- 
base technology is being replaced by another. 
A proposal was discussed to extend swrnodi f y to provide an interface into modify- 
ing the attributes of the defaults files for the various utilities. The syntax for 
modifymg an attribute would be 
swmodify -1 <utility> -a <option>=<value> 
B.4.7.3 Options 
There is no additional rationale provided for this subclause. 
B.4.7.4 Operands 
When an exported-catalog is specified (a file in the software definition format or a 
directory in the exported catalog structure), any software selections apply to the 
exported-catalog, not the target. If the software from the exported-catalog 
matches more than one software object in the target, those modifications are not 
applied. 
If an exported-catalog is not specified, the software selections apply just to the 
target. If they resolve to more than one software object, those modifications are 
not applied. 
B.4.7.5 External Influences 
The files option provides a convenient interface for adding to the catalog files that 
were created by control scripts, without having to create an intermediate input 
file. This provides function equivalent to that of the SVR4 i n s  t a l l  f command. 
For example 
cp 
$ s w ~ R o o T ~ D I R E C T O R Y / $ S W ~ L O C A T I O N / ~ ~ ~ / ~ ~ ~ ~ ~ ~ ~  
\ 
$SW-ROOT-DIRECTORY/etc/file 
swmodify -x files=$S~-~00~-~1~~~TORY/etc/file 
\ 
~roduct.Fileset,l=$SW_LOCATION 
B.4.7.6 External Effects 
There is no additional rationale provided for this subclause. 
B.4.7.7 Extended Description 
B.4.7.7.1 Examples 
Reload an installed-software catalog 
swmodify -c swlist-output-dir 
Add a software object defined in the software definition file format 
swmodify -c swmodify-input-file 
Delete an obsolete fileset 
swmodify -u Product-Fileset 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Delete three files from a configure script 
swmodify -u -x files="filel file2 file3" Product.Fileset 
Modify a distribution level attribute 
swmodify -d -a name=$NAME 
B.4.7.8 Exit Status 
There is no additional rationale provided for this subclause. 
B.4.7.9 Consequences of Errors 
There is no additional rationale provided for this subclause. 
B.4.8 swpackage - Package distribution 
Table B-5 enumerates the set of operations and functionality extracted from the 
corresponding SVR4, HP-UX, and SCO Unix software management utilities. The 
first column describes the operation, the second indicates the level of support for 
that functionality provided in the SVR4, the third column describes the level of 
support provided in the HP-UX software management utilities, and the fourth 
column describes the support provides by the SCO Unix distmaster+ product. 
B.4.8.1 Synopsis 
There is no additional rationale provided for this subclause. 
B.4.8.2 Description 
This utility may be used to perform the following tasks: 
- Package software into a new or existing distribution directory on the local 
host 
- Package software into a new serial distribution that may be a character- 
special file representing a DDS, nine-track tape, cartridge tape, or a regular 
file, within which the POSIX.1{2) extended tar or extended cpio archive is 
stored 
Both outputs use the same software packaging layout, but in different formats 
(directory vs. serial). 
B.4.8.3 Options 
2402 There is no additional rationale provided for this subclause. 
2403 
B.4.8.4 Operands 
2404 
There is no additional rationale provided for this subclause. 
B.4 Software Administration Utilities 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX 
SYSTEM ADMINISTRATION - 
%ble B-5 - Comparison of Existing Practice for Software Packaging 
Functionality 
pkgmwpkgproto 
pkgproto -i 
assumes that sym- 
bolic links should be 
treated as symbolic 
links. The -i option 
insists that symboli- 
cally 
linked 
files 
should be treated as 
literal files. 
not applicable 
pkgmk -d device 
swpackage 
treatment of 
sym- 
bolic links 
swpackage -f 
supported on a per 
file basis 
assumes that sym- 
bolic links should be 
treated 
as 
literal 
files. The -f option 
treats symbolic links 
as symbolic links. 
will have some 
verbose output 
swpackage -v 
swpackage -d direc- 
tory 
swpackage 
-a 
archive-file 
swpackage -s size 
specify output device 
user may arbitrarily 
speclfy directory or 
device 
pkgmk -1 limit 
user 
may 
specify 
capacity of 
device 
(there 
will 
be 
defaults) 
Product 
Contents 
Database 
size of output 
configuration 
file 
describing package 
pkgmk -f prototype 
rest of information is 
in the pkgmap file 
generated by run- 
ning pkgmk 
swpackage product- 
specification-file 
the "info" 
file 
is 
stored on the custo- 
mer machine. 
not applicable 
set root 
path 
to 
source pathname 
user may specify dis- 
tribution 
directory 
location 
set relocatable base 
directory 
not applicable 
unsure 
override architecture 
information 
-a arch 
not applicable 
user will specify on 
override 
version 
information 
-v version 
override 
product 
stamp definition 
define product media 
to be created 
-p product-stamp 
not applicable 
not applicable 
not applicable 
version of package 
(package tool used) 
override default log 
file 
B.4.8.5 External Influences 
There is no additional rationale provided for this subclause. 
B.4.8.6 External Effects 
There is no additional rationale provided for this subclause. 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
B.4.8.7 Extended Description 
A target distribution may only be the first step in creating a CD-ROM, either as a 
serial or directory distribution. There is no special support provided by swpack- 
age for the creation of CD-ROM. 
Distribution tapes are created in POSM.1 (2) extended cpio or extended tar for- 
mat. To create the tape, swpackage first builds the products into a temporary 
distribution. (It is removed when swpackage completes.) To conserve space, all 
files may exist as references to the real source files. After the distribution is con- 
structed, swpackage then archives it, along with the real files, onto the tape dev- 
ice. 
The swpackage command supports two methods for making additions andlor 
modifications to an existing distribution: 
(1) Modify the PSF used to package some or all of the products in the exist- 
ing distribution. Then invoke swpackage and specify the appropriate 
software-selections on the command line. Each specified software selec- 
tion should correspond to a modified product, subproduct, or fileset 
definition within the PSF. If new filesets are being added to an existing 
product, swpackage will identify the product and add the filesets. If 
product, subproduct, or fileset attributes are being modified, swpackage 
will match them and do the replacements. 
(2) Create a new delta PSF for the products being modified. Send this delta 
file as the source PSF, and swpackage will repackage all of the specified 
products. The smallest unit that can be changed is the fileset. If a file 
within a fileset is added, modified, or deleted, the new fileset would 
replace the existing fileset. Enough product information needs to be 
given to correctly identify the product in which this fileset is located. 
When swpackage reads the delta PSF, it parses and deals only with the 
differences. 
As the delta PSF comes closer to the original PSF, the repackage process 
will take as much time or more as the original packaging. 
If a modified product, subproduct, or fileset specification redefines any attributes, 
the new attribute values will replace the existing values. 
B.4.8.7.1 Examples 
Package the products specified in /develop/product-lis t onto a distribution 
located at the default location 
swpackage -s /develop/product-list 
Package the same products onto the distribution located at /develop/cd, from 
where they can printed onto a master CD-ROM as follows: 
swpackage -x media-type=directory -d /develop/cd\ 
-s /develop/product-list 
Create a tape media on a 1300 MB DDS tape loaded at /dev/dat as follows: 
swpackage -x media-type=serial -x media_capacity=1300 -d /dev/dat\ 
-s /develop/product-list 
B.4 Software Administration Utilities 
229 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
B.4.8.8 Exit Status 
There is no additional rationale provided for this subclause. 
B.4.8.9 Consequences of Errors 
There is no additional rationale provided for this subclause. 
B.4.9 swremove - 
Remove software 
B.4.9.1 Synopsis 
There is no additional rationale provided for this subclause. 
B.4.9.2 Description 
This utility may be used to perform the following tasks: 
- Remove installed software 
- Remove software from a distribution 
- Remove software patches that have been packaged as standard software 
objects (filesets) 
B.4.9.3 Options 
There is no additional rationale provided for this subclause. 
B.4.9.4 Operands 
There is no additional rationale provided for this subclause. 
B.4.9.5 External Influences 
There is no additional rationale provided for this subclause. 
B.4.9.6 External Effects 
There is no additional rationale provided for this subclause. 
B.4.9.7 Extended Description 
The remove software utility is a reversal of the install software utility. The 
stages, such as check remote, pre-remove customization, etc., are identical in pur- 
pose to the counterpart stage of the swinstall utility. 
The swinstall utility automatically installs all filesets that a selected fileset 
depends on, but swremove needs to be explicitly told to remove filesets that 
depend 
on 
a 
selected fileset. 
This may 
be 
changed 
by 
setting 
autoselect-dependents =true. The swremove utility has this default because it is 
easier to remove additional things if they are not wanted (that is, remove the 
230 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
2521 
dependencies) than it is to restore something that was erroneously removed. 
2522 
Example Prerequisites: 
Order of Remove Operations: 
Analysis Phase: 
checkremove 
Execution Phase: 
Y 
unconfigure 
preremove 
@ 
postremove 
2528 
2529 
Figure B-9 - Order of Remove Operations 
B.4 Software Administration Utilities 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
When removing software objects, but not a bundle or subproduct that refer to 
those objects, the standard specifies the behavior as implementation-defined. 
Consensus on this matter was not acheived. An implementation may choose to 
remove the object, to warn the user and remove the object, or make this case an 
error and not remove this object. If this is an error, then the user should have a 
way to override this behavior. 
The general consensus was that removing part of a bundle should be a warning or 
an error, and removing part of a subproduct should be a note or a warning. A 
bundle will not get installed unless explicitly specified. So, removing part of 
another installed bundle is not necessarily desirable. On the other hand, a sub- 
product may get installed as a result of a product being installed. Also, if there is 
a good reason why the subproduct needs to be complete (i.e., there is a dependency 
on it), then an implementation may generate an error or warning based on depen- 
dency checks. 
An example use of an unconf i g u r e  script is to perform an orderly shutdown of 
an application in preparation for removing it. The unconfigure script is a 
script or program supplied by the vendor. It is executed by the client role on each 
target host. 
Originally, the behavior of swremove was to remove empty directories not refer- 
enced by other products. The ability to have multiple catalogs made this impracti- 
cal. Since this seemed overly restrictive, the behavior with respect to directories 
is now implementation defined. Note, however, that unremoved directories should 
still be logged. 
B.4.9.7.1 Examples 
Remove the C and Pascal products as follows: 
swremove c c  pascal 
Remove the C and Pascal products stored in the distribution lvarlspool lsw as fol- 
lows: 
swremove -d cc pascal @ /var/spool/sw 
Remove the Green and Blue subproducts from the Foo product, and write detailed 
messages to the stdout/stderr as follows: 
swremove -x verbose=2 Foo-Green Foe-Blue 
Preview what would happen if the Green and Blue subproducts were removed 
from the Foo product as follows: 
swremove -p Foo.Green Foo-Blue 
Remove the software-selections listed in ltmp 1remove.list as follows: 
swremove -f /tmp/remove.list 
B.4.9.8 Exit Status 
There is no additional rationale provided for this subclause. 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOlIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
B.4.9.9 Consequences of Errors 
There is no additional rationale provided for this subclause. 
B.4.10 swverif y - 
Verify software 
B.4.10.1 Synopsis 
There is no additional rationale provided for this subclause. 
B.4.10.2 Description 
This utility may be used to perform the following tasks: 
- Verify the installed software, including dependencies, file attributes, and 
running ver i f y scripts 
- Verify the distribution software, including dependencies, and file contents 
attributes 
- Fix installed software information including running f i x  scripts 
B.4.10.3 Options 
There is no additional rationale provided for this subclause. 
B.4.10.4 Operands 
There is no additional rationale provided for this subclause. 
B.4.10.5 External Influences 
File system permissions cannot be verified in distributions since there is no 
requirement that distribution files have the permissions set to those defined for 
them. The swinstall utility sets the permissions based on the attributes 
defined, not the existing permissions. It is expected that the default permissions 
an implementation uses for files within distributions is the same as the attributes 
defined. However, there are some security considerations, as well as media con- 
siderations, such as for CD-ROMs, that would make those permissions different. 
Note that the verify script is free of side effects. 
Originally, the options with the check- prefix had command line options. How- 
ever, it was felt so many option letters confused the command line. In addition, 
the semantics of which checks to perform were difficult to specify. It was felt that 
by adding these options to the options file, a system could be configured to perform 
those set of checks to be used in the normal case. When a different set of checks 
are desired, a user could override specific checks with the -x option=value option 
or specify a different options file with the -x optionsfile option. 
B.4 Software Administration Utilities 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
B.4.10.6 External Effects 
There is no additional rationale provided for this subclause. 
B.4.10.7 Extended Description 
A verify script is used to ensure that the configuration of the software is 
correct. Possible vendor-specific operations for a verify script include the fol- 
lowing: 
- Determination of active or inactive state of the product 
- Check for corruption (correctness) of product configuration files (writable 
files) 
- Check for correct and incorrect configuration of the product into the OS 
platform, services, or configuration files 
- Check licensing situation 
Note also that if a preinstall or postinstall script changes attributes of a 
file during install, then the swrnodify command should be used to adjust those 
attributes in the installed-software catalog. Otherwise, file level verify will likely 
fail. 
A fix script is used to attempt to ~IX the installed software. Possible vendor- 
specific operations for a fix script include similar operations to rerunning a 
preinstall or postinstall script. Operations similar to rerunning a con- 
figure script are also possible if the state of the software is con£ igured. 
B.4.10.7.1 Examples 
B.4.10.8 Exit Status 
There is no additional rationale provided for this subclause. 
B.4.10.9 Consequences of Errors 
There is no additional rationale provided for this subclause. 
B.5 Software Packaging Layout 
Software to be distributed according to this part of ISOIIEC 15068 is represented 
in a form defined as the software packaging layout. The software packaging lay- 
out provides a standard for representing software using the exported form of the 
software catalog, and a structure for the actual software files. 
The reason for specifying a standard software packaging layout is to allow for 
interoperable media. In other words, any conforming distribution may be read by 
any conforming implementation. 
This layout does not dictate how the software files are actually located in the file 
system. The layout provides a portable means to store and distribute files for any 
file organization. Installing could involve a transformation from a canonical form 
234 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
to one that conforms to the requirements of the architecture of the machine on 
which the software is to run. 
The software catalog refers to the information (metadata) that describes software 
objects in a particular distribution or installed software object. Each catalog 
describes exactly one software-collection (installed-software object or distribu- 
tion). 
The information in the software catalog may be created, altered, and removed 
using the utilities defined in this part of ISOtIEC 15068. A system administrator 
may use swlist, for example, to obtain a list of installed software products, the 
shell scripts used for installing a product, or the files contained within a product. 
Each system has a default catalog for installed-software. This catalog provides 
information on the products installed for use on that system. Permission to 
modify the catalog may be restricted to the system administrator. Since there are 
times when users without special privileges may wish to use software administra- 
tion tools to install and maintain software in their parts of the file store, addi- 
tional installed-software objects, in separate software catalogs, may be created 
and acted upon by any user having appropriate authority. 
The way that installed-software catalog information is stored (whether kept in 
text files or databases, whether distributed or centralized), is undefined within 
this part of ISOIIEC 15068. 
B.5.1 Directory Structure 
Table B-6 compares packaging layouts for SDU and SVR4. 
While some existing practices had a different format for the file information than 
for the software structures, it was determined that a consistent format for INDEX 
and INFO files was desirable. 
The original format of an SDU INFO file is shown in Figure B-10. The original 
format of an SVR4 pkgmap file (for files and directories) is shown in Figure B-11. 
An implementation may want to support several levels of INDEX files. The global 
INDEX file shall contain the correct information, and other lower level INDEX files 
may be used for convenience of the implementation when building the global 
INDEX. The following INDEX files, when simply concatenated together, form the 
following global INDEX: 
- catalog/dfiles/INDEX 
A distribution INDEX contains the definition of the attributes set for the 
distribution itself and the bundle definitions. 
- catalog/<product~control~directory>//pf 
iles 1 INDEX 
A product INDEX contains the definition of the product and subproduct 
attributes for the product object that product-control-directory 
represents. 
- catalog 1 <product~control~directory~//~f;lesetcontroldirecto// 
INDEX 
A fileset INDEX contains the definition of the fileset attributes for the fileset 
object that fileset-control-directory represents. 
An example of product control directory name follows. If a product with the tag 
attribute value of SDU is added to a distribution, and no other objects with the 
B.5 Software Packaging Layout 
235 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
Table B-6 - Packaging Layout Comparisons 
prodl 
pkginfo 
pkgmap 
install1 
copyright 
compver 
depend 
request 
preinstall 
postinstall 
preremove 
postremove 
space 
root/ 
Iusrhin 
SDU 
catalog1 
INDEX 
PROD 4511 
INFO 
FILESET 
precustomize 
... 
PROD 4511 
INDEX 
INFO 
FILESE'lYsystem/ 
<in INDEX 
precustomize 
postcustomize 
decustomize 
<in INFO 
FILESEYfiled 
Iusrhin 
PROD 43134 
. . . 
PROD 902a 
same value of tag exist, the product~control~directory for storing the product 
object is SDU/. If another product object with the tag SDU is added to the distri- 
bution, the product~control~directory 
for that product object is SDU - 2  /. The first 
SDU product was assigned the value of 1 for its product.instance-id. 
B.5.2 Software Definition File Format 
Through the software definition files contained in this part of ISOIIEC 15068, an 
exported catalog structure representation is defined within the context of a distri- 
bution. This is necessary to have interoperable media. It is also used to define an 
exported catalog structure representation for installed~oftware objects. This is 
necessary for swlis t output. 
In the PSF, attributes may be undefined or set explicitly unless their default value 
is none. Most attributes have a default value. Default values are logically 
required for attributes that may be optionally specified in the PSF. 
Most Boolean attributes default to false, such as is-reboot, is-kernel, and 
islocatable. Instead of defaulting all Boolean attributes to f a l s e  through clever 
wording of the attribute tag, some default to t r u e ,  such as islocatable. 
The d i s t r i b u t i o n  keywords and the layout-version specification should not be 
changed in future amendments to this part of ISO/IEC 15068 so an 
236 
B Rationale and Notes 

PART 2: SOFTWARE ADMIMSTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
f ileset-name 
+type [ ,model 
+type[ ,model 
size file-name [link-target] 
size file-name [link-target] 
f ileset-name 
+type[,model 
+type[ ,model 
size file-name [link-target1 
size file-name [link-target1 
Figure B-10 - SDU INFO file format 
:1 895 
1 ftype class filename[=linkname] mode owner group [size cksum modtimel 
1 ftype class filename[=linkname] mode owner group [size cksum modtime] 
1 ftype class filename[=linkname] mode owner group [size cksum modtime] 
Figure B-11 - SVR4 pkgrnap file format 
implementation can determine the version of the layout being used. 
In the PSF, the < (less than) is a token for unambiguous parsing, but it does not 
imply that the file contents should be included (i.e., file re-direction). The alterna- 
tive is to take the file from that path on the development system and store it as a 
control-file (e.g., a copyright control-file containing that attribute). 
Vendor-defined attributes include any attribute that has a keyword not defined by 
this part of ISO/IEC 15068. Since the value of any vendor-defined attribute is 
interpreted simply as a string, the original value entered in the PSF is preserved 
through packaging and copy operations. The value is thus preserved until the 
package is finally installed. During installation, s w i n s t a l l  may be affected by 
vendor-defined attributes in the INDEX or INFO files and may choose to preserve 
or not preserve the associated values for such keywords. The s w i n s t a l l  utility 
is only required to preserve in the catalog those values that correspond to the key- 
words defined in this part of ISOIIEC 15068. Refer also to portions of the extended 
description for the swinstall utility. 
Since device file creation is not possible in a portable way (i.e., not included in 
POSM.1{2) or POSM.2 {3)), only a conf igure script that is running on the target 
system can reliably create devices files. POSM.1{2) does define the "syntax" of 
major and minor, so it is possible for the con£ i g u r e  script to add these attri- 
butes via swmodify (and for swmodify to look up their values through 
POSM.l (2) interfaces). This in turn allows swverify to verify that these are 
correct. 
B.5 Software Packaging Layout 
237 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
The extended file definition syntaxes provide a flexible interface to individual 
software vendor development and build systems. These build systems may con- 
tain files to be packaged existing anywhere from intermingled with source files to 
a target build tree containing the files in the locations they would be in after ins- 
tallation. 
- The directory mapping is intended for use with target build trees where all 
files are below a build root. The build root maps to some directory in the 
installed location such as / or some subdirectory like the product-control-- 
directory. 
Recursive (implicit) file specification can be used with the previous instead 
of explicitly defining each file. In this case the mapped directory shall con- 
tain only the files from that particular fileset, and shall map to some direc- 
tory (e.g., /) on the installed system. 
Explicit file specification is useful for build systems where files are not 
organized in the same way they are to be installed, and for build systems 
that want the control of listing each file explicitly (implicit specification 
could possibly lead to unwanted files being packaged). 
- Packaged files, by default, take the permissions of the files being packaged. 
Specification of permissions override the permissions of the files being pack- 
aged. Alternatively, each file may have its permissions explicitly defined. 
The following examples illustrate the use of the d i r e c t o r y  and f i 1 e keywords: 
(1) Include all files under /build/s/, to have a product.directory as 
/opt Isw: 
d i r e c t o r y  I b u i l d l s  /opt/sw 
f i l e  * 
(2) Include only certain files under 
/build/s/, to be rooted under 
/opt Isw: 
d i r e c t o r y  I b u i l d l s  /opt/sw 
f i l e  binlswinstall 
f i l e  -t h 
binlswinstall binlswcopy 
f i l e  -t d 
l i b l n l s  
f i l e  nls1swinstall.cat l i b / n l s / s w i n s t a l l . c a t  
f i l e  data/swinstall.defaults newconfigldefaultslswinstall 
f i l e  datalswinstall.defau1ts /var/adm/sw/defaults/swinstall 
(3) Explicitly list files, no directory mapping specified: 
f i l e  /build/s/bin/swinsta11 /opt/sw/bin/swinstal1 
f i l e  -t h 
/opt/sw/bin/swinstal1 /opt/sw/bin/swcopy 
f i l e  -t d 
/opt/sw/lib/nls/ 
f i l e  /build/s/nls/swinstall~cat 
/opt/sw/lib/swinstall.cat 
(4) Use all specification types to include files: 
d i r e c t o r y  I b u i l d l s  /opt/sw 
f i l e  * 
f i l e  binlswinstall 
f i l e  -t h 
binlswinstall binlswcopy 
238 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
f i l e  data/swinstall.defaults newconfig/defaults/swinstall 
f i l e  data/swinstall.defaults /var/adm/sw/defaults/swinstall 
The following examples illustrate the use of the f i l e g e r m i  s s i ons keyword: 
Set a readonly 444 mode for all file objects (requires override for every 
executable file and directory): 
f i l e g e r m i s s i o n s  -m 444 
Set a read mode for non-executable files, and a readlexecute mode for exe- 
cutable files and for directories: 
f i l e g e r m i s s i o n s  -u 222 
Set the same mode defaults, plus an owner and group: 
f i l e g e r m i s s i o n s  -u 222 -0 b i n  -g b i n  
Set the same mode defaults, plus a uid and gid: 
f i l e g e r m i s s i o n s  -u 222 -0 2 -g 2 
Set the owner write permission (in addition to the above): 
f i l e g e r m i s s i o n s  -u 022 -0 2 -g 2 
If the user defines no f i l e g e r m i s s i o n s ,  swpackage uses the default value 
f ilegermiss'ions -u 0 0 0 for destination file objects based on existing 
source files. This means that the mode, ownerluid, and grouplgid are set based on 
the source file, unless specific overrides are specified for a destination file. 
The default value f i l e g e r m i s s i o n s  -u 000 -0 b i n , 2  -g bin,2 is used 
by swpackage for destination file objects being created (not based on existing 
source files). 
If neither the path nor any attributes is specified, then the suggested default 
values of the attributes are -m 077 7 -0 bin, 2 -g b i n ,  2. These are only 
suggestions since the default values in this case are implementation defined. 
The space file is used to account for disk space used (positive size) or freed (nega- 
tive size) by control script execution. Negative sizes may be used by a more 
sophisticated disk space analysis that accounts for transient as well as final disk 
space. For example, if a fileset has a conf igure script that creates a 200 KB file 
/usr/foo/data/f i l e ,  it can include a space file with the entry 
/usr/foo/data 200000 
This will tell the implementation to add 200 KB to the disk space requirements. If 
the configure script moves a 35 KB file from / e t c / f i l e  to /sbin/bin, it 
could include the entries 
/etc/file -35000 
/sbin/file +35000 
An implementation may choose to ignore the negative entry, producing a "worst 
case" disk space requirement. Or the implementation may choose to list the 
"worst case" requirement (ignoring the negative entry, reflecting the transient 
disk space required), and then the final disk space (accounting for the negative 
entry). Finally, if a con£ i g u r e  script created a temporary 5 MB file under / tmp, 
it could add the entries: 
/tmp 5000000 
/tmp -5000000 
B.5 Software Packaging Layout 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSE SYSTEM ADMINISTRATION - 
B.5.3 Serial Format and Multiple Media 
There was a discussion on the desire for system vendors to have both a boot parti- 
tion and the serial archive distribution containing the operating system software 
on a single medium. Numerous strategies were discussed, but no solution could 
be found that met all the disparate boot strategies. Vendors that have this need 
may need to create nonconforming media that have both the boot partition and 
the distribution on the media. They should then copy that distribution into a con- 
forming form. 
Separate archives on each medium allows the swinstall utility to only request 
the needed medium (via the media-sequence-number), without having to scan 
each one sequentially. The rule concerning a fileset being in one archive is needed 
so the swinstall utility knows whether to request the next medium when it 
reaches the end of the current archive. 
When packaging a product that contains kernel or prerequisite filesets onto a 
serial media, swpackage should put the filesets on the serial media in the same 
order in which they will be requested by swinstall in order to minimize media 
rewinds. If the packager and install utilities used are from different implementa- 
tions, then the amount of rewinds dramatically increases. One possible ordering 
convention is as follows: 
(1) Order all products alphabetically by their product tag (and as they are 
encountered for multiple versions of the same product). Order all filesets 
alphabetically within each product. This results in the initial ordering for 
all filesets. 
(2) Traverse the list front to back, moving all kernel filesets to the front of 
the list in their same relative order to each other. 
(3) For each fileset, determine all of the prerequisite dependents for that 
fileset, meaning filesets that have a prerequisite on this fileset, or a 
prerequisite on an object containing this fileset. Traverse the list back to 
front, moving each fileset in front of the first of its dependents in the 
current list order, considering dependencies across products and chaining 
of prerequisites as follows: 
- If the first dependent is in the same product, move the fileset just in 
front of that dependent. 
- If it is in a different product, move it in just in front of all filesets in 
product that contains the dependent. 
- If a fileset A depends on B which depends on C, move the filesets in C 
in front of A. 
- Leave the fileset where it is if there are no dependents. 
- Do not move any fileset more than once. Note that circular prere- 
quisites will cause at most two moves, possibly resulting in the origi- 
nal order. 
(4) Traverse the list front to back, determining a new product order as each 
new product is encountered. The filesets within each product are also 
ordered by traversing front to back. 
240 
B Rationale and Notes 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
(5) Using this product order, place all product catalog files on the serial 
media; then place all kernel filesets from each product on the serial 
media (including the prerequisites of kernel filesets); then place all non- 
kernel filesets from each product on the media. 
When installing filesets, use this same order to load kernel filesets before non- 
kernel filesets, and to load prerequisites before their dependents. 
Additional files besides just those for the distribution may be needed on distribu- 
tions. For example, a software vendor may want to include a copy of the swinstall 
utility on the media. 
B.5 Software Packaging Layout 


ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Annex C 
(informative) 
Sample Files 
C.l Defaults File 
The following is an example defaults file: 
# File: 
/var/adm/sw/def 
aults 
# Description: This file contains example system defaults 
swinstall.allow-downdate 
= false 
swinstall.allow~incompatible 
= false 
swinstall.ask 
= false 
swinstall.autoreboot 
= false 
swinstall.autoselect~dependencies 
= true 
swinstall.defer-configure 
= false 
swinstall.distribution~source~directory 
= /var/spool/sw 
= true 
= true 
= true 
= true 
= /var/adm/sw/catalog 
= /var/adm/sw/swinstall . log 
= 1 
= false 
= true 
- 
- 
= true 
= /var/spool Isw 
= /var/spool/sw 
= true 
= true 
= /var/adm/sw/swcopy . log 
= 1 
= false 
= true 
- 
- 
= false 
swremove.distribution~target_directory = /var/spool/sw 
swremove.enforce~dependencies 
= true 
C.l Defaults File 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
= true 
= /var/adm/sw/catalog 
= /var/adm/sw/swremove.log 
= 1 
= true 
- - 
= false 
= false 
= false 
= true 
= false 
= true 
= /var/adm/sw/catalog 
= /var/adm/sw/swconf 
ig . log 
= 1 
= false 
= true 
- - 
= true 
= /var/spool/sw 
= /dev/rmt /dat 
= /var/adm/sw/swask . log 
= 1 
- - 
swmodify-distribution-target-directory = /var/spool/sw 
smodify.installed~softwareWcatalog = /var/adm/sw/catalog 
swmodify.files 
- 
swmodify.logfile 
= /var/adm/sw/swmodify . log 
swmodify.logleve1 
= 1 
swmodify.select~loca1 
= true 
swmodify.software 
- 
- 
swmodify.targets 
- - 
swmodify.verbose 
= 1 
swverify.allow-incompatible 
= false 
swverify.autoselect_dependependencies = true 
swverify.check-contents 
= true 
swverify.checkqermissions 
= true 
swverify.check-requisites 
= true 
swverify.check-scripts 
= true 
swverify.check-volatile 
= false 
swverify.distribution-target-directory = /var/spool/sw 
swverify-enforce-dependencies 
= true 
swverify.enforce-locatable 
= true 
swverify.installed~software_catalog = /var/adm/sw/catalog 
swverify.logfile 
= /var/adm/sw/swveri 
f y. log 
swverify.logleve1 
= 1 
C Sample Files 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (El 
IEEE Std 1387.2-1995 
= true 
- 
- 
- - 
= 1 
swlist.distribution~target~directory = /var/spool/sw 
swlist.installed~software_catalog 
= /var/adm/sw/catalog 
swlist.one-liner 
= revision title 
swlist.select~local 
= true 
swlist.software 
- 
- 
swlist.targets 
- 
- 
swpackage.distribution-target-directory 
swpackage.distribution-target-serial = 
swpackage-enforce-dsa 
- 
- 
swpackage.follow-symlinks 
- 
- 
swpackage.logfile 
- 
- 
swpackage.logleve1 
- 
- 
swpackage.media-capacity 
- 
- 
swpackage.media-type 
- 
- 
swpackage.psf-source-file 
- - 
swpackage-software 
- 
- 
swpackage-verbose 
- - 
C.2 Product Specification File 
The following is an example product specification file: 
= /var/spool /sw 
/dev/rmt/dat 
true 
false 
/var/adm/sw/swpackage . log 
1 
1330 
directory 
psf 
# File: 
psf .posix 
# Description: This illustrates the structure of a typical application 
# 
software product. 
distribution 
# Vendor definition 
vendor 
tag 
FineSof t 
title 
Fine Software Corporation 
description "Fine Software Corporation 
1233 Technology Way 
Sunset Bay, Ca, 90456 
1-800-555-1231" 
# Bundle definition: 
bundle 
tag 
title 
revision 
vendor-tag 
contents 
contents 
POSIX-SM 
POSIX 1387 System Management 
1.0 
FineSof t 
POSIX-Printer,r=4.0 POSIX-Software,r=2.0 
POSIX-User,r=l.O 
# Product definition: 
product 
tag 
title 
revision 
vendor-tag 
POSIX-Software 
POSIX 1387.2 Software Administration Utilities 
2.0 
FineSof t 
C.2 Product Specification File 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSM SYSTEM ADMINISTRATION - 
number 
description 
copyright 
machine-type 
o s-name 
0s-release 
0s-version 
directory 
J2326AA 
< /build/data/description 
< /build/data/copyright 
9OOO/ [78] * 
HP-UX 
?.09.* 
? 
/ 
# Subproduct definitions: 
subproduct 
tag 
Manager 
title 
management utilities 
contents 
commands agent man 
subproduct 
tag 
Agent 
title 
target daemon and agent 
contents 
agent man 
# Fileset definitions: 
f ileset 
tag 
commands 
title 
Commands (management utilities) 
configure 
scripts/configure.data 
prerequisite POSIX-Software.agent 
directory 
file 
file 
file 
file 
file 
file 
file 
f ileset 
tag 
title 
configure 
unconfigure 
file 
file 
f ileset 
tag 
title 
directory 
file 
file 
file 
file 
file 
file 
file 
/build/usr/sbin /usr/sbin/ 
swinstall 
swconf ig 
swcopy 
swlist 
swremove 
swveri f y 
swpackage 
agent 
Agent (target agent) 
/build/system/SD-AGENT/customize 
/build/system/SD-AGENT/decustomize 
/build/usr/sbin/swagentd /usr/sbin/swagentd 
/build/usr/lbin/swagent /usr/lbin/swagent 
man 
Manual (man pages) 
/build/usr/man/man8 /usr/man/man8 
swinstall.8 
swcopy .8 
swremove.8 
swlist - 8  
swverif y. 8 
swconfig.8 
swpackage.8 
C Sample Files 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
file 
swagent .8 
file 
swagentd.8 
directory 
/build/usr/man/man4 /usr/man/man4 
file 
swpackage.4 
C.3 Software Packaging Layout 
The following is an example software packaging layout created from the PSF in 
C.2, for a distribution located at /var /spool /sw/: 
catalog 
catalog/INDEX 
catalog/dfiles 
catalog/dfiles/INDEX 
catalog/dfiles/INFO 
catalog/POSIX-Software 
catalog/POSIX-Software/pfiles 
catalog/POSIX-Software/pfiles/INFO 
catalog/POSIX-Software/agent 
catalog/POSIX-Software/agent/INFO 
catalog/POSIX-Software/agent/configure 
catalog/POSIX-Software/agent/unconfigure 
catalog/POSIX-Software/commands 
catalog/POSIX-Software/commands/INFO 
catalog/POSIX-Software/commands/configure 
catalog/POSIX-Software/man 
catalog/POSIX-Software/man/INFO 
POSIX-Software 
POSIX-Software/agent 
POSIX-Software/agent/usr 
POSIX-~oftware/agent/usr/lbin 
POSIX-Software/agent/usr/lbin/swagent 
POSIX-Software/agent/usr/sbin 
POSIX-Software/agent/usr/sbin/swagentd 
POSIX-Software/commands 
POSIX-Software/commands/usr 
POSIX-Software/commands/usr/sbin 
POSIX-Software/commands/usr/sbin/swinstall 
POSIX-~oftware/commands/usr/sbin/swpackage 
POSIX-Software/man 
POSIX-Software/man/usr 
POSIX-Software/man/usr/man 
POSIX-Software/man/usr/man/man4 
POSIX-Software/man/usr/man/man4/swpackage.4 
POSIX-Software/man/usr/man/man8 
POSIX-Software/man/usr/man/man8/swagent.8 
POSIX-Software/man/usr/man/man8/swagentd.8 
POSIX-Software/man/usr/man/man8/swconfig.8 
POSIX-Software/man/usr/man/man8/swcopy.8 
POSIX-Software/man/usr/man/man8/swinstall.8 
POSIX-Software/man/usr/man/man8/swlist.8 
POSIX-Software/man/usr/rnan/man8/swpackage.8 
POSIX-Software/man/usr/man/man8/swremove.8 
POSIX-Software/man/usr/man/man8/swverify.8 
C.3 Software Packaging Layout 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
C.4 INDEX File 
The following is an example INDEX file for the software packaging layout in C.3: 
distribution 
layout-version 1.0 
uuid 944B41Z-XI35 
media 
sequence-number 1 
vendor 
tag FineSoft 
title Fine Software Corporation 
description "Fine Software Corporation 
1233 Technology Way 
Sunset Bay, Ca, 90456 
1-800-555-1231" 
bundle 
tag POSIX-SM 
title POSIX 1387 System Management 
revision 1.0 
vendor-tag FineSoft 
contents POSIX-Printer,r=4.0 POSIX-Software,r=2.0 POSIX-User,r=l.O 
product 
tag POSIX-Software 
instance-id 1 
control-directory POSIX-Software 
revision 2.0 
vendor-tag FineSoft 
title POSIX 1387.2 Software Administration Utilities 
description "The objective of this standard is to address this problem 
for software administration, a specific area of system administration, 
and to contribute to the overall solution of administering computing 
environments, both stand-alone and distributed. 
In pursuit of this goal, this standard defines a set of utilities, a 
set of objects acted upon by those utilities, a set of information 
maintained about installed software, and the layout on a physical 
medium of software awaiting installation. 
These definitions provide the flexibility necessary for system 
administrators to enforce policies suitable to their environments." 
directory / 
machine-type 9000/[78] 
0s-name HP-UX 
0s-release ?.09. 
0s-version ? 
all-filesets agent commands man 
number J2326AA 
copyright <copyright 
subproduct 
tag Agent 
title target daemon and agent 
contents agent man 
subproduct 
tag Manager 
title management utilities 
contents commands agent man 
f ileset 
C Sample Files 

PART 2: SOFTWARE ADMINISTRATION 
ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
286 
tag agent 
287 
control-directory agent 
288 
size 5333089 
289 
title Agent (target agent) 
290 
state available 
291 
fileset 
292 
tag commands 
293 
control-directory commands 
294 
size 8531074 
295 
title Commands (management utilities) 
296 
state available 
297 
prerequisite POSIX-Software.agent 
298 
fileset 
299 
tag man 
300 
control-directory man 
301 
size 162749 
302 
title Manual (man pages) 
303 
state available 
C.5 INFO File 
The following is an example INFO file for the software packaging layout in C.3 and 
the INDEX file in C.4: 
control-file 
path INFO 
size 638 
tag INFO 
control-file 
path configure 
size 3023 
tag configure 
control-file 
path unconfigure 
size 375 
tag unconfigure 
file 
path /usr/lbin/swagent 
type f 
size 2973696 
cksum 3139283961 
mode 0555 
uid 0 
gid 3 
owner root 
group sys 
mtime 739080771 
file 
path /usr/sbin/swagentd 
type f 
size 2355200 
cksum 1313249400 
mode 0555 
uid 0 
gid 3 
C.5 INFO File 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
336 
owner root 
337 
group sys 
338 
mtime 739081332 
C.6 Control Script 
The following is an example control script for the software packaging layout in C.3 
the INDEX file in C.4 and the INFO file in C.5: 
# 
# agent configure script 
# 
PATH=$SW-PATH 
R ~ ~ T = $ ~ ~ ~ R ~ ~ T ~ D I R E C T ~ R Y  
B A ~ E ~ D I R = $ R ~ ~ T / $ ~ ~ ~ L ~ C A T I O N  
MY-CATALOG=$SW-ID 
MY~CONTROL~DIR=$SW~CONTROL~DIRECTORY 
MY-SCRIPT=$SW-CONTROL-TAG 
OPTIONS=$SW~SESSIONoPTIoNs=SsW_sEssIoN_oPTIONSOPTIONS 
# Make sure /var/adm/sw/ exists 
if [ ! -d $BASE-DIR/var/ach/sw ] 
then 
mkdir -p $BASE-DIR/var/adm/sw 
chmod 555 $BASE-DIR/var/adm/sw 
f i 
# Make sure we are running on " / "  (swconfig should enforce this) 
if [ $ROOT != " / "  I 
then 
# Exit error 
echo "ERROR: Trying to run $MY-SCRIPT when root is not /." 
exit 1 
f i 
# Kill and restart the daemon 
daemongrocess="'ps -e I grep swagentd I grep -v grep ( awk '{print $1)"" 
if [ "${daemongrocess)" != * "  1 
then 
kill $daemongrocess 
if [ $? ! =  0 1 
then 
# Exit warning 
echo "WARNING: Can not kill and restart the daemon." 
exit 2 
f i 
f i 
/usr/sbin/swagentd 
# Exit success 
exit 0 
C Sample Files 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Annex D 
(informative) 
Portability Considerations 
This annex contains information to satisfy the recommendations of the TSG-1 
Final Report {B17} in Annex A. The first clause describes perceived user require- 
ments and the second indicates how the facilities of this part of ISOIIEC 15068 
satisfy those requirements. The third clause offers guidance to writers of profiles 
on how the configurable options, limits, and optional behavior of this part of 
ISOAEC 15068 should be cited in profiles. 
D.l User Requirements 
This clause describes the user requirements that were perceived by the developers 
of this part of ISOlIEC 15068. The primary source for these requirements was an 
analysis of historical practice in widespread use, as typified by the base documents 
listed in the introduction to this part of ISO/IEC 15068. 
The universe of users applicable to ISOIIEC 15068-2 is a superset of those 
addressed by POSIX.1{2] and POSM.2 (3) - users requiring open systems solu- 
tions for managing software, involving such tasks installation, updating, 
verification, and removal of that software; management of software on their own 
system, as well as other systems in a network of such systems; and packaging of 
software and the distribution of that software to other systems. While existing 
practice permits these activities, the means of doing so has varied widely among 
suppliers of open systems. 
The following subclauses list the perceived requirements 
users. 
D.l.l Packaging Layout 
for this universe of 
The packaging format in use in existing practice varies wic 
There should be just one. 
dely between systems. 
D.1.2 Media Format 
Many different media format are in use in existing practice. The acceptable for- 
mats should be specified, and should include both serial archives and file system 
forms. 
D.l User Requirements 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
D.1.3 Distributed Administration 
Consistent administration on a single system is essential. All the developers of 
this part of ISOIIEC 15068, users and producers alike, felt that administration of 
software on other machines is also required. Ideally, all the utilities may be 
invoked from any machine in a network and may perform their designated tasks 
on any machine in that network, crossing hardware and operating system boun- 
daries. 
D.1.4 Multiple Version Control 
The requirement for control of multiple versions manifests itself in several ways. 
Administrators specifically asked that there be multiple catalogs of installed 
software. This permits administrators to support both released software, software 
under test, and software under development with the same set of utilities, making 
the catalogs available only to the relevant users. This also permits individual 
users to install and manage software in their own area of the file system by having 
their own private catalog. 
There is also a clear requirement to handle multiple versions of the same software 
within both single distributions and installed-software objects, including multiple 
versions of a product with each instance having a different release or version 
number, and multiple versions of a product with each instance being for a 
different operating system, language, hardware platform, etc. 
D.1.5 Storage Technology Independence for Installed Software Catalogs 
Those suppliers of systems who have provided a catalog of installed software have 
done so in different forms. Some have stored data in common text files, while oth- 
ers have stored data in data bases or other highly structured files. The typical, 
and conflicting concerns voiced include ease of use, performance, security, and 
data integrity. The requirement is to permit suppliers freedom to choose the form 
most appropriate for their system. 
D.1.6 Functional Sufficiency 
There are a large set of requirements needed to match existing practice in the 
area of install and related tasks. This set of requirements is too lengthy and too 
complex to list here. Such requirements, while complex and intertwined, still 
form the basis for this part of ISO/IEC 15068. Several of these issues are discussed 
in B.4 and B.4.5, including information on various existing practices. 
D.1.7 Policy Neutrality 
Many utility options imply administrative policy. For each and every such option 
with default behavior specified, there should be a choice available to override that 
behavior. 
D Portability Considerations 

PART 2: SOFTWARE ADMINISTRATION 
ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
D.2 Portability Capabilities 
This clause describes the significant portability capabilities of this part of ISO/IEC 
15068 and indicates how the user requirements listed in D.l are addressed. The 
capabilities are listed in the same format as the preceding user requirements; 
they are summarized in Table D-1. 
Table D-1 - 1387.2 Portability Capability Summary 
Packaging Layout 
Media Format 
Distributed Administration 
Multiple Version Control 
Storage Technology Independence for Installed Software Catalogs 
Catalog Data Storage Technology Independence 
Functional Sufficiency 
Policy Neutrality 
D.2.1 Packaging Layout 
This part of ISOAEC 15068 specifies a single packaging layout. None. 
D.2.2 Media Format 
This part of ISOAEC 15068 specifies the acceptable media formats. None. 
D.2.3 Distributed Administration 
All of the utilities, except swpackage, require distributed administration func- 
tion. This is accomplished by having a series of targets for each utility, where 
each target may be the system on which the utility is run or another open system. 
The swpackage utility need only support a single local target, as swcopy may be 
used to further distribute any newly packaged software. While the requirement 
for distributed function is stated, there is no wire protocol dictated. This was 
deemed to be a challenge beyond the current scope of POSM, as demonstrated by 
other POSM projects. - 
D.2.4 Multiple Version Control 
The utilities defined by this part of ISOAEC 15068 that operate on installed 
software 
meet 
the 
multiple 
catalog 
requirement 
using 
the 
installed-software-catalog extended option. The utilities defined by this part of 
ISOIIEC 15068 meet the requirement for multiple instances of a product using the 
version distinguishing attributes. No mechanism is provided for the registration, 
listing, or management of multiple catalogs. Such function is undefined within 
this part of ISO/IEC 15068. 
D.2 Portability Capabilities 

ISOlIEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
INFORMATION TECHNOLOGY-POSIX SYSTEM ADMINISTRATION - 
D.2.5 Storage Technology Independence for Installed Software Catalogs 
This part of ISOIIEC 15068 defines only the form of the catalog data when made 
visible with the s w l i s  t utility. None. 
D.2.6 Functional Sufficiency 
This part of ISOIIEC 15068 includes all of the common software administration 
tasks for which industry consensus could be achieved within the scope and time 
frame of the project. There are a few topics, several of which are listed in 1.1, 
which have not been addressed and are currently beyond the scope of this part of 
ISOIIEC 15068. That is to say that there were neither sufficient time and nor peo- 
ple resources available to support work on these topics. A future revision to this 
part of ISO/IEC 15068 may well incorporate work on such topics. The developers 
of this part of ISO/IEC 15068 have taken careful steps to not preclude conformance 
for implementations that have defined solutions for these topics. 
D.2.7 Policy Neutrality 
Each of the utilities in this part of ISOIIEC 15068 meets this requirement. None. 
D.3 Profiling Considerations 
This clause offers guidance to writers of profiles on how the configurable options, 
limits, and optional behavior of this part of ISOIIEC 15068 should be cited in 
profiles. Profile writers should consult the general guidance in IEEE P1003.0 
(POSIX.0) (B20) when writing POSM Standardized Profiles. 
The information in this clause is an inclusive list of features that should be con- 
sidered by profile writers. Further subsetting of this part of ISO/IEC 15068, 
including the specification of behavior currently described as unspecified, 
undefined, implementation-defined, or with the verbs "may" or "need not" violates 
the intent of the developers of this part of ISOAEC 15068 and the guidelines of 
ISOIIEC TR 10000-1 (B16). 
D.3.1 Configuration Options 
There are no configuration options defined by part of ISOIIEC 15068. 
D.3.2 Configurable Limits 
There are no configurable limits defined by part of ISO/IEC 15068. 
D Portability Considerations 

PART 2: SOFTWARE ADMINISTRATION 
D.3.3 Optional Behavior 
ISOAEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
In this part of ISOAEC 15068, there are no instances of the terms unspecified, 
undefined, or implementation-defined or the verbs "may" or "need not" that the 
developers of this part of ISOAEC 15068 anticipate or sanction as suitable for 
profile or test method citation. All these are merely warnings to portable applica- 
tions and distributions to avoid certain areas that can vary from system to system, 
and even over time on the same system. In many cases, these terms are used 
explicitly to allow for extensions, but profiles should not anticipate and require 
such extensions; future versions of this part of ISOAEC 15068 may do so. 
D.3 Profiling Considerations 


ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Alphabetic Topical Index 
1387.2 
Portability 
Capability 
Summary 
. . . 253 
/ ... 14, 36, 52, 59-60, 63, 72, 108, 112, 128, 
192, 203-204, 206, 219,238 
Abbreviations . . . 25 
absolute path 
defmition of . . . 14 
Access and Concurrency Control . . . 70,201 
AM . . . 192 
all-filesets 
- see attributes 
allow-downdate 
- see extended options 
allow-incompatible 
- see extended options 
allow-multiple-versions 
- 
see extended options 
alternate root . . . 14,21, 39,52,59, 108, 183, 
192-193, 203-204, 219, 221 
alternate root - 
see proxy install 
alternate root directory . . . 21,39, 52, 59, 
108, 183, 192, 203-204, 219, 221 
defmition of . . . 14 
analysis phase 
definition of . . . 14 
Analysis Phase . . . 86, 95, 100, 106, 121, 124, 
127,133,208 
Analysis Phase Events . . . 78 
ANDF . . . 187 
ANSIIIEEE . . . 3,26 
API 
abbreviation . . . 25 
definition of . . . 25 
application 
definition of . . . 12 
appropriate privilege . . . 82 
architecture 
- see attributes 
archive-files 
- see extended options 
archive-offset 
- 
see attributes 
archive-source 
- see attributes 
archive-type 
- see attributes 
- see extended options 
ARPA ... 162 
ask - see extended options 
ask - see control-files 
attribute 
definition of . . . 14 
attribute 
vendor-defined . . . 147 
Attributes of the Bundle Class . . . 40 
Attributes of the Control File Class . . . 49 
Attributes of the Distribution Class . . . 32 
Attributes of the File Class . . . 47 
Attributes of the Fileset Class . . . 42 
Attributes of the Installed Software Class 
... 34 
Attributes of the Media Class . . . 33 
Attributes of the Product Class . . . 37 
Attributes of the Software-Collection Common 
Class . . . 31 
Attributes of the Software Common Class 
... 35 
Attributes of the Software-Files Common 
Class . . . 45 
Attributes of the Subproduct Class . . . 44 
Attributes of the Vendor Class . . . 34 
attributes 
names as keywords . . . 29 
of bundle . . . 40 
of control file . . . 49 
of distribution . . . 32 
of file . . . 47 
of fileset . . . 42 
of installed software . . . 34 
of media . . . 33 
of product . . . 37 
of software . . . 35 
of software collection . . . 31 
of software file . . . 45 
of subproduct . . . 44 
of vendor . . . 34 
semantics of . . . 146 
unarne . . . 58,133,184 
version distinguishing . . . 32-33, 36,39, 
104, 115,181,223,253 
attributes 
allfilesets . . . 36,43-44, 150 
architecture . . . 25, 32,36-37, 39-40, 56, 
104, 138, 178-179, 181 
archivepffset . . . 186 
archive-source . . . 186 
archiue-type . . . 186 
bundles ... 31 
Alphabetic Topical Index 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
bundles . . . 148 
catalog . . . 33-34, 72, 148, 175, 198 
cksum . . . 45, 47, 62, 110, 134, 151-152 
class . . . 185 
compressed~cksum . . . 45,134, 151-152 
compressed-size . . . 45, 134, 151-152, 186 
compression-state . . . 46,63,67, 101-102, 
111, 151-152 
compression-type . . . 46,67, 101, 111, 
151-152, 185 
configured-instances . . . 214 
contents . . . 40-41,45, 146, 149-150, 184- 
185, 194 
control-directory .. . 37, 43, 141, 149, 151 
controlfiles . . . 37, 43, 87, 150-151 
copyright . . . 37,40, 152, 178, 180,237 
corequisites . . . 43, 62 
createdate . . . 71 
create-time . . . 35, 115, 149-151, 178 
date ... 110 
description . . . 35, 178, 180 
dfiles . . . 31, 139 
directory . . . 36-38,40,42-43, 103, 108- 
109, 182-183, 195 
distributions . . . 174 
exrequisites . . . 43, 62 
FAT-Hidden . . . 187 
FAT-Readonly . . . 187 
files . . . 43, 151 
filesets . . . 36, 38, 121, 124-125, 150 
gid . . . 47, 62, 109, 152, 156-157, 188 
group .. . 46-47, 62, 110, 134-135, 152, 
156-157, 188 
host . . . 174 
installed-software 
. . . 175 
instance-id . . . 38-40, 120, 141, 149-150, 
181,194,236 
interpreter . . . 48, 71, 188 
is-exclusive . . . 187 
is-kernel ... 20,43, 111, 130,219,236 
islocatable . . . 20,37-38, 41,43, 109, 
118, 121, 124-125, 236 
is-reboot . .. 21,43, 108, 112,219, 236 
is-volatile . . . 47,63, 134, 152, 188 
layout-version . . . 31,38, 41, 146-148, 
177, 183-184, 236 
link-source . . . 46-47, 152, 156 
location . . . 25, 33,36, 38-39, 41,43, 56- 
57, 72, 103, 108-109, 120, 149-151, 183, 
194-195, 203 
machine-type .. . 38, 41,58, 175 
major . . . 47,62, 134-135, 152, 187, 237 
media . . . 32, 147 
media-sequence-number . . . 43, 151, 
158-159, 178, 185, 240 
media-type . . . 178 
minor . . . 47,62, 134-135, 152, 187, 237 
mod-date . . . 71 
mo& . . . 46,48,62, 110, 134-135, 152, 
188 
modtime . . . 35, 115, 149-151 
mtime . . . 48,62, 134, 152, 188 
number . . . 38,41, 178 
0s-name ... 38,41,58,176 
0s-release . . . 38,41,58, 176 
0s-version . . . 38,41, 58, 177 
owner . . . 46,48,62, 109, 134-135, 152, 
156,188 
path . . . 19, 31-34, 42-43, 46, 48-49, 59, 
65-66, 72, 90, 108-110, 140, 147-148, 
151-155, 174-175, 223-224 
pfiles . . . 31, 139 
postkernel . . . 39, 111-112, 183,219-221 
prerequisites . . . 44, 62, 146 
products . . . 31, 147-148 
qualifier . . . 25, 33,36, 39,41, 56-57, 
149-150 
result . . . 49, 151, 223 
revision . . . 25,32, 36, 39,41,44,46, 56- 
57, 104-105, 134, 138, 152, 178-181, 
194,224 
sequence-number . . . 32-33, 42-43, 86, 
147,159 
size . . . 36, 45-46, 62, 110, 134, 149-152, 
180,186 
source . . . 46, 151-153 
state . . . 44, 61, 88, 113, 151, 208, 214 
state-info . . . 208 
subproducts . . . 39, 150 
tag . . . 25, 30, 3439, 42-45, 48-49, 56-58, 
66, 72, 74, 115, 124, 138, 140-141, 146, 
148-151, 153, 174, 178-181, 185, 188, 
194-195, 203, 223-224, 235-236 
title . . . 35-36, 178, 180, 224 
type ... 48, 109, 140, 152, 186 
uid . . . 48,62, 152, 156, 188 
user . . . 110 
uuid . . . 32, 147, 159 
vendor-tag . . . 25, 32,34, 36-37, 39, 42, 
56, 104, 138,179,181,184, 196 
autoreboot 
- see extended options 
autorecover 
- 
see extended options 
autorecovely 
definition of . . . 15 
autoselect 
definition of . . . 15 
autoselect-dependencies 
- see extended options 
autoselect-dependents 
- see extended options 
available 
- 
see states 
Alphabetic Topical Index 

ISODEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
check-requisites 
- 
see extended options 
Bibliography . . . 161 
BSD . . . 193 
bundle 
- 
see attributes 
- 
see keywords 
definition of . . . 15 
Bundle Attributes . . . 40 
Bundle Definition . . . 148 
bundles 
- see attributes 
Bundles . . . 39, 183 
can 
definition of . . . 12 
catalog . . . 15-21, 23, 25, 30-31, 33-35, 37-38, 
41, 43,49, 51-52, 54,56, 59,65,70,72, 74, 
86-90, 92-94, 101-104, 107-108, 112-121, 
126, 128-133, 137-140, 148, 159, 174-175, 
179, 181, 188, 193, 197-198, 201, 203, 211, 
214, 222, 224-226, 232, 234-237, 241, 
252-254 
- see attributes 
definition of . . . 15 
catalog/df iles/ . . . 139 
catalog/df i l e s / I N D E X  . . . 235 
catalog/INDEX . . . 139,159 
catalog/ ~product~control~directory>// 
. . . 139 
catalog /<product-control- - 
directory>/<fileset-control-directory> 
. . . 140 
catalog/<product-control-- 
directory> / <fileset-control- - 
directory>/ INDEX . . . 235 
catalog/ <product-control- - 
directory>/p f iles/ . . . 139 
catalog/<product-control- - 
directory>/p f iles/ INDEX . . . 235 
CD-ROM . . . 17,137,178,229 
check-contents 
- 
see extended options 
checkinstall 
- see keywords 
checkinstall 
- see control-files 
checkinstall . . . 139-140 
check-permissions 
- see extended options 
checkremove 
- see control-files 
check-scripts 
- 
see extended options 
check-volatile 
- see extended options 
chroot0 . . . 193 
cksum 
- 
see attributes 
cksum . . . 45,187 
class - see attributes 
definition of . . . 15 
CLI . . . 26, 169 
abbreviation . . . 26 
definition of . . . 26 
client role 
definition of . . . 15 
command line interface 
definition of . . . 15 
command-line-options 
definition . . . 200 
common class 
definition of . . . 15 
Common Definitions for Utilities . . . 51, 192 
Comparison of Existing Practice for Software 
Packaging . . . 228 
Comparison of Some Existing Practices 
. . . 192 
compressed~cksum 
- 
see attributes 
compressed file 
definition of . . . 15 
compressed-size 
- 
see attributes 
compress-files 
- see extended options 
compression . . . 15, 45-46, 63, 67, 74, 98-99, 
101-102, 111, 134, 151-152, 157, 165, 167, 
185-187 
Compression ... 101,111 
compression-state 
- 
see attributes 
compression-type 
- 
see attributes 
- 
see extended options 
Configurable Limits . . . 254 
Configuration Options . . . 254 
configure 
- 
see control-files 
configured 
- see states 
configured-instances 
- 
see attributes 
Alphabetic Topical Index 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
conformance .. . 3-7, 13-14, 162,166-167, 
254 
Conformance . . . 3, 166 
conformance document 
definition of . . . 13 
conforming implementation . . . 3-4 
Conforming Implementation Options . . . 5 
Conforming POSM.7.2 Distribution . . . 6,49, 
167 
Conforming POSIX.7.2 Distribution Using 
Extensions . . . 7, 167 
Conforming POSM.7.2 Distribution with 
Extensions . . . 49 
Conforming POSM.7.2 Implementation . . . 3 
confstr () . . . 72 
containment 
definition of . . . 15 
contents 
- 
see attributes 
control directory 
definition of . . . 16 
control-directory 
- 
see attributes 
Control Directory Names . . . 140 
control-file 
- 
see attributes 
- 
see keywords 
Control-File Attributes . . . 48 
Control-File Definition . . . 151 
control-files 
ask . .. 213 
c h e c k i n s t a l l  . . . 49, 73-74, 106-107, 
165, 183, 198, 204-205 
checkremove . . . 49, 73-74, 127-128, 
204,206 
con£ i g u r e  . . . 49, 73-74, 93, 96-97, 108, 
152, 156, 165, 189, 198, 203-206, 210, 
213-214, 227,234,237,239 
control-£ i l e s  . . . 72 
f i x  . . . 49, 63, 74, 134-135, 187,206, 
233-234 
i n s t a l l  ... 203 
p o s t i n s t a l l  . . . 49,61, 74, 107-108, 
111-114, 165, 183, 187, 203, 205-206, 
214,219,234 
postkernel .. . 74 
postremove . . . 49,74, 128-130, 203, 
206 
p r e i n s t a l l  . . . 49, 61, 74, 107-109, 
112-113, 165, 183,203,205-206, 214, 
219,234 
preremove .. . 49,74,128-129,203,206 
remove . . . 203 
request . . . 49, 53,60-61, 72-74, 90-95, 
97, 103, 106, 204-205, 209-211, 213 
response . . . 49, 61,90,92,94, 97, 103, 
173, 198, 204-205, 210-211, 213 
space . . . 49, 107, 137, 142, 158, 173, 
187,218,239 
unconf i g u r e  . . . 49, 73-74, 93, 96-97, 
128, 189, 204,206, 213-214, 232 
u n p o s t i n s t a l l  ... 49,61, 74,113-114, 
183,203,205 
u n p r e i n s t a l l  . .. 49,61,74, 113, 183, 
203,205 
v e r i f y  . .. 49, 63,74, 134, 181, 204-206, 
233-234 
Control Files . . . 188 
control-files 
- see attributes 
- see control-files 
Control-Files . . . 48 
control-files 
definition of . . . 16 
control script 
definition of . . . 16 
example . . . 250 
Control Script . . . 250 
Control Script Behavior . . . 204 
Control Script Execution and Environment 
. . . 71, 202 
Control Script Return Code . . . 73, 207 
Control Script SMout and Stderr . . . 73 
Conventions . . . 9,167 
Copying Into Existing Products . . . 102 
copyright 
- 
see attributes 
corequisite . . . 16, 36, 42-43, 61-62, 99, 150, 
185, 187 
definition of . . . 16 
corequisites 
- 
see attributes 
corrupt 
- 
see states 
cpio . . . 22, 27, 59, 100, 124, 137-138, 158, 
160,187,227,229 
CRC . . . 26,45 
abbreviation . . . 26 
definition of . . . 26 
create-date 
- 
see attributes 
create-time 
- 
see attributes 
C Standard . . . 3,26 
definition of . . . 26 
Data Interchange Format . . . 27 
date - 
see attributes 
Alphabetic Topical Index 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
date ... 115 
decimal character string 
definition of . . . 16 
Default Levels . . . 116 
default option 
definition of . . . 16 
Default Permission Definition . . . 157 
Defaults and Options Files . . . 60, 197 
defaults file . . . 16,21 
definition of . . . 16 
example . . . 243 
Defaults File . . . 243 
defer-configure 
- 
see extended options 
Definitions . . . 12, 168 
Dependencies on Other Standards . . . 27 
dependency 
definition of . . . 16 
dependency-spec . . . 16,42-44, 54-55, 74, 
187 
definition of . . . 16, 55 
dependent 
definition of . . . 16 
description 
- 
see attributes 
developer role 
definition of . . . 16 
devices . . . 237 
devmajor . . . 47 
devminor . . . 47 
dfiles - 
see attributes 
directory 
- see attributes 
- see keywords 
Directory Mapping . . . 154 
directory medium 
definition of . . . 17 
Directory Structure . . . 137,235 
Distributed Administration . . . 252-253 
distributed interoperability . . . 165 
distribution 
- see attributes 
- see keywords 
bootable . . . 167 
compressed . . . 167 
definition of . . . 17 
Distribution . . . 32, 177 
Distribution Attributes . . . 32 
distribution catalog 
definition of . . . 17 
Distribution Conformance . . . 6, 167 
Distribution Definition . . . 147 
Distribution Files . . . 139 
distribution path 
definition of . . . 17 
distributions 
- see attributes 
distribution-source-directory 
- see extended options 
distribution~source~serial 
- see extended options 
distribution-target-directory 
- 
see extended options 
distribution-target-serial 
- see extended options 
DMTF . . . 161, 180-181 
document .. . 2-7, 11, 13-14, 161-163, 165- 
167,202,219,251 
conformance . . . 13 
documentation 
system . . . 14 
Documentation . . . 4,7, 167 
DOS . . . 165, 167, 187-188 
downdate 
definition of . . . 17 
Editorial Conventions . . . 9, 167 
encoding . . . 16-21, 25 
enforce-dependencies 
- see extended options 
enforce-dsa 
- see extended options 
enforce-locatable 
- 
see extended options 
enforce-scripts 
- see extended options 
Error Conditions . . . 90 
[ETXTBSYI . .. 129 
event 
definition of . . . 17 
Event Status .. . 74 
Example of Software Packaging Layout 
. . . 138 
Example of SoRware Structure . . . 172 
Examples . . . 214-215, 221, 224, 226, 229, 
232,234 
exclude 
- see keywords 
Excluding Files . . . 157 
Executing con£ i g u r e  Scripts . . . 97 
Alphabetic Topical Index 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Executing fix Scripts . . . 134 
Executing postremove Scripts . . . 130 
Executing preremove Scripts . . . 129 
execution phase 
definition of . . . 17 
Execution Phase . . . 87,92,96,100, 107, 
117, 121, 124,128, 134,208 
Execution Phase Events . . . 83 
existing practice . . . 191-192, 216-217, 
227-228 
Explicit File Definition . . . 155 
exported catalog . . . 30 
definition of . . . 17 
Exported Catalog Structure . . . 139 
exrequisite . . . 16, 18, 36, 42-43, 62, 74, 99, 
105,150 
definition of . . . 18 
exrequisites 
- 
see attributes 
Extended Control-File Definitions . . . 153 
Extended File Definitions . . . 154 
extended option . . . 16 
debition of . . . 18 
Extended Options . . . 60, 91,94, 98, 103, 
117,119,122,126, 132,197 
extended options 
. . . 65, 67, 91, 95, 99, 104, 117, 119, 123, 
126,132 
allow-downdate . . . 60,74, 103, 106 
allow-incompatible . . . 60,69, 74,94-95, 
104-105, 108, 132-133, 218 
allow~multiple~versions . . . 60, 74, 94, 96 
archivefiles . . . 186 
archive-type . . . 186 
ask . . . 60-61, 91-92, 94-95, 103-104, 106, 
198,211,213 
autoreboot . . . 61, 104, 112 
autorecover . . . 61, 104, 107, 111, 113, 
218 
autoselect-dependencies . . . 61, 91-92, 
94-95, 98-99, 104-105, 132-133, 198 
autoselect-dependents . . . 62,94-95, 126- 
127,230 
check-contents . . . 62, 132 
checkgermissions . . . 62, 131-132 
check-requisites . . . 62, 132 
check-scripts . . . 63, 131-132 
check-volatile . . . 63, 132, 134-135 
compressfiles . . . 63, 67, 98, 101-102, 186 
compression-type . . . 63, 98, 101-102, 186 
defer-configure . . . 63, 104, 108 
distribution~source~directory . . . 59, 64, 
91,98, 104, 197 
distribution-source-serial 
. . . 91 
distribution-target-directory 
. . . 59, 64, 
66,98,117,119,122,126,132,197 
distribution-target-serial 
. . . 64, 66, 122 
enforce-dependencies . . . 62, 64, 74, 94, 
96, 98, 100, 104, 107, 113, 126, 128, 
132,134 
enforce-dsa . . . 64-65, 74, 98, 100, 104, 
107,122, 124 
enforcelocatable . . . 65, 74, 104-105, 132 
enforce-scripts . . . 65, 93, 97, 104, 106, 
109, 111, 126-127, 129-130 
files . . . 65, 226 
follow~symlinks . . . 65, 122 
installed-software-catalog 
. . . 59,65,94, 
104, 117, 119, 126, 132, 197-198, 201, 
203,253 
logfile . . . 66, 91, 94, 98, 104, 119, 122, 
126,132 
loglevel . . . 66, 77-78, 91, 94,99, 104, 119, 
122,126,132,202,207 
media-capacity . . . 66, 122, 159 
media-type . . . 64,66, 122 
oneliner . . . 66, 115-117, 224 
psf-sourcefile 
. . . 122 
reconfigure . . . 66, 74, 94, 96, 214 
recopy . . . 67, 74, 99-100 
reinstall . . . 67, 74, 104, 106 
select-local . . . 67, 95, 99, 104, 117, 119, 
126,132 
uncompress-files . . . 63,67,99, 102, 186 
verbose . . . 68-69, 74-75, 91, 95, 99, 104, 
119,123,126,132,207 
Extended Options Syntax . . . 68, 198 
FAT ... 187 
FAT-Hidden 
- see attributes 
FAT-Readonly 
- see attributes 
Features Inherited From POSM.1 . . . 27 
Features Inherited From POSM.2 . . . 27 
FIFO . . . 48, 156 
file - 
see attributes 
- 
see keywords 
File Attributes . . . 47 
File Attributes for INFO File . . . 153 
File Definition . . . 152 
File Level Fix . . . 135 
File Loading . . . 101, 109 
File Location . . . 108 
filename 
definition of . . . 18 
filename character string 
definition of . . . 18 
FILENAME-CHARACTER-STRING . . . 54- 
55,68, 141-142, 145, 199 
Alphabetic Topical Index 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
file-permissions 
- see keywords 
File Removing . . . 129 
files - see attributes 
- see extended options 
Files . . . 46, 186 
fileset 
- 
see attributes 
- 
see keywords 
definition of . . . 18 
Fileset Attributes . . . 43 
Fileset Control Files . . . 140 
Fileset Definition . . . 150 
filesets 
- see attributes 
Filesets . . . 42, 185 
Fileset State Transitions . . . 88 
Fileset State Transitions (Within Distribu- 
tions) . . . 208 
Fileset State Transitions (Within Installed 
Software) . . . 208 
file storage structure 
definition of . . . 18 
File Storage Structure . . . 140 
file system . . . 2, 27, 33,46-47, 65, 74, 86, 
100-101, 107-110, 124,130, 137-138, 156- 
158, 165-166, 170, 174, 186-189, 197-198, 
201-202, 214, 218-219, 233-234, 251-252 
File System . . . 27 
find . . . 186 
fix - 
see control-files 
follow-symlinks 
- see extended options 
Fully Qualified Software-spec . . . 58 
fully qualified software-spec 
definition of . . . 18 
Functional Sufficiency 
General . . . 1, 165 
General Error Events . 
General Terms . . . 14 
gid - see attributes 
GKS-3D . . . 161 
Grammar Conventions 
graphical user interface 
definition of . . . 18 
group - 
see attributes 
GUI . . . 18, 26, 184 
abbreviation . . . 26 
definition of . . . 26 
gzip . . . 186 
hard link . . . 186 
definition of . . . 18 
hexadecimal character string 
definition of . . . 18 
HOME 
variable . . . 10 
$HOME/ . .. 10 
HOME . . . 10 
$HOME/.swdefaults ... 60 
host - 
see attributes 
definition of . . . 19 
HOST . . . 4 
host character string 
definition of . . . 19 
HOST-CHARACTER-STRING . . . 58-59 
Host Resources MIB . . . 180 
HP-UX .. . 192,196,201,216,221,227 
IAP ... 162 
IEEE . . . 3,162, 177 
IEEE P1003.0 . .. 254 
IEEE P1003.la . . . 26, 162 
. 
IEEE P1387.3 . .. 198 
IEEE P1387.4. . . . 198 
IEEE P2003.2 .. . 162 
IEEE P2003 . . . 162 
IEEE Std 1003.0 . . . 162 
IEEE Std 100 . . . 162 
implementation 
conforming . . . 3 
definition of . . . 13 
limited conformance . . . 4 
Implementation Conformance . . . 3, 166 
implementation defined . . . 4-5, 13-14, 22, 
29, 31,37, 39,44,46,48, 54,59-60,63-66, 
73-74, 77, 82-83, 85, 88-91, 93-94, 97-98, 
100-101, 104-113, 117, 119, 122, 124, 126- 
130, 132, 152, 156, 159, 188, 197-198, 203, 
205,207, 209, 219-220, 232,239, 254-255 
definition of . . . 13 
Alphabetic Topical Index 


ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
compressed-cksum . . . 151-152 
compressed-size . . . 151-152 
compression-state . . . 151-152 
compression-type . . . 151-152 
con£ igure . . . 153 
contents ... 148 
control-directory . . . 149-150 
control-£ ile . . . 146,150-151, 153, 
153 
copyright . . . 148-149 
corequisites . . . 150 
create-time . . . 148-150 
description . . . 148-150 
df iles . . . 147-148 
directory . . . 148-149, 154-155, 238 
distribution ... 146,236 
exclude . . . 157 
exrequisites . . . 150 
file . . . 146, 151, 154-155, 155, 158, 238 
filegermissions . . . 155,157,157, 
239 
f ileset . . . 146,150,194 
filesets ... 150 
fix ... 153 
gid ... 152 
group .. . 152 
installed-software . . . 146 
instance-id . . . 148-149 
interpreter . .. 151 
is-kernel ... 150 
is-locatable . . . 148-150 
is-reboot .. . 150 
is-volatile . .. 152 
layout-version . . . 147-148 
link-source . .. 152 
location . . . 148-150 
machine-type . . . 148-149 
major . . . 152 
media . . . 147 
media-sequence-number . . . 150 
minor .. . 152 
mode ... 152 
mod-time . . . 148-150 
mtime . . . 152 
number . . . 148-149 
0s-name . . . 148-149 
0s-release . . . 148-149 
0s-version . . . 148-149 
owner .. . 152 
path . . . 147-148, 151-152, 158 
pfiles . .. 147-148 
postinstall ... 153 
postkernel-type . . . 149 
postremove . .. 153 
preinstall . . . 153, 153 
preremove . . . 153 
prerequisites . . . 150 
product . . . 146-147, 177, 194 
qualifier . . . 148-149 
request ... 153 
result ... 151 
revision . . . 148-150,152 
sequence-number . . . 147 
size . . . 148-152 
source . . . 151-152 
space . . . 153 
state ... 150 
subproduct . . . 146, 150, 194 
subproducts . . . 150 
tag . . . 148-151 
title ... 148-150 
type . . . 152 
uid .. . 152 
unconfigure .. . 153 
unpostinstall . . . 153 
unpreinstall . . . 153 
vendor-tag . . . 148-149 
verify ... 153 
keywords 
vendor-defined . . . 147 
LANG 
variable . . . 27,71, 180 
LANG . . . 180 
language binding . . . 161 
layout-version 
- 
see attributes 
LC- ... 71 
LC-ALL 
variable . . . 27, 71 
LC-CTYPE 
variable . . . 27, 71 
LC-MESSAGES 
variable . . . 27, 71 
LC-TIME 
variable . . . 27, 71 
Limited Conformance POSM.7.2 Implementa- 
tion . . . 4 
<limits.h> ... 10 
link 
symbolic . . . 24, 26,46,48,65, 109-110, 
129-130, 134-135, 140, 155-156, 171, 
186,227 
linksource 
- see attributes 
localedef . . . 10 
locatable fileset 
definition of . . . 20 
locatable software 
definition of . . . 20 
location 
- see attributes 
logfile - see extended options 
Alphabetic Topical Index 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
Logging . . . 77, 207 
loglevel 
- see extended options 
1s ... 223 
machine . . . 175 
machine-type 
- 
see attributes 
major - 
see attributes 
manager role 
definition of . . . 20 
may 
definition of . . . 13 
media . . . 158-159 
- see attributes 
- see keywords 
Media . . . 33, 178 
Media Attributes . . . 33 
media-capacity 
- 
see extended options 
Media Definition . . . 147 
Media Format . . . 251,253 
media sequence number . . . 74 
media sequence number 
see also media-sequence-number 
media-sequence-number 
- see attributes 
media-type 
- see attributes 
- 
see extended options 
medium . . . 158-159 
directory . . . 17 
serial . . . 22 
metadata 
definition of . . . 20 
MIB . . . 163,180 
Host Resources . . . 180 
minor 
- 
see attributes 
mod-date 
- 
see attributes 
mode - 
see attributes 
mod-time 
- 
see attributes 
mtime 
- see attributes 
Multiple Version Control . . . 252-253 
MVS . . . 165 
NAME . . . 227 
NAME-MAX . . . 177 
<National Body> Conforming POSIX.7.2 Dis- 
tribution . . . 6 
newline 
abbreviation . . . 26 
definition of . . . 26 
newline string 
definition of . . . 20 
NEWLINE-STRING . . . 54,142-145, 
199-200 
NFS ... 213 
Non-interactive Operation . . . 53, 193 
Normative References . . . 3, 166 
NOTES . . . 11 
number 
- see attributes 
object 
definition of . . . 20 
obsolescent 
definition of . . . 13 
obsolescent features . . . 6, 
octal character string 
definition of . . . 20 
one-liner 
- see extended options 
operating system 
abbreviation . . . 26 
Optional Behavior . . . 255 
options file 
definition of . . . 21 
options-file 
definition . . . 200 
Order of Install Operations . . . 220 
Order of Remove Operations . . . 231 
OS/2 . . . 165 
0s 
definition of . . . 26 
0s-name 
- see attributes 
0s-release 
- see attributes 
0s-version 
- 
see attributes 
owner - 
see attributes 
Alphabetic Topical Index 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
packager role 
definition of . . . 21 
Packaging Layout . . . 251,253 
path - see attributes 
PATH 
variable . . . 27, 71-72, 185 
PATH-MAX ... 177 
pathname 
definition of . . . 21 
PATHNAME . . . 174-175, 219 
pathname character string 
definition of . . . 21 
PATHNAME-CHARACTER-STRING 
. . . 58-59, 65-66, 142, 145 
pax . . . 158 
pfiles - 
see attributes 
pipe . . . 48, 156, 187 
pkgmap . . . 235 
Policy Neutrality . . . 252,254 
Portability Capabilities . . . 253 
Portability Considerations . . . 251 
portable character string 
definition of . . . 21 
PORTABLE-CHARACTER-STRING . . . 54, 
68, 199-200 
POSM.0 . . . 254 
POSM.1 . . . 2, 4-5, 11, 14, 17-18, 20-22, 24, 
26-27, 3436, 38, 41,45-48, 58-59, 71, 100, 
109-110, 124, 137-138, 140, 146, 158, 160, 
165-167, 170, 176-177, 180, 182, 186-187, 
202,227,229,237,251 
abbreviation . . . 26 
definition of . . . 26 
requirement for . . . 27, 165 
POSM.la 
abbreviation . . . 26 
definition of . . . 26 
POSM.2 . . . 2, 4-7, 10-15, 20-23, 25-27, 45, 
51,69, 71-72, 115, 158, 165-167, 173, 186- 
188, 193, 196, 200, 202-203, 223, 237, 251 
abbreviation . . . 26 
definition of . . . 26 
requirement for . . . 27, 165 
POSIx.7.2 
abbreviation . . . 26 
definition of . . . 26 
POSM.7 .. . 3-7, 13-14, 26, 49, 137, 167 
POSMLocale . . . 115 
POSE-PATH-MAX . . . 141 
Possible Attributes of a Host Class . . . 177 
postinstall 
- 
see control-files 
Postinstall Scripts . . . 111 
postkernel 
- see attributes 
postkernel 
- see control-files 
postremove 
- see control-files 
postremove ... 140 
Precedence for Option Specification . . . 69, 
201 
preinstall 
- see keywords 
preinstall 
- see control-files 
preinstall . . . 139-140 
Preinstall Scripts . . . 109 
preremove 
- see control-files 
prerequisite . . . 16, 21, 36,42, 44, 61-62, 96, 
99, 107, 112, 124, 146, 150, 159, 185, 187, 
190, 204-206, 231, 240-241 
definition of . . . 21 
prerequisites 
- see attributes 
printf 0 . . . 224 
product 
- see attributes 
- see keywords 
definition of . . . 21 
Product Attributes . . . 36 
Product Catalog . . . 139 
Product Control Files . . . 139 
Product Definition . . . 149 
products 
- see attributes 
Products . . . 36, 181 
Product Specification File . . . 123, 245 
product specification file (PSF) 
definition of . . . 21 
Profiling Considerations . . . 254 
proxy . . . 14, 21, 72, 171, 183, 219, 221 
proxy install . . . 72, 171,183,192,219,221 
definition of . . . 21 
proxy install - see alternate root directory 
PSF . . . 21-22, 26, 40, 46, 121-125, 137, 142, 
144-145, 147-154, 187, 191, 229, 236-237, 
247 
abbreviation . . . 26 
definition of . . . 21, 26 
example . . . 245 
Alphabetic Topical Index 

ISOAEC 15068-2: 1997 ( E )  
IEEE Std 1387.2-1995 
psf-source-file 
- 
see extended options 
qualifier 
- see attributes 
reboot fileset 
definition of . . . 21 
rebooting 
definition of . . . 22 
Rebooting the System . . . 112 
reconfigure 
- see extended options 
recopy - see extended options 
recovery 
definition of . . . 21 
Recovery . . . 113 
Recursive File Definition . . . 154 
reinstall 
- see extended options 
release . . . 176 
remove 
- 
see control-files 
removed 
- see states 
Removing From a Distribution . . . 130 
request 
- 
see control-files 
requisite 
see corequisite 
see exrequisite 
see prerequisite 
requisites . . . 16, 18, 21,62, 132 
response 
- see control-files 
result - see attributes 
Return Codes . . . 89 
revision 
- 
see attributes 
RFC 1514 . . . 180 
RFC . . . 162-163, 180 
role . . . 22 
client . . . 15 
definition of . . . 22 
developer . . . 16 
manager . . . 20 
packager . . . 21 
source . . . 24 
target . . . 24 
Roles in Software Administration . . . 168 
Sample Files . . . 243 
Scope . . . 1, 165 
outside of . . . 4, 17-18, 158, 165, 168-169 
Script Return Codes . . . 73 
scripts - see control-files 
SDU . . . 187, 221, 235-237 
SDU INFO file format . . . 237 
selection phase 
definition of . . . 22 
Selection Phase . . . 82, 92, 95, 99, 104, 117, 
120,123,127, 133,207 
select-local 
- see extended options 
sequence-number 
- 
see attributes 
Serial Format and Multiple Media . . . 158, 
240 
serial medium 
definition of . . . 22 
session . . . 22, 74, 76,81-83, 192 
definition of . . . 22 
Session Events . . . 76 
sh . . . 6, 12, 27,48-49, 167, 188, 202 
shall 
definition of . . . 13 
shell token string 
definition of . . . 22 
SHELL-TOKEN-STRING . . . 68,142,145, 
199 
should 
definition of . . . 13 
SJSGID ... 110 
S-ISUID . . . 110 
size - 
see attributes 
size f . . . 180 
software 
- see extended options 
definition of . . . 22 
Software . . . 35, 179 
Software Administration Utilities . . . 51, 188 
Software-Collection . . . 30, 177 
software~collection 
definition of . . . 22 
Software-Collection Attributes . . . 31 
Alphabetic Topical Index 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
software~collection_spec 
definition . . . 58 
Software Common Attributes . . . 35 
sohare common class 
definition of . . . 22 
Software Compatibility . . . 58 
software-definition-file 
definition . . . 142 
Software Definition File Format . . . 141, 236 
software definition files 
definition of . . . 22 
Software Definition File Syntax . . . 142 
software file 
definition of . . . 23 
Sohare-File Common Attributes . . . 45 
software-file common class 
definition of . . . 23 
SoftwareFiles . . . 45, 185 
software-files 
definition of . . . 23 
software hierarchy 
definition of . . . 23 
software location 
definition of . . . 23 
software object 
definition of . . . 23 
Software Object Containment . . . 175 
SoRware Object Inheritance . . . 176 
software-option 
definition . . . 68 
software packaging layout 
definition of . . . 23 
example . . . 247 
SoRware Packaging Layout . . . 137,234,247 
software pattern match string 
definition of . . . 23 
SOFTWARE-PATTERN-MATCH-STRING 
. . . 54-55 
Software Selections . . . 86, 120, 123 
software-selections . . . 51-52, 54,67, 70, 90- 
91,93-94,97-98, 102-103, 114, 116, 118- 
119, 121-122, 125-126, 129, 131-132, 201, 
215,229,232 
definition of . . . 54 
software-spec . . . 16, 18, 23, 30-31, 38,40- 
41, 52, 54-58, 69, 73-74, 109, 115, 146, 181, 
183-184, 187, 193-196, 223-224 
definition of . . . 23, 54 
Software Specification and Logic . . . 54, 61, 
193 
Software-spec Version Identifiers . . . 56 
Sohare Structures . . . 29, 172 
source 
- see attributes 
definition of . . . 24 
Source and Target Specification and Logic 
. . . 58, 196 
source host 
definition of . . . 24 
source path 
definition of . . . 24 
source role 
definition of . . . 24 
source 
well-known . . . 207 
space - see control-files 
Space Control-file . . . 158 
Specifymg Targets . . . 83, 123 
Specifying the Source . . . 86, 120, 123 
Starting a Session . . . 82 
state . . . 4-7, 15, 19, 21, 27,42, 44-46, 51, 59, 
61,63-64, 66-67, 74, 88-89, 95-97, 100-102, 
107-108, 111-114, 128-130, 133, 151-152, 
169, 173, 195, 204-205, 208, 213-216, 218- 
219,224,234,253 
- see attributes 
restoring . . . 113 
state-info 
- 
see attributes 
states 
a v a i l a b l e  .. . 36,38,42,44,89,101, 
133,208 
con£ igured . . . 42,44,66,88,96-97, 
108,133,208,214,234 
corrupt . .. 42, 44, 61, 74, 88, 95, 108, 
113, 129-130, 208 
i n s t a l l e d  . . . 36,38,42,44, 88, 96-97, 
108, 112, 114,128, 133,208, 213-214 
removed ... 42,44, 89, 108, 114, 129- 
130,133,208 
t r a n s i e n t  ... 42,44,74,89,95,101, 
108, 112-113, 128, 130,208 
stderr . . . 17, 66,68, 71, 73, 75, 77, 111, 131, 
207,232 
Stderr . . . 75, 207 
stdin . . . 186 
stdout .. . 17,66,68, 71, 73-75, 77, 111, 115, 
186,203,207,232 
Stdout . . . 74,207 
stgid . . . 47 
st-mode . . . 48 
st-mtime . . . 48 
Storage Technology Independence for Installed 
Software Catalogs . . . 252, 254 
Strictly Conforming POSM.7.2 Distribution 
. . . 4, 6, 13-14, 49, 167 
string 
decimal . . . 16 
filename . . . 18,21 
hexadecimal . . . 18 
integer . . . 20 
Alphabetic Topical Index 

ISO/IEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
newline . . . 20 
octal . . . 20 
portable character . . . 21 
shell token . . . 22 
software pattern match . . . 23 
white space . . . 25 
st-size . . . 46 
st-uid . . . 48 
subproduct 
- see attributes 
- see keywords 
definition of . . . 24 
Subproduct Attributes . . . 45 
Subproduct Definition . . . 150 
subproducts 
- 
see attributes 
Subproducts . . . 44, 185 
SVID . . . 163 
SVR4 pkgmap file format . . . 237 
SW-ACCESS-DENIED . .. 70,74,82,84, 
86-87 
SW-AGENT-INITIALIZATION-FAILED 
. . . 74,83, 87 
SW-ALREADY-CONFIGURED . . . 74,96 
SW-ANALYSISBEGINS . . . 74,86 
SW-ANALYSIS-ENDS . . . 74,87 
swask . . . 51-53, 59-62, 64, 66-67, 74, 90-91, 
95,106,204,210 
- - 
Ask for user responses . . . 90,209 
utility definition . . . 90 
SW-BAD-SESSION-CONTEXT . . . 74,87 
SW-CANNOT-INITIATE-REBOOT . . . 74, 
112 
SW-CANNOT-OPEN-LOGFILE 
. . . 74,85 
SW-CATALOG 
variable . . . 72, 203 
SW-CHECK-SCRIPT-EXCLUDE 
. . . 74, 
107,128 
SW-CHECK-SCRIPT-WARNING 
... 74, 
106,128, 134 
SW-COMPRESSION-FAILURE . . . 74,101- 
102, 111 
swconf i g  . . . 51-53, 58,60-64, 66-67, 90, 
92-95, 97, 108, 112, 171, 188-189, 204, 206, 
209,213-214, 219 
- 
Configure software . . . 93, 212 
utility definition . . . 93 
SW-CONFIGURE-ERROR . . . 74,97 
SW-CONFIGURE-EXCLUDE . . . 74,97 
SW-CONFIGURE-WARNING . . . 74,97 
SW~CONFLICTING~SESSION~IN~- 
PROGRESS . . . 70,74 
SW-CONNECTION-LIMIT-EXCEEDED 
. . . 74, 86 
SW~CONTROL~DIRECTORY 
variable . . . 72, 92,97,203-204, 206,211 
SW-CONTROL--DIRECTORY . . . 211 
SW-CONTROL--SCRIPT-BEGINS . . . 74,87 
SW-CONTROL-TAG 
variable . . . 72, 153,203 
swcopy . . . 40,44, 51-54, 57, 59,61-65, 67, 
84-88, 98-101, 147, 149-150, 178, 185-186, 
191, 195, 197, 215-216, 253 
- 
Copy distribution . . . 97, 214 
utility definition . . . 97 
SW-CURRENT-MEDIA . . . 74,88 
SW-DATABASE-UPDATEERROR 
. . . 74, 
88 
SW-DEPENDENCY-NOT-MET 
. . . 74,96, 
100, 107,124,128, 134 
SW-DSA-FAILED-TO-RUN 
. . . 74,107 
SW-DSA-INTO-MINFREE 
. . . 74 
SW-DSA-OVER-LIMIT 
... 74,100,107,124 
SW-ERROR . . . 57, 70, 73-75, 82-88, 92-93, 
95-97, 99-102, 105-112, 117, 120-121, 123- 
125, 127-130, 133-135 
SW-EXECUTION-BEGINS . . . 74,87 
SW-EXECUTION-ENDS . . . 74,88 
SW-EXISTING-MULTIPLE-VERSION 
. . . 74, 105 
SW-EXREQUISITE-EXCLUDE . . . 74,105 
SW-FILE-BEGINS . . . 74,88 
SW-FILE-ERROR ... 74, 110,125, 134-135 
SW-FILE-IS-READ-ONLY 
. . . 74,87 
SW-FILE-IS-REMOTE 
... 74,101, 110 
SW-FILE-NOT-FOUND 
... 74,121,124 
SW-FILE-NOT-REMOVABLE 
. . . 74,110, 
129 
SW-FILESET-BEGINS . . . 74,87 
SW-FILESET-ERROR . . . 74,87-88 
SW-FILESET-WARNING 
. . . 74,87-88 
SW-FILESYSTEMS-MORE-MOUNTED 
. . . 74,86 
SW-FILESYSTEMS-NOT-MOUNTED 
. . . 74, 86 
SW-FILE-WARNING . . . 74,109-110 
SW-HIGHER-REVISION-INSTALLED 
. . . 74, 106 
SW-ILLEGAL-OPTION . . . 74,82 
SW-ILLEGAL-SWTE-TRANSITION . . . 74, 
87 
Alphabetic Topical Index 

ISOAEC 15068-2: 
1997 (E) 
IEEE Std 1387.2-1995 
swinstall . . . 15, 19, 21, 40,44, 51-54, 57- 
62, 64-67, 69, 74, 84,86-88, 90, 92-93, 98- 
99, 103-105, 107-109, 111, 113, 127, 142, 
156, 158, 185, 188-190, 196, 198, 203-206, 
209, 213-216, 218, 230, 233, 237, 240 
- Install software . . . 102, 215 
utility definition . . . 102 
SW-INTERNALERROR . . . 74,82 
SW-10-ERROR . . . 74,82 
swlist .. . 17, 30, 51-53, 57-59, 64, 66, 71, 
114-118, 147-148, 150-151, 180-181, 190- 
191, 195, 222-223, 235-236, 254 
-List software . . . 222 
- 
List software catalog . . . 114 
utility definition . . . 114 
SW-LOCATION 
variable . . . 72, 203 
SW-LOCATION . . . 226 
SW-MEMORY-ERROR . . . 74,82 
swmodif y 
.. . 121 
... 51-53, 59, 64-66, 70, 85, 89, 114, 
118-121, 124, 152, 178, 191, 197, 213, 
225-226, 234, 237 
- 
Modify software catalog . . . 118, 225 
utility definition . . . 118 
SW-NEEDMEDIA-CHANGE . . . 74,88 
SW-NEW-MULTIPLE-VERSION 
. . . 74,96 
SW-NOT-COMPATIBLE . . . 74,95,105,133 
SW-NOTE . . . 73-74, 81, 84-88, 96-97, 100- 
101, 105-107, 110, 124, 128 
SW-NOT-LOCATABLE 
. . . 74,105 
SW-OTHER-SESSIONS-IN-PROGRESS 
. . . 74, 86 
swpackage . . . 21, 46, 51-54, 59,64-67, 70, 
84-85, 89, 121-125, 137, 142, 147, 149-152, 
154-156, 158, 170, 178, 186, 191, 197, 229, 
239-240, 253 
- Package distribution . . . 121, 227 
utility definition . . . 121 
SW-PATH 
variable . . . 72, 203 
SW-POSTKERNEL-ERROR . . . 74,111 
SW-POSTKERNEL-WARNING . . . 74,111 
SW-POST-SCRIPT-ERROR 
. . . 74,111,130 
SW-POST-SCRIPT-WARNING . . . 74,111, 
130 
SW-PRE-SCRIPT-ERROR 
. . . 74,109,129, 
135 
SW-PRE-SCRIPT-WARNING 
. . . 74,109, 
129,135 
swremove . . . 51-53, 59,62, 64-66, 74, 85, 
88-89, 93, 125-130, 133, 178, 188, 190-191, 
195, 197-198, 203-204, 206, 218, 230, 232 
- 
Remove software . . . 125,230 
utility definition . . . 125 
SW-REQUEST-ERROR . . . 74,93 
SW-REQUEST-WARNING . . . 74,93 
SW-RESOURCE-ERROR . . . 74,82 
SW-ROOT-DIRECTORY 
variable . . . 72, 112, 203-204, 219, 221 
SW-ROOT-DIRECTORY . . . 226 
SW-SAME-REVISION-INSTALLED ... 74, 
100, 106, 124 
SW-SAME-REVISION-SKIPPED 
. . . 74, 
100,106 
SW-SELECTION-IS-CORRUPT . . . 74,95, 
133 
SW-SELECTION-NOT-ANALYZED ... 74, 
88 
SW-SELECTION-NOT-FOUND 
. . . 74,92, 
95,99, 105,117, 120, 124,127,133 
SW-SELECTION-NOT-FOUND-AMBIG 
. . . 57, 74,92, 99, 105, 120, 124, 127 
SW-SELECTION-NOT-FOUND-RELATED 
. . . 74, 95, 127, 133 
SW-SELECTION-SKIPPED-IN-ANALYSIS 
. . . 74, 88 
SW-SERVICE-NOT-AVAILABLE . . . 74,86 
SW-SESSION-BEGINS . . . 74,81 
SW-SESSION-ENDS . . . 74,81 
SW-SESSION-OPTIONS 
variable . . . 72-73, 91, 202-203 
SW-SESSION-OPTIONS . . . 202,210-211 
SW-SKIPPED-GLOBAL-ERROR 
. . . 74,87 
SW-SKIPPED-PRODUCT-ERROR 
. . . 74, 
87 
SW-SOC-AMBIGUOUS-TYPE . . . 74,85 
SW-SOC-CREATED ... 74,84,100,106 
SW-SOC-DOES-NOT-EXIST 
. . . 74,84 
SW-SOC-INCORRECT-MEDIA-TYPE 
. . . 74, 85 
SW-SOC-INCORRECT-TYPE 
. . . 74,84 
SW-SOC-IS-CORRUPT . . . 74,84 
SW-SOCJS-READ-ONLY 
. . . 74,86 
SW-SOC-IS-REMOTE 
... 74,86 
SW-SOCJS-SERIAL 
. . . 74,85 
SW-SOCLOCK-FAILURE . . . 70,74 
SW-SOFTWARE-SPEC 
variable . . . 73 
SW-SOURCE-ACCESS-ERROR 
. . . 74,86- 
87,101, 110,120, 123 
SW-SOURCE-NOT-FIRST-MEDIA . .. 74, 
86 
SW-TERMINATION-DELAYED 
. . . 74,82 
swverify . . . 51-53, 58-60, 62-66, 74, 85, 
131-134, 181, 190-191, 197,204,206,237 
- 
Verify software . . . 131,233 
utility definition . . . 131 
Alphabetic Topical Index 

ISOAEC 15068-2: 1997 (E) 
IEEE Std 1387.2-1995 
SW-WARNING . . . 70,73-75, 86-88, 93,95- 
97, 100-101, 105-107, 109-111, 124, 127- 
130, 133-135 
SW-WRONG-MEDIA-SET 
. . . 74,88 
symbolic link . . . 24, 26, 46, 48, 65, 109-110, 
abbreviation . . . 26 
definition of . . . 24 
symhnk . . . 24 
definition of . . . 26 
sysadmin-option 
definition . . . 199 
sysname . . . 176 
system 
definition of . . . 24 
system () . . . 12 
system documentation 
definition of . . . 14 
SystemV . . . 163 
tag - see attributes 
t a r  . . . 22,27, 47, 59, 100, 124, 137-138, 
158, 160, 170, 186-187, 227, 229 
target 
definition of . . . 24 
target host 
definition of . . . 24 
target path 
definition of . . . 24 
target role 
definition of . . . 24 
targets 
- see extended options 
Terminology . . . 12 
Terminology and General Requirements 
. . . 9, 167 
Test Methods . . . 8, 167 
text file . . . 235, 252 
title - see attributes 
transient 
- see states 
TSG-1 . . . 162, 251 
m e  - see attributes 
Typographical Conventions . . . 9 
TZ 
variable . . . 27, 71 
UCS . . . 3, 26, 162 
uid - 
see attributes 
urnask0 ... 157 
uname . . . 38, 41,58, 105,133, 146, 178, 182, 
184,218 
uname0 . . . 58, 175-177, 181-182 
uname . . . 105, 178 
uncompressJiles 
- see extended options 
unconfigure 
- see control-files 
Unconfigure Operations . . . 96 
undefined . . . 2, 5, 14-16, 19,23-24, 29-38, 
40-42, 44-49, 51, 54, 57-58, 60, 63, 66, 68, 
70, 75, 77-78, 92, 100-102, 107, 115-116, 
125, 140-141, 145, 147-148, 165, 171, 174- 
175, 177, 182, 185, 191, 193, 201-202, 219, 
221, 223-224, 235-236, 253-255 
definition of . . . 14 
<unistd.h> ... 10 
UNM . .. 163 
unpostinstall 
- see control-files 
unpreinstall 
- see control-files 
unspecified . . . 5, 14, 82, 165, 186, 254-255 
definition of . . . 14 
update 
definition of . . . 25 
user - see attributes 
User Requirements . . . 251 
UTF-8 . . . 26 
abbreviation . . . 26 
definition of . . . 26 
utilities 
swask . . . 90 
swconfig ... 93 
swcopy ... 97 
s w i n s t a l l  . . . 102 
s w l i s t  ... 114 
swmodify . . . 118 
swpackage ... 121 
swremove ... 125 
swverify ... 131 
uuid - see attributes 
Alphabetic Topical Index 

ISOAEC 15068-2: 1997 ( E )  
IEEE Std 1387.2-1995 
vendor 
- see attributes 
definition of . . . 25 
Vendor . . . 34, 179 
Vendor Attributes . . . 35 
vendor-defined . .. 7,25, 36-41, 71, 138, 140, 
180,187,206,225,237 
definition of . . . 25 
Vendor-Defined Keywords and Attributes 
. . . 147 
Vendor Definition . . . 148 
vendor-supplied . . . 25, 48, 63, 65, 93,97, 
106-107, 127, 134, 140,204,222 
definition of . . . 25 
vendor-tag 
- 
see attributes 
verbose 
- see extended options 
ver-id . . . 55-58, 195 
verify - see control-files 
version . . . 3, 25-26, 30-33, 36-41, 54-58, 60, 
67, 74,92, 94, 96, 99-100, 104-106, 108, 
115, 120, 124, 127, 138, 141, 146-149, 161, 
163, 177, 181-184, 189-190, 194-196, 198, 
216-219, 223, 227-228, 236-237, 240, 252- 
253,255 
definition of . . . 25 
version . . . 177 
VMS . . . 165 
waitpid0 . . . 11 
white space 
abbreviation . . . 26 
definition of . . . 26 
white space string 
definition of . . . 25 
WHITE-SPACE-STRING . . . 54-55,68,142, 
145, 199-200 
wildcard character 
definition of . . . 25 
Y 
yacc ... 12 
Alphabetic Topical Index 

