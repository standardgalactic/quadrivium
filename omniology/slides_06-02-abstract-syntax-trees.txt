Alex Aiken 
Compilers 
Abstract Syntax Trees 

Alex Aiken 
Abstract Syntax Trees 
• A parser traces the derivation of a sequence of tokens 
 
• But the rest of the compiler needs a structural 
representation of the program 
 
• Abstract syntax trees 
– Like parse trees but ignore some details 
– Abbreviated as AST 
 

Alex Aiken 
Abstract Syntax Trees 
• Consider the grammar 
        E  int | ( E ) | E + E  
 
• And the string 
       5 + (2 + 3) 
 
• After lexical analysis (a list of tokens) 
          int5 ‘+’ ‘(‘ int2 ‘+’ int3 ‘)’ 
 
• During parsing we build a parse tree … 
 

Alex Aiken 
Abstract Syntax Trees 
E 
E 
E 
( 
E 
) 
+ 
E 
+ 
int5 
int2 
E 
int3 
•
A parse tree: 
 
•
Traces the operation of 
the parser 
 
•
Captures nesting structure 
 
•
But too much information 
– Parentheses 
– Single-successor nodes 

Alex Aiken 
Abstract Syntax Trees 
• Also captures the nesting structure 
• But abstracts from the concrete syntax 
=> more compact and easier to use 
• An important data structure in a compiler 
PLUS 
PLUS 
  2 
  3 
  5 

