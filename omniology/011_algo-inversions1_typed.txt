Divide	  and	  
Conquer	  
Coun.ng	  
Inversions	  I	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
The	  Problem	  
Input	  :	  array	  A	  containing	  the	  numbers	  1,2,3,..,n	  in	  
some	  arbitrary	  order	  
Output	  :	  number	  of	  inversions	  =	  number	  of	  pairs	  (i,j)	  
of	  array	  indices	  with	  i<j	  and	  A[i]	  >	  A[j]	  

Tim	  Roughgarden	  
Examples	  and	  Mo.va.on	  
Example	  
Inversions	  :	  
	  	  	  	  (3,2),	  	  	  	  (5,2),	  	  	  	  (5,4)	  
Mo.va.on	  :	  numerical	  
similarity	  measure	  
between	  two	  ranked	  lists	   eg:	  for	  collabora.ve	  ﬁltering	  

Tem
ver
15	  
21	  
What	  is	  the	  largest-­‐possible	  number	  of	  inversions	  that	  a	  6-­‐
element	  array	  can	  have?	  
In	  general,	  	  

Tim	  Roughgarden	  
High-­‐Level	  Approach	  
Brute-­‐force	  :	  
	  	  	  	  	  .me	  
Can	  we	  do	  be^er	  ?	  	  	  	  Yes!	  
KEY	  IDEA	  #	  1	  	  :	  
	  Divide	  +	  Conquer	  
Call	  an	  inversion	  (i,j)	  	  [with	  i<j]	  
	  LeW	  :	  if	  i,j	  <	  n/2	  
	  Right	  :	  if	  i,j	  >	  n/2	  
	  Split	  :	  if	  i<=n/2	  <	  j	  
Note	  :	  can	  compute	  these	  
recursively	  
need	  	  separate	  subrou.ne	  for	  
these	  

Tim	  Roughgarden	  
High-­‐Level	  Algorithm	  
Count	  (array	  A,	  length	  n)	  
	  if	  n=1,	  return	  0	  
	  else	  
	  
	  X	  =	  Count	  (1st	  half	  of	  A,	  n/2)	  
	  
	  Y	  =	  Count	  (2nd	  half	  of	  A,	  n/2_	  
	  
	  Z	  =	  CountSplitInv(A,n)	  
	  return	  	  	  x+y+z	  
Goal	  :	  implement	  CountSplitInv	  in	  linear	  (O(n))	  .me	  then	  
count	  will	  run	  in	  O(nlog(n))	  .me	  [just	  like	  Merge	  Sort]	  

