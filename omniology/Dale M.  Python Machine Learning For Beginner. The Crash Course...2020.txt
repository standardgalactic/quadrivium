

Python Machine Learning for Beginners
The Crash Course to learn how Python Programming could help
for Data Science, Data Analysis and Artificial Intelligence
By
Marvin Dale

© Copyright 2020 by Marvin Dale - All rights reserved.
This document is geared towards providing exact and reliable information
in regards to the topic and issue covered. The publication is sold with the
idea that the publisher is not required to render accounting, officially
permitted, or otherwise, qualified services. If advice is necessary, legal or
professional, a practiced individual in the profession should be ordered.
- From a Declaration of Principles which was accepted and approved
equally by a Committee of the American Bar Association and a Committee
of Publishers and Associations.
In no way is it legal to reproduce, duplicate, or transmit any part of this
document in either electronic means or in printed format. Recording of this
publication is strictly prohibited and any storage of this document is not
allowed unless with written permission from the publisher. All rights
reserved.
The information provided herein is stated to be truthful and consistent, in
that any liability, in terms of inattention or otherwise, by any usage or abuse
of any policies, processes, or directions contained within is the solitary and
utter responsibility of the recipient reader. Under no circumstances will any
legal responsibility or blame be held against the publisher for any
reparation, damages, or monetary loss due to the information herein, either
directly or indirectly.
Respective authors own all copyrights not held by the publisher.
The information herein is offered for informational purposes solely, and is
universal as so. The presentation of the information is without contract or
any type of guarantee assurance.
The trademarks that are used are without any consent, and the publication
of the trademark is without permission or backing by the trademark owner.
All trademarks and brands within this book are for clarifying purposes only
and are the owned by the owners themselves, not affiliated with this
document.

Table of Contents
Introduction
Chapter 1: Getting Started with Python
1.1 Steps to Learn Python
1.2 Basics of Python
Chapter 2: Python's Fundamental Attributes
2.1 Unique Features of Python
2.2 Versions of Python
2.3 Applications of Python
2.4 Installing Python
Chapter 3: Compilers, Text Editors, and IDEs
3.1 Compilers for Python
3.2 Python Text Editors
3.3 IDEs of Python
3.4 Why IDEs and Code Editors!
Chapter 4: Comparison of Python with other Programming Languages
4.1 Python and C++
4.2 Python and C#
4.3 Python and Java
4.4 Python and PHP
Chapter 5: Data Types, Operators, and Variables in Python
Programming
5.1 Variables of Python
5.2 Operators in Python
5.3 Data Types in Python
Chapter 6: Regular Expressions, Expression Statements, Loops in
Python
6.1 Python's Regular Expressions
6.2 Statement Expressions of Python
6.3 Loops in Python
CHAPTER 7: Python Functions and File Handling
7.1 Functions in Python

7.2 File Handling of Python
Chapter 8: Libraries in Python
8.1 Python General Libraries
8.2 Python Data Science Libraries
Chapter 9: Artificial Intelligence and Python
9.1 What is Artificial Intelligence?
9.2 What Is Machine Learning?
9.3 Role of Python programming in modern-day Artificial Intelligence
Conclusion

Introduction
Python is a well-known object-oriented high-level computer programming
language that is used globally by many software developers, game
developers, website developers, data scientists, and so on. Mr. Guido van
Rossum developed and structured this language in 1991, and Python
Software Company is responsible for its further development. Despite the
face, there were many OOP languages. The principal reason to build up
Python was to underscore code coherence and logical or numerical
processing, for instance, NumPy, SymPy, Orange, etc. Moving forward,
Python's syntax is short and straightforward. Python is an open-source,
object-oriented, and versatile language that supports a large number of
standard libraries.
Python is also well known for information science. Organizations
worldwide are using Python to collect bits of knowledge from their
information and addition a focused edge. In contrast to other Python
instructional exercises.
In this computer programming guide, you will be able to learn the basic
concepts of Python programming. It is a step-by-step python programming
guide, which makes sure the understanding of Python programming. First
of all, there is a need to know Python's sentence structure and syntax, along
with the basic expressions. Then, it guides the primary "Functions" such as
mathematical manipulation and Standard Library. Moreover, there is
complete guidance about operators and logical data, concepts of Arrays,
Pointers, Classes, and Strings in Python.
This specific guide is designed for beginners who want to learn Python's
fundamental concepts in a few days. You will find this language easy if you
develop your programs while reading this book.

Chapter 1: Getting Started with Python
We have to talk about the ABC programming language used in the early
1980s if we're talking about Python's origins. It was primarily the impact of
the ABC programming language that contributed to Python's growth and
rise, which is now one of the most popular programming languages of the
day.
In the early 1980s, Mr. Van Rossum, a computer engineer, and
mathematician used to work at Centrum Voor Wiskunde en Informatica as a
project coordinator of the programming language called ABC. Van Rossum
started searching for a new scripting language with a new syntax such as
ABC in the late 1900s while he was working on a new distributed operating
system called AMOEBA, which may access system calls from the ABC.
So, Van Rossum himself started to create a new simple programming
language that could solve the ABC programming language's shortcomings.
Finally, the first version of his programming language was eventually
released by Van Rossum in the early 1990s. Initially, the Modula-3 module
framework held his programming language. We call his programming
language, 'Python' today.
People commonly believe that the Python was named after a snake or
Serpent, and even the insignia of the Python shows two snakes in their
emblem, the first one the blue and the second one gold. But very few
among us know the real story behind the name of Python.
There was a very successful comedy TV show on the BBC in the 1970s
called Monty Python's Fly Circus. It happened that Van Rossum was a huge
fan of that show. So, after Monty Python's Fly Circus, Rossum called his
newly born language:
'Python'
1.1 Steps to Learn Python
One of the most essential programming structures and languages that every
developer should know in the modern world is Python. Most programmers
use this language to build websites, develop learning algorithms, and
perform other programming tasks. Firstly, learning Python can be daunting,
frustrating, and difficult, particularly if you are not sure how to approach
the tools and resources.

One of the biggest challenging things you might find is how alike all the
learning materials and resources are. Suppose you are interested in
understanding Python and writing it. In that case, you can see that before
you can even think about doing what interests you, any writing resource
needs you to spend a very long time on the syntax of Python.
This inconsistency has made learning Python very difficult for many
programmers. Experienced programmers also throw arguments like this one
at you, “Oh, man! It's too easy to learn Python!" They will even guarantee
you this often. But, in fact, even a few seemingly basic lines of code can be
unbelievably confusing. Why, for instance, even one line of code gets you
confused! In Python:
What does "django.http" mean!
Why are there parentheses in certain code lines?
When you do not know anything about Python, it can be very difficult to
understand how it functions together.
The initial problem here is that you need to understand the Python building
blocks to construct something interesting. The code snippet "django.http"
mentioned above uses the popular MVC architecture to create a website's
view, which is one of a website's key building blocks. If you are incapable
of writing the code to develop a view, it is not possible for you, after all, at
this stage, to create a dynamic website.
Most of the Python Programming tutorials and courses presume that you
will need to understand everything about the syntax of Python before you
can begin doing something. This results in wasting your time on the syntax
for months when what you really want to do is to analyze data, create a
website, or create an autonomous drone.
Typically, spending all the time studying the syntax results in the inspiration
slipping away. We would like to think of it here as a "boring wall." Several
tutorials and courses suggest you need to be prepared enough to scale the
"wall of boringness" to make it "the land of fascinating stuff you're going to
be working on," but, believe us, that's not the only way to learn Python!
One may find a process that works better for him or her after meeting that
"wall of boringness" a few times and walking away. He/she can, in
particular, find a way to combine simple learning with developing

interesting ideas and programs. In a way, he walks around the "block of
boringness" and goes directly up to the top. He should spend as little time
learning the fundamentals as possible, and then leap into doing things that
interest him immediately.
At this stage, we will show you step by step how to reproduce this process,
no matter why you want to learn Python. This all starts with finding your
inspiration!
•        Motivation
Before you start exploring and jumping into the world of Python, it is worth
asking yourself why you want to learn it, as it will be a long and often
frustrating journey to be a Python Developer. Without enough inspiration,
you're not going to make it through!
So! According to my, Motivation matters a lot, a lot more than you think!
Most people in high school and college sleep through programming
courses, where they have to memorize the syntax, they are not inspired. On
the other hand, when they need to use Python to create a website to
automatically produce essays, they stay working on finishing it for several
nights learning Python.
So, if we put it in a different way, we might argue that it's much easier to
learn more when we have a reason to learn.
Motivation will help you find the ultimate target and a path that will get you
to your target without being disappointed if you can figure out what
motivates you. You don't have a particular project to plan out. When you
are preparing to learn Python, you can choose a general field you are
interested in.
Many fields that may interest you are offered by Python. You can pick a
field in which you are interested, such as:
Data Science
Machine Learning
Artificial Intelligence
Smartphone Devices
Game Development
Hardware / Nano-Tech / Robotics / Sensors

Automation Scripts
One or more fields that you are more interested in and willing to pursue
may be selected. In your field of interest, you may concentrate your
learning and eventually develop projects in those fields.
•        Learning Syntax
Sadly, while learning Python, you can not skip this specific stage. Before
plunging deeper into your field of interest, you must learn the very basics of
Python syntax. I know that you want to spend as little time as possible on
this because it's not motivating or inspiring. I’m going to help you in
learning a few basics of Python syntax in this book.
•        Developing Projects
You can start making your own project designs once you have mastered the
basic syntax. A great way to learn is to create your own ideas because it
helps you to translate your experience into something useful. You should
note that it would be difficult to acquire more experience if you don't apply
your own ideas. Projects will develop your abilities and help you
understand and learn new concepts and help you build a portfolio to be
viewed by your future employers.
At this point, projects that are very free-form will be difficult.
You're going to get confused a lot, and you're going to have to go back to
the paperwork and read it. Because of this, it is typically easier to create
more formal projects until you feel secure enough to build projects fully
under your own management. In order for you to learn from them, most of
the tutorial websites or books have structured projects. It helps you to create
items that are interesting in the field you care about after editing these
projects a bit, thus keeping you from getting lost. Since you want to create a
game, or work in technology, or do something else, you may be interested
in Python. So, at the end of this programming guide, we are going to look at
the future of Python with respect to Artificial Intelligence.
•        Work, Work and Work
If all the above-mentioned stages have been completed, in Python
programming, you can keep increasing the variety and complexities of your
projects. If you're absolutely satisfied with what you're creating, it means
it's time for you to try something that's far more complicated and complex.

You may consider a new and tougher project or adding some difficulties to
your recent project, or maybe you may have a totally different kind of
challenge for your project. Hey! For this! You have to remember that a man
is made better just by practice!
To increase the difficulty of your tasks, the following are some suggestions
to ensure that you are really making progress in learning Python.
You can try to show a newbie how you have managed to develop
your idea. Nothing will help you understand a topic better than
teaching it!
You should think about the procedures that can increase your
project's capability.
You may consider focusing on your project's effectiveness.
You can suggest ways to make your interface more user-friendly.
You may consider ways to make your project public.
1.2 Basics of Python
Before you start writing your very first Python program, which is usually
known as "Hello World," you have to learn the fundamentals of Python
syntax. We'll talk about the fundamentals of Python programming and its
syntax at this point, which will certainly help you begin to create your
career as a Python developer. Now let's first compose the very fundamental
Python program.
Writing your First Python Software/Program
Python programs may be printed and compiled, usually in two different
forms.
•        Interactive Manner
A programmer can simply write and then normally compile a Python
program in the interactive manner of Python.
•        Scripting Manner
A programmer has to execute his Python program first in a scripting
manner, which is generally in a ".py" extension, which is already saved on
your computer.
Let's have a look upon both of them, practically.

Hello World! In Interactive Manner
You can enter the command below in the interactive mode of Python
programming in your Terminal to write your first program.
>>> $ Python
If you have entered this command on your terminal and execute it, you are
now in Python's interactive mode.
On the other hand, there's no need to type the above-mentioned command if
you are using an IDE to get yourself into Python's interactive mode. The
following is the Basic Python programming syntax for your first software
compilation. The first program is usually known as "Hello World!" but we'll
change the odds. We'll be writing our first, "Hello to the Universe of
Python!"
When you write your first program and press enter, your IDE should show
"Hello to the Universe of Python!" You should note that everything you
write "will be written on your IDE" in parentheses. It is Hello to the
Universe of Python! In our case.
Syntax:
>>> print ("Hello to the Universe of Python!”)
Output:
After compiling the above-mentioned command, you will see a text on your
execution screen, "Hello to the Universe of Python!"
Hello World! In Scripting Manner
Let's say you saved your “Hello to the Universe of Python!” The project as
a written program and as a Python file, i.e., '.py' file. Now you can look for
the ".py" extension file on your computer. Let’s say you saved your project
as “Hello to the Python.py,” and here's how your code functions in Python
scripting mode.
The project file you have written and saved must be usable and executable
at the beginning. Usually, this is typically achieved by programmers using
the command
>>> $ chmod +x test.py

Now, you can run and execute your software in Python's scripting mode if
your file is running and re-executable.
>>> $ Python Hello to the Python.py
You can see "Hello to the Universe of Python!" written on your computer
terminal or console until this command is terminated. You've mastered the
first Python syntax by running "Hello to the Universe of Python!"
Python Keywords and Identifiers
There is a total number of thirty-one keywords and five important
identifiers in Python Programming.
Identifiers and keywords are something you can quickly get accustomed to
when working on your programming skills in Python.
•        Python Identifiers
Usually, a Python Identifier is a function, a module, a vector, a class, or
something else. You assign a name to an object in Python programming,
and this is known as an identifier. Typically, either an uppercase letter (A-
Z), a lowercase letter (a-z), or an underscore (_) starts with a correct
identifier. These are usually accompanied by underscores, zeroes, letters, or
numbers (from 0 to 9).
There are five basic forms of identifiers in Python programming:
Functions
Modules
Classes
Variables
Objects
We should take a look at the keywords that are available in Python's syntax
to move forward.
•        Python Syntax Keywords Basics
You must open your IDE and enter the following command to see all thirty-
one keywords in Python.
Syntax
>>> import keyword
>>> keyword.kwlist

Output:
Your IDE will print this table of keywords when you enter these commands,
['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue',
'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if',
'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise',
'return', 'try', 'while', 'with', 'yield']
With any new version of Python, these keywords listed can change. Now,
when working with Python as a programming language, there are a few
more things that you should bear in mind.
There are set keywords, and we can't use them as our identifiers.
In Python, keywords are case sensitive. Usually
Keywords are called reserved words.
Python Statements
Before we go on with the basic concepts of Python Syntax, the very next
things you should bear in mind are Lines and Indentation.
In Python, the primary support for organizing the code blocks or modules is
indentation. In addition, it is rigidly implemented, making the Python code
legible, scan-able, and reviewable.
We must note that the space that goes with the indentation differs in each
case. We need to observe the following code to comprehend this.
>>> Person = ["David", "Jennifer", "Michael"]
>>> for n in person:
>>> if n == "David": print(n)
>>> else: print("Not David")
In the following code, you must remember that there is one space in the "for
the statement," i.e., indentation, and two spaces in the "if statement."
In Python, you end a sentence when you finish a line using a semicolon.
;
Going forward, you can also efficiently declare several statements in a
single line in Python. For instance,

>>> Person = "David Robertson" ; age = 25 ; location = "NYC"
Command Line Arguments
In "Hello to Python.py," and in an interactive manner, we simply used a
command-line claim. So, the best way is to introduce you to the arguments
of the command line. These are an integral part of the Python programming
syntax basics that you can read about.
How to Create a Virtual Environment
For any new project, Virtual Environments will be one of those things you
will make. In Python, without having to build new virtual Environments,
you can also work on new projects. Doing so, however, will suggest that
you would end up in a situation where
Dependencies may not be enhanced or optimized. For instance,
the default version of Python may not be updated (from 2.7 to
3.8).
You must go to your terminal and type the following command to create a
new virtual world.
>>> $virtualenv newevironment
This name of the concerned virtual environment we just created is
"newenvironment" in this command. Now, to open your new world, type
the following instructions.
>>> source newenvironment
Taking Input from the User
Two common types of Python syntax can be found that may request user
input.
•        Raw Input
In this manner, any of the programmers may invite a user to submit their
entries.
>>> raw_input ()
This is no longer accurate or valid in Python 3.0. The new input form,
instead, is input () .
•        Input ( )

We have to look at the mentioned example to grasp this concept.
>>> user_input_request = input ("Enter your worst Ex’s name: ")
After you enter this, your IDE will allow you to enter the name of your
worst Ex. My Bad!

Chapter 2: Python's Fundamental Attributes
We have almost as many programming languages as we can count on with our fingertips, so far.
There are so many programming languages, and each programming language of a computer has
its unique characteristics. These are the characteristics of a language that makes it distinctive
from others.
In the end, a language may be transferred or picked for more extensive projects due to the
characteristics of that language. So, in-depth, before starting the Python concepts, let us take a
look at the functionality, uniqueness, and applications of Python, etc. You will learn the basic
concepts, characteristics, applications, and architecture of Python in the following chapter,
which makes it unique and strong compared to many other languages.
2.1 Unique Features of Python
Let us start with some distinctive features of Python.
Easy to Understand and Code
We have to take it in a very different context when we are using the word "Simple" or "Easy" for
Python programming.
We've read earlier that the Python language is a high-level one. Mostly, with very few keywords
and identifiers, you might find Python's code the same as English. Any programmer or even a
non-programmer can say what this code will do by looking at the code.
Python, however, is dynamically typed, and this requires indentation. This function makes the
code of Python more stable and straightforward to comprehend.
Moreover, after writing our first program, we can tell that it's effortless to code in Python. We
may see that Python is more accessible to code compared to other programming languages. In a
very few hours, someone with programming background will learn Python's syntax.
However, it will take some time to become a master of Python programming with its principles,
modules, and packages. So, in other words, we might say that Python is a developer-friendly
language.
Open-Source and Free
First of all, you would like to know that Python is free, and on many platforms, it is available.
Its official website is the most credible source to download and install Python, i.e.
https:/www.python.org/
The second thing about this is that Python is a programming language that is Open-Source.
Open-Source ensures the public can access the source code of Python at any time. Even a non-
specialist can download, alter, use, and distribute Python. FLOSS is generally referred to as
"Free Libre and Open Source Software" for this kind of software or language. All Python
developers are working towards a common objective in the world of Python, i.e., the
enhancement of Python and its functionality. Python has made the source code an Open-Source
code for this.
High-Level Language
We have been discussing this argument from the beginning of our book that Python is a high-
level computer programming language.

You don't need to think about or recall your computer or device's design as a developer. Your
code, written in Python, can be used globally, any program, machine, or system. You won't care,
either, about the system's memory. This function makes it easier to write and code in Python. So,
we could call Python a "Developer-Friendly Language," as described earlier.
Portable Language
For your Windows OS-oriented computer, let's say you've built a Python program or app. Let's
presume you only want to run the program on a MAC OS-oriented computer. Now, you're not
going to need to make too many Python code improvisations.
You'll take your Python code from your Windows OS-oriented computer and run it on any MAC
OS machine. So, if you're using Python, you don't have to code for different tools or operating
systems differently. This Python feature makes our language, a supremely portable
programming language, very important. You have to keep just a thing in mind in this regard, and
you have to avoid any system-dependent function.
Interpreted Language
If you are already a C++ or Java developer or some other programming language or are familiar
with programming languages, you need to realize that you must first compile your code. It
would then be able to run or to carry out tasks. But, when you choose Python as your
programming language, your code doesn't need to be compiled initially. Python converts the
source code within the device into an immediate-type, known as a byte-code.
In other words, without worrying about connecting to the concerned libraries or any other big
thing, you have to run your source code, written in Python.
When your computer or unit reads your Python code, you can tell that the source code executes
every line on a separate line, and not all of the code at once. This Python function makes it
simpler to debug your Python code. On the other hand, it's true that translating makes Python a
bit slower than other languages, such as Java, but when compared to Python's benefits, it doesn't
matter.
Object-Oriented Paradigm enabled language
We are also addressing this argument from the beginning that Python can re-shape the real
world, and because of this, it is a programming language of the Object-Oriented Paradigm. An
OOP language focuses on objects and puts the data and its functions together.
Contrary to this, the functions are rotated for any procedure-oriented language; functions are
codes that can be used repeatedly. Python is a language that supports both procedure-oriented
programming and programming of object-oriented paradigms, and this feature makes Python the
most special programming language.
Moreover, Python is a language that supports multiple inheritances in a single document,
compared to Java.
Extensible Language
Let's assume you're a developer of some other programming language. You need to write Python
code to also use various commands in your Python code from other programming languages,
such as C++.
This Python feature makes it a programming language that is very extensible, which means that
it can be extended and expanded to include other programming languages in it.

Embedded Language
In the previous stage, we have addressed that code and commands from other languages can also
be accepted in our Python source code. You can also bring the Python code into source code in
some other programming languages, such as C++. This helps us to incorporate into our code the
scripting capabilities of other programming languages.
Larger Standard Library
With more comprehensive packages and libraries, you can download Python so that you don't
have to write the entire code for every single thing in your software. More comprehensive
libraries are available for commonly used phrases, for the identification of various generations
of documents, for testing units, for the creation of websites and web browsers, for threading, for
the development and maintenance of databases, for the Popular Gateway Interface, for the
development and maintenance of emails, for many forms of image manipulation, and many
other features.
Graphical User Interface Programming
Unless you create the Graphical User Interface (GUI), any application or software may not be
deemed user-friendly. Through your software's graphical user interface, any user using your
developed software can easily interact with your software. To improve the graphical user
interface of your program, apps, or applications, Python provides a range of libraries. Among
these features, wxPython, JPython, and Tkinter are the most popular. These toolkits are provided
by Python, and they allow you to create or grow the Interface of your program very easily and
quickly.
Dynamically Typed Language
A programming language that is typed dynamically is Python. This means that only at runtime,
your computer or system will determine the form for any value, not before that. In Python,
therefore, when defining or declaring it, we do not need to specify the data type.
2.2 Versions of Python
Phase – 1
Python developed and announced its first version, i.e., Python 1.0, in the first phase of Python in
January 1994. The functional programming tools such as reduce, philter, lambda, and map were
the key features that were implemented in this version. Python 1.2 was the last update that was
released when Mr. Van Rossum was still at CWI. This edition was published in 1995.
In 1995, Mr. Van Rossum worked at the Company for National Research Initiatives on his own
invented language, Python. He released several other versions of Python from there. Python
gained several new and unknown features of its own with the release of Python 1.4. Modula-3
was the most common among these features. To inspire keyword-arguments, Modula-3 was.
They also implemented a simple form of data hiding in Python 1.4 through the use of name
mangling.
Computer Programming for All, which is called CP4E, was also introduced by Van Rossum. His
goal was to make programming, with the requisite know-how of many computer programming
languages, available to laypeople. Python has played an essential role in this respect. The
explanation was that there is a simple and straightforward syntax for Python.

Python 1.6 was the next Python version. They launched a new CNRI license in Python 1.6. With
some bug fixes, Python 1.6 released another version of itself.
Phase – 2
In Python's second Phase, Python published its version of Python 2.0.0. In October 2000, it was
released. Python implemented list comprehension in this edition. This was a functionality
Python borrowed from the other languages of practical computer programming. Python then
implemented Python 2.1, which was similar to Python 1.6.1 and was closely aligned with
Python 2.0.0.0. In order to accommodate the nested scopes, the introduction of Python 2.1
implemented a fundamental change to allow it to compete with other statically scoped
programming languages.
Going on, Python 2.2 was the next version of Python. In 2001, Python 2.2 was released. Python
was able to implement a significant improvement in this version, unifying the categories of
Python, i.e., separate classes in a single hierarchy. This transition was the fundamental reason
why Python became the programming language of the object-oriented Paradigm. Python 2.5 was
the next Python version. In September 2006, Python released this version. Statements that we're
able to enclose any code block with a context manager were the required improvement in this
version.
Python 2.6.1 and Python 2.7.0 were the next versions released by Python during Phase-2.
Python 2.6 was created to support Python 3.0, and with the introduction of Python 3.0, there
were some bugs, alerts, and syntax errors that were debugged. Python 2.7 was, on the other
hand, released to support Python 3.1.
Phase – 3
Python released Python 3.0.0. In Phase – 3 of Python development. Often known as Py3K or
Python 3000, Python 3.0 is in 2008, Python 3000 was released. Besides, to overcome Python's
flaws, Py3K was developed.
Python 3.0 is called a language with a multi-paradigm. However, developers can still use it as a
standardized, functional, and object-oriented paradigm programming language as opposed to
other programming languages.
So we can assume that Python is constantly being modified with newer versions, supports, and
components after reading this. If you need to learn some more details about the Python versions
and their release dates, you could find this table helpful.
Python’s Version
Releasing Date
Python 1.1.0
January 1994
Python 1.5.1
December 1997
Python 1.6.1
September 2000
Python 2.0.
October, 2000
Python 2.0.1
April 2001
Python 2.2.3
December 2003

Python 2.3.7
July 2003
Python 2.4.6
November 2004
Python 2.5.6
September 2006
Python 2.6.9
October 2008
Python 2.7.17
July 2010
Python 3.0.1
December 2008
Python 3.1.5
June 2009
Python 3.2.6
February 2011
Python 3.3.7
September 2012
Python 3.4.10
March 2014
Python 3.5.9
September 2015
Python 3.6.10
December 2016
Python 3.7.6
June 2018
Python 3.8.1
October 2019
Python 3.9.0 Alpha 1
May 2020 (Expected Date)
2.3 Applications of Python
Python is an open-source and a commonly used programming language for computers
considered to be most useful, distinguishing it from other programming languages. In several
ways, Python as a language can be used in any computer programming discipline.
Web Application Development
To build many kinds of web applications, you can use Python. To develop and manage websites
and web applications, Python provides you with several libraries. Email Handling, lovely soup,
demand, JSON, XML, HTML, and many others, for example. Besides, Python provides you
with many built-in frameworks to manage and build software and web applications, such as
Pyramid, Flask, Django (we spoke about this in chapter – 1), and many more.
Desktop Graphical User Interface Applications
To build a user interface for Python-based programs, Python provides you with several graphical
user interface libraries. Kivy and wxWidgets are some of the tools and applications in this
respect. In several developmental stages, you can use these resources. Keep in mind that Kivy is
commonly used to create multi-touch applications.
Software Development
To advance computer programming procedures, you can use Python. Python serves as a
supporting language and can be used for software testing, control fabrication, and board testing.

Scientific and Numeric Usage
Python is a mainstream language that is widely used to describe logical, numerical issues. You
could find many Python bundles and Python libraries useful in this regard, such as IPython,
Pandas, SciPy, etc.
Business Applications Usage
For the development and maintenance of any business software or application, many developers
use Python.
Moreover, Python is used by many developers to maintain their e-commerce websites.
Console Based Application
Console-based applications can be built using Python. You can, for example, use IPython to
build various support-based applications.
Audio or Video-based Application Programming
Python is a fantastic language for doing several tasks based on video or audio. To build various
kinds of media applications, many developers use Python. You can use a Python function,
known as cplay, for this.
3D based Computer-Aided Drafting Applications
To build and develop 3D based computer-aided drafting applications, many Python developers
use Python. Fandango is a beneficial Python-based framework for creating specific applications
that allow you to view full CAD highlights.
Enterprise Applications
Python is used by many Python developers to build many applications that can be used within a
company or in an enterprise. Tryton and Picalo are the most well-known applications in this
regard.
2.4 Installing Python
You can visit the mentioned website in order to download and install Python on your Windows.
https://www.python.org
Installation on Windows
This will allow you to download the new Python-released update. If you're using this process,
the website mentioned above will redirect you to a new window where you may find a list of
several Python versions, as described earlier. You can download the new Python version from
there, i.e., Python 3.8.1. Now, everything you have to do is to download and install the latest
Python update and save it. Double click on the executable file after downloading and saving it.
A new window will open after this. Only click on the "Customize Configuration" button and let
your device install it automatically.
A new window will pop up after that, displaying all the optional Python features. All the
optional features need to be enabled, and you have to pick or check them all. Click on the Next
button after this to begin the process.
With the advanced options for downloading Python, a new window will pop open. You only
need to check the "pick everything" button for a better installation, and then you have to press
the "Next" button.

After you press the 'Next' button, Python 3.8.1 will download the program on your computer.
You have to run Python on the CMD of your framework after installation, aka. Command
Prompt. Only write the following command in your command prompt to check if Python is
installed correctly.
>>> python;
Your command prompt can display an error when you press enter. This generally occurs because
the Python route has not been set correctly.
Now, you just have to go to your desktop to set the Python path correctly, right-click on "My
PC" and go to "Properties." After choosing properties, go to "Advanced" and then proceed to
"World Variables." You can see that in the user variable portion, a new path will be added. You
can set the Python path in your "World Variables" as the variable name and the Python
installation directory. You can now execute Python on your local station when the Python path is
set.
Now, just reset the prompt for your order and retype the following command.
>>> python;
Eventually! The Python interpreter opens where the Python commands and statements will
begin to be written and executed.
Installation on MAC
Python 2.7 is built-in by Apple itself for Mac OS X 10.8. You can download this by visiting the
website if you want to install the Python version.
https:/www.python.org
You can get the new Python update and many of its components from this website. For this, the
Python package must be downloaded from the website concerned.
After installing the kit, a folder with the name "Python 3.8.1" will be downloaded to your
"Application Folder." You will find the Python development environment here, i.e., IDLE.
A module, known as the Python Module, can also be downloaded from your device. This
framework typically has various Python programming libraries and several other executable
files.

Chapter 3: Compilers, Text Editors, and IDEs
The Python compilers, IDEs, and Text Editors play a vital role in Python
programming. Like other programming languages, there are many
applications, compilers, and text editors we can use to compile Python's
syntax in a very simplified manner. We'll be studying compilers, text
editors, and IDEs in this chapter.
3.1 Compilers for Python
If you have a programming background, you need to know that a compiler
is an application for a code translator or a simple software that converts
your written code to machine language from a high-level computer
programming language, so your computer can understand this. Many
compilers, with their own specific computer programming language
conversion systems, are available for Python. These compilers are used by
many programmers to debug their programs or to make their code
executable or create algorithms for their programs.
PyCharm is one of the best IDEs that most Python programmers prefer
when it comes to Python programming.
In this portion of the book, we are going to discuss some of the best
compilers.
The NUITKA Compiler
NUITKA is a very well-known Python compiler to compile and execute
your code. NUITKA takes your code written in Python as input and
compiles and executes it; it transforms your code to C. On almost every OS
and every platform, you can access NUITKA. NUITKA is regularly
updated, and Windows, MAC, UNIX, and other operating systems are
becoming very user-friendly.
Another feature of NUITKA is that you can code on it without having
installed Python on your workstation.
NUITKA is a Python-based compiler that does not, in general, support any
other languages. So, for Python development, it has different features and
libraries available. NUITKA is also used by developers to develop Artificial
Intelligence and Information Sciences programs.
The PYJS Compiler

A compiler that is used by many professional programmers and software
development companies in the PYJS compiler for Python. It is a compiler
of a different kind. Its most well-known feature is that it converts JavaScript
to your Python code. Because of its distinctive character for web programs,
most website developers prefer this compiler.
When we talk about the unique feature that PYJS offers, PYJS provides
code with runtime support. That's why web developers mostly recommend
it for web-based applications and programs. It supports those hoping to
write their code in Python and directly run it on their web browsers. PYJS
also interprets your Python code as a debugged JavaScript code that can be
executed and run on your desired internet browser.
Moving forward, a very lightweight compiler is PYJS. Besides, PYJS also
provides Runtime support for runtime blunders to be debugged.
The SKULPT Compiler
In your web browser, the SKULPT compiler also executes the written
Python code directly. Your Python code is made more executable. In a blog
on a website page, SKULPT has recently been introduced. To convert your
Python code to HTML, SKULPT can also be used. Your code can also be
compiled with a JavaScript structure for your web browser.
You don't need any additional modules, files, or server settings to run
Python in your web browser, because we have discussed that SKULPT is a
program used by Python. Every Python code that is written in SKULPT will
be executed directly from your web browser.
Many web engineers and web developers want to develop certain web-
based applications that can allow users to directly execute Python programs
on an internet browser and use SKULPT.
The BRYTHON Compiler
One of the compilers for Python is considered to be BRYTHON. Also, it
converts your Python code to JavaScript code. This compiler has some
unique features that, as a third-party editor, can transform your code and
program to achieve exceptional results in the least amount of time. Besides,
for many of the modules with CPython support, this compiler provides live
assistance. The thing to remember is that this compiler also supports many
other languages and their newer versions. For user-side, web-based

programming, BRYTHON is most often used. This compiler is a Python
browser compression package.
Moving forward, you can also use BRYTHON in Python for 3D-based
application development.
The Shed Skin Compiler
The Shed Skin compiler for Python programming is the next one on the list.
The primary feature of this compiler is that it changes a C++ program to
your Python-oriented code. The only drawback of the Shed Skin compiler is
that many normal bugs and problems are not provided with live help. In
addition, very few Python libraries and modules are supported.
The Shed Skin compiler is used by most Python developers to extract their
statically written python code in order to obtain the revised C and C++
code. You may find the Shed Skin compiler useful because the basic display
support is provided by this compiler.
3.2 Python Text Editors
Sublime Text
For Python programming, one of the best-known text editors for Python
programming is the sublime text editor. It is full of the finest features a text
editor can have. Basically, this text editor was developed in the
programming language C++, but you can use it to support Python as well.
Many programming languages are eligible to support its updated version.
Jon Skinner was the one who created it, and, in mid-2007, it approached the
market. He followed these three basic rules to develop this text editor. Its
content is not hidden by the windows.
It uses all the available space on your screen anywhere that could sensibly
be normal, as full-screen use makes it easy to edit better.
One of the key points he kept in mind was the irrelevant and discreet
interface. You have the option to prioritize content in this tool, and multiple
tools can be avoided.
Key Advantages :
It is fast and has a minimal number of bugs.
It is capable of opening huge documents.

It supports many languages of programming and their dialects.
GNU/EMACS Text Editor
It is a GNU Text Editor that is highly recommended by many developers.
This text editor was developed by Richard Stallman and, for over twenty
years, has remained the most popular text editor among software developers
and programming professionals. The owner of this text editor, Mr. Richard
Stallman, made it cost-free for every user.
In many computer programming languages, the GNU/EMACS text editor
mostly uses unique customizations for a progressive approach.
An extension that is used by this text editor is the Elpy extension. There are
many features in this text editor that separate it from other text editors. For
instance, it provides a sentence structure that separates record segments and
spaces in an archive between the texts to have the best formation.
Key Advantages :
It is cost-free and provides a programming environment that is
totally movable.
It provides for the automatic expansion of segments required for
the record structure.
It supports various operating systems that have a 24-bit color
scheme.
3.3 IDEs of Python
You may use an IDE, which is known as the Integrated Development
Environment, for Python Development. An IDE is usually used for these
purposes.
It is possible to use an IDE to deal with code.
You can run, develop, debug, or manufacture your code,
compiler, or apparatus using IDEs.
The IDE can control the code and compilers' scripts and sources.
A greater number of programming formats are provided by most of the
IDEs, and they contain many particular highlights. However, in order to use
IDEs properly, you will require information.

IDE stands for Environment for Incorporated Development. An IDE is
regarded as a coding tool or device that helps mechanize an SDLC's marvel
of assembling, testing, altering, and in many other ways. In addition, it
provides a path for a developer to execute, create, and compile his code.
Down-mentioned is a list of some of the Python IDEs that are best known.
PyCharm
Spyder
PyDev
Atom
Wing
JUPYTER Notebook
Thonny
Visual Studio for Microsoft
Eric Python
The PYCHARM IDE
The PYCHARM IDE
PYCHARM, i.e., cross-stage Integrated Development Environment, is a
cross-stage IDE. Ideally, this tool is intended for Python. PYCHARM is the
most widely used device worldwide, and it is available in both forms; in
paid form as well as free, open-source form. When dealing with your
everyday work, PYCHARM saves too much of your time.
Moving forward, for Python, PYCHARM is a very useful IDE. It offers you
many special features such as brisk venture route, the fruition of auto code,
support for remote advancement, quick checking and remedying errors,
database, and many more.
Special Characteristics :
Effective debugging
It provides an efficient path to code
Massively highlights errors
The SPYDER IDE
The SPYDER IDE for data science developers is the best IDE for them. It is
an IDE that is open source. "Scientific Python Development Environment"

is the full form of SPYDER. SPYDER is compatible with Windows OS,
MAC OS X, and LINUX OS-oriented machines. SPYDER typically
involves the dispersion of the Anaconda bundle director, so you can rely on
your own.
The intriguing fact about SPYDER is that it is used to target the interest
groups of data scientists using Python. With standard Python information
science libraries such as Matplotlib, SciPy, and NumPy, SPYDER
coordinates well.
You can imagine that SPYDER has a vast number of basic IDE functions.
SPYDER, for example, is a Python code manager that has a durable
language structure feature. In addition, it includes Python code fulfillment,
and it is even an IDP, i.e., Incorporated Documentation Program.
Another element that you may not see in other Python IDEs is that
SPYDER contains a "variable voyager," moving forward. It allows you to
display information inside your IDE while using a table-based design.
Special Characteristics :
Integrated IPython
Syntax of proper quality
The PYDEV IDE
The PYDEV IDE is one of the world's highly-demanded Python IDEs.
They prefer PYDEV for so many reasons, as far as the developers of
Python are concerned. PYDEV has a feature that includes a combination of
"django," shrewd indents, fruition and square indents of programmed code,
and many more.
Windows OS, MAC OS X, and Linux OS-oriented machines make PYDEV
accessible. We may also consider PYDEV as the accepted open-source IDE
for advancement based on Java. A commercial center for additional and
expansion items is included. This function makes PYDEV useful for a wide
range of improvements and workouts.
Special Characteristics :
Combination of PyLint, remote debugger, joining of the unit test.
Inspection and verification code.

The Atom IDE
Atom IDE is Python's most popular IDE, developed by GitHub. It is an
open-source IDE and cross-platform.
In Atom IDE, step-by-step, the original and instructional exercises brief you
all about the functions of the IDE concerned. A coordinated development
technique allows you to start working between two different platforms in a
highly integrated manner. That is why Atom IDE is highly recommended
during the execution of live programs for cross-platform program
management and effective and efficient editing for your Python code.
Also, Atom IE has a drawback. The developers consider it the least secure
tool, using Atom IDE. But, for amateurs and beginners, it is viewed as the
best tool. Apart from its advantages and disadvantages, however, Atom IDE
is one of the best information science tools that allow you to work with
high-level computer programming languages.
Special Characteristics :
It has a Markdown Preview Plus module.
In runtime windows, it shows the results.
The Wing IDE
Firstly, Wing IDE is free and open-source. It has a few highlights in it that
may allow for auto-fulfillment, investigation, and indents in the syntax
structure.
It also has a paid version, labeled as Wing Pro. The benefit of using Wing
Pro is that it supplies your Python code with debugging, highlights, and
many more.
Special Characteristics :
Alongside the unit test, it supports remote progress, test-driven
enhancement.
It is customizable, and it can also have extensions.
Jupyter Notebook IDE
Jupyter IDE is an IDE developed for the structure of the server-client. For
your Python-based program, it allows you to create and control notepad

reports. In October 2014, the Jupyter notebook was released for IPython. It
is a web application that relies on the structure of the server-client, and it
also allows you to create, customize, and control the reports made on the
Scratch Pad or Notepad.
Nevertheless, Jupyter Notebook proves to be a fundamental part of the
toolbox of every Python data researcher. It is outstanding for prototype
development and is also useful for imparting a representable form of the
scratchpad.
Special Characteristics :
Your code can be generated and easily altered in this IDE.
A feature for supporting markdowns is provided by Jupyter
notebooks.
This IDE is ideal for data science beginners.
Thonny IDE
If you are a Python programming beginner and want to learn and master the
programming language of Python, Thonny IDE is one of the best ways to
do so. The most used IDE by Python beginners is Thonny IDE and is
considered to be the easiest IDE to understand. For the Python data science
community, it has a very common and simple development environment.
Special Characteristics :
Debugging is really easy and straightforward in this IDE
The auto code finishing feature, along with debugging errors, is
included in the Thonny IDE
Microsoft Visual Studio IDE
For investigating and improvising web-based activities, Microsoft Visual
Studio IDE is the most appropriate IDE. This IDE is a generator of open
source code, and it has its own market. In addition, Microsoft is responsible
for creating this IDE.
Special Characteristics :
In the visual studio environment, this IDE allows you to code in
Python, which is a very distinctive feature of this IDE.

This IDE is available in both forms, both paid and free forms.
3.4 Why IDEs and Code Editors!
It raises the question! Why do developers need an IDE or a Code Editorial
Manager?
In general! You can give directions to a terminal by using a code editorial
manager or an IDE to allow you to run your code and projects.
We must mention that you may be disappointed by adopting the same
process for huge codes and long programming tasks. Mostly, if you don't
know how to use the direct line translator applications, it will disappoint
you.
Moving forward, programming or coding can be made easier, easier to
understand, and a fun thing by using an IDE. Basically, IDEs are devices or
tools that enable you to write, test, perform, troubleshoot, debug, compile,
and run your code. The best approach for beginners for speedy work is
IDEs and code editor applications. These IDEs can provide auto-finishing
of code and can allow you to understand the structure of the sentence and
syntax.

Chapter 4: Comparison of Python with other
Programming Languages
Python is commonly contrasted with other languages in high-level
computer programming and their dialects. We will address the comparison
of Python with other major computer programming languages and dialects
in this chapter. This relationship and association between Python and other
programming languages would inspire us to prefer Python over other
programming languages. Because of this comparison, you will be able to
understand that other certifiable high-level computer programming
languages commonly guide Python. We recognize that these points are
exceptional variables, but you can learn to use various computer
programming languages when using Python. This relationship and
correlation are essential because of this.
4.1 Python and C++
Both Python and C++ (C plus plus) are the computer programming
languages with their own dialects. Both are used for broadly useful
purposes. You have to remember that both Python's dialect and C++ dialects
vary from each other with respect to many points of view. C++ is the
advanced form of the language C with many useful updates and upgrades.
A specialty of C++ is that it provides the component of gathering the data
and uses it into one class.
On the other hand, Python's dialect is globally useful and is one of the most
high-level computer and software programming dialects. In Python, we may
utilize a variable straightforwardly and clearly without declaring and
describing it while writing a program's code.
As far as C++ is concerned, in C++, any code or program requires to be
called on each and every working framework on which your code is to be
run.
In this regard, Python allows you to "write once - run at anyplace and
platform." This feature provides uniqueness to Python to keep executing on
each and every working framework. You just have to introduce Python to
that framework.

C++ is inclined towards memory spills. This means that it doesn't provide
you trash gathering. Furthermore, C++ uses pointers to a very high level of
degree.
Python provides you an inbuilt trash accumulation. Moreover, it gives a
dynamic memory portion process, which offers an opportunity to proficient
memory to utilize the board.
Moving forward, nowadays, C++ is mostly used for planning equipment
and to develop embedded projects. This concept was first introduced with
the upgraded version of C++, which developed the idea of structured
programming and introduced the idea of embedded systems and C++ use in
them.
In this regard, you may say that the Python is mostly used as a scripting
language, and in many cases, you may use Python for non-scripting reasons
as well. You have to keep in mind that Python possesses an independent
executable application, including the assistance of some of the instruments
that provide you an opportunity for non-scripting programming as well.
4.2 Python and C#
We know Python was first implemented in order to look like the language
of English. These more extensive numbers of articulations in Python are a
little difficult to peruse. In this regard, in particular, you can use suitable
variable names. In addition, in Python, there are no entangled innovations
due to the simple grammatical syntax. For instance, various word-
modifiers, C and C++ syntactic sections such as a development framework,
and several other methods to add many factors. You will claim that
everything makes Python's code simple to understand, learn, and write in
this respect.
C # (C-sharp) is parallel to this. C # has inherited a lot of ideas from C++,
JavaScript, and Java because of language inheritance. In the "C-type"
sentence form, these definitions are used first. The C # language structure
dialect often makes it necessary to stick to particular requirements when
checking your language techniques or gaining courses, most of which are
accompanied by other groups of programmers and programming experts.
The code dialects, which must be enclosed in parentheses or props, should
not be overlooked. Python does not hold any of this, unlike C #. A

particular sort of shift is used by Python, which helps the code to look
perfect.
Moreover, as far as the material composition is concerned, referencing any
project is often worthwhile. Python claims that content is just content, so
you can simply document it with your code that a compiler, IDE, or text
editor can effectively execute. You can open them up and begin working
with your chosen boss. And you can efficiently run it once again right after
that. For this, you would be in a mostly favorable position if there is no
compiler or IDE nearby. It will also be rapid to compile cross-stage and
cross-platform content by using Python as a programming model. On
another platform or stage, you would not need to recompile it.
You should know that C # needs an IDE for a traditional programming code
to be written, compiled, and executed. As one or more of C #, when you
create content for Windows OS, it has very substantial assistance for
various Windows OS-oriented system versions. Let's say you have to work
on multiple devices so that you can work with their libraries, WMI, WMI,
etc. C # also allows you to use "WinForms." If it needs all things taken into
account, it makes C # incredibly easy to build a graphical user interface.
You may ask, maybe, which language is better! C # or Python! Such an
answer does not exist!
Both of the languages have their advantages and disadvantages, pros and
cons, but it is easier to learn and comprehend Python. In comparison,
relative to C #, Python has a more substantial number of open-source
libraries. However, you can claim that C #'s basic library is superior and
much better compared to Python's. In addition, like a programming model,
you must keep in mind that C # is more highlighted language, and the
presentation it has is advanced, much higher, and faster compared to
Python.
4.3 Python and Java
Compare the speed of execution of Java programs to the speed of Python!
Java programs have a higher speed of execution than Python programs. In
Python, however, it takes less effort to create programs as Python's code is
straightforward and comparatively basic. Working at various levels and data
types is simple in Python. In Python, for instance, it does not attempt to

gather time when you analyze the articulation. Python produces a suitable
expansion operation at that moment, which is a total output number.
It would be best to consider Python a fully enhanced language, whereas
Java is considered a low-level execution language by most developers. In
addition, both Python and Java form an exceptional relationship together.
Most Python segments can be used in Java programming and can be used to
form the sentence structure in Python after being combined with Java
codes. On the other hand, Python can be used in Java programming to build
and structure the components such that the Python structure can be used.
Another work in progress is a Python sentence structure written in Java to
support this kind of inheritance and development, which allows calling the
Python code when programming in Java and the other way around. Python's
source code is used as a Java byte-code for such execution.
You already know that Java is known as a carefully embodied language if
you have a programming background. This means that you can
unambiguously proclaim the variable names in Java. We have another
language, on the other hand, which is increasingly composed; Python. No
affirmation is required in Python programming. There are several questions
regarding the most efficient and calculated composition in different syntax
and dialects of programming. But, one of its ideas is to be remembered.
With the clearest sentence structure, Python is a widely adaptable computer
programming language. This makes Python an exceptional programming
language for content composition and the steady development of different
applications for many fields.
In addition, Java also allows you to create cross-stage and cross-platform
applications, while Python is ideal for all cutting-edge working frameworks
to develop. So, you might say that for tenderfoots compared with Python;
Java is so much more complex.
In addition, it actually makes the code simpler if we use Java with Python.
It's easier to use Java as a programming model when you want your code to
run from some other platform. As your programming mode, the additional
advantage of using Java is that it helps you create structured applications
while Python cannot function in this way.
Going forward, Java is so much more complex than Python as a language.
Suppose you do not have any advanced Java learning tools. It will not be

easy to comprehend! Again, in different extreme situations, Java is used to
program and solve certain programming problems; only Java can assist you.
4.4 Python and PHP
PHP is a web-situated and web-oriented computer programming language,
from a developmental and improvised perspective. A PHP application is
very similar to a lot of individual contents that maybe with a solitary
semantic section or point.
Once again, Python is a completely adaptable language that can also be
used for the development of web-based applications. A web application is
relying on an undeniable application stacked in the memory with its inner
state in Python. To choose between PHP and Python for web-based
application creation, we have to concentrate on these two qualities.
•        Python and PHP for Website correlation Enhancement
Prevalence and patterns mean a great deal these days of computer
programming. The most common and promoted innovations for their items
need to be used by all consumers and item owners. In such a case, without
any clients and occupations, you can be shown as a talented programmer,
just by using your imagination.
•        Frameworks
While picking up your project, your machine, instrument, and device range
is 
also 
critical. 
It 
characterizes 
the 
project's 
consistency,
straightforwardness, readability, understandability, and accommodation. For
different activities, there is a possibility that a project provides several
frameworks. Without any system, a software or web developer should be
confident that he won't need to do anything. These frameworks will allow
you to create apps that are awesome and excellent.
Again, not so many frameworks are available for Python. Django and Flask
are the most used frameworks for web-based application creation. But we
may assure you that this will soon change due to Python's network growth
and upcoming frameworks.

Chapter 5: Data Types, Operators, and Variables in Python
Programming
The fundamental concepts of Python are data types, variables, and operators, which are
considered to be the fundamental building blocks of this high-level computer programming
language as a programming language. Usually, we use them to program our projects and,
through their features, to achieve the necessary results. Among these concepts, data types are the
most important concept, and no one can grasp the programming of Python without having
control over these fundamental concepts. As a computer programming language, we will
address some essential variables, operators, and data types of Python in this chapter.
5.1 Variables of Python
Another name for Python identifiers is Variable. A variable is a term used to mean a machine or
device's memory zone. You don't need to determine these kinds of variables in Python, as
Python is a kind of programming language that infers and is astute enough to sort its variables.
In addition, we can say that the Python Variables are memory locations that have different types
of data, such as integers or characters. In Python, variables are just changeable and manipulate-
able because they use a set of different operations.
In any event, to get initialized, variables need a letter or an underscore. The use of lower-case
letters as variable names is suggested. Both are exceptional elements in Python, Sledge, and
Mallet.
Naming Variables or Identifiers
The circumstances of identifiers are factors. To conceive the literal coefficients and the integers
used in your program, a variable is used. For Python, below are the standards for naming a
variable.
A letter or an underscore "_" must be the essential character of an identifier.
In addition to the important characters, each of the characters can be a letter
arranged by "a-z," "A-Z," underscores, or "0-9" digits in the lower case.
The name of a variable must not contain any void or empty region, or any unique or
uncommon characters, such as"! @, #, percent, ^, and, *.
The name of a variable must not resemble any catchphrase portrayed in the syntax
of your Python program.
In Python, variables are case sensitive. I'm cool, for instance, and cool isn't
proportionate.
Instances of significant identifiers: n696, v, v 69, etc.
Non-valid identifier instances: 5a, v percent 69, x69, etc.
Multiple Tasks
In a single description, which is commonly called different assignments, Python helps one to
retain an opportunity for different identifiers. It can be used in two alternative ways either by
declaring at the same time a lonely incentive for multiple identifiers or by relegating different
characteristics to multiple variables at different times.
Example - 1 :

Open the Python console or IDE and write the command to declare variables.
>>> n=v=w=987
>>> print
>>> print (n, v, w)
Output :
When you type the command to print the value of variables, the output will be something like
this.
>>> 987, 987, 987
>>>
Example – 2 :
>>> n, v, w = 987, 876, 765
>>> print
>>> print (n)
>>> print (v)
>>> print (w)
Output :
For output, when you will type your command
>>> print (n)
Your console will print
"987"
When you will type your command
>>> print (v)
Your console will print
"876"
When you will type your command
>>> print (w)
Your console will print
"765"
5.2 Operators in Python
In general, operators are syntactic tokens unique to the language that require some action to be
carried out. Operators are derived primarily from the principles of mathematics. For example,
"Sign of Multiplication (*)" is a Python programming operator. It is used for two numbers to be
multiplied.
In Python, operators are represented as a symbolic representation of a function that, in order to
achieve some real and desired results, does a specific act between two operands. Operators are
regarded in an individual computer programming language as the cornerstones of software on

which your software operates. The selection of operators provided by Python is represented as a
pursuit. To execute basic operations, here are some widely used operators:
Arithmetic Operators
Comparison Operators
Assignment Operators
Logical Operators
Bitwise Operators
Membership Operators
Identity Operators
In this segment of the book, we are going to discuss some of the operators mentioned above.
Arithmetic Operators
To get the desired results, arithmetic operators are used to performing complex arithmetic
operations. Two operands are taken in this case, and operation is carried out between them
through an operator, resulting in some desired, unique, and absolute value.
Here are some of the arithmetic operators that are widely used in Python and are important and
useful.
Addition "+"
Subtraction "-"
Division "/"
Multiplication "*"
Remainder "%"
A definition of these operators in detail:
Addition "+"
This operator is used between two operands to execute the addition or sum operation.
Example Given :
>>> n, v = 25, 25
>>> n + v
Your console will print
“50”
In this case.
Subtraction "-"
The first operand is taken by this operator, and the second operand is subtracted from the first
one.
Example Given :
>>> n, v = 25, 25
>>> n - v
Your console will print

“0”
In this case.
Division "/"
This operand takes the second operand and splits the second operand into the first operand, and,
as your performance, gives quotient.
Example Given :
>>> n, v = 6, 2
>>> n / v
Your console will print
“3.0”
In this case.
Multiplication "*"
This operator performs the multiplication operation between the first operand and the second, as
described earlier.
Example Given :
>>> n, v = 6, 3
>>> n * v
Your console will print
“18”
In this case.
Remainder "%"
This operator is responsible for the division's service, and it receives the rest as your production.
Example Given :
>>> c, w = 4, 2
>>> c % w
Your console will print
“0”
In this case.
Comparison Operator of Python
When we talk about Python, comparison operators are used to comparing two operands and
return, respectively, a Boolean sort, i.e., TRUE or FALSE.
==
Real: If and only if the values are logically equal and valid, this operator is used.
!=

Real: When the values are accurate but unequal, this operator is used.
<=
True: When the first operand is smaller than or equal to the second operand, this operator is
used.
>=
True: When your first operand is greater than or equal to the second operand, this operator is
used.
< >
True: If, and only if both the values are not equal, this operator is used.
>   
True: When your first operand is greater than the second operand, this operator is used.
<   
True: This operator is used if the first operand is smaller than the second operand.
Assignment Operators of Python
In Python, we use assignment operators to assign the value of the right-hand expression to the
left-hand operand.
=
This operator is commonly used to assign the value of the left operand to the right expression.
+ =
By estimating the correct operand, this operator is used to construct the estimate of the left
operand and designate the altered an opportunity back to the left operand.
Example Given :
>>> n = 2, v = 4
>>> n += v
This will be equivalent to
>>> n = n + v
>>> print (n)
And your console may print the value if n
"6"
-=
As far as this operator is concerned, the estimate of the left operand is decreased by the estimate
of the right operand, and the altered incentive is given back to the left operand.
Example Given :

>>> n, v = 4, 2
>>> n -= v
This will be equivalent to
n = n - v
>>>print (n)
And your console may print
"2"
* =
By estimating the correct operand, it raises the estimate of the left operand and appoints the
adjusted reward back to the left operand.
Example Given :
>>> n, v = 4 , 2
>>> a * = b
This will be equivalent to
n = n * v
>>> print (n)
And your console may print the value if n
"8"
%=
This operator is responsible for dividing the left operand's calculation by that of the right
operand and appointing the update back to the left operand.
Example Given :
>>> n, v = 4 , 2
>>> a % = b
This will be equivalent to
n = n % v
>>> print (n)
And your console may print the value if n
“0”
Logical Operators in Python
We also have to make difficult decisions based on rational facts, i.e., true or false, as far as our
real lives are concerned. Let's say, for instance, if someone calls you and asks you, "Are you at
home?" You'd have two options, "Yes! I'm home" or "No! I'm not." In programming, this would
be under 0 (false) and 1 (true). This is regarded as data that is reasonable.
In Python, to achieve such unique options, logical operators are used to testing the expressions.
These operators are extremely useful for the rational writing of any logic. To develop a better

understanding of these operators in Python, here is a list of logical operators with a short
description.
And Operator
If the expression 'C' is valid, and the expression 'W' is also true, then the result is correct. The
outcome would be wrong in any other event.
This table can help you to better understand "And operator."
C
W
C and W
True
True
True
True
Talse
False
False
True
False
False
False
False
Or Operator
This will lead to false, if and only if both operands are false and false. Assuming an expression
"C" is true, and another expression "W" is false, then the result will be valid/True.
This table can help you to better understand "Or Operator."
C
W
C or W
True
True
True
True
False
True
False
True
True
False
False
False
5.3 Data Types in Python
A data form specifies a set of operations and values which can be applied to the values
concerned. For example, since it has two different values, a switch of a light bulb can be
compared to a computer system; True since on and False as off. Since only these two values are
included in the bulb switch, we may consider its size to be two. With a bulb turn, there are only
two operations that can be done:
We may toggle it on
We may turn it off
Factors in Python can carry estimates of different types of data. Python is a computer
programming language increasingly composed, so. Therefore, when declaring and describing
them, we do not need to describe the form of all the variables. The variables bind the incentive
to their type.

In addition, Python allows its developers to verify the variable type that is used in the software.
Python gives us the "kind)" (structure, which returns the variable type that is transferred. To
characterize the forms of various data types and to verify their type, you can consider the
accompanying guide.
Example Given :
>>> C = 69
>>> W = "Hi Python"
>>> K = 17.5
>>> print ( type (C));
>>> print ( type (W));
>>> print ( type (K));
Output :
When you will type the command
>>> print ( type (C));
Your console will print
<type 'int'>
When you will type the command
>>> print ( type (W));
Your console will print
<type 'str'>
When you will type the command
>>> print ( type (K));
Your console will print
<type 'float'>
Standard Data Types
Identifiers in Python can withstand different kinds of qualities. For example, the name of any
person must be put away as a string, while his Id must be put away as a whole number.
Python provides us with various standard data types that define each of them by the power
technique. The types of data types usually used that are characterized in Python are named
below.
Numbers
String
List
Tuple
Dictionary
We're now going to clarify some of them with the following examples.
Numbers

Digit, as the data type, stores the numeric values in Python. Whenever a number is assigned to a
variable or identifier, Python produces a numeric entity.
Example Given :
>>> C = 79
>>> W = 06
In the above-mentioned example, c and w are the numeric objects
Four different types of numeric data are supported by the Python
Integer (int)
Long Integer (long)
Float (float)
Complex
String
In Python, a string can be defined as a sequence of characters represented by quotation marks.
Moreover, to describe a series, single, double, or triple quotes may be used.
The handling of strings is an easy, understandable, and very clear task since Python provides
several in-built functions and operators to perform this task. The operator "+" is used for string
handling in Python to concatenate two strings as the process
"Hello" + "Mr. David Robertson"
Returns,
"Hello Mr. David Robertson"
Moreover, the operator "*" is commonly known as a repetition operator as the operation
"Object" * 2
Returns,
"Object Object"
You may understand string handling in Python, with the help of the following example
Example Given :
>>> string1 = "Hi Mr. David Robertson"
>>> string2 = “How are you”
>>> print (string1 [0:2]) #printing first two character using slice operator
>>> print (string1 [4]) #printing 4th character of the string
>>> print (string1 * 2) #printing the string twice
>>> print (string1 + string2) #printing the concatenation of string1 and string2
Output :
When you write the first command and press enter, i.e.
print (string1 [0:2])

Your console will print the first two characters of your string using a slice operator. So, in this
case, your console will print
"Hi"
When you write the second command, i.e.
print (string1 [4])
Your console will print the fourth character of your string. So, in this case, your console will
print
"r"
When you write the third command and press enter, i.e.
print (string1 * 2)
Your console will print your first string twice. So, in this case, your console will print
"Hi Mr. David Robertson Hi Mr. David Robertson"
When you write the fourth command and press enter, i.e.
print (string1 + string2)
Your console will print the concatenation of string1 and string2. So, in this case, your console
will print
"Hi Mr. David Robertson How are you"
Lists
In Python, because we use arrays in C or C++, we use lists. But, the list may contain different
types of data. The items stored in the list are divided by a comma "," and are enclosed in square
brackets '[]'
Slice operators "[:]" can be used to access elements of the list. The addition or concatenate
operator "+" and the repeat or multiply operator "*" work with the list in the same way as the
strings work.
Example Given :
>>> l = [1.5, "Hello", "Python", 7]
>>> print (l [3 :]);
>>> print (l [0:2]);
>>> print (l);
>>> print (l + l);
>>> print (l * 3);
Output :
When you write the first command and press enter, i.e.
print (l [3 :]);
Your console will print will print
“[7]”
When you write the second command and press enter, i.e.

print (l [0:2]);
Your console will print
"[1.5, 'Hello']"
When you write the third command and press enter, i.e.
print (l);
Your console will print
"[1.5, 'Hello', 'Python', 7]"
When you write the fourth command and press enter, i.e.
print (l + l);
Your console will print
“[1.5, 'Hello', 'Python', 7, 1.5, 'Hello', 'Python', 7]”
When you write the fifth command and press enter, i.e.
print (l * 3);
Your console will print will print
“[1.5, 'Hello', 'Python', 7, 1.5, 'Hello', 'Python', 7, 1.5, 'Hello', 'Python', 7]”
Tuple
Tuple, in Python, is in many ways similar to the set. Tuples often provide the compilation of
various elements of multiple data forms, similar to lists. The tuple components are divided by a
comma "," and enclosed in parentheses "()."
In addition, the machine is unable to alter the scale, value, and numbers of the elements in a
tuple by itself.
Example Given :
>>> t = ("Hello", "Python’s world", 69)
>>> print (t [1 :]);
>>> print (t [0:1]);
>>> print (t);
>>> print (t + t);
>>> print (t * 3);
>>> print (type (t))
>>> t [2] = "hello";

Chapter 6: Regular Expressions, Expression
Statements, Loops in Python
Like other computer programming languages, Python also possesses regular
expressions, statements, and loops. But, Python's expressions and loops are
unique and the totality of python programming.
All of these methods, functions, loops, and statements play a vital role in
building up an effective program for data analysis and for performing other
tasks as well, in Python. There is a various number of reasons behind the
additions and updates of these operational runners in the libraries of Python.
Here, we will be discussing the importance and functionalities of these
methods while using Python as a mode of programming.
6.1 Python's Regular Expressions
The regular expressions in Python are also known as a regex. Regex works
to analyze the pattern in a string. There are various numbers of regex
functionalities that can be inherited, called, or import to bring in use. For
importing these functions, we can use the command
>>> import.re
Regrex Functions
Split Function
Split is used to split our desired string.
Sub Function
We use the sub to replace the matches in a string.
Match
In Python, Match evaluates the regex pattern and returns it as a Boolean
type, i.e., True or False.
Findall
Findall is used in Python to restore all the matches in a string.
Search

Search is utilized to find all the matches in a string.
6.2 Statement Expressions of Python
The token '='; "the equals sign" is used to represent an assignment
statement. In Python's sentence-structure and dialect, assignment statement
works differently than in other primary computer programming languages
and dialects, and this basic system, counting the idea of Python's form of
factors, enlightens numerous different highlights of Python language. If we
consider this task in the C programming language, it will be, let's say, v = 2,
which means that there is a composed variable named "v," and it has a
duplicate of numeric worth 2. In this case, the right-hand side or esteem is
replicated into an assigned stockpiling area for which the left-hand side
variable name is the emblematic location. The memory allocated to the
variable "v" is vast enough for the pronounced sort.
In the most explicit instance of the Python task, let's use a very similar
model, v = 2, means "(nonexclusive) name v gets a reference to a different,
progressively assigned object of numeric or integer "int" type of significant
worth 2."
In this, we are going to discuss the basic statements that are used by the
Python in routine.
If Statement
In Python, if Statement restrictively executes a square of code, alongside
else and elif, which is a compression of else-if.
For Statement
In Python, for Statement emphasizes an article. It catches every component
to a nearby factor for use by the connected square.
While Statement
While Statement, in Python, executes a square of code as long as its
condition is valid.
Try Statement
In Python, try Statement permits some special cases raised in their
respected and connected code square to be gotten and taken care of by

except requirements; this likewise guarantees that tidy up to code in and at
long last square will consistently be run paying little mind to how the
square exits.
The Raise Statement
Python employed raise statement to raise a specified exemption or re-raise
many special cases.
Import Statement
In Python, the import statement is a statement that is generally utilized to
import the modules whose capacities or factors can be utilized in the
present program. There are three different ways of utilizing
>>> Import:
>>> import <module name>
>>> [as <alias>].
>>> Print statement
The printing statement was changed to the print () framework work in
Python with the release of Python 2.7.
Explanation of some of the most used statements is as follows.
If-Else statements in Python
Usually, any decision statement in a computer is known as a two-way
selection. The decision is presented to the computer, a conditional
statement, and the computer can answer it as true or false.
In such conditions, if the answer is true, an action or a set of actions is
performed. On the other instance, if the answer is false, different action or
set of actions is performed.
In Python, decision making is a primary part of the dialect and language
components. As the name implies, decision making permits your code to
execute a specific block of code for a specified decision. However, mostly
on the validation of a particular condition, the choices are made. Condition
checking acts are the backbone of decision making. In Python, we may
perform them by the following statements.
Indentation in Python

For the simplicity of Python programming and to accomplish
straightforwardness, Python doesn't permit the usage of enclosures for the
square level code. In Python, indentation is utilized to pronounce a square.
On the off chance that two statements are at a similar indentation level, at
that point, they both are the piece of the same square.
By then, four spaces are given to indent the statements, which are a
common measure of indentation in Python. Indentation is the most used
component of the Python language since it proclaims the square of code.
Each one of the statements of one square is proposed at a similar level
indentation. We will perceive how genuine indentation happens in basic
leadership and other stuff in Python.
The If-Statement
The If-Statement is commonly used to test a specific condition, and if the
condition is valid, it executes a code known as if block. The condition, if
Statement, can be any substantial, coherent articulation that can be either
assessed as true or false.
The syntax of if else is as follows
Example – 1 :
>>> number = int (input ("Enter your desired number = "))
>>> if number % 2 == 0:
>>> print ("Your entered number is an even number")
Output :
When you will execute this code, your console screen will print a line as,
Enter your desired number =
After entering your number, if your entered number is an even number, your
program will print,
Your entered number is an even number
Example – 2 :
>>> n = int (input ("Enter first integer"));
>>> v = int (input ("Enter second integer "));
>>> w = int (input ("Enter third integer"));

>>> if n > v and n > w:
>>> print ("n is largest");
>>> if v > n and v > w:
>>> print ("v is largest");
>>> if w > n and w > v:
>>> print ("w is largest");
The If-Else Statement
The if-else Statement provides an else block in addition to the if Statement,
which is executed in the false case of the first condition. When the
condition is true, then the if block is executed. Otherwise, the else block
will be considered true.
In Python, syntax for if else statement is as follows
>>> if condition:
>>> (block of statements)
>>> Else:
>>> (Block of else statements)
Example - 1 :
>>> voterage = int (input ("Enter your age = "))
>>> if voterage >= 18:
>>> print ("You are eligible to cast vote!");
>>> else:
>>> print ("Sorry! You have to wait!");
Example - 2 :
>>> number = int (input ("Enter your desired number :"))
>>> if number % 2 == 0:
>>> print ("Your entered number is an even number!")
>>> else:
>>> print ("Your entered number is an odd number!")

The Elif Statement
The elif statement helps us to run multiple levels of conditions at the same
time. It must have if-and-if levels to perform the tasks, specified by the
program. It works only by taking up a series of 'True' conditions.
The syntax of elif statement is as follows
>>> if (expression 1):
>>> (block of statements);
>>> elif (expression 2):
>>> (block of statements);
>>> elif (expression 3):
>>> (block of statements);
>>> else:
>>> (block of statements);
Python Break Statement
The break statement has its own unique importance in Python loop-oriented
programming. It shifts the execution pattern to the next lines by breaking up
the loop from the previous codes. With simple syntax, it gives back the
control to the required loops in the same larger program. Its syntax is
simple.
>>> break;
Python Continue Statement
In Python, this Statement gives control of a program to the start of a loop. It
allows an individual to skips the rest of codes, and execution comes back to
the beginning. It has an important role in skipping and executing in special
conditions.
The syntax of continue statement is as follows
>>> loop statements
>>> continue;
>>> (the code to be skipped);
Example – 1 :

>>> v = 0;
>>> while v != 10:
>>> print ("%d"%v);
>>> continue;
>>> v=v+1;
Example - 2 :
>>> n=1;
>>> for n in range (1,10):
>>> if n == 15;
>>> continue:
>>> print (%d"%n);
Python's Pass Statement
In Python, pass Statement is considered as a non-executable part of
program. It just appears to justify the syntax and provides only null
operation. It is generally used when the code is not a part of a program, but
written somewhere outside of the program. We use this Statement, as its
syntax.
>>> Pass;
Example :
>>> for w in [1,2,3,4,5]:
>>> if w == 4:
>>> pass
>>> print "(pass when value is)",w
>>> print (w);
Import Statement of Python
This Statement is considered as the most valuable Statement in python
programming. It makes possible the access of one module's functionality to
another module. Without import statement, Python is not able to perform up
to the mark. We use this Statement, as its syntax of import statement.
>>> import module;

Example :
>>> import document;
>>> last name = input("input your last name :")
>>> document.displayMsg(last name)
6.3 Loops in Python
Computer Programming is all about the flow of some commands and
functions over and over again. Sometimes, the same code has to repeat
many times to get the desired results. It is a very common practice in the
general programming world. To make this easier for Python programmers,
there are many loops that are used by professionals to save time and keep
the syntax easy to read and understand. These loops repeat the required
code several times with only a small block of code. In Python, these loops
are much necessary to build predictive model programs and to obtain
results.
In Python, loops are very helpful in reducing the complexity of your code.
The syntax of these loops is very easy to understand and is necessary to
maintain the flow of the program. It avoids repetition of the same code, and
through a simple loop, one can easily repeat the same code many times.
Here are some important loops in Python.
for loop
while loop
do-while loop
Python' for' loop
For Loop
As far as for loop is concerned in Python, its syntax is as follows
>>> for iterating_variable in sequence:
>>> {statements);
Example :
>>> v=1;
>>> number = int (input ("Enter your desired number:"));

>>> for v in range(1,11):
>>> print ("%d X %d = %d"% (number,v,number*v));
Output :
When you execute this program, your console will print,
Enter your desired number
Let’s say you entered “10”, as your number. Your console will print,
10 X 1 = 10
10 X 2 = 20
10 X 3 = 30
10 X 4 = 40
10 X 5 = 50
10 X 6 = 60
10 X 7 = 70
10 X 8 = 80
10 X 9 = 90
10 X 10 = 100
Nested For Loop
In Python, nested for loop is about nesting a 'for loop' inside another 'for
loop' to execute it several times.
Nested for loop’s syntax is as follows
>>> for iterating_variable1 in sequence:
>>> for iterating_variable2 in sequence:
>>> (block of statements)
>>> (Other statements)
Example :
>>> v = int(input("Enter your desired number of rows"))
>>> v,w=0,0
>>> for v in range(0,n):

>>> print ()
>>> for w in range(0,i+1):
>>> print("*",end="")
Output :
When you execute this program, your console screen will print this,
Enter your desired number of rows
Let’s say you’ve entered “6”. It will print,
*
**
***
****
*****
******
Else Statement with For Loop
The else Statement is an essential part of many conditional statements. It is
also used in many other programming languages for the satisfaction of a
condition. In Python, the else Statement can be executed inside a 'for loop.'
Example - 1 :
>>> for v in range(0,8):
>>> print(v)
>>> else:print("Excluding break statement therefore for loop
completely exhausted.");
Output :
In this case, your console screen will print,
0
1
2
3
4

5
6
7
Since there is no break, for loop completely exhausted
Example – 2 :
>>> for v in range(0,5):
>>> print(v)
>>> break;
>>> else:print("for loop is exhausted now!");
>>> print ("break statement is used therefore loop gets broken")
#The break statement is stopping the execution of the else statement.
Output :
In this condition, your console will print,
0
the break statement is used therefore loop gets broken
While loop
In general, a while loop is responsible for enabling a section of the code is
to be executed as long as the known condition is true. It is usually used in
the case where the iteration's quantity is not known in advance. While
loop's syntax is as follows.
>>> while expression:
>>> (statements);
Statement expression must be any valid Python expression concluding into
true or false. The True is any non-zero value, in this case.
Example – 1 :
>>> v=1;
>>> while v<=11:
>>> print(v);
>>> v=v+1;

Output :
In this condition, your console will print a list of all integers, till 11.
1
2
3
4
5
6
7
8
9
10
11
Infinite While Loop in Python
If the condition provided in the while loop doesn't become false, the while
loop will never end, and the result will be an infinite while loop. To have a
True Condition, we use a non-zero value in while loop, and zero value to
indicate the False Condition
Example :
>>> variable = 1
>>> while variable != 2:
>>> v = int(input("Enter your desired number :"))
>>> print ("Entered value is %d"%(v))
Output :
In this results will be,
Enter your desired number : 67
Entered value is 67
Enter your desired number : 69
Entered value is 69

Enter your desired number : 68
Entered value is 68
Enter your desired number : 76 …
It will be an infinite loop.
Else with Python While Loop
Python empowers its developers to use the while loop with the while loop
inside it, as well. It executes the else square when the condition given in the
while articulation turns out to be false. Like for loop, on the off chance that
the while loop is broken using the break statement. At that point, the else
square won't be executed, and it will execute the announcement present
after an else square.
Example - 1 :
>>> v=1;
>>> while v<=4:
>>> print(v)
>>> v=v+1;
>>> else:print("The while loop is broken");
Output :
In this case, your console will print,
1
2
3
4
The while loop is broken
Example – 2 :
>>> v=1;
>>> while v<=5:
>>> print(v)
>>> v=v+1;

>>> if(v==3):
>>> break;
>>> else:print("The while loop is broken");
Output :
In this case, your console will print,
1
2

CHAPTER 
7: 
Python 
Functions 
and 
File
Handling
Python functions and file handling are the most important part of Python
programming. Without using these functionalities, no program can achieve
the desired results. Functions are easy to understand codes that can be
called anywhere in the main body of your program.
7.1 Functions in Python
Python's functions are highly useful small bundles of codes that may be
called to perform a specific task. They are used in programs to perform
special roles. Basically, they are some unique statements that are enclosed
by {}. In Python, you may call functions as many times as you require.
Advantage of Python Functions
Following are some major advantages of python functions:
By the use of functions, we may avoid the repetition of the code.
With a single statement, the whole function can be called. It
saves a lot of time!
They are reusable, and their reusability is a very attractive
feature. They may be called a number of times in a program.
By using these functions, a larger program can be divided into
multiple functions. It enhances usage.
Functions of Python
There are so many functions in the Python programming language. They
can be called from interpreter package to use in any program. Without these
functions, this Python has no attraction for the software community.
Nowadays, they are being used across the world to perform all major
programming tasks.
The abs ( ) Function
This function is mainly used for numeric values. It gives back an absolute
value when we enter any integer in our program. It is specifically for
getting absolute values against one single argument. Here are some
examples of absolute numbers to understand the concept.

Example :
# int number
>>> integer = -25
>>> print(‘ abs value of -25 is', abs(integer)
#float number
>>> float = -55
>>> print(‘abs value of -55', abs(float)
Output :
abs value of -25 is: 25
abs value of -55 is: 55
These results show that how abs( ) function works.
The bin ( ) Function
This function, bin( ), returns the binary results of an integer. The binary
output has prefix 0b at the start of value.
Example :
>>> n=20
>>> v= bin(n)
>>> print(v)
Output :
In this case, your console will print,
0b2020
The bool ( ) Function
This function gives an output in Boolean type value by using truth testing
methods. It is an essential built-in function of Python. If there is any value
input, the result is true; otherwise, it prints false.
Example :
>>> v1=[5]
>>> print(v1, ‘is',bool(v1)
>>> v1= No-value

>>> print(v1, ‘is',bool(v1)
Output :
[5] is True
No-value is False
The bytes ( ) Function
In Python, the bytes ( ) function is very helpful to get object in bytes. It
belongs to the command byte-array. Mostly, Python programming
professionals get help by generating objects through this command.
Example :
>>> string= "Hi Friend."
>>> array= bytes(string, ‘utf-8')
>>> print(array)
Results :
Hi Friend
The callable ( ) Function
The concerned function investigates and shows up True when an object
seems callable otherwise, it shows False. This function may save time by
notifying the user about the availability of an object with just a single
command.
Example :
>>> v= 12
>>> print (callable(v))
Output :
False
The compile ( ) Function
This function, compile ( ), works on the source code by using the compilers
of Python, and ultimately generate an object with that code. Later, we may
execute this code by using another function exec ( ) in the same program.
Example :

>>> yourcode_str= v=10\n w=15\n print("sum=",v+w)'
>>> yourcode=compile(yourcode_str, "sum.py','exec')
>>> print(type(yourcode))
>>> exec(yourcode)
>>> exec(c)
Output :
sum = 25
The exec ( ) Function
The exec() function has a bit extra importance within the built-in functions
of Python. It runs the programs of python and produces the output. Without
this function, python programs cannot execute.
Example :
>>> v = 12
>>> exec('print(v==12)')
>>> exec('print(v+4)')
Output :
True
16
The sum ( ) Function
In Python, when we work with arithmetic operations while using numerical
data, the Sum() function becomes inevitable. We use this function to
perform addition of values available in the list.
Example :
>>> v = sum([2, 5,4 ])
>>> print(v)
>>> v = sum([4, 2, 4], 10)
>>> print(v)
Output :
11

20
The any ( ) Function
The any () function in Python provides the result or output in Boolean type
value which may be true or false.
It prints true when there is any value True on the list. But if there is no
value true, it gives False. It is also a useful function for data scientist which
works on big data projects.
Example:
>>> V=[4, False,9]
>>> Print(any(V))
>>> V=[]
>>> Print(any(V))
Result :
True
False
The ascii ( ) Function
The ascii() function has an important role in Python. The output value of
this function is always a string. We have to remember that it doesn't print
other ascii characters.
Example :
>>> vQ= 'Have a good day'
>>> print(ascii(vQ))
>>> wQ= 'Have a nice day'
>>> print(ascii(wQ))
>>> print(‘Have\xf6n a good day')
Output :
'Have a good day'
'Have\xf6n a good day'
'Have a nice day'

The bytearray ( ) Function
The bytearray () function plays an important role in Python programming.
To create an object, this function helps users or software professionals with
no wastage of time. 
Example :
>>> string1= "Computer Programming"
#string1 with encode ‘utf-8'
>>> array1= bytearray(string, ‘utf-8')
>>> print(array1)
Result :
bytearray(b'Computer Programming')
The eval ( ) Function
The eval ( ) function plays an additional role in python programming. This
function executes itself in a running program to help the code manager to
get work done in speed.
Example :
>>> w= 6
>>> print(eval(‘w+1')
Output :
7
The format ( ) Function
This format ( ) function in Python, makes the coding easier for every
programmer. By formatting the values and other given data, it saves the
time of a programmer. 
Example :
>>> d, f and b are a type
# integer
>>> print(format(515, "d"))
# float arguments

>>>print(format(515.7898, "f"))
# binary format
>>> print(format(15, "b"))
Output :
245
363.790
35
The frozenset ( ) Funcion
The frozenset() function, in Python programming, provides a changeable
frozen-set object. This is a very useful function for Python programming.
Example :
>>> letter = ('j', 'k', 'l', ‘m', 'p')
>>> frozset = frozenset(letter)
>>> print('Frozen set:', frozSet)
>>> print('set with no value:',frozenset())
Output :
Frozen set: ({'k', 'p', 'j', 'm', 'l'})
Set with no val: frozenset()
The getattr ( ) Function
The concerned function plays a very important role in python language.
With the help of this function, the user is able to get object’s attribute.
Software programmers use this function to assign names to the objects.
Example :
>>> class Details:
>>> age = 25
>>> name = "faheel"
>>> detail = Details()
>>> print('age:', getattr(detail, "age"))
>>> print('age:', detail.age)

Output :
age: 25
age: 25
The globals ( ) Function
The globals ( ) function enables the user to get the table of global symbols,
with all the information of variables and methods. It is a mandatory
function to have all the symbols ready to use in any python program.
Example :
>>> Id = 72
>>> globals()['Id'] = 72
>>> print(' My id :', Id)
Output :
My id : 72
The hasattr ( ) Function
Hasattr ( ) function is based on Boolean type returns, i.e. True and False.
Example :
>>> v = [0, False, 5]
>>> print(any(v))
>>> v = []
>>> print(any(v))
Results :
True
False
The iter ( ) Function
The iter ( ) function is commonly used as it deals with the values inside an
object mostly list. It prints the values in a list one by one.
Example :
# list of numbers
>>> list = [6,7,8,9,}

>>> listIter = iter(list)
# prints '6'
>>> print(next(listIter))
# prints '7'
>>> print(next(listIter))
# prints '8'
>>> print(next(listIter))
Output :
6
7
8
The len ( ) Function
This one is a very simple but extremely important function for python
programming. The users or programmers are able to measure the length of
items by using this function.
Example :
>>> stringW = '…Data…'
>>> print(len(stringW))
Result :
4
The list ( ) Function
The list ( ) function is one of the most commonly used functions to generate
a complete list of set of given instructions.
Example :
>>> print(list())
#for empty list
# string
>>> String = 'abcde'
>>> print(list(String))

# tuple
>>> tuple = (1,2,3,4,5)
>>> print(list(Tuple))
# list
>>> list = [1,2,3,4,5]
>>> print(list(list))
The locals ( ) Function
The locals ( ) provides a Boolean type result against the input (True or
False). It takes two inputs and returns true or false according to your
defined program.
Example :
>>> def localsBeta():
>>> return locals()
>>> def localstSenior():
>>> Alpha = True
>>> return locals()
>>> print('localsNoAutority:', localsBeta())
>>> print('localsHighAuthority:', localsAlpha())
Result :
localsBeta: {}
localsAlpha: {'present': True}
The map ( ) Function
Them map ( ) function is really important as you can get an item’s list
processed under this function.
Example :
>>> def calculateAddition(n):
>>> return n+n
>>> numbers = (1, 2, 3, 4)
>>> result = map(calculateAddition, numbers)

>>> print(result)
# converting map object to set
>>> numbersAddition = set(result)
>>> print(numbersAddition)
Result :
<map object at 0x7fb04a6bec18>
The delattr ( ) Function
This function is the most important as compared to all other functions. On
every step, a developer or user needs to delete attributes from a class and
shows error on calling the same attribute.
Example :
>>> class jobholder:
>>> ID= 76
>>> name= "Jeniffer"
>>> email= "jeniffer@company.com"
>>> def getinfo(self):
>>> print( self.id, self.name, self.email)
>>> J=jobholder()
>>> e.getinfo()
>>> delattrib(jobholder, ‘Job Description')
>>> e.getinfo()
Output :
76 Jeniffer jeniffer@company.com
The divmod ( ) Function
This function performs a numerical operation on the given values. The
arguments that this function uses, are numeric values. In all numeric
operations. In Python, this function is frequently used and preferred.
Example :
>>> V = divmod(30,5)

>>> print(v)
Output :
(6, 0)
The enumerate ( ) Function
The enumerate ( ) function is based on the sequence of index numbers.
Through using element’s sequence and index, it may generate an object
having numerical values.
Example :
>>> W = enumerate([4,5,6])
>>> print(W)
>>> print(list(W))
Output :
[(0, 4), (1, 5), (2, 6)]
The dict ( ) Function
This function returns a dictionary. This function generates three types of
dictionary:
Empty Dictionary: When there is no argument passed.
Identical Key-value pair Dictionary: When there is a potential
argument given.
Keyword and Value added Dictionary: When there is a keyword
argument.
Example :
>>> N = dict()
>>> V = dict(c=4,d=5)
>>> print(result)
>>> print(result2)
Output :
>>> {} #empty dictionary
>>> {'c': 4, 'd':5} #dictionary with values

The filter ( ) Function
The filter ( ) function is used for the filtration of values by providing two
arguments, functions and variables. In case of (none) function, it returns
only TRUE.
Example :
>>> def filterdata(w):
>>> if w>4:
>>> return w
>> result = filter(filterdata,(1,2,7))
>>> print(list(result))
Output :
[7]
The hash ( ) Function
The hash ( ) generates the numeric value through hash algorithm, in Python.
These values may be integers used for comparison of dictionary keys.
Example :
>>> V = hash(35)
>>> W = hash(35.6)
>>> print(v)
>>> print(W)
Output :
35
756783388388221
The help ( ) Function
The help ( ) function is responsible to call help to assist the process of
object passage. Through additional parameters, this function share the help
data with you.
Example :
>>> Information = help()

>>> print(Information)
Output :
Help Centre!
The min ( ) Function
The min ( ) function helps get the smallest or the most basic elements by
taking two arguments as input, elements list and Keywords list.
Example :
>>> V = min(2100,221,225)
>>> W = min(1000.25,2025.35,5625.36,10052.50)
>>> print(V)
>>> print(W)
Output :
221
1000.25
The set ( ) Function
The set ( ) function generates an object by using itereable objects. This
function of python programming is considered as the base of programs.
Example :
>>> v = set('25')
>>> w= set('python')
>>> print(v)
>>> print(w)
Output :
{'2', '5'}
{'y', 'o', 't', 'h',', 'p', 'n'}
The hex ( ) Function
The hex ( ) function converts the integer argument into hexadecimal string
value. This function makes the conversion easy for all programmers,
software developers, engineers and professional Python experts. 

Example :
>>> n = hex(4)
>>> v= hex(140)
>>> print(n)
>>> print(v)
Output :
0x2
0x70
The id ( ) Function
The id ( ) function generates an identity integer by the use of an argument.
Example :
>>> N = id("Python")
>>> V = id(1500)
>>> W= id([95,236,92,3225])
>>> print(N)
>>> print(V)
>>> print(W)
Output :
59696771728
66864236539
19945047867
The setattr ( ) Function
This function is responsible for setting of an attribute of an object. It takes
different values and after execution of the function, it returns nothing.
Example :
>>> RollNo = 0 #RN- roll number
>>> Name = ""
>>> def_init_(my, RollNo, Name):

>>> my.RollNo = RollNo
>>> self.Name = Name
>>> V= Student(33,"David")
>>> print(V.RollNo)
>>> print(V.Name)
>>> print(V.email) product error
>>> setattr(V, 'email','davidrobert6185512@gcaill.com') # adding new
attribute
>>> print(V.email)
Output :
33
David
Davidrobert6185512@gcail.com
The slice ( ) Function
The slice ( ) function gives slice from a group of elements. Initially it takes
a single argument, but a second function requires three arguments to
proceed.
Example:
>>> V = slice(7)
>>> W = slice(0,7,3)
>>> print(V)
>>> print(W)
The sorted ( ) Function
We use this function for the sorting of elements. Sorting, due to this
function is in ascending order. To proceed, this function uses normally four
values.
Example :
V = "python"
W = sorted(V) # sorting string

print(W)
The next ( ) Function
The next ( ) function enables to get next element from the given group.
Through two arguments, this function produces with a single element.
Example :
>>> V = iter([128, 16, 42])
>>> W= next(V)
>>> print(W)
>>> W = next(V)
>>> print(W)
>>> W= next(V)
>>> print(W)
#V is a number
#W is an item
Output :
128
16
42
The input ( ) Function
The input ( ) function is specially used for taking instructions from the
programmer or software developer or the user. After getting information, it
converts that value into program required data format.
Example :
>>> value = input("Please insert your desired value: ")
>>> print("You entered:",value)
Output :
Please Insert your desired value: 22
You entered: 22

The int ( ) Function
The int ( ) function is designed to get integers, normally users use it to
converts strings and other data structures into specified integral values.
Example :
>>> n = int(15) # integer
>>> v = int(15.52) # float
>>> w = int('15') # string
>>> print("Int val:",a, b, c)
Output :
Int val : 15 15 15
The pow ( ) Function
We use pow ( ) function to compute number’s power to define it for some
specific results needed for the project or program. It is really an important
function to carry out many algebraic solutions for numbers.
Example :
>>> Positive v, Positive w (v**w)
>>> print(pow(2, 3))
>>> Negative v, Positive w (-v**w)
>>> print(pow(-2, 3))
>>> Positive v, Negative w (v**-w)
print(pow(2, -3))
>>> Negative v, Negative w (-v**-w)
print(pow(-2, -3))
Output :
8
8
The print ( ) Function
The print ( ) function responsible to print an element or object on screen.
Example :

>>> print("Hello! To the world of Python Programming!")
>>> v = 7
>>> print("v =", v)
>>> w = v
>>> print('v =', v, '= w')
Output :
Hello! To the world of Python Programming!
v = 7
v = 7 = w
The range ( ) Function
The range ( ) function provides the sequence that begins at 0 in general, it
increases by 1 and stops on some specific number.
Example :
>>> print(list(range(9,12)))
>>> range(start, stop)
Output :
[10,11]
The reversed ( ) Function
The reversed ( ) function returns the reverse sequence of a given sequence. 
Example :
>>> string = 'Hello'
>>> print(list(reversed(string)))
>>> tuple = ('H', 'e', 'l', 'l', 'o')
>>> print(list(reversed(tuple)))
>>> range = range(10, 12)
>>> print(list(reversed(range)))
>>> List = [1, 2, 7, 7, 9]
>>> print(list(reversed(List)))

Output :
['o', 'l', 'l', 'e', ‘H']
The round () Function
The round ( ) function is mostly used when there are decimals used in the
list of numbers.
Example :
>>> print(round(8))
>>> print(round(10.4))
>>> print(round(6.6))
Output :
8
10
7
The str ( ) Function
The str ( ) transforms any value into string. This conversion function helps
user to get things done quickly.
Example :
>>> str('6')
Output :
'6'
The tuple ( ) Function
The tuple ( ) function generates an object through any function. This
function allows users to get their required object by just writing a simple
syntax.
Example :
>>> n = tuple()
>>> print('n=', n)
>>> v = tuple([2, 8, 10])
>>> print('v=', v)

>>> n = tuple('Python')
>>> print('n=',n)
>>> n = tuple({4: 'four', 5: 'five'})
>>> print('n=',n)
Output :
n = ()
v= (2, 8, 10)
n= ('P', 'y', 't', 'h','o','n')
n= (4, 5)
The type ( ) function
The type ( ) function is normally applied to understand the data type on an
element. With three arguments, the type function gives an object.
Example :
>>> V = [4, 5] #LIST
>>> print(type(V))
>>> W = {4: 'four', 5: 'five'} #Dictionary
>>> print(type(W))
>>> class Python:
>>> n = 0
>>> InstanceOfPython = Python()
>>> print(type(InstanceOfPython))
Output :
<class 'V'>
<class 'W'>
<class '__main__.Python'>
The vars ( ) function
The vars ( ) function returns the attributes which belongs to the dictionary.
It is most commonly used function of python.

Example :
>>> class Python:
>>> def _init_(my, v = 7, w = 9):
>>> my.v = v
>>> my.w = w
>>>InstanceOfPython = Python()
>>>print(vars(InstanceOfPython))
Output :
{'w': 9, 'v': 7}
The zip ( ) Function
The zip ( ) function gives an object having the same index with several
containers. Through this function, results can be produced in an achieved or
zip form.
Example :
>>> numericalList = [4,5, 6]
>>> stringList = ['four', 'five', 'six']
>>> V = zip()
>>> VList = list(V)
>>> print(VList)
>>> V= zip(numberList, stringList)
>>> VSet = set(result)
>>> print(VSet)
7.2 File Handling of Python
Python supports file handling and it also enables clients to deal with reading
and writing of any document, alongside various methods to deal with the
available file or document. The concept of file handling is present in many
different computer programming languages, however the usage of file
handling is either muddled or protracted in other languages. In Python, the

idea of file handling is similar yet different. In Python, file handling is
really simple.
Python provides multiple unique features and functions to handle the files.
It distinguishes other high-level computer programming languages on the
basis of the structural organization of file handling and management. It is
easy to learn and implement coding module in Python. We should begin
with Reading and Writing the files. For this, the syntax is mentioned below.
open(filename, mode)
File Opening Using Function open()
We use open () function for reading and writing the file. As mentioned
earlier, it restore an object in file format. Generally, open ( ) works
alongside two contentions, that acknowledges file management. It's syntax
is mentioned below.
Object File= open(<name>, <mode>, <buffering>)
Closing of File Using Function close ()
After the completion of the program, the programmer must close the file by
using python’s script, close ( ).
It secures the file from external threats and prevents the manipulation of
functionalities. It’s syntax is mentioned below.
file.close()
Example :
>>> Filenvw=open("file.txt","c")
>>> if filenvw:
>>> print("opened successfully")
>>> filenvw.close()

Chapter 8: Libraries in Python
In the previous chapters, we studied the important concepts of Python, such
as data structures, built-in functions, variables, exceptions, methods, loops,
and statements. In the following chapter, we will deeply study the modules,
libraries, and packages of Python that can be important for any of the
projects. To import is the most important concept within Python. So, by the
use of this concept, we can call millions of the libraries that can be used in
Python.
Moreover, Python programming and data science are parallel to each other.
Python is an unbelievable language for data science, and it's important for
individuals who need to begin in the field of data science. It provides
countless cluster libraries and systems to provide a decision for working
with data science in a spotless and very productive manner. The different
systems and libraries accompany a particular reason for use and should be
picked by your prerequisite.
8.1 Python General Libraries
Python is known as a "batteries-included programming language." Python
essentially implies and accompanies various pre-packaged libraries. In any
instance, there is a number of different libraries accessible for the
translated, abnormal state. Moreover, Python is a universally useful
programming language.
Among different elements that are being added to the prevalence of Python,
they have a humongous gathering of libraries is a noteworthy one. Most
libraries and bundles are a bundle or group of many programming
languages, which provides developer access. Here are some of the most
essential languages that are used in Python.
One of the most important general Python libraries is "Requests." It intends
to make HTTP demand increasingly human-accommodating and less
difficult. This library is authorized under the Apache2 permit and written in
Python; Requests is a true standard used by Python developers for making
HTTP demands while using Python.
Using the Requests library for sending HTTP solicitations to a server, it
additionally permits including structure information, content, header, multi-
part documents, and so forth with them. With the library, designers do not

need to add a question to the URL or structure encode the POST
information physically.
The Requests library abstracts the various complexities of making HTTP
demands in a basic API so developers may concentrate more on
communication with the administrators. This library, additionally, offers
authority support for Python 2.7, Python 3.4, or more and works perfectly
with PyPy as well.
Special Features :
It allows multi-part record transfers and spilling downloads.
It automatically substances the disentangling and programming
decompression.
It's browser-style is SSL confirmation.
In this library, features can be modified and improved according
to prerequisites.
This library keeps-alive and provides Pooling Supports
international domains and URLs.
PIL
PIL or Python Imaging Library, is a free Python library that adds a picture
capacity to the Python variables. In basic terms, PIL permits controlling,
opening, and sparing different picture records that are being organized in
Python. This library was developed by Alex Clark and Contributors. Pillow
is a sub-set of the PIL library.
Furthermore, this library offers incredible picture handling abilities; PIL
offers a powerful inward portrayal and broad record organization support.
The concerned central Python library is intended for offering quick access
to information put away in a couple of fundamental pixel designs. 
Special Features :
This library is effective in investigating bolsters by utilizing the
show() strategy.
This library is Ideal for group handling applications.
In the concerned library variables and peruses a huge scope of
picture document designs.

PIL additionally offers BitmapImage, PhotoImage, and Windows
DIB interfaces.
This library supports the relative discretionary changes, shading
space transformations, separating with a lot of implicit
convolution parts, picture resizing and turn, and point activities.
In this library, the histogram technique is permitted hauling a few
measurements out of a picture, can be utilized for programmed
differentiate upgrade and worldwide factual investigation.
Scrapy
Scrapy is also a free and open-source Python structure that is broadly
utilized for web and various different assignments, including mechanized
testing and information mining. Initially, Scrapy was developed for web-
based scratching, yet it has been updated to satisfy different purposes over
its course. This library also offers a quick and abnormal state strategy for
creeping sites and separating organized information from websites.
This library is written in Python. Scrapy is worked around errors and bugs
that are essentially independent crawlers, which are given with too many
guidelines. Complying with the DRY standard, Scrapy makes it simpler to
assemble and scale undeniable web slithering undertakings. 
Special Features :
Scrapy is easy to compose a bug to slither a site and concentrate
information.
It follows the DRY rule.
This Python library offers a web-slithering shell that enables
engineers to test a website's conduct.
This library supports sending out scratched information utilizing
the direction line.
Tkinter
When we work with Tkinter, Python offers a simple and quick path for the
development of GUI applications. This library is considered as the standard
GUI library for Python programming. It offers an amazing item situated
interface for the Tk GUI toolbox. We should remember that developing a

GUI application while utilizing Tkinter is simple. You just have to pursue
these basic advances:
Special Features :   
This library comes with a scope of gadgets that help geometry
the executive's strategies.
It provides eases while creating GUI applications.
Tkinter supports a powerful object-situated interface.
Six
We have to admit the fact that six is the simplest of Python libraries. It is an
amazing Python library that is intended to smooth out the contrasts between
Python 2 and Python 3 forms.
Six is developed for supporting codebases that can work on both Python 2
and Python 3 without any requirement of adjustment.
The Six libraries considered super-simple to use on account of being offered
as a solitary Python document. Consequently, Six is absurdly simple to
duplicate a library into a Python venture. The name Six reflects Python 2 x
Python 3.
Special Features :
Six is simple to utilize the capacities for making Python code
perfect with both Python 2 and Python 3.
This library supports each version of Python, since Python 2.6.
It is too easy to use Six as contained in a solitary Python
document.
Pygame
Pygame is an open-source and free Python library that is intended for
achieving video-based and sound-based application improvement in
Python. Particularly it supports two-dimensional gaming ventures. So, it is
mostly used by both new and expert Python game developers.
In a Python compiler or IDE, Pygame utilizes the SDL, i.e., Simple
DirectMedia Layer library. Like the SDL library, the Pygame library is

profoundly convenient, and it offers help for a wide number of stages and
working frameworks.
Pygame is conceivable to escort applications created utilizing Pygame on
Android-based gadgets, like cell phones and tablets. For many reasons, you
should prefer pgs4a, which is a Pygame subset for Android.
Special Features :
This library doesn't request OpenGL.
It helps you in a simple way to utilize a multi-center CPU.
While using this library, no GUI is required for utilizing every
single accessible capacity.
This library provides support for a wide scope of stages and
working frameworks.
This library is simple to utilize.
Pygame uses Assembly Code and advanced C code for
actualizing the central capacities.
Bokeh
Bokeh is an instinctive portrayal library for the Python programming
language; It grants imagining data in a stunning and critical course inside
contemporary web programs. The data portrayal library encourages the
creation of dashboards, data applications, and keen plots.
Despite offering a brief and lovely improvement of versatile plans, the
Bokeh library in like manner extends its capacity with the best of
knowledge over spilling or tremendous datasets and databases.
Special Features :
While using this library, authentic plots with clear headings can
be built easily without any complexity.
Bokeh portrayals can be successfully introduced into two of the
most standard: python frameworks, Django and Flask.
It provides the capacity to make dazzling and natural data
recognitions in multiple computer programming language
dialects.

Asyncio
This library is utilized for composing simultaneous code by utilizing the
async and anticipates grammar by the developers. In the larger part of the
program, the asyncio library is perfect for IO-bound and high-level
organized system source code.
Asyncio has been utilized for the structural difference of Python non-
concurrent frameworks that offer database associated with the libraries,
circulated undertaking lines, elite system, and web servers, and significantly
much more. The concerned library accompanies various high-level and
low-level APIs.
Special Features :
This library is used for the implementation of protocols by
employing transport.
While using this library, you will find Python codes easy and
straightforward.
Asyncio helps in the generation of many different loops.
8.2 Python Data Science Libraries
Python libraries are getting more accessible and useful day-by-day. As they
are an open-source set of languages, there are millions of data scientists
who are enriching the Python with tools and libraries through advanced
coding. Now, there are extremely advanced packages and libraries that data
scientists are using for multiple data analysis tasks. A concise description of
some of the best Python Data Science libraries is given below.
Numpy
NumPy is a very Important Python Data Science library, which is implied
for logical registering. It provides support for an amazing N-dimensional
exhibit item and broadcasting capacities.
Moreover, this library offers Fourier changes, arbitrary number capacities,
and devices for coordinating C and C++ and FORTRAN code. Having a
working information of NumPy is necessary for full-stack developers
associated with Artificial Intelligence ventures utilizing Python.

Numpy is the fundamental and a perfect bundle for working with
information in Python since different bundles for information investigation
are based over Numpy and the sci-kit-learn package, which is utilized to
assemble Artificial Intelligence applications and works perfectly with
Numpy too.
Initially, Numpy provides the phenomenal array of objects, n-dimensional
clusters. In an 'ndarray' object, otherwise known as 'exhibit', you can store
various things of similar information kind. The offices around the exhibit
object make Numpy so advantageous for performing Math calculations and
for information controls.
Special Features :
Numpy is a very interactive library, and it's easy as well.
While using Numpy, Mathematical problems are solved with
ease.
Pandas
In Python, we use two-dimensional tables to analyze the data like in SQL or
Excel. Initially, Python did not have this feature. But then Pandas was
introduced. Without a doubt, Pandas is the "SQL of Python." In short,
Pandas is the library that may help us to handle two-dimensional data tables
in Python. In many cases, it's similar to SQL, though.
Moreover, Pandas is based on the NumPy bundle, which means a great
amount of the structure of NumPy is used or duplicated to develop Pandas.
Information in pandas is frequently used to bolster factual examination in
SciPy, plotting capacities from Matplotlib, and machine learning
calculations in Scikit-learn.
Also, Jupyter Notebooks offer a decent situation for utilizing pandas to
perform information investigation and demonstrating, yet pandas can
likewise be used in content tools simply.
Jupyter Notebooks enables a developer to execute code in a specific cell
instead of running the whole record. This spares a ton of time when
working with enormous datasets and complex changes. Scratchpad likewise
gives a simple method to imagine pandas' DataFrames and plots. Indeed.

Pandas is mostly known for giving information outlines in Python. This is
an outstanding library for information examination, contrasted with other
area explicit dialects like R. By using Pandas; it's simpler to deal with
missing information, bolsters working with contrastingly filed information
assembled from numerous various assets, and supports programmed
information arrangement.
Furthermore, it provides devices the information examination and
information structures like consolidating, molding, or cutting datasets, and
it is additionally exceptionally viable in working with information identified
with time arrangement by giving hearty apparatuses to stacking information
from Excel, level documents, and databases.
Utilizing the Pandas library makes it simpler and instinctive for
programmers to work with named or social data. It also offers expressive,
quick, and adaptable data structures. Pandas are made to fill in as the
essential elevated level structure shut for doing data examination, which is
utilized while using Python as a mode of programming.
One of the most dominant features of Pandas is to interpret complex data
activities utilizing negligible a couple of directions. Also, the Artificial
Intelligence library has no shortage of work in techniques for consolidating,
separating and gathering data. It additionally
Highlights time-arrangement usefulness.
Special Features :
While using Pandas, operations of custom type can be completed
significantly.
With the use of Pandas, data manipulation becomes simpler and
easier.
When Pandas is used with other Python libraries and tools, it
provides excellent results.
The Matplotlib
Matplotlib is a two-dimensional plotting library with extraordinary
representation modules for Python. It is equipped for delivering top-notch
figures in various printed version organizations and intelligent cross-stage

conditions. Besides being utilized in Python shell, Python contents, and
IPython shell, Matplotlib can likewise be utilized in:
Jupyter Notebook
Web application servers
GUI tool boxes
As said by the official site of Matplotlib, this Python library tries to "make
simple things simple and hard things conceivable." The 2D plotting Python
library permits producing bar graphs, mistake diagrams, histograms, plots,
scatter plots, and so on with fewer lines of code.
Maybe, the best advantage of representation is that it permits us visual
access to enormous measures of information in effectively absorbable
visuals. Matplotlib comprises a few plots like line, bar, and disperse
histogram, and so forth.
Matplotlib is a Mathematical Plotting Library in Python. It is a library that
is, for the most part, utilized for information representation, including 3D
plots, histograms, picture plots, scatterplots, bar graphs, and power spectra
with bright highlights for zooming and searching for gold in various printed
copy designs. It bolsters practically all stages, for example, Windows, Mac,
and Linux. This library likewise fills in as an augmentation for the NumPy
library. Matplotlib has a module pyplot which is utilized in representations,
which is frequently contrasted with MATLAB.
These libraries are the best for amateurs to begin information science
utilizing the Python programming language. There are numerous other
Python libraries accessible, for example, NLTK for standard language
preparing, Pattern for web mining, Theano for profound learning, IPython,
Scrapy for web scratching, Mlpy, Stats models, and the sky is the limit from
there. 
Special Features :
It has handy properties, font properties, line styles, etc. through
an object-oriented interface.
MATLAB interface supports the simple plotting of data.
It has secondary x/y axis support to represent two dimensions.
This library supports multiple operating systems.

Scikit-Learn
Scikit-learn gives a scope of administered and solo learning calculations by
means of a predictable interface in Python. It is authorized under a lenient
rearranged BSD permit and is dispersed under numerous Linux
disseminations, empowering scholastic and business use. The library is
based upon the SciPy (Scientific Python) that must be introduced before
you can utilize sci-kit-learn.
There are a few Python libraries that give strong executions of the scope of
machine learning calculations. Outstanding amongst other known is Scikit-
Learn, a bundle that gives proficient adaptations of countless basic
calculations. Scikit-Learn is described by a perfect, uniform, and
streamlined API, just as by extremely helpful and complete online
documentation. An advantage of this consistency is that once you
comprehend the fundamental use and language structure of Scikit-Learn for
one sort of model, changing to another model or calculation is extremely
direct.
Undoubtedly the fanciest things in Python are Machine Learning and
Prescient Investigation. Also, the best library for that is Scikit-Learn, which
essentially characterizes itself as "Machine Learning in Python." Scikit-
Learn has a few techniques, fundamentally covering all that you may
require in an initial couple of long periods of your information profession:
relapse strategies, characterization strategies, and bunching, just as model
approval and model determination.
This prevalent library is utilized for AI in information science with a
different order, relapse, and grouping calculations, which offers help vector
machines, innocent Bayes, angle boosting, and sensible relapse. SciKit is
intended to interoperate with SciPy and NumPy.
Special Features :
Capability to extract features from images and text
Can be utilized again in several contexts
Scipy
There are scipy library and scipy stack. The vast majority of the libraries
and bundles are a piece of the Scipy stack (that is for logical processing in

Python). And one of these parts is simply the Scipy library, which gives
proficient answers for numerical schedules (the math stuff behind AI
models). These are incorporation, introduction, improvement, and so forth.
Scipy gives the center scientific strategies to do the unpredictable AI forms
in Scikit-learn.
It is an open-source library utilized for registering different modules, for
example, picture preparing, joining, insertion, unique capacities,
enhancements, straight variable based math, Fourier Transform, grouping,
and numerous different undertakings. This library is utilized with NumPy to
perform a proficient numerical calculation
Special Features :
Comfortably handles mathematical operations
Provides effective and efficient numerical routines, such as
numerical integration and optimization, using sub-modules
Supports signal processing
TensorFlow
Anyone engaged with AI machine learning tasks utilizing Python must
have, at any rate, knew about TensorFlow. Created by Google, it is an open-
source representative math library for numerical calculation utilizing
information stream diagrams. The scientific activities in a normal
TensorFlow information stream diagram are spoken to by the chart hubs.
The chart edges, then again, speak to the multidimensional information
exhibits, a.k.a. Tensors, that stream between the diagram hubs.
TensorFlow parades an adaptable design. It enables Python engineers to
convey calculation to one or numerous CPUs or GPUs in a work area, cell
phone, or server without the need for revising code. All libraries made in
TensorFlow are written in C and C++. Broadly utilized Google items like
Google Photos and Google Voice Search are constructed utilizing
TensorFlow. The library has a convoluted front-end for Python. The Python
code will get accumulated and, after that, executed on TensorFlow
conveyed execution motor. 
Special Features:

Allows preparing various neural systems and numerous GPUs,
making models exceptionally productive for enormous scale
frameworks
Easily trainable on CPU and GPU for disseminated figuring
Flexibility in its operability, which means TensorFlow offers the
choice of taking out the parts that you need and leaving what you
don't
Great level of network and designer support
Unlike other information science Python libraries, TensorFlow
improves the way toward imagining every single piece of the
diagram.
Keras
It is recognized as one of the coolest AI (Algorithm) Python libraries; Keras
offers a simpler tool for communicating neural systems. It additionally
features extraordinary utilities for accumulating models, preparing datasets,
imagining charts, and significantly more. Written in Python, Keras can keep
running over CNTK, TensorFlow, and Theano. The Python AI library is
created with an essential spotlight on permitting quick experimentation. All
Keras models are compact.
Contrasted with other Python AI libraries, Keras is moderate. This is
because of the way that it makes a computational diagram utilizing the
backend framework first and, after that, uses the equivalent to perform
activities. Keras is extremely expressive and adaptable for doing creative
research.
Special Features :
Being totally Python-based makes it simpler to troubleshoot and
investigate
Modular in nature.
Neural system models can be joined for growing increasingly
complex models
Runs easily on both CPU and GPU
Supports practically all models of a neural system, including
convolutional, inserting, completely associated, Pooling, and

repetitive.
Seaborn
Fundamentally an information perception library for Python, Seaborn, is
based over the Matplotlib library. Additionally, it is firmly incorporated
with Pandas information structures. The Python information perception
library offers an abnormal state interface for drawing appealing just as
useful factual charts.
The primary point of Seaborn is to make representation an imperative piece
of investigating and getting information. Its dataset-arranged plotting
capacities work on exhibits and information edges containing entire
datasets. The library is perfect for inspecting connections among numerous
factors. Seaborn inside makes all the significant semantic mapping and
measurable collection for creating educational plots. The Python
information representation library additionally has devices for picking
among shading palettes that guide in uncovering designs in a dataset.  
Special Features :
Automatic estimation just as the plotting of direct relapse
models.
Comfortable perspectives on the general structure of complex
datasets.
Eases building complex representations utilizing abnormal state
deliberations for organizing multi-plot matrices.
Options for picturing bivariate or univariate disseminations.
Specialized support for utilizing clear cut factors.
Natural Language Toolkit (NLTK)
A valuable for common language preparing and design acknowledgment
undertakings, and which can be utilized to create intellectual models,
tokenization, labeling, thinking and different assignments helpful to AI
applications.
Special Features :
Comes with a linguistic structure tagger

Supports lexical assessment

Chapter 9: Artificial Intelligence and Python
Artificial intelligence, i.e., A.I have been around for more than half a
century, and its development is exponentially rising. The market for AI is at
its strongest, and you landed right at the right location if you want to hear
about Artificial Intelligence. This book on Artificial Intelligence and
Python will allow you to understand all the AI concepts in Python.
9.1 What is Artificial Intelligence?
Artificial intelligence (AI) is an instrument for rational reasoning and
behavior. These computers are powered by software inside them, so AI has
a great deal to do with innovative software programs that power them. It is
a science that can help the machines understand the world and react to
situations in the same way as people.
Looking at how AI has emerged over the last few decades, you will see that
different researchers tend to focus on other IA definition concepts. In the
real world, AI is found in many diverse ways across many verticals. The
robots we want are detecting, understanding, dreaming, and behaving. We
want to make our robots logical as well.
AI is closely connected to human brain research. Researchers conclude that
AI can be done by understanding the workings of the human brain. By
imitating how the human brain thinks, believes, and behaves, we will create
the same computer. This may be used as a forum to build intelligent
learning systems.
9.2 What Is Machine Learning?
Machine learning is implementing artificial intelligence ( AI) that allows
devices to learn and develop behavior automatically without being directly
programmed. Machine learning focuses on creating computer systems that
can manipulate and use data for their purposes.
The learning process starts with insights or evidence, such as evidence,
direct experience, or training, to identify trends in knowledge and, based on
the examples we provide, to make informed decisions in the future. The
primary purpose is to allow computers to automatically learn and change
behavior without human involvement or assistance.

Using classical machine learning algorithms, the text is called a keyword
sequence; instead, it is a semantically processing approach that imitates the
human capacity to interpret a book's context.
9.3 Role of Python programming in modern-day Artificial
Intelligence
Python is very helpful for its Artificial Intelligence prototyping algorithm.
The organization also supports interpretive execution time without regular
compiler languages and has unique structured algorithms for AI, such as
concise grammar, data structures, and simple control flow.
Artificial Intelligence and Python
Python
It is a high-level object-oriented programming language with complex
semantics. It decreases software development costs with an easy to read and
clear syntax that can be read even by beginners.
Artificial Intelligence
It is a computer science field that prioritizes the development of intelligent
machines capable of functioning like humans, such as speech recognition,
visual perception, translation, and even choice.
Advantages and Features of Python
Simple Interpretation by a Virtual Machines or Emulator
It does not have to be compiled into a machine language before execution.
Still, the programmer can run it directly using native machine language that
is comprehensible to the hardware.
Language of High-Level Programming
It includes variables, tables, complex arithmetics, artifacts, Boolean
expressions, and other abstract principles to make it more accessible.
General Purpose Programming Language
It can be used over technology and realms.

Automatic Memory Control and Dynamic Type System
It has a range of programming styles, including imperative, object-oriented,
functional, and procedural characteristics.
Independent Platform
It can be worked on all operating systems and is a language of open-source
programming.
Why AI and Python?
In contrast with other OOPs, Python provides 1/5th of code. There are some
reasons why we should pick Python for AI from other programming
languages.
Built-In Libraries:
Numpy, PyBrain for Python Machine Language, Scipy for advances
Computing are the library's libraries that render Python the right language
for AI.
Robust Community:
Python developers worldwide support and contribute by forums and guides
to help write code.
Independent Platform:
It makes versatile use of various operating systems with few simple coding
changes.
OOPs Scripting and Concept Choice
Help for IDE (Integrated Software Environment) to escape developers'
difficulties by using multiple algorithms.
Python Encoding With AI
Python has a range of library packages for AI project creation and
decoding. Few of the advanced packages:
NumPy

It is used as a general data container consisting of an N-Dimensional Array
Item, C / C++ resources for integration, Random Number Ability, and other
features.
Pandas
It provides Python with easy-to-use data structures and computational
methods and is an open-source library.
Matplotlib
It is a 2D plotting library that produces quality images for publications.
AIMA
Russel and Norvig use "Artificial Intelligence – A New Solution" for the
application of general AI algorithms.
PyDatalog
This is a Python logic programming engine.
Easy
It was used to build a basic two-player Python engine for AI games. (ex:
Negamax) (in French only)
PyBrain   
A simple but powerful Machine Learning algorithm for evaluating and
comparing predefined environments.
PyML
A bilateral SVM and other kernel methods system. And Linux and Mac OS
X were also supported.
Scikit-Learn
The most popular machine learning library is a highly powerful data
analysis platform.
MDP-Toolkit

The learning algorithm is managed and unattended and can be extended to
the usage of the network architecture.
NLTK
The Natural Language Toolkit is used in linguistic data and documents for
text interpretation and natural language processing study and development.
AI Python Vs. C++
Python is the most common C++ language for AI and leads
developers with a 57% vote. Python is easy to read and apply.
They can also be used for data mining with multiple repositories.
C++ wise efficiency beats Python. This is since C++ is a
statically typed language, so there are no typing errors at
runtime. C++ also makes runtime programming more lightweight
and faster.
Python is a dynamic language (rather than a static one), which
reduces complexity when it comes to interacting; you can
introduce features in fewer coding. Unlike C++, which can be a
particular framework for all essential compilers, Python code can
be used on nearly all platforms without spending time on
particular setups.
Python has the edge over C++ by growing the GPU-accelerated
programming capability for parallelism, resulting in libraries
such as CUDA Python and cuDNN. This means that GPUs are
being discharged more and more from the real programming for
learning machines – and the effect is that any performance gain
that C++ may provide grows meaningless.
Python wins over C++ in terms of code simplicity, especially
among new developers. Having a language at a lower level takes
more knowledge and ability.
The simple syntax from Python also makes a generally more
straightforward ETL method (Extract, Convert, Load) and helps
developers to evaluate the machine learning algorithms easily
compared to C++.
Concluding

Python meets any need to create an artificial intelligence framework by
offering strong frames and efficient libraries along with easy-to-use
visualization software. When AI requires 500 kB of Java code, Python can
be implemented with 20 to 30 code lines, including libraries, to show that
the Python plays a crucial role in the Artificial Information system. Study
the best Python and Artificial Intelligence training at SLA Employment in
Chennai along with exact resources and qualified coaches and advice on
placements.

Conclusion
Congratulations! If you've made it this far. We hope that you have truly
begun to understand the basic concepts and complexities of Python
Programming. At this point, we suppose, you should be able to read almost
any code written in Python with confidence and understanding.
We have tried to cover a fair number of important Python concepts and
features in this book, including some of the concepts of object-oriented
programming, also known as "OOP." Furthermore, we have tried to make
writing clear and easy to understand, and this book includes many
theoretical, practical, and explained examples.
In the world of computer science and computer programming, you may find
many academic books. Many of them are designed for students. You may
find some other books that are purposely destined for professional
developers who need personal advice on how to resolve syntax problems
and runtime problems in the code when developing a program. If you learn
by coding, in this book, few pages do not have source code for Python, but
every concept is demonstrated by at least one coding sample.
The code samples are very well-formatted, easy to read, and clean so that
you may find Python programming easy.
Moving forward, if you are a beginner in learning Python, just read this
book out as this book contains eight chapters so that you may have a better
understanding of Python within a week.
Some individuals may say that this book is not for beginners! Just look at
its size! This book is just too overwhelming for a beginner like you!
Please do not listen to them!
You should go for an easier one if you find one. Well, we cannot tell you
whether this book is right or wrong. We guess that everyone's
understanding is quite different. We can suggest that this book is suitable
for a person who is a newbie in computer programming, but a business
graduate!

