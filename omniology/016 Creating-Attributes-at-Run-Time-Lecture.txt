©2019 MathByte Academy

Instances and Setting Function Attributes at Runtime
We saw that we can add to an instance namespace directly at runtime by using setattr or the dot 
notation
class MyClass:
language = 'Python'
obj = MyClass()
obj.__dict__ à {}
obj.version = '3.7'
obj.__dict__ à {'version': '3.7'}
What happens if we create a new attribute whose value is a function?
obj.say_hello = lambda: 'Hello World!'
then
obj.say_hello
à function
not a bound method!
obj.say_hello() à 'Hello World!'
but say_hello does not have access to the instance namespace
©2019 MathByte Academy

Can we create and bind a method to an instance at runtime?
Yes
à just need to define a method that binds the function to the instance
class MyClass:
language = 'Python'
obj = MyClass()
from types import MethodType
MethodType(function, object)
function we want to bind
the object to bind to
obj.say_hello = MethodType(lambda self: f'Hello {self.language}!', obj)
say_hello is now a method bound to obj
à only obj has been affected
à no other instances have that method
à 'Hello Python!'
©2019 MathByte Academy

Coding
©2019 MathByte Academy

