www.allitebooks.com

Flex on Java 
BERNERD ALLMON 
JEREMY ANDERSON 
1 1 
M A N N 
I N G 
Greenwich 
(74ü w. long.) 
www.allitebooks.com

For online information and ordering of this and other Manning books, please visit 
www.manning.com. The publisher offers discounts on this book when ordered in quantity. 
For more information, please contact 
Special Sales Department 
Manning Publications Co. 
180 Broad St. 
Suite 1323 
Stamford, CT 06901 
Email: orders@manning.com 
©2011 by Manning Publications Co. All rights reserved. 
No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in 
any form or by means electronic, mechanical, photocopying, or otherwise, without prior written 
permission of the publisher. 
Many of the designations used by manufacturers and sellers to distinguish their products are 
claimed as trademarks. Where those designations appear in the book, and Manning 
Publications was aware of a trademark claim, the designations have been printed in initial caps 
or all caps. 
© Recognizing the importance of preserving what has been written, it is Manning's policy to have 
the books we publish printed on acid-free paper, and we exert our best efforts to that end. 
Recognizing also our responsibility to conserve the resources of our planet, Manning books 
are printed on paper that is at least 15 percent recycled and processed without the use of 
elemental chlorine. 
Manning Publications Co. 
180 Broad St. 
Suite 1323 
Stamford, CT 06901 
Development Editors: 
Copyeditor: 
Typesetters: 
Cover designer: 
Nermina Pascal-Miller 
Sebastian Stirling 
Betsey Henkels 
Dennis Dalinnik 
Marija Tudor 
ISBN 9781933988795 
Printed in the United States of America 
1 2 3 4 5 6 7 8 9 
10 - MAL - 16 15 14 13 12 11 10 
www.allitebooks.com

contents 
foreword xi 
preface xiii 
acknowledgments xv 
about this book xvii 
author online 
xix 
about the authors xx 
about the cover illustration 
xxi 
PARTI 
LAYING THE FOUNDATION 
1 
J Some Flex with your Java? 3 
1.1 
A whirlwind tour of Flex 
5 
MXMLandActionScript 
5' 
The Rex SDK 
6 
Flash Player 10 
6 
1.2 
Creating an application in Flex 
7 
1.3 
Finding the right tools and patterns 
8 
Building a Flex interface. 9 • Integrating with web 
services 9 • Integration with BlazeDS, logging, and 
messaging 
10 • Securing Hex applica tions 
10 • Crea ting 
custom Flex controls with Dégrafa 
I I ' Desktop 2.0 
with Adobe AIR 
I I ' Flex and Grails 
11 
1.4 
Summary 
11 
V 
www.allitebooks.com

X 
C O N T E N T S 
Beginning with Java 12 
2.1 
Working with AppFuse 
13 
2.2 
Generating the application structure with Maven 
13 
Download and install the JDK 
14 • Download and install 
MySQL 
15 • Download and install Maven 
15 • Create a 
Maven multimodule project 
16 1 Maven provides a build able 
project 
18* 
Running the NexBugs web application 
19 
2.3 
Build the model objects 
20 
2.4 
Build the DAOs 
23 
2.5 
Build the services 
24 
2.6 
Wiring things together with Spring 
2V 
2.7 
Constructing the web tier 
28 
Building Struts 2 action classes 28 • Editing the issue 
menu item 
30 • Adding JSP resources 30 • Adding 
property resources 33 • Configuring the struts.xml 
34 
Configuring Hibernate 
36 
2.8 
Summary 
37 
Getting rich with Flex 38 
3.1 
Generating the application structure 
38 
3.2 
Configuring the flex-bugs-ria module 
40 
3.3 
Configure Maven for the flex-bugs-web module 
42 
3.4 
Adding a wrapper for our SWF 
44 
3.5 
"Hello World!" in Flex 
44 
3.6 
Developing the FlexBugs application 
46 
Introducing ViewStack 47 * HeaderView 
49 • FooterView 
Master view 
52 • Detail view 
53 • Commen ts view 
54 
3.7 
Laying out the components 
55 
3.8 
Creating a pop-up component 
57 
3.9 
The finished application 
58 
3.10 
Summary 
59 
Connecting to web services 60 
4.1 
Model View Presenter 
61 
4.2 
Web services in Flex 
62 
4.3 
Dispatching and handling events 
63 
Creating a custom ei>ent, 63 • Event, dispatching 
64 
www.allitebooks.com

C O N T E N T S 
vii 
4.4 
Creating Issue and Comment transfer objects 
65 
4.5 
Enhancing the master view 
66 
Creating a Presenter for the master view 
67 * Creating an 
Issue Model 
69 • Updating the master view 
70 
4.6 
Enhancing the detail view 
72 
Creating a DetailPresenter 
72 • Updating the 
IssueModel 
75 • Updating the detail view 
76 
4.7 
Enhancing the comments view 
77 
Creating a comments presenter 
77 • Creating a 
comment model 
80 • CommentView 
81 
4.8 
Adding a pop-up form for editing comments 
83 
Updating the CommentPresenter 
83 • Updating the 
CommentModel 
85 • Creating the pop-up 
component 
85* 
Updating CommentsListView 
87 
4.9 
Summary 
88 
PART II 
BLAZEDS REMOTING 
89 
5
BlazeDS remoting and logging 91 
5.1 
Introducing BlazeDS 
92 
5.2 
Getting BlazeDS 
93 
5.3 
Building a BlazeDS configuration Maven module 
94 
Configuring BlazeDS 
96 
5.4 
Exposingjava services to Flex remoting 
100 
Web module configura tion upda tes 100 • Expose AMF 
remoting destinations 
102 
5.5 
Connecting to Java with BlazeDS 
104 
5.6 
Logging 
105 
BlazeDS logging 
105 • Built-in BlazeDS benchmarking 
107 
5.7 
Summaiy 
110 
Flex messaging 112 
6.1 
Setting up BlazeDS for messaging 
113 
Modifying the: services-config.xml 
113 • Updating the 
webapp server-side module 
114 
www.allitebooks.com

viii 
C O N T E N T S 
6.2 
Modifying the client for messaging 
117 
Creating a ChannelSetFactory 
117 • Changing 
the IssueModel 
118 
6.3 
Summaiy 
120 
PART III 
THE JOYS OF FLEX ON JAVA 
121 
7 
8 
Securing and personalizing your application 123 
7.1 
Authentication 
124 
Modifying the ChannelSetFactory 
124 • Creating a 
UserEvent 
125 • Creating a login panel 
126 • Creating a 
login Presenter 
128 • Creating a login manager 
130 
Upda ting the header 
131 • Enabling security for Flex 
132 
7.2 
Authorization 
133 
Hex Spring Security primer 
133 • Spring Integration 
Security 
135 • @Secured annotations 
135 
Overriding default security settings 
137 • Updating 
IssueModel and CommentModel 
138 
7.3 
Personalization 
139 
Adding the• UserServiceto the: LoginModel 
140 • Updating 
the LoginPresenter 
141 • Updating the DetailPresenter 
and CommentsListPresenter 
142 
7.4 
Summaiy 
145 
Charting with Degrafa 147 
8.1 
Drawing in Flex 
148 
8.2 
Common Degrafa concepts 
149 
8.3 
Creating a pie chart for fun and profit 
150 
New custom ei>ent. 151 • PieChart component 
152 
PieChartSlice 
154 • Custom ItemRenderer 
155 • Presenter 
for the PieChart 
156 • Model for the PieChart, 
158 
8.4 
Adding your pie chart to the application 
159 
Updating the GraphView 
159 • Creating a Presenter for 
the GraphView 
161 • Creating the graph model 
163 
8.5 
Beyond the example 
165 
8.6 
Summaiy 
167 
www.allitebooks.com

X C O N T E N T S 
Desktop 2.0 with AIR 
168 
9.1 
Creating a common library 
169 
Creating an SWC project 
170 ' Extracting common 
classes 172 ' Extracting a MainCanvas 
172 
9.2 
Creating the AIR application 
174 
9.3 
Packaging the AIR application 
176 
Crea ting a project to package the AIR app 
177 * Genera ting 
a certificate 
177 * Adding icons 
178 * Adding the AIR 
configuration 
179 * Configuring the package build 
180 
9.4 
Distributing the AIR application 
186 
Assembly configuration 
187 * Updating the 
build 
187 * Creating a download badge 
189 
9.5 
Summaiy 
191 
Testing your Flex application 192 
10.1 
Unit testing and TDD 
193 
10.2 
Updating the project 
194 
10.3 
Testing the Presenter 
196 
Testing refresh issues 198* 
Issues result event 
test 
199* 
Testing issue removed 
200 
Remove issue result test 201 
10.4 
Testing the View 
202 
Testing the issues set property 
203 * Testing resetlssueGrid 
function 
204 * Testing refresh issues button click 
204 
Testing DataGrid item select 205 
10.5 
Testing the Model 
206 
Mocking and Remote-Object 207 * Testing 
getlssues 209 * Testing get single issue 
209 
10.6 
Continuous integration with Hudson 
210 
Downloading and installing Hudson 
211 * 
Configuring 
Hudson 
211 * Con figuring a Hudson job 
214 
10.7 
Summaiy 
217 
Flex on Grails 218 
11.1 
Why Groovy and Grails? 
218 
11.2 
Downloading and installing Grails 
219 
www.allitebooks.com

X 
C O N T E N T S 
11.3 
Creating the Grails application 
220 
Create the Contact domain model 
221 • Create the 
ContactService 
222 • Bootstrap sample data 
223 
11.4 
Getting rich with Flex 
223 
Installing the Flex plugin 
223 • Creating the domain classes 
in Flex 
224 • Creating the Flex application 
225 • Adding the 
RemoteSeruice 
228 • Putting it all together 228 
11.5 
Install the Grails JMS and ActiveMQ plugins 
229 
11.6 
Add the ActiveMQ Spring bean 
230 
11.7 
Subscribe the Flex client to the Grails JMS service 
230 
Update the services-config.xml 231 • Modifying the 
ContactService 232 • Update the Main, mxml 
233 
11.8 
Summary 
234 
index 
235 
www.allitebooks.com

foreword 
Every ten to fifteen years there is a radical software paradigm shift. Many of us experi-
enced die last shift as die web gained momentum and software was rebuilt for a new 
and game-changing deployment model. Today we are in die midst of anodier great 
software paradigm shift. User and business needs now require software to be more 
usable, extensible, and portable. 
Rich Internet Applications (RIAs) represent a new generation of software. As the 
name implies, RIAs provide users with a rich and interactive experience. At the same 
time, they offer the ease of deployment that made early web applications so successful. 
RIAs are the future of software because they combine the strengths of the web deploy-
ment model with the full client capabilities of thick-client software. 
Since 2004 Adobe Flex has been die most prolific toolkit for building RIAs. A pri-
mary advantage of Flex for RIA development is that it integrates easily with any back-
end technology. By providing native XML, SOAP, and Data Remoting capabilities, Flex 
enables developers to build rich new UIs on top of existing services. For Java develop-
ers this combination is especially compelling because many Java systems have already 
embraced service-oriented architectures with SOAP Web Services, Spring, or one of 
numerous other technologies. 
The union of Java on the backend and Flex on die frontend is so powerful that 
hundreds of thousands of developers have already embraced this new paradigm to 
create better software. You've probably picked up this book because you want to do 
the same tiling—build better software. We all want to build software that we are proud 
of—software that users will love. Flex on Java will teach you how to do just that. 
xi 
www.allitebooks.com

xii 
F O R E W O R D 
There are many aspects to building great software. If software looks sexy but does 
not perform well or is not maintainable, its value is diminished. What I love about this 
book is that it teaches a holistic approach to building great software with Flex and 
Java. As you would expect, you will learn how to create rich data visualizations. But, 
just as importantly, you will learn how to efficiently move data between the client and 
server using BlazeDS, set up unit tests, add security to an application, and more. These 
are the problems we have to solve in real software. Knowing how to address these fun-
damental issues frees us to focus on what matters most—creating software that users 
will love. 
These are exciting times for software developers! Today we are building the next 
generation of software—a generation that will be remembered as the first to be 
usable, beautiful, and truly helpful. Flex on Java empowers you to create that future! I 
look forward to seeing the future that YOU build with Flex and Java. 
JAMES WARD 
TECHNICAL EVANGELIST FOR FLEX AT ADOBE 
www.jamesward.com 

preface 
If you'd asked me a few years ago if I'd ever write a book, I would have laughed at the 
thought. All through high school and college I loathed writing anything more than a 
short answer, and when it came to writing papers, I was usually one of the people ask-
ing about the minimum length required for a passing grade. Now here we are, thou-
sands of words and hundreds of pages later, and BJ and I have survived writing our 
first book, twice. 
So how did I go from absolutely loathing writing to being willing to dedicate so 
many nights and weekends to writing this book? Since the first 1.0 release of the Flex 
framework, I've been a fan. I discovered Flex while I was distaining HTML/JavaScript 
and browser compatibility issues. I was trying to prototype a form-heavy application 
with complex business rules and validation, struggling with goofy layout issues and 
JavaScript errors, and was looking for a better solution. Although it's possible to make 
rich web applications using HTML and JavaScript, it's easy to make ugly ones. Most of 
the nice AJAX frameworks we take for granted today didn't exist at the time, and many 
developers had absolutely no idea what AJAX was. 
One night, while searching for an alternative, I ran across this excellent framework 
that allowed you to write Flash-based applications using a declarative syntax and a pro-
totyping scripting language similar to JavaScript, without the cross browser issues 
because it all ran in the Flash Player. So I picked up a copy of Developing Rich Clients 
with Macromedia Flex by Steven Webster and Alistair McLeod and immediately fell in 
love with the Flex framework. There was only one problem: it was expensive. It was 
going to be a hard sell for any but the largest projects. 

xiv 
P R E F A C E 
Flex effectively dropped off my radar as billable projects took precedence, and I 
didn't have the time or desire to work on any side projects. Then in 2007 Adobe 
announced that it would open source the Flex framework and portions of the Live-
Cycle Data Services server components as an open source project of its own called 
BlazeDS. When I heard this announcement I figured it was time to start learning Flex 
again. I had discovered a self-published book called Flexible Rails, about integrating Flex 
with Ruby on Rails, and because I was already learning Ruby on Rails, this book was a 
good choice. So I purchased the PDF and a few short weeks later the author, Peter Arm-
strong, announced that Manning Publications was going to publish the book. 
Being a Java developer for most of my professional career, I began to think about 
the lack of good books on integrating Flex with a server-side backend. There was a 
plethora of Flex books available on the market; however most were written from the 
perspective of a Flash developer and used techniques that would make any seasoned 
Java developer cringe. Few discussed connecting to either LiveCycleDS or BlazeDS. So 
I proposed the idea of writing a book on Flex from a web developer perspective to 
Michael Stephens at Manning. 
The book took many shapes. At one time, we contemplated writing a book on both 
Java and .NET with Flex; we finally settled on an early version of what you now hold in 
your hands. The main premise of the book is that you can add a Flex frontend to an 
existing application. The first version of this book attempted to use an existing open 
source Java web application as its sample application. When we were about two-thirds 
of the way through the book, we realized that the sample application wasn't working 
as intended. We'd planned to have a sample application that would be more than just 
a throwaway. We wanted the readers to develop an application that would incorporate 
techniques they could apply to their everyday work, but not something so complex 
that it would distract readers from what we were trying to accomplish—demonstrating 
Flex and Java. 
After much reflection and discussion on the sample application, we decided to 
scrap it and use AppFuse, an open source platform for quickly building Java web appli-
cations, as the basis for our application. This allowed us to construct a sample applica-
tion in just one short chapter. AppFuse provided many functions out of the box that 
we would have otherwise had to spend time discussing and setting up. Unfortunately 
this also meant that much of what we had already written had to be changed, but I feel 
this was a necessary change for the better. 
Here we are, two years later, with a final product that I can proudly say I helped to 
write. I hope that you enjoy this book and that it helps you in your journey of integrat-
ing Flex into your everyday work. 
JEREMY ANDERSON 

acknowledgments 
This book would not have been possible if not for the hard work of many people. 
We'd like to thank everyone at Manning, especially Maijan Bace and Michael Ste-
phens, for giving us the opportunity to write—and rewrite—the book. Without the 
hard work and dedication of our development editors, Nermina Pascal-Miller and 
Sebastian Stirling, this book would not have happened. Thanks for your guidance 
and encouragement. Thanks to Karen Tegtmeyer, our review editor, for arranging 
the peer reviews and to Stephen Hong, for helping to market and promote the book. 
The rest of Manning's staff was patient and supportive and provided us with invalu-
able assistance to help make this book a success, in particular our copyeditor Betsey 
Henkels and our proofreader Elizabeth Martin. 
Special thanks go to Richard Dammkoehler for doing such an excellent j o b in his 
technical review of the final manuscript shortly before it went to press. 
We'd also like to express our thanks to Michael Kimsal for publishing a two-part 
article based on the Grails chapter of this book in the excellent GroovyMag. 
Thank you to Matt Raible for giving us AppFuse, which allowed us to build a sam-
ple application in just one short chapter, and for promoting our book in his travels. 
Thanks to the Adobe team for giving the Flex framework, BlazeDS, and more to 
the open source community. 
Thanks to Marvin Froeder (also known as Velo) for his hard work in developing 
the FlexMojos Maven plugin, which we use extensively throughout the book. 
Thank you to Giacomo "Peldi" Guilizzoni, founder of the outstanding Balsamiq 
Mockups tool (a fine example of an Adobe AIR application) for providing us with 
xv 

xvi 
A C K N O W L E D G M E N T S 
licenses. Many of die mockups you see as illustrations throughout this book were cre-
ated using this tool. 
Thanks to the following reviewers who read die manuscript at different stages of its 
development and contributed invaluable feedback: Jeremy Flowers, Sopan Shewale, 
Rick Evans, Christophe Bunn, Phil Hanna, Nikolaos Kaintantzis, John Griffin, Doug 
Warren, Brian Curnow, and Peter Pavlovich. Thanks also to everyone who contributed 
on die MEAP forum. 
Last but not least, thank you to James Ward for contributing the foreword to 
our book. 
Jeremy Anderson 
Fd like to thank God for blessing me with the talent necessary to write this book. 
Second only to God is my wife Karla, who had the patience to see me through this 
and keep me on task. To my children, Emily and Isaac, thanks for allowing Daddy to 
hide in his basement office to write. Without their support, understanding, and sacri-
fice, this book would not have been possible. 
Next, big thanks to my coauthor and partner in crime, BJ. If he hadn't joined me 
on this venture, there might not have been a Flex on Java. 
Thanks to everyone at Pillar Technology, especially Gary Gentry, Bob Meyers, Chris 
Beale, Patrick Welsh, Matt VanVleet, Rich Dammkoehler—and everyone else who pro-
vided support. 
Thank you to Carl Erickson and everyone at Atomic Object for helping me solidify 
my interpretation of die Passive View pattern in the sample application. 
BJ Allmon 
Thanks to my God and Father in heaven who is the author of life. Your love 
endures forever. 
I'm humbled by the patience and die love demonstrated to me by my wonderful 
bride Sarah and our kids Hannah, Zacharee, Elliot, and Jennessee. Thank you for 
allowing me to steal precious time away to work on this book. I love you so much! 
Without my coauthor Jeremy Anderson's talent and thoughtfulness, I wouldn't 
have been able to contribute to this project. Thank you Jeremy for your hard work in 
leading this project! 
Others who have helped me along in myjourney include Bob Myers, Christopher 
Judd, Kevin Smith, Charlie Close, Gary Gentry, Richard Dammkoehler, Matt Van Vleet, 
Randy Thomas, and Dan Wiebe; die many talented developers at Pillar Technology 
Group including Mark Flickinger, Ankur Gupta, Beth Seabloom, and Shawn Steinb-
runner; the wonderful staff at Mettler-Toledo; die entire staff at Click4Care; the Dela-
ware City Vineyard, Vineyard Church Delaware County, Vineyard Columbus; and my 
extended family. 

about this book 
There are many books available that are purposed for teaching technology topics 
inside and out. These books are necessary for understanding how to use a technology 
correctly but many times are not meant to teach you what a normal day of a develop-
ment would look like using that technology. This book was written to demonstrate prac-
tical development with two powerhouse technologies, Flex on Java. It will guide you in 
building your own applications that scale for real-world business needs, leaving you 
feeling equipped with the fundamentals that are pertinent to the software feature or 
task at hand. 
Throughout the book, the fundamentals of building testable and rich UIs that 
communicate with a powerful server side are brought together in bite-sized chunks. 
The topic of building a robust Flex client that sits on top of a Java server-side applica-
tion will be discussed throughout as it pertains to the integration of the two and pass-
ing data back and forth. 
Along with the main topic of integrating Flex with Java, topics such as Maven, 
Spring integration, adding security and personalization, charting, messaging, AIR 
desktop applications, logging, continuous integration, AppFuse, and even Flex on 
Grails will be demonstrated. 
Who should read this book 
This book is geared toward developers with a need for creating rich applications, on a 
budget, with Flex 4 and Java. All the tools we use for our examples are open source or 
free and very proven. 
xvii 

xviii 
A B O U T T H I S B O O K 
This book assumes familiarity with software development in general, specifically 
Flex and Java. Though it was written with the intent to teach integration techniques 
for Flex and Java, not language fundamentals, it was done so to make it easy for even 
Flex or Java beginners to get rolling quickly with both. 
How the book is organized 
Flex on Java is made up of three parts: 
• Part 1 Getting started 
• Part 2 Strengthening the backend 
• Part 3 Going above and beyond 
We start off by introducing the two technologies and building a sample Java applica-
tion you can play with. We go on to build a Flex client for the Java application that ties 
into some Java web services. Part 1 covers the first four chapters. 
In chapters 5 and 6 we dive deeper into backend integration with Java on the 
server side. Part 2 introduces topics that allow Flex to connect to Java through object 
remoting, logging, and messaging. Using the Spring Framework for Flex integration is 
very powerful and we demonstrate how that can be done. 
Part 3, chapters 7-11, covers topics that are off the beaten path, such as security 
and personalization, building graphs, desktop development with AIR, unit testing, and 
building a Flex and Grails application. 
Code conventions 
All source code in listings or in text is in a fixed-width font l i k e this to separate it 
from ordinary text. Code annotations accompany many of the listings, highlighting 
important concepts. In some cases, numbered bullets link to explanations that follow 
the listing. At times, only the important segments of a code listing are displayed on the 
page. The source code for all of the examples in full can be downloaded from the pub-
lisher's website atwww.manning.com/FlexonJava. 

Author Online 
The purchase of Flex on Java includes free access to a private forum run by Manning 
Publications where you can make comments about die book, ask technical questions, 
and receive help from die autiiors and otiier users. To access and subscribe to die 
forum, point your browser to www.manning.com/FlexonJava. This page provides 
information on how to get on the forum once you are registered, what kind of help is 
available, and the rules of conduct in the forum. 
Manning's commitment to our readers is to provide a venue where a meaning-
ful dialogue between individual readers and between readers and die autiiors can 
take place. It's not a commitment to any specific amount of participation on the 
part of the autiiors, whose contribution to the book's forum remains voluntary 
(and unpaid). We suggest you try asking die authors some challenging questions, 
lest their interest stray! 
The Author Online forum and die archives of previous discussions will be accessi-
ble from die publisher's website as long as the book is in print. 
xix 

about the authors 
JEREMY ANDERSON is a software developer for Pillar Technology Group, an Agile con-
sulting firm in the Michigan and Ohio Valley region. He is a self-proclaimed autodi-
dact, constantly tinkering with cutting edge technologies such as Groovy, Grails, and 
Flex. He's been developing web-based applications on the JVM in one shape or 
another for over five years. When he's not sitting behind a keyboard hacking away at 
code, you can usually find him out on the single-track on his bike or sometimes even 
on foot. He sometimes has time to update his blog http://blog.code-adept.com. 
BJ ALLMON is a software developer for Pillar Technology Group. He enjoys participat-
ing in local user groups and conferences and becoming a more seasoned software 
practitioner. When he is not dabbling in software development he can be found 
spending time with his family of six and playing the six-string. 
xx 

about the cover illustration 
The figure on the cover of Flex on Java is a "Soldier." The illustration is taken from a 
collection of costumes of die Ottoman Empire published on January 1, 1802, by Wil-
liam Miller of Old Bond Street, London. The tide page is missing from die collec-
tion and we have been unable to track it down to date. The book's table of contents 
identifies die figures in both English and French, and each illustration bears die 
names of two artists who worked on it, both of whom would no doubt be surprised 
to find dieir art gracing die front cover of a computer programming book...two hun-
dred years later. 
The collection was purchased by a Manning editor at an antiquarian flea market in 
the "Garage" on West 26th Street in Manhattan. The seller was an American based in 
Ankara, Turkey, and die transaction took place just as he was packing up his stand for 
the day. The Manning editor did not have on his person the substantial amount of 
cash that was required for the purchase and a credit card and check were both politely 
turned down. Witii die seller flying back to Ankara tiiat evening the situation was get-
ting hopeless. What was die solution? It turned out to be notiiing more than an old-
fashioned verbal agreement sealed witii a handshake. The seller simply proposed that 
the money be transferred to him by wire and die editor walked out witii the bank 
information on a piece of paper and the portfolio of images under his arm. Needless 
to say, we transferred die funds die next day, and we remain grateful and impressed by 
this unknown person's trust in one of us. It recalls something that might have hap-
pened a long time ago. 
www.allitebooks.com

xxii 
A B O U T T H E C O V E R I L L U S T R A T I O N 
The pictures from the Ottoman collection, like the other illustrations that appear 
on our covers, bring to life the richness and variety of dress customs of two centuries 
ago. They recall the sense of isolation and distance of that period—and of every other 
historic period except our own hyperkinetic present. Dress codes have changed since 
then and the diversity by region, so rich at the time, has faded away. It is now often 
hard to tell the inhabitant of one continent from another. Perhaps, trying to view it 
optimistically we have traded a cultural and visual diversity for a more varied personal 
life. Or a more varied and interesting intellectual and technical life. 
We at Manning celebrate the inventiveness, the initiative, and, yes, the fun of the 
computer business with book covers based on the rich diversity of regional life of two 
centuries ago, brought back to life by the pictures from this collection. 

Part 1 
Laying the foundation 
J L a r t 1 lays the foundation of Flex on Java by touring Flex, Java, and other sup-
porting technologies that you will use throughout the book. 
In these first four chapters, you will build a sample Java web application to 
use with numerous code examples throughout the book. The Java web applica-
tion is built using a service-oriented architecture (SOA). 
After making a whirlwind tour of Flex (chapter 1), your first step (chapter 2) 
is to create a Java application that will expose web services you will later use to 
connect to them from a Flex client. 
In chapter 3, you will create a Flex application and words like AppFuse, Flex 
Mojos, and FNA enter your vocabulary. 
The focus of chapter 4 is to continue building the client-side application and 
you will begin building a Flex client that will connect to the Java web services 
that you will choose to expose. 

Some Flex iimh 
your JoBi? 
This chapter covers 
• A brief history of Java and Flex 
• A whirlwind tour of Flex 
• 
M X M L and ActionScript 
In 1995, Sun introduced the first Java platform and gave birtii to die applet which 
allowed Java applications to run inside die browser with rich functionality and all 
the benefits of die Java framework, including connecting to die server side. The 
applet became hugely popular for a couple of years before its popularity waned 
mainly because of problems surrounding die browser plugin. 
Macromedia embraced the idea of having a dedicated runtime environment for 
the browser, like die Java applet, and in 1997 released die Flash Player. Adobe has 
since taken over die rights to die Macromedia suite of products and helped to 
evolve what is now die Flex framework and development API. 
Building features in an applet from scratch or even witii other rich imple-
mentations can be expensive compared to die simplicity of using die Flex frame-
work. Figure 1.1 displays a simple Java applet data grid next to a Flex data grid. 
The Flex data grid right out of die box not only looks better tiian die applet, it's 
3 

Spreadsheet 
27 CHAPTER 1 
Some Flex with your Java ? 
kim. a 
IIHI' 
-icDac 
d I .. I — Euntpb 
R**«. 
l.r^^y 
Territory Rep 
Actual 
EltiAUl* 
T & Sevthw**t 
V &A 
<0000 
10000 
aoooo 
k|Q South«*tt M m 
Barbara J-ennm-gp 36865 
<0000 
10000 
aoooo 
Q *Outhw»»t 
¥ L3 Central California 
[J Seuttivwit 
* U Nevada 
• Northern California 
Central California 
Dana Hmn 
Jo« Smith 
29885 
291X4 
<0000 
10000 
aoooo 
• _j Southern Cahfornu 
Figure 1.1 
Comparing a Java applet DataGrid (left) to a Flex Advanced DataGrid 
much more functional with much less code overhead. The Flex DataGrid and 
AdvancedDataGrid components provide built-in support for tasks such as sorting, 
dragging columns, row highlighting, data nesting, and styling. 
The Flash runtime provides lightweight graphics and animation capabilities in 
manageable file sizes, making the player hugely successful across OSs and browser 
platforms. The Flash runtime allows for rich applications to have true stateful experi-
ences and a high level of security. 
NOTE 
A stateful experience with Flex means that the client (Flex) will man-
age or remember everything it needs to without having to: submit to the 
server side, update and manage a session or request through HTTP, and 
refresh the client side with updated data after a submit with data from the ses-
sion or request. 
In general, Java developers have successfully leveraged the principles of object-
oriented programming (OOP) to build extremely stable, testable, and extensible 
applications. Flex has become a rich internet application (RIA) solution for Java 
developers because it not only bridges the gap between a solid server side and a 
great UI, it is also built on top of OOP principles such as encapsulation, inheritance, 
and polymorphism. 
These advantages benefit other technologies besides pure Java, as you'll see in 
chapter 11, when we demonstrate Flex integration with Grails, one of the hottest web 
development platforms. We'll build a simple contact management system and learn 
how to get rolling with Groovy and Grails development. Integrating Flex with Grails is 
in many respects easier than integrating Flex with Java. 
Flex development is now bolstered by many of the benefits of Java-like frameworks 
for performing unit testing, functional testing, and continuous integration. The com-
bination of Java and the Flex Software Development Kit (SDK) allows developers new 
to the business to start building applications immediately. 

A whirlwind tour of Flex 
5 
A thriving Flex open source community can offer Java developers GUI components 
as simple and as complex as required. Most of tiiese custom components extend stock 
Flex objects found in die Flex SDK. Adobe made Flex 3 open source, and it now has 
numerous community resources. The Flex SDK witii Adobe's built-in charting compo-
nents is still commercial. 
We have chosen Flex 4 witii Java because of the duality of a rich and stateful 
client in conjunction witii a powerful server side. Also, Java is broadly used in die 
mainstream and is die existing server-side platform for many Flex migration proj-
ects. Although there are alternative ways for doing RIA development, Flex will most 
likely prove to be the superior RIA framework because of die simplicity and test-
ability it provides to developers. We're now ready to discuss some of Flex frame-
work features. 
1.1 
A whirlwind tour of Flex 
It's time to take a peek at the components we'll use throughout this book. We 
won't go into too much detail about the components as that is beyond die scope of 
this book. Instead, we'll focus on die usage of components and framework in real-
world development. 
1.1.1 
MXML and ActionScript 
At die heart of every Flex application you'll find a combination of MXML files (XML 
files with the .mxml extension) and ActionScript classes. These two components are 
the basic building blocks of die Flex framework. The Flex compiler takes these files 
and creates a small web format (SWF) file, which is executed in the Flash Player. 
M X M L 
MXML is an XML-based markup language similar to HTML/XHTML. The MXML syn-
tax, used to declaratively define your application, has numerous tags for common UI 
objects, such as text input fields, radio buttons, and drop-down lists. It also has many 
UI components and layout components that are common in rich client development, 
such as menu bars, tabbed panels, data grids, and navigational trees. In addition, it's 
possible to build custom components that extend existing ones or produce something 
completely different like the flow visualization chart. Figure 1.2, which was made with 
Degrafa, shows this function. 
In chapter 8 we'll be covering the Degrafa drawing API for Flex to create a pie 
chart for a sample application. 
ACTIONSCRIPT 
ActionScript, and more specifically ActionScript 3.0, is a dynamic scripting language 
based on die ECMAScript Language Specification, Third Edition. It is composed of 
the language specification and die Flash Player API. It is similar to JavaScript in syntax, 
so it should look familiar to any experienced web developer. Unlike JavaScript, Action-
Script is compiled into byte code before being executed, instead of being parsed and 
interpreted at runtime. 

6 
CHAPTER 1 
Some Flex with your Java ? 
Figure 1.2 
Flow visualization chart 
NOTE 
Dozens of user controls, powered by ActionScript, are available witii 
Flex out of the box. As we demonstrate later in tiiis book, existing compo-
nents can be extended to create your own custom components. Because your 
application will always run inside die Flash Player, you don't have to worry 
about cross-browser compatibility issues either. In chapter 8 we'll go over how 
to utilize custom components in your Flex applications using ActionScript for 
die purpose of reuse. 
ActionScript is a dynamically typed language similar to Pytiion or Groovy and does its 
type checking at runtime instead of at compile time. You have die option of directing 
die compiler to perform type checking at compile time by enabling strict mode on die 
compiler, but tiiis is not a good substitute for a comprehensive set of unit tests. 
The Flex SDK and Flash Player are die two key elements in making a Flex applica-
tion come to life. 
1.1.2 
The Flex SDK 
The Flex 4 SDK comes in two flavors: die Free Adobe Flex SDK and the Open 
Source Flex SDK. Both contain everytiiing you need for developing, optimizing, and 
debugging Flex applications. The SDKs include die ActionScript and MXML compil-
ers, tools for creating JavaDoc-like documentation, and die Flex Framework. The 
only difference between die two is tiiat die Free Adobe Flex SDK contains addi-
tional components that enhance the Flex application, such as tools for advanced 
font encoding, tools for packaging Adobe Integrated Runtime (AIR) applications, 
and die Flash Player. These extra components are not open source but have been 
made available by Adobe. To learn more about the Flex SDK downloads visit http:// 
opensource.adobe.com/wiki/display/flexsdk/downloads. 
1.1.3 
Flash Player 10 
O f course none of tiiis could be possible without the Flash Player 10 runtime. It is the 
heart and soul of every Flex application. Although Flash Player itself is not open 

Creating an application in Flex 
7 
source, it has been free since its inception and can be found on nearly every computer 
in the world. Flash Player gives your Flex applications the ability to execute in the 
same manner and look the same no matter what browser your application runs in. 
Because your Flex application runs inside Flash Player, you do not have to be con-
cerned with cross browser issues. 
Adobe contributes ActionScript engine source to Mozilla 
In November 2006, Adobe contributed the source code for its ActionScript virtual 
machine to the Mozilla foundation, spawning the Tamarin project. Tamarin will sup-
port ECMAScript Edition 3 and be integrated into the SpiderMonkey project, Mozil-
la's next generation JavaScripting engine to be included with future versions of 
Mozilla (https://developer.mozilla.org/en/Tamarin). 
Because of the widely popular Flash Player and a powerful open source SDK, Flex is a 
great fit for Java developers building rich clients. 
Now comes the part we've all been waiting patiently for—we're going to create a 
"Hello World!" styled application in Flex. 
Creating an application in Flex 
Let's start by modeling our directory structure, shown 
in figure 1.3, after the Maven default project struc-
ture. This will prove useful because we're using Maven 
to build the FlexBugs sample application in chapter 2. 
The sample application can be placed in a proj-
ect directory such as C:\de\\projects for Windows, or 
/home/<YOUR_USERNAME>/development for Linux. 
The main source code location for our "Hello 
World!" sample application will be contained in the 
src/main/flex folder. Because ActionScript follows a 
Figure 1 3 The folder structure for 
pattern similar to Java for packages, if your Action- 
our "Hello World!" application is 
Script class belongs to the com. example package, the 
formatted for the Maven build 
source for this class will be contained in the src/main/ 
flex/com/example 
folder. The src/main/resources 
folder should contain any resources that belong to the application but are not com-
piled with the sources. For example, any configuration files or message bundles belong 
in the resources folder. The src/test/flex and src/test/resources folders are identical 
to the src/main/flex and src/main/resources folders respectively, except these folders 
are for the test code of the application. 
For the purpose of introducing Flex code, listing 1.1 demonstrates a trivial exam-
ple of a simple Flex application. We're going to create a single .mxml file that will 
print the words "Flex 4 is Fun" as seen in figure 1.4. 
a . J helloviofldaop 
- i j src 
1= 
roain 
O flex 
resources 
B Q test 
Q 
flex 
Q 
resources 

31 CHAPTER 1 
Some Flex with your Java ? 
Figure 1.4 
A simple Flex application 
As you can see there's nothing fancy happening here and the code presented in list-
ing 1.1 is also simple. 
Listing 1.1 
Main.mxml 
<?xml version= "1.0" encoding= "utf-8" ?> 
<•-© XML document declaration 
<s:Application 
<—. 
xmlns : fx= "http: //ns. adobe. com/mxml/2009 " 
Q 
MXML application root 
xmlns:mx="library://ns.adobe.com/flex/halo" 
xmlns:s="library://ns.adobe.com/flex/spark"> 
<s:layout> 
<s:VerticalLayout /> 
</s:layout> 
< fx:Style> 
.helloText { 
padding-top:2 5px; 
padding-left:25px; 
font-weight: bold; 
color: haloBlue; 
} 
</fx:Style> 
<s:RichText styleName="helloText"> 
<s:text> 
Flex 4 is Fun 
</s:text> 
</s:RichText> 
</s:Application> 
If you've ever done any web development, this should look familiar. MXML, like 
XHTML, is nodiing more tiian XML. At the beginning of die file you'll see die stan-
dard XML declaration Q . Next you'll see die root node witii the defined xml 
namespaces Q , which in most Flex applications will be witiiin die <mx: A p p l i c a t i o n 
element. In chapter 3, we'll evolve this example by creating a nice Flex application. In 
chapter 9, where we talk more about Adobe AIR, we'll explain that die root node for 
an AIR application is typically <mx:WindowedApplication>. Inside die <mx:Applica-
tion> element is a style element Q and a single RichText element Q witii its text 
attribute set to "Flex 4 is Fun". 
Finding the right tools and patterns 
As diis book's tide suggests, Flex on Java will focus on Flex integration with Java. Witii 
that in mind, we diligently searched for die perfect ingredients to equip you with die 
right tools for real-world scenarios without overcomplicating tilings. 
| File : ///C :/D ocum e.. .n-debug/t est.h t m I 
Flex 4 is Fun 
Flex ess style support 
1 » 
RichText element 

Finding the right tools and patterns 
9 
We're not focusing on teachingjava, but we build a simple Java web application in 
chapter 2. We chose frameworks that should ease the Java learning curve necessary to 
get a sample application up and running fast. We won't dive deep into every part of 
Flex development. Instead, Flex on Java will provide you with simple yet powerful 
examples of integrating the two technologies. 
Therefore, we'll be tackling in detail the topics outlined in the sections that follow. 
1.3.1 
Building a Flex interface 
Often developers begin building naked UI components without being connected to a 
backend server and database. A disconnected Flex client can take advantage of mock 
data and allow developers to easily prototype the UI without the complexity of exter-
nal dependencies. 
This approach is demonstrated in chapter 3 where we create the beginnings of a 
rich UI for the FlexBugs sample application shown in figure 1.5. 
1.3.2 
Integrating with web services 
What may seem unfamiliar to you in this chapter is that when we connect to the server 
side we'll be modeling our application using the Model-View-Presenter (MVP) design 
pattern instead of employing the typical approach of using the mxml tag element that 
doesn't scale well for most applications. Using the MVP approach, all web services calls 
FlexBugs 
| Retrain US! | 
Add Ndw Convrtdfil Ed* 
UI Da;e» Commam . 
Shirty Saius 
Lo»n j 
10: 
Project [ 
De&CfipDon: 
OsiaiitVtew ( Gfa&ft Vte* 
i 
I 
Rftpor»3 By 
Reported On: 
Aasiflned To: 
Efrbtiaiad HOLTS: 
Sovony | 
J 3 
Acdisfrue | Can» Cf-anges j 
Copyr«ill C 2009 Fie* On Java 
Figure 1.5 
The FlexBugs sample Flex application 

10 
CHAPTER 1 
Some Flex with your Java ? 
will be wrapped in a Model object written in ActionScript. This makes changing die 
implementation less painful. 
Connecting to server-side services, event dispatching, and event handling are all 
diings diat are critical to any Flex business application and are built into the core of 
die framework. That's why in chapter 4 we'll demonstrate connecting to die Java 
server side and how to leverage the powerful Flex API for connecting to web services. 
Plenty of literature, including die Flex online documentation, covers the typical 
approach of connecting to services. In this book, we'll create clean interfaces and 
views as we build a well-designed Flex client that will scale on demand. 
1.3.3 
Integration with BlazeDS, logging, and messaging 
Until fairly recently if you wanted to connect your data-driven application to a Java-
based backend, your choices were fairly limited. You could expose your Java services 
as XML web services, eitiier as SOAP-based or RESTful and connect to diem tiiis way, 
write your own custom marshaler/unmarshaler based on the Adobe AMF protocol, 
or pony up big bucks for a license for Adobe's LiveCycle Data Services. With die 
release of Flex 3, Adobe decided to spawn BlazeDS, an open source project that con-
tains much of die functionality specific to connecting Flex to a Java-based service. 
Integrating Flex witii Java is what tiiis book is all about. That's why chapter 5 will 
demonstrate furtiier how to connect a Flex client more direcdy to die server side 
using die open source BlazeDS framework. BlazeDS provides a mechanism for allow-
ing Flex to call methods on Java objects through binary serialization with die Action 
Message Format or AMF. This is much faster tiian what's possible witii web services or 
XML/HTTP(s) because it uses real objects and doesn't have to marshal XML. 
Because logging is a critical component of any application and development envi-
ronment, chapter 5 also covers BlazeDS logging in detail. 
Real-time messaging is an important feature in most enterprise applications. Chap-
ter 6 will demonstrate how to develop Flex applications diat take advantage of simple 
polling; in chapter 11 we'll discuss how to connect using Java Message Service (J MS). 
The Flex framework provides an API diat enables distributed communication witii the 
server side or communication between clients that is loosely coupled and asynchro-
nous. Flex has both a powerful and simple API for handling messaging. 
1.3.4 
Securing Flex applications 
Many technical books skip security, but it's always the elephant in die living room 
when gathering requirements for an application. It's important to understand die 
security issues of Flex both to decrease risk and to minimize die cost of what can be 
one of the most expensive features in any business application. Chapter 7 will demon-
strate building authentication, authorization, and personalization with Spring Secu-
rity (Acegi) integration. 
www.allitebooks.com

Summary 
11 
1.3.5 
Creating custom Flex controls with Degrafa 
Custom components are first class citizens inside the Flex framework, and many 
ActionScript frameworks take advantage of this. One that really stands out is Degrafa, 
which is a declarative graphics framework that provides a suite of graphics classes. 
Degrafa is open source and can be used to build robust charts, tools, and other graph-
ical elements with less effort and complexity than other frameworks. 
We'll create a custom pie chart component that will be appropriately tied into our 
sample application in chapter 8. While we're at it we'll also demonstrate creating a 
DataGrid ItemRenderer and perform dynamic object creation. 
1.3.6 
Desktop 2.0 with Adobe AIR 
A business sometimes can't live with the web alone, and when a desktop client is the 
best way to go, Flex goes beyond the web with Adobe AIR. A Flex application can easily 
be ported to a desktop environment with AIR. This is especially easy for well-designed 
applications that allow for optimal reuse of code. Chapter 9 will demonstrate how to 
allow a Flex application to live in two worlds—by demonstrating how to package and 
distribute an AIR application. 
1.3.7 
Flex and Grails 
The Groovy programming language is the first dynamic scripting language to be 
adopted as a standard through the Java Community Process 0CP). The specification 
for Groovy can be found under Java Specification Request (JSR) 241 at http://jcp.org/ 
en/jsr/detail?id=241. Groovy supports powerful features that can be found in other 
languages like Python, Ruby, and Smalltalk; Grails is a full development stack for 
Groovy that provides a rapid development environment for both server side and the 
web that resembles and rivals the Ruby on Rails (RoR) framework. With Flex and 
Grails you can quickly create a dynamic application that runs on the JVM with much 
less effort. Flex integration with Groovy and Grails is covered in chapter 11. 
1.4 
Summary 
Whether you're experienced or inexperienced in building web or desktop applica-
tions with Flex on Java, this book will teach you how to integrate Flex on Java quickly 
and effectively. Combining Flex with Java allows developers to provide rich UIs with 
robust server-side technologies and does so with minimal effort and cost. Flex and Java 
are proven technologies and have continued to be improved over time and used by 
many companies around the world. 
In chapter 2, we lay a foundation by building a sample Java web application for use 
throughout the majority of the examples in the rest of this book. This should be use-
ful if you don't already have an application or need assistance in getting started with 
setting up a Flex on Java development environment. Setup-type chapters can feel 
slightly mechanical because of the downloading and installation they cover. We've 
tried to keep it interesting and painless while using popular development environ-
ment frameworks that the majority of you will be pleased to see utilized. 

This chapter covers 
• Generating the application structure with 
Maven 
• 
Building Java server-side domain objects 
and services 
• 
Building a simple JSP Ul 
We'll begin by creating a Java application that will expose web services so we can 
later connect to them from a Flex client. We have attempted to avoid tying die 
book to a specific sample application by focusing more on the concepts and tech-
niques of using various frameworks and tools. This should allow you to pick a topic 
in die book tiiat interests you and get rolling on it. We'll demonstrate many topics 
by using an application built in tiiis chapter called FlexBugs. If you want to follow 
the samples in die book you can download die full code listings on die book's web-
site at http://manning.com/allmon. You could also replace the application con-
tents with something tiiat's more meaningful to you by changing the domain 
objects to manage whatever you want, like contacts or movie favorites. 
Throughout die book, especially in tiiis chapter, we leverage a few Java frame-
works diat help to lighten die amount of work required to build a fully func-
tional web application. This chapter is a bit mechanical because we need to set up 
12 

Generating the application structure with Maven 
13 
a development environment. A few downloads and installs must take place if you 
choose to use our samples. Feel free to browse through this chapter and skip what 
you already know. 
The Java frameworks used will help keep development to a minimum while 
creating a sample application to work with for integration purposes. This will allow 
us to focus on teaching and demonstrating how to build synergy between Flex 
and Java. 
We're building a Java application first as a basis for work in chapter 3, but you 
can start witii Flex in chapter 3 if you'd like or move around die book as conve-
nient. The Java application comes first because we expect most readers to be refac-
toring existing applications to include a Flex client and tiiis will give you sometiiing 
to play with quickly. 
We'll start by generating die project structure witii Apache Maven, a convention-
over-configuration project management framework. Maven will build die applica-
tion for us and speed up the development process. After we have a project structure 
generated, we'll start building the server-side components while leveraging MySQL 
for die database. 
For die Java server-side pieces, we'll start with creating plain old Java objects 
(POJOs), Data Access Objects (DAOs), and service objects that will be exposed to a 
web tier. 
Let's write a simple Java server-side application using the AppFuse framework. 
AppFuse was created by Matt Raible of Raible Designs to simplify die construction of 
Java web applications through convention. Using AppFuse on die server side will allow 
us to focus on die integration of Flex witii Java creating simple domain and service 
Java objects. 
Working with AppFuse 
Because die layers of architecture and complexity can make approaching die building 
of a Java web application a bit daunting, AppFuse is a great technology choice because 
it simplifies dealing with the layers and delivering value faster. 
AppFuse allows a Java developer to quickly start focusing on business domain con-
cerns. A typical Java application will be POJO-driven and wired together through 
Spring, the open source dependency injection (DI) framework. The DI design pattern 
helps to build applications with loosely coupled components making your application 
more flexible and testable. In addition, AppFuse comes stocked with Maven integra-
tion to make tilings even easier. Let's get things rolling by installing Maven. 
Generating the application structure with Maven 
To pigeonhole Maven by calling it a build system doesn't do it justice. Apache Maven 
is a software project management and comprehension tool. What exactly does that 
mean? At the core of every Maven project is a project object model, more affec-
tionately known as die POM, and from this POM Maven can build our application, 

14 
CHAPTER 2 
Beginning with Java 
generate reports, generate documentation, and more, all from a single description 
of the project. To learn more about Maven check out the Apache Maven project site 
at http://maven.apache.org or download the free ebook from Sonatype at http:// 
www.sonatype.com/book. 
Before moving ahead with Maven, be sure you have the Java Development Kit 
(JDK) version 1.5 or greater properly installed. You can follow the next section for that 
or skip it if you're ready to go. After you install the JDK, be sure to install the MySQL 
database as well. You'll need MySQL installed before generating the project with the 
AppFuse Maven archetype. 
2.2.1 
Download and install the JDK 
To run any Java server-side environment, you must install and configure the JDK. 
Download and install JDK 1.5+ from the Sun website at http://java.sun.com/javase/ 
downloads/index.jsp. Refer to the Java documentation for instructions on how to 
install Java on your specific platform. Set up an environment variable for JAVA_HOME 
that points to the JDK directory. It's also helpful to add the JDK's bin directory to the 
path. Open a command prompt and type in the Java version to verily that Java is 
installed correctly. The version information of the configured JDK should be pre-
sented as shown in figure 2.1. 
After Java is configured you can move on to setting up the open source 
MySQL database. 
Figure 2.1 
Verify that Java is set up correctly by checking the version 

Generating the application structure with Maven 
15 
2.2.2 
Download and install MySQL 
To demonstrate database integration and persistence you'll use MySQL, which is an 
open source database that is extremely lightweight. Download and install MySQL 5.x 
or higher from the MySQL website at http://dev.mysql.com/downloads/mysql. 
Here you'll set up a database for the FlexBugs sample application. After you have 
MySQL installed pull up the command prompt and log in to MySQL using the root 
account, then create the flexbugs database as shown in figure 2.2. Using the com-
mand mysql -u root -p will instruct MySQL to log in to the local host instance of 
MySQL using the root account. It will ask for the password. Please record the admin 
account's user and password for later reference. Creating the database is as simple as 
executing the command c r e a t e database flexbugs. 
Let's move on to installing Maven to create the project structure, manage the 
dependencies, and build the application. 
2.2.3 
Download and install Maven 
Maven can be downloaded at http://maven.apache.org/download.html. Be sure to 
download version 2.0.9 or above. After Maven is downloaded you should set up an 
M2_HOME environment variable that points to the directory where Maven was 
installed. The M2_HOME/bin directory will need to be set onto the path as well or 
exported for any UNIX platform. For more assistance on installing or configuring 
Maven refer to the Maven documentation at 
http://www.sonatype.com/books/ 
mvnex-books/reference/installation-sect-maven-install.html. 
c\ C:\WIND0WS\systeiri32\cmd.exe - mysql -u root -p 
-Ja) x 
C:\Documents and Settings\ballmon>mysql -u r o o t 
-
Enter password: hmmhkmmmm 
Welcome to the MySQL monitor. 
Commands end with 
Vour MySQL connection 
id i s 4 
S e r v e r v e r s i o n : 5.1.31-community MySQL Community 
ip 
; o i> 
. 
Sei-uei- <CPL> 
A 
Type 
J h e l p ; * 
or '\h* f o r h e l p . Type 
J\c* 
to 
c l e a i 
the bill f e r . 
mysql> c r e a t e database 
f l e x b u g s ; 
Query OK, 1 row a f f e c t e d <0.00 
s e c ) 
mysql> 1 
Figure 2.2 
Using the MySQL commands to log into the database instance and create the flexbugs 
database 

16 
CHAPTER 2 Beginning with Java 
2.2.4 
Create a Mavert multimodule project 
We're going to create a Maven multimodule project called FlexBugs. A multimodule 
project could be configured manually by creating a top-level super POM, adding proj-
ects under the super POM directory, and editing the super POM to include die mod-
ules with the modules element. We're going to use a technique that exploits a little 
known feature of the archetypexreate plugin, and the Maven site archetype to kick-
start die project. 
Creating a multimodule project has many benefits, die two most important being 
(1) the ability to build every artifact in a project with a simple mvn compile command 
and (2) if you are using either the Maven eclipse:eclipse plugin or the idea:idea 
plugin, you can enter this command at die root of the project, and it will generate all 
die project files for all of the contained modules. 
First you'll generate die top-level project using the maven-archetype-site-
simple archetype: 
mvn archetype:create 
-DgroupId=org.foj 
-Dartifactld=flex-bugs 
-DarchetypeArtifactld=maven-archetype-site-simple 
This generates a Maven project with the directory structure as 
shown in figure 2.3. 
The project generated is die minimum project setup nec-
essary to generate site documentation. The index.apt file is 
die main index page for die site, and is written in die Almost 
Plain Text (APT) format, which is a wiki-like format. You can 
also generate a more complete site project using the maven-
a r c h e t y p e - s i t e archetype like this: 
mvn archetype:create 
-DgroupId=[Java:the project's group id] 
-Dartifactld=[Java:the project's artifact id] 
-DarchetypeArtifactld=maven-archetype-site 
This will generate a project structure similar to figure 2.4. 
After you have generated die site project, edit die pom.xml created from die site 
archetype plugin. Make sure that the packaging type is set to pom. We've left sections 
out (denoted by ...) to be brief. 
Listing 2.1 
Packaging of type pom indicates a multimodule project 
<proj ect> 
<modelVersion>4.0.0</modelVersion> 
<groupId>org.foj</groupId> 
<artifactld>flex-bugs</artifactld> 
<version>l. 0-SNAPSHOT</version> 
Q 
Artifact type 
<packaging>pom</packaging> 
<1—' 
(jar, war, ear) 
£ 
} flex-bugs 
E 
src 
• Q 
site 
Q 
apt 
Figure 2.3 
The 
generated top-level 
Maven project 
</project> 

Generating the application structure with Maven 
17 
Because you set the packaging type to pom Q , any proj-
ects you generate from the root of the project direc-
tory will insert tiiemselves into the project by creating 
an entry into the modules section of the pom.xml for 
the site. 
AppFuse comes stocked with custom Maven arche-
types, which allow AppFuse to create different flavors of 
Java web applications with varying technology stacks. 
You'll use die Struts 2 Basic archetype for die FlexBugs 
sample application. 
In die root directory of your project tiiat you created 
previously, type die command in listing 2.2. 
I 
multi-module- project 
* 
srt 
j 
site 
apt 
J* fml 
- 
fr 
J , apt 
J „ fml 
xdoc 
*doc 
Figure 2.4 
A fully dressed up 
Maven site project 
Listing 2.2 
Create the f l e x - b u g s - w e b module for the Java server side 
mvn archetype:create 
-DarchetypeGroupId=org.appfuse.archetypes 
< — © 
-DarchetypeArtifactld=appfuse-basic-struts 
< — Q 
-DremoteRepositories=http://static.appfuse.org/releases 
-DarchetypeVersion=2 . 0 . 2 
<1 . 
-DgroupId=org. foj . flex-bugs 
<1—© 
Q 
-Dartif actld=f lex-bugs-web 
<1—Q 
The appfuse-basic-struts © archetype isn't a built-in Maven resource. Instead, it's 
provided through a remote repository © . You provide Maven witii coordinates to die 
archetype by also providing die archetypeGroupId O 
a n d archetypeVersion 
O 
along with die rest of die required details. The groupld © points to die top-level proj-
ect and the artifactld © is the name of die module you are about to create. 
After you've executed die command, look inside die top-level pom.xml from 
die main project. There should now be an entry toward die bottom of die file like 
the following. 
<modules> 
<module>flex-bugs-web</module> 
</modules> 
Executing die command in listing 2.2 should generate die project structure shown 
in figure 2.5. Don't be concerned witii die warnings while creating your project; tiiey 
are expected. As long as you see BUILD SUCCESSFUL at the end, your project was 
created successfully. 
As you can see from figure 2.5 Maven generated die project structure and added a 
couple of files for testing. 

18 
CHAPTER 2 Beginning with Java 
Figure 2.5 
Generated module structure using the 
appfuse-basic-struts archetype 
2.2.5 
Maven provides a buildable project 
If you look in die 
src/main/java/org/foj 
package you'll find a source file 
called App.java, and in die s r c / t e s t / j a v a / o r g / f o j package you'll find a unit 
test called AppTest.java. Remove both files as you will not need diem. 
Notice that Maven appears to be building something. In fact, die flex-bugs-web 
POM tries to build a deployable Java Web Archive or WAR but will first choke on a con-
figuration issue. If running the mvn j e t t y : r u n - w a r command witiiout changing the 
configuration you'll most likely get this error. 
[INFO] 
[ERROR] BUILD ERROR 
[INFO] 
[INFO] Error executing database operation: CLEAN_INSERT 
Embedded error: Access denied for user 1 root101localhost1 (using password: NO) 
[INFO] 
[INFO] For more information, run Maven with the -e switch 
Let's first edit the POM for die flex-bugs-web module. This POM will be located 
at die root of that module. There's a good deal going but we're going to focus on 
die piece we need to change. At die bottom you need to specify your MySQL user 
and password witii the values we specified when you set up MySQL earlier. Here's 
an example: 
B iLJ flex-bugs 
B ¡j J flex-bugs-web 
B Q 
src 
B l O main 
B U 
java 
B Q 
org 
B t2| foj 
_ j flex-bugs 
B 
resources 
Q 
META-1NF 
B Q 
webapp 
O 
common 
o 
WEB-INF 
Q 
site 
B I Q test 
B Q 
java 
B ^ 
org 
B l c l foj 
.. i flex-bug5 
i. *l resources 
S 
src 

Generating the application structure with Maven 
19 
<jdbc.urlx![CDATA[jdbc:mysql://localhost/ 
f lex_bugs_web?createDatabaseIfNotExist=trueS;amp; useUnicode=true&:amp; 
characterEncoding=utf-8]]></jdbc.url> 
<jdbc.username>root</jdbc.username> 
<jdbc.password>j ava4ever</jdbc.password> 
The Maven archetype we used, brought to us by AppFuse, made it extremely easy to 
get to this point—far easier tiian starting from scratch. 
2.2.6 
Running the FiexBugs web application 
Maven equips a developer with die ability to use die application immediately witiiout 
manually deploying it anywhere. Executing die Maven j e t t y : r u n - w a r goal from die 
flex-bugs-web module will gather all die resources, compile all the code and tests, 
execute die unit tests, generate test reports, build a deployable WAR file, and launch 
the WAR file in an embedded instance of the popular and lightweight Jetty servlet 
container. Using the a p p f u s e - b a s i c - s t r u t s archetype will also generate die default 
database for us and add configuration files to allow developers to quickly begin devel-
oping features. 
After you've run die j e t t y : run-war command, you can go to http://localhost: 
8080/flex-bugs-1.0-SNAPSHC)T and log in from tiiere. By default, you can log in to the 
application using admin for botii die username and password. After logging in, you 
are redirected to the administration panel as seen in figure 2.6. From tiiere you can 
do basic things like editing your user profile and managing users. 
AppFuse 
Providino integration and style to open source Java. 
Main Menu 
Edit Profile 
Administration 
Logout 
Welcome! 
Congratulations, you have logged in successfully! Now that you've logged in, you 
have the following options: 
0 Edit Profile 
o Upload A File 
Version l.O-SNAPSHOT | XHTML Valid | CSS Valid | Logged in as: admin 
© ZOOS Y 
Figure 2.6 
AppFuse default application 

43 CHAPTER 2 Beginning with Java 
The application shows nothing glamorous at this point although everything you see 
and can do has required a minor setup effort. AppFuse does much under die cov-
ers for us from a framework and technology perspective. It's possible tiiat getting a 
project togedier witii help from Maven saved us a week or more of typical Java 
development time. 
Before we start development of die FlexBugs sample application download the 
source code at https://ilexonjava.googlecode.com/svn/ilex-bugs/trunk. 
Build the model objects 
A model object is a POJO tiiat is persistable and mapped to die database. In our exam-
ple we're using AppFuse with die Spring framework and Hibernate to manage per-
forming database operations for objects tiiat are mapped to a database. 
Let's start with Issue. j ava as seen in listing 2.3. For the FlexBugs application you 
need sometiiing to store issues and comments. A n issue describes sometiiing that 
needs fixing to meet a requirement. This could be a bug, a new feature, a refactor, or 
an optimization. A single issue can have many comments so a relationship is built 
between the issue and comment objects. 
Listing 2.3 
The I s s u e model object 
package org. foj . model; 
<1—Q 
Model Java package 
import org. apache. commons . lang. builder. EqualsBuilder; 
< — Q 
Import declarations 
J 
©Entity 
public class Issue extends BaseObject implements Serializable { 
Java persistence 
framework 
private Long id; 
private String project; 
private String description; 
private String type; 
private String severity; 
private String status; 
private String details; 
private String reportedBy; 
private Date reportedOn; 
private String assignedTo; 
private Double estimatedHours; 
1 
Class instance 
variables 
@Id 
@GeneratedValue(strategy = 
public Long getldO { 
return id; 
public void setId(Long id) 
this.id = id; 
GenerationType.AUTO) 
Issue extends 
AppFuse BaseObject 
J 
Declares 
database pk 
relationship 
?k 
O 
"PJ 
Indicates 
how to 
generate Id 
1> 
1 ) 
"getter" method 
returns Id 
"setter" method 
sets Id 
www.allitebooks.com

Build the model objects 
21 
(iOverride 
<1—. 
public int hashCodeO { 
^jj) hashCode 
return new HashCodeBuilder(11, 37).append(id).toHashCode(); 
} 
(iOverride 
<1—. 
public boolean equals (Object o) { 
f n 
equals 
if (null == o) return false; 
if (!(o instanceof Issue)) return false; 
if (this == o) return true; 
Issue input = (Issue) o; 
return new EqualsBuilder() 
.append(this.getld(), input.getld()) 
.isEquals(); 
'' 
{ft 
toString provides 
(iOverride 
< - J 
object info 
public String toString() { 
return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE) 
.append(id) 
.append(proj ect) 
.append(description) 
.toString(); 
} 
You'll be storing the model objects in die org. foj .model Java package © and will use 
the AppFuse framework in conjunction witii die Spring Framework and Hibernate to 
simplify our application development. Spring provides DI and more while Hibernate 
is a database persistence framework that enables object relational mapping framework 
Q . The Id Q and GeneratedValue O annotation help to facilitate the persistence by 
designating a field as a database primary key. 
The Issue object is a subclass of die AppFuse BaseObject © 
and contains die 
instance variables © you need to describe an issue. All of the instance variables or 
fields have die getters © and setters © required by the JavaBean specification. 
NOTE 
Extending BaseObject requires us to override die toString 
equals Q , and hashCode (JJ) metiiods because they're defined as abstract in 
the BaseObject class. T o implement these metiiods we're leveraging the 
Apache Commons Builder package © 
for creating the elements for these 
metiiods. Whenever you're implementing the Serializable interface, it's a 
good idea to also implement the equals and hashCode metiiods and provide 
a serialVersionUID member. 
Next you'll create a model object for a comment. The Comment will be another persis-
table object. There can be many comments to a single issue. For the remainder of the 
code snippets in this chapter we'll use "..." for trivial things like imports and getters 
and setters of similar objects. 

22 
CHAPTER 2 
Beginning with Java 
Listing 2.4 
The comment model object 
©Entity 
public class Comment extends BaseObject implements Serializable { 
<1— 
private Long id; 
private Issue issue; 
private String author; 
private Date createdDate; 
private String commentText; 
@Id 
@GeneratedValue(strategy = GenerationType.AUTO) 
public Long getldO { 
return id; 
public void setId(Long id) { 
this.id = id; 
@ManyToOne(fetch = FetchType.EAGER) 
public Issue getlssueO { 
return issue; 
public void setlssue(Issue issue) { 
this.issue = issue; 
(iOverride 
public int hashCodeO { 
return new HashCodeBuilder(11, 37).append(id).toHashCode(); 
} 
(iOverride 
public boolean equals(Object o) { 
if (null == o) return false; 
if (!(o instanceof Issue)) return false; 
if (this == o) return true; 
Issue input = (Issue) o; 
return new EqualsBuilder() 
.append(this.getld(), input.getld()) 
.isEquals(); 
(iOverride 
public String toStringO { 
return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE) 
.append(id) 
.toString(); 
} 
Comment 
1 
declaration 
V 
A 
Comment has many-to-one 
^ T 
relationship with Issue 
} 

Build the DAOs 
23 
There's not much difference between an Issue and a Comment 
The class fields are 
related to comments and tiiere is a many-to-one relationship Q with Issue. We've also 
told Hibernate that we'd like it to eagerly fetch the Issue when returning die 
Comment. In typical Java web development you would keep the session open to lazily 
load die Issue object only when it's referred to at runtime, but because your Flex 
application runs external to the JVM you cannot take advantage of this luxury. 
Now that you have your model objects built you can create a set of DAOs. You'll 
need a DAO for issue and comment. 
2.4 
Build the DAOs 
AppFuse provides generic implementations for DAOs that you can leverage if your 
DAOs do nothing more than the basic create, retrieve, update, delete (CRUD) opera-
tions. Because your IssueDao will do only basic operations, there is no need to define 
a concrete IssueDao. You can instead use die GenericHibernateDao which you'll see 
later when you wire the beans in the application context. The CommentDao needs to 
implement a couple of operations that go beyond die basic CRUD operations so you'll 
first create an interface for the CommentDao. 
Listing 2.5 
The CommentDao.java 
public interface CommentDao extends GenericDao<Comment, Long> { 
List<Comment> getCommentsBylssueld(Long issueld); 
void deleteAHCommentsForlssueld(Long issueld); 
The CommentDao has two simple methods, one that returns a list of Comment objects by 
passing in the issueld argument, and another to delete all of die Comment objects for 
an issue. The second method facilitates the deleting of Issue objects. Because 
Comment has a foreign key relationship with Issue, you cannot delete an Issue if any 
Comments refer to it. 
NOTE 
We defined die relationship between Comment and Issue by annotat-
ing die field with a OOneToOne annotation, and could have also defined die 
reverse of that relationship in the Issue class by including a Set of Comment 
objects belonging to an Issue. Because we could not lazy load those objects, it 
would have forced us to eager load die Comment objects into the Set, which 
would force those Comment objects to eager load their Issue objects. This 
forces the Issue objects to eager load their Comments, and so on. This usually 
results in a stack overflow because you've effectively got a circular reference 
that causes an infinite loop of eager fetching. 
Now let's implement the ComrnentDaoIm.pl. 

47 CHAPTER 2 Beginning with Java 
Listing 2.6 
The CommentDaolmpl.java 
public class CommentDaoImpl extends GenericDaoHibernate<Comment, Long> 
implements CommentDao { 
public CommentDaoImpl() { 
super(Comment.class); 
} 
(iOverride 
(iSuppressWarnings ("unchecked") 
public List<Comment> getCommentsBylssueld(Long issueld) { 
return getHibernateTemplate().find 
("from Comment where issue_id = ?", issueld); 
} 
Much like tlie IssueDaoImpl, CommentDaoImpl extends GenericDaoHibernate but 
implements CommentDao. The only interesting thing happening here is tiiat you have a 
method tiiat returns a list of Comment objects by leveraging the Hibernate template 
and a query. Spring and Hibernate are a wonderful combination and make for clean 
and intuitive DAOs. 
Now that you've constructed die DAOs you can build services. 
Build the services 
Now you need to expose services to die web tier. You'll be able to take advantage of 
tiiese services for the Flex client you'll be building. Again you'll start with interfaces 
like IssueManager in listing 2.7. 
Listing 2.7 
The IssueManager.java 
package org.foj.service; 
import org.foj.model.Issue; 
import javax.jws.WebService; 
import java.util.List; 
(iWebService 
public interface IssueManager 
List<Issue> g e t A H O ; 
Issue get(Long id); 
Issue save(Issue issue); 
void remove(Long id); 
You define the IssueManager as a web service by annotating it using OWebService 
O - IssueManager contains methods defining your basic CRUD operations for read-
ing © and © , creating and updating Q , and deleting Q . Now let's take a look at 
the CommentManager. 
A 
IssueManager interface 
declaration with 
WebService annotation 
Return all 
1> 
Q 
R 
<j_J 
is 
<,_r 
issue by its ID 
1> 
issues 
A 
Get specific 
< - J 
is 
_ 
Save issue 
Delete issue 

Build the services 
25 
Listing 2.8 
The CommentManager.java 
package org.foj.service; 
import org.foj.model.Comment; 
import javax.jws.WebService; 
import java.util.List; 
@WebService 
public interface CommentManager 
CommentManager 
interface declaration 
with WebService 
annotation 
{ 
List<Comment> findCommentsBylssueld(Long issueld); 
void deleteAHCommentsForlssueld(Long issueld); 
Comment get(Long id); 
Comment save(Comment comment); 
void remove(Long id); 
1 , 
Remove 
comment 
Save 
comment 
Get comments 
for issue Id 
Delete all 
comments 
for issue 
CommentManager is also a web service O by virtue of it having the OWebService anno-
tation just as with the IssueManager. It contains a method to return a list of Comment 
objects by providing an issueld 
a method for deleting all comments for an issue 
id Q , a method for saving a comment Q and a method for deleting a comment Q . 
Now let's provide implementation for the services like IssueManagerlmpl. 
Listing 2.9 
The IssueManagerlmpl.java 
package org.foj.service.impl; 
import org.AppFuse.dao.GenericDao; 
import org.foj.model.Issue; 
import org.foj.service.IssueManager; 
import org.foj.service.CommentManager; 
import java.util.List; 
import javax.jws.WebService; 
(iWebService(serviceName = "IssueService", 
endpointlnterface = "org.foj.service.IssueManager") 
public class IssueManagerlmpl implements IssueManager { 
private GenericDao<Issue, Long> issueDao; 
private CommentManager CommentManager; 
public IssueManagerlmpl!) { 
} 
public IssueManagerlmpl(GenericDao<Issue, Long> issueDao, 
CommentManager CommentManager) { 
this.issueDao = issueDao; 
this.CommentManager = CommentManager; 
} 
A 
IssueManagerlmpl 
declaration with 
WebService 
annotation 
J 
Default no arg 
constructor 
1> Constructor 
public List<Issue> g e t A H O { 
return issueDao.getAll(); 
} 
Method that 
returns all Issues 

CHAPTER 2 Beginning with Java 
public Issue get(Long id) { 
return issueDao.get(id); 
} 
public Issue save(Issue issue) { 
return issueDao.save(issue); 
} 
public void remove(Long id) { 
commentManager.deleteAHCommentsForlssueld(id); 
issueDao.remove(id); 
} 
Get specific issue 
Save issue 
1> Remove an issue 
} 
The IssueManagerlmpl also uses the OWebService annotation just as in the interface, 
but provides die serviceName and e n d p o i n t l n t e r f a c e attributes Q . You provide a 
default no args constructor Q as well as one tiiat will be used by Spring to inject die 
IssueDao and CommentManager © . Next implement die methods for returning the list 
of Issue objects Q , returning a specific Issue Q , and saving an Issue Q by delegat-
ing die calls to diose metiiods to die IssueDao. The implementation for removing an 
issue Q first deletes any comments for die issue by calling die CommentManager, tiien 
removes die issue by calling die remove metiiod on die IssueDao. Now let's look at 
die CommentManager. 
Listing 2.10 
The CommentManagerlmpl.java 
package org.foj.service.impl; 
import org.foj.dao.CommentDao; 
import org.foj.model.Comment; 
import org.foj.service.CommentManager; 
import java.util.List; 
import javax.jws.WebService; 
CommentManagerlmpI 
declaration with 
WebService annotation 
(iWebService (serviceName = "CommentService", 
endpointlnterface = "org.foj.service.CommentManager") 
public class CommentManagerlmpI implements CommentManager { 
private CommentDao commentDao; 
public CommentManagerlmpI() { 
} 
J? 
Default no args 
constructor 
public CommentManagerlmpI(CommentDao commentDao) { 
<— 
this.commentDao = commentDao; 
public List<Comment> findCommentsBylssueld(Long issueld) 
return commentDao.getCommentsBylssueld(issueld); 
} 
public void deleteAHCommentsForlssueld(Long issueld) { 
commentDao.deleteAHCommentsForlssueld(issueld); 
} 
Constructor sets 
injected CommentDao 
instance to use 
J
Find 
comi 
fori! 
all 
comments 
issue 
1 
Delete all 
comments 
for issue 

Wiring things together with Spring 
27 
public Comment get(Long id) { 
return commentDao.get(id) ; 
} 
public Comment save(Comment comment) { 
return commentDao.save(comment); 
} 
public void remove(Long id) { 
commentDao.remove(id); 
} 
1, 
Get specific 
comment 
Save comment 
Delete comment 
Like IssueManagerlmpl, CommentManagerlmpl declares itself to be a WebService O -
Next using die @WebService annotation and defines its endpoint interface and 
service name you create a default no args constructor Q as well as one that will be 
used by Spring to inject your CommentDao 
You implement the methods to get the 
Comment objects for an issue 
deleting all the Comment objects for an issue Q , get-
ting a specific Comment 
saving a Comment Q , and deleting a Comment © by delegat-
ing to die CommentDAO. 
NOTE 
AppFuse provides GenericManager implementation base classes just as 
it does for DAOs, but we chose not to use them here because certain Web-
Service consumers such as Flex have difficulty dealing with web services that 
return objects such as ArrayOfAnyType, which is what AppFuse will return if 
we leverage the GenericManagers. T o work around this issue you'll be defin-
ing and implementing your CRUD operations for the web services explicitly. 
We're now officially done with the server-side objects and can wire tilings together 
with the Spring configuration and work on the web tier components. 
Wiring things together with Spring 
Spring enables developers to easily connect objects while keeping application compo-
nents loosely coupled and testable. Notice how we've wired die model, DAO, and ser-
vice objects together in die following listing. The applicationContext.xml is located in 
the src\main\webapp\WEB-INF directory, with other configuration files. 
Listing 2.11 
The applicationContext.xml 
is 
<!-- Add new DAOs here --> 
<bean id= " issueDao" class= 
0 
issueDao 
"org.AppFuse.dao.hibernate.GenericDaoHibernate"> 
<constructor-arg value="org.foj.model.Issue"/> 
<property name="sessionFactory" ref="sessionFactory"/> 
</bean> 
<bean id="commentDao" class="org.foj.dao.impl.CommentDaoImpl"> 
<property name="sessionFactory" ref="sessionFactory"/> 
</bean> 
commentDao 1 

28 
CHAPTER 2 Beginning with Java 
<!-- Add new Managers here --> 
<bean id="issueManager" class="org.foj.service.impl.IssueManagerlmpl"> 
<constructor-arg ref="issueDao"/> 
</bean> 
issueManager • 1 
<bean id= " commentManager" class= 
|J5f COmmentManager 
"org.foj.service.impl.CommentManagerlmpl"> 
<constructor-arg ref="commentDao"/> 
</bean> 
The first bean you define is GenericDao for die issueDao Q . The commentDao Q is 
defined widi your concrete implementation. Next, you create Spring beans for issue-
Manager Q and commentManager Q . The constructor-arg element is used to inject 
die dependencies into the service class constructor. 
Now tiiat we've wired things up witii Spring let's construct the web tier starting 
with Struts 2 framework action classes. 
2.7 
Constructing the web tier 
Struts 2 applications implement the Model-View-Controller (MVC) design pattern, 
which is not to be confused witii the M V P design pattern used to develop die Flex 
application. The pattern encourages separation between the data model, view ele-
ments, and controllers that sit between tiiem. The M V C pattern, widely adopted in die 
Java community, has made its way into otiier languages and frameworks, like Flex. 
2.7.1 
Building Struts 2 action classes 
You'll start by building controller or action classes first, like IssueAction. 
Listing 2.12 
The IssueAction.java 
package org.foj.action; 
import org.AppFuse.webapp.action.BaseAction; 
public class IssueAction extends BaseAction { 
private IssueManager issueManager; 
private CommentManager commentManager; 
private List<Issue> issues; 
private List<Comment> comments; 
private Issue issue; 
private Long id; 
public void setlssueManager (IssueManager issueManager) { 
<1— 
this.issueManager = issueManager; 
} 
public void setCommentManager(CommentManager commentManager) { 
< — 
this.commentManager = commentManager; 
} 
IssueAction extends 
AppFuse BaseAction 
Setters for 
A 
IssueManager and 
CommentManager 

Constructing the web tier 
29 
public String list() { 
issues = issueManage 
return SUCCESS; 
issueManager.getAll(); 
Returns list of 
Issue objects 
public String deleted { 
issueManager.remove(issue.getld()); 
saveMessage(getText("issue.deleted")); 
Deletes Issue 
return SUCCESS; 
} 
public String edit() { 
if (id != null) { 
Edits by Issueld 
issue = issueManager.get(id); 
} else { 
issue = new Issued; 
} 
comments = commentManager.findCommentsBylssueld(issue.getld()); 
return SUCCESS; 
public String saved throws Exception { 
if (delete != null) { 
return delete(); 
} 
boolean isNew = (issue.getld() == null); 
issue = issueManager.save(issue); 
String key = isNew ? "issue.added" : "issue.updated"; 
saveMessage(getText(key)); 
if (!isNew) { 
return INPUT; 
} else { 
return SUCCESS; 
IssueAction extends die AppFuse BaseAction © that contains many common metli-
ods diat actions rely on. IssueAction has setters for the service objects 
These set-
ters will be called by Spring, and their instances will be injected into the action class 
during runtime. IssueAction facilitates controlling communications to the server 
side from die web tier. It contains the methods for die view pages to list © , delete Q , 
edit Q or, most importantly, save Issue objects © . 
The CommentAction object serves the same purpose for die Comment object as the 
IssueAction object does for die Issue object. All the methods on CommentAction are 
if (cancel != null) { 
return CANCEL; 
Saves Issue 
} 
} 

30 
CHAPTER 2 Beginning with Java 
facilitating CRUD for the Comment POJO by calling the commentManager service. The 
CommentAction class can be downloaded from the website if needed. 
Now that die actions are in place, let's work on JSP files to create a simple UI for 
managing issues. 
2.7.2 
Editing the issue menu item 
First you have to modify die menu.jsp to get to the issues list. 
Listing 2.13 
The menu.jsp 
<menu:displayMenu name="MainMenu"/> 
<menu:displayMenu name= "UserMenu"/> 
O 
Adding IssueMenu item 
<menu: displayMenu name= " IssueMenu"/> 
<—' 
to the JSP view file 
<menu:displayMenu name="AdminMenu"/> 
<menu:displayMenu name="Logout"/> 
The menu JSP file reads in die menu xml data. To add the Issue menu item you 
need only add a single line O to tiiis file that is located in die flex-bugs-web/src/ 
main/webapp/common directory. In die following listing you'll provide die xml 
data for that menu item. 
Listing 2.14 
The menu-config.xml 
<Menu name="IssueMenu" title="menu.issue" 
description="Issues Menu" 
roles="ROLE_ADMIN,ROLE_USER" page="/issues.html"> 
<Item name="Viewlssues" title="menu.viewlssues" page="/issues.html"/> 
</Menu> 
I A 
Add Issue menu item 
f 
to menu data xml file 
By adding to die existing AppFuse plumbing that creates menu items O , you quickly 
gain access to new features. Let's create the IssueList.jsp that will be displayed when 
you click die issues menu item. 
2.7.3 
Adding JSP resources 
The issueList.jsp will display a list of issues and allow you to add or modify existing 
issues. The issue and comment JSP files will reside in the ../src/main/webapp/WEB-
INF/pages directory. 
Listing 2.15 
The issueList.jsp 
<%@ include file="/common/taglibs.jsp" %> 
<head> 
<titlexfmt: message key="issueList.title"/></title> 
<meta content="<fmt: message key=1issueList.heading 1/> 
</head> 
Essential tag 
O 
libraries bundle 
" name="heading"/> 
www.allitebooks.com

Constructing the web tier 
31 
<c:set var= " buttons " > 
<1—Q 
<input type="button" style="margin-right: 5px" 
onclick="location.href=1<c:url value="editlssue 
value="<fmt:message key="button.add"/>"/> 
<input type="button" onclick="location.href= 
'<c:url value="/mainMenu.html"/>1" 
value="<fmt:message key="button.done"/>"/> 
</c:set> 
<c:out value="${buttons}" escapeXml="false"/> 
<s:set name="issues" value="issues" scope="request"/> 
Variable holds button data 
html"/>1" 
Prints 
button data 
for display 
J 
Variable 
represents 
issues list 
<display:table name="issues" class="table" requestURI="" id="issueList" 
< 
export="false" pagesize="25 " > 
<display:column property="id" sortable="true" href="editlssue.html" 
paramld="id" paramProperty="id" titleKey="issue.id"/> 
<display:column property="project" sortable="true" 
titleKey= " issue. pro j ect " / > 
Displays nicely 
<display: column property= " description " sortable= " false " 
formatted table 
titleKey="issue.description"/> 
<display:setProperty name="paging.banner.item_name" value="issue"/> 
<display:setProperty name="paging.banner.items_name" value="issues"/> 
</display:table> 
<c:out value="${buttons}" escapeXml="false"/> 
<script type="text/javascript"> 
highlightTableRows("issueList"); 
</script> 
JavaScript highlights 
table rows 
To make life easier, you include a JSP that in turn includes a bundle of tag libraries O 
that are useful for die web application. You have button data that will be stored in a 
variable Q and a Java Standard Tag Library (JSTI.) tag Q that will print die buttons. 
You create a variable tiiat will hold a list of issues Q from die request scope and an 
HTML table tiiat is formatted using the included display tag library Q . A little 
JavaScript is used to highlight rows of data © . Now let's have a look at the issue-
Formjsp. 
Listing 2.16 
The issueForm.jsp 
<%@ include file="/common/taglibs.jsp" %> 
<head> 
<titlexfmt: message key="issueDetail.title"/></title> 
<meta content="<fmt: message key=1issueDetail.heading 1/>"/> 
</head> 
"s" Struts 2 
A 
form tag in 
action 
<s:form id="issueForm" action="savelssue" method="post" validate="true"> 
<s:hidden name="issue.id" value="%{issue.id}"/> 
Form text 
<s:textfield key="issue.project" required= 
"true" cssClass="text medium"/> 
<s:textfield key="issue.description" required="true" 
cssClass="text medium"/> 
f ' input fields 

55 CHAPTER 2 Beginning with Java 
<s:textfield key="issue.type" required="true" cssClass="text medium"/> 
<s:textfield key="issue.severity" required="true" cssClass="text medium"/> 
<s:textfield key="issue.status" required="true" cssClass="text medium"/> 
<s:textarea key="issue.details" required="true" cssClass="text medium"/> 
<li class="buttonBar bottom"> 
<—I 
<s: submit cssClass= " button" method= " save" 
A 
CRUD Button bar 
key="button.save" theme="simple"/> 
<c:if test="${not empty issue.id}"> 
<s:submit cssClass="button" method="delete" 
key="button.delete" onclick="return confirmDelete(1 issue 1) " 
theme="simple"/> 
</c: if > 
<s:submit cssClass="button" method="cancel" 
key="button.cancel" theme="simple"/> 
< /1 i> 
</s:form> 
<c:if test="${not empty issue.id}"> 
<s:form id="commentsForm" action="editComment 
method="post" validate="true"> 
<s:set name="comments" value="comments" scope="request"/> 
<s:hidden name="issue.id" value="%{issue.id}"/> 
<display:table name="comments" class="table" 
requestURI="" id="commentList" export="false" pagesize="25"> 
<display:column property="id" sortable="true" href="editComment.html" 
paramld="id" paramProperty="id" titleKey="comment.id"/> 
<display:column property="author" 
sortable="true" titleKey="comment.author"/> 
<display:column property="commentText" 
sortable="false" titleKey="comment.commentText"/> 
<display:setProperty name="paging.banner.item_name" value="comment"/> 
<display:setProperty name="paging.banner.items_name" value="comments"/> 
</display:table> 
<s:submit cssClass="button" key="button.add" theme="simple"/> 
</s:form> 
</c:if> 
<script type="text/javascript"> 
highlightTableRows("commentList"); 
</script> 
<script type="text/javascript"> 
Form.focusFirstElement($("issueForm")); 
</script> 
Obviously, tlie issueForm.jsp will allow a user to add or edit an issue. If you peek into 
die included src/main/webapp/common/taglibs.jsp you'll notice that the Struts 2 tag 
libraries are included and the letter "s" was used for die tag prefix Q . The Struts 2 
textf ield elements Q map to an Issue object. The button bar created will contain 
I Comments 
Struts 2 form 
JavaScript 
assigns focus 

Constructing the web tier 
33 
Save, Delete, and Cancel buttons 
The Delete button will display only if the issue has 
an id or already exists. Let's keep moving and build the commentForm.jsp. 
Listing 2.17 
The commentForm.jsp 
<%@ include file="/common/taglibs.jsp" %> 
<head> 
<titlexfmt:message key="commentDetail.title"/></title> 
<meta content="<fmt:message key=1commentDetail.heading 1/>"/> 
</head> 
<s:form id="commentForm" action="saveComment" method="post" validate="true"> 
<s:hidden name="comment.id" value="%{comment.id}"/> 
<s:hidden name="issue.id" value="%{issue.id}"/> 
<s:textfield key="comment.author" required="true" cssClass="text medium"/> 
<s:textfield key="comment.createdDate" required="false" 
cssClass="text medium"/> 
<s:textarea key="comment.commentText" required="false" 
cssClass="text medium"/> 
<li class="buttonBar bottom"> 
<s:submit cssClass="button" method="save" 
key="button.save" theme="simple"/> 
<c:if test="${not empty comment.id}"> 
<s:submit cssClass="button" method="delete" 
key="button.delete" onclick="return confirmDelete(1 comment1) " 
theme="simple"/> 
< / c : i f > 
<s:submit cssClass="button" method="cancel" 
key="button.cancel" theme="simple"/> 
< /1 i> 
</s:form> 
As die name suggests, die commentForm.jsp provides a Struts 2 form for updating 
new or existing comments. When submitted, die form will call the comment man-
ager's saveComment method. Now that you have the JSP files in place we'll need to add 
those properties so that they have real values. 
2.7.4 
Adding property resources 
For the application's messages to be localized, we've leveraged die Java resource bun-
dle framework. A d d the properties shown in the following listing to the Application-
Resources.properties file located in die flex-bugs-web/src/main/resources directory. 
Listing 2.18 
The ApplicationResources.properties 
# -- menu/link messages --
menu.issue=Issues 
menu.viewIssues=View Issues 
# -- issue form --
issue.id=Id 

34 
CHAPTER 2 Beginning with Java 
issue.proj ect=Project 
issue.description=Description 
issue.added=Issue has been added successfully, 
issue.updated=Issue has been updated successfully, 
issue.deleted=Issue has been deleted successfully. 
# -- issue list page --
issueList.title=Issue List 
issueList.heading=Issues 
# -- issue detail page --
issueDetail.title=Issue Detail 
issueDetail.heading=Issue Information 
# -- comment form --
comment.id=Id 
comment.author=Author 
comment.issueld=lssue Id 
comment.createdDate=Created Date 
comment.commentText=Details 
comment.added=Comment has been added successfully, 
comment.updated=Comment has been updated successfully, 
comment.deleted=Comment has been deleted successfully. 
# -- issue list page --
commentList.title=Comment List 
commentList.heading=Comments 
# -- issue detail page --
commentDetail.title=Comment Detail 
commentDetail.heading=Comment Information 
If more language support is needed, add die same properties with the respective 
translation to the appropriate properties file in the same directory. Now let's wire up 
die view components with Struts 2. 
2.7.5 
Configuring the struts.xml 
To wire up the JSP view components to the controller objects, you can use the 
struts.xml located in die src/main/resources directory. This listing demonstrates 
die wiring you need for the issues management. 
Listing 2.19 
The struts.xml 
<package> 
<! — Add additional actions here --> 
<action name="issues" 
class="org.foj.action.IssueAction" method="list"> 
<result>/WEB-INF/pages/issueList.j sp</result> 
</action> 
<action name="editlssue" 
class="org.foj.action.IssueAction" method="edit"> 
<result>/WEB-INF/pages/issueForm.j sp</result> 
i A 
issues action loads 
If 
issueList.jsp 
i A 
editlssue loads 
If 
issueForm.jsp 

Constructing the web tier 
35 
<result name="error">/WEB-INF/pages/issueList.jsp</result> 
</action> 
<action name="savelssue" 
savelssue loads 
issueForm 
class= " org. foj . action. IssueAction" method= " save" > 
| 
ISSlierorm 
<result name="input">/WEB-INF/pages/issueForm.jsp</result> 
<result name="cancel" type="redirect-action">issues</result> 
<result name="delete" type="redirect-action">issues</result> 
<result name="success" type="redirect-action"> 
<param name="actionName">editlssue</param> 
<param name="id">${issue.id}</param> 
</result> 
</action> 
<action name="comments" class="org.foj.action.CommentAction" 
method="list"> 
<result>/WEB-INF/pages/commentList.j sp</result> 
</action> 
<action name="editComment" class="org.foj.action.CommentAction" 
method="edit"> 
<result>/WEB-INF/pages/commentForm.j sp</result> 
<result name="error">/WEB-INF/pages/commentList.j sp</result> 
</action> 
<action name="saveComment" class="org.foj.action.CommentAction" 
method="save"> 
<result name="input">/WEB-INF/pages/commentForm.j sp</result> 
<result name="cancel" type="redirect-action"> 
<param name="actionName">editlssue</param> 
<param name="id">${issue.id}</param> 
</result> 
<result name="delete" type="redirect-action"> 
<param name="actionName">editlssue</param> 
<param name="id">${issue.id}</param> 
</result> 
<result name="success" type="redirect-action"> 
<param name="actionName">editlssue</param> 
<param name="id">${issue.id}</param> 
</result> 
</action> 
</package> 
Struts 2 makes it simple to wire up the view components quickly and make changes. 
As you can see, die issues action © 
will load die issueList. j sp whenever die 
list() mediod is invoked. In die same way, editlssue © 
will load the issue-
Form. jsp when the edit () method is called and if tiiat doesn't work, it will go back to 
the list page. The savelssue action © will persist an issue by taking the input from 
the issueForm.jsp. 
The remainder of die IssueAction is more of the same but pertains to issue 
comments. 

36 
CHAPTER 2 Beginning with Java 
2.7.6 
Configuring Hibernate 
The final step is to configure the POJOs with the Hibernate session factory. That way 
when the app is loaded into memory, Hibernate recognizes tiiese objects. You do 
diis through the hibernate.cfg.xml located in die src/main/resources directory. 
Listing 2.20 
The hibernate.cfg.xml 
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate 
Configuration DTD 3.0//EN" 
"http://hibernate.sourceforge.net/hibernate-configurâtion-3.0.dtd"> 
<hibernate-configuration> 
<session-factory> 
<mapping class="org.AppFuse.model.User"/> 
<mapping class="org.AppFuse.model.Role"/> 
<mapping class="org.foj.model.Issue"/> 
<mapping class="org.foj.model.Comment"/> 
</session-factory> 
</hibernate-configuration> 
In this simple configuration, you create a class mapping Q for each of die model 
objects, Issue and Comment. Rebuild the application witii the mvn jetty:run-war 
command, then refresh your browser. The Issues button should be available as seen in 
figure 2.7. 
AppFuse 
Providing integration and style to open source Java. 
Main Menu 
Edit Profile 
Issues 
Administration 
Logout 
Issues 
Add | 
Done [ 
No issues found. 
Id 
Project 
Description 
Nothing found to display. 
Add | 
Done | 
Version l.O-SNAPSHOT | XHTML Valid ! CSS Valid | Logged in as: admin 
© 2008 Your < 
I A 
Adding issue 
If 
and comment 
Figure 2.7 
The issues list page with the integrated Issues menu button 

Summary 
37 
2.8 
Summary 
In this chapter we set up a Java web application using the AppFuse framework. App-
Fuse simplified the plumbing involved in building a typical Java web application by 
using many popular frameworks, for example Struts 2, Spring, and Hibernate. 
In die next chapter we'll start building the rich interface for the sample applica-
tion in Flex. In die following chapters we'll begin to connect die Flex front end to the 
Java application using web services and BlazeDS. 

Getting rich wit 
This chapter covers 
• Creating a Flex project using archetype 
• Creating a Flex frontend for the sample 
application 
• Adding a wrapper for an SWF 
In chapter 2 we introduced you to AppFuse and created our sample issue track-
ing application. Now it's time to begin creating the Flex frontend for our sample 
application. We'll start by incrementally building up the view layer, introducing 
you to a few of the pertinent concepts of Flex. This chapter is not meant to be a 
comprehensive guide to die Flex framework by any stretch of the imagination, so 
you should be able to follow along without much trouble. If you want a more in-
depth look at the Flex framework refer to Flex 4 in Action by Tariq Ahmed, Dan 
Orlando, John C. Bland II, and Joel Hooks (to be published by Manning in Sep-
tember 2010). 
3.1 
Generating the application 
structure 
You need to create a Flex application. Because you'll be using the Flex Mojos 
Maven plugin you'll be creating the application in a manner similar to what you 
38 

Generating the application structure 
39 
FNA (FNA is Not AppFuse) 
Folks at Adobe Consulting have started a new project at Google Code called 
FNA, w h i c h stands for FNA is Not AppFuse (http://code.google.eom/p/fna-v2/). 
The FNA project has similar goals to that of AppFuse in that they are attempting 
to create a framework that enables developers to jump-start their RIA applica-
tions with Flex and Java. W e have decided against using this framework for this 
book, but feel the project has potential and warrants a look at if you are starting 
a new project. 
used for die AppFuse portion of the application. We've taken the liberty of creat-
ing a Maven archetype to minimize the amount of manual work required to create 
the project structure. 
Let's get started. Open a command prompt and navigate to die root directory of 
our application. Enter the following command to create our Flex application. 
$ mvn archetype-create -DarchetypeGroupId=org.foj \ 
-DarchetypeArtifactld=flex-mojos-archetype \ 
-DarchetypeVersion=l.O-SNAPSHOT \ 
-DgroupId=org.foj \ 
-Dartifactld=flex-bugs-ria \ 
-DremoteRepositories=http://flexonj ava.googlecode.com/svn/repository 
This will create a Flex project that slightly resembles a standard Maven project. 
Because tiiis is not a Java project, the project structure varies slightly. The sources for 
our Flex application will go in the sre/main/flex folder, and die tests in sre/test/flex 
folder. Maven will also modify our main project pom.xml and add tiiis project as a 
module as shown here. 
Listing 3.1 
Parent pom.xml 
<?xml version="1.0" encoding="UTF-8"?> 
<project xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/maven-v4_0_0.xsd"> 
<modules> 
<module>flex-bugs-ria</module> 
<module>flex-bugs-web</module> 
</modules> 
</project> 
Now tiiat the project has been created you need to configure die Flex Mojos plugins 
for both the Flex project and die AppFuse project. 

63 CHAPTER 3 
Getting rich with Flex 
Configuring the flex-bugs-ria module 
For this application we chose to use the Flex Mojos plugin to leverage the powerful 
dependency management facilities of Maven as well as to avoid writing yet another 
Ant build script. 
Listing 3.2 
The pom.xmi for the Flex application 
<?xml version="1.0"?> 
<project> 
<parent> 
<artifactld>flex-bugs</artifactld> 
<groupId>org.foj</groupId> 
<version>l. 0-SNAPSHOT</version> 
</parent> 
<modelVersion>4.0.0</modelVersion> 
<groupId>org.foj</groupId> 
<artifactld>flex-bugs-ria</artifactld> 
<packaging>swf</packaging> 
<version>l. 0-SNAPSHOT</version> 
<properties> 
<flexmojos.version>3.2.0</flexmojos.version> 
</properties> 
» 
S 
Define parent pom 
This module's groupld 
This module's artifactld 
© 
Packaging type 
J 
L 
This module's 
version 
Flex-Mojos 
version 
<build> 
<sourceDirectory>src/main/flex</sourceDirectory> 
<testSourceDirectory>src/test/flex</testSourceDirectory> 
<finalName>flex-bugs-ria</finalName> 
<plugins> 
<plugin> 
<groupId>org.sonatype.flexmoj os</groupId> 
<artifactld>flexmoj os-maven-plugin</artifactld> 
<version>${flexmoj os.version}</version> 
<extensions>true</extensions> 
<configuration> 
<targetPlayer>10.0.0</targetPlayer> 
<locales> 
<locale>en_US</locale> 
</locales> 
</configuration> 
<dependencies> 
<dependency> 
<groupId>com.adobe.flex</groupId> 
<artifactId>compiler</artifactld> 
<version>4.0.0.7219</version> 
< type>pom</type> 
</dependency> 
</dependenc i e s > 
</plugin> 
</plugins> 
</build> 
© 
Specify so 
Y 
and test s< 
I 
directorie 
' source 
t source 
directories 
1> 
Final name 
for artifact 
0 
Flex-mojos-plugin 
www.allitebooks.com

Configuring the flex-bugs-ria module 
41 
<repositories> 
<repository> 
<id>flexmojos-repository</id> 
<url>http://repository.sonatype.org/content/ 
groups/flexgroup/</url> 
</repository> 
</repositories> 
<pluginRepositories> 
<pluginRepos i tory> 
<id>flexmojos-repository</id> 
<url>http://repository.sonatype.org/content/ 
groups/flexgroup/</url> 
</pluginRepos i tory> 
</pluginRepositories> 
<dependencies> 
<dependency> 
<groupId>com.adobe.flex.framework</groupId> 
<artifactld>flex-framework</artifactld> 
<version>4.0.0.7219</version> 
< type>pom</type> 
</dependency> 
<dependency> 
<groupId>com.adobe.flex.framework</groupId> 
<artifactId>playerglobal</artifactld> 
<version>4.0.0.7219</version> 
<classifier>10</classifier> 
<type>swc</type> 
</dependency> 
<dependency> 
<groupId>org.sonatype.flexmoj os</groupId> 
<artifactld>flexmoj os-unittest-support</artifactld> 
<version>${flexmoj os.version}</version> 
<type>swc</type> 
<scope>test</scope> 
</dependency> 
</dependenc i e s > 
</project> 
Listing 3.2 shows the resulting pom.xml for the Flex application after you generate 
the project using the mvn archetype : c r e a t e command shown in section 3.1. Because 
this is part of a multimodule project, die pom.xml lists the parent module's POM as 
the parent for this project © . Next you'll see die values you specified for die groupld 
© 
and a r t i f a c t l d © defined, as well as the packaging type © of swf because this 
project is our Flex application and will be compiled to an SWF file. 
NOTE 
You may need to associate die SWF file with the Standalone Flash 
Player or your build may time out trying to run the FlexUnit tests. Because 
FlexUnit requires the Flash runtime to run its test suites, Maven will try to 
execute the resulting SWF file for your test suite using the default applica-
tion for SWF files. You can add a file association in Windows tiirough the 
Windows Explorer Folder Options and on a Mac by using die file's context 
sensitive menu. See the documentation athttps://docs.sonatype.org/display/ 
FLEXMOJOS/Running+unit+tests for more information. 
Flex Mojos 
repository at 
Sonatype 
Flex and unit 
testing 
dependencies 

65 CHAPTER 3 
Getting rich with Flex 
Next you set the project's version 
which is set to 1. O-SNAPSHOT. W e define 
the final name of our artifact so that the S W F that is generated will not have die 
version information as part of the filename Q . The archetype also defines a com-
mon property Q for die Flex Mojos version so that you can be sure that the plugin 
Q 
and any dependencies 0 
defined for die Flex Mojos are using the same ver-
sion. You're also overriding die version for the Flex compiler here to compile it 
with the Flex 4 compiler and target version of Flash Player. Because this is not your 
typical Maven project, the pom.xml defines the source and test-source directory 
locations Q . It also defines the repository and plugin repository locations (|j) for 
die Flex Mojos plugins and dependencies because they don't exist in die central 
Maven repository. 
Configure Maven for the flex-bugs-web module 
Now that you've configured Maven to build the Flex application, you need to make 
minor modifications to the pom.xml for the flex-bugs-web module in order to get 
die Flex application to be copied over to die appropriate place in the web applica-
tion. To accomplish this, you'll use the maven-dependency-plugin. 
Listing 3.3 
Configuring the m a v e n - d e p e n d e n c y - p l u g i n 
<?xml version="1.0" encoding="UTF-8"?> 
<project xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/maven-v4_0_0.xsd"> 
Maven-dependency-plugin 
A 
<build> 
<plugins> 
<plugin> 
<artifactld>maven-dependency-plugin</artifactld> 
<executions> 
<execution> 
<id>unpack-config</id> 
<goals> 
A 
Unpack-config 
<goal>unpack-dependencies</goal> 
execution 
</goals> 
<phase>generate-resources-;/phase> 
<configuration> 
<outputDirectory> 
${proj ect.build.directory}/${proj ect.build.finalName}/WEB-INF/flex 
</outputDirectory> 
<includeGroupIds>${proj ect.groupId}</includeGroupIds> 
<includeClassifiers>resources</includeClassifiers> 
<excludeTransitive>true</excludeTransitive> 
<excludeTypes>j ar,swf</excludeTypes> 
</configuration> 
</execution> 
Configuration for unpack-config execution 

Configure Maven for the flex-bugs-web module 
4 3 
Q 
Copy-swf 
' 
execution 
<execution> 
<id>copy-swf</id> 
<phase>process-classes</phase> 
<goals> 
<goal>copy-dependencies</goal> 
</goals> 
<configuration> 
<stripVersion>true</stripVersion> 
<outputDirectory> 
${project.build.directory}/${proj ect.build.finalName} 
</outputDirectory> 
<includeTypes>swf</includeTypes> 
</configuration> 
</execution> 
</executions> 
</plugin> 
Configuration for copy-swf execution 
Q 
</project> 
Listing 3.3 shows tlie plugin configuration O needed for your web application to 
properly resolve die dependency for die Flex application and ensure tiiat the SWF file 
is placed correctly. 
First define an execution tiiat you'll call unpack-conf ig © and tell Maven to exe-
cute tiiis during die generate-resources phase of the build, and call the unpack-
dependencies goal on tiiis plugin. In the configuration Q you tell the plugin to limit 
the scope of what is affected by tiiis execution to artifacts with the same groupld as 
your project and to artifacts of type resources. This will be utilized in chapter 5 as you 
create a common project for all of the configuration files for BlazeDS that need to be 
shared between the web application and die Flex application. 
The Maven build lifecycle 
Maven follows the convention over configuration paradigm in the build lifecycle 
aspect, and many others. The folks who designed Maven realized that there are 
many common steps in every build and developed the concept of the build lifecycle 
around it. The default lifecycle flows through the following build phases (in order): 
• validate 
• compile 
• test 
• package 
• 
integration-test 
• verify 
• install 
• deploy 
For more information on Maven and the build lifecycle, read Maven: 
The 
Definitive 
Guide, a free ebook by Eric Redmond available at http://www.sonatype.com/prod-
ucts/maven/documentation/book-defguide. 

67 CHAPTER 3 
Getting rich with Flex 
The second execution that you define Q is copy-swf, and it will do exactly that. You 
configure this execution to run during the p r o c e s s - c l a s s e s phase of die build lifecy-
cle and execute die copy-dependencies goal to copy the SWF file from the Flex proj-
ect into the target folder to be placed in die proper location before Maven creates the 
final WAR file © . Next let's take a look at how to create an HTML wrapper, or in this 
case a JSP wrapper for our Flex application. 
Adding a wrapper for our SWF 
Adobe provides numerous templates for creating HTML wrapper files for your SWF, 
located in die /templates directory of your Flex SDK installation. There is everything 
from the basic no frills wrapper, to wrappers that include functionality to detect 
whether the client has die correct version of the Flash Player installed, and whether to 
support deep linking and history for your application. 
NOTE 
Normally die HTML wrapper would be an HTML file in your web appli-
cation. Because the SiteMesh filter in AppFuse is configured to decorate any-
thing with a .html extension, we decided the easiest way to circumvent this 
filter was to make the wrapper a JSP file. 
For this application, copy the contents of the client-side-detection-with-history folder 
including die index.template.html, AC_OETagsjs file, and die history folder from die 
/templates directory of your Flex SDK installation to the src/main/webapp directory 
of die flex-bugs-web project. Rename the index.template.html file flexbugs.jsp, and 
replace die placeholders in die file with the values shown in listing 3.4. 
Listing 3.4 
HTML wrapper values 
${title} -> FlexBugs 
${version_major} -> 9 
${version_minor} -> 0 
${required_revision} -> 28 
${width} -> 100% 
${height} -> 100% 
${application} -> flex-bugs-ria 
${bgcolor} -> #869ca7 
${swf} -> flex-bugs-ria.swf 
We aren't going into detail about what is contained in flexbugs.jsp because it's likely 
you won't have to change anything inside of it in die future. Learn more about the 
HTML templates that Flex provides in die LiveDocs at Adobe's website at http://live-
docs. adobe. com/flex/3/html/wrapper_04.html#l78239. 
"Hello World!" in Flex 
Now that you have the web application configured to properly resolve the Flex appli-
cation dependency, have placed die resulting SWF file properly, and have die HTML 
wrapper configured, let's write a "Hello World!" application in Flex to verify that 

"Hello World!" in Flex 
45 
everything is working as expected. In die src/main/flex folder of the f lex-bugs-ria 
project create a Main.mxml file for die Flex application. 
Listing 3.5 
Hello World! in Flex 
<?xml version="1.0" encoding="utf-8"?> 
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
xmlns:view="org.foj.view.*" 
minWidth='950' 
minHeight="600" 
height="100%" 
width="100%"> 
Flex Application 
root component 
<s:layout> 
<s:VerticalLayout/> 
</s:layout> 
<s:SimpleText text="Hello World!"/> 
</s:Application> 
J 
J> 
J? 
Setting layout 
SimpleText 
component 
Shown is a minimal "Hello World!" application in Flex. It consists of only die root 
Application component Q , a layout definition © and a single SimpleText compo-
nent G which has its text property set to "Hello World! " 
Maven and heap space 
You may run into heap space problems when compiling your Flex application with 
the Flex Mojos, and your build may fail with a message similar to the following: 
[INFO] 
[ERROR] FATAL ERROR 
[INFO] 
[INFO] Java heap space 
[INFO] 
[INFO] Trace 
java.lang.OutOfMemoryError: Java heap space 
To fix this issue, you need only define an environment variable named MAVEN_OPTS 
and set its value to "-Xmx512m" adjusting the memory size as needed (https:// 
docs, sonatype.org/displ ay/FLEX MOJOS/FAQ). 
To build die Flex application you first need to run mvn install from die flex-bugs-ria 
directory. That's it. This will build die flex-bugs-ria project, and deploy the result-
ing artifact into your local Maven repository so tiiat die flex-bugs-web project can 
include it as a dependency in its pom.xml. After it finishes building you can navigate 
to die ilex-bugs-web directory and run the application by typing mvn jetty: run-war 
on die command line. This will start up a Jetty instance and deploy your WAR inside 
this instance so that you can visually verify everytiiing is working. When you see the 
output shown in die following listing, you know tiiat your application is running. 

69 CHAPTER 3 
Getting rich with Flex 
Listing 3.6 
Console output from the m a v e n - j e t t y - p l u g i n 
2009-03-28 19:31:14.206::INFO: 
Started SelectChannelConnectorSO.0.0.0:8080 
[INFO] Started Jetty Server 
[INFO] Starting scanner at interval of 3 seconds. 
Open your favorite browser and navigate to http://localhost:8080/flexbugs.jsp and 
you should see a screen similar to figure 3.1. 
This sanity check is not terribly exciting, but you can see that the application is 
configured correctly. Now that you have the obligatory "Hello World!" application out 
of the way, let's get on with the task of developing die real application. 
Developing the FlexBugs application 
To begin developing die application, you should have an idea of what you would like 
it to look like. Figure 3.2 shows a mockup. 
The application is divided into three main areas in a modified master/detail view 
with a second detail view for any comments on die selected issue. The application can 
also be divided into header, footer, and main application areas. Defining the applica-
tion in these terms achieves a couple of objectives. By separating the application into 
these different pieces, you can create separate mxml files to help keep die code man-
ageable. By breaking up our application into separate mxml files, you can reuse parts 
of the application. 
« n o 
http://lot alhosrSOSO/flexbugs.jsp 
J [ + rthttp://iocairiost:8080/*iext>ugs.jsp ~ c ] fty cc 
Hello Wo'd! 
Figure 3.1 
Our "Hello World!" application 

Developing the FlexBugs application 
47 
Header Section 
FlexBugs Application 
Master View 
Commenls View 
FMIW4 ' I. 
b*p « - v ir-- tj w 
I 
] 
BH 
i.'.
r i -'.v.**' 
tm w 
I PHrtiVlr» [ Orjpn-rtrM j 
t^/Tiyi' UKrt Flu J m 
Figure 3.2 
A mockup of the FlexBugs application 
Footer Section 
Next we're going to decompose die application into manageable chunks. We'll start 
by introducing some of die container and navigation components we'll be using to 
build diis application starting widi die ViewStack navigation component. 
3.6.1 
Introducing 
ViewStack 
ViewStack is a navigation component 
diat allows you to stack a collection of 
views and selectively display diem. 
Unlike traditional web applications, 
Flex applications typically don't have 
many pages. A Flex application typi-
cally has one application diat will 
change its view state depending on 
which part of die application is active. 
The ViewStack is one of die Flex 
components diat allows you to do 
diis by bringing die active view to die 
foreground and hiding die inactive 
views in die background as shown in 
figure 3.3. 
You can control die ViewStack 
in a number of ways, die most com-
mon of which is to utilize one of die 
Figure 3.3 
How the ViewStack works 

71 CHAPTER 3 
Getting rich with Flex 
navigation components such as the LinkBar, ButtonBar, or ToggleButtonBar. For 
the FlexBugs application we'll leverage the ToggleButtonBar to facilitate switching 
the view state. In the top-right corner of the figure 3.2 mockup you'll see buttons 
labeled Details View and Graph View; these are the two views that we'll use of in 
this application. We'll develop die details view in this chapter and die graph view in 
chapter 10 when we talk more about graphing components. 
Listing 3.7 
Defining the V i e w S t a c k s 
<?xml version="1.0" encoding="utf-8"?> 
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
minWidth='950' 
minHeight="600" 
height="100%" 
width="100%"> 
<s:layout> 
<s : VerticalLayout/> 
Define view stack 
A 
</s:layout> 
<mx:ViewStack id="mainViewStack" width="100%" height="100%"> 
<1— 
<mx:Canvas id="viewl" label="Details View"> 
<mx:Text text="Put the details view stuff here..."/> 
</mx:Canvas> 
<mx:Canvas id="view2" label="Graph View"> 
<mx:Text text="Put some graphs here..."/> 
</mx:Canvas> 
</mx:ViewStack> 
</s:Application> 
Listing 3.7 shows the Main.mxml after you add the ViewStack components to the 
application. After you remove our HelloWorld code, create a ViewStack element 
O 
and give it an id of mainViewStack; this will become important later when you define 
die ToggleButtonBar as the dataProvider attribute, for the ToggleButtonBar will be 
set to this ViewStack component. You want this ViewStack to use up all available hori-
zontal and vertical space so set its width and height to 100%. 
Next add two Canvas components Q and Q to the ViewStack giving them ids of 
viewl and view2 respectively. These two Canvas components will be the two main 
views the ToggleButtonBar will control. The label attribute of these two components 
will be displayed as die text of the two ToggleButton controls, so you set those to 
Details View and Graph View, respectively. Inside these two Canvas containers put 
Text components as placeholders, so you can see how the ToggleButtonBar will con-
trol die two view states in the next section. 
A 
Add first view 
If 
component 
A 
Add second view 
If 
component 

Developing the FlexBugs application 
49 
• 
a org 
• U f o j 
• 
• 
view 
3.6.2 
HeaderView 
Before you go much furtiier witii building up die appli-
cation create the header view so you can control die view 
states diat you just created. In die src/main/flex folder cre-
ate die directory structure shown in figure 3.4 to house die 
view components. 
ActionScript and Flex follow a similar packaging struc-
ture as Java so you will leverage tiiat aspect in order to keep 
the source files organized in die same manner you would in a Java project. Inside 
of die view folder create a new file called Header.mxml, where you will put the code 
for die header for die application. 
Figure 3.4 
Folder 
structure for view 
components 
Listing 3.8 
Header.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
width="100%" 
height="60"> 
<s:layout> 
<s:HorizontalLayout/> 
</s:layout> 
< fx:Script> 
<![CDATA[ 
import mx.containers.ViewStack; 
public var viewStack:ViewStack; 
] ]> 
</fx:Script> 
<mx:Spacer width="5"/> 
<s:SimpleText text="FlexBugs Application" 
height="100%" 
fontSize="32 " 
fontWeight="bold" 
verticalAlign="middle"/> 
<mx:Spacer width="100%"/> 
<s:VGroup height="100%"> 
<mx:Spacer height="100%"/> 
<mx:ToggleButtonBar dataProvider="viewStack"/> 
</s:VGroup> 
<mx:Spacer width="5"/> 
J 
J 
Component 
extends Group 
Define layout 
J» 
Import and declare 
ViewStack member variable 
Text field 
for Title 
</s :Group> 
ToggleButtonBar for 
controlling ViewStack 
Spacers 
for layout 
Listing 3.8 shows the code for die Header.mxml component. There's not much to it. 
The component itself extends the Group component Q , and defines its layout © as 
being HorizontalLayout, meaning tiiat all the components inside it will be laid out 
horizontally as opposed to vertically or absolutely. Next you define a public member 
variable © , which will be used to allow die main application to pass in the ViewStack 

73 CHAPTER 3 
Getting rich with Flex 
that the ToggleButtonBar Q will control. To do tiiat you create a Script block and 
enclose some ActionScript inside a CDATA section, so that any characters that may 
potentially be parsed as XML are handled correctly. 
For the Application Title you have a SimpleText component Q with a couple of 
attributes defined on it. The first one is die text attribute, which sets the text to be 
displayed in die application. Flex has support for CSS styles similar to those in web 
applications. Finally there are Spacer elements Q , which you use to make sure every-
thing is laid out properly. The Spacer elements do just what you would expect; they 
take up space and fill in blank space so that you can effectively lay out components in 
die application. 
Listing 3.9 
Adding the header to Main.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
xmlns:view="org.foj.view.*" 
minWidth='950' 
minHeight="600" 
height="100%" 
width="100%"> 
<s:layout> 
<s:VerticalLayout/> 
</s:layout> 
<view:Header viewStack="{mainViewStack}"/> 
<mx:ViewStack id="mainViewStack" width="10 
<mx:Canvas id="viewl" label="Details View"> 
<mx:Text text="Put the details view stuff here..."/> 
</mx:Canvas> 
<mx:Canvas id="view2" label="Graph View"> 
<mx:Text text="Put some graphs here..."/> 
</mx:Canvas> 
</mx:Viewstack> 
</s:Application> 
The preceding listing shows die updated Main.mxml file that includes die Header, 
mxml component you just created. First you defined a custom namespace for die 
view components by adding die code shown at Q . Next add the custom component 
to the Main.mxml by using this custom namespace prefix and pass in a reference to 
die ViewStack component by using the binding expression {mainViewStack} Q . 
Now you should be able to build and run die application as outlined earlier, and be 
presented with a screen that resembles figure 3.5. 
When you click the ToggleButtons in the upper-right corner, you should see the 
text in die main part of the application change. Next let's build a simple footer com-
ponent for the application. 
Added namespace 
for view components 
A 
Added header 
to application 
'%" height=" 100%" > 
www.allitebooks.com

Developing the FlexBugs application 
51 
^ o o 
flexbugs.jsp 
1 I + 11 h!tp: / /local host 8080/ftexbugi/flexbugs ,js p* 
C | (Or Google 
FlexBugs Application 
| Data 
s View J Graph View j 
Pui tne retails 
siuffhare „ 
s View J Graph View j 
Figure 3.5 
The header view added. 
3.6.3 
FooterView 
Inside die same folder where you created the Header.mxml in die previous section, 
create another file named Footer.mxml. Though it may seem like overkill to separate 
the footer into its own M X M L file, we'll do it anyway just to get you in die habit of sys-
tematically breaking your Flex application into smaller, more manageable pieces. 
Listing 3.10 
Footer.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
width="100%" 
height="40"> 
<s:layout> 
<s:HorizontalLayout/> 
</s:layout> 
<mx:Spacer width="100%"/> 
<s:SimpleText text="Copyright &#0169; 2009 Flex On Java" 
height="100%" 
verticalAlign="middle" 
textAlign="center"/> 
<mx:Spacer width="100%"/> 
</s:Group> 
The code in the preceding listing shows the footer file. Like the header, the footer 
extends die Group component. It contains only a single SimpleText component, 
which contains die copyright information, and sets its textAlign attribute to center. 
Once again you leverage a couple of Spacer elements to assist in layout. 
Listing 3.11 
Main.mxml updated with footer 
<?xml version="1.0" encoding="utf-8"?> 
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 

52 
CHAPTER 3 
Getting rich with Flex 
xmlns:view="org.foj.view.*" 
minWidth='950' 
minHeight="600" 
height="100%" 
width="100%"> 
<s:layout> 
<s:VerticalLayout/> 
</s:layout> 
</mx:ViewStack> 
<view:Footer/> 
J? 
Added footer 
to Main.mxml 
</s:Application> 
Next you add the footer Q to die application much as you did earlier for die header. 
Near the end of the Main.mxml, place die tag for the footer. Next let's move on to cre-
ating the view component for the master view. 
3.6.4 
Master view 
Now you're getting to the more interesting parts. The master view if you'll recall from 
figure 3.2 consists of a few components. At the top resides a data grid component with 
two buttons for adding and removing issues. 
Listing 3.12 
MasterView.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<mx:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
layout="vertical" 
title="Issues" 
width="100%" 
height="100%"> 
J 
Extending 
Panel 
<mx:DataGrid id="masterViewDataGrid" width="100%" height="100%"> 
<mx:columns> 
"id" 
<mx:DataGridColumn dataField= 
headerText 
<mx:DataGridColumn dataField= 
headerText 
<mx:DataGridColumn dataField= 
headerText 
<mx:DataGridColumn dataField= 
headerText 
<mx:DataGridColumn dataField= 
headerText 
<mx:DataGridColumn dataField= 
"ID" width="70"/> 
proj ect" 
"Project" width="120"/> 
description" 
"Description"/> 
issue-type" 
"Type" width="120"/> 
severity" 
"Severi ty" width="7 0"/> 
status" 
DataGrid 
O 
headerText="Status" width="100"/> 
</mx:columns> 
</mx:DataGrid> 
<mx:ControlBar width="100%"> 
<mx:Button label="Add New Issue"/> 
J 
ControlBar for 
Add/Delete buttons 

Developing the FlexBugs application 
53 
<mx:Button label="Remove Selected Issue"/> 
</mx:ControlBar> 
</mx:Panel> 
Create a file inside die org/foj/view folder called MasterView.mxml. This will contain 
the code to create die master view, shown in listing 3.12. This component will be 
based on the Panel component Q , which is one of the layout containers available in 
the Flex framework. The Panel component provides us witii a title bar area where we 
can provide die group of components contained within a meaningful title much like 
the <legend> tag in HTML, or a group box control, for those more familiar witii desk-
top development. 
DataGrid © is used to display tabular data, and is one of the fundamental con-
trols used in data-driven applications. The DataGrid and its big brother Advanced-
DataGrid let you edit rows of data witiiin the table cells. For die application, we'll 
forego that functionality in favor of using a detail view. A ControlBar © 
at die 
bottom of the Panel will contain die buttons for adding and removing issues from 
the application. 
3.6.5 
Detail view 
Next we're going to develop die detail view, where you will allow die users of die appli-
cation to modify the data fields for die issues displayed in die master view. DetailView 
has a form containing die fields tiiat can be updated for the issues in die application. 
Begin just as you did earlier for the master view, by creating a file named Detail-
View.mxml in die org/foj/view folder. The following listing shows the code we'll be 
adding to tiiat file. 
Listing 3.13 
DetailView.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<mx: Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spar 
xmlns:mx="library://ns.adobe.com/flex/hal 
layout="vertical" 
title="Details" 
width="100%" 
height="100%"> 
<mx:Form id="issueDetailForm" width="100%"> 
<mx:FormItem label="ID:" width="100%"> 
<mx:Text id="issueld"/> 
</mx:FormItem> 
<mx:FormItem label="Project:" width="100%"> 
<mx:Textlnput id="projectName" 
width="100%"/> 
</mx:FormItem> 
<mx:FormItem label="Description :" width="100%"> 
<mx:Textlnput id="issueDescription" 
width="100%"/> 
</mx:FormItem> 
k" 
J J 
Extends Panel 
Form container 
Formltem 
components 

54 
CHAPTER 3 
Getting rich with Flex 
<mx:FormItem label="Type:" width="100%"> 
<mx:ComboBox id="issueType"/> 
</mx:FormItem> 
<mx:FormItem label="Severity:" width="100%"> 
<mx:ComboBox id="issueSeverity"/> 
</mx:FormItem> 
<mx:FormItem label="Status:" width="100%"> 
<mx:ComboBox id="issueStatus"/> 
</mx:FormItem> 
<mx:FormItem label="Details:" width="100%"> 
<mx:TextArea id="issueDetails" 
width="100%" 
height="100"/> 
</mx:FormItem> 
<mx:FormItem label="Reported By:" width="100%"> 
<mx:TextInput id="issueReportedBy" 
width="100%"/> 
</mx:FormItem> 
<mx:FormItem label="Reported On:" width="100%"> 
<mx:DateField id="issueReportedOn" 
width="100%"/> 
</mx:FormItem> 
<mx:FormItem label="Assigned To:" width="100%"> 
<mx:Textlnput id="issueAssignedTo" 
width="100%"/> 
</mx:FormItem> 
<mx:FormItem label="Estimated Hours:" width="100%"> 
<mx:Textlnput id="issueEstimatedHours" 
width="100%"/> 
</mx:FormItem> 
</mx:Form> 
<mx:ControlBar> 
<mx:Button id="saveChangesButton" label="Save Changes"/> 
<mx:Button id="cancelChangesButton" label="Cancel Changes"/> 
</mx:ControlBar> 
</mx:Panel> 
Similar to tlie master view, the details view component will be based off of die Pane 1 layout 
container Q . A d d a Form © container to help organize die input fields that will be used 
to ultimately update die issues in the application. Unlike in H T M L , the Form container 
in the Flex framework serves no other purpose than to group form controls on the page. 
You do not need to wrap fields in a Form tag to submit data to the backend; it's there for 
aesthetics. Inside die Form wrap each input field inside ofaFormltem© component that 
provides styling, a label, and layout for each of the form fields. A ControlBar © contains 
die buttons that control saving the data and canceling die edits. 
3.6.6 
Comments view 
The final section of die application we'll lay out is the comments view, which will list 
any comments added to die issues. First create the CommentsView.mxml file in the 
org/foj/view folder just as you did for all of die other view components. For this L i s t 
ControlBar 

Laying out the components 
55 
component we're going to display die comment text; you could easily create a custom 
ItemRenderer for die List items similar to what we'll do in chapter 8 for die custom 
chart that we'll create. 
Listing 3.14 
CommentsView.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<mx:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
layout="vertical" 
title="Comments" 
width="100%" 
height="100%"> 
<mx:List id="commentsList" 
width="100%" 
height="100%" 
labelField="commentText"> 
</mx:List> 
<mx:ControlBar> 
<mx:Button id="addButton" 
label="Add New Comment"/> 
<mx:Button id="editButton" 
label="Edit Comment"/> 
<mx:Button id="deleteButton" 
label="Delete Comment"/> 
</mx:ControlBar> 
</mx:Panel> 
The code for die comments view is based on die Panel component O - Next add a 
List component Q , which you'll use to contain a list of die comments. At the bottom 
of the Panel add a ControlBar © 
to hold die three Button components Q 
we'll 
define to operate on the comments. 
Laying out the components 
Now diat you've got all of die components defined, let's add them to die Main.mxml 
and define die overall application layout. In Flex, all components can be laid out 
widiin odier containers generally in one of tiiree ways—horizontally, vertically, or 
absolutely. In most cases it's best to go witii eitiier horizontal or vertical layouts, espe-
cially if you want your application to resize appropriately. To achieve the layout you 
want you'll need to nest layout containers as illustrated in figure 3.6. 
Figure 3.6 shows die nesting of layout containers that was necessary to duplicate 
what was shown in die mockup shown in figure 3.1. Listing 3.15 shows the updated 
Main.mxml with all of die layout components necessary. 
J 
J» 
1> 
Extending Panel 
List for comments 
ControlBar for buttons 
Buttons for 
operations on 
comments 

79 CHAPTER 3 
Getting rich with Flex 
Canvas 
HDividedBox 
VDividedBox 
MasterView 
Comments View 
DetailView 
Footer 
Figure 3.6 
Layout for the application 
Listing 3.15 
Laying out the application 
?xml version="1.0" encoding="utf-8"?> 
s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
xmlns:view="org.foj.view.*" 
minWidth='950' 
minHeight="600" 
height="100%" 
width="100%"> 
<s:layout> 
<s:VerticalLayout/> 
</s:layout> 
<view:Header viewStack="{mainViewStack}"/> 
0 
Canvas 
<mx:ViewStack id="mainViewStack" width="100%" height="100%"> 
<mx:Canvas id="viewl" label= "Details View"> 
<1— 
<mx: HDividedBox width= " 100% " height= " 100% " > 
© 
HDividedBox 
<mx: VDividedBox width= " 70% " height= " 100% " > 
< — © 
VDividedBox 
<view: MasterView id= "masterView" height= " 60% "/> 
<—, 
MasterView 
<view: CommentsView id= " commentsView" height= " 40% "/> <1— Q 
component 
< /mx: VDividedBox> 
<view:DetailView id="detailsView" width="30%"/> 
</mx:HDividedBox> 
</mx:Canvas> 
CommentsView component 
© 
I 
DetailView 
component 

Creating a pop-up component 
57 
<mx:Canvas id="view2" label="Graph View"> 
<mx:Panel title="Graph View" width="100%" height="100%"> 
<mx:Text text="Put some graphs here..."/> 
</mx:Panel> 
</mx:Canvas> 
</mx:ViewStack> 
<view:Footer/> 
</s:Application> 
As illustrated in figure 3.6, you start out with a Canvas © container to hold all die 
nested layout containers for die main ViewStack. Inside of tiiis you create an 
HDividedBox, © setting its width and height to 100%, so it will take up all available 
space. Widiin tiiat you place a VDividedBox © , which will contain die MasterView © 
and die CommentsView © . Lasdy you add die DetailView © , which will occupy die 
right side of die HDividedBox. The application is almost complete. Next let's create a 
component to use as a modal popup to edit die comments in die List view of die 
CommentsView component. 
Creating a pop-up component 
The final component you'll develop in tiiis chapter is a modal pop-up form tiiat 
you'll wire into the application in the next chapter to add new comments and edit 
existing ones. 
Figure 3.7 is a screenshot of the pop up. Listing 3.16 shows the code for the 
pop up. 
Add/Edit Comment 
Auinor: 
Date: 
Comment: 
Save Comment \ j 
Cancel 
E 
Figure 3.7 
Pop up for editing comments 

81 CHAPTER 3 
Getting rich with Flex 
Listing 3.16 
EditCommentForm.mxml 
<?xml version="1.0" ?> 
<mx:TitleWindow 
xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
title="Add/Edit Comment" 
height="400" 
width="500"> 
<mx:Form width="100%"> 
<mx:FormItem label="Author:" width="100%"> 
<mx:Textlnput id="author" 
width="100%"/> 
</mx:FormItem> 
<mx:FormItem label="Date:" width="100%"> 
<mx:DateField id="commentDate" 
width="100%" 
formatString="MM/DD/YYYY"/> 
</mx:FormItem> 
<mx:FormItem label="Comment:" width="100%"> 
<mx:TextArea id="commentText" 
width="100%" 
height="200"/> 
</mx:FormItem> 
</mx:Form> 
<mx:ControlBar> 
<mx:Button id="saveButton" label="Save Comm 
<mx:Button id="cancelButton" label="Cancel" 
</mx:ControlBar> 
</mx:TitleWindow> 
The pop-up window is fairly simple. You define die component to extend die 
TitleWindow component © , which you'll typically use for pop ups. Next you add a 
Form and a number of FormI terns © j u s t as you did earlier for the DetailView. The 
ControlBar © added to the window holds die Button components for controlling die 
pop up. 
The finished application 
The final design is far from finished, but we're done for now. This is as good a time as 
any to build die application and see die progress you've made. The application won't 
be functional until the end of die next chapter, but it's always reassuring to see what 
die finished product will look like anyway. 
From die root of die f lex-bugs-ria project run die command mvn install. The 
build should complete successfully. If not double-check die code to ensure tiiat it 
matches the code shown in die listings. Next, inside the root of die flex-bugs-web 
project run die mvn jetty: run-war command to start up die embedded Jetty web con-
tainer and deploy die war file. When die container is up and running, navigate to http:// 
localhost:8080/flexbugs.jsp and you should see sometiiing that resembles figure 3.8. 
© 
En 
< - J 
Ti. 
1> 
Extends 
TitleWindow 
Add Form 
J 
ControlBar 
.ent" /> 
/> 

Summary 
59 
+ • h!tp:/.i local host:6080,rflexbugs /flexbugs jsp# 
C ] Q,* G o o g l e 
FlexBugs Application 
j Refresh List | 
| Details \Aew | Graph View 
10: 
Project 
Description: 
T>i>e: 
Severity-
Status: 
Details: 
Reported By: 
Report«» On: 
Assigned To: 
Estimated Hours: 
«n 
H3 
[ Aoa Issue J [ Cancel Changes | 
Copyright$ 2009 Flex On Java 
a 
Figure 3.8 
The finished application 
3.10 
Summary 
This chapter moved quickly and only briefly introduced many of die components 
available to you in die Flex framework. You started witii an idea of what you wanted 
the application to look like and decomposed tiiat into several smaller components. By 
doing that you made die code more manageable, and as you'll see in die next chapter, 
you made the presentation models and event handling easier to handle. When you 
had all die pieces built up, you could illustrate basics of layout containers in Flex and 
put die application together. We're hopeful tiiat you were able to follow along; if you 
feel like you need more information about layouts and die components of the Flex 
framework, a good place to start would be the LiveDocs at http://help.adobe.com/ 
en_US / 
flex/using/index.html. 
Now that you've built up the Flex application and laid out die components, where 
do you go from here? In die next chapter you're going to begin connecting the Flex 
application to the Java backend you developed in chapter 2 using the WebService 
component. In chapter 5 you'll refactor tiiis to use the BlazeDS framework to talk 
directiy to the Java application. 

This chapter covers 
• 
Model View Presenter 
• 
Event dispatching and handling 
• Calling a web service 
• 
Interfaces and views 
In chapter 3 you designed die UI for the Flex application, but it won't be useful 
until it can communicate with a server-side component. In tiiis chapter you're 
going to continue building up the client-side application. Many Flex books attempt 
to hide complexity when dealing witii client-side code and ActionScript, usually by 
having you create all your WebService components and event handling code in 
your MXML files. This solution, as many developers agree, does not scale well and 
quickly shows its warts in any but die most trivial application. 
We've decided instead to architect die client-side code in such a manner as 
to not only scale well, but also isolate your View from Presentation and from 
external services. This allows the application to be flexible enough to easily 
refactor and replace one implementation of external service with another with 
minimal code changes. You could, tiierefore, painlessly change your application 
60 

Model View Presenter 
61 
from calling web services to leveraging BlazeDS as you'll see in chapter 5. You'll do 
this by using MVP. 
Because a good portion of the interaction between the Flex framework and the 
server-side occurs as asynchronous calls, we'll go over events and event handling. 
We'll cover how to utilize events to facilitate communication between separate sec-
tions of the application. We'll also learn how to create the WebService component 
and call the web services you defined in the application in chapter 2. By the end of 
this chapter you should have a functioning application that communicates with the 
Java server side. 
Model View Presenter 
To build the backend for the Flex application, we're going to make use of a popular 
GUI architectural pattern called Model View Presenter, and more specifically a varia-
tion of that pattern called Passive View. As you may have guessed already, the MVP pat-
tern consists of three main components: a Model, a View, and a Presenter, as shown in 
figure 4.1. By leveraging the Passive View architecture you are able to create what 
Michael Feathers describes as a "Humble Dialog Box" 
(http://www.objectmentor. 
com/resources/articles/TheHumbleDialogBox.pdf). The primary reason to follow 
this style of development is that you are able to remove as much logic from the UI 
as possible 
Figure 4.1 shows the relationship among the three components of the MVP pat-
tern. The first element of the MVP triad is the Presenter. As the diagram shows, all 
information flows from the Presenter to either the Model or View. The Model and 
View are isolated from each other and should have no knowledge of each other or of 
the Presenter. 
All communication with the Presenter should be done through events. The Pre-
senter is then responsible for maintaining the state of the application, making calls to 
Presenter 
Figure 4.1 
The relationship between the Model, View, 
and Presenter 

85 CHAPTER 4 
Connecting to web services 
What about data binding? 
For those of you who are familiar with Flex, you'll notice sooner or later that we've 
decided not to use the built-in data binding functionality that Flex 
provides. 
Because we're following the Passive View pattern for this application, we're relying 
on the Presenter to push any changes to the data being displayed to the view. The 
main reason is for testability. It's much easier to unit test the presentation behav-
ior if it is in the Presenter than in the View. 
the Model and updating the View when necessary. Read more about the MVP pattern 
and the Passive View pattern at Martin Fowler's blog at (http://martinfowler.com/ 
eaaDev/PassiveScreen.html). 
Web services in Flex 
It is fairly common to use web services for application integration, especially when 
there are disparate platforms involved. Because of die availability of XML parsers for 
most every common programming language in use today, web services are a prime 
candidate for applications to share information with each otiier. 
There are two major styles of web services: 
• SOAP-based, which are primarily service-oriented 
• 
RESTful, which are primarily resource-oriented 
For this application you'll use the WebService component to talk to the SOAP-based 
web services you created in chapter 1. In die example we won't use die HTTP-
Service component to connect to RESTful web services, but it's similar enough to 
using the WebService component you should be able to modify die code witiiout 
too much effort. 
Exposing your business functionality via web services has the least impact on your 
server-side code, as it doesn't couple die application to the clients that will be consum-
ing the service. As you'll see in chapter 5, when we expose a service for consumption 
using BlazeDS, the remote service is coupled only to clients who can communicate 
using die AMF binary protocol that BlazeDS uses. 
Web services are commonly used to integrate applications especially if they run on 
different platforms. As it happens, Flex falls into this category because it needs to 
communicate witii the server side, which is most likely not written in ActionScript. 
With that in mind, die fine folks at Adobe have made integrating a Flex application 
with a back end using web services a fairly trivial endeavor. Most Flex books show you 
how to call your web services by creating the service components directly in die MXML 
files, but because we're striving for reusability, maintainability, and clean code, we're 
going to encapsulate the WebService objects in our model. 

Dispatching and handling ez>ents 
63 
4.3 
Dispatching and handling events 
Dispatching and handling events is fundamental to Flex development, and also to 
development using die Passive View pattern described previously. All interaction with 
the Presenter is done through dispatching events. In this section we'll discuss how to 
enable communication between the parts of the application via events. 
4.3.1 
Creating a custom event 
Many components in Flex have their own built-in events, such as the click event on 
a button. If you want to send any data along witii your event, such as which row in a 
DataGrid was selected, you'll need to create your own custom event class tiiat extends 
the f l a s h , events . Event class. 
NOTE 
Like Java, ActionScript uses packages to logically group related classes 
and avoid naming conflicts. T o declare that a class belongs to a particular 
package, use the package keyword, followed by die package name with a set 
of braces containing die code belonging to that package. Then place die class 
file in a folder structure corresponding to the package name you defined. If 
your package name is com. example, die class must be located in a com/exam-
p l e folder of your source tree. 
To differentiate between events, you can either create a separate subclass for each 
event tiiat you wish to react to, or create fewer events and use the type attribute to fil-
ter out only die events you want to add event listeners for. 
Listing 4.1 
UlEvent.as 
package org.foj.event { 
import flash.events.Event; 
public class UIEvent extends Event { 
<• 
public static var SELECTED_ISSUE_CHANGED:String = 
"selectedlssueChanged"; 
public static var REFRESH_ISSUES_BUTTON_CLICKED:String 
"refreshButtonClicked"; 
public static var REMOVE_ISSUE_BUTTON_CLICKED:String = 
"removeButtonClicked"; 
public static var SAVE_ISSUE_BUTTON_CLICKED:String = 
"saveIssue"; 
public static var SELECTED_ISSUE_SAVED:String = 
"selectedlssueSaved"; 
public static var CANCELLED_ISSUE_EDIT:String = 
"cancelledlssueEdit"; 
public static var SELECTED_COMMENT_CHANGED:String = 
"selectedCommentChanged"; 
public static var ADD_NEW_COMMENT_BUTTON_PRESSED:String = 
"addNewComment"; 
S 
Extending 
Event 
Constants for 
event type 

64 
CHAPTER 4 
Connecting to web services 
public static var EDIT_COMMENT_BUTTON_PRESSED:String = 
"editComment"; 
public static var DELETE_COMMENT_BUTTON_PRESSED:String = 
"deleteComment"; 
public static var SAVE_COMMENT_BUTTON_PRESSED:String = 
"saveComment"; 
public static var CANCEL_EDIT_COMMENT_BUTTON_PRESSED:String = 
"cancelEditComment"; 
public static var COMMENTS_UPDATED:String = 
"commentsUpdated"; 
public var data : *; 
public function UIEvent(type : String, 
bubbles : Boolean = true, 
cancelable : Boolean = false) 
J 
{ 
Constants for 
event type 
Variable for 
1
Variable f 
sending 
information 
with event 
super(type, bubbles, cancelable); 
Q 
Constructor 
In listing 4.1 you've created a custom event class called UIEvent O 
a n d defined con-
stants for die different types of events that will be dispatched © . There's also a 
defined field called data © tiiat will accept any type of variable. This will hold any 
kind of payload you pass witii die event. As a last step overload die constructor Q and 
specify default values for whetiier or not die events should bubble up the chain and 
be cancelable. Next you'll look at how to dispatch tiiese events. 
4.3.2 
Event dispatching 
For the application to react to events, you first have to dispatch diem. Because every 
component in Flex is an ancestor of UlComponent, you have die ability to dispatch 
an event by simply calling die dispatchEvent method witiiin your M X M L ; event bub-
bling only travels upward toward a component's parent. For the application to work 
as you expect, you need a mechanism to allow sibling components to intercept events 
being dispatched to notify you of a button being clicked, or die selected item in a 
DataGrid being changed. To accomplish this you will create an EventDispatcher-
Factory so tiiat all event dispatching and subscribing happens with die same Event-
Dispatcher object. 
Listing 4.2 
EventDispatcherFactory.as 
package org.foj.event { 
import flash.events.EventDispatcher; 
public class EventDispatcherFactory{ 
O 
Singleton instance 
private static var „instance: EventDispatcher; 
<1—* 
of EventDispatcher 

Creating Issue and Comment transfer objects 
65 
public static function getEventDispatcher():EventDispatcher { 
if (_instance == null) { 
.instance = new EventDispatcher () ; 
Factory method 
} 
get EventDispatcher 
return .instance; 
} 
1er 
O 
Listing 4.2 shows the code for the EventDispatcherFactory. There's not much to it. It 
consists of a factory metiiod getEventDispatcher Q , which returns a singleton 
instance of an EventDispatcher 
You'll use tiiis instance of EventDispatcher to 
dispatch and subscribe to events. That way any part of die application can dispatch 
and react to events regardless of where it exists in die application's hierarchy of com-
ponents and classes. Now that you have die custom events and a way to dispatch diem, 
let's move on to enhancing die application to make it more interactive and useful. 
Creating Issue and Comment transfer objects 
To ease handling die responses from calling web services, you need to duplicate die 
data objects defined in chapter 1 in ActionScript so that you can effectively deal witii 
the data on die client side. 
Listing 4.3 
Issue.as 
package org.foj.dto { 
public class Issue { 
public var id:int; 
public var project: String; 
public var description:String; 
public var type:String; 
public var severity: String; 
public var status : String; 
public var details : String; 
public var reportedBy: String; 
public var reportedOn: Date ; 
public var assignedTo: String; 
public var estimatedHours:Number; 
public function Issue(issue : * = null) { 
if (issue != null) { 
this.id = issue.id; 
this.project = issue.project; 
this.description = issue.description; 
this.type = issue.type; 
this.severity = issue.severity; 
this.status = issue.status ; 
this.reportedBy = issue.reportedBy; 
this.reportedOn = issue.reportedOn; 
this.assignedTo = issue.assignedTo; 
Public member 
variables 
Convenience 
constructor 

89 CHAPTER 4 
Connecting to web services 
this.estimatedHours = issue.estimatedHours; 
this.details = issue.details; 
} 
Listing 4.3 shows the Issue data object. There's not much to it. It contains several 
public member variables Q , which match the properties in its Java counterpart. Then 
you define a convenience constructor Q for constructing an Issue because the Web-
Service will not return actual Issue objects, but rather construct an ObjectProxy, 
which is an anonymous dynamic object that contains the same properties as the Issue 
object. You define a constructor that allows you to create an Issue object from tiiis 
ObjectProxy. 
Listing 4.4 
Comment.as 
package org.foj.dto { 
public class Comment { 
public var id:int; 
public var issue:Issue; 
public var author:String; 
public var createdDate:Date; 
public var commentText:String; 
public function Comment(comment:* = null) { 
if (comment != null) { 
this.id = comment.id; 
this.author = comment.author; 
this.createdDate = comment.createdDate; 
this.commentText = comment.commentText; 
this.issue = new Issue(comment.issue); 
} 
Listing 4.4 shows the Comment data object, which looks similar to die Issue data 
object. It contains a few member variables O 
and a convenience constructor © . 
Next let's get down to die task of enhancing die UI by applying die M V P pattern to 
die application. 
Enhancing the master view 
The first part of the application that you'll be enhancing is the master view. You'll 
start by creating the Presenter for the master view. Then you'll create the Issues 
model, which will encapsulate die interaction witii the web services you created in 
chapter 1. W h e n you're done, update die view to dispatch the necessary events to 
function properly. 
Public member 
variables 
Convenience 
constructor 

Enhancing the comments view 
67 
4.5.1 
Creating a Presenter for the master view 
Because the Presenter is responsible for most of what goes on in the application, it will 
be the first part of the M V P triad that you'll be creating. The Presenter for the master 
view part of the application needs only a couple of different events to react to. 
Because the application is stateful by nature, you need to refresh die list of Issues 
whenever any of the issues are changed, tiiat is, an issue is created or removed, when-
ever an individual issue is updated, or when die user clicks the Refresh Issues button. 
The Presenter also needs to react when die user clicks die Remove Issue button. The 
following listing shows the code for the MasterPresenter class. 
Listing 4.5 
MasterPresenter.as 
package org.foj.presenter { 
public class MasterPresenter { 
__ View 
private var _view:MasterViewComponent; 
<-l 
O 
Model 
private var _issueModel:SoapIssueModel; 
J 
public function MasterPresenter(view:MasterViewComponent = null) { 
this._issueModel = new SoapIssueModel(); 
this ._view = view; 
Constructor 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.REFRE SH_IS SUE S_BUTTON_C LICKED, 
< 
getlssues); 
EventDispatcherFactory.getEventDispatcher() 
. addEventListener (UIEvent. SELECTED_ISSUE_SAVED, 
<1 
getlssues); 
EventDispatcherFactory.getEventDispatcher() 
. addEventListener (UIEvent. CANCELLED_ISSUE_EDIT, 
<1 
getlssues); 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.REMOVE_ISSUE_BUTTON_CLICKED, 
<1 
removeIssue); 
i 
Subscribing to events 
Getting 
private function getlssues(event:UIEvent = null):void { 
CursorManager. setBusyCursor () ; 
A 
the issues 
_issueModel.getlssues(new AsyncResponder(getlssuesResult, 
handleError)); 
} 
private function removelssue(event:UIEvent):void { 
CursorManager.setBusyCursor(); 
var selectedlssue:Issue = event.data; 
_issueModel.removelssue(selectedlssue.id, 
new AsyncResponder(removelssueResult, handleError)); 
} 
private function getlssuesResult(event:ResultEvent, 
token:AsyncToken = null):vo 
CursorManager.removeBusyCursor(); 
1> 
Removing 
an issue 
Responding to 
A 
getlssues result 
I 
iid { 
<1—1 

91 CHAPTER 4 
Connecting to web services 
var issues = new ArrayCollection(); 
for each(var item:Object in event.result) { 
var issue:Issue = new Issue(item); 
issues.addltem(issue); 
} 
_view.masterViewDataGrid.dataProvider = issues; 
private function removelssueResult(event:ResultEvent, 
token:AsyncToken = nul"' 
new UIEvent(UIEvent.SELECTED_ISSUE_CHANGED); 
itemChangedEvent.data = new Issued; 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(itemChangedEvent); 
getlssues(); 
The Master Presenter contains references to the other two pieces of the M V P triad, 
die view O and die model © . The constructor © 
takes as an argument its view. 
These actions are necessary because you'll be constructing the Presenters in the view 
components as they're created. The view will tiien pass in a reference to itself when 
creating the Presenter. You then create an instance of the Model you'll be calling and 
register a few event listeners for die events tiiat the Presenter needs to react to Q . 
Metiiods are called as a result of die events being fired by the View. The first 
method getlssues Q 
is called to react to events that require die application to 
refresh the DataGrid. It first calls the CursorManager to change the mouse cursor 
to the busy cursor. Then it calls the Model's getlssues metiiod, passing in an Async-
Responder, which is a way to provide callback metiiods to the Model to call when a 
result is returned. 
When a ResultEvent is fired by die Model, it calls the getlssuesResult O call-
back metiiod, which changes die mouse cursor back to die normal cursor and 
updates the DataGrid by setting its dataProvider property to the collection of 
Issues returned from the Model. As stated earlier, die web service returns a collec-
tion of ObjectProxy objects you need to iterate 
tiirough 
to create actual Issue 
objects for the view. 
There are also metiiods to handle when die user clicks on die Remove Issue but-
ton © and its callback for a successful return 
A simple and generic error han-
dling function © returns the cursor to the normal state, and pops up an Alert box 
CursorManager.removeBusyCursor(); 
_view.masterViewDataGrid.selectedlndex = -1; 
var itemChangedEvent:UIEvent = 
private function handleError(event:FaultEvent, 
token:AsyncToken = null):void { 
CursorManager.removeBusyCursor(); 
Alert.show(event.message.toString()); 

Enhancing the master view 
69 
WebServices, AsyncToken, and IResponder 
In Flex, calls to remote services happen asynchronously, and return an Async-
Token object that you can use to add callbacks to be executed when either a 
ResultEvent or FaultEvent returns as a result of the remote service call. One 
way to bind these event handlers to an AsyncToken is to add an object that con-
forms to the iResponder interface, such as an AsyncResponder, which takes in a 
callback to call on a ResultEvent and one to call if it returns a FaultEvent 
instead in its constructor. 
containing the error message returned from die remote call. Obviously you'll want to 
replace tiiis simplistic error handling when developing real applications, but for the 
simple example, tiiis will suffice. Now let's create the Model component. 
4.5.2 
Creating an Issue Model 
The next component in die M V P triad that you'll implement is die Model. The Model 
in MVP, sometimes referred to as die Domain Model, represents die core of the busi-
ness domain and is often responsible for manipulating data in a relational database, 
or in tiiis case calling an external service that will handle persisting the data. 
Listing 4.6 
IssueModel.as 
package org.foj.model { 
import mx.rpc.AsyncToken; 
import mx.rpc.IResponder; 
import mx.rpc.soap.WebService; 
import org.foj.dto.Issue; 
public class IssueModel { 
private var _issueService:WebService; 
J 
Create new 
WebService 
public function IssueModel() { 
_issueService = new WebService(); 
_issueService.wsdl = 
"http://localhost:8080/services/IssueService?wsdl 
if (_issueService.canLoadWSDL()) { 
_issueService.loadWSDL(); 
} 
public function getlssues(responder:IResponder):void { 
var token:AsyncToken = _issueService.getAll(); 
token.addResponder(responder); 
} 
J 
" i 
Set its wsdl 
property 
Load the wsdl 
1> 
getlssues 
public function removelssue(id:Number, responder:IResponder):void { 
var token:AsyncToken = _issueService.remove(id); 
token.addResponder(responder); 
} 
removelssues n 

70 
CHAPTER 4 Connecting to web services 
Listing 4.6 shows the code for die IssueModel so far. In the constructor, you create a 
WebService object © and set its wsdl property to http://localhost:8080/services/ 
IssueServicePwsdl 
Using WebService destinations 
If you prefer not to hardcode the WebService URL inside your Model classes, you 
can set up the WebService destination metadata in the services-config.xml config-
uration file. Using this approach enables you to refer to the WebService by its 
destinationlD in order to load the WSDL rather than using a URL to the WSDL. 
To use this approach you'll need to replace the sections of code where you set the 
wsdl property on your WebService objects like _issueService.wsdl with code 
that sets the destination property to the destination name you configured in the 
services-config.xml. By leveraging Maven profiles along with its resource filter-
ing you can put property placeholders in your services-config.xml and define dif-
ferent destinations for your web services in the Maven profiles for the different 
environments. For more information on using Maven profiles and resource filtering, 
refer to the Maven reference at http://www.sonatype.com/books/mvnref-book/ 
reference/public-book.html. We'll cover working with destinations in chapter 5 
when discussing BlazeDS remoting. 
Next you need to call the loadWSDL method Q on die WebService so tiiat die Web-
Service will download die W S D L and be able to make calls against die web service. 
This is a necessary step when defining your WebService in ActionScript as opposed to 
using die WebService M X M L tag. As die final steps, you define die two business metii-
ods getlssues © 
and removelssue © . which call die web service and add die 
responder callback you passed in from the Presenter as a responder to the Async-
Token. Let's wrap up tiiis M V P triad by refactoring die MasterView. 
4.5.3 
Updating the master view 
Now tiiat we've got the Presenter and Model in place, let's update die MasterView to 
add functionality. 
Listing 4.7 
MasterView.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<mx:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
layout="vertical" 
title="Issues" 
width="100%" 
height="100%" 
fl 
creationComplete= " init () " > 
<1—I 
< fx:Script> 
<![CDATA[ 
creationComplete 
event 

Enhancing the comments view 
71 
import mx.events.ListEvent; 
import org.foj.dto.Issue; 
import org.foj.event.EventDispatcherFactory; 
import org.foj.event.UIEvent; 
import org.foj.presenter.MasterPresenter; 
private var presenter:MasterPresenter; 
private function init():void { 
presenter = new MasterPresenter(this); 
refreshList(); 
} 
{ 
J 
J 
Bootstrapping 
Presenter 
refreshList 
private function refreshList():void 
var refreshEvent:UIEvent = 
new UIEvent(UIEvent.REFRESH_ISSUES_BUTTON_CLICKED); 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(refreshEvent); 
} 
selectedltemChanged 
Q 
private function selectedltemChanged(event:ListEvent):void { 
var itemChangedEvent:UIEvent = 
new UIEvent(UIEvent.SELECTED_ISSUE_CHANGED); 
itemChangedEvent.data = masterViewDataGrid.selectedltem as Issue; 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(itemChangedEvent); 
private function removeSelectedlssue():void { 
var selectedlssue:Issue = 
masterViewDataGrid.selectedltem as Issue; 
var removeEvent:UIEvent = 
new UIEvent(UIEvent.REMOVE_ISSUE_BUTTON_CLICKED); 
removeEvent.data = selectedlssue; 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(removeEvent); 
} 
] ]> 
</fx:Script> 
<mx:DataGrid id="masterViewDataGrid" 
width="100%" 
height="100%" 
itemClick="selectedltemChanged(event); 
<mx:columns> 
<mx:DataGridColumn dataField= 
headerText 
<mx:DataGridColumn dataField= 
headerText 
<mx:DataGridColumn dataField= 
headerText 
<mx:DataGridColumn dataField= 
headerText 
<mx:DataGridColumn dataField= 
headerText 
<mx:DataGridColumn dataField= 
removeSelectedlssue 
J 
datagrid 
itemClick event 
"id" 
="ID" width="50"/> 
"proj ect" 
= "Project" width="120"/> 
"description" width="200" 
="Description"/> 
"type" 
="Type" width="120"/> 
"severity" 
="Severity" width="70"/> 
"status" 
headerText="Status" width="100"/> 
DataGridColumn 
bindings 

72 
CHAPTER 4 
Connecting to web services 
</mx:columns> 
</mx:DataGrid> 
<mx: ControlBar width= 11100% 11 > 
© 
Refresh List 
<mx: Button label= " Refresh List" click= " ref reshList () "/> 
<—I 
dick event 
<mx:Button label="Remove Selected Issue" 
click="removeSelectedlssue()" 
enabled="{masterViewDataGrid.selectedltem != null}"/> 
</mx:ControlBar> 
, 1 
: © 
Remove Selected 
</mx: Panel> 
Issue click event 
Listing 4.7 shows the updated MasterView.mxml. The first change is the addition of 
a handler for the creationComplete event of die component Q . You use tiiis event 
to help bootstrap the Presenter © and make a call to die refreshList © metiiod to 
populate the DataGrid automatically on startup. The refreshList method is used 
to respond to the click event on the Refresh List button as well © . Next you define 
an event handler metiiod called selectedltemChanged © • which responds to any 
clicks within die DataGrid © . 
You also define an event handler method called removeSelectedlssue © 
to 
respond to any clicks of die Remove Selected Issue button © . To ensure tiiat this but-
ton is enabled only when we have an actively selected row in the DataGrid, we've 
bound the enabled property of die button to the selectedltem property of die 
DataGrid. We've bound die DataGridColumn items © in die DataGrid to die proper-
ties defined on die Issue data object earlier. This will allow die DataGrid to bind the 
column values to die objects in its data provider. 
4.6 
Enhancing the detail view 
The next MVP triad you'll create is for die detail view. Just as you did in die previous 
section, you'll begin by creating the Presenter, tiien add the necessary metiiods to the 
IssueModel, and finish by enhancing die View. 
4.6.1 
Creating a DetailPresenter 
The DetailPresenter must maintain more state tiian the MasterPresenter. Because 
the code necessary for the DetailPresenter is more complex, we'll break it up into 
smaller chunks, starting with listing 4.8. 
Listing 4.8 
DetailPresenter.as 
package org.foj.presenter { 
public class DetailPresenter { 
__ Selected issue 
J 
private var _issue: Issue; 
<]—I 
B 
View 
private var _view:DetailView; 
<1—I 
B 
Model 
private var _issueModel: IssueModel; 
<1—I 
public function DetailPresenter(view:DetailView) { 

Enhancing the detail view 
73 
this._issueModel = new SoapIssueModel(); 
this._view = view; 
this._issue = new Issued; 
view.issueTypes = new ArrayCollection( 
["Bug", "Feature Request", "Enhancement"] 
) ; 
view.severityTypes = new ArrayCollection! 
["Minor", "Major", "Severe"] 
) ; 
view.statusTypes = new ArrayCollection! 
["Open", "In Progress", "On Hold", "Finished"] 
) ; 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.SELECTED_ISSUE_CHANGED, 
changedlssue); 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.SAVE_ISSUE_BUTTON_CLICKED, 
savelssue); 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.CANCELLED_ISSUE_EDIT, 
cancelChanges); 
6 
Initialize 
components 
Populate 
combo boxes 
A 
Add event 
listeners 
The DetailPresenter not only holds references to die View Q and Model Q , it also 
needs to hold a reference to die currendy selected issue O from die DataGrid in die 
MasterView. In die constructor you initialize the Model, set the View to what is being 
passed in, and create an empty Issue object Q . Next die Presenter sets die possible 
values in die combo boxes for die issue types, severity, and status Q by creating Array-
Collections with the possible values and setting the dataProvider property of the cor-
responding ComboBox. Then you add event listeners Q to respond to die events tiiat 
the DetailView will fire, as well as the changed issue event that die MasterView fires 
when die selected item in the DataGrid changes. The following listing shows die rest of 
the code for die DetailPresenter. 
Listing 4.9 
DetailPresenter.as (continued) 
private f" 
retur: 
} 
private 
this.. 
_view 
_view 
_view 
_view 
_view 
_view 
J 
Get property for 
unction get selectedlssue (): Issue { 
<1—I 
selected issue 
n this._issue; 
selected issue 
function set selectedlssue(issue : Issue) : void { 
_issue = issue; 
.issueld = issue.id == 0 ? "" : issue.id.toString(); 
.project = issue.project; 
.description = issue.description; 
•type = issue.type; 
.severity = issue.severity; 
.status = issue.status; 
^ ^ p 
Set property for 

97 CHAPTER 4 
Connecting to web services 
_view.details = issue.details ; 
_view.reportedBy = issue.reportedBy; 
_view.reportedOn = issue.reportedOn; 
_view.assignedTo = issue.assignedTo; 
_view.estimatedHours = isNaN(issue.estimatedHours) ? 
"" : issue.estimatedHours.toString(); 
_view.addEditLabel = issue.id == 0 ? 
"Add Issue" : "Save Issue"; 
private function savelssue (event : UIEvent = null) : void { 
<1—, 
_issue.project = _view.project; 
A 
Save issue 
_issue.description = _view.description; 
_issue.type = _view.type; 
_issue.severity = _view.severity; 
_issue.status = _view.status ; 
_issue.details = _view.details ; 
_issue.reportedOn = _view. reportedOn; 
_i s sue. reportedBy = _view.reportedBy; 
_issue.assignedTo = _view.assignedTo; 
_issue.estimatedHours = !isNaN(Number(_view.estimatedHours)) ? 
Number(_view.estimatedHours) : null; 
_issueModel.savelssue(_issue, 
new AsyncResponder(savelssueResult, handleError)); 
'' 
Q 
Cancel 
private function cancelChanges(event :UIEvent = null) : void { 
<—' 
changes 
selectedlssue = new Issued; 
A 
Selected Issue 
private function changedlssue(event:UIEvent):void { 
<—' 
changed 
selectedlssue = event.data; 
' 
Save issue result 
O 
private function savelssueResult(resultEvent:ResultEvent, 
token : AsyncToken = null) :void { 
<1—' 
selectedlssue = new Issue(resultEvent.result); 
var event:UIEvent = new UIEvent(UIEvent.SELECTED_ISSUE_SAVED); 
event.data = _issue; 
EventDispatcherFactory.getEventDispatcher().dispatchEvent(event); 
} 
private function handleError(event:FaultEvent, 
token :AsyncToken = null) :void { 
<—, 
Alert.show(event.message.toString()); 
j 
Error handler 
Q 
You then create get and set properties Q , Q for tlie currently selected issue. The get 
property will return the current issue; the set property will update all die form fields 
in the view so tiiat they match die currendy selected issue. 
Next you've defined a method to handle saving die Issue Q , which gets die values 
from the view and updates die currently selected Issue before calling die savelssue 

Enhancing the comments view 
75 
Properties in ActionScript 
ActionScript, unlike Java, has first-class support for properties similar to other lan-
guages such as C#, Ruby, and Groovy. This gives you the ability to get and set val-
ues on a variable as if it were a public member variable on the class, instead of 
having to do getxxx () and setxxx () methods as you would in Java. 
The syntax for defining get/set properties is as follows: 
public function get name():String { 
return _name; 
} 
public function set name(value:String):void { 
_name = value; 
Many developers use the convention of prefixing the private member variables with 
an underscore (_) so that the compiler can figure out if you are trying to reference 
the private member variable or the get/set property in the class. One of the advan-
tages of using get/set properties is that it removes the need to define a lot of 
getxxx/setxxx methods that do nothing beyond getting and setting the private 
variable. Using properties allows you to define your member variables as public. If 
you need to encapsulate logic when member variables are accessed, you can easily 
refactor your class to use a get/set property, and none of the classes that use it 
will have to change as a result. 
method on die model. The method tiiat responds to die Cancel Changes button 
being clicked Q sets the selected issue to a brand new Issue object. Whenever die 
SELECTED_ISSUE_CHANGED event is fired, die changedlssue 0 
metiiod is called and 
sets die selected Issue by using the set property you defined earlier. You create die 
handlers for die savelssueResult Q and die error handler Q to handle die result 
from calling die IssueModel. 
4.6.2 
Updating the IssueModel 
Now diat you've implemented die Presenter for die details view, let's do die same for 
the new methods in the IssueModel to support the updated functionality. 
Listing 4.10 
IssueModel.as 
package org.foj.model { 
public function getlssue(id:Number, responder:IResponder):void { 
var token:AsyncToken = _issueService.get(id); 
token.addResponder(responder); 
} 
getlssue 
savelssue 
public function savelssue(issue:Issue, responder:IResponder):void { 
var token:AsyncToken = _issueService.save(issue); 
' J 

76 
CHAPTER 4 
Connecting to web services 
token.addResponder(responder); 
} 
} 
} 
Just as before, the methods in the IssueModel are fairly simple. The g e t l s s u e 
O 
method takes an id parameter to find a specific Issue as well as an IResponder to add 
a responder to the token returned from die call to the WebService. The savelssue © 
method takes in an Issue object to pass along to die WebService to persist, as well as 
an IResponder. 
4.6.3 
Updating the detail view 
The last part of die MVP triad tiiat needs to be updated now is die DetailView. List-
ing 4.11 shows die updated version of die DetailView.mxml after you add die neces-
sary methods to dispatch the events to save an Issue or cancel die changes. 
Listing 4.11 
DetailView.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<mx:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
layout="vertical" 
title="Details" 
width="100%" 
height="100%" 
creationComplete="init()"> 
< fx:Script> 
<![CDATA[ 
import mx.collections.ArrayCollection; 
import org.foj.event.EventDispatcherFactory; 
import org.foj.event.UIEvent; 
import org.foj.presenter.DetailPresenter; 
private var _presenter:DetailPresenter; 
private function init():void { 
_issueType.selectedlndex = -1; 
_issueSeverity.selectedlndex = -1; 
_issueStatus.selectedlndex = -1; 
_presenter = new DetailPresenter(this); 
} 
J 
creationComplete 
J 
initialization 
J 
saveChanges 
private function saveChanges():void { 
var saveEvent:UIEvent = new UIEvent(UIEvent.SAVE_ISSUE_BUTTON_CLICKED); 
EventDispatcherFactory.getEventDispatcher().dispatchEvent(saveEvent); 
} 
cancelChanges 
private function cancelChanges():void { 
var cancelEvent:UIEvent = new UIEvent(UIEvent.CANCELLED_ISSUE_EDIT); 

Enhancing the comments view 
77 
EventDispatcherFactory.getEventDispatcher().dispatchEvent(cancelEvent); 
} 
] ]> 
</fx:Script> 
<mx:Form id="_issueDetailForm" width="100%"> 
</mx:Form> 
<mx:ControlBar> 
<mx:Button id="_saveChangesButton" 
label="Add Issue" 
click="saveChanges()"/> 
<mx:Button id="_cancelChangesButton" 
label="Cancel Changes" click 
</mx:ControlBar> 
</mx:Panel> 
You tell tlie component to call the i n i t © method to initialize tlie component when 
the creationComplete O event is fired. Inside die i n i t method, you bootstrap die 
Presenter just as you did earlier in the MasterView. You also set die s e l e c t e d l t e m 
property on the tiiree combo boxes to -1, so they don't have a value selected when 
the component is first created. Then you add an event handler for die click event 
on die saveChangesButton 0 
called saveChanges 0 . 
Inside the saveChanges 
method you dispatch an event signaling that die button has been clicked. As a final 
step, you add an event handler cancelChanges 0 
for die click event on die cancel-
ChangesButton 0 
and it dispatches an event notifying die application that tlie but-
ton had been clicked. 
4.7 
Enhancing the comments view 
You've almost finished enhancing die sample application. The last part that needs to 
be updated is die comments view. You'll start by creating an MVP triad just as before. 
Later you'll add a modal pop up to add new comments and edit existing comments. 
Let's get started. 
4.7.1 
Creating a comments presenter 
Creating tlie Presenter for the comments view of tlie application will be just like cre-
ating the last two Presenters. The CommentsListPresenter will be responsible for 
maintaining more state than the previous Presenters. It will need to maintain a 
reference to not only the currendy selected issue, but also the currently selected 
comment, to properly persist die Comment objects. Because die code for die Comments-
L i s t P r e s e n t e r is rather lengtiiy, we'll break it up. The following listing shows tlie 
first section in which you define which events this Presenter will listen for and a 
couple of get/set properties. 
0 
click event on 
^ T 
saveChangesButton 
=" cancelChanges () " /> 
<1—i 
dick event on 
I 
cancelChangesButton 
0 

101 CHAPTER 4 
Connecting to web services 
Listing 4.12 
CommentsListPresenter.as 
package org.foj.presenter { 
public class CommentsListPresenter { 
private var _selectedlssue:Issue; 
Maintaining 
private var _selectedComment: Comment; 
« 
State 
private var _commentModel:CommentModel; 
private var _view:CommentsView; 
private var _popl:EditCommentForm; 
public function CommentsListPresenter(view:CommentsView = null) { 
this._commentModel = new CommentModel(); 
this. _view = view; 
Constructor •I 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.SELECTED_ISSUE_CHANGED, 
<—i 
£Vent 
changeSelectedlssue) ; 
Q 
listeners 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.DELETE_COMMENT_BUTTON_PRESSED, 
removeComment); 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.SELECTED_COMMENT_CHANGED, 
changeSelectedComment); 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.COMMENTS_UPDATED, 
refreshComments); 
private function get selectedlssue():Issue { 
return this._selectedlssue; 
private function set selectedlssue (issue: Issue) : void { 
selectedlssue 
this._selectedlssue = issue; 
_view.addCommentButton.enabled = issue.id > 0; 
private function get selectedComment():Comment { 
return this._selectedComment; 
} 
Q 
get property for 
^ J 
selectedlssue 
set property for 
J 
get property for 
selectedComment 
private function set selectedComment(comment:Comment):void { 
this._selectedComment = comment; 
_view.editCommentButton.enabled = comment != null; 
set property for 
_view. deleteCommentButton. enabled = comment != null; 
selectedComment a 
: © 
} 
First you define variables to maintain die state © . Then you define a constructor 
© 
diat takes in a reference to die View tiiat tiiis Presenter is created for. Next you initial-
ize the Model, and add a few event listeners © for die Presenter so it can react prop-
erly to specific events. 

Enhancing the comments view 
79 
Once again you're leveraging get and set properties in this Presenter, using die set 
property to trigger whether or not certain elements of the view should be enabled. 
You start by creating a get property for the currendy selected issue Q , and in its corre-
sponding set property 
you determine whetiier or not to enable the Add Com-
ments button based on whetiier or not the currently selected issue's id property is 
greater tiian zero, indicating it has been saved. You do tiiis to make sure that the user 
can't save a comment for an Issue tiiat has not been persisted to die backend previ-
ously. You create a get property for die currendy selected comment Q as well as a set 
property for the selected comment Q . Similar to the last set property, you use tiiis 
opportunity to enable or disable die Edit Comment and Delete Comment buttons 
based on whether or not tiiere is a comment selected in die List component contain-
ing die comments. 
Listing 4.13 
CommentsListPresenter.as (continued) 
private function changeSelectedlssue(event:UIEvent):void { 
< 
selectedlssue = event.data; 
selectedComment = null; 
Handler for 
- 
, 
,, 
selectedlssue changing 
V 
refreshComments() ; 
6 
6 
} 
F°R JH 
;ing 
O 
private function changeSelectedComment(event:UIEvent):void { 
selectedComment = event.data; 
j 
Handler 
selectedComment changing 
private function removeComment(event:* = null) :void { 
<—. 
CursorManager. setBusyCursor () ; 
Q 
removeComment 
_commentModel.removeComment(selectedComment.id, 
new AsyncResponder(removeCommentResult, handleError)); 
} 
private function refreshComments(event:* = null):void { 
CursorManager.setBusyCursor() ; 
_commentModel.getCommentsForlssueld(selectedlssue.id, 
new AsyncResponder(loadCommentsResult, handleError)); 
} 
1> 
refresh 
comments list 
private function removeCommentResult(event:ResultEvent, 
token:AsyncToken = null):void { 
CursorManager.removeBusyCursor() ; 
.1 
ref reshComments () ; 
removeCommentResult 
} 
private function loadCommentsResult(event:ResultEvent, 
token:AsyncToken = null):void { 
CursorManager.removeBusyCursor() ; 
var comments:ArrayCollection = new ArrayCollection(); 
for each (var result:* in event.result) { 
M ^ 
loadCommentsResult 
0 
comments.addltem(new Comment(result)); 
** 
} 
_view.commentsList.dataProvider = comments; 

80 
CHAPTER 4 
Connecting to web services 
_view.commentsList.selectedlndex = -1; 
selectedComment = null; 
} 
private function handleError(event:FaultEvent, 
token:AsyncToken = null):void { 
CursorManager.removeBusyCursor(); 
Alert.show("Error occured: " + event.message); 
} 
} } 
Listing 4.13 shows the rest of the code for the CommentsListPresenter. First you 
define a mediod to handle changes to the selected issue © , where you set die selected 
issue from die data passed along in die event. You tiien set the selected comment to 
null, and refresh die list of comments to be displayed. When someone clicks on a 
comment in die List view of the CommentsView, die selectedCommentChanged 
© 
method will be called, where you set die selected comment to die comment in die 
incoming event. 
The next mediod you define handles die user clicking die Remove Comment 
button © . You first tell die CursorManager to set die busy cursor, as you did earlier 
in die odier Presenters. Then you make a call to die CommentModel to remove die 
selected comment. When the result comes back © 
from die call to the Comment-
Model you remove the busy cursor and tell die Presenter to refresh die list of com-
ments for die view. 
To refresh die list of comments you created a function called ref reshComments © , 
which makes a call to the CommentModel to retrieve a list of comments for a given issue 
id. When die result comes back from this call © , you iterate tiirough the list of 
ObjectProxy instances that come back from the WebService and use die convenience 
constructor you defined at die beginning of tiiis chapter to create a list of Comment 
objects. You then set the dataProvider property of the List component in the view to 
this list of Comment objects and remove die busy cursor. Last you create a simple error 
handler © as you did for die two Presenters you created earlier. 
4.7.2 
Creating a comment model 
Odier than the method names, die CommentModel will look similar to the IssueModel 
you created earlier. 
Listing 4.14 
CommentModel.as 
package org.foj.model { 
import mx.rpc.AsyncToken; 
import mx.rpc.IResponder; 
import mx.rpc.soap.WebService; 
public class CommentModel { 
private var _commentService:WebService; 
handleError 

Enhancing the comments view 
81 
public function SoapCommentModel () { 
<1—. 
_commentService = new WebService () ; 
A 
Constructor 
_commentService.wsdl = 
"http://localhost:8080/services/CommentService?wsdl"; 
if (_commentService.canLoadWSDL()) { 
_commentService.loadWSDL(); 
getCommentsForlssueld 
Q 
public function getCommentsForlssueld (issueld:Number, 
<1— 
responder:IResponder):void { 
var token:AsyncToken = _commentService.findCommentsBylssueld(issueld); 
token.addResponder(responder); 
* 
** 
removeComment 
J 
public function removeComment(id:Number, 
responder :IResponder):void { 
var token :AsyncToken = _commentService.remove(id); 
token.addResponder(responder); 
} 
} } 
In the constructor O you create a new WebService component and set its wsdl prop-
erty to die W S D L for die web service. Then just as you did earlier, you tell die Web-
Service to load die W S D L so you can make calls to it. Next you define die two 
mediods needed for die application to function, the getCommentsForlssueld Q and 
the removeComment Q methods. 
4.7.3 
CommentView 
Now that you have die metiiods implemented in die CommentModel, you can update die 
CommentsListView component to enable it to respond to user interaction. Listing 4.15 
shows the updated CommentsListView.mxml file. For now, you're going to respond 
only to clicks in die List component containing die comments and the Remove Com-
ment button. In die next section you'll start implementing the modal pop up that will 
allow you to add and edit comments. 
Listing 4.15 
CommentsListView.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<mx:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
layout="vertical" 
title="Comments" 
width="100%" 
height=" 100%" 
O 
creationComplete 
creationComplete= " init () " > 
<1—I 
< fx:Script> 
<![CDATA[ 
import org.foj.event.EventDispatcherFactory; 
import org.foj.event.UIEvent; 
import org.foj.presenter.CommentsListPresenter; 

105 CHAPTER 4 
Connecting to web services 
private var _presenter:CommentsListPresenter; 
private function init() :void { 
© 
init 
_presenter = new CommentsListPresenter(this); 
} 
J
» 
removeComment 
private function removeComment():void { 
commentsList.selectedlndex = -1; 
var removeCommentEvent:UIEvent = 
new UIEvent(UIEvent.DELETE_COMMENT_BUTTON_PRESSED); 
EventDispatcherFactory.getEventDispatcher() 
private function selectedltemChanged(event:Event):void { 
<—I 
var commentChangedEvent:UIEvent = 
new UIEvent(UIEvent.SELECTED_COMMENT_CHANGED); 
commentChangedEvent.data = commentsList.selectedltem; 
EventDispatcherFactory.getEventDispatcher().dispatchEvent 
(commentChangedEvent); 
} 
</fx:Script> 
<mx:List id="_commentsList" 
width="100%" 
height=11100%11 
© 
itemClick event 
itemClick="selectedltemChanged(event) " 
<—I 
labelField="commentText"> 
</mx:List> 
<mx:ControlBar> 
<s:Button id="_addCommentButton" 
label="Add New Comment" 
enabled="false"/> 
<s:Button id="_editCommentButton" 
label="Edit Comment" 
enabled="false"/> 
<s:Button id="_deleteCommentButton" 
label=" Delete Comment" 
© 
dick event 
click= " removeComment () " 
<—I 
enabled="false"/> 
</mx:ControlBar> 
</mx:Panel> 
Again, you use the creationComplete event © to call the init method © where you 
bootstrap the Presenter. You tiien create an event handler named removeComment © 
to handle die user clicking die Delete Comment button © . Inside this metiiod you set 
die selectedlndex to -1 so no items are selected in die List and dispatch an event 
notifying the rest of the application that the button has been clicked. Next you define 
an event handler method selectedltemChanged © 
to handle die user selecting an 
item in the List component © . 

Adding a pop-up form for editing comments 
83 
Add/Edit Comment 
Author : 
1 G 
Dote: 
/ / 
Comment; 
Sove Comment I 
Cancel | 
Figure 4.2 
Wireframe of pop up for editing comments 
4.8 
Adding a pop-up form for editing comments 
All that's left to complete the sample application is creating a pop up for adding and 
editing comments. Figure 4.2 shows a wireframe mockup of the pop up. It's a fairly 
simple pop-up dialog tiiat consists of a text input for the autiior's name, the date the 
comment was created, and a text area for entering die comment details. 
Now tiiat you see what you want to build, let's get started. The following section 
illustrates how you build die pop up, starting with updating the Comment Presenter. 
4.8.1 
Updating the CommentPresenter 
First let's add die methods you need to die CommentPresenter for die pop-up dialog. 
Listing 4.16 
Adding a pop up to CommentListPresenter.as 
private var _popl: EditCommentForm; 
<1—© 
Pop up component 
public function CommentsListPresenter(view:CommentsView = null) { 
< — 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.ADD_NEW_COMMENT_BUTTON_PRESSED, 
addNewComment) ; 
Add more 
EventDispatcherFactory. getEventDispatcher () 
event listeners 
© 
. addEventListener (UIEvent. EDIT_COMMENT_BUTTON_PRESSED, 
editComment); 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.SAVE_COMMENT_BUTTON_PRESSED, 
saveComment); 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.CANCEL_EDIT_COMMENT_BUTTON_PRESSED, 
cancelEdit); 

107 CHAPTER 4 
Connecting to web services 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.COMMENTS_UPDATED, 
refreshComments); 
} 
S 
addNewComment 
private function addNewComment(event:* = null):void { 
selectedComment = new Comment(); 
selectedComment.issue = selectedlssue; 
_popl = PopUpManager.createPopUp((_view as UlComponent).root, 
EditCommentForm, true) as EditCommentForm; 
PopUpManager.centerPopUp(_popl as UlComponent); 
private function editComment(event:* = null):void { 
_popl = PopUpManager.createPopUp((_view as UlComponent).root, 
EditCommentForm, true) as EditCommentForm; 
PopUpManager.centerPopUp(_popl as UlComponent); 
_popl.author.text = selectedComment.author; 
_popl.commentDate.selectedDate = selectedComment.createdDate; 
_popl.commentText.text = selectedComment.commentText; 
} 
editComment 
private function saveComment(event:* = null):void { 
CursorManager.setBusyCursor(); 
selectedComment.author = _popl.author.text; 
selectedComment.createdDate = _popl. commentDate.selectedDate; 
selectedComment.commentText = _popl.commentText.text; 
J 
saveComment 
_commentModel.saveComment(selectedComment, 
new AsyncResponder(saveCommentResult, handleError)); 
G 
cancelEdit 
private function cancelEdit(event:* = null) :void { 
<—I 
removePopUp(); 
} 
private function saveCommentResult(event:ResultEvent, 
token:AsyncToken = null) :void { 
<1—i 
CursorManager.removeBusyCursor(); 
selectedComment = event.result as corment; 
saveCommentResult handler 
O 
var commentsChangedEvent:UIEvent = 
new UIEvent(UIEvent.COMMENTS_UPDATED); 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(commentsChangedEvent); 
removePopUp(); 
} 
private function removePopUp():void { 
PopUpManager.removePopUp(_popl as UlComponent); 
} 
removePopUp 
Change the CommentPresenter to declare a member variable for die pop up itself 
Next add event listeners Q to respond to user clicks on die buttons on die Comments-
View and die pop up you're going to create. 

Adding a pop-up form for editing comments 
85 
Define an event handler for die Add New Comment Q button, set die selected 
comment to a brand new comment and create the pop up using die PopupManager. 
The call to createPopUp takes three parameters: die component that will be die par-
ent of die pop up, pop up class, and whetiier or not die pop up should be modal. Set 
the parent for die pop up to be die root application component so that when you call 
centerPopUp on the PopUpManager in die next line it will center relative to the whole 
application instead of to die CommentView. 
The next event handler, editComment © starts out in a manner similar to die 
addNewComment handler. You create a pop up using the PopUpManager and center it, 
then update the fields in die pop up with the values from die currendy selected com-
ment. When die user clicks the Save Comment button in die pop up, the saveComment 
© handler is called. You tiien take all the values from die pop up and update the cur-
rendy selected comment and make a call to die CommentModel to save die comment. 
When the user clicks die Cancel Changes button on die pop up, die cancelEdit Q 
metiiod is called, where you remove the pop up. 
When die result comes back from the call to save the comment, die saveComment-
Result handler Q is called. There you update die selected comment with die result 
from die web service call, then trigger the List to update by dispatching an event sig-
naling diat the comments have changed and remove die pop up Q . 
4.8.2 
Updating the CommentModel 
Next you add another metiiod to the CommentModel to call the web service and save 
a comment. 
Listing 4.17 
CommentModel.as 
public function saveComment(comment:Comment, 
responder:IResponder):void { 
var token:AsyncToken = _commentService.save(comment); 
token.addResponder(responder); 
} 
Listing 4.17 shows the method you add to the CommentModel to save comments. This 
metiiod is just like every other call we've made to die WebService. It delegates die call 
to the web service and adds a responder to die token so die application can react 
when the result comes back from the asynchronous call to the web service. 
4.8.3 
Creating the pop-up component 
Now you can create die actual pop up component tiiat you'll use to create new com-
ments as well as edit existing ones. Even though you're instantiating the pop up in 
ActionScript by making calls to the PopUpManager, it's easiest to define this actual com-
ponent in MXML just as with all die otiier View components. Listing 4.18 shows the 
contents of the EditCommentForm.mxml file defining the pop up. 

109 CHAPTER 4 
Connecting to web services 
Listing 4.18 
EditCommentForm.mxml 
<?xml version="1.0" ?> 
<mx:TitleWindow 
xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
title="Add/Edit Comment" 
height="400" 
width="500"> 
1> 
Extends 
TitleWindow 
< fx:Script> 
<![CDATA[ 
import org.foj.event.EventDispatcherFactory; 
import org.foj.event.UIEvent; 
private function saveComment():void { 
var saveEvent:UIEvent = 
new UIEvent(UIEvent.SAVE_COMMENT_BUTTON_PRESSED); 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(saveEvent); 
} 
J 
J 
saveComment 
eventHandler 
private function cancelChanges():void { 
var cancelEvent:UIEvent = 
new UIEvent(UIEvent.CANCEL_EDIT_COMMENT_BUTTON_PRESSED); 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(cancelEvent); 
} 
cancelChanges 
eventHandler 
] ]> 
</fx:Script> 
<mx:Form width="100%"> 
<mx:FormItem label="Author:" 
width="100%"> 
<mx:Textlnput id="_author" 
width="100%"/> 
</mx:FormItem> 
<mx:FormItem label="Date:" 
width="100%"> 
<mx:DateField id="_commentDate" 
width="100%" 
formatString="MM/DD/YYYY"/> 
</mx:FormItem> 
<mx:FormItem label="Comment:" 
width="100%"> 
<mx:TextArea id="_commentText" 
width="100%" 
height="200"/> 
</mx:FormItem> 
</mx:Form> 
<mx:ControlBar> 
<mx:Button id="_saveButton" 
label="Save Comment" 
click="saveComment()"/> 
J 
Form 
1> ControlBar 

Adding a pop-up form for editing comments 
87 
<mx:Button id="_cancelButton" 
label="Cancel" 
click="cancelChanges()"/> 
</mx:ControlBar> 
</mx:TitleWindow> 
The code for die pop up looks similar to die DetailsView for the issues. The main dif-
ference is this component extends die TitleWindow O 
component instead of the 
Panel component. Most of die pop up windows you'll create will extend tiiis compo-
nent. You dien define a couple of methods © , © to react to die button clicks of the pop 
up to dispatch UIEvents for die application to listen for. Just as with the DetailView, 
you use die Form component © for convenient layout of the form fields and labels for die 
pop up. You dien create a ControlBar © to hold die Save Comment and Cancel buttons. 
4.8.4 
Updating 
CommentsListView 
The only tiling left is to update the CommentsListView to dispatch the necessary 
events for die Add Comment and Edit Comment buttons. 
Listing 4.19 
Updated CommentListView.mxml 
private function addNewComment():void { 
var addNewCommentEvent:UIEvent = 
new UIEvent(UIEvent.ADD_NEW_COMMENT_BUTTON_PRESSED); 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(addNewCommentEvent); 
} 
private function editComment():void { 
var editCommentEvent:UIEvent = 
new UIEvent(UIEvent.EDIT_COMMENT_BUTTON_PRESSED); 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(editCommentEvent); 
} 
addNewComment 
editComment 
<mx:ControlBar> 
<s:Button id="addCommentButton" 
label="Add New Comment" 
click="addNewComment()" 
enabled="false"/> 
<s:Button id="editCommentButton" 
label="Edit Comment" 
click="editComment()" 
enabled="false"/> 
<s:Button id="deleteCommentButton" 
label="Delete Comment" 
click="removeComment()" 
enabled="false"/> 
</mx:ControlBar> 
© 
dick handlers 
on the buttons 
The first two changes to die CommentsListView are adding methods © , © 
to be 
called when die A d d New Comment and Edit Comment buttons are clicked. These 

111 CHAPTER 4 
Connecting to web services 
will create and dispatch UIEvents like every otiier view you've defined so far. Then you 
update die buttons tiiemselves Q so that they will call die metiiods you defined when 
diey are clicked. 
Summary 
In diis chapter you explored die architectural elements tiiat make up a well-designed, 
flexible, 
and maintainable RIA. You learned how to apply the MVP pattern to die code 
and how following diat pattern, you effectively separate die areas of concern into tiieir 
isolated parts. After you abstracted the calls to external services in the Model, you dis-
covered how easy it would be to potentially replace this portion of die code witiiout 
affecting any odier part of die code. 
In the next chapter you'll build upon what you've assembled in diis chapter and 
introduce die Spring BlazeDS Integration framework and BlazeDS remoting. 

Part 2 
BlazeDS remoting 
n the tlie first of two chapters in part 2, you'll dive into BlazeDS remoting, 
learning the basics of BlazeDS and refactoring die example application to take 
advantage of it. In a nutshell, BlazeDS is a collection of Java components that 
you can deploy witii your web application for AMF/HTTP 
communication 
between Flex and Java. BlazeDS also supports messaging. BlazeDS is basically a 
subset of the commercial Flex Data Services offering from Adobe, and although 
you can do many tilings with BlazeDS, certain functions like clustering and 
advanced binding techniques can only be accomplished witii the full-blown Flex 
Data Services. 
In chapter 6, you'll take die next step in evolving our Flex and Java communi-
cations and take advantage of real-time messaging between the two using 
BlazeDS messaging. The chapter exploits the use of the Flex Messaging API and 
simple polling to receive updates from die server when changes in die model 
have occurred. 
You will learn how to set up BlazeDS logging, performance benchmarking, 
and Flex Messaging. 


BlazeDS remoti 
and loggi 
This chapter covers 
• 
Building a BlazeDS Configuration Module 
• 
Flex and Java communication with BlazeDS 
• Spring BlazeDS Integration framework 
• 
Logging events and performance statistics 
In previous chapters you built a Flex client application using the MVP design pat-
tern and connected it to Java through web services. Now you're going to move from 
XML/HTTP web services and try remoting. 
For Action Message Format communication, or AMF, Flex provides die 
RemoteObject component tiiat uses Adobe's own AMF binary protocol to com-
municate with die server. This means you'll need a process running on die 
server side, such as BlazeDS, tiiat understands how to serialize and deserialize 
the AMF protocol. 
In the next section we introduce you to BlazeDS and begin integrating with 
our sample application. We'll be using the FlexBugs sample application but it 
would be equally useful to wire up your own slice of functionality to see it work for 
your own purposes. 
91 

115 
CHAPTER 5 
BlazeDS remoting and logging 
Introducing BlazeDS 
A Flex client typically runs in a web browser or through the AIR desktop application 
platform. BlazeDS comes into the technology stack for use when the client needs to 
communicate witii a Java application on the server that is commonly powered by a 
service-oriented architecture (SOA). Figure 5.1 shows die basic anatomy of a BlazeDS 
application framework. 
In a nutshell, BlazeDS is a collection of Java components that you can deploy witii 
your web application for AMF/HTTP communication between Flex and Java. BlazeDS 
also supports messaging. BlazeDS is basically a subset of die commercial Flex Data Ser-
vices offering from Adobe, and although you can do many tilings with BlazeDS, cer-
tain functions like clustering and advanced binding techniques can only be 
accomplished witii the full-blown Flex Data Services. 
NOTE 
In Adobe's words, BlazeDS is die server-based Java remoting and 
web messaging technology tiiat enables developers to easily connect to 
back-end distributed data and push data in real-time to Adobe® Flex® and 
Adobe AIR™ applications for more responsive rich Internet application 
(RIA) experiences. 
You may be asking, "Why would I use BlazeDS instead of web services?" One of the 
biggest advantages to using die AMF protocol for communication is performance. 
Adobe's James Ward put together a nice application called BlazeBench (http://www. 
jamesward.com / wordpress/2007/12/12/blazebench-why-you-want-amf-and-blazeds/), 
which benchmarks metiiods of communicating to die server side from a web applica-
tion, including Flex, and displays the different aspects of die transaction. Figure 5.2 
shows a sample output from BlazeBench. 
It may be difficult to see in die screenshot, but die total execution time for an 
operation using Flex AMF3 is by far quicker for round-trip time to die server, and 
Flash Player or Air Platform 
Flex Client (SWF) 
BlazeDS components 
RemoteObject 
HTTPService/WebServise 
Producer/Consumer 
Figure 5.1 The BlazeDS architecture 
MessageBrokerServlet 
Message Broker 
Service 
Destination 
Adapter 

Getting BlazeDS 
93 
R<KW WOO 
* 
C2lp * 
E*»cut# 
Ajai HTML 
5ervef built HTML tabic 
A|a> HTML 
Aja* SOAP 
SOAPW HTML tsHe 
AjwSOAP 
IjuXX. 
A|flj JSON 
XML to HTML t»bte 
JSON to HTML tttte 
Ajax JSON 
Octo 
JSON to Dqo FlltcilngTaWe 
UHto XML 
Flex SOAP AS 
Fta SOAPE4X 
Ftot XML AS 
LwdbXHL 
Flex SOAP AS 
Fl»» SOAP E4X 
XML to grid 
SOAP » A5 itjecti 
SOAP to 6 « Ot*«ti 
UHto XML 
Flex SOAP AS 
Fta SOAPE4X 
Ftot XML AS 
Flex XML AS 
XML to AS CtfKts 
Flex xml E4X 
Fie* XML E4X 
XML to E4X ttfKts 
Flex AHF3 
FlexAMFi 
Flex Paged 
S«rv*r t««< Tim 
O.Omi 
IDs 
• 
Data Bandwidth 
Ajan HTML 
Ajax SOAP 
Lsuto XML 
Flex SOAP AS 
Flex SOAPE4X 
Flex XML E4X • 
Flex AMF3 • 
Figure 5.2 
Comparing performances of various methods of transferring data from the server side to 
the client 
it has the smallest data bandwidtii for die transmission as well as the shortest 
parse time. 
Getting BlazeDS 
You're in luck if you are using Maven to build your web application. After much 
persistence from the development community, tiiere are now BlazeDS JARs in the 
main Maven repository. Add die dependencies shown in listing 5.1 in your pom.xml 
to include the BlazeDS libraries in your application and they are downloaded 
for you. 
Listing 5.1 
Adding BlazeDS to your pom.xml 
<dependency> 
<groupId>com.adobe.blazeds</groupId> 
<artifactId>blazeds-core</artifactld> 
<version>3.2.0.3978</version> 
</dependency> 
<dependency> 
<groupId>com.adobe.blazeds</groupId> 
<artifactId>blazeds-common</artifactld> 
<version>3.2.0.3978</version> 
</dependency> 
<dependency> 
<groupId>com.adobe.blazeds</groupId> 
<artifactId>blazeds-proxy</artifactld> 
<version>3.2.0.3978</version> 
</dependency> 

117 
CHAPTER 5 BlazeDS remoting and logging 
<dependency> 
<groupId>com.adobe.blazeds</groupId> 
<artifactId>blazeds-remoting</artifactld> 
<version>3.2.0.3978</version> 
</dependency> 
<dependency> 
<groupId>org.springframework.flex</groupId> 
<artifactld>spring-flex</artifactld> 
<version>l.0.0.RELEASE</version> 
</dependency> 
We've also included die Spring-Flex artifact because you're going to use this frame-
work for communicating with server-side destinations. The Spring BlazeDS Integration 
reduces the complexity in configuring BlazeDS. 
For diose not using Maven, you have to jump 
through a couple of hoops to get the proper 
libraries in your application. Adobe doesn't pro-
vide die JAR files direcdy on the BlazeDS down-
loads page (http://opensource.adobe.com/wiki/ 
display/blazeds/Release+Builds); it provides only 
die binary distribution as a WAR file, a turnkey 
solution which contains a ready-to-use Tomcat 
instance with sample applications, and a source 
download. The easiest way to get the JAR is to 
get die WAR distribution and extract them out 
of the WEB-INF/lib directory. Thankfully every-
thing you need to add to your web application 
is diere including all die dependencies. Figure 5.3 
shows the libraries contained in the WEB-INF/ 
lib directory. 
Now let's get BlazeDS connected up in a more modular way witii Maven. 
Building a BlazeDS configuration Maven module 
To share configuration dependencies between die Java 
web application and die Flex client you're going to cre-
ate a BlazeDS configuration module. The directory struc-
ture will look like die one in figure 5.4. You can create 
this module at the same level as die flex-bugs-web mod-
ule and the f l e x - b u g s - r i a module. 
As you can see die only tiling needed is the resources 
directory for die BlazeDS configuration files and die 
POM descriptor and a Maven assembly. Remember that 
die project structure can be generated much as was dem-
onstrated in chapters 2 and 3. If you don't generate 
diem with die Maven archetype you must specify in die 
I n g o n H 
| © 
|<H 
r r 
f tackport-util-com went.jar 
2 (fgatevtayadapier.jar 
f <ommons-co<lec-1.3.jar 
11 (ommons-tittpcl«nt-3.0.1.jar 
2 (ommons-logging.jar 
J (OiKurrenl.jaf 
2 flex-meisaging-tortirrajnjar 
g flex-messaging-tore.jar 
f flex-messaging-opl.jar 
± flex-messagirtg-proxy jar 
2 flen-mss sagi ng-remoti ng.jar 
2 xalan.jar 
Figure 5.3 
BlazeDS libraries and 
their dependencies 
3 Q flex-bugs 
• 
flex-bugs-blaze-conftg 
El 
src 
0 Ù main 
assembly 
resources 
Flex-bugs-ria 
j flex-bugs-web 
Figure 5.4 
BlazeDS 
configuration module project 
structure 

Building a BlazeDS configuration Marien module 
95 
top-level POM (flex-bugs) a new module, and you must associate die BlazeDS configu-
ration as a dependency for die other projects. 
Next modify die module's POM descriptor file. 
Listing 5.2 
BlazeDS configuration module POM 
<?xml version="1.0"?> 
<project> 
<parent> 
<artifactld>flex-bugs</artifactld> 
<groupId>org.foj</groupId> 
<version>l. C)-SNAPSHOT</version> 
</parent> 
<modelVersion>4.0.0</modelVersion> 
<groupId>org.foj</groupId> 
<artif actld>f lex-bugs-blaze-conf ig</artif actld> 
© 
Coordinates indicate 
<packaging>pom</packaging> 
<1—* 
packaging 
<version>l.C)-SNAPSHOT</version> 
<build> 
<plugins> 
<plugin> 
<groupId>org.apache.maven.plugins</groupId> 
<artifactld>maven-assembly-plugin</artifactld> 
<1—1 
Using Maven 
<executions> 
Q 
assembly plugin 
<execution> 
<id>Package BlazeDS configuration</id> 
<goals> 
<goal>single</goal> 
</goals> 
© 
Assembly happens 
<phase>package</phase> 
<h-T 
during package phase 
<configuration> 
<descriptors> 
<descriptor>src/main/assembly/resources.xml</descriptor> 
</descriptors> 
</conf iguration> 
Path to assembly 
, 
. . 
instructions 
</execution> 
' 
1 
nbly 
I 
ions 
© 
</executions> 
</plugin> 
</plugins> 
</build> 
</dependenc i e s > 
</project> 
Because you created diis module only to share its resources between die client and 
server modules you can specify die packaging type of pom © and specify tiiat you've 
chosen to use the maven-assembly-plugin © to zip up resources © during the pack-
age phase © . This POM basically instructs Maven to collect into a zip file the resources 
you need to share. 
Listing 5.3 shows the contents of die resources.xml descriptor file found in die 
src/main/assembly folder of die f lex-bugs-blaze-conf i g module. 

96 
CHAPTER 5 BlazeDS remoting and logging 
Maven assembly install and deploy 
The Maven framework automatically installs and deploys anything built through the 
c o n t e x t of an assembly. For installation, Maven installs the artifact(s) into your 
local repository located typically in the .m2 directory, which is usually found in your 
home directory. Maven deploys artifacts if the distribution management is speci-
fied with snapshot or release repositories defined. For deployment, a valid Maven 
repository, like Sonatype's own Nexus 
repository, is required. 
Listing 5.3 
resources.xml 
<assembly> 
<id>resources</id> 
<formats> 
<format>zip</format> 
</formats> 
<includeBaseDirectory>false</includeBaseDirectory> 
<fileSets> 
<fileSet> 
<directory>src/main/resources«/directory> 
<outputDirectoryx/outputDirectory> 
</fileSet> 
</fileSets> 
</assembly> 
J 
1> 
Assembly format 
To include in assembly 
This assembly instructs Maven to create a zip file O with the files listed in die f i l e s e t 
Q . That is where you'll be adding our two BlazeDS configuration files that need to be 
shared across modules. 
5.3.1 
Configuring BlazeDS 
BlazeDS uses a couple of key configuration files that by convention are put in a flex 
folder under WEB-INF. You could put them wherever you like, but by placing diem 
under die WEB-INF folder, you make diem accessible only to your web application, 
and you can feel safe knowing any sensitive information, such as passwords in your 
proxy-config.xml, are safe from prying eyes. 
The first file we'll look at is services-config.xml. 
Listing 5.4 
services-config.xml 
<?xml version="1.0" encoding="UTF-8"?> 
<services-config> 
<services> 
<service-include file-path="proxy-config.xml"/> 
<default-channels> 
<channel ref="my-amf"/> 
</default-channels> 
J 
Import the 
proxy-config.xml 
</services> 

Building a BlazeDS configuration Marien module 
97 
<channels> 
O 
Channel definition 
<channel-definition id="my-amf" class="mx.messaging.channels.AMFChannel"> 
<endpoint 
url="http: //{server.name}:{server.port}/messagebroker/amf " 
class="flex.messaging.endpoints.AMFEndpoint"/> 
</channel-def inition> 
E n d P o i n t U r l w i t h 
property names 
</channels> 
</services-config> 
S 
O 
This is how the basic services-config.xml file should look for BlazeDS. There are a cou-
ple of sections to note here. First you tell the services-config.xml file to import die 
proxy-config.xml O 
and where to find it. Next in die channels definition Q 
you 
define an AMF channel and point it at a servlet tiiat you'll define in die web.xml later. 
It's also possible to use properties for the channel definition that transform into 
their real values when die application starts. It's common to do tiiis for the endpoint 
u r l attribute 
Using the {server.name} and { s e r v e r . p o r t } properties allows the 
application to be ported witiiout having to hard code different static values each time it 
needs to be deployed in a different environment. Refer to die BlazeDS documentation 
at http://opensource.adobe.com/wiki/display/blazeds/Developer+Documentation if 
you need more information on how to tweak the configuration. 
Flash Player Security and RPC 
Whenever you attempt to receive data from a remote service, Flash Player c h e c k s 
the domain name of the remote service location and compares it to the domain 
name of your Flex application's location. If the two do not match, the data cannot 
be loaded from the remote service. The easiest way to remedy this situation is to 
host your Flex application on the same domain as your remote services. If this is 
not possible you have a few options. You can create a crossdomain.xml file to allow 
Flash applications outside of your domain to use the remote services. You can cre-
ate a servlet in your w e b application to act as a proxy for the Flash application, or 
you can configure BlazeDS to do this by using the proxy-config.xml. 
T h e last configuration file we'll examine for now is proxy-config.xml. 
Listing 5.5 
proxy-config.xml 
<?xml version="1.0" encoding="UTF-8"?> 
<service id="proxy-service" 
class="flex.messaging.services.HTTPProxyService"> 
<properties> 
<connection-manager> 
<max-total-connections>100</max-total-connections> 
<default-max-connections-per-host>2</default-max-connections-per-host> 
</connection-manager> 

121 CHAPTER 5 BlazeDS remoting and logging 
<allow-lax-ssl>true</allow-lax-ssl> 
</properties> 
<adapters> 
<adapter-definition id="http-proxy" 
class="flex.messaging.services.http.HTTPProxyAdapter" 
default="true"/> 
<adapter-definition id="soap-proxy" 
class="flex.messaging.services.http.SOAPProxyAdapter"/> 
</adapters> 
<default-channels> 
<channel ref="my-amf"/> 
</default-channels> 
<destination id="DefaultHTTP"> 
</destination> 
</service> 
In tlie proxy-config.xml file you can configure any server-side proxies you need to 
leverage, if, for instance, you're communicating with web services outside your 
domain and have no control over placing a crossdomain.xml file on die server. 
Widi BlazeDS configured and ready to go, you can now get on with die tasks of 
modifying some of your services to communicate via AMF. 
Where's the remoting-config.xml? 
Great question! The BlazeDS examples in this book take advantage of a brand new 
Spring BlazeDS Integration framework brought to us by SpringSource. Spring 
BlazeDS Integration allows you to set up remoting destinations by annotating a 
Java class and specific methods that need to be exposed to Flex through remoting. 
You can still choose to hand-wire the X M L instead of using the annotations but we 
recommend the use of the Spring BlazeDS Integration annotations and will demon-
strate them in this chapter. 
Visit the BlazeDS developer documentation if your project requires the remoting-
config.xml 
at 
http://opensource.adobe.com/wiki/display/blazeds/Developer+ 
Documentation 
In die next sections we're going to start off simple by showing you how to connect to a 
POJO on the server side and get more complicated and leverage die powerful Spring 
Framework to communicate with a fully injected Spring bean. 
ADD THE BLAZEDS CONFIG MODULE TO THE TOP-LEVEL POM 
To configure die top-level POM, open and edit die pom.xml file in die flex-bugs direc-
tory and add die f lex-bugs-blaze-conf ig module. 
Listing 5.6 
Adding BlazeDS config module to the top-level pom.xml 
<modules> 
<module>flex-bugs-blaze-config</module> 

Building a BlazeDS configuration Marien module 
99 
<module>flex-bugs-ria</module> 
<module>flex-bugs-web</module> 
</modules> 
Next associate the dependency with die flex-bugs-web module and f l e x - b u g s -
r i a module. 
UPDATE THE FLEX AND JAVA WEB MODULES 
Now you can add die configuration module to die otiier projects as a dependency by 
editing their respective POM files for the flex-bugs-web/pom.xml. 
Listing 5.7 
Adding the BlazeDS config dependency to the Java web module 
<dependencies> 
<dependency> 
<groupId>org.foj</groupId> 
<artifactld>flex-bugs-blaze-config</artifactld> 
<version>l. C)-SNAPSHOT</version> 
<classifier>resources</classifier> 
<scope>provided</scope> 
<type>zip</type> 
< 
</dependency> 
1 r 
BlazeDS configuration 
module dependency 
declaration 
Use resources classifier 
and provided scope 
</ dependencies> 
Type element is type 
of artifact produced 
by assembly 
As you can see, you add die new dependency to die dependencies element © 
in 
each module's pom and you are done. Because die scope is provided, it will not add 
the resources © 
to the WAR. You had to specify the type © because it's a zip and 
not die default type. You'll be getting them from the Flex module by editing die 
POM descriptor in die f l e x - b u g s - r i a module. 
Listing 5.8 
Adding the BlazeDS config dependency to the Flex module 
1, 
Maven-dependency-
plugin definition 
Invoke unpack-
dependencies goal 
J 
Execute goal during 
generate-resources phase 
<plugin> 
<groupId>org.apache.maven.plugins</groupId> 
<artifactld>maven-dependency-plugin</artifactld> 
<executions> 
<execution> 
<id>unpack-config</id> 
<goals> 
<goal>unpack-dependencies</goal> 
< 
</goals> 
<phase>generate-resources-;/phase> 
<configuration> 
<outputDirectory>${proj ect.build.directory}/ 
generated-resources-;/outputDirectory> 
<includeArtifactlds>flex-bugs-blaze-config</includeArtifactlds> 
<includeGroupIds>${proj ect.groupId}</includeGroupIds> 
<excludeTransitive>true</excludeTransitive> 
</configuration> 
</execution> 
</executions> 
</plugin> 
r 
Output directory 
to unpack zip file 
Include flex-bugs-
blaze-config artifact 

100 
CHAPTER 5 BlazeDS remoting and logging 
There are many ways to share configurations, and as you see, you can use the maven-
dependency-plugin © . You execute the unpack-dependencies goal © 
during die 
generate-resources phase © and must choose an output directory © in order to 
unzip die file where you want. You may have noticed that you used die built-in maven 
property $ { p r o j e c t . b u i l d , d i r e c t o r y } , which equates to die location of the target 
directory. Now you must indicate what to unpack. This is where you specify die f l e x -
bugs-blaze-conf i g artifact © . 
After the configuration is completed for die shared configuration approach, you 
can start integrating Flex with Java through the use of BlazeDS AMF remoting! 
5.4 
Exposing Java services to Flex remoting 
In this section you'll demonstrate how to configure and expose Java services to Flex 
through the use of BlazeDS and Spring annotations. First you'll modify die web mod-
ule configuration, then modify die Java code. For demonstration purposes you'll use 
the FlexBugs sample application. 
5.4.1 
Web module configuration 
updates 
First you'll modify die flex-bugs-web module's configuration to enable it for remot-
ing. You'll start with the applicationContext.xml file located in die /flex-bugs-web/ 
src/main/webapp/WEB-INF directory. 
Listing 5.9 
ApplicationContext.xml 
<?xml version= "1.0" encoding= "UTF-8 " ?> 
Update schema namespace 
A 
<beans xmlns="http://www.springframework.org/schema/beans" 
<1—' 
xmlns:security="http://www.springframework.org/schema/security" 
xmlns : xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:context="http://www.springframework.org/schema/context" 
xsi:schemaLocation=" 
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
http://www.springframework.org/schema/security 
http://www.springframework.org/schema/security/spring-security-
2.0.4.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-
2. 5.xsd" 
default-lazy-init=11 true11 > 
© 
Enable annotations 
<context: annotation-conf ig /> 
<_l 
© 
Usecomponent 
<context:component-scan base-package="org.foj" /> 
<—I 
scanner 
<!-- Add new DAOs here --> 
<bean id="issueDao" class="org.appfuse.dao.hibernate.GenericDaoHibernate"> 
<constructor-arg value="org.foj.model.Issue"/> 
<property name="sessionFactory" ref="sessionFactory"/> 
</bean> 
<bean id="commentDao" class="org.foj.dao.impl.CommentDaoImpl"> 
<property name="sessionFactory" ref="sessionFactory"/> 
</bean> 

Exposingjava services to Flex remoting 
101 
<! — Add new Managers here --> 
<bean id="issueService" class="org.foj.service.impl.IssueManagerlmpl"> 
<constructor-arg ref="issueDao"/> 
<constructor-arg ref="commentService"/> 
</bean> 
<bean id="commentService" class="org.foj.service.impl.CommentManagerlmpl"> 
<constructor-arg ref="commentDao"/> 
</bean> 
<! — Add new Actions here --> 
</beans> 
To take advantage of the Spring BlazeDS Integration you must add die appropriate 
schema changes and namespace elements O - Because you'll be using annotations to 
expose your services to BlazeDS remoting destinations, you must enable annotations 
© 
and use the component scanner © 
to help Spring find the annotations you're 
going to define. 
Next, by convention, you must create a flex-spring-servlet.xml configuration file, as 
seen in listing 5.10, because the framework depends on it. 
NOTE 
The naming of die flex-spring-servlet.xml file is important because die 
framework scans for it by convention, and die application will fail to start up 
properly without it. 
Later, you'll use the flex-spring-servlet.xml file to help configure the messaging service. 
Listing 5.10 
flex-spring-servlet.xml plumbing 
<?xml version="1.0" encoding="UTF-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:flex="http://www.springframework.org/schema/flex" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation=" 
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
http://www.springframework.org/schema/flex 
http://www.springframework.org/schema/flex/spring-flex-1.0.xsd"> 
</beans> 
Last, you need to add a new servlet definition to the web.xml so that your Flex applica-
tion can communicate with the server-side application. Listing 5.11 shows the changes 
that need to be made to die web.xml of our web application module. 
Listing 5.11 
web.xml 
<servlet> 
<servlet-name>f lex-spring</servlet-name> 
< — © 
Servlet name 
<serviet-class> 
org. springf ramework. web. servlet. DispatcherServlet 
<1—, 
</serviet-class> 
Q 
Servlet class 
<load-on-startup>l</load-on-startup> 
</servlet> 

102 
CHAPTER 5 BlazeDS remoting and logging 
<serviet-mapping> 
<serviet-name>flex-spring</serviet-name> 
<url-pattern>/messagebroker/*</url-pattern> 
A 
definition 
</servlet-mapping> 
Servlet mapping 
This is a typical Java web application servlet mapping where you define a servlet name O 
and a servlet class Q to dispatch actions to whenever a URL pattern © match is found. 
Now let's begin working witii code by modifying the server-side classes. 
5.4.2 
Expose AMF remoting 
destinations 
Connecting to POJOs on the server side is trivial after you've got BlazeDS configured 
properly. To illustrate connecting to a POJO from Flex, we're going to use the Flex-
Bugs application by exposing the IssueManager interface to Flex remoting using the 
Spring BlazeDS Integration framework. 
UPDATES TO ISSUE CODE 
This is the code for die IssueManager Impl that we'll be connecting to. 
Listing 5.12 
IssueManager.java 
package org.foj.service; 
import org.foj.model.Issue; 
import org.springframework.flex.remoting.RemotingDestination; 
< 
import org.springframework.flex.remoting.Remotinglnclude; 
import javax. jws .WebService; 
Import Spring BlazeDS 
__ 
Integration classes 
O 
@WebService 
RemotingDestination exposes 
© 
issueService to Flex remoting 
à 
Remotelnclude 
annotation 
@RemotingDestination(channels = {"my-amf"}) 
public interface IssueManager { 
@RemotingInclude 
j ava. util. List<Issue> g e t A H O ; 
@RemotingInclude 
Issue get(Long id) ; 
@RemotingInclude 
Issue save(Issue issue); 
@RemotingInclude 
void remove(Long id); 
As you can see, not much had to change to expose die IssueService metiiods to 
Flex. The first step was to import die Spring BlazeDS Integration classes needed Q . 
The Spring classes help by supplying die ©RemotingDestination and ©Remoting-
lnclude annotations. 
Next, you added the ©RemotingDestination "my-amf' 
The 
©Remoting-
Destination must match die one defined in die services-config.xml BlazeDS configu-
ration file. This annotation exposes this class as a destination for any Java class that 
implements die IssueManager interface. This means tiiat the IssueManager Impl Java 

Exposingjava services to Flex remoting 
103 
class, the class that implements the IssueManager, will be exposed as an AMF remote 
service and not just XML/HTTP. 
The Spring BlazeDS Integration framework removed the need for having to define 
this metadata through the remoting-config.xml configuration file. You don't use a 
remoting-config.xml file with the BlazeDS Integration framework. 
You can now annotate each method tiiat you need to expose with die ORemoting-
Include Q annotation and you are done! The @Remo ting Include annotation exposes 
the method over die ©RemotingDestination. 
If needed, die Spring BlazeDS Integration framework's remoting package also 
provides a ORemotingExclude annotation for intentionally excluding methods. Now 
let's move on to making changes to die Flex client to take advantage of die exposed 
A M F service. 
UPDATES TO COMMENTS CODE 
Now that you have everytiiing in place for the issue code, you'll need to make the same 
types of changes to die CommentManager interface. The following listing shows the 
CommentManager. java class changes. 
Listing 5.13 
CommentManager.java 
package org.foj.service; 
import org.foj.model.Comment; 
import org.springframework.flex.remoting.RemotingDestination; 
import org.springframework.flex.remoting.Remotinglnclude; 
import javax.jws.WebService; 
import java.util.List; 
@WebService 
@RemotingDestination(channels = {"my-amf"}) 
public interface CommentManager { 
@RemotingInclude 
List<Comment> findCommentsBylssueld(Long issueld); 
@RemotingInclude 
void deleteAHCommentsForlssueld(Long issueld); 
@RemotingInclude 
Comment get(Long id) ; 
@RemotingInclude 
Comment save(Comment comment); 
@RemotingInclude 
void remove(Long id); 
As you can see you didn't need to change any of the application code to expose die 
CommentManager to remoting. All you had to do was add die necessary imports, 
include die ©RemotingDestination, and add die appropriate ©Remotinglnclude 
annotations for the methods you need exposed. 

1 0 4 
CHAPTER 5 BlazeDS remoting and logging 
Now you have a Java server side tiiat is set up for BlazeDS remoting. You tackled 
much of the Java configuration through Spring's robust Flex BlazeDS Integration 
framework and its extremely useful annotations. 
5.5 
Connecting to Java with BlazeDS 
With the Java remoting services ready to go you can begin die work on the Flex cli-
ent to connect to the exposed service objects and metiiods. Let's start with die 
Issue object. 
Listing 5.14 
Issue.as 
package org.foj.dto { 
[RemoteClass(alias="org.foj.model.Issue")] 
public class Issue { 
That wasn't complicated. You only had to associate this object with the server side 
equivalent by using die RemoteClass annotation © which you need because it allows 
you to map domain objects between Flex and Java by specifying the Java package and 
class name. 
TIP 
Without correctly specifying die RemoteClass, any attempts at persisting 
Issue objects will fail because BlazeDS will not know what server-side object 
die Flex object is bound to. 
Next you need to modify the IssueModel class to call die POJO. 
Listing 5.15 
IssueModel.as 
package org.foj.model { 
import mx.rpc.AsyncToken; 
import mx.rpc.IResponder; 
import mx.rpc.events.FaultEvent; 
import mx.rpc.events.ResultEvent; 
import mx.rpc.remoting.RemoteObj ect; 
import org.foj.dto.Issue ; 
public class IssueModel { 
private var _issueService:RemoteObject; 
public function IssueModel() { 
_issueService = new RemoteObject(); 
_issueService.destination = "issueService"; 
} 
public function getlssues(responder :IResponder) : void { 
var asyncToken:AsyncToken = _issueService.getAll(); 
asyncToken.addResponder(responder); 
} 
A 
RemoteClass 
< 1_J 
annotation 
^ C y 
Create RemoteObject 
^ ^ p 
Set destination 
} 

Logging 
105 
Again a few tilings have to change, and yet only minor ones are required to take advan-
tage of the performance increases of BlazeDS remoting. In die IssueModel you are now 
using die Flex RemoteObject O for communication to die issueService instead of the 
WebService object. When you construct a new IssueModel you set die RemoteObject 
destination © as die issueService you defined earlier in our applicationConfig.xml. 
That's it. Really! 
NOTE 
Names of the RemoteObject instance variables map to die bean name 
in die Spring applicationContext.xml file. Be sure these names are correct! 
With all of diat out of the way you should be able to run your application and see tiiat 
it's now populating the DataGrid with data from our issueService through BlazeDS 
rather than the web services you created in chapter 4. 
5.6 
Logging 
Since the inception of programming, developers have always found ways to enable 
applications to communicate what they are doing. This comes in all different forms, 
from logging basic information to fatal exceptions during the application runtime. 
With die FlexBugs sample application, you need to log the Java server-side events and 
the BlazeDS-specific events, and gather performance statistics. 
Building the FlexBugs application with AppFuse simplified this task by configuring 
the popular log4j framework for logging Java application messages. Now you must 
inform the log4j framework that you want to log even more for BlazeDS. 
5.6.1 
BlazeDS logging 
Adding BlazeDS into the mix was beneficial. But adding any library or framework to 
benefit die application presents new challenges; you must collect information from 
the library to better understand what is happening when you use it. 
Thankfully, SpringSource recognized tiiis with the Spring BlazeDS Integration 
framework and added a new logging object to its core package. The CommonsLogging-
Target class allows for automatic logging of events from BlazeDS into the application's 
existing logging configuration. 
CONFIGURE LOG4J FOR BLAZEDS FILE LOGGING 
You have to configure an application to print messages to the console or even a log 
file in a couple of places. The first place, as seen in listing 5.16, is the log4j.xml config-
uration file found in die flex-bugs-web module, which can be found in the flex-bugs-
web/src/main/resources directory. 
Listing 5.16 
log4j.xml 
<appender name="FILE" class="org.apache.log4j.RollingFileAppender"> 
<1— 
<param name="File" value=" f lexbugs. log"/> 
<I—| 
log4j 
<layout class= " org. apache. log4j . PatternLayout" > <1—i 
Log file 1 
rolling file 
Log file layout definition Q 
name © 
appender 
O 

106 
CHAPTER 5 BlazeDS remoting and logging 
<param name="ConversionPattern" 
value="%d [flex-bugs-web] %p [%t] %c{l}.%M(%L) | %m%n"/> 
<—i 
</layout> 
ConversionPattern 
I 
</appender> 
configuration 
O 
<appender name= " CONSOLE" class= " org. apache. log4j . ConsoleAppender" > 
<1—i 
<layout class= " org. apache. log4j . PatternLayout" > 
ConsoleAppender 1 
<param name= "ConversionPattern" 
configuation 
w 
value="%d [flex-bugs-web] %p [%t] %c{l}.%M(%L) | %m%n"/> 
</layout> 
</appender> 
A 
blazeds logger 
<logger name=" f lexbugs" > 
<—I 
definition 
A 
|_0ggjng |eVel 
<level value= "DEBUG" /> 
<1-J 
<appender-ref ref="FILE" /> 
<1—L 
<appender-ref ref ="CONSOLE" /> 
<—, 
© 
File appender 
</logger> 
Q 
Console appender 
As seen in listing 5.16 tlie log4j configuration can be trivial and yet extremely robust. 
Log4j itself allows for outputting to botii die console and to a file. In die example you 
specified a RollingFileAppender © so you can keep log messages and continue to 
add to that file as you use die application. 
You must specify die log file name as flexbugs.log © . Log4j requires the file 
parameter and doesn't provide a default. It's also possible to specify a patii to die 
file in diis parameter. It will place die flexbugs.log file at the root of die 
flex-bugs-
web directory. 
Log4j also enables various layout styles. By choosing to use die PatternLayout © 
you can specify what you want your messages to look like and what information should 
be in the log message. You do this by defining die ConversionPattern parameter © . 
There are otiier patterns to choose from but we chose this one to give us additional 
flexibility. 
The first tiling to notice about the log message pattern is that it will prefix 
each message witii [ flex-bugs-web]. It then assigns other parameters for printing the 
message. For more on log4j configuration go tdittp://www.scribd.com/doc/7679107/ 
Log4j-Quick-Reference. 
You also include an appender for die console © . Console appending is especially 
helpful during software development. Writing the logs to a file is valuable not just for 
development but also for production environments. 
Finally you need to create die logger itself. Here you created a logger named 
blazeds © . You configure die logger to output at die DEBUG level © and append the 
messages to both our RollingFileAppender and die ConsoleAppender by 
tiieir 
respective reference names FILE © and CONSOLE © . Log4j is ready to create a log file 
for your application. 
CONFIGURE BLAZEDS TO OUTPUT TO LOG4J 
Setting up the logging of BlazeDS is a two-step process. Now that you have a log-
ger available specifically for BlazeDS you can configure BlazeDS to work with log4j. 
Listing 5.17 shows the necessary changes to die services-config.xml file, located in 
die directory. 

Logging 
107 
Listing 5.17 
services-config.xml 
<logging> 
<target class="org.springframework.flex.core.CommonsLoggingTarget" 
level="All"> 
<properties> 
<categoryPrefix>flexbugs</categoryPrefix> 
</properties> 
</target> 
</logging> 
J 
Category prefix 
Logging 
level 
Logger 
class , 
O 
The BlazeDS configuration is simple. You specify the Spring framework's Commons-
LoggingTarget class O , the logging level you desire Q , and die categoryPref ix 
which points to the log4j.xml logger named f lexbugs © . The CommonsLoggingTarget 
can be configured to output more—or less—information from BlazeDS events through 
its properties and logging categories by using filters. 
BlazeDS/LCDS logging categories 
Several categories are available for helping to filter out specific logging messages. 
Logging can be performance-intensive so it's wise to log only what you absolutely 
need to provide the best support for the application. For more on the categories 
available or to know what you can filter out of the logs, see the API documentation 
for the CommonsLoggingTarget at http://static.springsource.org/spring-flex/docs/ 
l.O.x/javadoc-api/org/springframework/flex/core/CommonsLoggingTarget.html. 
Now diat logging has been configured for BlazeDS it's time to see die results. 
VIEW THE FLEXBUGS LOG FILE 
If you fire up your sample application you'll find a log file available. If you're using die 
FlexBugs samples and run die command mvn clean jetty:run-war on die f l e x -
bugs-web module, after performing an mvn clean i n s t a l l on die f lex-bugs-conf ig 
module, you'll find the log file in die flex-bugs-web directory. 
Figure 5.5 shows die logging messages going to die console. 
Toward die bottom of figure 5.5 you'll find an AMF log event showing an issue com-
pleted for adding die BlazeDS logging to die log4j configuration. In that event you can 
see that the issue was serialized through AMF/HTTP with all the issue details. If you 
open the log file you'll find die same results and logging of die BlazeDS events. 
5.6.2 
Built-in BlazeDS benchmarking 
One nice feature of BlazeDS is its built-in ability to acquire performance results on 
its processing of messages. In tiiis example you'll configure the BlazeDS services-
config.xml to retrieve the message times and size. These measurements are great for 
development but shouldn't be enabled for production because they cause perfor-
mance degradation. This may seem counterproductive but it's not. It's good to assure 

131 CHAPTER 5 
BlazeDS remoting and logging 
Figure 5.5 Console log of BlazeDS events 
that you have the best performance possible for your production environments at all 
times to keep the users delighted. 
To enable BlazeDS performance collection, open up the services-config.xml for 
editing. Listing 5.18 shows the changes to the my-amf configuration. 
Logging affects performance 
A developer must choose wisely the messages that are logged in a production envi-
ronment. You shouldn't keep log messages in an application that were only trou-
bleshooting messages or sloppy in loop count logging that spits out a bunch of 
unimportant things for every element in a collection of objects. To put it simply, 
logging affects performance, especially when writing out to file 10. Make sure that 
debugging is not enabled in production unless it's absolutely necessary. Also be 
sure to only log INFO type messages when they are helpful or required. 

Logging 
109 
L i s t i n g 5 . 1 8 
s e r v i c e s - c o n f i g . x m l 
<channel-definition id="my-amf" 
class="mx.messaging.channels.AMFChannel"> 
<endpoint url="http://{server.name}:{server.port}/ 
{context.root}/messagebroker/amf " 
class="flex.messaging.endpoints.AMFEndpoint"/> 
<properties> 
<record-message-times>true</record-message-times> 
<record-message-sizes>true</record-message-sizes> 
</properties> 
</channel-definition> 
I n listing 5.18 y o u e n a b l e d t h e p e r f o r m a n c e t r a c k i n g p r o p e r t i e s f o r r e c o r d i n g b o t i i 
m e s s a g e t i m e s a n d sizes. It's a s i m p l e B o o l e a n tiiat c a n b e set t o false f o r p r o d u c t i o n 
e n v i r o n m e n t c o n f i g u r a t i o n . A d d i n g d i e s e p r o p e r t i e s a l l o w s f o r t h e a u t o m a t i c l o g g i n g 
o f this i n f o r m a t i o n . T h i s is a g r e a t w a y t o g a i n i n s i g h t i n t o t h e o b j e c t s y o u ' r e s e n d i n g 
b a c k a n d f o r t i i b e t w e e n t h e c l i e n t a n d server. I f y o u w e r e t o c r e a t e a n e w issue i n F l e x -
B u g s y o u w o u l d s e e s o m e t h i n g l i k e t h e d i s p l a y i n f i g u r e 5.6. 
A 
Message times 
^ T 
configuration 
Message sizes 
© 
configuration 
- i a | , x | 
ca C:\WINOQW5\system32\emd.eHe - mvn clean |Ptty:run-w.ir 
seruerPostfldapterExternalTime 
- 0*0 
receiueTime <= 
messageSize 
- 0*0 
overhead!iroe 
a 
0 . 0 
recordMessageSiees 
• f a l s e 
serverPostfldapterTime 
- 0 . 0 
1.25535258483SE12 
<Byte Array » 7 , Length 16> 
<Byte Array « 8 , Length 16> 
<Byte Array t»9. Length 16> 
S e r i a l i z i n g AMF/HTTP response 
U e r s i o n : 3 
<Message 80 targetURI =/6/onBesult, responselJRI => 
< E x t e r n a l i z a b l e O b j e c t H0 
1 D S K ' ) 
( E x t e r n a l i z a b l e 
O b j e c t HI ' f l e x . m e s s a g i n g . i o . A r r a y C o l l e c t i o n ' > 
( A r r a y tt2> 
10 ] 
a (Typed O b j e c t W3 ' o r g _ f o j . r i o d e l . I s s u e ' > 
id " 
2 . 0 
p r o j e c t 
• " P l e x B u g s " 
reportedOn 
= 2009-10-12 
0 0 : 0 0 : 0 0 . 0 
d e t a i l s » "Need performance m e t r i c s in place f o r BlazeDS messages 
s i 
;:e and any o t h e r important 
d e t a i l s . " 
status " 
" F i n i s h e d " 
reportedBy • "BJ Allmon" 
d e s c r i p t ion = "Add Performance 
M e t r i c s " 
assignedTo 
• "BJ 
flllmon" 
s e v e r i t y 
- " M a j o r " 
type 
D "Feature 
R e q u e s t " 
estimatedHours • 1.5 
( O b j e c t 
«5> 
DSMPIO = (Typed Object ttfi 
' f l e x . m e s s a g i n g . m e s s a g e s . M e s s a g e P e r f o r r c a n c e i n f 
o' > 
seryerPreAdapterTime 
3 0.0 
serwerPreAdapterExternalTime 
- 0 . 0 
irrfoType = n u l l 
sendTine - 1.2S5352SB4835E12 
recordMessageTimes 
• f a l s e 
seruerPrePusliTime 
• 0.0 
pushedFlag - False 
seruerPostAdapterExternalTime 
= 0.0 
receiueTime 
- 0.0 
messacfeS i z c 
= 835 .0 
ouerheAdlinie • 0 . 0 
recordMessageSizes 
- f a l s e 
seruerPostAdapterTime 
• 0 . 0 
1.2SS3S2S8483SE12 
3 
Figure 5.6 
BlazeDS M e s s a g e P e r f o m a n c e l n f o in action 

110 
CHAPTER 5 
BlazeDS remoting and logging 
As seen in figure 5.6 you now have an additional log message direcdy under the 
insertion of a new issue for the project FlexBugs. The BlazeDS Me s sage Performance-
U t i l s class shows the sendTime and tire messageSize that you defined in tire ser-
vices-config.xml. You can see that tire sendTime is equal to 1.25ms and a message size 
of 835.0 bytes. 
In general, the flex.messages.messaging.MessagePerformanceUtils class pro-
vides metrics drat describe tire size and timing of a message sent from a client to tire 
server and its server response message. Performance information can be captured 
when tire record-message-times 
and record-message-sizes 
are configured to 
TRUE. From tirere it's possible to set up more performance-gathering metrics in tire 
client. Configuring tire client would mean creating a response acknowledgment or 
message handler. 
NOTE 
The BlazeDS development guide instructs developers to not activate 
more than one performance measurement at a time because of tire extra per-
formance hit that each measurement adds to the application runtime. Use 
drem wisely. If you truly have performance issues you may consider other 
means for performance testing like an open source tool or commercial alter-
native. Using a separate tool for performance testing would allow tire BlazeDS 
configuration to stay true to its production environment configuration dur-
ing tire performance testing. 
For more on how to configure message performance logging through a message 
event handler refer to tire BlazeDS development guide at http://livedocs.adobe.com/ 
blazeds/l/blazeds_devguide/help.html?content=mp i_3.html. 
5.7 
Summary 
In dris chapter you refactored out the XML/HTTP web service implementation and 
replaced it witir BlazeDS AMF remoting. The web service implementations had tire 
least impact on tire server side but required more work to be done on the client side, 
because we're not receiving first class objects in the responses. W h e n you switched to 
using BlazeDS to communicate witir tire server side you gained in performance witir-
out increasing tire complexity of tire application. 
Using tire Spring BlazeDS Integration framework reduced tire amount of configu-
ration typically required to set up remoting destinations. It also gave you a handful of 
useful annotations and otirer features that reduced tire complexity of the application 
even more. As you'll continue to see throughout tire remainder of the book, tire 
Spring BlazeDS Integration simplifies tire code and makes building robust Flex and 
Java applications much easier. 
You also configured logging to be sure drat you can capture tirose important appli-
cation activities in a log file. Setting up tire logging for BlazeDS events was a simple 
task using both log4j and tire Spring BlazeDS Integration framework logger class. 

Summary 
111 
BlazeDS also enables die gathering of performance measurements on a channel ser-
vice. With that you were able to pump performance stats on message size and time to 
your log file. 
In the next chapter you'll take the next step in evolving our Flex and Java 
communications and take advantage of real-time messaging between the two using 
BlazeDS messaging. 

Flex messM^n^ o 
This chapter covers 
• Setting up BlazeDS for messaging 
• 
Using the Flex Messaging API 
• Creating a polling channel 
The Flex Messaging API, bundled with BlazeDS, provides asynchronous messaging, 
which you can use to create a better user experience by enabling your application 
to refresh itself in real time whenever anyone using the application makes any 
changes. The 
BlazeDS MessageService 
allows bidirectional 
communication 
between Flex clients and die server side. 
In general, you want to use messaging to notify the client of changes. This will 
fire off an event to refresh die FlexBugs issues list. Figure 6.1 demonstrates tiiis use 
of messaging. 
This chapter will exploit the use of the Flex Messaging API and simple polling to 
receive updates from the server when changes in die model have occurred. 
Changes will cause an event to be dispatched tiiat will refresh the master view and 
ultimately the list of issues. 
The details of messaging operations depend on your needs and die style of 
underlying messaging architecture you've chosen; for example, client-to-client, 
112 

Setting up BlazeDS for messaging 
113 
JMS, Flex to POJO, orJavaBean messaging. O n top of that, it's possible to configure the 
client to perform simple or long polling or even streaming. All these scenarios for 
messaging are useful and have accompanying benefits and consequences. It's always 
best to start with tire simple approach before moving to tire complex. 
6.1 
Setting up BlazeDS for messaging 
Little configuration is needed to set up a simple messaging architecture drat allows 
a Flex client to subscribe to a server-side component. It's also good to use a messag-
ing API drat is agnostic to tire underlying messaging architecture. This makes it easy 
to start witir a simple server side, say with POJOs, and expand to something like JMS 
if necessary. 
6.1.1 
Modifying the 
services-config.xml 
You first modify tire services-config.xml file. If working in the FlexBugs sample appli-
cation, it is found in tire blaze-conf i g module. The services-config.xml file is located 
in tire src/main/resources directory. 
You want to prepare tire server side witir a new channel definition for polling as 
seen in listing 6.1. For brevity we've excluded elements of tire file that have already 
been discussed and are not going to change. 
Listing 6.1 
Adding the polling channel-definition to services-config.xml 
<?xml version="1.0" encoding="UTF-8"?> 
<services-config> 
<channels> 
A 
Channel-definition 
• •• 
T 
declaration 
<channel-def inition id= "my-polling-amf " 
<—I 
class="mx.messaging.channels.AMFChannel"> 
<endpoint url="http://{server.name}:{server.port}/{context.root}/ 
messagebroker/amfpolling" 
class= " flex. messaging. endpoints . AMFEndpoint" / > 
<1—i 
<properties> 
Endpoint url 
© 
<polling-enabled>true</polling-enabled> 
<l—i 
© 
Polling is enabled 

1 1 4 
CHAPTER 6 
Flex messaging 
<polling-interval-seconds>4</polling-interval-seconds> 
</properties> 
</channel-definition> 
D Polling interval 
</channels> 
</services-config> 
All you need to do to set up die channel definition is specify an id © and endpoint 
and enable polling 
The channel definition for die my-polling-amf channel © 
will be used by Flex when contacting the server. 
The endpoint element Q provides a URL that must be unique from other end-
points, and die endpoint class for die server. The endpoint is used by die channel ser-
vice to do its business in regards to client-side and server-side communication. 
Properties defining the channel are nested in a properties element. The channel 
definition contains behaviors that allow it to be configured in a variety of ways. In our 
example, you have simple polling enabled Q and die polling interval Q set to poll at 
every 4 seconds. Simple polling is generally less efficient tiian long polling because it 
continues to ping the server at each specified interval and receives acknowledgments 
even when tiiere are no changes, and die acknowledgments are empty. Long polling 
allows die client to ping die server; the server keeps die request and returns an 
acknowledgment when tiiere is a message. 
Polling performance 
When selecting a polling mechanism, consider which solution would require the 
least amount of overhead. Both simple and long polling can be server-side intensive 
if there are numerous messages being passed back and forth and an abundance of 
users. Even though long polling is generally more efficient than simple, it's possible 
that an application with many users with frequent changes could cause more client 
and server friction and be less responsive than controlling polling with the simple 
approach. If long polling is an option, streaming should be a consideration as well. 
Streaming is similar but keeps a connection open instead of opening and closing 
one between each transmission. 
The changes to the services-config.xml were die only changes necessary for die con-
figuration module to add a polling channel. Now let's move on to die webapp mod-
ule changes. 
6.1.2 
Updating the webapp server-side module 
Now diat you've tackled the channel definition in the services-config.xml file you can 
move on to modifying the webapp. We'll start witii the flex-spring-servlet.xml and 
applicationContext.xml changes, then move on to changes in die Java code. 

Setting up BlazeDS for messaging 
115 
MODIFY THE FLEX-SPRING-SERVLET.XML 
You start by editing tire flex-spring-servlet.xml found in tire src/main/webapp/WEB-
INF directory of the flex-bugs-web module. Here you will be adding a new Spring-
managed MessageBroker, MessageService, and MessageDestination for your new 
polling channel. 
Listing 6.2 
Adding MessageBroker, M e s s a g e S e r v i c e , and M e s s a g e D e s t i n a t i o n 
<?xml version="1.0" encoding="UTF-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:flex="http://www.springframework.org/schema/flex" 
xmlns : xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation=" 
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
http://www.springframework.org/schema/flex 
http://www.springframework.org/schema/flex/spring-flex-1.0.xsd"> 
<flex :message-broker> 
<—n 
<f lex: remoting-service def ault-channels= "my-amf "/> 
O 
Added message-broker 
<flex:message-service default-channels="my-polling-amf" /> 
<flex:secured/> 
</flex :message-broker> 
• 
vice 
Q 
Added message-service 
^ ^ P 
Added message-destination 
<flex :remoting-destination ref="userDao"/> 
<flex : message-destination id="flexMessage"/> 
</beans> 
In the listing you added tire Spring message-service Q 
that points to tire my-
p o l l i n g - a m f channel you defined in tire services-config.xml. Because you are using 
a Spring-managed MessageBroker Q , you can specify the message destination © 
by 
adding tire element and giving it tire id you want to refer to in tire server-side imple-
mentation. You will use tire message destination to send messages from the server-
side objects. 
MODIFY THE APPLICATIONCONTEXT.XML 
The last bit of configuration detail is found in the Spring applicationContext.xml. 
This file is also located in tire src/main/webapp/WEB-INF directory of tire f l e x - b u g s -
web module. The code listed here shows tire two Spring beans you need to define in 
the applicationContext.xml. 
<bean id="defaultMessageTemplate" 
class="org.springframework.flex.messaging.MessageTemplate" /> 
<bean id="issueService" class="org.foj.service.impl.IssueManagerlmpl"> 
<constructor-arg ref="issueDao"/> 
<constructor-arg ref="commentService"/> 
<constructor-arg ref="defaultMessageTemplate"/> 
</bean> 
So that you can push messages to tire message destination from your Java objects, 
Spring has given us tire MessageTemplate helper class. Inject an instance of tire 

116 
CHAPTER 6 Flex messaging 
MessageTemplate into the issueService 
and use it in die 
IssueManagerlmpl. 
Because the MessageTemplate is configured as a Spring bean, it autodetects the 
MessageBroker. Otherwise, it would need to be configured. 
MODIFY THE ISSUEMANAGERIMPL 
Now diat you have die Spring configuration squared away, you can take advantage of 
die injected MessageTemplate object by adding it to die IssueManagerlmpl class as 
seen in listing 6.3. 
Listing 6.3 
Adding the injected M e s s a g e T e m p l a t e 
import org.springframework.flex.messaging.MessageTemplate; 
(iWebService(serviceName = "IssueService", 
endpointlnterface = "org.foj.service.IssueManager") 
public class IssueManagerlmpl implements IssueManager { 
private GenericDao<Issue, Long> issueDao; 
private CommentManager commentManager; 
private MessageTemplate messageTemplate; 
public IssueManagerlmpl(GenericDao<Issue, Long> issueDao, 
CommentManager commentManager, 
MessageTemplate messageTemplate) 
{ 
this.issueDao = issueDao; 
this.commentManager = commentManager; 
this .messageTemplate = messageTemplate; 
<—, 
A 
MessageTemplate 
<]_! 
field 
^ ^ 
Constructor 
arguments 
Set messageTemplate 
public Issue save(Issue issue) { 
String messageBody = "Issue was saved"; 
messageTemplate.send("flexMessage", messageBody); 
return issueDao.save(issue); 
} 
public void remove(Long id) { 
commentManager.deleteAHCommentsForlssueld(id); 
String messageBody = "Issue was removed"; 
messageTemplate.send("flexMessage", messageBody); 
issueDao.remove(id); 
} 
To take advantage of die Spring MessageTemplate, you first create a private field to 
store the MessageTemplate instance Q 
that you inject. Because you are injecting 
through the constructor © you set the private field Q to equal die injected instance. 
In the example you will use die MessageTemplate to send die client a text message 
notification. This message will let the client know tiiat a refresh is needed. You wire up 
Updated save 
13 method 
J 
Updated remove 
method 

Modifying the client for messaging 
117 
the notification to the save Q and remove © methods and pass a message to die cli-
ent indicating that die issue was eitiier saved or removed. 
Now diat all the necessary changes are in place for simple messaging witii Spring 
and Flex, it's time to update the Flex client. 
6.2 
Modifying the client for messaging 
The Flex client changes are extremely simple. The use of die MVP design pattern iso-
lates die changes to only two locations. We're going to create a ChannelSetFactory to 
leverage the power of the ChannelSet object for communicating with BlazeDS, and 
we'll modify the IssueModel object to receive the issue model updates from the poll-
ing channel. 
6.2.1 
Creating a 
ChannelSetFactory 
Similar to die approach you took earlier witii the EventFactory, you create a single-
ton instance of a ChannelSet and retrieve it so tiiat all your components are using the 
same ChannelSet. Using a ChannelSet allows you to leverage communication chan-
nels such as AMFChannel, HTTPChannel, StreamingAMFChannel, and StreamingHTTP-
Channel at the same time, creating redundancy and fail-safes that help guarantee your 
data gets transmitted. To do tiiis you'll create a ChannelSetFactory in the flex-bugs-
l i b module. 
Listing 6.4 
ChannelSetFactory.as 
package org.foj.model { 
import mx.messaging.ChannelSet; 
import mx.messaging.channels.AMFChannel; 
public class ChannelSetFactory { 
private static var _messagingChannelSet:ChannelSet; 
public function ChannelSetFactory!) { 
} 
o si 
<hJ in 
Singleton 
instance 
J 
Static 
factory 
method 
public static function getMessagingChannel():ChannelSet { 
if (_messagingChannelSet == null) { 
var pollingChannel:AMFChannel = new AMFChannel("my-polling-amf", 
"http://localhost:8080/flexbugs/messagebroker/amfpolling"); 
_messagingChannelSet = new ChannelSet(); 
_messagingChannelSet.addchannel(pollingChannel); 
AMFChannel 
} 
return _messagingChannelSet; 
The code for die ChannelSetFactory is similar to the EventDispatcherFactory. 
Start by declaring your private instance variable to hold the ChannelSet 
then 
define a static factory method tiiat the rest of the application will use to retrieve 

118 
CHAPTER 6 Flex messaging 
the ChannelSet 
Inside tiiis metiiod you check to see if die instance has been 
instantiated; if not create one and assign your AMFChannel to it 
All tirat's left is 
to return die ChannelSet to the caller. Next let's look at modifying die IssueModel to 
leverage tiiis ChannelSet. 
6.2.2 
Changing the IssueModel 
The final task to perform, in your sample messaging design, is to fire off an event 
when tire client receives a push notification message which should refresh tire issue 
master view DataGrid. You do tiris by adding a Consumer of tire messaging channel. 
Listing 6.5 
The I s s u e M o d e l message Consumer 
package org.foj.model { 
Import Flex 
MessageEvent class 
import mx.messaging.events.MessageEvent; 
public class IssueModel { 
private var _issueService:RemoteObject; 
public function IssueModel() { 
var defaultChannelSet:ChannelSet = ChannelSetFactory.getDefaultchannel(); 
_issueService = new RemoteObject(); 
_issueService.destination = "issueService"; 
_issueService.ChannelSet = defaultChannelSet; 
var messagingChannelSet:ChannelSet 
= ChannelSetFactory.getMessagingChannel(); 
J 
Get messaging 
ChannelSet 
var consumer : Consumer = new Consumer(); 
consumer.destination = "flexMessage"; 
consumer.ChannelSet = messagingChannelSet; 
consumer.addEventListener(MessageEvent.MESSAGE, messageHandler); 
consumer.subscribe ( ); 
private function messageHandler(event:MessageEvent):void{ 
var eventDispatcher:EventDispatcher = 
EventDispatcherFactory.getEventDispatcher(); 
var refreshEvent:UIEvent = new 
UIEvent(UIEvent.REFRESH_ISSUES_BUTTON_CLICKED); 
eventDispatcher.dispatchEvent(refreshEvent); 
Flex Consumer 
Q 
<— 
messageHandler 
Q 
} 
} 

Modifying the client for messaging 
119 
In the IssueModel you receive notification of changes through the built-in Flex Mes-
saging API. After importing the MessageEvent class Q , you need to get an instance of 
the messaging A M F ChannelSet from the ChannelSetFactory 
Next you need to create a Flex Consumer Q and establish its properties. You con-
figured die consumer's destination to be the f lexMessage destination, defined in die 
f lex-spring-servlet .xml. The consumer's ChannelSet was set to die one you got 
from the ChannelSetFactory. 
The event listener is an important piece. It allows you to invoke a metiiod when a 
consumer receives a message from die server. You declared that you wanted die event 
to be die MessageEvent type Message and tiiat the method to call is messageHandler 
O 
Finally, you subscribe to die server-side message destination by calling con-
sumer .subscribe(). 
Now that your Flex client is set up to subscribe to a messaging destination, you can 
see it in action. This is possible by opening up two different browser instances; make 
changes in one while keeping an eye on the other as in figure 6.2 where die browser 
snippet on die left shows the issue form that persisted die issue and die browser on 
the right automatically gets the update. 
Changes should be noticeable in the issues DataGrid as changes occur in the 
application to the issues. The changes will occur within 4 seconds, as specified in 
the channel definition. That's all there is to setting up a simple messaging solution 
with Flex! 
Piojiit 
Dsscrtpknn: 
"Ci 
sevwitf 
Btttttt: 
Details: 
fi ['[j't'j J 
Ritprtso On; 
Assured To: 
Es& mated Hours; 
M3I0F 
This is a sample 
ertilicl :£5UG 
JS 
| save issue | | cared cnargas | 
FlexBugs 
My FlOjOCt DESC 
| Refresh usi | 
Figure 6.2 Trying out the messaging using two browsers 

120 
CHAPTER 6 
Flex messaging 
6.3 
Summary 
In this chapter you configured BlazeDS, Spring, and a Flex client for a simple messag-
ing architecture. You changed certain Java service methods so drat drey would notify 
tire client of changes and made changes to the IssueModel to listen as a consumer. 
Using tire Flex messaging API you used a Consumer to subscribe to tire messaging 
channel service and received dynamic updates for tire Issues master view. You will 
take messaging a step farther by configuring JMS when discussing Flex witir Grails. 
In tire next chapter you will take a peek at securing and personalizing an applica-
tion. The Spring security framework will be used with its annotation to provide great 
flexibility witir the least amount of complexity. 

Part 3 
The joys of Flex on Java 
J L a r t 3, chapters 7 through 11, goes beyond what you'd find in most books 
on Flex and Java. You will cover topics like security and personalization 
because most applications need to implement a security strategy, and personal-
ization usually comes next. 
You will also cover charting with Degrafa, an open source Flex drawing API, 
and adding a chart to tire example application. 
One feature that sets tire Flex framework apart from other web frameworks is 
its ability to run as a native desktop application. With this in mind, you will refac-
tor the example application to include a deployment to tire desktop version of 
the application. 
Because writing code without tests is irresponsible, these final chapters 
demonstrate how to test your Flex application with FlexUnit. We not only pro-
vide basics on test-driven development (TDD), we break down the example 
application's structure and show you how to maintain good coverage across tire 
entire application. 
The last chapter covers Flex and Grails development. This is an exciting com-
bination of technologies. You will quickly construct a new example application 
with Grails and build a Flex frontend for it. 


Securing 
persona 
your applic 
This chapter covers 
• 
Authentication 
• 
Authorization 
• 
Personalization 
In the past couple of chapters you've experienced some of tire great integration 
features that BlazeDS gives us. Now you're going to take integration one step fur-
ther as you strengthen your application and add security features. 
You'll leverage tire existing security infrastructure provided by AppFuse and not 
have to spend precious time on tire particulars of setting up a Lightweight Direc-
tory Access Protocol (LDAP) server, authenticating against Active Directory, and 
creating Access Control Lists (ACLs). There are plenty of resources on tire web that 
cover these advanced topics, which are beyond the scope of our goals for tiris chap-
ter. The information you cover in tiris chapter should be sufficient for about 90% of 
the applications that you'll encounter. 
You'll take an iterative approach to adding security to tire sample application, 
starting by adding simple login and logout functionality, allowing tire application 
to authenticate using tire same mechanism that AppFuse uses internally. You'll 
build upon drat by adding security constraints to the services and lock down tire 
123 

124 
CHAPTER 7 
Securing and personalizing your application 
destructive metiiod calls to only users belonging to specific roles. You'll also learn 
about an often-overlooked aspect of security, personalization. Before getting started, 
let's cover basic concepts of die Spring Security framework. 
7.1 
Authentication 
The simplest form of security tiiat you can add to die application is to allow a user to 
enter his user name and password and autiienticate using the server side. For many 
applications this is usually sufficient. There are many strategies for authenticating 
users, from rolling your own authentication methods and exposing diem as remote 
services for die application to use, to implementing basic authentication measures 
using the web server, or in your case using a security framework like Spring Security. 
AppFuse provides, out of die box, a simple autiientication mechanism based on 
user information being stored in die database, so you don't need to go through the 
trouble of setting up an autiientication provider. The big advantage to leveraging a 
framework like Spring Security is that you can change out the mechanism for authen-
tication from a database table to an LDAP server witiiout having to change anything in 
your Flex application. So now let's get started witii implementing the components you 
need to allow users to autiienticate using your application. 
7.1.1 
Modifying the 
ChannelSetFactory 
Even though all the remote components that you use to communicate witii external 
services have methods supporting sending credentials for authentication, this is not 
an ideal solution because the application would need to hold die username and pass-
word, in order for you to manually pass diem along with every remote metiiod call you 
made. Not only is tiiis tedious, it's error prone. Instead you'll leverage die ChannelSet 
to autiienticate the user to the server side and maintain a session until you either close 
the application or log out. 
To do this you'll modify the ChannelSetFactory tiiat you created in the last chap-
ter as shown in listing 7.1 
Channels and ChannelSets 
Flex uses different methods of communicating with BlazeDS on the server side 
depending on the type of communication: AMFChannel, HTTPChannel, stream-
ingAMFChanne1, and streamingHTTPChannel. These channels encapsulate the 
behavior of connecting and maintaining communications with the BlazeDS compo-
nents on the server side. You may recall that when setting up BlazeDS you config-
ured an AMFChannel in the services-config.xml file providing a means of connecting 
to BlazeDS using your RemoteObject components. The Flex remoting components 
such as RemoteObject allow you to assign a set of these channels for use by the 
components, giving you fallback and failover behavior out of the box, as well as 
allowing users to authenticate to the server side. 

Authentication 
125 
Listing 7.1 
ChannelSetFactory.as 
package org.foj.model { 
import mx.messaging.ChannelSet; 
import mx.messaging.channels.AMFChannel; 
public class ChannelSetFactory { 
private static var _defaultChannelSet:ChannelSet; 
private static var _messagingChannelSet:ChannelSet; 
public function ChannelSetFactory() { 
} 
public static function getDefaultchannel():ChannelSet { 
if (_defaultChannelSet == null) { 
var channel:AMFChannel = new AMFChannel("my-amf", 
"http://localhost:8080/flexbugs/messagebroker/ai 
_defaultChannelSet = new ChannelSet(); 
_defaultChannelSet.addchannel(channel); 
} 
return _defaultChannelSet; 
} 
public static function getMessagingChannel():ChannelSet { 
if (_messagingChannelSet == null) { 
var pollingChannel:AMFChannel = new AMFChannel("my-polling-amf", 
"http://localhost:8080/flexbugs/messagebroker/amfpolling"); 
_messagingChannelSet = new ChannelSet(); 
_messagingChannelSet.addchannel(pollingChannel); 
} 
return _messagingChannelSet; 
} 
} } 
You start by declaring a private instance variable to hold tire ChannelSet O - Then you 
add another static factory method drat tire rest of tire application will use to retrieve 
the ChannelSet © . Inside this method you check to see if tire instance has been 
instantiated, and if not create one and assign your AMFChannel to it 
Then return 
the ChannelSet to tire caller. 
Next let's create the custom event class for your login panel to use. 
7.1.2 
Creating a UserEvent 
The UserEvent class should look familiar; it's anotirer custom event class just like tire 
one you created for tire rest of tire events that your application uses. You're creating 
this one separate from the other event class, because it is a separate area of concern 
from UI events. This will make it easier to extract tire login panel to a separate 
library later, by keeping all of tire login functionality separate from tire rest of the 
application logic. 
J 
Singleton 
instance 
J 
Static factory 
method 
1> 
AMF 
m f"> ; 
« 
Channel 

126 
CHAPTER 7 Securing and personalizing your application 
Listing 7.2 
UserEvent.as 
package org.foj.event { 
import flash.events.Event; 
public class UserEvent extends Event{ 
public static var LOGIN_BUTTON_PRESSED:String = 
"loginButtonPressed"; 
public static var LOGOUT_BUTTON_PRESSED:String 
"logoutButtonPressed"; 
public static const USER_LOGGED_IN:String = 
"userLoggedln"; 
public static const CURRENT_USER_UPDATED:String 
"currentUserUpdated"; 
public var data : *; 
public function UserEvent(type : String, 
bubbles : Boolean = true, 
cancelable : Boolean = false) 
{ 
super(type, bubbles, cancelable); 
} 
} } 
Listing 7.2 shows your custom UserEvent. You begin just as you did in die last event 
class by defining constants to describe what events you'll be using tiiis class for Q . 
Next you define a data member variable to carry any data with die event if necessary 
Next you declare an overloaded constructor © and inside tiiis is a call to die base 
constructor in die Event class Q . Now tiiat you've defined die custom event, let's put 
it to use and start to create die login panel. 
7.1.3 
Creating a login panel 
There are many ways to implement die login functionality. You can create a separate 
login screen, a pop up, or implement it inline. Because you're not going to attempt to 
prevent users from accessing and browsing the application unless they're logged in, 
having a separate login screen that takes users away from the application doesn't 
make sense. Neitiier does blocking die application with a modal dialog forcing diem 
to login, so you're going witii the simplest possible solution, which is to present the 
user with a couple of fields in die upper-right side of die application for entering the 
username and password. 
The login panel will use a ViewStack just as your main application does, so tiiat as 
users log in, the look of the login panel will change to reflect that die user has logged 
in successfully as shown in figure 7.1. When die user logs out, die view will change 
back to the initial logged out state. 
J 
Event type 
constants 
J 
Data field 
1, 
Call to 
Overloaded 
constructor 
super 

Authentication 
127 
FlexBugs Application 
I 
i 
S I 
I o vV. \ 
I
ID Pr«|«t 
I Plat flugj 
i 
O* Hi 
\ 
FlexBugs Application 
IÜ pT«J«t 
1W1« 
Typ. 
Swrlfy StdM 
] 
Pl*x bp 
r«*n l It 
1 
O htM 
Z W«rM (toafcMttan a «Wu> I'j wM dental fUw 
Ina 
1 
Acttr* 
X 
|i 0«tJill to, ] ütäth V*m \ 
JO; [l_ 
TM*: Ir«lur« |.j~ 
Figure 7.1 
Logging in to the application 
Listing 7.3 
LoginPanel.mxml 
<?xml version="1.0" 
encoding="utf-8"?> 
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
creationComplete="init()"> 
<s:layout> 
<s:HorizontalLayout/> 
</s:layout> 
< fx:Script> 
<![CDATA[ 
import mx.messaging.ChannelSet; 
import org.foj.event.EventDispatcherFactory; 
import org.foj.event.UserEvent; 
import org.foj.model.ChannelSetFactory; 
import org.foj.presenter.LoginPresenter; 
private var presenter:LoginPresenter; 
private function init():void { 
presenter = new LoginPresenter(this); 
} 
private function login():void { 
var loginEvent:UserEvent = 
new UserEvent(UserEvent.LOGIN_BUTTON_PRESSED); 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(loginEvent); 
} 
private function logout():void { 
var logoutEvent:UserEvent = 
new UserEvent(UserEvent.LOGOUT_BUTTON_PRESSED); 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(logoutEvent); 
} 
] ]> 
</fx:Script> 
Extends Group 
Set layout for 
component 
s 
1> 
Presenter for 
login component 
Init method 
1 » 
Event handler for 
the login button 
1> 
Event handler for 
the logout button 

128 
CHAPTER 7 Securing and personalizing your application 
<mx:Spacer width="100%"/> 
<mx:ViewStack id="loginStack" 
paddingTop="5" 
paddingBottom="5"> 
<mx:HBox id="loggedOut"> 
<mx:FormItem label="Username"> 
<mx:Textlnput id="usernamelnput" width="150"/> 
</mx:FormItem> 
<mx:FormItem label="Password"> 
<mx:Textlnput id="passwordlnput" width="150" 
displayAsPassword="true"/> 
</mx:FormItem> 
<mx:Button id="loginLink" label="Login" 
c l i c k = " l o g i n ( ) " / > 
</mx:HBox> 
<mx:HBox id= " loggedln" > 
<1—, 
<mx: Spacer width= " 100% "/> 
Q 
Loggedln view 
<mx:Text id="loginLabel" text="Logged in as: "/> 
<mx:Text id="userName"/> 
<mx:Button id="logoutLink" label="Logout" 
c l i c k = " l o g o u t ( ) " / > 
</mx:HBox> 
</mx:Viewstack> 
</s:Group> 
Listing 7.3 shows the code for our LoginPanel. As with most of our otiier compo-
nents, diis panel will extend the Group component Q , and you define its layout to be 
horizontal Q . Next you define a private member variable for your Presenter Q and 
initialize it in your init method Q passing in a reference to die panel in die construc-
tor. Then you define a couple of event handlers for die login button being clicked Q 
as well as the logout button being clicked © . These two event handlers follow the 
same pattern tiiat you established in chapter 3. They create die appropriate User-
Event and dispatch it for your Presenter, and anyone else who is concerned can react. 
You define die visual components starting with defining a ViewStack Q that will 
allow you to switch between die states that are possible for die login panel. Inside of 
die ViewStack component you create two HBox components, one for die loggedOut 
view state © and one for die loggedln view state Q . Now you need to create die Pre-
senter for the LoginPanel. 
7.1.4 
Creating a login Presenter 
The LoginPresenter class starts out simply. It follows die same general pattern tiiat all 
of the previous Presenters have, only having to react to a couple of button presses and 
not having to maintain any kind of state just yet. 
Listing 7.4 
LoginPresenter.as 
package org.foj.presenter { 
View stack 
1> 
LoggedOut view 
public class LoginPresenter { 

Authentication 
129 
private var _view:LoginPanel; 
private var _model:LoginModel; 
public function LoginPresenter(view:LoginPanel) { 
this._view = view; 
this._model = new LoginModel(); 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UserEvent.LOGIN_BUTTON_PRESSED, 
login); 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UserEvent.LOGOUT_BUTTON_PRESSED, 
logout); 
} 
private function login(event:UserEvent = null):void { 
var responder:IResponder = new AsyncResponder( 
loginResult, handleError); 
_model.login(_view.usernamelnput.text, 
_view.passwordlnput.text, responder); 
} 
private function logout(event:UserEvent = null):void { 
var responder:IResponder = new AsyncResponder! 
logoutResult, handleError); 
_model.logout(responder); 
} 
private function loginResult(event:ResultEvent, 
token:Object = null):void { 
_view.loginStack.selectedChild = _view.loggedln; 
_view.passwordlnput.text = ""; 
View 
Model 
J 
Add event 
listener for 
login 
Add event 
listener for 
logout 
Event 
handlerfor 
login event 
Event 
handler for 
O 
logout event 
Event 
handler for 
O 
login result 
Alert.show("You have logged in as: " + event.result.name); 
} 
private function logoutResult(event:ResultEvent, 
token:Object = null):void { 
_view.loginStack.selectedChild = _view.loggedOut; 
Alert.show("You have successfully logged out"); 
} 
private function handleError(event:FaultEvent, 
token:AsyncToken = 
CursorManager.removeBusyCursor(); 
Alert.show(event.fault.faultstring); 
} 
null):void { 
Event 
handler for 
logout result 
Error 
O 
handler 
You start your Presenter by defining die _view O 
and _model © 
instance vari-
ables. In die constructor you assign die view reference passed in to your instance 
variable and create a new instance of your model. Then you add an event listener 
for LOGIN_BUTTON_PRESSED event © , assigning the login handler 
and an event 
listener for die LOGOUT_BUTTON_PRESSED event Q , assigning die logout handler 
Q 
to it. 

130 
CHAPTER 7 Securing and personalizing your application 
Inside die login handler, you create an AsyncResponder to pass into tire model, 
pointing it to the loginResult handler method Q and the error handler Q . Then 
you call tire login method on your model passing in tire username, password, and 
tire responder. Inside the logout handler, you similarly create a responder pointing 
to the logoutResult © 
and error handler methods, tiren call the logout method 
on your model passing in tire responder. 
When tire login method from tire model responds, your login result handler is 
invoked, and switches tire current view state of tire login panel, blanks out tire pass-
word box contents so drat tire user will be forced to type in a password the next time 
she tries to login, and displays an Alert stating that she has logged in successfully. O n 
tire other side of tire equation, when the logout method from tire model responds, 
tire logout result handler is called, which switches tire view stack back to tire initial 
logged out state, and alerts tire user that she has logged out. 
7.1.5 
Creating a login manager 
Now drat tire Presenter is created, you need to implement tire model so that you can 
audrenticate users against tire application. The following listing shows tire LoginModel 
for tire LoginPanel. 
Listing 7.5 
LoginModel.as 
package org.foj.model { 
import mx.messaging.ChannelSet; 
import mx.rpc.AsyncToken; 
import mx.rpc.IResponder; 
import mx.rpc.remoting.RemoteObj ect; 
public class LoginModel { 
private var _def aultChannelSet: ChannelSet; 
Get default 
A 
ChannelSet 
public function LoginModel() { 
_defaultChannelSet = ChannelSetFactory.getDefaultchannel(); 
< 
} 
public function login(username:String, 
password:String, 
O 
Login 
responder:IResponder):void { 
method 
if (!_defaultChannelSet.authenticated) { 
var token:AsyncToken = _defaultChannelSet.login(username, password); 
token.addResponder(responder); 
} 
public function logout(responder:IResponder):void { 
var token:AsyncToken = _defaultChannelSet.logout(); 
token.addResponder(responder); 
} 
J 
Logout 
method 

Authentication 
131 
The model for die LoginPanel is simple to start with. Inside die constructor for die 
model, you get die default ChannelSet from your ChannelSetFactory O - a n ( i assign 
it to an instance variable. Inside of die login method Q , you first check to see if die 
user is already logged in, as tiiis sometimes results in an error condition, and BlazeDS 
will complain about the ChannelSet being already autiienticated. If die user is not 
logged in, it will tiien call the login method on die ChannelSet. The logout method 
Q calls logout on the ChannelSet, not having to worry about checking to see if die 
user is currendy logged in. 
7.1.6 
Updating the header 
Now you need to update your Header.mxml to include die newly created LoginPanel. 
Listing 7.6 
Header.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
xmlns:view="org.foj.view.*" 
width="100%" 
height="100"> 
<s:layout> 
<s:HorizontalLayout/> 
</s:layout> 
< fx:Script> 
<![CDATA[ 
import mx.containers.ViewStack; 
public var viewStack:ViewStack; 
] ]> 
</fx:Script> 
<mx:Spacer width="5"/> 
<s:SimpleText text="Flex Bugs Application" 
height="100%" 
fontSize="32 " 
fontWeight="bold" 
verticalAlign="middle"/> 
<mx:Spacer width="100%"/> 
<s:VGroup height="100%"> 
<view:LoginPanel height="100%"/> 
<s:HGroup id="toggleButtonPanel" width="100%"> 
<mx:Spacer width="100%"/> 
<mx:ToggleButtonBar dataProvider="viewStack"/> 
</s:HGroup> 
</s:VGroup> 
<mx:Spacer width="5"/> 
^ ^ 
LoginPanel 
</s:Group> 

132 
CHAPTER 7 Securing and personalizing your application 
The changes necessary to add the login panel to tire header are trivial. You've made a 
few minor tweaks to tire layout and spacing components and only had to add one line 
of X M L to add tire LoginPanel O to tire header. W h e n drat is done, all tirat's left is to 
configure BlazeDS to enable security. 
7.1.7 
Enabling security for Flex 
In order to enable security for our application, you need to make a small modification 
to the flex-spring-servlet.xml context file. 
Listing 7.7 
flex-spring-servlet.xml 
<?xml version="1.0" encoding="UTF-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:flex="http://www.springframework.org/schema/flex" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation=" 
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
http://www.springframework.org/schema/flex 
http://www.springframework.org/schema/flex/spring-flex-1.0.xsd"> 
<flex:message-broker> 
<flex:secured/> 
</flex:message-broker> 
</beans> 
With all of that in place, it's time to run tire application and log in. By default, two 
users are created in AppFuse, a regular user witir the R0LE_USER authority and an 
administrator witir tire ROLE_ADMIN authority. The regular user's username is user witir 
a password of user; and in case you hadn't guessed, tire administrator's username is 
admin with a password of admin. After you build and run tire application you should 
be presented witir something that looks like figure 7.2. 
L o g in with tire user and user account, and you'll be presented with an Alert 
window telling you drat you've successfully logged in. If you mistype tire password, 
you should be presented witir an error message stating that your credentials were 
Username 
user 
Password 
Login 
[ Details View | Graph View 
Severity 
Status 
null 
null 
ID: 
Project: 
test 
Description: 
test 
Figure 7.2 
The login panel in action 

Authentication 
133 
incorrect. This was the first piece of functionality you wanted to implement in this 
chapter. Now let's move on to adding autiiorization to die application. 
7.2 
Authorization 
Sometimes authenticating the users isn't enough. You might want to be able to selec-
tively secure specific parts of the application and not others. You can allow users who 
are not logged in to be able to browse die list of open bugs and comments, but 
restrict logging new bugs to autiienticated users. This is where autiiorization comes 
into play. 
Many application frameworks do not have tiiis level of support, so you end up hav-
ing to put crosscutting concerns such as autiiorization throughout die code, sur-
rounding certain functionality with checks to see if die user is autiienticated or has 
permissions to access that particular piece of functionality. In this area the Spring 
Security framework shines. 
Spring Security leverages aspect-oriented programming (AOP) to allow you to 
apply complex rules for who should be able to execute method calls. You can even get 
such fine-grained control tiiat you can allow logged in users to add new issues and 
comments and make changes to existing issues and comments, but restrict deleting to 
administrators. We won't be discussing AOP much in tiiis book, so if you'd like to learn 
more about how to use AOP witii Spring, check out Craig Walls' excellent book Spring 
in Action. The third edition is to be published in December 2010. (http://manning. 
com/walls4/). 
7.2.1 
Flex Spring Security primer 
The Spring BlazeDS Integration provides several different metiiods of securing the 
application. You'll start with the broadest control and work your way to more and 
more fine-grained control. The first metiiod you could use is to secure an entire AMF 
channel using the 
flex-spring-servlet.xml 
as shown here, but tiiis would not be desir-
able because you lose all ability to define different levels of security for different parts 
of die application. 
<flex:message-broker> 
<flex:secured> 
<flex:secured-channel channel="my-amf" access="ROLE_USER" /> 
</flex:secured> 
</flex:message-broker> 
The next method is to secure die application by adding security constraints 
directiy to the destinations by configuring the destination in a remoting-config.xml 
as shown here. 
<destination id="issueService"> 
<security> 
<security-constraints 
<auth-method>Custom</auth-method> 

1 3 4 
CHAPTER 7 
Securing and personalizing your application 
<roles> 
<role>ROLE_USER</role> 
</roles> 
</security-constraint> 
</security> 
</destination> 
This would apply a security constraint for the issueService, on a system-wide level, 
allowing only users in the role ROLE_USER access to this destination. This method of 
securing an application, while simple, will not work for what you're trying to do with 
the application for a couple of reasons. This would effectively cut off any ability to do 
method-level authorization for the application. In addition, you are not defining the 
destinations using a remoting-config.xml. You're allowing the Spring BlazeDS Integra-
tion to dynamically configure the remoting destinations for you. 
Moving on to a more finely grained security, you can set up a global method inter-
ceptor using AOP pointcut syntax to define a pattern of methods you want to secure. 
The following code shows an example of this taken from the security.xml file provided 
by AppFuse. 
<global-method-security> 
<protect-pointcut 
expression=" execution(* *..service.UserManager.getUsers(..))" 
access="ROLE_ADMIN"/> 
</global-method-security> 
This will constrain any call to a method named getUsers contained in a class or 
interface named UserManager whose package name ends with " service ". As you can 
see this method allows you to apply very complex patterns to define which methods 
get secured. 
<bean id="issueService" class="org.foj.service.impl.IssueManagerlmpl"> 
<constructor-arg ref="issueDao"/> 
<constructor-arg ref="commentService"/> 
<security:intercept-methods> 
<security:protect method="save" 
access="ROLE_USER,ROLE_ADMIN" /> 
<security:protect method="remove*" 
access="ROLE_ADMIN" /> 
</security:intercept-methods> 
</bean> 
The code shows how to secure methods at the bean level in XML by using the Spring 
application context. This gives you more localized control over the security than the 
global method illustrated previously, keeping the security constraints closer to the code 
that it affects. 
public interface IssueManager { 
@Secured({"ROLE_USER", "ROLE_ADMIN"}) 
@RemotingInclude 
Issue save(Issue issue); 

Authentication 
135 
(iSecured({"ROLE_ADMIN"}) 
(iRemotinglnclude 
void remove(Long id); 
} 
The code shows die final metiiod of securing die business metiiods by using die 
@Secured annotation. This is the most localized metiiod of security and the metiiod 
you're going to use in upcoming examples. This keeps the declared security con-
straints right with die code you're trying to secure. The otiier advantage to using die 
annotations over the other metiiods is that if people decide to override what you've 
defined in die code, tiiey can override it using die XML configuration. 
7.2.2 
Spring Integration 
Security 
In order for die Flex application to be able to take advantage of using Spring Security 
for autiiorization, you first need to add die Spring Integration Security dependency to 
the pom.xml in die flex-bugs-web project. 
Listing 7.8 
Spring Integration Security dependency 
<dependency> 
<groupId>org. springf ramework. integration-;/groupId> 
<artifactld>spring-integration-security</artifactld> 
<version>l.0.3.RELEASE</version> 
</dependency> 
By adding tiiis dependency, BlazeDS will use a special LoginCommand object on die 
server side that enables die Channel Set login and logout functionality to integrate 
with Spring Security's authorization mechanisms by returning the username and any 
authorities that the user has in the result event. It also does error translating on the 
server side to translate security exceptions that may occur into their BlazeDS security 
exception equivalent. Now the error can be reported back to the Flex client instead of 
returning an HTTP 403 status code, which will break die application. You can read 
more about die Spring Integration Security in the docs for the Spring BlazeDS Inte-
gration at http://static.springsource.org/spring-flex/docs/1.0.x/reference/html/. 
7.2.3 
@Secured 
annotations 
There are a number of metiiods you can use to secure your application; we have cho-
sen to continue along the path of using annotations where possible to declare which 
interface methods we want to secure and what security constraints we want to place on 
them. We'll start by adding die necessary annotations to the IssueManager. 
Listing 7.9 
IssueManger.java 
package org.foj.service; 
import org.foj.model.Issue; 
import org.springframework.flex.remoting.RemotingDestination; 

136 
CHAPTER 7 Securing and personalizing your application 
import org.springframework.flex.remoting.Remotinglnclude; 
import org.springframework.security.annotation.Secured; 
import javax.jws.WebService; 
(iWebService 
@RemotingDestination(channels = {"my-amf"}) 
public interface IssueManager { 
(iRemotinglnclude 
j ava. util. List<Issue> g e t A H O ; 
(iRemotinglnclude 
Issue get(Long id) ; 
@Secured({MROLE_USERM , "ROLE_ADMIN"}) 
(iRemotinglnclude 
Issue save(Issue issue); 
(iSecured({"ROLE_ADMIN"}) 
(iRemotinglnclude 
void remove(Long id); 
J 
1 » 
save method 
annotation 
remove method 
annotation 
You've added an @Secured annotation to die save method © and declared tiiat only 
users having ROLE_USER and ROLE_ADMIN privileges can add and update issues. You 
defined botir roles since your roles are not overlapping, meaning that ROLE_ADMIN is 
not a superset of ROLE_USER but ratirer separate altogetirer. Next you declare tire 
remove method to be usable only by those who have die ROLE_ADMIN granted to 
drem © . Next you add tire necessary annotations to the CommentManager. 
Listing 7.10 
CommentManager.java 
package org.foj.service; 
import org.foj.model.Comment; 
import org.springframework.flex.remoting.RemotingDestination; 
import org.springframework.flex.remoting.Remotinglnclude; 
import org.springframework.security.annotation.Secured; 
import javax.jws.WebService; 
import java.util.List; 
(iWebService 
@RemotingDestination(channels = {"my-amf"}) 
public interface CommentManager { 
(iRemotinglnclude 
List<Comment> findCommentsBylssueld(Long issueld); 
(iSecured ( { " ROLE_ADMIN" } ) 
(iRemotinglnclude 
void deleteAHCommentsForlssueld(Long issueld); 
delete AIICommentsForlssueld 
method annotation 
(iRemotinglnclude 
Comment get(Long id) 

Authentication 
137 
@Secured({"ROLE_USER", "ROLE_ADMIN"}) 
(iRemotinglnclude 
Comment save(Comment comment); 
(iSecured ( { " ROLE_ADMIN" } ) 
(iRemotinglnclude 
void remove(Long id); 
save method 
annotation 
remove method 
annotation 
Similar to the IssueManager annotations, you start by declaring that only members 
of ROLE_ADMIN can call the deleteAHCommentsForlssueld O 
a n (i remove Q 
meth-
ods. Then you declare that die save method can be called by users witii either 
ROLE_USER or ROLE_ADMIN privileges Q . Notice that you never specified any security 
constraints for die get methods of your services. This ensures tiiat anyone can call 
them whether or not they're autiienticated to die application. Now that you've 
declared the security witii annotations, you need to enable support for these annota-
tions in Spring Security. 
7.2.4 
Overriding default security settings 
AppFuse has Spring Security installed and configured out of die box, so to extend 
upon tiiat you need to extract its security.xml configuration and put tiiat in the 
flex-bugs-web project in the WEB-INF folder alongside die otiier Spring configura-
tion files. To do this you copy the security.xml tiiat is included in die appfuse-web-
common.war tiiat basically is overlaid on top of die flex-bugs-web.war when you build 
this project. 
Listing 7.11 
security.xml 
<?xml version="1.0" encoding="UTF-8"?> 
<beans:beans xmlns="http://www.springframework.org/schema/security" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:beans="http://www.springframework.org/schema/beans" 
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.0.xsd 
http://www.springframework.org/schema/security 
http://www.springframework.org/schema/security/ 
spring-security-2.0.1.xsd"> 
<http auto-config="true" lowercase-comparisons="false"> 
<intercept-url pattern="/admin/*" access="ROLE_ADMIN"/> 
<intercept-url pattern="/passwordHint.html*" 
access="ROLE_ANONYMOUS,ROLE_ADMIN,ROLE_USER"/> 
<intercept-url pattern="/signup.html*" 
access="ROLE_ANONYMOUS,ROLE_ADMIN,ROLE_USER"/> 
<intercept-url pattern="/a4j.res/*.html*" 
access="ROLE_ANONYMOUS,ROLE_ADMIN,ROLE_USER"/> 
<form-login login-page="/login.jsp" 
authentication-failure-url="/login.j sp?error=true" 
login-processing-url="/j_security_check"/> 
Security by 
url pattern 

138 
CHAPTER 7 Securing and personalizing your application 
<remember-me user-service-ref="userDao" 
key="e37 f4b31-0c45-lldd-bd0b-0800200c9a66"/> 
</http> 
<authentication-provider user-service-ref="userDao"> 
<password-encoder ref="passwordEncoder"/> 
</authentication-provider> 
Authentication 
provider 
Enable security 
annotations 
<global-method-security 
secured-annotations="enabled" 
j sr250-annotations="enabled"> 
<protect-pointcut 
.service.UserManager.getUsers(..))" 
iirity 
Q 
:ions 
T 
.service.UserManager.removeUser(..))" 
expression="execution(* *. 
access="ROLE_ADMIN"/> 
<protect-pointcut 
expression="execution(* *. 
access="ROLE_ADMIN"/> 
</global-method-security> 
</beans:beans> 
Listing 7.11 shows the modified security.xml, which for tire most part is identical to 
tire security.xml included in AppFuse. The first section Q , which is configured by 
AppFuse, dictates which URL patterns to intercept and pass through tire security fil-
ters. You don't need to specify anytiring in this section for tire Flex application as tire 
Spring Integration Security handles all the filtering for tire Flex and BlazeDS interac-
tions. The second section Q defines tire authentication provider, which in tiris case is 
using tire default userDao provided by AppFuse. If you wanted to change drat metirod 
of authentication to an LDAP server, for instance, you would configure it tirere. 
In the last segment Q you added a couple of attributes to the global-method-
security tag to set tire secured-annotations to enabled and tire jsr250-annotations 
to enabled as well. 
7.2.5 
Updating IssueModel and CommentModel 
Now all that's left to enable authorization to work in tire Flex application is to modify 
tire models to use the ChannelSetFactory you created earlier. The following listing 
shows tire changes for tire IssueModel. 
Listing 7.12 
IssueModel.as 
package org.foj.model { 
public class IssueModel { 
private var _issueService:RemoteObject; 
public function IssueModel() { 
var defaultChannelSet:ChannelSet = 
ChannelSetFactory.getDefaultchannel(); 
_issueService = new RemoteObject(); 
_issueService.destination = "issueService" 
J 
Get ChannelSet 

Persona liza tion 
139 
_issueService.channelSet = defaultChannelSet; 
Set channelSet 
on service 
As you can see the impact of adding tiiis functionality to the Flex application is mini-
mal. First you get the default ChannelSet from the ChannelSetFactory © , j n s l as you 
did earlier for die LoginModel, and you set the channelSet property on the 
RemoteObject © 
to the defaultChannelSet. The following listing shows the same 
changes for the CommentModel. 
Listing 7.13 
CommentModel.as 
package org.foj.model { 
public class CommentModel { 
private var _commentService:RemoteObject; 
public function CommentModel() { 
var defaultChannelSet:ChannelSet = 
ChannelSetFactory.getDefaultchannel(); 
_commentService = new RemoteObject(); 
_commentService.destination = "commentService"; 
_commentService.channelSet = defaultChannelSet; 
} 
Now you can build and run the application and 
if you try to save or delete an item without being 
logged in with the proper autiiorities granted, 
you will be presented witii an error message like 
that in figure 7.3 
Again, die error handling is simple, displaying 
the fault message in an Alert box. Notice that the 
error message accurately describes die error. The 
last security enhancement you're going to make 
to die application is to add personalization. 
Personalization 
W h e n you think about leveraging a security framework in the Flex application, you 
probably don't tiiink about personalization, even though the two are closely related. 
Recall earlier when we discussed die Spring Integration Security module, you saw 
that one of die tilings returned in die ResultEvent is die username of die person 
who was audienticating. 
J 
Get ChannelSet 
Set channelSet 
on service 
Figure 7.3 
Error when trying to execute 
a method without authorization 

140 
CHAPTER 7 Securing and personalizing your application 
Now that the user has authenticated to the application, you can use the informa-
tion returned from the login process to get more information such as the user's first 
and last names. Why not just use die username tiiat the user typed into die login box 
you ask? Simple. If you wait for die login metiiod to return successfully and take die 
value returned instead, you are guaranteed tiiat the user has first authenticated, and 
tiiat the username returned in the ResultEvent is die correct username for tiiat user. 
7.3.1 
Adding the UserService to the LoginModel 
Because the ResultEvent returned from logging in and out of die ChannelSet only 
includes the user name, you'll have to use anotiier method to get the user's full name 
from die application. Fortunately AppFuse exposes this functionality in the userDao 
object; you still have to tell BlazeDS to expose this to the Flex application. So you 
need to add the following line to the 
flex-spring-servlet.xml 
in the src/main/ 
webapp/WEB-INF folder of the flex-bugs-web project: 
<flex:remoting-destination ref="userDao"/> 
This one line of xml configuration accomplishes the same thing you did in chapter 5 
with the ORemotingDestination annotations, the difference being tiiat you don't have 
to crack open die AppFuse source code to expose tiiis Spring bean as a remote service 
to Flex. Now let's add tiiis service to the LoginModel. 
Listing 7.14 
LoginModel.as 
package org.foj.model { 
import mx.messaging.ChannelSet; 
import mx.rpc.AsyncToken; 
import mx.rpc.IResponder; 
import mx.rpc.remoting.RemoteObj ect; 
public class LoginModel { 
-« 
„ 
userService 
private var _userService:RemoteObject; 
private var _defaultChannelSet:ChannelSet; 
J 
public function LoginModel() { 
_defaultChannelSet = ChannelSetFactory.getDefaultchannel(); 
_userService = new RemoteObject(); 
_userService.destination = "userDao"; 
_userService.ChannelSet = _defaultChannelSet; 
} 
J» 
Creating 
RemoteObject 
public function getUserDetails(username:String, 
responder:IResponder):void { 
var token:AsyncToken = _userService.loadUserByUsername(username); 
token.addResponder(responder); 
} 
getUserDetails 
method 
} } 

Persona liza tion 
141 
First you define an instance variable for tire userService O and create a new instance 
of it in the constructor Q . As witir other remote objects, you set its destination to 
userDao because that is what tire Spring bean is defined as, and you set tire channel-
Set to the defaultChannelSet that you got from tire ChannelSetFactory. As a final 
step you define a metirod called getUserDetails © , which takes as its first argument 
the username to look up and a responder to call back to when tire service returns. 
Now let's update tire LoginPresenter to use this new functionality. 
7.3.2 
Updating the LoginPresenter 
You need to make a couple of minor modifications to tire LoginPresenter to use tire 
metirod you just created in the LoginModel. 
Listing 7.15 
LoginPresenter.as 
package org.foj.presenter { 
public class LoginPresenter { 
private var _view:LoginPanel; 
private var _model:LoginModel; 
public function LoginPresenter(view:LoginPanel) { 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UserEvent.USER_LOGGED_IN, 
getUserDetails); 
private function loginResult(event:ResultEvent, 
token:Object = null):void 
_view.loginStack.selectedChild = _view.loggedln; 
_view.passwordlnput.text = ""; 
var userLoggedlnEvent:UserEvent = 
new UserEvent(UserEvent.USER_LOGGED_IN); 
userLoggedlnEvent.data = event.result.name; 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(userLoggedlnEvent); 
} 
private function logoutResult(event:ResultEvent, 
token:Object = null) :voi< 
_view.userName.text = ""; 
_view.loginStack.selectedChild = _view.loggedOut; 
Alert.show("You have successfully logged out"); 
var userChangedEvent:UserEvent = 
new UserEvent(UserEvent.CURRENT_USER_UPDATED); 
userChangedEvent.data = null; 
EventDispatcherFactory.getEventDispatcher() 
A 
Event listener for 
q T 
user logged in 
J 
Event handler 
for user logged 
in result 
A 
Event handler 
for user logged 
, 
out result 
d { 

142 
CHAPTER 7 Securing and personalizing your application 
. dispatchEvent (userChangedEvent) ; 
E y e n t hand|er for 
Q 
' 
user logged in 
I 
private function getUserDetails (event:UserEvent = null) : void { 
<3—' 
var responder:IResponder = new AsyncResponder( 
getUserDetailsResult, handleError); 
} 
model.getUserDetails(event.data, responder); 
„ 
„ , 
~ 
' 
^ 
A 
Handler for 
userService 
private function getUserDetailsResult(event:ResultEvent, 
< 
token:Object = null):void { 
var user = event.result; 
_view.userName.text = user.fullName; 
Alert.show("Welcome Back " + user.fullName); 
var userChangedEvent:UserEvent = 
new UserEvent(UserEvent.CURRENT_USER_UPDATED); 
userChangedEvent.data = user; 
EventDispatcherFactory.getEventDispatcher() 
.dispatchEvent(userChangedEvent); 
} 
result 
} } 
The first change you make is to add a listener for die USER_LOGGED_IN event © so that 
you know when you need to update the user details. Next you make a slight modifica-
tion to the method tiiat is called when die result comes back from the call to log in on 
die IssueModel © . Here you take the username from the event result and create a 
new UserEvent of type USER_LOGGED_IN, and you set die event's data property to die 
username. This allows you to pass along die username to whoever would want to 
respond to a user logging in. You do sometiiing similar in the logged out result han-
dler © except you create a CURRENT_USER_UPDATED event to notify other parts of die 
application that the currently logged in user has been changed, and set its data prop-
erty to null. 
Next you define the event handler for die USER_LOGGED_IN event listener you 
defined in die constructor Q . Inside tiiis method you create an AsyncResponder 
object and make a call to die getUserDetails metiiod on die IssueModel you defined 
in die previous section. When the result from this call comes back, it is handled by die 
getUserDetailsResult method © where you update die view to show die current 
user's full name, and you create a new CURRENT_USER_UPDATED event setting its data 
property to the User object that came back in die ResultEvent. 
Now let's look at updating the DetailPresenter and CommentsListPresenter, 
which will be listening for die CURRENT_USER_UPDATED event tiiat you just added. 
7.3.3 
Updating the DetailPresenter and 
CommentsListPresenter 
Now tiiat the LoginPresenter is broadcasting an event that notifies the rest of the 
application that the currently logged in user has changed, you can add event listeners 

Persona liza tion 
143 
to the other parts of tire application that may want to listen for that. You'll start with 
the D e t a i l P r e s e n t e r so that you can default tire text in the author field for any new 
issues to tire currently logged in user. The following listing shows the changes needed 
to add dris to the DetailPresenter. 
Listing 7.16 
DetailPresenter 
package org.foj.presenter { 
J 
public class DetailPresenter { 
private var _currentUser:User; 
private var _issue:Issue; 
private var _view:DetailView; 
private var _issueModel:IssueModel; 
public function DetailPresenter(view:DetailView) { 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UserEvent.CURRENT_USER_UPDATED, 
currentUserChanged); 
Instance variable for 
current user 
J 
Event listener 
for current 
user changing 
private function cancelChanges(event:UIEvent = null):void { 
selectedlssue = new Issued; 
selectedlssue.reportedBy = _currentUser.fullName; 
var event:UIEvent = new UIEvent(UIEvent.SELECTED_ISSUE_CHANGED); 
event.data = selectedlssue; 
EventDispatcherFactory.getEventDispatcher().dispatchEvent(event); 
Event handler for 
A 
currentUserChanged 
I 
private function currentUserChanged (event: UserEvent): void { 
<1—' 
_currentUser = event.data; 
if (selectedlssue.id == 0) { 
_view.issueReportedBy.text = _currentUser == null ? 
"" :_currentUser.fullName; 
} 
First you add an instance variable for tire DetailPresenter to be able to cache the 
current user in Q< Next you add an event listener for tire CURRENT_USER_UPDATED 
event Q and point it at tire currentUserChanged event handler. Inside the cancel-
Changes event handler, which is invoked each time tire user wants to clear out the 
changes made in tire detail form and creates a new issue, you set tire default for the 
reportedBy property to the current user's full name 
Last you implement an 
Q 
Default 
author field 

1 4 4 
CHAPTER 7 Securing and personalizing your application 
event listener for the current user changing 
where you set the instance variable 
of current user to the user that was passed along in die event. Then you update the 
reported by field on the view if die currendy displayed issue is not an existing 
issue. The following listing shows the changes for the CommentsListPresenter. 
Listing 7.17 
CommentsListPresenter 
package org.foj.presenter { 
J 
Instance variable 
for current user 
public class CommentsListPresenter { 
private var _currentUser:User; 
private var _selectedlssue:Issue; 
private var _selectedComment:Comment; 
private var _commentModel:CommentModel; 
private var _view:CommentsView; 
private var _popl:EditCommentForm; 
public function CommentsListPresenter(view:CommentsView = null) { 
EventDispatcherFactory. getEventDispatcher () 
<—. 
Event listener for 
.addEventListener(UserEvent.CURRENT_USER_UPDATED, 
Q 
user changed 
currentUserChanged); 
} 
private function addNewComment(event:* = null):void { 
selectedComment = new Comment(); 
selectedComment.issue = selectedlssue; 
_popl = PopUpManager.createPopUp((_view as UlComponent).root, 
EditCommentForm, true) as EditCommentForm; 
_popl.author.text = _currentUser.fullName; 
PopUpManager.centerPopUp(_popl as UlComponent); 
} 
Default 
author field 
private function currentUserChanged (event: UserEvent): void { 
<1—i 
_currentUser = event.data; 
} 
Event handler for 
I 
user changed event 
O 
As with die DetailPresenter, you start by defining an instance variable to allow tiiis 
Presenter to cache the currently logged in user Q . After tiiat, you add an event lis-
tener for the CURRENT_USER_UPDATED event Q pointing it to the currentUserChanged 
method 
where you set the current user to die user passed in witii the event. Inside 
die addNewComment metiiod you default die text of die Author field in die comment 
pop up to be die current user's full name © . 

Summary 
145 
I B 
Add/Edit Comment 
Ajlhor: 
Daie: 
coin ment 
Save Commem 
Figure 7.4 
Add new comment defaults Author to currently logged in user 
Now build and run the application. If you log in using the Tomcat User username of 
user and password of user and try to add a new comment to an issue, you should see 
that the Author field is now defaulting to tire logged in user's full name as shown in 
figure 7.4. When you log out you should see drat the fields are no longer being 
defaulted to anything. 
Summary 
W h e n you started this chapter, you had an application which anybody could have 
added critical issues to and removed important issues from with no controls to pre-
vent such destructive behavior. Over tire course of tire chapter you added measures to 
control access. 
You started by adding the simplest of security constraints to the application, allow-
ing tire users to authenticate to the server side, although tiris doesn't do you much 
good until you can control what tire users do to tire data. After you added tire authori-
zation constraints, you had fine-grained control over who could modify and delete the 
data. This is important, because before Spring Security was developed, tire most com-
mon way to declaratively define security constraints this way at tire method level was to 
use EJBs and container-managed security, which would probably have made tiris tight 
integration difficult to create. 
Even in tire fairly simple example you have been able to define three different lev-
els of security for tire application with minimal intrusion to tire existing web applica-
tion. The ability to declaratively define security constraints on tire business methods 

146 
CHAPTER 7 
Securing and personalizing your application 
by using either the @Secured annotations or using AOP pointcut syntax is extremely 
powerful. This means that you no longer have to litter the source code with i f state-
ments checking if users are logged in and whether or not they have the right level of 
access to perform the operation. 
The last thing you did in the journey through this chapter was to add functionality 
that doesn't do much for securing the application, but will likely delight the users for 
the simple fact that the application is personalized to them. They no longer have to 
type their names into the author fields when adding new issues and comments, and 
can see that they are logged in, and whom they are logged in as. 
In the next chapter you're going to continue enhancing the application by adding 
data visualization to put a bird's-eye view on the data. You're going to tackle creating a 
pie chart component from scratch using the Degrafa framework. 

This chapter covers 
• 
Introducing the Degrafa drawing library 
• Creating a custom PieChart component 
• Creating an ItemRenderer for a DataGrid 
• 
Dynamic object creation 
Now that your application is secured and communicating with tire server side, it's 
time to add data visualization components and enable a bird's-eye view on tire data. 
Adding data visualization components to your application allows people to see at a 
glance tire open project issues and the number of bugs versus the number of fea-
ture requests, without having to manually count them in tire data grid in tire master 
view. The data could be visualized in many ways—we'll only scratch tire surface in 
this chapter. 
Adobe provides data visualization components, but only when you purchase a 
license for tire professional version of the Flash Builder IDE. Because our goal is to 
do Flex development using only free and open source technologies, we've decided 
to create our own visualization components—besides, it's more fun. 
147 

148 
CHAPTER 8 
Charting with Dégrafa 
8.1 
Drawing in Flex 
Flex and Flash provide powerful drawing libraries tiiat we could leverage to create our 
custom graph components, but we're going to leverage an open source graphics library 
called Degrafa. Using Degrafa gives us die ability to declaratively build our graphing 
components rather tiian having to deal witii die complex calculations involved in draw-
ing pie chart slices as illustrated in listing 8.1, which shows an example ActionScript 
class specifically for drawing a pie chart slice found at http://www.adobe.com/devnet/ 
flash/articles/adv_draw_mediods.html. 
Notice how much trigonometry is involved in 
creating something as simple as a pie chart slice from scratch. 
Listing 8.1 
Example of drawing in ActionScript 
/* 
mc.drawWedge is a method for drawing pie shaped 
wedges. Very useful for creating charts. Special 
thanks to: Robert Penner, Eric Mueller and Michael 
Hurwicz for their contributions. 
*/ 
MovieClip.prototype.drawWedge = function(x, y, startAngle, arc, 
radius, yRadius) { 
// mc.drawWedge() - by Ric Ewing (ric@formequalsfunction.com) -
version 1.3 - 6.12.2002 
// x, y = center point of the wedge. 
// startAngle = starting angle in degrees. 
// arc = sweep of the wedge. Negative values draw clockwise. 
// radius = radius of wedge. If [optional] yRadius is defined, 
then radius is the x radius. 
// yRadius = [optional] y radius for wedge. 
// ============== 
// Thanks to: Robert Penner, Eric Mueller and Michael Hurwicz 
for their contributions. 
// ============== 
if (arguments.length<5) { 
return; 
// move to x,y position 
this.moveTo(x, y); 
// if yRadius is undefined, yRadius = radius 
if (yRadius == undefined) { 
yRadius = radius; 
} 
// Init vars 
var segAngle, theta, angle, angleMid, segs, ax, ay, bx, by, cx, cy; 
// limit sweep to reasonable numbers 
if (Math.abs(arc)>360) { 
arc = 3 60; 
} 
// Flash uses 8 segments per circle, to match that, draw in a maximum 
// of 45 degree segments. First calculate how many segments are needed 
// for our arc. 

Common Dégrafa concepts 
149 
segs = Math.ceil(Math.abs(arc)/45); 
// Now calculate the sweep of each segment. 
segAngle = arc/segs; 
// The math requires radians rather than degrees. To convert from degrees 
// use the formula (degrees/180)*Math.PI to get radians. 
theta = -(segAngle/180)*Math.PI; 
// convert angle startAngle to radians 
angle = -(startAngle/180)*Math.PI; 
// draw the curve in segments no larger than 45 degrees, 
if (segs>0) { 
// draw a line from the center to the start of the curve 
ax = x+Math.cos(startAngle/180*Math.PI)*radius; 
ay = y+Math.sin(-startAngle/180*Math.PI)*yRadius; 
this.lineTo(ax, ay); 
// Loop for drawing curve segments 
for (var i = 0; i<segs; i++) { 
angle += theta; 
angleMid = angle-(theta/2); 
bx = x+Math.cos(angle)*radius; 
by = y+Math.sin(angle)*yRadius; 
cx = x+Math.cos(angleMid)*(radius/Math.cos(theta/2)); 
cy = y+Math.sin(angleMid)*(yRadius/Math.cos(theta/2)); 
this.curveTo(cx, cy, bx, by); 
} 
// close the wedge by drawing a line to the center 
this.lineTo(x, y) ; 
} 
Adobe has released the specifications for its declarative graphics library, called FXG. It 
appears that tire Degrafa team has collaborated with tire Adobe team to create tiris 
specification, but tire FXG functionality is only a subset of what is available from tire 
Degrafa library. This may be a library to keep your eye on as it's being developed. 
Common Degrafa concepts 
Before diving into developing tire component, let's familiarize ourselves with some of 
the terms and concepts that we'll see as we work tirrough tiris example. 
• 
Surface—This 
is tire base component for everything you'll do in Degrafa. All 
odrer Degrafa components will be composed witirin a Surface. 
• 
GeometryGroup—After 
tire Surface, tiris is tire next level of composition. The 
GeometryGroup tag allows you to group Degrafa components to compose 
an object. 
• 
Stroke—Stroke 
is tire object that is used to define tire look of an object's outline, 
in terms of color, thickness, and style. Degrafa provides different Stroke objects 
for your use depending on tire style of stroke you want: SolidStroke, Linear-
Gradient, and RadialGradient. 
• 
Fill—Fill 
refers to the appearance of tire bounded area of a graphical compo-
nent. Degrafa provides tire following fills: SolidFill, LinearGradient, Radial-
Gradient, BitmapFill, BlendFill, and ComplexFill. 

150 
CHAPTER 8 
Charting with Dégrafa 
• 
Shapes—Dégrafa supports drawing many different shapes out of the box, such 
as Circle, Ellipse, RegularRectangle, RoundedRectangle, Polygon, and 
more. For irregular shapes, Dégrafa also has an extensive library of auto shapes 
and enables defining any shape you'd like by providing a Scalable Vector 
Graphics (SVG) path. 
• 
Repeaters—This gives you the ability to repeat a shape any number of times on 
the surface. 
Much like other Flex components, the Dégrafa components are considered either 
container components, meaning they will contain other Dégrafa components, or 
graphical elements. Figure 8.1 shows the relationship of the common components. 
More than a single chapter would be needed to cover all the features that Dégrafa 
offers, especially when it comes to skinning and the advanced CSS functions you can 
accomplish with this powerful framework. We're only going to scratch the surface; to 
learn more about Dégrafa, you can start with the Foundation section of the documen-
tation at http:^www.degrafa.org/samples/foundation.html. 
8.3 
Creating a pie chart for fun and profit 
Now that we have some of the basic concepts, let's get on with the task of creating a 
custom pie chart component. We were inspired by a blog posting by Derrick Grigg 
titled appropriately enough Dégrafa Pie Chart, which can be found at http://www. 
dgrigg.com/post.cfm/04/ 15/2008/Degrafa-Pie-Chart. After we decomposed it and 
removed some of the extra visual effects such as tweening and gradients, it barely 
Surface 
GeometryGroup 
Stroke 
Fill 
Circle 
GeometryGroup 
Figure 8.1 
Relationship of Dégrafa components 

Creating a pie chart for fun and profit 
151 
FlexBugs Application 
KW.l! VkW | Sfliptl V«» | 
La» I 
Units 
Project t S 
Pr-ajeet 2 5 
Ccpv-K/' ¿009 Flex On Java 
Figure 8.2 
Mock-up of the Graph View 
resembles what we started witir. Figure 8.2 shows a mock-up of the chart we'll be devel-
oping in this chapter. 
Recall in chapter 2 you created a separate view to contain your data visualization. 
For this example you'll be developing only a single pie chart component, but some of 
the concepts illustrated here could potentially be applied to creating any number of 
charting components. 
The component you'll develop is a combination of a pie chart and a data grid, 
which will serve the purpose of a legend for tire pie chart. Without this it may be 
difficult for someone looking at tire chart to differentiate between data points on 
the graph. The pie chart will consist of tire pie chart itself and anotirer component 
for each of the slices that make up tire chart. You'll also develop a simple custom 
ItemRenderer for tire chart legend to draw a simple box inside one of tire cells in 
the data grid. 
You'll also be adding a label and a combo box to tire GraphView to allow tire user to 
change tire data tire chart shows. By changing tire value of the combo box tire user can 
show how many issues there are by project, type, status, or severity. 
8.3.1 
New custom event 
We're going to create a new custom event for our pie chart. The reason we're creating 
a new one rather than continuing to use tire UIEvent we created earlier is that if we 
ever wanted to put more tiran one pie chart component into our application, we'd 
need to be able to distinguish which component fired tire event. 

152 
CHAPTER 8 
Charting with Dégrafa 
Listing 8.2 
PieChartEvent.as 
package org.foj.event { 
import flash.events.Event; 
public class PieChartEvent extends Event{ 
public static const DATA_PROVIDER_UPDATED:String = 
"dataProviderUpdated"; 
public var data:*; 
public var id:*; 
< — © 
id property 
public function PieChartEvent(type : String, 
bubbles : Boolean = true, 
cancelable : Boolean = false) 
{ 
super(type, bubbles, cancelable); 
} 
This event differs from die one created previously in die addition of an id O prop-
erty. This is done so that die presenter can decide whetiier or not it needs to react 
to die event. Witii the new event created, you can move on to creating the compo-
nent itself. 
8.3.2 
PieChart component 
First you'll develop die view tiiat contains the pie chart and legend. You'll create these 
view components in a new package, so create a file named PieChart.mxml in die org. 
foj .components package of your project. The following listing shows the first part of 
the code for the PieChart view. 
Listing 8.3 
PieChart.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
xmlns:degrafa="http://www.degrafa.com/2007" 
creationComplete="init()"> 
<s:layout> 
<s:HorizontalLayout/> 
</s:layout> 
< fx:Script> 
<![CDATA[ 
import mx.collections.ICollectionView; 
import org.foj.event.EventDispatcherFactory; 
import org.foj.event.PieChartEvent; 
import org.foj.presenter.PieChartPresenter; 
private var _presenter:PieChartPresenter; 
private var _dataProvider:ICollectionView; 
CreationComplete 
handler 
J 
HorizontalLayout 
J 
Define presenter 
field 
Define data 
provider field 

Creating a pie chart for fun and profit 
153 
private function init():void 
{ 
presenter = new PieChartPresenter (this, id); 
<-, 
p a s s c o m p o n e n t > s 
© 
id to presenter 
public function set dataProvider(dataProvider:ICollectionView):void {< 
var refreshEvent:PieChartEvent = 
new PieChartEvent(PieChartEvent.DATA_PROVIDER_UPDATED); 
ref reshEvent. id = id; 
Set property for 
ref reshEvent. data = dataProvider; 
dataprovider 
© 
EventDispatcherFactory.getEventDispatcher().dispatchEvent(refreshEvent); 
} 
</fx:Script> 
</s:Group> 
The code is similar to what you developed in chapter 3 when you created all the MVP 
components. You set the creationComplete event © to call the init metirod. Next 
you set the layout of your component to use HorizontalLayout © . Then you declare 
a couple of private member variables for tire data provider and its presenter © , 
© . 
Inside the init metirod you bootstrap your presenter © . Last you create a set prop-
erty © for the data provider where you create an event to notify tire presenter that tire 
data provider was updated. Listing 8.4 shows the rest of your pie chart component. 
Listing 8.4 
PieChart.mxml (continued) 
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
xmlns:degrafa="http://www.degrafa.com/2007" 
creationComplete="init()"> 
</fx :Script> 
<mx:Spacer width="10"/> 
<degrafa : Surface id="pieSurface" 
width="200" height="200"> 
<degrafa :GeometryGroup id="pieGroup"> 
<degrafa:filters> 
<mx:DropShadowFilter color="0x000000" 
alpha="0.5"/> 
</degrafa:filters> 
</degrafa :GeometryGroup> 
</degrafa:Surface> 
<mx:DataGrid id="legendDataGrid"> 
<mx:columns> 
J 
Spacer to help lay out 
the component 
1 
< — © 
Degrafa surface 
Geometry group 
© 
containing pie chart 
Drop shadow 
for pie chart 
Legend for 
pie chart 

154 
CHAPTER 8 
Charting with Dégrafa 
J 
Custom 
ItemRenderer 
<mx:DataGridColumn width="40" 
sortable="false" 
itemRenderer= " org. f o j . components . PieLegendRenderer" /> 
<mx:DataGridColumn dataField="label" 
headerText="Label"/> 
<mx:DataGridColumn dataField="units" 
headerText="Units"/> 
</mx:columns> 
</mx:DataGrid> 
</s:Group> 
First you added a spacer Q to the component to put a bit of padding between your 
pie chart and its surrounding components. Next you added a Degrafa Surface com-
ponent Q and a GeometryGroup © to hold die rest of die Degrafa components neces-
sary for the pie chart component. The GeometryGroup is die component to which 
you'll add your pie chart slices when you create diem. You've also added a Drop-
ShadowFilter © to die GeometryGroup to add a bit of visual flair to die pie chart. Last 
you defined the DataGrid component © for your chart legend, witii a custom Item-
Renderer © to display the color tiiat corresponds to the data in die chart, which 
you'll create in a bit. 
8.3.3 
PieChartSlice 
Now that we've defined the pie chart component, let's move on to defining die slices 
diat will make up die pie chart. The pie chart slice is a ratiier simple component. We 
probably could have created die pie chart slice programmatically in ActionScript, 
however tiiis approach allows us to define sensible defaults declaratively in MXML, 
adding behavior as well. 
Listing 8.5 
PieChartSlice.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<degrafa:GeometryGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:degrafa="http://www.degrafa.com/2007" 
height="400" 
width="400"> 
< fx:Script> 
<![CDATA[ 
public function refresh():void 
{ 
this.graphics.clear(); 
thi s.arc.preDraw(); 
this.arc.draw(graphics, null); 
} 
] ]> 
</fx:Script> 
<degrafa:EllipticalArc 
id="arc" 
width="200" 
1> 
Extends 
GeometryGroup 
1 » Your pie chart slice 
J 
Adds EllipticalArc 

Creating a pie chart for fun and profit 
155 
height="200" 
closureType="pie"/> 
</degrafa:GeometryGroup> 
The pie chart slice will extend from GeometryGroup O instead of tire standard Flex 
Group component drat you extended in chapter 2. Next you define a refresh metirod 
Q 
to abstract behavior away from your presenter. Last you add an EllipticalArc 
component to tire component Q and set default values such as its width, height, and 
most importantly closureType property, which you set to pie. 
8.3.4 
Custom ItemRenderer 
The next component you're going to create is tire custom ItemRenderer for tire pie 
chart legend. This simple component will draw a colored box in tire data grid cell to 
correspond witir tire colors of tire pie chart. 
Listing 8.6 
PieLegendRenderer.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<mx:HBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
xmlns:degrafa="http://www.degrafa.com/2007"> 
<mx:Spacer width="2"/> 
<degrafa:Surface> 
<degrafa :GeometryGroup> 
<degrafa:fill> 
<degrafa:SolidFill id="fill"> 
<degrafa:color>{data.legend}"</degrafa:color> 
</degrafa:SolidFill> 
</degrafa:fill> 
<degrafa :RegularRectangle 
J 
1 
Extends HBox 
Spacer to 
help align box 
SolidFill for 
rectangle 
Color of 
legend item 
Rectangle 
width="20" 
height="20" 
fill="{fill}"/> 
</degrafa:GeometryGroup> 
</degrafa:Surface> 
</mx:HBox> 
The ItemRenderer is extending HBox O because all ItemRenderer objects for the 
DataGrid component must be halo components. Add a Spacer component Q 
to 
help align tire rectangle tire way you want it. The SolidFill component Q 
defines 
the fill color for tire RegularRectangle 
Now that you've finished creating all tire 
visual components for tire pie chart, let's move on to creating the Presenter. A n 
implicitly defined variable is available to tire ItemRenderer named data, which cor-
responds to tire item in tire dataProvider that you're rendering. LTse tiris implicit 
variable to set tire color of tire Fill object Q , which is contained in the legend 
property of tire object. 

156 
CHAPTER 8 
Charting with Dégrafa 
8.3.5 
Presenter for the PieChart 
Now that all the visual components are created for die pie chart, let's create die Pre-
senter. The Presenter for the pie chart becomes more involved tiian any of your previ-
ous ones, but it shouldn't be hard to follow. 
Listing 8.7 
PieChartPresenter.as 
package org.foj.presenter { 
import com.degrafa.paint.SolidFill; 
import org.foj.components.PieChart; 
import mx.collections.ArrayCollection; 
import org.foj.components.PieChartSlice; 
import org.foj.event.EventDispatcherFactory; 
import org.foj.event.PieChartEvent; 
import org.foj.model.PieChartModel; 
public class PieChartPresenter { 
_ 
_ . . 
. 
A 
Private member 
J 
private var _view: PieChart; 
<1—1 
variables 
private var _model:PieChartModel; 
private var _id:String; 
private var _dataProvider:ArrayCollection; 
public function PieChartPresenter(view:PieChart, id:String) 
this._view = view; 
this._model = new PieChartModel!); 
this._id = id; 
Constructor 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(PieChartEvent.DATA_PROVIDER_UPDATED, 
refreshData); 
1 © 
public function set dataProvider(data:ArrayCollection):void { 
_view.legendDataGrid.dataProvider = data; 
this ._dataProvider = data; 
Set property 
i 
dataProvider 
public function get dataProvider():ArrayCollection { 
return this._dataProvider; 
} 
f for 
I 
ider 
G 
private function refreshData(event:PieChartEvent = null):void { 
if (event.id == _id) { 
changeData(event.data); 
, 
Event handler 1 o 
} 
private function changeData(data :ArrayCollection) : void { 
dataProvider = data; 
createSlices(); 
} 
Create slices 
« T 
while (dataProvider.length > _view.pieGroup.numChildren) { 
private function createSlices (): void { 
—1 
method 
J 

Creating a pie chart for fun and profit 
157 
_view.pieGroup.addchild(new PieChartSlice()); 
} 
setLegendColors(); 
redrawSlices(); 
} 
S 
Set legend 
colors on data 
private function setLegendColors():void { 
for (var i:int = 0 ; i < dataProvider.length; i++) 
{ 
dataProvider.getltemAt(i).legend = _model.getLegendColorForlndex(i); 
} 
A 
Redraw slices 
private function redrawSlices (): void { 
<1—I 
after update 
var currentAngle:Number = 0; 
var totalUnits:Number = _model.getTotalUnits(_dataProvider); 
for (var i:int = 0 ; i < _view.pieGroup.numChildren; i++) { 
var slice:PieChartSlice = _view.pieGroup.getChildAt(i) 
as PieChartSlice; 
var legendColor:Number = _model.getLegendColorForlndex(i); 
var arc:Number = i < dataProvider.length ? 
_model.getAngleForltem( 
dataProvider[i].units, totalUnits) : 0; 
// workaround for weird display if only one arc and it's 360 degrees 
arc = arc < 360 ? arc : 359.99; 
1 
Workaround 
redrawSlice(slice, currentAngle, arc, legendColor); 
currentAngle += arc; 
} 
_view.pieGroup.draw(null, null); 
} 
private function redrawSlice (slice: PieChartSlice, 
<a—, 
startAngle:Number, 
A 
Redraw slice 
arc:Number, 
color:Number):void { 
slice.arc.fill = new SolidFill(color, 1); 
slice.arc.startAngle = startAngle; 
slice.arc.arc = arc; 
slice.refresh(); 
} 
You first define private member variables to hold onto references to tire view and tire 
model, the id of tire component this Presenter belongs to, and tire dataProvider for 
your pie chart Q . The constructor Q for this Presenter not only takes in a reference 
to the view, but also is used to bootstrap tire id for the view component because 
there may be multiple pie charts contained in tire application. You also define an 
event listener for tire dataProvider being updated in the view component. Next you 
define a pair of get and set properties Q 
for the dataProvider you leverage to 
update tire dataProvider property of tire legend data grid whenever the data-
Provider for tire pie chart is updated. 

158 
CHAPTER 8 
Charting with Dégrafa 
You then define die event handler metiiod for the event tiiat is fired whenever die 
dataProvider for the view is updated Q . Inside this metiiod you check to see if the id 
of the component firing the event is die same as die id tiiat created tiiis Presenter. 
That way if there are multiple pie chart components, this method can determine 
whether or not it needs to react. 
The c r e a t e S l i c e s © 
metiiod checks to see if the data provider has more ele-
ments contained in it tiian there are pie chart slices in your pie chart. If there are 
more elements in the data provider, it will create more pie chart slices. In die s e t -
LegendColors Q metiiod you iterate through the items in the dataProvider and set 
die legend property of die item to the corresponding color, which you'll get from the 
pie chart model class. 
After all of tiiat, refresh your pie chart with a call to the redraws 1 i c e s Q method. 
This will iterate over the pie chart slices and update die data values, such as die start 
angle of die slice and its arc. You iterate over the pie chart slices instead of die data 
provider because tiiere may be more slices than items in the dataProvider, and this 
will draw the extra slices witii an arc of 0. There is also a little workaround © for when 
tiiere is only a single slice and its arc is 360, which sets its arc to 359.99 so tiiat it would 
draw correctiy. After all of the data for the slice is updated, it is passed into die 
redrawSlice Q metiiod to tell the slice to redraw itself. 
8.3.6 
Model for the PieChart 
Now you only have one piece of die MVP triad to complete for your pie chart. Even 
though the pie chart doesn't need to call out to any remote services, you've still refac-
tored a couple of metiiods that could be considered business logic ratiier than presen-
tation logic and have no need to maintain any kind of state. The following listing 
shows the code for die pie chart model. 
Listing 8.8 
PieChartModel.as 
package org.foj.model { 
import mx.collections.ICollectionView; 
public class PieChartModel { 
private var colors:Array = [ 
0x468966, 
0xFFB03B, 
0xFFF0A5, 
0x999574, 
0x007D9F, 
0x8E2800, 
0x8E28F4, 
0x0528F4, 
0XF42105, 
0x0CF405 
] ; 
Array of colors 
O 
for legend 

Adding your pie chart to the application 
159 
public function getLegendColorForlndex(index:Number):Number { 
return colors[index]; 
r Convenience method 
I 
for getting color 
© 
public function getAngleForltem(units:Number, 
totalUnits:Number):Number { 
return ((((units / totalUnits) * 100) * 360) / 100) ; 
Calculate angle 
© 
for item 
public function getTotalUnits(dataProvider:ICollectionView):Number { 
var total:Number = 0; 
for each(var item:Object in dataProvider) { 
total += item.units; 
Calculate total number 
of items for pie chart 
return total; 
A n array of 10 different hex values © corresponds to tire colors you want the pie chart 
to use for its data points. This number could easily be increased should tire need arise 
for more data points in your graphs; for tiris example this number should suffice. 
Next you define a convenience method © for getting the color value for a specific 
index. The metirod getAngleForltem © takes care of tire calculation for determining 
the size of tire angle for an item based on tire total number of items contained within 
the pie chart and tire number of items passed in. The last metirod you define © 
in 
your model iterates through tire data set passed in and returns back tire total number 
of items for the pie chart. 
8.4 
Adding your pie chart to the application 
That takes care of all of the pieces you need for tire pie chart component. Next you're 
going to need to make changes to tire GraphView components in order to support it. 
For tire example you'll add only a single instance of this pie chart drat you'll be able to 
change the data it's visualizing with a combo box. You could just as easily display each 
of drese visualizations for tire data separately. We chose tiris approach because it's an 
easy way to illustrate tire event handling working for tire pie chart components 
because tire data will be updated for the chart each time you select a different report-
ing point from tire combo box. 
8.4.1 
Updating the GraphView 
To add tire pie chart to tire application, you'll first update the GraphView. In chapter 2 
you created the GraphView with simple placeholder text; now is tire time to implement 
this view. The following listing shows tire updated GraphView component after you 
made tire changes to add tire pie chart. 

160 
CHAPTER 8 
Charting with Dégrafa 
Listing 8.9 
GraphView.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<s:Panel title="Graph View" 
xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
xmlns:components="org.foj.components.*" 
width="100%" 
height="100%" 
creationComplete="init()"> 
< fx:Script> 
<![CDATA[ 
import org.foj.event.EventDispatcherFactory; 
import org.foj.event.UIEvent; 
import org.foj.presenter.GraphPresenter; 
private var _presenter:GraphPresenter; 
private function init():void { 
_presenter = new GraphPresenter(this); 
refreshData(); 
} 
Components 
namespace declaration 
S 
Bootstrap 
presenter 
private function refreshData():void { 
var refreshEvent:UIEvent = new UIEvent(UIEvent.REFRESH_GRAPHS); 
refreshEvent.data = groupByComboBox.value; 
EventDispatcherFactory.getEventDispatcher(). 
dispatchEvent(refreshEvent); 
Refresh button 
event handler 
} 
J 
Group by combo 
box event handler 
private function changeGroupBy(event:Event):void { 
var changeEvent:UIEvent = new UIEvent(UIEvent.REFRESH_GRAPHS); 
changeEvent.data = groupByComboBox.value; 
EventDispatcherFactory.getEventDispatcher().dispatchEvent(changeEvent); 
} 
</fx:Script> 
<s:layout> 
<s:VerticalLayout/> 
</s:layout> 
<mx:HBox> 
<mx:Text text="Issues By: " fontWeight="bold" fontSize="16"/> 
<mx:ComboBox id="groupByComboBox" change="changeGroupBy(event)"/> 
</mx:HBox> 
Group by 
combo box J 
«components:PieChart id="issuesPieChart"/> 
<mx:Spacer height="100%"/> 
<mx:ControlBar> 
<mx:Button id="refreshButton" 
label="Refresh Data" 
click="refreshData()"/> 
</mx:ControlBar> 
Pie chart 
1 » 
Refresh button 
</s:Panel> 

Adding your pie chart to the application 
161 
By now this should be almost second nature. You start by declaring tire namespace for 
your pie chart components Q , and bootstrap tire presenter in tire i n i t method 
Next define a couple of event handler methods for use when tire refresh button is 
clicked Q and when the group by combo box is updated Q . A d d an HBox to contain a 
label component as well as the ComboBox © to switch data field by which tire data is 
grouped in your pie chart © . Last, add a button Q to trigger a refresh on tire data 
being displayed in tire pie chart. 
8.4.2 
Creating a Presenter for the GraphView 
After you've updated tire view component for the GraphView, you need to create tire 
Presenter to support it. 
Listing 8.10 
GraphPresenter.as 
package org.foj.presenter { 
import mx.collections.ArrayCollection; 
import mx.controls.Alert; 
import mx.managers.CursorManager; 
import mx.rpc.AsyncResponder; 
import mx.rpc.AsyncToken; 
import mx.rpc.events.FaultEvent; 
import mx.rpc.events.ResultEvent; 
import org.foj.dto.Issue; 
import org.foj.event.EventDispatcherFactory; 
import org.foj.event.UIEvent; 
import org.foj.model.IssueModel; 
import org.foj.model.GraphModel; 
import org.foj.view.GraphView; 
public class GraphPresenter { 
private var _view:GraphView; 
private var _issueModel:IssueModel; 
private var _model:GraphModel; 
private var _groupByValues:ArrayCollection = 
new mx.collections.ArrayCollection([ 
J 
ArrayCollection for 
group by combo box 
{ label 
{ label 
{ label 
{ label 
"Project", data: "project" }, 
"Status", data: "status" }, 
"Type", data: "type" }, 
"Severity", data: "severity" } 
] ) ; 
public function GraphPresenter(view:GraphView) 
this._view = view; 
this._issueModel = new IssueModel(); 
this._model = new GraphModel(); 
EventDispatcherFactory.getEventDispatcher() 
.addEventListener(UIEvent.REFRESH_GRAPHS, 
J 
Constructor 
EventListener for 
refresh button and 
combo box events 
refreshGraphs); 
_view.groupByComboBox.dataProvider = _groupByValues; 
Set dataProvider for 
. 
group by combo box 
© 

162 
CHAPTER 8 
Charting with Dégrafa 
private function refreshGraphs(event:UIEvent = null) :void { < — 
CursorManager.setBusyCursor(); 
_issueModel.getlssues(new AsyncResponder(getlssuesResult, 
handleError)); 
g 
Event 
I 
handler for 
© 
refresh event 
private function getlssuesResult(event:ResultEvent, 
token:AsyncToken = null):void { 
CursorManager.removeBusyCursor(); 
var issues :ArrayCollection = new ArrayCollection(); 
Event handler 
for result from 
issue model 
O 
for each(var item:Object in event.result) { 
var issue:Issue = new Issue(item); 
issues.addltem(issue); 
view.issuesPieChart.dataProvider = 
_model.groupCollectionBy(issues, 
_view.groupByComboBox.selectedltem.data); 
private function handleError(event:FaultEvent, 
J 
Event handler 
for errors 
token :AsyncToken = null) :void { 
CursorManager.removeBusyCursor(); 
Alert.show(event.message.toString()); 
} 
You start by defining an ArrayCollection of items for die combo box © . This is an 
example of die power of a dynamic language such as ActionScript. Those familiar witii 
JavaScript may recognize this as JSON notation. ActionScript allows you to create 
objects like this witiiout any type of Class declaration, which is great for these one off 
throwaway objects. 
Next you define die constructor © , which takes as an argument the view com-
ponent that belongs to this Presenter. Inside tiiis constructor you instantiate an 
issue model which you use to retrieve die issues from the server side, as well as 
an instance of the GraphModel tiiat you'll create in a moment. You then add an 
event listener for die REFRESH_GRAPHS event © 
and map it to your handler. The 
last tiling your constructor will do is set die dataProvider property of die group-
ByComboBox © so tiiat it has the appropriate display values and data values to func-
tion correctly. 
NOTE 
The two properties you define for die objects being passed to your 
combo box have special meaning to tiiis component. The label property is 
what will be displayed to die user in the combo box. The second property, 
data, will be returned when using die value property for die combo box, 
which is similar to how HTML drop-down boxes work. 
You next define an event handler for when die REFRESH_GRAPHS event is triggered 
© . Inside tiiis handler you make a call to die issue model to fetch die list of issues in 

Adding your pie chart to the application 
163 
the system. In the result event handler for tiris call Q you make a call to tire graph 
model to aggregate tire data and set tire pie chart's dataProvider property to tire 
result from this call. Last you define a generic error handler as you have in tire other 
Presenters Q . 
8.4.3 
Creating the graph model 
Now tire only thing left to do is implement your GraphModel. This model will contain 
only one metirod drat is used to aggregate and format the list of issues retrieved from 
the issue model into a format drat your pie chart can understand. 
Listing 8.11 
GraphModel 
package org.foj.model { 
import mx.collections.ArrayCollection; 
public class GraphModel { 
public function GraphModel() 
} 
{ 
Array to hold 
intermediate groupings 
public function groupCollectionBy(alllssues:ArrayCollection, 
field:String):ArrayCollection { 
var group:Array = new Array(); 
for each(var issue:Object in alllssues) { 
if (group[issue[field]] == null) { 
group[issue[field]] = 1; 
} else { 
group[issue[field]]++; 
} 
} 
Iterate over 
items and create 
associative array 
var result:ArrayCollection = new ArrayCollection() ; 
for (var key:String in group) { 
result.addltem({label: key, units: group[key]}); 
} 
return result; 
J 
ArrayCollection 
for results 
Iterate over 
intermediate results 
and build real results 
The implementation for this metirod is fairly simplistic. First you create an array © 
that will be used to help group and count tire items passed in by tire property name in 
the field variable. Next you iterate over tire collection of issues © . If the array does 
not contain an entry already with the field name, add it and set its value to 1. Other-
wise increment tire value for that field name. Now create an ArrayCollection that 
will contain tire real results that you need to return from this metirod 
Iterate over 
the intermediate results Q creating a dynamic object containing the two properties 
that your pie chart needs to properly display the data: label and units. Last you 
return tire result ArrayCollection. 

1 6 4 
CHAPTER 8 
Charting with Dégrafa 
NOTE 
Concerning dynamically adding properties, recall that in your Pie-
ChartPresenter you are setting a property called legend on die results from 
this function call although you never define die objects being returned as hav-
ing a legend property. This is anotiier example of how powerful, and some-
times dangerous, a dynamic language such as ActionScript can be. Because 
you never defined a property named legend, ActionScript interpreted tiiis to 
mean add a property to tiiis object named legend, which it did, and happily 
continued on its merry way. If you fat fingered that property name somewhere 
else in your code it would make for a difficult bug to track down. 
With all of die components implemented, build and deploy the RIA module to the local 
repository by issuing an mvn install command on the command line witiiin tiiis mod-
ule's root folder. Then change directories to die web module and run die command mvn 
jetty: run-war to start up die Jetty container so you can see your hard work in action. 
Keep in mind tiiat you may want to add the -Dmaven. test. skip=true option to 
that command so Maven won't blow away any issues that you had entered into die 
database. After Jetty starts up, if you don't have any issues created in the application, 
add a few, tiien click the Graph View button in the upper-right corner and you should 
see something similar to figure 8.3. 
« H O 
Flex Bugs 
Q 
Hex !«ot 
FlexBugs Application 
FlexBugs Application 
| Details 'vfcw | GtipitVfew | 
Qrapti Vtew 
By: ¡IHW i-l 
LatMl 
Unira 
• Prated 1 
FtexBLgs 
5 
2 
| RUHh DH1B"1 
Capyrtotu : ÎX-i Fta* Or. Java 
Tr)ftif»mfig tot» from locjlhwt. . 
Figure 8.3 The finished GraphView 

Beyond the example 
165 
Next change the selected value in die combo box at die top of die page and watch 
your graph and legend update to display tire data grouped by a different data point. If 
you click back to tire DetailsView and add or remove issues you can come back to tiris 
view and click the Refresh Data button at tire bottom of the screen and it should 
update your pie chart with tire new data from the database. 
Beyond the example 
W h e n it comes down to it, tirere isn't much that you couldn't visualize using Degrafa 
and some ingenuity and imagination. There are great examples of ways to visualize your 
data at the Degrafa site at http://www.degrafa.org/samples/data-visualization.html— 
everything from bar charts, to gauges, financial data, Gantt charts, even combining 
visualization with maps. There was even a recent presentation at 360|Flex Indy (http:// 
www.flexjunk.eom/2009/05/30/developing-a-smith-chart-using-axiis-and-degrafa/) 
on creating a Smitir Chart using a data visualization framework called Axiis which is 
built on Degrafa. Figure 8.4 shows more examples of data visualization components 
created with Degrafa. 
The Degrafa possibilities are endless; in fact someone has even created a Growl like 
component for use in Flex applications (http://lukesh.wordpress.com/2009/04/04/ 
rawr-flexgrowl-component-available/). Figure 8.5 shows an example of tiris component. 
Figure 8.4 
More examples of visualization components created with Degrafa 

166 
CHAPTER 8 
Charting with Dégrafa 
Title 
Grovwl Title 
Description 
This isa test of the growl notification system. 
Acton Button Label 
Click Me... 
Color (HEX) 
OxOOCCEE 
Notification (Object) 
This can be anything. 
[ Growl 2 (Colored Everything) 
• 
Growl I 
Growl Title 
Figure 8.5 
A Growl like component for Flex 
You can do amazing tilings with Degrafa, whether skinning your application and com-
ponent to look like an iPhone application, or creating a rich user experience such as 
Autodesk's Project Dragonfly shown in figure 8.6. 
Autodesk Project Dragonfly 
DESIGNER 
Electronics 
Flooring 
Furniture 
Figure 8.6 
Autodesk's Project Dragonfly interactive home design software 

Summary 
167 
The Autodesk example, which can be found at http://www.homestyler.com/, is one of 
our favorite examples of what is possible with using the Degrafa library. In the Project 
Dragonfly app, you can do anything from defining your floor plan to moving furni-
ture, doors, countertops, and otiier features interactively in eitiier a 2D top-down view 
or a full 3D view that can be zoomed and rotated. This is a great example of an immer-
sive rich internet experience; the kind of functionality you would never expect to be 
available from a web application. You're limited only by your imagination. 
Summary 
In this chapter we've introduced die Degrafa framework and created a custom pie 
chart component. We've also introduced creating a custom ItemRenderer for dis-
playing sometiiing other than simple text inside of a DataGrid cell. And if tiiat 
weren't enough we also demonstrated some of die dynamic features of die Action-
Script language by creating ad hoc objects on the fly and adding properties to those 
objects at runtime. 
We've also built this component in such a way that you could now easily refactor it 
into a separate reusable library. It wouldn't take much effort to extract the compo-
nents you created in tiiis chapter into its own module and add diem as a dependency 
to any project. 

Desktop 2.0 
wit^L 
This chapter covers 
• Creating a common SWC library 
• 
Making an AIR version of a Flex application 
• Creating a key for signing the application 
• 
Packaging the application for distribution 
• 
Distributing the AIR application via the web 
Although your Flex application is rich and engaging, some power users will want 
a version tiiat tiiey can download and install locally as a desktop application. 
Adobe AIR allows you to easily accomplish this otiierwise daunting task. RIAs blur 
the line between traditional web applications and desktop client applications, 
especially when you can convert the Flex application to a desktop application 
running in the Adobe AIR runtime by changing only a couple of lines of code. 
Yes, you heard tiiat right—only a couple of lines. What other framework allows 
you to reuse tiiis much of the client code, going from a purely web-based experi-
ence to a desktop application? 
You do want to be able to use die Flex version of your application, so you're 
going to refactor all the code tiiat will be common between the Flex application 
and die AIR application that you're going to build into a separate Shockwave 
168 

Creating a common library 
169 
Component (SWC) project. Then you can declare a dependency on diis SWC library 
in both die AIR project and the Flex project. 
After you have the common library project created, create a new Maven project for 
your AIR application, which will in turn create an SWF file diat you'll use to package 
and deploy your AIR application. Then you'll have to create one more project diat will 
contain all of the resources necessary to package your AIR application, such as the cer-
tificate for signing die application and any assets that the application will need, such 
as the icons die OS will use to display the application. 
Last, we'll look at what it takes to distribute the application via a web page and how 
to let users update die version of their application quickly and painlessly. Let's get on 
with the show. 
Creating a common library 
Because the only part of your application that will differ between the Flex version and 
die AIR version will be die main MXML file, you can refactor all the common classes out 
into a separate library. That way you can avoid duplicating classes across die two projects. 
You're also going to extract die main contents of the old Main.mxml into a view 
component so that die new Main.mxml contains only this new view component. This 
will allow you to change the application structure and content in a single place and 
enable you to build both die Flex version of the application and the AIR version witii-
out having to change eitiier of the Main.mxml files in the applications. Figure 9.1 
y 
# 
Fx 
Flex 
Application 
V 
Q 
Adobe AIR 
Application 
Figure 9.1 
High-level view of desired architecture 

170 
CHAPTER 9 
Desktop 2.0 with AIR 
shows at a high level how the Flex application and AIR application relate to the view 
component you're going to extract. You first need to create a new project to contain 
die common elements of die application. 
9.1.1 
Creating an SWC project 
To create your SWC project, you'll use the same archetype that you used to create your 
Flex application in chapter 2. Open a command line and change the current direc-
tory to die root of die FlexBugs project hierarchy, and type the following command. 
mvn archetype:create -DarchetypeGroupId=org.foj \ 
-DarchetypeArtifactld=flex-moj os-archetype \ 
-DarchetypeVersion=l.O-SNAPSHOT \ 
-DgroupId=org.foj \ 
-Dartifactld=flex-bugs-lib \ 
-Dversion=l.O-SNAPSHOT \ 
-DremoteRepositories= 
http://flexonj ava.googlecode.com/svn/flex-bugs/repository 
This will create a new folder in the FlexBugs directory named flex-bugs-lib, which con-
tains die new project. 
Listing 9.1 
f l e x - b u g - l i b pom.xml 
<?xml version="1.0" encoding="UTF-8"?> 
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns= 
"http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 
<modelVersion>4.0.0</modelVersion> 
<parent> 
<artifactld>flex-bugs</artifactld> 
<groupId>org.foj</groupId> 
<version>l.0-SNAPSHOT</version> 
</parent> 
<groupId>org.foj</groupId> 
<artifactld>flex-bugs-lib</artifactld> 
<version>l.0-SNAPSHOT</version> 
<packaging>swc</packaging> 
<name>FlexBugs common library</name> 
<build> 
<sourceDirectory>src/main/flex</sourceDirectory> 
<testSourceDirectory>src/test/flex</testSourceDirectory> 
<finalName>flex-bugs-lib</finalName> 
<plugins> 
<plugin> 
<groupId>org.sonatype.flexmojos</groupId> 
<artifactld>flexmoj os-maven-plugin</artifactld> 
<version>${flexmoj os.Version}</version> 
<extensions>true</extensions> 
<dependencies> 
<dependency> 
<group!d>com.adobe.flex</group!d> 

Creating a common library 
171 
<artifactId>compiler</artifactld> 
<version>4.0.0.7219</version> 
< type>pom</type> 
</dependency> 
</dependenc i e s > 
<configuration> 
<targetPlayer>10.0.0</targetPlayer> 
<locales> 
<locale>en_US</locale> 
</locales> 
</configuration> 
</plugin> 
</plugins> 
</build> 
<repositories> 
<repository> 
<id>flexmojos-repository</id> 
<url>http://repository.sonatype.org/content/groups/public/</url> 
</repository> 
<repository> 
<id>flexonjava-repository</id> 
<url>http : / / f lexonj ava. googlecode. com/svn/repository-;/url> 
</repository> 
</repositories> 
<pluginRepositories> 
<pluginRepos i tory> 
<id>flexmojos-repository</id> 
<url>http://repository.sonatype.org/content/groups/public/</url> 
</pluginRepos i tory> 
</pluginRepositories> 
<dependencies> 
<dependency> 
<groupId>com.adobe.flex.framework</groupId> 
<artifactld>flex-framework</artifactld> 
<version>4.0.0.7219</version> 
< type>pom</type> 
</dependency> 
<dependency> 
<groupId>com.adobe.flex.framework</groupId> 
<artifactId>playerglobal</artifactld> 
<version>4.0.0.7219</version> 
<type>swc</type> 
<classifier>10</classifier> 
</dependency> 
<dependency> 
<groupId>org.degrafa</groupId> 
<artifactld>degrafa</artifactld> 
<version>Beta3.l</version> 
<type>swc</type> 
</dependency> 
</dependenc i e s > 
<properties> 
<flexmojos.version>3.2.0</flexmojos.version> 
</properties> 
</project> 
A 
Dégrafa 
' 
dependency 

172 
CHAPTER 9 
Desktop 2.0 with AIR 
By using the archetype, the only modification you need to make to die pom.xml is to 
add the dependency on Degrafa O 
Everytiiing else is configured for you automati-
cally by the archetype. 
9.1.2 
Extracting common classes 
Now that die project has been created, let's look at which classes need to be moved. As 
we stated at die beginning of this chapter, die only file tiiat is going to be different 
between your Flex application and your AIR version of die application is the 
Main.mxml application file at the root of your source directory. So everytiiing else is a 
prime candidate to move to die new library project. 
NOTE 
If you've checked out die source code from Subversion (renamed 
Apache Subversion), or are using Subversion locally on the project, don't 
copy and paste die files using die command line or a file explorer window. 
You'll have to use the svn move command from either the command line, a 
Subversion client tool such as SmartSVN, or inside die IDE if you're using one; 
otherwise Subversion won't know how to track those files. 
After you've moved die files to die new project, add a dependency on die new library 
project you created in die flex-bugs-ria project. Open the pom.xml file in the 
f lex-bugs-ria project and add die following to die dependencies section. 
<dependency> 
<groupId>org.foj</groupId> 
<artifactld>flex-bugs-lib</artifactld> 
<version>l. C)-SNAPSHOT</version> 
<type>swc</type> 
</dependency> 
Treat the common library just as you do any otiier Maven dependency, whetiier it is 
for a Java project or a Flex project. The only difference being die type element in 
die dependency, which in tiiis instance is swc, because the dependency is an S W C 
library. Now tiiat you've got the common library created, you can now create die 
AIR application. 
9.1.3 
Extracting a MainCanvas 
To avoid having to duplicate die code in the Main.mxml across two separate projects, 
extract the majority of tiiat code into a separate component in the common library 
project. Create a new MXML file in die org. foj .view package in the flex-bugs-lib 
project and enter the code shown in listing 9.2. 
Listing 9.2 
MainCanvas.mxml 
<?xml version="1.0" ?> 
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark 
xmlns:mx="library://ns.adobe.com/flex/halo 
xmlns:view="org.foj.view.*"> 
<~1 
Extends 
O 
Group 

Creating a common library 
173 
<s:layout> 
<s:VerticalLayout/> 
</s:layout> 
<view:Header viewStack="{mainViewStack}"/> 
<mx:ViewStack id="mainViewStack" width="100%" height="100%"> 
<mx:HBox id="viewl" label="Details View"> 
<mx:Spacer width="5"/> 
<mx:HDividedBox width="100%" height="100%"> 
<mx:VDividedBox width="70%" height="100%"> 
<view:MasterView id="masterView" height="60%"/> 
<view:CommentsView id="commentsView" height="40%"/> 
</mx:VDividedBox> 
<view:DetailView id="detailsView" width="30%"/> 
</mx:HDividedBox> 
<mx:Spacer width="5"/> 
</mx:HBox> 
<mx:HBox id="view2" label="Graph View"> 
<mx:Spacer width="5"/> 
<view:GraphView width="100%" height="100%"/> 
<mx:Spacer width="5"/> 
</mx:HBox> 
</mx:Viewstack> 
<view:Footer/> 
</s:Group> 
The majority of tire code in MainCanvas.mxml is extracted from Main.mxml. You start 
by declaring this component as extending tire Group component Q , and set its layout 
vertical Q . Then paste in the rest of the code from the Main.mxml. 
Listing 9.3 
Main.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark 
xmlns:mx="library://ns.adobe.com/flex/halo 
xmlns:view="org.foj.view.*" 
minWidth="950" 
minHeight="600" 
height="100%" 
width="100%"> 
<view:MainCanvas id="app" width="100%" height="100%" /> 
</mx:Application> 
Listing 9.3 shows tire code drat is left over in Main.mxml after you refactored every-
thing out into the MainCanvas. Start by changing the declaration for tire Application 
back to use tire mx:Application tag O - There appears to be a bug in tire latest beta 
version of tire Flex 4.0 SDK that ultimately prevents tire application from running 
3 
Set layout 
J 
Changed back to 
mx:Application 
J 
MainCanvas 

174 
CHAPTER 9 
Desktop 2.0 with AIR 
using the newer Spark version of the Application tag. Next add in die MainCanvas © 
and set its height and width to 100% so it fills available space in die application win-
dow. Now let's continue and create die AIR application. 
9.2 
Creating the AIR 
application 
As you may have guessed, die first tiling needed to create die AIR application is to cre-
ate a Maven project to hold it. Just as you did earlier, open up a command line, navi-
gate to die root folder for die project, and enter die following command. 
mvn archetype:create -DarchetypeGroupId=org.foj \ 
-DarchetypeArtifactld=flex-moj os-archetype \ 
-DarchetypeVersion=l.O-SNAPSHOT \ 
-DgroupId=org.foj \ 
-Dartifactld=flex-bugs-air \ 
-Dversion=l.O-SNAPSHOT \ 
-DremoteRepositories= 
http://flexonj ava.googlecode.com/svn/flex-bugs/repository 
This will create a new module in die FlexBugs project named f l e x - b u g s - a i r . List-
ing 9.4 shows die pom.xml tiiat is generated for die f l e x - b u g s - a i r project. 
Listing 9.4 
f l e x - b u g s - a i r pom.xml 
<?xml version="1.0"?> 
<proj ect> 
<parent> 
<artifactld>flex-bugs</artifactld> 
<groupId>org.foj</groupId> 
<version>l.0-SNAPSHOT</version> 
</parent> 
<modelVersion>4.0.0</modelVersion> 
<groupId>org.foj</groupId> 
<artifactld>flex-bugs-air</artifactld> 
<packaging>swf</packaging> 
<version>l.0-SNAPSHOT</version> 
<name>FlexBugs Air application</name> 
<properties> 
<flexmojos.version>3.3.0</flexmojos.version> 
</properties> 
<build> 
<sourceDirectory>src/main/flex</sourceDirectory> 
<testSourceDirectory>src/test/flex</testSourceDirectory> 
<resources> 
<resource> 
<directory>$ {basedir} /src/main/resources-;/directory> 
</resource> 
<resource> 
<directory>$ {basedir} / target/generated-resources-;/directory> 
<filtering>true</filtering> 
</resource> 
</resources> 

Creating the Grails application 
175 
<finalName>flex-bugs-air</finalName> 
<plugins> 
<plugin> 
<groupId>org.sonatype.flexmoj os</groupId> 
<artifactld>flexmojos-maven-plugin</artifactld> 
<version>${flexmoj os.version}</version> 
<extensions>true</extensions> 
<configuration> 
<contextRoot>flexbugs</contextRoot> 
<targetPlayer>10.0.0</targetPlayer> 
<locales> 
<locale>en_US</locale> 
</locales> 
</configuration> 
<dependencies> 
<dependency> 
<groupId>com.adobe.flex</groupId> 
<artifactId>compiler</artifactld> 
<version>4.0.0.7219</version> 
< type>pom</type> 
</dependency> 
</dependenc i e s > 
</plugin> 
</plugins> 
</build> 
<repositories> 
<repository> 
<id>flexmojos-repository</id> 
<url>http://repository.sonatype.org/content/groups/public/</url> 
</repository> 
<repository> 
<id>flexonjava-repository</id> 
<url>http: / / f lexonj ava. googlecode. com/svn/repository-;/url> 
</repository> 
</repositories> 
<pluginRepositories> 
<pluginRepos i tory> 
<id>flexmojos-repository</id> 
<url>http://repository.sonatype.org/content/groups/public/</url> 
</pluginRepository> 
</pluginRepositories> 
<dependencies> 
<dependency> 
<groupId>com.adobe.flex.framework</groupId> 
<artifactld>air-framework</artifactld> 
<version>4.0.0.7219</version> 
< type>pom</type> 
</dependency> 
<dependency> 
<groupId>org.foj</groupId> 
<artifactld>flex-bugs-lib</artifactld> 
<version>l.0-SNAPSHOT</version> 
<type>swc</type> 
</dependency> 
AIR SDK 
O 
dependency 
< ~ l k 
Common library 
G 
dependency 

176 
CHAPTER 9 
Desktop 2.0 with AIR 
<dependency> 
<groupId>com.adobe.flex.framework</groupId> 
<artifactld>flex-framework</artifactld> 
<version>4.0.0.7219</version> 
< type>pom</type> 
</dependency> 
<dependency> 
<groupId>com.adobe.flex.framework</groupId> 
<artifactId>playerglobal</artifactld> 
<version>4.0.0.7219</version> 
<classifier>10</classifier> 
<type>swc</type> 
</dependency> 
</dependenc i e s > 
</project> 
As before, you have to make only minor modifications to die pom.xml for die AIR 
module. You add the dependency on die AIR framework © and the dependency on 
die common library you extracted earlier Q . Now you can create die Main.mxml for 
die AIR application. 
Listing 9.5 
AIR Main.mxml 
<?xml version="1.0" encoding="utf-8"?> 
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
xmlns:s="library://ns.adobe.com/flex/spark" 
xmlns:mx="library://ns.adobe.com/flex/halo" 
xmlns:view="org.foj.view.*" 
minWidth=" 1024" 
.... . 
,. .. 
A 
WindowedApplication 
U 
minHeight="768" 
r r 
height="100%" 
width="100%"> 
MainCanvas 
<view:MainCanvas id="app" width="100%" height="100%" /> 
^ ^ 
Main 
</s :WindowedApplication> 
The code for die AIR application is almost identical to die code necessary for the Flex 
application with die one major difference being tiiat the AIR application extends die 
WindowedApplication O instead of Application as the Flex application does. Last 
you need to add die MainCanvas to die AIR application Q . Next, let's look at how to 
go about creating the application installer. 
9.3 
Packaging the AIR 
application 
So now you've got the AIR version of die sample application created, and tiiat will 
generate a different SWF tiiat you can use to package into an AIR application. To dis-
tribute this as an AIR application you need to create a project tiiat will generate an 
AIR application installer for the AIR application. This will allow you to distribute die AIR 
application to the users to install by either distributing the .air file that is created, or 
as you'll see later in tiiis chapter, by installing it via the web. 

Distributing the AIR application 
177 
NOTE 
Until now we've been able to get by without having to download and 
install die FlexSDK. Unfortunately because of licensing restrictions, Sonatype 
cannot publish tire ADT JAR to tire Maven repository. T o get around tiris, 
download and install tire Flex4 SDK from Adobe's site at http://www.adobe. 
com/go/flex4_sdk_download. 
To package tire AIR application, you use tire AIR Developer Tool (ADT). Because tiris 
tool is not a part of tire open source SDK, you'll need to manually install tire JAR file, 
found in tire lib directory of your FlexSDK install, to tire local Maven repository using 
the following command. 
mvn install:install-file -Dfile=adt.jar -DgroupId=com.adobe \ 
-Dartifactld=adt -Dversion=4.0.0 -Dpackaging=jar -DgeneratePom=true 
After you've got drat library installed into tire local repository you're ready to move on 
to creating tire project that will contain all of tire configuration and assets necessary to 
package tire AIR application. 
9.3.1 
Creating a project to package the AIR app 
O n e last time you need to generate a new Maven project drat will contain all tire assets 
for creating the AIR application installer package. Open a command line and navigate 
to tire root of tire project and enter tire following command: 
mvn archetype:create -DarchetypeGroupId=org.foj \ 
-DarchetypeArtifactld=flex-mojos-archetype \ 
-DarchetypeVersion=l.O-SNAPSHOT \ 
-DgroupId=org.foj \ 
-Dartifactld=flex-bugs-air-package \ 
-Dversion=l.O-SNAPSHOT \ 
-DremoteRepositories= 
http://flexonj ava.googlecode.com/svn/flex-bugs/repository 
This will create a new project folder named flex-bugs-air-package. Inside this proj-
ect you'll see the standard folder layout drat you've been using all along. You can 
delete tire src/main/flex folder and the src/test folders, as you won't need them for 
this project. 
9.3.2 
Generating a certificate 
To create an AIR application installer you first generate a certificate for signing the 
application. The certificate is necessary because you now are running an application 
locally on the computer, which gives the application access to local resources that it 
would not have had in a simple Flex application, such as tire filesystem. In light of 
that, Adobe decided to take measures to secure tire AIR installer by requiring you to 
sign it with either a self-signed certificate, which we'll be using, or a digital certificate 
that you would purchase from a certificate authority (CA). That way nobody can tam-
per witir the application and introduce malicious software to unsuspecting users. 

178 
CHAPTER 9 
Desktop 2.0 with AIR 
For the example, you'll create a self-signed certificate, but if you're distributing the 
application to the masses, it would be a good idea to purchase a certificate from a CA 
such as Thawte (http://www.tliawte.com). To generate the certificate you'll use the 
ADT utility included with the FlexSDK located in the bin directory of die SDK. The 
basic usage for this tool is: 
adt -certificate -cn name [-ou org_unit][-o org_name][-c country] \ 
key_type pfx_file password 
This is die basic usage of die ADT utility that you'll use to generate the certificate. 
Here is an explanation of the abbreviations and options: 
• 
-cn: The common name of the new certificate 
• 
-ou: The organizational unit (optional) 
• 
-o: The organization name (optional) 
• 
-c: The two-letter country code (optional) 
• 
key_type: The type of key used to create die certificate, 1024-RSA or 2048-RSA 
• 
pfx_file: The name of the certificate file to be created 
• 
password: The password for die certificate you are creating 
To generate your own self-signed certificate, open a command prompt and enter die 
following command: 
adt -certificate -cn FlexBugs 1024-RSA flexbugs.pfx java4ever 
This will create a certificate file called flexbugs.pfx witii a password of java4ever. You 
now need to copy this file into die src/main/resources folder of die f l e x - b u g s - a i r -
package project so that you can sign the application installer with it. Now let's see how 
you add icons to die application. 
9.3.3 
Adding icons 
Adobe AIR applications allow you to define icons tiiat the OS displays in die dock/ 
taskbar, programs folder, file explorer window, and more. If you don't provide a cus-
tom icon set, die OS will use a default icon. There are four common sizes of icons you 
can include for the application: 
• 
1 6 x 1 6 
• 
3 2 x 3 2 
• 
4 8 x 4 8 
• 
128x128 
The icon we've chosen for the application, which is shown in fig-
ure 9.2, was found at die Wikimedia Commons site at http:// 
commons.wikimedia.org/wiki/File:Green_bug.svg. 
You can download the icon graphic from die Wikimedia Com-
mons site and create the icon sizes you need for the application 
Figure 9 2 The ic< 
using your favorite image editing software, or if you'd prefer, use 
for the application 

Distributing the AIR application 
179 
the files included in die code download for tiris book. There is a PNG image file for 
each corresponding icon size as follows. 
• 
iconlô.png for the 1 6 x 1 6 icon 
• 
icon32.png for the 32 x 32 icon 
• 
icon48.png for the 48 x 48 icon 
• 
iconl28.png for dre 128 x 128 icon 
After you've created the icon files, copy them into the f l e x - b u g s - a i r - p a c k a g e proj-
ect in dre src/main/resources/icons folder. Now that you've got all dre assets you 
need to create dre AIR package, let's look at the AIR configuration necessary to pack-
age dre application. 
9.3.4 
Adding the AIR configuration 
T h e last thing you need to do to package dre application as an AIR applica-
tion is to create tire application configuration file. To do tiris, create a file named 
air-app.xml and place it in tire src/main/resources folder of the f l e x - b u g - a i r -
package project. 
The AIR application descriptor file is used to define various properties for tire AIR 
application. The following are a few of the things you can configure using the applica-
tion descriptor: 
• 
The required AIR runtime version 
• 
A unique identifier for the application 
• 
The filename and path for installing tire air application 
• 
The application version 
• 
The size and display properties of tire application window 
• 
Any application-specific icons 
You can learn more about tire other features of tire application descriptor drat we haven't 
mentioned at Adobe's website, in tire AIR documentation located at http://help.adobe, 
com/en_US/AIR/1.5/devappshtml/WS5b3ccc516d4Ibf351 e63e3d 118666ade46-7ffl. 
html. Listing 9.6 shows the configuration file you'll use for tiris application. 
Listing 9.6 
air-app.xml 
<?xml version= "1.0" encoding= "UTF-8 " ?> 
A I R application namespace 
<application xmlns="http://ns.adobe.com/air/application/1.5"> 
<id>org.foj.FlexBugs</id> 
J 
<filename>FlexBugs</filename> 
<name>FlexBugs For Desktop</name> 
<version>l.0-SNAPSHOT</version> 
<copyright> 
Copyright &copy; FlexOnJava 2009 http://manning.com/allmon 
</copyright> 
A 
Application 
' 
metadata 

180 
CHAPTER 9 
Desktop 2.0 with AIR 
<initialWindow> 
<content>flexbugs.swf</content> 
<title>FlexBugs For Desktop</title> 
<width>1024</width> 
<height>7 68</height> 
<minSize>1024 768</minSize> 
</initialWindow> 
<icon> 
<imagel6xl6>icons/iconl6.png</imagel6xl6> 
<image32x32>icons/icon32.png</image32x32> 
<image48x48>icons/icon48.png</image48x48> 
<imagel28xl28>icons/iconl28.png</imagel28xl28> 
</icon> 
Initial window 
O 
Application icons 
</application> 
The root element of the application descriptor defines die version of die AIR applica-
tion you're creating, in this case version 1.5 Q . Next come elements defining the 
application metadata Q 
starting with a unique identifier for the application. The 
application installer uses this identifier to determine if die application has been previ-
ously installed on die computer. Then you define a filename and a descriptive name 
for the application. You define your version for die application to be 1.0-SNAPSHOT, 
which also happens to match the version in die pom.xml. The two versions are unre-
lated; it makes sense to keep tiiese two versions in sync. 
The next section in the application configuration deals with how die application 
behaves when launched 
Start by defining die initial content displayed in die appli-
cation when it starts up as being the SWF for the AIR application. The title of the win-
dow is set to FlexBugs For Desktop, and you've configured die application to start with a 
1024 x 762 window and also made that be die minimum size the application will run. 
As a final step you configure the application to use the icons created earlier Q . 
9.3.5 
Configuring the package build 
Before you can build and run die application you need to tweak die pom.xml that 
was generated for die f l e x - b u g s - a i r - p a c k a g e module. The pom.xml is ratiier large 
so we'll break it down and discuss each plugin separately; the first part is shown in list-
ing 9.7. The discussion continues through listing 9.11. 
Listing 9.7 
f l e x - b u g s - a i r - p a c k a g e pom.xml 
<project xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/maven-v4_0_0.xsd"> 
<modelVersion>4.0.0</modelVersion> 
<groupId>org.foj</groupId> 
<artifactld>flex-bugs-air-package</artifactld> 
<version>l.0-SNAPSHOT</version> 

Distributing the AIR application 
181 
<name>FlexBugs Air Package</name> 
<packaging>pom</packaging> 
<build> 
1, Packaging type 
^ ^ p 
exec-maven-plugin 
J 
Phase to execute in 
1> 
Goal to run 
Executable 
<plugins> 
<plugin> 
<groupId>org.codehaus.mojo</groupId> 
<artifactld>exec-maven-plugin</artifactld> 
<version>l.1.l</version> 
<executions> 
<execution> 
<phase>package</phase> 
<goals> 
<goal>exec</goal> 
</goals> 
<configuration> 
<executable>j ava</executable> 
<workingDirectory> 
${basedir}/target/air 
</workingDirectory> 
<arguments> 
<argument>-classpath</argument> 
<classpath/> 
<argument>com.adobe.air.ADT</argument> 
<argument>-package</argument> 
<argument>-storetype</argument> 
<argument>pkcsl2</argument> 
<argument>-storepass</argument> 
<argument>j ava4ever</argument> 
<argument>-keystore</argument> 
<argument>certs/flexbugs.pfx</argument> 
<argument>${basedir}/target/air/flexbugs.air</argument> 
<argument>air-app.xml</argument> 
<argument>flexbugs.swf</argument> 
<argument>icons/iconl6.png</argument> 
<argument>icons/icon32.png</argument> 
<argument>icons/icon48.png</argument> 
<argument>icons/iconl28.png</argument> 
</arguments> 
</conf iguration> 
Command line arguments 
0 
</execution> 
</executions> 
</plugin> 
Start tire POMjust as you did for the shared BlazeDS configuration in chapter 5, setting 
the packaging type to pom O - Unfortunately tire Flex-Mojos plugin you've been using 
all along for building the Flex application does not include a plugin for packaging the 
AIR application, so you have to use the ADT utility provided by Adobe in the SDK. To 
do this use a Maven plugin called exec-maven-plugin Q . Configure tire plugin to be 
executed during tire package phase of tire Maven lifecycle 
and to execute tire exec 
goal O 
You'll be executing tire Java executable Q to utilize tire ADT utility © 
we 
described earlier. The first set of arguments you pass into the ADT utility deal with 

182 
CHAPTER 9 
Desktop 2.0 with AIR 
the certificate you generated earlier in this chapter. Next specify the output file, the 
location of the AIR application configuration, the SWF file to include in the AIR appli-
cation, and die application icons. 
Listing 9.8 
f l e x - b u g s - a i r - p a c k a g e pom.xml (continued) 
<plugin> 
<groupId>org.apache.maven.plugins</groupId> 
<artifactld>maven-assembly-plugin</artifactld> 
<executions> 
<execution> 
<id>Package AIR distribution</id> 
<goals> 
<goal>single</goal> 
</goals> 
<phase>package</phase> 
<configuration> 
<descriptors> 
<descriptor> 
src/main/assembly/resources.xml 
</descriptor> 
</descriptors> 
</configuration> 
</execution> 
</executions> 
</plugin> 
J 
1, 
Assembly 
plugin 
Goal to 
execute 
Phase to 
execute in 
1 > 
Location of resource 
descriptor 
Listing 9.8 shows the configuration for creating an assembly for our AIR installer. It 
looks similar to the configuration you used in chapter 5. The plugin configuration 
starts by defining itself as die maven-assembly-plugin O 
You'll be calling die single 
goal © during die package phase of die Maven lifecycle 
Last you tell die plugin 
where to find die assembly descriptor Q . 
Next you'll configure Maven to copy die files you need to a working directory for 
die ADT utility for use when building die AIR installer. 
Listing 9.9 
f l e x - b u g s - a i r - p a c k a g e pom.xml (continued) 
Maven-resources-plugin '"J 
J 
Phase to 
execute in 
<plugin> 
<groupId>org.apache.maven.plugins</groupId> 
<artifactId>maven-resources-plugin</artifactld> 
<executions> 
<execution> 
<id>air</id> 
<phase>generate-resources-;/phase> 
<goals> 
<goal>copy-resources-;/goal> 
</goals> 
<configuration> 
<outputDirectory>${basedir}/target/air</outputDirectory> 
< 
<resources> 
0 u t p u t directory 
to copy resources to 
O 
J 
Goal to 
execute 
<resource> 

Distributing the AIR application 
183 
<directory>${basedir}/src/main/resources«/directory> 
</resource> 
</resources> 
</configuration> 
</execution> 
</executions> 
</plugin> 
Resource directory 1 
Earlier you configured the ADT utility to use a working directory of target/air to do 
its work in. To get all tire resources you need into drat directory leverage tire 
maven-resources-plugin O - Configure tire plugin to execute its copy-resources 
goal Q during tire generate-resources phase of tire Maven lifecycle © and tell it 
to copy the resources from tire src/main/resources directory © 
to tire target/air 
directory Q . 
•1 
gin 
O 
Maven-dependency-plugin 
Goal to execute 
^ ^ P 
Phase to execute in 
Usi 
if 
Using artifact item 
Listing 9.10 
f l e x - b u g s - a i r - p a c k a g e (continued) 
<plugin> 
<artifactld>maven-dependency-plugin</artifactld> 
<executions> 
<execution> 
<id>unpack-air-assets</id> 
<goals> 
<goal>copy</goal> 
</goals> 
<phase>generate-resources</phase> 
<configuration> 
<artifactltems> 
<artifactltem> 
<groupId>org.foj</groupId> 
<artifactld>flex-bugs-air</artifactld> 
<version>l.C)-SNAPSHOT</version> 
<type>swf</type> 
<overWrite>false</overWrite> 
<outputDirectory> 
${basedir}/target/air 
</outputDirectory> 
<destFileName>flexbugs.swf</destFileName> 
</artifactltem> 
</artifactltems> 
</configuration> 
</execution> 
</executions> 
</plugin> 
Listing 9.10 shows tire configuration for unpacking the AIR SWF to be used by tire ADT 
utility when building tire AIR installer. To do this use tire maven-dependency-plugin 
just as you do for copying tire Flex SWF into the WAR before packaging. Configure 
this plugin to execute the copy goal © during tire generate-resources phase of tire 
Maven lifecycle © . It's going to copy the artifact you define in its configuration © . 
You tell tire plugin to copy tire artifact to tire target/air directory © so that it can be 
included when creating tire AIR installer. 
J 
Output directory 

1 8 4 
CHAPTER 9 
Desktop 2.0 with AIR 
Listing 9.11 
f l e x - b u g s - a i r - p a c k a g e pom.xml (continued) 
<plugin> 
<artifactld>maven-clean-plugin</artifactld> 
<version>2.2</version> 
<configuration> 
<filesets> 
<fileset> 
<directory>target</directory> 
</fileset> 
</filesets> 
</configuration> 
</plugin> 
</plugins> 
</build> 
<dependencies> 
<!-- Flex ADT tool --> 
<dependency> 
<groupId>com.adobe</groupId> 
<artifactld>adt</artifactld> 
<version>4.0.0</version> 
<type>jar</type> 
</dependency> 
<!-- Project Dependencies --> 
<dependency> 
<groupId>org.foj</groupId> 
<artifactld>flex-bugs-air</artifactld> 
<version>l. C)-SNAPSHOT</version> 
<type>swf</type> 
</dependency> 
</dependenc i e s > 
</project> 
Listing 9.11 shows the rest of the pom.xml for our packaging project. You configure 
one last plugin, the maven-clean-plugin, for cleanup. Q . The only tiling left is to 
declare the dependencies. The first is on die ADT utility 
so you can use that to build 
die AIR installer. The second is on die SWF artifact for the AIR application 
so that 
you can include it in die AIR installer. 
With all of those pieces in place, you should now be able to build and install 
die AIR application. Open a command line and navigate to the main project 
folder, dien build die application by typing mvn clean i n s t a l l . This will go 
through and build each of die project modules. W h e n it's finished, change into 
die flex-bugs-web directory so you can start up the web application using the mvn 
j e t t y : run-war command. 
After the web application is running, open a file explorer window and navi-
gate to the target/air directory in die f l e x - b u g s - a i r - p a c k a g e project. Inside this 
folder diere should be a file named flexbugs.air. This is die installer for die AIR 
application. Launch the installer and you should be presented witii a screen that 
looks like figure 9.3. 
Maven-clean-plugin 
1 » 
ADT dependency 
AIR dependency 

Distributing the AIR application 
185 
Application Install 
Are you sure you want to install this 
application to your computer? 
Application: 
Flex Bug; For Desktoe 
Cancel 
Install 
instilling applications may present a security risk to you and your 
computer. Install only from sources that you trust. 
x 
Publisher Identity 
UNKNOWN 
The publisher of this application cannot be determined. 
x 
System Access: 
UNRESTRICTED 
This application may accessvourflle system and [he Internet, 
which may put your computer at risk. 
Figure 9.3 
Installing the 
AIR application 
Because you're using a self-signed certificate, the installer warns you drat it's not sure 
who wrote tire application and whetirer or not they're trustworthy. After you click the 
Install button you will be presented witir a screen that looks like figure 9.4. 
Application Install 
Figure 9.4 
Choosing where 
to install the 
application 
FlexBugs For Desktop 
Insulation Pnftrenw 
Q 
Start application after Installation 
Installation Location: 
/Applications 
Cancel 
Continue 

186 
CHAPTER 9 
Desktop 2.0 with AIR 
FlexBugs Application 
frrrtMHIiOjit 
Figure 9.5 
The finished AIR application 
O n the second screen of the installer, you're asked if you'd like to launch die appli-
cation when it's finished installing, and where you'd like to install the application. If 
you checked the checkbox indicating that the application should start after installa-
tion, the application should launch and you should see something tiiat resembles 
figure 9.5. 
Now you've got a version of the FlexBugs application that works outside die 
browser but you're stuck witii the task of distributing this application to the users. In 
die next section you'll take a look at the task of creating a web page to allow you to dis-
tribute die AIR application using an installer badge, which allows users to install the 
application simply by clicking the badge. 
9.4 
Distributing the AIR 
application 
One of die benefits to using a web application is the ease of distributing the appli-
cation to the people who will use it. Adobe has enabled you to streamline die distri-
bution and installation process for AIR applications by providing a SWF tiiat will 
allow the users to install die AIR application by clicking a badge icon tiiat you can 
place on any web page. In this next section you'll create an installer badge for the 
sample application. 

Distributing the AIR application 
187 
9.4.1 
Assembly 
configuration 
To distribute die AIR application, you first get the application installer into a place 
where the users can access it via a web browser. You already have tiris mechanism in 
place. You can leverage tire existing web application and copy tire AIR artifact into tire 
WAR file that will be deployed to the application server, which also happens to be 
where we would create the download page. To do this you'll take an approach similar 
to drat you used to handle the shared BlazeDS configuration in chapter 5. Because 
Maven doesn't know how to handle .air files, you can leverage tire assembly plugin. 
Create a file called resources.xml inside die src/main/assembly folder of tire f l e x -
bugs-air-package project. This is tire file that tells Maven which files to include in 
the assembly. 
Listing 9.12 
resources.xml 
<assembly> 
<id>resources</id> 
<formats> 
<format>zip</format> 
</formats> 
<includeBaseDirectory>false</includeBaseDirectory> 
<fileSets> 
<fileSet> 
<directory>target/air</directory> 
<outputDirectoryx/outputDirectory> 
<includes> 
<include>**/*.air</include> 
</includes> 
</fileSet> 
</fileSets> 
</assembly> 
Similar to what you did earlier, configure tire assembly to be of type zip O - The 
main difference between tiris resource configuration and what you did in chapter 5 
is drat you're configuring the assembly to contain only tire .air file which is created 
by tire ADT utility Q . Next you need to update the build to be able to unpack 
the assembly. 
9.4.2 
Updating the build 
To get tire AIR installer into tire web application you need to be able to extract 
the AIR application from tire assembly you just configured. To do tiris you'll be 
creating another execution in the maven-dependency-plug in section similar to tire 
way in which you get tire shared BlazeDS configuration into tire WAR. Listing 9.13 
shows tire configuration you'll add to the pom.xml in tire flex-bugs-web project. 
Listing 9.13 
f l e x - b u g s - w e b pom.xml 
<?xml version="1.0" encoding="UTF-8"?> 
<project xmlns="http://maven.apache.org/POM/4.0.0" 
A 
Format for the 
assembly 
A 
•"< 
-ail 
Include only 
air files 

188 
CHAPTER 9 
Desktop 2.0 with AIR 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/maven-v4_0_0.xsd"> 
<build> 
<defaultGoal>install</defaultGoal> 
<finalName>flexbugs</finalName> 
<plugins> 
<plugin> 
<artifactld>maven-dependency-plugin</artifactld> 
<executions> 
<execution> 
<id>unpack-blaze-config</id> 
</execution> 
<execution> 
<id>unpack-air-package</id> 
O 
Unpack 
<goals> 
J 
dependencies 
Where to unpack the file 
0 
<goal>unpack-dependencies</goal> 
<—I 
a 
phase to 
</goals> 
J 
execute in 
<phase>generate-resources-;/phase> 
<configuration> 
<outputDirectory> 
$ {pro j ect. build, directory} / $ {pro j ect. build, finalName} 
<1—' 
</outputDirectory> 
<includeGroupIds>${proj ect.groupId}</includeGroupIds> 
<includeArtif actlds> 
<—, 
Artifact to 
flex-bugs-air-package 
Q 
include 
</includeArtifactlds> 
<includeClassifiers>resources</includeClassifiers> 
<excludeTransitive>true</excludeTransitive> 
<excludeTypes>j ar,swf</excludeTypes> 
</configuration> 
</execution> 
</executions> 
</plugin> 
</project> 
First you create another execution inside die maven-dependency-plugin configura-
tion which you configure to execute the unpack-dependencies goal Q during the 
generate-resources phase of die Maven lifecycle © . You want die plugin to extract 
die AIR application and put it in die working directory tiiat Maven uses when packag-
ing up the WAR file © . You also need to configure die plugin to make sure tiiat it 
includes only die a r t i f a c t l d you want it to unpack Q . 
Next, you need to add the dependency for die assembly in the dependencies sec-
tion of the pom.xml in the flex-bugs-web project. A d d die following dependency to 
die POM: 

Distributing the AIR application 
189 
<dependency> 
<groupId>org.foj</groupId> 
<artifactld>flex-bugs-air-package</artifactld> 
<version>l.0-SNAPSHOT</version> 
<classifier>resources</classifier> 
<scope>provided</scope> 
<type>zip</type> 
</dependency> 
With tliat in place, you can move on to creating tire download page, which will contain 
the installer badge. 
9.4.3 
Creating a download badge 
You're going to create another JSP page in tire flex-bug-web project to contain tire 
install badge. Create a file inside tire src/main/webapp folder called download, jsp, 
and enter tire code shown in listing 9.14. 
Listing 9.14 
download.jsp 
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> 
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 
1 http: / /www. w3 . org/TR/xhtmll/DTD/xhtmll-strict. dtd 1 > 
<html xmlns=1http://www.w3.org/1999/xhtml1 lang='en' xml:lang=1 en 1> 
<head> 
<title>FlexBugs AIR application</title> 
<meta http-equiv=1 Content-Type 1 content=1 text/html; charset=iso-8859-l1/> 
<script type=1 text/javascript1 src=1js/swfobject.js1></script> 
< — 
<script type="text/javascript"> 
II < • [CDATA [ 
. 
.^bject I 
javascript include 
V 
var flashvars = {}; 
< 
flashvars.airversion = '1.5'; 
flashvars. appname = 'Flex Bugs'; 
Flashvars 
© 
flashvars.appurl = 
'${pageContext.request.scheme}://${pageContext.request.serverName}: 
${pageContext.request.serverPort}${pageContext.request.contextPath}/ 
flexbugs.air'; 
flashvars.imageurl 
'images/badge-icon.png' 
swfobj ect.embedSWF('badge.swf', 
'badge_div', 
'205', 
' 170 ' , 
'9.0.0', 
null, 
flashvars); 
// ]]> 
</script> 
</head> 
<body> 
<div id='badge_div'> 
To install this application you will need the 
Call 
embedSWF 
J> 
Placeholder div 

190 
CHAPTER 9 
Desktop 2.0 with AIR 
<a href=1http://www.adobe.com/products/flashplayer/1> 
Adobe Flash Player 
</a> 
</div> 
</body> 
</html> 
The download page called swfobject is using a JavaScript library that makes embed-
ding Flash objects in our web page easier Q . The web page can be found at Google 
Code (http://c0de.g00gle.c0m/p/swf0bject/) if you're interested in learning more 
about it. Next you define a variable called f lashvars to hold the necessary configura-
tion items © . Then you use a little JSTL expression language to help build a fully qual-
ified link for die AIR application adding tiiat to the f l a s h v a r s . The badge installer 
seems to require a fully qualified link to die AIR installer, so we are forced to use this. 
The beauty of using die JSTL instead of hard coding die URL, is that no matter where 
you deploy tiiis application, that link will always work; you don't have to update it for 
each environment you deploy to. 
Next you tell die badge installer which icon to display in die badge so tiiat you can 
customize the badge witii your own application's branding. You tiien create the badge 
W O O 
FlexBugs AIR application 
I 
I 
||| + Bhttp://localhost:80SQ/flexbugs/down[oad.jsp 
C | (O,' Gc 
FlexBugs Download 
Click on the badge below to install the F l e x B u g s application 
FlexBufis 
Figure 9.6 
The install badge in action 

Summary 
191 
using the swfobject library by calling the embedSWF function Q and pass arguments 
telling it first which SWF file to create tire badge from. Next you tell tire badge which 
div element in tire JSP to replace with tire content of the badge, tire size of the badge 
and tire minimum version of Flash that the application supports. If you were provid-
ing an installer to tire user to install the AIR framework from, you could specify that 
argument here as well. Last you provide default information in the div that lets tire 
user know that this page requires Flash to use tire installer badge, and a link to down-
load the Flash runtime Q . 
Now that you have all of tire pieces in place, open a command prompt and navigate 
to tire root of tire project and build tire application by typingmvn clean install. When 
that is done, change directories into the flex-bugs-web project and start up tire Jetty 
container by running mvn jetty:run-war. When tire container has finished loading, 
open a browser and navigate to http://localhost:8080/ilexbugs/downloadjsp and you 
should see a screen similar to that shown in figure 9.6. 
When you click tire install badge it should prompt you to install tire AIR application. 
Summary 
You now have successfully broken free of the browser and created an application that 
power users can use standalone. Even though it took a lot of configuration, you'll 
notice that you never had to change much of tire application code to get this to work. 
There are not many programming languages or frameworks that will allow you to so 
easily reuse tire code to create both a web-based client and a desktop client. This is 
one of tire attractive features of both tire Flex framework and the Adobe AIR frame-
work. You'll discover that many of tire Flex applications can be translated into AIR 
applications with minimal effort. 
The Adobe AIR SDK offers much more functionality than you can accomplish with 
the Flex framework alone, so if you're going to create an AIR application, don't limit 
yourself to tire Flex components and APIs. The AIR application framework offers you 
the ability to store information in an embedded database so that you could potentially 
create an offline capable version of tire application that could sync up the local data-
base with tire master database when tire network becomes available again. 
You also have the ability to read and write files to tire filesystem and even define 
new file associations so that they automatically open with tire application. A fine exam-
ple of this is the Balsamiq application (http://www.balsamiq.com/), which we've been 
using throughout the book to create our wireframes for tire sample application. This 
application allows you to save and export tire wireframes in various formats, and even 
defines a file association such that whenever you try to open a file with the extension 
.bmml, it will by default launch tire Balsamiq application. 
In tire next chapter we're going to show you how to test the application to ver-
ify that it does what you expect it to do. We'll introduce you to the FlexLTnit4 
library and also the mock-as3 library for mocking tire dependencies. Now, let's get 
on to tire testing. 

mtirmyour\ 
Flexmpp ma tio, 
This chapter covers 
• 
Unit testing with Flexllnit 
• 
Mock testing with mock-as3 
• 
Leveraging the hamcrest-as3 matchers 
• Generating a test report 
Every good programming book includes a discussion of unit testing. Whether you 
follow the practice of test-driven development, which the autiiors advocate, or write 
your tests after die fact, an automated suite of unit tests is a valuable accompani-
ment to your application. A comprehensive suite of unit tests proves to your cus-
tomer that the code you wrote does what it's supposed to do. It also provides 
developers making changes to your code both confidence that die changes will not 
break anything and up-to-date documentation in the form of unit tests. Written 
documentation can easily get out of sync with die implemented code; a good suite 
of passing unit tests should always be in sync with die code. You can tiiink of your 
unit tests as a form of executable documentation that developers can use in the 
years to come. 
192 

Unit testing and TDD 
193 
10.1 Unit testing and TDD 
If you're not familiar with the practice of Test Driven Development (TDD), figure 10.1 
shows the basic workflow. In a nutshell, you start by writing a failing unit test, then 
write only enough implementation code to make it pass. W h e n you get a passing test, 
you start the process over again. 
Writing code tiiis way has a couple of interesting side effects. The most obvious 
one is diat your code is more likely to be written in a testable manner, because you're 
starting with the tests first. A not so obvious effect of practicing TDD is that you add 
only code that is absolutely necessary, and less speculative coding occurs. There are a 
great many books about test-driven development available, including Test Driven: 
Practical TDD and Acceptance TDD for Java Developers, by Lasse Koskela (http://manning. 
com/koskela/). 
It's still easy to produce code tiiat you don't need in your application. Because you 
didn't let the tests drive die code, you'll have extraneous code, but it will be well 
tested extraneous code. One good way to ensure that you have only code and features 
that are relevant and required in your application is to practice a more refined tech-
nique of test-driven development called Presenter First, die main motivation behind 
the Model View Presenter pattern we introduced in chapter 4. The tiiinking behind die 
Presenter First approach is that your Presenter tests map closely to your user stories, 
and if you write only tests that map to your user stories, you'll avoid much of die gold 
plating that we developers are often guilty of—sneaking in features tiiat we think 
would be useful, but don't appear in any of die requirements set forth by die cus-
tomer. For a more thorough explanation of the Presenter First approach to develop-
ment, read die article in Better Software magazine at http://www.atomicobject.com/ 
files/BigComplexTested_Feb07.pdf 
Test fails j m 
Write code 
r 
Test passes 
Refactor 
V* 
M ® 
Figure 10.1 
TDD workflow 

1 9 4 
CHAPTER 10 
Testing your Flex application 
In this chapter we use the unit testing framework FlexUnit, and more specifically tire 
latest incarnation of the FlexUnit4, which brings the framework more in line with cur-
rent unit testing frameworks available for Java such as JUnit4. Features introduced 
with this newest version of FlexUnit include: 
• 
N o need to inherit from the TestCase base class 
• 
The addition of annotations for adding metadata to your test cases 
• 
Easier asynchronous testing 
• 
Introduction of Hamcrest matchers 
For a comprehensive listing of all the new features in FlexUnit4, check out the docu-
mentation at http: // docs.flexunit.org/index.php?titie=FlexUnit4FeatureOverview. We 
won't get into a lengthy discussion on FlexUnit and how to use tire FlexUnit frame-
work; instead, we'll discuss the features as we introduce them in our examples. 
One of tire main purposes of unit testing is to try to narrow your scope of testing as 
much as possible, which is why it's called unit testing. To do that you can use a mock 
testing framework to remove any external dependencies in the class you're testing. By 
injecting these mocks into your class during unit testing, you're able to test how your 
class interacts with its external dependencies without relying on tire existence of those 
external dependencies. The mock testing framework we'll be utilizing in this chapter 
is called mock-as3. The mock-as3 project is hosted via Google Code at http://code. 
google. com/p / mock-as3 /. 
NOTE 
The mock-as3 framework is no longer being maintained but has been 
replaced by tire Mockolate framework which can be found at http://github. 
com/drewbourne/mockolate. 
To get started unit testing in our Flex application, we'll need to make some changes to 
tire project. Let's get started. 
10.2 
Updating the project 
Before we can start writing our first unit test, we'll need to update tire pom.xml for 
our flex-bugs-lib project to add the necessary unit testing libraries as dependencies 
and also tire unit testing support for tire FlexMojos plugin that we're using for our 
builds. The following listing shows tire updates that we need to add to our pom.xml. 
Listing 10.1 
Updated pom.xml 
<?xml version="1.0" encoding="UTF-8"?> 
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/xsd/maven-4.0.0.xsd" 
xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 
<build> 
<sourceDirectory>src/main/flex</sourceDirectory> 
<testSourceDirectory>src/test/flex</testSourceDirectory> 
Test source 
directory 

Updating the project 
195 
</build> 
<dependencies> 
<dependency> 
<groupId>org.sonatype.flexmoj os</groupId> 
<artifactld>flexmojos-unittest-support</artifactld> 
<version>${flexmoj os.version}</version> 
<type>swc</type> 
<scope>test</scope> 
</dependency> 
<dependency> 
< 
<groupId>com.adobe.flexunit</groupId> 
<artifactld>flexunit</artifactld> 
<version>4.0-beta-2</version> 
<type>swc</type> 
<scope>test</scope> 
</dependency> 
< 
<dependency> 
< 
<groupId>org.hamcrest</groupId> 
<artifactld>hamcrest-as3</artifactld> 
<version>l.0</version> 
<type>swc</type> 
<scope>test</scope> 
</dependency> 
< 
<dependency> 
< 
<groupId>mock-as3</groupId> 
<artifactId>mock-as3</artifactld> 
<version>l.0.0</version> 
<type>swc</type> 
<scope>test</scope> 
</dependency> 
< 
n 
FlexMojos 
testing support 
A 
FlexUnit 
dependency 
A 
Hamcrest 
matcher 
dependency 
A 
Mock-as3 
dependency 
</dependencies> 
<reporting> 
<plugins> 
<plugin> 
<1—I 
<groupId>org.apache.maven.plugins</groupId> 
<artifactld>maven-surefire-report-plugin</artifactld> 
</plugin> 
<1—I 
</plugins> 
</reporting> 
<properties> 
<flexmojos.version>3.4.2</flexmojos.version> 
</properties> 
</project> 
0 
Test report 
plugin 
The first section of tlie pom.xml that needs to be modified is die section that tells 
Maven where your test sources are. You override die default location o f s r c / t e s t / j ava 

196 
CHAPTER 10 
Testing your Flex application 
with the location of s r c / t e s t / f l e x O to more closely follow the convention you're fol-
lowing for your source code. Next you add a dependency on the FlexMojos unit testing 
support library Q . Then you add dependencies on die FlexUnit4 
die Hamcrest 
matcher library 
and die mock-as3 library Q . You may also notice that you've 
defined die scope of these dependencies as having test scope. That way they will not be 
included in die artifact that ultimately is deployed to your application server when you 
deploy your application. The last thing you added to die pom.xml is the reporting 
plugin 
which gives you the ability to generate test reports for your unit tests. 
The dependencies for die unit testing support and FlexUnit4 exist on the 
Sonatype Maven repository; however die Hamcrest and mock-as3 dependencies do 
not. You can eitiier download tiiose libraries and install them manually using the mvn 
install: install-file plugin or use die Maven repository we have set up for the 
sample code in our book using the Google Code repository. 
Now that you've got the project set up and ready for testing, you'll start looking at 
how to unit test your Flex application. To illustrate this you're going to test die 
MasterPresenter, MasterView, and IssueModel. These classes are simple enough for 
us to keep our examples short and to die point, yet tiiey contain enough functionality 
to properly illustrate most of the situations you'll need to test. To start you'll begin 
with testing the MasterPresenter. 
10.3 Testing the Presenter 
We've chosen to start our unit testing examples with testing the Presenter, because, as 
we stated earlier, die Presenter typically maps closest to your user stories, and die Pre-
senter will often be die most complex part of die M V P triad because it has more 
responsibility than die otiier two parts. First you create the unit test class for your 
MasterPresenter. Create the package structure for die org. foj .presenter package 
under die src/test/flex folder inside die flex-bugs-lib project. Next create the 
MasterPresenterTest. as class inside this org. foj .presenter package. The first part 
of the code for die MasterPresenterTest class is shown in listing 10.2. 
Listing 10.2 
MasterPresenterTest.as 
package org.foj.presenter { 
public class MasterPresenterTest { 
public var target:MasterPresenter; 
public var mockery:Mockery; 
public var view:MasterView; 
public var model:IssueModel; 
public var mockResponder:IResponder; 
public var dispatcher:EventDispatcher; 
[Before(async, timeout=5000)] 
public function setUp():void { 
^ ^ 
Testing 
target 
Mocks and 
mock control 
> 
^ ^ p 
EventDispatcher 
setUp method 

Testing the Presenter 
197 
mockery = new Mockery(); 
mockery.prepare(MasterView); 
mockery.prepare(IssueModel); 
dispatcher = EventDispatcherFactory.getEventDispatcher(); 
Async.proceedOnEvent(this, mockery, Event.COMPLETE, 5000); 
For those familiar with Java and JUnit tiris should look familiar. You name your test 
class widr the convention of <ClassName>Test because tiris is tire default pattern that 
Maven will use to look for test classes when running your tests during tire build pro-
cess. You start with defining a few private member variables for tire class you're trying 
to test O , tire mock control and the mock objects you'll need to interact with 
and 
your good friend tire event dispatcher © . Because most of your classes will use tire 
event dispatcher from the EventDispatcherFactory, you'll also need to use tiris in 
your tests to ensure that your events are properly dispatched and handled. 
Next you create a setup method that will be run at tire beginning of each test in 
your class Q . You named your method setup merely out of habit—you could name it 
whatever you like. In the previous version of FlexUnit you had to override tire setup 
method from the base class; now tire framework uses tire [ B e f o r e ] annotation to 
know which method to use for its setup. You also add more metadata to tire annota-
tion to tell FlexUnit that tiris test will use some asynchronous functionality and that it 
should time out after 5 seconds, meaning the test will fail if it runs longer. This illus-
trates one of tire potential pitfalls of testing with FlexUnit. If your unit tests are run-
ning long, you may end up with false positive failures and you'll find that periodically 
you'll have tests that will time out and fail for no reason. 
Inside tire setup method you set up a mock control by instantiating a new Mockery 
class. Then you tell tire mock control to prepare tire mocks by calling prepare () for 
each class that you'll be mocking. The last step is to tell the test to wait until tire mock 
control has finished preparing by calling tire proceedOnEvent method and setting tire 
event you want to proceed on to the complete event from your mockControl. 
Then you define the counterpart to your setup method, tire teardown method Q . 
As you did for tire setup, you follow tire convention of calling tiris method tearDown 
out of habit. The [ A f t e r ] annotation tells the framework to run this after every test 
method run. The only tiring that you do inside your teardown method is to call v e r -
i f y on your mocks to ensure that everything you expected tire mocks to call was 
indeed called. 
[After] 
public function tearDown():void { 
mockery.verify(model, view); 
1 > tearDown method 

198 
CHAPTER 10 
Testing your Flex application 
10.3.1 Testing refresh issues 
Now that you've got the skeleton for your MasterPresenterTest written, let's start 
with your first test. The first piece of functionality you're going to test would probably 
come from a user story, the first part of which would read something like tiiis: 
In order to ensure that the issues I'm viewing are up to date, when I click the Refresh 
button, the application should retrieve die issues from die server and refresh the 
data grid with the results. 
The important part of tiiis story is the when. The action identified in die when state-
ment will need to be tested by your Presenter tests. The when tiiat you will be testing is 
the part of the story that states when I click the Refresh button, the application should retrieve 
the issues from the server. 
Listing 10.3 shouldCallGetlssuesFromModel 
[Test] 
<i—O 
Test annotation 
public function shouldCallGetlssuesFromModel ():void { 
model = mockery, strict (IssueModel) as IssueModel; 
I M 
Create 
f 
view = mockery.strict(MasterView) as MasterView; 
\ 
mocks 
mockery.mock(model) .method("getlssues") .withArgs(IResponder) .once; 
<1—i 
target = new MasterPresenter (view, model); 
<]—, 
Mock expectation 
© 
1 
var event:UIEvent = new UIEvent( 
uiEvent. REFRESH_ISSUES_BUTTON_CLICKED 
I ® 
Create target 
© 
Create and dispatch event 
dispatcher.dispatchEvent(event); 
^ 
r 
} 
You start by annotating your test method witii the [Test] annotation © . FlexUnit4 
utilizes this [Test] annotation to know which methods are your test metiiods. Next 
you create your mocks by calling die strict method on your mock control © passing 
in the class tiiat you want to mock. You use strict mocks here so that if any metiiods are 
called on your mocks tiiat you don't explicidy set up, your mock control will fail the 
test in the teardown when you call v e r i f y . You tiien set up the expectation on your 
mock © . The expectation syntax for mock-as3 is fairly self-explanatory, and most of 
die time will look similar to this. 
Let's stop to analyze this line of code. The first method you're going to mock is 
on die model, which is die mock for die IssueModel class. You're expecting your code 
to call the getlssues metiiod, and you're going to pass in an argument of type 
IResponder and expect it only once. You could as easily put a concrete value or object 
in tiiis expectation, and die mock framework would test die equality of what die 
metiiod is called with. In tiiis instance you can't easily try to perform an exact match on 
the IResponder; you're more interested in whetiier or not the method is called. 
Next you create your target by calling die constructor and passing in die mocks 
tiiat you created © . Last you simulate die behavior tiiat your view will exude. You cre-
ate a new event of type REFRESH_ISSUES_BUTTON_CLICKED and dispatch it 0 . 

Testing the Presenter 
199 
For your code to compile, you need to change tire constructor for your Master-
Presenter class to allow injection of both tire View and the Model. 
Listing 10.4 
Updated M a s t e r P r e s e n t e r 
public function MasterPresenter! 
view:MasterView = null, 
model:IssueModel = null) { 
if (model != null) { 
this._issueModel = model; 
} else { 
this._issueModel = new IssueModel(); 
} 
this._view = view; 
} 
You first have to add in tire ability to pass in an IssueModel to tire MasterPresenter as 
well as the MasterView Q . You also are defaulting it to null, which means that you 
don't need to change any of tire code that you wrote earlier that doesn't pass in this 
extra parameter. That's one of tire nice things about being able to specify default 
parameters. Next you add a block of code to set the issueModel to either tire value 
passed into tire constructor, or instantiate a new one if nothing was passed in © . Last 
you set tire view that was passed in 
Now you can run the unit test and it should pass. O p e n a command line and navi-
gate to tire flex-bugs-lib folder and type mvn test. After all of tire messages scroll by, 
you should see tire results from tire tests being run. 
10.3.2 Issues result event test 
Now you can test the second half of the user story from the previous section. To 
find tire next when in that user story, you could rewrite tire story to read more 
like this: 
In order to ensure that the issues I'm viewing are up-to-date, when I click the Refresh 
button, the applica tion should retrieve the issues from the server and when the result comes 
back from the server, refresh the data grid with the results. 
In an ideal world you would be able to capture the responder object passed into your 
mock in tire test you wrote; unfortunately, as of this writing, tire mocking framework 
that we're using doesn't support that. To overcome this you need to scope the meth-
ods tlrat your result events call to the public scope so that you can call it directly. List-
ing 10.5 shows tire test for tire result from tire call to the getlssues method on tire 
IssueModel. 
I A 
Constructor 
If 
parameters 
Setting model 
^ ^ P 
Setting view 

200 
CHAPTER 10 
Testing your Flex application 
Listing 10.5 shouldSetlssuesPropertyOnView 
[Test] 
public function shouldSetlssuesPropertyOnView ():void { 
model = mockery.strict(IssueModel) as IssueModel; 
view = mockery.strict(MasterView) as MasterView; 
< i — O 
Test annotation 
f 
Create 
mocks 
var issues : ICollectionView = new ArrayCollection () ; 
< — © 
Mock result data 
mockery.mock(view).property("issues").withArgs(ICollectionView).once; 
target = new MasterPresenter(view, model); 
6 
Mock property 
access 
Create 
var resultEvent: ResultEvent = 
w 
target 
new ResultEvent(ResultEvent.RESULT, false, true, issues); 
target.getlssuesResult(resultEvent); 
} 
Simulate result event 
n 
n 
You start as you did in the last test by annotating die metiiod witii the [Test] annota-
tion Q . Next create your mocks by calling strict on the mock control 
create an 
ArrayCollection that will be included in the resultEvent 
Not only can you mock 
method calls on your mocks, but you can also mock property access. You mock out 
access to die set property issues Q . In tiiis case we're saying that the issues property 
will be set witii some instance of ICollectionView. With all of the expectations set, 
you can now instantiate your Presenter © with your mocks. Last you create a Result-
Event Q to simulate the model calling die event handler and call die getlssues-
Result passing in the ResultEvent. 
10.3.3 Testing issue removed 
The next tiling you want to test is what happens when an issue is deleted. This feature 
may be described sometiiing like the following: 
In order to remove issues that may be invalid or incorrect, when the user clicks the remove 
issue, the application should delete the selected issue. 
Again, the important part of the user story is what's described in die when part of the 
description. In this case you want to simulate some other part of die application dis-
patching an event indicating that the Delete Issue button has been clicked. 
Listing 10.6 shouldCallRemovelssueOiiModel 
[Test] 
public function shouldCallRemovelssueOnModel ():void { 
var selectedlssue: Issue = new Issued; 
selectedlssue.id = 123; 
model = mockery.strict(IssueModel) as IssueModel; 
view = mockery.strict(MasterView) as MasterView; 
mockery.mock(model).method("removelssue") 
.withArgs(selectedlssue.id, IResponder).once; 
target = new MasterPresenter(view, model); 
1> 
Test annotation 
Mock 
objects 
1 > Mock expectation 
< — © 
Instantiate target 

Testing the Presenter 
201 
var event:UIEvent = new UIEvent(UIEvent.REMOVE_ISSUE_BUTTON_CLICKED); 
event.data = selectedlssue; 
dispatcher.dispatchEvent (event) ; 
Create and dispatch event n 
This test follows the same pattern as the first one you wrote. You start by annotating 
your test with the [Test] annotation O - Next you create an issue local variable that 
you'll utilize in your mock expectation. Then you create your mocks by calling the 
strict method on the mock control 
After you've created your mocks you can 
define your expectation of the removelssue method on die model being called 
This expectation will take a value in trying to match the value of the id property on 
the issue you created in die test, as well as an argument of type IResponder. Next you 
instantiate your test target Q . In this test you're passing along data witii the event that 
you need to dispatch Q , so you instantiate a new event and set its data property to die 
issue you created in your test and dispatch it. 
10.3.4 Remove issue result test 
Now diat you have the first part of die Remove Issue functionality complete, you need 
to test what happens when you receive the ResultEvent from the IssueModel. This 
test will be similar to the way you tested die result for the Refresh Issues button being 
pressed earlier. 
Listing 10.7 
shouldResetGridAndFireSelectedlssueChangedEvent 
[Test(async, timeout=8000) ] 
< s — 0 Test annotation 
public function shouldResetGridAndFireSelectedlssueChangedEvent ():void { 
model = mockery.strict(IssueModel) as IssueModel; 
view = mockery.strict(MasterView) as MasterView; 
he 
Create 
mocks 
mockery.mock(view).method("resetlssuesGrid"). 
withNoArgs.once; 
mockery.mock(model).method("getlssues"). 
withArgs(IResponder).once; 
Async.proceedOnEvent(thi s, 
dispatcher, 
UIEvent.SELECTED_ISSUE_CHANGED, 
target = new MasterPresenter(view, model); 
A 
Mock 
' 
expectations 
8000); J 
J 
Expected 
event 
Instantiate 
target 
I 
var resultEvent:ResultEvent = new ResultEvent(ResultEvent.RESULT); 
target.removelssueResult(resultEvent); 
Call the target 
The first tiling you may notice is that die [Test] annotation Q looks more like the 
setup method you defined in listing 10.2, with the extra metadata stating that tiiis 
method will use die Async .proceedOnEvent metiiod and tiiat it should time out 
after 8 seconds. Next you create your mocks as before, by calling die strict metiiod 
on the mock controls Q , along with setting the mock expectations that you'll call 
the resetlssuesGrid metiiod on the view (you will need to define tiiis method to 

202 
CHAPTER 10 
Testing your Flex application 
get the test to compile), and that you'll call the g e t l s s u e s metiiod on die model 
to refresh die data grid 
The call to g e t l s s u e s will occur as a result of die SELECTED_ISSUE_CHANGED event 
diat you're expecting to be dispatched in the event handler, and you define that 
expectation next Q . This call to tire proceedOnEvent method allows you to define an 
expectation on the test method that will fail unless the Presenter dispatches the event 
you pass in as an argument to the proceedOnEvent method. You'll notice that we're 
using tire dispatcher from the EventDispatcherFactory in this expectation as well. 
This is because your application will use this to dispatch its events, and in order for 
your test to work as expected, it will need to utilize tire same event dispatcher that the 
application will use. 
The next step is to instantiate your Presenter passing in tire mocks you created at 
tire beginning of this unit test Q ; after that, you create a ResultEvent Q to call the 
method that you're testing and invoke it. 
Now all that's left to do is to run tire tests again. Open a command line and navi-
gate to tire f l e x - b u g s - l i b project and run tire mvn t e s t command. W h e n the smoke 
clears, you should be presented with a message telling you that you now have four 
passing tests. You have merely scratched the surface with unit testing the Presenters in 
this application; tire examples we presented should be enough firepower for you to 
continue to write all tire tests necessary for tire Presenters. We're now going to move 
along to testing your View components. 
10.4 Testing the View 
Now that we've shown how to test your Presenters, it's time to move on and unit test 
your View components. W h e n we say unit test your View components, we're not talking 
about in browser functional testing. For that level of testing you'll want to look at 
either tire FunFX (http://funfx.rubyforge.org/) testing framework or the Selenium-
Flex-API (http://c0de.g00gle.c0m/p/sfapi/). Instead we're talking about testing tire 
public API exposed by your View components to tire rest of tire application. Again, 
you'll start by creating the test class. 
Listing 10.8 MasterViewTest 
package org.foj.view { 
public class MasterViewTest { 
private var target:Masterview; 
private var eventDispatcher:EventDispatcher; J 
Test target 
Event 
dispatcher 
[Before (async,ui) ] 
method 
J 
setUp 
public function setUp():void { 
target = new MasterView () ; 
Q 
Initialize 
target, initialize () ; 
<—1 
target 
eventDispatcher = EventDispatcherFactory.getEventDispatcher(); 

Testing the View 
203 
} 
} } 
You start this test by defining a couple of private fields for your test target Q and your 
event dispatcher Q . Then you define a setup metiiod Q to be called before each test 
that runs. Inside of die setup metiiod you instantiate a new MasterView and initialize 
it by calling the initialize metiiod Q . You do this because M X M L components have 
a lifecycle of tiieir own, and when your application starts and components are added 
to your application, Flex will call these lifecycle methods and generate events. In 
order for your component to properly initialize itself and all of the child components, 
you need to manually call die initialize method. 
One tiling you may notice is that die test for your View component doesn't 
include any mocks. Because tiiis View component doesn't have any external depen-
dencies, this test will be more of a stateful test as you assert that the state of die 
components contained witiiin your view change as you expect them to when calling 
the public metiiods. 
10.4.1 Testing the issues set property 
The first thing you'll be testing in the MasterView is the set property for the issues 
data grid. By default any child components added to your M X M L component have 
public access applied to them, so you could easily only allow your Presenter to access 
the child components direcdy because it has a reference to the View. The not-so-good 
news is not only is tiiis not easily testable, it violates the Law of Demeter (http:// 
c2.com/cgi/wiki?LawOfDemeter) by allowing your Presenter to call metiiods and 
properties on the child components of your View. 
Listing 10.9 
issuesPropertySetsDataProviderOnDataGrid 
[Test] 
public function issuesPropertySetsDataProviderOnDataGrid(): 
var dataProvider:ArrayCollection = new ArrayCollection(); 
var issuel: Issue = new Issued; 
issuel.id = 1; 
dataProvider.addltem(issuel); 
var issue2: Issue = new Issued; 
issue2.id = 5; 
dataProvider.addltem(issue2); 
target.issues = dataProvider; 
assertThat (target.masterViewDataGrid. dataProvider, 
<1— 
equalTo(dataProvider)); 
| 
} 
The code for your first view test is shown in listing 10.9. Start your test by creating an 
ArrayCollection with a couple of Issue objects to call the issues set property with Q . 
>id { 
O 
Dummy data 
Call issues 
© 
set property 
Assert the state 

204 
CHAPTER 10 
Testing your Flex application 
Then you call the issue set property and set it to the ArrayCollection you created © . 
Next you assert drat tire dataProvider property of tire masterViewDataGrid is equal 
to dre ArrayCollection you passed in © . This last line shows the Hamcrest matcher 
syntax, and how readable it makes your assertions. You can clearly gather from that 
line of code what it you expect to happen. 
10.4.2 Testing resetlssueGrid 
function 
There is one other public method that you want to test for tire MasterView, the 
r e s e t l s s u e s G r i d method. This method will make sure that there is no selected item 
on tire data grid by resetting its selected index property to -1. 
Listing 10.10 
resetlssuesGridRemovesAllDataFromDataGrid 
[Test] 
public function resetlssuesGridRemovesAHDataFromDataGrid():void { 
var dataProvider:ArrayCollection = new ArrayCollection!); 
<3 
var issuel: Issue = new Issued; 
issuel.id = 1; 
dataProvider.addltem(issuel); 
var issue2: Issue = new Issued; 
issue2.id = 5; 
dataProvider.addltem(issue2); 
^ 
0 
Dummy 
data 
target.issues = dataProvider; 
target.masterViewDataGrid.selectedlndex = 1; 
< i — © 
Set issues 
< — © 
Select issue 
target. resetlssuesGrid () ; 
<1—© 
Call resetlssuesGrid 
assertThat(target.masterViewDataGrid.selectedlndex, equalTo(-l)); 
Assert grid reset 
You start this test by creating an ArrayCollection to simulate your data grid hav-
ing data © , then set tire issues property of your view to the sample data you 
created © . Next you select an item on the grid by setting tire selectedlndex 
property of tire datagrid to 2 © . Then you call tire method you're testing © 
and 
assert that the selectedlndex of tire DataGrid is set back to -1 © . Although we 
discourage reaching into tire insides of the View's child components to directly 
modify properties in your production code, you don't have a choice when it comes 
to testing tire View. 
10.4.3 Testing refresh issues button click 
Now that you have tire public API tested, you still need to test that certain events are 
fired when things such as button clicks occur. The first of these tests, testing for tire 
Refresh Issues button click, is shown in listing 10.11. 

Testing the View 
205 
Listing 10.11 ref reshButtonClickTriggersUIEvent 
J 
[Test(async)] 
public function refreshButtonClickTriggersUIEvent():void { 
Async.proceedOnEvent(thi s, 
eventDispatcher, 
UIEvent.REFRE SH_IS SUE S_BUTTON_C LICKED, 5000) 
Test 
annotation 
proceedOnEvent 
target.refreshlssuesButton.dispatchEvent( 
new MouseEvent(MouseEvent.CLICK)); 
1> 
Simulate 
mouse click 
This is a fairly simple test because you don't have to do any kind of setup to run it. You 
start by annotating the test with die [Test] annotation and add die extra bit of meta-
data to tell FlexUnit that this test will utilize the asynchronous features Q . Next you 
set the expectation for the REFRESH_ISSUES_BUTTON_CLICKED event Q . Last you simu-
late your button click by having the refreshlssuesButton dispatch a MouseEvent of 
type CLICK © . That's all tiiere is to it. Next we're going to test something more com-
plex, the item click on die DataGrid. 
10.4.4 Testing DataGrid item select 
The last test we're going to write for the View before we move on to writing tests for 
the model is for when a user clicks an item in die DataGrid. This test will require a bit 
more setup tiian the last test you wrote, as you need to have data in your DataGrid for 
the event handler to work. 
Listing 10.12 
selectingDataGridltemTriggersUIEvent 
< i — O 
Test annotation 
J 
Expected 
event 
[Test(async)] 
public function selectingDataGridltemTriggersUIEvent():void { 
Async.proceedOnEvent(thi s, 
eventDispatcher, 
UIEvent.SELECTED_ISSUE_CHANGED, 5000); 
var dataProvider:ArrayCollection = new ArrayCollection(); 
var issuel: Issue = new Issued; 
issuel.id = 1; 
dataProvider.addltem(issuel); 
var issue2: Issue = new Issued; 
issue2.id = 5; 
dataProvider.addltem(issue2); 
target.issues = dataProvider; 
target.masterViewDataGrid.dispatchEvent( 
new ListEvent(ListEvent.ITEM_CLICK, false, false, 1, 2)); 
Simulate ItemClick 
A 
Sample 
data for 
DataGrid 
i c k ^ b 

206 
CHAPTER 10 
Testing your Flex application 
Again you start by annotating your test with tire [Test] annotation and adding tire 
async parameter Q - Next set your expectation that the SELECTED_ISSUE_CHANGED 
event will be dispatched Q . Now you need to create an ArrayCollection and popu-
late it with a couple of Issue objects, allowing you to set the dataProvider property 
on tire DataGrid © so that tire DataGrid will contain tire item that you say you're 
going to click. Last you simulate the user clicking an item in tire DataGrid by having it 
dispatch a ListEvent of type ITEM_CLICK © . The other parameters in tire constructor 
for the ListEvent determine four things: whether tire event should bubble up 
through tire parent containers, whether or not it's cancellable, tire column that you 
clicked, and which row you clicked. In this instance we're simulating tire user clicking 
tire first column of tire second row of tire DataGrid. 
Now you should be able to run tire tests again by opening up a command line, nav-
igating to your project folder and typing mvn test. After all of the messages scroll by 
you should be presented with a message saying that all tests passed. If not, the results 
of tire unit tests are located in tire target/surefire-reports directory. Now that we've 
got tire View tests working, let's move on to tire Model tests. 
10.5 Testing the Model 
Now tlrat we've got the Presenter tests as well as tire View tests well under way, it's 
time to look at writing tests for tire Model. The tests you'll be writing for the Model 
will be somewhat similar to those you used to test tire Presenter in tlrat we'll be test-
ing the interaction between tire Model and tire RemoteService by utilizing mock 
objects and setting expectations on tire executions performed on them. You'll start 
as you did for the Presenter and View tests by creating the test class. 
Listing 10.13 
IssueModelTest.as 
package org.foj.model { 
public class IssueModelTest { 
private var target:IssueModel; 
private var service:MocklssueService; 
private var token:AsyncToken; 
private var responder:IResponder; 
private var mockery:Mockery; 
Private 
fields 
[Before(async,timeout=5000)] 
public function setUp():void { 
mockery = new Mockery(); 
mockery.prepare(MocklssueService); 
mockery.prepare(AsyncToken); 
mockery.prepare(IResponder); 
n 
Setup 
method 
Async.proceedOnEvent(this, mockery, Event.COMPLETE, 5000); 

Testing the Model 
207 
[After] 
public function tearDown():void { 
mockery.verify(service, token); 
} 
} } 
This test class starts much like the Presenter test. You define private fields for die tar-
get class you're testing, the mocks that you'll need to interact with, and your mock 
control Q . Inside your setup method, you instantiate your mock control and prepare 
the various mocks tiiat you'll be using, and set die expectation to allow the test to con-
tinue only when the COMPLETE event is dispatched, ensuring that your mocks are ready 
to be used © . Last you define your tearDown metiiod and put a call to die v e r i f y 
metiiod on your mock control inside 
10.5.1 Mocking and RemoteObject 
Before you can start writing your tests for the IssueModel, there is a caveat regard-
ing die RemoteObject class. As we've mentioned before, ActionScript is a fairly pow-
erful dynamic language. For tiiose familiar with Groovy or Ruby you'll likely be 
familiar with the concept of having die ability to create fluent domain specific lan-
guages (DSLs) by leveraging die method missing functionality. ActionScript also has 
this ability, and the AbstractService class, which all of your remoting components 
HTTPService, WebService, and RemoteObject derive from, takes advantage of tiiis to 
allow you to call the remote object methods as if they were defined by these remot-
ing components. 
ActionScript dynamic classes, proxies, and method missing 
To learn more about how to use dynamic classes and implement something like 
methodjnlssing in ActionScript, there is a good article on the FlexOnRalls blog at 
http://flexonralls.net/?p=95,which should get you started. 
The problem witii this arises when you try to mock calls to these dynamic metiiods 
that don't exist in die RemoteObject class. It would appear tiiat there is a limitation on 
how the mocking framework instruments and creates mock objects—only die metii-
ods that exist in the class definition that you're mocking are able to be called. If die 
metiiods don't exist, die metiiod call will be captured by die callProperty method 
and exhibit die same dynamic behavior tiiat it would in your production code, which 
is not what you want. To get past this, define a stub class tiiat will extend die Remote-
Object class. Inside this class you will stub out die metiiods that your remote service 
exposes, then you'll mock this MocklssueService class inside of your tests so you can 
properly set and verily your expectations. 
Teardown 
© 
method 

208 
CHAPTER 10 
Testing your Flex application 
Listing 10.14 
MocklssueService.as 
package org.foj.model { 
import mx.rpc.AsyncToken; 
import mx.rpc.remoting.RemoteObj ect; 
public class MocklssueService extends RemoteObject { 
public function getAll():AsyncToken { 
return null; 
} 
public function get(id:*):AsyncToken { 
return null; 
} 
public function save(issue:*):AsyncToken { 
return null; 
} 
public function remove(id:*):AsyncToken { 
return null; 
} 
Extends 
RemoteObject 
A 
Stubbed 
methods 
Start your class definition by extending RemoteObject so you can use tiiis to create a 
mock and pass it to your IssueModel when you instantiate it in the test O - Next stub 
out the methods tiiat you call on your RemoteObject inside die IssueModel, and 
stub them to return null 
It doesn't matter what you put in these metiiods 
because you'll be using the mock framework to define your expectations. 
Listing 10.15 updated IssueModel constructor 
public function IssueModel(issueService:RemoteObject = null) { 
if (issueService != null) { 
_issueService = issueService; 
} else { 
var defaultChannelSet:ChannelSet = 
ChannelSetFactory.getDefaultchannel(); 
_issueService = new RemoteObject(); 
_issueService.destination = "issueService"; 
_issueService.channelSet = defaultChannelSet; 
You updated die constructor on die IssueModel class to enable injecting the mock 
RemoteObject via the constructor. 

Testing the Model 
209 
10.5.2 Testing getlssues 
Now we're ready to write the IssueModel tests. Let's start by testing tire g e t l s s u e s 
method, which is probably tire most called method in tire IssueModel. 
Listing 10.16 
c a l l s G e t A H O n R e m o t e S e r v i c e 
[Test] 
public function callsGetAHOnRemoteService():void { 
service = mockery.strict(MocklssueService) as MocklssueService; 
token = mockery.strict(AsyncToken)as AsyncToken; 
responder = mockery.strict(IResponder) as IResponder; 
mockery.mock(service).method("getAll") 
.withNoArgs.returns(token).once; 
mockery.mock(token).method("addResponder") 
.withArgs(responder).once; 
target = new IssueModel(service); 
target.getlssues(responder); 
J 
Mocks 
O 
Mock 
expectation 
Call 
getlssues 
You start by creating the mocks you need for this test, a mock of your Mocklssue-
Service tlrat you defined, a mock AsyncToken, and a mock IResponder Q . Next you 
define your expectations on tire mocks, starting with tire expectation to call tire 
g e t A l l method with no arguments, and returning tire mock AsyncToken you created. 
Then you expect tlrat the mock AsyncToken's addResponder method will be called 
with the mock IResponder you created Q and use to also call tire method you're test-
ing Q . Let's look at testing tire g e t l s s u e method. 
10.5.3 Testing get single issue 
The next method you'll test on tire IssueModel is tire g e t l s s u e method, which takes 
in an issue ID as the first parameter to look up an issue by its ID. It's only slightly more 
involved than tire test you wrote, but still easy to follow. 
Listing 10.17 
callsGetOnRemoteService 
[Test] 
public function callsGetOnRemoteService():void { 
service = mockery.strict(MocklssueService) as MocklssueService; 
token = mockery.strict(AsyncToken)as AsyncToken; 
responder = mockery.strict(IResponder) as IResponder; 
Mocks 
O 
var id:Number = 42; 
< — © 
ID parameter 
mockery.mock(service).method("get").withArgs(id).returns(token).once; 
mockery.mock(token).method("addResponder").withArgs(IResponder).once; 
h 
target = new IssueModel(service); 
target.getlssue(id, responder); 
Mock expectations 
O 
Call getlssue 

210 
CHAPTER 10 
Testing your Flex application 
You start this test the same way you did die g e t l s s u e s test, by creating all of the mocks 
diat you need Q . You tiien define a local variable to contain the i d parameter Q 
tiiat 
we'll call the metiiod we're testing with. Next define your expectations on the mocks 
Q , which look similar to the g e t l s s u e s test expectations, except that this time you're 
expecting the get method on your RemoteObject to be called with die i d parameter 
you defined previously. In die last step you instantiate your IssueModel with your 
mock service and call the g e t l s s u e metiiod Q . 
You now have a good start on die unit tests for this project. If you're feeling ambi-
tious continue down die road of writing more tests for the project. When you're fin-
ished come back and we'll set up a continuous integration server using Hudson. Or 
come back after you've got Hudson set up. It's your choice. 
10.6 Continuous integration with Hudson 
When a team of two or more of developers works together, an immediate need arises 
for frequent feedback on how tilings are going, as changes are committed between 
team members. This is where die practice of Continuous Integration (CI) comes in to 
play. Tooling, like Hudson, becomes a third party and impartial member of a team. A 
good CI server provides teams witii essential feedback through the orchestration of 
critical project events as they pertain to the building and stability of die source code. 
It also can provide a unique look into the healtii of an application. 
In this section, a Hudson CI server will be configured to: 
• 
Listen for changes in die version control system 
• 
Automatically build die project from die top-level POM when changes are 
discovered 
• 
Execute and report on unit test execution 
• 
Fail builds upon build errors or failed tests 
• 
Send email out to team members upon failed or corrected builds 
Setting up a CI server with even the most basic configuration yields several benefits. 
How a team configures and uses a CI server depends on what die application does and 
what kind of feedback is necessary to ensure that everything is in a healtiiy state. Every 
step, from code being checked into die version control system to die final verification 
of the deployment, and everytiiing in between, is important. 
Several plugins can be configured witii Hudson for different purposes. To 
understand what kind of CI configuration best suits a team's needs a team may 
consider jotting down a list of questions that may be important to know every day 
during development. 
• 
What does die application do? 
• 
What are die user stories? (test coverage?) 
• 
Does die source code compile when integrated? 
• 
D o all die unit tests run successfully? 

Continuous integration with Hudson 
211 
• 
Is the code quality acceptable? (Hudson has plugins for code quality tools like 
PMD, FindBugs, and otiier analysis tools.) 
• 
Is there an unhealthy volume of TODO and FIXME annotations in the code and 
what are tiiey? (Hudson has a task scanner plugin tiiat performs static analysis 
and creates visibility for diese in Java code comment annotations along with 
unhealthy thresholds settings.) 
• 
Does the application deploy successfully? 
• 
How do you verily die application and die environment(s) it has to run inside? 
Now tiiat you have a feel for why you would want to have a CI environment let's move 
on to getting a sample Hudson instance set up for demonstration. 
10.6.1 Downloading and installing Hudson 
Installing Hudson couldn't be more trivial. Hudson is a simple Java web application 
and downloads as a WAR file. To download Hudson, open your browser and navigate 
to http://hudson-ci.org. There you will find the latest and greatest link for download-
ing die most current release. 
Hudson requires JRE 1.5 or later and can be started standalone, witiiout an appli-
cation server, by invoking the command java - j a r hudson.war, where the hudson.war 
file was installed. This will fire up Hudson inside of an embedded Winstone servlet 
container on port 8080 by default. 
Hudson can also be installed into a fixed servlet container tiiat supports Servlet 2.4/ 
JSP 2.0 or later, such as Glassfish, Tomcat, JBoss, and Jetty. 
If problems arise during installation, consult the Hudson website for help. Let's 
move on to configuring the server. 
10.6.2 Configuring Hudson 
If Hudson is installed correcdy you should be able to see die start screen. For tiiis sam-
ple you're using the embedded Winstone server. Open a web browser and navigate to 
http://localhost:8080.Wlien diere, Hudson will present an initial start page with no 
jobs configured as seen in figure 10.2. 
First configure Hudson globally by selecting the Manage Hudson link. There you 
can globally configure Ant, Maven, and JDK versions. Configuring things globally will 
make them available for all jobs you create. Figure 10.3 displays die Hudson manage-
ment selection screen. 
From the management screen select the Configure System link at die top of die 
list of options. It's also possible to manage plugins, view system information, and view 
logs from tiiis top-level screen. When you're in the configuration screen you can 
begin to add die version of Maven and Java that you'd like to use globally. Figure 10.4 
displays the configuration screen. 
Consider die list of goals you want to accomplish for the demonstration. From the 
Hudson configuration screen you want to configure a version of Maven, a JDK, and 
email notification. Finally, you will save it from there. 

212 
CHAPTER 10 
Testing your Flex application 
¿ 
D a s h b o a r d [ H u d s o n ] 
Hudson 
Hudson 
0 I S A 6 L E A U T O BE FRESH 
• ¡ S f 
New J o b 
W e l c o m e to Hudson! P l e a s e c r e a t e n e w iobs to a e t started. 
[ g a d d description 
j 
H a n a a e Hudson 
&Y»I<J Hirtffrt 
Build Queue 
Mo builds in the queue. 
Oui Id Executor 5tMus 
t 
Status 
1 Idle 
Í Idle 
Pagft genftrated: Nov 28, 2009 
9:25:44 
PM 
Hudson 
1 . 3 3 6 
Figure 10.2 
Hudson start screen 
Configuring Maven is as easy as selecting a version and instructing Hudson to automat-
ically install as seen in figure 10.5 or pointing Hudson to an installed Maven location. 
Use tire default to install Maven automatically and enter a name for tire install some-
tiring meaningful for tire version. Choose tire version and installation will occur. To 
Mi Marita mrfHWl llkldi«»] 
I t i 
H u d s o n 
1 
Manage Hudson 
d config files directly on diik. 
Figure 10.3 
The Hudson management selection screen 

Continuous integration with Hudson 
213 
Ij (i, Hudson 
Hudson 
Hudson 
ft' Men 
j 
Manage Hudson 
Build Hirtnrv 
Build Queue 
No builds in the queue. 
Build Executor Status 
9 
Status 
1 Idle 
2 Idle 
E l 
Home directory 
System Message 
# of executors 
Quiet period 
SCM checkout retry count 
C:\Documents and Settings\ballmon\,Hudson 
O 
m 
• © 
© 
Enable security 
l~~ Prevent Cross Site Request Forgery exploits 
& Help make Hudson better by sending anonymous usage statistics and crash reports to the 
Hudson project. 
Global properties 
f - Environment variables 
Maven 
Maven installation 
I 
^ 
List of Maven instillations on this system, &oth rnav&n I and 2 ire 
J Up ported. 
Figure 10.4 
Hudson configuration screen 
select a version of Maven from a local installation, deselect the Install automatically 
checkbox. Figure 10.6 displays the result. 
Enter the MAVEN_HOME, as seen in figure 10.6, by pointing to the directory where 
Maven is installed. That's it I As you can see it's possible to continue adding more 
Maven installations by selecting the A d d Maven button. 
Maven" 
Maven installation 
n a m e |maven-2.2.1 
I* Install automatically 
Install from Apache 
Version | 2,2.1 
3 
Add Installer 
Add Maven 
© 
Delete Installer 
Delete Maven 
List of Maven installations on this system. Both maven 1 and 2 are 
supported. 
Figure 10.5 
Maven automatic installation selection 

214 
CHAPTER 10 
Testing your Flex application 
Maven 
M a van installation 
"ame 
jmaven-2.2.1 
MAVEFJ_HOME |c:\java\maven\apache-maven-2.2.l| 
Install automatically 
Delete heaven 
fii : 1 Maven 
Lift of Maven Installations on this system, both miutn 1 and 2 ¿re 
supported, 
Figure 10.6 
Maven local installation 
Next, configure tire JDK version used to compile tire Java source code. It's possible 
tlrat tire Maven POM files will override this but tire Hudson build server must contain 
tire version required by tire POM. The JDK configuration works identically to tire 
Maven configuration. 
Finally, you can set up the mail settings by specifying a Simple Mail Transfer Proto-
col (SMTP) server, a default domain suffix, a system admin email address, and Hudson 
URL, as seen in figure 10.7. 
Having email configured will allow Hudson to communicate to teams when build 
failures or corrections occur. Now that Hudson is ready, let's move on to creating a j o b 
for tire FlexBugs application. 
10.6.3 Configuring a Hudson job 
Configuring a j o b for Hudson is as simple as configuring Hudson itself. In fact, 
Hudson has good support for Maven projects and handles multimodule projects 
with elegance by allowing you to drill down into tire specific modules to gain fine-
grained visibility. 
E-mail Notification 
SMTP server 
|http ;//myMailServer.com 
® 
Default user e-mail suffix 
| 
© 
System Admin E-mail Address lhudson@myM3ilServer.com 
© 
Hudson URL 
jhttp ;//localhost:8080| 
@ 
Advanced... 
Test configuration by sending e-mail to System Admin 
Address 
Save 
Figure 10.7 
Hudson email notification 

Continuous integration with Hudson 
215 
To create a j o b in Hudson, select die New Job link on the left side of the screen. 
Hudson will present options for what type of j o b to create with die ability to enter a 
name for thejob and to copy configuration from anotherjob, if one exists. Figure 10.8 
displays this initial screen. 
To demonstrate Hudson you will create a j o b for die FlexBugs application and 
select a Maven 2 project. After you select die O K button, Hudson will present die j o b 
configuration screen. This is where you will configure access to the source control sys-
tem and otiier settings that will accomplish your basic goals for building and providing 
feedback to die team when changes are checked into die source control system. 
O n die j o b configuration screen you will mainly go with die default settings and 
start by pointing Hudson to your source control management system. Figure 10.9 dis-
plays the settings that will accomplish this with settings to check for changes every 5 
minutes. This will cause a build to occur. 
The next tiling to do is configure thejob with the needed Maven goals. Figure 10.10 
displays tiiis part of the screen. It's good to note tiiat you can point Hudson to a P O M 
in any directory or even to a Maven P O M otiier than something named pom.xml. The 
M A V E N _ O P T S may need to be configured to increase die memory size for running 
inside the standalone Winstone server, for example, -Xms256m -Xmx768m -XX:Max-
PermSize=512m. 
For FlexBugs you need to call die clean install goals at die top-level POM. This will 
invoke die Maven build for all modules as usual. You also added die -e for outputting 
Hudson 
IT 
Hudson 
Hudson 
Job name |Flex.Bugs 
~ Monitor an external job 
TJiis type of job allows you to record the execution of a process run outside Hudson, 
even on a remote machine. This is designed so that tou can use Hudson as a dashboard 
of your existing automation system. See the documentation for more details. 
' 
Uuild a free-style software project 
This is the central feature of Hudson. Hudson will build vour project, combining any SCM 
with any build system, and this can be even used for something other than software 
build, 
' 
Build multi-configuration project (alpha) 
Suitable for projects that need a Forge number of different configurations, such as testing 
on multiple environments, platform-specific builds, etc. 
Build a maven? project 
Build a maven2 project. Hudson takes advantage of your POM files and drastically 
reduces the configuration. 
ra 
Page generated: Nov 2®, 2009 c 32:33 PM 
Hudson ver, l .336 
Mew Job 
/ 
Manage Hudson 
~ 
Build Histor* 
Build Queue 
No builds in tbe queue. 
Build Executor Status 
# 
Statu* 
1 Idle 
Z Idle 
Figure 10.8 
Hudson job configuration start screen 

216 
CHAPTER 10 
Testing your Flex application 
Source Code Management 
C 
None 
^ 
CVS 
** Subversion 
Modules 
Repository URL 
|https://flexonje va.googlecode.corr^svrv'f lex-bugs/trunk 
©P 
@ 
Local module directory (optional) | 
ifî) 
Add mo«« locations... 
® 
Use update 
If checked, Hudson will use 'svn update' whenever possible, making the build faster. But this causes the artifacts 
from the previous build to remain when a new build starts. 
Repository browser 
(Auto) 
j J 
Build Triggers 
Advanced... 
| 
& 
Build whenever a SNAPSHOT dependency is burlt 
I - 
Build after other projects are built 
I - 
Build periodically 
& 
Poll SCM 
Schedule 
V 5 • * * * 
9 $ 
Figure 10.9 
Source code management section 
stack trace information and also set up email notification. The email notification will 
use tire default mail settings you established when configuring Hudson global settings. 
After these settings are saved you can start tire build by selecting tire Build Now link. 
Build 
Root POM 
Ipom.xml 
m 
Goals and options | 
m 
Advanced... 
| 
Build Settings 
I - E-mail Notification 
© 
Post-build Actions 
I - Archive the artifacts 
® 
Aggregate downstream test results 
6 
Build other projects 
9 
I - Deploy artifacts to Maven repository 
© 
Savtt 
| 
Figure 10.10 
The build instructions and email notification settings 

Summary 
217 
From there you have a build started tiiat will check out die source code and build the 
entire application while providing feedback on die status and emails on build failures 
or corrections. 
That's all there is to configuring a CI server from the ground up! As you can see 
Hudson provides all kinds of options and various ways to execute a job. 
10.7 
Summary 
In this chapter we introduced you to unit testing using FlexUnit4 and die mock-as3 
mock testing framework. We also reiterated the reasoning behind die Model View 
Presenter pattern that we introduced in chapter 4. We covered many of die common 
patterns that you would have needed to test in your sample application. With die 
knowledge presented in this chapter, you should be able to continue writing tests for 
the rest of the functionality in the application. 
Finally, you set up and configured a CI server for providing critical feedback on 
how tilings are going as code is integrated into the source code repository. Hudson is 
a great choice for teams needing a reliable CI server. Hudson has numerous built-in 
capabilities and a vibrant user community witii plugins for almost anything. 
In chapter 11 we're going to take a look at how you can quickly get a Flex applica-
tion integrated with die Grails framework. We'll quickly introduce a simple contact 
management application, and integrate it with Grails as well asJMS. 

This chapter covers 
• 
Integrating Flex with Groovy and Grails 
• 
Installing the Grails Flex Plugin 
• 
Exposing a Grails service to Flex 
• 
Integrating Flex with J M S 
Not all real-world development is against an existing application. Every once in a 
while you have fun developing new code. What do you do when you want to rapidly 
prototype a data-driven application with Flex? With the Flex part it's easy enough to 
develop a UI, but what about die backend? You could always develop a Java-based 
backend using die same metiiods and techniques we described throughout tiiis 
book, or you could take advantage of another framework, such as Grails, to quickly 
get your data-driven backend off die ground. 
.1 
Why Groovy and Grails? 
Groovy has been affectionately called Java 2.0 by many in die Java world, so it 
should be no surprise tiiat you can integrate with Groovy and Grails as easily—and 
in some aspects more easily—as in previous chapters. 
218 

Downloading and installing Grails 
219 
Groovy is Java 2.0 
"Groovy is a lot like Java 2.0, if someone set out to completely rewrite the Java 
language today. Rather than replacing Java, Groovy complements it, providing a 
simpler, slicker syntax where the type checking is done dynamically at runtime. 
You can use Groovy to write Java applications on the fly, to glue together Java 
modules, or even to extend existing Java applications—you can even use Groovy 
to unit test your Java code. And the beauty of it is, Groovy lets you do all these 
things faster—sometimes a lot faster—than you would if you were writing pure 
Java code." 
Andrew Glover from his Fluently Groovy series on IBM DeveloperWorks (http:// 
www.ibm.com/developerworks/edu/j-dw-java-jgroovy-i.html) 
You may be wondering "Why Flex and Grails?" To which we respond, "Why not?" In 
this final chapter we're going to demonstrate how you can quickly build and proto-
type data-enabled Flex applications, leveraging die rapid development provided by 
Groovy and Grails coupled witii the powerful Grails plugin for Flex. Whetiier your 
intent is to spike out a particular piece of functionality or to build a complete applica-
tion, there are few options tiiat will allow you to develop as rapidly as Grails. 
We're going to assume tiiat you are at least somewhat familiar with botii Groovy 
and Grails, but if you've never seen or done any development using either, you should 
still be able to follow along. We'll show idiomatic Groovy code but won't go into too 
much detail about what the code does as that is beyond die scope of tiiis chapter. If 
you want to learn more about Groovy we suggest starting with the Groovy homepage 
(http://groovy.codehaus.org) or by reading Groovy in Action, Second Edition by Dierk 
Koenig (http://www.manning.com/koenig2/), published by Manning Publications. 
In this chapter we'll be building a simplified contact management application called 
Flex Contacts. You'll build a single Master-Detail screen tiiat you can use to track your 
contacts as shown in figure 11.1 
Before you start writing the application, you'll need to install Grails. 
11.2 
Downloading and installing 
Grails 
Installing Grails is a ratiier simple task. Point your browser to the Grails project 
downloads page (http://grails.org/Download) and download die appropriate distri-
bution for your platform. This chapter was written using Grails 1.1.2, which was 
the latest stable distribution available at the time of writing. There is no reason to 
install Groovy separately because it's included witii the Grails distribution. Grails is 
available in two main forms, a binary distribution and a source distribution. Down-
load die binary distribution in either Zip or Tar/GZ format, depending on your 
operating system. 
After you've downloaded the binary distribution for Grails, unzip the Grails distri-
bution to a folder such as c: \dev\grails-l .1.2. Then create a GRAILS_HOME environ-
ment variable and point it to the same folder. As a last step, append GRAILS_HOME\bin 

220 
CHAPTER 11 Flex on Grails 
flilfl 
I ".i n :n.m 
I ^ I"' + ^ 
-. Kh,i KIII alai:-'"t' Ill-Ill'1111,11- III-i 
'¿. Kq]- ~ 
Fiex Contacts on Grails 
Liil Nam t 
Him I«v 
Anamsn 
iil Man Ji mum 
Allrncn 
l|l Any Dr h 1-111 
• elttt IliHill 
HI .1 
fljfll? 
tonIllHf • 
I •-> ll 
111 ll 
Accreis: 
"» f St 
city: 
Mnmn 
STjit: MI 
zip cod«; I'I-IIH 
Contact Saw* I.II.II ill 
Figure 11.1 
The sample application 
to your PATH variable so that you can run the Grails executable from the command 
line. W h e n you've finished, open up a command line and type g r a i l s - v e r s i o n and 
you should see output similar to tiris snippet. 
C:\dev> grails -version 
Welcome to Grails 1.1.2 - http://grails.org/ 
Licensed under Apache Standard License 2.0 
Grails home is set to: C:\dev\grails-l.1.2 
Base Directory: C:\dev 
Congratulations! You've got Grails installed and configured. Now let's move on to cre-
ating the Grails application. 
11.3 Creating the Grails 
application 
Here's where you see one of tire first examples of Grails' convention over configuration 
way of doing things. To create your Grails application, you must open a command line 
and navigate to tire folder where you want to create your Grails application, for exam-
ple c : \dev\pro j e c t s \ and type tire following command. 

Creating the Grails application 
221 
C:\dev\projects\> grails create-app flex-contacts 
With that one simple command Grails has enough information to generate your proj-
ect for you. N o hard to remember or cryptic command line parameters, one simple 
concise command and Grails creates the project structure and installs all the neces-
sary dependencies. You don't even have to install a database server or servlet con-
tainer to run the application; that's all included out of the box when you create your 
Grails application. If you think tiiat was easy, wait until you see how easily you can add 
functionality to your Grails application using plugins. But first, let's continue building 
the Grails application by starting with defining die domain model. 
11.3.1 Create the Contact domain model 
Next you'll create die domain class tiiat will be responsible for holding contact infor-
mation. For this you'll need only one domain object called Contact. Create die Con-
tact object by issuing die following command: 
C:\dev\projects\flex-contacts\> grails create-domain-class contact 
This will create the Contact domain model class in die grails-app/domain folder 
witiiin your flex-contacts project. In the Contact domain model, you're going to add a 
few simple properties for persisting the contact information such as first name, last 
name, and address information, as well as simple validation constraints. Here is what 
your completed Contact.groovy file will look like. 
Listing 11.1 
Contact.groovy file 
class Contact { 
static contstraints = { 
firstName(blank: false, minLength: 4, maxLength: 15) 
lastName(blank: false, minLength: 4, maxLength: 25) 
address(blank:false) 
city(blank:false) 
state(blank: false, length: 2) 
zipCode(blank: false, minLength: 5, maxLength: 10) 
} 
String firstName 
String lastName 
String address 
String city 
String state 
String zipCode 
String toStringO { 
return firstName + 
The Contact class contains fields tiiat you'll need to hold tilings like first name, last 
name, and address © . You've also defined a few constraints O so tiiat you can validate 
<— 
O 
Constraints 
<— 
© 
Properties 
+ lastName 
toStringO 

222 
CHAPTER 11 Flex on Grails 
that you get all the information you need from the frontend. You've also implemented 
a toStringO © 
method to provide a more meaningful implementation than the 
default. Now let's create die service tiiat you'll be exposing to the Flex application. 
11.3.2 Create the 
ContactService 
To expose your Grails application to the Flex frontend, create a service tiiat will 
expose the functionality for your application to perform CRUD operations on your 
Contact domain object. To do this you issue die following command on die com-
mand line: 
C:\dev\projects\flex-contacts> grails create-service contact 
This will create a class named ContactService, shown in listing 11.2, in the grails-
app/services folder. The ContactService will contain the metiiods you'll be exposing 
to Flex to consume as a remote service. Inside die ContactService.groovy file you'll 
implement a few simple metiiods to enable your Flex application to get a list of all the 
contacts in the database, get a specific contact, save a contact, and delete a contact 
from die database. 
Listing 11.2 
ContactService.groovy file 
class ContactService { 
static expose = [1flex-remoting1] 
boolean transactional = true 
def getContacts() { 
return Contact.list() 
} 
def get(id) { 
return Contact.get(id) 
} 
def update(Contact contact) { 
contact.save() 
} 
def remove(Contact contact) { 
contact.delete(flush: true) 
} 
O 
Expose to Flex 
< 
A 
Transactional 
< - J 
property 
A 
Service 
methods 
Most of the ContactService class should look familiar to you. The only line tiiat 
may look odd is tiiat which contains the code static expose = [ 1 flex-remoting 1 ] 
O - This single line of code is all you need to expose tiiis service to Flex so that you 
can call any of the service metiiods from your Flex application. You also make all of 
the service methods © 
in your service transactional by setting the transactional 
property to true © . The Flex plugin for Grails, which we'll install in a bit, follows 
the Grails philosophy of convention over configuration in that it abstracts much of 

Getting rich with Flex 
223 
the configuration that you would have needed to build had this been a Java applica-
tion leveraging either BlazeDS or LiveCycle Data Services to expose this functionality. 
11.3.3 Bootstrap sample data 
The last step building tire Flex client is to bootstrap your application with sample data 
so tlrat you have contact information in tire database when you first run it. This will 
also allow you to see tlrat the Flex remoting is working correctly. To do this you add 
the code shown next to tire Bootstrap.groovy file in the grails-app/conf folder of 
your application. 
Listing 11.3 
BootStrap.groovy file 
class Bootstrap { 
def init = {servletContext -> 
Contact contactl = new Contact(firstName: "Jeremy", 
lastName: "Anderson", address: "123 Main St", 
city: "Jenison", state: "MI", zipCode: "49428") 
contactl.save() 
Contact contact2 = new Contact(firstName: "BJ", 
lastName: "Allmon", address: "234 Any St", 
city: "Delaware", state: "OH", zipCode: "43015") 
contact2.save() 
} 
def destroy = { 
} 
} 
Bootstrapping data in Grails allows you to have data injected into the application each 
time you restart it. You do this by creating a couple of Contact objects O in your Boot-
Strap.groovy file and call save () on them to persist them to tire database. This is a 
helpful feature of Grails as you move through development and beats having to manu-
ally enter contacts every time. You would typically use this file for bootstrapping any 
kind of initial data in your application, such as states and state codes. Now you're 
ready to begin developing the Flex frontend for tire Grails application you created. 
11.4 Getting rich with Flex 
Now tlrat you have created your Grails application you can move on to the task of cre-
ating tire Flex client that will integrate with Grails. You'll start by installing the Flex 
plugin for Grails, then add tire Flex application to tire Grails project. 
11.4.1 Installing the Flex plugin 
From tire root of tire project directory enter tire following command to install tire Flex 
plugin for tire Grails application: 
C:\dev\projects\flex-contacts\> grails install-plugin flex 
Sample 
data 

224 
CHAPTER 11 
Flex on Grails 
This command will pull down all of die Flex libraries your application needs to be 
able to compile the Flex application. This may take time because the plugin has to 
pull down many dependencies. After all die messages have scrolled by the plugin 
should be successfully installed. Like many otiier features in Grails development, 
enabling an application for Flex integration is extremely simple and declarative. N o 
configuration files need to be created, though some configuration files are con-
tained witiiin the web-app/WEB-INF folder if you need to fine-tune die Flex com-
piler settings. 
11.4.2 Creating the domain classes in Flex 
You can begin the Flex development by creating a domain object in ActionScript. This 
object will act a,s a, data transfer object of sorts, allowing you to deal witii full-fledged 
objects when your service returns data to die client. This approach avoids having to 
deal with the pseudoproxy objects tiiat Flex would wrap your objects into if it didn't 
have anything to translate it into. 
When you installed the Flex plugin in die previous step, it created a flex folder 
under web-app/WEB-INF. Inside tiiis folder resides anotiier folder called user-classes, 
which contains a file that clues you into where you're supposed to place your Action-
Script classes, appropriately called add_your_as_and_swc_files_here. Create a file in 
die user-classes folder called Contactas. 
Listing 11.4 
Contact.as 
package { 
[Bindable] 
[RemoteClass(alias = "Contact")] 
public class Contact { 
public function Contact!) { 
} 
public var id:*; 
public var version:*; 
public var firstName:String 
public var lastName:String 
public var address:String 
public var city:String 
public var state:String 
public var zipCode:String 
The code should resemble die client side domain classes tiiat you created earlier for 
your FlexBugs application. Take note of the annotations at the top of the file, [Bind-
able] © 
and [RemoteClass] Q . The [Bindable] annotation lets Flex know that 
whenever one of the values changes in this object, it should notify anything else that is 
bound to this object to let it know that it should update itself. We didn't utilize data 
J 
81 
Bindable 
lP Hi 
r 
pr 
RemoteClass 
Hibernate specific 
properties 
1 
Public 
properties 

Getting rich with Flex 
225 
binding in our otirer application but for this quick example we did, in order to keep 
the examples shorter. 
In case you have forgotten, tire [RemoteClass] annotation allows a Flex class to be 
mapped to a server-side class. The Contact. as class is mapped to the Contact. groovy 
domain class you created earlier. Because you're using a package structure in this triv-
ial example, you don't need to fully qualify it here; if your domain object in Grails fell 
under a specific package, you would have to fully qualify that object in this annotation 
for it to work correctly. 
You need to add a couple of Hibernate-specific properties Q to your Contact 
domain class for your application to behave as intended, along with all tire normal 
public properties Q that you need to include for tire data fields you want to be able to 
be persist. 
11.4.3 Creating the Flex application 
Now tlrat you've got your domain object created for the client side, you'll need to cre-
ate a file to contain the main Flex application itself, which will be called main.mxml 
and is created in tire web-app folder of your Grails application. 
You'll break this down into bite-sized chunks tlrat should be easier to digest than if 
you were simply presented with the end state of tire application. First you'll start by 
creating tire Application object. As in the otirer sample application, your Flex appli-
cation will have tire Application element as its root node of tire MXML file as shown 
in this snippet. 
<?xml version="1.0" encoding="utf-8"?> 
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
xmlns:local="*" 
layout="vertical" 
creationComplete="contactService.getContacts()" 
viewSourceURL="srcview/index.html"> 
</mx:Application> 
Now tlrat you've got tire base application started, you're ready to start laying out tire 
basic layout. 
DEFINING THE LAYOUT 
Look at figure 11.1 again, and take note that you've got three main containers in use 
for this application. You've got the header at tire top containing tire text Flex Contacts 
on Grails, and two panels containing the master view and tire details view. Let's create 
the basic layout for your application. To do that you're going to leverage a couple of 
layout components: HBox and Panel. We'll break up the Main.mxml and look at each 
section individually. 
Listing 11.5 
Main.mxml (a) 
<mx: HBox width= " 100% " > 
<1—, 
<mx:Text f ontSize= " 24 " text="Flex Contacts on Grails "/> 
A 
Header container 
</mx:HBox> 

226 
CHAPTER 11 Flex on Grails 
<mx:HBox width="100%" height="100%"> 
<mx:Panel width="65%" title="Contacts" height="100%"> 
</mx:Panel> 
<mx:Panel width="35%" title="Edit Contact" height="100%"> 
</mx:Panel> 
</mx:HBox> 
Master 
view 
« N 
M 
© 
vi 
<~1 
Detai 
© 
view 
This listing shows the code used to generate die layout of our application. In the snip-
pet we saw previously you specified tiiat your application use vertical as its main layout 
method so your components will flow vertically down as you add diem to die applica-
tion. Here you start by adding an HBox container © containing a single Text compo-
nent. This Text component contains the text for our title that appears in die header. 
Next you wrap two Panel containers in another HBox so tiiey'll show up side by side in 
die application. These two Panel components will house the master view © and detail 
view © . 
CREATING THE MASTER VIEW 
Inside die first Panel container you'll create die master view using die DataGrid com-
ponent, which allows you to display tabular data ratiier painlessly. 
Listing 11.6 
Main.mxml (b) 
<mx:DataGrid id="contactsGrid" 
width=" 100%" 
O 
DataProvider 
height="100%" 
dataProvider="{contactsList}" 
itemClick="doSelect(Contact(event.currentTarget.selectedltem)) 
J 
<mx:columns> 
<mx:DataGridColumn dataField="id" headerText="ID" width="50"/> 
< 
<mx:DataGridColumn dataField="firstName" 
headerText="First Name" width="100"/> 
_ ^ _ . . 
DataGrid 
<mx:DataGridColumn dataField="lastName" 
. 
• 
, 
„ „ 
, 
columns 
headerText="Last Name" width="100"/> 
<mx:DataGridColumn dataField="address" headerText="Address"/> 
<mx:DataGridColumn dataField="city" headerText="City" width="120"/> 
<mx:DataGridColumn dataField="state" headerText="State" width="70"/> 
<mx:DataGridColumn dataField="zipCode" headerText="ZipCode" 
width="100"/> 
</mx:columns> 
< 
</mx:DataGrid> 
<mx:ControlBar> 
<mx:Button label="Delete Contact" 
enabled= " {contactsGrid. selectedltem != null}" 
ControlBar 
click="deleteContact(selectedContact)"/> 
<mx:Button label="Refresh" click="contactService.getContacts()"/> 
</mx:ControlBar> 
-I 
This portion of the listing shows the code to create die contacts DataGrid as well as to 
define die columns to be displayed. You may have noticed die items contained within 
die curly braces { } ; tiiis is how to specify data binding in a Flex application. You've 

Getting rich with Flex 
227 
bound die dataProvider property O ° f the DataGrid to die c o n t a c t s L i s t variable, 
which you'll define later. This is where you'll store the results from your RemoteObject 
mediod call to get all the contacts. Notice that all of your column names Q 
should 
match what you defined in die Contact object you created earlier. This allows Flex to 
automatically figure out which data field to map to which column. 
A ControlBar © will contain all of the buttons needed to interact with this control. 
CREATING THE DETAIL VIEW 
Now diat the master view has been created, it's on to die detail view. The detail view 
will provide a mechanism for editing and updating your contacts. Although we could 
have allowed editing right in the DataGrid itself, it wouldn't have made for a good 
example and doesn't show off die power of data binding in Flex. 
Listing 11.7 
Main.mxml (c) 
<mx:Form id="contactForm" width="100%"> 
<mx:FormItem label="ID:" width="100%"> 
<mx:Text text="{selectedContact.id}"/> 
</mx:FormItem> 
<mx:FormItem label="First Name:" width="100%"> 
< — O 
The Form 
<mx:Textlnput id="firstName" 
</mx:FormItem> 
<mx:FormItem label="Last Name: 
text="{selectedContact.firstName}"/> 
width="100%"> 
<mx:Textlnput id="lastName" text="{selectedContact.lastName}"/> 
</mx:FormItem> 
<mx:FormItem label="Address:" width="100%"> 
<mx:Textlnput id="address" text="{selectedContact.address}"/> 
</mx:FormItem> 
<mx:FormItem label= "City: " width= " 100% " > 
Formltems 
0 
<mx:Textlnput id="city" text="{selectedContact.city}"/> 
</mx:FormItem> 
<mx:FormItem label="State:" width="100%"> 
<mx:Textlnput id="state" text="{selectedContact.state}"/> 
</mx:FormItem> 
<mx:FormItem label="Zip Code:" width="100%"> 
<mx:Textlnput id="zipCode" text="{selectedContact.zipCode}"/> 
</mx:FormItem> 
< — 
</mx:Form> 
<mx:ControlBar> 
<mx:Button label="New Contact" 
enabled="true" click="selectedContact = new Contact!)"/> 
<mx:Button label="Save Contact" 
click="updateContact(selectedContact)"/> 
<mx:Button label="Reset" click="resetForm()"/> 
</mx:ControlBar> 
O 
ControlBar 
Here is the code for the detail view in which you leverage anotiier container object, 
the Form component O - Unlike its HTML counterpart, the Form component in Flex is 
strictiy a container. You don't need to have your fields wrapped in a Form component 
to post data to the server side. 

228 
CHAPTER 11 Flex on Grails 
Inside die Form component you define a series of Formltem components Q drat 
contain tire GUI form components used for data entry. These should be fairly self-
explanatory. Take note of tire data binding syntax in tire text attributes for these com-
ponents. This indicates that you'll be binding tire text values of these components to a 
variable called selectedContact. As a last step, you add another ControlBar © as you 
did for tire master view to contain any buttons needed to control tire application. 
11.4.4 Adding the RemoteService 
Flex has a few components that enable it to communicate with tire server side, namely 
HTTPService, WebService, and RemoteService. In a nutshell WebService facilitates 
easy communication with SOAP-based web services. HTTPService allows you to con-
sume and call other web services using a variety of protocols such as XML and JSON 
and is tire best choice if you're trying to interact with some sort of RESTful resource. 
RemoteService leverages Adobe's binary AMF ) protocol, which tends to give tire best 
performance of the three. 
Listing 11.8 
Adding the RemoteService 
<mx:RemoteObj ect id="contactService" destination="contactService"> 
<mx:method name="getContacts" 
result="handleGetContacts(event.result)" 
fault="showFault(event)"/> 
<mx:method name="update" fault="showFault(event)"/> 
<mx:method name="remove" fault="showFault(event)"/> 
</mx:RemoteObj ect> 
As stated previously you're going to use tire RemoteObject component to facilitate 
communication with the server side, and you've defined tire methods that you'll be 
calling so you can define tire callback methods that you'll be using to handle tire 
results coming back from the server, as well as any faults. 
11.4.5 Putting it ail together 
You're almost done. You now put it all together and add methods that you'll call to 
handle events from the UI. 
Listing 11.9 
Main.mxm (d) 
<local:Contact id="selectedContact" 
firstName="{firstName.text} 
lastName="{lastName.text}" 
address="{address.text}" 
city="{city.text}" 
state="{state.text}" 
zipCode="{zipCode.text}"/> 
<mx:ArrayCollection id="contactsList"/> 
<mx:Script> 
<![CDATA[ 
Contact 

Install the GrailsJMS and ActiveMQplugins 
229 
import mx.rpc.events.FaultEvent; 
import mx.controls.Alert; 
private function doSelect(c: Contact):void { 
selectedContact = c; 
private function handleGetContacts(list:*):void { 
contactsList.removeAll(); 
for each (var c:Contact in list) { 
} 
J 
RemoteObject 
event handler 
contactsList.addltem(c); 
} 
J 
RemoteObject 
fault handler 
private function showFault(fault:*):void { 
Alert.show(fault.message); 
} 
private function deleteContact(selectedContact:Contact):void { 
contactService.remove(selectedContact); 
contactService.getContacts(); 
} 
private function updateContact(contact : Contact):void { 
contactService.update(selectedContact); 
contactService.getContacts(); 
} 
Event handlers 
Q 
private function resetForm():void { 
var tmpObj:Contact = Contact(contactsGrid.selectedltem); 
contactService.getContacts(); 
contactsGrid.selectedltem = tmpObj; 
doSelect (Contact (contactsGrid. selectedltem) ) ; 
<1— 
} 
] ]> 
</mx:Script> 
Most of what is shown in the listing should make sense. Here you define a Contact 
object in MXML ratiier tiian ActionScript O 
Notice that you're also performing data 
binding back to the form components, creating a two-way binding between die 
selectedContact variable and the detail form. Next define the event handler © and 
fault handler Q for die RemoteObject tiiat you defined in listing 11.8. Last you have 
all the event handlers for die components in die master view and detail view Q . 
Now that you've completed this part of die application, you can start up your Grails 
application by executing g r a i l s run-app and navigating to the application. After your 
application is running, fire up your browser and navigate to http://localhost:8080/flex-
con tacts/main.mxml and you should see sometiiing resembling figure 11.1. You've got 
a functional Flex application running on Grails. Over the next few sections you're 
going to modify this simple example to leverage JMS and ActiveMQ. 
Next you're going to demonstrate die ability of your Grails application to push data 
out to die Flex application using Flex components that integrate with JMS to produce 
and consume messages. This will allow you to remove die Refresh button and some of 
the plumbing involved to refresh die Flex DataGr id when a user adds, edits, or deletes 
11.5 Install the Grails JMS and ActiveMQ 
plugins 

230 
CHAPTER 11 
Flex on Grails 
a contact. This helps clean up the client by reducing tire amount of view logic and 
complexity. To install tire Grails JMS plugin from tire root of tire project directory use 
this snippet: 
$ grails install-plugin jms 
Then do the same for tire ActiveMQ plugin: 
$ grails install-plugin activemq 
After these plugins are installed you're ready for development. The beauty of Grails 
conventions is that they hide most of tire complexity of plugging in new external frame-
works such as JMS and ActiveMQ. It's worth mentioning that tire JMS and ActiveMQ 
plugins are still fairly new but seem to do tire j o b for tire most common situations. 
Now that you have tire plugins for making tire application JMS-enabled, you can move 
on to updating tire Grails application code. Only a few things need to happen to pro-
vide a JMS service to tire Flex client and these are described next. 
11.6 Add the ActiveMQ Spring bean 
There's one configuration detail you need to tend to. You need to configure tire JMS 
plugin to leverage tire ActiveMQ broker. You can do this either by adding a Spring 
bean to the resources.xml or by adding the bean using tire Groovy DSL approach. The 
snippet that follows demonstrates adding the bean by using tire DSL approach of add-
ing your connection factory as a bean in tire resources.groovy configuration file 
located in tire grails-app/conf/spring folder of tire application. 
// Place your Spring DSL code here 
beans = { 
connectionFactory(org.apache.activemq.ActiveMQConnectionFactory) { 
brokerURL = "vm://localhost" 
} 
} 
The code shown here is the Groovy way to configure Spring beans in Grails, and 
defines a connectionFactory bean of type ActiveMQConnectionFactory and initial-
izes its brokerURL property to point at vm: / /localhost. Now that you got tire configu-
ration out of tire way you can move on to tweaking the Contact domain class. 
class Contact implements Serializable { 
} 
To store messages on a message queue the objects need to implement tire S e r i a l i z a b l e 
interface. You need to update tire Contact class to implement tire S e r i a l i z a b l e inter-
face as shown previously. 
11.7 Subscribe the Flex client to the Grails JMS 
service 
Now you're ready to configure the Flex framework as a JMS consumer. First you'll start 
with the BlazeDS configuration. 

Subscribe the Flex client to the GrailsJMS service 
231 
11.7.1 Update the 
services-config.xml 
You need to configure Flex witii a contactsTopic in die top-level BlazeDS configura-
tion file. When die Flex plugin is installed it places die services-config.xml inside die 
/web-app/WEB-INF/flex directory. Let's edit it by adding die Flex message service 
inside die services element. The full services-config.xml is included in die next listing 
for clarity and to show tiiat the order of die bean definitions has significance. Inside 
the services element die Grails service comes first followed by die JMS configuration. 
Listing 11.10 
services-config.xml 
<?xml version="1.0" encoding="UTF-8"?> 
<services-config> 
<services> 
<service id="grails-remoting-service" 
class="flex.messaging.services.RemotingService"> 
<adapters> 
<adapter-definition id="java-object" 
class="flex.messaging.services.remoting.adapters.JavaAdapter" 
default="true"/> 
</adapters> 
</service> 
<service id="grails-service" 
class="org.codehaus.groovy.grails.plugins.flex. 
GrailsBootstrapService"/> 
<service id= "message-service" 
I A 
JMS service 
r 
class="flex.messaging.services.MessageService" 
messageTypes="flex.messaging.messages.AsyncMessage"> 
<adapters> 
<adapter-definition id="jms" 
class="flex.messaging.services.messaging.adapters.JMSAdapter" 
default="true"/> 
, u r . . 
JMS adapter 
</adapters> 
<destination id= "contactsTopic"> 
<properties> 
< jms> 
<destination-jndi-name>contacts</destinâtion-jndi-name> 
<message-type>j avax.jms.Obj ectMessage</message-type> 
«connection-factory>ConnectionFactory</connection-factory> 
<delivery-mode>NON_PERSISTENT</delivery-mode> 
<message-priority>DEFAULT_PRIORITY</message-priority> 
<acknowledge-mode>AUTO_ACKNOWLEDGE</acknowledge-mode> 
<transacted-sessions>false</transacted-sessions> 
<initial-context-environment> 
<property> 
<name>Context.PROVIDER_URL</name> 
y 
<value>vm://localhost</value> 
JMS configuration 
© f 
</property> 
<property> 
<name>Context.INITIAL_CONTEXT_FACTORY</name> 
<value>org.apache.activemq.jndi. 
ActiveMQInitialContextFactory</value> 
</property> 

232 
CHAPTER 11 Flex on Grails 
<property> 
<name>topic.contacts</name> 
<value>contacts</value> 
</property> 
</initial-context-environment> 
</jms> 
JMS configuration 
( ] 
</properties> 
</destination> 
</service> 
<default-channels> 
<channel ref="grails-amf"/> 
</default-channels> 
</services> 
<channels> 
<channel-definition id="grails-amf" 
class="mx.messaging.channels.AMFChannel"> 
<endpoint url="http://{server.name}:{server.port}/{context.root}/ 
messagebroker/amf" 
class="flex.messaging.endpoints.AMFEndpoint"/> 
</channel-definition> 
</channels> 
</services-config> 
The bulk of the services-config.xml file was generated when you installed tire Flex 
plugin; however you need to add a new service section for tire JMS service that you'll 
be using Q , and a section stating that you'd like tire service to use tire JMS adapter 
Q . You also need to configure tire JMS topic that you'll be communicating with 
To see all tire options you've defined, refer to tire BlazeDS user documentation at 
http://livedocs.adobe.eom/blazeds/l/blazeds_devguide/. 
Now 
let's move 
on 
to 
modifying our ContactService to utilize your messaging. 
11.7.2 Modifying the 
ContactService 
The existing ContactService class is relatively simple. Here is tire updated Contact-
Service class with tire additions for publishing the updated contact list. 
Listing 11.11 
ContactService updated 
class ContactService { 
static expose = [1flex-remoting1] 
boolean transactional = true 
def getContacts() { 
return Contact.list() 
} 
def get(id) { 
return Contact.get(id) 
} 
def update(Contact contact) { 
contact, saved 
0 
publishContacts 
publishContacts() 
} 
J? 

Subscribe the Flex client to the GrailsJMS service 
233 
def remove(Contact contact) { 
contact.delete(flush: true) 
publishContacts() 
} 
def private void publishContacts() { 
try { 
sendPubSubJMSMessage("contacts", 
} catch (Exception e) { 
log.error("Failed to publish contacts.", 
} 
J 
getContacts ( )); 
e) ; 
publishContacts 
sendPubSubJMSMessage J 
You add die publishContacts ( ) 0 metiiod to publish updates to the topic you con-
figured in die services-config.xml file. The sendPubSubJMSMessage © 
takes two 
arguments. The first argument is die JNDI destination name defined in your topic, 
and the other is the list of contacts. Next, you wire up the update and remove methods 
to publishContacts when tiiey are invoked. Otiier methods can be called depending 
on your needs. Because a topic supports die publish/subscribe model, it is used for 
one-to-many messaging which works well with die Contacts application. For one-to-
one or point-to-point messaging you would use a queue instead. To learn more about 
the JMS plugin, visit die Grails website at http://www.grails.org/JMS-l-Plugin. 
11.7.3 Update the Main.mxml 
The final tiling to do before relaunching die contacts application is to update die Flex 
client main.mxml file. You will add die JMS service to die mix and make otiier minor 
changes. Let's start with die Application element. 
Listing 11.12 
Main.mxml (e) 
<mx: Application xmlns:mx="http://www.adobe.com/2006/mxml" 
xmlns:local="*" 
layout="vertical" 
viewSourceURL= " srcview/index. html " 
creationComplete 
creationComplete="contactService.getContacts();jmsConsumer.subscribe()"> J 
<mx:Consumer id="jmsConsumer" 
destination="contactsTopic" 
message="handleGetContacts(event.message.body)" 
fault="showFault(event)"/> 
" 4 
Consumer 
</mx:Application> 
The Flex Consumer object © 
is used to connect to the contactsTopic. W h e n die 
application initializes, you need to subscribe to die contactsTopic. To do so you con-
figure die creationComplete event definition © 
to call subscribe on the jms-
Consumer. The consumer listens for changes from the ActiveMQ broker and uses die 

234 
CHAPTER 11 Flex on Grails 
handleGetContacts method to consume the data. This method updates die contact 
list when tiiere are updates. 
From here, die application will work fine as is. There are some things to clean 
up because we're now making the application JMS aware and tiiey are unneces-
sary overhead. 
Listing 11.13 
Main.mxml (f) 
private function deleteContact(selectedContact:Contact):void { 
contactService.remove(selectedContact); 
} 
private function updateContact(contact:Contact):void { 
contactService.update(selectedContact); 
} 
<mx:ControlBar> 
<mx:Button label="Delete Contact" 
enabled="{contactsGrid.selectedltem != null}" 
click="deleteContact(selectedContact)"/> 
</mx:ControlBar> 
You remove the calls to the getContacts () method on your RemoteObject when 
deleteContact and updateContact are invoked. These calls were necessary, prior to 
enabling JMS, for die DataGrid to be refreshed whenever die contact list was updated. 
You can also remove die Refresh button. The Flex consumer will get updates every few 
seconds and will invoke die metiiod tiiat will update die DataGrid so there's no more 
need for these extra calls to the server side. The consumer itself can be further config-
ured if different timing or other options are needed. 
To illustrate die push of information from the server to the client, start die 
Grails application by opening a command line and navigating to the project folder. 
Type die command grails run-app, which will start die embedded jetty container 
to run the application. Now open two browsers and point them both to the Flex 
application at http://localhost:8080/flex-contacts/main.mxml. Then as you make 
updates in the one window, you should see the contacts being updated in die other 
browser window—no more having to manually refresh die application to pick up 
other user's changes. 
11.8 
Summary 
In this final chapter we showed you how to rapidly prototype data-enabled Flex 
applications using Groovy and Grails in combination with the Flex plugin for Grails. 
You started by defining the domain in Grails and exposing some services for your 
Flex application to use, and the Flex application itself. You then went one step fur-
ther and enabled your application to use JMS and ActiveMQ for real-time updating 
of your UI. 

index 
Symbols 
[After] 
FlexUnit annotation 197 
[Before] 
FlexUnit annotation 197 
[Bindable] 224 
[RemoteClass] 224-225 
[Test] 
FlexUnit annotation 198, 200 
{server.name} 97 
{server.port} 97 
@Entity 22 
@OneToOne annotation 23 
©RemotingDestination 102, 140 
@RemotingExclude 103 
@RemotingInclude 102 
@Secured annotation 135 
@WebService annotation 24 
A 
AbstractService 207 
AC_OETagsjs 44 
Access Control Lists. See ACL 
Acegi 10 
ACL 123 
Action Message Format. See AMF 
ActionScript 
based on ECMAScript 5 
dynamic classes 207 
and mc.drawWedge 148 
no class declaration 162 
properties 75 
Active Directory 123 
Adobe AIR. Si» AIR 
Adobe Integrated Runtime. See AIR 
ADT 177 
building AIR installer 182 
generating a certificate 178 
AdvancedDataGrid 53 
AIR 6 
adding icons 178 
application distribution 186 
assembly descriptor 182 
and Desktop 2.0 11 
how application relates to view component 170 
packaging 180 
properties 179 
AIR application 
creating 174 
differs from Flex application 176 
installer 176 
AIR Developer Tool. See ADT 
AIR installer 
creating an assembly 182 
security 177 
air-app.xml 179 
Alert 68, 130, 132, 139 
Almost Plain Text. See APT 
AMF 10, 91, 228 
remote service 103 
remoting destinations 102 
AMFChannel 109, 113, 117, 125 
AMFEndpoint 113 
annotations 
[After] 197 
[Before] 197 
[Bindable] 224 
[RemoteClass] 225 
[Test] 198, 200, 205 
235 

236 
INDEX 
Ant 
Hudson version 211 
AOP 133 
pointcut 134 
Apache Commons Builder 21 
Apache Maven. See Maven 
AppFuse 13 
BaseAction 29 
custom Maven archetypes 17 
customizing the menu 30 
default application 20 
security 137 
SiteMesh filter 44 
with Spring and Hibernate 20 
two users created 132 
userDao object 140 
Application 45, 173, 225 
Application tag 
bug in Spark version 174 
applicationContext.xml 100 
ApplicationResources.properties 33 
APT 16 
archetypexreate plugin 16 
ArrayCollection 73, 162, 203 
aspect-oriented programming. SeeAOP 
Async.proceedOnEvent 201 
asynchronous functionality 197 
asynchronous messaging 112 
AsyncResponder 68, 74, 79, 130, 142 
AsyncToken 69, 79, 104, 130, 209 
authentication 124-133 
authorization 133-139 
Autodesk Project Dragonfly 166 
Balsamiq 191 
BlazeBench 92 
BlazeDS 10,43 
adding to POM 93 
basic anatomy 92 
benchmarking 107 
benchmarks 92 
configuration 94 
configuring 96 
connecting to Java 104 
documentation 97 
instead of web services 92 
logging 105 
remoting destinations 101 
setting up for messaging 113 
setting up logging 106 
blazeds-core 93 
Bootstrap.groovy 223 
Button 55, 77 
click 77 
c 
CA 177 
callProperty 207 
certificate 
self-signed 185 
self-signed or digital 177 
certificate authority. See CA 
ChannelSet 117, 124, 130, 139 
ChannelSetFactory 124, 130, 138 
creating 117 
CI 
configuring server 210 
questions 210 
ComboBox 161 
dataProvider 73 
selectedltem 77 
Comment 
data object 66 
CommentManager 103, 136 
CommentModel 
creating 80 
updating 85 
CommentPresenter 
updating 83 
comments 
editing 83 
comments view 54 
creating Presenter 77 
CommentsListPresenter 
creating 77 
updating 142 
CommentsListView 
updating 87 
CommentsView 57, 81 
See also comments view 
common classes 
extracting 172 
common library 
creating 169 
CommonsLoggingTarget 105, 107 
components 
laying out 55 
pop-up 57 
configurations 
sharing 100 
console appending 106 
ConsoleAppender 106 
Consumer 118, 233 
ContactService 
modifying 232 
Continuous Integration. See CI 

INDEX 
237 
ControlBar 53, 77, 81, 221 
convention over configuration 13, 220 
paradigm 43 
ConversionPattern 106 
createSlices mediod 158 
creationComplete 70, 76, 82, 153 
crossdomain.xml 97 
CRUD 23 
CURRENT_USER_UPDATED 142 
CursorManager 68, 79 
custom event 
creating 63 
DAO 13, 24 
building 23 
Data Access Object. See DAO 
data binding 50, 62 
in Flex 226 
DataGrid 154, 204, 226 
dataProvider 68 
display tabular data 53 
populating 72 
DataGridColumn 72 
Dégrafa 5, 148 
adding dependency on 172 
common concepts 149 
documentation 150 
Pie Chart 150 
uses 11 
visualization components 165 
dependency injection. See DI 
detail view 
component based off of Panel layout 54 
enhancing 72 
See also DetailView 
DetailPresenter 72 
changedlssue 75 
savelssue 74 
savelssueResult 75 
updating 142 
DetailView 57 
form for updating 53 
init 77 
updating 76 
See also detail view 
development environment 13 
DI 13 
Spring provides 21 
-Dmaven.test.skip=true 164 
domain classes 
creating in Flex 224 
Domain Model. See Model 
domain specific languages 207 
download badge, creating 189 
downloadjsp 189 
DropShadowFilter 154 
dynamic classes 207 
dynamic language, dangerous 164 
dynamically adding properties 164 
ECMAScript 5 
EllipticalArc 155 
embedSWF 191 
endpoint 
must be unique 114 
event 
bubbling 64 
dispatching 64 
dispatching and handling 63 
type 63 
Event class 63, 126 
addEventListener 78 
EventDispatcher 64 
addEventListener 67, 73 
EventDispatcherFactory 64, 117 
include in tests 197 
EventFactory 117 
exec-maven-plugin 181 
FaultEvent 69, 80 
Feathers, Michael 61 
Fill object 155 
Flash Builder 147 
Flash Player 10 
heart and soul of Flex 6 
Flash Player Security 
and RPC 97 
flashvars 190 
Flex 
application 
porting to a desktop environment 11 
building interface 9 
configure framework as a JMS consumer 230 
connecting to POJO 102 
creating domain classes 224 
DataGrid 4 
enabling security 132 
how application relates to view component 170 
integrating with Java 10 
laying out components 55 
modifying client for messaging 117 
MXML files and ActionScript classes 5 
specifying data binding 226 

238 
INDEX 
Flex (continued) 
stateful experience 4 
vising Degrafa 148 
ViewS tack 
See ViewS tack 
web services 62 
Flex 3 
open source 5 
Flex application 
differs from AIR application 176 
Flex Data Services 92 
Flex Messaging API 112 
Flex Mojos 38 
See also FlexMojos 
Flex SDK 4 
free and open source 6 
FlexBugs 
Maven multimodule project 16 
flexbugs.air 184 
flexbugsjsp 44 
flex-bugs-blaze-config 95 
FlexMojos 
unit testing support 194,196 
flex-spring-servlet.xml 101, 115, 132, 140 
FlexUnit 194 
asynchronous 205 
proceedOnEvent 197 
setUp 203 
tearDown 207 
[Test] annotation 201, 205 
testing pitfall 197 
FlexUnit4 194 
add dependencies 196 
FNA 39 
FooterView, creating 51 
Form 54, 227 
Formltem 54, 228 
Fowler, Martin 62 
functional testing 202 
FunFX 202 
FXG, Adobe graphics library 149 
GenericHibernateDao 23 
GenericManager 27 
GeometryGroup 149, 154 
getlssue 
testing 209 
global-method-security 138 
Glover, Andrew 219 
Google Code 190 
gradients 150 
Grails 11,218 
ActiveMQ plugin 229 
convention over configuration 220 
expose service 222 
grails create-domain-class 221 
grails create-service 222 
install Flex plugin 223 
install JMS plugin 230 
installing 219 
JMS plugin 229 
plugins 221 
running application 229 
graph model 
creating 163 
See also GraphModel 
GraphModel 
implementing 163 
GraphPresenter 161 
GraphView 
adding a label and combo box 151 
Presenter 161 
updating 159 
Grigg, Derrick 150 
Groovy 
much like Java 2.0 218 
specification 11 
Group 49, 127, 131, 173 
Flex component 155 
Growl, Flex application 165 
halo components 155 
Hamcrest 194, 204 
manually install dependencies 196 
matcher library 196 
HBox 155, 161 
HDividedBox 57 
header 
updating 131 
Header.mxml 49, 131 
Hello World! 44 
Hibernate 20, 24, 36, 225 
hibernate.cfg.xml 36 
HorizontalLayout 49, 127, 153 
HTTPChannel 117 
HTTPProxyAdapter 98 
HTTPProxyService 97 
HTTPService 62,207 
Hudson 210-217 
configure Maven 211 
configuring ajob 214 
email notification 211 
installing 211 
plugins 210 
Humble Dialog Box 61 

INDEX 
239 
I 
icons 
AIR applications 178 
index.template.html 44 
installer badge 186 
IResponder 69, 76, 104, 198, 209 
isNaN 74 
Issue 66 
IssueManager 137 
IssueManagerlmpl 102 
IssueModel 70, 208 
changing 118 
getlssues method 209 
updating 75 
ItemRenderer 55, 151, 154 
for pie chart legend 155 
J 
Java 
connecting with BlazeDS 104 
Java 2.0 218 
Java Community Process. SeeJCP 
Java Development Kit. See JDK 
Java Message Service. SeeJMS 
Java services 
exposing to Flex remoting 100 
Java Standard Tag Library. SeeJSTL 
Java Web Archive. See WAR 
JAVA_HOME 14 
java.lang.OutOfMemoryError 45 
JCP 11 
JDK 14 
installing 14 
version 211, 214 
JMS 10, 113 
configuration 231 
jmsConsumer 233 
JSON 162 
JSR241 11 
jsr250-annotations 138 
JSTL 31 
vs. hard coding 190 
JUnit 197 
JUnit4 194 
Law of Demeter 203 
layout components 225 
layout containers, nesting 55 
LDAP 123 
Lightweight Directory Access Protocol. See LDAP 
List 55, 82 
selectedlndex 82 
ListEvent 206 
LiveCycle Data Services 10 
log4j 
and BlazeDS 105 
configuring for BlazeDS file logging 105 
loglj.xml 105 
logging 105 
affects performance 108 
categories 107 
login manager 
creating 130 
login panel 
creating 126 
LOGIN_BUTTON_PRESSED 129 
LoginCommand 135 
LoginModel 130, 139 
LoginPanel 128 
LoginPresenter 
updating 141 
LoginPresenter class 
creating 128 
LOGOUT_BUTTON_PRESSED 129 
M 
M2_HOME 15 
Macromedia 3 
Main.mxml 45 
MainCanvas 172-173, 176 
master view 
enhancing 66 
updating 70 
See also MasterView 
master/detail view 46 
Master-Detail 219 
MasterPresenter 67, 196, 199 
getlssues 68 
getlssuesResult 68 
MasterPresenterTest 196 
MasterView 57 
creating view component 52 
initialize 203 
refreshList 72 
removeSelectedlssue 72 
See also master view 
Maven 7 
archetype 94 
BlazeDS JARs 93 
book 43 
build lifecycle 43 
convention over configuration 13 
dependencies 99, 172, 184, 194 
eclipse:eclipse 16 

240 
INDEX 
Maven (continued) 
Flex Mojos plugin 38 
heap space 45 
Hudson version 211 
idea:idea plugin 16 
installing 15 
jetty:run-war 19 
mvn archetype-create 39 
resources.xml 95 
Maven assembly 
install and deploy 96 
Maven module 
building BlazeDS configuration 94 
MAVEN_HOME 213 
MAVEN_OPTS 45, 215 
maven-assembly-plugin 95, 182 
maven-clean-plugin 184 
maven-dependency-plugin 42, 100, 187 
copy-dependencies 44 
copy-swf 44 
generate-resources 43 
process-classes 44 
unpack-config 43 
maven-resources-plugin 183 
Message 119 
MessageBroker 115 
MessageDestination 115 
MessageEvent 118 
Message PerformanceUtils 110 
messages 
pushing 115 
MessageService 115 
bidirectional messaging 112 
MessageTemplate 115 
messaging 
asynchronous 112 
BlazeDS support 92 
modifying client for 117 
mock testing framework 
mock-as3 194 
mock-as3 
expectations 200 
manually install dependencies 196 
verify 198 
See also Mockolate framework 
mockControl 197 
Mockery 196 
MocklssueService 207-208 
Mockolate framework 194 
mocks 
calls 207 
control 207 
stricts 198 
Model 61, 69 
testing 206, 210 
Model-View-Controller. See MVC 
Model-View-Presenter. See MVP 
MouseEvent 205 
MVC 28 
mvn archetypexreate 174,177 
mvn install 45 
mvn install:install-file 177 
mvn jetty: run-war 36 
MVP 9, 193 
design pattern 
Struts 2 28 
Passive View pattern 61 
MXML 
and ActionScript 5-6 
syntax 5 
my-polling-amf 114 
MySQL 13 
create database 15 
installing 15 
user and password 18 
N 
navigation components 48 
Nexus 96 
0 
object relational mapping framework 21 
object-oriented programming. See OOP 
ObjectProxy 66, 68, 80 
OOP 4 
packages 63 
packaging 
Flex and Java similar 49 
Panel 70, 76 
component 53 
Passive View 61-62 
PatternLayout 106 
performance testing 110 
personalization 124, 139-145 
pie chart 
adding to the application 159 
colors in legend 159 
creating 150-159 
legend 155 
model 158 
slice 
See PieChartSlice 
See also PieChart 

INDEX 
241 
PieChart 
createSlices 158 
model 158 
Presenter 156 
view 152 
PieChart.mxml 152 
PieChartEvent 151 
PieChartPresenter 164 
PieChartSlice 154 
plain old Java object. See POJO 
pointcut 134 
POJO 13 
connecting from Flex 102 
polling 
simple vs. long 114 
polling mechanism 
selecting 114 
POM 13 
artifactld 41 
configure top-level 98 
groupld 41 
packaging 41 
version 42 
pom.xml 
flex-bugs 40 
flex-bugs-web 42 
modules 98 
pop-up component 57 
PopupManager 85 
centerPopUp 85 
createPopUp 85 
Presenter 
for the GraphView 161 
Master View 67 
testing 196-202 
Presenter First 193 
project object model. See POM 
properties 
dynamically adding 164 
proxy-config.xml 96-97 
Raible, Matt 13 
record-message-sizes 110 
record-message-times 110 
Refresh Issues button 
testing click 204 
REFRESH_GRAPHS 162 
refreshComments 80 
RegularRectangle 155 
Remote Class 104 
RemoteObject 91, 139, 207, 227 
instead of WebService 105 
RemoteService 206 
remoting-config.xml 133 
resources.xml 95, 187, 230 
RESTful 10, 228 
ResultEvent 68-69, 79, 139, 142, 201 
RIA 4 
rich internet application. See RIA 
RichText 8 
ROLE_ADMIN 132, 136 
ROLEJJSER 132, 136 
RollingFileAppender 105 
RPC 
and Flash Player Security 97 
Scalable Vector Graphics. See SVG 
SDK 
See also Flex SDK 
secured-annotations 138 
security 
overriding default settings 137 
simplest form 124 
security constraints 
closer to code 134 
security.xml 134, 137 
Selenium-Flex-API 202 
sendPubSubJMSMessage 233 
Serializable 230 
interface 21 
service 
building 24 
service-oriented architecture. SeeSOA 
services-config.xml 70, 96, 107, 113, 231 
set property 
testing 203 
Shockwave Component. See SWC 
SimpleText 50 
singleton 65 
SiteMesh 44 
small web format. See SWF 
SmartSVN 172 
SMTP server 214 
SOA 92 
SOAP 10 
SOAPProxyAdapter 98 
SolidFill 155 
Sonatype 14, 177 
Nexus 96 
Sonatype Maven repository 196 
Spacer 50, 155 
Spring 
framework 20 
wiring together with 27 
Spring bean 
adding to Grails 230 

242 
INDEX 
Spring BlazeDS Integration 98 
add schema changes 101 
Flex remoting 102 
new logging object 105 
no remoting-config.xml file 103 
reduces complexity 94 
Spring Integration Security 135 
Spring Security 10, 124, 133 
advantage 124 
installed on AppFuse 137 
SpringSource 
Spring Blaze DS Integration 98 
streaming, vs. polling 114 
StreamingAMFChannel 117 
StreamingHTTPChannel 117 
strict mocks 198 
Stroke 
Degrafa object 149 
Struts 2 17,28 
language support 34 
MVC design pattern 28 
tag libraries 32 
wiring view components 35 
stub class 207 
Style 8 
Subversion 172 
Surface 154 
base comonent in Degrafa 149 
SVG 150 
SWC 169 
creating a project 170 
SWF 5 
adding a wrapper 44 
associate file with Flash Player 41 
swfobject 190 
Tamarin 7 
target/surefire-reports 206 
TDD 
basic workflow 193 
Test Driven Development. See TDD 
textAlign 51 
Thawte 178 
TitleWindow 58, 86-87 
ToggleButton 50 
ToggleButtonBar 48 
tweening 150 
u 
UlComponent 64 
UIEvent 
data 64 
unit testing 192 
mock testing framework 194 
and TDD 193-194 
unit testing framework. See FlexUnit4 
USER_LOGGED_IN 142 
userDao 138, 140 
UserEvent class 
creating 125 
UserService 
adding to LoginModel 140 
VDividedBox 57 
View 
testing 202 
ViewStack 47, 57 
in login panel 126 
navigation 48 
w 
Walls, Craig 133 
WAR 18 
Ward, James 92 
web services 
integrating with 9 
major styles 62 
web.xml 101 
WebService 60, 62, 70, 80, 85, 105, 207 
destinations 70 
loadWSDL 70 
wsdl 70, 81 
Wikimedia Commons 178 
WindowedApplication 176 
Winstone 211 
wireframe 83, 191 
wrapper 
HTML 44 

