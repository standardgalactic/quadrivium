©2019 MathByte Academy

"Read-Only" Properties
To create a read-only property, we just need to create a property with only the get accessor defined
à not truly read-only since underlying storage variable could be accessed directly
à useful for computed properties
class Circle:
def __init__(self, r):
self.r = r
def area(self):
return math.pi * self.r * self.r
c = Circle(1)
c.area() à 3.14…
class Circle:
def __init__(self, r):
self.r = r
@property
def area(self):
return math.pi * self.r * self.r
c = Circle(1)
c.area à 3.14…
feels more natural
since area is really a 
property of a circle
©2019 MathByte Academy

Application: Caching Computed Properties
Using property setters is sometimes useful for controlling how other computed properties are cached
à Circle
à area is a computed property
à lazy computation – only calculate area if requested
à cache value – so if re-requested we save the computation
à but what if someone changes the radius?
à need to invalidate the cache
à control setting the radius using a property
à we are now aware when the property has been changed
©2019 MathByte Academy

Application: Caching Computed Properties
class Circle:
def __init__(self, r):
self._r = r
self._area = None
setting _area cache to None
@property
def radius(self):
return self._r
@radius.setter
def radius(self, r):
if r < 0:
raise ValueError('Radius must be non-negative')
self._r = r
self._area = None
@property
def area(self):
if self._area is None:
self._area = math.pi * (self.radius ** 2)
return self._area
invalidate cache
calculate and cache area if not 
already cached
©2019 MathByte Academy

Coding
©2019 MathByte Academy

