Adam D. Scott
Collaborative Web 
Development

Adam D. Scott
Collaborative Web
Development
Boston
Farnham
Sebastopol
Tokyo
Beijing
Boston
Farnham
Sebastopol
Tokyo
Beijing

978-1-491-95558-1
[LSI]
Collaborative Web Development
by Adam D. Scott
Copyright © 2017 O’Reilly Media, Inc. All rights reserved.
Printed in the United States of America.
Published by O’Reilly Media, Inc., 1005 Gravenstein Highway North, Sebastopol, CA
95472.
O’Reilly books may be purchased for educational, business, or sales promotional use.
Online editions are also available for most titles (http://oreilly.com/safari). For more
information, contact our corporate/institutional sales department: 800-998-9938 or
corporate@oreilly.com.
Editor: Meg Foley
Production Editor: Colleen Cole
Copyeditor: Charles Roumeliotis
Interior Designer: David Futato
Cover Designer: Karen Montgomery
June 2017:
 First Edition
Revision History for the First Edition
2017-06-07: First Release
The O’Reilly logo is a registered trademark of O’Reilly Media, Inc. Collaborative Web
Development, the cover image, and related trade dress are trademarks of O’Reilly
Media, Inc.
While the publisher and the author have used good faith efforts to ensure that the
information and instructions contained in this work are accurate, the publisher and
the author disclaim all responsibility for errors or omissions, including without limi‐
tation responsibility for damages resulting from the use of or reliance on this work.
Use of the information and instructions contained in this work is at your own risk. If
any code samples or other technology this work contains or describes is subject to
open source licenses or the intellectual property rights of others, it is your responsi‐
bility to ensure that your use thereof complies with such licenses and/or rights.

Table of Contents
Preface. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  v
1. Introduction. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1
Our Responsibility                                                                               2
2. Code Quality. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  3
Code Standards                                                                                    4
Version Control                                                                                    7
Testing                                                                                                   8
Automation                                                                                         13
Pair Programming                                                                             14
Code Reviews                                                                                     15
Further Reading                                                                                 17
3. Open Source. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  19
Being an Open Source Maintainer                                                  20
Contributing to Someone Else’s Project                                         27
Further Reading                                                                                 28
4. Documentation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  29
The Eight Rules of Good Documentation                                      30
The Importance of the README                                                   32
Project Documentation                                                                     34
When Developers Are Your Customers                                         35
Wrapping Up                                                                                      35
Further Reading                                                                                 35
iii

5. Treating Other Developers with Respect. . . . . . . . . . . . . . . . . . . . . . .  37
Unconscious Bias                                                                               37
Creating Welcoming Environments                                               38
Further Reading                                                                                 39
6. In Conclusion. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  41
iv 
| 
Table of Contents

Preface
As web developers, we are responsible for shaping the experiences of
users’ online lives. By making ethical, user-centered choices, we cre‐
ate a better web for everyone. The Ethical Web Development series
aims to take a look at the ethical issues of web development.
With this in mind, I’ve attempted to divide the ethical issues of web
development into four core principles:
1. Web applications should work for everyone.
2. Web applications should work everywhere.
3. Web applications should respect a user’s privacy and security.
4. Web developers should be considerate of their peers.
The first three are all about making ethical decisions for the users of
our sites and applications. When we build web applications, we are
making decisions for others, often unknowingly to those users.
The fourth principle concerns how we interact with others in our
industry. Though the media often presents the image of a lone
hacker toiling away in a dim and dusty basement, the work we do is
quite social and relies on a vast web dependent on the work of
others.
What Are Ethics?
If we’re going to discuss the ethics of web development, we first need
to establish a common understanding of how we apply the term eth‐
ics. The study of ethics falls into four categories:
v

Meta-ethics
An attempt to understand the underlying questions of ethics
and morality
Descriptive ethics
The study and research of people’s beliefs
Normative ethics
The study of ethical action and creation of standards of right
and wrong
Applied ethics
The analysis of ethical issues, such as business ethics, environ‐
mental ethics, and social morality
For our purposes, we will do our best to determine a normative set
of ethical standards as applied to web development, and then take
an applied ethics approach.
Within normative ethical theory, there is the idea of consequential‐
ism, which argues that the ethical value of an action is based on its
result. In short, the consequences of doing something become the
standard of right or wrong. One form of consequentialism, utilitari‐
anism, states that an action is right if it leads to the most happiness,
or well-being, for the greatest number of people. This utilitarian
approach is the framework I’ve chosen to use as we explore the eth‐
ics of web development.
Whew! We fell down a deep, dark hole of philosophical terminology,
but I think it all boils down to this:
Make choices that have the most positive effect for the largest num‐
ber of people.
Professional Ethics
Many professions have a standard expectation of behavior. These
may be legally mandated or a social norm, but often take the form of
a code of ethics that details conventions, standards, and expectations
of those who practice the profession. The idea of a professional code
of ethics can be traced back to the Hippocratic oath, which was writ‐
ten for medical professionals during the fifth century BC (see
Figure P-1). Today, medical schools continue to administer the Hip‐
pocratic or a similar professional oath.
vi 
| 
Preface

Figure P-1. A fragment of the Hippocratic oath from the third century
(image courtesy of Wikimedia Commons)
Preface 
| 
vii

In the book Thinking Like an Engineer (Princeton University Press),
Michael Davis says a code of conduct for professionals
[p]rescribes how professionals are to pursue their common ideal so
that each may do the best she can at a minimal cost to herself and
those she cares about….The code is to protect each professional
from certain pressures (for example, the pressure to cut corners to
save money) by making it reasonably likely (and more likely then
otherwise) that most other members of the profession will not take
advantage of her good conduct. A code is a solution to a coordina‐
tion problem.
My hope is that this report will help inspire a code of ethics for web
developers, guiding our work in a way that is professional and inclu‐
sive.
The approaches I’ve laid out are merely my take on how web devel‐
opment can provide the greatest happiness for the greatest number
of people. These approaches are likely to evolve as technology
changes and may be unique for many development situations. I
invite you to read my practical application of these ideas and hope
that you apply them in some fashion to your own work.
This series is a work in progress, and I invite you to contribute. To
learn more, visit the Ethical Web Development website.
Intended Audience
This title, like others in the Ethical Web Development series, is
intended for web developers and web development team decision
makers who are interested in exploring the ethical boundaries of
web development. I assume a basic understanding of fundamental
web development topics such as HTML, CSS, JavaScript, and HTTP.
Despite this assumption, I’ve done my best to describe these topics
in a way that is approachable and understandable.
viii 
| 
Preface

CHAPTER 1
Introduction
I learned to be a web developer by working alone. It started when I
was a high school student in the mid-1990s and had the idea for a
website. I spent a lot of free time, in a spare bedroom at my parents’
house, copy and pasting HTML snippets that I found by clicking
View → Source in my web browser. In college, I majored in Multi‐
media Art, which required two programming classes. I took the
classes, working on the required projects alone in my dorm room.
After college, I took a break from the web to manage a bookstore
and spend time teaching, but a few years later my love of web devel‐
opment was rekindled. When this happened, I re-entered the world
of development through independent learning with books and tuto‐
rials, eventually doing independent contracting. It wasn’t until sev‐
eral years into my career that I partnered with another developer on
a project.
Now, my experience of solitude may be a bit extreme, but I imagine
that many of you reading this also got your start working alone.
Development is typically first learned as a deep-thinking and inde‐
pendent activity, yet in the workforce it is a highly social endeavor.
As professional web developers, we often partner with other devel‐
opers to build complex systems. To do this, we review and critique
one another’s code, come to common understandings, make com‐
promises, write documentation, and interact with open source in
ways that we were unable to do as solo learners.
1

Our Responsibility
The intent of this title is to provide guidelines for how web develop‐
ers can better work together. The four topics we will explore are:
• Writing quality code
• Contributing to open source
• Improving our documentation practices
• Recognizing the need for inclusion and collegial respect
If we define ethics as “making choices that have the most positive
effect for the largest number of people,” placing an emphasis on pos‐
itive collaboration is critical. Empathetic development practices lead
to the creation of empathetic products.
2 
| 
Chapter 1: Introduction

CHAPTER 2
Code Quality
You are not your idea, and if you identify too closely with your ideas,
you will take offense when they are challenged.
—Ed Catmull, Pixar cofounder and author of Creativity Inc.
In the book Let’s Talk About Love: A Journey to the End of Taste,
music journalist Carl Wilson mulls over what it means for some‐
thing to be good. The book focuses on the Celine Dion album that it
is named after, which has sold 31 million copies and is one of the
top-selling albums of all time. Despite this immense success, music
critics such as Wilson (and likely many of us reading this, author
included), are quick to dismiss Celine Dion’s music. The reason for
this disparity is that taste is subjective. Each of us brings our own
unique cultural experiences along with us when we enjoy (or don’t)
entertainment and art. Eighteenth-century philosopher David Hume
explored these ideas in detail, most notably in his essay “Of the Stan‐
dard of Taste,” stating that “Beauty is no quality in things them‐
selves: It exists merely in the mind which contemplates them.”
If things such the worthiness of art and entertainment are subjec‐
tive, what about the quality of code? Is good code subjective or
objective? This can be a challenging topic, as much like music we all
bring our own experience and assumptions to the discussion of
what constitutes “beautiful” code. With that in mind, I’ve sought to
identify a few object measures of code quality. Doing so allows us to
remove the risk of needless or even unhealthy debate that subjective
taste introduces to the development process. Instead, when follow‐
3

ing these guidelines, discussions can focus on outcomes and a
shared set of principles.
Good code does the following:
• Follows a set of standards
• Uses version control
• Is well tested
• Utilizes automated checks
Additionally, since code is often written in a collaborative or team
environment, we can leverage the processes of code reviews and pair
programming. Ultimately, code is intended to be executed by
machines, but read by humans. When we write code that follows
these guidelines, we create a codebase that is collaborative, under‐
standable, and can safely be changed without unintended conse‐
quences.
Code Standards
All code in any code-base should look like a single person typed it, no
matter how many people contributed.
—Rick Waldron, author of idiomatic.js
Perhaps one of the most straightforward things we can do to
improve our code quality is to follow a set of standards. Standards
are useful when working with a team, as they set clear expectations
for all team members and minimize syntax debates in code reviews.
Following standards creates code that is easier to read and under‐
stand, as there is not a mishmash of styles across the codebase.
When creating a style guide for an organization, I recommend treat‐
ing it as code and storing the guides in version control. This enables
easy contributions, a searchable history, the ability to open pull
requests, and issue tracking for proposed changes. For individual
projects following a code standard is useful too as it can help us
catch syntax errors and avoid the types of sloppy mistakes that can
result when working alone.
Following a standard does not mean creating a document from
scratch. Nearly every language has a number of style guides available
that range from small open source projects to official documents
created by large organizations. Some languages, such as Python,
have predominantly settled on a single standard (PEP 8). Below is a
4 
| 
Chapter 2: Code Quality

list of style guides in various popular languages. This is far from
complete, but I hope that it gives you a jumping-off point. I’ve tried
to provide a mix of community and corporate guidelines whenever
possible.
In short, successful standards follow these guidelines:
• Leverage community guidelines
• Automate compliance
• Are stored in version control
• Are easy to read and follow
Community Standards Guidelines
Many development communities and companies have openly shared
standards for web development. When choosing to implement
standards, it often makes sense to repurpose prior art and follow
existing guidelines. I’ve collected some of my favorites, in a range of
languages.
Multiple languages
• Google’s Style Guides
• Khan Academy’s Style Guides
• Thoughtbot’s Style Guides
JavaScript
• JavaScript Standard Style
• Airbnb JavaScript Style Guide
• JavaScript Quality Guide
• Idiomatic.js
• Node Style Guide
• Douglas Crockford’s Code Conventions
Python
• PEP 8
— The Elements of Python Style
• The Hitchhiker’s Guide to Python: Code Style
Code Standards 
| 
5

Ruby
• Ruby Style Guide
• GitHub’s Ruby Style Guide
• Shopify’s Ruby Style Guide
PHP
• WordPress PHP Standards
• FIG Standards
• PHP: The Right Way
• CodeIgniter Style Guide
Go
• Effective Go
• Go Code Review Comments
Java
• Java Programming Style Guidelines
• Twitter’s Java Style Guide
• Android’s Code Style for Contributors
HTML and CSS standards
• Code Guide by @mdo
• Khan Academy’s CSS Style Guide
• Primer
• Idiomatic CSS
• Airbnb CSS + SASS Style Guide
• CSS: The Good Parts
If you work for an organization that does not follow a set of stand‐
ards, I recommend researching various standards in the language of
your choice and introducing them to your colleagues. As a team you
may choose to follow a single standard or may prefer to adapt bits
and pieces from several standards into your organization’s own stan‐
dard. Though this may seem tedious and introduce debate, when
done correctly it can be an excellent team-building exercise and a
way of creating common expectations.
6 
| 
Chapter 2: Code Quality

Automate Standards Compliance
Standards are only as useful if they are put into practice. Introducing
a set of standards is a great first step, but next we must ensure that
they are followed. Manually reviewing code for standards accept‐
ance is a tedious process that code linting can help us to avoid.
There are two places in which linting should take place: our text edi‐
tors and anywhere our application’s test suite is run.
Text editors can be configured to run linting inline against our
standards. Most text editors have packages available for linting that
can be configured to a set of standards (or are automatically config‐
ured to a specific standard). Doing so allows us to see errors inline
and correct them quickly.
Even if we aim to lint our standards in real time with our text editor,
it is possible to miss something. With this in mind, we should also
run our linting anywhere that our test suite is run. This is particu‐
larly useful in build pipelines (which are discussed later in the chap‐
ter). Doing so will cause our tests to fail when standards are not
followed. If this is new to you, it may feel extreme, but this has the
advantage of removing the need for human interaction or discussion
from something that can be subjectively measured.
Version Control
Early in my web development career, I would be developing a
project in a folder on my machine and want to test out some major
changes. To do so, I would make a copy of the folder, named some‐
thing like “Project-EXPERIMENT.” By the end of a project I often
ended up with a dozen such folders, each with slightly different ver‐
sions of my code. It worked OK when I was working alone, but as
soon as another developer was involved, we would wind up emailing
files to each other or FTPing them to a server, hoping that our
changes didn’t accidentally negate the changes made by one another.
As you can imagine, this was a less than ideal way to work and col‐
laborate.
Using version control irons out the wrinkles in the above process.
Notably version control brings:
• Increased and straightforward collaboration
• Ability to reverse changes
Version Control 
| 
7

• Ability to “branch” versions of the project
• Code conflict resolution
If you are new to version control, I recommend using Git, which can
be combined with open source code hosting tools such as GitHub or
GitLab. There are many great resources for learning Git, among
them:
• Try Git
• Git-It
• Codeacademy’s Learn Git
Testing
Writing about testing is like writing about flossing. We all know that
we should do it, but, for many of us, at the end of a busy day some‐
times it’s easier to skip over it. “I’ll write those tests tomorrow,” we
say to ourselves, only to instead tackle the next important feature
when we sit down at our desk the next morning. Or, perhaps, you
don’t yet see the value in testing, instead thinking “I can see that it
works—why do I need to run tests?” If either of these descriptions
sound familiar, that’s OK. They certainly describe outlooks I’ve
taken at different points of my professional career. My hope in this
section is to demonstrate the value of testing as we look at two use‐
ful types of tests: unit tests and functional/browser tests.
Types of Testing Covered
For the purpose of this title we’ll be focusing on unit testing and
functional testing. In addition to these there are other forms of soft‐
ware testing that are worth exploring for your application, such as
performance testing (encompassing things such as stress testing,
scalability testing, load testing), security testing, and regression
testing.
Why Test At All?
This is the big question: why test at all? When we develop websites
and applications, we are running the site locally on our machine and
are able to see it working. This is a form of testing, but as you may
have encountered, it is incomplete, particularly as we build sites that
8 
| 
Chapter 2: Code Quality

have interactive features and user input. When we write tests we can
safely ensure that our code works as intended and doesn’t break pre-
existing features.
Unit Testing
The most straightforward way to think of a unit test is as a way to
test a very small aspect of our code. Typically this would be testing
that an individual function or method returns the expected value.
Consider the following example, written in JavaScript (the test for‐
mat is based on the Mocha testing framework with the Chai asser‐
tion library).
We’d like to write a function (called stayPositive) that always
returns a positive number when passed a value. Let’s first write our
test, which expects that a positive number (2) is equal to calling our
function and passing it the value 2.
it('should return a positive number when passed a positive', 
  function() {
    expect(stayPositive(2)).to.equal(2);
  }
);
Currently this test would fail, so let’s write the function:
var stayPositive = function(num) {
  return num;
}
If we ran our test again it would pass, but what if we write a test with
a negative number?
it('should return a positive number when passed a negative', 
  function() {
   expect(stayPositive(-2)).to.equal(2);
  }
);
In the above example we are passing a value of −2 and expecting our
function to return a positive value of 2. Based on our code, this
would fail, so we can rewrite our function to account for negative
numbers:
var stayPositive = function(num) {
  if(num > 0) {
    return num;
  } else {
    return -num;
Testing 
| 
9

  }
}
Now, if we were to run our unit tests they would pass! Hooray! But
what if the user passed a 0 or a string? How would our program
handle those?
it('should return 0 when passed 0', function() {
  expect(stayPositive(0)).to.equal(0);
});
it('should return an error when passed a string', function() {
  expect(stayPositive('Hello')).to.be.an('error');
});
We can then modify our code further to properly handle these types
of inputs. Writing unit tests such as these allows us to ensure our
applications are robust and able to handle a variety of potential out‐
comes.
Browser and Functional Testing
As web developers, our applications are executed in a web browser.
This means that there is a wide range of variable environments,
screen resolutions, and browser types in which our application
could be run. Our site may be accessed by a brand-new laptop,
viewed through a 4K resolution monitor over a fiber internet con‐
nection, or viewed on an outdated smartphone, using a carrier’s
stock browser, on a 3G connection.
The challenge of creating resilient applications that work in a variety
of environments is what makes web development challenging and
rewarding. If we seek to create inclusive applications, those access‐
ing our sites through outdated browsers and devices may be the
people who need the greatest access to our services.
To ensure the level of access that we expect, we will want to run
functional tests of our applications in a variety of operating systems
and browsers. Let’s look at two approaches for doing this: using
browser testing services and visiting a device lab.
Browser Differences
Emphasizing the need for browser testing does not equate to our
sites or applications working the same in every browser. If you are
interested in taking a tiered approach to browser support, I highly
10 
| 
Chapter 2: Code Quality

recommend reading about the approach of BBC News in their arti‐
cle Cutting the Mustard.
Browser testing services
There are a number of services that will allow us to test a range of
browsers on a number of operating systems without installing each
browser or running virtual machines. These services enable you to
load URLs and click through them in many combinations of mobile
and desktop browsers.
• BrowserStack
• Sauce Labs
• Browserling
Clicking through a site can be effective for small sites, but as your
project grows you may want to automate these types of tests. Sele‐
nium is a popular tool for automating browser actions. My preferred
setup is to use WebDriver.io’s Node/JavaScript Selenium bindings to
drive functional tests in combination with one of the above services.
Sauce Labs offers a helpful guide to using WebDriver.io as does
BrowserStack.
Regardless of method, integrating a browser testing service into our
workflow allows us to test our sites and applications on a range of
browsers that we may not otherwise have access to.
Device labs
Though browser testing services are incredibly useful, it can be a
rewarding (or frustrating!) experience to test our applications on a
variety of in-the-flesh physical devices. It’s particularly helpful to test
on some of the low-powered, budget-priced tablets and phones that
are popular with real users. Since few of us have a shelf full of devi‐
ces, some helpful folks have begun to curate what are known as
device labs to house a range of devices for testing purposes
(Figure 2-1). These device labs have popped up at co-working cen‐
ters, makerspaces, and local businesses. The Open Device Lab web‐
site seeks to compile these labs that are publicly accessible. If there
isn’t one in your area and you work for a co-located company with a
number of employees, you may also consider building your own lab.
Start with a few donated devices that you and coworkers may have
collecting dust on the shelf as a means of getting started.
Testing 
| 
11

Figure 2-1. The device lab at Clearleft (photo by Jeremy Keith)
Test-Driven Development
Test-driven development (TDD) is a development methodology that
emphasizes writing the test for a feature prior to implementing it.
This ensures high levels of code coverage, allows a developer to
make changes in confidence, and ensures feature completion. The
TDD process works as follows:
1. Add a test
2. Run all tests and see if the new test fails
3. Write the code
4. Run tests
5. Refactor code
6. Repeat
There are many great books and resources on TDD, so I won’t
retread that content here. If you are new to the TDD concept, I rec‐
ommended exploring resources and materials for TDD in your
chosen language or framework. Though it can be a paradigm shift,
12 
| 
Chapter 2: Code Quality

TDD can add a newfound level of robustness and confidence to the
development process.
TDD or BDD?
You may also come across the term behavior-driven development
(BDD). There are many debates on what exactly the difference is
between these two approaches. I prefer the one described by devel‐
oper Josh Davis in his post “The Difference Between TDD and
BDD”. Essentially TDD is the process and BDD is a more verbose
approach where the tests describe the expected behavior. These
tend to read like a sentence. Astute readers may notice that in the
unit testing example above we followed a TDD process with a BDD
syntax. I encourage you to explore both and find the approach the
works best for you.
Automation
Linting against your standards and writing tests are only useful
when they are run. When actively developing it’s easy to forget to
run a test suite against our changes before pushing or making a
codebase. Thankfully, automation is something that computers excel
at, so we can remove this responsibility from ourselves. For open or
closed source projects using a pull request model, we can use auto‐
mated tooling that will alert us when a pull request contains failing
tests or linting errors. This will ensure that this code does not enter
the codebase before these errors are corrected. When used as part of
a continuous integration pipeline, we can run our tests and cause a
build to fail when our tests fail, ensuring that we don’t ship broken
code.
For projects using GitHub and the pull request model, I recommend
Travis CI. Travis supports many languages and is free for open
source projects. It can also be configured to deploy to S3 and Her‐
oku environments. For internal environments, I recommend Jen‐
kins. Jenkins is a highly extensible, self-hosted, continuous
integration pipeline tool.
There are a number of alternatives available in a range of languages.
As always, do due diligence and find the tool that works best for you
and your collaborators. The important aspect is automating our tests
and ensuring they are passing before integration and release.
Automation 
| 
13

Pair Programming
Pair programming can be an extremely beneficial process, which
results in improved code and increased team collaboration. Pair
programming is the act of two developers programming together. In
this process, one person drives by physically typing code into the
computer, while the second person navigates by talking through the
code that is being written with the driver. When done well, pair pro‐
gramming is extremely effective.
There are a few requirements for pair programming to be effective.
First, both developers must treat each other with respect and as
equals. Perhaps the biggest and most common failure in pair pro‐
gramming that I have seen is when experienced developers are dis‐
missive of ideas made by junior developers. Successful pair
programming happens when both parties view it as an opportunity
to learn and grow.
Second, the pairing must be done in a welcoming environment. Do
you use Vim but your partner uses an IDE? Each person needs to
work in an environment in which they feel comfortable and able to
fully contribute. Just as arrogance can cause pair programming to be
ineffective, so can feelings of inadequacy.
Lastly, both developers must be fully engaged in the programming
activity. If the navigator finds themselves not paying attention,
checking their phone, or doing something counterproductive the
activity is detrimental. Successful pair programming requires the
full attention of both developers.
Frequency of Pair Programming
Some organizations practice full-time pair programming (some‐
times as part of the “Extreme Programming” methodology). As a
natural introvert, I’ve never been a big fan of this, preferring instead
shorter bursts of pair programming on a semi-regular or as-needed
basis. If you are interested in implementing pair programming at
your workplace, start small. Regularly ask colleagues to pair with
you and offer to drive. This takes the stress off of the colleague.
Once the benefits are clear, your colleagues are more likely to do
the same.
14 
| 
Chapter 2: Code Quality

Remote Pair Programming
Pair programming isn’t just for those who are co-located. In fact, as
a remote developer for the past four years I’ve found pairing to be
one of the best ways to connect with my remote colleagues. There
are a number of tools that enable remote pair programming. I’ve lis‐
ted a few below, but you may find that you need to experiment to
find a tool that works well for you and your colleagues.
Remote pair programming tools:
• Screenhero
• Floobits
• Motepair
• TeamViewer
Code Reviews
Often before code is merged into a codebase it is reviewed by other
developers. In a Git workflow this typically comes as part of the pull
request process. This type of critique process can be challenging.
Writing code is both a mental and creative process over which we
feel a sense of pride. When someone is critical of something we have
written it can be frustrating or even upsetting. As a person review‐
ing code, we are challenged to conduct a thorough review to ensure
that the code meets standards and expectations and fulfills require‐
ments while not being overly harsh. How then do we participate in
successful code reviews both as a reviewer and reviewee?
The design and development firm Thoughtbot has a thorough code
review guide that breaks down recommendations into three cate‐
gories: everyone, having your code reviewed, and reviewing code.
I’ve reprinted the Thoughtbot guide, with permission and some
modification, as they perfectly summarize the approach that I would
recommend.
Guidelines for Everyone Involved in a Code Review
Both the code author and the reviewer play an equally important
role in the code review process. To keep the process positive and
effective, all participants should aim to do the following:
Code Reviews 
| 
15

• Accept that many programming decisions are opinions. Discuss
tradeoffs that you prefer, and reach a resolution quickly.
• Ask good questions; don’t make demands. (“What do you think
about naming this :user_id?”)
• Good questions avoid judgment and avoid assumptions about
the author’s perspective.
• Ask for clarification. (“I didn’t understand. Can you clarify?”)
• Avoid selective ownership of code. (“mine”, “not mine”, “yours”)
• Avoid using terms that could be seen as referring to personal
traits. (“dumb”, “stupid”). Assume everyone is intelligent and
well-meaning.
• Be explicit. Remember people don’t always understand your
intentions online.
• Be humble. (“I’m not sure—let’s look it up.”)
• Don’t use hyperbole. (“always”, “never”, “endlessly”, “nothing”)
• Don’t use sarcasm.
• Keep it real. If emoji, animated gifs, or humor aren’t you, don’t
force them. If they are, use them with aplomb.
• Talk synchronously (e.g., chat, screensharing, in person) if there
are too many “I didn’t understand” or “Alternative solution:”
comments. Post a follow-up comment summarizing the discus‐
sion.
Guidelines for Having Your Code Reviewed
Having our code reviewed can be a stressful process. Remember that
the review is of the code, not you personally. With that in mind aim
to follow these guidelines:
• Be grateful for the reviewer’s suggestions. (“Good call. I’ll make
that change.”)
• Seek to understand the reviewer’s perspective.
• Explain why the code exists. (“It’s like that because of these rea‐
sons. Would it be more clear if I rename this class/file/method/
variable?”)
• Try to respond to every comment.
• Extract some changes and refactorings into future tickets/
stories.
• Link to the code review from the ticket/story
• Push commits based on earlier rounds of feedback as isolated
commits to the branch.
16 
| 
Chapter 2: Code Quality

• Wait to merge the branch until Continuous Integration tells you
the test suite has passed.
• Merge once you feel confident in the code and its impact on the
project.
Guidelines for Reviewing Code
Reviewing someone else’s code is a responsibility. To be an effective
code reviewer it is critical to first understand the author’s perspec‐
tive. Put yourself in their shoes and aim to communicate in a clear,
nonjudgmental fashion. Beginning with this empathetic perspective,
also aim to do the following in your review:
• Understand why the change is necessary (bug, user experience,
refactor).
• Communicate which ideas you feel strongly about and those
you don’t.
• Identify ways to simplify the code while still solving the prob‐
lem.
• Avoid focusing on trivial issues or things outside of the purview
of the changes being reviewed.
• If discussions turn too philosophical or academic, move the dis‐
cussion offline. In the meantime, let the author make the final
decision on alternative implementations.
• Offer alternative implementations, but assume the author
already considered them. (“What do you think about using a
custom validator here?”)
• Sign off on the pull request with a :thumbsup: emoji or “Ready
to merge” comment.
Further Reading
• Working Effectively with Legacy Code by Michael Feathers
• The Hitchhiker’s Guide to Python: Testing Your Code by Kenneth
Reitz
• “Code Review in the Lab” by Mozilla Science
• “Effective Code Reviews Without the Pain” by Robert Bogue
Further Reading 
| 
17


CHAPTER 3
Open Source
A knotty puzzle may hold a scientist up for a century, when it may be
that a colleague has the solution already and is not even aware of the
puzzle that it might solve.
—Isaac Asimov, The Robots of Dawn
I didn’t quite “get” open source software the first time I came across
it knowingly. I was a young technology-focused teacher, just scrap‐
ing by, and my interest in technology exceeded my expendable
income. This meant that at first, open source software was, in my
eyes, a stopgap to support my interests while avoiding both buying
expensive software or illegally pirating it. Gradually, a funny thing
happened: I stopped seeing open source tools as lesser options and
came to embrace both the software and the surrounding commu‐
nity. This grew into a feeling of awe as I came to greatly respect the
amount of volunteer, long-distance, asynchronous collaboration that
went into building fully fledged software.
By the time I discovered open source, it was far from new. Source
code has been freely distributed with some software since the days
of early computing. In the 1980s and early 1990s, the culture of free
software grew alongside the early internet. Linus Torvalds’s open
development of Linux, Richard Stallman’s Free Software Founda‐
tion, the transition of Netscape to Mozilla, and the Java program‐
ming language were all foundational elements in the development of
open source. Today, open source is bigger than ever. The prevalence
of Git and the popularity of GitHub has created a massive social hub
for open source.
19

Open source software is a hugely important part of technology cul‐
ture. The text editing tool that I am using to write this is open
source, the web browser that I am using to research this book is
open source, and the operating system running on my machine is
built upon the open source Unix OS. WordPress, the open source
blogging software, is estimated to run over 25% of all sites on the
web. Not only are large projects open source, but many of the sites,
tools, and applications that we rely on are built using smaller open
source libraries.
As web developers, it is inevitable that we interact with open source
in some way. For many developers that may be solely as consumers
of open source, but many of us may maintain our own projects or
contribute to others with code, bug reports, or support requests.
When we do so, we are taking part in a large social web of develop‐
ers. When our contributions are inclusive and empathetic we help to
create a better development culture.
Being an Open Source Maintainer
Being an open source maintainer often starts out simply: a devel‐
oper has an idea for a project or abstracts a piece of a larger project
and releases the source code. More often than not, this may be the
end of the work. The code is out in the wild for anyone to use, but
sometimes that code may be something that other developers find
useful. When we release open source code, we are now open source
maintainers.
As a project grows in popularity an open source maintainer also
becomes a shepherd of the culture that surrounds the project. Some‐
times that culture only consists of a handful of users with infrequent
interactions and other times it could become something that feels
like it needs near-constant care and attention.
If an open source maintainer is a cultural shepherd, what are the
ethical responsibilities of that role? Open source maintainers have
four primary concerns:
• Be kind, welcoming, and friendly
• Include and enforce a code of conduct
• Include a license
• Avoid burnout
20 
| 
Chapter 3: Open Source

Be Welcoming and Friendly
Perhaps the most important thing we can do as open source main‐
tainers is to be welcoming and friendly to those using our project.
The primary ways that we interact with users are through documen‐
tation and our responses to issues. These are both text-based medi‐
ums, which means that the reader does not have any of the physical
cues of conversation that aid in understanding our tone.
We’ll be covering documentation in the next chapter, but in brief
when writing documentation for our project we should aim to be as
inviting as possible. Users of our project may come from a range of
experience, skill levels, and cultural/language backgrounds. Great
documentation doesn’t make assumptions about what the reader
may already know or understand. It’s OK to provide quick instruc‐
tions for experienced users who just want to dive in, but also take
care in providing explicit instructions or linking to useful resources
to help less those with less experience understand the codebase as
well as the problem the code is attempting to solve. Doing so will
both set the tone for the project itself and aid in minimizing need‐
less issues being created.
Issues and bug fix requests are perhaps the most challenging part of
being an open source maintainer, particularly as a project grows in
popularity. Issue responses are where we interact with the commu‐
nity most directly. Consider these two common types of issue inter‐
actions.
Interaction #1: The frustrated user
User: This software is totally broken since the last update. This
needs to be fixed asap.
When we come across these types of issues and requests it can be
very frustrating. This is our work and is something that we likely
take pride in. Not only that, but we’ve shared it publicly and freely,
while working on it in our precious spare time. That means time
away from family, friends, and other things that we love outside of
programming. As such, it can feel upsetting or even infuriating
when someone is overly critical or makes demands of our projects.
The most important thing we can do when we come across these
types of issues is to react calmly. On the internet this is often
referred to as “don’t feed the trolls.” There is nothing wrong with
Being an Open Source Maintainer 
| 
21

closing an issue with a simple “I’m sorry this does not meet your
needs.”
We can also take a proactive approach toward mitigating these types
of issue creators by including templates for issues and pull requests
in our projects. GitHub offers the ability to include templates in
your project that will create an outline for every new issue and pull
request that is created. Good templates will provide a framework for
contributors to create issues and contribute to the project, poten‐
tially alleviating the lack of context that these often contain. Devel‐
oper Steve Mao has created a helpful set of example templates and a
collection of example issue and pull request templates has been col‐
lected by the project Awesome GitHub Templates.
Interaction #2: The curt maintainer
User: I’m having trouble with X in Y environment. I’ve tried rein‐
stalling with the latest patch but haven’t had any luck. Any ideas?
Maintainer: This is a known issue. Update the dependencies.
The above may not look too bad. Likely, as a maintainer we’re doing
this work in our spare time while doing our best to respond to as
many issues as possible. However, to a user, a response such as the
above may come across as dismissive or even hostile. If they are fil‐
ing an issue, it is likely that they are either trying to help or have
come across a bug that impacts what they are working on. A short
response from us can make them less likely to help in the future or
serve to compound their frustration. Let’s consider how else we
could respond, but first let’s take a quick detour into communication
theory. In his book Nonviolent Communication: A Language of Life,
Dr. Marshall B. Rosenberg lays out a process for positive communi‐
cation. The four key steps to this process are:
1. Observations: objectively describing the situation.
2. Feelings: saying how you feel about what you’ve observed.
3. Needs: the needs that are not being met due to these feelings.
4. Requests: making clear request for action.
All of the above are done without assigning any form of blame. By
adapting our response, based on Dr. Rosenberg’s model, we can
improve our issue response.
First make an observation by restating the problem and acknowl‐
edging the user’s feelings:
22 
| 
Chapter 3: Open Source

Hi @user, I’m sorry that you are having trouble with X in the Y
environment, that can be really frustrating.
Next, describe how the users needs may be met:
I’ve come across this issue before and it can usually be resolved by
updating the dependencies. The best way to do that is to remove
the dependency directory and reinstall. Here are the commands for
doing that...
Lastly, make a request for further action or follow-up from the user:
Please let me know if this has resolved your issue.
Putting this all together, our response may look something like this:
Maintainer: Hi @user, I’m sorry that you are having trouble with X
in the Y environment. I’ve come across this issue before and it can
usually be resolved by updating the dependencies. The best way to
do that is to remove the dependency directory and reinstall. Here
are the commands for doing that:
<div class="editor--private">
<div class="editor-contents--private">
<div class="scroll-view">
<div class="lines">
<div class="line" data-screen-row="2">
<pre data-type="programlisting">
rm -rf node_modules
npm install
</pre>
</div>
</div>
</div>
</div>
</div>
Please let me know if this has resolved your issue.
In this response we acknowledged the user’s problem by restating it,
addressed the user’s needs with a concrete recommendation fix and
a simple description if they are unfamiliar, and made a clear request
for them to verify the fix. Though this response is longer, it would
have only taken an extra minute to type out and goes a long way
toward building a more welcoming community.
When You’re Too Busy
Sometimes as an open source maintainer we just don’t have time to
respond to issues in a timely manner. We’re busy at work, on vaca‐
tion, or have a lot happening in our personal lives. This is OK (and
Being an Open Source Maintainer 
| 
23

good!). We shouldn’t feel a persistent obligation in these scenarios.
Instead, when you get a chance simply respond to issues with an
acknowledgment such as “I’m sorry for the slow response. I’ve been
traveling. If this is still an issue, do you mind responding and I will
see what needs to be done to address it. Thank you!”
Using bots
For very active open source projects, I love the bot recommendation
made by Felix Krause in his article, “Scaling Open Source Commun‐
ities”. In the article he demonstrates how the fastlane project uses
bots to auto-check that new issues contain all of the required infor‐
mation as well as for closing stale issues. This both reduces the bur‐
den of response on the maintainer and reduces friction with the
community by clearly and consistently following the same guide‐
lines for all issues.
Open Source Codes of Conduct
Perhaps one of the most important documents that can be included
in a project is a code of conduct. A good code of conduct will estab‐
lish clear expectations for positive interaction among the commu‐
nity as well as outcomes for those who fail to meet those
expectations. The goal of the code of conduct is to provide guide‐
lines for an open and inclusive community around our projects.
In her article Codes of Conduct 101 + FAQ, programmer, advocate,
and consultant Ashe Dryden describes a successful code of conduct
as needing these four parts:
• A statement of unacceptable behavior
• Information on how the policy will be enforced
• Information on how and whom to make an incident report to
• Training and reference materials for organizers, staff, and vol‐
unteers on how to respond to incident reports
For establishing a statement of unacceptable behavior and including
information on how the policy will be enforced, I recommend using
or at least basing your policy on the Contributor Covenant. The
Contributor Covenant is a Creative Commons licensed resource
that includes a pledge of inclusion, standards of behavior, examples
of both model and unacceptable behavior, responsibilities of the
maintainers, information on how to report incidents, and enforce‐
24 
| 
Chapter 3: Open Source

ment information. To include the Contributors Covenant in your
project, I recommend adding a code_of_conduct.md file the to the
project files along with a link in the project README that states:
## Code of Conduct
This project adheres to the 
[Contributor Covenant 1.4][code-of-conduct.md]. 
By participating, you are expected to honor this code. 
Please report unacceptable behavior to user@example.com.
Including the code of conduct is only the first step. We must also be
prepared and informed to take action should an incident occur. For
these incidents, the Django Project has a very useful enforcement
manual. For large or active projects, I recommend adapting this
manual to meet the needs of your project and publicly sharing the
commitment to enforcement. For a project with multiple maintain‐
ers, it is critical that the entire team is well-versed in both the code
of conduct as well as the enforcement actions that may be taken.
Open Source Licenses
Some people in the open source community feel very strongly about
a particular license. I am not here to indoctrinate you into using a
particular license, but simply to encourage you to use a license. The
Open Source Initiative maintains a canonical list of licenses
approved by the organization, the most popular of which are:
• Apache License 2.0
• BSD 3-Clause “New” or “Revised” license
• BSD 2-Clause “Simplified” or “FreeBSD” license
• GNU General Public License (GPL)
• GNU Library or “Lesser” General Public License (LGPL)
• MIT license
• Mozilla Public License 2.0
• Common Development and Distribution License
• Eclipse Public License
The benefit of applying a license is that it allows you to create the
terms by which your project can be used. The MIT license, for
example, allows users to use your code in any way they choose as
long as they provide some form of attribution. By contrast, the GPL
requires that any derivative work license itself under the same terms,
which effectively prohibits the formation of closed source projects
Being an Open Source Maintainer 
| 
25

using code licensed under the GPL. By choosing a license for your
code, you are indicating how it may be used and credited. Doing so
also opens our projects up to being used (or not) by organizations
who may be unable to do so with unlicensed code.
The simplest way to include a license in your project is to include
the license text or a declaration of which license is being used at the
bottom of the project’s README. You may also include the full text
of the license in a file name LICENSE at the top level of the project.
If you are unsure of which license to apply to your projects, I recom‐
mend the guide at choosealicense.com. The site, created by GitHub,
guides users to popular licenses based on specific needs and con‐
cerns.
Avoiding Maintainer Burnout
If all of the above sounds exhausting, that’s because it often is. Being
an open source maintainer is a lot of work and is often done as an
extracurricular hobby outside of work hours. This means that open
source development is relegated to those who are privileged with
free time, which may not be an ongoing possibility as a developer’s
life changes. Due to the demands, time commitments, and, at times,
guilt that comes along with being an open source maintainer, many
eventually experience burnout.
If this all feels familiar, I’d encourage you to read the perspective of
developers who have battled with open source burnout:
• “Maintainer’s Guide to Staying Positive” by Jon Schlinkert
• “What It Feels Like to Be an Open-Source Maintainer” by Nolan
Lawson
• “How to Avoid Burnout Managing an Open Source Project” by
Dawn Foster
• “Dear JavaScript” by James Kyle
If you have been contributing to open source and feel burnt out, I’d
offer these three pieces of advice:
Take care of your health and well-being
Things like sleep, nourishment, and time with friends and fam‐
ily are important. Though the speed of change in web develop‐
ment can cause us to feel like we must be constantly involved,
being a well-rounded and healthy human will help us to also be
better developers.
26 
| 
Chapter 3: Open Source

It’s OK to ignore things
As issues and pull requests pile up, we may become over‐
whelmed or even guilty due to the lack of action. Nearly every
time I’ve spoken to the author of a popular open source project,
they mention a feeling of guilt for not addressing a bug or
responding to outstanding issues. Though it may be difficult to
do, it’s important to let go of the nagging feeling that these cre‐
ate and accept that it’s impossible for one person to respond to
every need of a project.
Don’t be afraid to deprecate a project
When a project has completely lost your interest or attention, it
may be better to deprecate the project or hand it over to other
maintainers. The easiest way to do this is to place a large DEP‐
RECATED notice in the project description and README. You
can also offer to transfer ownership of the project if someone
else is interested in taking it over. This signifies to users that you
will no longer be responding to issues or contributing new fea‐
tures and bug fixes. Doing so is not admitting defeat, but rather
allowing ourselves to move on to different things.
Contributing to Someone Else’s Project
There are a number of ways in which we may contribute to open
source projects without being a project maintainer. These may
include contributing code, filing bug reports, improving documen‐
tation, and requesting support. As soon as we perform any of these
actions, we are a part of the community that surrounds the project.
Similar to his resource for open source maintainers, developer Jon
Schlinkert has written a Guide to Idiomatic Contributing, which is a
useful reference for anyone looking to be involved in an open source
community.
In general, contributors to open source should seek to:
• Always follow a project’s code of conduct.
• Familiarize themselves with the goals and scope of the project.
• Check for existing issues or bug reports before filing a new one.
• Be kind to the project maintainers and other community
members.
• Follow the coding conventions that the project already has in
place.
Contributing to Someone Else’s Project 
| 
27

• Write tests for any new features or code changes. If a test suite is
not in place, describe how the maintainer can test your changes.
• Be patient and recognize the right of the maintainers to be slow
to respond.
• Be accepting of rejection when a project chooses not to merge
code or implement a recommendation.
Participating in an open source community can be a wonderful
experience. Following the guidelines above as well as being aware of
the challenges placed upon open source maintainers can help us be
positive community contributors.
Further Reading
• The Cathedral & the Bazaar by Eric S. Raymond
• Open Source Guides
• Producing Open Source Software by Karl Fogel
• “Scaling Open Source Communities” by Felix Krause
• “A Template for Creating Open Source Contributor Guidelines”
by Safia Abdalla
28 
| 
Chapter 3: Open Source

CHAPTER 4
Documentation
Writing is hard work. A clear sentence is no accident.
—William Zinsser, author of On Writing Well
I’m going to begin this chapter by describing two common scenarios
in the life of a developer.
In our first scenario, meet Harlow. Today is Harlow’s first day on a
new project. The team has a well-established codebase, a great work‐
ing environment, and a robust test suite. As Harlow sits down at her
desk, she’s excited to get up to speed with the team. After the morn‐
ing stand-up meeting she’s pointed to the project’s documentation
for installation with a slight grimace from her colleague Riley. He
mentions that the docs “might be a little out of date, but should
hopefully be enough to get you going.” Harlow then spends the rest
of the day following the documentation until she gets stuck at which
point she is forced to dig through code or ask colleagues for guid‐
ance. What might have taken a few minutes becomes a day-long
exercise in frustration, tampering Harlow’s initial excitement.
In our second scenario, meet Harrison. He’s working on a web app
and finds a library that, at first glance, seems incredibly useful for
his project. As he attempts to integrate it with his codebase he dis‐
covers that parts of the API seem to be glossed over in the docu‐
mentation or even undocumented. In the end, he walks away from
the project in favor of another solution.
Though these scenarios may be slightly exaggerated, but I’m reason‐
ably certain that many of us can relate. These problems were not
29

primarily caused by low-quality code, but rather by poor documen‐
tation.
If useful documentation is so important to the success of projects
and developer well-being, why don’t all projects have it? The answer,
I believe, is that like good code, good documentation is difficult and
time consuming to write. The goal of this chapter is to convince you
that writing good documentation is deserving of your valuable
attention as well as provide you with concrete guidelines for doing
so.
The Eight Rules of Good Documentation
In my eyes there are eight rules that we can follow to produce good
documentation:
1. Write documentation that is inviting and clear
2. Write documentation that is comprehensive, detailing all
aspects of the project
3. Write documentation that is skimmable
4. Write documentation that offers examples of how to use the
software
5. Write documentation that has repetition, when useful
6. Write documentation that is up-to-date
7. Write documentation that is easy to contribute to
8. Write documentation that is easy to find
The most important rule of good documentation is for it to be as
inviting as possible. This means that we should aim to write it in the
clearest terms possible without skipping over any steps. We should
avoid making assumptions about what our users may know. Some‐
times this can seem to be overkill and we may be tempted to say
something like “every X developer knows about Y,” but we each
bring our own background and set of experiences to a project.
Though this may result in more verbose documentation, it is ulti‐
mately simpler as there is less guesswork involved for developers
with all levels of experience.
Our documentation should aim to be comprehensive. This means
that all aspects of the project are documented. Undocumented fea‐
tures or exceptions can lead to frustration and become a time suck
as users and other developers are forced to read through code to
30 
| 
Chapter 4: Documentation

find the answers they need. Fully documenting all features takes
away this kind of ambiguity.
When we write documentation that is skimmable we help users find
the content they need quickly. Making documentation skimmable
can be accomplished by using clear headings, bulleted lists, and
links. For large project documentation a table of contents or clear
navigation will help users to skip straight to what they need, rather
than scrolling through a single long document.
Documentation that features examples allows users to see how they
might use the code themselves. Aim to provide examples of the most
common use cases for the project, while letting the comprehensive
documentation detail every possibility.
It is perfectly acceptable to include some repetition in our documen‐
tation, which the Write the Docs project terms ARID (accepts
(some) repetition in documentation). Doing so acknowledges that
users may not read the full docs or that some information is relevant
in multiple places in the documentation. While good code may be
DRY, good writing aims to be clear and sometimes this means
repeating ourselves. The Write the Docs project calls out the the dif‐
ference between writing that is ARID, DRY, and WET in this way:
The pursuit of minimizing repetition remains valiant! ARID does
not mean WET, hence the word choice. It means: try to keep things
as DRY as possible but also recognize that you’ll inevitably need
some amount of “moisture” to produce documentation.
Effective documentation is kept up-to-date. This is surprisingly chal‐
lenging. We may begin our project with the best of intentions and
great documentation, but as our software evolves and we are quickly
iterating it can be easy to fall out step. If you are working as part of
an agile development team, I recommend adding documentation to
your team’s “definition of done.” For independent projects, try to
treat documentation as an important final step.
Documentation that is easy to contribute to is also easy to keep up-
to-date. The simplest way to make documentation easy to contribute
to is to treat it as code, storing it as text in source control. The site
and book Docs Like Code advocates for treating our docs like our
code by using source control, automating builds, and applying soft‐
ware development tools and techniques to our documentation prac‐
tices.
The Eight Rules of Good Documentation 
| 
31

Documentation is only as helpful as it is easy to find. Keeping an
updated README file and linking to more extensive documenta‐
tion at the top of the README when necessary helps to keep dis‐
coverability simple.
I hope that these guidelines are useful as you draft your project’s
documentation. Sometimes it is helpful to remember that documen‐
tation isn’t just for other developers, but often for our future selves
as well. When we return to a project after a number of months, we
will appreciate the work we put into clear and up-to-date documen‐
tation.
The Importance of the README
For many developers, a project’s README will be their introduction
to a piece of software. For small projects, the README may be its
only form of documentation. Successful READMEs are both infor‐
mative and inviting, giving the reader a solid understanding of the
project and providing the confidence needed to use the software.
Successful READMEs contain a combination of several key ele‐
ments. Most importantly the README should be up-to-date and
provide a useful getting started guide, written in a warm and wel‐
coming tone. Here are the key components of a good README:
• A brief (one paragraph or less) description of the project
• A list of the key features of the software
• A getting started guide that details the installation steps, guide‐
lines for usage, and instructions for building and deploying the
software, if applicable
• Information on where to go if the user needs help, such as the
issue tracker, IRC channel, or a core developer’s email address
• Guidelines for how to contribute to the project, including how
to file a pull request, coding standards, and how to run the test
suite
• A code of conduct for the project that demonstrates inclusion
and outlines clear enforcement actions
• A license for the project
Most importantly, a project’s README needs to be kept up-to-date.
Few things are more frustrating than discovering that a feature doc‐
umented in the README has changed or been removed. Marc
Esher, a software development manager at the Consumer Financial
32 
| 
Chapter 4: Documentation

Protection Bureau, wrote about holding a README Refresh Day
with the development team. If you work on a team, doing events
such as these regularly can be a great way to both improve the con‐
tents of your READMEs and to explore software built by other
teams.
README Template
Here’s a README template that can be used for your own projects.
Feel free to adapt it to your project’s needs.
# Project Title
Provide a brief (1 paragraph or less), meaningful description of 
the project and what it does. If the project has a UI, include a 
screenshot as well.
If more comprehensive documentation exists, link to it here.
## Features
Describe the core features of the project (what does it do?) in 
the form of a bulleted list:
- Feature #1
- Feature #2
- Feature #3
## Getting Started
Provide installation instructions, general usage guidance,
API examples, and build and deployment information. Assume as 
little prior knowledge as possible, describing everything in 
clear and coherent steps. Avoid words such as "just" and 
"simple," which can be off-putting to users who do not 
understand the instructions.
### Installation/Dependencies
How does a user get up and running with your project? 
What dependencies does the project have? Aim to describe  
these in clear and simple steps. Provide external links.
### Usage
Provide clear examples of how the project may be used. For large 
projects with external documentation, provide a few examples and 
link to the full docs here.
### Build/Deployment
The Importance of the README 
| 
33

If the user will be building or deploying the project, add any 
useful guidance.
## Getting Help
What should users do and expect when they encounter bugs or get 
stuck using your project? Set expectations for support, link to 
the issue tracker and roadmap, if applicable.
Where should users go if they have a question? (Stack Overflow, 
Gitter, IRC, mailing list, etc.)
If desired, you may also provide links to core contributor email 
addresses.
## Contributing Guidelines
Include instructions for setting up the development environment, 
code standards, running tests, and submitting pull requests. 
Aim to be inclusive and welcoming. It may be useful to link to 
a seperate CONTRIBUTING.md file. See this example from the 
Hoodie project as an exemplar:
https://github.com/hoodiehq/hoodie/blob/master/CONTRIBUTING.md
## Code of Conduct
Open source projects should follow a code of conduct. Provide a 
link to the Code of Conduct for your project. I recommend using 
the Contributor Covenant:
http://contributor-covenant.org/
## License
Include a license for your project. If you need help choosing a 
license, use this guide: https://choosealicense.com/
I’ve open sourced this template and provided guidelines for use at
https://github.com/ascott1/readme-template.
Project Documentation
Larger codebases will require documentation that extends beyond a
README. In these instances a good README (or READMEs if the
project is split into several smaller codebases) is still an incredibly
valuable starting point. It is also helpful to keep the documentation
as near to the code as possible. This may mean generating a static
website from plain text or markdown files and storing it in the same
34 
| 
Chapter 4: Documentation

code repository or using the repository wiki provided by a source
control hosting provider.
One other important aspect of large project documentation is to use
it as a means for capturing decision making whenever possible. As
developers we are constantly making tradeoffs and decisions that
may have impacts on the functionality or use of the codebase. When
we capture these ideas, future developers are able to understand the
thinking behind this decision. All too often, when decision making
is not captured, developers will attempt to re-architect something
until they hit the same wall. This “oh, I see why they did it that way”
epiphany and wasted energy can be avoided when we accurately
capture the thinking behind our decisions.
When Developers Are Your Customers
For some organizations, developers are our customers. We may
build products that handle authentication, messaging, deployment
jobs, site availability monitoring, etc. For these types of products,
documentation needs to always be treated as a first-class citizen, as it
is the way our customers learn about our product.
The messaging service Twilio is a great example of this. The Twilio
docs are exemplary, covering a wide range of languages, providing
quick start guides, and offering interactive tutorials, and a full API
reference. The Twilio organization recognizes the value of these
docs, employing a team of developers to work on their documenta‐
tion and the associated tooling full time.
Wrapping Up
By focusing on writing good documentation, we are showing empa‐
thy for the developers who use our project. Doing so helps to create
a project environment that is inclusive, welcoming, and collabora‐
tive.
Further Reading
• Write the Docs Documentation Guide
• Docs Like Code by Anne Gentle
• “Writing Great Documentation” by Taylor Singletary
• Beautiful Docs
When Developers Are Your Customers 
| 
35


CHAPTER 5
Treating Other Developers
with Respect
This will be the shortest chapter of the series, but is likely the most
important. It is critical that we treat our colleagues with respect. The
primary way we do this is by working to create an inclusive and safe
environment for everyone regardless of gender, race, sexual orienta‐
tion, age, or cultural background. Whether it is online, at work, at a
meetup, or attending a conference, be kind and respectful to those
around you. In this chapter, we’ll briefly touch upon unconscious
bias and creating inclusive environments.
Unconscious Bias
In the 1970s the typical orchestra was comprised of of over 90%
male musicians. Today orchestras are more likely made up of one-
third female musicians, with the likelihood that a woman musician
will be selected increasing by 30-60%. What changed to spur this
increase in female classical musicians? It was the introduction of
blind auditions. Today’s selection process has musicians audition
without being seen by the judging committee. Early on, this was
proven to require further modification as women began removing
their shoes, so that judges would not hear the tell-tale sound the
shoes made when the musician approached the chair. This is an
example of unconscious bias. The judges largely assumed, presuma‐
bly without intention or awareness of their preference, that men
37

were better musicians. When the chance for this bias was removed,
more women were selected.
Unconscious biases are stereotypes that we hold without being
explicitly aware of them. They are often the result of quick judg‐
ments, which are “a feature of evolution,” according to Harvard psy‐
chology professor Mahzarin Banaji. For early humans it was useful
to quickly categorize things, such as predators or potential threats.
Today, we retain this skill, and while in many life situations bias
serves as a decision-making shortcut, it can also have unintended
negative consequences, particularly when it applies to how we think
about other people.
The fact that these are implicit biases means that we are making
judgments that we are unaware of. Because of this, the first step is to
gain awareness of the unconscious biases that we may contain. Har‐
vard’s Project Implicit has created a series of implicit association
tests, which allow users to perform a series of online actions that
may help to reveal hidden biases.
Recently, Google has undertaken an intensive unconscious bias
training effort with employees and offers the training materials as
part of their ReWork project. These materials include video infor‐
mation, links to scientific studies, and the full training materials
used by Google. Other large tech companies have undertake similar
efforts, with Microsoft offering a full online training module and
Facebook providing a series of video lecture modules.
By becoming more aware of how we may be influenced by our
unconscious biases, we are able to improve how we collaborate with
our colleagues and peers.
Creating Welcoming Environments
Just as we discussed creating inclusive spaces for open source
projects, we should seek to do the same for physical spaces. Codes of
conduct should also be applied to events such as meetup groups,
hackathons, and conferences. If you work for a small company,
ensure they also have clear conduct policies in place. Here are a few
resources for in-person event codes of conduct:
• Ada Intiative’s “HOWTO Design a Code of Conduct for Your
Community”
• Hack Code of Conduct
38 
| 
Chapter 5: Treating Other Developers with Respect

• Geek Feminism’s conference anti-harassment policy
• Citizen Code of Conduct
Community Manager Sarah Jane Morris has put together a guide for
hosting inclusive events, which serves as a useful template for creat‐
ing a positive atmosphere. Though some of the resources are Bay
Area specific, it offers a solid template for creating a welcoming
event culture. If we are involved in organizing an event, we may also
want to consider alternatives to the typical happy hour or alcohol-
centric venues. In her article “Alcohol and Inclusivity: Planning Tech
Events with Non-Alcoholic Options”, Community Manager Kara
Sowles suggests five tips for including non-alcoholic drinks at
events:
1. Provide an equal number and quality of alcoholic and non-
alcoholic drink options.
2. Display alcoholic and non-alcoholic drinks together at the
event.
3. Advertise alcoholic and non-alcoholic drinks equally before the
event.
4. If listed cocktails are being served, list an equal number of non-
alcoholic mocktails.
5. Have water freely available, in clear sight, and easy to obtain.
Taking these types of considerations is not limited to events. In a
profile of the Portland, Oregon startup PayRange, CEO Paresh Patel
discussed the company’s decision to readdress some of the typical
startup office perks:
We don’t have kegs in our office, those can make some people
uncomfortable. We don’t have pool tables. We don’t have Friday
happy hour. Instead, we have family nights out for dinner, vegeta‐
rian microwaves, summer picnics where employees can have fun
with their kids.
These are just a few examples of how more welcoming environ‐
ments are created. By focusing on the needs and well-being of every‐
one, we are able to build stronger communities.
Further Reading
We must all do our part to create an inclusive work culture.
Whether we work remotely or are co-located, we all spend a lot of
time with coworkers. For many of us, web development extends
Further Reading 
| 
39

beyond being a day job into our social lives and hobbies. The guides
and articles below are all incredibly useful tools for building positive
environments.
• Project Include
• Hire More Women in Tech
• Ally Skills Workshop
• “How Diversity Makes Us Smarter” by Katherine W. Phillips
• Model View Culture
40 
| 
Chapter 5: Treating Other Developers with Respect

CHAPTER 6
In Conclusion
Thank you for taking the time to read Collaborative Web Develop‐
ment. I hope that through reading this title you see the value in
building an inclusive developer environment that focuses on quality
and takes advantage of the open source community. This encom‐
passes a small portion of the work we can do as web developers to
ensure that the web is an open and accessible space for all users. My
hope is that you now feel empowered and excited to build applica‐
tions in this way.
If throughout your reading you have come across things that are
missing or could be improved, I would encourage you to contribute
back to the book. This title is available as open source at https://
github.com/ascott1/ethical-web-dev/. Contributions can be made by:
• Contributing directly to the GitHub repository with a pull
request
• Creating an issue in the book’s GitHub repository
• Reaching out to me through email (adamdscott@proton‐
mail.com) or Twitter
Twenty percent of the proceeds from each Ethical Web Develop‐
ment title will be donated to organizations whose work has a posi‐
tive impact on the issues described. For this title, I will be donating
to Mozilla and Girl Develop It. Mozilla is a nonprofit organization
which provides software, documentation, and education for the
open web. Girl Develop It offers classes and community support for
41

women of diverse backgrounds who are interested in learning web
and software development.
If you’ve enjoyed this title, I hope that you’ll join me in supporting
these two great organizations.
This title is the fourth in a series of digital reports I am authoring on
the subject of ethical web development. Future titles in the series
will cover building web applications that work everywhere, building
web applications that respect a user’s privacy and security, and
working with development peers. You can learn more about the ser‐
ies at ethicalweb.org.
42 
| 
Chapter 6: In Conclusion

About the Author
Adam D. Scott is a developer and educator based in Connecticut.
He currently works as the development lead at the Consumer Finan‐
cial Protection Bureau, where he leads a team of open source devel‐
opers. Additionally, he has worked in education for over a decade,
teaching and writing curriculum on a range of technical topics.
Adam’s first book, WordPress for Education (Packt), was published in
2012. His video course, Introduction to Modern Front-End Devel‐
opment, was published by O’Reilly in 2015. This is the fourth title in
a series on the ethics of web development published by O’Reilly.
Acknowledgments
Meg Foley provided support as editor of this report. Contributions
and suggestions have also been made to the Ethical Web Develop‐
ment site about the core principles of ethical web development.
Those contributions are stored at ethicalweb.org/humans.txt.

