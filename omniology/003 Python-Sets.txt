© 2019 MathByte Academy

Python Sets
Python has an implementation of sets that supports many set operations:
membership testing
à in, not in
unions
à s1 | s2, s1.union(s2)
intersections
à s1 & s2, s1.intersection(s2)
differences
à s1 - s2, s1.difference(s2)
symmetric differences
à s1 ^ s2, s1.symmetric_difference(s2)
subsets
à s1 <= s2, s1.issubset(s2)
à s1 < s2
supersets
à s1 >= s2, s1.issuperset(s2)
à s1 > s2
disjointness
cardinality
à len(s)
à s1.isdisjoint(s2)
© 2019 MathByte Academy

Python Sets
The type is 
set
Set literals
à {'a', 10, 10.5}
Empty set
à set()
Notice how the literal notation for sets uses the same braces {} as dictionaries
In fact sets are hash tables as well
Unlike dictionary hash tables, sets only contain the "keys", not the values
à set(iterable)
© 2019 MathByte Academy

Python Sets
elements of a set
à must be unique (distinct)
à must be hashable
a set is a mutable collection
à add and remove elements
à a set is therefore not hashable
à cannot be used as a dictionary key
à cannot be used as an element in another set
à no set of sets
à have no guaranteed order
© 2019 MathByte Academy

Frozen Sets
Frozen Sets are the immutable equivalent of sets
à think of tuples and lists
Can convert any set to a frozenset
à frozenset
elements of a frozenset
à must be unique (distinct)
à must be hashable
à no literal for a frozenset
à frozenset({1, 2, 3})
à frozenset(iterable)
A frozenset is hashable
à can be used as a dictionary key
à can be used as an element of a set (or frozenset)
à have no guaranteed order
© 2019 MathByte Academy

Membership Testing
Testing membership of an element in a set is extremely efficient
(hash table lookup)
In fact, instead of writing code like this:
if a in [10, 20, 30]:
or even
if a in (10, 20, 30):
prefer using (as long as elements are hashable):
if a in {10, 20, 30}:
à higher storage cost
à in, not in
© 2019 MathByte Academy

Some Timings
n = 10_000_000
s = set(range(n))
l = list(range(n))
t = tuple(range(n))
def test_set(s, value):
return value in s
def test_list(l, value):
return value in l
def test_tuple(t, value):
return value in t
timeit('test_set(s, value)', globals=globals(), number=10_000)
timeit('test_list(l, value)', globals=globals(), number=10_000)
timeit('test_tuple(t, value)', globals=globals(), number=10_000)
value = 100
value = 9_999_999
tuple
list
set
0.0186
0.0191
0.0016
1692
1659
0.0021
à list/tuple lookup à scan until found
à set/dictionary à hash table à direct lookup (+ hash collisions)
© 2019 MathByte Academy

