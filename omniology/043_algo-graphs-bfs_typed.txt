Graph	  Primi*ves	  
Breadth-­‐First	  Search	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Overview	  and	  Example	  
Breadth-­‐First	  Search	  (BFS)	  
	  
-­‐-­‐	  explore	  nodes	  in	  “layers”	  
-­‐-­‐	  can	  compute	  shortest	  paths	  
-­‐-­‐	  connected	  components	  of	  
	  	  	  	  undirected	  graph	  
	  
Run	  *me	  :	  	  	  O(m+n)
	  [linear	  *me]	  

Tim	  Roughgarden	  
The	  Code	  
BFS	  (graph	  G,	  start	  vertex	  s)	  
[	  all	  nodes	  ini*ally	  unexplored	  ]	  
-­‐-­‐	  mark	  s	  as	  explored	  
-­‐-­‐	  let	  Q	  =	  queue	  data	  structure	  (FIFO),	  ini*alized	  with	  s	  
-­‐-­‐	  while
	  	  	  :	  
	  -­‐-­‐	  remove	  the	  ﬁrst	  node	  of	  Q,	  call	  it	  v	  
	  -­‐-­‐	  for	  each	  edge(v,w)	  :	  
	  	  	  	  	  -­‐-­‐	  if	  w	  unexplored	  
	  
	  -­‐-­‐mark	  w	  as	  explored	  
	  
	  -­‐-­‐	  add	  w	  to	  Q	  (at	  the	  end)	  	  
O(1)	  
*me	  

Tim	  Roughgarden	  
Basic	  BFS	  Proper*es	  
Claim	  #1	  :	  at	  the	  end	  of	  BFS,	  v	  explored	  <==>	  
G	  has	  a	  path	  from	  s	  to	  v.	  
	  
Reason	  :	  special	  case	  of	  the	  generic	  algorithm	  
	  
Claim	  #2	  :	  running	  *me	  of	  main	  while	  loop	  
	  	  	  	  	  	  =	  O(ns+ms),	  where	  ns	  =	  #	  of	  nodes	  reachable	  from	  s	  
	  
	  
	  
	  ms	  =	  #	  of	  edges	  reachable	  from	  s	  
	  
Reason	  :	  by	  inspec*on	  of	  code.	  

Tim	  Roughgarden	  
Goal	  :	  compute	  dist(v),	  the	  fewest	  #	  of	  edges	  on	  a	  	  
path	  from	  s	  to	  v.	  
	  
Extra	  code	  :	  ini*alize	  dist(v)	  =	  	  	  	  0	  	  if	  v	  =	  s	  
	  
	  
	  
	  	  	  ∞	  	  if	  v	  	  	  	  	  s	  
-­‐ When	  considering	  edge	  (v,w)	  :	  
-­‐ 	  if	  w	  unexplored,	  then	  set	  dist(w)	  =	  dist(v)	  +	  1	  
Claim	  :	  at	  termina*on	  dist(v)	  =	  i	  	  <==>	  	  v	  in	  ith	  layer	  
(i.e.,	  shortest	  s-­‐v	  path	  has	  i	  edges)	  
Proof	  Idea	  :	  every	  layer	  i	  node	  w	  is	  added	  to	  Q	  by	  a	  layer	  	  
(i-­‐1)	  node	  v	  via	  the	  edge	  (v,w)	  
Applica*on:	  Shortest	  Paths	  

Tim	  Roughgarden	  
Applica*on:	  Undirected	  Connec*vity	  
Let	  G	  =	  (V,E)	  be	  an	  undirected	  graph.	  
Connected	  components	  =	  the	  “pieces”	  of	  G.	  
Formal	  Deﬁni*on	  :	  equivalence	  classes	  of	  
the	  rela*on	  u<-­‐>v	  <==>	  there	  exists	  u-­‐v	  path	  
in	  G.	  [check:	  <-­‐>	  is	  an	  equivalence	  rela*on	  ]	  
	  
Goal	  :	  compute	  all	  connected	  components	  
Why?	  	  -­‐	  check	  if	  network	  is	  disconnected	  
	  -­‐	  graph	  visualisa*on
	  -­‐	  clustering	  

Tim	  Roughgarden	  
Connected	  Components	  via	  BFS	  
To	  compute	  all	  components	  :	  (undirected	  case)	  
	  
-­‐-­‐	  initalize	  all	  nodes	  as	  unexplored	  	  	  	  O(n)	  
[assume	  labelled	  1	  to	  n	  ]	  
-­‐-­‐	  for	  i	  =	  1	  to	  n	  	  	  	  	  	  	  O(n)	  
	  	  	  	  	  -­‐-­‐	  if	  i	  not	  yet	  explored	  	  [in	  some	  previous	  BFS]	  
	  -­‐-­‐	  BFS(G,i)
	  [discovers	  precisely	  i’s	  
	  
	  
	  
	  
	  connected	  component	  ]	  
Note	  :	  ﬁnds	  every	  connected	  component.	  
Running	  *me	  :	  O(m+n)	  
O(1)	  per	  
node	  
O(n)	  
O(1)	  per	  
edge	  in	  
each	  BFS	  

