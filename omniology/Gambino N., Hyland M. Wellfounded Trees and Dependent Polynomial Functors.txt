Wellfounded Trees and
Dependent Polynomial Functors
Nicola Gambino⋆and Martin Hyland
Department of Pure Mathematics and Mathematical Statistics
University of Cambridge
{N.Gambino,M.Hyland}@dpmms.cam.ac.uk
Abstract. We set out to study the consequences of the assumption of
types of wellfounded trees in dependent type theories. We do so by in-
vestigating the categorical notion of wellfounded tree introduced in [16].
Our main result shows that wellfounded trees allow us to deﬁne initial
algebras for a wide class of endofunctors on locally cartesian closed cat-
egories.
1
Introduction
Types of wellfounded trees, or W-types, are one of the most important com-
ponents of Martin-L¨of’s dependent type theories. First, they allow us to deﬁne
a wide class of inductive types [5, 15]. Secondly, they play an essential role in
the interpretation of constructive set theories in dependent type theories [3].
Finally, from the proof-theoretic point of view, they represent the paradigmatic
example of a generalised inductive deﬁnition and contribute considerably to the
proof-theoretic strength of dependent type theories [8].
In [16] a categorical counterpart of the notion of W-type was introduced. In
a locally cartesian closed category, W-types are deﬁned as the initial algebras for
endofunctors of a special kind, to which we shall refer here as polynomial functors.
The purpose of this paper is to study polynomial endofunctors and W-types
more closely. In particular, we set out to explore some of the consequences of the
assumption that a locally cartesian closed category has W-types, i.e. that every
polynomial endofunctor has an initial algebra. To explore these consequences we
introduce dependent polynomial functors, that generalize polynomial functors.
Our main theorem then shows that the assumption of W-types is suﬃcient
to deﬁne explicitly initial algebras for dependent polynomial functors. We ex-
pect this result to lead to further insight into the interplay between dependent
type theory and the theory of inductive deﬁnitions. In this paper, we will limit
ourselves to giving only two applications of our main theorem. First, we show
how the class of polynomial functors is closed under ﬁxpoints. We hasten to
point out that related results appeared in [1, 2]. One of our original goals was
indeed to put those results in a more general context and simplify their proofs.
⋆EPSRC Postdoctoral Research Fellow in Mathematics (GR/R95975/01).

Secondly, we show how polynomial functors have free monads, and these free
monads are themselves polynomial. The combination of these two facts leads
to further observations concerning the categories of algebras of polynomial end-
ofunctors. These results are relevant for our ongoing research on 2-categorical
models of the diﬀerential λ-calculus [6].
The interplay between dependent type theories and categories is here ex-
ploited twice. On the one hand, category theory provides a mathematically eﬃ-
cient setting to present results that apply not only to the categories arising from
the syntax of dependent type theories, but also to the categories providing their
models. On the other hand, dependent type theories provide a convenient lan-
guage to manipulate and describe the objects and the arrows of locally cartesian
closed categories via the internal language of such a category [18].
In order to set up the internal language for a locally cartesian closed category
with W-types, it is necessary to establish some technical results that ensure a
correct interaction between the structural rules of the internal language and the
rules for W-types. Although these results are already contained in [16] we give
new and simpler proofs of some of them. Once this is achieved, we can freely
exploit the internal language to prove the consequences of the assumption of
W-types in a category.
Acknowledgements. We thank Peter Aczel, Thorsten Altenkirch, Benno van den
Berg, Marcelo Fiore and Erik Palmgren for stimulating discussions.
2
Polynomial Functors
2.1
Locally Cartesian Closed Categories
We say that a category C is a locally cartesian closed category, or a lccc for short,
if for every object I of C the slice category C/I is cartesian closed1. Note that
if C is a lccc then so are all its slices. For an arrow f : B →A in a lccc C
we write ∆f : C/A →C/B for the associated pullback functor, which can be
deﬁned since slice categories have cartesian products. The key fact about locally
cartesian closed categories is the following proposition [7].
Proposition 1. Let C be a lccc. For any arrow f : B →A in C, the pullback
functor ∆f : C/A →C/B has both a left and a right adjoint.
Given an arrow f : B →A in a lccc C , we will write Σf : C/B →C/A
and Πf
: C/B →C/A for the left and right adjoint to the pullback functor,
respectively. We indicate the existing adjunctions as Σf ⊣∆f ⊣Πf .
1 Here and in the following, when we require the existence of some structure in a
category, we always mean that this structure is given to us by an explicitly deﬁned
operation.
2

An abuse of language. For an arrow f : B →A, we write the image of X →A
in C/A under ∆f as ∆f(X) →B. These arrows ﬁt into the pullback diagram
∆fX

/ X

B
f
/ A
The Beck-Chevalley condition. The Beck-Chevalley condition, which holds in
any lccc, expresses categorically that substitution behaves correctly with respect
to type-formation rules. More precisely, it asserts that for a pullback diagram of
the form
D
g

k
/ B
f

C
h
/ A
the canonical natural transformations Σg ∆k ⇒∆h Σf and ∆h Πf ⇒Πg ∆k
are isomorphisms.
The axiom of choice. The type-theoretic axiom of choice [15] is expressed by
the fact that, for two arrows g : C →B and f : B →A , the canonical natural
transformation Σh Πp ∆εC ⇒Πf Σg is an isomorphism, where
∆fΠfC
p
/
q

ΠfC
h

B
f
/ A
is a pullback diagram and εC : ∆f Πf C →C is a component of the counit of
the adjunction ∆f ⊣Πf .
2.2
Internal Language
Associated to a lccc C there is a dependent type theory Th(C) to which we shall
refer as the internal language of C . A complete presentation of such a dependent
type theory can be found in [9, 14, 18]. We limit ourselves to recalling only those
aspects that are most relevant for the remainder of this work. The standard
judgement forms, written here as
(Ba | a ∈A) , (Ba = B′
a | a ∈A) , (ba ∈Ba | a ∈A) , (ba = b′
a ∈Ba | a ∈A),
are assumed to have their usual meaning [15]. The dependent type theory Th(C)
has the following primitive forms of type:
1 ,
IdA(a, a′) ,
X
a∈A
Ba ,
Y
a∈A
Ba .
3

We refer to these as the unit, identity, dependent sum and dependent product
types, respectively. As usual, these primitive forms of type allow us to deﬁne the
forms of type A × B and BA , to which we refer as the product and function
types. The dependent type theory Th(C) has a straightforward interpretation
in C and thus provides a convenient language to deﬁne objects and arrows in C .
2.3
Polynomial Functors
Let C be a lccc. For an object I of C, we write I also for the unique arrow
I →1 into the terminal object 1 of C . Observe this arrow determines functors
∆I : C →C/I and ΣI : C/I →C. We are now ready to introduce polynomial
functors. For an arrow f : B →A in C, we deﬁne a functor Pf : C →C, called
the generalized polynomial functor associated to f, as the composite
C
∆B / C/B
Πf / C/A
ΣA
/ C
(1)
Deﬁnition 2. We say that P : C →C is a generalized polynomial functor if it
is naturally isomorphic to a functor Pf : C →C deﬁned as Pf =df ΣA Πf ∆B,
for some arrow f : B →A of C.
Note. To avoid clashes with the existing terminology, we adopted the name gen-
eralised polynomial functors. This is in analogy with the distinction between
generalised inductive deﬁnitions and ordinary ones. Since in this paper we only
consider polynomial functors in the generalised sense, we refer to them simply
as polynomial functors.
Let us look more closely at the deﬁnition of polynomial endofunctors. For an
arrow f : B →A , we have the two functors ΣA : C/A →C and ∆B : C →C/B.
The functor ∆B takes an object X of C to the left-hand side of the pullback
diagram:
X × B
/

X
X

B
B
/ 1
We can therefore write ∆BX = X × B . The action of ΣA is very simple: given
an object Y →A of C/A we have ΣA(Y →A) = Y . These observations lead
to a description of polynomial functors in the internal language, which we shall
exploit. The object f : B →A of C/A determines the judgement (Ba | a ∈A)
of Th(C). We can then explicitly deﬁne in Th(C)
Pf(X) =df
X
a∈A
XBa ,
for a type X. The interpretation in C of the right-hand side of the deﬁnition is
indeed Pf(X) , as deﬁned in (1).
4

2.4
Basic Properties of Polynomial Functors
Proposition 3. The composition of two polynomial functors is polynomial.
Proof. A proof using the internal language is in [2], but it is also possible to give
a diagrammatic one. In either case one uses crucially the axiom of choice.
⊓⊔
We now assume that the lccc C has ﬁnite disjoint coproducts. As pullback
functors are left adjoints, these ﬁnite coproducts are preserved under pullbacks
and C has stable disjoint coproducts. They can be represented in a familiar way
in the internal language Th(C), which now has also the primitive forms of type
0 and A + B called the empty and disjoint sum types, respectively.
The class of polynomial functors is closed under a further operation, that
will be very important in the following. To discuss it, let us introduce a family
of functors PX : C →C, for X in C, associated to a functor P : C →C. First of
all, observe that the function mapping (X, Y ) into X + PY can be extended to
a bifunctor C × C →C. This determines a functor C →End(C) mapping X into
PX, whose action on Y in C is deﬁned by letting PX(Y ) = X + PY .
Proposition 4. Let P : C →C be a functor and X be an object of C. If P is
polynomial then so is PX.
Proof. We give a proof using the internal language. Let f : B →A and consider
the polynomial functor Pf associated to f . For X and Y in C we then have
X + Pf(Y ) = X +
X
a∈A
Y Ba ∼=
X
z∈X+A
Y Bz
where (Bz | z ∈X + A) is deﬁned so that the judgements (Bι1(x) = 0 | x ∈X)
and (Bι2(a) = Ba | a ∈A) are derivable.
⊓⊔
To recall the notions of strength for a functor, let us consider a monoidal
category (C, ⊗, I, a, l, r), where I is the unit object and a, l, r are natural iso-
morphisms giving the associativity, left and right unit laws and satisfying the
monoidal coherence axioms [12]. We can regard a lccc C as a monoidal category
where cartesian product is the tensor, and the terminal object is the unit.
Deﬁnition 5. Let P : C →C be a functor. By a strength for P we mean a
natural transformation σ with components σX,Y : X ⊗PY →P(X ⊗Y ), for X
and Y in C, such that for all X, Y, Z in C the following equations hold:
P(lX) ◦σX,I = lX ,
P(rY ) ◦σI,Y = rY ,
σX,Y ⊗Z ◦(1X ⊗σY,Z) = σX×Y,Z .
Proposition 6. Every polynomial functor has a strength.
Proof. Let us use the internal language to deﬁne the arrow
σX,Y : X × PfY →Pf(X × Y )
which gives us one of the components of the required strength σ for a polynomial
functor Pf. First, observe that the domain and the codomain of σX,Y can be
described in Th(C) as X × P
a∈A Y Ba and P
a∈A(X × Y )Ba respectively. We
can then deﬁne σX,Y by letting σX,Y (x, a, t) =df
 a, (λb ∈Ba)(x, t(b))

for
(x, a, t) ∈X × P
a∈A Y Ba .
⊓⊔
5

3
Change of Base
In the following, we shall be interested in the eﬀect that pullback functors have
on algebras for polynomial endofunctors. Let us ﬁrst recall some basic deﬁnitions.
Let P : C →C be an endofunctor on a category C . An algebra for P, or a P-
algebra, is a diagram of the form x : PX →X in C. An arrow of P-algebras
from PX →X to PY →Y is given by a commuting diagram of form
PX
P f /

PY

X
f
/ Y
There is then a manifest category P-alg of P-algebras and P-algebra arrows. We
write U : P-alg →C . for the obvious forgetful functor.
In the following, we will work in a lccc C. For an arrow u : I →J in C we
will show that the algebras for the polynomial functor Pf on C/J associated to
an arrow f of C/J can be mapped functorially into algebras for the polynomial
endofunctor P∆u(f) on C/I associated to the arrow ∆u(f) of C/I . As we will
see, this is a purely formal consequence of some observations concerning the 2-
category of polynomial functors, that we deﬁne below. The treatment is inspired
by the formal theory of monads [10, 19].
3.1
The 2-category of Polynomial Functors
Let us deﬁne the 2-category Poly. An object of Poly is a pair (C, Pf) where C
is a lccc and Pf is the polynomial endofunctor on C associated to an arrow
f : B →A in C. A 1-cell with domain (C, Pf) and codomain (D, Pg) is given by
a pair (F, φ) where F : C →D is a functor and φ : Pg F ⇒F Pf, is a natural
transformation, usually drawn in a diagram of form
C
Pf
?
?
?
?
?
?
?
?
F
~~~~~~~~
D
=⇒
Pg
@
@
@
@
@
@
@
C
F

D
The 2-cells of Poly are deﬁned exactly as the ones in 2-categories of monads [19].
We can now deﬁne a 2-functor Alg : Poly →Cat, but for the purposes of this
paper, it is suﬃcient to give the deﬁnition of its action on objects and 1-cells.
For an object (C, Pf) of Poly we deﬁne
Alg(C, Pf) =df Pf-alg .
6

Given a 1-cell (F, φ) : (C, Pf) →(D, Pg) in Poly, the functor Alg(F, φ) is deﬁned
by mapping a Pf-algebra x : Pf X →X into the the composite
Pg F X
φX / F Pf X
F x
/ F X
that is a Pg-algebra.
3.2
Pullback of Algebras
By a locally cartesian closed functor, or lccc functor, we mean a functor that
preserves the locally cartesian closed structure up to isomorphism. The next
proposition is a simple but useful fact.
Proposition 7. Let C and D be lccc’s, and let F : C →D be a lccc functor. For
any arrow f : B →A there is a natural isomorphism
χF : PF f F ⇒F Pf
such that the 1-cell (F, χF ) : (C, Pf) →(D, PF f) determines a commuting dia-
gram of form
Pf-alg
/
Alg(F,χF )

C
F

PF f-alg
/ D
where the horizontal arrows are the forgetful functors.
Proof. For an arrow f : B →A the required natural isomorphism χF is obtained
by pasting the three isomorphims in the diagram
C
∆B
/
F

∼
=
C/B
F/B

Πf
/
∼
=
C/A
F/A

ΣA
/
∼
=
C
F

D
∆F B
/ D/FB
ΠF f
/ D/FA
ΣF A
/ D
where for an object I, we write F/I : C/I →D/FI for the obvious functor
induced by F. The isomorphisms in the diagram exist since F is a lccc functor.
The rest of the proof follows by direct calculation.
⊓⊔
We can apply Proposition 7 to pullback functors, as they are lccc functors [7].
Corollary 8. Let C be a lccc. Let I be an object of C. For an arrow f : B →A
in C there is a natural isomorphism χ∆I : Pg ∆I ⇒∆I Pf, where g =df ∆If.
7

4
Wellfounded Trees
Deﬁnition 9. We say that a lccc C has W-types if for every arrow f : B →A
in C there is a diagram Pf(Wf) →Wf which is an initial algebra for Pf : C →C .
Recall that, by a theorem of Lambek, the arrow Pf(Wf) →Wf is an iso-
morphism. Once the internal language of a lccc with W-types is set up, we will
therefore be allowed to write
W ∼=
X
a∈A
W Ba
where f : B →A and W =df Wf . The next subsection is devoted to justify the
use of the internal language in connection to W-types.
4.1
Pullback of Wellfounded Trees
In [16] it is proved that if C has W-types then so do all its slices. A proof of
this fact can be obtained by deﬁning explicitly initial algebras for polynomial
endofunctors on the slice categories. It is also observed there that the pullback
functors preserve W-types. Although in [16] it is suggested to prove this second
fact using the explicit deﬁnition of W-types in slice categories, we give a new
and more direct proof of this fact.
Let C be a lccc and let I be an object in C. Recall from Corollary 8 that there is
a natural isomorphism χ∆I : Pg ∆I ⇒∆I Pf where g =df ∆I(f). This natural
transformation determines a functor FI : Pf-alg →Pg-alg deﬁned as FI =df
Alg(∆I, χ∆I). We now use the inverse to χ∆I, given by a natural transformation
ψ : ∆I Pf ⇒Pg ∆I, to deﬁne a functor GI : Pg-alg →Pf-alg that is right
adjoint to FI . First of all, observe that ψ gives us a natural transformation
ξ : Pf ΠI ⇒ΠI Pg that is deﬁned as the composite
PfΠI
η Pf ΠI
+3 ΠI ∆IPf ΠI
ΠI ψ ΠI
+3 ΠI Pg∆I ΠI
ΠI Pg ε
+3 ΠIPg
where η and ε are the unit and the counit of the adjunction ∆I ⊣ΠI , respec-
tively. Hence we have that (ΠI, ξ) : (C/I, Pg) →(C, Pf) is a 1-cell in Poly and
thus we can simply deﬁne GI =df Alg(ΠI, ξ).
Theorem 10. Let C be a lccc and let f : B →A be an arrow in C . For any
object I of C the adjunction ∆I ⊣ΠI lifts to an adjunction FI ⊣GI , i.e. in the
diagram
Pg-alg
/
GI

C/I
ΠI

Pf-alg
/
FI
O
C
∆I
O
where g =df ∆I(f) , the inner and outer squares commute.
8

The functor GI can be described also in the internal language. Let us consider
a Pg-algebra, i.e. an arrow z : PgZ →Z in C/I . This arrow determines the
judgement
 z(i, (a, s)) ∈Zi | i ∈I , (a, s) ∈
X
a∈A
Zi
Ba 
where (Zi | i ∈I) is the judgement associated to the object Z →I of C/I . We
can then derive the judgement
 (λi ∈I) z(i, (a, (λb ∈Ba) t(b, i))) ∈
Y
i∈I
Zi | (a, t) ∈
X
a∈A
Y
i∈I
Zi
Ba
which gives us a Pf-algebra PfΠIZ →ΠIZ . This is exactly the image under GI
of the Pf-algebra PgZ →Z. A proof of Theorem 10 can then be obtained either
reasoning with diagrams or with the internal language. We can now derive a
simple proof of the pullback stability for W-types.
Corollary 11 (Pullbacks preserve W-types). Let C be a lccc. Let u : I →J
be an arrow in C. For objects B →J and A →J in C/J and an arrow f : B →A
between them, there is an isomorphism W∆u(f) ∼= ∆u Wf.
Proof. Note that without loss of generality we can assume that J is the terminal
object of C and thus consider the pullback functors ∆I : C →C/I determined by
I : I →1. But now it suﬃces to appy Theorem 10 and observe that FI, deﬁned
as FI =df Alg(∆I, χ∆I), preserves initial objects because it is a left adjoint.
⊓⊔
5
Dependent Polynomial Functors
We can now pick up the fruits of the work done in the last section and exploit
freely the internal language to prove further consequences of the assumption
of the existence of W-types in a lccc. Here we show how W-types can be used
to deﬁne initial algebras for a class of functors that is wider than the one of
polynomial functors. Let C be a lccc. For a diagram, which we do not assume to
be commuting, of form
B
f
/
s
?
?
?
?
?
?
?
?
A
r

I
(2)
we deﬁne D : C/I →C/I, called the dependent polynomial endofunctor associ-
ated to the diagram, as the composite
C/I
∆s / C/B
Πf / C/A
Σr / C/I
We can describe the action of D on an object (Xi | i ∈I) of C/I by letting
D(Xi | i ∈I) =df
  X
a∈Ai
Y
b∈Ba
Xsb | i ∈I

(3)
9

for an object (Xi | i ∈I) of C/I. Using this description, we can observe that
initial algebras for dependent polynomial functors are categorical counterparts
of the so-called general trees of Martin-L¨of type theory, as described in [17,
Chapter 16]. We now give some examples of dependent polynomial functors.
(i) Polynomial functors on slice categories are special examples of dependent
polynomial functors. Observe that, if the diagram in (2) commmutes, then
the formula in (3) simpliﬁes to
D(Xi | i ∈I) =
  X
a∈Ai
XBa
i
| i ∈I

.
(ii) Let f : B →A be an arrow in C and deﬁne W =df Wf. For our applications,
it is useful to observe that, for an arrow g : C →B, the endofunctor
F : C/W →C/W deﬁned in the internal language by letting
F

X(a,t) | (a, t) ∈W

=df
 X
b∈Ba
XCb
t(b) | (a, t) ∈W

,
is a dependent polynomial functor. Indeed, it is naturally isomorphic to
the functor associated to the diagram
P
(a,t)∈W
P
b∈Ba Cb
p
/
s
'O
O
O
O
O
O
O
O
O
O
O
O
P
(a,t)∈W Ba
r
yssssssssss
W
where p(a, t, b, c) =df (a, t, b), s(a, t, b, c) =df t(b) and r(a, t, b) =df (a, t)
for (a, t) ∈W, b ∈Ba, c ∈Cb.
(iii) If C has ﬁnite disjoint coproducts, the coproduct of two dependent polyno-
mial functors is still a dependent polynomial functor. For two dependent
polynomial functors D1, D2 associated respectively to the two diagrams
B1
f1
/
s1
@
@
@
@
@
@
@
@
A1
r1
~~~~~~~~
I
B2
f2
/
s2
@
@
@
@
@
@
@
@
A2
r2
~~~~~~~~
I
the functor D1 + D2 is naturally isomorphic to the dependent polynomial
functor associated to the diagram
B1 + B2
f1+f2
/
[s1,s2]
#G
G
G
G
G
G
G
G
G
A1 + A2
[r1,r2]
{wwwwwwwww
I
10

5.1
Initial Algebras
We want to prove our ﬁrst main result. We assume that the lccc C has W-types.
Theorem 12. Every dependent polynomial functor has an initial algebra.
The proof involves a generalisation of the argument showing that W-types
exist in slice categories [16, Proposition 3.8], a result that follows indeed as a
corollary of our theorem. We begin by constructing a candidate to be the initial
algebra for the dependent polynomial functor deﬁned in (3). Let us consider the
W-types Wf and Wf×I associated to f : B →A and f × 1I : B × I →A × I.
The canonical isomorphisms
Wf ∼=
X
a∈A
WBa
f
,
Wf×I ∼= I ×
X
a∈A
WBa
f×I
will be treated here as equalities to simplify the presentation. Let us recall that
there is an arrow ρ : Wf →A deﬁned by letting ρ(a, t) =df a for (a, t) ∈Wf.
The strategy to deﬁne the candidate V →I to be an initial algebra will be
as follows. First, we will deﬁne V as the object ﬁtting in the equalizer diagram
V
η
/ Wf
ξ
/
ξ′
/ Wf×I
(4)
determined by appropriate arrows ξ and ξ′. Secondly, the required object of C/I
can then be deﬁned as r ρ η : V →I. It now remains to deﬁne the arrows ξ, ξ′.
The arrow ξ is deﬁned by recursion on Wf by letting, for (a, t) ∈Wf,
ξ(a, t) =df (ra, a, (λb ∈Ba) ξ(tb)) .
The deﬁnition of ξ′ is more involved. First, we deﬁne φ : Wf×I × B →Wf×I by
recursion. For (i, a, t, b) ∈Wf×I, deﬁne
φ(i, a, t, b) =df
 sb, a, (λb′ ∈Ba) φ(t(b′), b′)

.
Then, we deﬁne ψ : Wf×I →Wf×I by letting, for (i, a, t) ∈Wf×I,
ψ(i, a, t) =df (i, a, t, (λb ∈Ba)φ(tb, b)) .
Finally, we ﬁx ξ′ =df ψ ξ. The key property of the object V that allows us to
prove Theorem 12 is stated in the next lemma.
Lemma 13. For all (a, t) ∈Wf, we have (a, t) ∈P
a∈Ai
Q
b∈Ba Vsb if and only
if (a, t) ∈Vi, where i =df ra.
Proof. Let (a, t) ∈Wf and deﬁne i =df ra. First of all one needs to show that,
for all b ∈Ba
ξ(tb) = φ(ξ(tb), b) ⇐⇒sb = ρ(tb) ∧ξ(tb) = ψ ξ(tb) .
(5)
11

This can be proved by unfolding the relevant deﬁnitions. We then get
(a, t) ∈Vi ⇐⇒ξ(a, t) = ξ′(a, t)
by def. of V
⇐⇒(∀b ∈Ba) ξ(tb) = φ(ξ(tb), b)
by def. of ξ , ξ′
⇐⇒(∀b ∈Ba) sb = ρ(tb) ∧ξ(tb) = ψ ξ(tb)
by (5)
⇐⇒(a, t) ∈P
a∈Ai
Q
b∈Ba Vsb
by def. of V
as required.
⊓⊔
Lemma 13 shows that V →I can be equipped with a structure map, and
thus gives us an algebra for the dependent polynomial functor deﬁned in (3).
The initiality of this algebra follows from reasoning that is completely analogous
to that in [16, Proposition 3.8] and hence is omitted here.
5.2
Applications
We give a ﬁrst application of Theorem 12. Let us consider two arrows f : B →A
and g : D →C in a lccc C with W-types. We can then deﬁne a bifunctor
F : C × C →C whose action on an object (X, Y ) is deﬁned by letting
F(X, Y ) =df Pf(X) × Pg(Y ) .
For a ﬁxed object X of C , the functor F X : C →C that maps Y into F(X, Y )
can easily be seen to be polynomial. It therefore has an initial algebra, that we
denote as
F X µY.F(X, Y )

/ µY.F(X, Y )
The assignment of µY.F(X, Y ) to X can then be extended to a functor C →C .
We refer to these functors as ﬁxpoint functors. We can now state our second
main result.
Theorem 14. Fixpoint functors are polynomial.
Proof. We limit ourselves to sketch the main idea of the argument. Let us actu-
ally suppose that the ﬁxpoint functor is polynomial, and let Q →P be an arrow
in C such that
µY.F(X, Y ) ∼=
X
p∈P
XQp .
Direct calculations imply that there must be isomorphisms
P ∼= A ×
X
c∈C
P Dc ,
Q(a,c,t) ∼= Ba +
X
d∈Dc
Qt(d)
for (a, c, t) ∈A×P
c∈C P Dc. The ﬁrst isomorphism certainly holds if we deﬁne P
as the W-type of the arrow g × 1A : D × A →C × A and use Corollary 11.
12

Theorem 12 shows that it is also possible to satisfy the second isomorphism by
deﬁning Q →P as the initial algebra for an appropriate dependent polynomial
functor. Recalling the examples of dependent polynomial functors given earlier
in this section, it is immediate to observe that the functor F : C/P →C/P
deﬁned by letting
F(X(a,c,t) | (a, c, t) ∈P) =df Ba +
X
d∈Dc
Xt(d)
for (X(a,c,t) | (a, c, t) ∈P) in C/P, is a dependent polynomial functors, since it
is the sum of two such functors.
⊓⊔
6
Free Monads
6.1
Background
We review some facts concerning endofunctors and monads, and some results
concerning free monads. More details can be found in [4, 11].
Deﬁnition 15. Let P be an endofunctor on C . We say that P has a free monad
if the forgetful functor U : P-alg →C has a left adjoint.
The next proposition shows that the existence of a free monad for an endo-
functor is a necessary and suﬃcient condition for its category of algebras to be
isomorphic to a category of algebras for a monad.
Proposition 16. The forgetful functor U : P-alg →C has a left adjoint if and
only if it is monadic over C.
Proof. The proof is an application of Beck’s theorem [13] characterising monadic
adjunctions. One should observe that the functor U satisﬁes all the hypothesis
of Beck’s theorem except for the existence of a left adjoint.
⊓⊔
When (T, η, µ) is a monad on a category C we write T-Alg for the usual
category of T-algebras. Note that we follow a suggestion of Peter Freyd in using
P-alg for the algebras of an endofunctor P and T-Alg for the algebras for a
monad T. Again, we write U : T-Alg →C for the forgetful functor. We can then
restate Proposition 16 as follows.
Proposition 17. (T, η, µ) is a free monad for P if and only if there is an equiv-
alence T-Alg →P-alg such that the following diagram commutes
T-Alg
/
U
"D
D
D
D
D
D
D
D
D
P-alg
U
}zzzzzzzz
C
13

We wish to give a more concrete description of the free monad for an end-
ofunctor on a locally cartesian closed category with coproducts. To do so, we
use the family of functors PX : C →C, for X in C, associated to a functor
P : C →C and deﬁned in Subsection 2.4. As we did in the discussion leading to
Proposition 4, we assume that C has ﬁnite disjoint coproducts.
Proposition 18. Let P be an endofunctor on C. The following are equivalent:
(i) the endofunctor P has a free monad;
(ii) the comma category X ↓U has an initial object, for all X in C;
(iii) the endofunctor PX has an initial algebra, for all X in C.
Proof. The equivalence (i) ⇔(ii) follows by Deﬁnition 15 and by the possibility
of determining a left adjoint via initial objects in comma categories [13]. The
equivalence (ii) ⇔(iii) follows from the isomorphism X ↓U ∼= PX-alg. One
could also verify directly the implication (iii) ⇒(i) by deﬁning explicitly the
free monad (T, η, µ) for P. The functor T is deﬁned by letting T(X) be the
initial algebra for PX, for X in C.
⊓⊔
We conclude this review by recalling the notion of strenth for a monad and
a simple fact about it.
Deﬁnition 19. Let (T, η, µ) be a monad on C. By a strength for (T, η, µ) we
mean a strength σ for the functor T such that, for all X and Y in C, we have
σX,Y ◦(1X ⊗ηY ) = ηX⊗Y ,
µX⊗Y ◦T(σX,Y ) ◦σX,T Y = σX,Y ◦(1X ⊗µY ) .
Proposition 20. Let P be an endofunctor on C and (T, η, µ) be the free monad
on P. A strength for the functor P determines a strength for the monad (T, η, µ).
Proof. The strength can be deﬁned using the explicit description of the free
monad given in the proof of Proposition 18.
⊓⊔
6.2
Free Monads for Polynomial Functors
We begin by ensuring the existence of free monads for polynomial functors.
Theorem 21. If C is a lccc with ﬁnite disjoint coproducts and W-types, then
every polynomial endofunctor on C has a free monad.
Proof. Let P : C →C be a polynomial functor. If we knew that for every X
in C the functor PX : C →C had an initial algebra, then we could invoke
Proposition 18 and conclude the desired claim. By Proposition 4, however, the
functors PX : C →C, for X in C, are polynomial, and therefore they have an
initial algebra by the assumption that C has W-types.
⊓⊔
The next corollary, a consequence of Proposition 16 and Theorem 21, allows
us to observe the existence of structure on the categories of algebras for poly-
nomial functors. From now on, we assume that C is a lccc with ﬁnite disjoint
coproducts and W-types.
14

Corollary 22. For every polynomial functor P on C, the category P-alg is iso-
morphic to the category T-Alg, where T is free monad on P.
We can also derive information on free monads for polynomial functors.
Proposition 23. Free monads for polynomial functors have a strength.
Proof. The claim is a consequence of Proposition 6 and Proposition 20.
⊓⊔
We conclude the paper with our third and last main result, whose proof is
completely analogous to that of Theorem 14.
Theorem 24. The free monad on a polynomial functor is polynomial.
References
1. Abbott, M.: Categories of Containers. Ph.D. thesis, University of Leicester (2003).
2. Abbott, M., Altenkirch, T., Ghani, N.: Categories of Containers. in Foundations of
Software Science and Computation Structures LNCS 2620, Springer (2003) 23 – 38.
3. Aczel, P.: The Type Theoretic Interpretation of Constructive Set Theory: Inductive
Deﬁnitions, in: R.B. Barcan Marcus et al. (eds.) Logic, Methodology and Philosophy
of Science, VII, North-Holland (1986).
4. Barr, M., Wells, C.: Toposes, triples and theories. Springer-Verlag (1985).
5. Dybjer, P: Representing inductively deﬁned sets by wellorderings in Martin-L¨of’s
type theory. Theoretical Computer Science 176, (1997), 329 – 335.
6. Ehrhard, T., Regnier, L.: The diﬀerential lambda-calculus. Theoretical Computer
Science, 309 (2003) 1 – 41.
7. Freyd, P.: Aspects of topoi. Bull. Austral. Math. Soc. 7 (1972) 1 – 76.
8. Griﬀor, E., Rathjen, M.: The Strength of Some Martin-L¨of’s Type Theories, Archiv
for Mathematical Logic 33 (1994) 347 – 385.
9. Hofmann, M.: On the interpretation of type theory in locally cartesian closed cate-
gories. In Computer Science Logic ’94. LNCS 933, Springer (1995) 427 – 441.
10. Kelly, G.M., Street, R.: Review of the elements of 2-categories. Proc. Sydney Cat-
egory Theory Seminar 1972/73 LNM 420, Springer (1974) 75 – 103.
11. Kelly, G.M.: A uniﬁed treatment of transﬁnite constructions for free algebras, free
monoids, colimit, associated sheaves and so on. Bull. Austral. Math. Soc. 22 (1980)
1 – 83.
12. Kelly, G.M.: Basic Concepts of Enriched Category Theory Cambridge University
Press (1982).
13. Mac Lane, S.: Categories for the working mathematician. Springer-Verlag (1998).
14. Maietti, M.E.: The type theory of categorical universes. Ph.D. thesis, Universit`a di
Padova (1998).
15. Martin-L¨of, P. Intuitionistic Type Theory. Bibliopolis (1984).
16. Moerdijk, I., Palmgren, E.: Wellfounded trees in categories. Annals of Pure and
Applied Logic 104 (2000) 189 – 218.
17. Nordstr¨om, B., Petersson K., Smith J.: Programming in Martin-L¨of Type Theory.
Oxford University Press (1990).
18. Seely, R.A.G.: Locally cartesian closed categories and type theory. Math. Proc.
Camb. Phil. Soc. 95 (1984) 33 – 48.
19. Street, R.: The formal theory of monads. J. of Pure and Appl. Algebra 2 (1972)
149 – 168.
15

