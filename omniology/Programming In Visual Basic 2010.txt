PROGRAMMING IN 
VISUAL BASIC 2010 
• 
..-..,~onnect 
Learn 
Succeed~ 
~ 
Julia Case Bradley 
M .. Sdll '"ntt,nit, ( "ollt·~t · 
L 
Anita C. Millspaugh 
~L. ~au \tht.nit~ Lolk.;t 

The McGrow·Hi/1 Companle> 
•
~~onnect 
Learn 
::;.~ Succeed"' 
PROCRAM~DNC IN VISUAL BASIC 2010 
Published by •lcCraw-Hil~ a business unit of The McCraw-Hill Companies. Inc.. 1221 A•euue of 
the Ameria... New York. N¥.10020. Copyright 0 2011 by The McCraw-Hill Companies, Inc. 
All rigllls ,....,...ed. No part of this publieadnn moy be reproduced or di!tributcd in any form or by any 
ll1eal1l!. or • tored in a datobae or retrie•ol sy•tem. without the prior written consent ol The McCraw-Hill 
Companies. Inc., including. but not limited to, in any netlrorl or other electronic ston.ge or transm.ission, 
..- broadcast for distance Ieeming. 
Some ancillaries, including electronic and print compooenls. may not be available to customers 
ootside the United States. 
This book is printed on ocid-free psper. 
I 23456 7890 WDQ/WDQ 10987 654321 0 
ISBN 978.{)..(17 -35172a-4 
~rnro 0-07-351725-9 
Vice presideni/Editor in chief: Elizabdh ll<uftle 
Vice president/Director of lllSJi<.etitljl: john E. Biemal 
Ex..,uti•e opnnsoring edilor: Scou f)avUJ.,. 
Director of development: SGTah Wood 
De•eloprnental editor Il: A/aina. Clay>on 
Editorial coocdinator. Alan Palmer 
Morlceting manager: Tiffany lrendl 
Lead digilal product manager: Damian Moshak 
Digit.ol development editor:: Kn:in. Whik 
Director. Editing/DcsisnJProduclion: Jm Ann Kosic 
Project 111B11ager. Marlena P«<lan 
Buyer II: Slu!rry L Kane 
S.nior deoil!"""' S.djm• Sar!a110<ic 
Manager, Digital production: }aMaliA. U1ky 
Media project manager: Carhy L Tepper 
CDver design: jon Re>h 
lfpeface: 11/13 Badoni 
CAmposiiDr:Apj<ua• , Inc. 
Printer: Worldcolor 
CDver credit: 0 Vm 
Library or Cou~'tl"eM Catalogtug: .. ln~Publlc:uJou Data 
Bradley, julio Case. 
Pl·ogramnling in Viouol &:.ic 2010 I Julia c .. e Bradley. Anita C. llillopsugh. 
p.cm. 
Include. index. 
ISBN-13: 978-0-07-351725-4 (alk. paper) 
ISBN-10: 0-07-35172!>-9 (alk. psper) 
l. Microsoft Visual BASIC. 2. BASIC (CAmpuler JXOII"'lll lan~) !. Millspaugh, 
A. C. (Anita C.) II. Title. 
QA 76.73.8386968 20ll 
005.2'768--<lc22 
2010013744 
The Internet addresses listed in the text were accurate at the time of publication. Tbe inclusion of a Web 
site doeo not indicate an endorsement by the authors or McC.-ow-HiU. ond McCraw-Rill does n<>t 
guarantee the oocuroey of the information preoenled ollh..., sit ... 
www.mhhe.com 

PREFACE 
Visual Basic (VB) has become such a popular programming language for sev-
eral reasons. VB is easy to learn, which makes it au excellent tool for under-
standing elementary programming concepts. In addition. it has evolved into 
such a powerful and popular product that skilled Visual Basic programmers are 
in demand in the job market. 
Visual Basic is fu!Jy object-oriented and compatible with many other 
languages using the .NET Framework. This book incorporates object-oriented 
concepti! throughout. as well as the syntax and terminology of the language. 
Visual Basic is designed to allow the programmer to develop applications 
that mn under Windows and/or in a Web browser without the complexity gener-
ally associated with programming. With very tittle effort, the programmer can 
design a screen that holds standard elements such as buttons. check boxes. radio 
bullons. text boxes. and list boxes. Each of these objects operates as expected. 
producing a "standard'' Windows or Web user interface. 
About This Text 
Thi.s textbook is intended for use in an introductory programming course. which 
assumes no prior knowledge of computer programming. The later chapters are 
also appropriate for professional programmers ,.·ho are learning a new language 
to upgrade their skills. 
Thi.s text assumes that the student is familiar with the Windows operating 
environment and can use an Internet browser application. 
Approach 
This text incorporates the basic concepts of programming. problem solving and 
programming logic. as well a~ the design techniques of an object-oriented. 
event-driven language. VB is a fully object-oriented language. which includes 
inheritance and polymorphism. Object-oriented programming (OOP) is intro-
duced in Chapter l. and its features appear in every chapter of the book. 
Chapter topics are presented in a sequence that allows the programmer Lo 
learn how to deal with a visual interface while acquiring important program-
ming skills such as creating projects ,~;th objects, decisions. loops. and data 
management. 
A high priority is given to writing applications that are easy for the user lo 
w1derstand and to use. Students are presented with interface design guidelines 
throughout the text. 
tn 

TEXT FEATURES 
L o~.~..y.-...... 
.....,._r-""'-·r• ~ ;r-.. ...,b1-.,... 
ltw'flt4...a.,~I•Jiiwo_.,.., 
1 ~='"-z:;:-... ',:."":~-=~ ... lp<r. ........ a~_.. 
l. ................ 'f"W __ 
._....,... .... .,,.__.v.. ..... \c.,.. 
;-;::-........ ,. ..... AM.f!t ..,_ ('..,..._ 
,.....,~-....,. 
4 'I'•-¥ •W:.!•.ol..-I•.U.••I\I-oJ .. wloe rl .. .,_ 
~- .lllloo$oo ,..Fol-. 
I. 'T•IlA• .. -~M o\Ollt .,., lf#M.J-rood., _ 
............ 
T...u.Jip"'"""""' 
.. ~o~~- -lh·O..~..t~rl • •'""'""'-••_..,..,,...., ... 
t~..t-ot~T-wT.-. 
0BJECT-0R IFNTFD CONCEPTS 
are presented throughout the text to offer 
students an introduction to object-oriented 
design before learning to create their own 
classes. 
User Interlace 
Design 
1. 01111-..:~-.-.t..lld•..t~t~lobulba_,.,..,.....,n-~ "'-. 
.db~llOat..p-..taat .. -.dU.tnd.,.tpCiltllMIIo~l~,. 
~ :t~~tt.~•,IO,_., • 
..._.fll.._ .r~·c....-.......,.~ . 
.. ~-~Jtlfll-tflil. wod ~lt'-.•t.pt-.. ...... ~~ 
L JWcal"'.u..,.,;...81UfiD.IIot .. -lll~-o~bJdo:li'*"l 
..-... W,O .. .wtll~~CMk~W •~~. IIMIIGiMclhlt,.b 
.-qM*"'I, ~iflttl.-6oa.uodr.~,.f"''I.-I.CUti-.liNIIICM..-. 
1aoJI' .. 
to~ 
.., ""••«MAl 111.ai•~to~ in¥MI!Itat~WRMIII ~.et~,..tltt YI.U.,.n; 
1, Diwbtadt•ahle«lriJIIIllf .... u-woi _tl_, 
& Oiloi-W,.. .............. b- --.d."""~~&h • 1tluol Endtith 
..... -~ 
lt. o.~~~:.....,.o~;ll) o~.ii"'"flf•l 
I I . (.,,,fl-l q
r,.....,. ... _."fliaplioil«tlltliooal.r-ar•f<lidl ll,... 
co:~b!.doo...aillll. 
are presented to offer students a better 
understanding of meeting user needs 
and employing industry standards. 

.. .......... _ 
• .._ .. _ ....... C::....T.. ..... 
--·~ ............ 
a .... ....,._ 
• .._._...._.....,.c-t.w_, 
............. ,.. ......... ..w~ ...... 
.. ....... h ....... ,_..,._ ... 
-..-~ 
W ~....._.o.M~:• · r~ 
......... ~ 
......... 1 ... 
.,. .......,...... ......... r&ll• 
....... ~L. ........ .,. ......... 
,,.,.. . ,~ .. 
wa ..... 
L.'hiU·CoU:f~h-. 
, ~ ...._ ...... ,.._ 
..-..~ ..... --.. •• u-.._.. ... 
:-..::::!7;~·.:~=.3."'.!.~~= 
... 
~aa~o.-a ... _....,. ........................... _ ... .. 
.......... ........... __...~ ... •!llibl-. .... li--
Jit<;hoiW., ......... ., .......... I • ...Wt 
............. ,;. .............. 
:::~~~.;~~~:::~ .. 
u::-~=.,~~':;==::~ .0(. 
c;.... ...................... .... ~ 
.,.,..,,-""V'; .... '""''•-•....,,......,. • .... _,.;n .... ~tt~lr.,... 
-·~<~Iii· ............................ ,..;.; ......... .,..: .. .,...-....... . 
,_ .......... .,....,;,.. . ...... ;,. _ _ .,..., \. • ..,, ... VIoul!ll.o:tol.,f<l•olt-
j
~~.!•::::'::!.~~~tl.l--=:,l:~~d•~-1:w .. ,. • .,._..,. .. 
I 'hi;' ..., HO .IIi 
~. . "' I' •• ~·-
........ 
give students time to reflect on the 
current topic and to evaluate their 
understanding of details . 
TTPS 
in the margins help students avoid 
potential trouble spots in their 
programs and encourage them to 
develop good programming 
habits. 
)-~~~111!1!111111111111!1!!~:;::::;;;;;:: 
~-n:-..:.~:."'...-:~~=~·~ 
cPiiEJ:&J
u.;;;•._ __ 
t.lf ~=~~.!~1:.n-
UM 
Fft.--~ .. OMrt ... f"&l• 
... ,. 
2. tf F""IJf~flt • T-JA•tr • ...ut .. ttJ:oot ... n.tl 
llf'fllltTU~-.1tft • ' Jt't -"-f,.,t,• 
UM 
~·--..... ,.. .... _ 
-~ ........ ....... 
.. o .. - ... .,._...., 
1t,...4M fl'-...,_• • 
R•;.bltN •. ltl" • ' h '• tllttONt ... f tllt,.UJ.•IJf•" 
... ,. 
). If ' elllll'l9flllt'V•I' o l••JMfOitr A"' 
~~IJ.~t cot Or l•ai""IQitf' • 0 TIIM 
""•blu:t•• ·Tut • ' h '•ti'\Ot,' 
UM 
R••bltl!tt•.lut • ' Jt'• WN," 
"'" 
•• """• "'• ..... _ 
.. ._ •• ..,.. -
..... ....... - .;. ...... ........J 
;, Appi•T...aii • • 'T~ .,.1 o._.....,..,.,._ ... ,,,..l. 01.,,1o1 ;., 'lleol• 
,_ ..... , ........ .._ ........ _ .... ,.,. ................ . 
s. , ....... fl ................. 
,~~~,, .. , ................... &oil· 
·-o.,; .. o~. ,...,.., llol .. -o...,; .... ;, ...,. ... '"'" ·- ,._ ...... ~ 
boo&tw t•ncl• A ... l.ololo, .,.11o.1 tv...JoCboolll,., •""•hi t. ..J_., 
• • a.. ..... .o .............. ., ... _ ..... c: ...... l .. tor;-""" .... ..,. 
,.,. . . ..... Bol uo"*Doei" .. ;'.,."''"'l-,tvnii.C:hu-kllooulooul411.., 
t. .. lo .... (tl• ,...cho"l•lh• .. •l••ofll,;.....,.o""IOioleo;.,..,..,., • 
...... ....,. 
Using If Stateme11ts "Lth Radio Uutton.1 
and Check Box.,. 
r..o..p..-t,... _,.._o--..:t.,....- r ... ndl.ll·-
"'"' •looo.f~ 
.... J ... c.o-. .... .......... ... .--.. .... .... .. •. ,. .. -· •• 

TEXT FEATURES 
Progr.tmmin~t Example-------
::::t:--~..zw:::c=;:!::--..i~~:tl.-: 
_ l ... lii.M-••d.'* ... ""' ...... J .. _ 
• .,....., ..... .. 
n...;n+-t C.. I '• 1-4• ...... '•l:.......__c.U. ...... .__, 
......... 
~..._-J •• -. .. _11~_. •. _.,..,... 
odo.dbc- {.,I!Ol.oo,~~-...,. .,J.Idio Oife~ 4'......-) •ll •_....._ 
-
........,., W..oloo •••• llv*-CH ... r. ........ ool.ono.-<:...-
d,.,,~).._lc~l-.-"'* koo.l t..o,.~n.,_.. b..dt...itl 
._...,..,~.~~..-._......... 
PROGRAMMl NG 
test students' understanding of the 
specific programming skills covered in 
that chapter. 
......... -~ 
..... -o.,a..••-
-~·-,.---·o.,.... 
................ 
... ::::.~....-.. .-.... _ 
"'fflllo ... __ _._..._ .... 
~~:~oo, .. ___ 
, __ _ 
:::,:--..-,-... -..... __ 
-.-.-..~~.-........... . 
...,......,_ . ....,, __ ,... __ ......,. 
................. 
YOUR HANDS-ON 
guide students through the process of 
planning, writing, and executing Visual Basic 
programs . 
.... _j_ 
---~ ... 
~j,j 
~w..,_.,.u• 
~--• JW 
.....-. .... ~-
~--:::~a 
::'1.'"';:t-.,..JIJ 
1f 1 Uo• t a .. "' 
::S..*., 
~;r:· 
;'"ieFZ,.~" 
•-w 
,. .. -... 
, ...... -loU 
=~~ 
L,...., .. _,_..-.. ..--.-.-.. ,. 
·-
.. ....... -
.......... t 
·~ .. ,........,..,..._.,.._.~­
...... _ . ...,..._,....,_. __ .• _ . 
.......,. 
_,__ ......... 
--.~ 
" ~---..._ ......... .,..,...,.--
' .._,_,." .. ___ .,...._ ... ........., 
:z. --...-..--.... -.....-... ----
.. AtW>·--•-lho411111ro:...o .... .....,.. 
:===-~---:y~""::~~ 
.... -.. ... -........ ...... 
I& ....... 
, ... ~·-·--... ---..-. 
'*~ .. -_,.._.,...,...;w 
M ......_.,.._ .... _ ll_a.._._,.,.__-._ 
~-
provide continuing-theme exercises that 
may be used throughout the course, 
providing many opportunities to expand 
on previous projects. 

FOR THE STUDENT 
nR ll ~t n 
"'II..L'~t\lCU 
,_;..;;,.;.,.;_;_....;_;__....:;;.;;._ _____ ..=;...._ _ 
_;;__--It--~ 
available on the text's Web 
CNpt4r 10, ·ca:.~b••• -~phut.o"'f •t'1troduc•• .&00 '4• 'fth•d\ .. t1oo'otoft • 
,.,.,. t~cnno~,o,·-v ~~~~~f'IO "Vita .nth" dM~b,~"· ""''d'aotlfo~ ~hO;rll 1\att tc·, 
O"f:~ b.-.dti"Q .~ 
.. (-e!io,t~.e .:t~.v.:t···;, ~nd dJt.;J=t:ts rro9ram:;; ll"dudt>41cceunQ 
ddlta fmm both \\.fldol\-S t-erms a.'ld 'I'Jeb t-Of'lns ~tu2nts Jearn tO ord ~ta 
t;:b:e_, to~ 
d.:.t~ Qr".d <Y~d btnd II"Ch ju;) d~ 
tt-:.~ to c::x-trolt~.,.ud\,:,.:, .lbci.$ .1nd 
ttra~t'"·un..-t.. :.ih•\1 touu.n ~ •• : ... llOIO<wh•• 
~li)H 
.... _.,. '"'""• t 
.t110 1'1 
_,. 
•• • n~t••u t~ ~· '~"•"''nf C' "'• • .., 
m t.t;t • 
Mc:j 
....r.av• '" 'X' -~ -· .... ,._ "'*'""'• ,,...,. .... 9 ............. lb• y 1 
+a • ... =n•"'"' 
'1l•ntt·""!P~utti•~~-~""~~~71~-U"'~I~~7-"r-;~, 
t~;J',~.:/~ .~~.;·.~-,!';!~~-=-~.:~~:';';' :~:;·:., 
~~-.. ~r·,.~ o...a- ··~:u:.l""-~ .... Widii:'I~~.IIP'"t:W~·· ... .,.W.)O'TI. 
U•~wtcpa ... ,~.,~.,, .. ~lh\~·..,.•n~·•tr.,..r41'tt~....,.k!IU 
•'-~1 .~n::4"11.e>'hlt :llq~,~~r.fP'('~ .. ..., .. 
~,IKI\xCI'&ll"' v....n 
•r~rt) ... l ~-rY-1 """' ~...,~,•~o..,,,,... 
site offers a debugging 
projec~ database files for the 
programming exercises and 
case studies, graphics, and 
sound files. 
Visit the VISUAL BASIC 2010 Web site at: 
http://www.mhhe.comNB201 0/ for 
instructor and student resources. 

FOR THE INSTRUCTOR 
includes: Instructor's Manual with teaching hints, 
outlines, and a matrix of the chapter features 
required for each programming exercise; 
PowerPoint Slides; Testing Files (using EZ Test 
and in Word files); as well as Solutions to End-
of-Chapter Exercises. 
~~~u~~~~t:;;~!,~~~:~~~~~~~;: ~~~~*~~~~~;.~~.~f:;;.~;' :,.!. .. ,.~ 
, __ ,..,.l',. .. "'lrlt•ft ~T~- ~·~~f·l •ll l ._.fi,J~:"W''I" * ttnll~ ,_., t 
t'l(« T niH I t 
41f~ 
I' 
•
'-fct':Of:IWoJ!Nt.;.:.t 
;lo"ffttrw;•::t arc •·u~:~f 111• M:I\.O"CC ... 
t~'"' ;tltl'fCICr~ w IU<"I !'looo t~ nt· "'rt1' 
,.,,~~~ ... w.,. ;rllllt 
......... J.~t•l'l ~•ti"''• ,_., ...... ,., .. .,.....u\J,...., •. h .... 1od 
j 
~~ 
...... 
, .... ~~··~ ....... 
A~~ 
.(I....,!Ooth""'~»Mt..l...,l~.ln .... l~th .... 
~W'IW.~Iolllolllr~!!)W6 'iollodt'ltl ,.._,_,..~ 
,.II:"'M orlf&-~dci1J"'~J~Ir<l'•d'I-•J,..:I.L~Ic >'t 
......... -
................... -···-- ,.!.. ...... ,.~ 
•da 

I'K ctl,ll \11 \I ll\ C. I\ 
\ bt; ll 
4~1< 2111 • 
Chapter I 
IJtlW<i.lcUl'liiO 
Vistwl Tht>IC 1010 
,..,._..,..., •u 
G.ttlooltff«o 
provide instructors with complete, detailed 
presentations that walk students through the 
important concepts covered in each chapter. 
llttfl-..• ... 
·~­
"""o-" .. ~··-. 
rl
---~·'"'-"'"" -
-
-
-
-
. 
' 
~~~~'-·-~~ 
' 
... -o.., .. 
.-:.b lti~IHl'illtJO~I'.,:ihbrr ........
... rh;H-•I•Jo•N be tWJ.INUIIU.I &-f,,../11 >IO! llt ~ 
......,.,,J•M~to'-9tto•t~!t.&ab0 o&eu.a•'"' '",., 
Visit the VISUAL BASIC 2010 Web site at: 
http://www.mhhe.comNB201 0/ for 
instructor and student resources. 

X 
Changes in This Edition 
This revision of the text is based on Visual Basic Professional 2010. VB 2010 
provides for elimination of the line continuation character under most circum-
stances. The array and object initializers also have been improved. 
The narrative. step-by-step exercises. screen captures, and appendices 
have all been updated to VB 2010. The screen captures are all based on 
Windows 7. A section covering collection objects has been added to the chap-
ter on arrays. 
Features of This Text 
Each chapter begins with ident"ifiable objectives and a brief overview. Numer-
ous coding examples as well as hands-on projects with guidance for the plan-
ning and coding appeur throughout. Thought-provoking feedback quesUons 
give students time to reflect on the cw-rent topic and to evaluate their under-
standing of the details. The end-of-chapter items include a chapter review, 
questions. programming exercises. and four case studies. 
Cltopter 1, ''I mrocluction w Vimal lJasic 2010, ''introduces 
Microsoft's Visual Studio integrated development enviromnent ODE). The 
single environment is used for multiple programming languages. A step-
by-step program gels students into programming very quickly (quicker 
!han most books). The PrintFonn control is included to allow students to 
easily submit screen captures of the form at mn Ume. The chapter 
introduces the OOP concepts of objects. prope1ties, methods. and events. 
The elements of debugging and using the 1-le\p system are also introduced. 
Clt11p1er 2, "Usn l uterfacl' f) I' sign ," demonstrates techniques for 
good program design. including making the interface easy for users as 
well as guidelines for designing maintainable programs. Several controls 
are introduced. including text boxes. rich text boxes. masked text boxes. 
group boxes. check boxes. radio buttons. picture boxes. and the new 
Shape and Line controls. 
ChnJH.er .1, "Vari.u.bles, Constwlts, ll.nd Calculations," presents the 
concepts of using data and declaring the duta type. Students leam to 
follow standards to indicate the data type and scope of variables and 
constants and always to use Option Strict, which forces adherence to 
strong data typing. 
Euor handling is accomplished usi11g structured exception handling. 
The Try /Catch/ Finally structure is introduced in this chapter along 
with calculations. The studentleams to display error messages using the 
Message Box class and also leams about the OOP concept of overloaded 
constructors. 
Chapter 4, "Decisions atul Conditions," introduces taking alternate 
actions based on expressions fonned \~ith the relational and logical 
operators. This chapter uses the If statement to validate input data. 
Multiple decisions are handled with both nested If statements and the 
Select Case structure. 
11 
II 
ll 
I' 
1\ 
(; 
t; 

The debugging features of the IDE are covered. including a step-by-
step exercise that covers stepping through program statements and 
checking intermediate values during execution. 
Chapter 5, "!Uerws, Common Dialog Boxes, Sub Procedures, 
ancl Function Procedures," covers the concepts of writing and calling 
general sub procedures and function procedures. Students learn to 
include both menus and context menus in projects. display the Windows 
common dialog boxes, and use the input provided by the user. 
Chapter 6, "Multiform Projects," adds splash forms and About forms 
to a project. Summary data are presented on a separate form. The Friend 
keyword is introduced. 
Chapter 7, "Lists, Loops, mtd Printing," incorporates list boxes and 
combo boxes into projects, providing the oppot1unity to discuss looping 
procedures and printing lists of information. Printing is accomplished 
in .NET using a graphics object and a callback event. The printing 
controls also include o Print Preview. which allows students ond 
instructors to view output without actually printing it. 
Chapwr 8 , "Arrays and Collections," introduces arrays. which follow 
logically from the lists covered in Chapter 7. Students learn to use single- and 
multi dimension anays. table lookups. arrays of structures. and collections. 
Chapter 9, "Web Applicati-ons," introduces Web applications using 
Web Forms. Students learn to design and develop simple Web 
applications that consist of Web pages that execute in a browser 
application. Multiple-page Web sites are covered along with validator 
contJ·ols and an introduction to state management. 
Cflapter1 0, "Dawbase Applications," introduces ADO.NET. which 
is Microsoft's latest teclmology for accessing data in a database. This 
chapter shows how to create binding sources. table adapters. and 
datasets. Programs include accessing data from both Windows Fonns and 
Web Fonns. Students learn to bind data tables to a data grid and bind 
inclividual data fields to controls such as labels and text boxes. LINQ is 
used to query system processes. 
Chapter 11, "Dcua Files," presents the VB object-oriented teclmiques 
for data file handling. Students learn to save and read small amounts of data 
using the My object and using streams. TI1e Stream Writer and Stream Reader 
objects are used to store and reload the contents of a combo box. 
Chapter12, "OOP: Cremiug Object-Ori.ented Programs," 
explains more of the theory of object-oriented programming. Although we 
have been using OOP concepts since Chapter 1. in this chapter students 
learn the terminology and application of OOP. Inheritance is covered for 
visual objects (forms) and for extending e..xisting classes. The samples are 
kept simple enough for an introductory class. 
Chapterl3, "Gmphics, Auima.tion, S()und, and Drag-and-
Drop," covers the classes and methods ofGD[+. The chapter covers 
graphics objects. pens. and bmshes for drawing shapes and lines. 
Animation is accomplished using the Timer control and the SetBounds 
method for moving controls. My.Computer.Audio.Piay is used to provide 
sound, and drag-and-drop events are used to transfer the contents of a 
text box to a list box and to move images. 
XI 

xu 
Cftapter 14, ·'Adclitiotwl Topks iu Vi.~11al Ba.~ic," introduces some 
advanced VB topics. This final chapter covers validating user input using 
Error Providers and the Validating event of controls. Students learn to 
create applications using multiple document interfaces (MDI), create 
toolbars and status bars using TooiStrip and StatusStrip controls. and add 
Web content to a Windows Form using the Web Browser control. The code 
snippet feature is introduced. Reading and writing XML text Iiles is 
covered using the new XML literals and using LINQ. 
An introduction lo Windows Presentation F'oundation (WPF) includes 
using WPF interoperability -..ith a standard \'l'indows Form and creating a 
WPF Form project. 
Tfte nppemlii-es offer important additional material. Appendix A holds 
the answers to all Feedback questions. Appendix B covers methods and 
functions for math. string handling. and date manipulation. In OOP style. 
most actions that were formerly done -..ith functions are now accomplished 
with methods of the Math class and String class. 
Appendix C. on mastering the Visual Studio environment. is based on 
the .NET fOE and includes instructions for using snap lines for form 
design. Appendix D discusses security issues for both Windows and W'eb 
programming. 
Acknowledgments 
Many people have worked very hard to design and produce this text. We would 
like to thank our editors, Scott Davidson and AJaina Grayson. Our thanks also 
to the many people who produced this text. including Marlena Pechan. David 
Shapiro. and Betsy Blumenthal. 
We greatly appreciate Theresa Berry of Mt. San Antonio College and Peter 
van der Goes of Rose Stale College for tl1eir thorough technical reviews. con-
structive criticism. and many valuable suggestions. We K·ould like to tlmnk 
Brenda Nielsen of Mesa Community College for her work in creating the 
PowerPoint Presentations that accompany this text and to 111eresa Berry for the 
lnstmctor's Manual and Test Bank. And most importantly. we are grateful to 
Dennis and Richard for their support and understanding through the long days 
and busy phone I ines. 
The Authors 
We have had fun teaching and KTiting about Visual Basic. We hope that this 
feeling is evident as you read this book and that you will enjoy learning or 
teaching this outstanding programming language. 
Julia Case Bradley 
Anita C. .l\1iUspa ugh 
PRI\
t',\
C
t: 

To THE STUDENT 
The best way to learn to program in Visual Basic is to do it.lf you enter and run 
the sample projects. you will be on your way to writing applications. Reading 
the examples without trying to run them is like trying to learn a foreign lan-
guage or mathematics by just reading about it. Enter the projects. look up your 
questions in the extensive MSDN Help files. and make those projects nm. 
Installing Visual Basic 
For the programs in this text. you need to install the .NET Framework. Visual 
Basic. and the MSDN (Microsoft Developers Network) library. which contains 
all of Help and many instructive articles. You do not need to install C++ or C#. 
You can download the Express Edition of Visual Basic and Visual Web 
Developer from msdn.microsoft.com/express. Using these two products. you 
can complete most of the exerci~es in this text. 
Format Used for Visual Basic 
Statements 
Visual Basic statements. methods. and functions are shown in this font. Any 
values that you must supply are in italics. Optional items are in [square 
brackets]. Braces and a vertical bar indicate that you must choose one or the 
other value {one I other}. 
Examples 
Const Identifier [As Datatype] 
Do {While 1 Until} Condition 
Value 
As you work your way through this textbook. note that you may see a sub-
set of the available options for a Visual Basic statement or method. Genernlly. 
the options that are included rellect those covered in the chapter. If you want to 
see the complete format for any statement or all versions of a method. refer to 
Help. 
J .C.Il. 
A.C.l\'1. 
xiD 

This page intentionally left blank 

About the Authors 
Julia Bradley is a professor emeritus of Computer Information Systems at Mt. San 
Antonio College. She developed and taught computer programming courses for 25 
years and then took early retirement from teaching in order to write full Lime. Most 
recently she has taught cour.ses in introductory and advanced Visual Basic. Access 
programming. and Microsoft Office. She began writing BASIC textbooks in 1984 
using MS-BASIC (GW-BASIC) and has authored or co-authored texts in Macintosh 
Basic. QuickBasic. QBasic. Visual Basic. C#. Java, the Internet. and desktop 
publishing. 
Anitn 1\'liLI,;IJllllf:h teaches programming courses in Visual Basic and C# at Mt. San 
Antonio College and served as cbair of the department for eight years. She received 
her MBA from California Stale Polytecbnic University, with a bachelor's degree in 
Computer Information Systems. She has taught faculty at the National Computer 
Educatorelru>titutc and also has led Great Teacher's Confcrcucca for Mt. SAC and 
for California Vocational Faculty. 
XV 

This page intentionally left blank 

BRIEF CONTENTS 
Chapter 1 
Introduction to Visual Basic 
2010 1 
f:haplPI' 2 
User lntc l•fncc Design 
63 
Chaplet· 3 
Variahles, Constants, and 
Calculation!'! 
105 
Chaplet· 4 
Decisions and Conditions 
155 
Chaplet· 5 
Menus, Common Dialog Boxes, 
Suh Procc£ltu·cs, ami Ftmctiou 
Procedm·cs 209 
Ch a1>le1' 6 
Multiform Projects 
249 
Chaplet· 7 
Lists, Loops, aml Pril1ting 283 
Chaplet· 8 
Array!'! and Collections 325 
Chapter 9 
Weh Applicntiuns 361 
Chapte1· 10 
Datahase Applications 397 
Ch a}>ter ll 
Data Files 437 
Chapter 12 
OOP: f:•·P.ating Ohjf'rt-O•·iP.ntf'rl 
Programs 
467 
Chapter 13 
Graplrics, Animntiun, Sound, an(l 
Drag-and-Drop 523 
Cbapter 14 
Additional Topics in Visual 
Basic 
559 
Appendix A 
Answers to F eedhack 
Questioll8 601 
Append.ix B 
Methods aml Ftmctions for 
Working with D a tes, Finat1cial 
Calculations, Mathematics, and 
String Operatiom! 615 
Appendix C 
Ti}JS and SbortcuttS for Mastet•i11g 
the Envil·oruncnt 629 
A}>pendix D 
Secm·ity 641 
Glossary 
64 5 
Index 6 56 
xvn 

This page intentionally left blank 

c 
D 
A 
p 
T 
E 
R 
Introduction to Visual 
Basic 2010 
I ~ Describe the process of visual program design and development. 
2. Explain the term object-oricmed programming. 
:1. Explain the concepts of classes. objects, properties. methods, and 
events. 
4 . List and describe the three steps for writing a Visual Basic project. 
5 . Describe the various files that make up a Visual Basic project. 
&. Identify the elements in the Visual Studio environment. 
7 . Define design time, run time. and debug time. 
8 . Write. run. save. print. and modify your first Visual Basic project. 
9. Identify syntax errors. run-lime errors. and logic errors. 
Use AutoCorrect to correct syntax errors. 
Look up Visual Basic topics in Help. 

2 
l ' 
C 
Introduction to Visu.al Basic 2010 
Writing Windows Applications with Visual 
Using this text. you will learn to ltTite computer programs that run in the 
Microsoft Windows environment. Your projects will look and act like standard 
Windows programs. You will use the tools in Visual Basic (VB) and Windows 
Fmms to create windows with familiar elements such as labels. text boxes. but-
tons, radio buttons, check boxes, list boxes. menus, and scroll bars. Figure l.l 
shows some sample Windows user interfaces. 
o.i Message Formatte1 
t) Red 
Radio 
.,;:~1+---+ ) Green 
buttons 
1 
.) Blue 
~ ;[!; Black 
Picture --++-----+ )~ 
box 
~ 
IY. Me•sage VIsible 
~ 
<'--11+---':;. Buttons 
~ 
Labels 
c_9 R n R tcr Re.ading ·n Refreshment 
l=
I @J ~ 
Menu bar ___. 
~ile 
~dit 
HElp 
Sdc:d Coffee ond Syrup 
Ccffee Flavcr 
f 
. 
l 
zelnu 
h Creme 
0<-<nge 
Beginning in Chapter 9. you will create programs using Web Forms and 
Visual Web Developer. You can nm Web applications in a browser such as 
Internet Explorer. Google Chrome. or Mozilla Firefox. on the lntemet, or on a 
company intranet. Figure 1.2 shows a Web Fonn application. 
You also will become acquainted with Microsoft's new screen design tech-
nology. Windows Presentation Foundation (WPF), which is covered in Chapter 14. 
WPF uses its own designer and design elements, which are different from those 
used for Windows Forms. 
I 
Graphical user interfaces for 
application programs designed 
with Visual Basic and 
Windows Forms. 
II 
Group box 
List box 
I' 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
'#J R •n R •• for Readang and Refreshment • WJndOM rntemet Explorer 
l = I @l la..a..J 
@ Q • I~ ~'tp11locdlhost:653>'/CI100 •l•t I X I 1:> ~)og 
p ·I 
{,ir Fovoritt.~ I w :ii) Sugge>ted Sit« • (t \~cl Sl~e~O,I.cl)'
.,. 
fj R 'n R ··for Read ing·andR~LI &J ~ m· ""O'J @ · Pcgt ....-
s.f<ly . 
Tools • fJ• 
» 
A 
R 'n R Book Sales 
Qunntity 
J 
Title 
I 
I 
Price 
J 
Extended Price.L =-JI 
i 
15% Diocountl __jJ 
Discounted Price .I. 
Jl 
u. 
j 
Submit 
I [ 
Clear 
I I Discou1t Summary J 
Conto<t lJs 
. 
' 
"' 
' 
Done 
'\. local intrana< I Protect·ed Mode: Off 
oJl • 
~100% . 
The Windows G1·aphical Use •· Inte1·face 
Microsoft Windows uses a gr aphical usm· interface. or GUl (pronounced 
"gooey"). The Windows GUI defines how the va1ious elements look and function. 
As a Visual Basic programmer, you have available a toolbox of these elements. 
You will create new windows, called forms. Then you will use the toolbox to add 
the various elements. called controls. The projects tl1at you will write follow a 
programming technique called object.-orientecl programming (OOP). 
Programming Languages--Procedural, 
and Object Oriented 
There are literally hundreds of programming languages. Each was developed to 
solve a particular type of problem. Most traditional languages. such as BASIC, C, 
COBOL. FORTRAN, PIJJ, and Pascal, are considered procedural languages. That 
is, the program specifies the exact sequence of all operations. Program logic deter-
mines the next instruction to execute in response to conditions and user requests. 
The newer programming languages. such as Visual Basic. C#. and Java, use 
a different approach: object-oriented programming. As a stepping stone between 
procedural programming and object-oriented programming, the early versions of 
Visual Basic provided many (but not all) elements of an object-oriented language. 
For that reason. Microsoft referred to Visual Basic (version 6 and eadier) as an 
event-driven programming language rather than an object-oriented language. But 
with Visual Studio, which includes Visual Basic, C#. and F#, we have pro-
gramming languages that are truly object oriented. (Another language, C++. has 
elements of OOP and of procedural programming.) f #. introduced in 2007. 
applies the object-oriented paradigm to scripting languages for cross-platform 
development. 
A Web Form application created 
with Visual Web Devel.oper. 
running in a browser. 
3 

4 
v 
S 
l l 
A 
I, 
G 
.\ 
S 
(' 
Introduction to Visual Basic 2010 
In the OOP and event-driven model, programs are no longer procedural. 
They do not follow a sequential logic. You, as the programmer. do not take 
control and determine the sequence of execution. Instead, the user can press 
keys and click various buttons and boxes in a window. Each user action can 
cause an event to occw:. which triggers a Basic procedure that you have written. 
For example. the user clicks on a button labeled Calculate. The clicking causes 
the button's Click event to occur, and the program automatically jumps to a 
procedure you have written to do the calculation. 
The Object Model 
In Visual Basic you will work with obj ects. which have (li"Operlies. methods. 
and events. Each object is based on a class. 
Objects 
Think of an object as a thing. or a noun. Examples of objects are fonns and con-
trols. Forms are the windows and djalog boxes you place on U1e screen; controls 
are the components you place inside a form. such as text boxes. buttons. and 
list boxes. 
Pt·opet·ties 
Properties tell something about or control the behavior of an object. such as its 
name. color. size, or location. You can think of properties as adjectives that de-
scribe objects. 
When you refer to a property. you first name the object. add a period. and 
U1en name the property. For example. refer to the Text property of a form called 
SalesFonn as SalesForm.Text (pronounced "sales fmm dot text''). 
1\lethods 
Actions associated with objects are called methods. Methods are the verbs of 
object-oriented programming. Some typical methods are Close. Show. and 
Clear. Each of the predefined objects has a set of methods that you can use. 
You willleam to write additional methods to petform actions in your programs. 
You rdcr to methods as Objcct.Mcthod ("object dot method"). For exam-
ple. a Show method can apply to different objects: BillingForm. Show shows 
the form object called BillingForm; ExitButton. Show shows the button object 
called ExitButton. 
Events 
You can write procedures that execute when a particular event occurs. An event 
occurs when the user takes an action. such as clicking a button. pressing a key. 
scrolling, or closing a '~in dow. Events also can be triggered by actions of other 
objects, such as repainting a form or a timer reaching a preset point. 
Cl:tsses 
A class is a template or blueprint used to create a new object. Classes contain 
the definition of all available properties. methods. and events. 
Each time that you create a new object, it must be based on a class. For ex-
ample. you may decide to place three buttons on your form. Each button is based 
on the Button class and is considered one object. cnllcd an instance of the class. 
Each button (or instance) has its own set of properties. methods. and events. One 
button may be labeled "OK" . one "Cancel". and one "Exit". When the user 
l~llii:J 
The term members is used to refer to 
both properties ond methods. • 

C 
II 
A 
1• 
'I' 
" 
ll 
clicks the OK button, that button's Click event occurs: if the user clicks on the 
Exit button. that button's Click event occurs. And. of course. you have written 
different program instructions for each of the buttons' Click events. 
Au Analogy 
If the concepts of classes, objects. properties. methods, and events are still a 
little unclear. maybe an analogy will help. Consider an Automobile class. 
When we say aulomobile, we are not referring to a particular auto, but we know 
that an automobile has a make and modeL a color, an engi11e. and a number of 
doors. These elements are the properties of the Automobile class. 
Each i11dividual auto is an object. or an instance of the Automobile class. 
Each Automobile object has its own settings for the available properties. For 
example. each object has a Color prope11y. such as MyAuto.Color = I:Hue and 
YourAuto.Color = Red. 
The methods, or actions. of the Automobile class might be Start. 
SpeedUp, SlowDown. and Stop. To refer to the methods of a specific object of 
the class, use My Auto. Start and YourAuto. Stop. 
The events of an Automobile class could be Arrive or Crash. In a VB pro-
gram you write procedures that specify the actions you want to take when a par-
ticular event occurs for an object. For example, you might write a procedure for 
the YourAuto.Crash event. 
Note: Chapter 12 presents object-oriented programmmg m greater depth. 
1\'lic•·osoft's Visual Studio 
The latest version of Microsoft's Visual Studio. called Visual Studio 2010. 
includes Visual Basic. Visual C++. Visual C# (C sharp). Visual F# (F sharp). 
]Script, and the .NET 4 Framework. 
Tbe .l'fET Framework 
The programming languages in Visual Studio run in the .NET Framework. 'The 
Framework provides for easier development of Web-based and Windows-based 
applications. allows objects from different languages to operate together. and 
standardizes how the languages refer to data and objects. Several third-patty 
vendors have created versions of other programming languages to run in the 
.NET Framework, including .NET versions of APL by Dyalog. FORTRAN by 
Lahey Computer Systems, COBOL by Fujitsu Software Corporation, PERL by 
ActiveState. RPG by ASNA. and Java, known as lKVM.NET. 
The .NET languages all compile to (are translated to) a common machine 
language, called Microsoft Intermediate Language (MSIL). The MSIL code. 
called maTULged code, tuns in the Common Language Runtime (CLR). which is 
part of the .NET Framework. 
Visual Rasic 
Microsoft Visual Basic comes with Visual Studio. You also can purchase VB 
by itself (without the other languages but with the .NET Framework). VB 
is available in an Express version. and in Visual Studio 2010 Professional. 
Visual Studio 2010 Premium. and Visual Studio 2010 Ultimate. Anyone 
planning to do professional application development that includes the 
advanced features of database management should use the Pt·ofessional 
ver-sion or higher. You can find a matrix showmg the features of each edition 
in Help. 
s 

6 
v 
S 
l l 
,\ 
I. 
C 
Introduction to Visual Basic 2010 
The Professional version is available to educational institutions through 
the Microsoft Academic Alliance program and is a great deal. When a campus 
department purchases the Academic Alliance. the school can install Visual 
Studio on all classroom and lab computers and provide the software to all stu-
dents and faculty at no additional charge. 
Students can download and install Visual Studio 2010 Professional from the 
Microsoft site www.dreamspark.com. On this site. after you are verified as a stu-
dent. you can download many of the latest software development products for free. 
Microsoft provides an Express version of each of the programming languages. 
which you also can download for free (www.microsoft.com/express/ 
downloads/). You can use Visual Basic Express for Windows development and 
Visual Web Developer Express for the Web applications in Chapter 9. 1l1is text 
is based on the Professional version of Visual Studio 2010. However. you can do 
the projects using Visual Basic 2010 Express and Visual Web Developer 2010 
Express. both of which are the CUITent version. Tllis version of Visual Basic is 
called both Visual Basic 2010 and Visual Basic 10. You cannot run the projects 
in this text in any earlier version of VB. 
Writing Visual Basic Projects 
, 
When you write a Visual Basic application. you follow a three-step process for 
planning the project and then repeat the three-step process for creating the pl'Oj-
ect. The three steps involve setting up the user interface. defining t11e proper-
ties. and then creating the code. 
Tl1e Tlll'ee-Step P 1·ocess 
Plauuiu;:; 
1. Design the user interfa.ce. \l'hen you plan the uset• intet-t'ace. you 
draw a sketch of the screens the user will see when rutming your proj-
ect. On your sketch, show the forms and all the controls that you plan 
to use. Indicate the names that you plan to give the form and each of 
the objects on the form. Refer to Figure 1.1 for examples of user 
intetfaces. 
Before you proceed with any more steps. consult with your user and 
make sure that you both agree on the look and feel of the project. 
2. Plan the properties. For each object. write down the properties that you 
plan to set or change during the design of the fonu. 
3. Plan the Basic code. In this step. you plan the classes and procedures 
that will execute when your project fUllS. You will determine which 
events require action to be taken and then make a step-by-step plan for 
those actions. 
Later. when you actually write the Visual Basic code. you must fol-
low the language syntax rules. But during the planning stage, you will 
write out the actions using pseudocode, which is an English expres-
sion or comment that describes the action. For example, you must plan 
for the event that occurs when the user clicks on the Exit button. The 
pseudocode for the event could be Terminate the project or Qu.it. 

C
II
,\I>
'I'
I'
R 
llt·ogrammiug 
After you have completed the planning steps and have approval from your user. 
you are ready to begin the actual construction of the project. Use the same 
three-step process that you used for planning. 
l. Define the user interface. When you define the user interface. you cre-
ate the forms and controls that you designed in the planning stage. 
Think of this step as defining the objects you will use in your 
application. 
2. Set the properties. When you set the properties of the objects. you give 
each object a name and define such attributes as the contents of a label, 
the size of the text, and the words that appear on top of a button and in 
the form's title bar. 
You might think of this step as describing each object. 
3. ffi-ite the Basic code. You will use Basic programming statements (called 
Basic code) to carry out the actions needed by your program. You will be 
surprised and pleased by how few statements you need to create a pow-
erful Windows program. 
You can think of this third step as defming the actions of your program. 
Visual Basic Applicalion Files 
A Visual Basic application, called a solution, can consist of one or more proj-
ects. Since all of the solutions in this text have only one project. you can think 
of nn~"> .'lolnt-inn = onP nt•oiP.rt F.:.r.h nl"n-iPor.t r.;tn r.ont~ln nnp or lllOI'P forTn filP.'t 
... ........ _. .... ............ ~......... 
... ......... l"''"'""J'-''""''' ----· · t"'"-""J ........... -''-""•• ............. ................... ....... . ........... .... .._ ........... .._._ ........ . 
In Chapters l through 5. all projects have only one fonn. so you can think of 
one project = one form. Starting in Chapte1· 6. your projects will contain mul-
tiple forms and additional files. As an example. the Hello World application that 
you will create later in this chapter creates the following files: 
File Name 
File Icon 
Desc•iption 
HelloWorld.sln 
L:i 
The solution file. A text file that holds 
information about the solution and the projects 
it contains. This is the primary file for the 
solution- the one that you open to l'·ork on or 
run your project. Note the ''10"' on the icon~ 
which refers to VB version 10. 
HelloWorld.suo 
Solution use r options file. Stores i nformation 
Note: This file is 
about the state of the integrated deve lopment 
hidden by 
environment (IDE) so that all customizations 
default. 
can be restored each time you open the 
solution. 
HelloForm.vb 
Va= 
A . vb file that holds the code procedures that 
you write. This is a text file that you can open 
~ 
in any editor. Warning: You should not modify 
Lhis file unless you are using the editor in the 
Visual Studio environment. 
HelloForm.resx 
i? 
A resource file for the form. This te x1 hie defines 
all resources used by the fo1m, including strings 
~ 
of text, numbers. and any grap!Ucs. 
7 

8 
v 
Fae Name 
File Icon 
AelloForm.Designer.vb 
Hello World. vbproj 
tlelloWorld.vbproj.user 
S 
l l 
,\ 
I. 
A file created by the Fonn Designer that holds 
the definition of the form and its controls. You 
should not modify this file directly. but make 
changes in the Designer and allow it to update 
the file. 
C 
Introduction to Visual Basic 2010 
The project file: a text file that holds infonnation 
about the ftles and options in your project. 
The project user option file. This text file holds 
IDE option seuings so that the next time you 
open the project, all cu•tomizations will be 
restored. 
Note: You can display file extensions. In Windows i or Vista. open Win-
dows Explorer and select Organize I Folders and search options, click on the View 
tab. and deselect the check box for Hide extensions for known file types. In Win-
dows XP. in the My Computer Tools menu, select Folder Options and the View 
tab. Deselect the check box for Hide extensions tor known file types. If you do not 
display the extensions. you can identify the fHe types by their icons. 
After you run your project. you will find several more files created by the sys-
tem. These include the Assemblylnfo.vb. MyApplication.myapp. MyEvents.vb. 
Resources.resx, and Resources.vb. The only file that you open directly is the 
.sin. or solution file. 
The Visual Studio Environment 
The Visual Studio euvil·omueut is where you create and test your projects. 
A developmenl environment. such as Visual Studio. is called an illtegrctted 
development enviroume11t (IDE). The IDE consists of various tools. includ-
ing a form designer. which allows you to visually create a fom1; an editor. for 
entering and modifying program code; a compiler, for translating the Visual 
Basic statements into the intermediate machine code; a debugger, to help 
locate and com;,ct program enors; an object browser. to view available classes. 
objects. properties, methods. and events; and a Help facility. 
In versions of Visual Studio prior to .NET. each language had its own IDE. For 
example. to create a VB pmject you would use the VB IDE. and to create a C++ 
project you would use the C++ IDE. But in Visual Studio. you use one IDE to cre-
ate projects in any of the supported languages. Starting with the 2010 release. the 
editor is written in Windows Presentation Foundation (WPF), which provides 
greater animation than the previous versions. You can adjust the text si7.e with a 
scroll of the mouse wheel and have greater customization of the stm1 page. 
Note that this text is based on the Visual Basic Professional. If you are 
using VB Express, the screens differ somewhat from those t11at you see. 
Default Envil·onment Settjngs 
The full version of Visual Studio 2010 provides an option to allow the pro-
granuner to select the default profile for the IDE. The first time you open Visual 

~ II 
\ 
I' 
'f 
•: 
R 
tudio. you ore presented 11i th the Choose Default Environment Settings dialog 
box (Figure 1.3). where you can choose Visual Basic Development Settings. 
Notice the ins tructions in the dialog box: you can make a different selection 
late r from the Too.ls menu. 
Not~: If you are using the Express version of Yisual Basic. you won't see 
this dialog box. 
Sdorc you b-c9'"' 1.1)1"19lh; cppllul-.gn(r;n lht fnt tflt~;. you n eed to ~ify the ty~:c d <kvd o-pi'Oelt 
~tc:tr.ttyyou cn:,•~c it\ the: n~t,. such., \o'i)uol tlcs.c Cf Vi~uo l c~. Tnsi'lformotion ..sused to •ppt, • 
p·cckftnc:d collc.c:bef\ of tttt1ngs to the dcvelopl"nCn' tf'"1ronmcnc: that o doignc:d feryout 
dwcloFmtnt IC'tJm)· 
Vo.Jcan d 1oo-ut to us• a different col'«:tion of nttir.9' it tJny time from the Took m~nu, <:hooW: 
lmpott and hpart S«uf'l~ and t~tn ct-coct Rt toM d t.tftngr; 
Choox ycur dcfMit c:nvlrOMIIC"nt x tttt.gst 
Cicf'litict OcY"cloprrunt SctLnrp 
Pro«< Moooo""cl't Selt;.,o, 
Viu.al C,.Oev•loprnef'\t Sttt•ns' 
wu O.Vtlop•'""' 
Wob U..olopmtftl (Cod• O..y) 
Tit(' IDE lnitiaJ Sc·t·t•t•n 
Ou.c:upttoru 
Opt.unzes the HWtfonment so you ca1 foc\hon 
buidrq wotld-das.) •F-plicoticm T+-J~ collntion cf 
Sdtaf'gs contofl'l-s custorniut~ 
to ~he window 
.,fO"\. ccmmo"'':l f'QCI'IUj, al\d '<q-boo~ 5hortcub to 
ma\t: common\,.~~ 
B.c:fc ccmma,d~ n"IOC'f' 
.Jcces:s:-t l~. 
When you open the Visual tudio rDE. you generally see an empty environ-
ment 10·ith o Start Page (Figure 1.4). Ho10·ever, it's easy to customize the envi-
ronment. so you may see a different view. In the step-by-step exercise later in 
this chapter. you " i ll learn to reset the JDE layout to its default view. 
The Start Page contains tabs for getting started. for guidance. and for the lat-
est news. You can use the check boxes at the bottom of the page to request that it 
close after a project loads and whether to show the page when Visual Studio starts. 
You can open an existing project or begin a new project using the Sta11 
Page or the Fils menu. 
T he N t'W P•·oj('<'l Dialog-
You wiJJ create your first Visual Basic projects by selecting File I New Project 
on the menu bar or clicking New Project on the Start Page. either of which 
opens the Nsw Project dialog (Figure 1.5). In the New Project dialog. select 
'flu. jirJl ltmt )Oil o~n IM 
l'uua/ Studio IDE. )OU mmt 
~II'Ct tht dtfault t>nr ironmtlll 
Mllir~gsfM a Vi•ual BasK 
devewper. 
9 

10 
v 
S 
l l 
,\ 
L 
(' 
Introduction to Visual Basic 2010 
Fi~nrc 1.1 
The Visual Studio IDE with the Start Page open. as it first appears in Windows 7. without an open project. 
OOViSual Studio20tOProfesslon.li 
t.. !.lllotw.lho1u"~lki:•Jtl..,r•""•• 
~"*'-*' ... ,..., 
~~f,njr(t._ 
~ (IOUplg.JIIt~~pfljN:ll~.tel 
JlSI-~Il!\ o4.tw 
Begin a new VB Windows project using the Windows Fomts Application template. 
Select the Windows Fonns 
lnmaedl~~t~ 
"
V~:.;ICim 
Select 
..... 
~ 
WPFI<f''IA;.a,,.,. 
Vil'l.nal R::.sir. 
Oti<<'l 
·" 
Windows 
Oo«< 
(o.n:olc ~fllution 
R~~ing 
~ 
ShxtPO!nt 
t ca::l.!bwy 
sa~c•lvbt 
re:.t 
j;J \Mlf iiOMoe11.pp/i<'.'ltion 
we; 
'fftuUiul¥ 
~llf l~f~SUl,ll 
3 
t~ty fccjtn 
l)he~PflJ Cct li"PP 
~ 
W.nd rw~-sSrrvif"l' 
Oottbnc 
TetPto~ts 
·~ 
WPFCu:.totn Co11trellibw)' 
1~1 'NPI-V:el t.cnbdiJbm y 
~ 
W. t~ltC~".»t ~orm~ C~l'ltroUtbruy 
y,..,.,,R-.-... 
Typ .. 'IICullhUl: 
Afll~ffJrUUti!Vj)lllFPlCI!ICfi U.Ithl 
V{im.Ju ... ')u::o i<tt(foo.c 

C
II
,\1°T
t:
R 
Windows Forms Application if you are using VB Express. In the Professional 
version. first select Visual Basic and Windows in the Installed Templates pane 
and Windows Application in the center pane. You also give the project a name in 
this dialog box. 
The IDE 1\llnin Wimlow 
Figure 1.6 shows the Visual Studio environment's main ~+indow and its various 
child windows. Note that each window can be moved, resized. opened. closed. 
and customized. Some windows have tabs that allow you to display different 
contents. Your screen may not look exactly 1 ike Figure 1.6; in all likelihood you 
will want to customize the placement of the various windows. The windows in 
the lDE are considered either document windmn; or tool 1ti ndows. The Designer 
and Editor windows are generally displayed in tabs in the center of the screen 
(the Document window). and the various tool windows are docked along the 
edges and bottom of the LDE. but the locations and docking behavior are aU 
customizable. 
'lbe ID.E main window holds the Vis ual Studio menu bar and the toolbars. 
You can display or hide the various windol4''S from the View menu. 
The Vi~ual Stttdio environmelll. Each 'Window can be mooed. ff<jized. cwsed. or cwU>mi.ted. 
II 
t' lgar P 
1 .6 

12 
v 
S 
l l 
A 
I, 
G 
.\ 
S 
C 
Introduction to Visual Basic 2010 
The Toolbm·s 
You can use the buttons on the tool bars as shortcuts for frequently used opera-
tions. Each button represent.s a command that also can be selecte(:l from a menu. 
Figure 1.7a shows the toolbar buttons on the Standard toolbar for the Professional 
veiSion. which displays in the main window of the IDE; Figure 1. 7b shows the 
Layout toolbar, which is useful for designing fonns in the Form Designer: and 
Figure l.7c shows the Text Editor toolbar. which contains buttons to use in the 
Editor window. Select View /Too/bars to display or hide these and other toolbars. 
F i g u••e 1.7 
The Visual Studio toolbars contain buttons that are shortcuts for menu commands. You can display or hide each of the 
toolba;rs: a. the Standard toolbar: b. the Layout toolbar: and c. the Text Editor toolbar. 
The Document Will(low 
The largest window in the center of the screen is the Oocrnuenl window. No-
tice the tabs across the top of the window, which allow you to switch between 

C 
II 
A 
1• 
'I' 
1•: 
R 
open docmnents. The items that display in the Document window include 
the Form Designer. the Code Editor, the Database Designer. and the Object 
Browser. 
You can switch from one tab to another. or close any of the documents us-
ing its Close button. 
The F o1·m Designe•· 
The Fon u Designet· is where you design a form that makes up your user in-
tetface. In Figure 1.6. the Form Designer for Forml is currently displaying. 
You can drag the form's sizing handle or selection border to change the size of 
the form. 
When you begin a new Visual Basic Windows application, a new form is 
added to the project with the default name Fotml. In tlte step-by-step exercise 
later in the chapter. you willleam to change the form's name. 
The SoluLion Expl01·e•· Window 
The Solution Explot·et· window holds the filenames for the files included in 
your project and a list of the classes it references. The Solution Explorer win-
dow and the Window's title bar hold the name of your solution (.sin) file. which 
is WindowsApplicationl by default unless you give it a new value in the New 
Project dialog box. ln Figure 1.6. the name of the solution is MyFirstProject. 
The Pro·pe•·ties Window 
You use the Propet·Lies windo w to set the properties for the objects in your 
project. See "Set Properties" later in this chapter for instructions on chanp;ing 
properties. 
The Toolbox 
The toolbox holds the tools you use to place controls on a form. You may have 
more or different tools in your toolbox. depending on the version of Visual Basic 
you are using (Express. Professional, Premium. or Ultimate). Figure 1.8 shows 
the VB Professional toolbox. 
Help 
Visual Studio has an extensive Help feature. which includes the Microsoft 
Developer Network library (MSDN). You can find reference materials for Visual 
Basic. C++, C#. and Visual Studio: several books; technical articles: and the 
Microsoft Knowledge Base. a database of frequently asked questions and their 
answers. 
Help includes the entire reference manual. as well as many coding 
examples. See the topic "Visual Studio Help" later in this chapter for help on 
Help. 
When you make a selection from the Help menu. the requested item ap-
pears in a new browser window that floats on top of the lDE window (Figure 1.9). 
so you can keep both open at the same time. 
13 
l~ljjl#l 
Use Ctrl + Tab to switch to another 
open document in the Document 
window. • 
l~ljjl#l 
Y au can sort the properties in the 
window either alphabetically or by 
categories. Use the buHons on the 
Properties window. • 

14 
v 
S 
l l 
,\ 
I. 
C 
Introduction to Visual Basic 2010 
Toolbox 
• fl. X 
~ All Windows Forms 
• Common Controls. 
-
Common controls for 
lit 
Pointer 
Windows Forms 
@ 
Button 
0 
CheckBox 
[§]] 
. 
CheckedlistBox 
~ 
. Com boB ox 
'iii DateTimePicker 
A 
Label 
A 
Linklabel 
[§:;:] 
ListBox 
~ ~ ~ 
ListView 
2 ~ 
!!;] 
MaskedT extBox 
., MonthCalendar 
~ Notifylcon 
[llil 
NumericUpDown 
~ PictureBox 
lllD 
Progre~tB~r 
0 
RadioButton 
i!=: 
'F;i Rich T extBox 
~ T extBox 
'-=-==.;_ ___ 
.;_~_,<---
, 
ScroU to see more controls 
Design Time, Run Time, and Debug Time 
Visual Basic has three distinct modes. While you are designing the user inter-
face and writing code, you are in design time. When you are testing and run-
ning your project, you are in run time. If you get a mn-time error or pause 
program execution, you are in debug time. TI1e IDE window title bar indicates 
(Rwming) or (Debugging) to indicate that a project is no longer in design time. 
Writing Your First Visual Basic Project 
For your first VB project. you will create a form with three controls (see Figure 
1.10). This simple project will display the message " Hello World" in a label 
when the user clicks the Push Me button and will terminate when tl1e user 
clicks tl1e Exit button. 
Sel u,) Yo m· WOI·IiSI>ace 
Before you can begin a project, you must run the Visual Studio IDE. You also 
may need to customize your workspace. 
Rw1 Visual Studio 
These instructions assume that Visual Studio is installed in the default loca-
tion. If you are running in a classroom or lab. tl1e program may be installed in 
an alternate location. such as directly on the desktop. 
Figure 1 . 3 
The toolbox for Visual Studio 
Windows Forms. Your toolbox 
may have more or fewer tools. 
depending on the version yo1t 
are using. 
You can sort the tools in the toolbox: 
Right-click the toolbox and select 
Sort Items Alphabetically from the 
context menu (the shortcut menu). • 

C
ll
1\l1
'l'
li
R 
IS 
Help displays in a new browser window. intkpendent of the Visual Studio IDE window. 
~ 
Visual Studio 2010 - WindO'NS rntemet Explo:'et 
1= 1121
1~ 
Ou 
~ ~ http;//l27.0.0.1;47373(ndPJl'om.helo1mdhod=fl&q•• · I~ I~J le ilin9 
p • 
);l favO<ites I ..:4 ~ Suggested SitES • li) Web Slice G<llery • 
if) Visual-Studio 2010 
r -, 
f'll · ~ • C.:. ~ · Page • 
Safety . 
Tool!;• tQ• » 
. 
1·-·· 
a. I Visual Studio 2010 
00." ....... 
j 
V1sual Studio 
l ibrary Homg 
Sen-d F-ecdbock 
Vi<u•IStudo 2010 
VISUal StUd!O 
This: document prov•des res.ources for leam1ng how to use V1sual S-tudfO 
Visual Stud!O Ap!:)licetion Ltfecycle Mandgerneu 
.NET F1cmcwork 4 
~o create desktop applications and W eb applications . 
---
Related I ink_~ 
I ~ 
Micro~oft Help Sysh:m Oocumcntctic:m 
W~lc:oml! to Visual Studio 2010 
Learn about Visual Studio 2010: 
, ~ 
Visual Studio 2010 Welcome Page 
• Visual S1uoio 2010 Produa ~fighr.ghts 
bd 
Ooc;umentation 
l earn how to create applications by using Visual 
Studio in the Visual Studio 2010 documemation: 
• Visval S;udio 
• Vi~u:al Studio Application Lifecyde 
I 
Management 
. NET Framework 4 
~ 
& Internet I Protected Mode On 
.... ~100% . 
~ 
~· 
'ai ~bWvrld iJ7'Y_~_,.,_•_•-~-----
The Hello World form. Tlu! 
"Hello World" message will 
appear in a label when the user 
clicks on the Push Me button. 
The /.abel does not appear until 
the button is pressed. 

16 
\ .! 
S 
l ' 
.\ 
L 
R 
\ 
S 
(' 
lntrodrtelion lo lliJunl Bwic 2010 
"fEr' 1: Click the Windows Start buuon and move the mouse pointer to AI/ 
Programs. 
STEP 2: Lx:ate Microsoft Visual Studio 2010 or Microsoft Visual Basic 2010 Express. 
-.TF.r' :1: If a submenu appears. select Microsoft Visual Studio 2010. 
Visual Studio (VS) will start and display the Start Page (reler to Fig-
ure 1.4). If you are using Visual Studio Professional and this is the 
first time that VS has been opened on this computer. you may need to 
select Visual Basic Development Settings from the Choose Default Envi-
ronment Setting dialog box (refer to Figure 1.3}. 
Note: The VS IDE can be customized to not show the Strut Page when it opens. 
~taJ"I a ['\('\\ Jlrojt•rt 
STEI' 1: Select File I New Project. The New Project dialog box opens (Fig-
ure l.ll). Under lnsta/19d Templates, make sure that Visual Basic and 
Windows are selected: in the center pane. select Windows Forms Appli-
cation. If you are using Visual Basic Express, the dialog box differs 
slightly and you don't have to choose the language. but you can still 
choose a \findows Fonns Application. 
~n:l' 2: Enter "Hello World'' (without the quotes) for the name of the 
new project and click the OK button. TI1e new project opens 
Enter the name for the 11ew project. 
Recent: T ~mplatcs 
!.NET framework4 
.: 5ort by: [ D<I<Ut 
Figure l.l I 
:a w~ 
Fo1m1: .lppi1C31101'1 
V•SlU18l!SIC 
Type: ViSUII6a5it 
4 ~wo~IB,nic 
WLndows 
\Vi!b 
Office. 
Cloud 
Reporting 
Shart:Poirn 
S.ttvt1llgM 
l est 
WCF 
Wo rkflow 
Cther Langu2ges. 
Other Project l:)lpes 
om~bllse 
Test Projects 
OnliM T c:;mp!.J.tcs 
[;!] 
'"e 
d!l 
~ 
~ 
~ 
~ 
~ 
iS 
l_ 
W?F 4pplicatiot'l 
Ccruole Appliutcn 
Clu~ Librory 
W?f 6rowse1 Applotion 
Empty Project 
Windows: Se:rvtce 
WPF CI.J-itom Conb'clli-bnry 
W?f Us.c:r Controllibrao· 
\Vlf'Jdows f rJrms Control Ubrary 
v~wi ! Sas:ic 
Vi!;l...nl s.,~ic 
v~~ ~ Bo:sic 
v~..~alBasic 
VI9Jl l BasiC 
Vtst.ut Bas:ic 
Visu ~l Basic 
VlS'.J ~!Bo:ts.ic 
VtSU ~ l &3s.ic 
A pfOject for Cle:!tlng :tO iSpJ.I <iltion with ct 
Window~ Ulct 1 nterf.:c~ 

C
II
A
I•
'I'
I'
R 
(Figure 1.12). At tllis point. your project is stored in a temporary di-
rectory. You specify the location for the project later when you save it. 
Note: Your screen may look significantly different from the figure since the 
environment can be customized. 
The Visual Studio IDE with the new Hello World project. 
Fonnat lools Test Window 
HElp 
t> "-> 
I • -=: ~ I 
" - ..;:J-
J 
~ I 
":a C:s ·_. ' Debug 
·t ·· 
I!II!III~F~:,~m~
I.~
vb~t~o.~si;gn~J~x~ 
• 
SolutJon Explorer 
• Y. X 
Set Up Yom· Envil'oJruJent 
In this section. you will customize the environment. For more information on 
customizing windows. floating and docking windows. and altering the location 
and contents of the varions windows. see Appendix C. 
STEP 1: Reset the IDE's default layout by choosing Window I Reset Window 
Layout and respond Yes to the confirmation. The IDE should now 
match Figure 1.12. 
STEP 2: Point to the icon for the toolbox at the left of the IDE window. The 
Toolbox window pops open. Notice the pushpin icon at the top of the 
window (Figure 1.13). 
STEP 3: Click the AutoHide pushpin icon for the Toolbox window, which pins 
the window open rather than allowing it to AutoHide. 
17 

18 
\ 
S 
l 
A 
I. 
u 
\ 
s 
The first step in planning is to design the user interface. Figure 1.14 snows a 
sketch of the form that includes a label and two buttons. You will refer to the 
sketch as you create the project. 
He lloForm~ 
I 
l~----+ Me55agel.al:>el 
.__ ______ 
--..J 
Pu5h Me 
(-------+- Pu5hButton 
Exit 
(-------+ExltButton 
FigurP 1.13 
The Toollx>x wiiiClow. 
Figu1• e 
1.14 
A sketch of the Hello World 
form for plawli11g. 

t: 
II 
1\ 
I' 
'I' 
J; 
B 
The nexl two steps. plarming the properties and the code. have already 
been done for this first sample project. You will see the planning in the steps 
that foiJow. 
Define the U!!t'r l.ntel'fat't• 
Sf't rp tht> Form 
Notice that the ne~t· form in the Document 1+indo11· has all the standard Win-
dows features. such as a Litle bar. maximize and minimize buttons. and a close 
button. 
STEI' 1; Resize the form in the Document window: Drag the handle in the 
lower-right comer down and to the rq;ht (Figure 1.15}. 
11:t forMl 
Drag handle to enlarge form 
Phwf' f.outr·ol~ on thf' f ol'ln 
You are going to place three controls on the form: a La bel and two Buttons. 
STEP 1: Point to the Label tool in the toolbox and click. Then move the pointer 
over t11e form. Notice that the pointer becomes a crosshair with a big 
A and the Label tool appears selected. indicating it is the active tool 
(Figure 1.16). 
19 
Ma~·e th.efonn larger b) 
dragging it. lower-right 
handle diago11ally. The 
ha11dle.1 disappear a.1 rou drag 
the corner of the form. 

20 
\ .' 
S 
U 
A 
I, 
C 
lntrod~tction to Vis ~tal Basic 2010 
.Fi~u•·e 1.16 
When you click on the Label tool in the l<>olbox. the tool's button is activated and the mouse pointer becomes a cro.s.shair. 
Crosshair pointer \ 
ToolbQ'l( 
T~){ 
.. 
Formbvb [0~1gn l " X 
ll' All Windows Forms . 
\ 
4 Common Conlro(s t ~\ 
l=l!§lf121 
It 
Pointer 
: 
Label tool is 
activated 
______,. 
@ 
B 
lll 
f=:i!l 
'iii 
A 
A 
~ 
~F 
:;;! 
m 
3 ;m 
til 
Butt em 
CheckBox 
Chcckedh~Box 
+A 
ComboBox 
OateTimePicker 
Label 
trnklabel 
lidS ox 
li~Yiew 
f\'h~kcdl o±Bo>: 
MonthCoJiend;v 
Nctifykcn 
NumencUpOown 
PictureOox 
STEP 2: Point to a spot where you want the left edge of the label and click. The 
label and its default contents (Labell) will appear (Figure 1.17). 
a ············· 
: Labell 
As long as the label is selected. you can drag it to a new location or 
press the Delete key to delete it. 
The newly ereated label 
appears outlined, indicating 
that it i.s selected. Notice that 
the contents of the label are set 
to Labell by default. 

( ' 
II 
;\ 
1• 
T 
t: 
R 
You can tell that a label is selected; it has a dolled border as shown 
in Figure 1.17 when the AutoSize property is True [the default] or siz-
ing handles if you set Ute AutoSize property to False. 
l>TEl' 3: Place a button on the form using one of two techniques: (1) You can 
click on the Button tool in the toolbox, position the crosshair pointer 
for one comer of the button. and drag to Ute diagonally opposite cor-
ner (Figure 1.18); or (2) you can drag and drop the tool from the toolbox. 
which creates a button of the default size. The new button should ap-
pear selected and have •·esizing han£1lcs. Tite blue lines that appear 
are called snap lines. which can help you align your controls. 
·~ Forml 
c:o IN I~ 
1,-------
L>bd l 
!+---------+ -
Snap line 
I 
-
While a control is selected. you can delete it or move it. If it has re-
sizing handles, you can also resize it. Refer to Table 1.1 for instruc-
tions for selecting. deleting. resizing. and moving controls. Click 
outside of a control to deselect it. 
Selecting. J)r•letiu!!, Mo\'ing, nnd R~izing Conu·ob on a Fol'ln 
Select a control 
Delete a control 
Move a control 
Resize a control 
Click on the control. 
Select the control an d then press the Delete key on the keyboard. 
Select the controL point inside the control (not on a handle). press 
the mouse button, and drag it to a new location. 
Make sure the control is selected and bas resizing handles; then 
either point to one of the handles. press the mouse button. and drag 
the handle: or drag the form's bottom border to change the height or 
the side border to change the width. Note that the default format for 
Labels does not aUow resizing. 
Fla n r ~ 1.18 
Sef.e<ot the Butum tool and 
drag diagoooU)' to create a 
new B11Uon control. The bl.ue 
stUJp lines hefp IO align 
conJrol.s. 
Tnbl.-
1.1 
21 

22 
v 
S 
l l 
,\ 
L 
(' 
Introduction to Visual Basic 2010 
STEP ,L: Create another button using another technique: While the first button 
is still selected. point to the Button tool in the toolbox and double-
click. A new button of the default size will appear on top of the last-
drawn control (Figure 1.19). 
STEl' 5: Keep the new button selected, point anywhere inside the button (not on 
a handle). and drag tl1e button below your first button (Figure 1.20). 
3} Forrnl 
I 
Labell 
Labell 
BLtton1 
I Button2 
~ .. 
' 
STEP 6: Select each control and move and resize the controls as necessary. 
Make the two buttons the same size and line them up. Use the snap 
lines to help with the s ize nnd alignment. Note that you con move- but 
not resize-
the label. 
Fign•· e 1.19 
Place a. new button on thejonn 
by double-clicking the Button 
tool in the toolbox. The new 
button appears on top of the 
previou.sly select.ed control. 
Fit!n•• e 
1 . 20 
Drag the new button (Button2) 
below Button]. 
If no control is selected wh~n you 
double-click a tool, the new control 
is added to the upper-l~ft corner of 
the form. • 

C 
II 
A 
1• 
'I' 
" 
ll 
STEP 7: Point anywhere on the form and click the right mouse button to 
display a context menu. On the context menu. select Lock Controls 
(Figure 1.21). Locking prevents you from accidentally moving the 
controls. When your controls are locked, a selected control has no 
handles. but instead has a small lock symbol in the upper-left comer. 
Note: You can unlock the controls at any time if you wish to re-
design the form. Just click again on Lock Controls on the context menu 
to deselect it. 
At this point you have designed the user interface and are ready to set the 
properties. 
'~ Fom)l 
~~ 
II 
I 
l<bel1 
~ 
Vi.ew.Ccde 
F7 
II 
Lock <.ontf'OI:s 
~
.A l'..t• 
ttrl>\1 
~ 
r1if 
Pr;operttes. 
2 
I 
Set P t·opet·ties 
Set the Name and Text l't·opcrtics for rbc Label 
STEP 1: Click on the label you placed on the form; an outline appears around 
the control. Next click on the title bar of the Properties window to 
make it the active window (Figure 1.22). Note: If the Properties win-
dow is not displaying, select View I Properties Window. 
Notice that the Object box at the top of the Prope1ties window is 
showing Label1 (the name of the object) and System. Windows. Forms. 
Label as tl1e class of the object. The actual class is Label: System. Win-
dows. Forms is called the uamcspace. or the hierarchy used to locate 
the class. 
STEI' 2: In the Properties ~indow. click on the Alphabetic button to make sure 
the properties are sort.ed in alphabetic order. Then select the Name 
property. which appears near the top of the list. CHck on (Name) and 
notice that the Settings box shows Label1. t11e default name of the label 
(Figure 1.23). 
23 
After the controls are placed 
into the desired location. lock 
them in place by selecting 
Lock Controls from the cont.ext 
menu. Remember that context 
menus differ depending on the 
current operation and systen~ 
setup. 
If the Properties window is not visi-
ble, you con choose View I Prop-
erties Window from the menu or 
press the F4 shortcut key to show 
it . • 

24 
S 
l ' 
\ 
L 
R 
\ 
S 
C 
Introduction to Vuual Ba,ic 2010 
Fi~n••e 1.22 
The currently selected control i• •hown in the Properties window. 
•or ::o1ml 
Sel.,ted object is locked 
'-' 
i;!B! Hei<>WOJ1d 
l!lOi MyPrcj•cl 
l!J Form!.vb 
~~~S~
ot,;:;
••:io:::,n!a::;
:pl~o;re~
r lilllr.lt Properties 
o1opert:16 
... ~ )( 
windon..,. 
l.JbtJl Syctwn.\\lndewc.Jorrnc Ltbtl • 
Namespuc:e 
and cia,.. of 
oelocted 
object 
Tablnde>. 
T•g 
·~..,~~··· Wbell 
Tf"'ot.lhg" 
tiuCcmp•bblr:" Fo.s:= 
UcttAnernon~e lru# 
Text 
Object box 
Setlinp box 
l'"'• tot ~~oo.ltt'd with the: cctrtlot. 
Name of selected object 
Propt.r:~ 
-. q x 
Alphabetic buuon ......._ l<bell S>fstem.Wind<M<Forms.L!bel • 
~-~ . bJ .! I 
(App!icJtJOnSttt 
tl' (Oa[c:Bindings) 
(Namo) 
L»oll 
-
Settin191 box 
Acc.~si bk:Descr 
Accts§lb~"''mt 
Ac-ces!ibkRole Od•ult 
(Named 
tndiccto the Mrnc: ux:.:d in code to 
•dcnli') the oqccl. 
STEP 3: Type "MessageLabel" (without the quotation marks). See Figure 1.24. 
As a shortcut. you may wish to delete the l from the end of Labell. 
press the Home key to get to the beginning of the word. and then type 
"'Message". 
Mter you change the name of the control and press Enter or Tab. 
you can see the new name in the Object box's drop-down list. 
Fl~n1• t> 1.23 
The Properti~ window. Click 
on the Name propert:y to 
change the value in the 
Settings box. 

C
II
1\I0
TIIR 
Propertie~ 
.. ~ X 
Sort tile Prupe.rtieo ......._ l•bell Syst•m.Wtnd<J..-<.Forms.t.ab•l • 
list alphabetically 
"So::. 1 
'" 
• • t, i" 
~ 
D (Appri<dx=-nS~::tt 
~ (OataBinding') 
I!§@ 
MesH9clabd .....-r-The nett· naule appellf'ft 
Access-bleDe:scr 
in the Settings box 
Acca,ib~mt 
Acc~stb~o~ Ofl~utf 
(rbmet 
lndi<lt*' the: Nmc u:M::I in code to 
,cie"rtifytheot,;ect. 
~TEl' 1: Click on the Text property to select it. (Scroll the Properties list if 
necessary.) 
The Texl pl'opea·ty of a control determines what will be displayed 
on the fonn. Because nothing should display when lhe program be-
gins. you must delete the value of the Text property (as described in 
the next hvo sleps). 
STEl' 5: Double-click on Lsbe/1 in the Settings box: the entry should appear 
selected (highlighted). See Figure 1.25. 
Name of control 
Proper-Je3. 
•'1X 
I> S.:e 
39, 11 
le.blndcx 
0 
l l!g 
l!!l:m 
l O>Ct.<iiiQn 
lopuf\ 
TeJ<t 
The: ~CX! u50ci.J:cd with the control. 
Value in Settinp box 
is selected 
STEP 6: Press the Delete key to delete the value of the Text property. TI1en 
press Enter and notice that the label on the form nearly disappears. 
All you see is the lock symbol and a very small dotted Line (Figure 
1.26). and if you click anywhere else on the form. tt·hich deselects the 
label. you cam1ot see it at all. 
Type ''llfessageLabel" into the 
Settingj ba-r for the Name 
property . 
Double-click in the Setting~ 
box to select the entry. 
2S 

26 
l ' 
s 
l l 
" 
L 
ll 
.\ 
s 
( ' 
lnlrodru:tion to Ywwl Bmic 2010 
I Label i• empty w1d selected 
forn,l vb (()eugn]" X 
I 
'"' ...i'rn UJ"'j.f'~ 
11,. P:.orml I 
~~ jl; HeloWorld 
s.i My PrOJEct 
::J Forml .vb 
~ 
Solution &.plorer 
.. 
Ptope LeS 
-qx 
Mesggelabel System.Windows.Fonn~ • 
~ 
':_ ~ ~ 
.§J _, 
R.st<Toltit 
tlo 
~ 
[ &..n-x~2 J 
s;,, 
39,U 
Tablndex 
0 
h g 
8 
,,, 
"' 
·-;t:.-· 
-
loxt 
Ttlc lot o»> oh:d wth the cont.1d . 
./ 
Texl deleted from theSetttngs box 
Labels have an AutoSize property. which is set to True by default. 
Labels shrink or grow to adjust for the Text property. You can set the 
AutoSize prope1ty to False if you want to specify the Label's size. in 
which case you can see the outline of the Label on the form_ 
Note that if you want text to flow to multiple lines in a label. you 
should set its AutoSize property to False and use the sizing handle to 
make the label large enough. 
If you need to select tl1e label after deselecting it. use the Proper-
ties window: Drop down the Objec t Ust at the top of the window: 
you can see a list of all controls on the form and can make a selection 
(FigUI'e 1.27). 
Prope:nies 
• y X 
Buttonl Sptun.Windo,_.,.fc;nns.Button 
Button_2 'Syst:E:rn.Windows.Fcrms.Burton 
for-ml S.ys!en .\M n dOIN~form:;;.form 
log 
l ext 
Tect.Aiign 
Text 
Th(: toct ;:-zoci;:ted -Mthth(: <ontrol. 
c 
Delete the t'<lu~e for the Te%1 
property from the Settings box: 
the label on the form alw 
appears empty and tJ.e control 
mrinks in size beca!Lse the 
AutoSi.re propert.y is set to True. 
F i rt ur e 
1 .2 7 
Drop down the Object box in 
the Properties window to .elect 
any control on the form. 

C
ll
1\
l1
'l'
li
R 
Note: As an alternate technique for deleting a property. you can 
double-click on the propetty name. which automatically selects the 
entry in the Settings box. Then you can press the Delete key or just 
begin typing to change the entry. 
SPI ''"' N:mtP :mrl 'll>xt ~·• ·o)lf'rtiPs fm· thP Fit-!'lt Bntton 
STEr 1: Click on the first button (Butionl ) to seleci it and then look at the Prop-
erties window. The Object box should show the name (Buttonf) and 
class (System. Windows.Forms.Button) of the button. See Figure 1.28. 
Problem? If you should double-click and code appears in the Doc-
ument window. simply click on the Formf.vb [Design] tab at the top of 
the window. 
Propcrttes 
• 
f1 X 
Outtonl 9fstem.Window:s.Forms.9utton • ~ 
Object box 
1 ~10 H IThl .; 
~ Size 
1S. 31 
Tab!ndex 
1 
TabStop 
TIUE 
Tag 
r= 
Te<t 
Buttool 
Enter a ne w Text 
TedAiign 
MiddleCenh r 
property value 
T•xt 
The tort ~ ssoci~ted with the control. 
STEP 2: Change the Name property of the button to "PushButton" (~tithout the 
quotation marks). 
Although the project would work fine without tllis step. we prefer to 
give this button a meaningful name, rather than use Button!. its 
default name. The guidelines for naming controls appear later in this 
chapter in the section "Naming Rules and Conventions for Objects." 
STEP 3 : Change the Text propetty to "Push Me" (without the quotation marks). 
This step changes the words that appear on top of the button. 
Set the Name and Text llroperties for the Second Huuon 
STEP J ; Select Button2 and change its Name property to " ExitBuuon" . 
STEP 2: Change the Text property to "Exit". 
Cbaugc Pt·opertif.'s of the F'onu 
STEP 1: Click anywhere on the form. except on a control. The Properties win-
dow Object box should now show the form as the selected object 
(Formf as the object's name and System. Windows. Forms.Form as its 
class). 
STEP 2: Change the Text property to "Hello World by Your Name" (again. no 
quotation marks and use your oa11 name). 
The Text property of a form determines the text to appear in the 
Iitle bar. Your screen should now look like Figure 1.29. 
27 
l~lj i I #l 
Don't confuse the Name pmperty 
with the Text property. You will use 
the Nome property to refer to the 
control in your Bn•ic code. The Text 
property determines what the user 
will see on the form. Visua l Basic 
sets both of these properties to the 
some value by default, and it is easy 
to confuse them. • 
F i gu 1•e 1 . 23 
Change the properties of the 
first button. 
Always set the Name property of con-
trols before writing code. Aqthough 
the progra m will still work if you re-
verse the order, the method names 
won't ma tch the control names, which 
can cause confusion. • 

28 
\ .' 
S 
U 
A 
I, 
C 
Introduction to Visual Basic 2010 
The form is selected 
and locked 
ri2 HeltoWorld byVourf\Jame 
p...,.h Ma 
E<ll 
The form's Text propetty 
appears in the title bar 
STEI' 3: [n the Properties window. click on the StartPosition property and 
notice the arrow on the property setting, indicating a drop-down list. 
Drop down the list and select CenterScreen. This will make your form 
appear in the center of the screen when the program runs. 
STEP 1: ln the Solution Explorer. right-click on Forml.vb and choose Rename 
from the context menu. Change the filename to ''HelloFonn.vb". making 
sure to retain the .vb extension. Press Enter when finished and 
respond "Yes" to the dialog asking i£ all references to Forml should 
be changed to Hello Form. This changes the name of the file that saves 
to disk as well as the name of the class. (See Figure 1.30.) 
Solutoon Explorer 
• q. X 
~~~rni ~E!!Gi 
~~~World 
-
15!!1 My Project 
~ 
HelloForm.vb 
~ 
~olutaon l:x ... 
. . 
Properties 
yq. x 
Helloform.vb File Properties 
Properties of file 
:§~··~ ! -
Build Action Compile 
Copy to OutF Do not copy 
Custom Tool 
Custom Tool 
llllllal: HelloForm.vb 
File Name 
Name of the file or folder. 
Fi~n•·e 1.29 
Change thefonn's Text 
property to set the text that 
appears in the fomt ~ title har. 
Fit:n•·e J .30 
The Properties window shaws 
tlte file's properties with the 
new name for the file. Yott can 
change the filename in the 
Properties window or the 
Solution Explorer. 
1~11 i I #J 
If you change the form's filename be. 
fore changing the form's doss nome, 
the IDE outomoticolly changes the 
form's doss nome to match the file-
nome. It does not make the change if 
you have changed ihe form's doss 
nome yourself. • 

C 
II 
A 
1• 
'I' 
" 
ll 
Figar e 
1 . 31 
The Properties window for the form. The form's class name now matches the name of the form's file. 
The form is selected and locked 
Name of the fonn's file 
.J1 Hcllo-Wcrtd by Your Ncme 
Li£M. J 
I E<n I 
I =II sl~AJ 
... 
So!ubon E:<plor€.'r 
• q )( 
~ (O;~taS inding 
(Name) 
Hellofom> 
AcceptButtor {none) 
AccessibleDe 
Accesgblel'lla 
(N.ame) 
Jndk.otcs the n~~me used i·n code to 
identify the object. 
STEP 5 : Click on the form in the Document 11~ndow. anywhere except on a con-
trol. The name of the file appears on the tab at the top of the Designer 
window. and the Properties window shows properties for the fom1's 
class. not the file. The VB designer changed the name of the form's 
class to match the name of the file (Figure 1.31). 
Wa·ite Code 
Visual Basic Events 
While your project is ruuning, the user can do many things. such as move the 
mouse around; click on either button; move, resize. or close your form's win-
dow; or jump to another application. Each action by the user causes an event to 
occur in your Visual Basic project. Some events (like clicking on a button) you 
care about, and some events (like moving the mouse and resizing the window) 
you do not care about. If you write Basic code for a particular event. then Vi-
sual Basic will respond to the event and automatically execute your procedure. 
VR ignnrP..< P.IJP.nt.<fnr whir.h nn prnr.P.dnrP..< am writtR.n. 
Visual Casic Ew ut Pr·ocednl'es 
You write code in Visual Basic in pr·ocedm·es. For now. each of your proce-
dures will be a sub p1·ocedm·e, which begins with the words Private Sub 
and ends with End Sub. (Later you will also learn about other types of proce-
dures.) Note that many programmers refer to sub procedures as subprograms or 
subroutines. Subprogram is acceptable: subroutine is not because Basic actu-
ally has a different statement for a subroutine. which is not the same as a sub 
procedure. You also can refer to procedures as methods. 
Name of 
the fonn 
class 
29 

30 
v 
S 
l l 
,\ 
I. 
C 
Introduction to Visual Basic 2010 
Visual Basic automatically names your evem pi"Ocedm·es. The name 
consists of the object name, an underscore (_). and the name of the event. 
For example. the Click event for your button called PushButton will be 
PushButton_Click. For the sample project you are writing, you will have a 
PushButton_Click procedure and an ExitButton_Click procedure. Note that 
another way to refer to these methods is to call them "event-handling methods," 
such as the PushButton_ Click event-handling method. 
Visual Basic Code Statements 
This first project requires two Visual Basic statements: the t•ernark and the 
assignmelll statement. You also will execute a method of an object. 
The Remark Statemeut 
Remark statements, sometimes called comments. are used for project docu-
mentation only. They are not considered "executable" and have no effect when 
the project tuns. The purpose of remarks is to make the project more readable 
and understandable by the people who read it. 
Good programming practices dictate that programmers include remarks to 
clarify their projects. Every procedure should begiu with a remark that de-
scribes its purpose. Every project should have remarks that explain the purpose 
of the program and provide identifying information such as the name of the pro-
grammer and the date the program was written and/or modified. In addition. it 
is a good idea to place remarks within the logic of a project. especially if the 
purpose of any statements might be unclear. 
When you try to read someone else's code. or your own after a period of 
time. you will appreciate the generous use of remarks. 
Visual Basic remarks begin with an apostrophe. Most of the time your re-
marks will be on a separate line that starts with an apostrophe. You can also 
add an apostrophe and a remark to the right end of a line of code. 
The llemal'k Statement-Examples 
~ r--------------------------------------------------------------. 
~ 
' This project was written by Jonathon Edwards. 
~ 
' Exit the project . 
;;-
MessageLabel. Text = "Hello World" ' Assign the message to the Text property. 
00 ~-----------------------------------
The Assignmem St a teme Ill 
The assignment statement assigns a value to a property or variable (you learn 
about variables in Chapter 3). Assignment statements operate from right to left; 
that is. the value appearing on the right side of the equal sign is assigned to the 
property named on the left of the equal sign. It is often helpful to read the equal 
sign as "is replaced by." For example, the following assignment statement 
would read "MessageLabel.Text is replaced by Hello World." 
MessageLabel. Text = "Hello World" 

C
II
,\1°T
t:
R 
::! = :';'1 
• ~ OOje<t.Pcopocty • ''""' 
The value named on the right side of the equal sign is assigned to (or placed 
into) the property named on t11e left. 
Tile A.s.:sigumcut Statcmcnt-Ex:unplc~ 
Titlelabel.Text = 'A Snazzy Program' 
Addresslabel.Text = "1234 South North Street" 
Messagelabel.AutoSize = True 
Numberlnteger = 12 
Notice iliat when the value to assign is some actual text (called a literal). it is 
enclosed in quotation marks. This convention allows you to type any combina-
tion of alpha and nwneric characters. lf the value is numeric. do not enclose it 
in quotation marks. And do not place quotation marks around t11e terms True 
and False. which Visual Basic recognizes as special key tenus. 
}=nclJJtg a l'l'ognun hy E'-l'•·uting a .\lf'tho11 
To execute a method of an object. you write: 
Object .Method() 
Notice that methods always have parentheses. Although this might seem I ike a 
bother. it's helpful to distinguish between properties and metJ10ds: Meiliods al-
ways have parenilieses; properties don't. 
Example, 
HelloButton.Hide() 
Messagelabel.Show() 
To execute a metJ1od of the current object (ilie fonn itself). you use the Me 
keyword for the object. And ilie method tJmt closes the form and terminates the 
project execution is Close. 
Me. Close() 
In most cases. you will include Me. Cl ose (} in the sub procedure for an Exit 
button or an Exit menu choice. 
Note: The keyword Me refers to the current object. You can omit Me since a 
method wiiliout an object reference defaults to the current object. 
31 
I 
If you don't type the parentheses after 
a method, the editor adds it lor you, 
lor most (but not a ll) methods. • 

32 
l ' 
C 
Introduction to Visual Basic 2010 
Code the Event Procedm·es f01· He llo Wod d 
Code the Click Event fol' the l'nsh Me Button 
STEP 1: Double-click the Push Me button. The Visual Studio editor opens '~ith 
the first and last lines of your sub procedure already in place, with the 
insertion point indented inside the sub procedure (Figure 1.32). 
/ 
The class list 
/The methocllist 
HeficForm:vb* X 
• _ 
~" Pu,hButton Y 
-I .f CIKI< 
/ 
ElPubl ic Clc~~ Hellofon• 
~ 
I 
• 
I 
End Sub 
EJ 
Pri\ftte sub PushButton_click(ByVal sender As system.O!>ject, ByVal ~ 
t~nd class 
STEP 2: Type this remark statement: 
' Display the Hello World message. 
Notice that the editor automatically displays remarks in green (un-
less you or someone else has changed the color with an Environment 
option). 
Follow good coding conventions and indent aU lines between 
Private Sub and End Sub. The smart editor attempts to help you fol-
low this convention. Also. always leave a blank line alier the remarks 
at the top of a sub procedme. 
STEP 3: Press Enter twice and then type this assignment statement: 
Messagelabel.Text = "Hello World" 
Note: When you type the names of objects and prope1ties. allow In-
telliSense to help you. When you type the first character of a name. 
such as the "M" of "MessageLabel". lntelliSense pops up a list of pos-
sible object names from your program (Figure 1.33). When several 
items match the first letter. you can type additional characters until 
you get a match. or you can use your keyboard down arrow or the 
mouse to highlight the correct item. To accept the correct item when it 
is highlighted. press the punctuation character that should follow the 
item, such as the period. spacebar. equal sign, Tab key. or Enter key. 
or double-click the item witJ1 your mouse. For example. accept"Mes-
sageLabel" by pressing the period and accept "Text" by pressing the 
spacebar, because those are the chamcters that follow the selected 
items. 
F i g ur e 
1. 32 
The Ediwr window. showing 
the first and last lines of the 
PushButwn_Click event 
procedure. 

C
II
,\P'I'
I\
R 
Public Chs.s J-lclloFora 
Pr i vat e Sub PushButb:m_Clid: (6yV.:.l s ender- ~ Sys tcm.Cbje"ct, 
• Display t he Udlo World mes:::.ogc . 
Mesl 
End 'Is lv1css~Box 
-~d c_~ 
li IJ1essagelabel 
r-
10 ProcessKeyMess;~ge 
Common LAttj 
The assignment statement 
Messagelabel .Text = "Hello World" 
assigns the literal "Hello World" to the Text prope1ty of the control 
called MessageLabel. Compare your screen to Figure 1.34. 
/Ed;tor tab 
Hello-Fornl:\lb"' X 
(t#(General) 
B Poblic Cl~ss Be llofcnll' 
/Form Designer tab 
· I~ (Oed antions) 
I 
El 
Pri vate SI.Jb Pu shBut t<~n_Click(ByV<a l sender As S y:;tem . O~jc:ct ~ ByV~l 
' Display the He Uo \lor ld message. 
I~ 
Mcssogel.:~bel.Text- •Hello Wo~
ld 
End Sub 
"'-.,_ 
' 
End Cl os s 
"""' 
S 
~ - ~ 
Remark statement 
"Assignment statement 
STEl' ·~· : Return to the form's design view (Figure 1.29) by clicking on the 
Hel/oForm. vb [Design] form designer tab on the Document window (re-
fer to Figure 1.34). 
Code the Oick EvenL fo1· the Exit Button 
STEP l : Double-click the Exit button to 
open the editor for the 
ExitButton_Ciick event. 
sn:r 2: Type this remark: 
' Exit the project. 
snJ> 3: Press Enter twice and type this Basic statement: 
Me. Close() 
Note: You can omit the parentheses; the sma11 editor "ill add them 
for you. 
STEP 4.: Make sure your code looks I ike the code shown in Figure 1.35. 
Fi~Rr e 1 .3 3 
lntelli.Sense pops up to help 
you. Select the correct item 
fron~ the list and press the 
period, spacebar, Tab key. or 
Enter key to accept the text. 
Ijpe the remark and 
assignment statement for 
the PushButton_ Click event 
procedure. 
33 
Allow the Editor and lntelliSense to 
help you. If the lntelliSense list does 
not pop up, you probably misspelled 
the nome of the control. And don't 
worry about capita lization when 
you type the nome of on object; if 
the nome matches a defined object, 
the Editor fixes the copitolizotion. • 
Accept on entry from the lntelli. 
Sense popup list by typing the punc· 
tuation tha t follows the entry or by 
pressing the Enter key. You con a lso 
scroll the list a nd select with your 
mouse. • 

34 
v 
S 
l l 
:\ 
L 
G 
,\ 
S 
(' 
Introduction to Visual Basic 2010 
_/Asterisk indicates unsaved changes 
f';j(General) 
-ID (Oedac•tions) 
HPUblic class Hellofom 
l±. 
Jl 
Privat e Sub Pushl3uttcn_C1icl<(8yVat sender As System, O!>jeCT , ByVal 
' Display the Hello World 111eo;sagf! . 
Ne~sage tabe l. Text = •wello World" 
End Sub 
El 
Private: Sub ExitButton_Click(ByV~:~l sender As System . Object ~ ByV.;,l 
' Exit t he project. 
Me .close() 
frld Sub 
End class 
Run the Project 
After you have finished writing the code. you are ready to run (execute) the 
project. Use one of these three techniques: 
1. Open the Debug menu and choose Start Debugging. 
2. Press the Start Debugging button on the toolbar. 
3. Press FS. the shortcut key for the Start Debugging command. 
Start tb<' ProJect Hunniug 
STEP 1: Choose one of the three methods previously listed to start your project 
running (Figure 1.36). 
Problems? See ".Finding and Fixing Errors" later in this chapter. 
You must correct any errors and restart the program. 
If all went well. the Visual Studio title bar now indicates that you are rmming. 
w9 Hello World by Your Name 
l:o.
l l2l.~l 
1'1 
II 
1.1 
Fig u r e 1.35 
Type the rode for the 
ExitButton_Click event 
procedure. Notice that an 
asterisk appears on the tab at 
the top of the window. 
indicating that there are 
unsaved changes in the file. 
Fif.(u••e l.:l6 
The form of the mnning 
application. 

C
II
,\I>'I'
I'
R 
Click the l~ush Me Buuou 
STEP 1: Click the Push Me button. Your "Hello World" message appears in the 
label (Figure 1.37). 
Click tbe Exit Buuon 
STEP 1 : Click the Exit button. Your project te1minates. and you retum to desip;n 
time. 
Oil Hello World by Your Na111e 
Save Yom· Wm·k 
Hdlo Wodd 
~ 
I Em I 
35 
l~ljji#J 
If your form disoppeors during run 
time, click its button on the Windows 
task bar. • 
li' i l! ••••e 1.37 
Click the Push Me button and 
"Hello World" appears in the 
label. 
Of course, you must always save your work often. Except for a very small pro-
ject like this one, you wilJ usualJy save your work as you go along. Unless you 
L:~~~li .. i .. I .. :J.~_ ____ _ 
(or someone else) has changed the setting in the IDE's Options dialog box. your 
Click the Save All toolbor button to 
files are automatically saved each time you build (compile) or execute (run) 
quickly sove all 0f your work. • 
your project after your initial save. You also can save the files as you work. 
Save the Files 
STEt> 1: Open the Visual Studio File menu and choose Save All. Tlus option saves 
the current form. project. and solution files. You already selected the 
name for the project when you first created the project. but you can 
change it here if you ~tish. Make sure to set the location to the folder in 
which you want to store the project. Press the Browse button to select a 
location other d1an the one specified. 
Leave the check box for Create directory tor solution checked. This 
causes the IDE to create a new folder for the solution files. You will 
have a folder within a folder: the outer folder holds only the solution 
files. which makes it easy to reopen your projects. Click Save. 
Close the Project 
STEJ> 1: Open d1e File menu and choose Close Project. If you haven't saved 
since your last change, you wilJ be prompted to save. 

36 
l ' 
(' 
Introduction to Visual Basic 2010 
Op<•n lbf' Pro.iecl 
Now is the time to test your save operation by opening the project from disk. 
You can choose one of three ways to open a saved project: 
• 
Select Open Project from the Visual Studio File menu and browse to find 
your .sin file. 
• 
Choose the project from the Files I Recent Projects and Solutions menu item. 
• 
Choose the project from the Start Page. 
Or•cn the P1·ojcct File 
STEP 1: Open your project by choosing one of the previously listed methods. 
Remember that the file to open is the solution (.sin) file. 
If you do not see your fonn on the screen, check the Solution Ex-
rlorP.r winrlow-
it f>houlrl ;;ay Ht:!lloWortd for tllf~ rrojP.~t. SP.IP.r.t thP. 
icon for your form: HelloForm.vb. You can double-click the icon or 
single-click and click on the View Designer button at the top of the 
Solution Explorer (Figure 1.38): your form will appear in the Designer 
window. Notice that you also can click on the View Code button to dis-
play your form's code in the Editor window. 
View Code button 
~ 
Sclution £'.it •• 
Modify Llw Pr·ojecl 
Now it's time to make some changes to the project. We'll change the size of 
the "Hello World" message. display the message in two different languages, 
add a Print button. and display the programmer name (that's you) on the 
form. 
Change the Size and Alignment of the Message 
STEP l : Right-click on the fonn to display the context menu. If your controls 
are ctmently locked, select Lock Controls to unlock the controls so that 
you can make changes. 
To display the fomt layout, 
select the fonn name and click 
on the View Designer button, 
or double-click on the fornt 
11ame. Click on the View Code 
button to display the code in 
the editor. 

C::
II
A
I•
'rt;K 
l>TEl' 2: Drop down the Object list at the top of tl1e Properties window and 
select MessageLabel. which will make the tiny label appear 
selected. 
STEP 3: Scroll to the Font propel1y in the Properties window. The Font prop-
erty is actually a Font object that has a number of properties. To see 
the Font properties. click on the small triangle on the lefi (Fig-
ure 1.39); the Font properties will appear showing the current values 
(Figure 1.40). 
Prcpenies 
• 
~ X 
Me:ssagelabel S.yct~m .Windo-Nt.l 9 
~ ~ .!1 
FlatStyle 
Standard 
~ 
Click to expand the F'ontlist -
~ , @ 
Mtcrosoft s(;J 
~ori!Cdor 
• 
Conhailfl1_ 
F'nnt propertie• 
Generatdlrn True 
Imcge 
D (non<) 
Imogi:A.Iig., 
11/iddlc:Ccnlc:t 
Imaqelndeo; ntnon<) -
font 
~ fol'lt meet to dt"~llY tPirt 1n tM 
<Omrol, 
Properties 
Me<"'!)et•~ 
system. \'liNlo..-s.Form; • 
:. i l iii ·' 
Foot 
Urit 
Pomt 
Bo:.d 
False 
G<iCh..Stt 
GdiiVuttuJf-, F.1lse 
Ita!ic 
false 
& rik.ro.rt 
False 
Ul"'deff.-.e 
False 
The font used to display ted i"' ti-le 
conb"ol. 
Settings box 
Propertie• button 
You can change any of the Font properties in the Properties win-
do~-. such as setting the Font's Size. Bold. or Italic properties. You also 
can display the Font dialog box and make changes there. 
Figure 1.39 
Click on the F onl 's triangle to 
uiew the proper~ of the Font 
object. 
37 
You ca.n change the illdivMJual 
properties of the Fo11t objed, 

38 
v 
S 
l l 
,\ 
L 
(' 
Introduction to Visual Basic 2010 
STEP ,L: lf the Properties button (with the ellipsis on top) does not appear. click 
on the Font prope1ty. Then click the Prope1ties button to display the 
Font dialog box (Figure 1.41 ). Select 12 point if it is available. (If it 
isn't available. choose another number larger than the current setting.) 
Click OK to close the Font dialog box. 
Font 
'='
Fo:"nt'-
: --:-::--:--:--- '::
Fo:..:
rt..:;otyl:c.•:.:.: -----., 9 » : 
Mcro,cft S:!M Serif 
Regulo3r 
)Jodenl\o. ~ 
MO!Wt:):!"'C""""" 
MSOutiook 
Efted• 
F smkeou 
l:l Undonno 
A 
@'M!If:l 
Oblique 
"l Bold 
Bold Obliqut 
Sample 
1\oBbYyZz 
STEP 5: Select MessageLabel's TextAlign property. The Prope1ties button that 
appears with the down-pointing arrow indicates a drop-down list of 
choices. Drop down the list (Figure 1.42) and choose the center box; 
the alignment property changes to MiddleCenter. 
Properties 
• q X 
Messagel.abel Sy;tem.\'lindows.FOI'm> • 
t= Siu 
To:~blndo:: 
Tag 
l ex! 
TertAlign 
o. 20 
Oetern1ines the position of the tEXt within 
the label. 
Add a New Label for Your Name 
Prope1ties button 
Select MiddleCenter 
alignment 
STEP 1: Click on the Label tool in the toolbox and create a new label along the 
bottom edge of your form (Figure 1.43). (You can resize the form if 
necessary. but you must unlock the controls first.) 
Fig n•• e 
1 . 41 
Choose 12 point in the Font 
dialog box. 
When you cha nge o property from 
its default value, the property nome 
a ppears balded; you can scan 
down the property list and easily 
identify the properties that ore 
changed from their default value. • 
F i ,: n1• e 
J .4 2: 
Select the center box for the 
TextAlign property. 
You can change the Font property 
of the form, which sets the defa ult 
font for a ll objects on the form. • 

C
II
A
I•'I'
I'R 
a"} Hdlo World by Yout Ntme 
Pu;:h Me 
Enter your name 
;,t a lahel 
STEP 2: Change the label's Text property to "by Your Name". (Use your name 
and omit the quotation marks.) 
Note: You do not need to change the name of this label because it 
will never be refeJTed to iJ1 the code. 
Cbange the Location and Tex t of tbe Push Me Buuou 
Because we plan to display the message in one of two languages. we'll change 
the text on the Push Me button to "English'' and move the button to allow for a 
second button. 
STEP 1: Select the Push Me button and change its Text property to English. 
STEP 2: Move the English button to the left to make room for a Spanish button 
(see Figure 1.44). 
Note: If you catulot move the button. check your Lock Controls set-
ting in the context menu. 
" t-telloWorld byYour N•m• 
Engl<h 
byYo.u N~ 
39 
Add a new label for your name 
at the bottom of the fonn. 
Fig11r e 
1 . 44 
Move the English button to the 
left and add a Spanish button. 

40 
\ 
S 
l 
\ 
L 
If 
\ 
s 
( ' 
lntroductio11 to l'i.<ual Bmic 2010 
\dd n SJJaui><h Huuon 
STEP 1: Add a new button. Move and resize the buttons as necessary, referring 
to Figure 1.44. 
STEI' 2 : Change the Name property of the new button to Spani.shButton. 
STEI' 3: Change the Text property of the new button to Spanish. 
Add au E,·e m Pl"Ocedm·e fo1· 1he S p:mi"b Huuon 
STEI' I• Double-click on the Spanish button to open the editor for 
Spanish Button_ Click. 
STEI' 2 : Add a remark: 
' Display t he Hello World message in Spanish. 
STEI' :1: Press Enter twice and type the following Basic code line: 
Messagelabel .Text = "Hola Mundo' 
STEI' 4-: Return lo design view. 
\ tid u Prim Huuou 
STEI' 1: Add another button and name it Print Button. 
STEI' 2 : Change the button's Text property to "Print''. 
STEI' 3: Move and resize the buttons as necessary. 
\cltl u P•·iULFut'lll f'oiiiJHIIII'III 
Visual Basic 2010 includes a Print Form component. You ~t-ill add the Print-
Form component to your form. but it is not a vi.~ ible element. such as the con-
trols you have already added. 
You can choose to send the printer output to the printer or to the Print Pre-
view windo~t·. which saves paper while you are testing your prognun. 
STEI' 1: Scroll d01m to the bottom of the toolbox and find the header for Visual 
Basic PowsrPacks. 
STEI' 2: Click on the triangle to open the section of the toolbox. You should see 
the PrintForrn component listed (Figure 1.45). 
11TEI' 3: Double-click on the Print Form componenl. Or you can drag and 
drop the component on the form. In either case, the component ap-
pears in a new pane that opens at the bottom of the Fonn Designer 
(Figure 1.46). This pane. called the compoucut u·ay. holds com-
ponents that do not have a visual representation at run time. You •~ill 
see more controls that use the component tray later in this text. 
4 Vsual Basic Pow-eo-Pack;; 
at 
Pointer 
~ PrintForm 
"-
UneShape 
An eosy W<:T'f lo creole mukiple sim-
ilar controls is lo copy on exisling 
control and posle il on lhe form. You 
con posle muhiple limes lo creole 
multiple conlrols. • 
Filo(ure 1. 45 
Open the V..,ual Basic 
Puwer Packs sed ion of the 
toolhox and oouble-click on 
the PrintForm component. 

C 
II 
A 
1• 
'I' 
II 
ll 
Start Page 
~lloForm vb" 
HelloForrn.vb [Design!~ X 
o1; Hello lllorld by Your Name 
~[~]I,.Q.j 
~ 
I 
&a I 
by Your Name 
PrintForm component 
Add an Event Procedure fo1· Lhe Print Button 
STEP 1: Double-click the Print button to open the editor. 
STEP 2: Add the remark and press Enter h~ice. 
' Print the form on the printer. 
Component tray 
STEP 3: Allow lntelliSense to help you set the PrintAction property of the Print-
Form component: Type "Print£" and the PrintF01ml item is selected in 
the lntelliSense list. Then press the period to accept the name. and the 
list of possible properties and methods for that object pops up. Select 
PrintAclion by using the keyboard down aJTOW, by typing enough let-
ters to automatically select the property. or by clicking with the mouse. 
Then accept PrintAction by pressing the spacebar or the equal 
sign. lf you pressed the spacebar, type an equal sign, and the list of 
possible choices will pop up. Choose Printing. PrintAction . Print-
ToPreview and press the spacebar or the Enter key to accept it. Your 
line of code should look like this: 
41 
Fi J( ur e 1. 4 6 
The new PrintFol7n component 
goeJ in the component tray at 
the bottom of the F omt 
Designer window. 
PrintForm1 .PrintAction = Printing. PrintAction . PrintToPreview 
STEP ,~ , Add the last line of code. which starts the print operation. The Print 
method sends the output to the device specified in the PrintAction 
property. which defaults to the printer. 
PrintForm1 .Print() 
STEP 5: Retum to design view. 

42 
v 
C 
Introduction to Visual Basic 2010 
Loek the Couu·ols 
STEP 1: When you are satisfied with the placement of the controls on the fonn. 
display the context menu and select Lock Controls again. 
Save <md l::.un the Project 
STEP 1: Save your project again. You can use the File/ Save All menu command 
or the Save All toolbar button. 
STEP 2: Run your project again. Try clicking on the English button and the 
Spanish button. 
Problems? See "Finding and Fixing Errors" later in this chapter. 
STEP 3 : Click on the Print button to test the Print Preview function. 
STEP tJ.: Click the Exit button to end program execution. 
Add Remm•ks 
Good documentation guidelines require some more remarks in the project. Al-
ways begiJ1 each procedure with remarks that tell the purpose of the procedure. 
In addition. each project file needs identifying remarks at the top. 
The Declarations secJ.iou at the top of the file is a good location for these 
remarks. 
STEP 1: Display the code in the editor and click in front of the first line 
(Public Class HelloForm) . Make sure that you have an insertion 
point: if the entire first line is selected. press the left arrow to set the 
insertion point. 
STEI' 2 : Press Enter to create a blank line. 
Warning: lf you accidentally deleted the first line. click Undo (or 
press Ctrl + Z) and try again. 
Sl'EP 3: Move the insertion point up to the blank line and type the following 
remarks. one per line (Figure 1.47): 
• Project : 
Programmer: 
• Date: 
Description: 
Hello World 
Your Name (Use your own name here.) 
(Fill in today ' s date . ) 
This project will display a "Hello World" 
message in two different languages 
and print the form . 
Enter remarks at the tcp of the fonn file. 
Press Ctrl + l·lome to quickly move 
the insertion poiont to the top of the 
f;l ... . 
Fig ua·e 1. 47 
HelloForm.vb [Des• n]• 
• 
Prograntner: 
vour Name (Use your own name here.) 
Date: 
(Fill in today ' s date .) 
Description: -his project will display a "Hello World" 
nessage in two different languages 
and print the form. 
Public Class Helloforn 
Private Sub PushButton_Click(ByVal sender As System.Object, 
' Display the Hello World message. 
~lessagelabel , Text = "Hello 1-lorld" 
End Sub 

C 
II 
A 
1• 
'I' 
" 
ll 
Explot·e tbe Editot· Window 
STEP 1: Notice the two drop-down list boxes at the top of the Editor window. 
called the Class Name list and the Method Name list. You can use 
these lists to move to any procedure in your code. 
STEP 2: Click on the left down-pointing arrow to view the Class Name list. No-
tice that every object in your fonn is listed there (Figure 1.48). Near 
the top of the list, you see the name of your form: Hel/oForm. 
f (HelloForm Events) 
o~ ExitButton 
.,<~ Labell 
ov MessageLabel 
o'-~ PrintButton 
/J PrintForml 
o"' PushButton 
message. 
j 
World" 
STEI' 3: Select Spanish Button from the Class Name list. The inse11ion point 
jwnps to the first line within the SpanishButton_Click event procedure. 
STEP 4·: Drop down the Method Name list (the right list); it shows all possible 
events for a Button control. Notice that the Click event is bold and the 
rest are not. Any event for which you have written an event procedure 
appears in bold. 
To write code for more than one event for an object. you can use the Method 
Name drop-down list. When you select a new event from the Method Name list. 
the editor generales the Private Sub and End Sub lines for that procedure 
and moves the insertion point to the new procedure. 
Finish Up 
STEP 1: Save the project again. 
Pl'inl the Code 
Select tbe Printing Options 
STEP 1: Make sure that the Edjtor window is open. showing your form's code. 
TI1e IDE's File I Print command is disabled unless the code is display-
ing and its window selected. 
Note: lf the File I Print command is disabled. click an inset1ion point 
in the Editor window. 
STEP 2: Open the File menu and choose Print. Click OK. 
Fi g nr e 
1 .4 8 
View the list of objects in this 
form by dropping d-own the 
Class Name list. Select an 
object front the list to display 
the sub proced-ures for that 
object. 
43 

44 
' 
!-
l 
\ 
L 
II 
\ 
S 
l ' 
Introduction lo 17Jua/ Bruic 2010 
A Sample Printout 
TI1is output is produced when you print the fonn's code. Notice the It symbol 
used to continue long lines on the printout. On the screen. those long lines are 
not split. but scroll off tJ1e right side of the screen. 
C:\Users\ . . 
\HelloWorld\ Hell oForm.vb 
'Proj ect: 
' Programmer: 
'Date: 
• Description: 
Public Class HelloForm 
Hello World 
Your Name 
Today•s Date 
This project will display a 'Hello World' 
message in two different languages and print the form. 
Private Sub PushButton_Click(ByVal sender As Systen.Object, ByVal e As System. It 
EventArgs) Handles PushButton.Click 
• Display the Hello World Message . 
uessageLabel.Text • 'Hello World' 
End Sub 
Private Sub ExitButton_Click(ByVal sender As Systen.Object, ByVal e As System. " 
EventArgs) Handles ExitButton.Click 
• Exit the project. 
Me .Close() 
End Sub 
Private Sub SpanishButton_Click(ByVal sender As system.Object, ByVal e AS system. IC 
EventArgs) Handles SpanishButton.Cl ick 
• Display the Hello World message in Spanish. 
UessageLabel.Text = 'Hola Mundo ' 
End Sub 
Private Sub PrintButton_Click(Byval sender As systen.Object, ByVal e As 
System.EventArgs) Handles PrintButton.Click 
• Print the form. 
PrintForm1.Print Action 
Printing. PrintAct ion.Print ToPreview 
PrintForm1.Print() 
End Sub 
End Class 
Finding and Fixing Errors 
I 
You already may haYe seen some errors as you entered the first sample project. 
Programming errors come in three varieties: synta.x erro1·s, nm-time errors. 
and logic C ITOI'S. 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
Syntax E1Tot·s 
When you break VB's rules for punctuation, format. or spelling. you generate a 
syntax error. Fortunately. the smart editor finds most syntax errors and even 
corrects many of them for you. TI1e syntax errors that the editor cannot identify 
are found and reported by the compiler as it attempts to conve1t the code into 
intermediate machine language. A compiler-reported syntax error may be re-
ferred to as a compile error. 
The editor can correct some syntax errors by making assumptions and not 
even report the error to you. For example. a string of characters must have 
opening and closing quotes. such as "Hello World". But if you type the open-
ing quote and forget the closing quote. the editor automatically adds the clos-
ing quote when you move to the next line. And if you forget the opening and 
closing parentheses after a method name. such as Close(). again the editor 
will add them for you when you move off the line. Of course. sometimes the 
editor will make a wrong assumption. but you will be watching, right? 
The editor identifies syntax enors as you move off the offending line. A blue 
squiggly line appears under the part of the line that the editor cannot interpret. 
You can view the error message by pausing the mouse pointer over the enor, which 
t:x>ps up a box that describes the enur (Figure 1.49). You also can display an Ermr 
List window (View I Error List). which appears at the oottom of the Editor window 
and shows all error messages along with the line number of the statement that 
caused the error. You can display line numbers on the sow-ce code (Figme 1.50) 
with Tools I Options. lf Show All Settings is selected in the Options dialog box. 
choose Text Editor I Basic and check Line Numbers; if Show All Settings is not 
checked. then choose Text Editor I Basic I Editor and check Line Numbers. 
The quickest way to jump to an error line is to point to a message in the 
EtTor List window and double-click. The line in enor is selected in the Editor 
window and a list of suggested conections pops up. 
At tin1es the editor can recognize enors and offer suggested solutions. This is 
more likely to occur in later chapters as you begin to use new keywords. ln Chap-
ter 3 you leam to declare elements that can use a data type called Decimal. If you 
accidentally mistype the word Decimal. a small red line appears at the end of the 
word. Point to the line and an AutoCot·rect box appears. offering to change the 
word to the correct spelling. Figure 1.51 shows AutoCorrect in action. 
If a syntax enor is found by the compiler, you will see the dialog box shown 
i.n Figure 1.52. Click No and retum to the editor. correct your enors. and run 
the program again. 
EJPublic Class ~llofom 
I 
EJ 
Private Sub PushButton_Click(ByVal sender As System.Object, ByVal e As 
' 
Oio;,pl~y 'thP HPlln Wnrl rl mP c:.c:.~eP . 
EJ 
Pr i vate Sub ExitButton Click(ByVal sender As System.Obiect, ByVal e As 
I 
' Exit the project. 
45 
l~ljii:J 
The Visual Basic AutoCarrect fea-
ture can suggest corrections for 
common syntax error). • 
F i J,! ur e 1.49 
The editor identifies a syntax 
error with a squiggly blue line. 
and you can point to an error 
to pop tp the error message. 

46 
\ l 
S 
U 
A 
I, 
C 
lntrod~tction to Vis ~tal Basic 2010 
You can display the Error List window and line numbers in the source code to help locate the error lines. 
I fellor om1.vb* X llellor orm.vb [Ces1 n]* 
• 
~ Helloform 
1 13 ' Project : 
2 l• Progr ammer: 
Date: 
· m 
(Declarations) 
Hello World 
Your Name (Use your own name her e. ) 
(Fill in today' s date,) 
4 
Description: 
5 
This project will display a "Hello World" 
message in two differ ent l anguages 
6 
and print the form. 
7 
8 B Public Class Hellofona 
9 I 
1a 8 
Pr ivate Sub PushButton_Click(ByVal sender As System.Object, ByVal t 
l1 1 ' 
Display the Hello World message. 
12 
l3 
Mesagel abel. Text = "Hello World" 
14 
End sub( 
"' 
15 
16 
Pr1vate Sub ExltButton_Cllck(ByVal sender As System.Object, ByVal e 
17 I 
Exit the proiect. 
1oo% • •I 
"' 
Errorlist 
• 
11 X 
0 1 Error 
.1:, 0 Warnings I (j) 0 Messages 
Description 
File 
0 1 
'Mesagelabel' is not declared 
HelloForm.vb 
It may be inaccessi ble due to 
its protection level. 
Line 
13 
Column 
9 
Project 
HelloWorld 
Double-d ick anyll·here on this line to jump to the error 
Oim AmountDecimal As Dec"'a 
0~ 
Type 'Decmal' is not defined.. 
,.... 
.......... 
.. ........ ,_,_,,,, __ ,,. 
[(;han2e:o~111aEto :P.e.~irnal::! 
Gen~rate 'Class DKmal' 
Gen;t;rate new type-. 
Microsoft Visuol Studio 
CD 
There were build E((Ors. Would you like to (Ontinue and run the last 
succeScsrul bl.lild? 
L-_.'f•'"''-.JI LI __ 
N_o _ 
_, 
Fl Do not show this dialcg again 
---
-
Fif.(n•• e 
1 . 51 
Point to the small red line and 
the AutoCotrect feature pops 
up a message and a box with 
a down arrow. Display the 
mggestions by clicking the 
down arrow. 
Figur e 
1 . 5 2: 
When the compiler identifies 
syntax errors, it cannot 
continue. Click No to return to 
the editor and correct the error. 

C
II
,\I>
'I'
I'
R 
Run-Time E1To rs 
If your project halts during execution. it is called a nm-time error or an excep-
tum. Visual Basic displays a dialog box and highlights the statement causing 
the problem. 
Statements that cannot execute coJ'l'ectly cause tun-time en·ors. T he state-
ments are correctly formed Basic statements that pass the syntax checking; 
however, the statements fail to execute due to some serious issue. You can 
cause mn-time errors by attempting to do impossible arithmetic operations. 
such as calculate with nonnumeric data. divide by zero, or find the square root 
of a negative number. 
In Chapter 3 you will learn to catch exceptions so that the program does not 
come to a halt when an enor occurs. 
Logic Eno1·s 
When your program contains logic enors. your project runs but produces in-
con·ect results. Perhaps the results of a calculation are incorrect or the wrong 
text appears or the text is okay but appears in the wrong location. 
Beginning programmers often overlook their logic errors. If the project 
runs. it must be right- right? All too often. that statement is not correct. You 
may need to use a calculator to check the output. Check all aspects of the proj-
ect output: computations, text. and spacing. 
For example. the Hello World project in this chapter has event procedures 
for displaying "Hello World" in English and in Spanish. If the contents of the 
two procedures were switched, the program would work but the results would 
be incorrect. 
The following code does not give the proper instmctions to display the 
message in Spanish: 
Private Sub SpanishButton_ClicK 
' Display the Hello World Message in Spanish. 
Messagelabel.Text 
End Sub 
Pro,jeet De bugging 
"Hello World" 
If you talk to any computer programmer. you .. -ill learn that programs don't have 
errors. but that programs get "bugs" in them. Finding and fiXing these bugs is 
called clebugging. 
For syntax errors and run-tin1e errors. your job is easier. Visual Basic dis-
plays the Editor window with t11e offending line highlighted. However, you must 
identify and locate logic errors yourself. 
VB has a very popular feature: edit-and-continue. If you are able to iden-
tify the run-time enor and fix it. you can continue project execution from that 
location by clicking on the Continue button. pressing FS. or choosing Debug I 
Continue. You also can correct the error and restart from the begim1ing. 
The Visual Studio IDE has some very helpful tools to aid in debugging your 
projects. The debugging tools are covered in Chapter 4. 
47 

48 
~· 
s 
l l 
\ 
•• 
IC 
t\ s 
C 
lnrra<!rtctil>n to Vi.mfll Ba.,ir; 2010 
A Cl~:tn C.ompilt• 
When you start executing your program, the first step is called compiling, 
which means that the VB stalements are converted to Microsoft Intermediate 
Language (MSIL). Your goal is to have no errors dm·ing the compile process: a 
clcun compile. Figure 1.53 shows the Error List 1~indow for a clean compile: 
0 Errors; 0 Warnings; 0 Messages. 
fiUf l1~t 
-
~ 
0 0 Errors 
.,.b 0 Warnin~ 5 
Q) 0 M ess-ag es 
Dcscript~on 
Fite 
wnc 
Column 
Projed 
Nmuing Rul.-s and C•mvNllious fo1· O bj._·t~ ls 
Using good cm1sistent names for objects can make a project easier to read and 
understand. as well as ea~ier to debug. You must follow the Visual Basic rules 
for naming objects. procedures. and variables. In addition. conscientious pro-
gr>~mmAI"!< 11l~o follow r.Art>~in naming r.onvf>ntiom~. 
Most professional programming shops have a set of standards U1at their 
programmers must use. Those standards may differ from the ones you find in 
this book. but the most important point is this: Good programmers follow stan-
dards. You slwuld have a set of standards and always folLow them. 
The Naming- Rul~s 
\Vhen you select a name for an object, Visual Basic requires the name to begin 
with a letter or an underscore. The name can contain letters. digits. and under-
scores. An object name cannot include a space or punctuation mark and can-
not be a reserved word. such as Button or Close. but can contain one. For 
example, Exit Button and CloseBuuon are legal. 
The NmHing Couveutious 
This text follo1vs standard naming_ conventions. which. help make projects more 
understandable. When naming controls. use Pascal casing, which means that 
you begin the name with an uppercase character and capitalize each additional 
word in the name. Make up a meaningful name and append the full name of the 
control's class. Do not use an abbreviation unless it is a commonly used term 
that everyone will understand. All names must be meaningful and indicate the 
pmpose of the object. 
Examples 
Messagel.abel 
ExitButton 
DataEntryForm 
D iscountRateLabel 
If you get the message •There were 
build errors. Continue?" always say 
No. If you soy Yes, the last cleanly 
compiled version runs, rather than 
the current version. • 
F I J( 11 •• e 
I • 5 3 
Zero error!. warnings. and 
messages meal!.! that. you have 
a. clean compile. 

(; 
II 
,\ 
I' 
'I' 
1•: 
ll 
Do not krep thc defauh names 11ssigned by Visual Basic. such as lluttonl 
ond Lubel3. Also. do not name your objects with numbers. The exception to 
this rule is for labels or other controLs that never ch811£e during project execu-
tion. Labels usually hold items such as titles. instructions. and labels for other 
controls. Leaving the;,e labels with their defauh names is perfectly acceptable 
and is practiced in this text. 
Refer to Table 1.2 for sample object names. 
Recomllll' lld<'tl N:uulug Com·cutions for· VisLtal Basic Objects 
Ohjt•rt Ct .... 
Form 
OatoEut ryFon11 
Buthln 
Exit Button 
T•~tBox 
Puymf'n• A mounlTextBox 
Radio button 
BoldHnclioBullon 
CheekBnx 
l'l'intSitlumuryCiwck !lox 
llorizontal ocroll L.or 
l~ateHorizontaiScroi!Bar 
Verlieall!<'rull bar 
Temperature Vert icalSeroliBor 
Pictur~Oox 
Lond.capePictureBox 
Combo Box 
BookName,.ComboBox 
Liolllo< 
Soundl'ln~rr 
I nt rol'ugcSoundPiayer 
Visual Studio Help 
i 
Vi~tllll Situ lin 2010 hn11 11 r.omplPtoly nP.w HP.lp sysiAm. r.llllP.r! thP. HP.Ip ViAwPr. 
Rather than display Help topics in the Visual Studio IDE. the Help Viewer dis-
plays its content in a separate browser window, using the default browser on the 
local compute r. You can display Help in any browser, such as Firefox. Chrome. 
or Internet Explorer. 
One advantage of the new Help system is that Microsoft can keep it up-to-date. 
Scuiul! Up lldp fm· Yow· Computer· 
You can set up Help to store and display topics offline (local) or use 
Microsoft's online resources. called Mic rosoft Developers Network library 
(MSDN). Of course. to display online content. you must have an active 
interne t connection. 
49 
Table-
• 2 

so 
\ 
s 
l l 
' 
t 
It 
\ 
S 
(' 
lntroductiM to V'uual Ba.ic 2010 
At the time you install Visual Studio. you make the choice for online or local 
content. But it is easy to change your selection later using the Help Library 
Manager. Select Help/ Manage H91p Settings to display the Help Library Manager 
(Figure l.54a). Click the first link for Choose online or local help to make these-
lection (Figure 1.54b). If you choose local, you can specify where you ,.·ant to 
store the Help files: you also can check online for updates to your local content. 
Figure 1.54 
a. Select Help I Manage Help Settings to open the Help library Manager: b. Make your selection for online or local help. 
For local help. yo11 can specify th4! locaJion to store the files. 
(a) 
Help Library Manager 
A
'~~,.,..,..,.~ 
I t 
DI«Ji:f,,.~n.Qf1loflf' 
.... Pi•tiUII, ...... LI'b• 
J't(t ftHro • 
Ol"tt-• 
X ~~~~ 
Vie\\·in~ H('lp Topics 
-"'~'-
Selling< 
lb'al)'k).C.tf!lo!lol'lo 
--C:I~<ov· ... -;o .. ~,. 
(b) 
The quickest and easiest way to view a Help topic that relates to Visual Basic is 
to use Fl. or comext-sensith·e Relp. Select a VB object. such as a button or 
label. or place an insertion point in a word in the editor. and press Fl. A browser 
window ,.;u open ,.ith the corresponding Help topic displayed, if possible. 
The Help Viewer window (Figure 1.55) di~plays a table of contents (TOC) 
that sho,.·s the ctment topic indented below its parent. and a furtJ1er indented 
list of its subtopics. so you can see the hierarchy of topics. You can click any of 
the links in the TOC to ee other topics. Figure 1.56 shows the next level of top-
;"" nnnP.r th" T .ahP.I \.lass pagP.. 
Use the Search box above the TOC to search for a specific topic. You can 
search for multiword terms and use AND. OR. and NOT in your search tenus. 
If you want to see Help topics about the Visual Studio fOE. select an ele-
ment. such as the Properties Hilldow. and press Shift-Fl. 

C
II
A I•TI\
R 
The Help Viewer displays in the default browser. Select topics .fron~ the TOC on the leji side of the window. or type a term 
into the Search box above the TOC. You also can click on links in the large Content pane on the right . 
• ·~ X It> 8ing 
1!' label Members (Systern.Windows.Forms) 
--------------------------------------------------
----- -------------
~~ny~ 
-- -----
MSON libretr( 
.NET DEVElopment 
• NET Framework.& Fie lease Candidate (RC) 
.NET Frame\•.:ork Class Librort 
systam.W!I'ldo't\>s.Forms. Namespace 
Label Class 
lobd Members 
Labe-l cons.truaor 
label Methods 
label Proo(rtl ~ 
l~b e! EVE!fl[S 
Related Linl<. 
Acces.stbiltty N.amQSpace 
Mcr<.'lsoft.A::.PN!l.Snapifl Narn-espare 
Microsoft.Buad.BuildEng!n<: Namespace 
M!c.rosoft.Bu~d .co ns1ruaion Namespace 
Mlnos.oft Suitd.Conversion N.,mespace 
Mcrosoft.Suid.Debtv,jgmg Nan1espace 
M·crosoft s~..~-M.evaluation Namespace 
McrosoftBuid.Excephons Namespace 
MtcrosottBu11d.Execut!on Nam(!spxa 
Microsoft Build.Ffarnel\onrlc Nangspace 
Mcrosoft.auad.Frarnework.XamiTypes Namest= 
Mtcrcsott.Sulid.loggtng Nam(!space 
M oosortaui!d.Tasks Nam9space 
Mcrosolt.Build.Tasks.Deployment.Bootstrappe 
M!cros:on:.BuKdJasks.D~IO'JmentM.ln!f2stU:ih 
M<rosoiL.Bu~d.Tasks.Hosting Namesp~ce 
M·cros:-oft.Buitd.Tasks.Vflndows Name!ipoce 
Mcro-s:oftsutd.Taslc's.X.aml Namespc.ce 
• 
Label Members 
_..,. ... -;msdn 
This: page !S speofic to .NET ~---ame\VOIX Verslcn: 1.1 2.0 3.0 3.5 4 
RE-pr~s~ nts a standard Windows: label . 
The Lilbel type exposes the following membt>r>. 
Constructors 
Description 
initializes a new Instance of the label class. 
Top 
M@thods 
Name 
AcctssiiY.I!tyNotifyCI:en\s 
("-a:ess1bleEvents int32) 
Accessib'l,tyl'<o\cyCrents 
(A{'CQSS!bl.eEVQnts:. !.r1t32, ln132) 
Seglolnvoke{De'•g•t•) 
Description 
Notifies the acces.s.ibaity dient applications 
of the speofied Access1bleE·v-ents for the 
spedfied chiid control. (lnharited tram 
Contro'.) 
Notifies the accessibarty dient applications 
of th2 speafled AccQssibleEvents tor th2 
specified chad control . anherited from 
Control.) 
http;i/m>dn.microsoft.comten-us/,braty/system.w\ndowsJonr 
Sl 

52 
v 
S 
l l 
,\ 
I. 
C 
Introduction to Visual Basic 2010 
Di.splay the properties of a Label control. along with an explanation of each. by selecting Label Properties in the TOC. 
~ !..:!bel Properlies (Syskm.Wtndowsh rm$) • Wfndo·l'ls [nkmet Explorer 
0 0 ~ ~ http:,'. nHd."'l.microsoH.com en ·.;sll·btl)tS)'rlcmollindo'l#s.fo-•m~.f~bd p-roocrbest'VSJ( --
~.,. X It> e~g 
p ... ~ 
-(t fnorites 
,; label Properti~ (Synem.Windau;.s.form~) 
SJ • ~ ... P 
~ ...- P.,ge • 
S:.fdy ... 
Tooh ... .
.. » 
. 
a 
Label Properties 
_,.,..!; msdn 
MSDN Library 
,NET Oc..,ck>pmcnl 
lh1s paag 1': spec1f1c to: 1\11:: 
~nmc~\lort 'IHS-Ion 
1.1 2/J 31J 
3~ 4 
.NET Fram~.vorl4 Re!ea .. e Cancf:datf: (RQ 
.NET f rame-A·oO:cL;,ss Lior.1rJ 
S.y~t~m.W•ndo\\s.Form~ Na~space 
label Class 
Label Properties 
AutoEI'ipsis PropE!rty 
AUtOSize Propeny 
Gackground:magc Propfrty 
6actgro1•rd~m"tgelayout Pre pert)· 
SorderStyle Property 
Cre.at~:,~Params: PropE!fty 
O(!~au~Jm<!Mode Propert)' 
Oe:Jult~1J:rg!n Proper:y 
0-efr~ult~ze Prope-t't)' 
Aa>SlJ'• Pcop€rty 
Image Property 
bra;;eAI!gn Property 
[magelndex Prope:-rf 
£mage Key Property 
lmagel.st Prop~n} 
rme.V1odc Property 
PreferredHeighi Propeny 
PrfforredWKI1h Property 
RE>oderTransmtrent Properl) 
Managing Windows 
The l<~bet type exposes. the follo~ing members. 
Pro()erties 
Name 
'!if 
~ccessibi!ityObji!d 
rJff 
Acces. ... ible:oescripttof'\ 
r'!fl 
~ct>ssibleName 
'f! 
>.ccesSibleRole 
Description 
Gets th~ AccessibiE!Objea assigned to the control. 
(JnhErited kom control.) 
Gets or s~ts th~ d;.fau!t acbon description of the 
control tor use by access:bflity client apphc.a!ions. 
(Jnher~ed fmm Control.) 
G9t'i or SQts thE! d~scription of the ccmrot used by 
accessibility di~nt appliCdtions. (lnherited from 
Control.) 
Gets or sets the name of the contr-ol osed by 
accessibility diEnt applications. (lnh~rited frorn 
controq 
Gets or sets thEi 
(tnher~ed from I 
At times you may have more windows and tabs open than you want. You can 
hide or close any window. or switch to a different 1rindow. 
To close a window that is a part of a tabbed windol!', click the window's 
Close button. Only the selected window will close. 
To switch to another window that is part of a tabbed window. click on 
its tab. 
For additional help with the environment. see Appendix C. "Tips and 
Shortcuts for Maste1ing the Visual Studio Environment." 
Note: Answers for Feedback questions appear in Appendix A. 
l. Display and examine the list of properties for a Button control. 
2. Display the Editor window of your Hello World project. Click on the 
Close method to place the inse1tion point. Press the Fl key to view 
context-sensitive Help. 
I ~ 

C
II
A
I>1't:
R 
S3 
Your Hands-On Programming Example --------
Write a program for R 'n R--For Reading and Refreshment to display the cur-
rent special promotions. Include labels to display the current special and the 
promotion code and buttons for each of the follolling departments: Books, Mu-
s ic. Periodicals. and Coffee Bar. 
TI1e user interface should also have buttons for Print and Exit and a label 
with the programmer's name. Change the name of the form to MainForm, and 
place "R ·n R--For Reading a11d Refreshment" in the title bar of the form. 
The Print button should display the form in a P rint Preview window. 
Planuing the Project 
ketch a form (Figure 1.57). 11-hich your users sign off on as meeting their needs. 
Note: Although this step may seem unnecessary. having your users s ign off 
is standard progranuning practice and documents that your users have been 
involved and have approved the design. 
A Planning sketch oftheformfor th.e h.a.nds-on programming example. 
Book6Button-;+[ 
Book6 I 
F i l! tt re 1 .57 
Mu6tcButton-
~ Mu6tc I Curn:nt Promotion ]..._ ________ __,/....-
Promotlonlat:><:t 
Pertodtcai6Button-r-+! Pertodlcal61 
CoffeeBarButton-M_ Coffee Bar I 
Prtnt6utton-
~ Print I 
ExltButton-~ 
Exit I 
Promotion Code ~~---k--------+PromotlonCodela~el 
Programmed f Your Name 
I 
Lat?cl1 
Lal7cl2 
l.!l~OI3 

S4 
,. 
s 
l 
\ 
L 
It 
\ 
s 
t: 
Introduction to Vi>ual BaJi<: 2010 
Plan the Objects and Properties Plan the proper1y settings for the foiTD and for 
each control. 
Objeel 
MainFonn 
Bookslluttoo 
MullicButton 
Periodica.lsBullon 
CoffeeBarButlon 
PrintBllllon 
ExitBullon 
Labell 
Label2 
Label3 
Promot.ionLabel 
PromotionCodeLahel 
Print Form! 
P ror>erty 
Name 
Text 
Sta.rtPO!Iition 
Nrune 
Text 
Nrune 
Text 
Name 
Text 
Name 
Text 
Name 
Text 
Name 
Text 
Text 
Text 
Text 
Name 
AutoSize 
BorclerStyle 
Text 
TextAiign 
N ame 
AutoSize 
BorclerStyle 
Text 
TcxtAiign 
Name 
Setting 
Ma.inFonn 
R 'n R--For Reading and Refre~~hmenl 
CenterScreen 
Boolu!Button 
Boob 
MusicButton 
Music 
Periodica.lsButton 
Periodical• 
CoffeeBo.rButton 
Coffee Bar 
PrintBullon 
Print 
Exit Button 
Exit 
Current Promotion 
Promotion Code 
Progrnmmed by Your Name 
PromotionLabel 
False 
FixedSingle 
{blank) 
Middle Left 
PromotionCodeLabel 
False 
FixedSingle 
(blank) 
Middle Left 
PrintFo<ml 
Plan the Event Procedul'l's You will need event procedures for each button. 
Write the actions in pseudocode, which is English language that is "like code." 
Procedure 
BooksButton_Oick 
MusicButton_Click 
PeriodicalsButton_Ciick 
Actio•lii--PS<"udoc.•Ofle 
Display "Buy tt.·o. get the second one fOO" half price" and 
code 8608. 
Display "'Get a free 1>1P3 do>mload •·ith purchase of a CD" 
and code M608. 
Display •'Elite members: recei~·e 10% ofT every pt.uchase" 
and code 1'608. 

C
II
1\
I0
Tt:
R 
Coffee BnrButton_Ciick 
Display ·'Celebrate the"""""" with 20% ofT opecialty 
drinks" and code C608. 
PrintButt.on_Ciick 
ExitButton_Ciick 
Set the print action IQ Print Preview. 
Call the Print method. 
End the project. 
\"(rite the Project Follow the sketch in Figure 1.57 to create the form. 
Figure 1.58 shows the completed fonn. 
Set the properties of each object, as you have planned. 
Working from the pseudocode. write each event procedu.re. 
\l'hen you complete the code. thoroughly lest the project. 
The fomt.for tlte hand.-on programming exampk . 
I •} K n R-·for R••ding •nd ;tetroshmonl 
, __ 
~ 
~ 
~ 
[ Coll .. e.r J 
?"""oto-1Code 1.__ ___ _,1 
- - - -
'nte Pt·ojeet C..:odiu~t Solution 
ChOtHandsOn 
Bradley/Millspaugh 
June 2010 
li 
I 
li 
II 
-
'Project: 
'Programmer: 
'Date: 
'Description: 
This project displays current promotions tor each department . 
Public Class MainForm 
Private Sub BooksButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles BooksButton.Click 
' Display the books current promotion. 
Promotionlabel. Text = "Buy two, get the second one for half price. • 
PromotionCodeLabel.Text = "8608" 
End Sub 
ss 

56 
,. 
S 
l l 
\ 
L 
R 
\ 
'i 
(" 
lrnroduction eo Vu ual 811.1ic 2010 
Private Sub MusicButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MusicButton.Click 
' Display the music current promotion. 
PromotionLabel.Text = 'Get a free MP3 download with purchase of a CD. ' 
PromotionCodeLabel .Text = "MSOB" 
End Sub 
Private Sub PeriodicalsButton_Click(ByVal sender As system.Object, 
ByVal e As System.EventArgs) Handles PeriodicalsButton.Click 
' Display the periodicals current promotion. 
Promotion Label. Text = 'Elite members receive 10% off every purchase." 
PromotionCodeLabel .Text = "PSOB" 
End Sub 
Private Sub CoffeeBarButton_Click(ByVal sender As system.Object, 
ByVal e As System.EventArgs) Handles CoffeeBarButton.Click 
' Display the coffee current promotion. 
PromotionLabel.Text = "Celebrate the season with 20% off specialty drinks." 
PromotionCodeLabel. Text = "CSOB" 
End Sub 
Private Sub PrintButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles PrintButton.Click 
· Print the form . 
PrintForm1.PrintAction = Printing.PrintAction.PrintToPreview 
PrintForm1 .Print( ) 
End Sub 
Private Sub ExitButton_Click(ByVal sender As system.Object, 
ByVal e As System.EventArgs) Handles Exit8utton.Click 
' End the program. 
Me.Close() 
End Sub 
End Class 
l. Visual Basic is an object-oriented language primarily used to write appli-
cation programs that run in Windows or on the Internet using a graphical 
user interface (GUT). 
2. h1 the OOP object model. classes are used to create objects that have prop-
erties. methods. and events. 
3. The .NET Framework provides an environment for the objects from many 
languages to intemperate. Each language compiles to Microsoft Jntennedi-
ate Language (MSJ L) and runs in the Common Language Runtime (CLR). 

C
II
A
I'l't:
R 
4 . The current release of Visual Basic is called 2010. Visual Basic is part of 
Visual Studio. VB 2010 has an Express version. as well as the Visual Basic 
portion of Visual Studio 2010 Professional, Visual tudio 2010 Premium. 
and Visual Studio 2010 Ultimate. 
5. To plan a project. first sketch the user interface and then list the objects 
and properties needed. Then plan the necessary event procedures. 
6 . The three steps to creating a Visual Basic project are (1) define the user in-
terface. (2) set t11e properties. and (3) write the Basic oode. 
7. A Visual Basic application is called a solution. Each solution can contain 
multiple projects. and each project may contain multiple forms and addi-
tional files. The solution rile has an extension of .sin. a project Cile has an 
extension of .vbproj. and fonn files and additional VB files have an exten-
s ion of .vb. In addition. ilie Visual Studio environment and the VB com-
piler botJ1 create several more files. 
8. The Visual Studio integrated development environment (LDE) consists of 
several tools. including a fom1 designer. an editor. a compiler, a debugger. 
an object browser. and a Help facility. 
9. You can customize the Visual Studio IDE and reset all customizations back 
to tlteir default state. 
10. You create the user interface for an application by adding controls from the 
toolbox to a form. You can move, resize. and delete the controls. 
11. VB has three modes: design lime. run time. and debug time. 
12. The Name property of a control is used to refer to the control in code. The 
Text property holds the words that the user sees on the screen. 
l3. Visual Basic code is IHitten in procedures. Sub procedures begin ''ith the 
word Sub and end witJt End Sub. 
14. Project remarks are used for documentation. Good programming practice 
requires remarks in every procedure and in the Declarations section of 
a file. 
15. Assignment statements assign a value to a property or a variable. Assign-
ment statements work from right to left. assigning the value on the right 
side of the equal sign to the property or variable named on the left side of 
the equal sign. 
16. The Me. Close() metJ1od tenninates program execution. 
17. Each event to which you want to respond requires an event procedure. 
18. You can print out the Visual Basic code for documentation. You also can 
use the PrintForm component in an application to print the current form. 
either to the printer or to t11e Print Preview window. 
19. Three types of errors can occur in a Visual Basic project: syntax errors. 
which violate the syntax mles of the Basic language: run-time errors. which 
contain a statement that cannot execute properly: and logic errors. which 
produce erroneous results. 
20. Finding and fixing progmm errors is called debugging. 
21. You should have a clean compile before you mn t11e program. 
22. Following good naming conventions can help make a project easier to 
debug. 
23. Visual Basic Help has very complete descriptions of all project elements 
and their uses. You can search Help topics or use context-sensitive Help. 
57 

S8 
assignment statement 30 
AutoCorrect 45 
Button 19 
class 4 
clean compile 48 
code 6 
component tray 40 
context menu 23 
context-sensitive Help 50 
control 3 
debug Lime 
14 
debugging 47 
Declarations section 42 
design time 14 
Document ll;ndow 14 
event 4 
event procedure 30 
Express version 5 
fonn 3 
Form Designer 13 
\ 
graphical user interface (GUI) 3 
handle 13 
Help 
13 
integrated development environment 
(IDE) 
8 
Label 19 
logic error 44 
method 
4 
S 
l 
\ 
L 
narnespace 23 
object 4 
n .\ s 
object-oriented programming 
(OOP) 3 
Pascal casing 48 
Print~'orm 40 
procedure 29 
Professional version 5 
Properties window 
13 
property 4 
pseudocode 6 
remark 30 
resizing handle 
21 
run time 14 
mn-time error 44 
snap lines 
21 
solution 7 
Solution Explorer window 13 
solution file 
8 
sub procedure 29 
syntax error 44 
Text property 25 
toolbar 12 
toolbox 
13 
Ultimate version 5 
user interface 6 
Visual Studio environment 8 
l. What are objects and properties? How are they related to each other? 
C 
Introduction to V"uual Basic 2010 
2. What are the three steps for planning and creating Visual Basic projects? 
Describe 1rhat happens in each step. 
3. What is the pUipose of these Visual Basic file types: .sin . . suo. and .vb? 
4. When is Visual Basic in design time? run time? debug time? 
5. 'What is the purpose of the Name property of a control? 
6. Which property detennines what appears on the form for a Label control? 
7. What is the purpose of the Text property of a button? the Text property of 
a form? 
8. Wnat does PushButton_ Click mean? To what does PushButton refer? To 
what does Click refer? 
9. What is a Visual Basic event? Give some examples of events. 
10. What property must be set to center text in a label? What should be the 
value of the property? 

C
ll
i\1'1'F.
H 
11. Wl1at is the Declarations section of a file? What belongs there? 
12. What is meant by the Lenn rkbugging? 
13. What is a syntax error. ~·hen does it occur. and what might cause it? 
14. What is a run-time error. when does it occur. and what might cause it? 
15. \Vhat is a logic e rror. when does it occur. and what might cause it? 
16. Tell the class of control and the likely purpose of each of these object 
nan1es: 
AddressLabel 
ExitBullon 
NameTextBox 
TextBiueRadioButton 
17. What does context-sensitive Help mean? Ho~· can you use it to see the 
Help page for a button? 
1.1 For your first Visual Basic exercise. you must first complete the Hello 
World project. Then add butlons and event procedures to display the 
" Hello World" message in two more languages. You may substitute any 
other languages for those shown. Feel free to modify the user interface to 
suit yourself (or your instructor). 
Make sure to use meaningful names for your new buttons. foiJm,ing the 
naming conventions in Table 1.2. Include remarks al the top of every pro-
cedure and at the top of the file. 
" Hello World'' in French: 
" Hello World" in Italian: 
Bonjour Lout le monde 
Ciao Mondo 
1.2 
Write a new Visual Basic project that displays a different greeting. or 
make it display U1e name of your school or your company. Include at least 
three buttons to display the greeting. print. and exit the project. 
Include a label that holds your name at the bottom of the fom1 and 
change the Text property of the fonn to something meaningful. 
Follow good nanling conventions for object names: include remarks at 
the top of every procedure and at the top of the ftle. 
Select a different font name and font s ize for the greeting label. Lf you 
~ish. you also can select a different color for the font. Select each font at-
tribute from the Font dialog box from the Properties windo~·. 
L.3 
" 'rite a project that displays four sayings. such as '·The early bird gets the 
~·om1" or "A penny saved i.s a penny eamed." (You "; 11 want to keep the 
sayings short. as each must be entered on one line.) When the saying dis-
plays on your fom1. long lines will mn off tJ1e form if U1e label's AutoSize 
property is set to True. To wrap text ,~;t11in U1e label. change the AutoSize 
property to False and use the sizing handles to make the label large enough. 
Make a button for each saying with a descriptive Text properly for 
each. a button to print. and a button to exit the project. 
Include a label U1at holds your name at the boltom of the form. Also. 
make sure to change the form's title bar to someiliing meaningful. 
59 

60 
\ ' 
S 
Ll 
\ 
L 
u ,\ 
s 
C 
Introduction to Visual Basic 2010 
You may change the Font properties of the large label to the font and 
size of your choice. 
Make sure the buttons are large enough to hold their entire Text 
properties. 
Follow good naming conventions for object names: include remarks at 
the top of every procedure and at the top of the file. 
1.4. Write a project to display company contact infom1ation. Include buttons 
and labels for the contact person. department. and phone. When the user 
clicks on one of the buttons. display the contact information in the corre-
sponding label. Include a button to print and another to exit. 
Include a label that holds your name at the bouom of the form and 
change the title bar of the fonn to something meaningful. 
You may change the Font properties of the labels to the font and size of 
your choice. 
·Follow good naming conventions for object names: include remarks at 
the Lop of every procedure and at the Lop of the flle. 
1.5 
Create a project to display the daily ~pecials for "your" diner. Make up a 
name for your diner and display it in a label at the top of the form. Add a 
label to display the appropriate special depending 011 the button that is 
pressed. The buttons should be 
• Soup of the Day 
• Chefs Special 
• Daily Fish 
Also include a Print button and an Exit button. 
Sample Data: Dorothy's Diner is offering Tortilla Soup. a California 
Cobb Salad. and Hazelnut-Coated Mahi Mahi. 

C
ll
i\
l•l'
E
IC 
61 
Very Busy (VB) Mall Order 
Lf you don't have the time to look for all those hard-to-
fmd items. tell us what you're looking for. We'll send you 
a catalog from the appropriate company or order for you. 
We can place an order and ship it to you. We also 
help a;th shopping for gifts; your order can be gift 
wrapped and sent anywhere you wish. 
The company title 11ill be shortened to VB Mail 
Order. Include this name on the title bar of the first 
form of each project that you create for this case study. 
Your first job is to create a project that will display 
the name and telephone nwnber for the contact person 
for the customer relations, marketing. order process-
ing. and shipping departments. 
fnclude a button for each department. When the 
user clicks on the button for a department. display the 
name and telephone number for the contact person in 
two labels. AJso include identifying labels ll'ith Text 
"Department Contact'' and "Telephone Nwnber". 
Be sure to include a button for Print and one for 
Exit. 
Include a label at the bottom of the form that 
holds your name. 
Tesl Dah• 
Dcp nr·tme nl 
Dcpart m~nt 
Telephone 
Contoc t. 
Numl.e1· 
Customer Rel~tion~ 
Tricia Mill, 
500- 1111 
Marketing 
Michelle Rigner 
500-2222 
Order Processing 
Kenna DeVoss 
500-3333 
Shipping 
Eric Andre .. ·s 
500-4444 
Valley Boulevard (VB ) Auto £enier 
Valley Boulevard Auto Center will meet all of your au-
tomobile needs. The center has facilities uith every-
thing for your vehicles including sales and leasing for 
new and used cars and RV s. auto service and repair. 
detail shop. car wash. and auto parts. 
The company title will be shortened to VB Auto 
Center. This name should appear as the title bar on the 
first form of every project that you create throughout 
the text for this case study. 
Your first job is to create a project t11at will display 
current notices. 
Include four buttons labeled "Auto Sales". 
"Service Center''. " Detail Shop''. and " Employment 
Opportunities". One label will be used to display 
the information when the buttons are clicked. Be sure 
to include a Print button and an Exit buuon. 
Include your name in a label at the bottom of the 
form. 
T eiiil 0 111o 
Butlon 
Auto Sale• 
Sen--ice Center 
Detail Shop 
Employment Opportunities 
Label TeJ<I 
Family wat~:on. immaculate 
condilion $12.995 
Lube. oil. filter $25.99 
Complete detail S79.95 for 
most cars 
Sales position, contact Mr. Mann 
551-2134 x475 

62 
' 
S 
l 
\ 
L 
G 
A 
S 
4.' 
Introduction !o V"uualfk>ic 21JIO 
VIdeo Bo11anza 
This neighborhood store is an independently owned 
video rental business. The owners ~t·ould like to allow 
their customers to use the computer to look up the 
aisle number for movies by category. 
Create a fonn witl1 a bullon for each category. 
When the user clicks on a button. display the corre-
sponding aisle number in a label. Include a button to 
print and one to exit. 
Include a label that holds your name at the bot1om 
of the fonn and change the title bar of the form to 
Video Bonanza. 
You may change tl1e font properties of tl1e labels to 
the font and size of your choice. Include additional 
categories. if you wish. 
Follo11· good programming conventions for object 
names: include remarks at the top of every procedure 
and at the top of tl1e file. 
Test D ata 
B utto n 
Comedy 
Drama 
Action 
Sci-Fi 
Horror 
Ncw Release8 
Location 
Aisle l 
Aisle 2 
Awl~ 3 
Aisle 4 
Aisle 5 
Bock Wall 
Very Very Boarth 
This chain of stores features a full line of clothing and 
equipment for snowboard and skateboanl enthusiasts. 
~lanagement wants a computer application to allow 
their employees to display the address and hours for 
each of their branches. 
Create a form •~ith a but1on for each store branch. 
When the user clicks on a button. display the correct 
address and hours. 
Include a label that holds your name at tl1e bottom 
of the form and change the title bar of the form to Very 
Very Boards. 
You may change the font properties of the labels to 
the font and size of your choice. 
Include a Print button and an Exit button. Follow 
good progranuning conventions for object names: in-
clude remarks at the top of every procedure and at the 
top of the file. 
Store Branches: The three branches are Down-
town, Mall. and Suburbs. Make up hours and locations 
for each. 

B 
A 
p 
T 
E 
R 
User Interlace 
Design 
I . Use text boxes. masked text boxes. rich text boxe>. group boxes. check boxes. 
radio buttons. picture boxes. and line and shape controls effectively. 
%. Set the BorderStyle property to make controls appear fiat or three-dimensional. 
:JJ Select multiple controls and move them. align them. and set common properties. 
4. Make your projects easy for the user to understand and operate by defining 
access keys. setting an Accept and a Cancel hull on. controlling the tab 
sequence .. resetting the focus during program execution. and causing 
ToolTips to appear. 
5 . Clear the contents of text boxes and labels. 
G. Make a control visible or invisible at run time by setting its Visible property. 
1. Disable and enable controls al design time and run time. 
8 . Change text color during program execution. 
9. Code multiple statements for one control using the With and End With 
statements. 
Concatenate ( join) strings of text. 
Continue long program lines using implicit continuation or expHcit line-
continuation characters. 

64 
v 
S 
l l 
,\ 
I. 
C 
User Interface Design 
Introducing More Controls 
In Chapter 1 you learned to use labels and buttons. In this chapter you will 
learn to use several more control types: text boxes. group boxes. check boxes. 
radio buttons. picture boxes. and line and shape controls. Figure 2.1 shows the 
toolbox with the Common Controls, Containers, and Visual Basic PowerPacks tabs 
open. to show the tools for these new controls. Figure 2.2 shows some of these 
controls on a form. 
Each class of controls has its own set of properties. To see a complete list 
of the propetties for any class of control, you can (1) place a control on a form 
and examine the propetties list in the Properties window. or (2) click on a tool 
or a control and press F1 for context-sensitive Help. Visual Studio will display 
the Help page for that control. and you can view a list of U1e properties and an 
explanation of their use. 
The toolbox with three tabs open. showing the new controls that are covered in this chapter. Click the triangles on the tabs to 
open and close each section. 
Toolbox 
... 11-
Click to open -
" Containers 
1> All Windows Form~ 
or close tab 
It 
Pointer 
Click to open -
" Common Controls 
~ FlowlayoutP an el 
or close tab 
~ 
Pointer 
GroupBox 
LJ 
GroupBox 
@ 
Button 
CJ 
Panel 
CheckBox 
0 
CheckBox 
OJ 
SplitContainer 
rm 
Checkedli~Box 
Ll Tab(ontrol 
. 
~ Com boB ox 
§ 
T ablelayoutPan el 
'ill 
Date TimePicker 
1> Menus & Tool bars 
A 
Label 
I> Data 
A 
linklabel 
1> Components 
~ list Box 
1> Printing 
9f!2 
Li~View 
I> Dialogs 
9:~ 
Maske<trextBox -
,....-.'>~ Maskedl extBox 
1> WPF lnteroperability 
1m 
MonthCalendar 
I> Reporting 
8 
Notifylcon 
" Visual Basic PowerPacks 
~ 
Pointer 
lrn 
NumericUpDown 
~ PrintForm 
PictureBox 
~ PictureBox 
" 
[!!J 
ProgrssBar 
LineShape 
Line5hape 
RadioButton -
~e RadioButton 
OvaiShape 
0 
OvaiShape 
~\l!= Rich T extBox 
RectangleShape -
f--->c::l 
RectangleShape 
RichTextBox -
~ 
~ Data Rep eater 
TextBox 
fill 
TextBox 
t6 
TooiTip 
·~:: 
TreeView 
[fJ 
WebBrowser 

C 
II 
1\ 
I' 
'I' 
1•: 
ll 
Thi.s form uses labels. text 
boxes. a check box, radio 
butto11s, group boxes. and a 
Group 
boxes 
~--------~ ·!-----+1-=- Text boxe• 
pii'lure box. 
Radio 
Use a text oox control when you want the user to type some input. The fonn in 
Figure 2.2 has two text boxes. The user can move from one box to the next, make 
corrections. cut and paste if desired. and click the Display bull on when finished. 
l.n your program code you can use the Text pt'OJ)('I'LY of each text box. 
Example 
NameLabel.Text = NameTextBox.Text 
In this example. whatever the user enters into the text box is assigned to 
the Text property of NameLabel. If you want to display some text in a text box 
during program execution. assign a literal to the Text properly: 
MessageTextBox.Text = "Watson, come here ." 
You can set the TextAligu pl'Ope t'ty of lexl boxes to change the alignment 
of text within the box. In the Properties window. set the property to Left. Right. 
or Center. In code. you can set the property using tbese values: 
Horizonta!Al ignment.Left 
Horizonta!Alignment.Hight 
Horizonta!Alignment.Center 
MessageTextBox.TextAlign 
HorizontalAlignment.Left 
6S 

66 
v 
S 
l l 
,\ 
I. 
C 
User Interface Design 
Example Names for 1exl Boxes 
TitleTextBox 
CompanyTextBox 
:Masked Text Boxes 
A specialized form of the TextBox control is the !\'laskedText.Box. You can 
specify the formal (the Mask property) of the data required of the user. For 
example. you can select a mask for a ZIP code. a date. a phone number. or a 
social security number. Figure 2.3 shows the Input Mask dialog box where you 
can select the mask and even try it out. At mn time the user cannot enter char-
acters that do not conf01m to the mask. For example. the phone number and 
social security number masks do not allow input other than numeric digits. 
Example Names for Masked Text Boxes 
DateMaskedTextBox 
PhoneMaskedTextBox 
Note: For a date or time mask. the user can enter only numeric digits but 
may possibly enter an invalid value: for example. a month or hour greater than 
12. The mask ,~;u accept any numeric digits. which could possibly cause your 
program to generate a run-time error. You willleam to check the input values 
in Chapter 4. 
Select a fonnat for the input mask in the Input Mask dialog box, which supplies the 
Mask property of the MaskedTextBox control. 
Input Ma;k 
J!i).l-.-1 
Select a predefined mask description from the list below or select Custom to define a custom mask. 
Mask Description 
Numeric (5-digits) 
Phore number 
Phore number no area code 
Short date 
Short date and time (US) 
Socicl security number 
Time (European/ Military) 
Time (US) 
Zip Code 
<Cus-tom> 
Mask: 
Preview: 
Data Format 
12345 
(574) 555-0123 
555-0123 
12/11/2003 
12/11/200311:20 
000-00-1234 
23:20 
11:20 
98052-6399 
Validating Type 
lnt32 
(none) 
(none) 
Date Time 
Date Time 
(none) 
Date Time 
Date Time 
(none) 
(none) 
[t] Use Validating Type 
OK 
II Cancel 

C 
II 
.\ 
1• 
T 
t: 
R 
Ridt Text Boxe-s 
Another variety of text box is the RichText Hox control. which offers a variety 
of formalling features (Figure 2.4). ln a regular text box, all of the text is fom1nt-
ted the same. but in a rich text box. the user can apply character and paragraph 
formatting to selected text. much like using a word processor. 
One common use for a rich text box is for displaying URL addresses. [n a 
regular text box. the address appears in the default font color. but the rich text 
box displays it as a link when the DetectU rl property is set to True. Note that it is 
not an active link. but it does have the formatting to show the URL as an address. 
You also can load fom1atted text into a rich text box from a file stored in 
rich text format (rtf). Use the Load File method of the rich text box. In this ex-
ample. the file "Rich 1ht Boxes.rlf' is stored in the bin/debug folder. but you 
could include the complete path to load a file from another location. 
sampleRichTextBox. LoadFile ("Rich Text Boxes. rtf •) 
Pamper Yourself 
All Your Favorite Books 
ich Text Boxes 
Contents of .rti file 
Allow ... 
• 
Mubple Color< 
• 
Font .1tyles 
• 
Bulleted Lists 
AutoonaticaUy formatted URI. 
Regular text box 
Displaying Text o n UuJti(>le U ues 
Both the regular text box and tl1e rich text box have properties that allow you to 
display text on multiple lines. The Wm·dWrap proper·ty determines whether 
the contents should ~Tap to a second line if they do not fit on a single line. The 
property is set to True by default. Both controls also have a Multiline propet·ty. 
which is set to False by default on a text box and True on a rich text box. Both 
WordWrap and Multiline must be set to True for text to wrap to a second line. 
For a regular text box. you must set Multiline to True and then adjust the 
height to accommodate multiple lines. If Multiline is False (tl1e default). a text 
box does not have resizing handles for vertical resizing. Be aware that a text box 
67 
U$ing the RichTextBox control. 
you can apply font style.s to 
selected te>1, $how formatted 
U RLs. and display text from a 
formatted Jtjjile 

68 
,. 
S 
U 
.\ 
L 
G 
.\ 
S 
(' u- lnrerface De.ign 
will not automatically resize to display multiple lines even though Multiline is 
True: you must make the height tall enough to display tJ1e lines. 
You can set the Text property of n multiline text box (or rich text box) to a 
long value: t11e value nill wrap to fit in the width of the box. You also can enter 
multiple lines nnd choose the location of the line breaks: the techniques differ de-
pending on whether you set the Text property at design time or in code. At design 
time. click on t11e Text property in the Properties window nnd click on the Prop-
erties button (the down llTfOW): a small editing window pops up ~titJJ instructions to 
press Enter at the end of each line and Ctrl + Enter to accept the text (Figure 2.5). 
In code. you can use n NewLine clnu·actc•· (Environment. Newline) in the 
text string where you "·ant the line to brenk. Joining strings of text is called con-
catenation and is covered in "Concatenating Text" later in this chapter. 
TitleRichTextBox.Text ~ • Pamper Yourself" & Environment.NewLine & 
"All Your Favorite Books" 
Properu~ 
S.mpleRichTe><tllox System.Wndows.For • 
~: ~ I 
1m .; 
ShowSdcdionMorgi FaiJc 
e. ~-
)CUL_ 11f\ 
T•blndex 
0 
TabStop 
True 
Tog 
.---j__jliiQII•••L ___ Jf.~t-- Properties button 
Press ..... !ftobee nan~ 11e 
~'K1 
•£n'•rt .Joe: ~,.P.t 
G1·ou1J Boxes 
Editor for entering 
the Text proper1 y 
GroupBox controls are used as coutaiue •·s for otJ1er controls. Usually. 
groups of radio buttons or check boxes are placed in group boxes. Using group 
boxes to group controls can make your forms easier to understand by separat-
ing the controls into logical groups. 
Set a group box's Text property to the words you want to appear on the top 
edge of the box. 
Example Names for Group Boxes 
ColorGroupBox 
StyleGroupBox 
Fla;fnrc- 2. 5 
Click the Properties button for 
thl' Text property and a mwll 
edilin.g box popJ up. To enter 
multiple line.< of text. presJ 
Enter at the end of each line 
and Ctrl + Emer to accept 
the t.ext. 

C 
II 
A 
1• 
'I' 
" 
ll 
Clu•ck Boxes 
Cbeck boxes allow the user to select (or deselect) an option. In any group of 
check boxes. any number can be selected. The Otecked property of a check 
box is set to False if unchecked or True if checked. 
You can write an event procedure for the CheckedChanged event, which 
executes when the user clicks in the box. In Chapter 4. when you learn about 
If statements. you can take one action when the box is checked and another 
action when it is unchecked. 
Use the Text property of a check box for the text you want to appear next to 
the bux. 
Example Names for Check Boxes 
BoldCheci<Box 
ItalicCheci<Box 
Radio Buuons 
Use •·adio buuoms when only one button of a group may be selected. Any ra-
dio buttons that you place directly on the form (not in a group box) function as 
a group. A group of radio buttons inside a group box function together. The best 
method is to first create a group box and then create each ra.dio button inside 
the group box. 
When you need separate lists of radio buttons for different purposes. you 
must include each list in a separate group box. You can find an example pro-
gram later in this chapter that demonstrates using two groups of radio buttons. 
one for seiting the background color of the form and a second set for selecting 
the color of the text on the form. See "Using Radio Buttons for Selecting Colors." 
The Checked propetty of a radio button is set to True if selected or to False 
if unselected. You can write an event procedure to execute when the user se-
lects a radio button using the control's CheckedChanged event. In Chapter 4 
you will learn to determine in your code whether or not a button is selected. 
Set a radio button's Text property to the text you want to appear next to the 
button. 
Example Names for Radio Buttons 
RedRadioButton 
BlueRadioButton 
Pictm·e Boxes 
A l)icuu·eBox conu·ol can hold an image. You can set a picture box's lmage 
Jn·opet·ty to a graphic file with an extension of .bmp •. gif. .jpg. .jpeg .. png . .ico . 
. emf. or .mnf. You first add your images to the project's resources: then you can 
assign the resource to the Image prope11y of a PictureBox control. 
Place a PictureBox control on a f01m and then select its Image property in 
the Properties window. Click on the Prope1ties button (Figure 2.6) to display a 
Select Resource dialog box where you can select images that you have al-
ready added or add new images (Figure 2.7). 
69 

70 
\ ! 
s 
l l 
" 
•• 
u 
\ 
s 
(' u,_ Interface De•ign 
PrDptflies 
-q x 
Blql'ktuu.Sox System.\Vndow>.Form~ • 
~: ~l a ~ 
G~dltM tmbc:r True: 
@I 
0 
(nonoJ Q+--
Properties bullon 
l~t.loc~tion 
~ 
o lnlialmoge 
~ 
Syslem.Dr<tt 
r> Loc•non 
42. ZSl 
~ 
Loctca 
Fol<t 
v M"!l.n 
3. 3, 3, 3 
MDlmumShe 
0,0 
M:ftmumSize 
0, 0 
1..,.,e 
Tin: im~gedi~pl~d in lhePfcturc=BoL 
Select Ruource 
RHOUIU: context 
C Local r~o urce: 
~ Proje<t 1ecource ne: 
I Rc:!!ovr<:es.re:sx 
-I 
fnl><lrt ... 
OK 
II 
Cancol 
Click on the lmporl button of the Select Resource dialog box to add images. 
An Open dialog box appears (Figure 2.8). where you can navigate to your image 
ftles. A preview of the image appears in the preview box. 
Note: To add files with an .ico extension. select All Files for the Files of type 
in the Open dialog box. 
Fl~nrt> 2.6 
Qick on the Image propaty 
for a Picturt&x control. and 
a Properties button appearJ. 
aick on the Properties button 
to r•iew the S919ct Resourc9 
dinlog bo.~. 
Figure 2.7 
Tht 59/«l Resourc9 diak>g 
box. Make yo!lr selection here 
for the graphic file you want to 
appear in the PU:tureBox 
control; click Import to add an 
image to the list. 

(.; 
II 
1\ 
I' 'I' 
1•: 
II 
Find the text graphic files and icor~jiles supplied by Microsoft in the 
Student Data\Craphics folder. 
Open 
QQ~[.JU « VB2010 t StudentOdld ~ Graphics t 
:r Fo.otit<S 
• 
Otktop 
...a. Download~ 
~ 
Recent Places 
i.,;ll~Mit< 
J:!1 Oocull'lent~ 
Jt Music 
~ Pictures 
8v.d..,.. 
4 Homegroup 
;:f ComputEr 
C.os(C·J 
Miao~ftlcon' 
Book.png 
~ 
Cofftt.png 
Cup.BMP 
Ale: name; 
~ 
• 
[1moge Foes(' .git.'.jpg;• !P"9;:-;:J 
Open EJ I Cancel 
You can use any graphic file (with the proper format) that you have avail-
able. You will find many graphic files included with the Student Data files on 
the text Web site (www.mhhe.comNB2010). 
Picture Box controls hove several useful prope11 ie.~ that you can set at design 
time or mn time. For example. set the SizeMude pl'Opel'ly to StretchJmage to 
make the graphic resize to fill tl1e control. You can set the Visible property to 
False to make the pictw·e box disappear. 
For example, to make a picture box invisible at run time, use this code 
statement: 
LogoPictureBox.Visible = False 
You can assign a graphic from the Resources folder at run time. You use 
the My keyword. which is a special VB keyword that gives you access to many 
system settings. In the follmting example, "Sunset" is the name of a graphic 
(without its extension) in the Resources folder of the project. 
SamplePictureBox .Image = My .Resources.Sunset 
71 

72 
v 
S 
l l 
:\ 
L 
G 
,\ 
S 
(' 
User Interface Design 
Addi11,2; and R~moviug Resom·ces 
Jn Figure 2.6 you saw the easiest way to add a new graphic to the Resources 
folder. which you perform as you set the Image property of a PictureBox 
control. You also can add. remove. and rename resources using the Visual 
Studio Pt·oject Desigum·. From the Project menu. select ProjectName Proper-
ties (which always shows the name of t11e currelll project). The Project 
Designer opens in the main Document window: click on the Resources tab to 
display the project resources (Figure 2.9). You can use the buttons at the top 
of the window to add and remove images. or right-click an existing resource to 
rename or remove it. 
Ch02ChangePidwes X 
Applicotion 
Compile 
Debug 
Retere11ces 
Re>ources: 
Service~ 
Signing 
My &tensions 
Security 
Winter 
Publish 
Line ami Shape Con11·ols 
The line and shape controls are in a separate section at the bottom of the tool-
box. The Visual Basic PowerPacks controls were added as a separate download 
in Visual Studio 2008 but come installed with the 2010 version. 
You can use the LineShape. OvalShape. and RectangleShape controls to 
create graphic shapes on your form. Figure 2.10 shows many sample shapes 
along with the tools in the toolbox. 
Place the Couu·ols ou a Form 
To place a control on the form. click on the tool in the toolbox and use the 
mouse pointer to draw the shape that you want on the form. Alternately. you can 
double-click one of the tools to create a default size control that you can move 
and resize as desired. 
The line and shape controls have many properties that you can set. as 
well as events, such as Click and DoubleClick. for which you can write event 
procedures. 
Click on the Resources tab of 
the Project Designer to work 
with project resources. 
Yon can add. remove, and 
rename resources on this page. 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
Toolbox 
• ~ x 
() AU Windows- Formt 
I> Common ContJob-
1> Containers 
t- Menus & T oolbars 
!> Data 
~ Components 
I>' Printing 
1> Oial.-?9~ 
~ 
~ PrintForm 
'-. 
lineShape 
0 
Ovoi.Shape 
Cl RedangiEShape 
;; OataRepeater 
1> GcnO'ol 
'* Toolbox 
~ 
Line and Shape Contrru. 
Properties of a line include BorderStyle (Solid. Dot, Dash. and a few more). 
Border Width (the width of the line. in pixels). BorderColor. and the locations 
tor the two endpoints of the line (X1, X2, X3. X4). Of course. you can move and 
resize the line visually. but it sometimes is more precise to set t11e pixel loca-
tion exactly. 
The propetties of the OvalShape and RectangleShape controls are more in-
teresting. You can set transparency with the BackStyle property and the border 
with BorderColor. BorderStyle. and BorderWidtJ1. Set ilie interior of ilie shape 
using FillColor. Fil!GradientColor. Fil!GradientStyle. and FillStyle. You can 
give a rectangle rounded corners by setting the ComerRadius. which defaults 
to zero for square comers. 
Drawiug Lines 
[n addition to using the LineShape control for a line. you also can draw a line 
on a fonn by using the Label control. Set the label's AutoSize property to False. 
the Text property to blank. and the BorderStyle to None, and change the Back-
Color to the color you want for the line. You can control the size of the line with 
the Width and Height properties. located beneath the Size prope1ty. 
Another way to draw a line on a form is to use the graphics methods. Draw-
ing graphics is covered in Chapter 13. 
Using Sma1·t Tags 
You can use smart tags to set the most common properties of many controls. 
When you add a PictureBox or a TextBox to a form, for example, you see a 
small an-ow in the upper-right corner of the control. Click on the arrow to open 
the smart tag for that control (Figure 2.11). The smart. tag shows a few proper-
ties that you can set from there, which is just a shortcut for making the changes 
from the Prope1ties window. 
The line and shape controls in 
the Visual Basic Power Packs 
section of the toolbox, with 
some sample controls on the 
form. 
73 

74 
l ' 
C 
User Interface Design 
/ 
Smatt tag arrow 
a!;! form! 
/ 
0."'""~''0"'""ll PictureBox Tasks 
d 
Choose Image 
;; 
...,..-.,.-----.==ill 
d--'-'-""""0'"'-'-'-'-'-'-'- Size Mode I Norm<l 
BJ 
+- -
Popup 
smart tag 
Docie in parent confainer 
Usiug Images fo1· Fol"lns al){l Cont1·ols 
You can use an image as the background of a form or a control. For a fonu. set 
the Backgroundlmage propetty to a graphic resource; also set the form's Back-
groundlmageLayout property to Tile, Center. Stretch. or Zoom. 
Controls such as buttons, check boxes. and radio buttons have an Image 
property that you can set to a graphic from the project's resources. 
SeLLing a Bot'(le•· and Style 
Most oontrols can appear to be three-dimemional or flat. Labels. text boxes. and 
picture boxes all have a Bot·d et·Style propm·ty with choices of None. 
FixedSingle. or Fixed30. Text boxes default to Fixed30; labels and picture boxes 
default to None. Of course. you can change the property to tlte style of your choice. 
Create a picture box control that displays an enlarged icon and appears in a 3D 
box. Make up a name that confonus to this textbook's naming convention. 
Pl'OJ>el1y 
SeUiu;-
Name 
Border5tyle 
SizeMode 
Visible 
Working with Multiple Controls 
You can select more than one control at a time. which means that you can move 
the controls as a group. set similar properties for the group. resize, and align the 
controls. 
F igur e 2.1 1 
Point to the smart tag arrow 
to open the smart tag for a 
control. For this PictltreBox 
control. you can set the Image, 
Size Mock. and Dock propi!rties 
in the smart tag. 

C 
II 
A 
1• 
'I' 
" 
ll 
Selecting Multiple Cont1·ols 
There are several methods of selecting multiple controls. If the controls are near 
each o~1er. the easiest technique is to use the mouse to drag a selection box around 
the controls. Point to a spot that you want to be one comer of a box surrounding the 
controls, press the mouse button. and drag to the opposite comer (Figure 2.12). 
When you release the mouse button. the controls will all be selected (Figure 2.13). 
Note that selected labels and check boxes with AutoSize set to True do not have 
resizing handles: other selected controls do have resizing handles. 
You also can select multiple controls, one at a time. Click on one control to 
select it. hold down the Ctrl key or the Shift key. and click on the next control. 
You can keep the Ctrl or Shift key down and continue clicking on controls you 
wish to select. Ctrl-click (or Shift-click) on a control a second time to deselect 
it without changing the rest of the group. 
When you want to select most of the controls on the form. use a combina-
tion of the two methods. Drag a selection box around aJJ of the controls to select 
them and then Ctrl-click on the ones you want to deselect. You also can select 
aJJ of the controls using the Select All option on the Edit menu or its keyboard 
shortcut: Ctrl + A. 
Deselecting a G1·oup of Cont1·ols 
When you are finished working '~ith a group of controls. it's easy to deselect 
them. Just click anywhere on the form (not on a control) or select another pre-
v iuu::;l y uu::;electeJ cuutrul. 
Start here 
Selection 
handles 
It 
II 
·~ Forml 
...,. 
Labell 
L.abel2 
aQ Forml 
Ee::l~~ 
I 
~ 
Drag to here 
I 
r-=
···························!R; 
Q 
0 
"""'"~~1.&1 ~---r- Resizing 
t . 
handles 
75 
You con choose the control to be the 
dominant control for aligning and 
resizing. Use Shift"click to make the 
first selected control dominant; use 
Ctrl-d ick to make the last selected 
control dominant. • 
Fi~1tre 2.12 
Use the point~r to drag a 
selection box around the 
controls you wish to select. 
Figur e 2.13 
When multiple controls are 
selected, each has resizing 
handles (if resizable). 

76 
~· 
It 
i\ 
S 
( " 
User Interface Design 
Moving Cont1·ols us u G1·oup 
After selecting multiple controls. you can move them as a group. To do this. 
point inside one of the selected controls. press the mouse button. and drag the 
entire group to a new location (Figure 2.14). 
aD Form1 
You can set some common properties for groups of controls. After selecting the 
group. look at the Propet1ies window. Any propetties that appear in the window 
are shared by all of the controls and can be changed all at once. For example. 
you may want to set the BorderStyle property for a group of controls to three-
dimensional or change the font used for a group of labels. Some properties 
appear empty; those properties do not share a common value. You can enter a 
new value that will apply to all selected controls. 
AJigning Conlt·ob 
After you select a group of controls, it is easy to resize and align them using the 
buttons on the Layout toolbar (Figure 2.15) or the corresponding items on the 
Format menu. Select your group of controls and choose any of the resizing but-
tons. These cru1 make the controls equal in width. height. or both. Then select 
another button to align the tops. bott.oms. or cente rs of the controls. You a'lso 
can move the entire group to a new location. 
Resiu and align nudtiple controls lLSing the Layout toolbar. 
F l
~t n•·«-
%. 1 4 
Drag a group of Mlected 
controls to m.ove the entire 
group to a n<1w location. 
M ake sure lo read Appendix C for 
lips and shortcuts for w orking with 
controls. • 
Se»ing the font for the form chonges 
the defouh font for all controls on the 
form. • 
Fl jtu re 2. 1 5 

C
II
,\I>
'I'
I'
R 
Note: The aligrunent options align the group of controls to the control that 
is active (the sizing handles are white). Referring to Figure 2.13, the upper text 
box is the active control. To make another selected control the active control. 
simply click on it. 
To set the spacing between controls. use the buttons for horizontal and/or 
vertical spacing. These buttons enable you to create equal spacing between 
conirols or to increase or decrease the space between controls. 
Note: If the Layout toolbar is not displaying. select View I Too/bars I Layout. 
Designing Your Applications for User Convenienc 
One of the goals of good programming is to create programs that are easy to use. 
Your user interface should be clear and consistent. One school of thought says 
that if users misuse a program. it's the fault of the programmer. not the users. 
Because most of your users will already know how to operate Windows programs. 
you should strive to make your programs look and behave like other Windows 
programs. Some of the ways to accomplish this are to make the controls operate 
in the standard way. define keyboard access keys. set a default button. and make 
the Tab key work correctly. You also can define ToolTips. which are those small 
labels that pop up when the user pauses the mouse pointer over a control. 
Designing the Use•· lnte1·face 
The design of the screen should be easy to understand and "comfottable" for 
the user. The best way to accomplish these goals is to follow industry standards 
for the color. size. and placement of controls. Once users become accustomed 
to a screen design. they will expect (and feel more familiar '~ith) applications 
that follow the same design criteria. 
You should design your applications to match other Windows applications. 
Microsoft has done e:densive program testing nith users of different ages. gen-
ders. nationalities, and disabilities. We should take advantage of this research 
and follow their guidelines. Take some time to examine the screens and dialog 
boxes in Microsoft Office as well as those in Visual Studio. 
One recommendation about interface design concerns color. You have 
probably noticed that Windows applications are predominantly gray. A reason 
for this choice is that many people are color blind. Also. research shows that 
gray is easiest for the majority of users. Although you may personally prefer 
brighter colors. your applications will look more professional if you stick with 
gray. or the system palette tl1e user chooses. 
Note: By default the BackColor property of fom1s and controls is set to Control. 
which is a color included in the operating system's palette. If the user changes the 
system theme or color, your fonns and controls 11ill conform to their new settings. 
Colors can indicate to the user what is expected. Use a white background 
for text boxes to indicate that the user should input information. Use a gray 
background for labels, which the user cannot change. Labels that will display 
a message should have a border around them: labels that provide text on the 
screen should have no border (the default). 
Group your controls on the form to aid the user. A good practice is to cre-
ate group boxes to hold related items, especially those controls that require 
77 

78 
v 
S 
l l 
:\ 
L 
G 
,\ 
S 
(' 
User Interface Design 
user input. This visual aid helps the user understand the information that is 
being presented or requested. 
Use a sans se1if font on your forms. such as the default MS Sans Serif. and 
do not make them boldface. Limit large font sizes to a few items, such as the 
company name. 
Defining Keyhoard Access Keys 
Many people prefer to use the keyboard. rather than a mouse, for most opera-
tions. Windows is set up so that most functions can be done with either the key-
board or a mouse. You can make your projects respond to the keyboard by 
defining access keys, also called hot keys. For example. in Figure 2.16 you 
can select the OK button with Alt + o and the Exit button with Alt + x. 
•] K~yboard or Mous~ 
b€11-.a..l 
tjame 
J 
fhone 
QK 
You can set access keys tor buttons. radio buttons. and check boxes when 
you define their Text properties. Type an ampersand (&) in front of the char-
acter you want for the access key; Visual Basic underlines the character. 
You also can set an access key for a label: see "Setting the Tab Order for 
Controls" later in this chapter. 
For examples of access keys on buttons. type the following for the button's 
Text property: 
for 
.O.K 
for 
it 
When you define access keys. you need to watch for several pitfalls. First, 
try to use the Windows-standard keys whenever possible. For example. use the 
Ji. of Exit and the S of Save. Second. make sure you don't give two controls the 
same access key. It confuses the user and doesn't work correctly. Only the next 
control (from the currently active control) in the tab sequence is activated when 
the user presses the access key. 
Note: To view the access keys on controls or menus, you may have to press 
the Alt key, depending on your system settings. You can set Windows to always 
show underlined shortcuts in the Control Panel. In Windows 7 select Ease of 
Access Center and choose Ma·ke the keyboard easier to use. In Windows Vista. 
Flgur.-. 2.16 
The underlined character 
defines an access key: The uJer 
can select the OK button by 
pressing Alt + o and the Exit 
button with Alt + x. 
Use two ampersa nds when you wont 
to make on ampersand appear in the 
Text property: &Health && Welfa re 
for ".l:ieolth & We Wore•. • 

C 
II 
A 
1• 
'I' 
" 
ll 
select Ease of Use and Change how your keyboard works. Then, in either. 
check the box for Underline keyboard shortcuts and access keys. 
Selling the Accept ami Cancel Bullous 
Are you a keyboard user"? If so. do you mind having to pick up the mouse and 
click a. button after typing text into a text box? Once a person's fingers are on 
the keyboard, most people prefer to press the Enter key. rather than to click the 
mouse. If one of the buttons on the fonu is the Accept button. pressing Enter is 
the same as clicking the button. 
You can make one of your buttons the Accept button by setting the 
AcceptButtou pt·opet·ty of the form to the button name. When the user 
presses the Enter key. that button is automatically selected. 
You also can select a Cancel button. The Cancel button is the button that is 
selected when the user presses the Esc key. You can make a button the Cancel 
button by setting the fonn's Cau ce~Huuou pro pet·ty. An example of a good 
time to set the CancelButton property is on a fom1 with OK and Cancel buttons. 
You may want to set the form's AcceptButton to OK Button and the CancelBut-
ton propetty to CancelButton. 
Selling the Tab 01•der fo1• CoutJ•ols 
Tn Winrlnw;< prng1·;un~. nnP. r.nntrnl nn thA fnnn alway!< hns thP. fmm~ . Ynu r.an 
see the focus change as you tab from control to control. For many controls. such 
as buttons. the focus appears as a thick border. Other controls indicate the fo-
cus by a dotted line or a shaded background. For text boxes. the insertion point 
(also called the cursor) appears inside the box. 
Some controls can receive the focus; others crumot. For example. text boxes 
and buttons can receive the focus. but labels and picture boxes cannot. 
Tbc Tab Order 
Two properties determine whether the focus stops on a control and the order in 
which the focus moves. Controls that are capable of receiving focus have a 
TabSto p pl·opet·ty. which you can set to Tme or False. If you do not want the 
focus to stop on a control when the user presses the Tab key, set the TabStop 
property to False. 
TI1e Tabludex pro pm·ty determines the order the focus moves as the Tab 
key is pressed. As you create controls on your fonu. Visual Studio assigns the 
Tablndex property in sequence. Most of the time that order is coJTect. but if you 
want to tab in some other sequence or if you add controls later. you 'till need to 
modify the Tab Index properties of your controls. 
When yow- program begins running, the focus is on the control with the 
lowest Tablndex (usually 0). Since you generally want the insertion point to ap-
pear in the first control on the form. its Tablndex should be set to 0. The next 
control should be set to 1; the next to 2; and so forth. 
You may bepuz7led by the properties of labels. which have a Tab Index prop-
erty but not a TabStop. A label cannot receive focus, but it has a location in the 
tab sequence. This fact allows you to create keyboard access keys for text boxes. 
When the user types an access key that is in a label. such as Alt + N. the focus 
jumps to the fust Tablndex following the label (the text box). See Figure 2.17. 
By default. buttons. text boxes, and radio buttons have their TabStop prop-
erty set to True. Be aware that the behavior of radio buttons in the tab sequence 
79 

80 
v 
S 
l l 
,\ 
L 
(' 
User Interface Design 
•51 Keyboard or Mouse 
Tablndex= 2 -
:----7~ 
---
+.-Tablndex= l 
,.___
+.- Tablndex = 3 
l co»<K- ll--· -~- Tablndex=4 
L~Exit~-
-!!_JI• --t- Tab!ndex = 5 
is different from other controls: The Tab key takes you only to one radio button 
in a group (the selected button). even though all buttons in the group have their 
TabS top and Tab Index properties set. If you are using the keyboard to select ra-
dio buttons, you must tab to the group and then use your up and down arrow 
keys to select the correct button. 
Selling the Tab Onlc•· 
To set the tab order for controls. you can set each control's Tablndex property in 
the Propel1ies window. Or you can use Visual Studio's great feature that helps 
you set Tab Indexes automatically. To use this feature. make sure that the Design 
window is active and select View/ Tab Order or click the Tab Order button on the 
Layout toolbar. (fhe Tab Order item does not appear on the menu and is not 
available on the Layout toolbar unless the Design window is active.) Small num-
bers appear in the upper-left corner of each conb·ol; these are the current 
Tab Index properties of the controls. Click first in the control that you want to be 
Tab Index zero. then click on the control for Tablndex one, then click on the next 
control until you have set the Tablndex for all controls (Figure 2.18). 
~ Keyboard or Mouse 
I!Jme 
IJ 
F i g u r e 2.17 
To use a keyboard access key 
for a text box. the Tab Index of 
the label must precede the 
Tablndex of the text box. 
Moke sure to not hove duplicate 
numbers for the Toblndex properties 
or duplicate keyboard access keys. 
The result varies depending on the 
locolion o f lhe focus a nd is very 
confusing. • 
F i ~ n•• e 2.13 
Click on each control, in 
seqlLence. to set the Tab/ ndex 
property of the controls 
automatically. 

C
ll 
\
1°Tt:
R 
2 
When you have finished setting the Tab Index for all controls. the white 
numbered boxes change to blue. Select View I Tab Order again to hide the 
sequence numbers or press the Esc key. 1f you make a mistake and 1mnt to 
change the tab order. tum the option off and on again. and start over with 
Tablndex zero again. or you can keep clicking on the control w1til the nwnber 
wraps around to the desired value. 
S(.'Lling th(.' Fo rm's Locatio n on the Sc•·cen 
When your project runs, the fonn appears in the upper-left comer of the screen 
by default. You can set the fom1's screen position by setting the Sta."t Position 
p•·upl'l·ty of the fonn. Figure 2.19 shows your choices for the properly setting. 
To center your form on the user's screen. set the StartPosition property to 
CenterScreen. 
Cn•alin~of TooiT ips 
Proputlt< 
• q X 
Fomtl System.Windows.Forms.fo1r ..... 
5mGropltylo 
~uto 
@§&;;:.p •lc=Ouee~ 
lJ"..lllnUi l 
'Nim:fow~d.,..Jft.LOC4tion 
V.lndC~A's0e1auft8ounds 
Ctr~teJPJrtni: 
~ 
._,w"""l'lnoo=wom"'•au.,..-..,.,,..,orm=a _ _. 
Sbrtf'osition 
OdaMlMCS the pe»~ion o( 4 form 
~Jtflf"rt oppcon. 
If you are a Windows user. you probably appreciate and rely on TooiTips. 
those small labels that pop up when you pause your mouse pointer over a tool-
bar button or control. You can easily add Tool Tips to your projects by adding a 
TooiTip componc>nl lo a fom1. After you add the component to your form. 
each of the form's controls has a new property: TooiTip on Tool'l'ipl. assum-
ing that you keep the default name. TooiTipL for the control. 
To define TooiTips. select the ToolTip tool from the toolbox (Figure 2.20) 
and click anywhere on the form or double-click the TooiTip tool in the toolbox. 
The new control appears in the component tray that opens at the bottom of the 
Form Designer {Figure 2.21). The component tray holds controls that do not 
have a visual representation at rw1 time. such as the PrintForm control that you 
used in Chapter l. 
I ~ 
ToofTip I 
81 
b21iil #l 
To set the tab order for o group of 
controls, liC$1 set the Toblndex prop-
erty for the group box and then set 
the Tablndex for controls inside the 
group. • 
F i g ur e 2. 1 9 
Set the StartPo!ition property 
of the form to CenterScreen 
to make the form appear in the 
cenl<!r of the users screen when 
the program runs. 
F i g ur e 
2 . 2 0 
Add a Tooffip component to 
yoUT form: ea.ch of the form's 
controls willluwe a new property 
to hold the text of the Tool Tip. 

82 
\ .' 
S 
U 
A 
I, 
C 
User Interface Design 
Forrol.vb JDe;ign]' X 
~roe 
ftione 
• 
; ~ 
1oo1Tipt 
After you add the ToolTip component. examine the properties list for other 
controls on the f01m. such as buttons, text boxes. labels. radio buttons. check 
boxes. and even the form itself. Each has a new ToolTip on ToolTipl property. 
Try this example: Add a button to any fonn and add a ToolTip component. 
01ange the button's Text prope11y to Exit and set its TooiTip on ToolTipl prop-
eity to Close and Exit the program. Now run the project. point to the Exit button, 
and pause; the ToolTip will appear (Figure 2.22). 
-
ojil Keyboard ex Moose 
I = l!i21 I~ 
t!_crne 
£hone 
J 
I 
~ 
DD 
I Close and fXittt~€ ~ 
IJ 
You also can add multiline ToolTips. In the Tool'fip on Tool'fipl property. click 
the drop-down arrow. 'fl1is drops do>m a white editing box in which you enter the 
text of the ToolTip. Type the first line and press Enter to create a second line; press 
Ctrl + Enter to accept the text (or click somewhere outside the Propmty window). 
You can modify the appearance of a ToolTip by setting properties of the 
ToolTip component. Select the TooiTip component in the component tray and try 
changing tl1e Back Color and ForeColor properties. You also can set the Is Balloon 
properly to True for a different appearance and include an icon in the ToolTips 
l"i~ur e 2.21 
The new ToolTip component 
goes in the component tray at 
the bottom of the Form 
Designer window. 
Figure 2.2:t 
Use the Too/Tip on ToolTipl 
property to define a ToolT'tp. 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
Select Picture to Display 
® Sunset 
6 Water 
by selecting an icon for the ToolTiplcon property (Figure 2.23). Once you set 
properties for a ToolTip component. they apply to all Too\Tips displayed with 
that component. If you want to create a variety of appearances. the best ap-
proach is to create multiple ToolTip components, giving each a unique name. 
For example. you might create three ToolTip components. in which case you 
would have properties for ToolTip on ToolTipL ToolTip on Too1Tip2. and 
TooiTip on Too1Tip3 for the form and each control. 
Coding for the Controls 
You already know how to set initial properties for controls at design time. You 
also may want to set some properties in code. as your project executes. You can 
clear out the contents of text boxes and labels. reset the focus (the active con-
trol), change the color of text. or change the text in a Too !Tip. 
Cleas·ing Te xl Bon's and Labl'ls 
You can clear out the contents of a text box or label by setting the property to an 
empty su·ing. Use"" (no space between the hvo quotation marks). This empty 
string is also called a null string or zero-length string. You also can clear out a 
text box using the Clear method or setting the Text property to String. Empty. 
Note that the Clear method works for text boxes but not for labels. 
Examples 
' Clear the contents of text boxes and labels. 
NameTextBox.Text = "" 
MessageLabel.Text = 
DataTextBox.Clear() 
MessageLabel.Text = St ring .Empty 
Fi~ttr e 2 . 23 
A Too/Tip with properties 
modified for lsBalloon, 
Tool.Tiplcon, BackColor. and 
ForeColor. 
83 

84 
v 
S 
l l 
,\ 
I. 
C 
User Interface Design 
Reselling the Focus 
As your program runs. you want the insertion point to appear in the text box 
where the user is expected to type. The focus should therefore begin in the first 
text box. But what about later? If you clear the form's text boxes. you should re-
set the focus to the first text box. TI1e Focus method handles this situation. 
Remember. the convention is Object. Method. so the statement to set the im;er-
tion point in the text box called NameTextBox is as follows: 
' Make the insertion point appear in this text box. 
NameTextBox.Focus() 
Note: You cannot set the focus to a control that has been disabled. See 
"Disabling Controls" later in this chapter. 
SeLLing thf' Checked Pt·o pet·ty of Radio Bullo us 
and Check Boxes 
Of course, the purpose of radio buttons and check boxes is to allow the user to 
make selections. However. at times you need to select or deselect a control in 
code. You can select or deselect radio buttons and check boxes at design time 
(to set initial status) or at run time (to respond to an event). 
To make a radio button or check box appear selected initially. set its 
Checked property to True in the Properties ~tindow. In code, assign True to its 
Checked property: 
' Make button selected. 
RedRadioButton. Checked = True 
· Make check box checked . 
DisplayCheckBox.Checked = True 
' Make check box unchecked. 
DisplayCheckBox.Checked = False 
At times. you need to reset the selected radio button at run time, usually 
for a second request. You only need to set the Checked property to True for 
one button of the group: the rest of the buttons in the group will set to False 
automatically. Recall that only one radio button of a group can be selected at 
one time. 
SeLLing Visibility at Ruu TimE' 
You can set the visibility of a control at run time. 
' Make label invisible. 
MessageLabel.Visible = False 
You may want the visibility of a control to depend on the selection a user 
makes in a check box or radio button. This statement makes the visibility 

C 
II 
A 
1• 
'I' 
" 
ll 
match the check box: When the check box is checked (Checked = True). the 
label is visible (Visible= True). 
' Make the visibility of the label match the setting in the check box . 
MessageLabel.Visible - DisplayCheckBox. Checked 
Disabling Cont1·ols 
The Enabled Jn·opeJ'ty of a control determines whether the control is available 
or "grayed-out." The Enabled property for controls is set to True by default, but 
you can change the value either at design time or run time. You might want to 
disable a button or other control initially and enable it in cocle, depending on an 
action of the user. lf you disable a button control (Enabled = False) at design 
time. you can use the following code to enable the button at run time. 
DisplayButton.Enabled = True 
When you have a choice to disable or hide a control. it's usually best to dis-
able it. Having a control disabled is more understandable to a user than having 
it disappear. 
To disable radio buttons. consider disabling the group box holding the 
buttons. rather than the buttons themselves. Disabling the group box grays the 
entire group. 
OepartmentGroupBox .Enabled = False 
Note: Even though a control has its TabStop property set to True and its 
Tablndex is in the proper order. you cannot tab to a control that has been disabled. 
Fl't•<lhack 2.2 
• 
l. Write the Basic statements to clear the text box called CompanyTextBox 
and reset the insertion point into the box. 
2. Write the Basic statements to clear the label called CustomerLabel and 
place the insertion point into a text box called OrderTextBox. 
3. What will be the effect of each of these Basic statements? 
(a) PrintCheckBox.Checked = True 
(b) ColorRadioButton.Checked = True 
(c) DrawingPictureBox.Visible = False 
(d) Locationlabel.Borderstyle = Borderstyle.Fixed3D 
(e) Citylabel.Text = CityTextBox.Text 
(f) RedRadioButton. Enabled = True 
Selling P 1·ope •·ties Based on Use•· Actio ns 
Often you need to change the Enabled or Visible property of a control based on 
an action of the user. For example. you may have controls that are disabled or 
invisible until the user signs in. In the following example. when the user logs in 
and clicks the Sign In button, several controls become visible. others become 
invisible. and a group box of radio buttons is enabled: 
85 

86 
l ' 
Private Sub SigninButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles SigninButton.Click 
C 
User Interface Design 
· Set up the screen to display the department promotions and the 
' welcome message. Hide the sign-in controls. 
' Hide and disable the sign-in controls. 
CheckinGroupBox .Visible =·False 
SigninButton .Enabled = False 
' Enable the group of radio buttons. 
DepartmentGroupBox .Enabled = True 
' Show the promotions controls. 
PromotionTextBox.Visible = True 
ImageVisibleCheckBox.Visible = True 
WelcomeRichTextBox .Visible = True 
'Display the welcome message. 
WelcomeRichTextBox .Text = "Welcome Member#" & MemberiDMaskedTextBox .Text & 
Environment .Newline & NameTextBox.Text 
End Sub 
Changing the Colo r of Text 
You can change the color of text by changing the ForeColor property of a 
control. Actually. most controls have a ForeColor and a Back Color property. 
The ForeColor property changes the color of the text; the Back Color property 
determines the color around the text. 
TJ1c Colot• Constants 
VisuaJ Basic provides an easy way to specify a large number of colors. These 
colot· constants are in the Color class. If you type the keyword Color and a 
period in the editor. you can see a full list of colors. Some of the colors are 
listed below. 
Color.AliceBlue 
Color.AntiqueWhite 
Color.Bisque 
Color.BlanchedAlmond 
Color.Blue 
Examples 
NameTextBox.ForeColor = Color.Red 
Messagelabel. ForeColor = Color .White 
Using Ra{lio Buuons fot· Selecting Colot·s 
Here is a small example (Figure 2.24) that demonstrates using two groups of 
radio buttons to change the color of the form (the form's Back Color property) 
and the color of the text (the fonn's ForeColor property). The radio buttons in 
each group box operate together. independently of those in t11e other group box. 

C 
II 
A 
1• 
'I' 
" 
ll 
a!t Change Colors 
One group of -
---:> Select Fonn Color 
radio buttons 
@ ~eige 
B B!ue 
B Yellow 
e> §ray 
Another group _ 
:...c,. Select Text Color 
of radio buttons 
@ Blac!s. 
0 'M!~e 
Ch02Colors 
Bradley/Millspaugh 
June 2010 
The radio buttons in each 
group box fimctron 
independently of the other 
group. Each button changes a 
prope1ty of the form: 
BackColor changes the 
background of the fornt itself 
and ForeColor changes the 
color of the text on the fomt. 
' Project : 
'Programmer: 
'Date : 
'Description: 
Demonstrate changing a form 's background and foreground 
colors using two groups of radio buttons. 
Public Class ColorsForm 
Private Sub BeigeRadioButton_CheckedChanged(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles BeigeRadioButton.CheckedChanged 
· Set the form color to beige. 
Me.BackColor = Color.Beige 
End Sub 
Private Sub BlueRadioButton_CheckedChanged(ByVal sender As system.Object, 
ByVal e As System.EventArgs) Handles BlueRadioButton .CheckedChanged 
' Set the form color to blue. 
Me.BackColor 
Color.Blue 
End Sub 
Private Sub YellowRadioButton_CheckedChanged(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles YellowRadioButton .CheckedChanged 
' Set the form color to yellow. 
Me.BackColor = Color.Yellow 
End Sub 
Private Sub GrayRadioButton_CheckedChanged(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles GrayRadioButton .CheckedChanged 
· Set the form color to gray. 
Me.BackColor = Color.Gray 
End Sub 
87 

88 
v 
S 
l l 
,\ 
I. 
C 
User Interface Design 
Private Sub BlackRadioButton_CheckedChanged(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles BlackRadioButton .CheckedChanged 
' Set the text color to black. 
Me.ForeColor = Color.Black 
End Sub 
Private Sub WhiteRadioButton_CheckedChanged(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles WhiteRadioButton .CheckedChanged 
' Set the text color to white. 
Me.ForeColor = Color.White 
End Sub 
End Class 
Changing Muhiplc P rope1·ties of a Contt·ol 
By now you can see that there are times when you will want to change several 
properties of a single control. In early versions of Visual Basic. you had to write 
out the entire name (Object.Property) for each statement. 
TitleTextBox.Visible = True 
TitleTextBox.ForeColor = Color.White 
TitleTextBox.Focus() 
Of course. you can still specify the statements this way. but Visual Basic 
provides a better way: the With and End With statements. 
Tlu• With aml End With St.·uemeuts-Ceueral Fol'm 
r~f With ObjectName 
~ ~ 
' Statement(s) 
e., 
End With 
You specify an object name in the With statement. All subsequent statements 
w1til the End With relate to that object. 
Tbe Wilb and End With State mem,;-Exruuple 
~P--------------------------------------------------. 
)'! 
"' 5 
"C ;-
With Ti tleTextBox 
.Visible = True 
.ForeColor = Color.White 
.Focus() 
End With 
The statements beginning with With and ending with End Wi th are called a 
With block. TI1e statements inside the block are indented for readability. Al-
though indentation is not required by VB. it is required by good programming 
practice and aids in readability. 

C
II
,\I>
'I'
I'
R 
The real advantage of using the With statement. rather than spelling out 
the object for each statement. is that With is more efficient. Your Visual Basic 
projects will nm a little faster if you use With. On a large. complicated project. 
the savings can be significant. 
Concatenating Text 
At times you need to join strings of text. For example, you may want to join a 
literal and a property. You can "tack" one string of characters to the end of an-
other in the process called conccuenation. Use an ampersand(&). preceded 
and followed by a space. between the two strings. 
Examples 
89 
Messagelabel. Text = "Your name is: " & NameTextBox. Text 
NameAndAddressLabel. Text = NameTextBox. Text & " " & AddressTextBox. Text 
Continuing Long P•·ogL·am Lines 
Basic interprets the code on one line as one statement. You can type very long 
lines in the Editor window; the window scrolls sideways to allow you to keep 
typing. However, this method is inconvenient; it isn't easy to see the ends of the 
long lines. 
New to Visual Basic 2010, if you break a line in an acceptable location. 
you can use implicit line continuation. You also can continue to use explicit 
line continuation characters as in previous versions of Visual Basic. 
Implicit Line Continuation 
Visual Basic 10 allows you to just press Enter to split a single statement into 
multiple lines as long as you follow certain rules. For the Basic statements you 
have learned so far. you can break a line 
l. After a comma. 
2. Either after an opening parenthesis or before a closing parenthesis. 
3. After a concatenation operator(&). 
4. After the equal sign(=) in an assignment statement. 
You can find a complete list of rules under the Help topic "Statements in 
Visual Basic". 
As an example. you can split an assignment statement following the equal 
sign but not before it: 
Legal 
PromotionTextBox.Text 
"Get a free MP3 download with the purchase of a CD" 
Greetingslabel. Text = "Greetings " & NameTextBox. Text & "· " & 
"You have been selected to win a free prize. " & 
"Just send us $100 for postage and handling. " 
lvliil ::J 
Although in some situations Basic a~ 
lows concatenation with the + oper· 
otor, the practice is not advised. 
Depending on the contents of the 
text box, the compiler may interpret 
the + operator as on addition oper· 
otor rather tho n o concatenation op-
erator, giving unpredictable results 
or on error. • 

90 
\ 
S 
l 
\ 
I. 
IC 
\ 
S 
Illegal 
PromotionTextBox.Text 
= 'Get a free MP3 download with the purchase of a CD' 
GreetingsLabel. Text = "Greetings ' & NameTextBox. Text & ' · 
& 'You have been selected to win a free prize. • 
& 'Just send us $100 for postage and handling." 
EJq>lit'it Line Continuation 
( ' 
U.,.. lnterfoce De•ign 
When a Basic statement becomes too long for one line. you can use a Line-
continuation l'hm·actet·. Type a space and an underscore. press Enter. and 
continue the statement on the nextliJJe. Jt is OK to indent the continued lines. 
The only restriction is that the line-continuation chamcter must appear 
between elements: you cannot place a continuation in the middle of a literal or 
split the name of an object or property. 
Example 
Private Sub BlackRadioButton_CheckedChanged(ByVal sender 
As System.Object, ByVal e As System.EventArgs) 
Handles BlackRadioButton.CheckedChanged 
Your Hands-On Programming Example --------
Create a fonn that allows members to log in and view special promotions for 
R 'n R. The member name is entered in a text box. and the member I D is entered 
in a masked text box that allows five numeric digits. Include three buttons: one 
for Sign ln. one for Print, and one for Exit. Set the AcceptButton to the Sign In 
button. and use the Exit bntlon for the Cancel Button. Include keyboard short-
cuts as needed. 
Use a group box of radio buttons for the departments and another group box 
to visually separate the data entry boxes (the text box and masked text box). 
A check box allows the user to choose whether an image should display for 
the selected department. You 1vill need an image to display for each deprut-
menl. You can use any images that: you have available. find them on the Web, 
or use images from the text Web site. 
Wben the program begins. the Department group box should be disabled 
and visible. and the controls for the image. promotion. and check box should be 
invisible. When the user clicks on the Sign In button. the data entJy boxes and 
labels should disappear. and the promotions text box. the department image. 
ru1d the check box should appear. Display the user name and member m con-
catenated in a rich text box. (Hint: If you place the data entry controls in a 
group box. you can simply set the group box visibility to False.) 
Add TooiTips as appropriate. The TooiTip for the Member ID text box 
should say: "Your 5 digit member nwnber." 
Pl:mui.JI!: the Project 
Sketch a form (Figure 2.25). which your users sign off as meeting their needs. 

C
ll
i\
1°T
E
il 
91 
A planning sketch if'theformfor the hands-on programming txample. 
MalnFonn ----~------------------------------------------------------, 
DepartmentGroupBox 
Book6R.9dtoButton 
Mu6lcR.9dloButton 
Pertodtcai6R.9dtoButton 
CoffeeBa rRsdtoButton 
DepartmentPictureBox 
PromotlonT t:XtBox 
Music 
Pertoalcal6 
0 
~offee Bar 
r ------- --- -, 
I 
I 
I 
I 
I 
I 
---,~f- ChecklnGroupBcx 
,....----- ---, 
NameTextBox 
L _ _j+----t--1:-- MemberiDMa61<edTextBox 
WelcomeRichTextBox 
SlgnlnButton 
PrtntButton 
ExltButton 
L _________________ :::::=:=:=:=:t-- lmageV161171eCheckBox 
Note: AILhough Lhis step may seem unnecessary. having your users sign off 
is standard programming practice and documents that your users have been in-
volved and have approved the design. 
l~lan the Obj .. rts and l0ropel"lie" Plan the property settin&S for the form and for each control. 
Ohject 
Property 
Set lin~ 
Main Form 
N ame 
MainFonn 
Text 
R 'n R--For Heading and Refreshment" 
Accept Button 
SignlnButton 
CaneelButton 
ExitButton 
StortPo•ition 
CenterScrecn 
OepartmentGroupBox 
Name 
OepartmentGroupBox 
Text 
Department 
Books RadioButton 
Name 
BoohRadioButton 
Text 
&Books 
MusicHadioBullon 
Name 
Musi~RadioButton 
Te:<l 
&MW!io 
Periodical•RadioButton 
Name 
Periodic:t1lsRadioButton 
Text 
Perio&dicnl• 
CoffeeBarRadioButton 
Name 
CoffeellarRadioButton 
Text 
&Coffee Bar 
SignlnButton 
Name 
SignlnButton 
Text 
&Sign In 

92 
,. 
s 
l 
\ 
L 
It 
\ 
s 
t: u,.,, lntoface De>ign 
Ohjeet 
Properly 
Sellinj: 
PrintButton 
Name 
PrintButlaJ 
Texl 
&Print 
ExitButton 
Name 
Exit Button 
Text 
E&xit 
0Ppl'llr1mP_ntPirll lrf'lBn~ 
Nttmf• 
0Pp:u1mP.ntPirt llr~Rm: 
Visible 
F'aloe 
SizeMode 
Stretch! mage 
I mage VisibleChcckBox 
Name 
Image VisibleChcckBox 
Text 
Image &Visible 
Visible 
False 
PromotionTe xtBox 
Name 
Promotion TextBox 
Text 
(blank) 
ChecL:lnCroupBox 
Name 
ChecklnCroupBox 
Text 
Elite Member Check In 
Labell 
Text 
&Name 
Label2 
Text 
Member&lD 
NameTe~tBox 
Name 
NameTextBox 
Te.,t 
{blank) 
MemberlDMaskedTextBox 
Name 
!llemberiDMaskedTexLBox 
Text 
{blank) 
Mask 
00000 
Wclcon1e1UchTextBox 
Name 
WelcomeRichTextBox 
Texl 
{blank) 
PrintF'onnl 
Name 
Printl<"onnl 
Tool'lipl 
Name 
TooiTirl 
Plan the Event Procedures You will need event procedures for each button, 
radio button. and check box. 
Pro rc d m·e 
BooksRadioButton_CheckedChanged 
MusicRadioButlon_CheckedChanged 
Actions-P~udoeode 
Display "Buy lwo. gel tbe second one for haU 
price" and the books image. 
Display ''Get a free M.P3 download K'ith purchase 
of a CO'' and the mus.ic image. 

C
ll
i\
11
T
ER 
2 
Procedur-e 
PeriodicalsRadioButton_Checkec:IChanged 
CoffeeBarRad;oButton_Checke<IChanged 
1 mage VisibleCheckBox_ Checked Changed 
SignlnBullon_Ciick 
PrintButton_Click 
Exit Button_ Click 
Actions-P~udocode 
Display ··Elite members receive 10% ofT 
every purchase'!'! and the periodicals image. 
Di.play "'Celebrate the season with 20% off 
specialty drinka" and the coffee image. 
Set the visibility of the department image. 
Hide the check-in group box. 
Disable the sign-in button. 
Enable the Department group box. 
Make the check box. promotion text bo.~. 
and the "'~I come text Lox vi•ible. 
Concatenate the name and member ID 
and display them in the welcome rich 
text bo>. 
Set the print octioo lo Print Preview. 
Call the Print method. 
End tho project. 
Write the Project f ollow the sketch in figure 2.25to create the fonn. Figure 2.26 
shows the completed form. 
• 
Set the properties of each object. as you have planned. Make sure to set the 
tab order of the controls. 
• 
Working from the pseudocode. M'file each event procedure. 
• 
When you complete the code. thoroughly test the project. 
•. R 'n R--For Readong and Refreshment 
.') Music 
·:; Periogicals 
:;, c.;:o~~ .. e .. 
:~- -~-------------~-1 
i 
Site Member Check 1-1 
Meoroer!D 
~ ... _
, , .........
.. , 
lEJ image~ i 
Fl~ture 2 . 26 
The form for the hand.-on. 
programming example. 
93 

94 
S 
l 
\ 
L 
n 
' 
" 
C 
U.er Interf ace O.•ign 
The P1·ujt'N Cotliug Sulutluu 
'Project: 
'Programmer: 
'Date: 
'Description: 
Ch02HandsOn 
Bradley/Millspaugh 
June 2010 
Allow the user to sign in and display current sales promotion. 
Public Class MainForm 
Private Sub BooksRadioButton_CheckedChanged(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles BooksRadioButton .CheckedChanged 
' Display the image and promotion for the Books department . 
DepartmentPictureBox .Image = My.Resources.Book 
PromotionTextBox .Text = "Buy two, get the second one for half price ." 
End Sub 
Private Sub CoffeeBarRadioButton_ChecKedChanged(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles COffeeBarRadioButton.CheckedChanged 
' Display the image and promotion for the Coffee Bar. 
DepartmentPictureBox.Image = My.Resources.Coffee 
PromotionTextBox.Text = 
"Celebrate the season with 20% off specialty drinks. • 
End Sub 
Private Sub MusicRadioButton_CheckedChanged(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles MusicRadioButton.ChecKedChanged 
' Display the image and promotion for the Music department. 
DepartmentPictureBox .Image = My.Resources.Music 
PromotionTextBox .Text ="Get a free MP3 download With purchase of a CD. ' 
End Sub 
Private Sub PeriodicalsRadioButton_CheckedChanged(ByVal sender As Object, 
ByVal e As system.EventArgs) Handles PeriodicalsRadioButton.CheckedChanged 
' Display the image and promotion for the Periodicals department . 
DepartmentPictureBox.Image = My.Resources .Periodicals 
PromotionTextBox.Text ="Elite members receive 10' off every purchase." 
End Sub 
Private Sub ImageVisibleCheckBox_CheckedChanged(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ImageVisibleCheckBox.CheckedChanged 
' Set the visibility of the department image. 
DepartmentPictureBox.Visible = ImageVisibleCheckBox .Checked 
End Sub 
Private Sub SigninButton_Click(ByVal sender ~s System.Object, 
ByVal e As System.EventArgs) Handles SigninButton.Click 
' set up the screen to display the department promotions and the 
' welcome message. Hide the sign-in controls. 
' Hide and disable the sign-in controls . 
ChecklnGroupBox.Visible = False 
SigninButton.Enabled = False 
' Enable the group of radio buttons. 
DepartmentGroupBox .Enabled = True 

C IIAI•T•:
n 
' Show the promotions controls. 
PromotionTextBox .Visible =True 
ImageVisibleCheckBox.Visible =True 
WelcomeRichTextBox.Visible = True 
' Display the welcome message. 
WelcomeRichTextBox.Text = "Welcome Member#" & MemberiOMaskedTextBox.rext & 
Environment.NewLine & NameTextsox.Taxt 
End Sub 
Private Sub PrintButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles PrintButton.Click 
' Print the form in the Print Preview window. 
PrintForm1.PrintAction = Printing.PrintAction.PrintToPreview 
PrintForm1 .Print() 
End Sub 
Private Sub ExitButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitButton .Click 
' End the program. 
Me.Close() 
End Sub 
End Class 
Good Programming 1-Iabits 
I 
l. Always test the tab order on your forms. Fix it if necessary by changing 
the Tab Index properties ofthe controls. 
2. Provide visual separation for input fields and output fields and always 
make it clear to the user which are which. 
3. Make sure that your forms can be navigated and entered from the key-
board. Always set an Accept button (AcceptBullon prope11y) for every 
fonn. 
4. To make a label maintain its size regardless of the value of the Text 
property, set AutoSize to False. 
5. 'lb make the text in a text box right justified or centered. set the 
TextA!ign property. 
6. You can use the Checked property of a check box to set other properties 
that must be True or False. 
l. Text boxes are used primarily for user input. The Text property holds the 
value input by tl1e user. You also can assign a literal to the Text property 
during design time or run lime. 
2. A MaskedTextBox has a Mask property that allows you to specify the data 
type and format of the input data. 
3. A RichTextBox is a specialized text box that aU01rs additional formatting of 
tl1e text. 
95 

96 
\ 
s 
l l 
.\ 
l 
u 
\ 
s 
C u- Interface De.ign 
4. Both text boxes and rich text boxes have Mulliline and WordWrap proper-
ties that can allow a long Text property to wrap to multiple lines. The text 
K'ill wrap to the width of the control. which must be tall enough to display 
multiple lines. 
5. Group boxes are used as containers f·lr other controls and to group like 
items on a form. 
6. Check boxes and radio buttons allow the user to make choices . . In a group 
of radio buttons. only one can be selected: but in a group of check boxes. 
any number of the boxes may be selected. 
7. The current state of check boxes and radio buttons is stored in the Checked 
property: the Checked Changed event occurs when the user clicks on one of 
the controls. 
8. Picture box controls hold a graphic. which is assigned to the lmage prop-
erty. Set the Size Mode property to Stretc:hlmage to make the image resize to 
fit the control. 
9. The Resources tab of the Project Designer can be used to add. remove. and 
rename images in the project Resources folder. 
10. Forms and controls can display images from the project's resources. Use 
the form's Background Image property and a control's Image property. 
11. The BorderStyle property of many controls can be set to None. FlxedSingle. 
or Fixed3D to determine whether the control appears flat or three-
dimensional. 
12. To create a line on a fom1. you can use the UneShape control included in 
the Visual Basic PowerPacks or use a Label control. 
13. You can select multiple controls and treat them as a group. including 
setting common properties at once. moving them. or aligning them. 
14. Make your programs easier to use by following Windows standard guide-
lines for colors. control size and placement. acress keys. default and Cancel 
buttons. and tab order. 
15. Define keyboard access keys by including an ampersand in the Text 
property of buttons. radio buttons. check boxes. and labels. 
16. Set the Accept Button property of the form to the desired bullon so that the 
user can press Enter to select the button.lf you set the form's CanceiButton 
property to a button. that button will be selected ... -hen the user presses the 
Esc key. 
17. The focus moves from control to control as the user presses the Tab key. 
The sequence for tabbing is determined by the Tablndex prope~ties of the 
controls. The Tab key stops only on controls that have their TabStop prop-
erty set to True and are enabled. 
18. Set the fonn's location on the screen by selling the StmtPosition prope1ty. 
19. Add a ToolTip control to a form and then set the ToolTip on Too1Tip1 
properly of a control to make a ToolTip appear when the user pauses the 
mouse pointer over the control. You can set properties of the ToolTip 
component to modify the background. foreground. shape. and an icon for 
the ToolTips. 
20. Clear the Text properly of a text box or a lalJel by selling il to an empty 
string. Text boxes also can be cleared using the Clear method. 
21. To make a control have the focus, which makes it the active control. use 
tJ1e Focus method. Using the Focus method of a text box makes the 
insertion point appear in the text box. You cannot set the focus to a dis-
abled control. 

C
ll
i\1'1'E
H 
22. You can set the Checked property of a radio button or check box at nm 
time and also set the Visible property of controls in code. 
23. Controls can be disabled by selling the Enabled property to False. 
24. Change the color of text in a control by changing ill; F'oreColor property. 
25. You can use the color constants to change colors during run time. 
26. The With and End With statements provide an easy way to refer to an 
object multiple limes without repeating the object's name. 
27. Joining two strings of text is called conca~enation and is accomplished by 
placing an ampersand between the two elements. (A space must precede 
and follow the ampersand.) 
28. Use a space and an underscore to continue a long statement on another line. 
The underscore is not needed if the line breaks after a comma. assignment 
operator. or concatenation operator as well as after an opening parenthesis 
or before a closing parenthesis. 
Accept Button property 
79 
access key 78 
BorderStyle property 
74 
Cancel Button property 
79 
check box 69 
Checked property 69 
color constant 86 
concatenation 89 
container 68 
empty string 83 
Enabled property 85 
focus 
79 
Focus method 84 
ForeColor property 86 
GroupBox control 68 
Image property 69 
implicit line continuation 89 
line-continuation character 90 
MaskedTextBox 66 
Multiline property 67 
NewLine character 68 
PictureBox control 
69 
Project Designer 72 
radio button 69 
RichTex.tBox 
67 
Select Resource dialog box 69 
SizeMode property 
71 
Start Position property 81 
Stretch/mage 
71 
Tablndex property 
79 
TabStop property 79 
text box 65 
Text property 6.5 
TextAlign property 65 
ToolTip 81 
TooiTip component 
81 
Tool Tip on TooiTipl property 81 
Visible property 
71 
Wi ttl and End Ni th statements 88 
With block 
8fJ 
WordWrap property 67 
1. You can display program output in a text box or a label. When should you 
use a text box? \\'hen is a label appropriate? 
2. What would be the advantage of using a masked text box rather than a text 
box? 
3. When would it be appropriate to use a rich text box instead of a text box? 
97 

98 
\ 
s 
l 
.\ 
I. 
u .\ 
s 
l ' 
U.er lmerface De.ign 
4. What properties of a Text Box and llichTextBox must be set to allow a long 
Text property to wrap to multiple lines? 
5. How does the behavior of radio buttons differ from the behavior of check 
boxes? 
6. If you want two groups of radio buttons on a form. how can you make the 
groups operate independently? 
7. Explain how to make a graphic appear in a picture box control. 
8. Describe how to select several labels and set them aU to 12-poi.nt font size 
at once. 
9. What is the purpose of keyboard access keys? How can you define them in 
your project? How do they operate at run time? 
10. Explain the purpose of the AcceptButton and Cru1ce!Button properties of 
the form. Give an example of a good use for each. 
11 . What is a TooiTip? How can you make a Too!Tip appelli? 
12. What is the focus? How can you control which object has the focus? 
13. Assume you are testing your project ru1d don't like the initial position of the 
insertion point. Explain how to make the insertion point appear in a differ-
ent text box when the program begins. 
14. During program execution. you want to return the insertion point to a text 
box called Address Text Box. What Basic statement will you use to make that 
happen? 
15. What Basic statements will clear the current contents of a text box and a 
label? 
16. How are the With and End With statements used? Give an example. 
17. What is concatenation and when would it be useful? 
18. Explain how to continue a very long Basic statement onto another line. 
l.nclude discussion of an implicit line continuation. 
Graphics Files: You can find the icon files in the StudentData\Graphics folder 
on the text Web site (www.mhhe.com/VB2010). 
2.1 Create a project that K·ill switch a light bulb on and off. using the user 
interface shoK,l below as a guide. 
Form.: Include a text box for the user to enter his or her name. Create two 
picture boxes. one on top of the other. Only one will be visible at a lime. 
Use radio buttons to select the color of the text in tl1e label beneath the 
light bulb picture box. 
Include keyboard access keys for the radio buttons and the buttons. 
Make the Exit button the Cancel button. Create ToolTips for both light 
bulb picture boxes: make the TooiTips say "Click here lo turn the light 
on or off." 
Project Operation: 'lne user will enter a name and clic:k a radio button for 
the color (not necessarily in that order). "\l'hen the light bulb is clicked. 
display the other picture box and change the message below il'. Concate-
nate the user name to the end of the message. 

C
ll
i\
I'T
E
IC 
2 
The hm icon illes are LightOfT.ico and LightOn.ioo and are found in the 
following folder: 
Graphics\Microsofticons 
(See the note at the top of the exercises for graphic file locations.) 
Coding: In the click event procedure for each Color radio button, change 
the color of the message below the light bulb. 
O"OOMilcdor 
ii ;:Q.~} 
o-.oow1 cdot 
9)~~~~ 
J Etue 
~ E.ed 
1 CO= 
2.2 Write a project to display the flags of four different countries. depend-
ing on the setting of the radio buttons. In addition. display the name 
of the country in the large label under the flag picture box. The user 
also can choose to display or hjde the form's title. the country name, 
and the name of the programmer. Use check boxes for the display/hide 
choices. 
Include keyboard access keys for all radio buttons, check boxes. and 
buttons. Make the Exit button the Cancel button. Include TooiTips. 
You can choose the countries and flags. 
Hints: \Vhen a project begins running. the focus goes to the control 
with the lowest Tablndex. Because that control likely is a radio button, 
one button will appear selected. You must either display the first flag to 
match the radio button or make the focus begin in 11 different control. You 
might consider beginning the focus on the button. 
Set the Visible property of a control to the Checked property of the cor-
responding check box. That 11·ay when the check box is selected. the con-
trol becomes visible. 
Because all three selectable controls ~till be visible when the project 
begins. set the Checked property of the three check boxes to True at 
design time. Set the flag picture box to Visible = False so it won't 
appear at startup. (lf you plan to display the picture box at startup. its 
Visible property must be set to True.) 
99 

100 
\ ' 
s 
tt 
\ 
I. 
u 
\ 
s 
Make sum to set the SizeMode property of the picture box control to 
Stretch/mage. 
7-f Flag Viewer 
Flag v;ewer 
COU'Itly 
UrWed Stales 
~· Jaoan 
~. Mexico 
I 
~rwned by: 1\. Pr>g~ [ j~ . J 
Display 
GO Tile 
ttl CqurtJy Home 
I'll Procra!Tiller 
2.3 
W1ite a project to display a weatJ1er report. 1l1e user can choose one of the 
radio buttons and display an icon and a message. The message should 
give tbe weather report in M·ords and include the person's name (taken 
from the text box at the top of the form). For example. if the user chooses 
the Sunny button. you might display "lt looks like sunny weather today. 
John" (asswning tJ1at tJ1e user entered John in the text box). 
Include keyboard access keys for the button and radio buttons. Make 
the Exit button the Cancel button and include ToolTips. 
1l1e four icons displayed are called Cloud.ico. Rain.ico. Sno11·.ico. and 
SWJ.ico. (See the note at the top of the exercises for graphic fie locations.) 
' 
Weather Report 
= 
_§_~ 
----------------------~ 
.f!rteryourname here: 
( 
Qoudy 
~ed 
by: A. Progranvner 
2.4 
Write a project that will input the user name and display a message of the 
day in a label. along 1~i th the user's name. lnclude bullons (with keyboard 

C
ll
i\
l•l'E
IC 
2 
access keys) for Display. Clear. and Exit. Make the !Asplay button the 
Accept button and the Clear button the Cancel button. Include Tool Tips 
where appropriate. 
Include a group of radio buttons for users to select the color of themes-
sage. Give them a choice of four different colors. 
Make your form display a changeable picture box. You can use the 
happy face icon files or any other images you have available (FaceOl.ico. 
Face02.ico. and Face03.ico). (See the note at the top of the exercises for 
graphic me locations.) 
You may choose to have only one message of the day. or you can have 
several that the user can select with radio buttons. You might want to 
choose messages that go with the different face icons. 
2.5 Create a project that allows the user to input information and then display 
the lines of output for a mailing label. 
Remember that fields to be input by the user require text boxes. but 
display tl1e output in labels. Use text boxes for tl1c first name. last name. 
street address. city. stale. and ZIP code; give meaningful names to the text 
boxes and set the initial Text properties to blank. Add appropriate labels 
to each text box to tell the user which data will be entered into each box 
and also provide TooiTips. 
Use buttons for Display Label Info. Clear. and Exit. Make the Display 
button the Accept button and the Clear button the Cancel button. 
Use three labels for displaying the information for Line 1. Line 2. and 
Line 3. 
Use a masked text box for the ZIP code. 
A click event on the !Asplay Label Info button will display the follm~ing: 
Line 1-The first name and last name concatenated together with a 
space between. 
Line 2-The street address. 
Line 3- The city. stale. and ZIP code concatenated together. (Make sure 
to concatenate a comma and a space behveen the city and state. using 
"."and hvo spaces between the state and ZIP code.) 
VB !Uall OrtiPr I 
101 
Design and code a project that displays shipping 
information. 
Use w1 appropriate image in a picture box in tl1e 
upper-left corner of the form. 
radio bu!lons for Express and Ground. Make the 
second group box have a Text property of Payment 
Type and include radio but1ons for Charge. COD. and 
Money Order. 
Use text boxes with identifying labels for Catalog 
Code. Page Number. and Part Number. 
Use two groups of radio buttons on the form; en-
close each group in a group box. The first group box 
should have a Text property of Shipping and contain 
Use a check box for New Customer. 
Add buttons for Print. Clear. and Exit. Make the 
Clear button the Cancel button. 
Add Tool Tips as appropriate. 

102 
' 
S 
l 
\ 
L 
G 
A 
S 
4_" 
U.er Interface De>ign 
VB Auto Center 
Modify the project from the Chapter 1 VB Auto Center 
case study. replacing the buttons 1•ith images in pic-
ture boxes. (See "Copy and Move Projects" in Appen-
dix C for help in making a copy of the Chapter 1 
project to use for this project.) Above each picture 
box. place a label that indicates which department or 
commanrl thP. graphic rP.prP.sP.nl.~- A r.l ick on a pir.lltTP. 
box will produce the appropriate information in the 
special notices label. 
Add an image in a picture box that clears the spe-
cial notices label. Include a ToolTip for each picture 
box to help the user understand the purpose of the 
graphic. 
Add radio buttons that wiiJ aU ow the user to view 
the special notices label in different colors. 
Include a check box labeled Hottrs. When the 
check box is selected. a new label will display the 
message "Open 24 Hours--7 days a week'". 
By default. the images are all stored in the Icons 
folder. (See the note at the top of the exercises for 
graphic file locations.) 
DcJ>artnJe ut/Conlflltwd 
(UlA{,f'C ror Picture box 
Auto Salea 
Can~. ico 
Service Center 
Wrench.ico 
Detail Shop 
Water.ico 
Employment Opportunities 
~tAILl2.ico 
Exit 
MSCBOXOl.ico 
\ 'Ideo Bonanza 
Design and code a project that displays the location of 
videos using radio buttons. Use a radio button for each 
of the movie categories and a label to display tl1e aisle 
nwnber. A check box will allow tl1e ttser to display or 
hide a message for members. \'~Then tl1e check box is 
selected. a message stating "All Members Receive a 
10% Discount" will appear. 
Include buttons (with keyboard access keys) for 
Clear and Exit. 'The Clear button should be set as the 
Accept button and the Exit as the Cancel button. 
Place a label on the fom1 in a 24-point font that 
reads "Video Bonanza". Use a line to separate the 
label from the rest of the inted'ace. Lnclude an image 
in a picture box. 
Rodio Bu11on 
Lorntion 
Co~y 
Aisle l 
Drama 
Aisle 2 
Action 
Aisle 3 
Sci-Fi 
Aisle 4 
Horror 
Aisle 5 
\ 1er y Ver y BoardM 
Create a project to display an adveitising screen for 
Very Very Boards. Include the company nan1e. a slo-
gan (use "The very best in boards"' or make up your 
own slogan). and a gmphic image for a logo. You may 
use the graphic included with the text materials 
(Skateboard.gif) or one of you:r o1m. 
Allow the user to select the color for the slogan 
text using radio buttons . AdditionaHy. the user may 
choose to display or hide the company name. the slo-
gan. and the logo. Use check boxes for the display 
options so that the user can select each option 
independently. 

C
II
1\I1
TER 
Include keyboard access keys for the radio but-
tons and the butlon.s. Make the Exit butlon the Cancel 
bullon. Create ToolTips for the company name ("Our 
company name"). the slogan ("Our slogan''). and the 
logo ("Our logo'l 
When the project begins execution. the slogan 
text should be red and the Red radio button selected. 
'll'hen the user selects a new color, change the color of 
the slogan text to match. 
Each of the check boxes must appear selected ini-
tially. since the company name.. slogan. logo. and pro-
grammer name display when the form appears. Each 
lime the lL~er selects or deselects a check box. make 
the corresponding item display or hide. 
Make the form appear in the center of the screen. 
103 
Cool Boards 
I 
The very be.sl1a boa~-
Sbgan(.olor 
{)sol .. 
ij\~ 
~Q>olp«')'l'lcrr.. 
_, Due 
~ So:Jan 
,I 
~ J 

This page intentionally left blank 

u 
A 
p 
T 
E 
R 
Variables, Constants, 
and Calculations 
I . Distinguish between variables. constants. and controls. 
2. Differentiate among the various data types. 
3. Apply naming conventions incorporating standards and indicating the 
data type. 
4. Declare variables and constants. 
G. Select the appropriate scope for a variable. 
G. Convert te.l(l input to numeric values. 
7. Perform calculations using variables and constants. 
8. Convert between numeric data types using implicit and explicit 
conversions. 
9. Round decimal values using the Decimal. Round method. 
Format values for output using the ToString method. 
Use Try /Catch blocks for error handling. 
Display message boxes with error messages. 
Accumulate sums and generate counts. 

106 
v 
S 
l l 
,\ 
I. 
C 
Variables. Comtants. and Calculations 
In this chapter you will learn to do calculations in Visual Basic. You will stm1 
with text values input by the user. convert them to nume1ic values. a11d perlorm 
calculations on them. You will also learn to format the results of your calcula-
tions and display them for the user. 
Although the calculations themselves are quite simple (addition. subtrac-
tion. multiplication, and division). there are some important issues to discuss 
first. You must learn about variables and constants. the various types of data 
used by Visual Basic, and how and where to declare variables and constants. 
Variables are declared differently, depending on where you want to use them 
and how long you need to retain their values. 
The code below is a small preview to show the calculation of the product of 
two text boxes. The first group of statements (the Dims) declares the variables 
and their data types. TI1e second group of statements converts the text box con-
tents to numeric and places the values into the variables. The last line perlorms 
the multiplication and places the result into a variable. TI1e following sections 
of this chapter describe how to set up your code for calculations. 
' Declare the variables. 
Dim auantitylnteger As Integer 
Dim PriceDecimal, ExtendedPriceDecimal As Decimal 
' Convert input text to numeric and assign values to variables. 
auantitylnteger = Integer.Parse(QuantityTextBox.Text) 
PriceDecimal = Decimal.Parse(PriceTextBox.Text) 
' Calculate the product. 
ExtendedPriceDecimal = Quantitylnteger * PriceDecimal 
Data-Variables and Constants 
So far. all data you have used in your projects have been properties of objects. 
You have worked with the Text property of text boxes and labels. Now you will 
work ~tith values that are not properties. Basic allows you to set up locations in 
memory and give each location a name. You can visualize each memory loca-
tion as a scratch pad; the contents of the scratch pad can change as the need 
arises. In this example. the memory location is called Maximumlnteger. 
Maximumlnteger 
100 
Maximumlnteger 
100 
After executing this statement, the value of Maximumlnteger is 100. You 
Call change the value of Maximumlnteger, use it in calculations. or display it in 
a control. 
ln the preceding example. the memory location called Maximum Integer is 
a variable. Memory locations that hold data that can be changed during proj-
ect execution are called variables: locations that hold data that cannot change 
during execution ru·e called constauts. For example. the customer's name will 
vary as the information for each individual is processed. However. t11e name of 
the company and the sales tax rate will remain the same (at least for that clay). 

C 
II 
A 
1• 
'I' 
1•: 
ll 
When you declare 11 varial>le or a named cons t:u.t. Visunl Basic reserves 
an area of memory and assigns it a name, called an idem ifier. You specify 
identifier names according to the rules of Basic as well as some recommended 
naming conventions. 
The 41~c·.hwation statements establish your project's variables a nd con-
stants, give them names. and specify the type of da ta they will hold. The state-
ments are not considered executable; that is, they are not executed in the flow 
of instructions during program execution. An exception to this 1ule occurs when 
you initialize a variable on the same line as the declaration. 
Here an: some sample declaration statements: 
' Declare a string variable . 
Dim Namestring As String 
1 Declare integer variabl es. 
Dim Count erlnteger As Int eger 
Dim Maxinteger As Integer = 100 
I Declare a named constant. 
Const DISCOUNT_RATE_Decimal As Decimal = .15D 
The next few sections describe the data types, the rules for naming vari-
ables and con~tants, and the formal of the declamtions. 
Data Types 
The d utn type of a variable or constant indicates what type of informa tion will 
be stored in the allocated memory space: perhaps a name. a dollar amount. a 
date. or a total. The data types i.n VB are actually classes. and the variables are 
objects of the class. Table 3.1 shows the VB data types. 
The most common types of variables and cons tants we will use are String, 
Integer. and Decimal. When deciding whjch data type to use. follo~>· this guide-
line: U the data will be used in a calcttlation. then it must be numeric (usually 
Integer or Decimal); if it is not used in a calculation. it will be String. Use Dec-
imal as the data type for any decimal fractions in business applications; Single 
ar1d Double data types are generally used ir1 scienli.fic applications. 
Consider the following examples: 
C onte n111 
Social secuL-ity number 
String 
Pay rale 
Dechual 
Hours "M'orked 
Decimal 
Phone number 
String 
Quantity 
Integer 
llt·uson 
Not used i.n a calculation. 
Use<l in a calculation: contains a decima1 
point. 
Used in a calculation: may contain a 
decimal point. (Decimal can be usecl for 
any decimal fraction. not just dollars.) 
Not used in a calculation. 
Used in calculations; contains a w·hole 
number. 
107 

108 
v 
s u ,, 
I, 
C 
Variables. Con.stants, and Calculations 
T be Visual Basic Data Tn:~es, Common Language Hmllime (CLR) 
Data Types, tbe Kind of Uata Eacb Type Bolds, and tbe 
Amount of Memory Allocated fo1· Each 
Tnb l e 
3 . 1 
VB Data Tn~e 
Boolean 
Byte 
Char 
Date 
Decimal 
Single 
Double 
Short 
Integer 
Long 
String 
I 
Object 
Common Ltuaguage RttutiJ.ue 
(CLR) Data Type 
Boolean 
Byte 
Char 
Date 'lime 
Decimal 
Single 
Double 
lntl6 
lnt32 
lnt64 
String 
Object 
Use For 
True or False values 
0 to 255. binary data 
Single Unicode character 
11110001 through 1213119999 
Decimal fractions. such as dollars and cenls 
Single-precision flo.,ting-point numbers 
Double-precision floating-point munbers with 
14 digits of accuracy 
Small integer in the range - 32,768 to 32,767 
Whole numbers in the range - 2.147.483.648 
to + 2.147,483,647 
Larger ,.-hole nwnbers 
Alphanumeric data: letters, digits. and 
Any type of data 
Sto rage Size 
iu bytes 
2 
1 
2 
8 
16 
4 
8 
2 
4 
8 
Varies 
4 
Nole: Generally you will use the Visusl Basic data types: but for some conversion meUl<xls, you must use the corresponding CLR data type. 
Naming Rules 
A programmer has to name (identify) the variables and named constants that will 
LJe used in a project. Basic requires identifiers for variables and named constants 
to follow these rules: names may consist ofletters, digits. and underscores: they 
must begin with a letter or an underscore; they cmmot contain any spaces or pe-
riods; and they may not be reserved won:ls. (Reserved words. also called key-
words. m·e words to which Basic has assigned some meaning, such as print. name. 
and value.) 
Identifiers in VB are not case sensitive. Therefore. the names sumlnteger, 
Sum Integer. suminteger. and SUM INTEGER all refer to the same variable. 
Note: You can make variable names as long as you wish: the maximum 
ltmgtlt uf au itleulifier i.s 16,383 cltaracler.s. 
Naming Conventions 
When naming variables and constants, you must follow the rules of Basic. In 
addition. you should follow some naming conventions. Conventions are the 
guidelines that separate good names from bad {or not so good) names. The 
meaning and use of all identifiers should always be clear. 
Just as we established conventions for naming objects in Chapter l. in this 
chapter we adopt conventions for naming variables and constants. The follow-
ing conventions are widely used iu the programming industry: 

C
II
,\I>'I'
I'
R 
l. Identifiers must be meaningful. Choose a name that clearly indicates its 
purpose. Do not abbreviate unless the meaning is obvious and do not 
use very short identifiers. such as X or Y. 
2. Include the class (data type) of the variable. 
3. Begin with an uppercase letter and then capitalize each successive 
word of the name. Always use mixed case for variables; uppercase for 
constanis. 
Sample I den tillers 
Field of Dnht 
Posoible Identifier 
Social security number 
Socia!Securit yN umberStri ng 
Pay rate 
PayRateDecimal 
How·s,.wked 
HoursWorke<IDecimal 
Phone number 
PhoneNumhetString 
Quantity 
Quantitylnteger 
Tax rate {constant) 
TAX_RATE_Decimal 
Quota {constant) 
QUOTA_Integer 
Population 
PopulationLong 
Indicate whether each of the following identifiers conforms to the rules of Ba-
sic and to the naming conventions. If the identifier is invalid. give the reason. 
Remember, the answers to Feedback questions are found in Appendix A. 
l. omitted 
7. SubString 
2. #SOldinteger 
8. text 
3. Number Sold Integer 
9. Maximum 
4. Number.Sold. Integer 
10. MinimumRateoecimal 
5. Amount$Decimal 
11. MaximumCheckDecimal 
6. Sub 
12. CompanyNameString 
Constants: Named and lnll·insic 
Constants provide a way to use words to describe a value that doesn't change. 
In Chapter 2 you used the Visual Studio constants Color.Blue, Color. Red. 
Color. Yellow. and so on. TI10se constants are built into the environment and 
called intrinsic constants; you don't need to define them anywhere. The con-
stants that you define for yourself are called named constants. 
Named Constants 
You declare named constants using the keyword Con st. You give the constant 
a name, a data type. and a value. Once a value is declared as a constant, its 
value cannot be changed dtuing the execution of the project. The data type that 
you declare and the data type of the value must match. For example. if you de-
clare an integer constant. you must give it an integer value. 
109 

110 
,, 
s u " 
I. 
n " 
s 
C 
Variables. Constants. and Calculations 
You will find two important advantages to using named constants rather 
than the actual values in code. The code is easier to read: for example. seeing 
the identifier MAXlMUM_PAY_Decimal is more meaningful than seeing a 
number, such as 1,000. In addition, if you need to change the value at a later 
time. you need to change the constant declaration only once: you do not have to 
change every reference to it throughout the code. 
Coust Statement-General Form 
~rl 
5 ~ 
Const Identifier [As Datatype} 
Value 
Naming conventions for constants require that you include the data type in the 
name as well as the As clause that actually declares the data type. Use all up-
percase for the name with individual words separated by underscores. 
This example sets the company name. address. and the sales tax rate as 
constants: 
• 
Coust Statemem- Examples 
~ P-----------------------------------------------------------~ 
~ 
Const COMPANY_NAME_String As String = "R ' n R for Reading ' n Refreshment" 
:!.. 
Const COMPANY_ADDRESS_String As String = "101 S. Main Street" 
~ 
Const SALES_TAX_RATE_Decimal As Decimal = .080 
~ ~-----------------------------------
Assigning Values to Constan ts 
The values you assign to constants must follow certain mles. You have already 
seen that a text (string) value must be enclosed in quotation marks; numeric 
values are not enclosed. However. you must be aware of some additional rules. 
Numeric constants may contain only the digits (0-9). a decimal point, and 
a sign (+ or - ) at the left side. You cannot include a comma. dollar sign, any 
other special characters. or a sign at the right side. You can declare the data 
type of numeric constants by appending a type-declaration character. Jf you do 
not append a type-declaration character to a numeric constant, any whole num-
ber is assumed to be Integer and any fractional value is assumed to be Double. 
The type-declaration characters are 
Decimal 
Double 
Integer 
Long 
Short 
Single 
D 
R 
I 
L 
s 
F 
String literals (also called string constants) may contain letters. digits. and 
special characters. such as$#@%&*. You '~ill have a problem when you want 
to include quotation marks inside a string literal since quotation marks enclose 
the literal. The solution is to use two quotation mru'ks together inside the literal. 
Visual Basic will interpret the pair as one symbol. For example. "He said, 
"" I like it . """ produces this string: He said, "I like it ." 
Although you can use numeric digits inside a string literal. remember that 
these numbers are text and cannot be used for calculations. 
The string values are referred to as string liter(/.ls because they contain 
exactly (literally) whatever is inside the quotation marks. 

C 
II 
A 
1• 
'I' 
1•: 
R 
3 
The following table lists example constants. 
Data Type 
Integer 
Single 
Decimal 
Double 
Long 
String uterals 
[ntrinsic Coust::mts 
Constant Value Example 
5 
125 
2170 
2000 
- 100 
123456781 
101 .25F 
- 5. 0F 
850. 500 
- 1000 
52875. 8 
52875.8R 
- 52875. 8R 
134257987L 
- 8250758L 
"Visual Basic" 
"ABC Incorporated" 
"1415 J Street" 
"102'' 
"She said ""Hello.""" 
lntriusic coustauts are system-defmed constants. Many sets of intrinsic con-
stants are declared in system class libraries and are available for use in your 
VB programs. For example, the color constants that you used in Chapter 2 are 
inb·insic constants. 
You must specify the class name or group name as well as the constant 
name when you use intrinsic constants. For example, Color. Red is the constant 
"Red" in the class "Color". Later in this chapter you willleam to use constants 
from the Message Box class for displaying message boxes to the user. 
Dedm·ing Va1·iablcs 
Although there are several ways to declare a variable. inside a procedure you 
must use the Dim statement. Later in this chapter you ~tillleam to declare vari-
ables outside of a procedure. using the Public. Private, or Dim statement. 
Llcdamtiou Staltmcuts-Ccuet·al For·m 
6'~ 
S 
~ 
Public JPrivate JDim Identifier (As Datatype) 
~ 
If you omit the optional data type. the variable's type defaults to Object. It is 
recommended practice to always declare the data type. 
Note: If Option Strict is On. you receive a syntax error if you omit the 
data type. 
111 

112 
v 
S 
l l 
,\ 
I. 
C 
Variables. Comtants. atul Calculations 
Oeclm·atiou Statement-Examples 
~ P-----------------------------------------------------------~ 
~ 
" { .. 
"' 
Dim CustomerNameString As String 
Private TotalSoldlnteger As Integer 
Dim TemperatureSingle As Single 
Dim PriceDecimal As Decimal 
Private CostDecimal As Decimal 
The reserved word Dim is really short for dimension, which means "size." 
When you declare a variable. the amount of memory resenred depends on its 
data type. Refer to Table 3.1 (page 108) for the size of each data type. 
You also can declare several variables in one statement: the data type you 
uedare iu tile As dawse applies lu all of Lite variaLies 011 Lite li11e. Separate Lite 
variable names with commas. Here are some sample declarations: 
Dim NameString, AddressString, PhoneString As String 
Dim PriceDecimal, TotalDecimal As Decimal 
Emer·ing Declaration Statements 
Visual Basic's IntelliSense feature helps you enter Private. Public. and Dim 
statements. After you type the space that follows VariableName As. a list pops 
up (Figure 3.1). 'Ll1is list shows the possible entries to complete the statement. 
The easiest way to complete the statement is to begin typing the correct entty; 
the list automatically scrolls to the correct section (Figure 3.2). When the cor-
rect entry is highlighted or is the only .item showing, press Enter. Tab, or the 
spacebar to select the entry. or double-click if you prefer using the mouse. 
Din PriceDecirnal As ..,d•,:.
' l ________________ -, 
'1: DebuggerDisplayAttribute 
~ 
Oebugge•HiddenA.ttribute 
4$: Oebuggc:rNonUstrCo-dc.Attributt 
'U DebuggerStepperBoundaryAtlribute 
<U DebuggerStepThroughAttribute 
<.ii OebuggerTypePro>.yA..."tribute 
Rename a variable or control using 
the handy Ren&me feature: Right-
click on the nome ond choose R~ 
nome from the context menu. The 
identifier will be changed every-
where it occurs. • 
As soon as you type the space 
after As. the lntelliSense menn 
pops up. You can mah-e a 
selectihn from the list with 
your mouse or the keyboard. 
Fign•·e 3.2 
T,'pe the first few characters of 
the data type and the 
lntelliSense list quickly scrolls 
to the correct section. When the 
carrect word is highUghr-ed. 
press Enter, Tab, or the 
spacebar to select the entry. 

C 
II 
A 
1• 
'I' 
" 
ll 
Note: Some people tlnd the lntelliSense feature annoying rather than helpful. 
You can tum off the feature by selecting Tools I Options. In the Options dialog box, 
make sure that Show all settings is selected and choose Text Editor I Basic /General; 
deselect Auto list members and Parameter information. If you are working in a shared 
classroom or lab, never change options without permission of an insb1Jctor. 
Write a declaration using the Dim statement for the following situations; make 
up an appropriate variable identifier. 
l. You need variables for payroll processing to store the following: 
(a) Number of hours, which can hold a decimal value. 
(b) Employee's name. 
(c) Department munber (not used in calculati•)ns). 
2. You need variables for inventory control to store the following: 
(a) lnteger quantity. 
(b) Description of the item. 
(c) Part number. 
(d) Cost. 
(e) Selling price. 
Scope and Life LimE' of Variables 
A variable may exist and be visible for an entire project. for only one form, or for 
only one procedure. 111e visibility of a variable is referred to as its scope. Visi-
bility really means "this variable can be used or 'seen' in this location." The 
scope is said to be namespace, module level, local, or block. A uamespace-
level var·iable may be used in all procedures of the namespace, which is gener-
ally the entire project. Module-level variables. also called class-level 
variaMes. are accessible from all procedures of a fom1. A local variaMe may 
be used only within the procedure in which it is declared. and a block-level 
vat·iable is used only within a block of code inside a procedure. 
You declare the scope of a variable by choosing where to place the decla-
ration statement and by choosing the appropriate declaration keyword. such as 
Private. 
Not-e: Previous versions of VB and some other programming languages 
refer to namespace variables as global 1-uriables. 
V:U'iabl<' Lif<'time 
ll'l1en you create a variable. you must be aware of its lifetime. The lifetime of 
a variable is the period of time that the variable exists. The lifetime of a local 
or block variable is normally one execution of a procedure. For example. each 
time you execute a sub procedure, the local Dim statements are executed. Each 
variable is created as a "fresh" new one, with an initial value of 0 for numeric 
variables and an empty string for string variables. When the procedure fin-
ishes. its variables disappear; that is. their memory locations are released. 
The lifetime of a module-level variable is the entire time the form is 
loaded. generally the lifetime of the entire project. If you want to maintain the 
value of a variable for multiple executions of a procedur-for example. to cal-
culate a running total- you must use a module-level variable (or a variable de-
clared as Static, wh.ich is discussed in Chapters 6 and 7). 
113 

114 
\ ' 
S 
U 
A 
I, 
C 
Variables. Constants. and Cak!t.la.tion.s 
Lot·al Oedm·a1ions 
Any variable that you declare inside a procedure js local in scope. which 
means that it is kno1t11 only to that procedure. Use the keyword Dim for local 
declarations. A Dim statement may appear anywhere inside the procedure as 
long as it appears prior to the first use of the variable in a statement. However. 
good programming practice dictates that Dims should appear at the top of the 
procedure. prior to all other code statements (after the remarks). 
' Module-level declarations. 
Const DISCOUNT_RATE_Decimal As Decimal = 0.15D 
Private Sub CalculateButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles CalculateButton.Click) 
' Calculate the price and discount. 
Dim auantitylnteger As Integer 
Dim Priceoecimal, ExtendedPriceoecimal, OiscountOecimal, 
OiscountedPriceOecimal As Decimal 
Convert input values to numeric variables. 
auantityinteger = Integer. Parse(QuantityTextBox .Text) 
PriceDecimal = Oecimal.Parse(PriceTextBox.Text) 
' Calculate values. 
ExtendedPriceDecimal = auantitylnteger * PriceDecimal 
DiscountDecimal = Dectmal. Round( 
(ExtendedPriceDecimal * DISCOUNT_RATE_Decimal), 2) 
DiscountedPriceOecimal = ExtendedPriceOecimal - OiscountOecimal 
Notice the Const statement in the preceding example. Although you can 
declare named constants to be local, block. module leveL or namespace in 
scope. just ns you can variables. good programming practice dictates that con-
slants should be declared at the module level. This technique places all constant 
declarations at the top of the code and makes them easy to find in case you 
need to make changes. 
Note: Any variables thai you declare but do not use nre marked with a gray 
squiggle underline. You can ignore the marks if you have just declared the vari-
able and not yet written the code. 
Muclult'-Le' PI Bec·lm·atiun~ 
At times you need to be able to use a variable or constant in more than one pro-
cedure of a form. When you declare a vatiable or constant as module leveL you 
can use it anywhere in that fotm. '"''11en you write module-level declarations. you 
can use the Dim. Public. or Private keyword. The preferred practice is to use 
either the Public or Private keyword for module-level variables rather than 
Dim. In Chapter 6 you 1villleam how and why to choose Public or Private. Un-
til then we will declare all module-level variables using the Private keyword. 
Place the declarations (Private or Const) for module-level vatiables and 
constants in the Declarations section of the form. (Recall that you have been 
using the Declarations section for remarks since Chapter 1.) H' you wish to 
accumulate a smu or count items fm· multiple executions of a p•·oce-
dure, you should declm·e the vm·iable at the module level. 

C 
II 
A 
1• 
'I' 
" 
ll 
Figure 3.3 illustrates the locations for coding local vaiiables and module-
level variables. 
(DeclaratiOns section) 
Private Modulet.eve!Variab!es 
Const NamedConslants 
Prtvate Sub CalculateButton_Oick 
Dim LocaiVarlables 
End Sub 
Private Sub SummaryButton_Oick 
Dim LocaiVariables 
End Sub 
Private SubOearButton_Oi<:k 
Dim LocaiVariables 
End Sub 
' Declarations section of a form . 
Declare module -level variables and constants. 
Private auantitySumlnteger,SaleCountlnteger As Integer 
Private DiscountSumDecimal As Decimal 
Const MAXIMUM_DISCOUNT_Decimal As Decimal = 100. 0D 
Coding l\lodulc-L('vel OeclaJ'ations 
To enter module-level declarations. you must be in the Editor window at the top 
of your code (Figure 3.4). Place the Private and Const statements after the 
Class declaration but before your first procedure. 
Code module-level declarations in the Declarations section at the top of your code. 
i c Class: BookSalefortt 
• Decl are oodule-level variables and constant !O . 
Private QoantitySuni nteger 1 Sa l eCountinteger As Integer 
Private Di scountSu~nl>eci.mal , Oi.scountedPriceSw:Oec i.na l A~ Oecinal 
Const 
imal As Oecirr:al - G .150 
l<'l g u.t• e 
3 . 3 
The vari-ables yoz£ declare 
inside a procedure are local. 
Variables th.at you declare in 
the Declarations section are 
module level. 
liS 

116 
l ' 
C 
Variables. Con.stants, and Calculations 
Block-l .evel :UJd Namcspace-L('vel Declar ations 
You won't use block-level or namespace-level declarations in this chapter. 
Block-level variables and constants have a scope of a block of code. such as 
If I End If or Do I Loop. These statements are covered later in this text. 
Namespace-level variables and constants can sometimes be useful when a 
project has multiple forms and/or modules, but good programming practice 
excludes the use of namespace-level variables. 
Write the declarations (Dim. Private, or Const statements) for each of the fol-
lowing situations and indicate where each statement will appear. 
l. The total of the payroll that will be needed in a Calculate event proce-
dure and in a Summary event procedure. 
2. The sales tax rate that cannot be changed during execution of the pro-
gram but will be used by multiple procedures. 
3. The number of participants that are being cotmted in the Calculate 
event procedure but not displayed until the Summary event procedure. 
Calculations 
·1 
In programming you can perform calculations with variables. with constants, 
and with dte prope1ties of certain objects. The prope11ies you will use, such as 
the Text property of a text box or a labeL are usually strings of text characters. 
These character strings. such as "Howdy" or "12345". carmot be used directly 
in calculations unless you first conve1t them to the correct data type. 
Convet·Ling Stt·ings Lo a Ntunet·ic Data Typ~ 
You can use a Parse method to convert the Text property of a control to its nu-
meric form before you use the value in a calculation. The class that you use de-
pends on the data type of the variable to which you are assigning the value. For 
example. to convert text to an integer. use the Integer .Parse method; to con-
vert to a decimal value, use Decimal. Parse. Pass the text string that you want 
to conve1t as an argtlllleut of the Parse method. 
' Convert input values to numeric variables. 
auantityinteger = Integer.Parse(QuantityTextBox.Text) 
PriceDecimal = Decimal. Parse(PriceTextBox. Text) 
' Calculate the extended price . 
ExtendedPriceDecimal = auantitylnteger * PriceDecimal 
Converting from one data type to another is sometimes called casting. In the 
preceding example. the String value from the QuantityTextBox.Text property is 
cast into an Integer data type and the String from PriceTextBox.Text is cast into 
a Decimal data type. 
Usiug the Pru·se Methods 
As you know, objects have methods that pe1fonn actions. such as the Focus 
method for a text box. The data types that you use to declare variables are 

C
II
,\I>
'I'
I'
R 
classes, which have properties and methods. Each of the nwneric data type 
classes has a Parse method. which you will use to convert text strings into 
the con-eel numeric value for that type. 'The Decimal class has a Parse method 
that converts the value inside the parentheses to a decimal value while the 
Integer class has a Parse method to convert the value to an integer. 
The l~ru ·s(' 1\lethods-C('ueral Fot•tus 
11 7 
r5r---------------------------------------------------------~ 
c 
' Convert to Integer. 
~ 
Integer. Parse(Stringroconvert) 
::.. 
~ ' Convert to Decimal 
8 Decimal.Parse(StringToConvert) 
'J> 
The expression you wish to convert can be the property of a control, a string 
variable, or a string constant. The Parse method retums (produces) a value that 
can be used in a statement. such as the assignment statements in the following 
examples. 
Tbe Pru·se Methods-Examples 
~ 
~ 
Quantityinteger = Integer. Parse(QuantityTextBox .Text) 
8 
Priceoecirnal = Decimal.Parse(PriceTextBox.Text) 
1f 
WholeNumberinteger = Integer. Parse(DigitString) 
The Parse methods examine the value stored in the argument and attempt to 
convert it to a number in a process called parsiilg. which means to pick apart. 
character by character, and convert to another format. 
When a Parse method encounters a value that it cannot parse to a number. 
such as a blank or nonnumeric character. an error occurs. You will learn how 
to avoid those en-ors later in this chapter in the section titled "Handling 
Exceptions." 
You will use the Integer . Parse and Decimal. Parse methods for most of 
your programs. But in case you need to convert. to Long. Single, or Double. VB 
also has a Parse method for each of those data type classes. 
Couvet·ting to Su·iug 
When you assign a value to a variable, you must take care to assign like types. 
For example. you assign an integer value to an Integer variable and a decimal 
value to a Decimal variable. Any value that you assign to a String variable or 
the Text property of a control must be string. You can convert any of the nu-
meric data types to a string value using the ToString method. Later in this 
chapter you will learn to formal numbers for output using parameters of the 
ToString method. 
Note: The rule about assigning only like types has some exceptions. See 
"Implicit Conversions" later in tllis chapter. 
Examples 
ResultTextBox .Text = ResultDecimal. ToString() 
countTextBox .Text = countinteger .ToString() 
IDString = IDinteger.ToString() 

118 
l ' 
C 
Variables, Constants. aJul Calculations 
Aritlunetjc Ope1·a1ions 
The aritluuetic operations you can pe1f01m in Visual Dasic include addition • .sub-
traction. multiplication. division, integer division, modulus. and exponentiation. 
Opemlion 
+ 
Addition 
SLLbtraction 
* 
Multiplication 
Oi,•ision 
lntegel' division 
Mod 
Modulus--Remainder of divjsion 
Exponentiation 
The first four operations are self-explanatory, but you may not be familiar 
with \. Mod. or A. 
lntcge1· Division (\) 
Use integer division (\) to divide one integer by another. giving an integer result 
and truncating (dropping) any remainder. For example. if TotalMinuteslnteger 
= 150. then 
Hourslnteger = TotalMinutesinteger \ 60 
returns 2 for Hourslnteger. 
Mod 
The Mod operator returns the remainder of a division operation. For example, 
if TotalMinutesinteger = 150. then 
Minutesint eger = TotalMinutesinteger Mod 60 
returns 30 for Minuteslnteger. 
Exr•oneutiation (A) 
The exponentiation operator (A) raises a number to the power specified and re-
turns (produces) a result of the Double data type. The following are examples of 
exponentiation. 
SquaredDoub1e = NumberDecimal • 2 
CubedDouble = Numberoecimal • 3 
' Square the number--Raise to the 2nd power. 
' Cube the number--Raise to the 3rd power. 

C
II
,\I>
'I'
I'
R 
O•·<le t· o f OperaLions 
The order in which operations a1·e pelformed determines the result. Consider 
the expression 3 + 4 * 2. 'What is the result? If the addition is done first. the 
result is 14. However. if the multiplication is done first. the result is 11. 
The hierarchy of operations. or order· of precedence. in arithmetic ex-
pressions from highest to lowest is 
l. Any operation inside parentheses 
2. Exponentiation 
3. Multjp!ication and division 
4. Integer division 
5. Modulus 
6. Addition and subtraction 
In the previous example. the multiplication is performed before the addi-
tion, yielding a result of 11. To change the order of evaluation, use parentheses. 
The expression 
(3 + 4) * 2 
will yield 14 as ihe result. One sei of parentheses may be used inside another 
set. l11 that case. the parentheses are said to be nested. The following is an ex-
ample of nested parentheses: 
((Score1Integer + Score2Integer + Score3Integer) 1 3) * 1.2 
Extra parentheses can always be used for clarity. The expressions 
2 * Costoecimal * Rateoecimal 
and 
(2 * Costoecimal) * Rateoecimal 
are equivalent. but the second is easier to understand. 
Multiple opcrntions ot the same level (such ns multiplicntion nnd division) 
are perfom1ed from left to right. The example 8/4 * 2 yields 4 as its result, not 
l. The first operation is 8/4. and 2 * 2 is the second. 
Evaluation of an expression occurs in this order: 
l. All operations within parentheses. Multiple operations within the 
parentheses are perfonned according to the rules of precedence. 
2. All exponentiation. Multiple exponentiation operations are performed 
from left to right. 
3. All multiplication and division. Multiple operations are performed from 
left to right. 
4. All integer division. Multiple operations are performed from left to right. 
5. Mod operations. Multiple operations are performed from left to right. 
6. All addition and subtraction operations are performed from left to right. 
119 
I-'ll i I ::J 
Use extra parentheses to make the 
precedence clearer. The operation 
will be easier to understand and the 
parentheses hove no negative effect 
on execution. • 

120 
v 
S 
l l 
,\ 
I. 
C 
Variables. Comtants. and Calculations 
Although the precedence of operations in Basic is the same as in algebra. 
take note of one important difference: There are no implied operations in Ba-
sic. The following expressions would be valid in mathematics, but they are not 
valid in Basic: 
Mathenutt;i cal Notation 
2A 
3(X + Y) 
(X + Y)(X - Y) 
E.:tuivalenl Buoic Fnnctiou 
2 * A 
3 * (X +Y) 
(X + Y) * (X - Y) 
What will be the result of the following calculations using the order of precedence? 
Assume that: Firstinteger = 2, Second Integer = 4. Thirdlnteger = 3 
l. First Integer + Second Integer A 2 
2. 81 Secondlnteger I Firstlnteger 
3. FirstJnteger * (Firstlnteger + l) 
4. First Integer* First Integer + 1 
5. Secuw.llnteger" F in;lluteger + Tiuniiuleger "' 2 
6. Second Integer A (First Integer + Thirdlnteger) * 2 
7. (Second Integer A First Integer) + 'TI1irdinteger * 2 
8. ((Secondlnteger A First Integer) + Thirdlnteger) * 2 
Using Calculations iu Code 
You perfonn calculations in assignment statements. Recall that whatever ap-
peal'S on the right side of an = (assignment operator) is assigned to the item on 
the left. The left side may be the property of a control or a variable. 
Examples 
Averageoecimal = sumoecimal 1 countlnteger 
AmountDueLabel.Text = (Priceoecimal- (Priceoecimal * DiscountRateDecimal)) .ToString() 
CommissionTextBox.Text = (SalesTotalDecimal * CommissionRateDecimal) .ToString() 
In the preceding examples. the results of the calculations were assigned to 
a variable, the Text property of a labeL and the Text property of a text box. In 
most cases you will assign calculation results to variables or to the Text prop· 
erties of text boxes. When you assign the result of a calculation to a Text prop-
erty. you must place parentheses around the entire calculation and convert the 
result of the calculation to a string. 
Assigmneut OJJCJ'alor·s 
ln addition to the equal sign(=) as an assignment opemtot·. VB has several 
operators that can perfonn a calculation and assign the result as one operation. 
The combined assignment operators are +=. - =, *=. 1=. \=. and &=. Each of 
these assignment operators is a shortcut for the standard method; you can 
use the standard (longer) form or the shortcut. The shortcuts allow you to 

C 
II 
A 
1• 
'I' 
" 
ll 
type a variable name only once instead of having to type it on both sides of 
the equal sign. 
For example. to add Sales Decimal to TotalSalesOecimal. the long version is 
' Accumulate a total. 
TotalSalesoecimal = TotalSalesoecimal + Salesoecimal 
[nstead you can use the shortcut assignment operator: 
· Accumulate a total. 
TotalSalesoecimal += Salesoecimal 
The two statements have the same effect. 
To subtract 1 from a variable, the long version is 
' Subtract 1 from a variable. 
CountDownlnteger ~ CountDownlnteger -
And the shortcut, using the - = operator: 
' Subtract 1 from a variable. 
countDown Integer - = 1 
The assignment operators that you will use most often are += and - =. The 
following are examples of other assignment operators: 
' Multiply Resultlnteger by 2 and assign the result to Resultlnteger. 
Resultlnteger *= 2 
' Divide sumoecimal by countlnteger and assign the result to sumoecimal . 
sumoecimal / = countlnteger 
· Concatenate SmallString to the end of BigString. 
BigString &= SmallString 
l. Wdte two statements to add 5 to Countlnteger. using (a) the standard. 
long version; and (b) the assignment operator. 
2. Wdte two statements to subtract WithdrawalDecimal from Balance-
Decimal. using (a) the standard. long version: and (b) the assigmnent 
operator. 
3. Wdte two statements to multiply PriceOecimal by Countlnteger and 
place the result into PdceDecimal. Use (a) the standard. long version; 
and (b) the assignment operator. 
Option Explicit and Option Strict 
Visual Basic provides hvo options that can significantly change the behavior of 
the editor and compiler. Not using these two options. O ption .Explicit and 
Optiou S u·ict. can make coding somewhat easier but provide oppot1unities for 
hard-to-find errors and very sloppy programming. 
121 

122 
S 
l l 
\ 
I , 
l ' 
Voriablr.'J. Con .. ,twrt.,, aml Coicu.latilm.'i 
O ruluu E'l'llt'll 
When Option Explicit is tumed off. you can use any variable name without first 
declaring it. The first time you use a variable name. VB allocates a new vari-
able. For example. you could write the line 
z ,. MyTotal + 1 
without first declaring either Z or MyTotal. This is a th rowback to very old ver-
sions of Bask that did not require variable declaration. In those days. pro-
grammers spent many hours debugging programs that had just a small 
misspelling or typo in a variable name. 
You should always program with Option Explicit tumed on. In VB. the 
option is turned on by default for s ll new projects. If you need to turn it off (not 
a recommended practice). place the line 
Option Explicit Off 
before the firsl I ine of code in a file. 
C lruluu ~u·l• · t 
Option Strict is un option that makes VB more like other stl'ougly t)'(Jc tl lan-
guuges. such as C++. Java. and C#. When Option Strict is turned on. the editor 
and compiler try to help you keep from making hard-to-find mistakes. Specifi-
cally. Option Strict docs not allow any implicit {automatic) convers ions fTOrn 11 
wider data type to a narroM·er one. or between tring and numeric data types. 
All of the code you have seen so far in tlus text has been written with Option 
Strict tumed on. \l'ith this option. you must convert to the desired data type from 
Iring or from a wider datu type to a narrower type. such as from Decimal to 
Integer. 
With Option trictturnecl off. code such as this is legal: 
auantitylnteger = OuantityTextBox.Text 
and 
Amountlnteger • Amountlong 
and 
Totallnteger += SaleAmountDecimal 
With each of these legal {but dangerous) statements. the VB compiler 
makes assumptions about your data. And the majority of the time. the assump-
tions are COITect. But bad input data or very large numbers can cause enoneous 
results or run-time errors. 
The best practice is to always tum on Option Strict. This technique will 
save you from developing poor pTOgramming habits and Mill also like ly save 

C 
II 
A 
1• 
'I' 
" 
ll 
you hours of debugging time. You can tum on Option Strict either in code or in 
the Project Designer for the current project. Place the line 
Option Strict on 
before the first line of code, after the general remarks at the top of a file. 
Example 
'Project: 
'Date: 
'Programmer: 
'Description: 
MyProject 
Today 
Your Name 
This project calculates correctly. 
Option Strict on 
Public Class MyForm 
To tum on Option Strict or Option Explicit for all files of a project, open the 
Project Designer by selecting Project I Properlies or double-clicking My Project 
in the Solution Explorer. On the Compile tab you will find settings for both 
Option Explicit and Option Strict. By default. Option Explicit is turned on and 
Option Strict is turned off. Select On for Option Strict. 
A better approach is to set Option Strict on by default. Select Tools I 
Options I Projects and Solutions I VB Defaults and set t11e defaults. Changing the 
default ~till affect all new projects begun after the change but will not change 
the open project or any previously written projects that you open. Use the Pro-
ject Designer to change the option in existing projects. 
Note: Option Strict includes all of the requirements of Option Explicit. If 
Option Strict is turned on. variables must be declared, regardless of the setting 
of Option Explicit. 
Co nvm·ting between Nmnel'ic Data Types 
ln VB you can convert data from one numeric data type to another. Some con-
versions can be performed implicitly (automatically) and some you must spec-
ify explicitly. And some cannot be converted if the value would be lost in the 
conversion. 
ID1[1lidt Conwrsions 
If you are converting a value from a narrower data type to a wider type. where 
there is no danger of losing any precision. the conversion can be performed by 
an implicit couvet-sion. For example. the statement 
BigNumberDouble = SmallNumberlnteger 
does not generate any error message. assuming that both variables are properly 
declared. The value of SmallNumberinteger is successfully converted and 
stored in BigNumberDouble. However. to convert in the opposite direction 
could cause problems and cannot be done implicitly. 
The following list shows selected data type conversions that can be per-
formed implicitly in VB: 
123 

124 
Byte 
Short 
Integer 
Long 
Decimal 
Single 
v 
S 
l l 
,\ 
I. 
To 
Sho1t, Integer, Long. Single. Double, or Decimal 
Integer. Long. Single, Double. or Decimal 
Long, Single. Douhle, or Decimal 
Single. Double, or Decimal 
Si11gle. Double 
Double 
C 
Variables. Comtants. atul Calculations 
Notice that Double does not convert to any other type and you cannot con-
vert implicitly from floating point (Single or Double) to Decimal. 
Explicit Conversions 
lf you want to conve1t behveen data types that do not have implicit conversions. 
you must use an explicit. conve1·sion. also called CltSI.iug. But beware: If you 
perform a conversion that causes significant digits to be lost. an exception is 
generated. (Exceptions are covered later in this chapter in the section titled 
"Handling Exceptions.") 
Use methods of the Convert class to convert between data types. The 
Convert class has methods that begin with "To" for each of the data types: 
ToDecimal, ToSingle, and ToDouble. However, you must specify the integer 
data types using their .NET class names rather than the VB data types. 
For the VB data typet 
Use the met.hod for the .NET data l>l"" 
Short 
Tolnt16 
Integer 
Tolnt32 
Long 
Tolnt64 
The following are examples of explicit conversion. For each. assume that the 
variables are already declared following the textbook naming standards. 
Numberoecimal = convert .ToDecimal(NumberSingle} 
ValueinteQer 
Convert.Tolnt32(Valueoouble) 
AmountSingle = Convert .ToSingle(AmountDecimal) 
You should perform a conversion ti·om a wider data type to a narrower one 
only when you know tl1at the value will fit, without losing significant digits. 
Fractional values are rounded to fit into integer data types. and a single or dou-
ble value converted to decimal is rounded to fit in 28 digits. 
Pe rfo1·ming CaJculations with Untikc Data Types 
When you perfo1m calculations with unlike data types. VB performs the calcula-
tion using the wider data type. For example, Countlnteger I NumberDecimal 
produces a decimal result. If you want to convert the result to a different 
data type. you must perform a cast: convert. Tolnt32(Countlnteger I 
NumberDecimal) orConvert. ToSinQle(Countlnteger I NumberDecimal). 

C 
II 
i\ 
11 
'I' 
1•: 
ll 
Note. however. that VB does not convert to a different data type until it is neces-
sary. The expression Countlnteger I 2 * AmountDecimal is evaluated as 
integer division for Countlnteger 1 2. producing an integer intennediate 
re.~ult: then the multiplication is pe.forrned on the integer and decimal value 
(Amount Decimal). producing a decimal result. 
Note: The methods of the Convert class use the .NET data types rather than 
the VB data types. Use lnt32 for lntet;er. Tntl6 for Short. and Tnt64 for long. 
Rounding Numbc1·s 
At times you may want to round dec imal fractions. You can use the 
Decimal. Round method to round decimal value.~ to the desired number of 
decimal positions. 
Tlu• Honnrl i'IINhmi-Cf'IH' I'al Fonu 
Decimal.Round(Decima1Va1ue, IntegerNumberOfDecimalPositions) 
The Decimal .Round method re turns a decimal result. rounded to the s pecified 
number of decimal positions. which can be an integer in the range 0- 28. 
Th<' Ronnel MNhuti-
Exnmplf'>< 
125 
~ P--------------------------------------------------------------. 
e 
' Round to two decimal positions. 
~ 
ResultDecimal = Decimal .Round(AmountDecimal, 2) 
r ' Round to zero decimal positions. 
WholeDollarsDecimal = Decimal.Round(DollarsAndCentsDecimal, 0) 
' Round the result of a calculation. 
DiscountDecimal = Decimal .Round(ExtendedPriceDecimal * DISCOUNT_RATE_Decimal, 2) 
The Decimal. Round method and the Convert methods round us ing a tech-
nique called "rounding toward even." If the digit to the right of the final digit is 
exactly 5. the number is rounded so that the final digit is even. 
Examples 
Decimal V:ulue to Round 
N umbe r of D ccin1al P 08itio ns 
Result 
1.455 
2 
1.46 
1.445 
2 
1.44 
1.5 
0 
2 
2.5 
0 
2 
In addition to the Decimal . Round method. you can use the Round method 
of the Math class to round either decimal or double values. See Appendix B for 
the methods of the Math class. 

126 
v 
S 
l l 
,\ 
I. 
C 
Variables. Comtants. and Calculations 
Note: Visual Basic provides many functions for mathematical operations. 
financial calculations, and string manipulation. These functions can simplify 
many programming tasks. When Microsoft moved Visual Basic to object-
oriented programming. they made the decision to keep many functions from 
previous versions of VB. although the fw1ctions do not follow the OOP pattern 
of Object. Method. You can find many of these helpful functions in Appendix B. 
The authors of this text elected to consistently use OOP methods rather than 
mix methods and functions. 
Formatting Data for Display 
When you want to display numeric data in the Text property of a label or text 
box. you must fust convert the value to string. You also can formal the data for 
display, which controls the way the output looks. For example, 12 is just a nwn-
ber. but $12.00 conveys more meaning for dollar amounts. Using the ToString 
method and formatting codes. you can choose to display a dollar sign. a percent 
sign, and commas. You also can specify the number of digits to appear to the 
right of the decimal point. VB rounds the value to return the requested number 
of decimal positions. 
If you use the ToString method with an empty argument. the method re-
turns an unformatted string. This is perfectly acceptable when displaying inte-
ger values. For example. the following statement converts Numberlnteger to a 
string and displays it in DisplayTextBox.Text. 
Disp1ayTextBox.Text = Numberinteger.ToString() 
Using Fo1·mat Specific•· Codes 
You can use the format specitler codes to format the display of output. These 
predefined codes can fom1at a numeric value to have commas and dollar signs, 
if you wish. 
Note: The default format of each of the formatting codes is based on the 
computer's regional setting. The f01mats presented here are for the default Eng-
lish (United States) values. 
' Display as currency . 
ExtendedPriceTextBox.Text = (Quantitylnteger • PriceDecimal).ToString( "C") 
The "C" code specifies currency. By default. the string will be formatted 
with a dollar sign, commas separating each group of 3 digits. and 2 digits to the 
right of the decimal point. 
' Display as numeric . 
DiscountTextBox. Text = DiscountDecimal. ToString ( "N" ) 
The "N" code star1ds for number. By default. the slling will be formatted 
with commas separating each group of 3 digits. with 2 digits to the right of the 
decimal point. 

C
ll
i\l•
'ri•:
R 
3 
You can specify the number of decimal positions by placing a numeric digit 
following the code. For example. "CO'' displays as currency with zero digits to 
the right of the decimal point. The value is rounded to l11e specified number of 
decimal positions. 
Format 
Speeifi.,o· Code• 
N IWle 
Core 
Currency 
F orf 
Fixed-point 
N oru 
Number 
D ord 
Digits 
P orp 
Percent 
Examples 
Vorinbl<' 
Vulue 
Total Decimal 
1125.6744 
Total Decimal 
1125.6744 
TotalDecimal 
1125.6744 
BalanceDeciDlill 
1125.6714 
BalanceDecimal 
1125.6744 
Pinl.nteger 
123 
RateDecimal 
0.075 
RateDecimal 
0.075 
RateDecimal 
0.075 
Value lnteger 
- 10 
Valuelnteger 
- 10 
Valuelnteger 
- 10 
Oe&crj[Jliou 
Fonnats with a dollar •ign. commOl!. and 2 
decimal places. Negative values are enclosed in 
parenthcse&. 
F onnats as a string of numeric digits. no 
oonunW!. 2 decimal pla~:e~~. and • minWI oign at 
the left for negative values. 
r om1ats ~-i_th COill.lllaS~ 2 decimal p laces. and 3 
minus • iBn a! the left for negative values. 
Use only for integer data !}-pes. Formals with a 
left miJOu~ sign for ne511tive •Ahx:s. Usually u..,d 
to force a specified numher of digits to display. 
Multiplies the va lue by 100. adds a l!j>Oce and a 
percent sign, and rounds to 2 decimal places: 
negalivo value~ ha\'e a 1ninWJ r;ign at tile lefl. 
Fonnol Sp<'cilit•o• Cod e 
O utrmt 
"C'' 
$1.125.67 
"N" 
1.125.67 
"NO" 
L.l26 
"N3" 
1.125.674 
"FO" 
1126 
"06 " 
000123 
•p ll 
7.50 % 
' P3" 
7.500 % 
"PO" 
8% 
'C" 
($10.00) 
MNII 
- 10.00 
"03 " 
--010 
127 

128 
l ' 
C 
Variables, Constants. aJul Calculations 
Note that the formatted value returned by the ToString method is no longer 
purely numeric and cannot be used in further calculations. For example. con-
sider the following lines of code: 
Amountoecirnal += Chargesoecirnal 
AmountTextBox. Text = Amountoecirnal. ToString( "C") 
Assume that Amount Decimal holds 1050 after the calculation. and Amount-
Text Box. Text displays $1.050.00. lf you want to do any further calculations 
with this amount. such a~ adding it to a total. you must use AmountDecimal. not 
AmountTextBox.Text. The variable AmountDecin1al holds a numeric value; 
AmountTextBox.Text holds a string of (nonnumeiic) characters. 
You also can fonnat Date Time values using format codes and the ToString 
method. UnHke the numeric format codes. the date codes are case sensitive. 
The stiings returned are based on the computer's regional settings and can be 
changed. The following are default values for US-English in Windows Vista. 
Date 
Specifiel' Code 
NaJUe 
Descr-iption 
d 
ahot1 date 
Mm/dcl!yyyy 
D 
long date 
Day. Month dd. yyyy 
short time 
hh:mm AMIPM 
T 
long time 
hh:mm:ss AMI PM 
full date/time 
Day. Month del. yyyy bh:mm AMIPM 
(short time) 
F 
full date/time 
Day, Month dd, Yl'YY bh:rum:ss AMI PM 
(long time) 
g 
general 
Mru/dcl!yyyy hh:mm AMI PM 
(short time) 
G 
general 
Mm/dcl!yyyy hh:nuu:ss AMIPM 
(long time) 
M or tU 
month 
Month dd 
Rorr 
GMT pattern 
Day. dd mnmt yyyy hh:nun:ss GMT 
Note that you can also use methods of the Date Time structure for fmmat-
ting dates: ToLongDateString. ToShortDateString. ToLongHmeString, 
ToShortTirneString. See Appendix B or MSDN for additional infmmation. 
Choosing the Controls fot· Pt·ogt·am Output 
Some programmers prefer to display program output in labels; others prefer text 
boxes. Both approaches have advantages. but whichever approach you use. you 
should clearly differentiate between (editable) input areas and {unediiable) out-
put areas. 
Users generally get clues about input and output fields from their color. By 
Windows convention, input text boxes have a white background: output text has 
Example of Default Seuiug 
61161'2008 
Monday, June 16. 2008 
4<55 PM 
4<55:45PM 
Monday. June 16, 2008 4:55PM 
Monday, June 16, 2008 4:55:45 PM 
61161'2008 11:00 AM 
611612008 11:00:15 A M 
June 16 
Mon. 16 Jun 2008 11 :00:15 GMT 

(; 
II 
A 
I' 
'I' 
1•: 
ll 
a gray background. The default background color of text boxes (BackColor 
property) is set to white: the default Back Color of labels is gray. Ho11·ever. you 
can change the Back Color property and the BorderStyle property of both text 
boxes and labels so that the two controls look very similar. You might wonder 
why a person ll"ould ~t·ant to do that. but there are some very good reasons. 
Using lext boxes for output can provide some advantages: The controls do 
not disappear ll"hen the Text property is cleared. and the borders and sizes of the 
output boxPS <'an match those of the input boxes. making the form more visu-
aiJy unifom1. Abo. the user <'an select the text and copy it to another program 
using the \\7indoii""S clipboard. 
If you choose to display output in labels (the traditional approach). set the 
AutoSize property to F'olse so that the Iobei does not disappear when the Text 
property is blank. You also genemlly set the BorderStyle property of the labels 
to Fix9d3D or Fix«JS/ngle. so that the outline of the label appears. 
To use a text box for output. set its ReadOnly property to True (to prevent 
the user from allempting to edit the text} and set it.> TabStop property lo False. 
so that tlw focus will not ~top on that control when the user tabs from one con-
trol to the next. Notice thnl when you set ReadOnly to true. the BackColor prop-
erly automatically changes to Control. which is the system default for labels. 
The example programs in tl1is chapter use text boxes. rather than labels. for 
output. 
Give the line of <'Ode that assign~ the formatted output and tell how the output 
will display for the specified value. 
I. A calculated variable called AveragePayDecimal has a value of 
123.456 and should display in a text box called AveragePayTextBox. 
2. 'f1te vuriable Quantitylnteger. which contains 176123. must be dis· 
played in the text box called QuantityTextBox. 
3. The total amount collected in a fwtd drive is being accumulated in a 
variable <'alled Total Collected Decimal. What statementt1ill display the 
t•ariablt> inotextl>Ol called TotaiTextBox uitb commas and two decimal 
positions but no dollar signs? 
A Calculation Programming Example 
R 'n R-for Reading 'n Refreshment needs to calculate prices and discounts 
for books sold. The company is currently having a big sale. offering a 15 per-
cent discount on all books. In this project you will calculate the amount due for 
a quantity of books. determine the 15 percent discount, and deduct the dis-
count. giving the new amount due--the discounted amount. Use text boxes with 
the ReadOnly property set to True for the output fields. 
Pl annin~ th<' Proj<'<'l 
Sketch a form (Figure 3.5) that meets the needs of your users. 
129 

130 
v 
s 
l l 
,, 
•• 
C 
Variables. Constants. and Calc~tlations 
A planning sketch of the form for the calculation programming example. 
BookSaleForm ~ 
Book Sales 
Quant ity r=::J 
] t ie 
I 
f rlce 
[::=! 
Extended Price 
I 
15% Discount 
I 
Discounted Price I 
!Pnnt Fom1J !CalculateJ !Clear SaleJ 
1 
5 
·"" 
\ 
\ 
\ 
.--
I'< 
J~ r-r-
I ~ .--
J~ r--
k-r--
]~ f--
I Exit I 
~ '\ 
GroupBox1 
Quant ltyT extBox 
TitleTextBox 
PriceTextBox 
GroupBox2 
ExtendedPriceTextBox 
DIGCount TextBox 
DlscountedPriceTextBox 
PrintButton CalculateButton ClearButton ExltButton 
Plan tile ObJects and l1rofWI"ties 
Plan the property settings for the form and each of the controls. 
Objecl 
BookSale Form 
Labell 
GroupBoxl 
Labe12 
QuantityTextBox 
Labe13 
'IitleTextBox 
Lahel4 
Name 
Text 
AcceptButton 
Cancel Button 
Text 
Font 
Name 
Text 
Text 
Name 
Text 
Text 
Name 
Text 
Text 
Naw~ 
Text 
Setting 
BookSaleForm 
R 'n R for Reading 'n Refre~hruent 
CalculateButton 
Clear Button 
Book Sales 
Bold, 12 point 
GroupBoxl 
(blank) 
&Quantity 
QuantityTextBox 
(blank) 
&'Iitle 
TitleTextBox 
(blank) 
&Price 
Pd.4;e Te x.lDux 
(blank) 

C
II
A
I•
'I'
I'
R 
3 
Objec t 
P roperly 
Setting 
GroupBox2 
Name 
GroupBox2 
Text 
(blank) 
LabelS 
Text 
E.xtended Price 
ExtendedPriceTextBox 
Nan1e 
ExtendedPriceTex1Box 
TextAlign 
Right 
Read Only 
True 
TahStop 
False 
Label6 
Text 
15% Discount 
DiscountTextBox 
Name 
DiscountTex1Box 
TextAlign 
Right 
Read Only 
True 
TahStop 
False 
Lahel7 
Text 
Discounted Price 
DiscountedPriceTextBox 
Name 
DiscountedPriceTextBox 
TextAlign 
Right 
ReadOnly 
True 
Ta bStop 
False 
Print Button 
Name 
PrintButtou 
Text 
Print &Form 
CalculateButton 
Name 
Calculate Button 
Text 
&Calculate 
ClearButton 
Name 
Clear Button 
Text 
Clear &Sale 
ExitButton 
Name 
ExitButton 
Text 
E&xit 
(llau Lhe Event Procedm·e.s 
Su1ce you have four buttons, you need to plan the actions for four event pro-
cedures. 
Event Procedure 
PrintButton_Click 
CalculateButton_CUck 
ClearButton_Ciick 
Jo:xitllutton_Click 
Actiou ... Pseudoeode 
Set the print action lo preview. 
Print the fom1. 
Declare the variables. 
Convert the input Quantity and Price to numeric. 
Calculate Ex1ended Price = Quantity * Price. 
Calculate and round: Discount = Extended Price • Discount Rate. 
Calculate Discow1ted Price = E.xtended Price - Discount 
Format and display the output in text boxes. 
Clear each le.xl box. 
Set the focus in the iirsttext box. 
t::xit the project. 
131 

132 
l ' 
C 
Variables, Constants. aJul Calculations 
Wl'ile the Pl'oject 
Follow the sketch in Figure 3.5 to create the form. Figure 3.6 shows the com-
pleted form. 
l. Set the properties of each object. as you have planned. 
2. Write the code. Working from the pseudocode. write each event 
procedure. 
3. When you complete the code. use a variety of test data to thoroughly 
test the project. 
'i2 rt n R lor Reading 'n Refreshment 
I=.!.(§] ....a..~ 
Book Sales 
Q.u""ltY 
,-
1 ---~ 
~· 
~~~~--------
Ex!cnded Prk:e 
1 5%0i~oour.t 
Pont foom II Calculate II Oear Sale I ~ 
Note: If the user enters no1mumeric data or leaves a numeric field blank. 
the program will cancel with a run-time error. In the "Handling Exceptions" 
section that follows this program, you will learn to handle the errors. 
Tl1e P1·ojec t Coding Solution 
'Project: 
'Date: 
'Programmer: 
'Description: 
Chapter Example BookSale 
June 2010 
Bradley/Millspaugh 
This project inputs sales information for books. 
It calculates the extended price and discount for 
a sale. 
Uses variables, constants, and calculations . 
The form for the calculation 
programming example 
Note that no error trapping is included in this version 
of the program. 
'Folder: 
Ch03BookSale 
Public Class BookSaleForm 
' Declare the constant . 
Const DISCOUNT_RATE_Decimal As Decimal - 0. 150 

C 
II 
A 
1• 
'I' 
" 
ll 
Private Sub PrintButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles PrintButton .Click 
' Print the form. 
PrintForm1 .PrintAction = Printing.PrintAction .PrintToPreview 
PrintForm1 .Print() 
End Sub 
Private Sub CalculateButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles CalculateButton .Click 
' Calculate the price and discount. 
Dim auantityinteger As Integer 
Dim PriceDecimal, ExtendedPriceDecimal, DiscountDecimal, 
DiscountedPriceDecimal As Decimal 
' Convert input values to numeric variables. 
auantityinteger = Integer.Parse(Quant ityTextBox .Text) 
PriceDecimal = Decimal.Parse(PriceTextBox .Text) 
' Calculate values. 
ExtendedPriceDecimal = auantitylnteger * PriceDecimal 
DiscountDecimal = Decimal.Round( 
(ExtendedPriceDecimal * DISCOUNT_RATE_Decimal), 2) 
DiscountedPriceDecimal = ExtendedPriceDecimal - DiscountDecimal 
' Format and display answers. 
ExtendedPriceTextBox.Text = ExtendedPriceDecimal.ToString( "C") 
DiscountTextBox .Text = DiscountDecimal.ToString( "N") 
DiscountedPriceTextBox.Text = DiscountedPriceDecimal .ToString( "C") 
End Sub 
Private Sub ClearButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles clearButton .Click 
' Clear previous amounts from the form. 
TitleTextBox .Clear() 
PriceTextBox .Clear() 
ExtendedPriceTextBox. Clear() 
DiscountTextBox .Clear() 
DiscountedPriceTextBox.Clear() 
With auantityTextBox 
. Clear() 
. Focus() 
End With 
End Sub 
Private Sub ExitButton_Click(ByVal sender As System.Object, 
ByVal e As System. EventArgs) Handles ExitButton. Click 
' Exit the project. 
Me. Close() 
End Sub 
End Class 
Handling Exceptions 
When you allow users to input numbers and use those numbers in calculations. 
lots of things can go wrong. The Parse methods. Integer. Parse and 
Decimal. Parse, fail if the user enters nonnumeric data or leaves the text box 
-
133 

134 
l ' 
C 
Variables, Constants. aJul Calculations 
blank. Or your user may enter a number that results in an attempt to divide by 
zero. Each of those situations causes an except.ion to occur. or. as program-
mers like to say, throws an exception. 
You can easily "catch" program exceptions by using structured exception 
handling. You catch the exceptions before they can cause a run-time error. and 
handle the situation, if possible, within the program. Catching exceptions as they 
happen and writing code to take care of the problems is called exception handling. 
The exception handling in Visual Studio is standardized for all of the languages 
using the Common Language Runtime. which greatly improves on the old 
error trapping in early versions of VB. 
T•·y/Catch Blocks 
To trap or catch exceptions. enclose any statement(s) that might cause an error 
in a Try/Cat ch block. If an exception occurs while the statements in the 
Try block are executing, program control transfers to the Catch block: if a 
Finally statement is included, the code in that section executes last, whether 
or not an exception occurred. 
The Try IUock-Geueral Form 
Try 
Statements that may cause an error. 
Catch [VariableName As ExceptionType) 
statements tor action when an exception occurs. 
[Finally 
' Statements that always execute before exit of the Try block) 
End Try 
The Tr·y Hlock-Ex:unple 
~ 
~ 
Try 
t 
Quantity! nteger = Integer . Parse (OuantityTextBox. Text) 
~ 
auantityTextBox .Text = auantityinteger. ToString() 
Catch 
Messagelabel. Text = "Error in input data. " 
End Try 
The Catch as it appears in the preceding example will catch any exception. 
You also can specify the type of exception that you want to catch, and even 
'\Tile several Catch statements, each to catch a different type of exception. For 
example. you might want to display one message for bad input data and a dif-
ferent message for a calculation problem. 
To specify a particular type of exception to catch. use one of the predefined 
exception classes. which are all based on. or derived from. the SystemExcep-
tion class. Table 3.2 shows some of the common exception classes. 
To catch bad input data that cannot be converted to numeric. write this 
Catch statement: 
Catch TheException As FormatException 
MessageLabel. Text = "Error in input data.' 
In the Editor window, rype ' Try" and 
press Ente<. The editor will insert a 
skeleton Try !Catch block. • 

C
II
,\I>'I'
I'
R 
The Excc(Hiou CJass 
Each exception is an instance of the Exception class. The properties of this class 
allow you to detennine the code location of the error, the type of error. and the 
cause. The Message property contains a text message about the error. and the 
Source property contains the name of the object causing the error. The Stack-
Trace property can identify the location in the code where the error occurred. 
Common Exception Classes 
FormatException 
lnvalidCastException 
ArithmeticException 
System.IO .. EndO£StreamException 
OutOfMe moryExce ption 
Exception 
Caused By 
Failure of a numeric conversion. s uch as 
Integer. Parse or Decimal. Parse. 
Usually blank or nonnumeric data. 
Failure of a con version operation. May be caused 
by los:lil of 9igni6cant digits or an illegal 
conversion. 
A calculation error, s uch as division by zero or 
overflow of a variable. 
Failure of an input or output operation such as 
reading from a file. 
Not enough memory to create an object. 
Generic. 
You can include the text message associated with the type of exception by 
specifying the Message property of the Exception object. as declared by the 
variable you named on the Catch statement. Be aware that the messages for ex-
ceptions are usually somewhat terse and not oriented to users. but they can 
sometimes be helpful. 
Catch TheException As FormatException 
1' abl e !1.2 
Messagelabel. Text = "Error in input data: " & TheException. Message 
Handling Multiple Exceptions 
If you want to trap for more than one type of exception, you can include multi-
ple Catch blocks (handlers). When an exception occurs. the Catch statements 
are checked in sequence. The first one with a matching exception type is used. 
Catch TheException As FormatException 
' Statements for nonnumeric data . 
Catch TheException As ArithmeticException 
' Statements for calculation problem. 
Catch TheException As Exception 
' Statements for any other exception. 
The last Catch will handle any exceptions that do not match either of the first 
two exception types. Note that it is acceptable to use the same variable name 
for muliiple Catch statemenis; each Catch represents a separate code block. so 
the variable's scope is only that block. 
Later in this chapter in the "Testing Multiple Fields" section. you will see 
how to nest one Try I Catch block inside another one. 
13S 

136 
v 
S 
l l 
,\ 
I. 
C 
Variables. Comtants. and Calculations 
Displaying Messages in Message Boxes · 
You may want to display a message when the user has entered invalid data or 
neglected to enter a required data value. You can display a message to the 
user in a message box. which is a special type of window. You can specify the 
message. an optional icon. title bar text, and button(s) for the message box 
(Figure 3.7). 
1lvo sample message bo~·es created with the MessageBox class. 
Figure 3 . 7 
Coffee Sales Summary 
You haveentEnd an invalid amount. Try agai·n. 
OK 
a. 
b. 
You use the Show method of the MessageBox object to display a message 
box. The MessageBox object is a predefined instance of the MessageBox class 
that you can use any time you need to display a message. 
TlH~ 1\'Jcs~<age Box Object-General Forms 
There is more than one way to call the Show method. Each of the following 
statements is a valid call: you can choose the fonnat you want to use. It's very 
important that the arguments you supply exactly match one of the fonnats. 
For example. you cannot reverse, transpose. or leave out any of the argu-
ments. When there are multiple ways to call a method, the method is said to 
be overloaded. See the section "Using Overloaded Methods" later in this 
chapter. 
MessageBox.Show(TextMessage) 
MessageBox.Show(ToxtMossago, TitlobarToxt) 
o Number of Orde1s.: 3 
Total Sales' Sl8.32 
Average Sale $12.77 
OK 
MessageBox.Show(TextMessage, TitlebarText, MessageBoxButtons) 
MessageBox.Show(TextMessage, TitlebarText, MessageBoxButtons, MessageBoxicon) 
The TextMessage is the message you want to appear in the message box. 
The TitlebarText appears on the title bar of the MessageBox window. The Mes-
sageBoxButtons argument specifies the buttons to display. And the Message-
Boxlcon determines the icon to display. 

C 
II 
A 
1• 
'I' 
" 
ll 
137 
The AlessageBox Statement-Examples 
~ r-----------------------------------------------------------~ 
~ 
MessageBox.Show("Enter numeric data. ") 
t: 
~ MessageBox .Show( "Try again." , "Data Entry Error") 
fl 
MessageBox .Show( "This is a message." , "This is a title bar", MessageBoxButtons.OK) 
Try 
auantitylnteger = Integer.Parse(OuantityTextBox.Text) 
auantityTextBox .Text = auantitylnteger.ToString() 
Catch ex As FormatException 
MessageBox .Show( "Nonnumeric Data. ", "Error", 
MessageBoxButtons.OK, MessageBoxicon.Exclamation) 
End Try 
The Textl\1essage Stt·ing 
The message string you display may be a string literal enclosed in quotes or it 
may be a string variable. You also may want to concatenate several items, for 
example. combining a literal with a value from a variable. If the message you 
specify is too long for one line. Visual Basic will 1nap it to the next line. 
The Titlcbat· Text 
The string that you specify for TitlebarText will appear in the title bar of the 
message box. If you choose the first form of the Show method. without the 
TitlebarText. the title bar will appear empty. 
}lessage BoxBuuons 
When you show a message box. you can specify the button(s) to display. In Chap-
ter 4, after you leam to make selections using the If statement. you will display 
more than one button and take alternate actions based on which button the user 
clicks. You specify the buttons using the MessageBoxButtons constants from 
the MessageBox class. The choices are OK, OKCanoel, RetryCanceL YesNo. 
YesNoCancel, and AbortRetrylgnore. The default for the Show method is OK. so 
unless you specify otherwise. you will get only the OK button in your message box. 
Message Boxlcon 
The easy way to select the icon to display is to type MessageBoxlcon and ape-
riod into the editor; the IntelliSense list pops up with the complete list. The ac-
tual appearance of the icons varies from one operating system to another. You can 
see a description of the icons in Help under "MessageBoxlcon Enumeration." 
Constants fot· MessagcBoxl con 
Asteiisk 
Error 
Exclamation 
Hand 
Infmmation 
None 
Question 
Stop 
Warning 

138 
v 
s u ,, 
I, 
C 
Variables. Con.stants, and Calculations 
Using Oved oaded 1\felltods 
As you saw earlier, you can call the Show methocl with several different argu-
ment lists. This feature. called o·verloa.ding. allows the Show method to act 
differently for different arguments. Each argument list is called a sigtwtu.re. so 
you can say that the Show method has several signatures. 
When you call the Show method, the arguments that you supply must 
exactly match one of the signatures provided by the method. You must supply 
the correct number of arguments of the correct data type and in the correct 
sequence. 
Fortunately, the Visual Studio smart editor helps you enter the argu-
ments; you don't have to memorize or look up the argument lists. Type 
''MessageBox.ShowC' and lntelliSense pops up with the first of the signatures 
for the Show method (Figure 3.8). Notice in the figure that there are 21 possi-
ble forms of the argument list. or 21 signatures for the Show method. (We only 
showed 4 of the 21 signatures in the previous example, to simplify the concept.) 
To select the signature that you want to use, use the up or down arrows at 
the left end of the IntelliSense popup. For example. to select the signature that 
needs only the text of the message and the title bar caption, select the second for-
mat (Figure 3.9). The argument that you are expected to enter is shown in bold. 
and a description of that argument appears in the last line of the popup. After 
you type the text of the message and a comma. the second argument appears in 
bold and the description changes to tell you about that argument (l'igure 3.10). 
HessageBox, Showd 
• 1 of 21 Y Show(teKt As String) As System.Windows.Forms.DiatogResult 
Displays a message box with specified text. 
text: The text to display in the message box 
MessageBox, Show( 
• 2 of 21 "' Show(teKt As String, caption As String) As System.Windows.Forms.DialogResult 
Displays a message box with specified text and caption. 
text: The tm to dis~ lay in the message box. 
MessageBox . Show( "Inval id data entered. •• Jl 
• 1 of 10 Y Show(text As String, ca·ption As String) As System.Windows.Forms.DiatogResult 
Displays a message box: with specified text and caption. 
caption: The text to display in the title bar of the message box. 
1~11 i I :I 
Y au con use the keyboard up 
and down arrow keys rather than 
the mouse to view and select the 
signature. • 
F i " n1•e 3 .8 
lntelliSense pops up the first of 
21 signatures for the Show 
method. Use the up and d=n 
arrows to see the other possible 
argument lists. 
Select the second signature to see 
the argument list. The currently 
selected argument is sh=n in 
bold, and the description of the 
argument appears in the last 
line of the popup. 
Fig n••e 3 . 1 0 
Type the first argument and a 
comma. a.nd lntelUSen.se bold..s 
the second argument and 
displays a description of the 
needed data. 

C
II
,\I>
'I'
I'
R 
Testing l\fnlliple Fields 
When you have more than one input field, each field presents an opportunity 
for an exception.lf you would like your exception messages to indicate the field 
I hal causeJ the errur. you cau ue::;L oue TI'Y /Catch Llock iusiJe another one. 
Nested Tt·y/C:ucb Blocks 
One Try I Catch block that is completely contained inside another one is called 
a uested Try /Catch block. You can nest another Try /Catch block within the 
Try block or the Catch block. 
Try 
' Outer try block for first field. 
' Convert first field to numeric . 
Try 
' Inner Try block for second field . 
Convert second field to numeric . 
' Perf orm the cal cul at ions for the fie l ds that passed convers i on. 
Catch SecondException As FormatException 
' Handle any exceptions for the second field . 
' Display a message and reset the focus for the second field . 
End Try ' End of inner Try blocK for second field. 
Catch FirstException As FormatException 
' Handle exceptions for first field . 
' Display a message and reset the focus for the first field . 
Catch AnyOtherException as Exception 
' Handle any generic exceptions. 
' Display a message. 
End Try 
You can nest the Try /Catch blocks as deeply as you need. Make sure to 
place the calculations within the most deeply nested Try; you do not want to 
perfonn the calculations unless all of the input values are converted without an 
exception. 
By testing each Parse method individually. you can be specific about 
which field caused the error and set the focus back to the field in error. Also. 
by using tl1e SelectAll method of the text box. you can make the text appear 
selected to aid the user. Here are the calculations from the earlier program, 
rewritten with nested Try /Catch blocks. 
Private Sub CalculateButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles CalculateButton .Click 
' Calculate the price and discount. 
Dim ouantityinteger As Integer 
Dim PriceDecimal, ExtendedPriceDecimal, DiscountDecimal, 
DiscountedPriceDecimal, AverageDiscountDecimal As Decimal 
Try 
' Convert quantity to numeric variables. 
auantityinteger = Int eger .Parse(QuantityTextBox.Text) 
Try 
' Convert price if quantity was successful. 
PriceDecimal = Decimal. Parse (PriceTextBox . Text) 
139 

140 
v 
S 
l l 
,\ 
I. 
C 
Variables. Comtants. and Calculations 
' Calculate values for sale. 
ExtendedPriceDecimal = auantitylnteger • PriceDecimal 
DiscountDecimal = Decimal.Round( 
(ExtendedPriceDecimal • DISCOUNT_RATE_Decimal), 2) 
DiscountedPriceDecimal = ExtendedPriceDecimal - DiscountDecimal 
' Calculate summary values. 
auantitysumlnteger += auantitylnteger 
DiscountSumDecimal += DiscountDecimal 
DiscountedPricesumDecimal += DiscountedPriceDecimal 
SaleCountinteger += 1 
AverageDiscountDecimal = DiscountSumDecimal 1 SaleCountinteger 
' Format and display answers for the sale. 
ExtendedPriceTextBox. Text = ExtendedPriceDecimal. ToString ( "C") 
DiscountTextBox. Text - DiscountDecirnal. ToString( "N" ) 
OiscountadPriceTextBox, Text = OiscountadPriceoecimal, ToString ( "c ") 
· Format and display summary values. 
auantitySumTextBox.Text = auantitySuminteger.ToString() 
DiscountSumTextBox.Text = DiscountSumDecimal.ToString( "C") 
DiscountAmountSumTextBox.Text = DiscountedPricesumDecimal.ToString( "C") 
AverageDiscountTextBox. Text = AVerageDiscountDecimal . ToString ( "c " ) 
Catch PriceException As FormatException 
· Handle a price exception. 
MessageBox .ShOw( "Price must be numeric." , "Data Entry Error", 
MessageBoxButtons.OK, MessageBoxicon.Exclamation) 
With PriceTextBox 
. Focus() 
. SelectAll () 
End With 
End Try 
Catch auantityException As FormatException 
' Handle a quantity exception. 
MessageBox .Show( "Quantity must be numeric. ", "Data Entry Error", 
MessageBoxButtons .OK, MessageBoxicon.Exclamation) 
With auantityTextBox 
.Focus() 
. SelectAll () 
End With 
Catch AnException As Exception 
' Handle any other exception. 
MessageBox .Show( "Error : " & An Exception. Message) 
End Try 
End Sub 
Counting and Accumulating Sums 
Programs often need to calculate the sum of numbers. For example. in the pre-
vious programming exercise. each sale is displayed individually. If you want to 
nccumulntc totnls of the snlcs amounts, of the discounts, or of the number of 
books sold. you need some new variables and new techniques. 
As you know. the variables you declare inside a procedure are local to that 
procedure. They are re-created each time the procedure is called; that is. their 
lifetime is one time through the procedure. Each time the procedure is entered. 
you have a new fresh variable with an initial value of 0. Jf you want a variable 
to retain its value for multiple calls. in order to accumulate totals. you must 

C 
II 
A 
1• 
1' 
t: 
R 
declare the variable as modttle level. (Another approach. using Static variables. 
is discussed in Chapter 7.) 
Smnmin~ N umbe 1·s 
The technique for summing the sales amounts for multiple sales is to declare a 
module-level variable for the total. Then. in the Calculate Button_Ciick event 
procedure for each sale. add the current amow1tto the total: 
DiscountedPricesumoecimal += DiscountedPriceOecimal 
This assi£nment statement adds the current value for DiscountedPriceDec-
imal into the sum held in DiscountedPriceSumDecimal. 
Countin~ 
lf you want to count something, such as the nwnberof sales in the previous exam-
ple. you need another module-level variable. Declare a counter variable as integer: 
Private SaleCountinteger as Integer 
TI1en. in the calculateButton_Ciick event procedure. add l to the cow1ter 
variable: 
Sal eCountinteger += 1 
Titis statement adds l to the current contents of SaleCountlnteger. The state-
ment ,~;)] execute one time for each time the CalculateButton_Click event pro-
cedure executes. Therefore. SaleCountinteger will always hold a running count 
of the number of sales. 
Cal cuJalin~ an AV£•rag-e 
To calculate an average. divide the sum of the items by the count of the items. 
In the R 'n R book example. we can calculate the average sale by dividing the 
sum of the discounted prices by the count of the sales: 
AverageDiscountedSaleDecimal = DiscountedPricesumoecimal 1 SaleCountinteger 
141 
Your Hands-On Programming Example --------
In this project. R 'n R-for Reading ' n Refreshment needs to expand the book 
sale project done previously in this chapter. In addition to calculating individ-
ual sales and discounts. management wants to know the total number of books 
sold. the totaJ number of discounts given. the total discounted amount. and the 
average discou.nt per saJe. 
Help the user by adding ToolTips wherever you think they will be useful. 
Add error handling to the program. so that missing or nonnumeric data ,~;u 
not cause a run-time error. 
ftl:llluin~ the P roject 
Sketch a form (Figure 3.11) that your users sign off as meeting their needs. 

142 
\ 
s 
l 
.\ 
l 
G 
.\ 
S 
t • 
VIJI'iabl .. , Corutant•. a111l Calculalwns 
Book5aleForm 
·~ 
Book Sales 
Quantlty I 
I 
Iftlt: 
I 
fYice 
I 
I 
Extended Pt1ce 
157. Dl6count 
Discounted Price 
1 4"~ 
J+-1-t-
J+-~ 
1--
I 
~ 
I 
J+-I-f-
I 
]+-I-f-
GroupBox1 
QuantltyT~Box 
ntleTextBox 
rr· ceTextBox 
GroupBox2 
~nde.:tPrtceTextBox 
Di&eountT~Box 
Di&eoun~dPHceTextBox 
t' ljtnre 3 . 11 
A planning sketch of the form 
for the hands-on programming 
example. 
Summ"ry 
Total Numl1er of Books 
I 
Total Discounts Given 
I 
Total Discounted /\mounts 
I 
Avera!Je Discount 
I 
j4" )..--
]+-1-j-
J+-r-~ 
]+-r-f-
]+-r-~ 
GroupBox3 
Quantlty5umTextBox 
Di&eountSumTextBox 
Di&eoun~dAmount5umTextBox 
A~erageDiscountTextBox 
IPrint Formllcalculat.el lclear Salel I Exit I 
i 
i 
'\ 
'\ 
\ 
\ 
\ 
""' 
PlintButton Calcula~Button ClearButton EXItButton 
Plan the Objects and Properties Plan the property settings for the form and 
each control. These objects and properties are the same as the previous exam-
ple. with the addition of the summary information beginning with GroupBox3. 
Note: The TooiTips have not been added to the planning fonns. Make up 
11.11d odd your own. 
O bjeet 
BookSaleFocm 
LabeiJ 
GroupBoxl 
Label2 
P roJ>erty 
Name 
Text 
AcceptButton 
Cancel Button 
Te~t 
FCIIlt 
Name 
Text 
Text 
s .. uin~ 
BookSaleFonn 
R "n R for Reading 'n Refreshment 
Calculate Button 
ClearButton 
Book Sales 
Bold. 12 point 
Grou pBoxl 
(blank) 
&Quantity 

c 
II ,, •• 
T 
E 
R 
:J 
143 
OLjeet 
Prot>er1y 
Selling 
QuantityTextBox 
Name 
QuantityTextBox 
Text 
(bla,.k) 
Label3 
Text 
&Title 
TitleTcxtBox 
Name 
TitleTextBmt 
Text 
(blank) 
Label <I 
Text 
&Price 
PriceTextBox 
Name 
Price Text Box 
Text 
(blank) 
GroupBox2 
Name 
GroupBox2 
Text 
(blank) 
LabelS 
Text 
Extende<l Price 
ExtendedPriceTextBox 
Name 
Extende<IPriceTextBox 
Text 
(blaok) 
Read Only 
True 
TexLAiign 
Right 
Lubel6 
Text 
15% Oil!<:ount 
DiscountTextBox 
Name 
DiocountTeltt Box 
Text 
(blank) 
Read Only 
True 
TexLAlign 
Rig~t 
Lubel7 
Text 
Diocounted Price 
Di$countedPriceTe.~tBo.~ 
Name 
Oi~K:OltntedPriceTexlBo:x 
Text 
(blank) 
TextAlign 
Rig~t 
Read Only 
True 
PrintButton 
Name 
PrirdButton 
Text 
Print &Form 
Calculate Button 
Name 
CalculateButton 
Text 
&Calculate 
ClearButton 
Name 
Cle.aButlon 
Texl 
Clear &Sale 
ExitButton 
Name 
ExitButton 
Text 
E&xit 
GroupBox3 
Name 
Group8ox3 
Text 
Summary 
LabelS 
Text 
Total Numher of BooL:a 
QuantitySumTextBox 
Name 
Qu,mtitySumTextBox 
Text 
(Blank) 
Read Only 
True 
TexLAiign 
RigLt 
Label9 
Text 
Total Discounts Given 

144 
Objec t 
DiscountSumTe l-1 Box 
LahellO 
s 
l 
Propet·l)' 
Name 
Text 
Read Only 
TexLAiign 
Text 
\ 
L 
It 
\ 
.. 
s .. ""'ll 
OiscoUDtSum TextBox 
(blank) 
True 
Right 
Total Discounted Amounts 
C 
VCJTiabla. Corutanl.,, and Calculations 
Discounted.AmountSwnTextBox 
Name 
Text 
OiscountedAmountSumTextBox 
(blank) 
Labell I 
AverageDiscountTe xtBox 
Read Only 
TextAlign 
Text 
Name 
Text 
Read Only 
TextAiign 
True 
Right 
Average Discount 
AverageOiscountTextBox 
(blank) 
True 
Right 
Plan I he Event Procedure::. The planning that you did for the previous example 
will save you time now. The only procedure that requires more steps is the Cal-
culate Button_ Click event. 
Event Proce.-1 ure 
Print Button_ Click 
CalculateButton_Ciick 
ClearButton_Click 
ExitButton_Click 
Actio ns-Pi!clulof'oc:le 
Set the print acr-ion to preview. 
Print the Conn. 
Declare the variables. 
Try 
Convert the input Quantity to numeric. 
Try 
Convert the input Price to numeric 
Calculate Extend e.! Price = Quantity • Price. 
Calculate Discount= Extende.l Price • Di•count Rate. 
Calculate Discounted Price = Extende<l Price- Discoont. 
Calculate the oumruary values: 
Add Quantity to Quantity Sum. 
Add Di"""unt to Discount Sum. 
Add Diocounte<l Price to Discoonted Price Sum. 
Add I to Sale Count. 
Calculate Average Discount = Discount Sum I Sale Count. 
Format and display sale output. 
Format and display summary •alues. 
Catch any Price exception 
Display error message and resat the focus to Price. 
Catch any Quantity exception 
Display error message and reset the focus to Quantity. 
Catch any generic exception 
Display error message. 
Clear each text box except Summary fieJ.:ls. 
Set the focus in the first text boL 
Exit the project. 

C 
II 
1\ 
I' 
T 
E 
ll 
" 'rite the Project Follow the sketch in Figure 3.11 to create the form. Figure 
3.12 shows the completed form. 
• 
Set the properties of each of the objects. as you have planned. 
• 
Write the code. Working from the pseudocode. write each event procedure. 
• 
When you complete the code. use a variety of test data to thoroughly test 
the project. Test "; th nonnumeric data and blank entries. 
olil II 'n R fa f!eading 'n Ref•es~ment 
Book Sales 
TCial OICOUl"lsGlven 
Tcaol Dscotned l'rrolftl 
PtirtE•m 
I
I ~ 
... II a. .. s.to 
I ~ 
11w l~t·ojN'I Codlug Solution 
'Project : 
'Date: 
'Programmer: 
'Description : 
'Folder: 
Ch03Hands0n 
June 2010 
Bradley/Millspaugh 
This project inputs sales information for books. 
It calculates the extended price and discount for 
a sale and maintains summary information for all 
sales. 
Uses variables , constants, calculations , error 
handling, and a message box to the user. 
Ch03HandsOn 
The form for the hands-on 
programming example. 
14S 

146 
\ 
S 
L 
\ 
I. 
ll 
\ 
s 
C 
Variable>. CoiUtanl.,, and Calculationv 
Public Class BookSaleForm 
' Decl are module-level variables and constants. 
Private QuantitySumi nteger, SaleCounti nteger As Integer 
Private DiscountSumDecimal, DiscountedPriceSumDecimal As Decimal 
Const DISCOUNT_RATE_Decimal As Decimal = 0. 15D 
Private Sub PrintButton_Click(ByVal sender As System.Object , 
ByVal e As System.EventArgs) Handles PrintButton.Click 
' Print the form. 
PrintForm1.PrintAction = Printing.PrintAction .PrintToPreview 
PrintForm1 . Print() 
End Sub 
Private Sub CalculateButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles CalculateButton.Click 
' Calculate the price and discount. 
Dim auantityinteger As Integer 
Dim PriceDecimal, ExtendedPriceDecimal, DiscountDecimal, 
DiscountedPriceDecimal, AverageDiscountDecimal As Decimal 
Try 
' Convert quantity to numeric variable. 
auantityinteger = Integer .Parse(QuantityTextBox.Text) 
Try 
' Convert price if quantity was successful . 
Priceoecimal = Decimal.Parse(PriceTextBox_Text) 
' Calculate values for sale. 
ExtendedPriceDecimal = auantityinteger * PriceDecimal 
DiscountDecimal = Decimal.Round( 
(ExtendedPriceDecimal * DISCO~NT RATE Decimal), 2) 
DiscountedPriceDecimal = ExtendedPriceOecimal - DiscountDecimal 
' Calculate summary values. 
auantitySuminteger += auantityrnteger 
DiscountSumDecimal += DiscountOecimal 
Discount edPricesumDecimal += DiscountedPriceDecimal 
SaleCountinteger += 1 
AverageOiscountDecimal = Discountsumoecimal 1 SaleCountlnteger 
' Format and display answers for the sale. 
ExtendedPriceTextBox _Text = ExtendedPriceDecimal. ToString ( 'C") 
DiscountText Box . Text = DiscountDecimal. ToString( "N") 
DiscountedPriceText Box.Text = OiscountedPriceDecimal.ToString('C' ) 
' Format and display summary values. 
auantitySumTextBox.Text = auantitySuminteger.ToString() 
DiscountSumTextBox.Text = DiscountSumDecimal .ToSt r ing( "C") 
DiscountAmountSumTextBox.Text : DiscountedPriceSumDecimal.ToString( 'C' ) 
AverageDiscountTextBox_Text = AverageDiscountDecimal.ToString('C' ) 
Catch PriceException As FormatException 
' Handle a price exception. 
MessageBox.Show( ' Price must be numeric. •, "Data Entry Error•, 
MessageBoxButtons .OK, MessageBoxicon.Exclamation) 
With PriceTextBox 
.Focus() 
.SelectAll{) 
End With 
End Try 

C 
II 
A 
I' 
T 
E 
R 
catch auantityException As FormatException 
' Handle a quantity exception. 
MessageBox. Show( ' Quantity must be numeric .", "Dat a Entry Error", 
MessageBoxButtons .OK, MessageBoxicon.Exclamat ion) 
With QuantityTextBox 
. Focus() 
. SelectAll () 
End With 
Catch AnException As Exception 
' Handle any other exception. 
MessageBox.Show( ' Error: • & AnException.Message) 
End Try 
End Sub 
Private Sub ClearButton_Click(ByVal sender As Syst em.Object , 
ByVal e As System.EventArgs ) Handles ClearButton. Click 
' Clear previous amounts from the form. 
TitleTextBox.Clear() 
PriceTextBox.Clear() 
ExtendedPriceTextBox.Clear() 
DiscountTextBox .Clear( ) 
DiscountedPriceTextBox.Clear( ) 
With auantityTextBox 
. Clear() 
. Focus() 
End With 
End Sub 
Private Sub ExitButton_Click (ByVal sender As system.Object, 
ByVal e As System.EventArgs) Handles ExitButton.Click 
' Exit the project. 
Me.Close() 
End Sub 
End Class 
l. Variables are temporary memory locations that have a name (called an 
identifier). a data type, and a scope. A co!llltant also has a name, data type, 
and scope. but it also must have a value assigned to it when it is declared. 
The value stored in a variable can be changed during the execution of the 
project: the values stored in constants cannot change. 
2. The data type determines what type of values may be assigned to a variable 
or constant. The most common data types are SITing. Integer. Decimal. 
Single. and Boolean. 
3. Identifiers for variables and constants must follow the Visual Basic naming 
rules and should follow good naming standards. called conventions. An 
identifier should be meaningful and have the data type appended at the 
147 

148 
\ 
S 
U 
\ 
L 
11 
.\ 
s 
C 
Variabl ... Corutanl•. ami CalculatioM 
end. Variable names should begin with an uppercase character and be 
mixed upper- and lowercase. while constants are all uppercase. 
4 . Identifiers should include the data type of the variable or constant. 
5. Intrinsic constants. such as Color.Red and Color. Blue. are predefined and 
built into the .NET Frame~t·ork. Named constants are programmer-defined 
constants and are declared using the Const statement. The location of the 
Const statement determines the scope of the constant. 
6. Variables are declared using the Private or Dim statement; the location of 
the statement determines the scope of the variable. Use the Dim statement 
to declare local variables inside a procedure; use the Private statement to 
declare module-level variables at the lop of the program. outside of any 
procedure. 
7. The scope of a variable may be namespace level. module level. local. or 
block level. Block-level and local variables are available only 1\ilhin the 
procedure in which they are declared: module-level variables are accessible 
in all procedures within a torm; namespace variables are available in all pro-
cedures of all classes in a namespace. ~t-hich is usually the entire project. 
8. The Hfelime of local and block-level variables is one execution of the pro-
cedure in which they are declared. The lifetime of module-level variables 
is the length of time that the form is loaded. 
9. Use the Parse methods to conve11 text values to numeric before perform-
ing any calculations. 
10 . Calculations may be performed using the values of numeric variables. con-
stants. and the properties of controls. The result of a calculation may be as-
signed to a numeric variable or to the property of a control. 
Ll. A calculation operation with more than one operator follows the order of 
precedence in detennining the result of the calculation. Parentheses alter 
the order of ope rat ions. 
12. To explicitly convert between numeric data types. use tl1e Convert class. 
Some conversions can be performed implicitly. 
13. The Decimal. Round method rounds a decimal value to the specified num-
ber of decimal positions. 
14. The ToString metl1od can be used to specify tl1e appearance of values for 
display. By using fom1atting codes. you can specify dollar signs. commas. 
percent signs. and the number of decimal digits to display. The method 
rounds values to fit the fom1at. 
15. Try /Catch/ Finally statements provide a technique for checking for user 
errors such as blank or nonnumeric data or an entry that might result in a 
calculation error. 
16 . A run-time error is called an exception: catching and taking care of excep-
tions is called error trapping and error handling. 
17. You can trap for different types of errors by specifying the exception ty pe 
on the Catch statement. and you can have multiple Catch statements to 
catch more than one type of exception. Each exception is an instance of the 
Exception class: you can refer to the properties of the Exception object for 
furtl1er inf01mation. 
18 . A message box is a windmv for displaying information to the user. 
19 . The Show metJ10d of the MessageBox class is overloaded. which means that 
the method may be called with different argument lists. called signatures. 
20. You can calculate a sum by adding each transaction to a module-level vari-
able. In a similar fashion. you can calculate a count by adding to a module-
level variable. 

C
ll
i\
I'
T
E
II 
argument 
116 
assignment operator 120 
block-level variable 113 
casting 124 
cla>s-level variable 113 
constant 106 
data type 107 
declaration 107 
exception 134 
expHcit conversion 
124 
formal 
127 
formal specifier 127 
identifier 
107 
implicit conversion 
123 
intrinsic constant 
111 
lifetime 113 
local variable 
113 
MessageBox 
136 
module-level variable 
113 
named constant 1 07 
namespace-level variable 
I 13 
nested Try /Catch block 
139 
Option Explicit 
121 
Option Strict 121 
order of precedence 119 
overloading 
138 
scope 
ll3 
Show method 136 
signature 138 
string literal 
110 
strongly typed 
122 
Try / Catch block 
134 
variable 106 
l. Name and give the purpose of five data types available in Visual Basic. 
2. What does declaring a variabk mean? 
3. What effect does the location of a declaration statement have on the vari-
able it declares? 
4. Explain the difference behveen a constant and a variable. 
5. Wlut is the purpose of the Integer. Parse method? the Decimal. Parse 
method? 
6. Explain the orde r of precedence of operators for calculations. 
7. What statement(s) can be used to declare a variable? 
8. Explain how to make an interest rate stored in RateDecimal display in 
Rate Text Box as a percentage with three decimal digits. 
9. What are implicit conversions? explicit conversion~? When would each be 
used? 
10. Wl1en should you use Try/ Catch blocks? Why? 
11. What is a message box and when should you use one? 
12. Explain why the MessageBox. Show method has multiple signatures. 
13. '\l'11y must you use module-level variables if you want to accumulate a run-
ning total of transactions? 
3.1 
Create a project that calculates the total of fat. carbohydrate. and protein 
calories. Allow the user to enter (in text boxes) Lhe grams of fat. the grams 
of carbohydrates. and the grams of protein. Each gram of fat is nine calo-
ries: a gram of protein or carbohydrate is four calories. 
Display the total calories for the cu!Tent food item in a text box. Use 
two other text boxes to display an accumulated sum of the calories and a 
count of the items entered. 
149 

ISO 
\ 
S 
l 
\ 
L 
IJ 
\ 
s 
( 
V(ll'iables. ConsWTils. and Cakulations 
Form: The fonn should have three text boxes for the user to enter the 
grams for each category. Include labels next to each text box indicating 
what the user is to enter. 
Include bullons to Calcufata. to Cl6ar the text boxes. to Print ths Form. 
and to Exit. 
Make the fonn's Text property ''Calorie Counter~. 
Cock: Write the code for each bullon. Make sure to catch any bad input 
data and display a mess:~ge box to the user. 
3.2 
Lennie McPherson. proprietor of Lennie's Bail Bonds. needs to calculate 
the amount due for selling bail. Lennie requires something of value as 
collateraL and his fee is 10 percent of the bail amount. He wants the 
screen to provide boxes to enter t11e bail amow1t and the item being used 
for collateral. The program must calculate the fee. 
Form: Include text boxe> for entering the amount of bail and the descrip-
tion of the collateral. Lobel each text box. 
Include buttons for Calculata. Clear. Print. and Exit. 
'llte lexl properly for the fonn should be "Lennie's Bail Bonds". 
Code: Include event procedures for the click event of each button. Calcu-
late the amount due us LO percent of ilie bail amount and display it in a 
text box. formalled as currency. Make sure to catch any bad input data 
and display a mE'Ssage to the user. 
3.3 In retail j;ales. management needs to know the average inventory figure and 
the tumover of merchandise. Create a project iliat allows the user to enter 
tbe beginning inventory. the ending inventory. and ilie cost of goods sold. 
Form: Include labeled text boxes for the beginning inventory. the ending 
inventory. and the cost of goods sold. After calculating the ans"·ers. dis-
play the average im·entory and the turnover formalled in text boxes. 
Include buttons for Calculate. Gear. Print. and Exit. The formulas for the 
calculations are 
A 
. 
1 
Be!inning inventory + Ending inventory 
verage mven ory = 
Turnover = Cost of good3 sold 
Average inventory 
2 
Note: The average imentory is expressed in dollars: the turnover is the 
number of limes the inventory tums over. 
Code: Include procedures for the click event of each button. Display thE' 
results in text boxes. Formal the average inventory as currency and the 
turnover as n number with one digit to the right of the decimal. Make sure 
to catch any bad input data and display a message to U1e user. 
Tv.•t IJaw 
Bep.iuu.ing 
Endint: 
Co~t or Good. SotJ 
Averu~~ L_ne ntury 
58500 
17000 
<WOOOO 
S52.750.00 
75300 
13600 
515400 
-l4..l50.00 
3000 
19600 
18000 
11.300.00 
Turno\cr 
7.6 
11.6 
1.2 

C
ll
i\
I•T
t;
ll 
3.4 
A local recording studio rents its facilities for $200 per hour. Manage-
ment charges only for the number of minutes used. Create a project in 
~t•hich the input is th<' name of the group and the nwnber of minutes it 
used the studio. Your program calculates the appropriate charges. accu-
mulates the total charges for all groups. and computes the average charge 
and the number of groups that used the studio. 
Form: Use labeled text boxes for the name of the group and the number of 
minutes used. The charges for the current group should be displayed for-
matted in a text box. Create a group box for the summary infonnation. In-
side the group box. display the total charges for all groups. the number of 
groups. and the average charge per group. Fonnat all output appropri-
ately. Include buttons for Calculat9. Clear, Print. and Exit. 
Code: Use a constant for the rental rate per hour. divide that by 60 to 
gel the rental rate per minute. Do not allow bad input data to cancel the 
progrwn. 
TeM /)aw 
G ro UJl 
Pooches 
Hounds 
Mutts 
Total Cl' nr;:"A 
fo r Gro up 
S316.67 
S16.67 
$1.600.00 
1\olin ui(•A 
95 
5 
480 
To1ltl 
umber 
of Grout"' 
2 
3 
A'\-er~ae 
Total C~ 
Cho:r~ 
for All Gr·oul"' 
$316.67 
$316.67 
Sl66.67 
$333.33 
$6.WM 
$1933.33 
3.5 Create a project that determines the future value of an investment at a 
given interest rote for a given number of years. TI1e fonnula for the calcu-
lation is 
Future value = Investment amount * (1 + Interest rate) " Years 
Form: Use labeled text boxes for the amount of investment. the interest 
rate (as a decimal fraction). and the number of years the investment will 
be held. Display the future value in a text box formatted as currency. 
Include buttons for Calcu/ats. Claar. Print. and Exit. Format all dollar 
amounts. Display a message to the user for nonnumeric or missing input 
data. 
lSI 

1S2 
\ 
S 
l 
\ 
L 
u 
\ 
s 
l 
Variabln. Coruwnl,. and Calculations 
I 
TPM IJntrt 
Ani OUUI 
Ralr 
2000.00 
.15 
5 
123~.56 
.075 
3 
l:hPrk Fill'""·~ 
Ful u rt• Valuf" 
M.022.71 
Sl.5l3.69 
Hint: Remember that the result of an exponentialion operalion is a 
Double data type. 
3.6 Write a project tJ1at calculales 1he shipping charge for a package if the 
shipping rate is $0.12 per ounce. 
10 
Form: Use a masked text box for lhe package-identification code (a 
six-digil code) and labeled text boxes for the weight of the package---one 
box for pounds and another one for ow1ces. Use a text box to display the 
shipping charge. 
Include buttons for Calculate. Claar. Print. and Exit. 
Com!: Include e,·ent procedures for each button. Use a constant for the 
shipping rate. calculate the shipping charge. and display it formatted in a 
text box. Display a nleSl:age to the user for any bad input data. 
Calculation hint: There are 16 ounces in a poWld. 
Sh ipping Cha'1"' 
IM96P 
0 lb.5 oz. 
S0.60 
jl955K 
21b.O oz. 
$3.84 
zooooz 
ltb.t oz. 
$"2.M 
3. 7 Create a project for the local car rental agency that calculates rental 
charges. The agency charges Sl 5 per day plus $0.12 per mile. 
Form: Uso text boxes for tJ1e customer name. address. city. state. ZIP 
code. beginning odometer reading. ending odometer reading. and the 
number of days the car was used. Use text boxes to display the miles driven 
and the total charge. ronnat the output appropriately. 
Include buttons for Calculate. Claar. Print. and Exit. 
Code: Include an event procedure for each button. For the calculation. 
subtract tJ1e beginning odometer reading from the ending odometer read-
ing to get the number of miles traveled. Use a constant for the $15 per day 
charge and the $0.12 mileage rate. Display a message to the user for any 
bad input data. 

C
II
1\
I1
T
E
il 
3.8 Create a project that will input an employee's sales and calculate the 
gross pay. deductions. and net pay. Each employee will receive a base pay 
of $900 plus a sales commission of 6 percent of sales. 
After calculating the net pay. calculate the budget amount for each cat-
egory based on the percentages given. 
Pn.r 
Base pay 
S9<X>: use a ruuned constant 
6%uf•al•• 
Gro ... pay 
Swll of base pay and commiB•ion 
Deduction• 
18% of gross pay 
Net pay 
GroOll pay minus deduclion• 
1-lou•ing 
30% of ncl pay 
Food and clothing 
15% of ncl pay 
Enter1ainmenl 
50% of net pay 
Miscellaneous 
5% ol net pay 
Form; Use text boxes to input the employee's name and the dollar amount 
of the sales. Use text boxes to display the results of the calculations. 
Provide buttons for Calculate. Clear. Print. and Exit. Display a message 
to the user for any bad input data. 
VB lUaU Ord...-
153 
'111e company has instituted a bonus program to give 
its employees an incentive to sell more. For every dol-
lar the store makes in a four-week period, the employ-
ees receive 2 percent of sales. The amount of bonus 
each employee receives is based upon the percentage 
of hours he or she worked during the bonus period (a 
total of 160 hours). 
of the store's total sales. The amount of sales needs to 
be entered only for the first employee. (Hin~: Don't 
clear it.) 
The screen will allo11· the user to enter the em-
ployee's name. the total hours worked. and the amount 
The Calculate button will detennine the bonus 
earned by this employee. and the Clear button will 
clear only the name. hours-worked. and bonus amount 
fields. A Print button allows the user to print the form. 
Do not allow missing or bad input data to cancel the 
program: instead display a message to the user. 

154 
\ 
:" 
l l 
\ 
I. 
u \ s 
( ' 
~viablt•. Cofl.!llJn/,, and Calculations 
VB Auto C~nt~r 
Salespeople for used cars are compensated using a 
commission system. The commission is based on the 
costs incurred for the \'ehide: 
Commission= Commission rate • 
(Sales price- Cost value) 
The fom1 will allow the user to enter the sales-
person's name. the selling price of the vehicle. and the 
cost value of the vehicle. Use a constant of 20 percent 
for the commission rate. 
The Calculate button will determine the commis-
sion earned by the salesperson: the Clear button will 
clear the text boxes. A Print button allows the user to 
print the form. Do not allow bad input data to cancel 
the program: instead display a message to the user. 
VIdeo Bona•za I 
Design and code a project to calculate the amount due 
and provide a summary of rentals. All movies rent 
for $1.80 and all customers receive a 10 percent 
discount. 
The fom1 should contain input for the member 
number and the number of movies rented. Inside a 
group box. display the rental amount. the 10 percent 
discount. and the amount due. Inside a second group 
box. display the number of customers served and the 
total rental income (after discount). 
Include buttons for Calculate. Clear. Print. and Exit. 
The Clear button clears the information for the current 
rental but does not clear the summary information. A 
Print button allows the user to print the form. Do not 
allow bad input data to cancel the program: instead 
display a message to the user. 
Very \ 'ery BoardM 
Very Very Boards rents sno11i>oards during the sno11· 
season. A person can rent a ~no11·board without boots 
or with boots. Create a project that ll'ill calculate and 
display the information for each rental. In addition. 
calculate the summary information for each day's 
rentals. 
For each rental. input the person's name. the driv-
er's license or ID number. the number of snowboards. 
and the number of snow boards with boots. Snowboards 
without boots rent for $20: snow boards with boots rent 
for$30. 
Calculate and display the charges for snowboards 
and snowboards "ith boots. and the rental total. In ad-
dition. maintain summary totals. Use constants for the 
sno\\·bottrd rental rntc and the snowboard with boots 
rental rate. 
Create a summary frame ui th bo'<es to indicate 
the day's totals for the number of snowboards and 
snowboards with boots rented. total charges. and aver-
age charge per customer. 
Include buttons for Calculate Order. Clear. Gear A". 
Print. w1d Exit. 1l1e Clear All command should clear the 
summary totals to begin u new day's summary. Hint: 
You must set each of the summary variables to zero as 
~t·ell as clear the summary boxes. 
Make your buttons easy to use for keyboard entry. 
Make the Calculate button the Accept button and the 
Clear button the Cancel bullon. 
Do not allow bad input data to cancel the program: 
instead display a message to the user. 

c 
D 
A 
p 
T 
E 
R 
Decisions and 
Conditions 
I . Use If statements to control the flow of logic. 
2. Understand and use nested If statements. 
3 . Read and create action diagrams that illustrate the logic in a selection 
process. 
4 . Evaluate conditions using the comparison operators (>. <. =. >=. <=. <>). 
5 . Combine conditions using And. Or. AndAlso. and OrElse. 
G. Test the Checked properly of radio buttons and check boxes. 
7. Perform validation on numeric fields. 
8 . Use a Case structure for multiple decisions. 
9 . Use one event procedure to respond to the events for multiple controls 
and determine which control caused the event. 
Call an event procedure from another procedure. 
Create message boxes with multiple buttons and choose alternate 
actions based on the user response. 
Debug projects using breakpoints. stepping program execution. and 
displaying intermediate results. 

156 
' 
!-
l 
\ 
L 
II 
\ 
S 
l ' 
lkcisimu wul Condi,r~on.~ 
In l11is chapter you will leam to write applications that can take one action or 
another. based on a condition. For example, you may need to keep track of 
sales separately for different classes of employees. different sections of the 
country. or different departments. You also will learn alternate techniques for 
checking the validity of input data and how to display multiple buttons in a 
message box and take dille rent actions depending on t11e user response. 
If Statements 
I 
A powerful capability of the computer is its ability to make decisions and to 
take altemate courses of action based on tl1e outcome. 
A decision made by the computer is fom1ed as a que.~tion: ls a given con-
dition true or false? If it is true. do one t11ing: iJ it is false. do something else. 
lf the sun is shining Then 
go to the beach 
Else 
go to class 
End lf 
or 
lf you don't succeed Then 
try, try again 
End lf 
(condition) 
(action to take if condition is true) 
(action to take if condition is false) 
(See figure 4.1.) 
(condition) 
(action) 
(See Figure 4.2.) 
Fl~ure 4.1 
The lcgic of an If I Then 
Else Jtatement in Unifud 
Modeling lnnguage (UML) 
activity diagraTiljorm. 
Fi~nre 4 . 2 
The logic of an If statement 
without an Else action in 
UML activity diagram form. 

C
ll
1\
l1
'l'
li
R 
-1 
Notice in the second example that no action is specified if the condition is 
not true. 
In an If statement, when the condition is true. only the Then clause is 
executed. When the condition is false. only the Else clause. if present. is 
executed. 
IJ I Then / Else St:uemem-Cenet•al Fot•m 
If (condition) Then 
statement(s) 
[Elseif (condition) Then 
statement(s)) 
[Else 
statements(s) 1 
End If 
A block If I Then I Else must always conclude with End If. The word 
Then must appear on the same line as the If with nothing following Then 
(except a remark). End If and Else (if used) must appear alone on a line. 
The statements under the Then and Else clauses are indented for readability 
and clarity. 
Notice that the keyword Elself is all one word but that End If is two 
words. 
IJ I Tbeu I Else Statemem- Example 
When the number of units in UnitsDecimal is less than 32. select the radio but-
ton for Freshman; othenvise. make sure the radio button is deselected (see Fig-
ure 4.3). Remember thai. when a radio button is selected. the Checked property 
has a Boolean value ofTtue. 
157 
~ P--------------------------------------------------------------. 
;>( e 
c 
'2.. 
"' 
UnitsDecimal = Decimal.Parse(UnitsTextBox .Text) 
If UnitsDecimal < 320 Then 
FreshmanRadioButton.Checked 
True 
Else 
FreshmanRadioButton.cnecked 
End If 
False 
Fig u re 4 . 3 
The If statement logic in 
UML activity diagram form. If 
the number of units is fewer 
than 32. the Freshman radio 
buuon will be selected; 
othenvise the Freshman radio 
buuon will be deselected. 

ISS 
l ' 
C 
Decisio"s and Conditions 
Cbm·ting [f Statements 
A Unified Modeling Language (UML) activity diagram is a useful tool for 
showing the logic of an If statement. It has been said that one picture is worth 
a thousand words. Many programmers find that a diagram helps them organize 
their thoughts and design projects more quickly. 
The UML specification includes several types of diagrams. The activity di-
agram is a visual planning tool for decisions and actions for an entire applica-
tion or a single procedure. The diamond-shape symbol (called a decision 
symbol) represents a condition. The branches from the decision symbol indicate 
which path to take for different results of the decision (Figure 4.4). 
The UML a.ctivity diagram symbols used for program decisions and activities. 
The He lpful Edit01· 
You will find that the code editor can be very helpful as you enter If state-
ments. When you type an If statement and the condition and press Enter, the 
editor automatically adds the Then and End If statements and places the 
inse11ion point on a blank line. indented from the If. And if you type End If 
without the space, the editor adds the space for you. 
The editor also attempts to correct some en-ors for you. If you type the word 
Else and another statement on the same line, which is illegal syntax, the edi-
tor adds a colon. A colon is a statement terminator, which allows you to have 
multiple statements on one line. However. goocl programming practice dictates 
that you should have only one statement per line, so if you find an extra colon 
in your code. remove it and correct the syntax. 
Here is an example of illegal syntax: 
' Illegal syntax. 
If Unitsoecimal < 320 Then 
FreshmanRadioButton .Checked = True 
Else FreshmanRadioButton.Checked = False 
End If 
The editor's automatic con-ection. which you will fix. is 
' The editor's automatic correction. 
If Unitsoecimal < 320 Then 
FreshmanRadioButton .Checked = True 
Else : FreshmanRadioButton .Checked = False 
End If 

C
II
,\I>'I'
I'
R 
4 
Fix this poor solution by separating the two statements into two separate lines: 
' The preferred syntax . 
If Unitsoecimal < 320 Then 
FreshmanRadioButton .Checked 
True 
Else 
FreshmanRadioButton .Checked 
False 
End If 
Boolean Expressions 
The lest in an If statement is a Boolean expression, which evaluates as True or 
False. To form Boolean expt·essious. also referred to as conclitio11s. you use 
compm•isou O(Jet·atot·s (fable 4.1). also called relati01wl opemtors. The 
comparison is evaluated and the result is either True or False. 
Boolean expressions can be formed with numeric variables and constants. 
string variables and constants. object properties. and arithmetic expressions. 
However. it is important to note that comparisons must be made on like types; 
that is. strings can be compared only to other strings, and numeric values can 
be compared only to other numeric values. whether a variable. constant. 
property. or atithmetic expression. 
Tbe Compm·isou Operators 
Symbol 
Relation Tested 
Examt>tes 
Tabl e 4. 1 
> 
greater than 
Decimal .Parse(AmountTextBox.Text) > LimitDecimal 
Correctlnteger > 75 
< 
less than 
equal to 
<> 
not equal to 
Integer.Parse(SalesTextBox.Text) < 10000 
NameTextBox.Text < Namestring 
PasswordTextBox. Text = "101 " 
FreshmanRadioButton.Checked <> True 
NameTextBox.Text <> "" 
>= 
greater than or equal to 
Integer.Parse(QuantityTextBox.Text) >= 500 
<= 
less than or equal to 
Name1TextBox.Text <= Name2TextBox.Text 
Compal'ing Numcl'ic Vad ables and ConsLants 
When numeric values are involved in a lest. an algebraic comparison is made; 
that is. the sign of the number is taken into account. Therefore. negative 20 is 
less than 10. and negative 2 is less than negative l. 
An equal sign(=) means replacement in an assignment statement. In a com-
patison. the equal sign is used to lest for equality. For example. the Boolean 
expression in the statement: 
If Decimal. Parse( PriceTextBox. Text) = Maximumoecimal Then 
means "Is the current numetic value stored in PriceTextBox.Text equal to the 
value stored in MaximumDecimal?" 
159 

160 
v 
S 
l l 
A 
I, 
G 
.\ 
S 
C 
Decisions and Conditions 
Sample Compmisons 
Boole an Expa·ess.ion 
Alpha Integer = Bravolnteger 
Charlielnleger < 0 
True 
Bravolnleger > Alphalnleger 
False 
Charlielnteger <= Bravolnleger 
True 
Alpha Integer>= 5 
True 
Alphalnteger <> Charlielnteger 
True 
Compa rin~ Strings 
String variables can be compared to other string variables. string properties. or 
string literals enclosed in quotation marks. The comparison begins 1tith the 
left-most character and proceeds one character at a time from left to right. As 
soon as a character in one string is not equal to the conesponding character in 
the second string, the comparison is terminated. and the string with the lower-
ranking character is judged less than the other. 
The determination of which character is less than another is based on the 
code used to store characters internally in the computer. The code. called the 
ANSl. code. has an established order (called the coUating sequence) for all let-
ters, numbers. and special characters. (ANSI stands for American National 
Standards Institute.) In Table 4.2. A is less than B. Lis greater than K. and all 
numeric digits are less than all letters. Some special symbols are lower than the 
numbers. some are higher, and the blank space is lower than the rest of the 
characters sh01m. 
Note: VB actually stores string characters in Unicode, a coding system that 
uses 2 bytes to store every character. Using Unicode. all characters and sym-
bols in foreign languages can be represented. For systems that do not use the 
foreign symbols. only the first byte of each character is used. And the first byte 
of Unicode is the same as the ANSI code. For compruison, Unicode can store 
65.536 unique characters, ANSI code can store 256 unique characters. and 
ASCII, the earlier coding method. can store 128 unique characters. The first 
128 characters of ANSI and Unicode are the same as the ASCil characters. 
Person! TextB ox. Text 
Person2TextBox.Texl 
JOHN 
JOAN 
The expression Person1 Text Box. Text< Person2TextBox . Text evaluates 
False. The A in JOAN is lower ranking than the H in JOHN. 

( ' 
II 
;\ 
•• 
T •: R 
161 
Tlw ANSI collating S('I] IIC UI'e 
Tab 1.-
·L2 
Code 
Ch nra1c te r 
Code 
Chara<>tc r· 
Code 
Char11.cter 
32 
Space (blank) 
(» 
@ 
96 
33 
65 
A 
97 
34 
66 
B 
98 
b 
35 
# 
67 
c 
99 
0 
36 
$ 
68 
0 
100 
d 
37 
% 
69 
E 
LOL 
c 
38 
& 
70 
F 
10"2 
39 
' (apo~lropl.~) 
71 
G 
103 
g 
40 
72 
H 
1~ 
h 
41 
73 
105 
42 
• 
74 
106 
43 
+ 
75 
K 
107 
k 
4.4. 
. (comma) 
76 
L 
108 
45 
77 
M 
109 
U1 
46 
78 
N 
110 
11 
4.7 
79 
0 
111 
0 
48 
0 
80 
p 
112 
I' 
49 
81 
Q 
113 
q 
50 
2 
82 
R 
114 
51 
3 
83 
s 
115 
52 
4 
8-l 
T 
116 
53 
5 
85 
u 
117 
u 
54 
6 
86 
v 
118 
55 
7 
87 
w 
119 
.. 
56 
8 
88 
X 
120 
57 
9 
89 
y 
121 
y 
58 
90 
z 
122 
59 
91 
123 
60 
< 
9'2 
124 
61 
93 
125 
62 
> 
94 
126 
63 
95 
127 
Del 

162 
v 
s u :\ •. 
C 
Decisions and Conditions 
Wordl1extBox.Text 
Word2TextBox.Text 
HOPE 
HOPELESS 
The expression Word1TextBox . Text < Word2TextBox . Text evaluates 
True. When one string is shorter than the other. it compares as if the shorter 
string is padded with blanks to the right of the string, and the blank space is 
compared to a character in the longer string. 
CarlLabei.Text 
Car2Labei.Text 
300Z,'{ 
Porsche 
The expression Car1 Label . Text < Car2Label. Text evaluates True. 
When the number 3 is compared to the letter P. the 3 is lower, since all num-
bers are lower ranking than all letters. 
CountOnelnteger 
CountTwol nteger 
CountTh reelnteger 
FourTex1Box.Text 
5 
5 
-5 
"Bit" 
Determine which expressions will evaluate True and which ones will evaluate 
False. 
l. CountOneinteger >= CountTwointeger 
2. countThreeinteger < o 
3. CountThreeinteger < CountTwointeger 
4. countOneinteger <> countTwointeger 
5. countOneinteger + 2 > countTwointeger + 2 
6. FourTextBox.rext < FiveTextBox .Text 
7. FourTextBox.rext <> FiveTextBox .Text 
8. FourTextBox.rext > "D" 
9. '' 2 .. <> '' Two "" 
10. " $ " <= "? " 
Testing fol' T1·ue OJ' Fa ist~ 
You can use shortcuts when testing for True or False. Visual Basic evaluates the 
condition in an If statement. If the condition is a Boolean variable, it holds the 
values True or False. 
For example: 
If SuccessfulOperationBoolean 
True Then ... 
is equivalent to 
If successfulOperationBoolean Then . . . 
Comparing Uppe1-case and Lowc•·casc Cha•·acteJ•s 
When comparing strings, the case of the characters is important. An uppercase 
Y is not equal to a lowercase y. Because tl1e user may type a name or word in 
uppercase, in lowercase. or as a combination of cases. we must check all pos-
sibilities. The best way is to use the ToUpper and To lower methods of the 
FiveTextBcx.Text 
"bit"' 

C 
II 
A 
1• 
'I' 
" 
ll 
163 
String class. which return the uppercase or lowercase equivalent of a string. 
respectively. 
Tbc ToUppct· nud ToLowct• Mcthods- Ccnct·nl F'ot•uts 
rr1 
TextString. ToUpper() 
~ ~ 
TextString. ToLower() 
:0 
Tbc ToUppct· and Tolowct· Methods-Examples 
I 
~ .--------------------------------------------------------------. 
~ 
NameTextBox.Texl Value 
NnmeTextBox.Text.ToUpJ>et'() 
-
NameTextBox. Text.ToLowet'() 
5 
"!:! f 
Basic 
PROGRAMMING 
Robert Jones 
hello 
BASIC 
PROGRAMMING 
ROBERT JONES 
HELLO 
An example of a Boolean expression using the ToUpper method follows. 
If NameTextBox.Text.ToUpper() ="BASIC" Then 
' Do something. 
End If 
Note: When you convert NameTextBox.Text to uppercase. you must com-
pare it to an uppercase literal ("BASIC'') if you want it to evaluate as True. 
Compo und Boolean Exp•·essions 
You can use compoml<l Boolean exp1·essions to test more than one condition. 
Create compound expressions by joining conditions with logical ope•·atoJ·s. 
which compare each expression and retum a Boolean result. TI1e logical operators 
are Or. And. Not. AndAlso. OrElse. and Xor. 
l.o.g!cal 
Operato1· 
Or 
Meaning 
If one expression or 
both expressions are 
True, the entire 
expression is True. 
Example 
Integer. Parse(Numberlabel.Text ) 
1 Or 
Integer. Parse(Numberlabel.Text) = 2 
basic 
programming 
robert jones 
hello 
Explru1at1ou 
E•aluates 1hte "'·hen 
Nurnberl..abel.Text is 
either "1" or "Z·. 
And 
Both expressions must 
be 'frue for the entire 
expression to be 'frue. 
Integer.Parse(NumberTextBox.Text) > o And 
Integer.Parse(NumberTextBox.Text) < 10 
Evaluates 'Ihle when 
Nurnbet'I'extBox.Text is 
"1", ''2", "'3". "4", "5''. 
''& ... "7" ~ i'S", or '9'~. 
Not 
Reverses the condition 
Not Integer. Parse (Numberl abel. Text) 
0 
so that a Thte expression 
will eTaluate False and 
vice versa. 
Evaluates True when 
Nurnberl..abel.Text is any 
value other than "0". 
AndAlso 
Short-circuiti~version 
BalanceDecimal > 00 AndAlso WithinlimitBoolean 
lfBalsnceDecimal is not 
greater than 0, the 
condition evaluate3 False 
and the second condition 
is not tested; otherwise 
works the same as an 
And. 
of And. If the first 
expression is False, the 
entire expression 
returns False and the 
second expression is 
not eYaluated. 
conlinu.ed 

164 
Logical 
Oporator 
v 
S 
l l 
,\ 
I. 
Meaning 
ElUIUlple 
C 
Decisions and Conditions 
Explru!allou 
OrElse 
Short-circuiting 
NumberCorrectlnteger > 70 OrElse \VaiverBoolean 
If NumberCorrectlnteger 
is greater than 70, the 
condition evaluates 'fiue 
and the second condition 
is not tested. 
Xor 
version of Or.lf the 
first expression is True, 
the entire expression 
returns 'fiue and the 
second expression is 
not evaluated. 
Exclusive Or; 
evaluates True if one 
or the other expression 
is 'fiue, but not bot b. 
Countlnteger > 10 Xor VipBoolean 
ComJlOimd Hooleau Expressions--Examples 
Evalustes 'fiue when 
Countlnteger > lOor 
VipBoolean is True. If 
bo'h conditions evaluate 
either lhleor False. this 
condition evaluates 
False. 
~ .---------------------------------------------------------------------... 
" a 
""' ;-
"' 
If MaleRadioButton. Checked And Integer.Parse(AgeTextBox. Text) < 21 Then 
MinorMaleCOuntinteger += 1 
End If 
If JuniorRadioButton.Checked or SeniorRadioButton.Checked Then 
UpperClassmaninteger += 1 
End If 
The first example requires that both the radio button test and the age test be 
True for the count to be incremented. In the second example. only one of the 
conditions must be True. 
One caution when using compound expressions: Each side of the logical 
operator must be a complete expression. l'or example. 
countlnteger > 10 or < o 
is incorrect. Instead. it must be 
Countlnteger > 10 Or Countlnteger < 0 
Combinin~ Logical Opemtor-s 
You can create compound Boolean expressions that combine multiple logical 
conditions. Wl1en you have both an And and an Or. the And is evaluated before 
the Or. However. you can change the order of evaluation by using parentheses; 
any expression inside parentheses will be evaluated first. 
For example. '~ill the following condition evaluate True or False? Try it with 
various values for SaleDecimal. DiscountRadioButton, and StateTextBox.Text. 
If Sale Decimal > 1000. oo Or DiscountRadioButton .Checked And StateTextBox . Text. ToUpper () <> "CA" Then 
' CodQ hQrQ to calculatQ thQ discount . 
End If 
Next. by placing parentheses around the first two condition;; "(SaleDecimal > 
1000. OD Or DiscountRadioButton. Checked)" and reevaluate '~ith the same 
values for SaleDecimal, DiscountRadioButton, and StateTextBox.Text. 

C 
II 
A 
1• 
'I' 
" 
ll 
SaleD eeimal 
DiscouutRadio Buttou.Checked 
StateTextBox. Text. To Upper 
1500.0 
False 
CA 
1000.0 
True 
OH 
1000.0 
True 
CA 
1500.0 
True 
NY 
1000.0 
False 
CA 
Coutiuuiug Long Pt·ogram Lines 
Recall that you can use implicit line continuation in VB 2010, as long as you 
break the line in a legal location. You can break a condition after a relational or 
logical operator, but not before. So you can write the If statement in the previous 
section as 
If Saledecimal > 10000 or 
DiscountRadioButton .Checked And 
StateTextBox .Text .ToUpper() <> "OA" Then 
' Code here to calculate the discount . 
End If 
Short-Ci•·cuit 0 1)e1·aLio ns 
Visual Basic has two operators that provide short-circuit evaluation for com-
pound expressions: the AndA1so and OrE1se. When evaluating a compound ex-
pression formed with an And, VB evaluates both expressions for True or False. 
then evaluates the And. But you might prefer to not evaluate the second expression 
if the fits! expression evaluates False. For example. the following two statements 
both evaluate False when Countlnteger = 0. but the first statement evaluates both 
expressions and the second one stops after evaluating the frrst expression: 
Evaluates 
True 
True 
False 
True 
False 
countlnteger > o And countlnteger <= 10 ' Always tests both conditions . 
countlnteger > o AndAlso countlnteger <= 10 ' Short circuits when the first 
' expression evaluates False. 
The Or Else is designed to short circuit when the first expression evaluates 
True. In a regular Or operation. if one or the other expression is Tme. the entire 
compound expression is True. So if the first expression is Tme, it really isn't 
necessary to test U1e second expression. These two examples both evaluate 
True ifTotallnteger = - 1 (negative 1), but the second example will peiform one 
less comparison: 
Totallnteger < o or Totallnteger > 10 
Totallnteger < 0 OrElse Totallnteger > 10 
You may be wondering whether to use these short-circuit operators. which 
are included here for completeness. Generally. the AndAlso and OrElse are 
used for more advanced programming. when the second expression should not 
be executed for some reason. For your programs in this chapter. you can stick 
with the And and Or operators. 
165 

166 
v 
S 
l l 
,\ 
I. 
C 
Decisions and Conditions 
Nested If Statements 
1n many programs. another If statement is one of the statements to be executed 
when a condition tests True or False. If statements that contain additional If 
statements are said to be nested If statements. The following example shows a 
nested If statement in which the second If occurs in the Then portion ofthefir'St 
If (Figure 4.5). 
[femplnteger > 32] 
If Templnteger > 32 Then 
If Templnteger > 80 Then 
Comment label. Text 
"Hot" 
Else 
Commentlabel .Text 
"Moderate" 
End If 
Else 
Commentlabel.Text 
"Freezing" 
End If 
To nest If statements in the Else pm1ion. you may use either of the fol-
lowing approaches; however. your code is simpler if you me the second method 
(using Else If I Then). 
' One approach. 
If Templnteger <= 32 Then 
CommentLabel.Text = "Freezing" 
Else 
If Templnteger > 80 Then 
Commentlabel.Text 
"Hot" 
Else 
Commentlabel.Text 
End If 
End If 
"Moderate" 
F igur e 4.5 
Diagramming a nested If 
statement. 

C 
II 
A 
1• 
'I' 
" 
ll 
' A simpler approach . 
If Tempinteger <= 32 Then 
Commentlabel. Text = "Freezing" 
Elseif Tempinteger > so Then 
Commentlabel.Text 
"Hot" 
Else 
Commentlabel.Text 
"Moderate" 
End If 
You cwt uest I f s iu Lotlt the Then allll Else. Iu fact, you utay cuutiuue to 
nest Ifs within Ifs as long as each If has an End If. However. projects be-
come very difficult to follow (and may not perfonn as intended) when Ifs be-
come too deeply nested (Figure 4.6). 
Fi J( ur e 
4 .6 
A diagram of a nested If statement with Ifs nested on both sides of the original If. 
[MaleRadioButton not checked] 
[MaleRadioButton checke<l] 
If MaleRadioButton .Checked Then 
Else 
If Integer.Parse(AgoTextBox.Text) < 21 Then 
MinorMaleCountlnteger += 1 
Else 
MaleCountinteger += 1 
End If 
If Integer.Parse(AgeTextBox.Text) < 21 Then 
MinorFemaleCountinteger += 1 
Else 
FemaleCountlnteger += 1 
End If 
End If 
167 

168 
l ' 
C 
DecisioM and Conditions 
Assume that Frogs Integer = 10. Toads Integer = 5. and Polliwogslnteger 
6. What will be displayed for each of the folloll'ing statements? 
l. If Frogsinteger > Polliwogsinteger Then 
FrogsRadioButton.Checked 
True 
Else 
FrogsRadioButton.Checked 
False 
End If 
2. If Frogsinteger > Toadsinteger + Polliwogsinteger Then 
ResultTextBox .Text 
' It 's the frogs. " 
Else 
l~iii::J 
Indentation can help you catch er· 
rors. Visual Basic always matches 
on Else with the last unmatched 
If regardless of the indentation. • 
ResultTextBox .Text 
End If 
' It 's the toads and the polliwogs.' 
3. If Polliwogsinteger > Toadsinteger And 
Frogsinteger <> 0 Or Toadsinteger = 0 Then 
ResultTextBox .Text 
' It ' s true." 
Else 
ResultTextBox.Text 
EOO If 
' It's false.' 
4. Write the statements necessary to compare the numeric values stored 
in ApplesTextBox.Text and OrangesTextBox.Text. Display in Most-
Text.Box.Text which has more, the apples or the oranges. 
5. Write the Basic statements that will test the current value of Bal-
anceDecimal. When BalanceDecimal is greater than zero. the check 
box for Funds Available. called FundsCheckBox. should be selected. 
the BalanceDecimal set back to zero, and Countinteger incremented by 
one. When Balance Decimal is zero or less, FundsCheckBox should not 
be selected (do not change the value of Balance Decimal or increment 
the counter). 
Using If Statements with Radio Buttons: 
and Check Boxes 
In Chapter 2 you used U1e Checked Changed event for radio buttons and check 
boxes to carry out the desired action. Now that you can use If statements. you 
should not take action in the Checked Changed event procedures for these con-
trols. Instead. use If statements to detennine which options are selected. 
'Jo conlorm to good programming practice and make your programs consis-
tent with standard Windows applications, place your code in the Click event of 
buttons. such as an OK button or an Apply button. For example. refer to the 
Visual Studio Print dialog box (Figure 4. 7); no action will occur when you click 
on a radio button or check box. [nstead, when you click on the OK button. VS 
checks to see which options are selected. 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
4 
Print 
I 'i'.l...a-1 
Printer 
Name: 
I Cdnon lnkjet i9900 
•I I Propcriie~ ... 
Std u:.: 
Reddy 
1!J Prlnttof~e 
Type: 
Conon Inkjet i9900 
Where; 
USOOO! 
Comment: 
Print range 
Copies 
@ All 
Select1on 
Number of copies: 
Pages. 
nom: 1_1 m 1_1 
Print what 
0 Hide col?opsed rcg1ons 
[]Include line numbers 
!iJK 
Jl Cancel 
In an application such as the radio button color change project in Chap-
ter 2 (refer to Figure 2.24), you could modify the code for the Display button to 
include code similar to the following: 
If BeigeRadioButton .Checked Then 
Me.BackColor = Color.Beige 
Elself BlueRadioButton .Checked Then 
Me.BackColor = Color.Blue 
Elself YeUowRadioButton .Checked Then 
Me.BackColor 
Color.Yellow 
Else 
Me.BackColor 
Color.Gray 
End If 
If BlackRadioButton .Checked Then 
ForeColor 
Color .Black 
Else 
ForeCol.or 
Color. White 
End If 
Addil ional Examplt>s 
If FastShipCheckBox .Checked Then 
TotalDecimal += FastShipRateDecimal 
End If 
If GiftWrapCheckBox. Checked Then 
Tot alOecimal += WRAP_AMOUNT_Oecimal 
End If 
169 
F igur e 4. 7 
The Print dialog box. When the 
user clicks 0 K the program 
ckecks the s.tate of all radio 
buttons and check ba."les. 

170 
s 
l l 
\ 
•• 
{' 
Decision .. ~ 1mrl C01ulifinns 
A "Simpl£> Sample" 
Test your understanding of the use of the If statement by coding some short 
examples. 
T•'-"' tlu' Vnhw uf a Clu·•·k ll01x 
Create a small project that contains a check box, a label. and a button. Name 
the button TestButton. the check box TestCheck.Box. and the label Messagel..a-
bel. In the Click event procedure for Test Button, check the value of the check 
box. If the check box is currently checked. display "Check box is checked'" in 
Message LabeL 
Private Sub TestButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles TestButton.ClicK 
' Test the value of the checK box. 
If TestChecKBox.ChecKed Then 
Messagelabel .Text = "ChecK box is checKed. " 
End If 
Test your project. When it works. add an Else to the code that dis plays 
"Check box is not checked." 
Test the State of Hadio Buttons 
Remove the check box from the previous project and replace it with two radio 
buttons. named F'reslunanRadioButton and SophomoreRadioButton and labeled 
"<= 32 units" and "> 32 lmits". Now change the If statement to d isplay 
"F reshman" or "Sophomore" in the label. 
If FreshmanRadioButton.ChecKed Then 
Messagelabel.Text 
Else 
Messagelabel.Text 
End If 
'Freshman' 
'Sophomore" 
Can you modify the sample to work for Freshman. Sophomore. Junior. and 
Senior? In the sections that follow, you will see code for testing multiple radio 
buttons and check boxes. 
Checking Lhe Stale of a Radio Buuon Group 
Nested If statements work very well for determining which button of a radio 
button group is selected. Recall that in any group of radio buttons. only one 
button can be selected. Assume that your form has a group of radio buttons for 
Freshman. Sophomore. Junior. or Senior. In a calculation procedure. you want 
to add 1 to one of four counter variables. depending on which radio button is 
selected: 

C 
II 
A 
1• 
'I' 
" 
ll 
If FreshmanRadioButton .Checked Then 
Freshmancountinteger += 1 
Elseif SophomoreRadioButton .Checked Then 
Sophomorecountinteger += 1 
Elseif JuniorRadioButton.Checked Then 
Juniorcountinteger += 1 
Elseif SeniorRadioButton.Checked Then 
seniorcountlnteger += 1 
End If 
Note that in most situations, the final condition test is unnecessaq. You 
should be able to use an Else and add to SeniorCountlnteger if the first three 
expressions are false. You might prefer to code the condition to make the 
statement more clear, if no radio button is set initially. or if the program sets all 
radio buttons to False. 
Checking the Stale of Multi[)lc Check Boxes 
Although nested If statements work very well for groups of radio buttons. the 
same is not true for a series of check boxes. Recall that if you have a series of 
check boxes. any number of the boxes may be selected. In this situation. as-
sume that you have check boxes for Discount, Taxable. and Delivery. You will 
need separate If statements for each condition. 
If OiscountCheckBox .Checked Then 
' Calculate the discount. 
End If 
If TaxableCheckBox . Checked Then 
' Calculate the tax. 
End If 
If OeliveryCheckBox.Checked Then 
' Calculate the delivery charges. 
End If 
Enhancing Message Boxes 
In Chapter 3 you learned to display a message box to the user. Now it's time to 
add such features as controlling the fom1at of the message. displaying multiple 
buttons. checking which button the user clicks, and performing alternate ac-
tions depending on the user's selection. 
Dis[>laying the Message St1·ing 
The message string you display in a message box may be a shing literal en-
closed in quotes or it may be a string variable. You also may want to concate-
nate several items. for example. combining a literal with a value from a 
171 

172 
v 
S 
l l 
,\ 
I. 
C 
Decisions and Conditions 
variable. It's usually a good idea to create a variable for the message and format 
the message before calling the Show method: if nothing else. it makes your code 
easier to read and follow. 
Combining Va1ues inlo a Message Striug 
You can concatenate a literal such as "Total Sales:" with the value from a vari-
able. You may need to include an extra space inside the literal to make sure 
that thA valnA il'< !<Ap:mtt.Ail from thA litAral. 
Dim MessageString As String 
l~ljji#J 
Specify only the message for a 
"quick and dirty" message box for 
debugging purposes. It will display 
a n OK button a nd on empty title 
bar: MessageBox. Show ("I 'm 
here ." ) • 
MessageString = "Total Sales : " & TotalSalesDecimal. ToString( "C") 
MessageBox. Show(MessageString, "Sales summary", MessageBoxButtons.OK) 
Creating Multiple Uues of Output. 
Jf your message is too long for one line. VB wraps it to a second line. But if you 
would like to control the line length and position of the split. you can insert a 
NewLine chara.cter into the string message. Use the Visual Studio intrinsic con-
stant Environment . Newline to determine line endings. You can concatenate 
this constant into a message string to set up multiple lines. 
In tllis example. a second line is added to the Message Box from the previ-
ous example. 
Dim FormattedTotalString 
Dim FormattedAvgString 
Dim Messagestring 
As String 
As String 
As String 
FormattedTotalString 
TotalSalesDecimal. ToString ( "N" ) 
FormattedAvgString = AverageSaleDecimal. ToString( "N") 
MessageString = "Total Sales : 
" & FormattedTotalString & 
Environment.Newline & "Average Sale: 
" & FormattedAvgString 
MessageBox. Show(MessageString, "Sales summary", MessageBoxButtons.OK) 
You can combine multiple Newline constants to achieve double spacing 
and create multiple message lines (Figure 4.8). 
Coffee Sales Sum mery 
10 Number of Orden:: 3 
Total S-aleS! S38.32 
Ave.rcge Sole·: 512.77 
OK 
Figur e 
4 .3 
A message box with multiple 
lines of output. created by 
concatenating two Newline 
characters at the end of each 
line. 

C 
II 
A 
1• 
'I' 
" 
ll 
' Concatenat e the message string . 
MessageString = "Number of Orders: 
" & customercount.ToString() & 
Environment .NewLine & Environment.NewLine & 
"Total Sales: 
" & GrandTotalDecimal. ToString ( "C") & 
Environment . NewLine & Environment.NewLine & 
"Average Sale: 
" & AverageDecimal. ToString( "C") 
' Display the message box . 
MessageBox. Show(MessageString, "Coffee Sales Summary", MessageBoxButtons .OK, 
MessageBoxicon . Information) 
Using the Couu·oiCbars Constants 
In addition to the Environment . Newline constant, you also can use VB's Con-
trolChars . Newline constant. The ControlChars constants are part of the 
Visual Basic library. while the Environment constants come from the System 
library and are more generic (usable in other .NET languages). 
The VB ControlChars constant list includes several other intrinsic con-
stants in addition to the NewLine constant. Type "ControiCbars" and a period 
into the editor to see the complete list. 
CoutroJCbar Constan t 
CrLf 
cr 
Lf 
NewLine 
NullChar 
Tab 
Back 
FormFeed 
VerticalTab 
Quote 
Dese•·iption 
CatTiage return/line feeJ character combination. 
Carriage return. 
Line feed. 
Newline character. Same effect as a carriage return/line 
feed character combination. 
Character with a value of zero. 
Tab character. 
Backspace character. 
Formfeed character (not useful in Microsoft Windo11·s). 
Vertical tab character (not useful in Microsoft Windows). 
Quotation ruark character. 
Displaying Muhij>le Bullous 
You can choose the buttons to display on the message box using the Message -
BoxButtons constants (Figme 4.9). Figme 4.10 shows a MessageBox with two 
buttons using the MessageBoxButtons. YesNo constant. The Show method retums 
a IJialogResuh object that you can check to see which button the user clicked. 
til Mes:o;:ageBoxBut1ons:.AbortRe,hylgnore 
G Mess119cBoxButtons.OK 
0 Mess.ageBoxButtons.OKCancel 
@ M e,~ ageBoxButton!: ,RetryCancel 
G 
fv1c.~s.:~ geBoxBul-tons.Ye:.N o 
W Mess.ageBoxButtons.VesNoCancel 
Common 
I_AI~ 
Choose the button(s) to 
display from the 
MessageBoxButtons 
constants. 
173 

174 
v 
S 
l l 
,\ 
I. 
C 
Decisions and Conditions 
Clear Order 
8 Clear the current order figures? 
Yes 
J l 
No 
Oetenuiuiug the Rctum Type of a Aletl10d 
How do you know that the Show method retums an object of the DialogResult 
class? An easy way is to JX>int to the ShOW keyword and pause: the argument list 
that you are using pops up (Figure 4.11). 
Public Shared Function .Show(text As String, caption As String) As System.Windows.Fonns.DialogResult 
Displays a messag-e box with specified text and caption. 
Declaring au Object Variable for the :!\'lethod J{euu·u 
To capture the infonnation about the outcome of the Show method, you must de-
clare a variable that can hold an instance of the DialogResult type. 
Dim WhichButtonDialogResult As DialogResult 
Then you assign the return value of the Show method to the new variable. 
Display Yes and No buttons 
on a message box using 
MessageBoxButtons. YesNo. 
Pause the mouse pointer over 
the Show keywcrd and 
lntelliSen.se pops up with the 
argument lMt you are using. It 
also shows the method's retltrn 
type. 
WhichButtonDialogResult = MessageBox.Show( "Clear the current order figures?", 
"ClQar OrdQr ", MQssagoBoxButtons .YosNo, MossagoBoxicon.OuQstion) 
The next step is to check the value of the retum, comparing to the DialogResult 
constants. such as Yes. No, OK. Retry, Abort. and Cancel. 
If WhichButtonDialogResult = DialogResult.Yes Then 
· Code to clear the order. 
End If 
Specifying a Default Buuou and OJ>lious 
Two additional signatures for the MessageBox . Show method are as follows: 
MessageBox.Show(TextMessage, TitlebarText, MessageBoxButtons, MessageBoxlcons, 
MessageBoxDefaultButton) 
MessageBox.Show(TextMessage, TitlebarText, MessageBoxButtons, MessageBoxicons, 
MessageBoxDefaultButton, MessageBoxOptions) 

C
II
,\I>
'I'
I'
R 
4 
When you display multiple buttons, you may want one of the buttons to be the 
default (the Accept button). For example. to make the second button (the No 
button) the default, use this statement: 
175 
ResponseDi alogResult = MessageBox. Show( "Clear the current order f i gures?", "Cl ear Order", 
MessageBoxButtons .YesNo, MessageBoxlcon.Question, MessageBoxDefaultButton.Butt on2) 
You can right-align the message in the message box by setting the Message-
BoxOptions argtunent: 
ResponseDialogResult = MessageBox.Show( "Clear the current order figures? ", "Cl ear Order", 
MessageBoxButtons .YesNo, MessageBoxl con.Question, MessageBoxDefault Button.Button2, 
MessageBoxOptions. RightAlign) 
Input Validation 
Careful programmers check the values entered into text boxes before beginning 
the calculations. Validation is a form of self-protection: it is better to reject bad 
data than to spend hours (and sometimes days) trying to find an error only to 
discover that the problem was caused by a "user error." Finding and correcting 
the error early can often keep the program from producing erroneous results or 
halting with a run-time error. 
Checking to verify that appropriate values have been entered for a text box 
is called 'Vlllidation. TI1e validation may include making sure that the input is 
numeric, checking for specific values. checking a range of values, or making 
sure that required items are entered. 
In Chapter 3 you learned to use Try /Catch blocks to trap for nonnumeric 
values. This chapter presents some additional validation techniques using If 
statements. 
Note: Chapter 14 has some advanced validation techniques using the Val-
idating event and error providers. 
Checking foa· a Ran~e of Values 
Data validation may include checking the reasonableness of a value. Assume 
you are using a text box to input the number of hours worked in a day. Even 
with ove11ime. the company does not allow more than 10 work hours in a single 
day. You could check the input for reasonableness with this code: 
If Integer .Parse(HoursTextBox .Text) <= 10 Then 
' Code to perform calculations . 
Else 
MessageBox. Show( " Too many hours ." , "Invalid Data", MessageBoxButtons. OK) 
End If 
Checking foa· a Re<Jnit·ed Field 
Sometimes you need to be certain that a value has been entered into a text box 
before proceeding. You can compare a text box value to an empty string literal. 

176 
v 
S 
l l 
,\ 
I. 
C 
Decisions and Conditions 
If NameTextBox.Text <> "" Then 
' Code to perform some action. 
Else 
MessageBox .Show( "Required Entry", "Sales summary", MessageBoxButtons.OK) 
End If 
By checking separately for blank or nommmeric data, you can display a 
better message to the user. Make sure to check for blanks first, since a blank 
field will throw an exception with a parsing method. For example. if you reverse 
the order of the If and Try blocks in the following example. blanks in Quanti-
tyTextDox will always trigger the nonnumeric message in the Catch block. 
If QuantityTextBox. Text <> "" Then 
' Not blank . 
Try 
QuantityDecimal = Decimal.Parse(QuantityTextBox.Text) 
Catch ' Nonnumeric data. 
MessageString = "Nonnumeric data entered for quantity. " 
MessageBox.Show(MessageString, "Data Entry Error") 
End Try 
Else 
' Missing data. 
MessageString = "Enter the quantity. " 
MessageBox .Show(MessageString, "Data Entry Error") 
End If 
Pe l'f(mning Muhi1>le Validations 
When you need to validate several input fields, how many message boxes do 
you want to display for the user? Assume that the user has neglected to fill five 
text boxes or make a required selection and clicked on Calculate. You can 
avoid displaying multiple message boxes in a row by using a nested It state-
ment. This way you check the second value only if the first one passes. and you 
can exit the processing if a problem is found with a single field. 
If NameTextBox.Text <> "" Then 
Try 
UnitsDecimal = Decimal.Parse(UnitsTextBox.Text) 
If FreshmanRadioButton.Checked Or SophomoreRadioButton.Checked Or 
JuniorRadioButton.Checked or SeniorRadioButton .Checked Then 
Else 
' Data valid - Do calculations or processing here . 
MessageBox. Show ( "Please select a Grade Level. ", "Data Entry Error", 
MessageBoxButtons.OK) 
End If 
Catch AnException As FormatException 
MessageBox.Show ("Enter number of units." , "Data Entry Error", 
MessageBoxButtons.OK) 
UnitsTextBox. Focus() 
End Try 
Else 
MessageBox. Show ("Please enter a name, ", "Data Entry Error", 
MessageBoxButtons.OK) 
NameTextBox.Focus() 
End If 

C 
II 
A 
1• 
'I' 
" 
ll 
The Case Structure 
Earlier you used the If statement for testing conditions and making decisions. 
Whenever you want to test a single variable for multiple values. the Case 
su·uctw·e provides a flexible and powerful solution. Any decisions dtat you 
can code with a Case structure also can be coded with nested If statements. 
but usually the Case structure is simpler and clearer. 
Tb<' Sd ('(·t Cas<' Stat<'tueut-Geue!·al Form 
Select case expression 
case ConstantList 
[Statement(s) 1 
[Case constantList 
[Statement(s) II 
[Case Else) 
[Statement(s) 1 
End Select 
Tite expression in a Case structure is usually a variable or property that you 
wish to test. 
Tite constant list is the value that you want to match: it may be a numeric 
or string constant or variable. a range of values, a relational expression, or a 
combination of these. 
There is no limit to the number of statements that can follow a Case 
statement. 
The Sd cct Case Stat.ement.-Exampl<'s 
Select case Scorelnteger 
case Is >= 100 
MessageLabel1 . Text 
MessageLabel2.Text 
case so To 99 
MessageLabel1 . Text 
MessageLabel2.Text 
case 60 To 79 
MessageLabel1 .Text 
MessageLabel2. Text 
case Else 
MessageLabel1 . Text 
MessageLabel2. Text 
End Select 
Select Case Listlndexlnteger 
case o 
"Excellent Score" 
"Give yourself a pat on the bacl<." 
"Very Good" 
"You should be proud ." 
"Satisfactory Score" 
"You should have a nice warm feeling ." 
"Your score shows room for improvement. " 
' Code to handle item zero. 
case 1, 2, 3 
' Code to handle items 1, 2, or 3. 
case Else 
' Code to handle any other value. 
End Select 
177 

178 
v 
S 
l l 
,\ 
I. 
C 
Decisions and Conditions 
The examples show a combination of comparison operators. constant ranges. 
and multiple constants. Notice these points from the examples: 
• 
When using a comparison operator (e.g .. Is >= 100). the word Is must 
be used. 
• 
To indicate a range of constants. use the word To (e.g., 80 To 99). Note 
that "To" is inclusive and actually means "through". 
• 
Multiple constants should be separated by commas. 
The elements used for the constant list may have any of these forms: 
cons-rant [, constant . . . 1 
constant To constant 
Is comparison-operator constant 
case 2, 5, 9 
case 25 To 50 
case Is > 100 
You could also use all these forms in one Case statement to test for multiple 
conditions: 
Case 2 , s, 9 , 25 To 50, Is > 100 
\Vhen you want to test for a string value. you must include quotation marks 
around the literals. 
Example 
Select case TeamNameTextBox .Text 
case "Tigers" 
' Code for Tigers. 
case "Leopards" 
' Code for Leopards. 
case "Cougars", "Panthers" 
' Code for cougars and Panthers. 
case Else 
' Code for any nonmatch. 
End Select 
Note that in the previous example. the capitalization must also match exactly. 
A better solution would be 
Select case TeamNameTextBox . Text . ToUpper() 
Case "TIGERS" 
' Code for Tigers. 
Case "LEOPARDS" 
' Code for Leopards. 
Case "COUGARS", "PANTHERS" 
' Code for Cougars and Panthers. 
case Else 
' Code for any nonmatch. 
End Select 
Although the Case Else clause is optional. generally you will want to include 
it iJ1 Select Case statements. The statements you code beneath Case Else 
execute only if none of the other Case expressions is matched. This clause pro-
vides checking for any invalid or tmexpected values of the expression being tested. 
If the Case Else clause is omitted and none of the Case conditions is True. the 
program continues execution at the statement following the End Select. 
lf more than one Case value is matched by the expression. only the state-
ments in the .first matched Case clause execute. 

C
ll
i\I'Tt:
R 
Convert the folloning If statements to Select Case statements. 
1. If Templnteger <= 32 Then 
Commentlabel. Text = ' Freezing" 
Elself Templnteger > so Then 
commentlabel.Text 
' Hot ' 
Else 
commentlabel.Text 
l:nd If 
' Moderate" 
2. If Countlnteger = o Then 
MessageBox. Show( "No items were entered. •) 
Elself Countlnteger < 11 Then 
MessageBox . Show(" 1 -
10 items were entered ." ) 
Elself countlnteger < 21 Then 
MessageBox. Show(" 11 - 20 items were entered. ') 
Else 
MessageBox. Show( "More than 20 items were entered. • ) 
l:nd If 
Sharing an Event Procedure 
A very hauJy feature uf VB is the ability tu share 1m event vruceJure fur 
several controls. For example. assume that you have a group of five radio but-
tons to allow the user to choose a color (Figure 4.12). Each of the radio buttons 
must have its mm name and nill ordinarily have its own event procedure. But 
you can add e1•ents to the Handles clause at the lop of an event procedure to 
make the procedure respond to events of other controls. 
Private Sub RadioButtons_CheckedChanged (ByVal sender As System.Object, 
ByVal e As System.l:ventArgs) _ 
Handles BlueRadioButton.CheckedChanged , BlackRadioButton.CheckedChanged, 
RedRadioButton.CheckedChanged, WhiteRadioButton.CheckedChanged, 
YellowRadioButton.CheckedChanged 
Select Color 
~ ~· 
'- Bl.ack 
0 Xelow 
tH 
QK J 
Figu re 4 . 1 2 
The five radio buttons allow 
the user to choose the color. 
179 

180 
v 
S 
l l 
,\ 
I. 
C 
Decisions and Conditions 
After you have added the additional events to the Handles clause. this 
event procedure will execute when the user selects any of the radio buttons. 
A good. professional technique is to set up a module-level variable to hold 
the selection that the user makes. Then, in the OK button's event procedme you 
can take action based on which of the buttons was selected. 
The key to using the shared event procedure is the sender argument that 
is passed to the CheckedChanged event procedme. The sender is defined as 
an object. which has a Name property. However. if you refer to sender. Name 
with Option Strict turned on. you generate a compiler error telling you that late 
binding is not allowed. Late biud.ing means that the type cannot be deter-
mined at compile time but must be detennined at run time. Late binding is al-
lowed with Option Strict tumed off but sltould be avoided if possible for 
perfonnance reasons. 
You can use the properties of the sender argument if you first cast (con-
vert) sender to a specific object type instead of the generic object. You can use 
VB's CType fm1ctiou to convett from one object type to anothe1~ 
CType(ValueToConvert, NewType) 
The CType function retums an object of the new type. If the ValueToConvert 
is not in the range oflegal values for NewType, an exception is generated at nm 
time. 
For the radio button example. declare a variable as RadioButton data type. 
cast the sender argument to a RadioButton object type, and assign it to the 
new variable: 
Dim SelectedRadioButton As RadioButton 
SelectedRadioButton = CType(sender, RadioButton) 
After these statements. you can refer to SelectedRadioButton.Name to deter-
mine which radio button was selected: 
Select case SelectedRadioButton .Name 
case "BlueRadioButton" 
' Code for blue button . 
You can declare a module-level variable as a Color data type, assign the cho-
sen color in the shared event procedure. and then apply the color in the OK 
button's click event. 
' Declare a module-level variable . 
Private SelectedColor As Color 
When you shore on event proce-
dure, rename the procedure to more 
clearly reflect the purpose of the 
procedure, such as RodioButtons_ 
CheckedChonged instead of Blue-
RodioButton_Ch<><:kedChong..d. • 
Private Sub RadioButtons_CheckedChanged(ByVal sender As System.Object, 
ByVal e As System. EventArgs) 
Handles BlueRadioButton.CheckedChanged, 
BlackRadioButton . CheckedChanged, RedRadioButton. CheckedChanged, 
WhiteRadioButton.CheckedChanged, YellowRadioButton. CheckedChanged 
' save the name of the selected button. 
Dim SelectedRadioButton As RadioButton 
SelectedRadioButton = CType(sender, RadioButton) 

C 
II 
A 
1• 
'I' 
" 
ll 
Select case SelectedRadioButton.Name 
case "BlueRadioButton" 
SelectedColor = Color.Blue 
case "BlackRadioButton" 
SelectedColor = Color.Black 
case "RedRadioButton" 
SelectedColor = Color.Red 
case "WhiteRadioButton" 
SelectedColor = Color.White 
case "YellowRadioButton" 
SelectedColor = Color.Yellow 
End Select 
End Sub 
Private Sub OkButton=Click(ByVal sender As System.Object, 
ByVal e As System. EventArgs) Handles OkButton. Click 
' Change the color based on the selected radio button. 
Me . BackColor = SelectedColor 
End Sub 
Calling Event Procedures 
If you wish to perfonn a set of instructions in more than one location, you 
should never duplicate the code. Write the instructions once, in an event 
procedure. and "call" the procedure from another procedure. When you call an 
event procedure. the entire procedure is executed and then execution returns 
to the statement following the call. 
The CaU Statemeut-Ceueml Fol'ln 
0 ¢51 
s[ (Call] ProcedureName() 
Notice that the keyword Call is optional and rarely used. You must include 
the parentheses: if the procedure that you are calling requires arguments. then 
place the arguments within the parentheses; othenrise leave them empty. Note 
that all procedure calls in this chapter do require arguments. 
Tbe Call Statement- E.-xamples 
~ call ClearButton_Click(sender, e) 
a 
~ 
ClearButton_Click(sender, e) 
Equivalent to the previous statement. 
181 
• 
m~------------------------------~ 
Notice the arguments for both of the example Call statements. You are passing 
the same two arguments that were passed to the calling procedure. If you ex-
amine any of the editor-generated event procedure headers. you can see that 
every event procedure requires these two arguments, which can be used to 
track the object that generated the event. 

182 
v 
S 
l l 
,\ 
I. 
C 
Decisions and Conditions 
Private Sub SummaryButton_Click( 
ByVal sendrr As System. Object, ByVal e As System.EventArgs) Handles SummaryButton.Click 
. . . 
, 
:r---' 
NewOrderButton_Click(sender, e) ' Call the NewOrderButton_Click event procedure . 
ln the programming example that follows, you will accumulate individual 
items for one customer. "\'\'hen that customer's order is complete. you need to 
clear the entire order and begin ru1 order for the next customer. Refer to the inter-
face in Figure 4.13; notice the two buttons: Clear for Next Item and New Order. 
The button for next item clears the text boxes on the screen. The button for a new 
order must clear the screen text boxes and clear the subtotal fields. Rather than 
repeat the instmctions to clear the individual screen text boxes, we CaJl call 
the event procedure for ClearButton_Click from the NewOrderButton_Click 
procedure. 
Private Sub NeWOrderButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles NewOrderButton.Click 
' Cl ear the current order and add to totals. 
ClearButton_Click(sender, e) 
' Call the Cl earButton_Cli ck event procedure. 
' Continue with statements to clear subtotals. 
In the NewOrde rButton_Click procedure. all the instructions in 
ClearButton_Click are executed. Then execution returns to the next statement 
following the call. 
a..J R 'n R -- for Reading 'n Refreshment 
Order lnfonnation 
Quantiy 
:J Ta!seout? 
~em Amounl 
Sl.b'To!al 
Tax (flakeout) 
Total Due 
Coffee Selections 
·~ ~puccino 
_ 
Espress~ 
P l.atte 
,- jced latte 
Iced Car:!Puccino 
liew Order II ~ummill)' II 
&.it 
Fi g ure 4.13 
A fomt with buttons t!wt 
perfomt overlapping functions. 
The New Order button must 
include the same tasks as 
Clear for Next Item. 

( ' 
II ;\ 
1• 
1' 
t: 
R 
our Hands-On Programming Example 
Create a project for R 'n R- for Reading 'n Refreshment that calculates the 
amount due for individual orders and maintain~ accumulated totals for a sum-
mary. Have a check box for takeout items, which are taxable at 8 percent: all 
other orders are nontaxable. Include radio buttons for the five coffee selections: 
Cappuccino. Espresso. Latte.. Iced Cappuccino. and Iced Latte. The prices for 
each will be assigned using these constants: 
Cappuccino 
2.00 
Esp1·esso 
2.25 
Latte 
1.75 
Iced (either) 
2.50 
Use a button for Calculato Soloction. which will calculate and display the 
amount due for each item. Display appropriate error messages for missing or 
nonnumeric data. 
A button for Clear for Next Item will clear the selections and the amount for 
the current item and set the focus back to the quantity. The Cloar button should 
be disabled when the program begins and be enabled after the user begins an 
order. 
Acldit ional text boxes in a separate group box 1~i!J display the swmnary in-
fonnation for the current order. i11cluding subtotal. tax. and total. 
Bullons at the bottom of the form will be used for New 0/Wr, Summary. and 
Exit. TI1e New Order button will confinn that the user wants to clear the current 
order. lf the user agrees. clear the current order and add to the summary totals. 
The Summary button should display a message box with the number of orders, 
the total dollar amount, and the average sale amount per order. 
Planning tlw Proj('<'l 
Sketch a form (Figure 4.14). which your users s ign as meeting their needs. 
Plan the Objects and Properties Plan the property settings for the form and 
each of the controls. 
Object 
BLllingFonn 
GroupBoxl 
GroupBox2 
GroupBox3 
CappuccinoRadioButton 
EspressoRadioButton 
Name 
Text 
Accept.Button 
CancelButton 
Text 
Text 
Text 
Name 
Text 
Checked 
Name 
Text 
Setting 
BillingForm 
R 'n R--for Reading 'n Refreshment 
CalcutateButton 
ClearButton 
Order I nfonnatian 
Coffee Selections 
(blank) 
CappuccinoRadioButton 
C&appuccino 
True 
EspressoRadioButton 
Espre..&o 
183 

184 
\ 
S 
l 
\ 
I. 
n 
' 
" 
C 
Decisicn• and Conditicn. 
The plan11i11g sketch of the f orm for the hand<-on programming exercise example. 
Bliii11{1FOrm 
CalculateButton 
Cle.arButton 
(dlsal;>le.::l ) 
ltemAmountTextBox 
Obj~e l 
LatteRadioBullon 
lc..:ILalte RadioButton 
,_ 
,...-
'---
I--
I 
QusntltyTextBox 
Order lnform.atlon I 
Cow...e SelectiOns -
1+- ~ 
Qu.arttlty I 
"' I 
,.-)0 
Ts~utf' 
@ C,t~ppucclno 
'-+l (;alculste 1
1C!earfor 
1
1 
0 Espre55Q 
0
LaJ;te 
Selection 
Next Item 
~ 
Olced Latte 
Item Amount ~ 
I 0 Iced CaJ2pucclno 
-----
Sui;>Tot.al 
I 
I 
Tax (If Takeout) 
I 
I 
Total Due 
I 
I 
I N~Orderl 
I Summary I 
I Exlt I 
t 
t 
t 
I 
I 
I 
Nei'.OrderButton 
Summ.aryBut ton 
ExttBut ton 
(dls.al;>led) 
Property 
Se tting 
Name 
I.atteRodioButton 
Text 
La&tte 
Name 
k edLatteRadioButton 
Text 
&Iced Latte 
lce(ICappuccino RadioButton 
Name 
lcedCappuccinoR.adioButton 
Text 
l·:ed Ca&ppuccino 
Labell 
Text 
&Quantity 
QuantilyTextBox 
Name 
QuantityTextBox 
Text 
(hlan~) 
Tax CheckBox 
Name 
TaxCheckBox 
Text 
Ta&keout ? 
Lahel2 
Text 
l!emAmow1l 
Lahel3 
Text 
~ubTotal 
Label4 
Text 
Tox (ii Takeout) 
LabelS 
Text 
Total Due 
ltemAmountTextBox 
Name 
hemAmountTextBo.• 
Read Only 
True 
TabStop 
False 
1-
r-
-
GroupBox1 
GroupBox2 
CappucclnoRadloButton 
EspresooRadloButton 
L.atteR.adloButton 
Iced LatteR.adloButton 
lce.::ICappucclnoRadloButton 
GroupBox3 
Sui;>TotaiTextBox 
TaxTextBox 
Totarrext Box 

c 
II 
i\ 
•• 
T 
t: 
R 
Object 
Property 
Setti_n~ 
SubTotaiTextBox 
Name 
SubTotaiTextllox 
Read Only 
True 
TabStop 
False 
TaxTextBox 
Name 
TaxTe.,tBox 
Read Only 
True 
TabStop 
false 
TotalTextBox 
Name 
TotaiTextBox 
Read Only 
True 
TabSiop 
False 
CalculateBullon 
Name 
CalculateButlon 
Text 
&CalcuJate Selection 
ClearBulloo 
Name 
ClearBuuoo 
Text 
C&lear fur Next Item 
Enabled 
false 
Ne,.,OrderBuuon 
Name 
NewOrderButton 
Text 
&New Order 
Enabled 
false 
Swnmary Button 
Name 
Summary Button 
Text 
&Summary 
E..itBullou 
Name 
ExitButton 
Text 
E&xit 
Pion the Event Procedures You need to plan the actions for five event proce-
dures for the buttons. 
Objecl 
Pr·ocedure 
CalculaleButton 
Click 
CJearButlon 
Click 
Nm••OrderButtou 
Click 
Summary Button 
Click 
Exit Button 
Click 
Aetion 
Vnlid_ate for blank or nonnume ric amount. 
Find price of drink selection. 
Multiply price by quanlily. 
Add amount to subtotal. 
Calculate lox if needed. 
Calculate tctal =subtotal+ tax. 
Forn1at and display the values. 
Disable the Takeout check box. 
Enable the Clear bullon and Ne~o• Order button. 
Clear the coffee selections. 
Clear the quantity and the item price. 
Set I he foe,.. to tl1e quantity. 
Confinn clearing current order. 
Clear the current order. 
If subtotal > 0 
Accumulate total sales and count. 
Set subtotal and total due to 0. 
Enable Takeout check box. 
Disable the Clear button and New Order button. 
If curTCul 01der not added to totals 
Call NewOrderBullon_Click. 
Culculale the a\·erage. 
Dioplay the summary totals iu a me .. age box. 
Tenninate the project. 
ISS 

186 
\ 
S 
L 
\ 
I, 
ll 
\ 
s 
Write the Project Follow the sketch in Figure 4.14 to create the form. Figure 
4.15 shows the completed f01m. 
• 
Set the properties of each object as you have planned. 
Write the code. Working from the pseudocode. write each event procedure. 
When you complete the code. use a variety of data to thoroughly test the 
project. Make sure the tab order is set correctly so tl1at Lhe insertion point 
begins in QuantityTextBox. 
•~ R n R -· for Reading 'n R.freshment 
l(a1Wate 
Seleai:ln 
SubTotal 
Cdfee Seieebans 
o CsP~>occno 
e-Q 
~e 
!cedl.atte 
Iced Caili)UC:dno 
Tax (I Takecu) 
Total Due 
~
I[ 
Th(' Pa·ojrct Codin:,: Solmion 
'Program Name: 
'Programmer: 
'Date: 
'Description: 
'Folder: 
Ch04HandsOn 
Bradley/Millspaugh 
June 2010 
This project calculates the aBount due 
based on the customer selection 
and accumulates summary data for the day. 
Ch04HandsOn 
Public Class BillingForm 
' Declare module-level constants. 
const TAX_RATE_Decimal As Decimal = O.OBD 
Const CAPPUCCINO_PRICE_Decimal As Decimal = 2D 
Const ESPRESSO_PRICE_Decimal As Decimal = 2.25D 
Const LATTE_PRICE_Decimal As Decimal= 1.750 
Const ICED_PRICE_Decimal As Decimal = 2.50 
F l g ur P -L J 5 
The form for the hands-on 
programming exercise. 

C 
II 
A 
I' 
T 
E 
R 
' Declare module-level variables for summary information. 
Private SubtotalDecimal, TotalDecimal, GrandTotalDecimal As Decimal 
Private CustomerCountinteger As Integer 
Private Sub CalculateButton_Click(ByVal sender As system.Object, 
ByVal e As System.EventArgs) Handles CalculateButton.Click 
' Calculate and display the current amounts and add to totals . 
Dim PriceDecimal, TaxDecimal, ItemAmountDecimal As Decimal 
Dim auantitylnteger As Integer 
• Find the price. 
If CappuccinoRadioButton.Checked Than 
PriceDecimal = CAPPUCCINO_PRICE_Decimal 
Elsalf EspressoRadioButton.Checked Then 
PriceDecimal = ESPRESSO_PRICE_Oecimal 
Elself LatteRadioButton.Checked Then 
PriceDecimal = LATTE_PRICE_Decimal 
Elself IcedCappuccinoRadioButton.Checked or 
IcedLatteRadioButton.Checked Then 
PriceDecimal = ICED_PRICE_Oecimal 
End If 
' Calculate extended price and add to order total . 
Try 
auantitylnteger = Integer.Parse(OuantityTextBox .Text) 
ItemAmountDecimal = PrioeDeoimel • auantitylnteger 
SubtotalDecimal += ItemAmountDecimal 
If TaxCheckBox.Checked Then 
TaxOecimal 
SubtotalDecimal • TAX_RATE_Decimal 
Else 
Taxoecimal 
o 
End If 
TotalDecimal = SubtotalDecima1 + Taxoecimal 
ItemAmountTextBox.Text = ItemArnountDecimal.ToString('C' ) 
SubTotalTextBox.Text = SubtotalDecimal.ToString("N") 
TaxTextBox. Text = TaxOecimal. TcString ( "N") 
TotalTextBox. Text = TotalOecimel. ToString( "C") 
• Allow a change only for new order. 
TaxCheckBox.Enabled = False 
• Allow Clear after an order is begun. 
ClearButton .Enabled = True 
NewOrderButton.Enabled = True 
catch auantityException As FormatException 
MessageBox. Show( ' Quantity must be numeric.", 
"Data Entry Error", MessageBoxButtons.OK, 
MessageBoxlcon.Information) 
With auantityTextBox 
.Focus() 
.SelectAll() 
End With 
End Try 
End Sub 
187 

188 
S 
l 
\ 
L 
R 
\ 
S 
(" 
Ckc;..imu anti Corul i Mill 
Private Sub ClearButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ClearButton.Click 
' Clear the appropriate controls. 
cappuccinoRadioButton.Checked = True ' All others are false . 
ItemAmountTextBox.Clear() 
With auantityTextBox 
.Clear() 
. Focus() 
End With 
End Sub 
Private Sub NewOrderButton_Click(ByVal sender As system.Object, 
ByVal e As System.EventArgs) Handles Ne~OrderButton.Click 
' Clear the current order and add to the totals. 
Dim ReturnDialogResult As DialogResult 
Dim MessageString As String 
' Confirm clear of current order. 
MessageString = 'Clear the current order figures?" 
ReturnDialogResult = MessageBox. Show(IAessageString, "Clear Order' , 
MessageBoxButtons.YesNo, MessageBoxicon.auestion, 
MessageBoxDefaultButton .Button2) 
If ReturnDialogResult = DialogResult.Yes Then 
Clearsutton_Click(sender, e) 
' Clear the 
SubTotalTextBox.Clear() 
TaxTextBox.Clear() 
TotalTextBox .Clear() 
' Add to Totals. 
' Add only if not a new order/customer. 
If SubtotalDecimal <> 0 Then 
GrandTotalDecimal += TotalDecimal 
CustomerCountinteger += 1 
' Reset totals for next customer. 
SubtotalDecimal = 0 
TotalDecimal = 0 
End If 
' user said Yes. 
screen fields. 
' Clear appropriate display items and enable check box. 
With TaxCheckBox 
.Enabled 
True 
.Checked = False 
End With 
Clearsutton.Enabled = False 
NeworderButton.Enabled = False 
End If 
End Sub 

C 
II 
i\ 
I' 
1' 
1\ 
H 
Private Sub summaryButton_Click(ByVal sender As System.Object , 
ByVal e As System.EventArgs) Handles SummaryButton.Click 
• Calculate the average and display the totals. 
Dim AverageDecimal As Decimal 
Dim MessageString As String 
If TotalDecimal <> o Then 
• Make sure last order is counted. 
NewOrderButton_Click (sender, e) 
End If 
If customercountinteger > o Then 
· Calculate the average . 
AverageDecimal = GrandTotalDecimal 1 customercountinteger 
' Concatenate the message string. 
MessageString = "Number of Orders: 
' & 
CustomerCountinteger.ToString() & 
Environment.NewLine & Environment.NewLine & 
"Total Sales: 
" & GrandTotalDecimal. ToString( "C") & 
Environment.NewLine & Environment.NewLine & 
'Average Sale: 
' & AVerageOecimal. ToString ( "C") 
MessageBox.Show(MessageString, "Coffee Sales Summary" , 
MessageBoxButtons.OK, MessageBoxicon.Information) 
Else 
Messagestring = "No sales data to summarize.' 
MessageBox. Show(MessageString, "Coffee Sales summary" , 
MessageBoxButtons.OK, MessaQeBoxicon.Information) 
End If 
End Sub 
Private Sub ExitButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitButton.Click 
· Terminate the project. 
Me.Cl ose() 
End Sub 
End Class 
Debugging Visual Basic Projects 
One of the advantages of programming in the Visual Studio environment is the 
avaHability of debugging tools. You can use these tools to help find and elimi-
nate logic and run-time en'Ors. The debugging tools also can help you to follow 
the logic of existing projects to better understand how they work 
Sometimes it's helpful to know the result of a Boolean expression.the value 
of a variable or property. or the sequence of execution of your program. You can 
follow program logic in Debugging mode by single-stepping through code: you 
also can get information about execution without breaking the program run. 
using the Writeline method of the Debug class. 
189 

190 
v 
S 
l l 
,\ 
I. 
C 
Decisions and Conditions 
In the following sections, you will learn to use many of the debugging tools 
on the VB standard toolbar (Figure 4.16) and the Debug menu (Figure 4.17). 
~~g L---------------~ 
Windows 
Start Debogging 
:;~ Step into 
c.:. Step OVer 
Exceptions. .. 
Q.ggl6\lt(.')lep.o•l\i 
Ne\V Breakpoint 
;:J DeJctt: AU Bre.Jk~oiou 
Cleor A8 D•tanps 
&:port Oef.4.1ips. ... 
Import DDtoTif» ... 
Option:s . .,ndSd"tings ... 
W l'itiug Dc>bug Outpul 
f5 
F8 
Shifi•F8 
Q rl-t Ait+E 
<9 
You can place a Debug. Wri teline method in yom· code. which sends output 
to the Immediate 1~indow during program execution. l.n t11e argument for the 
Writeline method, you can specify a message to IITite or an object that you 
want tracked. 
The Debng.WI'iteUue Method-Ccueml Fonu 
Debug.WriteLine(TextString) 
Debug.Writeline(Object) 
The Debug. Wri teline method is overloaded. so you can pass it a string argu-
ment or the name of an object. 
The Debug. w,·itel.iue Method- Exmnples 
~ Debug .Wri teLine( "CalculateButton procedure entered ." ) 
Fi g n••e 4 . 16 
The debugging buttons on the 
VB standard wolbar. 
l<' i g ur e 4.1 7 
The debugging options on the 
Professional Edition Debug 
menrt showi11g the keyboard 
shortcut keys. 
~ 
Debug .WriteLine(QuantityTextBox) 
i' Debug .Writeline( "Quantitylnteger = " & Quantitylnteger. ToString()) 
When the Debug . Wri teL ine method executes, its output appears in the Im-
mediate window. Figure 4.18 shows the output of the three example statements 
above. Notice the second line of output. for QuantityTextBox- the class of the 
object displays along with its current contents. 

C
II
,\1°Tt:
R 
l1nmtdiilte Vllndo;., 
Calculate:ISul ton Pt"'t:e<lure cnt~l"'e.tl . 
Sy~tem.Nindow~.fDrms . T ~xtBox, T.:xt. 25 
Quentityinteger -
25 
I 
"' 
fD lmmedlilte Vllndcr~ 
You may find it useful to place Writeline method~ in If statements. so 
that you can see which branch the logic followed. 
If countlnteger > 10 Then 
Else 
Debug. Writeline( "Count is greater than 10. •) 
' Other processing. 
Debug. Writeline ("Count is not greater than 10. ") 
' Other processing. 
End If 
An advantage of using Wri teline. rather than the other debugging tech-
ni<Jues that follow. is that you do not have to break program execution. Also. 
Debug.WriteLine statements do not execute in Release compiles. so the state-
ments can be left in the code for post-release debugg.ing. 
Clcaril~ t..he Immediate Window 
You can clear the Immediate "'indo~t·: Right-click in the 10·indow and choose 
Clear AI/. 
Pau!!!ing Exet'uliun wilh lilt' B.-.... ak AU Bullon 
You can click on the Break All toolbar button to pause execution. Titis step 
places the project into debug time at whatever line the program is executing. 
However. you 11ill generally prefer to break in the middle of a procedure. To 
choose the location of the break. you can force a break with a breakpoint. 
Forcing a B1·eak 
During the debugging process. often you want to stop at a particular location in 
code and watch what happens (e.g .. which branch of an If I Then I Else: 
which procedures were executed: the value of a variable just before or just after a 
calculation). You can force the project to break by inserting a brealqJoilll in code. 
To set a breakpoint. place the mouse pointer in the gray margin indicator 
area at the left edge of the Editor window and click; the line will be highlighted 
in red and a large red dot 1~ill display in the margin indicator (Figure 4.19). 
After setting a breakpoint. start execution. When the project reaches the 
breakpoint. it will halt. display the line. and go into debug time. 
191 
The lmrm!dinte window showJ 
the output of the 
Debug . Writeline mellwd. 
l~llil#l 
Place the insertion point in the code 
line you wan! as a breakpoint and 
press F9. Press F9 again to toggle 
the breakpoint off. • 

192 
v 
S 
l l 
:\ 
L 
G 
,\ 
S 
(' 
Decisions and Conditions 
A program staU3ment with a breakpoint set appears highlighu,d, and a dot appears in the gray margin indicator area. 
Try 
' Convert quont. to nunc:ric Vi!trioblc:. 
t 
Mi§MiiMfl·W*'ri®*h+£$1' 
Try 
' Convc:rc price if qu~ntity w.:as -successfuL 
You can remove a breakpoint by clicking again in the gray margin area. or 
clear all breakpoints from the Debug menu. 
Checking the CutTent Values of Expressions 
You can quickly check the cutTent value of an expression sucl1 as a variable. a con-
troL a Boolean expression. or an ruithmetic expression. During debug time. display 
the Editor window and point to the expression that you want to view; a small labeL 
called a DataTip. pops up and displays tl1e current contents of the expression. 
The steps for viewing the contents of a variable during nm time are as 
follows: 
l. Break ilie execution using a breakpoint. 
2. If ilie code does not appear in the Editor. click on the Editor's tab in the 
Documeni window. 
3. Point to the variable or expression you wish to view. 
The current contents of ilie expression will pop up in a Data Tip (Figure 4.20). 
Ste pping tlwough Code 
The best way to debug a project is to thoroughly understand what the project is 
doing every step of the way. In early programming days, this task was performed 
by following each line of code manually to understand its effect. But you can 
now use tl1e Visual Studio deb ugging tools to trace program execution line by 
I ine and see the progression of the program as it executes through your code. 
You step through code at debug time. You can use one of the techniques al-
ready mentioned to break execution or choose one of ilie stepping commands at 
design time: the program will begin running and immediately transfer to debug 
time. 
F i g n•• e 4.2 0 
Point to a. variable IUime in 
code and its current value 
displays in a DataTip. 

C 
II 
A 
1• 
'I' 
II 
ll 
-1 
Two of the stepping commands on the Debug menu in Debugging mode are 
Step Into and Step Over. You also can use the toolbar buttons for stepping or the 
keyboard shortcuts shown on the menu (refer to Figure 4.17). 
These debugging commands force the project to execute a single line at a 
time and to display the Editor window with the cwTent statement highlighted. As 
you execute the program. by pressing a button. for example. the Click event 
occurs. Execution transfers to the Click event procedure. the Editor window for 
that procedure appears on the screen. and you can follow line-by-line execution. 
Ste[• IJilo 
Most likely you will use the Step Into command more than the Step Over 
command. When you choose Step Into (from the menu. the toolbar button. or 
F8). the next line of code executes and the progt-am pauses again in debug time. 
If the line of code is a call to another procedure. the first line of code of the 
other procedure displays. 
To continue stepping through your program execution. continue choosing 
the Step Into command. When a procedure is completed. your form will display 
again. awaiting an event. You can click on one of the form's buttons to continue 
stepping through code in an event procedure. If you want to continue rapid ex-
ecution without stepping, choose the Continue command (from the menu, the 
toolbar button. or F5). 
Note: The keyboard shortcuts may differ. depending on the keyboard 
mapping selected in the Options dialog box. The shortcuts sh01m here are for 
Visual Basic development settings; if you are using General development 
settings. perhaps in a shared enviromnent with other language development. 
the keyboru·d shortcut for Step Into is Fll and Step Over is Fl 0. 
Step Over 
The Step Over command also executes one line of code at a time. The differ-
ence between Step Over and Step Into occms when your code has calls to other 
procedures. Step Over displays only the lines of code in the current procedure 
being analyzed; it does not display lines of code in the called procedures. 
You can choose Step Over from the menu. from the toolbar button. or by 
pressing Shift + F8. Each time you choose the command. one more program 
statement executes. 
Continuing l·•t·ogt'am Ex<>cution 
When you have seen what you want to see. continue rapid execution by press-
ing FS or choosing Continue from the toolbar or the Debug menu. 
Stor•ping Execution 
Once you have located a problem in the program's code. usually you want to 
stop execution. correct the error. and run again. Stop execution by selecting 
Stop Debugging from the Debug menu or the toolbar button. or press the key-
board shortcut: Ctrl + Alt + Break. 
Note: The keyboard shortcuts differ depending on the keyboard mapping 
scheme selected in Tools I Options I Show All Options. 
E<Ut and Continue 
Another helpful feature for debugging programs is Edit-and-Continue. When 
your program goes into Debugging mode and you make minor modifications to 
the code in the Editor. you may be able to continue execution without stopping 
to recompile. Press F5 or choose Debug I Continue. If the changes to the code 
are too major to continue, the debugger does not allow the changes. Stop pro-
grmn P.XH~uliure, rr1ak ... 11•~ d1a11ge~, i-trul ret~urupil ... ll•~ prugnun. 
193 

194 
v 
s 
l l 
" 
.. 
C 
Decisions and Conditions 
T he Locals \Vimluw 
Sometimes you may find that the Locals window displays just the informa-
tion that you want (Figure 4.21). The Locals 11~ndow displays all objects and 
variaulell that are witltiu :scope at uelJu~ L.illle. Tltal meau:s tltat if you break 
execution in the CalculateButton_Click event procedure. all variables local 
to that procedure display. You also can expand the Me entry to see the state of 
the form's controls and the values of module-level variables. Display the 
Locals window from the toolbar button or the Debug I Windows I Locals menu 
item. which appears only when a program is running. either in run time or 
debug mode. 
locals 
• 'I X 
J Name 
_j Valuce 
I Type 
~ 
IE ~Me 
lCh03HandsOn.8oo<:\ • Ch03HandsOn.BootSaleFO<m 
~ 
~ Average01scountDedmal 
00 
Decimal 
Q Oi~countOecimal 
l7.51!t 
Decimal 
() Oi~counted.PriceOecimal 
212.50 
Decimaf 
!II Q c: 
iSys~m~~vO'ltAr_g~} 
j Systcn:-£vc~9~:; 
~ 
EdendcdPriceDecimdl 
2500 
Dec.iln(ll 
-
. -. -
---
-
.:;l locali 
The Autos Window 
Another helpful debugging window is the Autos window. TI1e Autos window 
"automatically" displays the variables and control contents that are referenced 
in the cun·ent statement and the previous statement (Figure 4.22). Note that the 
highlighted line is about to execute next; the "current" statement is the one just 
before the highlighted one. 
You can view the Autos window when your program stops at a breakpoint. 
Click on the Autos window tab if it appears. or open it using the Debug I 
Windows I Autos menu item. Again. you must be in either run time or debug 
mode to see the menu item. 
Note: The Autos window is not available in VB Express. 
Autos 
•qx 
J Nome 
I Value 
Type 
OiscountSumOeomal 
00 
Oeomal 
10 
Integer 
10 
ill Autos "' 
l~liii:J 
To use any of the debugging wh 
dows, you must be in debug mode 
or run time. • 
l<' ign••e 4 . 21 
The Locals window shows the 
values of the local variables 
that are within scope of the 
current statement. 
The Autos window 
automatically adjusts to show 
the variables and propertks 
that appear in the previous line 
nn.d. thP. r.nrr~>.nt linP.. 

C 
II 
A 
1• 
'I' 
" 
ll 
Debugging Step-by-Step Tutorial 
i, 
In tlris exercise you will learn to set a breakpoint; pause program execution; 
single step through program instructions; display the current values in proper-
ties. variables, and expressions; and debug a Visual Basic project. 
Test the Project 
STEf' 1: Open the debugging project on your student CD. The project is found 
in the Ch04Debug folder. 
STEI' 2: Run the program. 
STEP 3: Enter color Blue. quantity "100". and press Enter or click on the Cal-
culate button. 
STEP 'k Enter another color Blue, quantity "50", and press Enter. Are the to-
tals correct? 
STEP 5: Enter color Red, quantity "30". and press Enter. 
STEI' 6: Enter color Red. quantity "10". and press Enter. Are the totals correct? 
STEI' ; , Enter color White. quantity "50". and press Enter. 
STEI' 8: Enter color White, quantity "100". and press Enter. Are t11e totals 
conect? 
STEP 9: Exit the project. You are going to locate and correct the errors in the 
Red and White totals. 
Break and Step Prognuu •=xeculion 
STEI' 1: Display the program code. Scroll to locate iliis line. which is the first 
calculation line in the CalculateButton_Ciick event procedure: 
auantityDecimal = Decimal.Parse(OuantityTextBox.Text) 
.STEP 2: Click in the gray margin indicator area to set a breakpoint on the 
selected Hne. Your screen should look like Figure 4.23. 
Notice that every occunence of QuantityDecimal is highlighted. 
This feature. new to VB 2010. can be a very helpful debugging tool. 
Note: This feature is not available in VB Express. 
Privt~tc Sub CDlcuhteButton_Click(ByVt~L sender As Sy :;t cm.Object , 
6yVal e A~ Sys tem. fvcntArgs) licndlc::; Colculate6ut t o1 , Click 
' Colculc-tc: the SUI.Udry. 
Dim Quont i tyOecinol, TotdDccirr-.al A~ Occ::irnol 
T1•y 
· convert Loput to nuneric . 
4 
=- Dec!nol.Pcw·sc(QvontltyTexO<l.X. Text) 
' Add t o the col'rect total. 
rf 6lueRadi o8utton.checked Then 
tllueTotalDecimal +=- QuantityDec in:al 
Elself RedRadioEiutton. checked rhen 
RedTota loecirr..al =- Q.uantityt>ecimal 
STEP 3: Run the project, enter Red. quantity "30". and press Enter. 
The project ,~;11 transfer control to the CalculateButton_ Click proce-
dure. stop when it reaches the breakpoint, highlight the cunent line. 
and enter debug mode (Figure 4.24). 
Note: The highlighted line has not yet executed. 
195 
Fi ~ ur e 4.2 3 
A program statement with 
a breakpoint set appears 
highlighted and a dot appears 
in the gray margin indicator 
area .. 

196 
S 
l l 
,\ 
L 
C 
Decisions and Conditions 
DebugForm ,vb X 
l~ C11lcul~ttButton 
·I, CWk 
-
Privotc: Sub CalculoteOutton~Click (GyVal sender~ Systc:m.ObiectJ 
1: 
6yVol o: A~ Sy~t~:ID .. fvcn tArg!~> ) tldndlc:; c~lc ul ab::B•Jtton .Click 
• Col.cul.::te the surnar y. 
OLn QudntityDeci..nolJ Tot.e~ lDc c:lmol A'!. 
l>cdt~al 
~ 
Tr·y 
• con\ler l lnpul to nulllt:"ri(. 
0 
§uantityoecl.ltal "' Dec illal .Pal"se(QuantityTe:<t6ox. Text)l 
' Add to the corr-ect totaL 
If DluoRodioDunon.chocked ·rhen 
~lueTotalUecin:ol •· Quantleyil'ecimol 
elseJf RedRadioButton .Checked 1 he n 
RedTotaloec ilnal = Quantityoec iDal 
STEP 1: Press the F8 key. which causes VB to execute the current program 
statement (the assignment statement). (F8 is the keyboard shmtcut for 
Debug/ Step Into.) The statement is executed and the highlight moves 
to the next statement (the If statement). 
Note: Lf the F8 key is not the conect shortcut key. the keyboard de-
faults likely have been modified. Select Tools I Options I Environment I 
Keyboard. Click the Reset button ·to reset tl1e keyboa:rd mappings to 
the ir default values. 
~TEP 5• Press F8 again: the expression (BlueRadioButton. Checked) is 
tested and found to be False. 
STEP(., Continue press ing F8 a few more I irnes and watch the order in which 
program statements execute. 
View Lbe Contents of Pt'O):M' I'Iies, Variables, and Boole~m Expn~ssions 
~TEP 1: Scroll up if necessary a nd point to auantityTextBox. Text in the 
breakpoint line: the contents of the Text property pop up (Figure 4.25). 
Try 
Convert input To nuner:ic. 
id"3tA1 €1M• Eta; 6''#rti@ft!tii§M*ftMMI' 
l~!jlj'QuanhtyTed!loxJ{T.rt~ "31l' } a-1 
' A<fd to the correct total. 
I f BlueRadi oButton.Ch ec:ked Then 
Bl ueTot:al Decin:al 
~:: Quantityi)ecimal 
Eh elf Red~adioButton . Ch e cked Then 
STEP 2: Point to QuantityDecimal and view the contents of that variable. No-
tice that the Text property is enclosed in quotes and tbe numeric vari-
able is not. The 300 means 30 Decimal. 
lqj!III"C.' 4.24 
When a breakpoint is reached 
during program e.-recution, 
V1.Sual l1asic ent-er.! deb ttg time. 
displays the Editor window. and 
highlights the breakpoint line. 
Fi~t•••• e 4.25 
Point to a property reference in 
code and the current contents 
pop "P· 

<" u ·' 
•• ·r •: n 
HEt• !J: Point to BlueRadioButton. Checked in the If statement: then point 
to RedRadioButton. Checked. You can see the Boolean value for 
each of the radio buttons. 
STEt• I: Point to RedTotalDecimal to see the current value of that total vari-
able. This value looks correct. since you just entered 30. which was 
added to the total. 
f.omirme Pr·o;:ram Exe•·ution 
STEP 11 Press FS. the keyboard shortcut for the Continue command. The 
Continue command continues rapid execution. 
"TEl' 2: Enter color Red and quantity "10". When you press Enter. program 
execution will again break at the breakpoint. (lf the VS IDE window 
does not appear on lop of your fonn. click its Taskbar button.) 
The 10 you just entered should be added to the 30 previously en-
tered for Red. producing 40 in the Red total. 
'ITEI' 3: Use the Step Into button on the tooU)ar to step through execution. Keep 
pressing Step Into until tl1e 10 is added to Red'l'ota!Decimal. Display 
the current contents of the total. Can you see what the problem is? 
Hint: RedTotalDecimal has only the current amount. not the sum of 
the two amounts. The answer will appear a little later: try to find it 
yourself first. 
You wiU fu this error soon. after testing the White total. 
TP;;t the Whill' Total 
STEP 1: Press FS to continue execution. If the form does not reappear. click 
the project's Task bar but1on. 
.,,'EI' 2: Enter color \l'hite. quantity "100". und press Enter. 
STEP 3: When execution halts at the breakpoint. make sure that the IDE 
llindow is on top and press FS to continue. This returns to rapid 
execution until the next breakpoint is reached. 
STEP -L: Enter color White, quantity "50". and press Enter. 
"TEl' 5: Press F'8 several times when execution halts at the breakpoint until 
you execute the line for the \l'llite total. Remember that the high-
lighted line has not yet executed: press Step Into {F8) one more time. 
if necessary. to execute lhe addition statement. 
STEP 6: Point to each variable name to see the current values (Figure 4.26). 
Can you see the problem? 
' Add to the coc-r ec-t total. 
If Bhc:R(IdioBu'=l:on .<hecked - J;en 
!3lueTotolDeciluJ l +-
Qu~ntityDc:cin~ l 
~If RedRodio3utt<en.Chech-d "Then 
~ ::dToto lO.:cia41 = QJ~ntityOt::cind 
flseif VhiteRadLooonon .checked Then 
W'l! teTotal.Dec t..a"'-1.!+:=.• _.1,---,.,--,---,,..,.,.--, 
fnd If 
1±9 WhiteTotaiDffim•lllO <>-I 
197 
Switch between the IDE window 
and your running application using 
the Taskhar buttons. • 
Fi~ure 4.26 
Point tc the vari<Lble name in 
codi! and iu current val~re 
di~plays as 2 DecimaL 

198 
v 
S 
l l 
,\ 
I. 
C 
Decisions and Conditions 
sn :r 7 : Display the Autos window by clicking on its tab. H the tab does not 
appear. select Debug/Windows/ Autos. The Autos window displays the 
current value of all properties and variables referred to by a few state-
ments before and after the current statement (Figure 4.27). 
STEP 8: Identify all the errors. When you are ready to make the corrections, 
continue to the next step. 
The Autos window displays the current content-s of variables and properties in the statements before and after the current 
statement 
F> l 
lOJ% 
• • I
~ 
' Format t otals: for output. 
~lueTotal1extBox . Text =- Bl ueTotalOeciJI'Ial. ToString() 
R.edTotalTextBox. Text =- RedTotalDec i.nal . ToString() 
YhiteTota llext Box. Text = Whi teTota l Dec in:al. ToStr ing() 
"' 
II Name 
Value 
I Type 
~ BlueT ota!Oecimal 
00 
Decimal 
1±1 ~ 
91u•Totall«<i9o" 
{TEl<! = ''0') 
~ 
BlueTotalle«tBox.Te>t 
"0' 
~erl 
---'-'"V-"is=u11l Bosic O~bugging Excrci~c" 
liD Autos 
;: 
Conect the Red Total Errol' 
STEP 1: Stop program execution by clicking on the Stop Debugging tool bar 
button (Figure 4.28). 
I 
~ 
=ti<;:: ~ ... I ~ :3' ll!ll '-t' :!> Cl ·I 
!Stop Ocbugg1ng ((tfl-t-.Ak~Br~k)l 
STF:P 2: Locate this line: 
RedTotalDecimal = auantityDecimal 
This statement replaces the value of RedTotalDecimal with Quantity-
Decimal rather than adding to the total. 
STEP 3: Change the line to read: 
RedTotalDecimal += auantityDecimal 
Figur e 4. 2 8 
Click on the Stop Debugging 
button on the Debug toolbar to 
halt program execution. 

C 
II 
A 
1• 
'I' 
I' 
ll 
Col'rcct the White Total .Error· 
STEP 1: Locate this line: 
Whit eTotalDecimal += 1 
Do you see the problem with this line? It adds 1 to the total. rather 
than adding the quantity. 
STEP 2: Change the statement to read: 
WhiteTotalDecimal += QuantityDecimal 
STEP 3: Press FS to start program execution. Enter color White and "100" and 
press Enter. 
STEP L: Press FS to continue when the project halts at the breakpoint. 
STEP 5 : Enter White, "50". and press Enter. 
STEP 6 : At the breakpoint, clear the breakpoint by clicking on the red margin 
dot for the line. 
STEP 7 : Press FS to continue and check the total on the form. It should be cor-
rect now. 
STEP 8: Test the totals for all three colors carefully and then click Exit. 
Test the Exception ElandJi:ug 
STEP 1: Set a breakpoint again on the first calculation line in the Calculate-
Button_ Click event procednre. 
STEP 2: Run the program, this time entering nonnumeric characters for the 
amount. Click on Calculate: when the program stops at the break-
point. press F8 repeatedly and watch program execution. The message 
box should appear. 
Force a Rtm-Timc El'l·or 
For this step. you will use a technique called commenting out code. Program-
mers often add apostrophes to the beginning of code lines to test the code with-
out those lines. Sometimes it works well to copy a section of code. comment out 
the original to keep it unchanged. and modify only the copy. You'll find it easy 
to uncomment the code later~ after you finish testing. 
STEP 1: Select Delete All Breakpoints from the Debug menu if the menu item is 
available. The item is available only when there are breakpoints set in 
the program. 
STEI' 2: At the left end of the line with the Try statement, add an apostrophe, 
turning the line into a conunent. 
STEP 3: Scroll down and locate the exception-handling code. Highlight the 
lines beginning with Catch and ending with End Try (Figure 4.29). 
STEP <L: Click on the Comment out the selected lines button on the Editing tool-
bar (Figure 1 .. 30). The Editor adds an apostrophe to the start of each 
of the selected lines. 
STEP 5: Run the project. This time click the Calculate button without entering 
a quantity. A run-time etTor 11ill occur (Figure 4.31). 
You can click on the Close button for the exception error message 
or click the Stop Debugging button on the toolbar. Either will cancel 
execution. 
199 
l~ljjl#l 
You can change the current line of 
execution in Debugging mode by 
dragging the current line indicator 
arrow on the left side of the Editor 
window. • 

200 
\ .' 
S 
U 
A 
I, 
C 
Decisio1u and ConJitions 
STEP 6: After you are finished testing the program. select the commented lines 
and click on Uncomment the selected lines button (Figure 4.32). 
Note: You can just click an insenion point in a line or select the en-
tire line when you comment and uncomment lines. 
catch 
tle5~<!8<.>x . Shcw( "E,ot~t r Uf~r tc da ta."_, "DdlG Error" J 
Mess,.;l6e6o.J.EUtttrb .OK .. f>b-,dje6oxi co-1 . Inionr.atlo n) 
With Q.JantityTextBOX 
.focus() 
.selectAll() 
End With 
End 1•)1 
End SUb 
j
Comment out the sele!'\ed ltnes. !Ctrl+K. Ctri•C) 
The n~issing data cause an exception and nm-time error. 
_b. Forma1Exception was unhandled 
Jnput string was not in a correct format. 
Troubleshooting tips; 
Figu••e 4.29 
Select the lines to convert to 
comments for debugging. 
Fif!n••e 4.30 
Click the Comment out the 
selected lines toolbar button 
to temporarily make program 
lines into comments. 
Figu••e 4.31 
Mcke sure your method arguments are in the right format. 
,~. 
When c.onV".:riing <1 :.l1ing lo Ooto:Timc-, pone the :.t1ing to toke lhc: dulc bdorc pvttin9 cuot.hvori.ublc. il"'to the Dole Time objec-t-. 8 
Get general help for this exception. 
Search for more Help Online ... 
Actions: 
View Detail ... 
Copy exception detail to the clipboard 
[uncommentthe !elected l.nes. (Ctri+ K, Ctri-U)j 
Fign••e 4.3~ 
Click the Uncomment the 
selected lines toolbar button 
after testing the program. 

C
ll
i\
l•
l '
E
IC 
1. Visual Basic uses the If I Then I Else statement to make decisions. An 
Else clause is optional and specifies the action to be taken if the expres-
sion evaluates as False. An If I Then I Else statement must conclude 
with an End If. 
2. UML activity diagrams can help visualize the logic of an If I Then I 
Else statement. 
::!. The Boolean expressions for an If statement are evaluated for True or False. 
4. Boolean expressions can be composed of the comparison operators. which 
compare items for equality. greater than. or less than. The comparison of 
nwneric values is based on the quantity of the number. ~t·hile string com-
parisons are based on the ANSI code table. 
5. The ToUpper and Tolower methods of the String class can convert a text 
value lo upper- or lowercase. 
6. The And. Or. AndAlso. and OrElse logical operators may be used to com-
bine multiple Boolean expressions. With the And operator. both expres-
s iom; must be tme for the entire expressions to evaluate True. For the Or 
operator. if either or both conditions are true. the entire expression evalu-
ates as True. \\'hen both And and or are used in a Boolean expression. the 
And expression is evaluated before the Or expression. AndAlso and 
OrElse short circuit the expression so thai the second part of a compound 
expression may not have to be tested. 
7. A nested If statement contains an If statement within eitber the true or 
false actions of a previous If statement. An Else clause always applies to 
the last unmatched If regardless of indentation. 
8. The state of radio buttons and check boxes is better tested with If state-
ments in the event procedure for 11 bull on rather than coding event proce-
dures for the radio bullon or check box. Use individual If statements for 
check boxes and nested If statements for radio buttons. 
9. The MessageBox. Show method can display a multiple-line message if you 
concatenate a NewLine character lo specify a line break. 
10. You can choose to display multiple buttons in a message box. The 
MessageBox. Show method returns an object of the DialogResult class. 
which you can check using the DialogResult constants. 
11. Data validation checks the reasonableness or appropriateness of the value 
in a variable or pi'Operty. 
12. A single event procedure can be assigned to multiple controls, so that the 
controls share the procedure. 
13. You can use the sender argument in an event procedure to determine 
which control caused the procedure to execute. 
14. One procedure can call another procedure. To call an event procedure. you 
must supply the sender and e arguments. 
I 5. A variety of debugging tools are available in Visual Studio. These include 
writing to the Immediate 1+indow. breaking program execution. displaying 
the current contents of variables. and stepping through code. 
201 

202 
ANSl code 160 
Autos window 
194 
breakpoint 191 
Boolean Expression 159 
call 181 
Case structure 177 
\ 
comparison operator 159 
compow1d Boolean Expression 163 
condition 159 
CType function 
180 
Debug.Writeline method 190 
DialogResult object 173 
End If 157 
S 
l 
\ 
L 
IC 
\ 
S 
If I Then I Else 157 
late binding 
180 
Locals 1~i ndow 194 
logical operator 163 
nested If 166 
rei a tional operator 159 
Select case 178 
short circuit 165 
Step Into 193 
Step Over 193 
ToLower method 
162 
ToUpper method 
162 
validation 175 
t • 
Decisiom and Cond i h<>ns 
l. What is the general fom1at of the statement used to code decisions in an 
application? 
2. What is a Boolean expression? 
3 . Explain the purpose of comparison operators and logical operators. 
4. How does a comparison pedormed on numeric data differ from a compari-
son performed on string data? 
5. How does Visual Basic compare the Text property of a text box? 
6 . Why would it be useful to include the ToUpper method in a comparison? 
7. Name the types of items that can be used in a comparison. 
8. Explain a Boolean variable test for True and False. Give an example. 
9 . Give an example of a situation where nested Ifs would be appropriate. 
10. Define the term validation. \'(' hen is it appropriate to do validation? 
l l. Define U1e term checking a range. 
12. When would it be appropriate to use a Case structure? Give an example. 
13. Explain the difference between Step Into and Step Over. 
14. What steps are necessary to view tJ1e current contents of a va1iable during 
program execution? 
4.1 
Lynette Rifle owns an image consulting shop. Her clients can select from 
the following services at the specified regular prices: Makeover $125. Hair 
Styling $60. Manicure $35. and Permanent Makeup $200. She has distrib-
uted discount coupons that advertise discounts of 10 percent and 20 per-
cent off U1e regular price. Create a project that will allow the receptionist to 
select a discount rate of 10 percent. 20 percent. or none. and then select a 
service. Display the total plice for the currently selected service and the to-
tal due for all services. A visit may include several services. Include but-
tons for Calculate. Clear. Print. and Exit. 
4.2 
Modify Programming Exercise 4.1 to allow for sales to additional patrons. 
Include buttons for Next Patron and Summary. "\l'ben the receptionist clicks 

C 
II 
1\ 
I' 
'I' 
t: 
R 
the Summary button. display in a summary message box the number of 
clients and the total dollar value for aU services rendered. For NBXt Patron. 
confirm that the user "·ants to clear the totals for the current customer. 
4.3 Create a project to compute your checking accow1t balance. 
Form: Include radio buttons to indicate the type of transaction: deposit. 
check. or service charge. A text box Mill allow the user to enter the amount 
of the transaction. Display the new balance in a Read Only text box or a 
label. Calculate the balw•ce by adding deposits and subtracting service 
charges and checks. Include buttons for Calaiate. Clear. Print. ru1d Exit. 
4.4 Add validation to Programming Exercise 4.3. Display a message box if 
the new balance M·ould be a negative number. lf there is not enough 
money to cover a check. do not deduct the check amow1t. Instead. display 
a message box 11ith the message ''Insufficient Funds'' ru1d deduct a ser-
\ice charge of $10. 
4.5 Modify Programming Ext.>rcise 4.3 or 4.4 by adding a Summary button that 
Mill display the total number of deposits. the total dollar amoWlt of de-
posits. the number of checks. and the dollar amount of the checks. Do not 
include checks that were retumed for insufficient funds. but do include the 
service charges. Use a message box to display the summary infom1ation. 
4.6 (Select Case) Piecework workers ore paid by the piece. Workers who 
produce a greater quantity of output are oOen paid at a higher rate. 
Form: Use text boxes to obtain the person's name and the number of 
pieces completed. Include a Calculate button to display the dollBI amount 
earned. You will need a Summary button to display the total number of 
pieces. the total pay. and the average pay per person. A Clear button 
should clear the name and the number of pieces for the current employee 
Wld a Oear All button should cleUI the summary totals after confirming the 
operation with tJ1e user. 
include validation to check for missing data. If the user clicks on the 
Ca/ru/ale button M'ithoul first entering a name Wld the number of pieces. 
display a message box. Also. you need to make sure to not display a sum-
mary before any data 8IE' enlrred: you cannot calculate Wl average when 
no items have been calculated. You can check the nwnber of employees 
in the Summary event procedure or disable the Summary button until the 
first order has been calculated. 
J>e·ice P aMI lte•• f'iece for AU Pieces 
1-199 
.50 
200-399 
.55 
400-599 
.60 
600or more 
.65 
4.7 
Modify Programming Exercise 2.3 (the weather report) to treat radio but-
Ions the proper way. Do not change the image w1d message in W1 event 
procedure for each radio button: instead use Wl OK buuon to display the 
correct image and message. 
Note: For help in basing a new project on an existing project. see 
~copy Wid Move a Project- in Appendix C. 
203 

204 
S 
l r 
\ 
L 
11 
\ 
s 
C 
Decisiom and Conditions 
4.8 Modify Programming Exercise 2.2 (the flag viewer) to treat radio buttons 
and check boxes in the proper way. Lnclude a Display button and check 
the settings of the radio buttons and check boxes in the button's event 
procedure. rather than making the c hanges in event procedures for each 
radio button and check box. 
Note: For help in basing a new project on an existing project, see 
"Copy and Move a Project'" in Appendix C. 
4.9 Create an application to calculate sales for Catherine:S Catering. The pro-
gram must determine the amount due for an event ba~ed on the number of 
guests. the menu selected. and the bar options. Additionally, the program 
maintains summary figures for multiple events. 
Form: Use a text box to input the number of guests and radio buttons to 
allow a selection of Prime Rib. Chicken. or Pasta. Check boxes allow the 
user to select an Open Bar and/or Wine with Dinne r. Include buttons for 
Calculate. Qear. Summary. and Exit. Display the amount d ue for the event 
in a label or a ReadOnly text box. 
Rail>~ per Person 
Prime Rib 
25.95 
Chicl:en 
18.95 
Pasta 
12.95 
O~Jt<u Dar 
25.00 
Wine •·ith dinner 
8.00 
Sumrmuy: Display the number of events and the total dollar an1ount in a 
message box. Prompt the user to detem1ine if he or she would like to clear 
the summary information. lf the response is Yes. set the number of events 
and the total dollar amount to zero. Do not display the summary message 
box if there is no summary infom1ation. (Either disable the Summary but-
ton until a calculation has been made or test the total for a value.) 
VB ltlull Ord@r I 
Calculate the amount due for an order. For each order. 
the user should enter the following information into 
text boxes: customer name. address, city. state (two-
letter al>breviation). and ZIP code. An order may con-
sist of multiple items. For each item. the user will 
enter the product description. quantity. ~·e ight. and 
price into text boxes. 
You will need buttons for Add This Item. Update 
Summary. Qear. Print. and Exit. 
For the Add This Item button. validate the quantity. 
,.·eight. and price. Each must be present and numeric. 
F'or any bad data. display a message box. Calculate the 
charge for the current item and add the charge and 
,.·eight into the appropriate toLals. but do not display the 
summary until the user clicks the Update Summary but-
ton. Do not calculate shipping and handling on individ-
ual items: rather. calculate shipping and handling on 
the entire order. 

C
II
A 
1•1'" R 
·when the user clicks Add This Item for a new order. 
the customer infotmalion should be disabled so that 
the state crumot be changed until the next customer. 
'll'hen the Update Summary button is clicked. cal-
culate tl1e sales tax. shipping and handling. and the 
total amount due for the order. Sales tax is 8 percent of 
the total charge ru1d is charged only for shipments to a 
Califomia address. Do not charge sales tall on the 
shipping and handling charges. The shipping and han-
dling should be calculated only for a complete order. 
Optional: Disable the Add This Item button when 
the Summary button is pressed. 
The Clear button clears the data and totals for tl1e 
current customer. 
TI1e shipping and handling charges depend on the 
~t·eight of the products. Calculate the shipping charge 
as $.25 per pound and add that amount to the han-
d! ing charge (taken from the following table). 
Weight 
Les• thnn 10 pound• 
$1.00 
10 to 100 pound• 
$3.00 
Over 100 pound• 
$5.00 
Display the entire amount of tl1e bill in controls 
titled Dollar amount due. Sales tax. Shipping and han-
dling. and Total amount due. 
Teol Onto 
Deecri1>tiou 
Quantity 
Weight 
Planter 
2 
3 
~1ailbox 
2 
Planter 
2 
3 
T~ol Ontn Output for Taxohte 
(if .lripj>ed l o • Colifornio oddr-.,...,) 
Dollar A mount Due 
$104.75 
Sales Tax 
8.38 
Shipping and Handling 
6.50 
Total Amount Due 
$119.63 
Tesl Data Output for NonhL'\:Able 
(if ..!Iipt>e<l outside of Cnliforrna) 
Dollar Amount Due 
$104.75 
Sa].,. T•x 
0.00 
Shipping and li•ndling 
6.50 
Total Amount Due 
$111.25 
205 
P rice 
19.95 
24..95 
19.95 
VB Auto Cent•r I 
Create a project tl1at determines the total amount dut' 
for tl1e purchase of a vehicle. Include text boxes for 
the base price and tl1e trade-in allowance. Check 
boxes will indicate if the buyer wants additional ac-
cessories: stereo system. leather interior. and/or com-
puter navigation. A group box for the exterior finish 
will contain radio buttons for Standard. Pearlized. or 
Customized detailing. 
Have the trade-in amount default to zero; that is. 
if the user does not enter a trade-in amount. use zero 
in your calculation. Validate the values from the text 
boxes. displaying a mess8£e box if necessary. 
To calculate. add the price of selected accessories 
and exterior finish to the base price and display the 
result in a control called Subtotal. Calculate tl1e sales 
tax on the subtotal and display the result in a Total 
control. Then subtract any trade-in amount from the 
total and display the result in an Amount Due control. 
Lnclude buttons for Calculate. C/ear. and Exit. The 
Calculate bullon must display the total amount due af-
ter trade-in. 
Hint: Recall that you can make an ampersand ap-
pear in the Text property of a control by including two 
ampersands. See the tip on page 78 (Chapter 2). 
ltcru 
P ricc> 
Stereo System 
425.76 
Leather Interior 
987.4-1 
Computer Navigation 
1.741.23 
Standard 
No additional charge 
Pearliz.ed 
345.72 
Cu!!lomized Detailing 
599.99 
Tax furte 
8% 

206 
,. 
S 
L 
\ 
L 
8 
,\ 
s 
{' 
Decision.. and Comliri.o1as 
au VB Auto Center 
I= ® l..a;..i 
Accessone~ 
0 ~terea Systen 
CAr S.les Pr!oe: 
EJ Leather )nteror 
kcesscries&fWoh: 
S.btotol 
Soles Tl!X(B%): 
Elderor Frlilh 
Total: 
Trade.fl PJloYI'ance: 
Custonzed Q.etllilirt;l 
Amouflt Due. 
( !;olet.iate I( Qoar 
] [ 
Elgt 
VIdeo Bonanza 
Design and code a project to calculate the amount due 
for rentals. Movies may be in VHS (videotape) formal 
or DVD format. Videotapes rent for Sl.BO each and 
DVDs rent for $2.50. New releases are $3 for DVD 
and $2 for VHS. 
On the fonn include a text box to input the movie 
title and radio buttons to indicate whetl1er the movie is 
in DVD or VHS fonnat. Usc one check box to indicate 
whether tlle person is a member. members receive a 
10 percent discount. Another check box indicates a 
new release. 
Use buttons for Calculate, aear for Next Item. Order 
Complete. SUmmary, Print. and Exit. The Calculate button 
should display the item amount and add to the subtotal. 
Very Very Boards does a big business in shirts. espe-
cially for groups and teams. TI1ey need a project that 
will calculate the price for individual orders. as well 
as a summary for all orders. 
The store employee wW enter the orders in an 
order form tl1at has text boxes for customer name and 
The Clear for Next Item button clears the check box for 
new releases. the movie title, and the radio buttons: the 
member check box cannot be changed until the current 
order is complete. Include validation to check for miss-
ing data.lf the user clicks on the Calculate button )\ith-
oul first entering lhe movie title and selecting the 
movie fonnal. display a message box. 
For the Order Complete bullon. first confirm the 
operation with tlle user and clear the controls on the 
form for a new customer. 
The Summary button displays tlle number of cus-
tomers and the sum of the rental amounts in a message 
box. Make sure to add to the customer count and 
rental sum for each customer order. 
order number. To specify tlle shirts. use a text box for 
the quantity. radio buuons to select the size (small. 
medium. large. extra large. and XXL). and check 
boxes to specify a monogram and/or a pocket. Display 
tlle shirt price for the current order and the order total 
in Reacl0n1y text boxes or labels. 

C
II
A
I•
'rER 
-1 
Include buttons to add a shirt to an order, clear the 
current item. complete the order. and display the sum-
mary of all orders. Do not allow the summary to display 
if the current order is not complete. Also. disable the 
text boxes for customer name and order number after 
an order is started; enable them again when the user 
clicks on the button to begin a new order. Confim1 the 
operation before clearing the current order. 
When the user adds shirts to an order. validate the 
quantity. which must be greater than 7.ero. If the entry 
does not pass the validation. do not perform any cal-
culations but display a message box and allow the user 
to correct the value. Determine the price of the shirts 
from the radio buttons and check boxes for the mono-
gram and pockets. Multiply the quantity by the price 
to determine the extended price. and add to the order 
total and sunm1ary total. 
207 
Use constants for the shirt prices. 
Price.o foo· the Shirt• 
Small. medium. and large 
$10 
Extra large 
ll 
XXL 
12 
Monogram 
Add$2 
Add $1 
Display the order summary in a message box. Include 
the number of shirts. the number of orders. and the 
dollar total of the orders. 

This page intentionally left blank 

C 
H 
A 
P 
T 
E 
R 
Menus, Common Dialog 
Boxes, Sub Procedures, 
and Function Procedures 
I . Create menus and submenus for program control. 
2. Display and use the Windows common dialog boxes. 
3. Create context menus for controls and the form. 
4. Write reusable code in sub procedures and function procedures and 
call the procedures from other locations. 

210 
v 
S 
l l 
,\ 
I. 
C 
Menus, Common. Dialog Bou.s, Sub Procedures, 
Menus 
You have undoubtedly used menus quite extensively while working with the 
computer. Memts consist of n menu bnr that contains menus, cnch of which 
drops down to display a list of menu items. You can use menu items in place of 
or in addition to buttons to execute a procedure. Generally commercial appli-
cations use menus rather than buttons. 
Menu items are actually controls; they have properties and events. Each 
menu item has a Name property. a Te.xt property, and a Click event. similar to 
a button. When the user selects a menu item. witl1 either the mouse or the key-
board, the menu item's Click event procedtue executes. 
It is easy to create menus for a Windows form using the Visual Studio en-
vironment's Menu OesignN'. Your menus will look and behave like standard 
Windows menus. 
Defining 1\lenus 
To create menus for your application. you add a l\1euuSu·ip component to a 
form. The MenuStrip is a container to which you can add ToolStripMenultems. 
You also can add ToolStripComhoBoxes. Too!StripSeparalors. and Too!Strip-
TextBoxes, making the menus considerably more powerful thru1 those in 
versions of VB prior to VB 2005. 
The Visual Studio Menu Designer allows you to add menus ru1d menu items 
to your forms. You must add a MenuStrip component from the Menus & Too/bars 
tab of the toolbox (Figure 5.1), which appears in the component tray below the 
fonn. Once you have added the MenuStrip component, it is extremely easy to 
create U1e menu items for your menu. The words Type Here appear at the top of 
the form. so that you CaJl enter tlle text for your flrst menu (Figure 5.2). After 
you type the text for the first menu name ru1d press Enter. tl1e words Type Here 
appear both below tlle menu name and to the right of the menu name. You CaJl 
choose next to enter menu items for the first menu or to type the words for the 
second menu (Figure 5.3). Each time you type the text for a new menu. you are 
automatically adding a ToolStripMenultem to the MenuStrip's Items collection. 
Toolbox 
" All WiuJvvn Fvnn:. 
I> Common Control> 
0" Contlliners 
t> Componer.u 
p Printi~g 
f> Oiatogs 
I>_ WPF-fnteroper.,bility 
1> Reporting 
!> Visu.,l &sic Powe!Pacb-
1:$ General 
• ~ X 
and Function Procedure• 
F i g u re 5. 1 
Add a MenuStrip component to 
the fomt using the MenuStrip 
tool from the toolbox. 

C
II
A
I•
'I'
I'
R 
Note: If you click elsewhere on the form, you deactivate the Menu De-
signer. You can click on the menu at the top of tbe form or on the MenuStrip 
component to activate the Menu Designer again. 
Su ildMenus.v~ [Design]' X 
BuildMenus.vb (OesignJ• X 
r:J;t Budchng Menus 
~~ 
I&R~ -
10¥:::«• 
. 
I 'YP"H~ 
~ MenuStripl 
The Text l'l'operty 
When you type the words for a menu or menu item. you are entering the Text 
property for an item. The Text property holds the words that you want to appear 
on the screen (just like the Text property of a button or label). To conform to 
Windows standards. your first menu's Text property should be f ile, with a key-
board access key. Use the ampersand (&)in the text to specify the key to use 
for keyboard access, as you learned to do in Chapter 2. For example, for .Eile. 
the Text property should be &File. 
211 
The MenuStrip compone!!t 
appears in the component .tray 
belCJW the form and the Menu 
Designer allows you to begin 
typing the text for the memt 
items. 
After typing the text for the 
first menu. yor~ can add a 
second memt or add menu 
items below the menu name. 
Do not use the some access key on 
o top-level menu as you use on a 
form control. However, access keys 
on menu items a nd submenu:; do not 
conAict with menu or control access 
keys. • 

212 
v 
S 
l l 
,\ 
L 
( ' 
Muws, Common Dialog Bow, Sub Proctdu"~ 
You can enter and change the Text property for each of your menus and 
menu items using the Menu Designer. You also can change the Text property 
using the Properties window (Figure 5.4). Click on a menu or menu item to 
make its properties appear in the Properties window. 
Propenies. 
~
'/ X 
Fl eTooiStripMerudtetn System.V\ • 
~;ffilJfiiil > I _1 
ShortcutJ<eyO 
. 
ShortcutKey5 None 
ShO'NShortcu True 
~ St:ce 
31.20 
Tog 
II~$ 
& File 
TextAiign 
MiddleCEnter ~ 
T c:xiOirc:clion HOfi iont~l 
_l_Fxtlm,:tnf'.EELI.rn}lnef:lefo.r..e..l eL 
r.xt 
The tod to displcy on the item. 
The Name l'rope 11:y 
The Menu Designer is smart enough to give good names to the menu items. The 
File menu item that you add is automatically named FileToolStripMennltem. 
Since the new items are named so well, you won't have to change the Name 
property of any menu component. However. if you change the Text property of 
any menu item. the item is not automatically renamed: you'll have to rename it 
yourself in the Properties win~o*·· 
The MeuuStrip h ems Collection 
As you create new menus using the Menu Designer. each menu is added to 
the Items collection that belongs to the MenuStrip. You can display the 
ToolStlipMenuitems in the collection. set other properties of the items. as well 
as reorder. add. and delete items, using the Items Collection Editor (Figure 
5.5). To display the ltems Collection Editor, first select the MenuStrip (be 
sure you've selected the MenuStrip and not one of the Too!StJ·ipMenultems) 
and then use one of these three techniques: (1) in the Items property in the 
Properties window. click on the ellipses button: (2) right-click on the 
MenuStrip in the Menu Designer and select Edit /tams from the context menu; 
or (3) click on the MenuStrip's smart-tag atTow (at the right end of the strip) to 
display the sma1t tag and select Edit /tams. 
A Menu's OrO!lDo"llllems ColJectiou 
The MenuStlip's Items collection holds the top-level menus; each of the menus 
has its own collection of the menu items that appear in that menu. TI1e Tool-
StripMenuitems that appear below a menu name belong to the menu's Drop-
Downitems collection. Therefore. if the File menu contains menu items for Print. 
Save. and Exit, the menu's DropDownitems collection will contain three Tool-
StripMenultems. Notice the title bar in Figure 5.6, which shows the Drop-
Downltems collection for the File menu (FileToolStlipMenuitern). 
You can use the Items Collection Editor to rearrange or delete menu items. 
You also can accomplish the same tasks using the Menu Designer; just drag a 
menu item to a new location or light-click a menu item and select Delete. 
ami Functirm Procedures 
Modify the Text property of a 
menzt item in the Properties 
winduw or the Menu. Designer. 

C
ll
1\l1
'l'
li
R 
213 
Fig•••·e 5.5 
Use the Menu$trip's Items Collect.ion Editor to display and modify properties of the menus. Yon also can add new menzts to 
the collection or modify the order of the memts. 
Iterm Col!ection Editor 
Select item and add to list be!C~~N: 
~ Menultem 
Memba-s: 
Menu':>tnpl , , 
FileT ooiStripMenultem 
~ ._l _
Ad_d_...J 
MenuStripl 
True 
Conte:ctMenuStrip (none} 
£Mblcd 
True 
lmeMode 
NoControl 
MdiWindoMi~ten (none) 
Showltem 1 ool1ip~ 
F.:~ lse 
Toblndex 
0 
T abStop 
False 
Visibte 
True 
A Data 
~ (Applic~tionSetting. 
fOati!Bindings) 
Tag 
.. Do.ign 
(Name) 
MenU:Stripl 
GenerateMembet 
True 
OK 
Jl 
Concel 
Fig••••e 5.6 
The Items Collection Editor for the DropDownftems collection. a property of the File menu's ToolStripMenultem, 
Jtems Collectton Editor (AielcdStripMenultem.OrqlDownttems) 
Select ~em and add to hst below: 
§I Menultem 
Members: 
lliJ 
~ PrintlooiStripMenuftem 
~ Slvc T oot9:ript..lcnuften1 
~ ExitlooiStlipMellultem 
OK 
JJ 
Cancel 

214 
s 
C 
Menus, Comnwn Dialog 8o.vtJ. Sub Proc<duro~ 
Submenus 
The drop-down list of items below a menu name is called a menu item. When 
an item on the menu has another List of items that pops up. the new list is called 
a sttbmenn. A filled triangle to the right of the item indicates that a menu item 
has a submenu (Figure 5.7). You create a submenu in the Menu Designer by 
moving to the right of a menu item and typing the next items text (Figure 5.8). 
>} Buoldng l.lo<>oo 
f.il• 
Edt I 
:.tyte 
SetJ~u·atoJ · Bat·s 
~(AI 
:::::::J.. -r---..._----, 
font.. 
I 
@C# 
I 
I 
-
- ,pc-1-kre 
When you have many items in a menu. you should group the items according to 
their purpose. You can create a scpm·ato•· bm· in a menu. which draws a bar 
across the entire menu. 
To crt:ult: 1.1 St:(JUrl.llur uur. uJJ 1.1 lit: .. lllt:llll iltolll u!IJ click UJI its Jrup-Juwu 
arrow (Figure 5.9). Drop down the list and select Separator (Figure 5.10). 
OdiN' Featm·c.s of TouiStriJ• Cunu·ols 
You also can select Combo Box and Text Box for the type of menu item from the 
drop-down list. Using these features you can create very powerful and profes-
sional menus and toolbars. 
Another nice feature of the Menu trip component is that you can add a 
menu to other components on the form. For example. you could add a menu to 
a group box if it was appropriate. 
u.nd F1111t'i.on PrU<Wdure• 
Fi • ur .-
5 . 7 
Afilkd triangle on a m~nu 
iU!m indicates that a submenu 
will appear. 
Create a •«bmenu by typing to 
the right of the parent menu 
item. 

C
II
,\I>
'I'
I'
R 
abJ Building Menus 
Gj?£J~I 
~;;;!;dit UY~-tm I 
e.unt 
£ave 
i 
-VP< He<< I.J 
I Type T ~forT 
ooiStlipr-..lenultem 
a~ Build ing ~IE:nu'! 
~[§JQ;U 
li]!U Edit I T~eHe~e ] 
Erint 
~ave 
I -vr::e I ltrc: I 
"'§' MenuJtem 
~ 
ComboBox 
Seporotor (J 
l e:<tBox 
Note: The underscores for keyboard shortcuts may display or not. depend-
ing on a Windows setting. See the note at the bottom of Page 78 for instructions 
for turning on the display. 
C1·eating a Menu-Step-by-Step 
You are going to create a project with one form and a menu bar that contains 
these menu items: 
f ile 
EKit 
Jielp 
About 
C1·Nue the .Menu Items 
STEP 1: Begin a new Windows Forms project (or open an existing one to which 
you want to add a menu). 
STEP 2: Add a MenuStrip component to the form. You can double-click or drag 
the tool to the form; the component will appear in the component tray 
at the bottom of the form (Figure 5.11). 
STEI' 3: With the words Type Here selected. type "&File" over the words. 
STEP 'b: Move down to the Type Here words below the File menu and type 
"E&xit". 
215 
Firtur e 
;'L9 
To create a menu item 
separator bar. click on the 
drop-dawn arraw for an item. 
Figttr e 5.10 
Select Separator from the 
drop-down li~t. 

216 
v 
S 
l l 
:\ 
L 
G 
,\ 
S 
(' 
Menus, Common Dialog Boxe$, Sub Procedures, 
Bui ldM~nus.vb [O esignl' )( 
STEP 5: Move up and to the right and add the Help menu ("&Help"). 
STEP 6 : Below the Help menu. add the About menu item ("&About"). 
Co<1ing fm· 1\l enu h ems 
After you create your form's menu bar. it appears on the form in design time. 
Double-click any menu item and the Editor window opens in the item's Click 
event procedure where you can write the code. For example. in design time. 
open your form's File menu and double-click on Exit. The Editor window will 
open with the ExitToolStripMenuJtem_Click procedure displayed. 
Wl'ilc the Code 
STEP 1: Code the procedure for the Exit by pulling down the menu and double-
clicking on the word Exit. Type a remark and a Me. Close () statement. 
STEP 2: Open the AboutToolSnipMenultem_Click event procedure. Use a 
MessageBox. Show statement to display the About box. The message 
string should say "Programmer:" followed by your name (Figure 5.12). 
STEP 3: Run the program and test your menu items. 
Aboot My l>roje.:t 
Programmer. Your Name 
[ 
OK 
and FunctUm Procedure• 
Figure 5.11 
Add a MenuStrip component to 
tlu~ form. lt will appear in the 
component tra.y at the bottom 
ofthefonn. 
Figure 5.12 
Display a message box for an 
About box. 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
Tht' Eunbled l)r·opt'r·ty 
By default. all new menu items have their .Enabled pr·o]Jtll'ty set to True. An 
enabled menu item appears in black text and is available for selection, whereas 
the grayed out or <Jjsnbled (Enabled = False) items are not available (Figure 
5.13). You can set the Enabled property at design time or run time. in code. 
InstructionsToo1StripMenuitem.Enabled = False 
a] Menus 
=IIID~ 
f ile 
iclit 
QisployJ Help 
8 £u'rifmary I 
Ju~tructiom 
Tbt' Cbt'cked Pr·operty 
A menu item may contain a check mark beside it (indicating that the item is 
checked). Usually a check mark next to a menu item indicates that the option 
is curr-ently selected (refer to Figure 5.13). By default, the 01ecked pr·oper·ty 
is set to False: you can change it at design time or in code. 
summaryToolStripMenultem.Checked = True 
Toggling Check Mnrks Ou ami Off 
If you create a menu item that can be turned on and off. you should include a 
check mark to indicate its curr-ent state. Set the initial state of the Checked 
property in the Properties window (Figure 5.14). 
Properties 
-~x 
SumlnaryTooiStrlpMe:oultem S)'~ • 
Baclcgroonctlr lile 
P:t!$MTruc 
EJ 
CheckOnCiicl F~se 
bl 
CheckS-tate 
Checked 
EJ 
Di~piDYStyle Image.AndTo:t 
Doub!eC!ickf Fatse 
DropOown 
(none) 
DropD<rnnlto (Cvl<di<>n) 
Enabled 
1rue 
Do Font 
Checked 
lndSc.otes whether the component is 
in the checked state. 
Set the Checked 
property 
Set the Enabled 
property 
217 
F i g u re 5.13 
Menu items can be disabled 
(grayed) or checked. A check 
mark usually indicates that the 
item is currently selected. 
You can set the Enabled and 
Checked properties of a. menu 
item in the Properti.es window. 

218 
l ' 
C 
Menus, Common Dialog Boxes, Sub Proctdures, 
To change a menu item's state in code, set its Checked property to True or 
False. For example. for a menu item that displays or hides a summary. called 
SummaryTooiStripMenultem. a check mark indicates that the summary is cur-
rently selected. Choosing the menu item a second time should remove the 
check mark and hide the summary. 
and Function Procedures 
Private Sub SummaryToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles summaryToolStripMenultem.Click 
' Hide or display the summary. 
If summaryToolStripMenuitem.Checked Then 
' Hide the summary information . 
SummaryToolStripMenultem.Checked = False 
Else 
' Show the summary information . 
SummaryToolStripMenultem.Checked 
True 
End If 
End Sub 
Setting Keybo:ll'd Shortcuts 
Many computer users prefer to use keyboard shortcuts for selecting menu 
items. For example. most applications from Microsoft use Ctrl + P for the Print 
menu item and Ctrl + S for Save. You can create keyboard shortcuts for your 
menu items and choose whether or not to display the shortcuts on the menu. 
(For example. you can exit most Windows applications using Alt + F4. but the 
keyboard shortcut rarely appears on the menu.) 
To set a keyboard shortcut for a menu item. first select the menu item in the 
designer. Then in the Properties window. select the ShortcutKeys property. 
Drop down the Jist to see the available choices and make your selection. You 
can use many combinations offunction keys, the Alt key. the Shift key. and the 
Ctrl key. By default. the ShowShortcutKeys property is set to True: you can 
change it to False if you don't want the shortcut to show up on the menu. 
Stamla•·<ls fo1· Windows l\ie nus 
When you write applications that run under Windows. your programs should 
follow the Windows standards. You should always include keyboard access 
keys; if you include keyboard shortcuts. such as Ctrl + key. stick with the stan-
dard keys, such as Ctrl + P for printing. Also follow the Windows standards for 
placing the File menu on the left end of the menu bar and ending the menu with 
an Exit command. If you have a Help menu. it belongs at the right end of the 
menu bar. 
Any menu item that will display a dialog box asking for more information 
from the user should have" ... " appended to its Text property. Following Win-
dows standards. the" ... " indicates that a dialog box with further choices will 
appear if the user selects the menu item. You do not use the " ... " for menu 
items that display dialog boxes that are informational only. such as an About 
box or a Summary form. 
Plan your menus so that they look like other Windows programs. Your users 
will thank you. 
l~ljjl#l 
You con toggl.e a Boolean value on 
and off using the Not operator: 
SummaryToolS.tripMenuitem. 
Checked = Not SummaryTool-
StripMenuit em. Checked. • 

C 
II 
A 
1• 
'I' 
" 
ll 
Common Dialog Boxes 
You can use a set of predefined standard dialog boxes in your projects for such 
tasks as specifying colors and fonts. printing. opening. and saving. Use the 
common dialog components in the Dialogs tab of the toolbox to display the di-
alog boxes that are provided as part of the Windows environment. The common 
dialog components provided with Visual Studio are ColorDialog. Folder-
BrowserDialog. Font Dialog. OpenFileDialog. and SaveFileDialog (Figure 5.15). 
To use a common dialog component. add the component to the form, plac-
ing it in the component tray. You can keep the default names for the compo-
nents. such as ColorDialogl and FontDialogl. since you will have only one 
component of each type. 
Toolbox 
• fl. X 
~ All Windows Forms 
t> Common C,ontrols 
~ Containers 
~ M~us & Toolbars 
~ Data 
~ Components 
~ Printin9 
A Dialogs 
~ 
Pointer 
~ ColorOialog 
SJ 
FolderBrow.erDialog 
l:i3 
FontOialog 
r!J 
OpenriieDialog 
~ Savd'ileDialog 
~ WPF Jnteroperabofrty 
~ Reporting 
~ Vis-uol Basic Pow~Pecks 
~ Genera l 
Dislllaying a Windows Common Dialog Box 
After you place a conunon dialog component on your fo1m. you can display the 
dialog box at run time using the ShowOialog met bod. 
Show Dialog .Me thod-General Form 
~~I 
8 t DialogObject.ShowDialog() 
Tite DialogObject is the name of the common dialog component that you 
placed on the fonn. The name will be the default name. such as ColorDialogl 
or FontDialogl. 
Show Dialog .Method-Examples 
219 
The common dialog tools in 
the Dialogs tab of the toolbox. 
~ .----------------------------------------------------------------. 
"' "' e 
'1:1 r 
ColorDialog1 .ShowDialog() 
FontDialog1.ShowDialog() 
~-----------------------------------

220 
l ' 
C 
Menus, Common Dialog Boxes, Sub Proctdures, 
Place the code to show the dialog in the event procedure for a menu item or 
button. 
Modal vet·sus l\Jodelcss Windows 
You probably have noticed that when you display a Windows dialog box. it re-
mains on top w1til you respond. But in many applications. you can display ad-
ditional windows and switch back and forth between the windows. A dialog box 
is said to be modal. which means that it stays on top of the application and 
must be responded to. You use the ShowDialog method to display a dialog box. 
which is just a window displayed modally. In Chapter 6 you will leam to display 
additional windows that are modeless. which do not demand that you respond. 
You will use the Show method to display a modeless window. 
Using the Infonnation f1·om the Dialog Box 
Displaying the Color dialog box (Figure 5.16) doesn't make the color of any-
tiling change. You must take care of that in your program code. When the user 
clicks on OK, the selected color is stored in a property that you can access. You 
can assign the value to the properties of controls in your project. 
Color 
Rasic colors: rr•r• 
• ro c• • 
•••••••• 
•••••••• 
•••••••• 
llll•••• o • r 
(;ustom C(IIO<S: 
rrrrrrrr 
rrrrrrrr 
I 
Qeflne Custom Colors » 
I 
OK I I Canoe! 
Using the Colot· Oialog Box 
The color selected by tl1e user is stored in tile Color propetty. You can assign 
this property to another object. such as a control. 
TitleLabel.BackColor = ColorDialog1 .Color 
Because Basic executes the statements in sequence, you would first dis-
play the dialog box with the ShowDialog method. (Execution then halts w1til 
the user responds to the dialog box.) Then you can use the Color property: 
and Functilm Procedure• 
Fi g n••e 5. 16 
The Color common dialog box. 

C 
II 
A 
1• 
'I' 
" 
ll 
221 
Public Sub ColorToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ColorToolStripMenuitem.Click 
' Change the color of the total labels. 
With ColorDialog1 
.ShowDialog() 
SubTotalLabel.F~reColor = .Color 
TaxLabel.ForeColor = .Color 
TotalLabel.ForeColor = .Color 
End With 
End Sub 
Using tbe Font Dialog Box 
\Vhen you display the Font common dialog box (Figure 5.17), the available 
fonts for the system display. After the user makes a selection. you can use the 
Font property of the dialog box object. You may want to assign the Font prop-
erty to the Font property of other objects on your fonn. 
~t 
~ 
fort: 
Fcn1 stYle: 
Size· 
~~~~--.. ... 
fR.;Jula' 
!.....-- 00 
. mJ!II:J-• P-A~ 
~ 
Oblique 
10 13 
)lodemXo.<!O 
D Bokt 
11 
!Mono!J'f"'Cimiw 
Bold ObliqU< 
12 
14 
MSOutlook 
~ 
y 
JL....:. 
Bfeas 
Samole 
IEJS011<eou 
AaEbYyZz 
iE] Lhde~ne 
Script: 
Vies: em 
~ 
Fi g u.re 5. 17 
The Font common dialog box. 
The fonts that display are 
those installed on the users 
system. 
Public Sub FontToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles FontToolStripMenuitem.Click 
' Change the font name for the labels. 
With FontDialog1 
. ShowDialog () 
SubTotalLabel.Font = .Font 
TaxLabel.Font = .Font 
Totallabel.Font = .Font 
End With 
End Sub 
·when the user clicks on the Font menu item. the Font dialog box appears 
on the screen. Execution halts w1til the user responds to the dialog box. either 
by clicking OK or Cancel. 

222 
l ' 
C 
Menus, Common Dialog Boxes, Sub Proctclures, 
Setting Initial Values 
Wlten a common dialog box for colors or fonts appears. what color or font do you 
want to display? It's best to assign initial values before showing the dialog box. 
rather than allow the default initial values to display. Before executing the 
ShoWOialog method. you should a~sign the existing values of the object's prop-
erties that will be altered. This step makes the current values selected when the 
dialog box appears. Tt also means that if the user selects the Cancel button. the 
property settings for the objects will remain unchanged. 
FontDialog1.Font = SubTotallabel .Font 
or 
ColorDialog1.Color 
Me .BackColor 
Creating Context Menus 
You also can add context mcuus to your applications. Context menus are the 
slwt'tcut utcuus that pop up when you right-click. Generally. the items in a 
context menu are specific to the component to which you are pointing, reflect-
ing the options available for that component or that situation. 
Creating a context menu is similar to creating a menu. You add a 
Context.\lenuSu·ip component. which appears in the component tray below the 
fonn. At the top of the form. in the Menu Designer, the words say Conle:ttMenuStrip 
(Figure 5.18). A context menu does not have a top-level menu. only the menu 
items. Click on the words Type Here to type the text of your first menu item. 
Your application can have more than one context menu. You assign the 
context menu to the form or control by setting its ContextMenuStrip property. 
For example. a fonn has a ContextMenuStrip property. a button has a 
ContextMenuStrip property. and all visible controls have ContextMenuStrip 
and Function Procedures 
Figure 5.18 
Add a ContextMenuStrip component to the component tray and create the context menu using the Menn Designer. 
ContexlMenuStrip 
Toolbox 
• '1- X 
SuildConte><!Menu•.vb IOes•gnl' X 
t> All Windcwt Forms 
t1 Comm:-~ ~ont:tol.s 
Pointer 
Conte<tMenuStrip 
Menu Strip 
StatusStrip 
TooiSUip 
f> Dialog:: 
t> WPF lnte1opercbtlity 
t> Reporting 
~ Visuol&·sic PowcrPod:::; 
1> GenEr.;l 
(Type Te).tfor TooiStripMenultem ~ 
. UI 
.~~.~~~!7.1.~~.~~:~~~ ... l 

C 
II 
A 
1• 
'I' 
" 
ll 
properties. You can assign the same ContextMenuStrip to the form and each of 
the controls, or a different context menu to each.lf you have only one context 
menu, attach it to the form- it will pop up if the user right-clicks anywhere on 
the fonn, including on a control. However. some controls have an "automatic" 
context menu. For example. a text box has an automatic context menu that al-
lows the user to cut. copy. and paste text. If you set the ContextMenuStrip prop-
erty of a text box to yow· own context menu, your context menu will appear 
instead of the original (automatic) context menu. 
Ct·ealing a Context Menu-Ste p-by-Ste p 
You are going to create a context menu that contains these menu items: 
Qolor .. . 
f ont . . . 
~it 
Add tbe Contextl\leuuStrip to a Form 
STEP 1: Begin a new Windows project (or open an existing one to which you 
want to add a context menu). For a new project, name the form 
ContextMenuForm. 
STEt> 2: Add a ContextMenuStrip component from the Menus & Too/bars tab of 
the toolbox; the component will appear in the component tray at the 
bottom of the form (refer to Figure 5.18). 
STEP 3: Click on the words ContextMenuStrip in the Menu Designer to make a 
Type Here menu item appear. 
STEP 4·: Click on the words Type Here and type the text for the first menu item: 
"&Color ... ". 
STEP 5 : Type the text for the second and third menu items: "&Font..." and 
"E&xit". 
STEP 6 : Add a label named MessageLabel to your fonn and set the Text prop-
ei1y to "Right-click for the Context Menu" . 
STEI' 7 : Set the fonn's ContextMenuStrip prope11y to ContextMenuStripl. No-
tice that the property box has a drop-down list. lf you have more than 
one context menu defined. you can choose from the list. 
STEP 8: Add a Color Dialog component from the Dialogs tab of the toolbox. 
STEI' 9: Add a Font Dialog component. 
fn this example. right-clicking anywhere on the fonn allows you to change the 
foreground color or the font of the fonn. As you know, if you haven't set those prop-
Cities for individual controls. the form's properties apply to all controls on the form. 
STEP 10: Code the form as follows: 
'Program: 
'Programmer: 
'Date: 
'Description : 
Ch05ContextMenus 
Your Name 
Today•s Date 
Create and apply a context menu. 
Public Class contextMenuForm 
223 
It's a good ideo to set a Con-
textMenu property for all controls 
and for the form to allow users the 
option of using context menus. • 
Private Sub ColorToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ColorToolStripMenultem.Click 
' Change the form's ForeColor. 
' Applies to all controls on the form that haven't had their 
ForeColor explicitly modified. 

224 
l ' 
C 
Menus, Common Dialog Boxes, Sub Proctdures, 
With ColorOialog1 
' Initialize the dialog box . 
. Color = Me .ForeColor 
. ShowDialog () 
' Assign the new color. 
Me.ForeColor = .Color 
End With 
End Sub 
Private Sub FontToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles FontToolStripMenuitem.Click 
' Change the label's font . 
With FontDialog1 
' Initialize the dialog box . 
. Font = Messagelabel. Font 
.ShowOialog() 
' Assign the new font. 
Messagelabel .Font - . Font 
End With 
End Sub 
Private Sub ExitToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As system.EvantArgs) Handles ExitToolStripMenuitem.Click 
' Terminate the project. 
Me.Close() 
End Sub 
End Class 
1~st the Progn m1 
STEP 1: Experiment with right-clicking on the fonn and on the label. Test each 
of the options. 
After you have the program working. experiment with adding more con-
trols, adding more ContextMenuStrip components, and setting the Con-
tex1MenuStrip prope1ty of controls. 
Shat·ing Procedures 
Most frequently a context menu is added as an additional way to access a fea-
ture that is also availa!Jle from another menu or a button. Recall from Chapter 4 
that you can use one procedure to handle several events by adding to the Han-
dles clause. 
Private Sub FontToolStripMenuitem_Click (ByVal sender As System.Object, 
ByVal e As System.EventArgs) _ 
Handles FontToolStripMenuitem.Click, FontButton.Cl ick 
' Change the label's font. 
With FontDialog1 
' Initialize the dialog box . 
. Font = Messagelabel .Font 
.SilOWOialog() 
' Assign the new font. 
Messagelabel.Font = .Font 
End With 
End Sub 
and Function Procedures 

C
II
,\I>
'I'
I'
R 
Writing General Procedures 
Often you will encounter programming situations in which multiple procedures 
perfonn the same operation. This condition can occur when the user can select 
either a button or a menu item to do the same thing. Rather than retyping the 
code. you can write reusable code in a geuet•al proeedm·e and call it from 
both event procedures. 
General procedures are also useful in breaking down large sections of code 
into smaller units that pertonn a specific task. By breaking down your calcula-
tions into smaller tasks. you simplify any maintenance that needs to be done in 
a program in the future. For example. bowling statistics for a league may re-
quire calculations for handicap and series total. If the fonnula for calculating 
handicaps changes. wouldn't it be nice to have a procedure that calculates 
handicaps only instead of one that performs all the calculations? 
You can choose from two types of general procedures: sub pro cedm·es 
and flmctiou procedm·es: 
• 
A sub procedure performs actions. 
• 
A function procedure performs actions and retums a value (the t•etm·n 
value). 
You willlikP.Iy n~P. a !>.llh pmr.P.rlnrP. if yon nP.P.rl to ;;P.t propP.rty val uP.;; for a 
series of objects. However. if you need to calculate a result. then a function pro-
cedure is the appropriate choice. Both sub procedures and function procedures 
are cons idered the me thods of object-oriented programming. 
C1·eating a New Sub Pl'ocedul'e 
You can create a sub procedure in the Editor window by enclosing the desired 
lines of code within a set of Sub and End Sub statements. 
Sub . .. Ell(\ Suh Stat~mcuts--Geuera l Form 
Private Sub ProcedureName() 
Statements in the procedure. 
End Sub 
When you type the line 
Private Sub ProcedureName 
and press Enter, the editor automatically adds the parentheses to the Sub state-
ment, adds the End Sub statement, and places the insertion point on the line 
between the two new lines. 
Sub ... End Suh Stat~uwuts-Exmuple 
225 
~ P-------------------------------------------------------------.. 
"' e 
~ 
iS" 
Private Sub SelectColor() 
' Display the color dialog box. 
ColorDialog1 .ShowDialog() 
End Sub 

226 
v 
S 
l l 
,\ 
I. 
C 
Menus, Common Dialog Boxe$, Sub Procedures, 
Note that VB has choices other than Private for the access. such as Public. 
Friend. and Protected. In a later chapter. you willleam about the other types 
of access specifiers: for now use Private for all general procedures. 
The coding for the new procedure is similar to the other procedures we 
have been coding hut is not yet attached to any event. Therefore. this code can-
not he executed unless we specifically call the procedure from another proce-
dure. To call a sub procedure. just give the procedure name, which in this case 
is SelectColor. 
Private Sub ChangeMessageButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ChangeMessageButton .Click 
' Change the color of the message. 
SelectColor() 
MessageLabel. ForeColor = ColorDialog1 .Color 
En<! SUI> 
Private Sub ChangeTitleButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ChangeTitleButton . Click 
' Change the color of the title. 
SelectColor() 
Titlelabel.ForeColor 
ColorDialog1 .Color 
End Sub 
P assing A•·g tuncnts to P1·ocedures 
At times you may need to use the value of a variable in one procedure and then 
ll£ain in a second procedure that is called from the first. In this situation. you 
could declare the variable as module level. but that approach makes the vari-
able visible to all other procedures. To keep the scope of a variable as nan-ow 
as possible. consider declaring the variable as local and passing it to any called 
procedures. 
A;; au example. we will exp<mtltlte capauillti..-; uf lite previous SelecLCulur 
sub procedure to display the original color when the dialog box appears. Be-
cause the Select Color procedure can he called from various locations. the orig-
inal color must be passed to the procedure. 
Private Sub SelectColor(IncomingCol or As Col or) 
' Allow the user to select a color. 
With ColorDialog1 
' Set the initial color . 
. Color = IncomingColor 
. ShowDialog () 
End With 
End Sub 
Private Sub ChangeMessageButton_Click(ByVal sender As System.Object, 
ByVal e As System. EventArgs) Handles ChangeMessageButton .Click 
' Change the color of the message. 
Dim OriginalColor As Color 
OriginalColor = MessageLabel. ForeColor 
Sel ectCol or(Origi na l Col orJ 
MessageLabel . ForeColor = ColorDialog1 .Color 
End Sub 
and Fwu:tilm Procedure• 

C 
II 
A 
1• 
'I' 
" 
ll 
Private Sub ChangeTitleButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ChangeTitleButton .Click 
' Change the color of the title. 
Dim OriginalColor As Color 
OriginalColor = Titlelabel.ForeColor 
Se l ectCol or(Origina l Col or) 
Titlelabel.ForeColor = ColorDialog1.Color 
End Sub 
Notice that in this example the Select Color procedme now has a parameter 
inside the parentheses. This syntax specifies that when called. an argument 
must he supplied. 
When a sub procedure definition names a parameter. any call to that proce-
dme must supply a value. called an argument. In addition, the data type of the 
parameter and supplied argument must be the same. Notice that in the two call-
ing procedures (ChangeMessageButton_Click and ChangeTitleButton_ Click), 
the vaJiable Original Color is declared as a Color data type. 
Another important point is that the names of the parameter and of the sup-
plied argument do not have to be the saJne. The SelectColor sub procedure '~ill 
take whatever Color value it is passed and refer to it as IncomingColor inside 
the procedure. 
You may specify multiple paJ'llmeters in the sub procedme header and sup-
ply multiple arguments in the call to the procedure. The numher of arguments, 
their sequence, and their data types must match the parameter list. You will see 
some examples of multiple parameters in the sections that follow. 
l•assiug Argmuems ByVal ot· ByRef 
When you pass an argument to a procedure. you may pass it ByVal or ByRef 
(for by value or by reference). ByVal sends a copy of the argument's value to the 
procedure so that the procedure cannot alter the original value. ByRef sends a 
reference indicating where the value is stored in memory. allowing the called 
procedure to actually change the argument's original value. You can specify 
how you want to pass the argument by using the ByVal or By Ref keyword be-
fore the panuneter in the procedure header. If you don't specify ByVal or 
ByRef. arguments are passed by value. 
Although passing an argument By Ref is more efficient, especially for pass-
ing a large object. it is much safer to pass By Val. 
' Argument passed by reference. 
Private Sub SelectColor(ByRef IncomingColor As Color) 
' Argument passed by value . 
Private Sub SelectColor(ByVal IncomingColor As Color) 
· Argument passed by value (the default) . 
Private Sub SelectColor(IncomingColor As Color) 
Ws·iling Function Ps·ocedm·es 
As a programmer. you may need to calculate a value that will be needed in sev-
eral different procedw·es or programs. You can write your 01111 function that ,~;n 
calculate a value and call the function from the locations where it is needed. As 
an example. we nill create a function procedme called Commission that cal-
culates and returns a salesperson's commission. 
227 

228 
l ' 
C 
Menus, Common Dialog Boxes, Sub Proctdures, 
Typing in a block of code using the Function . . . End Function state-
ments creates a function procedure. Since the procedure returns a value. you 
must specify a data type for the value. 
Fmwtion ... Rntl Fmwtion Stlll<'lllNlts-Ct>nPt'nl Fm·m 
and Function Procedures 
~~~.--------------------------------------------------------------------. 
~ ~ 
Private Function ProcedureName() As Datatype 
8~ 
~ End Function 
Functions also can be declared as Public, Protected. or Friend, which you 
willleam about later. Private is appropriate for all functions for now. 
Function ... Eud Function Stalemellls-Example 
~.-----------------------------------------------------------.. 
~ 
Private Function Commission() As Decimal 
~ 
' Statements in function. 
~ End Function 
Notice that this procedure looks just like a sub procedure except that the word 
Function replaces the word Sub on both the first line and the last line. The 
procedure header also includes a data type. which is the type of the value re-
turned by the function. 
Remember that functions also have parameters. You supply arguments for 
the function parameters when you call the function by placing a value or values 
inside the parentheses. Arguments are passed ByVal or By Ref. 
When you write a function. you declare the parameter(s) that the function 
needs. You give each parameter an identifier and a data type. The name that you 
give a parameter in the function procedure header is the identifier that you will 
use inside the function to refer to the value passed as an argument (Figure 5.19). 
A procedure header for a function procedure. 
Fig n••e !L1 9 
Access modifier 
Function name 
Parameter 
Parameter data type 
Return data type 
1 
1 
~ 
~ 
l 
Private Function Commission(ByVal SalesAmountDecimal As Decimal) As Decimal 
Examples 
Private Function Commission(ByVal SalesAmountDecimal As Decimal) As Decimal 
Private Function Payment(RateDecimal As Decimal, TimeDecimal As Decimal, 
AmountDecimal As Decimal) As Decimal 
In the function procedure, the parameter list you enter establishes the 
number of parameters, their type, and their sequence. When using multiple pa-
rameters. the sequence of the supplied arguments is critical. just as when you 
use the predefined Visual Basic functions. 
Retul'niug the Result o[ a Function 
The main difference between coding a function procedure and coding a sub 
procedure is that in a fw1ction procedure you must set up the retum value. This 
retum value is placed in a variable that Visual Basic names with the same 

C
II
,\I>'I'
I'
R 
name as the function name. In the example in Figure 5.19. the variable name 
is Commission. 
You can choose from two techniques for returning the result of the function: 
• 
Somewhere inside the Commission function, set the function name to a 
value. Example: Commission = 0.15D • SalesAmountDecimal 
• 
Use the Return statement. If you use the Return statement, you do not use 
the function's name as a variable name. 
Example: Return 0 . 15D • SalesAmountDecimal 
Writing a Conuuission Function 
Here is the Commission function procedure coded using the first technique for 
returning a value. 
Private Function Commission(ByVal SalesAmountDecimal As Decimal) As Decimal 
' Calculate the sales commission. 
If SalesAmountDecimal < 1000D Then 
Commiss.ion = OD 
Elself SalesAmountDecimal <= 2000D Then 
Commission 
0.150 * SalesAmountOecimal 
Else 
Commission 
End If 
End Function 
0.2D • SalesAmountDecimal 
And here is the same Commission function procedme using the Return 
statement. 
Private Function Commission(ByVal SalesAmountDecimal As Decimal) As Decimal 
' Calculate the sales commission. 
If SalesAmountOecimal < 1000D Then 
Return oo 
Elself SalesAmountDecimal <= 2000D Then 
Return 0.15D * SalesAmountDecimal 
Else 
Return 0.2D • SalesAmountDecimal 
End If 
End Function 
Ca!Jing tht' Commission function 
In another procedure in the form. you can call your fm1ction by using it in an 
expression. 
Private Sub CalculateButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles CalculateButton.Click 
' Calculate the commission. 
Dim Salesoecimal As Decimal 
Salesoecimal = Decimal.Parse(SalesTextBox.Text) 
Commission label. Text = Commi ssi on(Sa 1 esDeci mal ). ToStri ng ( "C") 
End With 
End Sub 
229 

230 
l ' 
C 
Menus, Common Dialog Boxes, Sub Proctdures, 
Notice in the preceding example that the argument passed in the function 
call does not have the same name as the parameter specified in the function 
definition. When the function is called. a copy of the value of Sales Decimal is 
passed to the function and is assigned to the named parameter. in this case 
SalesAmow1tOecimal. As the calculations are done (inside the function). for 
every reference to SalesAmountDecimal, the value that was passed in for Sales-
Decimal is actually used. 
You can combine the functions. if you wish: 
Commissionlabel .Text = 
Commission (Decimal. Parse (SalesTextBox. Text)). ToString( "C") 
To read this statement, begin with the inner parentheses: SalesTextBox.Text 
is passed to Decimal . Parse for conversion to Decimal: the result of that con-
version is passed as an argument to the Commission function; the value Te-
tumed by the COmmission function is formatted as it is converted to a string and 
then assigned to CommissionLabel.Text. 
CouH rLing SclectColor to a Function J>roc<>dure 
TI1e SelectColor procedure that we wrote earlier is a good candidate for a func· 
lion procedure. since we need to retum one value: the color. 
Private Function SelectColor(ByVal IncomingColor As Color) As Co l or 
' Allow the user to select a color. 
With ColorDialog1 
' Set the initial color . 
. Color = IncomingColor 
.ShowDialog() 
Return .Color 
End With 
End Function 
Private Sub ChangeMessageButton_Click(ByVal sender As System. Object, 
ByVal e As System. EventArgs) Handles ChangeMessageButton .Click 
· call the new selectColor function (With a single line of coae) . 
Messagelabel . ForeCol or = SelectColor(Messagel abel.ForeCo l or) 
End Sub 
Functions witb l\iuh.iple Panune le rs 
A function can have multiple parameters. TI1e sequence and data type of the 
arguments in the call must exactly match the parameters in the function proce-
dure header. 
·w•·iting a Function witb Multiple Parameters 
When you create a function with multiple parameters such as a Payment func-
tion, you enclose the list of parameters in the parentheses. The following ex-
ample indicates that three arguments are needed in the call: The first argument 
is the annual interest rate. the second is the time in years, and the third is the 
and Function Procedures 

C 
II 
A 
1• 
'I' 
" 
ll 
loan amount. All three argument values must have a data type of decimal. and 
the return value will be decimal. Look carefully at the following formula and 
notice how the identifiers in the parentheses are used. 
Private Function Payment(ByVal RateDecimal As Decimal, ByVal TimeDecimal As Decimal, 
ByVal AmountDecimal As Decimal) As Decimal 
' Calculate the monthly payment on an amortized loan. 
Dim RatePerMonthDecimal As Decimal 
RatePerMonthDecimal = RateDecimal I 12D 
' Calculate and set the return value of the function . 
Payment = Convert .ToDecimal((AmountDecimal * RatePerMonthDecimal) 
((1 - (1 1 (1 + RatePerMonthDecimal) ' (TimeDecimal * 12D))))) 
End Function 
Calling a Function with l\'lulti[>le l'aramNet·s 
To call this function from another procedure. use these statements: 
RateDecimal = Decimal.Parse(RateTextBox.Text) 
YearsDecimal = Decimal.Parse(YearsTextBox.Text) 
PrincipalDecimal = Decimal.Parse(PrincipalTextBox.Text) 
PaymentDecimal = Payment(RateDecimal, YearsDecimal, PrincipalDecimal) 
You can pass the value of the text boxes as well as format the result by 
combining functions: 
Paymentlabel.Text = Payment(Decimal.Parse(RateTextBox.Text), 
Decimal.Parse(YearsTextBox .Text), 
Decimal.Parse(PrincipalTextBox.Text)).ToString( "C") 
When you call the ftmction, the smart editor shows you the parameters of 
your function (Figure 5.20). just as it does for built-in functions (assuming that 
yon haw~ alrPAny P.ntP.rP.n thP. fnnr.tion pt·o~P.rhm~)-
Fig RI" e 5.2 0 
The Visual Studio lntelliSense feature pops up with the parameter list for your own newly written procedure. 
Frincipa lDecimal = Decimal . Parae (Princical1e.xt8ox. Text) 
Rc:.t:Deci.rnc.l -
De c.i.m!:.l .Pc.r~e (Rc:.t.eTex cOox.rext) 
Yea rsDeci mal = Dec imal . Par se (YearsTextBox. Text I 
PaY!fl.enu:>oc!mal = r.:Pa::,'flJSc:::::nc:.:L:,:(L-::--:--:,...,..-,::--:--::-:::--=-:--:-:---=--:--:-:---::-:--:-:-:::--:---:-:-::-,--,-, 
Bs·eald ng Calculations into Smalles· Units 
A project with many calculations can be easier to understand and to mite if you 
break the calculations into small units. Each unit should pertonn one program 
function or block oflogic. In the following example that calculates bowling sta-
tistics. separate function procedures calculate the average. handicap, and se-
ries total. and find the high game. 
231 

232 
l ' 
C 
Menus, Common Dialog Boxes, Sub Proctdures, 
'Project: 
'Programmer: 
'Date: 
'Folder: 
'Description: 
Chapter 5 Bowling Example 
Bradley/Millspaugh 
June 2010 
Ch05Bowling 
This project calculates bowling statistics using 
multiple function procedures. 
Public Class BowlingForm 
and Function Procedures 
Private Sub CalculateToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles CalculateToolStripMenultem.Click 
' Calculate individual and summary info. 
Dim AverageDecimal, HandicapDecimal As Decimal 
Dim Serieslnteger, Game1Integer, Game2Integer, Game3Integer As Integer 
Dim HighGameString As String 
Try 
Game1Integer 
Game2Integer 
Game3Integer 
Integer.Parse(Score1TextBox .Text) 
Integer.Parse(Score2TextBox .Text) 
Integer.Parse(Score3TextBox.Text) 
· Perform all calculations. 
AverageDecimal = FindAverage(Game1Integer, Game2Integer, Game3Integer) 
Serieslnteger = FindSeries(Game1Integer, Game2Integer, Game3Integer) 
HighGameString = FindHighGame(Game1Integer, Game2Integer, Game3Integer) 
HandicapDecimal = FindHandicap(AverageDecimal) 
' Format the output. 
AverageTextBox.Text = AverageDecimal.ToString( "N1 ") 
HighGameTextBox.Text = HighGameString 
SeriesTextBox.Text = Serieslnteger.ToString() 
HandicapTextBox. Text = HandicapDecimal. ToString ( "N1 ") 
Catch 
MessageBox. Show( " Please Enter three numeric scores" , "Missing Data", 
MessageBoxButtons.OK) 
End Try 
End Sub 
Private Sub ClearToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ClearToolStripMenuitem.Click 
' Clear the data entry fields . 
With NamoToxtBox 
. Clear() 
.Focus() 
End With 
MaleRadioButton.Checked 
False 
FemaleRadioButton.Checked = False 
Score1TextBox .Clear() 
Score2TextBox .Clear() 
score3TextBox.Clear() 
SeriesTextBox.Clear() 
AverageTextBox .Clear() 
HighGameTextBox .Clear() 
HandicapTextBox .Clear() 
End Sub 
Private Sub ExitToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitToolStripMenuitem.Click 
' Terminate the project. 
Me.Close() 
End Sub 

C 
II 
A 
1• 
'I' 
" 
ll 
Private Function FindAverage(ByVal Score11nteger As Integer, 
ByVal Score2Integer As Integer, ByVal Score3Integer As Integer) As Decimal 
' Return the average of three games. 
Return (Score1Integer + Score2Integer + Score3Integer) I 3D 
End Function 
Private Function FindHandicap(ByVal AverageDecimal As Decimal) As Decimal 
' Calculate the handicap. 
Return (2000 - AverageDecirnal) * O. BD 
End Function 
Private Function FindSeries(ByVal Game1Integer As Integer, 
ByVal Game2Integer As Integer, ByVal Game3Integer As Integer) As Integer 
' Calculate the series total. 
Return Game1lnteger + Game2Integer + Game3lnteger 
End Function 
Private Function FindHighGame(ByVal Game1Integer As Integer, 
ByVal Game2Integer As Integer, ByVal Game3Integer As Integer) As String 
' Find the highest game in the series. 
If Game1Integer > Game2Integer And Game1Integer > Game3Integer Then 
Return "1" 
Elseif Game2Integer > Game1Integer And Game2Integer > Game3Integer Then 
Return "2" 
Elseif Game3Integer > Game1Integer And Game3Integer > Game2Integer Then 
Return "3" 
Else 
Return "Tie" 
End If 
End Function 
End Class 
Ft•t•dhal'k 5.1 
You need to write a procedure to calculate and return the averll£e of three inte-
ger values. 
l. Should you write a sub procedure or a function procedure? 
2. Write the header line of the procedure. 
3. Write the calculation. 
4. How is the calculated average passed back to the calling procedure? 
Basing a New Project on an Existing Project 
In this chapter you will base a new project on an existing project but keep the 
previous project unchanged. To create a new project based on a previous one. 
you should copy the solution folder. 1ben you can move it as necessary. 
You can copy an entire Windows solution folder from one location to an-
other using Windows Explorer. Make sure that the project is not open in Visual 
Studio and copy the entire folder. 
• 
Make sme the project is not open (very important). 
• 
Copy the outer solution folder to a new location using Windows Explorer. 
• 
Rename the new folder for the new name. still using Windows Explorer. 
233 

234 
s 
t 
\ 
•. 
( ' 
Menw, c..nm... Dialog &x. .. S..o Proctd<"'' 
Open the new solution (the copy) in the Visual Studio lDE. 
• 
In the IDE's Solution Explorer. rename the solution and project. Tire best way 
to do this is to right-click on the nan1e and choose the Rename conunand from 
the shortcut menu. To rename the solution. you must set tJ1e option to display 
the solution: Tools I Options I Projects and Solutions I Grmeral I Always show 
solution. 
Rename the fonn~. if desired. (If VS can't find tJ1e startup form. you must open 
the Project Designer and set the Startup Object. Select Project I ProjectName 
Properties or double-click on the My Project entry in the Solution Explorer.) 
Open the Project Designer and change the Assembly Name entry to match 
your new project name. 
Warning: Do not t1y to copy a project that is open using the Save As com-
mand. attempting to place a copy in a new location. It is difficult to actually 
copy all of the needed files: in some earlier vers ions of Visual Studio. doing so 
made the project unusable. 
ud FUMIIM Prtlfttlmtt 
Hands-On Programming Example --------
Modify the hands-on programming example from Chapter 4 by replacing some 
of the buttons with menus. Write a function procedure to calculate the sales la11: 
and allow the user to select the font and color of the surnrnruy text boxes. 
The project for R 'n R-for Reading 'n Refreshment cMculates the an1ount 
due for individual orders and maintains accumulated totals for a summary. Use 
a check box for takeout items. which are taxable (8 percent): all other orders 
are nontaxable. Include radio buttons for the five coffee selections: Cappuc-
cino. Espresso. Laue. iced Latte. and Iced Cappuccino. The prices for each ~ill 
be assigned using these constants: 
Cappuccino 
2.00 
Espresso 
2.25 
L<ttte 
1.75 
Iced (either) 
2.50 
Use a button for Cslculste Selection, which will calculate and display the 
amount due for each item. A button for Clear for Next Item will clear the selec-
tions and amount for the single item. Additionalt.ext boxes in a separate group 
box will maintain the summary infonnation for the current order to include sub-
total. tax. and totaL 
The New Order menu item will clear the bill for tJ1e current customer and 
add to the totals for the summary. The menu item for Summary should display 
the total of all orders. the average sale amount per customer. and the number of 
customers in a message box. 
TI1e Edit menu contains options tJ1at duplicate the Calculate artd Clear but-
Ions. The Font and Co/or options change the properties of the subtotal. tax. and 
total text boxes. 
TI1e About selection on the Help menu will display a message box with in-
fomJation about the programmer. 

C 
II 
A 
I' 
T 
E 
R 
£ile 
Hew Order 
~ummary 
EXit 
.Edit 
~alculate Selection 
Clear I tem 
r ant .. . 
C.ll.lOr .. . 
l'lmmin~ tlw Pt·ojert 
Help 
About 
Sketch a fonn (Figure 5.21) that your users sign as meeting their needs. 
A 5keu:h of theformfor the hanru-oll programming e,mmple. 
BllllngForm ~ 
uan 
TaxCheckBo X 
Ca lculateButton 
ClearButto 
(dl$311led 
ltemAmountTextBo 
n 
) 
X 
file 
I;dlt !:!elp I 
Order Information 
guanUty 1 
"' I 
-+O Tatwutf' 
-. walculate 11Clesrfor ,I 
Selection. 
Next Item 
-:--
Item Amount ~ 
~ 
Sui1Total 
I 
Tax (If Takeout) I 
Total Due 
I 
I 
I 
I 
I 
X 
,..coffee Selections -
..-
@ C~ppucclno 
0 EsprtJs5Q 
0Lat,te 
0 j_c;ed Uitte 
0 Iced Caepucclno 
Pion the Objects and Propetties Plan the property settings for the form and 
each of the controls. 
O Lj.-ct 
Bill ingF onn 
Name 
Selling 
BillingForm 
I~ 
' 
235 
GroupBox1 
GroupBox2 
CappucclnoRadloButton 
Espres50RadloButton 
LatteRadloButton 
lcedLatteRadloButton 
lcedCappucclnoRadloButton 
GroupBOK.3 
Sui1Tota1TextBox 
TaxTextBox 
TotaiTextBox 
Text 
AcceptButton 
CanceiBullon 
R 'n R--for Reading 'n Refreshment 
CalculateButton 
Group Box! 
GroupBox2 
GroupBox3 
CappuccinoRadioBuUon 
Esp.ressoRodioBuuon 
LatteRadioButton 
Text 
Text 
Name 
Text 
Checked 
Name 
Text 
Name 
Text 
ClearButton 
Order Information 
Coffee Seleclions 
(blank) 
CappuccinoRadioButton 
C&appuccino 
True 
Espre•110RaclioButton 
E•pres.&o 
LatteRadioButton 
La&-tte 

236 
Ohjec•l 
lcedLatteRadioButton 
lcedCappuccinoRadioBullou 
Labell 
QuantityTextBox 
Tax CheckBox 
Lahel2 
Label3 
Label4 
LabeLS 
ltemAmooniTextBox 
SuhTotatfextBox 
TnxTextBox 
TotalTextBox 
Calculate Button 
Cle.urButton 
Fi leTooiStripMenul tern 
NewOrder'fooJStripMenultem 
SummaryTooiStripMenultem 
EDtTooiStripMenultem 
EditTooiStripMe.>ultem 
CalculateSelectionTooiStripMenultem 
ClearltemToolStripMenultem 
FontTooiStripMenultem 
ColorToo!StripMenuhem 
HelpToo!StripMenultem 
About'rooiStripMenultem 
ColorDialogl 
FontDiale>gl 
s 
l 
\ 
L 
Po'Operly 
Name 
Text 
Nwne 
Text 
Text 
Name 
're.~t 
Name 
Text 
Text 
Text 
Text 
'I'ext 
Name 
T..bStop 
ReadOnly 
Name 
T..bStop 
ReadOnly 
Name 
TahStop 
Read Only 
Name 
TahStop 
Read Only 
Name 
Text 
Name 
Text 
Enabled 
Tn t 
Text 
Text 
Text 
Text 
Text 
Text 
Text 
Text 
Text 
Te.~t 
Name 
Name 
R 
\ 
S 
Setting 
lcedLatteRadioButton 
&Iced Latte 
JII#IWI, C..."""" Dialog 8o>u, S_. Prr><..Wrn. 
0114 F~aeti.on i"rtKtdurN 
JcedCappuccinoRadioButton 
Iced Ca&ppuccino 
&Quantity 
QuantityTextBox 
(blank) 
Tax CheckBox 
Ta&keout? 
hem Amount 
SuhTotnl 
Tax (if Takeout) 
Total Due 
ltemAmountTextBox 
False 
True 
SubTotaiTextBox 
False 
True 
TuxTextBox 
False 
True 
TotaiTextBox 
F ulse 
True 
CalculateButton 
&Calculate Selection 
ClearButton 
C&lear for Next Item 
False 
&File 
&Ne1v Order 
Property: Enabled: Settin!< False 
&Summary 
E&rxit 
&Edit 
&Calculate Selection 
Clear&hem 
&Font . . . 
C&olor ... 
&Help 
&About 
ColorDialog l 
FontDialogl 

C
ll
i\
I' Tt:
H 
Plan the Event Procedures You need to plan the actions for the buttons and the 
actions of the menu items. as well as the function for the sales lax. 
O bject 
Colculote Button 
ClearButton 
NewOrderTooiStripMenultem 
SwnmaryTooiStripMenultem 
ExitTooiStrip~tenullem 
CalculateSelectionTooiSilipMenultem 
ClearllemTooiStripMenultem 
AboutTooiStripMenuhem 
FontToo!StripMenultem 
ColorT oo!Stri pMenu hem 
(Function proce<lurc) 
P1·ocedurc 
Click 
Click 
Click 
Click 
Click 
Click 
Click 
Click 
Click 
Click 
FindTIU 
Aclio n 
Validate for blank- or- nonnumeric amount. 
Find price of drink oelection. 
Multiply price by quantity. 
Add umounl lo subtotaL 
Call tax function if needed. 
Calculate total =subtotal + lax. 
Format and di•play the valueo. 
Enable the Clear buuon and menu item. 
Disable the Takeout check box. 
Clear the coffee oelections. 
Clear the quantity and the item price. 
Set the focu• to the qurmtity. 
Confirm clearing the current order. 
Clear the current order. 
U subtotal <> 0 
Accumulate total sales and count. 
Set subtotal and total due to 0. 
Enable Takeout check box. 
Disable the Clear button and menu item. 
Disable Ne~· Order menu item. 
U current order not added to totals 
Call Ne~·OrderToolStripMenultem_Click. 
U the customer count > 0 
Calculate the average. 
Display the summary totals in a message box. 
TernUnatc the project. 
Share the event procedure for CalculateBulloo. 
Share the event procedure for ClearBuuon. 
Display the About meo~~:.~ge box. 
Allow user to change fonts. 
Allow user to change colors. 
Calculate the soles tax. 
\\rite the Project Follow the sketch in Figure 5.21 to create the form. Figure 
5.22 shows the completed form. 
• 
If you are basing your project on the project from Chapter 4. first copy the 
project folder. as desc1ibed in the section " Bas ill£ a NeM' Project on an Ex-
isting Project." 
Set the properties of each object according to your plan. If you are modify-
ing the project from Chapter 4. add the menus and the common dialog 
components and remove the extra buttons. 
• 
Write the code. Working from the pseudocode. write each event procedure. 
• 
When you complete the code, use a variety of data to thoroughly test the 
project. 
237 

238 
\ 
S 
l 
\ 
L 
ll 
' 
.. 
( ' 
lll.nU&, Commo n l);alog &n>, Sub Proo..W"~ 
tuul Ji'uadion. Pmt<l'tlmd 
t' l~are 5 . 22 
oJ R n R 
feY Reading 'n Refreshment 
l= l§t.a.l' 
The form for the hantb-on 
programming example. 
[II~ 
l:d•t 
l:l~lp 
Order lrlotmii!Jon 
lem/'mrut 
Subtotlll 
Tax (I takeol.t) 
Total 
'nw Pt·ojcct CotUng- Solution 
Ch05HandsOn 
Bradley/Millspaugh 
June 2010 
Coffee Seledlons 
OC§PPUCCno 
-
Eapreuq 
~e 
jced l..alte 
-
leed Caj!:ltJCCm 
'Program Name 
'Programmer: 
'Date: 
'Description: 
This project calculates the amount due 
based on the customer selection 
'Folder: 
and accumulates summary data f or the day. 
Incorporates menus and common dialog boxes, 
which allow the user to change the font and 
color of text boxes . 
Ch05Hands0n 
Public Class BillingForm 
' Declare module-level variables for summary information . 
Private Subtotal Decirnal, TotalDecimal, GrandTotalDecirnal As Decimal 
Private customercountinteger As Integer 
' Declare constants. 
Const TAX_RATE_Decimal As Decimal = O.OBD 
Const CAPPUCCINO_PRICE_Decimal As Decimal = 2D 
Const ESPRESSO PRICE Decimal As Decimal = 2.25D 
Const LATTE_PRICE_Decimal As Decimal = 1. 75D 
Const ICED_PRICE_Decimal As Decimal = 2.5D 

C
II
1\
1•1'E
R 
·• 
Private Sub CalculateButton_Click(ByVal sender As system.Object, 
ByVal e As system.EventArgs) Handles CalculateButton.Click, 
CalculateSelectionToolStripMenuitem.Click 
' Calculate and display the current amounts and add to totals. 
Dim PriceDecimal, TaxDecimal, ItemAmountDecimal As Decimal 
Dim auantitylnteger As Integer 
' Find the price . 
If CappuccinoRadioButton.Checked Then 
PriceDecimal = CAPPUCCINO_PRICE_Decimal 
Elself EspressoRadioButton.Checked Then 
PriceDecimal = ESPRESSO PRICE Decimal 
Elself LatteRadioButton.Checked Then 
PriceDecimal = LATTE_PRICE_Decimal 
Elself IcedCappuccinoRadioButton.Checked or 
IcedLatteRadioButton.Checked Then 
PriceDecimal 
ICED_PRICE_Decimal 
End If 
' Calculate the extended price and add to order total. 
Try 
auantityinteger = Integer.Parse(OuantityTextBox.Text) 
ItemAmountDecimal = PriceDecimal * auantityinteger 
SubtotalDecimal += ItemAmountDecimal 
If TaxCheckBox.Checked Then 
' Call a function procedure. 
TaxDecimal 
FindTax(SubtotalDecimal) 
Else 
TaxDecimal 
0 
End If 
TotalDecimal = SubtotalDecimal + TaxDecimal 
ItemAmountTextBox.Text = ItemAmountDecimal.ToString("C") 
SubTotalTextBox.Text = SubtotalDecimal.ToString("N") 
TaxTextBox . Text = TaxDecimal . ToString( "N") 
Total TextBox. Text = TotalOecimal . ToString( "C") 
' Allow change for new order only. 
TaxCheckBox.Enabled = False 
' Allow Clear after an order is begun. 
ClearButton.Enabled = True 
ClearitemToolStripMenuitem.Enabled = True 
NewOrderToolStripMenuitem.Enabled = True 
Catch auantityException As FormatException 
MessageBox . Show( "Quantity must be numeric. •, ' Data entry error•, 
MessageBoxButtons.OK, MessageBoxrcon.Information) 
With auantityTextBox 
.Focus() 
.SelectAll() 
End With 
End Try 
End Sub 
Private Function FindTax(ByVal AmountDecirnal As Decimal) As Decimal 
· Calculate the sales tax. 
Return AmountDecimal * TAX RATE_Decimal 
End Function 
239 

240 
,. 
S 
l 
\ 
L 
It 
\ 
s 
t: 
oll•mu, Common llioU.g &•es, Sub Pn><..W..., 
and FUN.tion I'Toctdurn 
Private Sub ClearButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ClearButton.Click, 
Clearlt emToolSt ripMenultem.Click 
' Clear the appropriate controls. 
CappuccinoRadioButton.Checked = True 
ItemAmountTextBox.Clear() 
With auantityTextBox 
.Clear() 
. Focus() 
End With 
End Sub 
Private Sub NewOrderToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles NeWOrderToolStripMenultem.Click 
' Clear the current order and add to the totals. 
Dim ResponseDialogResult As DialogResult 
Dim MessageString As String 
' Confirm clear of the current order. 
MessageString = ' Clear the current order figures?" 
ResponseDialogResult = MessageBox. Show(lllessageString, "Clear Order", 
MessageBoxButtons.YesNo, MessageBoxlcon.auestion, 
MessageBoxDefaultButton.Button2) 
If ResponseDialogResult = System.Windows.Forms.DialogResult .Yes Then 
' User said Yes; clear the screen fields. 
ClearButton_Click(sender, e) 
SubTotalTextBox.Text = 
TaxTextBox.Text = 
TotalTextBox.Text = 
' Add to the totals only if not a new order/customer. 
If SubtotalDecimal <> o Then 
GrandTotalDecimal += TotalDecimal 
customercountinteger += 1 
' Reset totals for the next customer. 
SubtotalDecimal = o 
TotalDecimal = o 
End If 
· Clear t he appropriate display items and enable the checK box. 
With TaxChecKBox 
.Enabled 
True 
.ChecKed = False 
End With 
ClearButton.Enabled = False 
ClearitemToolStripMenuitem.Enabled = False 
NewOrderToolStripMenuitem.Enabled = False 
End If 
End Sub 
Private Sub SummaryToolStripMenuitem_ClicK(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles summaryToolStripMenuitem.Click 
' Calculate the average and display the totals. 
Dim AverageDecimal As Decimal 
Dim MessageString As String 

C
ll
i\
1°T
t:
R 
If TotalDecimal <> o Then 
o Make sure the last order is counted. 
NewOrderToolStripMenuitem_Click(sender, e) 
o Pass incoming arguments to the called procedure. 
End If 
If customercountinteger > o Then 
o Calculate the average. 
AverageDecimal = GrandTotalDecimal 1 CustomerCountinteger 
o concatenate the message string . 
MessageString = "Number of Orders: " & 
customercountinteger.ToString() & 
Environment .NewLine & Environment.NewLine & 
"Total Sales: • & GrandTotalDecimal. ToString( "C") & 
Environment .NewLine & Environment.NewLine & 
"Average Sale: • & AverageDeci~al . ToString("C " ) 
MessageBox.Show(MessageString, "COffee Sales summary•, 
MessageBoxButtons.OK, MessageBoxicon.Information) 
Else 
MessageString = "No sales data to summarize. • 
MessageBox.Show(MessageString, "COffee Sales summary· , 
MessageBoxButtons.OK, MessageBoxicon.Information) 
End If 
End Sub 
Private Sub ExitToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitToolStripMenuitem.Click 
0 Terminate the project. 
Me.Close() 
End Sub 
Private Sub AboutToolStripMenuitem_ClicK(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles AboutToolStripMenuitem.Click 
o Display the About message box. 
Dim MessageString As String 
MessageString = "R on R Billing• & Environment.Newline & 
Environment.NewLine & "Programmed by Bradley and Millspaugh" 
MessageBox.Show(MessageString, 'About R on R Billing•, MessageBoxButtons.OK, 
MessageBoxicon.Information) 
End Sub 
Private Sub FontToolStripMenuitem_Click(ByVal sender As system.Object , 
ByVal e As System.EventArgs) Handles FontToolStripMenuitem.Click 
o Allow the user to select a new font for the summary totals. 
With FontDialog1 
.Font = SubTotalTextBox. Font 
. ShoWOialog () 
SubTotalTextBox.Font = .Font 
TaxTextBox.Font = .Font 
TotalTextBox.Font = .Font 
End With 
End Sub 
241 

242 
' 
S 
l 
\ 
L 
It 
\ 
s 
t: 
,1/,mu, Common llioU.g &•es, Sub Pn><..W..., 
and FUN.tion I'Toctdurn 
Private Sub ColorToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ColorToolStripMenuitem.Click 
' Allow the user to select a new color for the summary totals . 
With ColorDialog1 
.Color = SubTotalTextBox . ForeColor 
.ShowDialog() 
SubTotalTextBox.ForeColor = .Color 
TaxTextBox.ForeColor = .Color 
TotalTextBox.ForeColor = .Color 
End With 
End Sub 
End Class 
I. The Visual Studio Menu Designer enables you to create menus by using 
MenuStrips. wnich contain Tool Strip menu items that can have keyboard 
access keys. 
2. In the Menu Designer you can set and modify the order and level of menu 
items. 
3. You can modify menu items in the MenuStrip's Items Collection Editor. 
4 . A menu item can have a second list of choices. which is called a submenu. 
5. Menu items can be disabled by setting the Enabled property = False 
and can be made to appear with a check mark by setting the Checked 
property = True. 
6. MemLS should follow Windows standards. use standard keyboard shortcuts. 
and include ellipsis if further choices will be offered. 
7. Each menu item has a Click event. The code to handle the actions of a 
menu item belongs in the item's Click event procedure. 
8. Common dialog boxes allow Visual Basic programs to display the prede-
fined Windows dialog boxes for Color. Font. Open File. Sal/9 Rio and Folder-
Browser. These dialog boxes are part of the operating environment: 
therefore. it is an wmecessary duplication of effort to have each program-
mer create them again. 
9. Context menus. or shortcut menus. are created using a ContextMenuStrip 
component and the Menu Designer. Context menus pop up when the user 
right-clicks. 
10. The programmer can write reusal)le code in general procedures. These pro-
cedures may be sub procedures or function procedures and may be called 
from any other procedure in the fom1 module. 
ll. Both sub procedures and function procedures can perform an action. Ho~+·­
ever. function procedures return a value and sub procedures do not. The 
value returned by a function procedure has a data type. 
12. Arguments can be passed ByRef or ByVal (the default). ByRef passes a 
reference to the actual data item; ByVal passes a copy of the data. 
13. A function procedure must return a value, which can be accomplished using 
the Return statement or by selling the name of the function to the result. 

C
II
1\
I1
TE
il 
ByRef 227 
ByVal 227 
Call (procedure call) 226 
checked 277 
Checked property 217 
common dialog 219 
menu 210 
Menu Designer 210 
MenuStrip component 210 
method 225 
modal 220 
modeless 220 
context menu 222 
ContextMenuStrip component 222 
disabled 217 
return value 225 
separator bar 214 
shortcutmenu 222 
ShowDialog method 219 
sub procedure 243 
submenu 214 
Enabled property 217 
fw1ction procedure 
225 
general procedure 225 
l. Explain the difference between a menu and a submenu. 
2. How can the user know if a menu item contains a s ubmenu? 
3. ''\That is a separator bar and how is it created? 
4. Name at least three types of common dialog boxes. 
5. \Vhat is a context menu? How would you attach a context menu lo a 
control? 
6. 'Vhy would you need procedw'e.'! that are not attached to an event? 
7. Code the necessary statements to produce a color dialog box and use it to 
c hange the background color of a label. 
8. Explain the difference between a sub procedure and a function procedure. 
9. Wl1at is a return value? How can it be used? 
10. Explain the differences between ByRef and ByVal. 'l' hen •muld each be 
used? 
5.1 
Modify Programming Exercise 4.6 (piecework pay) to replace buttons 
Kith menus and add a fw1etion procedure. 
This project wiU input the number of pieces and calculate the pay for 
multiple employees. 11 also must display a summary of the total number 
ofpieces. the number of workers. the total pay. and the average pay for all 
employees. 
Menu: The menu bar must have these items: 
file 
~alculate Pay 
.§ummary 
!:,lit 
.fdit 
Clear 
Eont .. . 
J:;,olor .. . 
!:!alp 
About 
Piecework workers are paid by the piece. Workers who produce a 
greater quantity of output may be paid at a higher rate. 
243 

244 
S 
l r 
\ 
L 
n 
' 
s 
C 
M•n,., Con....,. Dialog Bo..._ Sub l'ro<..S.trn. 
Use text boxes to obtain the name and the number of pieces completed. 
The Calculate Pay menu item calculates and displays the dollar amount 
earned. The Summary menu item displays the total number of pieces. the 
total pay. and the average pay per person in a message box. The Clear 
menu choice clears the llllme nnd the number of pieces for the current 
employee and resets the focus. 
The Color and Font items should change the color and font of t11e infor-
mation displayed in the Amount Earned control. 
Use a message box to display the program name and your name for the 
About option on the Help menu. 
Write a function procedure to find the pay rate and return a value to 
the proper event procedure. 
Pieces Com.,leted 
P rice Paid per Piece fo r All Piecet!l 
Ito 199 
.50 
200 to399 
400 to599 
.60 
600 or more 
Note: For help in basing a new project on an existing project. see 
"Basing a New Project on an Existing Project" in this chapter. 
5.2 
Redo the checking accowll programming exercises from Chapter 4 (4.3. 
4.4. and 4.5) using menus and sub procedures. 
M enu: 
E.:ile 
rransaction 
~unvnary 
.frint 
.Edit 
Clear 
.Eont .. . 
.C.olor .. . 
lielp 
About 
Form: Use radio buttons to indicate the type of transaction--deposit. 
check. or service charge. Use a text box to allow the user to enter the 
amount of the transaction. Display the balance in a ReadOnly text box or 
a label. 
lnclude validation that displays a message box if the amount of the 
transaction is a n~ative number. If there is not enough money to cover a 
check. display a message box with the message "'nsufficient Funds.'' Do 
not pay the check. but deduct a service charge of $10. 
Write function procedures for processing deposits. checks. and service 
charges. The deposit function adds the deposit to the balance; the check 
function subtracts the transaction amount from the balance: the service 
charge fWJclion subtracts the transaction 8Jllount from the balance. Each 
of the functions must return the updated balance. 
'lne Summary menu item displays the total number of deposits and the 
dollar amoWJI of deposits. the number of checks. and the dollar amount of 
the checks in a message box. 
and FU~~C-Iion ~durn 

C
ll
i\
11
1'
t:
H 
The aear menu item clears the radio buttons and the amount and re-
sets the focus. 
The Color and Font menu items change the color and font of the balance. 
Use a message box to display the program name and your name as the 
programmer for the About option on the Help menu. 
Note: For help in basing a new project on an existing project, see " Bas-
ing a Ne\\· Project on an Existing Project" in this chapter. 
5.3 A salesperson earns a weekly base salary plus a commission when sales 
are at or above quota. Create a project that allows the user to input the 
ll"eekly sales and the salesperson name. calculates the commission. and 
displays summary information. 
Form: The form should have text boxes for the sale;;person s name and his 
or her weekly sales. 
Menu: 
file 
fay 
~ummary 
~it 
_Edit 
C.! ear 
Eont . . . 
!;_olor .. . 
Jielp 
~bout 
Use constants to establish the base pay, the quota, and the commission 
rate. 
The Pay menu item calculates and displays the commission and the to-
tal pay for that person. However. if there is no commission. do not display 
the commission amount (do not display a zero-commission amount). 
Write a function procedure to calculate the commission. The fw1ction 
must compare sales to the quota. When the sales are equal to or greater 
than the quota, calculate the commission by multiplying sales by the 
commission rate. 
Each salesperson receives the base pay plus the commission (if one 
has been earned). Formal the dollar amounts to h.-o decimal places; do 
not display a dollar sign. 
The Summary menu item displays a message box that holds total sales, 
total commissions. and total pay for all salespersons. Display the numbers 
11ith t11·o decimal places and dollar signs. 
The Clear menu item clears lhe name. sales. and pay for the current 
employee and then resels the focus. 
The Color and Font menu items should change the color and font of the 
information djsplayed in the total pay text box. 
Use a message box to display the program name and your name as pro-
grammer for the About oplion on the Help menu. 
Test Data: Quota = 1000: Commission rate = .15: and Base pay = $250. 
Nnme 
Sule• 
Sandy Smug 
1.000.00 
San1 Sadness 
999.99 
Joe Whiz 
2.000.00 
24S 

246 
\ ' 
Totals should be 
S 
l 
\ 
L 
ll 
\ 
s 
£ 
Mtna¥, Um1111011 malog &.1:~ Sub Proctrlurn, 
arul Flllt(tion Prot::fllurn 
Sale• 
83.999.99 
Commisaions 
4.50.00 
Pay 
1.200.00 
5.4 The local library has a summer reading program to encourage reading. 
TI1e staff keeps a ch&Jt with readers' names and bonus points earned. Cre-
ate a project using a menu and a function procedure that determines and 
retums the bonus points. 
Menu: 
EHe 
f.oints 
~ummary 
Ex_it 
sdit 
C,!ear 
Eont . . . 
~olor . . . 
Help 
hbOUt 
Form: Use text boxes to obtain the reader's name and the number of books 
read. Use a Read Only text box or a label to display the number of bonus 
points. 
The Points menu item should call a function procedure to calculate the 
points using this schedule: The first three books are worth 10 points each. 
TI1e next three books are \l'orth 15 points each. All books over six are 
worth 20 points each. 
'n1e Summary menu item displays the average number of books read 
for all readers that session. 
The Clear menu item clears the name. the number of books read. and 
the bonus points and then resets the focus. 
'~e Color and Font menu items change the color and font of the bonus 
points. 
Use a message box to display the program name and your name as pro-
grammer for the About option on t.he Help menu. 
5.5 
Modify Programming Exercise 2.2 (the flag viewer) to use a menu instead 
of radio buttons. check boxes. and buttons. Include check marks next to 
the name of the currently selected country and next to the selected dis-
play options. 
Memt: 
file 
EX,it 
,!Lountry 
United States 
~anada 
~apan 
Mexico 
llisplay 
~elp 
I itle 
About 
~ountry Name 
f.rogranvner 
Note: F'or help in basing a new project on an existing project. see 
" Basing a New Project on an Existing Project" in this chapter. 

C
ll
i\1'1'E
H 
247 
VB lUall Order 
Modify the case study project from Chapter 4 to use 
menus and a function procedure. Refer to Chapter 4 
for project specifications. 
Write a function procedure to calculate and return 
the shipping and handling based on the weight for an 
entire order. (Do not calculate shipping and handling 
on individual items- wait until the order is complete.) 
Apply the user's font and color changes to the To-
tal Due. or another control of your choice. 
Menu: 
file 
Update §.ummary 
.frint 
~it 
.Edit 
~dd ThiS Item 
.Qlear 
font .. . 
~olor .. . 
J:ielp 
AbOUt 
Note: For help in basing a new project on an exist-
ing project. see "Basing a New Project on an Existing 
Project" in this chapter. 
VB Auto Cent.r I 
Modify the case study project from Chapter 4 to use 
menus and a function procedure. Refer to Chapter 4 
for project specifications. 
Write a function procedure to calculate and return 
the sales tax. 
Apply the user's font and color changes to the 
Amount Due. or other control of your choice. 
Menu: 
£ile 
~it 
f;dit 
kalculate 
C,lear 
[ont .. . 
C.Qlor . . . 
Jjelp 
About 
Consider adding keyboard shortcuts to the menu com-
mands. 
Note: For help in basing a new project on an exist-
ing project. see ''Basing a New Project on an Existing 
Project" in this chapter. 

248 
\ 
s 
l 
.\ 
.. 
Modify the case study project from Chapter 4 to use 
menus and a function procedure. Refer to Chapter 4 
for project specifications. 
Use a function procedure to calculate the rental 
fee based on the type of video. 
The Help menu ,4bout option should display a mes-
sage box "ith information about the program and the 
programmer. The Color option should change the 
background color of the fonn; the font changes can 
change the control of your choice. 
Morlify your c11.~P. ~turly projP.r.l from r.hapiP.r 4 lo nrlrl 
a menu and a function procedure. Refer to Chapter 4 
for the project specifications. 
Write a function procedure to calculate and return 
the price of shirts: display the About box in a message 
box. 
Allow the user to change the font size and font 
color of the label that displays the company slogan. 
L1clude keyboard shortcuts for the menu com-
mands. 
MemL: 
.Eile 
.S.ale 
Jlisplay 
Hel p 
_summary 
Add to Order 
Eont . . . 
About 
Clear This Item 
,!;_olor . . . 
Exit 
O.r.der Co11plete 
.S.logan 
J..ogo 
u .\ 
s 
Menu: 
f ile 
~ummary 
f.rint 
~it 
( ' 
"''""'• Common IMiog Box.., Sub Proc.Jmn. 
arul FutU.Uon Pro~ 
f dit 
CAl culate 
Cl ear f or Next It em 
.Qrder Complete 
Qolor ••• 
f ont . . . 
Help 
,About 
Optional extra: et keyboard shortcuts for the menu 
commands. 
Note: For help in basing a new project on an exist-
ing project. see "Basing a New Project on an Existing 
Project" in this chapter. 
The S/>()gan and Logo: Make up a slogan for the com-
pany. such as "We're Number One" or "The Best in 
Boards.'" The logo should be a graphic; you can use an 
icon. any graphic you have available. or a graphic you 
create yourself with a draw or paint program. 
The Slogan and Logo menu choices must toggle 
and display a check mark when selected. For exam-
ple. when the slogan is displayed. the Slogan menu 
command is checked. If the user selects the Slogan 
command again. hide the slogan and uncheck the 
menu command. The Slogan and Logo commands op-
erate independently: that is. the user may select ei-
ther. both. or neither item. 
When the project he£ins. the slogan and logo must 
both be displayed and their menu commands appear 
checked . 
Not.e: For help in basing a new project on an exist-
ing project. see " Basing a New P roject on an E:dsting 
Project" in this chapter. 

D 
A 
p 
T 
E 
R 
Multiform 
Projects 
I . Include multiple fonns in an application. 
2. Use templates to create splash screens and About boxes. 
:l. Use the Show. ShowDialog. and Hide methods to display and 
hide fom1s. 
-t. Understand the various form events and select tbe best procedl!re for 
your r.nnP. 
5. Declare variables with the correct scope and access level for mulliform 
projects. 

250 
v 
S 
l l 
,\ 
I. 
C 
Multiform Projects 
Using Multiple Forms 
All the projects that you have created up to now have operated from a single 
form. It has probably occurred to you that the project could appear more pro-
fessional if you could use different windows for different types of infonnation. 
Consider the example in Chapter 5 in which summary inf.lrmation is displayed 
in a message box when the user presses the Summary button. You have very lit-
tle control over the appearance of the message box. The ;ummary infonnation 
could be displayed in a much nicer format in a new window with identifying la-
bels. Another ~tindow in Visual Basic is actually anotherform. 
The first form a project displays is called the stclrtllp form. You can add 
more forms to the project and display them as needed. A project can have as 
many forms as you wish. And you can select a different fonn to be the project 
startup form in the Project Designer. Select Project I Properlies I Application tab 
and drop down the list for Startup Form. 
C1·eating New Fo1·ms 
To add a new form to a project, select Add Windows Form from the Project 
menu. The Add New Item dialog box appears (Figure 6.1). in which you can 
select from many installed templates. You will learn about some of the other 
fonn types later in the chapter. For now. choose Windows Form to add a regular 
new form. 
Figure 6.1 
Select the Windows Foml ten~plate to add a new form to a projea. Your dialog box may ha·ve more or fewer item templates, 
depending on the versi.on of VB you are using. 
Add Nevv Item · Ch06MultifotmProject 
lnst.alled l em plates 
J Com mon ltsr.o; 
Code 
Data 
GenEral 
W<b 
Window !: Forn"l!> 
Reporting 
World'lov.• 
WPF 
Sort by.! D•fault 
~ 
S1)1teSheet 
Common 1tems 
A blank 'Windo•A'S Fo1m 
i) JScript File 
Con"'mon ltems 
~ 
Closs. 
Commonlterm 
~ 
Module 
Common ltenu 
~ 
fnterface 
Common ttems 
~ 
= 
WindoVJt ~orM 
Col'f",mon }t""''H 
il 
User Control 
Common lten1s 
~ 
Component C14 ~~ 
Common Jtems 
User Control (VJPF) 
Common 1terns 

C
II
A
I•'I'
I'R 
G 
Adding a New Fo1111 10 a Pl'ojecl 
You can add a new form to a project by following these steps: 
STEP 1: Select Add Windows Form from the Project menu. 
STEP 2: ln the Add New Item dialog box select Windows Form from the template 
list. 
STEP 3: Enter a name for the new form and click on Add. 
The new form '~ill display on the screen and be added to the Solution Ex-
plorer window (Figure 6.2). 
View Code 
View Designer 
W Ch06Multiformfroject 
~ My Project 
~ 
Mcinform.vb 
I~ Summa<yform.vb I 
~ Sclu ... 
While in design time, you can switch between forms in several ways.ln the 
Solution Explorer window. you can select a form name and click the View 
Designer button or the View Code button. Double-clicking a form name opens 
the form in the designer. But the easiest way to switch between forms is to use 
the tabs at the top of the Document 1~indow that appear after the form has been 
displayed (Figure 6.3). If there isn't room to display tabs for all open docu-
ments. you can click the Active Files button to drop down a list and make a se-
lection (Figure 6.4). 
Active Files button 
Ma1nForm.v b [Design] x 
~ Forml 
---=~=~~ 
After adding a new form. the 
Solution Explorer shows the 
fdenam.e of the new form. 
251 
Click on the tabs a.t the top of 
the Document window to 
switch among the Fornt 
Designer and Editor windows. 

252 
v 
S 
l l 
A 
I, 
G 
.\ 
S 
C 
M11lti{orm Projects 
You can drop down the list of available windows and select a fonn to which to switch. 
1\lainform.vb (Oesignl X 
11_, Forml 
Mainf orm.vb 
Mt:infcmn.vb jOcsignJ 
Summ/JryFoml.vb 
-
---
leJCt 
The text associated with the contfol. 
Each form is a separate file and a separate class. Later in this chapter you 
will learn to display and hide each of the fonns in a project. 
Adding and Re moving Fot·ms 
The Solutiou Explorer wiudow shows the files that are included in a project. 
You can add new ftles and remove files from a project. 
Adding Erutiug Form Fil~s to a Pr·oject 
Forms may be used in more than one project. You might want to use a fonn that 
you created for one project in a new project. 
Each form is saved as three separate files. All of the information for the 
fnnn n~siriP$ in thP filP.~. whir.h inr.lnriP.~ thP mriP pror.Prllll'P$ anrl thP. 11isnal in-
terface as ~-ell as all property settings for the controls. 
To add an existing fonn to a project. use the Add Existing Item command on 
the Project menu and navigate to the form file to be added. You select only one 
filename: FormName.vb; all three files are automatically copied into the proj-
ect folder. 
You can add an existing fonu to a project by follo~ing these steps: 
STEP 1: Select Add Existing Item from the Project menu. 
STEP :2: In the Add Existing Item dialog box, locate the folder and file desired. 
STEP 3: Click on Add. 
Note: You can run into problems adding a form that contains nonvisual compo-
nents. such as a PrintForm, or images that have not been added to the project 
resources. 
Removing For·ms ft·om a Pr·oject 
lf you want to remove a file from a project. select its name in the Solution Ex-
plorer window. You can then either click the Delete key or right-click on the 
filename to display the context menu and choose Delete. You also can choose 
Use Ctrl + Tab to cycle through a ll 
open files: while holding Ctrl, press 
Tab multiple times; when you reach 
the item you wont, release the Ctrl 
key. • 

C 
II 
A 
1• 
'I' 
" 
ll 
G 
Exclude from project to remove the form from the project but not delete the files. 
Note that the Exclude from project command is not available in VB Express. 
An About Box 
One popular type of form in a project is an About box. such as the one you 
find in most Windows programs under Help / About. Usually an About box gives 
the name and version of the program as well as information about the program-
mer or company. 
You can create yom 01m About box by creating a new form and entering 
the in.f01mation in labels. Of course. you may use any of the Windows controls 
on this new f01m. but About boxes typically hold labels and perhaps a picture 
box for a logo. Figtue 6.5 shows a typical About box. 
au About R 'n R Billing 
Coffee Sales Billing 
Ands tax and total for 
individual onler.o. Naircains a 
=-->' ol al sales. 
Progammed by A. Millspaugh and J. Bra<Sey 
Using the Aboul Box Template 
You also can use Visual Studio's About Box template to create a new About box. 
Choose Add Windows Form from the Project menu and select About Box (Figure 
6.6). A new form named AboutBoxl is added to your project (Figure 6.7) with 
controls you can modify. You can change the captions and image by setting the 
properties as you would on any other form. Once you create the form in your 
project. it is yours and may be modified a~ you please. 
Seuiug Asst.•mhly lufonnaliu n 
Notice in Figure 6.7 that the About Box template form includes the product 
name. version. copyright. company name. and description. You can manually 
set the Text properties of the controls, but there's a better way that provides this 
inf01mation for the entire project. Open the Project Designer (Figure 6.8) from 
Project I ProjectName Properties or double-click My Project in the Solution 
253 
Fi g ar e 6. 5 
A typical About box tha.t 
contains labels, a group box. a 
picture box. and a butwn. 

254 
l.' 
S 
l l 
A 
L 
\ 
s 
Select the Abou.t Box template to add a preformal/.edllbont Boxfonn w a project. 
Add Nc2w Item - Ch06Multlfof0'1Pro;cd 
rnst.alledTemplates 
A Comrnon Iltn1$ 
Codt 
0GtCI 
General 
Web 
Windows Forms 
Rc.pcrting 
Workflow 
WPF 
AboutBoxl 
Sort by: I Dciouh 
~ 
Window) fou,., 
lj User Contrcl 
~ 
Component Clii~S 
lti U"' C onlrol (WPF} 
~ 
About BD•I 
ADO.NH Eot;ty Dot• Mocl• l 
~ 
AOO.NET EntityObjcd Gencrotor 
4 
ADO.NETSelf· Traclung Entity Genenttorr 
~ 
C:IH~ Oilgnrn 
t) Code Fil ~ 
0 
~ 
COM Clm 
Version 
Copy:ight 
Desaiption . 
(At nJltime. the labels• text 'li"ill be replaced r .. ith 
the :application's assembly irformaticn. 
Customize the application·s assembtt inforrr.ation 
in the Application pane of Project Designer.) 
Cornmon Jl~m ~ 
Ccmmcnltem~ 
Common ft:etm 
Con"'n\ort ltc.1ns 
Common: ltem ~ 
Common h:t ml 
Cornmon Item~ 
Cornrnon llenu 
Common lttmt 
Common ltem~ 
Comm on IL~t:rm 
(' 
Multiform Projects 
f 
FIJ!u•·e 6.6 
Type: Common ltcm1 
About Doxformfor Window' Form1 
.lpplications 
FIJ!u•·~· 6.7 
A new form created with the 
About Box template. YotH'all 
cuJtomize the form. by setting 
properties of the controls. 
adding controls. or renwvillg 
controls. 

C 
II 
A 
1• 
'I' 
" 
ll 
6 
Open the Project Designer and click on the Assembly Information button to display the project's assembly information. 
ChC6Multiform P roject ~ X Aboi.Jt8oxlvb [Ots~gnl~ 
Summal)FormVO 
Matnform.vb !Oes1g.11 
Summaryform.\lb (Design] 
~ 
Application 
Compile 
Oebug 
References 
Resources 
Services 
s~ttings 
Signing 
My Extensions 
Security 
Publisb 
A:~:~~mb!y r.~CJme: 
tHij•jW!ftM@D! 
Root n~n1c:spoce; 
Ch06MultiformProjeci 
Applicati or~ type: 
Icon: 
Ll 
Wi.::'.::"d:..:ow=s F.::o.::•m.::s:..:A.c:P..cP:::
Iic.::'':::io.::n ______ ___J•I I (Oefcultlcon) 
Startup form: 
(Maiiif"-orm 
-----:) 
Assembly fnfo!TYI~ 
I View Windows Settings 
[?1 Enable appflcatioo framework 
VJindowi applic;~tion fram ework properties 
~ EnablE: XP visual styles 
E: Make $ingle 1nstanc.e application 
~ Save My.~ettings on Shutdown 
Authc:nti cction mode, 
!windows 
Shutdown mode: 
I 
When stortup foiTtl d oses-
Splash screen: 
~ I 
~j 
I<~Jon•) 
======·e.!JI 
Vtew-Appliubon Even« 
Explorer. Click on the Assembly Information button and fill in the desired infor-
mation in the Assembly Information dialog box (Figure 6.9). 
Once the information is entered into the Assembly lnformation, you can 
retrieve it by using the My.Application object. The following code is automati-
cally included in the AboutBox fonu's code: 
Me.LabelProductName.Text = My.Application .Info.ProductName 
Me.LabelVersion.Text = String.Format( "Version {0} ", 
My.Application.Info.Version .ToString) 
Me.LabelCopyright .Text = My .Application.Info.Copyright 
Me.LabelCompanyName.Text = My.Application. Info.CompanyName 
Me.TextBoxoescription.Text = My .Application. Info.Oescription 
Typically you find much of this same information on the application's 
splash screen. 
2SS 

2S6 
v 
s u 
\ 
•. 
C 
Multiform Projects 
rA-~--~-y-r-.r-.,-~-,-~-
. ----~~~~~----~L~~~ 
!!tiel 
R 'n P. fe~Ruding and Rt1tuhmtnt 
f.omparry: 
f rodli<C 
Cgpyngnt: 
CatcuiO!Ite: sai@.S fc.r ~ 'n R For Reading 4nd Refruh 
R 'n R for Reading af'td Refreshment 
P?semblyver!:lon: l 
flit VlniOnt 
0 
18 b01l..6· 2• 70-41~, ·989<1 ·9 d dGOa~ c .34 r 
H~utnlllongu"ge.. (NDnc:) 
[] Make as.sembly COM·Vitibfe 
A Splash Screen 
Perhaps you have noticed the logo or window that often appears while a pro-
gram is loading. such as the one in Figure 6.10. This initial form is called a 
s plash screen. Professional applications use splash screens to tell the user 
Lhat Lhe program is loading and starting. It can make a large application ap pear 
to load and run faster. since something appeam on the screen while the rest of 
Lhe application loads. 
R •n R 
For Reading 'n Refreshment 
Version 2.0 
Copyr1!Tf .. 2010 
F I ~ n •· l' 
(i • 9 
Enter or modify the project's 
information on the Assembly 
Information dialog box. 
F I f,( n •• t.• n. I 0 
A cr£Storn splash screen created 
.from a standard Windows 
form. 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
6 
Using the Splash Sct'e{'n Te mplate 
You can create your own splash .screen or use the splash screen template in-
cluded with Visual Studio (Figure 6.11). Select Project I Add New Item to display 
the Add New Item dialog box (refer to Figure 6.6). Choose Splash Screen to add 
the new form; then modify the form to fit your needs. You may want to make 
modifications to the labels and to the code. 
The predefined code in the splash screen template may be more compli-
cated than you need. lt includes code to fill in the application title, version, and 
copyright information from the project's assembly information (refer to "Setting 
Assembly Information" in the preceding section for the About box). You can ei-
ther set the assembly infonnation or modify the labels to display the text that 
you want. 
lication Title 
Making the Splash Fonn Display Fi1·st 
Whether you create your own splash screen or use the VB template. you must 
take one more step to make the splash screen appear before the startup form. 
Display the Project Designer either by selecting ProjectName Properties from 
t11e Project menu or by double-clicking the My Project item in t11e Solution Ex-
plorer. Set the Splash scl'een drop-clown list to your splash screen (Figw·e 6.12). 
Do not change the setting for Shutdown mode. which would require coding tech-
niques that go beyond the scope of this chapter. 
When you run the project. the splash screen should display while the 
startup fom1 is loading and then disappear. By default. the splash form remains 
011 the :>t.:rt:cll fur aLuul lwu l:itlt.:uHW:i. 
2S7 
A splash form created using 
the Splash Screen template. 
Yott can customize the form as 
much as you wiJh. 

2S8 
v 
S 
l l 
,\ 
I. 
C 
Multiform Projects 
Figur e 
6 . 12 
Set the Splash screen drop-down list to your new form in the Project Designer. 
Ch06M ukif ormProje<t~ X 
Application• 
ConfioL,lior. ~N_r_A ______ __,·J 
~,. fo" ILN.:./ _A ______ _,•j 
Compi1e 
Reit:rence:s 
Re~ourc es 
services 
Sett1ngs 
Si_gr,lng 
Security 
Pub! ish 
Root namespace: 
Ch06MultiformProJect 
Ch06Multtfo•mProJEct 
Appl1c~ion type: 
rcon: 
Ll 
W.:.i.:.nd::cov
.:.'c:.' .:.Fo::cr.:.
mc:.s::c
A!:.!pp.:.·lic:.".:.'ic:.o::.n _______ •...JI I (Default Icon) 
SUutup fom1: 
IMainForm 
Assernbf'y. Jofomtation... II 
ViewWiodowsSettings-
R.1 Enable application trameAJork 
Windows opplication f!cmcwork propcrtic:. 
~ 
En:1ble XP'1isuol styles 
Ll Mike ~ngle instante apptita:ion 
~ Save My,S.tt1ngsonShutdown 
At.~'thentic.otion n;odc:: 
I windows 
Shutd01Nn mo de: 
~hen start:upiorm doses 
Splcsh scrcc:n; 
-I 
·J 
IeNon e) 
VifiN Application Event> 
!(None) 
AbouiBoxl 
ISummart l=orm 
Othm· Template Fm·ms 
Take a look at the other templates in the Add N~w lt~m dialog. Some others that 
you might find of interest are the Login Form and the Explorer Form. Note 
that the templates vary depending on the version of Visual Studio. VB Express 
has the fewest templates. 
Using the Methods and Events of Form$ 
In code, you can use several methods to show. hide, and close fonns. 
Showing a Fo1·m 
You generally display a new fonn in response to a user clicking a button or a 
menu item. In the event procedure for the button or menu item. you can use 
either the Show method or the ShowDialog method to display the new form. 

C
II
,\I>
'I'
I'
R 
6 
Modal ,·c•·sus 1\'lodcless Fo11us 
The Show method displays a fonn as modeless, which means that both fonns 
are open and the user can navigate from one form to the other. When you use 
the ShowDialog metl10d, the new form di~plays as modal: the user must re-
spond to the form in some ~·ay. usually by clicking a button. No other program 
code can execute until the user responds to and hides or closes the modal form. 
However. if you display a modeless form. the user may switch to another form 
in the project without responding to the form. 
Note: Even with a modal form. the user can switch to another application 
within Windows. 
The Show Mcthod-Genet·al Form 
! [I 
FormName . Show() 
The Show method displays the named form modelessly. 
The Suow ~l ctbod-Exmuple 
Tile SuowDialog Mctuod-Gene•·al Form 
f[l 
FormName. ShowDialog () 
Use the ShowDialog method when you want the user to notice. respond to. and 
close the form before proceeding with the application. 
Tbc Show Dialog Metuod- Exmnple 
~ I il somm''''''m.ShoWOi•log() 
You generally place this code in a menu item or a button's click event procedure: 
Private Sub summaryButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles SummaryButton . Click 
· Show the summary form. 
SummaryForm. ShowDialog() 
End Sub 
259 

260 
\ 
S 
l 
\ 
L 
If 
\ 
s 
(' 
Multiform Project• 
VB automatically creates a form object for each of the form classes that 
you create. You can show. hide. and close forms without explicitly declaring 
a new object. This default form object is not actually instantiated until you 
access one of the form's objects (such as a text box) or a form method (such 
as the Show method). You also can declare and instantiate a new form object 
like this: 
Dim NewsummaryFonm as New summaryForm 
NewsummaryForm.ShowDialog() 
H.idin~ or Clo~iu~ a Fo1·m 
You already know how to close the current form: Me. Close ().You also can use 
tl1e Close method to close any other form: SummaryForm. Close ( ) . 
The Close method behaves differently for a modeless form (using the Show 
method) compared to a modal fom1 (using the Showoialog method). For a mod-
eless form. Close destroys the fom1 instance and removes it from memory: for 
a modal form. the form is only hidden. A second ShowDialog method displays 
tl1e same form instance. which can have data left from the previous time the 
fonn was displayed. ln contrast. a second Show method creates a new instance, 
so no leftover data can appear. 
You also can choose to use a form's Hide mN uod. which sets the form's 
Visible property to False and keeps the form in~tance in memory. 
Tbl' IUdl' .\INJIOd-Ceuet·al Form 
~[I FormName. Hide () 
Hiding conceals a form but keeps it in memory. ready to be redisplayed. Use 
the Hide method rather than Close when the user is likely to display the fom1 
again. A good example might be a form ~t·ith instructions or Help text. which 
the user may display multiple limes. 
The llidP .UNhud-Ex:uuplt' 
ll '"'"'"''"'·""'() 
"' 
RespondinJ! to Form En~nls 
The two primary events for which you may need to lt'Tite code are the Form-
Name.Load and FormName.Activated. The first time a form is shown in an 
application. the form generates both the Load and Activated events. The 
Load event occms when the fonn is loaded into memory: the Activated event 
occurs after the Load event. just as control is passed to the fonn. Each sub-
sequent time the form is shown. the Activated event occurs. but the Load 
event does not. Therefore. if a form may be displayed multiple times. you 
may want to place initializing steps into the Activated event procedure 
• 

C 
II 
A 
1• 
'I' 
" 
ll 
G 
rather than into the Load. Also. if you wish to set the focus in a particular 
place on the new form. place the Focus method in the FormName_Activated 
procedure. 
The Seque nce of Fot·m Eve nts 
Although you don't need to write event procedures for all of these form events. 
it's helpful to know the order in which they occur: 
Load 
Activated 
Paint 
Deactivate 
FormClosing 
FormClosed 
Occurs before the form is displayed for the first time. 
Happens only once for any one form unless the form is 
closed rather than hidden. 
Occurs each time the fonn is sho~11. 1lus event procedure 
is the conect location for initialization or Focus. 
Occurs each time any portion of the form is redrawn. 
which happens each time a change is made or the fonn is 
moved or uncovered. 
Occurs when the form is no longer the active fonn, such 
as when the user clicks on another window or the form is 
about to be hidden or closed. 
Occurs as the torm is about to close. 
Occurs after the fonn is closed. 
Wt·iting Event Pt·ocedut·es fot· Selected Eveuts 
You are accustomed to double-clicking a conh·oi or form to open an event pro-
cedure for its default event. If you double-click a f01m, the default event is 
FormName.Load. To open an event procedure for the other events. you can use 
either of two easy techniques. 
From tbc Code Editor· 
In the Editor, drop down the Class Name list and choose the entry that shows 
the events for the selected form (Figure 6.13). Then in the Method Name 
list (Figure 6.14), select the event for which you want to write a procedure. 
Any events that already have an event procedure written appear in bold in 
the list. 
Notice in Figure 6.14 that there are many more events for forms than those 
covered in this chapter. 
Fig••••e 6 . 13 
Select the (Form Name Events) entry to see the list of possible events for which to write a procedure. 
-Summaryform.vb X ... ;, 
.... ' 
..... 
.. 
...... 
~Summ•ryForm 
• C coedaratN>nsl 
fj;1(GeR<roll 
~ 
"1$Summ.aryform 
r 
-i ~ma2fo~~nb) ·-~ 
261 

262 
v 
S 
l l 
,\ 
L 
(' 
Multiform Projects 
Fi g u•· e 
6 . 1 4 
Select the event from the Method Name list to create an empty event procedure. 
SummaryForm.\lb X 
• 
; 
~-7~(-Su~m~m-•~ry~
·F_o•_m_E~v-•n_tt~)--~---------------·Jii~~~
(D_e_
cl_
a•_•t_~_n~~~----------------------- N 
S Publ ic Class Sut•toryfona 
m (Oeclaratlons} 
~~~
'-"I 
l 
# k~-
End Class 
..J AuioSizeCiunged 
F1·om the P1·opm·ties Window in the Designer 
f AutoVa!idateC~anged 
I B4ckColorCh.onged 
;I B.ackgroundlmagE:Ch.anged 
~ Backgrouf)dlmage-LayoutChanged 
I BindingContextCt>anged 
f C4usesValld~tionCh.!ng.ed 
~ Ol.an-geU[Cu e~ 
? a ick 
-F Oier)tSizeCbonged 
-1 Contectf\'1E-nuChang~d 
~ contextMe-nuscnpchangeo 
I ControiAdded 
-} ControiRemoved 
You can select an event using the Prope11ies window in the Fonn Designer. 
Click on the form to sh01r its properties in the Properties window and click on 
the Events button (Figure 6.15) to display the available events (Figure 6.16). 
The default event appears selected. but you can double-click any other 
event to create its event procedure. You also can select a previously written 
procedure from the drop-down list for any event. When you want to switch 
the Properties Moindow back to viewing properties. click on the Properties 
button. 
Properties button 
Events button 
.q. x 
(ApplicationSett 
(DataBindings) 
~~~~§@!-•••• Summaryform 
Accc:ptButton 
(none:) 
AccessibleDescr 
AccessibleNamt 
AccessibleRole Default 
AllowOrop 
False 
AutoScaleMode Foot 
AutoScroll 
False 
_L!ultoScroiiMar i 0 0 
(N.ame) 
Jndicotes the nome used in code t o 
identify the object. 
Fign•· e 
6 . 15 
Click on the Events button in 
the Properties window to ue 
the list of possible events for 
which to write a procedure. 

C 
II 
A 
1• 
'I' 
" 
ll 
G 
Properties 
• /I. X 
Summaryform System.Windows.Forms .. 
I ~;" It DJ liD 7il 
HelpRequested 
. 
l01e\1odeCh•ng 
lnputlanguage( 
Inp u tl~ngu ogc:( 
KeyDown 
§: 
KeyPress 
KeyUp 
l ayout 
Leave 
IM 
B 
LocationChanot 
T 
load 
Occurs whenever the: user ~ood s the form. 
FiJtttr e 
G . IG 
Double-clid· on the euent to 
create an empl.y event 
procedure. 
Variables and Constants in Multiform Pr~jects 
\Vhen you have multiple fonns in a project. the scope. access level. and life-
time of the vruiables and constants become a little more complicated. If you 
wru1t module-level variables to be available in more than one form in a project. 
you must declare them as Friend or Public. not as Pri vate. 
Example 
Fr iend GrandTotalDecimal As Decimal 
Scope 
Chapter 3 defined scope as the area of the program that can "see" and "use" 
the variable or constaJlt. To expaJld the defmition of scope for multiform proj-
ects: Scope is the set of statements that can access a variable or constant with-
out qu.alifying its name. For example. if a variable is declared as Friend or 
Public in one form, another fonn can refer to that variable only by adding the 
form name (qualifying the name). 
Example 
In BillingForm: 
Friend GrandTotal Decimal As Decimal 
In SununruyForm: 
GrandTotalTextBox. Text 
BillingForm. GrandTotal Dec imal .ToString( "C") 
263 

264 
v 
S 
l l 
,\ 
I. 
C 
Multiform Projects 
Access Level 
Access level specifies the pennission required to make use of the variable or 
constant. For example, the hands-on project for Chapter 5 used module-level 
variables for the grand total and number of customers. Those variables were de-
clared as Privat e. so they were available only to the one form. If you want to 
display the summaq infonnation on another form. which would look more pro· 
fessional, you must allow the summary fonn permission to use the variables. To 
make a variable available to other fonns, you must use either Public or 
Friend in place of Private. Use Friend to allow other forms in your project 
to access the variable: use Public to allow all other programs to access the 
va1iables (generally considered a poor practice). 
Note: The true access level of Friend is the entire assembly. rather than 
the entire project. An assembly can consist of multiple projects. In this text. all 
applications consist of a single project. so it makes sense to think of Friend ac-
cess as projectwide. 
By default, variables and constants are Private. You can use the following 
keywords to set the access level of module-level variables: 
Privat e 
Available only in the class (fonn) in which it is declared. 
Friend 
Available to all classes (forms) in the assembly (project). 
Public 
Available to all code in this project or any other. 
Examples 
Private Runni ngcountinteger As Integer 
' Accessible only by this form . 
Friend Total Oecimal As Decimal 
' Accessible by all forms in this project . 
Publi c DailyCountinteger As Integer 
' Accessible by any code in any project . 
You can use the access-level keywords only for module-level variables. Local 
and block-level variables are declared inside a procedure and are always private. 
Lifetime 
Lifetime is the period of time that a variable or constant remains in existence. 
Recall from Chapter 3 that local and block variables exist only as long as that 
procedure executes and are re-created for each execution of the procedure. 
Module and namespace variables exist as long as the application runs. 
Static Varinbles 
Another statement you can use to declare local and block-level variables is the 
Static statement. Static variables retain their value for the Hfe of the project. 
rather than being reinitialized for each call to the procedure. If you need tore-
tain the value in a variable for multiple calls to a procedure. such as a running 
count. declare it as St atic. However. if you need to use the variable in multi-
ple procedures. declare it at the module level. (Using a static local variable is 
better thru1 using a module-level variable because it is always best to keep the 
scope of a variable as narrow as possible.) 
The Stntic Statement- Cencral Form 
~rl 
a 
~
. 
Static Identifier As Data Type 
• 

~ 
~ 
.g 
f 
C 
II 
A 
1• 
'I' 
1•: 
R 
6 
The format of the Static statement is the same as the format of the Dim state-
ment. However. Static statements can appear only inside procedures: Static 
statements never appear at the module level. 
Tb(' Static Stat('metlt-ExamplN> 
Static Personcountlnteger As Integer 
Static ReportTotalDecimal As Decimal 
26S 
~--------------------------------_. 
You never use access-level qualifiers on static variables since all static vari-
ables are local. 
Namespaces 
A V.B project is automatically assigned to a namespace. which defaults to the 
name of the project. You can view and modify the project's namespace. called 
the root narnespace. in the Project Designer (Figure 6.17). 
F i g n1• e 
6 . 17 
Change the project's root namespace in the Project Designer. 
Ch06Hands0 n x 
~--------~~=-------~---=~====~=---~==~~~~~~~-=~=---~ 
Appticcbon 
Compile 
Debug 
Referenc.es 
Re>ource;: 
SeMce; 
stgning 
Secur(ty 
Publish 
I 
Ccr:ftgJtrliol'\ fLNI.:_A ______ __ 
,,.,~.,., L[NI..:._A _______ 
, 
Assemblynamec: 
Root namespace: 
CI'06Hands0n 
Applicdion type; 
\t..:
W.:..i.:..
nd::a<.:.."".:..'.:..
Fo::r.:..
m.:..•:..:A!::.!
pp:..:
li.:..c•.:..~i.:..o.:..
n _______ 
-...Jj I 
(Ddaul": koo) 
Startup form: 
[BOOngfarm 
Assembly Tnformabon.M II 
View Windowt Settings 
~ Enable application framewonc 
Windows application frametVOrk properties 
[lJ Enoblc. XP visool sty{c.s 
F1 Mate >ingle instance applicatio.1 
0 Save i'1y.Settings on Shutdown 
Authenti<ct:ion mo.de: 
!windows 
Shutdown mcde: 
I When startup fo1m doses 
Splash screen: 
Ll S.!.p_l,_sh_Sc_r_ee_n_l _______________ -.JII 
YiewApplic11tion Events 
I 
-

266 
v 
S 
U 
1\ 
L 
If 
,, 
s 
( ' 
Mr.ltiform Projects 
Declaration Suunna•·y fot· Val"iables and Constants 
Keyw01..:l 
Dim 
Dim 
Dim 
Private 
Friend 
Public 
Const 
Const 
Const 
Friend Const 
Static 
Locat.iou o f D echu'fttiou Statement 
Module level (outside of any 
procedure). 
Note: The default for Dim is the same 
as for Private. The Pri vat e 
keyword is preferred over Di m. 
Inside a procedure but not inside a 
block such as If I End If or 
Try I End Try. 
Inside a block of code such as 
If I End If or Try I End Try. 
Module level. 
Module leveL 
Module leveL 
Module level (outside of any procedure). 
L1side a procedure. 
Inside a block. 
Module level. 
Inside a procedure 
Lifetime 
As long as the form is 
loaded. 
One execution of the 
procedlU'e. 
One execution of the 
procedure. 
As long as the form is 
loaded. 
As long as any form in 
the project is loaded. 
As long as any fom1 in 
the project is loaded. 
As long as the form is 
loaded. 
As long as the form is 
loaded. 
As long as the form is 
loaded. 
As long as the form is 
loaded. 
As long"" the form is 
loaded. 
Guidelines fo 1· Dechwing Va1·iables and Constants 
When you declare variables and constants. select the location of the declara-
tion carefully. These general guidelines will help you decide where to place 
declarations: 
l. Place all local declarations (Dim. Static) at the top of a procedure. Al-
though VB will accept declarations placed further down in the code. 
such placement is considered a poor practice. Your code will be easier 
to read. debug. modify. and maintain if you follow d1is guideline. 
2. Use named constants for any value that doesn't change during program 
execution. It is far more clear to use named constants such as 
MAXIMUM_RATE_Decimal and COMPANY_NAME_String than to 
Accesoibility 
All procedures in the class 
(form). 
Local to that procedure. 
Only the code ";thin the block. 
All procedures in the cla8S 
(form). 
Any code in the project. To 
refer to it in MY other form, 
must qualify ..-ith form name: 
FormName. Variabl eName. 
Any code in any progam. 
HoM·ever. any references from 
outside U1e form must be 
qualified. 
Any code in the fonn. (Const 
is Privat e by default.) 
Any code in the procedure. 
(Behaves Bke a read-only static 
variable.) 
Any code in the block. 
(Behaves like a read-only static 
variable.) 
Any code in the project. but 
any references fron1 outside the 
form must be qualjfjed. 
Local to that procedure. 

C
II
,\I>
'I'
I'
R 
6 
place the values into your code; and if in the future the values must be 
modified. having a constant name (at ti1e top of your code) makes the task 
much easier. 
:i. Keep the scope of variables as narrow as possible. Don't declare them 
all to be module level for convenience. There are books full of hon·or 
stories about strange program bugs popping up because the value of a 
variable was changed in an unknown location. 
4. Consider making variables local if possible. 
5. If you need to keep the value of a variable for multiple executions of a 
procedure. but don't need the variable in any other procedure. make it 
Static. 
6. If you need to use a variable both in a procedure and also in a second 
procedure called by the first procedure, declare the variable as local 
and pass it as an argument. (Refer to "Passing Arguments to Proce-
dures" in Chapter 5.) 
7. If you need to use a variable in multiple procedures, such as to add to 
the variable in one procedure and to display it in another. use Private 
module-level variables. 
8. Finally. if you need to use ti1e value of a variable in more than one form. 
declare it as Friend. 
For each of these situations. write the declaration statement and tell where it 
should appear. Assume the project will have multiple forms. 
l. The number of calories in a gram of fat (nine) to use in the calculations 
of a procedure. 
2. The name of the person with the highest score, which will be deter-
mined in one procedure and displayed in a label on a different form. 
(fhe value must be retained for multiple executions of the procedure.) 
3. The name of the company ("Bah's Bowling Service"). whiclJ will appear 
in several forms. 
4. A total dollar amount to be calculated in one procedure of a form. added 
to a grand total in a procedure of a second form. and formatted and dis-
played in a third form. 
5. A count of the number of persons entered using a single form. The 
count will be used to help calculate an average in a second fonn. 
6. The formatted version of a dollar total, which will be displayed in a text 
box in the next statement. 
Running Your Program Outside the ID~ 
Every time tllat you create and nm an application, the executable file is placed 
in the project's bin\Debug folder. You can move that .exe file to another com-
puter. place the file on the system desktop. or use it as a shortcut just like any 
other application on your system. lf you copy the executable file to another 
system. you must make sure that the computer has the correct version of the 
Microsoft .NET Framework. It is possible to download the framework for free 
from the Microsoft Web site. 
267 

268 
,. 
S 
L 
\ 
I, 
B 
.\ 
S 
( ' 
Multifonn ProjeciJ 
You also may want to change the icon for yom program. The default icon is 
a standard window image. To change the icon to something more interesting. 
open the Project Designer. On the Application tab. drop down the List for Icon 
(Figure 6.18) and browse to find another file with an .ico extension. Many icon 
files are in the Professional version of Visual Studio and in various folders in 
Windows; a few are in the text StudenlData. You must recompile (build) the 
project again after setting the icon. 
Sel.e~t a different icon for your projed in tlze Project Designer. 
ChOtikandsOn X 
Lcr:fiQ.J ruon; N/A 
An.emblynatre: 
CI'05Hands0n 
,tu.r ~ 
Root n.~mupac~ 
Chil6H•nds0n 
J<' irtnre 6.13 
ApplicGt.cm type: 
[con. 
:~w-~_~_·_M_~ 
__ 
,m_•_A~pp~i-cr._.~ 
__ n ____________ ~·~l 
~~~~~:~~~~h.lr~:'
~n~;----------------~
·J i[j 
Stertup fOI'"m' 
.. 
Setting; 
S.<Unty 
P!.sbllsh 
~iltng;;;-
~ 
EMb.le .,ppru:m:ion. fr,mt"Wotfc 
W'1n~ows application fr.ame:NOJk prop-ert~) 
0 [noble XP viluel ,tyta 
fF] Matt single insunce app~<ctioo 
Rl s-My.S.ttsngs on Sh"tdown 
Authenti<~~XI mode: 
lwinctows 
Shutdown rrode: 
I When st.artuo form closes 
I Spl.,hxsoc:lll 
. : 
Your Hands-On Programming Example 
Modify the hands-on project from Chapter 5 to include multiple forms. This 
version of the project requires four fonns: BillingF'orm, AboutFonn. Splash-
Form. and SummaryFonn. 
Note: Follow the instructions in Chapter 5. "Basing a New Project on an 
Existing Project," or Appendix C. ·'Copy and Move a Project." to begin this 
l1ands-on example. 
• 
BillingFonn: Use the BillingFOim form from Chapter 5 with a few modifi-
cations to clisplay output on new forms rather than in message boxes. 

C
II
1\
I'TE
R 
• 
Summary Form: Create a form Kith tJ1e appropriate labels and text boxes for 
the summary information. 
• 
AboutForm: Replace the MessageBox for the Help I About menu item from 
Chapter 5 with a new form using the About Box template. 
SplashF'om1: Create a splash screen using tlle plruh Screen template. 
Rt'vie"ing the Project Requirements from Chnpter 5 For the l3illingForm. the 
user enters the number of items. selects the coffee type from mclio buttons. and 
selects tlle check box for taxable items. The price for each coffee is calculated 
according to these prices: 
Cappuccino 
2.00 
2.25 
Latte 
1.75 
lee<! (either) 
2.50 
The Calculate Selection button calculates and displays the amount due for 
each item. adds t11e current item to the order. and calculates and displays the 
order infonnation in text boxes. The Clear for Next Item button clears the selec-
tions and amow1t for the single item. 
The New Order menu item clears the bill for the current customer and adds 
to the totals for the summary. The Summary menu item shows the summary form 
that displays the total of all orders. the average sale amount per customer, and 
the number of customers. 
The Edit menu contains options that duplicate tlle Calculate and Clear but-
tons. The Font and Color options change the contents of the subtota l. tax, and 
total text boxes. 
The About selection on tlle Help menu displays the About box. which con-
tains information about the program. 
f ile 
~dit 
.t:tew Order 
,Summary 
EKit 
lllanuiu~ tlw Projt••·t 
~alculate Selection 
Clear l tem 
font .. . 
C.Q.lor .. . 
Help 
About 
Sketch the four forms (Figure 6.19). The users approve and si£n off the forms 
as meeting their needs. 
Plan the Objects and Properties for t11e Billing Fonn See the hands~onexercise 
for Chapter 5 for tlle objects and properties of BillingForrn. which are un~ 
changed for this project. 
Plan the Procedures for the Billing Form Most of Lhe procedures for Billing-
Form are unchanged from the project in Chapter 5. You must change tlle ac-
cessibility of the variables that mu.st be displayed on tlle summary form: you 
269 

270 
S 
l 
\ 
L 
It 
\ 
.. 
C 
Multifom• Proj<c~ 
The planning sketches oftheformsfar the hands-on programming example. a the billing form: b. the summary form: c. the 
splash form; and d. tl1e About box. 
Bllllngform ............. 
Quan'UtyT~Box 
I 
TaxCheckBox 
Cll lcu i~Button 
ClearButton 
(dlsatned) 
ltemAmountTextBox 
.. 
.Elle 
Edtt t!elp I 
Order Information 
Quantity 1 
.. I 
+ - ~0 Ta~ut? 
-r-r lfalculaU 
SelectiQ!l 
. l ~lear for 
1
1 
Next Item 
- I-~ 
Item Amount ...1--l 
~ 
-
Sui1Totsl 
I 
Tax (If Takeout) I 
Total 
I 
Summaryform 
Coffee Selections 
® C<!ppucclno 
0 Espres~ 
OL~U 
0 lced Latte 
I 
0 Iced Caj?pucclno .._ 
I 
I 
I 
i+-1-
r-
1.-f-
GroupBox1 
GroupBox2 
CappucclnoRadloButton 
EspressoRadiOButton 
LatURadloButton 
Iced LatURadloButton 
lcedCappucclnoRadloButton 
GroupBox3 
Sui1TotaiTextBox 
TaxTextBox 
TotaiTextBox 
R 'n R. for R.ead l~ and Refreshment 
b. 
Total Sales 
Average Sales 
Numl:>er of Customer& 
~--~ ~t-----f- TotaiSalesTextBox 
~~~~::====t 
AverngeSalesTextBox 
~ 
Numl:>erCustomersTextBox 
I QO&e 1~----+- CloseBut ton 
also must change the variable used for the average (AverageDecimal) to a 
module-level Friend variable. 
Ohjec l 
Procedu1·e 
SummaryTooiStripMenullem 
Click 
AbouiTooiSiripMenullem 
Click 
AcHons 
If currenl order not added lo totals 
Call NewOrclerToolStripMenultem_ Ciick. 
Calculate the average (in a Friend variable). 
Display the summary form. 
Display the About Box form. 

C
ll
i\
1°T
t:
R 
c. 
d. 
Title 
VerGion 
Cop:yrlght 
DeGCrlptlon 
R 'n R for Reading and 
RefrtGhment 
VerGion 
Copyright 
Plan the Objects and Properties for the SummaJ) Form 
O bject 
Pro JJerty 
Selling 
Summary Form 
Name 
SummaryFonn 
Text 
R 'n R Billing Summary 
AcceptBullon 
CloseButton 
Labell 
N•me 
Wbell 
Text 
Total Sales 
TotaiSalesTextBo.' 
Name 
1'otalSalesTe.,tBox 
Read Only 
True 
TabStop 
F..Jse 
LnLel2 
Na.me 
Wbel2 
Text 
Average Sale!! 
AverageSalesTe.,tBox 
Name 
AverageSalesTextBox 
Read Only 
True 
TabSiop 
F•lse 
l.abel3 
Name 
Wbel3 
Text 
Number of Cu.tomers 
271 
t' ij!are 6 . 19 
(continued) 
QK 

272 
,. 
S 
l 
\ 
L 
It 
\ 
s 
O bject 
N umlx:rCuslomersTextBox 
Close Button 
P ropcr·ly 
Nome 
Read Only 
TohS top 
Name 
Text 
Plan the Procedul't'" for the Summary Form 
O bject 
P1·oced m·e 
AcUons 
Setting 
Numlx:rCustomell!Text Box 
True 
Faloe 
CloseButton 
&Cicse 
t: 
Multifoml Project. 
Summary Form 
Ac tivated 
A•sign values from billing form to text boxes 
Close8utton 
Clic k 
Close this fom1 
Plan the Objects and Prop>'rtie' for the "plash Screen Use the Splash Screen 
template and consider changing the graphic. Fill in the Assembly Information in 
the Project Designer so that the screen fields are filled when the form displays. 
Plan the Procedures for the Splash Screen If you use the Splash Screen tem-
plate. you don't need to write any code for the fonn. 
Plan the Objects and Propertie' for the About Box Use the About Box template 
and consider changing the graphic. Fill in the Assembly Information in the 
Project Designer so that the screen fields are filled when the form displays. 
Plan I he Procedures for the About Box lf you use the About Box template. you 
don't need to write any code for the form. 
Plan the Project Properties Changes 
Splash Screen Set to the name of your splash screen form in the Project 
Designer. 
A"sembly b1fonnatio n 
Fill in fields to display in the splash screen and the 
About box. 
\':rite the Project Follow the instructions in Chapter 5. "Basing a New Project 
on an Existing Project." or Appendix C. "Copy and Move a Project." to base 
this project on Ch05Hands0n. lf you have not written Ch05Hands0n. do so 
first before beginning this project. 
Follow the sketches in Figure 6.19 to create the forms. Use the Splash 
Screen and About Box templates. Figure 6.20 shows the completed forms. 
Set the properties of each of the objects according to your plan. 
Write the code. Working from the pseudocode. write each procedure. 
Make sure to change the module-level variables needed for the summary 
form to Friend access level. Move the declaration of AverageDecimal from 
the local level to the module level. 
When you complete the code. use a variety of data to thoroughly lest the 
project. 

C
ll
i\
11
T
E
R 
~ R 'n R for Re.oding 
1n Ref:eshment 
~ 
{ clit 
l::!clp 
.. 
Ordellrtonnaliotl 
Quarnly -, -
LJ Ta~eot.t? 
!;_alculale 
Selection 
len !~mount 
SubTotal 
Tax (!TaiGotJ) 
Total 
•} R 'n R 8Jiiog Sunmo.y 
4> 
R 'n R for Reading and Refreshment 
b. 
TQ(cl Sol~ 
Alerar;,e Sales 
JUnber ai Custon>efS 
Coffee SeleaJora 
0 Catloua:ino 
! E!P<eS!Q 
U(te 
) !ced Ui:te 
.) Iced C.:ep..ctino 
c. 
Ven;sot"~ l 000 
COf¥1!1'11 s 2010 
R'nRfa< RA<i'9ondAI!f"""""' 
Cdcu1* 
~obs fw R 'h R For fbd'rg end 
Aef<e:hrcnt 
Fl!;!are 6 . 20 
The completed fonm for the 
han<h-on programming 
example. a. the billing form: 
213 
b. the .1ummary form: c. the 
3plmh screen: and d. the About 
box. 
R 'n R for Reading 
and Refreshment 
\l@fSI!cn 100 
CoDYnohl02010 

274 
S 
l 
\ 
L 
n 
' 
" 
C 
Multiform Proj<ctJ 
The Project Cotliug Solutlou 
llillingFonn 
'Program Name: 
'Programmer: 
'Date: 
'Description: 
Ch06Hands0n 
Bradley/Millspaugh 
June 2010 
This project calculates the amount due 
based on the customer selection 
I 
and accumulates summary data for the day. 
Incorporates menus and common dialog boxes, 
which allow the user to change the font and 
color of controls. 
This version of the project includes a splash form, 
a summary form, and an About box form. 
'Folder: 
'Form: 
Ch06Hands0n 
BillingForm 
Public Class BillingForm 
' Declare projectwide variables. 
Friend GrandTotalDecimal, AverageDecimal As Decimal 
Friend CustomerCountlnteger As Integer 
' Declare module-level variables. 
Private SubTotalDecimal, TotalDecimal As Decimal 
' Declare constants. 
Const TAX_RATE_Decimal As Decimal = O.OBD 
Const CAPPUCCINO_PRICE_Decimal As Decimal = 2D 
Const ESPRESSO_PRICE_Decimal As Decimal = 2.25D 
Const LATTE_PRICE_Decimal As Decimal= 1.75D 
Const ICED_PRICE_Decimal As Decimal = 2.5D 
Private Sub CalculateButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles CalculateButton.Click, 
CalculateSelectionToolStripMenuitem.Click 
' Calculate and display the current amounts and add t o totals. 
Dim PriceDecimal, TaxDecimal, ItemAmountDecimal As Decimal 
Dim Ouantityinteger As Integer 
' Find the price. 
If CappuccinoRadioButton.Checked Then 
PriceDecimal = CAPPUCCINO_PRICE_Decimal 
Elseif EspressoRadioButton.Checked Then 
PriceDecimal = ESPRESSO_PRICE_Decimal 
Elseif LatteRadioButton.Ohecked Then 
PriceDecimal = LATTE_PRICE_Decimal 
Elseif IcedCappuccinoRadioButton .Checked Or 
IcedlatteRadioButton.Checked Then 
PriceDecimal 
ICED_PRICE_Decimal 
End If 
' Calculate the extended price and add to order total. 
Try 
Ouantityinteger = Integer.Parse(OuantityTextBox.Text) 
ltemAmountDecimal = PriceDecimal * Ouantityinteger 
SubTotalDecimal += ItemAmountDecimal 
If TaxCheckBox .Checked Then 
' Call a function procedure. 
TaxDecimal = FindTax(SubTotalDecimal) 

C 
U 
A 
P 
T 
~ R 
6 
Else 
TaxDecimal = 0 
End If 
TotalDecimal = SubTotalDecimal + TaxDecimal 
ItemAmountTextBox.Text = ItemArnountDecimal.ToString('C') 
SubTotalTextBox.Text = SubTotalDecimal.ToString( 'N") 
TaxTextBox.Text = TaxDecimal.ToString("N") 
TotalTextBox.Text = TotalOecimal.ToString( "C') 
' Allow change for new order only. 
TaxCheckBox.Enabled = False 
' Allow Clear after an order is begun. 
ClearButton.Enabled = True 
ClearltemToolStripMenultem.Enabled = True 
NewOrderToolStripMenultem.Enabled = True 
Catch OuantityException As FormatException 
MessageBox.Show( ' Ouantity must be numeric. ' , "Data entry error', 
UessageBoxButtons.OK, MessageBoxlcon.lnformation) 
With OuantityTextBox 
.Focus() 
.SelectAll() 
End With 
End Try 
End Sub 
Private Function FindTax(ByVal AmountDecimal As Decimal) As Decimal 
' Calculate the sales tax. 
Return AmountDecimal * TAX_RATE_Decimal 
End Function 
Private Sub ClearButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ClearButton.Click, 
ClearltemToolStripMenultem.Click 
' Clear the appropriate controls. 
CappuccinoRadioButton.Checked = True 
ItemAmountTextBox.Clear() 
With OuantityTextBox 
.Clear() 
.Focus() 
End With 
End Sub 
Private Sub NewOrderToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles NewOrderToolStripMenultem.Click 
' Clear the current order and add to the totals. 
Dim ResponseDialogResult As DialogResult 
Dim MessageString As String 
' Confirm clear of the current order. 
MessageString = ' Clear the current order figures?' 
ResponseDialogResult = MessageBox.Show(MessageString, "Clear Order' , 
MessageBoxButtons.YesNo, MessageBoxicon .Ouestion, 
MessageBoxOefaultButton.Button2) 
If ResponseDialogResult = DialogResult .Yes Then 
' User said Yes; clear the screen fields. 
ClearButton_Click(sender, e) 
SubTotalTextBox .Text = 
TaxTextBox.Text = 
TotalTextBox.Text = •• 
275 

276 
\ 
S 
l 
\ 
L 
It .\ 
.. 
£ 
Multifom l Project. 
' Add to the totals only if not a new order/ customer. 
If SubTotalDecimal <> 0 Then 
GrandTotalDecimal += TotalDecimal 
CustomerCountinteger += 1 
' Reset totals for the next customer. 
SubTotalDecimal = 0 
TotalDecimal 
0 
End If 
' Clear the appropriate display items and enable the check box. 
With TaxCheckBox 
.Enabled 
True 
. Checked = False 
End With 
Cl earButton.Enabled = False 
ClearitemToolStripMenu!tem.Enabled = False 
NewOrderToolStripMenuitem.Enabled = False 
End If 
End Sub 
Private Sub SummaryToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles SummaryToolStripMenultem.Click 
' Calculate the average and display the totals. 
Dim MessageString As String 
If TotalDecimal <> 0 Then 
' Make sure the last order is counted. 
NewOrderToolStripMenultem_Cli~k(sender, e) 
' Pass incoming arguments to the called procedure. 
End If 
If CustomerCountinteger > 0 Then 
' Calculate the average. 
AverageDecimal = GrandTotalDecimal I CustomerCountinteger 
SummaryForm.ShowD1al og() 
Else 
MessageString = "No sales data to summarize . " 
MessageBox.Show(MessageString, 'Coffee Sales Summary' , MessageBoxButtons.OK, 
MessageBox!con.Information) 
End If 
End Sub 
Private Sub ExitToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitToolStripMenultem.Click 
' Terminate the project. 
Me.Close() 
End Sub 
Private Sub AboutToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles AboutToolStripMenultem.Click 
' Display the About Box form. 
AboutBox1.ShowDialog() 
End Sub 
Private Sub FontToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles FontToolStripMenultem.Click 
' Allow the user to select a new font for the summary totals. 
With FontDialog1 
.Font = Me.SubTotalTextBox.Font 
.ShowDialog() 

G 
SubTotalTextBox .Font = .Font 
TaxTextBox.Font = .Font 
TotalTextBox.Font = .Font 
End With 
End Sub 
Private Sub ColorToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ColorToolStripMenuitem.Click 
' Allow the user to select a new color for the summary totals. 
With Color0ialog1 
.Color = SubTotalTextBox.ForeColor 
. ShowDialog () 
SubTotalTextBox.ForeColor = .Color 
TaxTextBox.ForeColor = .Color 
TotalTextBox.ForeColor = .Color 
End With 
End Sub 
End Class 
Summary Form 
'Program Name: 
'Programmer: 
'Date: 
'Oeser iption: 
'Folder: 
'Form: 
Ch06HandsOn 
Bradley/Millspaugh 
June 2010 
This project calculates the amount due 
based on the customer selection 
and accumulates summary data for the day. 
Incorporates menus and common dialog boxes, 
which allow the user to change the font and 
color of controls. 
This form displays the sumrrary totals. 
Ch06HandsOn 
sunrnaryForm 
Public Class SummaryForm 
Private Sub summaryForm_Activated(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MyBase.Activated 
' Get the data. 
TotalSalesTextBox.Text = BillingForm.GrandTotalOecimal.ToString( ' C' ) 
AverageSalesTextBox.Text = BillingForm.AverageOecimal.ToString( ' C' ) 
NumbercustomersTextBox.Text = BillingForm.customercountinteger.ToString() 
End Sub 
Private Sub CloseButton_Click(ByVal sender As System.Object, 
ByVal e As System .EventArgs) Handles CloseButton .Click 
' Close this summary form . 
Me. Hide() 
End Sub 
End Class 
SplashScreen 
Note: All of the code is generated by the template. 
About Box 
Note: All of U1e About Box code is generated by the template. 
277 

278 
\ 
s 
l 
.\ 
I. 
u ,\ 
s 
t ' 
Muilifom• Project. 
l. Projecl.s may need more tlum one form: there is virtually no limit to the 
number of fonns that can be used within a single project. 
2. Forms used for one project can be added to another project. Forms also can 
be removed from a project. 
3. An About box. which typically contains infonnation about the version of an 
application and the programmer and copyrights. may be created by adding 
a new form. VB has an About Box template fonn that you can use to create 
an About box. 
4. A s plash screen may be displayed while a program loads. VB provides a 
Splash Screen template that you can use to create a new s plash screen fonn. 
5. Both the Splash Screen and About Box templates automatically insert in-
fonnation that you can enter in the Assembly Information dialog box. 
6. The Show (modeless) and ShowOialog (modal) methods are used to display 
a form on tl1e screen. 
7. A fonn displayed as modal requires a response from the user: it must be 
closed or unloaded before any execution continues. \'\Then a form is displayed 
as modeless. tl1e user can switch to another fom1 witl1out closing the fom1. 
8. The Form. Hide method hides the fonn but keeps it loaded in memory: the 
Form. Close meiliod removes a modeless fonn from memory: the Form. Close 
method for a modal fom1 actually hides the form rather than closing it. 
9. The Form. Load event occurs once for each loaded form; the Form. 
Activated event can occur multiple times-each time the form is shown. 
10. You can write event procedures for any of the form's events. 
11. Variables that are visible to all forms in a project are declared using the keyword 
Friend. The Private keyword sets ilie aocess level to tile current f01m. and the 
Public keyword makes the variable available to all classes in aU programs. 
l2. To refer to a Friend variable in a different form. use the form name. a pe-
riod. and ilie variable name. 
13. Variables declared with the keyword Static retain their values for multi-
ple calls to the procedure in which tl1ey are declared. Static variables are 
local or block-level. 
14 . Each project has a default namespace. called the root rwmespace. You can 
change the root namespace for a VB project in the Project Designer. which 
you display either by double-clicking My Proj9ct in the Solution Explorer or 
selecting Project I Proj9ctNsme Properties. 
15. You can run a project outside the VS IDE by moving and nmning the .exe file. 
TI1e target machine must have the correct version of the .NET Framework 
installed. 

C
ll
i\
I'
TE
I& 
accesslevel 264 
About box 253 
assembly infom1ation 255 
Friend 264 
Hide method 260 
modal 259 
rnodeless 259 
namespace 265 
6 
Private 264 
PUbliC 264 
scope 263 
Show method 259 
ShowDialog method 259 
splash screen 256 
startup form 250 
Static 264 
l. List some of the items generally found in an About box. 
2. What is the purpose of a splash screen? 
3. II'!Jat is the term used for the first form to display in a project? 
4. How can you choose a diiTerent form as the startup form after the project 
bas been created? 
5. Explain how to include an existing form in a new project. 
6. II'!Jat is the assembly information? How can you change the information? 
How can you use the information? 
7. Explain the difference between modal and nwdelesJ. 
8. How does the snow method differ [rom the SllowDHlog method? 
9. Explain when the form's w ad event and Activated event occur. ln which 
event procedure should you place code to initialize screen fields? Is the 
answer always the same? 
10. Explain the differences between Public. Private. and Friend access 
levels. 
ll. \\'lull is a static variable? When would it be useful! 
12. How can you run a compiled VB program outside the Visual Studio JOE? 
Note: For help in basing a new project on an existing project. see "Copy and 
Move a Project" in Appendix C. 
6.1 Modify Programming Exercise 5.5 (the flag viewer) to include a splash 
screen and an About box. 
Menw 
file 
E~it 
Qountry 
J.!.nited States 
~an ada 
J.apan 
.MeXiCO 
Q.isplay 
!itle 
~ountry Name 
f.rogranuner 
Help 
AIJOUt 
6.2 Create a project that will produce a summary of the amounts due for Pat's 
Auto Repair Shop. Display a splash screen first; then display the main fonn. 
~·hich has only the menus.lf you 1~ish. you can add a graphic to the form. 
279 

280 
Main. Form Menw 
f.rocess 
J.ob Information 
Job Information 
s 
l ' 
\ 
•. 
!felp 
About 
n 
\ 
s 
TI1e Job Information menu item will display the Job Information form. 
C 
Multiform Projecu 
Job Information Form The Job Lnfonnation form must have text boxes 
for the user to enter the job number, customer name. amount charged for 
pa1ts. and the hours of labor. Include labels and text boxes for Parts. 
Labor. Subtotal. Sales Tax. and Total. 
Include buttons for Calculate, Clear. and OK. 
The Calculate button finds the charges and displays tl1em in controls. 
The tax rate and the hourly labor charge should be set up as named con-
stants so tllat they can be easily modified if either changes. Current 
charges are $50 per hour for labor and 8 percent (.08) for the sales lax 
rate. Sales lax is charged only on parts. not on labor. 
The Clear button clears the text boxes and re~ets the focus in the first 
text box. 
The OK button closes tlle Job Information form and displays the main 
form. 
6.3 Modify Programming Exercise 6.2 so that summary infonnal"ion is main-
tained for the total doUar amount for parts. labor. sales tax. and total for 
all customers. 
Add a Summary menu item under the Process menu with a separator 
bar between the two menu items. When the user selects the Summary 
menu item. display the summary infom1ation in a ummary form. The 
Summary form should have an OK button that closes the Summary form 
and returns the user to tlle main fonn. 
6.4 A battle is raging over the comparative taste of Prune Punch and Apple 
Ade. Each taste tester rates the t11•o drinks on a scale of I to 10 (10 being 
best). The proof of the superiority of one over the other will be tl1e aver-
age score for the two drinks. 
Display a splash screen and then the main fom1. The main fonn has 
only the menus: you can add a graphic if you wish. 
Main Form Men.UJ 
file 
!few Test er 
,S.ummary 
New Tester Menrt Item 
!felp 
About 
The New Tester menu item displays a form that inputs the test results for 
each drink. The form contains an OK button and a Close button. 
When the user clicks the OK button. add the score for each type of 
drink to tl1e drink's total. clear the text boxes. and reset the focus. Leave 
the fom1 on the screen in case the next teste.r is ready to enter scores. If 
eitl1er score is blank when tl!e OK button is pressed. display a message in 
a message box and reset the focus to tile box for the missing data. 

C
ll
t\1'
1'E
II 
'lne Close button retums to the main form without performing any cal-
culation. 
Summary Menu ft£m. 
'lne Summary item displays a form that contains the current results of the 
ta~te lest. Tt should display the winner. the total number of taste testers. 
and the average rating for each drink. The f01m contains an OK bullon 
that returns to the main form. (TI1e user will be able to display the sum-
mary at any time and as often as desired.) 
Abom Bo:r 
The About box should display information about the program and the pro-
grammer. Include an OK button that returns the user to the main form. 
6.5 
Modify Programming Exercise 5.1 (piecework pay) to add a Splash form. 
an About box. and a Summary form. Add a slogan and a logo that the user 
can hide or display from menu choices on the main fonn. 
Splash Form 
The Splash form must appear when the project begins execution. Jt 
should display the project name. programmer name. and at least one 
graphic. 
Abom Bo:r 
The About box should have the program name. version number. and pro-
grammer name, as weU as a graphic and an OK button. It must be dis-
1-'layoo as Jltuual. 
Summary Form 
'n1e Summary fonn should display the summary information. Note that in 
Chapter 5 the summary information was displayed in a message box. You 
must remove the message box and display the summary information only 
on the Summary form. 
Slogan. and Logo 
Make up a slogan for the company. such as "We're Number One" or "We 
Do Chicken Right.'' ror the logo. you can use an icon or any graphic you 
have available. or create one yourself with a draw or paint program. 
TI1e Slogan and Logo menu choices must toggle and display a check 
mark when selected. For example. when the slogan is displayed. the 
Slogan menu item is checked. If the user selects the Slogan command 
again. hide the slogan and uncheck the menu item. The Slogan and Logo 
conunands operate independently: that is. the user may select either. 
both. or neither item. 
When the project begins. the slogan and logo must both be displayed 
on the main form and their menu items appear checked. 
281 

282 
\ 
S 
l 
\ 
L 
IC 
\ 
S 
t ' 
Multiform Project. 
VB ~lall Ortler 
Modify the VB Mail Order project from Chapter 5 to 
include a splash screen. an About box. and a summary 
form. Include an image on both the Splash fom1 and 
the About box. 
VB Auto l;erater 
Create a project that uses four fonns. Add the form 
from the Chapter 5 VB Auto case study and create a 
main fonn. a splash screen. and an About box. 
Main. Form: The main form should display a large la-
bel with the 1\'ords: "Valley Boulevard Auto Center -
Meeting aU your vehicle's needs" and appropriate 
image(s). 
Main Form Menus 
Eile 
Input .S.ale 
E~it 
.Edit 
.C.olor .. . 
font .. . 
Help 
About 
The Color and Font items should allo11· the user to 
change the large label on the form. 
111e Input Sale item should display the form from 
Chapter S. 
VIdeo Bonanza 
Modify the Video Bonanza project from Chapter 5 to 
separate t11e project into multiple forms. Jnclude a 
swnmary form. a splash screen. and an About box. 
Very Very BoarciH 
Modify the Very Very Boards project from Chapter 5 to 
separate t11e project into multiple forms. include a 
summary form. a splash screen, and an About box. 

Lists, Loops, and 
Printing 
I . Create and use list boxes and combo boxes. 
2. Differentiate among the available types of combo boxes. 
3 . Enter items into list boxes using the Items collection in the Properties 
window. 
4. Add and remove items in a list at run time. 
5. Determine which item in a list is selected. 
G. Use the ltems.Count property to determine the number of items in a 
list. 
7. Display a selected item from a list. 
8. Use Dot Loops and For /Next statements to iterate thro~ a loop. 
9 . Tenninate a loop with the Exit statement. 
Skip to the next iteration of a loop by using the Continue statement. 
Send information to the printer or the Print Preview window using the 

284 
v 
S 
l l 
,\ 
I. 
C 
Li.rs. Loops. ami Pru1ting 
Often you will want to offer the user a list of items from which to choose, which 
can both simplify data entry and eliminate eJTors. You can use the Windows 
ListBox and ComboBox controls to display lists on a fonn. You may choose to 
add items to a list during design time. during run time. or perhaps a combina-
tion of the two. Several styles of I ist boxes are available: the style you use is de-
termined by design and space considerations as well as by whether you will 
allow users to add items to the list. 
List Boxes and Combo Boxes 
Both list boxes and combo boxes allow you to have a list of items fn>m which the 
user can make a selection. Figure 7.1 shows the toolbox tools for creating the 
conb·ols; Figme 7.2 shows several types of list boxes and combo boxes, includ-
ing simple list boxes. simple combo boxes. drop-down combo boxes. 
and drop-down lists. The list boxes on the left of the fotm in Figure 7.2 are all 
created witJ1 the list box tool; the boxes on the right of the form are created with 
the combo box tool. Notice the three distinct styles of combo boxes. 
Lisi.Box controls and Combo Box couu·ols have most of the same prop-
erties and operate in a similarfashion. One exception is that a combo box con-
trol has a DropOownStyle property. which determines whether or not the list 
box also has a text box for user entry and whetl1er or not the list will drop down 
(refer to Figure 7.2). 
List boxes and combo boxes have a great feature. If the box is too small to 
display all the items in the list. a scroll bar automatically appears. You do not 
have to be concerned with the location of the scroll box in the scroll bar: the 
~<r.rolling j,. hancilP.ci mJt.omatirally. 
\Vhen you add a list control to a form. choose the style according to the 
space you have available and how you want the box to operate. Do you want the 
user to select from an existing list? If so, use a simple list box or a drop-down 
list (ComboBox DropDownStyle = DropOownList). Do you want the user to be 
able to type a new entry if necessary? In this case. use one of the two styles with 
Toolbox 
• 
~ X 
~ All Windows forms 
4 Common Controls 
1: 
~ 
Pointer 
@ 
Button 
0 
CheckBox 
lrn CheckedlistSox 
ComhoBox ~~ Combo3ox 
'&I 
Date TimePicker 
A 
L;:~bcl 
A 
Linklabel 
·~"~1~ 
ListBox 
l!':!~ 
ListView 
~!! 
[!::] 
Ma;kedT extBox 
m MonthCalendar 
:;;;1 
Notifylcon 
F i g u re 7. 1 
Use the listBox tool and 
Combo Box tool to create list 
boxes and combo boxes on your 
forms. 

C 
II 
A 
1• 
'I' 
" 
ll 
7 
Figure 7.2 
Various styles of list boxes and combo boxes. 
a.SJ List Boxes and Combo Boxes 
l' c::~ H21I...G-l 
List boxes 
b~OOdoo 
I 
3 
Turkey 
v
: Bananas 
-
Cookies 
. 
p 
Orange Juioe . 
Craef-ers 
rE 
·1 Soda 
'\" 
Cheese 
Plltato chips 
~Cantaloupe 
[}ip 
Cherries 
Cake 
'\" 
Kiwi 
Peaches 
Plums 
I 
_:j 
Strawberr~s 
an added text box: the drop-down combo box (DropDownStyle =Drop Down) or 
the simple combo box (DropDownStyle = Simple). 
At design time, the behavior of list boxes and combo boxes differs. For list 
boxes. the designer displays the Name propetty in the control: for combo boxes. 
the Text property displays. which is blank by default. Don't spend any time try-
ing to make a list box appear empty during design time; the box will appear 
empty at run time. Combo boxes have a Text property. which you can set at de-
sign time if you wish. List boxes also have a Text property, but you can access 
it only at run time. 
The Items CoUccl:ion 
The list of items that displays in a list box or combo box is a coUectiou. 
Collections are objects that have properties and methods to allow you to add 
items, remove items. refer to individual elements. count the items, and clear 
the collection. In the sections that follow. you 11illleam to maintain and refer to 
the Items collection. 
You can refer to the items in a collection by an index, which is zero based. 
For example. if a collection holds 10 items. the indexes to refer to the items 
range from 0 to 9. To refer to the first item in the Items collection. use Items(O). 
FiUing a List 
You can use several methods to fill the Items collection of a list box and combo 
box. If you know the I ist contents at design time and the list never changes. you 
can define the Items collection in the Properties window. If you must add 
items to the list during program execution, you will use the Items .Add or 
I terns. Insert method in an event procedure. In Chapter 11 you will learn to 
Drop-down combo 
box (User can type i n 
text box at the top.) 
Simple combo box 
(User can type in 
text box at the top.) 
Drop-down list 
(No text box at top ~ 
user cannot type new 
text at mn time.) 
285 

286 
v 
S 
l l 
,\ 
L 
(" 
Lists. Loops, and Printing 
fil I a list from a data file on disk. This technique allows the list contents to vary 
from one run to the next. 
Using the P1·operties Window 
The Items prope1·ty. which is a collection, holds the list of items for a list box 
or combo box. To define the ftems collection at design time. select the control 
and scroll the Properties aindow to the Items prope1ty (Figure 7.3). Click on 
the ellipses button to open the String Collection Editor (Figure 7 .4) and type 
your list items. ending each line with the Enter key. Click OK when finished. 
You can open the editor again to modify the list. if you wish. 
Properties 
• !I X 
FruitUstBox System.\.Vindows.Forms.Li • 
~: [~ j I ii!~ I;/ 1,;1 
lntegraiHeight 
True 
Item Height 
14 
l!l!nf 
(Collection) 
~ location 
57, 1.42 
LockEd 
f alse 
~ Margin 
3, 3, 3, 3 
~ Ma:(imumSh:e 
0, 0 
~ MioimumSize 
0, 0 
Modifiers 
Public 
MultiColumn 
False 
RightToldt 
No 
_.Sc.mUAiw.a~~isi Eals 
Items 
The items in the li;t box 
String CoiiKtion £ditor 
Ento;rthe itri ng~ in the co!li'::t1on (one Fer; line): 
Cmtaloupe 
Chc:nies 
Kiw1 
Pe<tche!: 
Plums 
Strowb:n ie;l 
Using the ltems.Ad£L 1\'letbod 
A 
~~ 
E 
-
-
Open the String 
Collection Editor 
by clicking here 
0~ II 
Cancel 
To add an item to a list at nm time. use the Items .Add met-bod. You can 
choose to add a variable. a constant, the contents of the lext box at the top of a 
combo box. or the Text property of another control. 
Select the Items property of a 
list box to enter the list items. 
Fi g n••e-
7 . 4 
In the String Collection Editor 
that opens. type each list item 
and press Enter to go to the 
next line. 

C 
II 
A 
1• 
'I' 
" 
ll 
7 
The hems.Atld l\1etltod-General Form 
Q'~l 
5 ~ 
Object.Items.Add(ItemValue) 
:r 
~ 
Item Value is the string value to add to the list. If the value is a string literal, en-
close it in quotation marks. 
TI1e new item generally goes at the end of the list. However. you can alter 
the placement by setting the control's So !'led pt·opel·ty to True. Then the new 
item will be placed alphabetically in the list. 
'l11e ltems.Add 1\'lethod-Ex:uuples 
SchoolslistBox . Items.Add( "Harvard") 
SchoolslistBox. Items.Add ( "Stanford") 
SchoolsListBox. Items.Add(SchoolsTextBox .Text) 
MajorsComboBox.Items .Add( MajorsComboBox .Text) 
MajorsComboBox. Items.Add(MajorString) 
When the user types a new value in the text box p01tion of a combo box, that 
item is not automatically added to the list. If you want to add the newly entered 
text to the list. use the Items .Add method: 
CoffeecomboBox.Items.Add(CoffeeComboBox.Text) 
or the preferable form: 
With CoffeecomboBox 
.Items .Add( .Text) 
End With 
You also can add the contents of a text box to a list box. 
SchoolsListBox . Items.Add(SchoolTextBox.Text) 
Using the ltems.J nsert Metbotl 
You can choose the location for a new item added to the list. In the 
Items. Insert method. you specify the index position for the new item. 
The ltems.l usel'l l\fetbod-Ceneral Fo1·m 
Object. Items .Insert(IndexPosition, ItemValue) 
The index position is zero based. To insert a new item in the first position. use 
index position = 0. 
The ltems.l nsert Method-Examples 
SchoolslistBox. Items. Insert (0, "Harvard") 
MajorscomboBox . Items.Insert(1, MajorscomboBox. Text) 
287 
f 
~-----------------------------------

288 
v 
S 
l l 
,\ 
I. 
C 
Lists. Loops. and Printing 
liyou choose the index position of an item using the Insert method. do not set 
the list control's Sorted property to True. A sorted list is always sorted into al-
phabetic order. regardless of any other order that you request. 
T he Selectedlndex P•·ope1·ty 
When a project is numing and the user selects (highlights) an item from the 
list. the index number of that item is stored in d1e Selectedfm lex pt·opet·ty 
of the list box. Recall that the index of the first item iJ1 the list is 0. If no list 
item is selected. the Selectedindex propet1y is set to negative 1 (- 1). 
You can use d1e Selectedindex propet1y to select an item iJ1 the list or de-
select all items in code. 
Examples 
' Select the fourth item in l ist. 
CoffeeTypesListBox.Selectedindex 
3 
' Deselect all items in list . 
CoffeeTypesListBox .Selectedindex = - 1 
T he Ite ms.Count Prope11.y 
You can use the Count property of the Items collection to determine the num-
ber of items in the list. We will use the h ems.Comll pt·opet·ty later in this 
chapter to process each element in the list. Items. Count is also handy when you 
need to display the count at some point in your project. 
Remember: Items. Count is always one more than the highest possible Se-
lectedlndex. since the mdexes begm '~ith 0. For example. if there are five items 
in a list. Items. Count is 5 and the highest iJ1dex is 4 (Figure 7.5). 
I tenu;.Selecletlluclex 
ltems.Cotwt • 5 
(0) 
Harvard 
(1) 
Stanford 
(2) 
University of California 
(3) 
Miami University 
(4) 
University of New York 
Examples 
Totalltemslnteger = ItemsListBox .Items.count 
MessageBox.Show("The number of items in the list is " & 
ItemsListBox .Items.Count .ToString()) 
Re fe1·encing the h ems Collection 
If you need to display one item from a list. you can refer to one element of the 
Items collection. The Items collection of a list box or combo box holds the text 
of aU list elements. You specify which element you want by incluclmg an index. 
Figur t> 7.5 
For a list offwe items. the 
indexes range from 0 to 4. 

C 
II 
A 
1• 
'I' 
" 
ll 
7 
This technique can be useful if you need to display a list item in a label or on 
another form. Later in this chapter we will use the Items property to send the 
contents of the list box to the printer. 
Using tbe h ems Co!Jectiou- Ceneral Form 
Object. Items(IndexPosition) ( = Value) 
The index of the first list element is 0, so the highest index is Items.Cotmt- l. 
Note: If you use an lnde:tPosition less than 0 or greater than l tems.Count 
- L an exception will be thrown. 
You can retrieve the value of a list element or set an element to a new value. 
Using tbe h ems Co!Jection-Examples 
SchoolslistBox. Items(5) = "Uni ver sity of Califor ni a" 
Majorlabel.Text = MajorsComboBox. Items(Indexinteger) 
Sel ectedMajorlabel. Text = MajorsComboBox.Items(MajorsComboBox.Sel ectedl ndex) .ToStri ng() 
SelectedMajorlabel .Text = MajorsComboBox .Text 
To refer to the cunently selected element of a list. you can combine tl1e Items 
property and the Selected Index property: 
SelectedFlavorString = FlavorlistBox . Items(FlavorlistBox .Selectedlndex) .ToString() 
Notice the use of ToString in the previous example. When you refer to the 
Text property of a list box or combo box, the Text of the cunently selected list 
item displays. But tJ1e elements in a list are actually objects. so when you refer 
to one element in the Items collection. you must convert to string. 
You can retrieve the selected list item by refening to the Text prope1ty of 
the control: 
SelectedMajorLabel.Text = MajorscomboBox.Text 
Note: If you assign a value to a pa1ticular item, you replace the previous 
contents of that position. For example. 
SchoolsListBox.Items(O) - "My School" 
places "My School" into the first position, replacing whatever was there already. 
It does not inse11 the item into the list or increase the value in Iterns.Cow1t. 
R<'moving an IL<'m f1·om a List 
You can remove individual items from a list either by specifYing the index of the 
item or the text of the item. Use the I t erns. RemoveA t method to remove an item 
by index and the Items . Re11ove method to remove by specifYing the text. 
Tbc Items. Remo,·cAt Method-General Form 
~rl 
2 ~ 
Object. Items. RemoveAt(IndexPosition) 
- ., 
"' 
289 
I 

290 
v 
S 
l l 
,\ 
I. 
C 
Lists. Loops. and Printing 
The index is required; it specifies which element to remove. The index of the first 
list element is 0, and the index of the last element is Items. Count - l. If you 
specify an invalid index. the system throws an lndexOutOfRange exception. 
The Items. Remove At 1\'letltod-Examples 
~ P---------------------------------------------------------~ 
x 
' Remove the first name from the list . 
§ 
NamesListBox.Items.RemoveAt(O) 
'"0 i 
' Remove the item in position Indexlnteger. 
SchoolsComboBox. Items.RemoveAt(Indexlnteger) 
' Remove the currently selected item. 
CoffeecomboBox. Items.RemoveAt(CoffeecomboBox .Selectedlndex) 
The Ltcms.l{emovc MctJJOd- Gcncml Form 
7~1 
5 ~ Object . Items.Remove(TextString) 
The Items. Remove method looks for the specified string in the Items collec-
tion. If the string is found. it is removed: however. if it is not found. no excep-
tion is generated. 
• 
~ P-----------------------------------------------------------------. 
X .. 
,g .. 
"' 
' Remove the specified item . 
NamesListBox.Items.Remove("My School") 
' Remove the matching item . 
SchoolsComboBox.Items.Remove(SchoolTextBox.Text) 
' Remove the currently selected item. 
CoffeeCOmboBox. Items.Remove(CoffeeComboBox.Text) 
When you remove the currently selected item using either the RemoveAt or Re-
move method. make your code more efficient and easier to read by using the 
With statement. 
With CoffeecomboBox 
If .Selectedlndex <> - 1 Then 
. Items.RemoveAt( .Selectedindex) 
'. Items.Remove(.Text) 
Else 
' Remove by Index . 
' Alternate - remove by Text . 
MessageBox. Show( " First select the coffee to remove. ", "No Selection Made" , 
MessageBoxButtons .OK, MessageBoxicon.Exclamation) 
End If 
End With 
Cleal'ing a List 
In addition to removing individual items at run time. you also can clear all items 
from a list. Use the Items. Clear method to empty a combo box or list box. 
The Items. CLear Alethod- Ceueml Form 
.. ~1 
~ L Object. Items.Clear() 

r. a 
·"0 
C 
II 
A 
1• 
'I' 
" 
ll 
7 
Tu<' CLNu' MNbod-
E.-.:am ples 
SchoolslistBox. Items.Clear() 
MajorscomboBox. Items.Clear() 
291 
f~ 
........................................ ... 
' confirm clearing the majors list. 
Dim ResponseOialogResult As OialogResult 
ResponseOialogResult = MessageBox.Show( "Clear the majors list?", "Clear Majors List", 
MessageBoxButtons.YesNo, MessageBoxicon.ouestion) 
If ResponseOialogResult = OialogResult.Yes Then 
MajorsComboBox.Items .Clear() 
End If 
List Box and Combo Box Events 
Later in the chapter we will pe1fonn actions in event procedures for events of 
List boxes and combo boxes. Some useful events are the SelectedindexChanged. 
Text Changed. Enter. and Leave. 
Note: Although we haven't used these events up until this point. many 
other controls have similar even is. For example, you can cocle event procedures 
for the .Enter. Leave, and Text Changed events of text boxes. 
Tbe TexLChauged Event 
As the user types text into the text box portion of a combo box, the TextChanged 
event occurs. Each keystroke generates another TextChanged event. 
The Emer Evelll 
When a control receives the focus. an Enter event occurs. As the user tabs from 
control to control, an Enter event fires for each conb·ol. Later you willleam to 
make any existing text appear selected when the user tabs to a text box or the 
text portion of a combo box. 
Tb<' Leav<' EvNII 
You can also write code for the Leave event of a control. When the user tabs 
from one control to another, the Leave event is triggere:.l as the control loses fo-
cus. before the Enter event of the next control. Programmers often use Leave 
event procedures to validate input data. 
Describe the purpose of each of the following methods or properties for a list 
box or combo box control. 
l. Sorted 
2. Selectedfndex 
3. Items 
4. DropDownStyle 
5. ftems.Count 
6. Items.Add 
7. Items. Insert 
8. Items.Clear 
9. Items.RemoveAt 
10. Items.Remove 
To write o procedure for on event 
that isn't the default event, you con-
not just doubla.click the control. In-
stead, in the Properties window, 
click the Events button, and then 
doubla.click the event nome. The 
Editor will create the procedure 
header for you. • 

~ 
292 
v 
S 
l l 
,\ 
I. 
C 
Li.rs. Loops. ami Pru1ting 
Do/ Loops 
Until now. there has been no way to repeat the same steps in a procedure 1~ith­
out calling them a second time. The computer is capable of repeating a group 
of instructions many times without calling the procedure for each new set of 
data. The process of repeating a series of instructions is called looping. The 
group of repeated insttuctions is called a loop. An itet·ation is a single execu-
tion of the statement(s) in the loop. In th.is section. you will learn about the 
Do/Loop. Later in this chapter. you will learn about another type of loop-a 
For/Next loop. 
A Do/ Loop terminates based on a condition that you specify. Execution of 
a Do/Loop continues while the condition is True or nntil Lhe condition is True. 
You can choose to place the condition at the top or the bottom of the loop. 
Align the Do and Loop statements with each other and indent the lines of 
code to be repeated in between. 
The Do and LoorJ Statemems-General Fonn 
g 
Do {While 
J Until} condition 
i 
' Statements in l oop. 
~ Loop 
., e 
or 
Do 
' Statements in l oop. 
Loop {While 1 Until} Condition 
The first form of the Do/Loop tests for completion at the top of the loop. With 
dtis type of loop. also called a pretest or e/l.l.ry test. the statements inside the 
loop may never be executed if the tenninating condition is True the first time it 
is tested. 
Example 
Totallnteger = o 
Do Until Totallnteger = o 
' These statements in loop will never execute. 
Loop 
Because Totallnteger is 0 the first time the condition is tested. the condi-
tion is True and the statements inside the loop will not execute. Control will 
pass to the statement following the Loop statement. 
The second form of the Do/Loop tests for completion at the bottom of the 
loop. which means that the statements inside the loop will always be executed 
at least once. This form of loop is sometimes called a posttest. or e:dt test. 
Changing the example to a posttest. you can see the difference. 

(; 
II 
A 
I' 
'I' 
1·: 
R 
Totalinteger = o 
Do 
7 
' Statements in Loop will execute at least once. 
Loop Until Totalinteger = o 
In this case the s tatements ins ide the loop will be executed Ill least 
once. Assuming the value for Totallnteger does not change inside the loop. 
the condition (Totallnteger = 0) will be True the first time it is tested and 
control will pass to the [irsl statement [ollowing the Loop statement. Figure 7.6 
shows UM L action diagrams or pretest and post lest loops. using both While 
and Until. 
UML action diagrams of pretest (entry) and posttest (exit) loops. 
Pretesl 
Do While 
(Entry test) 
Pretest 
Do Until 
(Entryle!t) 
(Loop condition F'aloe] 
l..oop Complete 
Postt.esl 
J..oopWhile 
(Ellit te•t) 
Statements in Loop 
[Loop condition T me] 
l..oop Complete 
[l..oop condition True] 
[l..oop eondition Folse] 
l..oop Complcto 
Posttesl 
LJ>OP Until 
(Exit te•t) 
[l..oop condition True] 
[Loop condition False] 
Loop Complete 
293 

294 
l ' 
The Do aml Loo(l Statemems- Exam]>lt>s 
Do Until Itemlndexlnteger = ItemsListBox . Items .Count -
' Statements in loop. 
Loop 
Do While AmountDecimal >= 10D And AmountDecimal <= 20D 
' Statements in loop. 
Loop 
Do 
' Statements in loop. 
Loop Until Totallnteger < 0 
The Boolean Data Type Revisile(l 
C 
Usts. Loops, wtd Printing 
In Chapter 2 you learned to set and test True and False Boolean values. 
You will find Boolean vru·iables very useful when setting and testing condi-
tions for a loop. You can set a Boolean variable to True when a specific 
circumstance occms and then write a loop condition to continue until the 
variable is True. 
An example of using a Boolean variable is when you want to search through 
a list for a specific value. The item may or may not be found. and you want to 
quit looking when a match is fotmd. 
Using a Boolean variable is usually a three-step process. First you must di-
mension a variable and set its initial value (or use the default VB setting of 
False). Then, when a particular situation occurs, you set the variable to True. A 
loop condition can then check for True. 
Dim ItemFoundBoolean as Boolean = False 
Do Until ItemFoundBoolean 
' Checks for True. 
A Boolean variable is always in one of two states: True or False. Many pro-
grammers refer to Boolean variables as switches or flags. Most switches have 
two states--on or off; flags are considered either up or down. 
Using a Do/Loop with a List Box 
This small example combines a Boolean variable with a Do/Loop. Inside the 
loop. each element of the list is compared to NewhemTextBox.Text for a match. 
~~~~~~a~~~oc~ill~~~~ 
tested. Follow through the logic to see what happens when there is a match, 
when there isn't a match, when the match occurs on the first list element, and 
when the match occurs on the last list element. 
Private Sub FindButton_Click(ByVal sender As System. Object, 
ByVal e As system.EventArgs) Handles FindButton.Click 
' Look for a match between text box and list items. 
Dim ItemFoundBoolean As Boolean = False 
Dim Itemlndexlnte.ger As Integer = o 

C 
II 
A 
1• 
'I' 
" 
ll 
7 
Do Until ItemFoundBoolean or Itemindexlnteger = ItemsListBox .Items.count 
If NewitemTextBox .Text = ItemsListBox. Items(Itemindexinteger).ToString() Then 
ItemFoundBoolean = True ' A match was found . 
Else 
Itemindexinteger += 1 
End If 
Loop 
If ItemFoundBoolean Then 
MessageBox .Show( "Item is in the list." , "Item match", 
MessageBoxButtons.OK, MessageBoxicon. Information) 
Else 
MessageBox .Show("Item is not in the list. ", "No item match", 
MessageBoxButtons.OK, MessageBoxicon. Information) 
End If 
End Sub 
Explain the purpose of each line of the following code: 
ItemFoundBoolean = False 
Itemindexinteger = o 
Do Until ItemFoundBoolean Or Itemlndexinteger = ItemsListBox . Items .Count 
If NewitemTextBox .Text = ItemsListBox. Items(Itemindexlnteger) .ToString() Then 
ItemFoundBoolean = True 
Else 
Itemlndexlnteger += 1 
End If 
Loop 
For/ Next Loops 
When you want to repeat the statements in a loop a specific number of times, the 
For/Next loop is ideal. The For/Next loop uses the For and Next statements 
and a cotmter variable. called the loop inclex. The loop index is tested to deter-
mine the number of times the statements inside the loop will execute. 
Dim Looplndexlnteger as Integer 
Dim Maximuminteger as Integer 
Maximumlnteger = SchoolslistBox.Items.count - 1 
For Loopindexinteger = o To Maximuminteger 
' The statements inside of the loop are indented 
' and referred to as the body of the loop. 
Next Loopindexinteger 
When the For statement is reached dUiing program execution. several 
things occur. The loop index. Looplndexlnteger. is established as the loop 
counter and is initialized to 0 (the initial value). The final value for the loop in-
dex is set to the value of Maximumlnteger. which was assigned the value of 
SchoolsListBox.Items.Count - 1 in the previous statement. 
295 

296 
s u " 
I. 
C 
Lists. Loops. wul Pri11ting 
Execution is now "controlled by" the For statement. After the value of 
Loopindexlnteger is set. it is tested to see whether LooplndexJnteger is greater 
than Maximuminteger. If not. the statements in the body of the loop are exe-
cuted. The Next statement causes the Looplndexlnteger to be incremented by 
l. Then control passes back to the For statement. Is the value of Looplndexin-
teger greater than Maximum[nteger? If not. the loop is again executed. When 
the test is made and the loop index is greater than the final value. conb·ol 
passes to the statement immediately following the Next. 
A counter-controlled loop generally has three elements (see Figure 7.7 for 
a UML action diagram ofloop logic). 
l. Initialize the counter. 
2. Increment the counter. 
3. Test the counter to determine when it is time to terminate the loop. 
A For /Next loop handles all tlHee steps for you. 
Loop Complete 
The For aud Next Statcments-GcrLer·al Form 
l~ljil#l 
When you read the •to" in a 
loop, think "through", as the •to• is 
inclusive. • 
l!' igure 7.7 
A UMLaction diagram of the 
logic of a For I Next /,()()p. 
For Loopindex (As Datatype] = Ini tialValue To TestValue (Step Increment] 
• Statements in loop. 
Next (Loopindex] 
Looplndex must be a numeric variable; Initial Value and Test Value may be con-
slants. variables. numeric property values. or numeric expressions. TI1e op-
tional word Step may be included, along with the value to be added to the loop 
index for each iteration of the loop. \Vhen the Step is omitted, the increment is 
asswned to be l. 
TI1e optional As Data type entry allows you to declare the index variable 
as part of the For statement. This technique creates a block-level variable that 
is available only inside the For /Next loop. Declaring and using a block-level 
variable for the loop index is the prefened approach. 

t"'l 
>< : { 
~ 
"' 
C
II
,\I>
'I'
I'
R 
7 
297 
Tb<' For and Next Stal<'meuts- Examples 
For Indexlnteger As Integer = 2 To 100 Step 2 
For 
For 
countinteger As Integer = Startinteger To Endlnteger Step Incrementinteger 
Countinteger = 0 To CoffeeCOmboBoxType.Items. Count -
1 
For 
For 
Numberinteger = (Numbercorrectinteger -
5) To TotalPossibleinteger 
RateDecimal As Decimal = 0. 05D To 0.25D Step 0. 05D 
For countDowninteger As Integer = 10 To o Step - 1 
Each For statement has a corresponding Next statement. which must follow the 
For. AIJ statements between the For and Next statements are considered to be 
the body of the loop and will be executed the specified number of times. 
The first For statement example will count from 2 to 100 by 2. The state-
ments in the body of the loop will be executed 50 times: first with lndexlnteger 
= 2. next with lndexlnteger = 4, next with lndexlnteger = 6. and so forth. 
When the comparison is done. the program checks for greater than the test 
valtu~not equal to. When Index Integer = 100 in the preceding example, the 
body of the loop will execute one more time. Then, at the Next statement, ln-
dexlnteger will be incremented to 102. the test will be made. and control will 
pass to the statement following the Next. 
Negative lne~·ement o r Counting Bacl{wm·d 
You can use a negative number for the Step increment to decrease the loop in-
dex rather than increase it. When the Step is negative. VB tests for less than 
the test value instead of greater than. 
' count Backwards. 
For countinteger As Integer = 10 To 1 Step - 1 
' Statements in body of loop. 
Next countinteger 
Conditions Satisfied before Enta-y 
At times the final value will be reached before entry into the loop. In that case. 
the statements in the body of the loop will not be executed at all. 
' An unexecutable loop. 
Finalinteger = 5 
For Indexinteger As Integer = 6 to Finalinteger 
' The execution will never reach here. 
Next Indexinteger 
Altel'iug the Values of the Loop Cont1·ol Val'iables 
Once a For loop has been entered. the values for Initial Value, TestValue, and 
Increment have already been set. Changing the value of these control variables 
within the loop will have no effect on the number of iterations of the loop. Many 
texts admonish against changing the values within the loop. However, Visual 
Basic just ignores you if you try. 
Use a For/ Next loop when you 
know the number of iterations 
needed for 
the 
loop. 
Use o 
DO/Loop when the loop should 
end based on a condition. • 

298 
v 
S 
l l 
,\ 
I. 
' Bad Example - Changing the Control Variable. 
Finallnteger = 10 
Increaselnteger = 2 
C 
Lists. Loops. and Printing 
For Indexlnteger As Integer 
1 to Finallnteger Step Increaseinteger 
Finallnteger = 25 
Increaseinteger = 5 
Next Indexlnteger 
If you tried this example and displayed the values of Indexlnteger. you would 
find that the final value remains 10 and the increment value is 2. 
The value that you can change within the loop is the loop index. However. 
this practice is considered poor programming. 
' Poor Programming. 
For Indexlnteger = 1 To 1 o Step 1 
Indexlnteger += 5 
Next Indexlnteger 
Endless Loops 
Changing the value of a loop index variable is not only considered a poor prac-
tice but also may lead to an endless loop. Your code could get into a loop that 
is impossible to exit. Consider the following example; when will the loop end? 
' More Poor Programming . 
For Indexlnteger = 1 To 10 Step 1 
lndexlnteger = 1 
Next Indexlnteger 
Exiting Loo1Js 
Jn the previous example of an endless loop. you will have to break the program 
execution manually. You can click on your fom1's close box or use the Visual 
Basic menu bar or toolbar to stop the program. If you can't see the menu bar or 
toolbar. you can usually move or resize your application's fonn to bring it into 
view.lf you prefer, press Ctrl + .Break to enter break time; you may want to step 
program execution to see what is causing the problem. 
Usually loops should proceed to nonnal completion. However, on occasion 
you may need to terminate a loop before the loop index reaches its final value. 
Visual Basic provides Exit For and Exit Do statements for ihis situation. 
Generally, the Exit statement is part of an If statement. 
~ ~ Exit For 
~~I 
Ei ~ 
Exit Do 
Ill 
The Exit For and Exit Do transfer control to the statement following the loop 
tennination- the Next or Loop statement at the bottom of the loop structure. 

C 
II 
1\ 
1• 
'I' 
1•: 
R 
7 
299 
The J<:x.it Statemeut-Exarnples 
~ .-------------------------------------------------------------.. 
~ 
'E. 
m 
For Indexlnteger As Integer = 1 To Maxlnteger 
If Indexinteger > 1000 Then 
Exit For 
End If 
' Statements in loop. 
Next Indexinteger 
Do Until Itemindexlnteger = ItemsListBox.Items .count 
Loop 
If NewitemTextBox.Text = 
ItemsListBox.Items(Itemindexlnteger) .ToString() Then 
ItemFoundBoolean = True 
Exit Do 
Else 
Itemindexinteger += 1 
End If 
Skipping to the Next lte1·ation of a Loot> 
At times you may be finished in the cun·ent iteration of a loop and want to skip 
to the next. The Continue statement transfers control to the last statement in 
the loop and retests the loop exit condition. This effectively skips to the 
next iteration of the loop. Generally, the Continue statement is part of an If 
statement. 
The Continue Statemeut-General l<'onn 
Continue For 
Continue Do 
Tbe Continue Statement-Examples 
• 
~ P---------------------------------------------------------. 
;.', ., 
e 
"' 
;-
"' 
For Loopinteger As Integer = 0 To NameListBox.Items.Count- 1 
If NameListBox.Items(Looplnteger) .ToString() = String. Empty Then 
Continue For 
End If 
' Code to do something with the name found . 
Debug .WriteLine( "Name = " & NamelistBox.Items(Loopinteger).ToString()) 
Next 
Loopinteger = - 1 
Do Until Loopinteger = NameListBox.Items.count- 1 
Loopinteger += 1 
If NameListBox.Items(Loopinteger) .ToString() 
String.Empty Then 
Continue Do 
End If 
' Code to do something with the name found. 
Debug .Writeline( "Name = " & NameListBox.Items(Loopinteger).ToString()) 
Loop 
Note: The two examples above do the same thing. but you'll notice that t11e 
For loop has less code. Because the number of iterations is known 
(ltems.Cow1t). the For statement is the preferred solution. 

300 
l ' 
C 
Lists, Loops. aml Pru1ting 
l. Identify the statements that are correctly fonned and those that have er-
rors. For those with errors. state what is wrong and how to correct it. 
(a) For Indexoecimal = 3.50 To 6.00, Step 0 . 50 
Next Indexoecimal 
(b) For Indexlnteger = Beginlnteger To Endlnteger Step Incrementlnteger 
Next Endlnteger 
(c) For 4 = 1 To 10 Step 2 
Next For 
(d) For Indexlnteger = 100 To o Step - 25 
Next Indexlnteger 
(e) For Indexinteger = 0 To -1 0 Step - 1 
Next Indexlnteger 
(Q For Indexlnteger = 10 To 1 
Next Indexinteger 
2. How many times will the bocly of the loop be executed for each of these 
examples? What will be t11e value of the loop index after nom1al com-
pletion of the loop? 
(a) For Countlnteger 
1 To 3 
(b) For countlnteger 
2 To 11 Step 3 
(c) For Countlnteger 
10 To 1 Step - 1 
(d) For counteroecimal 
3. 00 To 6. 00 Step 0.50 
(e) For Countlnteger = 5 To 1 
Making Entries Appear Selected 
You can use several techniques to make the text in a text box or list appear 
selected. 
Selecting the Ent•·y in a Text Box 
Wl1en the user tabs into a text box t11at already has an entry. how do you want tlle 
text to appear? Should the insertion point appear at eitJ1er the left or right end of 
the text? Or should the entire entry appear selected? You also can apply this 
question to a text box that fails validation: Shouldn't the entire entry be selected? 
The most user-friendly approach is to select the text. which you can do with the 
SelectAll method of the text box. A good location to do this is in the text box's 
Enter event procedure, which occurs when the control receives the focus. 
Private Sub NameTextBox_Enter(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles NamoTextBox.Enter 
· Select any existing text . 
NameTextBox.SelectAll() 
End Sub 
Selecting an Ent•·y in a List Box 
You can make a single item in a list box appear selected by setting the Se-
lectedlndex property. 
CoffeeListBox.Selectedindex 
Indexinteger 

C 
II 
A 
1• 
'I' 
" 
ll 
7 
When a list box has a very large number of entries. you can help users by 
selecting the match.ing entry as they type in a text box. This method is similar 
to the way the Help Topics list in Visual Basic works. For example. when you 
type p. the list quickly scrolls and displays words beginning with p. Then if you 
next type r. the list scrolls down to the words that begin with pr and the first 
such word is selected. If you type i next. the first word beginning with pri is se-
lected. The following example implements this feature. See if you can tell what 
each statement does. 
Notice that this is coded in the TextChanged event procedure for the control 
into which the user is typing; the event occurs once for every keystroke entered. 
Private Sub CoffeeTextBox_TextChanged(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles CoffeeTextBox.TextChanged 
' Locate first matching occurrence in the list. 
Dim Indexlnteger As Integer = o 
Dim FoundBoolean As Boolean = False 
Dim ListCompareString As String 
Dim TextcompareString As String 
Do While Not FoundBoolean And Indexlnteger < CoffeeListBox.Items .count 
ListCompareString = CoffeeListBox.Items(Indexlnteger) .ToString() .ToUpper() 
TextcompareString = CoffeeTextBox.Text.ToUpper() 
If ListCompareString.StartsWith(TextCompareString) Then 
CoffeeListBox.Selectedlndex = Indexlnteger 
FoundBoolean = True 
Else 
Indexlnteger += 1 
End If 
Loop 
End Sub 
Sending Information to the Printer 
So far, your program output has been on the screen or a print of a form. You can 
use the VB PrintOocument and PrintPreviewDialog components to produce 
more customized output for the printer and also to preview the output on the 
screen. These components appear in the Printing tab of the toolbox. 
Visual Basic was designed to run under Windows. which is a highly inter-
active environment. It is extremely easy to create fonns for interactive pro-
grams, but it is not easy at all to print formatted output on the printer. Most 
professional programmers using Visual Basic use a separate utility program to 
format printer repo11s. Several companies sell utilities that do a nice job of 
designing and printing reports. A free version of Crystal Reports that works 
with Visual Studio 2010 is available to download from SAP Business Software. 
The PrintDocmnenl Coan1>oncnt 
You set up output for the printer using the methods and events of the Pr·int-
Oocmueut component. \'(Then you add a PriutDocument component to a fonn. 
the component appears in the component tray below the fonn (Figure 7.8). 
301 

302 
l ' 
C 
Li•ts. Loops, wtd Printing 
0 ·········· .. ···• 
~ .. ,;!.~~.i~:.~.~~~.~=~ .. .J 
Luitiatiug n Print Opm·atiou 
To initiate printing output. you execute the Print method of the Print Docu-
ment component. This code belongs in the Click event procedure for the Print 
button or menu item that the user selects to begin printing. 
Private Sub PrintButton_Click(ByVal sender As System. Object, 
ByVal e As System.EventArgs) Handles PrintButton. Click 
' Print output on the printer. 
PrintDocument1 .Print() 
End Sub 
' Start the print process . 
Coding the Print button's Click event is the easy pait. Before it will work 
you must write code to indicate how the output will print. You set up the print 
output in the PrintPage event procedure. 
Setting Up the Pl'iut Output 
The code that you write to set up the printed page belongs in the PrintDocmnent's 
Print Page evem pt•ocedm·e. The PrintPage event is fired once for each page 
to be printed. This technique is referred to as a callback and is different from 
any1hing we have done so far. In a callJ:>ack. the object notifies the program that 
it needs to do something or that a situation exists that the program needs to han-
dle. The object notifies the program of the situation by firing an event. 
As you saw in the previous code block, when the user clicks a Print button 
or menu item. the program executes the Print method of the PrintDocument ob-
ject. This causes the PrintDocument's PrintPage event to fire. The PrintPage 
event procedure holds the code that describes exactly how pages should print. 
The PrintDoctunent object also fires events for BeginPtint and EndPrint. for 
which you can write code if you wish. 
Fi~ur e 7.3 
Add a PrintDo.cument 
component to your application. 
The component appears in the 
form~ component tray. 

C
ll
i\I'Tt:
R 
7 
Pri vate Sub PrintDocument1_PrintPage(ByVal sender As System.Object, 
ByVal e As System.Orawing.Printing.PrintPageEventArgs 
) Handles PrintDocument1 .PrintPage 
• Set up actual output to print. 
End Sub 
Notice the argument: e As System. Drawing. Printing. PrintPage-
EventArgs. We ~·ill use some of the properties and methods of the PrintPage-
EventArgs argument for such things as determining the page margins and 
sending a string of text to the page. 
CNtln;! St:wt••,J -.it It l'l"intin;.:-Stt>p-hy-St<'p 
Tl1is simple project introduces you to printing by creating a document that 
sends your name to the printer. The sections that follow describe how to set up 
the printed page. 
Create the Project 
:-TEl' 11 Create a project called Ch07Printing. 
STEI' 2: Add a button and a PrintDocument component to the form. 
STEI' ::1: Name the button PrinLButton with appropriate text. 
Set Up the Page to Print 
STE:I' 1: Double-click on Prin/Documentt in the component tray. The Print Page 
event handler appears. 
STEI' 2: Write the code. 
' Information to print. 
e.Graphics.Orawstring('Your Name•, New Font( "Arial', 36), 
Brushes.Black, 100, 100) 
Write CodE' for the Print Button 
STEI' 1: Go to the Click event procedure for the Print Button and add the code 
to call the Print method of the print document. 
Not,e: You also can print to the Print Preview K·indow: see the code 
in the step-by-step that follows this one. 
Private Sub PrintButton_Click(ByVal sender As Object, 
ByVal e As System. EventArgs) Handles PrintButton.Click 
' Call the Print method of the PrintDocument component . 
PrintDocument1 .Print() 
End Sub 
Run the Program 
STEI' 1: Run the program and click on the Print button. A page should print on 
the printer. 
STEI' 2: Stop execution and change the font and location for the text. If you 
have a color printer. try changing the color for the brushes. 
STEP 3: Run the program again. 
303 

304 
l ' 
C 
Usts. Loops, wtd Printing 
Addiu,!!; a PlintPr·e,;ew Dialog to tbc l'rilll Project-Step-by-Stell 
This exercise adds a Print Preview dialog box to the step-by-step example 
created earlier in this chapter. 
Open the Project 
STEP I! Open Ch07Printing. 
STEP 2: Add a PrintPreviewDialog component to the form. 
STEP 3: Add a new button labeled "Print Preview". 
Write the Code 
STEP 1: Write the code for the Print Preview button. 
Private Sub PrintPreviewButton_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles PrintPreviewButton.Click 
' Assign the PrintDialog1 document to the preview. 
PrintPreviewDialog1 .Document = PrintDocument1 
· Show the dialog . 
PrintPreviewDialog1 .ShowDialog() 
End Sub 
Test the Program 
STEP 1: Run the program. This time your output should appear in a Print 
Preview dialog box rather than on the printer. 
The Graphics Page 
You set up a graphics page in memory, and then the page is sent to the printer. 
The graphics page can contain strings of text as well as graphic elements. 
You must specify the exact location on the graphics page for each element 
that you want to print. You can specify the upper-left comer of any element by 
giving its X andY coordinates. or by using a Point structure or a Rectangle struc-
ture. We will stick with the X and Y coordinates in these examples (Figw·e 7. 9). 
I 
-·-.. ··-·t···-·-·-·-·-·-·-·-·-·-·-·-·-.. -·-·-·-·-·-·-·-·-·-· 
y 
l 
Fi~ n r e 7.9 
The X coordinate is the 
horizontal distance across a 
line from the left edge of the 
page; the Y coordinate is the 
vertical distance from the top 
of the page. The measurem.ent..s 
are in pixels. 

C 
II 
A 
1• 
'I' 
" 
ll 
7 
You can use multiple Print Document objects if you have more than one 
type of output or report. Each PrintDocument has its own PrintPage event. 
Code the graphics co11l1Uands to precisely print the page in each document's 
PrintPage event procedure. 
Using tue O•·:.nrStriug l\'letuod 
You use the DrawString meiuod to send a line of text to the graphics page. 
The DrawString method belongs to the Graphics object of the PrintPage-
EventArgs argument. Refer back to the procedure header for the PrintPage 
event in "Setting Up the Print Output." 
Tile OmwStriug J\1etuod-Geueral •' orm 
The DrawString method is overloaded, which means that there are several 
forms for calling the method. The foru1 presented here is the least complicated 
and requires that page coordinates be given in X and Y format. 
305 
~~l.---------------------------------------------------------~ 
e 
~ 
DrawString(StringToPrint, Font, Brush, Xcoordinate, Ycoordinate) 
You supply the arguments of the DrawString method: what to print. what font 
and color to print it in, and where to print it. 
Tbc l)rawSu·iug Metuod-Examples 
~ .---------------------------------------------------------------... 
.-. e 
'E.. 
~ 
e . Graphics.DrawString(PrintlineString, PrintFont, Brushes.BlacK, 
HorizontalPrintlocationSingle, VerticalPrintlocationSingle) 
e . Graphics. DrawString( "My text string", MyFont, Brushes.BlacK, 100.0, 100.0) 
e .Graphics .OrawString(NameTextBox. Text, New Font ( "Aria! " , 1 0), Brushes . Red, 
LeftMarginSingle, CurrentlineSingle) 
Before you execute the DrawString method. you should set up the font that 
you want to use and the X and Y coordinates. 
Setting the X and Y Coordinates 
For each line that you want to print, you must specify the X andY coordinates. 
It is helpful to set up some variables for setting these values. which should be 
declared as Single data type. 
Dim HorizontalPrintLocationSingle As Single 
Dim VerticalPrintLocationSingle As Single 
The PrintPageEventArgs argument has several useful properties (Figure 7.10). 
such as MarginBounds, PageBounds. and PageSeuings. You can use these 
Figu1• e 7.10 
Use the properties of the 
PrintPageEventArgs argument 
to deternLine the current 
margin settings. 

306 
' 
!-
l 
\ 
L 
ll 
\ 
s 
properties to determine the present settings. For example. you may want to 
set the X coordinate to the current left margin and the Y coordinate to the 
top margin. 
HorizontalPrintLocationSingle = e.MarginBounds. Left 
VerticalPrintLocationSingle 
e.MarginBounds.Top 
P1'iutin:: 'lnltiplt' Lint>~< 
To send multiple lines to the print page. you must increment the Y coordinate. You 
can add the height of a line to the previous Y coordinate to calculate tl1e next line's 
Y coordinate. Use PrintFont. GetHeight () to retrieve the height of the line. 
• Declarations at the top of the procedure. 
Dim PrintFont As New Font ( "Arial', 12) 
Dim LineHeightSingle As Single = PrintFont.GetHeight + 2 • Add two pixels for spacing. 
Dim HorizontalPrintLocationSingle As Single = e.MarginBounds.Left 
Dim VerticalPrintlocationSingle As Single = e.MarginBounds.Top 
Dim Printlinestring As String= 'This is a test line to print. " 
• Print a line. 
e.Graphics.DrawString(PrintlineString, PrintFont, Brushes.Black, 
HorizontalPrintLocationSingle, VerticalPrintLocationSingle) 
• Increment the Y position for the next line. 
VerticalPrintLocationSingle += LineHeightSingle 
P1·inting Summar y 
Although the steps for printing may sound confusing at first. you can foUow 
tl1ese easy steps for nearly all printing tasks. Place the code for these actions in 
the PrinlPage event procedure for the Print Document component: 
1. At the top of the procedure, define the font(s). line height. and X and Y 
coordinates. 
2. Set up the line to print. 
3. Print the line. 
4. Increment the Y coordinate if another line wiU be printed. 
5. Place 2. 3. and 4 inside a loop if there are multiple lines to print. 
P1·jnting the Conte nts o f a List Box 
You can combine the techniques for printing, a loop. and the list box properties 
to send the contents of a list box to the printer. You know how many iterations 
to make. using the ltems.Count property. TI1e Items collection allows you to 
print out the actual values from the list. 
· Print out all items in the CoffeecomboBox list. 
For Listlndexlnteger As Integer = o To CoffeecomboBox. Items.Count -
· Set up a line. 
PrintlineString = CoffeeComboBox.Items(Listlndexlnteger) .ToString () 

C 
II 
1\ 
I' 
'I' 
1•: 
II 
7 
' send the line to the graphics page object. 
e.Graphics.OrawString(PrintLineString, PrintFont, Brushes.Black, 
HorizontalPrintLocationSingle, verticalPrintLocationSingle) 
' Increment the Y position for the next line. 
VerticalPrintLocationSingle += LineHeightSingle 
Next Listindexinteger 
When an item is selectetl in a list Lux ur a cumLu Lux, the Text prupe1ty lwlu~ 
the selected item. You can use the Text property to print the selected item. 
' Set up the line to print the selected list item. 
PrintLineString = "Coffee: ' & CoffeeComboBox.Text & 
syrup: " & SyrupListBox. Text 
' Send the line to the graphics page object. 
e.Graphics.OrawString(PrintLineString, PrintFont, Brushes.Black, 
HorizontalPrintLocationSingle, VerticalPrintLocationSi ngle) 
Alig-ninl!: De'cimal Columns 
When the output to the printer includes numeric data. the alignment of the deci-
mal points is impottant. Alignment can be tricky "ith proportional fonts. where the 
width of each character varies. The best approach is to format each number as you 
want it to ptint and then measure the length of the formatted string. This technique 
requires a couple more elements: You need an object declared as a SizeF struc-
ture, which has a Width property, and you need to use the MeasureString 
method of tl1e Graphics class. Both the SizeF structure and the MeasureString 
method work with pixeL~. which is what you wanl.. It's the same unit of measure as 
used for the X andY coordinates of the DrawString method. 
The following example prints a left-aligned litem! at position 200 on the 
line and right-aligns a formatted number at position 500. (Assume that all vari-
ables are properly declared.) 
' SizeF structure for font size info. 
Dim FontSizeF As New SizeF() 
' Set X for left-aligned column. 
HorizontalPrintLocationSingle = 200.0 
' Set ending position for right-aligned column. 
ColumnEndSingle = 500.0 
' Format the number. 
Forma ttedOutputSt ring = AmountDecimal. To String ( "c" ) 
' Calculate the X position of the amount . 
' Measure string in this font . 
FontSizeF = e .Graphics.MeasureString(FormattedOutputString, PrintFont) 
' Subtract width of string from the column position. 
ColumnXSingle = ColumnEndSingle - FontSizeF.Width 
307 

308 
l ' 
C 
Usts. Loops, wtd Printing 
' Set up the line - each element separately. 
e.Graphics.Drawstring( "The Amount =" , PrintFont, Brushes.Black, 
HorizontalPrintLocationSingle, VerticalPrintLocationSingle) 
e.Graphics.DrawString(FormattedOutputString, PrintFont, Brushes.Black, 
ColumnXSingle, VerticalPrintLocationSingle) 
' Increment Y coordinate for next line. 
VerticalPrintLocationSingle += LineHeightSingle 
Dis playing a P1-int P1·evjew 
A really great feature of the .NET printing model is print pt·eview. You can 
view the printer's output on the screen and then choose to print or cancel. ll1is 
is especially helpful for testing and debugging a program, so that you don't have 
to keep sending pages to the printer and wasting paper. 
The Pl'imPrevjewDialog compoueut is the key to print preview. You 
add the control to your fonn's component tray; the default name is PrintPre-
viewDialogl (Figure 7.11). Since you can use the same dialog for all print pre-
views. you do not need to rename the component. 
You write two lines of code in the event procedure for the button or menu 
item where the user selects the print preview option. The PrintPreviewDialog 
component uses the same PrintDocument component that you declared for 
printer output. You assign the Print Document to the Document property of the 
PrintPrev"iewDialog and execute the ShowDialog method. TI1e same PrintPage 
event procedure executes as for the Print Document. 
Private Sub PreviewAllToolStripMenultem_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles PreviewAllToolStripMenultem.Click 
' Begin the process for print preview of all items. 
PrintPreviewDialog1.Document = PrintAllPrintDocument 
PrintPreviewOialog1.ShowDialog() 
End Sub 
oorbox 
• II X 
Printing.vb IOesigni"' x 
I'> All \Vtndowo: ~otm $ 
1> Comn1on Con1rols 
1> Containers 
flo Menus & T oolbar.: 
tJ- Oat,_ 
1> Componenls 
~ Printing 
~ Pointer 
ifll PogeldupOiolog 
(i PrintOialog 
~ PdntOocument 
~ 
Prin!PreviewControl 
--fl:l 
PrintPreviewOial~ 
1> Oi~alogs 
-=..-
~ WPF Jmeroperobility 
p. Reporting 
~'9 Printing Stfp·by-S-n::p 
[Jr PrintCocum: ntl 
l<' i g n••e 7 . 1 1 
Add a PrintPreviewDialog 
component to your form~ 
component tray. 

C 
II 
A 
1• 
'I' 
" 
ll 
7 
The Using Block 
When you are using system resources such as fonts. you can access the re-
sources inside of a Using block. Any variables that are declared in a Using 
block are only accessible within that block. as with any other block-level vari-
able. The advantage of declaring a variable inside a Using block is that system 
resources are released as soon as the block te1minates. 
Using HeadingFont as New Font("Arial" , 14, FontStyle.Bol d) 
e.Graphics.OrawString("Flavors", HeadingFont, Brushes.Black, HorizontalPrintLocationSingle, 
VerticalPrintLocationSingle) 
End Using 
Pl"inting Multiple Pages 
You can easily print multiple pages. both to the printer and to the Print Preview 
dialog box. Recall that the PrintDocument's PrintPage event fires once for each 
page. You indicate that you have more pages to print by setting the Has-
MorePages property of the PrintPageEventArgs argument to True. 
TI1e following example prints four pages full of the same Hne. just to illus-
trate multiple-page ou~)UI. Nonnally you will have a certain amount of data to 
print and stop when you run out. 
Private Sub ReportPrintDocument_PrintPage(ByVal sender As Object, 
ByVal e As System.Drawing .Printing .PrintPageEventArgs 
) Handles ReportPrintDocument .PrintPage 
' Print multipage output. 
Dim PrintFont As New Font( "Arial", 12) 
Dim LineHeightSingle As Single = PrintFont.GetHeight + 2 
Dim VerticalPrintLocationSingle As Single = e.MarginBounds.Top 
Dim Printlinestring As String = "This is a test. " 
' Set the left margin. 
HorizontalPrintLocationSingle 
100 
' Count pages for multiple-page output. 
' Initialize the page number at 1. 
Stati c PageCountlnteger As Integer = 1 
' Print the page number. 
e.Graphics.Drawstring("Page " & Pagecountlnteger.ToString() , PrintFont, 
Brushes.Black, 600, VerticalPrintLocationSingle) 
VerticalPrintLocationSingle += LineHeightSingle * 2 
' Print a page full of the same line. 
Do 
' Print a line. 
e .Graphics.OrawString(PrintLineString, PrintFont, Brushes. Black , 
HorizontalPrintLocationSingle, VerticalPrintLocationSingle) 
' Double space. 
VerticalPrintLocationSingle += LineHeightSingle * 2 
' Stop at the bottom margin. 
Loop Until VerticalPrintLocationSingle >= e.MarginBounds.Bottom 
' Increment the page number. 
PageCountln teger += 1 
309 

310 
s 
l 
\ 
•• 
II 
\ 
S 
' Indicate whether there are more 
If Pagecountlnteger <~ 4 Then 
e.HasMorePages 
True 
Else 
e.HasMorePages 
False 
pages to print. 
' Print only 4 pages . 
' Reset the page counter for the next report. 
Pagecountlnteger ~ 1 
End If 
End Sub 
Uedm·in~ the 1'11ge Counte•· as Static 
(' 
Li•ts. Loops. and Printing 
As you learned in Chapter 6. static local variables keep tlteir values from one 
execulion of the procedure to the next. When you ptint multiple pages, you 
must keep track of the current page number. but you don't need that value in 
any procedure but the Print Page procedure. This is the perfect time to use a 
static local vatiable. 
' Count pages for multiple-page output. 
' Initialize the page number at 1 . 
Static Pagecountlnteger As Integer ~ 1 
What is the pmpose of each of these elements? Where and how is each used? 
1. The PrintOocument component. 
2. The Print method. 
3. The PrintPage event. 
4. The Drawstring method. 
5. system.Drawing .Printing.PrintPageEventArgs. 
6. MarginBounds. Left. 
7. The PrintPreviewDialog component. 
our Hands-On Programming Example 
Create a project for R 'n R--for Reading 'n Refreshment that contains a drop· 
down combo box of the coffee flavors and a list box of the syrup flavors. Adjust 
the size of the boxes liS needed when you test t11e project. The coniJ·ols should 
have labels above them with the 1mrds Coffee and Syrup. Enter the initial val-
ues for the syrup flavors and coffee flavors in the Properties window. Set ilie 
Sorted property of both lists to True. The user will be able to add more coffee 
flavors to the list at run time by typing in the top portion oi the combo box and 
selecting a menu item. 
Cofl"ce Flavor• 
Espresso Roast 
Jamaica Blue Mountain 
Kona Blend 
Chocolate Almond 
Vanilla Nut 
Syrur• Flnvo,.. 
{None) 
Chocolate 
linzelnul 
Lrish Cream 
Orange 

C
ll
i\
1°Tt:
R 
7 
Include one menu item to print aU the coffee Oavors and another to print 
only a selected item from each list. Then include submenus for each of the 
print option.s to allow the user to send the output to the printer or the Print Pre-
view window. These print commands belong on the File menu. along with the 
Exit command. Use a separator bar between the Prints and the Exit. 
Include an Edit menu with items to Add coffee flav«. Remove coffee flavor. 
Clear coffee list. and Display coffee count. 
Add an About fom1 to your project. and add a Help menu with an About 
command. 
After you have comp leted the project. try using different styles for the 
combo box and rerun the project. As an added challenge. modify t11e Add cof-
fee flavor routine so that no duplicates are allowed. 
l1lanning the Proj<'cl 
Sketch a fonn (Figure 7.12), which your users sign off a3 meeting their needs. 
A sketch ofthef ormfor the handJ-on project. 
FlavorGFonn -............._ 
~~-------------------------
file 
Edit l::lelp 
Group80XI - f-+ 
Select Coffee and Syrup -
-
-
-
- --, 
!:;offee Flao,()r 
CoffeeComboBox - f- ~~ 
1-.1 
Plan the Objects and Propertie:; 
Object 
FlavorsForm 
GroupBoxl 
Lnbcll 
Label2 
CoffeeComboBox 
Proper1y 
Name 
Text 
Text 
Text 
Text 
Name 
OropDo .. cnStrle 
Items 
Sorted 
~yrup Flao,()r 
0
+-r-r-- Syrupl~'""" 
Se llin;::-
Fla\"'rs..Foml 
R "n R for Reading "n Refreshment 
Select Coffee and Syrup 
&Coffee Flavor 
&Syrup f lavor 
CoffeeComboBox 
Drop Down 
Chocolate Almond 
Espresso Roast 
Jamaica Blue Mountain 
Kona Blend 
Vanilla Nut 
True 
311 

312 
,. 
Ohjeel 
SyrupListBox 
FileTooiStripMenul tern 
PrintSelectedFlavorsToolStripMenultem 
PrintAllFiavCI!'STooiStripMenu hem 
PrintAUToolStripMenultem 
Preview AIIToolStri pMenul tem 
PrintSelecte<IToolStripMenultem 
PreviewSelectedToolStripMenultem 
ExitTooiStripMenultem 
EditTooiStripMenultem 
AddCoffeeFiamrTooiStripMenultem 
RemoveColl"eeFlavorTooiStripMenultem 
ClearCoffeeListTooiStripMenultem 
DisplayCoffeeCountToolStripMenultem 
HelpToolSIIipMenultem 
AboutToolStripMenultem 
PrintAUPrintDocumenl 
PrintSelectedPrintDocument 
PrintPreviewDialog l 
Plan the Event Procedures 
~bin Form 
Procedu1·e 
PreviewSelectedTooiStripMenultern_Ciick 
s 
l 
\ 
L 
It 
\ 
s 
t: 
Li.ts. Loops. and Printing 
Properly 
Sellin,<: 
Name 
hems 
Sorted 
Text 
Text 
Text 
Text 
Text 
Text 
Text 
Text 
Text 
Text 
Text 
Text 
Text 
Text 
Text 
Name 
Name 
Name 
Actions 
SyrupListBox 
(None) 
Chocolate 
Hazelnut 
Irish Creme 
Orange 
Tru~ 
&File 
Prinl &Selecled Flavors 
Print &All Flavoro 
&Print All 
Prc&view All 
&Print Selecled 
Pre&•iew Selected 
E&xil 
&Edit 
&Add Coffee Flamr 
&Remove Coffee Flavor 
&Clear Coffee List 
Count Coffee &List 
&Help 
&About 
PrintAilPrintDocument 
PrintSelcctedPrinlDocument 
PrintPreviewDiulogl 
If both coffee and S}TUP selected 
Set Boolean variable for selected item. 
Set the print preview document. 
Show the print preview dialog. 
Eloe 
Disploy error mes•Bf!•· 

C
ll
i\
11
T
E
K 
7 
Main For·m 
Proccdw-e 
PrintSelecte<ITooiStripMenultem_Ciick 
PreviewAllTooiStripM~nultem_Clic~ 
PrintAIITooiStripMenultem_Ciick 
PrinlAIIPrintDocwnent_PrinlPage 
PrintSele<:teclPrintDocumcnt_PrintPage 
ExitTooiStripMcnultem_Ciick 
AddCoffeeFlavorTooiStripMenu Item_ Click 
RemoveCoffeeFiavorTooiStripMenultem_Click 
ClearCoCfeeListTooiStripMenultem_Ciick 
Di~playCoffeeCOWltTooiStrip~lenultem_Ciick 
AboutTooiStripMenultem_Click 
About Form 
Proce<lur-e 
A c lious 
OkButton_Click 
Close the About box. 
Actio~ 
If both coffee and syrup selceted 
Set Boolean variaLie for selected item. 
Start the priut opemtion. 
Else 
Display error messa~re. 
Set the print preview document. 
Show the print preview tlialog. 
Stru1 the print operation. 
Use a loop to send all novor names to the printer. 
If item is selected 
Sead selected item to the printer. 
Else 
Display error me8sage. 
Terminote tl1e project. 
If a selection is made 
If duplicate item 
Disploy ''Duplicate~ rnesoage. 
Else 
Add item to the list. 
Clear the list's Text Property. 
If ~'Offee Uavor selected then 
Remove selected item. 
Else 
Display error meosage. 
Display n meuage box to C<lnfirm the clear. 
If uoer clicks Yeo 
Clear the coffee list. 
Display list COWl! in message box. 
Displll)' the About box. 
\rrite thP Project Follow the sketch .in Figure 7.1.2 to create the form. Figure 
7.13 shows the completed form. 
• 
Set the properties of each object as you have planned. 
Write the code. Working from the pseudocode. write each event procedure. 
• 
When you complete the code. use a variety of data to thoroughly testlhe 
project. 
313 

314 
S 
l 
\ 
L 
n 
' 
" 
C 
Li4111. Loop•. and Printing 
The main form for the hands-on project. 
fil.. 
_Edit 
t! .. lp 
Select Cdfee lind s~ 
!;o!iee Aavor 
@f.J .. . i;tl 
liYn.P Flavor 
Chocol<lle 
Hazetu 
lnsh Cieme 
Clrange 
Till' I>I'Oj('<'l (~udiug- Solution 
Main Fonn 
'Project: 
'Programmer: 
'Date: 
'Description: 
'Folder: 
Ch07Hands0n 
Bradley/Millspaugn 
June 2010 
Maintain a list of coffee flavors; print the selected flavor 
of coffee and syrup or print a list of all of the coffee flavors. 
Ch07Hands0n 
Public Class FlavorsForm 
Private Sub ExitToolStripMenuitem Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitToolStripMenuitem.Click 
' End the program. 
Me. Close() 
End SUb 
Private Sub AddCoffeeFlavorToolStripMenuitem_Click(ByVal sender As System.Object , 
ByVal e As System.EventArgs) Handles AddCOffeeFlavorToolStripMenuitem.Click 
• Add a new coffee flavor to the coffee list. 
With CoffeecomboBox 
· Test for blank input. 
If .Text <> "" Then 
· Make sure item is not already on the list. 
Dim ItemFoundBoolean As Boolean 
Dim Itemindexlnteger As Integer 
Do Until ItemFoundBoolean or Itemindexinteger = .Items.count 
If .Text = . Items (Itemin~exintege r ).ToSt ring( ) Then 
ItemFoundBoolean = True 
Loop 
Exit Do 
Else 
Itemlndexinteger += 1 
End If 
If ItemFoundBoolean Then 
MessageBox.Show( "Duplicate item . •, "Add Failed" , 
MessageBoxButtons .OK, MessageBoxicon.Exclamation) 

C IIAI•Tt:
R 
7 
Else 
Else 
If it's not in t he list, add it . 
. Items.Add( .Text) 
.Text 
End If 
MessageBox.Show("Enter a coffee flavor to add' , 
' Missing Data", MessageBoxButtons.OK, 
MessageBoxlcon.Exclamation) 
End If 
.Focus() 
End With 
End Sub 
Private Sub PrintAllToolStripMenuitem_Click(ByVal sender As System .Object, 
ByVal e As System.EventArgs) Handles PrintAllToolStripMenultem.Click 
' Begin the print process to print all items. 
PrintAllPrintDocument.Print() 
End Sub 
Private Sub PreviewAllToolStripMenultem_Click(ByVal sender As Object, 
ByVal e As System .EventArgs) Handles PreviewAllloolStripMenultem.Click 
' Begin the process for print preview of all items. 
PrintPreviewOialog1.Document = PrintAllPrintDocument 
PrintPreviewOialog1.ShowOialog() 
End Sub 
Private Sub PrintSelectedToolStripMenultem1_Click(ByVal sender As System.Object, 
ByVal e As System .EventArgs) Handles PrintSelectedToolStripMenuitem1 .Click 
' Begin the print process to print the selected item. 
If SyrupListBox.Selectedlndex = -1 Then 
' Select (None) if nothing selected. 
SyrupListBox.Selectedlndex = 0 
End If 
If CoffeecomboBox .Selectedindex <> -1 Then 
' Items selected. 
PrintSelectedPrintOocument.Print() 
Else 
' No ite~ selected. 
MessageBox.Show( "Select a flavor from the coffee list• , 
"Print Selection", MessageBoxButtons.OK, MessageBoxlcon.Exclamation) 
End If 
End Sub 
Private Sub PreviewSelectedToolStripMenuitem1_Click(ByVa1 sender As Object, 
ByVal e As System .EventArgs) Handles PreviewSelectedToolStripMenultem1.Click 
· Begin the process for print preview of the selected item. 
If SyrupListBox .Selectedlndex = -1 Then 
· Select (None) i f nothing selected. 
SyrupListBox .Selectedlndex = 0 
End If 
If CoffeeComboBox.Selectedlndex <> - 1 Then 
· Item selected. 
Else 
PrintPreviewOialog1.Document = PrintSelectedPrintOocument 
PrintPreviewDialog1.ShoWOialog() 
· No item selected. 
liS 
MessageBox. Show( •select a flavor from the coffee list.", "Print Selection", 
MessageBoxButtons.OK, MessageBoxlcon.Exclamation) 
End If 
End Sub 

316 
\ 
S 
l 
\ 
L 
It .\ 
.. 
£ 
Li.ts. Wop!. and Printing 
Private Sub PrintAllPrintDocument_PrintPage(ByVal sender As Object, 
ByVal e As System.Drawing.Printing.PrintPageEventArgs 
) Handles PrintAllPrintDocument. PrintPage 
' Handle printing and print previews when printing all. 
Dim PrintFont As New Font ("Aria!", 12) 
Dim LineHeightSingle As Single ; PrintFont.GetHeight + 2 
Dim HorizontalPrintLocationSingle As Single = e.MarginBounds.Left 
Dim VerticalPrintlocationSingle As Single = e.UarginBounds.Top 
Dim PrintLineString As String 
1 Print the heading. 
Using Headingfont As New Font("Arial", 14, FontStyle.Bold) 
e .Graphics .DrawString ("flavors • , Heading Font, 
Brushes.Black, HorizontalPrintLocationSingle, 
VerticalPrintLocationSingle) 
End Using 
' Loop through the entire list. 
For Listindexinteger As Integer = o To CoffgeComboBox.Items.Count-
1 
Incre~ent the Y position for the next l ine. 
VerticalPrintLocationSingle += LineHeightSingle 
' Set up a line. 
PrintLineString; CoffeeComboBox.Items(Listlndexlnteger).ToString() 
· send the line to the graphics page object . 
e.Graphics.DrawString(PrintlineStringl PrintFont , _ 
Brushes.Black, HorizontalPrintLocationSingle, verticalPrintLocationSingle} 
Next Listindexinteger 
End Sub 
Private Sub PrintSelectedPrintDocument_PrintPage(ByVal sender As system.Object, 
ByVal e As System.Drawing.Printing.PrintPageEventArgs 
) Handles PrintSelectedPrintDocument.PrintPage 
' Handle printing and print previews when printing selected items. 
Dim PrintFont As New Font( "Arial", 12) 
Dim HeadingFont As New Font ( "Arial • , 14, FontStyle. Bold) 
Dim LineHeightSingle As Single = PrintFont.GetHeight + 2 
Dim HorizontalPrintlocationSingle As Single= e .MarginBounds.Left 
Dim VerticalPrintlocationSingle As Single= e.MarginBounds .Top 
Dim PrintlineString As String 
' Set up and display heading lines. 
PrintLineString = "Print Selected Item' 
e.Graphics.Drawstring(PrintLinestring, HeadingFont, 
Brushes.Black, HorizontalPrintLocationSingle, verticalPrintLocationSingle} 
Printlinestring = "by Programmer Name• 
VerticalPrintLocationSingle += LineHeightSingle 
e.Graphics.Drawstring(PrintLineString, HeadingFont, 
Brushes.Black, HorizontalPrintLocationSingle, VerticalPrintLocationSingle} 
' Leave a blank line between the heading and detail line. 
VerticalPrintLocationSingle += LineHeightSingle * 2 
' Set up the selected line. 
PrintLineString = 'Coffee: • & CoffeeconboBox.Text & 
Syrup: • & SyrupListBox.Text 
' Send the line to the graphics page object. 
e.Graphics.orawString(PrintLineString, PrintFont, 
Brushes.Black, HorizontalPrintLocationSingle, VerticalPrintLocationSingle) 
End Sub 
Private Sub ClearCoffeeListToolStripMenuitem_Click(ByVal sender As Object, 
ByVal e As system.EventArgs) Handles ClearCoffeeListToolStripMenuitem.Click 
' Clear the coffee list. 
Dim ResponseDialogResult As DialogResult 

i 
ResponseDialogResult = MessageBox.Show('Clear the coffee flavor list?" , 
"Clear coffee list", MessageBoxButtons.YesNo, MessageBoxicon.Ouestion) 
If ResponseDialogResult = DialogResult.Yes Then 
CoffeecomboBox.Items.Clear() 
End If 
End Sub 
Private Sub RemoveCoffeeFlavorToolStripMenuitem_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles RernoveCoffeeFlavorToolStripMenuitem.Click 
' Remove the selected coffee from list. 
With CoffeecomboBox 
If .Selectedlndex <> - 1 Then 
.Items.RemoveAt(.Selectedlndex) 
Else 
MessageBox.Show("First select the coffee to remove•, 
"No selection made', MessageBoxButtons.OK, 
MessageBoxicon.Exclamation) 
End If 
End With 
End Sub 
Private Sub DisplayCoffeecountToolStripMenultem_Click(ByVal sender As Object, 
ByVal e As system.EventArgs 
) Handles DisplayCoffeecountToolStripMenuitem.Click 
· Display a count of the coffee list. 
Dim Messagestring As String 
MessageString = "The number of coffee types is " & 
CoffeecomboBox.Items.Count & ·. · 
MessageBox.Show(MessageString, 'R 'n R Coffee Type Count", 
MessageBoxButtons.OK, MessageBoxlcon.Information ) 
End Sub 
Private Sub AboutToolStripMenuitem Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles AboutToolStripMenuitem.Click 
' Display the About form. 
AboutForm.ShowDialog() 
End Sub 
End Class 
About Fonn 
'Class: 
'Programmer: 
'Date: 
'Description : 
' 
'Folder: 
AboutForm 
Bradley/Millspaugh 
June 2010 
Display information about the program 
and the programmer. 
Ch07Hands0n 
Public Class AboutForm 
Private Sub OkButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles Ok8utton.Click 
' Close the form . 
Me.Close() 
End Sub 
End Class 
317 

318 
\ 
s 
l 
.\ 
I. 
u .\ 
s 
l ' 
Li.ts. Loop•. atwl Printing 
l. List boxes and combo boxes hold lists of values. 'l11e three styles of combo 
boxes are simple combo boxes. drop-down combo boxes. and drop-down 
lists. 
2. The size of a list box or combo box is determined at design time. If all of 
the items ~ill not fit into the box. VB automatically adds scroll bars. 
3. The values for tl1e items in a list are stored in the hems property. which is 
a collection. The items can be entered in the Items prc-perty in the Proper-
ties window. At run time. items are added to lists using the Items.Add or 
Items . Insert method . 
.1-. The Selectedlndex property can be used to select an item in the list or to 
detem1ine which item is selected. 
S. The Ttems.Count property holds the number of elements in tl1e lis1. 
6. The Items collection holds all elements of the list The individual elements 
can be referenced by using an index. 
7. The Items. Remove and Items. RemoveAt methods remove one element 
from a list. 
8. The I terns. Clear metllod may be used to clear all of tbe contents of a list 
box's Items collection at once. 
9 . Code can be \Hillen for several events of list boxes and combo boxes. 
Combo boxes have a Text Changed event; both combo boxes and list boxes 
have Enter and Leave events. 
LO. A loop allows n statement or series of statements to be repeated. Do/Loops 
continue to execute the statements in the loop until a condition is mel. 
Each pass through a loop is called an iteration.. 
l l. Do/ Loops can have tl1e condition test at tl1e top or the botlom of the loop 
and can use a While or Until to test the condition. 
12. A Do/ Loop can be used to locate a selected item in a combo box. 
13. A loop index controls For/ Next loops; the index is initialized to an initial 
value. After each iteration. the loop index is incremented by the Step 
value (tl1e increment). ll'hich defaults to l. The loop is terminated when the 
loop index is greater than the ending value. 
14 . The PrintDocument and PrintPreviewOialog components can be used to 
send progmm output to the printer or the screen. 
I S. The Print met bod of tlle Print Dialog control begins a ptint opemtion. The 
control's Print Page event fires once for each page to prii1L. All printing 
logic belongs in the Print Page event procedure. The Print Page event con-
tinues to fire as long as the HasMorePages property of the PrintDocument 
component has a value of True. 
16. The page to print or display is a graphics object. Use the DrawString 
method to send a siting of text to Llle page. specifying X and Y coordinates 
for the string. 
l 7. AJ ignir1g columns of numbers is difficuh using proportional fonts. Numbers 
can be right-aligned by formatting the number. measuring the lengtll of the 
formatled string in pixels, and subtracting ilie length lrom the right end of 
the column for the X coordinate. 

C
ll
i\
I'T
E
I& 
callback 302 
collection 285 
Combo Box control 284 
Do and Loop statements 292 
DO/Loop 292 
DrawString method 305 
drop-down combo box 284 
drop-d01m list 284 
entry test 292 
exit test 292 
For nnd Next statements 295 
For/ Next loop 295 
Items property 286 
Items. Add method 286 
Items.Clear method 
290 
Jtems.Cow1t property 288 
Items. I nsert method 287 
Items. Remove method 
289 
7 
l. What is a list box? a combo box? 
Items. RemoveAt method 
289 
iteration 292 
List Box control 
284 
loop 292 
loop index 295 
posttest 292 
pretest 292 
Print method 302 
print preview 308 
Print Document component 301 
PrintPage event procedure 302 
PrintPreviewDialog component 308 
Selected Index property 288 
simple combo box 
284 
simple list box 284 
Sorted property 287 
Using block 309 
2. Name and describe the three styles of combo boxes. 
3. How can you make scroll bar.; appear on a list box or combo box? 
4. Explain the purpose of the Selected Index property and the ltems.Count 
property. 
5. When and how is information placed inside a Ust box or a combo box? 
6. In what situation would a loop be used in a procedure'? 
7. Explain the difference between a pretest and a posttest in a Do/ Loop. 
8. Explain the differences between a Do/Loop and a For/ Next loop. 
9. What are the steps in processing a For/ Next loop? 
10. Discuss how and when the values of the loop index change throughout the 
processing of the loop. 
ll. What is the purpose of the PrintDocument component? the Print Preview-
Dialog component? 
12. In what procedure do you write the logic for sending output to the printer? 
13. What is the purpose of the X and Y coordinates on a print page? 
319 

320 
S 
l ' 
\ 
I. 
ll 
\ 
s 
C 
/,i.t.<. Loop>. and Printing 
Create a project for obtaining student information. 
Startup form controls are as follows: 
• Text boxes for entering the name and units completed. 
• Radio buttons for Freshman. Sophomore. Junior. and Senior. 
• Check box for Dean's List. 
• A list box for the following majors: Accounting. Business. Computer 
Information Systems. and Marketing. 
• A simple combo box for t11e name oft11e high school-initially loaded 
with Franklin. Highland. West Highland. and Midt01m. If the user 
types in a new school name. it should be added to t11e list. 
• Print button iliat prints the data from the form. Use ilie Print Preview 
dialog box. 
• An OK button that clears the entries from the form and resets the focus. 
The button should be the Accept button for ilie form. 
M enus 
The File menu should have an item for Print Schools and Exit. The Edit 
menu should have an item for Add High School: the H9lp menu should have 
an item for t11e About box. 
Note: Print your name at the top of the printer output for the schools. 
Display the printer output in the Print Preview dialog box. 
7.2 
R 'n R--for Reading 'n Refreshment needs a project that contains a form 
for entering book infom1ation. 
Form Controls 
• Text boxes for auilior and title. 
• Radio buttons for type: fiction or nonfiction. 
• Drop-down list for Subject that will include Best-...'eller. Fantasy. Reli-
gion. Romance. Humor. Science Fiction. Business. Philosophy. Edu-
cation. Self-Help. and Mystery. 
• List box for Shelf Number containing RC-1111. RC-1112. RC-1113. 
and RC-1114. 
• Print button that prints the data from the form. Use the Print Preview 
dialog box. 
• An OK button that clears the entries from the form and resets the focus. 
Make this the Accept button. 
Menrts 
The File menu will have items for Print Subjects and Exit. TI1e Help menu 
will have an item for About iliat displays the About box. 
Note: Print your name at the top of the printer output for the subjects. 
Display ilie printer output in the Print Preview dialog box. 

C
ll
i\
I•Tt;
ll 
7 
i.3 Create a project to input chartering information about yachts and print a 
summary report showing the total revenue. number of charters. and aver-
age hours per charter. 
Jlfenus 
The FikJ menu will contain items for Print Sumtnal)'. Print Yacht Types. and 
Exit. Place a separator before Exit. The Edt menu should have items for 
Clear for Next Charter. Add Yacht Type. Remove Yacht Type. and Display 
COunt of Yacht Typ9s. Include a separator after the CkJar item. The Hep 
menu ~ill contain oo About item that displays an About fom1. 
The Form 
• The form should contain text boxes for responsible party. hours char-
tered. and the calculated price of the charter. 
• A drop-do'l'!'11 combo box will contain the type of yacht: Ranger. 
Wavelength. Catalina. Coronado. Hobie. C & C. Hans Christian. and 
Excaliliur. Any items that are added to the text box during processing 
must be added to the Jisl. 
• A drop-down list will contain the sizes: 22. 24. 30. 32. 36. 38. 45. 
(No new sizes can be entered at run tjme.) 
• An OK bulton will calculate unci display the price and add to t11e totals. 
The calculations 11ill require price per hour. Use the foUm,ing chart: 
Size 
Houo-ly Role 
22 
2-1 
30 
32 
36 
38 
45 
95.00 
137.00 
160.00 
19"2.00 
250.00 
400.00 
550.00 
• A G98rbullon will cleur the contents of the screen controls. The func-
tions of the CkJar button are t11e same as for the Clear for Next Charter 
menu item. 
• Make the OK button the Accept button and t11e Clear bulton t11e form·s 
Cancel button. 
Sunullllty Report 
The summary report will print the summary information and send the re-
port to a Pmt Prewew dialog box. The summary information "ill include 
Number of Charters. Total Revenue. and Average Hours Chartered. In-
clude your nan1e on the output and identifying labels for the summary 
infonnal ion. 
321 

322 
\ 
~ l 
\ 
I, 
H 
\ 
S 
C.' 
U..r.s. Loops. and Prinling 
Yac/u 'Pypes Report 
Display the yacht types in the combo box in the Print Preview dialog box. 
Include your name and a title at the top of the report. 
i .4 Create a project that contains a list box 11ith the names of all U. . slates 
and territories. \l' hen the user types the first letters of the state into a text 
box. set the Selected Index property of the list box to display the appro-
priate nan1e. Include an Exit menu item. 
Alahama 
Kentucky 
Oklahoma 
Ala•ka 
Louismms 
Oregon 
Amcric•n Snmou 
Maine 
PeiUl!lylvllllia 
Ariwnu 
Maryland 
Puerto Rico 
Arkw1••~ 
MW!oachusetts 
Rhode lolw1d 
California 
Michig<m 
South Carolina 
Colorndo 
Minneoota 
South Dakota 
Connect icul 
Miosi .. ippi 
TennesJ~~ee 
Delaware 
Mi•souri 
Texas 
District or Colwnbm 
Montana 
Trust Territories 
Flor..la 
Nebraska 
Utah 
Geor~a 
N"'•a.da 
Vermont 
Cunm 
New l lan1pshire 
\irgin t.land. 
llawa.ii 
New Jenoey 
\"upnia 
Idaho 
New Mexico 
Wa~on 
llli11oi• 
N<'W York 
Weot Virginia 
lodiona 
North Carolina 
'Wisconsin 
Iowa 
North Dakota 
Wyominl! 
Kan$1l!S 
Ohio 
7.5 
Muintain o list of bagel types for Bradley's Bagels. Use a drop-do1111 
combo box to hold the bagel types and use buttons or menu choices to 
Add Bagel Type. R6move Bagel Type. Clear Bagel List. Print Bagel List. Dis-
play Bagel Type Count. and Exit. Keep the list sorted in alphabetic order. 
Do not allow a blank type to be added to the list. Display an error mes-
sage if the user selects RemoV9 without first selecti11g a bagel type. 
Before clearing the list. display a me,gage box to confirm tbe opemtion. 
Here are some su~ested bagel types. You can make up your oKll list. 

C
II
1\
I1
T
E
il 
7 
323 
Pl:lln 
Poppy seed 
Egg 
Sesame seed 
Rye 
Banana nut 
Salt 
Blueberry 
7.6 
Modify Programming Exercise 7.5 to not allow duplicate bagel types to be 
added to the list. 
VB !Uall Order I 
Create a project for VB Mail Order to maintain a list of 
catalogs. Use a drop-down combo box for the catalog 
names. and allow the user to enter new catalog names. 
delete catalog names. display a count of the number of 
catalogs. clear the catalog I ist. or print the catalog list. 
Do not allow a blank catalog name to be added to 
the lisl. Display an error message if the user selects 
Remove without first selecting a catalog name. Before 
clearing the list. display a message box to confinn the 
operation. 
To begin. the catalog list should hold these catalog 
names: Odds and Ends. Solutions. Camping Needs. 
TooiTime. Spiegel. The Outlet. and The Large Size. 
Display the printed output in tlte Print Preview di-
alog box. include your name and a heading at the top 
of the report. 
VB Auto Cenwr 
Create an application for the car wash located at VB 
Auto Center. 
The form will contain three list box or combo box 
controls that do not permit the user to type in items at 
rwt time. The first list will contain the names of the 
packages available for detailing a vehicle: Standard. 
Deluxe, Executive, or Luxury. 
The contents of the other two lists will vary de-
pending upon the package selected. Display one list 
for the interior work and one list for the exterior work. 
Store tlte descriptions of the items in string const.ants. 
You must clear the I ists for the interior and exterior for 
each orde r and add ne~· items to the Lists each time 
the user makes a selection from the package list. 
Use a clrop-down list lo allow the user to select the 
fragrance. Tite choices are Hawaiian Mist. Baby Pow-
der, Pine. Country floral, Pina Colada. and Vanilla. 
Include menu items for Print Order. Clear. and Exft 
with appropriate access keys. The print option should 
send its output to the Print Preview window. Include 
your name and a heading at the top of the report. 
The Order printout will contain the package name 
(Standard. Deluxe. Executive. or Luxury). the interior 
and exterior items included. and the fragrance se-
lected. Use a For/ Next loop when printing the inte-
rior and exterior lists. 

324 
,. 
s 
l ' 
\ 
•• 
R 
\ 
s 
( ' 
U.ts. Loop•. ancl Prinling 
Item D~er-iption 
s 
D 
E 
L 
Exterior 
Hand w..,h 
./ 
./ 
./ 
./ 
Hand Wax 
./ 
./ 
./ 
Check Engine Fluids 
./ 
./ 
Detail Engine Compartment 
./ 
Detail Undercarriage 
./ 
Interior 
Fragrance 
.I 
./ 
./ 
./ 
Shampoo Carpets 
./ 
./ 
./ 
Shampoo Upholstery 
./ 
Interior Protection Coat 
(dashboard and console) 
./ 
Scotchgar<(fll 
./ 
No~<: ~ 
D-Delue: E----Execulive; L---Lwtury 
VIdeo Ronaaza 
Maintain a Ust of mol'ie categories. Use a drop-down 
combo box to hold the movie types. keeping the list in 
alphabetic order. Use buttons or menu choices to Add 
a Category. Remove a Category. Clear All Categories. 
Print the Category List. Display the Movie Category Count. 
and Exit. Include appropriate access keys on your form 
and/or menu items. 
Do not allow a blank type to be added to the list. 
Display an error message if the user selects Remove 
without first selecting a movie category. Before clearing 
the list. display a message box to confinn the operation. 
The starting categories are 
• 
Comedy 
• 
Drama 
• 
Action 
• 
Sci-Fi 
• 
Horror 
Display the printed output in the Print Preview di-
alog box. lnclude yotu name and a heading at t11e lop 
of the report. 
Very Very Boards I 
Write a project to maintain a list of shirt styles. Keep 
the styles in a drop-down combo box. with styles such 
as crew. turtleneck. or crop top. 
Add a Style menu •~ith options to Add Style, Re-
move Style. Gear Style Ust. and Count Styfes. Add a 
Print Style Ust option to the File menu. and include ac-
cess keys and keyboard shortcuts for the menu items. 
Display the printed output in the Print Preview di-
alog box. Jnclude your name and a heading al the lop 
of the report. 

c 
D 
A 
p 
T 
E 
Arrays and 
Collections 
R 
I . Establish an array and refer to individual elements in the array with 
subscripts. 
2 . Use the For Each/Next to traverse the elements of an array. 
3. Create a structure for multiple fields of related data . 
..f. Accwnulate totals using arrays. 
5. Distinguish between direct access and indirect access of a table. 
6~ Write a table lookup for matching an array element. 
7. Combine the advantages of list box controls with arrays. 
8 . Store and look up data in multidimensional arrays. 
9 . Create a collection and use it to manage a group of elements. 

326 
v 
S 
l l 
,\ 
I. 
C 
AlTay• and Collection.• 
Single-Dimension Arrays 
An at-ray is a list or series of values, similar to the Items collection in a list box 
or a combo box. You can think of an array as a list box without the box- without 
the visual representation. Any time you need to keep a series of variables for later 
processing. such as reordering. calculating, or printing, you can set up an array. 
Consider an example that has a form for entering pruduct information one 
product at a time. After the user has entered many products. you will need to 
calculate some statistics, perhaps use the informatiou in different ways, or priut 
it. Of course. each time the user enters the data for the next product. the previ-
ous contents of the text boxes are replaced. You could assign the previous 
values to variables. but they also would be replaced for each new product. An-
other approach might be to create multiple variables. such as ProductlString. 
Product2String, Product3String. and so on. TI1is approach might be reasonable 
for a few entries. but what happens when you need to store 50 or 500 products? 
\ifhen you need to store multiple values, use an array. An array is a series 
of individual vatiables. all referenced by the same name. Sometimes arrays are 
referred to as /.nbles or subscripted ·variables. For an an-ay for storing names, 
you may have NameString(O). NameString(l). NameSiling(2). and so on. 
Each individual variable is called an element of the anay. TI1e indh~dual 
elements are treated the same as any other variable and may be used in any 
statement. such as an assignment statement. TI1e subse~ipt (which also may be 
called an ittdex) iuside the pru·entheses is the position of the element 11ithin the 
array. Figure 8.1 illustrates an array of l 0 elements with subscripts from 0 to 9. 
SuJlsc l"ipls 
(0) 
(1) 
(2) 
(3) 
(4) 
(5) 
(6) 
(7) 
(8) 
(9) 
NameString array 
Janet Baker 
George Lee 
SueLi 
Samuel Hoosier 
Sandra Weeks 
William Macy 
Andy Harrison 
Ken Ford 
Denny Franks 
Shawn James 
The real advantage of using an array is not realized until you use variables for 
subscripts in place of the constants. 
NameString(Indexlnteger) = "" 
Debug.WriteLine(NameString(Indexlnteger)) 
F i g ut•e 8.1 
An array of string variables 
with 10 elements. Subscripts 
are 0 through 9. 

C
II
,\I>
'I'
I'
R 
u 
Subscripts may be constants. variables, or numeric expressions. Although 
the subscripts must be integers, Visual Basic rounds any noninteger subscript. 
A question has probably occurred to you by now: How many elements are 
there in the NameString array? The answer is that you must declare the array 
name and the number of elements. 
Tbe lleclm·ntion Statements fot· Al•t•nys-Ceuet•al Fot'lliS 
You can declare arrays by using the Dim. Public. Private. or Friend key-
word. Just as with any other variable. the location of the declaration determines 
the scope and lifetime of the aiTay variables. 
327 
~.--------------------------------------------------------------------------. 
~ 
Private ArrayName(UpperSubscript) As Datatype 
;: ~ 
Dim ArrayName() As Data type 
= {Initial ValueList} 
!!!... 
Dim ArrayName As Datatype() = {Initial ValueList} 
The first declaration above creates storage for the specified number of ele-
ments and initializes each numeric variable to 0. In the case of string arrays. 
each element is set to an empty string (no characters). 
In the second and third fonns of the declaration statements. you specify 
initial values for the an"lly elements. which detennines the number of elements. 
You cannot declare the upper subscript arui initial values. 
TI1c Declaration Statemeuts for· Anays-Examples 
Dim NameString(25) As String 
Dim BalanceDecimal(10) As Decimal 
Dim ProductString(99) As String 
Dim Indexinteger() As Integer = {1, 5, 12, 18, 20} 
Dim Indexinteger As Integer() = {1, 5, 12, 18, 20} 
Dim DepartmentsString() As String = {"Accounting", "Marketing", "Human Relations"} 
Private CategoryString(10) As String 
Friend IdNumbersString(5) As String 
Array subscripts are zero based. so the first element is always element zero. 
The upper subscript is the highest subscript-one less than the number of ele-
ments. For example. the statement 
Dim CategoryString(10) As String 
creates an array of ll elements with subscripts 0 through 10. 
Notice that you declare a data type for the array. All of the aJTay elements 
must be the same data type. 
Valid Snbse.-ipts 
A subscript must reference a valid element of the array. lf a list contains 10 
names. it wouldn't make sense to ask: What is the 15th name on the list? or 
What is the 2Y2th name on the list? Visual Basic rounds ft"llctional subscripts 
and throws an exception for a subscript that is out of range. 
Note: Arrays are based on System.Anay. which is a collection. You will 
learn more about collections later in this chapter. 

328 
l ' 
C 
ATTays and CollectioiiS 
Dim Namestring(20) As String 
Const INDEX_Integer As Integer = 10 
After execution of the preceding statements, which of the following are valid 
subscripts? 
l. NameString(20) 
2. NameString(INOEX_Integer) 
3. NameString(INOEX_lnteger * 2) 
4. NameString(INOEX_lnteger * 3) 
5. NameString(O) 
6. NameStringQNDEX_lnteger - 20) 
7. NameString(lNUEX_b1teger /3) 
8. NameString(INOEX_Integer I 5 - 2) 
For Each/Next Statements 
When you use an array. you need a way to reference each element in the an'lly. 
For /Next loops. which you learned to use in Chapter 7. work well to traverse 
the elements in an array. Another handy loop construct is the For Each and 
Next. The significant advantages of using the For Each and Next are that you 
don't have to manipulate the subscripts of the array or know how many ele-
ments there are in the array. 
Note; Array elements are read-only in the body of a For Each loop. You can-
not modify the contents of an array element inside the body of a For Each loop. 
The For E<wh <md Next Statemcnts--Cenet·al Fonn 
rr For Each ElementName (As Datatype) In ArrayName 
3 ~ 
· Statement(s) in loop. 
~ Next [ElementName] 
Visual Basic automatically references each element of the array. assigns its 
value to ElementName. and makes one pass through the loop. If the array has 
12 elements, for example, the loop will execute 12 times. The variable used for 
E.lementName must be the same data type as the array elements or an Object 
data type. It's best to declare the variable for Element Name as part of the For 
Each statement. which creates a block-level variable. 
lu the following example. assume that the array NameString has already 
been declared and holds data. and the variable OneNameString will hold the 
individual va]ues of NameString. one element at a time. 
11Je For Each and Next Statements--Example 
~ r----------------------------------------------------------------------. 
e 
For Each OneNameString As String In NameString 
= 
· write one element or tne array . 
~ 
Debug.Writeline(OneNameString) 
Next OneNameString 

C 
II 
A 
1• 
'I' 
" 
ll 
The For Each loop will execute if the array has at least one element. All the 
statements within the loop are executed for the first element. lf the array has 
more elements, the loop continues to execute until all the elements are 
processed. When the loop finishes, execution of code continues witJ1 the line 
following the Next statement. 
Note: You may use an Exit For statement witJ1in the loop to exit early. 
Structures 
You have been using the VB data types, such as Integer, String. and Decimal, 
since Chapter 3. Now you willleam to combine multiple fields of related data 
to create a new su·uctm·e. In many ways. a structure is similar to defining a 
new data type. For example, an Employee structure may contain last name. first 
name. social security number. street. city. state, ZIP code. date of hire. and pay 
code. A Product structure might contain a description. product number, quan-
tity, and price. You can combine the fields into a structure using the Structure 
and End Structure statements. 
Tbe Su·ucuu·e aud End Structure Statcments-Ceneral Form 
(Public 1 Private 1 Friend! Structure NameOfStructure 
Dim FirstField As DataType 
Dim SecondField As DataType 
End Structure 
The Structure declaration cam1ot go inside a procedure. You generally place 
the Structure statement at the top of a file wiili the module-level declarations. 
You also can place a Structure in a separate file in your project. 
329 
The Su·uctm·e and End Su·ucture Statements-Examples 
~ .--------------------------------------------------------------. 
.... 
~ e 
~ 
~ 
Structure Employee 
Dim LastNameString As String 
Dim FirstNameString As String 
Dim SocialSecurityNumberString As String 
Dim StreetString As String 
Dim CityString As String 
Dim StateString As String 
Dim ZipCodeString As String 
Dim HireDate As Date 
Dim PayCodeinteger As Integer 
End Structure 
Friend Structure Product 
Dim Descriptionstring As String 
Dim ProductNumberString As String 
Dim Quantityinteger As Integer 
Dim PriceDecimal As Decimal 
End Structure 
Structure SalesDetail 
Dim SaleDecimal() As Decimal 
End Structure 

330 
v 
S 
l l 
,\ 
I. 
C 
Arrays and Collections 
By default. a structure is Public. You can declare the structure to be Friend 
or Private if you wish. 
If you include an array inside a structure, you carmot specify the number 
of elements. You must use a ReDim statement in your code to declare the num-
ber of elements. 
Declal'ing Val'iables Base<l on a Str.·uctur·e 
Once you have created a structure. you can declare variables of the structure. 
just as if it were another data type. 
Dim OfficeEmployee As Employee 
Dim warehouseEmployee As Employee 
Dim WidgetProduct As Product 
Dim InventoryProduct(100) As Product 
Dim HousewaresSalesDetail As SalesDetail 
Dim HomeFurnishingsSalesDetail As SalesDetail 
Accessing the Ele ments in a Str·uctm·e Variable 
Each field of data in a variable declared as a stJ·ucture is referred to as an ele-
ment of the structure. To access elements. use the dot notation similar to that 
used for objects: Specify Variable.Elemenl. 
OfficeEmployee.LastNameString 
OfficeEmployee.HireDate 
warehouseEmployee. LastNameString 
WidgetProduct .DescriptionString 
WidgetProctuct.auantityinteger 
WidgetProduct.PriceDecimal 
InventoryProduct(Indexlnteger).DescriptionString 
InventoryProduct(Indexlnteger) .auantitylnteger 
InventoryProduct(Indexlnteger) .PriceDecirnal 
Notice the use of indexes in the preceding examples. Each example was 
taken from the preceding Structure and Dim statements. A variable that is 
not an array, such as WidgetProduct, does not need an index. Howeve1: for 
InventoryProduct, which was dimensioned as an array of 101 elements (0 
through 100). you must specify not only the Inventory Product item but also the 
element within the structure. 
Including <UJ Art·ay in a Str·uctm·e 
The Sales Detail structure is a little more complicated than the other structures 
described above. In this structure, we want to include an array of seven vari-
ables, one for each day of the week. However. VB does not allow you to declare 
the number of elements in the Structure declaration. You must use the ReDim 
statement inside a procedure to give the array a size. 
' Module-level deolarations. 
Structure SalesDetail 
Dim SaleDecimal() As Decimal 
End Structure 
Private HousewaresSalesDetail As SalesDetail 

C 
II 
A 
1• 
'I' 
" 
ll 
' Inside a procedure: 
' 
Establish the number of elements in the array . 
ReDim HouseWaresSal es Detai l .Sal eDecimal (6) 
' In processing. 
HousewaresSalesDetail.SaleDecimal(Dayindexinteger) = currentDaySalesDecimal 
Because the SaleDecimal element of the SalesDetail structure is declared 
as an array. you must use a subscript to refer to each individual element within 
the structure. 
Ft•ctlhack H.2 
l. Write a Structure statement to hold student data containing last name. 
first name. student number. number of units CQmpleted. and GPA. The 
new structure should be called "Student". 
2. Declare an array of 100 students that will use the structure for student 
infonnation. 
3. Write the Structure statement for a structure called "Project" con-
taining a project name. form name. and folder name. 
4. Declare a variable called "My Project" based on the Project structure. 
5. Declare an array of 100 elements called "OurProjects". based on the 
Project structure. 
Using Array Elements for Accumulators 
Array elements are regular vaiiables and pe1form in the same ways as all vari-
ables used so far. You may use the subscripted variables in any way you choose. 
such as for counters or total accumulators. 
To demonstrate the use of array elements as total accumulators, eight totals 
will be accumulated. For this example. eight scout troops are selling raffle tick-
ets. A separate total must be accumulated for each of the eight groups. Each 
time a sale is made. the number of tickets must be added to the correct total. 
The statement 
Dim Totallnteger(7) As Integer 
declares the eight accumulators with subscripts 0 to 7. 
Adding to the Cor1·ect Total 
Assume tlmt your user inputs a group number into GrQupTextBox.Text and the 
number of tickets sold into SaleTextBox.Text. The sales may be input in any or-
der witl1 multiple sales for each group. Your problem is to add each ticket sale 
to the correct total. numbered 0 to 7, for groups numbered 1 to 8. 
You can subtract one from the group number to use as the subscript to add 
to the correct total. For example, if the first sale of 10 tickets is for group 4. the 
10 must be added to Totallnteger(3). (Figure 8.2 shows the form and the vari-
ables used for this example.) 
331 

332 
l ' 
C 
Arrays and Collection.• 
The group nwnber enu,red in GroupTextBox is u.sed as a subscript to determine the correct Total/nu,ger a rray element 
to which to a.dd. 
(3) 
(4) 
(5) 
(6) 
(7) 
GroupNumberlnteger 
(GroupTextBox.Text - 1) 
3 
I0 ~-1---~-----~~~a
le~s ___ lO 
1-----1 
0 
1-----1 
0 
1-----1 
0 
1-----1 
0 
L----1 
= 1 @1~ 
-<---++--
GroupTextBox 
-<---++--
SaleTextBox 
<---++--
TotalButton 
' Convert input group number to subscript. 
GroupNumberinteger = Integer.Parse(GroupTextBox.Text) - 1 
' Add sale to the correct total. 
Salelnteger = Integer.Parse(SaleTextBox.Text) 
Tota l lnteger(GroupNumberl nteger) += Sal elnteger 
Of course. the user might enter an incorrect group number. Because you 
don't want the program to cancel with an exception, you must validate the 
group number. 
Try 
· Convert input group number to a subscript. 
GroupNumberinteger = Integer.Parse(GroupTextBox.Text)- 1 
If GroupNumberinteger >= o And GroupNumberinteger <= 7 Then 
Else 
' Add sale to correct total. 
Salelnteger = Integer.Parse(SaleTextBox.Text) 
Totalinteger(GroupNumberinteger) += Salelnteger 
MessageBox .Show( "Enter a valid group number (1 - 8) " , "Data Entry Error", 
MessageBoxButtons.OK, MessageBoxicon.Exclamation) 
End If 
Catch 
MessageBox .Show( "Numeric entries required for both group number and sales." , 
"Data Entry Error", MessageBoxButtons.OK, MessageBoxicon.Exclamation) 
End Try 
Using the group number as an index to the array is a technique called 
direct reference. TI1e groups are assigned numbers from 1 to 8. You can sub-
tract l from the group number to create the subscripts. which are 0 to 7. 

C 
II 
A 
1• 
'I' 
" 
ll 
Debugging AlTay P1·og•·ams 
You can view the contents of array elements when your program is in debugging 
time. Set a breakpoint and view the Autos window (Figure 8.3). You will need 
to click on the plus sign to the left of the anay name to view the individual 
array elements. 
Note: The Autos 11indow is not available in the Express Edition of Visual 
Basic. 
Autos 
• 'I X 
_l!l_.,. 
I.Va~~ 
Trr• 
. 
-
Y Groupl'lumberlnteger 
0 
Integer 
Q S.lelnt eger 
ill 
Integer 
lor.-E I •. 
.,. 
Q (0) 
20 
Integer 
~ (lj 
0 
!nte-gcr 
Q (l) 
0 
integer 
.., (3) 
10 
Integer 
Q l"J 
0 
integer 
Q (5) 
0 
Integer 
Q (&) 
0 
l"teg<r 
.., (I) 
0 
int~qtr 
-
m ~.l~OS ., 
Table Lookup 
Things don't always work out so neatly as having sequential group numbers that 
can be used to access the table directly. Sometimes you will have to do a little 
work to fu1d Qook up) the conect value and reference the array elements indi-
rectly. Reconsider the eight scout troops and their ticket sales. Now the groups 
are not numbered 1 to 8. hut 101, 103. llO. ll5. 121. 123. 130, and 145. The 
group number and the number of tickets sold are still input. and the number of 
tickets must he added to the conect total. .But now you must do one more step: 
determine to which array element to add the ticket sales. using a table lookup. 
The first step is to establish a stmcture with the group numbers and totals 
and then dimension an anay of the structure. Before any processing is done. 
you must load the group numbers into the table; the best place to do this is in 
the Fom1_Load event procedure. which is executed once as the fonn is loaded 
into memory. 
Place the following statements at the top of a form class: 
' Declare structure and module-level variables. 
Structure Group 
Dim GroupNumberString As String 
Dim Totallnteger As Integer 
End Structure 
' Hold group number and total for 8 groups. 
Private ArrayGroup(7) As Group 
333 
Fi~ua• e 8.3 
View the contents of an array 
in the Autos window at 
debugging time. 

334 
\ 
s 
l l 
\ 
I. 
It 
\ 
s 
(' 
Arra,·• 01od Collection.• 
ll1en initialize the values of the array elements by placing these statements into 
the Form_Load event procedure: 
Private Sub SalesForm_Load(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MyBase.Load 
' Initialize group numbers. 
ArrayGroup(O).GroupNumberString = 
ArrayGroup(1).GroupNumberstring = 
ArrayGroup(2).GroupNumberString 
ArrayGroup(3).GroupNumberString 
ArrayGroup(4) .GroupNumberstring 
ArrayGroup(5).GroupNumberString 
ArrayGroup(6).GroupNumberString 
ArrayGroup(7).GroupNumberString 
End Sub 
'101' 
'103' 
'110' 
'115' 
'121' 
'123" 
'130" 
'145" 
During program execution. the user still enters the group number and the num-
ber of ticket~ sold into text boxes. 
The technique used to find the subscript is called a table lookup. In this ex-
ample. the object is to find the element number (0 to 7) of the group number 
and add to tJ1e corresponding group total. If the user enters the third group 
number ("ll 0"). the subscript is 2 and the sale is added to the total for sub-
script 2. If the seventh group numbe r ("130") is entered. the sale is added to 
the total with the subscript 6. and so on. Hence. you need a way. given the 
group number in GroupTextBox.Text. to lind the corresponding subscript of the 
A rrnyGroup array. 
When Visual Basic executes tJ1e statement 
ArrayGroup(Indexinteger).Totalinteger += Salelnteger 
the value of Index Integer must be a number in the range 0 to 7. The task for the 
lookup operation is to fmd the number to place in Index Integer. based on the 
value of GroupTextBox.Text. Figure 8.4 shows the variables used for the 
lookup. Figure 8.5 shows the UM L action diagram of the lookup logic. 
Cw l ing u Tabl.- Lool..n11 
For a table lookup. you wiU find that a Do/Loop works better than For Each. 
As you compare to each element in the anay and eventually find a match. you 
need lo know the subscript of the matching element. 

C
ll
1\
l1
'l'
li
R 
335 
A lookup operation: The group number is look-ed up in the Array Group a:rray; the correct subscript is found and used to add 
the sale to the correct Total/ nteger. 
Index integer 
.---------------------+------ 2 
ArrayGroup array 
GroupNumberString 
Totallnteger 
•9 Scout Raffle Tid<et Sales 
(0) 
101 
0 
(1) 
0 
(2) 
10 
~ales 
10 
(3) 
llS 
0 
(4) 
121 
0 
(5) 
123 
0 
(6) 
130 
0 
(7) 
145 
0 
lndexlnteger = 0 
[Neither condition True] 
[FoundBoolean = True 
or lndexlnteger > 7] 
Add 1 to lndexlnteger 
Set F otmdBoolean 
Loop Complete. 
Continue with program. 
~---+t-- SaleTextBox 
4-----+1---
TotalButton 
OkButton 
Fif,f u1•e 8 . 5 
A UML action diagram of the 
logic of a lookup operation. 

336 
v 
S 
l l 
,\ 
I. 
' Accumulate the sales by group number. 
Dim Saleinteger As Integer 
Dim Inaexinteger As Integer = o 
Dim FoundBoolean As Boolean = False 
' Look up input group number to find subscript. 
Do Until FoundBoolean or Indexinteger > 7 
C 
AlTay• and Collection.• 
If GroupTextBox .Text = ArrayGroup(Indexinteger) .GroupNumberString Then 
' Add sale to correct total. 
Loop 
Else 
Saleinteger = Integer.Parse(SaleTextBox.Text) 
ArrayGroup(Indexinteger).Totalinteger += Saleinteger 
FoundBoolean = True 
Indexinteger += 1 
End If 
Once again. you should do some fonn of validation. If the user enters an in-
valid group number. you should display a message box. You can check the 
value of the Boolean variable FoundBoolean after completion of the loop to de-
tennine whether the loop tenninated because of a match or without a match. 
If Not FoundBoolean Then 
MessageBox .Show("Enter a valid group number", "Data Entry Error", 
MessageBoxButtons.OK, MessageBoxicon.Exclamation) 
With GroupTextBox 
. Focus() 
. SelectAll () 
End With 
End If 
The table-lookup technique will work for any table. numeric or string. It 
isn't necessary to arrange the fields being searched in any particular sequence. 
The comparison is made to one item in the Ust, then the next, and the next-
until a match is found. ln fact. you can save processing time in a large table by 
arranging the elements with the most-often-used entries at the top so that fewer 
comparisons must be made. 
Using List Boxes with Arrays 
In the previous example of a lookup. the user had to type some information into 
a text box. which was used to look up the information in an array. A more effi-
cient and friendly solution might be to substitute a list box for the text box. You 
can store the eight group numbers in a list box and allow the user to select from 
the I ist (Figure 8.6). 
The initial Items collection can contain the values 101. 103. llO. ll5. 
121. 123. 130. and 145. 
You have probably already realized that you can use the Selectedlndex 
property to detennine the array subscript. Remember that the Selectedlndex 
property holds the position or index of the selected item from the list. 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
u 
In place of the lookup operation. we can use this code: 
Declare module-level variables. 
Private Tota1Integer(7) As Integer 
' Hold totals for 8 groups. 
Private Sub OkButton_Click(ByVal sender As System.Object, 
ByVal e As system.EventArgs) Handles OkButton.Click 
' Accumulate the sales by group number. 
Dim Saleinteger As Integer 
Dim Indexinteger As Integer 
Try 
Indexinteger = GrouplistBox.Sel ectedindex 
If Indexinteger <> - 1 Then 
' Selection made. 
Else 
' Add to correct total. 
Saleinteger = Integer.Parse(SaleTextBox .Text) 
Totalinteger(Indexinteger) += Saleinteger 
' Clear the screen fields. 
GroupListBox.Selectedindex = - 1 
SaleTextBox.Text = "" 
337 
MessageBox.Show( "Select a group number from the list. ", 
"Data Entry Error", MessageBoxButtons.OK, 
MessageBoxicon.Exclamation) 
End If 
Catch 
MessageBox .Show( "Sales must be numeric. ") 
End Try 
End Sub 
•'i Scout Raffle Ticket Sales 
§.roup Number 
~a!es 
'101 
10 
103 
mJI 
115 
I 
I 
121 
QK 
123 
1JO 
I 
Dspl<'/ I 
145 
Total* 
Multidimensional Arrays 
You generally need to use two subscripts to identify tabular data, where data 
are arranged in t·ows and colunms. 
Many applications of two-dimensional tables quickly come to mind: insur-
ance rate tables. tax tables, addition and multiplication tables. postage rates. 
foods and their nutJ·itive value, population by region. rainfall by state. 
F i~ttr e 8 . 6 
AllQW the user to select from a 
list and yo~< can use the list's 
Selectedfndex property as the 
subscript of the total array. 

338 
v 
S 
l l 
,\ 
I. 
C 
Arrays and Collections 
To define a two-dimensional array or table, the Dim statement specifies the 
number of rows and columns in the array. The row is horizontal and the column 
is vertical. The following table has three rows and four columns: 
The Declal'atiou Statements fot· Two-Dimensional Arl'ays-
Geneml Fot·ms 
Dim ArrayName(HighestRowSubscript, HighestColumnSubscript) As Datatype 
Dim ArrayName(,) As Datatype = {ListOfValues} 
The Dcclm·atiou Statements fot· Two-Dimensional Army:>--Exruuples 
~ 
~ 
Dim NameString(2, 3) As String 
8 
Dim NameString(,) As String = {{"James " , "Mary" , "Sammie", "Sean"}, 
I 
'5!... 
{"Tom" , "Lee" , "Leon", "Larry"}, {"Maria", "Margaret " , "Jill" , "John "} 
~ ~ ...................................... .. 
Both of these statements establish an array of 12 elements, with three rows and 
four columns. Just as with single-dimension arrays. you cannot specify the 
number of elements within parentheses and specify initial values. 
Notice the comma inside the parentheses in the second example: You must 
use a comma to specify that there are two dimensions to tl1e array. Specify the 
initial values with the first dimension (the row) first and the second dimension 
(the column) second. The compiler determines the number of elements from the 
initial values that you supply. The second example above fills the table in this 
sequence: 
(0,0) 
(0. 1) 
(0, 2) 
(0,3) 
James 
Mary 
Sammie 
Sean 
(1,0) 
(I, 1) 
(1, 2) 
(1,3) 
Tom 
Lee 
Loon 
Larry 
(2,0) 
(2, 1) 
(2, 2) 
(2,3) 
M&'ia 
Margaret 
Jill 
John 
You must always use two subscripts when referring to individual elements of 
the table. Specify the row with the first subscript and the column with the sec-
ond subscript. 
The elements of the array may be used in tl1e same ways as any other 
variabl-in accumulators, counts. and reference fields for lookup; in state-
ments Like assignment and printing; and as conditions. Some valid references 
to the table include 
NameString(1, 2) = "New Name" 
NameString(Rowinteger, Columninteger) = "New Name" 
DisplayLabel.Text = NameString(1, 2) 
DrawString(NameString(Rowinteger, Columnlnteger), PrintFont, Brushes .Black, 100.0, 100.0) 

C 
II 
A 
1• 
'I' 
" 
ll 
Invalid references for the NameString table would include any value greater 
than 2 for the first subscript, greater than 3 for the second suh~cript. or less 
than 0 for either subscript. 
Initializing Two-Dime nsional A1·rays 
Numeric array elements are initially set to 0, and string elements are set to 
empty strings. And. of course, you can assign initial values when you declare 
the array. But many situations require that you reinitialize arrays to 0 or some 
other value. You can use nested For /Next loops to set each array element to an 
initial value. 
Nested F01·/Next Example 
The assigmuent statement in the im1er loop will be executed 12 times. once for 
each element of NameString. 
For Rowinteger As Integer = o To 2 
For Columninteger As Integer = o To 3 
' Initialize each element. 
NameString(Rowinteger, COlumninteger} 
Next Columnlnteger 
Next Rowinteger 
P1~inting a Two-Dime nsional Tahle 
When you want to print the contents of a two-dimensional table. you can use a 
For Each/Next loop. Tius example prints one array element per line. 
' Print one name per line . 
For Each ElementString As String In Namestring 
' Set up a line . 
e.Graphics.DrawString(ElementString, PrintFont, 
Brushes.Black, HorizontalPrintlocationSingle, VerticalPrintlocationSingle) 
' Increment the Y position for the next line. 
VerticalPrintlocationSingle += LineHeightSingle 
Next ElementString 
ffyou '~ish to print an entire row in one line, use a For/Next loop and set 
up the X and Y coordinates to print multiple elements per line. 
' Print one line per row . 
For Rowinteger As Integer = o To 2 
For Columnlnteger As Integer = o To 3 
e.Graphics .DrawString(NameString(Rowinteger, Columnlnteger), PrintFont, 
Brushes.Black, HorizontalPrintlocationSingle, VerticalPrintlocationSingle} 
' Move across the line. 
HorizontalPrintlocationSingle += 200 
Next Columnlnteger 
' Start next line; Reset to left margin. 
HorizontalPrintlocationSingle = e.MarginBounds.Left 
' Move down to next line. 
VerticalPrintlocationSingle += LineHeightSingle 
Next Rowinteger 
339 

340 
v 
S 
l l 
,\ 
I. 
C 
Arrays and Collections 
Sununing a Two-Dimensional Table 
You can find the sum of a table in various ways. You may sum either the 
columns or the rows of the table: or. as in a cross-foot, you can sum the figures 
in both directions and double-check the totals. 
To sum the array in both directions. each colunm needs one total variable 
and each row needs one total variable. Two one-dimensional anays n,ill work 
well for the totals. Figure 8.7 illustrates the variables used in this example. 
' Crossfoot total a 2D table . 
' Give the 4 x 6 array values for testing. 
(Normally you would total values that are accumulated in a program.) 
Dim AmountDecimal(,) As Decimal 
{{2.5D, 3D, 1.2D, 2.2D, 4.5D, 3.5D} , 
{2D, 2D, 2D, 2D, 2D, 2D}, 
{3D, 3. 1D, 3.2D, 3.3D, 3.4D, 3.5D}, 
{4.4D, 4.5D, 4.6D, 4.7D, 4.8D, 4.9D}} 
Dim RowTotalDecimal(3) As Decimal 
Dim COlumnTotalDecimal(5) As Decimal 
For Rowlnteger As Integer = o To 3 
For Columnlnteger As Integer = o To s 
RowTotalDecimal(Rowlnteger) += AmountDecimal(Rowlnteger, Columnlnteger) 
ColumnTotalDecimal(Columnlnteger) += AmountDecimal(Rowlnteger, Columnlnteger) 
Next Columnlnteger 
Next Rowlnteger 
Amow1tDecimal array 
(0) (1) (2) 
(3) 
(4) 
(5) 
RowTotalDecirual array 
(0) 
Total for row o-
(o) ~ 
(1) 
Total for row 1-
(1) 
1--+-+-+-1--+-4 
(2) 
Total for row 2-
(2) 
(3) 
Total for row 3-
(3) 
o' o' o' o' o' o' 
e:. 
E. 
E. 
E. 
E. 
E. 
~ ~ ~ ~ ~ if 
() 
() 
() 
() 
() 
() 
e.. 
~ e.. 
e.. 
e.. 
e.. 
c 
~ 
c 
" 
c 
3 
g 
§ 
8 
3 
" 
::1 
::1 
0 
"" "' "" "' 
4 
4 
~ 
ColumuTotaiDecimal I 
an·ay 
I 
(0) (1) (2) 
(3) 
(4) 
(5) 
Write VB statements to do the following: 
l. Dimension a table called TemperatureDecimal with five columns and 
three rows. 
FiJ,flll'@ 8.7 
Two one-dimensional arrays 
hold totals for the two-
dimensional array. 

(.; 
II 
1\ 
I' 
'I' 
1•: 
II 
1.1 
2. Set each element in the first row to 0. 
3. Set each element in the second row to 75. 
4. For each column of the table. add together the elements in the first and 
second rows. placing the sum in the third row. 
5. Print the entire table. (Write only the logic for printing inside the Print-
Document_PrinlPage event procedure.) 
Lookup Op<'ralion fot· Two-Dinwnsional Tahlf''l 
When you look up items in a two-dimensional table. you cnn use the same 
techniques discussed with single-dimensional arrays: direct reference and 
table lookup. The limitations are the same. 
1. To use a direct reference. rolf and columrt subscripts must be readily 
available. For example. you can tally the hours used for each of five 
machines (identified by machine numbers 1 to 5) and each of four 
departments (identified by department numbers l to 4). 
Rowinteger = Integer.Parse(Machin&TextBox.Text) - 1 
Columnlnteger = Integer.Parse(OepartmentTextBox.Text) - 1 
Hoursoecimal = Oecimal.Parse(HoursTextBox.Text) 
MachineTotalDecimal(Rowinteger, Columninteger) += Hoursoecimal 
2. A table lookup is the most common lookup technique. 
Many two-dimensional tables used for lookup require uclditiorral one-
dimensional arrays or ]jsts to aiel in the lookup process. For an example. use a 
shipping rate table (Figure 8.8) to look up the rate to ship a package. The ship-
ping rate depends on the weight of the package and the zone to which it is be-
ing shipped. You could design the project: with the weight and zones in list 
boxes. or you could use a text box and let the user input the data. 
341 
Fiaure 8.8 
This ~hipping mte f,able in a two-dimemional array can be used to look up the correct sltippi11g charge. 
Weightlndexlnteger 
al] Shipping R.ate lookup 
'·=l§l~ 
I 
' 
~eight 
~on a: 
Weightlndexlnteger uses~ 
(No! to exceed) 
WeightListBox.SelectedJ nde.' ~ 
---:;-ib 
A 
Weight(not 
Zone 
Zone 
Zone 
Zone 
~ 
8 
to exceed) 
A 
B 
c 
D 
c 
10 lb 
. 
lib 
1.00 
1.50 
1.65 
1.85 
>10 11:: 
~ 
3th 
1.58 
2.00 
2.40 r3.o5) 
Zonelndexlnteger 
-----
3 
..... 
Charges: ---
5th 
1.71 
2.52 
3.10 
4.00 
3.05 
~~ 
lOib 
2.04 
3.12 
4.00 
5.01 
Zone! ndexl nteger uses 
ZoneListBox.Selectedlndex 
>lOth 
2.52 
3.75 
5.10 
7.25 

342 
l ' 
C 
Arrays and Collection.• 
Using List Boxes 
In the example illustrated in Figure 8.8. a list box holds the weight limits. and 
another list holds the zones. The values for the two lists are set in the Items 
properties at design time. The five-by-four rate table is two-dimensionaL and 
the values are set when the table is declared. 
Look up values from list boxes. 
' Declare module-level variables. 
Dim RateDecimal(,) As Decimal 
{{10, 1.50, 1.650, 1 .850}, 
{1.580, 20, 2.40, 3 .050}, 
{1.710, 2.520, 3.10, 40}, 
{2.040, 3. 120, 40, 5.010}, 
{2.520, 3. 750, 5.10, 7.250}} 
Private Sub LookupButton_Click(ByVal sender As System. Object, 
ByVal e As System.EventArgs) Handles LookupButton.Click 
' Look up the shipping rate . 
Dim Weightindexinteger As Integer 
Dim Zoneindexinteger As Integer 
Weightindexinteger = WeightLi stBox.Sel ectedindex 
Zoneindexinteger = Zonel istBox.Selectedindex 
If Weightindexinteger <> -1 And Zoneindexlnteger <> - 1 Then 
CharoesTextBox.Text = 
RateDeci ma l (Weightindexi nteger. Zoneindexinteger).ToString("N"l 
Else 
MessageBox .Show( "Select the weight and zone." , "Information Missing ", 
MessageBoxButtons.OK, MessageBoxicon.Exclamation) 
End If 
End Sub 
Using Text Boxes 
If you are using text boxes rather than list boxes for data entYy, the input requires 
more validation. You must look up both the weight and zone enllies before you 
can determine the correct rate. The valid zones and weight ranges will be stored 
in two separate one-dimensional arrays. The first step is to establish and fill the 
arrays. The five-by-four rate table is two-dimensional, and the values should be 
preloaded. as in the previous example. 
Note that the Try /Catch blocks were omitted to clarify the logic. You 
,<;houl.-1 alway" II"'P. P.rror trapping whP.n r.onvP.rting input to mnnP.rir. vnluP.,.. 
' Look up values from text boxes . 
' Declare module-level variables . 
Dim RateDecimal(,) As Decimal 
{ { 1 D, 1. 50, 1 . 650, 1 . 850}, 
{1 . 580, 20, 2 .40, 3.050}, 
{1.710, 2.520, 3 .10, 40}, 
{2.040, 3. 120, 40, 5.010}, 
{2. 520, 3. 750, 5. 10, 7.250}} 
Dim Weightinteger() As Integer = {1, 3, 5, 10} 
Dim ZoneString() As String = {"A", "B", "C", "D"} 

C
II
,\I>
'I'
I'
R 
u 
Private Sub LookupButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles LookupButton.Click 
' Look up the shipping rate. 
Dim Weightindexinteger As Integer 
Dim Zoneindexinteger As Integer 
Dim Indexinteger As Integer = o 
Dim Weightlnputlnteger As Integer 
Dim WeightFoundBoolean As Boolean = False 
Dim ZoneFoundBoolean As Boolean = False 
Try 
' Look up t he wei ght to find the Wei ght lndexl nteger . 
Weightinputinteger = Integer.Parse(WeightTextBox .Text) 
Do Until WeightFoundBoolean or Indexinteger > 3 
Loop 
If Weightinputinteger <= Weightinteger(Indexinteger) Then 
Weightlndexinteger = Inde:<Integer 
Wei ghtFoundBoolean = True 
Else 
Indexinteger += 1 
End If 
If Not WeightFoundBoolean Then 
' Weight above 10 pounds. 
Weightindexinteger 
4 
WeightFoundBoolean = True 
End If 
' Look up the zone t o f i nd the Zonel ndexlnt eger. 
Indexinteger = 0 
Do Until ZoneFoundBoolean or Indexlnteger > 3 
If ZoneTextBox.Text.ToUpper() = Zonestring(Indexlnteger) Then 
zonelndexlnteger = Indexlnteger 
ZoneFoundBoolean = True 
Else 
Indexinteger += 1 
End If 
Loop 
' Di spl ay t he appropriate rate. 
If ZoneFoundBoolean Then 
ChargesLabel.Text = 
RateDecimal (Weightlndexinteger, Zoneindexinteger) . ToString( "N") 
Else 
MessageBox .Show( " Invalid zone. ", "Information Missing or Invalid", 
MessageBoxButtons.OK, MessageBoxicon .Exclamation) 
End If 
Catch 
MessageBox .Show(" Invalid weight." , "Information Missing or Invalid", 
MessageBoxButtons.OK, MessageBoxicon .Exclamation) 
End Try 
End Sub 
Collections 
As a programmer, you will need to know how to work with both arrays and more 
sophisticated collection types. A collection is an object designed to handle a 
group of related data and is more flexible than an array. A very large percentage 
343 

344 
v 
S 
l l 
:\ 
L 
G 
,\ 
S 
(' 
A1rays and Collections 
of existing program code uses array logic in some capacity. But newer program 
development will rely more on the object-oriented collection classes. 
You have already worked with collections for the list boxes in Chapter 7. 
You learned to use properties and methods of the Items collection of a list box 
or combo box. Now you will see how those concepts can be used in a collection 
that you create. 
The System.Collections namespace provides classes for several types of 
collections. All of the collection classes have properties and methods. such as 
the Count property that you used with a list box. Examples of collection types 
are ArrayList. SortedList. Queue. Stack, Hash table. and Dictionary. 
A SortedList Collection 
One handy type of collection is called a Sot·tedList. As the name implies, the 
elements in the collection are automatically sorted as items are entered. A Sort-
edList provides some useful methods. such as Add, Contains. and Remove. 
The collection dynamically increases in size as new elements are added. 
A SortedList is a collection of items. Each of those iletns is made of two 
fields: a key and a l'alue. called a key/value pair. The key field cannot have du-
plicates. You can reference the individual elements by the key field or an in-
dex, which is zero based. 
In many respects a Sorted List is similar to an array. But the collection 
provides more properties and methods to make programming much easier. 
Table 8.1 shows a list of some of the most useful properties and methods of 
SortedUst collection. 
Some of the :Most Useful P roperties aud 
Methods of a Sot·te<lList Collection 
P•·opel'ties and 
Methods 
Capacity 
Cow1t 
Add 
Clear 
Contains 
Cont ainsValue 
Item(Key) 
Remove (Key) 
RemoveAt (Index) 
Pm-pose 
Holds tl>e number of elements that the collection can contain. 
Holds tiJe actual number of elements in the collection. 
Add an element to the collection. 
Remove all elements from the collection. 
Searches for a specific key in the collection. 
Scarc hca for o apccific vuluc in the collection. 
Retriev-e the value associated 14'ith a specific key. 
Remove an element by key. 
Remove an element by index. 
To give a collection initial values. you can use the new From keyword. 
which was added to Visual Basic 2010. For earlier versions of VB, you must 
use the Add method to set initial values into the collection. 
Tabl e IL l 

C
II
,\I>
'I'
I'
R 
u 
A SoJ·tedLisL Sample Prog•·am 
The following program (Figure 8.9) sets up a collection of names and phone 
numbers. The name works as a key to relate to the associated phone number. 
Although each name and phone number is a string. the combined element is 
considered an object of the Dictionary Entry data type. You can use the Key and 
Value properties of a Dictionary Entry to retrieve the individual fields. which you 
must convert back to strings when Option Strict is on. (You can see an example 
of this in the ListBut:ton_Click event procedure in the following program). 
345 
F i g ur e 
8 .9 
'a6' Using a Collection 
The user interface for the 
Sortedlist collection program. 
1. 
1. 
Phone Nurber 
You will see both some new and some familiar techniques in this program. 
The Contains method determines whether a specific key exists in the collec-
tion. freeing us from writing comparison code. And you can use the ForEach 
loop to iterate through the collection. just as with an array. 
The SortedList f'rogram 
' Program: 
ChOSCollection 
' Programmer: 
Bradley/Millspaugh 
' Date: 
June 2010 
Description: 
Store names and phone numbers in a collection. 
Option Strict on 
Public Class CollectionForm 
Private PhoneBookSortedList As Sortedlist 
Private Sub CollectionForm_Load(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MyBase.Load 
' Create the collection and initialize beginning values. 
PhoneBookSortedList = New Sortedlist From {{ "Ann", "555-0000"}, 
{"Bill", ''555-1111 "}, 
{"Carol ", "555-3333"}} 
End Sub 

346 
\ ' 
S 
l l 
\ 
L 
II 
\ 
S 
(' 
A"ay• tmd Coll<!clion.! 
Private Sub AddButton_Click{ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles AddButton.Click 
· Add a new element. 
If PhoneBooKSortedlist.Contains{NameTextBox.Text) Then 
MessageBox.Show{"That name is already in the list. ", 'Duplicate") 
Else 
If NameTextBox.Text = String.Empty Then 
MessageBox. Show{ "Please enter the new data. •, "Add Error") 
Else 
PhoneBookSortedlist.Add{NameTextBox.Text, 
PhoneMaskedTextBox.Text) 
End If 
End If 
End Sub 
Private Sub RemoveButton_Click{ByVal sender As Object, 
ByVal e As System.EventArgs) Handles RemoveButton.Click 
• Remove an existing element. 
If NameTextBox.Text = String .Empty Then 
MessageBox.Show("Please enter name to delete.•, ' Delete Error" ) 
Else 
If PhoneBookSortedlist.Contains(NameTextBox.Text) Then 
PhoneBookSortedlist.Remove(NameTextBox.Text) 
MessageBox.Show{NameTextBox.Text & • removed from the list. ") 
NameTextBox.Clear{) 
Else 
PhoneMaskedTextBox.Clear{) 
MessageBox.Show{ "That name was not found.', 
'Name Not Found Error') 
End If 
End If 
End Sub 
Private Sub CountButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles CountButton.Click 
• Display the current number of elements in a message box. 
MessageBox.Show{"Current number of members in the list is • & 
PhoneBookSortedList.Count.ToString(), •count") 
End Sub 
Private Sub ListButton_Click{ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ListButton.Click 
• Display all names and phone numbers in the list. 
Dim ListString As String = String.Empty 
For Each AnElement As DictionaryEntry In PhoneBooKSortedlist 
ListString &= AnElement .Key.ToString() & ControlChars.Tab & 
AnElement.Value.ToString() & ControlChars.Newline 
Next 
MessageBox.Show{ListString) 
End Sub 

II 
Private Sub FindButton_Click(ByVal sender As System.Obj ect, 
ByVal a As System.EventArgs) Handles FindButton.Click 
' Find the phone number for a given name. 
If NarneTextBox.Text = String.Empty Then 
MessageBox .Show( "Please enter name to find. ", "Missing Data •) 
Else 
If PhoneBookSortedList .Contains(NameTextBox.Text) Then 
PhoneMaskedTextBox.Text = 
PhoneBookSOrtedList.Item(NameTextBox .Text) .ToString() 
Else 
MessageBox. Show( ' That name was not found. ", 
"Name Not Found Error") 
End If 
End If 
End Sub 
Private Sub ExitButton_Click(ByVal sender As system.Object, 
ByVal a As System.EventArgs) Handles ExitButton .Click 
' End the program. 
Me.Close() 
End Sub 
End Class 
l. What is a coLlection? 
2. What is the advantage of using a collection. rather than an array? 
3. List tl1ree properties or meU1ods of a Sorted List tllat are also used by the 
Items collection for a list box. 
347 
our Hands-On Programming Example --------
Create a project for R 'n R-for Reading 'n Refreshment that determines the 
price per pound for bulk coffee sales. The coffees are divided into categories: 
r~ lar. decaf. and special blend. The prices are set by the quarter pound, half 
pound. and full pound. Use a Find Price button to search for the appropriate 
price based on the selections. 
Rel!"lnr 
DecnJTeiunted 
Spcc inl Blend 
':4 pound 
2.60 
2.90 
3.25 
'h pound 
4.90 
5.60 
6.l0 
FuU pound 
8.75 
9.75 
11.25 
Create a structure that contains the coffee type. amount. and price. Set up 
a module-level variable that is an array of 20 elements of your structure; this 

348 
\ 
S 
l 
\ 
L 
ll 
\ 
.. 
( ' 
Arrays and Colkctioru 
array will hold Lhe transactions. Each time the Find Price button is pressed. look 
up and display the price of the coffee selection and add the data to the array. 
Include a Clear button to clear the selections from the screen and a Print 
button that prints all of the transactions. Using Print Preview. print appropriate 
headings and the data from the transaction array. 
When the Exit button is pressed. give the user another opportunity to print 
all the transactions. 
Planninl! the ProjP<"I 
Sketch a form (Figure 8.10). which your users sign off as meeting their needs. 
t' i~nre 8.10 
A planning sk£tch of the form for the hands-on programming e:cample. 
GroupBox2 
Plan the Objects and Properties 
Objec t 
BulkCoffeeF onn 
GroupBoxl 
GroupBox2 
CoffeeTypeComhoBo.t 
Labell 
Label2 
!:lalf Fbund 
Fu[l Pound 
FlndPrtctButton 
Prfnteutton 
Name 
Text 
Accept Button 
Te:d 
Text 
Narne 
lteuu. 
DropDo~·nStyle 
Text 
Text 
CltarBut.ton 
ExitButton 
Seuin~ 
BullcColTeeForm 
R 'n R for Reading and Refreshment 
FindPriceButton 
Cofl'ee Prices 
Quantity 
Co!Tee'I)'P"ComhoBo.t 
Regular 
Decall'einated 
Special Blend 
DropDownList 
&Type 
Price 
GroupBox1 
CoffetTypeComt:>oBox 
Pricer txtBox 

c 
II 
i\ 
•• 
1' 
E 
R 
n 
Object 
ProJ>ei-IY 
Setting 
PriceTe><tBox 
Name 
PriceTextBox 
Read Only 
True 
TabStop 
False 
QuarterPoundRadioBullon 
Name 
QuarterPoundRadioBullon 
Text 
&Quarter Pound 
Checked 
True 
NaUPoundRadioButton 
Name 
HaUPoundRadioBullon 
Text 
&HaUPowad 
FullPoundRadioBullon 
Name 
FullPoundRadioButton 
Text 
Fu&ll Pound 
FindPriceBullon 
Name 
FindPriceButton 
Text 
&Find Price 
ClearBullon 
Name 
ClearButton 
Text 
&Clear 
PrintBuuon 
Name 
PrintBullon 
Text 
&Print 
ExitBullon 
Name 
E.•hButton 
Text 
E&xit 
PrintDocumcntl 
Name 
PrintDocumentl 
PrintPreviewDialogl 
Name 
PrintPreviewDialogl 
Plan the Event Procedures You need to plan the actions for the event procedures. 
Proce,Jure 
Ac tions 
FindPriceButton_Click 
Find the column &om the list selection. 
ClearBullon_Ciid: 
PrintBullon_Click 
ExitBullon_Ciick 
All radio huttons_Ciick 
PrinlDocume nll_PrintPage 
Find the row from the rndi.o button selection. 
Look up the price in the table. 
Display the price in the label. 
Store the type. quantity. and price in the transaction array. 
Select the first radio hu11o11. 
Deselect the I ist entry. 
Clear the price lal>el. 
Set up print previetr. 
Print the report. 
Display message box giving the user opportunity to print. 
If the user wants to print 
Execute PrintBut1on_Cltck procedure. 
End If 
Tenninate the project. 
Sa•·e the name of the selected bullon. 
Print title. 
Loop to print all of the stored transactions. 
349 

3SO 
' 
S 
l 
\ 
L 
It 
\ 
s 
t: 
Arrays and Collectioru 
\\rite the Project 
Follow the sketch in Figure 8.10 to create tl1e form. 
Figure 8.11 shows the completed form. and Figure 8.12 ~hows sample report 
output. 
• 
Set the properties of each object. according to your plan. 
Write the code. Working from the pseudocode, write each event procedure. 
When you complete the code. use n variety of data to thoroughly test the 
project. 
"" R 'r R for Reading ..-.d Refreshment 
ColfMPrio"' 
Ownttt 
•<i j~~~~(j] 
'~ !::!af Pound 
Ou.irttr Pound 
Ou.uter Pound 
Full Pound 
R 'n R Coffee Sates 
by P rogramml!'r N.amt 
Speelal Bienek 
OtcifftinJttd 
260 
3.25 
Q75 
The J>I'Ojel'l Cooiug Solution 
' Program: 
' Programmer: 
' Date: 
' Description: 
ChOBHandsOn 
Bradley/Millspaugh 
June 2010 
LooK up t he price for bulK coffee 
based upon quantity and type. 
•' i"nre 8.1 I 
The form for the hands-on 
programming I!:Xample. 
Figure 8.1:! 
A sample report creaud by the 
program. 
Uses a structure and arrays, and prints a report 
of the t ransactions from the array . 
' Folder: 
ChOBHandsOn 

C
ll
i\
1°T
t:
R 
fl 
Public Class BulkCoffeeForm 
' Declare structure and module- level variables 
Structure CoffeeSale 
Dim TypeString As String 
Dim auantityString As String 
Dim PriceDecimal As Decimal 
End Structure 
Private TransactionCoffeeSale(20) As CoffeeSale 
Private NumberTransactionslnteger As Integer 
Private PriceDecimal(,) As Decimal = 
{{2.6D, 2.90, 3.250}, {4.90, 5.60, 6.10}, {8.750, 9.750, 11.250}} 
Private SelectedButtonString As String 
Private Sub ClearButton_Click(ByVal sender As System.Object , 
ByVal e As System.EventArgs) Handles ClearButton.Click 
' Remove the selection from the list and 
clear the price. 
' Select first radio button. 
auarterPoundRadioButton.Checked = True 
' Clear coffee type selection. 
CoffeeTypecomboBox.Selectedindex = - 1 
PriceTextBox.Text 
End Sub 
Private Sub ExitButton_Click(ByVal sender As System.Objsct, 
ByVal e As System.EventArgs) Handles ExitButton .Click 
' Terminate the project . 
Dim ResponseDialogResult As DialogResult 
ResponseDialogResult = MessageBox.Show('Print the report?', 
'Terminate the Application•, MessageBoxButtons.YesNo, 
MessageBoxicon.Question) 
If ResponseDialogResult = DialogResult.Yes Then 
printButton_Click(sender, e) 
End If 
Me .Close() 
End Sub 
Private Sub FindPriceButton_Click(ByVal sender As System.Object , 
ByVal e As System.EventArgs) Handles FindPriceButton.Click 
' Lookup tne price using the quantity and type. 
Dim Rowinteger, Columninteger As Integer 
Dim SalePriceoecimal As Decimal 
' Allow only 20 transactions. 
If NumberTransactionsinteger < 20 Then 
Columnlnteger = CoffeeTypeComboBox.Selectedlndex 
If Columnlnteger <> -1 Then 
· Coffee selection made, determine quantity selected . 
Select Case SelectedButtonString 
Case ' QuarterPoundRadioButton• 
351 
Rowlnteger = 0 
Transact ionCoffeeSale(NumberTransactionsinteger) .QuantityString 
"Quarter Pound" 

3S2 
Else 
,. 
S 
l 
\ 
L 
Case "HalfPoundRadioButton" 
Rowlnteger = 1 
It 
\ 
s 
t: 
Arrays and Collectioru 
TransactionCoffeeSale ( tlumberTransactionsl nteger) . Quanti tyStr ing 
"Half Pound" 
Case "FullPoundRadioButton" 
Rowlnteger = 2 
TransactionCoffeeSale ( tlumberTransact ions Integer) . Quanti tyStr ing 
"Full Pound" 
case Else 
' No selection made; use quarter pound. 
Rowinteger = 0 
TransactionCoffeeSale ( tlUmberTransactionsi nteger) . Quanti tySt ring 
"Quarter Pound' 
End Select 
' Retrieve price of selection. 
SalePriceDecimal = PriceDecimal(Rowinteger, Columnlnteger) 
PriceTextBox. Text = SalePriceDecimal. ToString( "C") 
' Save this transaction. 
TransactionCoffeeSale(NumberTransactionslnteger) .TypeString 
CoffeeTypeComboBox.Text 
TransactionCoffeeSale(NumberTransactionsinteger) .PriceDecimal 
SalePriceOecimal 
NumberTransactionsinteger += 1 
Else 
MessageBox.Show('Select the coffee type.·, "Selection Incomplete' , 
MessageBoxButtons.OK, MessageBoxicon.Exclamation) 
End If 
MessageBox.Show( "Sorry, only 20 transactions allowed.") 
End If 
End Sub 
Private Sub PrintButton_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles PrintButton.Click 
1 Print the report using Print Preview. 
PrintPreviewDialog1.Document = PrintDocument1 
PrintPreviewDialog1.ShowDialog() 
End Sub 
Private Sub PrintDocument1_PrintPage(ByVal sender As Object, 
ByVal e As System.Drawing .Printing.PrintPageEventArgs 
) Handles Printoocument1.PrintPage 
1 Handle print and print previews. 
Dim PrintFont As New Font("Arial', 12) 
Dim HeadingFont As New Font("Arial', 14, FontStyle.Bold) 
Dim LineHeightSingle As Single = PrintFont.GetHeight + 2 
Dim Column1HorizontalLocationSingle As Single = e.MarginBounds.Left 
Dim verticalPrintLocationSingle As Single = e.MarginBounds.Top 
Dim Column2Horizonta1Locationsingle As Single = 300 
Dim Column3HorizontalLocationSingle As Single 
Dim PrintLineString As String 
Dim FontSizeF As New SizeF 
Dim FormattedPriceString As String 

C
ll
i\
11
TER 
' Set up and display heading lines. 
PrintLinestring = ' R 'n R Coffee Sales' 
e.Graphics.Drawstring(Printlinestring, HeadingFont, 
Brushes.Black, Column2HorizontalLocationSingle, VerticalPrintLocationSingle) 
Printlinestring = ' by Programmer Name ' 
VerticalPrintLocationSingle += LineHeightSingle 
e.Graphics.DrawString(PrintLineString, PrintFont, 
Brushes.Black, Column2HorizontalLocationSingle, VerticalPrintLocationSingle) 
VerticalPrintLocationSingle += LineHeightSingle * 2 
' Loop through the transactions. 
For Each IndividualCoffeeSale As CoffeeSale In TransactionCoffeeSale 
' Don't print if blank. 
Next 
End Sub 
If IndividualCoffeeSale.auantityString <> "" Then 
Set up a line. 
' Quantity. 
e.Graphics.DrawString(IndividualCoffeeSale.auantityString, PrintFont, 
Brushes.Black, Column1HorizontalLocationSingle, 
VerticalPrintLocationSingle) 
' Type. 
e.Graphics.DrawString(IndividualCoffeeSale.TypeString, PrintFont, 
Brushes.Black, Column2HorizontalLocationSingle, 
verticalPrintLocationsingle) 
' Right ·align the price. 
FormattedPriceString = FormatNumber(IndividualCoffeeSale.PriceDecimal) 
' Measure string in this font. 
FontSizeF = e.Graphics.MeasureString(FormattedPriceString, PrintFont) 
' Subtract width of string from column position. 
Column3HorizontalLocationSingle = 550- FontSizeF.Width 
e.Graphics.DrawString(FormattedPriceString, PrintFont, 
Brushes .Black, Column3HorizontalLocationSingle, 
VerticalPrintLocationSingle) 
' Increment the Y position for the next line; Double space. 
VerticalPrintLocationSingle += LineHeightSingle • 2 
End If 
Private Sub auarterPoundRadioButton_CheckedChanged( 
ByVal sender As System.Object, ByVal e As System.EventArgs 
) Handles FullPoundRadioButton.CheckedChanged, 
HalfPoundRadioButton.CheckedChanged, 
auarterPoundRadioButton .CheckedChanged 
' Save the name of the selected radio button. 
' This procedure is executed each time any radio button is selected. 
SelectedButtonString = CType(sender, RadioButton).Name 
End Sub 
End Class 
3S3 

354 
S 
l r 
\ 
L 
11 
\ 
s 
C 
Array• and Collcclio"' 
1. A series of variables with the same name is called an array. The individual 
values are referred to as elements. and each element is accessed by its sub-
script. which is a position number. 
2. Array subscripts or indexes are zero based; they must be integers in the 
range of the array elements. VB rounds noninteger values. 
3. You can assign initial values in the array declaration or specify the highest 
subscript allowed. 
4. A special form of the For loop called For Each is available for 1mrking 
with arrays. The For Each eliminates the need for the programmer to ma-
nipulate the subscripts of the array. 
5. You can declare a structure to combine related fields and then declare vari-
ables and arrays of the siJucture. Structure statements must appear in the 
dec) a rations section at the lop of a file. 
6. Arrays can be used like any other variables: they can be used to accumu-
late a series of totals or to store values for a lookup procedure. 
7. The information in arrays may be referenced directly by subscript, or a 
table lookup may be used to determine the correct table position. 
8. You can use the Selected Index prope1ty of a list box as a subscript of an 
array. 
9. Arrays may be multidimensional. A two-dimensional table contains ro~-s 
and columns and is processed similarly to a one-dimensional array. Access-
ing a multidimensional array frequently requires the use of nested loops. 
10. A collection is an object designed to manage a group of items. Several types 
of collections are available: all contain properties and methods for working 
1tith UJe elements. 
column 337 
direct reference 332 
element 326 
For Each and Next 328 
index 326 
row 337 
SortedList 344 
structure 329 
subscript 326 
subscripted variable 326 
table 326 
table lookup 333 

C
ll
i\
11
1'
t:
H 
L 
Define the following tenus: 
(a} Array 
(b) Element 
(c) Subscript 
(d) index 
(e) Subscripted va~iable 
2. What is a structure? "\l'hen might a structure be useful? 
3. Describe the logic of a table lookup. 
4. Name some situations in ~+'hich it is important to perfonn validation when 
working with subscripted variables. 
5. Compare a two-dimensional table to an array of a structure. 
6. How can you initialize values in a two-dimensional table? 
7. Why would you want to use a collection mther than an array? 
8.] A"ay of a structure. Create a project to analyze an income survey. The 
statistics for each home include an identification code. the number of 
memhers in the household. and the yearly income. 
A menu wiiJ contain File. Reports. and Help. The File menu will contain 
Enter Data and Exit. As the data are entered. they should be assigned from 
the text boxes to the elements of a structure. 
The reports for the project w:iU be sent to the printer and include the 
following: 
(a) A report that displays the input data. 
(b) A listing of the identification number and income for each household 
that exceeds the average income. 
(c) The percentage of households having incomes below the poverty level. 
Pol'l>ri.Y Cuideliut>s for 2008: 
F amity S ize 
l ncon1e 
I 
10210 
2 
13690 
3 
171.70 
4. 
20650 
5 
24130 
6 
27610 
7 
31090 
8 
34570 
For each additional 
3.:Ul0 
rson add 
3SS 

3S6 
\ 
S 
l 
\ 
L 
II 
\ 
S 
(' 
Am•,-• o"d CoJiectioru 
Test Data 
10 Nmul..,. 
umber of Pt.~norn~ 
A nnual LK:oo:~e 
2497 
2 
32500 
3323 
5 
23000 
4521 
t 
38'210 
6789 
2 
38000 
5n6 
1 
26000 
4123 
3 
16<100 
6587 
<1. 
25000 
3221 
4 
20500 
5555 
2 
18000 
0085 
3 
19700 
3097 
a 
30000 
4480 
5 
23400 
0265 
2 
19700 
8901 
3 
13000 
8.2 Two-dimensional table. Modify Programming Exercise 8.1 to assign the 
data to a multidimensional array ralher than use an array of a structure. 
8.3 Create a project to keep track of concert ticket sales by your club. Ticket 
prices are based on the seating location. Your program should calculate 
the price for each sale. accumulate the total number of tickets sold in 
each section. display the lickel price schedule. and prinl a summary of all 
sales. 
'n1e fom1 should contain a list box of the sections for seating. 
Do not allow the user to receive an exception for subscript out-of-
range. 
s~clion 
Pt·ll·•· 
Orcheolr• 
!10.00 
Mezz.aninr 
27.50 
c.-nero I 
15.00 
Balcony 
10.00 

C 
II 
;\ 
1• 
1' 
•; 
R 
n 
8,4 Arra)' of a structure. Create a project that will allow a user to look up slate 
and territory names and their two-letter abbreviations. The user "ill bave the 
options to Look up the Abbreviation or Look up the Stae Name. In the event that 
a match cannot be found for the input. display an appropriate error message. 
Use radio buttons with a shared event procedure and a Select case 
to determine trhich text box (stole name or abbreviation) should have the 
focus and 11 hich should be set to ReadOnly. 
Dntfl 
AL 
Alabama 
MT 
M<N>tana 
AK 
Al...ka 
NE 
Nebraska 
AS 
American Samoa 
NV 
Nevada 
AZ 
ArizonA 
Nil 
New Hompsltire 
AR 
Arkan88o 
NJ 
New Jersey 
CA 
C..lifomia 
NM 
New Mexico 
co 
Colocndo 
NY 
New York 
CT 
Connocticut 
NC 
North Carolina 
DE 
Del3ware 
ND 
North Dakota 
DC 
District of Columbia 
OH 
Ohio 
Fl. 
florida 
OK 
Oklahoma 
GA 
Cewgio 
OR 
Oregon 
GU 
Guam 
PA 
PennsyiVllnia 
HI 
Hawaii 
PR 
Puerto Rico 
ID 
Idaho 
Rl 
Rhodeuland 
IL 
IUinoia 
sc 
South Carolina 
IN 
Indiana 
so 
South Dakota 
lA 
Iowa 
TN 
TenneMee 
KS 
Kan""" 
TX 
Texas 
KY 
Kentucky 
TT 
Trust TerritorieA 
LA 
Louioionu 
lJT 
Utah 
ME 
Moine 
VT 
Vennonl 
MD 
Murylund 
VA 
Virginia 
~LA 
Ma._~tdno.ello 
VI 
Virgin Islands 
~u 
Michigan 
WA 
Washington 
~lN 
Minnet1011 
wv 
\l' eot Virginia 
MS 
Mi•io•ippi 
WI 
U"""~coMin 
MO 
Mi ... ouri 
\'II' 
~omin 
3S7 

3S8 
' 
~ l 
\ 
l 
R 
.\ 
S 
l ' 
Arra>• uml Collectiom 
8.!'i Two-dimensional table. Create a project that looks up the driving distance 
between tll'o cities. Use two drop-down lists that contain the names of the 
cities. Label one list "Departure~ and the other"Destination''. Use a Look 
Up button to calculate the distance. 
tore the distances in a two-dimensional table. 
La. 
...... 
"\'ew 
Ro~o• 
Chko;!O 
Dalno 
Vp;:u 
~le$ 
\IJruul 
OrlfiRUJo 
TMO.IO 
Booton 
0 
1~ 
1753 
Z752 
3017 
1520 
1507 
~ 
Chic"'!" 
1tm 
0 
921 
1780 
2043 
1397 
919 
SIS 
Dallas 
1753 
921 
0 
1230 
1399 
1343 
517 
1435 
LasVeg .. 
2752 
1700 
1230 
0 
Z72 
2570 
1732 
22S1 
t...o. Angel•• 
30.17 
2043 
1399 
Z72 
0 
Z716 
1858 
2523 
Miami 
1520 
1397 
1343 
2570 
Z716 
0 
860 
I~ 
New Orl•ar.., 
t507 
919 
5 17 
1732 
1858 
1160 
0 
1307 
Toronto 
ro9 
SIS 
t43S 
2251 
2523 
1494. 
1307 
0 
Va.ncouv~ 
3155 
2176 
2:Z:U 
1322 
1278 
:wl7 
2734 
II"uhinglon DC 
448 
109 
t307 
2420 
2646 
1057 
1099 
8.6 
Two-dimensional table. Create a project in which the userl\;ll complete a 
10-question survey. Create a form containing labels ~>'ith each of the 
questions and a group of radio buttons for each question with the folio" . 
ing responses: Always. Usually. Sometimes. Seldom. and 'ever. 
Usc a h'-o-dimensional array to accumulate the number of each re-
sponse for each question. 
Have a menu or button option that will print an item analysis on the 
printer that shows the question number and the count for each response. 
ample of partial output: 
Qu.,~iou 
.1\hu •y• 
Ll.ouult} 
Son1e thue8 
Seldom 
Ne,·er· 
L 
5 
2 
lO 
4· 
6 
2 
2 
2 
10 
2 
1 
3 
17 
0 
10 
0 
0 
8.7 U1lltetion. Create a project to store and manage accotmt numbers and cus-
tomer names in a SortedList collection. The accow1t number is the key. 
'Ibe user shouJd be able to add accounts. remove accounts. look up a cus-
tomer's name or account number. and display a list of current customers 
with the total number of cu tomers displayed at the bottom of the list. 
2820 
571 
\ 'a.•rouu r 
315S 
2176 
2234 
1322 
1278 
3447 
2734 
2820 
0 
2887 
WaihiJl:ton 
DC 
448 
709 
1307 
242!1 
2646 
1057 
1099 
571 
2887 
0 

C
ll
i\
I'T
E
I& 
u 
359 
VB lUall Order I 
Create a project that K'ill calculate shipping charges 
Zone 
from a two-dimensional table of rates. The rate de-
pends on the weight of the package and the zone to 
Weigbl 
A 
8 
c 
D 
which it K·ill be shipped. The Weight column specifies 
1.00 
1.50 
1.65 
1.85 
the maximum weight for that rate. All weights over 10 
3 
1.58 
2.00 
2.40 
3.05 
pounds use tl1e last row. 
Optional, extra: Print a summary of aU shipping 
5 
1.7t 
2.52 
3.]0 
4.00 
selections and total charges. 
to 
2.04 
3.12 
4.00 
5.01 
>10 
2.52 
3.75 
5.10 
7.25 
VB Auto (;eu•er 
Vl3 Auto sells its on11 brand of spark plugs. To cross-
YB Aulo 
B o·and A 
Bo·and C 
Bo·nnd X 
reference to major bmnds, it keeps a table of equiva-
PR2l4 
MR43T 
RBLB 
l4K22 
lent part numbers. VB Auto wants to computerize the 
process of looking up part numbers in order to im-
PR223 
R43 
RJ6 
14K24 
prove its customer service. 
PR224 
R43N 
RN4 
14K30 
The user should be able to enter tbe part number 
and brand and look up the corresponding VB Auto 
PR246 
R46N 
RN8 
l4K32 
pa1t number. You may allow the user to select the 
PR247 
R46TS 
RBL17Y 
14K33 
brand (Brand A. Brand C. or Brand X) from a list or 
from radio buttons. 
PRZiS 
R46TX 
RBLI2-6 
14K35 
You can choose from two approaches for the look-
PR324 
S46 
VIK38 
up table. Store the part numbers either in a h\·o-
Jll 
dimensional table or in an array of a structure. In either 
PR326 
SR46E 
XEJ8 
l 4K40 
case. use the part number and bmnd entered by the 
user: look up and display the VB Auto part number. 
PR<\..14 
47L 
Hl2 
14K44 

360 
s 
l' 
\ 
t 
R 
t\ 
S 
( ' 
Array.< and Collection.< 
VIdeo Bonanza 
Create a project that displays the aisle number of a 
movie category in a label. The movie categories ";U be 
in a list box. Store the aisle nwnbers and categories in 
an array. 
A Search button should locate the correct loca.tion 
from the array and display it in a label. Make sure that 
the user has selected a caiCf!:ory from the list and use 
the list box Selectedl ndex property to find the appro-
priate aisle number. 
Table Oatu 
Aisle l 
Aiole 2 
ru•le 3 
rusle4 
Aiole5 
Back W..U 
Comedy 
Dmm" 
Action 
Sci-Fi 
Horror 
New Releases 
Very Very Boards 
Modify your project from Chapte r 6 to keep track of 
an order in an array. You can then print out the en-
tire order with detail lines for each type of s hirt. 
Convert the event handling for the radio buttons to 
share an event procedure. Use a Case stmcture for 
selection. 
Create an array of a structure. which holds the 
quantity. size. monogram (Boolean). pocket (Boolean). 
price. and extended price for each type of shirt or-
dered. As each shirt type is added to an order. store 
the information in the array. Add a menu option to 
print out the order. which ~ill have the customer name 
and order number at the top. and one line for each 
shirt type ordered. Use the following layout as a rough 
guide for your list. Make sure to align the numeric 
columns correctly. For the two Boolean fields (Mono-
gram and Pocket). print Yes or No. Do not allow the 
user to print an invoice until the order is complete. 
Vet·y Vet·y Bourd• S hit· I Order• 
By Your Nomn 
Clliltome:r name: 
xxx:xxxxxxx.xxxxxx.x:txxxx 
Order Number: 
XX XXX 
Quantitr 
Size 
Monogam 
Pocket 
Price 
E:xtended 
Each 
Price 
XXX 
XXX 
XXX 
XX 
Order Total: 

c 
D 
A 
p 
T 
E 
R 
Web Applications 
I ~ Explain the functions of the server and the client in Web programming. 
2. Create a Web F'onn and run it in a browser. 
:1. Describe tbe differences among the various types of Web controls and 
the relation> hip of Web controls to controls used on Windows Forms. 
4 . Understand the event structure required for Web programs. 
5 . Design a Web Fonn using tables. 
&. Control the styles used on Web pages using cascading style sheets 
(CSS). 
7 . Validate Web input using the validator controls. 
8 . Use AJAX to update a portion of a Web page. 
9 . Define ASP. NET, XML. WSDL and SOAP. 

362 
l ' 
C 
Web Applicati<ms 
Visual Basic and Web Programming 
So far. all of your projects have been based on Windows Fonns and mn stand-
alone in the Windows environment. L1 this chapter you learn to program for 
the Internet. In Visual Basic you use Web Forms to create the user inter-
face for Web projects. A Web Form displays as a document in a browset· 
such as Mozilla Firefox. Opera. or Internet Explorer (IE). If you are using 
VB Professional or above (not Visual Web Developer). you can create docu-
ments that display on mobile devices such as cell phones and personal digital 
assistants (PDAs). 
Important software 1wte: Microsoft has a free product for developing Web 
applications: Visual Web Developer 2010 Express. which is a streamlined subset 
of Visual Studio. This chapter was created using Visual Studio Professional, but 
the projects can be done using Visual Web Developer (VWD). The steps and 
screen captures may differ slightly if you are using VWD. If you are using the 
Express version of Visual Basic for your Windows applications, you will need to 
download and install Visual Web Developer for the Web applications. 
Client!Ses·vet· Web Applications 
Most Windows applications are stand-alone applications; Web applications re-
quire a server and a client. The server sends Web pages to the client. where the 
pages display inside a browser application (Figure 9.1). 
Server 
\Veh Set'Vers 
Request 
Response 
Oienl 
(Bt'Owser) 
To develop Web applications you can either use a remote Web sen'er or make 
your local machine a Web server. Microsoft provides two pieces of software that 
can make the development machine fw1ction as a sen,er: the Visual Studio Web 
server and Internet Information Services (llS). TI1e server software handles the 
Web server functions. and the browser acts as the client. 
The Visual Studio Web server simplifies development testing and debug-
ging. After you have debugged your Web application, you can use the tools in 
the IDE to transfer the application to an liS Web sen,er to share with others. 
The VS Web server is installed automatically when you install Visual Web De-
veloper or Visual Studio. 
Web Clients 
Browsers display pages written in a markup language. Although the most 
common format is still hypeltext markup language (HTML). many programmers 
are using the more dynamic features found in Extensible Hypertext Markup 
Language (XHTML). See the World Wide Web Consortium (W3C) at 
www.w3.org for more details. Web pages also may contain programming logic in 
A server delivers Web pages to 
a client. where the pages 
display in a browser window. 
The server can be on a remote 
machine or on the same 
machine as the client. 

C 
II 
A 
1• 
'I' 
II 
ll 
9 
the form of script such as JavaScript, VBScript. or ]Script; or as Java applets. 
The browser renders the page and displays it on the local system. 
You have likely seen Web pages that look different when displayed in dif-
ferent browsers. or even in different versions of the same browser. Although 
many browser applications are available. the most common are Intemet Ex-
plorer, Coogle Chrome, and Mozilla Firefox. 
You may knoK· which browser your users are using, such as when you are 
programming for a network within a company. called an iutrwuu. Or you may 
develop applications that run on the lntemet and might display in any browser. 
If yom projects will run on different browsers. you should test and check the 
output on multiple browsers. 
Web Pages 
One characteristic of HTML Web pages is that they are stateless. That is, a 
page does not store any infonnation about its contents from one invocation to 
the next. Several techniques have been developed to get around this limitation. 
including storing cookies on the local machine and sending state inf01mation to 
the server as part of the page's address, called the uniform re.source locator 
(URL). The server can then send the state information back with the next ver-
sion of the page, if necessaty. 
When a user requests a Web page, the browser (client) sends a request to the 
server. The setver may send a preformatted HTML file, or a program on the server 
may dynamically generate the necessary HTMl...to render the page. One Microsoft 
technology for dynamically generating HTML pages is active server pages (ASP). 
ASP. NET 
The latest Web programming technology from Microsoft is ASP.NET 4. which 
represents major advances over the earlier ASP.NET and ASP. The ASP. NET 
product includes libraries. controls. and programming support that allows you 
to write programs that interact 1~ith the user. maintain state. render controls. 
display data. and generate appropriate HTML. When you use Web Fonns in Vi-
sual Basic or Visual Web Developer. you are using ASP. NET. 
Using VB and ASP. NET you can create object-oriented. event-driven Web 
applications. 
Visual Basic nud ASP.NET 
Each Web Fonn that you design has two distinct pieces: (1) the HTML and in-
sttuctions needed to render the page: and (2) the Visual Basic code. Th.is sepa-
ration is a big improvement over older methods that mix the HTML and 
programming logic (script or applets). A Web Form generates a file with an 
.aspx extension for the HTML and another ftle with an .aspx.vb extension for 
the Visual Basic code. 
Don't panic if you don't know HTJ\IIL; the HTML is generated automatically 
by the Visual Studio IDE. You visually create the document using the IDE's 
designer. you can then view and modify the HThlL tags in the Visual Studio editor. 
The VB code contains the program logic to respond to events. This code 
file is called the "code-behind" file. The code looks just like the code you have 
been writing for Windows applications. but many of the events for the controls 
on Web Forms are different from those of Windows Forms. Another change is 
that the VB code is not compiled into an executable (.exe) file as it is for Win-
dows applications. 
363 

364 
v 
S 
l l 
,\ 
I. 
C 
Web Applications 
Creating a Web Application 
You can create a new Web application in one of two ways. depending on how 
you wont to access the opplicotion Inter. You con select New Project or New Web 
Site from the Visual Studio File menu. The New Project option is best for Web 
applications that you may want to move from one computer to another. such as a 
classroom. lab. laptop. and home. You can create a two-level folder hierarchy. with 
the .sin file in the top-level folder and all files in the project in the lower-level 
folder. TI1e examples in this text all use the New Project approach for creating 
Web applications. 
Beginning a New Web P•·o,jccl 
To begin a new Web project in either Visual Studio 2010 or Visual Web Devel-
oper 2010 Express, select File I New Project. The New Project dialog box looks 
somewhat different in the two products. but you will make similar choices. In 
the left pane of the dialog (Figure 9.2). select Visual Basic and Web; for the tem-
plate. choose ASP. NET Empty Web Application. Enter a name for the project and 
browse to select the folder in which to store the files. The solution name 
F i ~tn
••e 9 . 2 
Begin a new Web project by entering the location and project name on the New Project dialog box. Note that !.his dialcg box 
can vary depending on the version of VB you are using. 
R«.c:niTc:mpkrto 
Installed Tempf.ates 
• Visucl a.,sic 
Window; 
W,b 
Oft!CEo 
Ooud 
Reportrng 
SharePcint 
Sdvertight 
Te>t 
WCF 
WOc'k.flow 
I Other L~ng uoges 
~ 
ASP.NHWebApplicaticn 
~ 
A~P.NET ~AVC 2 Web Application 
-1~ A~P.NH Empty Web Application 
~ 
ASP.NET MVC 2 EmptyW~bApplic~tOn 
v9>-
(J'V ASP.NET Dynam1c Data Enbtiei Web Application 
vg., 
.F A~P.NET Dynamic Data lirHJIO SQl 'ltVeb Application 
m 
A>P.NH AJAX s,,..,, Control 
m 
A~P.NET AJAX Sel\/er Con1rol E>.,ende-
i!) ASP.NH s~IV~I Control 
Vi-sual Basic 
Vis.ua! Basic 
Vtsu<~I Sas•c 
Visual Basic 
I S=ch ]n,l•&ed T """"''" 
P] 
r 
Type: Vi;ual B-~;ic 
An Empty projed for creating an 
ttpplicaticn with a Web user interface 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
9 
defaults to the same name as the project. Make sure that the box for Create di-
rectory for solution is checked and click OK. 
After creating a new empty Web application. you will add the Web pages. 
images. and styles that you need for the site. By convention. usually the main 
Web page in an application is called Default.aspx, which contains the visual 
representation of the page. A second file. Default.aspx.vb. the code-behind file. 
holds the VB code for the project. This model is very similar to a Windows pro-
ject, which also keeps the visual elements separate from the code. But in the 
case of Web pages. the visual elements are created 1vith HTML tags rather than 
VB code. 
ASP. NET provides two models for managing controls and code. In addition 
to the code sepa1·atiou model described in the preceding paragraph. you also 
can use a single-file model. which combines the visible elements and the VB 
code in a single file. In early versions of ASP (before .NET). the single-file 
model was the only fonnat available, so you may see old applications created in 
this style. We will use the code separation model for all programs in this text. 
A(lcling a Web P age 
To add a Web page to the empty Web project. select Project I Add New Item. In 
the Add New Item dialog box (Figure 9.3). select the Web Form template and en-
ter a name for the Web page. To be con<>istent, it is best to name the first page 
in a project Default.aspx. 
Select Project I Add New Item to add a new Web Forn~ to the empty Web project. 
AM New Item· Ch09Hello 
lmta.llcd Tc:mpktto 
~on by: I Q; fault 
Figure 9.3 
"' Vi~ua l Basic 
Code 
D•to 
General 
Web 
~ 
Vleb Form 
A form for Web Application!: 
Win do-A·:: Forms 
Reporting 
Silve•light 
WorL:f low 
YVPF 
~ 
Web form u~ing Mo~crPcge 
~ Web User Control 
E1 
Cb~s 
Ll M"rtc:r Pdge 
D l"'ested Master Page 
~ 
HTMLPage 
~ 
Style Sheet 
Visual Basic 
Visual Ba~ic 
Vis<.J~ I Bosic 
Visual Basic 
Vi!:o.ul Batie 
Visu_,l Bosic 
365 

366 
v 
S 
l l 
:\ 
L 
G 
,\ 
S 
(' 
Web Applications 
Web Fonns in the Visual Studio IDE 
As soon as you open a new Web Fom1 in Visual Studio, you notice many differ-
ences from Windows Fonns. Instead of a Windows Form, you see a new Web 
Form (Figure 9.4). also called a Web page or Web document. The toolbar is dif-
ferent. as is the list of files in the Solution Explorer. The toolbox has different 
controls. and even those that look the same. such as Text Boxes. Buttons, and 
Labels. are actually different from their Windows counterparts and have some 
different properties and events. For example, Web controls have an ID property 
rather than a Name prope1ty. 
Figure 9.4 
The Visual Web Developer IDE with a new Web site opened. If the page's Source tab is selected, click the Design tab. 
Tools 1e;t Winoo'c\ 
Help 
-~ .. -J 
# 
j 
.J c;:;:;.; ~;{.QE~ 
• 
~11.!!1'~ ~ ~ !'!!2.0!! !!! . 
;t./ 
~ 
fN~e) 
tOtf~blt 
lJ I 
Y: 
"' 
... 
Solut1on Explorer 
• Q x 
§] ButtM 
['; Cclender 
0 
CheckBox 
~= 
Ched~&o:<li.st 
~ DropOownli!lt 
\J Fii.Upload 
i ~k! 
HtddenField 
A 
HypetUnk 
IIi Image 
!i!l 
trnage6uuon 
~ 
Split the window and show both Design ami Source 
Design tah 
'l11e IDE allows you to view ihe Design. ihe Source (HTML and ASP.NE'l). or 
a Spl.it ~indow. Click on the Design tab at the bottom of the window (Figure 9.4) to 
display the page. The Properties window may not appear automatically; press the 
Properties button or select View I Properties Window to display .it. 
C1·eating Yom· Fi•·st Web Fo•·m-Step-by-Step 
This simple step-by-step exercise creates a Web application that displays a 
Hello message on a document in a browser ~ndow. 
These instructions are written for VB Professional. If you are using Visual 
Web Developer. the menu choices may be slightly different. 

C 
II 
A 
1• 
'I' 
" 
ll 
9 
Begin the Project 
STEt' I: Open Visual Studio 2010 or Visual Web Developer 2010 Express. 
STEP 2: From the File menu select New Project and select the template for 
ASP. NET Empty Web Application. Set the Web application name to 
"Ch09Hello" and the location to your preferred location. Make sure 
that the box for Create directory tor solution is checked and click OK. 
STEI' 3: From I he Project menu, select Add New Item and click on Web Form. 
Name your form "Default.aspx". 
Note: You also can right-click in the Solution Explorer to add new 
items. 
Create the User lmerface 
You add elements to a Web page in a manner similar to writing text in a word 
processor. You must press Enter to move to a new line and press the spacebar 
to move across a line. 
STEt' 1: Click underneath the box at the top of the page and press Enter a few 
times: type ''Enter Name: " . (Do not include the quotes, but do in-
clude the colon and a space.) 
STEt' 2: Add a Text Box control from the Standard section of the toolbox. You 
can drag the text box onto the form or double-click the tool in the tool-
box. Double-clicking makes the text box appear at the insertion point. 
Note: The text box is a server control. and the text "Enter Name:" 
is static HTML. You will learn more about these elements later in this 
chapter. 
STEI' 3: Set the lD property of the text box to NameTextBox. You may want to 
click the Alphabetic button in the Properties ~tindow to sort the prop-
eJ1ies. The lD proper1y appears at the top of the list due to the paren-
theses, just as the Name property appears at the top of tl1e list in 
Windows ForlllS. 
STEI' •t: Click after the text box. press Enter twice. and add a Label control. 
STEt' 5 : Set the Label's lD property to MessageLabel and delete the Text prop-
erty. The label will display its ID proper1y at design time but not at 
nmtime. 
STEI' 6 : Click after the laiJel. press Enter a couple of times. and add a Button 
control. Set the ID proper1y to Submit Button and the Text property to 
"Submit". 
STEt' 7: ln the Properties window, drop down the list of objects and select 
DOCUMEN1: which is the Web Fom1. Set the BgColor property (back-
ground color) to a color of your choice. 
STEI' II: Set the document's 1itJe property to "Hello Application". The 1itle prop-
erty displays in the title bar of the browser when you run the application. 
Add Code 
STEP 1: Double-click on the Submit button and add the following code. 
'Web Site: 
'Web page: 
'Programmer: 
'Date: 
'Description: 
Ch09Hello 
Defau1t.aspx 
Your Name 
June 2010 
Concatenate the name and display in a label. 
367 

368 
l ' 
(' 
Web Applications 
Public Class _Default 
Inherits System.Web.UI.Page 
Protected Sub SubmitButton_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles SubmitButton.ClicK 
' Display the name and a message. 
MessageLabel.Text - "Hello " & NameTextBox.Text & "! " 
End Sub 
End Class 
Hun tbe Web Application 
The menu choices and toolbar buttons for mtming a Web application differ 
somewhat for Visual Web Developer and the full version of Visual Studio. 
STEP 1: Run the project. 
Note: You also can right-click on the aspx file or on the page in the 
Document window and select View in Browser. 
STEP 2: The default browser should launch and open the page with your page 
showing. 
Note: If you are running with a firewalL you may receive a message 
that the firewall has blocked the Web Sen•er and asking what you 
would like to do; choose Unblock to permit the server to render your 
page and then refresh the page in the browser window. 
STEP 3: Enter a name and press the Submit button. A "Hello" message should 
appear in the label. 
STEP L: Close the browser window to end execution. 
Viewing the HTNIL Code 
When you are viewing your Web Fonn in the designer. you can see three tabs 
at the bottom of the form: Design, Split. and Source. You can click on the Source 
tab to see the static HTML code. The HTML creates the visual elements on the 
page and is automatically generated. like the Windows-generated code in a 
Windows Fonn. The Split tab splits the Document window horizontally and 
shows you both the design and the source. 
Cont•·ols 
Several types of conh·ols are available for Web Fonns. You can mix the control 
types on a single fonn. Refer to Figure 9.5 to view the toolbox. For most of yow· 
work, you will use the controls in the Standard section of the toolbox. 
• 
Standard {ASP.NET server controls). These are the richest. most powerful 
controls provided by ASP. NET and the .NET framework. Web server con-
trols do not directly correspond to HTML controls but are rendered differ-
ently for different browsers in order to achieve the desired look and feel. 
Some of the special-purpose Web server controls are Calendar. Check-
BoxList. AdRotator. and RadioButtonList. 
• 
Data. This list of controls includes the GridView and DataList for display-
ing data. 
• 
Validation. These controls are used to validate the data before they are sent 
to the server. 

C
ll
1\
l1
'l'
li
R 
9 
Toolbox 
j standa;d 
p O,t;, 
1> Vali:d-ation 
!> Navigation 
1> login 
~ \VebParts 
1> AJAX Extemions 
() Dynamic Dala 
1> Reporbng 
~ HTMl 
4 General 
. ~ )( 
Navigation. This list include5 a Menu control. 
• 
Login. Visual Studio includes login contTols and wizards. 
• 
WebParts. The Web Parts set of components enables users to change the ap-
pearance and behavior of the interface from the browser. 
• AJAX Extensions. These are a set of AJAX (Asynchronous JavaScript 
and XML) controls that provide for faster Web page loading and richer 
interfaces. 
• 
HTML. These are the standard HTML elements that operate only on the 
client. You cannot write any server-side programming logic for HTML con-
trols. As you submit forms to the server. any HTML controls pass to the 
server and back as static text. You might want to use HTML controls if you 
have existing HTML pages that are working and you want to convert to 
ASP. NET for additional capabilities. 
• 
Others. Depending on your version of VS. you may have other sections. 
such as Reporting. 
You can see the available controls in the toolbox when a Web Form is in 
Design view. Generally. the Standard section is showing (refer to Figure 9.4). 
Try selecting other toolbox tabs, such as Data. Validation, Navigation. Login. Web-
Parts, and HTML. 
In Design view. you can tell the difference between client-side HTML con-
trols and server-side controls. Click on a control and a popup Data Tip tells you 
the type of control and its ID (Name). Figure 9.6 shows two button controls. one 
an ASP. NET server control and the other an HTML control. 
ASP server control~ 
Client-side HT'I'viL control ----7 
369 
The Standard section of the 
toolbox holds the ASP.l\'ET 
server controls. which you 1oill 
use primarily. Click on each of 
the tabs to view the controls in 
each section of the toolbox. 
The popup Data1ip for each 
control identifies the type of 
control and its /D. 

370 
v 
S 
l l 
,\ 
I. 
C 
Web Applications 
E'·c nl Handling 
You write VB code for events of Web controls in the same way that you write for 
Windows controls. The events may actually occur on either the client or the 
server. The process of capturing an event. sending it to the server. and execut-
ing the required methods is all done for you automatically. 
The events of Web Fonns and controls are somewhat different from those of 
Windows Forms. For example, a Web Fonn has a Page_Load event rather than a 
Fonn_Load event. You can see the events of the page using the editor when view-
ing the "code behind" file; in the Cfass name list on the left, select (WebFormName 
Events) and drop down the Method name list (on the right) t•) see the list of events 
for the page. You also can select any control on the page to see the events of the 
control. For example. if you select a button control, you can see that you still have 
a Click event, but the list of events is much shorter than it is for Windows F om1s. 
Files 
The files that you find in a Web application differ greatly from those in a Win-
dows application (Figure 9.7). Two files make up the f01m: the aspx.designer.vb 
file and the aspx.vb file. The aspx.designer.vb file holds the specifications for 
the user interface that are used by the server to render the page. The aspx.vb file 
holds the Visual Basic code that you write to respond to events. The aspx. vb file is 
the code-behind file for the other file. When you are designing the user 
interface, you select the FormName.aspx tab and select the Design tab at the 
bottom of the 11inclow; when you are working on the code procedures. you select 
the FormName.aspx.vb tab. 
~olutlon fxplorff 
• Q X 
~ ®fm m ~l
lit 
~ Ch09Hello 
b 
~ My Project 
1> !9 Reference~ 
1> '.:J bin 
~ ·:.::.< o~j 
• @] D<faul1.aspx 
~ D=:fault.a;:px.designer,vb 
~ Odoult.ospx.vb 
0' ~ 
Web.conf1g 
~ Soluti ... 
Testing in Othe•· B1·owse•·s 
You can test your project in another browser. such as Mozilla Firefox. From the 
Solution Explorer window. right-click on the Web page file name and select 
Browse With. You can select from browsers that are installed on your computer. 
l. What two files make up a Web Fonn? What is the purpose of each file? 
2. How can you display a preview of how your Web Fonn ~till display in a 
browser without actually rlllming the program? 
3. What is the difference between an ASP.NET server control and an 
HTML control? When might you want to use each type? 
F i g n 1·e 9. 7 
The Solution &plorer for a 
Web application. The Web page 
called ''Default" consi.sts of two 
.frks: Default.aspx.designer.vb 
(the visual elements) a11d 
Default.aspx.vb (the VB code-
behilld file). 

C 
II 
A 
1• 
'I' 
" 
ll 
9 
Laying Out Web Forms 
You must always be aware that users may have different browsers, different 
screen sizes, and different screen resolutions. ASP.NEf generates appropriate 
HTML to render the page in various browsers but cannot be aware of the screen 
size, resolution. or window size on the target machine. 
Using Tables fo1· Layout 
If you want to have more control over placement of elements on your Web page. 
you can add an HTML table. You can add controls and text to the table cells to 
align the columns as you want them. 
The table is an HTML control. which doesn't need any server-side pro-
gramming. Although there is a Web server Table cc•ntrol. that is generally 
used when you want to write code to add rows. columns. or controls at run 
time. 
You can either add a table to a Web page by selecting the Table tool from 
the toolbox HTML section. or allow the IDE to give you more help. Select Insert 
Table from the Table menu. In the Insert Table dialog oox (Figure 9.8). you can 
choose the number of rows and columns. as well as set many attributes of the 
entire table. 
Insert Table 
Size----------------------
Bows: ~~ 
Columns: r-~ 
layout 
Atignment: I 
Default 
__ 8 l't]Spedfy widtl:!: 
E.loat: 
~ 
0
Inpi2S_els 
1§) In perce!}t 
Cell ~dding : r-ffJ 
Cell ~adng : r-~ 
[] Spedfy height: 
In pi~els 
In percent 
Borders---------------------
Si<.e: 
ro----~ 
~olor : 
• C2J 
CJ Coll,;pse table border 
Background--------------------
CQ.Ior: 
0 Use background pictyre 
I 
~fO'A'Se... I Prope.r!1es ... j 
Set----------------------
0 Set as default for ne:!!! tables 
OK 
) I Cancel 
371 
Figure 9.8 
In the Insert Table dialog box, 
you can create a new ta.ble and 
set many properties of the 
taMe. 

372 
\ .' 
S 
U 
A 
I, 
C 
Web Applications 
After you create a table, you can set many more properties, such as bor-
ders. alignment, and background color for the entire table, for individual rows. 
or for individual cells (Figure 9.9). Note that the HTML colors differ from the 
ones you can select for the document. You can adjust the column widths by 
dragging the bar between columns. If you want to move the table. you must 
click outside the table and insert or delete lines on the page. 
To add or delete a table row. first select a row. Then tight-click and use the 
context menu. You can use the same technique to add or delete a column. 
Fig u1•e 9.9 
Move the mouse pointer around to make the various arrows and handles appear. You can click on the arrows t.o select the 
entire table. a row. or a collunn. You also can resize the table by draggi11g the resizing handles. 
I Select entire table 
f ··.·.·.· . 
.,.;·.-.. , . ., ... ·.·.·.·.·.·.·.·.·.·.·.·.·.·.·.·.-T, ........ "····"""'"'··· .. ····y· .......... ..., .................... 1l 
!::: : ::::: :: :::: :: :::: : ::::: :: ::::: , :·: ::: : :: : :: : : : ::::: : ::::::::::::: ::l:: : :::: :: :::: :: :::::: ::::: :: ::: : :::l~Resizewidth 
L •••... ~._. ...... , ......... · .... w.·•••·······~'i.,,w_.. ... ,,,,,\M''""'''L,._ ... ._,,._.,,,..,_.,w,._w._,j\ 
Resize height 
Resize diagonally 
~ Se lect column 
rc:·,~·:·:·:~::·:·:·:~.~:-,,~.~:·:·:·:::·:·:·:·:·,11::::~:::~~::::~::::::::::::::·:r:::~~::~:~:::::::::::::::~~1l 
i~ 
; ~ 
~~ 
~! 
1::::::::::::::: :::::: :: ::::::::::::::: :::: ::::::::::::::::::::::::::::::::::::::::::::: ::::::::::: :::: ::::::! 
~ 
.............. ·.: .. '.! .. : .. : ... ·.:.:.:..:..•..:..•,..•,:.:..•..!.•.: .. • .. ·..:..-..:.:.: .. • • • ~~.::.:.~.:..:.:.:.:.:..:..::..:.:.u.:.:.:..::.:...::..::..:.:..:.:.::.:.JL.:..:.::..:...:.:..::...:.:...:.:..:.:.:.:..:.:..::..:.:...::..:..:.::...:.:.:..:J1 
!C::~:~::·:·:~:·:~:·:·:~:~:·:~:·:~:~:·:~:·:~:·:·:·:·:·:~:·:·:~;::::~::~:::::::~:::::~:::::~:::·:11::::~::::::~:::::::::::~::::::::·1i 
Select row 
~1 ::: : ::: :: : ::::: ::::::: :::::: :::::: ~~ : :: :! :::::::::::::: :::::::::::::: : ~i:: :: : : :: : :: : :::: ::::::: :: ::::::::: ~ 
t: 
.. 
.. 
~ 
i'..:,· ...... ·,":,..·.:,.: ... • ... • .. • .. : .. ·.:..·~· .. • .. ·~·.:.: .. ·~·.:~-.: .. ·.:..·,:~·.:.:.:..::..:.:..:.u..:.:.:...:..:..:.:.:.:..:.:..::.;,:.;,.:..::. :.:.,.: .:..:.:..::..::.ii..:.:.: .:..:..:..!:..: .:.:..:;.,:.:.:.:...:.:..::. :.:...:.u.:...:.::..:..::..::."l 
Emel'iug Contl'o);< Ol' Text iu a Table 
You can add controls to any table cell or type text in a cell during design time. 
H you want to be able to refer to the text in a cell at run time. add a label and 
give it an ID; otherwise you can type text di.rectly into the cell. Figure 9.10 
shows a table in Design view. Although the table's border is set to zero. the 
borders appear at design time but not at run time (Figure 9.11). 
When you are working a;th a table, there are some menu options that may 
help you adjust your table. The Table menu not only allows you to select the 
table and to insert columns, rows, or cells, but it also provides tl1e ability to 
merge cells. This means that you can make the entire top row a single cell for 
your title or you may combine a couple of cells for a larger image. 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
9 
Default.aspx x 
~ 
••••••w •••••• ••• •• ••••• 
• ...... :· .............. N;;;,;~,F---';.:.:.;:=.:-.....;c:._;;;:;..:;;;.;....: _ __:;,:_...:..._.;.;. __ ...... .J 
Address: 
Phone:r--'----------'----'-
I 
Ill Oesi~~ 
o Split I WI Source 
8J§i)l<icrm#forml>j <:div'>' 
~ 
htlp://10calllost:S02l7/Defaultaspx · Windows lmernet Explore< 
l=l121'tfW 
Ov 
~~ httr<l'loolhostS01l ~ I ~~ I..!J ltD Bing 
.P ·I 
W F-avontes 
'IJ http<// localhost50l57/ ... I 
~
· ~ ~ w <i> ~ Page • 
Safety ~ 
)) 
Name: 
I 
Address: 
Phone: 
I Submit ! 
Done 
~ local ini:nnet I Protected Mode Off 
-~'a
~ f!ll OO% . 
~ 
Ahso lut~ Positjoning 
You can choose to place controls on a Web page using absolute positionin{;. 
Tl1is option places controls in a specific X and Y position. lf you choose ab-
solute positioning, be aware that controls may not show up if the user has set 
the browser window to a small size, or they may overlap each other if the user 
has selected a large font size for the browser window. To tum on absolute posi-
tioning. select Format I Set Position I Absolute. 
When you are using absolute positioning. you can drag a control using the 
white tab at the top of a selected control (Figure 9.12). 
Absolute positioning keeps controls in the same position relaiive to the 
container-
the Web page in our case. You also can set individual controls to an 
absolute position using cascading style sheets, which are discussed later in this 
chapter. 
lnd udjng Images on Web P ages 
You can add graphics to a Web page using the Image control. The concept is 
similar to the PictureBox control on Windows Forms, but the graphic file is 
connected differently due to the nature of Web applications. Each !mage con-
trol has an JmageUrl prope1ty that specifies the location of the graphic file. 
373 
Figur e 9.10 
Add text and controls to the 
table cell.s. Although the 
Border property is set to zero. 
the borders stiU show at design 
time. 
Fig11re 9.ll 
The table at rnn time. With the 
Border property set to zero. the 
borders do not appear. 

374 
\ .' 
S 
U 
A 
I, 
C 
Web Applications 
Defau~.a<px' )< 
T 
laso:te>tbox•T~ 
II 
• ~ 
o SpL;t I GJ So<Jrce I 8J <" p:TextSo;<.<tylol<ITextB .>~ 
To place an image on a Web page. you should first copy the graphic from 
tl1e Windows Explorer and paste it into tl1e Solution Explorer for your Web site. 
If the project is open in the IDE when you add the graphic files. click the 
Refresh button at the top of tl1e Solution Explorer to make the files show up. 
You can add an Image control to a cell in a table or directly on a Web page. 
In the lmageUrl property. click on the Property button ( ... ) to open the Select 
Image dialog box (Figure 9.13). If you hove added the graphic to the project 
folder and either clicked ilie Solution Explorer Refresh button or reopened the 
project. the graphic file will appear in the Contents pane. 
Drag a control to a new 
position using the tab at the 
top of the selected control. 
J.' i g n•• e 9.13. 
Select the graphic for the lmageUrl property of the Image control in the Select Image dialog box. 
Seled fm<lgc: 
~
t> I....O..J 
Projed folders! 
Contents oi folder. 
I ' ~ 
Ch09JmagelnT•ble 
Iii! DB 
;> ~ My Project 
Filet of lyfe: 
~~age. Fjle~{*.g if;~.jP$• 
jpeg;~.bmP!'* .wmf; 7 .png) 
·I 
l 
I 
OK 
II 
Coned I 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
9 
The page in Figure 9.14 is made up of a table of three rows and three 
columns. The image and company title are in the first row and the text box is in 
the second row. The hyperlink shown in the last row is discussed in the section 
"Navigating Web Pages" later in this chapter. 
lfj http:i/IOCalnost::>UL!O/Ueraultaipx · wmoows intemet txplorer 
[ ~l SI~ 
v0 I ID htt!>/flocalhort:5Q. ·I 
+1 I X I e B.rg 
p • 
~ Favorite~ 
'J1 http;//localhort:50270/ .. , 
l ~ .
til • ..:! ~ • 
Page • 
» 
. .  
:ti! ·- :ti! g>"""' 
I 
I 
: 
I 
Contact Us 
' I 
,-"--
. 
D 
Q. Local intnnet I P1oteded Mode: Off 
~ll
. 11\100% . 
= 
~ 
l. Name two ways to place a button at the bottom of a Web page. 
2. What is the difference between an HTML Table control and a Web 
Table control? 
3. Where should you store images for a Web application? 
Cascacling Style Sheets 
You can use cascading style sheets (CSS) to create, modify, and apply styles 
to single elements on a page. one entire page. all page.<: of an application. or all 
applications of an organization. 
Using Styles 
Styles are rules that can specify page layout position, font color. alignment. 
margins. borders. background. and bullet and numbering formats. You can cre-
ate and apply new styles within a page, attach an external .css file and apply 
the styles. and even save the styles in a page to an external .css file for use on 
other pages or Web sites. 
You can choose to define styles in several locations. including on the Web 
page for individual elements, called an inline style: in a style section of a Web 
page. called a page style; or in an external style sheet (.css file) tl1at is linked or 
imp01ied into the Web page. Generally programmers use inline styles for elements 
that appear only once on a page. page styles for elements that may be used in 
more than one location on the page. and external style sheets for elements tl1at 
may appear on more than one page of a Web site or in multiple Web sites. 
375 
Figure 9.14 
Place images. text. and 
controls where you want them 
l:ry using a t<Zble. The elements 
on this page are inserted into 
table cells. The graphic 
appears in an Image controL 

376 
v 
(' 
lTt,b ApplicatioliS 
The term "cascading" in cascading style sheets refers to the order of prece-
dence of style rules. More locally created styles override the rules of the more 
globally created styles. For example. you might apply an h1 style from the style 
sheet (global) that sets the font. color. size. and alignment. And if you also ap-
ply a style defined in the page for the color and size. the local (page-defined) 
color and size take precedence. but the font and alignment of the style-sheet 
style are still in effect. And if you also apply an in line style for ihe size. the 
inline (more local) style will oveJTide the size but keep the color of the page-
defined style and the font and alignment of the style-sheet style. 
TY[H'S of Styles 
In Visual Studio. you will use several tools to define. apply, modify. and change 
the location of styles. The Apply Styles window and the Manage Styles window; 
both of which you will learn about in the next section, use the icons in Table 9.1 
to identify the various types of styles. You can create a new style sheet or add 
an existing style sheet to a project. When a style sheet file exists within a pro-
ject. you can add it to a solution by using Format I Attach Style Sheet. 
Style Tools 
The Visual Studio 2010 IDE and Visual Web Developer have windows that 
make it easy to define, apply. and manage styles. The window~CSS Propetties. 
Manage Styles. and Apply Styles-appear in the same area as the Properties 
window and are available from the View menu. Also. a Fotmatting toolbar 
appears in the default layout of the IDE. Figure 9.15 shows the new tools. 
Note: To display the Style windows. first select a control on the Web page. then 
open the View menu to see the windows listed. In VB Express. select Other 
Windows to see the choices. 
Cascading Style Sheet (CSS) Style TY(>es 
T altl e 
9 . 1 
Icon 
Style Tyt>e 
How Referenced 
• (Red dot) 
• (Green dot) 
• (Blue dot) 
• (YeJlo,.. dot) 
10-basedstyle: defined in a .css file. Applies to a specific 
element by ID. 
Class-based style; defmed in a .css file or the current page. 
Defines style properties that you ,.-ant to apply to some. 
but not all, elements of a particular type. such as some 
<p> (paragraph) elements. 
Element-based style: defined in the style block of a page. 
Applies to all elements that use a particular tag. such as 
<p> (for paragraph) or <td> (for table cell). 
Wine style. Applies only to the specified item; ,..ilJ not be 
reused by another element. 
Style name preceded by a pound sign. 
Example: #foot er 
Style name precede<] by a period. 
Example: . int ro 
Style name only. 
Example: p {margi n -left: 25px; 
margi n-right: 25px} 
In Design view. apply formatting such as 
font. size. and bold. from the Format menu 
or the formatting toolbar. In Source vie .. ·, 
formatting appears using the style element 
of the opening tag. 
Ex,w,ple: <p st yle=" f ont -wei ght : 
bol d; font- style : italic> 
<W (Circled dot) 
Indicates that the style is used on the current page. 
A dot without a circle indicates that the 
style is defined but not used. 
@ (At sign) 
Indicates an imported external cascading style sheeL 

C
II
A
I•'I'
I'R 
9 
The F onnatting toolbar and the styles windows. 
·-
Gf) 
Ouuu" 
mil 
c~lendt.l 
0 
Ch«ltb 
:: ('hH"k-ibl i., 
g 
OropOOWfll ist: 
u f]='Jplo.d 
D!ml 
aM 
1-tddcnMdd 
Jlo 
~pe1lin \ 
Bl 
!rooge 
@ 
Jmo3cllvltoo 
1!11 
ltmgchbp 
A 
ltbd 
l~~Cfl 
let&·· 
L•er.l 
l~GI~ 
leon for style not in 
CSS Prope1ties window 
The Formatting Toolba1· 
You can use the Target Rule drop-down list on the Formatting toolbar to select 
Automatic or the location of style information. For example. one option is lnline 
Style, which places the style code directly into the HTML source code. You also 
can choose to create an external .css file that can be reused on multiple pages 
or projects. 
Be fining S Lyles 
You define a new style in the New Style dialog box (Figure 9.16). which you can 
display from several locations. Choose Apply New Style from the Formatting 
menu, or select New Style in either the Manage Styles window or the Apply 
Styles window. You also can right-click in the CSS Properties window and 
choose New Style from the context menu. 
In the New Style dialog box. choose the category and then make settings. 
For example. click on Font in the Category list and set the font attributes: click 
on Block and set such attributes as text-align. text-indent, and ve1tical-align; 
click on List to set bullet and numbering attributes; and Table l1as settings for 
such attributes as borders and spacing. 
377 

378 
\ 
S 
l 
\ 
L 
" \ 
.... 
(' 
Wob App/ic<ttwns 
--
~ 
New S~lc: 
Sded:or: 
.newSt)l~ 
J.l 
Dftc:lp'y new at)'4e to occu~ 3eie!;'!ion 
CE:..th! n : Current p~ 
f}l LJU..: 
~ 
... 
C4~1=~-t --······ 
--
Bbot 
font-tcnfv: 
-~ 
e.ckg....-.1 
krt,~; 
G: ., 
~~~&CCif.MO"'' 
So<de" 
font-'AO!tt: 
'::1 
fl underft 
Box 
I ovcrlnc 
PO!ll)on 
-~· 
9 
Jlne-tl.ro4> 
l~)'Out 
~ 
L~t 
font.YCiflat"t: 
lblrk 
Tobie 
ttxtvonsfc:rJ-1; 
8 
1nonc 
cDcr: 
.sr 
Prc:,·ic:w: 
1 
A.illbY~gLLij 
CEsOIPklr.! 
I 
I 
~~~ 
~lanagiuf! S tyles 
In the Manage Styles window (refer to Figure 9.15). you can see a p review of 
each style. Hover the mouse pointer over a style name to display the code in the 
style. You also can see the setti~ 
for a given style in the CSS Properties window. 
In the Manage Styles window. you can drag styles from one category to an-
other to change the location of the style definition. For example. if you created 
a style in the current page and want to move it to the .css file so that you can 
use it in other pages. drag the style name from the Current Page pane to the 
StyleSheet .css (or other name of a .css file) pane. 1£ you have more than one .css 
file attached to the page. you can choose the fLie to which to add a style. 
Applying St yles 
You can apply styles from several locations, including the Apply Styles window. 
the Manage Styles window. and the New Style dialog box. When you create a 
new style on the New Style dialog box. check the box for Apply new style to doc-
ument selection (refer to Figure 9.16). Us ing the Apply Styles 'Iindow. select the 
element on the page and click the desired style. To use the Manage Styles ~~>in­
dow. select the element on the page. then right-click the desired style name and 
select Apply Style from the context menu. 
FIJ!ur~ 9 . 16 
Deji111! a. new ~tyle in the New 
Style dwlog box. Enter tlte 
name for the 111!!0 style or 
choose the UJgfor an element 
type in the Selector box. The 
Define in bar allowJ you to 
choose the location for the 
uew Jt)le. 

C 
II 
A 
1• 
'I' 
" 
ll 
9 
Modifying Styl<'s 
You can change the attributes of a style from either the Apply Styles or Manage 
Styles window. Select the style name. Iight-click, and select Modify Style from 
the context menu. You also can modify style attributes in the CSS P roperties 
window (Figure 9.17). 
CSS Properties 
~~! ~ 1 ~~ 
Applie<IIM es 
body 
.T extBo<Stvle 
< in line style> 
CSS Propc-rtia 
wlor 
font-family 
££'font 
font·si2e 
font-!>tyle 
ftmt.v.:~ria n t 
font·wciqht 
tfKt-decontion 
text-transform 
<body> 
•'/X 
lsumrmryl 
(~tyleShee.m) 
< ~~ ~p: l o<tBoxf T ottBcOC..> 
<asp:TextBcx:#Te.xtSoxl"> 
•
• FFOOOO 
Comic Sans MS 
,j 
~ [B.~ .. ·:::.............. . . . .. .
. .. ~ 
, 
...... ,.., ......... : ...... 
~ CSSPr ...
. . ' • 
Navigating Web Pages 
ASP. NET provides several techniques for navigating from one Web page to an-
other. The easiest form of navigation is to use a HyperLink control. 
Using Hypel'links 
You may need to allow your user to navigate to another site or to another page 
in your application. You can add a HyperLink to a Web page. The HyperLink 
control allows you to enter a Text property for the text to display for the user 
and a NavigateUrl property that specifies the URL to which to navigate. 
When you select the NavigateUrl property for a Hyper Link control. theSe-
lect URL dialog box appears (Figure 9.18). You can select die page from the list. 
lf you want to navigate to another Web site. simply type the Web address as the 
Navigate Uri property value. 
Adding a Second We b Page 
Often you need to include multiple Web pages in yotu application. For exam-
ple, you can have a separate page to display contact information for your com-
pany. You can create a Web Form that contains labels about the company and a 
HyperLink control to retum to the company's home page. The following step-
by-step exercise adds a page to die Hello project you created earlier and adds 
HyperLinks to each page to navigate back and forth. 
379 
lng u r e 9. 1 7 
View and modify style elements 
in the CSS Properties window. 

380 
v 
S 
l l 
,\ 
L 
(' 
lTt,b ApplicatioliS 
F i g n1• e 
9 . 18 
Select the page to which to ncwigate for a Hyper Link control from the Select URL dialog box. 
Sclect URl 
Pro;ect folders: 
Contents of folder. 
~ (t. ~h09Hand!:On 
~~mm 
~ B!1 My Project 
iO:fLit.a~px 
!!lJPoyphone.wmf 
~ 
Styi~Shc:c:lcss 
~ 
Web.config 
Add n New Fonn to the l:-lello Project 
STEP 1: Open the Ch09Hello project in the IDE if necessary. 
STEI' 2: Select Add New Item from the Project menu. 
I 
OK 
Note: If the templates are not listed. make sure that the project is 
displaying in the Solution Explorer. 
STEP 3: In the Add New Item dialog box (Figure 9.19). set the Name box to Con-
tactlnfo.aspx. 
STEI' 4·: Click Add. The Contactlnfo.aspx file appears in t11e Document window. 
STEI' 5 : If the source code for HTML is displaying. display Design view by se-
lecting the tab at the bottom of the Document window or by clicking 
on the View Designer button in ihe Solution Explorer window. 
Add Conu·ols to the New Page 
STEI' 1: Set the document's Title property to "Hello Contact Information". 
STEP 2: Add a Hyper Link control to the top of the page. 
STEP 3: Set the HyperLink's Text property to " Return to Home Page". 
STEI' 4., Click on the Propetty button for the HyperUnk's Navigate Uri property 
to open the Select URL dialog box. 
STEI' 5: Select Default.aspx (Figure 9.20). the main page of this Web site. and 
click OK. 
STEP 6: Press Enter three or four times and enter the contact infonuation. 
(Make up any information.) 
Add n Flypet-Liuk to the Main Page 
STEI' 1: Display Default.aspx in the designer and add a HyperLink control to 
the bottom of the page. 
STEP 2: Set the Text property of the control to "Contact Information". 
['i'~ 
II 
Cancel I 

( ' 
II 
;\ 
1• 
T 
t: 
R 
9 
J' ll(ure 9.19 
To add a new Web Fonn to a Web site. select Web Form in the Add New Item dialog box. 
Add New kem - ChOSHe!lo 
"' Viscm g, ~ic 
Code 
o. •• 
~.n eral 
Web 
'/tjndowc Forme 
R~o rting 
51\·er!ight 
'lt'crtflow 
1\PF 
k1 
~ 
u 
I U 
l!J 
w~b foJrn 
Web fotrn usin-g Mtsl~ Page 
Web U;cr Control 
Clc~ 
Vrsuat Bo:sic 
Vrcuai8Ut( 
H1Ml 0 age 
V1SUal5t9( 
-} ~ Style Shtrl 
Select Default.aspx. the main page of the Web site. as the page Ia which to navigate. 
Stl«t U~l 
Proje<t fci.ders: 
ContEntS of folder: 
~jci"C9Hello 
~ 
Coi"'UctlnforiT\3tion.a~px 
.AI My Pro,oa 
' 
,.!}Web.config 
[ 
J' IJ,(ure 9.20 
'il~ 
o~ 
I [ 
Cal1(:el J 
381 

382 
l ' 
C 
Web Applicati<ms 
STEI' 3: Set the NavigateUrl property to Contactlnfo.aspi. 
STEP 4·: Run the application. Test the links on both pages, which should navi-
gate back and forth between the two pages. 
Note: 1f the Default.aspx page is not the first page in the browser, in 
the IDE light-click Default.aspx in the Solution Explorer window and 
select Set as Start Page from the context menu. 
l. What property of a HyperLink control indicates to which Web page the 
control is linked? 
2. Describe how to set up the Hyper Links to navigate from a main page to 
a second page and back again to the main page. 
Using the Validator Controls 
, 
ASP.NET provides several controls that can automatically validate input data. 
You add a validatot· controL attach it to an input control such as a text box. 
and set the error message. At nm time. when the user inputs data. the error 
message displays if the validation rule is violated. These validation controls run 
on the client-side. so the page does not have to be submitted to the server to 
view and clear the message. Table 9.2lists the ASP. NET validator controls. 
Note that a blank entry passes the validation for each of the controls except 
the RequiredFieldValidator. lf you want to ensure that the field is not blank and 
Validator Couu·ols 
Control 
Required Field Vat idator 
Compare Validator 
Range Validator 
Regular Expression Validator 
ValidatlonSummary 
Pw·poee 
Requires that the user enter something into the Geld. 
Compares the value in the field to the value in another control 
or to a C0118lant value. You al50 can set tbe Type property to a 
numeric type and the Compare Valida tor ~·ill verify that the 
input value can be co.nverted to the correct type. 
Makes sure that the input value falls in the specified range. 
Validates against a regular expreESion, such as a required 
munber of digits. or a formatted value, such as a telephone 
number or social security nwnber. 
Use the Regular Expression Editor to select or edit 
expressions; open by selecting the Property button on the 
ValidationExpression property. 
Displays a summary of aU of the messages from the other 
validation controls. 
Tn bl e 
9 . 2 
Prope11ies to Set 
ControiToValidate 
Error Message 
ControlTo Validate 
ControlToCompare or 
ValueToCorupare 
Type (To force type checking) 
ErrorMessage 
ControlTo Validate 
Minimum Value 
"Maximum Value 
Type (To force type checking) 
Error Message 
ControlTo Validate 
ValidationExpression 
ErrorMessage 
DisplayMode 
(Can be set to a list. buUeted 
list, or a single paragraph.) 

C 
II 
A 
1• 
'I' 
" 
ll 
9 
that it passes a range check, for example. attach both a Range Validator and a 
RequiredFieldValidator control to a field. 
For the ErrorMessage property of the validator controls. you can either en-
ter a complete message or set the propetty to an asterisk. When the user leaves 
the tleld blank or enters invalid data. the asterisk will appear. 
Ft•t•dhack 9.4 
Dt:scribe huw tu valiJate a text bux callt:J NuUtuerTextBux usiug valiJaturcuu-
trols. A numeric entry is required. in the range 0 to 1000. Tite field must not be 
blank. 
Maintaining State 
As you learned earlier. a Web page holds static data. Each time a page is dis-
played. or redisplayed. it is a new "fresh" copy of the page. In fact. each time 
the page is posted back to the server, a new fresh copy of the program is loaded. 
The server responds to the postback. handles any events that have occurred. 
sends the page back to the client (the browser). and releases the memory used 
by the program. Unless steps are taken to maintain the values of variables and 
the controls on the page. called the state of the page. all values will be lost in 
every postback. 
Re taining Llw ConLe nLs of Cont1·o ls 
Although regular HTML does not retain the contents of controls during a post-
back, ASP. NET can retain and redisplay control contents. Web controls have an 
Enable ViewState property, which indicates that you want the server to send the 
control's contents back with the page. EnableViewState is set to True by de-
fault. so control contents reappear for each postback. 
Re taining the Values of Va1·ia bles 
Local variables in a Web application work just like local variables in a Win-
dows application: The variables are re-created each time the procedure begins. 
But module-level variables in Web applications do not work like the ones you 
are used to in Windows. Because the program is reloaded for each postback, 
the values of module-level variables are lost unless you take steps to save them. 
You can store the value of a module-level variable in a. control on the Web page; 
the control's Enable ViewState prope11y takes care of holding the value during 
post back. 
Note: More advanced techniques for maintaining state. such as cookies and 
session variables. are beyond the scope of this text. These techniques are cov-
ered in the authors' Advanced VB text. 
You can either set up a label with its Visible property set to False or use the 
HiddenField control in the toolbox. Then assign the module-level variable to 
the invisible control. For an invisible label. use the Text property: for the hidden 
field, you must use the Value propet1y, which is a string. In dte following ex-
ample. DiscountTotalHiddenField is a control on the page and DiscountTo-
talDecimal is a module-level variable. 
383 

384 
v 
S 
l l 
,\ 
I. 
' Declare a module -level variable 
Private DiscountTotalDecimal As Decimal 
Private Sub SubmitButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles SubmitButton.Click 
' Perform calculations. 
Dim DiscountDecimal As Decimal 
C 
Web Applications 
' omitted code to convert input to numeric and calculate a discount . 
' Add to the discount total. 
DiscountTotalDecimal += DiscountDecimal 
' Save the discount total in a hidden field. 
DiscountTotalHi ddenField .Val ue = DiscountTotal Decimal .ToString() 
End Sub 
Owckiug for l~ostback 
When an ASP.NET Web application loads. the Page_Load event occurs. But 
unlike Windows applications. t11e page is reloaded for each "round-trip" to the 
server (each postback). Therefore, the Page_Load event occurs many times in 
a Web application. The page's TsPostBack property is set to False for the initial 
page load and to True for all page loads following the first. If you want io per-
fonn an initialization task once, you can test for IsPostBack = False (or Not 
IsPostBack) in the Page_ Load event procedure. And if you want to make sw·e 
that you perform an action only on postback (not the initial page load). you can 
check for IsPostBack = True. 
Private Sub Page_Load(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MyBase. Load 
' It a value exists for the Discount total ... 
If Is PostBack And DiscountTotalHiddenField .Value <> "" Then 
DiscountTotalDecimal = Decimal. Parse(DiscountTotalHiddenField .Value) 
End If 
Notice that the module-level variable DiscountTotalDecimal is assigned a 
value only on postback and DiscountTotalHiddenField already has been as-
signed a value. 
Why is it necessary to check for a postback when writing Web applications? 
AJAX 
_ 
One of the newest improvements for Web applications is Asyu clu·ouous 
JavaScript and XML (AJAX) for creating interactive applications. AJAX al-
lows you to reload only a portion of the Web page. rather than the entire page. 
on each postback. 
Often large portions of a Web page are unchanged for a postback. Using 
standard protocols. the entire page is redrawn every time. Using AJAX. the 

C
ll
t\1•'1'1\
R 
9 
loading speed can increase dramatically by d01mloading and rendering only 
the portion that does change. 
AJAX is an open and cross-platform teclmology that works on many oper-
ating systems. Many AJAX objects are available in the toollibrnry. and any de-
veloper can contribute more objects due to the open nature of the standards. 
You can find more information at www.asp.net/community/. 
AJAX is included in Visual Studio 2010, so you can use it on yom Web 
pages. Any page that uses AJAX features must include a ScriptManager com-
ponent. which is available in the toolbox under AJAX Extensions. Mter you 
place the Script Manager component on the page. you can add other controls, 
such as the UpdatePanel. which is a container for other controls. 
Placing controls inside of an UpdatePanel detennines what portion of the 
page updates on a postback. One fun way to test this is to place a label con-
taining the time inside the update panel and another outside the panel. When 
a Submit button posts hack to the server. only the time inside the update panel 
changes. Hint: See "Retrieving the System Date and Time" in Appendix B for 
the methods to display the time. 
In the following small program (Figure 9.21), the user enters a name in a 
text box and clicks the Submit button. The page then welcomes the user by 
Figu•• e 9.21 
A Web page that uses AJAX rnust have a ScriptManager component. The UpdatePanel holds the controls that should be 
posted back to the server. The area outside the UpdatePanel remains unchanged. 
ao Ch09AJAX- Microsoft Vasuol Studio 
~ 
Pointer 
e.g 
Script Manager 
~ ScriptManagerPro ... 
0 
Timer 
~ UpddcPt.nel 
,£] 
Upd.::teP;ogrc:ss 
• Generat 
There are no usable 
controh in thi) group. 
Drag an item onto ttbs 
£e-rt to add it to the. 
toolbox. 
11- ProfileSetvic£ 
~ RoleService 
ScriptMode Auto 
ScriptP01th 
Scripts 
(Colledion] 
385 

386 
\ 
S 
l 
\ 
I , 
IC 
\ 
S 
( ' 
Web Applicati<ms 
name. The large image is outside the Update Panel so it does not redraw when 
the page posts back the response. 
Protected Sub SubmitButton_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles SubmitButton.Click 
' Concatenate Welcome to the name . 
Welcomelabel.Text = ' Welcome • & NameTextBox.Text 
End Sub 
Some Web Acronyms 
You have seen many acronyms in this chapter. such as HTM L. ASP. liS, and 
URL. But we have only scratched the stuface. As you read the Help files for 
VB and begin developing Web applications. you will want to kno~- the meaning 
of many more. These include the foUo~·ing: 
XML 
SOAP 
HTIP 
Web Service 
WSDL 
Extensible Markup Language. This popular tag-based no-
tation is used to define data and their format and transmit 
the data over the Web. XML is entirely text-based. does 
not folJow any one manufacturer's specifications. and can 
pass through f.irewalJs. 
See the pages ''XML" and "XML Tools in Visual Studio" 
in Help for further infonnation. 
Simple Object Access Protocol. An XML-based protocol 
for exchanging component information among distributed 
systems of many different types. Since it is based on 
XM L. its messages can pass through network ftrewalls. 
See http:/fwww.w3.org/TR!soapl2-prut 11 
Hypertext Transfer Protocol. The protocol used to send 
and receive Web pages over the lntemet using standard-
ized request and response messages. 
Code in classes used to provide middle-tier services over 
the Internet. 
Web Services Description Language. An XML document 
using specific syntax that defines ho~· a Web service be-
haves and how clients interact with the service. 
Your Hands-On Programming Example 
R ' n R has decided to start selling books online. Create a Web site to calculate 
the amount due. including discounts. AU ow the user to display the total of the 
discounts. 
The user enters the quantity. title, and price of a book. and the program 
calculates the extended price, a 15 percent discount, and the discounted price. 
The input must be validated. The quantity and price nre required fields. 
and the quantity must be an integer between l and 100. 
Additionally. the program will maintain a total of all discounts given and 
display that total on the page in response to a button click. 
Include a second page for contact information. 

C IIAI'Tt:
H 
Now: This project is a Web version of the Book Sales program for R ·n R 
from Chapter 3. 
I'Lanuin~ the Pt·oject 
Sketch the Web forms (Figure 9.22). which your users sign off as meeting their 
needs. 
t' lgare 9.22 
Sketch thefonn$for tM hands-on programming example: a. the main (default) page and b. the conl.act.s page. 
R 'n R Book Sales 
Quantity IL==~--------------+- QuantltyText8ox 
Title~ ~~~~~~~~~~~~~~~~~~~ntleTextBox 
Price l 
Prlce T IJxtBox 
ExtllndedF'rlceTextBox 
Extended Price I 
I 
I 
ErrorMe.r.;a9eLabel 
387 
Discounted Price 1 
DIGCOuntedPr1C<"JTextBox 
157. Discount~ ~~~~~~;;;l~~~~~~~~~~ 
OlscountText8ox 
I 
OlscountTotallabel 
a. 
r 
I 
Is"\ I a\ ~~~=~=~ 
~~·~-
\ 
\ 
\ 
Submlt8utton 
ClearButton 
Hyperllnk1 
I 
DIGCountTotaiHiddenFleld 
Contact us at 
Email: Wel7master@mrl:>ooke;.com 
Phone: 1-(800) 555-1111 
Graphic 
Return to R 'n R main EB!:Jil 
b. 
~ 
\ 
Hyperllnk1 
lmage1 

388 
\ 
Plan the Objects and Properties 
Default Pnge 
Object 
HTML Tahle (9 rows by 3 columns) 
Text entered directly iu celL. (not in controls) 
QuantityTextBox 
TitleTextBox 
Price Text Box 
E:<lendedPriceTertBo:x 
DiscountTextBo:x 
DiscountedPriceTe>1Box 
DiscountTotall.abel 
DiscountThLnl H iddenField 
Submit Button 
Cle<~rButton 
Summoryllullon 
QuanLityRequiredFieldValidatOl' 
QuantityRange Valid at or 
s 
l 
\ 
L 
Properly 
ID 
Text 
1D 
Text 
ID 
Text 
lD 
Text 
ReadOnly 
Back Color 
m 
Text 
Re<tdOnly 
Back Color 
ID 
Text 
ReadOnly 
Back Color 
ID 
Text 
ID 
ID 
Text 
ID 
Text 
ID 
Text 
Cau..,. Validatioo 
ID 
ControiToValidate 
.ErrorMessage 
ID 
ControiToValidate 
Type 
Maximum Value 
Mininmm Value 
ErrorM .. sage 
B 
.\ 
S 
£ 
IVeb Applu:alions 
Set.tillfl' 
R 'n R Book Sales 
(Font: Bold. Aritd. Medium) 
Quantity 
Till~ 
Price 
ExtenJed Price 
15% Discount 
Discounted Price 
Quantity Text Box 
(blank) 
Title TextBox 
(blank) 
PriceTextBox 
(blank) 
E.<tendedPriceTextBox 
(blank) 
True 
TransJ>arent (Hint: Select from Web colors) 
I>iscountTextBox 
(blank) 
True 
Transparent 
I>iocountedPriccTextBox 
(blank) 
True 
Transparenl 
I>iscountTotalLabel 
(blank) 
I>iocountTotullliddenField 
SubmitButton 
Suhmit 
ClcarButton 
Clear 
SummoryButton 
OiP.oCOunt Summary 
raloe 
QuantityHequiredrield Valida tor 
QuantityTextBox 
• 
Quant ityfumge Validator 
QuantityTextBox 
Integer 
100 
1 
1-100 Only. 

C
II
1\I•Tt:H 
Object 
PriceReqwredFieldValidator 
PriceRangeValidator 
ErrorMess!!f>eLabel 
HyperLinkl 
9 
Property 
10 
ControlTo Validate 
ErrorMessage 
ID 
Controrro Validate 
Type 
ErrorMessage 
ID 
Text 
ForeColor 
Text 
Navigate Uri 
Set lin~ 
PriceRequiredFieldValidator 
Price'l'extBox 
Required Field 
Price Range Validator 
PriceTextBox 
Currency 
Must be nwnerie 
ErrorMessageL.abel 
(blank) 
Red 
Contact Us 
Contact.aspx 
Hint: Create a style to apply to the text boxes that should have numeric 
amounts right-aligned. fn the Block category, set text-align: right. You can ap-
ply the style to right-aligned labels as well as text boxes. 
ConHU.'I Page 
O bject 
Text e ntered directly in cells 
(not in controls) 
HyperLink t 
Image! 
Plan the Procedures 
Default Page 
Proc~dur-e 
Page_Load 
Submit Button_ Click 
ClearBullon_Click 
Summary Button_ Click 
Property 
Text 
Na,~gateUrl 
lmageUrl 
Ac tio n!' 
s~u ing 
Contact us at 
Email: WebrnliSter@rnrbooko.corn 
Noll!: This will convert to an e-mail link Butomatically. 
Phone: l-(800) S55-llll 
Return toR "n R main page 
HomePage.aspx 
Pnyphone.wmf (Stored in project folder) 
(lmoge found in StudentData\Graphics) 
If Post Back and hidden field has a value 
Load discount total from hidden field. 
Clea.r ""Y text in ErrorM""""f>"l.abel. 
Convert input text values to numeric. 
Calculate the extended price = price • quontity. 
Calculate the di..,owlt = extended price • di!!Counl rate. 
Calculate the discounted price = extended price - discowtl. 
Add the discount to the discount total. 
Assign the discount total to the bidden field. 
Format and display the results. 
Handle any conversion exceptions. 
Clear oll text boxes and lubeht. 
Display the discount total in a label. 
389 

390 
,. 
S 
l 
.\ 
L 
t ' 
IVeb Applications 
Contact Page 
The contact page has no event procedures. 
\\rite the Project F'oUow the sketch in Figure 9.22 to create the Web pages. 
Figure 9.23 shows the completed p~es. and Figure 9.24 shows the pages in 
Design view. 
• 
Set the properties of each of the objects according to your plan. 
Write the code. Working from the pseudocode. write each procedure. 
• 
When you complete the code. use a variety of data to thoroughly test the 
project. Make sure to test with empty fields. data out of range. and nonnu-
meric data in the numeric fields. 
The finished Web application: a. the main (default) page and b. the contac~ page. 
R 'o R Book Sales 
Quantity 
Title 
Price 
Extended Price 
15% DiiiCOUOt 
Discounted Price 
t' l j! urt-
9 . 23 
...__ ____ _,! ..__[ __ 
C_Ie_ar _ __,ll Discount Summary I 
ConbCt Us 
a. 
Coo tact us at 
Email: 'i\ ebmasterarnrbooks.com 
Pbooe: 1-(800) 555-1111 
Re!Um to R 'n.R Home Page 
b. 

C
ll
i\
1°T
t:
K 
f'igar~ 9.24 
Lay out the control-! in Design view: a. tAe main (default) page and b. the contacts page. 
R '• R Book Sales 
1-100 Only 
... !-Aust be numaic 
Submi 
Dl;count summ;l 
O ear 
] 
Contact Us 
a. 
• I 
I 
Q o ... gn I "' Split \ iii: Sou ret 
~~a!!lll~~~o;;;~.~c~~·p;x~xllllllllllllllllllllllllllllllllllllllllllllllllllll~~ 
lli'.J ·· -··· 
Coatadus :u 
Email: Webmuter@rorbooks.coltl 
Pbooe: 1-(800) 55~111.1 
Return toR 'n RHome Page 
·-····--~ -· -······--.. ·-- ···--····-·-··- ···-- ····-- ·'-····- o··-·····- ···- ···· -·· 
b. 
~ 
o~gn I t:l Split llij ~ouru 
----o -····· ····- ······--·····--····--····-
--·1 
i i 
391 

392 
,. 
S 
l 
\ 
L 
It 
\ 
s 
t: 
Web Applications 
'Program: 
'Programmer: 
'Date: 
Chapter 9 HandsOn 
Bradley/Millspaugh 
June 2010 
'Page: 
'Description: 
Default 
A Web site to calculate the extended price for books sold, 
'Folder: 
a discount, and the discounted amount. Calculates and displays 
the total discounts. 
Uses validator controls for input validation . 
Ch09HandsOn 
Partial Class Default_aspx 
Inherits System.Web.UI.Page 
Private DiscountTotalDecimal As Decimal 
Const DISCOUNT_RATE_Decimal As Decimal 
0.150 
Sub SubmitButton_Click(ByVal sender As Object, 
ByVal e As system.EventArgs) Handles SubmitButton.Click 
' Calculate values for sale. 
Dim auantityinteger As Integer 
Dim Priceoecimal, ExtendedPriceDecimal As Decimal 
Dim DiscountDecimal, DiscountedPriceDecimal As Decimal 
ErrorMessageLabel.Text ~ String.Empty 
Try 
' Convert input values to numeric variables. 
auantityinteger = Integer.Parse(QuantityTextBox .Text) 
PriceOecimal = Oecimal.Parse(PriceTextBox.Text) 
' Calculate values for sale. 
ExtendedPriceoecimal = auantitylnteger * Priceoecimal 
DiscountDecimal = ExtendedPriceOecimal * DISCOUNT_RATE_Decimal 
DiscountedPriceOecimal = ExtendedPriceOecimal - DiscountDecimal 
' Add to the discount total. 
DiscountTotalDecimal += DiscountDecimal 
' save the discount total in a label. 
DiscountHiddenField.Value = OiscountTotalDecimal.ToString() 
' Format and display answers. 
ExtendedPriceTextBox.Text = ExtendedPriceDecimal .ToString( ' C' ) 
DiscountTextBox.Text ~ DiscountDecimal.ToString( ' N' ) 
DiscountPriceTextBox. Text = DiscountedPriceDecimal. ToString( •c•) 
Catch ex As Exception 
ErrorMessageLabel.Text ~ •unable to calculate . Check for numeric values . • 
End Try 
End Sub 
Private Sub ClearButton_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles ClearButton.Click 
' Clear previous amounts from the page. 

C
ll
i\
11
T
E
R 
!) 
auantityTextBox.Text = ' " 
TitleTextBox.Text = •• 
PriceTextBox.Text = •• 
EXtendedPriceTextBox .Text 
DiscountTextBox.Text = ' " 
DiscountPriceTextBox .Text 
DiscountTotallabel.Text = 
ErrorMessageLabel.Text 
End Sub 
Sub Page_Load(ByVal sender As Object , 
ByVal e As System.EventArgs) Handles Me.Load 
' ChecK for existing value for the discount total. 
With OiscountHiddenField 
If IsPostBacK And .Value <> "'Than 
DiscountTotalOecimal = Oeoimal.Parse(.Value) 
End If 
End With 
End Sub 
Private Sub summaryButton_ClicK(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles summaryButton.Click 
1 Display the total discount. 
393 
I DiScountTotallabel.Text = "Total Discounts: $ " & DiscountTotalHiddenField.Value 
DiscountTotalLabol . Toxt = ' Total Discounts: • & DiscountTotalOeoimal. ToString( "C") 
End Sub 
End Class 
l . A Web application runs in a browser whereas most Windows applications 
run stand-alone. 
2. A Web site has a client. which is the system running the Web page in a 
browser. and a server. 11·hich is the location of the Web page files. 
3. Different browsers may display Web pages differently. Web developers 
must test their applications on multiple browsers unless they know that all 
users will use the same browser. such as in a company intranet. 
4. Web pages are static and stateless. They require processing t:o change the 
appearance of t11e page and cannot store variables on their 011'11. 
5. ASP.NET is the Web technology included in Visual Studio. Web Fonns in 
VisuaJ Basic use ASP. NET. 
6. A Web Form consists of two files: the .aspx file that holds the code to ren-
der the user interface and the .aspx.vb file that holds the VB code. 
7. The controls for Web pages are different from those used on Windows 
Forms. 
8. In Design view. the HTML tab displays the HTM L that is automatically 
generated. 

394 
S 
l r 
\ 
L 
11 
\ 
s 
C 
Web Applicalions 
9 . You can display a page preview as it will appear in a browser. 
10. Controls on Web pages may be HTML (client-side) controls or Web server 
controls. which are the controls provided by ASP. NET Web server controls 
are rendered specifically for the browser being used. 
11. Although the events of Web controls are somewhat different from those for 
Windows controls. coding for the events is the same. 
12. A different set of files is generated for Web projects than for Windows 
projects. 
13. L1 a Web page. controls are placed one after another. from top to bottom. 
similar to a word processing document. 
14. You can use an HTML table to lay out controls and text in roll'S and 
columns. 
15. The positioning of a page or a control may be set to absolute. which allows 
you to set the location by dragging the control to the desired position. 
16. Add graphics to a page using an Image control. The control's lmageUrl 
property holds the location of the file. 
17. Cascading style sheets can be used to set font properties. position. border, 
and the background for Web pages and controls. The location of the style 
definition detem1ines the type of style---inline. page. or .css file. 
18. Validator controls allow testing for a required field. proper type of data. or 
a range of values. 
19. The EnableViewState property of a Web control detennines whether the 
control maintains its value during post back. To maintain the value of a pro-
gram module-level variable. assign the variable's value to a hidden or in-
visible control. 
20. A HyperLink control is used for navigation. Set the NavigateUrl property 
to the page to which to navigate. which can be in the cun·ent project or an-
other Web site. 
21. You can add multiple pages to a Web application and set up navigation be-
tween the pages. 
22. AJAX (Asynchronous JavaScript and XML) improves the speed of Web 
applications. By using the Update Panel. only a portion of a Web page is 
submitted and reloaded on a postback. 
23. XML is used to store and transfer data on the fntemel. XML is tag-based 
and text-only and can be trans milled through network frrewalls. SOAP and 
WSOL are based on XM L. 
absolute position 373 
AJAX 384 
browser 362 
casCllding style sheet (CSS) 
375 
code separation model 365 
inlTanet 363 
single-file moclel 365 
stateless 363 
table 
371 
validator control 382 
Web Fom1 
362 
Web page 
363 

C
ll
i\
11
1'
t:
H 
9 
1. Explain the differences between the execution of a Windows application 
and a Web application. 
2. Differentiate between the client and the senrer for a Web application. 
3. \'\' hat is meant by the statement that Web pages are stateless? 
4. What are the diiJerences between HTML controls and standard controls? 
5. How does event handling differ from that for Windows applications? 
6. Describe at least two methods for controlling the layout of controls on a 
Web page. 
7. What fw1ctions are done by validator controls? How can you set up a val-
idator control? 
8. Describe the purpose and functionality of AJAX. What is meant by open 
standards? 
9. What is the purpose of XML? of SOAP? 
9.1 
Rewrite your project from Chapter 3 to be a '\'\'eb project: include valida-
tion. 
9.2 Rough Riders Rodeo wants to sell tickets online. Allow the user to enter 
the nwnber of tickets needed. The data en tty screen should also include 
the shipping address for the tickets. a credit card number. expiration 
date, and a drop-down box allowing the user to select the type of credit 
card. Also include a check box for attending the Awards Event. Include a 
hyperlink for confirming the order. Make the link invisible to begin with. 
but display it after the Submit button has been clicked. 
The confirmation page should say "Thank you for your order". 
'The tickets are Sl5 for just the rodeo. $25 if they want to allend the 
awards event. Note that all members of the party must select the same 
type of tickets. 
When the user selects the Submit button. display the amount due and 
display a link to confmn the order (make the existing link visible). Use an 
UpdatePanel to improve performance. 
9.3 Create a Web page for entering new customer information. The fields in-
clude name. e-mail. usemame. and password. Include a second text box 
to confirm the password. Set the TextMode property of the two password 
fields to ''Password''. Use a table to lay out your controls. 
Validate that all fields contain information. Display appropriate mes-
sages for any empty fields. include a Submit button. 
When all information is entered and the Submit button is pressed. 
compare the lim password fields to see if they are equal. Jf not, clear both 
text boxes and display a message to reenter the password information. 
When the passwords match. display a message that says "Welcome" and 
the name of the customer. 
395 

396 
\ 
S 
l 
\ 
L 
ll 
.\ 
s 
c 
w~b ApplicatiOIL\" 
VB Mall Order 
Write the VB Mail Order project &om Chapter 4 as a 
Web project. Use validator controls for the validation. 
Place an image or logo on the page located outside an 
Write the VB Auto Center project from Chapter 4 as a 
Web project. Use validator controls for the validation. 
AJAX UJXlate Panel. include a second page with con-
tact information for the company. 
include a second page with contact information for the 
company. 
Suggestion: Use a Radio Button List control. 
\'ldeo Bouaaza 
Write tJ1e Video Bonanza project (rom Chapter 3 or 
Chapter 4 as a Web project. Use validator controls for 
the validation. Include a second page with contact 
infonnation for the company. 
Suggestion: Use a Radio Button List control. 
Very Very Boards 
Write tJ1e Very Very Boards project from Chapter 4 as 
a Web project. Use validator controls for the valida-
tion. including a range validator for the quantity. 
include a second page wiili contact information for the 
company. 
Suggestion: Use a Radio Button List control. 

D 
A 
p 
T 
E 
R 
Database 
Applications 
J. Use database terminology conectly. 
2. Create Windows and Web projects that display database data. 
3. Display data in a DataGridView control. 
4. Bind data to text boxes and labels. 
5. Allow the user to select from a combo box or list box and display the 
corresponding record in data-bound controls. 
6. Query an object using U NQ. 

398 
l ' 
C 
Databa .. e Applicatiom 
Databases 
Most data handling today is done with relational databases. Many manufacturers 
produce database management systems (DBMSs). each with its own proprietary 
format. One challenge for software developers ha~ been accessing data from mul-
tiple sources that are stored in different fmmats. Most of the new tools available 
to developers. including Microsoft's Visual Studio, attempt to handle data from 
multiple locations (servers) and data stored in different fom1ats. 
Visual Basic and Databases 
You can use Visual Basic to JtTite projects that display and update the data 
from databases. Visual Basic uses ADO.NET, which is the next generation of 
database technology. following Microsoft's previous version called ActiveX Data 
Objects (ADO). One big advantage of ADO.NET is that information is stored 
and transferred in Extensible Markup Language (XML). You will find more 
information about XML in the section "XML Data" later in this chapter. 
ADO.NET allows you to access database data in many formats. The basic 
types of providers are OleDb. SQLClient for SQL Server (Microsoft's propri-
etary DBMS). Odbc. and Oracle. Using OleDb you can obtain data from sources 
such as Access, Oracle, Sybase. or DB2. The examples in this text use Micro-
soft's SQL Server Express (SSE). which installs automatically with Visual 
Studio. 
Database Tc•·minology 
To use databases. you must understand the standard tem1inology of relational 
databases. Although there are vmious definitions of standm·d database terms. we 
will stick with the most common tenns. those used in SQL Server and Access. 
A database file (with an .mdf or .mdb extension) can hold multiple tables. 
Each table can be viewed like a spreadsheet .• with rows and columns. Each 
t·ow in a table represents the data for one item. person, or transaction and is 
called a record. Each coltmm in a table is used to store a different element of 
data, such as an account number, a name. an address, or a numeric amount. 
The elements represented in columns are called fields. You can think of the 
table in Figure 10.1 as consisting of rows and columns or of records and fields. 
Most tables use a priuuu·y key field (or combination of fields) to identify 
each record. The p1imary key field is often a number such as employee number, 
account number. identification mm1ber. or social security number; or it may be a 
text field. such as last name, or a comhinatio11. such a.~ last name and first name. 
A relational database generally contains multiple tables and relationships 
between the tables. For example. an Employee table may have an Employee lD 
field. m1d the Payroll table also will have an Employee ID field. The two tables 
are related by Employee ID. You cm1 find tl1e employee information for one 
payroll record by retrieving the record for the corresponding Employee ID in 
the Employee table. One reason to create relationships between tables is to 
keep the data compact and easy to maintain. By having multiple payroll 
records related to one employee record through the Employee ID. an em-
ployee's address, for example. can be changed in one spot without having to go 
to each payroll record to update it. 

C 
II 
A 
1• 
'I' 
" 
ll 
10 
lSGN 
Title 
AutJtor· 
Publisher 
0-111-11111-1 
89 Years in a Sand Trap 
Beck. Fred 
Hill and Wang 
0-15-500139-6 
Bu$iness Programming inC 
Millspaugh, A. C. 
The Dryden Press 
0-394-75843-9 
Cultural Literacy 
Hirsch. E. D. Jr. 
Vintage 
0-440-22284-2 
Five Days in Paris 
Steel. Danielle 
Dell Publishing 
0-446-51251-6 
Mega trends 
N aisbitt. John 
W amer Books .,....._ 
0-446-51652-X 
Bridges of Madison County 
Waller. Robert 
W amer Books 
James 
0-446-60274-4 
The Rules 
Fein/Schneider 
Warner Books 
0-451-16095-9 
The Stand 
King. Stephen 
Signet 
0-452-26011-6 
Song of Solomon 
Monison, Toni 
Plume/Penguin 
0-517-59905-8 
Ho"' to Talk to Anyone. 
King. Larry 
Crown 
All)1imc. Anywhere 
0-534-26076-4 
A Quick Guide to the 
Bradley. Julia 
Integrated Media 
Inte rnet 
Case 
..........___ 
Group 
............... F1eld or column 
Any time a database table is open. one record is considered the current 
record. As you move from one record to the next. the current record changes. 
Xl\1L Data 
XML is an industry-standard format for storing and tmnsferring data. You can 
find the specifications for XML at http://www.w3.org/XML. which is the site for 
the World Wide Web Consortium (W3C). 
You don't need to know any XML to write database applications in VB. The 
necessary XML is generated for you automatically. like the automatically gen-
erated VB code and 1-ITML. However. a few facts about XM L can help you un-
derstand what is happening in your progmms. 
Most proprietruy database fonnats store data in binary. which cannot be ac-
cessed by other systems or pass through Intemet firewalls. Data stored in XML 
is all text. identified by tags. similar to HTML tags. An XML ftle can be edited 
by any text editor program, such as Notepad. 
[f you have seen or written any HTML. you know that opening and closing 
tags define elements and attributes. For example, any text between <b> and 
</b> is rendered in bold by the browser. 
<b>This text is bold .</b> <i>This is italic.</i> 
The tags in XML are not predefined as they are in HTM.L. The tags can 
identify fields by name. For example. following are three records of the 
1--
Fif.(ur e 
10 . 1 
A database table consists of 
wws (records) and columm 
(fields). 
Record or row 
399 

400 
l ' 
C 
Databa .. e Applicatiom 
RnrBooks database exported to XML. (Later in this chapter you will be using 
the RnrBooks database for VB projects.) 
<?xml version="1.0" encoding="UTF-S"?><dataroot xmlns:od=" urn:schemas-microsoft-com: officedata"> 
<Books> 
<ISBN>0-15-500139-6</ISBN> 
<Title>Business Programming in C</Title> 
<Author>ldillspaugh, A. C. </Author> 
<Publisher>The Dryden Press</Publisher> 
</Books> 
<Books> 
<ISBN>0-446-51652-X</ISBN> 
<Title>Bridges of Madison County</Title> 
<Author>Waller, Robert James</Author> 
<Publisher>Warner Books<{Publisher> 
</Books> 
<Books> 
<ISBN>0-451-16095-9</ISBN> 
<Title>The Stand</Title> 
<Author>King, Stephen</Author> 
<Publisher>Signet</Publisher> 
</Books> 
</dataroot> 
In addition to an XML data file. you usually also have an XML schema file. 
The schema describes the fields, data types. and any constraints, such as re-
quired fields. AOO.NET validates the data against the schema and checks for 
constraint violations. The schema also is defined with XML tags and can be 
viewed or ecUted in a text editor. You will be able to see the schema for your data-
bases in a VB project by viewing the .xsd file shown in the Solution Explorer. 
The format of XML data offers several advantages for programming. Be-
cause an XML schema provides for strong data typing. the various data types 
can be handled properly. And ADO.NET can treat the XML data as objects. 
allowing the IntelliSense feature of the Visual Studio environment to provide 
information for the programmer. In addition, data handling in XML and 
ADO.NET e.llecutes faster than in earlier fonns of ADO. 
Fet'dback I 0.1 
l. Assume you have a database containing the names and phone numbers 
of your friends. Describe how the terms file, table, raw. column. record. 
fold. and primary key fold apply to your database. 
2. What is an advantage of transferring data as XMl rather than as a pro-
prietary fotmat such as Access or SQL Server'? 
Using ADO.NET and Visual Basic 
In Visual Basic, you can display data from a database on a Windows Form or a 
Web Fonn. You add controls to the fotm and bind data to the controls. The controls 
may be labels or text boxes or one of the special controls designed just for data. 
such as the DataGridView or DataLi.st. However. just as you found in Chapter 9, 

C 
II 
A 
1• 
'I' 
" 
ll 
10 
the control~ for a Windows application are different from the control~ for a Web ap-
plication and have different properties and events. In this chapter. you will write 
database applications using both Windows Fmms and Web Forms. Figure 10.2 
shows a data table displaying in a DataGridView on a Windows Fonn. 
Fi g u re 1 0. 2 
The DataG1idView control is bound M a table in a dataset. The data fields display automatically in the ceU.s of the grid. 
401 
•51 R 'n R Books 
l=
I §J
I~J 
W e 
Author Name 
Publisher 
• 
. . . . 
Beck. Fred 
Hill and Wang 
Business Programming in C 
Millspaugh. A. C. 
The Dryden Press 
Cu~ural Uteracy 
Hirsch, E. D. Jr. 
Vintage 
Five Days in Paris 
S1eele. Daniello 
Dell Publishing 
Mega1rends 
Naisbitt. John 
Wamer Books 
Bridge& of Madicon County 
W aller. Robert Jamec 
Wamer Bookc 
The Rules 
Fein/ Schneider 
Wamer Books 
The S1and 
King, S1ephen 
Signet 
Song of Solomon 
Morrison, Toni 
Plume/ Penguin 
How to Talk to Anyone. Anytime. Anyotihere 
King, lany 
Crown 
A Quick Guide to the lr1temet 
Bradley, Julia Case 
Integrated Media Group 
< 
Ill 
You must use several classes and objects to set up data access in Visual 
Basic. 
Data Access in Visual Studio 
The Visual Studio Data Sources window provides an easy way to create data-
bound controls on a form. As you will see later in this chapter. you can drag 
tables and fields from the window onto a form to automatically create controls 
that are bound to the data. You can display the data in grids or individual 
fields. which are referred to as details. You also can drag a field from the Data 
Sources window and drop it on an existing control. which causes data binding 
to be set up automatically. 
When you add data-bound controls to a fonn, two things occur: An .xsd file 
is added to the Server Explorer window. and BindingSource. TableAdapter, and 
DataSet objects are added to the form's component tray. 
The following list is an overview of database objects: each of the classes is 
further described in the sections that follow. 
• 
Binding source. A binding source establishes a link to the actual data. 
which is a specific file and/or database. 
• 
Table adapter. A table adapter handles retrieving and updating the data. A 
table adapter automatically generates SQL statements that you can use to 
access or update data. SQL. or Structured Query Language. is an industry-
standard language that is used to select and update data in a relational 
database. 
~ 
-
-
I 
' 

402 
v 
S 
l l 
A 
I, 
G 
.\ 
S 
C 
Database Applications 
• 
Dataset. A dataset contains the actual data. The data in a single dataset 
may come from multiple binding sources and/or multiple table adapters. 
Figure 10.3 shows a visual representation of the required steps. 
To display dawbase daw in bound controLs on a form. you need a binding source. a wble a.dapter, and a daroset. 
Binding 
Table Adapter 
Dataset 
Source 
I 
I 
I 
Specific file 
Bindi,,g,Sou_rce 
Handle!l data tranliifer 
Actual dab. Can 
or database 
object 
and provides data 
contain multiple 
for dataset. Uses SQL 
tables and 
lo specify data to 
relationships. 
retrieve or update. 
Binding Som·ces 
A binding som·ce object establishes a link from a specific file or database to 
your program. In this chapter. you ~~ill use a wizard to automatically create 
BindingSource objects. You also can add new BindingSource objects using the 
Data Sources window or the ~ta menu. 
Note: Earlier versions of V B used Connection objects rather than Binding-
Sources. 
Table Adapte1·s 
A table adaptet· does all of the work of passing data back and forth between a 
d ata som·ce (the binding source) and a program (the dataset). The binding 
source for a table adapter does not have to be a database: it also can be a text 
file, an object, or even an array. No matter where the actual data (the source) 
for the binding source are. the table adapter transfers data from the source to 
t11e dataset (fills) or transfers data from the dataset to the source (updates). all 
viaXML. 
Datasets 
A dataset is a temporary set of data stored in the memory of t11e computer. In 
ADO.NET. datasets are disconnected. which means that the copy of data in 
memory does not keep an active connection to the data source. This technique 
is a big improvement over the recordsets in earlier versions of ADO. which 
maintain open connections to the data source. A dataset may contain multiple 
tables; however. the examples in this chapter use only one table per dataset. 
Any controls that you have bound to the dataset will automatically fill with 
data. 
Data d..is.play on 
lhe form in bound 
controls. 

C 
II 
A 
1• 
'I' 
" 
ll 
10 
Explain the purpose of and the differences between binding sources. table 
adapters. and datasets. 
Creating a Database Application 
In the follm~ing step-by-step exercise. you ~till create a Windows application 
that displays data from the Books table of the RnrBooks.mdf database. You will 
display the fields from the table in a DataGridView colllrol on a Windows 
Form. Refer to Figure 10.2 for the finished application. 
A Windows Database Application-Ste p-by-Ste p 
This step-by-step exercise uses the RnRBooks.mdf SQL Server database file. 
which is available in the StudentData folder from the text download site 
(www.mhhe.com/vb2010/). Make sure that the file is available before starting 
this project. 
Start a New (lroject 
STEP 1: Start a new Windows Application project. Save it as "Ch10DataGrid-
View". 
STEP 2: Name the form "BooksForm" and set the Text property to "R 'n R 
Books". Widen the form to about three times the original size. 
STEP 3: Select Save All from the File menu or the toolbar button. 
Add a Cr·id to Display the Data 
STEI' l : Add a DataGridView control to the form. You can find the contJ·ol in 
the toolbox in both the A// Windows Forms tab and the Data tab. Click 
the Smart Tag arrow to pop up the smart tag (Figure 10.4). 
Add a DataGridView control to afornt and pop up il.s smart tag . 
403 
Fif,fure 10.4 
Q:! R'nRBook:!: 
.................................................................... :§::.~~ LoGridVicw T.,b 
Choose oct, Sou ICC: III:UIC· ••••BI 
[eft Columns. .. 
Add Coh.1•·nn,., 
I!' EMble Addmg 
R"" Enable Editing 
[71 Enable DEietmg 
C Enable Colu n~n Reo1dering 
li!::============================::::LOock.nparentcontau·w 
STEP 2: On the smrut tag. drop down the list for Choose Data Source. Select 
Add Project Data Source from the drop-down (Figure 10.5). which acti-
vates the Data Source Configuration Wizard. 

404 
S 
l 
.\ 
I. 
IC 
\ 
.... 
(.' 
/)awba..e Applicarion~ 
Choosl! Data Soorc! 
... 
[c 
19~ 
A 
11 
:tl 
?.] 
:J 
D 
t] A.Jd P(pjt\t Octa S~ 
Click the 'Add Proj<ct 
a Source . .' hnk to 
conntct to dab. 
STEI' 3: Select Database (Figure 10.6) and click Next. 
Note that it isn't necessary to copy the database .mdf file into the 
project folder: the wizard will ask you later if you want to add the data 
file to the project. ~·hich automatically copies the file to your project 
folder. You can select the file &om anywhere it is available. 'When the 
project runs. it uses the copy in your project folder. If you want to use 
a database file stored somewhere else. for example to share with other 
applications. you will not add the file to your project. 
STEI' l: On the next page of the wizard. select Dataset for the Database Model 
and click Next. 
Add a neiU data sol/rce to a project wing the Data So!trce Configllration Wiza¥d. 
ChooM • 0.1» S..urce Type 
,.4ol• 
F i g u re 10 .5 
Add a new dma •o<crce to a 
project from the smart tag of 
the DataCridView. 
1qg u1•e 10 .6 

C 
II 
i\ 
I' 
T 
t: 
R 
10 
STJW s, Select New Connection to set up the connection for the binding source 
object. TI1e next dialog asks what type of database you want to use. 
Click the Change button. 
!-TEl' (., In the Change Data Source dialog box (Figure 10. 7). select Microsoft 
SOL SeNer Database File. This dialog may not appear if the option was 
chosen previously and the Always use this selection option button was 
selected. Click OK. 
Ch41nge Data Source 
II Dab ~curce: 
Microsoft P.ccess [)au base File 
Micrl)~oft 0[}8C Data Sourc:e 
Mtcnnoft SQl SerY"tr 
Micro•olt SQl S•rvor Con1P•ct 35 
Orad ,e Oatab.ate 
<Oth~J> 
j.NET Framewo<i( Oota Pro,-ider for SQl ' ~I 
E Ahvit)'S we this selection 
Description 
Uu tnit ~election to 1tbth 1 ebb ban 
file to a local Mmo;.oft SQLServer 
in~encc: (induding Microsoft SQL 
Exprt~:.) usrng tlle .NET Fnmtwork Oah 
Pro" de< for SQL ~'· 
\....__ O_K _ _,JI 
Canal 
STEP 7: In the Add Connection dialog box (Figure 10.8). the Data source should 
be set to "Microsoft SQL Server Database File (SqiCiient)." Browse to 
select the RnRBooks.mclf file. You can find it anywhere it is available. 
including on a CD: later the file will be added to your project. Click 
Open and then Test Connection: you should see a message that the test 
connection succeeded. Click OK. 
Add Connection 
Enter inro1maticn to con11ect to the selected data sou ret or click 
"Change• to choose a different Wta source md!or prolAde.r. 
Data sour<~ 
Microsoft SQL Server Database File (SqiCiient) 
Change .. 
Database file name (now or existing): 
C:\Users\ Public\ Documenls\SilJdentData\ Datal 
log on to the server 
0 1 Us.e Windows Authentication 
_ U~e. SQl St:rve:r Autf'lo-.tic:~bon 
Pas 
rc: 
Advanced ... 
I Test Connection ] 
OK 
Cancel 
405 
Fl~ure 10.7 
Select Microsoft SOL Server 
Database File in the Change 
Data Source dial~g box, 
•' i~are 10.3 
Set up the cotlnection to the 
database fik in the Add 
Connection dialcg box. 

406 
\ .' 
S 
U 
A 
I, 
C 
Dat<tbase Applicalions 
STEI' 8: Back on the wizard page, your new connection should now appear se-
lected; click Next . 
A dialog pops up asking if you want to add the file to your project 
(Figure 10.9). Click Yes. which will make your project portable. so 
that you can run it on different computers without wonying about the 
file location. 
Microsoft Visual Studio 
~ 
a 
The connection you selected u~es a local data iile that is not in the 
~ 
current project. Would you like to copy the file to your project and 
modify the connection? 
If you copy the data file to your project, it will be copied to the project's 
output directory each time you run the application. P re~s Fl for 
information on controlling this behavior. 
Yes 
l I 
No 
II 
Help 
STEP \1: Click Next. The database objects in the RnRBooks database will appear. 
STEP 10: Expand the Tables node and place a check mark in front of Books 
(Figure 10.10). Click Finish. 
Click on the triangle for Tables to expand the node and select the Books table. 
0.,. Sou«• C<>nliglntion Wiz.ord 
ll1 
CbooM Your O..t.obAM Objects 
~~~do~~~tmll 
f!ltbl .. 
:::J 8oob 
' r :::J s..o,.cu 
r:ll!slv, ..... 
r:J'Jp Slor•d ~nxodurrs 
!:] Cl, Fun<tlons 
l Wl>le 1CcM cltt.l"-cw..,g 
o.us..-
------
Rllr8ocl.s0ot•Sd 
I <.,_.,., I 
II 
I 
FIMh 
l<' ig u re 1 0 .9 
This dialog gives you the 
option of making a copy of the 
database file in the current 
folder. Select Yes. 
li.i.>~ 
--
I I c-ti I 
-

C 
II 
A 
1• 
'I' 
" 
ll 
10 
.STI£1' 11 : Notice that the grid column headings now have the names of the 
fields. Later you will learn to resize the widths of the columns. 
Run tbc Data Application 
STEP 1: Ruu your program. The grid should fill with data. At this point. the 
user can resize the columns by dragging the dividers between column 
headings. 
STEP 2: Close the forn1 or click the Stop Debugging button (Shift + FS) in the 
IDE to stop program execution. 
Examine the Components 
STEJ> 1: Take a look in the components tray (Figure 10.11). Your forn1 now 
contains a TahleAdapter component. a DataSet component. and a 
BindingSource component. The wizard automatically names the dataset 
with the name of the database source and the others using the name of 
the table. 
Fi g ur e 10.11 
The data components that were generated by the Data Sottrce Configuration Wizard appear in the component tray of 
thefomt. 
8oobfomt.w[~•r" 
• • .-: ·nttloob -
-
-
ISBU 
Tclo -
~ s.Joto<t.Codo 
* 
1 
J 
"' 
lbwtoo~ 
t:; 90Gbainclin9S.....• 
~&ooi<ITobl~ 
STEP 2: Now look at the form's code. The Form_Load procedure automatically 
contains the code to fill the dataset from the table adapter. 
Me .BooksTableAdapter. Fill(Me.RnrBooksDataSet.Books) 
Format tbc OataGr·idVicw 
STEI' 1: Switch hack to the designer and click on the DataGridView and then 
click on the Smart Tag arrow-
the small arrow on the right side of 
the grid or form. In the smart tag that pops up. select Edit Columns 
(Figure 10.12). 
STEP 2: In the Edit Columns dialog box (Figure 10.13). you can add. remove. 
and reorder the columns. You also can select any of the columns on 
the left side of the dialog box and view or modify its properties on the 
right side. For example. you can set the width of a column and change 
its heading text (HeaderText proper1y). 
. 
~'Gi~ 
~ 
- -""-'-I Rctl,ln r!l 
-. 
407 

408 
v 
S 
l l 
,\ 
L 
(' 
Database Applications 
DataGridView Tasks 
Choose Dot:~ Source [IM$!JitMdiiHMc:Jj 
IZ Enoble Adding 
[L Enable Editing 
l:z Enable Deleting 
1:: Enable Column Reordering 
Oock in parent< ontaUler 
AddQue'Y ... 
PrevieW Data ... 
Figua• c 10 . 12 
Pop up the smart tag and 
select Edit Columns to format 
the grid. 
Fi~ua• e 10.1 3 
Format the columns of the grid in the Edit Columns dialog box. Yon can set Header Text. Tool Tip Text. Width. and maw.t 
other properties of a column. 
!!!Em 
;!!!Tille 
~ .... ,._ 
~PIJ-
;;!! SubJ«\.. Code 
~ 
Sht:H_loc.•dor> 
0f~·""' 
Move selected column d01m 
(N.omt) 
, ... .,.lypt 
• l.,...... 
AucoS<a M<>dt 
DM<It1Width 
NotS.t .,_-----H +---- Set to 
0 
None 
f«W....,.. 
100 
Fro:tt\ 
F1l'a 
~tni~~~~~<nWidtll 
S 
Wodlh 
100 ~------:-'-+t----Set the 
F 
column 
I ~~the nomu>td In c<>d<cl<>""'""'rllrullj«t. 
width 
Remove a colunm 
STEP 3: Remove the extra columns so that the grid displays only the title. 
author. and publisher. For the Title column. change the AutoSizeMode 
setting to "None" and set the Width to "250 pixels" . For the Author 
column, set AutoSizeMode to "None". Width to "250 pixels". and 
header text to ''Autl10r Name". Set the Publisher column to AutoSize-
Mode = "None" and Width = "250 pixels". 

C 
II 
A 
1• 
'I' 
" 
ll 
10 
STEP •t: Run the application and make note of any changes that would improve 
the layout. 
STEP 5: Return to design time. make any furtl1er modifications, and run the 
application again. 
The Smm·t Tag 
Earlier you used the smart tag to select a data source and to edit the properties 
of grid colwru1s. You also can use ilie smart tag to dock the grid in its parent 
container (the fonn) and add and edit columns. 
The Database Schema File 
When you add a new data source to a project. a file with the extension .xsd is 
added to tl1e Solution Explorer. This file contains the XML schema definition. 
which has the description and properties of the data. You can double-click on 
the .xsd file to open the Data Designer (Figure 10.14). The schema shows the 
names of ilie table(s) and fields. the primary keys for each table. and ilie relation-
ships among the tables if more than one table is represented. You can click on tl1e 
table name or a field name to display the properties in the Properties window. 
RnrBooksData.Set.xsd x Sooksform \b" 
• 
Notice in Figure 10.14 that at ilie bottom of the schema appears the 
TableAdapter for the table. The TableAdapter handles the Fill and GetData 
methods for the table. You can click on the TableAdapterrow to display its prop-
erties in the Properties window. or click on the Fiii,GetOata() row to view the 
properties of the Fill Query. 
-
Binding Individual Data Fields 
You can bind table fields from your dataset to many types of controls. such as 
labels. text boxes, combo boxes. and check boxes. Controls that are connected 
to fields in the database are referred to as bound couu·ols or data-bound 
conu·ols. The easiest way to create bow1d controls is to use the automatic 
409 
Figare 10 . 14 
The .xsd file holds the schema 
of the database. where you carl 
view and modify the table 
elements, relationships, and 
keys. 
Right·dick on the .xsd file in the So-
lution Explorer, select Open With, 
ond select XML (Text} Editor, to view 
the actual XML in the Visual Studio 
XMLeditor. • 

410 
v 
S 
l l 
:\ 
L 
G 
,\ 
S 
(' 
Database Applications 
binding features of the Data Sources window. You can set the data to display as 
details and then drag the table to the form. This technique creates individual 
text box controls for each field of data and a navigation control. which allows 
the user to move from one record to another. Figure 10.15 shows a form with 
data-bound text boxes: you will create this form in the next section. 
•':! R 'n R Books D<!tail View 
l·=l § l..a.J 
1 
M30 
ISBN: 
&llllimDI 
I 
Tlle: 
85 Years ., a Sand Trap 
Author: 
Beck. Fred 
Publisher: 
Hiland Wang 
Subject Code: 
HMR 
SheW l oca!ion: RC·1111 
ftclion: 
R1 
The Data Som·ces Window 
You can display the Data Sources window by selecting Show Data Sources from 
the Data menu. In a new project. you can use the Data Sources window to add 
a new data source (Figure 10.16). 
D~DSourc e:s 
Your proj«t curn:ntly hl'ls no 
d('lh ~Ot.ltCO 
(I'SSOtit'ft~d: W'lfh it. 
Add ~ ne-N o, t~ ::ou:ce. then 
dolb ~b>iod 1tam by dn ggtng 
from thi ~ VAn.jo'v onto forrru 
or exJ~ling controls. 
Add NEVt Qt'lt.;. Sollit:IL 
ijj oata ... 
When you select the option to add a new data source, the Data Source Con-
figuration Wizard opens and steps you through selecting the file and table. just 
as you did in the earlier step-by-step exercise. The new data source appears in 
Flgur·e lO.Jt; 
Each text ba,; or check box is 
bound to one field from the 
table. As the user clicks the 
navigation buttons. aU controls 
change to display the data for 
the next record. 
Figur e 10.16 
Add a new data source in the 
Data Sources window. 

C 
II 
A 
1• 
'I' 
" 
ll 
10 
the Data Sources window. You can click on the table name to make a drop-down 
list available. on which you can select Details (Figure 10.17). Note that the 
default view is DataGridView, which is the view that you used in the previous 
step-by-step exercise. After you select Details view. the table's icon changes to 
match the view (Figure 10.18). 
Note: The form must be open in the Form Designer for the table's down 
arrow to appear. 
Customize ... 
iQl Data S.. 
A ~ 
RnrBoohOataSE-t 
· ~llilllil 
~~~ISBN 
ra>i) Title 
~ Author 
~ Publisher 
~ 
SL!bject_Code 
~ 
S.helf_Location 
0 F-iction 
t§l Data S ... 
• fl. X 
Database De tails Pr·ogram-Sle p-by-Ste p 
This step-by-step exercise creates the data-bound Details view shown in 
Figure 10.15. 
Begin a New Pr·oject 
STI':I' 1: Create a new Windows project. Save it as "ChlODetailsView". 
STEP 2: Change the form's filename to "DetailsFonn" and the fonn's Text 
property to " R 'n R Books Detail View". 
STEP 3: Save the project. 
411 
Drop down the list for the table 
name and select Details to 
bind each field to its own Text 
Box control. 
Fi g ur e 10 . 1 8 
The tables icon changes to 
indicate Details view. 

412 
v 
S 
l l 
,\ 
L 
(' 
Database Applications 
Set U ll the Data Sour•·e 
STEP 1: Open the Data Sources 1~indow by selecting Show Data Sources from 
the Data menu. 
STEP 2: Click on Add New Data Source in the Data Sources window. 
STEP 3: In the Data Source Configuration Wizard. click Next. select Dataset, 
and click Next again. If the Change Data Source dialog box appears. 
click on Microsoft SOL SeNer Database File and click OK. 
STEP 4: Click on New Connection and browse to locate a copy of 
RnRBooks.mdf database file. This file can be in any other folder or on 
a CO. Click Open and OK. 
STEP 5 : Click Next, which pops up the dialog box asking if you want to add the 
file to your project: click Yes. tl1en click Next again. 
STEI' 6: Open tl1e Tables node and click in the box for the Books table. Click 
Finish. 
Create the Hound Controls 
STEP 1: In the Data Sources window, click on Books, which makes a clown ar-
row appear to the light of the name (J<'igure 10.19). Warnin.g: The J<'om1 
Designer must be open for the down an-ow to appear. 
Gata Sources 
... ~X 
• ~ Rnr8ooks0ata.Set 
·~ 
1:3) Data S. .• r.:, Serve-r 
~ Tootb 
STEP 2: Click on the down an-ow and select Details (refer to Figure 10.17). 
STEP 3: Point to the Books table name and drag the table to the fonn to a po-
sition about an inch down from tbe top of the form. 
STEP ·l : Change the widths of the text boxes and the form as desired and delete 
the Text property of the check box. Notice in Figure 10.20 that the 
component tray holds five new components: a DataSet. Binding-
Source. TableAdapter. TableAdapterManager. and BindingNavigator. 
which provides the navigation buttons at the top of the form. 
Also notice the text of the labels on the fonn. Visual Studio is smart 
enough to figure out multiple-word field names. For example. if your 
table names contain underscores or multiple capital letters. the smart 
labels will have the words separated by spaces. 1l1e Books table has 
fields called "Subject_ Code" and "Shelf_Location". but the labels say 
"Subject Code" and "Shelf Location". 
STEP 5: Rtm the project. T1y the navigation buttons to step through the records. 
Note: Remember that the ADO.NET dataset is loaded into memory and is 
disconnected from the database. so you can make changes to the records and 
use the navigation bar buttons for Add New (the record is added to the end of 
the dataset). Delete, and Save. To see any updates from one mn to the next. select 
tl1e database file or tl1e .xsd file in the Solution Explorer and set its "Copy to 
Output Directory" property to "Copy if newer". 
l!' ign••e 1 O . l9 
Click on the table name t.() 
make the drop-down list 
available. 

C 
II 
A 
1• 
'I' 
" 
ll 
10 
Dtt11i!sform.vb (Design] ~ x 
:!J R 'n R Books Detail V.ew 
~"@:]~ 
~ 
~l ~ 4 0 
ol lO} I ~ •1 19Jo 'X Q 
' 
ISBN: 
I 
1llle. 
ALtho"· 
PLblsher· 
" 
SLbjoctCode: 
Shofl.ocoticn. 
I 
Action· 
lEI 
~ 
RnrBookso.toSd 
W BoobBindingSourc• 
~ 
BooksT .bi•Mopter 
tj]; BocksBindinsNavigo~or 
Selecting Records from a List 
' 
Many applications allow the user to select an item to display from a list. You can 
fill a list box or combo box with values from a database. Consider the previous 
program. A better approach might be to display the list of JSBN numbers in a 
drop-down list and allow the user to make a selection. Then, after the JSBN is se-
lected. the corresponding data elements fill remaining fields (Figure 10.21). 
You can easily select the control type for a bound control in the Data Sources 
window. The choices are Text Box. Combo Box. Label, LinkLabel, and List Box. 
aD R n R Booh O~tait View 
l= I8 1..B.l 
ISBN: 
,lliUJ~ II I 
Trtle: 
89 Years in a Sand Trap 
PtJthor: 
Beck. Fred 
Publisher. 
Hi• and 'Nang 
Subject Code: 
HMR 
Shd lo<:atlon: RC-1111 
F'tc:!ion: 
~ 
413 
l'iJtu_re 10 .2 0 
Resize the form and controls of 
the autom.atic,~lly generated 
conaols. The componentaay 
holds the five automatically 
generated databaJe 
components. 
Figu_re 10.21 
The user can select a. book from 
the combo box. The text boxes 
automatically fill with the 
field values that correspond to 
that ISBN. 

414 
v 
S 
l l 
A 
L 
G 
.\ 
S 
( ' 
D<ftabau AJ'I•Iica.tion.• 
Co n ve rtin ~ to Combo Box Scle<" Lion-Slep-by-Step 
This step-by-step exercise converts the previous exercise to a selection appli-
cation. Figure 10.21 shows the output. 
Be!!'in the Project 
HEP 1: Open your ChlODetailsView project. It should contain text boxes for 
the data. 
STEP 2: Click on the BooksBindingNavigator component in tl1e component tray 
and press the Delete key to delete tJ1e navigation bar from the form. 
Set l t' a ComhoBo' Conu·ol 
STEP 1: Select the LSBN Text Box control and delete it. 
STEJ' 2: In the Data ources window, click on the ISBN field to make the down 
arrow appear. Then click on the arrow to drop down the list of possi-
ble control types (Figure 10.22). Select ComboBox. 
Select ComboBoxfor the ISBN fiellL 
Oat• Sou,ces 
• q X 
Oetaiisfcrm.vb [Designr 
x 
JJ P. 'n R Sook> Detail View 
ISBU: 
lle 
A.thor. 
l .,tlabof 
l i>lllcn 
Ft.bloncr 
s 
(No.el 
Slbj;oa Olde. 
Cusrol'rize ... 
~lcailcrc 
llctioo: 
1:] 
t"} llooloBindingSou<tc 
~TEP 3: Drag the lSBN field from the Data Sources window to the fonn. which 
will automatically create a ComboBox control and an extra label for 
JSBN. Delete the extra label and resize the combo box to match the 
text boxes (refer to Figure 10.20). 
~TEl' 1: Click on the Smart Tag arrow for the combo box and select Use data 
bound items. which pops up some new fields for Data Binding Mode 
(Figure 10.23). Drop down the list for Data Source and select Books-
BindingSourco. elect ISBN for Display Member. The Scloctcd Vsluo 
should have (None) selected. 
l~ l.;n•· •· 10.22 

C
II
A
I•'I'
I'R 
10 
•fil R 'n RBoob: Detail'liew 
GJ~CEJ 1 
. 
ComboBoM Tosks 
ISBN: 
9 
Ttle: 
f!] Us.e Oata Bound Items 
Arthor. 
Data llirw:liBg Mode 
DatJJ Source 
I BooksBindingSource El 
Publisher: 
SUbiect eoee 
Display Member I 
fSBN 
El 
Shelf location: 
Vduc Membc:1 I 
GJ 
F'dicn 
1!:1 
~elected Value 
!<none) 
El 
Add Quc'Y ... 
Prev~S:wOata .. 
STEP 5: With the combo box still selected, scroll to the top of the properties 
in the Properties window and expand the entry for (OataBindings). 
Click in the entry for (Advanced) and click its Properties button 
(Figure 10.24) to open the Formatting and Advanced Binding dialog 
box. Drop down the entry for Data Source Update Mode and select 
Never (Figure 10.25). Click OK. 
Note: Without tlus setting. each time the user makes a selection 
from the combo box the database updating routines will attempt to 
add the selection as a new book in the table and generate a "dupli-
cate" error message. 
Properties 
~
Jt x 
lSBNComboBox System.VIindows.Forrr • 
~1·1IT 'il ·f ~ 
~ 
. 
(Application5e1 
A (03taBindingi) 
D 
we;;;,;g.t 
~ 
Sele<tedlte (none) 
SelededVa! (none) 
Tog 
(none) 
Text 
BooksBinding.Sourc• 
(Name) 
IS8NCombo8ox -
(Advaocod) 
Advenced binding oUowsyou to bind 
propertie~ of the control. 
STEP 6: Set the Tablndex of the ISBN combo box to 2. which was the index of 
the text box that you deleted. 
Run the Application 
STEr 1: Run the program. 
STEr 2: Drop do1t11 the combo box and select another ISBN. The other controls 
automatically fill with the data for the selected book. 
415 
Fig•••· e 10 .2 3 
Set up the data binding joT the 
ISBN combo box wing the 
smart tag . 
Fit.(u••e 10. 2 4 
Click on the Properties butt.on 
for Advanced DataBindings to 
open the Formatting and 
Advanced Binding dialog box. 

416 
v 
S 
l l 
A 
I, 
G 
.\ 
S 
C 
Database Applications 
Figure 10.25 
Select Never for Data Source Update Mode so that the database does not try to add a new record for e11ery selection in the 
combo box. 
Formatting and Advanced Bindins 
Bind the prcpertie~ of a control to a sourc~ and format the result. 
Property: 
Binding: 
oata source Update Mocte: 
tl Common 
. I Book:sB.ndtngSource - ISBN 
l· ((onValldatiOrl 
~ Sclcdcdlten1 
Q S:electedValue 
... 
~ 
OnP(o 
Chan ed 
Fom1.t 
IT~ ~ 
Use no lormatttng to cfisp!ay the value fr jOnVcbd,llon 
g 
lJ Text 
Formot type 
Sampte 
t] All 
@i!tt«Mii!.; 
·1234.5 
& Acces~•blcOcstttptlc 
Numenc 
Cuueoc}' 
0 Acce>sibleName 
0dtc Time: 
Null value: 
& AccetsibleRole 
Scientific 
$ AttowOrop 
Custom 
& Anchor 
Q AutoConnpleteCustc 
9 AutoConnp&eteMod• 
~ AutoConnpfeteSouu 
t, B(lckColor 
g CausesVa!idatioo 
G Conte>:tMenUStnp 
~k Cu~or 
. 
. 
" 
. 
I 
OK 
SdecLiug F ields fa·om the Table 
Often you only need to display some of the fields from a database table. You 
can select individual fields when you create the new data source. or select the 
fields later. after you have created the data source. 
Selecting Fields \Vlteu You C1·eate the Data Som·ce 
To set up a new dataset. with selected fields. choose the Add New Data Source 
option from the Data menu or the Data Sources window. The Data Source Con-
figuration Wizard appears as described earlier. When you get to the Choose 
Your Database Objects. expand the Tables nocle and place a check mark on just 
the fields that you want (Figure 10.26). 
Selecting Fields after the Data Source Is Ct·eated 
To moclify the fields in a dataset after it has been created. select the dataset 
nome in the Doto. Sources window. You con either click the Configure DataSet 
with Wizard button at the top of the window or right-dick and choose the same 
option. You can make the field selection from the wizard as described in Figure 
10.26. which will change the schema for your dataset. 
Soa·ting Lh(' List Data 
You cmmot sort bound data in a combo box or list box using the Sorted property 
of the control. However, you can sort the records in the query that selects the 
II 
1'61~ 
. 
Unccl I 

C
ll
1\l1
'l'
li
R 
10 
Select only the fields that you want to include in the Data Sozuce Configuration Wizard. 
Om:~ Source Config:.m:tion Wiz~rd 
I ~ 
Choose Your Ooi:>bose Objects 
~h data bate objects do you want in yot-.x datastt? 
• ~~ Tables 
• •:a Boo~s 
l!lJl!] ISBN 
l!lJ I!] TillE 
~ @I Author 
l!:l rn:J Pub!i'h" 
1!:1 rn:l S...bject_ Code 
E! [!I Shdf_locotion 
El l!! nction 
~ EJ(jj! Subjects 
lEI~ 
Views 
1Elf81 S.ored Procedures 
I!S~ FunctioM 
iE] Enable loc.al datab-ase ca<hing 
DataSet name: 
RnrSoolcsOateSe£ 
I <Pr~ l 
tlf''rl'> 
I 
Finish 
data for the dataset. Although the SQL SELECT statement is generated auto-
matically by the designer. you can find and modify it. In the Solution Explorer. 
double-click on the dataset's schema file. with the .xsd extension. In the dis-
played schema (Figure 10.27). click on the Fiii,GetData() entry at the bottom, 
which displays the properties of the Fill command in the Properties window. 
Click on the Property button ( ... ) for the CommandText property; the Query 
RnrSooksOataSet.)Sd X 
c;d Solution 'WindowsApplicotionl' (l ""-
• 15'1 WindowsApplcationl 
g 
~ My Project 
LJ 
,jj App.config 
~ml.vb 
~ ~~~~ 
~SolUtio ... 
Pcoperties 
ComrnandT ext 
The quc:ry or stored procedure to be 
executed against the o·atabase 
417 
Fi g •••· e 10 .2 6 
['il -l~ 
II Cancel I 
Figu•• e 10. 2 7 
Click on the RII,GetDataO entry 
in the data.set schema to display 
the properties of the Fill 
command in the Propertie.s 
window. 

418 
v 
S 
l l 
t\ 
L 
(' 
Database Applications 
Builder window will open. H you have any expelience creating queries in Ac-
cess, this window will look very familiar to you. 
ln the Query Builder you can modify the SQL SELECT command that se-
lects the data for the dataset. To sott by a field. drop down the Sort Type I ist for 
the desired field and choose Ascending or Desoending. After you make the se-
lection and press Enter, the SQL statement changes to include an ORDER BY 
clause (Figure 10.28), which so11s the data records as they are retrieved and 
makes the list items appear in sorted order. You also can type directly into the 
SELECT statement to make modiJications. if you wish. Notice at the bottom of 
the Query Builder window that you can execute the query to preview its output 
in the lower part of the window. 
l<' iJtu••e I 0 .28 
Select Asoending for the Sort Type to sort the data. by the Title field. The SQL statement changes to include an ORDER BY 
clause. 
Query Bt..'ilder 
• C 
· I 
Bools 
~ 
l='' (All Columns) j 
0 JS8N 
0 Title 
~~ 
0~.L~hor 
0 Publi;her 
..:J 
Column 
1i11e 
Aut hor 
Alias 
SELECT 
ISBN, Tit le, Autha< 
FROM 
Books 
ORDER BVTitle 
' I 
Table 
Books 
Books 
1• 
I r---nfQ ~ 
~I • I· 
E>:ecute Query 
Ill 
Choosing the Cont1·ol Type fo1· Fields 
Outp... 
Sort Type 
Sort Order 
IZ 
Ascending 
1Z I -
~ 
J 
When you drag a Details view to a form. by default text fields are repre-
sented by text boxes. You saw earlier that you can select a different type of 
control in the Data Sources window before dragging a control to the form. In 
the Data Sources window, click on a field name: a small down arrow appears 
to the right of the field name. Drop down the list and choose the control type 
~ iiter 
Or ... "' 
_j 
OK 
Jl 
C.ancel 

C 
II 
A 
1• 
'I' 
" 
ll 
10 
(Figure 10.29). You can choose the control type for all controls and then drag 
the table to the form to create the Details view. 
Note: You must have the form displayed in the Fonn Designer to select the 
control type for the :field. 
, fp(•dhal'k 10.3 
Data Sources 
_. ~ 
RniBooksData.Scl 
• {jD Book> 
~ ISBN 
till oat.s ... 
List Box 
G 
[None) 
Cu~tomize .. 
• '/ X 
1. You drag a table name from the Data Sources window onto a form. What 
determines whether the action produces a bound grid or a set of indi-
vidual fields? 
2. How can you create data-bound text boxes? data-bound labels? 
3. What properties of a ComboBox control must you set to bind the control 
to a data field? 
4. How can you make the list items in a data-bound combo box appear in 
sorted order? 
Selecting Records Using Web Forms 
When you write database programs for the Web instead of Windows, you have a 
few more considerations. You still set up data sources and bind to controls. but 
the Web controls are considerably different from their Windows counterparts. 
You also have additional security issues for Web-based database applications. 
A Web database application operates somewhat differently than a Windows 
application due to the nature of Web pages in a client/server environment. 
Remember that a Web page is stateless. Each time a page displays. it is a "new 
fresh page." 
In the Web version of the list selection program (Figure 10.30}. each time 
the user makes a selection from the list. a r•ostback occurs. A postback is a 
round-trip to the server. After a postback. the Web page redisplays with only 
the selected data. 
419 
Figure 10.29 
Select the control type for each 
control before creating tlze 
Details view. 

420 
\ 
s 
l 
\ 
1.. 
R 
\ 
S 
l' 
Datnba.oe Applirolioru 
~ 
R n R 8ool< S..leclion- WindOws lrt!O'""t bplor•r 
l=- 1 8~ 
0 Q • ~ 
~ttp: 1ocalholt611 ~].~1 X l[b 3m~ 
p 
~ 
-
>l Fa..,,~., 
~ ~R nij8ook!.e!«bon 
Gl •I.)1• Q ~
. Pa_gt • ,. 
~ 
Select Books by Title 
How to T olk to Anyo•e. Anytime, Anywhere 
G 
-
ISBN 
0-517-59905-8 
I 
Author 
King, L11111' 
. 
Q.. l ocal .ntrillnft 1 ProC:•ctl!d Mode Off 
4il • 
lf.IIJO')I; . 
-
~ 
Sccm·ity in We L Datai.JaS(_• Application~ 
Security i much tighter for Web database applications than for Windows ap· 
plications. You wouldn't want an unauthorized user to be able to access data 
from the "W'eh. If you set up a Web application that displays or allows modi-
fications to data. you must require user authentication and set permission 
levels. Visual Studio integrates security features. which are generally strict 
by default. so that data will be secure unless you take steps to unprotect 
your files. 
For the programs in this texL which introduce the basic features of Web 
progmmming. the challenge is to a\•oid security restrictions. rather than to secure 
your database. You will use a SQL Server database ftle. stored in the Data folder 
beneath the project folder. This folder has the necessary pennissions for the 
default user of development projects. 
Note: If you wish to use a database stored in a folder other than the 
ProjectName\Data folder, the folder must have read and write permissions for 
the ComputerName\ASPNET user. 
Crt.>aling the Web St>lectiou Application- Step-by-Step 
This step-by-step exercise develops the Web version of the selection program 
that you created earlier in Windows. The Web version must use two data 
sources rather than one. The drop-down list must have a separate data source 
from the one used for the individual fields of data. The finished application ap-
pears in Figure 10.30. 
Begin a N"ew Web P1·oject 
STEP 1: Begin a new project and select ASP.NEr Empty Web Application for the 
template. Name the project "ChlOWebSelection" and choose the 
Fi g ur e 
I 0 . 30 
Allcw the user to select a book 
tide from the drop-down list; 
then display the corresporuling 
Author and fSBN for tht 
<ekct.ed title. 

C
II
A
I•'I'
I'R 
10 
location for the folder. Make sure that Create directory for solution is 
checked and click OK. 
STEl' 2: Add a new Web Form to the project (Project! Add New Item I Web Form). 
Name the fom1 "Default.aspx''. 
STE£' 3: With the project name selected in the Solution Explorer. select Add 
ASP. NET Folder from the Project menu and App_Data from the popup 
submenu. The App_Data folder is the standard location to store the 
project's data llle. 
STE£' '~' Switch to Windows Explorer and copy RnrBooks.mdf into the project's 
App_Data folder. An easy way to copy the file is to locate the file and 
press Ctrl + C and then click on the App_Data folder in the Solution 
Explorer window and paste the file (Ctrl + V). The database appears 
in the App_Data folder after you click the Solution Explorer's Refresh 
button (Figw·e 10.31). 
~ Solution hplorer 
STEP 5: Click in the Web Fomt's designer window, then select Document in the 
Properties window Object drop-down list and set the Web page's Title 
property to "R 'n R Book Selection". 
STEP 6: Click at the top of the Web Form. inside the div box. and type "Select 
Books by Title". Select the text and select Heading 2 from the Block 
Format dropdom1 list on the Formatting toolbar. Click after the text 
and press Enter hvice to move the insertion point dmm the page. 
Set Up the DI'OJJ-Down l...ist 
STE£' 1: Add a DropDownList control from the Standard tab of the toolbox. lu 
the smart tag select Choose Data Source. 
STE£' 2: lu the Data Source Configuration Wizru·d. drop down the list for Select 
a data source and select <New data source ... >. 
STEr 3: [n the next page of the wizard. select SQL Database (Figure 10.32). 
You can leave the ID of the data source set to SqiDataSourcel. 
Click OK. 
421 
Figu•• e 
10.3.1 
Click the Refresh button ajier 
you have copied the fik into 
the App _Data folder to see the 
changes in the Solution 
Explorer. 

422 
v 
S 
l l 
,\ 
L 
(' 
Database Applications 
Fign•• e 10 . 32 
Set the data source to an SQL database. 
Data Sou1ce Configuration Wizard 
l'iii~J 
Choose ~ Ootn Source Type 
Where vril the appliu tion get data from? 
~ ~~ 
Entity 
UNQ 
Object 
Site Map 
XML File 
Connect t o any SQL d:JU!bose $Uppcrted by /Ji)O.NfT, such a:. Microsoft SQL Server, Ori!ld~ or OLEDB. 
Specify an 10 for the data sour< e: 
SqiDataSource1 
sn :P ~' lf the Choose Data Source dialog box appears. select Microsoft SOL 
Server Database File, check Always use this selection, and click Continue. 
STEP 5: Next you set up the connection: Click on the New Connection 
button. If the data source does not say "Microsoft SQL Server Data-
base File (SqiClient)". click on the Change button and make that 
selection. 
STEP 6 : In the Add Connection dialog box. browse to select the RnrBooks.mdf 
file in the App_Data folder beneath the project folder. Click Open, 
OK, and Next. Click 11/ext again. 
STEP 7 : On the Configure the Select Statement page, you will select t11e data 
fields for the dataset tor the drop-do~tn list. Click on (check) ISBN and 
Title. You need the ISBN because it is the table's primary key. 
STEP 8: Click on the ORDER BY button (Figure 10.33). 
STEP 9: In the Add ORDER BY Clause dialog box. drop down the Sort by list 
and select Title. Click OK. 
STEP JO, Back on the Configure the Select Statement page of the wizard. you 
can see the new ORDER BY clause added to the SQL SELECT statement 
(Figure 10.34). 
STEI' 11: Click Next. Before you click Finish. you can click on the Test Query 
button if you would like to see the records returned from the query 
you just created. Click Finish. 
1be Data Source Configuration Wizard reappears. 
OK 
I C?-~ 

C
II
A
I•'I'
I'R 
10 
F'i g •••·e 10 .3.3 
Select the Title and ISBN fields and click on the ORDER BY button to set the sort order for the data. 
Configure Data Source 4 SqiDataSotuce1 
How would you like to re1rieve data from your database? 
C Specify a cuUom SQL statement or rlored procedure 
@ Specify columns from a table or view 
[ Book> 
Columns: 
EJ • 
~ ISBN 
,.,w •. 
~ Author 
IE! PublishEr 
1!21 Subject_ Code: 
lei Shelf .lootion 
I!J Fiction 
SEUCT s'htement 
SELECT [JSBN]. ]Tit!e] FROM ]Books) 
-I 
!!.] Return only unique: rows 
WHERE... 
ORO£RBV.I) 
Advanced ... 
< Pre~ious I( 
Not> 
}I 
~ruSt\ II 
c.ncd 
STEP 12: Choose Title for Select a· data field to display in the DropDownList. Keep 
ISBN as the value of the DropDownList (Figure 10.35). Click OK. 
STEP 13: Display the smmt tag for the drop-doW111ist again and select Enable 
AutoPostBack (Figure 10.36). 1l1is impol1ant. step specifies that each 
time the user makes a new selection from the list. the page should be 
sent. back to the server. TI1is step is necessary to select and display 
the data for the selected book. 
STEP J.1.: Widen the DropDownList control so that it is wide enough to hold a 
book title. 
STEP 15: Click after the SqiDataSource component (which will not appear at 
run time) and press Enter two or three times. 
Set Up the Addjtjoual Fields 
STEP 1: ln the toolbox. open the Data tab and view the available controls and 
components. 
You can see tools for data sources. which is another way to add a 
new data source. 
STEP 2: Add a Details View control to the Web page. In the smart tag. drop 
down the Choose a Data Source list and select <New data source ... >. Do 
not choose SqiDataSourcef. which you just created. TI1e data for the 
Details View must be different from the data for the list. 
423 

424 
v 
S 
l l 
,\ 
I. 
C 
Database Applicatio1>s 
An ORDER BY clause is added to the SQL SELECT statement. 
Conf~gure Data Source - SqiDataSourcel 
How would you like to retrieve data from your datab.Me? 
5 Specify~ cu:;tom SQL stdement or rtorcd procedure 
@ Specify columm from a table or view 
Name:: 
lsook; 
Column~ 
rcr--
li!I JSBN 
~·· 
['J Autho1 
lEI Publisher 
EJ Subjed_Code 
lEI Shdf_Locotion 
E] Ficllon 
SHECT sbtemcnt; 
SELECT (ISBN1 [Title) FROM (Books] ORDER BY (Title) 
-~-
~ Previous II 
NEXt> 
STEP 3: Select SOL Database and click OK. Then drop down the list and select 
the connection for RnrBooks.mdf that you already created. The hvo 
data sources will share the same connection since they both refer to 
the same database file. Click Next. 
STEP 4 : On the Configure the Select Statement page of t11e wizard, select ISBN 
and Author for the fields. Then click on the WHERE button. 
STEP 5 : In the Add WHERE Clause dialog box. you wi.ll set up the parameter 
used to select the correct data for the individual fields. Drop down the 
Column list and select ISBN: leave the Operator drop-down as "=". 
then drop down the list for Source and select Control. The Parameter 
properties group box pops up on the right side of the dialog box. For 
Control ID select DropDownListf and notice the SQL Expression 
([ISBN] = @ISBN) (Figure 10.37). This type of query is called a 
parameterized query. 
STEP 6: Click on Add and view the WHERE clause at the bottom of the dialog box. 
It should say [ISBN) = @ISBN DropDownList1.SelectedValue. If it 
isn't correct, you can click Remove and repeat step 5. Click OK. 
Back in the wizard, the SELECT statement should read: 
Fi~u••e 10.34 
iEI Return only unique rows 
\VHERL. 
ORDER BY ... 
Advanced ... 
Cancel 
SELECT [ISBN], [Author] FROM [Books) WHERE ([ISBN] 
@ISBN) 

C
ll
1\l1
'l'
li
R 
10 
425 
Fi g iii' C 1 0 .3. 5 
Set the display field and value field in the Choose a Data Source page. 
-
-
.-==-
Oat.a Soufce Configuration Wizard 
Choose • Data Sourc-e 
Select c deb sourc ~; 
ISqiData.Soorcel 
~ I 
Select a data field to display in the DropDownli:st: 
~ I 
Select a d.rta field for the value of the OropOwmlist: 
ISBN 
as : ro 
own ist:D10 
Oatabo~<L=..It:J. O.opll<>wnli>t T .. b 
SqiOcrta.Soutc.c - S Choose Oau Source, .. 
Configure Oa:ta Source ... 
Refresh Scheme 
Edit items ... 
l2l_KnabiE AutoPottBad: 
STEP i : Click Next and Finish. 
Note: Don't bother with Test Query U1is time because you must supply 
an existing ISBN number-
the parameter-to make the query work. 
STEP 8: Resize the Details View control to be approximately the same width as the 
OropDownList control (Figw-e 10.38). Note: If your grid does not look like 
the figure. select Refresh Schema from the Sq!DataSource's smart tag. 
STEP 9: Click Save All (or press Ctrl + Shift+ S). 
Run the ApJ>Iicatiou 
STEI' 1: Press Ctrl + FS (or Debug /Start without Debugging) to test the application. 
STEP 2: Make new selections from the list: the data fields below should change 
to match the selection. 
OK 
II 
Cancel 
Fig •••• e 
IO . :J.G 
Select Enable AutoPostBack 
fron~ the smart tag so that the 
users selection will be sent ta 
the server. 

426 
\ .! 
S 
l ' 
.\ 
L 
R 
\ 
S 
(' 
Databrue Application.! 
FI,Zure 10 .37 
Set up the selection paTameter in the Add WHERE Clause dialog box. 
Add WH.:Rf Cl<ruse 
Add on~ or more conc'rt•::M~Uto thr WW[tt£ d•ua ior the sbl;c:mcnt. ~o~ cuh cond1t10nyou Of'l ~pc<Jty 11tbcr llrtcrll \'~luror 
• paumdc.~i.tc.d va:uc. P11Gtnt=h:riLC:d uluo gd thcu Y•luo at runtime bmd on lhc:il propc:rtio. 
Fljfure .10 .38 
Wulm the Detnii~View control. 
Select Books by Title 
!oatabcmd 
SqiOot.SO..rcc Sqlloi4Sourctl I 
IIIISB); 
l]AIU.or 
1 Sq!O~ou.-ce · SqDirtaSDurce2 [ 
I 
Q Os 9"t j o Split I l!i SOurce 

C 
II 
A 
1• 
'I' 
" 
ll 
10 
Make the llrojecl l)ortable 
This optional step will make your Web application portable. The web.config file 
has a hard-coded path for the co11.11.ection to the database file. If you move or re-
name the Web site folder. the connection fails due to the path. You can modify 
the com1ection entry to make the project portable. 
STill' 1: Open the web.config file from the Solution Explorer and locate the 
entry for the connection string. The path for AttachDbFilename will 
show the current folder where you created the Web site. 
<connectionstrings> 
<add name="RnrBooksConnectionString" connectionstring=" Data 
427 
SOurce=. \SQLEXPRESS;AttachDbFilename=C:\Users\UserName\Documents\Visual Studio 2010\Web-
Sites\ChlOWebSel ection\App_Oata\RnrBooks.mdf;Integrated 
Security=True;connect Timeout=30;User Instance=True" 
providerName=" System. Data . SqlClient" /> 
</connectionstrings> 
STEP 2: Very carefully select the text that shows the path (but not the file-
name). Replace the highlighted text with "IDataDirectoryl''. (That is 
"DataDirectory" '~ith a vertical bar before and after. with no spaces.) 
The completed entry should look like this: 
AttachDbFilename=! DataDirectory !RnrBooks . mdf; 
STEP 8: Compile (build) the project (Build I Build Oh fOWebSelection). 
STEP ,~, Save and close the project. 
After you have changed the web.config file. you can rename your project 
folder and move it to another location. The portable connection string will al-
ways point to the database file in the Web site's App_Data folder. 
Make sw·e that the project is not open in the IDE and copy the complete 
folcler from one computer or location to another. 
In this optional section we will examine and demonstrate Language Integrated 
Que1·y (LINQ). which is a recent addition to Visual Basic. LINQ is a general-
purpose query language that can a->k a question of any data that is defined as an 
object. as a database, or as XML. The source of the data may be a database but 
could also be any collection. such as the collection for a list box. VB contains a 
LINQ to SQL component to convert database items to objects and a LINQ to XML 
component for converting XML document collections to objects. An-ays. which 
you leamed about in Chapter 8. are also objects that contain a collection of items. 
Que1-yjng Otlel·ating System Data 
For an example. we will use the collection of processes that are curTently IUlming 
on your operating system. Yes. it's easy to access operating system information 
with VB. To make it obvious that we are treating the operating system information 
as data. we will use the DataGridView control for displaying the data. 
The key operators in the query are From. In. and Select. 

~ 
428 
,. 
C 
Database Applications 
The LI NQ Quet·y-G<>ner·al For·m 
Dim VariableName = From ItemName In Object Select ListOfFields/Items 
The VariableName in the format does not have a data type assigned. In Visual Stu-
dio 2008 and newer. if the data type is not specified. the compiler can assign a 
type in a process called type inference.lf you were to type Dim Amount = 5. move 
to another line. and then hover the mouse over the variable. it would show you that 
through type inference. Amount is preswned to be Integer. Change the value to 5.5 
and hover over Amount and the type will be Double. Although. it is not wise to use 
type inference when the type is knmm. the feature was introduced to allow some 
of the operators in LfNQ (Order By. Where) to be used in a different order. 
The Ll NQ Qu<>ry-Exruuple 
~ 
Dim Myauery = From Anitem in Process.GetProcesses 
~ 
Select Anitem.ProcessName, Anitem.StartTime 
It 
C1·eating a LINQ P•·oject-Step-by-Step 
Jn our operating system example. you will see a new method of an enumerable 
collection called the Tolist, which works much like a ToString but returns a 
list of items. 
STEP r. Open n new Windows Forms application project; save it os ChlOLinq. 
STEP 2: Name the form ProcessesFonn and change the form's Text property to 
"Display System Processes Using LINQ". 
STEP 3: Add a DataGridView control. naming it ProcessesDataGridView. 
STEP ,~, Double-click on the form to access the Fom1_Load event. 
STEP 5: Type in the following code: 
' Display the current system processes. 
Dim Myauery = From Anitem In Process.GetProcesses 
Select Anitem.ProcessName, Anitem.Threads. count 
ProcessesDataGridYiew.DataSource = MyOuery.ToList 
STEP 6: Run the program. It should retrieve the system processes. convert 
them to an object. and assign the object as the data source of the data grid view 
(Figure 10.39). 
A FileSystem LINQ Example 
A very useful object that belongs to the My object is My.FileSystem. which can 
return information about files and directories on the computer system. This ex-
ample will perform tln·ee LINQ queries. each on the results of the previous 
query. First. we will get the collection of files in the current directory. Then. for 
each file we will retrieve a collection of the file information. The final query 
selects the name and last access time for each ftle in the directory. Figure 10.4.0 
shows the output of the queries in a DataGriclView control. 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
10 
Jil Disploy Sy>tem p,O<<SS<S u,;ng UNQ I = I @!} I~ 
J ?I'OCessNarne 
Q>Jnt 
. 
f 
~- ". 
7 
c:: 
E S40RPS 
• 
It~ 
ax 
z~ 
·1m 
10 
M~daiVaiServar 
g 
llsa;;s 
9 
:MsMoEno 
46 
,(1,101; 
~ 
Figure J 0 .39 
Using a UNQ query to jill a 
DataGridView control, 
Figu•· e 10.40 
429 
Using a UNQ query to retrieve 
and displa.y FileSystem data 
in a DataCr.idJ!icw control. 
'Project: 
'Date : 
'Programmer: 
'Description: 
Ch10LinqFileSystem 
June 2010 
Bradley/Millspaugh 
Demonstrates a LINQ query to fill a DataGridView 
with system information . 
Public Class FileSystemForm 
Private Sub FileSystemForm_Load(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MyBase.Load 
' Use a LINQ query to get information on system files 
' and directories. 
' Select all the files in the current directory. 
Dim MyQuery = From file In My.Computer.FileSystem.GetFiles(CurDir()) 
Select file 

430 
,. 
S 
L 
\ 
I, 
B 
.\ 
S 
( ' 
Databrue Applicatioll.! 
• For each file, get the file info. 
Dim Nextauery = From file In MyQuery 
Select My .Computer.FileSystem.GetFilelnfo(file) 
• For each file in the file info collection, find the file name and 
• the last access date. 
Dim FileinfoOuery = From file In Nextauery 
Select file.Name, file.LastAccessTirne 
FileDataGridView.DataSource = FilelnfoOuery.Tolist 
FileDataGridView.Columns(1) .Width = 200 
End Sub 
End Class 
Fc·.-dhac·J, IO. t 
L What is UNQ? 
2. What can be queried with LTNQ? 
3. Explain what is meant by type inference. 
Your Hands-On Progranuning Example --------
Create a Windows application that contains a drop-down list of tHles from the 
RnrBooks.rndf database file. When the user selects a title. display the corre-
sponding 1SHN. author. and publisher in labels. Include additionallal)els to 
identify the contents of the list box and the data fields. 
Pl:muin;! tlu• Proje<'l 
Sketch the form (Figure 10.41). which your users sign off as meeting their 
needs. Figure 10.42 shows the form in Design mode. 
Select the control types for the controls in tl1e Data Sources window before 
dragging the Details view to tlle form. 
Select J:ltle: 
ISBN: 
Author. 
Put;>llsher: 
FI~Cur e 10 .4 1 
A planning sketch of the 
Windows foml for the 
hnuds-on progra.mming 
example. 

Clli\1°Tt:K 
10 
Plan the Objects and Properties 
Objeel 
BooksBin<lingSource 
RnrBook.Oataset 
Books1ableAJapler 
TitleComboBo-. 
Labels 
Name 
Name 
Name 
Name 
BindingSouroe 
DiBplsyMember 
Name 
Selling 
BookoBindinP<>urce 
RmBooksDatasel 
BooksTableAdapler 
Tit leComboBox 
BookoBinclingSource 
Title 
Keep default names 
Plan the Procedure:. No code is required if all properties are correctly set. 
Write the Project 
Create a ne~· Windows project. 
Create the new SQL Server data source based on the RnrBooks.mdf data 
Cile. lnclude only those fields that appear on the finished form. 
Set the control type.~ to a combo box and labels for the fields. 
• 
Drag a Details view of the data to the fonn and rearrange the controls to 
mntd1 the s ke tc.h in Figure l 0.41. Figures l 0.42 and l 0.4:l show the c.om-
pleted f01m. 
Set the properties of the combo box according to your plan. 
Thoroughly test the project. 
Th .. Pt·oj•·rt Cud" 
lsn 't it amazing that so powerful a program doesn't require any code at all? 
T ltfESEiecbonForrn.vb jOesignJ X 
.,. R'n RBooHootupb) Tllo.;_ ______________ 
..;.., = I e ~ 
0 ··--····-; 
• · ·· 
! IS9N: . o 
T.~-~J : 
t~;;;;; :······ 
.,,, ,., __ ,, ._,,,,..., .. _,,,,_ ... _,, '"' oOOOooRo'"- ffi l .. 
·-··•••- ··w-•·•- •·••·-·••-• ··•·-·····-·••••-··•·•--•••••- .. -~-••·"-'""'-.$ . . 
.. .-.-;.-_-.-.-.-~--· ... -.•• :.- .- •• -.-;;.:_;_.·.-• .-.. ~--------~ . 
.-.-_;;;~..,;..·;,-;.;._· .-. .-.-. ...:.·ill-1 
..... ..... - ., ..... ,._ .... ,_,.. .... -..... -... ~ .... 
t' lgar«" 10.42 
Theformfor the hands-on 
programming example in 
Design nwde. showing the 
component tray . 
431 

432 
,. 
S 
L 
\ 
I, 
B 
.\ 
S 
( • 
Databrue Applicatioll.! 
r 
•.,. R 'n R Bcol: l,gc;kup by Title 
Seled Tae: .:Siif ri •&1ffiilamJ 
·I 
IS&>j: 
0.111·1111 J.1 
M ho!. 
Beck, Fre<l 
P~oher. l-lil ood W,.-,, 
l . Visual Studio uses Microsoft's ADO.NET technology to access databases in 
many different fonnats. 
2. ADO.N ET provides several types of connections for databases: OleDh. 
QL Server. Odbc. and Oracle. 
3. Databases are composed of tables of related information. Each table is 
organized into rows representing records and columns containing fields 
of data. 
4. The primary key field uniquely identifies a row or record. 
5. ADO.NET stores and transfers data using a format called XML (Extensible 
Markup Language). which can be used by many different platfonns. 
6. Many controls can be bound to a database including labels. text boxes. list 
boxes. or a DataGridView. 
7. A binding source establishes a link to a data source. which is a specific 
data file or server. 
8. A table adapter handles the transfer of data between a data source and a 
dataset. 
9. A dataset stores infonna.tion from the database in the memory of the com-
puter. A dataset can contain multiple tables and their relationships. 
10. You can c reate datasets by dragging tables from the Data Sources window 
or by using the Configuration Wizard that displays when Add New Data 
Source is selected from the Data menu. 
II . A table adapter uses an SQL SELECT statement lo specify the data to 
retrieve. 
12. You can add a DataGridView to a form and automatically bind the grid to a 
data source. 
13. The dataset's schema is defined in the .xsd file that appears in the project 
folder. 
14. To bind individual controls to data fields. select Details for the table in the 
Data Sources window and drag the table to the form. 
15. You can change the type of control used to display bo1md data in the con-
trol's smart tag. 
L6. It is common to allow the user to select a value from a list and then display 
the data values for the selected item in bound labels. 
F l l( ur t> 10. 43 
The form for the hand.!-on 
programmi11g example. 

C
ll
i\
I'
TE
I& 
10 
17. To use a bound combo box for selection. you must set its DataSource and 
Display Member properties. 
18. You can select a subset of the fields in 8 table for 8 dataset. 
19. In a Web database application. you must be very aware of the security 
requirements. 
20. Each selection from a I ist requires a post back to the server to filJ the bound 
controls. You must set the AutoPostBack prope1ty of the drop-down list to 
True to make the postback occur. 
21. A Web selection program requires a parameterized query to retrieve the 
data matching the list selection. The Windows program does not have the 
same requirement. 
22. LINQ is a query language that works on object data types. 
binding source 402 
bound controls 409 
colwnn 398 
data binding 401 
Data Designer 409 
data source 402 
data-bound controls 409 
Uata(;ridView control 403 
dataset 402 
field 398 
LINQ 427 
postback 419 
primary key field 
398 
record 
398 
row 398 
table 
398 
table adapter 402 
XJ\IrL 399 
l. Explain the purpose of a binding source. 
2. Explain the purpose of the table adapter component. 
3. " rhat is a dataset? 
4. How is a DataGridView control used? 
5. Explain the steps to change a data source from DataGridView to Details. 
6. What options are available for styles of a bound control? 
7. What is the purpose of the Data Source window? 
8. How do a Windows and a Web version of a list selection program vary? 
Why? 
9. What is a parameteri7.ed query? When would it be used? 
10. What is a postback? When does it occur? 
ll. What is the purpose ofUNQ? Name three operato1·s. 
Note: Each of tJ1ese exercises can be written as a Windows Forms application 
or as a Web application. 
10.1 '111e R.nrbooks.mdf database tile holds two tables: the Books table used in 
this chapter and the Subjects table. '111e Subjects table has only two 
fields: the Subject Code (the key) and the Subject Name. Write a project 
that displays the Subjects table in a grid. Hint: Fora Web application. use 
a Data List control for the grid. 
433 

434 
S 
l ' 
\ 
I. 
ll 
\ 
s 
C 
Databa.e Application• 
10.2 "''rite a project to display a List of the subject names in the Subjects table 
described in Programming Exercise 10.1. Use a drop-down combo box. 
Display in a label the subject code for the name selected from the list. 
10.3 W'rite a project to display the Publishers table (rom the Contacts.mdf data-
base from your StudentData\DatabaseFiles folder on the text Web site. The 
Publishers table has the following fields: PublD (the key field). Name. 
Company Name. Address. City. State. Zl P. Telephone, and Fax. 
Allow the user to select the publisher name from a sorted drop-down 
list: display the rest of the fields in labels. 
l. Create a Windows application to display the VB 
Mail Order Customer table from the VbMail.mdf 
database from the Student Data folder on the text 
Web site. Use the navigation bar to move from 
record to record. 
2. Create a Web application to display the Customer 
table in a grid on a Web Form. Hint: Use a Data-
List control for the grid. 
The Customers table holds these fields: 
Cu•tome1o£D 
LastName 
firstN:une 
A.ddress 
City 
State 
Zip Code 
VB 1\11to (;eater 
Create a Windows application or a Web application to 
display the VB Auto Center Vehicle table from the 
VBAuto.mdf database from the StudenlData folder on 
the text Web site. Display the JnventoryLO in a sorted 
combo box. Display the remaining fields in individual 
controls. 
The table holds these fields: 
l. Create a Windows application to display the infor-
mation from the Studio table in the VBVideo.mdf 
database file from the StudentData folder on the 
text. Web site. Allow the user to select the studio 
name from a sorted drop-down list and display the 
rest of the fields in labels. 
2. Create a Windows or Web application to display 
the Studio table in a grid. Hint: For a Web appli-
cation. use a DataList control for the grid. 
JnventorylD 
~lanufacturer 
ModelName 
YehiclerD 
Cost Value 
The Studio table contains these fields: 
Studio ill 
StudioName 
Contact Penoon 
Phone 

C 
II 
i\ 
I' 
1' 
•: 
ll 
Very Very Boards I 
l. Create a Windows application to display the Prod-
uct table from the VeryBoards.mdf database file 
from the Student Data folder on the text Web site. 
AJiow the user to select the product fD from a 
sorted drop-down list and display the rest of the 
fields in labels. 
2. Create a Windows or a Web application to display 
the Product table in a grid. Hint: For a Web appli-
cation. use a DataList control for the grid. 
The Product table contains these fields: 
ProductlD 
OellCription 
MfgiD 
Unit 
Cost 
LastO...!erDate 
LastO...!erQuantity 
435 

This page intentionally left blank 

c 
D 
A 
p 
T 
E 
R 
Data Files 
J. Store and retrieve data in files using streams. 
2. Save the values from a list box and reload for the next program run. 
3. Check for the end of CiJe. 
4 .. Test whether a file exists. 
5. Display the standard Open File and Save File dialog boxes to allow the 
user to choose or name the file. 

438 
v 
S 
l l 
,\ 
I. 
C 
Data Files 
Data Files 
Many computer applications require that data be saved from one run to the 
next. Although the most common technique is to use a database, many times a 
database is overkill. Perhaps you just need to store a small amount of data. 
such as the date of the last program run, the highest ID number assigned. a 
user preference, or the property values of an object to transfer to another 
application. 111is chapter deals with techniques to store and retrieve data 
files on disk. 
Note that the default security policy for the Intemet and for intranets does 
not allow access to disk files. This chapter presents only basic file input and 
output (I/0) for Windows applications. 
In computer tem1inology. any data/information that you store on disk is 
given its own unique name and is called a file. In other words, a file is a col-
lection of related data stored together and assigned a name so that it can be ac-
cessed later. Each of your Visual Basic projects requires multiple files-for the 
fonns. other classes. assembly infonnation. and project infonnation. However. 
the files you will create now are different; they contain actual data. such as 
names and addresses. inventory amounts. account balances. or even the con-
tents of a lisi box. 
FiJc 1/0 
You can read and write data in a disk file. You may have the user enter data into 
text boxes that you want to store in a file; that is called u•riting or output. At a 
later tinle. when you want to retrieve the data from the file. that is reading or in-
put (Figure 11.1). 
ll'Tite outputfron~ a program w afrle: read input from the file into a program. 
Form 
-
~~ 
........ 
/ 
Write Output 
Data 
Read Input 
v, File 
Cl 
-
Simple VB File 1/ 0 
Visual Studio includes a library of simplified data file input and output (I/0) 
objects. You can use the methods of these objects to quickly and easily write 
and read data t1les. But be aware tJ1at these objects are not the standard .NET 
objects that are used by the other .NET programming languages. such as C# and 
C++. Although a C# programmercou.ld add the Microsoft.VisualBasic.FileiO 
library to a prog.ram. that is extremely unlikely. If you want to use the more 
universal and robust flle-hanclling objects of .NET. see ".NET Standard File 
Handling" later in this chapter. 
F i gure 11. 1 
f orm 
~ 
D 

C
ll
t\l•l'
I'
R 
II 
Wt·iting and Reading Text Files 
The quickest and easiest way to write text files in VB is to use the Wri teAllText 
method of I\1y.Computer.FileSystem. This method specifies the file name 
and the text string to ~tTite to the file. You also can choose whether the data will 
replace the existing file or will be added to the end of the file (appended). 
The \Vt·iteAllText .1\lethod-Geueral Form 
439 
~~.----------------------------------------------------------------. 
~
~ 
e 
~ 
My.Computer.FileSystem.WriteAllText(FileName, StringToWrite, AppendBoolean) 
j;l 
If the Append Boolean argument is set to True. the new data are written to 
the end of the file; if it is set to False, any data in an old file are replaced by the 
new data. 
When you use this method, there is no need to open or close a ftle. The 
statement creates a file if one does not already exist. You also can specify a 
complete path tor the tile. 
The Wt·iteAJJText Method-Examples 
~ My.Computer.FileSystem.WriteAllText("Names.txt", NameString, True) 
5 
My .computer. FileSystem. WriteAllText ( "C: \Final Count. txt", countlnteger. ToString(), 
} 
False) 
00 ~--------------------------------~ 
To read the string back in. you can use the ReadAllText method. which 
reads the entire file into a single string. 
The ReadAIIText l\1etbod-Genen\l Form 
My.Computer.FileSystem.ReadAllText(FilePath) 
The ReadAllText method fails if the file or path does not exist. so you 
should code the method in a Try /Catch block. 
The HeadAllText Method-Example 
Try 
NameString = My.Computer.FileSystem.ReadAllText("Names.txt") 
Catch 
MessageBox.Show("File or path not found or invalid") 
End Try 
The ReadAllText and WriteAllText methods are handy when you need to 
read or write a single string. To 11Tite multiple fields of data. you will want to 
JtTite and read delimited files. 
W1·iting and Uea<ling Delimited FiJes 
The tetm delimited file refers to a ffie that consists of multiple fields of data. 
with the fields separated by some predefined character. The most common 

440 
l ' 
(' 
Data Files 
character used as a delimiter (separator) is the comma, but you can specify 
some other character. such as a tab or carriage return. if you wish. 
Wr·iting a Delimited FiJe 
In the following program example. the user enters a name and phone number 
into a form (Figure 11.2) and clicks the Save button. In the Sa.veButton_Click 
event procedtue. the WriteAllText appends the name and phone number to 
the end of the file. with the fields delimited by commas and the end of each 
record delimited with a carriage return. 
•. Create Name Phone File 
l=
. ~-~ 
Name 
~ve 
You can insert delimiters in your text file by concatenating the fields when 
you write the file: 
My. computer. FileSystem.WriteAllText( "Names.txt", 
Fi ~ n•• e 11 .2 
The user enters data into the 
text boxes and clicks the Save 
button. which writes these 
fields of data into the file. 
NameTextBox.Text & "," & PhoneTextBox. Text & Environment.Newline, True) 
The preceding line of code wtites the names and phone numbers from text 
boxes. delimited with a comma. and uses the Newline constant for a carriage 
retum (technically it's a carriage retum and line feed). 'The final argument is set to 
True so that new data will be appended to the end of the existing file. Note that 
for thP. ~amngP. rP.hlm ~harn~IP.r. you ~an u;oP. thP. .NF.T Environment . Newline. 
or ControlChar. Newline. as you have used in the past. or the VB-only 
vbCrl f intrinsic constant. The Newline character serves as the end-of-record 
marker. 
Delimited Data File Output fr·om the l't·ognuu 
Ann,714-555-4444 
Dennis,805-555-7777 
Richard,626-555-5678 
Katie,909-555-6789 
Ally,626-555-9999 
Danny,909-555- 3333 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
Tue Simple Delimited File Write flrogram 
' Program: 
' Programmer: 
'Date: 
'Description : 
Ch11SimpleDelimitedFileWrite 
Bradley/Millspaugh 
June 2010 
Allow the user to enter names and phone numbers and 
save them in a delimited file . 
' Folder: 
Each record holds two fields, separated by commas. 
Uses the simplified VB file access methods . 
Ch11SimpleFileWrite 
Public Class EntryForm 
Private Sub saveButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles SaveButton.Click 
' save the record to the end of the file. 
Dim FileString As String = "TextFile.txt" 
Dim RecordString As String = NameTextBox .Text & "," & 
PhoneTextBox.Text & Environment . NewLine 
' This line opens the file, appends delimited text to the end of the file , 
' and closes it. 
My.Computer. FileSystem.WriteAllText(FileString, RecordString, True) 
With NameTextBox 
. Clear() 
.Focus() 
End With 
PhoneTextBox.Clear() 
End Sub 
Private Sub ExitToolStripMenultem_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles ExitToolStripMenultem.Click 
' Close the file and the form . 
Me.Close() 
End Sub 
End Class 
Viewing the Contellls of a File 
Mter you mn your project, you can view the new file using a text editor such as 
Notepad. You also can view the file in the Visual Studio IDE. Unless you spec-
ified a path to a folder in a different location, by default your new file is created 
in the bin\Debug folder in your project folder. 
To view the file. select the project name in the Solution Explorer. If you 
don't see the bin and obj folders listed. click on the Show All Files button at the 
top of the 1~indow. Then you can expand the bin folder and the Debug folder. 
find the data file's name (Figure 11.3). and open it. The contents of the file 
should appear in the Editor window. If the filename does not appear when you 
open the bin\Debug folder. click on the Refresh button at the top of the Solution 
Explorer. 
Reading a Delimited File 
To read a delimited file using the simplified VB objects. you will need a 
TextFieldParser object. which comes from the Microsoft.VisualBasic.FileJO 
namespace. include an Imports statement at the top of the code to use the 
library objects. 
441 

442 
v 
S 
l l 
,\ 
I. 
C 
DataFiles 
/ 
Show All Files button 
/ 
/ Refresh button 
g Solution 'ChllSimplcFi!eVJrite' (1 project) 
• fil ChllSrnpleF;IeWrae +--------+- Select the projecl name 
o ~ MyProjcd 
~ ~ 
R€fereoce> 
- bin folder 
• 
'i'~i bin 
• f!.:) O.bvg 
Debug folder 
,.J Ch11SimpleFi!eWrite.exe 
J ChllSimpleFileWrite.pdb 
~~.) Chll Simp!eF~cWritc.v~host.cxe 
:.J ChllSimp!efileWrite.vshost.ex:e.manifest 
.:.J Ch11Simp!eFileWr1te.xml 
L.1 Te:df~e.tXIJ+-------+- New file 
t':i Release 
-~ 
;. 
~~] obj 
p. 
~ 
PhoncForm:vb 
' Top of code file: 
Imports Microsoft .VisualBasic .FileiO 
' Module-level variable: 
Private NamePhoneTextFieldParser As TextFieldParser 
Specifying a Delimiter A VB TextFieldParser object can read delimited files as 
well as fixed-width fields. When you declare a TextFieldParser, you must spec-
ify that the file is delimited and which character(s) to use as the delimiter. 
The TextFieldType prope1ty of U1e TextFieldParser specifies whether you are 
using a delimited or fixed-width file. Assuming that the TextFieldParser is de-
clared at the module level, the following lines of code instantiate the TextField-
Parser object, set the file, indicate a delimited file, and specify that the delimiter 
is a comma. A good location for this code is t11e form's Load event procedure. 
Private Sub DisplayForm_Load(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MyBase.Load 
' Instantiate the TextFieldParser and set the delimiters 
Dim FileString As String = "TextFile. txt " 
Try 
F i ~ u re 11 .3 
View t.he contents of your new 
file in the Viwal Studio IDE. 
NamePhoneTextFieldParser = New TextFieldParser(FileString) 
NamePhoneTextFieldParser.TextFieldType = FieldType.Oelimited 
NamePhoneTextFieldParser.SetOelimiters( ", " ) 
Catch 
MessageBox .Show( "Unable to read the file : " & FileString, "File Error") 
End Try 
End Sub 
Notice that you create a TextFieldParser object using the New keyword and 
indicate the filename associated with the parser. 
Note: To specify delimiters such as a tab. the TextFieldParser uses the VB 
intrinsic constants. Example: 
MyTextFieldParser.SetOelimiters(vbTab) 

C
II
,\I>
'I'
I'
R 
II 
Tb<' TextFieldl'arser.ReadFiel<ls Method-Ceueral Fo1111 
Read from a delimited file with the ReadFields method. This method reads 
one record of the file into a string array. The end of the line or record is deter-
mined by a carriage retum. 
443 
~~).-----------------------------------------------------------------. 
Q ~ 
I 
B i StringArray = TextFieldParser. ReadFields () 
The Text Field Pm-ser.ReadFielcls l\1etl10d-Example 
~ r---------------------------------------------------------~ 
>< e 
'e. 
~ 
Dim InfoString() As String 
NamePhoneTextFieldParser.ReadFields() 
~------------------------------~ 
Once you have retrieved the fields into the array, you can use the sub-
scripts as you learned in Chapter 8. Remember that an array begins with sub-
script 0. If we know that each record contains two strings. the first field will 
have a subscript of 0. and the second subscript is l. Notice that you can check 
for the end of the file using the EndOfData method. 
Private suo NextButton_ClicK(ByVal senoer As system.ooject, 
ByVal e As System.EventArgs) Handles NextButton.ClicK 
' Read a name and phone number from the file . 
Dim FieldString() As String ' Must be a string array for delimited fields . 
If Not NamePhoneTextFieldParser. EndOfData Then 
FieldString = NamePhoneTextFieldParser. ReadFields() 
' First field. 
NameTextBox .Text = FieldString(O) 
' Second field . 
PhoneTextBox.Text = FieldString(1) 
Else 
MessageBox . Show( " No more records to display.", "End of Data") 
End If 
End Sub 
Tbe Simple Delimited File l{ead Program 
Here is the completed program that reads the names and phone numbers from 
a delimited file and displays them on the form (Figure 11.4). Each time the user 
clicks Next. the program reads and displays the next record. Note that for this 
example program. we copied the TextFile.txt file from the bin \Debug folder of 
the previous program-the Simple Delimited File Write program. 
' Program: 
' Programmer: 
' Date: 
'Description : 
Ch11SimpleDelimitedFileRead 
Bradley/Millspaugh 
June 2010 
Uses a TextFieldParser object to read delimited fields from 
a file . 
Uses the simplified VB file access methods. 
By default, the data file is expected to be in the 
project's bin\Debug folder . 
Imports Microsoft.VisualBasic.FileiO 

444 
v 
S 
l l 
,\ 
I. 
C 
Data Files 
Public Class DisplayForm 
' Declare module-level variable. 
Private NamePhoneTextFieldParser As TextFieldParser 
Private Sub DisplayForm_Load(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MyBase.Load 
' Instantiate the TextFieldParser and set the delimiters 
Dim FileString As String = "TextFile.txt" 
Try 
NamePhoneTextFieldParser = New TextFieldParser(FileString) 
NamePhoneTextFieldParser.TextFieldType = FieldType.Delimited 
NamePhoneTextFieldParser.SetDelimiters( ", ") 
Catch 
MessageBox. Show( " Unable to read the file : " & FileString, "File Error") 
End Try 
End Sub 
Private Sub NextButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles NextButton .Click 
' Read a name and phone number from the file. 
Dim FieldString() As String ' Must be a string array for delimited fields. 
If Not NamePhoneTextFieldParser.EndOfData Then 
FieldString = NamePhoneTextFieldParser.AeadFields() 
' First field . 
NameTextBox.Text = FieldString(O) 
' Second field. 
PhoneTextBox.Text = FieldString(1) 
Else 
MessageBox.Show("No more records to display. ", "End of Data") 
End If 
End Sub 
Private Sub ExitButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitButton .Click 
' Close the form. 
Me.Close() 
End Sub 
End Class 
aD Display Name Phone File 
Name: 
kon 
Phone: 
55& 1234 
l = l @ll...a.J 
Figure 11 .4 
Each tim~ the user clicks Next. 
the next record is read from th~ 
file and displayed in the 
labels. 

C
II
,\I>
'I'
I'
R 
II 
.NET File Handling 
The simple file handling that you saw in the previous section can work well for 
small amounts of data in a VB program. But for more robust and universal file 
handling. which is the same for all .NET languages. you will want to use 
streams. 
File Handling Usjng St1·cams 
.NET uses streams for file input and output. A stream is designed to transfer a 
series of bytes from one location to another. Streams are objects that have meth-
ods and properties, just like any other object. The stream objects are found in 
the System.lO namespace. You can save the trouble of fully qualifying ref-
erences by including an Imports statement at the top of the file, before the 
statement declaring the form's class. 
Imports System. IO 
Public Class FileiOForm 
The most straightfonvard way to read and write small amounts of data is to 
use the Su·eamReader and Stt·eamWriteJ' objects. Generally, you write the 
Stream Writer code first. to create the data file. Then you can write the Stream-
Reader code to read the file that you just created. 
W1•iting Data in a File Using a St1•eam Write•· 
To write data to a file, you first have the user input the data into text boxes and 
then write the data to the disk. The steps for writing data are 
• 
Declare a new Stream Writer object. which also declares the name of the 
data file. 
• 
Use the Stream Writer's Writeline method to copy the data to a buffer in 
memory. {A buffer is just a temporary storage location.) 
• 
Call the Stream Writer's Close method, which transfers the data from the 
buffer to the file and releases the system resources used by the stream. 
Dim ObjectName As New Streamwriter( "FileName") 
Dim ObjectName As New Streamwriter( "FileName", BooleanAppend) 
You declare a new Stream Writer object for writing data to a file. The first argu-
ment in the constructor specifies the name of the file. The default location for 
the file is where the program executable (.exe) is placed, which is the bin\Oe-
bug folder beneath the folder for the cuJTent project. You also can specify the 
complete path of the file. 
In the second version of the Stream Writer constructor. you can specify that 
you want to append data to an existing file. Specify True to append. By default. 
445 

446 
v 
S 
l l 
,\ 
I. 
C 
DataFiles 
the option is set to False. and the old data file is deleted and a new data file is 
created. in effect overwriting any existing data. 
Declaring a new Stream Writer object opens the file. The file must be open 
before you can write in the flle.lf the file does not already exist. a new one is 
created. lf you don't use a full qualifying path. then the file is opened or cre-
ated in the project's bin \Debug folder where the program executable is located. 
No exception occurs whether or not the file exists. so you could declare the 
Stream Writer object in the declarations section of your program or in a proce-
dure. However. because you don't want to keep a file open any longer than nec-
essary. it's best to open the file inside a procedure. If you use a full path in the 
filename, then you should instantiate the Stream Writer object in a Try /Catch 
block in case the path does not exist. 
o~clat•iug l\ Stream Wt•iLN' Ohjec t-Exampl~s 
l~llii:J 
Use .txt as your extension to a llow 
for easy viewing of the file in 
Notepad or the Visual Studio IDE. • 
~ P--------------------------------------------------------------. 
~ 5 
-.:; ;;-
00 
Dim PhoneStreamWriter As New Streamwriter ("PhOne . txt ") 
Private Namesstreamwriter As New Streamwriter( "C:\MyFiles\Names. txt ") • could throw 
• an exception if the path doesn't exist . 
Friend LogFileStreamWriter As New Streamwriter( "LogFile. txt ", True) 
The Stream Writer object has both a Write and a Writeline method. The 
difference between the two is a carriage-return character, which sen•es as the 
end-of-record marker. The Write method places items consecutively in the file 
with no delimiter (separator). The Writeline method places an Enter (carriage 
return) between items. We will use the Writeline in this chapter because we 
want to easily retrieve the individual data elements later. 
The WriteUnt- Method-General Form 
~~I 
~ t ObjectName. WriteLine(DataToWrite) 
The Data To Write argument may be string or numeric. 'n1e Wri teline method 
conve11s any numeric data to string and actually writes string data in the file. 
The WI·iteUne i\letllofi-Examples 
~ .---------------------------------------------------------------... 
~ 3 
'E. 
~ 
PhoneStreamwriter.WriteLine(NameTextBox.Text) 
PhoneStreamwriter.WriteLine(PhoneTextBox.Text) 
Namesstreamwriter. Wr i teline ("Sammy" ) 
BankBalanceStreamwriter.WriteLine(BalanceDecimal. ToString()) 
H you are inputting data from the user and Wiiting in a file. you generally place 
the Writeline in a button click event procedure. The follmting phone list 
example is similar to the earlier file writing program. but uses a StreamWiiter 
object. rather than the VB WriteAl!Text method. You can refer to Figure 11.2 to 
see the data entry form. 
Private Sub saveButton_Click(ByYal sender As System. Object, 
ByYal e As System. EventArgs) Handles saveButton.Click 
' save the record to the file . 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
' Write to the already-open stream. 
PhoneStreamwriter.WriteLine(NameTextBox.Text) 
PhoneStreamwriter .WriteLine(PhoneTextBox.Text) 
With NameTextBox 
.Clear() 
. Focus() 
End With 
PhoneTextBox .Clear{) 
End Sub 
The Save button writes the data from the screen to the Stream Writer object 
and then clears the screen. 
Closing a File 
After you finish writing data in a file. you must close the file. Closing a file is 
good housekeeping; it finishes writing all data from the stream's buffer to the 
disk and releases the system resources. Use the StreamWriter's Close 
method, which is similar to closing a form. A common location for the Close 
method is in your program's Exit cotmnand or the form's FormClosing event 
procedure (see page 457). 
Private Sub ExitButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitButton.Click 
' Close the file and the form. 
Phonestreamwriter .Close() 
Me.Close() 
End Sub 
If you fail to close a file when you are finished with it, the file may remain 
open for an indefinite time and sometimes may become unusable. See ''The 
FormClosing Event Procedure" section later in this chapter. 
Re acling Data ft·mu a File Using a Stt·eamReadet· 
You use the Stream Reader class to read the data from a file that you created 
with a Stream Writer. 
The steps for reading the data from a file are the following: 
• 
Declare an object of the Stream Reader class. The constructor declares the 
:filename and optional path. This statement opens the file so that you can 
read from it. 
• 
Use the Rea<lline method to read the data. You may need to use a loop to 
retrieve multiple records. 
• 
When finished. close the stream using the StreamReader's Close method. 
Oechwiug and Instantiating a Strcatnlleader Ohject-Cenenu Fonu 
' Declare a module-level variable. 
Private QbjectName As StreamReader 
' Inside a procedure. 
ObjectName = New StreamReader( "FileName") 
447 
,_,. ii:J 
It's best to open a file only when it 
is needed and close it as soon as 
you ore done with it so that you 
don't tie up 
system 
resources 
unnecesso rily. • 

448 
\ ' 
s 
l i 
\ 
•• 
IC 1\ 
S 
l ' 
D<llo File.! 
The Stream Reader class works i:n much the same way as the Stream Writer. 
However. the file must exist in the location where the application expects it. IJ 
no such file exists. an exception occurs. For this reason. you must instantiate 
the StreamReader object in a procedure so that you can enclose it in a 
Try /Catch block. 
o .. d nl'iU!: and lu'"HU1tiatiug a Su· .. amlt .. ader· Ohjet·t-Exa mplt·~ 
~ ~----------------------------------------------------------~ 
., 
Try 
8 l 
Dim NamesStreamReade r As New StreamReader ( "C: \MyFiles\Names. txt") 
Catch 
MessageBox.Show( "File does not exist. ") 
End Try 
• In declarations section , to create a module -level variable name. 
Private PhoneStreamReader As StreamReader 
' In a Procedure, to catch an exception for a missing file . 
Try 
PhonaStreamReader = New StreamReader( "Phone.txt ") 
Catch 
MessageBox.Show( "File does not exist. ") 
End Try 
U~>jng the ltt•:tdLin(' MNhod 
Use the StreamHeader's Readline method to read the previously saved data. 
Each time you execute the method. it reads the next line from the file. Assign 
the value from the read to the desired location. such as a label. a text box. or a 
string variable. The Readline method has no arguments. 
NameTextBox .Text = PhoneStreamReader.Readline() 
Checking fom· the End uf the File 
Use the StreamReader's Peek method to check for end of file. The PeeK 
method looks at the next element without really reading it. The value retumed 
when you peek beyond the last element is negative 1 (-1). 
If PhonestreamReader. PeeK <> - 1 Then 
NameTextBox.Text = PhoneStreamReader. ReadLine() 
PhoneTextBox. Text = PhoneStreamReader. Readline() 
End If 
Note that the Readline method does not throw an exception when you at-
tempt to read past the end of the file. 
You must always make sure to read the data elements in the same order in 
which they were written. Otherwise your output will display the wrong values. 
For example, if you reversed the two lines in the program segment above, the 
phone number would display for the name and vice versa. The Readline 
method just reads the next line and assigns it to the variable or property that 
you specify. 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
The File ({cad (lrogram 
Here is the completed program that reads the name and phone numbers from a file 
and displays them on the form. Each time the user clicks Next. the program reads 
and displays the next record. Note that for this example program. we copied the 
PhoneList.txt file from the bin\Debug folder of the Write File project. to the 
bin \Debug folder of this project. You also could specify the exact path of the file. 
'Program: 
'Programmer: 
'Date: 
'Description : 
Ch11StreamReaderReadFile 
Bradley/Millspaugh 
June 2010 
Retrieve the information stored in a data file 
and display it on the screen . 
Uses a StreamReader. 
Imports system.IO 
Public Class DisplayForm 
' Declare a module-level variable. 
Private PhoneStreamReader As StreamReader 
Private Sub DisplayForm_Load(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MyBase.Load 
' Open the input file and display the first record . 
Try 
PhoneStreamReader = New StreamReader("Phonelist.txt") 
DisplayRecord () 
Catch ex As Exception 
MessageBox. Show( "File not found or is invalid ." , "Data Error ") 
End Try 
End Sub 
Private Sub NextButton_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles NextButton.Click 
' Display the next record. 
DisplayRecord() 
End Sub 
Private Sub DisplayRecord() 
1 Read and display the next record. 
If PhoneStreamReader.Peek <> - 1 Then 
NameTextBox. Text = PhoneStreamReader.Readline() 
PhoneTextBox.Text = PhoneStreamReader.Readline( 1 
Else 
MessageBox. Show( "No more records to display ." , "End of File") 
End If 
End Sub 
Private Sub ExitToolStripMenuitem_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles ExitToolStripMenuitem.Click 
I End the project. 
If Not PhoneStreamReader Is Nothing Then 
' Close the file, only if it is open. 
PhoneStreamReader.Close() 
End If 
Me.Close() 
End Sub 
End Class 
449 

450 
l ' 
C 
Data Files 
l. Write the statement to create an inventory Stream Writer object that will 
write data to a me called "Inventory. txt". 
2. Code the statement to write the contents of Description Text Box into the 
inventory stream. 
3. Why should the declaration statement for a Stream Reader object be in 
a Try /Catch block? Does the declaration statement for a Stream Writer 
object need to be in a Try /Catch block? Why or IVhy not? 
4. Write the statement(s) to read a description and a product number from 
lnventoryStreamReader assuming it has been opened as a Stream-
Reader object. Make sure to test for the end of the file. 
Using the File Common Dialog Box 
1 
In the preceding file read and write programs. the filenames are hard-coded 
into the programs. It is best to allow the user to browse and enter the 
filename at run time. You can display the standard Windows Open File dialog 
box. in which the user can browse for a folder and filename and/or enter a 
new filename. Use the OpeuFileDialog common dialog component to dis-
play the dialog box. and then use the object's FileName property to open the 
selected file. 
o ,JenFileDialog Comi>Onenl Pl'OIJel·tjes 
You will find the follm~ing prope11ies of the OpenFileDialog component very 
useful: 
Proper-ty 
Name 
CheckFileExists 
CheckPathErists 
FileNau1e 
Filter 
Initial Directory 
SafeFileName 
Title 
Description 
Name of the component. You can use the default OpenFileOialogl. 
Display an error message if the file does not exisl Set to False for saving a file, since you 14•ant to 
create a new file if the tile does not exist. Leave at the default True to read an existing file. 
Display an error message if the path does not exist. Set to False for saving a file. since you ,.·aut it to 
create the new folder ii necessary. 
The name of the file selected or entered by the user, which includes the file path. Use this property 
after displaying the dialog box to determine whkh file to open. You also can give this property au 
initial value, which places a default filename in the dialog box when it appears. 
filter file extensions to display. 
Example: Text Files (*.txt) 1 * . txt !All files ( *. *) 1 *. * 
Dinectory to d.isplay ,.·hen the dialog box opens. Set this in code to Directory.GetCuJTentDirectory() to 
begin in the current directory. 
The name of the file selected or entered by the user. which does not include U1e file path. 
Title bar of tl1e dialog box. 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
Displaying the Open File Dialog Box 
To display an Open File dialog box (Figure 11.5), you must first add an Open File-
Dialog component to your form. The component appears in the component tray. At 
design time. set initial prope1ties for Name. CheckFileExists. CheckPathExists. 
Filter. and Title (see the preceding table for the values). In code. set the lni-
tia!Directory property to Directory. GetcurrentDirectory (). display the 
dialog box using the ShowDialog method. and retrieve the FileName property. 
451 
Fiaure J l .5 
Di.splay the Windows Open File dialog box using the OpenPikDialog component. The Filter property detennines the entries 
that display in the drop-down box. 
-
!51 Open file to Read 
CJQ rl -
.,-b-
in-•-
Debu
-~---------.•[-=-~
~ II Seorrh De!>~g 
--
Org.onize ... 
New fokb 
~-
!r! Desktop 
D<~ tc modified 
j. Download:> 
~ 
Rece1t Places 
EJ Phoro<List.M 
.5/1112010 10..33/\M 
Text Oocum 
~ 
libr~ ries 
~ Documents 
jt Music 
~ Pictures 
81 Videos 
4 Homegroup 
~Computer 
£:. OS(C:) 
Ci1 RECOVERY([):) 
c;a l oco! Di>k (G;) 
•• 
Filename: 
• 1 lr..tfileo('.t>t) 
•I 
Open H I Cane.! I 
Private Sub OpenToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles OpenFileToolStripMenultem.Click 
' Open the file. 
Dim ResponseDialogResult As DialogResult 
' Is the file already open? 
If PhoneStreamWriter IsNot Nothing Then 
PhoneStreamWriter.Close() 
End If 
' Set up and display the Open File dialog . 
With OpenFileDialog1 
' Begin in the current folder . 
• Initial Directory = Directory.GetCurrentDirectory( ) 
. FileName = "Phonelist. txt " 
. Title = "Select File or Directory for File" 
' Display tile Open File dialog box. 
ResponseDialogResul t = .ShowDialog( ) 
End With 

452 
l ' 
C 
Data Files 
' Make sure that the user didn't click the cancel button . 
If ResponseDialogResult <> DialogResult.Cancel Then 
' Open the output file . 
PhoneStreamWriter = New StreamWriter(OpenFi l eDialogl. FileName) 
End If 
End Sub 
Notice that the user may click on the Cancel button of the Open File dialog 
box. Check the DialogResult for Cancel. And if the user does click Cancel, that 
presents one more task for the program: You cannot close a Su·eam Writer object 
that isn't open. 
Cheddug for Successful File Ov('u 
In the preceding file-open procedure, tJ1e statement 
PhoneStreamWriter = New StreamWriter (OpenFileDialog1 . FileName) 
may not execute. [n that case. the Stream Writer is not instantiated. You can ver-
ify the object's instantiation using the VB keyword Nothing. An object variable 
that has not been instantiated has a value of Nothing. Notice the syntax: You 
must use the keyword IsNot ra.ther than the not equal operator(<>). 
' Is the file already open? 
If PhoneStreamWriter IsNot Nothing Then 
Phonestreamwriter.Close() 
End If 
Place this code in the fom1's Form Closing event procedure. 
Checking fot· Ah·eady 01J('ll File 
It's possible that the user may select the File / Open menu item twice. which can 
cause a problem. A second open instantiates another file stream. and the Close 
method never execute:; for the fir:;t file. It's best to check for an active instance 
of the file stream before instantiating a new one. 
Private Sub OpenToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles OpenFileToolStripMenultem.Click 
' Open the file . 
Dim ResponseDialogResult As DialogResult 
' Is the file already open? 
If PhoneStreamWriter IsNot Nothing Then 
PhoneStreamWri ter.Cl ose() 
End If 
' Set up and display the Open File dialog . 
With OpenFileDialog1 
' Begin in the current folder . 
. InitialDirectory = Directory.GetcurrentDirectory() 
.FileName = "Phonelist.txt" 
.Title - 'Select Hle or Directory for ~ile " 
' Display the Open File dialog box. 
ResponseDialogResult = .ShowDialog() 
End With 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
' Make sure that the user didn't click the cancel button . 
It ResponseDialogResult <> DialogResult.Cancel Then 
' Open the output tile. 
PhoneStreamWriter = New StreamWriter(OpenFileDialog1 .FileName) 
End If 
End Sub 
Using tbe Save File Dialog Compon<>nt 
In addition to the OpenFileDia]og. you also can choose to display a SaveFile-
Dialog component. which displays the standard system Save As dialog box. The 
SaveFileDialog allows the user to browse and enter a filename to save; it has 
most of the same properties as the OpenFileOialog component. By default. the 
SaveFileDia]og component checks for an already existing file and displays a di-
alog box asking the user whether to replace the existing file. 
The Open and Wt·ite File Pt·ogram 
Here is the complete I isting of the Open and Write File program. which allows 
the user to select the filename. The user can select the Open command from the 
File menu. But if the Save button is clicked and the file is not yet open. the 
Open File dialog box displays automatically. 
'Program: 
'Programmer: 
'Date: 
'Description : 
Ch11 StreamWriter Open and Write File 
Bradley/Millspaugh 
June 2010 
Allow the user to enter names and phone numbers and 
save them in a tile. 
'Folder: 
Display the File Open dialog box tor the user to 
enter the tile and path. 
Ch11 StreamWriterOpenAndWriteFile 
Imports System.IO 
Public Class PhoneForm 
' Declare module-level variable. 
Private PhoneStreamWriter As StreamWriter 
Private Sub saveButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles saveButton .Click 
' save the record to the tile. 
It PhoneStreamWriter IsNot Nothing Then ' Is the tile open? 
PhoneStreamWriter.Writeline(NameTextBox .Text) 
Phonestreamwriter.WriteLine(PhoneTextBox .Text) 
With NameTextBox 
. Clear() 
.Focus() 
End With 
PhoneTextBox.Clear() 
Else 
' File is not open. 
MessageBox.Show( "You must open the tile before you can save a record." , 
"File Not Open", MessageBoxButtons.OK, MessageBoxicon.Information) 
' Display the File Open dialog box. 
OpenToolStripMenuitem_Click(sender, e) 
End If 
End Sub 
4S3 

454 
v 
s 
l1 
-" 
•• 
C 
Data Files 
Private Sub OpenToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles OpenFileToolStripMenultem.Click 
' Open the file . 
Dim ResponseDialogResult As DialogResult 
' Is the file already open? 
If Phonestreamwriter IsNot Nothing Then 
PhoneStreamWriter.Close() 
End If 
' Set up and display the Open File dialog. 
With OpenFileDialog1 
' Begin in the current folder . 
. InitialDirectory = Directory.GetCurrentDirectory() 
.FileName = "Phonelist.txt" 
. Title = "Select File or Directory for File" 
' Display the Open File dialog box. 
ResponseDialogResult =. ShowDialog() 
End With 
' Make sure that the user didn't click the Cancel button . 
If ResponseDialogResult <> DialogResult.Cancel Then 
' Open the output file . 
PhoneStreamWriter = New StreamWriter(OpenFileDialog1.FileName) 
End If 
End Sub 
Private Sub ExitToolStripMenultem_Cli.ck(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles ExitToolStripMenuitem.Click 
' Close the file and the form . 
If Phonestreamwriter IsNot Nothing Then ' Is the file open? 
PhoneStreamWriter .Close() 
End If 
Me.Close() 
End Sub 
End Class 
l. What is the Filter property setting to display only .txt files? 
2. Write the statement to set OpenFileDialogl to begin in the current 
directory. 
3. Write the statement to close PhoneStream Writer; make sure to allow for 
the possibility that the file is not open. 
Saving the Contents of a List Box 
In Chapter 7 you wrote a program to maintain a list. The user was allowed to 
add items and remove items. but the next time the program ran. the list changes 
were gone. The changes were not saved from one execution to the next. 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
Now that you know how to save data in a file. you can save the contents of 
a list when the program exits and reload the list when the program reopens. Use 
the following techniques for this project: 
• 
Oo not give any values to the list's Items collection at design time. Instead. 
when the program begins. open the data file and read the items into the 
Items collection. 
• 
If the user makes any changes to the list. ask whether to save the list when 
the program ends. 
• 
Include a menu option to save the list. 
• 
If the file holding the list elements does not exist when the program begins, 
give the user the option of creating a new list by adding items. 
The examples in this section use the hands-on example from Chapter 7. 
which allows the user to make changes to the Coffee Flavor list (Figure 11.6). 
We will load the list from a file in the Form_Load procedure and query the user 
to save the list if any changes are made. 
cr-J R 'n R for Re~ing 'n Refreshment 
l e~ IS IOIIIIE.I.ol 
File 
_.,_ 
Edit 
!::!elp 
Select Colfee and Syrup 
~eeFiavor 
SYnc> Flavor 
I 
. 
Chocolate 
HozchA 
Irish Creme 
Orange 
-
-
i 
Loading tbe List Box 
Assuming that the list items are stored in a data file. you can read the file into 
the list in the Form_Load procedure. Loop through the ftle until all elements 
are read, placing each item in the list with the Items .Add method. 
Dim CoffeeFlavorString As String 
• Read all elements into the list. 
Do Until FlavorsStreamReader.Peek = - 1 
CoffeeFlavorString = FlavorsStreamReader. ReadLine() 
CoffeeComboBox.Items .Add(CoffeeFlavorString) 
Loop 
Checking fo1· Exi.ste nce of the File 
When you create a Stream Reader object. the constructor checks to make sure 
the file exists. If the file does not exist. what do you want to do? Maybe the user 
F'ig11 a· e 
J 1.6 
The form for the li.st sove 
program. taken from 
Chapter 7. 
4SS 

456 
\ ' 
S 
L 
.\ 
L 
R 
.\ 
S 
(' 
Data Files 
wants to exit the program. locate the file. and try again. Or maybe the user 
prefers to begin with an empty list. add the I ist items. and create a new file. 
TI1is technique is a good way to create the file in the first place. 
You can catch the exception for a missing file and display a message box 
asking if the user wants to create a new file. 
ResponseDialogResult = MessageBox.Show("Create a new file?·, "File not Found", 
MessageBoxButtons.YesNo, MessageBoxlcon.auestion) 
If the user says Yes. allo11· the program to begin running with an empty list; 
the file will be created when the program exits or the user saves the list. lf the 
user says No. exit the program immediately. 
Private Sub FlavorsForm_Load(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles Me.Load 
' Load the items in the CoffeecomboBox list. 
Dim ResponseDialogResult As DialogResult 
Dim CoffeeFlavorString As String 
Try 
' Open the file. 
Dim FlavorsStreamReader As StreamReader 
New StreamReader("Coffees.txt') 
• Read all elements into the list. 
Do Until FlavorsStreamReader.Peek = - 1 
CoffeeFlavorString = FlavorsStreamReader.Readline() 
CoffeecomboBox.Items.Add(CoffeeFlavorString) 
Loop 
• Close the file. 
FlavorsStreamReader.Close() 
Catch ex As Excepti on 
' Fil e missing. 
ResponseDialogResult = MessageBox.Show("Create a new file?", 
"Fi le Not Found", MessageBoxButtons.YesNo, _ 
MessageBoxlcon.Ouestion) 
If ResponseOialogResult = Dial ogRes ult.No Then 
' Exit the program. 
Me .Close() 
End If 
End Try 
End Sub 
Saving tbe File 
In this program the user can choose a menu option to save the file. Open a 
Stream '\'l'riter object and loop through the Items collection of the list box. sav-
ing each element with a Writeline method. 
Private Sub SaveFlavorlistToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles SaveFlavorlistToolStripMenuitem.Click 
· Save the flavor list in a file . 
Dim Numberitemsinteger As Integer 

(; 
II 
,\ 
1• 
1' 
1·: 
II 
II 
' Open the file. 
Dim FlavorsStreamWriter As Streamwriter = 
New StreamWriter( "Coffees.txt", False ) 
' Save the items in the file. 
Numberitemsinteger = CoffeecomboBox. Items. count - 1 
For Indexlnteger As Integer = o To Number ltemslnteger 
FlavorsStreamWriter.Writeline(CoffeecomboBox.Items(Indexinteger) ) 
Next Indexlnteger 
' Close the file . 
FlavorsStreamWriter.Close( ) 
IsDirtyBoolean = False 
End Sub 
The last line in this procedw-e needs some explanation. The next section 
explains the reason for IsDi r t yBool ean = False. 
Que t·ying Lht' Use•· Lo San ' 
If your program allows users to make changes to data during program execu-
tion. it's a good idea to ask them if they want to save the changes before the pro-
gram ends. This is similar to working in a word processing program or the VB 
editor. If you close the file after making changes. you receive a message asking 
if you want to save the file. But if you haven "tmade any changes since the last 
save. no message appears. 
To keep track of data changes during execution. you need a module-level 
Boolean variable. Because the standard practice in programming is to refer to 
the data as "dirty'' if changes have been made. we will call the variable ls-
DirtyBoolean. In each procedure that allows changes (Add. Remove. Clear). 
you must set ls DirtyBoolean to True. After saving the ftle. set the variable to 
False. ('The code for this appears in the preceding section.) 
Just before the project ends. you must check the value of lsDirtyBoolean: 
if True. ask the user if he or she ~·ants to save: if False. you can just exit with-
out a message. 
Tlw Fot·mCiosing EYc nl Pt·occthu·c 
If you want to do something before the project ends. such as ask the user to save 
the file. the best location is the form's Fo•·mClosiug ncut procedure. This is a 
much better place for such a question ll1ru1 your exit procedure because the user 
can quit the progrrun in more than one 1ray. The Form_ FormClosing event pro-
cedure executes before the fonn closes when the user clicks on your Exit button 
or menu c01runand. clicks on the window's Close button. or even exits Windows. 
Private Sub FlavorsForm_FormClosing(ByVal sender As Object , 
ByVal e As system.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing 
' Ask the user to save the file. 
Dim ResponseDialogResult As DialogResult 
Dim MessageString As String = "Coffee list has changed. save the list?' 
If IsDirtyBoolean Then 
ResponseDialogResult = MessageBox. ShOw(MessageStr ing, "Coffee List Changed", 
MessageBoxButtons .YesNo, MessageBoxlcon.Ouestion) 
If ResponseDialogResult = DialogResult.Yes Then 
saveFlavorlistToolStripMenuitem_Click(sender, e ) 
End If 
End If 
End Sub 
457 

458 
\ 
S 
L 
\ 
1, 
IE 
_\ 
S 
(' 
Data File. 
l. Write the loop to save all of the elements from NamesUstBox using 
NamesStreamWriter. which is a Stream Writer already opened and con-
nected to Names.Lxl. 
2. In what procedure should the code from Question l be placed? 
3. Write the statements in the Form_Load event procedure to load the list 
of names into NamesListBox. 
XML Files 
~ 
An increasingly important topic. XML files. is covered in Chapter 14. See 
'"XML Data Files" for tenninology and examples. including the new XML Lit-
erals. X Document and XElement objects. and LINQ to XML. 
Your Hands-On Programming Example --------
Modify the hands-on programming example from Chapter 7 to save the list 
changes from one run of the program to the next. TI1e user can add items to the 
Coffee Flavor list. remove items. and clear the list. lf there are any changes to 
the list, allow the user to save the list. ~'hen the program begins, load the list 
from tl1e disk file. so that it displays the list as it appeared during the last run. 
Do not give the Coffee Flavor list initial values: if the user has not entered 
any flavors. the list should be blank. Lf the file holding coffee flavors is not 
found. allow the user to enter the new flavors at run time. 
Add a Save Aavors Ust menu item on the File menu. Also query tl1e user lo 
save the file if the list has changed when the program closes. 
Note: 're have removed L11e printing routines from the Ch07Hands0n pro-
gram to better focus on the file-handling routines. 
Plmmin~ the !•rojcN 
Sketch the form (Figure ll. 7). which your users sign off as meeting their needs. 
Flavor5Form 
Edit t:lelp 
GroupBox1 
~yrup Fla..-or 
I<' I ~urt> I 1.7 
A skeUh oftheformfor tiul 
hands-on programming 
example. 
CoffeeComt>oBox 
D 
Syru pllstBox 

C 
II 
1\ 
I' 
T 
t: 
R 
II 
Plan the Objects and Properties See the planning for the Chapter 7 hands-on 
programming example and make the following addition: 
O hje•l 
I 
SaverJa,orListToolStripMenullem 
Properly I 
Name 
Text 
Selling 
SaveF'lavorListToolStripMcnultem 
&Save Flavor List 
Plan the Procedures Refer to the planning for the Chapter 7 hands-on pro-
granuning example and make the following changes. You can remove the con-
trols and procedures for printing. 
P rQccdm-e 
SaveFtavorLisiTooiStripMenullem_Ciick 
Form_ Load 
Form_FormCI011ing 
Actio ns 
Open the file. 
Save the list items in the file. 
Close the file. 
SetlsOirtyBoolean to F alae. 
Try 
Open I he 6le. 
Read the file contents into the Flavors list. 
Close the file. 
Catch (File io missing) 
Query Lhe user to create the new file. 
U ans,.·er is No 
Exit the program. 
End lf 
End Try 
lf liot has ch•ngeJ (is dirty) 
Query the user to •ave the List data. 
lfY.,. 
Call S.veFlavorl..istToolStripMenul lem_CJjck. 
Write the Project Begin with the Chapter 7 hands-on programming example. 
See "Basing a New Project on an Existing Project" in Chapter 5 (page 233) for 
help. Figure 11.7 shows the sketch and Figure 11.8 shows the completed form. 
• 
Add the menu item and set the properties according to your plan. 
• 
Make sure to add d1e new Imports statement: 
Imports System. IO 
• 
Add the module-level variable lsDirtyBoolean. 
• 
Write the code for the ne11· menu item based on the pseudocode. 
• 
Write the nee+· code for the Form_l.oad and Form_FormClosing event pro-
cedures. based on the pseudocode. 
• 
When you complete the code. thoroughly tesl tbe project. Fill the list. save 
the 'list. and rerun the program multiple limes. Make sw·e that you can 
modify the list and have the changes appear in the next program run. Also 
test the option to not save changes and make sure that it works correctly. 
459 

460 
\ 
S 
L 
\ 
I, 
ll 
\ 
s 
(' 
Data Fil~., 
fil• 
fd~ !:folp 
Tbt> ProjN·t (~odin~ Solution 
'Project: 
'Prograrrrner: 
'Date: 
'Description: 
Ch11HandsOn 
Bradley/Millspaugh 
June 2010 
Maintain a list of coffee flavors. 
t' IJ!ure I 1.8 
The completedf omtfor the 
haruls-on programming 
example. 
'Folder: 
Note: This program extends Ch07HandsOn to save the modified list 
in a file . The printing has been removed for clarity . 
Ch11Hands0n 
Imports System.IO 
Public Class FlavorsForm 
' Declare module-l evel variable . 
Private IsDirtyBoolean As Boolean 
Private Sub FlavorsForm_Load(ByVal sender As Object , 
ByVal e As System.EventArgs) Handles Me.Load 
' Load the items in the CoffeecomboBox list. 
Dim ResponseDialogResult As DialogResult 
Dim CoffeeFlavorstring As String 
Try 
' Open the file. 
Dim FlavorsStreamReader As StreamReader 
New StreamReader( ' Coffees.txt' ) 
' Read all elements into the list. 
Do Until FlavorsStreamReader.Peek = -1 
CoffeeFlavorString = FlavorsStreamReader.Readline() 
CoffeeComboBox.Items.Add(CoffeeFlavorString) 
Loop 
' Close the file . 
FlavorsStreamReader.Close() 

C
ll
i\
1°T
t:
R 
II 
461 
catch ex As Exception 
' File missing. 
ResponseDialogResult = MessageBox.Show('Create a new file?", 
"File Not Found", MessageBoXButtons. YesNo, 
MessageBoxicon.ouestion) 
If ResponseDialogResult = DialogResult .No Then 
' Exit the program. 
Me.Close() 
End If 
End Try 
End Sub 
Private Sub FlavorsForm_FormClosing(ByVal sender As Object, 
ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing 
' Ask the user to save the file. 
Dim ResponseDialogResult As DialogResult 
Dim MessageString As String = "Coffee list has changed. Save the list?" 
If IsDirtyBoolean Then 
ResponseDialogResult = MessageBox.Show(MessageString, "Coffee List Changed" , 
MessageBoxButtons.YesNo , MessageBoxicon.ouestion) 
If ResponseDialogResult = DialogResult.Yes Then 
saveFlavorListToolStripMenuitem_Click(sender, e) 
End If 
End If 
End Sub 
Private Sub saveFlavorListToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles SaveFlavorListToolStripMenuitem.Click 
' Save the flavor list in a file . 
Dim Numberltemsinteger As Integer 
' Open the file. 
Dim FlavorsStreamWriter As StreamWriter = New Streamwriter("Coffees.txt" , False) 
' Save the items in the file. 
Numberitemsinteger = CoffeeComboBox.Items.Count - 1 
For Indexinteger As Integer = o To Numberitemsinteger 
FlavorsStreamWriter.WriteLine(CoffeecomboBox.Items(Indexinteger)) 
Next Indexinteger 
' Close the file. 
FlavorsStreamwriter.Close() 
IsDirtyBoolean = False 
End Sub 
Private Sub ExitToolStripMenuitem Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitToolStripMenuitem.Click 
' End the program. 
Me.Close() 
End Sub 
Private Sub AddCoffeeFlavorToolStripMenuitem_Click(ByVal sender As system.Object, 
ByVal e As System.EventArgs) Handles AddCOffeeFlavorToolStripMenuit em.Click 
' Add a new coffee flavor to the coffee list. 

462 
,. 
S 
l 
\ 
L 
With CoffeeComboBox 
' Test for blank input. 
If .Text<> · · Then 
It 
\ 
s 
' Make sure item is not already on the list . 
Dim ItemFoundBoolean As Boolean 
Dim Itemlndexlnteger As Integer 
Do Until ItemFoundBoolean or Itemlndexlnteger = .Items.Count 
If .Text = .Items(Itemindexinteger) .ToString() Then 
ItemFoundBoolean = True 
Loop 
Exit Do 
Else 
Itemlndexinteger += 1 
End If 
If ItemFoundBoolean Then 
Else 
MessageBox. Show( ' Duplicate item. " , • Add Failed", 
MessageBoxButtons.OK, MessageBoxicon.Exclamation) 
' If it's not in the list, add it . 
. Items.Add( .Text) 
. Text = • • 
IsDirtyBoolean = True 
End If 
Else 
MessageBox. Show( "Enter a coffee flavor to add· , 
'Missing Data', MessageBoxButtons.OK, 
MessageBoxicon.Exclamation) 
End If 
. Focus() 
End With 
End Sub 
Private Sub ClearCoffeeListToolStripMenuitem_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles ClearCoffeeListToolStripMenuitem.Click 
' Clear the coffee list. 
Dim ResponseDialogResult As DialogResult 
ResponseDialogResult = MessageBox.Show('Clear the coffee flavor list?' , 
"Clear Coffee List", MessageBoxButtons.YesNo, MessageBoxicon.auestion) 
If Re.sponseDialogResult = DialogResult .Yes Then 
CoffeeComboBox. Items.Clear() 
IsDirtyBoolean = True 
End If 
End Sub 
Private Sub RemoveCoffeeFlavorToolStripMenuitem_Click(ByVal sender As Object, 
ByVal e As system.EventArgs) Handles RemoveCoffeeFlavorToolStripMenuitem.Click 
' Remove the selected coffee from list. 
With CoffeecomboBox 
If .Selectedlndex <> -1 Then 
.Items.RemoveAt(.Selectedindex) 
IsDirtyBoolean = True 
Else 
MessageBox.Show( ' First select the coffee to remove.", 
' No selection made', MessageBoxButtons.OK, 
MessageBoxicon.Exclamation) 
End If 
End With 
End Sub 

(; 
II 
i\ 
I' 
1' 
1•: 
H 
II 
Private Sub DisplayCoffeecountToolStripMenui tem_Click(ByVal sende r As Object, 
ByVal e As System.EventArgs 
) Handles OisplayCoffeecountToolStripMenuitem.Click 
' Display a count of the coffee list. 
MessageBox.Show("The number of coffee types is " & 
CoffeeComboBox.Items.Count, "R ' n R Coffee Type Count•, 
MessageBoxButtons.OK, MessageBoxicon.Information ) 
End Sub 
Private Sub AboutToolStripMenuitem_Click (ByVal sender As Object , 
ByVal e As System.EventArgs) Handles AboutToolStripMenuitem.Click 
' Display the About form. 
About Form. Show() 
End Sub 
End Class 
l. The My.Computer.F'ileSystem makes it easier to work with data. 
2. A stream object is used to transfer data to and (rom a data file. The 
Stream Writer outputs (writes) the data and the Stream Reader inputs (reads) 
data. 
3. The constructors for a Stream Writer and StreamReader take the name of 
the file. with an optional path. as a parameter. 
4. The Writeline method writes a data line to disk. 
5. A Cl ose method should be used as soon as you are done with the stream. 
Make sure the stream is closed prior to the termination of a program that 
uses streams. 
6. The Peek method looks at the next element. which allows testing for the 
end of the file. The Peek method returns - 1 at the end of file. 
7. List box data may be saved to a file. The Items collection should be filled 
in the Form_Load if the file exists. Any changes are saved back to the file 
~·hen the program terminates. 
8. A Boolean variable is used to track whether changes are made to the data. 
9. The fotm's Form Closing event procedure is a good location for the code to 
prompt tl1e users if they wish to save any chw1ges. 
10. The OpenF'ile Dialog and Save FileDialog components can be used to dis-
play the Open File and Save As dialog boxes and allow the user to select the 
filename. 
Close method 
447 
data file 438 
delimited file 439 
FomiClol!ing event 457 
My.Computer.F'ileSystem 439 
Nothing 452 
OpenFileDialog 450 
Peek method 448 
ReadAllText method 
439 
Readl ine method 448 
stream 
445 
StreamRead€r 445 
463 

464 
S 
l r 
\ 
L 
11 
\ 
s 
C 
Dota Fil~• 
StreamWriter 445 
System.IO namespace 445 
TextFieldParser 442 
Write method 446 
WriteAllText method 439 
WriteLine method 446 
l. Explain how to crente a new object that should have moduJe-level scope 
and be instantiated in a Try I Catch block. 
2. Explain what occurs when a stream object is instantiated. 
3. Name two types of stream classes. What is the difference behveen the hvo? 
4. ·what is the difference betK·een a Write method and a Wri teune method? 
5. What steps are necessary for storing the list items from a list box into a 
disk file? 
6. What is the fonnat for the statements to read and ltTite streams? 
7. What method can be used to detemline the end of(ile? 
8. \\'hen is exception handling necessary for stream handling? 
9. Explain when a form's Fom1Closing event occurs and what code might be 
included in the FonnCiosing event procedure. 
ll.l ReKTite Programming Exercise 8.4 using a ille to store the state names 
and abbreviations. You need two projects: The first will allow the typist to 
enter the state name and the abbreviation in text boxes and store them in 
a file. The second project will perform the lookup functions specified in 
Programming Exercise 8.4. 
Note: Unless you include Open File dialog boxes. copy the file created in 
bin \Debug for the first project into the bin\ Debug folder for the second 
project. 
Note: For help in basing a new project on an existing project. see "Basing 
a New Project on an Existing Project" in Chapter 5. 
Optional extra: Allow the user to select the file to open using the Open 
File dialog box. 
11.2 Create a file for employee information and call it Employee.txl. Each 
record will contain fields for first name. last name. employee number. and 
hourly pay rate. 
Write a second project to proce5s payroll. The application 1\illload the 
employee data into an array of structures from the file with an extra field 
for the pay. 11te form will contain labels for the information from the array 
(display one record at a time) and a text box for the hours worl<ed. 
A button called FindPay will use a For /Next loop to process the array. 
You 1rill calculate the pay and add the pay to the totals. Then display 
the labels for the next employee. (Place the pay into the extra field in the 
array.) 
The Exit button l'ill print a report on the printer and terminate the proj-
ect. (Print the array.) 

C
II
A 
1•1'" R 
II 
Processing: Hours over 40 receive time-and-a-half pay. Accumulate the 
total number of hours worked. the total number of hours of overtime. and 
the total amow1t of pay. 
Sample Report 
/l et> ludustrit>s 
Eu1plo~·ee 
llom·• 
HoUI·!! 
A m o uu l 
Nam e 
Wo1·kcd 
Ovea·tU.ne 
Pay Rate 
Enn1ed 
Janice Jones 
40 
0 
5.25 
210.00 
Chris O'Connel 
35 
0 
5.35 
187.25 
Karen Fisk 
45 
5 
6.00 
285.00 
Tom Winn 
42 
2 
5.75 
247.25 
Totals 
162 
7 
929.50 
Now: Unless you include an Open File dialog. copy the ftle created in the 
bin\Debug folder for the first folder into the bin\Debug folder for the second 
folder. 
Optional Extra: Allow the user to select the file to open using the Open 
File dialog box. 
11.3 Modify Programming Exercise 7.6 to store the list box for Bradley's 
Bagels in a data file. Load the list during the F'onn_Load event procedure 
and then close the me. Be sure to use error checking in case the file does 
not exist. 
ln the FormClosing procedure. prompt the user to save the bagel list 
back to the disk. 
Note: F'or help in basing a new project on an existing project. see "Basing 
a New Project on an Existing Project" in Chapter 5. 
Optional Extra: Allow the user to select the file to open using the Open 
File dialog box. 
11.4 Create a simple text editor that has one large text box (with its Multiline 
property set to Tme) or a RichTextBox control. Set the text control to fiJ] 
the fonn and set its Anchor property to all four edges. so that the control 
[ills the form even when it is resized. 
Allow the user to save the contents of the text box in a data file and 
load a data file into the text box using the Open File dialog box. 
Use a Stream'il'riter and StreamReader or My.Computer.FileSystem. 
WriteAIIText and My.Computer.FileSystem.ReadAifText. 
Hinl : You will need to save multiple lines. 
ll.5 Create a project that stores personal infom1ation for a little electronic 
"black book.'' The fields in the file should include name. phone number. 
pager number. cell phone number. voice mail number. and e-mail ad-
dress. Allo-..· the user to enter the data into text boxes. 
Create a second project to load the names into a list box. Perfom1 a 
"look up'' and display the appropriate information for the selected name. 
Now: Unless you include an Open File dialog. copy the file created in the 
bin\Debug folder for the first folder into the bin\Oebug folder for the second 
folder. 
Optional Ex.tra: Allow the user to select the file to open using the Open 
File dialog box. 
465 

466 
\ 
S 
l 
\ 
L 
ll 
.\ 
s 
C 
DataFi/~, 
Not-e: F'or help in ba.sing a ne~t- project on an existing project. see " Basing a New Project on an Existing Project" 
in Chapter 5. 
l 'll lUaU Ortl~r 
Modify your project from Chapter 7 to save the 
changes to the catalog name combo box from one run 
to the next. When the progrnm begins. load the list 
from the data file. lf the file does not exist. display a 
message asking if the user ~t·ants to create il. 
Allow the user to save changes from a Sav9 menu 
item. 'When the program terminates. check to see if 
there are any unsaved changes. If so. prompt the user 
to save the changes. 
Optional extra: Allow the user to select the file to 
open using the Open File dialog box. 
VB Auto (;entel" I 
Write a project to store vehicle information including 
model. manufacturer. year. and YIN number. 
Create a second project that loads the data from 
the ftle into memory and loads a drop-down combo box 
with the VlN numbers. When a nwnber is selected 
from the combo box. display the appropriate informa-
tion regarding the vehicle in labels. 
Modify your project from Chapter 7 to save the changes 
to the movie combo box &om one run to the next. When 
the program begins. load the list from the data file. lf 
the fsle does not exist. display a message asking if the 
user wants to create it. 
Allow the user to save changes from a Save menu 
item. \lThen the program terminates. check lo see if 
Note: Unless you include an Open File dialog, copy 
the file created in the bin\Debug folder for the first 
folder into the bin\Debug folder for the second folder. 
Optional extra: Allow the user to select the file to 
open using the Open File dialog box. 
there are any unsaved changes. U so. prompt the user 
to save the changes. 
Optional extra: Allow the user to select the file to 
open using the Open Fil9 dialog box. 
Very Very Boartls 
Modify your project from Chapter 7 to save the 
changes to the shirt style combo box from one nm to 
the next. When the program begins. load the list from 
the data file. If the file does not exist. display a mes-
sage asking if the user wants to create it. 
Allow the user to save changes from a Save menu 
item. When the program terminates. check to see if 
there are any unsaved changes. If so. prompt the user 
to save the changes. 
Optional extra: AUow the user to select the file to 
open using the Open Fil9 dialog box. 

D 
A 
p 
T 
E 
R 
OOP: Creating 
Object-Oriented 
Programs 
Use object-oriented terminology correctly. 
2. Create a ht·o-tier application that separates the user interface from the 
business logic. 
!l . Differentiate between a class and an object. 
-t. Create a class that has properties and metl1ods. 
5. Declare object variables and use property procedures to set and 
retrieve properties of a class. 
G. Assign values to the properties with a constructor. 
7 . Instantiate an object in a project using your class. 
8. Differentiate between shared members and instance members. 
9 . Understand tl1e putpose of Lhe constructor and destructor methods. 
Inherit a new class from your own class. 
Use visual inheritance by deriving a form from another form. 

468 
l ' 
C 
OOP: Creating Object-Oriented Programs 
Object-Oriented Prograuuning 
. 
You have been using objects since Chapter l. As you know quite well by now. 
objects have properties and methods and generate events that you can respond 
to (or ignore) if you choose. Up until now, the classes for all objects in your proj-
ects have been predefined; that is. you could choose to create a new object of 
the form class. a button class. a text box class. or any otlter class of control in 
the toolbox. In this chapter you willleam to define your own new class and cre-
ate objects based on that class. 
Object-oriented programming (OOP) is cmTently the most accepted style of 
programming. Some computer languages. such as Java. C#. and SmallTalk. 
were designed to be object oriented (00) from their inception. Other languages. 
such as Visual Basic. have been modified over recent years to accommodate 
OOP. Visual Basic .NET was the first version of Visual Basic to be truly object 
oriented. 
Writing object-oriented programs is a mind-set- a different way of looking 
at a problem and requires an understanding of Object Oriented Design. You 
must think in tenus of using objects. As your projects become more complex, 
using objects becomes increasingly important. 
Objects 
Beyond the many built-in choices you have for objects to include in your proj-
ects. Visual Basic allows you to create your own new object type by creating a 
class. Just like other object types. your class may have both properties and 
methods. Your class can have events too. just like the Click event for the But-
ton class. So remember: Properties are cl1aracteristics, and methods are actions 
that can be performed by a class of objects. 
An object is a thing such as a button. You create a button object from the 
button tool in the toolbox. In other words, button. is a class hut ExitBuuon is an 
actual occunence or instance of the class; the instance is the object. Just as 
you may have multiple buttons in a project, you may have many objects of a 
new class type. 
Defining your own class is like creating a new tool for the toolbox: the 
process does not create the object. only a definition of what that type of object 
looks like and how it behaves. You may then create as many instances of the 
class as you need using the New keyword. Your class may he a student. an em-
ployee. a product, or any other type of object that would be useful in a project. 
Many people use a cookie analogy to describe the relationship of a class 
and an object. The cookie cutter is the class. You can't eat a cookie cutter. but 
you can use it to make cookies: the cookie is the object. When you make a 
cookie using a cookie cutter. you instamiate an object of the cookie class. You 
can use the same cookie cutter to make various kinds of cookies. Although all 
the cookies made will have the same shape. some may be chocolate. others are 
lemon. or vanilla; some may he frosted or have colored sprinkles on top. The 
characteristics of the cookie. such as flavor and topping. are the properties of 
the object. You could refer to the properties of your cookie object as 
Cookie1. Flavor =" Lemon" 
Cookie1 . Topping = "Cream Frosting" 

C 
II 
A 
1• 
'I' 
" 
ll 
12 
What about methods? Recall that a method is an action or behavior-
something the object can do or have done to it. such as Move. Clear, or Print. 
Possible methods for our cookie object might be Eat. Bake, or Crumble. Using 
object terminology. you can refer to Object.Method: 
Cookie1.Crumble 
Sometimes the distinction between a method and an event is somewhat 
fuzzy. Generally. anything you tell the object to do is a method; if the object 
does an action and needs to inform you, that's an event. So if you tell the cookie 
to Ciumble. that is a method; if the cookie crumbles on its own and needs to in-
form you of the fact. that's an event. 
0 hject-Ol'icnle<l Te •·minology 
Key features of an object-oriented language are abstraction. encapsulation. 
inheritance, and polymorphism. 
Ahstraction 
AJ>sll•nction means to CI'entc n model of nn object. for the purpose of deter-
mining the characteristics (properties) and the behaviors (methods) of the ob-
ject. For example, a Customer object is an abstract representation of a real 
customer. and a Product object is an abstract version of a real product. You 
need to use abstraction when planning an object-oriented program, to deter-
mine the classes that you need and the necessary properties and methods. It is 
helpful to think of objects generically; that is, what are the charactelistics of a 
typical product. rather than a specific product. 
Encapsulation 
.Encapsulation refers to the combination of characteristics of an object along 
with its behaviors. You have one "package" that holds the defmition of all prop-
erties. methods. and events. You can think of all of the parts of the package as 
being in a capsule. 
You can witness encapsulation by looking at any Windows program. The 
fotm is actually a class. All of the methods and events that you code are en-
closed within the Class and End Class statements. The variables that you 
place in your code are actually properties of the specific fom1 class that you are 
generating. 
When you w1derstand and use encapsulation successfully. you can imple-
ment data hiding. Each object can keep its data (properties) and procedures 
(methods) hidden. Through use of the Public. Private, Protected, and 
Friend keywords, an object can "expose" only those data elements and proce-
dmes that it wishes to allow the outside world to see. 
lnltcritauce 
Iuhet·itance is the ability to create a new class from an existing class. You can 
add enhancements to an existing class without modifying the original. By creat-
ing a new class that inherits from an existing class. you can add or modify class 
valiallles and methods. For example. each of the forms that you create is inher-
ited from. or detived from. the existing Fonn class. The oliginal class is known 
469 

470 
v 
S 
U 
1\ 
L 
If 
,, 
s 
(' 
OOP: Creating Object-Oriented Programs 
as the base cia§. superclass. or pat·ent class. The inherited class is called a 
sul>class. det·ived class. or child cla.;;s. Of course, a new class can inherit from 
a subclass- that subclass becomes a superclass as well as a subclass. 
You can see the inJ1eritance for a form. which is declared in the form's 
designer. vb file. Show all files in the Solution Explorer. expand the files for 
a form, and open the form's designer.vb file. Look closely at the first line 
of code: 
Partial Class Form1 
Inherits System.Windows .Forms.Form 
The base class is System. Windows.Forms.F' orm. and Form1 is the derived class. 
Inherited classes have an "is a" relationship with the base class. In the form 
example. the new Form1 "is a" Form. 
The real purpose of inheritance is t'ettsabUity. You may need to reuse or 
obtain the functionality from one class or object when you have another similar 
situation. TI1e new Fonn1 class that you create has all of the characteristics and 
actions of the base class, System.Windows.Forms.Form. From there you can 
add the functionality for your own new form. Other classes that you have reused 
multiple times are the Button class and the Text Box class. 
You can create your own hierarchy of classes. You place the code you 
want to be common in a base class. You then create other classes from it. 
which inherit the base class methods. Tlus concept is very helpful if you have 
features that are similar in two classes. Rather than writing two classes that 
are almost identical. you can create a base class that contains the similar 
procedures. 
An example of reusing classes could be a Person class. where you might 
have propetties for name. address. and phone number. The Person class can 
be a base class from which you derive an Employee class. a Customer class. 
or a Student class (Figure 12.1). The derived classes could call shared pro-
cedures from the base class and contain any procedures that are unique to 
the derived class. In inheritance. typically the classes go from general to the 
more specific. 
Person 
-Name 
-Address 
-Pl1uu~ 
I 
I 
Employee 
Cttst.om er· 
Student 
·HireDate 
-PIN 
-supervisor 
-Birtl1Date 
The derived classes inlterit 
front the base class. 

C 
II 
A 
1• 
'I' 
" 
ll 
12 
I' ol ymor·puism 
The term polymorphism actually means the ability to take on many shapes or 
forms. As applied to OOP. polymorphism refers to methods that have identical 
names but different implementations. depending on the situation. For example. 
radio buttons. check boxes. and list boxes all have a Select method. In each 
case. the Select method operates appropriately for its class. 
Polymorphism also allows a single class to have more than one method with 
the same name. When the metJ10d is called. the argument type determines which 
version of the method to use. Each of the identically named methods should per-
form the same task i11 a slightly different manner, depending on the arguments. 
Later in this chapter you will use both overloading a metJ10d and over·-
r·idiug a method to implement polymorphism. You have already seen examples 
of overloading. such as the MessageBox. Show method that gives you several 
argument lists for calling the method. Overriding refers to a method iliat has the 
same signature (name and parameter list) as a method in its base class. The 
metJ10d in t11e subcla~s. or derived class. takes precedence over, or overrides. 
the identically named method in the base class. 
When a derived class overrides a method of its base class. boili methods 
have the same name. But in each case, the actions performed are appropriate 
for the class. For example, a Person class might have a Print method that 
prints an address label with name and address information. But the Print 
method of the Employee class, which overrides the Print method of the Person 
class. might display the employee's ulfonnation, including hire date and super-
visor name. on the screen. 
Re usable Classes 
A big advantage of object-oriented programming over traditional programming 
is the ability to reuse classes. When you create a new class, you can then use 
that class in multiple projects. Each object that you create from the class has 
its own set of properties. This process works just like the built-in VB controls 
you have been using all along. For example. you can create two PictureBox ob-
jects: PictureBoxl and PictureBox2. Each has its own Visible property and Im-
age property. which will probably be set differently from each other. 
As you begin creating classes i11 your projects. you will find many situations 
in which classes are useful. You might want to create your own class to provide 
database access. You could include metJ1ods for adding and deleting data mem-
bers. If you work frequently with sales, you might create a Product class. 1l1e 
Product class would likely have properties such as description, quantity. and cost. 
The methods would probably include finding the current value of the product. 
Developing applications should be like building objects with Lego® blocks. 
The blocks all fit together and can be used to build many different things. 
IVIuhiLiet· Applicatio ns 
A common practice fol' writing professional applications is to write independent 
components that work in multiple "tiers" or layers. Each of the functions of a 
multi tier· application can be coded in a separate component. and the compo-
nents may be stored and run on different machines. 
One of the most popular approaches is a three-tier application. 1l1e tiers in 
this model are the Presentation (or user interface) tier. Busi11ess Services tier. 
471 

472 
l ' 
C 
OOP: Creating Object-Oriented Programs 
and Data tier (Figure 12.2). You also hear the tenn "n-tier" application. which 
is an expansion of the three-tier model. The middle tier. which contains all of 
the business logic, may be written in multiple classes tlmt can be stored and 
lUll from multiple locations. 
Uset• lut.e rfaee 
Business Ohjeet.s 
Fonns, controls. menus 
Validation 
Calculations 
Business logic 
Business rules 
Data Retrieval 
Data storage 
In a multitier application. the goal is to create components that can be 
combined and replaced. If one part of an application needs to change, such as 
a redesign of the user interface or a new database fonnat. the other components 
do not need to be replaced. A developer can simply "plug in" a new user inter-
face and continue using the rest of the components of the application. 
The Presentation tier refers to the user interface. which in VB is the form. 
Consider that in the future the user interface could be redesigned or even con-
verted to a Web page. 
1be Business Services tier is a class or classes tl1at manipulate the data. This 
layer can include validation to enforce business rules as well as the calculations. 
If the validation and calculations are built into the form, then modifying the user 
interface may require a complete rewrite of a working application. 
The Data tier includes retrieving and storing the data in a database. Occa-
sionally an organization will decide to change database vendors or will need to 
retrieve data from several different sources. The Data tier retrieves the data and 
passes the results to the Business Services tier. or takes data from the Business 
Services tier and writes them in the appropriate location. 
Programmers must plan ahead for reusability in today's environment. You 
may develop the business tier for a Windows application. Later the company 
may decide to deliver the application via the Web or a mobile device. such as 
a cell phone or palm device. TI1e user interface must change. but the process-
ing shouldn't have to change. If you develop your application with classes that 
perform the business logic. you can develop an application for one interface 
and easily move it to another platform. 
Classes 
The classes that you have worked with up until now have generated visual 
objects such as text boxes and labels. These were easily created from the 
toolbox at design time. Yon also can create objects at run time. In Chap-
ter ll you instantiated objects of the StreamWriter and StreamReader 
classes. and in Chapter 7 you instantiated objects of the Font class in your 
printing routines. Tn both cases you used tl1e New keyword to instantiate the 
objects. 
l!' ig••••e 1 2.2 
The three-tier model for 
application design. 
I_, IIi I #l 
Before you con refer to most prop-
erties and methods of a class, you 
must instantiate on object of the 
class. The exception is shared mem-
bers, which you will see later in this 
chapter. • 

C
II
,\I>
'I'
I'
R 
12 
Designing Yom· Own Class 
To design your own class. you need to analyze the characteristics and behaviors 
t11at your object needs. The characteristics or properties are defined as vari-
ables. and ilie behaviors (methods) are sub procedures or function procedures. 
For a simple example, assume that you have a user interface (form) that 
gathers the unit price and the quantity of a product. You can design a class to 
perform the calculations. For the class to calculate the extended price. it must 
know the tmit price and the quantity. 'flte form needs to retrieve the extended 
ptice. The price. quantity. and extended p1ice are stored in private variables in 
the class; those variables are accessed ilirough property procedures. 
The fotm 'vill instantiate the class, pass the price and quantity to it through 
property procedures. call a method to calculate the extended price, and then 
display the extended price on the fonn by retrieving it from a property proce-
dure (Figure 12.3). 
Figure .12.3 
A PresenwtWn tier and a Business Services tier. The daw are entered and displ.ayed in the Presentation tier: calcula.tions 
are performed in the Business Services tier. Yon pass in the Title. Quantity. and Unit Price, and then yon can retrieve the 
Extended Plice. 
Presentation Tiel' 
Business Services Tier 
oi} R 'n R Book Sales 
l~tel-l..t3.1 
BookScde claJJs 
File 
Receives as properties: 
Ttle: 
Title 
Quantity 
0\Ji!riity: 
-Price 
Price; 
-
Ptivate calculation methods: 
Extended Price: 
~ 
Returns as a property: 
-
Extended Price 
Cs·ealing Ps·ot>es·ties in a Class 
Inside your class you define private member variables. which store the values 
for the properties of the class. Theoretically. you could declare all variables as 
Public so iliat all other project code could set and retrieve their values. How-
ever. this approach violates the rules of encapsulation t11at require each object 
to be in charge of its own data. Remember t11at you use encapsulation to imple-
ment data hiding. To accomplish encapsulation, you will declare all variables 
in a class as Private or Protected. Protected variables behave as private but 
are available in any class that inherits from this class. As a private or protected 
variable. the value is available only to procedures within the class. the same 
way that private module-level variables are available only to procedures within 
a form's class code. 
When your program creates objects from your class. you will need to assign 
values to the properties. Because the properties are private variables. you will 
473 

474 
,. 
S 
l l 
,\ 
I. 
C 
OOP: Creating Object-Oriented Programs 
use special propetty pmcedures to pass the values to the fields in an instance of 
t11e class and to return field values from the instance. 
Pt·opet·ty Pt·o cedures 
The way that your clas:; allows its properties to be accessed is with accessot· 
methods in a pt·opeJ·ty procedure. TI1e procedure may contain a Get acces-
sor method to retrieve a property value and/or a Set accessor method to assign 
a value to the property. The name t11at you use for the Property procedure be-
comes the name of the property to the outside world. Create "friendly" property 
names t11at describe the property. such as Last Name or EmployeeNumber. You 
do not include the data type as part of a property name. 
The Propet·ty Pl'Ou dure-Geueral Form 
{Private 1 Protected} ClassVariable As DataType ' Declared at the module level. 
(Public) Property PropertyName() As DataType 
Get 
PropertyName = ClassVariable 
or 
Return ClassVariable 
End Get 
Set(ByVal value As DataType) 
(statements, such as validation] 
Classvariable = value 
End Set 
End Property 
The Set statement uses the value keywol'<l to refer to the incoming value 
for the property. Property procedures are public by default. so you can omit the 
optional Public keyword. Get blocks are similar to function procedures in at 
least one respect: Somewhere inside the procedure. before the End Get, you 
must assign a return value to the procedure name or use a Return statement to 
return a value. The data type of the incoming value for a Set must match the 
type of t11e retum value of the corresponding Get. 
The Propet·ty Procedm·e-Example 
~ .............................................................................. .. 
~ 
Private LastNameString As String ' Declared at the module level . 
e 
1-
Property Last Nama() As String 
Get 
Return LastNameString 
End Get 
Set(ByVal value As String) 
LastNaneString = value 
End Set 
End Property 
Remember. the private modu1e-level variable holds the value of the property. 
The Property Get and Set retrieve the cunent value and assign a new value 
to the property. 
Note: lf you do not specify an access modifier. the default is Public. 

C 
II 
A 
1• 
'I' 
" 
ll 
12 
Read-Only Properties 
In some instances. you may wish to have a property that can be retrieved by an 
object but not changed. You can write a property procedure to create a read-
only property: Use the Read Only modifier and write only d1e Get portion of the 
property procedure. Security recommendations are to not include a Set proce-
dure unless one is needed for your application or for class inheritance. 
' Define the property at the module level. 
Private TotalPayDecimal As Decimal 
' The property procedure for a read-only property. 
ReadOnly Property TotalPay() As Decimal 
Get 
Return TotalPayDecimal 
End Get 
End Property 
Wr·ite-Only Pr·o(.ler·ties 
At times you may need to have a property that can be assigned by an object but 
not retrieved. You can create a property block iliat contains only a Set to cre-
ate a write-only property. 
' Private module-level variable to hold the property value. 
Private PriceDecimal As Decimal 
Public WriteOnly Property Price() As Decimal 
Set(ByVal value As Decimal) 
If value >= o Then 
PriceDecimal = value 
End If 
End Set 
End Property 
Class Me th ods 
You create methods of the new class by coding public methods within the class. 
Any methods that you declare with the Private keyword are available only 
within the class. Any methods that you declare with the Public keyword are 
available to external objects created from this class or other classes. 
' Private method used for internal calculations. 
Private Sub CalculateExtendedPrice() 
' Calculate the extended price. 
ExtendedPriceDecimal = Quantityinteger * PriceDecimal 
End Sub 
Consl.r·uclo t·s and Deslruclot·s 
A consu·ucwr· is a method that executes automatically when an object is in-
stantiated. A destructot· is a method that executes automatically when an ob-
ject is destroyed. In VB. the name of a constructor method is New. 
475 

476 
l ' 
C 
OOP: Creating Object-Oriented Programs 
Consu·uctors 
The constructor executes automatically when you instantiate an object of the 
class. Because the constructor method executes before any other code in the 
class. the constructor is an ideal location for any initialization tasks that you 
need to do, such as setting the initial values of variables and properties. 
The constructor must be public or protected because the objects that you 
create must execute this method. 
Note: If a class does not contain a constructor. the compiler creates an im-
plicit method called the default constntctor. The default constructor has an 
empty argument list. 
Ovet'loading the Consu·uctot· 
Recall from Chapter 3 that overloading means that two methods have the same 
name but a different list of arguments (the signature). You can create overloaded 
methods in your class by giving the same name to multiple procedures. each with 
a different argument list. The following example shows an empty constructor 
(one without arguments) and a constructor that passes arguments to the class. 
Sub New() 
1 Empty constructor. 
End Sub 
Sub New(ByVal Title As String, ByVal Quantity As Integer, 
ByVal Price As Decimal) 
I Code statements to assign property values. 
End Sub 
Pm·amete1ized ConMJ'uct.oJ· 
The term parameterized co11stntctor refers to a constructor that requires ar-
guments. This popular technique allows you to pass arguments as you create 
the new object. 
' Instantiate the object and set the properties. 
TheBookSale = New BookSale(TitleTextBox.Text, 
Integer.Parse(QuantityTextBox.Text), 
Decimal.Parse(PriceTextBox .Text)) 
Within the class code, assign the values passed as arguments to the class con-
structor to the properties of the class. This teclmique is preferable to just as-
signing the passed argument to the class-level property variables. since 
validation is often pelfonned in the Set methods. 
Sub New(ByVal Titlein As String, ByVal auantityin As Integer, 
ByVal Pricein As Decimal) 
' Assign property values. 
Title = Titlein 
Quantity = auantityin 
Price = Pricein 
CalculateExtendedPrice() 
End Sub 

C 
II 
A 
1• 
'I' 
" 
ll 
12 
Ct·caling a New Class-Step-by-Ste p 
In this step-by-step exercise. you will create a new class to hold book sale in-
fonnation for R 'n R. 
Begin the P1·ojcct 
A class file is part of a Visual Basic project. so the first step is to create a new 
project. 
STEI' 1: Create a new Windows project called "Chl2SBS" . 
Begin n New Class 
STEI' 1: Select Add Class from the Project menu. The Add New Item dialog box 
~till appear (Figure 12.4) with the Class template already selected. 
Add a new class tc a project in the Add New Item dialcg box. 
_, Commonlterns 
Code 
Add a new class 
Figu1•e 12.4 
Data 
GeMrDI 
Web 
.O.n empty class defin•tion 
Windows l=orms 
Reporting 
Workflow 
WPF 
Online T ~mplatf'S 
~ Module 
:;1~ lmerface 
§'i] Windows Form 
~ User Control 
Common Items 
C.ommonl1ems 
Common Item~ 
Common Items 
Enter the name of the new class 
STEP 2: In the Add New Item dialog box. type "BookSale. vb" for the class name 
and click on Add. You will see a new tab in the Document window for 
the new class. 
Define the Class Propcrtics 
STEP 1: In the Code Editor window. in the line after the Class statement. de-
clare the Private variables. These module-level variables will hold 
the values for the properties of your new class. 
417 

478 
v 
S 
U 
i\ 
I, 
C 
OOP: Creating Object-Oriented Programs 
Private TitleString As String 
Private auantitylnteger As Integer 
Private PriceDecimal, ExtendedPriceDecimal As Decimal 
This class has private module-level variables: 'l'itleString. Quanlitylrlleger, 
PriceOecimai. and ExtendedPriceOecimai (Figure 12.5). Because the variables 
are declared as Private. they can be accessed only by procedures within the 
class module. To allow access from outside the class module, you must add 
property procedures. 
BookSale.vb~ X 
~ orml \h (IJf""'t n 
• 
- Cl (DecbntiGn<) 
f'rlv;ate T!tleStdnR M. String 
Privne OUant1tylnteier AS Inteser 
l
Put>llc cl ass Hook5ol< 
rdvat~ Pr1C~Oecin~l~ t )(te:nctedPriceOecifld AS ~r.in~tl 
End Class 
Atl41 tht• Title Pr·ojtt•r·ty P•·oc·crlur·e 
STEP 1: In the Code Editor window. after the property declarations. type 
"Property Title() As Str ing". Press Enter. 
Note: The srnarl editor takes care of the capiLal izalion of keywords. 
However. the new propelty name that you declare will be capitalized 
exactly as you enter it. You can save a little time by typing the line 
"prope1ty Title() as siTing". 
/lTEI' 2o l.n a change from VB 2008. the Get and Set blocks do not appear au-
tomatically, but you can use a shortcut to generate the statements: On 
the line following the Property statement. type "g" (for "get") or "s" 
(for "set") and press Enter; I he editor will generate the Get and Set 
blocks for you. 
~TIW a: Write the code for the Property procedures. 
Property Title() As String 
Get 
Return T1tl eStri ng 
End Get 
Set(ByVal value As String) 
Titl eStr ing = value 
End Set 
End Property 
Add tbc Quantity Pr.'OJJel'lY l'r:ocedm·e 
STEP 1: On a new I ine after the End Property for Title. type "Property 
Quantity() As Integer" ru1d press Enter. 
STEP 2: Type "g" and press Entel'. 
The Get and Set blocks ,~;u appear. 
STEP 3: Write the code for the Property procedure. 
Fl ,: ur .. ·1 2 . 5 
Declare module-level variable$ 
for the cla~s propertie.s. 
Follow variable naming convenlions, 
for the modu!e-level variable to hold 
the property value; use a friendly 
nome lor the- property nome in the 
Property procedure. • 

C
II
,\I>
'I'
I'
R 
12 
Property Quantity() As Integer 
Get 
Return Quanti tyint eger 
End Get 
Set(ByVal value As Integer) 
I f va lue>= 0 Then 
Quanti t y lnteger = va lue 
End If 
End Set 
End Property 
Notice the code to validate the incoming value in the Set. 
Add tuc l'ric<' Propcr·ty Proccdm·<' 
STEP 1: After the End Property for Quantity. add the property procedure 
for Price. 
STEP 2: Write the code. 
Property Price() As Decimal 
Get 
Retu rn PriceOecimal 
End Get 
Set(ByVal value As Decimal) 
If va l ue>= 0 Then 
PriceOecimal = val ue 
End If 
End Set 
End Property 
Add IU<' Ext<>nd<>d l•t·ic<' Pt•op<>rty Procedm·<' 
STEP 1: After the End Property for Price. add the property procedure for 
ExtendedPdce. 
STEI' 2: Write the code. 
Property ExtendedPrice() As Decimal 
Get 
Return ExtendedPriceDecimal 
End Get 
Set(ByVal value As Decimal) 
If va lue>= 0 Then 
Ext endedPriceDeci mal 
End If 
End Set 
End Property 
\Vrilc tl1e Coru;u·uctor 
val ue 
STEP 1: Following the Ptivate module-level vadables and above the proper1y 
procedures. type in "Public Sub New(fitleln As String, Quantityll1 As 
Integer. Pricel11 As Decimal)" and press Enter. 
Notice that the editor adds the ByVal before each argument. 
The constructor can actually appear anywhere in the code, as long 
as it's inside the class and not inside another procedtue. A good con-
vention is to place the constructors near the top of the class, tight after 
the module-level declarations. 
479 

480 
l ' 
C 
OOP: Creating Object-Oriented Programs 
STEP 2: Type the code for the procedure. 
Public Sub New(ByVal Titleln As String, ByVal auantityln As Integer, 
ByVal Priceln As Decimal) 
' Assign the property values. 
Title = Titlein 
Quantity = auantityin 
Price = Pricein 
CalculateExtendedPrice() 
End Sub 
The call to CalculateExtendedPrice is flagged as an en-or. You will code that 
procedure next. 
Code a Metuod 
You can create methods by adding sub procedw·es and functions for the behav-
iors needed by the class. For this class. you will add a sub procedure to calcu-
late the extended price. which is the price per book multiplied by the quantity. 
Note that if you declare sub procedures and functions with the Public key-
word. the methods are public; if you use the Protected keyword. the methods 
can be executed from the current class or any inherited classes; if you use the 
Private keyword. the methods are private and can be executed only from in-
side the class. 
STEP 1: After the property procedures, type 
"Protected Sub CalculateExtendedPrice" and press Enter. 
Notice that the editor adds the parentheses after the procedure name. 
STEP 2: Type the code for the procedure. 
Protected Sub CalculateExtendedPrice(} 
' Calculate the extended price. 
ExtendedPriceDecimal = auantitylnteger • PriceDecimal 
End Sub 
Add Ceuel'al Remal'ks 
STEP 1: Type the remarks at the top of the file. before the Class declaration 
line. 
' Class Name: 
' Programmer: 
' Date: 
'Description: 
' Folder: 
STEP 2: Save your project. 
The Complete Class Code 
BookSale 
Your Name 
Today•s Date 
Handle book sale information. 
Ch12SBS 
' Class Name: 
' Programmer: 
'Date: 
' Description: 
' Folder: 
BookSale 
Your Name 
Today•s Date 
Handle book sale information . 
Ch12SBS 

C 
II 
A 
1• 
'I' 
" 
ll 
12 
Public Class BookSale 
Private TitleString As String 
Private Quantityinteger As Integer 
Private PriceDecimal, ExtendedPriceDecimal As Decimal 
Public Sub New(ByVal Titlein As String, ByVal Quantityin As Integer, 
ByVal Pricein As Decimal) 
' Assign the property values. 
' Assign the input parameters to the properties by using their 
' property procedures . 
Title = Titlein 
Quantity = Quantityin 
Price = Pricein 
CalculateExtendedPrice () 
End Sub 
Property Title() As String 
Get 
Return TitleString 
End Get 
Set(ByVal Value As String) 
TitleString = Value 
End Set 
End Property 
Property Quantity() As Integer 
Get 
Return Quantityinteger 
End Get 
Set(ByVal Value As Integer) 
If Value >= o Then 
Quantityinteger = Value 
End If 
End Set 
End Property 
Property Price() As Decimal 
Get 
Return PriceDecimal 
End Get 
Set(ByVal Value As Decimal) 
If Value >= o Then 
PriceDecimal = Value 
End If 
End Set 
End Property 
Property ExtendedPrice() As Decimal 
Get 
Return ExtendedPriceDecimal 
End Get 
Set(ByVal Value As Decimal) 
If Value >= o Then 
ExtendedPriceDecimal = Value 
End If 
End Set 
End Property 
Protected Sub CalculateExtendedPrice() 
' Calculate the extended price. 
ExtendedPriceDecimal = Quantityinteger • PriceDecimal 
End Sub 
End Class 
481 

482 
~-
s 
ll -" 
•• 
£ 
OOP: Creating Object-Oriented Programs 
P1·ope rty P1·ocedm·es with Mixed Access Levels 
It is possible to set the Property statement as Public and then to assign either the 
Get or the Set procedure to a more restrictive level such as Friend or Private. 
Privat e Tit leString As String 
Publi c Property Ti t l e() As String 
Get 
Return TitleString 
End Get 
Pri vate Set(ByVal value As String) 
TitleString = value 
End Set 
End Property 
This code allows public access to the Get procedure, but the Set procedure is 
private. TI-tis would work well with our progmms where we cull the Sot only from 
the consbuctor. Remember. if you do not speciJY the access. it defaults to Public. 
Auto-lmpleme nte.:l P1·o pe•·Lies 
A new feature added to VB 2010 simplifies writing property procedures. Using 
auto-implemented pi'Operties. you can declare a new property of a class ~tith­
out writing the Get and Set procedmes. For example. you can enter the following 
line and press Enter. 
Property PersonName As String 
The VB compiler automatically generates a default Get and Set. as well as the 
private (module-level) variable used to store the property value. 
Auto-implemented properties can save coding time for many, but not all. 
properties. You can use auto-implemented properties for any prope11y ~tith both 
a Get and Set that does not require validation for the Set. You must write your 
own property procedmes for ReadOnly and WriteOnly properties. properties 
with mixed access level. and any properties that need validation code for the 
Set. See "Auto-Implemented Properties" in Help for more information. 
l. What js the clifference between an object and a class? 
2. Given the statement 
Private TheProduct As Product 
Is TheProduct an object or class? What about Product? 
3. What actions are performed by the following statement? 
TheProduct.Quantity = Integer .Parse(QuantityTextBox.Text) 
4. Write the property declarations for a class module for a Student 
class that !till contain the properties LastName. FirstName. 
StuueutiD Nu~~tber, anu GPA. Where will these slalelllenls appear? 

C 
II 
A 
1• 
'I' 
" 
ll 
12 
5. Code the Property procedw:e to set and retrieve the value of the 
LastName property. 
6. Code the Property procedure to retrieve the value of the read-only CPA 
property. 
Creating a New Object Using a Class 
Creating a new class defines a new type; it does not create any objects. This is 
similar to creating a new tool for the toolbox but not yet creating an instance of 
the class. 
Generally you will create new objects of your class in a two-step operation: 
first declare a variable for the new object and then instantiate the object using 
the New keyword. Use Dim. Public. or Private to declare the identifier that 
refers to the object of the class. 
Private TheBookSale As BookSale 
This line merely states that the name TheBookSale is associated with the Book-
Sale class. but it does not create an instance of the object. You must use the 
New keyword to actually create the object. 
TheBookSale = New BookSale() 
In Visual Basic it is legal to declare and instantiate an object at the same time: 
Dim TheBookSale As New BookSale() 
lf you will need to use the object variable in multiple procedures. you should 
declare the object at the module level. But when you instantiate an object. you 
may need to include the New statement in a Try /Catch block to allow en·or 
checking. and a Try /Catch block must be inside a procedure. Make sure to en-
close the instantiation in a Try /Catch block if you are conve1ting and passing 
values that a user enters in a text box so that you catch any bad input data. 
The preferred technique is to include the New statement inside of a proce-
dure at the time the object is needed. And if the object is never needed, it won't 
be created needlessly. 
If you do choose to declare the variable and instantiate it at the same time. 
these two statements are equivalent: 
Private TheBookSale As BookSale = New Booksale() 
Private TheBookSale as New BookSale() 
The second statement is a coding shortcut for the first (more complete) statement. 
If you are using a parameterized constructor. you must pass the values for 
the arguments when you instantiate the object. 
Private TheBookSale As BookSale 
' Instantiate the BookSale object and set the properties. 
TheBookSale = New BookSale(TitleTextBox.Text, 
Integer.Parse(OuantityTextBox.Text) , 
Decimal.Parse(PriceTextBox .Text)) 
483 

484 
v 
S 
l l 
,\ 
I. 
C 
OOP: Creating Object-Oriented Programs 
Defining a nd Using a New Object-Sle l>-by-Step 
To continue the step-by-step tutorial for the BookSale class. the next step is to 
design the form for the user interface. The form has text boxes for the user to 
enter the title, quantity. and price; a menu choice to calculate the sale (the ex-
tended price); and another menu item to exit. 
In the Calculate Sale event procedure. you will create an instance of the 
BookSale class and assign the input values for title. quantity. and price to the 
properties of the BookSale object. The Extended.Price property in the BookSale 
class rettieves the amount of the sale. which appears in a ReadOnly text box on 
the fonn. Figure 12.6 shows the completed fonn. 
·~ R 'o ~ Soo~ Sales 
84ended Pllce 
Placing all calculations in a separate class is a good thing. You are seeing 
your first example of dividing a program into a Presentation tier and a Business 
Services tier. 
Creat<' the Form 
This is a continuation of the step-by-step tutorial for this chapter. If the project 
is not still open, open it now. 
STEP 1: Open the Form Designer for Fonnl. Refening to Figure 12.6. create 
the user interface 1vith text boxes for the title. quantity, and price, and 
a Read Only text box for the extended price. Set appropriate properties 
for the form and the controls . 
.STIW 2: Change the fonn name to "SalesForm". 
STEP 3: Create menu items on the File menu for Calculate {2ale. Qfear. and ~t. 
You may want to create keyboard shortcuts for the menu items to sim-
plify testing. 
Add General Rema~·ks 
STEP 1, Type the remarks at the top of the fonu's code. 
Chapter 12 BookSale Step-by-Step 
Your Name 
Today's Date 
The user interface that uses the 
11ew BookSale class; the 
completedfomlfor the step-lry-
step exercise. 
' Program: 
' Programmer: 
'Date: 
'Description: Calculate sales price using the BookSale class. 
' Folder: 
Instantiate TlleBookSale as a new object of the BookSale class. 
Ch12SBS 

C
II
,\I>
'I'
I'
R 
12 
485 
Oeclat·e the New Objt•ct 
STEl' 1: Declare the object variable lll the Declarations section. right under 
the Public Class SalesForm statement. 
' Declare the new object . 
Private TheBookSale As BookSale 
W1·ite t.he Code 
STEI'l : In the CalculateSaleToolStripMenultem_Click event procedure, write 
the cocle to instantiate the .BookSale object. assign the values to the 
properties, calculate the extended price, and assign t11e result to ex-
tendedPriceTextBox. Notice that IntelliSense pops up with the prop-
erties and method of your new BookSale class. 
Private Sub CalculateSaleToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles CalculateSaleToolStripMenultem.Click 
' Calculate the extended price for the sale. 
Try 
' Instantiate the object and set the properties. 
TheBookSale = New BookSale(TitleTextBox.Text, 
Integer.Parse(QuantityTextBox.Text), Decimal.Parse(PriceTextBox.Text)) 
' Calculate and format the result. 
ExtendedPriceTextBox.Text = TheBookSale.ExtendedPrice .ToString( "N") 
Catch ex As Exception 
MessageBox .Show( "Enter numeric data." , "R ' n R Book Sales", 
MessageBoxButtons.OK, MessageBoxicon.Exclamation) 
End Try 
End Sub 
STEJ> 2 : Cocle the ClearTooiStripMenultem_Click procedure. 
Private Sub ClearToolStripMenultem_Clici<(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ClearToolStripMenultem.Click 
' Clear the screen controls. 
auantityTextBox .Clear() 
PriceTextBox.Clear() 
ExtendedPriceTextBox .Clear() 
With TitleTextBox 
. Clear() 
.Focus() 
End With 
End Sub 
STEJ' 3: Cocle the ExitTooLStripMenultem_Click procedure. 
Private Sub ExitToolStripMenultem_Clici<(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles ExitToolStripMenultem.Click 
' Exit the program. 
Me.Close() 
End Sub 
Save Your Work 
STEI' 1, Click the Save All toolbar button to save the project. class. and form. 

486 
v 
s u :\ •. 
Hun tbe Project 
The next step is to watch the project lUll-hopefully without errors. 
STEP 1: Run the program: your form should appear. 
C 
OOP: Creatin.g Object-Oriented Programs 
STEJ' 2: Fill in test values for the title. quantity. and price. Select the Calculate 
Sale menu item. What did you get for the extended price? Is it cor-
rect? Try putting in something other than a number for Quantity. What 
happened when you calculated the sale? 
STEP 3: Stop program execution using the File/Exit menu item. 
Sing iP.-St.P.(l tht> li:xf!mll io n 
If you get an error me>sage or an incorrect answer in the output. you will need 
to debug the project. The quickest and easiest way to debug is to single-step 
program execution. Single-stepping is an interesting exercise. even if you did 
get the right answer. 
To single-step. you need to be in break time. Place a breakpoint on the first 
line in the CalculateSaleToolStripMenuitem_Click procedure (the Try state-
ment). Run the program, enter test values for quantity and price. and select File I 
Calculate Sale. When the program stops at the breakpoint. press the F8 (or Fll) 
key repeatedly and watch each step: you will see execution transfer to the code 
for ihe BookSale class for each prope1ty and for the CalculateExtendedPrice 
method. If an error me>sage halts program execution. point to the variable names 
and property names on the screen to see their current values. 
When the Click event procedm-e finishes, if the form does not reappear. 
you can click on your project's Taskbar button. 
IusL<m ce Val'iables vE>rsus Shat·ed Variables 
The class properties that you have created up to this point belong to each in-
stance of the class. Therefore, if you create two BookSale objects. each object 
has its own set of properties. This is exactly what you want for properties such 
as quantity and price. but what if you need to find a total or count for all of the 
BookSale objects? You don't want each new object to have its own count prop-
erty; there would be nothing to increment. 
The variables and properties that we have declared thus far are called in-
stance variables. or instauce p1·opet-ties. A separate memory location exists 
for each instance of the object. Now we will create sh:u·ecl variables. also 
called shlll·ecl properties. A shared prope1ty is a single variable that exists, or 
is available. for all objects of a class. 
Terminology varies from one OOP language to another. In some languages. 
shared members are called class variables or static variables. Microsoft docu-
mentation refers to instance members and shared members. which include both 
properties and methods. In general. a shared member has one copy for all ob-
jects of the class. and an instance member has one copy for each instance or 
object of the class. Methods also can be declared as shared and are considered 
shared members. 
Another important point is that you can access shared members without in-
stantiating an object of the class. When you display class documentation in MSDN 
Help. shared members display '~ith a yellowS next to the name (Figure 12. 7). You 
must reference these shared members with ClassName. Property or Class-
Name. Method (),whether or not you have instantiated ru1 object from the class. 

C 
II 
A 
1• 
'I' 
" 
ll 
12 
487 
l<'i g n r e 
1 2. 7 
Shared members display in MSD!I' Help with a yellow S. 
Shared member 
\ 
~ 
String Methods ~ndao'\'s Jntemct b:plotcr-
l c::r 113 I.a.! 
Q 0 <> 1@1 httpV)i[2J.O.O.H 78J3/helpJ1/ms,help?melhod=p•g•&•d=METHODS.l:SYIHI •I ~t I X lit:> Sing 
.P . r 
~ 
favori1es 
!l~S.;~;~~¥Eihods 
il -, 
~ · fill •
121 t!i> · Page ,.. 
S:afety • 
Tool~ • 9 • 
) ) 
\ 
. 
~c, •rfl • 
\ 
O.. l 
010\/lfual Studio 
(ii) 
String Methods 
Lib1aryHome 
~.end Feedtlad:. 
Vrtual Studio 2010 
.NET F-ramewo."k .t 
.NET Fro.mtwork a~ss Libr~uy 
The String type exposes the following members. 
System Na-JI\€space 
String C.I<Kt 
Methods 
StriAg Methods 
String.Oon~ Method 
String. Corn pore Metho-d 
Name 
D•scilf'1ion 
String.CompareOrctinal Melflod 
·-
Stnng.CompareT o Method 
,. 
Clone 
Returns a reference to iihis instance of Stnng. 
$tring.Coocat Method 
\ 'X 
String.Contoio'S Mc:thod 
1\,. 
String. Copy Melhod 
Cornpare(SVing. String) 
Compares iWO specifoed String objects and 
Stnng.Copyro Me:hod 
s 
return~ an integer that indicates 1heir relative 
String.End.s\Vith MEthod 
'X 
posiiion in the sort order. 
String.Equdls Mdhod 
String.Fo1mat Method 
~ 
Compare(Stnng, Stnng, 
Compares two spocrfied Stnng objects, ignoring 
Stnng.G.!.1Enumecator Me1hcd 
String.Getl-lashCode Method 
s 
Boolean) 
or honoring their caSQ, and rQturns: ~n int~er 
String.GctTypcCodc: Method 
'X 
lhat ind£cates 1hE.oir n:~la th/~ position in Lhe sort 
String.ICon\'Ertible.ToBoci.Ean MethOd 
order. 
Stnng.IConvertible.ToByte Method 
~ 
Stnng.JCon¥ertib!e.T oChar Method 
Compare(String, String, 
Compares two speclfred String objects using the 
StringJConvc:rtibt:c.T oD~tc Time Method 
s 
SVingComparison) 
specified rules. and retums an integer that 
String.IConvenibfe.ToDecirrti!l Method 
'X 
indicates their refative position in th e sort order. 
String.IConvenibfe. To Double Method 
StnngJConvertibte.f olntl6 Me1hod 
.. 
Compare(String, String. 
Compares two spe-cified String objects, ignoring 
;~!ng.:~onvcrt~~c:.~olnt3~ ~dhod 
., 
o ... 1,.,.. ... r 
~~ 
T < 
..... ~_ .................. -.~,..,,.; .. _ 
... -- .. ·--
l+o ... 
~ 
EJ ir.tc:rnd I Protectc:d Mode: 01'1 
4i · 
ill,l OO% 
~ 
===== 
Creating Sh:u·cd Mcmbcr·s 
Use the Shared keyword to create a shared member. 
Private) Shared VariableName As Datatype 
[Public 
[Public 
Protected 
Protected 
Private) Shared Function FunctionName(ArgumentList) As Datatype 
If we want to accumulate a total of all sales and a count of the number of 
sales for our BookSale class. we need shared properties: 
Private Shared SalesTotalOecimal As Decimal 
Private Shared Salescountlnteger As Integer 
You will want to make these shared properties read-only. so that their 
values can be retrieved but not set directly. The values of the properties are 
accumulated inside the class; each time a new sale is calculated. the ex-
tended price is added to the total sales and the sales count is incremented 
by one. 
I 
I 
I 
I 
I 
I 
;I 
I 

488 
\ 
S 
l 
<\ 
L 
R 
.\ 
S 
Shared ReadOnly Property SalesTotal() As Decimal 
Get 
Return SalesTotalOecimal 
End Get 
End Property 
Shared ReadOnly Property SalesCount() As Integer 
Get 
Return Salescountlnteger 
End Get 
End Property 
(. 
OOP: Creating Objet:J-Oriented Programs 
Note that the Shared keyword on tl1e Private module-level variable makes it 
a shared member and is required: the Shared keyword on the property proce-
dure is optional. You need to use it if you plan to retrieve the property without 
fll'St creating an instance of the class. 
Adding Shan •d Pt·opc rties to the Ste p-by-Step Exm·cise 
You will now make the BookSale class calculate the total of all sales and a 
count of the number of sales. You will need shared properties for the sales total 
and sales count in the class. TI1e11. on the form. you will add a menu option for 
Summary that displays the totals in a message box. 
\dd Share d JlroJw r·tie,; w tbt> Cbs.~ 
lf the chapter step-by-step exercise is not still opeiL open it now. 
:-IF.t' 1: In the BookSale class. add the private module-level declarations for 
SalesTotaiDecimal and SalesCowttlnteger. 
Private Shared SalesTotalDecimal As Decimal 
Private Shared Salescountinteger As Integer 
~n:J• :.!: Add the properly procedures for these two shared read-only 
properties. 
Shared ReadOnly Property SalesTotal() As Decimal 
Get 
Return SalesTotalDecimal 
End Get 
End Property 
Shared ReadOnly Property Salescount{) As Integer 
Get 
Return Salescountinteger 
End Get 
End Property 
Jlodify the Code to Calculate the Totals 
ST EJ> 1: Add a protected procedure for calculating the totals. This method 11ill 
be called inside the class (or any classes that inherit from this class) 
but cannot be called from an object outside the class. 

C 
II 
A 
1• 
'I' 
" 
ll 
12 
Protected Sub AddToTotals() 
' Add to summary information. 
SalesTotalDecimal += ExtendedPriceDecimal 
Salescountlnteger += 1 
End Sub 
STEI' 2: Modify the consb·uctor procedme to call the AddToTotals procedure. 
Public Sub New(ByVal Titleln As String, ByVal auantityln As Integer, 
ByVal Priceln As Decimal) 
' Assign property values. 
Title = Titleln 
Quantity = auantityin 
Price = Priceln 
CalculateExtendedPrice() 
AddToTot al s() 
End Sub 
Modify the Form 
STEP 1: Add a menu item for Fife I Summary to the form. 
STEI' 2: Write the event procedure for SummaryTooiStripMenultem_Click to 
display the sales total and sales count from the properties of the class. 
Use a message box and format the sales total to display dollars and 
cents. Note that you retrieve the shared members of the BookSale 
class without using an instance of the class: Book Sale. Sales Total. 
Private Sub summaryToolStripMenuitem_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles summaryToolStripMenuitem.Click 
' Display the sales summary information . 
Dim MessageString As String 
MessageString = "Sales Total: " & BookSale .Sales Total. ToString( "C") & 
tnvironment .NewlinG & "Sales Count: " & BookSale .Salescount. ToString() 
MessageBox.Show(MessageString, "R ' n R Book Sales Summary" , 
MessageBoxButtons. OK, MessageBoxicon.Information) 
End Sub 
STEI' 3: Test the program. Try entering several sales and checking the totals. 
Also try selecting Summary without first calculating a sale. If the pro-
gram throws an exception. it means that you probably left the Shared 
modifier off the property procedures for the two shared properties. 
D estr·u c to r·s 
If there is special processing that you need to do when an object goes out of 
scope. you can write a Finalize procedure, which is also called a destmctor. 
However. Microsoft recommends against w1iting Finalize procedures unless 
you need to do something special that the system doesn't know how to handle. 
such as closing some types of database connections. 
489 

490 
\ ' 
S 
L 
.\ 
L 
B 
.\ 
S 
C 
OOP: Creating Object-Oriented Programs 
GadJ~e Collectio n 
The garbage collecliou feature of the .NET Common Language Runtime 
cleans up unused components. Periodically the garbage collector checks for 
unreferenced objects and releases all memory and system resources used by 
the objects. If you have 1nitten a Finalize procedure. it executes during 
garbage collection. Microsoft recommends that you rely on garbage collection 
to release resources and not try to finalize objects yourself. Using this tech-
nique. you don't know exactly ~-hen your objects will be finalized. since the 
CLR performs garbage collection on its own schedule. when it needs to recover 
the resources or has .spare lime. 
Inheritance 
When you create a class. the new class can be based on another class. You can 
make the new class inherit from one of the existing .NET classes or from one of 
your own classes. Recall that a form uses inheri lance using the statement 
Partial Class Form1 
Inherits System.Windows.Forms.Form 
The Inherits statement must follow the class header prior to any comments. 
Class NewClass 
Inherits BaseClass 
All public and protected data members and methods of the base class are in-
herited in the derived class. lf you want the derived class to have a different 
implementation for a base-class method. you must write the method in the de-
rived class t1101 overrides the base-class metJ1od. 
In the past you have used the Public. Private. and Friend key~·ords. 
You also can declare elements with tlle Protected keyword. which specifies 
that the element is accessible only within its own class or any class derived 
from that class. Recall that if you leave off the accessibility keyword. it defaults 
to public. 
Cons t•·uctm·s in lnhm·itance 
Although a derived class can inllerit all public and protected metllods. there is 
one exception: A subclass cannot inherit constructors from the base class. Each 
class must have its own constructors. unless the only constructor needed is 
an empty constructor. (Visual Basic automatically creates an empty constructor 
for all classes. so you don't need to write one if that's the only constructor 
that you need.) 

(.; 
II 
1\ 
I' 'I' 
1•: 
II 
12 
\.allill:;! tlw lhsi'-Cla~s Cuns u·twltlr 
Often an inherited class needs to make sure that the constructor for ·the base 
class executes as well as the constructor for the inherited class. You can call 
the base-class constructor with the statement 
MyBase. New() 
You generally place this code in the constructor for the inherited class. before 
any additional statements. 
491 
Sub New(ByVal Titleln As String, ByVal Quantityin As Integer, ByVal Pricein As Decimal) 
' Assign property values. 
' Call the base-class constructor. 
MyBase. New(Titlein, auantityln, Pricein) 
End Sub 
Ovtwridinl! M t•Lho tJ., 
You can create a method with the same name and the same argument list as a 
method in the base class. The new method is said to oveJTide the base-class 
method. The derived class will use the new method rather tJ1an tlle method in 
the base class. 
To override a method in Vis ual Basic. you musl declare the original method 
with the Ovet'l'idable keywunl and declare the new metJwd with th.e Over-
rides keyword. The access modifier for the base-class procedure can be 
Private or Protected (not Public). 
Base Class 
Protected Overridable Sub CalculateExtendedPrice() 
Inherited Class 
Protected Overrides Sub CalculateExtendedPrice() 
In a base class. you can actually use the Overridable. Overrides. or 
MustOverr i de keyword on a method that can be O\'erridden. Use Ove rr idable 
when you are writing a new method tllat has code. Use MustOverride for an 
abstr act method, which is an empty method. Abstract methods are designed to 
be overridden by subclasses and have no implementation of their own. TI1e only 
time that you declare a base-class method •~ith the Overrides keyword is when 
the method is oveniding a method in its base class. 
When you use tJ1e keyword Overridable for a base-class method. in the 
derived class you have the option of using the base-class implementation for 
the method or overriding the method by supplying new code. However. if you 
use the MustOverride keyworrl on a base-class method. the method does not 
have any code; tlle derived class must provide its own code for the method. A 
class that has any method declared as MustOverride is considered an 
a bsu·act dass, which can be used only for inheritance. You cannot instantiate 
objects from a class tl1at contains abstract methocl.s. 

492 
\ ' 
S 
L 
.\ 
L 
R 
.\ 
S 
( ' 
OOP: Creating Object-Oriented Programs 
Accessing P 1·ope•·tie-s 
Your derived class can set and retrieve the properties of the base class by us-
ing the property accessor methods. Usually your derived class needs to make 
use of properties and methods of the base class. You can call the base class 
constructor from the deiived class constructor. which allows you to use the 
property values from the base class. In the follm~ing example. the derived Stu-
dent HookSale class inherits from BookSale. Notice the constructor. which uses 
the My Base. New ( ) statement to call the constructor of the base class. If the 
constructor requires arguments. you can pass the argument values when you 
call the constructor: 
Sub New(ByVal Titleln As String, ByVal ouantityln As Integer, 
ByVal Pricein As Decimal) 
' Assign property values. 
' Call base-class constructor and pass the property values. 
MyBase.New(Titlein, auantityln, Priceln) 
End Sub 
After you have assigned values to the properties of the base class, you can 
refer to the properties in methods in the derived class. In t11e following exam-
ple. the CalculateExtendedPrice method in the derived class uses proper-
ties of the base class by property name. 
• Procedure in the derived class that overrides the procedure in the base class : 
Protected overrides Sub CalculateExtendedPrice() 
' Calculate the extended price and add to the totals. 
DiscountDecimal = Quantity * Price * DISCOUNT_RATE_Decimal 
ExtendedPri ce = Quantity * Price - DiscountDecimal 
DiscountTotalDecimal += DiscountDecimal 
End Sub 
Note that to use base-class properties in the derived class as in t11is example. 
the properties must have both a Get and a Set accessor method. Read-only or 
write-only properties cannot be accessed by name from a derived cl!l.'ls. 
The BookSale class could be considered a generic class, which is appropriate 
for most sales. But now we 1nmt another similar class. but with some differ-
ences. The new class should have all of the same properties and methods of the 
BookSale class. but it1~ill calculate sales witl1 a student discotmt of 15 percent. 
We also want a new shared property in the new class to hold the total of the stu-
dent discounts. 
Our new derived class 11·ill be called StudentBookSale; the base class is 
BookSalc. Figure 12.8 shows the UML diogrnm to indicate the inherited clnss. 
The inherited class automatically has all public and protected properties and 
methods of the base class; in this case. StudentBookSale automatically has six. 
prope11ies and one method. 

C 
II 
A 
I' 
'I' 
t; 
H 
12 
BookSule 
luo.tciiiBO<>kSut<· 
Addinl't' Tnlw •·ita nf'f' l o tlw Step-hy-Stc p Exen·is('l 
This continuation of the chapter step-by-step exercise includes adding a nea· 
subclass class, overriding a method. and adding a new property. 
Add the New Cia"" 
:.TEl' 1: Open your project. if necessary. and select Add Class from the Project 
menu. 
STEI' 2: In the Add New Item dialog. ,,;th 
Class selected. type 
"Student BookSale'" for the class name and clkk on Add. You 11~1l see 
a new tab in the Document window for the new class. 
STEI' 3: Add a new line after the class declaration and type the Inherits 
statement. 
Public Class StudentBookSale 
Inherits BookSale 
You can ignore the a·aming error message: it tells you that this subclass 
must have a constructor, which you ~till do in the next step. 
All of the public and protected properties and methods of the base class 
will be inherited by the subclass. 
Add Lhe Constntctor 
STEI' 1: The subclass must have its own constructors, since constructors are 
not inherited. Write the follo'\\wg code inside the new class: 
Figur e 12.8 
The diagram for a base cla33 
and a derived c~. 
Sub New(ByVal Titlein As String, ByVal auantityin As Integer, 
ByVal Pricein As Decimal) 
' Call the base class constructor. 
MyBase .New(Titlein, ouantityin, Pricein) 
End Sub 
493 

494 
v 
S 
l l 
,\ 
I. 
C 
OOP: Creating Object-Oriented Programs 
Add tbe New PrO()Ct"IY 
STEP 1: Add a module-level variable to hold the value of a new shared prop-
erty for the total of discounts. 
Private Shared DiscountTotalDecimal As Decimal 
STEP 2: Add the property procedure for DiscountTotal. 
Shared ReadOnly Property DiscountTotal() As Decimal 
Get 
Return DiscountTotalDecimal 
End Get 
End Property 
Add a Constant 
STEP 1: Add a constant at the module level to hold the discount rate of 15 
percent. 
Const DISCOUNT_RATE_Decimal As Decimal 
0. 15D 
0 YetTide a l\'lethod 
When you override a method from the base class in an inherited class. the 
method name and the argument list must match exactly. 
STEP 1: Open the BookSale base class in the editor and modify the procedure 
header for CalculateExtendedPrice. 
Protected Overridabl e Sub CalculateExtendedPrice() 
STEJ> 2: In the StudentBookSale inherited class. write the new Calculate-
ExtendedPrice procedure. using the Overrides keyword. 
Protected Overri des Sub CalculateExtendedPrice() 
' Calculate the discount, extended price, and add to the total . 
Dim DiscountDocimal As Docimal 
DiscountDecimal = Quantity • Price • DISCOUNT_RATE_Decimal 
ExtendedPrice = Quantity • Price - DiscountDecimal 
DiscountTotalDecimal += DiscountDecimal 
End Sub 
Modify the Form to U8e t11c lnlJet·ited Class 
STEP 1: Add a check box to the form. named StudentCheckBox, with the Text 
set to "Student". You can set the RightToLeft property to Yes, if 
you want the text to appear to the left of the box (Figure 12.9). Re-
lurange the cunlrub to keep the inpul fieh.b together ami resd the ta!J 
sequence. 
STEP 2: In the form's code editor window, add a module-level variable for an 
object of the new StudentBookSale class. 
Private TheStudentBooKSale As StudentBooKSale 

C 
II 
A 
1• 
'I' 
" 
ll 
12 
495 
F i g nr e 
1 2.9 
a.s_l R 't1 R Book Sales 
Add a Student check box to the 
form. 
!):le: 
Quontity: 
~ce: 
Sudcnl LJ 
STEP 3: Modify the CalculateSaleToo!StripMenultem_Click event procedure to 
create the conect object. depending on the state of StudentCheckBox. 
Try 
If StudentChecKBox.ChecKed Then 
' Instantiate the StudentBooKSale object and set the properties. 
TheStudentBooKSale = New StudentBooKSale(TitleTextBox.Text, 
Integer.Parse(OuantityTextBox.Text), Decimal.Parse(PriceTextBox.Text)) 
' Calculate and format the result. 
ExtendedPriceTextBox.Text = TheStudentBooKSale.ExtendedPrice.ToString( "N") 
Else 
' Instantiate the BooKSale object and set the properties. 
TheBooKSale = New BooKSale(TitleTextBox.Text, 
Integer.Parse(OuantityTextBox.Text), Decimal.Parse(PriceTextBox.Text)) 
· Calculate and format the result. 
ExtendedPriceTextBox.Text = TheBooKSale.ExtendedPrice.ToString( "N") 
End If 
Catch 
' Rest of code for the procedure is unchanged. 
Notice that the code uses the ExtendedPrice property in either 
case. But when StudentCheckBox is checked, the ExtendedPrice of 
the subclass is retrieved; when the check box is not checked, the Ex-
tencledPrice property of the base class is used. Both classes add to the 
shared SalesTotal and SalesCount properties of the base class. which 
will hold the totals for both classes. 
STEP 4·: Modify the SummaryToolStripMenultem_Click event procedure to 
include the discount total. 
MessageString = "Sales Total: " & BooKSale. Sales Total. ToString ( "C") & 
Environment . NewLine & "Sales count: " & BooK Sale. Salescount. ToString () & 
Environment.Newl ine & "Total of Student Di sco unts: " & 
StudentBookSale .Di scountTotal .ToStri ng( "C" I 
STEI' 5: Run the program. Try both student and nonstudent sales; check the 
totals. 
STEI' 6: Close the project. 

496 
\ ' 
S 
L 
,\ 
L 
u .\ 
s 
l' 
OOP: Creating Object-Oriented PrografflJl 
C t·caling a B ase Oass Strictly fo r lnbc t·itatH'C 
Sometimes you may want to create a class solely for the purpose of inheritance 
by two or more similar classes. For example. you might create a Person class 
tl1at you don't intend to instantiate. Instead you will create subclasses of the 
Person class. such as Employee. Customer. and Student. 
For a base class that you intend to inherit. include the Mustlnherit mod-
iller on the class declaration. tt·hich creates an abstract class. In each of the 
methods in the base class that must be overridden. include the Mustoverride 
modifier. The method tJmt must be overridden does not contain any code in the 
base class. 
Base Class 
Mustlnherit Class BaseClass 
Public Mustoverride Sub SomeProcedure() 
' No code allowed here, specifically, no End Sub statement. 
End Class 
Inherited Uao.s 
Class DerivedClass 
Inherits BaseClass 
Public overrides Sub SomeProcedure() 
' Code goes here. 
End Sub 
End Class 
Note: You must build (compile) the base class before using it for an inher-
ited class. 
lnhe t·itin,!.! Fonn Cla,;scs 
Some projects require that you have several forms. You may want to use 
a similar design from one form to the next. You can use visual in]Jeritauce 
by designing one form and then inheriting any other forms from the first 
(Figure 12.10). 
Once you have designed the form that you want to use for a pattern. you 
can add more forms that i.nherit from your design master. caUed your base class. 
Your base class inherits from System. Windows.Forms.Fonn. and your new 
forms inherit from your base class. 
When you design the base class. you can include design elements and 
otJ1er controls, such as labels. text boxes. and buttons. You also can write pro-
cedures and declare variables in the base class. Just as you saw earlier. all pub-
lic and protected procedures and variables are inherited from the base class to 
the sub class. You can write procedures in the base class and specify Over-
ridable or MustOverride. and then in ilie subclass write the identically 
named procedure Kith the Overrides keyword. 
To create an inherited form in your project. first create the base class, 
save, and build the project. You cannot inherit from a form that has not been 
compiled. Then select Project I Add Windows Fonn and type the name of the 

Cll
,\l•
'rEil 
12 
497 
Figur e 
12 . 10 
Creo.w a bose form and inlier it the vimo.l illterfoce to rltlll fonnJ. a. The boJe form: b .. c .. a11d d.. i11herited fon11J. 
i 15 J Bose Form 
R ' n R fOI' Raccline And Raf,.eshm.ant 
a. 
6 k 
J:!dp 
-ill 'n R fo~ Reodill~ and Ref,..,.h,..nt 
b. 
a:l Stfltrrury-
'ft 'n R for laadinj end R•"'-shonant 
c.noct< 2:010 
-
/ MII'Il1!Uoh 
~~=============----
c. 
d. 

498 
\ ' 
S 
U 
\ 
I, 
(' 
OOP: Creating Object-Oriented Progr,ams 
new Windows Form. ln the Solution Explorer, show all files and open the 
designer-generated code file for the form. For example, if your form is called 
Entry Form, the Solution Explorer will have two files: tntryForm.vb and Entry-
Form.Designer.vb. Change the Inherits clause to inl1erit from your base form 
using your project name as the namespace. 
Partial Class EntryForm 
Inherits Ch12Visualinheritance.BaseForm 
Open the new form in the designer and you should see the inl1erited visual 
elements. 
Note: 1l1c Inherits clause can be in either the Fot1nNarne.vb or F'ormName. 
Oesigner.vb file. but not both. Since the designer places the Inherits clause 
in the Designer file. it's best to make the change there. 
FHI'Ilt lnlu' t'itant·•· Exnmrtlt· 
This example ltas three forms that inherit from a base class. The base class has 
an OK button. a picture box, and labels. All forms that inherit from the base 
class will have all of these controls. You cannot delete any of the controls on the 
inherited fonns. but you can make a control invisible. For example. in Main-
Form. the OK button's Visible propCity is set to False. 
The base class has an OkButton_Click event procedure. which can be 
overridden in the sub classes. Note that the OkButton_Click event procedure 
must be declared as Public or Protected to be inherited and overridden in 
derived classes. 
All forms are in the same project, called Chl2Visuallnheritance. 
Make sure to open the Project Designer (Project I ProjectName Properties) 
and set the startup object to the form that you want to appear first. 
Base Form. Designer.vb 
Partial Class BaseForm 
Inherits System.Windows.Forms.Form 
BaseFonn.vb 
Public Class BaseForm 
Public overridable Sub OKButton_ClicK(ByVal sender As system.Object, 
ByVal e As System. EventArgs) Handles OKButton.ClicK 
· Allow inherited classes to overr ide this method . 
Me .Close() 
End Sub 
End Class 
AboutForm.Designer.vb 
Partial Class AboutForm 
Inherits Ch12Visuallnheritance .BaseForm 

C 
II 
,\ 
11 
'I' 
t; 
R 
12 
AboutFonn.vb 
Public Class AboutForm 
' No code needed; event procedure for OKButton is inherited from the base class. 
End Class 
Main Foml. Designer.vb 
Partial Class MainForm 
Inherits Ch12Visuallnheritance.BaseForm 
MainFom1.vb 
Make sure to set this form as the startup object in the Project Designer (Project I 
Projec!NlUTie Properties). 
Public Class MainForm 
Private Sub MainForm_Load{ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MyBase.Load 
' Hide the OK button for this form. 
OKButton. Hide () 
End Sub 
Private Sub AboutToolStripMenultem_ClicK(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles AboutToolStripMenultem.Click 
' Show the About Box. 
AboutForm.ShOWOialog() 
End Sub 
Private Sub summaryToolStripMenuitem_ClicK(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles summaryToolStripMenultem.ClicK 
' Show the Summary form. 
summaryForm.ShowDialog() 
End Sub 
Private Sub ExitToolStripMenultem_ClicK(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitToolStripMenuitem.ClicK 
' Exit the project. 
Me.Close() 
End SUb 
End Class 
SummaryForm. Designer. vb 
Partial Class summaryForm 
Inherits Ch12Visuallnheritance.BaseForm 
SummaryForm.vb 
Public Class summaryForm 
Public overrides Sub OKButton_ClicK(ByVal sender As System.Object, 
ByVal e As System.EventArgs) 
499 

500 
v 
S 
l l 
,\ 
I. 
' override the base class method. 
Me .Hide() 
End Sub 
C 
OOP: Creating Object-Oriented Programs 
Private Sub SummaryForm_Activated(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles Me.Activated 
' Code to retrieve the summary data and fill the form's controls . 
End Sub 
End Class 
Note: If you have problems with creating inherited forms or want further infor-
mation. see the MSDN topics ''Walkthrough: Demonstrating Visual Inheri-
tance" and "Windows .Forms Visual inheritance". 
Coding i'ot· Events of an IJJJJet·ited Class 
When you derive a new form class from an existing form. you often want to 
write code for events of inherited controls. Unfortunately. you can't double-
click on an inherited control and have the event procedure open. as you can 
for most controls. In the previous example of form inheritance. for the 
OkButton_Click event procedure header. we copied the procedme from the 
base class into the derived class and made the modifications. 
Passing Properties between Forms 
In Chapter 6 you learned to pass values among fom1s by declating the variables 
as Friend. Now that you can create your own new properties. you can comply 
with OOP principles and pass data the correct way. For a form's class to be 
properly encapsulated, the only data values visible to other classes should be 
the propetties it exposes. 
As you know, a form is a class. which has properties. You can add proper-
ties to any form by writing propetty procedures that allow other forms to get 
and/or set values. In that way. each fonn's variables are Private, and any val-
ues that you want to pass are properties. 
Passing Values Lo a Sununm·y Fonn 
In this example. based on the hands-on project from Chapter 6. the main form 
(BillingForm) accumulates totals and displays a summary form. The original 
form of the project used Friend variables in BillingForm so SummaryForm 
could retrieve the values. In this improved version. BillingForm has ReadOnly 
properties for the totals. and SummaryFonn retrieves the properties in its 
Form_Activated event procedure. 
The l\lain Fonu 
Here is the code from the top of the main fotm, which is the only section of this 
form's code that is changed. 
'Program Name: 
'Programmer: 
'Date: 
'Description: 
Ch12PassProperties 
Bradley/Millspaugh 
June 2010 
This project is based on Ch06HandsOn. It calculates 

C 
II 
A 
1• 
'I' 
" 
ll 
12 
'Folder: 
'Form: 
the amount due based on the customer selection 
and accumulates summary data for the day . 
This version of the project uses form properties to 
pass values to the summary form, in order to conform 
to OOP principles. 
Ch12PassProperties 
BillingForm 
Public Class BillingForm 
' These Friend variables have been removed and replaced with Private 
variables and property procedures. 
' Friend GrandTotalDecimal, AverageDecimal As Decimal 
' Friend customercountinteger As Integer 
' Declare new module-level variables for the form 's properties. 
Private GrandTotalDecimal, AverageDecimal As Decimal 
Private customercountinteger As Integer 
' Property procedures. 
ReadOnly Property SalesGrandTotal() As Decimal 
Get 
Return GrandTotalDecimal 
End Get 
End Property 
ReadOnly Property SalesAverage() As Decimal 
Get 
Return AverageDecimal 
End Get 
End Property 
ReadOnly Property Salescustomercount() As Integer 
Get 
Return customercountlnteger 
End Get 
End Property 
The Summ:u·y Form 
ln Summary Form you can retrieve the properties of BillingFom1 to display the 
summary data. The form's properties pop up in IntelliSense to make the coding 
extremely easy. 
'Program Name: 
'Programmer: 
'Date: 
'Description: 
'Folder: 
'Form: 
Ch12PassProperties 
Bradley/Millspaugh 
June 2010 
This project is based on Ch06HandsOn . It retrieves 
the summary values from properties of the main form 
instead of from Friend variables. 
Ch12PassProperties. 
summaryForm 
Public Class SummaryForm 
Private Sub SummaryForm_Activated(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MyBase.Activated 
' Get the data from properties of the main form . 
TotalSalesTextBox.Text = BillingForm.SalesGrandTotal.ToString( "C") 
AverageSalesTextBox .Text = BillingForm.SalesAverage.ToString( "C") 
NumbercustomersTextBox .Text = BillingForm.Salescustomercount .ToString() 
SOl 

502 
v 
S 
l l 
,\ 
I. 
C 
OOP: Creating Object-Oriented Programs 
' Removed references to the Friend variables. 
' TotalSalesTextBox . Text = BillingForm.GrandTotalOecimal. ToString ( "C") 
' AverageSalesTextBox . Text = BillingForm. AVerageOecimal. ToString ( "C") 
NumbercustomersTextBox .Text = BillingForm. customercountlnteger.ToString() 
End Sub 
P ass.ing Objects as Pt·ope rLies 
Earlier in this chapter you learned to display summary values from shared 
properties of a class. At times you may need to display the instance properties 
of an object. rather than the shared properties. For example. in the in-chapter 
step-by-step example. perhaps you want to display the details of a single sale 
on a second form. In the main form, SalesForm. you declare an object of the 
BookSale class and calculate a sale. But that object is declared as Private (as 
it should be) and is not available to other forms unless you create a property to 
expose it. 
The following example is based on the BookSale step-by-step exercise. Af-
ter a sale is calculated. a second form displays the details of the sale. The main 
SalesForm needs a ReadOnly property for a BookSale so that the second f01m. 
ViewForm. can retrieve the BookSale object and display its values. 
The Fonu-SalesFonu 
The only changes to the SalesForm are a new Read Only property. called Com-
pletedSale. and a ShowOialog method to display View Form at the conclusion 
of the calculations. 
Public Class SalesForm 
' Declare the new object . 
Private TheBooKSale As BooKSale 
ReadOnly Property CompletedSale() As BooKSale 
Get 
Return TheBooKSale 
End Get 
End Property 
Private Sub CalculateSaleToolStripMenultem_ClicK(ByVal sender As System.Object, 
ByVal e As System. EventArgs) Handles CalculateSaleToolStripMenultem.ClicK 
' Calculate the extended price for the sale. 
Try 
'Instantiate the object and set the properties 
TheBooKSale = New BooKSale(TitleTextBox.Text, 
Integer.Parse(QuantityTextBox.Text), Oecimal. Parse(PriceTextBox.Text)) 
' Calculate and format the result. 
ExtendedPriceTextBox .Text = TheBooKSale. ExtendedPrice.ToString( "N" ) 
ViewForm.ShowDialog() 
Catch ex As Exception 
MessageBox.Show( "Enter numeric data." , "R ' n R BooK Sales", 
MessageBoxButtons .OK, MessageBoxicon. Exclamation) 
End Try 
End Sub 

C
II
,\I>
'I'
I'
R 
12 
The Second Fonu-Viewl'orm 
This fonn must declare an object variable for the BookSale object. It retrieves the 
object from the main fonn through the CompletedSale property and displays the 
individual elements from the object. 
'Project: 
'Programmer: 
'Date: 
'Description: 
Ch12PassObjectAsProperty 
Bradley/Millspaugh 
June 2010 
Retrieve a BookSale from the main form and display 
the elements. 
Public Class ViewForm 
Private ABookSale As BookSale 
Private Sub ViewForm_Activated(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles Me.Activated 
' Retrieve and display the sale figures. 
ABookSale = SalesForm.CompletedSale 
Titlelabel.Text = ABookSale.Title 
ouantitylabel .Text = ABookSale.ouantity.ToString() 
Pricelabel.Text = ABookSale.Price.ToString( "C") 
ExtendedPricelabel . Text = ABookSale. Extended Price. ToString ( "C") 
End Sub 
End Class 
Managing M ulticlass Projects 
This chapter has examples of projects with multiple forms and multiple classes. 
In each case. every class is stored in a separate file. Although you must keep 
form classes in separate files. other classes do not have that requirement. You 
can code multiple classes in one file. 
AtlcJiug <Ill Exi~tlu~ Ci a~~ File Lu <1 P1·uject 
If you have an existing form or other class ftle that you want to include in a pro-
ject. you can choose to reference the file in its original location or move or copy 
it into your project folder. Unless you need to share a class among several proj-
ects. it's best to place the class file into the project folder. After you move or 
copy the desired file into the project folder, add the file to the project by se-
lecting Project I Add Existing Item (or right-click the project name in the Solution 
Explorer and select Add I Existing Item from the context menu). 
Using the Object Browser 
The Object Browser is an important tool for working with objects. The Object 
Browser can show you the names of objects. properties. methods. events. and 
constants for VB objects. your own objects. and objects available from other 
applications. 
503 

504 
v 
s u :\ •. 
C 
OOP: Creatin.g Object-Oriented Programs 
Select View I Object Browser or the Object Browser toolbar button (Figure 
12.11) to open the Object Browser window (Figure 12.12). You can enter an 
item for which to search in the Search box. 
The Object Browser uses several icons to represent items. Notice in Figure 
12.12 the icons that represent prope1ties. methods. events, constants, classes. 
and namespaces. In the lower-right comer of the window you can see a de-
scription of any item you select. 
The Object Browser window; notice the icons to indicate the member type. 
• !.i Bool&lle 
v <1$ Salesform 
b ge Set1inq< 
" ~fiftM@fjffi 
~ IQo B., :.c T 
)'pe~ 
~ ..:tt BookSale 
> (} Chl2SQS3.My 
> {} Ch12SBS3.My.Reso<.nces 
11 {} l\lic1osoft.CSh~ rp 
:> {} 1\licrosoft.VisuaiBasfc 
'" {} Nicrot.oft.VisuaiBasic.ApplicationS rvi• 
9' {} 1\licrosoft.Vi.su~IB.:Jsic.Devices 
" { } Nicrosoft.VisuaiBasic.FileiO 
(} Nicrosoft.VisuaiBasic.l ogging 
!> 0 Nicrosoft.Win32 
{} Nicrosoft.Win3l.SofeHOJndl 
(} S'fstem 
0 9t<tcm.Code0om 
{} ~~~tem.Collections 
? {} S:tstem.Collections.G eric 
~ {} Q!'tem.Collections. 
' I 
Property icon 
Examining VB Classes 
~C ddToTotai>O 
.j 
C.:~lcu lotcExtendcdPriceO 
~ 
DiscountTotaiAs Decimal 
Equals(Object) ~Boolea n 
4:> tquals(Object. Object) As Boolean 
rffj &:tcndedPcicc: A~ Occim41 
<j• FinalizeD 
~ GetHas.:hCodeQ As Integer 
.. GetTypeQ As Syrtem.Type 
<j4 Membc:rwisc:CioncO A~ Object 
,. No\11() 
-=0 Ne\v(String, Integer, DecimaO 
r1? Price: As Oecim~ l 
@' Q.J•ntity As Integer 
_,. ReferenceEquals!Object. Object) A; Boolean 
~ 
):aletCount As Integer 
~ 
S~leslot~l AsOecimol 
!ffi' TitleAsS<ring 
Public Oass Stud~nt~kSale 
lnhEnts ChllSBSl .BookS:alo 
Member of Ch12SBS3 
Description pane 
You can look up the available properties. methods. events, or constants of a Vi-
sual Basic class. You can see which elements are defmed in the cla~s. what is 
the base class. and which properties. methods. and events are inheritecl. Tn Fig-
ure 12.13 notice the entries for System. Windows.Fonns.MessageBox; the over-
loaded constructors appear in the Members list. And in Figure 12.14, you can 
see the constants for MessageBoxButtons. 
l!' i g••••e 1 2. 11 
Open the Object llro-wserfi·om 
the toolbar butt.on. 
F i g ur•e 12. 1 2 

C
II
A
I•'I'
I'R 
12 
Fig111•e 12.13 
Display the members of the System. Wind=s.Forms.MessageBox class. 
r- Constant icon 
/Class icon 
Object Browse.~jx. 
llfovm:; ! Mvholution 
II <Search> I 
~.fo!emge 
- ~~-
L--1-->'~iF'
- Mess~geBo)(Buttons 
uP Messc:geBoxDefaultButton 
rffi Meso.a.geBol<kon 
tfiJ Messt<gc:Boli.Options 
~ 
Mrthodlnvo~er 
~ ~ 
MonthCalendar 
~ 
MonthCa l~nd c:f.HitArea 
I' 4f: MonthCalandar.Hitledlnfo 
GFJ MouscButtons 
o 'U McuseEventArgs 
~ MouseEventHandler 
I> ~ 
Nctivc:Window 
/ Method icon 
I -1 ... ~ -l tl
@l · 
I 
-1~ 
!4 ShoN(String) As System.VIindows.Forms.DialogResult 
G 
:0 Show(Stnng, Stnng) As Sys.tem.Windo\V".Formt.Oia!ogResult 
-'t ShO'N(String, String, Systc:m.WindowsJorms.Me$sogeBoxBu'ct:ons) As Systcm.Window 
.,. ShOIN(String, String, System.Windows.Forms.MessageBo)(futtom, System.Windows.f• 
;t, Show(String, String, Syttem.Windowdorms.MessageBo~s, 
System.Windows.t:• 
~· Show(Strin-g, Stfing, Syston.Windows.Form:s.M:::sSGgc:BoxBurtorn, Syslc:m.Windows.Fo 
,. Show(String. String. Sys,tem.Windows.Forms.Message6o}f3uttons. System.Windows.f• 
,. Sho-N(String, String, System.Windows.Forms.MessageBo><Buttons, Sy;tem.Windows.F• 
~• Sho'IY(S[fing, Sttiog, System.Windows.Forrns.MessageBo:xButtons, System.Wir•dows.F• 
=0 Show(String, String, Sy;:tem .Windovx. Forrns.MessageBo~Buttom, Sydem.Windows.F, ·~ 
·• ShO'N(String, String, Systcrn.Windows.Fomls.Mes~geBoxBottom, Syrlcm.Windows.F• 
~• ShO'N(System.WindowsForms.JWin3l\Vindow, String) AsSystem.WindOYts.Forms.Oia 
;O Sho<N(Syr.tem.Windowi.FormdWin31Window, String, String) As Sy!tem.\Vindows.For 
;. ShO'N(S)'stc:m.Windows.forms.JWin32Window, Siring. String. Sy:slc:m.VIindO'M.fofms 
D ~ 
NavigateEventArgs 
~ NavigateEventHandler 
0 
,. Show(System.Windows.Forms.JWin32Wmdow. Stong. Stnng. System.VIindows.Form; 
'• 
.Shovv(System.W~dows.Fo•ms.JWin32\'hndow, Siring, String, Syrtem.VIindows.Forms 
:t Sho..v(System.Windows.folms.JWio31Window, String, String. SysLem.WindO<Ns.FoimsEJ 
o 'U Nodel•betEditEventArgs 
~ NodelabeiEditEventHandler 
"' 
o <!; Nctilylcon 
1> <U NumericUpOown 
Public Class M•ss.ogeBox 
Member of ~l!llinJlJ!m..~ 
= 
Summ-ary. 
1> ~ 
NumencUpOownAccela•atiOI 
1> <.t: Numc:ricUpOO'A'nAcc~lerdtiOI 
o '1: Opac<yConvener 
<I 
"' 
Inherits Srstem.Q!lim 
8 
G Displays a mess.age box that can contain text, buttons, and symbols that inform 
and instruct the user. 
Fig111•e 12.14 
Display the MessageBoxButtons constants. 
Ob;ect Browser X 
S.owsc: i My Solution 
·! ... ... - l!b l@ · 
I <Search> 
·l~ ;. 
• 'l; MessageBox 
~1 
f.!l AbortRe<rylgne<e 
rfPPfi.!j:$@¥ 
l.iJ OK 
riP Mes~gcBoxDdllultSutton 
G OKCt!nccl 
t.:fJ Messc:geBo:dcon 
r;J R"'rycancel 
riP Mes;cageBolCOptions 
(i) VesNo 
ti" Mc:thodlnvokc:t 
0 Ye:sNoCancd 
o ~ 
MonthC•Iend" 
riJJ MonthCalendar.HitArea) 
1> <U MonthCalendar.Hitlestlnfo 
riP MouseButtons 
(J 
I> "ls MousehcntArgs 
Li MouseEventHandler 
Public Enum Mo.,..,goBoxButton• As Intogor 
. 
to ~ 
Native\\llndow 
Men1ber of System.Windows.Forms 
A 
~ ~ 
NavigctcEvcntArgs 
Summuy: 
1:i.t ~:lliaau:E~entHand !er 
G 
specifi~s constants dE!fining which buttons to display on a 
• I 
I 
Syst~m.Windows.Forms.Mess.ageBox. 
. 
sos 

506 
\ 
S 
L 
\ 
1, 
IE 
_\ 
S 
(' 
OOP: Creatirtg Object-Orii!llted Programs 
Examining Your Own Classe.o. 
You can see your own classes listed in the Object Browser. With the chapter 
step-by-step project open. select your project name in the Object Browser. Try 
clicking on each class name and viewing the list of properties and methods 
(Figure 12.15). 
F l rt u re 1 2. 1 5 
View the prop<'r1ies and methods for your own cla~es. Double-click on an item in the Members list to jump to its definition 
in code. You can control the infonnation to display in the Object Browser by using the Object Browser Settings butt-on. 
Object brow..,r setlinp button 
/ 
Ob}«t Broo.ser X 
llrowoel My Solution 
-1-· .. 
~~~ 
~ <S•arch> 
·Ia -
• 0 ChllSBSl 
I · 
t• AddToTotal>(} 
• <I:I!BI'I 
[!_ 
.,. (alc~ab!Ute.ndedPrtefO 
p 4$ Solel i=OI'm 
~ 
EXtended Price A~ De:cii"\CCI 
b .>n S•tting; 
,;P ExtendedPrice!lecimal 
., ~ 
St\JdaniBcdcSJie 
6 N.w(String.lrrttgtr. OtcirNO 
> CJ B.>e Typo 
~ 
Price As Ottlll\41 
> 0 ChllSBSl.My 
;{I PricoOO<imol 
> () Ch12SBS3.My.REsource~ 
~ 
Quantity As Integer 
> 0 Mia<><oft.CSh.,p 
til Qu•rtil)lntegfl 
"> {) Mtc;ro'~>cft.V~ui.IB.u•c 
~ 
Sals.Count As lntF:9Ef 
> ( J Miao~oft.Vi1u t: IB4sic:..A.ppi.c:Miol 
;# SaloCountlr:kgu 
> () Miaosott.Visu~IBlsi<.Devi<es 
"5f SalesTotal M Decimal 
() Maot:oft.Vituallb_gc.Fileii.O 
,# Sai.-Tob!DKtmal 
> ( ~ Mia05oft.Visu•IS•~c.Logging 
~ 
liU< AI String 
> ( f MICJO<oft.\'lln32 
$1 Tlt.I~St1ing 
> () Moaosoft.\\lin32.SafeHincl<:s 
> 0 S,.Slcm 
~oblic Cl• " Boolcs..lo 
\ 
(> () SyUem.Cottr-Oom 
klher~s ~ste.,o,Q!>iKI 
> (. System.Co:h.Dom.Compile:r 
M~nlbef of tbl2SJIS3 
ill t:; 
-. ' I 
-
• I 
., 
l 
' 
\ 
- ... 
Double chck an e nlry lo JUillp 
lo it• definition in code 
You can use the Object Browser to jump to the definition of any property or 
method by double-clicking on its name in the Members list. This technique is 
also a great way to jump to any of the procedures in your fonns. Select your 
form name in the Objects list and double-click on the name of the procedure 
you want to view. 
Your Hands-On Programming Example 
This progmm must calculate book sales for R 'n R. with a discount of 15 per-
cent for students. The project will use the BookSale and StudentHookSale 
classes developed in the chapter step-by-step. 
Create a project with multiple forms that have a shared design element. In-
clude a main form. an About form. and a summary form that displays the sales 
summary information. 
Design a base form to use for inheritance and make the other three forms 
inherit from the base form. The About form and summary form must have an 
OK button, whjch closes or hides the form. 1l1e main form 11-·ill have menus and 
no OK button. 

C 
II 
1\ 
I' 
T 
t: 
R 
l\1ain Foa"UJ l\l cnu 
file 
.~<alcula te Sale 
Cj_ear 
.§ummary 
!:.lit 
l'l:mni n~ tht> Projt>rl 
1% 
Help 
about 
Sketch a base form for inheritance. a main form. an About form. and a sum-
mary form (Figure 12.16) for your users. The users approve and sign off the 
forms as meeting their needs. 
507 
l<' lgur e 
12 . 1G 
The planning sketch"' of thefonns for the hands-on programming example. a. The base form: h. the main f orm: c. the About 
jimn: and d. the Summary f orm. 
f'>aGeForm --1 
a. 
Malnform 
'\• file 
b. 
IL============]}------~~ 
ComparctNamel.a~el 
\ La~el2 
!:!elp 
R 'n R for Re.sdtne and <:ef're6hment 
.Iltle: I 
guantlty: 1 
I 
frlce: 1 
I 
~tudent 0 
Extended Pt1ce: 1 
I 
n 
I 
OK 
] +--r- Ok:f'>utton 
OK 
I 
TitleTexte>ox 
QuantltyTextf'>ox 
PrfceTextBox 
StudentCheck:Box 
ExtendedPrtce Textf'>ox 

508 
C-
\ 
At:>out Fon11 
Bummaryf0n11 
S 
L 
\ 
I, 
ll 
\ 
s 
R 'n R for Reading and Refn:shment 
By 6r1!1dley and M ll lspau~h 
Version 1.0 
R 'n R for Reading and Refre.:;hment 
(' 
OOP: Creating Object-Orien!ed Program< 
Fl"are 12.16 
(continued) 
OK 
Sales Total: ._I _ _ _  
_, +-------------r- SalesTotaiTextBox 
Sales Count: I 
SalesCountT~tBox 
TotaiStuelent DI6COUnt6< I 
DlscountTotaiTextBox 
n 
OK 

C 
II 
A 
I' 
T 
E 
R 
12 
Plan the Objects and Propertie~ for the Base F'om1 
Ohject 
Pro(>el'l)' 
Setting 
B""eFonn 
Name 
BaoeFonn 
CompanyNameLabel 
Name 
CompanyNameLabel 
Text 
R 'n R for Reading and Refreshment 
OkButton 
Name 
OkButton 
Text 
&OK 
Label2 
Name 
l..abel2 
Size 
250. 4 
Label3 
Name 
Label3 
Size 
300.4 
PictureBoxl 
Name 
PiclureBoxl 
Image 
Coffee.pn£ 
Plan ll1e Procedures for llw Ba:>e Fonn 
Proccdu1··e 
OkButlon_Ciick 
Actions 
(Overridable) 
Cl""" the form. 
Plan the Objects and Propertie~ for the Main F'onn 
Object 
Properly 
MainFonn 
Name 
Text 
Labell 
Name 
Text 
TitleTertBox 
Name 
Label2 
Name 
Text 
Quantity Text Box 
Name 
Label3 
Name 
Text 
PriceTextlk>x 
Name 
StudentCheckBox 
Name 
Text 
RightToLeft 
Label4· 
Name 
Text 
ExtendedPriaeTextBo• 
Name 
Read Only 
TnhStop 
Setting 
Mainform 
R 'n R Book Sales 
Labell 
&Title: 
Title TextBox 
Label2 
&Quantity: 
Quanlii)•TextBox 
Label3 
&Price: 
PriceTextBox 
Student CheckBox 
&Student 
Yes 
Label <I-
Extended Price: 
ExtendedPriceTextBox 
True 
Folse 
509 

510 
s 
l 
\ 
L 
R 
\ 
S 
(" 
OOP: Cnating Object-Orime.d Progra= 
Objerl 
Properly 
Sellin,; 
f ileTooiSiripMenu ltem 
NlliDe 
FileTooiStripMenultem 
Text 
&f il<: 
CalculateSaleTooiStripMenultem 
Name 
CalculateSaleToolStripMenultcm 
Text 
&Calculate Sale 
ClearTooiStripMenultem 
Name 
ClearTooiStripMenultem 
Text 
C&lear 
SummaryTooiSiripMenultem 
Name 
SummaryToolStripMenultem 
Text 
&Summary 
ExitTooiStripMenultem 
Name 
ExitToolSiripMeoultem 
Text 
E&xit 
HelpTooiSiripMenultem 
Name 
HelpTooiSiripMenultem 
Text 
&Help 
AhoutTooiStripMenultem 
Name 
AboutTooiStripMenultem 
Text 
&About 
Pion the Procedures for the Main Fom1 
Procedure 
f orm_Load 
CalculateSaleTooiStripMenultem_Ciick 
ClearTooiStrip~lenultem_Ciick 
SummaryTooiStripMenultem_Ciick 
ExitTooiStripMenultem_Ciick 
AhoutTooiStripMenultem_Ciick 
Ac l-io n"' 
Hide the inherited OK button. 
If student sale then 
Create a StudentBookSale object. 
Calculate and formal the extended price. 
Else 
Create a BookSale object. 
Calculate and format the exlende<l price. 
End If 
Clear the text boxes. 
Uncheck the checl< box. 
Set the focus on first text box. 
Sho~· tl1e Sumllll1ry form. 
End the project. 
Sho~· tl1e About fcnn. 
Plan the Objects and Properties for the About ~'orm 
Object 
Properly 
Setting 
AhoutForm 
Name 
About form 
Text 
About This Program 
OkButton 
Name 
(Inherited) OkButton 
Text 
&OK 
Plan the Procedures for the About F'orm 
Procedure 
A c tiOJl!f 
OkButtoo_ Click 
(No code: inherited from base class) 

C
ll
i\
1°Tt:
R 
12 
Plan I he Objecls and Properties for Lhe ummary F'orm 
Obj ect 
Property 
Selling 
SwnmaryFonn 
Name 
Summary Form 
Text 
Sununary 
Labell 
Name 
Labell 
Text 
Sales Total: 
SalesTota!TextBox 
Name 
Sal...,TotalTextBox 
Read Only 
True 
TabStop 
False 
Lahel2 
Name 
Lahel2 
Text 
Sales Count: 
SalesCount TextBox 
Na.m e 
SalesCountTextBox 
Read Only 
True 
TabStop 
False 
Lahel3 
Name 
Label3 
Text 
Thtal Student Diocounts: 
DiocountTotalTextBolt 
Name 
Di!!CountTotaiTextBox 
ReadO.:dy 
True 
TabStop 
False 
OkBullon 
Name 
Onherited) OkBullon 
Text 
&OK 
Plan Lhe Procedure& for the Summary F'onn 
Procedu1·e 
Form_Aclivated 
OlcBullon_Click 
A c t:iO Jlii 
FiU the form controls. 
(Override the b,.,., class method) 
Hide this form. 
Plan lhe BookSale Object Cla~<s 
Propea1iea 
Declare private module-level variables and write property procedures for all public properties: 
Instance: 
Title 
Quantity 
Price 
Sbare<l: 
Sal~sTotal 
SalesCO<mt 
Me thod• 
Procedure 
ExteodedPrice 
Ac tio ns 
Calculate Extended price = Quantity* Price. 
Add Extended price to Sales Total. 
Add Ito SalesCount. 
Retum Extended price. 
Sll 

512 
' 
S 
l 
\ 
L 
It 
\ 
s 
t: 
OOP: Cnating Object-Oriented Programs 
Plan the SturlentBookSale Object Class 
Inherit from BookSale. 
Add it ionol Pro(l<'rlic• 
Shared: 
DiscoontTotal 
~1etbod~ 
Pr;ore<ln•·e 
Extended Price 
Actio n., 
Calculate Discount= Price* Quantity • Di.counl role. 
Calculate Extended price = Quru1lily * Price- Discount. 
Add Extended price lo SalesTotal. 
Add llo SalesCounl. 
Add Discount to DiscountTotal. 
Return Extended price. 
\\ rite the Project Follow the sketches in Figure 12.16 to create the forms. Cre-
ate the base form first and inherit Lhe other three forms from the base fotm. Fig-
ure 12.17 shows tl1e completed forms. 
t' l g nr e 12.1 7 
Th~J completed forms for th~J hands-on programming e:romple. a. The ba$eform; b. the main form: c. the About form: and 
d. the Summary form. 
a. 
c. 
It 'o R fCf' ~odlog Gfld Refresii,...T 
.. '• • f.,. a....un, and Rcfrortw.c.t 
b. 
. ........ 
it 'n j:l for R..tcading Clnd Rafrc.s:~rncnt 
By Bradley ond MIJI>poU!If\ 
v...,;o, 1.0 
d. 
.. -
... -
~ '• R for Rcodlog Gfld Rcfrcslvneot 
. "' 
w "' a 

C
ll
i\
11
T
E
R 
12 
Sel the project's startup object to the main form. 
Set the properties of each of the objects according to your plan. 
Create the BookSale and StudentBookSale classes, or copy them into your 
project folder and add them to the project. 
Write the code. Working from the pseudocode. write each procedure. 
When you complete the code. use a variety of data to thoroughly test the 
project. 
ThP Projl'cl t:odin;! ~olution 
BaseF'orm 
'Program: 
'Progranvner: 
'Date: 
'Description: 
'Folder: 
Chapter 12 BookSale Hands-on Program 
Bradley/Millspaugh 
June 2010 
Base form for hands-on project. 
Ch12Hands0n 
Public Class BaseForm 
Public Overridable Sub OkButton_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles OkButton.Click 
' Allow inherited classes to override this method. 
End Sub 
End Class 
Mainf'orm 
'Program: 
'Programmer: 
'Date: 
'Description: 
'Folder: 
Chapter 12 BookSale Hands-On Program 
Bradley/Millspaugh 
June 2010 
Calculate sales price using the BookSale and StudentBookSale classes. 
Main form for hands-on project. 
Ch12HandsOn 
Public Class MainForm 
Inherits BaseForm 
' Declare the new objects. 
Private TheBookSale As BookSale 
Private TheStudentBookSale As StudentBookSale 
Private Sub MainForm_Load(ByVal sender As Object, 
ByVal e As system.EventArgs) Handles MyBase.Load 
' Make the OK button invisible on this form. 
OkButton.Visible = False 
End Sub 
Private Sub CalculateSaleToolStripMenuitem_Click(ByVal sender As Object , 
ByVal e As System.EventArgs) Handles CalculateSaleToolStripMenuitem.Click 
' Calculate the extended price for the sale. 
513 

514 
S 
l 
\ 
L 
n 
' 
" 
C 
OOP: Creating Object-Oriented Programs 
Try 
If StudentCheckBox.Checked Then 
• Instantiate the studentBookSale object and set the properties. 
TheStudentBookSale =New StudentBookSale(TitleTextBox.Text, 
Integer.Parse(OuantityTextBox.Text), oecimal.Parse(PriceTextBox.Text)) 
Else 
• Calculate and format the result. 
ExtendedPriceTextBox.Text • 
TheStudentBookSale. ExtendedPrice. ToString ( "N") 
• Instantiate the BookSale object and set the properties. 
TheBookSale = New BookSale(TitleTextBox.Text, 
Integer.Parse(OuantityTextBo~.Text), 
Decimal.Parse(PriceTextBox.Text)) 
Calculate and format the result. 
ExtendedPriceTextBox.Text = TheBookSale.ExtendedPrice.ToString('N") 
End If 
Catch 
IAessageBox. Show( • Error in quantity or price field." , 'R • n R Book Sales •, 
WessageBoxButtons.OK, MessageBoxlcon.Exclamation) 
End Try 
End Sub 
Private Sub ClearToolStripMenultem_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles ClearToolStripMenultem.Click 
• Clear the screen controls. 
ouantityTextBox.Clear() 
PriceTextBox.Clear() 
ExtendedPriceTextBox.Clear() 
StudentCheckBox.Checked = False 
With TitleTextBox 
.Clear() 
.Focus() 
End With 
End Sub 
Private Sub SummaryToolStripMenuitem_Click(ByVal sender As Obj ect, 
ByVal e As System.EventArgs) Handles SummaryToolStripMenuitem.Click 
' Display the sales summary information. 
Summaryform.ShOWOialog( ) 
End Sub 
Private Sub AboutToolStripMenultem_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles AboutToolStripMenultem.Click 
' Display the About form. 
AboutForm.ShowDialog( ) 
End Sub 
Private Sub ExitToolStripMenultem_Click(ByVal sender As Object, 
ByVal e As System. EventArgs) Handles ExitTo·)lStripr.lenultem. Click 
' End the project. 
Me .Close() 
End Sub 
End Class 

C
II
A
I•Tt:
R 
IZ 
AboutForm 
'Program: 
'Programer: 
'Date: 
'Description: 
'Folder: 
Chapter 12 BookSale Hands-on Program 
Bradley/Millspaugh 
June 2010 
Calculate sales price using the BookSale class. 
About form for hands-on project . 
Ch12HandsOn 
Public Class AboutForm 
Public overrides Sub OkButton_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles OkButton.Click 
· override the base class method. 
Me.Close() 
End Sub 
End Class 
SurnmaryFonn 
'Program: 
• Programer: 
'Date: 
'Description: 
'Folder: 
Chapter 12 BookSale Hands-On Program 
Bradley/Millspaugh 
June 2010 
Calculate sales price using the BookSale class. 
summary form for hands-on project . 
Ch12Handson 
Public Class summaryForm 
' Inherits BaseForm 
Public Overrides Sub OkButton_Click(ByVal sender As system.Object, 
ByVal e As System.EventArgs) Handles OkButton.Click 
· override the base class method. 
Me. Hide() 
End Sub 
Private Sub SummaryForm_Activated(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles Me.Activated 
' Display the summary information on the form. 
SalesTotalTextBox.Text ~ BookSale.SalesTotal.ToString("C") 
SalescountTextBox.Text ~ BookSale.Salescount.ToString() 
DiscountTotalTextBox.Text ~ StudentBookSale.DiscountTotal.ToString( 'C") 
End Sub 
End Class 
Book.Sale Clas• 
'Class Name: 
'Programmer: 
'Date: 
'Description: 
'Folder: 
Book Sale 
Bradley/Mi11spaugh 
June 2010 
Handle book sale information. 
Ch12HandsOn 
SIS 

516 
\ 
S 
l 
\ 
L 
It .\ 
.. 
£ 
OOP: Creating Object-Oriented Programs 
Public Class BookSale 
Private TitleString As String 
Private Quantityinteger As Integer 
Private PriceDecimal, ExtendedPriceDecimal As Decimal 
Private Shared Sal esTotalDecimal As Decimal 
Private Shared SalesCountinteger As Integer 
' Parameterized Constructor. 
Sub New(ByVal Titlein As String, ByVal auantityin As Integer, 
ByVal Pricein As Decimal) 
' Assign property values . 
Title = Titlein 
Quantity = auantityin 
Price = Pricein 
CalculateExtendedPrice() 
AddToTotals() 
End Sub 
Property Title() As String 
Get 
Return TitleString 
End Get 
Set(ByVal Value As String) 
TitleString = Value 
End Set 
End Property 
Property Quantity() As Integer 
Get 
Return Quantityinteger 
End Get 
Set(ByVal Value As Integer) 
If Value >= 0 Then 
auantityinteger = Value 
End If 
End set 
End Property 
Property Price() As Decimal 
Get 
Return PriceDecimal 
End Get 
Set(ByVal Value As Decimal) 
If Value >= 0 Then 
PriceDecimal = Value 
End If 
End Set 
End Property 
Property ExtendedPrice( ) As Decimal 
Get 
Return ExtendedPriceDecimal 
End Get 
set(ByVal Value As Decimal) 
ExtendedPriceDecimal = Value 
End Set 
End Property 

I Z 
Shared ReadOnly Property SalesTotal() As Decimal 
Get 
Return SalesTotalDecimal 
End Get 
End Property 
Shared ReadOnly Property salescount() As Integer 
Get 
Return Salescountinteger 
End Get 
End Property 
Protected overridable Sub CalculateExtendedPrice() 
' Calculate the extended price. 
EXtendedPriceDecimal = auantitylnteger * PriceDecirnal 
End Sub 
Protected Sub AddToTotals() 
' Add to the summary information. 
SalesTotalDecimal += ExtendedPriceDecimal 
Salescountlnteger += 1 
End Sub 
End Class 
tudrntBookSale Cla~8 
'Class Name: 
'Programmer: 
'Date: 
'Description: 
'Folder: 
StudentBooKSale 
Bradley/Millspaugh 
June 2010 
Handle booK sale information for student sales, 
which receive a discount. 
Ch12HandsOn 
Public Class StudentBooKSale 
Inherits BookSale 
Const DISCOUNT_RATE_Decimal As Decimal= 0.150 
Private DiscountDecimal As Decimal 
Private Shared DiscountTotalDecimal As Decimal 
Sub New(ByVal Title As String, ByVal Quantity As Integer, 
ByVal Price As Decimal) 
' Assign property values. 
' Call base-class constructor and pass the property values. 
MyBase.New(Title, Quantity, Price) 
End Sub 
Shared ReadOnly Property DiscountTotal() As Decimal 
Get 
Return DiscountTotalDecimal 
End Get 
End Property 
517 

518 
\ ' 
s 
l 
.\ 
l 
l ' 
OOP: CreMing Objut-Orienud Programs 
Protected overrides Sub CalculateExtendedPrice() 
' Calculate the extended price and add to the totals. 
DiscountDecimal = Quantity * Price * DISCOUNT_RATE_Decimal 
ExtendedPrice = Quantity * Price - DiscountDecimal 
DiscountTotalDecimal += DiscountDecimal 
End Sub 
End Class 
l. Objects have properties and methods. and can lligger events. 
2. You can create a new class that can then be used to create ne\\· objects. 
3. Creating a new object is called instanti.ati-11g the class: the object is called 
an instance of the class. 
4. In object-oriented terminology. encapsrdation refers to the combination of 
U1e characteristics and behaviors of an item into a single class definition. 
5. Polymorphism allows different classes of objects in an inheritance hierar-
chy to have similarly named methods that behave diflerently for that par-
ticular object. 
6. inheritance provides a means to derive a new class based on an existing 
class. The existing class is called a base class. superclass, or parent class. 
The inherited class is called a subclass. derived class, or child class. 
7. One of the biggest advantages of object-oriented programming is that classes 
U1at you create for one application may be reused in another application. 
8. Multi tier applications separate program functions into a Presentation tier 
(the user interface). Business Services tier (the logic of calculations and 
validation). and Data tier (accessing stored data). 
9. The variallles inside a class used to store the properties should be private, 
so that data values are access ible only by procedures within the class. 
10. The way to make the properties of a class available to code outside the 
class is to use Property procedures. The Get portion returns t11e value of 
t11e property. and ilie Set portion assigns a value to the property. Validation 
is often perfonned in the Set portion. 
11. Read-only properties are declared with the ReadOnly keyword and have 
only a Get accessor method. Write-only properties are written with the 
WriteOnly keyword and have only a Set accessor method. 
12. The public functions and sub procedures of a class module are its methods. 
13. Using VB auto-implemented properties. it isn't necessary to l>Tite property 
procedures with Get and Set. 
14. To instantiate an object of a class. you must use ilie New keyword on either 
U1e declaration statement or an assignment statement. The location of the 
New keyword detennines when the object is created. 
15. A constructor is a method that automatically executes when an object is 
created: a destructor method is triggered when an object is destroyed. 

C
ll
i\
I'T
E
I& 
12 
16. A constructor method must be named New and may be overloaded. 
17. A parameterized constructor requires argument.s to create a new object. 
18 . Sha1·ed members (properties and methods) have one copy that can be used 
by all objects of the class. generally u.sed for totals and counts. Instance 
members have one copy for each instance of the object. Declare shared 
members with the Shared key~<·ord. 
19. The garbage collection feature periodically checks for unreferenced ob-
jects. destroys the object references. nnd releases resources. 
20. A subclass inherits all public and protected properties and methods of its 
base class. except for the constmctor. 
21. To override a method from a base class. the original method must be de-
clared as overridable or Mustoverride. and the new method must use 
the Overrides keyword. 
22. A base class u.sed strictly for inheritance i.s called an abstract class and can-
not be instantiated. 'JOe cla~s should be declared as Mustlnheri t . and the 
met11ocls that must be overridden should be declared as Mustoverride. 
23. You can use visual inheritance to derive new forms from existing fom1s. 
24. You can use the Object Browser to view classes. properties. methods. 
events. and constants in system classes as well as your own classes. 
abstract class 491 
Abstraction 469 
abstract method 491 
accessor methods 474 
auto-implemented property 482 
base class 470 
child class 470 
class 468 
constructor 475 
derived class 470 
destructor 475 
encapsulation 469 
garbage collection 490 
inheritance 469 
instance 468 
instance property 486 
instance variable 486 
instantiate 468 
multi tier application 471 
Mustlnherit 496 
Mustoverride 491 
object 468 
overloading 471 
overriding 471 
parameterized constmctor 476 
parent class 470 
polymorphism 471 
property procedure 474 
Protected 490 
ReadOnly 475 
reusability 470 
shared property 486 
shared variable 486 
subclass 470 
superclass 470 
value keyword 
474 
visual inheritance 496 
519 

520 
S 
l ' 
\ 
I. 
ll 
\ 
s 
C 
OOP: Creating Obftct-Oriented Programs 
l. What is an object? a property? a method? 
2. What is the purpose of a class? 
3. Why should property variables of a class be declared as private? 
4. What are property procedures and what is their purpose? 
5. Explain how to create a new object. 
6. What steps are needed to assign property values to an object? 
7. What actions trigger the constructor and destiUctor methods of an object? 
8. How can you write methods for a new class? 
9. What is a shared member? How is it created? 
l 0. Explain the steps necessary to inherit a class from another class. 
ll. Differentiate between overriding and overloading. 
12. What is a parameterized constructor? 
13. When might you use the Protected keyword on a constructor? 
14. What is visual inheritance? 
Note: F'or help in basing a ne~· project on an existing project. see "Copy 
and Move Projects" in Appendix C. 
12.1 Modify the program for Programming Exercise 5.1 (the piecework pay) to 
separate the business logic into a separate class. The class should have 
properties for Name and Pieces. as well as shared read-only properties to 
maintain the summary information. 
12.2 Modify Programming Exercise 12.1 to include multiple forms. Create a 
base form that you can use for visual inl1eritance. Display the summary 
infonnation and the Ahout box on separate forms, rather than in message 
boxes. 
12.3 Extra Challenge: Modify Programming Exercise l2.2to have an inherited 
class. Create a derived class for senior workers. who receive 10 percent 
higher pay for 600 or more pieces. Add a check box to the main form to 
indicate a senior worker. 
12.4 Modify Programming Exercise 5.3 (the salesperson commissions) to sep-
arate the business logic into a separate class. The class should have prop-
erties for Name and Sales. as well as shared read-only prope11ies to 
maintain the summary information. 
12.5 Modify Programming Exercise 12.4to include multiple forms. Create a 
base form that you can use for visual inheritance. Display the summary 
information and the About box on separate forms. rather than message 
boxes. 
12.6 Extra Challenge: Modify Programming Exercise 12.5 to have an inherited 
class. Create a derived class for supervisors. who have a different pay 
scale. The supervisor quota is $2.000. the commission rate is 20 percent. 
and the base pay is $500. L1clude a check box on the main form to incli-
cate a supervisor. and calculate separate totals for supervisors. 

C
ll
i\
l•
l 'E
IC 
12 
L2.7 
Modify Programming Exercise 5.2 (the check transactions) to separate 
the business logic from the user interface. Create a Transaction class 
and derived classes for Deposit. Check. and Service Charges. Display 
tlte summary infonuation on a separate form rather than a message box. 
Optional Extra: Use visual inheritance for the forms. 
J 2.8 Modify Programming Exercise 5.4 (the I ibrary reading program) to sep-
arate the business logic from the user interface. Create n class witlt 
properties for Name and Number of Books. Display the summary infor-
mation and About box in separate forms rather than message boxes. 
Optional, Extra: Use visual inheritance for the forms. 
12.9 
Extra Challenge: Modify Programming Exercise 12.8 to have inherited 
classes. Have separate classes and separate totals for elementary. inter-
mediate. and high school. Include radio bullons on the form to select the 
level; display totaJs for all three groups on the Sllmmary. 
12.10 Create a project that contains a class for sandwich objects. Each sand,vich 
object should have properties for Name. Bread. Meat. Cheese. and Condi-
ments. Use a fonn for user input. Assign the input values to the properties 
of the object. and display the properties on a separate form. Hint: Use a 
ReadOnly property on the input fonn to pass the object to the second form. 
12.11 Create a project that contains a Pet class. Each object will contain pet 
name. animal type. breed. and color. The form should contain text boxes 
to enter the information for the pets. A button or menu item should dis-
play the pet information on a separate fom1. Hint: Use a ReadOnly prop-
erty on the input form to pass the object to the second form. 
12.12 Modify the project that you created in Chapter 3 to separate the user in-
terface from the business logic (calculations) and return the results 
I h.rough a property. 
VU Jtl a ll Ord~r 
S21 
Modify your VB Mail Order project from Chapter 5 to 
separate the user interface from the business logic. 
Create two ne~t· classes: one for customer information 
and one for order items. The order item class should 
perform the calculations and maintain the summary 
information. 
Optional extra: Use visual inheritance for the 
forms. 
Add a menu option to rusplay the customer infor-
mation. Display the properties of the Customer object 
on a separate form. Hint: Use a Read Only property on 
the input form to pass the object to the second fom1. 
Display the About box and the summary informa-
tion on forms. mtber than message boxes. 
Need a bigger challenge? Create an inherited 
class for preferred cus tomers. Preferred customers re-
ceive an automatic 5 percent discount on all pur-
chases. Use a check box to determine if the customer 
is a preferred customer and instantiate the appropriate 
class. Maintain and display separate totals for pre-
ferred customen>. 
Note: For help in basing a new project on an exist-
ing project. see "Copy and Move Projects" in Appen-
dix C. 

522 
\ 
s 
l ! 
\ 
•• 
Modify your VB Auto Center project from Chapter 5 to 
separate the business logic from the user interface. 
Create a class for purchases, with properties for each 
of the options. The class method will calculate the 
subtotal. tax. total, and amount due. 
Make the About box display on a separate form. 
rather than a message box. 
Need a bigger clwllenge? Add summary totals for 
the number of sales. the total sales. and the total 
IC 
\ 
S 
l ' 
OOP: Creating Object-Oriented Programs 
trade-ins. Maintain the totals as shared read-only 
properties of the class and display the summary infor-
mation on a separate form. 
Note: For help in basing a new project on an exist-
ing project. see '·Copy and Move Projects'' in Appen-
dix c. 
VIdeo Bonanza 
Modify the Video Bonanza project from Chapter 5 to 
separate the user interface from the business logic. 
Create a class for each rental. Include a property for 
title. Boolean properties for video f01mat. new members. 
price of current item. and membership. and shared read-
only properties for the summary information. 
Display the summary information and the About 
box on forms, rather than message boxes. 
Note: For help in basing a new project on an exist-
ing project. see "Copy and Move Projects" in Appen-
dix c. 
Very Very Boarch 
ModHy the Very Very .Boards project from Chapter 5 to 
separate the user interface from the business logic. 
Create a class for each shirt sale with properties for 
Order Number. Quantity. and Size. Use Boolean prop-
erties for Monogram and Pocket and a method to cal-
culate the price. Maintain shared read-only properties 
for the summary information. 
Display the summary information and the About 
box on forms. rather than message boxes. 
Opt.wnal extra: Use visual inheritance for the 
forms. 
Note: For help in basing a new project on an exist-
ing project. see ''Copy and Move Projects" in Appen-
dix c. 

B 
A 
p 
T 
E 
R 
Graphics, Animation, 
Sound, and 
Drag-and-Drop 
I . Use Graphics methods to draw shapes, lines, and filled shapes. 
2. Create a drawing surface K'ith a Graphics object. 
3 . Instantiate Pen and Brush objects as needed for drawing. 
4. Create animation by changing pictures at mn time. 
5 . Create simple animation by moving images. 
G. Use the Tin1er component to automate animation. 
7. Use scroll bars to move an image. 
8. Add sounds to a project. 
9• Play videos on a folln. 
Incorporate drag-and-drop events into yo11r program. 
Draw a pie chart using the methods of the Graphics object. 

524 
v 
S 
l l 
,\ 
I. 
C 
Graphics. Animation. Sound. 
You had your first introduction to graphics when you learned to print docu-
ments in Chapter 7. In this chapter you will learn to draw shapes, such as lines. 
rectangles, and ellipses. using the methods of the Graphics object. You can use 
the Graphics methods to draw pictures and charts in a business application. 
You will do simple animation by replacing and moving graphics. You also 
will use a Timer component to cause events to fire, so that you can create your 
own animation. 
Graphics in Windows and the Web 
The tenn gmphic.s refers to any text, drawing, image, or icon that you display 
on the screen. You have placed a graphic image in a PictureBox control to dis-
play pictures on your forms. A picture box also can display animated .gif files, 
so you can easily produce animation on the screen. 
You can display a graphics file on either a Web Form or a Windows Form. 
Recall that the Web control is an Image control and the Windows control is a 
PictureBox. Both display graphics files. but the Windows control accepts a few 
more file formats. 
Using Windows Fonns. you can draw graphics shapes such as circles. 
lines. and rectangles on a form or control. TI1e Graphics methods work only on 
Windows F01ms. not Web Forms. Therefore. the programs in the next section 
use Windows Forms only. 
The Graphics Environment 
The .NET Framework uses a technology called GDI+ for drawing graphics. 
GDI+ is more advanced and an improvement over the previous Graphics De-
vice Interface (GDI) used in some earlier versions of VB. GDI+ is designed to 
be device-independent. so that the programmer doesn't have to be concerned 
about the physical characte1istics of the output device. For example. the code 
to draw a circle is the same whether the output goes to a large-screen monitor, 
a low-resolution monitor, or the printer. 
Steps £01· D1·awing G•·al)ltics 
When you draw a picture, you follow these general steps. The sections that fol-
low describe the steps in more detail. 
• 
Create a Graphics object to use as a drawing surface. 
• 
Instantiate a Pen or Brush object to draw with. 
• 
Call the drawing methods from the Graphics object. 
Looking over the steps, you realize that this is what you did for creating 
printer output in Chapter 7. In that chapter you used the DrawString method 
and Drag-and-Drop 

C
ll
t\l•l'
I'
R 
13 
to place text on the Graphics object; in tl1is chapter you will use methods that 
draw shapes. 
T he P aint Event Pt·ocedm·e 
You draw lines and shapes on a form or control by drawing on a Graphics ob-
ject. And where do you place the code for the drawing methods? In the Paint 
event procedure for the form or the control on which you are drawing. 
Each time a window is displayed. resized, moved, maximized. restored. or 
uncovered, the form's Paint event executes. In the Paint event procedure. the 
form and its controls are redrawn. If you draw some graphics on the fonn. in say 
the Form_Load event procedure or the click event of a button. the graphics are 
not automatically redrawn when the form is repainted. The only way to make 
sure d1at ilie graphics appear is to create them in the Paint event procedure. 
Then they are redrawn every I ime the form is rendered. 
So far we have ignored the Paint event and allowed the repainting to pro-
CPP.Il antomatically. Now WP. will placP. coriP in that P.VPnl prncP.IlurP.. Yon can 
write code in the fonn's Paint event procedure to draw on the fonn. or code in a 
control's Paint event procedure to draw graphics on the control. 
In the Paint event procedure. you can use the e. Graphics object or declare 
a Graphics object. You assign the Graphics property of the procedure's 
PaintEvent.Args argument to the new Graphics object. 
Private Sub Form1_Paint(ByVal sender As Object, 
525 
l~ljii:J 
To write code for the form's Point 
event, in the Editor window select 
(FormName Events) from 
the 
Class Name list and then drop 
do¥on the MethOd Name list and 
click on Paint; or, in the Form De-
signer, click on the Events button in 
the Properties window ond double-
click on Paint. • 
ByVal e As System.Windows .Forms.PaintEventArgs) Handles Me. Paint 
' Create a graphics object. 
Dim GraphicsObject As Graphics = e . Graphics 
You also can create a graphic object by calling the CreateGraphics 
method of a f01m or control. You would use this method when you want to dis-
play a graphic from a procedure other than the Paint event. 
' Draw on the form. 
Me.CreateGraphics.DrawMethoo 
' Draw on a control. 
GroupBox1 . CreateGraphics .DrawMethod 
Pe n and Bt·ush Objects 
Using a Peu object you can draw lines or outlined shapes such as rectangles 
or circles. A Bntsh object creates filled shapes. You can set the width of a 
Pen and the color for both a Pen and a Brush. ·Figure 13.1 shows some lines 
and shapes created with Pen and Brush objects. 
When you create a new Pen object, you set the color using the Color con-
stants. such as Color.Red. Color.Blue. and Color.Aquamarine. You also can set 
the pen's width, which is measured in pixels. The term pixel is an abbreviation 
of pictrue element-a dot that makes up a picture. You are probably most famil-
iar with pixels in d1e determination of the resolution of a monitor. A display of 
1.280 by 1,024 is a reference to the number ofpixels horizontally and vertically. 
You con use the form's Refresh 
method to loroe a Paint event to 
occur. • 

526 
\ ' 
S 
U 
A 
I. 
li<:' UUIW1"9~ 
~ 
l_l 
e 
The Pen Class--Coustruetot·s 
~ = Pen(Color) 
~I 
~ ~ 
Pen(Color, Width) 
If you don't set the width of the pen, it defaults to one pixel. 
The Pen Class-Exruul>les 
(: 
Graphics. A11imation.. SCJU~~d, 
and Drag-a11d-Drop 
Graphic shapes created by 
drawing with Pen and Brush 
object.s and the methods of the 
Graphics class. 
~ r-----------------------------------------------------------~ 
e Dim RedPen As New Pen(Color.Red) 
~ Dim WidePen As New Pen(Color.Black, 10) 
~ ~ .................................................... .. 
You may find that you want several different pens. For each different color or 
line width. you can create another Pen object or redefine an already dimen-
sioned Pen vatiable jf you are finished with it. 
If you want to create filled figures. declare Brush objects-one for each 
different color that you w1111t to use. 
The SoUd Lh·usll Cla.~Cot15 1l'U Ctol' 
"'!1(."'5 
~ tl SolidBrush(Color) 
Use the Color constants to assign a color to your Brush objects. 
• 
~ r---------------------------------------------------------------... 
;.< S Dim BlueBrush As New SolidBrush(Color .Blue) 
'2.. 
~ ~--------------------------------.... 
You may have deduced from the name of the Solid Brush class that other types 
of bmshes exist. See Help if you are interested in using a Texture Brush. Hatch-
Brush. LinearGradientBrush, or PathGradientBrush. 

C 
II 
A 
1• 
'I' 
" 
ll 
13 
T he Co01·dinah• System 
Graphics are measured from a starting point of 0.0 for the X and Y coordinates 
begiruling in the upper-left comer. The X is the horizontal position. and the Y is 
the vertical measurement. The starting point depends on where the graphic is 
being placed. If the graphic is going directly on a fonn. the 0,0 coordinates are 
the upper-left comer of the form. below the title bar and menu bar. You also can 
draw graphics in a container. such as a PictureBox. GroupBox. or Button. In 
this case. the container has its o'm 0,0 coordinates to be used as the starting 
point for measuring the location of items inside the container (Figure 13.2). 
0,0~.---------------, 
o.o-.0 
Each of the drawing methods allows you to specify the starting position us-
ing X and Y coordinates. Most of the methods also allow you to specify the posi-
tion using a Point structure. In some methods it is useful to use a Rectangle 
structme. and in others a Size structure comes in handy. 
Tbe Poim Su·ucttu·e 
A Point su·ucuu·e is designed to hold the X andY coordinates as a single w1it. 
You can create a Point object. giving it values for the X and f. Then you can use 
the object anywhere that accepts a Point as an argument. 
Dim MyStartingPoint As New Point(20, 10) 
You can see an example of a Point in the design of any of your forms. Ex-
amine the Location property of any control: the Location is assigned a Point ob-
ject. with X andY properties. 
Tbe Size Su·uctm·e 
A Size su·ucuu·e has two components. the width and height. Both integers 
specify the size in pixels. Some Graphics methods accept a Size structure as an 
argument. 
527 
l<' igu•• e 13 . 2 
The coordinates for graphics 
begin with 0.0 in the upper-left 
corner of a form or container. 
Dim MyPictureSize As New Si ze(100, 20) ' Width is 100, height is 20. 
You also can see an example of a Size structure by examining the design of 
any of your forms. Each of the controls has a Size property, which has width and 
height properties. 
For an interesting exercise. examine the automatically generated code for 
a Button control in the FormName.Designer.vb file. The button's Location is set 
to a new Point object. and the size is set to a new Size object. 

528 
v 
S 
l l 
,\ 
I. 
C 
Graphics, Animation, Sowul. 
and Drag-and-Drop 
TJ1e llcctaugle Su·n.-turc 
A Rectangle sU'Uetm·e defines a rectangular region. specified by its upper-
left corner and its size. 
Dim MyRectangle As New Rectangle(MyStartingPoint, MyPictureSize) 
The overloaded constructor also allows you to decla1·e a new Rectangle by 
specifying its location in X and Y coordinates and its ~tidth and height. 
Dim MyOtherRectangle As New Rectangle(XInteger, Ylnteger, Widthlnteger, Heightlnteger) 
Note that you also can create Point. Size. and Rectangle structures for 
single-precision floating-point values. Specify the PointF. SizeF. and RectangleF 
structures. 
Gt·aphics Methods 
The drawing methods fall into two basic categories: draw and fill. The draw 
methods create ru1 outline shape and the 1ill methods are solid shapes. The first 
argument in a draw method is a Pen object; the fill methods use Brush objects. 
Each of the methods also requires the location for the upper-left comer. which 
you can specify as X andY coordinates or as a Point object. Some of the meth-
ods require the size, which you may supply a~ width and height. or as a Rect-
ruJgle object. 
Graphics Methods-General Forms 
~ 
c 
DrawLine(Pen, X1Integer, Y1Integer, X2Integer, Y2Integer) 
~ 
Drawline(Pen, Point1, Point2) 
~ 
1-.;11 i I #l 
Rather than declaring a Pen or 
Brush, you can type Pens . color 
or Brushes. color directly in 
your Graphics method. You must de-
clare the Pen or Brush object if you 
want to change the width. • 
~ DrawRectangle(Pen, XInteger, ¥Integer, Widthinteger, Heightinteger) 
~ 
DrawRectangle(Pen, Rectangle) 
FillRectangle(Brush, XInteger, ¥Integer, Widthinteger, Heightinteger) 
FillRectangle(Brush, Rectangle) 
FillEllipse(Brush, XInteger, ¥Integer, Widthinteger, Heightinteger) 
FillEllipse(Brush, Rectangle) 
The following code draws the outline of a rectangle i11 red using the 
DrawRectangle method and draws a line with the Drawline method. The 
FillEllipse method is used to draw a filled circle. 
Private Sub GraphicsForm_Paint(ByVal sender As Object, 
ByVal e As System.Windows .Forms.PaintEventArgs) Handles Me.Paint 
With e.Graphics 
' Draw a red rectangle. 
'.DrawRectangle(Pens.Red, 10, 10, 30, 30) 
'or 
Dim SmallRectangle as New Rectangle(10, 10, 30, 30} 
.DrawRectangle(Pens.Red, SmallRectangle) 
' Draw a green line . 
. Drawline(Pens.Green, 50, o, 50, 300) 

C 
II 
A 
1• 
'I' 
" 
ll 
13 
' Draw a blue filled circle. 
' If the width and height are equal, then the FillEllipse method 
' draws a circle; otherwise it draws an ellipse . 
. FillEllipse(Brushes.Blue, 100, 100, so, 50) 
' Draw a fat blue line . 
. Drawline(New Pen(Color.Blue, 15) 1 3001 o, 3001 300) 
End With 
End Sub 
Table 13.1 shows some of the methods in the Graphics class. 
Selected l\fethods fr·om the Gr·apbics Class 
!Uethoo 
Cl ear(Color) 
Tabl .-
1 3. 1 
Purprue 
Clear the drawing surface by setting it to the 
specifi.ed color. 
529 
Dispose() 
Release the memory used by a Graphics object. 
DrawArc(Pen, X1Integer, Y1Integer, X2Integer, Y2Integer, 
Widthinteger, Heightinteger) 
DrawArc(Pen, Rectangle, StartAngleSingle, 
AngleLengthSingle) 
Drawline(Pen, X1Integer, Y1Integer, X2Integer, Y2Integer) 
Drawline(Pen, Point1, Point2) 
DrawEllipse (Pen, X Integer, ¥Integer, l'lidthinteger, 
Height Integer) 
DrawEllipse(Pen, Rectangle) 
DrawRectangl e (Pen, X Integer, ¥Integer, Widthinteger, 
Helg/Jtinteger) 
DrawRect angle(Pen, Rectangle) 
DrawPie (Pen, X Integer, ¥Integer, Widthinteger, 
Heightinteger, AngleStartinteger, AngleLengthinteger) 
DrawPie(Pen, Rectangle, AngleStartSingle, 
AngleLengthSingle) 
DrawSt ri ng (Text String, Font, Brush, XSingle, 
DrawString(TextString, Font, Brush, PointF) 
YSingle) 
Fi llEllipse(SolidBrush, XInteger, ¥Integer, Widthinteger, 
Height Integer) 
Fi llEl l i pse(SolidBrush, Rectangle) 
FillPie(Brush, XInteger, ¥Integer, Widthinteger, 
Heightinteger, AngleStartinteger, AngleLengthinteger) 
FillPie(Brush, Rectangle , AngleStartSingle, 
AngleLengthSingle) 
Fi llRectangle(SolidBrush, XInteger, ¥Integer, 
Widthinteger, Heightinteger) 
FillRectangle(SolidBrush, Rectangle) 
Draw an arc (segment of an ellipse). 
Draw a line from one poh1t to another. 
Draw an oval shape. A circle has equal ";dth 
and height. 
Draw a rectangle. 
Draw a partial circle (segment of a pie). 
Draw a string of text. Note that coordinates are 
single-precision. 
Draw a filled oval: a circle for equal width and 
height. 
Draw a prutial filled oval (segment of a pie). 
Draw a filled rectangle. 

530 
l ' 
C 
Graphics. Animation, Sound, 
There are a number of other draw and fill methods. like Drawcurve. Draw-
Lines. DrawPath. FillClosedCurve. FillPolygon. and so forth. See Help 
for all the draw and fill methods. 
Random Numbers 
Often it is useful to be able to generate random numbers. The J~ audom class 
contains various methods for returning random numbers of different data types. 
A Random object is popular for use in games. as well as problems in probabil-
ity and queuing the01y. 
Dim GenerateRandom As New Random() 
Unfortunately. the computer can't really generate random numbers. Each time 
you run an application. the Random object produces the identical sequence of 
"random" numbers. To generate a different series for each run. use an integer 
value when you instantiate an object. from the Random class. This is called 
seeding the random number generator. You can use the sy>tem date and time to 
get a different seed for each execution of the code. 
· Instantiate and seed the random number generator. 
Dim GenerateRandom As Random = New Random(DateTime.Now. Millisecond) 
You seed the Random object once when you instantiate it and generate the 
random numbers using the Random object's Next method, which returns a 
positive integer number. You can use one of three overloaded argument lists to 
choose the range for the random numbers. 
The R:mdom.Nexl ~lethod-Cent'ml Forms 
and Drag-at•d-Drop 
~·.--------------------------------------------------------------. 
t!> ; 
e.. 
~ 
e e 
"' 
L 
' Any positive integer number. 
Object. Next() 
' A positive integer up to the value specified. 
Qbject.Next(MaximumValueinteger) 
' A positive integer in the range specified. 
Object.Next(MinimumValueinteger, MaximumValueinteger) 
Tlw Raudom.Next MNhod- ExmUJll<'s 
~ P-------------------------------------------------------------.. 
"' § 
'0 f 
' Return an integer in the range 0 - 10. 
GeneJ·ateRandomlnteger = GenerateRandom. Next( 1 0) 
' Return an integer in the range 1 to the width of the form. 
RandomNumberlnteger = GenerateRandom.Next(1, Me.Width) 
A llandom Numbet• Example 
This example program draws graphics using the Graphics methods and gener-
ates snowflakes using the Random. Next method. Figure 13.3 shows the screen 
generated by this code. 

C 
II 
A 
1• 
'I' 
" 
ll 
13 
531 
Fi g ur e 
J 3 . 3 
This output is produced by 
the Ch13RandomNumbers 
example program. The 
program draws the figure and 
generates random snowflakes 
in the forms Paint event 
ha.ndler. 
'Program: 
'Programmer: 
'Date: 
'Description : 
Chapter 13 Random Numbers 
Bradley/Millspaugh 
June 2010 
Draw a snowman using filled ellipses and then snow using 
random locations. 
'Folder: 
Ch13RandomNumbers 
Public Class GraphicsForm 
' Declare module -level variable. 
Private GenerateRandom As Random = New Random(DateTime.Now.Millisecond) 
Private Sub GraphicsForm_Paint(ByVal sender As Object, 
ByVal e As System.Windows.Forms.PaintEventArgs 
) Handles MyBase.Paint 
' Generate dots (snowflakes) in random locations. 
' Draw a snowman at the bottom center of the screen . 
Dim xlnteger As Integer = Convert.Tolnt32(Me .Width 1 2) 
Dim ylnteger As Integer = Convert.Tolnt32(Me.Height 1 2) 
Dim Indexinteger As Integer 
Dim WhitePen As New Pen(Color.White, 2) 
With e .Graphics 
' Draw the snowman . 
. FillEllipse(Brushes.White, xlnteger, yinteger, 100, 100) 
' Top of last circle. 
ylnteger -= 80 
' Offset for smaller circle. 
xinteger += 10 
.FillEllipse(Brushes.White, xinteger, yinteger, 80, 80) 
yinteger -= 60 
xinteger += 8 
.FillEllipse(Brushes.White, xinteger, ylnteger, 60, 60) 
' Add a top hat . 
. Drawline(Pens.Black, xinteger - 10, yinteger, 
xinteger + 80, yinteger) 
.FillRectangle(Brushes.Black, xinteger + 10, ylnteger - 40, 40, 40) 

532 
l ' 
C 
Graphics. Animation, Sound, 
' Make it snow in random locations. 
For Indexlnteger = 1 To 40000 
Next 
End With 
End Sub 
End Class 
xlnteger = GenerateRandom.Next(1, Me .Width) 
ylnteger = GenerateRandom.Next(1, Me .Height) 
.Drawline(WhitePen, xlnteger, ylnteger, 
xlnteger + 1, ylnteger + 1) 
1. Write the statements necessary to draw a green vertical line down the 
center of a fom1. 
2. Write the statements to draw one circle inside another one. 
3. Write the statements to define three points and draw lines between the 
points. 
Simple Animation 
There are several ways to create animation on a form. The simplest way is to 
display an animated .gif file in a PictureBox control. The animation is already 
built into the graphic. Other simple ways to create animation are to replace one 
graphic with another, move a picture. or rotate through a series of pictures. You 
also can create graphics with the various Graphics methods. 
If you want to create animation on a Web page. displaying an animated .gif 
file is the best way. Another way is to write script using a scripting language such 
as V BScripl or JavaScript or to embed a Java apple!, which creates the animation 
on the client side. It doesn't make any sense to create animation using server-side 
controls. since each movement would require a round-trip to the server. 
Displaying an Animated G1·aphic 
You can achieve animation on either a Windows Form or a Web Form by dis-
playing an animated .gif file (Figure 13.4). Use a PictureBox control on a Win-
dows Fonn and an Image control on a Web Fonn. 
and Drag-at•d-Drop 
1~11 i I #I 
Use the time's millisecond properly as 
a seed for the Random class to gener-
ate different random numbers for each 
execufion of the program. • 
Figure 13 . 4 
Create animation by 
displaying an animated .gif 
file on either a Windows Fonn 
or a Web Fomt. 

C 
II 
A 
1• 
'I' 
" 
ll 
13 
Note: You can find the graphics for the programs in tlus chapter in the 
Graphics folder. 
Contt·oUiug Pictm·es at Rtm Time 
You can add or change a picture at run time. To speed execution. it is usually 
best to have the pictures loaded into controls that you can make invisible until 
you are ready to display them. But you also can store image files in the project's 
resources and load a picture at run time. 
If you store a picture in an invisible control, you can change the Visible prop-
erty to True at run time; or you may decide to copy the picture to another control. 
LogoPictureBox .Visible = True 
LogoPictureBox . Image = InvisiblePictureBox.Image 
To remove a picture from the display, either hide it or use the Nothing 
constant. 
LogoPictureBox .Visible = False 
LogoPictureBox.Image = Nothing 
Switching Images 
An easy way to show some animation is to replace one picture with another. 
Many of the icons in the Visual Studio icon library have similar sizes but oppo-
site states. such as a closed file cabinet and an open file cabinet; a mailbox 
with the flag up and with the flag down: a closed envelope and an open enve-
lope; or a traffic light in red, yellow, or green. 
TI1is sample program demonstrates switching between two phone icons: a 
phone and a phone being held. The program has three PictureBox controls: one 
to display the selected image and two, 1~ith their Visible property set to False, to 
hold the two phone images. The hvo icons are Phonel2.ico and Phonel3.ico in 
the Graphics\Microsoftlcons folder in StudentData. When the user clicks the 
Change button, the icon is switched to the opposite one. (See Figure 13.5.) 
o Simple Animation 
Qlange 
~------ ·--: 
! ________ __! 
533 
Fi g ur e 
13 . 5 
Create animation by switching 
from. one icon to another. Each 
of these graphics is placed into 
the upper picture box when the 
user clicks the Change button. 

534 
v 
S 
l l 
,\ 
I. 
Chapter 13 Simple Animation 
Bradley/Millspaugh 
June 2010 
C 
Graphics, Animation, Sowul. 
and Drag-and-Drop 
'Program: 
'Programmer: 
'Date: 
'Description: 
'Folder: 
Change a picture of a phone to show someone holding it. 
Ch13SimpleAnimation 
Public Class AnimationForm 
Private Sub ExitButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitButton.Click 
' End the program. 
Me.Close() 
End Sub 
Private Sub CllangeButton=Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ChangeButton .Click 
' Toggle the image from one to the other. 
Static SWitchBoolean As Boolean = True 
If SWitchBoolean Then 
Else 
DisplayPictureBox. Image = WithHandPictureBox . Image 
SwitchBoolean = False 
DisplayPictureBox.Image 
PhonePictureBox .Image 
SwitchBoolean = True 
End If 
End Sub 
Private Sub AnimationForm_Load(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles MyBase.Load 
' Set the initial image. 
DisplayPictureBox .Image 
PhonePictureBox.Image 
End Sub 
End Class 
Storing Image Files iu the Project Resources 
You can add image files to your project's resources and then retrieve them at 
run time. Open the Project Designer (Project I ProjectName Properties) and 
click on the Resources tab (Figure 13.6). Drop down the Add Resource list 
and choose Add Existing Filt> to add an ex.isting file to your project. You can 
browse to find the file wherever it is; the file will be copied into a Resources 
folder in the project. 
When you want to refer to the filename in code. use this form: 
My.Resources.Filename 
Example 
APictureBox. Image = My .Resources .DrinkMilk 

C 
II 
A 
1• 
'I' 
" 
ll 
13 
Ch13t oadlmage x 
Applica~ion 
Compile 
O.bug 
References 
Resources 
Services 
Signing 
My fxtens.IOIH 
Security 
.. 
Ql Ima.2.!..: ;;;
ll;.A_d=d=Re;=
ou_rc=e=·=-~R-
•m_cw_
• -R""'-r-"-'c_e ~ • 
Add Exi,;ting ~ile .~ 
~ 
Add NewString ' 
New Image 
Add New leon 
Add New Tod File 
Moving a Picture 
The best way to move a control is to use the control's SetBounds method. The 
SetBounds method produces a smoother-appearing move than the move that is 
produced by changing the Left and Top properties of controls. 
SetBounds(XInt eger, Yinteger, Widthinteger, Heightinteger) 
You can use a control's Set Bounds method to move it to a new location and/or 
to change its size. 
The SetBounds 1\lethod-Examples 
535 
Figur e 
1 3 . G 
Add image files to the project 
resorcrces in the Resources tab 
of the Project Designer. 
~ 
c 
Pl anePi ct ureBox.SetBounds(XInt eger, Ylnteger, PlaneWi dthl nteger, PlaneHei ght lnteger) 
;:; .., f 
EnginePi ctureBox.SetBounds(XInteger , Ylnteger , Widthinteger, Hei ghtlnteger ) 
The program example in the next section uses a timer and the SetBounds 
method to move a graphic across the screen. 
The Timer Component 
General! y events occur when the user takes an action. But what if you want to 
make events occur at some interval. without user action? You can cause events 
to occur at a set interval using the Timer component and its Tick event. 
Timers ru·e very useful for animation; you can move or change an image each 
time the Tick event occurs. 

S36 
v 
S 
U 
1\ 
L 
If 
,, 
s 
( ' 
Graphics. Animation. Souml, 
When you have a Timer component on a form, it "fires" each time an in-
terval elapses. You can place any desired code in the Tick event procedure; the 
code executes each time the event occurs. You choose the interval for the timer 
by setting its l.utenal pl'OpeJ·ty. which can have a value of 0 to 2,147,483,647. 
This value specifies the number of milliseconds between the calls to the Tick 
event. One second is equivalent to 1.000 milliseconds. Titerefore, for a three-
second delay, set the timer's Interval property to 3.000. You can set the value at 
run time or at design time. 
You can keep the Tick event from occurring by setting the Timer's Enabled 
property to False. The default value is False. so you must set it to True when 
you want to enable the Timer. You can set the Enabled property at design time 
or run time. 
When you add a timer to your fonn, it goes into the component tray. The tool 
for the timer is represented by the little stopwatch in the toolbox (Figure 13. 7). 
This Timer example program achieves animation in two ways: It moves an 
animated .gif file for a steam engine across the screen. When the steam engine 
moves off the left edge of the form, it reappears at the right edge. so it comes 
arotmd again. Figure 13.8 shows the form. You'll have to use your imagination 
for the animation. 
. u Timer Animation 
' Program 
'Programmer: 
'Date: 
'Description: 
Ch13 Timer Animation 
Bradley/Millspaugh 
June 2010 
Move a steam engine across the screen. 
and Drag-and-Drop 
Figure 1:1.1 
The wol for the Timer 
component in the toolbt;x.. 
Figu••e 13 . 8 
Each time the Timer fires. the 
train moves 10 pixels I1:J the 
left. 
' Folder: 
It reappears on the other side after leaving the screen. 
Ch13TimerAnimation 

C
II
,\I>
'I'
I'
R 
13 
Public Class TimerForm 
Private Sub TrainTimer_Tick(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles TrainTimer .Tick 
' Move the graphic across the form. 
Static XInteger As Integer = EnginePictureBox.Left 
Stat ic Yinteger As Integer = EnginePictureBox.Top 
Stati c Widthinteger As Integer = EnginePictureBox.Width 
Static Heightinteger As Integer = EnginePictureBox.Height 
' Set new X coordinate . 
XInteger ~ 10 
If XInteger <= -EnginePictureBox.Width Then 
' Graphic entirely off edge of form; reset it. 
XInteger = Me.Width 
End If 
' Move image. 
EnginePictureBox.SetBounds(XInteger, Yinteger, 
Widthlnteger, Heightinteger) 
End Sub 
End Class 
1. Write the statement(s) to move Command Button 10 pixels to the left us-
ing the Set Bounds method 
2. How long is an interval of 450? 
3. What fires a Timer's Tick event? 
The Scroll Bar Controls 
You can add b01·izontal scroll bars and vertjcaJ sc1·oll ba1-s to your fonn 
(Figure 13. 9). 111ese scroll bar controls are similar to the scroll bars in Windows 
that can be used to scroll through a document or window. Often scroll bars are 
•!? Scroll Bars 
I <=> j,{§ l..a.J 
Speed 
VollJ'Ile 
S37 
Horizontal scroll bars and 
vertical scroll bars can be used 
to selecl a value over a given 
range. 

538 
v 
S 
l l 
A 
I, 
G 
.\ 
S 
(' 
Graphics, Animati.on. Sound. 
used to control sound le1rel. color, size. and other values that can be changed in 
small amounts or large increments. The HScrollBar control and VScrollBar 
control operate independently of other controls and have their own methods, 
events, and properties. 
Scroll Bar Pmperties 
Properties for scroll bars are somewhat different from the controls we have 
worked with previously. Because the scroll bars represent a range of values, 
they have the following properties: Minimum for the minimum value. J\'laxi-
rnum for the maximum value. SmaUCbauge for the distance to move when the 
user clicks on the scroll arrows. and Lat·geOtange for the distance to move 
when the user clicks on the gray area of the scroll bar or presses the Page-Up 
or Page-Do~·n keys (Figure 13.10). Each of these properties bas a default value 
(Table 13.2). 
Mjnimum value (Minimum property) 
~r- Scroll arrow (SmallChange property) 
~ 
Scroll box (Value prope1ty) 
I r 
Gray area (LargeChange property) 
Maximwn value (Maximum property) --lJ 
Default Values fot· Sct·oll Bat· Properties 
P•·ope1-ty 
Default Vnlue 
Minimum 
0 
Maximum 
100 
Small Change 
1 
LargeChange 
10 
Value 
0 
The Value property indicates the current position of the scroll box {also 
called the thumb) and its con·esponding value within the scroll bar. When the 
user clicks the up arrow of a vertical scroll bar. the Value property decreases by 
the amount of Small Change (if the Minimum value has not been reached) and 
moves tl1e scroll box up. Clicking the down arrow causes the Value property to 
increase by the amount of SmallChange and moves the thumb down until it 
reaches the bottom or Maximum value. 
Figure 13.11 shows the horizontal scroll bar tool and vertical scroll bar tool 
from the toolbox. 
and I.Jrag-aml-I.Jrop 
F i g ur e 
1 3. 10 
Clicking 011-the scroll arrow 
changes the Value property 
lry SmallChange anwunt; 
clicking the gray area of the 
scroll bar changes the Value 
property by LargeChange 
amount. 
Tab It> 
I 3 . 2 

C
II
1\I'TI:R 
I J 
~ ~ HScroiiBar 
~ VScroiiBar 
The events that occur for scroU bars differ from the ones used for other controls. 
Although a user might click on the scroll bar. there is no Click event: ratJ1er 
there are two events: a ValueCbauged eveut and a Scroll even I. The Val-
ueChanged event occurs any time that the Value property changes. a·hether it's 
changed by the user or by the code. 
If the user drags the scroU box. a Scroll event occurs. In fact. multiple scroll 
events occur. as long as the user continues to drag the scroll box. As soon as the 
user releases the mouse button. the Scroll events cease and a ValueChanged 
event occurs. When you write code for a scroll bar. usually you will want to code 
both a ValueChanged event procedure and a Scroll event procedure. 
A P•·ug•·t~mmin!! Exumpl•• 
This little program uses scroll bars to move an image of cars around inside a 
container (Figure 13.12). The image is in a PictureBox. and a Group Box is the 
container. By placing the image inside a container. you use tJ1e container's co-
ordinates rather than those of the form. 
af:o Fun with Scroll Bars 
0 
0 
539 
Fiaurt> 13.11 
The t{)olbox tools for horizontal 
.scroll bar5 and vertical .scroll 
l1<m. 
Flaurt> 13 . 1 2 
The form for the scroll bar 
programming example. M(JI)e 
the cars around imide the 
container wing the scroll bars. 

540 
v 
S 
l l 
,\ 
I. 
C 
Graphics, Animation, Sowul. 
and Drag-and-Drop 
A horizontal scroll bar will make the image move sideways in the con-
tainer, and the vertical scroll bar "~ll make it move up and down. Although 
you want the Maximum properties of the scroll bars to reflect the height and 
width of the container. due to the shape of the image, you may need to set 
the properties using trial and error. For example. the width of the Group Box 
is 247 pixels but the Maximum property of the horizontal scroll bar is set 
to 210; that's the point at which a car's bumper touches the edge of the 
container. 
' Program: 
'Programmer: 
' Date: 
' Description: 
Ch13Scrol1Bars 
Bradley/Millspaugh 
June 2010 
Use scroll bars to move an image 
horizontally and vertically within the 
limits of a group box. 
' Folder: 
Ch13Scrol1Bars 
Public Class ScrollForm 
Private Sub ExitButton_Click(ByVal Sender As System.Object , 
ByVal e As System. EventArgs) Handles ExitButton.Click 
' Terminate the project. 
Me. Close() 
End Sub 
Private Sub MoveCarHorizontalScrollBar_Scroll(ByVal sender As System.Object, 
ByVal e As System.Windows.Forms.ScrollEventArgs 
Handles MoveCarHorizontalScrollBar.Scroll 
' Control the side-to-side movement . 
' Used when scroll box is moved. 
CarPictureBox. Left = MoveCarHorizontalScrollBar.Value 
End Sub 
Private Sub MoveCarVerticalScrollBar_Scroll(ByVal sender As System.Object, 
ByVal e As System.Windows . Forms .ScrollEventArgs 
Handles MoveCarVerticalScrollBar.Scroll 
' Position the up and down movement . 
' Used when the scroll box is moved. 
CarPictureBox. Top = MoveCarVerticalScrollBar.Value 
End Sub 
Private Sub MoveCarVerticalScrollBar_ValueChanged(ByVal sender As Object, 
ByVal e As System. EventArgs 
Handles MoveCarVertical ScrollBar.ValueChanged 
' Position the up and down movement . 
' Used for arrow clicks . 
CarPictureBox. Top = MoveCarVerticalScrollBar.Value 
End Sub 

(; 
II 
;\ 
I' 
'I' 
1•: 
II 
S41 
Private Sub MoveCorHorizontalScrollBar_ValueChanged(ByVal sender As Object, 
ByVal e As System.EventArgs 
) Handles MoveCarHorizontalScrollBar.ValueChanged 
' Control the side-to-side movement. 
' Used for arrow clicks. 
CarPictureBox.Left = MoveCarHorizontalScrollBar.Value 
End Sub 
End Class 
Playing Sounds 
I 
It's fun to add bound to an application. Your computer plays sounds as you turn 
it on or ofT. There's also likely a sound when you receive e-mail. You can make 
your program play sound files. called ~11ve files (.wav). by using My. Computer. 
Audio. Play. 
When you plan to usc sounds iu a project. the best plan L~ to add the Illes to 
the project's resow-ces. This is similar to adding images to the project's resow·ces. 
which you saw earlier in this c.hapter (refer to Figure 13.6). When you want to 
refer to the filename in code. usc this fonn: "My. Resources .Filen8111e". 
Extlllll)lf' 
My.Compuler.Audlo.Play(My.Resources .chimes, AudioPlayMode.WaHTocomplete) 
A Soumi-Piu) in{! P•·oj!ram 
The follo~·ing program {Figure 13.13) plays three different sounds found in 
the \Vindows\Medio folder or allows the user to select a file using the 
Openf'ileDialog component. The filter property for the OpenfileOialog is set to 
wave files (\VAV Files (*.wav)l*.wav). 
• I Play Sounds using SoundPtayrr 
( Q1Hnes 
Qing 
£.elect File 
Fl tt •r•• 
1 3 . 1 3 
Tile user can chl)o~ to play 
one of three preselected sounds 
or select a .roo11jile II) play. 

S42 
s 
l l 
\ 
l 
B 
\ 
S 
(' 
Graphic•. A11immion. Sot~ncl. 
Chapter 13 Sounds 
Bradley/Millspaugh 
June 2010 
aiUI Drag-{Jnd· Drop 
' Program: 
' Programmer: 
' Date: 
' Description: 
' Folder: 
Play sounds using a SoundPlayer component and My.Computer.Audio.Play. 
Ch13Sounds 
Public Class soundForm 
Private Sub ChimesButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ChimesButton.Click 
• Play the chimes sound. 
• Play the sound using ~~.computer and My.Resources. 
My.computer.Audio.Play(~.Resources.chimes , AudioPlayMode.WaitTocomplete) 
End Sub 
Private Sub DingButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles DingButton.Click 
' Play the ding sound. 
' Play the sound using My.computer and My.Resources. 
My.Computer.Audio.Play(My.Resources.ding, AudioPlayMode .WaitToComplete) 
End Sub 
Private Sub TadaButton_Click(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles TadaButton.Click 
· Play the tada sound. 
• Play the sound using ~~.Computer and My.Resources. 
My.Computer.Audio.Play(~.Resources.tada, AudioPlayMode.WaitTocomplete) 
End Sub 
Private Sub SelectButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles SelectButton.Click 
• Allow user to select the sound file. 
If OpenFileDialog1.ShowDialog() = DialogResult .OK Then 
My.Computer.Audio.Play(OpenFileDialog1.FileName.ToString) 
End If 
End Sub 
End Class 
lf you want to have a sotmd play as the application opens. you can play the 
sow1d in the Form_Load or Fonn_Activate event procedure. 
Playing Videos 
1 
You have seen how to play sounds using My. Computer .Audio. lf you would 
like to include a video in your Windows application. use the Windows Media 
Player control (Figure 13.14). ~t·hich can play audio and video files in many 
fom1ats. including .avi .. wmv, and .wav. 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
13 
Play a sample video fde 
Select media type; 
Using the Windows Medja Playm· Control 
The Windows Media Player control does not appear in the Visual Studio tool-
box by default. so you must add it. Right-click on the toolbox and select 
Choose Items. You "ill find the control on the COM components tab. Place a 
check mark in the box and press OK to add the control. Then you can place a 
Windows Media Player control on your form. 
The URL property of the control determines the file that plays. lf you set 
the property at design time. you must include a hard-coded path. and the file 
begins playing when the program loads. You also can control the U RL property 
at rw1 time. You can store the video and audio files in the project resources to 
make the project portable, but the Windows Media Player ca1mot automatically 
retrieve files from resources. You must set the URL property to the Resources 
folder in code. 
You can set several properties of the Windows Media Player control. If 
you wish to just play sound. you may choose to set the visibility to False. Set 
Ctlenabled to True to allow the user access to the Play. Pause, and Stop 
buttons. Set the URL property to the path and filename to play, and choose 
whether the loaded file will begin playing automatically with the settings. 
autoStart property. For example. set WindowsMediaPlayer1 . settings. 
autoStart = False so that the video won't begin playing w1til the user 
clicks the Play button. By default autoStart is set to True. so the video sta11s 
playing as soon as it is loaded. 
The following program allows the user to select and play a sample file by 
choosing the file type from a list box. It then assigns the URL prope1ty in a 
Select Case statement in the List box Selection Committed event procedure. 
Figu•·e 13 . 14 
Place a Windows Media 
Player control on a form tc 
play an audio or video file. 
543 

544 
s 
l 
\ 
•• 
u 
\ 
s 
C. 
Graphics, Anii1J(Jti1Hl. Sound. 
Ch13Video 
Bradley{Millspaugh 
June 2010 
and Drag-and-Drop 
' Program: 
'Programmer: 
'Date: 
'Description: 
Uses a Windows media player for wmv, mp3, avi, and wav files. 
Audio and video files are stored in project resources to maKe 
the project portable. 
Public Class MediaForm 
Private Sub MediaComboBox_SelectionChangecommitted(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles MediaComboBox.SelectionChangeCommitted 
' Select the type of file to play. 
Dim ResourcePathString = IO.Path.GetFullPath(Application .StartupPath & 
"\ .. \ .. \ resources\ • ) 
With AxWindowsMediaPlayer1 
Select Case MediaComboBox.Selectedindex 
case o 
.URL = ResourcePathString & "bear.wmv• 
Case 1 
.URL = ResourcePatnstring & "Sleep Away.mp3" 
Case 2 
.URL 
ResourcePathString & "applause.wav• 
Case 3 
.URL 
ResourcePathString & "clocK.avi' 
Case Else 
MessageBox.Show("Please select media type. ") 
End Select 
End With 
End Sub 
End Class 
Drag-and-Drop Programming 
! 
Often Windows users use drag-and-drop events rather than selecting a menu 
item or pressing a button. For example. you can copy or move (iles in My Com-
puter by dragging the file and dropping it on the new location icon. 
Drag-and-drop programming requires you to begin the drag-drop 
with a l\louseDowu event and determine the effect of the drop with a 
DragEutet• event. The event that holds the code for the drop is the 
DragDt·op eYent. Figure 13.15 shows the objects and events for a drag-
and-drop operation. 
The Source Object 
The item that you wish to drag is commonly referred to as the source object. 
With .NET programming you begin a drag-drop operation by setting the source 
object using a controls DoDragDrop method. 

C
II
A
I•
T
t:
R 
I :I 
Source L----------,> Target 
In MouseDown or Mouse More event: 
AUowOrop property mul>l be sello True. 
DoDragOrop method. 
In MouseEnter e<ent (Optional): 
In DragEnter ev•nt: 
Set cursor to give feedback 
Set DragDrop effect (Move or Copy). 
that a drag will occur. 
In DragDrop e\·ent: 
Code to add drugged object to target. 
ObjectName.DoDragDrop(DataToDrag, DesiredDragDropEffect) 
The DragDrop effect specifies the requested action for the operation. 
Choices include DragOropEffects. Copy, OragOropEffects. Move. and 
oragoropEffects.None. 
'Jbe DoDt·a;!D1·o1> ~letbod-Exruuplo> 
545 
IF ia(ur e 
1 3. 15 
The source object is dragged to 
the target object in a drag-
a nd-clrop operation. 
~ .-----------------------------------------------------------------. 
"' ! 
~ 
;;-
With NameTextBox 
.oooragorop( .SelectedText, oragoropEffects.Move) 
End With 
Look at the following MouseDown event procedure. First. an If statement 
checks to see if the u.~er pressed I he lefi mouse button. If so. the contents of the 
text box are selected and the effect of the drag is set to a move operation. 
Privat e Sub NameTextBox_MouseDown(ByVal sender As Object, 
ByVal e As System.Wi ndows .Forms.MouseEventArgs 
) Handles NameTextBox .MouseDown 
' Select cont ents of the text box and invoke the drag/drop. 
If e. But ton = Windows.Forms .MouseButtons.Left Then 
With NameTextBox 
.SelectAll() 
. DoDragDrop(.SelectedText . OragDropEffects.Move) 
End Wi th 
End If 
End Sub 

546 
v 
S 
l l 
,\ 
I. 
C 
Graphics, Animation, Sowul. 
and Drag-and-Drop 
T lu.• Tat·get Oh.iecl 
The location at which a user releases the mouse. a drop. is the target. A form 
may have multiple targets. To set a control to be a target, set its AllowD1·op 
propeny to True. The target control needs a DragEnter event procedure that 
sets the effect and a DragDrop event procedure that executes the action to take 
when t11e drop takes place. 
ln the following example program (Figure 13.16), the value in a text box 
can be transferred to one of hvo list boxes. Each list box would be a potential 
target and must have its Allow Drop property set to True. And each target object 
needs a DragEnter event procedure and a DragDrop event procedure. 
II'} Assign T~am M~bers 
Team A 
Team B 
John 
lee 
16 
The DragF.ntcr F.vetll 
When the user drags a source object over the target. the target control's 
DragEnter event fu·es. Notice in the DragEnter's procedure header that the e 
argument is defined as DragEventArgs, which has some special properties for 
the drag operation. You assign the desired effect to the e argument. 
Private Sub TeamAListBox_DragEnter{ByVal sender As Object, 
ByVal e As System.Wi ndows. Forms.DragEventArgs 
) Handlos ToamAListBox.DragEntor 
' Set the desired DragDrop effect . 
e. Effect = DragDropEffects.Move 
End Sub 
FIJ,! n re 1 3.1 6 
The user types a name in the 
top text b0:~ and then drags the 
name to one of two list boxes. 

C
II
,\I>
'I'
I'
R 
13 
The DragDrop Event 
Assume that when the user drops the text value on a list box we want to add 
the value to the Items collection for the list and clear the original text box. The 
statements to pedorm these actions are entered into the DragDrop event for 
the list box. 
TI1e data that are being dragged are contained in the Data property of the e 
argument of the DragDrop event procedure. You can retrieve the dragged data 
using the GetData method of the Data object. You also can format the data 
yourself or use a predefined clipboard data format. The predefined format for 
text is DataFormats . Text. 
Private Sub TeamAListBox_DragDrop(ByVal sender As Object, 
ByVal e As System.Windows.Forms. DragEventArgs 
) Handles TeamALi stBox.DragDrop 
' Add the item to the list box. 
TeamALi st Box .lt ems.Add(e.Data .GetData(Dat aFormats. Text). ToSt ring()) 
NameTextBox .Clear() 
End Sub 
Note: .NET actually allows the target to be outside the cunent application. 
but that topic is beyond the scope of this text. 
The D1·ag-mui-D•·op P1·og•·am 
Following is the completed program that is illustrated in Figure 13.16. 
'Program 
'Programmer: 
'Date: 
'Description : 
'Folder: 
Chapter 13 Drag and Drop 
Bradley/Millspaugh 
June 2010 
Drag a name from the text box and drop on a list. 
Ch13DragDropListBoxes 
Public Class TeamAssignmentForm 
Private Sub NameTextBox_MouseDown(ByVal sender As Object, 
ByVal e As System.Windows.Forms.MouseEventArgs 
) Handles NameTextBox.MouseDown 
' Select contents of the text box and invoKe the drag/drop. 
If e.Button = Windows.Forms.MouseButtons.Left Then 
With NameTextBox 
. SelectAll () 
.DoDragDrop( .SelectedText, DragDropEffects.Move) 
End With 
End If 
End Sub 
Private Sub TeamAListBox_DragDrop(ByVal sender As Object, 
ByVal e As System.Windows. Forms.DragEventArgs 
) Handles TeamAListBox.DragDrop 
' Add the item to the list box. 
TeamAListBox .Items.Add(e.Data.GetData(DataFormats .Text) .ToString()) 
NameTextBox .Clear() 
End Sub 
547 

548 
v 
S 
l l 
,\ 
I. 
C 
Graphics, Animation, Sowul. 
and Drag-and-Drop 
Private Sub TeamAListBox_DragEnter(ByVal sender As Object, 
ByVal e As System.Windows.Forms.DragEventArgs 
) Handles TeamAListBox .DragEnter 
' Set the desired Dragorop effect. 
e.Effect = DragDropEffects.Move 
End Sub 
Private Sub TeamBListBox_DragDrop(ByVal sender As Object, 
ByVal e As System.Windows.Forms.DragEventArgs 
) Handles TeamBListBox .DragDrop 
' Add the item to the list box . 
TeamBListBox.Items.Add(e.Data.GetData(DataFormats.Text).ToString()) 
NameTextBox .Clear() 
End Sub 
Private Sub TeamBListBox_DragEnter(ByVal sender As Object, 
ByVal e As System.Windows.Forms.DragEventArgs 
) Handles TeamBListBox.DragEnter 
' Set the desired Dragorop effect. 
e.Effect = DragDropEffects.Move 
End Sub 
Private Sub NameTextBox_MouseEnter(ByVal sender As Object, 
ByVal e As System.EventArgs} Handles NameTextBox.MouseEnter 
' Set the mouse pointer to give feedback that a drag is legal. 
With NameTextBox 
If . Text <> "" Then 
. SelectAll (} 
.cursor 
cursors.Arrow 
Else 
.cursor 
cursors.IBeam 
End If 
End With 
End Sub 
End Class 
D•·agging and Dropping an Image 
You also can drag and drop images (Figure 13.17), but with one small differ-
ence. The Allow Drop property of a PictureHox is not available at design time. 
but you can set it in the Form_Load event procedure. 
TargetPictureBox.AllowDrop = True 
To make the drop appear like a move. set the original picture box image to 
Nothing. To make it a copy. you could leave the original alone. 
Private Sub TargetPictureBox_DragDrop(ByVal sender As Object, 
ByVal e As System.Windows .Forms.DragEventArgs 
) Handles TargetPictureBox .DragDrop 
' Assign the image to the target; original is erased. 
TargetPictureBox.Image 
SourcePictureBox. Image 
sourcePictureBox.Image = Nothing 
End Sub 

(; 
II 
,\ 
1• 
'I' 
I•: 
R 
1:1 
! ,tl Dragging and Dropping an Image ~ 
.;;; Oraggir)y •nd Droppi119 an ImaQe ~ 
Sour::rt 
Resetlm..:~g:: 
Ttw IJmgl>wplmage Prug•·am 
Ch13DragDropimage 
Bradley/Millspaugh 
June 2010 
Figur e 13.17 
The user can drag the ~ource 
image and drop it on the 
target control. 
'Program 
'Programmer: 
'Date: 
'Description: 
Use a picture box for the source and target in a drag and 
drop operation. 
Public Class DragoropForm 
Private Sub DragDropForm_Load(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MyBase.Load 
' Set the AllowDrop for the target. 
TargetPictureBox.AllowDrop = True 
End Sub 
549 

sso 
\ 
S 
U 
·\ 
I. 
u " 
s 
(' 
Ctaphico. Animation. Sowul.. 
Private Sub SourcePictureBox_MouseMove ( By~al sender As Object, 
ByVal e As System.Windows.Forms.MouseEventArgs 
) Handles SourcePictureBox.MouseMove 
' Drag the picture. 
and Drag-and-Drop 
sourcePictureBox.DoDragDrop(SOurcePictureBox.Image, DragDropEffects.Move) 
End Sub 
Private Sub TargetPictureBox_oragDrop(ByVal sender As Object, 
ByVal e As System.Windows.Forms.DragEventArgs 
) Handles TargetPictureBox.DragDrop 
' Assign the image to the target; original is erased. 
TargetPictureBox . Image 
SourcePictureBox.Image 
SourcePictureBox.Image = Nothing 
End Sub 
Private Sub TargetPictureBox_DragEnter (By~al sender As Object, 
ByVal e As system.Windows.Forms.DragEventArgs 
) Handles TargetPictureBox.DragEnter 
' Set the effect to a move. 
e .Effect = oragDropEffects.Move 
End Sub 
Private Sub ResetButton_Click ( By~al sender As system.Object, 
ByVal e As System .EventArgs) Handles ResetButton .Click 
' Clear the target image and reset the orginal. 
SourcePictureBox.Image = TargetPictureBox . Image 
TargetPictureBox.Image = Nothing 
End Sub 
End Class 
l. Code the DragEnter event for TaskList.Box that will copy the value re-
ceived in a drag operation. 
2. Write the statement for the DragDrop method to add the value to the list 
box. 
our Hands-On Programming Example _______ 
____; 
Create a project that will dra~t· a pie chart showing the relative amount of sales 
for Books. Periodicals. and Food for R "n R- For Reading and Refreshment. 
lnclude text boxes for the user to enter tile sales amow1t for Books. Period-
icals. and Food.lncludebuttons for Display Chart. Clear. and Exit. 
Calculate the values for the pie chart in the Display Chart button's Click 
event procedure and use a Refresh method to force the form's Paint event to 
occur. In the form's Paint event procedure. use the CreateGraphics. FillPie 
method to draw each of the pie segments. 
Me.CreateGraphics.FillPie(Brush, XInteger, Ylnteger, Widthlnteger, Heightlnteger, 
BeginAngleinteger, Lengthlnteger) 

C
ll
i\
1°T
t:
R 
13 
l'lannin~ Llu• Pt·ojet·t 
Sketch a fonn (Figure 13.18) that your users sign off as meeting their needs. 
Flg nr e 
13 . 18 
A planning sketch of the hands-on programming exam pi~. 
Graphics methods 
Enter Sales for Each 
E_l:rtodlcals 
c::::======::}:--t- BooksTextBox 
c::::=======j(---1- PerlodlcalsTextBox 
c::::======Jc---t- FoodTextBox 
:=:=
D::Is::pl':ay=Ch::a::rt::::-::,~--t-- DlsplayChartButton 
L_ 
_ 
__,G"'Ie:.:a::.cr __ __.f---t-
ClearButton 
L-----=:l
~=:.::.. __ 
....J~--t---- ExltButton 
Books: Blue, Perlodlcals: Yellow, rood: Red ._---t- L~endlal:>e l 
(VIsll:>illty = False) 
Plan the Objt>cts and Properties Plan the property settings for the form and 
each control. 
Obj .. ct 
Property 
Selling 
Form 
Nnmc 
PieChartForrn 
Text 
R 'n R Sales Pie Chart 
Ac,-eptButton 
DisplayChrutButton 
CanceiButton 
CleurBuuon 
Labell 
Name 
Labell 
Text 
Enter Sales for Each 
Label2 
Name 
Label2 
Text 
&Boob 
Boob.TextBox 
Name 
Boob Text Box 
Text 
(blank) 
Label3 
NulllC 
Label3 
Text 
&Periodical.. 
Periodica.lsTextBox 
Na01e 
PeriodicalsTextBm< 
Text 
(blank) 
Label4 
Name 
Label4 
Text 
&Foo.J 
SSI 

SS2 
Object 
FoodTexiBox 
Legend Label 
DisplayCI.artButton 
ClearBullon 
E:utButton 
,. 
Properly 
Name 
Text 
Name 
Text 
Visible 
Name 
Text 
Name 
Text 
Name 
Text 
S 
l 
\ 
L 
Selling 
FoodTe.,.IBox 
(blanlc) 
LegenciLabel 
It 
\ 
s 
t: 
Graphic.. Animation. So•md. 
and lhag-and-lhop 
Books: Blue. Periodicals: Yellow. Food: Reel 
False 
DisplayChartButtoo 
&Disploy Churt 
ClearButton 
&Clear Sale 
ExitBulton 
E&xit 
Plan the E.vent Procedures 
DisplayChortButton_Ciick 
Fonu_ Paiut 
ClearButton_Clict 
Exit Button_ Click 
Acllom-Pscudoeode 
If lexl field• are numeric 
Find e<tch category .al,.. 
Find total .alea. 
Force fonn to repaint (Refresh). 
If DrawChartBoolean 
If total •ales <> 0 
Else 
Make legend visible. 
Calculate ratio of each department to total sales. 
Draw portions of the pie for each depat1ment. 
Clear chart. 
Set each text box and label to blanks. 
Set the focus in the first text bu. 
Set Dm...ChariBoolean = False. 
Force form to repaint (Hefre~h). 
Exit the project. 
Write thr Project F'ollo1~;ng the sketch in Figure 13.18. create the form. Fig-
ure 13.19 shows the completed form. 
Set the properties of each of the object~. as you have planned. 
Write the code. Working from the pseudocode. write each event procedure. 
• 
When you complete the code. use a variety of lest data to thoroughly test 
the project. 

C
ll
i\
11
T
E
R 
13 
o..J R 'n R Sales Pie 
Ener Salee for Each 
!!oaks 
500 
Eeriodicals 
275 
food 
150 
·nu• P1·ojel'l (~()(ling Solution 
Chapter 13 Pie Chart Hands On 
Bradley/Millspaugh 
June 2010 
Qear 
'Program: 
'Programmer: 
'Date: 
'Description: 
'Folder: 
Draw a chart for relative sales amounts. 
Ch13PieChart 
Public Class PieChartForm 
The f orm f or the hands-on 
programming exampk. 
Private TotalSalesDecimal, BookSalesOecimal, PeriodicalSalesOecimal, 
FoodSalesDecimal As Decimal 
Private DrawChartBoolean As Boolean = False 
Private Sub OisplayChartButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles DisplayChartButton.Click 
' Display a pie chart showing relative sales by department . 
SS3 

SS4 
S 
l 
\ 
L 
' Need total sales amount. 
Try 
n 
' 
" 
C 
!Aaphie&. Animation. SowuJ. 
and Drag-and-Drop 
BookSalesDecimal "Decimal.Parse(BooksTextBox.Text) 
Try 
PeriodicalSalesDecimal" Decimal.Parse(PeriodicalsTextBox.Text) 
Try 
FoodSalesDecimal" Decimal .Parse(FoodTextBox.Text) 
TotalSalesDecima1 " BookSalesDecima1 + PeriodicalSalesDecimal + 
FoodSalesDecimal 
DrawChartBoolean " True 
Catch 
MessageBox.Show("Invalid Food Sales' ) 
FoodTextBox.Focus() 
End Try 
Catch 
MessageBox.Show( ' Invalid Periodical Sales') 
PeriodicalsTextBox.Focus(} 
End Try 
Catch 
MessageBox.Show('Invalid Book Sales') 
BooksTextBox.Focus() 
End Try 
' Force a Paint of the form. 
Refresh{} 
End Sub 
Private Sub ExitButton_Click(ByVa1 sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitButton.Click 
' End the project . 
Me .Close() 
End Sub 
Private Sub Cl earButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ClearButton.Click 
' Clear the screen controls . 
FoodTextBox.Clear() 
PeriodicalsTextBox.Clear() 
With BooksTextBox 
.Clear() 
.Focus() 
End With 
Legendlabel.Visible = False 
DrawChartBoolean " False 
Refresh() 
End Sub 
Private Sub PieChartForm_Paint(ByVal sender As Object, 
ByVal e As System.Windows .Forms.PaintEventArgs) Handles Me.Paint 
Dim xCenterinteger As Integer " 140 
Dim yCenterinteger As Integer " 180 
Dim ClearBrush As New SolidBrush(PieChartForm .DefaultBackColor) 

C IIAI•Tt:
R 
13 
If DrawChartBoolean Then 
Create the pie chart. 
' Amounts are a portion of the total circle of 360 degrees. 
' The pie graphic includes a start angle and end angle. 
If TotalSalesDecimal <> 0 Then 
Legendlabel.Visible = True 
' Find the end of the book portion of 360 degrees. 
Dim EndBookslnteger As Integer = 
Convert.Tolnt32(BookSalesDecimal I TotalSalesOecimal * 360) 
e.Graphics.FillPie(Brushes.Blue, xCenterinteger, yCenterlnteger, 
100, 100, 0, EndBookslnteger) 
Find the end of the Periodicals portion. 
Dim EndPeriodicalslnteger As Integer = 
sss 
Convert.Tolnt32(PeriodicalSalesDecimal I TotalSalesDecimal * 360) 
e.Graphics.FillPie(Brushes.Yellow, xCenterlnteger, yCenterinteger, 100, 100, 
EndBooksinteger, EndPeriodicalsinteger) 
Else 
Dim EndFoodinteger As Integer = 
Convert .Toint32(FoodSalesDecimal I TotalSalesDecimal * 360) 
e.Graphics.FillPie(Brushes.Red, xCenterlnteger, yCenter!nteger, 100, 100, 
EndPeriodicalsinteger + EndBooks!nteger, EndFood!nteger) 
End If 
e.Graphics.FillEllipse(ClearBrush, xCenterinteger, yCenterlnteger, 100, 100) 
End If 
End Sub 
End Class 
l. A drawing surface is created with a Graphics object. 
2. The Graphics metJ1ods should appear in the form's Paint event procedure 
so iliat ilie graphics are redrawn every time the form is repainted. 
3. Pen objects are used for lines and the outline of shapes; brushes are used 
for filled shapes. 
4. Measurements in drawings are in pixels. 
5. The coordinate system begins witJ1 (0. 0) at the upper-left comer of the con-
tainer object. 
6. You can declare a Point structure. a Size structure. or a Rectangle structure 
to use as arguments in the Graphics metJtods. 
7. You can generate random numbers using the Random class. Seed the ran-
dom number generator when instantiating a variable of the class: use the 
Next method to generate a series of numbers. 
8. An animated .gif file can be displayed in a PictureBox control to display 
animation on a Windows Form or a \'(leb Form. 
9. Animation effects can be created by using similar pictures and by control-
ling U1e location and visibility of controls. 
10. Pictures can be loaded. moved. and resized at mn time. 
11. The Timer component can fire a Tick event that occurs at specified inter-
vals. represented in milliseconds. 

556 
\ 
S 
l 
\ 
L 
ll 
.\ 
s 
C 
Gmphie.. Animation. Sowul. 
aml Drag-and-Drop 
12. Scroll bar controls are available for both horizontal and vertical directions. 
Properties include Minimum. Marimum, SmaiiChange. LargeChange. and 
Value. Scroll and ValueChanged events are used to respond to the action. 
13. Use My.Computer.Audio.Play for wave (.wav) sound files in theRe-
sources folder. 
14. Drag-and-drop programming alJows a source object to be dropped on a tar-
get object. The target control has its AllowDrop property set to Tme. The 
source control calls the DoDragDrop method in its MouseDown event. The 
target control sets the effect of the drag in the Drag Enter event and there-
sults in the DragOrop event. 
AllowDrop property 
546 
Bmsh object 525 
DoDragDrop method 
544 
DragDrop event 
544 
DragEnter event 544 
DrawLine metJ1od 
528 
DrawRectangle method 
528 
FillEllipse method 
528 
graphics 524 
horizontal scroll bar 537 
Interval property 536 
LargeChange property 538 
Maximum property 
538 
Minimum property 538 
MouseD own event 544 
l. What is a pixel? 
Next method 
530 
Pen object 
525 
pixel 
525 
Point structure 527 
Random class 530 
Rectangle slnlcture 528 
Scroll event 539 
SetBounds method 535 
Size structure 527 
Small Change property 538 
Tick event 
535 
Timer component 535 
Value property 538 
ValueChanged e~ent 539 
vertical scroll bar 537 
2. What class contains the Graphics methods? 
3. Describe two ways to add a Graphics object to a form. 
4. Name three methods available for drawing graphics. 
5. How is a pie-shaped wedge created? 
6. Differentiate between using a Brush and a Pen object. 
7. Which function loads a picture at run time? 
8. How can you remove n picture at run time? 
9. What steps are necessary to change an image that contains a turned-off 
light bulb to a turned-on light bulb? 
1.0. What is the purpose of the Timer component? 
11. Explain the purpose of these scroll bar properties: Minimum. Maximum. 
Small Change. LargeChange, and Value. 

C
ll
i\1'1'EH 
13 
12. What detennines the me to be played by a Sound Player? 
13. Explain the purpose of the following events for a drag-and-drop operation: 
a. MouseDown 
b.DragEnter 
c. DragDrop 
14. Explain the parameters of the DoDragDrop method. 
13.1 Create a project tlmt contains two buttons labeled "Smile" and "Frown". 
TI1e Smile button will display a happy face: Frown will display a sad face. 
Use Graphics methods to draw the two faces. 
Oplio1Wl: Add sound effects when the faces appear. 
13.2 Use Graphics methods to create the background of a form. Draw a picture 
of a house, including a front door. a window, and D chimney. 
13.3 Use a PictureBox control 1~ith a .bmp file from Windows. Set the Size-
Mocle property to Stretch Image. Use scroll bars to change the size of the 
image. 
13.4 Use graphics from any clip art collection to create a project that has a 
bull on for each month of the year. Have an appropriate image display in 
a PictureBox for each month. 
13.5 Use the bicycle icon and a Timer component to move the bicycle around 
the screen. Add a Start button and a Stop button. The Stop button will re-
tum the bicycle to its original position. (The bicycle icon is stored as 
Graphics\lcons\lndustry\Bicycle.ico or in the Graphics\Microsoftlcons 
folder on the text Web site.) 
13.6 Modify the snow1nan project ("Random Numbers") from earlier in the 
chapter by adding eyes. a mouth. and buttons. Play an appropriate sound 
file: you can play it in the Fonn_lnad. in the Fonn_Activated. or at the 
end of the Form_ Paint procedure. Do not place the sound in the middle 
of the graphics code in the Form_ Paint procedure. 
13.7 Moclify the chapter hands-on example to add two more categories: Drinks 
and Gifts. Allow the user to enter the additional values and make the pie 
chart reflect all five categories. Make sure to set the legend label at the 
bottom of the form to include the new categories. 
13.8 Write a project that has list boxes for a potluck party: appetizers. salad. 
entrl\e. dessert. Have a text box for entering attendees' names and then 
drag them to the appropriate list box. 
Optional extra: Code a save feature to save the contents of each of the list 
boxe$ to a separate file. Then add a feature to load the list boxes when the 
progmm begins. 
SST 

SS8 
\ 
s 
l 
.\ 
I. 
u .\ 
s 
l ' 
G.-aphic>. Ani100tion. Sowul. 
and Drag-and-Drop 
VB lUaU Ord~r 
Create a logo for VB Mail Order us.ing Graphics meth-
ods. Place the logo in the startup form for the project 
from Chapter 12. Add appropriate images and graph-
Have the startup screen initially fiU 1\ith random dots 
in your choice of colors. Use Graphics methods to 
draw an Auto Center advertisement that will appear on 
ics to enhance each form. The graphics may come 
from .bmp files .. gif files. clip art. or your own creation 
from Paintbrush. 
the screen. Have various appropriate images (icons) 
appear in different locations, remain momentarily. and 
then disappear. 
\ 'llleo Bonanza 
Use the Timer component and the random number 
generator to create a promotional game for Video Bo-
nanza customers. Create three image controls that ~-ill 
display an image selected from five possible choices. 
When the user clicks on the Start button. a randomly 
selected image wiU display in each of the image con-
trois and continue to change for a few seconds (like a 
"slot machine") until the user presses the Stop button. 
If aU three images are the same. the customer receives 
a free video rental. 
Display a message that says "Congratulations., or 
"Better Luck Next Visit''. 
Very Very Boarch I 
Modify your Very Very Boards project from Chapter 8 
or 12 to add a moving graphic to the About form. Use 
the graphic Skateboard.wmf or other graphic of your 
choice. Include a Timer component to move the 
graphic across the form. When the graphic reaches the 
edge of the fmm. reset it so that the graphic appears at 
the opposite edge of the fonn and begins the trip 
again. 
Note: For help in basing a new project on an exist-
ing project. see ''Copy and Move Projects" in Appen-
dix c. 

D 
A 
p 
T 
E 
R 
Additional Topics in 
Visual Basic 
I . Validate user input in the Validating event and display messages using 
an Error Provider component. 
2. Use code snippets in the editor. 
3. Create a multiple document project with parent and child forms. 
-t. Arrange the child forms vertically. horizontally. or cascaded. 
5. Adcltoolhars and status bars to your fom1s using tool strip and stat us 
strip controls. 
6. Use calendar controls and date functions. 
7. Display a Web page on a Windows Form using a Web Browser control. 
8. Capture and check an inruvidual keypress from the user. 
9. Use WPF lnteroperablility to add Windows Presentation Foundation 
controls to a Windows Fom1. 
Create a WPF application. 

560 
v 
S 
l l 
,\ 
I. 
C 
Additional Topics in Visual Basic 
This chapter introduces some topics that can make your programs a bit more 
professional. You can use an ErrorProvider control to display error messages to 
the user and perform field-level validation, rather than validate an entire form. 
You can improve the operation of multiple-form applications by using a multi-
ple document intetface (MDI). which allows you to set up parent and child 
forms. Most professional applications have toolbars and status bars, which you 
leam to create in this chapter. 
This chapter also introduces the Web Browser control. which you can add 
to a Windows application; and creating special effects using Windows Presen-
tation Foundation (WPF). 
Advanced Validation Techniques 
You already know how to validate user input using Try /Catch. If statements, 
and message boxes. In addition to these techniques. you can use the Error-
Provider components. which share some characteiistics with the Web valida-
tion controls. Other useful techniques are to set the Max.Length and/or 
CharacterCasing properties of text boxes and to petfonn field-level validation 
using the Validating event of input controls. 
T he En ·m·Pr·ovider· Compone nt 
Jn Chapters 3 and 4 you learned to validate user input and display message 
boxes for invalid data. Now you 1>illleam to display error me.s.sages directly on 
the form using an EnorPt•o\'idet• component. rather than popup messages 
in message boxes. Using an ErrorProvider component, you can make an error 
indication appear next to the field in error. in a manner similar to the validator 
controls in Web applications. 
Altl10ugh you can add multiple Error Provider components to a fom1, gen-
erally you use a single EnorProvider for all controls on a form. Once you add 
the ErrorProvider into the component tray. you can validate a control. If the 
data value is invalid, the Error Provider component can display a blinking icon 
next to the field in enor and display a message in a popup. similar to a TooiTip 
(Figure 14.1). 
The logic of your program can be unchanged from a MessageBox solution. 
When you identify an error, you use the ErrorProvicler SetError method. 
which pops up the icon. 
EJ'I'ot•l•r·ovider SetEt•t•ot• ~·l ethod-Ceneral Form 
ErrorProviderObject.SetError(ControlName, MessageString) 
ErrorPro,;der SetEtTot· !\Jethoci-ExamJlles 
~ r-----------------------------------------------------------~ 
"' 
1: 
~ r 
ErrorProvider1 .SetError (QuantityTextBox, "Quantity must be numeric ." ) 
ErrorProvider1 . SetError (CreditCardTextBox, "Required field. ") 
~------------------------------~ 

(.; 
II 
1\ 
I' 
'I' 
1•: 
II 
II 
Book Sales 
1S.~C~unt 
The following example is taken from Chapter 3. The message boxes have been 
removed and replaced with ErrorProvider icons and messages. Notice that aJI 
messages a1·e cleared at the top of the Calculatellutton_Click procedure so that 
no icons appear for fields that have passed valida tion. Figure 14.2 shows the 
form in Desigu view. 
Chapter 14 Error Provider 
June 2010 
Bradley/ Millspaugh 
561 
F
l rt u•·'~ 1 4. 1 
The ErrorPrcwider displayl a 
blinking icon next to the f wld 
in error. When the Uiler point.:< 
to the icon, IIUI error messa.ge 
appear! in a popup. 
'Project: 
'Date: 
'Programmer: 
'Descr iption: 
' 
'Folder: 
This project demonstrates using an ErrorProvider control 
for validation. It replaces the message boxes used in the 
original version of this program in Chapter 3. 
Ch14ErrorProvider 
Public Cl ass BooKSaleForm 
Canst DISCOUNT_RATE_Deoimal As Decimal = 0.15D 
Private Sub Calculat eButton_ClicK(ByVa1 sender As System.Object, 
ByVal e As System. EventArgs) Handl.es CalculateButton . ClicK 
' Calculate the price and discount. 
Dim ouantitylnteger As Integer 
Dim PriceDecimal, ExtendedPriceDecimal, DiscountDecimal, 
DiscountedPriceDecimal As Decimal 
Clear all error messages. 
ErrorProvider1 .Cl ear() 
Try 
' Convert quantity to numeric variables. 
Ouantitylnteger = Integer.Parse(OuantityTextBox .Text) 
Try 
' Convert price if quantity was successful . 
PriceDecimal = Decimal.Parse(PriceTextBox.Text) 

562 
l ' 
C 
Additional Topics in Vis!Ull Basic 
Figur e 
1 4 . 2 
8ookSalef orm.vb LDoign] X 
The calculatu:mformfrom 
Chapter 3 with an 
ErrorPravider added . 
.it R 'n R for Reading ·n Refreshment 
Book Sales: 
Quanti:y 
!lit 
2rice 
Exie nC ed Price 
1S% 0~count 
Diso~11nt~ ~ice 
~slcu!afe 
J 
1 
t jesr s~a J 1 
~ J 
0 Crro•·P rc~Viderl 
' Calculate values for sale. 
ExtendedPriceoecimal = auantitylnteger * Priceoecimal 
DiscountDecimal = ExtendedPriceDecimal * DISCOUNT_RATE_Decimal 
DiscountedPriceDecimal = ExtendedPriceDecimal - DiscountDecimal 
' Format and display answers for the sale. 
ExtendedPriceTextBox.Text = ExtendedPriceoecimal.ToString("C") 
DiscountTextBox.Text = DiscountDecimal.ToString( "N") 
DiscountedPriceTextBox.Text = DiscountedPriceoecimal.ToString( "C") 
Catch ex As Exception 
' Handle a price exception. 
ErrorProv ider1 . SetError ( PriceTextBox, "Price must be numeric . ") 
With PriceTextBox 
. Focus() 
. SelectAll () 
End With 
End Try 
Catch ex As Exception 
· Handle a quantity exception. 
ErrorProvider1 . SetError (QuantityTextBox, "Quantity must be numeric. ") 
With auantityTextBox 
.Focus() 
.SelectAll() 
End With 
End Try 
End Sub 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
Private Sub ClearButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ClearButton.ClicK 
' Clear previous amounts from the form . 
TitleTextBox .Clear() 
PriceTextBox.Clear() 
ExtendedPriceTextBox .Clear() 
DiscountTextBox.Clear() 
DiscountedPriceTextBox.Clear() 
With ouantityTextBox 
.Clear() 
. Focus() 
End With 
End Sub 
Private Sub ExitButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitButton.Click 
' Exit the project . 
Me.Close() 
End Sub 
End Class 
T he l\IaxLength and Character Casing Ps·opes·ties 
You can use the l\faxLengtb and Cbru·actet·Casiug pi'Opm·ties of text boxes 
to help the user enter correct input data. If you set the MaxLength property. the 
user is unable to enter more characters than the maximum. The user interface 
beeps and holds the insertion point in place to indicate the error to the user. 
The CharacterCasing property has possible values of Normal. Upper. or Lower. 
with a default of Normal. lf you change the setting to Upper. for example, each 
character that the user types is automatically converted to uppercase. with no 
error message or waming. Figure 14.3 shows a State text box on a fo1m. The 
user can enter only two characters, and any characters entered are conveJted to 
uppercase. 
Note: Although the MaxLength property limits user input. the program can 
assign a longer value to the text box in code, if necessary. 
F ield-Level Valiclation 
So far aU of the validation you have coded is for the entire form. after the user 
clicks a button such as OK, Calculate. or Save. If the form has many input fields. 
the validation code can be quite long and complex. Also. the user can become 
confused or rumoyecl if multiple message boxes appear. one after another. You can 
take advantage of the Validating event. the Causes Validation property. and the 
ErrorProvider components to perform field-level validation, in which any error 
message appears as soon a;; the user attempts to leave a field with invalid data. 
Fi g ur• e 14.3 
To help the user enter 
only good data, the 
StateTextBox.il1a.-rLength 
property is set to 2 and the 
CharacterCasing property i..s 
set to Upper. 
563 

S64 
\ 
S 
l 
<\ 
L 
R 
.\ 
S 
( ' 
Additional Topia in Vi•ual &.ic 
[ alug the \<aUdathJg Evt•ut ami CausesV:liMatioo Pm t:~er·ty 
As the u.ser enters data into input fields and tabs from one control to another. 
multiple events occur in the following order: 
Enter 
Gotfocus 
Leave 
Validating 
Validated 
LostFocus 
Although you could write event procedures for auy or all of these events. the 
Validating event is the best location for validation code. The Validating event 
procedure's header includes a CancelEventArgs urgwnenl. which you can use to 
cancel the event and return the focus to the control that is being validated. 
Each control on the fonn has a C:ausesValidation property that is set to 
True by default. 't'hen the user finishes an entry and presses Tab or clicks on 
auother control. the Validating event occurs for the control just left. That is. the 
event occurs if the Cau.sesValidation property of the new control (receiving the 
input focus) is set to True. You can leave the Causes Validation property of most 
controls set to True. so that validation occurs. Set Causes Validation to False on 
a control such as Cancel or Exit to give the user a 1ray to bypass the validation 
if he or she doesn't want to complete the transaction. 
In the Validating event procedure. you can perform any error checking and 
display a message for the user. If the data value does not pass the error check-
ing. set the Cancel property for the e argwnent of the event to True. This can-
cels the Validating event and returns the focus to the text box. making the text 
box "sticky." The user is not allowed to lea1•e the control until the input passes 
validation. 
Private Sub FirstNameTextBox_Validating(ByVal sender As Object, 
ByVal e As system.ComponentModel.CancelEventArgs 
) Handles FirstNameTextBox.Validating 
' Validate for a required entry. 
' Cancel any previous error. 
ErrorProvi der1. SetError(Fi rstNameTextBox, "") 
' Check for an empty string. 
If FirstNameTextBox.Text = String .Empty Then 
' cancel the event . 
e .Cancel = True 
ErrorProvider1.SetError (FirstNameTextBox, "Required Fi eld. ") 
End If 
End Sub 
One note of caution: Tf you use the validating event on the field that re-
ceives focus when the fonn is first displayed and require an entry, the usen,ill 
be unable to close the form without filling in the text box. You can work around 
this problem by setting e . Cancel = False in the form's FonnCiosing event 
procedure. 

C
II
,\I'T
.:R 
II 
Private Sub ValidationForm_FormClosing(ByVal sender As Object, 
ByVal e As System.Windows.Forms. FormClosingEventArgs 
) Handles Me.FormClosing 
' Do not allow validation to cancel the form's closing. 
e.Cancel = False 
End Sub 
A Valitlallou E:~o.aUJ[JI4' l'rog•·am 
The following program combines many of the techniques presented in this sec-
lion. The form (Figure 14.4) has an Error Provider component. and all controls 
have their CausesValidation property set to True. The StateTextBox has its 
MaxLength property set to 2 and its CharacterCasing property set to Upper. Al-
though it seems oul of place. the AmountTexLBox is included s trictly to show an 
example of numeric range validation. 
565 
r uu rid:t level Vahdation 
The Validation example form. 
which provuu3fudd-kuel 
validation. 
'Program: 
'Programmer: 
'Date: 
'Description: 
'Folder: 
~PCode 
tf1o.n (1·1D) 
Ch14Validation 
Bradley{Millspaugh 
June 2010 
Demonstrate validation using the Validating event 
and an Error Provider component. 
Ch14Validation 
Public Class ValidationForA 
Private Sub FirstNameTextBox_Validating(ByVal sender As Object, 
ByVal e As System.ComponentModel.CancelEventArgs 
) Handles FirstNameTextBox.Validating 
' Validate for a required entry. 
' Cancel any previous error. 
ErrorProvider1. SetError(FirstNameTextBox, "") 

566 
l ' 
s u ,, 
I, 
' Check for an empty string. 
If FirstNameTextBox .Text = String. Empty Then 
' Cancel the event. 
e.cancel = True 
C 
AdditioMI Topics in Visual Basic 
ErrorProvider1.SetError(FirstNameTextBox, "Required Field." ) 
End If 
End Sub 
Private Sub LastNameTextBox_Validating(ByVal sender As Object, 
ByVal e As System.ComponentModel.CancelEventArgs 
) Handles LastNameTextBox .Validating 
' Validate for a required entry. 
' Cancel any previous error. 
ErrorProvider1 .SetError(LastNameTextBox, "" ) 
If LastNameTextBox .Text.Length = 0 Then 
' cancel the event. 
e.cancel = True 
ErrorProvider1 . SetError ( LastNameTextBox, "Required Field. ") 
End If 
End Sub 
Private Sub StateTextBox_Validating(ByVal sender As Object, 
ByVal e As System.ComponentModel.CancelEventArgs 
) Handles StateTextBox.Validating 
' Make sure the state is two characters. 
' The control's Charactercasing property forces uppercase . 
The Maxlength property limits input to 2 characters. 
' Cancel any previous error. 
ErrorProvider1 . SetError (StateTextBox, "" ) 
If StateTextBox.Text.Length <> 2 Then 
' Cancel the event and select the text . 
e.cancel = True 
StateTextBox.SelectAll() 
ErrorProvider1 . Set Error ( StateTextBox, "Must be 2 characters. ") 
End If 
End Sub 
Private Sub AmountTextBox_Validating(ByVal sender As Object, 
ByVal e As System.ComponentModel.CancelEventArgs 
) Handles AmountTextBox.Validating 
' Validate a numeric amount for a range of values. 
Dim Amountinteger As Integer 
' Reset any previous error. 
ErrorProvider1. SetError(AmountTextBox, "" ) 
Try 
Amountinteger = Integer.Parse(AmountTextBox .Text) 
If Amountlnteger < 1 Or Amountinteger > 10 Then 
' cancel the event. 
e.cancel = True 
AmountTextBox.SelectAll() 
ErrorProvider1 . SetEn·or(AmountTextBox, _ 
"Amount Rust be between 1 and 10, inclusive." ) 
End If 

C
II
,\I>
'I'
I'
R 
II 
Catch ex As Exception 
' Cancel the event. 
e . cancel = True 
AmountTextBox.SelectAll() 
ErrorProvider1.SetError(AmountTextBox, _ 
"Enter a numeric amount between 1 and 10, inclusive ." ) 
End Try 
End Sub 
Private Sub ValidationForm_FormClosing(ByVal sender As Object, 
ByVal e As System.Windows.Forms. FormClosingEventArgs 
) Handle.s Me. FormClosing 
' Do not allow validation to cancel the form's closing. 
e . cancel = False 
End Sub 
End Class 
Capturing Keyst1·okes f1·om the Use•· 
At times you may want to determine individual keystrokes entered by the 
user. You can check for the key that the user entered in a control's Key Down, 
KeyPress. or KeyUp event procedure. These events occur in the order listed 
for most keyboard keys. But keystrokes that ordinarily cause an action to 
occur. such as the Tab key and the Enter key. generate only a Key Up event. 
The e argument of the KeyPress event procedure is KeyPressEventArgs. 
which has a KeyChar property that holds the character pressed. Another prope1ty 
of the KeyPressEventAr~ is the Handled property. which you can set to True to 
say."[ have already taken care of this keystroke; it doesn't need any fmther pro-
cessing." TI1is action effectively "throws away" the keystroke just entered. 
[n the following code example. the KeyChar property is checked in the 
KeyPress event procedure. lf the character is not a digit or a period. then 
e . Handled is set to True. which does not pass the keypress on to the text box. 
This means that only digits or a period are allowed through. You can use this 
technique in a text box for which you want to allow only numeric data to be en-
tered. such as a Quantity or Price text box. 
Private Sub PriceTextBox_KeyPress(ByVal sender As Object, 
ByVal e As System.Windows.Forms .KeyPressEventArgs 
) Handles PriceTextBox.KeyPress 
' Accept only a digit or a period. 
If Not Char.IsOigit(e.KeyChar) And e.KeyChar <> 
e .Handled = True 
End If 
End Sub 
Using tbe Masked Text Box fm· Validation 
Then 
Although you leamed about the masked text box in Chapter 2. you may not 
have thought about using it to aid data validation. You can set the Mask property 
567 

568 
v 
S 
l l 
,\ 
I. 
C 
Additional Topics in Visual Basic 
of a masked text box to any of the predefined masks or write your own. The eas-
iest way to write your own is to modify one of the existing masks, or you can fol-
low the syntax rules of a regular expression (see " Regular Expressions (Visual 
Studio)" in MSDN Help). 
The predefined masks include date, time. phone number. social security 
number. and ZIP code fotmats. If the user enters invalid data for the mask. such 
as a letter for a numeric month in the date mask. the character is not accepted. 
l. What is the purpose of the following code: 
ErrorProvider1 .SetError(QuantityTextBox, "Quantity must be numeric ." ) 
2. Name two properties of a TextBox control that help the user enter cor-
rect input data. Describe the function of each. 
3. What is meant by fzeld-level validation? 
Code Snippets and Samples 
A great time-saving feature that was added in VB 2005 and expanded in 
subsequent versions is the ability to add segments of code for a variety of 
topics directly in the editor. You may wonder why this topic wasn't covered 
earlier. but it was really necessary for you to understand the code that you 
add to your program. Now that you understand the basic concepts, you wiU 
find that many of your new tools and techniques come from looking at sam-
ple projects. Visual Studio includes many sample projects as well as code 
snippets. 
Code Snii>J>e ls 
Code snippets are small samples of code that can show you how to accomplish 
many programming tasks. The Insert Snippet menu option is available on the 
context menu (right-click) of the Editor window (Figure 14.5). When you select 
a snippet type, the editor places the code right in your program, where you can 
study it and/or modify and use it. 
You can learn many useful techniques by opening snippets. 
Sample P1·ojects 
Vlliual Stuo.liu iudutles mauy .sam pit: projects lltat you cau use lu leam uew lt:elt-
niques. From the Help menu, select Samples. 
The walkthroughs in Help are another avenue for pursuing your study 
of VB. These tutorials give step-by-step introduction to many techniques 
and controls. 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
Insert Snippet: :::::---.--::--:-:--::,.---:::--:::-- ------
'[3 ApplicDtion - Compiling, P..esource::, .:md Sd tings 
n Code Patterns · Jt For Each, Tl)' Catch, Property, eic 
0 Dab - Uf~Q. XML, D.c;gn«, ADO.NET 
EJ Fundcmenl~ l s · Colltdicns, Deh Type~, File: Ststc:m, Meth 
Cl Office Development 
[j: Other - Connecti..,ity, SecwitY: Workflow 
u 
Test 
D Win dew~ Forms Applicatons 
a. 
E:3 Windows Sysicm · l ogging, Processes, Registly, Ser.1iccs 
Insert Snipptt: Code Pattetns · If, for Each, 1 ry Catch. Propert'f, etc > I 
b. 
ILl Condtionals and Loops 
1 
lu .En~n· s, Generics, ln tei1Cice~ .Struct UI5 
0 
... Error -land ling (Exceptio!:'s) 
~ 
ILJ Propui:ies., ProceciUies, Events 
Try 
Fi nally 
End Tr·y 
c. 
Multiple Document Interface 
All of the projects so far have been single documeut in terface (SDI). Using 
SDI. each form in the project acts independently of the other forms. However. VB 
also allows you to create a multiple docllllleut interface (MDJ). For an exam-
ple of MDI, consider an application such as J\llicrosoft Word 2003. Word has a 
pal'eut fonu (the main window) and child for·ms (eacb document window). You 
can open multiple child windows. and you can maximize. minimize. restore. or 
close each child window, which always stays within the boundaries of tl1e parent 
J+indow. When you close the parent window. all child windows close automatically. 
Figure 14.6 shows an MDI parent window with hvo open child windows. 
With MDI. a parent and child relationship exists between the main form 
and the child fonns. One of the rules for MDI is that if a parent form closes. all 
of its children leave with it. Pretty good rule. Another rule is that children can-
not wander out of the parent's area; the child form always appears inside the 
parent's area. 
VB allows you to have fom1s that act independently of each other. You may 
have a parent form and several child forms and some forms that operate inde-
pendently. For example. a splash form likely should remain SOl. 
One feature of MD I is that you can have several documents open at tl1e same 
time. The menu strip generally contains a Window menu that allows you to dis-
play a list of open windows and move from one active document to another. 
C1·eating an l\'IDI P 1·oject 
You can make any fonn a parent. In fact. a form can be both a parent and a 
child fonn Oust as a person can be both a parent and a child). To make a form 
569 
a. Right-click in the Editor 
wind= and select Insert 
Snippet tc see the categories of 
snippets available: b. Sekct a 
category: and c. The code 
appears in the Editcr wind=, 
where you can modify it for 
your own use. 

570 
v 
S 
l l 
,\ 
I. 
C 
Additional Topic• in Visual Basic 
FiJtnr e 
1 4.6 
The main form is the parent and the smaUer forms are the child forms in an MDI application. 
file 
Qbphy 
t!indow 
Toolhar ----> J~.~ 
~~----------------------------~------------------~1 
p .
1 
•-! r iiU 
- n." 
'" 
r-1 I ~ l 
Toolhar buttons/ 
~ Child 1\\lo.Oo,ument t 
~~ 
-
Status bar/ 
into a parent, simply change its lsMdiComainer (}I'O()Ct' t y to True in the 
Properties window of the designer. One project can have multiple ch.ild forms 
and multiple parents. 
Creating a child is almost as easy. Of course. your project must contain 
more than one form. You make a form into a child aindow in code at run time. 
You must declare a new variable for the fonn. instantiate it, set the child's 
MdiParent property to the cuJTent (parent) form, and then show it. 
Private Sub ChildOneMenuitem_Click(ByVal sender As system.Object , 
ByVal e As System.EventArgs) Handles ChildOneMenuitem.ClicK 
' Display Child One form. 
Di m AChil dOneForm As New Chil dOneForm 
AChil dOneForm. MdiParent =Me 
AChildOneForm.Show() 
End Sub 
Our example application allows the user to display multiple child windows. 
Therefore. the title bar of each child window should be w1ique. We can accom-
plish this by appending a number to the title bar before displaying tl1e form. This 
is very much like Microsoft Word. with its Documentl. Document2. and so forth. 
' Module-level declarations. 
Dim ChildOnecountinteger As Integer 
Private Sub ChildOneMenuitem_ClicK(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ChildOneMenuitem.ClicK 
' Display Child One form. 
2!1812008 PM 12:55:21 
v 
Status ba1 labels 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
Dim AChildOneForm As New ChildOneForm 
AChildOneForm.MdiParent = Me 
ChildOnecounti nteger += 1 
AChil dOneForm .Text = "Child One Document " & 
Chil dOneCountlnteger .ToSt ring() 
AChildOneForm.ShOW() 
End Sub 
Adding a Will(low Menu 
A parent form should have a Window menu (Figure 14.7). The Window menu 
lists the open child windows and allows the user to switch between windows 
and arrange multiple child windows. Take a look at the Window menu in an ap-
plication such as Word or Excel. You will see a list of the open documents as 
well as options for arranging the ~tindows. 
Eile 
Qisplay ~~------. 
Ti~J:iorizontally 
Tile Yotic11lly 
s;.ascade 
!. Child One: Document 1 
G ~Ch ildlwo Oocumem l 
After you create the menus for a MenuStrip control. you can make one of 
the menus display the list of open child windows. Display the properties of the 
MenuStrip (not a menu item) in the Properties window. Drop down the list for 
the l\'ldiWindowListlte m p1·ope1-ty. which shows all of the menu items that 
belong to the MenuStrip, and select WindowToolStripMenuitem (Figure 14.8). 
To actually arrange the windows requires a little code. 
·~x 
MenuStrlpl System.Windows.forms.Menu ~ ... 
~., ~ l El ·-' • 
t" Maxin1umSize 
0, 0 
"i$#6ifM§Idi!§)I,StrlpMenultemG 
[) M1 Di::playl ooiSt•ipMenultem 
I 
Mo Filc:TooiStripMcnuftcm 
~ Pad 
LJ 
Ren eiNIOae 
l'llanagerr;.Enaenv•oa 
RightToldt 
No 
~~wlistltem 
Layout Optio ns 
Specifics the: ilc:111 whose OropOown will show 
the lis! of ML*-Mndows. 
Wl1en several child windows are open, the windows may be arranged in several 
different layouts: tiled vertically, tiled horizontally. or cascaded. You set the 
type of layout in code with an ar~ument of the LayoutMdi met110d. 
Me . LayoutMdi(Mdilayout .TileHorizont al) 
571 
Fi~11r e 14 . 7 
The Window menr£i11-an MDI 
application lists the open child 
windows and allows the user to 
select the arrangement of the 
windows. 
Fi g ure 14.8 
Set the MdiWiruk>wListltem 
property to make the Window 
menu display the list of open 
MDI child windows. 

512 
v 
S 
l l 
,\ 
I. 
C 
Additional Topics in Visual Basic 
You can use one of the three constants: TileHorizontal, TileVenical. and 
Cascade. 
Private Sub TileHorizontallyToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles TileHorizontallyToolStripMenultem.Click 
' Arrange the child forms horizontally. 
Me. LayoutMdi ( Mdi Layout. Ti 1 eHor i zonta 1 ) 
End Sub 
Private Sub TileVerticallyToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles TileVerticallyToolStripMenultem.Click 
' Arrange the child forms vertically. 
Me. Layout Mdi (Mdilayout .Ti1 eVerti ca1) 
End Sub 
Private Sub cascadeToolStripMenultem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles cascadeToolStripMenultem.Click 
' Cascade the child forms . 
Me. LayoutMdi (Mdi l ayout.Cascade) 
End Sub 
Toolbars and Status Bars 
You can enhance the usability of your programs by adding features such as a 
toolbar and/or status bar. You probably find that you use the toolbars in appli-
cations as an easy shortcut for menu items. Status bars mrmally appear at the 
bottom of the screen to display information for the user. 
To create a tool bar. you need a Too!Strip coutrol and the images in Re-
sources to appear on the Too1Strip buttons. 
'1'oolba•·s 
You use the TooiStrip control (Figure 14.9} in the Menus & Too/bars tab of 
the toolbox to create a TooiStrip object for your project. The new TooiStrip is a 
container that does not yet contain any objects. After you add the Too!Strip. 
you can add several types of objects. The strip may contain ToolStripButtons. 
ToolStripLabels. and several other types of objects. 
~ Menus & T oolbars 
·~ 
Pointer 
~ ContextMenuStrip 
~ MenuStrip 
b 
Statu;Strip 
~ TooiStrip 
Fi g ur e 
1 4. 9 
The ToolStrip a.nd StatusStrip 
control. in the t<>olbox. 

C
ll
i\l1
'1'1iR 
II 
Seuing U [) the Buttons 
The easiest way to set up buttons for a ToolStrip is to click on its Items property 
in the Properties window. which opens the Items Collection Editor (Figure 14.10). 
573 
Fig••••e 14 . 10 
Add buttons w a Too/Strip using the Items Col/.ection Editor. which you can openfrotn the Too/Strip's Items property in the 
Properties windcrw. 
I:ems Collection Editor 
Sefect item and add to list below: 
@ Sutton 
Men1bers: 
,.j~ ·-·-······--·· ····-··- ····· G 
@ ChildOne T coiSttipButtOM 
r;-1 
~ ChildTwo1ooiSbipButton 
~ 
lKl 
IooiStr;p 
TooiStnpl 
~~ ~ ~ 
AllowDrcp 
Allow1temRe.order 
AtlowMerge 
Contex.tMenuStrip 
Enabled 
lmef·Aod( 
Showltemloollips. 
Tablndex 
TobStcp 
ViSible 
• Oab 
) (Applic,bonSdtin9s) 
-> (DaBSindings) 
Tag 
False 
False 
1 rue 
(none) 
Tru~ 
NoControl 
True 
4 
F"hc 
True 
4 
Design 
(fJame) 
TooiStripl 
In the ToolStrip's Items Collection Editor. you can drop down the list of 
available types of objects (Figure 14.11). For now you will use only the button. 
Click on the Add button, which adds a new ToolStripButton object to the 
collection. Then you can set the proper1ies of the new button. such as its 
Name and ToolTipText properties. Make sure to give it a meaningful name. For 
example, a button that displays the Summary Window might be called 
SmmuaryToolStripButton. and one that displays the About box might be called 
AboutToolStripButton. 
You also can assign an image to the button's Image property in the 
Items Collection Editor window. To display only the image and no text. set 
DisplayStyle to Image. 
Note that with the ToolStrip selected. you can click Insert Standard Items 
below the Properties window. You will get New. Open. Save. Print. Cut. Copy. 
and Paste buttons with pictures added automatically. However, you must write 
the code for each button yourself. 
Coding for· tbe TooiSu·ip 
OK 
Jl 
C.•ncd 
~ 
To code the actions for a ToolStrip button you can create a new event procedure 
for the button click. However. since most buttons are actually shortcuts for 
menu items. you normally only need to add your'looLStripButton.CJick event to 
the Handles clause for the menu event procedure. 
Set the Toolnp Text property of each 
TooiStrip button to aid the user in 
case the meaning of each graphic is 
not perfectly clear. • 

574 
v 
S 
l l 
,\ 
I. 
C 
Additional Topic• in Visual Basic 
F i j,! u re 1 4.11 
Drop down the list of available objects that can be added to the Items collection of a ToolStrip control. 
[tems Collection £ditor 
11/ l....a-1 
~Eied thm and i!dd to l1~t betO\o\~ 
l oobtrip 
TooiStript 
Jill Button 
I· [ 
Add J 
~U J 
I 
Jillllillm!!l 
Allow•Dtop 
False 
~ 
A label 
""' 
I 
.OIIowttemR.eorder 
False 
IE 
• 
Spi ~Buncn 
AlfowMerge 
True 
~ OropOownSution 
~ 
~ 
Contoctl\.lc:nuStrip 
(none.) 
I Separator 
~ 
Em bled 
True 
~ 
ComboBox 
IX 
lmeMocle 
NoControl 
~ Text:Box 
,..,. 
S."'l-owlhm 1 oollip:; 
True 
ED Pro~ rcs~Bor 
Toblndcx 
4 
Tab Stop 
False 
·-
Visible 
True 
A Dab 
""' 
• (Applic.)tionSc:tiings) 
v (DatllSindiogs) 
I 
Tag . 
Design 
(f.bm•) 
TociStripl 
-
I 
OK 
jlcencel I 
Private Sub DisplayChildOneMenuitem_Click(ByVal sender As system.Object, 
ByVal e As System.EventArgs) _ 
Handles DisplayChildOneMenultem.Click, Chi l dOneTool StripButton.Cl ick 
' Display Child One form . 
Dim AChildOneForm As New ChildOneForm 
AChildOneForm.MdiParent = Me 
ChildOnecountlnteger += 1 
AChildOneForm.Text = "Child one Document " & 
ChildOnecountlnteger.ToString() 
AChildOneForm.Show() 
End Sub 
Status Bm·s 
A status bar is usually located at the bottom of a fonn (refer to Figure 14.6). A 
status bar displays information such as date, lime. status of the Caps Lock or 
Num Lock key, or error or infonuational messages. If you want a status bar on 
your fonn. you need to take two steps: add a StatusStl'ip couu·ol (refer to 
Figure 14.9) to your form and add TooiStl'ipStatusLabel objects to the 
StatusStrip. 
Just as with Too!Strips, the easiest way to add items to the StatusStrip ob-
ject is to select its Items property in the Properties '"indow to open the Items 
Collection Editor. Click on the Add button to add a new ToolStripStatusLabel 
object. Then set the propetties of the Too!StripStatusLabel, including the ob-
ject's Name and ToolTipText properties. 

C 
II 
1\ 
1• 
'I' 
I' 
ll 
II 
You can make the labels appear at the right end of the status bar. as in Fig-
ure 14.6. by setting the StatusStrip's RightToLeft property to Yes. The default 
is No. When you set Right To Left to Yes, the labels will appear in the opposite 
order that you define them. 
A.'1Signing Values to TooiStt'ipStatusLabels 
A ToolStripStatusLabel can hold texi. such as the current date. the time. or er-
ror messages. You assign values to the Text property of labels at mn time: 
OateToolStripStatusLabel.Text = Now.ToShortDateString() 
TimeToolStripStatusLabel .Text = Now.ToLongTimeString() 
InformationToolStripLabel.Text =" It's very late." 
Displaying the Date and Time 
You use the properties and methods of the DateTime su·uctm·e to retrieve 
and f01mat the current date and time. The Now pt·opet·ty holds the system 
date and time in a numeric format that can be used for calculations. You 
can format the date and/or time for display using one of the following 
methods: ToShortOateString, ToLongOateString, ToShortTimeString, or 
ToLongTimeString. The actual display format of each method depends on the 
local system settings. 
You can set the display value of status strip labels in any procedure: how-
ever. the display does not update automatically. Generally you will set initial 
values in the Fonn_Load event procedure and use a Timer component to up-
date the tin1e. Or you can skip the Form_Load event. figuring that in just one 
second the tinler will fire and the clock will update. 
Private Sub ClockTimer_Tick(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ClockTimer.Tick 
' Update the date and time on the status bar. 
' Interval = 1000 milliseconds (one second) . 
OateToolStripStatusLabel.Text 
Now.ToShortDateString() 
TimeToolStripStatusLabel.Text = Now.TolongTimeString() 
End Sub 
Private Sub ParentForm_Load(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles MyBase.Load 
' Display the date and time in the status bar. 
ClockTimer_Tick(Sender, e) 
End Sub 
Don't forget to set t!te Euauleu auu Interval properties uf your timer. 
l. Write the statements to display AboutForm as a child form. 
2. Assume that you have a ToolStrip called Too!Stripl that has buttons for 
Exit and About. How are the buttons coded? 
3. Wl1at steps are necessaq to display the current time in a status strip la-
bel called CurrentTimeToolStripStatusLabel? 
575 

576 
l ' 
C 
AdditioMI Topics in Visual Basic 
Some Helpful Date Controls 
. 
There are many other controls in the toolbox. You may want to experiment with 
some of them to see how they work. This section demonstrates two more con-
trols: the DateTimePicker and Month Calendar controls. 
The Calenda1· Controls 
The Date Time Picker and the MonthCalendar controls (Figure 14.12) provide the 
ability to display calendars on your fonn. One advantage of the DateTimePicker 
is that it takes less screen space; it displays only the day and date unless the user 
drops down the calendar. You can use either control to allow the user to select a 
date. display the current date. or set a date in code and display the calendar with 
that date showing. 
Fign••e 1 4.l2 
The calendar controls: The DateTimePicker drops down a calendar when selected and s/wws the selected day and date when 
not dropped down: the MonthCalendar control displays the calendar. 
•';} Caler.dar Control!; 
[ c 
1011 .... £31,1 
DateTimePicker -
-i>l, Mor.doy 
h.gurl 02. 2010 
...!... 
Augusl, 2010 
..!.! 
25 2S 27 
~t 
2~ J;) :1 
, m ~ 
5 
~ 
1 
s 
3 
10 
11 
12 n 
14 
15 16 
;7 1S 19 20 21 
22
2l
2l
2S
~
27
28 
29 30 l l 
1 
' 
I ~Todav: 11/212010 
{J 
~ Auguct, 2010 
25 "" 
z, ;.g A 
I ~3 • 
3 
3 
1C 
11 
12 
15 
16 
17 1& H 
2Z 23 2< 25 z• 
23 30 31 1 
2 
<::l Today: 81212010 
..!J 
.J!J 
~{, 
~ 
7 
13 1• 
2{} 
21 
27 28 
3 
J 
-
The DateTimePicker control contains a Value property for the date. When 
t11e control initially displays. ilie Value is set to the current date. You can let the 
user select a date and then use the Value property or you can assign a Date 
value to the property. 
The following example allows ilie user to enter a birthdate in a text box. It 
converts the text box entry in a Try /Catch in order to trap for illegal date 
fonnats. 
I 
Month Calendar 
BirthdateDateTimePicker.Value = Convert.ToDateTime(BirthdateTextBox .Text) 
This example program demonstrates the use of the calendar, date func-
tions. and some interesting features of Visual Basic. Figure 14.13 shows the 
fonn for the project. 

( ; 
II 
'' 
I' 'I' 
1•: 
ll 
II 
II 
I• 
l: 
~'*'<>dey Odc:Ca 21 '9n =-:::::I4t! 
. 
Oc·cbt•. 1910 
. 
1oo Moo 1ue -Ned ThJ fti Sn 
27 
2& 
l 
5 
11 
IZ 
lS 
19 
.lS 
26 
I , 
Z9 
'l 
I 
2 
3 
6 
7 
e 
9 
10 
13 
14 
15 
16 
17 
zo IJ.D 22 
23 
24 
21 
zs 
29 
lO 
31 
3 
4 
s 
6 
7 
L_l 1 odo)" 8/l/2010 
Chapter 14 Calendar 
BradleyfMillspaugh 
June 2010 
The birthdo.y f orm with 
the colendar for the 
Date'nme Picker dropped 
down. 
'Program: 
'Programmer: 
'Date: 
' Description: 
Entorc and tests a date, displays a calendar, and usee 
Date functions . 
'Folder: 
Ch14Calendar 
Public Class CalendarForm 
Private Sub OisplayButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles DisplayButton.Click 
· If the date is valid set the calendar and display. 
Try 
With BirthdateDateTimePicker 
.Value = Convert.ToDateTirne(BirthdateTextBox.Text) 
.Visible =True 
End With 
catch ex As Exception 
MessageBox. Show(· Invalid Date") 
BirthdateTextBox.Focus() 
End Try 
End Sub 
Private Sub BirthdateDateTirnePicker_ValueChanged(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles BirthdateDateTimePicker.ValueChanged 
' Calculate the age when the calendar value changes. 
Dim Yearslnteger As Integer 
With BirthdateDateTimePicker.Value 
' If birthday already passed this year. 
If .DayOfYear <= Now.DayOfYear Then 
Yearsinteger =Now. Year - .Year 
Else 
' Birthday yet to come this year. 
Yearsinteger 
Now. Year - .Year -
End If 
End With 
571 

578 
l ' 
If Yearslnteger > o Then 
AgeTextBox.Text = Yearsinteger.ToString() 
End If 
End Sub 
C 
AdditioMI Topics in Visual Basic 
Private Sub ExitButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ExitButton.Click 
' Terminate the project. 
Me.Close() 
End Sub 
Private Sub CalendarForm_Load(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles MyBase.Load 
' Set the calendar to today•s date. 
BirthdateDateTimePicker.Value = Today 
End Sub 
End Class 
Notice the statements in the ValueChanged event procedure for t11e Date-
TimePicker. You can use aU of the properties of the system time on the Value 
prope1ty of die control. 
vearsinteger = Now. Year - BirthdateDateTimePicker.Value.Year 
You can see all of the methods and properties using Visual Studio's 
IntelliSense feature. 
-
F('Nibaek 14.:1 
l. Write die code to assign the date from AppointmentDateTimePicker to 
the variable AppointmentDateTime. 
2. Use the IntelliSense feature or Help to list five properties of the Value 
prope1ty for a DateTimePicker control. 
3. Wl1ich of t11e five prope1ties listed in Question 2 are also available for 
die Now prope1ty? 
Displaying Web Pages on a Windows Fo~_m 
You can add a \'\1ebBrowseJ' conu·ol to a Windows Form and display Web 
pages on the fonn. The toolbox includes a WebBrowser control (Figure 14.14). 
The WebBrowser control can make your form resemble a browser window in 
Internet Explorer. or you can use the control to display any HTML page, online 
or offiine. Note that you must have a live Internet com1ection to display Web 
pages in the Web Browser control. 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
The We bB1·owse1· Cont1·ol 
When you add a WebBrowser control to an empty Windows Form. by default 
the control is set to fill the entire form (Dock = Fill). You can add a ToolStrip 
control to provide navigation. Some useful properties. methods. and events of 
the WebBrowser control follow: 
579 
Figar e 14 . 1 4 
The Windows WebBrowser 
control in the toolbox. 
Uri property 
Set this property to a URL at design time or run time to navigate to the 
entered page. 
WebBrowser1 .Url = New Uri( "http: //www.microsoft.com") 
Navigate method 
Execute this method at run time to navigate to the desired page. 
WebBrowser1.Navigate(New Uri( "http: //www.microsoft .com")) 
OocumentCompleted event 
A page has finished loading. You can use this event to add the page to the 
ItelllS property of the combo box. 
ToolStripComboBox1.Items .Add(WebBrowser1.Url) 
DocumentTitleChanged event 
A page '~ith a new title finished loading. Use this event to change the 
form's title bar to the Web page's title. 
Me.Text = WebBrowser1.DocumentTitle 
Document Title propetty 
Retrieves the title of the current Web page. 
Notice the use of"Uri" in the preceding table. A Uniform Resource Identi-
fier (URI) is a Web address that is more generic than "URL". The Web Browser 
control requires that aU URL-s be instances of the Uri class. 
A Wc bB1·owse•· P1·og1·am 
The folloning Windows program displays a Web page in a WebBrowser control. 
The form has a ToolStrip control 1vith a ToolStripComboBox and a ToolStrip-
Button to aid navigation. When the user enters a new URL in the text portion of 
the combo box. he or she can either press Enter or click the Go button on the 
toolbar. The ToolStripComboBox_KeyUp event procedure checks for the Enter 
key, and the ToolStripButton_Click event procedure checks for a click on 
the button. Figure 14.15 shows the completed Windows Form 'vith a Web page 
displayed. 
The Pt·ogram Code 
'Program: 
'Date: 
'Description: 
'Note: 
Ch14WebBrowser 
June 2010 
Add Web browser to a Windows Form using t he WebBrowser contr ol. 
The computer must have an established l i nk t o the Internet for 
this program to work . 

sao 
S 
L 
\ 
1, 
C 
Addilional Topic• in 11..ual Ba.ic 
FIJ( nr (" 
1 4.
1 ~ 
This Windows Form di~plays a Web page in a WebBre>wsl'f control. A Toa/Strip contre>l contains a. ToolStripComboBox item 
and a ToolStripButton item. 
,...J t\1iaosoft Co•poutJoo 
http/'www miCr~oft.com/Wu:/d.f~o_u_
l._
ll:.._
px _ ____ 
_ 
• Go 
Your W1ndows swff goes where you go 
• • 
Nf\11'. 
! n.,., ...... f'- • h,.. • "1 ,.."!,. .. , ~1 filM 
•nt~•·· , 
Public Class WebBrowserForm 
Private Sub WebBrowser1_DooumentCompleted(ByVal sender As Object, 
ByVal e As System.Windows.Forms.WebBrowseroocumentCompletedEventArgs 
) Handles WebBrowser1.DocumentCompleted 
' New document loaded. Add the URL to the combo box. 
ToolStripCOmboBox1 .Text = WebBrowser1.Url.ToString() 
ToolStripCOmboBox1 .Items.Add(ToolStripComboBox1.Text) 
End Sub 
Private Sub WebBrowser1_DocumentTitleChanged(ByVal sender As Object, 
ByVal e As system.EventArgs) Handles WebBrowser1.DocumentTitleChanged 
' Change the form's title bar when the document changes . 
Me.Text = WebBrowser1 .DocumentTitle 
End Sub 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
Private Sub ToolStripButton1_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ToolStripButton1 .Click 
' Go button clicked; navigate to requested page. 
Try 
If Not ToolStripComboBox1.Text.ToUpper.StartsWith( "HTTP:/ / ") Then 
ToolStripComboBox1 .Text ="HTTP:// " & ToolStripComboBox1 .Text 
End If 
' WebBrowser1 .Navigate(New Uri(ToolStripComboBox1 .Text)) 
WebBrowser1 .Url = New Uri(ToolStripComboBox1 .Text) 
Catch 
MessageBox .Show( "Unable to locate the requested page ." ) 
End Try 
End Sub 
Private Sub ToolStripComboBox1_KeyUp(ByVal sender As Object, 
ByVal e As System.Windows.Forms.KeyEventArgs 
Handles ToolStripComboBox1.KeyUp 
' Check for Enter key and navigate to the requested URL. 
If e.KeyCode = Keys.Enter Then 
ToolStripButton1_Click(sender, e) 
End If 
End Sub 
End Class 
Checking f01· the Ente1· Key 
You may have noticed a strange statement in the previous section: 
If e.KeyCode = Keys.Enter Then 
This statement checks to see if the key pressed is the Enter key. 
k. you learned earlier in this chapter, you can check for the key that the 
nsP.r P.ntP.rP.Ii in a l'ontrol'"' KP.yOown. KP.yPrP.>:s, or KP.yllp P.VP.nt pm<"P.rlnrP.. Rut 
keystrokes that ordinarily cause an action to occur, such as the Tab key and ihe 
Enter key. generate only a KeyUp event. 
The e argument of the KeyUp event procedure is KeyEventArgs. which 
has a KeyCode and a KeyData property. These properties hold a numeric 
representation of the key pressed. but you can use the constants in the Keys 
enumeration to call the keys by name. For example. the Enter key has 
a KeyCode of 13. You can check for the Enter key with either of these 
statements: 
If e.KeyCode 
13 Then 
or 
If e.KeyCode 
Keys.Enter Then 
581 

582 
v 
S 
l l 
,\ 
I. 
C 
Additional Topics in Visual Basic 
In the program in the previous section. the user is expected to type a URL 
into tJ1e combo box and press Enter or click a button. To check for the Enter 
key. you need to code the combo box's Key Up event procedure. Notice that the 
line of code compares the event argument e with the desired Keys constant. 
Private Sub ToolStripComboBox1_KeyUp(ByVal sender As Object, 
ByVal e As System.Windows.Forms.KeyEventArgs 
) Handles ToolStripComboBox1 . KeyUp 
' Check for Enter key and navigate to entered URL. 
If e.KeyCode = Keys.Enter Then 
ToolstripButton1_Click(senaer, e) 
End If 
End Sub 
XML Data Files 
More and more documents are being stored as XML files. In Chapter 10 we 
discussed XML as a part of database files. The same format is also used for 
word processing and other types of office files. 
There ru·e mru1y advantages to using XML rather than other file formats. 
XrrTL is a platform-independent format that is not tied to a specific language or 
vendor. Because it is text based. you cru1 view and edit the file contents with 
text-edit tools. It is easy to make changes, such as adding fields. XML is Uni-
code compliant and can be used intemationally. 
Nodes, Elements, and Att1·ihutes 
The following section describes the terminology and stmcture of XML files us-
ing books.xml. a sample file from Microsoft that also is included in your Stu-
dentData folder. Here is a listing of books.xml for reference. TI1e tenninology 
follows the file listing. 
<?xml version=' 1.0' ?> 
<!- - This file represents a fragment of a book store inventory database --> 
<bookstore> 
<book genre="autobiography" publicationdate=" 1981 " ISBN=" 1-861003-11-0"> 
<title>The Autobiography of Benjamin Franklin</title> 
<author> 
<first-name>Benjamin</first-name> 
<last-name>Franklin</last-name> 
</author> 
<price>8.99</price> 
</book> 
<book genre='' novel" publicationdate=" 1967" ISBN="0-201 -63361 -2"> 
<title>The Confidence Man</title> 
<author> 
<first-name>Herman</first-name> 
<last -name>Melville</last-name> 
</author> 
<price>11 .99</price> 
</bOOk> 

C
II
,\I>
'I'
I'
R 
II 
<book genre="philosophy" publicationdate=" 1991 " ISBN=" 1-861001-57-6 "> 
<title>The Gorgias</title> 
<author> 
<name>Plato<tname> 
</author> 
<price>9.99</price> 
<{book> 
</bookstore> 
The first things you notice when looking at an XML file are the tags. The tags 
delineate elements of the file. The basic stntcture is a tree. starting with the root 
node (a file can have only one) and branching out in child nodes. A child also can 
contain child nodes. Nodes that are at the same level are referred to as siblings. 
Within a node there may be several different values assigned to atu-ibutes. 
The value may be placed in either single quotes or double quotes. In the fol-
lowing line. genre. publicationdate. and ISBN are attributes. 
<book genre="autobiography" publicationdate="1981 " ISBN=" 1-861003-11-0"> 
Table 14.1 describes the elements in the books.xml ftle. 
X:M.L File Tet·tuiuology 
Term 
<> 
Eleme nt 
Node 
Sibling 
~feruting 
Start-tag and end-tag 
Contents within a set of tags. 
A branch on the tree: the root node is the 
most outside with the child nodes inside. 
Nodes at lhe same le vel. 
1' u bl e 
14 . 1 
Example fa-om books.xanl 
<price></price> 
<title>The Gorgias</title> 
<author> 
<name>Plato</name> 
</author> 
Root node <bookstore> 
Child nodes <book> 
<title> and <author> are child nodes of <book> 
<title> and <author> 
S83 
Attribute 
Name values e mbedded ";thin an element: 
the name of the attribute is assigned a value 
enclosed in either single or double quotes. 
<book genre=" autobiography" 
publicationdate=" 1981" ISBN=" 1-861003-11- 0' > 
Text 
Value placed .. ;thin tags. 
Comment 
Used for remarks only. 
<first-name>Benjamin</first-name> 
<! -- This file represents a fragment of a 
book store inventory database --> 
For more infonnation about XJ\'fL and terminology. refer to the W3C rec-
onunendations. You can find recommendations at http://www.w3.org/TR/xml/ 
#sec-terminology. 
VB Tools fm· Readjng XML Fj)es 
VB includes some tools that simplify working with XML files. In this section 
you will see XDocument objects, XE!ement objects. XML literals. and how to 
use LINQ TO XML queries. 

S84 
l ' 
C 
Additional Topics in Vis!Ull Basic 
Loadiug an X!\1L File illlo au XOocmuenl Object 
You can use the Load method of an XDocument to read an Xl\IIL file. 
Tl1c XOoc muen 1. Load !\1etltod-GeneJ·al Forms 
""iC"l 
~ ~ 
Dim Identifier = XDocument. Load(Filename) 
~ ~ 
Dim Identifier As XDocument = XDocument.Load(Filename) 
For the Filename entry. you can specify a complete path or a URI; othenvise 
the Load method looks in the current directory, which is bin\Debug in your VB 
project. 
Notice in the first fom1at that the data type is not specified. The VB editor's 
type inference takes care of determining and assigning a strong data type. even 
when Option Strict is turned on. 
The XDocmuem .Load !\1ethod-Examplcs 
~ 
., 
Dim BookXDocument = XDocument.Load( "books .xml") 
,S 
Private CustomerXDocument As XDocument = XDocument.Load( "C: \Data\customers .. xml") 
if Dim InventoryDocument = XDocument . Load ( curDir () & "inventory. xml") 
The third example uses the CurDir () method to specify the current directory. 
You also can use System. 10. Directory. GetCurrentDirectory (), as you 
have in previous programs. 
The following Sub procedure displays the books.xml file in the Output ~in­
dow. which you can view with V7ew /Other Windows/ Output: 
Private Sub ReadFileButton_Click(ByVal sender As system.Object, 
ByVal e As System.EventArgs) Handles ReadFileButton.Click 
' Read the XML file into an XDocument and display the file in 
' the Output window. 
Dim BookXDocument = XDocument. Load ("books. xml") 
Console.WriteLine(BookXDocument) 
End Sub 
Output 
<!- - This file represents a fragment of a book store inventory database --> 
<bookstore> 
<book genre="autobiography" publicationdate=" 1981 " ISBN="1-861003-11-0"> 
<title>The Autobiography of Benjamin Franklin</title> 
<author> 
<first·name>Benjamin</first·name> 
<last-name>Franklin</last-name> 
</author> 
<price>8.99</price> 
</book> 
<book genre="novel" publicationdate=" 1967" ISBN="0-201-63361-2"> 
<title>The Confidence Man</title> 
<author> 
<first-name>Herman</first-nama> 
<last -name>Melville</last-name> 
</author> 
<price>11 .99</price> 
</book> 
I 

C
II
,\I>
'I'
I'
R 
II 
<book genre="philosophy" publicationdate=" 1991 " ISBN="1-861001 -57-6"> 
<title>The Gorgias</title> 
<author> 
<name>Plato<tname> 
</authOI'> 
<price>9.99</price> 
</bOOk> 
</bookstore> 
Loading au Xl''lL File into :m XE1ement Object 
In addition to using an XDocument, you also can load an XML file into an 
XElement object. 111e difference between the two is that the XDocument con-
tains the infonnation about the document from the top of the file, while the root 
node is the first item in an XElement object. 
Dim BookData = XElement .Load( "books.xml") 
Specifying XUL Elements in VB 
In VB you can specify the data elements in an XML file by name. referred to as 
XML literals. VB uses a three-axis model to refer to the elements. The axes, 
illustrated in Figure 14.16. represent child elements. attributes, and descendants. 
~Child 
element 
<book genre=•autobiography• publicationdate="1981" 
<price>B. 99</pri ce> 
</book> 
Child Elements 
/Attribute 
IS~"1-Q61003-11-0"> 
To refer to a child axis member in an XML document, use ObjectName. 
<ChildElementName>. Using the BookData XElement object h·om the previous 
example. we can refer to the book child element as Book Data. <book>. 
A LINQ to XML query for the book element is written as: 
Dim Myauery = From book In BookData.<book> 
Attribute Elements 
The attributes for book are genre. publicationdate. and ISBN. To specify an at-
tribute. use the .@notation. The following query accesses the ISBN attribute: 
Dim Myauery = From book In BookData.<book> 
Select book . ~ISBN 
' Gets a list of ISBN attributes. 
l'' i f,( ut• e 
14.16 
The VB three-QA;is model for 
referring to elements in an 
X/11L docwnent. 
S8S 

586 
,. 
S 
U 
.\ 
L 
R 
_\ 
S 
(' 
Additional TopiC3 in Jlisual &.ic 
Descendant Elements 
1l1e third axis is descendant. such as title. author. and price in t11e book.xml 
file. The notation that tells VB to search for a descendant is three dots. with the 
attribute name enclosed in <> tag brackets. 
Dim Myauery = From book In BookData.<book> 
Select book ... <price>.Value 
· Gets the price. 
U NQ Quc l'if•s 
You can use the axes notation on the In clause of UNQ as well as in the 
Select clause. 
Dim Myauery = From book In BookData ... <price> 
Select book.Value 
' Gets the price. 
LINQ offers many operators beyond ~-hat we have covered up to this point. 
The next two examples demonstrate Order By. which is used for sorting. and 
Where, which is used for conditions. 
' LINO query that sorts by book title: 
Dim Myauery = From book In BookData.<book> 
Order By book ... <title>.Value 
Select book ... <title>.Value 
LINO query that selects books with price > 10. 
Dim Myauery = From book In BookData.<book> 
Where book . .. <price>. Value> 10 
Select book . .. <title>.Value 
LJNQ to XJIL P.-ogram Examples 
1l1e following program reads the books.xml file. uses a LINQ to XML query. 
and loads the resulting list of titles into a list box (Figure 14.17). Extm queries 
are included but commented out to illustrate other queries. 
~ Rudir.gXM_I.llingUNQ 
FI J( nrt> 
1 4. 17 
The book titles from bookuml 
are loaded into a list box u.sing 
UNQ to XML and XML 
literals. 

C 
II 
1\ 
11 
'I' 
t: 
R 
II 
' Project: 
' Programmer: 
'Date: 
'Description: 
Ch14Xlnlliterals 
Bradley/Millspaugh 
June 2010 
Read titles from an xml file into a list box. 
Public Class XmllistForm 
Private Sub ReadFileButton_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles ReadFileButton.Click 
' Read the XML file into an XDocument and display t he file in 
' the Output window. 
' Dim BookXDocument = XDocument.Load("books.xml'} 
Console.WriteLine(BookXDocument) 
' Read the XML file into an XElement and display the file in 
the Output window. 
' Dim BookData = XElement .Load('books.xml") 
console.WriteLine(BookData) 
' Read the XML file into an XElement and use LINQ to query the data. 
Dim BookData = XElement.Load( ' books.xml") 
Dim MyQuery = From book In BookData.<book> 
Select book . .. <title>.Value ' Gets the book titles. 
'Dim MyQuery = From book In BookData.<book> 
Select book . ~ISBN 
• Gets a list of ISBN attributes 
'Dim MyQuery = From book In BookData.Elements() 
1 
Select book 
1 Gets entire node for each book. 
'Dim MyQuery =From book In BookData . . . <price> 
Select book.Value 
• Gets the price. 
'Dim MyQuery = From book In BookData.<book> 
Select book ... <price>.Value 
'Gets the price 
'Dim Myauery = From book In BookData.<book> 
' Select book ... <author>.Value 
'Dim MyQuery = From book In BookData.<book> 
• Where book ... <price>.Value > 10 
Select book . . . <title>.Value 
'Dim MyQuery = From book In BookData.<book> 
' Order By book ... <title>.Value 
Select book . . . <title>.Value 
Ti tlesListBox.DataSource = MyQuery.ToLi st 
End Sub 
End Class 
Of course. you can select multiple .fields and display in a control with mul-
tiple columns such as a DataGridView (Figure 14.18). 
587 

S88 
l ' 
C 
Additional Topics in Vis!Ull Basic 
Go Read Boots.xrnt into a DalaGridVie· .. , 
• 
1-
< 
_I oulho; 
ISBN 
price 
HIS1003-IHJ 
~~ 
G-201~33&1-2 
IBSS 
11.99 
IR<to 
HlSHHll-57-6 
1 9.~9 
'" 
Ch14DataGridView 
Bradley/Millspaugh 
June 2010 
= 
tf:le 
The #ttr:obiooraphy of Ben}31f4n Frai<lln 
The Co:iidence 1113"'1 
The Go-gio~ 
1§11.--J 
I 
l!' i f,! u re 1 4. 18 
Child. element. and attribute 
il.ems .front books.xml are loaded 
into a DataGridl'iew using 
UNQ to XML and XML liJerals. 
' Project: 
' Programmer: 
' Date: 
' Description: 
Read book information from the books.xml file into a 
data grid view. 
Public Class BookForm 
Private Sub BookForm_Load(ByVal sender As System. Object, 
ByVal e As System.EventArgs) Handles MyBase. Load 
' Read the books .xml file from the current directory . 
Dim BookData = XElement. Load( "books.xml") 
Dim MyOuery = From book In BookData.<book> 
Select book .. . <title>.Value, book ... <author> .Value, 
book . .. <price> .Value, book.@ISBN 
BooksDataGridView.Datasource = Myauery. Tolist 
BooksDataGridView.Columns(3).Width = 250 
End Sub 
End Class 
W1·iting and Reading an XML File 
You can write an XMt file from a progrnm using an XmlWriter object. The 
XmlWtiter has many methods that can write properly fonned XML files. with 
the elements and attributes identified by tags. 
The following example replaces the text file from ChllHandsOn with an XML 
file. The progrnm reads the XML file, loads the CoffeeComboBox when the form 
loads. and gives the user the option of saving the list when the list has changed. 
Only two procedures from ChllHandsOn have changed: The Fonn_Load and 
the SaveFlavorListToolStripMenultem_Click. Also. an Imports System. xml 
statement replaces the Imports System. IO statement. 
Warning: The XmlWriter class is part of the .NET 3.5 and 4.0 platform. If 
you used the Upgrade Wizard to upgrade an older version of the program, it 
targets an older version of the platform. Begin a new project in Visual Studio 
2010 to target .NET 4.0 when you want to use the XmlWriter. 
Th., XJ\'IL Vet•s.iou of th(' ComhoBox Save nml Head Pt·ogram 
Add an Imports statement to the top of the file: 
Imports System. Xml 

C 
II 
A 
1• 
'I' 
1•: 
ll 
II 
Load the Combo Box in the Fonn_Load event procedure: 
Private Sub FlavorsForm_Load(ByVal sender As Object, 
ByVal e As System.EventArgs) Handles Me. Load 
' Load the items in the CoffeecomboBox list. 
Dim ResponseDialogResult As DialogResult 
Try 
' Read the Xml file . 
Dim FlavorFile As XElement = XElement.Load( "Flavors.xml") 
Dim Flavorouery = From Flavor In FlavorFile.<Flavor> 
Select Flavor.Value 
For Each FlavorString As String In Flavorouery 
CoffeecomboBox .Items.Add(FlavorString) 
Next 
IsDirtyBoolean ; False 
Catch ex As Exception 
' File missing. 
ResponseDialogResult = MessageBox. Show( "Create a new file? ", 
"File Not Found", MessageBoxButtons.YesNo, 
MessageBoxicon .ouestion) 
If ResponseDialogResult = DialogResult. No Then 
' Exit the program. 
Me. Close() 
End If 
End Try 
End Sub 
Save the XML file in the Save menu item's routine: 
Private Sub saveFlavorlistToolStripMenuitem_Click(ByVal sender As System.Object, 
ByVal e As System.EventArgs) Handles saveFlavorListToolStripMenultem.Click 
· save the flavor list in an XML file . 
Try 
Dim AWriter As XmlWriter = XmlWriter.Create( "Flavors.xml") 
AWri ter. Wri teStartElement ("Coffee") 
For Itemlndex As Integer = o To CoffeecomboBox. Items.count -
AWriter. WriteElementString ('Flavor", 
CoffeecomboBox .Items(Itemindex) .ToString) 
Next Itemlndex 
AWriter.WriteEndElement() 
AWriter. Flush() 
Catch 
MessageBox.Show( "Unable to create the file. ") 
End Try 
IsDirtyBoolean = False 
End Sub 
The XM]" File 
The F1avors.xml file created by the program: 
<?xml version=" 1.0" encoding="utf-8"?> 
<Coffee> 
<Flavor>Chocolate Almond</Flavor> 
<Flavor>Espresso Roast</Flavor> 
<Flavor>Jamaica Blue Mountain</Flavor> 
<Flavor>Kona Blend</Flavor> 
<Flavor>Vanilla Nut</Flavor> 
</Coffee> 
S89 

590 
v 
S 
l l 
,\ 
I. 
C 
Additional Topics in Visual Basic 
Windows Presentation Foundation (WPF) 
One of the coolest new features in Visual Studio 2008 and 2010 is \Vin<lows 
Pt·eseutatiou Fotmdation. WPF provides the ability to create richer user 
interfaces for multiple platform development. Windows Vista and Windows 7 
use WPF technology to bring a better multimedia experience to the operating 
system. The designing capability of WPF is available in Visual Studio a<> well as 
in the Microsoft Expression Studio. which consists of Expression Web. Expres-
sion Blend. Expression Design. and Expression Media. !Vlicrosoft Silverlight 
(http:l/silverlight.netl) is a scaled-down version of WPF technology for a rich 
Web-based interface and works with all leading browsers and on multiple plat-
forms. such as Macintosh. These products offer the ability to integrate vector-
based graphics. media. text. animation. and overlays into the Web interface. 
When you create a Web page. there are essentially two different tasks: the 
interface and the code that rw1s the application. Often the person or artist who 
creates the interface is referred to as the designer. Making the page useful by 
creating the logic for database connection and programming is done by a de-
veloper (programmet). 
Expression Blend allows a Web page designer to create an interface that can 
be turned over to a developer for adding the code. In Visual Studio. you may 
have noticed that when you create a new project. there are templates for a WPF 
application and for WPF Browser Applications (Figure 14.19). 
F i g u1•e 14 . l 9 
You can use the WPF Application and WP F Browser Application templates to create applications in Visual Studio. 
lnshl!ed T empbte-s 
~ VISUal 8 a;.c 
Window$ 
V' .. eb 
Office 
Clcud 
Repo1ting 
ShuePoint 
Silvedight 
Te$t 
WCF 
Workflow 
Other t anguago 
Other Project Type$ 
OaHba:;e 
Test Prcjcch 
Onfine T emplota: 
rn 
~ 
GJ 
~~ 
~~ 
~ 
~ 
. Sort by. I Default 
\Vindows Forrns Applicati)fl 
Visual Basic 
Windc.ws Prc:~e.ntcli on Foundotion client 
WP:= Applio tion 
1it£ul8adc 
epplicction 
Consol~ Applicotion 
Visuel Bcsic 
Cla;s library 
Visual Ba::ic. 
\VPF Browser Appliu tion 
Visu.,IBosic 
Empty ProJeCt 
VISUi!l SasiC 
\Vindcws Service. 
1/ isu11l Bo~ic 
VVPF Custom Control L1br.Jr/ 
v-ISual Basic 
\'1/PF Usc:1 C ontrollibr.~ry 
Visu11l Sosic 
WtndCVIS Forms Control Ubrary 
Visual Basic 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
The user interface in WPF applications uses XAML (pronounced "zammel") 
code rather U1an HTML. XAML (Extensible Application l\1arkup Langu:l{;e) 
is an XML-based language that is much more interactive Ulan ilie traditional 
HTML. The term XBAP is used to refer to a XAMJ~ Bt·owset· Application U1at 
runs in an lntemet browser. You can check out some of the existing business 
applications at http:l/blogs.msdn.com/chabrook/archive/2007/0'2/20/cool-wpf-
applications.aspx. 
We can still write our programs in VB and Visual Studio or Visual Web De-
veloper to supplement the XAML interface. The new technology also allows us 
to create hybrid applications. You can add WPF features to your Windows 
Form applicaHons, and the Windows controls that you have learned about can 
be added to a WPF page. 
We ,~;11 examine both a Windows Form with WPF features and a WPF 
application. 
WPF lntct•opct·nbility 
Using WPF Interoperability you can use WPF controls in a Windows Form 
application. The VB toolbox for a Windows project has a category for WPF ln-
teroperability (Figure 14.20). The only control in the group that appears by de-
fault is the ElementHost. This control is a container that allows you to add 
other WPF controls to the Windows Form. Many WPF controls are available, 
and the list continues to grow. View the list by right-clicking in the toolbox. 
selecting Choose items, and then clicking on the WPF Components tab 
(Figure 14.21). You do not need to add the controls to the toolbox, as you add 
the controls at run time rather than design time. 
Toolbo• 
.. q. X 
t> All Window~ Forms 
b Common Controlt 
!'> Containers 
~ Menus & T oolbar; 
~ D;t, 
!> Components 
p. Printing 
~ Dialogs 
~ WPf lnteroperability 
~ Pointer 
~ ElemeniHost 
t> R.t:porting 
f> Vi.;ual Ba-tie PowcrPacks 
!l General 
To use WPF lnteroperabiltiy, you add the Element Host control to a Windows 
Form and then add the WPF controls in code. Your file must include an 
Imports statement for System. Windows. Controls . 
You may have noticed a control iliat allows a part of the page to show or be 
hidden. This is a WPF control called an Expander. 111e Expander's header 
property indicates the words to display on U1e form: "More" in Figure 14.22. 
\'('hen the user clicks to expand the control, the value of the Content property 
displays. 
591 
Fi ~ u.•• e 1 4. 2 0 
The toolbox for a Windows 
Form application has an 
ElementHost control in the 
WPF lnteroperability section. 
which allows ' 'OU to add WPF 
controls to a Windows 
application. 

592 
l ' 
S 
l l 
\ 
L 
II 
\ 
S 
(' 
Additimwl Topic• in l'i•ual Ba.oic 
FIJ(nre J 4.21 
See the li~t of a.vai/(lb/e WPF control$ on the WPFComponents t.a.b of th~ Choose Toolbox Items dialog box. 
Choose Too,box Items 
l '11 -ial...j 
r-Sil.crlf9ht Componenb 
Sy~c.m WodCiow Ccmporcr'U -~
Syst~m Activrba Co1Tpon::nb 
NfT Frame'M)~ C.amponents 
( 
COM Compontro 
jt_ __ 
~-----~~-~---~~~~~-_i_~ ·-------~-=-= 
Ncmt 
Nan'lli!SpKif 
Asstmbly Nam• 
011t'ClOI)' 
~ Acce!-sT ert 
Systcm.W..ndow$,(ontrols 
Pr~U:tionFron-.eNOft GtoboiA!sc:~. 
I I 
="" ~ctfvityOesr goer 
Sysu:mAc!ivi:ies.PreiEruton 
Synem.ActM'ties.Pres. •• 
~loba l Asse~. 
AdcrncdEiemtrt,bc .. , Sy:tcrn.Window~.Controh 
Prcc~:ltfonhomc....,Of .. GIClbiiiA,:oe ... 
P.dornerDe:cor1ta 
Syst.em.WindO\V'S.Oou.me:fats 
Presen!aionf1ameoNOrl 
Glob~tiAi~. 
= 
BordH 
SystEm.\h'l.ndows.Control; 
Pre'>@n:ahonFrame.NOrt Global A~~--
-=- &.!11-:t(hrornc: 
Miuosd1.Wind tw~$. Thcrf\a 
Prc.scil:Gttonfrarne'M).,. 
O~bo lll•><·· 
~ & .H .. Chro"" 
Mlcrosctr.Y'IlndCM·s. ftte"rts 
Pr~~n·attel"'fr"m~. 
G~bOI A1SI' •• 
_J WJ.a-t(hrom~ 
MicroicP .. Window~.lheres 
Pr~eil!ationFramE.<J~oo. .• Global As~-· 
r='1 WletDecora:cr 
Syxem.Windows.Controls.Pr ... 
Prese,:a.ioo fram~ort filobaiAsse •. 
_ !Mien 
Sy,t•m.\Nindow,,Controh 
Pru•.,tJtionFr•m•N«k G~boiA"•·· 
---l &4-t.onChr~mr: 
Microu:fl.Window5.lh~r:::s 
Prr:~'l!aticnfram~NO. .. GlobaiA!5oC:-. 
filter 
.AccQ.>sTe:>.1 
~ Ungu~ 
lnveri.,nt Lcngu4gr: (lm.·.vi~ntCcuntry) 
- ~ 
Figure 14.22 
An Expander control on a. Windouu Form. ll$ing WPf lnteroperability. When the II:Ser clickJ on "More''. the additional 
information di~pla.ys. 
= 
•!.' lndvdng • WPF Co•trol 
.~ lndt. .. d ing o 'NPF Control 
' A WGre 
Now 'fO'.J xc ;:cdtioool!rblrn:tictJ. 
\ 
Click on More to see the additional information 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
Adding a WPF Cont•·ol to a Will(lows Fot·m-Ste p-by-Ste p 
In the following step-by-step exercise, you will place a WPF Expander control 
on a Windows Form. 
Set Up the Windows !lt·o,ject 
STEP 1, Create a new Windows Forms application called Chl4WPFinterop. 
STEP 2: Name the f01m WPFinteropForm. and set the Text property to 
"lududiug a ~'PF Cuutrul". 
STEf' 3: Add an Element Host control to the form. keeping the default name 
ElementHostl. 
Wt·ite the VB Code 
STEP 1: [n the Editor window. add an Imports statement to the top of the file: 
Imports System.Windows .Controls 
STEP 2: Add the following code in the Form_ Load event procedme. 
Private Sub WPFinteropForm_Load(ByVal sender As System.Object, 
ByVal e As system.EventArgs) Handles MyBase.Load 
Dim MoreExpander As New Expander 
With MoreExpander 
. Header = "More" 
.content = "Now you see additional information ." 
End With 
ElementHost1 .Child 
MoreExpander 
End Sub 
Run tbe Pt·ogl'am 
STEP 1: Run the program. You can click on either the word " More" or the 
arrow icon to see the additional infonnation. 
W1·iting a WPF At>plication 
To create a WPF application. you select a different template when you create a 
new project (refer to Figure 14.19). 
After creating a new project. examine the layout of the IDE. You will t1nd that 
it resembles the layout for an ASP.NET application for creating a Web site. The 
Document wind01r is split. showing the XAML and the design (Figure 14.23). 
Since you are not going to write in XAML. you can collapse the XAML screen; it 
doesn't really close; instead it appears as a tab at the bottom of the Design 
window. You can control the size of the '\l'PF fonn using the adjuster bar on the 
left of the Design window. 
593 

594 
S 
l 
,\ 
L 
IJ 
\ 
s 
( ' 
Addil.icrwl Topia in Jr.,ual &.ic 
Fi~ur e 1 4.23 
The IDE for a WPF Application. To design the u.ser interface visually. close the XA111L windom 
00 Wr:fAPCIIiatOI'Il 
~tCl'O:.:~ m Jol Stv<to 
q~ Edt 
..,tOo\l 
PrCJ'ct ::\I'd 
Oebuq lu., 
0;~1~ F~ loot:> 
t::t '11indo-tt ~ 
• Corrm~ ,\pr- Ccn•rol1. 
It 
P<w;!irte~ 
0 
s. d~ 
(ill S..tn:n 
E 
Chad<Box 
r.1 
.,oonbo9o:.: 
• J [\•b\• ri 
t1 Gh:f 
li! 
Jno·~ 
II "*• 
I•~ ... :183< 
0 
RtdoiJL1ttJn 
D 
!i!--<l•n..,J., 
ll 
StldoPI'"ltl 
I I 
Jab .. o 'ltrol 
:A Tot£1cc< 
I·" Tr.tPc.. 
" All #Cf (-Cif'ttc.b 
It 
~lr:te~ 
0 
~.d .... 
(") B4.tt(:n 
0 
Cikn:k;t 
ED 
(o!n~ 
~ r'~ .. ~A ·~ 
0 ~7 
tJ 
8 )'..\\J)L 
:oo... • 
ln ..... ~t'o"":"tl"' /tchtrat.eiC!"'toft to~ ~nh:/.:wo/XMS1J 
)'.1\ln::x-•httr: //)Ctkllc; ,.ti<ro;ott t::o-el ... if'ltx/lo.;C.tx•l' 
1 th·:::::,. <t!ftk'indON" !'1~J~t = •Jo;'l}" A 
t <="'e;2"i'"> 
<G"'i..:f> 
Grid o/Jf"'CO'H/Gri.:l 
Click here to minimize the XAML window to a tab 
Designing the layout of a WPF window is similar to a Web page-both 
use flow layout. and you must take steps to place controls -..-here you want 
t11em. For Web pages. you probably use a table to lay out the controls on the 
page. For a WPF window. you do not need to set up a table: if you wish you 
can use the grid container that is automatically added to a new window. The 
grid container displays with a blue border on the left and the top.lf you place 
your cursor inside the blue border. the mouse pointer changes to a cross-hair 
(Figure 14.24), and you can click to set gridlines of whatever height and 
width that you nish. 
-"' .31..!] 
0 J 
rl So.ut•OI'\ Wp'"Applio lionl'(l 
• ~ 
Wpf~obonl 
~ 
Mo; :reJeCt 
~ ! ppf,c,bon.cdml 
~ 
Mi:fl"\\ir'dOWJCol.vnl 
'!! "-l.'lllnWindow••'l '1.b 

C 
II 
A 
1• 
'I' 
" 
ll 
II 
595 
FiJ! u r e 14 . 2 4 
Click in the blue borders w create grid lines in the grid container. You also can drag the grid lines to new locations and drag 
thent off the window to remove them. 
Click cross-hair pointer 
to place a grid line 
MainWindcw.>:aml X 
Next look at the toolbox. You will notice many familiar-sow1ding controls. 
The controls have the same functionality and feel as the equivalent Windows 
Form controls but have many extra. properties. 
You also will find that some of the terminology is different. WPF creates a 
Window rather than a Form. There is no Text property; instead the window has 
a Title prope1ty and the other controls have a Content property. 
C1·eatin g a WPF Hd Jo Wm·ld A [JplicaLion-SLeiJ-by-Stt:>p 
We will create a Hello World application to give you a brief ovenriew of some of 
the features of WPF. 
Note: Although you can create this application in Windows XP. the great 
effects do not appear. You need to be running in Windows Vista or Windows 7 
to see the special effects. 
Se1 Up 1he P1·ojecl 
STEP 1: Create a new project using the WPF Application template. 
STEI' 2: Click the down-an-ow in the upper-right comer of the XAML window 
to minimize it into a tab at the bottom of the Document window. 
STEI' 3: Make sure that "Window" appears at the top of the Properties window 
and change the Title to "A Hello World Example". Note: H the prop-
erties do not appear in the Properties window. click on one of the Sort 
buttons to make them display. 
STEP ,~: Save the project as Chl4WpfHelloWorld. 
1. 

596 
v 
S 
l l 
,\ 
I. 
C 
Additional Topic• in Visual Basic 
Add C01mols 
STEP 1: Add a Label control from the A/1 WPF Controls section of the toolbox. 
Set the Name propetty to MessageLabel. which you set in a text box at 
the top of the Properties window (Figure 14.25). 
Set the Nam-e property of controls in the text box at the top of the Properties wind-ow. 
Fi " nr e 
1 4 . Z5 
~mVIindow.>omtvb 
.... 
Sok.rbon bplorcr 
• I 
'l 
------~l.o~l 
"'~.!1 '11 :::1 
r:d So!ut1on 'ChlJWp'HeJ!o Wolld' (l 
• 3) 0.14WpfH•IIoWorld 
~ My Projcd 
~ 
App!i~tion.xDml 
• 
;!. M.:~inWtndo•/\',:«~m l 
'tJ Mai•WAndow.xernl,..,b 
Set the Name property in this text box 
STEP 2: Click on the AZ button in the Properties window to make sure that 
the propetties are sorted in alphabetic order. Then set the Border-
Thickness of the label to 3. 
STEP 3: Drop down the list for Border Brush. select the icon for a solid brush. 
and select a color. You can use the eyedropper icon to select a color 
and make the color settings. 
STEP 4 : Delete the Contents property of the label. 
STEP 5 : Add two buttons. naming them Display Button and Exit Button. with 
the Content property set to Display and Exit. 
STEP 6: Select both button controls and select Hand from the Cursor property 
drop-down list. Note that the Cursor drop-down list is not in alphabetic 
order; you must search the list to find Hand. 
Code the Huttous 
STEP t : Write the code for the Display button. You can double-click the control 
to access the xaml.vb Code Editor window. just as you do in a 
Windows application. 
Private Sub OisplayButton_Click(ByVal sender As Object 1 
ByVal e As System.Windows.RoutedEventArgs) Handles OisplayButton.Click 
' Di spl ay Hello Wor l d i n t he l abel. 
Messagel abel .Content = "Hell o Wo rl d" 
End Sub 

C 
II 
r\ 
1• 
1' 
E 
R 
II 
STEI' 2: Write the code for the Exit button. 
Private Sub ExitButton_Click(ByVal sender As system.Object, 
ByVal e As system.Windows.RoutedEventArgs) Handles ExitButton.Cl ick 
' End the program. 
Me. Close() 
End Sub 
STEP 3: Write the remarks at the top of the file. 
'Program: 
'Programmer: 
' Date: 
' Description: 
l::un tlw Prognmt 
Chl4WPFHelloWorld 
Bradley/Millspaugh 
June 2010 
Display Hello World in a label . 
As you move your cursor over the buttons. the color changes. Also notice the 
cursor tltat we set. You can easily add a TooiTip to the button. There is no need 
to drag any extra components: each control already has a ToolTip property. 
Problem$? lf you are running in Windows XP. you may receive an error 
message that Option Strict is on and a conversion cannot be made. Double-
click the error message to open the MyWpfExtension.vb file. scroll to the top of 
the nle. and add Option Strict Off. Then rerun the program. 
Th~ Roll' of Ex (ll"<>s:oion B14>nd 
Earlier we mentioned that the XAML code is the same for developers in Visual 
Studio and for designers in Expression. The project that 11·e just created could 
be opened in Expression. for a designer to add even more dramatic features. 
Check http://channel9.msdn.com for more information and instructive videos. 
l. An ErrorProvider component can provide an icon and popup error message 
next to the field that does not pass validation. Specify the text box and the 
message in the ErrorProvider Set Error method. 
2. A text box Max.Lengtlt property limits tlte number of characters t11e user is 
allowed to enter into the control. 
3. The CharacterCasing property of a text box can automatically convett user 
input to uppercase or lowercase. 
4. You can validate individual fields in tl1e Validating event procedure for the 
controls. The Validating event occurs when tlte user attempts to move the 
focus to another control that has its Causes Validation property set to True. 
5. VB code snippets are small samples of code that illustrate coding tech-
niques. You can add code snippets in the editor. 
6. Visual Studio includes many sample programs and quick-start tutorials. 
7. A multiple document interface (MDI) contains parent and child forms. 
Closing the parent also closes all child forms. The child forms stay within 
the bounds of the parent form. 
597 

598 
\ 
s 
l 
.\ 
I. 
u .\ 
s 
l ' 
Additional'lbpicJ in V.wal B,..ic 
8. To create an MDT parent fom1. set a form's lsMdiConlainer properly to 
True. To create a child follll. instantiate a new form object and set its Mdi-
Parent property to the parent follll in code. 
9. MDI applications generally have a Window menu. which displays a list of 
open child windows and provides choices for arranging the child ~indows. 
10. To create a tool bar. add a ToolS trip control and add buttons to the Items 
collection. 
L l. A loolbar provides shortcuts to menu options. 
12. A status bar contains infonnation for the user along the bottom of a form. Af-
ter adding a StatusStrip control to a form. add labels to its Items collection. 
L3. The date can be assigned to the Text properly of a ToolStripStatusLabel 
during the Form_Load event procedure. but the lime display requires an 
update routine using a Timer component. 
14. The DateTimePicker and MonthCalendar controls have accu.rate calendars 
for displaying and inpulling dates. 
15. The Web Browser control provides the ability to display \l'eb pages from a 
Windows Fonn. 
16. You can check tJ1e e (KeyEventArgs) argument of a control's KeyUp event 
procedure to determine which key was pressed. The e.KeyCode and 
e .KeyData properties hold a numeric code for the key. which you can 
check using the constants in U1e Keys enumeration. 
17. XM L files are used to store data as text identified by tags. The files are 
platform independent and extremely flexible. 
18. XM L files consist of nodes. elements. and attributes. Each flle can have 
one root node and many child nodes. Child nodes at the same level are 
called siblings. 
19. Two objects that you can use to read an X:ML file are XDocumenl and 
XElement. You can use a UNQ to XML query lo select data elements us-
ing a three-axis model to specify tbe individual items. The axes are child 
elements. attribute elements. and descendent elements. 
20. You can save data into an XML file using an XmlWriter object. which in-
serts the correct tags into the me. 
21. Windows Presentation Fow1dation (WPF) can be used to create rich user 
inte1faces. such as those in Windows Vista and Windo~-s 7. 
22. A WPF user interface is coded in XAML: a XAML browser application is 
called XBAP. 
23. Using \VPF lnteroperability you can add an Element Host control and WPF 
controls to a Windows Form. WPF' controls are added to the F.:lementHost 
at run time. 
24 . WPF applications are similar to Web applications in that they are created 
as two files: one for the user interface and one for t11e programming logic. 
attribute 583 
Causes Validation property 564 
CharacterCasing property 
563 
child form 
569 
code snippets 568 
Date Time structure 575 
element 583 
Error Provider component 560 
field-level validation 
563 
lsMdiContainer property 570 
LayoutMdi method 
571 
MaxLength property 563 

C
ll
i\
I'T
E
I& 
II 
MdiWindowListltem property 571 
multiple document interface 
(MDI) 
569 
node 
583 
Now property 575 
parent fonn 569 
SetError method 560 
sibling 583 
single document interface (SDl) 569 
status bar 574 
StatusSIIip control 574 
toolbar 572 
TooiStrip control 572 
TooiStripStatusLabeJ object 574 
WebBrowser conlrol 
578 
Windows Presentation Foundation 
(\VPF) 590 
XAML (Extensible Application 
Markup Language) 
591 
XBAP (XAML) 591 
l. Explain how to use an ErrorProvider component when validating the value 
in a text box. 
2. What properties of a text box determine the number of characters a user 
can enter and the case (upper or lower) of the input? 
3. What are code snippets? How might they be used? 
4. What is meant by M Dl? 
5. What are the advantages of having parent and child foiTIIs? 
6. What are the layouts available for arranging child windows? 
7. How can a child form be created? a parent form? 
8. What steps are necessary to create a toolbar and have its buttons execute 
menu procedures? 
9. What must be done to create a status bar? to display the current time on 
U1e status bar? to keep the time display current? 
10. Describe two conlrols that you can use for displaying dates on a form. 
11. What property is used to navigate to a Web page at design time using the 
WebBrowser control? How is this task accomplishe(i at run lime? 
12. What is the advantage of using XML files over other file types? 
13. What is ll'PF? How does it apply to Windows applications? 
14 .1 Convert any of your earlier programs that use mes~e boxes for error mes-
sages to use an Error Provider component. Remove all error message boxes 
from the program and display meaningful messll!\es in the popup Error 
Text. 
14.2 Write an MDI project that is a simple text editor. Allo~' the user to open 
multiple documents. each in a separate child fotm. For the text editor. use 
one big TextBox control with its Multiline property set to True or a Rich-
TextBox control. Set the control's Anchor property to all four edges so the 
control fills its form. 
The user should be able to load and save a Hie in each form. Use the 
file handling that you leamed about in Chapter 11 and display the name 
of the file in the fonn's title bar. 
14.3 Add a toolbar and a status bar to a previous project to provide shortcuts 
to the menu items . 
14.4 Add a tool bar and a status bar to the calendar program from this chapter. 
S99 

600 
S 
l ' 
\ 
I. 
ll 
\ 
s 
C 
Additional Topic' in Vi.!ltal Ba.sic 
14.5 Create an application for displaying movie listings. Add a WebBrowser 
control that navigates to a page showing the movies. 
14 .6 Convert your text file project from Chapter 11 to use an Xl\1 L file. 
14.7 Write Project 1.5. the diner features of the day. as a WPF Application. 
Add features for the buttons. Note that some of the features will not work 
in WPF. such as keyboard access and printing. 
Note: For help in basing a new project on an existing project. see "Basing a New Project on an Existing Project" 
in Chapter 5 or "Copy and Move Projects"' in Appendix C. 
Convert any of your earlier VB Mail Order programs 
that use message boxes for error messages to use an 
ErrorProvider component. Remove nll error message 
boxes from the program and display meaningful mes-
sages in the popup EITOr Text. 
Add a toolbar and a status bar to t11e project to 
provide shortcuts to the menu items. 
VB Auto (;enter I 
Convert any of your earlier VB Auto Center programs 
that use message boxes for error messages to use an 
.ErrorProvider component. Remove alJ error message 
boxes from the program and display meaningful mes-
sages in the popup Error Text. 
Add a toolbar and a status bar to the project to 
provide shortcuts to the menu items . 
VIdeo Bonanza I 
Convert any of your earlier Video Bonanza programs 
that use message boxes for error messages to use an 
EnorProvider component. Remove all error message 
boxes from U1e progrnm and display meaningful mes-
sages in the popup Error Text. 
Add a toolbar and a status bar to the project to 
provide shortcuts to t11e menu items. 
Ver y \ 1ery Boartls I 
Convert any of your earlier Very Very Boards programs 
that use message boxes for error messages to use an 
.ErrorProvider component. Remove all error message 
boxes from the program and display meaningful mes-
sages in the popup Error Text. 
Add a toolbar and a status bar to the project to 
provide shortcuts to the menu items . 

A 
Answers to Feedback 
Questions 

602 
l ' 
C 
A11swers lo Feedback QuestioiiS 
>- Feedback 1.1 
These exercises are designed to help users become familiar with the Help 
.sysleut. Tit~re art: uu "correct" aJI:swens. 
>- Feedback 2.1 
Po·o t>erty 
Selling 
Name 
lconPictureBox 
BorderStyle 
Fixed30 
SizeMode 
Stretch Image 
Visible 
True 
>- Feedback 2.2 
1. With CompanyTextBox 
. Clear() 
. Focus() 
End With 
2. customerlabel. Clear() 
OrderTextBox.Focus() 
3. (a) Places a check in the check box. 
(b) Radio button is selected. 
(c) Makes the picture invisible. 
(d) Makes the label appear sunken. 
(e) Assigns the text value in CityTextBox.Text to the text value of 
City Label. Text. 
(f) Makes RedRadioButton usable; that is not dimmed. 
>- Feedback 3 .I 
l. The name is valid; however, the data type should be specified. 
2. Invalid. Identifiers cannot contain special characters such as"#''. 
3. Invalid. An identifier cannot contain blank spaces. 
4. Invalid. Periods are used to separate items such as Object. Property. 
5. Invalid. Identifiers cannot contain embedded special characters such as''$". 
6. Invalid. Sub is a reserved word. 
7. The name is valid; however. it does not indicate anything about what the 
variable is used for. 
8. Invalid. Text is a prope1ty name and should not be used as a variable name. 
Also. it does not specify a data type. 
9. The name is valid; however, the data type should be specified. 
10. Valid. 
11. Valid. 
12. Valid. 

A
I0
J>I\N
I) 
X 
.\ 
')-- Feedback 3.2 
Note: Answers may vary: make sure that the data type is included in each name. 
1. (a) Dim HoursDecimal As Decimal 
(b) Dim EmployeeNameString As String 
~) Dim DepartmentNumberString As String 
2. (a) Dim auant ityinteger As Int eger 
(b) Dim DescriptionString As String 
{c) Dim PartNumberString As String 
(d) Dim costDecimal As Decimal 
(e) Dim SellingPriceDecimal As Decimal 
')-- Feedback 3.3 
>-
Note: Ans~·ers may vary; make sure the data type is included in each name. 
l. Private TotalPayrollDecimal As Decimal 
Declared at the module level. 
2. Const SALES_TAX_Decimal As Decimal = .080 
Declared at the module level. 
3. Pr i vate ParticipantCountinteger As Integer 
Declared at the module level. 
Feedback 3.4 
l. 18 
2. 1 
3. 6 
4. 5 
5. 22 
6. 2048 
7. 22 
8. 38 
')-- Feedback 3.5 
l. (a) Countlnteger = Countlnteger + 5 
(b) Countlnteger += 5 
2. (a) BalanceDecimal = BalanceDecimal - WithdrawalDecimal 
(b) BalanceDecimal -= WithdrawalDecimal 
3. (a) Priceoecimal = PriceDecimal * Countlnteger 
(b) PriceDecimal *= Countlnteger 
603 

604 
,. 
S 
U 
.\ 
L 
G 
.\ 
S 
~ 
Feedback 3.6 
l. AveragePayTextBox. Text = AveragePayDecirnal. ToString ( "C") 
.~123.46 
2. OuantityTextBox.Text = auantitylnteger.ToString() 
176123 
3. Total TextBox. Text = TotalCollectedDecimal. ToString ( "N") 
~ Feedback 4.1 
1. True 
2. True 
3. True 
4. False 
5. False 
6. Tnte 
7. True 
8. Fa.lse 
9. True 
10. True 
~ 
Feedback 4·.2 
1. FrogsRadioButton ll'ill be checked. 
2. ".It's the toads and the polliwogs'' 
3. "It's true" 
4. If Integer.Parse(OrangesTextBox.Text) > 
Integer.Parse(ApplesTextBox.Text) Then 
MostTextBox.Text = ' Oranges• 
Elseif Integer.Parse(ApplesTextBox.Text) > 
Integer.Parse(OrangesTextBox.Text) Then 
MostTextBox.Text 
'Apples• 
Else 
MostTextBox.Text 
' They' re equal" 
End If 
5. If BalanceDecimal > o Then 
FundsCheckBox .Checked = True 
BalanceDecimal = 0 
Countlnteger += 1 
Else 
FundsCheckBox .Checked 
False 
End If 
( ' 
.4ns~eer• to Feedback Que>tions 

)-- Feedback 4 .3 
l. Select Case Tempinteger 
case Is <= 32 
CommentTextBox.Text 
case Is > 80 
CommentTextBox.Text 
Case Else 
CommentTextBox.Text 
End Select 
2. Select case Countlnteger 
Case o 
\ 
"Freezing• 
"Hot" 
"Moderate• 
MessageBox.Show("No items were entered. " ) 
Case 1 To 10 
MessageBox. Show ( "1 -
10 i terns were entered. ") 
Case 11 To 20 
MessageBox. Show( "11 -
20 items were entered . ") 
case Else 
MessageBox.Show("More than 20 items were entered. ") 
End Select 
)-- Feedback 5 . 1 
1. 
F'unclion procedure: a value will be retumed. 
2. Private Function Average(ByVal Valueoneinteger As Integer, 
ByVal ValueTwointeger As Integer, 
ByVal ValueThreeinteger As Integer) As Integer 
Note: ByVal is optional: the editor will add it for you. 
3. Return (ValueOnelnteger + ValueTwolnteger +ValueThreelnteger) /3 
4. The answer appears on a Retur n statement or is assigned to lhe variable 
with the same name as the function. 
)-- Feedback 6 . 1 
l. Const FAT_CALORIES_Integer As Integer = 9 
Declared at the module level. 
2. Friend HighestNameString As String 
Declared at the module level. 
3. Friend Const COMPANY_NAME_String As String 
Declared at the module level. 
4. Friend TotalAmountDecimal As Decimal 
Declared at the module level. 
"Bab' s Bowling Service• 
60S 

606 
,. 
S 
U 
.\ 
L 
S. Friend Personcountlnteger As Integer 
Declared at the module level. 
6. Dim TotalString As String 
Declared at the local level. 
)--- Feeclhack 7.1 
l. Alphabetizes the items in a list box or combo box. 
G 
.\ 
S 
( ' 
.4ns~eer• to Feedback Que>tions 
2. Stores the index number of t11e currently selected Q1ighlighted} item: has a 
value of - 1 if nothing is selected. 
3. Is a collection that holds tlle objects. usually text. of nlllist elements in a 
list box or combo box. 
4. Determines whether or not a combo box will also have a text box for user 
input. It also determines whether or not the list will drop down. 
S. Stores the number of elements in a list box or combo l:ox. 
6. Adds an element to a list at run time. 
7. Adds an element to a list and inserts the element in the chosen position 
(index). 
8. Clears all elements from a list box or combo box. 
9. Removes an element from t11e list by referring to its index. 
10. Removes an element from a list by looking for a given string. 
)--- Feedback 7.2 
ItemFoundBoolean = False 
' Set the initial value of the found switch to False. 
Itemindexinteger = 0 
' Initialize the counter for the item index. 
• Loop through the items until the requested item is found 
• or the end of the list is reached. 
Do until ItemFoundBoolean or Itemlndexlnteger = ItemsListBox.Items.Count 
' Check if the text box entry matches the item in the list . 
If NewitemTextBox.Text = 
ItemsListBox.Items(Itemlndexlnteger).ToString() Then 
ItemFoundBoolean = True 
' Set the found switch to True. 
Else 
'Otherwise .. . 
Itemlndexlnteger += 1 
' Increment the counter for the item index. 
End If 
Loop 
>
Feedback 7.3 
I. (a) There should not be a comma after the test value. 
(b) The variable named on the Next statement must match tl1e one on the 
For sfllfl'ml'nf. Tnrll'xlntP.gP.r in this""""· 

X 
J\ 
(c) 111e item following the word For must be a vaiiable, and the same vari-
able must be used on the Next statement. 4 is not a proper variable 
name. and For is a reserved word. 
(d) Valid. 
(e) Valid. 
(f) This loop will never be executed: it needs to have a negative Step 
argument. 
2. (a) Will be executed 3 times; Cow1tlnteger will have an ending value of 4. 
(b) Will be executed 4 times: Count Integer will have an ending value of 14. 
(c) Will be executed 10 Limes; Count integer will have an ending value of 0. 
(d) Will be executed 7 times; CounterDecimal will have an ending value 
of6.5. 
(e) Will never be executed because the starting value is already greater 
than the test value; Countlnteger will have an ending value of 5. 
>
Feedback 7.4 
l. A component used to set up output for the printer. Add the component to 
the fonn's component tray at design time. Begin the printing process by ex-
ecuting the Print method of the component: the component's PrintPage 
event occurs. 
2. Starts the printing process. Belongs in the Click event procedure for the 
Print button or menu item. 
3. The PrintPage event is a callback that occurs once for each page to print. 
The Print Page event procedure contains all the logic for printing the page. 
4. Sends a line of text to the graphics object. The DrawString method is used 
in the Print Page event procedure. 
5. An argument passed to the PrintPage event proce::lure. Holds items of in-
formation such as the page margins. 
6. 
MarginBounds.Left is one of the properties of the PrintPageEventArgs ar-
gument passed to the PrintPage event procedure. TI1e property holds the 
left margin and can be used to set the X coordinate to the left margin. 
7. 
A component that allows the user to view the document in Print Preview. 
The component is added to the component tray at design time. In the event 
procedure where the user selects Print Preview. the print document is as-
signed to this component. 
>- Feedback 8.1 
l. Valid. 
2. Valid. 
3. Valid. 
4. Invalid; beyond the range of the array. 
5. Valid. 
6. 
lnvalid: negative number. 
7. Gives a decimal number. but Visual Basic will round U1e fraction and use 
that integer. 
8. Valid. 
607 

608 
\ 
>- Feedback 3.2 
1. Structure Student 
Dim LastNameString As String 
Dim FirstNamestring As String 
Dim StudentNumberString As String 
Dim UnitsCompletedDecimal As Decimal 
Dim GpaDecimal As Decimal 
End Structure 
2. Dim Intostudent(99) As student 
~ Structure Project 
Dim ProjectNameString As String 
Dim FormNameString As String 
Dim FolderNameString As String 
End Structure 
4. Dim MyProj ect As Project 
5. Dim ourProj ects ( 99) As Project 
>- Feedback 3.3 
1. Dim TemperatureDecimal(2, 4) As Decimal 
2. For Col umnlnteger = o To 4 
TemperatureDecimal(O, Columnlnteger) = 0 
Next Columnlnteger 
IC 
\ 
S 
3. For Col umnlnteger = o To 4 
TemperatureDecimal (1, Columninteger) = 75 
Next Columnlnteger 
4. For Col umnlnteger = 0 To 4 
(' 
Atl.l'""""' to Feedback QIM!•Iiotl!l 
TemperatureDecimal(2, Columnlnteger) = TemperatureDecimal(O, Columnlnteger) + 
TemperatureDecimal(1, Columninteger) 
Next Columninteger 
5. For Rowlndexinteger = 0 To 2 
For Columnindexlnteger = 0 To 4 
e .Graphics.DrawString(TemperatureDecimal(Rowlndexlnteger, 
Columnlndexlnteger) .ToString(), PrintFont, Brushes.Black, 
Pri ntXSingle, PrintYSingle) 
Print XSingle += 200 
Next Col umnlndexlnteger 
· Begin a new line . 
Pri ntXSi ngle = e .MarginBounds.Left 
Pri ntYSi ngle += lineHeightSi ngl e 
Next Rowlndexlnteger 

1\ 
1• 
1• 
1·: 
N 
I) 
X 
~ 
Feedback 8 .4 
l. A collection is a type of object used for storing multiple .instances. 
2. Collections are more sophisticated than arrays and define more methods 
for data management. 
3. Add(). Clear(), RemoveAt ().Other possibilities from the table: Capacity. 
Count.Contains.ContainsValue.Item().andRemove(). 
~ Feedback 9 .1 
l. The .aspx ftle holds the specifications for the user interface that are used 
by the server to render the page. The .aspx.vb file holds the Visual Basic 
code that you write to respond to events. 
2. 
Right-click on the .aspx file or on the page in the Document window and 
select View in Browser. 
3. Web server controls do not directly correspond to HTML controls but are 
rendered differently for different browsers in order to achieve the desired 
look and feel. You carmot wlite any server-side programming logic for 
HTML controls. As you submit forms to the sener. any HTML controls 
pass to the server and back as static text. You might want to use HTML 
controls if you have existing HTML pages that are working and you want to 
conve1t to ASP.NET for additional capabilities. 
~ 
Feedhack 9 .2 
l. Manually move to the bottom of the page using the Enter key or create a 
table and add the button to a cell. Absolute positioning could also be used. 
2. An HTML control doesn't need any server-side programming. The Web 
server Table control is generally used when you want to write code to add 
rows, columns. or controls at mn time. 
3. Store images in the Web site folder. 
~ 
Feedback 9 .3 
l. The NavigateUd property. 
2. 
Add a HyperLink control to both pages. Set the NavigateUrl of each to 
point to the other page. 
~ 
Feedback 9 .4 
Attach a RequiredFieldValidator control so that the field cam1ot be left blank. 
Attach a Range Validator to check if the input falls within the specified range 
by setting the MinimumValue = 0 and the MaximumValue = 1000. Set the 
Range Valida tor Type property to Integer, to validate that the entry can be con-
verted to a numelic integer. 
609 

61 0 
,. 
S 
U 
,\ 
L 
B 
.\ 
S 
( ' 
Answers to Feedback Questions 
>- Feedback 9.5 
The Page_Load event occurs and the page is red is played for every round-trip 
to the server. If you have initialization code in the Page_ Load event procedure. 
you don't 11·ru1t to perfonn the initialization each time the procedure executes. 
>- Feedback 10.1 
I. The .file is the database. 
The table contains the rows and columns, which hold the information about 
your friends. 
Each row/record contains information about an individual friend. 
A column or field contains an element of data. such as the name or phone 
number. 
The key field is the field used to organize the f1le: it contains a unique value 
that identifies a particular record. for example. the telephone number field. 
2. XML is stored as text. which can pass through lntemet firewalls and CaJ1 be 
edited using any text editor. 
>- Feedback 10.2 
TI1e binding source object creates a link between the original data source and 
the program. The table adapter passes infom1ation back and forth between the 
data source and the dataset. The dataset holds a copy of the data retrieved from 
the data source and is used in your program to access the data. either field by 
field (for labels and text boxes) or by connecting it to a grid. 
>- Feedback 10.3 
1. The drop-down Hst in the Data Sources window allows you to select Data-
Grid View or Details view. 
2. In the Data Sources window. select Details on the smart tag and drag the 
table to the form. To change to a label. open the smart tag on the text box 
and select Label. 
3. Set the DataSource property of the combo box to the binding source used 
by the other controls. Set the Display Member property to the data field to 
display in the combo box. 
4. To sort the list. modify the SQL SELECT statement used by the table 
adapter to include an Order By clause. 

X 
J\ 
~ Feedback 10.4 
l. Language integrated query; allows the programmer to write queries in the 
program code. 
2. LINQ can be used to query databases, XML files. or any data defined as an 
object. 
3. TI1e VB compiler supplies (or infers) the data type for a variable that does 
not have a type declared. 
~ Feedback 11.1 
l. Dim InventoryStreamWriter As New Streaml'triter( "Inventory.txt") 
2. InventoryStreamwriter .Writeline(DescriptionTextBox .Text) 
3. The declaration for the Stream Reader object needs to be in a Try /Catch 
block in case the file does not exist. The declaration for the Stream Writer 
object does not need to be in a Try /Catch block because. in this case. the 
program is generating a file. not trying to locate one; however. if you are us-
ing a full qualifying pathname. then you should put the Stream Writer dec-
laration in a Try /Catch block. 
4. If InventoryStreamReader.Peek <> - 1 Then 
Descriptionlabel .Text = InventoryStreamReader.Readline() 
ProductNumberlabel .Text = InventoryStreamReader.Readline() 
End If 
~ Feedback 11.2 
l. Text Files (* .txt) l*.txt 
2. OpenFileDialog1 .InitialDirectory = Directory.GetcurrentDirectory() 
3. If Phonestreamwriter IsNot Nothing Then 
PhoneStreamWriter .Close() 
End If 
~ 
Feedback 11.3 
l. With NameslistBox 
For Indexinteger As Integer = o To .Items.count - 1 
NamesStreamWriter.Writeline(.Items(£ndexlnteger)) 
Next Indexinteger 
End With 
2. The above code should be placed in a Save procedure that should be called 
from the form's FormClosing event procedure. 
3. Try 
Dim NamesStreamReader As New StreamReader( "Names.txt") 
Do Until NamesStreamReader.Peek = - 1 
Namesl istBox. Items.Add(NamesStreamReader.Readline()) 
Loop 
NamesstreamR~aoer.crose() 
Catch 
611 

612 
,. 
s 
U 
.\ 
L 
R 
\ 
S 
l ' 
AnsweTs to F eedbaclr Quest ions 
~ Feedback 12.1 
l. An object is an instance of a class. A class defmes an item type (like the 
cookie culler defines the shape). whereas the object is an actual instance 
of the class (as the cookie made from the cookie culler). 
2. TheProduct is an object. an instance of the Product class. 
3. The numeric value ofQuantityTextBox is assigned to the Quantity property 
of The Product. 
4. Private LastNameString As String 
Private FirstNameString As String 
Private StuaentiDNumberString As String 
Private GpaDecimal As Decimal 
These statements appear at the module level. 
5. Property LastName() As String 
Get 
Return LastNameString 
End Get 
Set(ByVal value As String) 
LastNameString = value 
End Set 
End Property 
6. ReadOnly Property GPA() As Decimal 
Get 
Return GpaDecimal 
End Get 
End Property 
~ 
Feedback 13. 1 
1. Dim xlnteger As Integer 
Dim ylnteger As Integer 
ylnteger = Convert.Tolnt32(Me.Height) 
xinteger = Convert .Toint32(Me.Width 1 2) 
e.Graphics.DrawLine(Pens.Green, xlnteger, o, xlnteger, ylnteger) 
2. e.Graphics.DrawEllipse(Pens.Green, xinteger, ylnteger, 100F, 100F) 
e.Graphics.OrawEllipse(Pens.Blue, xlnteger + 25, ylnteger + 25, SOF, SOF) 
3. Dim FirstPoint As New Point(20, 20) 
Dim SecondPoint As New Point(100, 100) 
Dim ThirdPoint As New Point(200, SO) 
e.Graphics.DrawLine(Pens.Green, FirstPoint, SecondPoint ) 
e.Graphics.DrawLine(Pens .Green, SecondPoint, ThirdPoint) 
e.Graphics.DrawLine(Pens.Green, ThirdPoint, FirstPoint) 

t\11
PiiN
U 
\ 
>- Feedback 13.2 
l. Static xinteger As Integer = CommandButton.Left - 10 
Static yinteger As Integer= CommandButton.Top 
Static Widthlnteger As Integer = commandButton.Width 
Static Heightinteger As Integer = CommandButton.Height 
commandButton.SetBounds(xlnteger, ylnteger, Widthlnteger, Heightinteger) 
or 
With CommandButton 
.SetBounds(.Left - 10, .Top, .Width, .Height) 
End With 
2. A little less than half a second. 
3. The Tick event fires each time the specified inteiVal has elapsed. 
>- Feedback 13.3 
l. Private Sub TasklistBox_DragEnter(ByVal sender As Object, 
ByVal e As System.Windows.Forms.DragEventArgs 
) Handles TaskListBox.DragEnter 
' Set the desired Dragorop effect. 
e.Effect = DragDropEffects.Copy 
End Sub 
2. Private Sub TasklistBox_DragDrop(ByVal sender As Object, 
ByVal e As System.Windows.Forms.DragEventArgs 
) Handles TasklistBox.DragDrop 
' Add the item to the list box. 
TasklistBox.Items.Add(e.Data.GetData(DataFormats.Text).ToString() 
TaskTextBox .Clear() 
End Sub 
>- Feedback 14 .1 
l. When the code is placed inside a Catch block. it will place an icon next to 
the QuantityTextBox control when the user inputs invalid data. The mes-
sage appears as a TooiTip when the user places the pointer over the icon. 
2. The MaxLength and CharacterCasing properties. 
• 
MaxLength: Sets a maximum number of characters that may be entered 
into a text box. A beep occurs if the user attempts to exceed the 
maximum. 
• 
CharacterCasing: Automatically converts data entry to uppercase. 
lowercase. or normal. 
3. With field-level validation the user is notified uf an error as the focus 
leaves a field. rather than waiting until a button's Click event occurs. 
613 

61 4 
,. 
s 
U 
.\ 
L 
... Feedback 14.2 
l. Dim AboutChildForm As New AboutForm() 
AboutChildForm.MdiParent = Me 
AboutChildForm.Show() 
R 
\ 
S 
2. Add an event to the Handles clause for the Exit and About menu items. 
l ' 
AnsweTs to F eedbaclr Quest ions 
3. Add a timer component: set the Interval property and include the foUo11ing 
statement in the timer's Tick event procedure and the Fonn_Load event 
procedure. 
currentTimeToolStripStatuslabel.Text = Now.TolongTimeString() 
... Feedback 14 .3 
l. AppointmentDateTime = AppointmentDateTimePicker.Value 
2. Hour: Millisecond: Minute: Second: Month: Day: Year: Now 
3. All of the above properties are available for the Now property. 

Methods and Functions 
for Working with Dates, 
Financial Calculations, 
Mathematics, and String 
Operations 

616 
v 
S 
l l 
,\ 
I. 
C 
Dates, Financial Calculaticns, Mathematics. 
and Slr ing Opermicns 
Visual Basic and the .NET Framework include many ftmctions and methods 
that you can use in your projects. This appendix introduces some functions and 
methods for handling dates, for perfom1ing financial calculations and mathe-
matical operations. for converting between data types, and for performing string 
operations. 
Working with Dates 
Chapter 14 has a section introducing dates and the Calendar control. You can 
use the date functions and the methods of the Date Time structure to retrieve the 
system date. break down a date into component parts. test whether the contents 
of a tleld are compatible with the Date data type. and convert other data types 
to a Date. 
The DateTime Stmctm·e 
When you declare a variable of Date data type in VB. the .NET Common Lan-
guage Runtime uses the DateTime structure. which has an extensive list of 
properties and methods. You can use the shared members of the DateTime 
structure (identified by a yellowS in the MSDN Help lists) without declaring an 
instance of Date or Date Time. For example. to use the Now propetty: 
TodayOateTime = Now 
Following is a partial list of some useful properties and methods of the 
Date Time structure: 
Propet-ty or Jllethod 
Add 
Date 
Day 
DayO£Week 
DayOfYear 
Hour 
Minute 
Secon<l 
Month 
Now 
Purpo.o;e 
Add the specified number to an instance of a date/time. 
Variations include AddOays, AddHours. 
AddMilliseconds , AddMinutes.AddMonths. 
Add Seconds, AddTicKs, and.ll.ddYears. 
Date component. 
Integer day of month: 1- 31 
Integer day; Enum expression for each clay in the form of 
DayO!Week.Sunday. 
Integer day: 1-366 
Integer hour: 0--23 
Integer minutes; 0--59 
Integer seconds: 0--59 
Integer month; 1 = January. 
Retrieve system date and time. 

Property or Alelbod 
Subtract 
Today 
Year 
ToLongDat eString 
ToLongTimeString 
X 
Finds the difference beh.,·een date/time values; returns a 
TimeSpan object. 
Retcieve system date. 
Year component. 
Dale formatted as long date. 
(U.S. default: Wednesday. May 04. 2005) 
Dale formatted as long time. 
(U.S. default: 12:00:00 AM) 
ToShortDateString 
Dale formatted as short date. 
(U.S. default: 5/4t200S) 
ToShortTimeString 
Date formatted as short time. 
(U.S. default: 12:00 AM) 
Re 11·ieving the Syste m Dal.e and Tim£> 
You can retrieve the system date and time from your computer's clock using the 
Now property or the Today proper1y. Now retrieves both the date and time; 
'loday retrieves only the date. 
Examples 
Dim DateAndTimeDate As Date 
DateAndTimeDate = Now 
Dim TodaysDate As Date = Today 
To display the values formatted: 
DateAndTimeTextBox .Text = DateAndTimeDate.ToLongDateString() 
Dat eTextBox.Text = TodaysDate.ToShortDateString() 
NowTextBox.Text = Now.ToShortDateString() 
In addition to the date fonnatting methods. you also can fonnat dates and 
times with the ToString method by using an appropriate fonnat specifier. The 
table below lists some of the format specifiers. See "Date and Time Format 
Strings" in MSDN for a complete list. The actual format depends on the local 
format for the system. 
Format S J:.ecifier 
Dese•--ipt.io n 
Exnm1•le foo· U.S. Default SeUiu;-
d 
Short date pattern 
5/5/2008 
D 
Long date pattern 
Thursday. May 5, 2008 
Shoot time pattern 
12:00AM 
T 
Long time pattern 
12:00:00AM 
Full date/time (short) 
Thursday, May 05. 2008 12:00 AM 
F 
Full date/time (long) 
Timrsday. May 05. 2008 12:00:00 AM 
617 

618 
\ ' 
s 
l l 
\ 
•• 
IC 
·\ 
S 
Examples offonnatting using ToString: 
DateAndTimeTextBox. Text = DateAndTimeDate. ToString ( "D" ) 
TodayTextBox . Text = Today . ToString ( "d" } 
I I~•' •·-n•'fim·d Oat•' Fonn:•ttiu~ 
l ' 
Dat.,, Financitu CaJctdalion~ Maslll!!lwdct, 
arnJ SIJ ing OperaJionJ 
Visual Basic provides formal characters that you can use to create custom for-
matting for dates. Note thai the fonnat characters are case sensitive. 
C l ~tti'Utll(•f"' 
d 
dd 
ddd 
dddd 
MM 
MMM 
MMMM 
y 
yy 
YYY or YYYY 
Separator.. the actual character to print is de termine<! by the 
date separator specified for your locale. 
Day: displuyo without u leutling zero. 
Day: displays -.ith a leading zero. 
Day; uses a tit..,... letter abbreviatio11 f01· the day, such as Mon 
for Mondt~y. 
Day: •peUed ouL such as Monday. 
Montl1; displays without a leading zero. 
Month: di• playo with a leading zero. 
Month: use8 a three-letter abbre,•iat ion for the month name. 
such as Jan for January. 
Month: •pel led out. su<:h "" .Junuury. 
Year; displays as two characters witl10ut a leading zero. 
Year: displa.y~ as two d1aracters \vill1 a leading zero. 
Ycur: JispJo.ys WI foul' chuructcl'l!. 
Examples using January l. 2008: 
fo1·mut 
M/d/yy 
MM/dd/yy 
MMMM d, yyyy 
Date Var·iablcs 
n .... ult 
1/1108 
01101108 
January 1. 2008 
The Date data type may hold values of many forms that represent a date. Ex-
amples could be May 25. 2010. 5/25/10. or 5-25-2010. When you assign. a lit-
eral value to a Date variable. enclose it in # signs: 
Dim TheDate As Date 
TheDat e = #5 / 25/2010# 

X 
Con, r•·Liug Value:; Lo a Dale Fol'lnat 
If you want to store values in a Date data type. you need to convert the value to 
a Date type. The Date. Parse method and the Convert. ToDateTime method 
convert a value to Dale type but tJuow an exception if they are unable to create 
a valid date from t11e argument. Use a Try block to make sure you have a valid 
date value and catch the exception. 
Try 
TheDate = Date.Parse(OateTextBox.Text) 
Catch 
MessageBox. Show( "Invalid date. " ) 
End Try 
F imliug: 1be Difle •·encc between D ates 
You can use the Subtract rnel110d to find the difference between two Date ob-
jects. The result is in the format of days. hours. minutes, and seconds. Perhaps 
you only want the number of days behveen two dates. The .NET Frame~>·ork in-
cludes the Time pan class that stores the Lime differences with the properties 
that you need. 
Dim EnteredDate As Date 
EnteredDate = Date.Parse(DateTextBox.Text) 
Dim DaysTimeSpan As TimeSpan = EnteredDate.Subtract(Today) 
DateDifferenceTextBox.Text = DaysTimeSpan. Days.ToString() 
The user enters a date into a text box. That Date object uses its Subtract 
method to compare to today's date. 
A similar Add method allows you to set a date at a specified time in the 
future. 
Dim NextWeekOate As Date 
' Add methods require Double arguments. 
NextWeekDate = Today.AddDays{7D) 
NextWeekTextBox.Text = "Next week is: • & NextWeekDate.ToString{"D' ) 
Checking fo r the Day of Lilt> \'('eek 
Sometimes a program may need to check for the day of the week. Maybe you 
have a set day for a meeting or perhaps t11e rates differ on weekends compared 
to weekdays. 
If EnteredDate.DayOfWeek = DayOfWeek. Saturday or 
EnteredDate.DayOfWeek = DayOfWeek. Sunday Then 
weekendCheckBox .Checked = True 
Else 
WeekendCheckBox .Checked = False 
End If 
619 

620 
\ ' 
Financial Functions 
S 
L 
.\ 
L 
B 
.\ 
S 
C 
Daln. Financial ColaJJatwru, Mathmlmics, 
and SlJ ing Op<ratiDtu 
Visual Basic provides functions for many types of financial and accounting cal-
culations. such as payment amount. depreciation. future value. and present 
value. When you use U1ese ftmclions. you eliminate the need to know and code 
the actual formulas yourself. Each financial function returns a value iliat you 
can assign to a variable. or to a prope1ty of a control. The functions belong to 
the Microsoft. Visual Basic Financial module namespace. 
Calegory 
Purpose 
Func tion 
Depreciation 
Double-declining balance. 
DDB 
Straighlline. 
SLN 
Sum-oC-the-ye""'' digits. 
SYD 
Payments 
Payment. 
Pmt 
lnlerest payment. 
IPmt 
Principal poyn>enL 
PPmt 
Return 
lntentaJ mte of return. 
IRR 
Rule of relum wheJ> payment• ond 
MIRR 
ruceipts lire at d ifferent rate&. 
fule 
Interest rate. 
Rate 
F ulure \'aJu~ 
future value of an annuity. 
FV 
Present \'lllue 
Pl\'oent value. 
PV 
Preoent value wben values 
NPV 
are not constant. 
Number of period• 
Number of period. for an annuity. 
NPer 
(Number of payments) 
You must supply each function with the necessary arguments. You specify 
Ute name of the function. followed by parentheses that enclose the arguments. 
lntelliSense helps you type the ru·guments of ftmclions. When you type the 
parentheses. the arguments appear in order. The one to be entered next is in 
bold. The order of the arguments is important because the fw1ction uses the 
values in the formula based on their position in the argument list. For example, 
tJ1e folloll;ng Pmt function has three arguments: the interest rate. the number of 
periods. and the amount of the loan. If you supply the values in a different or-
der, the Pmt function will calculate with the wrong nwnbers. 
The Pmt Function 
You can use the Pmt function to find the amount of each payment on a loan if 
U1e interest rate. the number of periods. ru1d the anJOWll borrowed are known. 

1\ 
I' 
I' 
1•: 
N 
ll 
X. 
II 
Tlu· rmt l<'un•·tiuu-Cf'twt·:tl Fm·u1 
Pmt(InterestRatePerPeriod, NumberOfPeriods, AmountOfLoan) 
The interest mte must be specified as Double and adjusted to the inte rest rate 
per period. For example, if the loan is made with an annual rate of 12 percent 
and monthly payments. the interest rate must be converted to the mon1hly rate 
of 1 percent. Convert the annual rate to the monthly mte by dividing by the 
number of months in a year (Annual PercentageHate I 12). 
The number of periods for the Joan is the total nwnber of payments. Lf you 
want to know the montWy payment for a five-year loan. you must convert the 
number of years to the number of months. Multiply the number of years by 12 
months per year (NumberOtYears * 12). 
The Pmt function requires Double arguments and returns a Double value. 
Tlw rmL l'mtf'tiou-Ex:uupl•• 
Try 
MonthlyRateDouble = Double .Parse(RateTextBox.Text) 1 12 
MonthsDouble = Double .Parse(YearsTextBox.Text) • 12 
AmountDouble = Double.Parse(AmountTextBox.Text) 
MonthlyPay~entDouble = -Pmt(MonthlyRateDouble, MonthsDouble, AmountOouble) 
MonthlyPaymentTextBox.Text = MonthlyPaymentDouble.ToString() 
Cat ell 
MessageBox. Show(" Invalid data." ) 
End Try 
Notice in the example that the fields used in the payment function are from text 
box.es that the user can enter. and t.he alll!wer is displayed formatted in a text box. 
Also notice the minus sign when us ing the Pmt function. When an amount 
is botTowed or payments made. that is considered a negative amount. You need 
the minus sign to reverse the sign and make a positive answer. 
T he Rate Function 
You can use the Rate function to determine the interest rate per period when 
the number of periods. the payment per period. and the original amount of the 
loan are known. 
The HaLe Function- CciJCI'ai F'ot·m 
Rate(NumberOfPeriods, PaymentPerPeriod, LoanAmount) 
The Rate function requires Double arguments and retuTill! a Double value. 
621 

622 
l ' 
The Rate ~'un c tiou-Ex:uuple 
C 
Dates, Financial Calculalihns, Mathemalics, 
and Siring Operatihns 
~ .--------------------------------------------------------------. 
~ 
Try 
8 
MonthsDouble = Double. Parse(YearsTextBox. Text) • 12 
~ 
PaymentDouble = Double. Parse(PaymentTextBox.Text) 
AmountDouble = Double. Parse(LoanAmountTextBox.Text) 
PeriodicRateOouble = Rate(MonthsOouble. -PaymentOouble. AmountDouble) 
AnnualRateDouble = PeriodicRateDouble • 12 
YearlyRateTextBox .Text = AnnualRateDouble. ToString( "P") 
Catch 
MessageBox.Show( "Invalid data ." ) 
End Try 
Notice that the Rate function. like the Pmt function. needs a minus sign for the 
payment amount to produce a positive result. 
Function!' to Calculate De pt·eciatio n 
If you need to calculate the depreciation of an asset in a business. Visual Basic 
provides tluee functions: the double-declining-balance (DDB) method. the 
straight-Une (SLN) method. and the sum-of-the-years' digits (SYD) method. 
The DDB function calculates the depreciation for a specific period within 
the life uf the HS:Set. usiug lite uuuble-uediu.iug-balauce JJJethuol funuula. Ouce 
again. you do not need to know the formula but only in what order to enter the 
arguments. Incidentally. the salvage value is the value of the item when it is 
worn out. 
The ODB ( Oouble- Dl' cliuing-Balanct~) Ftmctiou-Gt'net·al •'ot•m 
~r 
~ c 
DDB(OriginalCost, SalvageValue, LiteOtTheAsset, Period) 
=~ 
e.. 
The DDB function returns a Double value and requires Double arguments. 
The ODB Function- Example 
~ .--------------------------------------------------------------. 
>< e 
{ 
~ 
CostDouble = Double. Parse(CostTextBox. Text) 
SalvageDouble = Double. Parse(SalvageTextBox.Text) 
Yearsoouble = Double. Parse(YearsTextBox.Text) 
PeriodDouble = Double. Parse(PeriodTextBox .Text) 
DepreciationTextBox.Text = DDB(CostDouble, SalvageDouble, Yearsoouble, 
PeriodDouble) . ToString( "C") 
The other financial functions work in a similar mrumer. You can use Help to 
find the argument list, an explanation. and an example. 
Mathematical Functions 
In Visual Studio. the mathematical functions are included as methods in the 
System.Math class. To use the methods, you must either import System. Math or 
refer to each method with the Math namespace. 

1\ 
1• 
1• 
1·: 
N 
I) 
X 
·~ 
For example, to use the Abs (absolute value) method. you can use either of 
these techniques: 
Answeroouble = Math.Abs(Argumentoouble) 
or 
' At the top of the file. 
Imports System.Math 
' In a procedure. 
Answeroouble = Abs(Argumentoouble) 
A few functions are not methods of the Math class but are Visual Basic 
functions. These functions, such as Fix and Int, cannot specify the Math 
namespace. 
A good way to see the list of math functions is to type "Math." in the Edi-
tor; lntelliSense will pop up with the complete list. The following table presents 
a partial list of the Math methods: 
Method 
Abs(x) 
Atan(x) 
Cos(x) 
Exp(x) 
Log(x) 
Max(xl, x2) 
Min(xl, x2) 
Pow(xl, x2) 
Round(x) 
Round(x, 
OecimalPlaces) 
Sign(x) 
Sin(x) 
Sqrt(X} 
Tan (x) 
Re hu'll.o 
The absolute value of... 
lxl = xifx2o0 
l:cl = - x if x S 0 
The angle in radians M-·hose tangent is x. 
'111e cosine of x where x is in radians. 
The value of e raised to the power of x. 
TI1e naturalJoga.ithm of X, where X 2o 0. 
Tile larger of the two arguments. 
The smaller of the tl<'O arguments. 
The value o( xl raise<! to the power of x2. 
Tile rounded value of x. rounded to the 
specified number of decimal positions. 
Note; .5 rounds to the neare&t even 
number. 
Tile sign of.~. 
- lifx<O 
Oiix = 0 
lifx>O 
n1e sine of X where X is in radians. 
The square root of x .. ·here x must be 2o 0. 
'111e tangent of;" where x is in radians. 
Overloaded: All numeric 
types allowed. 
Double 
Double 
Double 
Double 
Overloade<l: All types allo,..ed. 
Both arguments must be the 
same type. 
Overloade<l: All types al]o,.·ed. 
Both arguments must be the 
same type. 
Double 
Overloaded: Double or Decimal: 
Integer Decimal Places 
Overloade<i: All numeric 
types allowed 
Double 
Double 
Double 
623 
Re tuo·o Data Type 
Return matches 
argwnent type. 
Double 
Double 
Double 
Double 
Return matches 
arp;ument type. 
Return matches 
argument type. 
Douhle 
Retw·n matches 
argument type. 
Return matches 
argument type. 
Double 
Double 
Double 

624 
' 
!-
l 
\ 
I. 
II 
\ 
S 
l ' 
Doln. Financial CDkuJatim~:<. Mathmontic1. 
and String Operwioru 
Here are some useful VB mathematical functions: 
Ar{:Um cnl 
R ciiU"II 
F unction 
1\etuMI!! 
Da tu Type 
Onto 'frl>c 
Fix(x) 
The integer portion of x (truncated). 
Any numeric 
Integer 
e.xprest!ion. 
Int{X) 
The 1argest integer S x. 
Any numeric 
Integer 
expressioo. 
And() 
A random number in the range 0--1 
Single 
(exclusi\'e). 
Working with Strings 
Visual Basic provides many methods for working with text strings. Although 
several of the methods are covered in this text. many more are available. 
Strings in Visual Studio are iummLRhle. which means that once a string is 
created. it crumot be changed. Although many programs in this text seem to 
modify a string. actually o ne11· string is c reated und the old string is discarded. 
For string handling. you can use any of the many methods of the String 
class. You also can use the StringBuilder class. which is more efficient if you 
are building or extensively modifying strings. since the string can be changed 
in memory. In other 1.-ords. a SlringBuilder is 11Wlable (changeable) and a String 
is i mm.utable. 
Following is a partial list of the properties and methods in the String class. 
For shared methods. you don't need to specify a String instance; for nonshared 
methods. you must attach the method to the String instance. Examples of 
s hared methods and nonsharecl methods follow: 
If Compare(AString, BString) > 0 Then 
· Code to execute if true. 
1\ ou~ha•·ed .\le t.bod 
If AString.EndsWith( "ed") Then 
' Code t o execute if t rue. 
1\lctbod 
Compare(AString, BString) 
(Shared) 
Returns 
Integer: 
Negative if AString < BString 
Zero if ASITing = BString 
Positive if AString > BString 

1\PI"I\N
U 
IC 
625 
Method 
R e ttu"JL'> 
Compare(AString, BString, IgnoreCaseBoolean) 
Case inseusiti ve if lgnoreCaseBooleaJ~ is Ttue. 
(Share<!) 
Integer: 
Negative if AString < BString 
Zero if AString = BString 
Posith•e if AString > BString 
Compare(AString, StartAString, DString1 
Cou • .,ttt~ :-sul.r.stJ·iug:s; ~tart ~iti.ou iuJ.il:ttlc::s l.x::gi J wiu~ 
StartBString 1 Length Integer) 
character to compare for a length of Lengthlnteger. 
(Shared) 
Integer: 
Negative if AString < BString 
Zero if AString = BString 
Positive if AString > BString 
Compare(AString, StartAString, BString, 
Case insensitive if lgnoreCa.JeBoolean is True. 
Start8String1 Lengthinteger 1 IgnoreCaseBoolean) 
Compare substrings: start position indicates beginning 
(Share<!) 
character to compare for a length of Lengthlnteger. 
Integer: 
Negative if AString < BString 
Zero if AString = BString 
Positive if AString > BString 
EndsWith(AnyString) 
Boolean. Tme if the String instance ends with AnyString. 
Case sensitive. 
Equals(AnyString) 
Boolean. True if the Su·ing instance has the same value as 
AnyString. 
Case sensitive. 
I ndexOf(AnyString) 
Integer. lndex position in String instance that Any String 
is found. 
Positive: String found at this position. 
Negative: String not found. 
I ndexOf(AnyString1 StartPositioninteger) 
Integer. lndex position in String instance that Any String 
is found, starting at StartPosition./nteger. 
Positive: String found at this position. 
Negative: String not found. 
IndexOf(AnyString1 StartPositioninteger1 
Integer. lndex position in String instance that anyString 
NumberCharactersinteger) 
is found. starting at StartPositionlnteger. for a length of 
NrtmberCharacterslnteger. 
Positive: String found at this position. 
Negative: String not found. 
Insert(Startindexinteger, AnyString) 
New string 14-ith An,String inserted in the String instance. 
beginning at Startlndexlnteger. 
LastindexOf(AnyString) 
lntep;er. Index position of AnyStrinK 14-ilhin String 
instance. searching from the right end. 
LastindexOf (AnyString, StartPositioninteger) 
Integer. Index position of An,·String 14-ithin String 
instance. searching leftward. beginning at 
StartPositionlnteger. 
LastindexOf (AString1 StartPositioninteger1 
Integer. Index position of AString trithin String instm1ce. 
NumberCharactersinteger) 
searching leftward, beginning at StartPositi.onlnteger, for a 
length of NumberCharacterslnreger. 
PadLeft(TotalLengthinteger) 
New Stling with String instance right justified: padded on 
left ".;I], spaces for a totallengUl of Totall.engthlnreger. 

626 
\ 
S 
l l 
<\ 
L 
Method 
PadLeft (TotalLengthlnteger, PadCharacter) 
PadRight(Totallengthlnteger) 
PadRight(Totallengthlnteger, PadCharacter) 
Remove(StartPositionlnteger, 
NumberCharactersinteger) 
Replace(OldValueString, NeWValueString) 
StartsWith(AnyString) 
Substring(StartPositioninteger) 
Substring(StartPositionlnteger, 
NumberCharactersl nteger) 
AnyString.ToLower () 
AnyString.ToUpper() 
AnyString. Trim() 
AnyString.TrimEnd () 
AnyString.TrimStart() 
H 
\ 
S 
R N UI'Il8 
(' 
DoJn. Financial CalcuJatioru. Jlalhmwics, 
and Sa ing Op<ralioru 
New String ..-ith String instance right jm<ti!ietl: padded on 
left ";th the specified character for a total length of 
To/a ILengthl nleger. 
New String with String instance left justified: padded on 
right with spaces for a total length of Tola/Lengthlnt<gu. 
New Strin11 ..-ith String i""tance left justified: padded on 
right ~;th the specified character for a total length of 
T01a/Lengthlnugrr. 
New String with characters removed !rom String instance, 
beginning with StnrtPositionlnteger for a length of 
NumberChartu:u:,../nteger. 
New String ,.; th all occurrences of the old value replaced 
by the new vnlue. 
Boolean. True if the String instance starts ~·ith AnyString. 
CalM!! ~nsitin~. 
New String !hat is a substring of String instance: 
beginning at StartP011itionlnteger, including all c haractero 
to the right. 
New String.: a substring of String ins tance. beginning al 
Star!Pruitionlnteg.r for the •pedlied length. 
New String: the String instance converted. to lowercase. 
New String: the String inst:snce converted to uppe...,..,. 
New String: the String instance with all white-space 
cho.mctelll reo1ov<..J frum the left and right end... 
New String: the String instance ",;th all M-hite-spaoe 
chomctcn~ removed from the right end. 
New String: the String instance with all ~·bite-space 
characters removed from the left e nd. 
Methods for Conversion between Data trP.es 
Each of the following methods converts an expression to the named data type. 
Func tio n 
Re turn T~-pe 
Convert.ToBoolean(Expression) 
Boolean 
Convert.ToDateTime(Expression) 
Date 
Convert.ToDecimal(Expression) 
Decimal 
Convert.ToDouble(Expression) 
Double 

1\ 
1• 
1• 
1·: 
N 
I) 
X 
·~ 
Function 
Convert.Tolnt16(Expression) 
Convert .Tolnt32(Expression) 
Convert .Tolnt64(Expression) 
Convert .ToSingle(Expression) 
Convert .ToString(Expression) 
convert .ToUint16(Expression) 
Convert .ToUint32(Expression) 
Convert.ToUint64(Expression) 
Reuu·u Type 
Shoct 
Integer 
Long 
Single 
String 
Umigned Shott 
Un•igned Integer 
Umigned Long 
You also can use functions from the Visual Basic namespace for conver-
sion. Note that the Convert methods shown above are used in all .NET lan-
guages: the follm~ing functions are for Visual Basic only and are included in 
Visual Studio to make it compatible with early versiom of Visual Basic. 
Funt•lion 
l:euu·n TytJe 
CBool(Expression) 
Boolean 
CDate(Expression) 
Date 
CDbl(Expression) 
Docble 
CDec(Expression) 
Decimal 
Cint(Expression) 
Integer 
CLng(Expression) 
Long 
CObj (Expression) 
Object 
CShort(Expression) 
Shoct 
csng (Expression) 
Single 
CStr(Expression) 
String 
CT 
e Ex ression 
yp ( p 
NewT e 
yp ) 
S ecified tv 
p 
_pe 
Functions for Checking Validity 
The Visual Basic namespace also contains fw1etions that you can use to check 
for validity or type. These functions were used extensively in earlier versions of 
VB. but the preferred technique is to use the methods in the .NET Framework. 
627 

628 
\ ' 
Fmwtiou 
IsNumeric(Expression) 
IsDate (Expression) 
IsNothing(ObjectExpression) 
S 
U 
.\ 
L 
G 
.\ 
S 
ltNut'll."t 
Boolean: True if the expression evaluates 
u a valid numeric vnluc. 
Boolean: True if the expression evaluates 
as • volid dote value. 
Boolean: True if the object expression 
currently does not have an instance 
asoigned to it. 
( ' 
Datn, Financial Calt:uJalioru, Mathmaatics, 
and Sh ing Op<ralioru 
Functions for Formatting Output 
' 
ln Chapter 3 you leamed to formal data using specifier codes 1\~lh the 
ToString mel hod. Visual Basic also has some formatting functions. which are 
included in the Visual Basic namespace. Using the ToString method. rather 
than the Visual Basic functions. is the prefened technique for compalibilily 
among .NET languages. 
Fmwtion 
FormatCurrency(EXpressionToFormat [, 
NumberOfDecimalPositions [, LeadingDigit [, 
UseParenthesesForNegative [, 
GroupingForDigits)JJ J) 
FormatDateTime(EXpressionToFormat[, 
NM~edFonnat ] ) 
FormatNumber(fxpressionToFormat [, 
NumberOfDecimalPositions [, LeadingDigit 
[, UseParenthesesForNegative [, 
GroupingForDigits)]] ]) 
FormatPercent(fxpressionToFormat [, 
NumberOfDecimalPositions [, LeadingDigit [, 
UseParenthesesForNegative [, 
GroupingForDigits]]] ]) 
FonnalcurrencyfCJI' 
output. 
Fonnal dates and 
time for output. 
Format numben< with 
decimals. rounding as 
needed. 
Format percents for 
output. 

Tips and Shortcuts for 
Mastering the Environment 

630 
v 
s 
t 
\ 
•• 
II 
\ 
S 
C 
7lp• and Slr.orlcuJJ for Ma.w in& 
Set Up the Screen for Your Convenienc~ 
As you work in the Visual Studio integrated development environment (JDE). 
you will find many ways to save time. Here are some tips and shortcuts that you 
can use to become more proficient in using the IDE to design. code. and run 
your projects. 
Clmw or Hid<• Exu·a Windows 
Arrange your screen for best advantage. While you are entering and editing 
code in the Editor window. you don't need the toolbox. the Solution Explorer 
window. the Properties window. or any other extra windows. You can hide or 
close the extra windows and quickly and easily redisplay each ~indow when 
you need it. 
llidinf! and rlil'(lla)ill;! Wimlow:< 
You can use AutoHide on each of the windows in the l DE. Each ~indow except 
the Document window in the center of the screen has a pushpin icon UJat you 
can use to AutoHide the window or "tack" it into place. 
od box 
:E AI W'..down: Forrns 
You can AutoHide each ~-indow separately. or select Window I Auto Hide AI/. 
Jn this screen. aU extra windows are hidden. 
Tech Test 
\"fr®w 
--..., 
VG•,. U.~• (I 1:11 yo11,. C\••" "~"• .,.,.,... 
~ 
Fill in tMa.y' '> dat~.) 
- Hs p .. ojPct ""ill display a 
tiE>llo WOrld" 
MC:Ufr' i,. fW'I rl\T•I'I"'f'nt' ht'1£11118llt~ 
and prin• tt-Eo -to,... 
lhB Enrironmenl 
p .. ivate 5.Jb PushButt on_Click(ByVel 
~ender As Sy$tem.!biu"t, BtVa l e As. 
S.y~tem.E~n 
Cisplay the He.:.!c ~ld 
'l.i:~s.age 
t.tes :;aaeLabe-1. Te ~tt = "'Hell o lt.cr ld" 
&lrl S~.ob 
Private Sub Ex:itSutton_Click(ByVal ;;ende,- As System.Ooject ~ Byva: e As Sy s.t E:!r:.E,.,;:;n 
Exit: the proj ect. 
f~< .Clo:;e() 
End Sub 

X 
( ' 
Point to the icon for one o( the hidden windows to display it. In the next ex-
ample. notice tl1e mouse pointer on the Solution Explorer icon. which opens the 
Solution Explorer ll"indow temporarily. When you move the mouse pointer out 
of the window. it hides again. 
TE:c:m 
Odta 
Toob 
Test 
Vi"nd;,w Hdp 
'lour- 1\...,C!: (IJ$1. your own ~ 
h 
{F ~ll in tod~f ~date- . ) 
rh:.:3o project 
:.:~ displot :3 
KUO~C in b 
cfi-4'-ferc:nt i.J,&U 
•"d J»d!ll lie f 
IPuDLc CloSS r-to:::H r 
H 
Prlute: ~uo Pushlliunon_ClLck<eyval ser"tlitr 
• Displa/ !:he hello .-.10"' ~d ~ss.ag~. 
~ssaeo! ~abtl. Text • '"lit Lo WOrlrl ... 
fo"d ~l..lb 
Pr::.\.ate Su:o E.x.:..tButton_Click( B.yVql se."lder 
' E)(it t:'\4t P"Ojt?ct 
~ 
{Jly ProJed 
::J HeEoForm \.b 
To undo tl1e AutoHide feature. display a !'·indo!'· and click its pushpin 
icon . 
.Each of the LDE windows that has an AutoHide feature also has a drop-
down menu from l'·hich you can choose to float. dock. Auto Hide. hide. or make 
into a tabbed window. The tabbed window option is interesting: It makes the 
M;ndow tabbed in tlle center Documetll window. 
Closing Windows 
hbbcd 0:-:<t..II"W.ftt 
E 
~utoH"Id~ 
~ide 
You can close any l\indow by clicking its Close button. You also can close any 
extra tabs in the Document window: click on the Oose button to the right of the 
tabs to close the active document. 
Mouse 
pointer 
631 

632 
v 
S 
U 
i\ 
I, 
G 
.\ 
S 
C 
Tips and Shortcuts for Maswing 
Displaying Windows 
You can quickly and easily open each window when you need it. Each window 
is listed on the View menu. or use the buttons on the Standard toolbar. 
Display Windows Using Keyhoal'd Shor·tcuts 
Solution Explorer ~-indo,.. 
Ctrl + Alt + L 
Properties window 
F'4 
Toolbox 
Ctrl + Alt + X 
Switch between Oocumeuls 
When you have several tabs open in the Document window, you can switch by 
clicking on their tabs or use keyboard shortcuts. 
Switch from a foo·m~s Design View window to 
its Editor ~;ndow 
Switch from a fonn's Editor window to its 
Design View window 
Cycle through open document tabs 
Cycle through all open windows 
f7 
Shift+ F7 
Ctrl + F6 
Ctrl +Tab 
Visual Studio displays only as many tabs as fit in the current size of the 
Document window. If you have more documents open than displayed tabs. you 
can use the drop-down list of open documents. 
Si ll ingfo lnl.V~ I Design I X SUmmaryfoliTI.Vb 
SummaryForm.vb !Oes1gnl 
w'=J R 'n R. fc1 Redding 'n R~freshmeAt 
file 
f dit 
!idp 
the Environmeru 
A.boutBo:<l.vb-!Oesign] 
BillingForm.vb 
BtllingForm.vb [Design] 
Spla,bScreenl.vb (Design) 
Order lnfo~ion 
E!!J Su01moryforn1.Yb 
Quanl:i!y 
C ra~eout? 
Use the FuJJ Sct·een 
Coffee Selections 
0 (a)puccno 
{) &pres~ 
:' ta:te 
3 !ccd Ld.te 
t!j SunvnaryForm:vb (Oe~ign] 
When you are designing a form or editing code. you can work in full-screen 
mode. T his gives you maximum screen space by getting rid of nll cxtm win-
dows. Unfortunately. it also hides all toolbars (the Text Editor toolbar can be a 

X 
(' 
great timesaver while editing code). Select View I Full Screen to display in full-
screen mode. A small Full Screen bulton appears. which you can use to switch 
back to regular display. You also can press Shift + Alt + Enter or select View I 
Full Screen a second time to toggle back. 1f you want to display the Text Editor 
toolbar while in full-screen mode. select View / Too/bars / Text Editor. 
l\lo1lir) th<· S('l'<'t' n Layout. 
Each of the windows in the IDE is considered either a Tool window or a 
Document window. The Docwnenl windows generally display in the center 
of the screen with tabs. The rest of the 11indows--Solution Explorer. Properties 
window. Task List. Output. Server Explorer. and others-are Tool11indows and 
share many chamcteristics. You can Ooat each of the Tool "indows. tab-dock 
them in groups. and move and resize individual "indows or groups of llindows. 
Dof'k Wiudo\\S l ~iug Lht' Guide Diamonds 
Guide diamonds are an improvement added to VS 2005. When you start dmgging 
a dockable tool11•indow. the diamonds appear to give you visual cues to help 
dock to the desired location. As you dmg over the arrow. the corresponding area 
darkens. To tab-dock a window. you need to make the center of the diamond 
da1ken. Experiment! 
oo (NlOH~ndsOn- M.crosoft Vi!Ui!l Studio 
fH• 
E.dlf 
V·e.,.. 
PrQjftl 
BHJd 
Of'bu!) 
JP"~m Oi!h ~t 
..J,~ J· .... ~ 
.1. 
~-
= ICl 
!:li Re:fe1ences 
_ j bin 
_l ob) 
.2) Abo•tSo><l...t> 
d) Batn3fol'l'n.vb 
"':! lplashS<re•nhb 
::l Summol)form.vb O 
. .J Upg~dt:log.xML
, ~ 
633 

634 
,. 
C 
1lps and Shortcut! for Mast<ring 
SpliL the Sn(•('ll Vt•J·Lit•ally 
You can view the Editor window and the forn1 design at the same time. '\lfith at 
least two tabs open, select Window I New Vertical Tab Group. You may want to 
close the extra windows to allow more room for the two large windows. 
Tec11-n 
Dote 
TooiJ 
.., 
Pdvate <;;ub Clllc:ul.i'lteButton_Click(eyval s@nd! ~ 
ByVal e As System.hE"nt-Ares) "tandles Calcul 
Ca leu l ateSe 1 ect i<m TooL St r ip~le nultem . C J ic!<. 
I' lalculit.e and display the curre'lt arrour1 
Di.n PriceOeci~n~tl , Taxo-ecirr.al, ltefiWIClunt o; 
OU. Quantj t~IntE:ic:r A> l tllt::llcr 
' fird the: pri.~:e. 
If Cappucc inoRodioButtQn . Ch ~cked Thc: r~ 
Pr iceDeciiY!Ial -
CAPPUCCIJJO PRI CE Decim 
Else If Espre~t:o lhdioBut:ton . Ch;cked 1nen 
Pr ictOtc:itr.~d • ESPRESSO PRICE Oecitrt~L 
Flult LUhRAdioButtorL Ch•~lr:Ad Th11n 
PricoO.CiiT'o l • lATTE_PR lCE_OecU.ol 
::lself IcedCappuccinoRadioButton.Chec:ked • 
Pr iceoecimal 
== HEil'_PR!CE_Deciflal 
!nd If 
' CCilt.ul•lc U1c: cJ~.lendc:d 1J h.t a!IJ adl.l t.u 
Try 
Quantityi nteger - Integer . Pa~e {Qu<.lnt 
Ite,r..}.rtOuntDecitral - Pr i ceO"ecimal * Qu 
SubTotalDeciatal -1-= ltemA.nountDed.ltal • 
] 
s..bTotol 
T ex {M T .:keoLI.) 
' L 
"' 
r:;'lcolotOalogl 
To reset the DJE windows to their default locations. select Window I Reset 
Window Layout. 
Set Options fot· Your Work 
You can change many options in the VS IDE. Choose Tools I Options to display 
the Options dialog box. To see all the options that may be changed, make sure 
Show all settings is checked. You may want to click on each of the categories to 
see the options that you can select. 
Note: If you are working in a shared lab, check i>ith the instructor or lab 
technician before changing options. 
Projects and Solutions. Set the default folder for your projects. lt's best to leave 
the Build and Run options to automatically save changes but you may prefer 
to have a prompt or save them yourself. 
'he EnvironlTU!nl 

1\ 
1• 
1• 
1·: 
N 
I) 
X 
c 
Text Editor. You can set options for all languages or for Basic, which is Visual 
Basic. The following presume that you first select and expand the entry for 
Basic. 
• 
General. Make sure that Auto list members is selected and Hide advanced 
members is deselected. You may want to tum on Word wrap so that long 
lines wrap to the next line instead of extending beyond the right edge of 
the screen. You can tm11 on Line numbers to make it easier to find specific 
lines in the text editor. 
• 
Tabs. Choose Smart indenting; Tab size and Indent size should both be 
set to 4. 
• 
VB Specific. All options should be selected. 
Use Shortcuts in the Form Designer 
You can save time while creating the user interface in the Form Designer by us-
ing shortcuts. 
Use the Layout Toolbat· 
The Layout toolbar is great for wolking with multiple controls. You must have 
more than one control selected to enable many of the buttons. The same options 
are available from the Fom1at menu. 
Nudge Contt·ols into Place 
Sometimes it is difficult to place controls exactly where you want them. Of 
course, you can use the alignment options of the Fom1at menu or the Layout 
toolbar. You also can nudge controls in any direction by selecting them and 
pressing one of the arrow keys. Nudging moves a control one pixel in the di-
rection you specify. For example, the right arrow key moves a selected control 
one pixel to the right. You can also use Ctrl + an arrow key to align a control to 
the snap line of a nearby control. 
Use Sna1> Lines to Help Align Contr·ols 
As you create or move controls on a form, snap lines pop up to help you align 
the controls, wllich can be a great help in creating professional-looking fonns. 
Blue snap lines appear to align tops, bottoms, lefts, or rights of controls. 
635 

636 
\ ' 
S 
Ll 
\ 
I, 
It 
.\ 
s 
Sooi<SJ!oform.•b IDes1gnl l( 
. 
=~~ ' 
. ~·n RforP .. adlng n~<frtsh'l'<nt 
Book Sales 
--
-
~ ---
I 
Exenjed Prce 
ls-L Discount 
o..c...ntcd P1loo 
C 
Tip> and Shoncrru for •If rum i"'! 
llw!EnWr>nnll!nl 
When you see a red line toward the lower edge of controls. that means that 
the baselines of the text within the controls are aligned. 
Booi<SJI•Form.•b IOeslgn~! 
);x:J············~ 
BoOk Sales 
1~ 
OisCO!Xl 
The snap lines also can help you to standardize the vertical spacing between 
controls. As you drag a conlrol up or down near another control. a small dotted 
line appears to indicate that the controls are the recommended distance apart. 
~~ity 
~itle 
Dolt~-d line 
Use Shortcuts in the Editor 
,' 
Several features of the Editor can save you time while editing code. These are 
swnmarized in the following sections. 

1\ 
1• 
1• 
1·: 
N 
I) 
X 
c 
Use the Text Edito1· Toolba1· 
By default the Text Editor toolbar displays when the Editor window is open. If 
it does not display. select View /Too/bars /Text Editor. 
You can save yourself considerable time and trouble if you become familiar 
with and use some of these shortcuts. 
• 
Comment Selected Lines. Use this command when you want to convert some 
code to comments. especially while you are testing and debugging projects. 
You can remove some lines from execution to test the effect without actu-
ally removing them. Select the lines and click the Comment Selected Lines 
button on the Standard toolbar (or type Ctrl + K, Ctrl + C); each line '~ill 
have an apostrophe appended at the left end. 
• 
Uncomment Selected Lines. This command undoes the Comment Selected 
Lines command. Select some comment lines and click the button on the 
Standard toolbar (or press Ctrl + K. Ctrl + U); the apostrophes at the 
beginning of the lines are deleted. 
Toggle Bookmark. This button sets and unsets individual bookmarks. Book-
marks are useful when you are jumping arow1d in the Editor window. Set a 
bookmark on any line by clicking in the line and clicking the Toggle Book-
mark button (or type Ch·l + K. T); you will see a mark in the gray margin 
area to the left of the marked line. You may want to set bookmarks in sev-
eral procedures where you are editing and testing code. 
• 
Move To Next Bookmark (Ctrl + K. N) and Move To Previous Bookmark (Ctrl + 
K. P). Use these buttons to quickly jump to the next or previous bookmark 
in the code. 
• 
Clear All Bookmarks. You can clear individual bookmarks with the Toggle 
Bookmark button or clear all bookmarks (Ctrl + K. Ctrl + L) using this button. 
Use Keybom·d Shm·tcuts When Editing Code 
While you are editing code. save yourself time by using keyboard shortcuts. Note 
that these shortcuts are based on the default Visual Basic keyboard mapping. 
See Tools I Options and select Show all settings. Then select Environment I Key· 
board I Keyboard mapping scheme. Urop down the list and select Visual Basic 6, if 
it isn't already selected. Note that Show all settings does not appear in all versions 
of Visual Studio. 
637 

638 
v 
S 
l l 
A 
I, 
G 
.\ 
S 
(' 
Tips and Shortcuts for Mastering 
Task 
Delete from the iJlsertion point lefl to the beginning of the word. 
Delete from the insertion point right to the end of the word. 
Complete the word. 
Create an empty line above the cun-entline. Insertion point 
can be any,.·here in the line. 
Create an empty line belo,.· the cu,Tentline. Insertion point 
can be any~·here in the line. 
Swap the two characters on either side of the insertion point 
(transpose character). Note that this shortcut does not work in 
VBExpreS8. 
Swap ihe cu.rrent wot·d with the n·ord on its right (transpose 
word). Insertion point can be any..•here in the M'ord. 
Swap the current line with the next line (transpose line). 
Insertion point can be !Ul}~vhere irn the line. 
Cut the current line to the clipboard with the insertion point 
anywhere in the line. 
Jump to a procedure (insertion point on proce<lure name). 
Use this shortcut while working on the sub procedures and 
functions that you ... Ti.te. For example. when writing a call to a 
functioot, you might want to check the coding in the function. 
Point to the procedure name in the Call and press 1'12. If 
you want to return to ~1e original position. set a bookmark 
before the jump. 
Jump to the top of the current code file. 
Jump to the bottom of the current file. 
View the iOrm's Designer window. 
Return to the Editor window 
Sl1orte ut 
Ctrl + Backspace 
Ctrl + .Delete 
Ctrl + Spacebar 
or Alt + right arrow 
Ctrl + Enter 
Ctrl + Shift + Enter 
Ctrl + T 
Ctrl + Shift + T 
Ctri + Ah + T 
Ctrl + Y (VS Proj: 
default keyboard) 
Ctrl + L (VB Express 
defa~<lt keyboard) 
Fl2 
Ctrl + Home 
Ctrl + End 
Shift + F7 
F7 
You will find that most of the editing and selecting keyboard shortcuts for 
Microsoft Word also work in the Editor window. 
Split the Editos· Windo w 
You can view more than one section of code at a time by splitting the Editor 
window. Point to the Split bar at the top of the vertical scroll bar and drag the 
bar down to the desired location. To remove the split. you can either drag the 
split bar back to the top or double-click the split bar. 
the Environmcnl 

X 
Helloform.vb X 
C !Genera!l 
c 
· IDWe<JaratOO<l 
Hello World 
Your tfartle (Use your O'Hn naon:e here , ) 
(Fill in tod;~y 's date.) 
Thi~ f""'Vj~c..L wlll •.H.:.t~l oy "" 
"H~llu \o..u'·tJ• 
n~es;cage in two diff:,rgnt languages 
and print the -fcrm~ 
8Pub] ic ClaH ... eua~nrB 
! 
Private Sub Pu;:.h8utton_Click(ByVal sende "' ~s Systetn.ObJPct, ByVal e !l.s 
'lessagel abel.Text = "Hello World" 
~ 
End SUb 
1: <--- Split bar 
~ 
~ 
' 01Splay the f-'ello World me;:.;:.age . 
H 
Private ':lub Exi c:Button Cli. c~l 
sender 1\s Systen.f}h1f'Ct, l:lyVa] e As -
100% 
..- . 
fll 
_j 
Use D1·ag-and-D•·op Editing 
You can use drag-and-drop to move or copy text to another location in the Edi-
tor ~tindow or to another project. To move code. select the text. point to these-
lection. and drag it to a new location. You can copy text (rather than move it) by 
holding down the Ctrl key as you drag. 
D1·ag Commonly Used Code to the Toolbox 
When you have some lines of code that you use frequently. you can select the 
text and drag it to the toolbox. Then when you need tu insert the code, drag it 
from the toolbox to the Editor window. The text appears in the toolbox when the 
Editor window is open but not when a form is in design mode. 
Caution: This shortcut should not be used on shared computers in a class-
room or lab. as the text remains in the toolbox. Use it only on your own com-
puter. You can delete previously stored text from the toolbox by light-clicking 
and selecting Delete from the context menu. 
Re name Va1·iables and Objec ts 
Use the rename feature to automatically rename variables and objects. In the 
Editor window, light-click on a valiable name or an object name and select Re-
name. In the Rename dialog box. you can enter the new name and the item is 
reua111eu evetywltere iu tltat funu. Fur a multifurut prujecl. the Rename uialug 
box offers the choice ofrenaming in only the current form or all forms. This fea-
ture. called SymboL Rename. is part of a more robust feature called r·efactm·-
ing. which is available in some of the .NET languages. Refactoring allows the 
programmer to modify the name and class of variables and objects. 
Use Context-Sensitive Help 
The quickest way to get Help is to use context-sensitive Help. Click on a con-
trol or a line of code and press Fl; Help displays the closest matching item it 
can locate. You also can get help on the IDE elements: Click in any area of the 
IDE and press Shift + Fl: the Help explanation will be about using the cun-ent 
window or IDE element, rather than about the objects and language. 
639 

640 
l ' 
C 
Tips and SlwrtculS for Mastering 
Copy and Move Projects 
In a programming class. you often must move projects from one computer to an-
other and must base one project on another one. To create a new project based 
on a previous one, you should copy the project folder. Then you can move and 
rename it as necessary. 
Co py and :!\love a P 1·oject 
You can copy an entire solution folder from one location to another using the 
Windows Explorer. Make sure that the solution is not open in Visual Studio and 
copy the entire folder. 
To base one project on a previous project. take the foUowing steps: 
• 
Make sure the project is not open. Note: This is extremely important. 
• 
Copy the folder to a new location using the Windows Explorer. 
• 
Rename the new folder for the new project name, still using the Explorer. 
• 
Open the new project (the copy) in the Visual Studio IDE. 
• 
In the IDE's Solution Explorer, rename the solution and the project. The 
best way to do this is to right-click on the name and choose the Rename 
command from the shortcut menu. To rename the solution, you must dis-
play solution names: Tools I Options I Projects and Solutions I General/ Always 
show solutions. 
11ename the forms. if desired. If you rename the .stattup form. you must 
open the Project Designer (Project I ProjectName Properties or double-click 
on My Project in the Solution Explorer) and set the Stattup Object. 
• 
Open the Project Designer and change the assembly name to match your 
new project name. 
Warning: Do not try to copy a project that is open using the Save As com-
mand, attempting to place a copy in a new location. 
Deploy Applications 
When you are ready to distribute your programs to other computers. you use a 
process called deployment .. You can choose to use either Windows Installer or 
cUck-o nce deployment. 
To use Windows Installer. open the Build menu and select Publish Solution-
Name. Selecting the Publish option launches the Publish Wizard. which gives 
you the option of specifying a file path, a Web site. or an FTP server. Media 
options for distribution are CD-ROM or DVD, file share (nehvork), or the Web. 
You also can have the program check for updates online. 
If you deploy to a folder on your system. you will find a Setup.exe applica-
tion inside of the folder. Try copying the folder to a CD and then install your 
program on another machine. 
For a discussion of the various strategies for deployment. see "Deploying 
Applications and Components" in Help. 
the Environment 

Security 

642 
s u ,, 
•. 
It 
A 
S 
(' 
Security 
As a programmer, you must be aware of many aspects of security. You must not 
allow any unauthorized access to programs or data, but yc•u must be able to ac-
cess all needed resources while you are developing applications. For both sides 
of the security issue you need a basic understanding of security topics. 
The .NET Framework includes many features for implementing security. 
And as time passes and hackers and virus writers discover ways to circumvent 
the security, Microsoft is forced to tighten security. Because of this fact. you 
may sometimes find that programs or procedures that worked previously no 
longer work after you apply updates to Windows. which include updates to the 
.NET Framework and CLR. 
For programmers. security means inform ation assm·ance. The .NET 
Framework provides many object-oriented features to assist in the process. TI1e 
topic of security can fill multiple books and courses: this appendix is intended 
as an introductory overview for programmers. 
Authentication and Authorization 
The two topics of authentication and authorization are frequently lumped to-
gRthP.r hPr.::tu~P.thP.y am !<O do~P.Iy rP.llltP..-1. Ant:hmu ir.:nion r!P.tP.rminP.!< who thP. 
user is and autbor·izatiou decides if the user has the proper authority to ac-
cess information. 
Authentication is based on credentials. When you are working with a Win-
dows application, you only need to be concerned ~tith Windows authentication. 
However. if your application is Web Fonns-based (ASPNET). authentication 
might be liS Authentication. Forms-based (not recommended: it is an HTML 
request for credentials). or it might use .Microsoft Passport. which is a central-
ized profile service for member sites. It is also possible to create a custom au-
thentication method or use none at all. The settings in the Web.Config file 
determine the method of authentication. 
The following is an excerpt from the automatically generated Web.Config 
file for an ASP. NET application: 
<!-
The <authenticat ion> section enables configuration of the security authentication 
mode used by ASP. NET to identify an incoming user. 
- > 
<authentication mode="Windows" /> 
For no authentication. you can change the last line in the Web.Conflg file 
above to 
<authentication mode 
"None" /> 
Authot·jzatjon and ImiJet'sonatjo n 
After the user is authenticated. another step checks for authorization. If 
ASP.NET does not use impersonation. the ASP.NET user. which is created 
when the Framework is installed. runs without any privileges. If impersonation 
is turned on, ASP. NET takes on the identity from llS. If anonymous access is 

X 
D 
turned off. ASP. NET takes on the credentials of the authenticated user; other-
wise it impersonates the account that ITS uses. 
This is where the following code applies: 
<identity impersonate = "true"/> 
For a specific user you can use 
<identity impersonate = "true" name 
"Domaintusername" password 
Writing Secure Code 
Programmers need to be aware of how hackers are able to gain access to a data-
base or a network through code. Two primary areas of importance are string in-
jections and error messages that may give away important information about a 
data source. 
SQL lujecLion 
Proper validation of the code is extremely important. A system vulnerability oc-
cms when code is "injected" into a string. A text box or a combo box control al-
lows the user to type in information. It is the responsibility of the programmer 
to make sure that the input does not contain any scripting code or disruptive 
characters. When a program is working witJ1 a database, there must be no way 
for the user to inject code into that database. 
It is wise to validate the keystrokes to be sure that the input text contains 
only valid characters. 
El' t'O I' M.es!'ages 
Another technique that hackers use to find information about a database is to 
input wrong data hoping that the error message '~ill give significant informa-
tion. The default error messages indicate the nan1e of the field containing an er-
ror. Plan your error messages so that you don't allow someone to determine 
valid field names or values. You also can create custom error pages and denote 
the link in the Web.config file. This technique is covered in the authors' Ad-
vanced VB Programming text. 
Code Access Security 
Basically. code access security determines what code i~ allowed to do on a com-
puter. specifically what resources, such as hardware or files, the code can ac-
cess. The settings of the computer ultimately determine if the code can execute 
or if a resource can be used by the code. 
643 
"password"/> 

644 
,. 
S 
U 
.\ 
I . 
8 
.\ 
s 
C 
Securit,. 
Code access security is based on several Permission classes. The Permis-
sion classes are organized into three types: code access. identity. and role-
based. Examples of the code access type include the PrintingPerm.ission class 
and the RegistryPermission class: the SiteldentityPerm.ission and the 
UrlldentityPermission classes fall into the identity pennission type. The 
Principal Pennission class is the role-based type for user credentials. 
If your program has an OpenFileDialog component. it may be necessary to 
request permission to access the files from a given system. The following code 
would appear at the lop of the file: 
Imports System.Security.Permissions 
<Assembly: FileDialogPermissionAttribute(SecurityAction.RequestMinimum, Unrestric~ed : = True)> 

Glossary 
A 
About hox 
A n·indow that 
displays information about the 
program; usually displayed from 
the HBipl About menu item. 
ab!!olmc positionin~ Placing 
an element on a Web page by X 
and Y coordinates. 
ak.LJ'act cla"s A class that 
cannot be instantiated but instead 
is used for inheritance. 
a bstnwt mf't1wd 
An empty 
method declared with the 
t.lustoverride keyword: must be 
overriden in the derived class. 
Ac(•eptHutlo n proJwrty 
Fom1 
property that sets the default 
bull on. which is activated l4ith the 
Enter key. 
acc{'SS key 
Underlined 
charncter that allows the user to 
select using the keyboard ruther 
than the mouse: also called a hot 
key. 
access lcvd 
pacification of the 
permission required to access an 
element. Examples: Private. 
Public. Friend. and Protected. 
ac•·e:-so r method The Get and 
Set methods 14Tillen to allow 
external objects to access the 
private properties of a class. 
AJAX 
Asynchronous JavaScript 
and XML: method of speeding Web 
page display by updating only the 
part of the page that has changes. 
AllowOI'Op Jli'OJJel'tY 
A 
property of a form or control used 
for a drag-and-drop operation. 
ANSl code 
A coding method 
used to represent characters on a 
microcomputer (American 
National Standards Institute). 
:wgumeut The expression to 
operate upon in a function or 
method. A value being passed to 
or from a procedure. 
array A series of variables: 
each individual element can be 
referenced by its index position. 
Also called a list. 
assi:;nmeut ope rator Au equaJ 
sign(=): assigns a value to the 
variable or property named on the 
left side of the sign. 
assi:;nment stateme nt 
Assigns 
a value to a variable or property 
using an assignment operator. 
atu·ihute 
Supplies additional 
information about an XML 
element: must appear within single 
or double quotes. 
authentication The policies 
used to determine l4'ho the user is: 
may be Windows-based. forms-
based. Passport-based. or none (no 
authentication performed). 
authorization Determination of 
the rights allowed for a particular 
user. For ASP. ET applications. 
can allol4· access from any user by 
turning on impersonation. 
;\utoCor'J'I'Ct 
Popup 
suggestions for corrections of 
misspelled words in the Editor. 
anw-impll'nte nted p•·op«>•·ty 
A new property added to a class 
that does not require writing the 
Get and Set procedures. 
Autos wimlow 
Window that 
opens in IDE during execution; 
automatically displays all variables 
and control contents that are 
referenced in the current statement 
and three statements on either side 
of the current one. 
B 
hal'<' d a.,., 
Class that is inherited 
from: also called a l!tper class or 
parent clas.s. 
binding -.om·c<• 
Object that 
establishes a link to a data source. 
hiO<·k-lt•vd variable 
A variable 
declared inside a block of code; onJy 
accessible within that block. 
Hoolcm1 CX(II'C!<sion An 
ex:pression that el'aluates to True 
or False. May be referred to as a 
condition. 
Hordc1·St yle JU'OJWI'IY 
Property of a control that allows 
the control to appear flat or three-
dimensional. 
bound conu·ol A control that 
automatically displays the contents 
of database fields. 
breakpoint 
Indicated point in 
project code where execution 
should break; used for debugging. 
645 

646 
browset· 
An application used to 
render and display HTML code; 
used to display Web pages; in VB 
used to execute Web Forms. 
Brush object Graphical object 
for drawing filled shapes. 
Button Control used to activate 
a procedure. 
ByRef 
Declares that an argument 
passed to a procedure should be 
passed as the address of the data 
so that both calling ru1d called 
procedures have access to the 
same memory location. 
ByVal Declares that an argument 
passed to a procedure should be 
passed as a copy of the data. The 
calling and called procedures do 
not have access to each other's 
variables. 
c 
Call (procedm·e call) 
Execute 
a procedure. 
callback 
An object notifies the 
program that it needs to do 
something or that a situation exists 
t11at t11e program needs to handle. 
The object notifies the program of 
the situation by firing an event. 
Can cel Button propet"ty 
Form 
property that sets tlle Cancel 
button. which is activated with the 
Esc key. 
cascading style sheet (CSS) 
A set of styles for fom1atting 
elements of Web pages. 
Case stt·uctm·e 
Selection 
structure; can be used in place of 
an If statement. 
cast.iug Converting from one 
data type to another. 
CausesValidatiou propet·ty 
Property of a conb·ol that forces 
validation to occur on the control 
that just lost focus when this 
control receives the focus. 
Charactet·Casiug (WOpet·ty 
Property of text boxes that specifies 
whether input should be left as 
entered or converted to uppercase 
or lowercase. 
check box 
A control used to 
indicate a value that may be True or 
False. In any group of check boxes. 
any number may be selected. 
checked 
A check mark next 
to a menu item indicates that the 
option is currently selected. 
Checked (ll"opet·ty 
Determines 
if a check box is checked or not. 
child class A class inherited 
from another class. called the 
parent. Also called a derived class 
or subclass. 
child fot·m 
Multiple Document 
Interface. A child form belongs to 
a parent form. is displayed inside 
the parent. and closes when the 
parent does. 
class 
A prototype or blueprint for 
an object; includes specifications 
for the properties and methods. 
class-level variable A variable 
that is available to all procedures 
in the class and exists as long as 
the class is loaded. 
clean compile Code compiles 
to Common Language Runtime 
without errors. 
click-once deployment 
New 
simplified method of deploying VB 
applications to another computer. 
Provides for installation and 
automatic updates via the Web. 
Close method Closes forms or 
files: releases resources used by 
the object. 
code 
Programming statements in 
the Basic language. 
Glossary 
code separation model A style 
of Web Fonn in which the VB code 
is in a separate file from the HTML 
code. 
code snippet Small sample 
of code that illustrates coding 
techniques: can be added to a 
program in the editor. 
collection 
A series of objects or 
an object that can contain a series of 
objects; ha'S properties and methods. 
color constant Values assigned 
in the Color class. Examples: 
Color. Red and Color . .Blue. 
colmnn A vertical section of a 
grid control. 
ComhoBox conu·ol A control 
that is a combination of a list box 
and a text box. 
common dialog A set of 
Windows dialog boxes available to 
Visual Basic programmers for Open. 
Save, Fonts, Print, and Color. 
comparison operatot· See 
relational operator. 
component tt·ay Area across 
the lower edge of a form designer 
window; used to store components 
that are not visible on the form. 
compound Boolean expression 
Multiple conditions combined with 
the use of t11e logical operators And 
or Or. 
concatenation Joining string 
(text) fields. The ampersand (&) is 
used to concatenate text. 
condition An expression that 
will evaluate True or False. May 
be a comparison of two values 
(variables. properties. constants) 
using relational operators. 
constant A value that cannot 
change during program execution. 

G 
L 
0 
S 
S 
A 
R 
Y 
consu·uctot· A procedure that 
runs automatically when an object 
is instantiated from that class. ln 
VB. a constructor is coded with 
Sub New. 
cont ainer' 
An object that can 
hold other objects. 
context menu A popup menu. 
sometimes referred to as a slwrtcu.t 
men n or a right-mouse menzt. 
context-sensitive Help 
Use of 
the Fl function key to directly 
access the Help topic related to 
the code or object containing the 
cursor. 
ContextMcnuStl'ip component 
A container control used to create 
context menus. 
conu·ol An object used on a 
graphical inte1face. such as a radio 
button. text box. button. or label. 
CType fnnctiou Converts from 
one object type to another: used 
11·ith a shared event procedure to 
access the Sender object. 
D 
data binding Connecting a 
control or property to one or more 
data elements. 
data-hound couu·ols 
Controls 
that can be set up to display the 
data from a database. 
Data Desig:uet· A window of 
the VS IDE that shows a visual 
representation of the schema of a 
database; allows modification of 
the schema. 
data file 
A file used to store 
small amounts of infonnation such 
as the contents of a list box. 
data som·ce The original source 
of database data: may be a file. a 
server. or an array or other object. 
da La 1 ype 
pecifies the type 
of data a variable or constant can 
hold. such as Integer. Decimal. 
or String. 
DataCt·idView control A 
control used to display database 
data in a grid format. 
dataset. A temporary set of data 
stored in the memory of the 
computer. 
DateTime su·uctm·e 
Used to 
retrieve and format d1e current 
date and time. 
debug time Temporary break in 
program execution: used for 
debugging. 
Debug. Wri teLine method 
Statement to write a line in the 
Debug window: used to write a 
message for debugging. 
dehu~ing: Finding and 
eliminating computer program 
errors. 
declm·atiou Statements to 
establish a project's variables and 
constants. give them names. and 
specify the type of data they will 
hold. 
Dcrlm·:lliuus section Code 
outside of a procedure. used to 
declare module-level variables. 
delimited OJe 
A file in which 
the data elements are separated 
by a predefined character or 
characters. such as a comma. tab. 
or carriage return. 
deployment 
Distribution of a 
compiled application to another 
computer; norrnaHy done through a 
setup.exe file. See click~once 
deploymenJ. 
det·ived class A subclass 
inherited from a base class: also 
called a child class. 
647 
de~ig:u time The status of the 
Visual tudio enviromnent while a 
project is being developed. as 
opposed to run time or break time. 
dcstt·uctot· A method that is 
called as an object goes out of 
scope. 
DialogRc,..uh object 
Used to 
check to determine which button 
the user clicked on a message box. 
Dictionary A collection type 
that contains a pair of items 
consisting of a key and a value. 
direct •·efe1·euce Accessing an 
element of an an'lly by a subscript 
when the value of the subscript is 
known. 
disabled 
Enabled property set to 
False: user can see the control but 
cannot access it. 
Do and Loop statemellls 
Statements to indicate the 
beginning and ending of a loop. A 
condition can appear on the Do or 
on the Loop. 
Do I Loop 
A loop constructed wjth 
the Do and Loop statements. 
Document window IDE 
window that displays the Form 
Designer. the Code Editor. and the 
Object Browser. 
DoDragDrop method A method 
to begin a drag-drop operation for 
a source object. 
Dt·agD1·up e,·eut The event 
that occurs when the user drags an 
object and drops it on a form or 
control that has its AllowDrop 
property set to True. 
Dr·ng:Entc r· event The event that 
occurs when the user drags an 
object over a form or control that bas 
its AJJowOrop property set to True; 
occurs before the DragDrop event. 
DrawLine method 
Method of 
the Graphics object. 

648 
DrawRectangle mt'lhod 
Method of the Gruphks object 
used to draw S<luares and 
rectangles. 
DrawString method Method of 
the Graphics object: eends 8 line of 
text to the graphics page. 
drop-do"""TI combo box 
A 
combo box control w11h a do\\n-
pointing arrow that allows the 
user to drop down thr list. Allows 
efficient use of space on a fonn. 
d•·o1Hlown list 
A list box with 8 
down-pointing arrow that allows the 
user to drop d01111 the list. Allows 
efficient use of space on o form. 
E 
element 
ingle item within a 
table. array. list. or grid. 
elemelll (~\IL) An itcrn in 011 
XML file surrounded by tags. 
emr•ty .. triu:.: 
A string that 
contains no character.: also called 
a null string or ::em-length string. 
Enabled p•·opet'l) 
Boolean 
property of a controltl:al detennines 
1\helher it is available or disabled 
(grayed). 
eJH':tll"nl:uion 
OOP f€'8lure 
that specifies that aJI methods 011d 
properties of a class be coded within 
the class. '!'he class can hide or 
expose the methods and properties. 
as needed. 
End If Terminates a block If 
statement. 
entry test A loop that has its 
test condition at the lop. See 
pretest. 
EnOI'Pl·o,;de•· compo nent 
A component that can display an 
error icon and messa&e when a 
validation rule is violated for the 
specified text box. 
f'\<'111 
An action that may be 
caused by the user. such as a clict. 
drag. key press. or scroll. Events 
also c011 be tr~ered by 011 intern.tl 
action. such as repainting the form 
or validating user input. 
I'\ en I l'•·oredure 
A procedure 
Mlillen to execute when an event 
occurs. 
l'Xception An error that occurs 
at run time. 
exit test 
A loop that has its te;t 
condition at the bottom. See 
posttest. 
I'XIllirit f'om·ersiou Writing the 
code to convert from one data type 
to another: as opposed to implicit 
converswn. 
Exp•·css Edition 
A "light" 
version of Visual Basic. Available 
for download at rnsdn.microsofl.com/ 
express. 
K\.tNI"ihl" AJ'I'lkntiou lltn·kup 
Lan; u .. 'lge (XA..,LL) Extension of 
HTML used to create the visual 
elements of a Windows Presentation 
Foundation (WPF) 11mdow. 
F 
lirld A group of related 
characters used to represent one 
characteristic or attribute of an 
entity in a data me or database. 
licld-level ,·aJidatiou Checking 
the validity of input data in each 
control as it is entered. rather than 
waiting until the user clicks a 
button. 
lile 
A collection of related 
records. 
FillEllipse method 
Method 
of the Graphics object: used to 
draw circles and ovals. 
focus 
The currently selected 
control on the user interface. For 
controls such as buttons. the focus 
appears as 11 light dotted line. For 
text boxes. the insert ion point (also 
called the cur$or) appears inside 
the box. 
Focus lllf'lhOtl 
Sets the focus lo 
a control. which makes it the 
active control. 
For :1ntl Next .. t:ltl'mf'nt' 
A 
loop structure: usuaiJy used when 
the number of iterations ib kno ... n. 
For Each ::md Next 
A looping 
construct for stepping through w1 
array: each element of the array is 
accessed without the necessity of 
manipulating subscripts. 
For/ Next lon11 A loop structure: 
usual I y used when the number of 
iterations is known. 
Fot'eColur· J'I'UI'"''ty 
Property 
that determines the color of the text. 
for•nt 
An object thutaC'Is a.' a 
container for the controls in a 
graphical interface. 
Fonu Designer 
The IDE 
11indow for creating the user 
interface. 
format 
A specification for the 
way infonnation will be displayed. 
including dollar signs. percent 
signs. and the number of decimal 
positions. 
fo1·mat s pecifien. Codes used 
as arguments for the ToString 
method: used to make the output 
easier to read. Can specify dollar 
signs. commas. decimal positions. 
percents. and date formats. 
FormOosing e,·e m 
Occurs 
before a form unloads. A good 
location to place the code to 
prompt the users if they wish to 
save any changes. 

G 
I, 
0 
S 
S 
.\ 
ll 
V 
Fr i end The ttccess level 
specifier that limits access to the 
forms in the current project. 
FromFile method 
Retrieves an 
image from a file. 
fmtctiou 
Petforms an action and 
returns a value. 
fwJctlou procedw·e A 
procedure that returns a value. 
G 
gm·hngc collet:tio 11 
Automatic 
deletion of objects from memory 
after they are out of scope. 
geueml pt·ocedw·e A procedure 
not attached to an event; may be a 
sub procedure or a function 
procedure. 
!;I'::IJihic:tJ usct• inle t·facc (GUI) 
Program application containing 
icons. buttons. and menu bars. 
gt·apl1ics Lines. shapes. and 
images. An image file assigned 
to a Picture Box control; methods 
of the Graphics class. such as 
OrawString.OrawLine.and 
DrawEllipse. 
Gt·ou)tBox ronu·ol A control 
used as a container for other 
controls. such as a group of radio 
buttons. 
H 
hnndle 
A small square on a 
selected control at design time: 
used to resize a control. Also 
called a resizing handle. 
Help The collection of reference 
pages about programming in VB 
and using the Visual Studio IDE. 
Hide method 
Method of a fonn 
or a control that males it invisible 
but does not unload it from 
memory. 
ho rizoutal Sl'roll bm· A 
Windows control that provides a 
scroll bar that appears hori7..ontally 
on the form. 
I 
LDE Integrated del'elopment 
environment. See Visual Sttulio 
environment. 
identifiet· A name for a variable. 
procedure. class. or named constant: 
supplied by the programmer. 
If /Then/ Else Statement block 
for testing a condition and taking 
alternate actions based on the 
outcome of the test. 
hua,!;e prore t·ty A graphic file 
Kith an extension of .bmp •. gif. 
.jpg .. png . . ico •. emf. or xmf. 
immutable 
The inability of a 
string to be modified once it is 
created. A new string must be 
created for any modifications. 
implicit convet·sion 
A 
conversion (rom one data type to 
another that occurs automatically 
or by default according to specified 
rules. 
index 
Position witl1in a list or 
array. 
infot·mation a5sm·rutce Secure 
programming measure to provide 
accurate and timely transfer of 
information. 
inbet'itauce Ability to create a 
new class based on an existing 
class. 
instance An object created from 
a class. 
instance propet·ty 
See instance 
variable. 
instance vru'iable 
Each object 
created from t11e class has a 
separate occurrence of the variable. 
iustautiat•• 
Create an object 
using the New keyword. 
649 
iutegrated tlm·elollmcnt 
enviroUlllenl (IDE) Tool for 
writing projects and solutions: 
includes an editor. tools. debugger. 
and other features for faster 
development. 
TnterYal pt·orerty Determines 
the amount of lime until a Tuner 
component fires a Tick event; 
measured in milliseconds. 
iutt·anet Network within a 
company. 
intt·insic constant 
Constant 
supplied with a language or 
application such as Color. Blue. 
lsl\'lcliCont ainct· prope rty Used 
to create a parent fonn for MDI. 
Items JH'OJWt·ty 
Collection of 
elements for a list box or combo 
box control. 
Items .Add method Adds 
elements to the Items collection of 
a list box. 
Items. Cl ear method 
Clears all 
elements from a list box. 
Items. Count )l i'O )l("l'l Y 
Property that holds the number of 
elements in a list box. 
It11ms. Ins11rt method 
Inserts 
an element in a list for a list box. 
I terns . Remove method 
Removes the currently selected 
item from a list. 
I terns. RemoveAt method 
Removes the specified item from a 
list. 
iteration 
A single pass through 
the statements in a loop. 

650 
K 
key field 
The field (or fields) on 
which a data file is organized; used 
to search for a record. 
L 
Label 
A control that displays 
text: cannot be altered by the user. 
Language lntegrated Quer·y 
(U:NQ) 
.NET feature that allows 
SQL-Iike queries to be written in 
VB code. 
LargeCbange pro(Jer"t.y A 
property of a scroll bar that 
determines how far to scroll for a 
click in the gray area of the scroll 
bar. 
late binding 
Program elements 
cannot be detennined at compile 
time. but must be determined at 
run time. Should be avoided. if 
possible, for performance reasons. 
layoutMdi method Arranges 
MOl child windows vertically. 
horizontally. or cascaded. 
lifetime The period of time that 
a variable exists. 
line-continuation character 
A space and underscore; used in 
program code to indicate that a 
Basic statement continues on the 
next line; not required under 
certain rules. 
ListBox couu·ol 
A control that 
holds a list of values: the user 
cannot add new values at run time. 
local 
TI1e scope of a variable or 
constant that limits its visibility to 
the current procedure. 
local var iable 
A variable that is 
declared within a procedure and 
may be used only in that procedure. 
Locals window Window that 
opens in IDE during execution; 
displays all objects and variables 
that are ~tithin scope at break time. 
logic enor An error in a project 
that does not halt execution but 
causes erroneous results in the 
output. 
logical oper-ator· The operators 
And. or. Not. AndAlso and 
OrElse; used to construct 
compow1d conditions and to 
reverse the truth of a condition. 
loop A control structme that 
provides for the repetition of 
statements. 
loop index A counter variable 
used in a For/Next loop. 
M 
l\:[a<>kedTextBox 
A specialized 
form of text box that includes a 
Mask property. which can indicate 
to the user the format of data 
expected and require the correct 
data type and format of input. 
Maxinmm prope rty Scroll bar 
property for highest possible value. 
l'i axLeugtb pr·oper·ty Properly 
of text boxes that limits the number 
of characters the user can enter as 
input. 
l\:LdiWindowListltem pr·o(Jer·ty 
Detennines whether the menu will 
display a list of open MDI child 
windows: used on the Window 
menu. 
menu A list of choices; the 
available commands displayed in a 
menu bar. 
J\feuu Designer· Feature of the 
development environment for 
creating menus; accessed by 
adding a Main Menu component to 
the component tray. 
J\fenuSu·ip component A 
control used to create menus for 
forms. 
J\'lessageBox 
A dialog box that 
displays a message to the user. 
Glossary 
method Predefined actions 
(procedures) provided ,~; th objects. 
Minimum proper-ty 
Scroll bar 
property for lowest possible value. 
modal A dialog box that 
requires a user response before 
continuing program execution. 
modeless A dialog box that does 
not require a user response before 
continuing program execution. 
module-level varial>le 
A 
variable that can be used in any 
procedure within the current code 
module. 
MouseDom1 event The event 
of a form or control that occurs 
when the user presses the mouse 
button. 
M ultili:ue propel't y Boolean 
property of many controls. 
including labels and text boxes. 
that allows text to appear on 
multiple lines. WordWrap must 
also be set to True. 
multiple docmuent interface 
(MDO Multiple form project that 
has parent and child forms. 
mu.ltitiet· application A 
program designed in components 
or services. where each segment 
performs part of the necessary 
actions. Each of the functions of a 
multitier application can be coded 
in a separate component and the 
components may be stored and run 
on different machines. 
~tustlnherit Modifier on a 
class definition. The class cannot 
be instantiated. but instead must 
be used for inheritance. 
Mustoverride 
Modifier on a 
procedure defmition; requires that 
the procedure be overridden in an 
inherited class. 
My. Computer·.FileSystem 
VB-
specific objects for accessing files. 

GJ,
OS
SA
RV 
N 
Name pt·operty The property of 
an object that is used to reference 
the object in code. 
named constant Constant 
created and named by the 
developer. 
nruuespace 
Used to organize a 
group of classes in the language 
libraty: the hierarchy used to locate 
the class. No hvo classes may have 
the same name within a namespace. 
nruuespace-level variable 
A 
variable that can be used in any 
procedure within the cutTent 
namespace, which is generally the 
current project. 
nested If An If statement 
completely contained within 
another If statement. 
nested Try/ Catch block 
A 
Try I Catch block completely 
contained within another 
Try /Catch block. 
NewLiue char·acter 
TI1e Visual 
Studio constant Environment. 
NewLine or ControlChars. 
Newline: used to detennine line 
endings. 
Next metllod 
Ketums the next 
in a series ofrandom numbers for 
an object of the Random class. 
node 
(Xl\JlL) A branch of the 
tree. The ftle can have only one 
root node and multiple child 
nodes. 
Nothing An object variable that 
does not have an instance of an 
object assigned. Formerly used to 
destroy an object. 
Now propet·ty 
Current date and 
time from the Date Time structure. 
0 
object 
An occurrence of a class 
type that has properties and 
methods: a specific instance of a 
control type. fotm, or other class. 
object-ot'icnted pi'Ogt·rullllliug 
(OOP) 
An approach to 
programming that uses classes to 
define the properties and methods 
for objects. Classes may inherit 
from other classes. 
OpeuFile Dialog 
Common 
dialog component used to display 
the Windows Open File dialog box; 
allows the user to view files and 
select the file to open. 
Option Explicit Setting this 
option On forces variables and 
objects to be declared before they 
can be used. 
Option Strict Setting this 
option On enforces strong data 
typing. 
ot•der of pt·ecedence 
Hierarchy of mathematical 
operations; the order in which 
operations are perfonned. 
overloading 
Allows a method 
to act differently for different 
arguments. Multiple procedures in 
the same class with the same name 
but '~ith different argument lists. 
overriding 
A method in a 
derived (inherited) class with the 
same name and argument list as a 
method in the parent (base) class. 
TI1e method in the derived class 
overrides (supersedes) the one in 
the parent class for objects of the 
derived class. 
p 
pat·arneter·ized cousu·uctor 
A 
consttuctor (Sub New) that 
contains an argument list: as 
opposed to an empty constructor. 
)llll'll lllP.lfWi 7.N I fJliP.l'Y 
A 
database query that allows a value 
to be supplied at nm time. 
6Sl 
parent class The base class for 
inheritance. also called a super 
class. 
par·ent fo1·m 
MDI container for 
child fom1s. 
Pascal casing 
The naming 
convention that specifies mixed-
case names; the first character 
must be uppercase and the first 
character of each word within the 
name must be uppercase; tl1e rest 
of ilie characters must be 
lowercase. 
Peek method 
Used to look 
ahead to determine if records 
remain in a file stream. 
l'en object 
Graphical object for 
drawing lines and shapes. 
Picun·eBox coutt·ol 
A control 
used to display an image. 
pixel Picture element: a single 
dot on the screen; a unit of 
measurement for displaying 
graphics. 
Poiut su·ucuu·e Holds X and Y 
coordinates as a single unit. 
polytnorphism OOP feature 
that allows methods to take 
different actions depending on the 
situation. Methods may have the 
same name but different argument 
lists. Also refers to the naming 
convention of naming methods 
with similar actions the same in 
each class. 
post back A round-trip to the 
Web server. 
posttest 
A loop that has its test 
condition after the body of the 
loop: the statements within the 
loop will always be executed at 
least once; also called an exit test. 
pretest 
A loop that has its test 
condition at the top; the statements 
inside the loop may never be 
executed: also called an entry test. 

652 
Print method A method of the 
PrintDocurnent class to begin 
executing code for printing. 
l>riut J>l'eview 
View the printer's 
output on the screen and then 
choose to print or cancel. 
PrintOocument component 
Contains methods and events to set 
up output for the printer. 
PrintFot·m 
A method of a form 
that prints the form in its current 
state; can be set to print on the 
printer or the Print Preview 
window. 
Print.Page event pt·ocedm·e 
Contains the logic for printing. 
Print Pt·eviewOialog component 
Used to allow print previews for an 
application. 
Private Variable or procedure 
declared with the Private 
keyword; available only inside the 
current class. 
procedm·e A unit of code: may 
be a sub procedure, function 
procedure, or propetty procedure. 
Professional E<Utiou A version 
of Visual Basic that includes fewer 
features than the Team System 
edition but more features than the 
Standard and Express editions. 
Project Designer· A tabbed 
window of the IDE used to view 
and set the project's properties. 
Displayed from Project I 
ProjectName Properties. 
pt·oject me 
A text file that 
contains infonnation about the 
current project. Displays in the 
Solution Explorer and can be 
viewed and edited in a text editor. 
Pt·ulU:lJ·tim; wituluw 
A wiuJuw 
iJ1 the IDE used to set values for 
propet1ies at design tilne. 
proper-ty 
Characteristic or 
attribute of an object; control 
properties may be set at design 
time or nm time dependiJ1g on the 
specific property. 
pt·operty procedure Procedure 
1nitten with Set and Get keywords 
to pass values to and from private 
variables iJ1 a class. 
Protected Access modifier for a 
variable or procedure; behaves as 
private but allows iJ1heritance. 
pseudocode 
Planning tool for 
code using an English expression 
or comment that describes the 
action. 
Public The access level 
specifier that allows access from 
all classes. 
R 
t·adio button A control used 
to indicate a value that may be 
True or False (selected or not 
selected). In any group of radio 
buttons. only one button may be 
selected. 
Random class 
Used to create 
Random numbers. 
ReadAllText rnetl10d 
A simple 
method to read an entire text file 
into a variable. The method opens 
a file. reads the data. and closes 
the file automatically. 
Readline metJ1od 
Reads one 
record from a file: reads to the end 
of the line. 
ReadOnly 
A property that can be 
retrieved but not set by extemal 
classes; indicates that only a Get 
method exists for the property. 
•·ccunl 
A group uJ relateJ fields; 
relates to data files and database 
tables. 
Clo.sary 
Rectangle su·uctm·e Defines a 
rectangular region. specified by its 
upper-left comer and its size. 
t•cfaetoriug 
Fcntw'C of some .NET 
languages that can automatically 
change the name and class of 
variables and objects. VB provides 
only for renaming variables. 
r·elatioual O)Jer·ator Used to 
compare two fields for greater 
than >, less than <. or equal to =. 
t•emark A Basic statement used 
for documentation; not interpreted 
by the compiler; also called a 
comment. 
t·esiziug baudJe 
See handle. 
t•etm·u value 
Value returned 
from a function. 
reusability 
Code modules 
that can be used in multiple 
projects. 
RicbTextBox 
A specialized 
form of a text box that allows 
formatting of the Text property. lf 
an .rtf tile is loaded into a 
RichTextBox, the text appears 
properly formatted. 
t·ow A horizontal section of a 
grid control. 
run time 
During the time a 
project is executing. 
nm-Lime eJ-rot· 
An error that 
occurs as a program executes; 
causes execution to break. 
s 
scope 
TI1e extent of visibility of 
a variable or constant. The scope 
may be namespace. module-level. 
block, or local. 
Sct·uU C\'Clll 
Staull Lar eveut 
that occurs as the user moves the 
scroll box. 

G 
L 
0 
S 
S 
A 
H 
V 
Select case Selection 
structure: can be used in place of 
an If statement. 
Select Resource dialog box A 
dialog box in which the image and 
sound files of a project can be 
added and selected. 
Selected Judex pt·opet·ty 
Index 
of the item currently selected in a 
list box or combo box. 
separatm· h:tt• A horizontal line 
used to separate groups of menu 
commands. 
SetBounds me tJ10d 
Sets the 
location of a control: used to move 
a control. 
SetError method 
Defines the 
message and tums on the error 
message for 11n ErrorProvider 
control: used for validating input 
data. 
shar ed pt·opcrty 
A property 
that can be used by all objects of 
the class; generally used for totals 
and counts. Only one copy exists 
for all objects of the class. 
sh~u·ed vnl"inhle 
One variable 
that can be used by all objects of 
the class: generally used for totals 
and counts. 
shor·t cin •nit 
Skipping the 
evaluation of parts of a compound 
condition tl1at are not required to 
determine the result. 
shortc ut me nu The menu that 
pops up when the right mouse 
button is clicked. Also cnllcd n 
popup menu, cont~t menu. or 
right-mouse mem~. 
Show "'''' hn<l 
[);,.play!< a fonn 
or message box. A form displayed 
... -ith the Show method is modeless. 
ShowDialog method Displays a 
common dialog box or a form: the 
form is displayed modally. 
siblings (XML) Elements at the 
same level as each other. 
siguatm·e The name and 
argument list of a method or 
procedure. 
simple com ho hox Fixed-size 
combo box. 
siluJ>Ie list hox 
Fixed-size list 
box. 
single do1•umcnt interface 
(SOl ) 
Forms act independently 
in a multiple-form project. 
srngle-Oic model A style of 
Web Form in which the VB code 
and HTM L are contained in the 
same file. 
Slzc su·uctm·e A size specified 
by width and height; measured in 
pixels. 
SizcModc Jli"O(lCI"LY 
Allolt'S the 
size of an image in a picture box to 
stretch. 
SmaiJChanl,!C pt·oper"ty Scroll 
bar properly for amount of move by 
a click on an arrow. 
snap liucs Guidelines that pop 
up on a form during design time lo 
help align the controls. 
sulppct. See code snippet. 
solution A Visual Basic 
application: can consist of one or 
more projects. 
SoluLion Explorer "'indow 
An IDE window that holds the 
filenames for the files included in 
your project and a list of the 
classes it references. 
solutlon file A text ftle that 
holds information about the solution 
and the projects it contains. 
SortedList 
A collection type 
that is based on a Dictionary; 
contains an automatically sorted 
list of elements. each consisting of 
a key and a value. 
6S3 
Sorte<l pr·opct·ty 
Property 
of a list box and combo box that 
specifies that the Jist items should 
be sorted. 
SomnlLoc:ttion pi"Operty The 
path of the sound file played by the 
Sound Player component. 
So1U1dPiayer· COili(JOueut 
A 
component that allows the user to 
play a sound file. 
spla,;h sct·ccn 
A MindoM· that 
appears before the main application 
windon·: generally displays 
program information and gives 
the appearance of quicker 
application loading. 
Slan(hll"d Edilion A version of 
Visual Basic with fewer features 
than the Pr·ofessional and Team 
System versions. 
St:u·tPo>'ition pt·opet·ty 
Determines the screen location of 
the first form in a project M·hen 
execution begins. 
st:ll'tup form The main form: 
the first form to display after the 
splash screen. 
statt>l(•i<S 
Does not store any 
information about its contents from 
one invocation to the next. 
Static A local variable uith a 
lifetime that matches the moclule. 
The variable retains its value as 
long as the form is loaded. 
status har An area along tl1e 
lower edge of a window used to 
display information for the user. 
St:ttu:<Su·l p couu·ol A 
container control that creates a 
status bar across the lower edge 
of a form. 
Step Into 
Debugging colllJDand: 
executes each statement. including 
those in called procedures. 
Step OVer Debugging command: 
executes each statement in the 

654 
main procedure but does not show 
statements in called procedures. 
su·eam An object used to 
transfer a series of bytes from one 
location to another. 
Su·eamReader 
Object used to 
iJ1put small amounts of uuormation 
stored iJ1 a disk file. 
Su·eam W r·iter· Object used to 
write small amounts of uuormation 
to disk. 
Stretch/mage Setting for the 
value of the SizeMode property of a 
PictureBox control. 
string liter·al A constant 
enclosed in quotation marks. 
su·ongly typed 
A feature of 
VB that requires the programmer to 
always be aware of the data type. 
If you assign data to a wider type. 
VB can implicitly (automatically) 
convert for you; if you are 
assigning data to a nan-ower type. 
where precision or accuracy might 
be lost. VB will generate a 
compiler en-or. 
str·uctm·e 
A grouping that 
combines multiple fields of related 
data. 
sub procedm·e 
A procedure 
that performs actions but does not 
retum a value. 
subclass A derived class; also 
called a child cla.ss. 
submenu A menu within a 
menu. 
suhscr·ipt 
The position of an 
element within an array: also 
called an index. 
subsct·ipted variable 
An 
element of an array. 
super·class 
A base class for 
inheritance. also called a parent 
class. 
syntax error An error caused 
by failure to follow the syntax rules 
of the language; often caused by 
typographical errors. The Editor 
iruonns you of syntax errors. 
System .[O uamespace 
Holds 
the stream objects for reading and 
writmg data files. 
T 
Tablndex pr·operty 
Determines 
lite on.ler the focus move::; as lite 
Tab key is pressed. 
table 
A two-dimensional array. 
table adapte r· 
An object that 
handles retrieving and updating of 
the data in a dataset. 
table lookup Logic to find an 
element within an array. 
TabStop property Determines 
if a control can receive focus. 
Team System Edition The 
version of Visual Studio with the 
most features. 
rext box 
A control for d ata 
entry: its value can be entered and 
changed by the user. 
Text pt•operty 
The value that 
displays on a control such as the 
words in a text box or label. 
1'extAlign propet·ty 
Used to 
change the alignment of text within 
the control. 
1'extFieldl'm·ser· 
Object used to 
read a delimited file and separate 
it into its individual fields. 
Tick event One firmg of a 
Tilner component; each time the 
interval passes. another Tick event 
occurs. 
Glo3Sary 
T·nuer· component Fires Tick 
events at a specified time interval. 
To lower metbod Converts text 
to lowercase letters. 
toolbar The bar beneath the 
menu bar that holds buttons; used 
as shortcuts for menu commands. 
tooU>Ox 
A window that holds 
icons for tools; used to create 
controls and components on a form. 
TooLStriJl cont.rol A container 
control that creates a toolbar on a 
form. 
TooiSu·ipStatusLabel object 
Individual item on a StatusStrip 
control. 
TooiTip Small label that pops 
up when the mouse pointer pauses 
over a toolbar button or control. 
TooiTip component Placed on a 
form to allow the individual controls 
to display ToolTips. A ToolTip 
property is added to each oontrol. 
TooiTip ou TooiTipl proper·ty 
TI1e new property added to each 
contml when a Tool Tip component 
is added to the form. 
To Upper mP.r.hofl 
C:onvP.rtf' I.P.JCI 
to all uppercase. 
Try /Catch block Traps user 
errors or progr8111 errors. 
u 
user interface 
TI1e display and 
commands seen by a user: how the 
user interacts with an application. 
ln Windows. the graphical display 
of an application containmg 
controls and menus. 
Using block 
A group of 
statements bounded by Using and 
End Usi ng; any variables declal'ed 
inside the block are not available 
outside the block. 

GJ,
OS
S
ARV 
v 
validation Checking to vedfy 
that appropriate values have been 
entered. 
validato•· conu·ols Controls 
that can automatically validate 
input data; used on Web Forms. 
value keyword 
Incoming value 
for a Set clause in a property 
procedure. 
Value pt·operty 
Holds the 
cm'fent setting of a scroll bar 
control. 
ValueChauged event Event 
that occurs when a scroll bar 
control is scrolled. 
variable 
Memory location that 
holds data that can be changed 
during project execution. 
vm·tical sct·oll bar· A Windows 
control that provides a scroll bar 
that appears vertically on the form. 
Visible pt·ope•·ty 
DetermiJ1es if 
a control can be seen or not. 
visual inhel'itance Inheritance 
of the visual elements of a form. 
Visual Smdio environment 
The development environment 
including tools for designing the 
intertace, editing program code, 
and runnmg and debuggiJ1g 
applications; also called the IDE. 
w 
Web }'onn Form in Visual 
Studio for creatillg pages that 
display m a browser. 
Web p age 
A sialic page 
consistiJ1g of HTML elements: 
displayed m a browser application. 
WehBt·owsm· control 
Displays 
Web pages on a Wu1dows form. 
Windows Presentation 
Fotmdation (WPl') Technology 
for creatillg rich user interfaces. 
such as those used in Windows 
Vista. Can use WPF interoperability 
to include WTF controls on a 
Windows Form, use a WPF 
Application template to write a 
WPF application. or use a WPF 
Browser template to create a 
browser application. 
With and End With state meuts 
A block of code that refere to the 
same object. The object name 
appears in the With statement; all 
subsequent statements until the 
End With relate to that object. 
With block 
The lines of code 
between a With and End With 
statement. 
655 
Wo1:dWrap prope1'ty Boolean 
property that allows text to wrap to 
a second line. MultiliJ1e propet1y 
must also be set to True. 
Write method 
Writes one 
record to a stream object; does not 
include a caniage return. 
WriteAllTe xt method 
A 
siJnple method to write a text file. 
The method opens a file. writes the 
data, and closes the file 
automatically. 
Wri teline method 
Writes one 
record to a stream object; includes 
a carriage return character at 
the end. 
X 
XAJ\fL Extensible Application 
Markup Language. 
XAML Browse•· Application 
(XBAP) 
A WPF application 
that runs in a browser. The user 
interface is created usiJ1g XAML. 
See Extensihle Application Markup 
Language. 
XML Extensible markup 
language. A fonnat for data; 
popular for data storage and 
transfer on tbe Internet. 

Index 
SYMBOLS 
- (subtmc tion) operator. 118 
- = •••igunent operator. 120. 121 
. (comma). opecifying two dimcn•i0011 to on 
nrray.338 
I (divioion) operolor. ) 18 
I= •••ignonent operator. 120. 12'1 
:(colon). •• olatemenlle m>inalor. 158 
I (integer division) operator. 118 
I= asoignme nt operator, 120 
+(addition) opemtor. 118 
+ operutor. concutenution ,.; th. 89 
+= ... sign men! opemtor. 120. 121 
= (equol •ijy>). meaning of. 159 
= (equal to) c"Ompanson operator. 159 
·• ... :• in o <liolotr; box. 218 
# oiw>"' enclooing loter.U vnluco for 
d31eo. 618 
& (wnpei'IWld). See Amperound (&) 
&= a,.,iplment operotor. 120. 121 
• (multiplicalion) openotor. 118 
•= """ignnoenl operator. 120. 121 
"(e•ponenti31ion). 118 
< (le .. than) comparison opemlor, 159 
<= (1.,.. tbon or equal to) comparison 
operator. 159 
<>(not equal to) con>parioon 
operator. 159 
< > (otart-1118 ond end-tal!). in XML 583 
> {l!reater than) compartiom operator. 159 
>= (8fealer than or equal to) comparioon 
operator. 159 
A 
Ahottt box. 216. 253 
About Box lemp1ate. 253-256 
Abs (abi!Oiute value) method. 623 
Abi!Oiute pooitioning. 373. 374 
Abstract cl ...... 491.496 
A bstroct onelhod•. 491 
Abstraction. Ui9 
Ac~"epl button. 79 
Accept Button property. 79 
Acceoo.o leJ11. 78-79. 21 1 
AC<:e<s level. 261. 
Ae<:el<OIIlj!. properto..,.-192 
A.,._,·Je,..,J leywonds. 261 
Aceeuor melhodo. <174 
656 
Accumulators. 331-333 
Acronyms. Web. 386 
Activated event. of a fonn. 26()...261 
Active control. alil!lling to. 77 
Active Files button. in Document "'indow. 
251. 252 
ActiveX Oala objects (ADO). 398 
Add ASP.NET Folder. 421 
Add Claso. from the Project menu. 477 
Add Connection dialog box, 405 
Add Existing item command. 252 
Add method 
of DateTime. 616 
of lteD1!0. ~287. 455 
oett.ing a dale. 619 
Add New Item dialog box. 250. 257. 258. 
365. 380.381.477 
Ad<! property. ofSortedList. 344 
Add WHERE Clause dialog box. 
424. -126 
Add 1r.ndo..-. Form. 250. 251. 253. 25.1 
Addition ( + ) operator. 118 
ADO.NET. 398 
AJAX (AsynchrollOUS JavoScnpt and 
XML). 384-386 
AJAX Exten.ions controL.. 369 
Algellr.Uc comparison•. 159 
Alijy>ment 
of controls. 7~77 
of decimal colwnns. 306 
Alijy>ment apt ions. of Format menu, 635 
AIJo,.·Orop property. 546. :.48 
Alphabetic order. sorting properli"" 
ill.23. 25 
All + right arrow editi"l! .hortcut. 638 
A It key. viewing access keys. 78 
American National Standards Institute. &t! 
ANSI code 
Amper"""d(&) 
in concatenation. 89 
in front of access key character. 78 
specifying key for keyboord 
access.2ll 
And logical opernlor. 163. 165 
AndAlso logical opendor. 163. 165 
Animation. 532-535 
ANSI code. 160. 16 1 
APL .. NET version of. 5 
Apootroploeo 
add ins to tloe besinning of code 
lines. 199 
l>ej!inning remarks. 30 
App_Oata folcler. 421 
Application tab. list for Icon. 268 
Application• 
adding context menus to. 222 
adding oound to. 541-542 
compommt~ of. 7 
deployins. 61{) 
deoigning for'"''" com·enience. 77-$ 
matching other Windowo 
opJ>Iications. 77 
multitier. 471-472 
~Tiling Visual Basic. 6 
Apply Sty!., •;ndow. 376. 377 
Arpml<"nls 
of the Poroe met hod. 116 
psoaing By\'al or ByRe{. 227 
pu&lng to prooodurett. 226-227 
Arithn1elic operatioos. performing. 118 
ArithmeticE.ceplion d .... 135 
Array elements. referencing indirectly. 333 
Array progamo. debui!Sin8. 333 
ArrayGroup array. 335 
Arroyo. 326 
declaration otalemenls for. 327 
including in 1tructureo.. 33()...331 
• ith list boxeo. 3.36-337 
multidimen•ional. 337-339 
oununio'lg both directions. 3<10 
AoTow keyo. nudging controlo. 635 
A• Ootalype entry. 296 
AocenJing. selecting for Sort Type. 418 
ASCII characters. 160 
ASP. NET 
cre"tin15 \te b applications . 363 
impenoonation by. 6.12-643 
model. for matutj!ing controls and 
code. 365 
oerver cootrol~. 368. 369 
validotor control.. 382-383 
ASP.NET 1-. 363 
ASP.NET Empty \leb Applicatioo 
template. 36-L 
.oopx el<lenoion. 363 
asp~.d..,igner.•b file. 370 

N 
D 
t: 
X 
..asp.x.vb extension~ 363 
uspx.vb !ile. 370 
As>embly. friend access and. 2M 
Assembly Information button. 255 
Assembly lnfonnution dialog box. 
255.256 
Assignment operators. 120--121 
Asoignmenl olale ments. 30-31. 
33. 89. L20 
Asynchronous JavaScripl and XML. See 
AJAX (Asynchronous JovaScript 
andXML) 
Alan method. 623 
Attribute elements, in an XML r.Je, 585 
Attributes. in"" XML node. 583 
Authentication. M2 
Authorization. 642-643 
AutoCurrect box fcuture. IS. 46 
AutoHide. IDE windows. 63()..{i31 
AutoHide pushpin icon. 17 
Auto-implemented properties. 482 
Automatic context menus.. 223 
AutoPostBack. enabling. 423 
Autos window. 194.198.333 
AutoSize property. 2L 25.73.129 
Average, calculating, 140 
Axes. in an XML document. 585 
B 
Back constant. 173 
BockColor property. 77. 86 
Backgroundlmage property. of a form. 74 
BackgroundlmageLayoul property. of a 
fom1. 74 
BackStyle property, of OvaiShape and 
Rect:mgleShape. 73 
Base clu ... <170. 496 
calling the constructor of. 492 
creating fo.r inheritance. 496 
dcoigning. 496 
inheriting from. 470 
Base-class constructor. calling, 491 
Ba.se-cluso properties. in the derived 
class,492 
Basic code. 6. 7 
bin\Debug folder. 267.441 
Binding souree. 401.402 
Binding source objects. 40'2. 405 
BindingNa,;gator component. 412. 413 
BindingSource componenL 407. 412. 413 
Birtbdate. entering in a text box, 576 
Blank data. checking for. 176 
Blank fields. validating, 38'2- 383 
Blank line. creating. 42 
Blinking icoo. displayed by 
ErrorProvider. 561 
Block-level declarations. 116 
Block-level ,.,.,-iables. 113. 296 
BookS...!e class. 477-481 
BookSale example project. 13'2-133 
booluuml. 582-583 
Boolean data type. 108. 294 
Boolean expressions 
compound. 163-165 
in lf statements. 159 
viewing contents of, 196--197 
Boolean vnriobles. in loop._ 294, 
Border • .ell i ng. 7 4 
Borde.<:olor property, 73 
BorderStyle property 
of labels. 129 
of labels. textl><ues. and picture 
bo-.. ... 74, 
of • Jjnc. 73 
of OvalShape and RectangleShape. 73 
BorderW.clt.h properly, 73 
Bowvl controls. 401. 409-<llO. 412-413 
Break Alltoolbar button. 191 
Break tin>e. entering. 298 
Breakpoints 
clearing. 199 
inserting in code, 191- 19'2 
placing. 486 
retnO\'ing. 192 
setting, 195 
Breau. forcing during debugging. 
1.91-192 
Bro,.-.ers. 362 
displaying Help in. 49 
te>ti ng other. 3 70 
Brush objects. 525. 526, 528-530 
Buffer. copying data to, 445 
Buoinet!l! ru1CI!. enforcing. 472 
Busin""" Services tier. 471.472.473.484 
Button too.l. 21. 2'2 
Bullon~ 
adding. 40 
adding event procedures. 40.41 
cl1onging location a.nd text of. 39 
displaying multiple. 17~175 
in a form~ 65 
for a mes~~<Jge box. 137 
performing o,·erlapping functions. 182 
placing on fonns, 21 
oetting properties for. 27- 29 
specifying default. 174-175 
for a Too!Strip. 5 73 
By Ref key,.·ord. 227 
Byte data type. 108 
By Val keyword. 227 
c 
C (currency) code. 126. 127 
C++. elements ofOOP. 3 
Calculation error. 135 
Calculations 
breaking into smaller un.its. 231- 233 
performing. 116-126 
placing in a separate dass, 484 
progromming emmplc. 129-133 
with unlike data type•. 124-125 
using in code. 120-121 
in Viou11l Bn•ic. 106 
Calendar controls. 576-578 
CaU keyword. 181 
Coli statement•, example. 181 
Cullbock. 302 
657 
Called procedures. not displaying lines of 
code in, 193 
Culling 
event procedures. 181- 182 
procedure•. 226 
Cancel buuou. selecting. 79 
Cancel properly. for thee argument of an 
event. 564 
CancclButton property. 79 
Capacity property. of Sorte<ll..ist. 344 
Carriage return character~ choioes 
for. 440 
Cascade constant. in LayoutMdi. 572 
"Cascading." in cascading style 
oheets,376 
Cuscnding style •heel ... Su CSS (c.w:ac:liug 
style sheets) 
Case Else clause.. 178 
Cu.e •talemenl. testing. l 78 
Ca.., slnlcture, 177- 178 
Casting. 116. 124, 1 80 
Cutch bloch. 134. 135 
Causes Validation property. of controls., 5M 
Cells. merging in HTI\1L tables. 372 
CcnterScreen. setting StortP<>!ition 
property to. 81 
ChOlHandsOn project. 55-56 
Ch02l·lands0n project. 94-95 
Ch03BookSale project. 132-133 
Ch03 Hand sOn project. 14:>-14 7 
Ch04Hnnds0n projecL I 86-189 
Ch05Bo .. ·l ing project. 232-233 
Ch05Hando0n project. 23&-242 
Ch061iands0n program. 274-277 
Ch07Hands0n projecL 314.-317 
Ch08Collection program. 345-347 
Ch08Hands0n progrnm. 350-353 
Ch09Hands0n progrnm. 392- 393 
Ch10DataGridVie,.· project, 403 
ChlODetails View project. 4ll-413 
ChiOI..inqFileSystem project. 429-430 
ChlOWebSelection project, 420-426 
ChllHandsOn projecL 460-463 
ChllStreamReaderReadFile program. 4.49 
Chl2 BookSale Hands-On program. 
51:h518 
Ch12PassProperties project, 501-50"2 
Chl2SBS project. 477-481 
Chi2Visuallnheritance project. 498-500 
Ch13 Drag and Drop program, 547-548 

6S8 
Ch13 Pie Chart Hands-On program. 
553- 5S5 
Chl3 Random Numbers program. 
531--532 
Ch13 Tm>er Animation program, 536--537 
Ch 13Drag0roplmage program. 549--550 
Ch13Scrol1Bars program, 5~41 
Ch14 Calendar program, 577--578 
Ch14 Error Provider program. 561--563 
Ch14DataGridView project, 588 
Ch14Validation program, 565--567 
Chl4WpfHello\l'orld project, 595--597 
Chl4XmlLiterals program. 587 
Char data type, 108 
CharacterCasing property, 563, 613 
Check boxes, 69 
checking the stale of multiple, 171 
in a form. 65 
setting. 84 
testing the value of, 170 
Check marks. toggling on and off. 217--218 
Checked property 
of a check box, 69 
of a menu items, 217- 218 
of a radio button. 69 
for Radio buttons and Check boxes, 84 
CheckedChanged event. 69 
CheckFileE:cists property. 450 
<.:heckPathexists property, 4.50 
Child class. 4 70 
Child elements. 58S 
Child forms, 569,570 
Child nodes. 583 
Child windoM'S, displaying multiple, 570 
Choose Data Source dialog box, 405 
Choose Default Environment Settings 
dialog box, 9 
Choose Toolbox Items dialog box, 592 
Circle. drawing, 528, 529 
Clasa files, adding exi5Ling to projects. 503 
Class icon, in Object Browser. 504. 505 
Class Name list, in the Editor windoM'. 43 
Class variables, 486 
Class-base<\ style, 376 
Classes 
adding,493 
creating. 468. 477-<Ul1 
creating objects, 4 
defining properties of. 477478 
derived, 49"2--493 
designing. 4 73 
exami.J1.ing, 504-506 
hierarchy of. 470 
instances of. 468 
methods of, 475 
ohjects usi11g, 483-490 
planning, 6 
properties in. 473475 
reusable. 471 
Class-level variables. See Module-level 
variable(s) 
Clean compile. 48 
Clear All Bookmarks button, 637 
Clear n1ethod 
from Graphics, 529 
ofltems, 290--291 
ofSortedList. 344 
Click event procedure, for the Print 
bulton. 302 
Clientiserver Web applications. 362--363 
Client-side lffML controls. 369 
Close button. of an IDE ~·indo,.·. 631 
Close method. 31, 260 
of StreamReader, 447 
of Stream Writer, 44S, 447 
COBOL, .NET version of, 5 
Code 
adding for a Web applications, 
367--368 
calculations in. 120--121 
commenting out, 199--200 
containing program logic for \l'eb 
Forms, 363 
dragging to the toolhox. 639 
keyboard shortcuts for editing, 
637-638 
printing. 4344-
stepping through. 192- 193 
~·riling, 29--30 
"Titing secure. Ma 
Code access security, 643-644 
Code Editor 
e ntering If statements, 158 
M..-iting event procedw-es. 261- 262 
Code seporation model, 365 
Code -.tippets, in Visual Studio, 568 
Code-hehind file. for Web Forms. 363 
Coding 
for controls, 83--90 
menu items, 216--218 
Collating sequence. of ANSI code. 
160,161 
Collection types. examples of, 344 
Collections. 285. 343--344 
Collections names pace. 344 
Colon [:), as statement terminator. 158 
Color constants. 86. 525, 526 
Color dialog box. 220--221 
Color keyword, 86 
Color property. 220-221 
Colors 
radio huttons selecting, 86-88 
specifyiitg a large number of, 86 
in the user interface, 77 
Columns 
adding, removing, reordering, 407 
adding or deleting in Web Fonns. 372 
data arranged in, 337 
setting properties of. 408 
in tables. 398 
Combined assignment operators. 
120--121 
lnde.• 
Combo box selection, converting to. 
414416 
Combo boxes 
behavior at design time, 28S 
styles of. 284 
types of. 284, 285 
ComboBox control 
selecting as a type of menu item. 214 
selecting for a field. 41.4 
ComboBox Save and Read program. XML 
version of, 588--589 
ComboBox tool, 284-
Comma (,), specifying two dimensions to 
an array, 338 
ConunandText property, 417 
Comment out the selected lines button, 
199.200 
Comment Selected Lines command, 637 
Commenting out code. 199--200 
Comments, 583. See also Remark 
statements 
Conurussion fuJtction. 229 
Common controls tab, in the toolbox. 64 
Common dialog components, 219--220 
Common Language Rw>time (CLR). 5, 
134-,616 
Compare method, of String, 624-625 
CompareValidator control. 382 
Comparison operators. 15\1. 17ll 
Comparisons. sample. 160 
Compile error, 45 
Compiling, 48 
Component tray. 40, 41, 81. 8'2 
Compone nts, examining in a fonu, 407 
Compound Boolean expressions, 163--165 
Concatenation. 68. 89 
Conditions. See Boolean expressions 
Configure tl1e Select Statement page. 4.22, 
423.424 
Connection objecl5. See BindingSource 
compone nt 
Const keyword, 109. 266 
Const statement. 110. 114 
Cons tant list. in a Case structure. 178 
Cons tants, 106 
adding,494 
assigning values to. 110--111 
comparing, 159--160 
declaration s ummary for, 266 
declaring at module level, 114 
example. 111 
guidelines for declaring. 266-267 
from the MessageBox class, 137 
for Me,..ageBoxlcon. 137 
named. 109--110 
numeric. 110 
Constructors, 4 75, 4 76 
adding for subclasses, 493 
in inheritance. 490491 
overloading, 476 
~Titing. 4 79480 

N 
D 
t: 
X 
Containers, for other controls. 68 
Containers tab. in the toolbox. 64, 
Contains method. 344 
Contains Value method. 34* 
Context n1enus 
automatic, 223 
creating. 222- 224 
rusplaying, 23 
ContextMenuStrip, adding. 222. 
223 224 
Context-sensitive Help, 50. 639 
Continue buuon. clicking on. 47 
Continue command. 193, 197 
Continue statement.. 299 
Control type, choosing forfields. 418--419 
Control Chars constants, 113 
Contl"ols, 3 
adding to ne"' Web pages. 380 
a<lding to \VPF applications. 596 
aligning. 76-77 
changing multiple properties of. 
88-89 
choosing for program output, 128-129 
coding for, 83- 90 
creating multiple. 40 
deleting, 21 
deselecting, 75 
disabling, 85 
entering in HTML tables, 372- 373 
introducing more, 64-74 
moving, 21.76 
Name property of. 27 
naming. 48 
nudging into place, 635 
as objects, 4 
placing on forms. 19- 23. 72 
positioning on a Web page. 373,374 
properties for multiple, 76 
resizing, 21 
retaining contents of for Web 
applications. 383 
selecting. 21, 75 
snap lines aligning, 635 
spacing between. 77 
tab order for. 7~1 
for Web Forms. 368 
working .. ·ith multiple. 74-77 
Convention~ \1ariables and named 
constants. See Narniug 
conventions 
Conversion operation. failure of. 13S 
Convert class. methods of. 124 
Convert methods. 626-621 
Convett .ToDateTime method. 619 
Cookies. storing, 363 
Coordinate system, 527-S28 
ComerRadius property, 73 
Cos method, 623 
Count property 
of Items, 288 
of SottedList. 344. 
Counter-controlled loop. elements of. 296 
Counting. module-level variable for. 140 
Cr constant, 173 
CreateGraphics method, 525 
Credentials. authentication based 
on. 642 
CrLf constant. 173 
Crossbair pointer,19. 20 
Crystal reports, 30 I 
CSS (eMending ntylc shccto). 375 379 
.css file. auaching an external, 375 
CSS Properties windo,.·, 376. 377. 379 
Ctrl + A. 75 
Ctrl + Alt + L. 632 
Ctrl + Alt + T, 638 
C:trl + Alt + X, 632 
Ctrl + Backspace. 638 
Ctrl + Break, 298 
Ctrl + Delete, 638 
Ctrl + End, 638 
Ctrl + Enter. 638 
Ctrl + F6. 632 
Ctrl + Home, 42, 638 
Ctrl + Shift + l!:nter. 638 
Ctrl + Shift + T. 638 
Ctrl + Spacebar, 638 
Ctrl + T,638 
Ctrl + Tab, 252. 632 
Ctrl + Y.638 
Ctrl key, selecting multiple controls, 75 
CType function, 180 
CurDir method, 584 
Cursor. for text boxes. 79 
D 
D {long date) code. 128. 617 
d (short date) code. 128. 617.618 
D or d (digits) code, 127 
Data 
checking for blank or 
nonnumeric. 176 
formalling for<lisplay, 126-129 
writing,445 
Data access. in Visual Studio. <W 1-402 
Data applications, running, 407 
Data binrung 
for a comho box. 414-4.15 
setting up, 401 
Data controls, for Web Forms. 368 
Data Desijmer. open in~(. 409 
Data fields. binding individual. 409-413 
Data files, storing and retrieving. 4.38 
Data hiding. implementing. 469 
Data property, in DragDrop event 
procedure. 54 7 
Data source 
passing data from, 402 
setting to an SQL database, 422 
Data Source Configuration Wizard. 
410-411. 412 
activating, 403-404 
Choose a Data Source page, 425 
Choose a Data Source Type page, 
404,422 
Choose Yom Database Objects 
page,406 
Configure the Select Statement 
page, 422, 423 
selecting fields, 416,417 
Data Source Update Mode, 415,416 
Ootn Sources window. 410 411 
adding a new data source, 410 
opening. 412 
selecting control type for a hound 
control.413 
Data tier. 472 
659 
Data type(s), 107- 108. See also VB data 
types 
declaring for a variable. 111 
declaring for an atTay. 327 
methods for conversion between, 
626-627 
perfomting calculations with 
unlike,l25 
Data type conversions. performing 
implicitly. 123-124 
Database applications~ creating~ 
403-409 
Database file. copying in the current 
folder.406 
Database management systems 
(DBMS•), 398 
Database objects, overview of. 401-40'2 
Database schema file. 409 
Database tables, selectiJ1g fields 
from. 416 
Databases. terminology of. 398-.399 
Data-hound controls. See Bound 
controls 
Data-bound te'i boxes. form with. 410 
DataGridView control 
adrung a new data source, 404. 
adding to a form, 403 
displaying data, 427 
displaying fields. 403 
formatting. 407-409 
UNQ query filling. 429 
selecting in multiple fields. 
587-SSS 
on a \l'indo-..'S Fonn, 401 
DataSet component, 407. 412, 413 
Dataset schema. 417 
Datasets. 402, 416 
DataTip, 192. 369 
Date(s) 
custom formalling for. 618 
finding difference between, 619 
formatting. 617,618 
working with, 616-619 
Date and time, displaying, 575 
Date codes, as case sensitive, 128 
Date controls. 576-578 

660 
Date <lulu type. 108. 616. 619 
Date format. converting ,-alues to. 619 
Date properly. of D .. te1ime,616 
Date vmiablea. 618 
DateTime structure, 128.575.616-{;17 
Date Time values. formatting. 128 
DateTimePicker control. 576 
Day of the weel:. checking for. 619 
Day property. of DateTime. 616 
DayOfWeek properly. of DuteTime. 616 
DayOfYear prope11y. of Datenme, 616 
DBMS.. (database management 
oyl'lem•). 398 
DDB (douhle-declining·balll.lloo) 
function. 622 
Deactivate e,·ent. of a fom1, 261 
Dehug menu.l90. 193 
Debug mode. entering. 1~196 
Debug output. writing, 190-191 
Debug time. 14 
Debuwng.47 
array programs, 333 
forcing breaks. 191-192 
projects. 189-194. 486 
tutoriaL 19f>-200 
Debugging mode. 189. 199 
Debuwng ..-indow•. 194 
Decimal (D) type-declaratio~ 
chDrncter. 110 
Decimal class. Pan<e method. 117 
Decimal columns, aligning. 306-307 
Decimal data type. 45. 107. 106 
Decimal fraction._ rounding. 1.25 
Decimal positions. for format specifier 
codes. 127 
Decimal. Round method. 125 
Decision symbol. 158 
Deci~ions. made by a computer. 156 
Declo.ration statement•. 107 
for arrays. 327 
entering for variables. 112-113 
for two dimensional array•. 338 
for variables. 111-112 
Declarations. for variables and constants_ 
266-267 
Declarations section. 42. 114 
Default button. specifying. 174-175 
Default constn.tclor, 476 
Default names. assigned by Visual 
B35ic. 49 
Delete All Breakpoints. from the Debug 
menu. 199 
Delimited files. 439-444 
Delimiters. 4<W. 442 
Deployment. of applications. 640 
Depreciation. functions calculating, 622 
Depreciation function. 620 
Derived classes, 470, 491,492--493 
Descendant elements. of an XML ftle. 586 
Description pane. in Object Browser. 504 
D~•ign tab. of Viroul Weh Developer 
IDE.366 
Design time. 14 
Dc•ign view, table in. 372. 373 
Designer M'indo..-. 11 
designer.vb file. 470 
Deot nu:t ""'· 4.75. 489 
Details. 401 
Details view. 411--413.419 
DctailaView control. 423.425. 426 
DetectUrl p roperly. 67 
Dialog boxes. 219-221 
DiologResult oonl'lants. comparing to. 174 
DialogResult object. Show method 
returning. 173 
DialogResult type. 174 
Dial<>glO t<1b. of the toolbox. 219 
DictionaryEntry data type. 345 
Dim keyword. 266. 327 
Dim ret~erved .. -ord. 112 
Dim state ment. 111. 112. 114 
Direct reference. 332. 341 
Diouhled itmno. in • menu. 217 
Disconnected datasets. 4m 
Display. formatting data for. 126-129 
Dispo11e method. from Cr•phie11. 529 
Di,·ision (/) operntor. 118 
Do loop. 299 
Document(s). 632 
Document w:indows.ll, 12-13. 
17. 19.633 
Documentotion. oC projects. 42 
Document Completed event. 579 
DocnmentTitle property, 579 
DocumentTitleChanged event. 579 
DoDragOrop method. 544--5115 
Do/Loop 
fom1s of. 29'2-294 
.. ;th" list box. 294-295 
for a table lookup. 334 
using, 297 
Donble (R) type-dednrotioo charocter. llO 
Double data type. 108 
Double spacing, in a message box. 
172- 173 
Double-declining-balance (DDB) 
method. 622 
Drag-and-drop editing, 639 
Drag-and-drop programming. 544--550 
DragDrop event. 544. 545. 546. 54 7 
DragDroplmage program, 549-6..50 
DragEnter event. 5.14, 545. 546 
Drawn g. group of selected c<llltrols. 76 
DrawArc methods. 529 
DrawEllipse methods. 529 
DrawLine methods. 528, 529 
DrawPie methods. 529 
DrawRectangle methods. 528. 529 
DrawString methods, 304-305.529 
Drop-<lo"'ll list. selling up, 421--423 
/nde< 
DropDownhem• collection. of u 
menu. 212 
DropDownList control. 421 
DropDownStylc J>mperly. 2114 
~duplicate- error message. 415 
E 
e argume:nl 
defining as DragEventArgs. 546 
of KeyPrcso event procedure. 567 
of Key Up e vent procedure. 581 
Edit Columns dialog box. 407 
Edit-and-continue feature. 47. 193 
Editor 
displaying remarks. 32 
identifying syntax error. 45 
shorlcu111 in. 636-639 
Editor tab. 33 
Ed.itor """dow, 11 
exploring. 4.3 
splitting, 638-639 
switching to. 251 
e.Craphico obj«t. in Painting event 
procedure, 525 
Element-based style. 376 
Elemcntliosl control. 591 
Elements 
of an array. 326 
in a otructure variable. 330 
in an XML file. 583. 585 
Else clause 
executing in on U slatement, 157 
nc•ted l.f statement• in. 166-167 
ElseU key,.·ord. 157 
Empty event procedure. cre"ting. 262 
E111pty otring 
comparing text box value to. l 7f>-176 
setting properly to. 83 
Enol.le AutoPostBack. 42.3. 425 
Enabled prope11 y 
of a control. 85 
of menu i t~rus. 217 
of the Timer control. 536 
EnableVi.,..>Stale properly. 383 
Encupoulation, 469 
End If clause. 157 
End Structure statement. 329 
End Sub. 29. 225 
End Witb statements. B8 
Endless loops. 298 
EndOIDa!a method. 443 
Ends "'th method. of String, 625 
Enter (carriage return). placing ,.;th 
WriteLine. 446 
Enter event. of a control. 291 
Enter key. checking for. 581-582 
Entry. selecting, 300-301 
Entry lest. 29-2 
Environment. setting up, 17- 18 
Environment constants. 173 

Equal •ign (=).meaning oC. J 59 
Equal to(=) comparison operator. 159 
Equals method. of String. 625 
Error List ,.;ndow. 45. 48 
Error messages. giving information to 
hackers. 643 
Error Message properly. oft he vo.lidator 
control .. 383 
Error Provider component. 560--563 
Errors. finding and fuing. 44-48 
Event procedure• 
adding for bullous. 40.41 
calling. 181-182 
eo<ling for Hello World. 32-34 
naming. 30 
opening. 261 
planning. 5<h55. 9"2-93. 131. 
144.. 185 
sharing. 179-181 
•Tiling for ,.,)ectt.J e><nt•. 261-263 
Event-dri,·en programming language. 3 
Event-handling methods. 30 
Event• 
cau~ing to occur at eel intervals. 535 
compared to methods. 469 
rc•i>On""" to. 29 
triggering. 4 
of Web controls. 370 
"Tiling e,·enl procedures for. 
261-263 
Events button. in the Properties windo-.·. 
262.291 
E.•ocptioro d"""""· 13-~. 135 
Exception handling. 134. 199 
Exceptions. 13~135. Sn al..o 
RWl-time errof8 
Exclude from project command, 252 
Executable file. copying lo another 
•ystem. 267 
Execution 
pausing with Break All. 191 
•topping during dcbuuing. '193 
Exit bullon. Click event f<JF. 3~4 
Exit Do statement. 298-299 
Ex.il For 1\lateo>ent, 298-299. 329 
Exit statement. 298-299 
Exit lest, 29"2-293 
E.'<P method. 623 
Expander WPF controL 591. 592 
Explicit con,-ersions. 124 
Explicit line continuatiorL 89,90 
Exponentiation operator("). 118 
Express Edition. of VB. 5 
Expression. opening a project in, 5W 
Expression Blend, 590 
Expression Design. 590 
Expression Media. 590 
Expression Web. 590 
E..'(pressions. checking current 
values of. 19'2 
Extensible Nyperte>:t Markup Lunguuge 
(XHTML). 362 
Extemal.css ftle. creating. 377 
External otyl.e ohects. 375 
F 
P (full date/time) code. 128. 617 
f (full date/time) code. 128. 617 
P#. 3 
f'1.50.639 
F4.632 
F7. 632.638 
F9. 191 
Fl2. 638 
False. testing for. 162 
Field names. multiple·,.·ord. 412 
Field-lev.,) v.,)jdaJion. 563-567 
Fields. See al..o Data fields 
binding lo Text Box controls. 411 
blank. 382-383 
checking for required. 175-176 
choosing control type for. 418-419 
in d•tabaseo. 398 
selecting from the table. 416 
testing multiple. 139-140 
Fil(' exlensiom!. displaying. 8 
File handling. using •u·eam•. 445 
File input and output (1/0). 438 
Pile menu 
Clooc Project. 35 
DropDownltems collection for. 
212. 213 
Print.43 
Sa,-., AU option. 35 
File Read program. 449 
Pile otream. 452-453 
FileName property. of OpenFileDialog. 450 
File-open procedure. 452 
Fil .... 438. See t~l.o Text fil..,: XML files 
checking for already open. 452-453 
checking for existence of. 455-456 
closing. 447 
oaving. 456-45 7 
system created.. 8 
''iewing contentl! of, 4,41 
in a Web application. 370 
"-riling to. 438 
FileSystem LINQ example, 428430 
Fill command. properties of. 417 
Fill methods. 409. 528-530 
Fill Query. vie,.;og properties of. 4ll9 
FillColor property. 73 
Filled triangle. on a menu item. 214 
FillEllipse method. 528, 529 
FillGrad.ientColor property. 73 
FillGradientStyle properly, 73 
FillPie methods. 529. 550 
FillRectangle methods. 529 
FillStyle pi'Operty. 73 
Filter property. 450.451,541 
661 
Finulize l>rOWdure. 489. 490 
Finally statement. in a Try/Catch 
block.134 
Financial functions. 62~22 
Fire .. ·alL blocking the Web Server. 368 
First button (Button 1 ). 2 7 
Fix function. 623. 624 
}'lags. &e Boolean ,-ariahle• 
Focus 
form hoving. 79 
re.etting. 81. 
setting on a form. 261 
Focus onethod. 84 
Font dialog bmo.. 37-38.22.1 
font object. properties of. 37 
Font properties 
of dialog box object._ 221 
in the Properties window. 37 
Font styles. applying to selected te:xl. 67 
for Each 11nd Next Statemento. 328-329 
For Each loop 
array elements in. 328 
executing. 329 
in SortedList program. 345 
For Each!N ext loop. 339 
For f (fixed-point) code. 127 
For loop. coml>ured to Do. 299 
For Next loops. 295. 339 
For statement. in a for/Next loop. 
29~296.297 
ForeColor propeo1y. of a control. 86 
Form(s).3 
adding unci renooving. 252 
adding ConlextMenuSLrip to. 
22.3-224 
udding to projecll!. 251-252 
changing color of. 86. 87-38 
changing properties of, 2 7- 29 
creating for a uoer interfoce. 48~ 
creating new. 250-252 
displaying lists on. 284 
hiding or cl< .. ing. 260 
inheritance for. 470 
method and events of. 258-263 
modifying to use inherited ciW!IIes, 
494-495 
multiple. 250-252 
as objects, 4 
passing properties beh~'een~ 
500-503 
placing controls on, 19- 23. 72- 73 
remo~wg from projects, 252 
setting position on the screen.. 81 
setting up, 19 
sho,.ing, 258-260 
sn;tching bet~·een. 251 
Form classes. inheriting. 496-500 
Form Designer, 13. 262-263, 63~6 
Form Designer tab. 33 
Form Designer ,.-indo..-. 82, 251 

662 
Fonn events. 260-261 
Fonn files 
adding to a project. 252 
remarks at the top of. 42 
F onn inheritance, example. 498-500 
Fonn layout. displaying. 36 
Form obje.:ts. declaring and 
instantiating. 260 
Fon11J,oad proce<lur•. 333-3~~. 
adding code to. 593 
containing code. 407 
reading a file into a liot. 455 
Fonuat specifier codeo.l26-128 
Format specifiel13. for dates and 
times. 617 
FornmtCurreuc-y functjoo. 628 
FonnatDateTime function. 628 
Fom1at Except ion cla1!8. 135 
FonnatNumber function. 628 
FonnatPercent function. 628 
Fonnatting and Advanced Binding dialog 
box. 415.416 
FonnCiosed e,·ent. 261 
Fom1Ciooingevent, 261.457 
Fom1Fe.-d con!<tant. 173 
FORTRAN .. NET version of. 5 
Found Boolean variable. 336 
Fri•nd Cor10t keyword. 266 
Friend ke}~•·ord. 2(i(i. 469 
aUo~·ing other fom1s to access a 
vwiablc. 26~ 
declaring a form as. 263 
declaring an an·ay. 327 
Friend level V3riablc, 267 
From keywonL gi"ing a coUection initial 
values.. 344 
Full screen. using. 632 
Full Screen button. 633 
Function parameters. 228 
Function procedure•. 225. 227-230 
Function ... End Function otatomenll!. 228 
Functions 
calculating depreciation. 622 
culling. 229.231 
checking ,.aJidity. 627~28 
financial. 62~22 
formatting output, 628 
mathematical., 126. 622~24 
returning the result of. 228--229 
l+Titing. 229, 230-231 
Future value function. 620 
G 
g (general) code, 128 
G (general) oode, 128 
Garbage collection, 490 
GDI + ,for dnming grap!Ucs.. 524 
General procedures. 22.>-233 
Get accessor method, 474 
Get blocks. in property procedures. 478 
GetData method 
of D11ta object. 54.7 
ofTahleAdapter. 409 
.gi! file. 532. 536 
Global variableB. Su Namespace-level 
variable 
Graphic shapes. creating. 72 
Graphical user interface (GUI). 3 
GraphiCil. 524. S« aLw lma~: Pictures 
controlling at run time. 533-535 
displaying animat.ed. 532--S33 
met hods, 528-530 
moving. 535 
steps for drawing. 524-525 
Graphics Device Interface {GDI). 524, 
GraphiCI! methods. in Windo...,. Forms. 524 
Graphjcs object. declaring. 525 
Graphics pages. 303-305 
Greater than (>) c:omparii!On operator. 159 
Greater tlm1 or equal to (>=)comparison 
operator, 159 
Croup boxeo. 65. 68 
Group nwnbers 
entere<l into Group Text&.;. 331-332 
a.o inde., to tiD array. 332 
loading into a table. 333 
GroupBox controls. 68 
CUI {graphical user interface). 3 
Guide diamonds. docking windo11-. 
using, 633 
H 
Handled property. of 
KeyPre .. •EventArp. 567 
Handleo clause. 179-180.224 
HasMorePages property. 309 
lieUo World application 
creating with WPF. 595-597 
files in. 7 
Hello World fomt. 15 
llelp 
context-sensitive. 639 
,.·alkthroughs in. 568 
Nelp feature. in Visual Studio. 13. 15 
Help ubrary Manager. opening. 50 
Help text, fo= ,.;tb. 260 
Help topics, viewing, 50-52 
Help Viewer, 49-52 
Hidden field. assigning a module-level 
variable to, 383 
Hide method, using a form's. 260 
Hierarchy, of classes, 470 
Horizontal scroll bars. 537.540 
Hot keys. See Access keys 
Hour prope11y. of Date Time. 616 
HScroliBar control. 538-539 
ffi'ML {hypertext markup language), 
tags in, 399 
HThlL oode. vier.-ing. 368 
HTML controls. 369. 609 
lntkr 
fffML pages, dynarrucally generating. 363 
IITM L tables. See Tables (HTML) 
1·11·1'1' (HyJ>"rto.xt Trans(..,. Protocol). 386 
HyperLink control. 379.380 
Hyperlinks. 379-382 
Hyp.,rtext biarkup language. S« HTML 
{hypertext ma.rlmp language) 
I 
.ico e;dension. 70. 268 
Icons 
changing for a program. 268 
~witching lo create animation. 533 
ID property. of a te:d box. 367 
JD-based otyle. 376 
IDE {integrated development 
enviromnent}. 7 
component • of. 8 
der<Wh profile rorl!electing. 8-9 
initial screen. 9. 10 
running p1'0grmns outside, 267-268 
working in Visual Studio'•· 630-6.35 
Cor WPF applications, 594 
IDE layout. resetting. 634. 
IDE window• 
AutoHide feature of each. 631 
S\\;tcl1ing to running application. 197 
ld~ntifiers. 107. l08 
If statements. 156--159 
charting, 158 
Continue •lutement• in. 299 
examples of. 170 
logic with<>ut an Else action. 156 
nested. 166-168 
,.·ith radio buttons and check boxeo. 
1~171 
11/floen/Else st'ltement, 156. 157 
LIS Autlrenticalion. 642 
Illegal S)'Dlax. in an If statement. 
158--159 
lmage c:onlrol 
adding graphics to a Web page. 373 
adding to a cell. 374 
on a \l'eb Fonn. 532 
Image ftJes. stGring in project 
resources. 534 
Image property. of a picture box. 69.70 
Images. See also Graphics; Pictures 
dragging and dropping. 548-550 
for fonns and controls. 74 
including on Web pages. 373- 375 
placing inside containers. 539 
selecting, 69, iO 
~m.;tching, 533-534 
lmageUrl property. of an Image 
control, 373 
lmmedjate ~;ndow, clearing, 191 
Immutable strings.. 624 
Impersonation, in ASP.NET, 642~3 
Implicit convel13ions. 122. 123--124 

N 
D 
t: 
X 
Implicit line continuati011. 89. 165 
lmplie<l operations. in Basic versus 
muthemntico, 120 
lmpcr1 button. of the Seled Re•ource 
dialog box. 70 
lmpcr1.• statement, fo.r 
System.Wi ndowo.Controls. 591 
Indentation. in a With block. 88 
Index. See Sub&cripts 
index Of method.. of Skin@. 625 
lndexOutOfRaoge exception. 290 
Information a88Urnnce~ 642 
Inheritance. 469-1.70 
adding. 490-500 
constructors in. 490-491 
Cf<!nting o b..,e clo•• for. 496 
visual. 496 
Inherited class 
cooing for event~ of. 5o)() 
modifying a form to use. 4~95 
Inherited controls, 4,97 
lnhcrito clowoe. 498 
Inherits statement, 490. 49S 
Initial values. setting for d:alog 
boxes. 222 
lnitiaiDirectcry property. ci 
OpenFileDialog. 450 
In line style. 375. 376 
Input 
from a me. 438 
validation of. 175-176 
Input data. helping uoen< enter. 563 
Input Mask dialog box. 66 
Input text bo.xes. with whit~ 
bockground. 128 
lnser1method 
of Items. 287-288 
oi'Strin11- 625 
lnser1 Table dialog box. 371 
Insertion poinl 
Cor a breakpoint. 191 
for text boxes. 79 
Instance. of a claM, 4. 468 
Instance membe.n. 4.86 
instance propertieK, 502. &e al.,o Instance 
variables 
Instance variables, 486--488 
Instantiating, an object. 4(8 
lnstmct ions 
form with. 260 
repeating a series of. 292 
lot function. 623. 624 
Integer (I) type-declaratio< 
charncter, no 
Integer class. Parse method, 117 
Integer data type, 107, 100 
Integer di.-ision operator (\). 118 
integrated dexelopment environmenL See 
IDE (integrated development 
en\';ronment) 
lntelliSense. 32-33. 112- 113 
setting PrintAction property. 41 
&ignalureo for the Show method. 138 
typing argumento of functions. 620 
Interest rate. determining. 621-{;22 
Internet lnfonnation Sen•ices (OS). 362 
Interval property. of a timer. 536 
lntraneL 363 
Intrinsic constants. 109. 111 
lnvalidCaotE.•ceptjon cb s•. 135 
lnvisible control. s toring a picture in_ 533 
Invisible lahel. 383 
Is. in a Cu.., •Lructure. 178 
lsDate function. 628 
IsMdiContainer property. changing to 
lruc. 570 
lsNot key11·ord. 452 
lsNothing function. 628 
!•Numeric function. 628 
laPostBack property. of a Web page. 384 
Item (Key) method. of SonedList. 34.4. 
Item& colk-ction. 285 
filling. 285-286 
of MenuStrip. 212 
rderenoing. 288-289 
Item~ Collection Editor 
adding buttons to a TooiStrip, 573 
for the DropDownltcm• collection. 
212.213 
of MenuStrip. 212. 213 
objects f<>r a TooiStrip control. 574 
opening. 574. 
Items proper1y 
of a li•t box. 286 
of TooiStoip in the Propertie• 
windo'"· 573 
ltems.Add method. 4.55 
Iteration. 292. 2%. 299 
J 
Java . • NET ven~ion of. 5 
K 
Key lield. 610 
Keyboard mapping.._ resetting. 196 
Keyboard shortcuts 
for displaying "indows. 632 
for eruting code. 637~38 
setting for menu items . 218 
for stepping commands. 193 
KeyChar property. 567 
KeyCode property, 581 
KeyData proper1y. 581 
KeyDmm event procedure. 567 
KeyEvenL.\rgs. 581 
KeyPress event procedure. 567 
KeyPressEven~.567 
Keys enumeration. constants . 581 
Keystrokes, capturing from tbe 
user. 567 
663 
KeyU p .,,-enl procedure. 567, 582 
Keywords. l 08 
L 
Label control. 52. 73 
Label tool. in the toolbox. 19, 20. 38 
Labe ls 
AutoSize property. 26 
clearing. 83 
creating. 38-39 
default background color. 129 
displaying output in. 129 
in u fonn. 65 
le.-;r.g with default names. 49 
newly created. 20 
Languoge lnteHmted Query. Su U NQ 
{Language Integrated Query) 
LargeChange proper1y. of a scroll 
bur. 5~8 
LastlndexOf methods. of String. 625 
Late bindir.g. 180 
Laynul loolbar. 12. 76. 635 
LayoutMru method. 571 
Leave event. of a control. 291 
Leo• than (<) compari""n operator. 159 
Le•s than or equal to(<=) conrpariooo 
operator. 159 
Lf conotant. 17.3 
Lifetime. I L3. 264 
Line and shape controls. 72- 73 
Line numbers. dioplaying on oource 
code. 45. <16 
Line-continuation character. 90 
Lines 
commenting oelectt<d. 637 
continuing long program, 89-90 
creating blank, 42 
di~playing text on multiple. 67 
drawing. 73. 528. 529 
printing multiple. 305 
UNQ (Language lnt<~gm ted Query). 
4-27.586 
U NQ project, creating. 428 
U NQ query. 4.28. 429 
U NQ to SQL component. 427 
UNQ to XAIL component. 4.27 
UNQ to XM.L query. 586 
List{s) 
clearing, 290-291 
determining number of items in. 288 
displaying on a fom>. 284. 
filling. 285-286 
printing selected items from. 306 
removing jtems from. 289--290 
selecting records from. 413-419 
List boxes 
,;th arrays, 336-337 
behalior al design time. 285 
DoiLoops .. ·ith. 294--295 
loarung. 455 

664 
Li.t hoxe.,._C011t. 
printing contents of. 306 
oaving contents of. 454-4.57 
selecling enlrie6 in. 300-301 
in a hn>-c::limensional array. 342 
types of. 264-. 285 
Li•t dnto. oorting. 4,16-418 
LislBox tool 284. 
Literal. 31. &< al•o String literak 
XMLiitcru6 
Load event. of a form. 260-261 
Load method. of XDocument. 584 
Lo..dFile rnethod. of rich le~t boll. 67 
Local declarations. 114. 266 
Local help. selecting. 49--50 
Local variable .. 113 
location• for- coding. 115 
showing values of. 194 
in Web applications. 383 
Local• M'indow. 194 
Location property, of any control. 527 
Lock Controls. from the conte>1 menu. 23 
Log ln<thod. 623 
Logic errors. 47 
Logical operators. 163-165 
Login control•. for Web f onus. 369 
Long (L) lype-<leclarnlion character. 110 
Long data type. 108 
Lookup operntion 
for tM·o-<limensional tables. 341- 343 
UM.L action diagam. 335 
Loop control variable•. altering value• ul. 
297- 298 
Loop index. 295. 297. 298 
Loop1ndexlnteger. 295-296 
Looping, 292 
Loops, 292 
Boolean voriableo in. 294 
endleM. 298 
exiting. ~299 
•aliofying conditions before 
entry.297 
s kipping to next iteration of. 299 
Lowercase dta.rncten;. comparing. 
162-163 
M 
M (month) code. 128 
M date format character. 618 
Main 1\;ndow~ in Visual Studio 
en\-ironment. 11 
Manage Styles ,.-indow. 376. 377. 378 
Managed code. 5 
Markup languages, 362 
Mask property. 66,567-568 
Masked text bo.,es. 66. 567-568 
MaskedTextBox control. 66 
Masks, predefmed. 568 
Matching entry. selecting. 301 
Mathematical functions. 622-624 
Mathematical operations. fuoctions 
for.l26 
Max method. 623 
Maximum property. of 11 ocroU bar. 538 
MaxLength property. 563. 613 
.mdb extension. 396 
.uxlf el<leJL• ion. 398 
MDI (multiple docwnent interface). 560. 
569-572 
MdiWindowLi~tltem prot>crty. 571 
Me entry. expanding, 194 
Me keyM·ord. 3 1 
MeuureString method. of the Crophico 
class. 306-307 
Members list. in Object Bro,.-ser. 504 
Menu De•igner. 210 
adding ContextMenuStrip. 222. 223 
creating submenus. 214 
deactivating. 211 
Menu items. 214 
Checked property, 217-218 
coding for. 21&-218 
a.o controls. 210 
creating. 215-216 
Enable<! property. 217 
keyboord shortcuts for. 218 
toggling check marks on and off. 
217- 218 
Menus. 210 
adding to other compnnents. 214 
creating. 215-216 
delining. 210-215 
separator bars in. 214. 215 
standards for Windows. 218 
Menus & Toolbal'll tab. 210 
MenuStrip compnnenl 
adding to a form. 210. 215. 216 
in the component tray. 210.211 
MenuStrip Items coUectioo. 212 
Message boxes 
avoiding dis1>laying multiple. 176 
di•playing meosnges ;,,, 1~140 
e nhancing. 111- 175 
M""""ge property. 135 
M..,Mge •Iring. 137.171.- 173 
MessageBox class. message boxes created 
,.·ith.136 
MessageBox object. Show method, 136 
MessageBoxButtons, 136, 137 
constants. 173-175. 504. 505 
MessageBoxlcon. 136, 137 
Messages 
changing size and alignment of. 36-38 
displaying in message boxes. 136-140 
Method icon, in Object BroM-.er. 504. 505 
Method Name list. 43. 261. 262 
Methods 
associated ..-ith objects. 4 
of classes. 475 
coding,480 
lnda 
<:orupare<lto properties. 31 
executing to end progams. 31 
gaphics. 528-530 
from the Craphiet~ cl"""· 529 
inheriting. 490 
of object-oriented programming. 225 
of object.. 468. 469 
ovedoaded. 136 
overriding. 491. 494. 
pmc<:du re• ""· 29 
relum type of. 174 
using overloaded. 138 
Mic roooft Acade mic Allianc~ prcgam. 6 
Microooft Developer.< Net,.·ork {1\!S.DN) 
lihrary,49 
MicrOI!Ofl Expression Studio. 590 
Mic r080fi lnlermed.iale Language 
(MSIL). 5 
Mic r"""ft Passport. M2 
Microt!Oft Silvt:rligk 590 
Microooft SQL Server Database file. 405 
Mic roooft \Vindmvs. &e Wi ndo"" progam 
Millisecond pro1>erty. oeeding Random 
class.532 
~iin method. 623 
Minimum property. cia scroll bar. 538 
Minute property. of DateTime. 616 
Mod operator. 118 
Mod:1l fonn .. 259. 260 
Modal ,.ifidows. ve1'1!Us mode le .... 220 
Modeless forms. 259. 260 
ModeleM windoWI!. '"'"'"" modal. 220 
Modes. 14 
Module-level declarations. 114-115 
Module-level voriable(s). 1 13 
assigning to an im•i&ible control. 383 
for class properties. 478 
declaring'" friend or Public. 263 
declaring for a shared e vent 
procedure. 180--181 
declaring for the total. 14.0 
lifetime of. 113 
locations for coding. 115 
setting the access level. 264 
in 'lteb application•. 383 
Month property, of DateTime. 616 
Month Calendar control, 576 
Mouse pointer. pausing over an error. 45 
MouseDown event. beginning drag-drop. 
544.545 
Move To Next Bookmark button. 637 
Move To Previons Bookmark button, 637 
Moving. controls as a group. 76 
MSIL (Microsoft lntem1ediate 
Language). 5 
Multiclass projects. managing. 503 
Multidimensional arrays. 337- 339 
1\~lultiform projects. variables and 
constants in. 263-267 
Multiline property. 67..{)8 

N 
D 
11 
X 
multiple document interface (MDI). 560. 
569-572 
Multiplication(*) operator. 118 
Multitior •pplicntions. 471-172 
Mustlnherit modifier. 496 
Must Override keywon:l. 49L 496 
Mutable otrinf!!!. 624 
My keywon:l. 71 
My.Computer.Audio.Piay. ~41--542 
My.Computer.FileSystem. 439 
My.FileSyotem object. 428 
N 
N (munber) code. 126. 127 
Name property 
changing for a nmv buttm1. 40 
compared to Text. 27 
of list boxes. 285 
of a menu ilem, 212 
of OpenFileDinlog. 450 
in Properties window . .!4. 596 
selecting. 23 
Nan><.-d oonstants. 107. 109-110.266-267 
Namespace{s). 23. 265 
Namespace and class. of selected 
object. 24 
Natnespace icon. in Object BroM'l!er. 504 
Namespa~le~el declarntion._ 116 
Namespo~le,•el variable. 113 
Naming conventions 
for constants, 110 
for objects. 43-49 
sta ndards for. 48 
for variables, 4 78 
variables and named constants. 
108-109 
Naming rules 
for object3. 48 
v•riables and name-d constant._ 108 
Navigate method. of Web Browser 
control, 579 
Navigate Uri propct1y. in a HyperLink. 379 
Navigation bar. deleting from a form. 414 
Navigation controls. for "\{"eb Forms. 369 
Negative increment. 297 
Nested For/Nert loop"- 339 
Nested If statements, 166-168. 176 
Nested parentheses, 119 
Nested Try/Catch blocks. 139-14.0 
.NET class names. integer data types. 124 
.NET Common Language Runtime. See 
Cornroon Language Runtime (CLR.) 
.NET data types. 124. 125 
.NET Framework. 5, 642 
.NET languages, file handling in, 445-449 
New keyword 
creating a TextFieldParser object. 442 
creating instances of a class. 468 
creating ne,.· objects. 483 
instantiating objects. 472 
New Project Jiolog box. 9-11. 16-17.364 
New Project option. in Visual Studio file 
menu. 364 
New • t.ateuwnl. inside of u procedure. 11S3 
New Style dialog box. defining styles in. 
377- 378 
Newline clwructe r. 68. 172 
Newline constants. 173. 440 
Next method. of Random object. 530 
Next lllntement. in a to r/Next loor. 
296. 297 
Nodes. of a n XML file. 583 
Nonnumeric data. checking for. 176 
Nontd.>o.red meti>O<L.. 624 
Not equal to (<>) comparison operator, 159 
Not logical operator. 163 
Not operator. toggling a Boolean value. 218 
Nothing constant. 533. 548 
Nothing VB keywon:l. 452 
No" property. 575.616.617 
n-tier application. 472 
Nudging, controls into place. 635 
Nttll s tring. See Empty string 
Nui!Char constant.173 
Number of periods function. 620 
Numbers 
random. 530--532 
rounding. 1~126 
Numeric conotants. rules for. I 10 
Numeric conve,..ion. failure of. 135 
Numeric data. ,,.lidating in a text box. 567 
Numeric dato type1' 
converting bet .. ·een, 123-124 
converting strin&< to. llfr.l17 
conve>·ting to a string value. 117 
Nwneric variable .. COlliJ>ari•l8· 159-160 
0 
Object box. in the Propcrlieo window. 26 
Object Browser. 503-506 
Object date type. 108 
Object-oriented programming 
{OOP). 3. 468 
Object-oriented programming. metl10ds 
of. 225 
Object-oriented terminology. 469-471 
0 bjects, 4, 468 
code instantiating, 485 
creating using classes. 483--490 
declaring at module level. 483 
defining and using new. 484--486 
naming rules :rnd conventions for, 
48-49 
pa3sing as properties, 502--503 
planning. 54.91-92. 13~131. 
142- 144. 183-185 
recommended naming conventions 
for. 49 
renaming . 639 
as things. 468 
typing names of. 32 
viewing in a form. 43 
Objects lil!l. in Object Browser. 504 
OJbc. ADO.NET . ,.., • .,.ing, 398 
OleOb. ADO.NET acce,..ing. 398 
On]jne help. selecting. 49- 50 
665 
001~ &~ Object-oriente-d progrumming 
(OOP) 
Open and Write File program. 453--454 
Open dialog box. for image file._ 70, 7 1 
Open F'ile dialog box. 450.451-453 
OpenFileDialog common dialog 
component. 450. 451. 541 
Opcraltng •y•lem data. querying. 
427-428 
Option Explicit, 121. 122. 123 
Option Strict • . 121. 122- 123 
Option._ setting in the VS IDE. 634--635 
Options dialog box. 634 
Or logical opcr!llor. 163 
Oracle. ADO .NET accessing. 398 
ORDER BY button. clicking on. 422. 423 
ORDER BY clause. 418.424 
Order By operator. ol UNQ. 586 
Order of evaluation. for logical 
operat.o.-. 164 
Order of operations. 119-120 
Order of precedence. 119 
Or Else logical operator. 164.165 
OutOfMe woryExceptjon cia .... 135 
Output 
creating multiple lines of. 172-173 
loa file. 438 
functions for formatting, 628 
Output text. gray b.ockground. 128-129 
Output ,.·indo••. dio1Jaying booko.xml file 
in. 584--585 
Oval ohape, drawing. 529 
OvaiShape control. pro1>erties of. 73 
Overloaded methods. 136. 138 
Overloading.l38.471,476 
Overridablc kcywonl. 491 
Overrides keywon:l. 491.496 
Overriding. methods. 471.491, 494 
p 
P or p (percent) code. 127 
PadLeft methods. of String, 625-626 
PadRigltt methods. of String. 626 
Page counter. declaring static. 310 
Page style. 375 
Page_Load event, 370. 384 
Pages. printing. 303. 309- 310 
Paint e,·ent. 261, 525 
Parameter properties group box. 424 
Parameterized constructor, 4 76. 483 
Parameterized query. 424 
Parameters 
of functions, 228 
functions wit h multiple. 23~231 

666 
Parent cia .... ~70 
Parent fonn. 569.571-572 
Parentheses. 31. 119 
Pan~e method!!. I 16. 117. 139 
P3nling. 117 
Pascal casing. for n aming controls. 48 
Payment• function. 620 
Peek method. ofStreumRmder. <148 
Pen class. 526 
Pen objects. 525, 528 
PERL .. NET version of. 5 
Pennissioo classes. code access security 
based on. 644 
Picture boxes. 65, 69-72 
Picture elements. 525 
PictureBox controls. 69. 71. 532 
Picture~. Sa aL•o Gmphic.: Image• 
controlling at run time. 533-535 
moving. 535 
replacing to ohow anir~otion, 533 
Pie clwt. drawing. 550-555 
Pixels, 525 
Plonnins 
uppHcationo in Vi•ual 8118ic. 6 
projects. 18., 53-SS. 90--91. 129--131. 
141-144-. 183-185 
Playing 
sounds. 541- 542 
videos. 542-544. 
Pmt function. 620-621 
Point structure. 527 
Polymorphism. 471 
Port able lleb opplicnt ions. 427 
Postback. 384. 419 
Posttest, 29"2-293 
Pow method. 623 
PowerPacs controls. 72. 73 
Precedence. order of. 119 
Pre<lcfined mask•. 568 
Present value fwtction. 620 
Presentation tier. 47l. 472.473.484 
Preleot. 29"2 
Prin1ary key field. in database tal.le~~. 398 
Print button 
adding. 'l0 
Click e\·ent. 30'2 
writing code for, 303 
Print dialog box. 168-169 
Print method • .t1. 302 
Print operation. initiating. 302 
Print output. setting up. 3(<2- 303 
Print preview. displaying. 307-308 
PrintDocument componenL 301-303. 307 
Printer, sending infonnatic:n to. 301-310 
Printer reports. utility program. 301 
PrintFonn component, 40.41 
Printing 
code,43-44 
getting started with. 3~305 
multiple lines. 305 
multiple pages. 309-310 
ownmary of. 306 
h.-o-dimensiooal tables. 339 
Printing lab. of the toolbox. 301 
Printout. sample. 44. 
PrintPage event handler. 303 
PrintPage event proce<lure. 30'2-.~0.1. 306 
PrintPageEventArgs argument. 303. 305 
PrintPreviewDialog componenL 307-308 
Private. variables declared as. 264 
Private occe• .. for proce<lure ... 226 
Private key,.·ord. 266.469 
declaring an array, 327 
decloring method!!. 4.75 
Cor module-level variabler.. 114 
for sub procedures and functions. 4ID 
Priwte module-le,·el variables. 267 
Private Sub. 29 
Private variables.. declaring, 4 73. 477, 4.78 
Procedural languages. 3 
Procedure header. 228 
Procedures 
calling, 226 
converting to fu1tclion procedureo. 230 
declaring variables inside. 14() 
passing argumenll! to. 22~227 
planning. 6 
sharing using context menus. 224 
writing code in. 29 
Program "xccution 
breaking and stepping. 1%-196 
continuing. 197 
stopping. 196 
tracing line by line, 192 
Program lines. continuing long. 165 
Program output. choosing controlo for. 
128-129 
Progrnnuuing, a Visual Basic 
applicolion. 7 
Progrnnuuing e.....,.,.. tYI"'" of. 44. 
Programming languages, types of. 3 
Programo. ending. 31 
Project Designer 
Application tab. 268 
changing a root namespace in. 265 
Re~cestab. 72.534.535 
Project folder. copying. 233 
Project user option file, 8 
Projects 
adding existing class files to. 503 
adding form files to. 252 
adding forms to. 251- 252 
basing on e:cisting projects. 233- 231 
closing. 35 
copying and moving, 6<W 
creating for printing, 303 
debugging. 47.189--194.486 
forms in. 7 
modifying. 36-43 
opening sa\..d. 36 
lnde.t 
plonning. 18. 53-SS. ~91. 129-131. 
14.1-144.. 183-185 
removing forms from, 252 
running. 34-35 
savirtt; and running. 42 
..-riling. 14-43. 132. 14S. 186 
Proje<:to and Solutions category. of 
optiono. 634 
Properties 
accessing. 492 
adding ohured to a druoo. 488-489 
assigning values to. 473--474 
auto-implemented. 48'2 
changing for a fonn. 27-29 
changing multiple f<K controL.. 88-89 
compared lo methods. 31 
for controlo. M 
creating in clllSses. 4 73-475 
defining for classes. 4 77-478 
deleting. 27 
inheriting. 490 
as objects. 4 
of objootA. 468 
po.,.inf! between fom1•. 50{}-503 
passing objects as. 50'2-503 
planning. 6 . 54.91-92. 1~131, 
L42-J44.. 183-185 
read~nly. 475 
setting. 7. 23-29 
~tt.ing booed on user actiono. 85-86 
selling for HTML tables. 372 
typing names of. 32 
vieto•ing conte nll! of during debugging. 
1~197 
of Windows Media Player 
cnntrol. 543 
~-rite-only, 4 75 
Properties button. 37. 68. 69, 70. 262 
Prop<.•rtieo "indo .... 13. 28 
dJanging the Text property in. 212 
currently selected control. 24 
defining llem11 collection in. 285 
in the Designer. 262-263 
Enabled and Checked properties oC a 
menu,217 
for a form. 29 
Items property. 286 
making active. 23 
in Visual Studio IDE. 17 
of Visual Web De,-eloper IDE. 366 
Property icon. in Object Browser. 504. 
Property procedures 
accessor methods itL 474 
adding. 47&-479. 494 
~;th mixed access levels, 482 
Property statement, as Public. 48'2 
Proportional fonts. alignment of. 306 
Protected keyword. 469.480,490 
Protected variables. declaring, 473 
Pseudocode. 6. 54-SS 

N 
D 
I~ 
X 
Public 
nllowing other programs to aeceu. 261 
declaring a form as. 263 
declaring variables as, 473 
Public keyword. 266. 469 
declaring an array. 327 
for module-level variables, 114 
for sub proce<lures and functiono. 480 
Publish Wizard. launching. 640 
PushButton_C]jck event procedure. 32. 33 
Pushpin icon. in the Toolbox 
~·indow. 17. 18 
Q 
Query Bui Icier. opening. 417-418 
Querying 
operating •)'!Item data. 427-4.28 
"""'"to ... ve. 457 
Quotation marks. in string ]jterals. 110 
Quote constant. 173 
R 
R (GIIIT pattern) code. 128 
Radio bullon color chrutge project. 169 
Radio button group. checling the state. 
17~171 
Radio buttons. 69 
behavior io the tab sequence. 79-ro 
checked property. 84 
in o fomt. 65 
testing the slate of. 170 
using to select colors. 88-86 
Random class. 530 
Random numbers. 53~2 
Range Validator control. 38'2 
Rate function. 620.621-022 
ReadAIIText metltod. 439 
ReadField:. method, of TextFielciParseL 443 
Reading. from a lile. 4.'J.8 
ReadLine method. of Sln>amReader. 
447.448 
ReadOnly modilier. 475 
Read-only propertk>s. <n5 
adding. 50'2 
of text boxes, 129 
Reasonableness. checking input foL 175 
Records 
selecting from a list. 413-419 
selecting usiog \l~b Forms. 419-427 
in tables. 398 
Rectangle. dra,.;ttg. 528. 529 
Rectattgle structure, 528 
RectangleShape controL 73 
Red dol. in the margin indicator. 191. 19'2 
ReDim statement. 33~331 
Refacloring. 639 
Refresh button. io Solution Explorer. 421. 
441.442 
Regular Expression Edi1oL 382 
Regular Expression Va]jdator control. 382 
Relational datoba. ... o. 398-399 
Relational operatOI'II. 159. 178 
Relationships. beh•-eett database 
tables. 398 
Remark •wtemettts. 30. 33 
Remarks. 32. 42 
Remo\·e (Key) method, of SortedList. 344 
Remove method 
of hems. 289. 290 
of Siring. 626 
RemovcAI method 
of Items. 289-290 
ofSorted.Lisl. 344 
Rename command. from the ol1ortcul 
menu. 234 
Renante dialog box. 639 
Rename feature. 112. 6..'19 
Replace u1athod. ol String. 626 
Required lields. checking for. 175-176 
RequiredFieldValidotor control 382 
Reserved wordo. 48. 108 
Reset buuon. 196 
Resell-ing, focus. 84 
Reoizing handles 
for a bullon. 21 
for controls. 75 
Re-.rce lite. for the form. 7 
R"""""'es folder. a..,igning a graphic 
from. 7l 
Re-.rceo lob. of Project Designer. 
72,534.535 
.res:x file, 7 
Return function. 620 
Return statement. in a function. 229 
Retttm value, of a function prooedure. 225 
Remahility. as purpose of inherilnnc~. 470 
Reusable clas..,... 471 
Reusable code. 225 
Rich text boxeo. 67 
Rnd fUttCtion. 624 
RnRBooks.mdf database lile. 403, 412 
Root namespace. in the Project 
Dcoigner. 265 
Root node. of att XML lile. 583 
Round methods. 125. 623 
Rounding. numbers. 125-126 
Rows 
data arranged in. 337 
in tables. 398 
RPG . . NET ve,.ion of. 5 
.rtf lile, displaymg text from a 
formatted. 67 
Run lime. 14. 84--& 
Run-time errors, 47, 199-200 
s 
SafeFileName property. of 
OpenFileDialog. 450 
Sample projects. in Visual Studio. 
568-569 
Sans serif font. on fonns. 78 
Sa\•e AU toolbar button. 35 
667 
Save As command. copying projects. 234 
Save As dialog box. displa)ing. 453 
Saved projec!S. opening. 36 
SaveFileDialog component, 453 
Saving. files, 456-45 7 
Schema. for XML. 400 
Scope 
defining. 263 
of" Vllriablc. 113. 226 
of variables and constants. 267 
Screen 
!!elling for convenience, 630-635 
spliuing ve•tically. 634 
ttSing full. 632 
Screen la)'OUI. modif,;ng. 6.33 
ScriplManager component. for AJAX. 385 
Scripts. in \leb pages. 363 
ScroU bal{s) 
events for. 539 
for list boxes and combo boxes. 284 
programming example. 5.39-541 
properties for. 538 
ScroU bar controls. 537--541 
Search box 
in Belp. 50 
in Object Browser. 504. 
Second properly. of Dale Time. 616 
Secure code. ~·ri t i ng. 643 
Secu_rity 
awareness of. 642 
in Web dolo base applicoli<>n&, 420 
Seeding. raodom number generator. 530 
Select All option. on the Edit menu. 75 
Select c...., oloternenl. 177 
S..lect Image dialog box. 374 
Select methods, for classes. 4 71 
Select Reoource dialog box. 69, 70 
S..lect URL tlialog box.. 379.380. 381 
SelecL<\11 method, of the text box. 139 
SeleclColor procedure 
convening to a function 
procedure. 230 
expanding capabi]jties of, 226-227 
writing. 225-226 
Selectedlndex properly 
ca:nhining ~-ith Items property. 289 
determining array subscript. 336. 337 
of a ]js1 box, 288 
Selection border. of a form, 13 
Selection bo){.. clrawog around 
controls, 75 
Selection handles. for controls. 75 
sender argument. 180 
Separator bars, in menus, 214. 215 
Ser"er. delivering Web pages to a 
client, 362 
Sener-side controls. 369 
S..l accessor method. 474 

668 
Set blocks. in property procedures. 478 
Set Bound• method. 535 
SetEm>r method. of ErrorProvider. 560 
Setup.exe application. 6W 
Share<l event procedures. 179-181 
Shared keyword. 487. 488 
Shared members, <Ul6--487 
Share<l methoda. 624 
Sh~~.re.:l properties. See al..o Shared 
variables 
adding. 494 
odtHng to a cia ... 488-489 
making read-only. 487 
Shared variables, 4-86 
Shift + Ail + Enter. 633 
Shift + fl. 639 
Shift + F7. 632.638 
Shift key. •electing multiple controls. 75 
Shipping rate table. in a two-dimensional 
army. 341 
Short (S) type-declaration charocter. I 10 
Short data type. 108 
Short-circuit operations. 165 
Shortcut a,.ignment operators. 12~121 
Shortcut menU>l. 222 
ShortcutKeys property. 218 
Shortcuts 
in the Editor. 6.%-<>39 
in f orm Designer. 635-636 
Show All fj).,. bullon. in Solution 
E.•plore r. 441. 442 
Sho,.· Data Sources, from Data menu. 410 
Show keyword. pausing mouse pointer 
over. 17<1. 
Sho"' method 
as•igning retum value of. l74 
displaying a f01m ao modeleos. 259 
displaying a new form. 258 
of the MessageBox object, 136 
returning DialogReo<Uh object. 173 
signatures of. 138 
Sho,.·Dialog methcxl, 219-220 
di•playing • fol'll> •• mod" I. 259 
displaying a ne,.· form. 258 
displaying Vie .. •Form. 50'2 
executing. 307 
Sho,.·ShortcutKeys property. 218 
Siblings, in an XML file. 583 
Sign method. 623 
Signatures. of the Show method, 138 
Simple animation, 532--535 
Simple Delimited File Read program. 
443-444 
Simple Delimited File Write program. 4<1.1 
Simple VB file 1/0. 438-444 
Sin method. 623 
Single (F) type-declara!ion character. 110 
Single data type. 108. 305 
Single document interface (SDI). 569 
Single-file model. 365 
Single-step program execution. 486 
Size prope11ty. of a control. 527 
Size structure. 527 
SizeF structure. 3~307 
SizeMode property. 71 
Sizing l.andle. of a fonn, 13 
.sin file. 7. 36 
Smoll Change property, of a 11<:1'0.11 
hut·. 538 
Smart editor. See Editor 
Smart indenting. 6..'\5 
Smart tag ao-ro"'· 73. 74. 407.408 
Smart tags 
popping up a fonn'•, 403 
uoing. 73-74. 409 
Snap lines. 21. 635 
SOAP (Simple Object Access 
Protocol). 386 
SolidBrush class. constmct<><S. 526 
Solution, 7 
Solution (.sin) file. 13 
Solution Explocer 
Refresh button, <1.21 
renumi11g projects. 234 
renarni"g 80lution and project. 640 
selecting files in. 441. 442 
showing filename of new form. 251 
in Visual Studio WE. 17 
for a Web appHcation. 370 
Solution Explorer windo~·. 13. 36. 631 
Solution file . 7 
Solution user options file, 7 
Sorted property. setting the control's. 287 
SortedLi•t collection. 344 
SortedList collection program. 345-34 7 
Sound-playing program, 541-542 
Sounds. playing. 541--54-2 
Source object. 544-545 
Source property. of the Exception 
cia ... 135 
Source tab, seeing static HTML code, 368 
Splash forllll, displaying first. 257- 258 
Spb~h screen. 256 
Splash screen droj>-down lis!. 257. 258 
Splash screen template. 257 
Split bar. at top of ,·ertical scroll bar. 
638.639 
SQL (Stmctured Query Language). <1.01 
SQL Database option. selecting. 421-422 
SQL injection. 64.3 
SQL SELECf command. mcxlif);ng, 418 
SQLSELECf statement, ORDER BY 
clause added to, 424 
SQL statements. table adapter 
generating. 401 
SQLCHent for SQL Server. ADO. NET 
accessing. 398 
Sqrt method, 623 
Stack· Trace property. of the Exception 
class. 135 
lnde< 
Standard controls. for \leb Fonns. 
368.369 
Standard toolbar. 12.632 
Start Page. of Visual Studio IDE. 9. 10 
Stan.P08ition po-operty. of a form. 81 
StartsUith method. of String. 626 
Startup fonu. 250 
Stale. maintaining. 383-384, 
St.teles~ \l"el.. page._ 363 
Static keyword, 266 
Static local variable. 310 
Static olatemenl. 2~1-265 
Static va.riables, 264--265. 267. 486 
Status bars. 572.574-575 
Statu.Strip control. 572.574 
Step increment. negative number 
for, 297 
Step into button. 197 
Step Into command. on the Debug 
menu. 193 
Step Over command. 193 
Stepping through. code.l92-193 
Stop Debugging. from the Debug 
menu •. 193 
Stop Debugging toolbar button, 
clicking. 198 
Straight-line (SLN) method. 622 
StrcmnReader class. 447-449 
Stream Reader objects. 445. 4<1.7--448 
Streams. 445 
Stream Writer object. 445-4A6 
String(s) 
comparing. 160-162 
eon\'erting to. 117 
converting to a numeric data type. 
L16-17 
joining. 89 
,.·orbng ~-ith . 624-626 
String class. 624 
String Collection .Editor. typing list 
items,286 
String constants. See String literals 
Stl'ing data type. 107. 108 
String injection., 643 
String literals. 110. 1 II 
String of text. dra,.;ng. 529 
String value. testing for in a Case 
statement. I 78 
StringBuilder class. 624 
Strongly typed languages. 122 
Structure(s) 
creating. 329--331 
declaring variables based on. 330 
including arrays in. 330-331 
Stru cture and End Structure 
slatements. 329 
Stmcture declaration. 329 
Structured exception handling, 134 
Student Data files. on the text \leb 
site. 71 

N 
D 
E 
X 
Style(s) 
applying. 378 
t!eGning. 377-378 
locations for defining. 375 
managing. 378 
modifying. 379 
setting. 74 
types o( 376 
using. 375-376 
Style Application toolhar. 376. 377 
Style rules. onler of precedence of, 376 
Stylet~ sheet file. add in~ to a •olution. 376 
Sub procedures. 29. 225 
adding. 480 
calling. 226 
creating in tl1e Editor window. 225 
displaying for an o!.ject. 43 
Sub ... End Sub statements. encl<.,ing code 
•·it.hin. 225-226 
Subclasses. 4 70 
oclding. 493 
tt<lding a con•t•·uctor for. 49.3 
creating.. 496 
Submenus. 214 
Subroutine. 29 
Subscripted variables. See Arrays 
Su bscri pis. 326-327 
Substring method fl. of String. 626 
Subtract method. 617. 6 I 9 
Subtraction(- ) operator. 118 
Summury fonn. l'"""ing values to, 5()()...6()'2 
Summing. hn,-dimensional tables. 340 
Sum-of-the-years' digits (SYD) 
method. 622 
Sums, counting :s.nd accumulating. 
14(}..141 
-"UO r.lc. 7 
Supercla88. 470 
Sw·itches. See Boolean v·ariables 
Symbol Rename, 6.'!9 
Syntax. illegal in un If statement. 158-159 
Syntax errors. 45-46 
System date and time. r~trieving, 
617-618 
System processes, retrieving.. 428 
System-<lefmed constants. 111 
Syslem.I 0 names pace. stream 
objects in, 445 
System.! O.EndOfStreamL,ception 
class. 135 
System. Math class, 622 
T 
T (long time) code. 128. 617 
I (short time) cocle, 128. 617 
Tab constant. 173 
Tab order. setting, 8(}..81 
Tablndex property 
determining order of focus, 79-80 
setting automatically. 80--81 
Table adapters. 401. 402 
Table cello. inserting graphic• into. 375 
Table lookup. 333. 334 
coding. 334. 336 
in two-dimensional tables. 34.1 
Table menu. for 'll'eb Fonu•. 372 
Table of contents (TO C), in Help Vie,.·er 
window. 50 
T~ble rowo. oJding Of' deleting in \tl>b 
Forms. 372 
Table tool. from toolbox HTI\IL 
!K.-'Ctjon. 371 
TableAdapter component. 407. 409. 
412.413 
Tables. Sett at..o Arr•r• 
in dstal.asefl. 398 
resizing in Web Forms, 372 
Tables (HTML) 
entering control~ or text in. 372-373 
using for layout of Web F omts, 
371--373 
Tabe. selling. 635 
TabStop property. 79, 80. 129 
Tags. in XML Ciles. 583 
Tan method. 623 
Target object. 546--54 7 
Target Rul.e drop-down li•t. 377 
Text 
changing color of. 86. 87---88 
changing the color. 86 
collCIItcnating. 89 
displaying in text hoxes. 67-68 
entering in HTI\tL tables. 3 72-373 
fom1alling. 67 
in an XML fde. 583 
Text Align property. 38 
Text box control. 65--66 
Text boxes, 65--66 
adding contents to a list box, 287 
clearing. 83. 18'2 
default baclcg-ouncl color. 129 
events of, 291 
in a form, 65 
mnking •ticky. 564 
selecting entries in~ 300 
in a two-dimensional array. 
342--343 
using for output, 129 
Text Editor 
setting options for. 635 
,;ewing rtle contents. 441 
Text Edito1· too!har, 12, 637 
Te.n r.les. "Tiling and reading, 439 
Text property 
assigning a literal to, 33 
assigning the result of a 
calculation. 120 
changing for a form, 28 
changing for a new buuon. 40 
of a check box, 69 
of combo boxes. 285 
compared to Name. 27 
of n control. 25 
deleting the value of. 25----26 
e<litor for entering. 68 
of n group bt>x. 68 
of a label, 39 
of list box or combo box. 306 
of Iiiii boxofl. 285 
for a menu item. 211- 212 
of a multiline text box. 68 
of a mdio buttoo. 69 
retrieving • selected list item. 289 
of a text box. 65 
Text 'll'eb •ite. 71 
TextA1ign prope11y. of text boxes. 65 
TextBox. selecting as a type of menu 
item. 214. 
TextBox control. adding to a Ueb 
page,367 
669 
TextC hanged event. of a combo box. 291 
T.,xtFieldPlll'!!er object. reading delimited 
files. 441 
Te~<tFieldType property. of 
TextFieldPa,.,r. 442 
TextM.,..age. 136. 137 
Then clause~ executing in an If 
statement. 15 7 
Then pottion. nested If stotement in. 
166--168 
" !'here ,.·ere build""""'· Continue?'' 
message. 48 
Three-axis model. 585 
Three-tier application. 471-4.72 
Throwin~. exceptiol18. 134 
Thu rub. of a scroll bar. 538 
'lick event, of Timer component, 
535-536 
'lileHori:zontal constant.. in 
U.youtMd i. 572 
'IileVertical co,.lanL in LnyoutMdi. 572 
lime 
displaying. 575 
fol'llllltling. 617 
retrieving, 617-618 
limer component. 535-537 
1i mer example. 536--53 7 
1imeSpan class, in .NET Framework, 619 
'Iitle property. of OpenFileDialog. 450 
1itlebarText. 136. 137 
To. in a Case structure. 178 
Today property, 617 
Toggle Bookmark botton. 637 
ToList method, of an enumerable 
collection. 428 
ToL.ongOateString method, 575. 617 
ToL.ong'limeString method. 5 75. 617 
ToLower methods. of String, 162- 163. 626 
Tool .. -indo,.·s, ll. 633 
Toolbars. 12. 572----5 74 

670 
Toolbox, 13. 14 
dragging code to. 639 
Printing tab. 301. 
tabs io.M 
in Visual Studio IDE. 17 
WPf lnteropernbility ...,ction. 591 
Toolbox tools. for creating controls. 284 
Toolbox window. 17, 18 
Tools. in an IDE. 8 
TooiSt1ip button. coding for. 573-S74 
TooiStrip control. 572 
adding bullono to. 573 
ad,ling to a WebBrow11er <:onlrol. 579 
TooiSt.ipStatusLabel objects. adding to 
StatusStrip, 574 
ToolStripStatu~Label•. assigning 
values to, 575 
ToolTif"' 
udding muJtjlina. 82 
creating. 81-83 
defining. 77 
ToShortDateSiriug method. 575.617 
ToSh01tTimeSlring method. 575. 617 
ToString method.ll7. 617.628 
with 11n empty •rgument. 126 
formatted value retumed by. 128 
with formatting codes. 126 
Total accumulatOI'l<, 331-333 
Totals 
adding to correct. 331-332 
protected procedure for cnlculnting. 
488-489 
ToUpper method. of String. 162-163. 626 
Trim method. of String. 626 
TrimEnd ntetl•od. of String. 626 
TrimStart method. of String. 626 
True. testing for. 162 
Try block. 1~. 
Try/Catch blocks. 134-135 
nesting. 139-14.0 
New •tnlement in. 433 
ReadAUText method in. 439 
Stream Reader object in. 448 
Two-dimcn.ional orrny or table. 338 
Two-dimensional a_rrays. initializing.. 339 
Two-dimensiooaltables 
applications of, 337 
lookup operation for. 341- 343 
printing, 339 
summing. 340 
.txt extension.. 446 
Type. functions for c hecking, 627-628 
Type inference. 428 
Type-declanttion character. for numeric 
constants, 110 
u 
UI\-IL action diagrams. 156. 158 
If statement logic in. 157 
indicating an inherited class. 49'2. 493 
of a lookup operation. 334.335 
of forfNext loop. 296 
of prct~'!<l and posHest loopo. 293 
symbols used for. 158 
Ul\ll specification~ types of diagrams 
in. 158 
Uncomrnent Selected Lines 
command. 637 
Uncommcntthe oelccted lin.,. 
bullon. 200 
Unde rline, gray squiggle, 114 
Underlined cha.rocter. defining an ncce"' 
key. 78 
Underscore. in a line~ontinuation 
character. 90 
Unicode. 160 
Unified Modeling Language activity 
diagram. &e UML action 
diagrun:l! 
Uniform Resource ldentifler (URI), 579 
Uniform resource locator. &e URL 
Until. in Do loop<~. 293 
UpdatePnnel. placing controls inside, 
385-386 
Uppercaoe charncten<. cmnporing. 
162-163 
URL (Uniform resource locator). 363 
URL addrct~seo. displaying. 67 
Uri property 
of a coni roL 543 
ofWehBrow-.er control. 579 
User actiono. oetting propertiell based on. 
85-86 
User error. problems caused by. 175 
U•er interface 
creating for Web applications, 367 
defining, 7. 19-23 
designing. 6. 18. 77-78 
form for. 484 
Presentation tier referring to. 4.72 
in WPf' applications. 591 
Users 
capturing keystrokes from. 567 
querying to .. ..., chang..,. 457 
Using block. 309 
v 
Valid subscripts. 327 
Validating e•'ent. validation codes. 564 
Validation(s). 175 
example program, 56.'>-567 
field-level. 563-567 
of group muuhers. 336 
masked text box for. 567-568 
perfonning multiple, 176 
Validation controls. for Web f onns. 368 
ValidationSummary control. 38'2 
Validator controls. using, 382-383 
Validity. fw1ctions for checking. 627-628 
value key"·ord.. in a Set statement. 4 74 
Index 
Value property 
for the date in OateTimePicker. 576 
of o ocroll l><~r. 538 
ValueCb.ange<l event. 539. 578 
Values 
Msigning to c001!tant~. Ll~lll 
d,ecking for a range. 175 
passing to a summa-ry form-. 
SOCh<;0'2 
•toeing multiple. 326 
Variables.. 106 
declaration •ummary for, 266 
declared as Private. 4 78 
declaring.106. 107. 111. 473 
declaring as local. 226 
deciMing b<t!!ed ou a olructu"'. 330 
declaring inside a Using block, 309 
guideline• for declaring, 26&-267 
iMtance versus shared. 4&)....<188 
lifetime of. 113 
local. 267 
renaming. 639 
retaining values of. 383- 384 
scope of. 113 
for ~ubscripto. 326 
testing for multiple values. 177 
vieM-ing contents of. 19'2. 196-197 
VB. s,, V',.ual B .. ic (VB) 
VB d<ll!SeS. See CIM!<!A 
Vl3 code. See Code 
VB data types . .107. lOB. 124. 125. s,, 
olJo Data type(,.) 
.vb file. 7. 8 
VB file UO. simple. 438-444 
VB inlriuic con•tanla. •pecifying 
delimiters. 442 
VB project. See Projects 
VB •tandard toulbur. dehulll!ing bullons 
on, 190 
v6Crl1 intrinsic constant. 440 
. vbJ>roj file. 8 
.vbproj.user file. 8 
Vertical scroll bars. 537. 54.() 
VerlicaiTab con•tant. 173 
Videoo. playing, 542-S44 
Vie..- Code butlon. 36. 251 
View Designer button. 36. 251 
Vie~- menu. displa};ng or hiding 
windows. 11 
Visibility 
setting at run time. 84-85 
of a variable. 113 
Visible property, 71 
Visual Basic {VB) 
creating ~lob applications. 363 
databases and. 398 
modes. 14 
tools for reading XM_L files. 583-588 
in Visual Studio 2010. S 
~Titing applications.. 6--8 

N 
b 
t: 
X 
Visual Busic 10. 6 
Visual Bnsic 20'10. 6 
Visua I Basic Exprcso. 6 
Visual Basic .NET. as object o riented. 468 
Visual Basic PowerPacks, 40. 64 
Visua.l inheritance. 496 
VisuuJ interface. inh.,riling to new 
forms. 497 
Visual Studio 
running~ 14. 16 
s~mple projects and coJe snippet•. 
568-569 
'"' truly object oriented. 3 
Visual Studio 2010 
components of, 5 
~lclp oyotem. 49-52 
Visua I Studio 2010 Premiuru, 5 
Visua I Studio 2010 Professional. 5. 6 
Visual Studio 2010 Ultimate. 5. 6 
Visual Studio Data Sources window, 401 
Visual Studin environment. 8 
Visuu I StuJio IDE 
HTML generated by. 363 
initial screen. 9, 10 
nJain windowt ll 
,..;tlr new Hello World project, 17 
oek-cting defau lt environlliOIIt 
settings. 8-9 
Solution Explorer. 234 
\l'eb Forms, 366 
Visua I Studio Menu Designer. See Monu 
Oeoigne r 
Visua.l Studio We b sen·er. 362 
Visual Studio Windm-.·s Fom1s, toolbox 
for, ]4, 
Visual Web Developer ExprcM, 6 
Vioual Web Developer IDE, Dc•igrr taL. 366 
Visua I Web Developer (V\I'D), 362 
VScrollBar control. 538-.539 
w 
W3C. Sec World Wide Web Con110rtiurn 
(W3C) 
"'ave files (.wav), 541 
We b. t~cronyms, 386 
web applications 
client/server. 362- 363 
creating. 364-370 
files in. 370 
making portahle, 427 
product for developing, 362 
running, 368 
Web clients. 362- 363 
Web database applications, 
security in, 420 
'U1eb Form application. example. 2. 3 
\l'eb Form template, selecting, 365 
Web FomlS, 362 
a<lding to projects. 380 
controls for. 368 
creating. 366-368 
di~plnying gruphic• filco 011. 52<~ 
events of. 370 
laying out. 371-379 
selecting recon:ls fi'Om, 419-427 
in the Visual Studio IDE. 366 
\lob p .. ge• 
adding. 365. 379-382 
ad.d.ing eleme nts to. 367 
creating, 590 
creating: animation on. 532 
diaploying 0 11 \VindoWil F"ormo. 
578--.582 
incllKling images on, 373- 375 
navigating. 379-382 
reloading only t><>•1iono of. 384.-385 
"" otntciCll•. 363. 4,)9 
Web pmject• 
beginning new. 364-365 
user intel'face for. 362 
lleb Sele~;tion opplication. ore~ting, 
420-<126 
\leb server controls. 368. 369 
\leb server Table control. 371 
\l·eb servers, 362 
\lob Service. 386 
ll·ebBru,.·•er control. 578. 579 
llebBro,..,.er program. 5 79-581 
\leb.Config file. detfrn1ining 
authentication method, 64.2 
llcbPnrt• controlo. for Web t'omll!. 369 
\leek. c heeking ror Jay of. 619 
Where operator. or UNQ. 586 
While, in Do loops. 293 
Windmv me nu, adding to a parent form. 
571-572 
1~1ndowll 
closing, 631 
closing or hiding extra. 630-632 
displaying. 6.n 
docking u11ing guide diamond•. 633 
hiding or di.playing, 630 
m~naging. 52 
ll1ndows applications, file 1/0 for. 438 
\l1nd<nvs common dialog IX>xClO. See 
Common dialog comJX:ments 
Windows E.,plocer, 233, 640 
Windo"'S Form application, WPF controls 
in, 591- 592 
Windo·ws Form template~ 250 
Wi ndo·ws Forms 
adding WPF controls to. 593 
compared to Web F ornlS, 366 
displaying graphics files on. 524 
displaying Web pages on. 578--.582 
drawing graphics shapes. 524 
with Web pages displayed. 579,580 
WindO'\vs Forms Application, choosing, 16 
Windows Forms Application template . 
10-11 
\Vindo"'S Media Player control. 542. 
54.3--544 
\VinJow• 11Mlu8. stnndan:lo. 218 
671 
Windows Presentation Foundation (WPF). 
2, 8, 590-597 
\Vintlows program. s~unple user 
intorfucc.2 
\Vindo .. -. project folder. copying. 233 
\Vindo,.'S standards. for applications. 218 
WindoM-'S-standard keys~ using. 78 
\VindowToolStripMenultem. 571 
With and End \Viti. statemento. 88 
With block. 88 
With statement. 88, 89. 290 
Word wrap. turning on, 635 
Word Wrap propet1y, 67 
Work. •aving. 35 
Workspace, setting up.l4-18 
World Wide Web Consortium (\l'3C) 
recommendations on XM"L 583 
site for, 399 
WPF Applictrtion template. CI'Coting 
applications. 590 
WPF applications. 593-595 
WPF Browser Application template, 590 
\Vl't' control.s. 59'2. 593 
WPF' ll.,llo World opplicntion. 595~~97 
\VPt' lnteroperahility. 591-592 
\l'PF window. designing layout of. 
594-.595 
Write method. of Strcum\Vriler. 446 
WrilcAilText method. 439 
WriteLine method 
of Dehug, 189. 190-191 
saving file eleme nts. 456-457 
of Streum Writer. 4.<15. 446 
Write Li.1e methodo. pl11ciug in H 
stateme nts, 191 
\Vrite-only properties. 475 
WSDL (Web Sen•ices Descriptjon 
l,.,nguuge). 386 
X 
X and Y coordinates. 305. 527 
X coord innte, 303. 527 
XAML (Extensible Application MarkuJ> 
Language). 591 
XAML screen. collapsing, 593, 594 
xaml.vh Code Editor window. 
accessing~ 596 
XBAP. 591 
XDocun1ent object.loading an XML file 
into. 584 
X Element object. loading an XML file 
into, 585--586 
XHTML (e.uensible hypertext markup 
language), 362 
Xl'I'!L (Extensible Markup Language}. 386 
in ADO. NET, 398 
data stored in. 399 

672 
XML (Extensible M:uk•Jp Language}-Conl. 
platfonn-indepenclent and 
text-based, 582 
specifications for. 399 
tags in,399 
viewing in Visual Studio XML 
e<litor. 40~ 
XML data. treating as objects, 4.UU 
XML data files • .WO. 
582-589 
XML elements. specifying in VB, 
585-586 
XMLfiles 
loading into an XElement object, 
585-586 
terminology and structure of. 
582-583 
VB tools for reading. 583- 588 
14Titing and reading, 58S-589 
XML literals. 5ll5. 51!0 
XML schema definition, 40~ 
XML schema file. 400 
XmlWriter class. 588 
Xm!Writer object. 588 
lnde.< 
Xor logical operator, 164 
.xsd extension, 409 
.xsd £ile. 400. 401. 409 
y 
Y coordinate. 303.305. 527 
y date format character. 618 
Year properly, of Uate'llme. 617 
YesNo constant, 173 
z 
Zero-length string. See Empty string 

