Data	  Structures	  
Hash	  Tables	  and	  
Applica5ons	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Purpose	  :	  maintain	  a	  (possibly	  evolving)	  set	  of	  stuﬀ.	  
(transac5ons,	  people	  +	  associated	  data,	  IP	  addresses,	  etc.)	  
	  
Insert	  :	  add	  new	  record	  
	  
Delete	  :	  delete	  exis5ng	  record	  
	  
Lookup	  :	  check	  for	  a	  par5cular	  record	  
	  (	  a	  “dic5onary”	  )	  
	  
	  
	  
	  *	  1.	  properly	  implemented	  	  	  	  	  2.	  non-­‐pathological	  data	  
Hash	  Table:	  Supported	  Opera5ons	  
Using	  a	  “key”	  
	  
AMAZING	  
GUARANTEE	  
All	  opera5ons	  in	  
O(1)	  5me	  !	  *	  

Tim	  Roughgarden	  
Given	  :	  a	  “stream”	  of	  objects.	  
	  
	  
Goal	  :	  remove	  duplicates	  (i.e.,	  keep	  track	  of	  unique	  objects)	  
-­‐ e.g.,	  report	  unique	  visitors	  to	  web	  site	  
-­‐ 	  avoid	  duplicates	  in	  search	  results	  
	  
Solu5on	  :	  when	  new	  object	  x	  arrives	  
	  	  	  	  	  	  	  	  	  -­‐	  	  lookup	  x	  in	  hash	  table	  H	  
	  	  	  	  	  	  	  	  	  -­‐	  	  if	  not	  found,	  Insert	  x	  into	  H	  
Applica5on:	  De-­‐Duplica5on	  
Linear	  scan	  through	  a	  huge	  ﬁle	  
	  
Or,	  objects	  arriving	  in	  real	  5me	  

Tim	  Roughgarden	  
Input	  :	  unsorted	  array	  A	  of	  n	  integers.	  Target	  sum	  t.	  
Goal	  :	  determine	  whether	  or	  not	  there	  are	  two	  numbers	  x,y	  in	  A	  with	  	  	  	  
	  x	  +	  y	  =	  t	  
Naïve	  Solu5on	  :	  
	  5me	  via	  exhaus5ve	  search	  
Be^er	  :	  1.)	  sort	  A	  (
	  
	  5me	  ) 	  
	  2.)	  for	  each	  x	  in	  A,	  look	  for
	  
	  
	  
	  
	  
	  t-­‐x	  in	  A	  via	  binary	  search	  
	  
Amazing	  :	  1.)	  insert	  elements	  of	  A
	  
	  2.)	  for	  each	  x	  in	  A,	  
	  
	  	  	  	  	  	  	  	  	  	  	  	  into	  hash	  table	  H
	  
	  	  	  	  	  	  	  Lookup	  t-­‐x	  
Applica5on:	  The	  2-­‐SUM	  Problem	  

Tim	  Roughgarden	  
-­‐ 	  Historical	  applica5on	  :	  symbol	  tables	  in	  compilers	  
-­‐ 	  Blocking	  network	  traﬃc	  
-­‐ 	  Search	  algorithms	  (e.g.,	  game	  tree	  explora5on)	  
-­‐ 	  Use	  hash	  table	  to	  avoid	  exploring	  any	  
conﬁgura5on	  (e.g.,	  arrangement	  of	  chess	  
pieces)	  more	  than	  once	  
-­‐ 	  etc.	  
Further	  Immediate	  Applica5ons	  

