©2019 MathByte Academy

Raising an Exception
à use the raise statement
à raised object must be an instance of BaseException
à i.e. class must be a subclass of BaseException
(does not have to be a direct subclass)
raise ValueError()
©2019 MathByte Academy

BaseException
à __init__ can handle *args
à accessible via args attribute of exception object (instance)
à used for str() and repr() representations
ex = ValueError('a', 'b', 'c')
ex.args à ('a', 'b', 'c')
à subclasses inherit this behavior
str(ex) à "('a', 'b', 'c')"
repr(ex) à "ValueError('a', 'b', 'c')"
à typically use first argument for the main "message"
©2019 MathByte Academy

Re-Raising current exception being handled
When are handling an exception
à inside an except block
à we can re-raise the current exception
raise
(no exception object specified)
à this will resume exception propagation 
try:
…
except:
# bare except!
log('…')
raise
à very handy to catch any exception
à log it
à resume as if we had not interrupted it
à perfectly acceptable use of bare except
©2019 MathByte Academy

Exception Traceback
à we have seen: exception handlers that themselves raise exceptions (nested exceptions)
à "final" exception traceback shows us a history of this
à traceback
try:
raise ValueError()
except ValueError:
try:
raise TypeError()
except TypeError:
raise KeyError()
KeyError
TypeError
ValueError
à sometimes this is too much information for our user
à our internal implementations should maybe remain opaque
©2019 MathByte Academy

Using raise… from…
We can control (to some extent) what traceback is included
try:
raise ValueError()
except ValueError:
try:
raise TypeError()
except TypeError:
raise KeyError() from None
KeyError
try:
raise ValueError()
except ValueError as ex_1:
try:
raise TypeError()
except TypeError:
raise KeyError() from ex_1
KeyError
ValueError
à useful to hide exception stacks that are just implementation details
©2019 MathByte Academy

Code
©2019 MathByte Academy

