© Fred Baptiste 2018

Consider this generator function…
def read_file(f_name):
f = open(f_name)
try:
for row in f:
yield row
finally:
f.close()
Suppose the file has 100 rows
rows = read_file('test.txt')
for _ in range(10):
next(rows)
à read 10 rows
à file is still open
à how do we now close the file without iterating through the entire file?
à yield from f
© Fred Baptiste 2018

Closing a generator
We have seen the possible generator states
created, running, suspended, closed
We can close a generator by calling its close() method
def read_file(f_name):
f = open(f_name)
try:
for row in f:
yield row
finally:
f.close()
rows = read_file('test.txt')
for _ in range(10):
next(rows)
rows.close()
à finally block runs, and file is closed
why did it jump to finally? Did an exception occur?
© Fred Baptiste 2018

Behind the scenes…
When .close() is called, an exception is triggered inside the generator
The exception is a GeneratorExit exception
def gen():
try:
yield 1
yield 2
except GeneratorExit:
print('Generator close called')
finally:
print('Cleanup here…')
g = gen()
next(g)
g.close()
à Generator close called
à Cleanup here…
© Fred Baptiste 2018

Python's expectations when close() is called
•
a GeneratorExit exception bubbles up
•
the generator exits cleanly (returns)
à the exception is silenced by Python
à to the caller, everything works "normally"
•
some other exception is raised from 
inside the generator
à exception is seen by caller
if the generator "ignores" the 
GeneratorExit exception and yields
another value
à Python raises a RuntimeError: 
generator ignored GeneratorExit
in other words, don't try to catch and ignore a GeneratorExit exception
it's perfectly OK not to catch it, and simply let it bubble up
def gen():
yield 1
yield 2
g = gen()
next(g)
g.close()
© Fred Baptiste 2018

Use in coroutines
Since coroutines are generator functions, it is OK to close a coroutine also
For example, you may have a coroutine that receives data to write to a database
à coroutine opens a transaction when it is primed (next)
à coroutine receives data to write to the database
à coroutine commits the transaction when close() is called (GeneratorExit)
à coroutine aborts (rolls back) transaction if some other exception occurs
© Fred Baptiste 2018

Code Exercises
© Fred Baptiste 2018

