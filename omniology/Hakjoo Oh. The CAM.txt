The Categorical Abstract
Machine
Hakjoo Oh ⟨pronto@ropas.snu.ac.kr⟩
October 27, 2006
Weekly Show & Tell
Programming Research Laboratory,
Seoul National University
http://ropas.snu.ac.kr/talk/2006/

Contents
■
Introduction
■
The Abstract Machine
■
Extension
The Categorical Abstract Machine – Hakjoo Oh
2 / 29

Introduction
■
Introduction
■
The Abstract Machine
■
Extension
The Categorical Abstract Machine – Hakjoo Oh
3 / 29

Introduction
Goal
let x = plus in x (1,2)
→(λx.x (1,2)) plus
→(λ.0 (1,2)) plus
→App ◦⟨Λ(App ◦⟨Snd, ⟨′1,′ 2⟩⟩), Λ(plus ◦Snd)⟩
→push;(cur push;snd;swap;push;quote 1;swap;quote
2;cons;cons;app);swap;(cur snd;plus);cons;app
The Categorical Abstract Machine – Hakjoo Oh
4 / 29

Introduction
S K I combinators
((K x) y = x
(S x y z) = (xz (yz))
(I x) = x (= (S K K)
The Categorical Abstract Machine – Hakjoo Oh
5 / 29

Introduction
Abstraction Elimination
e ::= x | λx.e | e1e2
1. T[x] => x
2. T[(e1e2)] => (T[e1]T[e2])
3. T[λx.e] => (KT[e]) if x is not free in e
4. T[λx.x] => I
5. T[λx.λy.e] => T[λx.T[λy.e]] (if x is free in e)
6. T[λx.(e1e2)] => (ST[λx.e1]T[λx.e2])
The Categorical Abstract Machine – Hakjoo Oh
6 / 29

Introduction
Example
let x = plus in x (4,(let x = 3 in 3));
M = (λx.x(4, (λx.x) 3))+
N = (λx.x 4 ((λx.x) 3))+
T[N] => S(SI(K4))(S(KI)(K3))+ = 7
The Categorical Abstract Machine – Hakjoo Oh
7 / 29

Introduction
λ calculus in De Bruijn form
d ::= n | λ.d | d1d2
∥0∥(ρ, d) = d
∥n + 1∥(ρ, d) = ∥n∥ρ
∥c∥ρ = c
∥MN∥ρ = ∥M∥ρ(∥N∥ρ)
∥λ.M∥ρd = ∥M∥(ρ, d)
ρ has the shape of (. . . ((),vn). . . , v0)
The Categorical Abstract Machine – Hakjoo Oh
8 / 29

Introduction
Meanings with Combinators
∥n∥= n!, ∥c∥= ‘c, ∥MN∥= S(∥M∥, ∥N∥), ∥λ.M∥= Λ(∥M∥)
0!(x, y) = y
(n + 1)!(x, y) = n!x
(′x)y = x
S(x, y)z = xz(yz)
Λ(x)yz = x(y, z)
The Categorical Abstract Machine – Hakjoo Oh
9 / 29

Introduction
Pairing Combinator
∥(M, N)∥= ⟨∥M∥, ∥N∥⟩
∥(M, N)∥ρ = (∥M∥ρ, ∥N∥ρ)
Fst(x, y) = x
Snd(x, y) = y
⟨x, y⟩z = (xz, yz)
The Categorical Abstract Machine – Hakjoo Oh
10 / 29

Introduction
Avoiding Redundancy
Let S(, ) and n! as shorthands for App ◦⟨, ⟩and Snd ◦Fstn
(x ◦y)z = x(yz)
Fst(x, y) = x
Snd(x, y) = y
⟨x, y⟩z = (xz, yz)
App(Λ(x)y, z) = x(y, z)
(‘x)y = x
for functional constants, like +
Λ(x ◦Snd)yz = (x ◦Snd)(y, z) = xz
The Categorical Abstract Machine – Hakjoo Oh
11 / 29

Introduction
Example (1/2)
let x = plus in x (4,(let x = 3 in 3));
M = (λx.x(4, (λx.x) 3))+
M’ = S(Λ(S(0!, ⟨′4, S(Λ(0!),′ 3)⟩)), Λ(+ ◦Snd))
A = S(0!, ⟨′4, B⟩)
B = S(Λ(0!),′ 3)
The Categorical Abstract Machine – Hakjoo Oh
12 / 29

Introduction
Example (2/2)
S(Λ(A), Λ(+ ◦Snd))() →App(Λ(A)(), Λ(+ ◦Snd)())
→Aρ(ρ = ((), Λ(+ ◦Snd)())) →App(0!ρ, ⟨′4, B⟩ρ)
→App(Λ(+ ◦Snd)(), ⟨′4, B⟩ρ) →App(Λ(+ ◦Snd)(), (′4ρ, Bρ))
→App(Λ(+ ◦Snd)(), (′4, Bρ))
→App(Λ(+ ◦Snd)(), (′4, App(Λ(0)ρ, ′3ρ)))
→App(Λ(+ ◦Snd)(), (′4, App(Λ(0!)ρ, 3)))
→App(Λ(+ ◦Snd)(), (′4, 0!(ρ, 3))) →App(Λ(+ ◦Snd)(), (′4, 3))
→(+ ◦Snd)((), (4, 3)) →+(Snd((), (4, 3))) →+(4, 3) →7
The Categorical Abstract Machine – Hakjoo Oh
13 / 29

The Abstract Machine
■
Introduction
■
The Abstract Machine
■
Extension
The Categorical Abstract Machine – Hakjoo Oh
14 / 29

The Abstract Machine
Translation to Machine Code (1/3)
Machine Conﬁguration = ⟨term, code, stack ⟩
▶x ◦y = yx
▶Fst = fst : expects a term (s, t) and replaces it by s
▶Snd = snd : expects a term (s, t) and replaces it by t
▶′c = (quote c)
Term
Code
Stack
Term
code
Stack
(s,t)
fst;C
S
s
C
S
(s,t)
snd;C
S
t
C
S
s
(quote c);C
S
c
C
S
The Categorical Abstract Machine – Hakjoo Oh
15 / 29

The Abstract Machine
Translation to Machine Code (2/3)
Machine Conﬁguration = ⟨term, code, stack ⟩
▶⟨M, N⟩= push; M; swap; N; cons
• push: push the term onto the top of the stack
• swap: swap the term and the top of the stack
• cons: make a couple out of the top of the stack and the term,
replace the term by the couple just built, and pop the stack
Term
Code
Stack
Term
code
Stack
s
push;C
S
s
C
s.S
t
swap;C
s.S
s
C
t.S
t
cons;C
s.S
(s,t)
C
S
The Categorical Abstract Machine – Hakjoo Oh
16 / 29

The Abstract Machine
Translation to Machine Code (3/3)
Machine Conﬁguration = ⟨term, code, stack ⟩
▶Λ(M) = (cur M)
• cur: replace the term s by C : s where C is in the code
encapsulated in Λ
▶App = app
• app: expects a term (C : s, t), replaces it by (s, t) and preﬁxes
the rest of the code by C.
▶+ = Λ(snd; plus) for functional constants
Term
Code
Stack
Term
code
Stack
s
(cur C);C1
S
(C:s)
C1
S
(C:s,t)
app;C1
S
(s,t)
C;C1
S
(m,n)
plus;C
S
m+n
C
S
The Categorical Abstract Machine – Hakjoo Oh
17 / 29

The Abstract Machine
Running Example
let x = plus in x (1,2)
→(λx.x (1,2)) plus
→(λ.0 (1,2)) plus
→App ◦⟨Λ(App ◦⟨Snd, ⟨′1,′ 2⟩⟩), Λ(plus ◦Snd)⟩
→push;(cur push;snd;swap;push;quote 1;swap;quote
2;cons;cons;app);swap;(cur snd;plus);cons;app
Term
Code
Stack
()
push;cur C1;swap;cur C2;cons;app
[]
C1:()
swap;cur C2;cons;app
[()]
C2:()
cons;app
[C1:()]
(C1:(),C2:())
app
[]
((),C2:())
C1
[]
(snd;plus:(), (1,2))
app
[]
((), (1,2))
snd;plus
[]
(1,2)
plus
[]
3
[]
The Categorical Abstract Machine – Hakjoo Oh
18 / 29

The Abstract Machine
Optimization - excluding couple, app (1/3)
(λ.M) N
Term
Code
Stack
s
push;cur C;swap;C1;cons;app
S
s
cur C;swap;C1;cons;app
s.S
C:s
swap;cur C1;cons;app
s.S
s
C1;cons;app
(C:s).S
v
cons;app
(C:s).S
(C:s,v)
app
S
(s,v)
C
S
The Categorical Abstract Machine – Hakjoo Oh
19 / 29

The Abstract Machine
Optimization - excluding couple, app (2/3)
(λ.M) N
Term
Code
Stack
s
push;C1;cons;C
S
s
C1;cons;C
s.S
v
cons;C
s.S
(s,v)
C
S
The Categorical Abstract Machine – Hakjoo Oh
20 / 29

The Abstract Machine
Optimization - excluding couple, app (3/3)
Natural β-reduction using identity combinator
App ◦⟨Λ(x), y⟩= x ◦⟨Id, y⟩
Fst ◦⟨x, y⟩= x
Snd ◦⟨x, y⟩= y
let x = N in M
Term
Code
Stack
s
push;skip;swap;C1;cons;C
S
s
skip;swap;C1;cons;C
s.S
s
swap;C1;cons;C
s.S
s
C1;cons;C
s.S
v
cons;C
s.S
(s,v)
C
S
The Categorical Abstract Machine – Hakjoo Oh
21 / 29

Extension
■
Introduction
■
The Abstract Machine
■
Extension
The Categorical Abstract Machine – Hakjoo Oh
22 / 29

Extension
Conditionals
if M then N else P = push;M;branch(N,P)
branch : replace the term by the top of the stack, and, according
to whether the term is true or false, execute N or P
Term
Code
Stack
Term
code
Stack
true
branch(C1,C2);C
s.S
s
C1;C
S
false
branch(C1,C2);C
s.S
s
C2;C
S
The Categorical Abstract Machine – Hakjoo Oh
23 / 29

Extension
Recursion (1/3)
using Y-combinator,
YM = M(YM) ⇔∥YM∥= App ◦⟨∥M∥, ∥YM∥⟩
introduce unary combinator Fix, where Fix(C) is the
abbreviation of App ◦⟨∥Y∥, C⟩
Fix(C) = App ◦⟨C, Fix(C)⟩
assume that the argument of Fix has a form Λ(Λ(M))
Fix(Λ(Λ(M))) = App◦⟨Λ(Λ(M)), Fix(Λ(Λ(M)))⟩= Λ(M)◦⟨Id, Fix(Λ(Λ(M)
abbreviating Fix(Λ(Λ(M))) to F(M)
F(M) = Λ(M) ◦⟨Id, F(M)⟩
The Categorical Abstract Machine – Hakjoo Oh
24 / 29

Extension
Recursion (2/3)
F(M) = Λ(M) ◦⟨Id, F(M)⟩
= push; F(M); cons; (curM)
Let t be the result of the action of F(C) on the term s.
t = C : (s, t)
decompose the eﬀect of F(C) into
1. construct an object C : (s, ()), where () is dummy value
2. construct the looping structure through a new instruction
wind
The Categorical Abstract Machine – Hakjoo Oh
25 / 29

Extension
Recursion (3/3)
Term
Code
Stack
Term
code
Stack
s
wind;C
(t,()).S
s[(t,()) ←(t,s)]
C
S
for example,
Term
Code
Stack
B:((),())
w
[((),());()]
B:(s=((),B:s))
[()]
The Categorical Abstract Machine – Hakjoo Oh
26 / 29

Extension
Lazy Evaluation
▶freeze: replace the term s by the structure (C.s), where C is
the code encapsulated in the freeze instruction
▶unfreeze: performs no action unless the term is a laze C.s,
in which case C is preﬁxed to the code (including unfreeze)
and the term becomes s.
• the compiler has to insert ‘unfreeze’ right before ‘strict’
instructions,i.e. those which cannot be executed on a laze:
fst,snd,app,plus.
Term
Code
Stack
Term
code
Stack
s
(freeze C);C1
S
C.s
C1
S
C.s
unfreeze;C1
S
s
C;unfreeze;C1
S
s
unfreeze;C
S
s
C
S
The Categorical Abstract Machine – Hakjoo Oh
27 / 29

Extension
Example of Lazy Evaluation
letrec x = (1, freeze x) in fst(snd(x))
The compiler translates fst(M) by fst(unfreeze(M))
The Categorical Abstract Machine – Hakjoo Oh
28 / 29

Extension
References
G.Cousineau, P.L.Curien and M.Mauny
The Categorical Abstract Machine
Science of Computer Programming 8, 1987
The Categorical Abstract Machine – Hakjoo Oh
29 / 29

