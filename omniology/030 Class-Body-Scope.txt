©2019 MathByte Academy

Nested scopes in Class definitions
# module1.py
class Python:
kingdom = 'animalia'
phylum = 'chordata'
family = 'pythonidae'
def __init__(self, species):
self.species = species    
def say_hello(self):
return 'ssss…'
p = Python('monty')
à module has its own (global) scope
à class body has its own scope
contains Python, p
à what about the scope of functions
defined in the body of a class?
à turns out they are NOT nested inside the 
class body scope
à symbols __init__, say_hello are in the class 
body scope
contains kingdom, phylum , family , __init__
, say_hello
à but functions themselves are nested in the 
class's containing scope
(module1 in this example)
©2019 MathByte Academy

# module1.py
class Python:
kingdom = 'animalia'
phylum = 'chordata'
family = 'pythonidae'
__init__ = callable_1
say_hello = callable_2
p = Python('monty')
Think of it this way
def callable_1(self, species):
self.species = species
def callable_2(self):
return 'ssss…'
à when Python looks for a symbol in a function, it will therefore not use the class body scope!
©2019 MathByte Academy

In practical terms…
class Account:
COMP_FREQ = 12
APR = 0.02  # 2%
APY = (1 + APR/COMP_FREQ) ** COMP_FREQ - 1
def monthly_interest(self):
return self.balance * self.APY
def __init__(self, balance):
self.balance = balance
this works because APR and 
COMP_FREQ are symbols in the 
same (class body) namespace
this works because we used self.APY
@classmethod
def monthly_interest_2(cls, amount):
return amount * cls.APY
this works because we used cls.APY
@staticmethod
def monthly_interest_3(amount):
return amount * Account.APY
this works because we used Account.APY
def monthly_interest_3(self):
return self.amount * APY
this will fail if APY is not defined in this function's 
scope or in any enclosing scope
BEWARE: This can produce subtle bugs!
©2019 MathByte Academy

Coding
©2019 MathByte Academy

