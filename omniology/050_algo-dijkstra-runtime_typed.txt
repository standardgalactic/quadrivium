Graph	  Primi*ves	  
Dijkstra’s	  Algorithm:	  
Fast	  Implementa*on	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Single-­‐Source	  Shortest	  Paths	  
Length of path  
= sum of edge lengths 
Input: directed graph G=(V, E). (m=|E|, n=|V| ) 
•  each edge has non negative length le 
•  source vertex s 
 
Output: for each          ,compute 
L(v) := length of a shortest s-v path in G 
 
Assumption: 
1.  [for convenience] 
2.  [important] 
Path	  length	  =	  6	  

Tim	  Roughgarden	  
Dijkstra’s	  Algorithm	  
Ini*alize:	  
• 	  X	  =	  [s]	  	  	  	  [ver*ces	  processed	  so	  far]	  
• 	  A[s]	  =	  0	  	  [computed	  shortest	  path	  distances]	  
• 	  B[s]	  =	  empty	  path	  [computed	  shortest	  
paths]	  
Main	  Loop	  
• 	  while	  	  XǂV:
	  	  
	  -­‐need	  to	  grow	  	  
	  
	  
	  x	  by	  one	  node	  
Main	  Loop	  cont’d:	  
• 	  	  
	  
	  
	  
[call	  it	  (v*,	  w*)]	  
	  
• 	  add	  w*	  to	  X	  
• 	  set	  
• 	  set	  	  	  
	  
	    
This array 
only to help 
explanation! 
Already 
computed in 
earlier iteration 

𝜃(𝑚+𝑛)	  
𝜃(𝑚​log⁠𝑛 )	  
𝜃(​𝑛↑2 )	  
𝜃(𝑚𝑛)	  
Which	  of	  the	  following	  running	  *mes	  seems	  to	  best	  describe	  a	  
“naïve”	  implementa*on	  of	  Dijkstra’s	  algorithm?	  
•  (n-1) iterations of while loop 
•          work per iteration 
[        work per edge] 
 
CAN WE DO BETTER? 

Tim	  Roughgarden	  
Recall: raison d’être of heap = perform Insert, Extract-Min in O(log n) time. 
[rest of video assumes familiarity with heaps] 
 
•  conceptually, a perfectly balanced binary tree 
• Heap property: at every node, key <= children’s keys 
•  extract-min by swapping up last leaf, bubbling down  
•  insert via bubbling up 
Also: will need ability to delete from middle of heap. (bubble up or down as 
needed) 
Heap	  Opera*ons	  
Height ~ log2n 

Tim	  Roughgarden	  
Two	  Invariants	  
Invariant # 1: elements in heap = 
vertices of V-X. 
Invariant #2: for  
Key[v] = smallest Dijstra greedy 
score of an edge (u, v) in E with v 
in X 
 
(of +     if no such edges exist) 
Point: by invariants, Extract-
Min yields correct vertex w* to 
add to X next. 
 
(and we set A[w*] to key[w*] ) 
 
Dijkstra’s 
greedy score 
of (v, w) : 
A[v] +lvw  

Tim	  Roughgarden	  
Maintaining	  the	  Invariants	  
To maintain Invariant #2: [i.e., that 
Key[v] = smallest Dijkstra greedy  
score of edge (u,v) with u in X ] 
 
When w extracted from heap (i.e., added to X) 
•  for each edge (w,v) in E: 
•  if v in V-X (i.e., in heap) 
•  delete v from heap 
•  recompute key[v] = min{key[v] , A[w] + lwv } 
•  re-Insert v into heap  
Key 
update 
Greedy score of (w,v) 
Need	  to	  
update	  key!	  
New	  
crossing	  
edges	  

Tim	  Roughgarden	  
Running	  Time	  Analysis	  
You check: dominated by heap operations. (O(log(n)) each ) 
•  (n-1) Extract mins 
•  each edge (v,w) triggers at most one Delete/Insert combo  
(if v added to X first) 
So: # of heap operations in O(n+m) = O(m) 
So: running time = O(m log(n)) (like sorting) 
Since graph is 
weakly connected 

