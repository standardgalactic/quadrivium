Alex Aiken 
Compilers 
Self Type Checking 

Alex Aiken 
Self Type Checking 
• SELF_TYPE’s  meaning depends on the enclosing class 
 
O,M,C ` e : T 
    
An expression e occurring in the body of C has 
static type T given a variable type environment O 
and method signatures M 

Alex Aiken 
Self Type Checking 
• The next step is to design type rules using SELF_TYPE 
 
• Most of the rules remain the same  
– But use the new  and lub 
 
O(Id) = T0 
O,M,C ` e1 : T0 
T1  T0 
O,M,C ` Id  e1 : T1 

Alex Aiken 
Self Type Checking 
• Recall the old rule for dispatch 
 
O,M,C ` e0 : T0 
          M 
O,M,C ` en : Tn  
M(T0, f) = (T1’,…,Tn’,Tn+1’) 
Tn+1’  SELF_TYPE 
Ti  Ti’          1  i  n 
O,M,C ` e0.f(e1,…,en) : Tn+1’ 

Alex Aiken 
Self Type Checking 
• If the return type of the method is SELF_TYPE then the 
type of the dispatch is the type of the dispatch 
expression: 
 
O,M,C ` e0 : T0 
           M 
O,M,C ` en : Tn  
M(T0, f) = (T1’,…,Tn’, SELF_TYPE) 
Ti  Ti’          1  i  n 
O,M,C ` e0.f(e1,…,en) : T0 

Alex Aiken 
Self Type Checking 
• Formal parameters cannot be SELF_TYPE 
 
• Actual arguments can be SELF_TYPE 
– The extended  relation handles this case 
 
• The type T0 of the dispatch expression could be SELF_TYPE 
– Which class is used to find the declaration of f? 
– Answer: it is safe to use the class where the dispatch appears 

Alex Aiken 
Self Type Checking 
• Recall the original rule for static dispatch 
 
O,M,C ` e0 : T0 
           M 
O,M,C ` en : Tn  
T0  T 
M(T, f) = (T1’,…,Tn’,Tn+1’) 
Tn+1’  SELF_TYPE 
Ti  Ti’          1  i  n 
O,M,C ` e0@T.f(e1,…,en) : Tn+1’ 

Alex Aiken 
Self Type Checking 
• If the return type of the method is SELF_TYPE we have: 
 
O,M,C ` e0 : T0 
           M 
O,M,C ` en : Tn  
T0  T 
M(T, f) = (T1’,…,Tn’,SELF_TYPE) 
Ti  Ti’          1  i  n 
O,M,C ` e0@T.f(e1,…,en) : T0 

Alex Aiken 
Self Type Checking 
• Why is this rule correct? 
 
• If we dispatch a method returning SELF_TYPE in class 
T, don’t we get back a T? 
 
• No. SELF_TYPE is the type of the self parameter, 
which may be a subtype of the class in which the 
method appears 

Alex Aiken 
Self Type Checking 
• There are two new rules using SELF_TYPE 
O,M,C ` self : SELF_TYPEC 
O,M,C ` new SELF_TYPE : SELF_TYPEC 

Self Type Checking 
 
1  
class Animal { 
2  
 
clone() : SELF_TYPE { new SELF_TYPE } 
3  
} 
4  
 
class Pet inherits Animal { 
5  
 
clone() : Pet { new SELF_TYPE } 
6  
} 
7  
class Cat inherits Pet { ... } 
8  
class Dog inherits Pet { ... } 
9  
class Lion inherits Animal { ... } 
10 class Main { 
11  
w:Animal <- (new Animal).clone(); 
12  
x:Animal <- (new Lion).clone(); 
13  
y:Pet <- (new Cat).clone(); 
14  
z:Animal <- (new Dog)@Animal.clone(); 
15  
… 
16  } 
Choose the static/dynamic type 
pairs that are correct. For 
dynamic type, assume execution 
has halted at line 15. 
     
      Var  Static Type  Dynamic Type 
      w   Animal    Pet 
 
    x   Animal    Lion 
 
    y   Pet     Pet 
 
    z   Animal    Dog 

Alex Aiken 
Self Type Checking 
• The extended  and lub operations can do a lot of the work.  
 
• SELF_TYPE can be used only in a few places. Be sure it isn’t 
used anywhere else. 
 
• A use of SELF_TYPE always refers to any subtype of the 
current class 
– The exception is the type checking of dispatch. The method return 
type of SELF_TYPE might have nothing to do with the current class 

Alex Aiken 
Self Type Checking 
•
SELF_TYPE is a research idea 
– It adds more expressiveness to the type system 
 
•
SELF_TYPE is itself not so important 
– except for the project 
 
•
Rather, SELF_TYPE is meant to illustrate that type checking can be 
quite subtle 
 
•
In practice, there should be a balance between the complexity of 
the type system and its expressiveness 

