
SAP PRESS is a joint initiative of SAP and Rheinwerk Publishing. The know-
how offered by SAP specialists combined with the expertise of Rheinwerk 
Publishing offers the reader expert books in the field. SAP PRESS features 
first-hand information and expert advice, and provides useful skills for 
professional decision-making.
SAP PRESS offers a variety of books on technical and business-related 
topics for the SAP user. For further information, please visit our website: 
http://www.sap-press.com.
James Wood
Getting Started with SAP HANA Cloud Platform
2015, 519 pages, hardcover
ISBN 978-1-4932-1021-3
Paul Hardy
ABAP to the Future
2015, 727 pages, hardcover
ISBN 978-1-4932-1161-6
Miroslav Antolovic
Getting Started with SAPUI5
2014, 462 pages, hardcover
ISBN 978-1-59229-969-0
Bönnen, Drees, Fischer, Heinz, Strothmann
OData and SAP NetWeaver Gateway
2014, 666 pages, hardcover
ISBN 978-1-59229-907-2

Anil Bavaraju
SAP Fiori
® Implementation and Development

Dear Reader,
I have a confession…I love my iPhone. I wake up to it in the morning and lay beside
it at night. There are times when I fear Siri may know me better than I know
myself… And the apps; don’t even get me started! I’m a Flipboard fiend, sucking up
news like oxygen. Pandora dictates my mood. I’m fascinated by this tiny computer
at my fingertips. But more than anything, it’s the ease and the simplicity of use that
allows me to feel, well, connected to the world.
We users have spoken. And we declare: “Make it simple. Make it mobile. Make it
mine.” SAP’s answer: SAP Fiori. With 500+ apps and more to come, this cross-
industry UX has simplified business interactions in classic products and in new
products such as SAP S/4HANA Finance. As a developer, it’s your job to keep pace
with these innovations. That’s where this book comes into play. With this guide,
you’ll discover how to implement SAP Fiori apps, create apps from scratch, and
extend existing functionality—all to the delight of your users. So, turn the page,
and discover why SAP Fiori is more than just a pretty face; it’s an experience.
What did you think about SAP Fiori Implementation and Development? Your com-
ments and suggestions are the most useful tools to help us make our books the best
they can be. Please feel free to contact me and share any praise or criticism you may
have.
Thank you for purchasing a book from SAP PRESS!
Sarah Frazier
Editor, SAP PRESS
Rheinwerk Publishing
Boston, MA
sarahf@rheinwerk-publishing.com
http://www.sap-press.com

Notes on Usage
This e-book is protected by copyright. By purchasing this e-book, you have agreed 
to accept and adhere to the copyrights. You are entitled to use this e-book for 
personal purposes. You may print and copy it, too, but also only for personal use. 
Sharing an electronic or printed copy with others, however, is not permitted, neither 
as a whole nor in parts. Of course, making them available on the Internet or in a 
company network is illegal as well.
For detailed and legally binding usage conditions, please refer to the section 
Legal Notes.
This e-book copy contains a digital watermark, a signature that indicates which 
person may use this copy:

Imprint
This e-book is a publication many contributed to, specifically:
Editor  Sarah Frazier
Acquisitions Editor  Kelly Grace Weaver
Copyeditor  Julie McNamee
Cover Design  Graham Geary
Photo Credit  Shutterstock.com/156687788/© Marukosu
Production E-Book  Graham Geary
Typesetting E-Book  SatzPro, Krefeld (Germany)
We hope that you liked this e-book. Please share your feedback with us and read 
the Service Pages to find out how to contact us.
The Library of Congress has cataloged the printed edition as follows:
Bavaraju, Anil, author.
SAP fiori implementation and development / Anil Bavaraju. -- 1st edition.
pages cm
Includes index.
ISBN 978-1-4932-1248-4 (print : alk. paper) -- ISBN 1-4932-1248-6 (print : alk. paper) -- 
ISBN 978-1-4932-1249-1 (ebook) -- ISBN 978-1-4932-1250-7 (print and ebook : alk. paper) 
1. Enterprise application integration (Computer systems) 2. User interfaces (Computer systems) 
3. SAP ERP. I. Title.
QA76.76.A65B378 2015
005.4’37--dc23
2015030309
ISBN 978-1-4932-1248-4 (print)
ISBN 978-1-4932-1249-1 (e-book)
ISBN 978-1-4932-1250-7 (print and e-book)
© 2016 by Rheinwerk Publishing, Inc., Boston (MA)
1st edition 2016

7
Contents
Foreword .........................................................................................................
13
Preface .............................................................................................................
17
Acknowledgments ............................................................................................
23
PART I Getting Started
1
Introduction to SAP Fiori ..........................................................
27
1.1
SAP Fiori and the Evolution of UX .................................................
27
1.1.1
SAP UX Strategy ...............................................................
28
1.1.2
SAP Fiori UX Design Principles .........................................
29
1.2
Architecture and Integration ..........................................................
30
1.2.1
SAP Fiori Launchpad ........................................................
32
1.2.2
SAP Web Dispatcher ........................................................
40
1.2.3
Communication Channels .................................................
42
1.2.4
SAP Fiori App-Supported Browsers and OS ......................
43
1.3
Types of SAP Fiori Apps .................................................................
45
1.3.1
Transactional Apps ...........................................................
48
1.3.2
Fact Sheet Apps ...............................................................
50
1.3.3
Analytical Apps ................................................................
51
1.4
Related SAP Technologies .............................................................
53
1.4.1
SAPUI5 ............................................................................
53
1.4.2
OData and SAP Gateway ..................................................
66
1.4.3
SAP HANA XS ..................................................................
72
1.5
Summary .......................................................................................
73
2
Installation and Configuration ..................................................
75
2.1
Prerequisites ..................................................................................
75
2.2
Implementation Options ...............................................................
76
2.2.1
ABAP Environment ...........................................................
76
2.2.2
SAP HANA Database ........................................................
78
2.2.3
SAP HANA XS ..................................................................
79
2.3
Deployment Options .....................................................................
82
2.3.1
Central Hub Deployment ..................................................
82
2.3.2
Embedded Deployment ...................................................
83
2.4
Apps Reference Library ..................................................................
84

8
Contents
2.5
Installation ....................................................................................
86
2.5.1
ABAP Environment ...........................................................
86
2.5.2
SAP Web Dispatcher ........................................................ 102
2.5.3
SAP HANA Server ............................................................. 103
2.6
Configuration ................................................................................ 105
2.6.1
SAP Fiori Launchpad ........................................................ 105
2.6.2
SAP Gateway .................................................................... 118
2.6.3
Embedded Search ............................................................ 125
2.6.4
SAP HANA ....................................................................... 128
2.6.5
Configuration Using the Task List ..................................... 132
2.7
Summary ....................................................................................... 134
PART II Implementation
3
SAP Fiori Security ...................................................................... 137
3.1
Communication Channel Security and Encryption .......................... 138
3.1.1
Client to SAP Web Dispatcher .......................................... 141
3.1.2
SAP Web Dispatcher to ABAP Servers .............................. 141
3.1.3
ABAP Frontend Server to ABAP Backend Server ............... 144
3.1.4
SAP Web Dispatcher to SAP HANA XS ............................. 147
3.2
Single Sign-On and User Authentication ........................................ 149
3.2.1
Kerberos/SPNego ............................................................. 150
3.2.2
Security Assertion Markup Language 2.0 .......................... 151
3.2.3
SAP Logon Tickets ............................................................ 153
3.2.4
X.509 Certificate .............................................................. 154
3.3
User Authorizations and Management ........................................... 155
3.3.1
User Management ............................................................ 155
3.3.2
User Authorization ........................................................... 156
3.4
Summary ....................................................................................... 160
4
Implementing Transactional Apps ............................................ 161
4.1
Activating the SAPUI5 Component ................................................ 162
4.2
Activating the OData Services ........................................................ 165
4.3
ABAP Frontend Roles .................................................................... 170
4.3.1
Copy Business Catalog Role .............................................. 172
4.3.2
Start Authorization ........................................................... 173
4.3.3
Assign Roles to Users ....................................................... 178
4.4
ABAP Backend Roles ..................................................................... 180
4.4.1
Copy the Backend Role .................................................... 180

Contents
9
4.4.2
Assigning Roles to Users ................................................... 181
4.5
Running the App ........................................................................... 181
4.6
Custom Business Catalogs and Roles .............................................. 183
4.6.1
Create a New Launchpad and Application ........................ 183
4.6.2
Create and Assign a Transport Request ............................. 186
4.6.3
Create a New Catalog ....................................................... 188
4.6.4
Create New Target Mapping ............................................ 189
4.6.5
Add a Static Tile ............................................................... 191
4.6.6
Create the Custom Role and Add the Catalog ................... 194
4.7
Summary ....................................................................................... 198
5
Implementing Fact Sheet Apps ................................................. 199
5.1
Activating the SAPUI5 Component ................................................ 200
5.2
Activating the OData Services ........................................................ 200
5.3
Assign ABAP Backend Roles .......................................................... 201
5.4
Creating Search Connectors ........................................................... 202
5.4.1
Create Connectors Manually ............................................ 204
5.4.2
Create Connectors Automatically ...................................... 206
5.5
Indexing Search Connectors ........................................................... 207
5.6
Running the App ........................................................................... 210
5.7
Summary ....................................................................................... 211
6
Implementing Analytical Apps .................................................. 213
6.1
Overview ....................................................................................... 214
6.2
Implementation Prerequisites ........................................................ 215
6.3
Analytical Apps with the SAP Smart Business Modeler ................... 217
6.3.1
Create the KPI   ................................................................ 218
6.3.2
Create Evaluations of the KPI ........................................... 221
6.3.3
Configure the KPI Tile ...................................................... 224
6.3.4
Configure the KPI Drilldown ............................................ 228
6.3.5
Assign Roles to Users to Access SAP HANA Data .............. 236
6.3.6
Activate the SAPUI5 Application for Generic Drilldown .... 239
6.3.7
Assigning Authorizations to Users .................................... 240
6.3.8
Enable the App for Access in SAP Fiori Launchpad ........... 242
6.3.9
Assign the App Using a Custom Role ................................ 246
6.4
Analytical Apps without the SAP Smart Business Modeler ............. 255
6.4.1
Activate the SAPUI5 Application ...................................... 256
6.4.2
Assign the SAP HANA Role .............................................. 257

10
Contents
6.4.3
Assign the App-Specific Catalog Role ............................... 258
6.4.4
Add the App to SAP Fiori Launchpad ............................... 258
6.5
Summary ....................................................................................... 259
7
Creating OData Services with SAP Gateway ............................ 261
7.1
Introduction to OData ................................................................... 262
7.1.1
OData Service Basics ........................................................ 262
7.1.2
OData Service Queries ..................................................... 266
7.2
SAP Gateway Service Builder ......................................................... 269
7.3
Modeling an OData Service ........................................................... 274
7.3.1
Importing OData Services ................................................. 276
7.3.2
Redefining OData Services ............................................... 295
7.3.3
Include Gateway OData Service ........................................ 308
7.4
Summary ....................................................................................... 309
PART III Custom Development and Extension
8
Introduction to SAP Web IDE ................................................... 313
8.1
SAP Web IDE Overview ................................................................. 314
8.1.1
Architecture ..................................................................... 314
8.1.2
Advantages ...................................................................... 315
8.2
Setting Up SAP Web IDE with SAP HCP ........................................ 316
8.3
Development Process Overview .................................................... 321
8.3.1
Create .............................................................................. 322
8.3.2
Develop ........................................................................... 328
8.3.3
Preview ............................................................................ 337
8.3.4
Deployment ..................................................................... 340
8.4
Summary ....................................................................................... 345
9
Creating and Extending Transactional Apps ............................. 347
9.1
Creating Transactional Apps .......................................................... 347
9.1.1
Create a New Project Using a Template ............................ 348
9.1.2
Test the App with Mock Data .......................................... 351
9.1.3
Deploy the App to the ABAP Backend Server ................... 353
9.1.4
Publish the App to SAP Fiori Launchpad ........................... 354
9.2
Extending Transactional Apps ........................................................ 358
9.2.1
Extend the SAP Business Suite Layer ................................. 361

Contents
11
9.2.2
Extend the SAP Gateway Layer ......................................... 366
9.2.3
Extend the UI Layer .......................................................... 376
9.3
Summary ....................................................................................... 387
10 Creating and Extending Fact Sheet Apps ................................. 389
10.1
Enabling the Fact Sheet App Editor Plugin ..................................... 390
10.2
Creating Fact Sheet Apps ............................................................... 391
10.2.1
Create the Search Model .................................................. 392
10.2.2
Create the UI Layer .......................................................... 398
10.2.3
Deploy the Fact Sheet App ............................................... 403
10.3
Extending Fact Sheet Apps ............................................................ 407
10.3.1
Extend the Search Model ................................................. 408
10.3.2
Extend the UI Layer .......................................................... 419
10.3.3
Deploy the Fact Sheet App ............................................... 435
10.4
Summary ....................................................................................... 436
11 Creating and Extending Analytical Apps .................................. 437
11.1
Introduction to SAP HANA Live ..................................................... 437
11.1.1
SAP HANA Live Views ...................................................... 438
11.1.2
SAP HANA Live Browser .................................................. 439
11.1.3
Exposing SAP HANA Live Views to Analytical Apps .......... 440
11.2
Creating Analytical Apps ................................................................ 442
11.2.1
Create the SAP HANA Live View ...................................... 442
11.2.2
Create the OData Service ................................................. 448
11.2.3
Configure the KPI ............................................................. 457
11.3
Extending Analytical Apps ............................................................. 463
11.3.1
Extend the SAP HANA Live View ...................................... 464
11.3.2
Create the OData Service ................................................. 471
11.3.3
Configure the KPI ............................................................. 471
11.4
Summary ....................................................................................... 471
12 Workflow and SAP Fiori ............................................................ 473
12.1
Workflow Basics ............................................................................ 473
12.2
Creating Standard and Custom Workflows with the  
My Inbox App ............................................................................... 475
12.2.1
Prerequisites .................................................................... 476

12
Contents
12.2.2
All Items Inbox ................................................................. 478
12.2.3
Scenario Specific Inbox ..................................................... 488
12.3
Summary ....................................................................................... 505
13 Integration with Other SAP Products ....................................... 507
13.1
SAP Jam ........................................................................................ 508
13.1.1
Prerequisites .................................................................... 508
13.1.2
Configuration ................................................................... 509
13.1.3
SAP Jam Tiles ................................................................... 513
13.1.4
Collaboration Components ............................................... 514
13.2
SAP Lumira .................................................................................... 515
13.2.1
Configuration ................................................................... 515
13.2.2
SAP Lumira Tiles ............................................................... 519
13.2.3
Configure the KPI Tile with a Drilldown ........................... 523
13.3
SAP BusinessObjects Design Studio ............................................... 524
13.3.1
Configuration ................................................................... 524
13.3.2
Create an SAP Fiori App ................................................... 527
13.4
Summary ....................................................................................... 533
Appendices ....................................................................................... 535
A
SAP Fiori Client ........................................................................................ 537
B
Customizing SAP Fiori Launchpad ............................................................ 547
C
The Author .............................................................................................. 557
Index ............................................................................................................... 559
Service Pages  .............................................................................................  
I
Legal Notes  ............................................................................................... 
III

13
3 Foreword
The world is changing and technology is at the center of everything we do. 
Younger generations are born into a world of rapid technological evolution and 
the millennials are entering the workforce with the mindset that simplicity is key. 
We are now a society equipped with mobile devices that instantly allow access to 
social networks and countless apps. Subsequently, end users are accustomed to a 
new and improved user experience. Businesses have quickly caught onto this new 
demand and realized that enterprise software cannot be an exception. It is unac-
ceptable to show end users the complexity of business software and it has become 
imperative to provide a beautiful user experience. Businesses are being forced to 
change with the times if they want to stay relevant, and SAP has emerged as a 
leader in this evolution.
For the past few years, SAP has been rethinking enterprise software with a focus 
on end users. Enterprise software is powerful and covers end-to-end business 
processes. However, the end-to-end cycle is not one size fits all. Depending on 
your role in an enterprise, you might need to see different data than a counterpart 
in your organization. For this reason, SAP set out to completely reimagine the 
end user experience. They started out by focusing on the most commonly used 
business transactions, such as vacation requests, time entry, expense reporting, 
etc. Then, they set out to develop a consistent and holistic user experience for 
SAP software. Five design guidelines were established to aid in this evolution: 
role-based, delightful, coherent, simple, and responsive. By keeping focused 
alignment with growing end user demands, SAP quickly realized that apps 
needed to be created by role, allow you to complete your job easily, be consistent 
across the offering, and be intuitive to work on any device. In May 2013, SAP hit 
the mark and launched SAP Fiori as the new user experience for SAP.
Today, SAP Fiori consists of over 500+ apps, ranging across all lines of business 
and industries. In order to support the breadth of business transactions used by 
customers, SAP developed three supporting SAP Fiori app types: transactional, 
fact sheet, and analytical apps. Transactional apps support task-based access 

Foreword
14
and support changes, as well as creations and approvals with guided naviga-
tion. Fact sheet apps allow you to search and explore essential information 
about objects, and provide contextual navigation between related objects. Ana-
lytical apps provide a visual overview of a dedicated topic for further KPI-
related analysis. Transactional app types can run on either an AS ABAP or SAP 
HANA database. However, fact sheet and analytical app types require an SAP 
HANA database. All of these app types are accessed using SAP Fiori Launchpad, 
which is a web-based entry point for SAP business applications, allowing an 
end user to personalize their view.
While SAP worked to simplify business processes and provide a delightful end 
user experience, they also realized that customers have individual needs, and out-
of-the-box apps might not work for everybody. In recognition of this fact, SAP 
developed tools to support developers and designers in their implementation of 
SAP Fiori. Tools such as the SAP Web IDE provide developers everything they 
need to customize and extend the apps to work for their business, while the UI 
Theme Designer enables companies to easily brand their SAP Fiori Launchpad 
and apps to align with their company brand and color schemes.
SAP Fiori Implementation and Development delivers a comprehensive end-to-end 
understanding of SAP Fiori, providing developers and IT professionals with in-
depth knowledge about SAP Fiori as the user experience for SAP business appli-
cations. With a specific focus dedicated to the deployment and configuration of 
each of the app types, readers can also expect to learn the technical aspects 
required for a successful implementation as well as the security and authentica-
tion options vital for their organization. You will conclude your SAP Fiori under-
standing with the underlying technologies and tools that support SAP Fiori, 
including the creation and extension of OData services within SAP Gateway, the 
SAP Web IDE for UI extensibility and customizations, business workflows for 
approval apps, and integration with other SAP technologies.
After reading this book, you will not only understand what SAP Fiori is, but how 
you can also leverage the technology to provide your end users with a delightful 
and consistent user experience. Gone are the days of complexity and focusing 
only on feature enhancements. SAP has created a new standard of focusing on 
end users, providing them with a holistic experience centered on the tasks rele-
vant to their job. The teachings in this book will provide you with the tools to 

Foreword
15
immediately enable SAP Fiori in your organization. With detailed explanations 
and guidance throughout, SAP Fiori Implementation and Development will help 
simplify your business processes.
Liz Thorburn, SAP  
Technology RIG, Development 
P&I Technology


17
4 Preface
SAP Fiori is a user experience (UX) for SAP software. It applies modern design 
principles and provides a personalized, responsive, and easy-to-use user experi-
ence. SAP Fiori is a set of applications (HR apps, customer relationship apps, 
financials apps, and more) that run on SAP ERP and fall into one of three cate-
gories based on their general purpose: transactional apps, fact sheet apps, and 
analytical apps. These apps provide a user interface from which to accomplish 
functionality that is already present in an SAP system.
There are several things a company can do with SAP Fiori applications:
 Implement them
 Customize them
 Create them from scratch
Regardless of what a company is doing with these apps, any form of implemen-
tation or development requires SAP Gateway (the integration technology that 
connects the frontend SAP Fiori app to the backend SAP system). In addition, 
knowledge of SAPUI5 (the programming language on which the UI of SAP Fiori 
apps is based) is needed in order to customize or create apps.
It’s time to take the first step in your SAP Fiori journey! In this introduction, we’ll 
discuss the book’s target audience, layout its purpose, and then provide a struc-
tural overview of the topics that lie ahead.
Target Audience
SAP Fiori has a broad appeal given its wide use in SAP systems, as well as the 
many apps it offers across industries. However, given the technical details 
involved in the implementing and developing of SAP Fiori apps, this book is pri-
marily focused on the following two audiences:

Preface
18
 Developers and administrators at companies who run SAP ERP
 Consultants who are hired to implement SAP Fiori for a company running SAP ERP
Again, this casts a wide net in terms of readers for this book. However, each chap-
ter will layout the general knowledge and prerequisites required for implement-
ing and developing each SAP Fiori app type.
Objective
This book is meant to be a complete guide to implementing and developing SAP 
Fiori apps. The purpose of the book is to teach you how to implement, customize, 
and create SAP Fiori applications. You will walk away with a complete under-
standing of how to accomplish all of these tasks in specific and technical detail 
through step-by-step instructions, screenshots, and example applications.
Structure of the Book
This book is divided into three parts. Part I, Getting Started, explains the first 
steps in SAP Fiori: a basic explanation of what it is, and instructions on installa-
tion and configuration.
The following walks through the chapter topics in Part I:
 Chapter 1: Introduction to SAP Fiori  
To begin your SAP Fiori journey, we will look at its architecture and integra-
tion, with a focus on reverse proxy (SAP Web Dispatcher) and the channels of 
communication. We will then discuss the three SAP Fiori app types, and related 
technologies such as SAP Gateway, SAPUI5, and SAP HANA.
 Chapter 2: Installation and Configuration  
Before any implementation or development can begin, you will need to install 
and configure the SAP system so it’s ready to deploy SAP Fiori apps. In this 
chapter, we will begin by looking at the three SAP Fiori system landscapes used 
for implementing the apps: the ABAP environment, SAP HANA database, and 
SAP HANA XS. We’ll then move on to the two compatible deployment options: 
central hub and embedded. The last two sections walk through the installation 
and configuration processes.

Structure of the Book
19
Part II, Implementation, is devoted to the implementation of SAP Fiori apps. It 
starts by introducing the security measures that should be in place to ensure that 
the apps are safe. It then begins explaining the step-by-step process for imple-
menting the three different types of SAP Fiori apps: transactional, fact sheet, and 
analytical. It then devotes a chapter to creating OData services in SAP Gateway, 
which is required in all implementations in order for the frontend of SAP Fiori to 
communicate with the backend of SAP.
The following walks through the chapter topics in Part II:
 Chapter 3: SAP Fiori Security  
It’s important to understand the various security mechanisms that can be put in 
place to prevent the unauthorized and unauthenticated use of SAP Fiori apps. 
In this chapter, we look at securing the app communication channels and secu-
rity measures for encryption. We then delve into single sign-on and authenti-
cating app users. Finally, we provide an overview of how to manage users and 
authorize access.
 Chapter 4: Implementing Transactional Apps  
In this first app implementation chapter, we’ll begin our discussion by looking 
at how to implement transactional apps. We’ll begin by activating the SAPUI5 
component and OData services. Next, we dive into the ABAP frontend and 
backend roles before running the app. We end the chapter with a discussion on 
creating custom business catalogs and roles.
 Chapter 5: Implementing Fact Sheet Apps  
Many ABAP frontend tasks are shared between transactional and fact sheet 
apps. In this chapter we focus on the specific fact sheet apps implementation 
steps that must be completed. This includes creating search connectors manu-
ally and automatically, as well as indexing the search connectors.
 Chapter 6: Implementing Analytical Apps  
There are two types of analytical apps: non-smart analytical apps and analytical 
apps enabled via the SAP Smart Business Modeler. This chapter begins by spell-
ing out the necessary implementation prerequisites before diving deep into the 
tasks necessary to implement both analytical app types.
 Chapter 7: Creating OData Services with SAP Gateway  
SAP Gateway OData services are required in order to connect SAP Fiori to the 
SAP backend system. This chapter offers instructions on how to create OData 

Preface
20
services. You will use the steps spelled out here to create OData services when 
creating the SAP Fiori apps in Part III.
Part III, Custom Development and Extension, is devoted to the development tasks 
related to SAP Fiori, which fall into two categories: new app creation and custom-
ization (extension). Both tasks are discussed for each of the three types of SAP 
Fiori apps. The part then moves on to other important topics that fall under a 
developer’s purview: workflow and integration with other SAP products.
The following walks through the chapter topics in Part III:
 Chapter 8: Introduction to SAP Web IDE
The SAP Web IDE is the environment used to create and extend transactional,
fact sheet, and analytical apps. This chapter begins with an overview of the SAP
Web IDE environment, including its architecture and advantages, then transi-
tions to the steps for setting up the SAP Web IDE with SAP HANA Cloud Plat-
form. We then conclude the chapter by walking through the development pro-
cess itself, from creation to deployment.
 Chapter 9: Creating and Extending Transactional Apps
SAP Fiori apps can either be created from scratch or you can extend existing
apps. In this chapter, we’ll look at how to create and extend transactional
apps—from creating a new project using a template to extending the UI layer.
 Chapter 10: Creating and Extending Fact Sheet Apps
In this chapter, we’ll discuss how to enable the fact sheet app editor plug-in,
which is necessary prior to the creation and extension process. We will then
look at everything from creating the UI layer to extending an existing search
model.
 Chapter 11: Creating and Extending Analytical Apps
Analytical apps are developed on query views from SAP HANA Live. In this
chapter, we will present an overview of SAP HANA Live, then move on to the
steps to create and extend our example analytical app.
 Chapter 12: Workflow and SAP Fiori
The most common modifications to SAP Fiori apps involve modifying their
workflow. Accordingly, this chapter provides an overview of SAP Business
Workflow. In addition, we’ll discuss how and when to create a custom work-
flow with an example based on the My Inbox app.

Structure of the Book
21
 Chapter 13: Integration with Other SAP Products
SAP Fiori apps can be integrated with other SAP products. In this chapter we’ll
look at how these apps can be integrated with SAP Jam, SAP Lumira, and SAP
BusinessObjects Design Studio.
The book then concludes with two appendices on SAP Fiori Client and customiz-
ing SAP Fiori Launchpad:
 Appendix A: SAP Fiori Client
SAP Fiori Client is a native SAP Fiori app for iOS and Android. This appendix 
provides a brief introduction to SAP Fiori Client. Information found here 
includes download and login steps, as well as an overview of SAP Fiori Client 
functions.
 Appendix B: Customizing SAP Fiori Launchpad
SAP Fiori Launchpad provides a platform for accessing all SAP Fiori apps. Using 
the UI Theme Designer, you can customize SAP Fiori Launchpad to your liking. 
In this appendix, we walk through how to do this, as well as how to create a 
custom SAP Fiori Launchpad theme. 
Our hope is that with this book you will gain an understanding of the steps 
involved in installing, implementing, developing, and integrating SAP Fiori apps 
based on your business requirements.


23
5 Acknowledgments
I would like to dedicate this book to my wife Puja and my son Arjun, who sup-
ported and encouraged me in spite of all the endless hours, evenings, and week-
ends that I took away from them.
I would also like to thank Kelly Grace Weaver for the trust placed in me and for 
the opportunity to write this book. I would like to extend a heartfelt thanks to the 
editor, Sarah Frazier, who supported me every step of the way, from the ideas in 
every chapter of this book to its publication, and for providing advice and help at 
all times.
My final—yet very important—thanks goes out to the entire SAP PRESS team 
involved in creating this book.
Anil Bavaraju


PART I
Getting Started


27
Chapter 1 
To begin your SAP Fiori journey, we’ll start with the basics: SAP Fiori’s 
architecture, app types, and the related SAP technologies required for 
implementation.
1
Introduction to SAP Fiori
In today’s business environment, users face many challenges in the hunt for 
timely, up-to-date, and accurate information. In addition, accessibility to this 
information, anywhere, anytime, is vital to their ability to make faster, smarter 
decisions. Applications have revolutionized the landscape of “on-demand” busi-
ness accessibility in addressing the needs of these users.
SAP’s answer: SAP Fiori. SAP Fiori UX provides role-based, personalized user 
experience (UX) for enterprise-wide engagements across lines of businesses 
(LOBs), and offers optimal usability on multiple devices for the best business 
interactions. In this book, we’ll discuss the development skills needed to imple-
ment, customize, and create SAP Fiori apps.
Beginning with this chapter, we’ll introduce you to SAP Fiori, and all the related 
concepts you will come across throughout this book. We’ll start with an overview 
of SAP Fiori and SAP’s UX strategy in Section 1.1, then dive into SAP Fiori’s archi-
tecture and integration technologies in Section 1.2. From there, we’ll look at the 
three main types of SAP Fiori apps: transactional, fact sheet, and analytical apps in 
Section 1.3. Finally, in Section 1.4, we’ll discuss related SAP technologies that 
enable the implementation and use of these apps.
1.1
SAP Fiori and the Evolution of UX
Technology requirements are changing. An emphasis on user experience is now 
prevalent in the creation of new and emerging products. Like the Facebook and 
Twitter apps, users want a similar user experience for their business applications.

Introduction to SAP Fiori
1
28
At SAP SAPPHIRE 2013, SAP released a new class of SAPUI5-based applications, 
and dubbed them SAP Fiori, as part of their revamped UX strategy. The idea? 
Apply modern design principles for a totally reimagined user experience.
The initial release of SAP Fiori had 25 apps, and today (November 2015) the num-
ber of SAP Fiori apps has grown rapidly to over 500, providing consistent and 
simple UX across multiple devices. Even now, SAP continues to work on new and 
innovative SAP Fiori apps to add to its portfolio. Up-to-date app information can 
be found on the SAP Fiori apps reference library http://www.sap.com/fiori-apps-
library. Chapter 2, Section 2.4 provides further information on the apps reference 
library.
 
Meaning in the Name
Fiori means flower in Italian. This is the reason why you see flower pictures associated 
with SAP Fiori—such as the cover of this book.
In the sections that follow, we’ll provide an overview of SAP’s UX strategy, then 
describe how this has impacted the UX design principles used to develop SAP 
Fiori apps.
1.1.1
SAP UX Strategy
SAP’s UX strategy has four areas of focus:
 New  
SAP continues to create new applications with consumer-grade user experi-
ences to accomplish customer needs.
 Renew  
SAP took all the most frequently used business scenarios and renewed them 
with SAP Fiori apps by improving the user experience.
 Enable  
This principle gives SAP customers and partners the ability to improve the user 
experience on their own using various enablement tools. For example, SAP 
Screen Personas enables customers to optimize or simplify any screen in the 
graphical user interface (GUI).
 UX design services  
This is an element that came from customers who wanted to transfer their own 
reality into the SAP UX strategy.

SAP Fiori and the Evolution of UX
1.1
29
Primarily, UX design services are at the heart of the SAP UX strategy. Some 
believe that UX is simply a lot of colors and fancy components. However, this 
simply is not true. Great UX can have a tremendous impact on a business’ success. 
With great user experience you can:
 Achieve productivity and work more efficiently.
 Increase user adoption and decrease errors.
 Save on training costs.
To achieve true design innovation, the following three concepts should be kept in 
mind:
 Business  
Understanding the business requirements.
 Technology  
Exploring and understanding the feasibility or technology.
 Human values  
Understanding what usability and desirability mean to your users.
As previously mentioned, only once these three components are combined 
together, will you achieve the design innovation.
In the same vein, in the next section, we’ll discuss how SAP’s UX design services 
have been implemented into SAP Fiori UX design principles.
1.1.2
SAP Fiori UX Design Principles
SAP Fiori design principles ensure that all business applications follow the UX 
design services developed by SAP. The following are five design principles that 
make up the SAP Fiori UX paradigm. These five design principals together create 
a beautiful UX that is consistent, regardless of your role in the organization or 
screen:
 Role-based  
SAP broke down a number of SAP transactions and turned them into easy-to-
use apps that are task-based and tailored to show only the most relevant infor-
mation that the user needs.
 Responsive  
SAP made sure that SAP Fiori UX worked seamlessly to facilitate consistent user 

Introduction to SAP Fiori
1
30
experience across all devices such as phones, tablets, and desktops; and sup-
ports multiple technologies such as iOS, Android, Windows, and Mac.
 Simple  
SAP Fiori UX is focused on delivering simple, intuitive user experience to 
match consumer demands. SAP used a simple 1-1-3 (i.e. one user, one use case, 
and three screens) scenario to make SAP Fiori apps easy to use and learn.
 Coherent  
SAP made sure all the SAP Fiori apps have a similar look and feel by establish-
ing best practices for design.
 Delightful  
SAP Fiori is designed to have a low barrier of adoption, and provide users with 
apps that enable them to be proactive by providing an assistant.
Having clearly defined design principles ensures quality SAP Fiori apps over a 
multitude of software. With this brief introduction, we’ll now turn our attention 
to the architectural components and integration technologies found in SAP Fiori.
1.2
Architecture and Integration
In this section, we’ll discuss the high level architecture that all SAP Fiori apps fol-
low. Figure 1.1 shows different components of the architecture.
From this bird’s eye view, we see that the SAP Fiori system landscape is com-
prised of a client/browser layer, reverse proxy, ABAP servers, SAP HANA 
Extended Application Services (XS), and a backend database. Each layer has a 
clearly defined purpose, and are bundled with components that help fulfill that 
purpose. The following defines each of these layers:
 Client/browser  
The client layer is where the actual consumption of SAP Fiori apps takes place. 
SAP Fiori Launchpad is the entry point to all SAP Fiori apps on mobile, desktop, 
or tablet (see Section 1.2.1).
 Reverse proxy  
A reverse proxy is a type of proxy server that typically sits behind the firewall 
in a private network and directs client requests to the appropriate backend 
server. The reverse proxy provides an additional level of security and control 
to ensure the smooth flow of network traffic between clients and servers. SAP 

Architecture and Integration
1.2
31
recommends using the SAP Web Dispatcher as a reverse proxy server (see Sec-
tion 1.2.2). The SAP Web Dispatcher is only required as a reverse proxy for 
analytical and fact sheet apps.
 ABAP servers  
The ABAP frontend server is recommended for all app types. The ABAP front-
end server contains the UI layer and infrastructure components, as well as SAP 
Gateway with OData enablement. The ABAP backend server contains the back-
end business logic and search models for fact sheet apps.
 SAP HANA XS  
SAP HANA XS is only required for analytical apps. SAP HANA XS replicates data 
from the backend server and remodels it using virtual data models (VDM).
 Backend server  
The backend database can be any database for transactional apps or an SAP 
HANA database for fact sheet and analytical apps.
Figure 1.1  SAP Fiori Architecture
Now that you have a general idea of SAP Fiori’s architecture and system land-
scape, we’ll look more closely at some of the key architectural features, as well as 
explore how the different layers of SAP Fiori communicate with one another.
any database/SAP HANA
SAP HANA XS Engine
ABAP Backend Server
ABAP Frontend Server
Search
Model 
Client/Browser
Reverse Proxy
Data Layer
SAP Web Dispatcher 
SAPUI5

Introduction to SAP Fiori
1
32
1.2.1
SAP Fiori Launchpad
SAP Fiori Launchpad is the entry point for all SAP Fiori applications. It is a role-
based, personalized platform, with real-time capabilities. The beauty of SAP Fiori 
Launchpad is that it is designed according to a very simple and intuitive user 
experience, and doesn’t require a lot of training.
Figure 1.2 shows the SAP Fiori Launchpad homepage with a variety of apps. 
Users can personalize the homepage by managing groups or apps.
Figure 1.2  SAP Fiori Launchpad Homepage
With SAP Fiori Launchpad, users will have access to only those apps or groups to 
which content administrators assign them. Tiles are divided into groups 1 (see 
Figure 1.2), and users have access to create, delete, or arrange these groups. Using 
the Tile Catalog 2, users can also add tiles to these groups. Content administra-
tors can set the tiles/apps to display automatically in the homepage 3. In addi-
tion, users can add, remove, rename, and move tiles from the homepage using 
the Personalize icon 
 4. From SAP Fiori Launchpad, you cannot only launch 
SAP Fiori apps, but also SAPUI5 custom apps, Web Dynpro ABAP, or any URL.
Groups
Tile Catalog
Search 
Tiles/Apps
Theming
Personalize

Architecture and Integration
1.2
33
Search is another key capability of SAP Fiori Launchpad 5. Using this feature, 
users can view recent searches, recent apps used, and any apps found. Addition-
ally, users can directly open a fact sheet app. For example, a user can search for a 
sales order number in SAP Fiori Launchpad and open the Sales Order fact sheet 
app to get answers immediately. In Chapter 5, we’ll discuss the implementation 
of search functionality in fact sheet apps.
SAP Fiori Launchpad also allows users to create their own custom themes using 
the UI Theme Designer, and apply these theme to SAP Fiori Launchpad 6. In 
Appendix B, we’ll walk through the step-by-step instructions on how to create a 
custom theme using this tool.
Another important aspect of SAP Fiori Launchpad is its responsiveness. SAP Fiori 
Launchpad enables cross-device UX for users. This feature makes it so that visual 
design adapts automatically to the respective screen size, be it desktop, mobile 
phones, or tablets. SAP provides a native app for SAP Fiori Launchpad called SAP 
Fiori Client that enables this. More information on SAP Fiori Client can be found 
in Appendix A.
Next, we will discuss the different deployment options for SAP Fiori Launchpad.
Deployment Options
There are a number of deployment options available to deploy SAP Fiori Launch-
pad. Depending on your existing landscape and the types of apps you would like 
to implement, you can decide which deployment option is right for you (see Fig-
ure 1.3).
As shown in Figure 1.3, you can deploy SAP Fiori Launchpad on the following 
systems:
 ABAP frontend server in combination with SAP Gateway
This is the traditional implementation, and is recommended for customers
without an SAP Enterprise Portal implementation. It the only platform that
supports all the SAP Fiori app types (transactional, fact sheet, and analytical
apps).
 SAP Enterprise Portal
This deployment is recommended for customers who would want to reuse their
existing SAP Enterprise Portal and run SAP Fiori Launchpad. Technically, it is
just another framework page which enables the use of SAP Fiori Launchpad.

Introduction to SAP Fiori
1
34
 SAP HANA Cloud Platform  
You can now run SAP Fiori Launchpad on SAP HANA Cloud Platform (SAP 
HCP) as a Software-as-a-Service (SaaS) or on-premise. Keep in mind that this 
deployment doesn’t support all kinds of SAP Fiori apps.
Figure 1.3  SAP Fiori Launchpad Deployments
 
More Information
For more information on the different SAP Fiori Launchpad deployments as well as how 
to implement SAP Fiori Launchpad, check out the SAP PRESS E-Bite, Implementing SAP
Fiori Launchpad, by Tamas Szirtes and Aviad Rivlin, at www.sap-press.com/3944.
Features
In this section, we’ll walk you through some of the basic features in SAP Fiori 
Launchpad. The following steps walk through the different features and uses of 
SAP Fiori Launchpad. To begin, let’s look at adding, removing, and personalizing 
the SAP Fiori Launchpad homepage:
1. Login to SAP Fiori Launchpad, click 
, and select Personalize Home Page
(see Figure 1.4).
Adapters
Platforms
SAP Fiori Launchpad
Client
ABAP
SAP
Enterprise
Portal
SAP HANA
Cloud
Platform 
or
or

Architecture and Integration
1.2
35
Figure 1.4  Personalize
2. To remove a tile, click on the tile and select Remove (see Figure 1.5).
Figure 1.5  Remove Apps
3. The Tile Catalog is the location where you will see all the SAP Fiori apps that 
you have access to. To add a tile from the tile catalog click + (see Figure 1.6).

Introduction to SAP Fiori
1
36
Figure 1.6  Add Tiles
4. Click + on the app and then select the group where you want to add the app. 
Click OK (see Figure 1.7).
Figure 1.7  Tile Catalog
5. Click 
 to go back to homepage.

Architecture and Integration
1.2
37
Next, let’s create a new group and organize the tiles. Proceed with the following 
steps:
1. From the homepage, and click Add Group (see Figure 1.8).
Figure 1.8  Add Group
2. Enter a group name and press (Enter) (see Figure 1.9).
Figure 1.9  Group Name
3. Drag and drop apps from another group (see Figure 1.10) or add a new app 
from the catalog by clicking +.
Figure 1.10  Drag and Drop

Introduction to SAP Fiori
1
38
You can also search apps or business objects. To do so, proceed as follows:
1. Enter the search term and click 
 (see Figure 1.11).
Figure 1.11  Search
2. Check the search results for apps and business objects, as shown in Figure 1.12.
Figure 1.12  Search Output

Architecture and Integration
1.2
39
Users can personalize SAP Fiori Launchpad by changing the theme. To do so, per-
form the following:
1. Click 
 and select Personalize Home Page (see Figure 1.13).
Figure 1.13  User Preferences
2. In the popup window, click Theme (see Figure 1.14).
Figure 1.14  Themes
3. Select a theme and click Save (see Figure 1.15).

Introduction to SAP Fiori
1
40
Figure 1.15  Select Theme
 
Keyboard Shortcuts
The following keyboard shortcuts can help you more easily navigate SAP Fiori Launchpad:
 (Alt) + (C)  
To open the tile catalog.
 (Alt) + (H)  
To go back to the homepage.
 (Alt) + (S)  
To search or filter information.
 (Alt) + (U)  
To access User Preferences.
We hope that this quick walkthrough of SAP Fiori Launchpad helped you to bet-
ter understand its features. Next, we’ll dive into the SAP Web Dispatcher and its 
role as a reverse proxy.
1.2.2
SAP Web Dispatcher
Depending on the type of SAP Fiori app you are running (transactional, fact sheet, 
or analytical), the queries are directed by the SAP Web Dispatcher from the cli-
ent/browser to the ABAP frontend or SAP HANA XS. It is not mandatory to use 
the SAP Web Dispatcher if you are implementing transactional apps, however for 
analytical apps and fact sheet apps you need to configure the SAP Web Dis-
patcher.

Architecture and Integration
1.2
41
When a user runs an analytical app, requests are forwarded from the client to the 
SAP HANA XS engine by the SAP Web Dispatcher. Similarly, when a user runs a 
fact sheet app, requests are forwarded from the client to the ABAP backend sys-
tem by the SAP Web Dispatcher. The SAP Web Dispatcher may act either as a sim-
ple forwarding service or actively participate in the exchange between a client 
and server.
The SAP Web Dispatcher is capable of intercepting, inspecting, and interacting 
with requests and responses. Interacting with requests and responses enables 
more advanced traffic management services such as application layer security, 
web acceleration, page routing, and secure remote access. The SAP Web Dis-
patcher also provides the ability to direct requests based on a wide variety of 
parameters such as user device, location, network conditions, and even the time 
of day.
Common uses for the SAP Web Dispatcher include:
 Load balancing  
The SAP Web Dispatcher is most commonly used to provide load balancing ser-
vices for scalability and availability. Increasingly, the SAP Web Dispatcher is 
also used as a strategic point in the network to enforce web application security
through web application firewalls, application delivery firewalls, and deep con-
tent inspection to mitigate data leaks. The SAP Web Dispatcher can also be 
deployed to offload services from applications as a way to improve perfor-
mance through acceleration, intelligent, and caching.
 Web acceleration  
The SAP Web Dispatcher can compress inbound and outbound data, as well as 
cache commonly requested content, both of which speed up the flow of traffic 
between the browser and the ABAP servers or SAP HANA XS. The SAP Web 
Dispatcher can also perform additional tasks such as SSL encryption to take the 
load off of your web servers, thereby boosting their performance.
 Security and anonymity  
By intercepting requests headed for your backend servers, the SAP Web Dis-
patcher protects the request identities and acts as an additional defense against 
security attacks. It also ensures that multiple servers can be accessed from a sin-
gle record locater or URL, regardless of the structure of your local area network.

Introduction to SAP Fiori
1
42
1.2.3
Communication Channels
It is vital that different layers in SAP Fiori are able to communicate with one 
another. In this section, we’ll discuss how data is transferred between the client, 
ABAP frontend, ABAP backend, and SAP HANA XS. In doing so, we’ll highlight 
the different communication channels and protocols that are implemented in the 
SAP Fiori system landscape. Figure 1.16 shows the high level SAP Fiori architec-
ture with the communication channels and protocols.
Figure 1.16  Communication Channels
As shown in Figure 1.16, the communication type between the client and the SAP 
Web Dispatcher 1 depends on the type of application that the user is running in 
the client/browser or the type of task that the user is performing. For example, 
when a user runs a fact sheet app, the client sends an INA search request.
The communication between the SAP Web Dispatcher and the ABAP servers 2
depends on the type of request the SAP Web Dispatcher forwards from the client 
to the ABAP servers:
any database/SAP HANA
SAP HANA XS Engine
ABAP Backend Server
ABAP Frontend Server
Search
Model 
Client/Browser
HTTPS (HTML/ODATA)
SAP Web Dispatcher 
SAPUI5
Trusted RFC (OData)
HTTPS
(INA Search
Protocol)
HTTPS (HTML/ODATA/INA)
HTTPS (OData Requests)

Architecture and Integration
1.2
43
 ABAP frontend server (transactional apps)
 HTML requests
 OData requests
 ABAP backend server (fact sheet apps only)
 INA search requests
A trusted RFC connection is established for communication between the ABAP 
frontend server and the ABAP backend server 3. Data and services are provided 
from the ABAP backend server to the ABAP frontend server using OData services.
Communication between the SAP Web Dispatcher and SAP HANA XS 4 only hap-
pens when a user runs analytical apps. The SAP Web Dispatcher forwards the 
OData request from the client to SAP HANA XS.
Understanding how each of these components speak with one another is useful 
when errors or issues arise.
1.2.4
SAP Fiori App-Supported Browsers and OS
In this section, we will list the browser versions (Internet Explorer [IE], Google 
Chrome, Safari, etc.) and OS versions (Windows, Apple, Android, and Blackberry) 
that support SAP Fiori apps.
Windows Support
Table 1.1 shows the Windows mobile devices and browsers that support SAP 
Fiori apps.
Table 1.2 shows the Windows desktops and browsers that support SAP Fiori 
apps.
OS Type
OS Version
SAP Fiori Client
Microsoft Browser
Phone
8.1 GDR1
Latest version
IE 11.x
10
Latest version
Edge
Table 1.1  Windows Mobile 

Introduction to SAP Fiori
1
44
 
Internet Explorer 9
IE9 is not supported for all SAP Fiori apps.
Apple Support
Table 1.3 shows the Apple iOS devices and browsers that support SAP Fiori apps.
Table 1.4 shows the Apple Mac OSX and browsers that support SAP Fiori apps.
OS Type
OS Version
Microsoft 
Browser
Google Chrome Mozilla Firefox
Hybrid (Touch-
enabled desk-
tops)
8.1
IE 11.x
–
–
10
Edge
–
–
Desktop
8
8.1
IE 10.x
IE 11.x
Latest version
Latest rapid 
release cycle 
(RRC)
Latest extended 
support release 
(ESR)
10
Edge
Latest version
Latest RRC
Latest ESR
7
IE 9.x
IE 11.x
Latest version
Latest RRC
Latest ESR
Table 1.2  Windows Desktop 
OS Type
OS Version
SAP Fiori Client
Apple Safari
iPhone 4s or newer
8.x
Latest version
Latest version
iPad 2 or newer
9.x
Latest version
Latest version
Table 1.3  Apple iPhone/iPad 
OS Type
OS Version
SAP Fiori Client
Apple Safari
Desktop
OSX 10.9
OSX 10.10
OSX 10.11
Latest version
Latest Version
Table 1.4  Mac 

Types of SAP Fiori Apps
1.3
45
Android Support
Table 1.5 shows the Android devices and browsers that support SAP Fiori apps.
 Android Devices
The following Android devices have been tested by SAP:
 Phone 
Samsung Galaxy S4, S5, S6
 Tablet 
Samsung Galaxy Tab Series Pro, Samsung Galaxy Tab Series Pro S, Google Nexus
Blackberry Support
Table 1.6 shows the Blackberry devices and browsers that support SAP Fiori apps.
Having looked at the supported browsers and OS, next we’ll begin discussing the 
different types of SAP Fiori apps.
1.3
Types of SAP Fiori Apps
Whether you want to create or track purchase orders, keep an eye on new busi-
ness opportunities, or simply display your invoices, SAP Fiori apps help you 
easily handle business tasks. As of the writing of this book (November 2015), 
there three types of applications that compose the SAP Fiori portfolio: transac-
OS Type
OS Version
SAP Fiori Client Android 
Browser
Google Chrome
Phone/Tablet
4.3–5.x
Latest version
Latest version
Latest version
Table 1.5  Andriod Phone/Tablets 
OS Type
OS Version
Blackberry Browser
Phone Z10/Z30
10.x
10.x
Table 1.6  Blackberry Phone 

Introduction to SAP Fiori
1
46
tional, fact sheet, and analytical apps. Before we jump into the details of each of 
these app types, we’ll highlight the SAP Fiori journey of the individaul app 
developments (see Figure 1.17).
Figure 1.17  SAP Fiori Timeline
It all started in May 2013 (during the SAP SAPPHIRE event). It was at this time 
that SAP released the first 25 SAP Fiori apps, which were transactional apps that 
focused on self-service scenarios (ESS and MSS). From there, SAP began rapidly 
developing new apps, and in November 2013, SAP introduced two new app 
types: fact sheet and analytical apps. Further in this development, SAP contin-
ued to expand the scope of apps from SAP ERP to any database to SAP HANA 
databases. In May 2014, SAP introduced SAP Fiori apps for different LOBs and 
industries.
Table 1.7 shows the shipments with the release dates and the number of apps SAP 
delivered during that time. This clearly shows that the SAP Fiori team is rapidly 
releasing more and more apps every quarter.
Shipments
Release Month
No. of Apps (Cumulative)
1
May 2013
25
2
Nov 2013
226
3
Feb 2014
236
4
May 2014
325
5
July 2014
383
Table 1.7  SAP Fiori Shipments 
1
2
3
4
5
6
7
May 14, 2013
Nov 29, 2013
Feb 26, 2014
May 19, 2014
July 28, 2014
Oct 22, 2014
Jan 29, 2015
Self-service scenarios
for employees, managers,
and selected business tasks
Enhanced scope to
more complex business 
tasks; SAP Fiori Launchpad
Consolidation and
extensibility for
transactional apps,
and selected new areas
Expanding industry
coverage and existing 
roles
Continuing core
areas, additional
industry coverage; 
additional roles
Continuing core
areas, starting industry
coverage, increasing
focus for SAP Business
Suite on SAP HANA
Expanding existing
roles, focus for 
SAP Business
Suite on SAP HANA

Types of SAP Fiori Apps
1.3
47
As of April 2015, SAP released 533 SAP Fiori apps in total. Table 1.8 shows a 
breakdown of the SAP Fiori apps by app type. Out of 533 SAP Fiori apps, 331 
runs on the SAP HANA database only.
As SAP Fiori apps continued to be developed, new business requirements arose. 
Soon, businesses were looking for personalized key performance indicators (KPI)
based on user roles. To address this, SAP developed SAP Fiori apps for different 
roles; for example, cash managers, transportation managers, marketing execu-
tives, MRP controllers, etc.
This further enhanced SAP’s UX strategy and SAP Fiori’s customizability. For 
example, transportation managers could now view the transportation costs for 
the year to date, or view the average percentage utilization of weight or volume 
by transportation orders created to date. Similarly, a marketing manager role 
enabled marketing managers to plan their yearly budget using the My Marketing 
Budget app, and provided them with all initiatives that are ready for release using 
the Release Campaigns app.
Similarly, Table 1.9 shows an overview of the different SAP Fiori user roles across 
industries and LOBs.
6
Oct 2014
484
7
Jan 2015
495
App Types
No. of Apps
Transactional
202
Fact sheet
124
Analytical
207
Total
533
Table 1.8  SAP Fiori Wave 8 
Shipments
Release Month
No. of Apps (Cumulative)
Table 1.7  SAP Fiori Shipments (Cont.)

Introduction to SAP Fiori
1
48
This historical overview provides an outlook for what one can expect for future 
development trends with SAP Fiori apps. The next three section will explore all 
three types of apps.
1.3.1
Transactional Apps
Transactional apps enable users to perform all kinds of transactional activities like 
creating, changing, or approving. These activities are accomplished with guided 
navigation. Figure 1.18 shows the high level system landscape for transactional 
apps.
Industries
Cross LOB
Retail
 Master data specialist
 Category manager
 Promotion specialist
 Store associate
 Global trader
 Assortment planner
 Allocation manager
 Manager
 MDG expert
 ILM archiving expert
 Security manager
 Data aging expert
 Employee
 Compliance manager
 TDMS expert
Oil and gas
 Hydrocarbon accountant
 Deferment analyst
 Field operator
Insurance
 Claims specialist
Higher education
 Student/applicant
Public sector
 Central budget specialist
Banking
 Bank account manger
 Bank mid-office employee
 Bank back office employee
Table 1.9  SAP Fiori User Roles for Industries and LOBs 

Types of SAP Fiori Apps
1.3
49
Figure 1.18  Transactional Apps Architecture
When a user launches a transactional app, the launch request is sent from the cli-
ent/browser to the ABAP frontend server. Communication between the client 
and the ABAP frontend server happens via OData HTTP/HTTPS protocols.
The ABAP frontend server contains the UI layers, which house the following com-
ponents:
 Product-specific UI components
 Governance, Risk and Compliance (GRC)
 Customer Relationship Management (CRM)
 Supply Chain Management (SCM)
 Etc.
ABAP Frontend Server
Product-specific UI components
Infrastructure
ABAP Backend Server
SAP Business Suite
any database/SAP HANA
HTTPS (HTML/ODATA)
Trusted RFC (OData)

Introduction to SAP Fiori
1
50
 Infrastructure components
 Central UI components
 SAPUI5 control library
 SAP Fiori Launchpad
 SAP Gateway with OData enablement
Frontend components from the ABAP frontend server connect to the business 
logic in the ABAP backend server through a trusted RFC connection. The under-
lying database for a transactional app can be any database or an SAP HANA data-
base. SAP recommends SAP HANA for the best performance.
In this book, we’ll discuss the implementation of transactional apps in Chapter 4, 
and the creation/extension process in Chapter 9.
1.3.2
Fact Sheet Apps
Fact sheet apps enable users to view essential contextual information or a 360 
degree view of a specific central objects used in their business operations. You 
can call fact sheet apps from the search results displayed in SAP Fiori Launchpad, 
or from other fact sheets, or from transactional and analytical apps. For example, 
users can drilldown from a fact sheet app to a related business partner or master 
data. Figure 1.19 shows the high level system landscape for fact sheet apps.
When a user launches a fact sheet app, the launch request is sent from the client/
browser to the SAP Web Dispatcher (reverse proxy). Communication between 
the client and the SAP Web Dispatcher happens via OData HTTP/HTTPS proto-
cols. The SAP Web Dispatcher sends the INA search protocol requests to the 
search models in the ABAP backend server.
The ABAP frontend contains product-specific UI components and infrastructure 
components. The ABAP backend server comprises the SAP Business Suite with 
the business logic, search models, OData services, and model provider. Fact sheet 
apps run only on an SAP HANA database and require an ABAP stack.
In this book, we’ll discuss the implementation of fact sheet apps in Chapter 5, and 
the creation/extension process in Chapter 10.

Types of SAP Fiori Apps
1.3
51
Figure 1.19  Fact Sheet Apps Architecture
1.3.3
Analytical Apps
Analytical apps provide insight into business information, allowing users to ana-
lyze and evaluate strategic or operational KPIs in real-time on a large volume of 
data in a simplified frontend for enterprise control. These types of apps combine 
the data and analytical power of SAP HANA with the integration and interface 
components of SAP Business Suite. Figure 1.20 shows the high level system land-
scape for analytical apps.
ABAP Frontend Server
Product-specific UI components
Infrastructure
ABAP Backend Server
SAP Business Suite
SAP HANA
HTTPS (HTML/ODATA)
Trusted RFC (OData)
Search
Model
SAP Web Dispatcher

Introduction to SAP Fiori
1
52
Figure 1.20  Analytical Apps Architecture
When a user launches an analytical app, the launch request is sent from the client/
browser to the SAP Web Dispatcher. The SAP Web Dispatcher sends the OData 
calls to the ABAP frontend server or SAP HANA XS. As with transactional and fact 
sheet apps, the ABAP frontend for analytical apps contains product-specific UI 
and infrastructure components. The ABAP backend server comprises the SAP 
Business Suite with the business logic. In addition, SAP HANA XS also contains 
the following:
 SAP Fiori app content for the different SAP Business Suite products
 A KPI modeling framework
ABAP Frontend Server
Product-specific UI components
Infrastructure
ABAP Backend Server
SAP Business Suite
SAP HANA
HTTPS (HTML/ODATA)
Trusted RFC (OData)
SAP Web Dispatcher
SAP Fiori app content
VDM reuse content
SAP HANA XS
HTTPS (ODATA)

Related SAP Technologies
1.4
53
 A generic drill-down app
 VDM reuse content
Analytical apps run only on an SAP HANA database and use VDMs.
In this book, we’ll discuss the implementation of analytical apps in Chapter 6, and 
the creation/extension process in Chapter 11.
Our main focus in this book is to demonstrate how to implement, create, custom-
ize, extend, and develop these three app types. In the next section, we’ll explore 
the related SAP technologies that will allow us to perform these functions.
1.4
Related SAP Technologies
In this section, we’ll introduce you to all the technologies that are related to SAP 
Fiori. These include SAPUI5, SAP Gateway and OData, and SAP HANA XS.
1.4.1
SAPUI5
SAPUI5, the UI development toolkit for HTML5, is a JavaScript UI control library
that developers can use to build business applications that run on any device, pro-
viding a lightweight programming model for desktop and mobile applications. All 
the SAP Fiori UIs are built using SAPUI5 technology, so it is important to under-
stand the basic concepts of SAPUI5, and the tools that support the development 
of SAP Fiori apps. The following list describes the key features of SAPUI5:
 SAPUI5 APIs are designed to be easily consumed and used
 SAPUI5 supports client side features based on JavaScript
 Custom controls or UI components can be easily extended
 Powerful theming tools which allows users to change the theme for custom 
branding based on CSS
 Provides AJAX capabilities and can be used with other standard JavaScript 
libraries
 Uses the popular jQuery library as a foundation
 High performance; fully supports SAP product standards
 Based on open standards like OpenAJAX, JavaScript, CSS, HTML5, etc.

Introduction to SAP Fiori
1
54
With that overview of SAPUI5’s benefits, let’s now turn our attention to its archi-
tecture.
Architecture
Figure 1.21 shows the high level architecture of SAPUI5 on the right and the SAP 
Fiori landscape with SAPUI5 on the left. SAPUI5 is primarily comprised of two 
components: the SAPUI5 library and the SAPUI5 core. The SAPUI5 library con-
tains the themes and controls for both mobile and desktop. The SAPUI5 core 
includes the following:
 Core, base, and model modules
 Dependency/class-loader to load control libraries
 Render manager which creates HTML strings for the represented controls
 SAP jQuery and jQuery plug-ins
Figure 1.21  SAPUI5 Architecture
Figure 1.22 shows a simplified SAPUI5 architecture with the Model-View-Con-
troller (MVC) design pattern, and the connectivity between the backend systems 
and browsers. SAPUI5 now comes automatically with the following systems:
 SAP NetWeaver AS ABAP
 SAP NetWeaver AS Java
 SAP HCP
 SAP HANA XS engine
any database/SAP HANA
ABAP Backend Server
ABAP Frontend Server
Search
Model 
Client/Browser
Reverse Proxy
SAP Web Dispatcher 
SAPUI5
HTTPS (HTML/ODATA/INA)
HTTPS (OData Request)
HTTPS (INA Search
Protocol)
HTTPS (HTML/ODATA)
Trusted RFC (OData)
SAPUI5 Libraries
SAPUI5 Core
Themes
Controls
UI
SAP jQuery Plug-ins
jQuery
jQuery.UI
jQuery
Mobile
Mobile
Desktop
Mobile
Desktop
Data
Binding 
Control
Base 
Render
Manager 
Event
Resources
Device
Utils
Logger
SAP HANA XS Engine

Related SAP Technologies
1.4
55
Figure 1.22  SAPUI5 Client Server Architecture
SAPUI5 works best based on OData-enriched by metadata exposed via OData 
annotations. For this reason, SAP recommends SAP Gateway (OData service) to 
integrate the application layer and SAP backend systems. You can use JSON or 
XML format to connect to non-SAP data sources (any database).
MVC Concept
Model-View-Controller (MVC) is a fundamental design pattern used to separate UI 
logic from business logic. It was introduced by Trygve Reenskaug, and is one of 
the first software architectural pattern for implementing UIs.
This concept divides a given software application into three interconnected parts, 
separating the internal representation of information from the ways that informa-
tion is accepted from the user. You will see MVC design concepts in most of the 
SAP Fiori applications when you create or extend an app. Figure 1.23 shows the 
MVC pattern which proposes three main components or objects to be used in 
software development:
 Model  
A model represents the underlying, logical structure of data in a software appli-
cation and the high level classes associated with it. This object model does not 
contain any information about the UI.
SAP
NetWeaver
AS ABAP
SAP
NetWeaver
AS Java
SAP HANA
Cloud
Platform
SAP HANA
XS
or
or
or
SAP
Gateway
SAP Backend
Web Browser
Application Server
Application Client
SAPUI5 Runtime Libraries
Views with
sap.ui.commons lib
Models JSON, XML,
or OData
Views with sap.mlib
Controllers
ODATA
DB

Introduction to SAP Fiori
1
56
 View  
A view is a collection of classes representing the different elements in a UI. This 
is the visual part of your application, i.e. all of the things the user can see and 
respond to on the screen, such as buttons, list boxes, etc. Views can be defined 
using:
 XML (sap.ui.core.mvc.XMLView)
 JavaScript (sap.ui.core.mvc.JSView)
 JSON (sap.ui.core.mvc.JSONView)
 Declarative HTML (sap.ui.core.mvc.HTMLView)
 Controller  
A controller represents the classes connecting the model and the view. When a 
user clicks on a button or selects an item from the list box, an event is triggered. 
The controller then handles the event and communicates between the classes in 
the model and view.
Figure 1.23  MVC Design Concept
In addition to these concepts, SAPUI5 also supports data binding. SAPUI5 data 
binding supports three model implementations: JSON, an XML model, and an 
OData model. Put simply, SAPUI5 data binding is the process by which the prop-
erties in data sources/models are bound to properties in the SAPUI5 control or 
views. This involves a two way data binding: any change in the property values of 
a model will automatically be reflected in the views; similarly, any change in the 
values of views will automatically be updated in the model.
Views with
sap.libraries 
Controllers
Models JSON, XML,
or OData 
Implementation
Interface
Data Binding
Implementation

Related SAP Technologies
1.4
57
You can create or extend SAP Fiori apps using the SAP Web IDE. You will see the 
MVC design concept while working with SAP Fiori apps in the SAP Web IDE. 
Next, we will show you how to setup the SAP Web IDE local version.
Installing the SAP Web IDE
The SAP Web IDE is a cloud-based development environment that enables devel-
opers to build new user experiences simply with templates, wizards, and WYSI-
WYG layout editors. In addition, SAP offers a local trial version of the SAP Web 
IDE where you can experience the features/options that are available to create or 
extend SAP Fiori apps. We will be using this tool in Chapter 8 and Chapter 9.
SAP provided the SAP Web IDE with full functionalities as part of SAP HCP. In 
this section, we will teach you how to install the SAP Web IDE local trial version.
 Application Templates
Many best practices come for free using the SAP Web IDE with application templates.
Proceed with the following steps:
1. Log on to the SAP store: https://store.sap.com.
2. Search for “SAP Web IDE Local Installation” and press (Enter) (see Figure 1.24).
Figure 1.24  Search

Introduction to SAP Fiori
1
58
3. Click Trial Version.
4. Provide the necessary details, select the terms and conditions checkbox, and 
then click Submit (see Figure 1.25).
Figure 1.25  Terms and Agreements
5. Click ok to send an email with the links to download.
6. Download SAP_Web_IDE_Local_Inst.zip and extract the folders to the C: drive 
(see Figure 1.26).
Figure 1.26  SAP Web IDE File
7. Next, download the Orion application server:
http://www.eclipse.org/downloads/download.php?file=/orion/drops/ 
R-5.0-201402262325/eclipse-orion-5.0- win32.win32.x86_64.zip

Related SAP Technologies
1.4
59
8.
Create a new folder “SAPWebIDE” in the C: drive (see Figure 1.27).
Figure 1.27  SAP Web IDE Folder
9.
Extract the downloaded Orion application files to c:\SAPWebIDE.
10. Download the standalone p2 director:
http://www.eclipse.org/downloads/download.php?file=/tools/buckminster/ 
products/ director_latest.zip&r=1
11. Extract the downloaded p2 director files to c:\SAPWebIDE.
You screen should now look similar to Figure 1.28.
Figure 1.28  Extracted Setup Files
12. In the command shell enter cd /d C:\SAPWebIDE\director and then press 
(Enter) (see Figure 1.29).
Figure 1.29  CMD

Introduction to SAP Fiori
1
60
13. Enter Listing 1.1 in CMD to start the installation.
director -repository jar:file:/C:/SAP_Web_IDE_Local_Inst/ 
    updatesite.zip!/ 
  -installIUcom.sap.webide.orionplugin.feature. 
     feature.group  
  -destination c:\SAPWebIDE\eclipse
Listing 1.1  CMD Listing
14. Next, you need to configure the connection to your remote system. Create a 
new text file with the details in Listing 1.2.
Description=<mysystem> description 
Type=HTTP 
TrustAll=true 
Authentication=NoAuthentication 
User:<UserName> 
Password:<Password> 
Name=<mysystem> 
ProxyType=Internet 
URL=https\://<host>\:<port> 
WebIDEUsage=odata_abap,odata_gen,ui5_execute_abap,dev_abap, 
bsp_execute_abap,plugin_repository,odata_xs 
WebIDESystem=<mysystem> 
WebIDEEnabled=true 
sap-client=<SAP client from the ABAP system> 
Listing 1.2  Configure Connection
Your file should now look something similar to Figure 1.30.
Figure 1.30  SAP HANA Connection
15. Save the file you created in the previous step to C:\SAPWebIDE\eclipse\config_
master\service.destinations\destinations.

Related SAP Technologies
1.4
61
You have successfully installed the SAP Web IDE local version! Next, we’ll show 
you how to start the SAP Web IDE. Proceed with the following steps:
1. Start the Orion application server by running Orion.exe from C:\SAPWebIDE\
eclipse.
2. From your browser, run http://localhost:8080/webide/index.html. You should now 
see the SAP Web IDE (see Figure 1.31).
Figure 1.31  SAP Web IDE
Create an SAPUI5 Application
Next, we will create a very simple SAPUI5 application using the SAP Web IDE to 
show the simplicity involved. Proceed with the following steps:
1. Click New Project from Template (see Figure 1.32).
Figure 1.32  New Project

Introduction to SAP Fiori
1
62
2. Select SAPUI5 Application Project and click Next (see Figure 1.33).
Figure 1.33  Template Selection
3. Enter a Project Name and click Next (see Figure 1.34).
Figure 1.34  Basic Information
4. Select a View Type, enter a View Name, and then click Next (see Figure 1.35).

Related SAP Technologies
1.4
63
Figure 1.35  Template Customization
5. Click Finish to create the project (see Figure 1.36).
Figure 1.36  Confirmation

Introduction to SAP Fiori
1
64
6. Expand the new project folder and double click on the Main.view.xml.
7. Change the tile field to “Welcome to the world of SAP Fiori” (see Figure 1.37).
Figure 1.37  Title
Before you run this app, we want to highlight some of the code that is automati-
cally generated.
The script tag is where SAPUI5 is bootstrapped. Double click on Index.html to 
view the bootstrap script. The script tag has an ID “sap-ui-bootstrapped”. The fol-
lowing is a list of parameters that can be passed in the script tag (see Figure 1.38):
 data-sap-ui-libs  
This contains the libraries that you want to load.
 data-sap-ui-xx-bindingSyntax  
This is for extending the syntax for the calculated fields in property bindings.
 data-sap-ui-resourceroots  
This is the path/location where the resources or artifacts can be found.
 data-sap-ui-theme  
This is the name of the theme that you want to use.
To finally run the script, click Save and then click Run. The resulting screen is 
shown in Figure 1.39.

Related SAP Technologies
1.4
65
Figure 1.38  Bootstrap
Figure 1.39  Preview

Introduction to SAP Fiori
1
66
Congratulations, you’ve created your very first SAPUI5 app!
 
More Information
For more information on building applications using SAPUI5, check out the SAP PRESS 
book, Getting Started with SAPUI5, by Miroslav Antolovic, at www.sap-press.com/3565.
In Chapter 8, we’ll dig deeper into the SAP Web IDE, and walk you through the 
options available to create or extend an SAP Fiori app. Next, we’ll look at the use 
of OData via SAP Gateway for SAP Fiori apps.
1.4.2
OData and SAP Gateway
Facebook and eBay use it—so what is OData? And, how does SAP Gateway har-
ness it for SAP software and applications? In this section, we’ll look at answering 
these questions and more.
We’ll begin by discussing the concepts of OData and REST-based protocols. We’ll 
expand on the benefits of OData, and then look at the six constraints used to 
identify when an application is considered RESTful. Then, we’ll walk through 
how to consume an OData service with a simple example.
Finally, we wrap up the section by introducing SAP’s solution for harnessing the 
raw power of OData: SAP Gateway.
OData and REST
Open Data Protocol (OData) is a REST-based protocol used to expose and consume 
data on the web. It was built on web technologies such as HTTP, Atom Publishing 
protocol (AtomPub), XML, and JSON to provide access to information from a 
variety of applications. It was originally developed by Microsoft, and was 
designed to provide a RESTful API which is accessible by forming an appropriate 
Uniform Resource Identifier (URI) and assigning it to the corresponding HTTP 
header. Essentially, anything that is possible with the UI becomes part of the API. 
Put simply, OData is used to expose, access, and modify information from differ-
ent sources. The following are some of the advantages of using an OData protocol 
with SAP Gateway:
 Industry-standard protocols for creating and consuming data APIs
 Builds on core protocols like HTTP

Related SAP Technologies
1.4
67
 Lightweight
 Broad adoption by ecosystems
 Main drivers are SAP, Microsoft, and IBM
 Decouple backend and frontend
 Access by URI
 Multichannel
As we just mentioned, OData is a REST-based protocol. REST stands for Represen-
tational State Transfer. It was first introduced by Roy Thomas Fielding in his 2000 
PhD dissertation Architectural Styles and the Design of Network-based Software
Architectures. Architectural properties of REST are recognized by applying six 
constraints. An application is considered RESTful only when all the following 
constraints are satisfied:
 Constraint 1: Client server  
A uniform interface separates clients from servers. This kind of model allows 
the client and software components on the server to be developed inde-
pendently or replaced. For example, clients are not concerned about the data 
storage which remains in the server and servers are not concerned about the UI 
or user status, enabling servers to be more scalable.
 Constraint 2: Stateless  
The client-server communication is further constrained by no client context 
being stored on the server between requests, i.e. stateless interface requires the 
client to send requests with all the necessary information to the server, and a 
session client is held in the client.
 Constraint 3: Cacheable  
Response from the servers can be cacheable. Therefore, it is important to 
implicitly or explicitly define whether the responses from the server are cache-
able or not. Caching partially or completely eliminates client-server interac-
tions and further improves performance and scalability.
 Constraint 4: Layered system  
A client cannot ordinarily distinguish if it’s connected directly to an actual end-
point server or to an intermediate server. System scalability can be improved 
by enabling load balancing and by providing shared caches on the intermediate 
servers.

Introduction to SAP Fiori
1
68
 Constraint 5: Code on demand  
This is the only optional constraint of the REST architecture. In this constraint, 
servers can temporarily extend or customize the functionality of a client 
through the transfer of executable code at the request of the client; for exam-
ple, client side scripts such as JavaScript and compiled components such as Java 
applets.
 Constraint 6: Uniform interface  
This is the core constraint of the REST service. This constraint simplifies and 
decouples the architecture, enabling each part to evolve independently. There 
are four subconstraints for this uniform interface:
 Identification of resources: Individual resources are identified in requests. For 
example, when the server sends data from the database in HTML, JSON, or 
XML format, the server should provide the client with a representation of 
the resources.
 Manipulation of CRUD (Create, Read, Update, Delete): Manipulation of re-
sources through these representations must be provided.
 Self-descriptive messages: Each response from the server should include 
enough messages describing how to process the response.
 Hypermedia as the engine of application state (HATEOAS): State transitions or 
manipulations of server-side resources may only be performed through 
actions that are dynamically identified within the hypermedia by the server.
Just to put a face to what we have discussed, next we will show you how to con-
sume an OData service with a simple example. We will be using a sample OData 
service: http://services.odata.org/OData/Odata.svc/.
Proceed with the following steps:
1. View the OData service by running the URL in the browser http://services.odata. 
org/OData/Odata.svc/ (see Figure 1.40).
In this data model (see Figure 1.41), on left side you will see that the product 
is connected to a supplier and categories.
The boxes in Figure 1.41 are called entity sets or collections. You can define 
associations or relationship between the entity sets in the OData service. For 
example, a product can have 0 or 1 supplier. Similarly, a product can have 0 or 
1 category.

Related SAP Technologies
1.4
69
Figure 1.40  Sample Service
Figure 1.41  Visual Data Model
With an OData service, you not only have the capability to retrieve data from 
one of the entities, but also navigate from one entity to another. A supplier has 
exactly one navigation property (called products). This property also makes it 
possible to navigate from suppliers to products, i.e. you can view all the prod-
ucts that a particular supplier delivers.

Introduction to SAP Fiori
1
70
OData services makes it easy for the frontend application developer to con-
sume services and build applications. When we say consume, it typically implies 
retrieving data. However, an OData service is bi-directional (it can even update 
the data back to the database).
2. To continue with our OData example, to view all the suppliers from the back-
end database, run the following URL in the browser: http://services.odata.org/
OData/Odata.svc/Suppliers.
3. Now we know that there are two suppliers. Next, we want to find out all the 
products the first supplier delivers. To view this, we run the following URL in 
the browser: http://services.odata.org/OData/Odata.svc/Suppliers(0)/Products.
4. Similarly, if you want to the view all of the products in the food category 
(which is the first category) run the following URL in the browser: http://ser-
vices.odata.org/OData/Odata.svc/Categories(0)/Products.
We hope by now you understood how to consume data from the backend data-
base using an OData service. Next, we’ll look at using SAP Gateway for OData ser-
vices.
SAP Gateway
To harness the raw power of OData, SAP recommends using SAP Gateway. SAP 
Gateway is a technology that provides a simple way to connect devices, environ-
ments, and platforms to SAP applications using any programming language or 
model without the need for SAP knowledge, by leveraging REST services and 
OData protocols.
SAP Gateway offers the following capabilities:
 Supports any device, any platform
 Multiple object aggregation
 Filter and adaption based on client application requirements
 Generate structures
 CRUD operations
 Does not require coding; well-suited for non-ABAP developers
 No need for SAP knowledge

Related SAP Technologies
1.4
71
 Enables rapid prototyping
 Developers can create new SAP Gateway objects from existing SAP BW queries, 
BAPI, RFC, and Web Dynpro screens
SAP Fiori is based on SAP Gateway and OData services for its connectivity to the 
backend SAP Business Suite (see Figure 1.42).
Figure 1.42  SAP Fiori and SAP Gateway Architecture
Figure 1.42 shows the high level SAP Fiori architecture with SAP Gateway. It con-
sists of three layers:
 Consumer layer  
The consumer layer is the entry point to all SAP Fiori apps.
 SAP Gateway layer  
This layer holds the major functionalities and tools to create OData services.
 SAP Business Suite layer  
This holds the backend business logic and data.
SAP Gateway and OData are important elements of SAP Fiori application devel-
opment. In Chapter 7, we’ll discuss how to create an OData service with SAP 
Gateway. Next, we’ll wrap up our discussion on related SAP Fiori technologies 
with a look at SAP HANA XS.
Client/Browser
SAP Business Suite
ERP
CRM
SCM
PLM
SAP Gateway

Introduction to SAP Fiori
1
72
1.4.3
SAP HANA XS
SAP HANA XS is a key component of SAP HANA as a platform. SAP HANA XS is 
a small footprint application and web server. It provides an application develop-
ment platform inside of SAP HANA, offering improved performance and access to 
SAP HANA’s core features. That said, XS is an extension of the SAP HANA data-
base and not a separate software component installed on the same hardware. XS 
is tightly integrated into the deepest parts of SAP HANA. With the release of SAP 
HANA SPS 05, SAP HANA XS became available for customers and partners who 
wish to develop their own SAP HANA-based applications.
 
More Information
For more information on building applications using SAP HANA XS, check out the SAP 
PRESS E-Bite, Hands On with SAP HANA XS, by Craig Cmehil, at www.sap-press.com/
4068. This E-Bite can also be used in conjunction with the SAP HANA XS CodeJam.
As previously mentioned, analytical apps only run on an SAP HANA database and 
use VDMs. SAP HANA XS contains the SAP Fiori app content, KPI modeling 
framework, generic drilldown, and SAP HANA Live VDMs (see Figure 1.43).
Figure 1.43  SAP HANA XS Engine
SAP HANA Live is a complete set of pre-defined VDMs that expose the SAP Busi-
ness Suite application data. SAP HANA Live provides different types of views: 
values help views, private views, reuse views, and query views. We’ll discuss 
more about SAP HANA Live views in Chapter 11.
SAP HANA XS Engine
SAP Fiori App Content
SAP HANA Live (VDM)
ERP
CRM
SCM
Others
ERP
CRM
SCM
Others
SAP
Smart
Business
any database/SAP HANA
SAP HANA XS Engine
ABAP Backend Server
ABAP Frontend Server
Search
Model 
Client/Browser
Reverse Proxy
SAP Web Dispatcher 
SAPUI5
HTTPS (HTML/ODATA/INA)
HTTPS (OData Request)
HTTPS (INA Search
Protocol)
HTTPS (HTML/ODATA)
Trusted RFC (OData)

Summary
1.5
73
1.5
Summary
In this chapter, we introduced you to SAP Fiori and SAP’s UX strategy. From 
there, we looked at SAP Fiori’s architectural components and integration technol-
ogies, such as SAP Fiori Launchpad and the SAP Web Dispatcher, before diving 
into the different communication channels of SAP Fiori. We then discussed SAP 
Fiori transactional, fact sheet, and analytical apps, along with their architectures. 
Finally, we reviewed related technologies used in conjunction with SAP Fiori, 
including SAPUI5, SAP Gateway and OData services, and SAP HANA XS.
Although this chapter isn’t meant to be a comprehensive discussion of SAP Fiori, 
you should now have a basic understanding of what SAP Fiori is and how it 
works. In the next chapter, we’ll round out Part I of the book with a discussion on 
the installation and configuration steps needed to use SAP Fiori and its apps.


75
Chapter 2 
This chapter provides an overview of the installation and configuration of 
the SAP Fiori system so that it’s ready to deploy SAP Fiori apps.
2
Installation and Configuration
This chapter describes the installation and configuration of different components 
in the SAP Fiori landscape. In Section 2.1, we’ll start with the prerequisites that 
need to be fulfilled before you install the SAP Fiori system. In Section 2.2, we’ll 
move on to a detailed discussion of the different components in the SAP Fiori sys-
tem landscape for ABAP, SAP HANA, and SAP HANA XS environments. Then, 
we’ll discuss the different deployment options in Section 2.3 with a look at the 
pros and cons of each option.
We’ll take a quick look at the SAP Fiori apps reference library where you can find 
app-specific installation information in Section 2.4, before diving into an installa-
tion overview of each component of the architecture in Section 2.5. Starting in 
Section 2.6, we move on to the configuration steps required after you install the 
components of SAP Fiori.
Let’s get started by looking at the prerequisites needed to install each app.
2.1
Prerequisites
Depending on the type of SAP Fiori app (transactional, fact sheet, analytical apps) 
you’re planning to implement, you need to set up the following software:
 Transactional apps
 Any database or SAP HANA Platform edition
 SAP NetWeaver
 SAP Business Suite product

Installation and Configuration
2
76
 Transactional and fact sheet apps
 SAP HANA Platform edition
 SAP NetWeaver
 SAP Business Suite product
 All three app types
 SAP HANA Platform edition
 SAP HANA Live for SAP Business Suite
 SAP NetWeaver
 SAP Business Suite product
In Section 2.5, we’ll discuss the required releases and support package stacks 
(SPS) for each of these software products in greater detail.
2.2
Implementation Options
In Chapter 1, we introduced you to different types of SAP Fiori apps (transac-
tional, analytical, and fact sheets). In this section, we discuss the different types of 
SAP Fiori system landscapes and the SAP Fiori apps they support. Let’s start by 
discussing the ABAP environment.
2.2.1
ABAP Environment
The ABAP environment supports transactional and fact sheet apps (only if the 
backend is SAP HANA). The ABAP architecture consists of four layers (see Figure 
2.1):
 Client  
This is where the SAP Fiori apps are designed to run, and it serves as the access 
point. To run the SAP Fiori apps, the runtime environment (i.e., either desktop 
or mobile) must support HTML5.
 ABAP frontend server  
The ABAP frontend server holds SAP Fiori functionalities and components. All 
the components in this layer are leveraged to generate and run an SAP Fiori app 
and enable communication among the client, ABAP frontend, and ABAP back-
end server. The following are found here:

Implementation Options
2.2
77
 SAP Business Suite (product-specific user interface [UI] components): The prod-
uct-specific UI add-ons are the specific UIs for the SAP Fiori apps that have 
been installed on the ABAP frontend server. Products here include SAP ERP, 
SAP Customer Relationship Management (SAP CRM), SAP Supplier Relation-
ship Management (SAP SRM), and SAP Supply Chain Management (SAP 
SCM).
 UI add-on: The common infrastructure for all the SAP Fiori apps is provided 
by the central UI add-on components. These components contain the 
SAPUI5 control library and SAP Fiori Launchpad.
 SAP Gateway: SAP Gateway is the development framework where you can 
create and generate OData services, which handles the communication 
between the client and the ABAP backend server.
Figure 2.1  SAP Fiori System with ABAP Environment
ABAP Frontend Server
UI Add-On
(SAPUI5, SAP Fiori Launchpad)
SAP Gateway 2.0
ABAP Backend Server
SAP Business Suite
any database/SAP HANA
SAP Business Suite
(Product-specific UI components)
ERP
CRM
SRM
SCM
ERP
CRM
SRM
SCM
Client
HTTPS (HTML/OData)
Trusted RFC

Installation and Configuration
2
78
 
UI Add-On and SAP Gateway Components
The UI add-on and SAP Gateway components are usually deployed on the same server.
 ABAP backend server  
The ABAP backend server contains the installed SAP Business Suite products. 
These products provide the business logic and backend data, which includes 
the users, roles, and authorizations.
 Backend database  
The backend database can be any database or the SAP HANA database. SAP 
Fiori apps run best on SAP HANA.
Each layer contains different components that serve a clearly defined purpose.
 
ABAP Frontend and Backend Components
ABAP frontend and backend components are delivered as separate products and have 
to be installed in a system landscape that is enabled for SAP Fiori.
2.2.2
SAP HANA Database
When using SAP Fiori with the SAP HANA database, the following four layers are 
implemented: the client, the reverse proxy, the ABAP frontend server, and the 
ABAP backend server (see Figure 2.2). This architecture is similar to what we dis-
cussed in the previous section, so we’ll only focus on the additional new layers or 
components. Like we said, each layer contains different components, each of 
which has a clearly defined purpose. This type of landscape supports both trans-
actional apps and fact sheet apps.
A reverse proxy is needed for fact sheet apps. SAP recommends using the SAP Web 
Dispatcher as a reverse proxy server. The SAP Web Dispatcher is an entry point 
where connections are accepted or rejected. After a connection is established, the 
SAP Web Dispatcher forwards the OData request to the ABAP backend server.
In addition to the SAP Business Suite products, the ABAP backend server contains 
search models. Data is pulled from SAP HANA through these search models. 
Therefore, when a user runs a fact sheet app, the client issues an INA (Internet 
Protocol Network Administrator) request for these search models using HTTPS 
communication.

Implementation Options
2.2
79
SAP HANA is the mandatory backend database for this type of landscape.
Figure 2.2  SAP Fiori System with the SAP HANA Database
2.2.3
SAP HANA XS
The SAP HANA XS architecture consists of five layers: the client, the reverse 
proxy, the ABAP frontend server, the ABAP backend server, and the SAP HANA 
XS engine (see Figure 2.3). All three types of apps (transactional, fact sheet, and 
analytical) are supported in this landscape.
Figure 2.3 show the integrated scenario where both the ABAP backend server and 
SAP HANA XS share the same SAP HANA database. Alternatively, you can set up 
your landscape as a side-by-side scenario (see Figure 2.4), where the ABAP backend 
ABAP Frontend Server
UI Add-On
(SAPUI5, SAP Fiori Launchpad)
SAP Gateway
ABAP Backend Server
SAP Business Suite
SAP HANA
SAP Business Suite
(Product-specific UI components)
ERP
CRM
SRM
SCM
ERP
CRM
SRM
SCM
Client
HTTPS (HTML/OData)
Trusted RFC
Search models
Reverse Proxy (SAP Web Dispatcher)
INA Search
Protocol

Installation and Configuration
2
80
server is on any database, and the SAP HANA XS is on the SAP HANA database. 
Both underlying databases are connected via data replication.
Figure 2.3  SAP Fiori System with SAP HANA XS
Because this type of architecture supports all three types of apps, the SAP Web 
Dispatcher (reverse proxy) is configured to recognize the OData service from the 
analytical apps. When a user runs an analytical app, the SAP Web Dispatcher 
routes the request to the ABAP frontend server. It then loads the UI, and the call 
is routed to the SAP HANA XS engine. The queries are routed from the client to 
the ABAP frontend, ABAP backend, or SAP HANA XS, depending on the type of 
app the user is running.
ABAP Frontend Server
UI Add-On
(SAPUI5, SAP Fiori Launchpad)
KPI Modeling
Framework
SAP Gateway
ABAP Backend Server
SAP Business Suite
SAP Business Suite
(Product-specific UI components)
ERP
CRM
SRM
SCM
ERP
CRM
SRM
SCM
Reverse Proxy (SAP Web Dispatcher)
Client
HTTPS (HTML/OData)
Trusted RFC
ERP
CRM
SRM
Others
ERP
CRM
SRM
Others
SAP Smart Business
SAP Fiori app content
VDM reuse content
SAP HANA XS Engine
HTTP (OData)
SAP HANA

Implementation Options
2.2
81
Figure 2.4  SAP Fiori System with SAP HANA XS (Side-by-Side Scenario)
In addition to the product-specific UI add-ons, the central UI add-on, and the SAP 
Gateway components, the ABAP frontend server also contains a key performance 
indicator (KPI) modeling framework. The KPI modeling framework contains the 
KPI modeler component with which you can create and model KPIs, and the 
generic drilldown component, which provides an infrastructure to view KPI data 
and to drill down to the detail view.
The SAP HANA XS engine has two components: the SAP HANA Live content, and 
the SAP Smart Business component. SAP Fiori analytical apps use the SAP HANA 
XS engine. All of the content in the SAP HANA XS engine comes from the SAP 
ABAP Frontend Server
UI Add-On
(SAPUI5, SAP Fiori Launchpad)
KPI Modeling
Framework
SAP Gateway
ABAP Backend Server
SAP Business Suite
Any database
SAP Business Suite
(Product-specific UI components)
ERP
CRM
SRM
SCM
ERP
CRM
SRM
SCM
Reverse Proxy (SAP Web Dispatcher)
Client
HTTPS (HTML/OData)
Trusted RFC
ERP
CRM
SRM
Others
ERP
CRM
SRM
Others
SAP Smart Business
SAP Fiori app content
VDM reuse content
SAP HANA XS Engine
HTTP (OData)
SAP HANA

Installation and Configuration
2
82
HANA Live views. The SAP HANA Live content contains the virtual data models 
(VDMs). To learn more about the SAP HANA XS, refer to Chapter 1. We’ll discuss 
SAP HANA Live in greater detail in Chapter 11.
The SAP HANA database is mandatory to run analytical apps/SAP Smart Business 
analytical apps. Data is populated from SAP HANA to the analytical apps or SAP 
Smart Business apps through the SAP HANA XS engine.
2.3
Deployment Options
In the previous section, we discussed the various landscapes that can be imple-
mented with SAP Fiori. Depending on your SAP Fiori system landscape, you can 
decide on your deployment options. You have two deployment options in SAP 
Fiori: a central hub deployment and embedded deployment.
In this section, we’ll walk through the advantages and disadvantages of both.
2.3.1
Central Hub Deployment
With this kind of deployment, the SAP Fiori UI add-ons (both central and prod-
uct-specific), and SAP Gateway components are deployed in the ABAP frontend 
server. The backend data and the business logic are deployed on the ABAP back-
end server (see Figure 2.5).
Figure 2.5  Central Hub Deployment
ABAP Frontend Server
UI Add-on
SAP Gateway
SAP Fiori Integration Components
SAP ERP
ABAP Backend Server
SAP Business Suite

Deployment Options
2.3
83
The central hub deployment offers several advantages, including the following:
 A central place is provided for theming and branding SAP Fiori apps, which 
also provides a single point of maintenance for UI issues.
 Developers can make changes to the UI without worrying about the backend 
development authorizations.
 A single point of access is provided to multiple backend systems, and it sup-
ports the composition and routing of multiple backend systems as well.
 Because there is no direct access to the backend data, you can benefit from 
enhanced security.
 The lifecycle of UI applications can be decoupled from the backend.
 Production scenarios with medium to high loads are supported.
The only disadvantage with this kind of deployment is that it needs an additional 
server for SAP Gateway.
 Important!
SAP recommends separating your backend business logic and the frontend UI compo-
nents from each other by implementing the central hub deployment option.
2.3.2
Embedded Deployment
Embedded deployment happens when the SAP Fiori UI add-ons (both central and 
product specific), and the SAP Gateway are deployed along with the backend SAP 
Business Suite (see Figure 2.6).
Figure 2.6  Embedded Deployment
ABAP Servers
UI Add-on
(SAPUI5, SAP Fiori Launchpad)
SAP Gateway
SAP Fiori Integration Components
SAP ERP
SAP Business Suite

Installation and Configuration
2
84
The advantages of using an embedded deployment include the following:
 No additional system for SAP Gateway is required.
 Direct access is provided to the business data and business logic.
 Just one remote call to the SAP system is necessary.
Disadvantages using this deployment option include the following:
 Production use is only suitable for low-load production systems or for proof of 
concepts (POCs), not for medium to high loads.
 SAP Gateway has to be configured on every system when multiple SAP Busi-
ness Suite systems are used.
 Components can only be upgraded during system maintenance; especially in 
large organizations, the SAP Business Suite system is upgraded very rarely (i.e., 
once or twice a year).
You now have a clear understanding of the different deployment options. The 
decision between the central hub or embedded deployment depends on the cus-
tomers use case.
2.4
Apps Reference Library
The SAP Fiori apps reference library enables you to explore all the SAP Fiori apps, 
including the technical information that is required to install and configure an 
SAP Fiori app, which we’ll walk through in Section 2.5 and Section 2.6. Before 
you get started, you should familiarize yourself with the apps reference library.
Because we’ll be starting with the implementation of the transactional Create 
Sales Orders app in Chapter 4, we’ll retrieve the technical details of this app from 
the library as an example:
1. Launch the apps reference library from http://www.sap.com/fiori-apps-library.
2. Click All Apps.
3. In the Search by App Name field, enter “Sales Order”, and press (Enter).
4. Select the Create Sales Orders app to view the app details on the right side 
(see Figure 2.7).

Apps Reference Library
2.4
85
Figure 2.7  Apps Reference Library
5. Select the Implementation Information tab, and then select the Configura-
tion arrow. This shows all the technical information that is needed to configure 
the Create Sales Order app (see Figure 2.8).
Figure 2.8  App-Specific Details
In the next section, we’ll give you an overview of the installation process.

Installation and Configuration
2
86
2.5
Installation
Now that we’ve given you some background about the different landscapes for 
SAP Fiori and its various deployment options, we’ll now cover what you need to 
install to set up an SAP Fiori system and what you should keep in mind when 
you’re installing SAP Fiori-related components. First, we’ll give you an installa-
tion overview of the components on the ABAP frontend server. We’ll then focus 
on the installation of components on the ABAP backend server. Next, we’ll dis-
cuss the installation around the SAP Web Dispatcher and the SAP HANA server. 
This book doesn’t include steps to install software such as ABAP Application 
Server (ABAP AS) and setting up the SAP HANA database. Instead, we’ll assume 
that the main software has already been installed.
2.5.1
ABAP Environment
In this section, we will look at the different ABAP frontend and backend server 
components and then the steps necessary to install them.
ABAP Frontend Server
The ABAP frontend server component installations depend on the patch level of 
the SAP NetWeaver version installed on your ABAP frontend server and the SAP 
Fiori apps that you want to install and configure. SAP highly recommends using 
the SAP Maintenance Planner to install components. There are three components 
that you need to check:
 SAP NetWeaver component version
 SAP Gateway component version
 Central UI component version
Refer to the following based on your SAP NetWeaver version:
 If the SAP NetWeaver version is 7.31, then you need to install the following:
 SAP NetWeaver version: 7.31 SPS 5 or higher (SAP recommends SPS 8).
 SAP Gateway component: SAP NetWeaver Gateway 2.0 SPS 10, this compo-
nent contains GW_CORE 200 SP 10, IW_FND 250 SP 10, and WEBCUIF 731 
SP 10 components.

Installation
2.5
87
 Central UI components: UI add-on 1.0 for SAP enhancement package 3 
(EHP3) for SAP NetWeaver 7.0, minimum SPS 12. This component contains 
UI_INFRA 100 SP 12, UI2_SRVC 100 SP 12, UISAPUI5 100 SP 12, UI2_FND 
100 SP 12, UI2_700 100 SP 12, UI2_701 100 SP 12, UI2_702 100 SP 12, and 
UI2_731 100 SP 12.
 If the SAP NetWeaver version is 7.4, then the SAP Gateway components and 
the central UI components that are required are included in the SAP NetWeaver 
installation. All you need to do is verify the product versions and patch levels 
of each component:
 SAP NetWeaver version: SPS 4 or higher
 SAP Gateway component: SAP NetWeaver Gateway Foundation SP 10 (SAP_
GWFND) is included in the SAP NetWeaver 7.4 installation. This component 
replaces the GW_CORE, IW_FND, and IW_BEP components.
 Central UI components: User Interface Technology 7.40 SP 12 (SAP_UI 740) 
is included in SAP NetWeaver 7.4 installation.
If you’ve already installed the SAP Gateway and central UI components, you can 
check the versions and the patch levels by following these steps:
1. Log in to ABAP frontend server.
2. Choose System  Status (see Figure 2.9).
Figure 2.9  Checking System Status

Installation and Configuration
2
88
3. Click the Component information button 
.
4. Go to the Installed Product Versions tab.
5. Check the SAP NetWeaver version (see Figure 2.10).
Figure 2.10  Checking the SAP NetWeaver Version
6. The SAP NetWeaver version is 7.4, so now you need to verify the component 
versions. As discussed previously, you need to check the following compo-
nents:
 SAP NetWeaver version has to be SPS 4 or higher
 SAP_GWFND 740 SP 10
 SAP_UI 740 SP 12
7. Click on the Installed Software Component Versions tab. Figure 2.11 shows 
the Component, Release, and SP-Level.
8. Finally, check in SAP Marketplace for new updates or support packages, and 
then install any new support packages.

Installation
2.5
89
Figure 2.11  Checking Component Versions
In this section, we explained how to update or install components. If you’re plan-
ning to implement SAP Fiori analytical apps, then you’ll have to install the KPI 
modeler in the ABAP frontend server (see Figure 2.12).
Figure 2.12  KPI Modeler Component

Installation and Configuration
2
90
ABAP Backend Server
Installation of the ABAP backend server components depends on the backend 
database and the SAP Business Suite product. To run the SAP Fiori apps, you need 
to install the instances you need for your SAP Business Suite products on your 
ABAP backend servers. As mentioned previously, SAP recommends using SAP 
Maintenance Planner to install the components. The following are the two main 
components that you need on the ABAP backend server:
 SAP Business Suite products  
SAP Fiori products are installed on the backend server as add-ons to specific 
SAP Business Suite products.
 SAP NetWeaver component  
If the backend database is SAP HANA, then this component should be SAP Net-
Weaver 7.4 SPS 7. If the backend database is not SAP HANA (for transactional 
apps only), then the SAP NetWeaver version depends on the SAP Business Suite 
product, and you need to refer to the product-specific online help to get the 
version details.
In this section, we’ll explain the components you need to install with a simple 
example.
If the central application instance of one of the enhancement packages of SAP ERP 
6.0 that you’re running is EHP 2 to EHP 7, then you need to install Central App
INT. If the central application instance of one of the enhancement packages of 
SAP ERP 6.0 that you’re running is EHP 7 (SPS 2 or higher), then you need to 
install Central App INT NW740.
Similarly, if you’re running an SAP ERP Human Capital Management (SAP ERP 
HCM) application instance for one of the enhancement packages of SAP ERP 6.0 
(up to EHP 7), then you need to install HCM INT, and if you’re running EHP 7 
(SPS 2 or higher), then you need to install HCM INT NW 740.
Figure 2.13 shows the installed product version on the ABAP backend server and 
the SAP Fiori principal apps for SAP ERP 1.0 (FIORI ERP APPLICATIONS X1 1.0).
Similarly, Figure 2.14 shows the product-specific components on the ABAP back-
end server.

Installation
2.5
91
Figure 2.13  SAP Fiori ERP Applications X1
Figure 2.14  ABAP Backend Components
In the next section, we’ll show you how to install the components for the ABAP 
backend or ABAP frontend servers.

Installation and Configuration
2
92
Installing ABAP Frontend and Backend Components 
In Section 2.2, we explained the different components that are required for set-
ting up the SAP Fiori system. In this section, we’ll explore options for how to 
install the ABAP frontend or backend components.
SAP Maintenance Planner
SAP recommends using the SAP Maintenance Planner to install and update prod-
uct versions, to make sure all the dependencies are addressed, and to ensure that 
the system remains consistent. The SAP Maintenance Planner is the successor of 
Maintenance Optimizer, Landscape Planner, and SAP Product System Editor, 
and it’s the central point of access for all maintenance activities. Using this tool, 
you can easily perform system upgrades, support package installations, and 
enhancement package updates. In addition, you can consolidate critical tasks, 
such as defining product maintenance dependencies, and so on, with the SAP 
Maintenance Planner.
You can launch the SAP Maintenance Planner (see Figure 2.15) from https://
apps.support.sap.com/sap/support/mp (log in with your user ID).
Figure 2.15  SAP Maintenance Planner
As shown in Figure 2.15, the SAP Maintenance Planner contains the following 
four areas:
 Explore Systems  
Determines the systems in your landscape.

Installation
2.5
93
 Explore System Tracks  
Lists groups of technical systems.
 Transactions  
Gives you an overview of all the transactions you created.
 Plan a New System 
Enables you to add a new system to your landscape.
SAP Fiori apps require frontend and backend components. These components are 
delivered in separate products that you need to install in the system landscape. 
The SAP Maintenance Planner addresses the need to install frontend and backend 
components delivered in separate products by calculating all the system require-
ments for an SAP Fiori app installation.
You can choose the apps that you want to install from the SAP Fiori apps refer-
ence library, and then launch the SAP Maintenance Planner from the library to 
calculate the system requirements to install the apps you selected. Next, we’ll 
highlight some of the steps that will help you get started on this tool, and we’ll 
explain with an example based on the My Inbox app. Follow these steps:
1. Launch the SAP Fiori apps reference library via http://www.sap.com/fiori-apps-
library.
2. Search for and select the My Inbox app. Then go to the Implementation Infor-
mation tab (see Figure 2.16).
Figure 2.16  SAP Fiori Apps Reference Library

Installation and Configuration
2
94
3. Click on the Maintenance Planner link at the end of the Installation section 
(see Figure 2.17).
Figure 2.17  Launch Maintenance Planner
This launches the SAP Maintenance Planner with the components that are 
required to implement the My Inbox app.
4. Log in with your S-User ID, and follow the steps in the wizard (see Figure 2.18). 
SAP Maintenance Planner automatically starts calculating the system require-
ments based on your currrent system.
Figure 2.18  Maintenance Planner Wizard

Installation
2.5
95
5. At the end of the wizard, you can either select Push to Download Basket or 
Download Stack XML.
6. After you’ve downloaded the archives from the SAP Marketplace, you need to 
use the relevant tools to implement the planned landscape changes.
On the other hand, you can also download the files from the SAP Marketplace
and deploy them manually. There are two ways to upload the files to the server: 
from the frontend server or from the application server.
If the component/file size is too big it’s recommended that you load the compo-
nents from the application server. In addition, you can use Transaction SPAM 
(Support Package Manager), and Transaction SAINT (SAP Add-On Installation 
Tool) to install or update the components. Next, we’ll show you how to install a 
component using Transaction SPAM. You can follow the same procedure and 
update any ABAP frontend or backend components.
 Update Support Packages
It’s very important to apply the latest support package for all components or apps that 
you’re planning to implement.
As an example, if you implement the My Inbox app, the first step is to get the 
component details from the SAP Fiori apps reference library help page specific to 
that app. Proceed as follows:
1. Go to the Implementation section of the My Inbox app in the apps reference 
library. Figure 2.19 shows the frontend components and the versions that your 
system needs to be on for the My Inbox app to work.
Figure 2.19  My Inbox App Frontend Component Versions
2. Check the current version of the components.

Installation and Configuration
2
96
3. A minimum patch level of the IW PGW 100 should be SP 07 for the My Inbox 
app to work without any issues, and the IW_PGW component in our example 
system is on SP 06 (see Figure 2.20).
Figure 2.20  IW_PGW (SP6) Component
In the next section, we'll walk you through how to derive the components that 
are required on the ABAP backend or frontend server, as well as how to install 
components.
 
SAP NetWeaver
If your SAP NetWeaver version is 7.31, you have to first install the software component 
and then the support packages.
Download the Component Files
Next you need to download the component files from the SAP Marketplace. Fol-
low these steps:
1. Log in to the SAP Software Download Center at http://support.sap.com/swdc.
2. Click Search for Software (see Figure 2.21).

Installation
2.5
97
Figure 2.21  Search for Software
3. Enter “IW_PGW” in the Search Term field, and click Search or press the (Enter)
key (see Figure 2.22).
Figure 2.22  Searching for the IG_PGW Component
4. Download the latest support package, that is, SP 0007, as shown in Figure 2.23.

Installation and Configuration
2
98
 
Support Packages
Support packages aren’t cumulative. For example, if your IW_PGW component is on 
SP 5, and you want to upgrade it to SP 7, then you have to download and install both 
SP 6 and SP 7.
Figure 2.23  Download Support Packages
Upload the Support Packages
The next step is to upload the support packages to the ABAP frontend server. Fol-
low these steps:
1. Log in to your ABAP frontend server.
2. Run Transaction SPAM.
3. From the menu bar, go to Support Package  Load packages  From Front
End (see Figure 2.24).
Figure 2.24  Loading the Package from the Frontend

Installation
2.5
99
4. Select the downloaded file.
5. Click Open (see Figure 2.25).
Figure 2.25  Selecting the Package
6. Click Allow.
7. Click Decompress (see Figure 2.26).
Figure 2.26  Decompressing the Package

Installation and Configuration
2
100
8.
Select the New Support Packages radio button, and click Display (see Figure 
2.27).
Figure 2.27  Displaying Support Packages
9.
Select the OCS package, and click Queue (see Figure 2.28).
10. Click 
 in the popup window to confirm the queue.
Figure 2.28  Selecting the OCS Package
11. Click Yes to add modification adjustments transports to the queue (see Figure 
2.29).
Figure 2.29  Add Transports to the Queue
12. You should now see the transport added to the queue, now click 
 (see Fig-
ure 2.30).
Figure 2.30  Import Queue

Installation
2.5
101
13. Click Confirm to start importing the support packages (see Figure 2.31).
Figure 2.31  Start Importing
14. Click Confirm to close the information popup window.
15. Confirm the queue by selecting Support Package  Confirm (see Figure 2.32).
Figure 2.32  Support Package Import Confirmation
16. You should now see the latest support package applied for the IW_PGW com-
ponent (see Figure 2.33).

Installation and Configuration
2
102
Figure 2.33  IW_PGW Component
We’ve successfully applied the latest support package for one of the components. 
You can follow the same process for any backend or frontend components. How-
ever, keep in mind that SAP recommends the SAP Maintenance Planner if you do so.
You should now understand how to install the right components depending on 
the apps you want to use. In the next section, we’ll look at the SAP Web Dis-
patcher.
2.5.2
SAP Web Dispatcher
In Chapter 1, we gave you a brief introduction to the SAP Web Dispatcher. In this 
section, we’ll discuss the SAP Web Dispatcher in greater detail. To recap, the SAP 
Web Dispatcher enables users to access the SAP Gateway servers that are behind 
the corporate firewall. The SAP Web Dispatcher is the entry point for HTTP or 
HTTPS requests. The main role of the SAP Web Dispatcher is to accept or reject 
connections from the client/browser. After the connection is accepted, it diverts 
the queries from the browser to your SAP system.

Installation
2.5
103
Depending on the type of app you’re running, the queries are directed by the SAP 
Web Dispatcher (reverse proxy) from the browser to the ABAP frontend or the 
SAP HANA server. For example, when you run an analytical app, the SAP Web 
Dispatcher routes the queries first to the ABAP frontend server and then to the 
SAP HANA XS engine.
 Deploying Transactional Apps
If you’re deploying only transactional apps, and running them only via an intranet zone, 
then you don’t need to set up a reverse proxy. However, if you want to access the trans-
actional apps via the Internet, then you can use a reverse proxy (SAP Web Dispatcher).
SAP recommends installing the SAP Web Dispatcher as the reverse proxy. Fol-
low the installation and configuration process that is available online at https://
help.sap.com/saphelp_nw74/helpdata/en/48/8fe37933114e6fe10000000a421937/
frameset.html.
After the SAP Web Dispatcher is installed, you need to configure the following 
communication scenarios. We’ll cover these configuration topics in further detail 
during the security setup in Chapter 3:
 HTTP communication
 SSL termination
 SSL reencryption
2.5.3
SAP HANA Server
As previously discussed, analytical apps run only on an SAP HANA database, 
using VDMs. A VDM is a structured representation of SAP HANA database views, 
and these VDMs are deployed with SAP HANA Live for SAP Business Suite.
SAP delivers the SAP HANA Live packages for a large number of SAP Business 
Suite application areas. For more information on SAP HANA Live, go to http://
help.sap.com/hba, and select the package you want to install.
Depending on the SAP Fiori apps that you want to implement, you have to install 
the SAP Smart Business products on your SAP HANA server. These SAP Smart 
Business products include the VDM as well. Table 2.1 provides a list of SAP Smart 
Business products that are available.

Installation and Configuration
2
104
After the SAP HANA Live views are deployed, you’ll be able to view the complete 
list of views using a standard SAP-delivered tool called the SAP HANA Live 
Browser (see Figure 2.34). Using this tool, you can search, sort, and filter the com-
plete list of available views. You can access this tool from the following URL: 
http://<host>:<port>/sap/hba/explorer/.
The SAP Smart Business 1.0 foundation component SPS 4 (SAP Analytics Founda-
tion 1.0) contains an extensive collection of analytic views created within the SAP 
HANA analytics foundation. The following is a list of components that are auto-
matically installed with the SAP Analytics Foundation 1.0 package:
 HCO_HBA_R_SB_CORE
 HCO_HBA_R_SB_EXT
 HCO_HBA_R_SB_CXO
SAP Business Suite Product
SAP HANA Content Add-On
All products
KPI Modeler 1.0 SPS 02
SAP Customer Relationship Management 
(SAP CRM)
SAP Smart Business for CRM 1.0 SPS 02
SAP Financial Closing Cockpit (SAP FCC)
SAP Smart Business for FCC 1.0 SPS 02
SAP Enterprise Resource Planning 
(SAP ERP)
SAP Smart Business for ERP 1.0 SPS 02
SAP Governance, Risk and Compliance 
(SAP GRC)
SAP Smart Business for GRC 1.0 SPS 02
SAP Event Management (SAP EM)
SAP Smart Business for EM 1.0 SPS 02
SAP Transportation Management (SAP TM) SAP Smart Business for TM 1.0 SPS 02
SAP Enterprise Warehouse Management 
(SAP EWM)
SAP Smart Business for EWM 1.0
SAP Foundation (SAP FND)
SAP Smart Business for FND 1.0
SAP Advanced Planning and Optimization 
(SAP APO)
SAP Smart Business for APO 1.0
SAP Product Lifecycle Management 
(SAP PLM)
SAP Smart Business for PLM 1.0
SAP S/4HANA Finance  
SAP Smart Business for SFIN 1.0 SPS 01
Table 2.1  SAP Smart Business Products 

Configuration
2.6
105
 HCO_HBA_R_APF_CORE
 HCO_HBA_R_SB_TP
Figure 2.34  SAP HANA Live Views
In the next section, we’ll look at the post-installation configuration steps that are 
required to set up the SAP Fiori system.
2.6
Configuration
In this section, we’ll walk you through a typical configuration. We’ll cover how to 
perform both manual and automated configuration through predefined tasks.
2.6.1
SAP Fiori Launchpad
SAP Fiori Launchpad is the entry point for all the SAP Fiori apps. You need to con-
figure SAP Fiori Launchpad so that your end users can log in and access the apps. 

Installation and Configuration
2
106
In the sections that follow, we’ll walk through the configuration steps needed for 
SAP Fiori Launchpad.
Activate SAP Fiori Launchpad and SAP Fiori Launchpad Designer Services
The first step in the configuration is to activate the OData services for SAP Fiori 
Launchpad and the launchpad designer. Follow these steps:
1. Log on to the ABAP frontend server.
2. Run Transaction /IWFND/MAINT_SERVICE.
3. Click the 
 button.
4. Select the input help button in the system alias. Select Local for the System
Alias.
5. Enter “page_builder*” for the External Service Name (see Figure 2.35).
Figure 2.35  External Service Name
6. Click Get Services.
7. Select all of the following services as shown in Figure 2.36:
 /UI2/PAGE_BUILDER_CONF (this is used by SAP Fiori Launchpad designer)
 /UI2/PAGE_BUILDER_CUST (this is used by SAP Fiori Launchpad designer)
 /UI2/PAGE_BUILDER_PERS (this is used by SAP Fiori Launchpad)
Figure 2.36  Selecting All Services

Configuration
2.6
107
8.
Click Add Selected Services.
9.
Select Local Object.
10. Click Continue, or press (Enter).
11. Repeat steps 6 – 10 to get and add the following services:
 /UI2/Interop (this is used by both SAP Fiori Launchpad and SAP Fiori 
Launchpad designer)
 /UI2/TRANSPORT (this is used by SAP Fiori Launchpad designer)
12. Go back to the Activate and Maintain Services screen (Transaction /IWFND/
MAINT_SERVICE). You should now see the activated services in your cus-
tomer namespace.
13. Select ZINTEROP from the Service Catalog (see Figure 2.37).
Figure 2.37  Selecting ZINTEROP
14. Select the OData row under ICF Nodes, and then click Call Browser (see 
Figure 2.38).
Figure 2.38  Clicking Call Browser
You should now see an XML document in the browser without any errors (see 
Figure 2.39).
15. Repeat the steps for the remaining four services.

Installation and Configuration
2
108
Figure 2.39  XML Document
Check the Hash Key
Every time you call an OData service, a hash key is generated in the background. 
These hash keys are required for the generation of authorizations to assign 
administrative roles for SAP Fiori Launchpad. To check whether the hash key is 
generated, follow these steps:
1. Return to the SAP GUI (ABAP frontend server), and run Transaction SE16 to 
view the table contents.
2. Enter “USOBHASH” in the Table Name field, and click on the Table Content
button (see Figure 2.40).
Figure 2.40  Data Browser

Configuration
2.6
109
3. In the next screen, enter the following details, and click Execute (see Figure 
2.41):
 PGMID: “R3TR” (program ID)
 OBJECT: “IWSG” (object type)
 OBJ_NAME: “ZINTEROP*” (one of the services that we activated in the pre-
vious steps)
Figure 2.41  Selection Screen
You should receive a table content screen with the hash key details of INTEROP 
service (see Figure 2.42).
Figure 2.42  Hash Key
Activate Internet Communication Framework Nodes
The next step is to activate the Internet Communication Framework (ICF) nodes 
for SAP Fiori Launchpad. The following is a list of services that have to be acti-
vated:

Installation and Configuration
2
110
 /default_host/sap/bc/ui5_ui5/sap/ar_srvc_launch
 /default_host/sap/bc/ui5_ui5/sap/ar_srvc_news
 /default_host/sap/bc/ui5_ui5/sap/arsrvc_upb_admn
 /default_host/sap/bc/ui5_ui5/ui2/ushell
 /default_host/sap/bc/ui2/nwbc
 /default_host/sap/bc/ui2/start_up
 /default_host /sap/public/bc/icf/logoff
 /default_host/sap/public/bc/ui2
 /default_host/sap/public/bc/ui5_ui5
Follow these steps:
1. Run Transaction SICF.
2. Enter “/sap/bc/ui5_ui5/sap” in the Service Path field (see Figure 2.43).
3. Click 
.
Figure 2.43  Service Path
4. Drill down to ar_srvc_launch.
5. Right-click on ar_srvc_launch, and choose Activate Service (see Figure 2.44).
6. Click Yes with the hierarchy to activate all the child nodes (see Figure 2.45).

Configuration
2.6
111
Figure 2.44  Activate Service
Figure 2.45  Activating All with the Hierarchy
7. Repeat steps 2 – 6, and activate the remaining services:
 /default_host/sap/bc/ui5_ui5/sap/ar_srvc_news
 /default_host/sap/bc/ui5_ui5/sap/arsrvc_upb_admn
 /default_host/sap/bc/ui5_ui5/ui2/ushell
 /default_host/sap/bc/ui2/nwbc
 /default_host/sap/bc/ui2/start_up
 /default_host /sap/public/bc/icf/logoff
 /default_host/sap/public/bc/ui2
 /default_host/sap/public/bc/ui5_ui5

Installation and Configuration
2
112
Configure Authorization Roles
In the next step, we’ll copy the standard SAP-delivered SAP Fiori Launchpad roles 
and assign those roles to the administrators and end users.
Follow these steps:
1. Run Transaction PFCG.
2. Enter Role name “SAP_UI2_ADMIN_700”, and click Copy Role (see Figure 
2.46).
Figure 2.46  Role Maintenance
3. In the To Role field, amend the name with a letter “Z”.
4. Click Copy All (see Figure 2.47).
Figure 2.47  Copy Role
5. Edit the new role by clicking the Change icon 
.
6. Select Authorization Default under the Menu tab (see Figure 2.48).
Figure 2.48  Authorization Default

Configuration
2.6
113
7.
Select TADIR Service from the dropdown menu.
8.
Select Program ID “R3TR”.
9.
Select Obj. Type “IWSG”.
10. Add the services that we activated in the previous step (see Figure 2.49):
 ZINTEROP_0001
 ZPAGE_BUILDER_CONF_0001
 ZPAGE_BUILDER_CUST_0001
 ZPAGE_BUILDER_PERS_0001
 ZTRANSPORT_0001
Figure 2.49  Adding Services
11. Click the Copy button, and then go to the Authorizations tab.
12. Click 
 to propose a Profile Name (see Figure 2.50).
Figure 2.50  Generating a Profile Name
13. Click Change Authorization Data (see Figure 2.51).

Installation and Configuration
2
114
Figure 2.51  Changing Authorization Data
14. Click Yes to save the role. You should now see the five services under the cop-
ied role.
15. Click Save, and then click the Generate icon (see Figure 2.52).
Figure 2.52  Generate
16. We copied the SAP standard role for SAP Fiori Launchpad administrators. 
Next, repeat steps 2 – 15 to copy the SAP standard role for SAP Fiori Launch-
pad end users by following these steps:
 Copy the role SAP_UI2_USER_700.
 Add the following services to the copied role:
– ZINTEROP_0001
– ZPAGE_BUILDER_PERS_0001
 Generate the authorizations.
Assign Generic Roles to User
In this step, we’ll assign the generic admin role to FIORIADMIN ID and the 
generic user role to a FIORIUSER ID.

Configuration
2.6
115
Follow these steps:
1. Run Transaction SU01.
2. Enter the User Name, and click Edit (see Figure 2.53).
Figure 2.53  User Maintenance
3. Navigate to the Roles tab, and add a new row by clicking 
.
4. Enter the role name created in the previous step, and press (Enter) (see Figure 
2.54).
Figure 2.54  Adding a Generic Role
5. Repeat steps 2 – 4, and assign the role ZSAP_UI2_USER_700 to the FIORIAD-
MIN user.
Configure the SAP Fiori Launchpad Login Screen
The last step is to configure the login screen for SAP Fiori Launchpad and SAP 
Fiori Launchpad designer. Follow these steps:
1. In the ABAP frontend server, run Transaction SICF.
2. Enter “/sap/bc/ui5_ui5/ui2/ushell” in the Service Path field.

Installation and Configuration
2
116
3. Click Execute 
, or press (F8) (see Figure 2.55).
Figure 2.55  Service Path
4. Double-click the ushell service.
5. Click the Error Pages tab.
6. Select the System Logon radio button, and then click Configuration (see Fig-
ure 2.56).
Figure 2.56  Configuring the SAP Fiori Launchpad Login Screen

Configuration
2.6
117
7.
Select the Custom Implementation radio button.
8.
Enter “/UI2/CL_SRA_LOGIN” in the ABAP Class field (see Figure 2.57).
Figure 2.57  Custom ABAP Class
9.
Click 
.
10. Click Save on the Create/Change a Service screen.
11. Repeat steps 2 – 10 with the /sap/bc/ui5_ui5/sap/arsrvc_upb_admn service 
to configure the logon for SAP Fiori Launchpad designer.
12. Log in to SAP Fiori Launchpad with your ID (see Figure 2.58):
http(s)://<host>:<port>/sap/bc/ui5_ui5/ui2/ushell/shells/abap/FioriLaunch-
pad.html?sap-client=<Client>
Figure 2.58  SAP Fiori Logon Screen

Installation and Configuration
2
118
13. Log in to the SAP Fiori Launchpad designer with your ID:
http://<host>:<port>/sap/bc/ui5_ui5/sap/arsrvc_upb_admn/main.html? 
sap-client=<client>&scope=CUST
You can use the configuration task SAP_FIORI_LAUNCHPAD_INIT_SETUP to 
automatically setup and configure SAP Fiori Launchpad. We’ll cover the task list 
in detail in Section 2.6.5.
2.6.2
SAP Gateway
Depending on the deployment option that you’ve selected, you need to install 
and configure the SAP Gateway server. As previously discussed, if your SAP Net-
Weaver version is 7.3, then you have to install the SAP Gateway 2.0 SPS 10 com-
ponent, which is comprised of GW_CORE 200 SP 10, SAP IW_FND 250 SP 10, 
and SAP WEBUIF 7.31 SP 10.
To install SAP Gateway 2.0, refer to the online help at http://help.sap.com/nwgate-
way, and choose Installation and Upgrade Information  Installation Guide.
In SAP NetWeaver 7.4, components GW_CORE, SAP IW_FND, IW_BEP, and IW_
HDB are replaced with the new software component SAP GW_FND (SAP Gate-
way Foundation SP 10). So, if you’re in SAP NetWeaver 7.4, you don’t have to 
install any additional software component because it’s already included in SAP 
NetWeaver 7.4.
Activate SAP Gateway
First, you’ll have to activate the SAP Gateway services. Follow these steps:
1. Run Transaction SPRO.
2. Click 
.
3. Drill down to activate or deactivate SAP Gateway, and click 
 (see Figure 2.59).
4. Click Activate (see Figure 2.60).

Configuration
2.6
119
Figure 2.59  Implementation Guide
Figure 2.60  Activating SAP Gateway Service
Integrate SAP Gateway and SAP Business Suite
In this step, we’ll set up the trusted remote function call (RFC) connection to 
define a trusted relationship between SAP Gateway on the ABAP frontend server 
and SAP Business Suite on the ABAP backend server.
Follow these steps:
1. Log in to your ABAP frontend server.
2. Run Transaction SM59.
3. Click Create 
.

Installation and Configuration
2
120
4. Make the following configurations on the next screen (see Figure 2.61):
 RFC Destination: Enter “ERPCLNT120” (this is the RFC destination name).
 Connection Type: Enter “3”.
 Description 1: Enter “SAP ERP”.
 Load Balancing: Select No.
 Target Host: Enter the SAP Business Suite server name.
 Instance Number: Enter “00”.
Figure 2.61  Creating the RFC Connection
5. Click the Logon and Security tab, and use the following settings (see Figure 
2.62):
 Language: Enter “EN”.
 Client: Enter “120”.
 User: Select the Current User checkbox.
 Trust Relationship: Select Yes.

Configuration
2.6
121
Figure 2.62  Login and Security
Now you need to repeat the same steps on your ABAP backend server with the 
target host as your ABAP frontend server. After setting up the RFC destination in 
the backend server, you need to run the Creating Trusting Relationships wizard. 
Follow these steps:
1. Run Transaction SMT1.
2. Click Create.
3. Follow the steps in the Creating Trusting Relationships wizard.
4. Save your settings.
Creating the SAP System Alias for Applications
In this step, we’ll create the SAP system alias that points to the SAP Business Suite 
system from the central hub system. We’ve implemented an embedded deploy-
ment, and the system alias should represent the SAP Gateway system itself, so 
we’ll have to create a system alias entry (LOCAL). However, if your landscape has 
the central hub deployment, then you need to enter the SAP Gateway system 
details.
Follow these steps:
1. Run Transaction SPRO.
2. Click 
.
3. Navigate to Manage System Aliases, and click 
. Follow the menu path, SAP
NetWeaver  Gateway  OData Channel  Configuration  Connection Set-
tings  SAP NetWeaver Gateway to SAP System  Manage SAP System Aliases
(see Figure 2.63).

Installation and Configuration
2
122
Figure 2.63  Implementation Guide
4. Click New Entries, and perform the following settings (see Figure 2.64):
 SAP System Alias: Enter “LOCAL”.
 Description: Enter “Local System Alias”.
 Local GW: Check this box.
 For Local App: Do not check this box.
 RFC Destination: Enter “NONE”.
 Software Version: Select “DEFAULT” from the available software versions 
by clicking 
 in the field.
 System ID: Leave <blank>.
 Client: Leave <blank>.
 WS Provider System: Leave <blank>.
Figure 2.64  System Aliases

Configuration
2.6
123
Assign a Role Template to an Admin User
In this step, we need to assign the role template /IWFND/RT_ADMIN to the FIO-
RIADMIN user. Follow these steps:
1. Run Transaction PFCG.
2. Enter “ZRT_ADMIN” in the Role field, and click Single Role (see Figure 2.65).
Figure 2.65  Role Maintenance
3. Select the Authorizations tab, and then click Save (if there is a popup message).
4. Click Change Authorization Data (see Figure 2.66).
Figure 2.66  Generating Profiles
5. Choose the /IWFND/RT_ADMIN template, and click Adopt reference (see Fig-
ure 2.67).
Figure 2.67  Adopting Reference – Template

Installation and Configuration
2
124
6. Click the Generate icon (see Figure 2.68).
Figure 2.68  Generate
7.
Click Save.
8.
Click the Back
 button, and select the User tab.
9.
Enter “FIORIADMIN” in the User ID field, and press (Enter) (see Figure 2.69).
Figure 2.69  Adding an Administrator to the Role
10. Click Save.
Specify the Default Language and Logon Language
You need to make sure that the default language in both SAP Gateway and the 
backend system are the same because the SAP Gateway system supports only 
those languages that are the same in the connected SAP Business Suite backend 
systems. If it isn’t the same, then you need to verify whether the backend lan-
guage is a subset of the languages in the SAP Gateway system.

Configuration
2.6
125
The logon language is based on the user settings in Transaction SU01. If nothing 
is defined there, then the default language is automatically used (see Figure 2.70).
Figure 2.70  Default Language
If a service in Transaction SICF is activated with the Required with Logon Data
indicator, then the system uses the language that is defined in the Language field 
(see Figure 2.71).
Figure 2.71  Request with Logon Data
2.6.3
Embedded Search
Search functionality lets users search apps and central business objects, as well as 
view the list of recently used apps. The search toolbar is located in the top-right 
corner of SAP Fiori Launchpad (see Figure 2.72).

Installation and Configuration
2
126
Figure 2.72  Search Toolbar
SAP Fiori fact sheet apps are called using this search functionality. As a prerequi-
site for the fact sheets, you need to set up SAP Search.
If your SAP NetWeaver version is 7.4 SPS 6 or higher, you can use the predefined 
tasks to automatically set up and configure the communication channels among 
the client, frontend servers, and backend servers. Using the predefined tasks list, 
you can configure the initial system setup, SAP Gateway, SAP Fiori Launchpad, 
and so on. In this section, we’ll focus on the predefined tasks for setting up 
embedded search.
On the frontend server, you need to set up communication between the SAP Web 
Dispatcher and the ABAP frontend servers, which we did in the previous sections. 
On the backend server, you have to set up embedded search.
Activating Embedded Search User Interface Services
In this step, we’ll be activating the central UI services that are related to the 
embedded search. In Section 2.6.1, we described how to activate services; you 
need to follow the same process and activate the following services in the ABAP 
backend server:
 default_host/sap/es/cockpit
 default_host/sap/es/saplink
 default_host/sap/es/search
 default_host/sap/es/ina
 default_host/sap/bc/webdynpro/sap/ESH_ADMIN_UI_COMPONENT
 default_host/sap/bc/webdynpro/sap/esh_eng_modelling
 default_host/sap/bc/webdynpro/sap/esh_eng_wizard
 default_host/sap/bc/webdynpro/sap/esh_search_results_ui
 default_host/sap/bc/webdynpro/sap/wdhc_help_center

Configuration
2.6
127
Assign Authorizations for Embedded Search
In this step, we’ll assign authorizations to the FIORIADMIN user to manage 
embedded search. Follow these steps:
1. Run Transaction SU01.
2. Enter “FIORIADMIN” in the User field.
3. Click 
.
4. Enter “SAP_ESH_LOCAL_ADMIN” in the Role field, and press (Enter) (see Fig-
ure 2.73).
5. Click Save.
6. The FIORIADMIN user will now have access to control the embedded search.
Figure 2.73  Embedded Search Related Roles
Check Business Functions
In this step, we need to check whether some of the business functions related to 
embedded search are activated in the backend server. Follow these steps in your 
ABAP backend server:
1. Run Transaction SFW5.
2. Click Continue.
3. On the next screen, open the Enterprise Business Functions folder.

Installation and Configuration
2
128
4. Search for the following functions, and check if they are activated (you’ll notice 
a bulb next to the name if they are; see Figure 2.74):
 BSCBN_HANA_NAV
 BSESH_HANA_SEARCH
Figure 2.74  Business Functions
5. If these functions aren’t activated, then select the Planned Status checkbox, 
and click Activate Changes.
Configuration Check: Search User Interface (Fact Sheet Apps Only)
To check that SAP Fiori search has been installed correctly, run Transaction ESH_
SEARCH in the backend system, and then the Web Dynpro UI for the search 
should appear (see Figure 2.75).
Figure 2.75  Web Dynpro UI
2.6.4
SAP HANA
In this section, we’ll look at some of the generic configuration steps that are 
required for analytical apps to work on the SAP HANA database.
Assign SAP Smart Business Modeler Roles
In this step, you need to assign roles to the user to use the SAP Smart Business 
Modeler. Follow these steps:

Configuration
2.6
129
1. Log in to the SAP HANA server from SAP HANA Studio.
2. Open the Security folder, and then open the Users folder.
3. Double-click the FIORIADMIN user name to open the user’s profile (see Figure 2.76).
Figure 2.76  User Maintenance
4. Click the Granted Roles tab.
5. Enter the following role and then click OK (see Figure 2.77): “sap.hba.r.sb. 
core.roles::SAP_SMART_BUSINESS_MODELER”.
6. Repeat the steps to add the remaining roles:
 sap.hba.r.sb.core.roles::SAP_SMART_BUSINESS_RUNTIME
 sap.hba.apps.kpi.s.roles::SAP_SMART_BUSINESS_ MODELER
 sap.hba.apps.kpi.s.roles::SAP_SMART_BUSINESS_RUNTIME
 sap.hba.apps.ps.s.roles::SAP_SMART_BUSINESS_PROJECT_MANAGER
Figure 2.77  Adding Roles

Installation and Configuration
2
130
Assign the KPI Modeler and KPI Framework Roles
In this step, we’ll assign the KPI modeler roles to the administrative user and end 
user using Transaction PFCG in the ABAP frontend server. Follow these steps:
1. Follow the same steps from the previous section, and assign the roles /UI2/
SAP_KPIFRW5_TCR_S and /UI2/SAP_KPIMOD_TCR_S to the SAP Fiori admin-
istrator user, for example, FIORIADMIN user (see Figure 2.78).
2. Similarly, assign /UI2/SAP_KPIFRW5_TCR_S to an end user, for example, FIO-
RIUSER (see Figure 2.79).
Figure 2.78  KPI Modeler and KPI Framework Roles
Figure 2.79  KPI Framework Role
Activate SAP Smart Business Modeler Service
In this step, you need to activate a service in the ABAP frontend server. In Section 
2.6.1, we showed you how to activate services. Here, you need to follow the same 

Configuration
2.6
131
process and activate the following service in the ABAP frontend server: default_
host/sap/bc/ui5_ui5/sap/CA_KPI.
Configuration Check
After you’ve configured the KPI modeler framework, you should see the follow-
ing KPI modeler apps in the KPI Modeler catalog in SAP Fiori Launchpad (see 
Figure 2.80):
 KPI Workspace
 Configure KPI Drill-Down
 Manage KPI Authorizations
 Manage KPI Associations
 Create KPI
  Create Evaluation
 Configure KPI Tiles
 Migration Tool
Figure 2.80  KPI Modeler

Installation and Configuration
2
132
2.6.5
Configuration Using the Task List
In this section, we’ll introduce the predefined task list, with which you can con-
figure your ABAP system automatically. We’ll walk you through with an example 
based on the SAP Fiori Launchpad configuration. This predefined task list is avail-
able in SAP NetWeaver 7.4 SP 6 or higher. SAP_FIORI_LAUNCHPAD_INIT_
SETUP is the task list that you need to run to set up SAP Fiori Launchpad.
 
Requirements
Your server must be on SAP NetWeaver 7.4 SPS 8 or higher to use all the available task 
lists for configuring SAP Fiori.
Follow these steps:
1. Run Transaction STC01.
2. Enter the task name in the Task List field, and then click on the Display Task
List icon 
 to view the tasks (Figure 2.81).
Figure 2.81  Task Manager
3. Be sure to review documentation of every task list before you execute it. To 
view the document, click Goto  Documentation  Display (see Figure 2.82).
Figure 2.82  Task List Documentation

Configuration
2.6
133
4. After you review the document, you can press (F8) or click 
 to generate the 
task list.
5. Make sure the checkboxes next to all the tasks are checked, and then click 
 
to run the task list (see Figure 2.83).
 Important!
Some of the tasks will take a very long time to run, so we recommend running those task 
lists in the background.
Figure 2.83  Task List Final Check
6. After the task list is executed, you can check the log by running Transaction 
STC02 (see Figure 2.84).
Figure 2.84  Task List Run Monitor

Installation and Configuration
2
134
After the task list is successfully completed, then the initial setup of SAP Fiori 
Launchpad is done. We did the same process manually in Section 2.6.1.
Table 2.2 shows some of the tasks and their task lists.
By now, you should have all the pieces in place to start using the SAP Fiori 
system.
2.7
Summary
This chapter provided an overview of the SAP Fiori system landscape and how to 
connect it with the ABAP environment, SAP HANA, and SAP HANA XS. We’ve 
discussed the many steps and tasks that are needed to install and configure SAP 
Fiori. There are certainly many SAP Fiori apps (500+), and the choice of the SAP 
Fiori landscape depends on the types of SAP Fiori apps you’ll use.
Now that you understand how to set up SAP Fiori and what is needed to install 
different components in the landscape, we can look at securing different layers of 
the SAP Fiori system using authentication methods or single sign-on (SSO) proce-
dures. We’ll discuss this in the next chapter.
Task
Task List
SAP Gateway – Basic Configuration
SAP_GATEWAY_BASIC_CONFIG
SAP Fiori Launchpad Initial Setup
SAP_FIORI_LAUNCHPAD_INIT_SETUP
Create Trusted Connection from 
SAP System to SAP Gateway
SAP_SAP2GATEWAY_TRUSTED_CONFIG
Enable Embedded Search
SAP_ESH_INITIAL_SETUP_000_CLIENT
SAP Gateway – Add Backend System
SAP_GATEWAY_ADD_SYSTEM
SAP Gateway – Maintain System Alias
SAP_GATEWAY_ADD_SYSTEM_ALIAS
SAP Gateway – Activate OData Services
SAP_GATEWAY_ACTIVATE_ODATA_SERV
SAP Basis – Activate HTTP Services (SICF)
SAP_BASIS_ACTIVATE_ICF_NODES
Table 2.2  Configuration Task List 

PART II
Implementation


137
Chapter 3 
This chapter discusses the various security mechanisms that can be 
put in place to prevent the unauthorized and unauthenticated use of 
SAP Fiori apps.
3
SAP Fiori Security
When configuring SAP Fiori apps, it’s important that you keep in mind those 
security measures that will ensure the right users are given proper access to 
assigned apps. Additionally, you must ensure that your data and processes sup-
port your business needs without allowing unauthorized access to critical infor-
mation.
In this chapter, we’ll introduce you to security measures for SAP Fiori and the 
various single sign-on (SSO) procedures that are supported. We’ll even look at the 
concepts related to securing the various layers of SAP Fiori. We’ll begin in Section 
3.1 by reviewing some key concepts that will be seen throughout the chapter, 
such as the data flow between different layers of the SAP Fiori landscape, what 
the different network and communication channels are, and how to secure each 
of these channels. After we walk you through the basic concepts, in Section 3.2, 
we’ll give you an overview of the various authentication methods or SSO proce-
dures, such as Kerberos, Security Assertion Markup Language (SAML), and SAP 
logon tickets, and discuss the flow/processes of these authentication methods.
Finally, the chapter concludes with a discussion on the user authorizations that 
are required for different types of apps in Section 3.3. We’ll look at authoriza-
tions that a user needs to have in SAP Fiori Launchpad, SAP Gateway, and the 
ABAP frontend and backend systems to run the apps in SAP Fiori Launchpad.
 Scope
This book doesn’t discuss how to secure the ABAP stack or the SAP HANA platform as 
this is a huge topic. However, we’ve added certain links that point to the online help 
pages.

SAP Fiori Security
3
138
3.1
Communication Channel Security and Encryption
As was discussed in Chapter 1, Section 1.2, SAP Fiori architecture crosses differ-
ent network layers (see Figure 3.1).
Figure 3.1  Internet and Intranet Deployment Scenario
The first point of defense in your SAP Fiori system should be to secure the lines 
of communication between these layers. As Chapter 1 explained, communication 
among the client, reverse proxy, and the servers has to be established by using 
different communication channels and protocols to transfer data securely within 
your SAP Fiori system landscape.
When a user launches an SAP Fiori application, the launch request is sent from 
the client to the SAP Gateway server via SAP Fiori Launchpad. During that launch, 
the SAP Gateway server (or ABAP frontend server) authenticates the user by using 
one of the authentication and SSO mechanisms.
For example, if you’re implementing a transactional app in an Internet-facing sce-
nario (i.e., the external-facing scenario), a common security measure is to put a 
any database/SAP HANA
SAP HANA XS Engine
ABAP Backend Server
ABAP Frontend Server
Reverse Proxy
Search
Model 
Internet
DMZ
HTTPS (HTML/ODATA)
Trusted RFC
HTTPS (OData)
INA Search
Protocol
SAP Web Dispatcher

Communication Channel Security and Encryption
3.1
139
reverse proxy, that is, either the SAP Web Dispatcher or a third-party reverse 
proxy such as from Apache, in the demilitarized zone (DMZ). Additionally, SAP 
recommends deploying the SAP Web Dispatcher in your Internet-facing deploy-
ment scenario (see Figure 3.1) because the security features aren’t very strong in 
the SAP Web Dispatcher; for example, it can’t scan the incoming POST bodies.
Table 3.1 shows the communication paths used by SAP Fiori applications and the 
protocol that is used for the connection. The application and the security creden-
tials type of data are transferred between all these communication paths.
To avoid third-parties intercepting communications between two layers, a system 
needs to be in place that isn’t susceptible to eavesdropping. Securing communica-
tion means monitoring which users have access to their company’s sensitive data 
on SAP Fiori Launchpad, in addition to ensuring that third parties who weren’t 
provided access can’t intercept anything. With communications taking place over 
different layers of the SAP Fiori landscape and an increasing awareness of the 
importance of interception issues, in this section, we’ll discuss a couple of ways to 
secure your communication channels.
Encryption makes data hard to read by unauthorized parties. There are two 
important steps you can take to ensure that your data is safe:
Communication Path
Protocol
Application Type
Web browser to SAP Web 
Dispatcher
OData HTTP/HTTPS Fact sheet and analytical apps
SAP Web Dispatcher to 
ABAP frontend server
OData HTTP/HTTPS All
SAP Web Dispatcher to 
SAP HANA XS
OData HTTP/HTTPS Analytical apps
SAP Web Dispatcher to 
ABAP backend server
INA HTTP/HTTPS
Fact sheet apps
ABAP frontend server to 
ABAP backend server
RFC
Transactional apps and fact 
sheet apps
ABAP backend server to 
SAP HANA/any database
SQL
Analytical apps
Table 3.1  Communication Paths 

SAP Fiori Security
3
140
1. HTTP connections can be protected using Transport Layer Security (TLS) or 
Secure Sockets Layer (SSL).
2. Remote function call (RFC) connections can be protected by using Secure Net-
work Communications (SNC).
Now let’s dig deep into the layers of these communication channels and discuss 
how to secure them. By now, you should be familiar with the SAP Fiori land-
scape. Figure 3.2 shows the high level system landscape from the communication 
channel and apps perspective.
Figure 3.2  SAP Fiori System Landscape from the Apps Perspective
The following are shown in Figure 3.2:
1 The communication between the client and the SAP Web Dispatcher.
2 The communication between the SAP Web Dispatcher and the ABAP servers.
SAP Fiori Launchpad (Browser)
SAP Web Dispatcher
ABAP Frontend
Server
ABAP Backend Server
SAP HANA XS
any database/SAP HANA
Transactional Apps
Fact Sheet Apps
Analytical Apps
Device Agnostic
Access Layer
UI and Integration Layer
Data Layer
Business Process Layer

Communication Channel Security and Encryption
3.1
141
3 The communication between the ABAP frontend server and the ABAP backend 
server.
4 The communication between the SAP Web Dispatcher and SAP HANA XS.
Additionally, Figure 3.2 shows what layers each of these app types pass through 
in the SAP Fiori landscape. All communication channels discussed earlier should 
be encrypted to ensure integrity and confidentiality of data. In the next section, 
we’ll show you how to secure the communication channels of your SAP Fiori 
system.
3.1.1
Client to SAP Web Dispatcher
Starting from the top, to simplify communication between the browser and the 
different systems in the SAP Fiori system landscape, we use a reverse proxy to 
ensure queries from the browser are routed correctly (i.e., to the ABAP frontend, 
ABAP backend, or SAP HANA XS engine). Depending on the type of app users run 
on SAP Fiori Launchpad, a client issues the request to the SAP Web Dispatcher. 
To secure this communication channel, you need to enable the SAP Web Dis-
patcher to use HTTPS communication. The client sends the HTTPS-encrypted data 
to the SAP Web Dispatcher, and then the SAP Web Dispatcher decrypts the data 
and sends the unencrypted data to the ABAP servers.
3.1.2
SAP Web Dispatcher to ABAP Servers
The next level in securing the SAP Fiori landscape is configuring the connection 
between the SAP Web Dispatcher and the ABAP servers. SAP Fiori transactional 
apps route calls from the SAP Web Dispatcher to the ABAP frontend server, and 
SAP Fiori search and fact sheet apps route calls from the SAP Web Dispatcher to 
the ABAP backend server. To secure these communication channels, you need to 
configure the components discussed in the following two sections.
Enable ABAP Frontend and ABAP Backend Servers to Use HTTPS
Following are the high level steps on how to configure the ABAP frontend and 
backend servers to use HTTPS. Because both servers are based on SAP NetWea-
ver, they have the same configuration steps.
Make sure the SAP Web Dispatcher is installed. Next, you’ll configure it as an SSL 
client in the system landscape by following these steps:

SAP Fiori Security
3
142
1. Log in to the operating system (OS) of the SAP Web Dispatcher, and edit the 
instance profile WDP_W<Instance Number>_<hostname>.
2. Enable the HTTPS for the SAP Web Dispatcher. Enter the following details in 
the instance profile WDP_W<Instance Number>_<hostname>:
 DIR_INSTANCE = <SECUDIR_Directory>
 ssl/ssl_lib = <Location of SAP Cryptographic Library>
 ssl/server_pse = <Location of SSL server PSE>
 ssl/client_pse = < Location of SSL client PSE >
 wdisp/ssl_encrypt = 1
 wdisp/ssl_auth = 1
 wdisp/add_client_protocol_header = 1
 wdisp/ping_protocol = https
 icm/HTTPS/verify_client = 1
Following is an example of how we set the SAP Web Dispatcher parameters in 
our system landscape:
 DIR_INSTANCE=C:\dispatcher\
 ssl/ssl_lib=C:\ dispatcher \sapcrypto.dll
 ssl/server_pse=C:\ dispatcher \sec\SAPSSLS.pse
 ssl/client_pse=C:\ dispatcher \sec\SAPSSLC.pse
 wdisp/ssl_encrypt = 1
 wdisp/ssl_auth = 1
 wdisp/add_client_protocol_header = 1
 wdisp/ping_protocol = https
 icm/HTTPS/verify_client = 1
3. For Internet Communication Manager (ICM) ports, enter the following profile 
parameters:
icm/server_port_0 = PROT=HTTPS,PORT=<Web Dispatcher Port>,TIMEOUT=
<Mins>
Following is an example of how we set the ICM ports in our system landscape:
cm/server_port_0 = PROT=HTTPS, PORT=4300, TIMEOUT=60

Communication Channel Security and Encryption
3.1
143
4. Define the routing rules for the SAP Web Dispatcher by entering the following 
profile parameters:
 wdisp/system_0 = SID=<Frontend SID>, MSHOST=<Front-End Hostname>, 
MSPORT= <Frontend Messaging Port>, SRCSRV=*:<Web Dispatcher Port>, 
SRCURL=/sap/opu/;/sap/public/;/sap/bc/;/sap/saml2/;/ui2/nwbc/, 
CLIENT=<Frontend client>
 wdisp/system_1 = SID=<Backend SID>, MSHOST=<Backend Hostname>, 
MSPORT=<Backend Messaging Port>, SRCSRV=*:<Web Dispatcher 
Port>,SRCURL=/sap/es/, CLIENT= <Backend client>
 wdisp/system_2 = SID=<HANA SID>, EXTSRV=<HANA XS URL>,SRCSRV=*:<Web
Dispatcher Port>, SRCURL=/sap/hba/;/sap/hana/;/sap/bi/;/sap/viz/;/
sap/vi/;/sap/ui5/
The following is an example of how we defined routing rules in our system 
landscape:
 wdisp/system_0 = SID=ABA, MSHOST= sapaba02.cloud.sap-nb.com, MSPORT=
8101, SRCSRV=*:1081, SRCURL=/sap/opu/;/sap/bc/; /sap/public/bc/;/
sap/saml2/;/ui2/nwbc/,CLIENT=120
 wdisp/system_1 = SID=ERP, MSHOST= saperp02.cloud.sap-nb.com, MSPORT=
8101, SRCSRV=*:1081, SRCURL=/sap/es/, CLIENT=180
 wdisp/system_2 = SID=HDB, EXTSRV=https://saphdb02.cloud.sap-nb:4302, 
SRCSRV=*:1081, SRCURL=/sap/hba/;/sap/hana /;/sap/bi/
5. Save the instance profile WDP_W<Instance Number>_<hostname>.
6. Restart the SAP Web Dispatcher process.
You’ve now successfully enabled HTTPS for the ABAP servers.
Enable SSL between the SAP Web Dispatcher and the ABAP Frontend Server
Secure Sockets Layer (SSL) is one of the standard security technologies for estab-
lishing an encrypted link between a server and client. SSL allows sensitive infor-
mation to be transmitted securely. Typically, data is sent between the browser/
client and the ABAP servers in plain text, leaving you exposed to eavesdropping. 
The most important part of SSL is the digitally signed certificate authority (CA), so 
when a user tries to connect to the ABAP servers, the client will only trust the cer-
tificates coming from the organizations on its list of trusted CAs. In this section, 

SAP Fiori Security
3
144
we’ll provide you with the high level steps for securing communications between 
the SAP Web Dispatcher and the ABAP frontend server using SSL. Follow these 
steps:
1. Extract the SAP Cryptographic Library package, and install it on the SAP Web 
Dispatcher.
2. Create an SAP Web Dispatcher’s Personal Security Environment (PSE) and the 
certificate requests using the SAPGENPSE configuration tool.
 
SAPGENPSE
For those without an SAP Basis background, the cryptography tool SAPGENPSE is used 
to generate a keystore in which you can store a certificate.
3. After the certificate request is created, send the contents of each of the certifi-
cate requests to a CA to be signed.
4. After you’ve received the certificate request response from your CA, import it 
into the SAP Web Dispatcher’s corresponding PSE using either the trust man-
ager or the SAPGENPSE tool.
5. Create credentials for the SAP Web Dispatcher to access the PSEs during run-
time.
6. Set the SSL profile parameters for the SAP Web Dispatcher.
7. Restart the SAP Web Dispatcher, and test the connection.
3.1.3
ABAP Frontend Server to ABAP Backend Server
In the previous section, we discussed SSL, which is used to secure the communi-
cations between the client and the ABAP server. Similarly, there is a software 
layer in the SAP NetWeaver system called Secure Network Communications
(SNC), which enables stronger authentication, encryption, and SSO mechanism 
server to server. Using SNC, you can enable end-to-end application-level security. 
In addition, you can implement security features such as SSO functions that SAP 
doesn’t provide directly.
In SAP Fiori, transactional apps and fact sheet apps transfer data from the ABAP 
backend to the ABAP frontend server using OData services. We’ll now look at 
how to secure these ABAP layers using SNC.

Communication Channel Security and Encryption
3.1
145
Enabling Secure Network Communications for the ABAP Frontend and 
Backend Servers
You first need to enable SNC on both ABAP servers by following these steps:
1. Log in to the ABAP backend server.
2. Run Transaction RZ10.
3. Select an Instance Profile.
4. Select Extended maintenance, and click Change (see Figure 3.3).
Figure 3.3  Editing a Profile
5. Click the Create button.
6. Enter the parameters shown in Table 3.2.
7. Restart the system.
Parameter
Definition
Value (Example)
snc/enable
Activate SNC
1
snc/gssapi_lib
Full path and file name 
of the shared library 
sapcrypto lib
D:/usr/sap/ERP/SYS/exe/uc/
ANC443/libsapcrypto.so
snc/identity/as
SNC name of the 
application server
p/secude: CN=ERP, O=SAP-NB, 
C=CA
snc/r3int_rfc_secure
Internal RFC connections 
aren’t SNC-protected
0
Table 3.2  Parameters for Enabling Secure Network Communications 

SAP Fiori Security
3
146
Securing Remote Function Call Connections with Secure Network 
Communications
Next, you need to secure the RFC connections. The following steps show how to 
secure the RFC connections between SAP Gateway and the ABAP backend using 
SNC:
1. Log in to ABAP backend server, and run Transaction SM59.
2. Select the RFC Connection, and click 
 (see Figure 3.4).
Figure 3.4  RFC Connection
3. Click the Logon & Security tab, and click the SNC button under Status of
Secure Protocol.
4. Enter “8” in the QOP (Quality of Protection) field.
5. Enter the SNC Name, which we defined in Table 3.2, and click Save.
6. Activate the SNC by selecting the Activate radio button under Status of
Secure Protocol, and click Save.
7. Select the SNC Connection , and click Connection Test.
 
SNC
If the SNC isn’t activated globally, then you need to repeat these steps on the ABAP 
frontend server as well.
The following are some recommendations on how to protect these communica-
tion channels in the SAP Fiori landscape:

Communication Channel Security and Encryption
3.1
147
 OData and HTTP methods 
Because SAP Fiori apps use OData to access data, the reverse proxy must be 
configured to allow certain HTTP methods to be made available. As part of the 
SAP Web Dispatcher configuration, you saw how to enable the SAP Web Dis-
patcher (reverse proxy) to use HTTPS. Similarly, you need to enable the ABAP 
frontend server and SAP HANA XS to use HTTPS methods.
 URL rewriting  
You should configure the URL rewrite rules at the reverse proxy level because 
when the OData services are accessed through reverse proxy, these URLs may 
be invalid or might disclose protocols, host names, or port numbers.
 Internet Communications Framework (ICF) security  
SAP Fiori applications consist of OData services and SAPUI5-based content, 
which are managed by the ICF. For security reasons, these are initially disabled. 
Therefore, you need to activate these services during the configuration.
 Security session protection 
It’s recommended that you activate HTTP security session management using 
Transaction SICF_SESSIONS for SAP NetWeaver version 7.0 and higher. For 
extra protection for security-related cookies, it’s also recommended that you 
activate the following:
 HttpOnly flag: This instructs the browser to deny access to a cookie through 
a client-side script. Therefore, even if a user accidently accesses a link that 
exploits the cross-site scripting (XSS) flaw, the browser won’t reveal the 
cookie to a third party.
 Secure flag: To protect cookies from being passed over unencrypted re-
quests, the secure flag tells the browser to send cookies only if the request is 
sent through a secured channel, such as HTTPS.
Having looked at the security measures in place to protect communications 
between layers, let’s now discuss the authentication and supported SSO methods.
3.1.4
SAP Web Dispatcher to SAP HANA XS
The SAP Web Dispatcher should allow only those requests that will be routed to 
the general ICF services. If you’re using SAP Fiori analytical apps, then the queries 
are routed from the SAP Web Dispatcher to SAP HANA XS. To transfer the data 
securely between these two components, see the following sections.

SAP Fiori Security
3
148
Enable SAP HANA XS to Use HTTPS
The SAP HANA XS engine is a lightweight web application, and SAP HANA uses 
the SAP Web Dispatcher as a reverse proxy. In this section, we’ll provide you 
with high level steps on how to enable the SAP HANA XS engine to use HTTPS.
Follow these steps:
1.
Log in to the OS of the SAP HANA server, and edit the instance profile of the 
SAP Web Dispatcher at /usr/sap/<SID>/HDB<instance_nr>/<hostname>/wdisp.
2.
Add the following parameters:
 wdisp/shm_attach_mode = 6
 wdisp/ssl_encrypt = 0
 wdisp/add_client_protocol_header = true
 ssl/ssl_lib = /usr/sap/<SID>/SYS/global/security/libsapcrypto.so
 ssl/server_pse
 /usr/sap/<SID>/HDB<instance_nr>/<hostname>/sec/SAPSSL.pse icm/
HTTPS/verify_client = 0
3.
Download and install SAP Cryptographic Library on the SAP HANA server, 
and copy libsapcrypto.so to /usr/sap/<SID>/SYS/global/security/lib/.
4.
Copy SAPNetCA.cer to /usr/sap/<SID>/HDB<instance_nr>/<hostname>/sec.
5.
Run the following command to set the SECUDIR environment variable:
export:SECUDIR="/usr/sap/<SID>/HDB<instance_nr>/<hostname>/sec"
6.
Create a certificate request and SSL key pair using the SAPGENPSE tool.
7.
Download SAPNetCA.cer, and save it to /usr/sap/<SID>/HDB<instance_nr>/
<hostname>/sec.
8.
Import the signed certificate using the command:
/sapgenpse import_own_cert -c SAPSSL.cer -p SAPSSL.pse -x <PIN> -r  
SAPNetCA.cer
9.
Create a credential file for the SAP Web Dispatcher to access the PSEs during 
runtime.
10. Import the signed certificate to the SAP Web Dispatcher server.
11. Restart the SAP Web Dispatcher.

Single Sign-On and User Authentication
3.2
149
You’ve successfully enabled HTTPS communication between the SAP Web Dis-
patcher and SAP HANA XS. You can test the configuration by running the URL 
https://<host_name>:<port>/sap/hana/xs/admin.
3.2
Single Sign-On and User Authentication
Now that we’ve covered some of the basic concepts of security in the SAP Fiori 
system, we can dive into some advanced security concepts of the authentication 
strategies that are supported in the SAP Fiori landscape. In this section, we’ll give 
you an overview of various advanced security-related system components based 
on Kerberos/SPNego, SAML 2.0, SAP logon tickets, and X.509 certificate authen-
tication configuration.
The SAP Fiori system needs to know the identity of a user. Knowing a user’s iden-
tity allows the SAP Fiori system to provide a customized experience and grant the 
user permissions to access the data from the backend servers. The authentication 
concept for SAP Fiori apps includes initial user authentication on the ABAP front-
end server, followed by the authentication of all requests to the backend systems. 
Table 3.3 shows different types of SAP Fiori apps that support different authenti-
cation methods for SSO.
Authentication is a process in which the credentials provided by a user from the 
client/browser are compared to those on file in a database of authorized users. 
After the user is authenticated, it then creates a security session between the 
client and the SAP Gateway server for that specific user.
Authentication 
Method for SSO
Transactional 
Apps
Fact Sheet 
Apps
Analytical Apps 
(via SAP HANA XS)
Search (Fact 
Sheet) Apps
User name/
password
Yes
Yes
Yes
Yes
SPNego/Kerberos 
(with SAP 
NetWeaver SSO)
Yes
Yes
No
No
SAML 2.0
Yes
Yes
No
No
SAP logon tickets
Yes
Yes
Yes
Yes
X.509
Yes
Yes
Yes
Yes
Table 3.3  Authentication for Requests in the Frontend Server 

SAP Fiori Security
3
150
 
Important!
Setting up security and authentication is a huge topic, so we recommend you always 
refer to the documentation provided at http://help.sap.com for an in-depth understand-
ing and the most up-to-date information on this topic.
3.2.1
Kerberos/SPNego
Kerberos/SPNego is a network authentication protocol developed by MIT, and is 
a robust protocol that protects from any form of attacks. In a nutshell, Kerberos 
offers the following:
 A protocol for authentication
 Uses tickets to authenticate
 Avoids storing passwords locally or sending them over the Internet
 A trusted third party
 Built on symmetric-key cryptography
If you’ve already implemented Kerberos/SPNego (e.g., Active Directory), then 
this authentication mode is recommended. You can enable Kerberos/SPNego 
authentication for the ABAP frontend server to access the SAP Fiori apps in your 
corporate network. Because the Active Directory system is typically located in 
your corporate network, Kerberos/SPNego authentication can’t be used outside 
your corporate network. To enable SSO outside your corporate network, you 
might have to set up a virtual private network (VPN) connection.
 
Configuring Kerberos/SPNego
The complete detailed steps for configuring Kerberos/SPNego authentication has been 
documented in the Implementation Guide (IMG) on the SAP Help Portal at http://
help.sap.com/sapsso.
The following are some of the advantages of using the Kerberos/SPNego authen-
tication:
 It simplifies the logon process to the ABAP frontend server by using the user’s 
Windows logon data.
 A separate logon to the ABAP frontend server isn’t required.

Single Sign-On and User Authentication
3.2
151
 SSO setup within your system landscape will be simplified by using Kerberos 
for both SAP GUI and HTTP.
 It’s supported by most mobile device vendors.
 Important!
The configuration of the Kerberos/SPNego authentication requires significant involve-
ment from your Active Directory administration team.
3.2.2
Security Assertion Markup Language 2.0
SAML is an XML-based standard for communicating identity information 
between organizations and service providers. It’s used for enabling the secure 
transmittal of authentication tokens and other user attributes across domains.
If you’ve already implemented SAML version 2.0 as the method of SSO, you can 
then configure the ABAP frontend server for use with SAML 2.0 in conjunction 
with Identity Provider (IDP) software such as SAP IDP, Ping Federate, or Micro-
soft’s Active Directory Federation Service (AD FS). In comparison with Kerberos 
authentication, SAML 2.0 authentication is relatively easy to configure. To enable 
SSO outside your corporate network (Internet-facing), you must make sure that 
the SAML IDP is securely accessible from outside your corporate network.
The complete detailed steps for configuring SAML 2.0 authentication has been 
documented in the IMG on the SAP Help Portal at http://help.sap.com/nw74. Once 
there, choose Application Help  Function-Oriented View  Security  User
Authentication and Single Sign-On  Integration in Single Sign-On (SSO)
Environments  Single Sign-On for Web-Based Access  Using SAML 2.0  Con-
figuring AS ABAP as a Service Provider.
The following are some of the advantages of using SAML 2.0:
 Works well in scenarios where the trust configuration can be complicated
 Enables you to map SAP users based on user name attributes or a user’s e-mail 
address
 Works well for scenarios with multiple user domains
 Important!
In the SAP Fiori system landscape, SAML 2.0 is supported only for communication with 
the ABAP frontend server—not for SAP HANA.

SAP Fiori Security
3
152
Let’s take a closer look at SAML authentication flow. The most basic SAML archi-
tecture involves three main objects: a user, an IDP, and a service provider (see 
Figure 3.5). The users will need to authenticate themselves in a process known as 
service provider-based authentication.
Figure 3.5  SAML Authentication
Looking at Figure 3.5, the steps for service provider-based authentication include 
the following:
1 First, the user attempts to access the application (i.e., the client sends a request 
to SAP Gateway server via a proxy server).
2 The federated identity software running on the IDP kicks into action, and the 
SAML 2.0 IDP server validates the user credentials, allowing the user to be 
properly authenticated.
3 The IDP then constructs and sends a specially formatted message containing 
information about that user (SAML artifact) back to the SAP Gateway server. 
The SAP Gateway then determines that the message came from a known IDP 
and creates a session for that specific user in the SAP Gateway, allowing the 
user direct access to that application.
Reverse
Proxy
SAML 2.0
Identity Provider
ABAP Frontend
Server
User

Single Sign-On and User Authentication
3.2
153
 Transparency
This whole process of the SAML message being created and the operation between the 
IDP and SAP Gateway is completely transparent to users. All they see is SAP Fiori 
Launchpad after clicking on the URL or app.
3.2.3
SAP Logon Tickets
SAP logon tickets are the cookies of a session that are stored in the client’s 
browser. For SAP logon tickets, you have two options: you can either use the 
existing system, such as a portal that already issues logon tickets, or you can con-
figure the ABAP frontend server to issue logon tickets. You must also configure 
the required backend systems (ABAP or SAP HANA) to accept logon tickets. SSO 
then provides access to the SAP HANA database (or any database) from any front-
end application without needing to log in. The SAP HANA trust store contains the 
root CA that is used to sign the trusted certificates required for SSO authentica-
tion.
 Important!
User mapping isn’t supported, so you must ensure that users in the ABAP system have 
the same user names as the database users in SAP HANA. If a customer uses all three 
types of SAP Fiori apps, make sure the user name complies with the stricter restriction 
rules from SAP HANA.
As we explained in Chapter 2, Section 2.6.5, from SAP NetWeaver 7.4 SP 6, you 
can even perform system configuration tasks automatically by using pre-
defined task lists. You can use the SAP_SAP2GATEWAY_TRUSTED_CONFIG 
task list to create a trusted connection from an SAP system to an SAP Gateway 
system. Follow the process from Chapter 2, Section 2.6.5, and the system will 
guide you through the configuration of the tasks when you execute a task list 
(see Figure 3.6).
The complete detailed steps for configuring the SAP logon token authentication is 
documented in the IMG on the SAP Help Portal at http://help.sap.com/nw74. Once 
there, choose Application Help  Function-Oriented View  Security  User
Authentication and Single Sign-On  Integration in Single Sign-On (SSO)
Environments  Single Sign-On for Web-Based Access  Using Logon Tickets  
Using Logon Tickets with AS ABAP  Configuring AS ABAP to Accept Logon
Tickets.

SAP Fiori Security
3
154
Figure 3.6  Predefined Task List
After the configuration is completed, the ABAP frontend server acts as a ticket 
issuing system, and the ABAP backend system acts as a ticket accepting system. 
The following are the authentication flow steps between the ABAP frontend and 
ABAP backend servers:
1. The user logs in with the user name and password to the ABAP frontend server.
2. The ABAP frontend verifies the user name and password. After the authentica-
tion is successful, the user is logged on to the system and issued a logon ticket.
3. The user’s web browser then stores the logon ticket and uses that ticket for 
authentication on the ABAP backend system.
4. The web browser then sends the issued logon ticket with the user logon ticket 
to the ABAP backend server.
5. The ABAP backend server verifies the tickets.
6. If the tickets are valid, then the ABAP servers provide access to the user.
 
SAP Logon Tickets
SAP logon tickets are transferred as web browser cookies; therefore, you can only use 
this authentication if all the systems in your landscape are located within the same DSN.
3.2.4
X.509 Certificate
If your customer has implemented a public key infrastructure (PKI) for user 
authentication, you can then use X.509 certificates by configuring the required 
backend systems (ABAP or SAP HANA) to accept X.509 certificates.

User Authorizations and Management
3.3
155
The following are some advantages of using X.509 certificates:
 X.509 certificates work well in Internet-facing scenarios because they don’t 
require an issuing system during logon.
 Using X.509 certificates for both SAP GUI and HTTP will simplify SSO setup 
within your system landscape.
To run the SAP Fiori apps on desktops and mobile devices, X.509 certificates must 
be distributed to them. For mobile devices, X.509 certificates are distributed by 
mobile management software.
To minimize security risks, SAP recommends implementing a method to revoke 
the X.509 certificates because they remain valid for a relatively long time.
3.3
User Authorizations and Management
Two primary processes are involved in providing access in SAP Fiori:
 Authentication process  
Proves that users are allowed to access the servers.
 Authorization process  
Determines whether the person who is logged in has access to a specific app or 
to perform a specific action.
In this section, we’ll look at the various user authorization steps for SAP Fiori 
Launchpad, SAP Gateway, and different SAP Fiori apps.
Before we begin with our discussion on authorizations, let’s review user manage-
ment.
3.3.1
User Management
A couple of user management tools are provided for both SAP NetWeaver AS Java 
and SAP NetWeaver AS ABAP. You’ll use the following transaction codes while 
working with user management in SAP Fiori:
 Transaction SU01 – User Maintenance (user management for AS ABAP)
 Transaction PFCG – Profile Generator (to create roles and assign authorizations 
to users)

SAP Fiori Security
3
156
There are a couple of important considerations to note from a user management 
perspective:
 The user must exist in the following:
 SAP Gateway frontend server for all app types
 SAP Business Suite ABAP backend server for all app types
 SAP HANA database for fact sheet and analytical apps
 User names must be the same in both the ABAP system and the SAP HANA 
database. If you’re planning to implement all three types of apps, make sure the 
user name complies with the stricter restriction rules from SAP HANA.
 If your deployment is embedded, it isn’t necessary to create users in an addi-
tional system.
 You can use the Central User Administration (CUA) to synchronize users in the 
backend and the frontend systems to ensure user names in both systems match.
3.3.2
User Authorization
With a better understanding of how users are managed, let’s now look at the dif-
ferent user authorizations required.
SAP Fiori Launchpad
SAP Fiori Launchpad is the entry point for all SAP Fiori apps. After users are 
authenticated, they can see and access those SAP Fiori apps that have been 
assigned by an administrator to the catalog designed for the user’s role.
SAP delivers business roles for users of SAP Fiori apps. Every business role pro-
vides access to a sample of apps relevant for specific business users. For example, 
the PFCG role for the business catalog of the My Quotations app gives the user 
access to the My Quotations app (see Figure 3.7). So, for the user to see this app 
in SAP Fiori Launchpad, the administrator has to assign the business catalog role 
to that user. In Chapter 4, Section 4.4, we’ll discuss these roles and authorizations 
in great detail. SAP Fiori Launchpad catalog and the UI PFCG roles bundle all 
frontend privileges that are required for the execution of the apps.
Figure 3.7 shows the app-specific (My Quotation app) implementation help page 
from the SAP Fiori apps reference library.

User Authorizations and Management
3.3
157
Figure 3.7  Roles for the My Quotations App
SAP Gateway
After the user is authorized to see the app in SAP Fiori Launchpad, the next step 
is to give authorizations to run/start OData services. The SAP Gateway-level 
authorization is used to set up authorizations to start OData services to run an 
app. Figure 3.8 shows start authorizations for one of the services.
Figure 3.8  Adding OData Service Permissions

SAP Fiori Security
3
158
Transactional and Fact Sheet Apps
Similar to the frontend PFCG role for the business catalog covered in Section 
3.3.2, SAP delivers backend PFCG roles for every transactional app and fact sheet 
app; for example, the My Quotations app (refer to Figure 3.7) is delivered with a 
backend authorization role (PFCG) for the technical catalog. These roles include 
references to the corresponding OData services, which are required to run the 
apps.
 
Transactional App Roles
Roles for the transactional apps don’t comprise authorizations for business data to be 
displayed in the app. These authorizations are provided by customer.
For the user to access this transactional app, the administrator has to assign both 
the backend and frontend roles to the user. This is discussed further in Chapter 4, 
Section 4.3 and Section 4.4.
Fact Sheet Apps
For fact sheet apps, in addition to the OData service authorization, you need to 
authorize users’ access to the underlying search models. You can find the search 
model entries in the Authorizations tab of Transaction PFCG (Role Mainte-
nance). Follow these steps:
1. From your ABAP backend server, run Transaction PFCG.
2. Enter a role name, for example, “SAP_SD_SALESORDER_APP”, and click 
.
3. Go to the Authorization tab, and click 
. You should now see the screen as 
shown in Figure 3.9.
Figure 3.9  Fact Sheet Authorizations

User Authorizations and Management
3.3
159
You must add entries to the authorization object S_ESH_CONN in the subtree 
Basis: Administration. Fill in the following fields (see Figure 3.9):
 Request of Search Connector  
This value is the request for which a user receives search results.
 Search Connector ID  
This is the ID of the search connectors that the user will be allowed to explore.
 System ID  
This is the system ID that the user will be allowed to explore.
 Client  
This is the client that is taken into account during the search.
We’ll discuss this in further detail in Chapter 4, Section 4.3.2.
Analytical Apps
For a user to read KPI data, an SAP Fiori analytical app needs to be granted to app-
specific roles in the SAP HANA server. For example, Figure 3.10 shows the role 
for a Cash Position app that is assigned to a user.
Figure 3.10  SAP HANA App-Specific Roles

SAP Fiori Security
3
160
3.4
Summary
This chapter offered a foundation in the technologies and processes needed to 
configure access control in SAP Fiori. Although this is a complex and involved 
topic with many third-party technologies, the introduction provided here serves 
as a kick-start to configure your solution. We’ve provided you with an overview 
of how communication happens at different layers and how to secure the com-
munication channels. At this point, you should have a solid understanding of the 
different authentication methods that are supported in the SAP Fiori landscape 
and how to configure them in the frontend and backend servers. These roles and 
authorization concepts will be discussed throughout the rest of the book.
We can now look into the SAP Fiori apps implementation process. You’ll learn 
how to implement SAP Fiori transactional apps in detail in Chapter 4.

161
Chapter 4 
In this chapter, we’ll look at implementing transactional apps—from 
activating the SAPUI5 component to running the app.
4
Implementing Transactional Apps
As you’ve learned from the previous chapters, SAP Fiori transactional apps can be 
implemented on an SAP HANA database or any database. Therefore, no matter 
what the SAP Fiori system landscape may be (AS ABAP, SAP HANA database, or 
SAP HANA XS), the major tasks for implementing transactional apps remain the 
same in all environments. The ABAP frontend server infrastructure is comprised 
of the central UI component with an SAPUI5 control library, SAP Fiori Launch-
pad, as well as SAP Gateway with the OData enablement. At this point, we’ve 
installed and configured all these components in the previous chapters. The ABAP 
backend server contains the business logic, with the frontend components access-
ing the backend server through a trusted remote function call (RFC) connection.
Prerequisites
Before you proceed with these steps, make sure the frontend and backend components for 
your app are already available in your system landscape (refer to Chapter 2, Section 2.5.1).
We’ll begin with the ABAP frontend server tasks. The frontend server (ABAP) 
contains the user interface (UI) layer with the product-specific UI components for 
the products as well as the infrastructure components. We’ve already activated 
the central UI add-on Internet Communication Framework (ICF) services in Chap-
ter 2. We’ll now work on the central services relevant to this specific app. In 
this section, we’ll use the transactional app Create Sales Order as an example.
The following is an overview of the configuration tasks for transactional apps:
 Activate the SAPUI5 component.
 Activate OData services for the SAPUI5 applications in SAP Gateway.

Implementing Transactional Apps
4
162
 Set up the frontend roles. This involves the following subtasks:
 Copy the business catalog role that provides access to the relevant catalog in 
SAP Fiori Launchpad.
 Add start authorizations for the required OData service to the business role.
 Assign frontend roles to users.
 Set up the backend roles. This involves the following subtasks:
 Copy the backend authorization role that provides access to the backend 
data.
 Assign backend roles to users.
The following sections look in detail at these tasks for configuring the frontend 
and the backend servers when implementing transactional apps.
4.1
Activating the SAPUI5 Component
During a frontend configuration, the first step is to activate the Internet Commu-
nication Framework (ICF) service via Transaction SICF (Activate and Maintain SAP 
Web Services). Transaction SICF is used to maintain services for HTTP communi-
cation in the SAP system using the Internet Communication Manager (ICM) and the 
ICF. This is a software layer in the application server that provides an ABAP inter-
face for HTTP, HTTPS, and SMTP requests.
For security reasons, all the ICF services are made available in an inactive state. 
When you first install your new SAP system, standard SAP services may not be 
active, so you’ll have to use Transaction SICF to activate them. Also, when you 
create a new web service, you may have to activate it before it can be executed; 
otherwise, you may get an error.
Now that you know what Transaction SICF is and what it does, you need to know 
which service to activate to enable the Create Sales Order transactional app. For 
that, you need to go to the app-specific page in the apps reference library. Follow 
the steps in Chapter 2, Section 2.4 to get the SAPUI5 application name of the Cre-
ate Sale Order app (see Figure 4.1)

Activating the SAPUI5 Component
4.1
163
Figure 4.1  SAPUI5 Application
The first step is to activate the SAPUI5 application service on the ABAP frontend 
server. To do so, follow these steps:
1. Run Transaction SICF (Maintain Services) on the frontend server, and press 
(Enter).
2. Enter the Service Name (i.e., the technical name you copied in the previous 
step), and press (F8) on the keyboard, or click the Execute icon (see Figure 4.2).
Figure 4.2  Maintain Services
 Note
If you can’t find the service on the SAP Gateway server (ABAP frontend), it means you 
haven’t installed the SAP Fiori app UI components. Go back to Chapter 2, Section 2.5, 
for instructions on installing the UI component.

Implementing Transactional Apps
4
164
3. Navigate to the path, default_host  sap  bc  ui5_ui5  sap.
4. Under this node, navigate to the SAPUI5 application for the Create Sales Order 
app: sd_so_cre (see Figure 4.3).
Figure 4.3  SD_SO_CRE Service
5. To activate the service (SAPUI5 application), right-click on the service, and 
select Activate Service (see Figure 4.4).
Figure 4.4  Activating the Service

Activating the OData Services
4.2
165
6. In the dialog box that appears, click Yes with the hierarchy icon (see Figure 4.5).
Figure 4.5  Activating with Hierarchy
We’ve now successfully activated the ICF service. Now, let’s move on to activat-
ing the OData service.
4.2
Activating the OData Services
In Chapter 3, we discussed how the SAP Fiori client, ABAP frontend, and the 
ABAP backend communicate, and how these apps send OData requests through 
the ABAP frontend server to the ABAP backend server securely by a trusted RFC. 
In this section, we’ll discuss how to activate the OData service. For those who are 
new to OData services, we’ll discuss it in greater detail in Chapter 7. To keep it 
simple, OData is a standardized protocol built over existing HTTP and REST pro-
tocols to support Create, Read, Update, and Delete (CRUD) operations for creat-
ing and consuming data application programming interfaces (APIs).
To begin activating the OData services for your app, follow these steps:
1. From the app-specific page (Create Sales Order) in the apps reference library, 
copy the Technical Name of the OData service from the OData Services sec-
tion (see Figure 4.6).
Figure 4.6  OData Service for Create Sales Order App

Implementing Transactional Apps
4
166
2. Run Transaction /IWFND/MAINT_SERVICE to activate and maintain services 
on the frontend server, and press (Enter).
3. On the Activate and Maintain Services page, click Add Service (see Figure 
4.7).
Figure 4.7  Adding the Service
4. Enter the System Alias of your backend system.
5. In the External Service Name field, enter the information shown in Figure 
4.8. Then enter the Technical Service Name of the OData service for your app. 
In this example, it’s the technical name that you copied in step 1. Click Get Ser-
vices.
Figure 4.8  Get Services
6. Select the service name in the Select Backend Services section. From here, 
click Add Selected Services (see Figure 4.9).
7. Enter the Technical Service Name for the service in your customer name-
space.
8. Assign a package, or click Local Object (see Figure 4.10).

Activating the OData Services
4.2
167
Figure 4.9  Adding a Selected Service
Figure 4.10  Assigning a Package
9.
Click Execute to save the service.

Implementing Transactional Apps
4
168
10. After the service is activated, you should receive a popup message, which you 
can confirm (see Figure 4.11).
Figure 4.11  Activation Confirmation
The service is now added and activated successfully!
Now let’s check whether this service is responding by running it in a browser. To 
do so, follow these steps:
1. Click the 
 button to go back to the Activate and Maintain Services screen.
2. Check whether the SAP System Alias is maintained correctly. If not, delete the 
alias, and add the correct one.
3. Select the ODATA node, and click Call Browser (see Figure 4.12).
Figure 4.12  Calling the OData Service
4. Click Allow, and select the Remember My Decision checkbox (see Figure 4.13).

Activating the OData Services
4.2
169
Figure 4.13  Allowing Access
You’ve now tested the service, and it works like a charm. Now, let’s check 
whether the hash key is generated. A hash key is generated whenever you call a 
service. This key is required for the generation of an authorization profile. You 
can restrict access to the system on the system level.
You can verify the hash key generation in the hash key table. To do so, follow 
these steps:
1. Return to the SAP GUI (frontend server), and run Transaction SE16 to view the 
table contents.
2. Enter “USOBHASH” in Table Name, and click on the Table Content button 
(see Figure 4.14).
Figure 4.14  Hash Key Table
3. On the next screen, enter the following details, and click Execute (see Figure 
4.15):
 PGMID: “r3tr” (program ID)
 OBJECT: “IWSG” (object type)
 OBJ_NAME: “ZSRA017*” (service name activated in the previous steps)

Implementing Transactional Apps
4
170
Figure 4.15  Selection Screen
You should receive a table content screen, similar to Figure 4.16.
Figure 4.16  Hash Key
You’ve now activated the ICF and OData service successfully. The next step is to 
set up the roles and authorizations for the users to access this app.
4.3
ABAP Frontend Roles
This is the most important step in the apps implementation process. SAP Fiori 
Launchpad is the entry point to SAP Fiori apps. For users to access the apps, cer-
tain business user rights need to be assigned to those users.
SAP delivers standard technical content for every specific app, and you can get 
the details from the apps reference library (see Figure 4.17). For now, we’ll focus 
on just the PFCG role for the business catalog because that is what we need in this 
step; all the other components will be covered in the subsequent chapters.

ABAP Frontend Roles
4.3
171
Figure 4.17  Technical Configuration
You need to understand this simple standard flow before you work with this 
content. As shown in Figure 4.18, apps/tiles are assigned to catalogs, and these 
catalogs and users are assigned to roles. So, when the user logs in to SAP Fiori 
Launchpad, it will show certain apps depending on what roles the user is 
assigned to.
Figure 4.18  Assigning a Catalog and Users to a Role
The PFCG role for business catalog provides access to a sample of apps relevant 
for specific business users. In our example, we’ll be enabling the Create Sales 
CATALOG
ROLE
USER
SAP_SD_BC_FIELDSALESREP_X1
SAP_SD_BCR_FIELDSALESREP_X1
Test User (ANILB)
Create Sales
Order

Implementing Transactional Apps
4
172
Order app for sales representatives. So, any user who has access to business role 
SAP_SD_BCR_FIELDSALESREP_X1 will have access to the following apps as well 
in SAP Fiori Launchpad:
 Create Sales Orders
 Change Sales Order
 Customer Invoices
 Track Sales Order
 Check Price and Availability
In the sections that follow, we’ll copy the business role and assign users to that 
role. After roles are assigned to a user, SAP Fiori Launchpad will display the apps 
that are included in the catalog.
4.3.1
Copy Business Catalog Role
The first step in this process is to copy the template business role. The authoriza-
tion for the Create Sales Order app is included in the PFCG role for business cat-
alog for SAP_SD_BCR_FIELDSALESREP_X1.
Follow these steps:
1. Run Transaction PFCG (Role Maintenance).
2. Enter the role name in the Role field.
3. Copy the business role to your customer namespace by clicking the Copy icon 
on the top left (see Figure 4.19).
Figure 4.19  Copying Roles  

ABAP Frontend Roles
4.3
173
4. Enter the new role name, and click Copy all in the popup window (see Figure 
4.20).
Figure 4.20  Copying All Contents of the Role
5. You’ll get a 
 notification on the bottom left after the role is copied.
4.3.2
Start Authorization
You’ve successfully copied the role in previous steps, so now you need to add the 
start authorizations for the activated OData services to launch the app. To do this, 
you need to assign the start authorization to the business catalog role you copied 
in the previous section.
 App-Specific OData Service
You must call the app-specific OData service at least once before you can assign start 
authorizations for it (refer to Section 4.2)
Follow these steps to add OData start authorizations to the copied role on the 
frontend server:
1. Edit the business role by clicking the Pencil icon 
 (see Figure 4.21).
Figure 4.21  Editing the Copied Role

Implementing Transactional Apps
4
174
2. Navigate to the Menu tab, and click the dropdown next to the Transaction
button (see Figure 4.22).
Figure 4.22  Inserting a Node
3. Select the Authorization Default object from the dropdown (see Figure 4.23).
Figure 4.23  Authorization Default
4. Select and enter the fields in the Service popup window, and search for the 
OData service that you activated in the previous section. Enter the relevant 
information (see Figure 4.24):

ABAP Frontend Roles
4.3
175
 Authorization Default: “TADIR Service”
 Program ID: “R3TR”
 Obj. Type: “IWSG”
 TADIR Service: “ZSRA017*”
Figure 4.24  Search Service
5. Select the OData service from the search results, and click Execute (see Figure 
4.25).
Figure 4.25  Selecting the Service
6. Click Copy, and then you’ll see a notification on the bottom-left after the entry 
is created (see Figure 4.26).
 Table TADIR
Table TADIR is the standard table in SAP that is used to store a directory of repository 
object information.

Implementing Transactional Apps
4
176
Figure 4.26  Adding the Service
You should now see the service added to the role (see Figure 4.27).
Figure 4.27  TADIR Service

ABAP Frontend Roles
4.3
177
7.
Navigate to the Authorization tab, and click the button next to the Profile
Name field to generate the authorization profile/propose profile name (see 
Figure 4.28).
Figure 4.28  Change Authorization
8.
Click the Pencil icon 
 next to Change Authorization Data.
9.
Click Yes to save the role (see Figure 4.29).
Figure 4.29  Saving the Role
10. Generate the role by clicking the Generate button on the next screen (see Fig-
ure 4.30).

Implementing Transactional Apps
4
178
Figure 4.30  Generating the Role
11. Check whether the role is generated correctly by double-clicking the last node 
in the hierarchy (see Figure 4.31).
Figure 4.31  Service Name
You’ve successfully added the activated OData service to the business role, which 
you copied from the SAP standard business role.
4.3.3
Assign Roles to Users
In the next step, we’ll this assign business catalog role to a user. After the user is 
assigned to this role, he can view the Create Sales Orders app in SAP Fiori Launch-
pad.
Follow these steps:
1. Run Transaction PFCG.
2. Enter the role name that you created in the previous section, and click 
 (see 
Figure 4.32).

ABAP Frontend Roles
4.3
179
Figure 4.32  Editing the Role
3. Navigate to the User tab, and add a new row (see Figure 4.33).
4. Enter the appropriate information in the User ID field, and press (Enter).
Figure 4.33  User Name
5. After the user is added, click Save 
.
You’ve now successfully granted access to the Create Sales Order app to a user. To 
recap, you first activated the ICF service of the SAPUI5 application, which acti-
vates the UI layer of the app, and then you activated the OData service, which is 
responsible for retrieving the data from the backend. You then copied the stan-
dard catalog role and assigned it to a user, which will grant access to view the app 
in SAP Fiori Launchpad. Now that you’ve completed the frontend task, let’s com-
plete the backend tasks to enable the user to view the data in the app.

Implementing Transactional Apps
4
180
4.4
ABAP Backend Roles
SAP delivers backend roles for every app. These roles include references to the 
corresponding OData services that are required to run the apps. In this section, 
we’ll copy the backend role and assign roles to the users.
4.4.1
Copy the Backend Role
To copy the backend role, you’ll follow the same steps as in the frontend server 
(i.e., to copy the frontend role; refer to Section 4.3). In this situation, it will be for 
a different role (i.e., backend role) on the backend server. You’ll copy the backend 
authorization shown in Figure 4.34.
Figure 4.34  ABAP Backend Role
Now, follow these steps:
1. Log in to the ABAP backend server.
2. Run Transaction PFCG (Role Maintenance).
3. Enter the role name, and click Copy on the top left.
4. Enter the new role name, and click Copy all in the Query popup window (see 
Figure 4.35).
Figure 4.35  Copying the Backend Role Name

Running the App
4.5
181
4.4.2
Assigning Roles to Users
In this section, you’ll assign the custom role to a user by following these steps:
1. Log in to the ABAP backend server.
2. Run Transaction PFCG.
3. Edit the role that you copied in the previous section by clicking 
.
4. Navigate to the User tab, and add a new row.
5. Enter the User ID field, press (Enter), and then click Save (see Figure 4.36).
Figure 4.36  Changing the Role
You’ve successfully provided the user access to the backend data for the Create 
Sales Order app. In the next section, you’ll test and run your new app.
4.5
Running the App
Now that you’ve configured both the ABAP backend and frontend components, 
you’re ready run and view the data. Following these steps:
1. Run SAP Fiori Launchpad via http://<host>:<port>/sap/bc/ui5_ui5/ui2/ushell/
shells/abap/FioriLaunchpad.html.
2. Log in to SAP Fiori Launchpad with the User ID you gave access to in the pre-
vious sections. The business catalog with the Create Sales Order app should be 
visible (see Figure 4.37).

Implementing Transactional Apps
4
182
Figure 4.37  SAP Fiori Launchpad
3. Run the app by clicking the Create Sales Order tile, and you should now be 
able to launch the app (see Figure 4.38).
Figure 4.38  Create Sales Order App
You’ve successfully enabled the Create Sales Order app!

Custom Business Catalogs and Roles
4.6
183
4.6
Custom Business Catalogs and Roles
In the previous section, we discussed how to enable the Create Sales Order 
transactional app using the standard SAP business role (SAP_SD_BCR_FIELD-
SALESREP_X1) and the standard SAP business catalog (SAP_SD_BC_FIELD-
SALESREP_X1). However, in a real-world scenario, you might have to create 
your own catalogs and roles.
To demonstrate how to do this, let’s look at an example. User A is supposed to 
only have access to the Create Sales Order transactional app. User B is supposed 
to only have access to the Change Sales Order transactional app. However, both 
the apps are part of the same standard catalog (SAP_SD_BC_FIELDSALESREP_
X1), so if you assign the standard SAP business role to both users, then they both 
will be able to use the apps. To remedy such scenarios, you must create a custom 
business catalog and a custom role. In this exercise, we’ll show you how to 
achieve that.
4.6.1
Create a New Launchpad and Application
In this section, we’ll walk through how to create a new launchpad and application 
for your custom business catalog. Follow these steps:
1. Log in to your ABAP frontend server, and run Transaction LPD_CUST.
2. Create a new launchpad by clicking the New Launchpad button (see Figure 
4.39).
Figure 4.39  New Launchpad
3. Enter the field values shown in Figure 4.40.

Implementing Transactional Apps
4
184
Figure 4.40  Launchpad Role
4. Click Yes to ignore the namespace (see Figure 4.41).
Figure 4.41  Ignoring the Namespace
5. Create a new application by clicking New Application (see Figure 4.42).
Figure 4.42  New Application
6. Enter “Create Sales Order” in the Link Text field. From the Application Type
dropdown, select URL (see Figure 4.43).

Custom Business Catalogs and Roles
4.6
185
Figure 4.43  Application Type
7.
Click the Edit button 
 next to the URL input box.
8.
Enter “/sap/bc/ui5_ui5/sap/sd_so_cre” in the URL box (see Figure 4.44).
Figure 4.44  Application Parameter
9.
Click Show Advanced (Optional) Parameters.
10. Click the Edit button 
 next to the Application Alias input box.
11. Enter “SalesOrder” in the box.
12. Enter “SAPUI5.Component=cus.sd.salesorder” in the Additional Informa-
tion box, and then click Save (see Figure 4.45).

Implementing Transactional Apps
4
186
Figure 4.45  Application Alias
4.6.2
Create and Assign a Transport Request
Before we move to the next step, we want to discuss the transportation concepts 
in SAP Fiori Launchpad designer. You can launch SAP Fiori Launchpad designer 
in two scopes:
 Customization scope  
http://hostname:port/sap/bc/_ui5/sap/arsrvc_upb_admn/main.html20? 
sap-client=120&scope=CUST
 Configuration scope  
http://hostname:port/sap/bc/ui5_ui5/sap/arsrvc_upb_admn/main.html20? 
sap-client=120&scope=CONF
When you create, update, or delete a catalog or tile, all these actions have to be 
captured. If you launch the SAP Fiori Launchpad designer in a customization 
scope, these actions are captured under the Customizing request. Similarly, when 
you launch it in the configuration mode, all the actions are captured in the work-
bench request. For testing, the customization scope can be used, and then the 
content can be transported through the Customizing request. Next we’ll show 
you how to create and assign a request SAP Fiori Launchpad designer.

Custom Business Catalogs and Roles
4.6
187
Follow these steps:
1. Log in to your ABAP server, and run Transaction SE01.
2. Create a new request by clicking 
.
3. Select Customizing request, and click 
 (see Figure 4.46).
Figure 4.46  Creating a New Transport Request
4. Enter a Short Description, and then click 
 (see Figure 4.47).
Figure 4.47  Saving the Request

Implementing Transactional Apps
4
188
You should now see the request, as shown Figure 4.48.
Figure 4.48  Transport Request
5. Log in to SAP Fiori Launchpad designer at http://hostname:port/sap/bc/ui5_ui5/
sap/arsrvc_upb_admn/main.html20?sap-client=120&scope=CUST.
6. Click 
 on the top-right corner.
7. Uncheck the None (Local Object) checkbox, and then select the Customizing 
Request from the dropdown box. Click OK (see Figure 4.49).
Figure 4.49  Assigning the Transport Request
4.6.3
Create a New Catalog
Now you’re all set to create, update, or delete catalogs or tiles, with all the actions 
captured in the transport requests. To create a new catalog, follow these steps:
1. From the SAP Fiori Launchpad designer screen, click Catalogs (see Figure 4.50).

Custom Business Catalogs and Roles
4.6
189
Figure 4.50  Selecting Catalogs
2. Create a new catalog by clicking +.
3. Select the Standard catalog, enter the details shown in Figure 4.51, and click 
Save.
Figure 4.51  Creating the Catalog
4. Select the catalog that you just created in the previous step.
4.6.4
Create New Target Mapping
Next, you need to create a new target mapping. Follow these steps:
1. Click the Target Mapping icon 
. Click Create Target Mapping (see Figure 4.52).
2. Intent is a mechanism that allows end users to perform actions on semantic 
objects. In the Intent section, select the semantic object by clicking 
, and 
then manually entering the action. Enter the information in the fields, as 
shown in Figure 4.53.

Implementing Transactional Apps
4
190
Figure 4.52  Creating Target Mapping
Figure 4.53  Intent Section
3. To configure the target, select the Other SAP Fiori App radio button, and then 
enter the details shown in Figure 4.54. Click Save.
Figure 4.54  Target Section

Custom Business Catalogs and Roles
4.6
191
4. In the General section, configure the following fields (see Figure 4.55):
 Information: In this field, you can enter any important information or com-
ments.
 Device Types: Select all the devices; tiles will only be displayed for the 
devices that are selected here.
 Parameters: Define the optional or mandatory parameters of the target 
mapping.
 Allow additional parameters: Allows passing additional parameters that 
aren’t defined in the parameters table.
5. Click Save.
Figure 4.55  General Section
6. Confirm to save the changes by clicking OK.
4.6.5
Add a Static Tile
Next, you’ll add a new tile. Follow these steps:
1. Click the Tiles icon, and then click + to add a tile (see Figure 4.56).

Implementing Transactional Apps
4
192
Figure 4.56  Adding a Tile
There are three type of tiles, and each shows information differently (see Figure 
4.57):
 Static tile: Displays the static information such as the title, subtitle, logo, and 
information.
 Dynamic tile: Displays all the information that the static tile displays and 
shows the value dynamically from the backend. This value is refreshed 
depending on the refresh interval that you set during the tile creation.
 News tile: Streams a live news feed directly in your SAP Fiori Launchpad.
Figure 4.57  Dynamic Tile and Static Tile
Title
Subtitle
Icon
Information
Number Unit
Dynamic Value
Static Tile
Dynamic Tile

Custom Business Catalogs and Roles
4.6
193
2. Select the App Launcher – Static tile (see Figure 4.58).
Figure 4.58  Adding the Static App Launcher
3. Click on the new tile that you just added (see Figure 4.59).
Figure 4.59  Selecting the New Tile
4. Enter “Create Sales Order” in the Title field, and select an icon from the Icon
field (see Figure 4.60).
5. Enter the following details in the Navigation section, and click Save (see Fig-
ure 4.61):
 Semantic Object: “SalesOrder”
 Action: “create”

Implementing Transactional Apps
4
194
Figure 4.60  General Section
Figure 4.61  Navigation Section
6. Click OK to confirm the changes.
4.6.6
Create the Custom Role and Add the Catalog
The next step is to add the catalog to a custom role, so first let’s create a custom 
role by following these steps:

Custom Business Catalogs and Roles
4.6
195
1. Log in to your ABAP frontend server, and run Transaction PFCG (Role Mainte-
nance).
2. Enter the role name “Z_SAL_REP_ROLE”, and click Single Role (see Figure 4.62).
Figure 4.62  Role Maintenance
3. Click Save.
4. Enter a meaningful description in the Description field (see Figure 4.63).
Figure 4.63  Changing the Role
5. Click on the Menu tab, and click 
 to insert the node (see Figure 4.64).
Figure 4.64  Inserting a Node
6. Select SAP Fiori Tile Catalog from the menu (see Figure 4.65).

Implementing Transactional Apps
4
196
Figure 4.65  SAP Fiori Tile Catalog
7.
Enter “Z_SAL_REP” in the Catalog ID field, and click 
 (see Figure 4.66).
Figure 4.66  Assigning the Tile Catalog
8.
Navigate to the User tab, enter the User ID, and click 
 (see Figure 4.67).
Figure 4.67  Assigning the User
9.
Log in to SAP Fiori Launchpad, and click 
 to open the catalog.
10. Click on Tile Catalog.
11. From the Catalogs dropdown box, and select the Sales Rep Catalog (see Fig-
ure 4.68).

Custom Business Catalogs and Roles
4.6
197
Figure 4.68  Selecting the Custom Catalog
12. Click on + to add the tile to a group.
13. Select the My Home checkbox, and click OK (see Figure 4.69).
Figure 4.69  Adding a Tile to the My Home Group
14. Click 
 to go back to the main page. You should now see the Create Sales
Order tile under the My Home group (see Figure 4.70).
Figure 4.70  My Home Group
15. Click on the tile to run the app (see Figure 4.71).

Implementing Transactional Apps
4
198
Figure 4.71  Create Sales Order App
Congratulations, you’ve successfully completed the exercise.
4.7
Summary
In this chapter, we’ve walked through the steps needed to implement a transac-
tional app. We looked at the tasks to activate the SAPUI5 component and OData 
services. We then looked at the ABAP frontend and backend roles before running 
our transactional app. Finally, we discussed how to create custom business cata-
logs and roles.
In the next chapter, we’ll look at implementing fact sheet apps, which involves 
many of the same steps as transactional apps.

199
Chapter 5 
This chapter walks through the implementation of fact sheet apps, 
including information on ABAP backend roles and search connectors.
5
Implementing Fact Sheet Apps
SAP Fiori fact sheet apps display contextual information and key facts about cen-
tral objects used in business operations. Fact sheets can be called from SAP Fiori 
Launchpad or from other fact sheet, transactional, and analytical apps.
Although many of the ABAP frontend tasks between transactional and fact sheet 
apps are similar, it’s important to understand where their differences lie in terms 
of implementation.
From an architectural perspective, when compared to transactional apps, the fol-
lowing is true for fact sheet applications:
 Fact sheet apps must run only on an SAP HANA database system.
 Fact sheet apps require a reverse proxy.
 Fact sheet apps directly access search engines on the backend server via the INA 
search protocol.
 Fact sheet apps display data from the SAP HANA database through search 
models.
In this chapter, we’ll show you how to implement the Sales Order fact sheet app. 
The following is an overview of the configuration tasks for fact sheet apps:
 Activate the SAPUI5 component.
 Activate OData services for the SAPUI5 applications in SAP Gateway.
 Assign an ABAP backend role to the user.
 Create search connectors.
 Index search connectors.

Implementing Fact Sheet Apps
5
200
5.1
Activating the SAPUI5 Component
The first step is to activate the SAPUI5 application for the Sales Order fact sheet 
app. Figure 5.1 shows the SAPUI5 component details, which you can get from the 
apps reference library. You need to perform the same steps as you did to activate 
the user interface (UI) application for the transactional apps in Chapter 4, Section 
4.1.
Figure 5.1  SAPUI5 Component (Apps Reference Library)
Figure 5.2 shows the activated SAPUI5 application of the Sales Order fact sheet 
app.
Figure 5.2  App-Specific Services
5.2
Activating the OData Services
In this section, we’ll activate the OData services in the frontend server. You need 
to perform the same steps as in Chapter 4, Section 4.2. Figure 5.3 shows app-
specific OData service details from the apps reference library.

Assign ABAP Backend Roles
5.3
201
Figure 5.3  OData Service (Apps Reference Library)
Figure 5.4 shows the activated OData service of the Sales Order fact sheet app.
Figure 5.4  App-Specific OData Service
5.3
Assign ABAP Backend Roles
In this part of the implementation, we’ll assign a role to a user in the ABAP back-
end server, which will grant the user access to the search models in the ABAP 
backend server. In Chapter 4, Section 4.4.2, we showed you how to assign roles 
to a user. You can follow the same process and assign the SAP_SD_SALESORDER_
APP role to a user. Figure 5.5 shows the role details from the apps reference 
library.

Implementing Fact Sheet Apps
5
202
Figure 5.5  ABAP Backend Role
Figure 5.6 shows the app-specific role assigned to an end user.
Figure 5.6  Assigned Backend Role
5.4
Creating Search Connectors
SAP Fiori fact sheet apps are based on search models. To enable the use of fact 
sheet apps, search connectors must be created for the underlying search models.
A connector is the runtime object corresponding to the search model. It’s a sys-
tem-specific and client-specific object that is created in Transaction ESH_COCK-
PIT. Most of the data displayed in fact sheet apps come from search models, which 
are transferred to the frontend server using OData services.

Creating Search Connectors
5.4
203
To enable the use of a specific fact sheet app, the underlying search models must 
be activated. When activating a search model, a search connector is created. The 
search models that need to be activated for your app are listed in the app-specific 
implementation information in SAP Help at http://help.sap.com/fiori.
 SAP Fiori Search
Before you work on the backend changes, make sure you’ve set up SAP Fiori search (see 
Chapter 2).
Fact sheet apps read business data via search connectors from the database. The 
creation of search connectors is therefore a prerequisite to using fact sheet apps.
To create search connectors, you need the following authorizations (see Figure 
5.7):
 SAP_ESH_SEARCH
 SAP_ESH_LOCAL_ADMIN
Figure 5.7  Roles to Create Search Connectors
The SAP HANA-enabled search models for the search software component 
SAPAPPLH may only be used in SAP Fiori search. Figure 5.8 shows the informa-
tion from the apps reference library with the search connectors and search mod-
els information of a Sales Order fact sheet app.

Implementing Fact Sheet Apps
5
204
Figure 5.8  Search Connectors for the Sales Order Fact Sheet App
 
Search Models
All the delivered search models can be found in SAP Note 1861013 in the SAP Business 
Suite at http://service.sap.com/sap/support/notes/1999463.
5.4.1
Create Connectors Manually
You must activate the underlying search models by creating connectors to be 
able to use a fact sheet app. We’ll show you steps to create connectors for CUS-
TOMER_BILL_DOC_H, and then you need to repeat the following steps to create 
a connector manually for all the search models that are listed under the Search
Connector section (refer to Figure 5.8).
The Connector Administrator Cockpit is the central point to monitor and manage 
the search object connectors, as well as to access the monitoring and administra-
tion tools. To create connectors manually, follow these steps:
1. Launch the Embedded Search Administration Cockpit in the browser using 
http://<host_name>:<port_number>/sap/es/cockpit.
 
Note
The <host_name> stands for the host and <port_number> stands for the port that you 
use to reach the ABAP system.
You can also launch the Connector Administration Cockpit using Transaction ESH_
COCKPIT.

Creating Search Connectors
5.4
205
2. Click Create (see Figure 5.9).
Figure 5.9  Connector Administration Cockpit
3. Choose the software component that provides the required models (see Figure 
5.10).
Figure 5.10  Select Software Component
4. In the list, select the required models that you want to use with embedded 
search. Choose Create Connector.
5. Next, a background job is created to create the search connector. You can mon-
itor the job in Transaction SM37, where you’ll notice a job with the name ESH_
<your client>_C_<unique code> (see Figure 5.11).
If the models are grayed out, the search connectors are already created, and you 
can skip this step.

Implementing Fact Sheet Apps
5
206
 
Models
Models can reference other models. If this is the case, the system creates more than one 
connector in the administration cockpit, although you only chose one connector model.
Figure 5.11  Search Connector Job
If you’re using the SAP HANA-based variant of embedded search, all connectors 
with database support can be used directly for the search. For models that don’t 
provide database support, you have to start or schedule indexing.
5.4.2
Create Connectors Automatically
Instead of creating the connectors manually, you can generate them automatically 
by using Transaction STC01 (ABAP Task Manager). The task list SAP_ESH_CRE-
ATE_INDEX_SC is available for this purpose. You use this task list to create the 
connectors automatically and then index them immediately (Figure 5.12).
Figure 5.12  Search Connector Task List

Indexing Search Connectors
5.5
207
5.5
Indexing Search Connectors
In the previous section, you created the connector. To make the objects in the 
connectors available in the search, you have to schedule indexing for that con-
nector.
In the SAP HANA-based variant, indexing runs either as full indexing or as delta
indexing. This depends on whether or not the underlying model supports delta 
transfers and the settings you define for indexing.
Follow these steps to index the connector previously created:
1. In the Connector Administration Cockpit (Figure 5.13), choose the connec-
tors that you want to schedule indexing for, and then select Actions  Schedule
Indexing.
Figure 5.13  Scheduling Indexing
2. On the next screen, below Object Type, select one or more search and analysis 
models (see Figure 5.14).

Implementing Fact Sheet Apps
5
208
 
Entry Screen
The entry screen allows you to make settings for more than one model at the same time.
3. To trigger indexing immediately, select the Start Immediately checkbox. 
Alternatively, you can schedule indexing for a later time. To do this, specify a 
start time.
Figure 5.14  Selecting the Object Type
In addition, you can select multiple objects and schedule indexes for all at the 
same time using the input form (see Figure 5.15).
4. The first option is to schedule indexing immediately, or you can start it on a 
specific data and time.
5. Another option is to index data in real time by checking the box next to Real-
Time Indexing under the Recurrence Period section. Here, you need to define 
the recurrence period as well (i.e., months, week, days, or hours).
6. If you want to do a full indexing run, click the Full Indexing Mode dropdown 
list, and select either Keep Index Content or Clear Index Content.
The Keep Indexing Content mode will retain the existing index. The Clear Index
Content mode will delete the index completely and re-create it. If you don’t 
choose the mode, the system will do the delta indexing.

Indexing Search Connectors
5.5
209
Figure 5.15  Input Form
You’ve now completed all the configuration steps that are required to enable a 
fact sheet app. Before you run the app, let’s test the search connector via Web 
Dynpro:
1. Run Transaction ESH_SEARCH.
2. Enter “Sales Order” in the Search For field (see Figure 5.16). You should now 
see the search results for the Sales Order app.
Figure 5.16  Testing Search
3. Click Details to see the details of the entity type.
Now you’re all set to run the app on SAP Fiori Launchpad.

Implementing Fact Sheet Apps
5
210
5.6
Running the App
Fact sheet apps can be called from the results of an SAP Fiori search. To access the 
Sales Order fact sheet app, follow these steps:
1. Log in to SAP Fiori Launchpad.
2. Use the SAP Fiori search in SAP Fiori Launchpad to narrow down the search 
results to Sales Order business objects. Enter the term “sales order” in the 
Search field, and press (Enter). You’ll get the search results based on Sales
Order (see Figure 5.17).
Figure 5.17  Search Sales Orders
Figure 5.18  Sales Order Fact Sheet

Summary
5.7
211
3. From the search results, you should be able to open the Sales Order fact sheet 
app by clicking one of the result sets (see Figure 5.18).
5.7
Summary
In this chapter, we looked at the implementation steps for fact sheet apps. We dis-
covered that many of the steps are similar to transactional apps; however, there 
were still some fact sheet-specific steps that needed to be covered such as specific 
ABAP backend roles, creating search connectors, and indexing search connectors. 
In the next chapter, we’ll look at implementing the last of the three SAP Fiori app 
types: analytical apps.


213
Chapter 6 
This chapter walks you through implementing analytical apps with and 
without the SAP Smart Business Modeler.
6
Implementing Analytical Apps
In Chapter 1, we discussed the architecture and communication channels 
between different layers for analytical apps. In this chapter, we’ll provide you 
with the step-by-step instructions involved in implementing analytical apps run 
on an SAP HANA database, which use virtual data models (VDM). We’ll use an 
example based on the Days Sales Outstanding app and the Profit Analysis app. 
However, these steps apply to most analytical app implementations.
In Section 6.1, we’ll begin with an overview of the standard analytical apps and 
analytical apps that are created using SAP Smart Business Modeler, which are 
enriched analytical apps with real-time key performance indicator (KPI) data that 
are designed for specific business roles. We’ll include in our discussion the SAP 
Fiori roles for different lines of business (LOBs). We’ll then look at the prerequi-
sites that need to be covered prior to the Days Sales Outstanding app implemen-
tation in Section 6.2, before diving into the KPI modeling steps.
In Section 6.3, we’ll discuss the SAP Smart Business Modeler and model a KPI
using an example based on the Days Sales Outstanding app. In addition, we’ll 
cover the technical aspects of the SAP Smart Business Modeler and show you how 
to leverage them in conjunction with an analytical app. You’ll then learn how to 
create a generic drilldown application using the SAP Smart Business Modeler. At 
the end of this section, we’ll show you how to create your own catalogs and 
groups to enable the app.
In Section 6.4, we’ll introduce you to analytical apps that don’t require the SAP 
Smart Business Modeler to implement them. We’ll use an example based on the 
Profit Analysis app and provide high level steps on how to implement them. As 
previously mentioned, these steps apply to most analytical apps that don’t use the 
SAP Smart Business Modeler.

Implementing Analytical Apps
6
214
6.1
Overview
SAP Fiori analytical apps are the new user experience (UX) for SAP Business Suite
powered by SAP HANA and are developed using SAPUI5. These apps allow real-
time insights into your business by displaying KPIs, allowing you to make faster, 
better decisions. In this chapter, we’ll show you how to configure both analytical 
app types with examples based on the Days Sales Outstanding app and the Profit 
Analysis app, respectively.
There are two types of apps under the analytical umbrella:
 Analytical apps (non-smart apps) 
These apps provide real-time information on large volumes of data.
 Analytical apps designed using SAP Smart Business Modeler  
These apps closely monitor the most important KPIs. SAP Smart Business apps 
are analytical apps that offer drilldown capabilities based on the SAP Smart 
Business framework.
In Chapter 1, we discussed SAP Fiori roles for different LOBs. For example, under 
the SAP UX for Finance LOB, you have accounts payable, accountant, cash man-
ager, GL accountant roles. Certain apps can be configured for each of these roles. 
Figure 6.1 shows an SAP Smart Business product called SAP Smart Business for 
SAP S/4HANA Finance (formerly SAP Smart Business for SAP Simple Finance). 
These products contain one or more analytical apps. Similarly, for each LOB, 
there are different SAP Smart Business products.
Figure 6.1  SAP Smart Business for SAP S/4HANA Finance
SAP Smart Business for Accounts Receivable
Overdue
Receivables 
Days Sales
Outstanding
Future
Receivables
Days Beyond
Terms 
Open Disputes
Dunning Level
Distribution 
Credit Limit
Utilization 
Promises to Pay
Collection
Progress
Total Receivables  

Implementation Prerequisites
6.2
215
These apps provide real-time insight into your business. For example, Figure 6.1 
shows your company’s collection progress, days sales outstanding, and other 
KPIs. You’ll be able to further drill down from this KPI or operational perfor-
mance indicators (OPIs) to a detailed analysis. In the next section, we’ll show you 
how to model a KPI or OPI and how to drill down from that KPI tile.
 What Are KPI and OPI?
Both KPIs and OPIs refer to the vital metrics of an aspect of your business from different 
perspectives that are crucial to the success of your business. KPIs look at board catego-
ries such as the sales of a particular region, and OPIs focus on a specific measure of a 
specific function or operation, for example, orders processed per shift.
The following are some of the key benefits of analytical apps designed using the 
SAP Smart Business Modeler (smart apps):
 They offer role-based access to all relevant information, such as KPIs, OPIs, 
news feeds, specific tasks, trends, and alerts.
 You can easily build your own KPI with the threshold values and color-coded 
visualizations.
 You can create a drilldown from one application to another, to an SAP Lumira 
storyboard, or to an SAP BusinessObjects Design Studio application.
 They provide end-to-end insight into action scenarios, including simulation 
and forecasting.
We’ve covered some of the basic concepts of analytical apps. Before you enable 
and implement these two types of analytical apps, let’s review some of the pre-
requisites.
6.2
Implementation Prerequisites
A number of prerequisites need to be fulfilled prior to implementation to config-
ure the analytical apps. In Chapter 2, Section 2.5.3, we covered all the compo-
nents that have to be installed on SAP HANA and the ABAP frontend and backend 
servers.

Implementing Analytical Apps
6
216
The following is a quick checklist of components that should be installed and con-
figured in your system:
 Install the KPI framework on the ABAP frontend server
 Enable the KPI framework on the SAP HANA server
 Install SAP Gateway on the ABAP frontend server
 Install the central UI components
 Install the following SAP Smart Business products on the ABAP frontend 
server:
 SAP Smart Business for CRM 1.0
 SAP Smart Business for FCC 1.0
 SAP Smart Business for ERP 1.0
 SAP Smart Business for GRC 1.0
 SAP Smart Business for EM 1.0
 SAP Smart Business for TM 1.0
 Configure the SAP Web Dispatcher
 Install the SAP HANA Application Lifecycle Manager (HALM)
 Enable SAP HANA authentication and single sign-on (SSO)
 Assign the PFCG role /UI2/SAP_KPIMOD_TCR_S to your frontend user
 Assign the role, sap.hba.r.sb.core.roles::SAP_SMART_BUSINESS_MODELER, 
to your SAP HANA user to access the SAP Smart Business Modeler
 
Important!
You have to implement the SAP Notes that are required for every specific app. Refer to 
the app-specific online help at http://help.sap.com/fiori.
By now, you know that analytical apps run on an SAP HANA database that houses 
the KPI data. For the users to access the data from the SAP HANA database, you 
need to provide access to SAP HANA from the ABAP frontend server. For that, 
you need to enable user access to the KPI data (see Chapter 3, Section 3.2 and Sec-
tion 3.3).

Analytical Apps with the SAP Smart Business Modeler
6.3
217
There are two ways to implement analytical apps, and the implementation differs 
according to the type of app that you want to use:
 Analytical apps launched using the KPI tile  
For these types of apps, you can either model your KPI or use predefined KPIs 
with the SAP Smart Business Modeler apps. In addition, you can even configure 
a generic drilldown using a predefined template or a custom drilldown. We’ll 
cover this implementation method in Section 6.3.
 Analytical app that uses the app launcher tile  
App-specific content is provided for these types of apps. This content defines 
what to display and how to display it in SAP Fiori Launchpad. You can’t adapt 
or configure the information displayed by these apps. We’ll cover this imple-
mentation method in Section 6.4.
We’ll begin by implementing analytical apps using the SAP Smart Business Modeler.
6.3
Analytical Apps with the SAP Smart Business Modeler
The SAP Smart Business Modeler is a tool delivered as part of the SAP Smart Busi-
ness suite. This tool allows you to model KPIs and report tiles that enable targeted 
monitoring of key business data using SAP Fiori Launchpad.
You can define KPIs and reports in the SAP Smart Business Modeler to which you 
can apply different evaluations so that you can respond to the ever-changing busi-
ness landscape. You can even add additional perspectives on the relevant data 
with drilldown views that are accessed through the KPI tile.
Analytical apps using the SAP Smart Business Modeler are launched via KPI tiles. 
The Days Sales Outstanding app allows users to filter and drill down by various 
dimensions, and then check the days sales outstanding by customer country and 
company code. As you did with the transactional and fact sheet apps chapters, 
refer to the SAP Fiori apps reference library for the app that you’ll be implement-
ing in the next section.
In the next sections, we’ll show you how to create a Days Sales Outstanding ana-
lytical app using the SAP Smart Business Modeler and how to add a drilldown 
from the KPI tile with step-by-step instructions. The first step is to create a KPI.

Implementing Analytical Apps
6
218
6.3.1
Create the KPI  
The first task is to create a KPI by following these steps:
1. Log in to SAP Fiori Launchpad.
2. Click the Create KPI app under the KPI Modeler group (see Figure 6.2).
Figure 6.2  Create KPI
 
KPI Modeler Group
If you don’t see the KPI modeler group in SAP Fiori Launchpad, then refer Chapter 2, 
Section 2.6.4, and grant user access to the KPI modeler.
3. In the next screen, you need to fill in the following mandatory details about the 
KPI (see Figure 6.3):
 ID: This has to be a unique ID for the KPI; you can either use the auto-gen-
erated ID or use a standard naming convention depending on your business. 
For this, we chose sap.press.DaysSalesOutstanding.
 Title: Enter a meaningful name because this appears in the tile header at 
runtime. Here we entered “Days Sales Outstanding (KPI)”.
 Description (optional): Enter “Total Days Sales Outstanding for the last 12 
months”.
 Type: Choose Key Performance Indicator (KPI).

Analytical Apps with the SAP Smart Business Modeler
6.3
219
 Goal Type: This indicates which kind of KPI value is meaningful for the 
application. Choose from three options:
– Maximizing (Higher is better): Higher the better; for example, profit-
related KPI values are higher the better.
– Minimizing (Lower is better): Lower the better; for example, cost-related 
KPI values are lower the better.
– Target (Closer to target is better): Closer value is to the target is better, 
for example, attrition rate.
Here we chose Minimum (Lower is better).
 Tags (optional): Enter these to more easily search for your KPI.
 Owner Name (optional): Enter the name of the person responsible for exe-
cuting the KPI.
 Owner ID And Email (optional): Enter the details of the owner.
Figure 6.3  KPI Parameters

Implementing Analytical Apps
6
220
4. Scroll down to the next section, and select the values by clicking 
 (see Figure 
6.4).
Figure 6.4  Data Source
5. The following fields are displayed in Figure 6.4:
 SAP HANA View: This is the source for this Days Sales Outstanding app. 
Select sap.hba.r.sfin700.DaysSalesOutstandingQuery.
 OData Service: This is the path of the OData service responsible for aggre-
gating the data. Enter “/sap/hba/r/sfin700/odata/ar/kpi.xsodata”.
 Entity Set: This provides input parameters for the SAP HANA calculation 
view. Enter “DaysSalesOutstanding”.
 Value Measure: Select only one value from this dropdown. Again, select 
DaysSalesOutstanding.
 Additional Information (optional): You can enter additional information 
about the data source in this field.
 Semantic Object/Action (optional): You can leave this blank because you’re 
using the default drilldown feature of SAP Smart Business apps.
6. After the fields have been entered, click Activate and Add Evaluation.

Analytical Apps with the SAP Smart Business Modeler
6.3
221
6.3.2
Create Evaluations of the KPI
An evaluation defines what information about the KPI or report is visible to the 
user at runtime. It’s a combination of variant/filters, thresholds, parameters, 
trends, and authorizations that are applied to a KPI or a report. You can create and 
activate evaluations for the KPIs or OPIs. Several different evaluations can be 
applied to a single KPI or report.
Let’s now create evaluations of the KPIs. Follow these steps:
1. Enter the values shown in Figure 6.5 in the Parameters section.
Figure 6.5  Evaluation Parameters
2. Scroll down and verify the Data Source fields. In this section, you have addi-
tional options (see Figure 6.6):
 Scaling Factor: You can select the scaling factor based on the value that 
you’re expecting:
– Auto: Value is scaled to the available space. We select this option.
– K: Value is displayed in multiples of 1,000.
– M: Value is displayed in multiples of 1 million.
– B: Value is displayed in multiples of 1 billion.
– T: Value is displayed in multiples of 1 trillion.

Implementing Analytical Apps
6
222
 Decimal Precision: You can choose appropriate decimal formats as well. 
Here we select Auto.
All the values that are configured in tiles, drilldowns, and tables for all mea-
sures of the selected evaluation are formatted by Decimal Precision. Only two 
decimal places are displayed to the right of the decimal point when the measure 
represents currency.
Figure 6.6  Evaluation Data Source
3. Next, you need to add variants/input parameters. A variant is a set of filter set-
tings and input parameters that you define to achieve a particular perspective 
on a KPI or a report. Variants can be created without reference to a particular 
KPI or report because they are global in nature.
4. Scroll down to the Input Parameters and Filters section. Add the input 
parameters that are expected in the calculation view (see Figure 6.7):
 P_DisplayCurrency Equal to USD
 P_ExchangeRateType Equal to M
 P_RevnRollingAverageMonths Equal to 1
 P_RblsRollingAverageMonths Equal to 1

Analytical Apps with the SAP Smart Business Modeler
6.3
223
Figure 6.7  Input Parameters and Filters
5. Next, you need to add the Target, Thresholds, and Trend values. The thresh-
olds defined for the KPI evaluation are determined by the Goal Type you 
selected for the KPI earlier in Figure 6.3:
 Critical: “100”
 Warning: “30”
 Target: “10”
Critical, Warning, and Target values are the threshold values of a KPI. These 
depend on the goal type selected previously. For example, if you select Lower
is Better, then your Critical and Warning values should be high. Therefore, 
when the KPI value is above 100, the KPI value color turns red, and when the 
KPI value is below 29, the KPI value color turns green. When the color is yel-
low, this indicates that the KPI has a value between 30 and 99 (see Figure 6.8).
6. Click Activate and Configure Tile.
You’ve now successfully created the KPI with the evaluation and activated the 
evaluation. In the next step, you’ll configure the KPI tile.

Implementing Analytical Apps
6
224
Figure 6.8  Target, Thresholds, and Trend
6.3.3
Configure the KPI Tile
A KPI tile is the graphical representation of the evaluation of the KPI, which is vis-
ible to the user at runtime. The KPI is displayed in a tile. When you click the tile 
in SAP Fiori Launchpad, you’ll be able to drill down into the details. There are six 
types of KPI tiles:
 Numeric tile  
The aggregated value of the KPI measure of the evaluation that you created in 
Section 6.3.2 is displayed in the tile. In this tile, data is displayed in numeric 
format. The color of the value that is displayed depends on the threshold val-
ues, which you created with critical and warning values (see Figure 6.9).
Figure 6.9  Numeric Tile

Analytical Apps with the SAP Smart Business Modeler
6.3
225
 Deviation tile  
In this tile, data is displayed graphically in the form of a bullet chart that shows 
the current value of the KPI in relation to the target value and its thresholds (see 
Figure 6.10).
Figure 6.10  Deviation Tile
 Trend Tile  
For this title, data is displayed graphically in the form of a line chart showing 
the trend over time. You must enter a time dimension representing a duration 
to visualize this tile (see Figure 6.11).
Figure 6.11  Trend Tile
 Comparison tile  
With this tile, you select a dimension to show the top KPI values in comparison 
to each other. For example, if you select “country” as a dimension, you see a 
comparison of the values for the countries contributing to this KPI (see Figure 
6.12).
Figure 6.12  Comparison Tile

Implementing Analytical Apps
6
226
 Comparison tile multiple measures  
This tile is similar to the comparison tile, but instead of comparing dimensions, 
you compare different measures. You can select a maximum of three measures 
or at least two measures for this tile (see Figure 6.13).
Figure 6.13  Comparison Tile Multiple Measures
 Dual tile  
This tile shows two tiles in one single tile. The left part of this tile always dis-
plays the numeric tile, and on the right side, you can select any chart that is sup-
ported (see Figure 6.14).
Figure 6.14  Dual Tile
Let’s now look at how to configure a KPI tile using the numeric tile as an example:
1. After clicking Activate and Configure Tile in the previous step, you should 
see the screen shown in the Figure 6.15.
2. Select your evaluation, and click Add Tile.
3. Enter the following details as shown in Figure 6.16:
 Tile Format: Select Numeric Tile from the dropdown list.
 Title (KPI): Enter “Days Sales Outstanding (KPI)”.
 Subtitle (Evaluation): Enter “Last 12 Months”.
 Drill-Down: Choose Generic drill-down.

Analytical Apps with the SAP Smart Business Modeler
6.3
227
Figure 6.15  Configuring a Tile
Figure 6.16  Tile Parameters

Implementing Analytical Apps
6
228
4. Click Save and Activate.
5. Now go back to the home screen by clicking 
.
That’s it! You’ve successfully created a KPI tile. Now users will see this KPI tile in 
SAP Fiori Launchpad. The next step is to create a generic drilldown, so that when 
users click on this tile it takes them to a detail level. A drilldown can be a generic 
drilldown application, which we’ll be covering in the next section, or it can even 
be a drilldown to another application such as SAP Lumira or a custom application.
6.3.4
Configure the KPI Drilldown
When you click on a KPI tile, it will take you to a drilldown application. This is 
configured using the Configure KPI Drill-Down app. You can create your own 
drilldown applications with different kinds of charts, tables, and filters, and you 
can customize it with different colors as well. A drilldown application contains 
views with tables and charts. In this section, we’ll look at configuring the KPI 
drilldown by creating views, configuring the KPI header, and creating filters.
Create Views
In this section, we’ll show you how to create views using the dimensions and 
measures from the KPI evaluation. Follow these steps:
1. From SAP Fiori Launchpad, click the Configure KPI Drill-Down app (see Fig-
ure 6.17).
Figure 6.17  Configure KPI Drill-Down App
2. Select the evaluation, and click Configure (see Figure 6.18).
3. Follow these steps to add the first view Last 12 Months by Customer Country.

Analytical Apps with the SAP Smart Business Modeler
6.3
229
4. Select the Customer Country from the Dimension list, and click OK (see Fig-
ure 6.19).
Figure 6.18  Configuring the Drilldown
Figure 6.19  Selecting Dimensions

Implementing Analytical Apps
6
230
You should now see the dimension and the measure that you selected, as 
shown in Figure 6.20.
Figure 6.20  Selected Measures and Dimensions
5. You can sort the dimensions by clicking the Sort Order dropdown list (see Fig-
ure 6.21).
Figure 6.21  Dimension Settings
6. In addition, you can configure views to provide additional insights into the KPI 
data. You can add a chart, add a table, or add both. The available visualization 
types are Bar chart, Column chart, Line chart, Columns and Lines combina-
tion chart, Bubble chart, and Table, as shown in Figure 6.22.
7. You can further configure the charts by choosing different color schemes, 
selecting single or dual axis, and formatting the value that is displayed in the 
chart (see Figure 6.23).

Analytical Apps with the SAP Smart Business Modeler
6.3
231
Figure 6.22  Selecting a Visualization Type
Figure 6.23  Additional Visualization Properties
8. As shown in Figure 6.24, enter or select the following fields:
 Visualization Type: You can select the type of visualization that you want to 
add to the view. Here we selected Column.
 View ID: Enter “sap.press.DaysSalesOutstanding.Last12Months.ByCustom-
erCountry”.
 View Title: This view name will be visible to the user during runtime. Select 
Last 12 Months by Customer Country.
 Set Data Limit (optional): You can set the maximum number of records that 
can be retrieved during runtime.
 Data: You can develop a view with the dummy data as well. Select Actual
Backend Data.

Implementing Analytical Apps
6
232
Figure 6.24  First View
9. Click Save View.
 
Drilldown Application
You don’t need to activate the drilldown application. Changes are available immediately 
as soon as you save the application.
We’ve successfully created the Last 12 Months by Customer Company view. You 
can create several views and switch between different views during runtime.
Let’s add one more view: Days Sales Outstanding by Company Code. Follow 
these steps:
1. Click 
, as shown in Figure 6.25.
2. Select the Company Code from the Dimension list, and click OK (see Figure 
6.26).

Analytical Apps with the SAP Smart Business Modeler
6.3
233
Figure 6.25  Adding a View
Figure 6.26  Dimensions

Implementing Analytical Apps
6
234
3. Enter the following details as shown in Figure 6.27:
 Visualization Type: Choose Column.
 View ID: Enter “sap.press.DaysSalesOutstanding.Last12Months.ByCom-
panyCode”.
 View Name: Enter “Last 12 Months by Company Code”.
4. Click Save View.
Figure 6.27  View Details
With these views, you can analyze data in several formats and with different 
selection criteria to allow for better insight into the business processes from dif-
ferent perspectives.
Configure the KPI Header
In the previous section, you created two views in the drilldown app. The next 
step in this process is to configure the KPI header. The KPI header is the header 
area of the KPI drilldown app. You can add mini charts in the header section, and 
these mini charts can be created on multiple measures.

Analytical Apps with the SAP Smart Business Modeler
6.3
235
Follow these steps:
1. Click 
 from the header section, as shown in Figure 6.28.
Figure 6.28  Adding a KPI Header
2. Select a Mini Chart; in this example, we selected Actual Vs Target (see Figure 
6.29).
Figure 6.29  Selecting a Mini Chart

Implementing Analytical Apps
6
236
Create Filters
The next available option is to create filters. You can specify up to five filters that 
allow you to look at the drilldown data from different perspectives. Follow these 
steps:
1. Click 
 to add filters.
2. Select the Currency, Customer, and Customer Region filters (see Figure 6.30).
Figure 6.30  Selecting Filters
3. Click Save Configuration.
You’ve now successfully created a numeric KPI tile with the evaluation and cre-
ated a drilldown with two views. The KPI tile is now ready to be made available 
to users on SAP Fiori Launchpad.
6.3.5
Assign Roles to Users to Access SAP HANA Data
Users launch analytical apps from SAP Fiori Launchpad, and then the SAP Web 
Dispatcher directs the OData request from the client to SAP HANA XS. Both the 
data and the KPI definitions are stored in the SAP HANA system. So for the users 
to access the data and the KPI definitions from the SAP HANA system, you need 
to ensure that they are given the correct access rights.

Analytical Apps with the SAP Smart Business Modeler
6.3
237
In Chapter 2, we gave you an overview of the SAP Fiori architecture with the SAP 
HANA XS landscape. SAP HANA XS contains the SAP Fiori app content, KPI mod-
eling framework, generic drilldown, and the VDM reuse content. SAP HANA XS 
reads data from the SAP HANA database. Using the OData services that require 
authorizations (i.e., SAP HANA privileges), these privileges are grouped together 
in roles, and these roles are assigned to SAP HANA database users.
There are certain generic roles that must be assigned to all users. In Chapter 2, we 
discussed these roles in greater detail. Besides generic roles, SAP delivers a role 
for each analytical app, which includes all app-specific privileges as well. For the 
users who need access to a specific app, you need to assign this app-specific role 
to the user.
 SAP HANA Role
For more information on the SAP HANA role for a specific app, refer to the app-specific 
documentation.
Figure 6.31 shows the Days Sales Outstanding app-specific role that has to be 
assigned to the user for the user to read the KPI data from the SAP HANA system.
Figure 6.31  App-Specific Configuration Details

Implementing Analytical Apps
6
238
To assign this role to a specific user in the SAP HANA system, follow these steps:
1. Log in to SAP HANA Studio.
2. Under the SAP HANA system (HDB SYSTEM), choose Security  Users.
3. Double-click the user name (see Figure 6.32).
Figure 6.32  SAP HANA Users
4. Click the + button on the Granted Roles tab (see Figure 6.33).
Figure 6.33  Granted Roles

Analytical Apps with the SAP Smart Business Modeler
6.3
239
5. Search for and then select the sap.hba.r.sfin700.roles::SapSmartBusinessRe-
ceivablesManager role, and then click OK (see Figure 6.34).
Figure 6.34  Selecting the Role
6. Click the Deploy icon 
 to save the changes.
You’ve successfully enabled the user to access data from the SAP HANA database.
6.3.6
Activate the SAPUI5 Application for Generic Drilldown
We’ve discussed how to model a KPI using an example Days Sales Outstanding 
app. You then created a drilldown app that can launched from the Days Sales Out-
standing KPI tile. The app is now ready to be enabled on SAP Fiori Launchpad. By 
now, you must be familiar with activating the Internet Communication Frame-
work (ICF) service.
For every transactional app and fact sheet app, there is an app-specific SAPUI5 
application that has to be activated on the frontend server. However, for analyti-
cal apps, there is just one service that needs to be activated. For all the generic 

Implementing Analytical Apps
6
240
drilldown applications, the ca_kpi service has to be activated on the frontend 
server. Figure 6.35 shows the application details from the online help page.
Figure 6.35  SAPU15 Application
 
Note
This step is performed only once; you don’t have to reactivate it every time you imple-
ment an analytical app.
Follow these steps to activate an ICF service:
1. Run Transaction SICF.
2. Search for the service name ca_kpi under default_host  sap  bc  ui5_ui5  
sap.
3. Right-click on the service, and click Activate.
6.3.7
Assigning Authorizations to Users
The next step is to assign authorization for users/roles to access the evaluations. 
To do so, follow these steps:
1. From SAP Fiori Launchpad, click the Manage KPI Authorizations app (see 
Figure 6.36).
Figure 6.36  Authorizations

Analytical Apps with the SAP Smart Business Modeler
6.3
241
2. Select the evaluation, and click Authorize Users and Roles (see Figure 6.37).
Figure 6.37  Adding Users or Roles
3. You can switch between users and roles by selecting the Users or Roles icons. 
Then select the User/Role by clicking the checkbox next to the role/user name 
(see Figure 6.38).
4. Click Save.
Figure 6.38  Selecting Users or Roles

Implementing Analytical Apps
6
242
6.3.8
Enable the App for Access in SAP Fiori Launchpad
After the ICF service is activated, the next step is to assign authorizations to the 
user to access the SAP KPIs catalog in SAP Fiori Launchpad. By now, you know 
that SAP Fiori Launchpad is the entry point for SAP Fiori apps. For users, SAP Fiori
Launchpad displays the apps that have been assigned to the catalog designated for 
a user’s role. So, users who have the role SAP_KPIFRW4_TCR_S assigned to their 
user ID will have access to the KPI’s catalog.
Using Transaction PFCG (Role Maintenance), you can grant access to a user to the 
role SAP_KPIFRW4_TCR_S. This role allows the user to view all the analytical 
apps that are activated using the SAP Smart Business Modeler. You may want to 
refer Chapter 4, Section 4.3.3, on how to add roles to a user. Figure 6.39 shows 
the role assigned to an end user using Transaction PFCG.
Figure 6.39  Adding a User to the Role
You’ve successfully assigned the SAP standard role to a user who now has access 
to all the analytical apps. You created the Days Sales Outstanding app with the 
SAP Smart Business Modeler, and all the analytical apps that are created using the 
SAP Smart Business Modeler are automatically added to the predefined KPIs cat-
alog in SAP Fiori Launchpad. After you activate the app in the SAP Smart Business 
Modeler, it’s automatically added to the KPI Catalog category.
Follow these steps to add the app to SAP Fiori Launchpad:
1. Log in to SAP Fiori Launchpad with the Test ID you accessed in the previous 
step (see Figure 6.39).

Analytical Apps with the SAP Smart Business Modeler
6.3
243
2. Click the Tile Catalog button on the bottom left of the screen.
3. Select SAP: KPIs from the catalog dropdown list, as shown in Figure 6.40.
Figure 6.40  SAP KPIs Catalog
You should then see the app that you created and activated in previous steps 
(see Figure 6.41).
Figure 6.41  Days Sales Outstanding Custom App

Implementing Analytical Apps
6
244
4. Click on the +, and add the app to your My Home group by checking the box, 
and then click OK (see Figure 6.42).
Figure 6.42  Adding an App to a Group
5. Now go back to the home screen by clicking the 
 button.
6. You should now see the Days Sales Outstanding app under the My Home
group, as shown in Figure 6.43.
Figure 6.43  My Home Group
7. Click the app to see the two views you created previously (see Figure 6.44).

Analytical Apps with the SAP Smart Business Modeler
6.3
245
Figure 6.44  App with the Custom Views
8. Toggle between the table and chart by clicking the buttons above the chart.
9. In addition, zoom in, zoom out, or view this app in full screen by using the but-
tons shown in Figure 6.45.
Figure 6.45  View Features
You should now understand the basics of creating an analytical app with the SAP 
Smart Business Modeler and how to grant access to the users. In the next section, 
we’ll discuss a more advanced topic: assigning an app using a custom role.
Chart view
Table
view
Legend
hide/display
Zoom
in
Zoom
out
Full screen

Implementing Analytical Apps
6
246
6.3.9
Assign the App Using a Custom Role
In a real-world scenario, you wouldn’t want to give access to all analytical apps to 
your users (i.e., any user who is assigned to the role SAP_KPIFRW4_TCR_S will 
have access to all the apps). In this section, we’ll show you how to create a custom 
catalog and role to give access to specific analytical apps in SAP Fiori Launchpad.
In Chapter 4, Section 4.6, we discussed how to create a custom catalog and cus-
tom role for a transactional app. You’ll be following a similar process for non-
smart analytical apps.
To enable your app with custom roles and catalog, you must complete the follow-
ing steps:
1. Log in to your ABAP frontend server, and run Transaction LPD_CUST.
2. Create a new launchpad by clicking the New Launchpad button.
3. Enter the fields as shown in Figure 6.46, and click Confirm.
Figure 6.46  New Launchpad
4. Click Yes to ignore the namespace.
5. Now create a new application by clicking New Application.
6. Enter “Days Sales Outstanding (KPI)” in the Link Text field. From the Applica-
tion Type dropdown list, select URL. Click the Edit button next to the URL
input box. Enter “/sap/bc/ui5_ui5/sap/ca_kpi/drilldown/” in the URL box (see 
Figure 6.47).

Analytical Apps with the SAP Smart Business Modeler
6.3
247
Figure 6.47  App Parameters
7. Click Show Advanced (Optional) Parameters.
8. Click the Edit button next to the Application Alias input box. Enter “analyze-
KPIDetails” in the box. Enter “SAPUI5.Component=drilldown” in the Addi-
tional Information box (see Figure 6.48).
Figure 6.48  Application-Related Parameters
9. Click Save.

Implementing Analytical Apps
6
248
10. Log in to the SAP Fiori Launchpad designer at http://hostname:port/sap/bc/
ui5_ui5/sap/arsrvc_upb_admn/main.html20?sap-client=120&scope=CUST.
11. Click Catalogs.
12. Create a new catalog by clicking + at the bottom of the screen.
13. Enter the details shown in Figure 6.49.
Figure 6.49  Create Catalog
14. Click Save.
15. Select the catalog you created in the previous step.
16. Click the Target Mapping icon 
.
17. Click Create Target Mapping.
In the next steps, you’ll define the target mapping, but before that, let’s explore 
some of the components of target mapping.
An intent allows users to perform actions on semantic objects. In this example, 
we choose *, which means we want to navigate to all the analytical apps and ana-
lyze all the details. The Intent area of the screen lets you perform actions without 
worrying about the technical part of the navigational target.
Intent has the following components (see Figure 6.50):
 Semantic Object  
Represents business entities such as a product or sales order. You can bundle 
apps that reflect a specific scenario. In this exercise, we’re specifying a generic 

Analytical Apps with the SAP Smart Business Modeler
6.3
249
semantic object, which allows you to analyze all the semantic objects in a stan-
dardized way.
 Action  
Defines which operations are performed on the semantic object, for example, 
displaying a purchase order. Here, display is the action, and the purchase order 
is the semantic object.
Follow these steps:
1. Enter the details in the Intent section as shown in Figure 6.50.
2. In the Target section, enter the details of the custom launchpad you created 
previously.
Figure 6.50  Intent and Target
3. Click Save.
4. Now create a new group by selecting the Group tab in the SAP Fiori Launchpad 
designer.
5. Create a new group by clicking 
 at the bottom of the screen.
6. Enter the details shown in Figure 6.51, and click Save.

Implementing Analytical Apps
6
250
Figure 6.51  Create Group
You should now see the new group created in the SAP Fiori Launchpad 
designer.
7. Now add a tile by clicking on the tile with the + sign (see Figure 6.52).
Figure 6.52  Adding a Tile to a Group
8. Click the search icon to search the catalog.
9. Select the SAP: KPIs catalog from the list, as shown in Figure 6.53.

Analytical Apps with the SAP Smart Business Modeler
6.3
251
Figure 6.53  SAP KPIs Catalog
10. You’ll now see all the KPI tiles that have been modeled using the SAP Smart 
Business Modeler. Select the Days Sales Outstanding (KPI) app by clicking +
at the bottom of the tile, as shown in Figure 6.54.
Figure 6.54  Adding an App to the Group
You should now see the Days Sales Outstanding app added to your group in 
the SAP Fiori Launchpad designer.

Implementing Analytical Apps
6
252
You’ve successfully created a custom catalog, created a custom group, and 
assigned the Days Sales Outstanding app to the group. The next step is to create a 
custom role and add the category and group to the role.
Follow these steps:
1. Log in to you ABAP frontend server, and run Transaction PFCG.
2. Enter the Role name “Z_ROLE_SM”, and click Single Role (see Figure 6.55).
Figure 6.55  Create Custom Role
3. Enter the Description, and click Save.
4. Click on the Menu tab, and select the Catalog from the Transaction button 
dropdown menu (see Figure 6.56).
Figure 6.56  Assigning the Tile Catalog to the Role
5. Enter “Z_CAT_U02” in the Catalog id field, and click Confirm (see Figure 
6.57). This is the catalog you created previously.

Analytical Apps with the SAP Smart Business Modeler
6.3
253
Figure 6.57  Catalog ID
6. Add a group you created by selecting SAP Fiori Tile Group from the dropdown 
menu (see Figure 6.58).
Figure 6.58  Assigning a Group Catalog to the Role
7. To search for your group, click on the Search button next to the Group ID.
8. Select the Z_GRP_CM1 group from the popup window (see Figure 6.59). Click 
Execute.
Figure 6.59  Group ID
You’ve successfully created the custom role. Your role should now show both the 
category and group (see Figure 6.60).

Implementing Analytical Apps
6
254
Figure 6.60  Role Menu with Catalog and Group
The last step in this process is to assign the custom role to the user. Follow these 
steps:
1. Select the User tab.
2. Enter the User ID, and click Save (see Figure 6.61).
Figure 6.61  Assigning a User
 
Important!
All users must to be assigned to the generic KPI framework role /UI2/SAP_KPIFRW5_
TCR_S. For more information, refer to Chapter 2, Section 2.6.4.

Analytical Apps without the SAP Smart Business Modeler
6.4
255
3. Log in to SAP Fiori Launchpad with the test ID, and you should see the Days
Sales Outstanding (KPI) app under the Sales Managers Group (see Figure 
6.62)
Figure 6.62  Days Sales Outstanding (KPI) App
In this section, we’ve explored how to provide user access to analytical apps using 
both an SAP standard role and a custom role. You’ve successfully created a KPI 
tile, completed the frontend tasks, and created user authorizations.
6.4
Analytical Apps without the SAP Smart Business 
Modeler
In the previous section, you created an analytical app using the SAP Smart Busi-
ness Modeler. In this section, we’ll show you how to enable an analytical app 
without using the SAP Smart Business Modeler with an example based on the 
Profit Analysis analytical app.
First, let’s get the app-specific configuration details from the SAP Fiori apps refer-
ence library. Figure 6.63 show the configuration details of the Profit Analysis app.

Implementing Analytical Apps
6
256
Figure 6.63  App-Specific Configuration
In the sections that follow, we’ll walk through the necessary tasks to complete 
this implementation.
6.4.1
Activate the SAPUI5 Application
The first step in implementing an analytical app without the SAP Smart Business 
Modeler is to activate the SAPUI5 application. We’ve discussed these steps in 
detail in Chapter 4, Section 4.1. You can follow along with the same steps to acti-
vate the FIN_PRFTANLYS service (see Figure 6.64).

Analytical Apps without the SAP Smart Business Modeler
6.4
257
Figure 6.64  SAPUI5 Application
6.4.2
Assign the SAP HANA Role
In this section, we’ll assign a product-specific SAP HANA role to the user. This 
role enables users to access KPI data (i.e., the SAP HANA Live views and the 
OData service of the specific app). Follow the same steps from Section 6.3.5, and 
grant access to the user for the role sap.hba.apps.sfin.s.roles::fiori_sfin (see Figure 
6.65).
Figure 6.65  SAP HANA Role

Implementing Analytical Apps
6
258
6.4.3
Assign the App-Specific Catalog Role
The next step is to assign the app-specific PFCG role for the business catalog to the 
user. After this is enabled, the user will have access to the catalog in SAP Fiori 
Launchpad. Assign the SAP_SFIN_BCR_SALESMANAGER business catalog role to 
an end user (see Figure 6.66). Refer to Chapter 4, Section 4.3.3, for how to assign 
roles to users.
Figure 6.66  Assigning a User
6.4.4
Add the App to SAP Fiori Launchpad
After you’ve completed all the preceding steps, the last step is to add the app to a 
group. Follow the same steps you performed in Chapter 4, Section 4.6.6, to add 
the Profit Analysis app to the Sales Manager group. You’ll then see the Profit
Analysis app under the Sales Manager group (see Figure 6.67).
Figure 6.67  Profit Analysis App

Summary
6.5
259
 Sales Order Fulfillment App
Typically, all SAP Smart Business apps drill down from one analytical app to another 
analytical app. However, there is one hybrid app, the Sales Order Fulfillment app, which 
drills down from an analytical app to a transactional app.
The Sales Order Fulfillment app is the only hybrid app that uses SAP Gateway (ABAP 
frontend server) and SAP HANA XS as well. It needs SAP Gateway because it sends 
requests to the backend server. After you configure the Sales Order Fulfilment app, it 
will be added as an analytical app tile in SAP Fiori Launchpad. When a user opens the 
app, a transactional app is opened. Hence, this is the only hybrid app that has a tile of 
an analytical app and launches with the features of a transactional app.
6.5
Summary
In this chapter, we provided the step-by-step instructions on how to create an 
analytical app using the SAP Smart Business Modeler for the Days Sales Outstand-
ing app. We discussed everything from how to create a KPI to providing authori-
zation to the user to an app and its drilldown views. In addition, we showed you 
how to enable an app with custom groups and catalogs. We then gave you an 
overview of how to enable analytical apps that don’t use a KPI tile to launch (non-
smart analytical apps).
In the next chapter, we’ll explore OData services in depth. Understanding OData 
services is very important, as you’ll be using this concept a lot during the exten-
sion or creation of transactional, fact sheet, and analytical apps, which we cover 
in the third part of this book.


261
Chapter 7 
OData services are required to connect SAP Fiori to the backend SAP 
system. This chapter gives you an overview of service generation methods 
and offers step-by-step instructions on how to generate the OData services 
using the SAP Gateway Service Builder.
7
Creating OData Services with 
SAP Gateway
Before we begin creating and extending SAP Fiori apps, we need to make clear 
some basic concepts on OData services and the SAP Gateway Service Builder. The 
main objective of this chapter is to give you an in-depth look at OData services 
and SAP Gateway Service Builder, as well as the process of creating an OData 
service. We’ll walk you through the service generation methods using the SAP 
Gateway Service Builder, and, at the end of this chapter, we’ll do a couple of sim-
ple exercises to explain the three main steps in service creation: data model defi-
nition, service implementation, and service maintenance.
In Chapter 1, we introduced the REST protocol, OData protocol, and SAP Gate-
way. SAP Gateway and OData service creation is a big topic. Our intent is to dis-
cuss certain scenarios or methods of service generation that will enable you to 
better understand the processes when creating or extending SAP Fiori apps in the 
next chapters. In this chapter, you’ll learn three different ways to create data 
models and generate OData services using the SAP Gateway Service Builder.
We start with an overview of OData concepts by exploring its documents with an 
example in Section 7.1.1 and then guide you through the various terms in the SAP 
Gateway Service Builder (see Section 7.2). In Section 7.3.1, we’ll introduce you to 
import functions to build a data model, use an example of Sales Order Header 
data from the Business Object Repository (BOR), and show you how to build a 
data model and generate an OData service. In Section 7.3.2, we’ll provide an 
overview of the second method to generate data models and OData services by 
redefining services. At the end of this section, we’ll show you how to create an 
OData service on top of an SAP Business Explorer (BEx) query.

Creating OData Services with SAP Gateway
7
262
7.1
Introduction to OData
By now you know that OData is the open standard that provides standard plat-
form-agnostic, interoperability, and access to data sources via websites. The Open 
Data Protocol (OData) was built on web technologies such as HTTP, Atom Publi-
shing protocol (AtomPub), XML, and JavaScript Object Notation (JSON) to 
provide access to information from a variety of applications. It was designed to 
provide a RESTful application programming interface (API) that is accessible by 
forming an appropriate Uniform Resource Identifier (URI) and assigning it to the 
corresponding HTTP header. The biggest advantage of OData services is that they 
are multichannel and developed to serve many applications. Put simply, OData is 
used to expose, access, and modify information from different sources.
In the following sections, we’ll discuss the basics of an OData service and OData 
queries.
7.1.1
OData Service Basics
In this section, we’ll cover the basic structure of an OData service. Let’s start with 
simple operations that can be performed using OData protocol.
We’ll use a standard OData service of a Create Sales Order app, which you acti-
vated in Chapter 4, Section 4.2, to understand the concepts of an OData service. 
Follow these steps to view the OData service of the app:
1. Log in to your ABAP frontend server.
2. Run Transaction IWFND/MAINT_SERVICE.
3. Filter with External Service Name for “SRA017_SALESORDER*”, and press 
(Enter) (see Figure 7.1).
Figure 7.1  Service Name

Introduction to OData
7.1
263
4. Select the service, and then click Gateway Client (see Figure 7.2).
Figure 7.2  Gateway Client
5. Click Execute (see Figure 7.3).
Figure 7.3  Executing the Service
An OData service is a logical data model that depicts how the users perceive the 
model behind the UI. Essentially, anything that is possible with the UI becomes 
part of the API, and each OData service is represented with a service root URI. 
There are two types of documents accompanying each OData service:
 Service document  
This shows the details about the entity set. Figure 7.4 shows the service docu-
ment with seven entities: Customers, Products, Product Images, Sales Orders, 
Product Attributes, Order Items, and Partner Addresses.
 Service metadata document  
This gives you the structure of an OData service. It describes the Entity Data
Model (EDM) of the source. In the service metadata document, the data is 
described in EDM terms using XML for describing models called the Conceptual
Schema Definition Language (CSDL). An EDM describes the organization and the 
relationships between different data resources with models and entity types 

Creating OData Services with SAP Gateway
7
264
within a particular business scenario. The following is an example of what the 
OData feed looks like from SAP (see Figure 7.5). Run the URL in the browser to 
view the service metadata document of the Create Sales Order service:
http://<host>:<port>/sap/opu/odata/sap/SRA017_SALESORDER_CREATE_SRV/
$metadata
Figure 7.4  Service Document
Figure 7.5  Service Metadata Document

Introduction to OData
7.1
265
Let’s now dive deep into the EDM and the corresponding parts of the service 
metadata document. We’ll explain each term as we go through this Create Sales 
Order OData service.
In the service metadata document, expand the EntityContainer. The service meta-
data document defines the EntitySets belonging to one service in the Entity-
Container. The EntitySets that are listed out in the service document and the 
service metadata document are exactly the same (see Figure 7.6).
Figure 7.6  EntitySet
Entity sets group entities, and all the entities of one entity set are of the same 
entity type. For example, a Customer entity set is a set of Customer instances (see 
Figure 7.7), and all the Customer instances are of the Customer entity type.
Figure 7.7  EntityType

Creating OData Services with SAP Gateway
7
266
Entities are structured as records with a key, under the entity types. For example, 
expand the Customer entity type, and you’ll notice the keys (Customer ID, Divi-
sion, etc.).
Association defines the relationship between two entity types, and every associa-
tion includes two association ends (entity types). Association end states the entity 
type elements, the roles of each of the entity type elements, and the cardinality 
rules for each association end. For example, expand the CustomerSalesOrder
association in the service metadata document (see Figure 7.8), and the end types 
are Customers and Sales Order, and the cardinality is one to many (i.e., one cus-
tomer can have many products).
Figure 7.8  Association
For example, to read the list of customers from an OData service, replace $meta-
data with customers at the end of the service URL. Initially you might find this 
very confusing, but eventually you’ll get used to all these terms, and you’ll be able 
to understand an OData service very easily.
7.1.2
OData Service Queries
Now that you understand how to read a service, let’s move on to the most 
important operations, that is,  Create, Read, Update, and Delete (CRUD) operations. 
OData uses the existing HTTP verbs (POST, GET, PUT, and DELETE) against address-
able resource identifiers in the URI. Figure 7.9 shows the HTTP methods in the 
SAP Gateway Client.

Introduction to OData
7.1
267
Figure 7.9  HTTP Methods
The following lists the different requests used for entities:
 To read a single entity, you use a GET request.
 To create an entity, you use a POST request.
 To modify a single entity, you use a PUT request.
 To modify the whole entity, you use a PATCH request.
 To merge a subset of entity properties, you use a MERGE request.
 To delete an entity, you use the DELETE command.
OData specifies a simple query language that allows the client to request random 
filters, sorts, or pages. Table 7.1 shows some of the most important query 
options.
Following are some examples of OData service queries:
 To read all sales orders using the sales order OData service, enter the following 
URI in the Request URI field, and click Execute (see Figure 7.10): “/sap/opu/
odata/sap/CB_SALES_ORDER_SRV/SalesOrders?”.
Operation
Query Option
Filtering
$filter
Projecting
$select
Sorting
$orderby
Paging
$page
Inlining
$expand
Table 7.1  OData Query Options 

Creating OData Services with SAP Gateway
7
268
Figure 7.10  Example 1
 Similarly, to read a single sales order, enter the following Request URI and 
click Execute (see Figure 7.11): “/sap/opu/odata/sap/CB_SALES_ORDER_SRV/
SalesOrders('499')?”.
Figure 7.11  Example 2
 To sort the sales orders in ascending order, enter the following Request URI
and click Execute (see Figure 7.12): “/sap/opu/odata/sap/CB_SALES_ORDER_
SRV/SalesOrders?orderby=SalesOrder asc”.
Figure 7.12  Example 3
In this section, you’ve learned about the two OData service documents in detail, 
as well as what entity, entity set, entity container, and navigational properties 
are. You’ll see a lot of these in the subsequent chapters especially where we create 
or extend existing apps.
Now let’s discuss how to build an OData service using the SAP Gateway Service 
Builder.

SAP Gateway Service Builder
7.2
269
7.2
SAP Gateway Service Builder
SAP Gateway translates complex data structures into easy-to-consume OData ser-
vices. The SAP Gateway Service Builder is the central interface of SAP Gateway 
(access via Transaction SEGW). The SAP Gateway Service Builder includes both 
the code-based development of OData services for experienced developers and 
noncode-based generation of services for less experienced developers. We’ll 
cover only the noncode-based development services in this book.
The SAP Gateway Service Builder contains all relevant functions for the modeling 
and development of OData services in SAP Gateway. It supports the entire devel-
opment lifecycle of an OData service in SAP Gateway. The SAP Gateway Service 
Builder’s main objective is to provide comprehensive support for building OData 
services in a declarative way or by reusing existing business objects in the SAP 
Business Suite system. Later, you’ll see a data model in SAP Gateway Service 
Builder. This modeling environment follows a project-based approach, and all rel-
evant data is consolidated in these projects.
Now that you understand the terms entities, entity types, entity sets, associations, 
and so on from the service document and service metadata document, let’s 
explore them in the SAP Gateway Service Builder. To begin, you must first navi-
gate to the SAP Gateway Service Builder by following these steps:
1. Log in to the SAP Gateway server.
2. Open the SAP Gateway Service Builder by running Transaction SEGW.
3. Open a project by clicking 
.
4. Enter the Create Sales Order project details “SRA017_SALESORDER_CREATE” 
in the Project field, and press (Enter) (see Figure 7.13).
Figure 7.13  Create Sales Order Project
You should now see the Sales Order Creation project (see Figure 7.14).

Creating OData Services with SAP Gateway
7
270
Figure 7.14  SAP Gateway Service Builder
From the screen shown in Figure 7.14, note the following terms:
 Entity Types  
Each entity type can have a data dictionary binding to an existing ABAP Data 
Dictionary (DDIC) structure element. Expand the Customer entity type shown 
in Figure 7.14, and double-click on Properties. Figure 7.15 shows the Cus-
tomer entity type with the entities.
 Navigation Properties: Each entity types contains one or more navigation 
properties. These properties contain links representing an association; for 
example, Figure 7.16 shows the navigation properties of the Customer
entity type, the PartnerAddressSet is the link from the Customer entity to 
the PartnerAddress entity.

SAP Gateway Service Builder
7.2
271
Figure 7.15  Entity Type Properties
Figure 7.16  Navigation Properties
 Association  
Associations are relationships between two or more entities; for example, Fig-
ure 7.17 shows the relationship between CustomerPartnerAddress with the 
one-to-many cardinality. Using the SAP Gateway Service Builder, you can cre-
ate or edit an association.
Figure 7.17  Associations

Creating OData Services with SAP Gateway
7
272
 Entity Sets  
As previously mentioned, entities (e.g., customers, order items, etc.) are 
grouped in entity sets, and these entities are instances of the entity types (e.g., 
customer ID, customer name, etc.) (see Figure 7.18).
Figure 7.18  Entity Sets
 Service Implementation  
This folder contains references to the operations and methods of a service. 
Based on the OData model, the services are implemented under the Service
Implementation folder after the project is generated. Under each individual 
entity set, the following operations can be found: Create, Delete, GetEntity, 
GetEntitySet, and Update (see Figure 7.19).
Figure 7.19  Service Implementation

SAP Gateway Service Builder
7.2
273
 Runtime Artifacts  
When you generate an OData service, the SAP Gateway Service Builder auto-
matically generates the code (i.e., it generates the following runtime artifacts) 
and registers the OData service to the SAP Gateway server. The following are 
important runtime artifacts (see Figure 7.20):
 Data Provider Base Class (suffix _DPC): This is an ABAP class. DPC provides all 
the methods that are required to handle OData requests; for example, it’s 
used to code your CRUDQ methods as well as function import methods.
 Data Provider Extension Class (suffix _DPC_EXT): You can define all your back-
end logic in redefined methods of the DPC extension class.
 Model Provider Base Class (suffix _MPC): This is a base ABAP class. MPC is 
used to define the EDM of your service. Typically, developers don’t touch 
this class unless there is some feature that isn’t available in the SAP Gateway 
tool, and they want to build the service with that feature.
 Model Provider Extension Class (suffix _MPC_EXT): This is the implementation 
class that inherits the base class. Developers can modify and add features to 
this class.
 Registered Model (suffix _MDL): This is the technical name of the OData ser-
vice model, for example, SALESORDER_MDL.
 Registered Service (suffix _SRV): This is the technical name of the OData ser-
vice, for example, SALESORDER_SRV.
Figure 7.20  Runtime Artifacts
 Service Maintenance  
During the runtime artifacts generation, the ABAP classes are registered to the 

Creating OData Services with SAP Gateway
7
274
SAP Business Suite backend system, and then the technical service names are 
registered with the SAP Gateway hub system (see Figure 7.21).
Figure 7.21  Service Maintenance
So far, we’ve reviewed the basic OData concepts and SAP Gateway Service 
Builder components with an example based on the Create Sales Order OData ser-
vice. Now let’s look into the most important part of the SAP Gateway Service 
Builder—modeling an OData service.
7.3
Modeling an OData Service
OData model creation is at the heart of application development in SAP Gateway. 
In this section, we’ll give you an overview of the OData service modeling meth-
ods and discuss in detail the different modeling phases for an OData service.
There are two ways to create OData services with SAP Gateway:
 Service development  
This is a code-based option and is very flexible in developing highly efficient 
and specialized services.
 Service generation  
This is a quicker approach to building a service with a lot less effort. There are 
three options to generate SAP Gateway services with this approach, which you 
can choose from based on your requirements and skillset (see Figure 7.22):
 Option 1—RFC generation: Service is generated using a tool called the RFC/
BOR Generator.

Modeling an OData Service
7.3
275
 Option 2—Redefinition: Allows you to define a service based on an existing 
data source or an existing SAP Gateway service.
 Option 3—Model composition: Allows you to mash up multiple existing ser-
vices.
In the service creation process, there are three main phases (see Figure 7.22):
 Phase 1: Data model definition  
In this phase, you define your model (i.e., define the entity types, entity sets, 
and associations your service will use).
 Phase 2: Service implementation  
In this phase, you implement the operations that are supported by the service. 
If you’re using the RFC/BOR Generator, then the implementation takes place 
by mapping the OData model to the methods of the RFC function module or a 
BOR object.
 Phase 3: Service maintenance  
In this last phase, you publish the service. This is usually a one-time activity 
(i.e., you don’t have to revisit this step even if you update the model or imple-
mentation).
Figure 7.22  OData Service Creation Process
Service Maintenance
Service Implementation
Data Model Definition
Import data
model from a
 file (EDMX) 
Import DDIC
structure 
Import
RFC/BOR
interface 
Declarative
Model
Definition 
Code-based implementation
code-based extensions
Map RFC/BOR operation
Service
registration and 
HUB activation
Redefine data source (BOPF, OData, BW Query, and
GenIL service) 
Model composition (Include Gateway Service)
Option 1
Option 2
Option 3
Phase 1 
Phase 2 
Phase 3 

Creating OData Services with SAP Gateway
7
276
Application developers can then create services in a number of ways and imple-
ment them by binding to the existing data sources or new data sources.
We’ve covered the basic concepts of OData and SAP Gateway Service Builder in 
the previous sections. In the next sections we’ll look at the different steps for the 
service development and service generation processes.
7.3.1
Importing OData Services
To reduce the time required to create entity types and complex types in your data 
model, the SAP Gateway Service Builder provides various options to import. This 
is used for both the service development and service generation process. In this 
section, we’ll look at the options for importing OData services. Under the Data
Model folder shown in Figure 7.23, you’ll see different entries where you can 
create different OData entities.
The first step to model an OData service is to create entity types and assign them 
some properties. You can create the entity types manually, you can import them 
(Data Model from File, DDIC Structure, RFC/BOR Interface, or Search Help), 
or you can redefine the services (BOPF, OData, BW Query, GenIL).
Figure 7.23  Import Functions
In the sections that follow, we’ll walk through the different functions shown in 
Figure 7.23 that can be used to import a data model: Data Model from File, 
DDIC Structure, RFC/BOR Interface, and Search Help.
Data Model from File
The Data Model from File function allows you to import the data model from 
files such as .edmx (created using Microsoft Visual Studio) or .xml (metadata 

Modeling an OData Service
7.3
277
files). The EDMX file is an XML file that defines the conceptual model, a storage 
model, and the mapping between these models. To import the EDMX file, right-
click on Data Model and choose Import  Data Model from File. This opens 
the File Import wizard.
Follow these steps to use the wizard:
1. Click Browse to import the data model file (see Figure 7.24).
Figure 7.24  Importing a File
2. Select the data model file, and click Open (see Figure 7.25). Click Next.
Figure 7.25  Selecting the .edmx File

Creating OData Services with SAP Gateway
7
278
3. Click Allow to grant access to the file (see Figure 7.26).
Figure 7.26  Granting Access
4. Click Finish, and you’ll see that data model imported into the project (see Fig-
ure 7.27).
Figure 7.27  Importing the Data Model

Modeling an OData Service
7.3
279
DDIC Structure
These data dictionary objects connect the database layer and the SAP application 
layer. For every transparent table, there is a physical table on the database. When 
a table is activated, a physical table definition is created in the database that the 
table definition stores in the ABAP Data Dictionary (DDIC). You can import 
views, database tables, or structures using the DDIC structure import method. 
You can then reuse the structure to develop new entity types and complex types 
very easily, reducing the development time significantly.
To use this option, follow these steps:
1. Right-click on Data Model, and choose Import  DDIC Structure to open the 
DDIC Structure Import wizard.
2. Enter the Name, and select an ABAP Structure. Click Next (see Figure 7.28).
Figure 7.28  Importing the DDIC Structure
3. Select the parameters/fields, and click Next (see Figure 7.29).

Creating OData Services with SAP Gateway
7
280
Figure 7.29  Selecting Parameters
4. Click Finish, and you’ll see that data model imported into the project (see Fig-
ure 7.30).
Figure 7.30  Importing the DDIC Structure

Modeling an OData Service
7.3
281
RFC/BOR Interface
The ABAP backend system includes powerful tools to quickly generate services 
based on data from different SAP applications. Standard SAP APIs such as RFCs, 
Business APIs (BAPIs), or BOR make it easier to get data from different SAP Busi-
ness Suite applications. This approach is commonly used because most SAP Gate-
way OData services are based on remote function modules. This function again 
reduces the development time needed to create entity types in your data model. 
Using this function, you can import existing data sources and create new entity 
types very easily by reusing the imported sources.
To import the RFC/BOR, right-click on Data Model, and choose Import  RFC/
BOR Interface. This opens the RFC/BOR Import wizard. At the end of this sec-
tion, we’ll show you how to create an OData service using this method (see Fig-
ure 7.31).
Figure 7.31  Importing the RFC/BOR Interface
Search Help
The Search Help function allows you to import and reuse an existing search help 
from the system to create a new entity type. To enable the import of search help, 
follow these steps:
1. Right-click on Data Model, and choose Import  Search Help. This opens the 
Import from Search Help wizard.
2. Enter the Entity Type Name, and then select the Import Search Help field. 
Click Next (see Figure 7.32).

Creating OData Services with SAP Gateway
7
282
Figure 7.32  Selecting Search Help
3. Select the parameters, and click Next (see Figure 7.33).
Figure 7.33  Selecting the Parameters

Modeling an OData Service
7.3
283
4. Click Finish, and you’ll see that search help imported into the project (see Fig-
ure 7.34).
Figure 7.34  Importing Search Help
So far, we’ve reviewed the different import methods that are available in the SAP 
Gateway Service Builder. Next, let’s build a data model using one of the import 
methods and generate an OData service.
Exercise
In this exercise, we’ll show you how to create a data model and generate an 
OData service by importing the RFC/BOR interface. In this scenario, we’ll be 
using a Sales Order Header data (BOR) example.
Create a Project
The first step is to create a project by following these steps:
1. Log in to the ABAP backend server, and run Transaction SEGW.
2. Create a new project by clicking 
.

Creating OData Services with SAP Gateway
7
284
3. Enter the Project name and Description, and then click Local Object (see Fig-
ure 7.35).
Figure 7.35  New Project
Import the BOR Interface to Create the Entity Types
Next, you need to import the BOR interface. Follow these steps:
1. Right-click on Data Model, select Import, and then click RFC/BOR Interface
(see Figure 7.36).
Figure 7.36  Importing RFC/BOR
2. As shown in Figure 7.37, enter the Entity Type Name.

Modeling an OData Service
7.3
285
Figure 7.37  Selecting BOR
3. From the Type dropdown, select Business Object Repository.
4. Click on the Name field, and press (F4) to get the list of BOR methods.
5. From the list shown in Figure 7.38, expand the EpmSalesOrder and then select 
GetList.
6. Click Continue 
.
Figure 7.38  GetList Method
7. You should now see the selected BOR method in the Name field. Click Next
(see Figure 7.39).

Creating OData Services with SAP Gateway
7
286
Figure 7.39  BOR Method
8. Select Soheaderdata(), and then click Next (see Figure 7.40).
Figure 7.40  Sales Order Header

Modeling an OData Service
7.3
287
9.
In the next screen, you’ll see all the entities of the Soheaderdata, and Sales 
Order ID (SO_ID) is automatically selected as a Key. Click Finish, and make 
sure there are no errors (see Figure 7.41).
Figure 7.41  Sales Order ID
The Entity Sets, and the Service Implementation are automatically created, 
as shown in Figure 7.42.
Figure 7.42  New Project
10. Now save your project by clicking 
.

Creating OData Services with SAP Gateway
7
288
Map to Data Source
In this step, you map the parameters of the data source with the properties of the 
entity set. Follow these steps:
1. Right-click on GetEntitySet(Query), and select Map to Data Source (see Fig-
ure 7.43).
Figure 7.43  Map Entity to Data Source
2. As shown in Figure 7.44, from the Type dropdown list, select Business Objects
Repository.
3. Enter “EmpSalesOrder.GetList” in the Name field.
4. Click Continue 
.
Figure 7.44  Data Source Attributes
5. Click on the Propose Mapping button to map the fields, and you’re automati-
cally provided with the mapping proposal between entity sets and the data 
source. SAP Gateway Service Builder automatically does certain checks to ver-
ify the mapping (see Figure 7.45).

Modeling an OData Service
7.3
289
Figure 7.45  Propose Mapping
6. Now save your project by clicking 
.
Generate Runtime Objects
The next step is to generate runtime objects:
1. Select the project, and then click Generate 
. In the next screen, you’ll see 
the model and service definition details.
2. Click Continue 
, or press (Enter) (see Figure 7.46).
Figure 7.46  Generating Runtime Objects

Creating OData Services with SAP Gateway
7
290
3. On the Create Object Directory Entry screen, click Local Object (see Figure 
7.47).
Figure 7.47  Saving the Local Object
You should now be able to see the generated MPC, DPC, and the service registra-
tion details, under the Runtime Artifacts folder (see Figure 7.48).
Figure 7.48  Runtime Artifacts
Register the OData Service
In this step, you’ll register the service to the SAP Gateway hub. If the SAP Gate-
way deployment is a hub deployment, then you have to register the technical 
detail service with the SAP Gateway system. Following are the steps to register a 
service with the system. If your deployment is an embedded deployment (i.e., 

Modeling an OData Service
7.3
291
SAP Gateway components are deployed in the SAP Business Suite), then you can 
skip this step because the technical details will be registered automatically.
Follow these steps:
1. Right-click on the SAP Gateway hub system under the Service Maintenance
folder, and select Register (see Figure 7.49).
Figure 7.49  Registering the Service
2. Press (F4) to select the system, select the SAP Gateway system, and click Con-
tinue 
.
3. Select Local Object, and then click Continue 
 (see Figure 7.50).
Figure 7.50  Selecting the Package
Activate the OData Service
Now that you’ve registered the service, it’s time to activate it in the SAP Gateway 
server. Follow these steps:

Creating OData Services with SAP Gateway
7
292
1. Run Transaction IWFND/MAINT_SERVICE.
2. Click the Add Selected Service button.
3. Select “LOCAL” in the System Alias field.
4. Enter “ZSALES*” as the External Service Name, and press (Enter).
5. Select ZSALESORDER_HEADER_SRV, and click the Add Selected Services but-
ton (see Figure 7.51).
Figure 7.51  Adding the Selected Service
6. Select Local Object, and then click Continue 
 (see Figure 7.52).
Figure 7.52  Adding the Service

Modeling an OData Service
7.3
293
7. On the popup that appears, click Continue 
 (see Figure 7.53).
Figure 7.53  Information Popup
Test the OData Service
Now that you’ve successfully modeled, generated, and registered the service, you 
need to test it. Follow these steps:
1. Go back to the Activate and Maintain Services screen by clicking 
.
2. Filter the service that you just activated by clicking the Filter button.
3. On the Filter for Service Catalog screen, enter “ZSALESORDER_HEADER_
SRV” in the External Service Name field, and then click Continue 
 (see Fig-
ure 7.54).
Figure 7.54  Service Name
4. Select the service, and click the Gateway Client button, as shown in Figure 7.55.
Figure 7.55  Service Catalog

Creating OData Services with SAP Gateway
7
294
5. The SAP Gateway client opens up with the Sales Order Header service. Click the 
Execute button (see Figure 7.56).
You should now receive the HTTP response with the status code 200 (see Figure 
7.57).
Figure 7.56  Testing the Service
Figure 7.57  HTTP Response
6. To view the sales order data, add SoheaderdataSet to the following Request
URI: /sap/opu/odata/sap/ZSALESORDER_HEADER_SRV/ (see Figure 7.58). Click
Execute.

Modeling an OData Service
7.3
295
Figure 7.58  Request URI
In the HTTP Response area, you’ll see the sales order header information with the 
status code 200 (see Figure 7.59).
Figure 7.59  Sales Order Header Set
In this section, you learned how to create a data model by using the import meth-
ods. In the next section, we’ll show you a different way to generate an OData 
model by redefining an existing service.
7.3.2
Redefining OData Services
Using the SAP Gateway Service Builder, you can redefine a service from an 
existing OData service that was created using SAP Gateway and from the external

Creating OData Services with SAP Gateway
7
296
services developed using different backend frameworks (BW Query Service, 
GenIL Service). In this section, we’ll give you an overview of each of these func-
tions. In Figure 7.60, you see the dropdown to access the Redefine option.
Figure 7.60  Redefine Functions
You use the redefining techniques when you want to extend the existing data 
model by adding new entities, adding a new property to the existing entity, or 
adding an association or navigation property. Using these redefining methods, 
you can quickly and easily build the data model and extend the data model in the 
SAP Gateway Service Builder. After the extended data model is generated, the 
SAP Gateway Service Builder generates a new OData service with the new 
changes that you added in the data model.
In the sections that follow, we’ll go through the options listed in Figure 7.60.
BOPF Service
BOPF service allows you to consume business objects in the Business Object Pro-
cessing Framework (BOPF) by using the SAP Gateway BOPF Integration (GBI). 
This framework is based on object-oriented ABAP, which provides a set of 
generic services and functionalities to speed up and modularize development. To 
use this option, follow these steps:
1. Right-click on Data Model, and choose Redefine  BOPF Service. This opens 
the BOPF Configuration wizard.
2. Select the Business Object and the Default Query. Click Next (see Figure 
7.61).
3. In the Service Registration area, enter descriptions in the Description fields 
for the Model Name and the Service Name. Click Next (see Figure 7.62).

Modeling an OData Service
7.3
297
Figure 7.61  BOPF Configuration
Figure 7.62  Entering Descriptions
4. Select the fields, and click Finish. You should now see the fields from the busi-
ness objects added to your project (see Figure 7.63).

Creating OData Services with SAP Gateway
7
298
Figure 7.63  Redefining BOPF
OData Service (GW)
Using the OData Service (GW) function, you can extend an existing OData ser-
vice is created in an SAP Gateway OData service. You can not only extend the 
existing OData service but also overwrite an existing one using this function in 
the SAP Gateway Service Builder. In Chapter 9, Section 9.2, we’ll explain the step-
by-step process of how to extend a transactional app by redefining using this 
method.
To access this option, right-click on Data Model, and choose Redefine  OData
Service (GW). This opens the OData Service wizard (see Figure 7.64).
Figure 7.64  OData Service

Modeling an OData Service
7.3
299
BW Query Service
Using the BW Query Service function, you can create SAP Fiori apps on an SAP 
Business Warehouse (SAP BW) query. The SAP BW Easy Queries feature provides 
an external interface for accessing analytic queries in SAP BW. At the end of this 
section, we’ll show you how to create a data model and how to generate an OData 
service using this function.
To use this option, right-click on Data Model, and choose Redefine  BW Query
Service. This opens the Service Generator for BW Query Service wizard (Fig-
ure 7.65). The Query Name field is where you enter the name of the SAP BW 
query. We’ll discuss this method in greater detail in an exercise at the end of this 
section.
Figure 7.65  SAP BW Query Service
GenIL Service
Generic Interaction Layer (GenIL) is the connection between the Business Object 
Layer (BOL) and the backend business engine. This layer handles the data transfer 
from the BOL to the APIs of the business engine. So, using this function in the 
SAP Gateway Service Builder, you can create a data model from this framework.
To access this option, right-click on Data Model, and choose Redefine  GenIL
Service. Using input help will list out all the GenIL objects that are available (see 
Figure 7.66). A plugin in the SAP Gateway Service Builder provides you with a 
wizard that will guide you through the steps to create a service using this frame-
work.
Figure 7.66  GenIL Service

Creating OData Services with SAP Gateway
7
300
OData Service
This function lets you create a data model on an existing OData service. Now this 
function is different from the OData Service (GW) option, because that function 
will let you redefine an OData service that is generated using the SAP Gateway. In 
this function, you define the HTTP Destination and the Service Namespace.
To use this function, follow these steps:
1. Right-click on Data Model, and choose Redefine  OData Service. This opens 
the External Service wizard.
2. Enter the HTTP Destination, Service Namespace, and Service Name. Click 
Next (see Figure 7.67).
 
OData Service Example
We used an example OData service: http://services.odata.org/Northwind/Northwind.svc. 
You need to define this RFC destination using Transaction SM59.
Figure 7.67  Service Name
3. Enter descriptions in the Description fields for the model and service, and click 
Next (see Figure 7.68).
4. Select the fields, and click Finish in the last screen to create a data model in the 
project.

Modeling an OData Service
7.3
301
Figure 7.68  Service Registration Details
Next, we’ll round out this section with an example exercise.
Exercise
Let’s look at a use case where a customer needs a custom SAP Fiori app on a BEx 
query. To do this, you’ll first need to understand how to generate an OData ser-
vice based on an SAP BEx queries. In this exercise, we’ll show you how to gener-
ate OData service on a BEx query. We made a copy of the 0FIN_PA_T10_Q0001 
query and saved it as Z0FIN_PA_T10_Q0001. We’ll be using this query in the 
remainder of this section.
The following sections walk through the individual steps.
Enable External Access of a BEx Query
The first step is to enable the SAP BW query for external access:
1. Open the BEx query Z0FIN_PA_T10_Q0001 in the BEx Query Designer.
2. Go to the Extended tab in the Properties of the query.

Creating OData Services with SAP Gateway
7
302
3. Check the By Easy Query box, and then save the query (see Figure 7.69).
Figure 7.69  Allowing External Access
Generate OData Service
In this step, you’ll generate an OData service on top of a BEx query:
1. Log in to the frontend server, and run Transaction SEGW.
2. Create a new project by clicking 
.
3. Enter the project technical name and description, and then click Continue 
 
(see Figure 7.70).
Figure 7.70  Create Project

Modeling an OData Service
7.3
303
4.
Right-click on the Data Model folder, and then choose Redefine  BW Query
Service (see Figure 7.71).
Figure 7.71  Selecting BW Query Service
5.
Select Controller for Easy Queries (SAP BW) from the Access Type drop-
down.
6.
Click 
 to open the list of queries (see Figure 7.72).
Figure 7.72  Query Name
7.
You should now see the query for which you set the easy query property, as 
shown in Figure 7.73.
8.
Click Continue 
.
9.
You should now see the BEx query in the Query Name field. Click the Next
button.
10. Enter descriptions for the model name and service name, and then click Next
(see Figure 7.74).

Creating OData Services with SAP Gateway
7
304
Figure 7.73  Selecting the BW Query
Figure 7.74  Entering Description
11. Select all services by clicking 
, and then click Finish (see Figure 7.75).
You should now see the data model with the Entity Types, Associations, 
Entity Sets, and so on (see Figure 7.76).

Modeling an OData Service
7.3
305
Figure 7.75  Selecting All Objects
Figure 7.76  Redefined Data Model

Creating OData Services with SAP Gateway
7
306
12. Generate the runtime objects by selecting the project folder and clicking Gen-
erate 
.
13. You’ll see the technical details of the MOD, DPC, and service. Click Continue
 (see Figure 7.77).
Figure 7.77  Runtime Artifacts
14. Select Local Object.
Add the Service to SAP Gateway
In this section, you’ll add the service to SAP Gateway. Follow these steps:
1. Run Transaction IWFND/MAINT_SERVICE.
2. Click Add Service.
3. Search with the external service name “ZNETSALES_SRV”.
4. Select the ZNETSALES_SRV, and then click the Add Selected Services button 
(see Figure 7.78).
5. Click Continue 
 (Figure 7.79).

Modeling an OData Service
7.3
307
Figure 7.78  Adding the Selected Service
Figure 7.79  Adding the Service
6. Click Continue 
 again to close the information popup.
Test the Service
In this section, you’ll finally test the service. Follow these steps:
1. Click Back to go back to the Activate and Maintain screen.

Creating OData Services with SAP Gateway
7
308
2. Filter the Service Catalog with “ZNETSALES_SRV”.
3. Select the service, and then click Gateway Client (see Figure 7.80).
Figure 7.80  Testing the Service
4. Click Execute to test the service. You should now see the service without any 
errors (see Figure 7.81).
Figure 7.81  SAP BW Query Elements
7.3.3
Include Gateway OData Service
The methods we discussed previously in Section 7.3.1 and Section 7.3.2 are lim-
ited to the scope of the underlying data source. The third way to create an OData 

Summary
7.4
309
service is through mashups. The Include function is used when you want to com-
bine your existing data model with a different data model; for example, you can 
mash up two or more services to form a completely new service without changing 
the existing service. You can access the Include Service Creation wizard by 
right-clicking Data Model and choosing Include  OData Service (GW) (see Fig-
ure 7.82).
Figure 7.82  Include Services
Enter the Technical Service Name and Version, and then click Continue 
 (see 
Figure 7.83).
Figure 7.83  Technical Service Name
7.4
Summary
This chapter provided an overview of OData services and the SAP Gateway Ser-
vice Builder. We discussed basic OData concepts with an example Create Sales 
Order service. We then covered the SAP Gateway Service Builder, giving details 
about data model terms such as entity types, associations, entity sets, service 
implementation, and service maintenance. Next, we provided an overview of 

Creating OData Services with SAP Gateway
7
310
OData modeling and the different methods to create a data model. We also 
showed you how to generate an OData service by importing an RFC/BOR inter-
face with step-by-step instructions.
We then went over how to create the OData service using redefining methods in 
the SAP Gateway Service Builder. Finally, we walked you through the steps on 
how to create a data model and an OData service using a BEx query as a data 
source.
In Chapter 8, we’ll introduce you to the SAP Web IDE tool and the process of 
developing SAP Fiori apps using an OData service.

PART III
Custom Development and Extension 


313
Chapter 8 
This chapter provides an overview of the SAP Web IDE and how it can be 
used to create or extend SAP Fiori apps.
8
Introduction to SAP Web IDE
The SAP Web Integrated Development Environment (SAP Web IDE) is the 
environment used to create and extend SAP Fiori apps. In this chapter, we’ll 
take a deep dive into the SAP Web IDE to see how it works. We’ll begin in Sec-
tion 8.1 with an overview of the SAP Web IDE and how to leverage this tool in 
conjunction with developing and extending SAP Fiori applications. In Section 
8.2, we’ll show you how to set up SAP Web IDE with the SAP HANA Cloud 
Platform (SAP HCP).
Finally, in Section 8.3, we’ll turn our attention to the technical aspects of this tool 
and look at the different phases of the end-to-end SAP Fiori application develop-
ment process, from designing the application, developing, previewing the app 
with the simulator, and then finally deploying the app to different application 
landscapes.
We’ll also discuss the various templates and the WYSIWYG layout editor capabil-
ities for nonprogrammers. After each phase of the development process, we’ll 
include steps to show you how to create a Master Detail transactional app using 
the Entity Data Model file (EDMX). We’ll then demonstrate how to create mock 
data to test the app and then deploy it.
 Version
During the writing of this chapter (November 2016), we used SAP Web IDE version 
1.15.5.

Introduction to SAP Web IDE
8
314
8.1
SAP Web IDE Overview
The SAP Web IDE is a browser-based tool that enables developers to build new 
user experiences. It’s designed to shorten the end-to-end application develop-
ment lifecycle, from prototyping, developing, instantly previewing, and deploy-
ing SAP Fiori applications.
The SAP Web IDE accelerates building modern applications for mobile and desk-
top using the latest user interface (UI) technologies. It’s a very flexible tool with 
robust code editors for developers who want to develop applications quickly and 
efficiently. In addition, this tool also empowers nonprogrammers to build appli-
cations using wizards and templates.
In this section, we will look at the architecture of the SAP Web IDE, and then pro-
vide an outline of its advantages over technologies such as the Eclipse-based IDE.
8.1.1
Architecture
From a bird’s eye view, Figure 8.1 shows the position of the SAP Web IDE in the 
SAP HCP architecture, where the full functionality is available.
Figure 8.1  SAP Web IDE in the Architecture
Browser
SAP HANA Cloud Platform
SAP Gateway
SAP Business Suite/SAP ERP
SAPUI5
Orion
Git
COCKPIT
SAP Web IDE
SAP HANA Connector

SAP Web IDE Overview
8.1
315
The following elements are found in the SAP Web IDE architecture:
 SAP HANA Cloud Platform (SAP HCP)  
This is a Platform as a Service (PaaS) where users can build, deploy, run, and 
manage applications in the cloud.
 SAP HANA Cloud Cockpit  
This is a central managing cockpit where users manage all the key information 
about applications and activities through the web-based interface.
 SAP Web IDE  
This is where all the development takes place.
 Orion  
This provides a workspace where the projects or files are located and enables 
users to work on their projects that are stored in the workspace.
 GIT  
This is a repository that manages the versions of your applications, controlling 
your source code versioning.
 SAPUI5  
This is the technology that is used to build your applications.
 SAP HANA Cloud Connector  
This is the connector that integrates the SAP Web IDE and SAP HCP securely.
 SAP Gateway  
This is the connector that connects the SAP Web IDE to your SAP system with 
access to OData functionality.
8.1.2
Advantages
Although some developers continue to use an Eclipse-based IDE for their applica-
tion development projects, there are a number of advantages to using the SAP 
Web IDE.
Figure 8.2 shows today’s method and process for developing an application, 
where you start with installing the IDE, plugin, and libraries; then code the appli-
cation from scratch; and finally wait for the reviews.

Introduction to SAP Web IDE
8
316
Figure 8.2  SAP Web IDE versus Eclipse IDE
As shown in Figure 8.2, the SAP Web IDE has one particularly visible advantage 
over Eclipse-based IDE—the speed at which it allows developers to deliver appli-
cations. This is because the SAP Web IDE has the advantage of ready-made tem-
plates for SAP Fiori apps. Therefore, you have the option to either develop an 
application using the templates and run the app with mock data, or you can start 
development by directly importing the service from the SAP Gateway server.
Additionally, installing and updating the Eclipse IDE for developers isn’t an easy 
task. Making sure that all developers are on the same version is an even bigger 
challenge because Eclipse has multiple versions such as Juno and Kepler. The SAP 
Web IDE, on the other hand, is just about subscribing to the IDE service and run-
ning the SAP Web IDE—it’s that simple.
When it comes to developing applications, the SAP Web IDE is the next genera-
tion cloud-based development environment. It provides real-time code review 
and testing into the modern pipeline—allowing more than one person to code in 
real time by connecting to the same shared repository—and instantly previews 
applications. These features allow developers to collaborate with business experts 
and designers to fulfill end-user requirements and expectations more effectively.
8.2
Setting Up SAP Web IDE with SAP HCP
In this section, we’ll show you how to set up a development environment with 
SAP Web IDE on SAP HCP. Currently, SAP HCP is available for productive use at 
the following locations:
Install
IDE/Plugins
Code from
scratch 
Send it for
reviewing 
Find a stable
test site 
Explain how to 
access or run
Open web-
based IDE 
Generate app using
wizards or drag and 
drop tools 
Instantly preview application and collaborate 
seamlessly with others.
Revise
Eclipse IDE
SAP Web IDE

Setting Up SAP Web IDE with SAP HCP
8.2
317
 Australia: https://account.ap1.hana.ondemand.com/cockpit
 Europe: https://account.hana.ondemand.com/cockpit
 US East: https://account.us1.hana.ondemand.com/cockpit
 US West: https://account.us2.hana.ondemand.com/cockpit
In addition, SAP is offering SAP HCP Cockpit (trial use) at https://account.hana-
trial.ondemand.com/cockpit.
To set up the development environment with the SAP Web IDE on SAP HCP, fol-
low these steps:
1. Start the SAP HANA Cloud Platform Cockpit at https://account.hanatrial.onde-
mand.com/cockpit.
2. Enter your login credentials, and click Login. If you don’t have an account, you 
can register by clicking the Register button.
3. After you’re logged on, your screen should look like Figure 8.3.
4. Click Subscriptions.
Figure 8.3  SAP HANA Cloud Platform Cockpit

Introduction to SAP Web IDE
8
318
5. Click New Subscription.
6. Select sapwebide, and then click Save (see Figure 8.4).
Figure 8.4  New Subscription
7. You’re now subscribed to the SAP Web IDE. Click webide under the Applica-
tion column (see Figure 8.5).
Figure 8.5  SAP Web IDE
8. Click on the Application URL to launch the SAP Web IDE (see Figure 8.6).
Figure 8.6  SAP Web IDE Application URL

Setting Up SAP Web IDE with SAP HCP
8.2
319
You’ve now successfully subscribed to and launched the SAP Web IDE. Next, you 
need to create a connection to the backend system. Then, we’ll show you how to 
create a destination for multiusage. Destination setup depends on where the 
backend server exists (i.e., if it’s available publicly via Internet or exists behind a 
firewall).
The following are steps to configure the destination if the ABAP backend server is 
publicly accessible on the Internet:
1. Go to the homepage of the SAP HANA Cloud Platform Cockpit, and click 
Destinations. Click New Destination (see Figure 8.7).
Figure 8.7  New Destination
2. Enter or choose the following (see Figure 8.8):
 Name: Enter “Connection1”.
 Type: Choose HTTP.
 Description: Enter “Connection 1” (description will be visible in SAP Web 
IDE during app creation).
 URL: Enter “<protocol>://<host>:<port>”.
 Proxy Type: Choose Internet.
 Cloud Connector Version: Choose 2.
 Authentication: Choose NoAuthentication.

Introduction to SAP Web IDE
8
320
Figure 8.8  Destination Properties
 
SAP HANA Cloud Connector
If your backend server resides behind a firewall, then you need to set up the SAP HANA 
Cloud Connector. SAP HANA Cloud Connector integrates SAP HCP and existing on-
premise systems. There are two versions of the SAP HANA Cloud Connectors: the devel-
oper version, which can be easily installed on your system without administrator rights, 
and the productive version, which requires administrator access to install.
Installation of the SAP HANA Cloud Connector is very simple and straightforward. 
Download the developer version from https://tools.hana.ondemand.com/#cloud, and 
follow the instructions from the online help. After you add the backend system to the 
SAP HANA Cloud Connector, you need to add the destination in the SAP Web IDE with 
the following details (refer to the previous step):
 URL: “<protocol>://<virtual host>:<virtual port>”
 Proxy Type: OnPremise
3. Click New Property under the Additional Properties section, and then enter 
the following values:
 WebIDEUsage: This property defines access to the URL paths:
– odata_abap grants access to the OData functionality of SAP Gateway.
– odata_gen grants access to the generic OData functionality.
– ui5_execute_abap grants access to execute SAPUI5 applications from the 
SAPUI5 ABAP Repository.
– dev_abap grants access to the develop or deploy apps to the SAPUI5 ABAP 
Repository.
– bsp_execute_abap grants access to the work with fact sheet apps.

Development Process Overview
8.3
321
– plugin_repository grants access to the optional plugins.
– odata_xs grants access to the SAP HANA XS OData services.
 sap-client: 120. This property is the SAP client from the ABAP system.
 WebIDEEnabled: true
 WebIDESystem: ERP. WebIDESystem is the SAP system ID.
4. After you’ve entered the values, your screen should look like Figure 8.9.
5. Click Save to save the connection.
Figure 8.9  Additional Destination Properties
You’re now set up to use the SAP Web IDE to develop SAP Fiori apps. In Chapter 
9 and the remainder of this book, we’ll be using this connection to create or 
extend SAP Fiori apps.
8.3
Development Process Overview
Before we start developing applications or discussing the development process, 
let’s take a moment to explore the features of the SAP Web IDE. After you log in 
to the SAP Web IDE, you should see the development page (see Figure 8.10).
As shown in Figure 8.10, the menu bar 1 gives you access to all the functions and 
features that are available in the SAP Web IDE. Below the menu bar is the toolbar, 
which has some of the most commonly used features such as Save, Delete, Run, 
and so on 2. On the left side of the screen is the Welcome page and the Devel-
opment preferences 3. Upon clicking the Development button, you’ll open a 
screen area next to it, which has the list of projects and files within a project 4. 
You can open the file and see its contents on the right-hand side in the code editor 
area. If you open several files, then those files will be shown as tabs 5. On the 
right side of the screen, you’ll find features such as search, Git Pane, Git History, 

Introduction to SAP Web IDE
8
322
and the Collaboration pane with features such as SAP Jam, API Reference, and 
Outline 6.
Figure 8.10  SAP Web IDE Interface
To further understand the SAP Web IDE, we need to examine each of the phases 
in the development process. The sections that follow walk through each phase of 
the development process—from creation to deployment.
8.3.1
Create
During the create phase of the SAP Web IDE development process, you can start 
by either creating a new project or importing an application. You have various 
methods for creating new projects in the SAP Web IDE, and each of these meth-
ods depend on the kind of application you want to create and the data source for 
your app.
There are three methods for creating new projects using the SAP Web IDE, as 
shown in Figure 8.11:
 New Project from Template
 New Project from Sample Application
 New Extension Project

Development Process Overview
8.3
323
Figure 8.11  Creating a New Project in the SAP Web IDE
Alternatively, you can create a new project from the menu bar as well by going to 
File  New. The same new project options are available there.
In the next three sections, we’ll look at these three options in closer detail.
New Project from Template
Choose New Project from Template if you want to create an application using 
standard templates provided by SAP. The SAP Web IDE is more than just a tool to 
build SAP Fiori apps; currently, there are 12 templates (see Figure 8.12), which 
you can use to build Basic SAPUI5 Project, Plugin Development, SAP Fiori
Applications, or SAPUI5 Mobile Applications.
Figure 8.12  All Templates

Introduction to SAP Web IDE
8
324
We’ll be focusing only on the templates for SAP Fiori apps. The following is a list 
of templates that are specifically for developing SAP Fiori apps. Using these six 
templates, you can develop transactional apps and fact sheet apps (Figure 8.13):
 SAP Fiori Master Detail Application (transactional apps)
 SAP Fiori Master Master Detail Application (transactional apps)
 SAP Fiori Full Screen Application (transactional apps)
 Existing Fact Sheet Application (fact sheet apps)
 Modification Free Fact Sheet Application (fact sheet apps)
 New Fact Sheet Application (fact sheet apps)
Figure 8.13  SAP Fiori Application Templates
New Project from Sample Application
You choose New Project from a Sample Application when you want to refer to 
an application and build your own SAP Fiori application based on that. Currently, 

Development Process Overview
8.3
325
there are three sample applications, and all three samples are specifically for 
transactional app development (see Figure 8.14): 
 Shop  
This is a full screen app that shows a shopping scenario on the Enterprise Per-
formance Model (EPM).
 Manage Products  
This is a Master Detail app that shows creation and maintenance of product 
entities for EPM.
 Approve Purchase Orders  
This is a Master Detail app that shows the approval process based on EPM.
Figure 8.14  Sample Applications
New Extension Project
You choose New Extension Project if you want to alter the functionality or 
appearance of the original SAP Fiori application. This creates an extension proj-
ect, and the changes are added only to the extension project, which means the 
original application remains unchanged (see Figure 8.15).

Introduction to SAP Web IDE
8
326
Figure 8.15  Extension Project
You can also begin a project by importing an existing application and resources 
from one of four places—the Archive, SAPUI5 ABAP Repository, SAP HANA
Cloud Platform, Clone from Git Repository—into the SAP Web IDE work-
space, as shown in Figure 8.16.
Figure 8.16  Importing Applications into the SAP Web IDE
Alternatively, you can import an application from the menu bar as well by choos-
ing File  Import. To clone a git repository, go to File  Git.
Exercise
In the previous chapter, we discussed in detail the EDMX file and the terms of an 
EDM. Next, you’ll use an EDMX file as a source and develop the first SAP Fiori 
application in the SAP Web IDE. In this create phase, you’ll open the SAP Web 
IDE and then create a project from a template. Follow these steps:
1. Log in to the SAP HANA Cloud Cockpit, and start the SAP Web IDE by clicking 
the webide application from your subscriptions (see Figure 8.17).

Development Process Overview
8.3
327
Figure 8.17  SAP HANA Cloud Cockpit
2. Click on the Application URL to launch the SAP Web IDE, as shown in Figure 
8.18.
Figure 8.18  SAP Web IDE
3. Create a new project by clicking New Project from Template (see Figure 8.19).
Figure 8.19  New Project from Template
4. Select SAP Fiori Master Detail Application, and click Next (see Figure 8.20).

Introduction to SAP Web IDE
8
328
Figure 8.20  Master Detail App
8.3.2
Develop
We’ve explored the different options for creating a project, so now let’s turn our 
attention to the development phase. You have many different options to develop 
an application, and your options depend on whether you’re a programmer or a 
nonprogrammer.
If you have programming experience, you can use the source code editor, which 
has features such as code completion, dynamic application programming inter-
face (API) reference, and so on to start coding your app.
Alternatively, you can use the templates, where wizards will guide you through 
the coding process step-by-step and will automatically generate the files and the 
code for your app. You can use the “What You See is What You Get” (WYSI-
WYG) layout editor as well to design your UI. The standard templates provided 
by the SAP Web IDE were shown earlier in Figure 8.13. Additionally, you can 
create your own templates and manage those custom templates from the same 

Development Process Overview
8.3
329
location. For extensibility projects, you can use the visual extensibility support 
to take existing SAP Fiori applications and extend, modify, or replace elements 
of your app.
The following is a list of advantages that you’ll notice in the SAP Web IDE while 
you’re in the development phase:
 You can collaborate directly with other developers via the integrated collabo-
ration features such as SAP Jam.
 Using the dynamic interactive features such as code completion and API refer-
ence, you can accelerate your coding and testing process.
 You can build your app without connecting to any system; that is, you can 
develop with the mock data and preview the app as well.
 Using the WYSIWYG editors, templates, and wizards, you can build SAP Fiori 
apps very quickly.
 You can share the same repository with other developers with virtually no 
setup required.
 You can extend the SAP-delivered applications using the SAP Web IDE’s exten-
sibility framework.
In continuing with the exercise, next we’ll use an EDMX file and create a master 
detail app. Before you start with the exercise, download the sample EDMX file, 
which we provided along with this book:
1. Enter the Project Name “MyContacts” and click Next (see Figure 8.21).
Figure 8.21  Project Name

Introduction to SAP Web IDE
8
330
2. Select File system as the source.
3. Browse the EDMX file that you downloaded before starting this exercise (see 
Figure 8.22).
4. Click Next.
Figure 8.22  EDMX File
5. Enter the details shown in Figure 8.23 for the Master Section.
Figure 8.23  Master Section

Development Process Overview
8.3
331
6. Enter the details as shown in the Detail Section, and click Next (see Figure 8.24).
Figure 8.24  Detail Section
7. Click Finish. This will automatically take you to the SAP Web IDE (developers 
view).
8. Navigate to Master.view.xml, right-click, and select Open With  Layout Edi-
tor (see Figure 8.25).
Figure 8.25  Master View

Introduction to SAP Web IDE
8
332
9.
Select the Object List Item.
10. Select the Company field in the Intro section from the list by clicking 
 (see 
Figure 8.26).
11. Click Save.
Figure 8.26  Add Intro to Object List Item
We successfully changed the Master view, next let’s change the Detail view:
1. Navigate to Detail.view.xml, right-click and select Open With  Layout Editor
(see Figure 8.27).
Figure 8.27  Detail View

Development Process Overview
8.3
333
2. Select the Object Header. Then select the Company field in the Intro section 
from the list by clicking 
 (see Figure 8.28).
Figure 8.28  Add Intro to Object Header
3. Search for the Image control and then drag and drop the image component to 
the object header area (see Figure 8.29).
Figure 8.29  Drag and Drop Image Control
4. Click on the Image field and select the Image in the source file by clicking 
.
5. Set the Height and Width of the image to 50px (see Figure 8.30).

Introduction to SAP Web IDE
8
334
Figure 8.30  Set Source, Height, and Width of Image
6. Next, let’s change the icons. Select the icon and set the value in the Icon field 
to sap-icon://contacts or select the icon from the value help by clicking 
 (see 
Figure 8.31).
Figure 8.31  Set Tab 1 Icon
7. Similarly, click the second icon and change the icon to sap-icon://map.
8. In the second tab, select the label and set the text to Address (see Figure 8.32).
9. Select the second text box, and then select the Address field from the value 
help by clicking 
 (see Figure 8.33).

Development Process Overview
8.3
335
Figure 8.32  Set Tab 2 Icon and Label
Figure 8.33  Map Address Field to Text
10. Click Save.
11. Next, we will import the sample data models. Right-click on the Model folder 
and select Import  From File System (see Figure 8.34).

Introduction to SAP Web IDE
8
336
Figure 8.34  Import Models
12. Click Browse (see Figure 8.35).
13. Select the ContactDetailsSet.json file from the source file you downloaded 
prior to this exercise.
Figure 8.35  Browse File
14. Repeat steps 1, 2, 3 and add the KM.jpg, KS.jpg, RR.jpg files to the model
folder (see Figure 8.36).
Figure 8.36  Select Files
v

Development Process Overview
8.3
337
15. After you complete the previous steps, your model folder should look like 
Figure 8.37.
16. Click Save.
Figure 8.37  Model Folder
8.3.3
Preview
Now that we’ve explored the options available for creating and developing appli-
cations, we can discuss previewing the finished product. In the preview phase, 
you can test your application by previewing it on different device screen sizes, 
such as a desktop, tablet, smartphone, or smartwatch, to see exactly what it 
would look like. You can also preview applications using simulators. The beauty 
of the SAP Web IDE is that you can test your app with random mock data gener-
ated by the SAP Web IDE.
When running an application with mock data, you can either let the mock service 
generate the sample data for you, or you can edit the mock data to have more 
meaningful data. You can even provide the data in a .json file format.
To edit and run the mock data, follow these steps:
1. Right-click metadata.xml, and select Edit Mock Data (see Figure 8.38).

Introduction to SAP Web IDE
8
338
Figure 8.38  Edit Mock Data
2. Figure 8.39 shows the mock data which we loaded in previous step (see Figure 
8.38).
Figure 8.39  Verify Mock Data
3. To run the app with mock data, click the project folder, and then from the 
menu bar, go to Run  Run With Mock Data (see Figure 8.40).

Development Process Overview
8.3
339
Figure 8.40  SAP Web IDE Application Run with Mock Data
You should now see the My Contacts app in the simulator.
Now, let’s have a look at the simulator in Figure 8.41. In the preview phase of the 
application, this feature lets you choose different types of devices.
Figure 8.41  Simulator
As shown in Figure 8.41, at the top of the page there are settings for Large,
Medium, Small, and Custom 1, so you can pick the size of the screen that you 
want to test your application on. After you make changes to the code of your 
application, you can see the changes instantly by clicking the Refresh button 2. 
You can change the orientation of the application to landscape or portrait by 

Introduction to SAP Web IDE
8
340
clicking the Orientation button 3. You can also select different languages from 
the dropdown 4; however, this requires the language property files as part of 
your application project. You can generate a QR code for your application 5, and 
you can then test this application directly on your mobile device by scanning the 
QR code.
8.3.4
Deployment
The last phase in the development process is to deploy your application from the 
SAP Web IDE to your server. You can deploy your application to the following:
 SAP HCP
 ABAP Repository
 Registering applications to SAP Fiori Launchpad
All these are integrated with GIT for your source code management needs.
In this final phase of the development process, let’s deploy the app to SAP HCP 
and then register the app to SAP Fiori Launchpad.
1. Right-click on the project folder, and then go to Deploy  Deploy to SAP HANA
Cloud Platform (see Figure 8.42).
Figure 8.42  Deploy to SAP HANA Cloud Platform

Development Process Overview
8.3
341
2. Log in to SAP HANA Cloud Platform (see Figure 8.43).
Figure 8.43  Logging in to SAP HANA Cloud Platform
3. Enter an Application Name and the Version number (see Figure 8.44).
4. Click Deploy (see Figure 8.44).
Figure 8.44  Application Name

Introduction to SAP Web IDE
8
342
5. To run this app on SAP Fiori Launchpad, click Register to SAP Fiori Launch-
pad (see Figure 8.45).
Figure 8.45  Registering to SAP Fiori Launchpad
6. Enter the Application Name and Description, and click Next (see Figure 8.46).
Figure 8.46  General App Information
7. Configure the tile by selecting the app Type, Title, Subtitle, and Icon (see Fig-
ure 8.47).

Development Process Overview
8.3
343
Figure 8.47  Tile Configuration
8. Assign the app to a Category and a Content Package, and click Next (see Fig-
ure 8.48).
Figure 8.48  Assignment
9. Click Finish to confirm the app is registered to SAP Fiori Launchpad (see Figure 
8.49).

Introduction to SAP Web IDE
8
344
Figure 8.49  Confirmation Step
10. After the app is registered, you should receive a popup confirmation message. 
Click OK to open SAP Fiori Launchpad (see Figure 8.50).
Figure 8.50  App Registration Notification
11. In SAP Fiori Launchpad, you should see the My Contacts app in the catalog. 
Now add this app to the My Home group by clicking + below the tile (see Fig-
ure 8.51).
Figure 8.51  SAP Fiori Catalog

Summary
8.4
345
You should now see the My Contacts app in SAP Fiori Launchpad. Clicking the 
tile will open the app created in this exercise (see Figure 8.52).
Figure 8.52  SAP Fiori Launchpad
8.4
Summary
In this chapter, we introduced you to the SAP Web IDE and showed you how to 
set up the SAP Web IDE with SAP HCP. At this point, you should understand the 
different phases of the development process and the options that are available in 
the SAP Web IDE to develop an SAP Fiori app. We created our first SAP Fiori app 
using the master detail standard template with an EDMX file as a source. In the 
next chapter, we’ll explain how to create and extend transactional apps using the 
SAP Web IDE.


347
Chapter 9 
This chapter demonstrates how to create and extend transactional apps 
via an example. A complete example app is also presented that illustrates 
the extension process.
9
Creating and Extending 
Transactional Apps
In Chapter 8, we discussed all the options that are available in the SAP Web IDE
to create or extend an SAP Fiori application, and in Chapter 7, we looked at the 
basic OData concepts and how to create an OData service. In this chapter, we’ll 
begin tying all the pieces together as we walk through the end-to-end process of 
creating and extending transactional apps.
In the first part of this chapter, we’ll explore the process of creating transactional 
apps (see Section 9.1). We’ll start by outlining some basics of app creation using 
a template in the SAP Web IDE, and then we’ll cover an end-to-end process of 
creating a transactional app. In the second part of this chapter, we’ll explore how 
to extend a transactional app. We’ll start our discussion in Section 9.2 with an 
overview of the extension process and examine various extension layers in the 
architecture and the skills required to extend each of these layers. In Section 
9.2.1, Section 9.2.2, and Section 9.2.3, we’ll describe the end-to-end extension 
process of each layer of the architecture with an example based on the My Quo-
tations transactional app.
9.1
Creating Transactional Apps
In this section, we’ll walk you through the step-by-step process of creating a 
transactional app using a template from the SAP Web IDE. In the previous chap-
ter, we gave you an overview of the different templates that are available as part 
of the SAP Web IDE. In this section, we’ll focus on the user interface (UI) layer of 
the transactional app. In a real-world scenario, you’ll be creating an OData service 

Creating and Extending Transactional Apps
9
348
and then creating the UI layer. However, in Chapter 7, we’ve covered the basics 
of OData creation and the extension process, which should be good enough for 
you to create an OData service. In this section, we’ll be using an existing OData 
service to create the app.
You can create simple to very complex apps using the SAP Web IDE. The main 
purpose of this section is to show you how to create a transactional app and pub-
lish it to SAP Fiori Launchpad. We’ll be using a full screen application template 
and an SR018_SO_TRACKING_SRV OData service to build the app.
9.1.1
Create a New Project Using a Template
In this step, we’ll be using a template in the SAP Web IDE and integrating the 
template with an existing OData service. Follow these steps:
1. Log in to the SAP Web IDE.
2. Select New Project from a Template.
3. Select the SAP Fiori Full Screen Application template, and then click Next
(see Figure 9.1).
Figure 9.1  SAP Fiori Template

Creating Transactional Apps
9.1
349
4. Enter a Project Name, and click Next (see Figure 9.2).
Figure 9.2  Project Name
5. Select the backend server connection from the dropdown, and then search for 
the SRA018_SO_TRACKING_SRV OData service (see Figure 9.3).
6. Select the OData service, and click Next.
Figure 9.3  Selecting the Service
7. Enter or choose the following details in Project Settings and Page 1 Section
(see Figure 9.4):

Creating and Extending Transactional Apps
9
350
 Project Namespace: “TrackSalesOrders”
 Title: “Sales Order Tracker”
 OData Collection: SalesOrders
 Item Title: SalesOrderNumber
 Numeric Attribute: TotalAmount
 Units Attribute: Currency
 Status Attribute: ShippingStatusCode
 Attribute: OrderDate
Figure 9.4  Project Settings and Page 1
8. Scroll down, enter and choose the following details in the Page 2 Section and 
Navigation Section, and then click Next (see Figure 9.5):
 Title: “Sales Order Details”
 Attribute 1: PO
 Attribute 2: ShipToAddressLine2
 OData Navigation: OrderItems
 Attribute 1: Description
 Attribute 2: Quantity
 Attribute 3: PricePerUnit
9. Click Finish to complete the project creation.

Creating Transactional Apps
9.1
351
Figure 9.5  Page 2 and Navigation Section
9.1.2
Test the App with Mock Data
In this step, you’ll test the app you created in the previous step with mock data 
and check whether the fields are showing the data correctly. Follow these steps:
1. From the TrackSalesOrder project folder, right-click on the index.html, and 
then select Run  Run with Mock Data (see Figure 9.6).
Figure 9.6  Run with Mock Data

Creating and Extending Transactional Apps
9
352
The first screen shows the Page 1 section (see Figure 9.7).
Figure 9.7  Page 1
2. Clicking the sales order row will take you to the second screen, which shows 
the fields of Page 2 and Navigation Section (see Figure 9.8).
Figure 9.8  Page 2 and Navigation Section

Creating Transactional Apps
9.1
353
9.1.3
Deploy the App to the ABAP Backend Server
In the previous steps, you successfully created and tested the app. Next, we’ll 
show you how to deploy the app to the backend server. Follow these steps:
1. Right-click on the project, and select Deploy  Deploy to SAPUI5 ABAP Repos-
itory (see Figure 9.9).
Figure 9.9  Deploying the App
2. Enter the Name, Description, and a Package. Click Next (see Figure 9.10).
Figure 9.10  Application Details
3. Click Finish to complete the deployment.

Creating and Extending Transactional Apps
9
354
You’ve now successfully created and deployed the app to the backend server. 
Next you’ll be working on setting up the app in SAP Fiori Launchpad and creating 
a catalog and tiles. You’ll follow the same steps as in Chapter 4, Section 4.6, so 
we’ll just include high level steps in the next section.
9.1.4
Publish the App to SAP Fiori Launchpad
In this step, you’ll publish the new app to the SAP Fiori Launchpad. Follow these 
steps: 
1. Log in to the backend server, and check the service via Transaction SICF, which 
you deployed previously (see Figure 9.11).
Figure 9.11  Maintain Service
2. Create a new launchpad via Transaction LPD_CUST (see Figure 9.12).
Figure 9.12  New Launchpad

Creating Transactional Apps
9.1
355
3. Enter the application URL parameter of the service (see Figure 9.13).
Figure 9.13  Application URL
4. Enter the Application Alias and the SAPUI5 component details (see Figure 
9.14).
Figure 9.14  Application Alias
5. Log in to the SAP Fiori Launchpad designer, and create a new catalog (see Fig-
ure 9.15).

Creating and Extending Transactional Apps
9
356
Figure 9.15  New Launchpad Catalog
6. Add a new target mapping, and enter the following details (see Figure 9.16):
 Semantic Object: “SalesOrders”
 Action: “tracker”
 Launchpad Role: “ZSM_LPD”
 Launchpad Instance: “TRANSACTIONAL”
 Application Alias: “SalesOrderTracker”
Figure 9.16  Target Mapping

Creating Transactional Apps
9.1
357
7. Next, create a new tile with the following details (see Figure 9.17):
 Title: Enter “Sales Order Tracker”.
 Icon: Select an icon.
 Semantic Object: Enter “SalesOrders”.
 Action: Enter “tracker”.
Figure 9.17  New Tile
8. Create a new role in the ABAP system, and then assign the launchpad catalog 
and user to the role (see Figure 9.18).
Figure 9.18  Maintain Role

Creating and Extending Transactional Apps
9
358
9.
Log in to SAP Fiori Launchpad, and you should now see the new Sales Order 
Tracker app in the catalog.
10. Add it to your My Home group or any group, and launch the app (see Figure 
9.19).
Figure 9.19  New Transactional App
You’ve successfully created and deployed a transactional app to the ABAP server 
and then published the app to SAP Fiori Launchpad. Next, we’ll show how to 
extend a transactional app.
9.2
Extending Transactional Apps
Many customers want to customize their SAP Fiori apps beyond the standard 
applications delivered by SAP. The ability to extend transactional and other SAP 
Fiori apps is useful when, for example, you want to add a field, hide nonrelevant 
controls, replace a standard view with a custom view, or add a custom OData ser-
vice. So depending on the application type and extension requirements, you can 
enhance one or multiple content layers.
Figure 9.20 shows the system landscape of a transactional app. The landscape is 
comprised of three main layers. The following explains each layer and when you 
can extend them:
 SAP Business Suite layer  
This contains the business logic and backend data. You can extend the SAP Busi-
ness Suite layer if the backend logic and the content required for the app exten-
sion don’t exist.

Extending Transactional Apps
9.2
359
 SAP Gateway layer  
This maintains the connections to the backend system and allows users to cre-
ate OData services. You can extend the SAP Gateway layer (OData) if the back-
end logic and the content required for the app enhancement are present in the 
SAP Business Suite layer, but not exposed to the SAP Gateway server.
 UI layer  
This layer contains the product-specific UI add-ons, SAPUI5 control library, and 
SAP Fiori Launchpad. You can extend the UI layer if the backend logic and the 
content required for the app extension are present in the SAP Gateway layer 
but not exposed to the UI layer.
Figure 9.20  Architecture
Table 9.1 lists the knowledge/skill required to extend each of these layers.
Content Layer
SAPUI5
HTML5, 
JavaScript
SAP Fiori 
Specific UI 
Development
ABAP SAP 
Gateway
SAP 
Business 
Suite
UI
Yes
Yes
Yes
SAP Gateway
Yes
Yes
SAP Business 
Suite
Yes
Yes
Table 9.1  Skill Matrix 
ABAP Frontend Server
UI Layer
Gateway (OData) Layer
Transactional Apps Extension
SAP Business Suite
any database/SAP HANA
ABAP Backend Server

Creating and Extending Transactional Apps
9
360
Extending a transactional app end to end includes many different steps at each of 
the content layers, and we’ve broken the app extension process down into nine 
steps (see Figure 9.21). Each of these steps can be performed by different teams 
based on existing skillsets.
Figure 9.21  High Level Steps
Extending transactional apps is modification-free with this approach, so any 
upgrade to standard SAP Fiori apps won’t be impacted. We’ll walk you through 
each of these steps in more detail in the next sections. However, let’s first review 
the tools and transaction codes that you need to extend each layer:
 ABAP backend server
 Transaction SE80 (ABAP Object Navigator)
 Transaction SE11 (ABAP Dictionary)
 UI layer
 SAP Web IDE or Eclipse with ABAP Repository Team Provider
 ABAP frontend server
 Transaction SEGW (Gateway Service Builder)
Implement
extensions
Configure OData 
URL of new
OData service
Preview and test in
SAP Web IDE
Deploy extended
app to ABAP
Gateway server
Configure extended 
app in SAP Fiori
Launchpad
1
2
3
4
5
6
7
8
9
UI Layer
ABAP Frontend Server
ABAP Backend Server
Add fields in
extension of
OData DDIC
structures 
Create OData project
that redefines
std. OData project 
Create new
extension project
Register new service

Extending Transactional Apps
9.2
361
With that high level introduction, let’s dive straight into the steps for extending a 
transactional app by using an example based on the My Quotations transactional 
app. You’ll extend the app by adding the State field to the standard app (see Fig-
ure 9.22); that is, you’ll display the State field in the Ship to address.
Figure 9.22  My Quotations Standard App
9.2.1
Extend the SAP Business Suite Layer
The first step in the extension process is to append the ABAP DDIC structure of 
the OData service with the new field in the backend server (SAP Business Suite 
layer), so that you can use the new Region field in the UI layer.
 Region/State
Region and State are the same. Region is the field from the DDIC structure, and State
is the title that you’re adding in the app.
To add a field to the app, you need to find out the package and the DDIC structure 
details. You can do this by referring to the SAP Fiori app-specific online help at 
http://help.sap.com/fiori, and navigating to the App Extensibility section of the 
My Quotations app.

Creating and Extending Transactional Apps
9
362
After you have the package details, follow these steps:
1. Log in to the ABAP backend system.
2. Run Transaction SE80.
3. From the dropdown, choose Package, and click the down arrow button (see 
Figure 9.23).
Figure 9.23  Object Navigator
4. Click the Information System button in the popup window.
5. Enter “*ODATA_MY_QUOTATION” in the Package field (see Figure 9.24).
6. Click Continue 
, or press (Enter).
Figure 9.24  Search Package

Extending Transactional Apps
9.2
363
7. Select the package ERP_SD_ODATA_MY_QUOTATION, and click Continue 
 
(see Figure 9.25).
Figure 9.25  Select Package
8. On the left side, drill down to Dictionary Objects  Structures (see Figure 
9.26).
Figure 9.26  Navigate to Structures
9. From the list of structures shown in Figure 9.27, double-click TDS_ODATA_
QUOTATION_PARTNER_IN to view the structure details.

Creating and Extending Transactional Apps
9
364
Figure 9.27  Selecting the Partner Structure
10. Click Append Structure (see Figure 9.28).
Figure 9.28  Selecting Append Structure
11. Enter “ZQUOTATION_PARTNER_EXTN” in the Append Name field (see Fig-
ure 9.29). Click Continue 
 or press (Enter).
Figure 9.29  Append Name
12. Enter “Partner Extension for My Quotations” in the Short Description field.
13. Add the following details shown in Figure 9.30:
 Component: “REGION”
 Typing Methods: “Types”
14. Click the Predefined Type button to enable the Data Type and Length fields. 
Enter the remaining details:
 Data Type: “CHAR”
 Length: “3”
 Short Description: “Region”

Extending Transactional Apps
9.2
365
Figure 9.30  Adding New Fields
15. Check for errors by clicking 
.
16. Click Save 
.
17. Click Local Object/Package.
18. Click Save.
19. Activate the structure by clicking Activate 
.
20. Now check if the new field is added to the partner structure. Double-click on 
TDS_ODATA_QUOTATION_PARTNER, and you should now see the Region
field added to the structure (see Figure 9.31).
Figure 9.31  Appended Structure
You’ve successfully added a new field to the structure.

Creating and Extending Transactional Apps
9
366
9.2.2
Extend the SAP Gateway Layer
In Chapter 7, we discussed OData concepts in general with a simple OData service 
example. Additionally, we looked at the different options when redefining an 
OData service that is created in SAP Gateway and external services such as BOPF, 
SAP BW Query, and GenIL. Using the SAP Gateway Service Builder, you can 
extend the OData service using the redefine technique, which lets you reuse the 
business objects and services from your existing SAP system landscape.
The SAP Gateway Service Builder is an OData-compliant modeling environment 
that provides developers with a set of tools for creating and maintaining an OData 
service. This tool provides options for both experienced developers and less expe-
rienced developers. Experienced developers can define a new service, whereas 
less experienced developers can import existing definition files or use content 
generators to expose the data for simple consumption. In addition, this tool also 
empowers nonprogrammers to build applications using wizards and templates.
Redefine and Extend the OData Service
A standard SAP-delivered project will be the starting point for the extension proj-
ect. Let’s now look at how to extend an OData service by using the redefine tech-
nique in the SAP Gateway Service Builder. Follow these steps:
1. Log in to ABAP frontend server.
2. Run Transaction SEGW.
3. Create a new project by clicking the Create Project icon (see Figure 9.32).
Figure 9.32  Create New Project Icon
4. On the next page, enter the following project details (see Figure 9.33):
 Project: “ZLORD_MY_QUOTATION”
 Description: “OData Service Extension for My Quotation”

Extending Transactional Apps
9.2
367
5. Click Local Object.
Figure 9.33  Selecting a Package
6. In the new project, right-click on the Data Model Redefine  OData Service
(GW) (see Figure 9.34).
Figure 9.34  Redefining OData Service
7. Enter the following details (see Figure 9.35):
 Technical Service Name: “LORD_MY_QUOTATION_SRV”
 Version: “1”
8. Click Next.

Creating and Extending Transactional Apps
9
368
Figure 9.35  Selecting the Standard SAP OData Service
9.
Select all the fields by clicking 
 (see Figure 9.36).
10. Click Finish.
Figure 9.36  Selecting All OData Artifacts

Extending Transactional Apps
9.2
369
11. Choose Data Model  Entity Types  Partner (see Figure 9.37).
Figure 9.37  Partner Entity Type Properties
12. Double-click on Properties.
13. Append a new row by clicking 
.
14. Enter the following details in the new row (see Figure 9.38):
 Name: “State”. This is the property that is visible externally to the OData.
 EDM Core Type: “Edm.String”. This is the EMD data for each property.
 Max Length: “25”. This property is the length of the data type.
 Label: “State”. This field’s content is used by OData.
After you enter all the fields; your screen should look similar to Figure 9.38.
15. Finally, on this same screen as the preceding options, select Region from the 
value help for the ABAP Field Name (see Figure 9.39). With the ABAP Data 
Dictionary binding, you’ll be able to know the EDM data type and the length 
of the entity type as well.

Creating and Extending Transactional Apps
9
370
Figure 9.38  Adding a New Field
Figure 9.39  Selecting the Region Field
16. Click the Check Project Consistency icon 
 on the top left to check for 
errors.
17. Click Generate Runtime Objects 
.

Extending Transactional Apps
9.2
371
18. Verify the Model Provider Class (MPC), Data Provider Class (DPC), and 
Service Registration details, and click Continue 
 (Figure 9.40).
 More Information
Refer Chapter 7, Section 7.2, for details about the MPC, DPC, and service definition.
Figure 9.40  Model Provider Class, Data Provider Class, and New OData Service Registration
19. Select Local Object on the next screen (see Figure 9.41).
Figure 9.41  Local Object

Creating and Extending Transactional Apps
9
372
20. The SAP Gateway Service Builder then generates the following runtime arti-
facts (see Figure 9.42):
 Data Provider Base Class
 Data Provider Extension Class
 Model Provider Base Class
 Model Provider Extension Class
 Registered Model
 Registered Service
Figure 9.42  Runtime Artifacts
21. Whenever you redefine an OData service, it generates the new OData service 
with the DPC and MPC. The DPC is used to code your CRUD methods as well 
as function import methods. You can define all backend logic in redefined 
methods of the DPC extension class. The MPC is used to define the data 
model; using the code-based implementation methods, you can create enti-
ties, properties, and so on.
22. The SAP Gateway Service Builder generates the base class and extension class
after you generate a project. The base class inherits its code from the minimal 
SAP Gateway abstract class /IWBEP/CL_MGW_PUSH_ABS_DATA, and the 
extension class is created for both MPC and DPC by the SAP Gateway Service 
Builder, which is inherited from the base class.
You’ve successfully extended the OData service! In the next section, we’ll register 
the OData service.

Extending Transactional Apps
9.2
373
Register the OData Service
The next step is to register the OData service. To expose the OData service you 
created in the previous step, you must create an entry in the service catalog in the 
SAP Gateway system (frontend server). A custom OData service is always devel-
oped on top of the SAP Gateway add-on installed in the backend server. To regis-
ter the service on the frontend server, follow these steps:
1. Select the Service Maintenance folder from your project.
2. Select your SAP Gateway hub system, and click Register (Figure 9.43).
Figure 9.43  Registering the Service
3. Select Local Package.
4. Click Continue 
.
Test the OData Service
After the service is registered, the final step is to test the OData service. In the 
next steps, we’ll test the service via a quotation ID that is available in the backend 
system. You can select any quotation that is available in your backend system to 
check if the OData service is responding correctly.
Follow these steps:
1. Run Transaction /IWFND/MAINT_SERVICE (on the SAP frontend server).
2. Double-click the service in the list you’ve created in the previous step.

Creating and Extending Transactional Apps
9
374
3. Click Gateway Client (see Figure 9.44).
Figure 9.44  Running the Gateway Client
4. In the line Request URI, replace ?$format=xml with $metadata.
5. You should now see the State property under the Partner entity type (see Fig-
ure 9.45).
Figure 9.45  State Property
6. In the line Request URI, replace ?format=xml with the following text: “Quo-
tationHeaderSet('<your QuotationID>')?$expand=PartnerSet”.
For example: QuotationHeaderSet('20000030')?$expand=PartnerSet
7. You should then see the State field populated with the data (see Figure 9.46).
 
Quotation ID
We’ll be testing with a quotation ID 20000030. You can just use any quotation ID that 
is available in the backend you’re using.

Extending Transactional Apps
9.2
375
Figure 9.46  State Value
Now let’s verify the data with the backend server. Follow these steps:
1. Log in to the SAP ERP backend system.
2. Run Transaction VA23.
3. Enter any quotation available in your system, and press (Enter).
4. From the menu bar, navigate to Goto  Header  Partner.
5. Double-click the partner function Ship-to party.
You should now see the same value in the State field in the backend as well (refer 
to Figure 9.46 and Figure 9.47).

Creating and Extending Transactional Apps
9
376
Figure 9.47  Backend Data
9.2.3
Extend the UI Layer
The next step is to add the new field to the UI layer. SAP delivers the SAPUI5 proj-
ect for every SAP Fiori transactional app. You can get the details of a specific app 
from the online help at http://help.sap.com/fiori. Figure 9.48 shows the SAPUI5 
application details of the My Quotations transactional app.
Figure 9.48  SAPUI5 Application
In Chapter 8, we covered all of the basic options that are available in the SAP 
Web IDE to extend an SAPUI5 app. Let’s now explore those options in greater 
detail. In this section, you’ll extend the My Quotations SAPUI5 app by adding 
the State field to the UI layer. SAP provides extension points for extending stan-
dard views of the application with custom content. You can get the extension 
points details from the app-specific help page (see Figure 9.49). In addition, the 
Extension wizard in the SAP Web IDE lists all the extension points that are avail-
able for a specific view or fragment. We’ll cover this in our example.

Extending Transactional Apps
9.2
377
Figure 9.49  Extension Points
In Chapter 2, we discussed the customizations that are supported in the standard 
SAPUI5 app. In this section, you’ll implement the view extension by using exten-
sion points to insert custom content (i.e., you’ll add the State field to the 
S3.view.xml view).
The following are high level steps that you need to follow to extend the UI layer 
for transactional apps:
1. Create a new extension project using the SAP-delivered standard application.
2. Replace the OData service with the custom OData service.
3. Identify extension points and views.
4. Publish the custom application to the ABAP Repository.
5. Configure the app on SAP Fiori Launchpad.
6. Configure and test the application in SAP Fiori Launchpad.
Create a New Extension Project
The first step in this process is to create a new extension project by importing the 
original SAPUI5 application for the My Quotations app. Refer to Figure 9.48 for 
the technical name of the SAPUI5 app. Follow these steps to create a new project:

Creating and Extending Transactional Apps
9
378
1. Log in to the SAP Web IDE.
2. Click New Extension Project in the welcome screen, or navigate to File  New 
Extension Project from the menu bar (see Figure 9.50).
Figure 9.50  New Extension Project
3. Click Remote, and then choose SAPUI5 ABAP Repository (see Figure 9.51).
Figure 9.51  Selecting the Remote System
4. Select your SAP Gateway system.
5. Search for “sd_myquotes” (see Figure 9.52).
6. Choose the sd_myquotes app, and click OK.
7. Enter the Extension Project name, and click Next (see Figure 9.53).

Extending Transactional Apps
9.2
379
Figure 9.52  Selecting the SAPUI5 Component
Figure 9.53  Extension Project
8. Uncheck the Open extension project in extensibility pane checkbox, and click 
Finish (see Figure 9.54).

Creating and Extending Transactional Apps
9
380
Figure 9.54  Completing the Extension Project
You’ve successfully created a new extension project using the original applica-
tion, so you should now see the extension project created under your projects 
folder. Remember, modifications made to this project won’t impact the actual 
application.
Replace the OData Service with the Custom OData Service
Next, you’ll replace the OData service. The standard My Quotations app is devel-
oped using the standard LORD_MY_QUOTATION_SRV OData service. To add the 
new Region field to the app, you must replace the standard OData service with 
the custom OData service you created in Section 9.2.2. Follow these steps to 
replace the OData service:
1. Right-click on the new project folder, and then select New  Extension (see Fig-
ure 9.55).
Figure 9.55  New Extension

Extending Transactional Apps
9.2
381
2. Check your extension project name, and click Next (see Figure 9.56).
Figure 9.56  Verifying the Project
3. Choose Replace Service, and click Next (see Figure 9.57).
Figure 9.57  Choosing Replace Service
4. Choose Service Catalog from the listed sources.
5. Select the connection of your SAP system.
6. Search for “ZLORD_MY_QUOTATION_SRV” (see Figure 9.58). Click Next.

Creating and Extending Transactional Apps
9
382
Figure 9.58  Selecting the New Service
7. Drill down to check if the new field is displayed (see Figure 9.59). Click Next.
Figure 9.59  Checking for the New Field

Extending Transactional Apps
9.2
383
8. Click Finish.
Identify the Extension Points and Views
You’ve successfully created an extension project and replaced the OData service. 
Let’s now add the new field to the UI layer. For that, you first need to identify the 
view and then the extension points of that view. Perform the following steps to 
add a field in the custom view:
1. Right-click on your project, and select New  Extension.
2. Verify the extension project location, and click Next.
3. Choose Extend View/Fragment, and click Next (see Figure 9.60).
Figure 9.60  Extend View
4. Select S3.view.xml from the View/Fragment dropdown list. It will display the 
extension points that are available for that view.
5. Select the Extension Point, and click Next (see Figure 9.61).
 Extension Point Tag
The extension point tag in the XML views indicates the position in which you can insert 
your custom content.

Creating and Extending Transactional Apps
9
384
Figure 9.61  Extending the S3 View
6. Click Finish. You should now see the S3 extension point under the sap.ui. 
viewExtensions in the component.js file (see Figure 9.62).
Figure 9.62  Extension Point
 
Extension Configuration
The component.js file contains the extension configuration, which has the following 
properties:
 sap.ui.viewExtensions  
This is used to provide custom view content in standard SAP applications.
 sap.ui.viewModifications  
This is used for modifying certain properties of controls in standard SAP applications.
 sap.ui.viewReplacements  
This is used to replace a view with a custom view in standard SAP applications.
 sap.ui.ControllerExtensions  
This is used for replacing a controller with a custom controller in standard SAP appli-
cations.

Extending Transactional Apps
9.2
385
7.
You should now see a new extended view under the Views folder. Double-
click the extended view to open it in the code editor (see Figure 9.63).
8.
Add the following code:
<Label text="{i18n>EXT_STATE}" /> 
<Text text="{shipTo>/State}" />
Figure 9.63  New Field
9.
Click Save.
10. Right-click on the project folder, and then select New  Folder.
11. Create a folder with the name i18n.
12. Right-click on the new i18n folder, and then select New  File.
13. Create the file with the name i18n_custom.properties (see Figure 9.64).
Figure 9.64  i18n Files

Creating and Extending Transactional Apps
9
386
14. Double-click on the i18n_custom.properties file, and then enter “EXT_
STATE=State”.
15. Click Save.
Publish the Custom Application to the ABAP Repository
The next step is to publish your custom application to the ABAP Repository.
Right-click on your project, and select Deploy  Deploy to SAPUI5 ABAP Reposi-
tory (see Figure 9.65).
Figure 9.65  Deploying the App
Configure and Test the App in SAP Fiori Launchpad
After the app is published to the ABAP Repository, you need to follow the same 
steps as in Chapter 4 to make this app available to the users on SAP Fiori Launch-
pad. After you publish and launch the app from SAP Fiori Launchpad, you should 
see the new State field added to the app (see Figure 9.66).

Summary
9.3
387
Figure 9.66  Extended App
9.3
Summary
In the first part of this chapter, we showed you how to create a transactional app 
using a template in the SAP Web IDE. In the second part of this chapter, we cov-
ered the extension process with an example based on the My Quotations app. 
This chapter provided detailed, step-by-step instructions on how to extend the 
different layers in the architecture for extending an SAP Fiori transactional app. 
This chapter should provide you with enough information to get started with cre-
ating and extending transactional apps. In the next chapter, we’ll explore in detail 
how to create and extend fact sheet apps.


389
Chapter 10 
This chapter demonstrates how to create and extend a fact sheet app and 
provides a complete example app to illustrate the extension process.
10
Creating and Extending Fact Sheet Apps
In this chapter, we’ll show you how to create and extend fact sheet apps. We’ll 
start with a brief introduction into the various layers of the system landscape of 
fact sheet apps, and we’ll highlight the steps to create and extend them. To recap, 
fact sheet apps display contextual information about central objects that are used 
in your business operations. You can drill down from one fact sheet to another 
fact sheet, and you can call fact sheets from SAP Fiori Launchpad. Fact sheet apps 
run only on an SAP HANA database, and they require an ABAP stack.
Figure 10.1 shows the system landscape of fact sheet apps. The landscape is
comprised of two layers: the user interface (UI) layer that contains the product-
specific UI add-ons, SAPUI5 control library, and SAP Fiori Launchpad, and the
SAP Business Suite layer that contains the search model.
Figure 10.1  Fact Sheet Apps Architecture
ABAP Frontend Server
UI Add-On
(SAPUI5, SAP Fiori Launchpad)
SAP Gateway
ABAP Backend Server
SAP Business Suite
SAP Business Suite
(Product-specific UI components)
ERP
CRM
SRM
SCM
ERP
CRM
SRM
SCM
Trusted RFC
Search Models

Creating and Extending Fact Sheet Apps
10
390
Fact sheet apps are created or extended from annotation files in an XML format, 
which are based on semantic and object structure information. A fact sheet app is 
represented by a combination of a search model, OData service, and the Business 
Server Page (BSP) application. Fact sheet apps can be extended by enhancing one 
or multiple layers. As explained in Chapter 9, you can create new SAP Fiori apps 
from scratch or extend existing SAP Fiori apps.
Before we dig deep into the creation and extension process, we need to enable 
the Fact Sheet Editor plugin in the SAP Web IDE, which is covered in Section 
10.1. In Section 10.2, we’ll teach you how to create a fact sheet app using an exist-
ing search model, and then at the end of this section, we’ll highlight the steps to 
deploy the app to the ABAP Repository. In Section 10.3, we’ll move on to the 
extension process. Section 10.3.1 provides an example based on the Sales Order 
fact sheet app to show you how to extend a search model and create connectors 
using the Search and Analytics Modeler and the Connector Administrator Cockpit 
tools. The SAP Web IDE is still a young product and it’s being developed at full 
speed by SAP. The goal of this chapter is to introduce you to the templates you 
can use to create or extend SAP Fiori fact sheet apps. In Section 10.3.2, we’ll show 
you how to enhance the app using the Existing Fact Sheet Application template 
and a Modification Free Fact Sheet Application template, and then we’ll explain 
how to deploy the extended app in Section 10.3.3.
 
Checklist
You’ll use the following in the chapter:
 Search and Analytics Modeler
 Connector Administrator Cockpit
 SAP Web IDE
10.1
Enabling the Fact Sheet App Editor Plugin
In Chapter 8, we introduced you to the SAP Web IDE and walked you through the 
various options that are available with this tool. Next, we need to enable the Fact 
Sheet Editor plugin in the SAP Web IDE to create or extend fact sheet apps. Fol-
low these steps:
1. Log in to the SAP Web IDE.

Creating Fact Sheet Apps
10.2
391
2. Navigate to Tools  Preferences from the menu bar (see Figure 10.2).
Figure 10.2  Adding Plugins
3. Select Optional Plugins under Plugins.
4. In the popup page, select the Fact Sheet Editor plugin, and click Save (see Fig-
ure 10.3).
Figure 10.3  Enabling the Fact Sheet Editor Plugin
5. Refresh your browser to view the fact sheet app plugins.
You’ve successfully enabled the Fact Sheet Editor plugin. Next, we’ll dive into the 
fact sheet app creation process.
10.2
Creating Fact Sheet Apps
In this section, we’ll highlight the steps that are required for creating a fact sheet 
app using an existing search model and OData service.

Creating and Extending Fact Sheet Apps
10
392
10.2.1
Create the Search Model
The process of creating and extending a search model is very similar. In both 
cases, the system will take you through a similar sequence of screens to configure 
the search model. Therefore, refer to Section 10.3.1 on extending the search 
model.
To create a search model, you simply select Create in the Search and Analytics 
Modeler. To extend an existing search model, you click Edit (see Figure 10.4). In 
Section 10.3.1, we’ll show you how to extend an existing search model by adding 
a new field.
Figure 10.4  Create or Extend a Search Model
In this fact sheet creation process, we’ll assume that you already have a search 
model and have created a search connector as instructed in Chapter 5, Section 
5.4. In the following sections, we’ll look at the necessary steps to create a search 
model by creating and adding the necessary software components. These steps 
are also relevant for extension.
Create the Software Components
Before you create or extend a search model, you first need to create a customer-
specific software component. Similarly, this is also necessary for the extension 
process to include all the SAP-standard software components and enhance them.
Proceed with the following steps:
1. Launch the Search and Analytics Modeler tool by running Transaction ESH_
MODELER from the ABAP system.
2. Select Software Components, and then click Maintain Software Compo-
nents (see Figure 10.5).

Creating Fact Sheet Apps
10.2
393
Figure 10.5  Search and Analytics Modeler
3. Create a software component by clicking Create (see Figure 10.6).
Figure 10.6  Creating the Search Connector
4. Enter a name in the New SW Comp field.
5. In the Package Assignment field, assign a package by clicking 
, as shown in 
Figure 10.7 (you can create a new package in the Object Navigator using Trans-
action SE80).
6. Click Create to create the software component.

Creating and Extending Fact Sheet Apps
10
394
Figure 10.7  New Search Connector Component
7. You should now see the new software component in the list shown in Figure 
10.8. Click Save.
Figure 10.8  Saving the Component
8. Next, you need to add the changes to a transport request. If a transport request 
exists, it will show in the list, or you can create a new request by clicking Cre-
ate (see Figure 10.9).
Figure 10.9  Creating a Transport Request

Creating Fact Sheet Apps
10.2
395
9.
Select the Request ID, and then click Select (see Figure 10.10).
Figure 10.10  Assigning the Transport Request
10. Save the software component by clicking Save (see Figure 10.11).
Figure 10.11  Saving the Software Component
Add the Software Components to the Customer-Specific Software Components
Next, you’ll add the software component to the customer-specific software com-
ponents to enhance the model. Follow these steps:
1. From the Search and Analytics Modeler tool, select the new customer-specific 
software component, click Software Components, and then select Include
Software Component (see Figure 10.12).

Creating and Extending Fact Sheet Apps
10
396
Figure 10.12  Including the Standard SAP Component
2. Select the existing software component that you want to refer to—in our exam-
ple, it’s SAPAPPLH—and click Select (see Figure 10.13).
Figure 10.13  Selecting the SAP Software Component
3. On the next screen, you can resolve conflicts (i.e., when there are any object 
types with identical names they are displayed here in this screen, and the sys-
tem automatically renames the technical objects and background functions).
4. In our example, there are no conflicts, so click Close (see Figure 10.14).

Creating Fact Sheet Apps
10.2
397
Figure 10.14  Resolve Conflicts
5. Select a transport Request ID, and then click Select (see Figure 10.15).
Figure 10.15  Assigning a Transport
6. The software component SAPAPPLH will now appear below the customer-spe-
cific software component ZSAPAPPLH, as shown in Figure 10.16.
Figure 10.16  Customer-Specific Software Component

Creating and Extending Fact Sheet Apps
10
398
This completes the process of creating and adding the software components. As 
previously stated, the extension process is practically identical to creating 
search models. Therefore, refer to Section 10.3.1 for further information or visit 
https://help.sap.com/saphelp_nw73/helpdata/en/b6/e51604ca9a480bb8d58111a8
37b4ae/content.html.
 
Creating an OData Service
In Chapter 7, we discussed the steps for creating an OData service. Simply follow the 
same process to do so here.
10.2.2
Create the UI Layer
In this section, we’ll show you how to create a new fact sheet app on the sales 
order search model. We’ll use the CB_SALES_ORDER_SRV OData service (refer to 
Chapter 5, Section 5.2) to build the fact sheet app. Follow these steps:
1. Log in to the SAP Web IDE, and click New Project from a Template.
2. You can either build an app using the existing facts sheet app or build the app 
from the scratch:
 Existing Fact Sheet Application: You use this template when you want to 
create a new fact sheet app using an existing fact sheet app as a template.
 New Fact Sheet Application: You use this template if you want to create a 
fact sheet app from scratch.
3. Select New Fact Sheet Application, and then click Next (see Figure 10.17).
Figure 10.17  New Fact Sheet Template

Creating Fact Sheet Apps
10.2
399
4. Enter the Project Name, and click Next (see Figure 10.18).
Figure 10.18  Project Name
5. Select the connection name, and search for “CB_SALES_ORDER_SRV”.
6. Select the CB_SALES_ORDER_SRV service, and click Next (see Figure 10.19).
Figure 10.19  Data Connection

Creating and Extending Fact Sheet Apps
10
400
7.
Enter the following details, as shown in Figure 10.20:
 Main OData Entity: SalesOrders
 Fact Sheet Name: NB Sales
 Name: VBELN_DESCR
 Additional Name: SalesOrder
Click Next.
Figure 10.20  Template Fields
8.
Click Finish.
9.
Double click the CB_SALES_ORDER_SRV.anno file to open it in the Fact Sheet 
App editor (see Figure 10.21).
10. Drag and drop the following fields from the Available Fields tab to the sec-
tion in the design editor (see Figure 10.22):
 Key Facts Section: NetAmount and OverallSDProcessStatusDesc
 Facet Section: SalesOrder, SoldToParty, and ShipToPartyName

Creating Fact Sheet Apps
10.2
401
Figure 10.21  Annotation File
Figure 10.22  Drag and Drop Fields
11. Save the project by clicking the Save button.
12. Run the fact sheet app by right-clicking on the .anno file and navigating to 
Run  Run Fact Sheet (see Figure 10.23).

Creating and Extending Fact Sheet Apps
10
402
Figure 10.23  Preview Fact Sheet
You should now see the new Sales Order fact sheet app with the data from the 
backend (see Figure 10.24).
Figure 10.24  New Fact Sheet
We have successfully created a fact sheet app. Next, we will show you how to 
deploy the app.

Creating Fact Sheet Apps
10.2
403
10.2.3
Deploy the Fact Sheet App
In this section, we will deploy the project to the ABAP Repository by following 
these steps:
1. Right-click on the project, and go to Deploy  Deploy to SAPUI5 ABAP Repos-
itory (see Figure 10.25).
Figure 10.25  Deploying to the ABAP Repository
2. Enter the Name and Description, and select a Package. Click Next (see Figure 
10.26).
Figure 10.26  Application Details

Creating and Extending Fact Sheet Apps
10
404
3. Select the ABAP backend system connection.
4. Select the Deploy a new application radio button, and then click Next (see Fig-
ure 10.27).
Figure 10.27  System Details
5. Click Finish.
You’ve successfully deployed a new fact sheet app to the ABAP Repository. Next, 
let’s check whether the app and the service were created in the ABAP backend 
server. Follow these steps:
1. Log in to the ABAP backend server, and run Transaction SE80.
2. Search for the “ZNBSALES” BSP application and check whether the objects are 
created (see Figure 10.28).
Figure 10.28  Project Files

Creating Fact Sheet Apps
10.2
405
3. Check whether the service is created by running Transaction SICF and search-
ing for the “ZNBSALES” service (see Figure 10.29).
Figure 10.29  Fact Sheet Service
4. Provide access to the end user to the OData service that you used to build the 
fact sheet app. In Chapter 4, Section 4.4.2 we showed you how to assign a role 
to a user. You can follow the same process and assign the SAP_SD_SALESOR-
DER_APP role to the end user (see Figure 10.30).
Figure 10.30  Backend Role

Creating and Extending Fact Sheet Apps
10
406
 
Roles
You can create your own roles and assign an OData service and a user to your custom 
role.
5. The next step is to create a new launchpad and application using Transaction 
LPD_CUST. Refer to Chapter 4, Section 4.6, to complete the following steps:
 Create a new launchpad.
 Create a new application under the new launchpad.
 Create a new catalog in the SAP Fiori Launchpad designer.
 Add a new target mapping with the launchpad as the target.
6. To create a new launchpad and application, you can use the existing Sales Order 
fact sheet app as a reference (see Figure 10.31) and use the details from step 2 
and 3 of this section.
Figure 10.31  Fact Sheet Launchpad
7. Similarly, to create catalog and target mapping, you can use the existing Sales 
Order fact sheet’s target mapping details as a reference while creating target 
mapping (see Figure 10.32).

Extending Fact Sheet Apps
10.3
407
Figure 10.32  Target Mapping
Now that you understand the end-to-end process to create a fact sheet app, let’s 
look at the fact sheet extension process.
10.3
Extending Fact Sheet Apps
You extend a fact sheet when a standard fact sheet app delivered by SAP doesn’t 
meet your requirements. The following are scenarios when you can extend a spe-
cific layer of a system landscape for fact sheet apps:
 You can extend a search model when you want to add fields to the fact sheet 
app that aren’t available in the search model.
 You can extend the UI layer if the backend logic and the content required for 
the app extension are present in the SAP Gateway layer, but it’s not exposed to 
UI layer.
We’ll use an example based on the Sales Order fact sheet app in this section. We’ll 
walk you through extending both a search model and the UI layer by adding the 
new field Risk Category to the Sales Order app.

Creating and Extending Fact Sheet Apps
10
408
10.3.1
Extend the Search Model
The first step in the extension process is to extend the search model. From the 
SAP Fiori apps reference library, search for the Sales Order fact sheet app, and 
navigate to the Configuration section. Go to the Search Connector section to 
get a list of connectors for the Sales Order fact sheet app (see Figure 10.33). In 
Chapter 5, Section 5.4, we discussed how to create a connector on a search model 
and how to enable an app using these connectors. In this section, we’ll show you 
how to extend a search model by adding a field.
Figure 10.33  Search Models
 
Search Models and Connectors
To get the complete list of search models and connectors of all the SAP Fiori fact sheet 
apps, refer to SAP Note 1861013.
To extend a model, we use the Search and Analytics Modeler, which is a compo-
nent of SAP Enterprise Search. This tool allows developers to create or change 
models for search object connectors. You need to have extensive knowledge of 
the SAP Business Suite backend technology to create or change any search model.
SAP Enterprise Search and the Search and Analytics Modeler tool are big topics. 
In this chapter, we’ll cover a very basic example on how to enhance a search 
model by added a field to it. The sections that follow walk through the different 
steps for extending the search model.

Extending Fact Sheet Apps
10.3
409
Enhance the Model
In this section, we’ll begin by enhancing our data model. As previously men-
tioned, most of the steps are similar when creating or enhancing a search object 
connector. In both scenarios, you’ll follow the same sequence of screens:
1. Expand the SD-SLS component, and then select SALES_ORDER_H.
2. Click Edit (see Figure 10.34).
Figure 10.34  Editing the Data Model
3. Click Yes to confirm the model enhancements, as shown in Figure 10.35.
Figure 10.35  Enhance Model Confirmation Popup
4. Next, you’ll be working through the roadmap steps. In the first step (Model
Properties), the properties of the search object connector model are defined 
(i.e., the Model Type and the component properties). Click Next (see Figure 
10.36).

Creating and Extending Fact Sheet Apps
10
410
Figure 10.36  Model Properties
5. In the second step (Model Nodes), you create or modify nodes and assign 
node names and node attributes. From the List of Nodes of ‘SALES_ORDER_
H’ section, select SO_VBAK (see Figure 10.37).
Figure 10.37  Model Nodes – Select Node
6. Scroll down to the Details Attributes section, and select the CTLPC (Risk cat-
egory) attribute by checking the Select for Node checkbox. Click Next (see 
Figure 10.38).

Extending Fact Sheet Apps
10.3
411
Figure 10.38  Selecting the New Field
7. In the third step (Node Relations), all the nodes you selected in the previous 
steps and their relations are listed. Click Next (see Figure 10.39).
Figure 10.39  Node Relations
8. Next, you define the attributes and the search pattern or queries. After the attri-
butes are selected, the system generates a default query with all the selected 

Creating and Extending Fact Sheet Apps
10
412
response attributes. In this step, you need to add the “Risk category” as an attri-
bute and define the query. Under the Request Attributes tab, click Add, and 
then select Attributes/Group from Node (see Figure 10.40).
Figure 10.40  Adding Attributes
9. Select CTLPC from the Details Attribute of Node, and then click Select. Click 
Next (see Figure 10.41).
Figure 10.41  Selecting the New Field

Extending Fact Sheet Apps
10.3
413
10. Finally, you define the optional settings for the search object model. In this 
step, you’ll add the CTLPC as a response attribute and define the properties. 
Under the Request Attributes tab, click Add, and then select Attributes/
Groups from Node (see Figure 10.42).
Figure 10.42  Adding an Attribute
11. Select CTLPC from the Details Attributes of Node, and then click Select (see 
Figure 10.43).
Figure 10.43  Selecting the New Field

Creating and Extending Fact Sheet Apps
10
414
12. Select the CTLPC attribute, and define the response attributes. Select the 
Details and Fact Sheet checkboxes (see Figure 10.44).
Figure 10.44  Selecting the UI Area Assignment
13. Click Save, and then click Finish.
You’ve successfully enhanced the search model by adding a new field and setting 
its properties.
Create the Search Connector
Next, you’ll create the search connector on the new search model.
 
Important!
You need to follow the same steps to create a new fact sheet app.
Follow these steps:
1. From the list of available models, navigate and select the search object SALES_
ORDER_H.
2. Select Actions, and then click Create Connector (see Figure 10.45).
3. The system creates a job in the background to create search object connectors. 
You can monitor the job in Transaction SE38, and the job name is ESH_
<Client>_C_<Unique Code>.

Extending Fact Sheet Apps
10.3
415
Figure 10.45  Creating a New Connector
Schedule Indexing
Now that you’ve enhanced the model and created the search connector success-
fully, you have to schedule indexing for the sales order search model, which is 
done in the Connector Administration Cockpit. The status of the newly created 
connector will be set to Prepared, so you need to schedule this connector to 
change the status to Active.
 Important!
You need to follow the same steps to create a new fact sheet app.
Follow these steps:
1. Run Transaction ESH_COCKPIT.
2. Select Sales Order.
3. Click Actions, and select Schedule Indexing (see Figure 10.46).
4. To make the business objects fully searchable, you need to index SAPScript
longtexts, and select Start Immediately checkboxes for both ESH_SAP-
SCRIPT_TEXT and USER_AUTHORITY (see Figure 10.47).
5. Click OK.

Creating and Extending Fact Sheet Apps
10
416
Figure 10.46  Schedule Indexing
Figure 10.47  Starting Indexing
6. The system creates a job in the background to index search models. You can 
monitor the job in Transaction SE38. The job name is ESH_<Client>IX_<System 
ID + Client>_<Unique Code>.
7. After the index is started, the status of the connectors will change to Indexing; 
after the job is completed, the status will change to Active (see Figure 10.48).

Extending Fact Sheet Apps
10.3
417
Figure 10.48  Connector Status
Test Embedded Search
After the status is changed to Active, you can test the embedded search via the 
Web Dynpro UI. You need to follow the same steps to create a new SAP Fiori fact 
sheet app:
1. Launch embedded search by running Transaction ESH_SEARCH from the ABAP 
system.
2. Enter “Sales Orders” in the Search For field, and then click Search (see Figure 
10.49).
3. Click Details to view the details of a sales order.
Figure 10.49  Embedded Search

Creating and Extending Fact Sheet Apps
10
418
You should now see the Risk category field in the details view, with the data 
populated (see Figure 10.50).
Figure 10.50  New Field
Test the OData Service
In this step, you need to check whether the OData service of the Sales Order fact 
sheet app is displaying the new field. You need to follow the same steps to create 
a new SAP Fiori fact sheet app:
1. Run Transaction /IWFND/MAINT_SERVICE.
2. Select ZCB_SALES_ORDER_SRV, and then click Gateway Client (see Figure 
10.51).
Figure 10.51  Activate and Maintain Services

Extending Fact Sheet Apps
10.3
419
3. In the Request URI field, enter “/sap/opu/odata/sap/CB_SALES_ORDER_SRV/
$metadata” (see Figure 10.52).
4. Click Execute.
5. Under the Sales Order Entity Type, you should now see the new property 
CTLPC.
Figure 10.52  Testing the OData Service
You’ve successfully completed the first part of the extension process by extending 
the sales order search model and adding the Risk category field. Next, we’ll 
explore the UI layer of the Sales Order fact sheet app.
10.3.2
Extend the UI Layer
The next step in the process is to extend the UI layer. You can extend the UI layer 
when the backend logic and content exists in the SAP Gateway layer, but isn’t 
exposed to the UI layer. In our example, we have the risk category added to the 
search model and to the OData service; however, it’s not added to the UI layer.
You have two options to extend a UI layer of a fact sheet app:
 Extending a fact sheet app with the SAP Web IDE
 Extending a fact sheet app manually
The next two sections walk through each option.

Creating and Extending Fact Sheet Apps
10
420
Extend the UI Layer with the SAP Web IDE
The Fact Sheet Editor plugin in the SAP Web IDE allows developers to create fact 
sheets from scratch and extend existing fact sheets (refer to Section 10.1). The 
beauty of the SAP Web IDE is that you can connect to the ABAP system and pre-
view the fact sheet. In this section, you’ll extend the fact sheet app with the SAP 
Web IDE by following detailed steps.
Retrieve the BSP Application and Annotation File
Before we take a deep dive into this process, let’s first get the details of the BSP 
application and the annotation file details of the Sales Order fact sheet app. 
Search for “Sales Orders” in the SAP Fiori apps reference library at https://fiori-
appslibrary.hana.ondemand.com/sap/fix/externalViewer/index.html, and navigate 
to the Extensibility section (see Figure 10.53).
Figure 10.53  Sales Order Fact Sheet Technical Names
Select a Template
The next step is to extend the UI layer of the app using an SAP standard fact sheet 
app template. Follow these steps:
1. Log in to the SAP Web IDE, and click New Project from Template (see Figure 
10.54).
Figure 10.54  Creating a New Project from Template

Extending Fact Sheet Apps
10.3
421
2. You’ll see three new templates to create or enhance a fact sheet app (see Figure 
10.55):
 Existing Fact Sheet Application: You use this template when you want to 
extend an existing fact sheet app. You can either deploy the app as a new 
application or overwrite the existing application.
 Modification Free Fact Sheet Application: You use this template when 
you want to extend an existing fact sheet app in the modification free mode. 
After you change the .xsl file and upload it to the backend server, the fact 
sheet app will then contain both the changes from the annotation file and 
.xsl file which you created using this template.
 New Fact Sheet Application: You use this template if you want to create a 
fact sheet app from scratch.
Figure 10.55  Fact Sheet Application Templates
 Templates
You can either use the Existing Fact Sheet Application or New Fact Sheet Application
templates to create a fact sheet app.
In our example, we’ll be using the existing Sales Order fact sheet app and enhanc-
ing it with the new field.
When extending a fact sheet app, you can use either the Existing Fact Sheet
Application option or the Modification Free Fact Sheet Application option. 
Let’s begin by using the Existing Fact Sheet Template:
1. Select Existing Fact Sheet Application, and then click Next (see Figure 10.56).

Creating and Extending Fact Sheet Apps
10
422
Figure 10.56  Existing Fact Sheet Application
2. Enter a Project Name, and click Next (see Figure 10.57).
Figure 10.57  Project Details
3. Select your ABAP system (refer to Chapter 8 to add a connection) from the 
dropdown list, and then search for the “Sales Orders Fact Sheet” by entering it 
in the Search field box.
 
Note
If you don’t see the list of fact sheet apps, you may not have added the property Web-
IDEUsage bsp_execute_abap in the connection. Refer to Chapter 8 on how to add 
properties in the connection.

Extending Fact Sheet Apps
10.3
423
4. Select the Sales Order Fact Sheet, and click Next (see Figure 10.58).
Figure 10.58  Selecting Existing Fact Sheet Application
5. Click Finish to confirm.
Having looked at how to use existing fact sheet app templates, we’ll now look at 
the second template: Modification Free Fact Sheet Application.
You use this template when you want to extend an existing fact sheet app without 
modifying it; that is, you don’t want to change the XML code in the original file, 
but still you want to add new fields in the fact sheet app. Most of the steps are 
similar to what we’ve already discussed in this chapter; you’ll just notice new files 
created when compared with app creation using the first template.
In this example, you’ll use the same search model you enhanced by adding a new 
field (Risk category), and create a new modification-free fact sheet app. We’ll just 
add the screens that are specific to this template. If you get stuck while working 
on this extension, refer to the previous section, because the process is similar 
between all the templates, although the initial screens look different. Follow 
these steps:

Creating and Extending Fact Sheet Apps
10
424
1. Log in to the SAP Web IDE, and from the menu bar, click File  New  Project
from Template (see Figure 10.59).
Figure 10.59  Creating a New Project from Template
2. Select Modification Free Fact Sheet Application, and then click Next (see 
Figure 10.60).
Figure 10.60  Modification Free Fact Sheet Application
3. Enter a name in the Project Name field, and click Next.
4. Select your ABAP system from the dropdown list, and then search for the Sales 
Order fact sheet app by entering it in the Search field box.

Extending Fact Sheet Apps
10.3
425
5.
Select the Sales Order Fact Sheet, and click Next.
6.
Click Finish to confirm.
7.
You should now see the annotation file under the new project folder (see Fig-
ure 10.61).
Figure 10.61  Editing the Annotation File
8.
Double-click the BSCBN_SALES_ORDER_SRV_ANNO.anno file to open it in 
the Fact Sheet Editor.
9.
Drag and drop the CTLPC field to the Facet Section/General Information
section.
10. Save the project by clicking the Save button. The SAP Web IDE automatically 
generates the files that are required for the extension process (see Figure 
10.62).
Figure 10.62  New Files and Folders

Creating and Extending Fact Sheet Apps
10
426
Table 10.1 shows the list of files or folders that are generated when you use the 
Modification Free Fact Sheet Application template in the SAP Web IDE.
11. Test the extended fact sheet by right-clicking on the .anno file and navigating 
to Run  Run Fact Sheet.
12. Upload the .xsl file to the backend server to deploy the changes to the ABAP 
system.
The next time the user runs the Sales Order fact sheet app, it will contain both the 
changes from the annotation file and the .xsl file changes you created using this 
template in the SAP Web IDE.
Extension Project Properties
You’ve successfully created a project in the SAP Web IDE using an existing tem-
plate of the Sales Order fact sheet app. Before we show you how to enhance the 
File/Folder
Description
data
This folder contains the original annotation file.
Original.xsl
This file contains the XSLT template that is generated exactly the same like 
the original .anno file. This file is used to track the changes that a user 
makes to the annotation file.
Work.xsl
This file contains all the changes made by a user in the Design view. In our 
example, we added the Risk Category field, and that change will be cap-
tured here in this file.
.project.json
This service file contains the service URL details and the main entity sets.
.anno
This is the original fact sheet annotation file.
.otr
This service file contains the Online Text Repository (OTR) aliases with the 
labels and backend availability status.
.xml
This service file contains the ABAP code for the OTR.
.xsl
This file is used in the backend system to apply changes to the matching 
fact sheet.
Preview.xml
The result of the .xsl file and the original.anno file is saved in this pre-
view.xml file.
neo-app.json
This service file contains settings to preview the fact sheet in SAP Fiori 
Launchpad.
Table 10.1  Project Files 

Extending Fact Sheet Apps
10.3
427
UI layer, we’ll show you some basic properties and components of an extension 
project.
You should now see the annotation file under the new project folder (see Figure 
10.63).
Figure 10.63  Fact Sheet Annotation File
The new project folder contains the following files:
 project.json  
This file contains the OData service URL and the entity set details of the fact 
sheet.
 anno  
This is the annotation file that you’ll be working on to extend the fact sheet.
 neo-app.json  
This is the file that contains settings to preview the fact sheet app.
 Template Files/Folders
If you’re using a different template, that is, Modification Free Fact Sheet Application
or New Fact Sheet Application (refer to Figure 10.55), you’ll see a different set of files/
folders under the main project folder.
Double-click the BSCBN_SALES_ORDER_SRV_ANNO.anno file to open it in the 
Fact Sheet Editor. In the next screen, you can switch between Design editor and 
Source Code editor (see Figure 10.64). Depending on your programing skills, 
you can decide the type of editor you want to use; for example, a nondeveloper 
can use the design editor to edit the annotation file.

Creating and Extending Fact Sheet Apps
10
428
Figure 10.64  Annotation File Editors
The fact sheet app design editor contains three tabs on the right side of the screen. 
Let’s walk through each of these now:
 Available Fields  
This tab displays all the fields provided by the OData service, and you can drag 
and drop these fields into your fact sheet to enhance it (see Figure 10.65).
Figure 10.65  List of Available Fields
 Properties  
On clicking each of the fact sheet fields, facets, or key facts in the Design editor, 
you can view their properties on the right side. Figure 10.66 shows the prop-
erties of a fact sheet field.

Extending Fact Sheet Apps
10.3
429
Figure 10.66  Facet Properties
The following fields are found under the Properties tab:
 Label: This is the label of the field that is displayed in the fact sheet app.
 Field: This is the backend field provided by the OData service that you want 
to display.
 Priority: This is the importance level of the fields to display on different 
devices or different screen resolutions:
– High: These fields are shown on the General Information section of the 
fact sheet overview page on all devices.
– Medium: These fields are shown on the General Information section of 
the fact sheet only on larger devices.
– Low: These fields are shown only on the Details page.
 Navigation Target: This field defines the target object. When the user 
clicks on this field, it will navigate the user to the target location specified 
here.
In the Key Fact Section, select the Net Value key fact to display the following 
properties (see Figure 10.67):
 Label: This is the label of the field that is displayed in the fact sheet app.
 Field: This is the backend field provided by the OData service that you want 
to display.

Creating and Extending Fact Sheet Apps
10
430
 Type: This is the key fact type.
 Number of Fractional Digits: This is the number of decimals that you want 
to display for this key fact.
Figure 10.67  Key Fact Properties
In the Facet Section, select the General Information facets to display the fol-
lowing properties (see Figure 10.68):
 Title: This is the title of the facet.
 Navigation Path: This is the navigation path of the facet.
 Entity Type: This is the main entity type of the OData service.
Figure 10.68  General Information Properties
 Contents  
You can get the structure of the fact sheet from the Contents tab (see Figure 
10.69).

Extending Fact Sheet Apps
10.3
431
Figure 10.69  Contents Tab
In addition, you can design a fact sheet app directly by using the Source Code
editor tab (see Figure 10.70).
Figure 10.70  Source Code Editor
Getting back to the extension process, you can extend three sections in the 
Design view (see Figure 10.71):
 Header Section  
This section contains the Fact Sheet Name and Additional Name.

Creating and Extending Fact Sheet Apps
10
432
 Key Facts Section  
This section contains the Key Facts about central objects used in your business 
operations.
 Facet Section 
This section shows the general information and other facets:
 General Information: These pages are the detail pages with the facet infor-
mation, and you can view these pages from the Contents tab.
Figure 10.71  Annotation Sections
Figure 10.72  Sections in the Fact Sheet
Header
Key Facts
Facets

Extending Fact Sheet Apps
10.3
433
Figure 10.72 shows the same sections in the actual Sales Order fact sheet app.
Add the Risk Category
By now, you should be familiar with the Fact Sheet Editor options. Next, you’ll 
add the Risk category field to the Facet Section and then preview it. Follow 
these steps:
1. Drag and drop the CTLPC field to the Facet Section/General Information
section (see Figure 10.73).
Figure 10.73  Adding the New Field
2. Save the project by clicking the Save button.
3. Run the fact sheet app by right-clicking on the .anno file and navigating to Run  
Run Fact Sheet (see Figure 10.74). Alternatively, you can use the menu bar and 
choose Run  Run Fact Sheet.
You should now see the new fields in the General Information section (see Fig-
ure 10.75).

Creating and Extending Fact Sheet Apps
10
434
Figure 10.74  Running the Fact Sheet App
Figure 10.75  Risk Category Field
You’ve now enhanced the data model and the UI layer. In the next section, we’ll 
look at the other option for manually extending the UI layer.
Extend the UI Layer Manually
In the previous section, we covered steps on how to extend the UI layer using the 
SAP Web IDE. Now we’ll discuss the manual extension process. You can extend 

Extending Fact Sheet Apps
10.3
435
the UI layer manually when you want to add more complex elements (e.g., 
Google Maps) to your fact sheet that can’t be achieved using the SAP Web IDE
You have two options to extend the fact sheet manually:
 Directly editing the SAP-delivered annotation files. You need to follow the 
same steps as you did in Section 10.3.3. However, in the previous section, we 
copied the XML code that is generated in the SAP Web IDE, and in this sce-
nario, we’ll add our own code.
 Create XSL Transformation (XSLT) documents to work in conjunction with the 
original SAP-delivered annotation files. The original annotation file remains 
unchanged, and you can include all the fact sheet changes to the XSLT docu-
ment, and then upload it to the backend. When the user runs the fact sheet, the 
XSLT document generates a new temporary annotation file, and the rendered 
fact sheet is based on the transformed annotation file.
Finally, in the next section, we’ll deploy the extended fact sheet app to the ABAP 
backend server.
10.3.3
Deploy the Fact Sheet App
To deploy or make changes to the original annotation file in the ABAP system, fol-
low these steps:
1. From the SAP Web IDE, double-click _ANNO.XML in the project folder, and 
then copy the entire XML code (see Figure 10.76).
Figure 10.76  Copying the XML Code

Creating and Extending Fact Sheet Apps
10
436
2. Run Transaction SE80 from your ABAP system.
3. Enter the BSP application name “BSCBN_ANF_SDSLS”, and then press (Enter).
4. Right-click on the Sales Order fact sheet annotation file, and click Change (see 
Figure 10.77).
Figure 10.77  Editing Annotation File
5. Paste the code that you copied in step 1, click Save 
, and then click the Acti-
vate icon 
.
You’ve successfully extended the app by adding a new field and deploying the 
Sales Order fact sheet app.
10.4
Summary
In this chapter, we provided the step-by-step instructions on how to create and 
enhance an SAP Fiori fact sheet app using the SAP Web IDE. We discussed every-
thing from how to enhance the search model to deploying the app to the ABAP 
systems. In addition, we showed you how to enhance an app using two different 
templates. We then gave you an overview on how to extend a fact sheet manu-
ally. In the next chapter, we’ll explore the creation and extension process of ana-
lytical apps.

437
Chapter 11 
This chapter explains how to create and extend an analytical app and 
illustrates the process by walking through a complete example app.
11
Creating and Extending Analytical Apps
In Chapter 1, we introduced you to the SAP Fiori system landscape with SAP 
HANA XS. You then learned how to implement a standard SAP Fiori analytical 
app with and without the SAP Smart Business Modeler in Chapter 6. In this chap-
ter, we’ll focus on creating and extending an analytical app with an example 
based on SAP HANA Live views. All the SAP Fiori analytical apps are based on 
SAP HANA Live views, so we’ll begin with an overview of SAP HANA Live before 
digging into the creation and extension process.
11.1
Introduction to SAP HANA Live
By now, you know that analytical apps only run on an SAP HANA database, and 
that these apps are developed on query views from SAP HANA Live. Therefore, 
it’s important to understand some basic concepts about SAP HANA Live before 
we look at creating or extending analytical apps. Because SAP HANA Live is a big 
topic, we’ll keep the introduction brief. However, a basic understanding of SAP 
HANA Live is needed to get started with the app development. Figure 11.1 shows 
the logical architecture of the SAP Fiori landscape with SAP HANA Live (VDM).
So, what is SAP HANA Live? SAP HANA Live is a complete set of predefined vir-
tual data models (VDMs) that expose the SAP Business Suite application data. SAP 
delivers the SAP HANA Live packages for a large number of SAP Business Suite 
application areas; for example, in Figure 11.1, you see SAP HANA Live for SAP 
ERP, SAP CRM, and so on. Customers can just download and install the packages 
they need.
In this section, we will look at the important aspects of SAP HANA Live, including 
SAP HANA Live views, the SAP HANA Live Browser, and the process of exposing 
these views to SAP Fiori analytical apps.

Creating and Extending Analytical Apps
11
438
Figure 11.1  Logical Architecture of SAP HANA Live Content
11.1.1
SAP HANA Live Views
The VDM is a structured representation of SAP HANA database views that follows 
consistent modeling rules. The data from the SAP Business Suite is consumed into 
the analytical apps using these views. A VDM contains four types of SAP HANA 
Live views:
 Values help views 
As the name implies, these views are used to populate value help, the drop-
down lists in the applications that provide a full list of possible values for enti-
ties, for example customers, materials, and so on.
ABAP Frontend Server
UI Add-On
(SAPUI5, SAP Fiori Launchpad)
SAP Gateway
ABAP Backend Server
SAP Business Suite
SAP HANA
SAP Business Suite
(Product-specific UI components)
ERP
CRM
SRM
SCM
ERP
CRM
SRM
SCM
Reverse Proxy (SAP Web Dispatcher)
Client
HTTPS (HTML/OData)
Trusted RFC
ERP
CRM
SRM
Others
ERP
CRM
SRM
Others
SAP Smart Business
SAP Fiori app content
SAP HANA Live (VDM)
SAP HANA XS Engine
HTTP (OData)

Introduction to SAP HANA Live
11.1
439
 Private views  
These views summarize certain SQL transformations on one or several database 
tables. A private view can be based on database tables, other private views, or 
reuse views. These are the SAP standard views that directly use SAP tables. No 
one can modify these views.
 Reuse views  
These views expose the business data from the SAP Business Suite systems in a 
well-structured format. These views are designed to be reused in other views, 
and they consist of one more private views.
 Query views  
As previously mentioned, all analytical apps are developed on query views. 
These are the top level of views, designed to expose business data from the SAP 
Business Suite system and for direct consumption by the analytical apps.
Now that you know the different views available in SAP HANA Live, let’s look at 
how to browse and navigate those views.
11.1.2
SAP HANA Live Browser
SAP HANA Live Browser is a web application built using SAPUI5. With this tool, 
users can easily browse and navigate between the SAP HANA Live content views. 
You can access SAP HANA Live Browser from the link http://<SAP HANA Server
Host>:80<SAP HANA Instance>/sap/hba/explorer/.
Figure 11.2 shows the landing page of the SAP HANA Live Browser. On this 
screen, the content is organized by application components, and users can navi-
gate between ALL VIEWS, MY FAVORITES, SEARCH, and INVALID VIEWS tabs.
On selecting a view on the left-hand side of the screen, you can see the details of 
the selected view on the right side. The icons at the right side are listed from left 
to right in the following list:
 Open Definition  
Use this icon to view the metadata of the SAP HANA Live views.
 Open Content  
Use this icon to view the data of the SAP HANA Live views.
 Open Cross Reference  
Use this icon to view the tables and views cross references.

Creating and Extending Analytical Apps
11
440
 Add Tags  
Use this icon to add personalized tags, select a view, and then click the Add
Tags button.
 Generate SLT  
Use this icon to generate the SAP Landscape Transformation (SLT) file.
 SAP Lumira  
Use this icon to open the SAP HANA Live view in SAP Lumira and build story-
boards using the data from SAP HANA Live.
 SAP BusinessObjects Analysis  
Use this icon to open the SAP HANA Live view in SAP BusinessObjects Analysis 
to perform further detailed analysis on your data.
Figure 11.2  SAP HANA Live Browser
With an overview of both SAP HANA Live views and its browser, in the next sec-
tion we’ll discuss how these views work in relation to SAP Fiori analytical apps.
11.1.3
Exposing SAP HANA Live Views to Analytical Apps
Views in SAP HANA Live can be exposed as an OData service. These services can 
integrate SAP HANA Live views with SAP Fiori analytical apps. By now, you’re 
familiar with OData services and its concepts. An OData service for SAP HANA XS

Introduction to SAP HANA Live
11.1
441
is defined in a text file with the suffix .xsodata. The data is transferred to analyti-
cal apps over HTTP using either the Atom (XML) or the JavaScript Object Nota-
tion (JSON) format.
A couple of advantages of using SAP HANA Live with analytical apps include the 
following:
 Developers can build analytical apps directly on SAP HANA Live views without 
the need for additional software.
 All analytical apps run on the primary database, so there’s no need for users to 
wait for the data loading jobs to complete. The cycle time from recording to dis-
playing in analytical apps is dramatically reduced.
In addition, when working with SAP HANA Live views in correlation with SAP 
Fiori analytical apps, it’s important to keep the following points in mind:
 Private views should not be copied or modified.
 Use query views or reuse views for extensions by copying them. If you change 
the original views, then the changes will be lost next time when a new VDM is 
installed.
 The Enforce SQL Execution flag must be set to True for all graphical calcula-
tion views.
 Using attribute and analytic views must be avoided.
Now that you have a basic understand of SAP HANA Live and its views, let’s walk 
through how to create or extend an analytical app using a view from SAP HANA 
Live. The creation and extension process is very similar, so we’ll first cover the 
creation processes in detail, and then we’ll talk about the extension process from 
a high level.
 Prerequisites
A number of prerequisites must be met before you start creating or extending analytical 
apps:
 The correct version of SAP HANA must be installed on the SAP HANA server per the 
requirements for SAP HANA Live. Refer to the SAP Fiori apps reference library to find 
the exact versions.
 The standard SAP tables that are used by SAP HANA Live must exist and be popu-
lated with data by an appropriate data replication mechanism.

Creating and Extending Analytical Apps
11
442
 The SAP HANA Client and SAP HANA Studio software must be installed on the client 
systems.
 A beginner’s knowledge of SAP HANA data modeling is required.
 You must be familiar with or have access to the SAP HANA Live release notes.
 You need to have access to KPI modeler apps (see Chapter 6).
We highly recommend going through Chapter 6 before you work on the examples in 
this chapter.
11.2
Creating Analytical Apps
In this section, we’ll show you how to create an analytical app using an example 
based on a sales order calculation view. The first step in this process is to create 
the SAP HANA Live view.
11.2.1
Create the SAP HANA Live View
To create the SAP HANA Live view, you can either create from scratch or create 
by copying an existing view.
In this example, you’ll create a new view by copying an existing calculation view. 
Follow these steps:
1. Log in to your SAP HANA system from SAP HANA Studio.
2. Select the Developers perspective.
3. Create a new package by right-clicking on either the Content folder or on the 
existing package and selecting New  Package (see Figure 11.3).
 
Creating a Package
It isn’t necessary to create a new package at the same location where you created an old 
package (see Figure 11.3). The new package can be located anywhere in the Content
folder. However, it’s important to keep in mind that the package you’re creating should 
be included in the SAP Web Dispatcher. For example, in our demo system, sap.hba is 
included in the SAP Web Dispatcher (refer to Chapter 3, Section 3.1.2).

Creating Analytical Apps
11.2
443
Figure 11.3  Create New Package
4. On the next screen, enter the package name, and then click OK (see Figure 11.4).
Figure 11.4  New Package Definition

Creating and Extending Analytical Apps
11
444
5. Right-click on the new package, and select New  Calculation View (see Figure 
11.5).
Figure 11.5  Create New Calculation View
6. Enter a name for the view in the Name field, and then select the Copy from
checkbox. Click Browse (see Figure 11.6).
Figure 11.6  Copy Calculation View
7. Search the word “salesorder”, and then select the SalesOrderQuery from the 
results. Click OK (see Figure 11.7).

Creating Analytical Apps
11.2
445
Figure 11.7  Selecting the Standard View
8. Click Finish (see Figure 11.8).
Figure 11.8  New Calculation View Parameters

Creating and Extending Analytical Apps
11
446
9.
Right-click on the new calculation view, and then click Activate (see Figure 
11.9).
Figure 11.9  Activating the New Calculation View
10. After the calculation view is activated, preview the data by right-clicking on 
the calculation view and selecting Data Preview (see Figure 11.10).
Figure 11.10  Previewing the Data
11. Enter parameters (i.e., the client), and then click OK (see Figure 11.11).

Creating Analytical Apps
11.2
447
Figure 11.11  Enter Parameters
12. You should now see the data under the Raw Data tab (see Figure 11.12).
Figure 11.12  Raw Data

Creating and Extending Analytical Apps
11
448
We’ve successfully copied an existing calculation view and created a new one. In 
the next section, we’ll expose the calculation view by creating an OData service.
11.2.2
Create the OData Service
In the previous section, we created a calculation view, and now in this section, 
we’ll show you how to create an OData service and expose the calculation view as 
an OData service. Follow these steps:
1. Log in to the SAP HANA system from SAP HANA Studio, and then select the 
Project Explorer tab.
2. Before you can start the OData service development, you must create a project, 
which you use to group all your application-related artifacts. Next, you’ll create 
an XS project. Right-click in the blank area, and select New  Project (see Figure 
11.13).
Figure 11.13  Creating a New Project
3. From the wizard, select SAP HANA  Application Development  XS Project,
and then click Next (see Figure 11.14).
4. Enter a Project name, and then click Next (see Figure 11.15).

Creating Analytical Apps
11.2
449
Figure 11.14  XS Project
Figure 11.15  XS Project Name

Creating and Extending Analytical Apps
11
450
5. In this step, we’ll be adding a workspace. You can skip this step and proceed to 
the next step if you’ve already created a workspace. If not, click Add Work-
space (see Figure 11.16).
Figure 11.16  Adding a Workspace
6. Select your SAP HANA system, and then click Finish (see Figure 11.17).
Figure 11.17  Creating a New Workspace

Creating Analytical Apps
11.2
451
7. Select the workspace, and then click Browse (see Figure 11.18).
Figure 11.18  Share Project Dialog Box
8. Select the repository package that you created in the first step, and click OK (see 
Figure 11.19).
Figure 11.19  Selecting a Package

Creating and Extending Analytical Apps
11
452
9.
Uncheck the Add Project Folder as Subpackage checkbox, and click Next
(see Figure 11.20).
Figure 11.20  Unchecking Add Project Folder as Subpackage
10. Leave everything blank on this screen, and click Finish (see Figure 11.21).
Figure 11.21  Object Section

Creating Analytical Apps
11.2
453
A new project is created with the calculation view. Make sure the application 
access file (.xsaccess) and the application descriptor files (.xsapp) are automati-
cally created. Next we’ll create the OData service file.
Follow these steps:
1. Right-click on the new project, and select New  XSODATA File (see Figure 
11.22).
Figure 11.22  New XS OData File
2. Enter the OData service File Name, and click Finish (see Figure 11.23).
Figure 11.23  XS OData Service Parameters

Creating and Extending Analytical Apps
11
454
3. Enter the code in Listing 11.1 for the new file you created.
service  
{ 
  "sap.hba.nb/NBSALESORDERS.calculationview" as "NBSalesOrderQuery" 
  keys generate local "GenID" 
  aggregates always 
  parameters via entity "NBSalesOrderP"  
  ;    
         }  
      
    annotations { 
    enable OData4SAP; 
    }
Listing 11.1  OData Service
sap.hba.nb in the listing is the location of the calculation view, and NBSALESOR-
DER is the view you created. Your screen should look similar to Figure 11.24 
after you enter the code.
Figure 11.24  OData Service File
4. Click Save. Then, right-click on the project and select Team  Commit (see Fig-
ure 11.25).
5. Activate the project by right-clicking the project and selecting Team  Activate
(see Figure 11.26).

Creating Analytical Apps
11.2
455
Figure 11.25  Committing the Changes
Figure 11.26  Activating the Project

Creating and Extending Analytical Apps
11
456
Next, let’s test the OData service just created. Follow these steps:
1. Right-click on the .xsodata service file, and select Run As  XS Service (see Fig-
ure 11.27).
Figure 11.27  Running the Service
2. After you log in, you should see something similar to Figure 11.28.
Figure 11.28  OData Service

Creating Analytical Apps
11.2
457
3. Now append the URL with $metadata, and press (Enter).
4. You should now see the metadata of the OData service you created (see Figure 
11.29).
Figure 11.29  Metadata File
You’ve successfully created an OData service on the new calculation view. In the 
next section, we’ll work on configuring the KPI.
11.2.3
Configure the KPI
In this section, we’ll show you how to create a key performance indicator (KPI) on 
the new calculation view and how to create a generic drilldown at a high level. In 
Chapter 6, Section 6.3, we covered the KPI creation process with step-by-step 
instructions. Refer to that chapter to complete the steps.
Follow these steps:
1. Log in to SAP Fiori Launchpad.
2. Click the Create KPI app under the KPI Modeler group.
3. In the next screen, you need to fill in the mandatory fields (ID and Title) about 
the KPI (see Figure 11.30).

Creating and Extending Analytical Apps
11
458
Figure 11.30  Create KPI
4. Scroll down to the next section, and select the values by clicking 
. Enter the 
information shown in Figure 11.31.
Figure 11.31  Data Source Parameters

Creating Analytical Apps
11.2
459
 Value Measure
If the Value Measure field list isn’t populated, the package where your OData service is 
saved won’t be included in the SAP Web Dispatcher. Therefore, be sure to include the 
package you created in Section 11.2.1 in the SAP Web Dispatcher.
5. After the fields have been entered, click Activate and Add Evaluation. Enter 
the details shown in Figure 11.32 on the Add Evaluation screen.
Figure 11.32  Adding the Evaluation
6. Scroll down to the Input Parameters and Filters section to input parameters 
that are expected in the calculation view.
7. Enter the values shown in Figure 11.33 in the Input Parameters section.

Creating and Extending Analytical Apps
11
460
Figure 11.33  Input Parameters
8.
Add the Target, Threshold, and Trend values (see Figure 11.34):
 Target: “50000000”
 Warning: “50000000”
 Critical: “5000000”
9.
Click Activate and Configure Tile.
Figure 11.34  Threshold Values
10. Select your evaluation, and click Add Tile (see Figure 11.35).
11. Enter the Tile Configuration  details, and click Save and Configure Drill 
Down (see Figure 11.36).

Creating Analytical Apps
11.2
461
Figure 11.35  Adding the Tile
Figure 11.36  Saving the Tile
12. Now go back to the home screen by clicking 
.
13. From SAP Fiori Launchpad, click the Configure KPI Drill-Down link.
14. Select the evaluation, and click Configure (see Figure 11.37).

Creating and Extending Analytical Apps
11
462
Figure 11.37  Configuring the Drilldown
15. Select the Customer from the dimensions list, and click OK.
16. Enter View ID and View Title, and then click Save View (see Figure 11.38).
Figure 11.38  Creating the View
17. Click Save Configuration.

Extending Analytical Apps
11.3
463
You should now see the app in the catalog and be able to add the app from the 
catalog to your home group in SAP Fiori Launchpad (see Figure 11.39).
Figure 11.39  Adding the KPI Tile
You now understand the end-to-end process of creating an analytical app. In the 
next section, we’ll look at the extension process of an analytical app.
11.3
Extending Analytical Apps
You can extend an analytical app when the standard SAP Fiori analytical apps 
don’t meet your requirements. In this section, we’ll look at how to extend an app 
using an example based on the sales order query calculation view.
As previously mentioned, the SAP Fiori system landscape for analytical apps is 
comprised of two main layers: the SAP HANA layer and the UI layer. Depending 
on the individual analytical app extension requirements, you can extend one or 
multiple layers. Note the following when extending either of these layers:
 SAP HANA layer  
This layer is extended when the backend content required for the analytical app 
extension is available in the SAP HANA models, but isn’t exposed to the OData 
service.
 UI layer  
This layer is extended when the backend content is exposed to the OData ser-
vice later, but isn’t exposed in the analytical app.
In the previous section, you learned that analytical apps are developed on 
predelivered SAP HANA objects such as views, and these views reside in SAP 

Creating and Extending Analytical Apps
11
464
Business Suite on the SAP HANA server. These SAP HANA Live views can be 
extended by adding a field from a standard SAP table or a custom field.
For this example, you’ll expose an additional backend field from the SAP HANA 
database in the sales order query calculation view. To do this, you need to modify 
all the layers. The following sections walk through the steps to do so.
11.3.1
Extend the SAP HANA Live View
To extend SAP HANA Live views, you need to install the extensibility tool in SAP 
HANA Studio. The SAP HANA Live extensibility tool is an Eclipse plugin for SAP 
HANA Studio that can enhance standard SAP HANA views. With this tool, users 
can expose fields from a standard model, remove unnecessary fields from a view, 
or include custom tables and fields.
Follow these steps in SAP HANA Studio to install the SAP HANA Live extensibility 
tool:
1. Open SAP HANA Studio.
2. Go to Help  Install New Software from the menu bar (see Figure 11.40).
Figure 11.40  Installing New Software
3. Enter the following URL to access the tools, and then click Add:
http://<HANAServer>:80<HANAInstance>/sap/hba/tools/extn
4. Select SAP HANA Live Extensibility, and then click Next (see Figure 11.41).

Extending Analytical Apps
11.3
465
Figure 11.41  SAP HANA Live Extensibility
5. Click Next.
6. Select the radio button to accept the terms of the license agreement, and then 
click Finish (see Figure 11.42).
Figure 11.42  Accept License Agreement

Creating and Extending Analytical Apps
11
466
7. Click OK in the security warning popup window (see Figure 11.43).
Figure 11.43  Security Warning Message
8. Click Yes to restart SAP HANA Studio for the changes to take effect (see Figure 
11.44).
Figure 11.44  Restarting SAP HANA Studio
You’ve successfully installed the extensibility tool. After SAP HANA Studio is 
restarted, you need to grant access to the users to use the extensibility tool. Fol-
low these steps:
1. Log in to the SAP HANA system from SAP HANA Studio.
2. Navigate to the Security folder. From the Users folder, double-click on the user 
name who needs access to the extensibility tool.
3. Add the following role in the Granted Roles tab:
sap.hba.tools.extn.roles::ExtensibilityDeveloper (see Figure 11.45).

Extending Analytical Apps
11.3
467
Figure 11.45  Assigning Roles
4. Add REPO.READ, REPO.EDIT NATIVE OBJECTS, and REPO.ACTIVATE NA-
TIVE OBJECTS permissions on the package in which the new extended view 
will be created.
5. Click 
.
With the preconfiguration of the extensibility tool out of the way, we’ll now 
show you how to extend a standard sales order query view by adding new fields. 
As previously mentioned, SAP recommends that you don’t reuse the standard 
query views; instead, use a copy in your own namespace and make the necessary 
modifications. A new view is automatically created in SAP HANA Studio when 
you extend a standard SAP HANA Live view, and the original view isn’t effected 
when you make any changes in the extended view.
Follow these steps to extend the view:
1. Log in to the SAP HANA system from SAP HANA Studio.
2. Under the Content folder, navigate to sap  hba  ecc  Calculation Views (see 
Figure 11.46).

Creating and Extending Analytical Apps
11
468
Figure 11.46  Navigating to the Views Folder
3. Right-click on SalesOrderQuery, and then select Extend View (see Figure 
11.47).
Figure 11.47  Extend View

Extending Analytical Apps
11.3
469
 Extend View
If you don’t see the Extend View option that means you’ve skipped the prerequisite to 
install the extensibility plug-in at the beginning of this section. Go back and review 
those steps before proceeding.
4. Enter the new view name in the Name of copied view field, and then select the 
package where you want to save this new view (see Figure 11.48).
5. The extensibility tool displays all of the SAP-delivered reuse views. On clicking 
a view, it will display the unused fields.
Figure 11.48  Selecting Replace View
 Query View Extension
The following are important points to remember while you’re working on query view 
extension:
 You can’t extend query views with unions.
 You can’t extend query views that have aggregation in the middle level other than 
the top node below the semantics layer.
 For some query views, the underlying reuse views can be replaced if there is a corre-
sponding reuse view.
6. Select SalesOrderHeader, and then choose SalesDistrict to include it in the 
output (see Figure 11.49).

Creating and Extending Analytical Apps
11
470
7. Click Validate, and after the validation is successful without any errors, click 
Activate.
Figure 11.49  Selecting New Fields
8. After the activation is complete, the new extension view is created in the pack-
age you selected previously (Figure 11.50).
Figure 11.50  Activating the New View
9. Activate the new calculation view, and then check whether the data is being 
populated.

Summary
11.4
471
We’ve successfully extended a calculation view by adding a new field and saving 
it to a new package. Next, you need to activate and create an OData service on the 
extended view.
11.3.2
Create the OData Service
You now need to create an XS project (see Figure 11.51) and then create an OData 
file on the extended calculation view. The OData process creation is exactly the 
same as described in Section 11.2.2. Repeat the same steps to create an OData ser-
vice.
Figure 11.51  XS Project
11.3.3
Configure the KPI
The final step in the extension process is to configure and create a KPI tile. The 
steps to configure a KPI tile are exactly the same for both the creation and exten-
sion scenarios. Follow the same steps to create a new KPI tile based on the new 
OData service, as described in Section 11.2.3.
11.4
Summary
In this chapter, we walked through the processes involved in creating and extend-
ing an analytical app. We introduced SAP HANA Live and discussed its place in 
the SAP Fiori landscape. We then looked at the different views provided by SAP 
HANA Live, and the benefits of exposing these views to analytical apps. From 
there, we followed the necessary steps to either create or extend an analytic app.
In the next chapter, we’ll look at the modifying the workflow of SAP Fiori apps.


473
Chapter 12 
The most common modifications to SAP Fiori apps involve workflow. 
Accordingly, this chapter provides an overview of SAP Business Workflow, 
explains how and when to create a custom workflow, and shows a step-by-
step example based on the My Inbox app.
12
Workflow and SAP Fiori
A workflow is an orchestrated and repeatable pattern of a business activity. It can 
represent a sequence of operations, be declared as the work of a person or group, 
demonstrate staff structure, or be one or more simple or complex mechanisms.
This chapter starts with an introduction to workflow and the basic terminology 
used in the workflow process in Section 12.1. We’ll introduce you to the My 
Inbox app architecture in Section 12.2, and we’ll discuss how the My Inbox appli-
cation simplifies the processing of workflow tasks for end users.
In Section 12.2.1, we’ll discuss the prerequisites that needs to be fulfilled before 
you start implementing workflows and the My Inbox app. We’ll walk you 
through how to implement the All Items Inbox tile in Section 12.2.2. We’ll end 
the chapter with step-by-step instructions on how to define a workflow scenario 
and implement a scenario-specific inbox.
12.1
Workflow Basics
A workflow, as the name suggests, is a flow of work activities in a sequence 
resulting in an exchange of information. To better understand the workflow pro-
cess, we’ll look at a simple example of a leave application: An employee submits 
a leave application to the manager, and the manager checks the leave application. 
If everything looks good he will approve it; however, if something in the leave 
application isn’t correct, then the manager will reject it. If this process happened 
on a traditional paper basis, the process would take forever. In such scenarios, 
SAP Business Workflow, or SAP workflow, streamlines this process.

Workflow and SAP Fiori
12
474
SAP Business Workflow is a cross-application tool that automates business pro-
cesses such as leave approval procedures and makes the whole process quick and 
simple. SAP Business Workflow maps business processes in the SAP system and 
processes them under the workflow system. These workflows can be anything 
from a simple approval process to the more complex business processes. Typi-
cally, SAP Business Workflow helps in situations where work processes have to 
be run repeatedly or where a large number of agents in a specific sequence are 
involved.
When a document is created, updated, or deleted, SAP Business Workflow creates 
events. These events represent an action in the system, and these events are cap-
tured by SAP Business Workflow, which handles the work items based on the 
defined workflow templates.
Let’s look once again at the leave application example. When an employee sub-
mits a leave application, the manager receives a notification/request to approve 
or reject it. These requests are delivered to their inbox as a work item, and the 
person who executes a work item is called as an agent. If the manager requests 
more information, then the employee receives a work item to his inbox.
Currently, enterprises across industries use multiple workflow engines as part of 
their landscape to run their business process. In addition, they have to use differ-
ent types of inbox-like portals, or Universal Work Lists (UWLs), to track their day-
to-day activities. The biggest challenge for the end users is to use multiple sources 
for work items because they need to be trained to interact with different task 
management technologies. Inconsistent user experience across different devices 
will impact their daily activities. From an IT perspective, setting up and configur-
ing heterogeneous workflow engines and making all of the workflows accessible 
from mobile devices is the biggest challenge.
Customers want a unified inbox where all their business users can easily access 
and manage work items from one location, with consistent user experience across 
all devices. This will reduce the complexity and increase productivity of end 
users. The My Inbox app in SAP Fiori is the solution that satisfies all these work-
flow needs.
In the next section, we’ll look at creating standard and custom workflows using 
the My Inbox app in SAP Fiori.

Creating Standard and Custom Workflows with the My Inbox App
12.2
475
12.2
Creating Standard and Custom Workflows with 
the My Inbox App
The My Inbox app is a full-blown workflow inbox for SAP Fiori. This transac-
tional application can process workflows tasks based on the decision options 
defined in the backend server. The My Inbox app can process tasks from your 
SAP Business Workflow, SAP Business Process Management (BPM), and third-
party providers.
The following are some of the key features of the My Inbox app:
 Users can sort and filter the information that is displayed in the app.
 Users can select multiple requests and approve or reject them.
 Users can add attachments and post comments.
 Users can share their tasks via SAP Jam or email.
Figure 12.1 shows the high level system landscape of the My Inbox app. This app 
runs on SAP Gateway similar to other SAP Fiori transactional apps, however, 
there is a special service called the Task Gateway Service in the SAP Gateway 
server, which is the key component. This component harmonizes views from dif-
ferent task providers such as BPM, SAP Business Workflow, or third-party work-
flow engines. The task information is exposed from different task providers in a 
standard format called the task consumption model. This model can be extended 
with additional task providers via the task provider’s application programming 
interface (API).
SAP provides out-of-the-box integration with SAP Business Workflow and SAP 
BPM service providers. In the next version, SAP is planning to integrate SAP 
HANA task management. In addition, third-party workflow engines are sup-
ported as well.
In the sections that follow, we’ll look at the prerequisites for using the My Inbox 
app, how to create standard workflows with the All Items tile provided by SAP, 
and how to create custom workflows for a scenario-specific inbox.

Workflow and SAP Fiori
12
476
Figure 12.1  My Inbox Architecture
12.2.1
Prerequisites
Before you start implementing the My Inbox app, a number of prerequisites need 
to be fulfilled:
 If your frontend server is on SAP NetWeaver 7.4, then you need the following 
components (see Figure 12.2):
 Component for app: UIX01CA1 100 SP 05
 SAP Gateway component: IW_PGW 100 SP 07
 If your frontend server is lower that SAP NetWeaver 7.4, then you need the fol-
lowing components in addition to the UIX01CA1 and IW_PGW:
 SAP Gateway 2.0 SPS 10
 UI add-on 1.0 for SAP NetWeaver 7.03 SPS 10 or higher (UI5 1.26.0)
 On the backend server, you need to be on SAP EHP 1 for SAP NetWeaver 7.3 
SPS 15 (for BPM support).
 If your backend server is on an SAP NetWeaver version lower than 7.4, then 
you need to have the SAP IW BEP 200 SP 10 Gateway component installed on 
the backend server.
Task Consumption Model
SAP Business
Workflow Provider
SAP Business
Process 
Management
Provider
SAP HANA
Provider 
Third-party
Workflow Engines
Provider
SAP Business
Workflow 
SAP Business
Process
Management
Third-party
Workflow Engines
SAP HANA
OData
RFC
Web Service
OData
*
My Inbox
Task Providers
Task Gateway
Service
Providers

Creating Standard and Custom Workflows with the My Inbox App
12.2
477
Figure 12.2  Frontend Components
Install or update all of the components before you proceed with the My Inbox 
app implementation.
 My Inbox Release Information
Refer to SAP Note 2106212 for release information on the My Inbox app.
In addition to installing these components, you also need to define the system 
alias for the My Inbox app before proceeding. Follow these steps:
1. Run Transaction SPRO.
2. Navigate to Manage SAP Systems Alias, as shown in Figure 12.3.
3. Click on New Entries to create a new system alias, and then enter or select the 
following details (see Figure 12.4):
 SAP System Alias: Enter “LOCAL_PGW”.
 Description: Enter “LOCAL_PGW”.
 Local SAP GW: Uncheck this box.
 For Local App: Check this box.
 RFC Destination: Leave this blank.
 Software Version: Enter “/IWPGW/BWF”.

Workflow and SAP Fiori
12
478
Figure 12.3  Manage SAP System Alias
Figure 12.4  /IWPGE/BWF Component
 
Central Hub Deployment
If your landscape deployment is a hub deployment, you need to add the RFC Destina-
tion field as well.
The My Inbox app can process both standard and custom workflows based on the 
options defined in the backend server. The SAP-delivered All Items tile for the 
My Inbox app enables users to easily process all tasks (standard workflow). In 
addition, you can configure a scenario specific tile in the SAP Fiori Launchpad 
(custom workflow). In the remainder of this chapter, we’ll teach you how to con-
figure the All Items and scenario-specific My Inbox tiles.
12.2.2
All Items Inbox
In this section, we’ll look at steps for creating a standard workflow with the All 
Items tile. By now, you should be familiar with many of the screens and transac-
tions we’ll show.

Creating Standard and Custom Workflows with the My Inbox App
12.2
479
 Important!
Make sure that you have at least one workflow defined in the backend server that can 
be used in the My Inbox app.
Follow these steps:
1. Activate the ICF service of the SAPUI5 application CA_FIORI_INBOX via Trans-
action SICF (see Figure 12.5). Navigate to default_host  sap  bc  ui5_ui5  
sap, right-click on ca_fiori_inbox, and click Activate.
Figure 12.5  My Inbox SAPUI5 Component
2. Activate the OData service /IWPGW/TASKPROCESSING version 2 via Transac-
tion /IWFND/MAINT_SERVICE (see Figure 12.6).
Figure 12.6  TASKPROCESSING Service

Workflow and SAP Fiori
12
480
3. Assign the business role SAP_FND_BCR_MANAGER_T to the end user via 
Transaction PFCG (see Figure 12.7).
Figure 12.7  Assigning the User to a Role
4. Log in to the SAP Fiori Launchpad designer, and select the SAP_FND_TC_T
catalog (see Figure 12.8).
Figure 12.8  Configuring the Tile
5. Double-click on the My Inbox All Items tile, and then define the following 
parameter in the Navigation section: allItems=true&listSize=150 (see Figure 
12.9). The listSize property is set, by default, to 100 (i.e., the My Inbox app 
displays 100 items in the list by default).

Creating Standard and Custom Workflows with the My Inbox App
12.2
481
Figure 12.9  Adding Properties
6. In addition, you can define the following parameters:
 massAction: By default, this parameter is set to True. This property will let 
users process several tasks or mass actions of the same type at the same time.
 quickAction: By default, this parameter is set to True. This property will let 
users perform quick actions.
 sortBy: By default, this parameter is set to CreatedOn. This property will 
sort the list that is displayed in the app.
7. Log in to SAP Fiori Launchpad, and add the My Inbox app from the tile catalog 
Manager Approval (Cross) – Content, as shown in Figure 12.10.
Figure 12.10  Adding My Inbox to SAP Fiori Launchpad

Workflow and SAP Fiori
12
482
8. You should now see the My Inbox tile with the number of tasks that you have 
access to under the My Home group in SAP Fiori Launchpad (see Figure 12.11).
Figure 12.11  All Items Tile
 
Most Common Issues
These are some of the most common issues that you might come across while you’re 
configuring the My Inbox app:
 Issue 1  
If you notice “Error” or “???” in the My Inbox tile or if an error log says “Task Facade 
not implemented for provider,” you might not have configured the system alias cor-
rectly. Refer to Section 12.2.1 to verify your configuration.
 Issue 2  
Make sure you have at least one workflow created in the backend. You’ll notice 
errors in the tile when you don’t have one.
 Issue 3  
You see tasks in the backend, but your My Inbox tile shows “0” tasks. This may be 
because the task filter is activated in the backend system. Run Transaction SPRO, 
navigate to SAP NetWeaver  Gateway Service Enablement  Content  Workflow
Settings  Enable Task Filter, and then click Deactivate.
9. You can now make important decisions from your My Inbox app. By clicking 
the tile, it opens the list of tasks that you have access to. You can Release, For-
ward, and Claim a task. In addition, certain tasks will let you perform an 
Accept or Reject, and so on, depending on the type of task (see Figure 12.12).

Creating Standard and Custom Workflows with the My Inbox App
12.2
483
Figure 12.12  My Inbox App with All Items
10. To verify the tasks with the backend system, log in to the backend server, and 
run Transaction SBWP to view your inbox. You should see the same number 
of tasks (59 Tasks) in the backend system as well (see Figure 12.13).
Figure 12.13  Backend Workflows

Workflow and SAP Fiori
12
484
Next, let’s explore some of the key features of My Inbox app. The following are 
some specialized tasks:
 Search  
You can search for a specific task from the list of tasks, and you can do a free 
text search (see Figure 12.14).
Figure 12.14  Search Functionality
 Refresh  
You can click the Refresh icon 
 to refresh the task list.
 Multi-select  
By clicking the 
 icon, you can enable multiple selections, and then users can 
select and execute multiple tasks. Users first need to select the task type (see 
Figure 12.15).
Figure 12.15  Task Type

Creating Standard and Custom Workflows with the My Inbox App
12.2
485
 Mass actions  
After you select the task type (see Figure 12.15), you can select multiple tasks 
and perform mass actions, as shown in Figure 12.16.
Figure 12.16  Multi-Select
 Sorting  
The sorting option on the bottom of the task list lets users sort tasks by Created
On (Newest on Top), Created By (A on Top), Priority (Highest on Top), or 
Task Title (A on Top) (see Figure 12.17).
Figure 12.17  Sort By Options
 Filter By  
To filter tasks by Priority, Due Date, Task Type, Status, or Creation Date, 
you can use the Filter icon 
 (see Figure 12.18).

Workflow and SAP Fiori
12
486
Figure 12.18  Filter By Options
 Group By  
The Group by icon 
 groups tasks by Priority, Task Type, Status, or by Res-
ervation (see Figure 12.19).
Figure 12.19  Group By

Creating Standard and Custom Workflows with the My Inbox App
12.2
487
 Comments  
On selecting a task, you can view the task details on the right, and then view 
and post comments by clicking the Comment icon (see Figure 12.20).
Figure 12.20  Comments Tab
 Attachments  
Users can view, upload, or delete attachments via the Attachments icon (see 
Figure 12.21).
Figure 12.21  Attachments

Workflow and SAP Fiori
12
488
 Share or Send Email  
By clicking 
, users can send emails or post tasks on a preconfigured SAP Jam 
site (see Figure 12.22).
Figure 12.22  Collaboration
Now that you have a clear understanding of configuring the My Inbox app and its 
features, let’s discuss some advanced features with workflow scenarios and cus-
tom scenario specific tiles.
12.2.3
Scenario Specific Inbox
SAP delivers many standard approval scenarios. However, in real-world scenar-
ios, the standard approval apps may not be sufficient for your business require-
ments. The My Inbox app allows you to define your own workflow scenario and 
create scenario-specific tiles in SAP Fiori Launchpad. Next, we’ll provide an exam-
ple with step-by-step instructions on how to add a custom workflow to the My 
Inbox app based on a purchase order approval process. The following tasks will 
be discussed:
1. Retrieve workflow template information.
2. Define workflow scenarios.
3. Configure the task decision.
4. Add the Business Add-In (BAdI) for task quotations.
5. Add the tile to SAP Fiori Launchpad.
Retrieve Workflow Template Information
The first step in creating a custom workflow based on a purchase order approval 
process is to collect all the workflow information of the purchase order release.

Creating Standard and Custom Workflows with the My Inbox App
12.2
489
Follow these steps:
1. Log in to the backend server, and run Transaction PFTC.
2. Select the Workflow template from the Task type dropdown, and then enter 
the Task as “20000075” (see Figure 12.23).
3. Click 
 to view the workflow.
Figure 12.23  Workflow Template
4. Click the Workflow Builder button to view the workflow of the purchase 
order release (see Figure 12.24).
Figure 12.24  Workflow Builder
5. In the workflow, the approval or release of a purchase order occurs at step 93. 
Double-click on step 93 to view the activity of this step (see Figure 12.25).

Workflow and SAP Fiori
12
490
Figure 12.25  Approval Step
6. Go to the Control tab to view and take note of the task ID (see Figure 12.26).
Figure 12.26  Task ID
7. Double-click on the Task ID to view the Object method section. Now make a 
note of Object Type and Method (see Figure 12.27).
8. Click the Back icon to go back to the Workflow Builder screen.
9. Select the Outcomes tab (see Figure 12.28).

Creating Standard and Custom Workflows with the My Inbox App
12.2
491
Figure 12.27  Object Method
Figure 12.28  Outcomes
10. Double-click on the outcomes to view the events. First, select RELEASED in 
the Event field (see Figure 12.29), make a note of the Event information, and 
then click Continue 
.

Workflow and SAP Fiori
12
492
Figure 12.29  Event Type
11. Select RESET (Not Used) in the Event field in the Outcomes tab (see Figure 
12.30), and click Continue 
.
Figure 12.30  Event Type Outcome
You now have all the workflow, task ID, object methods, and outcomes informa-
tion. Table 12.1 shows the information that you’ll be using for the remainder of 
this exercise.
Fields
Details
Workflow Template ID
WS20000075
Approval Step ID
93
Step Type
Activity
Task ID
20000166
Table 12.1  Workflow Information 

Creating Standard and Custom Workflows with the My Inbox App
12.2
493
Define Workflow Scenarios
In this step, you’ll define the workflow scenarios in the task gateways and cus-
tomizing in SAP Gateway. Follow these steps:
1. Run Transaction SPRO.
2. Click the SAP Reference IMG button.
3. Navigate to SAP NetWeaver  SAP Gateway Service Enablement  Content  
Task Gateway  Task Gateway Service  Scenario Definition.
4. Click on the Scenario Definition folder, and then click the New Entries button.
5. Add the following scenario definition (see Figure 12.31), and then press (Enter):
 Scenario Identifier: “DEMO_PO_RELEASE”
 Scenario Display Name: “PO Approval”
 Technical Service Name: “/IWPGW/TASKPROCESSING”
 Version: “2”
Figure 12.31  Scenario Definition
6. Select the scenario definition, and then click on Assign Consumer Type to
Scenario.
7. Click the New Entries and then add the consumer types, as shown in Figure 
12.32.
Business Object  
BUS2012
Approval Method
SINGLERELEASE
Outcomes
RELEASED, RESET
Fields
Details
Table 12.1  Workflow Information (Cont.)

Workflow and SAP Fiori
12
494
Figure 12.32  Consumer Type
8. Double-click on Task Definition for Scenario (Figure 12.33), and then click 
the New Entries button.
Figure 12.33  Task Definition for Scenario
9. Add the System Alias and the Task Type, and then click Save.
You’ve successfully defined the workflow scenario.
Configure the Task Decision
In this step, you’ll define the task decision, which involves maintaining the work-
flow tasks that need to be included in task filter. Follow these steps:
1. Run Transaction SPRO.
2. Click the SAP Reference IMG button.

Creating Standard and Custom Workflows with the My Inbox App
12.2
495
3. Navigate to SAP NetWeaver  SAP Gateway Service Enablement  Content  
Work Flow Settings  Maintain Task Names and Decision Options.
4. Click on the Step Name folder, and create a new entry with the following 
details (see Figure 12.34):
 Workflow ID: “WS20000075”
 Step ID: “93”
 Step Description: “Approve Purchase Order”
Figure 12.34  Workflow ID and Step ID
5. Select the step name, and then create new decision keys, as shown in Figure 
12.35:
 Key: “1”/“2”
 Decision Text: “Approve”/“Reject”
 Nature: “Positive”/“Negative”
Figure 12.35  Decision Keys

Workflow and SAP Fiori
12
496
Implement the BAdI for the Task Quotation
In this step, you’ll implement the BAdI to update the user selections to the back-
end. When the user selects Approve or Reject from the My Inbox app, this BAdI 
will update the user’s decision in the backend.
Follow these steps:
1. Run Transaction SE18.
2. Enter “/IWWRK/BADI_WF_BEFORE_UPD_IB” in the BAdI Name field, and 
click Display (see Figure 12.36).
Figure 12.36  Standard BAdI
3. Right-click on Implementations, and select Create BAdI Implementation (see 
Figure 12.37).
Figure 12.37  Create BAdI implementation Option

Creating Standard and Custom Workflows with the My Inbox App
12.2
497
4. Create the new enhancement implementation by clicking 
.
5. Enter the name and short text as shown in Figure 12.38, and then click Con-
tinue 
.
Figure 12.38  Enhancement Implementation
6. Select the local object.
7. Select the new enhancement implementation, and click Continue 
 (see Fig-
ure 12.39).
Figure 12.39  Selecting the New Enhancement Implementation
8. Create the BAdI implementation by entering the details shown in Figure 12.40, 
and then click Continue 
.
Figure 12.40  Creating BAdI Implementation

Workflow and SAP Fiori
12
498
9.
Double-click on Filter Val., and then click 
 (see Figure 12.41).
Figure 12.41  Filter Values
10. Select both WORKFLOW_ID and STEP_ID, and then click Continue 
 (see 
Figure 12.42).
Figure 12.42  Selecting Filters
11. Double-click on the filter values, and enter the STEP_ID and WORKFLOW_ID
(see Figure 12.43):
 STEP_ID: “93”
 WORKFLOW_ID: “WS20000075”
12. Click Save.

Creating Standard and Custom Workflows with the My Inbox App
12.2
499
Figure 12.43  Workflow ID and Step ID
13. Click Yes to save the enhancement implementation.
14. Double-click on the Implementing Class folder, and then click on the name in 
the Implementing Class field (see Figure 12.44).
Figure 12.44  Implementing Class
15. Double-click on the Method, as shown in Figure 12.45.
Figure 12.45  Method

Workflow and SAP Fiori
12
500
16. Enter the code shown in Listing 12.1 between the method and end method.
"1. Variables 
DATA abs_object TYPE swr_obj_2. 
DATA abv_retcode TYPE sy-subrc. 
DATA abt_container TYPE TABLE OF swr_cont. 
DATA abs_container_line TYPE swr_cont. 
DATA abt_msg_lines type sapi_msg_lines. 
DATA abt_msg_struc type sapi_msg_struc. 
DATA FORMNUMBER TYPE SWXFORMABS-FORMNUMBER. 
DATA abs_formabs TYPE swxformabs. 
 
"2. Get Workitem Details 
CALL FUNCTION 'SAP_WAPI_GET_OBJECTS' 
  EXPORTING 
    WORKITEM_ID            = is_wi_details-wi_id 
*   LANGUAGE               = SY-LANGU 
*   USER                   = SY-UNAME 
*   BUFFERED_ACCESS        = 'X' 
IMPORTING 
*   LEADING_OBJECT         = 
   RETURN_CODE            = abv_retcode 
   LEADING_OBJECT_2       = abs_object 
TABLES 
*   OBJECTS                = 
   MESSAGE_LINES          = abt_msg_lines 
   MESSAGE_STRUCT         = abt_msg_struc 
*   OBJECTS_2              = 
          . 
"3. Get Document Number 
MOVE abs_object-instid TO formnumber. 
 
*4. Get Decision Based on the Workitem ID 
CALL FUNCTION 'SAP_WAPI_READ_CONTAINER' 
  EXPORTING 
    WORKITEM_ID                    = is_wi_details-wi_id 
*   LANGUAGE                       = SY-LANGU 
*   USER                           = SY-UNAME 
*   BUFFERED_ACCESS                = 'X' 
IMPORTING 
   RETURN_CODE                    = abv_retcode 
*   IFS_XML_CONTAINER              = 
*   IFS_XML_CONTAINER_SCHEMA       = 
TABLES 
   SIMPLE_CONTAINER               = abt_container 
   MESSAGE_LINES          = abt_msg_lines 
   MESSAGE_STRUCT         = abt_msg_struc 

Creating Standard and Custom Workflows with the My Inbox App
12.2
501
*   SUBCONTAINER_BOR_OBJECTS       = 
*   SUBCONTAINER_ALL_OBJECTS       =. 
 
"5. Get Application Data 
select single * from swxformabs into abs_formabs where formnumber =
 formnumber. 
 
"6. Set Decision Value 
CASE iv_decision_key. 
  WHEN 0001. "Approved 
    abs_container_line-value = 'A'. 
    abs_formabs-procstate = 'A'. 
  WHEN 0002. "Rejected 
    abs_container_line-value = 'R'. 
    abs_formabs-procstate = 'R'. 
ENDCASE. 
 
 
"7. Set Result Value Based on Decision 
abs_container_line-element = '_WI_RESULT'. 
"Update Container rows 
MODIFY abt_container INDEX 3 FROM abs_container_
line TRANSPORTING value. 
 
"8. Update Container 
CALL FUNCTION 'SAP_WAPI_WRITE_CONTAINER' 
  EXPORTING 
    WORKITEM_ID                        = is_wi_details-wi_id 
*   LANGUAGE                           = SY-LANGU 
*   ACTUAL_AGENT                       = SY-UNAME 
   DO_COMMIT                          = 'X' 
*   IFS_XML_CONTAINER                  = 
*   OVERWRITE_TABLES_SIMPLE_CONT       = ' ' 
*   CHECK_INBOX_RESTRICTION            = ' ' 
IMPORTING 
   RETURN_CODE                        = abv_retcode 
TABLES 
   SIMPLE_CONTAINER                   = abt_container 
   MESSAGE_LINES          = abt_msg_lines 
   MESSAGE_STRUCT         = abt_msg_struc 
   . 
 
"9. Update App Data 
abs_formabs-approvdate = sy-datum. 
abs_formabs-approvby = sy-uname. 
update swxformabs from abs_formabs. 

Workflow and SAP Fiori
12
502
 
*10. Complete the Task 
CALL FUNCTION 'SAP_WAPI_WORKITEM_COMPLETE' 
  EXPORTING 
    WORKITEM_ID                     = is_wi_details-wi_id 
*   ACTUAL_AGENT                    = SY-UNAME 
*   LANGUAGE                        = SY-LANGU 
*   SET_OBSOLET                     = ' ' 
   DO_COMMIT                       = 'X' 
*   DO_CALLBACK_IN_BACKGROUND       = 'X' 
*   IFS_XML_CONTAINER               = 
*   CHECK_INBOX_RESTRICTION         = ' ' 
IMPORTING 
   RETURN_CODE                     = abv_retcode 
*   NEW_STATUS                      = 
TABLES 
*   SIMPLE_CONTAINER                = abt_container 
   MESSAGE_LINES          = abt_msg_lines 
   MESSAGE_STRUCT         = abt_msg_struc 
   . 
 
*11. Set Confirm 
CALL FUNCTION 'SAP_WAPI_WORKITEM_CONFIRM' 
  EXPORTING 
    WORKITEM_ID                   = is_wi_details-wi_id 
*   ACTUAL_AGENT                  = SY-UNAME 
*   LANGUAGE                      = SY-LANGU 
   DO_COMMIT                     = 'X' 
*   CHECK_INBOX_RESTRICTION       = ' ' 
IMPORTING 
   RETURN_CODE                   = abv_retcode 
*   NEW_STATUS                    = 
TABLES 
   MESSAGE_LINES          = abt_msg_lines 
   MESSAGE_STRUCT         = abt_msg_struc
Listing 12.1  BAdI to Capture User’s Decision
17. Click Save, and activate.
Add the Tile to SAP Fiori Launchpad
In this step, you’ll add a new dynamic tile and the custom workflow to the My 
Inbox app. Follow these steps:

Creating Standard and Custom Workflows with the My Inbox App
12.2
503
1. Log in to the SAP Fiori Launchpad designer.
2. Select SAP_FND_TC_T, and add a new dynamic tile.
3. Use the following details in the General section, as shown in Figure 12.46:
 Title: Enter “My Inbox”.
 Subtitle: Enter “PO Approval”.
 Keywords: Enter “Workflow, Inbox, PO Approval”.
 Icon: Select an icon.
Figure 12.46  General Section
4. Enter the Service URL details in the Dynamic Data section:
“/sap/opu/odata/IWPGW/TASKPROCESSING;mo;v=2/ScenarioCollection?
$filter=key eq <your scenario ID>”.
In this example, the scenario ID is DEMO_PO_RELEASE (see Figure 12.47).
Figure 12.47  Dynamic Data

Workflow and SAP Fiori
12
504
5. Enter the following details in the Navigation section (see Figure 12.48):
 Semantic Object: “WorkflowTask”
 Action: “displayInbox”
 Parameters: “scenarioId=<your scenario ID>”
Figure 12.48  Navigation Section
6. Click Save.
7. Log in to SAP Fiori Launchpad, and add the new My Inbox tile from the SAP_
FND_TC_T catalog (see Figure 12.49).
Figure 12.49  All Items Tile and Scenario-Specific Tile
8. Click on the My Inbox app (PO approval), and open it (see Figure 12.50).

Summary
12.3
505
Figure 12.50  Scenario-Specific App
Users can now approve and reject purchase orders from the My Inbox app.
12.3
Summary
Workflows are important for carrying out daily business activities. In this chap-
ter, we discussed the basics of the workflow process and how to integrate SAP 
Business Workflows with the My Inbox app in SAP Fiori. Specifically, we’ve con-
figured the All Items tile, which shows you all the workflow tasks that you have 
access to in the backend system. We concluded the chapter by creating a custom 
workflow for a scenario-specific tile.
In the next chapter, we’ll look at integrating SAP Fiori apps with other SAP prod-
ucts.


507
Chapter 13 
This chapter provides an overview of how SAP Fiori apps can be 
integrated with SAP Lumira, SAP Jam, and SAP BusinessObjects Design 
Studio.
13
Integration with Other SAP Products
The SAP Fiori landscape can be integrated with SAP products such as SAP Jam, 
SAP Lumira, and SAP BusinessObjects Design Studio. In this chapter, we’ll cover 
the integration steps for each piece of software.
We’ll start with an introduction of how to leverage SAP Jam in conjunction with 
SAP Fiori in Section 13.1, including how this tool can help business users collab-
orate with each other using tiles in SAP Fiori Launchpad or from an SAP Fiori 
application. We’ll begin by looking at prerequisites for integration in Section 
13.1.1. In Section 13.1.2, we’ll show you how to configure a social media catalog, 
and we’ll leverage SAP Jam tiles in SAP Fiori Launchpad to collaborate with 
teams. We’ll end the SAP Jam and SAP Fiori integration section with an overview 
on different collaboration components in Section 13.1.4.
Next, in Section 13.2, we’ll introduce you to SAP’s self-service visualization 
tool—SAP Lumira. We’ll start with the roles and authorizations that are required 
for a user to access SAP Lumira in SAP Fiori, and then we’ll introduce the differ-
ent tiles that are available in SAP Fiori from the SAP Lumira perspective. We’ll 
end the section by showing you how to create an SAP Fiori tile from an SAP 
Lumira story.
The chapter concludes with a discussion on integrating with SAP BusinessObjects 
Design Studio in Section 13.3. We’ll start with an overview of SAP Business-
Objects Design Studio and then briefly introduce the existing standard SAP Fiori 
apps that are developed using SAP BusinessObjects Design Studio. In Section 
13.3.1, we’ll show you the configuration that is required on the ABAP servers to 
run all SAP BusinessObjects Design Studio applications that use the standard SAP 

Integration with Other SAP Products
13
508
Business Server Pages (BSP) application. We’ll end the section with an exercise on 
how to build an SAP Fiori app using an SAP Business Warehouse (SAP BW) query
and the standard BSP application.
13.1
SAP Jam
SAP Jam is a powerful enterprise social network solution where users can collab-
orate with teams to brainstorm issues related to specific business objects or to 
share knowledge within the organization. SAP Jam solves problems and improves 
decision making. In addition, SAP Jam can now be integrated with SAP Fiori via 
any of the following methods:
 Using social media tiles in SAP Fiori Launchpad
 Using collaboration components
To better demonstrate how the integration between these two products can help 
businesses, let’s look at an example. Say you’re a sales manager viewing sales 
orders in the Track Sales Order app in SAP Fiori. During this review, you realize 
something’s wrong with a particular sales order. The next thing you do is share 
this information with your team, who can help solve this problem as quickly as 
possible. The SAP Fiori and SAP Jam integration makes it easy to share the issue 
with team members via SAP Jam, which not only solves your issues with your 
subject matter experts quickly but also improves your decision making. After the 
problem is solved, you’ll receive a notification in SAP Fiori Launchpad. The 
beauty of SAP Jam is that all this social collaboration is happening securely across 
your entire organization, directly from SAP Fiori Launchpad.
There are a number of prerequisites that have to be fulfilled to integrate SAP Jam 
and SAP Fiori. We’ll highlight the prerequisites in the next section. You’ll then 
configure the social media catalog to provide user access to SAP Jam tiles. Finally, 
we’ll highlight collaboration components that are integrated within SAP Fiori 
applications.
13.1.1
Prerequisites
The Social Media Integration (SMI) function integrates SAP Jam social collabora-
tion platform tiles and SAP Fiori. The collaboration features of SMI aren’t just 

SAP Jam
13.1
509
integrated between SAP Jam and SAP Fiori; they can also be integrated with other 
web technologies such as Web Dynpro, ABAP, and SAPUI5.
You need to configure ABAP SMI to allow SAP Fiori apps and SAP Fiori Launch-
pad to use the SMI functions developed for SAP Fiori. SMI offers functions that 
run within the SAP Fiori app and functions that run as an SAP Fiori tile. For more 
information, go to http://help.sap.com/nw-uiaddon, and choose SAP Jam Integra-
tion.
In addition, you need to fulfill the following prerequisites:
 Purchase an SAP Jam license
 Ensure that every SAP Fiori user has an SAP Jam account
13.1.2
Configuration
After the SAP Jam and SAP ABAP SMI are configured, you can configure SAP Jam 
tiles in SAP Fiori. The social media catalog is used to group SAP Jam-related tiles 
for SAP Fiori Launchpad. Similar to other catalogs, the social media catalog 
should be associated to a PFCG role as well. We’ll now show you how to create a 
catalog and then how to add this catalog to a new role. Most of these steps are 
very similar to what you’ve been seeing in the previous chapters.
Follow these steps:
1. Add the SM_CATALOG_SRV service (refer to Chapter 4, Section 4.2) by select-
ing the service and clicking Add Selected Services (see Figure 13.1).
Figure 13.1  Adding Services

Integration with Other SAP Products
13
510
2. The next step is to activate the OData services (refer to Chapter 4, Section 4.2). 
Select the SM_INTEGRATION_V2_SRV and SM_CATALOG_SRV OData ser-
vices via Transaction /IWFND/MAINT_SERVICE, and run them by clicking 
Call Browser (see Figure 13.2).
Figure 13.2  Test Service
3. Next, you need to create a remote catalog in the SAP Fiori Launchpad designer. 
Log in to the SAP Fiori Launchpad designer (refer Chapter 4, Section 4.6).
4. Select the Catalogs tab, and then click + at the bottom of the screen to add a 
new catalog.
5. Select Remote.
6. Enter the following details, and then click Save (see Figure 13.3):
 Title: “Social Media Catalog”
 ID: “Jam”
 Remote ID: “SMCatalog”
 System alias: “LOCAL”
 Base URL: “/sap/opu/odata/sap/SM_CATALOG_SRV/”

SAP Jam
13.1
511
Figure 13.3  Create Catalog Screen
7. Next, you need to create and assign the role to a user (refer to Chapter 4, Sec-
tion 4.6). Run Transaction PFCG, enter the “ZSM_CATALOG_ROLE” in the 
Role field, and then click Single Role (see Figure 13.4).
Figure 13.4  Creating the Role
8. Enter a Description, and then click Save.
9. On the menu bar, select the Transactions dropdown list, and then select SAP
Fiori Tile Catalog.

Integration with Other SAP Products
13
512
10. Select Remote Catalog from the Catalog Provider dropdown box (see Fig-
ure 13.5).
11. Select the catalog you created earlier, and then press (Enter).
Figure 13.5  Assign Tile Catalog Screen
12. To enable access to the catalog, you must assign a user to this role. Go to the 
User tab, enter the username, and then press (Enter) (see Figure 13.6).
13. Click Save.
Figure 13.6  Assigning a User to the Role
You should now see the Social Media Catalog in SAP Fiori Launchpad (see Fig-
ure 13.7).

SAP Jam
13.1
513
Figure 13.7  Adding the Tile from the Catalog
You’ve successfully created the social media catalog and assigned a user to the cat-
alog role. Next, we’ll explore the SAP Jam tiles that are available in SAP Fiori.
13.1.3
SAP Jam Tiles
There are two types of SAP Jam-based SAP Fiori tiles that can initiate collabora-
tion directly in your SAP Fiori Launchpad:
 Group tiles  
You can add tiles in SAP Fiori Launchpad for any SAP Jam group you belong to. 
The group tile displays the group name, group icon, time since last activity, and 
the content updated every five minutes. For example, Figure 13.8 shows the 
Project Manager Group, with an activity recorded one minute ago.
 Notification tiles  
You can add a notification tile in SAP Fiori Launchpad to view notifications 
received in an SAP Jam account. The notification tile displays the notification 
sender’s name and photo, notification type, notification message, and group 
name if the notification is from a group. This tile can display up to 10 notifica-
tions and show new notification content in 10-second intervals. For example, 
Figure 13.8 shows the last notification, which was created by user Anil B, 
responding to the user Larry R’s question.

Integration with Other SAP Products
13
514
Figure 13.8  SAP Jam Tiles
13.1.4
Collaboration Components
Collaboration components are available for integrating SAP Fiori apps and SAP 
Jam (i.e., these components are part of the application). There are three types of 
collaboration components:
 Social timeline  
Using this component, you can directly display some of the main features of 
SAP Jam, such as a user’s photo, notifications of other users, and so on, in the 
SAP Fiori app.
 Discuss  
Using this component, you can display and contribute to SAP Jam through a 
feed (see Figure 13.9).
Figure 13.9  Discuss Dialog Component

SAP Lumira
13.2
515
 Share  
This component lets you share attachments, business objects, and comments 
about the business objects with SAP Jam groups (see Figure 13.10). This feature 
is available in all app types: transactional, analytical, and fact sheet.
Figure 13.10  Share Component
You should now have a better understanding of which type of component to use 
for your SAP Fiori project with an SAP Jam integration. Next, we’ll discuss SAP 
Fiori’s integration with SAP Lumira.
13.2
SAP Lumira
SAP Lumira is a self-service data visualization tool with which you can quickly and 
easily create stunning interactive maps, infographics, and charts. You can then 
compose stories from those visualizations, analyze trends, and share insights with 
a team using the SAP Lumira Server or SAP Lumira Cloud. In this section, we’ll 
discuss the integration between SAP Fiori and SAP Lumira, as well as show you 
how to access and share SAP Lumira stories from SAP Fiori Launchpad.
13.2.1
Configuration
In this section, we’ll walk through the configuration steps for this integration. 
We’ll look at the roles that have to be assigned to an administrator and end users 

Integration with Other SAP Products
13
516
to view and run SAP Lumira stories in SAP Fiori Launchpad. In Chapter 2, Section 
2.6.4, we shoed you how to assign roles to a user in SAP HANA Studio. Follow the 
same steps and assign the following roles:
1. Assign the administrator roles to SAP Fiori administrators; for this example, 
assign the following role to LUMIRATECH user (see Figure 13.11):
 sap.bi.common::BI_TECH_USER
Figure 13.11  Tech Role
2. Assign administrator roles to SAP Fiori administrators; for this example, assign 
the roles to FIORIADMIN user (see Figure 13.12):
 sap.bi.admin::BI_ADMIN
 sap.bi.admin::BI_CONFIGURATOR
Figure 13.12  Admin Roles

SAP Lumira
13.2
517
3. Similarly, assign the end user roles to the SAP Fiori end users (see Figure 
13.13):
 sap.bi.common::BI_DATA_ANALYST
 sap.bi.common::BI_DATA_CONSUMER
Figure 13.13  End-User Roles
4. Next, you need to configure the SAP Lumira Server in SAP Fiori Launchpad. 
Log in to SAP Fiori admin Launchpad via http(s)://<SAPHANAServer>:<Port>/
sap/bi/launchpad/fiori.
5. Add the SAP Lumira configuration tile from the tile catalog, and then launch 
the app (see Figure 13.14).
Figure 13.14  Configuration Tile
6. Enter the Technical user and the Password (which you created in step 1), and 
click Run Configuration (see Figure 13.15).

Integration with Other SAP Products
13
518
Figure 13.15  Run SAP Lumira Configuration
7. Assign the role SAP_LUMIRA_TCR to the FIORI_USER and FIORIADMIN in the 
ABAP frontend server. We showed you how to assign a role to a user in previ-
ous chapters (see Chapter 4, Section 4.42). Follow the same steps and add the 
users to this role using Transaction PFCG (see Figure 13.16).
Figure 13.16  SAP Lumira Roles on the ABAP Server
You’ve now successfully completed the configuration that is required to integrate 
the SAP Lumira Server and SAP Fiori.

SAP Lumira
13.2
519
Next, we need to integrate SAP Lumira with SAP Fiori. SAP Fiori provides the 
capability to integrate with SAP Lumira in three different ways: All Stories tile, 
SAP Lumira static tile, and via a KPI drilldown. In the next section, we’ll start by 
discussing the SAP Lumira tiles. We’ll then look at how to create a KPI tile with a 
drilldown to an SAP Lumira story using the KPI modeler.
13.2.2
SAP Lumira Tiles
In this section, we’ll focus our attention on the two tiles provided with SAP 
Lumira to integrate with SAP Fiori Launchpad. Follow these steps to add these 
tiles from the SAP Lumira catalog in SAP Fiori Launchpad:
1. Log in to SAP Fiori Launchpad, and click 
 to open the menu.
2. Click Tile Catalog to open the catalogs, and then select SAP Lumira from the 
dropdown list.
3. Click on the + sign below each of these tiles to add the tile to the SAP Lumira 
group. You should see all of the SAP Lumira tiles in your SAP Fiori Launchpad 
(see Figure 13.17).
Figure 13.17  SAP Lumira Catalog
 Stories
All the stories that are displayed in SAP Fiori are coming from SAP Lumira Server, which 
in running on SAP HANA.

Integration with Other SAP Products
13
520
You’ve successfully added the SAP Lumira tiles. Next, let’s explore each of these 
tiles:
 All Stories  
Figure 13.18 shows the All Stories launch tile, which displays the number of 
stories that a user has access to. Clicking this tile opens a list with all of the sto-
ries, which you can sort, filter, and search.
Figure 13.18  All Stories Tile
 SAP Lumira static tile  
Figure 13.19 shows the static tile, which launches SAP Lumira Cloud in a new 
window. From SAP Lumira Cloud, you can create and share stories.
Figure 13.19  SAP Lumira Static Tile
You should now have a clear understanding of how SAP Lumira and SAP Fiori 
products are integrated. Next, we’ll show you how to access an SAP Lumira story 
from SAP Fiori Launchpad and how to create a tile from that story.
Proceed with the following steps:
1. In SAP Fiori Launchpad, select the All Stories tile.
2. Select a story from the list of stories that are available (left side), and click Open
(see Figure 13.20).

SAP Lumira
13.2
521
Figure 13.20  Selecting an SAP Lumira Story
3. Filter one particular product, click 
, and choose Save as Tile (see Figure 
13.21).
Figure 13.21  Filtering a Story

Integration with Other SAP Products
13
522
4. Enter the Title and Subtitle, and then click OK (see Figure 13.22).
Figure 13.22  Save as Tile Screen
5. Now go back to the home screen by clicking 
.
6. You should now see a new SAP Lumira tile. Click the tile to open the SAP 
Lumira story in SAP Fiori Launchpad (see Figure 13.23).
Figure 13.23  New SAP Lumira Story Tile
You’ve seen throughout this section the powerful combination of SAP Lumira and 
SAP Fiori and how both tools are integrated seamlessly. In the next section, we’ll 
look at configuring the KPI tile with a drilldown.

SAP Lumira
13.2
523
13.2.3
Configure the KPI Tile with a Drilldown
In addition to launching SAP Lumira from a tile, you can also configure a KPI tile 
with a drilldown to an SAP Lumira story. In Chapter 6, we taught you how to 
implement an analytical app using the example Days Sales Outstanding app. You 
can follow the same steps and implement the KPI tile to drilldown to an SAP 
Lumira story. In Chapter 6, Section 6.3.4, we created a generic drilldown. There-
fore, instead creating a generic drilldown you need to select an SAP Lumira story 
as a drilldown in the Navigation section (see Figure 13.24). Proceed with the fol-
lowing steps:
1. Select the Other Drill Down radio button.
2. Select the SAP Lumira Story ID from the list and then click Save and Activate.
 Important!
You will be able to view only those SAP Lumira story ID’s (in value help) that are avail-
able for the SAP HANA view that your KPI is based on.
Figure 13.24  SAP Lumira Drilldown
This concludes the SAP Fiori and SAP Lumira integration process. Next, we’ll see 
how SAP Fiori integrates with SAP BusinessObjects Design Studio.

Integration with Other SAP Products
13
524
13.3
SAP BusinessObjects Design Studio
SAP BusinessObjects Design Studio allows application designers to create dash-
boards, analysis applications, and planning applications intuitively based on SAP 
BW, SAP HANA, and universes. You can build applications in SAP BusinessObjects 
Design Studio and make them available in SAP Fiori Launchpad. Currently, SAP 
hasn’t yet released a standard or recommended procedure to make all SAP Busi-
nessObjects Design Studio applications available in SAP Fiori Launchpad as a tile. 
In this section, we’ll just focus on the standard SAP Fiori apps that are developed 
in SAP BusinessObjects Design Studio.
At the time of writing this book (November 2015), SAP released wave 8 of SAP 
Fiori apps. As of the latest release, there are currently three standard apps that are 
created using SAP BusinessObjects Design Studio and integrated with SAP Fiori:
 Develop Liquidity Plans (transactional app)
 Liquidity Plans (analytical app)
 Cash Flow – Detailed Analysis (analytical app)
To make SAP BusinessObjects Design Studio apps accessible in the SAP Fiori land-
scape, SAP provides a generic SAP BusinessObjects Design Studio component as 
part of SAP Fiori applications. This generic component (BSP application) is used 
for all the SAP BusinessObjects Design Studio-based SAP Fiori applications. With 
the BSP application, FIN_DS_ANALYZE, you can visualize any SAP BW query, 
with an SAP BW query or an SAP BusinessObjects Design Studio planning tem-
plate to be passed to this reuse component.
13.3.1
Configuration
For the SAP BusinessObjects Design Studio-based SAP Fiori applications to run in 
the SAP Fiori landscape, you need to perform the following steps on the backend 
server. These steps are done only once for all SAP BusinessObjects Design Studio-
based applications (i.e., you don’t have to repeat these steps for every app). Fol-
low these steps:
1. Begin the process of activating the Internet Communication Framework (ICF) 
services that are required on the backend server by logging in to the backend 
server.
2. Run Transaction SICF.

SAP BusinessObjects Design Studio
13.3
525
3. Click 
, and then drill down to default_host  sap  bw.
4. Right-click on ina, and choose Activate (see Figure 13.25).
5. Right-click on Mime, and choose Activate.
Figure 13.25  Services
6. To configure the ICF handler on the backend server, log in to the ABAP server, 
and run Transaction SICF.
7. Click 
, and then drill down to sap  bw  ina (see Figure 13.26).
Figure 13.26  Adding the Subelement

Integration with Other SAP Products
13
526
8.
Right-click on ina, and create a new subelement.
9.
Enter “GetServerInfo” in the Name of Service Element field (see Figure 
13.27).
10. In the Type of Service Node to Be Created section, select the Reference to
Existing Service radio button.
Figure 13.27  Create a Service Element Screen
11. Press (Enter), or click Continue 
.
12. In the Alas Trgt tab, select sap  es  ina  GetServerInfo as the target (see 
Figure 13.28).
Figure 13.28  Setting the Alias

SAP BusinessObjects Design Studio
13.3
527
13. Save and activate the newly created service reference.
14. The last step is to configure the SAP Web Dispatcher for routing the activated 
services to the server where the user interface (UI) runs. In Chapter 3, Section 
3.1.2, you configured the SAP Web Dispatcher. In the same way, you need to 
configure the /sap/bw path, so that servicers are routed to the correct backend 
server.
13.3.2
Create an SAP Fiori App
You’ve now successfully completed all the steps required to run all the standard 
SAP BusinessObjects Design Studio-based applications. Next, we’ll show you how 
to use a standard BSP application FIN_DS_ANALYZE and an SAP Business 
Explorer (BEx) query to create an SAP Fiori application. In this example, we’ll be 
using the FCLM_CFA_VP01_Q0001 standard BEx query to build an app.
Follow these steps:
1. Log in to the SAP Fiori Launchpad designer.
2. Create a new catalog, and click Save (see Figure 13.29).
Figure 13.29  Create Catalog Screen
3. Click + to add a tile to the new catalog (see Figure 13.30).
4. Add the static tile by clicking + (see Figure 13.31).

Integration with Other SAP Products
13
528
Figure 13.30  Adding a Tile
Figure 13.31  Adding the Static Tile
5. Click on the new tile you added in the previous step (see Figure 13.32).
Figure 13.32  Selecting the New Tile

SAP BusinessObjects Design Studio
13.3
529
6.
Perform the following in the General section (see Figure 13.33):
 Title: Enter “Cash Flow”.
 Subtitle: Enter “Design Studio”.
 Icon: Select an icon from the list.
Figure 13.33  General Section
7.
In the Navigation section (see Figure 13.34), select CashFlow from the 
Semantic Object list by clicking 
.
8.
In the Action field, enter “analyze”.
Figure 13.34  Navigation Section
9.
Click Save.
10. Add a target mapping by clicking the Target Mapping icon, as shown in Fig-
ure 13.35.

Integration with Other SAP Products
13
530
Figure 13.35  New Target Mapping
11. Click the Create Target Mapping button to create a new target mapping.
12. In the Intent section (see Figure 13.36), select CashFlow from the Semantic
Object list by clicking 
.
13. In the Action field, enter “analyze”.
Figure 13.36  Intent Section
14. In the Target section, select the SAPUI5 Fiori App radio button, and then 
enter the following details (see Figure 13.37):
 Title: “Cash Flow – Design Studio”
 URL: “/sap/bc/ui5_ui5/sap/FIN_DS_ANALYZE”
 Component: “fin.acc.query.analyze”

SAP BusinessObjects Design Studio
13.3
531
Figure 13.37  Target Section
15. Enter the BEx query details in the Parameters table in the Name and Default
Value columns (see Figure 13.38).
Figure 13.38  Entering the SAP BW Query
16. Click Save, and then click OK.
17. Log in to ABAP backend server, and then create a new role via Transaction 
PFCG.
18. Add the new catalog (see Figure 13.39), which you created in the previous 
step.
19. Add the username (whoever needs access to this app) in the User tab.
20. Click Save.
21. Next, to test the app, log in to SAP Fiori Launchpad, and then add the SAP 
BusinessObjects Design Studio Cash Flow app, as shown in Figure 13.40.

Integration with Other SAP Products
13
532
Figure 13.39  Adding the SAP BusinessObjects Design Studio Custom Catalog
Figure 13.40  Adding a New App to the Home Group
22. You should now see the SAP BusinessObjects Design Studio application under 
the My Home group, and you can launch it by clicking the app (see Figure 
13.41).
Figure 13.41  App Based on SAP BusinessObjects Design Studio and SAP BW Query

Summary
13.4
533
You’ve now successfully created an SAP Fiori app using the standard BSP applica-
tion and a standard SAP BW query.
13.4
Summary
In this chapter, we introduced SAP Jam, SAP Lumira, and SAP BusinessObjects 
Design Studio, and we showed how each of these tools can be integrated with 
SAP Fiori. We also discussed how you can collaborate with team members 
directly from SAP Fiori Launchpad via SAP Jam standard tiles. We explored dif-
ferent options to configure standard SAP Lumira tiles and discussed how to create 
a KPI tile with a drilldown to an SAP Lumira story using the KPI modeler. Finally, 
we provided an overview of the SAP BusinessObjects Design Studio configuration 
required to run SAP BusinessObjects Design Studio-based apps. Keep in mind, 
SAP Fiori is going to continually grow and provide more capabilities in terms of 
functionality and integration with these tools.
This concludes our discussion on the implementation and development of SAP 
Fiori applications. The next two appendices explore the SAP Fiori Client and cus-
tom themes in SAP Fiori Launchpad.


535
Appendices
A
SAP Fiori Client ......................................................................
537
B
Customizing SAP Fiori Launchpad .........................................
547
C
The Author .............................................................................
557


537
Appendix A A
SAP Fiori Client
Although one of the main selling points of SAP Fiori is that it’s browser-based and 
can automatically adjust its layout depending on your device (desktop or mobile), 
there is also a native SAP Fiori app (version 1.4) for iOS, Android, and Windows 
10 available. This appendix briefly introduces the native app, SAP Fiori Client, 
and discusses the pros and cons of using it as opposed to running SAP Fiori in a 
mobile browser.
A.1
Overview
SAP Fiori Client is a mobile app that can be downloaded from the app stores for 
iOS, Android, and Windows. This mobile app provides additional native func-
tionalities such as a barcode scanner, camera, geolocation, cache mechanism, and 
so on. Currently, the app works on devices running Android 4.3 through 5.x, iOS 
7.1 through 9.x, and Windows 8.1 or 10. SAP Fiori Client was developed on the 
Apache Cordova architecture, with the application programming interfaces (APIs) 
added through the Cordova plugins. Some of the common device features, such 
as the barcode scanner, camera, and geolocation, work on all three operating sys-
tem (OS) types.
SAP Fiori Client implements an asset cache management strategy that allows the 
native app to maintain its own cache of SAP Fiori application assets. When the 
user runs the app for the first time, the application assets are cached in the device. 
The next time the user reopens the app, it uses the local cached assets while load-
ing, unlike the mobile browser cache, which gets purged every couple of hours.
Cache Management
Cache management is not supported on Windows devices.
A.2
Download and Login to SAP Fiori Client
Now that you have an overview of SAP Fiori Client, we’ll look at using the app 
itself. In this section, we’ll walk you through the application download and login 
on an iOS device. Follow these steps:

SAP Fiori Client
A
538
1. Download the SAP Fiori Client app from the app store. Figure A.1 shows the 
SAP Fiori app.
2. Open the app by clicking it.
Figure A.1  SAP Fiori App
3. You can either click Log In to connect to your SAP Fiori landscape, or you can 
select Demo Mode to try out the SAP Fiori app.
4. Click on Log In (see Figure A.2).
Figure A.2  Welcome Screen

Download and Login to SAP Fiori Client
A.2
539
5. Enter the SAP Fiori URL or email parameters provided by your administrator, 
and click OK (see Figure A.3).
Figure A.3  Server Details
6. Next, you’ll see a passcode screen where you can set the app password to pro-
tect your application from unauthorized access. You can reset the password if 
you have forgotten it; however, you’ll have to reconfigure the application with 
your SAP Fiori Launchpad details. With the integration of the SAP Mobile Plat-
form into SAP Fiori, you can create a much more secure environment and man-
age the mobile environment for SAP Fiori very efficiently (see Figure A.4).
7. After you’re logged in, it will show you tips on some of the functionalities (see 
Figure A.5). Click Continue.

SAP Fiori Client
A
540
Figure A.4  Passcode
Figure A.5  Tips

Functions
A.3
541
8. In the next screen, you need to enter your login credentials and click Log on
(see Figure A.6).
Figure A.6  Login Credentials
You should now see the SAP Fiori apps that you have access to. Next, we’ll 
explore some of the functions of this app.
A.3
Functions
SAP Fiori Client houses the apps you have access to on your SAP Fiori landscape. 
Figure A.7 shows the home screen of SAP Fiori Client.

SAP Fiori Client
A
542
Figure A.7  Home Screen
By clicking 
 on the top left, you can open the SAP Fiori catalog groups (see Fig-
ure A.8). You can navigate between these groups; for example, we selected the 
Field Sales Representative group to view the apps under that group.
You can search apps or objects that you have access to by clicking 
 (see Figure 
A.9). For example, if you want to see the Sales Order fact sheet app of a particular 
order, just type the sales order number, and click Search to view the fact sheet 
app.

Functions
A.3
543
Figure A.8  Groups Catalog
Figure A.9  Search Functionality

SAP Fiori Client
A
544
Clicking 
 opens up a menu where you can personalize the home page, hide 
groups, set user preferences, and log out (see Figure A.10).
Figure A.10  User Options
You can create new groups, edit the title and subtitle of an app, and remove apps 
as well by clicking 
, as shown in Figure A.11.
On double-tapping the screen (iOS), SAP Fiori Client opens up an option screen 
that allows you to navigate to a previous screen, refresh the current page, use the 
Home button to navigate to the main page; adjust help, logs, and settings, and 
print.
 
Screen
The Windows 10 options screen can be opened by swiping up from the bottom.

Functions
A.3
545
Figure A.11  Adding Groups
The Settings button in SAP Fiori Client allows you to change the URL. You can 
also set the Log Level to Error, Warn, Info, or Debug, as well as clear the cache, 
and all app settings (see Figure A.12).
Figure A.12  Options

SAP Fiori Client
A
546
You can also view attachments within SAP Fiori Client instead of opening them in 
a separate app. This option currently works in iOS only (see Figure A.13). In Win-
dows and Android devices, attachments are opened using an external application.
Figure A.13  Attachments
 
Useful Links
This list provides some helpful links to references for the following information:
 Supported apps  
A list of all the features that are supported by different OS versions can be viewed at 
http://help.sap.com/fiori-client by navigating to the SAP Fiori Client Feature Matrix.
 Security  
For security configuration information, go to http://help.sap.com/fiori-client and 
choose SAP Fiori Client User Guide  Security Configuration.

547
Appendix B B
Customizing SAP Fiori Launchpad
SAP Fiori Launchpad is a shell page from which all SAP Fiori apps can be accessed. 
SAP Fiori Launchpad can be customized using a tool called the UI Theme Designer. 
The UI Theme Designer isn’t just for SAP Fiori, but also functions as a tool for 
cross-theming scenarios supporting many platforms and technologies. For exam-
ple, when you create a theme for SAP Fiori Launchpad, you can then apply the 
same theme to SAP Fiori applications, Web Dynpro ABAP, Floor Plan Manager 
(FPM), and SAP Business Client.
B.1
UI Theme Designer Overview
The UI Theme Designer is a browser-based tool with a WYSIWYG designer; there-
fore, any change that you make can be viewed immediately in the browser. Using 
the UI Theme Designer, you can create your own themes with your corporate 
identity, corporate colors, and company logo.
Figure B.1 shows the SAP Fiori Launchpad architecture with the UI Theme 
Designer. The top layer shows the UI Theme Designer built on SAPUI5. The UI 
theme repository on the ABAP frontend server contains SAP standard themes and 
custom themes. Anytime you create a custom theme, the UI Theme Designer gen-
erates LESS files, CSS files, and images, which are saved into the repository. These 
files are received via HTTP calls. The application is loaded with the CSS files from 
a chosen custom theme.
Figure B.1  Architecture
UI Theme Designer
SAP NetWeaver AS ABAP
UI Theme Repository
Application
.CSS
.LESS 
.CSS
HTTP

Customizing SAP Fiori Launchpad
B
548
The following are transaction codes you’ll be using while working with the UI 
Theme Designer:
 Transaction UI5/THEME_DESIGNER  
This transaction is used to create, edit, copy, delete, or rebuild/upgrade a 
theme.
 Transaction UI5/THEME_TOOL  
This transaction is used for deleting, exporting, importing, transporting, and to 
analyze theme content.
 Transaction UI Theme Repository  
This tool is used for exporting or importing single files, or it’s used to analyze 
theme content.
Now that you have an overview of the UI Theme Designer, let’s look at how to 
create themes for SAP Fiori Launchpad.
B.2
Creating a Custom Theme
In this section, we’ll show you how to create a new theme for SAP Fiori Launch-
pad and how to apply it to the default template. To do so, follow these steps:
1. Log in to your ABAP frontend server.
2. Run Transaction UI5/THEME_DESIGNER to open the UI Theme Designer.
3. Select a theme, and click Open (see Figure B.2).
Figure B.2  UI Theme Designer

Creating a Custom Theme
B.2
549
 Base Theme
You can create a custom theme only on a base theme. For example, in the previous step, 
to create a new custom theme we started with the SAP Blue Crystal theme.
4. Enter the link to the application. In our example, we want to change the theme 
of SAP Fiori Launchpad, so enter the SAP Fiori Launchpad URL (see Figure B.3). 
You can also provide a name for the application, but this is optional.
Figure B.3  Application Link
The UI Theme Designer provides various options for theming depending on the 
skill 1 (see Figure B.4).
 Quick Theming
 Expert Theming *
 Color palette *
 Manual LESS or CSS editing
* Experimental features, which aren’t for productive use, may be changed by SAP 
at any time.
You can toggle between Original and Preview modes to compare your changes 
with the actual version 2.

Customizing SAP Fiori Launchpad
B
550
You can select between different layouts, that is, Desktop, Mobile, and Tablet, to 
simulate your changes on different device types 3.
Figure B.4  UI Designer Options
Next, let’s look at some of the options in Quick Theming that can help you change 
the look and feel of SAP Fiori Launchpad.
B.2.1
Quick Theming
Using the Quick Theming option, you can change the background colors, fonts, 
and images. The following steps demonstrate how to do this for our custom appli-
cation:
1. First, we’ll add a custom background and logo. Upload the images by clicking 
the button next to the menu (see Figure B.5).
2. After uploading the background image and icon, the Quick Theming tool will 
replace the standard SAP images. Similarly, you can change the text colors, 
fonts, and so on (see Figure B.6).
1

Creating a Custom Theme
B.2
551
Figure B.5  Quick Theming Tool
Figure B.6  Images

Customizing SAP Fiori Launchpad
B
552
B.2.2
Expert Theming
Next, let’s look at the Expert Theming tool. To use this tool, select the Expert
option and then enter “tileiconcolor” in the search box to filter the objects (see 
Figure B.7).
Figure B.7  Expert Theming
You can change the color for the sapUshellTileColor field, and that will change 
the color of the icons in the tile. Your output should reflect all the changes you’ve 
made until now, and you can toggle between the Original and Preview mode 
(see Figure B.8).
Figure B.8  Original and Preview Modes
Before
After

Creating a Custom Theme
B.2
553
B.2.3
Save and Build
The next step is to save and publish the changes to the ABAP frontend server. Fol-
low these steps:
1. Click on Theme  Save & Build (see Figure B.9).
Figure B.9  Save and Build
2. Enter the Theme ID and the Title, and then click OK (see Figure B.10).
Figure B.10  Theme Details
3. After the custom theme is saved and built, you should see a message something 
similar to Figure B.11. Click OK.
Figure B.11  Save Theme

Customizing SAP Fiori Launchpad
B
554
B.2.4
Test the Custom Theme
You’ve successfully created a custom theme and then uploaded to the ABAP front-
end server. Next, you’ll have to test the custom theme by following these steps:
1. Log in to the ABAP frontend sever, and run Transaction UI5/THEME_TOOL.
2. Scroll down or search for your custom theme.
3. Double-click on Info (see Figure B.12).
Figure B.12  Test Theme
4. Copy the URL and paste it at the end of the SAP Fiori Launchpad URL with an
“&” before the URL. Now, let’s test the theme by running the URL. You should
now see the new custom theme applied to your SAP Fiori Launchpad:
https://<host>.<domain>:<port>/sap/bc/ui5_ui5/ui2/ushell/shells/abap/Fio-
rilaunchpad.html?sap-theme=CorporateTheme@http://<host>.<domain>:50000/
sap/public/bc/themes/~client-120/~cache-2VCj7NrjFnVx-uDZ8vm6HqrJVPsI
5. The next step is to overwrite the standard theme with the custom theme, which
you created in the previous steps. Run Transaction /UI2/NWBC_CFG_SAP.

Creating a Custom Theme
B.2
555
6. Set the SAP_FLP parameter value to the custom theme which you created pre-
viously (see Figure B.13).
Figure B.13  Overwite Standard Theme
You should now see SAP Fiori Launchpad with the new theme.
 Important!
Whenever you apply a patch, make sure you check whether your custom theme is work-
ing without any issues. If you come across any issues, you may have to rebuild your 
theme with the UI Theme Designer.


557
Appendix C C
The Author
Anil Bavaraju is an SAP professional with more than 11 
years of experience, primarily on SAP BW and SAP Busi-
nessObjects BI products. His current focus is on SAP HANA 
and SAP Fiori, at his consulting company. Over the past two 
years, he has had the opportunity to help several clients 
implement SAP Fiori. He has experience in managing devel-
opment teams, as well as architecting, developing, and 
deploying highly scalable and available systems, acquired 
while working on global enterprise implementations for 
large, multi-national companies. He is an SAP Certified Solution Consultant for 
SAP Business Intelligence, and also an SAP Certified Application Associate for SAP 
HANA. You can follow Anil on Twitter at @anilbavaraju or connect via LinkedIn 
at https://www.linkedin.com/in/anilbavaraju.


559
Index
A
ABAP
class, 117
environment, 76
servers, 31, 141
ABAP backend
component, 91
copy business role, 180
server, 43, 78, 119, 144, 161, 353, 360
ABAP Data Dictionary, 279, 369
ABAP frontend
components, 477
server, 33, 43, 76, 86, 115, 138, 139, 144, 
161, 360
ABAP Repository, 377, 386, 403
Action, 249
Activate services, 164
Add node, 174
Add-on, 92
Administrator role, 124
Adopting reference, 123
Aggregation, 469
AJAX, 53
All Items Inbox, 478
All Stories, 520
All Views tab, 439
Analytic view, 441
Analytical app, 51, 159, 213, 214, 437
architecture, 52
creating, 442
extending, 463
nonsmart, 214, 255
prerequisites, 215, 441
SAP HANA layer, 463
SAP HANA Live, 440
SAP Smart Business Modeler, 214, 217
UI layer, 463
Android, 30, 45
anno, 427
Annotation file, 420, 428
edit, 436
Anonymity, 41
Apache reverse proxy, 139
API, 53, 66, 328
App
information, 342
parameters, 247
registration, 344
Apple, 44
Application, 27, 121
access file, 453
alias, 186, 355
descriptor file, 453
details, 403
link, 549
parameter, 185
type, 185
Approve Purchase Orders app, 325
Apps reference library, 28, 84, 200, 255
Architecture, 30
Association, 266, 271
Atom Publishing protocol (AtomPub), 66, 262
Attachments, 487, 546
Attribute
add, 412
view, 441
Authentication, 149
process, 155
Authorization, 240
change, 177
default, 112, 174
process, 155
roles, 112
start, 173
Available fields, 428
B
Backend
database, 78
server, 31
BAdI, 496
implementation, 497
standard, 496
user decisions, 502
BAPI, 71

560
Index
Barcode scanner, 537
Base class, 372
BEx query, 301
Blackberry, 45
Blue Crystal, 549
Bootstrapped, 64
BOPF, 297
BOR, 284, 285
Browser, 30, 42
BSP application, 390, 420, 436, 508
Business, 29
engine, 299
function, 127
Business Object Processing 
Framework (BOPF), 296
Business role
assign, 178
copy, 172, 180
custom, 183
edit, 173
C
Cache, 537
Calculation view, 442
activate, 446
copy, 444
create, 444
sales order, 442
Call browser, 107
Cash Flow – Detailed Analysis app, 524
Catalog, 171, 194, 248, 344, 356, 463, 510, 
527
create, 189
group, 542
ID, 253
new, 188
role, 258
CB_SALES_ORDER_SRV, 399
Central hub deployment, 82, 478
Central User Administration (CUA), 156
Certificate request, 148
Change Sales Order app, 172, 183
Check Price and Availability app, 172
Class-load, 54
Client, 30, 42, 76, 141
Coherent, 30
Collaboration, 488
components, 508, 514
Collections, 68
Color palette, 549
Command shell, 59
Comments, 487
Communication channels, 42, 138, 140
security, 138
Communication path, 139
Comparison tile, 225, 226
Component
download, 96
version, 89, 95
Conceptual Schema Definition  
Language (CSDL), 263
Configuration, 105
scope, 186
tile, 517
Configure KPI Drill-Down app, 228
Conflicts, 397
Connector, 202, 414
automatic, 206
manual, 204
Connector Administration Cockpit, 204, 
390, 415
Consume, 70
Consumer
layer, 71
type, 494
Contents, 430
Controller, 56
Create Sales Order app, 162, 172, 181
CRUD, 68, 70, 165, 266
CSS, 53
files, 547
Custom
background, 550
business catalog, 183
role, 194, 246
scope, 186
view, 245
Custom theme, 548
overwrite, 555
save and build, 553
test, 554
Customer Invoices app, 172

Index
561
D
Data
binding, 56
model, 69, 275, 305
replication, 80
visualization tool, 515
Data Model from File, 276
Data Provider Base Class (_DPC), 372
Data Provider Class (DPC), 372
Data Provider Extension Class (_DPC_EXT), 
273, 372
Data source, 458
attribute, 288
map, 288
data-sap-ui-libs, 64
data-sap-ui-resourceroots, 64
data-sap-ui-theme, 64
data-sap-ui-xx-bindingSyntax, 64
Days Sales Outstanding app, 213, 214, 217, 
251, 523
DDIC structure, 279
import, 280
Decimal precision, 222
Decision
keys, 495
text, 495
Default language, 124
Delightful, 30
Delta indexing, 207
Deployment, 82, 118, 340
Design innovation, 29
Destination, 319
Develop Liquidity Plans app, 524
Development, 321
Deviation tile, 225
Dictionary objects, 363
Dimensions, 229
Discuss, 514
Drilldown, 222, 228, 239
Dual tile, 226
Dynamic
data, 503
tile, 192
E
Eclipse IDE, 316
EDMX file, 326, 330
Email, 488
Embedded deployment, 82
advantages, 83
disadvantages, 84
Embedded search, 125, 204, 417
UI services, 126
Embedded service
authorization, 127
Enable, 28
Entity, 266
requests, 267
sets, 68, 263, 265, 272
types, 265, 270, 284
Entity Data Model (EDM), 263
EntityContainer, 265
Evaluation, 221, 459
Event type, 492
Existing Fact Sheet Application, 390, 398, 421
Expert Theming, 549, 552
Explore systems, 92
Extension, 326
class, 372
points, 377, 383
project, 378
views, 383, 467, 469
External service name, 106
F
Facets, 400, 425, 432
Fact sheet app, 50, 128, 158, 389
ABAP backend role, 201
ABAP backend server tasks, 199
annotation file, 427
architecture, 51, 389
authorization, 158
creating, 391, 414, 415
deploy, 403, 435
editor plugin, 390
extending, 407
implementation, 199
run, 210, 434

562
Index
Fact sheet app (Cont.)
Sales Order app, 407
SAPUI5 component, 200
search, 33
template, 324
UI layer, 419, 434
Filter, 236, 485, 498
Flower, 28
Full indexing, 207
G
Gateway client, 263, 374
General section, 503
Generic Interaction Layer, 299
Generic role, 114
GenIL, 299
GetList, 285
GIT, 315
Granted roles, 238
Graphical user interface (GUI), 28
Group, 32, 250, 545
add, 37
by, 486
drag and drop, 37
tile, 513
GUI, 108, 151
H
Hash, 108, 109
key, 169
Hierarchy, 111, 165
Home group, 532
HTML requests, 43
HTML5, 53
HTTP, 141, 147
connection, 140
response, 294
Human values, 29
Hypermedia as the engine of application 
state (HATEOAS), 68
I
ICF nodes, 107, 109
Identity Provider (IDP), 151
Images, 551
Implementation, 76, 119, 122
Implementing class, 499
INA search request, 42
Indexing, 207, 416
clear, 208
keep, 208
real-time, 208
Input parameters, 223, 460
Installation, 86
Instance profile, 145
Integration, 30, 507
Intent, 190, 248, 530
Internet Communication Framework (ICF), 
147, 162
Internet Communication Manager (ICM), 162
Internet-facing scenario, 138
iOS, 30
J
JavaScript, 53, 56
jQuery library, 53
JSON, 56
Juno, 316
K
Kepler, 316
Kerberos/SPNego, 149, 150
Key facts, 400, 430
KPI, 213, 214, 218
configure, 457, 471
create, 458
framework, 130, 216
header, 234
modeler, 89, 130, 442, 457
modeling framework, 52
parameters, 219
tile, 224, 463, 471

Index
563
L
Landscape, 140
Landscape Planner, 92
Launchpad, 246, 406
new, 183
role, 184
LESS files, 547
Lines of business (LOB), 27, 46, 48, 214
Liquidity app, 524
listSize, 480
Load balancing, 41
Local object, 107, 371
Logon language, 124
M
Mac, 30, 44
Maintain services, 168
Maintenance Optimizer, 92
Manage Products app, 325
massAction, 481, 485
Master Detail app, 327
Microsoft Active Directory, 150
Mini chart, 235
Mobile app, 537
Mock data, 337, 351
Model, 55, 206
composition, 275
edit, 409
enhance, 409
node, 410
properties, 410
Model Provider Base Class (_MPC), 273, 372
Model Provider Extension Class (_MPC_EXT), 
273, 372
Model-View-Controller (MVC), 55
Modification Free Fact Sheet Application, 
421, 424
Multi-select, 484
MVC
concept, 55, 56
My Inbox app, 93, 94, 473, 475
All Items, 483
architecture, 476
common issues, 482
My Inbox app (Cont.)
prerequisites, 476
release information, 477
My Marketing Budget app, 47
My Quotations app, 156, 361, 376
N
Namespace, 184
Navigation
properties, 270
section, 504
target, 429
neo-app.json, 427
Network layer, 138
New, 28
field, 413, 433, 470
project, 366, 448
view, 470
New Extension Project
method, 322
option, 325
New Fact Sheet Application, 398, 421
New Project from Sample Application, 324
method, 322
New Project from Template, 61, 323, 327, 
348, 420
method, 322
News tile, 192
Notification tile, 513
Numeric tile, 224
O
Object
method, 491
navigator, 362
OData, 66, 147, 161, 165, 262, 463
activate service, 165, 291
add service, 292
advantages, 66
artifact, 368
consume service, 68
custom service, 380
generate service, 302
import service, 276

564
Index
OData (Cont.)
model, 56
model service, 274
query options, 267
redefine service, 295, 367
register service, 290, 373
requests, 43, 78
SAP HANA Live view, 440
service, 43, 80, 173, 199, 200, 261, 298, 
300, 308, 347, 418, 448, 453
service basics, 262
test service, 293, 373, 456
Online Text Repository (OTR), 426
Open Data Protocol, 66
OpenAJAX, 53
Operational performance 
indicators (OPI), 215
Orion, 61, 315
P
Package, 362, 367, 442
definition, 443
select, 451
Partner structure, 364
Password, 150
Personal Security Environment (PSE), 144
Personalize, 32
PFCG role for business catalog, 171
Ping Federate, 151
Predefined task list, 132
Prerequisites, 75
Preview, 337, 549
Private view, 439, 441
Product System Editor, 92
Products, 69
Product-specific UI, 81
Profile, 123
Profit Analysis app, 213, 255, 258
Project
activate, 455
create, 283
properties, 426
using a template, 348
project.json, 427
Properties, 428
add, 481
Propose mapping, 288
Protocol, 139
Prototyping, 71
Q
Quality of Protection (QOP), 146
Query view, 439, 441
extension, 469
Quick Theming, 549, 550
quickAction, 481
R
Raw data, 447
Redefinition, 275
Refresh, 484
Registered Model (_MDL), 273, 372
Registered Service (_SRV), 273, 372
Release Campaigns app, 47
Renew, 28
Representational State Transfer, 67
Resource identification, 68
Responsive, 29
REST, 66, 70, 261
Reuse view, 439, 441, 469
Reverse proxy, 30, 40, 138, 141
server, 78
RFC
connection, 43, 119, 140, 146
generation, 274
RFC/BOR interface, 281
Risk category, 418, 433
Role-based, 29
Roles, 406
administrators, 516
assign, 467
change, 195
copy, 172
end user, 517
maintenance, 123
technical, 516
template, 123

Index
565
Runtime
artifacts, 273, 306
objects, 289, 370
S
Sales Order app, 203, 204, 210, 542
Sales Order Fulfillment app, 259
Sales Order Tracker app, 358
SalesDistrict, 469
SalesOrderQuery, 468
SAML, 149
authentication, 152
Sample application, 325
SAP Advanced Planning and Optimization 
(SAP APO), 104
SAP Analytics Foundation, 104
SAP Basis, 134
SAP Business Process Management, 475
SAP Business Suite, 51, 52, 75, 77, 103, 
156, 464
integration, 119
layer, 71, 358
powered by SAP HANA, 214
SAP Business Warehouse
query, 299, 508, 532
SAP Business Workflow, 473, 474, 475
SAP BusinessObjects Design Studio, 215, 
524, 527
SAP Cryptographic Library, 144
SAP Customer Relationship Management 
(SAP CRM), 104
SAP Enterprise Portal, 33
SAP Enterprise Warehouse Management 
(SAP EWM), 104
SAP ERP, 104, 375
SAP Event Management (SAP EM), 104
SAP Financial Closing Cockpit (SAP FCC), 104
SAP Fiori, 75
app, 538
apps reference library, 84
architecture, 30, 437
basics, 27
communication channels, 42
configuration, 75
history, 27
SAP Fiori (Cont.)
installation, 75
integration, 30
landscape, 140
name meaning, 28
related technologies, 53
SAP ERP apps, 90
security, 137
shipments, 46
supported browsers and OS, 43
template, 348
timeline, 46
user roles, 47, 48
UX design principles, 29
workflow, 473
SAP Fiori Client, 537
download and login, 537
functions, 541
security, 546
tips, 540
SAP Fiori Launchpad, 30, 32, 105, 106, 108, 
134, 137, 156, 162, 182, 217, 218, 228, 
258, 386, 457, 461, 508, 539
add tiles, 502
architecture, 547
change theme, 39
custom theme, 33, 548
customization, 547
deployment, 33
designer, 406, 480
embedded search, 125
features, 34
homepage, 32, 34
implementation, 34
keyboard shortcuts, 40
login screen, 115
My Inbox app, 481
publish app, 354
responsiveness, 33
search, 33
user options, 544
SAP Foundation (SAP FND), 104
SAP Gateway, 33, 66, 77, 82, 118, 134, 156, 
157, 161, 163, 216, 261, 306, 315, 476
architecture, 71
capabilities, 70
component version, 86

566
Index
SAP Gateway (Cont.)
integration, 119
layer, 71, 359
SAP Business Suite, 71
SAP Gateway Service Builder, 261, 269, 366
SAP Governance, Risk and Compliance 
(SAP GRC), 104
SAP HANA, 51, 76, 78, 151, 153, 159, 236
application development platform, 72
Application Lifecycle Manager, 216
connection, 60
data modeling, 442
database, 31
role, 257
server, 103, 216
view, 220
SAP HANA Client, 442
SAP HANA Cloud Cockpit, 315, 326
SAP HANA Cloud Connector, 315, 320
SAP HANA Cloud Platform, 34, 314, 317, 340
SAP HANA Live, 72, 76, 81, 103, 437
advantages, 441
extend view, 464
extensibility tool, 464
package, 437
views, 105, 438, 442
SAP HANA Live Browser, 104, 439
SAP HANA Studio, 129, 238, 442
extensibility tool, 464
SAP HANA XS, 31, 41, 43, 72, 75, 103, 139, 
147, 161, 437, 440
analytical apps, 72
architecture, 79
build apps, 72
engine, 54
project, 449
SAP Jam, 329, 475, 508
collaboration components, 514
tiles, 513
SAP logon ticket, 149, 153
SAP Lumira, 515, 520
configuration, 515
configuration tile, 517
KPI tile drilldown, 523
stories, 516
tiles, 519
SAP Lumira Cloud, 515
SAP Lumira Server, 515
SAP Maintenance Planner, 92, 93, 94
SAP Marketplace, 95
SAP Mobile, 539
SAP NetWeaver, 476
component, 86
version, 88
SAP NetWeaver AS ABAP, 54
SAP NetWeaver AS Java, 54
SAP NetWeaver Enterprise Search, 408
SAP Product Lifecycle Management (SAP 
PLM), 104
SAP S/4HANA Finance, 104, 214
SAP Screen Personas, 28
SAP Smart Business, 216
app, 214
component, 81
framework, 131
products, 104
SAP S/4HANA Finance, 214
SAP Smart Business Modeler, 128, 130, 213, 
242, 437
SAP Software Download Center, 96
SAP Transportation Management 
(SAP TM), 104
SAP UX strategy, 28
SAP Web Dispatcher, 31, 40, 50, 78, 102, 139, 
141, 148, 216, 459
capabilities, 41
uses, 41
SAP Web IDE, 57, 313, 315, 347, 378, 
420, 424
advantages, 315
connection, 60
create, 322, 323
deployment, 340
development, 321, 328
environment, 314
file, 58
folder, 59
import an application, 326
local version, 57
preview, 337
SAP HANA Cloud Platform, 316
SAP_ESH_LOCAL_ADMIN, 203
SAP_ESH_SEARCH, 203
sap.ui.ControllerExtensions, 384

Index
567
sap.ui.viewExtensions, 384
sap.ui.viewModifications, 384
sap.ui.viewReplacements, 384
SAPUI5, 28, 53, 147, 239, 256, 315, 323, 547
ABAP Repository, 326
application, 163
architecture, 54
build app, 66
component, 200
control library, 161
create app, 61
data binding, 56
features, 53
layer, 359
preview, 65
SAP Fiori Launchpad, 32
script, 64
sapUshellTileColor, 552
Scaling factor, 221
Scenario definition, 493
Scenario-specific inbox, 488
Schedule indexing, 415
Scope, 137
Search, 33, 38, 484, 543
Search and Analytics Modeler, 390, 392, 393, 
395, 408
Search connector, 159, 202, 393, 408
indexing, 207
Search for Software, 96
Search help, 281, 283
Search model, 202, 390
create, 392
extend, 408
software components, 392
Secure
network layer, 144
protocol, 146
Secure Network Communications, 140
Secure Sockets Layer (SSL), 140, 143
Security, 41, 121, 137
session protection, 147
Security Assertion Markup Language, 151
Self-service scenarios, 46
Semantic, 248
layer, 469
object, 220, 356, 529, 530
Service
catalog, 293
development, 274
document, 263, 264
generation, 274
implementation, 272, 275
maintenance, 273, 275, 291
metadata document, 263
Share, 488
dialog, 515
Shop app, 325
Simple, 30
Simulator, 337, 339
Single sign-on, 144
Skill matrix, 359
SNC, 146
connection, 146
snc/enable, 145
snc/gssapi_lib, 145
snc/identity/as, 145
snc/r3int_rfc_secure, 145
Social media
catalog, 507, 509, 512
tile, 508
Social Media Integration, 508
Social timeline, 514
Software components, 392, 395
customer-specific, 395
Software-as-a-Service (SaaS), 34
sortBy, 481
Sorting, 485
Source code editor, 431
SSL encryption, 41
SSO, 149, 155
authentication, 153
Standard view, 445
Static tile, 191, 192
Story, 521
Subscription, 318
Support package, 95
download, 98
upload, 98
Support Package Manager, 95
System
alias, 121, 122, 478
status, 87
tracks, 93

568
Index
T
Table
TADIR, 175
USOBHASH, 108
Target, 190, 460, 531
mapping, 189, 248, 356, 406, 407
Task, 134
consumption model, 475
decision, 494
definition, 494
list, 154
processing, 479
quotation, 496
Technical service name, 166
Technology, 29
Template, 324, 400, 420, 421
create project, 348
Theming, 53
Threshold, 460
Tiles, 32, 507
activate and configure, 460
add, 36, 528
All Items, 504
All Stories, 519
catalog, 32, 35, 36, 243, 252, 512, 519
configuration, 343
format, 226
KPI Drilldown, 519
new, 357
parameters, 227
remove, 35
static, 519
Track Sales Order app, 172
Transaction
/IWFND/MAINT_SERVICE, 106, 166, 262, 
292, 306, 373, 479
ESH_COCKPIT, 202, 415
ESH_MODELER, 392
ESH_SEARCH, 209, 417
LPD_CUST, 183, 354
PFCG (Role Maintenance), 112, 123, 130, 
158, 172, 178, 180, 195, 242, 252, 511, 
518, 531
RZ10, 145
SAINT (SAP Add-On Installation Tool), 95
SBWP, 483
Transaction (Cont.)
SE01, 187
SE11 (ABAP Dictionary), 360
SE16, 108, 169
SE18, 496
SE80 (ABAP Object Navigator), 360, 362, 
393, 404, 436
SEGW (Gateway Service Builder), 269, 
283, 360
SICF (Maintain Services), 110, 115, 125, 240, 
354, 479, 524
SM59, 119, 146
SMT1, 121
SPAM, 98
SPRO, 118, 494
STC01 (ABAP Task Manager), 132, 206
STC02, 133
SU01, 115, 127, 181
UI5/THEME_DESIGNER, 548
UI5/THEME_TOOL, 548, 554
VA23, 375
Transactional app, 48, 103, 158, 347
ABAP backend roles, 180
ABAP frontend roles, 170
architecture, 359
components, 49
create, 347
deploy, 353
details, 353
extend, 358, 359, 360
OData services, 165
prerequisites, 161
publish, 354
run, 181
SAPUI5 component, 162
template, 324
test, 351
Transport Layer Security (TLS), 140
Transport request, 186, 394
Trend tile, 225
U
UI
add-on, 77
control library, 53
development toolkit, 53

Index
569
UI Theme Designer, 33, 547, 548, 549
options, 550
transaction code, 548
UI Theme Repository, 548
Uniform Resource Identifier, 66
Union, 469
Universal Work List (UWL), 474
URI, 262, 263, 295
URL, 32
rewriting, 147
User, 254
authentication, 149
authorization, 155, 156
experience, 27
maintenance, 115, 129
management, 155
mapping, 153
preferences, 39
role, 181
USOBHASH, 169
UX, 27
benefits, 29
design principles, 29
design services, 28
strategy, 28
V
Value measure, 459
Values help view, 438
Variant, 222
Views, 56
create, 462
extend, 383
replace, 469
Virtual data model (VDM), 31, 72, 103, 213, 
437, 438, 441
reuse content, 53
Visualization, 231
W
Web
acceleration, 41
browser, 139
Web application
firewalls, 41
security, 41
Web Dynpro, 32, 71, 128
What You See is What You Get (WYSIWYG), 
328, 547
Windows, 30, 43
Workflow, 473
basics, 473
builder, 489, 490
custom, 475
fields, 492
ID, 495
scenarios, 493
standard, 478
template, 474, 488
Workspace, 450
X
X.509 certificate, 154
XML, 56
code, 435
view, 383
XSL Transformation (XSLT), 435


i
Service Pages
The following sections contain notes on how you can contact us.
Praise and Criticism
We hope that you enjoyed reading this book. If it met your expectations, please 
do recommend it. If you think there is room for improvement, please get in touch 
with the editor of the book: sarahf@rheinwerk-publishing.com. We welcome every 
suggestion for improvement but, of course, also any praise!
You can also share your reading experience via Twitter, Facebook, or email.
Supplements
Supplements (sample code, exercise materials, lists, and so on) are provided in your 
online library and on the web catalog page for this book. You can directly navigate 
to this page using the following link: http://www.sap-press.com/3883. Should we 
learn about typos that alter the meaning or content errors, we will provide a list 
with corrections there, too.
Technical Issues
If you experience technical issues with your e-book or e-book account at SAP 
PRESS, please feel free to contact our reader service: support@rheinwerk-publishing.
com.
About Us and Our Program
The website http://www.sap-press.com provides detailed and first-hand information 
on our current publishing program. Here, you can also easily order all of our books 
and e-books. Information on Rheinwerk Publishing Inc. and additional contact 
options can also be found at http://www.sap-press.com.

ii
Legal Notes
This section contains the detailed and legally binding usage conditions for this e-book.
Copyright Note
This publication is protected by copyright in its entirety. All usage and exploitation 
rights are reserved by the author and Rheinwerk Publishing; in particular the right 
of reproduction and the right of distribution, be it in printed or electronic form.
© 2016 by Rheinwerk Publishing, Inc., Boston (MA)
Your Rights as a User
You are entitled to use this e-book for personal purposes only. In particular, you 
may print the e-book for personal use or copy it as long as you store this copy on 
a device that is solely and personally used by yourself. You are not entitled to any 
other usage or exploitation.
In particular, it is not permitted to forward electronic or printed copies to third 
parties. Furthermore, it is not permitted to distribute the e-book on the Internet, 
in intranets, or in any other way or make it available to third parties. Any public 
exhibition, other publication, or any reproduction of the e-book beyond personal 
use are expressly prohibited. The aforementioned does not only apply to the e-book 
in its entirety but also to parts thereof (e.g., charts, pictures, tables, sections of text).
Copyright notes, brands, and other legal reservations as well as the digital watermark 
may not be removed from the e-book.
Digital Watermark
This e-book copy contains a digital watermark, a signature that indicates which 
person may use this copy. If you, dear reader, are not this person, you are violating 
the copyright. So please refrain from using this e-book and inform us about this 
violation. A brief email to info@rheinwerk-publishing.com is sufficient. Thank you!

iii 
Trademarks
The common names, trade names, descriptions of goods, and so on used in this 
publication may be trademarks without special identification and subject to legal 
regulations as such.
All of the screenshots and graphics reproduced in this book are subject to copyright 
© SAP SE, Dietmar-Hopp-Allee 16, 69190 Walldorf, Germany. SAP, the SAP logo, 
mySAP, mySAP.com, SAP Business Suite, SAP NetWeaver, SAP R/3, SAP R/2, SAP 
B2B, SAPtronic, SAPscript, SAP BW, SAP CRM, SAP EarlyWatch, SAP ArchiveLink, 
SAP HANA, SAP GUI, SAP Business Workflow, SAP Business Engineer, SAP Business 
Navigator, SAP Business Framework, SAP Business Information Warehouse, SAP 
interenterprise solutions, SAP APO, AcceleratedSAP, InterSAP, SAPoffice, SAPfind, 
SAPfile, SAPtime, SAPmail, SAP-access, SAP-EDI, R/3 Retail, Accelerated HR, Acceler­
ated HiTech, Accelerated Consumer Products, ABAP, ABAP/4, ALE/WEB, Alloy, BAPI, 
Business Framework, BW Explorer, Duet, Enjoy-SAP, mySAP.com e-business platform, 
mySAP Enterprise Portals, RIVA, SAPPHIRE, TeamSAP, Webflow, and SAP PRESS are 
registered or unregistered trademarks of SAP SE, Walldorf, Germany.
Limitation of Liability
Regardless of the care that has been taken in creating texts, figures, and programs, 
neither the publisher nor the author, editor, or translator assume any legal respon­
sibility or any liability for possible errors and their consequences.

