© 2019 MathByte Academy

Dictionary Elements
basic structure of dictionary elements:
key
:
value
value
à any Python object
integer
custom class or instance
module
function
any Python object…
key
à any hashable object
not all objects are hashable
lists are never hashable
strings are hashable
àhash tables require hash of an object to be constant
(for the life of the program)
roughly:
immutable objects are hashable
mutable objects are not hashable
more subtle than that…
© 2019 MathByte Academy

Hashable Objects
Python function: hash(obj)
à some integer (truncated based on Python build: 32-bit, 64-bit)
sys.hash_info.width
à Exception
TypeError: unhashable type
à list
à mutable collection
à tuples
à not hashable
à immutable collection
à hashable only if all elements are also hashable
à strings
à immutable collection
à hashable
à int, float, complex, binary, Decimal, Fraction, …
à immutable
à hashable
à set, dictionary
à mutable collections
à not hashable
à frozenset
à immutable collection
à elements are required to be hashable
à hashable
à functions
à immutable
à hashable
à custom classes and objects
à maybe
© 2019 MathByte Academy

Requirements
If an object is hashable:
à the hash of the object must be an integer value
à if two objects compare equal (==), the hashes must also be equal
later à creating our own custom hashes
à we will also need to conform to these rules
Important:
two objects that do not compare equal
may still have the same hash
(hash collision)
à more hash collisions à slower dictionaries
© 2019 MathByte Academy

Creating Dictionaries: Literals
This is a very common way of creating dictionaries
{ key1: value1,
key2: value2,
key3: value3 }
any hashable object
any object
{'john': ['John', 'Cleese', 78],
(0, 0): 'origin',
'repr': lambda x: x ** 2,
'eric': {'name': 'Eric Idle',
'age': 75}
}
© 2019 MathByte Academy

Creating Dictionaries: Constructor
dict(key1=value1, key2=value2, key3=value3)
must be a valid identifier name
(think variable, function, class name, etc)
any object
dictionary key will then be a string of that name
dict(john=['John', 'Cleese', 78],
repr=lambda x: x ** 2,
eric={'name': 'Eric Idle',
'age': 75},
twin=dict(name='Eric Idle', age=75)
)
{'john': ['John', 'Cleese', 78],
(0, 0): 'origin',
'repr': lambda x: x ** 2,
'eric': {'name': 'Eric Idle',
'age': 75}
}
© 2019 MathByte Academy

Creating Dictionaries: Comprehensions
Just like we can build lists using list comprehensions
or generators using generator expressions (comprehension syntax)
à build dictionaries using dictionary comprehensions
à same basic syntax
à enclosed in {}
à elements must be specified as   key: value
{str(i): i ** 2 for i in range(1, 5)} à {'1': 1, '2': 4, '3': 9, '4': 16}
{str(i): i ** 2 
for i in range(1, 5)
if i % 2 == 0}
à {'2': 4, '4': 16}
(if not, you'll be creating a set!)
© 2019 MathByte Academy

Soapbox!
d = {i: i** 2 for i in range(1, n)}
vs
d = {}
for i in range(1, n):
d[i] = i ** 2
But when things get more complex…
d = {}
url = 'http://localhost/user/{id}'
for i in range(n):
response = requests.get(url.format(id=i))
user_json = response.json()
user_age = int(user_json['age'])
if user_age >= 18:
user_name = user_json['fullName'].strip()
user_ssn = user_json['ssn']
d[user_ssn] = user_name
© 2019 MathByte Academy

Creating Dictionaries: fromkeys()
à creates a dictionary with specified keys all assigned the same value
d = dict.fromkeys(iterable, value)
à class method on dict
any iterable
contains the keys
hashable elements
all set to same value
optional
à None if not provided
d = dict.fromkeys(['a', (0,0), 100], 'N/A')
à {'a': 'N/A', (0,0): 'N/A', 100: 'N/A'}
d = dict.fromkeys((i**2 for i in range(1, 5)), False)
à {1: False, 4: False, 9: False, 16: False}
© 2019 MathByte Academy

Code
© 2019 MathByte Academy

