
Undergraduate Topics in Computer Science

Undergraduate Topics in Computer Science (UTiCS) delivers high-quality instructional content for un-
dergraduates studying in all areas of computing and information science. From core foundational and
theoretical material to ﬁnal-year topics and applications, UTiCS books take a fresh, concise, and mod-
ern approach and are ideal for self-study or for a one- or two-semester course. The texts are all authored
by established experts in their ﬁelds, reviewed by an international advisory board, and contain numer-
ous examples and problems. Many include fully worked solutions.
For further volumes:
www.springer.com/series/7592

John Vince
Mathematics for Computer
Graphics
Fourth Edition

Professor Emeritus John Vince, MTech, PhD,
DSc, CEng, FBCS
Bournemouth University
Bournemouth, UK
http://www.johnvince.co.uk
Series Editor
Ian Mackie
Advisory Board
Samson Abramsky, University of Oxford, Oxford, UK
Karin Breitman, Pontiﬁcal Catholic University of Rio de Janeiro, Rio de Janeiro, Brazil
Chris Hankin, Imperial College London, London, UK
Dexter Kozen, Cornell University, Ithaca, USA
Andrew Pitts, University of Cambridge, Cambridge, UK
Hanne Riis Nielson, Technical University of Denmark, Kongens Lyngby, Denmark
Steven Skiena, Stony Brook University, Stony Brook, USA
Iain Stewart, University of Durham, Durham, UK
ISSN 1863-7310
ISSN 2197-1781 (electronic)
Undergraduate Topics in Computer Science
ISBN 978-1-4471-6289-6
ISBN 978-1-4471-6290-2 (eBook)
DOI 10.1007/978-1-4471-6290-2
Springer London Heidelberg New York Dordrecht
Library of Congress Control Number: 2013957059
© Springer-Verlag London 2001, 2006, 2010, 2014
This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of
the material is concerned, speciﬁcally the rights of translation, reprinting, reuse of illustrations, recitation,
broadcasting, reproduction on microﬁlms or in any other physical way, and transmission or information
storage and retrieval, electronic adaptation, computer software, or by similar or dissimilar methodology
now known or hereafter developed. Exempted from this legal reservation are brief excerpts in connection
with reviews or scholarly analysis or material supplied speciﬁcally for the purpose of being entered
and executed on a computer system, for exclusive use by the purchaser of the work. Duplication of
this publication or parts thereof is permitted only under the provisions of the Copyright Law of the
Publisher’s location, in its current version, and permission for use must always be obtained from Springer.
Permissions for use may be obtained through RightsLink at the Copyright Clearance Center. Violations
are liable to prosecution under the respective Copyright Law.
The use of general descriptive names, registered names, trademarks, service marks, etc. in this publication
does not imply, even in the absence of a speciﬁc statement, that such names are exempt from the relevant
protective laws and regulations and therefore free for general use.
While the advice and information in this book are believed to be true and accurate at the date of pub-
lication, neither the authors nor the editors nor the publisher can accept any legal responsibility for any
errors or omissions that may be made. The publisher makes no warranty, express or implied, with respect
to the material contained herein.
Printed on acid-free paper
Springer is part of Springer Science+Business Media (www.springer.com)

This book is dedicated to my wife, Heidi

Preface
To begin with, this book is not for mathematicians. They would probably raise their
hands in horror about the level of mathematical rigour I have employed, or probably
not employed! This book is for people working in computer graphics who know
that they have to use mathematics in their day-to-day work, and don’t want to get
too embroiled in axioms, truths, and Platonic realities.
This book originally appeared as part of Springer’s excellent “Essential” series,
and was revised to include chapters on barycentric coordinates and worked exam-
ples. The third edition included a new chapter on geometric algebra, which I have
written about in my books Geometric Algebra for Computer Graphics and Geo-
metric Algebra: An Algebraic System for Computer Games and Animation. In this
fourth edition, I have reviewed the entire book and included chapters on differential
and integral calculus, which I have written about in Calculus for Computer Graph-
ics.
Whilst writing this book I have borne in mind what it was like for me when I
was studying different areas of mathematics for the ﬁrst time. In spite of reading
and rereading an explanation several times it could take days before “the penny
dropped” and a concept became apparent. Hopefully, the reader will ﬁnd the fol-
lowing explanations useful in developing their understanding of these speciﬁc areas
of mathematics, and enjoy the sound of various pennies dropping!
I would like to thank Ben Bishop, Senior Editorial Assistant, for his valuable
editorial advice. I am also indebted to Beverley Ford, Editorial Director, Springer
UK, and Helen Desmond, Editor for Computer Science, for persuading me to give
up holidays and hobbies in order to complete another book!
John Vince
Ashtead, UK
January 2014
vii

Contents
1
Mathematics
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1
1.1
Aims and Objectives of This Book . . . . . . . . . . . . . . . .
1
1.2
Who Should Read This Book? . . . . . . . . . . . . . . . . . .
1
1.3
Assumptions Made in This Book . . . . . . . . . . . . . . . . .
1
1.4
How to Use the Book . . . . . . . . . . . . . . . . . . . . . . .
2
1.5
Is Mathematics Difﬁcult? . . . . . . . . . . . . . . . . . . . . .
2
2
Numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3
2.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3
2.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3
2.3
Set Notation
. . . . . . . . . . . . . . . . . . . . . . . . . . .
3
2.4
Positional Number System . . . . . . . . . . . . . . . . . . . .
4
2.5
Natural Numbers . . . . . . . . . . . . . . . . . . . . . . . . .
4
2.6
Prime Numbers . . . . . . . . . . . . . . . . . . . . . . . . . .
4
2.7
Integer Numbers . . . . . . . . . . . . . . . . . . . . . . . . .
5
2.8
Rational Numbers
. . . . . . . . . . . . . . . . . . . . . . . .
5
2.9
Irrational Numbers . . . . . . . . . . . . . . . . . . . . . . . .
6
2.10
Real Numbers . . . . . . . . . . . . . . . . . . . . . . . . . . .
6
2.11
The Number Line . . . . . . . . . . . . . . . . . . . . . . . . .
6
2.12
Complex Numbers . . . . . . . . . . . . . . . . . . . . . . . .
6
2.13
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9
3
Algebra
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
3.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
3.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
3.3
Algebraic Laws . . . . . . . . . . . . . . . . . . . . . . . . . .
12
3.3.1
Associative Law . . . . . . . . . . . . . . . . . . . . .
13
3.3.2
Commutative Law . . . . . . . . . . . . . . . . . . . .
13
3.3.3
Distributive Law
. . . . . . . . . . . . . . . . . . . .
14
3.4
Solving the Roots of a Quadratic Equation . . . . . . . . . . . .
14
3.5
Indices
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
15
ix

x
Contents
3.5.1
Laws of Indices . . . . . . . . . . . . . . . . . . . . .
16
3.6
Logarithms . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16
3.7
Further Notation
. . . . . . . . . . . . . . . . . . . . . . . . .
18
3.8
Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
18
3.8.1
Explicit and Implicit Equations . . . . . . . . . . . . .
19
3.8.2
Function Notation . . . . . . . . . . . . . . . . . . . .
19
3.8.3
Intervals . . . . . . . . . . . . . . . . . . . . . . . . .
20
3.8.4
Function Domains and Ranges . . . . . . . . . . . . .
21
3.9
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21
4
Trigonometry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
4.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
4.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
4.3
Units of Angular Measurement . . . . . . . . . . . . . . . . . .
23
4.4
The Trigonometric Ratios
. . . . . . . . . . . . . . . . . . . .
24
4.4.1
Domains and Ranges . . . . . . . . . . . . . . . . . .
26
4.5
Inverse Trigonometric Ratios . . . . . . . . . . . . . . . . . . .
27
4.6
Trigonometric Identities . . . . . . . . . . . . . . . . . . . . .
29
4.7
The Sine Rule . . . . . . . . . . . . . . . . . . . . . . . . . . .
29
4.8
The Cosine Rule . . . . . . . . . . . . . . . . . . . . . . . . .
30
4.9
Compound Angles . . . . . . . . . . . . . . . . . . . . . . . .
30
4.10
Perimeter Relationships
. . . . . . . . . . . . . . . . . . . . .
31
4.11
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
31
5
Coordinate Systems
. . . . . . . . . . . . . . . . . . . . . . . . . .
33
5.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33
5.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33
5.3
The Cartesian Plane
. . . . . . . . . . . . . . . . . . . . . . .
34
5.4
Function Graphs
. . . . . . . . . . . . . . . . . . . . . . . . .
34
5.5
Geometric Shapes
. . . . . . . . . . . . . . . . . . . . . . . .
35
5.5.1
Polygonal Shapes . . . . . . . . . . . . . . . . . . . .
35
5.5.2
Areas of Shapes . . . . . . . . . . . . . . . . . . . . .
36
5.6
Theorem of Pythagoras in 2D
. . . . . . . . . . . . . . . . . .
37
5.7
3D Cartesian Coordinates
. . . . . . . . . . . . . . . . . . . .
37
5.7.1
Theorem of Pythagoras in 3D . . . . . . . . . . . . . .
38
5.7.2
3D Polygons . . . . . . . . . . . . . . . . . . . . . . .
39
5.7.3
Euler’s Rule . . . . . . . . . . . . . . . . . . . . . . .
39
5.8
Polar Coordinates . . . . . . . . . . . . . . . . . . . . . . . . .
39
5.9
Spherical Polar Coordinates . . . . . . . . . . . . . . . . . . .
40
5.10
Cylindrical Coordinates
. . . . . . . . . . . . . . . . . . . . .
41
5.11
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
42
6
Vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
43
6.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
43
6.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
43
6.3
2D Vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . .
44

Contents
xi
6.3.1
Vector Notation . . . . . . . . . . . . . . . . . . . . .
44
6.3.2
Graphical Representation of Vectors . . . . . . . . . .
45
6.3.3
Magnitude of a Vector
. . . . . . . . . . . . . . . . .
46
6.4
3D Vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . .
47
6.4.1
Vector Manipulation
. . . . . . . . . . . . . . . . . .
48
6.4.2
Scaling a Vector . . . . . . . . . . . . . . . . . . . . .
48
6.4.3
Vector Addition and Subtraction . . . . . . . . . . . .
49
6.4.4
Position Vectors . . . . . . . . . . . . . . . . . . . . .
49
6.4.5
Unit Vectors . . . . . . . . . . . . . . . . . . . . . . .
50
6.4.6
Cartesian Vectors . . . . . . . . . . . . . . . . . . . .
51
6.4.7
Vector Products . . . . . . . . . . . . . . . . . . . . .
52
6.4.8
Scalar Product . . . . . . . . . . . . . . . . . . . . . .
52
6.4.9
The Dot Product in Lighting Calculations
. . . . . . .
54
6.4.10
The Scalar Product in Back-Face Detection
. . . . . .
55
6.4.11
The Vector Product . . . . . . . . . . . . . . . . . . .
56
6.4.12
The Right-Hand Rule . . . . . . . . . . . . . . . . . .
60
6.5
Deriving a Unit Normal Vector for a Triangle . . . . . . . . . .
61
6.6
Areas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
61
6.6.1
Calculating 2D Areas . . . . . . . . . . . . . . . . . .
62
6.7
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
63
7
Transforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
65
7.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
65
7.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
65
7.3
2D Transforms . . . . . . . . . . . . . . . . . . . . . . . . . .
66
7.3.1
Translation
. . . . . . . . . . . . . . . . . . . . . . .
66
7.3.2
Scaling
. . . . . . . . . . . . . . . . . . . . . . . . .
66
7.3.3
Reﬂection . . . . . . . . . . . . . . . . . . . . . . . .
66
7.4
Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
67
7.4.1
Systems of Notation . . . . . . . . . . . . . . . . . . .
70
7.4.2
The Determinant of a Matrix . . . . . . . . . . . . . .
70
7.5
Homogeneous Coordinates . . . . . . . . . . . . . . . . . . . .
71
7.5.1
2D Translation
. . . . . . . . . . . . . . . . . . . . .
72
7.5.2
2D Scaling
. . . . . . . . . . . . . . . . . . . . . . .
72
7.5.3
2D Reﬂections
. . . . . . . . . . . . . . . . . . . . .
73
7.5.4
2D Shearing . . . . . . . . . . . . . . . . . . . . . . .
75
7.5.5
2D Rotation . . . . . . . . . . . . . . . . . . . . . . .
76
7.5.6
2D Scaling
. . . . . . . . . . . . . . . . . . . . . . .
78
7.5.7
2D Reﬂection . . . . . . . . . . . . . . . . . . . . . .
79
7.5.8
2D Rotation About an Arbitrary Point . . . . . . . . .
79
7.6
3D Transforms . . . . . . . . . . . . . . . . . . . . . . . . . .
80
7.6.1
3D Translation
. . . . . . . . . . . . . . . . . . . . .
80
7.6.2
3D Scaling
. . . . . . . . . . . . . . . . . . . . . . .
81
7.6.3
3D Rotation . . . . . . . . . . . . . . . . . . . . . . .
81
7.6.4
Gimbal Lock
. . . . . . . . . . . . . . . . . . . . . .
85

xii
Contents
7.6.5
Rotating About an Axis . . . . . . . . . . . . . . . . .
86
7.6.6
3D Reﬂections
. . . . . . . . . . . . . . . . . . . . .
87
7.7
Change of Axes . . . . . . . . . . . . . . . . . . . . . . . . . .
87
7.7.1
2D Change of Axes . . . . . . . . . . . . . . . . . . .
88
7.7.2
Direction Cosines . . . . . . . . . . . . . . . . . . . .
89
7.7.3
3D Change of Axes . . . . . . . . . . . . . . . . . . .
90
7.8
Positioning the Virtual Camera . . . . . . . . . . . . . . . . . .
90
7.8.1
Direction Cosines . . . . . . . . . . . . . . . . . . . .
91
7.8.2
Euler Angles
. . . . . . . . . . . . . . . . . . . . . .
93
7.9
Rotating a Point About an Arbitrary Axis . . . . . . . . . . . .
96
7.9.1
Matrices . . . . . . . . . . . . . . . . . . . . . . . . .
96
7.9.2
Quaternions . . . . . . . . . . . . . . . . . . . . . . .
103
7.9.3
Adding and Subtracting Quaternions . . . . . . . . . .
104
7.9.4
Multiplying Quaternions . . . . . . . . . . . . . . . .
104
7.9.5
Pure Quaternion . . . . . . . . . . . . . . . . . . . . .
105
7.9.6
The Inverse Quaternion . . . . . . . . . . . . . . . . .
105
7.9.7
Unit Quaternion . . . . . . . . . . . . . . . . . . . . .
106
7.9.8
Rotating Points About an Axis . . . . . . . . . . . . .
106
7.9.9
Roll, Pitch and Yaw Quaternions . . . . . . . . . . . .
109
7.9.10
Quaternions in Matrix Form
. . . . . . . . . . . . . .
111
7.9.11
Frames of Reference
. . . . . . . . . . . . . . . . . .
112
7.10
Transforming Vectors . . . . . . . . . . . . . . . . . . . . . . .
113
7.11
Determinants . . . . . . . . . . . . . . . . . . . . . . . . . . .
114
7.12
Perspective Projection
. . . . . . . . . . . . . . . . . . . . . .
118
7.13
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
120
8
Interpolation
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
121
8.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
121
8.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
121
8.3
Linear Interpolation
. . . . . . . . . . . . . . . . . . . . . . .
121
8.4
Non-linear Interpolation . . . . . . . . . . . . . . . . . . . . .
124
8.4.1
Trigonometric Interpolation . . . . . . . . . . . . . . .
124
8.4.2
Cubic Interpolation . . . . . . . . . . . . . . . . . . .
125
8.5
Interpolating Vectors . . . . . . . . . . . . . . . . . . . . . . .
130
8.6
Interpolating Quaternions
. . . . . . . . . . . . . . . . . . . .
133
8.7
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
134
9
Curves and Patches . . . . . . . . . . . . . . . . . . . . . . . . . . .
135
9.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
135
9.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
135
9.3
The Circle . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
135
9.4
The Ellipse . . . . . . . . . . . . . . . . . . . . . . . . . . . .
136
9.5
Bézier Curves . . . . . . . . . . . . . . . . . . . . . . . . . . .
136
9.5.1
Bernstein Polynomials
. . . . . . . . . . . . . . . . .
136
9.5.2
Quadratic Bézier Curves
. . . . . . . . . . . . . . . .
140
9.5.3
Cubic Bernstein Polynomials . . . . . . . . . . . . . .
141

Contents
xiii
9.6
A Recursive Bézier Formula . . . . . . . . . . . . . . . . . . .
143
9.7
Bézier Curves Using Matrices . . . . . . . . . . . . . . . . . .
144
9.7.1
Linear Interpolation . . . . . . . . . . . . . . . . . . .
145
9.8
B-Splines . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
147
9.8.1
Uniform B-Splines
. . . . . . . . . . . . . . . . . . .
148
9.8.2
Continuity . . . . . . . . . . . . . . . . . . . . . . . .
150
9.8.3
Non-uniform B-Splines . . . . . . . . . . . . . . . . .
151
9.8.4
Non-uniform Rational B-Splines . . . . . . . . . . . .
151
9.9
Surface Patches . . . . . . . . . . . . . . . . . . . . . . . . . .
152
9.9.1
Planar Surface Patch
. . . . . . . . . . . . . . . . . .
152
9.9.2
Quadratic Bézier Surface Patch . . . . . . . . . . . . .
153
9.9.3
Cubic Bézier Surface Patch . . . . . . . . . . . . . . .
155
9.10
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
157
10
Analytic Geometry . . . . . . . . . . . . . . . . . . . . . . . . . . .
159
10.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
159
10.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
159
10.2.1
Angles . . . . . . . . . . . . . . . . . . . . . . . . . .
159
10.2.2
Intercept Theorems . . . . . . . . . . . . . . . . . . .
160
10.2.3
Golden Section . . . . . . . . . . . . . . . . . . . . .
161
10.2.4
Triangles
. . . . . . . . . . . . . . . . . . . . . . . .
161
10.2.5
Centre of Gravity of a Triangle . . . . . . . . . . . . .
162
10.2.6
Isosceles Triangle . . . . . . . . . . . . . . . . . . . .
162
10.2.7
Equilateral Triangle . . . . . . . . . . . . . . . . . . .
162
10.2.8
Right Triangle . . . . . . . . . . . . . . . . . . . . . .
162
10.2.9
Theorem of Thales
. . . . . . . . . . . . . . . . . . .
163
10.2.10 Theorem of Pythagoras . . . . . . . . . . . . . . . . .
163
10.2.11 Quadrilateral
. . . . . . . . . . . . . . . . . . . . . .
164
10.2.12 Trapezoid . . . . . . . . . . . . . . . . . . . . . . . .
164
10.2.13 Parallelogram . . . . . . . . . . . . . . . . . . . . . .
164
10.2.14 Rhombus
. . . . . . . . . . . . . . . . . . . . . . . .
165
10.2.15 Regular Polygon
. . . . . . . . . . . . . . . . . . . .
165
10.2.16 Circle . . . . . . . . . . . . . . . . . . . . . . . . . .
165
10.3
2D Analytic Geometry . . . . . . . . . . . . . . . . . . . . . .
167
10.3.1
Equation of a Straight Line . . . . . . . . . . . . . . .
167
10.3.2
The Hessian Normal Form . . . . . . . . . . . . . . .
168
10.3.3
Space Partitioning . . . . . . . . . . . . . . . . . . . .
169
10.3.4
The Hessian Normal Form from Two Points . . . . . .
170
10.4
Intersection Points . . . . . . . . . . . . . . . . . . . . . . . .
171
10.4.1
Intersecting Straight Lines
. . . . . . . . . . . . . . .
171
10.4.2
Intersecting Line Segments . . . . . . . . . . . . . . .
172
10.5
Point Inside a Triangle . . . . . . . . . . . . . . . . . . . . . .
174
10.5.1
Area of a Triangle . . . . . . . . . . . . . . . . . . . .
174
10.5.2
Hessian Normal Form . . . . . . . . . . . . . . . . . .
176
10.6
Intersection of a Circle with a Straight Line . . . . . . . . . . .
177

xiv
Contents
10.7
3D Geometry . . . . . . . . . . . . . . . . . . . . . . . . . . .
179
10.7.1
Equation of a Straight Line . . . . . . . . . . . . . . .
179
10.7.2
Intersecting Two Straight Lines . . . . . . . . . . . . .
180
10.8
Equation of a Plane . . . . . . . . . . . . . . . . . . . . . . . .
183
10.8.1
Cartesian Form of the Plane Equation
. . . . . . . . .
183
10.8.2
General Form of the Plane Equation . . . . . . . . . .
186
10.8.3
Parametric Form of the Plane Equation . . . . . . . . .
186
10.8.4
Converting from the Parametric to the General Form
.
187
10.8.5
Plane Equation from Three Points
. . . . . . . . . . .
189
10.9
Intersecting Planes . . . . . . . . . . . . . . . . . . . . . . . .
191
10.9.1
Intersection of Three Planes
. . . . . . . . . . . . . .
194
10.9.2
Angle Between Two Planes . . . . . . . . . . . . . . .
196
10.9.3
Angle Between a Line and a Plane . . . . . . . . . . .
198
10.9.4
Intersection of a Line with a Plane . . . . . . . . . . .
199
10.10 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
201
11
Barycentric Coordinates . . . . . . . . . . . . . . . . . . . . . . . .
203
11.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
203
11.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
203
11.3
Ceva’s Theorem
. . . . . . . . . . . . . . . . . . . . . . . . .
203
11.4
Ratios and Proportion
. . . . . . . . . . . . . . . . . . . . . .
205
11.5
Mass Points . . . . . . . . . . . . . . . . . . . . . . . . . . . .
206
11.6
Linear Interpolation
. . . . . . . . . . . . . . . . . . . . . . .
211
11.7
Convex Hull Property
. . . . . . . . . . . . . . . . . . . . . .
218
11.8
Areas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
218
11.9
Volumes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
226
11.10 Bézier Curves and Patches . . . . . . . . . . . . . . . . . . . .
228
11.11 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
229
12
Geometric Algebra . . . . . . . . . . . . . . . . . . . . . . . . . . .
231
12.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
231
12.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
231
12.3
Symmetric and Antisymmetric Functions . . . . . . . . . . . .
231
12.4
Trigonometric Foundations . . . . . . . . . . . . . . . . . . . .
233
12.5
Vectorial Foundations
. . . . . . . . . . . . . . . . . . . . . .
234
12.6
Inner and Outer Products . . . . . . . . . . . . . . . . . . . . .
235
12.7
The Geometric Product in 2D
. . . . . . . . . . . . . . . . . .
236
12.8
The Geometric Product in 3D
. . . . . . . . . . . . . . . . . .
238
12.9
The Outer Product of Three 3D Vectors . . . . . . . . . . . . .
240
12.10 Axioms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
241
12.11 Notation
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
242
12.12 Grades, Pseudoscalars and Multivectors . . . . . . . . . . . . .
243
12.13 Redeﬁning the Inner and Outer Products . . . . . . . . . . . . .
244
12.14 The Inverse of a Vector . . . . . . . . . . . . . . . . . . . . . .
244
12.15 The Imaginary Properties of the Outer Product
. . . . . . . . .
246
12.16 Duality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
248

Contents
xv
12.17 The Relationship Between the Vector Product and the Outer
Product . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
249
12.18 The Relationship between Quaternions and Bivectors . . . . . .
249
12.19 Reﬂections and Rotations
. . . . . . . . . . . . . . . . . . . .
250
12.19.1 2D Reﬂections
. . . . . . . . . . . . . . . . . . . . .
250
12.19.2 3D Reﬂections
. . . . . . . . . . . . . . . . . . . . .
251
12.19.3 2D Rotations
. . . . . . . . . . . . . . . . . . . . . .
252
12.20 Rotors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
254
12.21 Applied Geometric Algebra
. . . . . . . . . . . . . . . . . . .
257
12.22 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
263
13
Calculus: Derivatives . . . . . . . . . . . . . . . . . . . . . . . . . .
265
13.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
265
13.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
265
13.3
Small Numerical Quantities
. . . . . . . . . . . . . . . . . . .
265
13.4
Equations and Limits . . . . . . . . . . . . . . . . . . . . . . .
267
13.4.1
Quadratic Function . . . . . . . . . . . . . . . . . . .
267
13.4.2
Cubic Equation . . . . . . . . . . . . . . . . . . . . .
268
13.4.3
Functions and Limits . . . . . . . . . . . . . . . . . .
270
13.4.4
Graphical Interpretation of the Derivative
. . . . . . .
272
13.4.5
Derivatives and Differentials . . . . . . . . . . . . . .
273
13.4.6
Integration and Antiderivatives . . . . . . . . . . . . .
273
13.5
Function Types . . . . . . . . . . . . . . . . . . . . . . . . . .
275
13.6
Differentiating Groups of Functions . . . . . . . . . . . . . . .
276
13.6.1
Sums of Functions
. . . . . . . . . . . . . . . . . . .
276
13.6.2
Function of a Function
. . . . . . . . . . . . . . . . .
278
13.6.3
Function Products . . . . . . . . . . . . . . . . . . . .
281
13.6.4
Function Quotients . . . . . . . . . . . . . . . . . . .
286
13.7
Differentiating Implicit Functions . . . . . . . . . . . . . . . .
287
13.8
Differentiating Exponential and Logarithmic Functions . . . . .
291
13.8.1
Exponential Functions
. . . . . . . . . . . . . . . . .
291
13.8.2
Logarithmic Functions
. . . . . . . . . . . . . . . . .
293
13.9
Differentiating Trigonometric Functions . . . . . . . . . . . . .
295
13.9.1
Differentiating tan . . . . . . . . . . . . . . . . . . . .
295
13.9.2
Differentiating csc . . . . . . . . . . . . . . . . . . . .
296
13.9.3
Differentiating sec . . . . . . . . . . . . . . . . . . . .
296
13.9.4
Differentiating cot . . . . . . . . . . . . . . . . . . . .
298
13.9.5
Differentiating arcsin, arccos and arctan . . . . . . . .
298
13.9.6
Differentiating arccsc, arcsec and arccot . . . . . . . .
299
13.10 Differentiating Hyperbolic Functions
. . . . . . . . . . . . . .
300
13.10.1 Differentiating sinh, cosh and tanh . . . . . . . . . . .
301
13.11 Higher Derivatives . . . . . . . . . . . . . . . . . . . . . . . .
302
13.12 Higher Derivatives of a Polynomial
. . . . . . . . . . . . . . .
303
13.13 Identifying a Local Maximum or Minimum . . . . . . . . . . .
305
13.14 Partial Derivatives
. . . . . . . . . . . . . . . . . . . . . . . .
307

xvi
Contents
13.14.1 Visualising Partial Derivatives
. . . . . . . . . . . . .
311
13.14.2 Mixed Partial Derivatives . . . . . . . . . . . . . . . .
312
13.15 Chain Rule . . . . . . . . . . . . . . . . . . . . . . . . . . . .
314
13.16 Total Derivative . . . . . . . . . . . . . . . . . . . . . . . . . .
316
13.17 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
317
14
Calculus: Integration . . . . . . . . . . . . . . . . . . . . . . . . . .
319
14.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
319
14.2
Indeﬁnite Integral . . . . . . . . . . . . . . . . . . . . . . . . .
319
14.3
Integration Techniques . . . . . . . . . . . . . . . . . . . . . .
320
14.3.1
Continuous Functions . . . . . . . . . . . . . . . . . .
320
14.3.2
Difﬁcult Functions
. . . . . . . . . . . . . . . . . . .
320
14.3.3
Trigonometric Identities
. . . . . . . . . . . . . . . .
321
14.3.4
Exponent Notation
. . . . . . . . . . . . . . . . . . .
324
14.3.5
Completing the Square . . . . . . . . . . . . . . . . .
325
14.3.6
The Integrand Contains a Derivative . . . . . . . . . .
326
14.3.7
Converting the Integrand into a Series of Fractions
. .
329
14.3.8
Integration by Parts . . . . . . . . . . . . . . . . . . .
330
14.3.9
Integration by Substitution . . . . . . . . . . . . . . .
337
14.3.10 Partial Fractions . . . . . . . . . . . . . . . . . . . . .
341
14.4
Area Under a Graph
. . . . . . . . . . . . . . . . . . . . . . .
344
14.5
Calculating Areas . . . . . . . . . . . . . . . . . . . . . . . . .
345
14.6
Positive and Negative Areas . . . . . . . . . . . . . . . . . . .
352
14.7
Area Between Two Functions
. . . . . . . . . . . . . . . . . .
354
14.8
Areas with the y-Axis
. . . . . . . . . . . . . . . . . . . . . .
355
14.9
Area with Parametric Functions . . . . . . . . . . . . . . . . .
356
14.10 Bernhard Riemann . . . . . . . . . . . . . . . . . . . . . . . .
358
14.10.1 Domains and Intervals
. . . . . . . . . . . . . . . . .
358
14.10.2 The Riemann Sum
. . . . . . . . . . . . . . . . . . .
359
14.11 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
360
15
Worked Examples
. . . . . . . . . . . . . . . . . . . . . . . . . . .
361
15.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
361
15.2
Area of Regular Polygon . . . . . . . . . . . . . . . . . . . . .
361
15.3
Area of Any Polygon . . . . . . . . . . . . . . . . . . . . . . .
362
15.4
Dihedral Angle of a Dodecahedron
. . . . . . . . . . . . . . .
363
15.5
Vector Normal to a Triangle . . . . . . . . . . . . . . . . . . .
364
15.6
Area of a Triangle Using Vectors . . . . . . . . . . . . . . . . .
365
15.7
General Form of the Line Equation from Two Points . . . . . .
365
15.8
Angle Between Two Straight Lines
. . . . . . . . . . . . . . .
366
15.9
Test if Three Points Lie on a Straight Line . . . . . . . . . . . .
367
15.10 Position and Distance of the Nearest Point on a Line to a Point .
367
15.11 Position of a Point Reﬂected in a Line . . . . . . . . . . . . . .
370
15.12 Intersection of a Line and a Sphere . . . . . . . . . . . . . . . .
372
15.13 Sphere Touching a Plane . . . . . . . . . . . . . . . . . . . . .
376
15.14 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
378

Contents
xvii
16
Conclusion
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
379
Appendix A
Limit of (sinθ)/θ
. . . . . . . . . . . . . . . . . . . . . .
381
Appendix B
Integrating cosn θ
. . . . . . . . . . . . . . . . . . . . . .
385
Index
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
387

Chapter 1
Mathematics
1.1 Aims and Objectives of This Book
The aim of this book is to introduce a range of mathematical topics, without employ-
ing too many mathematical symbols and abstract ideas. The objective of the book
is to provide programmers, animators and technical directors with sufﬁcient conﬁ-
dence and knowledge of mathematics, that they can understand and resolve many of
the problems encountered in their day-to-day work.
Each chapter introduces the reader to a new topic, and should give them the
conﬁdence to study more advanced texts. I have tried to explain each topic in a
simple and practical manner, employing a variety of worked examples.
1.2 Who Should Read This Book?
Increasingly, there are situations and projects that require animators, programmers
and technical directors to resort to mathematics to resolve unforeseen technical
problems; this may be in the form of a script or an extra piece of program code.
Consequently, I have written this book as a reference for anyone intending to study
computer graphics, computer animation, computer games or virtual reality, espe-
cially for those who want to understand the mathematics behind the technical as-
pects.
1.3 Assumptions Made in This Book
I assume that readers possess an understanding of arithmetic and a general knowl-
edge of the principles of mathematics, such as algebra, trigonometry and geometry.
Apart from that, each subject is introduced as though it were the ﬁrst time it had
been discovered.
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_1, © Springer-Verlag London 2014
1

2
1
Mathematics
1.4 How to Use the Book
I would advise starting at the beginning and proceeding chapter by chapter. Where
a subject seems familiar, just jump ahead until a challenge is discovered. Once you
have read the book, keep it handy so that you can refer to it when the occasion arises.
Although I have tried to maintain a sequence to the mathematical ideas, so that
one idea leads to another, in some cases this has proved impossible. For example,
determinants are referred to in the chapter on vectors, but they are described in detail
in the next chapter on transforms. Similarly, the later chapter on analytic geometry
contains some basic ideas of geometry, but its position was dictated by the use of
vectors. Consequently, on some occasions, the reader will have to move between
chapters to read about related topics.
1.5 Is Mathematics Difﬁcult?
“Is mathematics difﬁcult?” I suppose that there is no real answer to this question,
because it all depends upon what we mean by “mathematics” and “difﬁcult”. But
if the question is rephrased slightly: “Is the mathematics of computer graphics dif-
ﬁcult?” then the answer is a deﬁnite “no”. What’s more, I believe that the subject
of computer graphics can instil in someone a love for mathematics. Perhaps “love”
is too strong a word, but I am convinced that it is possible to “make friends” with
mathematics.
For me, mathematics should be treated like a foreign language: you only require
to learn an appropriate vocabulary to survive while visiting another country. If you
attempt to memorise an extended vocabulary, and do not put it to practice, it is highly
likely that you will forget it. Mathematics is the same. I know that if I attempted to
memorise some obscure branch of mathematics, such as vector calculus, I would
forget it within days if I did not put it to some practical use.

Chapter 2
Numbers
2.1 Introduction
Numbers are at the heart of mathematics. Some, like prime numbers, are enigmatic,
and defy all attempts to predict their arrival; while others, like integers, are well
behaved, and can be counted on! This chapter revises some basic ideas about num-
bers and how we refer to them in the context of mathematics for computer graphics.
In particular, I include: natural, prime, integer, rational, irrational, real, imaginary
and complex numbers. I also provide a short description on set notation, and our
positional number system.
2.2 Background
Over the centuries, mathematicians have realised that in order to progress, they must
give precise deﬁnitions to their discoveries, ideas and concepts, so that they can
be built upon and referenced by new mathematical inventions. In the event of any
new discovery, these deﬁnitions have to be occasionally changed or extended. For
example, once upon a time, integers, rational and irrational numbers, satisﬁed all the
needs of mathematicians, until imaginary quantities were invented. Today, complex
numbers have helped shape the current number system hierarchy. Consequently,
there must be clear deﬁnitions for numbers, and the operators that act upon them.
Therefore, we need to identify the types of numbers that exist, what they are used
for, and any problems that arise when they are stored in a computer.
2.3 Set Notation
A set is a collection of related things identiﬁed by a unique name. For example,
I own a set of books stored in my library, and a set of photographs stored on my
computer. I could call them my-books and my-photos. Similarly, numbers are organ-
ised into sets represented by a single letter such as R for reals and Z for integers.
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_2, © Springer-Verlag London 2014
3

4
2
Numbers
Set theory provides a logical framework for manipulating and interrogating sets,
which does not concern us here, apart from the statement conﬁrming that something
is a member of a set. For example, the symbol ∈means “is a member of”, which
permits me to state
QFCG ∈my-books
where QFCG stands for my book Quaternions for Computer Graphics.
It is also common practice to use a symbol such as λ (lambda), to deﬁne a number
as follows:
λ ∈R
which means that λ is a member of the set of real numbers R, and is thus a real
quantity.
2.4 Positional Number System
All sorts of number system have been proposed by previous civilisations, but our
current system is a positional number system using a base ten. The number 1234
stands for the sum of one thousand, plus two hundreds, plus three tens, plus four
ones, which is expressed:
1234 = 1 × 1000 + 2 × 100 + 3 × 10 + 4 × 1.
It should be obvious that the base ten is nothing special; it just so happens that
human beings have evolved with ten digits, which we use for counting. This suggests
that any number can be used as a base: 2, 3, 4, 5, 6, 7, etc. In fact, the decimal number
system is not very convenient for computer technology, where digital circuits switch
on and off trillions of times a second using binary numbers—numbers to a base 2—
with great ease. In this text there is no real need to explore such numbers, and are
left to programmers who have to master number systems such as binary (base 2),
octal (base 8) and hexidecimal (base 16).
2.5 Natural Numbers
The natural numbers [1,2,3,4,...] are used for counting, ordering and labelling
and represented by the set N. When zero is added to the set, N∗is used. Note that
negative numbers are not included. We use natural numbers to subscript a quantity
to distinguish one element from another, e.g. x1,x2,x3,x4,....
2.6 Prime Numbers
A prime number [2,3,5,7,11,13,17,...] is a natural number that can be divided
only by 1 and itself, without leaving a remainder. There are 25 primes less than 100,

2.7
Integer Numbers
5
168 primes less than 1,000 and 455,052,512 primes less than 10,000,000,000. The
fundamental theory of arithmetic states: “Any positive integer (other than 1) can be
written as the product of two or more prime numbers in one and only one way.” For
example:
25 = 5 × 5
26 = 2 × 13
27 = 3 × 3 × 3
28 = 2 × 2 × 7
29 = 29
30 = 2 × 3 × 5
92365 = 5 × 7 × 7 × 13 × 29.
In 1742, the German mathematician Christian Goldbach (1690–1764) conjectured
that every even integer greater than 2 could be written as the sum of two primes:
4 = 2 + 2
14 = 11 + 3
18 = 11 + 7, etc.
No one has ever found an exception to this conjecture, and no one has ever conﬁrmed
it. Although prime numbers are enigmatic and have taxed the brains of the greatest
mathematicians, they unfortunately, play no part in computer graphics!
2.7 Integer Numbers
Integers include positive and negative natural numbers: [...,−2,−1,0,1,2,3,...]
and are represented by the set Z, or Z∗without zero. Zero, in any form, is a useful
concept, but does not sit comfortably alongside other numbers, especially when it is
a divisor.
2.8 Rational Numbers
Rational or fractional numbers are numbers that can be represented as a fraction
and are represented by the set Q. For example, 2,
√
16, 0.25 are rational numbers
because
2 = 4
2

6
2
Numbers
Fig. 2.1 The number line
√
16 = 4 = 8
2
0.25 = 1
4.
Some rational numbers can be stored accurately inside a computer, but many others
can only be stored approximately. For example, 4/3 = 1.333333... produces an
inﬁnite sequence of threes and has to be truncated when stored as a binary number.
2.9 Irrational Numbers
An irrational number cannot be represented as a fraction. Examples are
√
2 = 1.414213562...
π = 3.141592653...
e = 2.718281828...
Such numbers never terminate and are always subject to a small error when stored
within a computer.
2.10 Real Numbers
Rational and irrational numbers together comprise the set of real numbers which
are represented by the letter R, or R∗without zero. Typical examples are 1.5, 0.004,
12.999 and 23.0.
2.11 The Number Line
It is useful to visualise numbers in the form of a number line, as shown in Fig. 2.1,
which helps us understand complex numbers.
2.12 Complex Numbers
The Swiss mathematician Leonhard Euler (1707–1783) (pronounced “Oiler”)
played a signiﬁcant role in putting complex numbers on the map. His ideas on

2.12
Complex Numbers
7
Fig. 2.2 Rotating numbers
through 180◦reverses their
sign
rotations are also used in computer graphics to locate objects and virtual cameras in
space, as we shall see later on.
Complex numbers resolve some awkward problems that arise when attempting
to solve certain types of equations and are represented by the set C. For example,
x2 −4 = 0 has solutions x = ±2. But x2 +4 = 0 has no real-number solution. How-
ever, the number line provides a graphical interpretation for a new type of number:
the complex number. The name is rather misleading: it is not complex; it is rather
simple.
Consider the scenario depicted in Fig. 2.2. Any number on the number line is
related to the same number with the opposite sign via an anticlockwise rotation of
180◦. For example, if 2 is rotated 180◦about zero, it becomes −2, and if −3 is
rotated 180◦about zero it becomes 3.
We can now write −2 = −1 × 2, or 3 = −1 × −3, where −1 is effectively a
rotation through 180◦. But a rotation of 180◦can be interpreted as two consecutive
rotations of 90◦, and the question now arises: what represents a rotation of 90◦?
Well, let’s assume we don’t know the answer to this question—even though some
of you do—we can at least give a name to the operation, and what better name to
use than i.
So the letter i represents an anticlockwise rotation of 90◦. Therefore 2i is equiv-
alent to lifting 2 out of the number line, rotating it 90◦and leaving it hanging in
limbo. But if we take this “imaginary” number and subject it to a further rotation
of 90◦, i.e. 2ii, it becomes −2. Therefore, we can write 2ii = −2, which means
that ii = −1. But if this is so, i =
√
−1! Therefore, i is not really a number, but an
operator—an operator that effectively rotates a number anticlockwise through 90◦.
So now we have two types of number: ordinary numbers and complex numbers.
Ordinary numbers are the everyday numbers we use for counting and so on, whereas
complex numbers have a mixture of real and imaginary components, and help re-
solve a wide range of mathematical problems. For example, a complex number z
has the following deﬁnition:
z = a + bi,
a,b ∈R
where b is multiplied by i, and makes it imaginary.

8
2
Numbers
Fig. 2.3 The graphical representation of complex numbers
Complex numbers obey all the normal laws of algebra. For example, if we mul-
tiply (a + bi) by (c + di) we have
(a + bi)(c + di) = ac + adi + bci + bdi2.
Collecting up like terms and substituting −1 for i2 we get
(a + bi)(c + di) = ac + (ad + bc)i −bd
and simpliﬁes to
(a + bi)(c + di) = ac −bd + (ad + bc)i
which is another complex number.
Something interesting happens when we multiply a complex number by its con-
jugate, which is the same complex number but with the sign of the imaginary part
reversed:
(a + bi)(a −bi) = a2 −abi + bai −b2i2.
Collecting up like terms and simplifying we obtain
(a + bi)(a −bi) = a2 + b2
which is a real number because the imaginary part has been cancelled out by the
action of the conjugate.
Figure 2.3 shows how complex numbers are represented graphically: the hori-
zontal number line represents the real part, and the vertical number line represents
the imaginary part.

2.13
Summary
9
For example, the complex number P(1 + 2i) in Fig. 2.3 is rotated 90◦to Q by
multiplying it by i. Let’s do this, and remember that i2 = −1:
i(1 + 2i) = i + 2i2
= i −2
= −2 + i.
The point Q(−2 + i) is rotated 90◦to R by multiplying it by i:
i(−2 + i) = −2i + i2
= −2i −1
= −1 −2i.
The point R(−1 −2i) is rotated 90◦to S by multiplying it by i:
i(−1 −2i) = −i −2i2
= −i + 2
= 2 −i.
Finally, the point S(2 −i) is rotated 90◦back to P by multiplying it by i:
i(2 −i) = 2i −i2
= 2i + 1
= 1 + 2i.
Historically, complex numbers have not played a big part in computer graph-
ics, but imaginary quantities are very important in quaternions and geometric alge-
bra, which are covered in later chapters. Complex numbers are intimately related to
Cartesian coordinates, in that the ordered pair (x,y) ≡(x + yi), and that they led to
the discovery of vectors and quaternions.
Before concluding this chapter, I cannot fail to include the famous equation dis-
covered by Euler:
eiπ + 1 = 0
which uniﬁes 0, 1, e, π and i in a simple and beautiful arrangement, and is on a par
with Einstein’s e = mc2.
2.13 Summary
Apart from the natural numbers, integers, rational, irrational, prime, real and com-
plex numbers, there are also Fermat, Mersenne, amicable, chromic, cubic, Fi-
bonacci, pentagonal, perfect, random, square and tetrahedral numbers, which al-
though equally interesting, don’t concern us in this text.
Now that we know something about some important number sets, let’s revise
some ideas behind algebra.

Chapter 3
Algebra
3.1 Introduction
Although algebra can be a very abstract mathematical tool, we only need to explore
those practical features relevant to its application in computer graphics. Therefore,
this chapter reviews the basic elements of algebra to prepare the reader for the alge-
braic manipulations used in later chapters.
3.2 Background
The word “algebra” comes from the Arabic al-jabr w’al-muqabal meaning “restora-
tion and reduction”. Modern algebraic notation has evolved over thousands of years
where different civilisations developed ways of annotating mathematical and log-
ical problems. In retrospect, it does seem strange that centuries passed before the
“equals” sign (=) was invented, and concepts such as “zero” (CE 876) were in-
troduced, especially as they now seem so important. But we are not at the end of
this evolution, because new forms of annotation and manipulation will continue to
emerge as new mathematical ideas are invented.
One fundamental concept of algebra is the idea of giving a name to an unknown
quantity. For example, m is often used to represent the slope of a 2D line, and c is
the line’s y-coordinate where it intersects the y-axis. The French mathematician
and philosopher René Descartes (1596–1650) formalised the idea of using letters
from the beginning of the alphabet (a,b,c,...) to represent arbitrary quantities,
and letters at the end of the alphabet (p,q,r,s,t,...,x,y,z) to represent quantities
such as pressure (p), temperature (t) and coordinates (x,y,z).
With the aid of the basic arithmetic operators: +,−,×,÷ we can develop ex-
pressions that describe the behaviour of a physical process or a logical computation.
For example, the expression ax + by −d equals zero for a straight line. The vari-
ables x and y are the coordinates of any point on the line and the values of a, b
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_3, © Springer-Verlag London 2014
11

12
3
Algebra
and d determine the position and orientation of the line. There is an implied multi-
plication between ax and by which would be expressed as a ∗x and b ∗y using a
programming language.
The “=” sign permits the line equation to be expressed as a self-evident state-
ment:
0 = ax + by −d.
Such a statement implies that the expressions on the left- and right-hand sides of
the = sign are “equal” or “balanced”. So, in order to maintain equality or balance,
whatever is done to one side, must also be done to the other. For example, adding d
to both sides, the straight-line equation becomes
d = ax + by.
Similarly, we could double or treble both expressions; divide them by 4; or add 6;
without disturbing the underlying relationship.
Algebraic expressions also contain a wide variety of functions, such as
√x = square root of x
n√x = nth root of x
xn = x to the power n
sinx = sine of x
cosx = cosine of x
tanx = tangent of x
logx = logarithm of x
lnx = natural logarithm of x.
Parentheses are used to isolate part of an expression in order to select a sub-
expression that is manipulated in a particular way. For example, the parentheses
in c(a + b) + d ensure that the variables a and b are added together before being
multiplied by c, and ﬁnally added to d.
3.3 Algebraic Laws
On the whole, mathematics is well behaved. This is because it is subject to a system
of laws or axioms that describe how mathematical statements are to be manipulated.
Negative numbers and zero always seem to cause problems and we just have to
remember that the product of two negative numbers results in a positive number and
that

3.3
Algebraic Laws
13
x/0
is not permitted;
0/x
equals 0; and
0/0
is undeﬁned.
There are three basic axioms that are fundamental to manipulating algebraic ex-
pressions: associative, commutative and distributive. In the following descriptions,
the term binary operation represents the arithmetic operations +, −or ×, which are
always associated with a pair of numbers or variables.
3.3.1 Associative Law
The associative law in algebra states that when three or more elements are linked
together through a binary operation, the result is independent of how each pair of
elements is grouped. The associative law of addition is
a + (b + c) = (a + b) + c
e.g. 1 + (2 + 3) = (1 + 2) + 3.
This seems so obvious that it is almost unnecessary to state such an axiom. But it
must be included as it reminds us that grouping is immaterial when adding a string of
numbers. The associative law of multiplication also seems unnecessary, but reminds
us that grouping is also immaterial when multiplying a string of numbers:
a × (b × c) = (a × b) × c
e.g. 1 × (2 × 3) = (1 × 2) × 3.
However, note that subtraction is not associative:
a −(b −c) ̸= (a −b) −c
e.g. 1 −(2 −3) ̸= (1 −2) −3
which may seem surprising, but at the same time conﬁrms the need for clear axioms.
3.3.2 Commutative Law
The commutative law in algebra states that when two elements are linked through
some binary operation, the result is independent of the order of the elements. The
commutative law of addition is
a + b = b + a
e.g. 1 + 2 = 2 + 1.

14
3
Algebra
The commutative law of multiplication is
a × b = b × a
e.g. 1 × 2 = 2 × 1.
Again, these may seem so obvious that they are unnecessary. But the algebra of
numbers must be clear on such products. Note that subtraction is not commutative
a −b ̸= b −a
e.g. 1 −2 ̸= 2 −1.
3.3.3 Distributive Law
The distributive law in algebra describes an operation which when performed on a
combination of elements is the same as performing the operation on the individual
elements. The distributive law does not work in all cases of arithmetic. For example,
multiplication over addition holds:
a(b + c) = ab + ac
e.g. 2(3 + 4) = 6 + 8.
Whereas addition over multiplication does not:
a + (b × c) ̸= (a + b) × (a + c)
e.g. 3 + (4 × 5) ̸= (3 + 4) × (3 + 5).
Although most of these laws seem to be natural for numbers, they do not neces-
sarily apply to all mathematical constructs. For instance, the vector product, which
multiplies two vectors together, is not commutative.
3.4 Solving the Roots of a Quadratic Equation
To put the above laws and notation into context, let us take a simple example to
illustrate the logical steps in solving a problem. The task involves solving the roots
of a quadratic equation, i.e. those values of x that make the equation equal zero.
As the starting equation involves an x2 term, at some stage we will have to take a
square root. Therefore, the strategy is to create a situation that makes it easy to take
a square root. We begin with the quadratic equation where a ̸= 0:
ax2 + bx + c = 0.

3.5
Indices
15
Step 1: Subtract c from both sides:
ax2 + bx = −c.
Step 2: Divide both sides by a:
x2 + b
a x = −c
a .
Step 3: Add b2/4a2 to both sides to create a perfect square on the left side:
x2 + b
a x + b2
4a2 = b2
4a2 −c
a .
Step 4: Factorise the left side:

x + b
2a
2
= b2
4a2 −c
a .
Step 5: Make 4a2 the common denominator for the right side:

x + b
2a
2
= b2 −4ac
4a2
.
Step 6: Take the square root of both sides:
x + b
2a = ±
√
b2 −4ac
2a
.
Step 7: Subtract b/2a from both sides:
x = ±
√
b2 −4ac
2a
−b
2a .
Step 8: Rearrange the right side:
x = −b ±
√
b2 −4ac
2a
which provides the roots for any quadratic equation.
3.5 Indices
Indices are used to imply repeated multiplication. For instance, in the above exam-
ple with a quadratic equation, x2 is used to represent x × x; this notation leads to
a variety of situations where laws are required to explain how the result is to be
computed.

16
3
Algebra
3.5.1 Laws of Indices
The laws of indices are expressed as follows:
am × an = am+n
am ÷ an = am−n

amn = amn
and are veriﬁed using some simple examples:
23 × 22 = 8 × 4 = 32 = 25
24 ÷ 22 = 16 ÷ 4 = 4 = 22

223 = 64 = 26.
From the above laws, it is evident that
a0 = 1
a−p = 1
ap
a
1
q =
q√a
a
p
q =
q√
ap.
3.6 Logarithms
Two people are associated with the invention of logarithms: the Scottish theolo-
gian and mathematician John Napier (1550–1617) and the Swiss clockmaker and
mathematician Joost Bürgi (1552–1632). Both men were frustrated by the time they
spent multiplying numbers together, and both realised that multiplication could be
replaced by addition using logarithms. Logarithms exploit the addition and subtrac-
tion of indices shown above, and are always associated with a base. For example,
if ax = n, then loga n = x, where a is the base. When no base is indicated, it is
assumed to be 10. Two examples bring the idea to life:
102 = 100
then
log100 = 2
103 = 1000
then
log1000 = 3
which is interpreted as “10 has to be raised to the power (index) 2 to equal 100”.
The log operation ﬁnds the power of the base for a given number. Thus a multipli-
cation is translated into an addition using logs. Figure 3.1 shows the graph of logx,
up to x = 100, where we see that log20 ≈1.3 and log50 ≈1.7. Therefore, given

3.6
Logarithms
17
Fig. 3.1 Graph of logx
Fig. 3.2 Graph of lnx
suitable software, a set of logarithm tables, or a calculator with a log function, we
can multiply 20 × 50 as follows:
log20 + log50 ≈1.3 + 1.7 = 3
103 = 1000.
In general, the two bases used in calculators and software are 10 and 2.718281846...
The latter is e, a transcendental number. (A transcendental number is not a root of
any algebraic equation. Joseph Liouville proved the existence of such numbers in
1844. π, the ratio of the circumference of a circle to its diameter, is another exam-
ple.) To distinguish one type of logarithm from the other, a logarithm to the base 10
is written as log, and a natural logarithm to the base e is written ln.
Figure 3.2 shows the graph of lnx, up to x = 100, where we see that ln20 ≈3
and ln50 ≈3.9. Therefore, given suitable software, a set of natural logarithm tables
or a calculator with a ln function, we can multiply 20 × 50 as follows:
ln20 + ln50 ≈3 + 3.9 = 6.9
e6.9 ≈1000.

18
3
Algebra
From the above notation, it is evident that
log(ab) = loga + logb
log
a
b

= loga −logb
log

an
= nloga.
3.7 Further Notation
Mathematicians use all sorts of symbols to substitute for natural language expres-
sions; here are some examples:
< less than
> greater than
≤less than or equal to
≥greater than or equal to
≈approximately equal to
≡equivalent to
̸= not equal to.
For example, 0 ≤t ≤1 is interpreted as: t is greater than or equal to 0, and is less
than or equal to 1. Basically, this means t varies between 0 and 1.
3.8 Functions
The theory of functions is a large subject, and at this point in the book, I will only
touch upon some introductory ideas that will help you understand the following
chapters.
The German mathematician Gottfried von Leibniz (1646–1716) is credited with
an early deﬁnition of a function, based upon the slope of a graph. However, it
was Leonhard Euler who provided a deﬁnition along the lines: “A function is a
variable quantity, whose value depends upon one or more independent variables.”
Other mathematicians have introduced more rigorous deﬁnitions, which are exam-
ined later on in the chapter on calculus.

3.8
Functions
19
3.8.1 Explicit and Implicit Equations
The equation
y = 3x2 + 2x + 4
associates the value of y with different values of x. The directness of the equation:
“y =”, is why it is called an explicit equation. Such objects arise often in mathemat-
ics as their explicit nature is extremely useful. However, simply by rearranging the
terms, creates an implicit equation:
4 = y −3x2 −2x
which implies that certain values of x and y combine to produce the result 4. An-
other implicit form is
0 = y −3x2 −2x −4
which means the same thing, but expressed in a slightly different way.
An implicit equation can be turned into an explicit equation using algebra. For
example, the implicit equation
4x + 2y = 12
has the explicit form:
y = 6 −2x
where it is clear what y equals.
3.8.2 Function Notation
The explicit equation
y = 3x2 + 2x + 4
tells us that the value of y depends on the value of x, and not the other way around.
For example, when x = 1, y = 9; and when x = 2, y = 20. As y depends upon the
value of x, it is called the dependent variable; and as x is independent of y, it is
called the independent variable.
We can also say that y is a function of x, which can be written as
y = f (x)
where the letter “f ” represents the name of the function, and the independent vari-
able is enclosed in brackets. We could have also written y = g(x), y = h(x), etc.
Eventually, we have to identify the nature of the function, which in this case is
f (x) = 3x2 + 2x + 4.

20
3
Algebra
Nothing prevents us from writing
y = f (x) = 3x2 + 2x + 4
which means: y equals the value of the function “f (x)”, which is determined by the
independent variable x using the expression 3x2 + 2x + 4.
An equation may involve more than one independent variable, such as the volume
of a cylinder:
V = πr2h
where r is the radius, and h, the height. This is written as
V (r,h) = πr2h.
3.8.3 Intervals
A popular technique in computer games and animation is to trigger an event when a
parameter reaches a speciﬁed value, or falls between a certain range. For example,
if distance d is less than, or equal to 20, and greater than, or equal to 1, then do
something. Such a condition is expressed mathematically as
1 ≤d ≤20.
In mathematics, 1 to 20 is known as an interval. In fact, in this example, it is a closed
interval, as it includes the values of 1 and 20. The interval
1 < d < 20
where 1 and 20 are not included, is an open interval. To distinguish between the
two, the closed interval is written
[1,20]
and the open interval:
]1,20[,
or
(1,20).
These two objects can be mixed together:
1 ≤d < 20,
[1,20[,
or
[1,20)
and
1 < d ≤20,
]1,20],
or
(1,20]
which are called half-open intervals.
Intervals are associated with independent variables, and inﬂuence the numerical
range of a function. So now let’s explore the language used to describe the behaviour
of functions.

3.9
Summary
21
3.8.4 Function Domains and Ranges
The following descriptions of domains and ranges only apply to functions with one
independent variable: f (x).
Returning to the above function:
y = f (x) = 3x2 + 2x + 4
the independent variable, x, can take on any value from −∞to +∞, which is
called the domain of the function. In this case, the domain of f (x) is the set of real
numbers: R. The notation used for intervals, is also used for domains, which in this
case is
] −∞,+∞[
and is open, as there are no precise values for −∞and +∞.
As the independent variable takes on different values from its domain, so the
dependent variable, y or f (x), takes on different values from its range. Therefore,
the range of y = f (x) = 3x2 + 2x + 4 is also the set of real numbers.
The domain of logx is
]0,+∞[
which is open, because x ̸= 0. Whereas, the range of logx is
] −∞,+∞[.
The domain of √x is
[0,+∞[
which is half-open, because
√
0 = 0, and +∞has no precise value. Similarly, the
range of √x is
[0,+∞[.
Sometimes, a function is sensitive to one speciﬁc number. For example, in the func-
tion
y = f (x) =
1
x −1,
when x = 1, there is a divide by zero, which is meaningless. Consequently, the
domain of f (x) is the set of real numbers R, apart from 1.
I will use function domains and ranges in the next chapter on trigonometry.
3.9 Summary
The above description of algebra should be sufﬁcient for the reader to understand the
remaining chapters. However, one should remember that this is only the beginning
of a very complex subject.

Chapter 4
Trigonometry
4.1 Introduction
This chapter covers some basic features of trigonometry such as: angular measure,
trigonometric ratios, inverse ratios, trigonometric identities and various rules, with
which the reader should be familiar.
4.2 Background
The word “trigonometry” divides into three parts: “tri”, “gon”, “metry”, which
means the measurement of three-sided polygons, i.e. triangles. It is an ancient sub-
ject and is widely used in the analysis and solution of problems in computer graph-
ics. Trigonometric functions arise in vectors, transforms, geometry, quaternions and
interpolation.
4.3 Units of Angular Measurement
The measurement of angles is at the heart of trigonometry, and today two units
of angular measurement have survived into modern usage: degrees and radians.
The degree (or sexagesimal) unit of measure derives from deﬁning one complete
rotation as 360◦. Each degree divides into 60 minutes, and each minute divides into
60 seconds. The number 60 has survived from Mesopotamian days and is rather
incongruous when used alongside today’s decimal system—which is why the radian
has secured a strong foothold in modern mathematics.
The radian of angular measure does not depend upon any arbitrary constant—it
is the angle created by a circular arc whose length is equal to the circle’s radius.
And because the perimeter of a circle is 2πr, 2π radians correspond to one com-
plete rotation. As 360◦correspond to 2π radians, 1 radian equals 180◦/π, which is
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_4, © Springer-Verlag London 2014
23

24
4
Trigonometry
Fig. 4.1 The four quadrants
for the trigonometric ratios
approximately 57.3◦. The following relationships between radians and degrees are
worth remembering:
π
2 [rad] ≡90◦,
π [rad] ≡180◦
3π
2 [rad] ≡270◦,
2π [rad] ≡360◦.
To convert x◦to radians:
πx◦
180 [rad].
To convert x [rad] to degrees:
180x
π
[degrees].
4.4 The Trigonometric Ratios
Ancient civilisations knew that triangles—whatever their size—possessed some in-
herent properties, especially the ratios of sides and their associated angles. This
means that if these ratios are known in advance, problems involving triangles with
unknown lengths and angles, can be discovered using these ratios.
Figure 4.1 shows a point P with coordinates (base,height), on a unit-radius cir-
cle rotated through an angle θ. As P is rotated, it moves into the 2nd quadrant, 3rd
quadrant, 4th quadrant and returns back to the ﬁrst quadrant. During the rotation,
the sign of height and base change as follows:
1st
quadrant:
height (+), base (+)
2nd quadrant:
height (+), base (−)
3rd quadrant:
height (−), base (−)
4th quadrant:
height (−), base (+).
Figures 4.2 and 4.3 plot the changing values of height and base over the four quad-
rants, respectively. When radius = 1, the curves vary between 1 and −1. In the
context of triangles, the sides are labelled as follows

4.4
The Trigonometric Ratios
25
Fig. 4.2 The graph of height
over the four quadrants
Fig. 4.3 The graph of base
over the four quadrants
Fig. 4.4 Sides of a
right-angle triangle
hypotenuse = radius
opposite = height
adjacent = base.
Thus, using the right-angle triangle shown in Fig. 4.4, the trigonometric ratios:
sine, cosine and tangent are deﬁned as
sinθ =
opposite
hypotenuse,
cosθ =
adjacent
hypotenuse,
tanθ = opposite
adjacent.

26
4
Trigonometry
Fig. 4.5 A right-angle
triangle with two unknown
sides
The reciprocals of these functions, cosecant, secant and cotangent are also useful:
cscθ =
1
sinθ ,
secθ =
1
cosθ ,
cotθ =
1
tanθ .
Example 4.1 Figure 4.5 shows a triangle where the hypotenuse and an angle are
known. The other sides are calculated as follows:
opposite
10
= sin40◦
opposite = 10sin40◦= 10 × 0.64278 = 6.4278.
adjacent
10
= cos40◦
adjacent = 10cos40◦= 10 × 0.7660 = 7.660.
The theorem of Pythagoras conﬁrms that these lengths are correct:
6.42782 + 7.6602 = 102.
Figure 4.6 shows the graph of the tangent function, which, like the sine and cosine
functions, is periodic, but with only a period of π radians.
4.4.1 Domains and Ranges
The periodic nature of sinθ, cosθ and tanθ, means that their domains are inﬁnitely
large. Consequently, it is customary to conﬁne the domain of sinθ to

−π
2 , π
2

and cosθ to
[0,π].

4.5
Inverse Trigonometric Ratios
27
Fig. 4.6 Graph of the tangent
function
The range for both sinθ and cosθ is
[−1,1].
The domain for tanθ is the open interval

−π
2 , π
2

and its range is the open interval
] −∞,∞[.
4.5 Inverse Trigonometric Ratios
The functions sinθ, cosθ, tanθ, cscθ, secθ and cotθ provide different ratios for the
angle θ, and the inverse trigonometric functions convert a ratio back into an angle.
These are arcsin, arccos, arctan, arccsc, arcsec and arccot, and are sometimes writ-
ten as sin−1, cos−1, tan−1, csc−1, sec−1 and cot−1. For example, sin30◦= 0.5,
therefore, arcsin(0.5) = 30◦. Consequently, the domain for arcsin is the range
for sin:
[−1,1]
and the range for arcsin is the domain for sin:

−π
2 , π
2

as shown in Fig. 4.7. Similarly, the domain for arccos is the range for cos:
[−1,1]

28
4
Trigonometry
Fig. 4.7 Graph of the arcsin
function
Fig. 4.8 Graph of the arccos
function
Fig. 4.9 Graph of the arctan
function
and the range for arccos is the domain for cos:
[0,π]
as shown in Fig. 4.8.
The domain for arccot is the range for tan:
] −∞,∞[
and the range for arccot is the domain for tan:

−π
2 , π
2

as shown in Fig. 4.9.

4.6
Trigonometric Identities
29
Fig. 4.10 An arbitrary
triangle
Various programming languages include the atan2 function, which is an arctan
function with two arguments: atan2(y,x). The signs of x and y provide sufﬁcient
information to locate the quadrant containing the angle, and gives the atan2 function
a range of [0,2π].
4.6 Trigonometric Identities
The sin and cos curves are identical, apart from being displaced by 90◦, and are
related by
cosθ = sin(θ + π/2).
Also, simple algebra and the theorem of Pythagoras can be used to derive other
formulae such as
sinθ
cosθ = tanθ
sin2 θ + cos2 θ = 1
1 + tan2 θ = sec2 θ
1 + cot2 θ = csc2 θ.
4.7 The Sine Rule
Figure 4.10 shows a triangle labeled such that side a is opposite angle A, side b is
opposite angle B, etc. The sine rule states:
a
sinA =
b
sinB =
c
sinC .

30
4
Trigonometry
4.8 The Cosine Rule
The cosine rule expresses the sin2 θ + cos2 θ = 1 identity for the arbitrary triangle
shown in Fig. 4.10. In fact, there are three versions:
a2 = b2 + c2 −2bc cosA
b2 = c2 + a2 −2ca cosB
c2 = a2 + b2 −2ab cosC.
Three further relationships also hold:
a = b cosC + c cosB
b = c cosA + a cosC
c = a cosB + b cosA.
4.9 Compound Angles
Two sets of compound trigonometric identities show how to add and subtract two
different angles and multiples of the same angle. The following are some of the most
common identities:
sin(A ± B) = sinAcosB ± cosAsinB
cos(A ± B) = cosAcosB ∓sinAsinB
tan(A ± B) = tanA ± tanB
1 ∓tanAtanB
sin2θ = 2sinθ cosθ
cos2θ = cos2 θ −sin2 θ
cos2θ = 2cos2 θ −1
cos2θ = 1 −2sin2 θ
sin3θ = 3sinθ −4sin3 θ
cos3θ = 4cos3 θ −3cosθ
cos2 θ = 1
2(1 + cos2θ)
sin2 θ = 1
2(1 −cos2θ).

4.10
Perimeter Relationships
31
4.10 Perimeter Relationships
Finally, with reference to Fig. 4.10, we come to the relationships that integrate an-
gles with the perimeter of a triangle:
s = 1
2(a + b + c)
sin
A
2

=

(s −b)(s −c)
bc
sin
B
2

=

(s −c)(s −a)
ca
sin
C
2

=

(s −a)(s −b)
ab
cos
A
2

=

s(s −a)
bc
cos
B
2

=

s(s −b)
ca
cos
C
2

=

s(s −c)
ab
sinA = 2
bc
	
s(s −a)(s −b)(s −c)
sinB = 2
ca
	
s(s −a)(s −b)(s −c)
sinC = 2
ab
	
s(s −a)(s −b)(s −c).
4.11 Summary
No derivations have been given for the formulae in this chapter, and the reader who
is really interested, will ﬁnd plenty of books that show their origins. Hopefully, the
formulae will be a useful reference when studying the rest of the book, and perhaps
will be of some use when solving problems in the future.
I should draw the reader’s attention to two maths books that I have found a source
of information and inspiration: Handbook of Mathematics and Computational Sci-
ence by John Harris and Horst Stocker (1998), and Mathematics from the Birth of
Numbers by Jan Gullberg (1997).

Chapter 5
Coordinate Systems
5.1 Introduction
This chapter revises Cartesian coordinates, axial systems, the distance between two
points in space, and the area of simple 2D shapes. It also covers polar, spherical
polar and cylindrical coordinate systems.
5.2 Background
René Descartes (1596–1650) is often credited with the invention of the xy-plane, but
Pierre de Fermat (1601–1665) was probably the ﬁrst inventor. In 1636 Fermat was
working on a treatise titled Ad locus planos et solidos isagoge, which outlined what
we now call “analytic geometry”. Unfortunately, Fermat never published his treatise,
although he shared his ideas with other mathematicians such as Blaise Pascal (1623–
1662). At the same time, Descartes devised his own system of analytic geometry
and in 1637 published his results in the prestigious journal Géométrie. In the eyes
of the scientiﬁc world, the publication date of a technical paper determines when a
new idea or invention is released into the public domain. Consequently, ever since
this publication Descartes has been associated with the xy-plane, which is why it is
called the Cartesian plane.
The Cartesian plane is such a simple idea that it is strange that it took so long to
be discovered. And even though it was invented almost 400 years ago, it is central
to computer graphics. However, although it is true that René Descartes showed how
an orthogonal coordinate system could be used for graphs and coordinate geometry,
coordinates had been used by ancient Egyptians, almost 2000 years earlier!
If Fermat had been more efﬁcient in publishing his research results, the xy-plane
could have been called the Fermatian plane! (Boyer and Merzbach, 1989)
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_5, © Springer-Verlag London 2014
33

34
5
Coordinate Systems
Fig. 5.1 The equation
y = 0.5x + 1 using the
xy-plane
5.3 The Cartesian Plane
The Cartesian plane provides a mechanism for visualising pairs of related vari-
ables graphically. The variables are normally x and y, as used in functions such
as y = 0.5x + 1. On the plane, every value of x has a corresponding value of y,
which are located using intersecting axes as shown in Fig. 5.1. The set of points
create a familiar straight line associated with equations of the form y = mx + c.
By convention, the axis for the independent variable x is horizontal, and the depen-
dent variable y is vertical. The axes intersect at 90◦at a point called the origin. As
previously mentioned, Descartes suggested that the letters x and y should be used
to represent variables, and letters at the other end of the alphabet should stand for
numbers. Which is why equations such as y = ax2 + bx + c, are written this way.
Measurements to the right and left of the origin are positive and negative respec-
tively; so too, are measurements above and below the origin. The axes are said to be
“oriented” as the x-axis rotates anticlockwise towards the y-axis. They could have
been oriented in the opposite sense, with the y-axis rotating anticlockwise towards
the x-axis. I will say more about this when discussing geometric algebra.
Any point P on the Cartesian plane is identiﬁed by an ordered pair of numbers
(x,y) where x and y are called the Cartesian coordinates of P . Mathematical func-
tions and geometric shapes can then be represented as lists of coordinates inside a
computer program.
5.4 Function Graphs
A wide variety of functions, such as
linear:
y = mx + c,
quadratic:
y = ax2 + bx + c,
cubic:
y = ax3 + bx2 + cx + d,
trigonometric:
y = a sinx,
create familiar graphs that readily identify the function’s origins. Linear functions
are straight lines; quadratics are parabolas; cubics have an “S” shape; and trigono-
metric functions often possess a wave-like trace. Such graphs are used in computer

5.5
Geometric Shapes
35
Fig. 5.2 A function curve
relating brightness to frame
number
animation to control the movement of objects, lights and the virtual camera. But
instead of depicting the relationship between x and y, the graphs show the relation-
ship between an activity such as movement, rotation, size, brightness, colour, etc.,
with time.
Figure 5.2 shows an example where the horizontal axis marks the progress of
time in animation frames, and the vertical axis records the corresponding brightness
of a virtual light source. Such a function forms part of the animator’s user interface,
and communicates in a very intuitive manner the brightness of the light source for
every frame of animation. The animator can then make changes to the function with
the aid of interactive software tools.
5.5 Geometric Shapes
In computer graphics, 2D shapes and 3D objects have a numerical description of
some sort. Shapes include polygons, circles, arbitrary curves, mathematical func-
tions, fractals, etc., and objects can be faceted, smooth, bumpy, furry, gaseous, etc.
For the moment though, we will only consider 2D shapes.
5.5.1 Polygonal Shapes
A polygon is constructed from a chain of vertices (points) as shown in Fig. 5.3.
A straight line is assumed to connect each pair of neighbouring vertices; intermedi-
ate points on the line are not explicitly stored. There is no convention for starting a
chain of vertices, but software will often dictate whether polygons have a clockwise
or anticlockwise vertex sequence. The vertices in Fig. 5.3 are in an anticlockwise
sequence, and shown in a tabular form, where the starting vertex is (1,1), although
this is arbitrary.
We can now subject this chain of coordinates to a variety of arithmetic and math-
ematical operations. For example, if we double the values of x and y and redraw the
vertices, we discover that the shape’s geometric integrity is preserved, but its size
is doubled relative to the origin. Similarly, if we divide the values of x and y by 2,

36
5
Coordinate Systems
Fig. 5.3 A simple polygon
created with four vertices
shown in the table
the shape is still preserved, but its size is halved relative to the origin. On the other
hand, if we add 1 to every x-coordinate, and 2 to every y-coordinate, and redraw the
vertices, the shape’s size remains the same but is displaced 1 unit horizontally and
2 units vertically. This arithmetic manipulation of vertices is the basis of shape and
object transforms and is described in Chap. 7.
5.5.2 Areas of Shapes
The area of a polygonal shape is readily calculated from its chain of coordinates.
For example, given the following list of coordinates:
x
y
x0
y0
x1
y1
x2
y2
x3
y3
the area is computed by
area = 1
2

(x0y1 −x1y0) + (x1y2 −x2y1) + (x2y3 −x3y2) + (x3y0 −x0y3)

.
You will observe that the calculation sums the results of multiplying an x by
the next y, minus the next x by the previous y. When the last vertex is selected it is
paired with the ﬁrst vertex to complete the process. The result is then halved to reveal
the area. As a simple test, let’s apply this formula to the shape described in Fig. 5.3:
area = 1
2

(1 × 1 −3 × 1) + (3 × 2 −3 × 1) + (3 × 3 −1 × 2) + (1 × 1 −1 × 3)

area = 1
2[−2 + 3 + 7 −2] = 3

5.6
Theorem of Pythagoras in 2D
37
Fig. 5.4 Calculating the
distance between two points
which, by inspection, is the true area. The beauty of this technique is that it works
with any number of vertices and any arbitrary shape. We discover how this works in
Chap. 6.
Another feature of the technique is that if the set of coordinates is clockwise, the
area is negative; which means that the calculation computes vertex orientation as
well as area. To illustrate this feature, the original vertices are reversed to a clock-
wise sequence as follows:
area = 1
2

(1 × 3 −1 × 1) + (1 × 2 −3 × 3) + (3 × 1 −3 × 2) + (3 × 1 −1 × 1)

area = 1
2[2 −7 −3 + 2] = −3.
The minus sign conﬁrms that the vertices are in a clockwise sequence.
5.6 Theorem of Pythagoras in 2D
The theorem of Pythagoras is used to calculate the distance between two points.
Figure 5.4 shows two arbitrary points P1(x1,y1) and P2(x2,y2). The distance Δx =
x2 −x1 and Δy = y2 −y1. Therefore, the distance d between P1 and P2 is given by
d =

(Δx)2 + (Δy)2.
5.7 3D Cartesian Coordinates
Two coordinates are required to locate a point on the 2D Cartesian plane, whereas
three coordinates are required for 3D space. The corresponding axial system re-
quires three mutually perpendicular axes; however, there are two ways to add the
extra z-axis. Figure 5.5 shows the two orientations, which are described as left-
and right-handed axial systems. The left-handed system permits us to align our left
hand with the axes such that the thumb aligns with the x-axis, the ﬁrst ﬁnger aligns

38
5
Coordinate Systems
Fig. 5.5 (a) A left-handed
system. (b) A right-handed
system
Fig. 5.6 A right-handed
axial system showing the
coordinates of a point P
with the y-axis, and the middle ﬁnger aligns with the z-axis. The right-handed sys-
tem permits the same system of alignment, but using our right hand. The choice
between these axial systems is arbitrary, but one should be aware of the system em-
ployed by commercial computer graphics packages. The main problem arises when
projecting 3D points onto a 2D plane, which has an oriented axial system. This will
become clear when we look at perspective projections. A right-handed system is
employed throughout this book, as shown in Fig. 5.6, which also shows a point P
with its coordinates. It also worth noting that handedness has no meaning in spaces
with 4 dimensions or more.
5.7.1 Theorem of Pythagoras in 3D
The theorem of Pythagoras in 3D is a natural extension of the 2D rule. In fact,
it even works in higher dimensions. Given two arbitrary points P1(x1,y1,z1) and
P2(x2,y2,z2), we compute Δx = x2 −x1, Δy = y2 −y1 and Δz = z2 −z1, from
which the distance d between P1 and P2 is given by
d =

(Δx)2 + (Δy)2 + (Δz)2.

5.8
Polar Coordinates
39
Fig. 5.7 2D polar
coordinates
5.7.2 3D Polygons
The simplest 3D polygon is a triangle, which is always planar, i.e. the three vertices
lie on a common plane. Planarity is very important in computer graphics because
rendering algorithms normally assume that polygons are planar. For instance, it is
quite easy to deﬁne a quadrilateral in 3D where the vertices are not located on one
plane. When such a polygon is rendered and animated, spurious highlights can re-
sult, simply because the geometric techniques (which assume the polygon is planar)
give rise to errors. This is why complex polygons are reduced to a collection of
triangles.
5.7.3 Euler’s Rule
In 1619, Descartes discovered quite a nice relationship between vertices, edges and
the faces of a 3D polygonal object:
faces + vertices = edges + 2.
As a simple test, consider a cube: it has 12 edges, 6 faces and 8 vertices, which
satisﬁes this equation. This rule can be applied to a geometric database to discover
whether it contains any spurious features. Unfortunately for Descartes, for some
unknown reason, the rule is named after Euler!
5.8 Polar Coordinates
Polar coordinates are used for handling data containing angles, rather than linear
offsets. Figure 5.7 shows the convention used for 2D polar coordinates, where the
point P(x,y) has equivalent polar coordinates P(ρ,θ), where:

40
5
Coordinate Systems
Fig. 5.8 Spherical polar
coordinates
x = ρ cosθ
y = ρ sinθ
ρ =

x2 + y2
θ = arctan
y
x

.
For example, the point (3,4) has polar coordinates (5,53.13◦):
ρ =
	
32 + 42 = 5
θ = arctan
4
3

≈53.13◦.
These conversion formulae work only for the ﬁrst quadrant. The atan2 function
should be used in a software environment, as it works with all four quadrants.
5.9 Spherical Polar Coordinates
Figure 5.8 shows one convention used for spherical polar coordinates, where the
point P(x,y,z) has equivalent polar coordinates P(ρ,φ,θ), where:
x = ρ sinφ cosθ
y = ρ sinφ sinθ
z = ρ cosφ
ρ =

x2 + y2 + z2
φ = arccos
 z
ρ

θ = arctan
y
x

.

5.10
Cylindrical Coordinates
41
Fig. 5.9 Cylindrical
coordinates
For example, the point (3,4,0) has spherical polar coordinates (5,90◦,53.13◦):
ρ =
	
32 + 42 + 02 = 5
φ = arccos
0
5

= 90◦
θ = arctan
4
3

≈53.13◦.
Take great care when using spherical coordinates, as authors often swap φ with θ,
as well as the alignment of the Cartesian axes; not to mention using a left-handed
axial system in preference to a right-handed system!
5.10 Cylindrical Coordinates
Figure 5.9 shows one convention used for cylindrical coordinates, where the point
P(x,y,z) has equivalent cylindrical coordinates P(ρ,θ,z), where
x = ρ cosθ
y = ρ sinθ
z = z
ρ =

x2 + y2
θ = arctan
y
x

.
For example, the point (3,4,6) has cylindrical coordinates (5,53.13◦,6):
ρ =
	
32 + 42 = 5

42
5
Coordinate Systems
θ = arctan
4
3

≈53.13◦
z = 6.
Again, be careful when using cylindrical coordinates to ensure compatibility.
5.11 Summary
All of the above coordinate systems are used in computer graphics. Unfortunately,
there are no rigid standards, so be prepared to adjust the formulae used in other
books and technical papers.

Chapter 6
Vectors
6.1 Introduction
This chapter provides a comprehensive introduction to vectors. It covers 2D and
3D vectors, unit vectors, position vectors, Cartesian vectors, vector magnitude, vec-
tor products, and area calculations. It also shows how vectors are used in lighting
calculations and back-face detection.
6.2 Background
Vectors are a relatively new arrival to the world of mathematics, dating only from
the 19th century. They provide us with some elegant and powerful techniques for
computing angles between lines and the orientation of surfaces. They also provide
a coherent framework for computing the behaviour of dynamic objects in computer
animation and illumination models in rendering.
We often employ a single number to represent quantities that we use in our daily
lives such as height, age, shoe size, waist and chest measurement. The magnitude of
this number depends on our age and whether we use metric or imperial units. Such
quantities are called scalars. In computer graphics, scalar quantities include colour,
height, width, depth, brightness, number of frames, etc.
On the other hand, there are some things that require more than one number to
represent them: wind, force, weight, velocity and sound, are just a few examples.
These cannot be represented accurately by a single number. For example, any sailor
knows that wind has a magnitude and a direction. The force we use to lift an ob-
ject also has a value and a direction. Similarly, the velocity of a moving object is
measured in terms of its speed (e.g. miles per hour), and a direction such as north-
west. Sound, too, has intensity and a direction. Such quantities are called vectors.
In computer graphics, vectors generally require two or three numbers, and these are
the only type we consider in this chapter.
Mathematicians such as Caspar Wessel (1745–1818), Jean Argand (1768–1822)
and John Warren (1796–1852) were simultaneously exploring complex numbers
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_6, © Springer-Verlag London 2014
43

44
6
Vectors
and their graphical representation. And in 1843, Sir William Rowan Hamilton
(1788–1856) made his breakthrough with quaternions. In 1853, Hamilton published
his book Lectures on Quaternions in which he described terms such as “vector”,
“transvector” and “provector”. Hamilton’s work was not widely accepted until in
1881, when the American mathematician Josiah Gibbs (1839–1903), published his
treatise Vector Analysis, describing modern vector analysis.
Gibbs was not a fan of the imaginary quantities associated with Hamilton’s
quaternions, but saw the potential of creating a vectorial system from the imagi-
nary i, j and k into the unit basis vectors i, j and k, which is what we use today.
Some mathematicians were not happy with the direction mathematics had taken.
Hermann Gunther Grassmann (1809–1877) for example, believed that his own ge-
ometric calculus was far superior to Hamilton’s quaternions, but he died without
managing to convince any of his fellow mathematicians. Fortunately, William King-
don Clifford (1845–1879) recognised the brilliance of Grassmann’s ideas, and for-
malised what today has become known as geometric algebra.
With the success of Gibbs’ vector analysis, quaternions faded into obscurity, only
to be rediscovered in the 1970s when they were employed by the ﬂight simulation
community to control the dynamic behaviour of a simulator’s motion platform. A
decade later they found their way into computer graphics where they are used for
rotations about arbitrary axes. A decade later Clifford’s geometric algebra was dis-
covered by the computer graphics community, and today it is beginning to extend
traditional vector techniques.
Now this does not mean that vector analysis is dead—far from it. Vast quantities
of computer graphics software depends upon the vector mathematics developed over
a century ago, and will continue to employ it for many years to come. Therefore,
this current chapter is very important for the reader. Nevertheless, geometric algebra
is destined to emerge as a powerful mathematical framework that could eventually
replace vector analysis some day, which is why Chap. 12 is also very important.
6.3 2D Vectors
6.3.1 Vector Notation
A scalar, such as x, is just a name for a single numeric quantity. However, as a
vector contains two or more numbers, its symbolic name is printed using a bold
font to distinguish it from a scalar variable. Examples being n, i and q.
When a scalar variable is assigned a value, we use the standard algebraic nota-
tion:
x = 3.
However, a vector can be stored as a column or as a row—and in this text I use
column vectors:
n =
3
4

.

6.3
2D Vectors
45
Fig. 6.1 A vector
represented by a line
segment. However, although
the vector has magnitude, it
does not have direction
The numbers 3 and 4 are the components of n, and their position within the brackets
is important. A row vector places the components horizontally:
n = [3
4].
The difference between the two, is only appreciated in the context of matrices.
Sometimes it is convenient—for presentation purposes—to write a column vector
as a row vector, in which case, it is written
n = [3
4]T ,
where the superscript T reminds us that n is really a transposed column vector.
6.3.2 Graphical Representation of Vectors
As vectors encode direction, as well as magnitude, an arrow is often used to indicate
direction, and a number to represent magnitude. Such a scheme is often used in
weather maps. And although this is a useful visual interpretation of such data, it is
not practical for algebraic manipulation.
Cartesian coordinates provide an excellent mechanism for representing vectors,
and permits them to be incorporated within the framework of mathematics. Fig-
ure 6.1 shows a short line segment which could be used to represent a vector. The
length of the line represents the vector’s magnitude, and the line’s orientation en-
codes its direction. But as you can see from the ﬁgure, the line does not have a
direction. Even if we attach an arrowhead to the line, which is standard practice for
annotating vectors in books and scientiﬁc papers, the arrowhead has no mathemati-
cal reality.
Using Cartesian coordinates, the line’s direction is determined by ﬁrst identifying
the vector’s tail and then measuring its components along the x- and y-axis. For
example, in Fig. 6.2 the vector r has its tail deﬁned by (x1,y1) = (1,2), and its head
by (x2,y2) = (3,4). Vector s has its tail deﬁned by (x3,y3) = (5,3), and its head by
(x4,y4) = (3,1). The x- and y-components for r are computed as follows

46
6
Vectors
Fig. 6.2 Two vectors r and s
have the same magnitude but
opposite directions
xr = x2 −x1 = 3 −1 = 2
yr = y2 −y1 = 4 −2 = 2
and the components for s are computed as follows
xs = x4 −x3 = 3 −5 = −2
ys = y4 −y3 = 1 −3 = −2.
It is the negative value of xs and ys that encode the vector’s direction. In general, if
the coordinates of a vector’s head and tail are (xh,yh) and (xt,yt) respectively, its
components Δx and Δy are given by
Δx = xh −xt
Δy = yh −yt.
One can readily see from this notation that a vector does not have an absolute po-
sition. It does not matter where we place a vector, so long as we preserve its length
and orientation, its components will not alter.
6.3.3 Magnitude of a Vector
The magnitude or length of a vector r is written |r| and computed using the theorem
of Pythagoras:
|r| =

(Δx)2 + (Δy)2.
To illustrate these ideas, consider a vector deﬁned by (xh,yh) = (4,5) and (xt,yt) =
(1,1). The x- and y-components are 3 and 4 respectively. Therefore its magnitude
equals
√
32 + 42 = 5.
Figure 6.3 shows eight vectors, and their geometric properties are listed in Ta-
ble 6.1.

6.4
3D Vectors
47
Fig. 6.3 Eight vectors whose
coordinates are shown in
Table 6.1
Table 6.1 Values associated
with the eight vectors in
Fig. 6.3
xh
yh
xt
yt
Δx
Δy
|vector|
2
0
0
0
2
0
2
0
2
0
0
0
2
2
−2
0
0
0
−2
0
2
0
−2
0
0
0
−2
2
1
1
0
0
1
1
√
2
−1
1
0
0
−1
1
√
2
−1
−1
0
0
−1
−1
√
2
1
−1
0
0
1
−1
√
2
6.4 3D Vectors
The above vector examples are in 2D, but it is easy to extend this notation to embrace
an extra dimension. Figure 6.4 shows a 3D vector r with its head, tail, components
and magnitude annotated. The vector, its components and magnitude are given by
r = [Δx
Δy
Δz]T
Δx = xh −xt
Δy = yh −yt
Δz = zh −zt
|r| =

(Δx)2 + (Δy)2 + (Δz)2.
As 3D vectors play a very important role in computer animation, all future examples
are three-dimensional.

48
6
Vectors
Fig. 6.4 The vector r has
components Δx, Δy, Δz,
which are the differences
between the head and tail
coordinates
6.4.1 Vector Manipulation
As vectors are different to scalars, there are rules to control how the two mathe-
matical entities interact with one another. For instance, we need to consider vector
addition, subtraction and products, and how a vector is scaled.
6.4.2 Scaling a Vector
Given a vector n, 2n means that the vector’s components are scaled by a factor of 2.
For example, given
n =
⎡
⎣
3
4
5
⎤
⎦,
then
2n =
⎡
⎣
6
8
10
⎤
⎦
which seems logical. Similarly, if we divide n by 2, its components are halved. Note
that the vector’s direction remains unchanged—only its magnitude changes.
In general, given
n =
⎡
⎣
n1
n2
n3
⎤
⎦,
then
λn =
⎡
⎣
λn1
λn2
λn3
⎤
⎦,
where λ ∈R.
There is no obvious way we can resolve the expression 2 + n, for it is not clear
which component of n is to be increased by 2. However, if we can add a scalar to an
imaginary (e.g. 2 + 3i), why can’t we add a scalar to a vector (e.g. 2 + n)? Well, the
answer to this question is two-fold: First, if we change the meaning of “add” to mean
“associated with”, then there is nothing to stop us from “associating” a scalar with a
vector, like complex numbers. Second, the axioms controlling our algebra must be
clear on this matter. Unfortunately, the axioms of traditional vector analysis do not
support the “association” of scalars with vectors in this way. However, geometric
algebra does! Furthermore, geometric algebra even permits division by a vector,
which does sound strange. Consequently, whilst reading the rest of this chapter keep
an open mind about what is permitted, and what is not permitted. At the end of the
day, virtually anything is possible, so long as we have a well-behaved axiomatic
system.

6.4
3D Vectors
49
Fig. 6.5 Vector addition
r + s
6.4.3 Vector Addition and Subtraction
Given vectors r and s, r ± s is deﬁned as
r =
⎡
⎣
xr
yr
zr
⎤
⎦,
s =
⎡
⎣
xs
ys
zs
⎤
⎦,
then
r ± s =
⎡
⎣
xr ± xs
yr ± ys
zr ± zs
⎤
⎦.
Vector addition is commutative:
a + b = b + a
e.g.
⎡
⎣
1
2
3
⎤
⎦+
⎡
⎣
4
5
6
⎤
⎦=
⎡
⎣
4
5
6
⎤
⎦+
⎡
⎣
1
2
3
⎤
⎦.
However, like scalar subtraction, vector subtraction is not commutative
a −b ̸= b −a
e.g.
⎡
⎣
4
5
6
⎤
⎦−
⎡
⎣
1
2
3
⎤
⎦̸=
⎡
⎣
1
2
3
⎤
⎦−
⎡
⎣
4
5
6
⎤
⎦.
Let’s illustrate vector addition and subtraction with two examples. Figure 6.5 shows
the graphical interpretation of adding two vectors r and s. Note that the tail of vec-
tor s is attached to the head of vector r. The resultant vector t = r + s is deﬁned by
adding the corresponding components of r and s together. Figure 6.6 shows a graph-
ical interpretation for r −s. This time, the components of vector s are reversed to
produce an equal and opposite vector. Then it is attached to r and added as described
above.
6.4.4 Position Vectors
Given any point P(x,y,z), a position vector p is created by assuming that P is
the vector’s head and the origin is its tail. As the tail coordinates are (0,0,0) the

50
6
Vectors
Fig. 6.6 Vector subtraction
r −s
vector’s components are x,y,z. Consequently, the vector’s magnitude |p| equals
	
x2 + y2 + z2.
Example 6.1
Calculate the magnitude of the position vector p, for the point
P(4,5,6):
p = [4
5
6]T ,
therefore,
|p| =
	
42 + 52 + 62 ≈20.88.
6.4.5 Unit Vectors
By deﬁnition, a unit vector has a magnitude of 1. A simple example is i, where
i = [1
0
0]T ,
where |i| = 1.
Unit vectors are extremely useful in the product of two vectors, where their mag-
nitudes are required; and if these are unit vectors, the computation is greatly simpli-
ﬁed. Also, in computer graphics software, vectors are used to control the orientation
of surfaces, light sources and the virtual camera; and if these are unit vectors, com-
putation time is reduced.
Converting a vector into a unit form is called normalising, and is achieved by
dividing its components by the vector’s magnitude. To formalise this process, con-
sider a vector r = [x y z]T , with magnitude |r| =
	
x2 + y2 + z2. The unit form of
r is given by
ˆr = 1
|r|[x,y,z]T .
This is conﬁrmed by showing that the magnitude of ˆr is 1:
|ˆr| =
 x
|ˆr|
2
+
 y
|ˆr|
2
+
 z
|ˆr|
2
= 1
|ˆr|

x2 + y2 + z2
|ˆr| = 1.

6.4
3D Vectors
51
Example 6.2 Convert r into a unit vector.
r = [1
2
3]T
|r| =
	
12 + 22 + 32 =
√
14
ˆr =
1
√
14
[1
2
3]T ≈[0.267
0.535
0.802]T .
6.4.6 Cartesian Vectors
A Cartesian vector is constructed from three unit vectors: i, j and k, aligned with
the x-, y- and z-axis, respectively:
i = [1
0
0]T ,
j = [0
1
0]T ,
k = [0
0
1]T .
Therefore, any vector aligned with the x-, y- or z-axis is a scalar multiple of the
associated unit vector. For example, 10i is aligned with the x-axis, with a magnitude
of 10. 20k is aligned with the z-axis, with a magnitude of 20. By employing the
rules of vector addition and subtraction, we can compose a vector r by summing
three scaled Cartesian unit vectors as follows
r = ai + bj + ck
which is equivalent to
r = [a
b
c]T
where the magnitude of r is
|r| =
	
a2 + b2 + c2.
Any pair of Cartesian vectors, such as r and s, can be combined as follows
r = ai + bj + ck
s = di + ej + f k
r ± s = (a ± d)i + (b ± e)j + (c ± f )k.
Example 6.3 Compute the magnitude of r + s.
r = 2i + 3j + 4k
s = 5i + 6j + 7k
r + s = 7i + 9j + 11k
|r + s| =
	
72 + 92 + 112 ≈15.84.

52
6
Vectors
Fig. 6.7 The projection of r
on s creates the basis for the
scalar product
6.4.7 Vector Products
Vectorial quantities have been used for centuries to resolve problems of involving
groups of forces, but it was the product of directed lines that remained a mystery,
until Hamilton invented quaternions and their bi-product: vectors.
The product of two scalars is very familiar: for example, 6 × 7 or 7 × 6 = 42.
We often visualise this operation, as a rectangular area where 6 and 7 are the di-
mensions of a rectangle’s sides, and 42 is the area. However, when we consider the
product of two vectors, we are multiplying two 3D lines together, which is not an
easy operation to visualise. Vector analysis provides two ways to multiply vectors
together: one gives rise to a scalar result, and the other a vector result. We will start
with the scalar product.
6.4.8 Scalar Product
We could multiply two vectors r and s using the product of their magnitudes: |r||s|.
Although this is a valid operation, it does not get us anywhere, because it ignores
the orientation of the vectors—which is one of their important features. The concept,
however, is readily developed into a useful operation by including the angle between
the vectors.
Figure 6.7 shows two vectors r and s that have been drawn, for convenience,
such that their tails touch. Taking s as the reference vector—which is an arbitrary
choice—we compute the projection of r on s, which takes into account their relative
orientation. The length of r on s is |r|cosβ. We can now multiply the magnitude of
s by the projected length of r: |s||r|cosβ This scalar product is written
r • s = |r||s|cosβ.
(6.1)
The dot “•” stands for the scalar product, to distinguish it from the vector prod-
uct, which, we will discover, employs a “×” symbol. Because of this symbol, the
scalar product is often referred to as the dot product.
So far we have only deﬁned what we mean by the dot product. We now need to
discover how to compute it. Fortunately, everything is in place to perform this task.

6.4
3D Vectors
53
To begin with, we deﬁne two Cartesian vectors r and s, and proceed to multiply
them together using the dot product deﬁnition:
r = ai + bj + ck
s = di + ej + f k
therefore,
r • s = (ai + bj + ck) • (di + ej + f k)
= ai • (di + ej + f k)
+ bj • (di + ej + f k)
+ ck • (di + ej + f k)
r • s = adi • i + aei • j + af i • k
+ bdj • i + bej • j + bf j • k
+ cdk • i + cek • j + cf k • k.
Before we proceed any further, we can see that we have created various dot prod-
uct terms such as i • i, i • j,i • k, etc. These terms can be divided into two groups:
those that reference the same unit vector, and those that reference different unit vec-
tors.
Using the deﬁnition of the dot product (6.1), terms such as i•i, j•j and k•k = 1,
because the angle between i and i, j and j, or k and k, is 0◦; and cos0◦= 1. But as
the other vector combinations are separated by 90◦, and cos90◦= 0, all remaining
terms collapse to zero. Bearing in mind that the magnitude of a unit vector is 1, we
can write
r • s = |r||s|cosβ = ad + be + cf.
The result conﬁrms that the dot product is indeed a scalar quantity. Now let’s see
how it works in practice.
Example 6.4 Find the angle between r and s.
r = [2
0
4]T
s = [5
6
10]T
|r| =
	
22 + 02 + 42 ≈4.472
|s| =
	
52 + 62 + 102 ≈12.689.
Therefore,
|r||s|cosβ = 2 × 5 + 0 × 6 + 4 × 10 = 50
12.689 × 4.472 × cosβ = 50

54
6
Vectors
Fig. 6.8 The geometry
associated with Lambert’s
law
cosβ =
50
12.689 × 4.472 ≈0.8811
β = cos−1 0.8811 ≈28.22◦.
The angle between the two vectors is approximately 28.22◦.
It is worth pointing out that the angle returned by the dot product ranges be-
tween 0◦and 180◦. This is because, as the angle between two vectors increases
beyond 180◦the returned angle β is always the smallest angle associated with the
geometry.
6.4.9 The Dot Product in Lighting Calculations
Lambert’s law states that the intensity of illumination on a diffuse surface is pro-
portional to the cosine of the angle between the surface normal vector and the light
source direction.
Example 6.5
Figure 6.8 shows a scenario where a light source is located at (20,
20, 40), and the illuminated point is (0, 10, 0). In this situation we are interested
in calculating cosβ, which, when multiplied by the light source intensity, gives the
incident light intensity on the surface. To begin with, we are given the normal vector
ˆn to the surface. In this case ˆn is a unit vector: i.e. |ˆn| = 1:
ˆn = [0
1
0]T .
The direction of the light source from the surface is deﬁned by the vector s:
s =
⎡
⎣
20 −0
20 −10
40 −0
⎤
⎦=
⎡
⎣
20
10
40
⎤
⎦
|s| =
	
202 + 102 + 402 ≈45.826
|ˆn||s|cosβ = 0 × 20 + 1 × 10 + 0 × 40 = 10

6.4
3D Vectors
55
Fig. 6.9 The angle between
the surface normal and the
camera’s line of sight
determines the polygon’s
visibility
1 × 45.826 × cosβ = 10
cosβ =
10
45.826 ≈0.218.
Therefore the light intensity at the point (0,10,0) is 0.218 of the original light
intensity at (20,20,40), but does not take into account the attenuation due to the
inverse-square law of light propagation.
6.4.10 The Scalar Product in Back-Face Detection
A simple way to identify back-facing polygons relative to the virtual camera, is
to compute the angle between the polygon’s surface normal and the line of sight
between the camera and the polygon. If this angle is less than 90◦, the polygon
is visible; if it equals or exceeds 90◦, the polygon is invisible. This geometry is
shown in Fig. 6.9. Although it is obvious from Fig. 6.9 that the right-hand polygon
is invisible to the camera, let’s prove algebraically that this is so.
Example 6.6 The virtual camera is located at (0,0,0) and the polygon’s vertex is
(10,10,40). The normal vector is n = [5 5 −2]T .
n = [5
5
−2]T
|n| =
	
52 + 52 + (−2)2 ≈7.348.
The camera vector c is
c =
⎡
⎣
0 −10
0 −10
0 −40
⎤
⎦=
⎡
⎣
−10
−10
−40
⎤
⎦
|c| =
	
(−10)2 + (−10)2 + (−40)2 ≈42.426
therefore,

56
6
Vectors
|n||c|cosβ = 5 × (−10) + 5 × (−10) + (−2) × (−40)
7.348 × 42.426 × cosβ = −20
cosβ =
−20
7.348 × 42.426 ≈−0.0634
β = cos−1(−0.0634) ≈93.635◦
which shows that the polygon is invisible for the camera.
6.4.11 The Vector Product
As mentioned above, there are two vector products: the ﬁrst is the scalar product,
and the second is the vector product, which is also called the cross product due to
the “×” symbol used in its notation. It is based on the assumption that the product
of two vectors r and s, gives rise to a third vector t:
r × s = t
where
|t| = |r||s|sinβ
(6.2)
and β is the angle between r and s.
We will discover that the vector t is normal (90◦) to the plane containing the
vectors r and s. Which makes it an ideal way of computing the surface normal to a
polygon. Once again, let’s deﬁne two vectors and proceed to multiply them together
using the deﬁnition of the cross product:
r = ai + bj + ck
s = di + ej + f k
therefore,
r × s = (ai + bj + ck) × (di + ej + f k)
= ai × (di + ej + f k)
+ bj × (di + ej + f k)
+ ck × (di + ej + f k)
r × s = adi × i + aei × j + af i × k
+ bdj × i + bej × j + bf j × k
+ cdk × i + cek × j + cf k × k.

6.4
3D Vectors
57
As we found with the dot product, there are two groups of vector terms: those
that reference the same unit vector, and those that reference different unit vectors.
Using the deﬁnition for the cross product (6.2), operations such as i × i, j × j and
k × k result in a vector whose magnitude is 0. This is because the angle between
the vectors is 0◦, and sin0◦= 0. Consequently these terms disappear and we are left
with
r × s = aei × j + af i × k + bdj × i + bf j × k + cdk × i + cek × j.
(6.3)
The mathematician Sir William Rowan Hamilton struggled for many years when
working on quaternions to resolve the meaning of a similar result. At the time,
he was not using vectors, as they had yet to be deﬁned, but the imaginary terms
i, j and k. Hamilton’s problem was to resolve the products ij, jk, ki and their
opposites ji, kj and ik. What did the products mean? He reasoned that ij = k,
jk = i and ki = j, but could not resolve their opposites. One day in 1843, when
he was out walking, thinking about this problem, he thought the impossible: ij = k,
but ji = −k, jk = i, but kj = −i, and ki = j, but ik = −j. To his surprise, this
worked, but it contradicted the commutative multiplication law of scalars where
6 × 7 = 7 × 6. We now accept that the commutative multiplication law is there to be
broken!
Although Hamilton had discovered 3D complex numbers, to which he gave the
name quaternion, they were not popular with everyone. And as mentioned earlier,
Josiah Gibbs saw that converting the imaginary i, j and k terms into the unit vectors
i, j and k created a stable algebra for manipulating vectors, and for over a century
we have been using Gibbs’ vector notation.
The question we must ask is “Was Gibbs right?” to which the answer is probably
“no!” The reason for this is that although the scalar product works in space of any
number of dimensions, the vector (cross) product does not. It obviously does not
work in 2D as there is no direction for the resultant vector. It obviously works in
3D, but in 4D and above there is no automatic spatial direction for the resultant
vector. So, the vector product is possibly a special condition of some other structure.
Hermann Grassmann knew this but did not have the mathematical reputation to
convince his fellow mathematicians.
In Chap. 12 on geometric algebra, we return to this problem and discover that
the terms i × j, j × k, k × i and their opposites are entities in there own right. We
also discover that geometric algebra incorporates the 3D vector product and a much
better version of quaternions.
For the moment though, let’s continue with Hamilton’s rules and reduce the cross
product terms of (6.3) to
r × s = aek −af j −bdk + bf i + cdj −cei.
(6.4)
Equation (6.4) can be tidied up to bring like terms together:
r × s = (bf −ce)i + (cd −af )j + (ae −bd)k.
(6.5)

58
6
Vectors
Now let’s repeat the original vector equations to see how (6.5) is computed:
r = ai + bj + ck
s = di + ej + f k
r × s = (bf −ce)i + (cd −af )j + (ae −bd)k.
(6.6)
To compute the i scalar term we consider the scalars associated with the other
two unit vectors, i.e. b, c, e, and f , and cross-multiply and subtract them to form
(bf −ce).
To compute the j scalar term we consider the scalars associated with the other
two unit vectors, i.e. a, c, d, and f , and cross-multiply and subtract them to form
(cd −af ).
To compute the k scalar term we consider the scalars associated with the other
two unit vectors, i.e. a, b, d, and e, and cross-multiply and subtract them to form
(ae −bd).
The middle operation seems out of step with the other two, but in fact it pre-
serves a cyclic symmetry often found in mathematics. Nevertheless, some authors
reverse the sign of the j scalar term and cross-multiply and subtract the terms to
produce −(af −cd) which maintains a visual pattern for remembering the cross-
multiplication. Equation (6.6) now becomes
r × s = (bf −ce)i −(af −cd)j + (ae −bd)k.
(6.7)
However, we now have to remember to introduce a negative sign for the j scalar
term!
Although we have not yet covered determinants, their notation allows us to write
(6.7) as
r × s =

b
c
e
f
i −

a
c
d
f
j +

a
b
d
e
k.
(6.8)
A 2 × 2 determinant is the difference between the product of the diagonal terms.
Therefore, to derive the cross product of two vectors we ﬁrst write the vectors
in the correct sequence. Remembering that r × s does not equal s × r. Second, we
compute the three scalar terms and form the resultant vector, which is perpendicular
to the plane containing the original vectors.
Let’s illustrate the vector product with some examples.
Example 6.7 To show that the vector product works with the unit vectors i, j and k.
We start with
r = 1i + 0j + 0k
s = 0i + 1j + 0k
and then compute (6.7):
r × s = (0 × 0 −0 × 1)i −(1 × 0 −0 × 0)j + (1 × 1 −0 × 0)k.

6.4
3D Vectors
59
Fig. 6.10 The vector t is
normal to the vectors r and s
The i scalar and j scalar terms are both zero, but the k scalar term is 1, which makes
i × j = k.
Example 6.8
To show what happens when we reverse the vectors. This time we
start with
r = 0i + 1j + 0k
s = 1i + 0j + 0k
and then compute (6.7)
r × s = (1 × 0 −0 × 0)i −(0 × 0 −0 × 1)j + (0 × 0 −1 × 1)k.
The i scalar and j scalar terms are both zero, but the k scalar term is −1, which
makes j × i = −k. So we see that the vector product is antisymmetric, i.e. there is a
sign reversal when the vectors are reversed. Similarly, it can be shown that
j × k = i
k × i = j
k × j = −i
i × k = −j.
Example 6.9 Let’s now consider two vectors r and s and compute the normal vec-
tor t. The vectors are chosen so that we can anticipate approximately the answer.
For the sake of clarity, the vector equations include the scalar multipliers 0 and 1.
Normally, these are omitted. Figure 6.10 shows the vectors r and s and the nor-
mal vector t, and Table 6.2 contains the coordinates of the vertices forming the two
vectors
r =

(x3 −x2)
(y3 −y2)
(z3 −z2)
T
s =

(x1 −x2)
(y1 −y2)
(z1 −z2)
T
P1 = (0,0,1)

60
6
Vectors
Table 6.2 Coordinates of the
vertices used in Fig. 6.10
Vertex
x
y
z
P1
0
0
1
P2
1
0
0
P3
0
1
0
P2 = (1,0,0)
P3 = (0,1,0)
r = −1i + 1j + 0k
s = −1i + 0j + 1k
r × s = [1 × 1 −0 × 0]i
−

−1 × 1 −(−1) × 0

j
+

−1 × 0 −(−1) × 1

k
t = i + j + k.
This conﬁrms what we expected from Fig. 6.10.
Example 6.10 Let’s reverse the vectors in Example 6.9, to illustrate the importance
of vector sequence.
s = −1i + 0j + 1k
r = −1i + 1j + 0k
s × r = [0 × 0 −1 × 1]i
−

−1 × 0 −(−1) × 1

j
+

−1 × 1 −(−1) × 0

k
t = −i −j −k
which is in the opposite direction to r × s and conﬁrms that the vector product is
non-commutative.
6.4.12 The Right-Hand Rule
The right-hand rule is an aide mémoire for working out the orientation of the cross
product vector. Given the operation r × s, if the right-hand thumb is aligned with r,
the ﬁrst ﬁnger with s, and the middle ﬁnger points in the direction of t. However,
we must remember that this only holds in 3D. In 4D and above it makes no sense.

6.5
Deriving a Unit Normal Vector for a Triangle
61
Fig. 6.11 The normal vector
t is derived from the cross
product r × s
6.5 Deriving a Unit Normal Vector for a Triangle
Example 6.11
Figure 6.11 shows a triangle with vertices deﬁned in an anti-
clockwise sequence from its visible side. This is the side from which we want the
surface normal to point. Using the following information we will compute the sur-
face normal using the cross product and then convert it to a unit normal vector.
Create vector r between P1 and P3, and vector s between P2 and P3:
r = −1i + 1j + 0k
s = −1i + 0j + 2k
r × s = (1 × 2 −0 × 0)i
−(−1 × 2 −0 × −1)j
+ (−1 × 0 −1 × −1)k
t = 2i + 2j + k
|t| =
	
22 + 22 + 12 = 3
ˆtu = 2
3i + 2
3j + 1
3k.
The unit vector ˆtu can now be used in illumination calculations, and as it has unit
length, dot product calculations are simpliﬁed.
6.6 Areas
Before we leave the cross product, let’s investigate the physical meaning of
|r||s|sinβ. Figure 6.12 shows two 2D vectors r and s. The height h = |s|sinβ,
therefore the area of the parallelogram is
area = |r|h = |r||s|sinβ.

62
6
Vectors
Fig. 6.12 The area of the
parallelogram formed by two
vectors r and s equals
|r||s|sinβ
Fig. 6.13 The area of the
triangle formed by the vectors
r and s is half the magnitude
of their cross product
But this is the magnitude of the cross product vector t. Thus when we calculate r×s,
the length of the normal vector t equals the area of the parallelogram formed by r
and s; which means that the triangle formed by halving the parallelogram is half the
area.
area of parallelogram = |t|
area of triangle = 1
2|t|.
This makes it relatively easy to calculate the surface area of an object constructed
from triangles or parallelograms. In the case of a triangulated surface, we simply
sum the magnitudes of the normals and halve the result.
6.6.1 Calculating 2D Areas
Figure 6.13 shows three vertices of a triangle P0(x0,y0), P1(x1,y1) and P2(x2,y2)
formed in an anti-clockwise sequence. We can imagine that the triangle exists on the
z = 0 plane, therefore the z-coordinates are zero. The vectors r and s are computed
as follows:
r =

(x1 −x0)
(y1 −y0)
0
T
s =

(x2 −x0)
(y2 −y0)
0
T

6.7
Summary
63
r = (x1 −x0)i + (y1 −y0)j
s = (x2 −x0)i + (y2 −y0)j
|r × s| = (x1 −x0)(y2 −y0) −(x2 −x0)(y1 −y0)
= x1(y2 −y0) −x0(y2 −y0) −x2(y1 −y0) + x0(y1 −y0)
= x1y2 −x1y0 −x0y2 + x0y0 −x2y1 + x2y0 + x0y1 −x0y0
= x1y2 −x1y0 −x0y2 −x2y1 + x2y0 + x0y1
= (x0y1 −x1y0) + (x1y2 −x2y1) + (x2y0 −x0y2).
But the area of the triangle formed by the three vertices is 1
2|r × s|. Therefore
area = 1
2

(x0y1 −x1y0) + (x1y2 −x2y1) + (x2y0 −x0y2)

which is the formula disclosed in Chap. 2!
6.7 Summary
Vectors are extremely useful and relatively easy to use. They are vital to rendering
algorithms and shaders, and most of the time we only need to use the scalar and
cross products.
I have tried to prepare you for an alternative algebra for vectors: geometric al-
gebra. As we shall see in Chap. 12, geometric algebra shows that mathematics may
have taken the wrong direction when it embraced Gibbs’ vector analysis. Hermann
Grassmann could have been right all along. If the mathematicians of the day had
adopted Grassmann’s ideas, today we would be familiar with vectors, bivectors,
trivectors, quaternions, etc. But we are where we are, and we must prepare ourselves
for some new ideas.
Even if you already knew something about vectors, I hope that this chapter has
introduced some new ideas and illustrated the role vectors play in computer graph-
ics.

Chapter 7
Transforms
7.1 Introduction
This chapter covers a subject that is central to computer graphics: transforms, which
are used to scale, translate, reﬂect, shear and rotate 2D shapes and 3D objects. The
chapter also covers matrix notation, as transforms are normally represented as ma-
trices.
7.2 Background
The point P(x,y) is transformed into P ′(x′,y′) by manipulating the original coor-
dinates x and y using
x′ = ax + by + e
y′ = cx + dy + f.
Similarly, a 3D point P(x,y,z) is transformed into P ′(x′,y′,z′) using
x′ = ax + by + cz + k
y′ = dx + ey + f z + l
z′ = gx + hy + jz + m.
The values for a,b,c,..., etc. determine whether the transform translates, shears,
scales, reﬂects or rotates a point.
Although transforms have an algebraic origin, it is convenient to express them as
matrices, which provide certain advantages for viewing the transform and for inter-
facing to various types of computer graphics hardware. We begin with an algebraic
approach and then introduce matrix notation.
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_7, © Springer-Verlag London 2014
65

66
7
Transforms
Fig. 7.1 The translated shape
results by adding 3 to every
x-coordinate, and 1 to every
y-coordinate to the original
shape
7.3 2D Transforms
7.3.1 Translation
Cartesian coordinates provide a one-to-one relationship between number and shape,
such that when we change a shape’s coordinates, we change its geometry. For ex-
ample, if P(x,y) is a vertex on a shape, when we apply the operation x′ = x + 3
we create a new point P ′(x′,y) three units to the right. Similarly, the operation
y′ = y + 1 creates a new point P ′(x,y′) displaced one unit vertically. By applying
both of these transforms to every vertex to the original shape, the shape is displaced
as shown in Fig. 7.1.
7.3.2 Scaling
Shape scaling is effected by multiplying coordinates as follows:
x′ = 2x
y′ = 1.5y.
This transform results in a horizontal scaling of 2 and a vertical scaling of 1.5 as
illustrated in Fig. 7.2. Note that a point located at the origin does not change its
place, so scaling is relative to the origin.
7.3.3 Reﬂection
To make a reﬂection of a shape relative to the y-axis, we simply reverse the sign of
the x-coordinates, leaving the y-coordinates unchanged:
x′ = −x
y′ = y

7.4
Matrices
67
Fig. 7.2 The scaled shape
results by multiplying the
x-coordinates by 2 and the
y-coordinates by 1.5
Fig. 7.3 The top right-hand
shape gives rise to three
reﬂections simply by
reversing the signs of its
coordinates
and to reﬂect a shape relative to the x-axis we reverse the y-coordinates:
x′ = x
y′ = −y.
Examples of reﬂections are shown in Fig. 7.3.
Before proceeding, we pause to introduce matrix notation so that we can develop
further transforms using algebra and matrices simultaneously.
7.4 Matrices
Matrix notation was researched by the British mathematician Arthur Cayley around
1858. Cayley formalised matrix algebra, along with the American mathematicians
Benjamin and Charles Pierce. Also, by the start of the 19th century, Carl Gauss
(1777–1855) had shown that transforms were not commutative, i.e. T1 × T2 ̸=
T2 × T1, (where T1 and T2 are transforms) and Cayley’s matrix notation would
clarify such observations. For example, consider the transform T1:
T1 =

x′ = ax + by
y′ = cx + dy
(7.1)

68
7
Transforms
and another transformand another transform T2 that transforms T1:
T2 × T1 =

x′′ = Ax′ + By′
y′′ = Cx′ + Dy′.
If we substitute the full deﬁnition of T1 we get
T2 × T1 =

x′′ = A(ax + by) + B(cx + dy)
y′′ = C(ax + by) + D(cx + dy)
which simpliﬁes to
T2 × T1 =

x′′ = (Aa + Bc)x + (Ab + Bd)y
y′′ = (Ca + Dc)x + (Cb + Dd)y.
Cayley proposed separating the constants from the variables, which permits us to
write (7.1) as:
T1 =
x′
y′

=
a
b
c
d
x
y

where the 2 × 2 matrix of constants in the middle describe the transform. The al-
gebraic form is recreated by taking the top variable x′, introducing the “=” sign,
and multiplying the top row of constants [a b] individually by the last column vec-
tor containing x and y. We then examine the second variable y′, introduce the “=”
sign, and multiply the bottom row of constants [c d] individually by the last column
vector containing x and y to create
x′ = ax + by
y′ = cx + dy.
Using Cayley’s notation, the product T2 × T1 is
x′′
y′′

=
A
B
C
D
x′
y′

.
But the notation also intimates that
x′′
y′′

=
A
B
C
D
a
b
c
d
x′
y′

and when we multiply the two inner matrices together they must produce
x′′ = (Aa + Bc)x + (Ab + Bd)y
y′′ = (Ca + Dc)x + (Cb + Dd)y

7.4
Matrices
69
or in matrix form
x′′
y′′

=
 Aa + Bc
Ab + Bd
Ca + Dc
Cb + Dd
x
y

otherwise the two system of notation will be inconsistent. This implies that
 Aa + Bc
Ab + Bd
Ca + Dc
Cb + Dd

=
A
B
C
D
a
b
c
d

which demonstrates how matrices must be multiplied. Here are the rules for matrix
multiplication:
Aa + Bc
...
...
...

=
 A
B
...
...
a
...
c
...

.
1. The top left-hand corner element Aa + Bc is the product of the top row of the
ﬁrst matrix by the left column of the second matrix.
...
Ab + Bd
...
...

=
 A
B
...
...
...
b
...
d

.
2. The top right-hand element Ab + Bd is the product of the top row of the ﬁrst
matrix by the right column of the second matrix.

...
...
Ca + Dc
...

=
...
...
C
D
a
...
c
...

.
3. The bottom left-hand element Ca + Dc is the product of the bottom row of the
ﬁrst matrix by the left column of the second matrix.
...
...
...
Cb + Dd

=
...
...
C
D
...
b
...
d

.
4. The bottom right-hand element Cb + Dd is the product of the bottom row of the
ﬁrst matrix by the right column of the second matrix.
It is now a trivial exercise to conﬁrm Gauss’s observation that T1×T2 ̸= T2×T1.
For if we reverse the transforms T2 × T1 to T1 × T2 we get
aA + bC
aB + bD
cA + dC
cB + dD

=
a
b
c
d
A
B
C
D

which shows conclusively that the product of two transforms is not commutative.
One immediate problem with this notation is that there is no apparent mechanism
to add or subtract a constant such as e or f :
x′ = ax + by + e
y′ = cx + dy + f.

70
7
Transforms
Mathematicians resolved this in the 19th century by the use of homogeneous coor-
dinates. But before we look at this idea, it must be pointed out that currently there
are two systems of matrix notation in use.
7.4.1 Systems of Notation
Over time, two systems of matrix notation have evolved: one where the matrix multi-
plies a column vector, as described above, and another where a row vector multiplies
the matrix:

x′
y′ 
= [x
y ]
a
c
b
d

= [ax + by
cx + dy ].
Note how the elements of the matrix are transposed to accommodate the algebraic
correctness of the transform. There is no preferred system of notation, and you will
ﬁnd technical books and papers supporting both. For example, Computer Graphics:
Principles and Practice [Foley et al., 1990] employs the column vector notation,
whereas the Gems books [Glassner et al., 1990] employ the row vector notation.
The important thing to remember is that the rows and columns of the matrix are
transposed when moving between the two systems.
7.4.2 The Determinant of a Matrix
Given a 2 × 2 matrix:
a
b
c
d

its determinant is a scalar quantity represented by

a
b
c
d
 = ad −cb.
Example 7.1 The determinant of
3
2
1
2

is

3
2
1
2
 = 3 × 2 −2 × 1 = 4.

7.5
Homogeneous Coordinates
71
Fig. 7.4 2D homogeneous
coordinates can be visualised
as a plane in 3D space
generally where t = 1, for
convenience
Later, we will discover that the determinant of a 2 × 2 matrix determines the
change in area that occurs when a polygon is transformed by the matrix. For exam-
ple, if the determinant is 1, there is no change in area, but if the determinant is 2, the
polygon’s area is doubled.
7.5 Homogeneous Coordinates
Homogeneous coordinates surfaced in the early 19th century where they were in-
dependently proposed by Möbius (who also invented a one-sided curled band, the
Möbius strip), Feuerbach, Bobillier, and Plücker. Möbius named them barycentric
coordinates, and they have also been called areal coordinates because of their area-
calculating properties.
Basically, homogeneous coordinates deﬁne a point in a plane using three coordi-
nates instead of two. Initially, Plücker located a homogeneous point relative to the
sides of a triangle, but later revised his notation to the one employed in contem-
porary mathematics and computer graphics. This states that for a point (x,y) there
exists a homogeneous point (xt,yt,t) where t is an arbitrary number.
Example 7.2
The point (3,4) has homogeneous coordinates (6,8,2), because
3 = 6/2 and 4 = 8/2. But the homogeneous point (6,8,2) is not unique to (3,4);
(12,16,4), (15,20,5) and (300,400,100) are all possible homogeneous coordi-
nates for (3,4).
The reason why this coordinate system is called “homogeneous” is because it is
possible to transform functions such as f (x,y) into the form f (x/t,y/t) without
disturbing the degree of the curve. To the non-mathematician this may not seem
anything to get excited about, but in the ﬁeld of projective geometry it is a very
powerful concept.
For our purposes we can imagine that a collection of homogeneous points of
the form (xt,yt,t) exist on an xy-plane where t is the z-coordinate as illustrated
in Fig. 7.4. The ﬁgure shows a triangle on the t = 1 plane, and a similar triangle,
much larger, on a more distant plane. Thus instead of working in two dimensions,
we can work on an arbitrary xy-plane in three dimensions. The t- or z-coordinate of

72
7
Transforms
the plane is immaterial because the x- and y-coordinates are eventually scaled by t.
However, to keep things simple it seems a good idea to choose t = 1. This means that
the point (x,y) has homogeneous coordinates (x,y,1) making scaling superﬂuous.
If we substitute 3D homogeneous coordinates for traditional 2D Cartesian coor-
dinates we must attach 1 to every (x,y) pair. When a point (x,y,1) is transformed,
it emerges as (x′,y′,1), and we discard the 1. This may seem a futile exercise, but
it resolves the problem of creating a translation transform.
Consider the following transform on the homogeneous point (x,y,1):
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
a
b
e
c
d
f
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
This expands to
x′ = ax + by + e
y′ = cx + dy + f
1 = 1
and solves the above problem of adding a constant. Now let’s move on to see how
homogeneous coordinates are used in practice.
7.5.1 2D Translation
The algebraic and matrix notation for 2D translation is
x′ = x + tx
y′ = y + ty
or using matrices
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
1
0
tx
0
1
ty
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
7.5.2 2D Scaling
The algebraic and matrix notation for 2D scaling is
x′ = sxx
y′ = syy

7.5
Homogeneous Coordinates
73
or using matrices
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
sx
0
0
0
sy
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
The scaling action is relative to the origin, i.e. the point (0,0) remains unchanged.
All other points move away from the origin when sx > 1, or move towards the origin
when sx < 1. To scale relative to another point (px,py) we ﬁrst subtract (px,py)
from (x,y) respectively. This effectively makes the reference point (px,py) the
new origin. Second, we perform the scaling operation relative to the new origin,
and third, add (px,py) back to the new (x,y) respectively to compensate for the
original subtraction. Algebraically this is
x′ = sx(x −px) + px
y′ = sy(y −py) + py
which simpliﬁes to
x′ = sxx + px(1 −sx)
y′ = syy + py(1 −sy)
or as a homogeneous matrix
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
sx
0
px(1 −sx)
0
sy
py(1 −sy)
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
(7.2)
Example 7.3 To scale a shape by 2 relative to the point (1,1) the matrix is
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
2
0
−1
0
2
−1
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
7.5.3 2D Reﬂections
The matrix notation for reﬂecting about the y-axis is
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
−1
0
0
0
1
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦
or about the x-axis
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
1
0
0
0
−1
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.

74
7
Transforms
Fig. 7.5 The shape on the
right is reﬂected about the
x = 1 axis
However, to make a reﬂection about an arbitrary vertical or horizontal axis we
need to introduce some more algebraic deception.
Example 7.4
To make a reﬂection about the vertical axis x = 1, we ﬁrst subtract
1 from the x-coordinate. This effectively makes the x = 1 axis coincident with the
major y-axis. Next we perform the reﬂection by reversing the sign of the modiﬁed
x-coordinate. And ﬁnally, we add 1 to the reﬂected coordinate to compensate for
the original subtraction. Algebraically, the three steps are
x1 = x −1
x2 = −(x −1)
x′ = −(x −1) + 1
which simpliﬁes to
x′ = −x + 2
y′ = y
or in matrix form
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
−1
0
2
0
1
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
Figure 7.5 illustrates this process.
Example 7.5
To reﬂect a point about an arbitrary y-axis, y = ax the following
transform is required:
x′ = −(x −ax) + ax = −x + 2ax
y′ = y

7.5
Homogeneous Coordinates
75
Fig. 7.6 The original square
shape is sheared to the right
by an angle β, and the
horizontal shear is
proportional to y tanβ
or in matrix form
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
−1
0
2ax
0
1
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
(7.3)
Example 7.6
To reﬂect a point about an arbitrary x-axis y = ay, the following
transform is required:
x′ = x
y′ = −(y −ay) + ay = −y + 2ay
or in matrix form
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
1
0
0
0
−1
2ay
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
7.5.4 2D Shearing
A shape is sheared by leaning it over at an angle β. Figure 7.6 illustrates the geom-
etry, and we see that the y-coordinates remain unchanged but the x-coordinates are
a function of y and tanβ.
x′ = x + y tanβ
y′ = y
or in matrix form
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
1
tanβ
0
0
1
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.

76
7
Transforms
Fig. 7.7 The point P (x,y) is
rotated through an angle β to
P ′(x′,y′)
7.5.5 2D Rotation
Figure 7.7 shows a point P(x,y) which is to be rotated by an angle β about the
origin to P ′(x′,y′). It can be seen that
x′ = R cos(θ + β)
y′ = R sin(θ + β)
and substituting the identities for cos(θ + β) and sin(θ + β) we have
x′ = R(cosθ cosβ −sinθ sinβ)
y′ = R(sinθ cosβ + cosθ sinβ)
x′ = R
 x
R cosβ −y
R sinβ

y′ = R
 y
R cosβ + x
R sinβ

x′ = x cosβ −y sinβ
y′ = x sinβ + y cosβ
or in matrix form
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
cosβ
−sinβ
0
sinβ
cosβ
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
Example 7.7 To rotate a point by 90◦the matrix is
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
0
−1
0
1
0
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.

7.5
Homogeneous Coordinates
77
Thus the point (1,0) becomes (0,1). If we rotate through 360◦the matrix becomes
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
1
0
0
0
1
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
Such a matrix has a null effect and is called an identity matrix.
To rotate a point (x,y) about an arbitrary point (px,py) we ﬁrst, subtract
(px,py) from the coordinates (x,y) respectively. This enables us to perform the ro-
tation about the origin. Second, we perform the rotation, and third, we add (px,py)
to compensate for the original subtraction. Here are the steps:
1. Subtract (px,py):
x1 = (x −px)
y1 = (y −py).
2. Rotate β about the origin:
x2 = (x −px)cosβ −(y −py)sinβ
y2 = (x −px)sinβ + (y −py)cosβ.
3. Add (px,py):
x′ = (x −px)cosβ −(y −py)sinβ + px
y′ = (x −px)sinβ + (y −py)cosβ + py.
Simplifying,
x′ = x cosβ −y sinβ + px(1 −cosβ) + py sinβ
y′ = x sinβ + y cosβ + py(1 −cosβ) −px sinβ
and in matrix form
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
cosβ
−sinβ
px(1 −cosβ) + py sinβ
sinβ
cosβ
py(1 −cosβ) −px sinβ
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
(7.4)
Example 7.8
To rotate a point 90◦about the point (1,1) the matrix operation be-
comes
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
0
−1
2
1
0
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
A simple test is to substitute the point (2,1) for (x,y); which is transformed cor-
rectly to (1,2).

78
7
Transforms
The algebraic approach in deriving the above transforms is relatively easy. How-
ever, it is also possible to use matrices to derive compound transforms, such as a
reﬂection relative to an arbitrary line and scaling and rotation relative to an arbitrary
point. These transforms are called afﬁne, as parallel lines remain parallel after being
transformed. Furthermore, the word “afﬁne” is used to imply that there is a strong
geometric afﬁnity between the original and transformed shape. One can not always
guarantee that angles and lengths are preserved, as the scaling transform can alter
these when different x and y scaling factors are used. For completeness, we will
repeat these transforms from a matrix perspective.
7.5.6 2D Scaling
The strategy used to scale a point (x,y) relative to some arbitrary point (px,py)
is to ﬁrst, translate (−px,−py); second, perform the scaling; and third translate
(px,py). These three transforms are represented in matrix form as follows:
⎡
⎣
x′
y′
1
⎤
⎦=

translate(px,py)
scale(sx,sy)
translate(−px,−py)
⎡
⎣
x
y
1
⎤
⎦
which expands to
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
1
0
px
0
1
py
0
0
1
⎤
⎦
⎡
⎣
sx
0
0
0
sy
0
0
0
1
⎤
⎦
⎡
⎣
1
0
−px
0
1
−py
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
Note the sequence of the transforms, as this often causes confusion. The ﬁrst
transform acting on the point (x,y,1) is translate (−px,−py), followed by scale
(sx,sy), followed by translate (px,py). If they are placed in any other sequence,
you will discover, like Gauss, that transforms are not commutative!
We can now combine these matrices into a single matrix by multiplying them
together. This can be done in any sequence, so long as we preserve the original order.
Let’s start with scale (sx,sy) and translate (−px,−py) matrices. This produces
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
1
0
px
0
1
py
0
0
1
⎤
⎦
⎡
⎣
sx
0
−sxpx
0
sy
−sypy
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦
and ﬁnally
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
sx
0
px(1 −sx)
0
sy
py(1 −sy)
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦
which is the same as the previous transform (7.2).

7.5
Homogeneous Coordinates
79
7.5.7 2D Reﬂection
A reﬂection about the y-axis is given by
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
−1
0
0
0
1
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
Therefore, using matrices, we can reason that a reﬂection transform about an arbi-
trary axis x = ax, parallel with the y-axis, is given by
⎡
⎣
x′
y′
1
⎤
⎦=

translate(ax,0)
[reﬂection]

translate(−ax,0)
⎡
⎣
x
y
1
⎤
⎦
which expands to
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
1
0
ax
0
1
0
0
0
1
⎤
⎦
⎡
⎣
−1
0
0
0
1
0
0
0
1
⎤
⎦
⎡
⎣
1
0
−ax
0
1
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
We can now combine these matrices into a single matrix by multiplying them to-
gether. Let’s begin by multiplying the reﬂection and the translate (−ax,0) matrices
together. This produces
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
1
0
ax
0
1
0
0
0
1
⎤
⎦
⎡
⎣
−1
0
ax
0
1
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦
and ﬁnally
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
−1
0
2ax
0
1
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦
which is the same as the previous transform (7.3).
7.5.8 2D Rotation About an Arbitrary Point
A rotation about the origin is given by
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
cosβ
−sinβ
0
sinβ
cosβ
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.

80
7
Transforms
Therefore, using matrices, we can develop a rotation about an arbitrary point
(px,py) as follows:
⎡
⎣
x′
y′
1
⎤
⎦=

translate(px,py)
[rotate β ]

translate(−px,−py)
⎡
⎣
x
y
1
⎤
⎦
which expands to
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
1
0
px
0
1
py
0
0
1
⎤
⎦
⎡
⎣
cosβ
−sinβ
0
sinβ
cosβ
0
0
0
1
⎤
⎦
⎡
⎣
1
0
−px
0
1
−py
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
We can now combine these matrices into a single matrix by multiplying them to-
gether. Let’s begin by multiplying the rotate β and the translate (−px,−py) matri-
ces together. This produces
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
1
0
px
0
1
py
0
0
1
⎤
⎦
⎡
⎣
cosβ
−sinβ
−px cosβ + py sinβ
sinβ
cosβ
−px sinβ −py cosβ
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
cosβ
−sinβ
px(1 −cosβ) + py sinβ
sinβ
cosβ
py(1 −cosβ) −px sinβ
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦
which is the same as the previous transform (7.4).
I hope it is now clear to the reader that one can derive all sorts of transforms
either algebraically, or by using matrices—it is just a question of convenience.
7.6 3D Transforms
Now we come to transforms in three dimensions, where we apply the same reason-
ing as in two dimensions. Scaling and translation are basically the same, but where
in 2D we rotated a shape about a point, in 3D we rotate an object about an axis.
7.6.1 3D Translation
The algebra is so simple for 3D translation that we can simply write the homoge-
neous matrix directly:
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
1
0
0
tx
0
1
0
ty
0
0
1
tz
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.

7.6
3D Transforms
81
7.6.2 3D Scaling
The algebra for 3D scaling is
x′ = sxx
y′ = syy
z′ = szz
which in matrix form is
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
sx
0
0
0
0
sy
0
0
0
0
sz
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
The scaling is relative to the origin, but we can arrange for it to be relative to an
arbitrary point (px,py,pz) using the following algebra:
x′ = sx(x −px) + px
y′ = sy(y −py) + py
z′ = sz(z −pz) + pz
which in matrix form is
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
sx
0
0
px(1 −sx)
0
sy
0
py(1 −sy)
0
0
sz
pz(1 −sz)
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
7.6.3 3D Rotation
In two dimensions a shape is rotated about a point, whether it be the origin or some
other position. In three dimensions an object is rotated about an axis, whether it
be the x-, y- or z-axis, or some arbitrary axis. To begin with, let’s look at rotating
a vertex about one of the three orthogonal axes; such rotations are called Euler
rotations after Leonhard Euler.
Recall that a general 2D rotation transform is given by
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
cosβ
−sinβ
0
sinβ
cosβ
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦

82
7
Transforms
Fig. 7.8 Rotating the point
P about the z-axis
which in 3D can be visualised as rotating a point P(x,y,z) on a plane parallel with
the xy-plane as shown in Fig. 7.8. In algebraic terms this is written as
x′ = x cosβ −y sinβ
y′ = x sinβ + y cosβ
z′ = z.
Therefore, the 3D rotation transform is
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
cosβ
−sinβ
0
0
sinβ
cosβ
0
0
0
0
1
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦
which basically rotates a point about the z-axis.
When rotating about the x-axis, the x-coordinates remain constant whilst the y-
and z-coordinates are changed. Algebraically, this is
x′ = x
y′ = y cosβ −zsinβ
z′ = y sinβ + zcosβ
or in matrix form
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
1
0
0
0
0
cosβ
−sinβ
0
0
sinβ
cosβ
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
When rotating about the y-axis, the y-coordinate remains constant whilst the x- and
z-coordinates are changed. Algebraically, this is
x′ = zsinβ + x cosβ

7.6
3D Transforms
83
Fig. 7.9 The convention for
roll, pitch and yaw angles
y′ = y
z′ = zcosβ −x sinβ
or in matrix form
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
cosβ
0
sinβ
0
0
1
0
0
−sinβ
0
cosβ
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
Note that the matrix terms do not appear to share the symmetry seen in the previous
two matrices. Nothing really has gone wrong, it is just the way the axes are paired
together to rotate the coordinates.
The above rotations are also known as yaw, pitch and roll, and great care should
be taken with these angles when referring to other books and technical papers.
Sometimes a left-handed system of axes is used rather than a right-handed set, and
the vertical axis may be the y-axis or the z-axis. Consequently, the matrices repre-
senting the rotations can vary greatly. In this text all Cartesian coordinate systems
are right-handed, and the vertical axis is always the y-axis.
The roll, pitch and yaw angles are deﬁned as follows:
• roll is the angle of rotation about the z-axis,
• pitch is the angle of rotation about the x-axis,
• yaw is the angle of rotation about the y-axis.
Figure 7.9 illustrates these rotations and the sign convention. The homogeneous
matrices representing these rotations are as follows:
• rotate roll about the z-axis:
⎡
⎢⎢⎣
cosroll
−sinroll
0
0
sinroll
cosroll
0
0
0
0
1
0
0
0
0
1
⎤
⎥⎥⎦.

84
7
Transforms
Fig. 7.10 The X′Y ′Z′ axial
system after a pitch of 90◦
• rotate pitch about the x-axis:
⎡
⎢⎢⎣
1
0
0
0
0
cospitch
−sinpitch
0
0
sinpitch
cospitch
0
0
0
0
1
⎤
⎥⎥⎦.
• rotate yaw about the y-axis:
⎡
⎢⎢⎣
cosyaw
0
sinyaw
0
0
1
0
0
−sinyaw
0
cosyaw
0
0
0
0
1
⎤
⎥⎥⎦.
A common sequence for applying these rotations is roll, pitch, yaw, as seen in
the following transform:
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦= [yaw][pitch][roll]
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦
and if a translation is involved,
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦= [translate][yaw][pitch][roll]
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
When these rotation transforms are applied, the vertex is ﬁrst rotated about the z-axis
(roll), followed by a rotation about the x-axis (pitch), followed by a rotation about
the y-axis (yaw). Euler rotations are relative to the ﬁxed frame of reference. This is
not always easy to visualise as one’s attention is normally with the rotating frame of
reference. Let’s consider a simple example where an axial system is subjected to a
pitch rotation followed by a yaw rotation relative to ﬁxed frame of reference.
We begin with two frames of reference XYZ and X′Y ′Z′ mutually aligned. Fig-
ure 7.10 shows the orientation of X′Y ′Z′ after it is subjected to a pitch of 90◦about

7.6
3D Transforms
85
Fig. 7.11 The X′Y ′Z′ axial
system after a yaw of 90◦
Fig. 7.12 The X′Y ′Z′ axial
system after a roll of 45◦
Fig. 7.13 The X′Y ′Z′ axial
system after a pitch of 90◦
the x-axis. And Fig. 7.11 shows the ﬁnal orientation after X′Y ′Z′ is subjected to a
yaw of 90◦about the y-axis.
7.6.4 Gimbal Lock
Let’s take another example starting from the point where the two axial systems are
mutually aligned. Figure 7.12 shows the orientation of X′Y ′Z′ after it is subjected
to a roll of 45◦about the z-axis, and Fig. 7.13 shows the orientation of X′Y ′Z′ after
it is subjected to a pitch of 90◦about the x-axis. Now the interesting thing about
this orientation is that if we now performed a yaw of 45◦about the z-axis, it would
rotate the x′-axis towards the x-axis, counteracting the effect of the original roll.
yaw has become a negative roll rotation, caused by the 90◦pitch. This situation is

86
7
Transforms
Fig. 7.14 Rotating a point
about an axis parallel with the
x-axis
known as gimbal lock, because one degree of rotational freedom has been lost. Quite
innocently, we have stumbled across one of the major weaknesses of Euler angles:
under certain conditions it is only possible to rotate an object about two axes. One
way of preventing this is to create a secondary set of axes constructed from three
orthogonal vectors that are also rotated alongside an object or virtual camera. But
instead of making the rotations relative to the ﬁxed frame of reference, the roll, pitch
and yaw rotations are relative to the rotating frame of reference. Another method is
to use quaternions, which will be investigated later in this chapter.
7.6.5 Rotating About an Axis
The above rotations were relative to the x-, y-, z-axis. Now let’s consider rotations
about an axis parallel to one of these axes. To begin with, we will rotate about an
axis parallel with the z-axis, as shown in Fig. 7.14. The scenario is very reminiscent
of the 2D case for rotating a point about an arbitrary point, and the general transform
is given by
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=

translate(px,py,0)
[rotateβ ]

translate(−px,−py,0)
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦
and the matrix is
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
cosβ
−sinβ
0
px(1 −cosβ) + py sinβ
sinβ
cosβ
0
py(1 −cosβ) −px sinβ
0
0
1
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
I hope you can see the similarity between rotating in 3D and 2D: the x- and y-
coordinates are updated while the z-coordinate is held constant. We can now state
the other two matrices for rotating about an axis parallel with the x-axis and parallel
with the y-axis:

7.7
Change of Axes
87
• rotating about an axis parallel with the x-axis:
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
1
0
0
0
0
cosβ
−sinβ
py(1 −cosβ) + pz sinβ
0
sinβ
cosβ
pz(1 −cosβ) −py sinβ
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
• rotating about an axis parallel with the y-axis:
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
cosβ
0
sinβ
px(1 −cosβ) −pz sinβ
0
1
0
0
−sinβ
0
cosβ
pz(1 −cosβ) + px sinβ
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
7.6.6 3D Reﬂections
Reﬂections in 3D occur with respect to a plane, rather than an axis. The matrix
giving the reﬂection relative to the yz-plane is
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
−1
0
0
0
0
1
0
0
0
0
1
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦
and the reﬂection relative to a plane parallel to, and ax units from the yz-plane is
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
−1
0
0
2ax
0
1
0
0
0
0
1
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
It is left to the reader to develop similar matrices for the other major axial planes.
7.7 Change of Axes
Points in one coordinate system often have to be referenced in another one. For ex-
ample, to view a 3D scene from an arbitrary position, a virtual camera is positioned
in the world space using a series of transforms. An object’s coordinates, which are
relative to the world frame of reference, are computed relative to the camera’s axial
system, and then used to develop a perspective projection. Before explaining how
this is achieved in 3D, let’s examine the simple case of changing axial systems in
two dimensions.

88
7
Transforms
Fig. 7.15 The X′Y ′ axial
system is translated (tx,ty)
Fig. 7.16 The X′Y ′ axial
system is rotated β
7.7.1 2D Change of Axes
Figure 7.15 shows a point P(x,y) relative to the XY-axes, but we require to know
the coordinates relative to the X′Y ′-axes. To do this, we need to know the relation-
ship between the two coordinate systems, and ideally we want to apply a technique
that works in 2D and 3D. If the second coordinate system is a simple translation
(tx,ty) relative to the reference system, as shown in Fig. 7.15, the point P(x,y) has
coordinates relative to the translated system (x −tx,y −ty):
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
1
0
−tx
0
1
−ty
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
If the X′Y ′-axes are rotated β relative to the XY-axes, as shown in Fig. 7.16,
a point P(x,y) relative to the XY-axes becomes P ′(x′,y′) relative to the rotated
axes is given by
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
cos(−β)
−sin(−β)
0
sin(−β)
cos(−β)
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦

7.7
Change of Axes
89
Fig. 7.17 If the X′- and
Y ′-axes are assumed to be
unit vectors, their direction
cosines form the elements of
the rotation matrix
which simpliﬁes to
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
cosβ
sinβ
0
−sinβ
cosβ
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
When a coordinate system is rotated and translated relative to the reference sys-
tem, a point P(x,y) becomes P ′(x′,y′) relative to the new axes given by
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
cosβ
sinβ
0
−sinβ
cosβ
0
0
0
1
⎤
⎦
⎡
⎣
1
0
−tx
0
1
−ty
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦
which simpliﬁes to
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
cosβ
sinβ
−tx cosβ −ty sinβ
−sinβ
cosβ
tx sinβ −ty cosβ
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
7.7.2 Direction Cosines
Direction cosines are the cosines of the angles between a vector and the Cartesian
axes, and for unit vectors they are the vector’s components. Figure 7.17 shows two
unit vectors X′ and Y ′, and by inspection the direction cosines for X′ are cosβ and
cos(90◦−β), which can be rewritten as cosβ and sinβ, and the direction cosines
for Y ′ are cos(90◦+ β) and cosβ, which can be rewritten as −sinβ and cosβ. But
these direction cosines cosβ, sinβ, −sinβ and cosβ are the four elements of the
rotation matrix used above
 cosβ
sinβ
−sinβ
cosβ

.
The top row contains the direction cosines for the X′-axis and the bottom row con-
tains the direction cosines for the Y ′-axis. This relationship also holds in 3D.

90
7
Transforms
Fig. 7.18 The vertices of a
unit square relative to the two
axial systems
Example 7.9 Let’s evaluate a simple example in 2D where a set of axes is rotated
45◦as shown in Fig. 7.18. The appropriate transform is
⎡
⎣
x′
y′
1
⎤
⎦=
⎡
⎣
cos45◦
sin45◦
0
−sin45◦
cos45◦
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦
≈
⎡
⎣
0.707
0.707
0
−0.707
0.707
0
0
0
1
⎤
⎦
⎡
⎣
x
y
1
⎤
⎦.
The four vertices on a unit square become
(0,0) →(0,0)
(1,0) →(0.707,−0.707)
(1,1) →(1.1414,0)
(0,1) →(0.707,0.707)
which by inspection of Fig. 7.18 are correct.
7.7.3 3D Change of Axes
The ability to reference a collection of coordinates is fundamental in computer
graphics, especially in 3D. And rather than investigate them within this section,
let’s delay their analysis for the next section, where we see how the technique is
used for relating an object’s coordinates relative to an arbitrary virtual camera.
7.8 Positioning the Virtual Camera
Four coordinate systems are used in the computer graphics pipeline: object space,
world space, camera space and image space.

7.8
Positioning the Virtual Camera
91
Fig. 7.19 The components of
a unit vector are equal to the
cosines of the angles between
the vector and the axes
• The object space is a domain where objects are modelled and assembled.
• The world space is where objects are positioned and animated through appropri-
ate transforms. The world space also hosts a virtual camera or observer.
• The camera space is a transform of the world space relative to the camera.
• Finally, the image space is a projection—normally perspective—of the camera
space onto an image plane.
The transforms considered so far are used to manipulate and position objects
within the world space. What we will consider next is how a virtual camera or ob-
server is positioned in world space, and the process of converting world coordinates
to camera coordinates. The procedure used generally depends on the method em-
ployed to deﬁne the camera’s frame of reference within the world space, which may
involve the use of direction cosines, Euler angles or quaternions. We will examine
how each of these techniques could be implemented.
7.8.1 Direction Cosines
A 3D unit vector has three components [x y z]T , which are equal to the cosines
of the angles formed between the vector and the three orthogonal axes. These an-
gles are known as direction cosines and can be computed taking the dot product of
the vector and the Cartesian unit vectors. Figure 7.19 shows the direction cosines
and the angles. These direction cosines enable any point P(x,y,z) in one frame
of reference to be transformed into P ′(x′,y′,z′) in another frame of reference as
follows:
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
r11
r12
r13
0
r21
r22
r23
0
r31
r32
r33
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦
where:
• r11,r12,r13 are the direction cosines of the secondary x-axis,
• r21,r22,r23 are the direction cosines of the secondary y-axis,
• r31,r32,r33 are the direction cosines of the secondary z-axis.

92
7
Transforms
Fig. 7.20 Two axial systems
mutually aligned
Fig. 7.21 The X′Y ′Z′ axial
system after a roll of 90◦
To illustrate this operation, consider the scenario shown in Fig. 7.20 which shows
two axial systems mutually aligned. Evaluating the direction cosines results in the
following matrix transformation:
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
1
0
0
0
0
1
0
0
0
0
1
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦
which is the identity matrix and implies that (x′,y′,z′) = (x,y,z).
Figure 7.21 shows another scenario, and the associated transform is
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
0
1
0
0
−1
0
0
0
0
0
1
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
Substituting (1,1,0) for (x,y,z) produces (1,−1,0) for (x′,y′,z′) in the new
frame of reference, which by inspection, is correct.
If the virtual camera is offset by (tx,ty,tz) the transform relating points in world
space to camera space is expressed as a compound operation consisting of a trans-
lation back to the origin, followed by a change of axial systems. This is expressed

7.8
Positioning the Virtual Camera
93
Fig. 7.22 The secondary
axial system is subject to a
yaw of 180◦and an offset of
(10,1,1)
as
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
r11
r12
r13
0
r21
r22
r23
0
r31
r32
r33
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
1
0
0
−tx
0
1
0
−ty
0
0
1
−tz
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
Example 7.10
Consider the scenario shown in Fig. 7.22. The values of (tx,ty,tz)
are (10,1,1), and the direction cosines are as shown in the following matrix opera-
tion:
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
−1
0
0
0
0
1
0
0
0
0
−1
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
1
0
0
−10
0
1
0
−1
0
0
1
−1
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦
which simpliﬁes to
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
−1
0
0
10
0
1
0
−1
0
0
−1
1
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
Substituting (0,0,0) for (x,y,z) in the above transform produces (10,−1,1) for
(x′,y′,z′), which can be conﬁrmed from Fig. 7.22. Similarly, substituting (0,1,1)
for (x,y,z) produces (10,0,0) for (x′,y′,z′), which is also correct.
7.8.2 Euler Angles
Another approach for locating the virtual camera involves Euler angles, but we must
remember that they suffer from gimbal lock. However, if the virtual camera is lo-
cated in world space using Euler angles, the transform relating world coordinates
to camera coordinates can be derived from the inverse operations. The yaw, pitch,
roll matrices described above are called orthogonal matrices, as the inverse matrix

94
7
Transforms
is the transpose of the original rows and columns. Consequently, to rotate through
angles −roll, −pitch and −yaw, we use
• rotate −roll about the z-axis:
⎡
⎢⎢⎣
cosroll
sinroll
0
0
−sinroll
cosroll
0
0
0
0
1
0
0
0
0
1
⎤
⎥⎥⎦.
• rotate −pitch about the x-axis:
⎡
⎢⎢⎣
1
0
0
0
0
cospitch
sinpitch
0
0
−sinpitch
cospitch
0
0
0
0
1
⎤
⎥⎥⎦.
• rotate −yaw about the y-axis:
⎡
⎢⎢⎣
cosyaw
0
−sinyaw
0
0
1
0
0
sinyaw
0
cosyaw
0
0
0
0
1
⎤
⎥⎥⎦.
The same result is obtained by substituting −roll, −pitch, −yaw in the original
matrices. As described above, the virtual camera will normally be translated from
the origin by (tx,ty,tz), which implies that the transform from the world space to
the camera space must be evaluated as follows:
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦= [−roll][−pitch][−yaw]

translate(−tx,−ty,−tz)
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦
which is represented by a single homogeneous matrix:
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
T11
T12
T13
T14
T21
T22
T23
T24
T31
T32
T33
T34
T41
T42
T43
T44
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦
where
T11 = cos(yaw)cos(roll) + sin(yaw)sin(pitch)sin(roll)
T12 = cos(pitch)sin(roll)
T13 = −sin(yaw)cos(roll) + cos(yaw)sin(pitch)sin(roll)
T14 = −(txT11 + tyT12 + tzT13)

7.8
Positioning the Virtual Camera
95
T21 = −cos(yaw)sin(roll) + sin(yaw)sin(pitch)cos(roll)
T22 = cos(pitch)cos(roll)
T23 = −sin(yaw)sin(roll) + cos(yaw)sin(pitch)cos(roll)
T24 = −(txT21 + tyT22 + tzT23)
T31 = sin(yaw)cos(pitch)
T32 = −sin(pitch)
T33 = cos(yaw)cos(pitch)
T34 = −(txT31 + tyT32 + tzT33)
T41 = T42 = T43 = 0
T44 = 1.
Example 7.11 Consider the scenario shown in Fig. 7.22 where the following con-
ditions prevail:
roll = 0◦
pitch = 0◦
yaw = 180◦
tx = 10
ty = 1
tz = 1.
The transform is
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
−1
0
0
10
0
1
0
−1
0
0
−1
1
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦
which is identical to the equation used for direction cosines.
Example 7.12 Another scenario is shown in Fig. 7.23 where the following condi-
tions prevail:
roll = 90◦
pitch = 180◦
yaw = 0◦
tx = 0.5
ty = 0.5
tz = 11.

96
7
Transforms
Fig. 7.23 The secondary
axial system is subject to a
roll of 90◦, a pitch of 180◦
and a translation of
(0.5,0.5,11)
The transform is
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
0
−1
0
0.5
−1
0
0
0.5
0
0
−1
11
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
Substituting (1,1,1) for (x,y,z) produces (−0.5,−0.5,10) for (x′,y′,z′). Simi-
larly, substituting (0,0,1) for (x,y,z) produces (0.5,0.5,10) for (x′,y′,z′), which
can be visually veriﬁed from Fig. 7.23.
7.9 Rotating a Point About an Arbitrary Axis
7.9.1 Matrices
Let’s consider two ways of developing a matrix for rotating a point about an arbitrary
axis. The ﬁrst approach employs vector analysis and is quite succinct. The second
technique is less analytical and relies on matrices and trigonometric evaluation and
is rather laborious. Fortunately, they both arrive at the same result!
Figure 7.24 shows a view of the geometry associated with the task at hand. For
clariﬁcation, Fig. 7.25 shows a cross-section and a plan view of the geometry.
The axis of rotation is given by the unit vector:
ˆn = ai + bj + ck.
P(xp,ypzp) is the point to be rotated by angle α to P ′(x′
p,y′
p,z′
p).
O is the origin, whilst p and p′ are position vectors for P and P ′ respectively.
From Fig. 7.24 and Fig. 7.25:
p′ = −−→
ON + −−→
NQ +
−−→
QP ′.
To ﬁnd −−→
ON:
|n| = |p|cosθ = ˆn • p

7.9
Rotating a Point About an Arbitrary Axis
97
Fig. 7.24 A view of the
geometry associated with
rotating a point about an
arbitrary axis
Fig. 7.25 A cross-section
and plan view of the
geometry associated with
rotating a point about an
arbitrary axis
therefore,
−−→
ON = n = ˆn(ˆn • p).
To ﬁnd −−→
NQ:
−−→
NQ = NQ
NP r = NQ
NP ′ r = cosαr
but
p = n + r = ˆn(ˆn • p) + r
therefore,
r = p −ˆn(ˆn • p)
and
−−→
NQ =

p −ˆn(ˆn • p)

cosα.
To ﬁnd −−→
QP ′:
Let
ˆn × p = w

98
7
Transforms
where
|w| = |ˆn||p|sinθ = |p|sinθ
but
|r| = |p|sinθ
therefore,
|w| = |r|.
Now
QP ′
NP ′ = QP ′
|r| = QP ′
|w| = sinα
therefore,
−−→
QP ′ = wsinα = (ˆn × p)sinα
then
p′ = ˆn(ˆn • p) +

p −ˆn(ˆn • p

cosα + (ˆn × p)sinα
and
p′ = pcosα + ˆn(ˆn • p)(1 −cosα) + (ˆn × p)sinα.
Let
K = 1 −cosα
then
p′ = pcosα + ˆn(ˆn • p)K + (ˆn × p)sinα
and
p′ = (xpi + ypj + zpk)cosα + (ai + bj + ck)(axp + byp + czp)K
+

(bzp −cyp)i + (cxp −azp)j + (ayp −bxp)k

sinα
p′ =

xp cosα + a(axp + byp + czp)K + (bzp −cyp)sinα

i
+

yp cosα + b(axp + byp + czp)K + (cxp −azp)sinα

j
+

zp cosα + c(axp + byp + czp)K + (ayp −bxp)sinα

k
p′ =

xp

a2K + cosα

+ yp(abK −c sinα) + zp(acK + b sinα)

i
+

xp(abK + c sinα) + yp

b2K + cosα

+ zp(bcK −a sinα)

j
+

xp(acK −b sinα) + yp(bcK + a sinα) + zp

c2K + cosα

k

7.9
Rotating a Point About an Arbitrary Axis
99
Fig. 7.26 The geometry
associated with rotating a
point about an arbitrary axis
and the transform is:
⎡
⎢⎢⎢⎣
x′
p
y′
p
z′
p
1
⎤
⎥⎥⎥⎦=
⎡
⎢⎢⎣
a2K + cosα
abK −c sinα
acK + b sinα
0
abK + c sinα
b2K + cosα
bcK −a sinα
0
acK −b sinα
bcK + a sinα
c2K + cosα
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
xp
yp
zp
1
⎤
⎥⎥⎦
where
K = 1 −cosα.
Now let’s approach the problem using transforms and trigonometric identities.
The following is extremely tedious, but it is a good exercise for improving one’s
algebraic skills!
Figure 7.26 shows a point P(x,y,z) to be rotated through an angle α to
P ′(x′,y′,z′) about an axis deﬁned by
v = ai + bj + ck
where |v| = 1.
The transforms to achieve this operation is expressed as follows:
⎡
⎣
x′
y′
z′
⎤
⎦= [T5][T4][T3][T2][T1]
⎡
⎣
x
y
z
⎤
⎦
which aligns the axis of rotation with the x-axis, performs the rotation of P through
an angle α about the x-axis, and returns the axis of rotation back to its original
position. Therefore,
T1 rotates +φ about the y-axis
T2 rotates −θ about the z-axis
T3 rotates +α about the x-axis
T4 rotates +θ about the z-axis
T5 rotates −φ about the y-axis

100
7
Transforms
where
T1 =
⎡
⎣
cosφ
0
sinφ
0
1
0
−sinφ
0
cosφ
⎤
⎦
T2 =
⎡
⎣
cosθ
sinθ
0
−sinθ
cosθ
0
0
0
1
⎤
⎦
T3 =
⎡
⎣
1
0
0
0
cosα
−sinα
0
sinα
cosα
⎤
⎦
T4 =
⎡
⎣
cosθ
−sinθ
0
sinθ
cosθ
0
0
0
1
⎤
⎦
T5 =
⎡
⎣
cosφ
0
−sinφ
0
1
0
sinφ
0
cosφ
⎤
⎦.
Let
[T5][T4][T3][T2][T1] =
⎡
⎢⎢⎣
E11
E12
E13
0
E21
E22
E23
0
E31
E32
E33
0
0
0
0
1
⎤
⎥⎥⎦
where by multiplying the matrices together we ﬁnd that:
E11 = cos2 φ cos2 θ + cos2 φ sin2 θ cosα + sin2 φ cosα
E12 = cosφ cosθ sinθ −cosφ sinθ cosθ cosα −sinφ cosθ sinα
E13 = cosφ sinφ cos2 θ + cosφ sinφ sin2 θ cosα + sin2 φ sinθ sinα
+ cos2 φ sinθ sinα −cosφ sinφ cosα
E21 = sinθ cosθ cosφ −cosθ sinθ cosφ cosα + cosθ sinφ sinα
E22 = sin2 θ + cos2 θ cosα
E23 = sinθ cosθ sinφ −cosθ sinθ sinφ cosα −cosθ cosφ sinα
E31 = cosφ sinφ cos2 θ + cosφ sinφ sin2 θ cosα −cos2 φ sinθ sinα
= −cosφ sinφ cosα
E32 = sinφ cosθ sinθ −sinφ sinθ cosθ cosα + cosφ cosθ sinα
E33 = sin2 φ cos2 θ + sin2 φ sin2 θ cosα −cosφ sinφ sinθ sinα
+ cosφ sinφ sinθ sinα + cos2 φ cosα.
From Fig. 7.26 we compute the sin and cos of θ and φ in terms of a, b and c, and
then compute their equivalent sin2 and cos2 values:
cosθ =
	
1 −b2
⇒
cos2 θ = 1 −b2
sinθ = b
⇒
sin2 θ = b2

7.9
Rotating a Point About an Arbitrary Axis
101
cosφ =
a
√
1 −b2
⇒
cos2 φ =
a2
1 −b2
sinφ =
c
√
1 −b2
⇒
sin2 φ =
c2
1 −b2 .
To ﬁnd E11:
E11 = cos2 φ cos2 θ + cos2 φ sin2 θ cosα + sin2 φ cosα
=
a2
1 −b2

1 −b2
+
a2
1 −b2 b2 cosα +
c2
1 −b2 cosα
= a2 + a2b2
1 −b2 cosα +
c2
1 −b2 cosα
= a2 +
c2 + a2b2
1 −b2

cosα
but
a2 + b2 + c2 = 1
⇒
c2 = 1 −a2 −b2
substituting c2 in E11
E11 = a2 +
1 −a2 −b2 + a2b2
1 −b2

cosα
= a2 +
(1 −a2)(1 −b2)
1 −b2

cosα
= a2 +

1 −a2
cosα
= a2(1 −cosα) + cosα.
Let
K = 1 −cosα
then
E11 = a2K + cosα.
To ﬁnd E12:
E12 = cosφ cosθ sinθ −cosφ sinθ cosθ cosα −sinφ cosθ sinα
=
a
√
1 −b2
	
1 −b2b −
a
√
1 −b2 b
	
1 −b2 cosα −
c
√
1 −b2
	
1 −b2 sinα
= ab −ab cosα −c sinα
= ab(1 −cosα) −c sinα
E12 = abK −c sinα.

102
7
Transforms
To ﬁnd E13:
E13 = cosφ sinφ cos2 θ + cosφ sinφ sin2 θ cosα + sin2 φ sinθ sinα
+ cos2 φ sinθ sinα −cosφ sinφ cosα
= cosφ sinφ cos2 θ + cosφ sinφ sin2 θ cosα + sinθ sinα −cosφ sinφ cosα
=
a
√
1 −b2
c
√
1 −b2

1 −b2
+
a
√
1 −b2
c
√
1 −b2 b2 cosα + b sinα
−
a
√
1 −b2
c
√
1 −b2 cosα
= ac + ac
b2
(1 −b2) cosα + b sinα −
ac
(1 −b2) cosα
= ac + ac(b2 −1)
(1 −b2) cosα + b sinα
= ac(1 −cosα) + b sinα
E13 = acK + b sinα.
Using similar algebraic methods, we discover that:
E21 = abK + c sinα
E22 = b2K + cosα
E23 = bcK −a sinα
E31 = acK −b sinα
E32 = bcK + a sinα
E33 = c2K + cosα
and our original matrix transform becomes:
⎡
⎢⎢⎢⎣
x′
p
y′
p
z′
p
1
⎤
⎥⎥⎥⎦=
⎡
⎢⎢⎣
a2K + cosα
abK −c sinα
acK + b sinα
0
abK + c sinα
b2K + cosα
bcK −a sinα
0
acK −b sinα
bcK + a sinα
c2K + cosα
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
xp
yp
zp
1
⎤
⎥⎥⎦
where
K = 1 −cosα
which is identical to the transformation derived from the ﬁrst approach. Now let’s
test the matrix with a simple example that can be easily veriﬁed.

7.9
Rotating a Point About an Arbitrary Axis
103
Example 7.13
Rotating the point P(10,5,0), 360◦about an axis deﬁned by v =
i + j + k, should return it to itself producing P ′(x′,y′,z′).
Therefore,
α = 360◦,
cosα = 1,
sinα = 0,
K = 0
a = 1,
b = 1,
c = 1
and
⎡
⎢⎢⎣
10
5
0
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
1
0
0
0
0
1
0
0
0
0
1
0
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
10
5
0
1
⎤
⎥⎥⎦.
As the matrix is an identity matrix P ′ = P .
7.9.2 Quaternions
As mentioned earlier, quaternions were invented by Sir William Rowan Hamilton in
the mid-nineteenth century. Sir William was looking for a way to represent complex
numbers in higher dimensions, and it took 15 years of toil before he stumbled upon
the idea of using a 4D notation—hence the name “quaternion”.
Knowing that a complex number is the combination of a real and imaginary
quantity: a + ib, it is tempting to assume that its 3D equivalent is a + ib + jc
where i2 = j2 = −1. Unfortunately, when Hamilton formed the product of two
such objects, he could not resolve the dyads ij and ji, and went on to explore an
extension a +ib +jc +kd where i2 = j2 = k2 = −1. This too, presented problems
with the dyads ij, jk, ki and their mirrors ji, kj and ik. But after many years of
thought Hamilton stumbled across the rules:
i2 = j2 = k2 = ijk = −1,
ij = k,
jk = i,
ki = j,
ji = −k,
kj = −i,
ik = −j.
Although quaternions had some enthusiastic supporters, there were many mathe-
maticians and scientists who were suspicious of the need to involve so many imagi-
nary terms.
Towards the end of the nineteenth century Josiah Gibbs resolved the problem by
declaring that the three imaginary quantities could be viewed as a 3D vector and
changed the ib + jc + kd into bi + cj + dk, where i, j and k are unit Cartesian
vectors. Today, there are two ways of deﬁning a quaternion:
q = [s,v]
q = [s + v].

104
7
Transforms
The difference is rather subtle: the ﬁrst separates the scalar and the vector with a
comma, whereas the second preserves the “+” sign as used in complex numbers.
Although the idea of adding a scalar to a vector seems strange, this notation is used
for the rest of this section as it will help us understand the ideas behind geometric
algebra, which are introduced later on.
Since Hamilton’s invention, mathematicians have shown that quaternions can be
used to rotate points about an arbitrary axis, and hence the orientation of objects and
the virtual camera. In order to develop the equation that performs this transformation
we will have to understand the action of quaternions in the context of rotations.
A quaternion q is the combination of a scalar and a vector:
q = [s + v]
where s is a scalar and v is a 3D vector. If we express the vector v in terms of its
components, we have in an algebraic form
q = [s + xi + yj + zk],
where s,x,y,z ∈R.
7.9.3 Adding and Subtracting Quaternions
Given two quaternions q1 and q2:
q1 = [s1 + v1] = [s1 + x1i + y1j + z1k]
q2 = [s2 + v2] = [s2 + x2i + y2j + z2k]
they are equal if, and only if, their corresponding terms are equal. Furthermore, like
vectors, they can be added and subtracted as follows:
q1 ± q2 =

(s1 ± s2) + (x1 ± x2)i + (y1 ± y2)j + (z1 ± z2)k

.
7.9.4 Multiplying Quaternions
When multiplying quaternions we must employ the following rules:
i2 = j2 = k2 = ijk = −1
ij = k,
jk = i,
ki = j
ji = −k,
kj = −i,
ik = −j.
Note that whilst quaternion addition is commutative, the rules make quaternion
products non-commutative.

7.9
Rotating a Point About an Arbitrary Axis
105
Given two quaternions q1 and q2:
q1 = [s1 + v1] = [s1 + x1i + y1j + z1k]
q2 = [s2 + v2] = [s2 + x2i + y2j + z2k]
their product q1q2 is given by:
q1q2 =

(s1s2 −x1x2 −y1y2 −z1z2) + (s1x2 + s2x1 + y1z2 −y2z1)i
+ (s1y2 + s2y1 + z1x2 −z2x1)j + (s1z2 + s2z1 + x1y2 −x2y1)k

which can be rewritten using the dot and cross product notation as
q1q2 =

(s1s2 −v1 • v2) + s1v2 + s2v1 + v1 × v2

where
s1s2 −v1 • v2
is a scalar
and
s1v2 + s2v1 + v1 × v2
is a vector.
7.9.5 Pure Quaternion
A pure quaternion has a zero scalar term:
q = [v]
which is a vector. Therefore, given two pure quaternions:
q1 = [v1] = [x1i + y1j + z1k]
q2 = [v2] = [x2i + y2j + z2k]
their product is another pure quaternion:
q1q2 = [v1 × v2].
7.9.6 The Inverse Quaternion
Given the quaternion
q = [s + xi + yj + zk]

106
7
Transforms
its inverse q−1 is given by
q−1 = [s −xi −yj −zk]
|q|2
where |q| is the magnitude, or modulus of q, and equals:
|q| =

s2 + x2 + y2 + z2.
It can also be shown that
qq−1 = q−1q = 1.
7.9.7 Unit Quaternion
A unit quaternion has a magnitude equal to 1:
|q| =

s2 + x2 + y2 + z2 = 1.
7.9.8 Rotating Points About an Axis
Quaternions are used with vectors rather than individual points. Therefore, in order
to manipulate a single point, it is turned into a position vector, which has its tail at
the origin. A point is then represented in quaternion form by its equivalent position
vector with a zero scalar term. For example, a point P(x,y,z) is represented in
quaternion form by
P = [0 + xi + yj + zk]
which is transformed into another position vector using the process described be-
low. The coordinates of the rotated point are the components of the rotated position
vector. This may seem an indirect process, but in reality it turns out to be rather
simple. Let’s consider how this is achieved.
It can be shown that a position vector P is rotated through an angle θ about an
axis using the following operation:
P′ = qPq−1
where the axis and angle of rotation are encoded within the unit quaternion q, whose
modulus is 1, and P′ is the rotated vector. For example, to rotate a point P(x,y,z)
through an angle θ about an axis u, we use the following steps:
1. Convert the point P(x,y,z) to a pure quaternion P:
P = [0 + xi + yj + zk].

7.9
Rotating a Point About an Arbitrary Axis
107
Fig. 7.27 The point
P (0,1,1) is rotated to
P ′(1,1,0) using a quaternion
coincident with the y-axis
2. Deﬁne the axis of rotation as a unit vector ˆu:
ˆu = xui + yuj + zuk
and
|ˆu| = 1.
3. Deﬁne the transforming quaternion q:
q =

cos θ
2 + sin θ
2 ˆu

.
4. Deﬁne the inverse of the transforming quaternion q−1:
q−1 =

cos θ
2 −sin θ
2 ˆu

.
5. Compute P′:
P′ = qPq−1.
6. Unpack (x′,y′,z′):
P ′
x′,y′,z′
⇐
P′ =

0 + x′i + y′j + z′k

.
We can verify the action of the above transform with a simple example.
Example 7.14 Consider the point P(0,1,1) in Fig. 7.27 which is to be rotated 90◦
about the y-axis. We can see that the rotated point P ′ has the coordinates (1,1,0)
which we will conﬁrm algebraically. The point P is represented by the quaternion P:
P = [0 + 0i + 1j + 1k]
and is rotated by evaluating the quaternion P′:
P′ = qPq−1

108
7
Transforms
which will store the rotated coordinates. The axis of rotation is j, therefore the unit
quaternion q is given by
q =

cos 90◦
2 + sin 90◦
2 (0i + j + 0k)

=

cos45◦+ 0i + sin45◦j + 0k

.
The inverse quaternion q−1 is given by
q−1 = [cos 90◦
2 −sin 90◦
2 (0i + j −0k)]
|q|2
but as q is a unit quaternion, the denominator |q|2 equals unity and can be ignored.
Therefore
q−1 =

cos45◦−0i −sin45◦j −0k

.
Let’s evaluate qPq−1 in two stages: (qP)q−1, and for clarity, zero components will
continue to be included.
1.
qP =

cos45◦+ 0i + sin45◦j + 0k

[0 + 0i + j + 0k]
=

−sin45◦+ sin45◦i + cos45◦j + cos45◦k

.
2.
(qP)q−1 =

−sin45◦+ sin45◦i + cos45◦j + cos45◦k

·

cos45◦−0i −sin45◦j −0k

=

0 + 2cos45◦sin45◦i +

cos2 45◦+ sin2 45◦
j
+

cos2 45◦−sin2 45◦
k

P′ = [0 + i + j + 0k]
and the vector component of P′ conﬁrms that P is indeed rotated to (1,1,0).
Let’s evaluate one more example before continuing.
Example 7.15 Consider a rotation about the z-axis as illustrated in Fig. 7.28. The
original point has coordinates (0,1,1) and is rotated −90◦. From the ﬁgure we see
that this should ﬁnish at (1,0,1). This time the quaternion q is deﬁned by
q =

cos −90◦
2
+ sin −90◦
2
(0i + 0j + k)

=

cos45◦+ 0i + 0j −sin45◦k


7.9
Rotating a Point About an Arbitrary Axis
109
Fig. 7.28 The point
P (0,1,1) is rotated −90◦to
P ′(1,0,1) using a quaternion
coincident with the z-axis
with its inverse
q−1 =

cos45◦+ 0i + 0j + sin45◦k

and the point to be rotated in quaternion form is
P = [0 + 0i + j + k].
Evaluating this in two stages we have
1.
qP =

cos45◦+ 0i + 0j −sin45◦k

· [0 + 0i + j + k]
=

sin45◦+ sin45◦i + cos45◦j + cos45◦k

.
2.
(qP)q−1 =

sin45◦+ sin45◦i + cos45◦j + cos45◦k

·

cos45◦+ 0i + 0j + sin45◦k

=

0 + sin90◦i + cos90◦j + k

= [0 + i + 0j + k].
The vector component of P ′ conﬁrms that P is rotated to (1,0,1).
7.9.9 Roll, Pitch and Yaw Quaternions
Having already looked at roll, pitch and yaw rotations, we can now deﬁne them as
quaternions:
qroll =

cos θ
2 + 0i + 0j + sin θ
2k

qpitch =

cos θ
2 + sin θ
2i + 0j + 0k


110
7
Transforms
qyaw =

cos θ
2 + 0i + sin θ
2j + 0k

where θ is the angle of rotation.
These quaternions can be multiplied together to create a single quaternion repre-
senting a compound rotation. For example, if the quaternions are deﬁned as
qroll =

cos roll
2 + 0i + 0j + sin roll
2 k

qpitch =

cos pitch
2
+ sin pitch
2
i + 0j + 0k

qyaw =

cos yaw
2
+ 0i + sin yaw
2 j + 0k

they are combined to a single quaternion q:
q = qyawqpitchqroll = [s + xi + yj + zk]
where
s = cos yaw
2
cos pitch
2
cos roll
2 + sin yaw
2
sin pitch
2
sin roll
2
x = cos yaw
2
sin pitch
2
cos roll
2 + sin yaw
2
cos pitch
2
sin roll
2
y = sin yaw
2
cos pitch
2
cos roll
2 −cos yaw
2
sin pitch
2
sin roll
2
z = cos yaw
2
cos pitch
2
sin roll
2 −sin yaw
2
sin pitch
2
cos roll
2 .
Let’s examine this compound quaternion with an example.
Example 7.16 Given the following conditions let’s derive a single quaternion q to
represent the compound rotation:
roll = 90◦
pitch = 180◦
yaw = 0◦.
The values of s, x, y, z are
s = 0
x = cos45◦
y = −sin45◦
z = 0

7.9
Rotating a Point About an Arbitrary Axis
111
Fig. 7.29 The point
P (1,1,1) is subject to a
compound roll of 90◦to
(−1,1,1) and a pitch of 180◦
and ends up at
P ′(−1,−1,−1)
and the quaternion q is
q =

0 + cos45◦i −sin45◦j + 0k

.
If the point P(1,1,1) is subjected to this compound rotation, the rotated point is
computed using the standard quaternion transform:
P′ = qPq−1.
Let’s evaluate qPq−1 in two stages:
1.
qP =

0 + cos45◦i −sin45◦j + 0k

· [0 + i + j + k]
=

0 −sin45◦i −cos45◦j +

sin45◦+ cos45◦
k

.
2.
(qP)q−1 =

0 −sin45◦i −cos45◦j +

sin45◦+ cos45◦
k

·

0 −cos45◦i + sin45◦j + 0k

P′ = [0 −i −j −k].
Therefore, the coordinates of the rotated point are (−1,−1,−1) which can be con-
ﬁrmed from Fig. 7.29.
7.9.10 Quaternions in Matrix Form
There is a direct relationship between quaternions and matrices. For example, given
the quaternion
[s + xi + yj + zk]

112
7
Transforms
the equivalent matrix is
⎡
⎣
M11
M12
M13
M21
M22
M23
M31
M32
M33
⎤
⎦
where
M11 = 1 −2

y2 + z2
M12 = 2(xy −sz)
M13 = 2(xz + sy)
M21 = 2(xy + sz)
M22 = 1 −2

x2 + z2
M23 = 2(yz −sx)
M31 = 2(xz −sy)
M32 = 2(yz + sx)
M33 = 1 −2

x2 + y2
.
Substituting the following values of s, x, y, z:
s = 0
x = cos45◦
y = −sin45◦
z = 0
the matrix transformation is
⎡
⎣
x′
y′
z′
⎤
⎦=
⎡
⎣
0
−1
0
−1
0
0
0
0
−1
⎤
⎦
⎡
⎣
x
y
z
⎤
⎦.
Substituting (1,1,1) for (x,y,z) the rotated point (x′,y′,z′) becomes (−1,−1,−1)
as shown in Fig. 7.29.
7.9.11 Frames of Reference
A quaternion, or its equivalent matrix, can be used to rotate a vertex or position
a virtual camera. If unit quaternions are used, the associated matrix is orthogonal,
which means that its transpose is equivalent to rotating the frame of reference in

7.10
Transforming Vectors
113
the opposite direction. For example, if the virtual camera is oriented with a yaw
rotation of 180◦, i.e. looking along the negative z-axis, the orientation quaternion is
[0 + 0i + j + 0k]. Therefore s = 0, x = 0, y = 1, z = 0. The equivalent matrix is
⎡
⎣
−1
0
0
0
1
0
0
0
−1
⎤
⎦
which is equal to its transpose. Therefore, a vertex (x,y,z) in world space has co-
ordinates (x′,y′,z′) in camera space and the transform is deﬁned by
⎡
⎣
x′
y′
z′
⎤
⎦=
⎡
⎣
−1
0
0
0
1
0
0
0
−1
⎤
⎦
⎡
⎣
x
y
z
⎤
⎦.
If the vertex (x,y,z) = (1,1,0), then (x′,y′,z′) = (−1,1,0), which is correct.
However, it is unlikely that the virtual camera will only be subjected to a simple
rotation, as it will normally be translated from the origin. Consequently, a transla-
tion matrix will have to be introduced as described above.
7.10 Transforming Vectors
The transforms described in this chapter have been used to transform single points.
However, a geometric database will not only contain pure vertices, but vectors,
which must also be subject to any prevailing transform. A generic transform Q of a
3D point is represented by
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦= [Q]
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦
and as a vector is deﬁned by two points we can write
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦= [Q]
⎡
⎢⎢⎣
x2 −x1
y2 −y1
z2 −z1
1 −1
⎤
⎥⎥⎦
where we see the homogeneous scaling term collapse to zero; which implies that
any vector [x y z]T can be transformed using
⎡
⎢⎢⎣
x′
y′
z′
0
⎤
⎥⎥⎦= [Q]
⎡
⎢⎢⎣
x
y
z
0
⎤
⎥⎥⎦.
Let’s put this to the test by using a transform from an earlier example.

114
7
Transforms
Fig. 7.30 Vector [1 1 0]T is
transformed to [−1 0 −1]T
Example 7.17
The problem concerned a change of axial system where a virtual
camera was subject to the following:
roll = 180◦
pitch = 90◦
yaw = 90◦
tx = 2
ty = 2
tz = 0
and the transform is
⎡
⎢⎢⎣
x′
y′
z′
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
0
−1
0
2
0
0
1
0
−1
0
0
2
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
x
y
z
1
⎤
⎥⎥⎦.
The point (1,1,0) is transformed to (1,0,1), as shown in Fig. 7.30. And the vector
[1 1 0]T is transformed to [−1 0 −1]T , using the following transform
⎡
⎢⎢⎣
−1
0
−1
0
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
0
−1
0
2
0
0
1
0
−1
0
0
2
0
0
0
1
⎤
⎥⎥⎦
⎡
⎢⎢⎣
1
1
0
0
⎤
⎥⎥⎦
which is correct with reference to Fig. 7.30.
7.11 Determinants
Before concluding this chapter, I would like to expand upon the role of the determi-
nant in transforms. Normally, determinants arise in the solution of linear equations

7.11
Determinants
115
such as
c1 = a1x + b1y
c2 = a2x + b2y
where values of x and y are deﬁned in terms of the other constants. Without showing
the algebra, the values of x and y are given by
x = c1b2 −c2b1
a1b2 −a2b1
(7.5)
y = a1c2 −a2c1
a1b2 −a2b1
(7.6)
provided that the denominator a1b2 −a2b1 ̸= 0.
The linear equations can be written in matrix form as
c1
c2

=
a1
b1
a2
b2
x
y

and we notice that the denominator comes from the matrix terms a1b2 −a2b1. This
is called the determinant, and is only valid for square matrices. A determinant is
deﬁned as follows:

a1
b1
a2
b2
 = a1b2 −a2b1
where the terms are cross-multiplied and subtracted. With this notation it is possible
to rewrite the original linear equations as
x
 c1 b1
c2 b2
 =
y
 a1 c1
a2 c2
 =
1
 a1 b1
a2 b2
.
With the following set of three linear equations:
d1 = a1x + b1y + c1z
d2 = a2x + b2y + c2z
d3 = a3x + b3y + c3z
the value of x is computed using
x = d1b2c3 −d1b3c2 + d2b3c1 −d2b1c3 + d3b1c2 −d3b2c1
a1b2c3 −a1b3c2 + a2b3c1 −a2b1c3 + a3b1c2 −a3b2c1
with similar expressions for y and z. Once more, the denominator comes from the
determinant of the matrix associated with the matrix formulation of the linear equa-
tions:

116
7
Transforms
⎡
⎣
d1
d2
d3
⎤
⎦=
⎡
⎣
a1
b1
c1
a2
b2
c2
a3
b3
c3
⎤
⎦
⎡
⎣
x
y
z
⎤
⎦
where

a1
b1
c1
a2
b2
c2
a3
b3
c3

= a1b2c3 −a1b3c2 + a2b3c1 −a2b1c3 + a3b1c2 −a3b2c1
which can be written as
a1

b2
c2
b3
c3
 −a2

b1
c1
b3
c3
 + a3

b1
c1
b2
c2
.
Let’s now see what creates a zero determinant. If we write, for example
10 = 2x + y
there are an inﬁnite number of solutions for x and y, and it is impossible to solve
the equation. However, if we introduce a second equation relating x and y:
4 = 5x −y
we can solve for x and y using (7.5) and (7.6):
x = 10 × (−1) −4 × 1
2 × (−1) −5 × 1 = −14
−7 = 2
y =
2 × 4 −5 × 10
2 × (−1) −5 × 1 = −42
−7 = 6
therefore x = 2 and y = 6, which is correct. But say the second equation is
20 = 4x + 2y
giving this pair of simultaneous equations:
10 = 2x + y
(7.7)
20 = 4x + 2y.
(7.8)
If we now solve for x and y we get
x = 10 × 2 −20 × 1
2 × 2 −4 × 1
= 0
0 = undeﬁned
y = 2 × 20 −4 × 10
2 × 2 −4 × 1
= 0
0 = undeﬁned
which yields undeﬁned results. The reason for this is that (7.7) is the same as (7.8)—
the second equation is nothing more than twice the ﬁrst equation, and therefore

7.11
Determinants
117
Fig. 7.31 The inner
parallelogram is the
transformed unit square
brings nothing new to the relationship. When this occurs, the equations are called
linearly dependent.
Having shown the algebraic origins of the determinant, let us investigate their
graphical signiﬁcance. Consider the transform
x′
y′

=
a
b
c
d
x
y

.
The determinant of the transform is ad −cb. If we subject the vertices of a unit-
square to this transform, we create the situation shown in Fig. 7.31. The vertices of
the unit-square are transformed as follows:
(0,0)
⇒
(0,0)
(1,0)
⇒
(a,c)
(1,1)
⇒
(a + b,c + d)
(0,1)
⇒
(b,d).
From Fig. 7.31 it can be seen that the area of the transformed unit-square A′ is given
by
area = (a + b)(c + d) −B −C −D −E −F −G
= ac + ad + cb + bd −1
2bd −cb −1
2ac −1
2bd −cb −1
2ac
= ad −cb
which is the determinant of the transform. But as the area of the original unit-square
is 1, the determinant of the transform controls the scaling factor applied to the trans-
formed shape.
Let’s examine the determinants of two transforms: The ﬁrst 2D transform en-
codes a scaling of 2, and results in an overall area scaling of 4:
2
0
0
2


118
7
Transforms
Fig. 7.32 The axial system
used to produce a perspective
view
and the determinant is

2
0
0
2
 = 4.
The second 2D transform encodes a scaling of 3 and a translation of (3,3), and
results in an overall area scaling of 9:
⎡
⎣
3
0
3
0
3
3
0
0
1
⎤
⎦
and the determinant is
3

3
3
0
1
 −0

0
3
0
1
 + 0

0
3
3
3
 = 9.
These two examples demonstrate the extra role played by the elements of a matrix.
7.12 Perspective Projection
Of all the projections employed in computer graphics, the perspective projection is
one most widely used. There are two stages to its computation: the ﬁrst involves
converting world coordinates to the camera’s frame of reference, and the second
transforms camera coordinates to the projection plane coordinates. We have already
looked at the transforms for locating a camera in world space, and the inverse trans-
form for converting world coordinates to the camera’s frame of reference. Let’s now
investigate how these camera coordinates are transformed into a perspective projec-
tion.
We begin by assuming that the camera is directed along the z-axis as shown in
Fig. 7.32. Positioned d units along the z-axis is a projection screen, which is used
to capture a perspective projection of an object. Figure 7.32 shows that any point
(xc,yc,zc) is transformed to (xp,yp,d). It also shows that the screen’s x-axis is
pointing in the opposite direction to the camera’s x-axis, which can be compensated
for by reversing the sign of xp when it is computed.

7.12
Perspective Projection
119
Fig. 7.33 The plan view of
the camera’s axial system
Fig. 7.34 The side view of
the camera’s axial system
Figure 7.33 shows a plan view of the scenario depicted in Fig. 7.32, and Fig. 7.34
a side view, which permits us to inspect the geometry and make the following ob-
servations:
xc
zc
= −xp
d
xp = −xc
zc/d
and
yc
zc
= yp
d
yp =
yc
zc/d .
This is expressed in matrix form as
⎡
⎢⎢⎣
xp
yp
zp
w
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
−1
0
0
0
0
1
0
0
0
0
1
0
0
0
1/d
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
xc
yc
zc
1
⎤
⎥⎥⎦.
At ﬁrst the transform seems strange, but if we multiply this out we get
[xp
yp
zp
w]T = [−xc
yc
zc
zc/d]T

120
7
Transforms
and if we remember the idea behind homogeneous coordinates, we must divide the
terms xp, yp, zp by w to get the scaled terms, which produces
xp = −xc
zc/d
yp =
yc
zc/d
zp =
zc
zc/d = d
which, after all, is rather elegant. Notice that this transform takes into account the
sign change that occurs with the x-coordinate. Some books will leave this sign re-
versal until the mapping is made to screen coordinates.
7.13 Summary
The purpose of this chapter was to introduce the reader to transforms and matrices—
I hope this has been achieved. This end of the chapter, is not really the end of the
subject, as one can do so much with matrices and quaternions. For example, it would
be interesting to see how a matrix behaves when some of its elements are changed
dynamically, and what happens when we interpolate between a pair of quaternions.
Such topics will be addressed in later chapters.

Chapter 8
Interpolation
8.1 Introduction
This chapter covers linear and non-linear interpolation of scalars, and includes
trigonometric and cubic polynomials. It also includes the interpolation of vectors
and quaternions.
8.2 Background
Interpolation is not a branch of mathematics but rather a collection of techniques
the reader will ﬁnd useful when solving computer graphics problems. Basically, an
interpolant is a way of changing one number into another, perhaps in 10 equal steps.
Thus if we start with 2 and repeatedly added 0.2, it would generate the sequence 2.0,
2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, and 4. These numbers could then be used
to translate, scale, rotate an object, move a virtual camera, or change the position,
colour or brightness of a virtual light source.
To implement the above interpolant for different numbers we require a formula,
which is one of the ﬁrst exercises of this chapter. We also need to explore ways of
controlling the spacing between the interpolated values. In animation, for example,
we often need to move an object very slowly and gradually increase its speed. Con-
versely, we may want to bring an object to a halt, making its speed less and less.
The interpolant function includes a parameter within its algorithm, which permits
any interpolated value to be created at will. The parameter can depend upon time,
or operate over a distance in space.
8.3 Linear Interpolation
A linear interpolant generates equal spacing between the interpolated values for
equal changes in the interpolating parameter. In the above example the increment
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_8, © Springer-Verlag London 2014
121

122
8
Interpolation
Fig. 8.1 The graphs of
(1 −t) and t over the range 0
to 1
0.2 is calculated by subtracting the ﬁrst number from the second and dividing the
result by 10, i.e. (4 −2)/10 = 0.2. Although this works, it is not in a very ﬂexible
form, so let’s express the problem differently.
Given two numbers n1 and n2, which represent the start and ﬁnal values of the
interpolant, we require an interpolated value controlled by a parameter t that varies
between 0 and 1. When t = 0, the result is n1, and when t = 1, the result is n2.
A solution to this problem is given by
n = n1 + t(n2 −n1)
for when n1 = 2, n2 = 4 and t = 0.5:
n = 2 + 1
2(4 −2) = 3
which is a halfway point. Furthermore, when t = 0, n = n1, and when t = 1, n = n2,
which conﬁrms that we have a sound interpolant. However, it can be expressed
differently:
n = n1(1 −t) + n2t
(8.1)
which shows what is really going on, and forms the basis for further development.
Figure 8.1 shows the graphs of (1 −t) and t over the range 0 to 1. With reference
to (8.1), we see that as t changes from 0 to 1, the (1 −t) term varies from 1 to 0.
This attenuates the value of n1 to zero over the range of t, while the t term scales
n2 from zero to its actual value. Figure 8.2 illustrates these two actions with n1 = 1
and n2 = 5.
Notice that the terms (1 −t) and t sum to unity—this is not a coincidence. This
type of interpolant ensures that if it takes a quarter of n1, it balances it with three-
quarters of n2, and vice versa. Obviously we could design an interpolant that takes
arbitrary portions of n1 and n2, but that would lead to arbitrary results.
Although this interpolant is extremely simple, it is widely used in computer
graphics software. Just to put it into context, consider the task of moving an ob-

8.3
Linear Interpolation
123
Fig. 8.2 The top line shows
the result of linearly
interpolating between 1 and 5
Fig. 8.3 Interpolating
between the points (1,1) and
(4,5)
ject between two locations (x1,y1,z1) and (x2,y2,z2). The interpolated position is
given by
x = x1(1 −t) + x2t
y = y1(1 −t) + y2t
z = x1(1 −t) + z2t
⎫
⎪⎬
⎪⎭
0 ≤t ≤1.
The parameter t could be generated from two frame values within an animation.
What is assured by this interpolant, is that equal steps in t result in equal steps in
x, y, and z. Figure 8.3 illustrates this linear spacing with a 2D example where we
interpolate between the points (1,1) and (4,5). Note the equal spacing between the
intermediate interpolated points.
We can write (8.1) in matrix form as follows:
n =

(1 −t)
t
n1
n2

or as
n = [t
1]
−1
1
1
0
n1
n2

.
The reader can conﬁrm that this generates identical results to the algebraic form.

124
8
Interpolation
Fig. 8.4 The curves for
cos2 t and sin2 t
Fig. 8.5 Interpolating
between 1 and 3 using a
trigonometric interpolant
8.4 Non-linear Interpolation
A linear interpolant ensures that equal steps in the parameter t give rise to equal
steps in the interpolated values; but it is often required that equal steps in t give
rise to unequal steps in the interpolated values. We can achieve this using a variety
of mathematical techniques. For example, we could use trigonometric functions or
polynomials. To begin with, let’s look at a trigonometric solution.
8.4.1 Trigonometric Interpolation
In Chap. 4 we noted that sin2 t + cos2 t = 1, which satisﬁes one of the requirements
of an interpolant: the terms must sum to 1. If t varies between 0 and π/2, cos2 t
varies between 1 and 0, and sin2 t varies between 0 and 1, which can be used to
modify the two interpolated values n1 and n2 as follows:
n = n1 cos2 t + n2 sin2 t,
0 ≤t ≤π/2.
(8.2)
The interpolation curves are shown in Fig. 8.4.
If n1 = 1 and n2 = 3 in (8.2), we obtain the curves shown in Fig. 8.5. If we apply
this interpolant to two 2D points in space, (1,1) and (8,3), we obtain a straight-line
interpolation, but the distribution of points is non-linear, as shown in Fig. 8.6. In
other words, equal steps in t give rise to unequal distances.

8.4
Non-linear Interpolation
125
Fig. 8.6 Interpolating
between two points (1,1) and
(8,3)
The main problem with this approach is that it is impossible to change the nature
of the curve—it is a sinusoid, and its slope is determined by the interpolated values.
One way of gaining control over the interpolated curve is to use a polynomial, which
is the subject of the next section.
8.4.2 Cubic Interpolation
To begin with, let’s develop a cubic blending function that will be similar to the pre-
vious sinusoidal one. This can then be extended to provide extra ﬂexibility. A cubic
polynomial will form the basis of the interpolant:
v1 = at3 + bt2 + ct + d
and the ﬁnal interpolant will be of the form
n = [v1
v2]
n1
n2

.
The task is to ﬁnd the values of the constants associated with the polynomials v1
and v2. The requirements are:
1. The cubic function v2 must grow from 0 to 1 for 0 ≤t ≤1.
2. The slope at a point t must equal the slope at the point (1−t). This ensures slope
continuity over the range of the function.
3. The value v2 at any point t must also produce (1 −v2) at (1 −t). This ensures
curve continuity.
• To satisfy the ﬁrst requirement:
v2 = at3 + bt2 + ct + d
and when t = 0, v2 = 0 and d = 0. Similarly, when t = 1, v2 = a + b + c.
• We now need some calculus, which is described in Chap. 13. To satisfy the second
requirement, differentiate v2 to obtain the slope:

126
8
Interpolation
Fig. 8.7 Two cubic
interpolants
dv2
dt = 3at2 + 2bt + c = 3a(1 −t)2 + 2b(1 −t) + c
and equating constants we discover c = 0 and 0 = 3a + 2b.
• To satisfy the third requirement:
at3 + bt2 = 1 −

a(1 −t)3 + b(1 −t)2
where we discover 1 = a + b. But 0 = 3a + 2b, therefore a = −2 and b = 3.
Therefore,
v2 = −2t3 + 3t2.
(8.3)
To ﬁnd the curve’s mirror curve, which starts at 1 and collapses to 0 as t moves from
0 to 1, we subtract (8.3) from 1:
v1 = 2t3 −3t2 + 1.
Therefore, the two polynomials are
v1 = 2t3 −3t2 + 1
(8.4)
v2 = −2t3 + 3t2
(8.5)
and are shown in Fig. 8.7. They are used as interpolants as follows:
n = v1n1 + v2n2
or in matrix form:
n =

(2t3 −3t2 + 1)
(−2t3 + 3t2)
n1
n2

(8.6)
n =

t3
t2
t
1

⎡
⎢⎢⎣
2
−2
−3
3
0
0
1
0
⎤
⎥⎥⎦
n1
n2

.

8.4
Non-linear Interpolation
127
Fig. 8.8 Interpolating
between 1 and 3 using a cubic
interpolant
Fig. 8.9 A cubic interpolant
between points (1,1) and
(8,3)
If we let n1 = 1 and n2 = 3 we obtain the curves shown in Fig. 8.8. And if we
apply the interpolant to the points (1,1) and (8,3) we obtain the curves shown in
Fig. 8.9. This interpolant can be used to blend any pair of numbers together.
Now let’s examine the scenario where we interpolate between two points P1 and
P2, and have to arrange that the interpolated curve is tangential with a vector at
each point. Such tangent vectors forces the curve into a desired shape, as shown
in Fig. 8.11. Unfortunately, calculus is required to compute the slope of the cubic
polynomial, which is covered in a later chapter.
As this interpolant can be applied to 2D and 3D points, P1 and P2 are repre-
sented by their position vectors P1 and P2, which are unpacked for each Cartesian
component.
We now have two position vectors P1 and P2 and their respective tangent vectors
s1 and s2. The requirement is to modulate the interpolating curve in Fig. 8.8 with
two further cubic curves. One that blends out the tangent vector s1 associated with
P1, and the other that blends in the tangent vector s2 associated with P2. Let’s begin
with a cubic polynomial to blend s1 to zero:
vout = at3 + bt2 + ct + d.

128
8
Interpolation
Fig. 8.10 The four Hermite
interpolating curves
vout must equal zero when t = 0 and t = 1, otherwise it will disturb the start and
end values. Therefore d = 0, and
a + b + c = 0.
The rate of change of vout relative to t (i.e. dvout/dt) must equal 1 when t = 0, so
it can be used to multiply s1. When t = 1, dvout/dt must equal 0 to attenuate any
trace of s1:
dvout
dt
= 3at2 + 2bt + c
but dvout/dt = 1 when t = 0, and dvout/dt = 0 when t = 1. Therefore, c = 1, and
3a + 2b + 1 = 0.
Using (8.6) implies that b = −2 and a = 1. Therefore, the polynomial vout has the
form
vout = t3 −2t2 + t.
(8.7)
Using a similar argument, one can prove that the function to blend in s2 equals
vin = t3 −t2.
(8.8)
Graphs of (8.4), (8.5), (8.7) and (8.8) are shown in Fig. 8.10. The complete interpo-
lating function looks like
n =

(2t3 −3t2 + 1)
(−2t3 + 3t2)
(t3 −2t2 + t)
(t3 −t2)

⎡
⎢⎢⎣
P1
P2
s1
s2
⎤
⎥⎥⎦
and unpacking the constants and polynomial terms we obtain
n =

t3
t2
t1
1

⎡
⎢⎢⎣
2
−2
1
1
−3
3
−2
−1
0
0
1
0
1
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
P1
P2
s1
s2
⎤
⎥⎥⎦.

8.4
Non-linear Interpolation
129
Fig. 8.11 A Hermite curve
between the points (0,0) and
(1,1) with tangent vectors
[−5 0]T and [0 −5]T
This type of interpolation is called Hermite interpolation, after the French mathe-
matician Charles Hermite (1822–1901). Hermite also proved in 1873 that e is tran-
scendental.
Let’s demonstrate Hermite interpolation with a 2D example. It is also very easy
to implement the same technique in 3D.
Example 8.1
Figure 8.11 shows how two points (0,0) and (1,1) are to be con-
nected by a cubic curve that responds to the initial and ﬁnal tangent vectors. At
the start point (0,1) the tangent vector is [−5 0]T , and at the ﬁnal point (1,1) the
tangent vector is [0 −5]T . The x and y interpolants are
x =

t3
t2
t1
1

⎡
⎢⎢⎣
2
−2
1
1
−3
3
−2
−1
0
0
1
0
1
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
0
1
−5
0
⎤
⎥⎥⎦
y =

t3
t2
t1
1

⎡
⎢⎢⎣
2
−2
1
1
−3
3
−2
−1
0
0
1
0
1
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
0
1
0
−5
⎤
⎥⎥⎦
which become
x =

t3
t2
t1
1

⎡
⎢⎢⎣
−7
13
−5
0
⎤
⎥⎥⎦= −7t3 + 13t2 −5t
y =

t3
t2
t1
1

⎡
⎢⎢⎣
−7
8
0
0
⎤
⎥⎥⎦= −7t3 + 8t2.
When these polynomials are plotted over the range 0 ≤t ≤1 we obtain the curve
shown in Fig. 8.11.
We have now reached a point where we are starting to discover how paramet-
ric polynomials can be used to generate space curves, which is the subject of the

130
8
Interpolation
Fig. 8.12 Vector v is derived
from a part of v1 and b part
of v2
next chapter. So, to conclude this chapter on interpolants, we will take a look at
interpolating vectors.
8.5 Interpolating Vectors
So far we have been interpolating between a pair of numbers. Now the question
arises: can we use the same interpolants for vectors? Perhaps not, because a vector
contains both magnitude and direction, and when we interpolate between two vec-
tors, both quantities must be preserved. For example, if we interpolated the x- and
y-components of the vectors [2 3]T and [4 7]T , the in-between vectors would carry
the change of orientation but ignore the change in magnitude. To preserve both, we
must understand how the interpolation should operate.
Figure 8.12 shows two unit vectors v1 and v2 separated by an angle θ. The inter-
polated vector v is deﬁned as a proportion of v1 and a proportion of v2:
v = av1 + bv2.
Let’s deﬁne the values of a and b such that they are a function of the separating
angle θ. Vector v is tθ from v1 and (1−t)θ from v2, and it is evident from Fig. 8.12
that using the sine rule
a
sin(1 −t)θ =
b
sintθ
(8.9)
and furthermore:
m = a costθ
n = b cos(1 −t)θ
where
m + n = 1.
(8.10)
From (8.9)
b =
a sintθ
sin(1 −t)θ

8.5
Interpolating Vectors
131
Fig. 8.13 Curves of the two
parts of (8.11)
and from (8.10) we get
a costθ + a sintθ cos(1 −t)θ
sin(1 −t)θ
= 1.
Solving for a we ﬁnd
a = sin(1 −t)θ
sinθ
b = sintθ
sinθ .
Therefore, the ﬁnal interpolant is
v = sin(1 −t)θ
sinθ
v1 + sintθ
sinθ v2.
(8.11)
Example 8.2 To see how this operates, let’s consider a simple exercise of interpo-
lating between two unit vectors [1 0]T and [−1/
√
2 1/
√
2]T . The angle between the
vectors θ is 135◦. Equation (8.11) is used to interpolate the x- and the y-components
individually:
vx = sin(1 −t)135◦
sin135◦
× (1) + sint135◦
sin135◦×

−1
√
2

vy = sin(1 −t)135◦
sin135◦
× (0) + sint135◦
sin135◦×
 1
√
2

.
Figure 8.13 shows the interpolating curves and Fig. 8.14 shows the positions of the
interpolated vectors, and a trace of the interpolated vectors.
Two observations to note with (8.11):
• The angle θ is the angle between the two vectors, which, if not known, can be
computed using the dot product.
• Secondly, the range of θ is given by 0 ≤θ ≤180◦, but when θ = 180◦the de-
nominator collapses to zero. To illustrate this we will repeat (8.11) for θ = 179◦.
The result is shown in Fig. 8.15, which reveals clearly that the interpolant works
normally over this range. One more degree, however, and it fails! Nevertheless, one

132
8
Interpolation
Fig. 8.14 A trace of the
interpolated vectors between
[1 0]T and [−1/
√
2 1/
√
2]T
Fig. 8.15 Interpolating
between two unit vectors
179◦apart
Fig. 8.16 Interpolating
between the vectors [2 0]T
and [0 1]T
could still leave the range equal to 180◦and test for the conditions t = 0 then v = v1
and when t = 180◦then v = v2.
So far, we have only considered unit vectors. Now let’s see how the interpolant
reacts to vectors of different magnitudes. As a test, we can input the following vec-
tors to (8.11):
v1 = [2
0]T ,
and
v2 = [0
1]T .
The separating angle θ = 90◦, and the result is shown in Fig. 8.16. Note how the
initial length of v1 reduces from 2 to 1 over 90◦. It is left to the reader to examine
other combinations of vectors. There is one more application for this interpolant,
and that is with quaternions.

8.6
Interpolating Quaternions
133
8.6 Interpolating Quaternions
It just so happens that the interpolant used for vectors also works with quaternions.
Which means that, given two quaternions q1 and q2, the interpolated quaternion q
is given by
q = sin(1 −t)θ
sinθ
q1 + sintθ
sinθ q2.
(8.12)
The interpolant is applied individually to the four terms of the quaternion.
When interpolating vectors, θ is the angle between the two vectors. If this is not
known, it can be derived using the dot product formula:
cosθ = v1 • v2
|v1||v2|
= x1x2 + y1y2 + z1z2
|v1||v2|
.
Similarly, when interpolating quaternions, θ is computed by taking the 4D dot prod-
uct of the two quaternions:
cosθ = q1 • q2
|q1||q2|
= s1s2 + x1x2 + y1y2 + z1z2
|q1||q2|
.
If we are using unit quaternions
cosθ = s1s2 + x1x2 + y1y2 + z1z2.
(8.13)
We are now in a position to demonstrate how to interpolate between a pair of quater-
nions. For example, say we have two quaternions q1 and q2 that rotate 0◦and 90◦
about the z-axis respectively:
q1 =

cos 0◦
2 + sin 0◦
2 [0i + 0j + 1k]

q1 =

cos 90◦
2 + sin 90◦
2 [0i + 0j + 1k]

which become
q1 = [1 + 0i + 0j + 0k]
q2 ≈[0.7071 + 0i + 0j + 0.7071k].
Any interpolated quaternion is found by the application of (8.12). But ﬁrst, we
need to ﬁnd the value of θ using (8.13):
cosθ ≈0.7071
θ = 45◦.

134
8
Interpolation
Now when t = 0.5, the interpolated quaternion is given by
q ≈sin(45◦/2)
sin45◦
[1 + 0i + 0j + 0k] + sin(45◦/2)
sin45◦
[0.7071 + 0i + 0j + 0.7071k]
≈0.541196[1 + 0i + 0j + 0k] + 0.541196[0.7071 + 0i + 0j + 0.7071k]
≈[0.541196 + 0i + 0j + 0k] + [0.382683 + 0i + 0j + 0.382683k]
≈[0.923879 + 0i + 0j + 0.382683k].
Although it is not obvious, this interpolated quaternion is also a unit quaternion,
as the square root of the sum of the squares is 1. It should rotate a point about the
z-axis, halfway between 0◦and 90◦, i.e. 45◦. We can test that this works with a
simple example.
Example 8.3 Take the point (1,0,0) and subject it to the standard quaternion oper-
ation:
P′ = qPq−1.
To keep the arithmetic work to a minimum, we substitute a = 0.923879 and b =
0.382683. Therefore,
q = [a + 0i + 0j + bk]
q−1 = [a −0i −0j −bk]
P′ = [a + 0i + 0j + bk] · [0 + 1i + 0j + 0k] · [a −0i −0j −bk]
= [0 + ai + bj + 0k] · [a −0i −0j −bk]
=

0 +

a2 −b2
i + 2abj + 0k

P′ ≈[0 + 0.7071i + 0.7071j + 0k].
Therefore, (1,0,0) is rotated to (0.7071,0.7071,0), which is correct!
8.7 Summary
This chapter has covered some very interesting, yet simple ideas about changing
one number into another. In the following chapter we will develop these ideas and
see how we design algebraic solutions to curves and surfaces.

Chapter 9
Curves and Patches
9.1 Introduction
In this chapter we investigate the foundations of curves and surface patches. This
is a very large and complex subject and it will be impossible to delve too deeply.
However, we can explore many of the ideas that are essential to understanding the
mathematics behind 2D and 3D curves and how they are developed to produce sur-
face patches. Once you have understood these ideas you will be able to read more
advanced texts and develop a wider knowledge of the subject.
9.2 Background
Two people, working for competing French car manufacturers, are associated with
what are now called Bézier curves: Paul de Casteljau, who worked for Citröen, and
Pierre Bézier, who worked for Rénault. De Casteljau’s work was slightly ahead
of Bézier’s, but because of Citröen’s policy of secrecy it was never published, so
Bézier’s name has since been associated with the theory of polynomial curves and
surfaces. Casteljau started his research work in 1959, but his reports were only dis-
covered in 1975, by which time Bézier had become known for his special curves
and surfaces.
In the previous chapter we saw how polynomials are used as interpolants and
blending functions. We will now see how these form the basis of parametric curves
and patches. To begin with, let’s start with the humble circle.
9.3 The Circle
The circle has a very simple equation:
x2 + y2 = r2
where r is the radius and (x,y) is a point on the circumference. Although this equa-
tion has its uses, it is not very convenient for drawing the curve. What we really
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_9, © Springer-Verlag London 2014
135

136
9
Curves and Patches
Fig. 9.1 The circle is drawn
by tracing out a series of
points on the circumference
want are two functions that generate the coordinates of any point on the circumfer-
ence in terms of some parameter t. Figure 9.1 shows a scenario where the x- and
y-coordinates are given by
x = r cost
y = r sint

0 ≤t ≤2π.
By varying the parameter t over the range 0 to 2π, we trace out the curve of the
circumference. In fact, by selecting a suitable range of t we can isolate any portion
of the circle’s circumference.
9.4 The Ellipse
The equation for an ellipse is
x2
r2
maj
+ y2
r2
min
= 1
and its parametric form is
x = rmaj cost
y = rmin sint

0 ≤t ≤2π
where rmaj and rmin are the major and minor radii respectively, and (x,y) is a point
on the circumference, as shown in Fig. 9.2. We now examine a very useful paramet-
ric curve called a Bézier curve, named after its inventor Pierre Bézier.
9.5 Bézier Curves
9.5.1 Bernstein Polynomials
Bézier curves employ Bernstein polynomials which were described by the Russian
mathematician Sergei Bernstein (1880–1968) in 1912. They are expressed as fol-
lows:

9.5
Bézier Curves
137
Fig. 9.2 An ellipse showing
the major and minor radii
Bn
i (t) =
n
i

ti(1 −t)n−1
(9.1)
where
n
i

is shorthand for the number of selections of i different items from n
distinguishable items when the order of selection is ignored, and equals
n
i

=
n!
(n −i)!i!
(9.2)
where, for example, 3! (factorial 3) is shorthand for 3 × 2 × 1. When (9.2) is eval-
uated for different values of i and n, we discover the pattern of numbers shown in
Table 9.1. This pattern of numbers is known as Pascal’s triangle. In western coun-
tries they are named after a 17th century French mathematician, even though they
had been described in China as early as 1303 in Precious Mirror of the Four El-
ements by the Chinese mathematician Chu Shih-chieh. The pattern represents the
coefﬁcients found in binomial expansions. For example, the expansion of (x + a)n
for different values of n is
(x + a)0 = 1
(x + a)1 = 1x + 1a
(x + a)2 = 1x2 + 2ax + 1a2
(x + a)3 = 1x3 + 3ax2 + 3a2x + 1a3
(x + a)4 = 1x4 + 4ax3 + 6a2x2 + 4a3x + 1a4
which reveal Pascal’s triangle as coefﬁcients of the polynomial terms. Thus the
n
i

term in (9.1) is nothing more than a generator for Pascal’s triangle. The powers
of t and (1 −t) in (9.1) appear as shown in Table 9.2 for different values of n
and i. When the two sets of results are combined we get the complete Bernstein
polynomial terms shown in Table 9.3. One very important property of these terms
is that they sum to unity, which is an important feature of any interpolant.

138
9
Curves and Patches
Table 9.1 Pascal’s triangle
n
i
0
1
2
3
4
5
6
0
1
1
1
1
2
1
2
1
3
1
3
3
1
4
1
4
6
4
1
5
1
5
10
10
5
1
6
1
6
15
20
15
6
1
Table 9.2 Expansion of the
terms t and (1 −t)
n
i
0
1
2
3
4
1
t
(1 −t)
2
t2
t(1 −t)
(1 −t)2
3
t3
t2(1 −t)
t(1 −t)2
(1 −t)3
4
t4
t3(1 −t)
t2(1 −t)2
t(1 −t)3
(1 −t)4
Table 9.3 The Bernstein
polynomial terms
n
i
0
1
2
3
4
1
1t
1(1 −t)
2
1t2
2t(1 −t)
1(1 −t)2
3
1t3
3t2(1 −t)
3t(1 −t)2
1(1 −t)3
4
1t4
4t3(1 −t)
6t2(1 −t)2
4t(1 −t)3
1(1 −t)4
The sum of (1 −t) and t is 1, therefore,

(1 −t) + t
n = 1
(9.3)
which is why we can use the binomial expansion of (1 −t) and t as interpolants.
For example, when n = 2 we obtain the quadratic form:
(1 −t)2 + 2t(1 −t) + t2 = 1.
(9.4)
Figure 9.3 shows the graphs of the three polynomial terms of (9.4). The (1 −t)2
graph starts at 1 and decays to zero, whereas the t2 graph starts at zero and rises
to 1. The 2t(1 −t) graph starts at zero reaches a maximum of 0.5 and returns to
zero. Thus the central polynomial term has no inﬂuence at the end conditions, where

9.5
Bézier Curves
139
Fig. 9.3 The graphs of the
quadratic Bernstein
polynomials
Fig. 9.4 Bernstein
interpolation between the
values 1 and 3
Fig. 9.5 Bernstein
interpolation between the
values 1 and 3 with vc = 3
t = 0 and t = 1. We can use these three terms to interpolate between a pair of values
as follows:
v = v1(1 −t)2 + 2t(1 −t) + v2t2.
If v1 = 1 and v2 = 3 we obtain the curve shown in Fig. 9.4. However, there is
nothing preventing us from multiplying the middle term 2t(1 −t) by any arbitrary
number vc:
v = v1(1 −t)2 + vc2t(1 −t) + v2t2.
(9.5)
For example, if vc = 3, we obtain the graph shown in Fig. 9.5, which is totally
different to the curve in Fig. 9.4. As Bézier observed, the value of vc provides an
excellent mechanism for determining the shape of the curve between two values.
Figure 9.6 shows a variety of graphs for different values of vc. A very interesting
effect occurs when the value of vc is set midway between v1 and v2. For example,
when v1 = 1, v2 = 3 and vc = 2, we obtain linear interpolation between v1 and v2,
as shown in Fig. 9.7.

140
9
Curves and Patches
Fig. 9.6 Bernstein
interpolation between the
values 1 for different values
of vc
Fig. 9.7 Linear interpolation
using a quadratic Bernstein
interpolant
Fig. 9.8 Quadratic Bézier
curve between (1,1) and
(4,3), with (3,4) as the
control
9.5.2 Quadratic Bézier Curves
Quadratic Bézier curves are formed by using Bernstein polynomials to interpolate
between the x-, y- and z-coordinates associated with the start- and end-points form-
ing the curve. For example, we can draw a 2D quadratic Bézier curve between (1,1)
and (4,3) using the following equations:
x = 1(1 −t)2 + xc2t(1 −t) + 4t2
(9.6)
y = 1(1 −t)2 + yc2t(1 −t) + 3t2.
(9.7)
But what should be the values of (xc,yc)? Well, this is entirely up to us; the position
of this control vertex determines how the curve moves between (1,1) and (4,3).
A Bézier curve possesses interpolating and approximating qualities: the interpo-
lating feature ensures that the curve passes through the end points, while the approx-
imating feature shows how the curve passes close to the control point. To illustrate
this, if we make xc = 3 and yc = 4 we obtain the curve shown in Fig. 9.8, which
shows how the curve intersects the end-points, but misses the control point. It also
highlights two important features of Bézier curves: the convex hull property, and the
end slopes of the curve.

9.5
Bézier Curves
141
Fig. 9.9 The cubic Bernstein
polynomial curves
The convex hull property implies that the curve is always contained within the
polygon connecting the start, end and control points. In this case the curve is inside
the triangle formed by the vertices (1,1), (3,4) and (4,3). The slope of the curve at
(1,1) is equal to the slope of the line connecting the start point to the control point
(3,4), and the slope of the curve at (4,3) is equal to the slope of the line connect-
ing the control point (3,4) to the end point (4,3). Naturally, these two qualities of
Bézier curves can be proved mathematically.
9.5.3 Cubic Bernstein Polynomials
Before moving on, there are two further points to note:
• No restrictions are placed upon the position of (xc,yc)—it can be anywhere.
• Simply including z-coordinates for the start, end and control vertices creates 3D
curves.
One of the drawbacks with quadratic curves is that they are perhaps, too simple.
If we want to construct a complex curve with several peaks and valleys, we would
have to join together a large number of such curves. A cubic curve, on the other
hand, naturally supports one peak and one valley, which simpliﬁes the construction
of more complex curves.
When n = 3 in (9.3) we obtain the following terms:

(1 −t) + t
3 = (1 −t)3 + 3t(1 −t)2 + 3t2(1 −t) + t3
which can be used as a cubic interpolant, as
v = v1(1 −t)3 + vc13t(1 −t)2 + vc23t2(1 −t) + v2t3.
Once more, the terms sum to unity, and the convex hull and slope properties also
hold. Figure 9.9 shows the graphs of the four polynomial terms.
This time we have two control values vc1 and vc2. These are set to any value,
independent of the values chosen for v1 and v2. To illustrate this, let’s consider an
example of blending between values 1 and 3, with vc1 and vc2 set to 2.5 and −2.5
respectively. The blending curve is shown in Fig. 9.10.

142
9
Curves and Patches
Fig. 9.10 The cubic
Bernstein polynomial through
the values 1, 2.5, −2.5, 3
Fig. 9.11 A cubic Bézier
curve
The next step is to associate the blending polynomials with x- and y-coordinates:
x = x1(1 −t)3 + xc13t(1 −t)2 + xc23t2(1 −t) + x2t3
(9.8)
y = y1(1 −t)3 + yc13t(1 −t)2 + yc23t2(1 −t) + y2t3.
(9.9)
Evaluating (9.8) and (9.9) with the following points:
(x1,y1) = (1,1),
(x2,y2) = (4,3)
(xc1,yc1) = (2,3),
(xc2,yc2) = (3,−2)
we obtain the cubic Bézier curve shown in Fig. 9.11, which also shows the guide-
lines between the end and control points.
Just to show how consistent Bernstein polynomials are, let’s set the values to
(x1,y1) = (1,1),
(x2,y2) = (4,3)
(xc1,yc1) = (2,1.666),
(xc2,yc2) = (3,2.333)
where (xc1,yc1) and (xc2,yc2) are points one-third and two-thirds respectively, be-
tween the start and ﬁnal values. As we found in the quadratic case, where the single
control point was halfway between the start and end values, we obtain linear inter-
polation as shown in Fig. 9.12.
As mathematicians are interested in expressing a formula succinctly, there is an
elegant way of abbreviating Bernstein polynomials. Equations (9.6) and (9.7) de-
scribe the three polynomial terms for generating a quadratic Bézier curve and (9.8)
and (9.9) describe the four polynomial terms for generating a cubic Bézier curve.
To begin with, quadratic equations are called second-degree equations, and cubics
are called third-degree equations. In the original Bernstein formulation:

9.6
A Recursive Bézier Formula
143
Fig. 9.12 A cubic Bézier line
Bn
i (t) =
n
i

ti(1 −t)n−1
n represents the degree of the polynomial, and i, which has values between 0 and n,
creates the individual polynomial terms. These terms are then used to multiply the
coordinates of the end and control points. If these points are stored as a vector P,
the position vector p(t) for a point on the curve is written:
p(t) =
n
i

ti(1 −t)n−iPi,
0 ≤i ≤n
or
p(t) =
n

i=0
n
i

ti(1 −t)n−iPi,
0 ≤i ≤n
(9.10)
or
p(t) =
n

i=0
Bn
i (t)Pi,
0 ≤i ≤n.
(9.11)
For example, a point p(t) on a quadratic curve is represented by
p(t) = 1t0(1 −t)2P0 + 2t1(1 −t)1P1 + 1t2(1 −t)0P2.
You will discover (9.10) and (9.11) used in more advanced texts to describe Bézier
curves. Although they initially appear intimidating, you should now ﬁnd them rela-
tively easy to understand.
9.6 A Recursive Bézier Formula
Note that (9.10) explicitly describes the polynomial terms needed to construct the
blending terms. With the use of recursive functions (a recursive function is a func-
tion that calls itself), it is possible to arrive at another formulation that leads towards
an understanding of B-splines. To begin, we need to express
n
i

in terms of lower

144
9
Curves and Patches
terms, and because the coefﬁcients of any row in Pascal’s triangle are the sum of the
two coefﬁcients immediately above, we can write
n
i

=
n −1
i

+
n −1
i −1

.
Therefore, we can write:
Bn
i (t) =
n −1
i

ti(1 −t)n−i +
n −1
i −1

ti(1 −t)n−i
Bn
i (t) = (1 −t)Bn−1
i
(t) + tBn−1
i−1 (t).
As with all recursive functions, some condition must terminate the process; in this
case, it is when the degree is zero. Consequently, B0
0(t) = 1 and Bn
j (t) = 0 for j < 0.
9.7 Bézier Curves Using Matrices
As we have already seen, matrices provide a very compact notation for algebraic for-
mulae. So let’s see how Bernstein polynomials lend themselves to this form of nota-
tion. Recall (9.4) which deﬁnes the three terms associated with a quadratic Bernstein
polynomial. These are expanded to
(1 −2t + t2),
(2t −2t2),
(t2)
and written as the product:
[t2
t
1]
⎡
⎣
1
−2
1
−2
2
0
1
0
0
⎤
⎦.
This means that (9.5) can be written:
v = [t2
t
1] =
⎡
⎣
1
−2
1
−2
2
0
1
0
0
⎤
⎦
⎡
⎣
v1
vc
v2
⎤
⎦
or
p(t) = [t2
t
1] =
⎡
⎣
1
−2
1
−2
2
0
1
0
0
⎤
⎦
⎡
⎣
P1
Pc
P2
⎤
⎦
where p(t) points to any point on the curve, and P1, Pc and P2 point to the start,
control and end points respectively.

9.7
Bézier Curves Using Matrices
145
Fig. 9.13 Linearly
interpolating between several
values
A similar development is used for a cubic Bézier curve, which has the following
matrix formulation:
p(t) =

t3
t2
t
1

=
⎡
⎢⎢⎣
−1
3
−3
1
3
−6
3
0
−3
3
0
0
1
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
P1
Pc1
Pc2
P2
⎤
⎥⎥⎦.
There is no doubt that Bézier curves are very useful, and they ﬁnd their way into
all sorts of applications. But, perhaps their one weakness is that whenever an end or
control vertex is repositioned, the entire curve is modiﬁed. So let’s examine another
type of curve that prevents this from happening—B-splines. But before we consider
this form, let’s revisit linear interpolation between multiple values.
9.7.1 Linear Interpolation
To interpolate linearly between two numbers v0 and v1, we use the following inter-
polant:
v(t) = v0(1 −t) + v1t,
0 ≤t ≤1.
But say we have to interpolate continuously between three values on a linear ba-
sis, i.e. v0,v1,v2, with the possibility of extending the technique to any number of
values. One solution is to use a sequence of parameter values t1, t2, t3 that are asso-
ciated with the given values of v, as shown in Fig. 9.13. For the sake of symmetry:
v0 is associated with the parameter range t0 to t2,
v1 is associated with the parameter range t1 to t3,
v2 is associated with the parameter range t2 to t4.
This sequence of parameters is called a knot vector. The only assumption we make
about the knot vector is that t0 ≤t1 ≤t2 ≤, etc.
Now let’s invent a linear blending function B1
i (t) whose subscript i is used to
reference values in the knot vector. We want to use the blending function to compute
the inﬂuence of the three values on any interpolated value v(t) as follows:
v(t) = B1
0(t)v0 + B1
1(t)v1 + B1
2(t)v2.
(9.12)

146
9
Curves and Patches
It’s obvious from this arrangement that v0 will inﬂuence v(t) only when t is between
t0 and t2. Similarly, v1 and v2 will inﬂuence v(t) only when t is between t1 and t3,
and t2 and t4 respectively.
To understand the action of the blending function let’s concentrate upon one par-
ticular value B1
1(t). When t is less than t1 or greater than t3, the function B1
1(t) must
be zero. When t1 ≤t ≤t3, the function must return a value reﬂecting the proportion
of v1 that inﬂuences v(t). During the span t1 ≤t ≤t2, v1 has to be blended in, and
during the span t1 ≤t ≤t3, v1 has to be blended out. The blending in is effected by
the ratio
 t −t1
t2 −t1

and the blending out is effected by the ratio
 t3 −t
t3 −t2

.
Thus B1
1(t) has to incorporate both ratios, but it must ensure that they only become
active during the appropriate range of t. Let’s remind ourselves of this requirement
by subscripting the ratios accordingly:
B1
1(t) =
 t −t1
t2 −t1

1,2
+
 t3 −t
t3 −t2

2,3
.
We can now write the other two blending terms B1
0(t) and B1
2(t) as
B1
0(t) =
 t −t0
t1 −t0

0,1
+
 t2 −t
t2 −t1

1,2
B1
2(t) =
 t −t2
t3 −t2

2,3
+
 t4 −t
t4 −t3

3,4
.
You should be able to see a pattern linking the variables with their subscripts, and
the possibility of writing a general linear blending term B1
i (t) as
B1
i (t) =
 t −ti
ti+1 −ti

i,i+1
+
 ti+2 −t
ti+2 −ti+1

i+1,i+2
.
This enables us to write (9.12) in a general form as
v(t) =
2

i=0
B1
i (t)vi.
But there is still a problem concerning the values associated with the knot vector.
Fortunately, there is an easy solution. One simple approach is to keep the differ-
ences between t1, t2 and t3 whole numbers, e.g. 0, 1 and 2. But what about the end

9.8
B-Splines
147
conditions t0 and t4? To understand the resolution of this problem let’s examine the
action of the three terms over the range of the parameter t. The three terms are
 t −t0
t1 −t0

0,1
+
 t2 −t
t2 −t1

1,2

v0
(9.13)
 t −t1
t2 −t1

1,2
+
 t3 −t
t3 −t2

2,3

v1
(9.14)
 t −t2
t3 −t2

2,3
+
 t4 −t
t4 −t3

3,4

v2
(9.15)
and I propose to initialise the knot vector as follows:
t0
t1
t2
t3
t4
0
0
1
2
2
• Remember that the subscripts of the ratios are the subscripts of t, not the values
of t.
• Over the range t0 ≤t ≤t1, i.e. 0 to 0. Only the ﬁrst ratio in (9.13) is active and
returns 0
0. The algorithm must detect this condition and take no action.
• Over the range t1 ≤t ≤t2. i.e. 0 to 1. The ﬁrst ratio of (9.13) is active again, and
over the range of t blends out v0. The ﬁrst ratio of (9.14) is also active, and over
the range of t blends in v1.
• Over the range t2 ≤t ≤t3. i.e. 1 to 2. The second ratio of (9.14) is active, and
over the range of t blends out v1. The ﬁrst ratio of (9.15) is also active, and over
the range of t blends in v2.
• Finally, over the range t3 ≤t ≤t4. i.e. 2 to 2. The second ratio of (9.15) is active
and returns 0
0. The algorithm must detect this condition and take no action.
This process results in a linear interpolation between v0, v1 and v2. If (9.13), (9.14)
and (9.15) are applied to coordinate values, the result is two straight lines. This
seems like a lot of work just to draw two lines, but the beauty of the technique is
that it will work with any number of points, and can be developed for quadratic and
higher order interpolants.
A. Aitken developed the following recursive interpolant:
pr
i (t) =
 ti+r −t
ti+r −ti

pr−1
i
(t) +
 t −ti
ti+r −ti

pr−1
i+1(t)
r = 1,...n
i = 0,...n −r
which interpolates between a series of points using repeated linear interpolation.
9.8 B-Splines
B-splines, like Bézier curves, use polynomials to generate a curve segment. But,
unlike Bézier curves, B-splines employ a series of control points that determine the

148
9
Curves and Patches
Fig. 9.14 The construction
of a uniform non-rational
B-spline curve
curve’s local geometry. This feature ensures that only a small portion of the curve is
changed when a control point is moved.
There are two types of B-splines: rational and non-rational splines, which divide
into two further categories: uniform and non-uniform. Rational B-splines are formed
from the ratio of two polynomials such as
x(t) = X(t)
W(t),
y(t) = Y(t)
W(t),
z(t) = Z(t)
W(t).
Although this appears to introduce an unnecessary complication, the division by a
second polynomial brings certain advantages:
• They describe perfect circles, ellipses, parabolas and hyperbolas, whereas non-
rational curves can only approximate these curves.
• They are invariant of their control points when subjected to rotation, scaling,
translation and perspective transformations, whereas non-rational curves lose this
geometric integrity.
• They allow weights to be used at the control points to push and pull the curve.
An explanation of uniform and non-uniform types is best left until you under-
stand the idea of splines. So, without knowing the meaning of uniform, let’s begin
with uniform B-splines.
9.8.1 Uniform B-Splines
A B-spline is constructed from a string of curve segments whose geometry is de-
termined by a group of local control points. These curves are known as piecewise
polynomials. A curve segment does not have to pass through a control point, al-
though this may be desirable at the two end points.
Cubic B-splines are very common, as they provide a geometry that is one step
away from simple quadratics, and possess continuity characteristics that make the
joins between the segments invisible. In order to understand their construction con-
sider the scenario in Fig. 9.14. Here we see a group of (m + 1) control points P0,
P1, P2, ... Pm which determine the shape of a cubic curve constructed from a series
of curve segments S0, S1, S2, ... Sm−3.

9.8
B-Splines
149
Fig. 9.15 The B-spline basis
functions
As the curve is cubic, curve segment Si is inﬂuenced by Pi, Pi+1, Pi+2, Pi+3,
and curve segment Si+1 is inﬂuenced by Pi+1, Pi+2, Pi+3, Pi+4. And as there are
(m + 1) control points, there are (m −2) curve segments.
A single segment Si(t) of a B-spline curve is deﬁned by
Si(t) =
3

r=0
Pi+rBr(t),
for 0 ≤t ≤1
where
B0(t) = −t3 + 3t2 −3t + 1
6
= (1 −t)3
6
(9.16)
B1(t) = 3t3 −6t2 + 4
6
(9.17)
B2(t) = −3t3 + 3t2 + 3t + 1
6
(9.18)
B3(t) = t3
6 .
(9.19)
These are the B-spline basis functions and are shown in Fig. 9.15.
Although it is not apparent, these four curve segments are part of one curve. The
basis function B3(t) starts at zero and rises to 0.1666 at t = 1. It is taken over by
B2(t) at t = 0, which rises to 0.666 at t = 1. The next segment is B1(t) and takes
over at t = 0 and falls to 0.1666 at t = 1. Finally, B0(t) takes over at 0.1666 and
falls to zero at t = 1. Equations (9.16)–(9.19) are represented in matrix form by
Q1(t) =

t3
t2
t
1
1
6
⎡
⎢⎢⎣
−1
3
−3
1
3
−6
3
0
−3
0
3
0
1
4
1
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
Pi
Pi+1
Pi+2
Pi+3
⎤
⎥⎥⎦.
(9.20)
Let’s now illustrate how (9.20) works. We ﬁrst identify the control points Pi,
Pi+1, Pi+2, etc. Let these be (0,1), (1,3), (2,0), (4,1), (4,3), (2,2) and (2,3).
They can be seen in Fig. 9.16 connected together by straight lines. If we take the ﬁrst
four control points: (0,1),(1,3),(2,0),(4,1), and subject the x- and y-coordinates

150
9
Curves and Patches
Fig. 9.16 Four curve
segments forming a B-spline
curve
to the matrix in (9.20) over the range 0 ≤t ≤1 we obtain the ﬁrst B-spline curve
segment shown in Fig. 9.16. If we move along one control point and take the next
group of control points (1,3),(2,0),(4,1),(4,3), we obtain the second B-spline
curve segment. This is repeated a further two times.
Figure 9.16 shows the four curve segments using two gray scales, and it is obvi-
ous that even though there are four discrete segments, they join together perfectly.
This is no accident. The slopes at the end points of the basis curves are designed
to match the slopes of their neighbours and ultimately keep the geometric curve
continuous.
9.8.2 Continuity
In order to explain continuity, it is necessary to employ differentiation. Therefore,
you may wish to read the chapter on calculus before continuing.
Constructing curves from several segments can only succeed if the slope of the
abutting curves match. As we are dealing with curves whose slopes are changing
everywhere, it will be necessary to ensure that even the rate of change of slopes is
matched at the join. This aspect of curve design is called geometric continuity and
is determined by the continuity properties of the basis function. Let’s explore such
features.
The ﬁrst level of curve continuity C0, ensures that the physical end of one ba-
sis curve corresponds with the following, e.g. Si(1) = Si+1(0). We know that this
occurs from the basis graphs shown in Fig. 9.15. The second level of curve conti-
nuity C1, ensures that the slope at the end of one basis curve matches that of the
following curve. This is conﬁrmed by differentiating the basis functions (9.16)–
(9.19):
B′
0(t) = −3t2 + 6t −3
6
(9.21)
B′
1(t) = 9t2 −12t
6
(9.22)
B′
2(t) = −9t2 + 6t + 3
6
(9.23)
B′
3(t) = 3t2
6 .
(9.24)

9.8
B-Splines
151
Table 9.4 Continuity
properties of cubic B-splines
C0
t
C1
t
C2
t
0
1
0
1
0
1
B3(t)
0
1/6
B′
3(t)
0
0.5
B′′
3 (t)
0
1
B2(t)
1/6
2/3
B′
2(t)
0.5
0
B′′
2 (t)
1
−2
B1(t)
2/3
1/6
B′
1(t)
0
−0.5
B′′
1 (t)
−2
1
B0(t)
1/6
0
B′
0(t)
−0.5
0
B′′
0 (t)
1
0
Evaluating (9.21)–(9.24) for t = 0 and t = 1, we discover the slopes 0.5,0,
−0.5,0 for the joins between B3, B2, B1, B0. The third level of curve continu-
ity C2, ensures that the rate of change of slope at the end of one basis curve
matches that of the following curve. This is conﬁrmed by differentiating (9.21)–
(9.24):
B′′
0 (t) = −t + 1
(9.25)
B′′
1 (t) = 3t −2
(9.26)
B′′
2 (t) = −3t + 1
(9.27)
B′′
3 (t) = t.
(9.28)
Evaluating (9.25)–(9.28) for t = 0 and t = 1, we discover the values 1,−2,1,0 for
the joins between B3, B2, B1, B0. These combined continuity results are tabulated
in Table 9.4.
9.8.3 Non-uniform B-Splines
Uniform B-splines are constructed from curve segments where the parameter spac-
ing is at equal intervals. Non-uniform B-splines, with the support of a knot vector,
provide extra shape control and the possibility of drawing periodic shapes. Unfor-
tunately an explanation of the underlying mathematics would take us beyond the
introductory nature of this text, and readers are advised to seek out other books
dealing in such matters.
9.8.4 Non-uniform Rational B-Splines
Non-uniform rational B-splines (NURBS) combine the advantages of non-uniform
B-splines and rational polynomials: they support periodic shapes such as circles,
and they accurately describe curves associated with the conic sections. They also
play a very important role in describing geometry used in the modeling of computer
animation characters.

152
9
Curves and Patches
Fig. 9.17 A ﬂat patch
deﬁned by u and v parameters
NURBS surfaces also have a patch formulation and play a very important role in
surface modelling in computer animation and CAD. However, tempting though it is
to give a description of NURBS surfaces here, they have been omitted because their
inclusion would unbalance the introductory nature of this text.
9.9 Surface Patches
9.9.1 Planar Surface Patch
The simplest form of surface geometry consists of a patchwork of polygons or tri-
angles, where three or more vertices provide the basis for describing the associated
planar surface. For example, given four vertices P00, P10, P01, P11 as shown in
Fig. 9.17, a point Puv can be deﬁned as follows. To begin with, a point along the
edge P00–P10 is deﬁned as is deﬁned as
Pu1 = (1 −u)P00 + uP10
and a point along the edge P01–P11 is deﬁned as
Pu2 = (1 −u)P01 + uP11.
Therefore, any point Puv is deﬁned as
Puv = (1 −v)Pu1 + vPu2
= (1 −v)

(1 −u)P00 + uP10

+ v

(1 −u)P01 + uP11

= (1 −u)(1 −v)P00 + u(1 −v)P10 + v(1 −u)P01 + uvP11
and is written in matrix form as
Puv =

(1 −u)
u
P00
P01
P10
P11
(1 −v)
v

which expands to
Puv = [u
1]
−1
1
1
0
P00
P01
P10
P11
−1
1
1
0
v
1

.

9.9
Surface Patches
153
Fig. 9.18 A quadratic Bézier
surface patch
Let’s illustrate this with an example. Given the following four points: P00 =
(0,0,0), P10 = (0,0,4), P01 = (2,2,1), P11 = (2,2,3), we can write the coordi-
nates of any point on the patch as
xuv = [u
1]
−1
1
1
0
0
2
0
2
−1
1
1
0
v
1

yuv = [u
1]
−1
1
1
0
0
2
0
2
−1
1
1
0
v
1

zuv = [u
1]
−1
1
1
0
0
1
4
3
−1
1
1
0
v
1

xuv = 2v
(9.29)
yuv = 2v
(9.30)
zuv = u(4 −2v) + v.
(9.31)
By substituting values of u and v in (9.29)–(9.31) between the range 0 ≤(u,v) ≤1,
we obtain the coordinates of any point on the surface of the patch.
If we now introduce the ideas of Bézier control points into a surface patch deﬁ-
nition, we provide a very powerful way of creating smooth 3D surface patches.
9.9.2 Quadratic Bézier Surface Patch
Bézier proposed a matrix of nine control points to determine the geometry of a
quadratic patch, as shown in Fig. 9.18. Any point on the patch is deﬁned by
Puv =

u2
u
1

⎡
⎣
1
−2
1
−2
2
0
1
0
0
⎤
⎦
⎡
⎣
P00
P01
P02
P10
P11
P12
P20
P21
P22
⎤
⎦
⎡
⎣
1
−2
1
−2
2
0
1
0
0
⎤
⎦
⎡
⎣
v2
v
1
⎤
⎦.
The individual x-, y- and z-coordinates are obtained by substituting the x-, y- and
z-values for the central P matrix.

154
9
Curves and Patches
Let’s illustrate the process with an example. Given the following points:
P00 = (0,0,0),
P01 = (1,1,0),
P02 = (2,0,0)
P10 = (0,1,1),
P11 = (1,2,1),
P12 = (2,1,1)
P20 = (0,0,2),
P21 = (1,1,2),
P22 = (2,0,2)
we can write
xuv =

u2
u
1

⎡
⎣
1
−2
1
−2
2
0
1
0
0
⎤
⎦
⎡
⎣
0
1
2
0
1
2
0
1
2
⎤
⎦
⎡
⎣
1
−2
1
−2
2
0
1
0
0
⎤
⎦
⎡
⎣
v2
v
1
⎤
⎦
xuv =

u2
u
1

⎡
⎣
0
0
0
0
0
0
0
2
0
⎤
⎦
⎡
⎣
v2
v
1
⎤
⎦
xuv = 2v
yuv =

u2
u
1

⎡
⎣
1
−2
1
−2
2
0
1
0
0
⎤
⎦
⎡
⎣
0
1
0
1
2
1
0
1
0
⎤
⎦
⎡
⎣
1
−2
1
−2
2
0
1
0
0
⎤
⎦
⎡
⎣
v2
v
1
⎤
⎦
yuv =

u2
u
1

⎡
⎣
0
0
−2
0
0
2
−2
2
0
⎤
⎦
⎡
⎣
v2
v
1
⎤
⎦
yuv = 2

u + v −u2 −v2
zuv =

u2
u
1

⎡
⎣
1
−2
1
−2
2
0
1
0
0
⎤
⎦
⎡
⎣
0
0
0
1
1
1
2
2
2
⎤
⎦
⎡
⎣
1
−2
1
−2
2
0
1
0
0
⎤
⎦
⎡
⎣
v2
v
1
⎤
⎦
zuv =

u2
u
1

⎡
⎣
0
0
0
0
0
2
0
0
0
⎤
⎦
⎡
⎣
v2
v
1
⎤
⎦
zuv = 2u.
Therefore, any point on the surface patch has coordinates
xuv = 2v,
yuv = 2(u + v −u2 −v2),
zuv = 2u.
Table 9.5 shows the coordinate values for different values of u and v. In this exam-
ple, the y-coordinates provide the surface curvature, which could be enhanced by
modifying the y-coordinates of the control points.

9.9
Surface Patches
155
Table 9.5 The x-, y-,
z-coordinates for different
values of u and v
u
v
0
0.5
1
0
(0,0,0)
(1,0.5,0)
(2,0,0)
0.5
(0,0.5,1)
(1,0.5,1)
(2,0.5,1)
1
(0,0,2)
(1,0.5,2)
(2,0,2)
9.9.3 Cubic Bézier Surface Patch
As we saw earlier in this chapter, cubic Bézier curves require two end-points, and
two central control points. In the surface patch formulation a 4×4 matrix is required
as follows:
Puv =

u3
u2
u
1

⎡
⎢⎢⎣
−1
3
−3
1
3
−6
3
0
−3
3
0
0
1
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
P00
P01
P02
P03
P10
P11
P12
P13
P20
P21
P22
P23
P30
P31
P32
P33
⎤
⎥⎥⎦
⎡
⎢⎢⎣
−1
3
−3
1
3
−6
3
0
−3
3
0
0
1
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
v3
v2
v
1
⎤
⎥⎥⎦
which is illustrated with an example:
Example 9.1 Given the points:
P00 = (0,0,0),
P01 = (1,1,0),
P02 = (2,1,0),
P03 = (3,0,0)
P10 = (0,1,1),
P11 = (1,2,1),
P12 = (2,2,1),
P13 = (3,1,1)
P20 = (0,1,2),
P21 = (1,2,2),
P22 = (2,2,2),
P23 = (3,1,2)
P30 = (0,0,3),
P31 = (1,1,3),
P32 = (2,1,3),
P33 = (3,0,3)
we can write the following matrix equations:
xuv =

u3
u2
u
1

⎡
⎢⎢⎣
−1
3
−3
1
3
−6
3
0
−3
3
0
0
1
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
0
1
2
3
0
1
2
3
0
1
2
3
0
1
2
3
⎤
⎥⎥⎦
⎡
⎢⎢⎣
−1
3
−3
1
3
−6
3
0
−3
3
0
0
1
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
v3
v2
v
1
⎤
⎥⎥⎦

156
9
Curves and Patches
xuv =

u3
u2
u
1

⎡
⎢⎢⎣
0
0
0
0
0
0
0
0
0
0
0
0
0
0
3
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
v3
v2
v
1
⎤
⎥⎥⎦
xuv = 3v
yuv =

u3
u2
u
1

⎡
⎢⎢⎣
−1
3
−3
1
3
−6
3
0
−3
3
0
0
1
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
0
1
1
0
1
2
2
1
1
2
2
1
0
1
1
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
−1
3
−3
1
3
−6
3
0
−3
3
0
0
1
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
v3
v2
v
1
⎤
⎥⎥⎦
yuv =

u3
u2
u
1

⎡
⎢⎢⎣
0
0
0
0
0
0
0
−3
0
0
0
3
0
−3
3
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
v3
v2
v
1
⎤
⎥⎥⎦
yuv = 3

u + v −u2 −v2
zuv =

u3
u2
u
1

⎡
⎢⎢⎣
−1
3
−3
1
3
−6
3
0
−3
3
0
0
1
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
0
0
0
0
1
1
1
1
2
2
2
2
3
3
3
3
⎤
⎥⎥⎦
⎡
⎢⎢⎣
−1
3
−3
1
3
−6
3
0
−3
3
0
0
1
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
v3
v2
v
1
⎤
⎥⎥⎦
zuv =

u3
u2
u
1

⎡
⎢⎢⎣
0
0
0
0
0
0
0
0
0
0
0
3
0
0
0
0
⎤
⎥⎥⎦
⎡
⎢⎢⎣
v3
v2
v
1
⎤
⎥⎥⎦
zuv = 3u.
Therefore, any point on the surface patch has coordinates
xuv = 3v,
yuv = 3(u + v −u2 −v2),
zuv = 3u.
Table 9.6 shows the coordinate values for different values of u and v. In this exam-
ple, the y-coordinates provide the surface curvature, which could be enhanced by
modifying the y-coordinates of the control points.
Complex 3D surfaces are readily modeled using Bézier patches. One simply cre-
ates a mesh of patches such that their control points are shared at the joins. Surface

9.10
Summary
157
Table 9.6 The x-, y-,
z-coordinates for different
values of u and v
u
v
0
0.5
1
0
(0,0,0)
(1.5,0.75,0)
(3,0,0)
0.5
(0,0.75,1.5)
(1.5,1.5,1.5)
(3,0.75,1.5)
1
(0,0,3)
(1.5,0.75,3)
(3,0,3)
continuity is controlled using the same mechanism for curves. But where the slopes
of trailing and starting control edges apply for curves, the corresponding slopes of
control tiles apply for patches.
9.10 Summary
This subject has been the most challenging one to describe. On the one hand, the
subject is vital to every aspect of computer graphics, and on the other, the reader
is required to wrestle with cubic polynomials and a little calculus. However, I do
hope that I have managed to communicate some essential concepts behind curves
and surfaces, and that you will be tempted to implement some of the mathemat-
ics.

Chapter 10
Analytic Geometry
10.1 Introduction
This chapter explores some basic elements of geometry and analytic geometry that
are frequently encountered in computer graphics. For completeness, I have included
a short review of important elements of Euclidean geometry with which you should
be familiar. Perhaps the most important topics that you should try to understand
concern the deﬁnitions of straight lines in space, 3D planes, and how points of in-
tersection are computed. Another useful topic is the role of parameters in describing
lines and line segments, and their intersection.
10.2 Background
In the third century BCE, Euclid laid the foundations of geometry that have been
taught in schools for centuries. In the 19th century, mathematicians such as Bern-
hard Riemann (1809–1900) and Nicolai Lobachevsky (1793–1856) transformed this
Euclidean geometry with ideas such as curved space, and spaces with higher dimen-
sions. Although none of these developments affect computer graphics, they do place
Euclid’s theorems in a speciﬁc context: a set of axioms that apply to ﬂat surfaces.
We have probably all been taught that parallel lines never meet, and that the internal
angles of a triangle sum to 180◦, but these are only true in speciﬁc situations. As
soon as the surface or space becomes curved, such rules break down. So let’s review
some rules and observations that apply to shapes drawn on a ﬂat surface.
10.2.1 Angles
By deﬁnition, 360◦or 2π [radians] measure one revolution. You should be familiar
with both units of measurement, and how to convert from one to the other. Fig-
ure 10.1 shows examples of adjacent/supplementary angles (sum to 180◦), opposite
angles (equal), and complementary angles (sum to 90◦).
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_10, © Springer-Verlag London 2014
159

160
10
Analytic Geometry
Fig. 10.1 Examples of
adjacent, supplementary,
opposite and complementary
angles
Fig. 10.2 The ﬁrst intercept
theorem
Fig. 10.3 The second
intercept theorem
10.2.2 Intercept Theorems
Figures 10.2 and 10.3 show scenarios involving intersecting lines and parallel lines
that give rise to the following observations:
• First intercept theorem:
a + b
a
= c + d
c
,
b
a = d
c .
• Second intercept theorem:
a
b = c
d .

10.2
Background
161
Fig. 10.4 A rectangle with
a height to width ratio equal
to the golden section
Fig. 10.5 Relationship
between interior and exterior
angles
10.2.3 Golden Section
The golden section is widely used in art and architecture to represent an “ideal” ratio
for the height and width of an object. Its origins stem from the interaction between
a circle and triangle and give rise to the following relationship:
b = a
2(
√
5 −1) ≈0.618a.
The rectangle in Fig. 10.4 has proportions:
height = 0.618 × width.
10.2.4 Triangles
The rules associated with interior and exterior angles of a triangle are very useful in
solving all sorts of geometric problems. Figure 10.5 shows two diagrams identifying
interior and exterior angles. We can see that the sum of the interior angles is 180◦,
and that the exterior angles of a triangle are equal to the sum of the opposite angles:
α + β + θ = 180◦
α′ = θ + β
β′ = α + θ
θ′ = α + β.

162
10
Analytic Geometry
Fig. 10.6 The three medians
of a triangle intersect at its
centre of gravity
Fig. 10.7 An isosceles
triangle
10.2.5 Centre of Gravity of a Triangle
A median is a straight line joining a vertex of a triangle to the mid-point of the
opposite side. When all three medians are drawn, they intersect at a common point,
which is also the triangle’s centre of gravity. The centre of gravity divides all the
medians in the ratio 2 : 1. Figure 10.6 illustrates this arrangement.
10.2.6 Isosceles Triangle
Figure 10.7 shows an isosceles triangle, which has two equal sides of length l and
equal base angles α. The triangle’s altitude and area are
h =

l2 −
c
2
2
,
A = ch
2 .
10.2.7 Equilateral Triangle
An equilateral triangle has three equal sides of length l and equal angles of 60◦. The
triangle’s altitude and area are
h =
√
3
2 l,
A =
√
3
4 l2.
10.2.8 Right Triangle
Figure 10.8 shows a right triangle with its obligatory right angle. The triangle’s
altitude and area are
h = ab
c ,
A = ab
2 .

10.2
Background
163
Fig. 10.8 A right triangle
Fig. 10.9 The Theorem of
Thales states that the right
angle of a right triangle lies
on the circumcircle over the
hypotenuse
Fig. 10.10 The Theorem of
Pythagoras states that
a2 = b2 + c2
10.2.9 Theorem of Thales
Figure 10.9 illustrates the Theorem of Thales, which states that the right angle of a
right triangle lies on the circumcircle over the hypotenuse.
10.2.10 Theorem of Pythagoras
Although this theorem is named after Pythagoras, there is substantial evidence
to show that it was known by the Babylonians a millennium earlier. However,
Pythagoras is credited with its proof. Figure 10.10 illustrates the well-known re-
lationship:
a2 = b2 + c2

164
10
Analytic Geometry
Fig. 10.11 A trapezoid with
one pair of parallel sides
Fig. 10.12 A parallelogram
formed by two pairs of
parallel lines
from which one can show that
sin2 θ + cos2 θ = 1.
10.2.11 Quadrilateral
Quadrilaterals have four sides and include the square, rectangle, trapezoid, parallel-
ogram and rhombus, whose interior angles sum to 360◦. As the square and rectangle
are familiar shapes, we will only consider the other three.
10.2.12 Trapezoid
Figure 10.11 shows a trapezoid which has one pair of parallel sides h apart. The
mid-line m and area are given by
m = a + b
2
A = mh.
10.2.13 Parallelogram
Figure 10.12 shows a parallelogram, which is formed from two pairs of intersecting
parallel lines, so it has equal opposite sides and equal opposite angles. The altitude,
diagonal lengths and area are given by
h = b sinα
d1,2 =

a2 + b2 ± 2a
	
b2 −h2
A = ah.

10.2
Background
165
Fig. 10.13 A rhombus is
a parallelogram with four
equal sides
Fig. 10.14 Part of a regular
gon showing the inner and
outer radii and the edge
length
10.2.14 Rhombus
Figure 10.13 shows a rhombus, which is a parallelogram with four sides of equal
length a. The area is given by
A = a2 sinα = d1d2
2
.
10.2.15 Regular Polygon
Figure 10.14 shows part of a regular n-gon with outer radius Ro, inner radius Ri
and edge length an. Table 10.1 shows the relationship between the area, an, Ri and
Ro for different polygons.
10.2.16 Circle
The circumference C and area A of a circle are given by
C = πd = 2πr
A = πr2 = π d2
4
where the diameter d = 2r.

166
10
Analytic Geometry
Table 10.1 The area An, edge length an, inner radius Ri, and outer radius Ro for different poly-
gons
n
an = 2Ri tan(180◦/n)
Ri = Ro cos(180◦/n)
R2
o = R2
i + 1
4a2
n
n
An = n
4 a2
n cot(180◦/n)
An = n
2 R2
o sin(360◦/n)
An = nR2
i tan(180◦/n)
5
a5 = 2Ri
	
5 −2
√
5
Ri = Ro
4 (
√
5 + 1)
Ro = Ri(
√
5 −1)
5
A5 = a2
5
4
	
25 + 10
√
5
A5 = 5
8R2
o
	
10 + 2
√
5
A5 = 5R2
i
	
5 −2
√
5
6
a6 = 2
3Ri
√
3
Ri = Ro
2
√
3
Ro = 2
3Ri
√
3
6
A6 = 3
2a2
6
√
3
A6 = 3
2R2
o
√
3
A6 = 2R2
i
√
3
8
a8 = 2Ri(
√
2 −1)
Ri = Ro
2
	
2 +
√
2
Ro = Ri
	
4 −2
√
2
8
A8 = 2a2
8(
√
2 + 1)
A8 = 2R2
o
√
2
A8 = 8R2
i (
√
2 −1)
10
a10 = 2
5Ri
	
25 −10
√
5
Ri = Ro
4
	
10 + 2
√
5
Ro = Ri
5
	
50 −10
√
5
10
A10 = 5
2a2
10
	
5 + 2
√
5
A10 = 5
4R2
o
	
10 −2
√
5
A10 = 2R2
i
	
25 −10
√
5
Fig. 10.15 An annulus
formed from two concentric
circles
An annulus is the area between two concentric circles as shown in Fig. 10.15,
and its area A is given by
A = π

R2 −r2
= π
4

D2 −d2
where D = 2R and d = 2r.
Figure 10.16 shows a sector of a circle, whose area is given by
A = α◦
360◦πr2.
Figure 10.17 shows a segment of a circle, whose area is given by
A = r2
2 (α −sinα)
where α is in radians.
The area of an ellipse with major and minor radii a and b is
A = πab.

10.3
2D Analytic Geometry
167
Fig. 10.16 A sector of
a circle deﬁned by the angle α
Fig. 10.17 A segment of
a circle deﬁned by the angle α
Fig. 10.18 The normal form
of the straight line is
y = mx + c
10.3 2D Analytic Geometry
In this section we brieﬂy examine familiar descriptions of geometric elements and
ways of computing intersections.
10.3.1 Equation of a Straight Line
The well-known equation of a line is
y = mx + c
where m is the slope and c the intersection with the y-axis, as shown in Fig. 10.18.
This is called the normal form.
Given two points (x1,y1) and (x2,y2) we can state that for any other point (x,y)
y −y1
x −x1
= y2 −y1
x2 −x1

168
10
Analytic Geometry
Fig. 10.19 The orientation of
a line can be controlled by
a normal vector n and
a distance d
which yields
y = (x −x1)y2 −y1
x2 −x1
+ y1.
Although these equations have their uses, the more general form is much more con-
venient:
ax + by + c = 0.
As we shall see, this equation possesses some interesting qualities.
10.3.2 The Hessian Normal Form
Figure 10.19 shows a line whose orientation is controlled by a normal unit vector
n = [a b]T . If P(x,y) is any point on the line, then p is a position vector where
p = [x y]T and d is the perpendicular distance from the origin to the line. Therefore,
d
|p| = cosα
and
d = |p|cosα.
But the dot product n • p is given by
n • p = |n||p|cosα = ax + by
which implies that
ax + by = d|n|
and because |n| = 1 we can write
ax + by −d = 0
where (x,y) is a point on the line, a and b are the components of a unit vector
normal to the line, and d is the perpendicular distance from the origin to the line.

10.3
2D Analytic Geometry
169
The distance d is positive when the normal vector points away from the origin,
otherwise it is negative. Let’s consider two examples:
Example 10.1
Find the equation of a line whose normal vector is [3 4]T and the
perpendicular distance from the origin to the line is 1.
We begin by normalising the normal vector to its unit form. Therefore, if n =
[3 4]T , |n| =
√
32 + 42 = 5 The equation of the line is
3
5x + 4
5y −1 = 0.
Example 10.2 Find the Hessian normal form of y = 2x + 1.
Rearranging the equation we get
2x −y = −1
which gives a negative distance. If we want the normal vector to point away from
the origin we multiply by −1:
−2x + y −1 = 0.
Normalise the normal vector to a unit form
i.e.
	
(−2)2 + 12 =
√
5
−2
√
5
x + 1
√
5
y −1
√
5
= 0.
Therefore, the perpendicular distance from the origin to the line, and the unit normal
vector are respectively
1
√
5
and
 −2
√
5
1
√
5
T
.
As the Hessian normal form involves a unit normal vector, we can incorporate
the vector’s direction cosines within the equation:
x cosα + y sinα −d = 0
where α is the angle between the normal vector and the x-axis.
10.3.3 Space Partitioning
The Hessian normal form provides a very useful way of partitioning space into two
zones: the partition that includes the normal vector, and the opposite partition. This
is illustrated in Fig. 10.20.

170
10
Analytic Geometry
Fig. 10.20 The Hessian
normal form of the line
equation partitions space into
two zones
Given the equation
ax + by −d = 0
a point (x,y) on the line satisﬁes the equation. But if we substitute another point
(x1,y1) which is in the partition in the direction of the normal vector, it creates the
inequality
ax1 + by1 −d > 0.
Conversely, a point (x2,y2) which is in the partition opposite to the direction of the
normal vector creates the inequality
ax2 + by2 −d < 0.
This space-partitioning feature of the Hessian normal form is useful in clipping lines
against polygonal windows.
10.3.4 The Hessian Normal Form from Two Points
Given two points (x1,y1) and (x2,y2) we compute the values of a, b and d for the
Hessian normal form as follows.
The vector joining the two points is v = [Δx Δy]T where
Δx = x2 −x1
Δy = y2 −y1
|v| =

Δ2x + Δ2y.
The unit vector normal to v is n = [−Δ′
y Δ′
x]T , where
Δ′
x = Δx
|v|
Δ′
y = Δy
|v| .

10.4
Intersection Points
171
Therefore, let p = [x y]T be any point on the line, and using the Hessian Normal
Form, we can write:
n • p = −Δ′
yx + Δ′
xy = −Δ′
yx1 + Δ′
xy1
and
−Δ′
yx + Δ′
xy +

Δ′
yx1 −Δ′
xy1

= 0.
(10.1)
Let’s test this with an example.
Example 10.3
Given the following points: (x1,y1) = (0,1) and (x2,y2) = (1,0);
then Δ′
x = 1/
√
2 and Δ′
y = −1/
√
2. Therefore, using (10.1)
x
√
2
+ y
√
2
+

0 × −1
√
2
−1 × 1
√
2

= 0
x
√
2
+ y
√
2
−1
√
2
= 0.
10.4 Intersection Points
10.4.1 Intersecting Straight Lines
Given two line equations of the form
a1x + b1y + d1 = 0
a2x + b2y + d2 = 0
the intersection point (xi,yi) is given by
xi = b1d2 −b2d1
a1b2 −a2b1
yi = d1a2 −d2a1
a1b2 −a2b1
or using determinants:
xi =
 b1 d1
b2 d2

 a1 b1
a2 b2

yi =
 d1 a1
d2 a2

 a1 b1
a2 b2

.

172
10
Analytic Geometry
Fig. 10.21 Two line
segments with their
associated position vectors
If the denominator is zero, the equations are linearly dependent, indicating that there
is no intersection.
10.4.2 Intersecting Line Segments
We are often concerned with line segments in computer graphics as they represent
the edges of shapes and objects. So let’s investigate how to compute the intersection
of two 2D-line segments. Figure 10.21 shows two line segments deﬁned by their
end points P1, P2, P3, P4 and respective position vectors p1, p2, p3 and p4. We can
write the following vector equations to identify the point of intersection:
pi = p1 + t(p2 −p1)
(10.2)
pi = p3 + s(p4 −p3)
(10.3)
where parameters s and t vary between 0 and 1. For the point of intersection, we
can write
p1 + t(p2 −p1) = p3 + s(p4 −p3).
Therefore, the parameters s and t are given by
s = (p1 −p3) + t(p2 −p1)
p4 −p3
(10.4)
t = (p3 −p1) + s(p4 −p3)
p2 −p1
.
(10.5)
From (10.5) we can write
t = (x3 −x1) + s(x4 −x3)
x2 −x1
t = (y3 −y1) + s(y4 −y3)
y2 −y1

10.4
Intersection Points
173
Fig. 10.22 (a) Shows two
line segments intersecting.
(b) Shows two line segments
touching
which yields
s = x1(y3 −y2) + x2(y3 −y1) + x3(y2 −y1)
(x2 −x1)(y4 −y3) −(x4 −x3)(y2 −y1)
(10.6)
similarly,
t = x1(y4 −y3) + x3(y1 −y4) + x4(y3 −y1)
(x4 −x3)(y2 −y1) −(x2 −x1)(y4 −y3) .
(10.7)
Let’s test (10.6) and (10.7) with two examples to illustrate how the equations are
used in practice. The ﬁrst example demonstrates an intersection condition, and the
second demonstrates a touching condition.
Example 10.4 Figure 10.22a shows two line segments intersecting, with an obvious
intersection point of (1.5,0). The coordinates of the line segments are
(x1,y1) = (1,0),
(x2,y2) = (2,0)
(x3,y3) = (1.5,−1),
(x4,y4) = (1.5,1)
therefore,
t = 1(1 −(−1)) + 1.5(0 −1) + 1.5(−1 −0)
(0 −0)(1.5 −1.5) −(2 −1)(1 −(−1)) = 0.5
and
s = 1(−1 −0) + 2(0 −(−1)) + 1.5(0 −0)
(1 −(−1))(2 −1) −(1.5 −1.5)(0 −0) = 0.5.
Substituting s and t in (10.2) and (10.3) we get (xi,yi) = (1.5,0) as predicted.
Example 10.5
Figure 10.22b shows two line segments touching at (1.5,0). The
coordinates of the line segments are
(x1,y1) = (1,0),
(x2,y2) = (2,0)
(x3,y3) = (1.5,0),
(x4,y4) = (1.5,1)

174
10
Analytic Geometry
therefore,
t = 1(1 −0) + 1.5(0 −1) + 1.5(0 −0)
(0 −0)(1.5 −1.5) −(2 −1)(1 −0) = 0.5
and
s =
1(0 −0) + 2(0 −0) + 1.5(0 −0)
(1 −0)(2 −1) −(1.5 −1.5)(0 −0) = 0.
The zero value of s conﬁrms that the lines touch, rather than intersect, and t = 0.5
conﬁrms that the touching takes place halfway along the line segment.
10.5 Point Inside a Triangle
We often require to test whether a point is inside, outside or touching a triangle.
Let’s examine two ways of performing this operation. The ﬁrst is related to ﬁnding
the area of a triangle.
10.5.1 Area of a Triangle
Let’s declare a triangle formed by the anti-clockwise points (x1,y1), (x2,y2) and
(x3,y3) as shown in Fig. 10.23. The area of the triangle is given by:
A = (x2 −x1)(y3 −y1) −(x2 −x1)(y2 −y1)
2
−(x2 −x3)(y3 −y2)
2
−(x3 −x1)(y3 −y1)
2
which simpliﬁes to
A = 1
2

x1(y2 −y3) + x2(y3 −y1) + x3(y1 −y2)

and this can be further simpliﬁed to
A = 1
2

x1
y1
1
x2
y2
1
x3
y3
1

.
Figure 10.24 shows two triangles with opposing vertex sequences. If we calculate
the area of the top triangle with anticlockwise vertices, we obtain
A = 1
2

1(2 −4) + 3(4 −2) + 2(2 −2)

= 2

10.5
Point Inside a Triangle
175
Fig. 10.23 The area of the
triangle is computed by
subtracting the smaller
triangles from the rectangular
area
Fig. 10.24 The top triangle
has anti-clockwise vertices,
and the bottom triangle
clockwise vertices
whereas the area of the bottom triangle with clockwise vertices is
A = 1
2

1(2 −0) + 3(0 −2) + 2(2 −2)

= −2
which shows that the technique is sensitive to vertex direction. We can exploit this
sensitivity to test if a point is inside or outside a triangle.
Consider the scenario shown in Fig. 10.25, where the point Pt is inside the trian-
gle (P1,P2,P3).
• If the area of triangle (P1,P2,Pt) is positive, Pt must be to the left of the line
(P1,P2).
• If the area of triangle (P2,P3,Pt) is positive, Pt must be to the left of the line
(P2,P3).
• If the area of triangle (P3,P1,Pt) is positive, Pt must be to the left of the line
(P3,P1).
If all the above tests are positive, Pt is inside the triangle. Furthermore, if one area
is zero and the other areas are positive, the point is on the boundary, and if two areas
are zero and the other positive, the point is on a vertex.
Let’s now investigate how the Hessian normal form provides a similar func-
tion.

176
10
Analytic Geometry
Fig. 10.25 If the point Pt is
inside the triangle, it is
always to the left as the
boundary is traversed in an
anti-clockwise direction
Fig. 10.26 The triangle is
represented by three line
equations expressed in the
Hessian normal form. Any
point inside the triangle is
found by evaluating their
equations
10.5.2 Hessian Normal Form
We can determine whether a point is inside, touching or outside a triangle by repre-
senting the triangle’s edges in the Hessian normal form, and testing in which parti-
tion the point is located. If we arrange that the normal vectors are pointing towards
the inside of the triangle, any point inside the triangle will create a positive result
when tested against the edge equation. In the following calculations there is no need
to ensure that the normal vector is a unit vector, therefore (10.1) can be written:
−Δyx + Δxy + (Δyx1 −Δxy1) = 0.
To illustrate this, consider the scenario shown in Fig. 10.26 where a triangle is
formed by the points (1,1),(3,1) and (2,3). With reference to (10.1) we compute
the three line equations:
The line between (1,1) and (3,1):
Δx = 2
Δy = 0
−0 × x + 2 × y −2 × 1 = 0
2y −2 = 0.

10.6
Intersection of a Circle with a Straight Line
177
The line between (3,1) and (2,3):
Δx = −1
Δy = 2
−2 × x −1 × y + (2 × 3 + 1 × 1) = 0
−2x −y + 7 = 0.
The line between (2,3) and (1,1):
Δx = −1
Δy = −2
2 × x −1 × y + (−2 × 2 −1 × 3) = 0
2x −y −1 = 0.
Thus the three line equations for the triangle are
2y −2 = 0
−2x −y + 7 = 0
2x −y −1 = 0.
We are only interested in the signs of the equations:
2y −2
(10.8)
−2x −y + 7
(10.9)
2x −y −1
(10.10)
which can be tested for any arbitrary point (x,y). If they are all positive, the point
is inside the triangle. If one expression is negative, the point is outside. If one ex-
pression is zero, the point is on an edge, and if two expressions are zero, the point is
on a vertex.
Just as a quick test, consider the point (2,2). The three expressions (10.8) to
(10.10) are positive, which conﬁrms that the point is inside the triangle. The point
(3,3) is obviously outside the triangle, which is conﬁrmed by two positive results
and one negative. Finally, the point (2,3), which is a vertex, creates one positive
result and two zero results.
10.6 Intersection of a Circle with a Straight Line
The equation of a circle has already been given in the previous chapter, so we will
now consider how to compute its intersection with a straight line. We begin by

178
10
Analytic Geometry
Fig. 10.27 The intersection
of a circle with a line deﬁned
in its normal form, general
form, and the Hessian normal
form
testing the equation of a circle with the normal form of the line equation:
x2 + y2 = r2
and
y = mx + c.
By substituting the line equation in the circle’s equation we discover the two inter-
section points:
x1,2 = −mc ±
	
r2(1 + m2) −c2
1 + m2
(10.11)
y1,2 = c ± m
	
r2(1 + m2) −c2
1 + m2
.
(10.12)
Let’s test this result with the scenario shown in Fig. 10.27. Using the normal form
of the line equation we have
y = x + 1,
m = 1,
and
c = 1.
Substituting these values in (10.11) and (10.12) yields
x1,2 = −1,0,
y1,2 = 0,1.
The actual points of intersection are (−1,0) and (0,1).
Testing the equation of the circle with the general equation of the line ax + by +
c = 0 yields intersections given by
x1,2 = −ac ± b
	
r2(a2 + b2) −c2
a2 + b2
(10.13)
y1,2 = −bc ± a
	
r2(a2 + b2) −c2
a2 + b2
.
(10.14)
From Fig. 10.27, the general form of the line equation is
x −y + 1 = 0
where a = 1, b = −1 and c = 1.

10.7
3D Geometry
179
Substituting these values in (10.13) and (10.14) yields
x1,2 = −1,0,
and
y1,2 = 0,1
which gives the same intersection points found above.
Finally, using the Hessian normal form of the line ax + by −d = 0 yields inter-
sections given by
x1,2 = ad ± b
	
r2 −d2
(10.15)
y1,2 = bd ± a
	
r2 −d2.
(10.16)
From Fig. 10.27 the Hessian normal form of the line equation is
−0.707x + 0.707y −0.707 ≈0
where a ≈−0.707,b ≈0.707 and d ≈0.707. Substituting these values in (10.15)
and (10.16) yields
x1,2 = −1,0;
and
y1,2 = 0,1
which gives the same intersection points found above. One can readily see the com-
putational beneﬁts of using the Hessian normal form over the other forms of equa-
tions.
10.7 3D Geometry
3D straight lines are best described using vector notation, and readers are urged
to develop strong skills in these techniques if they wish to solve problems in 3D
geometry. Let’s begin this short survey of 3D analytic geometry by describing the
equation of a straight line.
10.7.1 Equation of a Straight Line
We start by using a vector b to deﬁne the orientation of the line, and a point a in
space through which the line passes. This scenario is shown in Fig. 10.28. Given
another point P on the line we can deﬁne a vector tb between a and P , where t is
a scalar. The position vector p for P is given by
p = a + tb
from which we can obtain the coordinates of the point P :
xp = xa + txb
yp = ya + tyb
zp = za + tzb.

180
10
Analytic Geometry
Fig. 10.28 The line equation
is based upon the point a and
the vector b
For example, if b = [1 2 3]T and a = (2,3,4), then by setting t = 1 we can identify
a second point on the line:
xp = 2 + 1 = 3
yp = 3 + 2 = 5
zp = 4 + 3 = 7.
In fact, by using different values of t we can slide up and down the line with ease.
If we have two points P1 and P2, such as the vertices of an edge, we can represent
the line equation using the above vector technique:
p = p1 + t(p2 −p1)
where p1 and p2 are position vectors to their respective points. Once more, we can
write the coordinates of any point P as follows:
xp = x1 + t(x2 −x1)
yp = y1 + t(y2 −y1)
zp = z1 + t(z2 −z1).
10.7.2 Intersecting Two Straight Lines
Given two straight lines we can test for a point of intersection, but must be prepared
for three results:
• a real intersection point
• no intersection point
• an inﬁnite number of intersections (identical lines).

10.7
3D Geometry
181
If the line equations are of the form
p = a1 + rb1
p = a2 + rb2
for an intersection we can write
a1 + rb1 = a2 + sb2
which yields
xa1 + rxb1 = xa2 + sxb2
(10.17)
ya1 + ryb1 = ya2 + syb2
(10.18)
za1 + rzb1 = za2 + szb2.
(10.19)
We now have three equations in two unknowns, and any value of r and s must
hold for all three equations. We begin by selecting two equations that are linearly
independent (i.e. one equation is not a scalar multiple of the other) and solve for r
and s, which must then satisfy the third equation. If this ﬁnal substitution fails, then
there is no intersection. If all three equations are linearly dependent, they describe
two parallel lines, which can never intersect.
To check for linear dependency we rearrange (10.17) to (10.19) as follows:
rxb1 −sxb2 = xa2 −xa1
(10.20)
ryb1 −syb2 = ya2 −ya1
(10.21)
rzb1 −szb2 = za2 −za1.
(10.22)
If the determinant Δ of any pair of these equations is zero, then they are dependent.
For example, (10.20) and (10.21) form the determinant
Δ =

xb1
−xb2
yb1
−yb2

which, if zero, implies that the two equations can not yield a solution. As it is impos-
sible to predict which pair of equations from (10.20) to (10.22) will be independent,
let’s express two independent equations as follows:
ra11 −sa12 = b1
ra21 −sa22 = b2
which yields
r = a22b1 −a12b2
Δ
s = a21b1 −a11b2
Δ

182
10
Analytic Geometry
where
Δ =

a11
a12
a21
a22
.
Solving for r and s we obtain
r = yb2(xa2 −xa1) −xb2(ya2 −ya1)
xb1yb2 −yb1xb2
(10.23)
s = yb1(xa2 −xa1) −xb1(ya2 −ya1)
xb1yb2 −yb1xb2
.
(10.24)
Example 10.6 As a quick test, consider the intersection of the lines encoded by the
following vectors:
a1 =
⎡
⎣
0
1
0
⎤
⎦,
b1 =
⎡
⎣
3
3
3
⎤
⎦,
a2 =
⎡
⎣
0
0.5
0
⎤
⎦,
b2 =
⎡
⎣
2
3
2
⎤
⎦.
Substituting the x- and y-components in (10.23) and (10.24) we discover
r = 1
3
and
s = 1
2
but for these to be consistent, they must satisfy the z-component of the original
equation:
rzb1 = szb2 = za2 −za1
1
3 × 3 −1
2 × 2 = 0
which is correct. Therefore, the point of intersection is given by either
pi = a1 + rb1,
or
pi = a2 + sb2.
Let’s try both, just to prove the point:
xi = 0 + 1
33 = 1,
xi = 0 + 1
22 = 1,
yi = 1 + 1
33 = 2,
yi = 1
2 + 1
23 = 2,
zi = 0 + 1
33 = 1,
zi = 0 + 1
22 = 1.
Therefore, the point of intersection point is (1,2,1).

10.8
Equation of a Plane
183
Example 10.7 Now let’s take two lines that don’t intersect, and also exhibit some
linear dependency:
a1 =
⎡
⎣
0
1
0
⎤
⎦,
b1 =
⎡
⎣
2
2
0
⎤
⎦,
a2 =
⎡
⎣
0
2
0
⎤
⎦,
b2 =
⎡
⎣
2
2
1
⎤
⎦.
Taking the x- and y-components we discover that the determinant Δ is zero,
which has identiﬁed the linear dependency. Taking the y- and z-components the
determinant is non-zero, which permits us to compute r and s using
r = zb2(ya2 −ya1) −yb2(za2 −za1)
yb1zb2 −zb1yb2
s = zb1(ya2 −ya1) −yb1(za2 −za1)
yb1zb2 −zb1yb2
r = 1(2 −1) −2(0 −0)
2 × 1 −0 × 2
= 1
2
s = 0(2 −1) −2(0 −0)
2 × 1 −0 × 2
= 0.
But these values of r and s must also apply to the x-components:
rxb1 −sxb2 = xa2 −xa1
1
2 × 2 −0 × 2 ̸= 0
which they clearly do not, therefore the lines do not intersect.
Now let’s proceed with the equation of a plane, and then look at how to compute
the intersection of a line with a plane using a similar technique.
10.8 Equation of a Plane
We now consider four ways of representing a plane equation: the Cartesian form,
general form, parametric form and a plane from three points.
10.8.1 Cartesian Form of the Plane Equation
One popular method of representing a plane equation is the Cartesian form, which
employs a vector normal to the plane’s surface and a point on the plane. The equation
is derived as follows.

184
10
Analytic Geometry
Fig. 10.29 The vector n is
normal to the plane, which
also contains a point
P0(x0,y0,z0). P (x,y,z) is
any other point on the plane
Let n be a nonzero vector normal to the plane and P0(x0,y0,z0) a point on the
plane. P(x,y,z) is any other point on the plane. Figure 10.29 illustrates the sce-
nario. The normal vector is deﬁned as
n = ai + bj + ck
and the position vectors for P0 and P are
p0 = x0i + y0j + z0k
p = xi + yj + zk
respectively. From Fig. 10.29 we observe that
q = p −p0
and as n is orthogonal to q
n • q = 0
therefore,
n • (p −p0) = 0
which expands into
n • p = n · p0.
(10.25)
Writing (10.25) in its Cartesian form we obtain
ax + by + cz = ax0 + by0 + cz0
but ax0 +by0 +cz0 is a scalar quantity associated with the plane and can be replaced
by d. Therefore,
ax + by + cz = d
(10.26)
which is the Cartesian form of the plane equation.
The value of d has the following geometric interpretation.

10.8
Equation of a Plane
185
Fig. 10.30 A plane
represented by the normal
vector n and a point
P0(0,1,0)
In Fig. 10.29 the perpendicular distance from the origin to the plane is
h = |p0|cosα
therefore,
n • p0 = |n||p0|cosα = h|n|
therefore, the plane equation is also expressed as
ax + by + cz = h|n|.
(10.27)
Dividing (10.27) by |n| we obtain
a
|n|x + b
|n|y + c
|n|z = h
where
|n| =
	
a2 + b2 + c2.
This means that when a unit normal vector is used, h is the perpendicular distance
from the origin to the plane. Let’s investigate this equation with an example.
Example 10.8
Figure 10.30 shows a plane represented by the normal vector n =
j + k and a point on the plane P0(0,1,0). Using (10.26) we have
0x + 1y + 1z = 0 × 0 + 1 × 1 + 1 × 0 = 1
therefore, the plane equation is
y + z = 1.
If we normalise the equation to create a unit normal vector, we have
y
√
2
+ z
√
2
= 1
√
2
where the perpendicular distance from the origin to the plane is 1/
√
2.

186
10
Analytic Geometry
Fig. 10.31 A plane is deﬁned
by the vectors a and b and the
point T (xT ,yT ,zT )
10.8.2 General Form of the Plane Equation
The general form of the equation of a plane is expressed as
Ax + By + Cz + D = 0
which means that the Cartesian form is translated into the general form by making
A = a,
B = b,
C = c,
D = −d.
10.8.3 Parametric Form of the Plane Equation
Another method of representing a plane is to employ two vectors and a point that
lie on the plane. Figure 10.31 illustrates a scenario where vectors a and b, and the
point T (xT ,yT ,zT ) lie on a plane. We now identify any other point on the plane
P(x,y,z) with its associated position vector p. The point T also has its associated
position vector t.
Using vector addition we can write
c = λa + εb
where λ and ε are two scalars such that c locates the point P . We can now write
p = t + c
(10.28)
therefore,
xP = xT + λxa + εxb
yP = yT + λya + εyb
zP = zT + λza + εzb
which means that the coordinates of any point on the plane are formed from the
coordinates of the known point on the plane, and a linear mixture of the components
of the two vectors. Let’s illustrate this vector approach with an example.

10.8
Equation of a Plane
187
Fig. 10.32 A plane is deﬁned
by the vectors a and b and the
point T (1,1,1)
Example 10.9 Figure 10.32 shows a plane containing the vectors a = i and b = k,
and the point T (1,1,1) with its position vector t = i + j + k. By inspection, the
plane is parallel with the xz-plane and intersects the y-axis at y = 1.
From (10.28) we can write
p = t + λa + εb
where λ and ε are arbitrary scalars.
For example, if λ = 2 and ε = 1:
xP = 1 + 2 × 1 + 1 × 0 = 3
yP = 1 + 2 × 0 + 1 × 0 = 1
zP = 1 + 2 × 0 + 1 × 1 = 2.
Therefore, the point (3,1,2) is on the plane.
10.8.4 Converting from the Parametric to the General Form
It is possible to convert from the parametric form to the general form of the plane
equation using the following formulae:
λ = (a • b)(b • t) −(a • t)|b|2
|a|2|b|2 −(a • b)2
ε = (a • b)(a • t) −(b • t)|a|2
|a|2|b|2 −(a • b)2
.
The resulting point P(xP ,yP ,zP ) is perpendicular to the origin.
If vectors a and b are unit vectors, λ and ε become
λ = (a • b)(b • t) −a • t
1 −(a • b)2
(10.29)

188
10
Analytic Geometry
Fig. 10.33 The vectors a and
b are parallel to the plane and
the point (0,0,1) is on the
plane
ε = (a • b)(a • t) −b • t
1 −(a • b)2
.
(10.30)
P ’s position vector p is also the plane’s normal vector. Therefore,
xP = xT + λxa + εxb
yP = yT + λya + εyb
zP = zT + λza + εzb.
The normal vector is
p = xP i + yP j + zP k
and because |p| is the perpendicular distance from the plane to the origin we can
state
xP
|p|x + yP
|p|y + zP
|p|z = |p|
or in the general form of the plane equation:
Ax + By + Cz + D = 0
where
A = xP
|p|,
B = yP
|p|,
C = zP
|p|,
D = −|p|.
Example 10.10
Figure 10.33 illustrates a plane inclined 45◦to the y- and z-axis
and parallel with the x-axis. The vectors for the parametric equation are
a = j −k
b = i
t = k.

10.8
Equation of a Plane
189
Substituting these components in (10.29) and (10.30) we have
λ = (0)(0) −(−1) × 1
2 × 1 −(0)
= 0.5
ε = (0)(−1) −(0) × 2
2 × 1 −(0)
= 0.
Therefore,
xP = 0 + 0.5 × 0 + 0 × 1 = 0
yP = 0 + 0.5 × 1 + 0 × 0 = 0.5
zP = 1 + 0.5 × (−1) + 0 × 0 = 0.5.
The point (0,0.5,0.5) has position vector p, where
|p| =
	
02 + 0.52 + 0.52 =
√
2
2
the plane equation is
0x +
0.5
√
2/2
y +
0.5
√
2/2
z −
√
2/2 = 0
which simpliﬁes to
y + z −1 = 0.
10.8.5 Plane Equation from Three Points
Very often in computer graphics problems we need to ﬁnd the plane equation from
three known points. To begin with, the three points must be distinct and not lie on a
line. Figure 10.34 shows three points R, S and T , from which we create two vectors
u = −→
RS and v = −→
RT . The vector product u × v then provides a vector normal to
the plane containing the original points. We now take another point P(x,y,z) and
form a vector w = −→
RP . The scalar product w • (u × v) = 0 if P is in the plane
containing the original points. This condition can be expressed as a determinant and
converted into the general equation of a plane. The three points are assumed to be
in an anticlockwise sequence viewed from the direction of the surface normal.
We begin with
u × v =

i
j
k
xu
yu
zu
xv
yv
zv

.

190
10
Analytic Geometry
Fig. 10.34 The vectors used
to determine a plane equation
from three points R,S and T
As w is perpendicular to u × v
w • (u × v) =

xw
yw
zw
xu
yu
zu
xv
yv
zv

= 0.
Expanding the determinant we obtain
xw

yu
zu
yv
zv
 + yw

zu
xu
zv
xv
 + zw

xu
yu
xv
yv
 = 0
which becomes
(x −xR)

yS −yR
zS −zR
yT −yR
zT −zR

+ (y −yR)

zS −zR
xS −xR
zT −zR
xT −xR
 + (z −zR)

xS −xR
yS −yR
xT −xR
yT −yR
 = 0.
This can be arranged in the form ax + by + cz + d = 0 where
a =

yS −yR
zS −zR
yT −yR
zT −zR
,
b =

zS −zR
xS −xR
xT −zR
xT −xR
,
c =

xS −xR
yS −yR
xT −xR
yT −yR
,
d = −(axR + byR + czR),
or
a =

1
yR
zR
1
yS
zS
1
yT
zT

,
b =

xR
1
zR
xS
1
zS
xT
1
zT

,
c =

xR
yR
1
xS
yS
1
xT
yT
1

,
d = −(axR + byR + czR).

10.9
Intersecting Planes
191
Fig. 10.35 Two intersecting
planes create a line of
intersection
Example 10.11
As an example, consider the three points R(0,0,1), S(1,0,0),
T (0,1,0). Therefore,
a =

1
0
1
1
0
0
1
1
0

= 1,
b =

0
1
1
1
1
0
0
1
0

= 1,
c =

0
0
1
1
0
1
0
1
1

= 1,
d = −(1 × 0 + 1 × 0 + 1 × 1) = −1
and the plane equation is
x + y + z −1 = 0.
10.9 Intersecting Planes
When two non-parallel planes intersect, they form a straight line at the intersection,
which is parallel to both planes. This line can be represented as a vector, whose
direction is revealed by the vector product of the planes’ surface normals. However,
we require a point on this line to establish a unique vector equation; a useful point
is chosen as P0, whose position vector p0 is perpendicular to the line.
Figure 10.35 shows two planes with normal vectors n1 and n2 intersecting to
create a line represented by n3, whilst P0(x0,y0,z0) is a particular point on n3 and
P(x,y,z) is any point on the line.
We start the analysis by deﬁning the surface normals:
n1 = a1i + b1j + c1k
n2 = a2i + b2j + c2k
next we deﬁne p and p0:
p = xi + yj + zk
p0 = x0i + y0j + z0k.

192
10
Analytic Geometry
Now we state the plane equations in vector form:
n1 • p + d1 = 0
n2 • p + d2 = 0.
The geometric signiﬁcance of the scalars d1 and d2 has already been described
above. Let’s now deﬁne the line of intersection as
p = p0 + λn3
where λ is a scalar.
As the line of intersection must be orthogonal to n1 and n2:
n3 = a3i + b3j + c3k = n1 × n2.
Now we introduce P0 as this must satisfy both plane equations, therefore,
n1 • p0 = −d1
(10.31)
n2 • p0 = −d2
(10.32)
and as P0 is such that p0 is orthogonal to n3
n3 • p0 = 0.
(10.33)
Equations (10.31)–(10.33) form three simultaneous equations, which reveal the
point P0. These are represented in matrix form as
⎡
⎣
−d1
−d2
0
⎤
⎦=
⎡
⎣
a1
b1
c1
a2
b2
c2
a3
b3
c3
⎤
⎦
⎡
⎣
x0
y0
z0
⎤
⎦
or
⎡
⎣
d1
d2
0
⎤
⎦= −
⎡
⎣
a1
b1
c1
a2
b2
c2
a3
b3
c3
⎤
⎦
⎡
⎣
x0
y0
z0
⎤
⎦
therefore,
x0

d1 b1 c1
d2 b2 c2
0 b3 c3

=
y0

a1 d1 c1
a2 d2 c2
a3 0 c3

=
z0

a1 b1 d1
a2 b2 d2
a3 b3 0

= −1
DET
which enables us to state
x0 =
d2
 b1 c1
b3 c3
 −d1
 b2 c2
b3 c3

DET
y0 =
d2
 a3 c3
a1 c1
 −d1
 a3 c3
a2 c2

DET

10.9
Intersecting Planes
193
Fig. 10.36 Two intersecting
planes creating a line of
intersection coincident with
the y-axis
z0 =
d2
 a1 b1
a3 b3
 −d1
 a2 b2
a3 b3

DET
where
DET =

a1
b1
c1
a2
b2
c2
a3
b3
c3

.
The line of intersection is then given by
p = p0 + λn3.
If DET = 0 the line and plane are parallel.
Example 10.12 To illustrate this, let the two intersecting planes be the xy-plane and
the xz-plane, which means that the line of intersection will be the y-axis, as shown
in Fig. 10.36.
The plane equations are z = 0 and x = 0, therefore,
n1 = k
n2 = i
and d1 = d2 = 0.
We now compute n3, DET, x0, y0, z0:
n3 =

i
j
k
0
0
1
1
0
0

= j
DET =

0
0
1
1
0
0
0
1
0

= 1

194
10
Analytic Geometry
Fig. 10.37 Three mutually
intersecting planes
x0 =
0
 0 1
1 0
 −0
 0 0
1 0

1
= 0
y0 =
0
 0 0
0 1
 −0
 0 0
1 0

1
= 0
z0 =
0
 0 0
0 1
 −0
 1 0
0 1

1
= 0.
Therefore, the line equation is p = λn3, where n3 = j, which is the y-axis.
10.9.1 Intersection of Three Planes
Three mutually intersecting planes will intersect at a point as shown in Fig. 10.37,
and we can ﬁnd this point by using a similar strategy to the one used in two in-
tersecting planes by creating three simultaneous plane equations using determi-
nants.
Figure 10.37 shows three planes intersecting at the point P(x,y,z). The three
planes can be deﬁned by the following equations:
a1x + b1y + c1z + d1 = 0
a2x + b1y + c2z + d2 = 0
a3x + b1y + c3z + d3 = 0
which means that they can be rewritten as
⎡
⎣
−d1
−d2
−d3
⎤
⎦=
⎡
⎣
a1
b1
c1
a2
b2
c2
a3
b3
c3
⎤
⎦
⎡
⎣
x
y
z
⎤
⎦

10.9
Intersecting Planes
195
or
⎡
⎣
d1
d2
d3
⎤
⎦= −
⎡
⎣
a1
b1
c1
a2
b2
c2
a3
b3
c3
⎤
⎦
⎡
⎣
x
y
z
⎤
⎦
or in determinant form
x

d1 b1 c1
d2 b2 c2
d3 b3 c3

=
y

a1 d1 c1
a2 d2 c2
a3 d3 c3

=
z

a1 b1 d1
a2 b2 d2
a3 b3 d3

= −1
DET
where
DET =

a1
b1
c1
a2
b2
c2
a3
b3
c3

.
Therefore, we can state that
x = −

d1 b1 c1
d2 b2 c2
d3 b3 c3

DET
y = −

a1 d1 c1
a2 d2 c2
a3 d3 c3

DET
z = −

a1 b1 d1
a2 b2 d2
a3 b3 d3

DET
.
If DET = 0, two of the planes at least, are parallel. Let’s test these equations with
a simple example.
Example 10.13 The planes shown in Fig. 10.38 have the following equations:
x + y + z −2 = 0
z = 0
y −1 = 0
therefore,
DET =

1
1
1
0
0
1
0
1
0

= −1
x = −

−2 1 1
0 0 1
−1 1 0

−1
= 1

196
10
Analytic Geometry
Fig. 10.38 Three planes
intersecting at a point P
Fig. 10.39 The angle
between two planes is the
angle between their surface
normals
y = −

1 −2 1
0 0 1
0 −1 0

−1
= 1
z = −

1 1 −2
0 0 0
0 1 −1

−1
= 0
which means that the intersection point is (1,1,0), which is correct.
10.9.2 Angle Between Two Planes
Calculating the angle between two planes is relatively easy and can be found by
taking the dot product of the planes’ normals. Figure 10.39 shows two planes with
α representing the angle between the two surface normals and n1 and n2.
Let the plane equations be
ax1 + by1 + cz1 + d1 = 0
ax2 + by2 + cz2 + d2 = 0

10.9
Intersecting Planes
197
Fig. 10.40 α is the angle
between two planes
therefore, the surface normals are
n1 = a1i + b1j + c1k
n2 = a2i + b2j + c2k.
Taking the dot product of n1 and n2:
n1 • n2 = |n1||n2|cosα
and
α = cos−1
 n1 • n2
|n1||n2|

.
Example 10.14 Figure 10.40 shows two planes with normal vectors n1 and n2.
The plane equations are
x + y + z −1 = 0
z = 0
therefore,
n1 = i + j + k
n2 = k
therefore,
|n1| =
√
3
|n2| = 1
and
α = cos−1
 1
√
3

≈54.74◦.

198
10
Analytic Geometry
Fig. 10.41 α is the angle
between the plane’s surface
normal and the line’s
direction vector
10.9.3 Angle Between a Line and a Plane
The angle between a line and a plane is calculated using a similar technique used for
calculating the angle between two planes. If the line equation employs a direction
vector, the angle is determined by taking the dot product of this vector and between
the plane’s normal. Figure 10.41 shows such a scenario where n is the plane’s sur-
face normal and v is the line’s direction vector.
Let the plane equation be
ax + by + cz + d = 0
then its surface normal is
n = ai + bj + ck.
Let the line’s direction vector be v and T (xT ,yT ,zT ) is a point on the line, then any
point on the line is given by the position vector p:
p = t + λv
therefore, we can write
n • v = |n||v|cosα
α = cos−1
 n • v
|n||v|

.
When the line is parallel to the plane n · v = 0.
Example 10.15
Consider the scenario illustrated in Fig. 10.42 where the plane
equation is
x + y + z −1 = 0
therefore, the surface normal is given by n:
n = i + j + k

10.9
Intersecting Planes
199
Fig. 10.42 The required
angle is between a and b
and the line’s direction vector is a:
a = i + j
therefore,
|n| =
√
3
|a| =
√
2
and
α = cos−1
 2
√
6

≈35.26◦.
10.9.4 Intersection of a Line with a Plane
Given a line and a plane, they will either intersect or are parallel. Either way, both
conditions can be found using some simple vector analysis, as shown in Fig. 10.43.
The objective is to identify a point P that is on the line and the plane.
Let the plane equation be
ax + by + cz + d = 0
where
n = ai + bj + ck.
P is a point on the plane with position vector
p = xi + yj + zk
therefore,
n • p + d = 0.

200
10
Analytic Geometry
Fig. 10.43 The vectors
required to determine whether
a line and plane intersect
Let the line equation be
p = t + λv
where
t = xT i + yT j + zT k
and
v = xvi + yvj + zvk
therefore, the line and plane will intersect for some λ such that
n • (t + λv) + d = n • t + λn • v + d = 0.
Therefore,
λ = −(n • t + d)
n • v
for the intersection point. The position vector for P is p = t + λv.
If n • v = 0 the line and plane are parallel.
Example 10.16 Let’s test this result with the scenario shown in Fig. 10.44.
Given the plane
x + y + z −1 = 0
n = i + j + k
and the line
p = t + λv
where
t = 0
v = i + j

10.10
Summary
201
Fig. 10.44 P identiﬁes the
point where a line intersects
a plane
then
λ = −(1 × 0 + 1 × 0 + 1 × 0 −1)
1 × 1 + 1 × 1 + 1 × 0
= 0.5
and the point of intersection is P(0.5,0.5,0).
10.10 Summary
Mixing vectors with geometry is a powerful analytical tool, and helps us solve many
problems associated with computer graphics, such as rendering, modelling, collision
detection and physically-based animation. Unfortunately, there has not been space
to investigate every topic, but hopefully, what has been covered, will enable you to
solve other problems with greater conﬁdence.

Chapter 11
Barycentric Coordinates
11.1 Introduction
Cartesian coordinates are a fundamental concept in mathematics and are central to
computer graphics. Such rectangular coordinates are just offsets relative to some
origin. Other coordinate systems also exist such as polar, spherical and cylindrical
coordinates, and they too, require an origin. Barycentric coordinates, on the other
hand, locate points relative to existing points, rather than to an origin and are known
as local coordinates.
11.2 Background
The German mathematician August Möbius (1790–1868) is credited with their dis-
covery. “barus” is the Greek entomological root for “heavy”, and barycentric coor-
dinates were originally used for identifying the centre of mass of shapes and objects.
It is interesting to note that the preﬁxes “bari”, “bary” and “baro” have also inﬂu-
enced other words such as baritone, baryon (heavy atomic particle) and barometer.
Although barycentric coordinates are used in geometry, computer graphics, rel-
ativity and global time systems, they do not appear to be a major topic in a typical
math syllabus. Nevertheless, they are important and I would like to describe what
they are and how they can be used in computer graphics.
The idea behind barycentric coordinates can be approached from different direc-
tions, and I have chosen mass points and linear interpolation. But before we begin
this analysis, it will be useful to investigate a rather elegant theorem known as Ceva’s
Theorem, which we will invoke later in this chapter.
11.3 Ceva’s Theorem
Giovanni Ceva (1647–1734) is credited with a theorem associated with the con-
currency of lines in a triangle. It states that: In a triangle ΔABC, the lines AA′,
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_11, © Springer-Verlag London 2014
203

204
11
Barycentric Coordinates
Fig. 11.1 The geometry
associated with Ceva’s
Theorem
Fig. 11.2 The geometry for
proving Ceva’s Theorem
BB′ and CC′, where A′, B′ and C′ are points on the opposite sides facing ver-
tices A, B and C respectively, are concurrent (intersect at a common point) if, and
only if
AC′
C′B · BA′
A′C · CB′
B′A = 1.
Figure 11.1 shows such a scenario.
There are various ways of proving this theorem, (see Advanced Euclidean Ge-
ometry by Alfred Posamentier) and perhaps the simplest proof is as follows.
Figure 11.2 shows triangle ΔABC with line AA′ extended to R and BB′ ex-
tended to S, where line SR is parallel to line AB. The resulting geometry creates a
number of similar triangles:
ΔABA′
:
ΔRCA′
⇒
A′C
BA′ = CR
AB
(11.1)
ΔABB′
:
ΔCSB′
⇒
B′A
CB′ = AB
SC
(11.2)

11.4
Ratios and Proportion
205
ΔBPC′
:
ΔCSP
⇒
C′B
SC = C′P
PC
(11.3)
ΔAC′P
:
ΔRCP
⇒
AC′
CR = C′P
PC .
(11.4)
From (11.3) and (11.4) we get
C′B
SC = AC′
CR
which can be rewritten as
C′B
AC′ = SC
CR .
(11.5)
The product of (11.1), (11.2) and (11.5) is
A′C
BA′ · B′A
CB′ · C′B
AC′ = CR
AB · AB
SC · SC
CR = 1.
(11.6)
Rearranging the terms of (11.6) we get
AC′
C′B · BA′
A′C · CB′
B′A = 1
which is rather an elegant relationship.
11.4 Ratios and Proportion
Central to barycentric coordinates are ratios and proportion, so let’s begin by revis-
ing some fundamental formulae used in calculating ratios.
Imagine the problem of dividing £100 between two people in the ratio 2 : 3. The
solution lies in the fact that the money is divided into 5 parts (2 + 3), where 2 parts
go to one person and 3 parts to the other person. In this case, one person receives
£40 and the other £60. At a formal level, we can describe this as follows.
A scalar A can be divided into the ratio r : s using the following expressions:
r
r + s A
and
s
r + s A.
Note that
r
r + s +
s
r + s = 1
and
1 −
r
r + s =
s
r + s .
Furthermore, the above formulae can be extended to incorporate any number of ratio
divisions. For example, A can be divided into the ratio r : s : t by the following:

206
11
Barycentric Coordinates
Fig. 11.3 Two masses ﬁxed
at the ends of a massless rod
Fig. 11.4 The geometry used
for equating turning moments
r
r + s + t A,
s
r + s + t A
and
t
r + s + t A
similarly,
r
r + s + t +
s
r + s + t +
t
r + s + t = 1.
These expressions are very important as they show the emergence of barycentric
coordinates. For the moment though, just remember their structure and we will in-
vestigate some ideas associated with balancing weights.
11.5 Mass Points
We begin by calculating the centre of mass—the centroid—of two masses. Consider
the scenario shown in Fig. 11.3 where two masses mA and mB are placed at the ends
of a massless rod.
If mA = mB a state of equilibrium is achieved by placing the fulcrum mid-way
between the masses. If the fulcrum is moved towards mA, mass mB will have a
turning advantage and the rod rotates clockwise.
To calculate a state of equilibrium for a general system of masses, consider the
geometry illustrated in Fig. 11.4, where two masses mA and mB are positioned xA
and xB at A and B respectively. When the system is in balance we can replace the
two masses by a single mass mA + mB at the centroid denoted by ¯x.
A balance condition arises when the LHS turning moment equals the RHS turn-
ing moment. The turning moment being the product of a mass by its offset from the
fulcrum. Equating turning moments, equilibrium is reached when
mB(xB −¯x) = mA(¯x −xA)
mBxB −mB ¯x = mA ¯x −mAxA
(mA + mB)¯x = mAxA + mBxB
¯x = mAxA + mBxB
mA + mB
=
mA
mA + mB
xA +
mB
mA + mB
xB.
(11.7)

11.5
Mass Points
207
For example, if mA = 6 and mB = 12, and positioned at xA = 0 and xB = 12 re-
spectively, the centroid is located at
¯x = 6
18 × 0 + 12
18 × 12 = 8.
Thus we can replace the two masses by a single mass of 18 located at ¯x = 8.
Note that the terms in (11.7) mA/(mA + mB) and mB/(mA + mB) sum to 1
and are identical to those used above for calculating ratios. They are also called the
barycentric coordinates of ¯x relative to the points A and B.
Using the general form of (11.7) any number of masses can be analysed using
¯x =
n
i=1 mixi
n
i=1 mi
where mi is a mass located at xi. Furthermore, we can compute the y-component of
the centroid ¯y using
¯y =
n
i=1 miyi
n
i=1 mi
and in 3D the z-component of the centroid ¯z is
¯z =
n
i=1 mizi
n
i=1 mi
.
To recap, (11.7) states that
¯x =
mA
mA + mB
xA +
mB
mA + mB
xB
therefore, we can write
¯y =
mA
mA + mB
yA +
mB
mA + mB
yB
which allows us to state
¯P =
mA
mA + mB
A +
mB
mA + mB
B
where A and B are the position vectors for the mass locations A and B respectively,
and ¯P is the position vector for the centroid ¯P .
If we extend the number of masses to three: mA, mB and mC, which are organised
as a triangle, then we can write
¯P =
mA
mA + mB + mC
A +
mB
mA + mB + mC
B +
mC
mA + mB + mC
C.
(11.8)
The three multipliers of A, B and C are the barycentric coordinates of ¯P relative
to the points A, B and C. Note that the number of coordinates is not associated with

208
11
Barycentric Coordinates
Fig. 11.5 The geometry used
for equating turning moments
Fig. 11.6 Balancing the
triangle along AA′
Fig. 11.7 Balancing the
triangle along BB′
the number of spatial dimensions,but the number of reference points. Now consider
the scenario shown in Fig. 11.5. If mA = mB = mC then we can determine the
location of A′, B′ and C′ as follows:
1. We begin by placing a fulcrum under A mid-way along BC as shown in Fig. 11.6.
The triangle will balance because mB = mC and A′ is 1
2a from C and 1
2a
from B.
2. Now we place the fulcrum under B mid-way along CA as shown in Fig. 11.7.
Once more the triangle will balance, because mC = mA and B′ is 1
2b from C
and 1
2b from A.
3. Finally, we do the same for C and AB. Figure 11.8 shows the ﬁnal scenario.
Ceva’s Theorem conﬁrms that the medians AA′, BB′ and CC′ are concurrent at
¯P because
AC′
C′B · BA′
A′C · CB′
B′A =
1
2c
1
2c
·
1
2a
1
2a
·
1
2b
1
2b
= 1.

11.5
Mass Points
209
Fig. 11.8
¯P is the centroid
of the triangle
Fig. 11.9 How the masses
determine the positions of A′,
B′ and C′
Arbitrarily, we select the median C′C. At C′ we have an effective mass of mA +mB
and mC at C. For a balance condition
(mA + mB) × C′ ¯P = mC × ¯PC
and as the masses are equal, C′ ¯P must be 1
3 along the median C′C.
If we use (11.8) we obtain
¯P = 1
3A + 1
3B + 1
3C
which locates the coordinates of the centroid correctly.
Now let’s consider another example where mA = 1, mB = 2 and mC = 3, as
shown in Fig. 11.9. For a balance condition A′ must be 3
5a from B and 2
5a from C.
Equally, B′ must be 1
4b from C and 3
4b from A. Similarly, C′ must be 2
3c from A
and 1
3c from B.
Ceva’s Theorem conﬁrms that the lines AA′, BB′ and CC′ are concurrent at ¯P
because
AC′
C′B · BA′
A′C · CB′
B′A =
2
3c
1
3c
·
3
5a
2
5a
·
1
4b
3
4b
= 1.

210
11
Barycentric Coordinates
Fig. 11.10 How the masses
determine the positions of A′,
B′ and C′
Arbitrarily select C′C. At C′ we have an effective mass of 3 (1 + 2) and 3 at C,
which means that for a balance condition ¯P is mid-way along C′C. Similarly, ¯P is
1
6 along A′A and 1
3 along B′B.
Once more, using (11.8) in this scenario we obtain
¯P = 1
6A + 1
3B + 1
2C.
Note that the multipliers of A, B and C are identical to the proportions of ¯P along
A′A, B′B and C′C. Let’s prove why this is so.
Figure 11.10 shows three masses with the triangle’s sides divided into their vari-
ous proportions to derive ¯P .
On the line A′A we have mA at A and effectively mB + mC at A′, which
means that ¯P divides A′A in the ratio mA/(mA + mB + mC) : (mB + mC)/(mA +
mB + mC).
On the line B′B we have mB at B and effectively mA + mC at B′, which
means that ¯P divides B′B in the ratio mB/(mA + mB + mC) : (mA + mC)/(mA +
mB + mC).
Similarly, on the line C′C we have mC at C and effectively mA+mB at C′, which
means that ¯P divides C′C in the ratio mC/(mA + mB + mC) : (mA + mB)/(mA +
mB + mC).
To summarise, given three masses mA, mB and mC located at A, B and C re-
spectively, the centroid ¯P is given by
¯P =
mA
mA + mB + mC
A +
mB
mA + mB + mC
B +
mC
mA + mB + mC
C.
(11.9)
If we accept that mA, mB and mC can have any value, including zero, then the
barycentric coordinates of ¯P will be affected by these values. For example, if mB =
mC = 0 and mA = 1, then ¯P will be located at A with barycentric coordinates
(1,0,0). Similarly, if mA = mC = 0 and mB = 1, then ¯P will be located at B with

11.6
Linear Interpolation
211
Fig. 11.11 Three masses can
be represented by a single
mass located at the centroid
Table 11.1 The magnitude
and coordinates of three
masses
mi
ti
xi
yi
zi
tixi
tiyi
tizi
12
1
2
8
6
2
4
3
1
8
1
3
2
3
3
2
3
1
1
4
1
6
2
6
6
1
3
1
1
¯x = 5
¯y = 5
¯z = 3
barycentric coordinates (0,1,0). And if mA = mB = 0 and mC = 1, then ¯P will be
located at C with barycentric coordinates (0,0,1).
Now let’s examine a 3D example as illustrated in Fig. 11.11. The ﬁgure shows
three masses 4, 8 and 12 and their equivalent mass 24 located at (¯x, ¯y, ¯z).
The magnitude and coordinates of three masses are shown in Table 11.1, together
with the barycentric coordinate ti. The column headed ti expresses the masses as
fractions of the total mass: i.e.
ti =
mi
m1 + m2 + m3
and we see that the centroid is located at (5,5,3).
Having discovered barycentric coordinates in weight balancing, let’s see how
they emerge in linear interpolation.
11.6 Linear Interpolation
Suppose that we wish to ﬁnd a value mid-way between two scalars A and B. We
could proceed as follows:
V = A + 1
2(B −A)
= 1
2A + 1
2B

212
11
Barycentric Coordinates
which seems rather obvious. Similarly, to ﬁnd a value one-third between A and B,
we can write
V = A + 1
3(B −A)
= 2
3A + 1
3B.
Generalising, to ﬁnd some fraction t between A and B we can write
V = (1 −t)A + tB.
(11.10)
For example, to ﬁnd a value 3
4 between 10 and 18 we have
V =

1 −3
4

× 10 + 3
4 × 18 = 16.
Although this is a trivial formula, it is very useful when interpolating between two
numerical values. Let us explore (11.10) in greater detail.
To begin with, it is worth noting that the multipliers of A and B sum to 1:
(1 −t) + t = 1.
Rather than using (1−t) as a multiplier, it is convenient to make a substitution such
as s = 1 −t, and we have
V = sA + tB
where
s = 1 −t
and
s + t = 1.
Equation (11.10) is called a linear interpolant as it linearly interpolates between
A and B using the parameter t. It is also known as a lerp. The terms s and t are the
barycentric coordinates of V as they determine the value of V relative to A and B.
Now let’s see what happens when we substitute coordinates for scalars. We start
with 2D coordinates A(xA,yA) and B(xB,yB), and position vectors A, B and C and
the following linear interpolant
V = sA + tB
where
s = 1 −t
and
s + t = 1

11.6
Linear Interpolation
213
Fig. 11.12 The position of V
slides between A and B as t
varies between 0 and 1
Fig. 11.13 The position of V
moves between A, B and C
depending on the value r, s
and t
then
xV = sxA + txB
yV = syA + tyB.
Figure 11.12 illustrates what happens when t varies between 0 and 1.
The point V slides along the line connecting A and B. When t = 0, V is coin-
cident with A, and when t = 1, V is coincident with B. The reader should not be
surprised that the same technique works in 3D.
Now let’s extend the number of vertices to three in the form of a triangle as shown
in Fig. 11.13. This time we will use r, s and t to control the interpolation. We would
start as follows:
V = rA + sB + tC
where A, B and C are the position vectors for A, B and C respectively, and V is the
position vector for the point V .
Let
r = 1 −s −t
and
r + s + t = 1.

214
11
Barycentric Coordinates
Fig. 11.14 A 3D triangle
Once more, we begin with 2D coordinates A(xA,yA), B(xB,yB) and C(xC,yC)
where
xV = rxA + sxB + txC
yV = ryA + syB + tyC.
When
r = 1,
V is coincident with A
s = 1,
V is coincident with B
t = 1,
V is coincident with C.
Similarly, when
r = 0,
V is located on the edge BC
s = 0,
V is located on the edge CA
t = 0,
V is located on the edge AB.
For all other values of r, s and t, where r + s + t = 1 and 0 ≤r,s,t ≤1, V is inside
triangle ΔABC, otherwise it is outside the triangle.
The triple (r,s,t) are barycentric coordinates and locate points relative to A, B
and C, rather than an origin. For example, the barycentric coordinates of A, B and
C are (1,0,0), (0,1,0) and (0,0,1) respectively.
All of the above formulae work equally well in three dimensions, so let’s inves-
tigate how barycentric coordinates can locate points inside a 3D triangle. However,
before we start, let’s clarify what we mean by inside a triangle. Fortunately, barycen-
tric coordinates can distinguish points within the triangle’s three sides; points co-
incident with the sides; and points outside the triangle’s boundary. The range and
value of the barycentric coordinates provide the mechanism for detecting these three
conditions.
Example 11.1
Figure 11.14 illustrates a scenario with the points P1(x1,y1,z1),
P2(x2,y2,z2) and P3(x3,y3,z3). Using barycentric coordinates we can state that

11.6
Linear Interpolation
215
any point P0(x0,y0,z0) inside or on the edge of triangle ΔP1P2P3 is deﬁned by
x0 = rx1 + sx2 + tx3
y0 = ry1 + sy2 + ty3
z0 = rz1 + sx2 + tz3
where r + s + t = 1 and 0 ≤r,s,t,≤1.
If the triangle’s vertices are P1(0,2,0), P2(0,0,4) and P3(3,1,2) then we can
choose different values of r, s and t to locate P0 inside the triangle. However,
I would also like to conﬁrm that P0 lies on the plane containing the three points.
To do this we require the plane equation for the three points, which can be derived
as follows.
Given P1(x1,y1,z1), P2(x2,y2,z2) and P3(x3,y3,z3), and the target plane equa-
tion ax + by + cz + d = 0, then
a =

1
y1
z1
1
y2
z2
1
y3
z3

b =

x1
1
z1
x2
1
z2
x3
1
z3

c =

x1
y1
1
x2
y2
1
x3
z2
1

d = −(ax1 + by1 + cz1)
thus
a =

1
2
0
1
0
4
1
1
2

= 0
b =

0
1
0
0
1
4
3
1
2

= 12
c =

0
2
1
0
0
1
3
1
1

= 6
d = −24

216
11
Barycentric Coordinates
Table 11.2 The barycentric
coordinates of P0
r
s
t
x0
y0
z0
12y0 + 6z0
1
0
0
0
2
0
24
0
1
0
0
0
4
24
0
0
1
3
1
2
24
1
4
1
4
1
2
1 1
2
1
2
24
0
1
2
1
2
1 1
2
1
2
3
24
1
2
1
2
0
0
1
2
24
1
3
1
3
1
3
1
1
2
24
therefore, the plane equation is
12y + 6z = 24.
(11.11)
If we substitute a point (x0,y0,z0) in the LHS of (11.11) and obtain a value of 24,
then the point is on the plane.
Table 11.2 shows various values of r, s and t, and the corresponding position
of P0. The table also conﬁrms that P0 is always on the plane containing the three
points. Now we are in a position to test whether a point is inside, on the boundary
or outside a 3D triangle.
We begin by writing the three simultaneous equations deﬁning P0 in matrix form
⎡
⎣
x0
y0
z0
⎤
⎦=
⎡
⎣
x1
x2
x3
y1
y2
y3
z1
z2
z3
⎤
⎦
⎡
⎣
r
s
t
⎤
⎦
therefore,
r

x0 x2 x3
y0 y2 y3
z0 z2 z3

=
s

x1 x0 x3
y1 y0 y3
z1 z0 z3

=
t

x1 x2 x0
y1 y2 y0
z1 z2 z0

=
1

x1 x2 x3
y1 y2 y3
z1 z2 z3

and
r =

x0 x2 x3
y0 y2 y3
z0 z2 z3

DET
s =

x1 x0 x3
y1 y0 y3
z1 z0 z3

DET
t =

x1 x2 x0
y1 y2 y0
z1 z2 z0

DET

11.6
Linear Interpolation
217
DET =

x1
x2
x3
y1
y2
y3
z1
z2
z3

.
Using the three points P1(0,2,0), P2(0,0,4), P3(3,1,2) and arbitrary positions
of P0, the values of r, s and t identify whether P0 is inside or outside triangle
ΔABC. For example, the point P0(0,2,0) is a vertex and is classiﬁed as being on
the boundary. To conﬁrm this we calculate r, s and t, and show that r + s + t = 1:
DET =

0
0
3
2
0
1
0
4
2

= 24
r =

0 0 3
2 0 1
0 4 2

24
= 1
s =

0 0 3
2 2 1
0 0 2

24
= 0
t =

0 0 0
2 0 2
0 4 0

24
= 0
therefore r + s + t = 1, but both s and t are zero which conﬁrms that the point
(0,2,0) is on the boundary. In fact, as both coordinates are zero it conﬁrms that the
point is located on a vertex.
Now let’s deliberately choose a point outside the triangle. For example,
P0(4,0,3) is outside the triangle, which is conﬁrmed by the corresponding values
of r, s and t:
r =

4 0 3
0 0 1
3 4 2

24
= −2
3
s =

0 4 3
2 0 1
0 3 2

24
= 3
4
t =

0 0 4
2 0 0
0 4 3

24
= 4
3
therefore,
r + s + t = −2
3 + 3
4 + 4
3 = 1 5
12
which conﬁrms that the point (4,0,3) is outside the triangle. Note that r < 0 and
t > 1, which individually conﬁrm that the point is outside the triangle’s boundary.

218
11
Barycentric Coordinates
Fig. 11.15 A concave
polygon
Fig. 11.16 The areas of the
internal triangles are directly
proportional to the
barycentric coordinates of P
11.7 Convex Hull Property
We have already shown that it is possible to determine whether a point is inside or
outside a triangle. But remember that triangles are always convex. So can we test
whether a point is inside or outside any polygon? Well the answer is no, unless the
polygon is convex. The reason for this can be understood by considering the concave
polygon shown in Fig. 11.15.
Let the barycentric coordinates for a point P0 be
P0 = rA + sB + tC + uD
where r +s +t +u = 1. When t = 0, P0 can exist anywhere inside triangle ΔABD.
Thus, if any vertex creates a concavity, it will be ignored by barycentric coordi-
nates.
11.8 Areas
Barycentric coordinates are also known as areal coordinates due to their area divid-
ing properties. For example, in Fig. 11.16 the areas of the three internal triangles are
in proportion to the barycentric coordinates of the point P .
To prove this, let P have barycentric coordinates
P = rA + sB + tC

11.8
Areas
219
where
r + s + t = 1,
and
0 ≤(r,s,t) ≤1.
If we use the notation areaΔABC to represent the area of the triangle formed
from the vertices A, B and C then areaΔABC is the sum of the areas of the smaller
triangles:
areaΔABC = areaΔABP + areaΔBCP + areaΔCAP.
But the area of any triangle ΔP1P2P3 is
areaΔP1P2P3 = 1
2

x1
y1
1
x2
y2
1
x3
y3
1

therefore,
areaΔABP = 1
2

xA
yA
1
xB
yB
1
xP
yP
1

but
xP = rxA + sxB + txC
and
yP = ryA + syB + tyC
therefore,
areaΔABP = 1
2

xA
yA
1
xB
yB
1
rxA + sxB + txC
ryA + syB + tyC
1

which expands to
areaΔABP = 1
2
 xAyB +rxByA +sxByB +txByC +rxAyA +sxByA +txCyA
−rxAyA −sxAyB −txAyC −xByA −rxAyB −sxByB −txCyB

= 1
2
xAyB −xByA + r(xByA −xAyB) + s(xByA −xAyB)
+t(xByC −xCyB) + t(xCyA −xAyC)

= 1
2
xAyB −xByA + (1 −t)(xByA −xAyB) + t(xByC −xCyB)
+t(xCyA −xAyC)

= 1
2[−txByA + txAyB + txByC −txCyB + txCyA −txAyC]

220
11
Barycentric Coordinates
and simpliﬁes to
areaΔABP = 1
2t

xA
yA
1
xB
yB
1
xC
yC
1

= t × areaΔABC
therefore,
t = areaΔABP
areaΔABC
similarly,
areaΔBCP = 1
2r

xA
yA
1
xB
yB
1
xC
yC
1

= r × areaΔABC
r = areaΔBCP
areaΔABC
and
areaΔCAP = 1
2s

xA
yA
1
xB
yB
1
xC
yC
1

= s × areaΔABC
s = areaΔCAP
areaΔABC .
Thus, we see that the areas of the internal triangles are directly proportional to the
barycentric coordinates of P .
This is quite a useful relationship and can be used to resolve various geometric
problems. For example, let’s use it to ﬁnd the radius and centre of the inscribed
circle for a triangle. We could approach this problem using classical Euclidean ge-
ometry, but barycentric coordinates provide a powerful analytical tool for resolving
the problem very quickly. Consider triangle ΔABC with sides a, b and c as shown
in Fig. 11.17. The point P is the centre of the inscribed circle with radius R. From
our knowledge of barycentric coordinates we know that
P = rA + sB + tC
where
r + s + t = 1.
(11.12)
We also know that the area properties of barycentric coordinates permit us to state
areaΔBCP = r × areaΔABC = 1
2aR
areaΔCAP = s × areaΔABC = 1
2bR

11.8
Areas
221
Fig. 11.17 The inscribed
circle in triangle ΔABC
areaΔABP = t × areaΔABC = 1
2cR
therefore,
r =
aR
2 × areaΔABC ,
s =
bR
2 × areaΔABC ,
t =
cR
2 × areaΔABC ,
substituting r, s and t in (11.12) we get
R
2 × areaΔABC (a + b + c) = 1
and
R = 2 × areaΔABC
(a + b + c)
.
Substituting R in the deﬁnitions of r, s and t we obtain
r =
a
a + b + c
s =
b
a + b + c
t =
c
a + b + c
and
xP = rxA + sxB + txC
yP = ryA + syB + tyC.
Example 11.2 To test this solution, consider the right-angled triangle in Fig. 11.18,
where a =
√
200, b = 10, c = 10 and areaΔABC = 50. Therefore
R =
2 × 50
10 + 10 +
√
200
≈2.929
and
r =
√
200
34.1421 ≈0.4142
s =
10
34.1421 ≈0.2929
t =
10
34.1421 ≈0.2929

222
11
Barycentric Coordinates
Fig. 11.18 The inscribed
circle for a triangle
Fig. 11.19 Triangle ΔABC
with sides divided in the ratio
1 : 2
therefore,
xP = 0.4142 × 0 + 0.2929 × 10 + 0.2929 × 0 ≈2.929
yP = 0.4142 × 0 + 0.2929 × 0 + 0.2929 × 0 ≈2.929.
Therefore, the inscribed circle has a radius of 2.929 and a centre with coordinates
(2.929,2.929).
Example 11.3 Let’s explore another example where we determine the barycentric
coordinates of a point using virtual mass points.
Figure 11.19 shows triangle ΔABC where A′, B′ and C′ divide BC, CA and AB
respectively, in the ratio 1 : 2. The objective is to ﬁnd the barycentric coordinates of
D, E and F , and the area of triangle ΔDEF as a proportion of triangle ΔABC.
We can approach the problem using mass points. For example, if we assume D is
the centroid, all we have to do is determine the mass points that create this situation.
Then the barycentric coordinates of D are given by (11.8). We proceed as follows.
The point D is on the intersection of lines CC′ and AA′. Therefore, we begin by
placing a mass of 1 at C. Then, for line BC to balance at A′ a mass of 2 must be
placed at B. Similarly, for line AB to balance at C′ a mass of 4 must be placed at A.
This conﬁguration is shown in Fig. 11.20.

11.8
Areas
223
Fig. 11.20 The masses
assigned to A, B and C to
determine D
Fig. 11.21 The masses
assigned to A, B and C to
determine E
The total mass is 7 = (1 + 2 + 4), therefore,
D = 4
7A + 2
7B + 1
7C.
The point E is on the intersection of lines BB′ and AA′. Therefore, we begin by
placing a mass of 1 at A. Then, for line CA to balance at B′ a mass of 2 must be
placed at C. Similarly, for line BC to balance at A′ a mass of 4 must be placed at B.
This conﬁguration is shown in Fig. 11.21. The total mass is still 7, therefore,
E = 1
7A + 4
7B + 2
7C.
From the symmetry of the triangle we can state that
F = 2
7A + 1
7B + 4
7C.
Thus we can locate the points and using the vector equations
D = 4
7A + 2
7B + 1
7C
E = 1
7A + 4
7B + 2
7C
F = 2
7A + 1
7B + 4
7C.

224
11
Barycentric Coordinates
Fig. 11.22 The masses
assigned to A, B and C to
determine D
The important feature of these equations is that the barycentric coordinates of D, E
and F are independent of A, B and C they arise from the ratio used to divide the
triangle’s sides.
Although it was not the original intention, we can quickly explore what the
barycentric coordinates of D, E and F would be if the triangle’s sides had been
1 : 3 instead of 1 : 2. Without repeating all of the above steps, we would proceed as
follows.
The point D is on the intersection of lines CC′ and AA′. Therefore, we begin
by placing a mass of 1 at C. Then, for line BC to balance at A′ a mass of 3 must
be placed at B. Similarly, for line AB to balance at C′ a mass of 9 must be placed
at A. This conﬁguration is shown in Fig. 11.22. The total mass is 13 = (1 + 3 + 9),
therefore,
D = 9
13A + 3
13B + 1
13C
E = 1
13A + 9
13B + 3
13C
F = 3
13A + 1
13B + 9
13C.
We could even develop the general equations for a ratio 1 : n. It is left to the reader
to show that
D =
n2
n2 + n + 1A +
n
n2 + n + 1B +
1
n2 + n + 1C
E =
1
n2 + n + 1A +
n2
n2 + n + 1B +
n
n2 + n + 1C
F =
n
n2 + n + 1A +
1
n2 + n + 1B +
n2
n2 + n + 1C.
As a quick test for the above equations, let n = 1, which make D, E and F
concurrent at the triangle’s centroid:
D = 1
3A + 1
3B + 1
3C

11.8
Areas
225
Fig. 11.23 Triangle ΔABC
divides into four triangles
ΔABE, ΔBCF , ΔCAD and
ΔDEF
E = 1
3A + 1
3B + 1
3C
F = 1
3A + 1
3B + 1
3C
which is rather reassuring!
Now let’s return to the ﬁnal part of the problem and determine the area of trian-
gle ΔDEF in terms of ΔABC. The strategy is to split triangle ΔABC into four
triangles: ΔBCF , ΔCAD, ΔABE and ΔDEF as shown in Fig. 11.23.
Therefore,
areaΔABC = areaΔBCF + areaΔCAD + areaΔABE + areaΔDEF
and
1 = areaΔBCF
areaΔABC + areaΔCAD
areaΔABC + areaΔABE
areaΔABC + areaΔDEF
areaΔABC .
(11.13)
But we have just discovered that the barycentric coordinates are intimately con-
nected with the ratios of triangles. For example, if F has barycentric coordinates
(rF ,sF ,tF ) relative to the points A, B and C respectively, then
rF = areaΔBCF
areaΔABC .
And if D has barycentric coordinates (rD,sD,tD) relative to the points A, B and C
respectively, then
sD = areaΔCAD
areaΔABC .
Similarly, if E has barycentric coordinates (rE,sE,tE) relative to the points A, B
and C respectively, then
tE = areaΔABE
areaΔABC .
Substituting rF , sE and tD in (11.13) we obtain
1 = rF + sD + tE + areaΔDEF
areaΔABC .

226
11
Barycentric Coordinates
Fig. 11.24 A tetrahedron
From (11.12) we see that
rF = 2
7
sD = 2
7
tE = 2
7
therefore,
1 = 6
7 + areaΔDEF
areaΔABC
and
areaΔDEF = 1
7areaΔABC
which is rather neat!
But just before we leave this example, let’s state a general expression for the
areaΔDEF for a triangle whose sides are divided in the ratio 1 : n. Once again, I’ll
leave it to the reader to prove that
areaΔDEF = n2 −2n + 1
n2 + n + 1 × areaΔABC.
Note that when n = 1, areaΔDEF = 0, which is correct.
[Hint: The corresponding values of rF , sD and tE are n/(n2 + n + 1).]
11.9 Volumes
We have now seen that barycentric coordinates can be used to locate a scalar within
a 1D domain, a point within a 2D area, so it seems logical that the description should
extend to 3D volumes, which is the case.
Example 11.4
To demonstrate this, consider the tetrahedron shown in Fig. 11.24.
The volume of a tetrahedron is give by
V = 1
6

x1
y1
z1
x2
y2
z2
x3
y3
z3


11.9
Volumes
227
where [x1 y1 z1]T , [x2 y2 z2]T and [x3 y3 z3]T are the three vectors extending from
the fourth vertex to the other three vertices. However, if we locate the fourth vertex
at the origin, (x1,y1,z1), (x2,y2,z2) and (x3,y3,z3) become the coordinates of the
three vertices.
Let’s locate a point P(xP ,yP ,zP ) inside the tetrahedron with the following
barycentric deﬁnition
P = rP1 + sP2 + tP3 + uP4
(11.14)
where P, P1, P2 and P4 are the position vectors for P , P1, P2, P3 and P4 re-
spectively. The fourth barycentric term uP4 can be omitted as P4 has coordinates
(0,0,0).
Therefore, we can state that the volume of the tetrahedron formed by the three
vectors P, P2 and P3 is given by
V = 1
6

xP
yP
zP
x2
y2
z2
x3
y3
z3

.
(11.15)
Substituting (11.14) in (11.15) we obtain
V = 1
6

rx1 + sx2 + tx3
ry1 + sy2 + ty3
rz1 + sz2 + tz3
x2
y2
z2
x3
y3
z3

(11.16)
which expands to
V = 1
6

y2z3(rx1 + sx2 + tx3) + x2y3(rz1 + sz2 + tz3) + x3z2(ry1 + sy2 + ty3)
−y3z2(rx1 +sx2 +tx3)−x3y2(rz1 +sz2 +tz3)−x2z3(ry1 +sy2 +ty3)

= 1
6

r(x1y2z3 + x2y3z1 + x3y1z2 −x1y3z2 −x3y2z1 −x2y1z3)
+s(x2y2z3 + x2y3z2 + x3y1z2 −x2y3z2 −x3y1z2 −x2y2z3)
+t(x3y2z3 + x2y3z3 + x3y3z2 −x3y3z2 −x3y2z3 −x2y3z3)

and simpliﬁes to
V = 1
6r

x1
y1
z1
x2
y2
z2
x3
y3
z3

.
This states that the volume of the smaller tetrahedron is r times the volume of the
larger tetrahedron VT , where r is the barycentric coordinate modifying the vertex
not included in the volume. By a similar process we can develop volumes for the
other tetrahedra:
V (P,P2P4,P3) = rVT
V (P,P1P3,P4) = sVT
V (P,P1P2,P4) = tVT
V (P,P1P2,P3) = uVT

228
11
Barycentric Coordinates
where r + r + t + u = 1. Similarly, the barycentric coordinates of a point inside the
volume sum to unity.
Let’s test the above statements with an example. Figure 11.24 shows a tetrahe-
dron and a point P( 1
3, 1
3, 1
3) located within its interior.
The volume of the tetrahedron VT is
VT = 1
6

0
0
1
1
0
0
0
1
0

= 1
6
r = V (P,P2,P4,P3)
VT
= 6
6

2
3
−1
3
−1
3
−1
3
−1
3
−1
3
−1
3
2
3
−1
3

= 1
3
s = V (P,P1,P3,P4)
VT
= 6
6

−1
3
−1
3
2
3
−1
3
2
3
−1
3
−1
3
−1
3
−1
3

= 1
3
t = V (P,P1,P2,P4)
VT
= 6
6

−1
3
−1
3
2
3
2
3
−1
3
−1
3
−1
3
−1
3
−1
3

= 1
3
u = V (P,P1,P2,P3)
VT
= 6
6

−1
3
−1
3
2
3
2
3
−1
3
−1
3
−1
3
2
3
−1
3

= 0.
The barycentric coordinates (r,s,t,u) conﬁrm that the point is located at the cen-
tre of triangle ΔP1P2P3. Note that the above determinants will create a negative
volume if the vector sequences are reversed.
11.10 Bézier Curves and Patches
In Chap. 9 we examined Bézier curves and surface patches which are based on
Bernstein polynomials:
Bn
i (t) =
n
i

ti(1 −t)n−i.
We discovered that these polynomials create the quadratic terms
(1 −t)2,
2t(1 −t),
t2
and the cubic terms
(1 −t)3,
3t(1 −t)2,
3t2(1 −t),
t3

11.11
Summary
229
which are used as scalars to multiply sequences of control points to create a para-
metric curve. Furthermore, these terms sum to unity, therefore they are also another
form of barycentric coordinates. The only difference between these terms and the
others described above is that they are controlled by a common parameter t. An-
other property of Bézier curves and patches is that they are constrained within the
convex hull formed by the control points, which is also a property of barycentric
coordinates.
11.11 Summary
Barycentric coordinates provide another way to locate points in space, which permit
them to be used for ratios and proportion, areas, volumes, and centres of gravity.

Chapter 12
Geometric Algebra
12.1 Introduction
This can only be a brief introduction to geometric algebra as the subject really de-
mands an entire book. Those readers who wish to pursue the subject further should
consult the author’s books: Geometric Algebra for Computer Graphics or Geomet-
ric Algebra: An Algebraic System for Computer Games and Animation.
12.2 Background
Although geometric algebra introduces some new ideas, the subject should not be
regarded as difﬁcult. If you have read and understood the previous chapters, you
should be familiar with vectors, vector products, transforms, and the idea that the
product of two transforms is sensitive to the transform sequence. For example, in
general, scaling an object after it has been translated, is not the same as translating
an object after it has been scaled. Similarly, given two vectors r and s their vector
product r × s creates a third vector t, using the right-hand rule, perpendicular to the
plane containing r and s. However, just by reversing the vectors to s × r, creates a
similar vector but in the opposite direction −t.
We regard vectors as directed lines or oriented lines, but if they exist, why
shouldn’t oriented planes and oriented volumes exist? Well the answer to this ques-
tion is that they do, which is what geometric algebra is about. Unfortunately, when
vectors were invented, geometric algebra was overlooked, and it has taken a further
century for it to emerge through the work of William Kingdon Clifford (1845–1879)
and David Hestenes. So let’s continue and discover an exciting new algebra that will,
in time, be embraced by the computer graphics community.
12.3 Symmetric and Antisymmetric Functions
It is possible to classify functions into two categories: symmetric (even) and an-
tisymmetric (odd) functions. For example, given two symmetric functions f (x)
and f (x,y):
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_12, © Springer-Verlag London 2014
231

232
12
Geometric Algebra
Fig. 12.1 The graph of the
symmetric cosine function
Fig. 12.2 The graph of the
antisymmetric sine function
f (−x) = f (x)
and
f (y,x) = f (x,y)
an example being cosx where cos(−x) = cosx. Figure 12.1 illustrates how the co-
sine function is reﬂected about the origin. However, if the functions are antisym-
metric:
f (−x) = −f (x)
and
f (y,x) = −f (x,y)
an example being sinx where sin(−x) = −sinx. Figure 12.2 illustrates how the
sine function is reﬂected about the origin.
The reason why we have covered symmetric and antisymmetric functions is that
they play an important role in geometric algebra. Now let’s continue with this intro-
duction and explore some important trigonometric foundations.

12.4
Trigonometric Foundations
233
Fig. 12.3 Two line segments
a and b separated by +θ
12.4 Trigonometric Foundations
Figure 12.3 shows two line segments a and b with coordinates (a1,a2), (b1,b2)
respectively. The lines are separated by an angle θ, and we will compute the expres-
sions ab cosθ and ab sinθ, as these play an important role in geometric algebra.
Using the trigonometric identities
sin(θ + φ) = sinθ cosφ + cosθ sinφ
(12.1)
cos(θ + φ) = cosθ cosφ −sinθ sinφ
(12.2)
and the following observations
cosφ = a1
a ,
sinφ = a2
a ,
cos(θ + φ) = b1
b ,
sin(θ + φ) = b2
b
we can rewrite (12.1) and (12.2) as
b2
b = a1
a sinθ + a2
a cosθ
(12.3)
b1
b = a1
a cosθ −a2
a sinθ.
(12.4)
To isolate cosθ we multiply (12.3) by a2 and (12.4) by a1:
a2b2
b
= a1a2
a
sinθ + a2
2
a cosθ
(12.5)
a1b1
b
= a2
1
a cosθ −a1a2
a
sinθ.
(12.6)
Adding (12.5) and (12.6) we obtain
a1b1 + a2b2
b
= a2
1 + a2
2
a
cosθ = a cosθ
therefore,
ab cosθ = a1b1 + a2b2.

234
12
Geometric Algebra
Fig. 12.4 Two line segments
a and b separated by −θ
To isolate sinθ we multiply (12.3) by a1 and (12.4) by a2
a1b2
b
= a2
1
a sinθ + a1a2
a
cosθ
(12.7)
a2b1
b
= a1a2
a
cosθ −a2
2
a sinθ.
(12.8)
Subtracting (12.8) from (12.7) we obtain
a1b2 −a2b1
b
= a2
1 + a2
2
a
sinθ = a sinθ
therefore,
ab sinθ = a1b2 −a2b1.
If we form the product of b’s projection on a with a, we get ab cosθ which
we have shown equals a1b1 + a2b2. Similarly, if we form the product ab sinθ we
compute the area of the parallelogram formed by sweeping a along b, which equals
a1b2 −a2b1. What is noteworthy, is that the product ab cosθ is independent of
the sign of the angle θ, whereas the product ab sinθ is sensitive to the sign of θ.
Consequently, if we construct the lines a and b such that b is rotated −θ relative
to a as shown in Fig. 12.4, ab cosθ = a1b1 + a2b2, but ab sinθ = −(a1b2 −a2b1).
The antisymmetric nature of the sine function reverses the sign of the area.
Having shown that area is a signed quantity just by using trigonometric identities,
let’s explore how vector algebra responds to this idea.
12.5 Vectorial Foundations
When we form the algebraic product of two 2D vectors a and b:
a = a1i + a2j
b = b1i + b2j
we obtain

12.6
Inner and Outer Products
235
ab = a1b1i2 + a2b2j2 + a1b2ij + a2b1ji
(12.9)
and it is clear that a1b1i2 + a2b2j2 has something to do with ab cosθ, and a1b2ij +
a2b1ji has something to do with ab sinθ. The product ab creates the terms i2, j2, ij
and ji, which are resolved as follows.
12.6 Inner and Outer Products
I like to believe that mathematics is a game—a game where we make the rules. Some
rules might take us nowhere; others might take us so far in a particular direction and
then restrict any further development; whilst other rules might open up a fantastic
landscape that would have remained hidden had we not stumbled upon them. There
are no “wrong” or “right” rules—there are just rules where some work better than
others. Fortunately, the rules behind geometric algebra have been tested for over a
hundred years, so we know they work. But these rules were not hiding somewhere
waiting to be discovered, they arose due to the collective intellectual endeavour of
many mathematicians over several decades.
Let’s begin with the products ij and ji in (12.9) and assume that they anticom-
mute: ji = −ij. Therefore,
ab = a1b1i2 + a2b2j2 + (a1b2 −a2b1)ij
(12.10)
and if we reverse the product to ba we obtain
ba = a1b1i2 + a2b2j2 −(a1b2 −a2b1)ij.
(12.11)
From (12.10) and (12.11) we see that the product of two vectors contains a symmet-
ric component
a1b1i2 + a2b2j2
and an antisymmetric component
(a1b2 −a2b1)ij.
It is interesting to observe that the symmetric component has 0◦between its vector
pairs (i2 or j2), whereas the antisymmetric component has 90◦between its vec-
tor pairs (i and j). Therefore, the sine and cosine functions play a natural role in
our rules. What we are looking for are two functions that, when given our vec-
tors a and b, one function returns the symmetric component and the other returns
the antisymmetric component. We call these the inner and outer functions respec-
tively.
It should be clear that if the inner function includes the cosine of the angle be-
tween the two vectors it will reject the antisymmetric component and return the
symmetric element. Similarly, if the outer function includes the sine of the angle
between the vectors, the symmetric component is rejected, and returns the antisym-
metric element.

236
12
Geometric Algebra
If we declare the inner function as the inner product
a • b = |a||b|cosθ
(12.12)
then
a • b = (a1i + a2j) • (b1i + b2j)
= a1b1i • i + a1b2i • j + a2b1j • i + a2b2j • j
= a1b1 + a2b2
which is perfect!
Next, we declare the outer function as the outer product using the wedge “∧”
symbol; which is why it is also called the wedge product:
a ∧b = |a||b|sinθi ∧j.
(12.13)
Note that product includes a strange i ∧j term. This is included as we just can’t
ignore the ij term in the antisymmetric component:
a ∧b = (a1i + a2j) ∧(b1i + b2j)
= a1b1i ∧i + a1b2i ∧j + a2b1j ∧i + a2b2j ∧j
= (a1b2 −a2b1)i ∧j
which enables us to write
ab = a • b + a ∧b
(12.14)
ab = |a||b|cosθ + |a||b|sinθi ∧j.
(12.15)
12.7 The Geometric Product in 2D
Clifford named the sum of the two products the geometric product, which means that
(12.14) reads: The geometric product ab is the sum of the inner product “a mdot b”
and the outer product “a wedge b”. Remember that all this assumes that ji = −ij
which seems a reasonable assumption.
Given the deﬁnition of the geometric product, let’s evaluate i2
ii = i • i + i ∧i.
Using the deﬁnition for the inner product (12.12) we have
i • i = 1 × 1 × cos0◦= 1
whereas, using the deﬁnition of the outer product (12.13) we have
i ∧i = 1 × 1 × sin0◦i ∧i = 0.

12.7
The Geometric Product in 2D
237
Fig. 12.5 An anticlockwise
and clockwise bivector
Thus i2 = 1 and j2 = 1, and aa = |a|2:
aa = a • a + a ∧a
= |a||a|cos0◦+ |a||a|sin0◦i ∧j
aa = |a|2.
Now let’s evaluate ij:
ij = i • j + i ∧j.
Using the deﬁnition for the inner product (12.12) we have
i • j = 1 × 1 × cos90◦= 0
whereas using the deﬁnition of the outer product (12.13) we have
i ∧j = 1 × 1 × sin90◦i ∧j = i ∧j.
Thus ij = i ∧j. But what is i ∧j? Well, it is a new object and is called a “bivector”
and deﬁnes the orientation of the plane containing i and j.
As the order of the vectors is from i to j, the angle is +90◦and sin(+90)◦= 1.
Whereas, if the order is from j to i the angle is −90◦and sin(−90◦) = −1. Conse-
quently,
ji = j • i + j ∧i
= 0 + 1 × 1 × sin

−90◦
i ∧j
ji = −i ∧j.
A useful way of visualising the bivector i ∧j is to imagine moving along the
vector i and then along the vector j, which creates an anticlockwise rotation. Con-
versely, for the bivector j∧i, imagine moving along the vector j followed by vector i,
which creates a clockwise rotation. Another useful picture is to sweep vector j along
vector i to create an anticlockwise rotation, and vice versa for j ∧i. These ideas are
shown in Fig. 12.5.
So far, so good. Our rules seem to be leading somewhere. The inner product
(12.12) is our old friend the dot product, and does not need explaining. However,
the outer product (12.13) does require some further explanation.

238
12
Geometric Algebra
The equation
ab = 9 + 12i ∧j
simply means that the geometric product of two vectors a and b creates a scalar,
inner product of 9, and an outer product of 12 on the ij-plane.
Example 12.1 For example, let
a = 3i
b = 3i + 4j
then
ab = 3i • (3i + 4j) + 3i ∧(3i + 4j)
= 9 + 9i ∧i + 12i ∧j
ab = 9 + 12i ∧j.
The 9 represents |a||b|cosθ, whereas the 12 represents an area |a||b|sinθ on the
ij-plane. The angle between the two vectors θ is given by
θ = cos−1(3/5).
However, reversing the product, we obtain
ba = (3i + 4j) • 3i + (3i + 4j) ∧3i
= 9 + 9i ∧i + 12j ∧i
ab = 9 −12i ∧j.
The sign of the outer (wedge) product has ﬂipped to reﬂect the new orientation of
the vectors relative to the accepted orientation of the basis bivectors.
So the geometric product combines the scalar and wedge products into a sin-
gle product, where the scalar product is the symmetric component and the wedge
product is the antisymmetric component. Now let’s see how these products behave
in 3D.
12.8 The Geometric Product in 3D
Before we consider the geometric product in 3D we need to introduce some new
notation, which will simplify future algebraic expressions. Rather than use i, j and k
to represent the unit basis vectors let’s employ e1, e2 and e3 respectively. This means
that (12.15) can be written
ab = |a||b|cosθ + |a||b|sinθe1 ∧e2.

12.8
The Geometric Product in 3D
239
Fig. 12.6 The 3D bivectors
We begin with two 3D vectors:
a = a1e1 + a2e2 + a3e3
b = b1e1 + b2e2 + b3e3
therefore, their inner product is
a • b = (a1e1 + a2e2 + a3e3) • (b1e1 + b2e2 + b3e3)
= a1b1 + a2b2 + a3b3
and their outer product is
a ∧b = (a1e1 + a2e2 + a3e3) ∧(b1e1 + b2e2 + b3e3)
= a1b2e1 ∧e2 + a1b3e1 ∧e3 + a2b1e2 ∧e1 + a2b3e2 ∧e3
+ a3b1e3 ∧e1 + a3b2e3 ∧e2
a ∧b = (a1b2 −a2b1)e1 ∧e2 + (a2b3 −a3b2)e2 ∧e3 + (a3b1 −a1b3)e3 ∧e1.
(12.16)
This time we have three unit basis bivectors: e1 ∧e2, e2 ∧e3, e3 ∧e1, and three asso-
ciated scalar multipliers: (a1b2 −a2b1), (a2b3 −a3b2), (a3b1 −a1b3) respectively.
Continuing with the idea described in the previous section, the three bivectors
represent the three planes containing the respective vectors as shown in Fig. 12.6,
and the scalar multipliers are projections of the area of the vector parallelogram
onto the three bivectors as shown in Fig. 12.7. The orientation of the vectors a and
b determine whether the projected areas are positive or negative.
You may think that (12.16) looks familiar. In fact, it looks very similar to the
cross product a × b:
a × b = (a1b2 −a2b1)e3 + (a2b3 −a3b2)e1 + (a3b1 −a1b3)e2.
(12.17)
This similarity is no accident. For when Hamilton invented quaternions, he did not
recognise the possibility of bivectors, and invented some rules, which eventually

240
12
Geometric Algebra
Fig. 12.7 The projections on
the three bivectors
became the cross product! Later in this chapter we discover that quaternions are
really bivectors in disguise.
We can see that a simple relationship exists between (12.16) and (12.17):
e1∧e2
and
e3
e2∧e3
and
e1
e3∧e1
and
e2
the wedge product bivectors are perpendicular to the vector components of the cross
product. So the wedge product is just another way of representing the cross product.
However, the wedge product introduces a very important bonus: it works in space of
any dimension, whereas, the cross product is only comfortable in 3D. Not only that,
the wedge (outer product) is a product that creates volumes, hypervolumes, and can
also be applied to vectors, bivectors, trivectors, etc.
12.9 The Outer Product of Three 3D Vectors
Having seen that the outer product of two 3D vectors is represented by areal pro-
jections onto the three basis bivectors, let’s explore the outer product of three 3D
vectors.
Given
a = a1e1 + a2e2 + a3e3
b = b1e1 + b2e2 + b3e3
c = c1e1 + c2e2 + c3e3
then
a ∧b ∧c = (a1e1 + a2e2 + a3e3) ∧(b1e1 + b2e2 + b3e3) ∧(c1e1 + c2e2 + c3e3)
=

(a1b2 −a2b1)e1 ∧e2 + (a2b3 −a3b2)e2 ∧e3 + (a3b1 −a1b3)e3 ∧e1

∧(c1e1 + c2e2 + c3e3).

12.10
Axioms
241
At this stage we introduce another axiom: the outer product is associative. This
means that a ∧(b ∧c) = (a ∧b) ∧c. Therefore, knowing that a ∧a = 0:
a ∧b ∧c = c3(a1b2 −a2b1)e1 ∧e2 ∧e3 + c1(a2b3 −a3b2)e2 ∧e3 ∧e1
+ c2(a3b1 −a1b3)e3 ∧e1 ∧e2.
But we are left with the products e1 ∧e2 ∧e3, e2 ∧e3 ∧e1 and e3 ∧e1 ∧e2. Not to
worry, because we know that a ∧b = −b ∧a. Therefore,
e2 ∧e3 ∧e1 = −e2 ∧e1 ∧e3 = e1 ∧e2 ∧e3
and
e3 ∧e1 ∧e2 = −e1 ∧e3 ∧e2 = e1 ∧e2 ∧e3.
Therefore, we can write a ∧b ∧c as
a ∧b ∧c = c3(a1b2 −a2b1)e1 ∧e2 ∧e3 + c1(a2b3 −a3b2)e1 ∧e2 ∧e3
+ c2(a3b1 −a1b3)e1 ∧e2 ∧e3
or
a ∧b ∧c =

c3(a1b2 −a2b1) + c1(a2b3 −a3b2) + c2(a3b1 −a1b3)

e1 ∧e2 ∧e3
or using a determinant:
a ∧b ∧c =

a1
b1
c1
a2
b2
c2
a3
b3
c3

e1 ∧e2 ∧e3
which is the well-known expression for the volume of a parallelpiped formed by
three vectors.
The term e1 ∧e2 ∧e3 is a trivector and conﬁrms that the volume is oriented. If
the sign of the determinant is positive, the original three vectors possess the same
orientation of the three basis vectors. If the sign of the determinant is negative, the
three vectors possess an orientation opposing that of the three basis vectors.
12.10 Axioms
One of the features of geometric algebra is that it behaves very similar to the every-
day algebra of scalars:
Axiom 1 The associative rule:
a(bc) = (ab)c.

242
12
Geometric Algebra
Axiom 2 The left and right distributive rules:
a(b + c) = ab + ac
(b + c)a = ba + ca.
The next four axioms describe how vectors interact with a scalar λ:
Axiom 3
(λa)b = λ(ab) = λab.
Axiom 4
λ(φa) = (λφ)a.
Axiom 5
λ(a + b) = λa + λb.
Axiom 6
(λ + φ)a = λa + φa.
The next axiom that is adopted is
Axiom 7
a2 = |a|2
which has already emerged as a consequence of the algebra. However, for non-
Euclidean geometries, this can be set to a2 = −|a|2, which does not concern us
here.
12.11 Notation
Having abandoned i, j, k for e1, e2, e3, it is convenient to convert geometric products
e1e2 ...en to e12...n. For example, e1e2e3 ≡e123. Furthermore, we must get used to
the following substitutions:
eieiej = ej
e21 = −e12
e312 = e123
e112 = e2
e121 = −e2.

12.12
Grades, Pseudoscalars and Multivectors
243
12.12 Grades, Pseudoscalars and Multivectors
As geometric algebra embraces such a wide range of objects, it is convenient to
grade them as follows: scalars are grade 0, vectors are grade 1, bivectors are grade 2,
and trivectors are grade 3, and so on for higher dimensions. In such a graded algebra
it is traditional to call the highest grade element a pseudoscalar. Thus in 2D the
pseudoscalar is e12 and in 3D the pseudoscalar is e123. One very powerful feature
of geometric algebra is the idea of a multivector, which is a linear combination
of a scalar, vector, bivector, trivector or any other higher dimensional object. For
example the following are multivectors:
A = 3 + (2e1 + 3e2 + 4e3) + (5e12 + 6e23 + 7e31) + 8e123
B = 2 + (2e1 + 2e2 + 3e3) + (4e12 + 5e23 + 6e31) + 7e123
and we can form their sum:
A + B = 5 + (4e1 + 5e2 + 7e3) + (9e12 + 11e23 + 13e31) + 15e123
or their difference:
A −B = 1 + (e2 + e3) + (e12 + e23 + e31) + e123.
We can even form their product AB, but at the moment we have not explored the
products between all these elements.
We can isolate any grade of a multivector using the following notation:
⟨multivector⟩g
where g identiﬁes a particular grade. For example, say we have the following mul-
tivector:
2 + 3e1 + 2e2 −5e12 + 6e123
we extract the scalar term using:
⟨2 + 3e1 + 2e2 −5e12 + 6e123⟩0 = 2
the vector term using
⟨2 + 3e1 + 2e2 −5e12 + 6e123⟩1 = 3e1 + 2e2
the bivector term using:
⟨2 + 3e1 + 2e2 −5e12 + 6e123⟩2 = −5e12
and the trivector term using:
⟨2 + 3e1 + 2e2 −5e12 + 6e123⟩3 = 6e123.

244
12
Geometric Algebra
It is also worth pointing out that the inner vector product converts two grade 1
elements, i.e. vectors, into a grade 0 element, i.e. a scalar, whereas the outer vector
product converts two grade 1 elements into a grade 2 element, i.e. a bivector. Thus
the inner product is a grade lowering operation, while the outer product is a grade
raising operation. These qualities of the inner and outer products are associated
with higher grade elements in the algebra. This is why the scalar product is renamed
as the inner product, because the scalar product is synonymous with transforming
vectors into scalars. Whereas, the inner product transforms two elements of grade n
into a grade n −1 element.
12.13 Redeﬁning the Inner and Outer Products
As the geometric product is deﬁned in terms of the inner and outer products, it
seems only natural to expect that similar functions exist relating the inner and outer
products in terms of the geometric product. Such functions do exist and emerge
when we combine the following two equations:
ab = a • b + a ∧b
(12.18)
ba = a • b −a ∧b.
(12.19)
Adding and subtracting (12.18) and (12.19) we have
a • b = 1
2(ab + ba)
(12.20)
a ∧b = 1
2(ab −ba).
(12.21)
Equations (12.20) and (12.21) and used frequently to deﬁne the products between
different grade elements.
12.14 The Inverse of a Vector
In traditional vector analysis we accept that it is impossible to divide by a vector, but
that is not so in geometric algebra. In fact, we don’t actually divide a multivector by
another vector but ﬁnd a way of representing the inverse of a vector. For example,
we know that a unit vector ˆa is deﬁned as
ˆa = a
|a|
and using the geometric product
ˆa2 = a2
|a|2 = 1

12.14
The Inverse of a Vector
245
therefore,
b = a2b
|a|2
and exploiting the associative nature of the geometric product we have
b = a(ab)
|a|2 .
(12.22)
Equation (12.22) is effectively stating that, given the geometric product ab we can
recover the vector b by pre-multiplying by a−1:
a
|a|2 .
Similarly, we can recover the vector a by post-multiplying by b−1:
a = (ab)b
|b|2 .
For example, given two vectors
a = e1 + 2e2
b = 3e1 + 2e2
their geometric product is
ab = 7 −4e12.
Therefore, given ab and a, we can recover b as follows:
b = e1 + 2e2
5
(7 −4e12)
= 1
5(7e1 −4e112 + 14e2 −8e212)
= 1
5(7e1 −4e2 + 14e2 + 8e1)
b = 3e1 + 2e2.
Similarly, give ab and b, a is recovered as follows:
a = (7 −4e12)3e1 + 2e2
13
= 1
13(21e1 + 14e2 −12e121 −8e122)
= 1
13(21e1 + 14e2 + 12e2 −8e1)
a = e1 + 2e2.

246
12
Geometric Algebra
Note that the inverse of a unit vector is the original vector:
ˆa−1 =
ˆa
|ˆa|2 = ˆa.
12.15 The Imaginary Properties of the Outer Product
So far we know that the outer product of two vectors is represented by one or more
unit basis vectors, such as
a ∧b = λ1e12 + λ2e23 + λ3e31
where, in this case, the λi terms represent areas projected onto their respective unit
basis bivectors. But what has not emerged is that the outer product is an imaginary
quantity, which is revealed by expanding e2
12:
e2
12 = e1212
but as
e21 = −e12
then
e1(21)2 = −e1(12)2
= −e2
1e2
2
e2
12 = −1.
Consequently, the geometric product effectively creates a complex number! Thus in
a 2D scenario, given two vectors
a = a1e1 + a2e2
b = b1e1 + b2e2
their geometric product is
ab = (a1b1 + a2b2) + (a1b2 −a2b1)e12
and knowing that e12 = i, then we can write ab as
ab = (a1b1 + a2b2) + (a1b2 −a2b1)i.
(12.23)
However, this notation is not generally adopted by the geometric community. The
reason being that i is normally only associated with a scalar, with which it com-
mutes. Whereas in 2D, e12 is associated with scalars and vectors, and although

12.15
The Imaginary Properties of the Outer Product
247
Fig. 12.8 The effect of
multiplying a vector by a
bivector
scalars present no problem, under some conditions, it anticommutes with vectors.
Consequently, an upper-case I is used so that there is no confusion between the two
elements. Thus (12.23) is written as
ab = (a1b1 + a2b2) + (a1b2 −a2b1)I
where
I 2 = −1.
It goes without saying that the 3D unit basis bivectors are also imaginary quantities,
so is e123.
Multiplying a complex number by i rotates it 90◦on the complex plane. There-
fore, it should be no surprise that multiplying a 2D vector by e12 rotates it by 90◦.
However, because vectors are sensitive to their product partners, we must remember
that pre-multiplying a vector by e12 rotates a vector clockwise and post-multiplying
rotates a vector anti-clockwise.
Whilst on the subject of rotations, let’s consider what happens in 3D. We begin
with a 3D vector
a = a1e1 + a2e2 + a3e3
and the unit basis bivector e12 as shown in Fig. 12.8. Next we construct their geo-
metric product
e12a = a1e12e1 + a2e12e2 + a3e12e3
which becomes
e12a = a1e121 + a2e122 + a3e123
= −a1e2 + a2e1 + a3e123
= a2e1 −a1e2 + a3e123
and contains two parts: a vector (a2e1 −a1e2) and a volume a3e123.

248
12
Geometric Algebra
Figure 12.8 shows how the projection of vector a is rotated anticlockwise on the
bivector e12. A volume is also created perpendicular to the bivector. This enables us
to predict that if the vector is coplanar with the bivector, the entire vector is rotated
90◦and the volume component will be zero.
By post-multiplying a by e12 creates
ae12 = −a2e1 + a1e2 + a3e123
which shows that while the volumetric element has remained the same, the projected
vector is rotated anticlockwise.
You may wish to show that the same happens with the other two bivectors.
12.16 Duality
The ability to exchange pairs of geometric elements such as lines and planes in-
volves a dual operation, which in geometric algebra is relatively easy to deﬁne. For
example, given a multivector A its dual A∗is deﬁned as
A∗= IA
where I is the local pseudoscalar. For 2D this is e12 and for 3D it is e123. Therefore,
given a 2D vector
a = a1e1 + a2e2
its dual is
a∗= e12(a1e1 + a2e2
= a1e121 + a2e122
= a2e1 −a1e2
which is another vector rotated 90◦anticlockwise.
It is easy to show that (a∗)∗= −a, and two further dual operations return the
vector back to a.
In 3D the dual of a vector e1 is
e123e1 = e1231 = e23
which is the perpendicular bivector. Similarly, the dual of e2 is e31 and the dual of
e3 is e12.
For a general vector a1e1 + a2e2 + a3e3 its dual is
e123(a1e1 + a2e2 + a3e3) = a1e1231 + a2e1232 + a3e1233
= a3e12 + a1e23 + a2e31.

12.17
The Relationship Between the Vector Product and the Outer Product
249
The duals of the 3D basis bivectors are:
e123e12 = e12312 = −e3
e123e23 = e12323 = −e1
e123e31 = e12331 = −e2.
12.17 The Relationship Between the Vector Product
and the Outer Product
We have already discovered that there is a very close relationship between the vector
product and the outer product, and just to recap: Given two vectors
a = a1e1 + a2e2 + a3e3
b = b1e1 + b2e2 + b3e3
then
a × b = (a2b3 −a3b2)e1 + (a3b1 −a1b3)e2 + (a1b2 −a2b1)e3
(12.24)
and
a ∧b = (a2b3 −a3b2)e2 ∧e3 + (a3b1 −a1b3)e3 ∧e1 + (a1b2 −a2b1)e1 ∧e2
or
a ∧b = (a2b3 −a3b2)e23 + (a3b1 −a1b3)e31 + (a1b2 −a2b1)e12.
(12.25)
If we multiply (12.25) by I123 we obtain
I123(a ∧b) = (a2b3 −a3b2)e123e23 +(a3b1 −a1b3)e123e31 +(a1b2 −a2b1)e123e12
= −(a2b3 −a3b2)e1 −(a3b1 −a1b3)e2 −(a1b2 −a2b1)e3
which is identical to the cross product (12.24) apart from its sign. Therefore, we can
state:
a × b = −I123(a ∧b).
12.18 The Relationship between Quaternions and Bivectors
Hamilton’s rules for the imaginaries i, j and k are shown in Table 12.1, whilst
Table 12.2 shows the rules for 3D bivector products.
Although there is some agreement between the table entries, there is a sign re-
versal in some of them. However, if we switch to a left-handed axial system the
bivectors become e32, e13, e21 and their products are as shown in Table 12.3.

250
12
Geometric Algebra
Table 12.1 Hamilton’s
quaternion product rules
i
j
k
i
−1
k
−j
j
−k
−1
i
k
j
−i
−1
Table 12.2 3D bivector
product rules
e23
e31
e12
e23
−1
−e12
e31
e31
e12
−1
−e23
e12
−e31
e23
−1
Table 12.3 Left-handed 3D
bivector product rules
e32
e13
e21
e32
−1
e21
−e13
e13
−e21
−1
e32
e21
e13
−e32
−1
If we now create a one-to-one correspondence (isomorphism) between the two
systems:
i ↔e32
j ↔e13
k ↔e21
there is a true correspondence between quaternions and a left-handed set of bivec-
tors.
12.19 Reﬂections and Rotations
One of geometric algebra’s strengths is the elegance it brings to calculating reﬂec-
tions and rotations. Unfortunately, there is insufﬁcient space to examine the deriva-
tions of the formulae, but if you are interested, these can be found in the author’s
books. Let’s start with 2D reﬂections.
12.19.1 2D Reﬂections
Given a line, whose perpendicular unit vector is ˆm and a vector a its reﬂection a′ is
given by
a′ = ˆma ˆm

12.19
Reﬂections and Rotations
251
Fig. 12.9 The reﬂection of a
2D vector
which is rather elegant! For example, Fig. 12.9 shows a scenario where
ˆm = 1
√
2
(e1 + e2)
a = e1
therefore,
a′ = 1
√
2
(e1 + e2)(e1) 1
√
2
(e1 + e2)
= 1
2(1 −e12)(e1 + e2)
= 1
2(e1 + e2 + e2 −e1)
a′ = e2.
Note that in this scenario a reﬂection means a mirror image about the perpendic-
ular vector.
12.19.2 3D Reﬂections
Let’s explore the 3D scenario shown in Fig. 12.10 where
a = e1 + e2 −e3
ˆm = e2
therefore,
a′ = e2(e1 + e2 −e3)e2
= e212 + e222 −e232
= −e1 + e2 + e3.

252
12
Geometric Algebra
Fig. 12.10 The reﬂection of
a 3D vector
Fig. 12.11 Rotating a point
by a double reﬂection
As one might expect, it is also possible to reﬂect bivectors, trivectors and higher-
dimensional objects, and for reasons of brevity, they are summarised as follows:
Reﬂecting about a line:
scalars
invariant
vectors
v′ = ˆmv ˆm
bivectors
B′ = ˆmB ˆm
trivectors
T′ = ˆmT ˆm.
Reﬂecting about a mirror:
scalars
invariant
vectors
v′ = −ˆmv ˆm
bivectors
B′ = ˆmB ˆm
trivectors
T′ = −ˆmT ˆm.
12.19.3 2D Rotations
Figure 12.11 shows a plan view of two mirrors M and N separated by an angle θ.
The point P is in front of mirror M and subtends an angle α, and its reﬂection PR
exists in the virtual space behind M and also subtends an angle α with the mirror.

12.19
Reﬂections and Rotations
253
Fig. 12.12 Rotating a point
by a double reﬂection
The angle between PR and N must be θ −α, and its reﬂection P ′ must also lie θ −α
behind N. By inspection, the angle between P and the double reﬂection P ′ is 2θ.
If we apply this double reﬂection transform to a collection of points, they are
effectively all rotated 2θ about the origin where the mirrors intersect. The only slight
drawback with this technique is that the angle of rotation is twice the angle between
the mirrors.
Instead of using points, let’s employ position vectors and substitute normal unit
vectors for the mirrors’ orientation. For example, Fig. 12.12 shows the same mirrors
with unit normal vectors ˆm and ˆn. After two successive reﬂections, P becomes P ′,
and using the relationship:
v′ = −ˆmv ˆm
we compute the reﬂections as follows:
pR = −ˆmp ˆm
p′ = −ˆnpR ˆn
p′ = ˆn ˆmp ˆmˆn
which is also rather elegant and compact. However, we must remember that P is
rotated twice the angle separating the mirrors, and the rotation is relative to the
origin. Let’s demonstrate this technique with an example.
Figure 12.13 shows two mirrors M and N with unit normal vectors ˆm, ˆn and
position vector p:
ˆm = e2
ˆn = −e1
p = e1 −e2.
As the mirrors are separated by 90◦the point P is rotated 180◦:
p′ = ˆn ˆmp ˆmˆn
= −e1e2(e1 −e2)e2(−e1)
= e12121 −e12221
= −e1 + e2.

254
12
Geometric Algebra
Fig. 12.13 Rotating a point
by 180◦
12.20 Rotors
Quaternions are the natural choice for rotating vectors about an arbitrary axis, and
although it my not be immediately obvious, we have already started to discover
geometric algebra’s equivalent.
We begin with
p′ = ˆn ˆmp ˆmˆn
and substitute R for ˆn ˆm and ˜R for ˆmˆn, therefore,
p′ = Rp ˜R
where R and ˜R are called rotors which perform the same function as a quaternion.
Because geometric algebra is non-commutative, the sequence of elements, be
they vectors, bivectors, trivectors, etc. is very important. Consequently, it is very
useful to include a command that reverses a sequence of elements. The notation
generally employed is the tilde (˜) symbol:
R = ˆn ˆm
˜R = ˆmˆn.
Let’s unpack a rotor in terms of its angle and bivector as follows:
The bivector deﬁning the plane is ˆm ∧ˆn and θ is the angle between the vectors.
Let
R = ˆn ˆm
˜R = ˆmˆn
where
ˆn ˆm = ˆn • ˆm −ˆm ∧ˆn
ˆmˆn = ˆn • ˆm + ˆm ∧ˆn
ˆn • ˆm = cosθ
ˆm ∧ˆn = ˆBsinθ.

12.20
Rotors
255
Fig. 12.14 Rotating a vector
by 90◦
Therefore,
R = cosθ −ˆBsinθ
˜R = cosθ + ˆBsinθ.
We now have an equation that rotates a vector p through an angle 2θ about an axis
deﬁned by ˆB:
p′ = Rp ˆR
or
p′ = (cosθ −ˆBsinθ)p(cosθ + ˆBsinθ).
We can also express this such that it identiﬁes the real angle of rotation α:
p′ =

cos(α/2) −ˆBsin(α/2)

p

cos(α/2) + ˆBsin(α/2)

.
(12.26)
Equation (12.26) references a bivector, which may make you feel uncomfortable!
But remember, it simply identiﬁes the axis perpendicular to its plane. Let’s demon-
strate how (12.26) works with two examples.
Example 12.2 Figure 12.14 shows a scenario where vector p is rotated 90◦about
e2 which is perpendicular to ˆB, where
α = 90◦
a = e2
p = e1 + e2
ˆB = e31.
Therefore,
p′ =

cos45◦−e31 sin45◦
(e1 + e2)

cos45◦+ e31 sin45◦

256
12
Geometric Algebra
Fig. 12.15 Rotating a vector
by 120◦
=
√
2
2 −
√
2
2 e31

(e1 + e2)
√
2
2 +
√
2
2 e31

=
√
2
2 e1 +
√
2
2 e2 −
√
2
2 e3 −
√
2
2 e312
√
2
2 +
√
2
2 e31

= 1
2(e1 −e3 + e2 + e231 −e3 −e1 −e312 −e31231)
p′ = e2 −e3.
Observe what happens when the bivector’s sign is reversed to −e31:
p′ =

cos45◦+ e31 sin45◦
(e1 + e2)

cos45◦−e31 sin45◦
=
√
2
2 +
√
2
2 e31

(e1 + e2)
√
2
2 −
√
2
2 e31

=
√
2
2 e1 +
√
2
2 e2 +
√
2
2 e3 +
√
2
2 e312
√
2
2 −
√
2
2 e31

= 1
2(e1 + e3 + e2 + e231 + e3 −e1 + e312 −e31231)
p′ = e2 + e3
the rotation is clockwise about e2.
Example 12.3 Figure 12.15 shows a scenario where vector p is rotated 120◦about
the bivector B, where
m = e1 −e3
n = e2 −e3
α = 120◦
p = e2 + e3

12.21
Applied Geometric Algebra
257
B = m ∧n
= (e1 −e3) ∧(e2 −e3)
B = e12 + e31 + e23.
Next, we normalise B to ˆB:
ˆB = 1
√
3
(e12 + e23 + e31)
therefore,
p′ =

cos60◦−ˆBsin60◦
p

cos60◦+ ˆBsin60◦
=
1
2 −1
√
3
(e12 + e23 + e31)
√
3
2

(e2 + e3)
1
2 + 1
√
3
(e12 + e23 + e31)
√
3
2

=
1
2 −e12
2 −e23
2 −e31
2

(e2 + e3)
1
2 + e12
2 + e23
2 + e31
2

= 1
4(e2 + e3 −e1 −e123 + e3 −e2 −e312 + e1)(1 + e12 + e23 + e31)
= 1
2(e3 −e123)(1 + e12 + e23 + e31)
= 1
2(e3 + e312 −e2 + e1 −e123 −e12312 −e12323 −e12331)
= 1
2(e3 −e2 + e1 + e3 + e1 + e2)
p′ = e1 + e3.
These examples show that rotors behave just like quaternions. Rotors not only rotate
vectors, but they can be used to rotate bivectors, and even trivectors, although, as one
might expect, a rotated trivector remains unaltered in 3D.
12.21 Applied Geometric Algebra
This has been a very brief introduction to geometric algebra, and it has been impos-
sible to cover all the algebra’s features. However, if you have understood the above
topics, you will have understood some of the fundamental ideas behind the algebra.
Let’s now consider some practical applications for geometric algebra.
Example 12.4
The sine rule states that for any triangle △ABC with angles α, β
and χ, and respective opposite sides a, b and c, then
a
sinα =
b
sinβ =
c
sinχ .

258
12
Geometric Algebra
Fig. 12.16 The sine rule
This rule can be proved using the outer product of two vectors, which we know
incorporates the sine of the angle between two vectors:
|a ∧b| = |a||b|sinα.
With reference to Fig. 12.16, we can state the triangle’s area as
area of △ABC = 1
2| −c ∧a| = 1
2|c||a|sinβ
area of △BCA = 1
2| −a ∧b| = 1
2|a||b|sinχ
area of △CAB = 1
2| −b ∧c| = 1
2|b||c|sinα
which means that
|c||a|sinβ = |a||b|sinχ = |b||c|sinα
|a|
sinα = |b|
sinβ =
|c|
sinχ .
Example 12.5
The cosine rule states that for any triangle △ABC with sides a, b
and c, then
a2 = b2 + c2 −2bc cosα
where α is the angle between b and c.
Although this is an easy rule to prove using simple trigonometry, the geometric
algebra solution is even easier.
Figure 12.17 shows a triangle △ABC constructed from vectors a, b and c. From
Fig. 12.17
a = b −c.
(12.27)
Squaring (12.27) we obtain
a2 = b2 + c2 −(bc + cb).
But
bc + cb = 2b • c = 2|b||c|cosα

12.21
Applied Geometric Algebra
259
Fig. 12.17 The cosine rule
Fig. 12.18 A point P
perpendicular to a point T on
a line
therefore,
|a|2 = |b|2 + |c|2 −2|b||c|cosα.
Example 12.6 Figure 12.18 shows a scenario where a line with direction vector ˆv
passes through a point T . The objective is to locate another point P perpendicular
to ˆv and a distance δ from T . The solution is found by post-multiplying ˆv by the
pseudoscalar e12, which rotates ˆv through an angle of 90◦.
As ˆv is a unit vector
−→
T P = δˆve12
therefore,
p = t + −→
T P
and
p = t + δˆve12.
(12.28)
For example, Fig. 12.19 shows a 2D scenario where
ˆv = 1
√
2
(e1 + e2)
T = (4,1)
t = 4e1 + e2
δ =
√
32.

260
12
Geometric Algebra
Fig. 12.19 A point P
perpendicular to a point T on
a line
Fig. 12.20 Reﬂecting
a vector about a vector
Using (12.28)
p = t + δˆve12
= 4e1 + e2 +
√
32 1
√
2
(e1 + e2)e12
= 4e1 + e2 + 4e2 −4e1
p = 5e2
and
P = (0,5).
If p is required on the other side of the line, we pre-multiply ˆv by e12:
p = t + δe12ˆv
which is the same as reversing the sign of δ.
Example 12.7 Reﬂecting a vector about another vector happens to be a rather easy
problem for geometric algebra. Figure 12.20 shows the scenario where we see a
vector a reﬂected about the normal to a line with direction vector ˆv.

12.21
Applied Geometric Algebra
261
Fig. 12.21 Reﬂecting
a vector about a vector
We begin by calculating ˆm:
ˆm = ˆve12
(12.29)
then reﬂecting a about ˆm:
a′ = ˆma ˆm
substituting ˆm we have
a′ = ˆve12aˆve12.
(12.30)
As an illustration, consider the scenario shown in Fig. 12.21 where
ˆv = 1
√
2
(e1 + e2)
a = −e1.
Therefore, using (12.29)
ˆm = 1
√
2
(e1 + e2)e12
ˆm = 1
√
2
(e2 −e1)
and using (12.30)
a′ = 1
√
2
(e2 −e1)(−e1) 1
√
2
(e2 −e1)
= 1
2(e12 + 1)(e2 −e1)
= 1
2(e1 + e2 + e2 −e1)
a′ = e2.

262
12
Geometric Algebra
Fig. 12.22 Point relative to
a bivector
Fig. 12.23 Three points
relative to a bivector
Example 12.8 In computer graphics we often need to test whether a point is above,
below or on a planar surface. If we already have the plane equation for the surface
it is just a question of substituting the test point in the equation and investigating its
signed value. But here is another way. For example, if a bivector is used to represent
the orientation of a plane, the outer product of the test point’s position vector with
the bivector computes an oriented volume. Figure 12.22 shows a bivector a ∧b and
a test point P with position vector p relative to the bivector.
Let
a ∧b ∧p is +ve, then P is “above” the bivector
a ∧b ∧p is −ve, then P is “below” the bivector
a ∧b ∧p is zero, then P is coplanar with the bivector.
The terms “above” and “below” mean in the bivector’s positive and negative half-
space respectively. As an example, consider the scenario shown in Fig. 12.23 where
the plane’s orientation is represented by the bivector a ∧b, and three test points P ,
Q and R.
If P = (0,1,0), Q = (0,−1,0), R = (1,0,0),
a = e1 + e3
b = e1
then
p = e2
q = −e2
r = e1

12.22
Summary
263
and
a ∧b ∧p = (e1 + e3) ∧e1 ∧e2
= e123
a ∧b ∧q = (e1 + e3) ∧e1 ∧(−e2)
= −e123
a ∧b ∧r = (e1 + e3) ∧e1 ∧e1
= 0.
We can see that the signs of the ﬁrst two volumes show that P is in the positive
half-space, Q is in the negative half-space, and R is on the plane.
12.22 Summary
Geometric algebra is a new and exciting subject and is destined to impact upon
the way we solve problems in computer games and animation. Hopefully, you have
found this chapter interesting, and if you are tempted to take the subject further, then
look at the author’s books.

Chapter 13
Calculus: Derivatives
13.1 Introduction
Calculus is a very large subject, and calculus books have a reputation for being
heavy. Therefore, to minimise this book’s weight, and provide a gentle introduction
to the subject, I have selected speciﬁc topics from my book Calculus for Computer
Graphics, and condensed them into two chapters.
One branch of calculus is concerned with a function’s derivative, which describes
how fast a function changes relative to its independent variable. In this chapter, I
show how limits are used in this process. We begin with some historical background,
and then look at small numerical quantities, and how they can be ignored if they
occur in certain products, but remain important in quotients.
13.2 Background
Over a period of 350 years or more, calculus has evolved conceptually and in nota-
tion. Up until recently, calculus was described using inﬁnitesimals, which are num-
bers so small, they can be ignored in certain products. However, it was the French
mathematician Augustin-Louis Cauchy (1789–1857), and the German mathemati-
cian Karl Weierstrass (1815–1897), who showed how limits can replace inﬁnitesi-
mals.
13.3 Small Numerical Quantities
The adjective small is a relative term, and requires clariﬁcation in the context of
numbers. For example, if numbers are in the hundreds, and also contain some deci-
mal component, then it seems reasonable to ignore digits after the 3rd decimal place
for any quick calculation. For instance,
100.000003 × 200.000006 ≈20,000
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_13, © Springer-Verlag London 2014
265

266
13
Calculus: Derivatives
and ignoring the decimal part has no signiﬁcant impact on the general accuracy of
the answer, which is measured in tens of thousands.
To develop an algebraic basis for this argument let’s divide a number into two
parts: a primary part x, and some very small secondary part δx (pronounced delta x).
In one of the above numbers, x = 100 and δx = 0.000003. Given two such numbers,
x1 and y1, their product is given by
x1 = x + δx
y1 = y + δy
x1y1 = (x + δx)(y + δy)
= xy + x · δy + y · δx + δx · δy.
Using x1 = 100.000003 and y1 = 200.000006 we have
x1y1 = 100 × 200 + 100 × 0.000006 + 200 × 0.000003 + 0.000003 × 0.000006
= 20,000 + 0.0006 + 0.0006 + 0.00000000018
= 20,000 + 0.0012 + 0.00000000018
= 20,000.00120000018
where it is clear that the products x · δy, y · δx and δx · δy contribute very little
to the result. Furthermore, the smaller we make δx and δy, their contribution be-
comes even more insigniﬁcant. Just imagine if we reduce δx and δy to the level
of quantum phenomenon, e.g. 10−34, then their products play no part in every-day
numbers. But there is no need to stop there, we can make δx and δy as small as
we like, e.g. 10−100,000,000,000. Later on we employ the device of reducing a num-
ber towards zero, such that any products involving them can be dropped from any
calculation.
Even though the product of two numbers less than zero is an even smaller num-
ber, care must be taken with their quotients. For example, in the above scenario,
where δy = 0.000006 and δx = 0.000003,
δy
δx = 0.000006
0.000003 = 2
so we must watch out for such quotients.
From now on I will employ the term derivative to describe a function’s rate of
change relative to its independent variable. I will now describe two ways of com-
puting a derivative, and provide a graphical interpretation of the process. The ﬁrst
way uses simple algebraic equations, and the second way uses a functional repre-
sentation. Needless to say, they both give the same result.

13.4
Equations and Limits
267
13.4 Equations and Limits
13.4.1 Quadratic Function
Here is a simple algebraic approach using limits to compute the derivative of a
quadratic function. Starting with the function y = x2, let x change by δx, and let δy
be the corresponding change in y. We then have
y = x2
y + δy = (x + δx)2
= x2 + 2x · δx + (δx)2
δy = 2x · δx + (δx)2.
Dividing throughout by δx we have
δy
δx = 2x + δx.
The ratio δy/δx provides a measure of how fast y changes relative to x, in incre-
ments of δx. For example, when x = 10
δy
δx = 20 + δx,
and if δx = 1, then δy/δx = 21. Equally, if δx = 0.001, then δy/δx = 20.001. By
making δx smaller and smaller, δy becomes equally smaller, and their ratio con-
verges towards a limiting value of 20.
In this case, as δx approaches zero, δy/δx approaches 2x, which is written
lim
δx→0
δy
δx = 2x.
Thus in the limit, when δx = 0, we create a condition where δy is divided by zero—
which is a meaningless operation. However, if we hold onto the idea of a limit, as
δx →0, it is obvious that the quotient δy/δx is converging towards 2x. The sub-
terfuge employed to avoid dividing by zero is to substitute another quotient dy/dx
to stand for the limiting condition:
dy
dx = lim
δx→0
δy
δx = 2x.
dy/dx (pronounced dee y dee x) is the derivative of y = x2, i.e. 2x. For instance,
when x = 0, dy/dx = 0, and when x = 3, dy/dx = 6. The derivative dy/dx, is the
instantaneous rate at which y changes relative to x.

268
13
Calculus: Derivatives
If we had represented this equation as a function:
f (x) = x2
f ′(x) = 2x
where f ′(x) is another way of expressing dy/dx.
Now let’s introduce two constants into the original quadratic equation to see what
effect, if any, they have on the derivative. We begin with
y = ax2 + b
and increment x and y:
y + δy = a(x + δx)2 + b
= a

x2 + 2x · δx + (δx)2
+ b
δy = a

2x · δx + (δx)2
.
Dividing throughout by δx:
δy
δx = a(2x + δx)
and the derivative is
dy
dx = lim
δx→0
δy
δx = 2ax.
Thus we see the added constant b disappears (i.e. because it does not change), whilst
the multiplied constant a is transmitted through to the derivative.
13.4.2 Cubic Equation
Now let’s repeat the above analysis for y = x3:
y = x3
y + δy = (x + δx)3
= x3 + 3x2 · δx + 3x(δx)2 + (δx)3
δy = 3x2 · δx + 3x(δx)2 + (δx)3.
Dividing throughout by δx:
δy
δx = 3x2 + 3x · δx + (δx)2.

13.4
Equations and Limits
269
Employing the idea of inﬁnitesimals, one would argue that any term involving δx
can be ignored, because its numerical value is too small to make any contribution
to the result. Similarly, using the idea of limits, one would argue that as δx is made
increasingly smaller, towards zero, any term involving δx rapidly disappears.
Using limits, we have
lim
δx→0
δy
δx = 3x2
or
dy
dx = lim
δx→0
δy
δx = 3x2.
We could also show that if y = ax3 + b then
dy
dx = 3ax2.
This incremental technique can be used to compute the derivative of all sorts of
functions.
If we continue computing the derivatives of higher-order polynomials, we dis-
cover the following pattern:
y = x2,
dy
dx = 2x
y = x3,
dy
dx = 3x2
y = x4,
dy
dx = 4x3
y = x5,
dy
dx = 5x4.
Clearly, the rule is
y = xn,
dy
dx = nxn−1
but we need to prove why this is so. The solution is found in the binomial expansion
for (x + δx)n, which can be divided into three components:
1. Decreasing terms of x.
2. Increasing terms of δx.
3. The terms of Pascal’s triangle.
For example, the individual terms of (x + δx)4 are:
Decreasing terms of x:
x4
x3
x2
x1
x0
Increasing terms of δx:
(δx)0
(δx)1
(δx)2
(δx)3
(δx)4
The terms of Pascal’s triangle:
1
4
6
4
1

270
13
Calculus: Derivatives
which when combined produce
x4 + 4x3(δx) + 6x2(δx)2 + 4x(δx)3 + (δx)4.
Thus when we begin an incremental analysis:
y = x4
y + δy = (x + δx)4
= x4 + 4x3(δx) + 6x2(δx)2 + 4x(δx)3 + (δx)4
δy = 4x3(δx) + 6x2(δx)2 + 4x(δx)3 + (δx)4.
Dividing throughout by δx:
δy
δx = 4x3 + 6x2(δx)1 + 4x(δx)2 + (δx)3.
In the limit, as δx slides to zero, only the second term of the original binomial
expansion remains:
4x3.
The second term of the binomial expansion (1 + δx)n is always of the form
nxn−1
which is the proof we require.
13.4.3 Functions and Limits
In order to generalise the above ﬁndings, let’s approach the above analysis using
a function of the form y = f (x). We begin by noting some arbitrary value of its
independent variable and note the function’s value. In general terms, this is x and
f (x) respectively. We then increase x by a small amount δx, to give x + δx, and
measure the function’s value again: f (x + δx). The function’s change in value is
f (x +δx)−f (x), whilst the change in the independent variable is δx. The quotient
of these two quantities approximates to the function’s rate of change at x:
f (x + δx) −f (x)
δx
.
(13.1)
By making δx smaller and smaller towards zero, (13.1) converges towards a limiting
value expressed as
dy
dx = lim
δx→0
f (x + δx) −f (x)
δx
(13.2)

13.4
Equations and Limits
271
which can be used to compute all sorts of functions. For example, to compute the
derivative of sinx we proceed as follows:
y = sinx
y + δy = sin(x + δx).
Using the identity sin(A + B) = sinAcosB + cosAsinB, we have
y + δy = sinx cos(δx) + cosx sin(δx)
δy = sinx cos(δx) + cosx sin(δx) −sinx
= sinx

cos(δx) −1

+ cosx sin(δx).
Dividing throughout by δx we have
δy
δx = sinx
δx

cos(δx) −1

+ sin(δx)
δx
cosx.
In the limit as δx →0, (cos(δx) −1) →0 and sin(δx)/δx = 1, and
dy
dx = d(sinx)
dx
= cosx.
Before moving on, let’s compute the derivative of cosx.
y = cosx
y + δy = cos(x + δx).
Using the identity cos(A + B) = cosAcosB −sinAsinB, we have
y + δy = cosx cos(δx) −sinx sin(δx)
δy = cosx cos(δx) −sinx sin(δx) −cosx
= cosx

cos(δx) −1

−sinx sin(δx).
Dividing throughout by δx we have
δy
δx = cosx
δx

cos(δx) −1

−sin(δx)
δx
sinx.
In the limit as δx →0, (cos(δx) −1) →0 and sin(δx)/δx = 1 (see Appendix A),
and
dy
dx = d(cosx)
dx
−sinx.
We will continue to employ this strategy to compute the derivatives of other func-
tions later on.

272
13
Calculus: Derivatives
Fig. 13.1 Sketch of
f (x) = x2
13.4.4 Graphical Interpretation of the Derivative
To illustrate this limiting process graphically, consider the scenario in Fig. 13.1
where the sample point is P . In this case the function is f (x) = x2 and P ’s co-
ordinates are (x,x2). We identify another point R, displaced δx to the right of P ,
with coordinates (x + δx,x2). The point Q on the curve, vertically above R, has
coordinates (x + δx,(x + δx)2). When δx is relatively small, the slope of the line
PQ approximates to the function’s rate of change at P , which is the graph’s slope.
This is given by
slope = QR
PR = (x + δx)2 −x2
δx
= x2 + 2x(δx) + (δx)2 −x2
δx
= 2x(δx) + (δx)2
δx
= 2x + δx.
We can now reason that as δx is made smaller and smaller, Q approaches P , and
slope becomes the graph’s slope at P . This is the limiting condition:
dy
dx = lim
δx→0(2x + δx) = 2x.
Thus, for any point with coordinates (x,x2), the slope is given by 2x. For example,
when x = 0, the slope is 0, and when x = 4, the slope is 8, etc.

13.4
Equations and Limits
273
13.4.5 Derivatives and Differentials
Given a function f (x), the ratio df/dx represents the instantaneous change of f for
some x, and is called the ﬁrst derivative of f (x). For linear functions, this is con-
stant, for other functions, the derivative’s value changes with x and is represented
by a function.
The elements df , dy and dx are called differentials, and historically, the deriva-
tive used to be called the differential coefﬁcient, but has now been dropped in favour
of derivative. One can see how the idea of a differential coefﬁcient arose if we write,
for example:
dy
dx = 3x
as
dy = 3x dx.
In this case, 3x acts like a coefﬁcient of dx, nevertheless, we will use the word
derivative. It is worth noting that if y = x, then dy/dx = 1, or dy = dx. The two
differentials are individual algebraic quantities, which permits us to write statements
such as
dy
dx = 3x,
dy = 3x dx,
dx = dy
3x .
Example 13.1 Find dy/dx, given
y = 6x3 −4x2 + 8x + 6.
Differentiating y:
dy
dx = 18x2 −8x + 8
which is the instantaneous change of y relative to x. When x = 1, dy/dx = 18 −
8 + 8 = 18, which means that y is changing 18 times faster than x. Consequently,
dx/dy = 1/18.
13.4.6 Integration and Antiderivatives
If it is possible to differentiate a function, it seems reasonable to assume the exis-
tence of an inverse process to convert a derivative back to its associated function.
Fortunately, this is the case, but there are some limitations. This inverse process is
called integration and reveals the antiderivative of a function. Many functions can
be paired together in the form of a derivative and an antiderivative, such as 2x with
x2, and cosx with sinx. However, there are many functions where it is impossible

274
13
Calculus: Derivatives
to derive its antiderivative in a precise form. For example, there is no simple, ﬁ-
nite functional antiderivative for sinx2 or (sinx)/x. To understand integration, let’s
begin with a simple derivative.
If we are given
dy
dx = 18x2 −8x + 8
it is not too difﬁcult to reason that the original function could have been
y = 6x3 −4x2 + 8x.
However, it could have also been
y = 6x3 −4x2 + 8x + 2
or
y = 6x3 −4x2 + 8x + 20
or with any other constant. Consequently, when integrating the original function, the
integration process has to include a constant:
y = 6x3 −4x2 + 8x + C.
The value of C is not always required, but it can be determined if we are given some
extra information, such as y = 10 when x = 0, then C = 10.
The notation for integration employs a curly “S” symbol

, which may seem
strange, but is short for sum and will be explained later. So, starting with
dy
dx = 18x2 −8x + 8
we rewrite this as
dy =

18x2 −8x + 8

dx
and integrate both sides, where dy becomes y and the right-hand-side becomes
 
18x2 −8x + 8

dx
although brackets are not always used:
y =

18x2 −8x + 8dx.
This equation reads: “y is the integral of 18x2 −8x + 8 dee x.” The dx reminds us
that x is the independent variable. In this case we can write the answer:
dy = 18x2 −8x + 8dx

13.5
Function Types
275
y =

18x2 −8x + 8dx
= 6x3 −4x2 + 8x + C
where C is some constant.
Example 13.2 Find y, given
dy = 6x2 + 10x dx.
Integrating:
y =

6x2 + 10x dx
= 2x3 + 5x2 + C.
Example 13.3 Find y, given
dy = dx.
Integrating:
y =

1dx
= x + C.
The antiderivatives for the sine and cosine functions are written:

sinx dx = −cosx + C

cosx dx = sinx + C
which you may think obvious, as we have just computed their derivatives. However,
the reason for introducing integration alongside differentiation, is to make you fa-
miliar with the notation, and memorise the two distinct processes, as well as lay the
foundations for the next chapter.
13.5 Function Types
Mathematical functions come in all sorts of shapes and sizes. Sometimes they are
described explicitly where y equals some function of its independent variable(s),
such as
y = x sinx

276
13
Calculus: Derivatives
or implicitly where y, and its independent variable(s) are part of an equation, such
as
x2 + y2 = 10.
A function may reference other functions, such as
y = sin

cos2 x

or
y = xsinx.
There is no limit to the way functions can be combined, which makes it impossible
to cover every eventuality. Nevertheless, we will explore some useful combinations
that prepare us for any future surprises.
First, we examine how to differentiate different types of functions, that include
sums, products and quotients, which are employed later on to differentiate speciﬁc
functions such as trigonometric, logarithmic and hyperbolic. Where relevant, I in-
clude the appropriate antiderivative to complement its derivative.
13.6 Differentiating Groups of Functions
So far, we have only considered simple individual functions, which unfortunately,
do not represent the equations found in mathematics, science, physics or even com-
puter graphics. In general, the functions we have to differentiate include sums of
functions, functions of functions, function products and function quotients. Let’s
explore these four scenarios.
13.6.1 Sums of Functions
A function normally computes a numerical value from its independent variable(s),
and if it can be differentiated, its derivative generates another function with the same
independent variable. Consequently, if a function contains two functions of x, such
as u and v, where
y = u(x) + v(x)
which can be abbreviated to
y = u + v
then
dy
dx = du
dx + dv
dx
where we just sum their individual derivatives.

13.6
Differentiating Groups of Functions
277
Fig. 13.2 Graph of
y = 2x6 + sinx + cosx and
its derivative,
y = 12x5 + cosx −sinx
(dashed line)
Example 13.4 Find dy/dx, given
u = 2x6
v = 3x5
y = u + v
y = 2x6 + 3x5.
Differentiating y:
dy
dx = 12x5 + 15x4.
Example 13.5 Find dy/dx, given
u = 2x6
v = sinx
w = cosx
y = u + v + w
y = 2x6 + sinx + cosx.
Differentiating y:
dy
dx = 12x5 + cosx −sinx.
Figure 13.2 shows a graph of y = 2x6 + sinx + cosx and its derivative y = 12x5 +
cosx −sinx. Differentiating such functions is relatively easy, so too, is integrating.
Given
dy
dx = du
dx + dv
dx

278
13
Calculus: Derivatives
then
y =

udx +

v dx
=

(u + v)dx.
Example 13.6 Find y, given
dy
dx = 12x5 + cosx −sinx.
Integrating:
dy = 12x5 + cosx −sinx dx
y =

12x5 dx +

cosx dx −

sinx dx
= 2x6 + sinx + cosx + C.
13.6.2 Function of a Function
One of the advantages of modern mathematical notation is that it lends itself to un-
limited elaboration without introducing any new symbols. For example, the polyno-
mial 3x2 + 2x is easily raised to some power by adding brackets and an appropriate
index: (3x2 + 2x)2. Such an object is a function of a function, because the function
3x2 + 2x is subjected to a further squaring function. The question now is: how are
such functions differentiated? Well, the answer is relatively easy, but does introduce
some new ideas.
Imagine that Heidi swims twice as fast as John, who in turn, swims three times as
fast as his dog, Monty. It should be obvious that Heidi swims six (2×3) times faster
than Monty. This product rule, also applies to derivatives, because if y changes twice
as fast as u, i.e. dy/du = 2, and u changes three times as fast as x, i.e. du/dx = 3,
then y changes six times as fast as x:
dy
dx = dy
du · du
dx .
To differentiate
y =

3x2 + 2x
2
we substitute
u = 3x2 + 2x

13.6
Differentiating Groups of Functions
279
then
y = u2
and
dy
du = 2u
= 2

3x2 + 2x

= 6x2 + 4x.
Next, we require du/dx:
u = 3x2 + 2x
du
dx = 6x + 2
therefore, we can write
dy
dx = dy
du · du
dx
=

6x2 + 4x

(6x + 2)
= 36x3 + 36x2 + 8x.
This result is easily veriﬁed by expanding the original polynomial and differentiat-
ing:
y =

3x2 + 2x
2
=

3x2 + 2x

3x2 + 2x

= 9x4 + 12x3 + 4x2
dy
dx = 36x3 + 36x2 + 8x.
Figure 13.3 shows a graph of y = (3x2 + 2x)2 and its derivative y = 36x3 +
36x2 + 8x.
Example 13.7 Differentiate y, which is a function of a function:
y = sinax.
Substitute u for ax:
y = sinu

280
13
Calculus: Derivatives
Fig. 13.3 Graph of
y = (3x2 + 2x)2 and its
derivative
y = 36x3 + 36x2 + 8x
(dashed line)
dy
du = cosu
= cosax.
Next, we require du/dx:
u = ax
du
dx = a
therefore, we can write
dy
dx = dy
du · du
dx
= cosax · a
= a cosax.
Consequently, given
dy
dx = cosax
then
dy = cosax dx
y =

cosax dx
= 1
a sinax + C.
Similarly, given
dy
dx = sinax

13.6
Differentiating Groups of Functions
281
then
dy = sinax dx
y =

sinax dx
= −1
a cosax + C.
Example 13.8 Differentiate y, which is a function of a function:
y = sinx2.
Substitute u for x2:
y = sinu
dy
du = cosu
= cosx2.
Next, we require du/dx:
u = x2
du
dx = 2x
therefore, we can write
dy
dx = dy
du · du
dx
= cosx2 · 2x
= 2x cosx2.
Figure 13.4 shows a graph of y = sinx2 and its derivative y = 2x cosx2. In gen-
eral, there can be any depth of functions within a function, which permits us to write
the chain rule for derivatives:
dy
dx = dy
du · du
dv · dv
dw · dw
dx .
13.6.3 Function Products
Function products occur frequently in every-day mathematics, and involve the prod-
uct of two, or more functions. Here are three simple examples:
y =

3x2 + 2x

2x2 + 3x


282
13
Calculus: Derivatives
Fig. 13.4 Graph of
y = sinx2 and its derivative
y = 2x cosx2 (dashed line)
y = sinx cosx
y = x2 sinx.
When it comes to differentiating function products of the form
y = uv
it seems natural to assume that
dy
dx = du
dx · dv
dx
(13.3)
which unfortunately, is incorrect. For example, in the case of
y =

3x2 + 2x

2x2 + 3x

differentiating using the above rule (13.3) produces
dy
dx = (6x + 2)(4x + 3)
= 24x2 + 26x + 6.
However, if we expand the original product and then differentiate, we obtain
y =

3x2 + 2x

2x2 + 3x

= 6x4 + 13x3 + 6x2
dy
dx = 24x3 + 39x2 + 12x
which is correct, but differs from the ﬁrst result. Obviously, (13.3) must be wrong.
So let’s return to ﬁrst principles and discover the correct rule.

13.6
Differentiating Groups of Functions
283
So far, we have incremented the independent variable—normally x—by δx to
discover the change in y—normally δy. Next, we see how the same notation can be
used to increment functions.
Given the following functions of x, u and v, where
y = uv
if x increases by δx, then there will be corresponding changes of δu, δv and δy, in
u, v and y respectively. Therefore,
y + δy = (u + δu)(v + δv)
= uv + uδv + vδu + δuδv
δy = uδv + vδu + δuδv.
Dividing throughout by δx we have
δy
δx = uδv
δx + v δu
δx + δuδv
δx .
In the limiting condition:
dy
dx = lim
δx→0

uδv
δx

+ lim
δx→0

v δu
δx

+ lim
δx→0

δuδv
δx

.
As δx →0, then δu →0 and (δu δv
δx ) →0. Therefore,
dy
dx = udv
dx + v du
dx .
(13.4)
Applying (13.4) to the original function product:
u = 3x2 + 2x
v = 2x2 + 3x
y = uv
du
dx = 6x + 2
dv
dx = 4x + 3
dy
dx = udv
dx + v du
dx
=

3x2 + 2x

(4x + 3) +

2x2 + 3x

(6x + 2)
=

12x3 + 17x2 + 6x

+

12x3 + 22x2 + 6x

= 24x3 + 39x2 + 12x

284
13
Calculus: Derivatives
Fig. 13.5 Graph of
y = (3x2 + 2x)(2x2 + 3x)
and its derivative
y = 24x3 + 39x2 + 12x
(dashed line)
which agrees with our previous prediction. Figure 13.5 shows a graph of y =
(3x2 + 2x)(2x2 + 3x) and its derivative y = 24x3 + 39x2 + 12x.
Example 13.9 Differentiate y = sinx cosx using (13.4).
y = sinx cosx
u = sinx
du
dx = cosx
v = cosx
dv
dx = −sinx
dy
dx = udv
dx + v du
dx
= sinx(−sinx) + cosx cosx
= cos2 x −sin2 x
= cos2x.
Using the identity sin2x = 2sinx cosx, we can rewrite the original function as
y = sinx cosx
dy
dx = 1
2 sin2x
= cos2x
which conﬁrms the above derivative. Now let’s consider the antiderivative of cos2x.

13.6
Differentiating Groups of Functions
285
Fig. 13.6 Graph of
y = sinx cosx and its
derivative y = cos2x (dashed
line)
Given
dy
dx = cos2x
then
dy = cos2x dx
y =

cos2x dx
= 1
2 sin2x + C
= sinx cosx + C.
Figure 13.6 shows a graph of y = sinx cos and its derivative y = cos2x.
Example 13.10 Differentiate y = x2 sinx, using (13.4).
y = x2 sinx
u = x2
du
dx = 2x
v = sinx
dv
dx = cosx
dy
dx = udv
dx + v du
dx
= x2 cosx + 2x sinx.
Figure 13.7 shows a graph of y = x2 sinx and its derivative x2 cosx + 2x sinx.

286
13
Calculus: Derivatives
Fig. 13.7 Graph of
y = x2 sinx and its derivative
y = x2 cosx + 2x sinx
(dashed line)
13.6.4 Function Quotients
Next, we investigate how to differentiate the quotient of two functions. We begin
with two functions of x, u and v, where
y = u
v
which makes y also a function of x.
We now increment x by δx and measure the change in u as δu, and the change
in v as δv. Consequently, the change in y is δy:
y + δy = u + δu
v + δv
δy = u + δu
v + δv −u
v
= v(u + δu) −u(v + δv)
v(v + δv)
= vδu −uδv
v(v + δv) .
Dividing throughout by δx we have
δy
δx =
v δu
δx −uδv
δx
v(v + δv) .
As δx →0, δu, δv and δy also tend towards zero, and the limiting conditions are
dy
dx = lim
δx→0
δy
δx
v du
dx = lim
δx→0v δu
δx

13.7
Differentiating Implicit Functions
287
udv
dx = lim
δx→0uδv
δx
v2 = lim
δx→0v(v + δv)
therefore,
dy
dx =
v du
dx −udv
dx
v2
.
Example 13.11 Differentiate y, given
y = x3 + 2x2 + 3x + 6
x2 + 3
.
Substitute u = x3 + 2x2 + 3x + 6 and v = x2 + 3, then
du
dx = 3x2 + 4x + 3
dv
dx = 2x
dy
dx = (x2 + 3)(3x2 + 4x + 3) −(x3 + 2x2 + 3x + 6)(2x)
(x2 + 3)2
= (3x4 + 4x3 + 3x2 + 9x2 + 12x + 9) −(2x4 + 4x3 + 6x2 + 12x)
x4 + 6x2 + 9
= x4 + 6x2 + 9
x4 + 6x2 + 9
= 1
which is not a surprising result when one sees that the original function has the
factors
y = (x2 + 3)(x + 2)
x2 + 3
= x + 2
whose derivative is 1. Figure 13.8 shows a graph of y = (x2 + 3)(x + 2)/(x2 + 3)
and its derivative y = 1.
13.7 Differentiating Implicit Functions
Functions conveniently fall into two types: explicit and implicit. An explicit func-
tion, describes a function in terms of its independent variable(s), such as

288
13
Calculus: Derivatives
Fig. 13.8 Graph of
y = (x2 + 3)(x + 2)/(x2 + 3)
and its derivative y = 1
(dashed line)
y = a sinx + b cosx
where the value of y is determined by the values of a, b and x. On the other hand,
an implicit function, such as
x2 + y2 = 25
combines the function’s name with its deﬁnition. In this case, it is easy to untangle
the explicit form:
y =
	
25 −x2.
So far, we have only considered differentiating explicit functions, so now let’s ex-
amine how to differentiate implicit functions. Let’s begin with a simple explicit
function and differentiate it as it is converted into its implicit form.
Let
y = 2x2 + 3x + 4
then
dy
dx = 4x + 3.
Now let’s start the conversion into the implicit form by bringing the constant 4 over
to the left-hand side:
y −4 = 2x2 + 3x
differentiating both sides:
dy
dx = 4x + 3.
Bringing 4 and 3x across to the left-hand side:
y −3x −4 = 2x2

13.7
Differentiating Implicit Functions
289
differentiating both sides:
dy
dx −3 = 4x
dy
dx = 4x + 3.
Finally, we have
y −2x2 −3x −4 = 0
differentiating both sides:
dy
dx −4x −3 = 0
dy
dx = 4x + 3
which seems straight forward. The reason for working through this example is to
remind us that when y is differentiated we get dy/dx.
Example 13.12 Find dy/dx, given
y + sinx + 4x = 0.
Differentiating the individual terms:
y + sinx + 4x = 0
dy
dx + cosx + 4 = 0
dy
dx = −cosx −4.
y + x2 −cosx = 0
dy
dx + 2x + sinx = 0
dy
dx = −2x −sinx.
But how do we differentiate y2 + x2 = r2? Well, the important difference between
this implicit function and previous functions, is that it involves a function of a func-
tion. y is not only a function of x, but is squared, which means that we must employ
the chain rule described earlier:
dy
dx = dy
du · du
dx .

290
13
Calculus: Derivatives
Therefore, given
y2 + x2 = r2
2y dy
dx + 2x = 0
dy
dx = −2x
2y
=
−x
√
r2 −x2 .
This is readily conﬁrmed by expressing the original function in its explicit form and
differentiating:
y =

r2 −x2 1
2
which is a function of a function.
Let u = r2 −x2, then
du
dx = −2x.
As y = u
1
2 , then
dy
du = 1
2u−1
2
=
1
2u
1
2
=
1
2
√
r2 −x2 .
However,
dy
dx = dy
du · du
dx
=
−2x
2
√
r2 −x2
=
−x
√
r2 −x2
which agrees with the implicit differentiated form.
Example 13.13 Find dy/dx, given
x2 −y2 + 4x = 6y.

13.8
Differentiating Exponential and Logarithmic Functions
291
Differentiating the individual terms:
2x −2y dy
dx + 4 = 6dy
dx .
Rearranging the terms, we have
2x + 4 = 6dy
dx + 2y dy
dx
= dy
dx (6 + 2y)
dy
dx = 2x + 4
6 + 2y .
If, for example, we have to ﬁnd the slope of x2 −y2 + 4x = 6y at the point (4,3),
then we simply substitute x = 4 and y = 3 in dy/dx to obtain the answer 1.
Example 13.14 Find dy/dx, given
xn + yn = an
nxn−1 + nyn−1 dy
dx = 0
dy
dx = −nxn−1
nyn−1
dy
dx = −xn−1
yn−1 .
13.8 Differentiating Exponential and Logarithmic Functions
13.8.1 Exponential Functions
Exponential functions have the form y = ax, where the independent variable is the
exponent. Such functions are used to describe various forms of growth or decay,
from the compound interest law, to the rate at which a cup of tea cools down. One
special value of a is 2.718282..., called e, where
e = lim
n→∞

1 + 1
n
n
.
Raising e to the power x:
ex = lim
n→∞

1 + 1
n
nx

292
13
Calculus: Derivatives
Fig. 13.9 Graphs of y = ex
and y = e−x
which, using the Binomial Theorem, is
ex = 1 + x + x2
2! + x3
3! + x4
4! + ··· .
If we let
y = ex
dy
dx = 1 + x + x2
2! + x3
3! + x4
4! + ···
= ex
which is itself. Figure 13.9 shows graphs of y = ex and y = e−x.
Now let’s differentiate y = ax. We know from the rules of logarithms that
logxn = nlogx
therefore, given
y = ax
then
lny = lnax = x lna
therefore
y = ex lna
which means that
ax = ex lna.
Consequently,
d
dx

ax
= d
dx

ex lna

13.8
Differentiating Exponential and Logarithmic Functions
293
= lnaex lna
= lnaax.
Similarly, it can be shown that
y = e−x,
dy
dx = −e−x
y = eax,
dy
dx = aeax
y = e−ax,
dy
dx = −ae−ax
y = ax,
dy
dx = lnaax
y = a−x,
dy
dx = −lnaa−x.
The exponential antiderivatives are written:

ex dx = ex + C

e−x dx = −e−x + C

eax dx = 1
a eax + C

e−ax dx = −1
a eax + C

ax dx =
1
lna ax + C

a−x dx = −1
lna a−x + C.
13.8.2 Logarithmic Functions
Given a function of the form
y = lnx
then
x = ey.

294
13
Calculus: Derivatives
Fig. 13.10 Graph of y = lnx
and its derivative y = 1/x
(dashed)
Therefore,
dx
dy = ey
= x
dy
dx = 1
x .
Thus
d
dx (lnx) = 1
x .
Figure 13.10 shows the graph of y = lnx and its derivative y = 1/x. Conversely,
 1
x dx = ln|x| + C.
When differentiating logarithms to a base a, we employ the conversion formula:
y = loga x
= (lnx)(loga e)
whose derivative is
dy
dx = 1
x loga e.
When a = 10, then log10 e = 0.4343... and
d
dx (log10 x) = 0.4343
x
.
Figure 13.11 shows the graph of y = log10 x and its derivative y = 0.4343/x.

13.9
Differentiating Trigonometric Functions
295
Fig. 13.11 Graph of
y = log10 x and its derivative
y = 0.4343/x (dashed)
13.9 Differentiating Trigonometric Functions
We have only differentiated two trigonometric functions: sinx and cosx, so let’s
add tanx, cscx, secx and cotx to the list, as well as their inverse forms.
13.9.1 Differentiating tan
Rather than return to ﬁrst principles and start incrementing x by δx, we can employ
the rules for differentiating different function combinations and various trigonomet-
ric identities. In the case of tanax, this can be written as
tanax = sinax
cosax
and employ the quotient rule:
dy
dx =
v du
dx −udv
dx
v2
.
Therefore, let u = sinax and v = cosax, and
dy
dx = a cosax cosax + a sinax sinax
cos2 ax
= a(cos2 ax + sin2 ax)
cos2 ax
=
a
cos2 ax
= a sec2 ax
= a

1 + tan2 ax

.
Figure 13.12 shows a graph of y = tanx and its derivative y = 1 + tan2 x.

296
13
Calculus: Derivatives
Fig. 13.12 Graph of
y = tanx and its derivative
y = 1 + tan2 x (dashed)
It follows that

sec2 ax dx = 1
a tanax + C.
13.9.2 Differentiating csc
Using the quotient rule:
y = cscax
=
1
sinax
dy
dx = 0 −a cosax
sin2 ax
= −a cosax
sin2 ax
= −
a
sinax · cosax
sinax
= −a cscax · cotax.
Figure 13.13 shows a graph of y = cscx and its derivative y = −cscx cotx.
It follows that

cscax · cotax dx = −1
a cscax + C.
13.9.3 Differentiating sec
Using the quotient rule:
y = secax

13.9
Differentiating Trigonometric Functions
297
Fig. 13.13 Graph of
y = cscx and its derivative
y = −cscx cotx (dashed)
Fig. 13.14 Graph of
y = secx and its derivative
y = secx tanx (dashed)
=
1
cosax
dy
dx = −(−a sinax)
cos2 ax
= a sinax
cos2 ax
=
a
cosax · sinax
cosax
= a secax · tanax.
Figure 13.14 shows a graph of y = cscx and its derivative y = −cscx cotx.
It follows that

secax · tanax dx = 1
a secax + C.

298
13
Calculus: Derivatives
Fig. 13.15 Graph of
y = cotx and its derivative
y = −(1 −cot2 x) (dashed)
13.9.4 Differentiating cot
Using the quotient rule:
y = cotax
=
1
tanax
dy
dx = −a sec2 ax
tan2 ax
= −
a
cos2 ax · cos2 ax
sin2 ax
= −
a
sin2 ax
= −a csc2 ax
= −a

1 + cot2 ax

.
Figure 13.15 shows a graph of y = cotx and its derivative y = −(1 + cot2 x).
It follows that

csc2 ax dx = −1
a cotat + C.
13.9.5 Differentiating arcsin, arccos and arctan
These inverse functions are solved using a clever strategy.
Let
x = siny

13.9
Differentiating Trigonometric Functions
299
then
y = arcsinx.
Differentiating the ﬁrst expression, we have
dx
dy = cosy
dy
dx =
1
cosy
and as sin2 y + cos2 y = 1, then
cosy =

1 −sin2 y =
	
1 −x2
and
d
dx (arcsinx) =
1
√
1 −x2 .
Using a similar technique, it can be shown that
d
dx (arccosx) = −
1
√
1 −x2
d
dx (arctanx) =
1
1 + x2 .
It follows that

dx
√
1 −x2 = arcsinx + C

dx
1 + x2 = arctanx + C.
13.9.6 Differentiating arccsc, arcsec and arccot
Let
y = arccscx
then
x = cscy
=
1
siny
dx
dy = −cosy
sin2 y

300
13
Calculus: Derivatives
Fig. 13.16 Graphs of the unit
circle x2 + y2 = 1 and the
hyperbola x2 −y2 = 1
dy
dx = −sin2 y
cosy
= −1
x2
x
√
x2 −1
d
dx (arccscx) = −
1
x
√
x2 −1
.
Similarly,
d
dx (arcsecx) =
1
x
√
x2 −1
d
dx (arccotx) = −
1
x2 + 1.
It follows:

dx
x
√
x2 −1
= arcsec|x| + C

dx
x2 + 1 = −arccotx + C.
13.10 Differentiating Hyperbolic Functions
Trigonometric functions are useful for parametric, circular motion, whereas, hyper-
bolic functions arise in equations for the absorption of light, mechanics and in inte-
gral calculus. Figure 13.16 shows graphs of the unit circle and a hyperbola whose
respective equations are
x2 + y2 = 1
x2 −y2 = 1

13.10
Differentiating Hyperbolic Functions
301
where the only difference between them is a sign. The parametric form for the
trigonometric, or circular functions and the hyperbolic functions are respectively:
sin2 θ + cos2 θ = 1
cosh2 x −sinh2 x = 1.
The three hyperbolic functions have the following deﬁnitions:
sinhx = ex −e−x
2
coshx = ex + e−x
2
tanhx = sinhx
coshx = e2x −1
e2x + 1
and their reciprocals are:
cosechx =
1
sinhx =
2
ex −e−x
sechx =
1
coshx =
2
ex + e−x
cothx =
1
tanhx = e2x + 1
e2x −1.
Other useful identities include:
sech 2x = 1 −tanh2 x
cosech 2 = coth2 x −1.
The coordinates of P and Q in Fig. 13.16 are given by P(cosθ,sinθ) and
Q(coshx,sinhx). Table 13.1 shows the names of the three hyperbolic functions,
their reciprocals and inverse forms. As these functions are based upon ex and e−x,
they are relatively easy to differentiate.
13.10.1 Differentiating sinh, cosh and tanh
Here are the rules for differentiating hyperbolic functions:
y
dy/dx
sinhx
coshx
coshx
sinhx
tanhx
sech2 x
cosechx
−cosechx cothx
sechx
−sechx tanhx
cothx
−cosech2 x

302
13
Calculus: Derivatives
Table 13.1 Hyperbolic
function names
Function
Reciprocal
Inverse function
Inverse reciprocal
sinh
cosech
arsinh
arcsch
cosh
sech
arcosh
arsech
tanh
coth
artanh
arcoth
and the inverse, hyperbolic functions:
y
dy/dx
arsinhx
1
√
1+x2
arcoshx
1
√
x2−1
artanhx
1
1−x2
arcschx
−
1
x√
1+x2
arsechx
−
1
x√
1−x2
arcothx
−
1
x2−1
Here are the rules for integrating hyperbolic functions:
f (x)

f (x)dx
sinhx
coshx + C
coshx
sinhx + C
sech2 x
tanhx + C
and the inverse, hyperbolic functions:
f (x)

f (x)dx
1
√
1+x2
arsinhx + C
1
√
x2−1
arcoshx + C
1
1−x2
artanhx + C
13.11 Higher Derivatives
There are three parts to this section: The ﬁrst part shows what happens when a
function is repeatedly differentiated; the second shows how these higher derivatives
resolve local minimum and maximum conditions; and the third section provides a
physical interpretation for these derivatives. Let’s begin by ﬁnding the higher deriva-
tives of simple polynomials.

13.12
Higher Derivatives of a Polynomial
303
Fig. 13.17 Graph of
y = 3x3 + 2x2 −5x and its
derivative y = 9x2 + 4x −5
(dashed)
13.12 Higher Derivatives of a Polynomial
We have previously seen that polynomials of the form
y = axr + bxs + cxt ...
are differentiated as follows:
dy
dx = raxr−1 + sbxs−1 + tcxt−1 ....
For example, given
y = 3x3 + 2x2 −5x
then
dy
dx = 9x2 + 4x −5
which describes how the slope of the original function changes with x.
Figure 13.17 shows the graph of y = 3x3 + 2x2 −5x and its derivative y =
9x2 + 4x −5, and we can see that when x = −1 there is a local maximum, where
the function reaches a value of 4, then begins a downward journey to 0, where the
slope is −5. Similarly, when x ≃0.55, there is a point where the function reaches
a local minimum with a value of approximately −1.65. The slope is zero at both
points, which is reﬂected in the graph of the derivative.
Having differentiated the function once, there is nothing to prevent us differen-
tiating a second time, but ﬁrst we require a way to annotate the process, which is
performed as follows. At a general level, let y be some function of x, then the ﬁrst
derivative is
d
dx (y).

304
13
Calculus: Derivatives
The second derivative is found by differentiating the ﬁrst derivative:
d
dx
dy
dx

and is written:
d2y
dx2 .
Similarly, the third derivative is
d3y
dx3
and the nth derivative:
dny
dxn .
When a function is expressed as f (x), its derivative is written f ′(x). The second
derivative is written f ′′(x), and so on for higher derivatives.
Returning to the original function, the ﬁrst and second derivatives are
dy
dx = 9x2 + 4x −5
d2y
dx2 = 18x + 4
and the third and fourth derivatives are
d3y
dx3 = 18
d4y
dx4 = 0.
Figure 13.18 shows the original function and the ﬁrst two derivatives. The graph of
the ﬁrst derivative shows the slope of the original function, whereas the graph of
the second derivative shows the slope of the ﬁrst derivative. These graphs help us
identify a local maximum and minimum. By inspection of Fig. 13.18, when the ﬁrst
derivative equals zero, there is a local maximum or a local minimum. Algebraically,
this is when
dy
dx = 0
9x2 + 4x −5 = 0.
Solving this quadratic in x we have
x = −b ±
√
b2 −4ac
2a

13.13
Identifying a Local Maximum or Minimum
305
Fig. 13.18 Graph of
y = 3x3 + 2x2 −5x, its ﬁrst
derivative y = 9x2 + 4x −5
(short dashes) and its second
derivative y = 18x + 4 (long
dashes)
Fig. 13.19 A function
containing a local maximum,
and its ﬁrst derivative
(dashed)
where a = 9, b = 4, c = −5:
x = −4 ±
√
16 + 180
18
x1 = −1,
x2 = 0.555
which conﬁrms our earlier analysis. However, what we don’t know, without refer-
ring to the graphs, whether it is a minimum, or a maximum.
13.13 Identifying a Local Maximum or Minimum
Figure 13.19 shows a function containing a local maximum of 5 when x = −1.
Note that as the independent variable x, increases from −2 towards 0, the slope of
the graph changes from positive to negative, passing through zero at x = −1. This
is shown in the function’s ﬁrst derivative, which is the straight line passing through

306
13
Calculus: Derivatives
Fig. 13.20 A function
containing a local minimum,
and its ﬁrst derivative
(dashed)
the points (−2,6),(−1,0) and (0,−6). A natural consequence of these conditions
implies that the slope of the ﬁrst derivative must be negative:
d2y
dx2 = −ve.
Figure 13.20 shows another function containing a local minimum of 5 when
x = −1. Note that as the independent variable x, increases from −2 towards 0,
the slope of the graph changes from negative to positive, passing through zero at
x = −1. This is shown in the function’s ﬁrst derivative, which is the straight line
passing through the points (−2,−6),(−1,0) and (0,6). A natural consequence of
these conditions implies that the slope of the ﬁrst derivative must be positive:
d2y
dx2 = +ve.
We can now apply this observation to the original function for the two values of x,
x1 = −1, x2 = 0.555:
dy
dx = 9x2 + 4x −5
d2y
dx2 = 18x + 4
= 18 × (−1) = −18
= 18 × (0.555) = +10.
Which conﬁrms that when x = −1 there is a local maximum, and when x = 0.555,
there is a local minimum, as shown in Fig. 13.18.
Example 13.15 Find the local minimum and maximum for y, given
y = −3x3 + 9x.

13.14
Partial Derivatives
307
Fig. 13.21 Graph of
y = −3x3 + 9x, its ﬁrst
derivative y = −9x2 + 9
(short dashes) and its second
derivative y = −18x (long
dashes)
The ﬁrst derivative is
dy
dx = −9x2 + 9
and second derivative
d2y
dx2 = −18x
as shown in Fig. 13.21. For a local maximum or minimum, the ﬁrst derivative equals
zero:
−9x2 + 9 = 0
which implies that x = ±1.
The sign of the second derivative determines whether there is a local minimum
or maximum.
d2y
dx2 = −18x
= −18 × (−1) = +ve
= −18 × (+1) = −ve
therefore, when x = −1 there is a local minimum, and when x = +1 there is a local
maximum, as conﬁrmed by Fig. 13.21.
13.14 Partial Derivatives
Up to this point, we have used functions with one independent variable, such as
y = f (x). However, we must be able to compute derivatives of functions with more
than one independent variable, such as y = f (u,v,w). The technique employed is

308
13
Calculus: Derivatives
to assume that only one variable changes, whilst the other variables are held con-
stant. This means that a function can possess several derivatives—one for each inde-
pendent variable. Such derivatives are called partial derivatives and employ a new
symbol ∂, which can be read as “partial dee”.
Given a function f (u,v,w), the three partial derivatives are deﬁned as
∂f
∂u = lim
h→0
f (u + h,v,w) −f (u,v,w)
h
∂f
∂v = lim
h→0
f (u,v + h,w) −f (u,v,w)
h
∂f
∂w = lim
h→0
f (u,v,w + h) −f (u,v,w)
h
.
For example, a function for the volume of a cylinder is
V (r,h) = πr2h
where r is the radius, and h is the height. Say we wish to compute the function’s
partial derivative with respect to r. First, the partial derivative is written
∂V
∂r .
Second, we hold h constant, whilst allowing r to change. This means that the func-
tion becomes
V (r,h) = kr2
(13.5)
where k = πh. Thus the partial derivative of (13.5) with respect to r is
∂V
∂r = 2kr
= 2πhr.
Next, by holding r constant, and allowing h to change, we have
∂V
∂h = πr2.
Sometimes, for purposes of clariﬁcation, the partial derivatives identify the constant
variable(s):
∂V
∂r

h
= 2πhr
∂V
∂h

r
= πr2.

13.14
Partial Derivatives
309
Partial differentiation is subject to the same rules for ordinary differentiation—we
just to have to remember which independent variable changes, and those held con-
stant. As with ordinary derivatives, we can compute higher-order partial derivatives.
Example 13.16 Find the second-order partial derivatives of f , given
f (u,v) = u4 + 2u3v2 −4v3.
The ﬁrst partial derivatives are
∂f
∂u = 4u3 + 6u2v2
∂f
∂v = 4u3v −12v2
and the second-order partial derivatives are
∂2f
∂u2 = 12u2 + 12uv2
∂2f
∂v2 = 4u3 −24v.
Example 13.17 Find the second-order partial derivatives of f , given
f (u,v) = sin(4u) · cos(5v)
the ﬁrst partial derivatives are
∂f
∂u = 4cos(4u) · cos(5v)
∂f
∂v = −5sin(4u) · sin(5v)
and the second-order partial derivatives are
∂2f
∂u2 = −16sin(4u) · cos(5v)
∂2f
∂v2 = −25sin(4u) · cos(5v).
In general, given f (u,v) = uv, then
∂f
∂u = v

310
13
Calculus: Derivatives
∂f
∂v = u
and the second-order partial derivatives are
∂2f
∂u2 = 0
∂2f
∂v2 = 0.
Similarly, given f (u,v) = u/v, then
∂f
∂u = 1
v
∂f
∂v = −u
v2
and the second-order partial derivatives are
∂2f
∂u2 = 0
∂2f
∂v2 = 2u
v3 .
Finally, given f (u,v) = uv, then
∂f
∂u = vuv−1
whereas, ∂f/∂v requires some explaining. First, given
f (u,v) = uv
taking natural logs of both sides, we have
lnf (u,v) = v lnu
and
f (u,v) = ev lnu.
Therefore,
∂f
∂v = ev lnu lnu
= uv lnu.

13.14
Partial Derivatives
311
Fig. 13.22 Surface of
z = 4x2 −2y2 using a
right-handed axial system
with a vertical z-axis
The second-order partial derivatives are
∂2f
∂u2 = v(v −1)uv−2
∂2f
∂v2 = uv ln2 u.
13.14.1 Visualising Partial Derivatives
Functions of the form y = f (x) are represented by a 2D graph, and the function’s
derivative f ′(x) represents the graph’s slope at any point x. Functions of the form
z = f (x,y) can be represented by a 3D surface, like the one shown in Fig. 13.22,
which is z(x,y) = 4x2 −2y2. The two partial derivatives are
∂z
∂x = 8x
∂z
∂y = −4y
where ∂z/∂x is the slope of the surface in the x-direction, as shown in Fig. 13.23,
and ∂z/∂y is the slope of the surface in the y-direction, as shown in Fig. 13.24.
The second-order partial derivatives are
∂2z
∂x2 = 8 = +ve
∂2z
∂y2 = −4 = −ve.
As ∂2z/∂x2 is positive, there is a local minimum in the x-direction, and as ∂2z/∂y2
is negative, there is a local maximum in the y-direction, as conﬁrmed by Fig. 13.23
and Fig. 6.3.

312
13
Calculus: Derivatives
Fig. 13.23 ∂z/∂x describes
the slopes of these contour
lines
Fig. 13.24 ∂z/∂y describes
the slopes of these contour
lines
13.14.2 Mixed Partial Derivatives
We have seen that, given a function of the form f (u,v), the partial derivatives ∂f/∂u
and ∂f/∂v provide the relative instantaneous changes in f and u, and f and v, re-
spectively, whilst the second independent variable remains ﬁxed. However, nothing
prevents us from differentiating ∂f/∂u with respect to v, whilst keeping u constant:
∂
∂v
∂f
∂u

which is also written as
∂2f
∂v∂u
and is a mixed partial derivative.
Example 13.18 Find the mixed partial derivative of f , given
f (u,v) = u3v4.

13.14
Partial Derivatives
313
Therefore,
∂f
∂u = 3u2v4
and
∂2f
∂v∂u = 12u2v3.
It should be no surprise that reversing the differentiation gives the same result. Let
f (u,v) = u3v4
then
∂f
∂v = 4u3v3
and
∂2f
∂u∂v = 12u2v3.
Generally, for continuous functions, we can write
∂2f
∂u∂v = ∂2f
∂v∂u.
Example 13.19
The formula for the volume of a cylinder is given by V (r,h) =
πr2h, where r and h are the cylinder’s radius and height, respectively. The mixed
partial derivative is computed as follows.
V (r,h) = πr2h
∂V
∂r = 2πhr
∂2V
∂h∂r = 2πr
or
V (r,h) = πr2h
∂V
∂h = πr2
∂2V
∂r∂h = 2πr.
Example 13.20 Given
f (u,v) = sin(4u)cos(3v)

314
13
Calculus: Derivatives
then
∂f
∂u = 4cos(4u)cos(3v)
∂2f
∂v∂u = −12cos(4u)sin(3v)
or
∂f
∂v = −3sin(4u)sin(3v)
∂2f
∂u∂v = −12cos(4u)sin(3v).
13.15 Chain Rule
Earlier, we came across the chain rule for computing the derivatives of functions
of functions. For example, to compute the derivative of y = sin2 x we substitute
u = x2, then
y = u
dy
du = cosu
= cosx2.
Next, we compute du/dx:
u = x2
du
dx = 2x
and dy/dx is the product of the two derivatives using the chain rule:
dy
dx = dy
du · du
dx
=

cosx2
2x
= 2x cosx2.
But say we have a function where w is a function of two variables x and y, which
in turn, are a function of u and v. Then we have
w = f (x,y)
x = r(u,v)
y = s(u,v).

13.15
Chain Rule
315
With such a scenario, we have the following partial derivatives:
∂w
∂x ,
∂w
∂y
∂w
∂u ,
∂w
∂v
∂x
∂u,
∂x
∂v
∂y
∂u,
∂y
∂v .
These are chained together as follows
∂w
∂u = ∂w
∂x · ∂x
∂u + ∂w
∂y · ∂y
∂u
(13.6)
∂w
∂v = ∂w
∂x · ∂x
∂v + ∂w
∂y · ∂y
∂v .
(13.7)
Example 13.21 Find ∂w/∂u and ∂w/∂v, given
w = f (2x + 3y)
x = r

u2 + v2
y = s

u2 −v2
.
Therefore
∂w
∂x = 2,
∂w
∂y = 3,
∂x
∂u = 2u,
∂x
∂v = 2v,
∂y
∂u = 2u,
∂y
∂v = −2v,
and plugging these into (13.6) and (13.7) we have
∂w
∂u = ∂w
∂x
∂x
∂u + ∂w
∂y
∂y
∂u
= 2 × 2u + 3 × 2u
= 10u
∂w
∂v = ∂w
∂x
∂x
∂v + ∂w
∂y
∂y
∂v
= 2 × 2v + 3 × (−2v)
= −2v.

316
13
Calculus: Derivatives
Thus, when u = 2 and v = 1
∂w
∂u = 20,
and
∂w
∂v = −2.
13.16 Total Derivative
Given a function with three independent variables, such as w = f (x,y,t), where
x = g(t) and y = h(t), there are three primary partial derivatives:
∂w
∂x ,
∂w
∂y ,
∂w
∂t ,
which show the differential change of w with x, y and t respectively. There are also
three derivatives:
dx
dt ,
dy
dt ,
dt
dt ,
where dt/dt = 1. The partial and ordinary derivatives can be combined to create the
total derivative which is written
dw
dt = ∂w
∂x
dx
dt + ∂w
∂y
dy
dt + ∂w
∂t .
dw/dt measures the instantaneous change of w relative to t, when all three inde-
pendent variables change.
Example 13.22 Find dw/dt, given
w = x2 + xy + y3 + t2
x = 2t
y = t −1.
Therefore,
dx
dt = 2
dy
dt = 1
∂w
∂x = 2x + y = 4t + t −1 = 5t −1
∂w
∂y = x + 3y2 = 2t + 3(t −1)2 = 3t2 −4t + 3
∂w
∂t = 2t

13.17
Summary
317
dw
dt = ∂w
∂x
dx
dt + ∂w
∂y
dy
dt + ∂w
∂t
= (5t −1)2 +

3t2 −4t + 3

+ 2t = 3t2 + 8t + 1
and the total derivative equals
dw
dt = 3t2 + 8t + 1
and when t = 1, dw/dt = 12.
13.17 Summary
This chapter has shown how limits provide a useful tool for computing a function’s
derivative. Basically, the function’s independent variable is disturbed by a very small
quantity, typically δx, which alters the function’s value. The quotient
f (x + δx) −f (x)
δx
is a measure of the function’s rate of change relative to its independent variable. By
making δx smaller and smaller towards zero, we converge towards a limiting value
called the function’s derivative. Unfortunately, not all functions possess a derivative,
therefore we can only work with functions that can be differentiated.
We have also come across integration—the inverse of differentiation—and as we
compute the derivatives of other functions, the associated antiderivative will also be
included.
We have seen how to differentiate generic functions such as sums, products, quo-
tients and a function of a function, and we have also seen how to address explicit and
implicit forms. These techniques were then used to differentiate exponential, loga-
rithmic, trigonometric and hyperbolic functions, which will be employed in later
chapters to solve various problems. Where relevant, integrals of certain functions
have been included to show the intimate relationship between derivatives and an-
tiderivatives.
Hopefully, it is now clear that differentiation is like an operator—in that it de-
scribes how fast a function changes relative to its independent variable in the form
of another function.

Chapter 14
Calculus: Integration
14.1 Introduction
In this chapter I develop the idea that integration is the inverse of differentiation, and
examine standard algebraic strategies for integrating functions, where the derivative
is unknown; these include simple algebraic manipulation, trigonometric identities,
integration by parts, integration by substitution and integration using partial frac-
tions.
14.2 Indeﬁnite Integral
In the previous chapter we have seen that given a simple function, such as
y = sinx + 23
dy
dx = cosx
and the constant term 23 disappears. Inverting the process, we begin with
dy = cosx dx
and integrating:
y =

cosx dx
= sinx + C.
An integral of the form

f (x)dx
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_14, © Springer-Verlag London 2014
319

320
14
Calculus: Integration
Fig. 14.1 A discontinuous
square-wave function
is known as an indeﬁnite integral; and as we don’t know whether the original func-
tion contains a constant term, a constant C has to be included. Its value remains
undetermined unless we are told something about the original function. In this ex-
ample, if we are told that when x = π/2, y = 24, then
24 = sinπ/2 + C
= 1 + C
C = 23.
14.3 Integration Techniques
14.3.1 Continuous Functions
Functions come in all sorts of shapes and sizes, which is why we have to be very
careful before they are differentiated or integrated. If a function contains any form of
discontinuity, then it cannot be differentiated or integrated. For example, the square-
wave function shown in Fig. 14.1 cannot be differentiated as it contains discontinu-
ities. Consequently, to be very precise, we identify an interval [a,b], over which a
function is analysed, and stipulate that it must be continuous over this interval. For
example, a and b deﬁne the upper and lower bounds of the interval such that
a ≤x ≤b
then we can say that for f (x) to be continuous
lim
h→0f (x + h) = f (x).
Even this needs further clariﬁcation as h must not take x outside of the permitted
interval. So, from now on, we assume that all functions are continuous and can be
integrated without fear of singularities.
14.3.2 Difﬁcult Functions
There are many functions that cannot be differentiated and represented by a ﬁnite
collection of elementary functions. For example, the derivative f ′(x) = sinx/x does
not exist, which precludes the possibility of its integration. Figure 14.2 shows this

14.3
Integration Techniques
321
Fig. 14.2 Graph of
y = (sinx)/x
Fig. 14.3 Graph of
y = √x sinx
function, and even though it is continuous, its derivative and integral can only be
approximated. Similarly, the derivative f ′(x) = √x sinx does not exist, and also
precludes the possibility of its integration. Figure 14.3 shows this continuous func-
tion. So now let’s examine how most functions have to be rearranged to secure their
integration.
14.3.3 Trigonometric Identities
Sometimes it is possible to simplify the integrand by substituting a trigonometric
identity.
Example 14.1 Evaluate

sin2 x dx.
The identity sin2 x = 1
2(1 −cos2x) converts the square function of x into a double-
angle representation:

322
14
Calculus: Integration
Fig. 14.4 The graphs of
y = sin2 x (broken line) and
y = 1
2x −1
4 sin2x

sin2 x dx = 1
2

(1 −cos2x)dx
= 1
2

dx −1
2

cos2x dx
= 1
2x −1
4 sin2x + C.
Figure 14.4 shows the graphs of y = sin2 x and y = 1
2x −1
4 sin2x.
Example 14.2 Evaluate

cos2 x dx.
The identity cos2 x = 1
2(cos2x + 1) converts the square function of x into a double-
angle representation:

cos2 x dx = 1
2

(cos2x + 1)dx
= 1
2

cos2x dx + 1
2

dx
= 1
4 sin2x + 1
2x + C.
Figure 14.5 shows the graphs of y = cos2 x and y = 1
4 sin2x + 1
2x.
Example 14.3
Evaluate

tan2 x dx.

14.3
Integration Techniques
323
Fig. 14.5 The graphs of
y = cos2 x (broken line) and
y = 1
4 sin2x + 1
2x
Fig. 14.6 The graphs of
y = tan2 x (broken line) and
y = tanx −x
The identity sec2 x = 1 + tan2 x permits us to write

tan2 x dx =
 
sec2 x −1

dx
=

sec2 x dx −

dx
= tanx −x + C.
Figure 14.6 shows the graphs of y = tan2 x and y = tanx −x.
Example 14.4 Evaluate

sin3x cosx dx.
The identity
2sina cosb = sin(a + b) + sin(a −b)

324
14
Calculus: Integration
Fig. 14.7 The graphs of y = sin3x cosx (broken line) and y = −1
8 cos4x −1
4 cos2x
converts the integrand’s product into the sum and difference of two angles:
sin3x cosx = 1
2(sin4x + sin2x)

sin3x cosx dx = 1
2

sin4x + sin2x dx
= 1
2

sin4x dx + 1
2

sin2x dx
= −1
8 cos4x −1
4 cos2x + C.
Figure 14.7 shows the graphs of y = sin3x cosx and y = −1
8 cos4x −1
4 cos2x.
14.3.4 Exponent Notation
Radicals are best replaced by their equivalent exponent notation.
Example 14.5 Evaluate

2
4√x dx.
The 2 is moved outside the integral, and the integrand is converted into an exponent
form:
2

1
4√x dx = 2

x−1
4
= 2
x
3
4
3
4

+ C

14.3
Integration Techniques
325
Fig. 14.8 The graphs of
y = 2/ 4√x (broken line) and
y = 8x
3
4 /3
= 2
4
3x
3
4

+ C
= 8
3x
3
4 + C.
Figure 14.8 shows the graphs of y = 2/ 4√x and y = 8x
3
4 /3.
14.3.5 Completing the Square
Where possible, see if an integrand can be simpliﬁed by completing the square.
Example 14.6 Evaluate

1
x2 −4x + 8 dx.
We have already seen that

1
1 + x2 dx = arctanx + C
and it’s not too difﬁcult to prove that

1
a2 + x2 dx = 1
a arctan x
a + C.
Therefore, if we can manipulate an integrand into this form, then the integral will
reduce to an arctan result. The following needs no manipulation:

1
4 + x2 dx = 1
2 arctan x
2 + C.

326
14
Calculus: Integration
Fig. 14.9 The graphs of
y = 1/(x2 −4x + 8) (broken
line) and y =

arctan x−2
2

/2
However, the original integrand has x2 −4x + 8 as the denominator, which is re-
solved by completing the square:
x2 −4x + 8 = 4 + (x −2)2.
Therefore,

1
x2 −4x + 8 dx =

1
22 + (x −2)2 dx
= 1
2 arctan
x −2
2

+ C.
Figure 14.9 shows the graphs of y = 1/(x2 −4x + 8) and y =

arctan x−2
2

/2.
Example 14.7 Evaluate

1
x2 + 6x + 10 dx.
Factorize the denominator:

1
x2 + 6x + 10 dx =

1
12 + (x + 3)2 dx
= arctan(x + 3) + C.
Figure 14.10 shows the graphs of y = 1/(x2 + 6x + 10) and y = arctan(x + 3).
14.3.6 The Integrand Contains a Derivative
Example 14.8 Evaluate
 arctanx
1 + x2 dx.

14.3
Integration Techniques
327
Fig. 14.10 The graphs of
y = 1/(x2 + 6x + 10) (broken
line) and y = arctan(x + 3)
Fig. 14.11 The graphs of
y = arctanx/(1 + x2) (broken
line) and y = 1
2(arctanx)2
Knowing that
d
dx arctanx =
1
1 + x2 .
Let u = arctanx, then
du
dx =
1
1 + x2
and
 arctanx
1 + x2 dx =

udu
= u2
2 + C
= 1
2(arctanx)2 + C.
Figure 14.11 shows the graphs of y = arctanx/(1 + x2) and y = 1
2(arctanx)2.

328
14
Calculus: Integration
Fig. 14.12 The graphs of
y = cosx/sinx (broken line)
and y = ln|sinx|
Example 14.9 Evaluate
 cosx
sinx dx.
Knowing that
d
dx sinx = cosx
let u = sinx, then
du
dx = cosx
and
 cosx
sinx dx =
 1
u du
= ln|u| + C
= ln|sinx| + C.
Figure 14.12 shows the graphs of y = cosx/sinx and y = ln|sinx|.
Example 14.10 Evaluate
 sinx
cosx dx.
Knowing that
d
dx cosx = −sinx
let u = cosx, then
du
dx = −sinx
du = −sinx dx

14.3
Integration Techniques
329
Fig. 14.13 The graphs of
y = sinx/cosx (broken line)
and y = ln|secx|
and
 sinx
cosx dx =
 1
u(−1)du
= −ln|u| + C
= −ln|cosx| + C
= ln|cosx|−1 + C
= ln|secx| + C.
Figure 14.13 shows the graphs of y = sinx/cosx and y = ln|secx|.
14.3.7 Converting the Integrand into a Series of Fractions
Integration is often made easier by converting an integrand into a series of fractions.
Example 14.11 Evaluate
 4x3 + x2 −8 + 12x cosx
4x
dx.
Divide the numerator by 4x:
 4x3 + x2 −8 + 12x cosx
4x
dx =

x2 dx +
 x
4 dx −
 2
x dx +

3cosx dx
= x3
3 + x2
8 −2ln|x| + 3sinx + C.
Figure 14.14 shows the graphs of y = (4x3+x2−8+12x cosx)/4x and y = x3/3+
x2/8 −2ln|x| + 3sinx.

330
14
Calculus: Integration
Fig. 14.14 The graphs of
y = (4x3 + x2 −8 +
12x cosx)/4x (broken line)
and y = x3/3 + x2/8 −
2ln|x| + 3sinx
Example 14.12 Evaluate
 2sinx + cosx + secx
cosx
dx.
Divide the numerator by cosx:
 2sinx + cosx + secx
cosx
dx = 2

tanx dx +

1dx +

sec2 x dx
= 2ln|secx| + x + tanx + C.
Figure 14.15 shows the graphs of y = (2sinx + cosx + secx)/cosx and y =
2ln|secx| + x + tanx.
14.3.8 Integration by Parts
Integration by parts is based upon the rule for differentiating function products
where
d
dx uv = udv
dx + v du
dx
and integrating throughout, we have
uv =

uv′ dx +

vu′ dx
which rearranged, gives

uv′ dx = uv −

vu′ dx.
Thus, if an integrand contains a product of two functions, we can attempt to integrate
it by parts.

14.3
Integration Techniques
331
Fig. 14.15 The graphs of
y = (2sinx + cosx +
secx)/cosx (broken line) and
y = 2ln|secx| + x + tanx
Example 14.13 Evaluate

x sinx dx.
In this case, we try the following:
u = x
and
v′ = sinx
therefore
u′ = 1
and
v = C1 −cosx.
Integrating by parts:

uv′ dx = uv −

vu′ dx

x sinx dx = x(C1 −cosx) −

(C1 −cosx)(1)dx
= C1x −x cosx −C1x + sinx + C
= −x cosx + sinx + C.
Figure 14.16 shows the graphs of y = x sinx and y = −x cosx + sinx.
Note the problems that arise if we make the wrong substitution:
u = sinx
and
v′ = x
therefore
u′ = cosx
and
v = x2
2 + C1.
Integrating by parts:

uv′ dx = uv −

vu′ dx

332
14
Calculus: Integration
Fig. 14.16 The graphs of
y = x sinx (broken line) and
y = −x cosx + sinx

x sinx dx = sinx
x2
2 + C1

−
 x2
2 + C1

cosx dx
which requires to be integrated by parts, and is even more difﬁcult, which suggests
that we made the wrong substitution.
Example 14.14 Evaluate

x cosx dx.
In this case, we try the following:
u = x
and
v′ = cosx
therefore
u′ = 1
and
v = sinx + C1.
Integrating by parts:

uv′ dx = uv −

vu′ dx

x cosx dx = x(sinx + C1) −

(sinx + C1)(1)dx
= x sinx + C1x + cosx −C1x + C
= x sinx + cosx + C.
Figure 14.17 shows the graphs of y = x cosx and y = x sinx + cosx.
Example 14.15 Evaluate

x2 cosx dx.

14.3
Integration Techniques
333
Fig. 14.17 The graphs of
y = x cosx (broken line) and
y = x sinx + cosx
In this case, we try the following:
u = x2
and
v′ = cosx
therefore
u′ = 2x
and
v = sinx + C1.
Integrating by parts:

uv′ dx = uv −

vu′ dx

x2 cosx dx = x2(sinx + C1) −2

(sinx + C1)(x)dx
= x2 sinx + C1x2 −2C1

x dx −2

x sinx dx
= x2 sinx + C1x2 −2C1
x2
2 + C2

−2

x sinx dx
= x2 sinx −C3 −2

x sinx dx.
At this point we come across

x sinx dx, which we have already solved:

x2 cosx dx = x2 sinx −C3 −2(−x cosx + sinx + C4)
= x2 sinx −C3 + 2x cosx −2sinx −C5
= x2 sinx + 2x cosx −2sinx + C.
Figure 14.18 shows the graphs of y = x2 cosx and y = x2 sinx + 2x cosx −2sinx.

334
14
Calculus: Integration
Fig. 14.18 The graphs of
y = x2 cosx (broken line) and
y = x2 sinx+2x cosx−2sinx
Example 14.16 Evaluate

x2 sinx dx.
In this case, we try the following:
u = x2
and
v′ = sinx
therefore
u′ = 2x
and
v = −cosx + C1.
Integrating by parts:

uv′ dx = uv −

vu′ dx

x2 sinx dx = x2(−cosx + C1) −2

(−cosx + C1)(x)dx
= −x2 cosx + C1x2 −2C1

x dx + 2

x cosx dx
= −x2 cosx + C1x2 −2C1
x2
2 + C2

+ 2

x cosx dx
= −x2 cosx −C3 + 2

x cosx dx.
At this point we come across

x cosx dx, which we have already solved:

x2 sinx dx = −x2 cosx −C3 + 2(x sinx + cosx + C4)
= −x2 cosx −C3 + 2x sinx + 2cosx + C5
= −x2 cosx + 2x sinx + 2cosx + C.

14.3
Integration Techniques
335
Fig. 14.19 The graphs of
y = x2 sinx (broken line)
and y = −x2 cosx+2x sinx+
2cosx
Figure 14.19 shows the graphs of y = x2 sinx and y = −x2 cosx + 2x sinx +
2cosx.
In future, we omit the integration constant, as it is cancelled out during the inte-
gration calculation.
Example 14.17 Evaluate

x lnx dx.
In this case, we try the following:
u = lnx
and
v′ = x
therefore
u′ = 1
x
and
v = 1
2x2.
Integrating by parts:

uv′ dx = uv −

vu′ dx

x lnx dx = 1
2x2 lnx −
 1
2x2
1
x dx
= 1
2x2 lnx −1
2

x dx
= 1
2x2 lnx −x2
4 + C.
Figure 14.20 shows the graphs of y = x lnx and y = 1
2x2 lnx −x2/4.

336
14
Calculus: Integration
Fig. 14.20 The graphs of
y = x lnx (broken line) and
y = 1
2x2 lnx −x2/4
Example 14.18 Evaluate
 	
1 + x2 dx.
Although this integrand does not look as though it can be integrated by parts, if we
rewrite it as
 	
1 + x2(1)dx.
then we can use the formula.
Let
u =
	
1 + x2
and
v′ = 1
therefore
u′ =
x
√
1 + x2
and
v = x.
Integrating by parts:

uv′ dx = uv −

vu′ dx
 	
1 + x2 dx = x
	
1 + x2 −

x2
√
1 + x2 dx.
Now we simplify the right-hand integrand:
 	
1 + x2 dx = x
	
1 + x2 −
 (1 + x2) −1
√
1 + x2
dx
= x
	
1 + x2 −

1 + x2
√
1 + x2 dx +

1
√
1 + x2 dx
= x
	
1 + x2 −
 	
1 + x2 dx + arsinhx + C1.

14.3
Integration Techniques
337
Fig. 14.21 The graphs of
y =
√
1 + x2 (broken line)
and y = 1
2x
√
1 + x2 +
1
2 arsinhx
Now we have the original integrand on the right-hand side, therefore
2
 	
1 + x2 dx = x
	
1 + x2 + arsinhx + C1
 	
1 + x2 dx = 1
2x
	
1 + x2 + 1
2 arsinhx + C.
Figure 14.21 shows the graphs of y =
√
1 + x2 and y = 1
2x
√
1 + x2 + 1
2 arsinhx.
14.3.9 Integration by Substitution
Integration by substitution is based upon the chain rule for differentiating a function
of a function, which states that if y is a function of u, which in turn is a function
of x, then
dy
dx = dy
du
du
dx .
Example 14.19 Evaluate

x2	
x3 dx.
This is easily solved by rewriting the integrand:

x2	
x3 dx =

x
7
2 dx
= 2
9x
9
2 + C.

338
14
Calculus: Integration
Fig. 14.22 The graphs of
y = x2√
x3 + 1 (broken line)
and y = 2
9(x3 + 1)
3
2
However, introducing a constant term within the square-root requires integration by
substitution. For example, evaluate

x2	
x3 + 1dx.
First, we let u = x3 + 1, then
du
dx = 3x2
or
dx = du
3x2 .
Substituting u and dx in the integrand gives

x2	
x3 + 1dx =

x2√u du
3x2
= 1
3
 √udu
= 1
3

u
1
2 du
= 1
3 · 2
3u
3
2 + C
= 2
9

x3 + 1
 3
2 + C.
Figure 14.22 shows the graphs of y = x2√
x3 + 1 and y = 2
9(x3 + 1)
3
2 .
Example 14.20 Evaluate

2sinx · cosx dx.

14.3
Integration Techniques
339
Fig. 14.23 The graphs of
y = 2sinx · cosx (broken
line) and y = sin2 x
Integrating by substitution we let u = sinx, then
du
dx = cosx
or
dx = du
cosx .
Substituting u and dx in the integrand gives

2sinx · cosx dx = 2

ucosx du
cosx
= 2

udu
= u2 + C1
= sin2 x + C.
Figure 14.23 shows the graphs of y = 2sinx · cosx and y = sin2 x.
Example 14.21 Evaluate

2ecos2x sinx · cosx dx.
Integrating by substitution, let u = cos2x, then
du
dx = −2sin2x
or
dx = −
du
2sin2x .
Substituting a double-angle identity, u and du:

2ecos2x sinx · cosx dx = −

eu sin2x
du
2sin2x
= −1
2

eu du

340
14
Calculus: Integration
Fig. 14.24 The graphs of
y = 2ecos2x sinx cosx
(broken line) and
y = −1
2ecos2x
= −1
2eu + C
= −1
2ecos2x + C.
Figure 14.24 shows the graphs of y = 2ecos2x sinx · cosx and y = −1
2ecos2x.
Example 14.22 Evaluate

cosx
(1 + sinx)3 dx.
Integrating by substitution, let u = 1 + sinx, then
du
dx = cosx
or
dx = du
cosx .

cosx
(1 + sinx)3 dx =
 cosx
u3
du
cosx
=

u−3 du
= −1
2u−2 + C
= −1
2(1 + sinx)−2 + C
= −
1
2(1 + sinx)2 + C.
Figure 14.25 shows the graphs of y = cosx/(1 + sinx)3 and y = −1/2(1 + sinx)2.

14.3
Integration Techniques
341
Fig. 14.25 The graphs of
y = cosx/(1 + sinx)3
(broken line) and
y = −1/2(1 + sinx)2
Example 14.23 Evaluate

sin2x dx.
Integrating by substitution, let u = 2x, then
du
dx = 2
or
dx = du
2 .

sin2x dx = 1
2

sinudu
= −1
2 cosu + C
= −1
2 cos2x + C.
Figure 14.26 shows the graphs of y = sin2x and y = −1
2 cos2x.
14.3.10 Partial Fractions
Integration by partial fractions is used when an integrand’s denominator contains
a product that can be split into two fractions. For example, it should be possible to
convert

3x + 4
(x + 1)(x + 2) dx
into

A
x + 1 dx +

B
x + 2 dx

342
14
Calculus: Integration
Fig. 14.26 The graphs of
y = sin2x (broken line) and
y = −1
2 cos2x
which individually, are easy to integrate. Let’s compute A and B:
3x + 4
(x + 1)(x + 2) =
A
x + 1 +
B
x + 2
3x + 4 = A(x + 2) + B(x + 1)
= Ax + 2A + Bx + B.
Equating constants and terms in x:
4 = 2A + B
(14.1)
3 = A + B.
(14.2)
Subtracting (14.2) from (14.1), gives A = 1 and B = 2. Therefore,

3x + 4
(x + 1)(x + 2) dx =

1
x + 1 dx +

2
x + 2 dx
= ln(x + 1) + 2ln(x + 2) + C.
Figure 14.27 shows the graphs of y = (3x +4)/((x +1)(x +2)) and y = ln(x +1)+
2ln(x + 2).
Example 14.24 Evaluate

5x −7
(x −1)(x −2) dx.
Integrating by partial fractions:
5x −7
(x −1)(x −2) =
A
x −1 +
B
x −2
5x −7 = A(x −2) + B(x −1)
= Ax + Bx −2A −B.

14.3
Integration Techniques
343
Fig. 14.27 The graphs of
y = (3x +4)/((x +1)(x +2))
(broken line) and
y = ln(x + 1) + 2ln(x + 2)
Fig. 14.28 The graphs of
y = (5x −7)/((x −1)(x −2))
(broken line) and
y = 2ln(x −1) + 3ln(x −2)
Equating constants and terms in x:
−7 = −2A −B
(14.3)
5 = A + B.
(14.4)
Subtracting (14.3) from (14.4), gives A = 2 and B = 3. Therefore,

3x + 4
(x −1)(x −2) dx =

2
x −1 dx +

3
x −2 dx
= 2ln(x −1) + 3ln(x −2) + C.
Figure 14.28 shows the graphs of y = (5x −7)/((x −1)(x −2)) and y =
2ln(x −1) + 3ln(x −2).
Example 14.25 Evaluate
 6x2 + 5x −2
x3 + x2 −2x dx.

344
14
Calculus: Integration
Fig. 14.29 The graphs of
y = (6x2 + 5x −2)/
(x3 + x2 −2x) (broken line)
and y = lnx + 2ln(x + 2) +
3ln(x −1)
Integrating by partial fractions:
6x2 + 5x −2
x3 + x2 −2x = A
x +
B
x + 2 +
C
x −1
6x2 + 5x −2 = A(x + 2)(x −1) + Bx(x −1) + Cx(x + 2)
= Ax2 + Ax −2A + Bx2 −Bx + Cx2 + 2Cx.
Equating constants, terms in x and x2:
−2 = −2A
(14.5)
5 = A −B + 2C
(14.6)
6 = A + B + C.
(14.7)
Manipulating (14.5), (14.6) and (14.7): A = 1, B = 2 and C = 3, therefore,
 6x2 + 5x −2
x3 + x2 −2x dx =
 1
x dx +

2
x + 2 dx +

3
x −1 dx
= lnx + 2ln(x + 2) + 3ln(x −1) + C.
Figure 14.29 shows the graphs of y = (6x2 + 5x −2)/(x3 + x2 −2x) and y =
lnx + 2ln(x + 2) + 3ln(x −1).
14.4 Area Under a Graph
The ability to calculate the area under a graph is one of the most important discover-
ies of integral calculus. Prior to calculus, area was computed by dividing a zone into
very small strips and summing the individual areas. The accuracy of the result is
improved simply by making the strips smaller and smaller, taking the result towards
some limiting value. In this section, I show how integral calculus provides a way to
compute the area between a function’s graph and the x- and y-axis.

14.5
Calculating Areas
345
Fig. 14.30 Area of the
shaded zone is A = x
Fig. 14.31 Area of the
shaded zone is A = x2
14.5 Calculating Areas
Before considering the relationship between area and integration, let’s see how area
is calculated using functions and simple geometry.
Figure 14.30 shows the graph of y = 1, where the area A of the shaded zone is
A = x,
x > 0.
For example, when x = 4, A = 4, and when x = 10, A = 10. An interesting obser-
vation is that the original function is the derivative of A:
dA
dx = 1 = y.
Figure 14.31 shows the graph of y = 2x. The area A of the shaded triangle is
A = 1
2base × height
= 1
2x × 2x
= x2.

346
14
Calculus: Integration
Fig. 14.32 Graph of
y =
√
r2 −x2
Thus, when x = 4, A = 16. Once again, the original function is the derivative of A:
dA
dx = 2x = y
which is no coincidence.
Finally, Fig. 14.32 shows a circle where x2 + y2 = r2, and the curve of the ﬁrst
quadrant is described by the function
y =
	
r2 −x2,
0 ≥x ≥r.
The total area of the shaded zones is the sum of the two parts A1 and A2. To simplify
the calculations the function is deﬁned in terms of the angle θ, such that
x = r sinθ
and
y = r cosθ.
Therefore,
A1 = r2θ
2
A2 = 1
2(r cosθ)(r sinθ) = r2
4 sin2θ
A = A1 + A2
= r2
2

θ + sin2θ
2

.
Differentiating A with respect to θ:
dA
dθ = r2
2 (1 + cos2θ) = r2 cos2 θ.

14.5
Calculating Areas
347
But we want the derivative dA/dx, which requires the chain rule
dA
dx = dA
dθ
dθ
dx
where
dx
dθ = r cosθ
or
dθ
dx =
1
r cosθ
therefore,
dA
dx = r2 cos2 θ
r cosθ
= r cosθ = y
which is the equation for the quadrant. When θ = π/2, A equals the area of a quad-
rant of a unit-radius circle:
A = r2
2

θ + sin2θ
2

= 1
2
π
2 + sinπ
2

= 1
2
π
2

= π
4
and the area of a unit-radius circle is four quadrants: A = π.
Hopefully, these three examples provide strong evidence that the derivative of
the function for the area under a graph, equals the graph’s function:
dA
dx = f (x)
and
dA = f (x)dx
which implies that
A =

f (x)dx.
Now let’s prove this observation using Fig. 14.33, which shows a continuous
function y = f (x). Next, we deﬁne a function A(x) to represent the area under the
graph over the interval [a,x]. δA is the area increment between x and x + δx, and
δA ≈f (x) · δx.

348
14
Calculus: Integration
Fig. 14.33 Relationship
between y = f (x) and A(x)
We can also reason that
δA = A(x + δx) −A(x) ≈f (x) · δx
and the derivative dA/dx is the limiting condition
dA
dx = lim
δx→0
A(x + δx) −A(x)
δx
= lim
δx→0
f (x) · δx
δx
= f (x)
thus,
dA
dx = f (x).
This can be rearranged as
dA = f (x)dx
whose antiderivative is
A(x) =

f (x)dx.
The function A(x) computes the area over the interval [a,b] and is represented by
A(x) =
 b
a
f (x)dx
which is called the integral or deﬁnite integral.
Let’s assume that A(b) is the area under the graph of f (x) over the interval [0,b],
as shown in Fig. 14.34, and is written
A(b) =
 b
0
f (x)dx.
Similarly, let A(a) be the area under the graph of f (x) over the interval [0,a], as
shown in Fig. 14.35, and is written
A(a) =
 a
0
f (x)dx.

14.5
Calculating Areas
349
Fig. 14.34 A(b) is the area
under the graph y = f (x),
0 ≥x ≥b
Fig. 14.35 A(a) is the area
under the graph y = f (x),
0 ≥x ≥a
Fig. 14.36 A(b) −A(a) is
the area under the graph
y = f (x), a ≥x ≥b
Figure 14.36 shows that the area of the shaded zone over the interval [a,b] is
calculated by
A = A(b) −A(a)
which is written
A =
 b
0
f (x)dx −
 a
0
f (x)dx
and is contracted to
A =
 b
a
f (x)dx.
(14.8)

350
14
Calculus: Integration
Fig. 14.37 Area under the
graph is
 4
1 1dx
The fundamental theorem of calculus states that the deﬁnite integral
 b
a
f (x)dx = F(b) −F(a)
where
F(a) =

f (x)dx,
x = a
F(b) =

f (x)dx,
x = b.
In order to compute the area beneath a graph of f (x) over the interval [a,b], we
ﬁrst integrate the graph’s function
F(x) =

f (x)dx
and then calculate the area, which is the difference
A = F(b) −F(a).
Let’s show how (14.8) is used in the context of the earlier three examples.
Example 14.26
Calculate the area over the interval [1,4] for y = 1, as shown in
Fig. 14.37. We begin with
A =
 4
1
1dx.
Next, we integrate the function, and transfer the interval bounds employing the sub-
stitution symbol
4
1, or square brackets

 4
1. Using
4
1, we have
A =
4
1x
= 4 −1
= 3

14.5
Calculating Areas
351
Fig. 14.38 Area under the
graph is
 4
1 2x dx
or using

 4
1, we have
A =

x
4
1
= 4 −1
= 3.
I will continue with square brackets.
Example 14.27 Calculate the area over the interval [1,4] for y = 2x, as shown in
Fig. 14.38. We begin with
A =
 4
1
2x dx.
Next, we integrate the function and evaluate the area
A =

x24
1
= 16 −1
= 15.
Example 14.28 Calculate the area over the interval [0,r] for y =
√
r2 −x2, which
is the equation for a circle, as shown in Fig. 14.32. We begin with
A =
 r
0
	
r2 −x2 dx.
(14.9)
Unfortunately, (14.9) contains a function of a function, which is resolved by substi-
tuting another independent variable. In this case, the geometry of the circle suggests
x = r sinθ
therefore,
	
r2 −x2 = r cosθ

352
14
Calculus: Integration
and
dx
dθ = r cosθ.
(14.10)
However, changing the independent variable requires changing the interval for the
integral. In this case, changing 0 ≥x ≥r into θ1 ≥θ ≥θ2:
When x = 0, r sinθ1 = 0, therefore θ1 = 0.
When x = r, r sinθ2 = r, therefore θ2 = π/2.
Thus, the new interval is [0,π/2].
Finally, the dx in (14.9) has to be changed into dθ, which using (14.10) makes
dx = r cosθ dθ.
Now we are in a position to rewrite the original integral using θ as the independent
variable:
A =

π
2
0
(r cosθ)(r cosθ)dθ
= r2

π
2
0
cos2 θ dθ
= r2
2

π
2
0
1 + cos2θ dθ
= r2
2

θ + 1
2 sin2θ
 π
2
0
= r2
2
π
2

= πr2
4
which makes the area of a full circle πr2.
14.6 Positive and Negative Areas
Area in the real world is always regarded as a positive quantity—no matter how it
is measured. In mathematics, however, area is often a signed quantity, and is deter-
mined by the clockwise or anticlockwise direction of vertices. As we generally use
a left-handed Cartesian axial system in calculus, areas above the x-axis are positive,
whilst areas below the x-axis are negative. This can be illustrated by computing the
area of the positive and negative parts of a sine wave.

14.6
Positive and Negative Areas
353
Fig. 14.39 The two areas
associated with a sine wave
Figure 14.39 shows a sine wave over one cycle, where the area above the x-axis is
labelled A1, and the area below the x-axis is labelled A2. These areas are computed
as follows.
A1 =
 π
0
sinx dx
=

−cosx
π
0
= [1 + 1]
= 2.
However, A2 gives a negative result:
A2 =
 2π
π
sinx dx
=

−cosx
2π
π
= [−1 −1]
= −2.
This means that the area is zero over the bounds 0 to 2π,
A2 =
 2π
0
sinx dx
=

−cosx
2π
0
= [−1 + 1]
= 0.
Consequently, one must be very careful using this technique for functions that are
negative in the interval under investigation. Figure 14.40 shows a sine wave over the
interval [0,π] and its accumulated area.

354
14
Calculus: Integration
Fig. 14.40 The accumulated
area of a sine wave
14.7 Area Between Two Functions
Figure 14.41 shows the graphs of y = x2 and y = x3, with two areas labelled A1
and A2. A1 is the area trapped between the two graphs over the interval [−1,0] and
A2 is the area trapped between the two graphs over the interval [0,1]. These areas
are calculated very easily: in the case of A1 we sum the individual areas under the
two graphs, remembering to reverse the sign for the area associated with y = x3.
For A2 we subtract the individual areas under the two graphs.
A1 =
 0
−1
x2 dx −
 0
−1
x3 dx
=
x3
3
0
−1
−
x4
4
0
−1
= 1
3 + 1
4
= 7
12.
A2 =
 1
0
x2 dx −
 1
0
x3 dx
=
x3
3
1
0
−
x4
4
1
0
= 1
3 −1
4
= 1
12.
Note, that in both cases the calculation is the same, which implies that when we
employ
A =
 b
a

f (x) −g(x)

dx
A is always the area trapped between f (x) and g(x) over the interval [a,b].

14.8
Areas with the y-Axis
355
Fig. 14.41 Two areas
between y = x2 and y = x3
Fig. 14.42 The area between
y = sinx and y = 0.5
Let’s take another example, by computing the area A between y = sinx and the
line y = 0.5, as shown in Fig. 14.42. The horizontal line intersects the sine curve at
x = 30◦and x = 150◦, marked in radians as 0.5236 and 2.618 respectively.
A =
 150◦
30◦
sinx dx −
 5π/6
π/6
0.5dx
=

−cosx
150◦
30◦−1
2

x
5π/6
π/6
=
√
3
2 +
√
3
2

−1
2
5π
6 −π
6

=
√
3 −π
3
≈0.685.
14.8 Areas with the y-Axis
So far we have only calculated areas between a function and the x-axis. So let’s
compute the area between a function and the y-axis. Figure 14.43 shows the function

356
14
Calculus: Integration
Fig. 14.43 The areas
between the x-axis and the
y-axis
y = x2 over the interval [0,4], where A1 is the area between the curve and the x-
axis, and A2 is the area between the curve and y-axis. The sum A1 + A2 must equal
4 × 16 = 64, which is a useful control. Let’s compute A1.
A1 =
 4
0
x2 dx
=
x3
3
4
0
= 64
3
≈21.333
which means that A2 ≈42.666. To compute A2 we construct an integral relative to
dy with a corresponding interval. If y = x2 then x = y
1
2 , and the interval is [0,16]:
A2 =
 16
0
y
1
2 dy
=
2
3y
3
2
16
0
= 2
364
≈42.666.
14.9 Area with Parametric Functions
When working with functions of the form y = f (x), the area under its curve and
the x-axis over the interval [a,b] is
A =
 b
a
f (x)dx.

14.9
Area with Parametric Functions
357
However, if the curve has a parametric form where
x = fx(t)
and
y = fy(t)
then we can derive an equivalent integral as follows.
First: We need to establish equivalent limits [α,β] for t, such that
a = fx(α)
and
b = fy(β).
Second: Any point on the curve has corresponding Cartesian and parametric coor-
dinates:
x
and
fx(t)
y = f (x)
and
fy(t).
Third:
x = fx(t)
dx = f ′
x(t)dt
A =
 b
a
f (x)dx
=
 β
α
fy(t)f ′
x(t)dt
therefore
A =
 β
α
fy(t)f ′
x(t)dt.
(14.11)
Let’s apply (14.11) using the parametric equations for a circle
x = −r cost
y = r sint
as shown in Fig. 14.44. Remember that the Cartesian interval is [a,b] left to right,
and the polar interval [α,β], must also be left to right, which is why x = −r cost.
Therefore,
f ′
xt = r sint
fy(t) = r sint
A =
 β
α
fy(t)f ′
x(t)dt
=
 π
0
r sint · r sin(t)dt

358
14
Calculus: Integration
Fig. 14.44 The parametric
functions for a circle
= r2
 π
0
sin2 t dt
= r2
2
 π
0
1 −cos(2t)dt
= r2
2

t + 1
2 sin(2t)
π
0
= πr2
2
which makes the area of a full circle πr2.
14.10 Bernhard Riemann
The German mathematician Bernhard Riemann (1826–1866) (pronounced “Ree-
man”) made major contributions to various areas of mathematics, including integral
calculus, where his name is associated with a formal method for summing areas and
volumes. Through the Riemann Sum, Riemann provides an elegant and consistent
notation for describing single, double and triple integrals when calculating area and
volume. I will show how the Riemann sum explains why the area under a curve is
the function’s integral. But ﬁrst, I need to explain some incidental notation used in
the description.
14.10.1 Domains and Intervals
Consider any continuous, real-valued function f (x) which returns a meaningful
value for a wide range of x-values. For example, the function f (x) = x2 works
with any negative or positive x. This is called the domain of f (x) and written using
interval notation as (−∞,∞), where the parentheses () remind us not to include
−∞and ∞in the domain, as they have no deﬁnite value. When we wish to focus
upon a speciﬁc domain such as a ≤x ≤b, then we write [a,b], where the square
brackets remind us to include a and b in the domain. The function f (x) = √x
returns a real value, so long as x ≥0, which means that its domain is [0,∞).

14.10
Bernhard Riemann
359
Fig. 14.45 The graph of
function f (x) over the
interval [a,b]
Some functions, like f (x) = 1/(x −2) are sensitive to just one value—in this
case when x = 2—which creates a divide by zero. Therefore, there are two intervals:
(−∞,2) and (2,∞), which in set notation is written
(−∞,2) ∪(2,∞).
14.10.2 The Riemann Sum
Figure 14.45 shows a function f (x) divided into eight equal sub-intervals where
Δx = b −a
8
and
a = x0 < x1 < x2 < ··· < x7 < x8 = b.
In order to compute the area under the curve over the interval [a,b], the interval
is divided into some large number of sub-intervals. In this case, eight, which is not
very large, but convenient to illustrate. Each sub-interval becomes a rectangle with
a common width Δx and a different height. The area of the ﬁrst rectangular sub-
interval shown shaded, can be calculated in various ways. We can take the left-most
height x0 and form the product x0Δx, or we can take the right-most height x1 and
form the product x1Δx. On the other hand, we could take the mean of the two
heights (x0 + x1)/2 and form the product (x0 + x1)Δx/2. A solution that shows
no bias towards either left, right or centre, is to let x∗
i be anywhere in a speciﬁc
sub-interval Δxi, then the area of the rectangle associated with the sub-interval is
f (x∗
i )Δxi, and the sum of the rectangular areas is given by
A =
8

i=1
f

x∗
i

Δxi.

360
14
Calculus: Integration
Dividing the interval into eight equal sub-intervals will not generate a very accurate
result for the area under the graph. But increasing it to eight-thousand or eight-
million, will take us towards some limiting value. Rather than specify some speciﬁc
large number, it is common practice to employ n, and let n tend towards inﬁnity,
which is written
A =
n

i=1
f

x∗
i

Δxi.
(14.12)
The right-hand side of (14.12) is called a Riemann sum, of which there are many.
For the above description, I have assumed that the sub-intervals are equal, which is
not a necessary requirement.
If the number of sub-intervals is n, then
Δx = b −a
n
and the deﬁnite integral is deﬁned as
 b
a
f (x)dx = lim
n→∞
n

i=1
f

x∗
i

Δxi.
In later chapters, double and triple integrals are used to compute areas and vol-
umes, and require us to think carefully about their meaning and what they are doing.
Dividing space into sub-intervals, sub-areas or sub-volumes, provides a consistent
strategy for increasing our understanding of the subject.
14.11 Summary
In this chapter we have discovered the double role of integration. Integrating a func-
tion reveals another function, whose derivative is the function under investigation.
Simultaneously, integrating a function computes the area between the function’s
graph and the x- or y-axis. Although the concept of area in every-day life is an
unsigned quantity, within mathematics, and in particular calculus, area is a signed
quality, and one must be careful when making such calculations.

Chapter 15
Worked Examples
15.1 Introduction
This chapter examines a variety of problems encountered in computer graphics and
develops mathematical strategies for their solution. Such strategies may not be the
most efﬁcient, however, they will provide the reader with a starting point, which
may be improved upon.
15.2 Area of Regular Polygon
Given a regular polygon with n sides, side length s, and radius r of the circum-
scribed circle, its area can be computed by dividing it into n isosceles triangles and
summing their total area.
Figure 15.1 shows one of the isosceles triangles OAB formed by an edge s and
the centre O of the polygon. From Fig. 15.1 we observe that
s
2h = tan
π
n

therefore,
h = s
2 cot
π
n

areaΔOAB = sh
2 = s2
4 cot
π
n

but there are n such triangles, therefore,
area = ns2
4 cot
π
n

.
If we let s = 1 the following Table 15.1 shows the area for the ﬁrst six regular
polygons.
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_15, © Springer-Verlag London 2014
361

362
15
Worked Examples
Fig. 15.1 One of the
isosceles triangles forming
a regular polygon
Table 15.1 Areas of the ﬁrst
six regular polygons
n
area
3
0.433
4
1
5
1.72
6
2.598
7
3.634
8
4.828
Fig. 15.2 A ﬁve-sided
irregular polygon
15.3 Area of Any Polygon
Figure 15.2 shows a polygon with the following vertices in anticlockwise sequence,
and by inspection, the area is 9.5.
The area of a polygon is given by
area = 1
2
n−1

i=0
(xiyi+1(modn) −yixi+1(modn))

15.4
Dihedral Angle of a Dodecahedron
363
Fig. 15.3 A dodecahedron
with one of its pentagonal
sides
Fig. 15.4 The dihedral
angle γ between two
pentagonal sides
= 1
2(0 × 0 + 2 × 1 + 5 × 3 + 4 × 3 + 2 × 2 −2 × 2
−0 × 5 −1 × 4 −3 × 2 −3 × 0)
area = 1
2(33 −14) = 9.5.
15.4 Dihedral Angle of a Dodecahedron
The dodecahedron is a member of the ﬁve Platonic solids, which are constructed
from regular polygons. The dihedral angle is the internal angle between two touch-
ing faces. Figure 15.3 shows a dodecahedron with one of its pentagonal sides.
Figure 15.4 illustrates the geometry required to fold two pentagonal sides through
the dihedral angle γ .
The point P has coordinates
P(x,y,z) =

sin72◦,0,−cos72◦
and for simplicity, we will use a unit vector to represent an edge, therefore
|v1| = |v2| = 1.

364
15
Worked Examples
The coordinates of the rotated point P ′ are given by the following transform:
⎡
⎣
x′
y′
z′
⎤
⎦=
⎡
⎣
cosγ
−sinγ
0
sinγ
cosγ
0
0
0
1
⎤
⎦
⎡
⎣
sin72◦
0
−cos72◦
⎤
⎦
where
x′ = cosγ sin72◦
y′ = sinγ sin72◦
z′ = −cos72◦.
But
v1 • v2 = |v1||v2|cosθ = xx′ + yy′ + zz′
therefore,
cosθ = cosγ sin2 72◦+ cos2 72◦
but θ = 108◦(internal angle of a regular pentagon), therefore,
cosγ = cos108◦−cos2 72◦
sin2 72◦
=
cos72◦
cos72◦−1.
The dihedral angle γ ≈116.56505◦.
A similar technique can be used to calculate the dihedral angles of the other
Platonic objects.
15.5 Vector Normal to a Triangle
Very often in computer graphics we have to calculate a vector normal to a plane
containing three points. The most effective tool to achieve this is the vector product.
For example, given three points P1(5,0,0), P2(0,0,5) and P3(10,0,5), we can
create two vectors a and b as follows:
a =
⎡
⎣
x2 −x1
y2 −y1
z2 −z1
⎤
⎦,
b =
⎡
⎣
x3 −x1
y3 −y1
z3 −z1
⎤
⎦,
therefore,
a = −5i + 5k,
b = 5i + 5k.
The normal vector n is given by
n = a × b =

i
j
k
−5
0
5
5
0
5

= 50j.

15.6
Area of a Triangle Using Vectors
365
Fig. 15.5 A line formed
from two points P1 and P2
15.6 Area of a Triangle Using Vectors
The vector product is also useful in calculating the area of a triangle using two of
its sides as vectors. For example, using the same points and vectors in the previous
example:
area = 1
2 |a × b| = 1
2

i
j
k
−5
0
5
5
0
5

= 1
2|50j| = 25.
15.7 General Form of the Line Equation from Two Points
The general form of the line equation is given by
ax + by + c = 0
and it may be required to compute this equation from two known points. For exam-
ple, Fig. 15.5 shows two points P1(x1,y1) and P2(x2,y2), from which it is possible
to determine P(x,y).
From Fig. 15.5
y2 −y1
x2 −x1
= y −y1
x −x1
(y2 −y1)(x −x1) = (x2 −x1)(y −y1)
(y2 −y1)x −(y2 −y1)x1 = (x2 −x1)y −(x2 −x1)y1
(y2 −y1)x + (x1 −x2)y = x1y2 −x2y1
therefore,
a = y2 −y1
b = x1 −x2
c = −(x1y2 −x2y1).

366
15
Worked Examples
Fig. 15.6 Two lines
intersecting at an angle α
If the two points are P1(1,0) and P2(3,4), then
(4 −0)x + (1 −3)y −(1 × 4 −3 × 0) = 0
and
4x −2y −4 = 0.
15.8 Angle Between Two Straight Lines
Given two line equations it is possible to compute the angle between the lines using
the scalar product. For example, if the line equations are
a1x + b1y + c1 = 0
a2x + b2y + c2 = 0
their normal vectors are n = a1i + b1j and m = a2i + b2j respectively, therefore,
n • m = |n||m|cosα
and the angle between the lines α is given by
α = cos−1
 n • m
|n||m|

.
Figure 15.6 shows two lines with equations
2x + 2y −4 = 0
2x + 4y −4 = 0
therefore,
α = cos−1

2 × 2 + 2 × 4
√
22 + 22√
22 + 42

≈18.435◦.

15.9
Test if Three Points Lie on a Straight Line
367
Fig. 15.7 Three points on
a common line
15.9 Test if Three Points Lie on a Straight Line
Figure 15.7 shows three points P1, P2 and P3 which lie on a straight line. There are
all sorts of ways to detect such a condition. For example, we could assume that the
points are the vertices of a triangle, and if the triangle’s area is zero, then the points
lie on a line. Here is another approach.
Given P1(x1,y1), P2(x2,y2), P3(x3,y3) and r = −−→
P1P2 and s = −−→
P1P3, the three
points lie on a straight line when s = λr where λ is a scalar.
Let the points be
P1(0,−2),
P2(1,−1),
P3(4,2)
then
r = i + j,
and
s = 4i + 4j
and
s = 4r
therefore, the points lie on a straight line as conﬁrmed by the diagram.
Another way is to compute

x1
y1
1
x2
y2
1
x3
y3
1

which is twice the area of ΔP1P2P3. If this equals zero, the points must be co-linear.
15.10 Position and Distance of the Nearest Point on a Line
to a Point
Suppose we have a line and some arbitrary point P , and we require to ﬁnd the
nearest point on the line to P . Vector analysis provides a very elegant way to solve
such problems. Figure 15.8 shows a line and a point P and the nearest point Q

368
15
Worked Examples
Fig. 15.8 Q is the nearest
point on the line to P
on the line. The nature of the geometry is such that the line connecting P to Q is
perpendicular to the reference line, which is exploited in the analysis. The objective
is to determine the position vector q.
We start with the line equation
ax + by + c = 0
and declare Q(x,y) as the nearest point on the line to P .
The normal to the line must be
n = ai + bj
and the position vector for Q is
q = xi + yj.
Therefore,
n • q = −c.
(15.1)
r is parallel to n, therefore,
r = λn
(15.2)
where λ is some scalar.
Taking the scalar product of (15.2)
n • r = λn • n
(15.3)
but as
r = q −p
(15.4)
n • r = n • q −n • p.
(15.5)
Substituting (15.1) and (15.3) in (15.5) we obtain
λn • n = −c −n • p

15.10
Position and Distance of the Nearest Point on a Line to a Point
369
Fig. 15.9 Q is the nearest
point on the line to P
therefore,
λ = −(n • p + c)
n • n
.
From (15.4) we get
q = p + r.
(15.6)
Substituting (15.2) in (15.6) we obtain the position vector for Q:
q = p + λn.
The distance PQ must be the magnitude of r:
PQ = |r| = λ|n|.
Let’s test this result with an example where the answer can be predicted.
Figure 15.9 shows a line whose equation is x + y −1 = 0, and the associated
point is P(1,1). By inspection, the nearest point is Q( 1
2, 1
2) and the distance PQ ≈
0.7071.
From the line equation
a = 1,
b = 1,
c = −1,
therefore,
λ = −2 −1
2
= −1
2
and
xQ = xP + λxn = 1 −1
2 × 1 = 1
2
yQ = yP + λyn = 1 −1
2 × 1 = 1
2.

370
15
Worked Examples
Fig. 15.10 The vectors
required to ﬁnd the reﬂection
of P in the line
The nearest point is Q( 1
2, 1
2) and the distance is
PQ = |λn| = 1
2|i + j| ≈0.7071.
15.11 Position of a Point Reﬂected in a Line
Suppose that instead of ﬁnding the nearest point on a line we require the reﬂection
Q of P in the line. Once more, we set out to discover the position vector for Q.
Figure 15.10 shows the vectors used in the analysis. We start with the line equation
ax + by + c = 0
and declare T (x,y) as the nearest point on the line to O with t = xi + yj as its
position vector.
From the line equation
n = ai + bj
therefore,
n • t = −c.
(15.7)
We note that r + r′ is orthogonal to n, therefore,
n •

r + r′
= 0
and
n • r + n · r′ = 0.
(15.8)
We also note that p −q is parallel to n, therefore,
p −q = r −r′ = λn

15.11
Position of a Point Reﬂected in a Line
371
where λ is some scalar, therefore,
λ = r −r′
n
.
(15.9)
From the ﬁgure we note that
r = p −t.
(15.10)
Substituting (15.7) in (15.10)
n • r = n • p −n • t = n • p + c.
(15.11)
Substituting (15.8) and (15.11) in (15.9)
λ = n • r −n • r′
n • n
= 2n • r
n • n
λ = 2(n • p + c)
n • n
and the position vector is
q = p −λn.
Let’s again test this formula with a scenario that can be predicted in advance.
Given the line equation
x + y −1 = 0
and the point P(1,1), the reﬂection must be the origin, as shown in Fig. 15.11.
Now let’s conﬁrm this prediction. From the line equation
a = 1,
b = 1,
c = −1
and
xP = 1
yP = 1
λ = 2 × (2 −1)
2
= 1
therefore,
xQ = xP −λxn = 1 −1 × 1 = 0
yQ = yP −λyn = 1 −1 × 1 = 0
and the reﬂection point is Q(0,0).

372
15
Worked Examples
Fig. 15.11 Q is the
reﬂection of P in the line
Fig. 15.12 The vectors
required to locate a possible
intersection
15.12 Intersection of a Line and a Sphere
In ray tracing and ray casting it is necessary to detect whether a ray (line) intersects
objects within a scene. Such objects may be polygonal, constructed from patches,
or deﬁned by equations. In this example, we explore the intersection between a line
and a sphere.
There are three possible scenarios: the line intersects, touches or misses the
sphere. It just so happens, that the cosine rule proves very useful in setting up a
geometric condition that identiﬁes the above scenarios, which are readily solved
using vector analysis.
Figure 15.12 shows a sphere with radius r located at C. The line is repre-
sented parametrically, which lends itself to this analysis. The objective is to discover
whether there are points in space that satisfy both the line equation and the sphere
equation. If there is a point, a position vector will locate it.
The position vector for C is
c = xCi + yCj + zCk
and the equation of the line is
p = t + λv

15.12
Intersection of a Line and a Sphere
373
where λ is a scalar, and
|v| = 1.
(15.12)
For an intersection at P
|q| = r
|q|2 = r2
|q|2 −r2 = 0.
Using the cosine rule
|q|2 = |λv|2 + |s|2 −2|λv||s|cosθ
(15.13)
|q|2 = λ2|v|2 + |s|2 −2|v||s|λcosθ.
(15.14)
Substituting (15.12) in (15.14)
|q|2 = λ2 + |s|2 −2|s|λcosθ.
(15.15)
Now let’s identify cosθ:
s • v = |s||v|cosθ
therefore,
cosθ = s • v
|s| .
(15.16)
Substituting (15.16) in (15.15)
|q|2 = λ2 −2s • vλ + |s|2
therefore,
|q|2 −r2 = λ2 −2s • vλ + |s|2 −r2 = 0.
(15.17)
Equation (15.17) is a quadratic in λ where
λ = s • v ±

(s • v)2 −|s|2 + r2
(15.18)
and
s = c −t.
The discriminant of (15.18) determines whether the line intersects, touches or
misses the sphere.
The position vector for P is given by
p = t + λv

374
15
Worked Examples
Fig. 15.13 Three lines that
miss, touch and intersect the
sphere
where
λ = s • v ±

(s • v)2 −|s|2 + r2
and
s = c −t.
For a miss condition
(s • v)2 −|s|2 + r2 < 0.
For a touch condition
(s • v)2 −|s|2 + r2 = 0.
For an intersect condition
(s • v)2 −|s|2 + r2 > 0.
To test these formulae we will create all three scenarios and show that the equations
are well behaved.
Figure 15.13 shows a sphere with three lines represented by their direction vec-
tors λv1, λv2 and λv3. The sphere has radius r = 1 and is located at C with position
vector
c = i + j
whilst the three lines L1, L2 and L3 miss, touch and intersect the sphere respectively.
The lines are of the form
p = t + λv
therefore,
p1 = t1 + λv1
p2 = t2 + λv2
p3 = t3 + λv3

15.12
Intersection of a Line and a Sphere
375
where,
t1 = 2i,
v1 = 1
√
2
i + 1
√
2
j
t2 = 2i,
v2 = j
t3 = 2i,
v3 = −1
√
2
i + 1
√
2
j
and
c = i + j.
Let’s substitute the lines in the original equations:
L1:
s = −i + j
(s • v)2 −|s|2 + r2 = 0 −2 + 1 = −1
the negative discriminant conﬁrms a miss condition.
L2:
s = −i + j
(s • v)2 −|s|2 + r2 = 1 −2 + 1 = 0
the zero discriminant conﬁrms a touch condition, therefore λ = 1 and the touch
point is P2(2,1,0) which is correct.
L3:
s = −i + j
(s • v)2 −|s|2 + r2 = 2 −2 + 1 = 1
the positive discriminant conﬁrms an intersect condition, therefore,
λ = 2
√
2
± 1 = 1 +
√
2
or
√
2 −1.
The intersection points are given by the two values of λ:
when λ = 1 +
√
2
xP = 2 + (1 +
√
2)

−1
√
2

= 1 −1
√
2
yP = 0 + (1 +
√
2) 1
√
2
= 1 + 1
√
2
zP = 0.

376
15
Worked Examples
Fig. 15.14 The vectors used
to detect when a sphere
touches a plane
when λ =
√
2 −1
xP = 1 + (
√
2 −1)

−1
√
2

= 1 + 1
√
2
yP = 0 + (
√
2 −1) 1
√
2
= 1 −1
√
2
zP = 0.
The intersection points are
P3′

1 −1
√
2
,1 + 1
√
2
,0

P3

1 + 1
√
2
,1 −1
√
2
,0

which are correct.
15.13 Sphere Touching a Plane
A sphere will touch a plane if the perpendicular distance from its centre to the plane
equals its radius. The geometry describing this condition is identical to ﬁnding the
position and distance of the nearest point on a plane to a point.
Figure 15.14 shows a sphere located at P with position vector p. A potential
touch condition occurs at Q, and the objective of the analysis is to discover its
position vector q. Given the following plane equation
ax + by + cz + d = 0
its surface normal is
n = ai + bj + ck.
The nearest point Q on the plane to a point P is given by the position vector
q = p + λn
(15.19)

15.13
Sphere Touching a Plane
377
Fig. 15.15 A sphere
touching a plane
where
λ = −n • p + d
n
• n
the distance
PQ = |λn|.
If P is the centre of the sphere with radius r, and position vector p the touch point
is also given by (15.19) when
PQ = |λn| = r.
Let’s test the above equations with a simple example, as shown in Fig. 15.15,
which shows a sphere with radius r = 1 and centred at P(1,1,1).
The plane equation is
y −2 = 0
therefore,
n = j
and
p = i + j + k
therefore,
λ = −(1 −2) = 1
which equals the sphere’s radius and therefore the sphere and plane touch. The touch
point is
xQ = 1 + 1 × 0 = 1
yQ = 1 + 1 × 1 = 2
zQ = 1 + 1 × 0 = 1
Q = (1,2,1).

378
15
Worked Examples
15.14 Summary
Unfortunately, problem solving is not always obvious, and it is possible to waste
hours of analysis simply because the objective of the solution has not been well
formulated. Hopefully, though, the reader has discovered some of the strategies used
in solving the above geometric problems, and will be able to implement them in
other scenarios. At the end of the day, practice makes perfect!

Chapter 16
Conclusion
In the previous 15 chapters I have attempted to introduce you to some of the im-
portant elements of mathematics employed in computer graphics. I knew from the
start that this would be a challenge for two reasons: one was knowing where to
start, and the other was where to stop. I assumed that most readers would already
be interested in computer animation, games or virtual reality, and so on, and knew
something about mathematics. So perhaps the chapters on numbers, algebra and
trigonometry provided a common starting point.
The chapters on coordinates, vectors, transforms, interpolation, curves and
patches, and analytic geometry are the real core of the book, but whilst revealing
these subjects I was always wondering when to stop. On the one hand, I could have
frustrated readers by stopping short of describing a subject completely, and on the
other hand lost readers by pursuing a subject to a level beyond the book’s objective.
Hopefully, I have managed to keep the right balance.
I do hope that the chapter on geometric algebra will tempt you to explore this
subject further. It’s not often that something completely new comes along and chal-
lenges the way we solve geometric problems. I also hope that the two new chapters
on calculus have provided a gentle introduction to this colossal branch of mathe-
matics.
For many readers, what I have covered will be sufﬁcient to enable them to design
programs and solve a wide range of problems. For others, the book will provide
a useful stepping stone to more advanced texts on mathematics. But what I really
hope that I have managed to show is that mathematics is not that difﬁcult, especially
when it can be applied to an exciting subject such as computer graphics.
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2_16, © Springer-Verlag London 2014
379

Appendix A
Limit of (sinθ)/θ
This appendix proves that
lim
θ→0
sinθ
θ
= 1,
where θ is in radians.
From high-school mathematics we know that sinθ ≈θ, for small values of θ. For
example:
sin0.1 = 0.099833
sin0.05 = 0.04998
sin0.01 = 0.0099998
and
sin0.1
0.1
= 0.99833
sin0.05
0.05
= 0.99958
sin0.01
0.01
= 0.99998.
Therefore, we can reason that in the limit, as θ →0:
lim
θ→0
sinθ
θ
= 1.
Figure A.1 shows a graph of (sinθ)/θ, which conﬁrms this result. However, this is
an observation, rather than a proof. So, let’s pursue a geometric line of reasoning.
From Fig. A.2 we see as the circle’s radius is unity, OA = OB = 1, and AC =
tanθ. As part of the strategy, we need to calculate the area of the triangle △OAB,
the sector OAB and the △OAC:
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2, © Springer-Verlag London 2014
381

382
Fig. A.1 Graph of (sinθ)/θ
Fig. A.2 Unit radius circle
with trigonometric ratios
Area of △OAB = △ODB + △DAB
= 1
2 cosθ sinθ + 1
2(1 −cosθ)sinθ
= 1
2 cosθ sinθ + 1
2 sinθ −1
2 cosθ sinθ
= sinθ
2 .
Area of sector OAB = θ
2π π(1)2 = θ
2.
Area of △OAC = 1
2(1)tanθ = tanθ
2
.
From the geometry of a circle, we know that
sinθ
2
< θ
2 < tanθ
2
sinθ < θ < sinθ
cosθ

383
1 <
θ
sinθ <
1
cosθ
1 > sinθ
θ
> cosθ
and as θ →0, cosθ →1 and sinθ
θ
→1. This holds, even for negative values of θ,
because
sin(−θ)
−θ
= −sinθ
−θ
= sinθ
θ
.
Therefore,
lim
θ→0
sinθ
θ
= 1.

Appendix B
Integrating cosn θ
We start with

cosn x dx =

cosx cosn−1 x dx.
Let u = cosn−1 x and v′ = cosx, then
u′ = −(n −1)cosn−2 x sinx
and
v = sinx.
Integrating by parts:

uv′ dx = uv −

vu′ dx + C

cosn−1 x cosx dx = cosn−1 x sinx +

sinx(n −1)cosn−2 x sinx dx + C
= sinx cosn−1 x + (n −1)

sin2 x cosn−2 x dx + C
= sinx cosn−1 x + (n −1)

(1 −cos2 x)cosn−2 x dx + C
= sinx cosn−1 x + (n −1)

cosn−2 dx −(n −1)

cosn x dx + C
n

cosn x dx = sinx cosn−1 x + (n −1)

cosn−2 dx + C

cosn x dx = sinx cosn−1 x
n
+ n −1
n

cosn−2 dx + C
where n is an integer, ̸= 0.
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2, © Springer-Verlag London 2014
385

386
Similarly,

sinn x dx = −cosx sinn−1 x
n
+ n −1
n

sinn−2 dx + C.
For example,

cos3 x dx = sinx cos2 x
3
+ 2
3 sinx + C.

Index
Symbols
2D
analytic geometry, 167
polygons, 35
reﬂections, 250
rotations, 252
scaling transform, 78
vector, 44
3D
complex numbers, 57
coordinates, 37
polygons, 39
reﬂections, 251
rotation transform, 81
transforms, 80
vector, 47
A
Aitken, A., 147
Algebra, 11
Algebraic laws, 12
Analytic geometry, 159
Angle between
line and plane, 198
two planes, 196
two straight lines, 366
Annulus, 166
Antiderivative, 273
Antisymmetric functions, 231
Area, 61
between two functions, 354
circle, 346
negative, 352
of a regular polygon, 361
of a shape, 36
of a triangle, 174, 218, 365
of any polygon, 362
parametric function, 356
positive, 352
under a graph, 344
with the y-axis, 355
Areal coordinates, 71
Associative law, 13
atan2, 29
Axial systems
left-handed, 37
right-handed, 37
Axioms, 241
B
B-splines, 147
Back-face detection, 55
Barycentric coordinates, 71, 203
Bernstein polynomials, 136
Bézier
curves, 135, 228
matrix, 144
Bézier, Pierre, 135
Binomial expansion, 138, 270
Bivector, 237
Blending
curve, 141
function, 145
C
Calculus, 265
Camera space, 91
Cartesian
coordinates, 33, 34
plane, 34
vector, 51
Cauchy, Augustin-Louis, 265
Centre of gravity, 162
Centroid, 206
J. Vince, Mathematics for Computer Graphics,
Undergraduate Topics in Computer Science,
DOI 10.1007/978-1-4471-6290-2, © Springer-Verlag London 2014
387

388
Index
Ceva’s Theorem, 203
Chain rule, 314
Change of axes, 87
2D, 88
3D, 90
Circle, 165
equation, 135
Closed interval, 20
Column vector, 44, 70
Commutative law, 13
Complex numbers, 6
Compound angles, 30
Conjugate, 8
Continuity, 150, 265
Continuous functions, 320
Control
point, 140, 149
vertex, 140
Convex hull, 140, 141, 218
Coordinates
Cartesian, 33
cylindrical, 41
polar, 39
spherical polar, 40
Cosecant, 26
Cosine, 26
rule, 30, 258
Cotangent, 26
Cubic
Bernstein polynomials, 141
Bézier surface patch, 155
equation, 268
interpolant, 141
interpolation, 125
Curves and patches, 135
Cylindrical coordinates, 41
D
de Casteljau, Paul, 135
Deﬁnite integral, 348
Degree, 23
Dependent variable, 19
Derivative, 265, 273
graphical interpretation, 272
total, 316
Determinant, 114
of a matrix, 70
Differential, 273
Differentiating, 276
arccos function, 298
arccot function, 299
arccsc function, 299
arcsec function, 299
arcsin function, 298
arctan function, 298
cosh function, 301
cot function, 298
csc function, 296
exponential functions, 291
function of a function, 278
function products, 281
function quotients, 286
hyperbolic functions, 300
implicit functions, 287
logarithmic functions, 293
sec function, 296
sine function, 279
sinh function, 301
sums of functions, 276
tan function, 295
tanh function, 301
trigonometric functions, 295
Differentiation
partial, 309
Dihedral angle of a dodecahedron, 363
Direction cosines
2D, 89
3D, 91
Distributive law, 14
Dodecahedron, 363
Domain, 21, 26, 358
Dot product, 52
Duality, 248
E
Ellipse equation, 136
Equation
explicit, 19
implicit, 19
Equilateral triangle, 162
Euler
angles, 93
rotations, 81
Euler, Leonhard, 6
Euler’s rule, 39
Explicit equation, 19
Exterior angle, 161
F
Frames of reference, 112
Function, 18, 270
continuous, 320
cubic, 268
domain, 21
graphs, 34
quadratic, 267
range, 21
real-valued, 358

Index
389
Function (cont.)
second derivative, 307
Function of a function
differentiating, 278
Fundamental theorem of calculus, 350
G
General form of a line equation, 365
Geometric
algebra, 231
continuity, 150
Gibbs, 103
Gimbal lock, 85
Goldbach, Christian, 5
Golden section, 161
Grades, 243
H
Half-open interval, 20
Hamilton, 103
Hamilton’s rules, 103, 249
Hermite, Charles, 129
Hermite interpolation, 129
Hessian normal form, 168, 176
Higher derivatives, 302
Homogeneous coordinates, 71
I
Identity matrix, 77
Image space, 91
Implicit equation, 19
Indeﬁnite integral, 319
Independent variable, 19
Indices, 15
Inﬁnitesimals, 265
Inner product, 235
Integers, 5
Integral
deﬁnite, 348
Integrating
arccos function, 298
arccot function, 299
arccsc function, 299
arcsec function, 299
arcsin function, 298
arctan function, 298
cot function, 298
csc function, 296
exponential function, 293
logarithmic function, 294
sec function, 296
tan function, 295
Integration, 273
by parts, 330
by substitution, 337
completing the square, 325
difﬁcult functions, 320
integrand contains a derivative, 326
partial fractions, 341
radicals, 324
techniques, 320
trigonometric identities, 321
Intercept theorems, 160
Interior angle, 161
Interpolating
quaternions, 133
vectors, 130
Interpolation, 121
cubic, 125
linear, 121
non-linear, 124
trigonometric, 124
Intersecting
circle and line, 177
line and sphere, 372
line segments, 172
planes, 191
straight lines, 171, 180
Interval, 20, 358
closed, 20
half-open, 20
open, 20
Inverse
of a vector, 244
quaternion, 105
trigonometric functions, 27
Irrational numbers, 6
Isosceles triangle, 162
L
Lambert’s law, 54
Laws of indices, 16
Lerp, 212
Lighting calculations, 54
Limits, 265, 270
Linear
interpolation, 121, 139, 145, 211
Linearly dependent, 117
Local coordinates, 203
Logarithms, 16
M
Mass points, 206, 222
Matrix, 67
multiplication, 68
notation, 70
Maxima, 305
Median, 162

390
Index
Minima, 305
Mixed partial derivative, 312
Möbius, 71
Multivectors, 243
N
Natural numbers, 4
Nearest point to a line, 367
Non-linear interpolation, 124
Non-rational B-splines, 148
Non-uniform
B-splines, 151
rational B-splines, 151
Number line, 6
Numbers
complex, 6
integer, 5
natural, 4
positional, 4
prime, 4
rational, 5, 6
real, 6
NURBS, 152
O
Object space, 91
Open interval, 20
Origin, 34
Orthogonal matrices, 93
Outer product, 235
P
Parallelogram, 164
Partial derivative
chain rule, 314
ﬁrst, 309
mixed, 312
second, 309
visualising, 311
Pascal’s triangle, 137, 270
Perimeter relationships, 31
Perspective projection, 118
Pitch, 83, 93
quaternion, 109
Planar surface patch, 152
Plane equation, 183
Cartesian form, 183
from three points, 189
general form, 186
parametric form, 186
Point inside a triangle, 174, 216
Point reﬂected in a line, 370
Polar coordinates, 39
Position vector, 49
Positional number system, 4
Prime numbers, 4
Pseudoscalars, 243
Pure quaternion, 105
Q
Quadratic
Bézier curve, 140
Bézier surface patch, 153
equation, 14
function, 267
Quadrilateral, 164
Quaternion, 103, 249
adding, 104
inverse, 105
matrix, 111
multiplying, 104
pitch, 109
pure, 105
roll, 109
subtracting, 104
unit, 106
yaw, 109
Quaternions
interpolating, 133
R
Radian, 23, 159
Radius of the inscribed circle, 220
Range, 21, 26
Rational
B-splines, 148
numbers, 5
Ratios, 205
Real numbers, 6
Recursive Bézier curve, 144
Reﬂecting a vector, 260
Reﬂections, 250
Regular polygon, 165
Rhombus, 165
Riemann, Bernhard, 358
Riemann sum, 358
Right-hand rule, 60
Right triangle, 162
Roll, 83, 93
quaternion, 109
Rotating about an axis, 86, 96, 106
Rotations, 250
Rotors, 254
Row vector, 44, 70
S
Scalar product, 52
Secant, 26
Second derivative, 307

Index
391
Sets, 3
Sine, 26
differentiating, 279
rule, 29, 257
Space partitioning, 169
Sphere touching a plane, 376
Spherical polar coordinates, 40
Straight line equation, 179
Surface patch, 152
Symmetric functions, 231
T
Tangent, 26
Theorem of
Pythagoras, 37, 38, 163
Thales, 163
Three intersecting planes, 194
Total derivative, 316
Transform, 65
2D, 66
2D reﬂection, 66, 73, 79
2D rotation about a point, 79
2D scaling, 66, 72
2D shearing, 75
2D translation, 66, 72
3D reﬂection, 87
3D scaling, 81
3D translation, 80
afﬁne, 78
Transforming vectors, 113
Trapezoid, 164
Triangle
centre of gravity, 162
equilateral, 162
isosceles, 162
right, 162
Trigonometric
functions, 24
identities, 29
interpolation, 124
ratios, 24
Trigonometric functions
inverse, 27
Trigonometry, 23
Trivector, 241, 243
U
Uniform B-splines, 148
Unit
normal vector, 61
quaternion, 106
vector, 50
V
Vector
2D, 44
3D, 47
addition, 49
Cartesian, 51
column, 44, 70
interpolating, 130
magnitude, 46
normal to a triangle, 364
normalising, 50
position, 49
product, 52, 56
row, 44, 70
scaling, 48
subtraction, 49
unit, 50
Vectors
transforming, 113
Vertices, 35
Virtual camera, 90
Volume of a tetrahedron, 226
W
Weierstrass, Karl, 265
World space, 91
Y
Yaw, 83, 93
quaternion, 109

