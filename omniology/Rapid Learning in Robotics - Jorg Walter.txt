J rg Walter 
Jörg Walter

Die Deutsche Bibliothek — CIP Data
Walter, Jörg
Rapid Learning in Robotics / by Jörg Walter, 1st ed.
Göttingen: Cuvillier, 1996
Zugl.: Bielefeld, Univ., Diss. 1996
ISBN 3-89588-728-5
Copyright:
c
 1997, 1996 for electronic publishing:
Jörg Walter
Technische Fakultät, Universität Bielefeld, AG Neuroinformatik
PBox 100131, 33615 Bielefeld, Germany
Email: walter@techfak.uni-bielefeld.de
Url: http://www.techfak.uni-bielefeld.de/walter/
c
 1997 for hard copy publishing:
Cuvillier Verlag
Nonnenstieg 8, D-37075 Göttingen, Germany, Fax: +49-551-54724-21

Jörg A. Walter
Rapid Learning in Robotics
Robotics deals with the control of actuators using various types of sensors
and control schemes. The availability of precise sensorimotor mappings
– able to transform between various involved motor, joint, sensor, and
physical spaces – is a crucial issue. These mappings are often highly non-
linear and sometimes hard to derive analytically. Consequently, there is a
strong need for rapid learning algorithms which take into account that the
acquisition of training data is often a costly operation.
The present book discusses many of the issues that are important to make
learning approaches in robotics more feasible. Basis for the major part of
the discussion is a new learning algorithm, the Parameterized Self-Organizing
Maps, that is derived from a model of neural self-organization. A key
feature of the new method is the rapid construction of even highly non-
linear variable relations from rather modestly-sized training data sets by
exploiting topology information that is not utilized in more traditional ap-
proaches. In addition, the author shows how this approach can be used in
a modular fashion, leading to a learning architecture for the acquisition of
basic skills during an “investment learning” phase, and, subsequently, for
their rapid combination to adapt to new situational contexts.

ii
Foreword
The rapid and apparently effortless adaptation of their movements to a
broad spectrum of conditions distinguishes both humans and animals in
an important way even from nowadays most sophisticated robots. Algo-
rithms for rapid learning will, therefore, become an important prerequisite
for future robots to achieve a more intelligent coordination of their move-
ments that is closer to the impressive level of biological performance.
The present book discusses many of the issues that are important to
make learning approaches in robotics more feasible. A new learning al-
gorithm, the Parameterized Self-Organizing Maps, is derived from a model
of neural self-organization. It has a number of beneﬁts that make it par-
ticularly suited for applications in the ﬁeld of robotics. A key feature of
the new method is the rapid construction of even highly non-linear vari-
able relations from rather modestly-sized training data sets by exploiting
topology information that is unused in the more traditional approaches.
In addition, the author shows how this approach can be used in a mod-
ular fashion, leading to a learning architecture for the acquisition of basic
skills during an “investment learning” phase, and, subsequently, for their
rapid combination to adapt to new situational contexts.
The author demonstrates the potential of these approaches with an im-
pressive number of carefully chosen and thoroughly discussed examples,
covering such central issues as learning of various kinematic transforms,
dealing with constraints, object pose estimation, sensor fusion and camera
calibration. It is a distinctive feature of the treatment that most of these
examples are discussed and investigated in the context of their actual im-
plementations on real robot hardware. This, together with the wide range
of included topics, makes the book a valuable source for both the special-
ist, but also the non-specialist reader with a more general interest in the
ﬁelds of neural networks, machine learning and robotics.
Helge Ritter
Bielefeld

iii
Acknowledgment
The presented work was carried out in the connectionist research group
headed by Prof. Dr. Helge Ritter at the University of Bielefeld, Germany.
First of all, I'd like to thank Helge: for introducing me to the exciting
ﬁeld of learning in robotics, for his conﬁdence when he asked me to build
up the robotics lab, for many discussions which have given me impulses,
and for his unlimited optimism which helped me to tackle a variety of
research problems. His encouragement, advice, cooperation, and support
have been very helpful to overcome small and larger hurdles.
In this context I want to mention and thank as well Prof. Dr. Gerhard
Sagerer, Bielefeld, and Prof. Dr. Sommer, Kiel, for accompanying me with
their advises during this time.
Thanks to Helge and Gerhard for refereeing this work.
Helge Ritter, Kostas Daniilidis, Ján Jokusch, Guido Menkhaus, Christof
Dücker, Dirk Schwammkrug, and Martina Hasenjäger read all or parts of
the manuscript and gave me valuable feedback. Many other colleagues
and students have contributed to this work making it an exciting and suc-
cessful time. They include Jörn Clausen, Andrea Drees, Gunther Heide-
mannn, Hartmut Holzgraefe, Ján Jockusch, Stefan Jockusch, Nils Jung-
claus, Peter Koch, Rudi Kaatz, Michael Krause, Enno Littmann, Rainer
Orth, Marc Pomplun, Robert Rae, Stefan Rankers, Dirk Selle, Jochen Steil,
Petra Udelhoven, Thomas Wengereck, and Patrick Ziemeck. Thanks to all
of them.
Last not least I owe many thanks to my Ingrid for her encouragement
and support throughout the time of this work.

iv

Contents
Foreword . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
ii
Acknowledgment . . . . . . . . . . . . . . . . . . . . . . . . . . . .
iii
Table of Contents
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
iv
Table of Figures . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
vii
1
Introduction
1
2
The Robotics Laboratory
9
2.1
Actuation: The Puma Robot . . . . . . . . . . . . . . . . . . .
9
2.2
Actuation: The Hand “Manus” . . . . . . . . . . . . . . . . .
16
2.2.1
Oil model
. . . . . . . . . . . . . . . . . . . . . . . . .
17
2.2.2
Hardware and Software Integration . . . . . . . . . .
17
2.3
Sensing: Tactile Perception . . . . . . . . . . . . . . . . . . . .
19
2.4
Remote Sensing: Vision . . . . . . . . . . . . . . . . . . . . . .
21
2.5
Concluding Remarks . . . . . . . . . . . . . . . . . . . . . . .
22
3
Artiﬁcial Neural Networks
23
3.1
A Brief History and Overview of Neural Networks
. . . . .
23
3.2
Network Characteristics . . . . . . . . . . . . . . . . . . . . .
26
3.3
Learning as Approximation Problem . . . . . . . . . . . . . .
28
3.4
Approximation Types . . . . . . . . . . . . . . . . . . . . . . .
31
3.5
Strategies to Avoid Over-Fitting . . . . . . . . . . . . . . . . .
35
3.6
Selecting the Right Network Size . . . . . . . . . . . . . . . .
37
3.7
Kohonen's Self-Organizing Map
. . . . . . . . . . . . . . . .
38
3.8
Improving the Output of the SOM Schema
. . . . . . . . . .
41
4
The PSOM Algorithm
43
4.1
The Continuous Map . . . . . . . . . . . . . . . . . . . . . . .
43
4.2
The Continuous Associative Completion
. . . . . . . . . . .
46
J. Walter “Rapid Learning in Robotics”
v

vi
CONTENTS
4.3
The Best-Match Search . . . . . . . . . . . . . . . . . . . . . .
51
4.4
Learning Phases . . . . . . . . . . . . . . . . . . . . . . . . . .
53
4.5
Basis Function Sets, Choice and Implementation Aspects . .
56
4.6
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
60
5
Characteristic Properties by Examples
63
5.1
Illustrated Mappings – Constructed From a Small Number
of Points
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
63
5.2
Map Learning with Unregularly Sampled Training Points . .
66
5.3
Topological Order Introduces Model Bias . . . . . . . . . . .
68
5.4
“Topological Defects” . . . . . . . . . . . . . . . . . . . . . . .
70
5.5
Extrapolation Aspects
. . . . . . . . . . . . . . . . . . . . . .
71
5.6
Continuity Aspects . . . . . . . . . . . . . . . . . . . . . . . .
72
5.7
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
74
6
Extensions to the Standard PSOM Algorithm
75
6.1
The “Multi-Start Technique” . . . . . . . . . . . . . . . . . . .
76
6.2
Optimization Constraints by Modulating the Cost Function
77
6.3
The Local-PSOM
. . . . . . . . . . . . . . . . . . . . . . . . .
78
6.3.1
Approximation Example: The Gaussian Bell
. . . . .
80
6.3.2
Continuity Aspects: Odd Sub-Grid Sizes
n
 Give Op-
tions
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
80
6.3.3
Comparison to Splines . . . . . . . . . . . . . . . . . .
82
6.4
Chebyshev Spaced PSOMs . . . . . . . . . . . . . . . . . . . .
83
6.5
Comparison Examples: The Gaussian Bell . . . . . . . . . . .
84
6.5.1
Various PSOM Architectures
. . . . . . . . . . . . . .
85
6.5.2
LLM Based Networks
. . . . . . . . . . . . . . . . . .
87
6.6
RLC-Circuit Example . . . . . . . . . . . . . . . . . . . . . . .
88
6.7
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
91
7
Application Examples in the Vision Domain
95
7.1
2 D Image Completion . . . . . . . . . . . . . . . . . . . . . .
95
7.2
Sensor Fusion and 3 D Object Pose Identiﬁcation . . . . . . .
97
7.2.1
Reconstruct the Object Orientation and Depth . . . .
97
7.2.2
Noise Rejection by Sensor Fusion . . . . . . . . . . . .
99
7.3
Low Level Vision Domain: a Finger Tip Location Finder . . . 102

CONTENTS
vii
8
Application Examples in the Robotics Domain
107
8.1
Robot Finger Kinematics . . . . . . . . . . . . . . . . . . . . . 107
8.2
The Inverse 6 D Robot Kinematics Mapping . . . . . . . . . . 112
8.3
Puma Kinematics: Noisy Data and Adaptation to Sudden
Changes
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118
8.4
Resolving Redundancy by Extra Constraints for the Kine-
matics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
8.5
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
9
“Mixture-of-Expertise” or “Investment Learning”
125
9.1
Context dependent “skills”
. . . . . . . . . . . . . . . . . . . 125
9.2
“Investment Learning” or “Mixture-of-Expertise” Architec-
ture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
9.2.1
Investment Learning Phase . . . . . . . . . . . . . . . 127
9.2.2
One-shot Adaptation Phase . . . . . . . . . . . . . . . 128
9.2.3
“Mixture-of-Expertise” Architecture . . . . . . . . . . 128
9.3
Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
9.3.1
Coordinate Transformation with and without Hier-
archical PSOMs . . . . . . . . . . . . . . . . . . . . . . 131
9.3.2
Rapid Visuo-motor Coordination Learning . . . . . . 132
9.3.3
Factorize Learning: The 3 D Stereo Case . . . . . . . . 136
10 Summary
139
Bibliography
146

viii
CONTENTS

List of Figures
2.1
The Puma robot manipulator
. . . . . . . . . . . . . . . . . .
10
2.2
The asymmetric multiprocessing “road map” . . . . . . . . .
11
2.3
The Puma force and position control scheme
. . . . . . . . .
13
2.4
[a–b] The endeffector with “camera-in-hand”
. . . . . . . .
15
2.5
The kinematics of the TUM robot ﬁngers
 . . . . . . . . . . .
16
2.6
The TUM hand hydraulic oil system . . . . . . . . . . . . . .
17
2.7
The hand control scheme . . . . . . . . . . . . . . . . . . . . .
18
2.8
[a–d] The sandwich structure of the multi-layer tactile sen-
sor
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19
2.9
Tactile sensor system, simultaneous recordings
 . . . . . . .
20
3.1
[a–b] McCulloch-Pitts Neuron and the MLP network . . . .
24
3.2
[a–f] RBF network mapping properties
. . . . . . . . . . . .
33
3.3
Distance versus topological distance . . . . . . . . . . . . . .
34
3.4
[a–b] The effect of over-ﬁtting . . . . . . . . . . . . . . . . . .
36
3.5
The “Self-Organizing Map” (SOM) . . . . . . . . . . . . . . .
39
4.1
The “Parameterized Self-Organizing Map” (PSOM) . . . . .
44
4.2
[a–b] The continuous manifold in the embedding and the
parameter space . . . . . . . . . . . . . . . . . . . . . . . . . .
45
4.3
[a–c] 3 of 9 basis functions for a


 PSOM . . . . . . . . . .
46
4.4
[a–c] Multi-way mapping of the“continuous associative mem-
ory”
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
48
4.5
[a–d] PSOM associative completion or recall procedure . . .
49
4.6
[a–d] PSOM associative completion procedure, reversed di-
rection
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
49
4.7
[a–d] example unit sphere surface . . . . . . . . . . . . . . .
50
4.8
PSOM learning from scratch . . . . . . . . . . . . . . . . . . .
54
4.9
The modiﬁed adaptation rule Eq. 4.15 . . . . . . . . . . . . .
56
J. Walter “Rapid Learning in Robotics”
ix

x
LIST OF FIGURES
4.10 Example node placement 342 . . . . . . . . . . . . . . .
57
5.1
[a–d] PSOM mapping example 33 nodes
. . . . . . . . . .
64
5.2
[a–d] PSOM mapping example 22 nodes
. . . . . . . . . .
65
5.3
Isometric projection of the 22 PSOM manifold
. . . . . . .
65
5.4
[a–c] PSOM example mappings 222 nodes
. . . . . . . .
66
5.5
[a–h] 33 PSOM trained with a unregularly sampled set .
67
5.6
[a–e] Different interpretations to a data set . . . . . . . . . .
69
5.7
[a–d] Topological defects
. . . . . . . . . . . . . . . . . . . .
70
5.8
The map beyond the convex hull of the training data set
. .
71
5.9
Non-continuous response
. . . . . . . . . . . . . . . . . . . .
73
5.10 The transition from a continuous to a non-continuous re-
sponse
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
73
6.1
[a–b] The multistart technique
. . . . . . . . . . . . . . . . .
76
6.2
[a–d] The Local-PSOM procedure
. . . . . . . . . . . . . . .
79
6.3
[a–h] The Local-PSOM approach with various sub-grid sizes
80
6.4
[a–c] The Local-PSOM sub-grid selection . . . . . . . . . . .
81
6.5
[a–c] Chebyshev spacing . . . . . . . . . . . . . . . . . . . . .
84
6.6
[a–b] Mapping accuracy for various PSOM networks . . . .
85
6.7
[a–d] PSOM manifolds with a 55 training set . . . . . . . .
86
6.8
[a–d] Same test function approximated by LLM units
 . . .
87
6.9
RLC-Circuit
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
88
6.10 [a–d] RLC example: 2 D projections of one PSOM manifold
90
6.11 [a–h] RLC example: two 2 D projections of several PSOMs .
92
7.1
[a–d] Example image feature completion: the Big Dipper . .
96
7.2
[a–d] Test object in several normal orientations and depths .
98
7.3
[a–f] Reconstruced object pose examples
. . . . . . . . . . .
99
7.4
Sensor fusion improves reconstruction accuracy
. . . . . . . 101
7.5
[a–c] Input image and processing steps to the PSOM ﬁnger-
tip ﬁnder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
7.6
[a–d] Identiﬁcation examples of the PSOM ﬁngertip ﬁnder . 105
7.7
Functional dependences ﬁngertip example
. . . . . . . . . . 106
8.1
[a–d] Kinematic workspace of the TUM robot ﬁnger . . . . . 108
8.2
[a–e] Training and testing of the ﬁnger kinematics PSOM . . 110

LIST OF FIGURES
xi
8.3
[a–b] Mapping accuracy of the inverse ﬁnger kinematics
problem
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
8.4
[a–b] The robot ﬁnger training data for the MLP networks . 112
8.5
[a–c] The training data for the PSOM networks. . . . . . . . 113
8.6
The six Puma axes . . . . . . . . . . . . . . . . . . . . . . . . . 114
8.7
Spatial accuracy of the 6 DOF inverse robot kinematics
. . . 116
8.8
PSOM adaptability to sudden changes in geometry
. . . . . 118
8.9
Modulating the cost function: “discomfort” example . . . . . 121
8.10 [a–d] Intermediate steps in optimizing the mobility reserve
121
8.11 [a–d] The PSOM resolves redundancies by extra constraints 123
9.1
Context dependent mapping tasks . . . . . . . . . . . . . . . 126
9.2
The investment learning phase . . . . . . . . . . . . . . . . . . 127
9.3
The one-shot adaptation phase . . . . . . . . . . . . . . . . . . . 128
9.4
[a–b] The “mixture-of-experts” versus the “mixture-of-expertise”
architecture
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
9.5
[a–c] Three variants of the “mixture-of-expertise” architecture131
9.6
[a–b] 2 D visuo-motor coordination
. . . . . . . . . . . . . . 133
9.7
[a–b] 3 D visuo-motor coordination with stereo vision . . . . 136
 (10/207) Illustrations contributed by Dirk Selle [2.5], Ján Jockusch [2.8,
2.9], and Bernd Fritzke [6.8].

xii
LIST OF FIGURES

Chapter 1
Introduction
In school we learned many things: e.g. vocabulary, grammar, geography,
solving mathematical equations, and coordinating movements in sports.
These are very different things which involve declarative knowledge as
well as procedural knowledge or skills in principally all ﬁelds. We are
used to subsume these various processes of obtaining this knowledge and
skills under the single word “learning”. And, we learned that learning is
important. Why is it important to a living organism?
Learning is a crucial capability if the effective environment cannot be
foreseen in all relevant details, either due to complexity, or due to the non-
stationarity of the environment. The mechanisms of learning allow nature
to create and re-produce organisms or systems which can evolve — with
respect to the later given environment — optimized behavior.
This is a fascinating mechanism, which also has very attractive techni-
cal perspectives. Today many technical appliances and systems are stan-
dardized and cost-efﬁcient mass products. As long as they are non-adaptable,
they require the environment and its users to comply to the given stan-
dard. Using learning mechanisms, advanced technical systems can adapt
to the different given needs, and locally reach a satisfying level of helpful
performance.
Of course, the mechanisms of learning are very old. It took until the
end of the last century, when ﬁrst important aspects were elucidated. A
major discovery was made in the context of physiological studies of ani-
mal digestion: Ivan Pavlov fed dogs and found that the inborn (“uncondi-
tional”) salivation reﬂex upon the taste of meat can become accompanied
by a conditioned reﬂex triggered by other stimuli. For example, when a bell
J. Walter “Rapid Learning in Robotics”
1

2
Introduction
was rung always before the dog has been fed, the response salivation be-
came associated to the new stimulus, the acoustic signal. This fundamental
form of associative learning has become known under the name classical
conditioning. In the beginning of this century it was debated whether the
conditioning reﬂex in Pavlov's dogs was a stimulus–response (S-R) or a
stimulus–stimulus (S-S) association between the perceptual stimuli, here
taste and sound. Later it became apparent that at the level of the nervous
system this distinction fades away, since both cases refer to associations
between neural representations.
The ﬁne structure of the nervous system could be investigated after
staining techniques for brain tissue had become established (Golgi and
Ramón y Cajal). They revealed that neurons are highly interconnected to
other neurons by their tree-like extremities, the dendrites and axons (com-
parable to input and output structures). D.O. Hebb (1949) postulated that
the synaptic junction from neuron
A to neuron
B was strengthened each
time
A was activated simultaneously, or shortly before
B. Hebb's rule
explained the conditional learning on a qualitative level and inﬂuenced
many other, mathematically formulated learning models since. The most
prominent ones are probably the perceptron, the Hopﬁeld model and the Ko-
honen map. They are, among other neural network approaches, character-
ized in chapter 3. It discusses learning from the standpoint of an approx-
imation problem. How to ﬁnd an efﬁcient mapping which solves the de-
sired learning task? Chapter 3 explains Kohonen's “Self-Organizing Map”
procedure and techniques to improve the learning of continuous, high-
dimensional output mappings.
The appearance and the growing availability of computers became a
further major inﬂuence on the understanding of learning aspects. Several
main reasons can be identiﬁed:
First, the computer allowed to isolate the mechanisms of learning from
the wet, biological substrate. This enabled the testing and developing of
learning algorithms in simulation.
Second, the computer helped to carry out and evaluate neuro-physiological,
psychophysical, and cognitive experiments, which revealed many more
details about information processing in the biological world.
Third, the computer facilitated bringing the principles of learning to
technical applications. This contributed to attract even more interest and
opened important resources. Resources which set up a broad interdisci-

3
plinary ﬁeld of researchers from physiology, neuro-biology, cognitive and
computer science. Physics contributed methods to deal with systems con-
stituted by an extremely large number of interacting elements, like in a
ferromagnet. Since the human brain contains of about

 neurons with

 interconnections and shows a — to a certain extent — homogeneous
structure, stochastic physics (in particular the Hopﬁeld model) also en-
larged the views of neuroscience.
Beyond the phenomenon of “learning”, the rapidly increasing achieve-
ments that became possible by the computer also forced us to re-think
about the before unproblematic phenomena “machine” and “intelligence”.
Our ideas about the notions “body” and “mind” became enriched by the
relation to the dualism of “hardware” and “software”.
With the appearance of the computer, a new modeling paradigm came
into the foreground and led to the research ﬁeld of artiﬁcial intelligence. It
takes the digital computer as a prototype and tries to model mental func-
tions as processes, which manipulate symbols following logical rules –
here fully decoupled from any biological substrate. Goal is the develop-
ment of algorithms which emulate cognitive functions, especially human
intelligence.
Prominent examples are chess, or solving algebraic equa-
tions, both of which require of humans considerable mental effort.
In particular the call for practical applications revealed the limitations
of traditional computer hardware and software concepts. Remarkably, tra-
ditional computer systems solve tasks, which are distinctively hard for
humans, but fail to solve tasks, which appear “effortless” in our daily life,
e.g. listening, watching, talking, walking in the forest, or steering a car.
This appears related to the fundamental differences in the information
processing architectures of brains and computers, and caused the renais-
sance of the ﬁeld of connectionist research. Based on the von-Neumann-
architecture, today computers usually employ one, or a small number of
central processors, working with high speed, and following a sequential
program. Nevertheless, the tremendous growth in availability of cost-
efﬁciency computing power enables to conveniently investigate also par-
allel computation strategies in simulation on sequential computers.
Often learning mechanisms are explored in computer simulations, but
studying learning in a complex environment has severe limitations - when
it comes to action. As soon as learning involves responses, acting on, or
inter-acting with the environment, simulation becomes too easily unreal-

4
Introduction
istic. The solution, as seen by many researchers is, that “learning must
meet the real world”. Of course, simulation can be a helpful technique,
but needs realistic counter-checks in real-world experiments. Here, the
ﬁeld of robotics plays an important role.
The word “robot” is young. It was coined 1935 by the playwriter Karl
Capek and has its roots in the Czech word for “forced labor”. The ﬁrst
modern industrial robots are even younger: the “Unimates” were devel-
oped by Joe Engelberger in the early 60's. What is a robot? A robot is
a mechanism, which is able to move in a given environment. The main
difference to an ordinary machine is, that a robot is more versatile and
multi-functional, and it can be programmed, or commanded to perform
functions normally ascribed to humans. Its mechanical structure is driven
by actuators which are governed by some controller according to an in-
tended task. Sensors deliver the required feed-back in order to adjust the
current trajectory to the commanded motion and task.
Robot tasks can be speciﬁed in various ways: e.g. with respect to a
certain reference coordinate system, or in terms of desired proximities,
or forces, etc. However, the robot is governed by its own actuator vari-
ables. This makes the availability of precise mappings from different sen-
sory variables, physical, motor, and actuator values a crucial issue. Often
these sensorimotor mappings are highly non-linear and sometimes very hard
to derive analytically. Furthermore, they may change in time, i.e. drift by
wear-and-tear or due to unintended collisions. The effective learning and
adaption of the sensorimotor mappings are of particular importance when
a precise model is lacking or it is difﬁcult or costly to recalibrate the robot,
e.g. since it may be remotely deployed.
Chapter 2 describes work done for establishing a hardware infrastruc-
ture and experimental platform that is suitable for carrying out experi-
ments needed to develop and test robot learning algorithms. Such a labo-
ratory comprises many different components required for advanced, sensor-
based robotics. Our main actuated mechanical structures are an industrial
manipulator, and a hydraulically driven robot hand. The perception side
has been enlarged by various sensory equipment. In addition, a variety of
hardware and software structures are required for command and control
purposes, in order to make a robot system useful.
The reality of working with real robots has several effects:

5
 It enlarges the ﬁeld of problems and relevant disciplines, and in-
cludes also material, engineering, control, and communication sci-
ences.
 The time for gathering training data becomes a major issue. This
includes also the time for preparing the learning set-up. In princi-
ple, the learning solution competes with the conventional solution
developed by a human analyzing the system.
 The faced complexity draws attention also towards the efﬁcient struc-
turing of re-usable building blocks in general, and in particular for
learning.
 And ﬁnally, it makes also technically inclined people appreciate that
the complexity of biological organisms requires a rather long time of
adolescence for good reasons;
Many learning algorithms exhibit stochastic, iterative adaptation and
require a large number of training steps until the learned mapping is reli-
able. This property can also be found in the biological brain.
There is evidence, that learned associations are gradually enhanced by
repetition, and the performance is improved by practice - even when they
are learned insightfully. The stimulus-sampling theory explains the slow
learning by the complexity and variations of environment (context) stimuli.
Since the environment is always changing to a certain extent, many trials
are required before a response is associated with a relatively complete set
of context stimuli.
But there exits also other, rapid forms of associative learning, e.g. “one-
shot learning”. This can occur by insight, or triggered by a particularly
strong impression, by an exceptional event or circumstances.
Another
form is “imprinting”, which is characterized by a sensitive period, within
which learning takes place. The timing can be even genetically programmed.
A remarkable example was discovered by Konrad Lorenz, when he stud-
ied the behavior of chicks and mallard ducklings. He found, that they im-
print the image and sound of their mother most effectively only from 13
to 16 hours after hatching. During this period a duckling possibly accepts
another moving object as mother (e.g. man), but not before or afterwards.
Analyzing the circumstances when rapid learning can be successful, at
least two important prerequisites can be identiﬁed:

6
Introduction
 First, the importance and correctness of the learned prototypical asso-
ciation is clariﬁed.
 And second, the correct structural context is known.
This is important in order to draw meaningful inferences from the proto-
typical data set, when the system needs to generalize in new, previously
unknown situations.
The main focus of the present work are learning mechanisms of this
category: rapid learning – requiring only a small number of training data.
Our computational approach to the realization of such learning algorithm
is derived form the “Self-Organizing Map” (SOM). An essential new in-
gredient is the use of a continuous parametric representation that allows
a rapid and very ﬂexible construction of manifolds with intrinsic dimen-
sionality up to 4

8 i.e. in a range that is very typical for many situations
in robotics.
This algorithm, is termed “Parameterized Self-Organizing Map” (PSOM)
and aims at continuous, smooth mappings in higher dimensional spaces.
The PSOM manifolds have a number of attractive properties.
We show that the PSOM is most useful in situations where the structure
of the obtained training data can be correctly inferred. Similar to the SOM,
the structure is encoded in the topological order of prototypical examples.
As explained in chapter 4, the discrete nature of the SOM is overcome by
using a set of basis functions. Together with a set of prototypical train-
ing data, they build a continuous mapping manifold, which can be used
in several ways. The PSOM manifold offers auto-association capability,
which can serve for completion of partial inputs and simultaneously map-
ping to multiple coordinate spaces.
The PSOM approach exhibits unusual mapping properties, which are
exposed in chapter 5. The special construction of the continuous manifold
deserves consideration and approaches to improve the mapping accuracy
and computational efﬁciency. Several extensions to the standard formu-
lations are presented in Chapter 6. They are illustrated at a number of
examples.
In cases where the topological structure of the training data is known
beforehand, e.g. generated by actively sampling the examples, the PSOM
“learning” time reduces to an immediate construction. This feature is of
particular interest in the domain of robotics: as already pointed out, here

7
the cost of gathering the training data is very relevant as well as the avail-
ability of adaptable, high-dimensional sensorimotor transformations.
Chapter 7 and 8 present several PSOM examples in the vision and the
robotics domain. The ﬂexible association mechanism facilitates applica-
tions: feature completion; dynamical sensor fusion, improving noise re-
jection; generating perceptual hypotheses for other sensor systems; vari-
ous robot kinematic transformation can be directly augmented to combine
e.g. visual coordinate spaces. This even works with redundant degrees of
freedom, which can additionally comply to extra constraints.
Chapter 9 turns to the next higher level of one-shot learning. Here the
learning of prototypical mappings is used to rapidly adapt a learning sys-
tem to new context situations. This leads to a hierarchical architecture,
which is conceptually linked, but not restricted to the PSOM approach.
One learning module learns the context-dependent skill and encodes
the obtained expertise in a (more-or-less large) set of parameters or weights.
A second meta-mapping module learns the association between the rec-
ognized context stimuli and the corresponding mapping expertise. The
learning of a set of prototypical mappings may be called an investment
learning stage, since effort is invested, to train the system for the second,
the one-shot learning phase. Observing the context, the system can now
adapt most rapidly by “mixing” the expertise previously obtained. This
mixture-of-expertise architecture complements the mixture-of-experts archi-
tecture (as coined by Jordan) and appears advantageous in cases where
the variation of the underlying model are continuous within the chosen
mapping domain.
Chapter 10 summarizes the main points.
Of course the full complexity of learning and the complexity of real robots
is still unsolved today. The present work attempts to make a contribution
to a few of the many things that still can be and must be improved.

8
Introduction

Chapter 2
The Robotics Laboratory
This chapter describes the developed concept and set-up of our robotic
laboratory. It is aimed at the technically interested reader and explains
some of the hardware aspects of this work.
A real robot lab is a testbed for ideas and concepts of efﬁcient and intel-
ligent controlling, operating, and learning. It is an important source of in-
spiration, complication, practical experience, feedback, and cross-validation
of simulations. The construction and working of system components is de-
scribed as well as ideas, difﬁculties and solutions which accompanied the
development.
For a fuller account see (Walter and Ritter 1996c).
Two major classes of robots can be distinguished: robot manipulators
are operating in a bounded three-dimensional workspace, having a ﬁxed
base, whereas robot vehicles move on a two-dimensional surface – either
by wheels (mobile robots) or by articulated legs intended for walking on
rough terrains. Of course, they can be mixed, such as manipulators mounted
on a wheeled vehicle, or e.g. by combining several ﬁnger-like manipula-
tors to a dextrous robot hand.
2.1
Actuation: The Puma Robot
The domain for setting up this robotics laboratory is the domain of ma-
nipulation and exploration with a 6 degrees-of-freedom robot manipulator
in conjunction with a multi-ﬁngered robot hand.
The compromise solution between a mature robot, which is able to
J. Walter “Rapid Learning in Robotics”
9

10
The Robotics Laboratory
Figure 2.1: The six axes Puma robot arm with the TUM multi-ﬁngered hand
ﬁxating a wooden “Bauﬁx” toy airplane. The 6 D force-torque sensor (FTS) and
the end-effector mounted camera is visible, in contrast to built-in proprioceptive
joint encoders.

2.1 Actuation: The Puma Robot
11
~ 
 
 
Host 
(Sun Pool) 
 
 
Host 
(SGI Pool) 
 
 
Host 
(IBM Pool) 
 
 
Host 
(NeXT Pool) 
 
 
Host 
(PC Pool) 
 
 
Host 
(DEC Pool) 
~ 
~    
~ 
~    
 
motor 
driver 
 
DA 
conv 
 
 
VME-Bus 
Parallel Port 
 
LSI 11 
6503 
Motor 
Drivers + 
Sensor 
Interfaces 
PUMA 
Robot 
Controller 
6 DOF 
Timer 
 
DLR 
BusMaster 
 
BRAD 
Force/ 
Torque 
Wrist 
Sensor 
Fingertip 
Tactile 
Sensors 
 
D/A 
conv 
 
 
A/D 
conv 
 
Digital 
ports 
 
motor 
driver 
 
motor 
driver 
 
Motor 
Driver 
 
motor 
driver 
 
motor 
driver 
 
motor 
driver 
 
 
Presssure 
/Position 
Sensors 
 
DSP 
image 
processing 
(Androx) 
 
DSP 
Image 
Processing 
(Androx) 
VME-Bus 
Manipulator 
Wrist 
Sensor 
Tactile 
Sensors 
Hydraulic Hand 
Image 
Processing 
LAN  Ethernet 
Pipeline 
Image 
Processing 
(Datacube) 
~ 
~    
M-module Interface 
Parallel Port 
S-bus / VME 
 
 
"argus" 
Host 
(SUN Sparc 20) 
 
 
"druide" 
Host 
(SUN Sparc 2) 
 
 
"manus" 
Controller 
( 68040) 
3D Space- 
Mouse 
3D Space- 
Mouse 
S-bus / VME 
 
 
 
Active 
Camera 
System 
... 
... 
 
Laser 
 
Light 
 
Light 
 
Light 
~ 
~ 
 
Life-Bit 
Misc. 
Figure 2.2: The Asymmetric Multiprocessing “Road Map”. The main hardware
“roads” connect the heterogeneous system components and lay ground for var-
ious types of communication links. The LAN Ethernet (“Local Area Network”
with TCP/IP and max. throughput 10 Mbit/s) connects the pool of Unix com-
puter workstations with the primary “robotics host” “druide” and the “active vi-
sion host” “argus” . Each of the two Unix SparcStation is bus master to a VME-bus
(max 20 MByte/s, with 4 MByte/s S-bus link). “argus” controls the active stereo
vision platform and the image processing system (Datacube, with pipeline ar-
chitecture). “druide” is the primary host, which controls the robot manipulator,
the robot hand, the sensory systems including the force/torque wrist sensor, the
tactile sensors, and the second image processing system. The hand sub-system
electronics is coordinated by the “manus” controller, which is a second VME bus
master and also accessible via the Ethernet link. (Boxes with rounded corners
indicate semi-autonomous sub-systems with CPUs enclosed.)

12
The Robotics Laboratory
carry the required payload of about 3 kg and which can be turned into an
open, real-time robot, was found with a Puma 560 Mark II robot. It is prob-
ably “the” classical industrial robots with six revolute joints. Its geome-
try and kinematics1 is subject of standard robotics textbooks (Paul 1981;
Fu, Gonzalez, and Lee 1987). It can be characterized as a medium fast
(0.5 m/s straight line), very reliable, robust “work horse” for medium pay
loads. The action radius is comparable to the human arm, but the arm is
stronger and heavier (radius 0.9 m; 63 kg arm weight). The Puma MarkII
controller comprises the power supply and the servo electronics for the
six DC motors. They are controlled by six parallel microprocessors and
coordinated by a DEC LSI-11 as central controller. Each joint micropro-
cessor (Rockwell 6503) implements a digital PD controller, correcting the
commanded joint position periodically. The decoupled joint position control
operates with 1 kHz and originally receives command updates (setpoints)
every 28 ms by the LSI-11.
In the standard application the Puma is programmed in the interpreted
language VAL II, which is considered a ﬂexible programming language by
industrial standards. But running on the main controller (LSI-11 proces-
sor), it is not capable of handling high bandwidth sensory input itself (e.g.,
from a video camera) and furthermore, it does not support ﬂexible control
by an auxiliary computer. To achieve a tight real-time control directly by
a Unix workstation, we installed the software package RCI/RCCL (Hay-
ward and Paul 1986; Lloyd 1988; Lloyd and Parker 1990; Lloyd and Hay-
ward 1992).
The acronym RCI/RCCL stands for Real-time Control Interface and Robot
Control C Library. The package provides besides the reprogramming of the
robot controller a library of commands for issuing high-level motion com-
mands in the C programming language. Furthermore, we patched the Sun
operating system OS 4.1 to sufﬁcient real-time capabilities for serving a re-
liable control process up to about 200 Hz. Unix is a multitasking operating
system, sequencing several processes in short time slices. Initially, Unix
was not designed for real-time control, therefore it provides a regular pro-
cess only with timing control on a coarse time scale. But real-time process-
ing requires, that the system reliably responds within a certain time frame.
RCI succeeded here by anchoring the synchronous trajectory control task
1Designed by Joe Engelberger, the founder of Unimation, sometimes called the father
of robotics. Unimation was later sold to Westinghouse Inc., AEG and last to Stäubli.

2.1 Actuation: The Puma Robot
13
(a special thread) at a special device driver serving the interrupts from a
timer card. The control task is thus running independently and outside
the planning task. By this means, sensory information (e.g. camera or force
sensors) can be processed and feedback in a very effective and convenient
manner.
For example, by default our DLR 6 D wrist sensor is read out about the
currently exerted force and torque vector (3+3=6 D) between the robot arm
and the robot hand (Fig. 2.1, 2.4). The DLR Force-Torque-Sensor (FTS) was
developed by the robotics group of Prof. Hirzinger of the DLR, Oberpfaf-
fenhofen, and is a spin-off from the ROTEX Spacelab mission D2 (Hirzinger,
Brunner, Dietrich, and Heindl 1994). As indicated in Fig. 2.2, the FTS is
an micro-controller based sensory sub-system, which communicates via a
special ﬁeld-bus with the VME-bus.
Force 
Control 
Law 
Guard 
Coordinate 
transform 
Coordinate 
transform 
Position 
Controller 
Coordinate 
transform 
+ Gravity 
Compens. 
1-S 
S 
+ 
- 
Robot 
 +  
Environment 
Sensory 
Pattern 
Xdes 
Xtrans 
Fdes 
Fmeas 
Ftrans 
X 
θdes 
θmeas 
θmeas 
(Sun "druide") 
(Puma Controller) 
Figure 2.3: A two-loop control scheme for the mixed force and position control.
The inner, fast loop runs on the joint micro controller within the Puma controller,
the outer loop involves the control task on “druide”.
The resulting robot control system allows us to implement hybrid con-
trol architectures using the position control interface. This includes multi-
sensor compliant motions with mixed force controlled motions as well as
controlling an artiﬁcial spring behavior. The main restriction is the difﬁ-
culty in controlling forces with high robot speeds. High speed motions

14
The Robotics Laboratory
with environment interaction need quick response and therefore require,
a very high frequency of the digital force control loop. The bottleneck
is given by the Puma controller structure. The realizable force control in-
cludes a fast inner position loop (joint micro controller) with a slower outer
force loop (involving the Sun “druide”). But still, by generating the robot
trajectory setpoints on the external Sun workstation, we could double the
control frequency of VAL II and establish a stable outer control loop with
65 Hz.
Fig. 2.3 sketches the two-loop control scheme implemented for the mixed
force and position control of the Puma. The inner, fast loop runs on the
joint micro controller within the Puma controller, the outer loop involves
the control task on the Sun workstation “druide”. The desired position
X
des and forces
F
des are given for a speciﬁed coordinate system (here writ-
ten as generalized 6 D vectors: position and orientation in roll, pitch, yaw
(see also Fig. 7.2 and Paul 1981)
X
des

p
x

p
y

p
z





 and generalized
force
F
des

f
x

f
y

f
z

m
x

m
y

m
z
). The control law transforms the force
deviation into a desired position. The diagonal selection matrix elements
in S choose force controls (if 1) or position control (if 0) for each axis, fol-
lowing the idea of Cartesian sub-space control2. The desired position is
transformed and signaled to the joint controllers, which determine appro-
priate motor power commands. The results of the robot - environment in-
teraction
F
meas is monitored by the force-torque sensor measurement and
transformed to the net acting force
F
tr
ans after the gravity force compu-
tation. The guard block checks on speciﬁed sensory patterns, e.g., force-
torque ranges for each axes and whether the robot is within a safe-marked
work space volume. Depending on the desired action, a suitable controller
scheme and sets of parameters must be chosen, for example, S, gains, stiff-
ness, safe force/position patterns). Here the efﬁcient handling and access
of parameter sets, suitable for run-time adaptation is an important issue.
2Examples for suitable selection matrices are: S=diag(0,0,1,0,0,0) for a compliant mo-
tion with a desired force in
z direction, or
b S=diag(0,0,1,1,1,0) for aligning two ﬂat sur-
faces (with surface normal in
z). A free translation and
z-rotational follow controller in
Cartesian space can be realized with S=diag(1,1,1,0,0,1). See (Mason and Salisbury 1985;
Schutter 1986; Dücker 1995).

2.1 Actuation: The Puma Robot
15
Figure 2.4: The endeffector. (left:) Between the arm and the hydraulic hand, the
cylinder shaped FTS device can measure current 6 D force torque values. The
three ﬁnger modules are mounted here symmetrically at the 12 sided regular
prism base. On the left side, the color video camera looks at the scene from an
end-effector ﬁxed position. Inside the ﬂat palm, a diode laser is directed in tool
axis, which allows depth triangulation in the viewing angle of the camera.

16
The Robotics Laboratory
2.2
Actuation: The Hand “Manus”
For the purpose of studying dextrous manipulation tasks, our robot lab is
equipped with an hydraulic robot hand with (up to) four identical 3-DOF
ﬁngers modules, see Fig. 2.4. The hand prototype was developed and built
by the mechanical engineering group of Prof. Pfeiffer at the Technical Uni-
versity of Munich (“TUM-hand”). We received the ﬁnal hand prototype
comprising four completely actuated ﬁngers, the sensor interface, and mo-
tor driver electronics. The robot ﬁnger's design and its mobility resembles
that of the human index ﬁnger, but scaled up to about 110 %.
Figure 2.5: The kinematics of
the TUM robot ﬁnger. The car-
danic base joint allows 15
 side-
wards gyring (
) and full ad-
duction (
) together with two
coupled joints (



). (after
Selle 1995)
Fig. 2.5 displays the kinematics of one ﬁnger. The particular kinematic
mapping (from piston location to joint angles and Cartesian position) of
the cardanic joint conﬁguration is very hard to invert analytically. Selle
(1995) describes an iterative numerical procedure. This sensorimotor map-
ping is a challenging task for a learning algorithm. In section 8.1 we will
take up this problem and present solutions which achieve good accuracy
with a fairly small number of training examples.

2.2 Actuation: The Hand “Manus”
17
2.2.1
Oil model
The ﬁnger joints are driven by small, spring loaded, hydraulic cylinders,
which connect each actuator to the base station by a oil hose. In contrast
to the more standard hydraulic system with a central power supply and
valve controlled bi-directional powered cylinder, here, each ﬁnger cylin-
der is one-way powered from a corresponding cylinder at the base sta-
tion. Unfortunately, the ﬁnger design does not foresee integrated sensors
directly at the ﬁngers.
Motor 
 
X m 
X f 
A f 
A m 
k 
Finger 
p 
Base Station 
pistonExt. 
F 
Oil Hose 
κ 
Figure 2.6: The hydraulic oil system.
The control system has to rely on indirect feedback sensing through
the oil system. Fig. 2.6 displays the location of the two feedback sensors.
In each degree of freedom
i the piston position
x
m of the motor cylin-
der (linear potentiometer) and
ii the pressure
p in the closed oil system
(membrane sensor with semi-conductor strain-gauge) is measured at the
base station. The long oil hose is not perfectly stiff, which makes this oil
system component signiﬁcantly expandable (4 m, large surface to volume
ratio). This bears the advantage of a naturally compliant and damped sys-
tem but bears also the disadvantage, that even pure position control must
consider the force - position coupled oil model (Menzel et al. 1993; Selle
1995; Walter and Ritter 1996c).
2.2.2
Hardware and Software Integration
The modular concept of the TUM-hand includes its interface electronics.
Each ﬁnger module has its separate motor servo electronics and sensor
ampliﬁers, which we connected to analog converter cards in the VME bus
system as illustrated in the lower right part of Fig. 2.2. The digital hand
control process is running at “manus”, a VME based embedded 68040 pro-

18
The Robotics Laboratory
cessor board.
Following the example of RCCL, the “Manus Control C
Library” (MCCL) was developed and implemented (Rankers 1994; Selle
1995). To facilitate an arm-hand uniﬁed planning level, the Unix work-
station “druide” is set up to issue ﬁnger motion (piston, joint, or Cartesian
position) and force control requests to the “manus” controller (Fig. 2.2).
 
Further 
Fingertip 
Sensors 
 
Oil Model 
Finger 
State 
Estimation 
+ 
- 
τ 
- 
Finger 
Cylinder 
+ 
Environment 
Xf, des 
Ff, des 
K -1 
PD 
Controller 
DC Motor 
and 
Oil Cylinder 
e 
Xf, estim 
Ff, estim 
Xm 
p 
Oil System 
F ext 
X f 
F friction 
Figure 2.7: A control scheme for the mixed force and position control running on
the embedded VME-CPU “manus”. The original robot hand design allows only
indirect estimation of the ﬁnger state utilizing a model of the oil system. Certain
kinds of inﬂuences, especially friction effects require extra information sources to
be satisfyingly accounted for – as for example tactile sensors, see Sec. 2.3.
The achieved performance in dextrous ﬁnger control is a real challenge
and led to the development of a simulator package for a more detailed
study of the oil system (Selle 1995). The main sources of uncertainty are
friction effects in combination with the lack of direct sensory feedback.
As illustrated in Fig. 2.7, extra sensory information is required to ﬁll this
gap. Particularly promising are different kinds of tactile sense organs. The
human skin uses several types of neural receptors, sensitive to static and
dynamic pressure in a remarkable versatile manner.
In the following section extensions to the robot's senses are described.
They are the prerequisite for more intelligent, semi-autonomous robotic
systems. As already mentioned, todays robots are usually restricted to
the proprioceptors of their actuator positions. For environment interac-
tion two categories can be distinguished:
(i) remote senses, which are
mediated, e.g. by light, and
(ii) direct senses in case parts of the robot
are in contact. Measurements to obtain force-torque information are the
FTS-wrist sensor and the ﬁnger state estimation as mentioned above.

2.3 Sensing: Tactile Perception
19
2.3
Sensing: Tactile Perception
Despite the explained importance of good sensory feedback sub-systems,
no suitable tactile sensors are commercially available. Therefore we fo-
cused on the design, construction and making of our own multi-purpose,
compound sensor (Jockusch 1996). Fig. 2.8 illustrates the concept, achieved
with two planar ﬁlm sensor materials:
(i) a slow piezo-resistive FSR ma-
terial for detection of the contact force and position, and (ii) a fast piezo-
electric PVDF foil for incipient slip detection. A speciﬁc consideration was
the affordable price and the ability to shape the sensors in the particular
desired forms. This enables to seek high spatial coverage, important for
fast and spatially resolved contact state perception.
Contact Sensor 
Force and Center  
Dynamic Slip Sensor 
Polymer layers: 
- deflectable knobs 
- PVDF 
 - soft layer 
- FSR semiconductor 
- PCB 
a) 
b) 
c) 
d) 
Figure 2.8: The sandwich structure of the multi-layer tactile sensor. The FSR
sensor measures normal force and contact center location. The PVDF ﬁlm sensor
is covered by a thin rubber with a knob structure. The two sensitive layers are
separated by a soft foam layer transforming knob deﬂection into local stretching
of the PVDF ﬁlm. By suitable signal conditioning, slippage induced oscillations
can be detected by characteristic spike trains. (c–d:) Intermediate steps in making
the compound sensor.
Fig. 2.8cd shows the prototype. Since the kinematics of the ﬁnger in-
volves a moving contact spot during object manipulation, an important
requirement is the continuous force sensitivity during the rolling motion

20
The Robotics Laboratory
on an object surface, see Jockusch, Walter, and Ritter (1996).
Efﬁcient system integration is provided by a dedicated, 64 channel sig-
nal pre-conditioning and collecting micro-computer based device, called
“MASS” (= Multi channel Analog Signal Sampler, for details see Jockusch
1996). MASS transmits the conﬁgurable set of sensor signals via a high-
speed link to its complementing system “BRAD” – the Buffered Random
Access Driver hosted in the VME-bus rack, see Fig. 2.2. BRAD writes the
time-stamped data packets into its shared memory in cyclic order. By this
means, multiple control and monitor processes can conveniently access
the most recent sensor data tuple. Furthermore, entire records of the re-
cent history of sensor signals are readily available for time series analysis.
 
0
0.5
1
1.5
2
2.5
3
3.5
4
grip
slide
release
pulse output
analog signal
force sensor readout
 
Time [s] 
Force Readout FSR 
Preprocessing 
Output 
Dynamic Sensor 
Analog Signal 
Contact 
Sliding 
Breaking 
Contact 
Figure 2.9: Recordings from the raw and pre-processed signal of the dynamic
slippage sensor. A ﬂat wooden object is pressed against the sensor, and after
a short rest tangentially drawn away. By band-pass ﬁltering the slip signal of
interest can be extracted: The middle trace clearly shows the sudden contact and
the slippage phase. The lower trace shows the force values obtained from the
second sensor.
Fig. 2.9 shows ﬁrst recordings from the sensor prototype. The raw sig-
nal of the PVDF sensors (upper trace) is bandpass ﬁltered and thresholded.
The obtained spike train (middle trace) indicates the critical, characteristic
signal shapes. The ﬁrst contact with a ﬂat wood piece induces a short sig-
nal. Together with the simultaneously recorded force information (lower
trace) the interesting phases can be discriminated.

2.4 Remote Sensing: Vision
21
These initial results from the new tactile sensor system are very promis-
ing. We expect to (i) ﬁll the present gap in proprioceptive sensory infor-
mation on the oil cylinder friction state and therefore better ﬁnger ﬁne
control;
(ii) get fast contact state information for task-oriented low-level
grasp reﬂexes; (iii) obtain reliable contact state information for signaling
higher-level semi-autonomous robot motion controllers.
2.4
Remote Sensing: Vision
In contrast to the processing of force-torque values, the information gained
by the image processing system is of very high-dimensional nature. The
computational demands are enormous and require special effort to quickly
reduce the huge amount of raw pixel values to useful task-speciﬁc infor-
mation.
Our vision related hardware currently offers a variety of CCD cameras
(color and monochrome), frame grabbers and two specialized image pro-
cessors systems, which allow rapid pre-processing. The main subsystems
are (i) two Androx ICS-400 boards in the VME bus system of “druide”(see
Fig. 2.2), and (ii) A MaxVideo-200 with a DigiColor frame grabber exten-
sion from Datacube Inc.
Each system allows simultaneous frame grabbing of several video chan-
nels (Androx: 4, Datacube: 3-of-6 + 1-of-4), image storage, image oper-
ations, and display of results on a RGB monitor. Image operations are
called by library functions on the Sun hosts, which are then scheduled for
the parallel processors. The architecture differs: each Androx system uses
four DSP operating on shared memory, while the Datacube system uses a
collection of special pipeline processors working easily in frame rate (max
20 MByte/s). All these processors and crossbar switches are register pro-
grammable via the VME bus. Fortunately there are several layers of library
calls, helping to organize the pipelines and their timely switching (by pipe
altering threads).
Specially the latter machine exhibits high performance if it is well adapted
to the task. The price for the speed is the sophistication and the complexity
of the parallel machines and the substantial lack of debugging information
provided in the large, parallel, and fast switching data streams. This lack
of debug tools makes code development somehow tedious.

22
The Robotics Laboratory
However, the tremendous growth in general-purpose computing power
allows to shift already the entire exploratory phase of vision algorithm
development to general-purpose high-bandwidth computers. Fig. 2.2 ex-
poses various graphic workstations and high-bandwidth server machines
at the LAN network.
2.5
Concluding Remarks
We described work invested for establishing a versatile robotics hardware
infrastructure (for a more extended description see Walter and Ritter 1996c).
It is a testbed to explore, develop, and evaluate ideas and concepts. This
investment was also prerequisite of a variety of other projects, e.g. (Littmann
et al. 1992; Kummert et al. 1993a; Kummert et al. 1993b; Wengerek 1995;
Littmann et al. 1996).
An experimental robot system comprises many different components,
each exhibiting its own characteristics. The integration of these sub-systems
requires quite a bit of effort. Not many components are designed as intel-
ligent, open sub-systems, rather than systems by themselves.
Our experience shows, that good design of re-usable building blocks
with suitably standardized software interfaces is a great challenge. We
ﬁnd it a practical need in order to achieve rapid experimentation and eco-
nomical re-use. An important issue is the sharing and interoperating of
robotics resources via electronic networks. Here the hardware architec-
ture must be complemented by a software framework, which complies to
the special needs of a complex, distributed robotics hardware. Efforts to
tackle this problem are beyond the scope of the present work and therefore
described elsewhere (Walter and Ritter 1996e; Walter 1996).
In practice, the time for gathering training data is a signiﬁcant issue.
It includes also the time for preparing the learning set-up, as well as the
training phase. Working with robots in reality clearly exhibits the need
for those learning algorithms, which work efﬁciently also with a small
number of training examples.

Chapter 3
Artiﬁcial Neural Networks
This chapter discusses several issues that are pertinent for the PSOM algo-
rithm (which is described more fully in Chap. 4). Much of its motivation
derives from the ﬁeld of neural networks. After a brief historic overview
of this rapidly expanding ﬁeld we attempt to order some of the prominent
network types in a taxonomy of important characteristics. We then pro-
ceed to discuss learning from the perspective of an approximation prob-
lem and identify several problems that are crucial for rapid learning. Fi-
nally we focus on the so-called “Self-Organizing Maps”, which emphasize
the use of topology information for learning. Their discussion paves the
way for Chap. 4 in which the PSOM algorithm will be presented.
3.1
A Brief History and Overview
of Neural Networks
The ﬁeld of artiﬁcial neural networks has its roots in the early work of
McCulloch and Pitts (1943). Fig. 3.1a depicts their proposed model of an
idealized biological neuron with a binary output. The neuron “ﬁres” if the
weighted sum
P
j
w
ij
x
j (synaptic weights
w) of the inputs
x
j (dendrites)
reaches or exceeds a threshold
w
i. In the sixties, the Adaline (Widrow
and Hoff 1960), the Perceptron, and the Multi-Layer Perceptron (“MLP”,
see Fig. 3.1b) have been developed (Rosenblatt 1962). Rosenblatt demon-
strated the convergence conditions of an early learning algorithm for the
one-layer Perceptron. The learning algorithm described a way of itera-
tively changing the weights.
J. Walter “Rapid Learning in Robotics”
23

24
Artiﬁcial Neural Networks
Σ 
wi1 
wi2 
wi3 
yi 
x1 
x2 
x3 
y1 
x1 
x2 
x3 
y2 
1 
1 
wi 
 
 
 
 
 
input 
layer 
hidden 
layer 
output  
layer 
a) 
b) 
Figure 3.1: (a) The McCulloch-Pitts neuron “ﬁres” (output
y
i=1 else 0) if the
weighted sum
P
j
w
ij
x
j of its inputs
x
j reaches or exceeds a threshold
w
i. If this
binary threshold function is generalized to a non-linear sigmoidal transfer func-
tion
g

P
j
w
ij
x
j

w
i
 (also called activation, or squashing function, e.g.
g
=tanh),
the neuron becomes a suitable processing element of the standard (b) Multi-Layer
Perceptron (MLP). The input values
x
i are made available at the “input layer”.
The output of each neural unit is feed forward as input to all neurons of the next
layer. In contrast to the standard or single-layer perceptron, the MLP has typi-
cally one or several, so-called hidden layers of neurons between the input and the
output layer.

3.1 A Brief History and Overview of Neural Networks
25
In (1969) Minsky and Papert showed that certain classes of problems,
e.g. the “exclusive-or” problem, cannot be learned with the simple percep-
tron. They doubted that learning rules could be found for computation-
ally more powerful multi-layered networks and recommended to focus on
the symbolic oriented learning paradigm, today called artiﬁcial intelligence
(“AI”). The research funding for artiﬁcial neural networks was cut, and it
took twenty years until the ﬁeld became viable again.
An important stimulus for the ﬁeld was the multiple discovery of the
error back-propagation algorithm. Its has been independently invented
in several places, enabling iterative learning for multi-layer perceptrons
(Werbos 1974, Rumelhart, Hinton, and Williams 1986, Parker 1985). The
MLP turned out to be a universal approximator, which means that using
a sufﬁcient number of hidden units, any function can be approximated
arbitrarily well. In general two hidden layers are required - for continuous
functions one layer is sufﬁcient (Cybenko 1989, Hornik et al. 1989). This
property is of high theoretical value, but does not guarantee efﬁciency of
any kind.
Other important developments where made: e.g. v.d. Malsburg and
Willshaw (1977, 1973) modeled the ordered formation of connections be-
tween neuron layers in the brain. A strongly related, more formal algo-
rithm was formulated by Kohonen for the development of a topographi-
cally ordered map from a general space of input stimuli to a layer of ab-
stract neurons. We return to Kohonen's work later in Sec. 3.7.
Hopﬁeld (1982, 1984) contributed a famous model of the content-addressable
Hopﬁeld network, which can be used e.g. as associative memory for im-
age completion. By introducing an energy function, he opened the mathe-
matical toolbox of statistical mechanics to the class of recurrent neural net-
works (mean ﬁeld theory developed for the physics of magnetism). The
Boltzmann machine can be seen as a generalization of the Hopﬁeld net-
work with stochastic neurons and symmetric connection between the neu-
rons (partly visible – input and output units – and partly hidden units).
“Stochastic” means that the input inﬂuences the probability of the two
possible output states (y

f
g) which the neuron can take (spin glass
like).
The Radial Basis Function Networks (“RBF”) became popular in the
connectionist community by Moody and Darken (1988). The RFB belong
to the class of local approximation schemes (see p. 33). Similarities and

26
Artiﬁcial Neural Networks
differences to other approaches are discussed in the next sections.
3.2
Network Characteristics
Meanwhile, a large variety of neural network types have emerged. In
the following we present a (certainly incomplete) taxonomic ordering and
point out several distinguishable axes:
Supervised versus Unsupervised and Reinforcement Learning: In super-
vised learning paradigm, the training input signal is given with a
pairing output signal from a supervisor or teacher knowing the cor-
rect answer. Unsupervised networks (e.g. competitive learning, vec-
tor quantization, SOM, see below) draw information from redundan-
cies in the input data distribution.
An intermediate form is the reinforcement learning.
Here the sys-
tem receives a “reward” or “quality” signal, indicating whether the
network output was more or less successful. A major problem is
the meaningful credit assignment to the responsible network parts.
The structural problem is extended by the temporal credit assignment
problem if the quality signal is delayed and a sequence of decisions
contributed to the overall result.
Feed-forward versus Recurrent Networks: In feed-forward networks the
information ﬂow is unidirectional from the input to the output layer.
In contrast, recurrent networks also connect neuron outputs back as
additional feedback inputs. This enables a network intern dynamic,
controlled by the given input and the learned network characteris-
tics.
A typical application is the associative memory, which can iteratively
recall incomplete or noisy images. Here the recurrent network dy-
namics is built such, that it leads to a settling of the network. These
relaxation endpoints are ﬁx-points of the network dynamic. Hop-
ﬁeld (1984) formulated this as an energy minimization process and
introduced the statistical methods known e.g. in the theory of mag-
netism. The goal of learning is to place the set of point attractors at
the desired location. As shown later, the PSOM approach will uti-

3.2 Network Characteristics
27
lize a form of recurrent network dynamic operating on a continuous
attractor manifold.
Hetero-association and Auto-association: The ability to evaluate the given
input and recall the desired output is also called association. Hetero-
association is the common (one-way) input to output mapping (func-
tion mapping). The capability of auto-association allows to infer dif-
ferent kinds of desired outputs on the basis of an incomplete pat-
tern. This enables the learning of more general relations in contrast
to function mapping.
Local versus Global Representation: For a network with local represen-
tation, the output of a certain input is produced only by a localized
part of the network (which is pin-pointed by the notion of a “grand-
mother cell”). Using global representation, the network output is as-
sembled of information distributed over the entire network. A global
representation is more robust against single neuron failures. Here, as a
result the network performance degrades gracefully, like the biological
brain usually does. The local representation of knowledge is easier
to interpret and not endangered by the so-called “catastrophic inter-
ference”, see “on-line learning” below.
Batch versus Incremental Learning: Calculating the network weight up-
dates under consideration of all training examples at once is called
“batch-mode” learning. For a linear network, the solution of this
learning task can be shown to be equivalent to ﬁnding the pseudo-
inverse of a matrix, that is formed by the training data. In contrast,
incremental learning is an iterative weight update that is often based
on some gradient descent for an “error function”. For good conver-
gence this often requires the presentation of the training examples
in a stochastic sequence. Iterative learning is usually more efﬁcient,
particularly w.r.t. memory requirements.
Off-line versus On-line Learning and Interferences: Off-line learning al-
lows easier control of the training procedure and validity of the data
(identiﬁcation of outliers). On-line, incremental learning is very im-
portant, since it provides the ability to dynamically adapt to new or
changing situations. But it generally bears the danger of undesired
“interferences” (“after-learning” or “life-long learning”).

28
Artiﬁcial Neural Networks
Consider the case of a network, which is already well trained with
the data set A. When a new data set B gets available, the knowledge
about “skill” A can be deteriorated (interference) mainly in the fol-
lowing ways:
(i) due to re-allocation of the computational resources to new map-
ping domains the old skill (A) becomes less accurate (“stability – plas-
ticity” problem).
(ii) Further data sets A and B might be inconsistent due to a change
in the mapping task and require a re-adaptation.
(iii) Beyond these two principal, problem-immanent interferences, a
global learning process can cause “catastrophic interference”: when
the weight update to new data is global, it is hard to control, how
this inﬂuences knowledge previously learned. A popular solution is
to memorize the old dataset A, and retrain the network based on the
merged dataset A and B.
One of the main challenges in on-line learning is the proper control
of the current context. It is crucial in order to avoid wrong general-
ization for other contexts - analog to the human “traumatic experi-
ences” (see also localized representations above, mixture-of-experts
below and Chap. 9 for the problem of context oriented learning).
Fixed versus adaptable network structures As pointed out before, the suit-
able network (model) structure has signiﬁcant inﬂuence on the efﬁ-
ciency and performance of the learning system. Several methods
have been proposed for tackling the combined problem of adapt-
ing the network weights and dynamically deciding on the structural
adaptation (e.g. growth) of the network (additive models). Strategies
on selecting the network size will be later discussed in Sec. 3.6.
For a more complete overview of the ﬁeld of neural networks we refer
the reader to the literature, e.g. (Anderson and E. Rosenfeld 1988; Hertz,
Krogh, and Palmer 1991; Ritter, Martinetz, and Schulten 1992; Arbib 1995).
3.3
Learning as Approximation Problem
In this section learning tasks are considered from the perspective of basic
representation types and their relation to methods of other disciplines.

3.3 Learning as Approximation Problem
29
Usually, the process of learning is based on a certain amount of apriori
knowledge and a set of training examples. Its goal is two-fold:
 the learner should be able to recognize the re-occurance of a previ-
ously seen situation (stimuli or input) and associate the correct an-
swer (response or output) as learned before;
 in new, previously un-experienced situations, the learner should gen-
eralize its knowledge and infer the answer appropriately.
The primary problem of learning is to ﬁnd an appropriate representa-
tion of the learned knowledge or skill: its input (stimuli) and output (re-
sponses). The reason is rather simple and fundamental: no system can
learn, what it cannot represent.
We can distinguish three basic types of task describing variables
x:
1. the orderable, continuous valued representations (e.g. length, speed,
temperature, force) with a deﬁned order relation (x
i

x
j) and an ex-
isting distance metric
jx
i

x
j
j;
2. a periodic or circular variable representation (e.g. azimuth angles,
hour of the day) with deﬁned distance, but without a clear order
relation (“wrap-around”; is Monday before or after Saturday?);
3. the symbolic and categorical representation
x

fc






c
k
g, like
cities, attributes and generally names. Here, nor an order, neither a
distance relation between
x
i and
x
j does exist, just the binary equiv-
alence relation is deﬁned (x
i

x
j, or
x
i

x
j).
Sometimes variables are represented depending on the context, e.g. “red”
color may get coded as category, as circular hue value, or as orderable
location in the color triangle.
A desired skill can be modeled as the mapping between an input space
and an output space. The input space (later notated
X
in ) captures all
relevant system (observable and non-observed) variables. The problem of
learning such a mapping is then equivalent to the problem of synthesizing
an associative memory (Poggio and Girosi 1990). The appropriate output
is retrieved when the input is presented and the system generalizes when
a new input is presented. Different frameworks of this problem depend
strongly on the type of input and output variables.

30
Artiﬁcial Neural Networks
Most methods prefer orderable, variables as input variables type (neu-
ral nets), some others prefer categorical variables (artiﬁcial intelligence
and machine learning approaches). Depending on the type of output vari-
ables different frameworks offer methods called regression, approxima-
tion, classiﬁcation, system identiﬁcation, system estimation, pattern recog-
nition, or learning. Tab. 3.1 compares names for learning task, common in
different domains of research.
Output Type
Continuous Values
Symbolic Values
vs. Framework
Orderable Variables
Categorical Variables
Neural Networks
Learning
Learning
Machine Learning
Sub-symbolic & Fuzzy Learning
Learning
Mathematics
Approximation
Quantization
Statistics
Regression
Classiﬁcation
Engineering
System Identiﬁcation & Estimation
Pattern Recognition
Table 3.1: Creating and reﬁning a model in order to solve a learning task
has various common names in different disciplines.
In the following we mainly focus on the variable type continuous and
orderable. It can be considered as the most general case, since periodic
variables (2) can transformed by the trick of mapping the phase infor-
mation into a pair of sine and cosine values (of course the topology is
unchanged). Categorical output values (3) are often prepared by a com-
petitive component which selects the dominating component in a multi-
dimensional output (“winner takes all”). It is interesting to notice, that
Fuzzy Systems work the opposite way. Continuous valued inputs are ex-
amined on their probability to belong to a particular class (fuzzy mem-
bership). All combinations are propagated through a symbolic rule set
(if-then-else type) and the output “de-fuzziﬁcated” into a continuous out-
put. The attractive point is the simplicity how to insert categorical “expert
knowledge” into the system.
We consider a system that generates data and is presumed to be de-
scribed by the multivariate function
f
x (possible perturbed by noise).
With continuous valued variables, the learning task is to model the system
by the function
F
w

x that can serve as a reasonable approximation of
f
over the domain
D of interest. The regression is based on a set of given

3.4 Approximation Types
31
training or design points
D
tr
ain within the domain of interest
D
tr
ain

D

X.
x denotes the input variable set
x

fx






x
d
g

X,
w a parameter
set
w

w


w





.
A good measure for the quality of the approximation will depend on
the intended task. However, in most cases accuracy is of importance and is
measured employing a distance function
distf
x
F
w

x (e.g. L2 norm).
The lack of accuracy or lack-of-ﬁt
LO
F
F
 is often deﬁned by the expected
error
LO
F
F

D


hdist
f
x
F
w

x
i
D
(3.1)
the
dist function averaged over the domain of interest
D. The approx-
imation problem is to determine the parameter set
w
, that minimizes
LO
F
F

D
. The ultimate solution depends strongly on
F. If it exists, it is
called “best approximation” (see e.g. Davis 1975; Poggio and Girosi 1990;
Friedman 1991).
Summarizing, several main problems in building a learning system can be
distinguished:
(i) encoding the problem in a suitable representation
x;
(ii) ﬁnding a suitable approximation function
F;
(iii) choosing the algorithm to ﬁnd optimal values for the parameters
W;
(iv) the problem of efﬁciently implementing the algorithm.
The proceeding chapter 4 will present the PSOM approach with respect
to (ii)–(iv). Numerous examples for (i) are presented in the later chapters.
The following section discusses several common methods for (ii)
3.4
Approximation Types
In the following we consider some prominent examples of approximat-
ing functions
F
w

x

I
R
d

I
R – for the moment simpliﬁed to one-
dimensional outputs.
The classical linear case is
F
w

x

w

x
(3.2)

32
Artiﬁcial Neural Networks
the dot product with input
x , usually augmented by a constant one.
This linear regression scheme corresponds to a linear, single layer net-
work, compare Fig. 3.1.
The classical approximation scheme is a linear combination of a suitable
set of basis functions
fB
i
g on the original input
x
F
w

x

m
X
i
w
i
B
i
x
(3.3)
and corresponds to a network with one hidden layer. This represen-
tation includes global polynomials (B
i are products and powers of
the input components; compare polynomial classiﬁers), as well as
expansions in series of orthogonal polynomials and splines.
Nested sigmoids schemes correspond to the Multi-Layer Perceptron and
can be written as
F
w

x

g


X
k
u
k
g


X
j
v
k
j
g




g

X
i
w
j
i
x
i






A

A
(3.4)
where
g
 is a sigmoid transfer function, and
w

w
j
i

v
k
j

u
k




denote the synaptic input weights of the neural unit. This scheme
of nested non-linear functions is unusual in the classical theory of
approximation (Poggio and Girosi 1990).
Projection Pursuit Regression uses approximation functions, which are
a sum of univariant functions
B
i of linear combinations of the input
variables:
F
w

x

m
X
i
B
i
w
i

x
(3.5)
The interesting advantage is the straight forward solvability for afﬁne
transformations of the given task (scaling and rotation) (Friedman
1991).
Regression Trees: The domain of interest is recursively partitioned in hyper-
rectangular subregions. The resulting subregions are stored e.g. as
binary tree in the CART method (“Classiﬁcation and Regression Tree”
Breimann, Friedman, Olshen, and Stone 1984).
Within each sub-
region,
f is approximated - often by a constant - or by piecewise

3.4 Approximation Types
33
σ 
RBF 
RBF 
norm. 
1 
σ 2 
σ 3 
< 
< 
Figure 3.2: Two RBF units constitute the approximation model of a function.
The upper row displays the plain RBF approach versus the results of the normal-
ization step in the lower row. From left to right three basis radii


 illustrate the
smoothing impact of an increasing
 to distance ratio.
polynomial regression splines - but only for one or two components
of
x (MARS algorithm (“Multivariate Adaptive Regression Splines”;
Friedman 1991).
Normalized Radial Basis Function (RBF) networks take the form of a weighted
sum over reference points
w
i located in the input space at
w
i:
F
w

x

P
i
jx

u
i
j
w
i
P
i
jx

u
i
j
(3.6)
The radial basis functions


I
R
	

I
R
	 usually decays to zero
with growing argument and is often represented by the Gaussian
bell function
r


e

r

p


, characterized by the width
 (there-
fore the RBF is sometimes called a kernel function). The division by
the unweighted sum takes care on normalization and ﬂat extrapo-
lation as illustrated in Fig. 3.2.
The learning is often split in two
phases:
(i) the placement of the centers is learned by an unsuper-
vised method, for example by k-means clustering, learning vector quan-
tization (LVQ2), or competitive learning; (ii) the width
 is set, often

34
Artiﬁcial Neural Networks
ad-hoc to the half mean distance of the base centers. The output val-
ues
w
i are learned supervised. The RBF net can be combined with
a local linear mapping instead of a constant
w
i (Stokbro, Umberger,
and Hertz 1990), as described below. RBF network algorithms which
generalize the constant sized radii
 (sphere) to individually adapt-
able tensors (ellipses) are called “Generalized Radial Basis Function
networks” (GRBF), or “Hyper-RBF” (see Powell 1987; Poggio and
Girosi 1990).
1 
2 
3 
4 
x 
Figure 3.3: Distance versus topological distance. Four RBF unit center points
u
i
(denoted 1

4) around a test point
x (the circles indicate the width
). Account-
ing only for the distance
jx

u
i
j, the RBF output (Eq. 3.6) weights
u
 stronger
than
u
. Considering the triangles spanned by the points 123 versus 234 reveals
that
x is far outside the triangle 123, but in the middle of the triangle 234. There-
fore,
x can be considered closer to point 4 than to point 1 — with respect to their
topological relation.
Topological Models and Maps are schemes, which build dimension re-
ducing mappings from a higher dimensions input space to a low-
dimensional set. A very successful model is the so-called “feature
map” or “Self-Organizing Map” (SOM) introduced by Kohonen (1984)
and described below in Sec. 3.7. In the presented taxonomy the SOM
has a special role: it has a localized knowledge representation where
the location in the neural layer encodes topological information beyond
Euclidean distances in the input space (see also Fig. 3.3). This means
that input signals which have similar “features” will map to neigh-
boring neurons in the network (“feature map”). This topological pre-
serving effect works also in higher dimensions (famous examples are
Kohonen's Neural Typewriter for spoken Finnish language, and the se-
mantic map, where the similarity relationships of a set of 16 animals

3.5 Strategies to Avoid Over-Fitting
35
could be extracted from a sequence of three-word sentences (Koho-
nen 1990; Ritter and Kohonen 1989). The topology preserving prop-
erties enables cooperative learning in order to increase speed and ro-
bustness of learning, studied e.g. in Walter, Martinetz, and Schulten
(1991) and compared to the so-called Neural-Gas Network in Walter
(1991) and Walter and Schulten (1993).
The Neural-Gas Network shows in contrast to the SOM not a ﬁxed
grid topology but a “gas-like”, dynamic deﬁnition of the neighbor-
hood function, which is determined by (dynamic) ranking of close-
ness in the input space (Martinetz and Schulten 1991). This results in
advantages for applications with inhomogeneous or unknown topol-
ogy (e.g.
prediction of chaotic time series like the Mackey-Glass
series in Walter (1991) and later also published in Martinetz et al.
(1993)).
The choice of the type of approximation function introduces bias, and
restricts the variance of the of the possible solutions. This is a fundamental
relation called the bias–variance problem (Geman et al. 1992). As indicated
before, this bias and the corresponding variance reduction can be good or
bad, depending on the suitability of the choice. The next section discusses
the problem over-using the variance of a chosen approximation ansatz,
especially in the presence of noise.
3.5
Strategies to Avoid Over-Fitting
Over-ﬁtting can occur, when the function
f gets approximated in the do-
main
D, using only a too limited number of training data points
D
tr
ain. If
the ratio of free parameter versus training points is too high, the approxi-
mation ﬁts to the noise, as illustrated by Fig. 3.4. This results in a reduced
generalization ability. Beside the proper selection of the appropriate net-
work structure, several strategies can help to avoid the over-ﬁtting effect:
Early stopping: During incremental learning the approximation error is
systematically decreased, but at some point the expected error or
lack-of-ﬁt
LO
F
F

D
 starts to increase again. The idea of early stop-
ping is to estimate the
LO
F on a separate test data set
D
test and de-
termine the optimal time to stop learning.

36
Artiﬁcial Neural Networks
X 
X 
Figure 3.4: (Left) A meaningful ﬁt to the given cross-marked noisy data. (Right)
Over-ﬁtting of the same data set: It ﬁts well to the training set, but is performing
badly on the indicated (cross-marked) position.
More training data: Over-ﬁtting can be avoided when sufﬁcient training
points are available, e.g. by learning on-line. Duplicating the avail-
able training data set and adding a small amount of noise can help
to some extent.
Smoothing and Regularization: Poggio and Girosi (1990) pointed out that
learning from a limited set of data is an ill-posed problem and needs
further assumptions to achieve meaningful generalization capabili-
ties. The most usual presumption is smoothness, which can be formal-
ized by a stabilizer term in the cost function Eq. 3.1 (regularization
theory). The roughness penalty approximations can be written as
F
w

x
 argmin
F
LO
F

F

D


	R
F


(3.7)
where
RF
 is a functional that describes the roughness of the func-
tion
F
w

x. The parameter
	 controls the tradeoff between the ﬁ-
delity to the data and the smoothness of
F. A common choice for
R
is the integrated squared Laplacian of
F
RF


n
X
i
n
X
j

Z
D







F

x
i

x
j






dx
(3.8)
which is equivalent to the thin-plate spline (for
n
	
; coined by the
energy of a bended thin plate of ﬁnite extent). The main difﬁculty is
the introduction of a very inﬂuential parameter
	 and the computa-
tion burden to carry out the integral.
For the topology preserving maps the smoothing is introduced by
a parameter, which determines the range of learning coupling be-

3.6 Selecting the Right Network Size
37
tween neighboring neurons in the map. This can be interpreted as a
regularization for the SOM and the “Neural-Gas” network.
3.6
Selecting the Right Network Size
Beside the accuracy criterion (LO
F, Eq. 3.1) the simplicity of the network
is desirable, similar to the idea of Occam's Razor. The formal way is to
augment the cost function by a complexity cost term, which is often written
as a function of the number of non-constant model parameters (additive
or multiplicative penalty, e.g. the Generalized Cross-Validation criterion
GCV; Craven and Wahba 1979).
There are several techniques to select the right network size and struc-
ture:
Trial-and-Error is probably the most prominent method in practice. A
particular network structure is constructed and evaluated, which in-
cludes training and testing. The achieved lack-of-ﬁt (LO
F) is esti-
mated and minimized.
Genetic Algorithms can automize this optimization method, in case of a
suitable encoding of the construction parameter, the genome can be
deﬁned. Initially, a set of individuals (network genomes), the pop-
ulation is constructed by hand. During each epoch, the individuals
of this generation are evaluated (training and testing). Their ﬁtnesses
(negative cost function) determine the probability of various ways of
replication, including mutations (stochastic genome modiﬁcations)
and cross-over (sexual replication with stochastic genome exchange).
The applicability and success of this method depends strongly on
the complexity of the problem, the effective representation, and the
computation time required to simulate evolution. The computation
time is governed by the product of the (non-parallelized) population
size, the ﬁtness evaluation time, and the number of simulated gen-
erations. For an introduction see Goldberg (1989) and, e.g. Miller,
Todd, and Hegde (1989) for optimizing the coding structure and for
weights determination Montana and Davis (1989).
Pruning and Weight Decay: By including a suitable non-linear complex-
ity penalty term to the iterative learning cost function, a fraction of

38
Artiﬁcial Neural Networks
the available parameters are forced to decay to small values (weight
decay). These redundant terms are afterwards removed. The disad-
vantage of pruning (Hinton 1986; Hanson and Pratt 1989) or optimal
brain damage (Cun, Denker, and Solla 1990) methods is that both start
with rather large and therefore slower converging networks.
Growing Network Structures (additive model) follow the opposite direc-
tion. Usually, the learning algorithm monitors the network perfor-
mance and decides when and how to insert further network elements
(in form of data memory, neurons, or entire sub-nets) into the ex-
isting structure. This can be combined with outliers removing and
pruning techniques, which is particularly useful when the grow-
ing step is generous (one-shot learning and forgetting the unimpor-
tant things). Various unsupervised algorithms have been proposed:
additive models building local regression models (Breimann, Fried-
man, Olshen, and Stone 1984; Hastie and Tibshirani 1991), dynamic
memory based models (Atkeson 1992; Schaal and Atkeson 1994),
and RBF net (Platt 1991); the tiling algorithm (for binary outputs;
Mézard and Nadal 1989) has similarities to the recursive partition-
ing procedure (MARS) but allows also non-orthogonal hyper-planes.
The (binary output) upstart algorithm (Frean 1990) shares similarities
with the continuous valued cascade correlation algorithm (Fahlman
and Lebiere 1990; Littmann 1995). Adaptive topological models are
studied in (Jockusch 1990), (Fritzke 1991) and in combination with
the Neural-Gas in (Fritzke 1995).
3.7
Kohonen's Self-Organizing Map
Teuvo Kohonen formulated the (Self-Organizing Map) (SOM) algorithm as
a mathematical model of the self-organization of certain structures in the
brain, the topographic maps (e.g. Kohonen 1984).
In the cortex, neurons are often organized in two-dimensional sheets
with connections to other areas of the cortex or sensor or motor neurons
somewhere in the body. For example, the somatosensory cortex shows a
topographic map of the sensory skin of the body. Topographic map means
that neighboring areas on the skin ﬁnd their neural connection and rep-
resentation to neighboring neurons in the cortex. Another example is the

3.7 Kohonen's Self-Organizing Map
39
retinotopic map in the primary visual cortex (e.g. Obermayer et al. 1990).
Fig. 3.5 shows the basic operation of the Kohonen feature map. The
map is built by a
m (usually two) dimensional lattice
A of formal neurons.
Each neuron is labeled by an index
a

A, and has reference vectors
w
a
attached, projecting into the input space
X (for more details, see Kohonen
1984; Kohonen 1990; Ritter et al. 1992).
wa
x
Array of 
Neurons  a 
*
a*
Input Space  X
Figure 3.5: The “Self-Organizing Map” (“SOM”) is formed by an array of pro-
cessing units, called formal neurons. Here the usual case, a two-dimensional array
is illustrated at the right side. Each neuron has a reference vector
w
a attached,
which is a point in the embedding input space
X. A presented input
x will se-
lect that neuron with
w
a closest to it. This competitive mechanism tessellates the
input space in discrete patches - the so-called Voronoi cells.
The response of a SOM to an input vector
x is determined by the ref-
erence vector
w
a
 of the discrete “best-match” node
a
. The “winner”
neuron
a
 is deﬁned as the node which has its reference vector
w
a closest
to the given input
a

 argmin
aA
kw
a


xk

(3.9)
This competition among neurons can be biologically interpreted as a result
of a lateral inhibition in the neural layer. The distribution of the reference
vectors, or “weights”
w
a, is iteratively developed by a sequence of training
vectors
x. After ﬁnding the best-match neuron
a
 all reference vectors are

40
Artiﬁcial Neural Networks
updated
w
a

new


w
a

old

	w
a by the following adaption rule:
	w
a


ha
a


x

w
a

(3.10)
Here
ha
a

 is a bell shaped function (Gaussian) centered at the “win-
ner”
a
 and decaying with increasing distance
ja

a

j in the neuron layer.
Thus, each node or “neuron” in the neighborhood of the “winner”
a
 par-
ticipates in the current learning step (as indicated by the gray shading in
Fig. 3.5.)
The networks starts with a given node grid
A and a random initializa-
tion of the reference vectors. During the course of learning, the width of
the neighborhood bell function
h and the learning step size parameter

is continuously decreased in order to allow more and more specialization
and ﬁne tuning of the (then increasingly) individual neurons.
This particular cooperative nature of the adaptation algorithm has im-
portant advantages:
 it is able to generate topological order between the
w
a;
 as a result, the convergence of the algorithm can be sped up by in-
volving a whole group of neighboring neurons in each learning step;
 this is additionally valuable for the learning of output values with a
higher degree of robustness (see Sect. 3.8 below).
By means of the Kohonen learning rule Eq. 3.10 an
m–dimensional fea-
ture map will select a (possibly locally varying) subset of
m independent
features that capture as much of the variation of the stimulus distribu-
tion as possible. This is an important property that is also shared by the
method of principal component analysis (“PCA”, e.g. Jolliffe 1986). Here a
linear sub-space is oriented along the axis of the maximum data variation,
where in contrast the SOM can optimize its “best” features locally. There-
fore, the feature map can be viewed as the non-linear extension of the PCA
method.
The emerging tessellation of the input and the associated encoding in
the node location code exhibits an interesting property related to the task
of data compression. Assuming a noisy data transmission (or storage)
of an encoded data set (e.g. image) the data reconstruction shows errors
depending on the encoding and the distribution of noise included. Feature

3.8 Improving the Output of the SOM Schema
41
map encoding (i.e. node Location in the neural array) are advantageous
when the distribution of stochastic transmission errors is decreasing with
distance to the original data. In case of an error the reconstruction will
restore neighboring features, resulting in a more “faithful” compression.
Ritter showed the strict monotonic relationship between the stimulus
density in the
m-dimensional input space and the density of the match-
ing weight vectors. Regions with high input stimulus density
P
x will be
represented by more specialized neurons than regions with lower stimu-
lus density. For certain conditions the density of weight vectors could be
derived to be proportional to
P
x
, with the exponent


mm


(Ritter 1991).
3.8
Improving the Output of the SOM Schema
As discussed before, many learning applications desire continuous valued
outputs. How can the SOM network learn smooth input–output map-
pings?
Similar to the binning in the hyper-rectangular recursive partitioning
algorithm (CART), the original output learning strategy was the super-
vised teaching of an attached constant
y
a (or vector
y
a) for every winning
neuron
a

F
x

y
a


(3.11)
The next important step to increase the output precision was the intro-
duction of a locally valid mapping around the reference vector. Cleve-
land (1979) introduced the idea of locally weighted linear regression for
uni-variate approximation and later for multivariate regression (Cleve-
land and Devlin 1988). Independently, Ritter and Schulten (1986) devel-
oped the similar idea in the context of neural networks, which was later
coined the Local Linear Map (“LLM”) approach.
Within each subregion, the Voronoi cell (depicted in Fig. 3.5), the output
is deﬁned by a tangent hyper-plane described by the additional vector (or
matrix)
B
F
x

y
a


B
a

x

w
a


(3.12)
By this means, a univariate function is approximated by a set of tangents.
In general, the output
F
x is discontinuous, since the hyper-planes do not
match at the Voronoi cell borders.

42
Artiﬁcial Neural Networks
The next step is to smooth the LLM-outputs of several neurons, in-
stead of considering one single neuron. This can be achieved by replac-
ing the “winner-takes-all” rule (Eq. 3.9) with a “winner-takes-most” or “soft-
max” mechanism. For example, by employing Eq. 3.6 in the index space
of lattice coordinates
A. Here the distance to the best-match
a
 in the neu-
ron index space determines the contribution of each neuron. The relative
width
 controls how strong the distribution is smeared out, similarly to
the neighborhood function
h, but using a separate bell size.
This form of local linear map proved to be very successful in many ap-
plications, e.g. like the kinematic mapping for an industrial robot (Ritter,
Martinetz, and Schulten 1989; Walter and Schulten 1993). In time-series
prediction it was introduced in conjunction with the SOM (Walter, Ritter,
and Schulten 1990) and later with the Neural-Gas network (Walter 1991;
Martinetz et al. 1993). Wan (1993) won the Santa-Fee time-series contest
(series X part) with a network built of ﬁnite impulse response (“FIR”) ele-
ments, which have strong similarities to LLMs.
Considering the local mapping as an “expert” for a particular task sub-
domain, the LLM-extended SOM can be regarded as the precursor to the
architectural idea of the “mixture-of-experts” networks (Jordan and Jacobs
1994). In this idea, the competitive SOM network performs the gating of
the parallel operating, local experts. We will return to the mixture-of-experts
architecture in Chap. 9.

Chapter 4
The PSOM Algorithm
Despite the improvement by the LLMs, the discrete nature of the stan-
dard SOM can be a limitation when the construction of smooth, higher-
dimensional map manifolds is desired. Here a “blending” concept is re-
quired, which is generally applicable — also to higher dimensions.
Since the number of nodes grows exponentially with the number of
map dimensions, manageably sized lattices with, say, more than three
dimensions admit only very few nodes along each axis direction. Any
discrete map can therefore not be sufﬁciently smooth for many purposes
where continuity is very important, as e.g. in control tasks and in robotics.
In this chapter we discuss the Parameterized Self-Organizing Map (“PSOM”)
algorithm. It was originally introduced as the generalization of the SOM
algorithm (Ritter 1993). The PSOM parameterizes a set of basis functions
and constructs a smooth higher-dimensional map manifold. By this means
a very small number of training points can be sufﬁcient for learning very
rapidly and achieving good generalization capabilities.
4.1
The Continuous Map
Starting from the SOM algorithm, described in the previous section, the
PSOM is also based on a lattice of formal neurons, in the followig also
called “nodes”. Similarly to the SOM, each node carries a reference vector
w
a, projecting into the
d-dimensional embedding space
X

I
R
d.
 The ﬁrst step is to generalize the index space
A in the Kohonen map
to a continuous auxiliary mapping or parameter manifold
S

I
R
m in the
J. Walter “Rapid Learning in Robotics”
43

44
The PSOM Algorithm
s1 
s2 
a
31 
a
33 
A∈S      
w
9 
w
3 
w
1 
w
2 
Embedding  
Space  X 
Array of 
Knots  a  ∈A 
Figure 4.1: The PSOM's starting position is very much the same as for the SOM
depicted in Fig. 3.5. The gray shading indicates that the index space
A , which is
discrete in the SOM, has been generalized to the continuous space
S in the PSOM.
The space
S is referred to as parameter space
S.
PSOM. This is indicated by the grey shaded area on the right side of
Fig. 4.1.
 The second important step is to deﬁne a continuous mapping
w


s

w
s

M

X, where
s varies continuously over
S

I
R
m.
Fig. 4.2 illustrates on the left the
m=2 dimensional “embedded manifold”
M in the
d=3 dimensional embedding space
X.
M is spanned by the nine
(dot marked) reference vectors
w






w
	, which are lying in a tilted plane
in this didactic example. The cube is drawn for visual guidance only. The
dashed grid is the image under the mapping
w
 of the (right) rectangular
grid in the parameter manifold
S.
How can the smooth manifold
w
s be constructed? We require that the
embedded manifold
M passes through all supporting reference vectors
w
a
and write
w


S

M

X:
w
s

X
aA
H
a
s

w
a
(4.1)
This means that, we need a “basis function”
H
a
s
 for each formal node,
weighting the contribution of its reference vector (= initial “training point”)
w
a depending on the location
s relative to the node position
a, and possi-
bly, also all other nodes
A (however, we drop in our notation the depen-
dency
H
a
s


H
a
s
A on the latter).

4.1 The Continuous Map
45
s1 
s2 
x1 
x2 
x3 
 S 
w(s) 
M 
a
31 
a
33 
wa 
Parameter Manifold S 
with array of knots a  ∈ A  
Embedded Manifold  M 
in space X 
continuous 
mapping 
Figure 4.2: The mapping
w


S

M

X builds a continuous image of the
right side
S in the embedding space
X at the left side.
Specifying for each training vector a node location
a

A introduces
a topological order between the training points
w
a: training vectors as-
signed to nodes
a and
a
, that are neighbors in the lattice
A, are perceived
to have this speciﬁc neighborhood relation. This has an important effect: it
allows the PSOM to draw extra curvature information from the training set.
Such information is not available within other techniques, such as the RBF
approach (compare Fig. 3.3, and later examples, also in Chap. 8).
The topological organization of the given data points is crucial for a
good generalization behavior. For a general data set the topological order-
ing of its points may be quite irregular and a set of suitable basis functions
H
a
s difﬁcult to construct.
A suitable set of basis functions can be constructed in several ways but
must meet two conditions:
Orthonormality Condition:
i The hyper-surface
M shall pass through
all desired support points. At those points, only the local node con-
tributes (with weight one):
H
a
i

a
j



ij


a
i

a
j

A
(4.2)
Partition-of-Unity Condition: Consider the task of mapping a constant
function
x

w
a. Obviously, the sum in Eq. 4.1 should be constant

46
The PSOM Algorithm
 
s1 
s2 
H(a,s) 
a 
 
a 
a 
s1 
s1 
Figure 4.3: Three of the nine basis functions
H
a
 for a


 PSOM with equidis-
tant node spacing
A

f



g

f



g (left:)
H


s; (middle:)
H







s;
(right:)
H





s. The remaining six basis functions are obtained by
	
 rota-
tions around
s







.
as well, which means, the sum of all contribution weights should be
one:
X
aA
H
a
s


s
(4.3)
A simple construction of basis functions
H
a
s
 becomes possible when
the topology of the given points is sufﬁciently regular.
A particularly
convenient situation arises for the case of a multidimensional rectangu-
lar grid. In this case, the set of functions
H
a
s can be constructed from
products of one-dimensional Lagrange interpolation polynomials. Fig. 4.3
depicts three (of nine) basis functions
H
a
s
 for the
m

 dimensional
example with a


 rectangular node grid
A shown in Fig. 4.5. Sec. 4.5 will
give the construction details and reports about implementation aspects for
fast and efﬁcient computation of
H
a
s etc.
4.2
The Continuous Associative Completion
When
M has been speciﬁed, the PSOM is used in an analogous fashion
like the SOM: given an input vector
x,
i ﬁrst ﬁnd the best-match position
s
 on the mapping manifold
S by minimizing a distance function
dist:
s

 argmin
sS
dist

w
s
x

(4.4)

4.2 The Continuous Associative Completion
47
Then
ii use the surface point
w
s

 as the output of the PSOM in response
to the input
x.
To build an input-output mapping, the standard SOM is often extended
by attaching a second vector
w
out to each formal neuron. Here, we gener-
alize this and view the embedding space
X as the Cartesian product of the
input subspace
X
in and the output subspace
X
out
X

X
in

X
out

I
R
d

(4.5)
Then,
w
s

 can be viewed as an associative completion of the input space
component of
x if the distance function
dist (in Eq. 4.4) is chosen as the
Euclidean norm applied only to the input components of
x (belonging to
X
in). Thus, the function
dist actually selects the input subspace
X
in,
since for the determination of
s
 (Eq. 4.4) and, as a consequence, of
w
s

,
only those components of
x matter, that are regarded in the distance met-
ric
dist. The mathematical formulation is the deﬁnition of a diagonal
projection matrix
P
 diag
p


p






p
d

(4.6)
with diagonal element
p
k



k

I, and all other elements zero. The set
I is the subset of components of
X (f





dg) belonging to the desired
X
in. Then, the distance function can be written as
distx
x



x

x


T
P
x

x



X
k
I
p
k
x
k

x

k



d
X
k

p
k
x
k

x

k


 (4.7)
For example, consider a
d

 dimensional embedding space
X, where
the components
I

f

g belong to the input space. Only those must
be speciﬁed as inputs to the PSOM:
x


B
B
B
B
B
B
B

x


x

x



C
C
C
C
C
C
C
A


missing
components
 desired
output
(4.8)
The next step is the costly part in the PSOM operation: the iterative
“best-match” search for the parameter space location
s
, Eq. 4.4 (see next
section.) In our example Eq. 4.8, the distance metric Eq. 4.7 is speciﬁed

48
The PSOM Algorithm
A 
A 
B 
C 
~ 
B 
A 
B 
C 
~ 
A 
A 
B 
C 
~ 
C 
~ 
PSOM 
Manifold 
PSOM 
Manifold 
PSOM 
Manifold 
X 
X 
X 
X 
X 
P 
P 
P 
Figure 4.4: “Continuous associative memory” supports multiple mapping direc-
tions. The speciﬁed
P matrices select different subspaces (here symbolized by
	
A,
	
B and
	
C) of the embedding space as inputs. Values of variables in the selected
input subspaces are considered as “clamped” (indicated by a tilde) and deter-
mine the values found by the iterative least square minimization (Eq. 4.7). for the
“best-match” vector
w
s

. This provides an associative memory for the ﬂexible
representation of continuous relations.
as the Euclidean norm applied to the components 1,3 and 4, which is
equivalent to writing
P=diag(1,0,1,1,0).
The associative completion
x
 is then the extension of the vector
x
found by the components in the embedding manifold
M:
w
s




B
B
B
B
B
B
B

w

s


w

s


w

s


w

s


w

s



C
C
C
C
C
C
C
A





B
B
B
B
B
B
B

x

w

s


x

x

w

s



C
C
C
C
C
C
C
A

x

(4.9)
Fig. 4.4 illustrates the procedure graphically.
For the previous
d

 PSOM example, Fig. 4.5 illustrates visually the
associative completion
I

f
g for a set of input vectors. Fig. 4.5 shows
the result of the “best-match projection”
x

s

x into the manifold
M,
when
x varies over a regular


 grid in the plane
x


. Fig. 4.5c
displays a rendering of the associated “completions”
w
s

x, which form
a grid in
X.
As an important feature, the distance function
dist can be changed
on demand, which allows to freely (re-) partition the embedding space
X
in input subspace and output subspace. One can, for example, reverse the
mapping direction or switch to other input coordinate systems, using the
same PSOM.
Staying with the previous simple example, Figures 4.6 illustrate the
alternative use of the previous PSOM in example Fig. 4.5. To complete this

4.2 The Continuous Associative Completion
49
 
 
s1 
s2 
S      
x1 
x2 
x3 
x1 
x2 
x3 
x3      
x2        
a)           
b)           
c)           
d)          
Figure 4.5:
a–d: PSOM associative completion or recall procedure (I

f
g,
P=diag(1,0,1)) for a rectangular spaced set of



x


x

 tuples to
x


x

,
together with the original training set of Fig. 4.1,4.5. (a) the input space in the
x


 plane, (b) the resulting (Eq. 4.4) mapping coordinates
s


S, (c) the completed
data set in
X, (d) the desired output space projection (looking down
x
).
 
 
 
 
 
 
x1 
x2 
x3 
x1 
x2 
x3 
s1 
s2 
x2 
x3 
Figure 4.6: a–d: PSOM associative completion procedure, but in contrast to
Fig. 4.5 here mapping from the input subspace
x


 with the input components
I

f
g (P=diag(1,1,0)).

50
The PSOM Algorithm
alternative set of input vectors an alternative input subspace
I

f
g is
speciﬁed.
0
0.5
0
0.5
1
0
0.5
1
(a) 
(b) 
(c) 
(d) 
Figure 4.7: (a:) Reference vectors of a


 SOM, shared as training vectors by
a


 PSOM, representing one octant of the unit sphere surface (x


x


x


,
see also the projection on the
x


 base plane). (b:) Surface plot of the map-
ping manifold
M as image of a rectangular test grid in
S.
(c:) A mapping
x


x

x


x

 obtained from the PSOM with
P
diag

, (d:) same PSOM,
but used for mapping
x


x

x


x

 by choosing
P
diag

.
As another simple example, consider a 2-dimensional data manifold
in
I
R
 that is given by the portion of the unit sphere in the octant
x
i


(i



). Fig. 4.7, left, shows a SOM, providing a discrete approximation
to this manifold with a


-mesh. While the number of nodes could be
easily increased to obtain a better approximation for the two-dimensional
manifold of this example, this remedy becomes impractical for higher di-
mensional manifolds. There the coarse approximation that results from
having only three nodes along each manifold dimension is typical. How-
ever, we can use the nine reference vectors together with the neighborhood
information from the


 SOM to construct a PSOM that provides a much
better, fully continuous representation of the underlying manifold.
Fig. 4.7 demonstrates the


 PSOM working in two different map-
ping “directions”. This ﬂexibility in associative completion of alternative
input spaces
X
in is useful in many contexts. For instance, in robotics a
positioning constraint can be formulated in joint, Cartesian or, more gen-
eral, in mixed variables (e.g. position and some wrist joint angles), and one
may need to know the respective complementary coordinate representa-
tion, requiring the direct and the inverse kinematics in the ﬁrst two cases,
and a mixed transform in the third case. If one knows the required cases

4.3 The Best-Match Search
51
beforehand, one can construct a separate mapping for each. However, it
is clearly more desirable to work with a single network that can complete
different sets of missing variable values from different sets of known val-
ues.
4.3
The Best-Match Search
Returning to Eq. 4.4, we see that the discrete best-match search in the stan-
dard SOM is now replaced by solving the continuous minimization prob-
lem for the cost function
E
s



dist
x
w
s



d
X
k

p
k
x
k

w
k
s


(4.10)
A very straightforward solution is to start with a good guess
s
t

a
 taken as the node location of the best-matching reference vector
w
a
,
analog to the SOM best-match step in Eq. 3.9. Then an iterative gradient
descent is performed
s
t	

s
t


d
X
k

p
k

w
k
s
t


s
x
k

w
k
s
t

(4.11)
with


 as a step size parameter.
However the simple ﬁrst order gradient descent method given is very
sensitive to the proper choice of the step size parameter
. Too small values
lead to unnecessarily many iteration steps, too large values can lead to
divergence.
We tested various algorithms for automatically adjusting



t on
the basis of observing the sequence in cost reduction and gradient direc-
tion. Some can indeed increase robustness and the rate of convergence
but bear the disadvantage of introducing other critical parameters to the
algorithm. Other techniques were considered, which are often used for im-
proving the back-propagation learning algorithm: Eq. 4.11 is augmented
by a “momentum term”
	s

t	

	s
t	


s
t

(4.12)
with the intention to suppress oscillations. This technique is very helpful if
the parameter
 is well-chosen. One method which determines
 is known

52
The PSOM Algorithm
as conjugate gradient decent. It involves a line minimization procedure for
each gradient direction and optimizes successive search directions. The
line minimization usually probes
E
s

	s at three points to ﬁnd the
one-dimensional sub-space minimum on the parabola. The idea behind
the conjugate gradient method is to accumulate information on successive
steps in order to lead to the exact minimum for quadratic cost functions
(Fletcher-Reeves and Polak-Ribiere, as well as other advanced variable met-
ric minimization schemes, e.g. the Fletcher-Powell algorithm; Stoer and Bu-
lirsch 1980; Press et al. 1988; Hertz et al. 1991).
The much more direct way is to use a second order method. In con-
trast to the feed-forward networks, the PSOM networks does allow easy
computation of the second derivatives of the basis function
H
a
s (shown
later in this chapter).
The simplest second-order method is the Newton-Raphson method. It
can be formulated as the Taylor expansion of the gradient
r
s
E at the es-
timated best-match location
s. Unfortunately, the second derivative, the
Hessian matrix
r
s
r
s
E may not have full rank and as a consequence, it
might be non-invertible. A very robust recipe was developed by Leven-
berg and Marquardt. They suggested to add a diagonal matrix term
	
 to
the Hessian matrix
r
s
r
s
E
s

	


s

r
s
E
s


s
(4.13)
If the so-called Levenberg-Marquardt parameter
	 is small, the algorithm
is dominantly a Newton-Raphson method. On the other hand, if
	 is large,
the inverted matrix is called diagonally dominant, and the resulting be-
havior approaches that of the steepest gradient method (Marquardt 1963;
Press et al. 1988).
Starting with
s
t

a
 and (e.g.)
	


,
	 is adapted dynamically:
if the last iteration step resulted in a cost reduction
E
s
t


s the step
is accepted,
s
t	

s
t


s, and
	 is decreased by a signiﬁcant factor of,
e.g. 10. Otherwise, if the step leads to an increase of cost, then the step
will be repeated with

s based on an increased
	. The iteration is stopped
when the step size drops below a desired threshold.
The Levenberg-Marquardt works very satisfactorily and ﬁnds the min-
imum of
E
s efﬁciently within a couple of iterations.
Our experience
shows a more than one order of magnitude higher speed than the sim-
ple steepest gradient algorithm. The general problem of ﬁnding a global

4.4 Learning Phases
53
or one out of several local minima as best-match is discussed in section 6.1.
4.4
Learning Phases
As pointed out in the introduction, in the biological world we ﬁnd many
types of learning. The PSOM approach offers several forms by itself.
One PSOM's core idea is the construction of the continuous mapping
manifold using a topologically ordered set of reference vectors
w
s. There-
fore the ﬁrst question of learning can be formulated: how to obtain the
topological order of the reference vectors
w
a? The second question is,
how to adapt and improve the mapping accuracy in an on-line fashion,
allowing to cope with drifting and changing tasks and target mappings?
The PSOM algorithm offers two principal ways for this initial learning
phase:
PSOM Unsupervised Self-Organization Mode: One way is to employ the
Kohonen adaptation rule Eq. 3.10 described in Sect. 3.7.
The ad-
vantage is that no structural information is required. On the other
hand this process is iterative and can be slow. It might require much
more data to recover the correct structural order (see also stimulus-
sampling theory in the introduction). Numerous examples on the
self-organizing process are given in the literature, e.g. (Kohonen 1990;
Ritter, Martinetz, and Schulten 1992; Kohonen 1995))
PSOM Supervised Construction (PAM: Parameterized Associative Map)
In some cases, the information on the topological order of the train-
ing data set can be otherwise inferred — for example generated — by ac-
tively sampling the training data. In the robotics domain frequently
this can be done by structuring the data gathering process — often
without any extra effort.
Then the learning of the PSOM is sped up tremendously: the iterative
self-organization step can be replaced by an immediate construction.
The prototypically sampled data vectors
w
a are simply assigned to
the node locations
a in the set
A. In the following chapter, several
examples shall illustrate this procedure.
Irrespective of the way in which the initial structure of the PSOM map-
ping manifold was established, the PSOM can be continuously ﬁne-tuned

54
The PSOM Algorithm
following an error-minimization process. This is particularly useful to im-
prove the a PSOM that was constructed with a noisy sampled training set
or to adapt it to a changing or drifting system.
In the following we propose a supervised learning rule for the refer-
ence vectors
w
a, minimizing the obtained output error. Required is the
target, the embedded input–output vector, here also denoted
x. The best-
match
w
s



M for the current input
x is found according to the cur-
rent input sub-space speciﬁcation (set of components
I; distance metric
P).
Each reference vector is then adjusted, weighted by its contribution factor
H
, minimizing the deviation to the desired joint input-output vector
x
	w
a


H
a
s


x

w
s


(4.14)
0
0.2
0.4
0.6
0.8
1
-1
-0.5
0
0.5
1
after training
reference vectors W_a
training data set
before training
Figure 4.8: The mapping result of a three node PSOM before and after learning
by the means of Eq. 3.10 with the “+” marked learning examples (generated by
x


x





; normal distributed noise
 with mean 0 and standard devia-
tion 0.15). The positions of the reference vectors
w
a are indicated by the asterisks.
The same adaptation mechanism can be employed for learning the out-
put components of the reference vectors from scratch, i.e. even in the ab-
sence of initial corresponding output data. As a prerequisite, the input
sub-space
X
in of the mapping manifold must be spanned in a topolog-
ical order to facilitate the best-match dynamic Eq. 4.4 to work properly.

4.4 Learning Phases
55
Assuming that a proper subset of input components
I has been speciﬁed
(usually when the number of input components is equal to the mapping
dimension,
jI
j

m), an input vector
Px can be completed with a zero
distance (E
s

=0) best-match location
Pw
s



Px in the mapping man-
ifold
M. Then, only the output components are effectively adapted by
Eq. 4.14 (equivalent to the selection matrix



P). If the measurement of
the training vector components is differently reliable or noisy, the learning
parameter
 might be replaced by a suitable diagonal matrix controlling
the adaptation strength per component (we return to this issue in Sect. 8.2.)
Fig. 4.8 illustrates this procedure for an
m

 dimensional three-node
PSOM. We consider the case of a
d

 dimensional embedding space
x


x

 and
I

fg, i.e., a mapping
x


x


x

. The embedded mani-
fold
M is drawn before and after 300 adaptation steps (using Eq. 4.14 with
a learning steps parameter
 linearly decreased from 0.8 to 0.1) together
with the reference vectors and the noisy training data set.
Note, that Eq. 4.14 is taking the entire PSOM output
w
s

 into account,
in contrast to
w
a in the “locally acting” Kohonen step of Eq. 3.10. But the
alternatively proposed learning rule (Ritter 1993)
	w
a


H
a
s


x

w
a

(4.15)
turns out to be unstable. A correctly trained PSOM is even corrupted by a
sequence of further training examples.
We demonstrate this fact by an example. For the same learning task,
Fig. 4.9 depicts the initially correct parabola shaped mapping manifold
M and the asterisk marked locations of the three reference vectors
w
a in
the front curve. The other curves, shifted to the back, show
M after sev-
eral epochs of 25 adaptation steps, each using Eq. 4.15 (uniformly random
sampled training vectors,


). The adaptation leads to a displace-
ment of the reference vectors in such a way, that the symmetric parabola
becomes distorted. This shows that Eq. 4.15 is not able to maintain the
correct mapping. The reference vectors are shaken around too-much – in a
non-localized manner, and in both the output and input space. Note, that
the mapping manifold
M in Fig. 4.9 does not display one simple parabola
but in fact the parameterized curve
w

s
w

s (the joint ordinate pro-
jection of two parabolas
w

s
w

s with the invisible abscissa
s in the
parameter manifold
S; Initially
w

s is constructed here as a linear func-
tion (degenerated parabola) in
s, similar as Fig. 4.8).

56
The PSOM Algorithm
-1
-0.5
0
0.5
1
0
50
100
0.5
1
x1 
x2 
Adaptation 
Steps 
Figure 4.9: In contrast to the adaptation rule Eq. 4.14, the modiﬁed rule Eq. 4.15
is here instable, see text.
4.5
Implementation Aspects and
the Choice of Basis Functions
As discussed previously in this chapter, the PSOM utilizes a set of basis
functions
H
a
s, which must satisfy the orthonormality and the division-
of-unity condition. Here we explain one particular class of basis functions.
It is devoted to the reader also interested in the numerical and implemen-
tation aspects. (This section is not a prerequisite for the understanding of
the following chapters.)
A favorable choice for
H
a
s is the multidimensional extension of the
well known Lagrange polynomial. In one dimension (m

d

)
a is from
a set
A

fa
i
j
i






ng of discrete values and Eq. 4.1 can be written as
the Lagrange polynomial interpolating through
n support points
a
i

w
i
:
w
s

l

s
Aw


l

s
Aw






l
n
s
Aw
n

n
X
k

l
k
s
A
w
k
(4.16)
where the Lagrange factors
l
i
s
A are deﬁned as
l
i
s
A

n
Y
j

j
i
s

a
j
a
i

a
j

(4.17)
If
m

, Eq. 4.16 and 4.17 can be generalized in a straightforward
fashion, provided the set of node points form a
m-dimensional hyper-

4.5 Basis Function Sets, Choice and Implementation Aspects
57
lattice in
S, i.e. the Cartesian product of
m one-dimensional node point
sets
A

A


A






A
m, with
A


f

a



a







a
n

g. Here,

a
i denotes
the
i-th value that can be taken by the
-th component (

f




mg) of
a along the
-th dimension of
s



s

s




m
s
T

S. Fig. 4.10 illustrates
an example with
n


,
n


, and
n


.
1a1 
1a2 
1a3 
2a1 
2a2 
2a3 
2a4 
3a1 
3a2 
S 
s
1 
s
2 
s
3 
Figure 4.10: Example of a
m

 dimensional mapping manifold
S with a
342 node set
A

S in orthonormal projection. Note the rectangular struc-
ture and the non-equidistant spacing of the

a
i.
With this notation, we can write
H
a
s

H
a
s
A as
H
a
s


m
Y


l
i



s
A


(4.18)
using the one-dimensional Lagrange factors and the notation
a

a
i



a
i



a
i






m
a
i
m

T

A
In Fig. 4.3 (p. 46) some basis functions of a
m

 dimensional PSOM with
equidistantly chosen node spacing, are rendered. Note, that the PSOM al-
gorithm is invariant to any offset for each
S axis, and together with the
iterative best-match ﬁnding procedure, it becomes also invariant to rescal-
ing.
Comparative results using (for
n

) a node spacing derived from the
Chebyshev polynomial are reported in Sec. 6.4.
The ﬁrst derivative of (4.1) turns out to be surprisingly simple, if we
write the product rule in the form


x
f

xf

x



f
n
x

f

xf

x



f
n
x
n
X
k


f
k

x
x
f
k
x

f
k
x


(4.19)

58
The PSOM Algorithm
With the intermediate result



s
l
i



s
A





l
i



s
A


n

X
j

j
i



s


a
j
(4.20)
and




s
H
a
s

H
a
s
m
X






s
l
i



s
A


l
i



s
A



H
a
s
n

X
j

j
i



s


a
j
(4.21)
the row vector of the required Jacobian matrix is

w
s



s

X
a
w
a
H
a
s
n

X
j

j
i



s


a
j

(4.22)
This is correct, if
f
k
l
i


. Or, in other words, for all
s staying away
from the dashed grid structure in Fig. 4.10; there, one or more of the prod-
uct functions
f
k (l
i) become zero. Although the vanishing denominator
is canceled by a corresponding zero in the pre-factor (the derivative of a
polynomial is well-behaved everywhere), the numerical implementation
of the algorithm requires special attention in the vicinity of a diminishing
denominator in Eq. 4.20.
One approach is, to treat in each
S -axis the smallest term
k

s


a
j
k
direction
 always separately. This is shown below.
For an implementation of the algorithm, an important point is the ef-
ﬁcient evaluation of the Lagrange factors and their derivatives. Below we
give some hints how to improve their computation requiring
O
n opera-
tions, instead of
O
n

 operations for the “naive” approach. For the sake
of readability we omit from here on the (upper left)
S component index

(
f





mg) and reduce the notation of running indexes

	

j
	

n to
the short form “j”; extra exclusions
j

i are written as “j
i”.
We denote the index of the closest support point (per axis) with an asterisk
i

 argmin
j
ks

a
j
k
(4.23)
and rewrite Eq. 4.17 and (4.21):

4.5 Basis Function Sets, Choice and Implementation Aspects
59
l
i
s
A


Q
i

Q
i
d
i

if
i

i

else

l
i

s


Q
i

S
i

Q
i
S
i
d
i



if
i

i

else


l
i

s



	

Q
i

S

i


S
i


Q
i
h
S

i

S
i

d
i


S
i
i
if
i

i

else
using:
d
i

s

a
i
C
i

Y
ji
a
i

a
j


const
Q
i


C
i
Y
jii

d
j
S
i

X
jii


d
j
S
i

X
jii



d
j


(4.24)
The interim quotients
Q
i and sums
S
i and
S
i are efﬁciently gener-
ated by deﬁning the master product
Q
i
 (and sums
S
i
 respectively) and
working out the speciﬁc terms via “synthetic division” and “synthetic sub-
traction” for all
i

i

Q
i

Q
i

d
i
,
S
i

S
i



d
i
, and
S
i

S
i




d
i



(4.25)
Computing
H
a
s and its derivatives is now a matter of collecting the
proper pre-computed terms.
H
a
s

Q
m


l
i



s
A



H
a
s



s

Q
m







s
l
i



s
A


l
i



s
A


if



else


H
a
s



s


s

Q
m





	








s

l
i



s
A


l
i



s
A






s
l
i



s
A


if





if


 and



else
(4.26)

60
The PSOM Algorithm
From here the coefﬁcients of the linear system Eq. 4.13 can be assembled




s
E

d
X
k

p
k

x
k

w
k
s

w
k
s



s
(4.27)
and





s


s
E

d
X
k

p
k


w
k
s



s

w
k
s



s

x
k

w
k
s


w
k
s



s


s


(4.28)
Care should be taken to efﬁciently skip any computing of non-input com-
ponents
k with
p
k

. Later, we present several examples where the
PSOM ability to augment the embedding space is extensively used. In
Chap. 9 the PSOM will ﬁnd a hierarchical structure where it is important,
that a few hundred output components (d) can be completed without sig-
niﬁcant operational load.
Other numerical algorithms exist, which optimize the evaluation of
special polynomials, for example the recursive Neville's algorithm (Press
et al. 1988). Those are advantageous for the situation
m

d

. But
the requirement to deal with multiple dimensions
m and even very large
embedding dimensions
d makes the presented algorithm superior with
respect to computational efﬁciency.
4.6
Summary
The key points of the “Parameterized Self-Organizing Map” algorithm are:
 The PSOM is the continuous analog of the standard discrete “Self-
Organizing Map” and inherits the SOM's unsupervised learning ca-
pabilities (Kohonen 1995). It shows excellent generalization capabil-
ities based on continuous attractor manifolds instead of just attractor
points.
 Based on a strong bias, introduced by structuring the training data in
a topological order, the PSOM can generalize from very few examples
— if this assumed topological model is a good approximation to the
system.

4.6 Summary
61
 For training data sets with the known topology of a multi-dimensional
Cartesian grid the map manifold can be constructed directly. The re-
sulting PSOM is immediately usable — without any need for time
consuming adaptation sequences. This feature is extremely advan-
tageous in all cases where the training data can be sampled actively.
As shown later in Capt. 8, in robotics many sensorimotor transfor-
mations can be sampled in a structured manner, without any extra
cost.
 Independently of how the the initial structure was found, further on-
line ﬁne-tuning is facilitated by an on-line error minimization proce-
dure. This adaption is required for example, in the case of coarsely
sampled or noise-corrupted data, as well as in cases, where the learn-
ing system has to adapt to drifting, or suddenly changing mapping
tasks.
 The multi-way mapping ability of the PSOM is facilitated by the non-
linear auto-associative completion of partial inputs. The components of
the embedding space are selected as inputs by the diagonal elements
p
k of the projection matrix
P. Furthermore, the coefﬁcients
p
k weight
the components relative to each other. This choice can be changed
on demand.
 The PSOM completion process performs an iterative search for the
best-matching parameter location
s
 in the mapping manifold (Eq. 4.7).
This is the price for rapid learning. Fortunately, it can be kept small
by applying an adaptive second order minimization procedure (Sect. 4.5).
In conjunction with an algorithmic formulation optimized for efﬁ-
cient computation and also for high-dimensional problems, the com-
pletion procedure converges already in a couple of iterations.
The following chapter will demonstrate the PSOM properties in a number
of examples. Later, several application examples will be presented.

62
The PSOM Algorithm

Chapter 5
Characteristic Properties by
Examples
As explained in the previous chapter, the PSOM builds a parameterized
associative map. Employing the described class of generalized multi-dimensional
Lagrange polynomials as basis functions facilitates the construction of very
versatile PSOM mapping manifolds.
Resulting unusual characteristics
and properties are exposed in this chapter.
Several aspects ﬁnd description: topological order introduces model
bias to the PSOM and strongly inﬂuences the interpretation of the training
data; the inﬂuence of non-regularities in the process of sampling the train-
ing data is explored; “topological defects” can occur, e.g. if the correspon-
dence of input and output data is mistaken; The use of basis polynomials
affects the PSOM extrapolation properties. Furthermore, in some cases the
given mapping task faces the best-match procedure with the problem of
non-continuities or multiple solutions.
Since the visualization of multi-dimensional mappings embedded in
even higher dimensional spaces is difﬁcult, the next section illustrates
stepwise several PSOM examples. They start with small numbers of nodes.
5.1
Illustrated Mappings – Constructed From a
Small Number of Points
The ﬁrst mapping example is a two-dimensional (m

) PSOM mapping
manifold with


 reference vectors in a four-dimensional (d

) dimen-
J. Walter “Rapid Learning in Robotics”
63

64
Characteristic Properties by Examples
X12 
X12 
X34 
a) 
b) 
c) 
d) 
X 34 
Figure 5.1: A
m

 dimensional PSOM with


 training vectors in a
d


dimensional embedding space
X. a–b) Initial training data, or reference vectors
w
a, connected by lines and projected in
X
 and
X
. c–d) Projections of a



test grid for visualizing the embedding manifold
M

I
R
.
sional embedding space
X. The ﬁrst two components are the input space
X
in

X
 the last two are the output-space
X
out

X
. The subscript
indicates here the indented projection of the embedding space.
Fig. 5.1a shows the reference vectors drawn in the input sub-space
X

and Fig. 5.1b in the output sub-space
X
 as two separate projections.
The invisible node spacing
a

A is here, and in the following examples,
equidistantly chosen. For the following graphs, the embedding space con-
tains a
m dimensional sub-space
X
s where the training vector components
are set equal to the internal node locations
a in the rectangular set
A. The
PSOM completion in
X
s is then equivalent to the internal mapping man-
ifold location
s, here
X
s

X
 in Fig. 5.1a+c. Since the PSOM approach
makes it easy to augment the embedding space
X, this technique is gen-
erally applicable to visualize the embedding manifold
M: A rectangular
test-grid in
X
s is given as input to the PSOM and the resulting completed
d-dimensional grid
fw
sg is drawn in the desired projection.
Fig. 5.1c displays the


 rectangular grid and on the right Fig. 5.1d
its image, the output space projection
X
. The graph shows, how the
embedding manifold nicely picks the curvature information found in the
connected training set of Fig. 5.1. The edges between the training data
points
w
a are the visualization of the essential topological information
drawn from the assignment of
w
a to the grid locations
a.
Fig. 5.2 shows, what a


 PSOM can do with only four training vectors
w
a. The embedding manifold
M now non-linearly interpolates between
the given support points (which are the same corner points as in the pre-
vious ﬁgure). Please note, that the mapping is already non-linear, since

5.1 Illustrated Mappings – Constructed From a Small Number of Points
65
X12 
X12 
X34 
a) 
b) 
c) 
d) 
X 34 
Figure 5.2: A
m

 dimensional PSOM with


 training vectors in a
d


dimensional embedding space
X with the same corner training points as in the
previous


 ﬁgure.
parallel lines are not kept parallel. Any bending of
M has disappeared. To
capture the proper “curvature” of the transformation, one should have at
least one further point, between the two endpoints of a mapping interval.
-1
-0.5
0
0.5
1
-1 -0.50 0.51
-1
-0.5
0
0.5
1
Figure 5.3: Isometric projection
of the
d

,
m

 dimen-
sional manifolds
M.
The


 PSOM manifold spans like a
soap ﬁlm over the four corner-
ing reference vectors
w
a.
Fig. 5.3 visualizes the mapping capabilities of a
m

 dimensional
mapping manifold spanned by


 training vectors in the 3 D embed-
ding space
X.. The resulting mapping belongs to the “harmonic func-
tions” with a zero second derivative (r
s
r
s
w
s

 source free) and has
the characteristics of a “soap ﬁlm membrane” spanned over the grid.
Fig. 5.4 illustrates the same mapping capabilities for the
m

 dimen-
sional mapping manifold spanned by the 222 training vectors. The
nodes (corner vertices) span the
m-dimensional hypercube conﬁguration
with

m nodes.
Summarizing, even with very small numbers of nodes, the PSOM man-
ifold has very rich mapping properties. Two and three-dimensional PSOM
were shown, with two and three nodes per axes. Using multi-dimensional

66
Characteristic Properties by Examples
Figure 5.4: Three examples of
m

 dimensional manifolds
M of a PSOM with
222 training vector points. They are shown as perspective surface plots of a
grid spanned by the eight corner reference vectors
w
a.
test grids the high-dimensional embedded manifolds can be visualized.
Selecting a good underlying node model is the ﬁrst - and a very important
step. If a small training set is desired, the presented results suggest to start
with a PSOM with three nodes per axis. If one expects a linear dependence
in one degree of sampling, two nodes are sufﬁcient.
5.2
Map Learning with Unregularly Sampled Train-
ing Points
Here, we want to explore the PSOM mapping behavior in case of the train-
ing samples not being drawn from an exact regular grid, but instead from
a “roughly regular” grid, sampled with some “jitter”. We consider the
example of a “barrel shaped” mapping
I
R


I
R
, given by
x


x


x


(5.1)
x


x

x


x



s


x






q
x



x


Eq. 5.1 maps the unit cube [-1,1]
 into a barrel shaped region, shown in
Fig. 5.5. The ﬁrst four plots in the upper row illustrate the mapping if the

5.2 Map Learning with Unregularly Sampled Training Points
67
a) 
b) 
c) 
d) 
e) 
f) 
g) 
h) 
+ 
= 
Figure 5.5: The jittery barrel mapping (Eq. 5.1,
X


a
e
g

h
X


b
c
d
f

projections). The training data set is asterisk marked shown as the
X
 (a) and
X
 (b) projection and the mapping manifold
M (m=3) as surface grid plot in
(c). To reveal the internal structure of the mapping inside the barrel, a “ ﬁlament”
picture is drawn by the vertical lines and the horizontal lines connecting only the
points of the 10510 grid in the top and bottom layer (d).
(e)(f) If the samples are not taken on a regular grid in
X
 but with a certain jitter,
the PSOM is still able to perform a good approximation of the target mapping:
g
 shows the image of the data set
d taken as input. The plot
h draws the
difference between the result of the PSOM completion and the target value as
lines.

68
Characteristic Properties by Examples
PSOM training samples are taken from the rectangular grid of the asterisk
markers depicted in Fig. 5.5ab.
The succeeding plots in the lower row present the situation, that the
PSOM only learned the randomly shifted sampling positions Fig. 5.5ef.
The mapping result is shown in the rightmost two plots: The 333 PSOM
can reconstruct the goal mapping fairly well, illustrating that there is no
necessity of sampling PSOM training points on any precise grid structure.
Here, the correspondence between
X and
S is weakened by the sampling,
but the topological order is still preserved.
5.3
Topological Order Introduces Model Bias
In the previous sections we showed the mapping manifolds for various
topologies which were already given. This stage of obtaining the topolog-
ical correspondence includes some important aspects:
1. Choosing a topology is the ﬁrst step in interpreting a given data set.
2. It introduces a strong model bias and reduces therefore the variance.
This leads – in case of the correct choice – to an improved general-
ization.
3. The topological information is mediated by the basis functions. All
examples shown here, build on the high-dimensional extension to
approximation polynomials. Therefore, the examples are special in
the sense, that the basis functions are varying only within their class
as described in Sec. 4.5. Other topologies can require other types of
basis functions.
To illustrate this, let us consider a 2 D example with six training points.
If only such a small data set is available, one may ﬁnd several topolog-
ical assignments. In Fig. 5.6 the six data points
w
a are drawn, and two
plausible, but different assignments to a 32 node PSOM are displayed.
In the vicinity of the training data points the mapping is equivalent,
but the regions interpolating and extrapolating differ, as seen for the cross-
marked example query point. Obviously, it needs further information to
resolve this ambiguity in topological ordering. Active sampling could re-
solve this ambiguity.

5.3 Topological Order Introduces Model Bias
69
     b) 
    c) 
     d) 
     e) 
     a) 
x 
x     
x 
1 
3 
4 
5 
6 
1 
3 
4 
5 
6 
2 
2 
x 
Figure 5.6: The inﬂuence of the topological ordering. In pathological situations,
one data set can lead to ambiguous topologies. The given six data points (a) in
X
in
can be assigned to more than one unique topology: obviously, both 32 grids, (b)
and (c) are compatible. Without extra knowledge, both are equivalently suitable.
As seen in (d)(e), the choice of the topology can partition the input space in rather
different regions of inter- and extrapolation. For example, the shown query point
x lie central between the four points 1,2,3,4 in (b), and for the topology in (d),
points 2,3 are much closer to
x than points 1 and 4. This leads to signiﬁcantly
different interpretation of the data.

70
Characteristic Properties by Examples
If we have insufﬁcient information about the correct node assignment
and are forced to make a some speciﬁcation, we may introduce “topologi-
cal defects”.
5.4
“Topological Defects”
What happens if the training vectors
w
a are not properly assigned to the
node locations
a?
What happens, if the topological order is mistaken
and the neighborhood relations do not correspond the closeness in input
space? Let us consider here the case of exchanging two node correspon-
dences.
Fig. 5.7a-b and Fig. 5.7c-d depict two previous examples, where two
reference vectors got swapped. One the left side, the


 PSOM exhibits
a complete twist, pinching all vertical lines. The right pictures show, how
the embedding manifold of the


 PSOM in Fig. 5.1 becomes distorted
in the lower right part. The PSOM manifold follows nicely all “topolog-
ical defects” given and resembles an “elastic net” or cover, pinned at the
supporting training vectors.
X34 
X34 
X34 
a) 
b) 
c) 
d) 
X 34 
Figure 5.7: “Topological defects” by swapping two training vectors: a–b the



PSOM of Fig. 5.2 and c–d the


 PSOM of Fig. 5.1
Note, that the node points are still correctly mapped, as one can expect
from Eq. 4.2, but in the inter-node areas the PSOM does not generalize
well. Furthermore, if the opposite mapping direction is chosen, the PSOM
has in certain areas more than one unique best-match solution
s
. The
result, found by Eq. 4.4, will depend on the initial start point
s
t.
Can we algorithmically test for topological defects? Yes, to a certain
extent. Bauer and Pawelzik (1991) introduced a method to compare the

5.5 Extrapolation Aspects
71
“faithfulness” of the mapping from the embedding input space to the pa-
rameter space. The topological, or “wavering” product gives an indication
on the presence of topological defects, as well as too small or too large
mapping manifold dimensionality.
As already pointed out, the PSOM draws on the curvature information
drawn from the topological order of the training data set. This information
is visualized by the connecting lines between the reference vectors
w
a of
neighboring nodes. How important this relative order is, is emphasized
by the shown effect if the proper order is missing, as seen Fig. 5.7.
5.5
Extrapolation Aspects
Figure 5.8: The PSOM of Fig. 5.1d in
X
 projection and in superposition a
second grid showing the extrapolation
beyond the training set (190 %).
Now we consider the extrapolation areas, beyond the mapping region of
the convex hull of the reference vectors. Fig. 5.8 shows a superposition of
the original


 test grid image presented in Fig. 5.1d and a second one
enlarged by the factor 1.9. Here the polynomial nature of the employed
basis functions exhibits an increasingly curved embedding manifold
M
with growing “remoteness” to the trained mapping area. This property
limits the extrapolation abilities of the PSOM, depending on the particular
distribution of training data. The beginning in-folding of the map, e.g.
seen at the lower left corner in Fig. 5.8 demonstrates further that
M shows
multiple solutions (Eq. 4.4) for ﬁnding a best-match in
X
. In general,
polynomials (s

x) of even order (uneven node number per axes) will
show multiple solutions. Uniqueness of a best-match solution (s
) is not

72
Characteristic Properties by Examples
guaranteed. However, for well-behaved mappings the corresponding
s

values are “far away”, which leads to the advise: Be suspicious, if the best-
match
s
 is found far outside the given node-set
A.
Depending on the particular shape of the embedding manifold
M, an
unfortunate gradient situation may occur in the vicinity of the border
training vectors. In some bad cases the local gradient may point to an-
other, far outside local minimum, producing a misleading completion re-
sult. Here the following heuristic proved useful:
In case the initial best-match node
a
 (Sect. 4.3) has a marginal surface
position in
A, the minimization procedure Eq. 4.4 should be started at a
shifted position
s
t

a


	a
	

(5.2)
The start-point correction
	a
	 is chosen to move the start location inside
the node-set hyper-box, perpendicular to the surface. If
a
 is an edge or
corner node, each surface normal contributes to
	a
	. The shift length is
uncritical: one third of the node-set interval, but maximal one inter-node
distance, is reasonable. This start-point correction is computationally neg-
ligible and helps to avoid critical border gradient situations, which could
otherwise lead to another, undesired remote minimum of Eq. 4.4.
5.6
Continuity Aspects
The PSOM establishes a smooth and continuous embedding manifold
M

s

w
s. However, the procedure of associative completion bears several
cases of non-continuous responses of the PSOM.
They depend on the particular mapping and on the selection of the
input sub-space
X
in, respectively
P. The previous section already exhib-
ited the extrapolation case, where multiple solutions occured. What are
important cases, where discontinuous PSOM responses are possible?
Over-speciﬁed Input: Consider the case, where the speciﬁed input sub-
space
X
in over-determines the best-match point in the parameter
manifold
S. This happens if the dimensionality of the input space
is higher than the parameter manifold
S: dimX
in


jI
j

m.
Fig. 5.9 illustrates this situation with a (m

) one-dimensional
PSOM and displays the two input space dimensions
X
in together

5.6 Continuity Aspects
73
M 
x 
w(s*) 
.     
.     
.     
Figure 5.9: The PSOM responses
w
s


for a sequence of inputs
x (dotted line)
lead to a “jump” in the resulting best-
match
s
 at the corresponding comple-
tion
w
s

.
with the projection of the embedding manifold
PM. Assume that
the sequence of presented input vectors
x (2 D!) varies on the indi-
cated dotted line from left to right. The best-match location
Pw
s

,
determined as the closest point to
x , is moving up the arch-shaped
embedding manifold
M. At a certain point, it will jump to the other
branch, obviously exhibiting a discontinuity in
s
 and the desired
association
w
s

.
Multiple Solutions: The next example Fig. 5.10 depicts the situation
jI
j

m

. A one-dimensional four-node PSOM is employed for the
approximation of the mapping
x


x
. The embedding manifold
M

X

I
R
 is drawn, together with the reference vectors
w
a.
x2 
x1 
Figure 5.10: The transition from a continuous to a non-continuous response. A
four node, one-dimensional PSOM in the two-dimensional embedding space
X.
The two middle reference vector positions
w
a are increasingly shifted, see text.
The middle two reference vectors are increasingly shifted in oppo-
site horizontal directions, such, that
M becomes more and more a
S-shaped curve. If the curve gets a vertical tangent, a “phase tran-
sition” will be encountered. Beyond that point, there are obviously

74
Characteristic Properties by Examples
three compatible solutions
s
 fulﬁlling Eq. 4.4, which is a bifurcation
with respect to the shift operation and a discontinuity with respect
to the mapping
x


x
.
In view of the pure
x
 projection, the ﬁnal stage could be interpreted
as “topological defect” (see Sec. 5.4). Obviously, this consideration is
relative and depends very much on further circumstances, e.g. infor-
mation embedded in further
X components.
5.7
Summary
The construction of the parameterized associative map using approxima-
tion polynomials shows interesting and unusual mapping properties. The
high-dimensional multi-directional mapping can be visualized by the help
of test-grids, shown in several construction examples.
The structure of the prototypical training examples is encoded in the
topological order, i.e. the correspondence to the location (a) in the map-
ping manifold
S. This is the source of curvature information utilized by
the PSOM to embed a smooth continuous manifold in
X. However, in
certain cases input-output mappings are non-continuous. The particular
manifold shape in conjunction with the associative completion and its op-
tional partial distance metric allows to select sub-spaces, which exhibit
multiple solutions. As described, the approximation polynomials (Sec. 4.5)
as choice of the PSOM basis function class bears the particular advan-
tage of multi-dimensional generalization. However, it limits the PSOM
approach in its extrapolation capabilities. In the case of a low-dimensional
input sub-space, further solutions may occur, which are compatible to the
given input. Fortunately, they can be easily discriminated by their their
remote
s
 location.

Chapter 6
Extensions to the Standard PSOM
Algorithm
From the previous examples, we clearly see that in general we have to ad-
dress the problem of multiple minima, which we combine with a solution
to the problem of local minima. This is the subject of the next section.
In the following, section 6.2 describes a way of employing the multi-
way mapping capabilities of the PSOM algorithm for additional purposes,
e.g. in order to simultaneously comply to auxiliary constraints given to
resolve redundancies.
If an increase in mapping accuracy is desired, one usually increases the
number of free parameters, which translates in the PSOM method to more
training points per parameter axis. Here we encounter two shortcomings
with the original approach:
 The choice of polynomials as basis functions of increasing order leads
to unsatisfactory convergence properties. Mappings of sharply peaked
functions can force a high degree interpolation polynomial to strong
oscillations, spreading across the entire manifold.
 The computational effort per mapping manifold dimension grows
as
O

Q
m


n


 for the number of reference points
n
 along each axis
. Even with a moderate number of sampling points along each pa-
rameter axis, the inclusion of all nodes in Eq. 4.1 may still require
too much computational effort if the dimensionality of the mapping
manifold
m is high (“curse of dimensionality”).
J. Walter “Rapid Learning in Robotics”
75

76
Extensions to the Standard PSOM Algorithm
Both aspects motivate two extensions to the standard PSOM approach: the
“Local-PSOMs” and the “Chebyshev-spaced PSOM”, which are the focus
of the Sec. 6.3 and 6.4.
6.1
The “Multi-Start Technique”
The multi-start technique was developed to overcome the multiple minima
limitations of the simpler best-match start procedure adopted so far (see
Sec. 4.3).
M
X_1 -> X_2
W_a
M
X_1 -> X_2
W_a
a) 
b) 
W1 
W2 
W3 
W4 
W1 
W2 
W3 
W(s) 
x1 
x2 
x1 
x2 
Figure 6.1: The problem of local and multiple minima can be solved by the
multi-start technique. The solid curve shows the embedded one-dimensional
(m

) PSOM manifold, spanned by the four asterisks marked reference vectors
fw


w


w


w

g in
I
R
. The dashed line connects a set of diamont-marked PSOM
mappings
x


x
.
(a) A pathological situation for the standard approach: depending on the starting
location
s
t, the best-match search can be trapped in a local minimum.
(b) The multi-start technique solves the task correctly and can be employed to
ﬁnd multiple solutions.
To understand the rationale behind this technique let us consider the
four-node PSOM with the
S-shaped manifold introduced before in Fig. 5.10.
On the left Fig. 6.1a the diamonds on the dotted line show a set of PSOM
mappings
x


x
 (P=diag(1,0)). Starting at the small
x
 values, the best-
match procedure ﬁnds the ﬁrst node
w
 as start point. When (after the 7th
trial) the third reference vector
w
 gets closer than
w
, the gradient descent
iteration starts at
w
 and becomes “trapped” in a local minimum, giving
rise to a totally misleading value for
x
. On the other trials this problem

6.2 Optimization Constraints by Modulating the Cost Function
77
reoccurs except for the middle region and the right side, close to the last
reference point.
First, we want to note that the problem can be detected here by mon-
itoring the residual distance
dist (respectively the cost function
E
s)
which is here the horizontal distance of the found completion (close to
w
)
and the input
x.
Second, this problem can be solved by re-starting the search: suitable
restart points are the distance-ranked list of node locations
a found in the
ﬁrst place (e.g. the 10th points probes the start locations at node 3,2,1,4).
The procedure stops, if a satisfying solution (low residual cost function)
or a maximum number of trials is reached. Fig. 6.1b demonstrates this
multi-start procedure and depicts the correctly found solutions.
In case the task is known to involve a consecutive sequence of query
points, it is perfectly reasonable to place the previous best-match location
s
 at the head position of the list of start locations.
Furthermore, the multi-start technique is also applicable to ﬁnd mul-
tiple best-match solutions. However, extra effort is required to ﬁnd the
complete list of compatible solutions. E.g. in the middle region of the de-
picted example Fig. 6.1, at least two of the three solutions will be found.
6.2
Optimization Constraints by Modulating the
Cost Function
The best-match minimization procedure Eq. 4.4 can be employed to con-
trol the optimization mechanism in various directions.
The multi-start
technique introduced before approaches suitable solutions from different
starting locations
s

, but using a constant cost function Eq. 4.10
E
s



dist
x
w
s



d
X
k

p
k
x
k

w
k
s


An interesting possibility is to modulate this cost function during the
best-match iteration process. This means that the weight factors
p
k, which
deﬁne the distance metric, are varied in order to inﬂuence the iteration
path in a desired way. This approach can be considered, e.g. to avoid local
minima with already known locations.

78
Extensions to the Standard PSOM Algorithm
Furthermore, this option can be used to resolve redundancies. Such
an example is presented later in the context of the 6 D robot kinematics in
Sec. 8.4.
There the situation arises that the target is under-speciﬁed in such a
way that a continuous solution space exists which satisﬁes the goal speciﬁ-
cation. In this case, the PSOM will ﬁnd a solution depending on the initial
starting condition
s

 (usually depending on the node with the closest ref-
erence vector
a
) which might appear somehow arbitrary.
In many situations, it is of particular interest to intentionally utilize
these kinds of redundancies, in order to serve auxiliary goals. These are
goals of second priority, which might contradict a primary goal. Here the
PSOM offers an elegant and intrinsic solutions mechanism.
Auxiliary goals can be formulated in additional cost function terms
and can be activated whenever desired. The cost function terms can be
freely constructed with various functional forms and are supplied during
the learning phase of the PSOM. Remember, that the PSOM input sub-
space selection mechanism (p
k) facilitates easy augmentation of the em-
bedding space
X with extraneous components, which do not impair the
normal operation.
For example, for positioning a robot manipulator at a particular posi-
tion in the 3 D workspace, the 6 degress-of-freedom (DOF) of the manipu-
lator are under-constrained. There are inﬁnite many solutions – but, how
to encode some sort of “reasonableness” within the current situation? In
Sec. 8.4, different secondary goals are discussed: e.g. ﬁnding the shortest
path, or ﬁnding an arm conﬁguration being advantageous for further ac-
tions. They can be elegantly implemented using the same PSOM.
6.3
The Local-PSOM
In section 3.2 the distinction between local and global models was intro-
duced. As it turns out, the PSOM approach can be viewed as an interme-
diate position. It is a global model, but in the vicinity of reference points
it behaves locally. Still, to overcome the difﬁculties inherited from high-
degree polynomial basis functions, we can look for additional control over
the locality of the PSOM.
The concept of Local-PSOMs precisely addresses this issue and allows

6.3 The Local-PSOM
79
to combine the favorable properties of low-degree polynomial PSOMs with
the possibility of exploiting the information if many grid points are given.
The basic idea is to restrict the number of nodes included in the compu-
tation. We suggest to dynamically construct the PSOM only on a sub-grid of
the full training data set. This sub-grid is (in the simplest case) always
centered at the reference vector
w
a
 that is closest to the current input
x (primary start node location). The use of the sub-grid leads to lower-
degree polynomials for the basis functions and involves a considerably
smaller number of points in the sum in Eq. 4.1. Thus, the resulting Local-
PSOMs (“L-PSOMs”) provide an attractive scheme that overcomes both of
the shortcomings pointed out in the introduction of this chapter.
 
 
 
x1 
x2 
x3 
x1 
x2 
x3 
s1 
s2 
x3 
x2 
x2 
input vector 
best matching knot 
a) 
b) 
c) 
d) 
Figure 6.2: a–d: The Local-PSOM procedure. The example task of Fig. 4.1, but
this time using a


 local PSOM of a


 training set. (a–b) The input vector
x


x

 selects the closest node
a
 (in the now speciﬁed input space). The asso-
ciated


 node sub-grid is indicated in (c). The minimization procedure starts
at its center
s

a
 and uses only the PSOM constructed from the


 sub-grid.
(d) displays the mapping result
w
s

 in
X, together with the selected sub-grid
of nodes in orthonormal projection. The light dots indicate the full set of training
nodes. (For the displayed mapping task, a


 PSOM would be appropriate; the


 grid is for illustrative purpose only.)
Fig. 6.2a–d explains the procedure in the the context of the previous
simple cube scenario introduced in Sec. 4.1. One single input vector is
given in the
x


x

 plane (left cube side), shown also as a projection on
the left Fig. 6.2a. The reference vector
w
a that is closest to the current
input
x will serve as the center of the sub-grid. The indicated


 node
grid is now used as the basis for the completion by the Local-PSOM.
Continuity is a general problem for local methods and will be dis-
cussed after presenting an example in the next section.

80
Extensions to the Standard PSOM Algorithm
6.3.1
Approximation Example: The Gaussian Bell
As a ﬁrst example to illustrate the Local-PSOMs we consider the Gaussian
bell function
x


exp


x



x


	



(6.1)
with
	

 chosen to obtain a “sharply” curved function in the square
region


. Fig. 6.3 shows the situation for a


 training data set,
Fig. 6.3b, equidistantly sampled on the test function surface plotted in
Fig. 6.3a.
a) 
target 
b) 
train set 
c) 
n=5 
d) 
n’=2 
f) 
n’=4 
e) 
n’=3 
 
Figure 6.3: The Local-PSOM approach with various sub-grid sizes. Completing
the


 sample set
b Gaussian bell function
a with the local PSOM approach
using sub-grid sizes
n

n
, with
n



 and
; see text.
Fig. 6.3c shows how the full set PSOM completes the embedding man-
ifold
M. The marginal oscillations in between the reference vectors
w
a are
a product of the polynomial nature of the basis functions. Fig. 6.3d-e is the
image of the 22, 33, and the 44 local PSOM.
6.3.2
Continuity Aspects: Odd Sub-Grid Sizes
n
 Give Op-
tions
The choice of the sub-grid needs some more consideration. For example,
in the case
n


 the best-match
s
 should be inside the interval swanned

6.3 The Local-PSOM
81
by the two selected nodes. This requires to shift the selected node window,
if
s
 is outside the interval. This happens e.g. when starting at the best-
match node
a
, the “wrong” next neighboring node is considered ﬁrst (left
instead of right).
Fig. 6.3d illustrates that the resulting mapping is continuous – also along
edge connecting reference vectors. Because of the factorization of the basis
functions the polynomials are continuous at the edges, but the derivatives
perpendicular to the edges are not, as seen by the sharp edges. An analo-
gous scheme is also applicable for all higher even numbers of nodes
n
.
What happens for odd sub-grid sizes? Here, a central node exists and
can be ﬁxated at the search starting location
a
. The price is that an input,
continuously moving from one reference vector to the next will experience
halfway that the selected sub-grid set changes. In general this results in a
discontinuous associative completion, which can be seen in Fig. 6.3e which
coincides with Fig. 6.4a).
a) 
b) 
c) 
Figure 6.4: Three variants to select a


 sub-grid (in the previous Problem
Fig. 6.4) lead to different approximations: (a) the standard ﬁxed sub-grid selection
and (b)(c) the continuous but asymmetric mappings, see text.
However, the selection procedure can be modiﬁed to make the map-
ping continuous: the essence is to move the locations where the sub-grid
selection changes to the node edge line (in
S). Fig. 6.4bc shows the two
alternatives: odd node numbers have two symmetric center intervals, of
which one is selected to capture the best-match
s
.
Despite the symmetric problem stated, case Fig. 6.4b and Fig. 6.4c give
asymmetric (here mirrored) mapping results. This can be understood if
looking at the different


 selections of training points in Fig. 6.3b. The
round shoulder (Fig. 6.4b) is generated by the peak-shaped data sub-set,
which is symmetric to the center. On the other hand, the “steep slope part”
bears no information on the continuation at the other side of the peak.

82
Extensions to the Standard PSOM Algorithm
Here again, the similarities to Kohonen's SOM algorithm become clearly
visible: the closeness of the input
x to the reference vectors
w
a is the im-
portant, determining factor. Here, this mechanism also tessellates the in-
put space into Voronoi cells of continuous, here parameterized, curved
maps. Similarly, the previously described smoothing schemes for discrete
cells could be applied to smooth the remaining discontinuities as well.
6.3.3
Comparison to Splines
The concept of Local-PSOM has similarities with the spline technique (Stoer
and Bulirsch 1980; Friedman 1991; Hämmerlin and Hoffmann 1991). Both
share the internal piecewise construction of a polynomial on a set of neigh-
boring nodes.
For the sub-grid size
n


 the local PSOM becomes actually iden-
tical to the multidimensional extension of the linear splines, see Fig. 6.3d.
Each patch resembles the
m-dimensional “soap-ﬁlm” illustrated in Fig. 5.3
and 5.4.
An alternative was suggested by Farmer and Sidorowich (1988). The
idea is to perform a linear simplex interpolation in the
jI
j–dimensional
input space
X
in by using the
jI
j+1 (with respect to the input vector
x)
closest support points found, which span the simplex containing
Px. This
lifts the need of topological order of the training points, and the related
restriction on the number of usable points.
For
n


 and
n


 the local PSOM concept resembles the quadratic
and the cubical spline, respectively. In contrast to the spline concept that
uses piecewise assembled polynomials, we employ one single, dynami-
cally constructed interpolation polynomial with the beneﬁt of usability for
multiple dimensions
m.
For
m

 and low
d the spline concept compares favorably to the poly-
nomial interpolation ansatz, since the above discussed problem of asym-
metric mapping does not occur: at each point 3 (or 4, respectively) polyno-
mials will contribute, compared with one single interpolation polynomial
in a selected node sub-grid, as described.
For
m

 the bi-cubic, so-called tensor-product spline is usually com-
puted by row-wise spline interpolation and a column spline over the row
interpolation results (Hämmerlin and Hoffmann 1991). The procedure is
computationally very expensive and has to be independently repeated for

6.4 Chebyshev Spaced PSOMs
83
each component
d.
For
m

 the tensor splines are simple to extend in theory, but in prac-
tice they are not very useful (Friedman 1991). Here, the PSOM approach
can be easily extended as shown for the case
m

 later in Sec. 8.2.
6.4
Chebyshev Spaced PSOMs
An alternative way to deal with the shortcomings addressed in the intro-
duction of this chapter, is the use of an improved scheme for constructing
the internal basis functions
H
a
s
. As described (in Sec. 4.5), they are con-
structed by products of Lagrange interpolation polynomials on a rectan-
gular grid of nodes in the parameter manifold. So far, a regular equidistant
division of an interval (e.g. [0,1] in Fig. 4.3) was suggested for placing the
nodes on each parameter manifold axis.
As is well-known from approximation theory, an equidistant grid point
spacing is usually not the optimal choice for minimizing the approxima-
tion error (Davis 1975; Press et al. 1988). For polynomial approximation
on an interval [-1,1], one should choose the support points
a
j along each
axis of
A at locations given by the zeros
a
j of the Chebyshev polynomial
T
n
a
T
n
a
 cos
n arccos
a


(6.2)
The (ﬁxed location of the)
n zeros of
T
n are given by
a
j
 cos

j



n



(6.3)
The Chebyshev polynomials are characterized by having all minima
and maxima of the same amplitude, which ﬁnally leads to a smaller bound
of the error polynomial describing the residual deviation. Fig. 6.5a dis-
plays for example the Chebyshev polynomial
T
. A characteristic feature
is the increasing density of zeros towards both ends of the interval.
It turns out that this choice of support points can be adopted for the
PSOM approach without any increase in computational costs. As we will
demonstrate shortly, the resulting Chebyshev spaced PSOM (“C-PSOM”)
tends to achieve considerably higher approximation accuracy as compared
to equidistant spaced PSOMs for the same number of node points. As a re-
sult, the use of Chebyshev PSOMs allows a desired accuracy to be achieved

84
Extensions to the Standard PSOM Algorithm
s1 
s2 
-1
-0.5
0.5
1
-1
-0.5
0.5
1
-1
-0.5
0.5
1
-1
-0.5
0.5
1
Figure 6.5: (left:) The Chebyshev polynomial
T
 (Eq. 6.2). Note the increased
density of zeros towards the approximation interval bounds .
(center:)
T
 below a half circle, which is cut into ﬁve equal pieces. The base pro-
jection of each arc mid point falls at a zero of
T
 (Eq. 6.3.)
(right:) Placement of 510 nodes
A

S, placed according to the zeros
a
j of the
Chebyshev polynomial
T
 and
T
.
with a smaller number of nodes, leading to the use of lower-degree poly-
nomials together with a reduced computational effort.
In Sec. 6.5.1 and Sec. 8.1 the Chebyshev spacing is used for pre-specifying
the location of the nodes
a

A as compared to an equidistant, rectangular
node-spacing in the
m-dimensional parameter space (e.g. Fig. 4.10).
A further improvement is studied in Sect. 8.2. Additionally to the im-
provement of the internal polynomial manifold construction, the Cheby-
shev spacing is also successfully employed for sampling of the training
vectors in the embedding space
X. Then, the
n
 (constant) zeros of
T
n
 in
[-1,1] are scaled to the desired working interval and accordingly the sam-
ples are drawn.
6.5
Comparison Examples: The Gaussian Bell
In this section the Gaussian bell curve serves again as test function. Here
we want to compare the mapping characteristics between the PSOM ver-
sus the Local-Linear-Map (LLM) approach, introduced in chapter 3.

6.5 Comparison Examples: The Gaussian Bell
85
0.0001
0.001
0.01
0.1
1
12
10
8
6
5
4
3
Deviation (nrms)
Number of Training Knots per Axes
2x2
3x3
4x4
Chebyshev spacing, full set
equidistant spacing, full set
Chebyshev spacing, full set
0
0.05
0.1
0.15
0.2
0.25
0.3
12
10
8
6
5
4
3
Deviation (nrms)
Number of Knots ^2
equidistant spacing
Chebyshev spacing
Figure 6.6: a–b; Mapping accuracy of the Gaussian bell function for the pre-
sented PSOM variants – in a linear (left) and a logarithmic plot (right) – versus
n
the number of training points per axes.
6.5.1
Various PSOM Architectures
To compare the local and Chebyshev spaced PSOMs we return to the Gaus-
sian bell function of Eq. 6.1 with
	

 chosen to obtain a “medium
sharp” curved function. Using the same
n

n (in
x


x
) equidistantly sam-
pled training points we compute the root mean square deviation (RMS)
between the goal mapping and the mapping of (i) a PSOM with equidis-
tantly spaced nodes, (ii) local PSOMs with sub-grid sizes
n


, 3, 4 (sub-
grids use equidistant node spacing here as well), and (iii) PSOMs with
Chebyshev spaced nodes.
Fig. 6.6 compares the numerical results (obtained with a randomly cho-
sen test set of 500 points) versus
n. All curves show an increasing mapping
accuracy with increasing number of training points. However, for
n


the Chebyshev spaced PSOM (iii) shows a signiﬁcant improvement over
the equidistant PSOM. For
n

, the PSOM and the C-PSOM coincide,
since the two node spacings are effectively the same (the Chebyshev poly-
nomials are always symmetric to zero and here equidistant as well.)
In Fig. 6.6 the graphs show at
n

 the largest differences. Fig. 6.7
displays four surface grid plots in order to distinct the mapping perfor-
mances. It illustrates the


 training node set, a standard PSOM, a C-
PSOM, and a (2-of-5)
 L-PSOM.

86
Extensions to the Standard PSOM Algorithm
-1
-0.5
0
0.5
1
-1
-0.5
0
0.5
1
1
Training 
data 5x5 
L-PSOM 2x2 
PSOM 5x5 
C-PSOM 5x5 
Figure 6.7: a–d; PSOM manifolds with a 55 training set. (a)


 training points
are equidistantly sampled for all PSOMs; (b) shows the resulting mapping of the
local PSOM with sub-grid size


. (c) There are little overshoots in the marginal
mapping areas of the equidistant spaced PSOM (i) compared to (d) the mapping
of the Chebyshev-spaced PSOM (ii) which is for
n

 already visually identical
to the goal map.

6.5 Comparison Examples: The Gaussian Bell
87
6.5.2
LLM Based Networks
The following illustrations compare the approximation performance of
discrete Local Linear Maps (LLMs) for the same bell-shaped test function
(note the different scaling).
 
Training 
data: 
3 units 
15 units 
65 units 
Figure 6.8: Gaussian Bell approximated by LLM units (from Fritzke 1995). A fac-
tor of 100 more training points were used - compared to the PSOM in the previous
Fig. 6.7.
Fig. 6.8 shows the approximation result if using 3, 15, and 65 units.
Since each unit is equipped with a parameterized local linear mapping
(hyper-plane), comprising 2+3 (input+output) adaptable variables, the ap-
proximations effectively involves 15, 75, and 325 parameters respectively.
For comparison, each PSOM node displayed in Fig. 6.7 uses only 2+1 non-
constant parameters times 25 nodes (total 75), which makes it comparable
to the LLM network with “15 units”.
The pictures (Fig. 6.8) were generated by and reprinted with permis-
sion from Fritzke (1995). The units were allocated and distributed in the
input space using a additive “Growing Neural Gas” algorithm (see also
Sec. 3.6). Advantageously, this algorithm does not impose any constraints
on the topology of the training data.
Since this algorithm does not need any topological information, it can-

88
Extensions to the Standard PSOM Algorithm
not use any topological information. The differences are signiﬁcant:
 the required training data set for the LLM network is much larger,
here 2500 points versus 25 data for the PSOM network (factor 100);
the PSOM can employ the self-organizing adaption rule Eq. 3.10 on
a much smaller data set (25), or it can be instantly constructed if the
sampling structure is known apriori (rapid-learning);
 the obtained degree of continuity and accuracy compares very favor-
ably (Fig. 6.8 and Fig. 6.7). The PSOM approach does not need any
extra heuristics to overcome the discrete nature of the local expert
structure, which is visible in the discontinuities at the cell borders in
Fig. 6.8.
6.6
RLC-Circuit Example
In this section a four-dimensional mapping example is presented. The pur-
pose of this exercise is to see (i) to what extent the various
m

 dimen-
sional PSOM networks approximate the underlying functions;
(ii) how
this compares to the work of Friedman (1991) investigating the same pa-
rameter regime; (iii) to yield insight into the variable relationships.
U 
I 
L 
C 
R 
Figure 6.9: Schematic diagram
of the alternating current series
RLC - circuit.
Fig. 6.9 displays a schematic diagram of a simple series circuit involv-
ing a resistor
R, inductor
L and capacitor
C. The circuit is driven by the
sinusoidal generator placing an alternating voltage
U
U

U

sin

f
t
The resulting current
I that ﬂows through the circuit is also a sinusoidal
with the same frequency,
I

U

Z
sin
f
t



6.6 RLC-Circuit Example
89
Its amplitude is governed by the impedance
Z of the circuit and there is a
phase shift
. Both depend on the frequency
f and the components in the
circuit:
Z

Z
R
L
C

f


v
u
u
t
R




f
L



f
C



(6.4)


R
L
C

f


atan

f
L



f
C
R

(6.5)
Following Friedman (1991), we varied the variables in the range:

	
R
	



	
L
	
 [H]

	
C
	

F


	
f
	
[ Hz]

which results in a impedance range
Z


 and the phase lag

between
	
.
The PSOM training sets are generated by active sampling (here com-
puting) the impedance
Z and
 for combination of one out of
n resistors
values
R, one (of
n) capacitor values
C, one (of
n) inductor values
L, at
n different frequencies
f. As the embedding space we used the
d


dimensional space
X spanned by the variables
x

R
L
C

f

Z

.
Type
n
Z-RMS
-RMS
Z-NRMS
-NRMS
C-PSOM
3
243
31

0.51
0.43
C-PSOM
4
130
25

0.24
0.34
L-PSOM
3 of 5
61
25

0.11
0.34
L-PSOM
3 of 7
25
19

0.046
0.25
Table 6.1: Results of various PSOM architectures for the
m

 dimensional
prediction task for the RLC circuit impedance.
Table Tab. 6.1 shows the root mean square (RMS and NRMS) results
of several PSOM experiments when using Chebyshev spaced sampling
and nodes placement. Within the same parameter regime Friedman (1991)
reported results achieved with the MARS algorithm. He performs a hyper-
rectangular partitioning of the task variable space and the ﬁt of uni- and

90
Extensions to the Standard PSOM Algorithm
R:0, L:0
50
100
150
200
250
5
10
-1000
0
1000
2000
3000
4000
5000
6000
7000
f[Hz]
C[uF]
Z
R:0, C:0
50
100
150
200
250
0
0.5
1
0
1000
2000
3000
4000
5000
6000
7000
8000
f[Hz]
L[H]
Z
f:1, L:1
0
50
100
5
10
1200
1300
1400
1500
1600
1700
1800
R
C[uF]
Z
L:0.5, C:0.5
0
50
100
50
100
150
200
250
0
500
1000
1500
L[H}
C[uF]
Z
 
 
(b) 
(a) 
(c) 
(d) 
Figure 6.10: Isometric surface plots of 2 D cuts of the RLC-circuit mapping task
of one single PSOM (contour lines projected on the base). All visualize the same
4 D continuous PSOM mapping manifold, here in the
d

 embedding space
X.

6.7 Summary
91
bi-variate splines within these regions. His best results for 400 data points
were reported as a NRMS of 0.069 for the impedance value
Z.
In contrast the PSOM approach constructs (here) a 4-dimensional pa-
rameterized manifold throughout. Fig. 6.10 visualizes this underlying map-
ping manifold in 3 D isometric views of various 2 D slices.
Shown are
Z



F
f

L,
Z
	
H


F
L
C
,
Z

H


H
z
R
C
, and
Z



H
f

C
.
All
views are obtained from the same PSOM, here a
n

,
n


 L-PSOM, in
the following also denoted (3-of-5)
 L-PSOM.
The mapping accuracy depends crucially on the faithfulness of the
parametric model – and the ﬁt to the given mapping task. Fig. 6.11 de-
picts one situation in different views: Drawn are the change in impedance
and phase lag with
L and
C, given
R and
f, and three PSOM networks
(here left:
Z



H
z
L
C
, right:




H
z
L
C
. Note, the reference
vectors do not lie within the visualized surfaces, instead they lay “below”
and “above” in the 4-dimensional mapping manifold, embedded in the
6 D space
X).
The ﬁrst row depicts the target mapping situation at the RLC-circuit,
the others present a 3
 PSOM, (3-of-5)
 L-PSOM, and 5
 PSOM (3
 is the
short form notation of 3333 nodes etc.). The impedance
Z plot is
marked by a curved valley, which is insufﬁciently picked up by the

 case,
but well approximated by the latter two PSOM types. The phase diagram
in the right column shows a plateau with a steep slope at the left and front
side. Again, the

 type approximates a too smooth curve, because the
network does not represent more detailed information. The PSOM with
ﬁve nodes per axis exhibits at the right side little “overshots”. Here, the
contrast to the Local-PSOM is again apparent: the L-PSOM represents the
ﬂat plateau without long-range interferences of the “step”.
6.7
Summary
We proposed the multi-start algorithm to face the problem of obtaining
several solutions to the given mapping task. The concept of cost function
modulation was introduced. It allows to dynamically add optimization
goals which are of lower priority and possibly conﬂict with the primary
goal.
Furthermore, we presented two extensions to the PSOM algorithm which

92
Extensions to the Standard PSOM Algorithm
R:0.6, f:0.6
0
0.5
1
5
10
0
100
200
300
400
500
600
700
800
900
1000
1100
L[H]
C[uF]
Z
R:0.6, f:0.6 (3 3 3 3 -chebyshev)
0
0.5
1
5
10
-100
-50
0
50
100
L[H]
C[uF]
phase
R:0.6, f:0.6
0
0.5
1
5
10
-500
0
500
1000
1500
L[H]
C[uF]
Z
R:0.6, f:0.6 (3 3 3 3 -chebyshev)
0
0.5
1
5
10
-150
-100
-50
0
50
100
150
L[H]
C[uF]
phase
R:0.6, f:0.6
0
0.5
1
5
10
0
100
200
300
400
500
600
700
800
900
1000
1100
L[H]
C[uF]
Z
R:0.6, f:0.6 (5 5 5 5 -chebyshev)
0
0.5
1
5
10
-100
-50
0
50
100
L[H]
C[uF]
phase
R:0.6, f:0.6
0
0.5
1
5
10
0
100
200
300
400
500
600
700
800
900
1000
1100
L[H]
C[uF]
Z
R:0.6, f:0.6 (5 5 5 5 -chebyshev)
0
0.5
1
5
10
-100
-50
0
50
100
150
L[H]
C[uF]
phase
 
 
34 PSOM 
54 PSOM 
(3-of-5)4 L-PSOM 
Target mapping 
Figure 6.11: Comparison of three PSOM networks and the target mapping for
one particularly interesting 2 D cut at a given
R and
f, drawn as (left column)
Z
L
C
 and (right column)
L
C
 surface grids with contour plot projections
on the base. See text.

6.7 Summary
93
aim at improving the mapping accuracy and the computational efﬁciency
with larger training sets.
The proposed “Local-PSOM” algorithm constructs the constant sized
PSOM on a dynamically determined sub-grid and keeps the computa-
tional effort constant when the number of training points increases. Our
results suggest an excellent cost–beneﬁt relation in cases with more than
four nodes per axes.
An alternative to improve the mapping accuracy is the use of the “Cheby-
shev spaced PSOM” exploiting the superior approximation capabilities of
the Chebyshev polynomials for the design of the internal basis functions.
This imposes no extra effort but offers a signiﬁcant precision advantage
when using four or more nodes per axes.

94
Extensions to the Standard PSOM Algorithm

Chapter 7
Application Examples in the
Vision Domain
The PSOM algorithm has been explained in the previous chapters. In this
chapter a number of examples are presented which expose its applicability
in the vision domain. Vision is a sensory information source and plays an
increasingly important role as perception mechanism for robotics.
The parameterized associative map and its particular completion mech-
anism serves here for a number of interesting application possibilities. The
ﬁrst example is concerned with the completion of an image feature set
found here in a 2 D image, invariant to translation and rotation of the im-
age. This idea can be generalized to a set of “virtual sensors”. A redundant
set of sensory information can be fused in order to improve recognition
conﬁdence and measurement precision. Here the PSOM offers a natural
way of performing the fusion process in a ﬂexible manner. As shown, this
can be useful for further tasks, e.g. for inter-sensor cooperation, and iden-
tifying the the object's 3 D spatial rotations and position. Furthermore, we
present also a more low-level vision application. By employing special-
ized feature ﬁlters, the PSOM can serve for identiﬁcation of landmarks in
gray-scale images, here shown for ﬁngertips.
7.1
2 D Image Completion
First we want to consider here a planar example. The task is to complete
a partial set of image feature locations, where the image can be translated
J. Walter “Rapid Learning in Robotics”
95

96
Application Examples in the Vision Domain
and rotated freely. The goal is to determine the proper shift and twist angle
parameters when at least two image points are seen. Furthermore we de-
sire to predict the locations of the hidden – maybe occluded or concealed –
features. For example, this can be helpful to activate and direct specialized
(possibly expensive) perception schema upon the predicted region.
α 
β 
γ 
δ 
ε 
ζ 
η 
Figure 7.1: The star constellation the “Big Dipper” with its seven prominent stars
	







, and
. (Left): The training example consists of the image position
of a seven stars
	









 in a particular viewing situation. (Right): Three
examples of completed constellations after seeing only two stars in translated
and rotated position. The PSOM output are the image location of the missing
stars and desired set of viewing parameters (shift and rotation angle.)
Fig. 7.1 depicts the example. It shows the positions of the seven promi-
nent stars in the constellation Ursa Major to form the asterisk called the
“Big Dipper”. The positions (x
y) in the image of these seven stars (









)
are taken from e.g. a large photograph. Together with the center-of-gravity
position
x
c

y
c and the rotation angle
 of the major axis (-) they span the
embedding space
X with the variables
x

fx
c

y
c


x


y


x


y






x


y

g.
As soon as two stars are visible, the PSOM network can predict the
location of the missing stars and outputs the current viewing parameters –
here shift and rotation (x
c

y
c

). Additionally other correlated parameters
of interest can be trained, e.g. azimuth, elevation angle, or time values.
While two points are principally enough to fully recover the solution
in this problem any realistic reconstruction task inevitably is faced with
noise. Here the fusion of more image features is therefore an important
problem, which can be elegantly solved by the associative completion
mechanism of the PSOM.

7.2 Sensor Fusion and 3 D Object Pose Identiﬁcation
97
7.2
Sensor Fusion and 3 D Object Pose Identiﬁ-
cation
Sensor fusion overcomes the limitation of individual sensor values for a
particular task. When one kind of sensor cannot provide all the neces-
sary information, a complementary observation from another sensory sub-
system may ﬁll the gap. Multiple sensors can be combined to improve
measurement accuracy or conﬁdence in recognition (see e.g. Baader 1995;
Murphy 1995). The concept of a sensor system can be generalized to a “vir-
tual sensor” – an abstract sensor module responsible for extracting certain
feature informations from one or several real sensors.
In this section we suggest the application of a PSOM to naturally solve
the sensor fusion problem. For the demonstration the previous planar
(2D) problem shall be extended.
Assume a 3 D object has a set of salient features which are observed
by one or several sensory systems. Each relevant feature is detected by a
“virtual sensor”. Depending on the object pose, relative to the observing
system, the sensory values change, and only a certain sub-set of features
may be successfully detected.
When employing a PSOM, its associative completion capabilities can
solve a number of tasks:
 knowing the object pose, predict the sensor response;
 knowing a sub-set of sensor values, reconstruct the object pose, and
 complete further information of interest (e.g. in the context of a ma-
nipulation task pose related grasp preshape and approach path in-
formations);
 generate hypotheses for further perception “schemata”, i.e. predict
not-yet-concluded sensor values for “guidance” of further virtual
sensors.
7.2.1
Reconstruct the Object Orientation and Depth
Here we want to extent the previous planar object reconstruction exam-
ple to the three-dimensional world, which gives in total to 6 degrees of

98
Application Examples in the Vision Domain
freedom (3+3 DOF translation + rotation). We split the problem in two
sub-tasks: (i) in locating and tracking1 the object center (which is a 2 DOF
problem), and (ii) ﬁnding the orientation together with the depth of the
object seen. This factorization is advantageous in order to reduce the num-
ber of training examples needed.
φ 
θ 
ψ 
-0.5
0
0.5
-0.5
0
0.5
u_x
u_y
-0.5
0
0.5
-0.5
0
0.5
u_x
u_y
-0.5
0
0.5
-0.5
0
0.5
u_x
u_y
-0.5
0
0.5
-0.5
0
0.5
u_x
u_y
a) 
b) 
c) 
d) 
 z          
Figure 7.2: The





z system. (a) The cubical test object seen by the camera
when rotated and shifted in several depths
z (=10
,
=20
,
=30
,
z=2. . . 6L, cube
size
L.) (b–d) 0
, 20
, and 30
rotations in the roll
, pitch
, and yaw
 system.
(The transformations are applied from right to left





z.)
Here we demonstrate a solution of the second, the part involving four
independent variables (DOFs). Eight virtual sensors detect the corners of
a test cube, seen in a perspective camera view of this object. Fig. 7.2 il-
lustrates the parameterization of the object pose in the depths
z and the
three unit rotations in the roll
, pitch
, and yaw
 angle system (see
e.g. Fu et al. 1987). The embedding space
X is spanned by the variables
x






z


u
P



u
P







u
P




 where

u
P
i is the signal of sensor
i,
here the image coordinate pair of point
P
i.
Tab. 7.1 presents the achieved accuracy for recovering the object pose
for a variety of experimental set-up parameters. Various ranges and train-
ing vector numbers demonstrate how the precision to which identiﬁcation
is achieved depends on the range of the involved free variables and the
number of data vectors which are invested for training.
With the same trained PSOM, the system can predict locations of oc-
cluded object parts when a sufﬁcient number of points has already been
found. These hypotheses could be fed back to the perceptual processing
stages, e.g. to “look closer” on the predicted sub-regions of the image
1Walter and Ritter (1996e) describes the experiment of Cartesian tracking of a 3 D free
movable sphere. The ball is presented by a human and real-time tracked in 3 D by the
Puma robot using the end-effector based vision system (camera-in-hand conﬁguration).

7.2 Sensor Fusion and 3 D Object Pose Identiﬁcation
99
Figure 7.3: Six Reconstruction Examples. Dotted lines indicate the test cube as
seen by a camera. Asterisks mark the positions of the four corner points used as
inputs for reconstruction of the object pose by a PSOM. The full lines indicate the
reconstructed and completed object.
(inter-sensor coordination). The lower part of the table shows the results
when only four points are found and the missing locations are predicted.
Only the appropriate
p
k in the projection matrix
P (Eq. 4.7) are set to one,
in order to ﬁnd the best-matching solution in the attractor manifold. For
several example situations, Fig. 7.3 depicts the completed cubical object on
the basis of the found four points (asterisk marked = input to the PSOM),
and for comparative reasons the true target cube with dashed lines (case






PSOM with ranges 150
,2L). In Sec. 9.3.1 we will return to this
problem.
7.2.2
Noise Rejection by Sensor Fusion
The PSOM best-match search mechanism (Eq. 4.4) performs an automatic
minimization in the least-square sense. Therefore, the PSOM offers a very
natural way of fusing redundant sensory information in order to improve the
reconstruction accuracy in case of input noise.
In order to investigate this capability we added Gaussian noise to the
virtual sensor values and determined the resulting average orientation de-

100
Application Examples in the Vision Domain




z
L
hi
h
i
h
i
hz
i
hj	
nji
hj
	
oji
h	
n

	
oi
hj	
u
P

ji
hj	
u
P

ji
PSOM
range
L
L
4 and 8 points are input







150

2
2.6

3.1

2.9

0.11
0.039
0.046
0.0084
given
given







150

2
2.7

3.2

2.8

0.12
0.043
0.048
0.0084
0.010
0.0081
Learn only rotational part
333
150

2.6

3.0

2.5

0.046
0.048
0.0074
0.018
0.012
444
150

0.63

1.2

0.93

0.021
0.019
0.0027
0.013
0.0063
555
150

0.12

0.12

0.094

0.0034
0.0027
0.00042
0.0017
0.00089
Various rotational ranges







90

1
0.64

0.56

0.53

0.034
0.0085
0.0082
0.00082
0.0036
0.0021







120

1
1.5

1.5

1.4

0.037
0.021
0.021
0.0032
0.0079
0.0049







150

1
2.7

3.2

2.8

0.077
0.044
0.048
0.0084
0.013
0.010







180

1
6.5

5.4

7.0

0.19
0.079
0.098
0.014
0.019
0.016
Various training set sizes







150

2
2.7

3.2

2.8

0.12
0.043
0.048
0.0084
0.010
0.0081







150

2
2.6

3.2

2.8

0.11
0.043
0.048
0.0084
0.0097
0.0077







150

2
0.49

0.97

0.73

0.12
0.018
0.016
0.0030
0.0089
0.0059







150

2
0.52

0.98

0.71

0.035
0.017
0.014
0.0026
0.0082
0.0053







150

2
0.14

0.13

0.14

0.024
0.0033
0.0030
0.00043
0.0018
0.0011
Shift depth range
z







150

1..3
3.8

3.4

3.7

0.12
0.061
0.064
0.0083
0.049
0.025







150

2..4
2.6

3.2

2.8

0.11
0.043
0.048
0.0084
0.0097
0.0077







150

3..5
2.6

3.2

2.9

0.15
0.042
0.047
0.0084
0.0050
0.0045
Various distance ranges







150

2
2.6

3.2

2.8

0.11
0.043
0.048
0.0084
0.0097
0.0077







150

4
2.6

3.2

2.8

0.20
0.042
0.047
0.0084
0.0068
0.0059







150

6
2.6

3.2

2.9

0.36
0.043
0.048
0.0084
0.0057
0.0052







150

6
0.65

0.73

0.93

0.39
0.016
0.013
0.00047
0.0070
0.0051







150

6
0.44

0.43

0.60

0.14
0.0097
0.0083
0.00042
0.0043
0.0029
Table 7.1: Mean Euclidean deviation of the reconstructed pitch, roll, yaw angles



, the depth
z, the column vectors

n


o of the rotation matrix
T, the scalar
product of the vectors

n

o (orthogonality check), and the predicted image position
of the object locations
P

P
. The results are obtained for various experimental
parameters in order to give some insight into their impact on the achievable re-
construction accuracy. The PSOM training set size is indicated in the ﬁrst column,
the



 intervals are centered around 0
, and depth
z ranges from
z
min

L,
where
L denotes the cube length (focal length of the lens is also taken as


L.)
In the ﬁrst row all corner locations are inputs. All remaining results are obtained
using only four (non-coplanar) points as inputs.

7.2 Sensor Fusion and 3 D Object Pose Identiﬁcation
101
viation (norm in




) as function of the noise level and the number of
sensors contributing to the desired output.
0
5
10
3
4
5
6
7
8
10
15
20
25
 
<∆(θ,Ψ,Φ)> 
 
Noise [%] 
Number of Inputs 
Figure 7.4: The reconstruction deviation versus the number of fused sensory
inputs and the percentage of Gaussian noise added. By increasing the number of
fused sensory inputs the performance of the reconstruction can be improved. The
signiﬁcance of this feature grows with the given noise level.
Fig. 7.4 exposes the results. Drawn is the mean norm of the orientation
angle deviation for varying added noise level
 from 0 to 10 % of the av-
erage image size, and for 3,4,

 and 8 fused sensory inputs, which were
taken into account. We clearly ﬁnd with higher noise levels there is a grow-
ing beneﬁt from an increasing increased number of contributing sensors.
And as one expects from a sensor fusion process, the overall precision
of the entire system is improved in the presence of noise. Remarkable
is how naturally the PSOM associative completion mechanism allows to
include available sensory information. Different feature sensors can also
be relatively weighted according to their overall accuracy as well as their
estimated conﬁdence in the particular perceptual setting.

102
Application Examples in the Vision Domain
7.3
Low Level Vision Domain: a Finger Tip Lo-
cation Finder
So far, we have been investigating PSOMs for learning tasks in the context
of well pre-processed data representing clearly deﬁned values and quanti-
ties. In the vision domain, those values are results of low level processing
stages where one deals with extremely high-dimensional data. In many
cases, it is doubtful to what extent smoothness assumptions are valid at
all.
Still, there are many situations in which one would like to compute
from an image some low-dimensional parameter vector, such as a set of
parameters describing location, orientation or shape of an object, or prop-
erties of the ambient illumination etc. If the image conditions are suitably
restricted, the input images may be samples that are represented as vec-
tors in a very high dimensional vector space, but that are concentrated on
a much lower dimensional sub-manifold, the dimensionality of which is
given by the independently varying parameters of the image ensemble.
A frequently occurring task of this kind is to identify and mark a par-
ticular part of an object in an image, as we already met in the previous
example for determination of the cube corners. For further example, in
face recognition it is important to identify the locations of salient facial
features, such as eyes or the tip of the nose. Another interesting task is to
identify the location of the limb joints of humans for analysis of body ges-
tures. In the following, we want to report from a third application domain,
the identiﬁcation of ﬁnger tip locations in images of human hands (Walter
and Ritter 1996d). This would constitute a useful preprocessing step for
inferring 3 D-hand postures from images, and could help to enhance the
accuracy and robustness of other, more direct approaches to this task that
are based on LLM-networks (Meyering and Ritter 1992).
For the results reported here, we used a restricted ensemble of hand
postures. The main degree of freedom of a hand is its degree of “closure”.
Therefore, for the initial experiments we worked with an image set com-
prising grips in which all ﬁngers are ﬂexed by about the same amount,
varying from fully ﬂexed to fully extended. In addition, we consider ro-
tation of the hand about its arm axis. These two basic degrees of freedom
yield a two-dimensional image ensemble (i.e., for the dimension
m of the
map manifold we have
m

). The objective is to construct a PSOM that

7.3 Low Level Vision Domain: a Finger Tip Location Finder
103
Figure 7.5: Left,(a): Typical input image. Upper Right,(b): after thresholding and
binarization. Lower Right,(c): position of


 array of Gaussian masks (the dis-
played width is the actual width reduced by a factor of four in order to better
depict the position arrangement)
maps a monocular image from this ensemble to the 2 D-position of the
index ﬁnger tip in the image.
In order to have reproducible conditions, the images were generated
with the aid of an adjustable wooden hand replica in front of a black back-
ground (for the required segmentation to achieve such condition for more
realistic backgrounds, see e.g.
Kummert et al.
1993a; Kummert et al.
1993b). A typical image (

 pixel resolution) is shown in Fig. 7.5a.
From the monochrome pixel image, we generated a 9-dimensional feature
vector ﬁrst by thresholding and binarizing the pixel values (threshold =
20, 8-bit intensity values), and then by computing as image features the
scalar product of the resulting binarized images (shown in Fig. 7.5b) with
a grid of 9 Gaussians at the vertices of a


 lattice centered on the hand
(Fig. 7.5c). The choice of this preprocessing method is partly heuristically
motivated (the binarization makes the feature vector more insensitive to
variations of the illumination), and partly based on good results achieved
with a similar method in the context of the recognition of hand postures

104
Application Examples in the Vision Domain
(Kummert et al. 1993b).
To apply the PSOM-approach to this task requires a set of labeled train-
ing data (i.e., images with known 2 D-index ﬁnger tip coordinates) that
result from sampling the parameter space of the continuous image ensem-
ble on a 2 D-lattice. In the present case, we chose the subset of images
obtained when viewing each of four discrete hand postures (fully closed,
fully opened and two intermediate postures) from one of seven view direc-
tions (corresponding to rotations in

-steps about the arm axis) spanning
the full

-range. This yields the very manageable number of 28 images
in total, for which the location of the index ﬁnger tip was identiﬁed and
marked by a human observer.
Ideally, the dependency of the
x- and
y-coordinates of the ﬁnger tip
should be smooth functions of the resulting 9 image features. For real
images, various sources of noise (surface inhomogeneities, small specular
reﬂections, noise in the imaging system, limited accuracy in the labeling
process) lead to considerable deviations from this expectation and make
the corresponding interpolation task for the network much harder than it
would be if the expectation of smoothness were fulﬁlled. Although the
thresholding and the subsequent binarization help to reduce the inﬂuence
of these effects, compared to computing the feature vector directly from
the raw images, the resulting mapping still turns out to be very noisy. To
give an impression of the degree of noise, Fig. 7.7 shows the dependence
of horizontal (x-) ﬁnger tip location (plotted vertically) on two elements of
the 9 D-feature vector (plotted in the horizontal
xy
plane). The resulting
mesh surface is a projection of the full 2 D-map-manifold that is embedded
in the space
X, which here is of dimensionality 11 (nine dimensional input
features space
X
in, and a two dimensional output space
X
out

x
y
 for
position.) As can be seen, the underlying “surface” does not appear very
smooth and is disrupted by considerable “wrinkles”.
To construct the PSOM, we used a subset 16 images of the image en-
semble by keeping the images seen from the two view directions at the
ends (	
) of the full orientation range, plus the eight pictures belonging
to view directions of

. For subsequent testing, we used the 12 images
from the remaining three view directions of

 and

. I.e., both train-
ing and testing ensembles consisted of image views that were multiples of

 apart, and the directions of the test images are midway between the
directions of the training images.

7.3 Low Level Vision Domain: a Finger Tip Location Finder
105
Figure 7.6: Some examples of hand images with correct (cross-mark) and pre-
dicted (plus-mark) ﬁnger tip positions. Upper left image shows average case, the
remaining three pictures show the three worst cases in the test set. The NRMS
positioning error for the marker point was 0.11 for horizontal, 0.23 for vertical
position coordinate.
Even with the very small training set of only 16 images, the resulting
PSOM achieved a NRMS-error of 0.11 for the
x-coordinate, and of
 for
the
y-coordinate of the ﬁnger tip position (corresponding to absolute RMS-
errors of about 2.0 and 2.4 pixels in the


 image, respectively). To give
a visual impression of this accuracy, Fig. 7.6 shows the correct (cross mark)
and the predicted (plus mark) ﬁnger tip positions for a typical average
case (upper left image), together with the three worst cases in the test set
(remaining images).

106
Application Examples in the Vision Domain
Figure 7.7: Dependence of vertical index ﬁnger position on two of the nine input
features, illustrating the very limited degree of smoothness of the mapping from
feature to position space.
This closes here the list of presented PSOM applications homing purely
in the vision domain. In the next two chapters sensorimotor transforma-
tion will be presented, where vision will again play a role as sensory part.

Chapter 8
Application Examples in the
Robotics Domain
As pointed out before in the introduction, in the robotic domain the avail-
ability of sensorimotor transformations are a crucial issue. In particular,
the kinematic relations are of fundamental character. They usually describe
the relationship between joint, and actuator coordinates, and the position
in one, or several particular Cartesian reference frames.
Furthermore, the effort spent to obtain and adapt these mappings plays
an important role. Several thousand training steps, as required by many
former learning schemes, do impair the practical usage of learning meth-
ods in the domain of robotics. Here the wear-and-tear, but especially the
needed time to acquire the training data must be taken into account.
Here, the PSOM algorithm appears as a very suitable learning approach,
which requires only a small number of training data in order to achieve a
very high accuracy in continuous, smooth, and high-dimensional map-
pings.
8.1
Robot Finger Kinematics
In section 2.2 we described the TUM robot hand, which is built of several
identical ﬁnger modules. To employ this (or a similar dextrous) robot hand
for manipulation tasks requires to solve the forward and inverse kine-
matics problem for the hand ﬁnger. The TUM mechanical design allows
roughly the mobility of the human index ﬁnger. Here, a cardanic base joint
J. Walter “Rapid Learning in Robotics”
107

108
Application Examples in the Robotics Domain
(2 DOF) offers sidewards gyring of

 and full adduction with two addi-
tional coupled joints (one further DOF). Fig. 8.1 illustrates the workspace
with a stroboscopic image.
(a) 
(b) 
(c) 
(d) 
Figure 8.1: a–d: (a) stroboscopic image of one ﬁnger in a sequence of extreme
joint positions.
(b–d) Several perspectives of the workspace envelope

r, tracing out a cubical
101010 grid in the joint space

. The arrow marks the fully adducted posi-
tion, where one edge contracts to a tiny line.
For the kinematics in the case of our ﬁnger, there are several coordi-
nate systems of interest, e.g. the joint angles, the cylinder piston positions,
one or more ﬁnger tip coordinates, as well as further conﬁguration depen-
dent quantities, such as the Jacobian matrices for force / moment trans-
formations. All of these quantities can be simultaneously treated in one
single common PSOM; here we demonstrate only the most difﬁcult part,
the classical inverse kinematics. When moving the three joints on a cubical
101010 grid within their maximal conﬁguration space, the ﬁngertip (or
more precisely the mount point) will trace out the “banana” shaped grid
displayed in Fig. 8.1 (conﬁrm the workspace with your ﬁnger!) Obviously,

8.1 Robot Finger Kinematics
109
the underlying transformation is highly non-linear and exhibits a point-
singularity in the vicinity of the “banana tip”. Since an analytical solution
to the inverse kinematic problem was not derived yet, this problem was
a particular challenging task for the PSOM approach (Walter and Ritter
1995).
We studied several PSOM architectures with nnn nine dimensional
data tuples (



c

r), where

 denotes the joint angles,

c the piston displace-
ment and

r the Cartesian ﬁnger point position, all equidistantly sampled
in

. Fig. 8.2a–b depicts a

 and an

r projection of the smallest training set,
n

.
To visualize the inverse kinematics ability, we require the PSOM to
back-transform a set of workspace points of known arrangement (by spec-
ifying

 as input sub-space). In particular, the workspace ﬁlling “banana”
set of Fig. 8.1 should yield a rectangular grid of

. Fig. 8.2c–e displays the
actual result. The distortions look much more signiﬁcant in the joint angle
space (a), and the piston stoke space (b), than in the corresponding world
coordinate result

r
 (b) after back-transforming the PSOM angle output.
The reason is the peculiar structure; e.g. in areas close to the tip a certain
angle error corresponds to a smaller Cartesian deviation than in other ar-
eas.
When measuring the mean Cartesian deviation we get an already sat-
isfying result of 1.6 mm or 1.0 % of the maximum workspace length of
160 mm. In view of the extremely small training set displayed in Fig. 8.2a–
b this appears to be a quite remarkable result.
Nevertheless, the result can be further improved by supplying more
training points as shown in the asterisk marked curve in Fig. 8.3. The
effective inverse kinematic accuracy is plotted versus the number of train-
ing nodes per axes, using a set of 500 randomly (in

 uniformly) sampled
positions.
For comparison we employed the “plain-vanilla” MLP with one and
two hidden layers (units with tanh() squashing function) and linear units
in the output layer.
The encoding was similar to the PSOM case: the
plain
 angles as inputs augmented by a constant bias of one (Fig. 3.1). We
found that this class of problems appears to be very hard for the standard
MLP network, at least without more sophisticated learning rules than the
standard back-propagation gradient descent. Even for larger training set
sizes, we did not succeed in training them to a performance comparable

110
Application Examples in the Robotics Domain
Xθ 
Xr 
Xc 
X’r 
Xθ 
(a) 
(b) 
(c) 
+ 
(d) 
(e) 
Figure 8.2: a–b and c–e; Training data set of 27 nine-dimensional points in
X for
the 333 PSOM, shown as perspective surface projections of the (a) joint angle

 and (b) the corresponding Cartesian sub space. Following the lines connecting
the training samples allows one to verify that the “banana” really possesses a
cubical topology. (c–e) Inverse kinematic result using the grid test set displayed
in Fig. 8.1. (c) projection of the joint angle space

 (transparent); (d) the stroke
position space

c; (e) the Cartesian space

r
, after back-transformation.

8.1 Robot Finger Kinematics
111
0.01
0.1
1
10
10
8
6
5
4
3
Mean Cartesian Deviation  [mm]
Knot Points per Axes
2x2x2 used
3x3x3 used
4x4x4 used
Chebyshev spaced,  full set
equidistand spaced,  full set
0
0.5
1
1.5
2
2.5
3
3.5
4
4.5
10
8
6
5
4
3
Mean Cartesian Deviation  [mm]
Knot Points per Axes
2x2x2 used
3x3x3 used
4x4x4 used
Chebyshev spaced,  full set
equidistand spaced,  full set
Figure 8.3: a–b: Mean Cartesian inverse kinematics error (in mm) of the pre-
sented PSOM types versus number of training nodes per axes (using a test set
of 500 randomly chosen positions; (a) linear and (b) log plot). Note, the result
of Fig. 8.2c–e corresponds to the smallest training set
n

. The maximum
workspace length is 160 mm.
to the PSOM network. Table 8.1 shows the result of two of the best MLP-
networks compared to the PSOM.
Network

i

f
n


n


n


MLP 3–50–3
0.02
0.004
0.72
0.57
0.54
MLP 3–100–3
0.01
0.002
0.86
0.64
0.51
PSOM
0.062
0.037
0.004
Table 8.1: Normalized root mean square error (NRMS) of the inverse kinematic
mapping task

r


 computed as the resulting Cartesian deviation from the goal
position. For a training set of nnn points, obtained by the two best performing
standard MLP networks (out of 12 different architectures, with various (linear
decreasing) step size parameter schedules



i




f) 100000 steepest gradient
descent steps were performed for the MLP and one pass through the data set for
PSOM network.
Why does the PSOM perform more that an order of magnitude better
than the back-propagation algorithm? Fig. 8.4 shows the 27 training data
pairs in the Cartesian input space

r. One can recognize some zig-zig clus-
ters, but not much more. If neighboring nodes are connected by lines, it
is easy to recognize the coarse “banana” shaped structure which was suc-
cessfully generalized to the desired workspace grid (Fig. 8.2). The PSOM

112
Application Examples in the Robotics Domain
-40
-30
-20
-10
0
10
20
30
40
-40 -30 -20 -10 0
10
20
30
90
100
110
120
130
140
150
160
x
y
z
r 
θ 
Figure 8.4: The 27 training data vectors for the Back-propagation networks: (left)
in the input space

r and (right) the corresponding target output values

.
gets the same data-pairs as training vectors — but additionally, it obtains
the assignment to the node location
a in the 333 node grid illustrated
in Fig. 8.5.
As explained before in Sec. 5, specifying
a

A introduces topological
order between the training vectors
w
a. This allows the PSOM to advanta-
geously draw extra curvature information from the data set — information,
that is not available with other techniques, such as the MLP or the RBF
network approach. The visual comparison of the two viewgraphs demon-
strates the essential value of the added structural information.
8.2
A Higher Dimensional Mapping:
The 6-DOF Inverse Puma Kinematics
To demonstrate the capabilities of the PSOM approach in a higher dimen-
sional mapping domain, we apply the PSOM to construct an approxima-
tion to the kinematics of the Puma 560 robot arm with six degrees of free-
dom. As embedding space
X we ﬁrst use the 15-dimensional space
X
spanned by the variables
x



















r
x

r
y

r
z

a
x

a
y

a
z

n
x

n
y

n
z


8.2 The Inverse 6 D Robot Kinematics Mapping
113
-40
-30
-20
-10
0
10
20
30
40
-40 -30 -20 -10 0
10
20
30
90
100
110
120
130
140
150
160
x
y
z
r 
s1 
s2 
A∈S      
wa 
a 
θ 
Figure 8.5: The same 27 training data vectors (cmp. Fig. 8.4) for the bi-directional
PSOM mapping: (left) in the Cartesian space

r, (middle) the corresponding joint
angle space

.
(Right:) The corresponding node locations
a

A in the param-
eter manifold
S. Neighboring nodes are connected by lines, which reveals now
the “banana” structure on the left.
Here,





 denote the joint angles,

r is the Cartesian position of the end
effector of length
l
z in world coordinates.

a and

n denote the normalized
approach vector and the vector normal to the hand plane. The last nine
components vectors are part of the homogeneous coordinate transforma-
tion matrix
T







n
x
o
x
a
x
r
x
n
y
o
y
a
y
r
y
n
z
o
z
a
z
r
z











(8.1)
(The missing second matrix column

o is the cross product of the normal-
ized orientation vectors

a and

n and therefore bears no further informa-
tion, see Fig. 8.6 and e.g. (Fu et al. 1987; Paul 1981).)
In this space, we must construct the
m

 dimensional embedding
manifold
M that represents the conﬁguration manifold of the robot. With
three nodes per axis direction we require



 reference vectors
w
a

X. The distribution of these vectors might have been found with a SOM,
however, for the present demonstration we generated the values for the
w
a by augmenting 729 joint angle vectors on a rectangular 333333
grid in joint angle space

 with the missing
r
x

r
y

r
z

a
x

a
y

a
z

n
x

n
y

n
z–

114
Application Examples in the Robotics Domain
θ 
θ 
θ 
θ 
θ 
θ 
lz 
n 
o 
a 
r 
Figure 8.6:
The 15 com-
ponents of the training data
vectors for the PSOM net-
works:
The six Puma axes
and the position

r and orien-
tation vectors

n,

o, and

a of
the tool frame.
components, using the forward kinematics transform equations (Paul 1981)
(

[-135
,-45
],


[-180
,-100
],


[-35
,55
],


[-45
,45
],


[-90
,0
],


[45
,135
], and tool length
l
z={0,200} mm in
z direction of the
T
 frame,
see Fig. 8.6.
Similar to the previous example, we then test the PSOM based on the


points in the inverse mapping direction. To this end, we specify Cartesian
goal positions

r and orientation values

a

n at 200 randomly chosen inter-
mediate test points and use the PSOM to obtain the missing joint angles

.
Thus, nine dimensions of the embedding space
X are selected as in-
put sub-space. The three components
fr
x

r
y

r
z
g are given in length units
([mm] or [m]) and span intervals of range {1.5, 1.2, 1.6} meters for the given
training set, in contrast to the other six dimensionless orientation compo-
nents, which vary in the interval [-1,+1]. Here the question arises what to
do with these incommensurable components of different unit and magni-
tude? The answer is to account for this in the distance metric
dist. The
best solution is to weight each component
k in Eq. 4.7 reciprocally to the
measurement variance
p
k

var
w
k



(8.2)
If the number of measurements is small, as it is usual for small data sets,

8.2 The Inverse 6 D Robot Kinematics Mapping
115
PSOM


Cartesian position
approach vector
normal vector
deviation


r
deviation


a
deviation


n
l
z [mm]
Sampling
Mean
NRMS
Mean
NRMS
Mean
NRMS
0
bounded
19 mm
0.055
0.035
0.055
0.034
0.057
200
bounded
23 mm
0.053
0.035
0.055
0.034
0.057
0
Chebyshev
12 mm
0.033
0.022
0.035
0.020
0.035
200
Chebyshev
14 mm
0.034
0.022
0.035
0.021
0.035
Table 8.2: Full 6 DOF inverse kinematics accuracy using a 333333
PSOM for a Puma robot with two different tool lengths
l
z. The training
set was sampled in a rectangular grid in

			
, in each axis centered at the
working range midpoint. The bordering samples were taken at the range
borders (bounded), or according to the zeros of the Chebyshev polynomial
T
 (Eq. 6.3).
we may roughly approximate the variance by the following computational
shortcut. In Eq. 8.2 the non-zero diagonal elements
p
k of the projection
matrix
P are set according to the interval spanned by the set of reference
vectors
w
a:
p
k

w
max
k

w
min
k



(8.3)
With
w
max
k
 max
aA
w
k
a
and
w
min
k
 min
aA
w
k
a
(8.4)
the distance metric becomes invariant to a rescaling of any component
of the embedding space
X. This method can be generally recommended
when input components are of uneven scale, but considered equally sig-
niﬁcant. As seen in the next section, the differential scaling of the compo-
nents can by employed to serve further needs.
To measure the accuracy of the inverse kinematics approximation, we
determine the deviation between the goal pose and the actually attained
position after back-transforming (true map) the resulting angles computed
by the PSOM. Two further question are studied in this case:
1. What is the inﬂuence of using tools with different length
l
z mounted
on the last robot segment?

116
Application Examples in the Robotics Domain
2. What is the inﬂuence of standard and Chebyshev-spaced sampling
of training points inside their working interval? When the data val-
ues (here 3 per axis) are sampled proportional to the Chebyshev ze-
ros in the unit interval (Eq. 6.3), the border samples are moved by a
constant fraction (here 16 %) towards the center.
Tab. 8.2 summarizes the resulting mean deviation of the desired Carte-
sian positions and orientations. While the tool length
l
z has only marginal
inﬂuence on the performance, the Chebyshev-spaced PSOM exhibits a sig-
nifcant advantage. As argued in Sect. 6.4, Chebyshev polynomials have ar-
guably better approximation capabilities. However, in the case
n

 both
sampling schemes have equidistant node-spacing, but the Chebyshev-spacing
approach contracts the marginal sampling points inside the working inter-
val. Since the vicinity of each reference vector is principally approximated
with high-accuracy, this advantage is better exploited if the reference train-
ing vector is located within the given workspace, instead of located at the
border.
Figure 8.7: Spatial dis-
tribution of positioning
errors
of
the
PUMA
robot
arm
using
the
6 D inverse kinematics
transform
computed
with a 333333
C-PSOM.
The
six-
dimensional
man-
ifold
is
embedded
in
a
15-dimensional

r


a


n

-space.
The spatial distribution of the resulting

r deviations is displayed in
Fig. 8.7 (of the third case in Tab. 8.2). The local deviations are indicated

8.2 The Inverse 6 D Robot Kinematics Mapping
117
by little (double sized) cross-marks in the perspective view of the Puma's
workspace.
Cartesian position


r
PSOM Type
Average
NRMS
333 PSOM
17 mm
0.041
333 C-PSOM
11 mm
0.027
444 PSOM
2.4 mm
0.0061
444 C-PSOM
1.7 mm
0.0042
555 PSOM
0.11 mm
0.00027
555 C-PSOM
0.091 mm
0.00023
333 L-PSOM of 444
6.7 mm
0.041
333 L-PSOM of 555
2.4 mm
0.0059
333 L-PSOM of 777
1.3 mm
0.018
Table 8.3: 3 DOF inverse Puma robot kinematics accuracy using several
PSOM architectures including the equidistantly (“PSOM”), Chebyshev
spaced (“C-PSOM”), and the local PSOM (“L-PSOM”).
The full 6-dimensional kinematics problem is already a rather demand-
ing task. Most neural network applications in this problem domain have
considered lower dimensional transforms, for instance (Kuperstein 1988)
(m

), (Walter, Ritter, and Schulten 1990) (m

), (Ritter et al. 1992)
(m

 and
m

), and (Yeung and Bekey 1993) (m

); all of them use
several thousand training samples.
To set the present approach into perspective with these results, we in-
vestigate the same Puma robot problem, but with the three wrist joints
ﬁxed. Then, we may reduce the embedding space
X to the essential vari-
ables









p
x

p
y

p
z
. Again using only three nodes per axis we require
only 27 reference vectors
w
a to specify the PSOM. Using the same joint
ranges as in the previous case we obtain the results of Tab. 8.3 for several
PSOM network architectures and training set sizes.

118
Application Examples in the Robotics Domain
0
20
40
60
80
100
120
140
160
0
100
200
300
400
500
600
700
800
Number of Training Examples
Mean Cartesian Deviation [mm]
Mean Joint Angle Deviation [deg]
Figure 8.8: The positioning capabilities of the 333 PSOM network over the
course of learning.
The graph shows the mean Cartesian
hj

r
ji and angular
hj


ji deviation versus the number of already experienced learning examples.
After 400 training steps the last arm segment was suddenly elongated by 150 mm
(10 % of the linear work-space dimensions.)
8.3
Puma Kinematics: Noisy Data and
Adaptation to Sudden Changes
The following experiment shows the adaptation capabilities of the PSOM
in the 3 D inverse Puma kinematics task. Here, in contrast to the previ-
ous case, the initial training data is corrupted by noise. This may happen
when only poor measurement instruments or limited time are available to
make a quick and dirty initial “mapping guess”. Fig. 8.8 presents the mean
deviation of the joint angles
hj	


ji and the back-transformed Cartesian de-
viation
hj	

r
ji from the desired position (tested on a separate test set) ver-
sus the number of already experienced ﬁne-adaptation steps. The PSOM
was initially trained with a data set with (zero mean) Gaussian noise with
a standard deviation of 50 mm


 mm
 added to the Cartesian mea-
surement. (The ﬁne-adaptation of the only coarsely constructed 333
C-PSOM employed Eq. 4.14 with


 decreasing exponentially to 0.3
during the course of learning with two times 400 steps). In the early learn-
ing phase the position accuracy increased rapidly within the ﬁrst 50–100
learning examples and reached the ﬁnal average positioning error asymp-

8.4 Resolving Redundancy by Extra Constraints for the Kinematics
119
totically.
A very important advantage of self-learning algorithms is their abil-
ity to adapt to different and also changing environments. To demonstrate
the adaptability of the network, we interrupted the learning procedure
after 400 training steps and extended the last arm segment by 150 mm
(l

z


mm). The right side of Fig. 8.8 displays how the algorithm re-
sponded. After this drastic change of the robot's geometry only about 100
further iterations where necessary to re-adapt the network for regaining
the robot's previous positioning accuracy.
8.4
Resolving Redundancy by Extra Constraints
for the Kinematics
The control of redundant degrees-of-freedom (DOF) is an important prob-
lem for manipulators built for dextrous operations. A particular task has
a minimal requirement with respect to the manipulator's ability to move
freely. When the task leaves the kinematics problem under-speciﬁed, there
is not one possible solution, instead there exists a higher-dimensional so-
lution space, which is compatible with the task speciﬁcation. The practice
requires a mechanism which determines exactly one solution. Naturally,
it is desirable that these mechanisms offer a high degree of ﬂexibility for
commanding the robot task.
In this section the PSOM will be employed to elegantly realize an inte-
grated system. Important is the ﬂexible selection mechanism for the input
sub-space components and the concept of modulating the cost function, as
it was introduced in Sec. 6.2.
We return to the full 6 DOF Puma kinematics problem (Sec. 8.2) and
use the PSOM to solve the following, typical redundancy problem: e.g.,
specifying only the 3 D target positioning

r without any special target ori-
entation, will leave three remaining DOFs open. In this under-constrained
case the solutions form a continuous 3 D space. It is this redundancy that
we want to use to meet additional constraints — in contrast to the discon-
tinuous redundancies by multiple compatible robot conﬁgurations. Here
we stay with the right-arm, elbow-up, no-wrist-ﬂip conﬁguration seen in
Fig. 8.7 (see also Fu et al. 1987).
The PSOM input sub-space selection mechanism (matrix
P) facilitates

120
Application Examples in the Robotics Domain
simple augmentation of the embedding space
X with extraneous compo-
nents (note, they do not affect the normal operation.) Those can be used
to formulate additional cost function terms and can be activated when-
ever desired. The cost function terms can be freely constructed in various
functional dependencies and are supplied during the learning phase of the
PSOM.
The best-match location
s
 is under-constrained, since
jI
j



m


(in contrast to the cases described in Sec. 5.6.) Certainly, the standard best-
match search algorithm will ﬁnd one possible solution — but it can be any
compatible solution and it will depend on the initial start condition
s
t.
Here, the PSOM offers a versatile way of formulating extra goals or
constraints, which can be turned on and off, depending on the situation
and the user's desire. For example, of particular interest are:
Minimal joint movement: “fast” or “lazy” robot. One practical goal can
be: reaching the next target position with minimum motor action.
This translates into ﬁnding the shortest path from the current joint
conﬁguration


cur
r to a new

 compatible with the desired Cartesian
position

r.
Since the PSOM is constructed on a hyper-lattice in
, ﬁnding the
shortest route
s in
S is equivalent to ﬁnding the shortest path in
.
Thus, all we need to do is to start the best-match search at the best-
match position
s

cur
r belonging to the current position, and the steep-
est gradient descent procedure will solve the problem.
Orientation preference: the “traditional solution”. If a certain end effec-
tor approach direction, for example a top–down orientation, is pre-
ferred, the problem transforms into the standard mixed position /
orientation task, as described above.
Maximum mobility reserve: “comfortable conﬁguration”.
If no further
orientation constraints are given, it might be useful to gain a large
joint mobility reserve — a reserve for further actions and re-actions
to unforeseen events.
Here, the latter case is of particular interest. A high mobility reserve
means to stay away from conﬁgurations close to any range limits. We

8.4 Resolving Redundancy by Extra Constraints for the Kinematics
121
model this goal as a “discomfort” term in the cost function
E



 and demon-
strate how to incorporate extra cost terms in the standard PSOM mecha-
nism.
θj 
cj 
θj-max 
θj-min 
Figure 8.9: “Discomfort” cost function
c
j

j





j

mid
j

max
j

min
j


for each joint
angle
i.
A target value of zero, will
attract the best-match towards the joint
range center

mid
j
.
Fig. 8.9 shows a suitable cost function term, which is constructed by
a parabola shaped function
c
j

j
 for all joint angles

			
.
c
j

j
 is zero
at the interval midpoint

mid
j
and positive at both joint range limits. The
15-dimensional embedding space
X is augmented to 21 dimensions such
that all training vectors
w become extended by the tuple
c






c
. If the
corresponding
p
k in the selection matrix
P are chosen as zero, the PSOM
provides the same kinematics mapping as in the absence of the extension.
However, when we now turn on the new
P elements (p
			


), and set
the input components to zero (x
			


), the iterative best-match proce-
dure of the PSOM tries to simultaneously satisfy the constraints imposed
by the kinematics equation together with the constraints
c
j

. The latter
 
Figure 8.10: Series of intermediate steps for optimizing the remaining joint angle
mobility in the same position.

122
Application Examples in the Robotics Domain
attracts the solution to the particular single conﬁguration with all joints in
mid range position. Any further kinematics speciﬁcation is usually con-
ﬂicting, and the result therefore a compromise (the least-square optimum;
jI
j

). How to solve this conﬂict?
To avoid this mis-attraction effect, the auxiliary constraint terms
p
k

p
k
t
1. should be generally kept small, otherwise the solution would be too
strongly attracted to the single mid-point position;
2. should decay during the gradient descent iteration. The ﬁnal step
should be done with all extra terms
c
j weighted with factors
p
k zero
(here
p
			


). This assures that the ﬁnal solution will be – without
compromise – within the solution space, spanned by the primary
goal, here the end-effector position.
To demonstrate the impact of the auxiliary constraints the augmented
m

 PSOM is engaged to re-arrange a suitable robot arm conﬁguration.
The initial starting position is already a solution of the desired end-effector
positions and Fig. 8.10 and Fig. 8.11 show intermediate steps in approach-
ing the desired result. Here, the extra cost components were weighted in a
ﬁxed ratio of 0:0.04:0.06:1:1:0.04 among each other and weighted initially
by 0.5 % with respect to the

r components (see Eq. 8.3). During interme-
diate best-match search steps all weights gradually decay to zero. The
stroboscopic image (Fig. 8.11d) shows how the arm frees itself from an ex-
tremal conﬁguration (position close to the limit) to a conﬁguration leaving
more space to move freely.
It should be emphasized that several constraint functions can be simul-
taneously inserted and turned “on” and “off” to suit the current needs.
This a good example of the strength of a versatile and ﬂexible input se-
lection mechanism. The implementation should care that any in-active
augmentations (with
p


) of the embedding space
X are handled efﬁ-
ciently, i.e. all related component operations are skipped. By this means,
the extraneous features do not impair the PSOM's performance, but can
be engaged at any time.

8.5 Summary
123
a) 
b) 
c) 
d) 
Figure 8.11: The PSOM resolves redundancies by extra constraints in a conve-
nient functional deﬁnition. (a-c) Sequence of images, showing how the Puma
manipulator turns from a joint conﬁguration close to the range limits (a) to a con-
ﬁguration with a larger mobility reserve (c). The stroboscopic picture (d) demon-
strates that the same tool center point is kept.
8.5
Summary
The PSOM learning algorithm shows very good generalization capability
for smooth continuous mapping tasks. This property becomes highlighted
at the robot ﬁnger inverse kinematics problem with 3 inherent degrees-of-
freedom (see also 6 D kinematics). Since in many robotics learning tasks
the data set can be actively sampled, the PSOM's ability to construct the
high-dimensional manifold from a small number of training data turns out
to be here a many-sided beneﬁcial mechanism for rapid learning.

124
Application Examples in the Robotics Domain
Furthermore, the associative mapping concept has several interesting
properties. Several coordinate spaces can be maintained and learned si-
multaneously, as shown for the robot ﬁnger example.
This multi-way
mapping solves, e.g. the forward and inverse kinematics with the very
same network. This simpliﬁes learning and avoids any asymmetry of sep-
arate learning modules. As pointed out by Kawato (1995), the learning of
bi-directional mappings is not only useful for the planning phase (action
simulation), but also for bi-directional sensor–motor integrated control.
By the method of dynamic cost function modulation the PSOM's inter-
nal best-match search can be employed for partially meeting additional,
possibly conﬂicting target functions. This scheme was demonstrated in
the redundancy problem of the 6 DOF inverse robot kinematics.

Chapter 9
Context Dependent
Mixture-of-Expertise:
Investment Learning
If one wants to learn with extremely few examples, one inevitably faces a
dilemma: on the one hand, with few examples one can only determine a
rather small number of adaptable parameters and, as a consequence, the
learning system must be either very simple, or, and usually this is the rel-
evant alternative, it must have a structure that is already well-matched to
the task to be learned. On the other hand, however, having to painstak-
ingly pre-structure a system by hand is precisely what one wants to avoid
when using a learning approach.
It is possible to ﬁnd a workable compromise that can cope with this
dilemma, i.e., that somehow allows the structuring of a system without
having to put in too much by hand?
9.1
Context dependent “skills”
To be more concrete, we want to consider the learning of a “skill” which is
dependent on some environment or system context. The notion of “skill” is
very general and includes a task speciﬁc, hand-crafted function mapping
mechanism, a control system, as well as a general learning system. As
illustrated by Fig. 9.1, we assume:
J. Walter “Rapid Learning in Robotics”
125

126
“Mixture-of-Expertise” or “Investment Learning”
  T-Box 
X1 
X2 
parameters 
or  weights 
 
Context c 
 
ω 
Figure 9.1: The T-BOX maps between different task variable sets within a certain
context (

c), describable by a set of parameters
.
 that the “skill” can be acquired by a “transformation box” (“T-BOX”),
which is a suitable building block with learning capabilities; the T-BOX
is responsible for the multi-variate, continuous-valued mapping
T


x



x
, transforming between the two task-variable sets

x
 and

x
.
 the mapping “skill” T-BOX is internally modeled and determined by
a set of parameters
 (which can be accessed from outside the “black
box”, which makes the T-BOX rather an open “white box”);
 the correct parameterization
 changes smoothly with the context of
the system;
 the situational context can be observed and is associated with a set
of suitable sensor values

c (some of them are possibly expensive and
temporarily unavailable);
 the context changes only from time to time, or on a much larger time
scale, than the time scale on which the task mapping T-BOX is em-
ployed.
The conventional approach is to consider the joined problem of learn-
ing the mapping from all relevant input values,

x



c to the desired output

x
. This leads to large, specialized networks. Their disadvantages are ﬁrst,
the possible catastrophic interference (after-learning in a situated context
may effect other contexts in an uncontrolled way, see Sec. 3.2); and second,
their low modularity and re-usability.

9.2 “Investment Learning” or “Mixture-of-Expertise” Architecture
127
9.2
“Investment Learning” or “Mixture-of-Expertise”
Architecture
Here, we approach a solution in a modular way and suggest to split learn-
ing structurally and temporally: the structural split is implemented at the
level of the learning moduls:
 the T-BOX;
 the META-BOX, which has the responsibility for providing the map-
ping between the context information

c to the weight or parameter
set
.
The temporal split is implemented at the learning itself:
 The ﬁrst, the investment learning stage may be slow and has the task
to pre-structure the system for
 the one-shot adaptation phase, in which the specialization to a par-
ticular solution (within the chosen domain) can be achieved extremely
rapidly.
These two stages are described next.
9.2.1
Investment Learning Phase
  Meta-Box 
  
c 
X1 
X2 
parameters 
or  weights 
ω 
T-Box 
Prototypical 
Context 
(1) 
(1) 
(2) 
(2) 
Figure 9.2: The Investment Learning Phase.
In the investment learning phase a set of prototypical context situations is ex-
perienced: in each context
j the T-BOX is trained and the appropriate set of

128
“Mixture-of-Expertise” or “Investment Learning”
weights / parameters

j determined (see Fig. 9.2, arrows (1)). It serves to-
gether with the context information

c as a high-dimensional training data
vector for the META-BOX (2). During the investment learning phase the
META-BOX mapping is constructed, which can be viewed as the stage for
the collection of expertise in the suitably chosen prototypical contexts.
9.2.2
One-shot Adaptation Phase
  Meta-Box 
  
c 
X1 
X2 
parameters 
or  weights 
ω 
T-Box 
New 
Context 
(3) 
(3) 
(4) 
(4) 
Figure 9.3: The One-shot Adaptation Phase.
After the META-BOX has been trained, the task of adapting the “skill” to
a new system context is tremendously accelerated. Instead of any time-
consuming re-learning of the mapping
T this adjustment now takes the
form of an immediate META-BOX
 T-BOX mapping or “one-shot adapta-
tion”. As illustrated in Fig. 9.3, the META-BOX maps a new (unknown)
context observation

c
new (3) into the parameter
 weight set

new for the
T-BOX. Equipped with

new, the T-BOX provides the desired mapping
T
new (4).
9.2.3
“Mixture-of-Expertise” Architecture
It is interesting to compare this approach with a feed-forward architec-
ture which Jordan and Jacobs (1994) coined “mixture-of-experts”. As il-
lustrated in Fig. 9.4 a number of “experts” receive the same input task
variables together with the context information

c. In parallel, each ex-
pert produces an output and contributes – with an individual weight – to
the overall system result. All these weights are determined by the “gating
network”, based on the context information

c (see also LLM discussion in
Sec. 3.8).

9.2 “Investment Learning” or “Mixture-of-Expertise” Architecture
129
T-Box 
Expert 1 
T-Box 
Expert N 
T-Box 
Expert 3 
T-Box 
Expert 2 
Σ 
Gating 
Network 
Output 
Input 
Context 
Task  Variables 
‘‘Mixture-of-Experts’’ 
Meta 
Network 
T-Box 
Expert 
Input 
Context 
Task Variables 
Output 
Parameters 
ω 
‘‘Mixture-of-Expertise’’ 
Figure 9.4:
The “Mixture-of-Experts” architecture versus the “Mixture-of-
Expertise” architecture.

130
“Mixture-of-Expertise” or “Investment Learning”
The lower part of Fig. 9.4 redraws the proposed hierarchical network
scheme and suggests to name it “mixture-of-expertise”. In contrast to the
specialized “experts” in Jordan's picture, here, one single “expert” gathers
specialized “expertise” in a number of prototypical context situations (see
investment learning phase, Sec. 9.2.1). The META-BOX is responsible for the
non-linear “mixture” of this “expertise”.
With respect to networks' requirements for memory and computation,
the “mixture-of-expertise” architecture compares favorably: the “exper-
tise” () is gained and implemented in a single “expert” network (T-BOX).
Furthermore, the META-BOX needs to be re-engaged only when the con-
text is changed, which is indicated by a deviating sensor observation

c.
However, this scheme requires from the learning implementation of
the T-BOX that the parameter (or weight) set
 is represented as a con-
tinuous function of the context variables

c. Furthermore, different “de-
generate” solutions must be avoided: e.g. a regular multilayer perceptron
allows many weight permutations
 to achieve the same mapping. Em-
ploying a MLP in the T-BOX would result in grossly inadequate interpo-
lation between prototypical “expertises”

j, denoted in different kinds of
permutations. Here, a suitable stabilizer would be additionally required.
Please note, that the new “mixture-of-expertise” scheme does not only
identify the context and retrieve a suitable parameter set (association).
Rather it achieves a high-dimensional generalization of the learned (in-
vested) situations to new, previously unknown contexts.
A “mixture-of-expertise” aggregate can serve as an expert module in
a hierarchical structure with more than two levels. Moreover, the two ar-
chitectures can be certainly combined. This is particularly advantageous
when very complex mappings are smooth in certain domains, but non-
continuous in others. Then, different types of learning experts, like PSOMs,
Meta-PSOMs, LLMs, RBF and others can be chosen. The domain weight-
ing can be controlled by a competitive scheme, e.g. RBF, LVQ, SOM, or a
“Neural-Gas” network (see Chap. 3).
9.3
Examples
The concept imposes a strong need for efﬁcient learning algorithms: to
keep the number of required training examples manageable, those should

9.3 Examples
131
be efﬁcient in particular with respect to the number of required training
points.
The PSOM network appears as a very attractive solution, but not the
only possible one. Therefore, the ﬁrst example will compare three ways
to apply the mixture-of-expertise architecture to a four DOF problem con-
cerned about coordinate transformation. Two further examples demon-
strate a visuo-motor coordination tasks for mono- and binocular camera
sight.
9.3.1
Coordinate Transformation with and without Hierar-
chical PSOMs
This ﬁrst task is related to the visual object orientation ﬁnder example pre-
sented before in Sec. 7.2 (see also Walter and Ritter 1996a). Here, an inter-
esting skill for a robot could be the correct coordinate transformation from
a camera reference frame (world or tool; yielding coordinate values

x
) to
the object centered frame (yielding coordinate values

x
). This mapping
would have to be represented by the T-BOX. The “context” would be the
current orientation of the object relative to the camera.
Fig. 9.5 shows three ways how the investment learning scheme can be
implemented in that situation. All three share the same PSOM network
type as the META-BOX building block. As already pointed out, the “Meta-
PSOM” bears the advantage that the architecture can easily cope with sit-
uations where various (redundant) sensory values are or are not available
(dynamic sensor fusion problem).
Weights 
Roll-Pitch 
Yaw-Shift 
Meta-PSOM 
X1 
X2 
Parameter 
ω=(φ,θ,ψ,z) 
Context 
(i) 
4..8 points 
Image Completion 
Matrix 
Multiplier 
Meta-PSOM 
X1 
X2 
Coefficients 
ω 
Context 
(ii) 
4..8 points 
Image Completion 
Meta-PSOM 
ω 
Context 
(iii) 
4..8 points 
Image Completion 
T-PSOM 
X1 
X2 
Figure 9.5: Three different ways to solve the context dependent, or investment
learning task.
The ﬁrst solution
i uses the Meta-PSOM for the reconstruction of ob-
ject pose in roll-pitch-yaw-depth values from Sec. 7.2. The T-BOX is given
by the four successive homogeneous transformations (e.g. Fu et al. 1987)
on the basis of the





z values obtained from the Meta-PSOM.

132
“Mixture-of-Expertise” or “Investment Learning”
The solution
ii represents the coordinate transformation as the prod-
uct of the four successive transformations. Thus, in this case the Meta-
PSOM controls the coefﬁcients of a matrix multiplication. As in
i, the
required parameter values
 are gained by a suitable calibration, or sys-
tem identiﬁcation procedure.
When no explicit ansatz for the T-BOX is readily available, we can use
method
iii. Here, for each prototypical context, the required
T-mapping
is learned by a network and becomes encoded in its weight set
. For this,
one can use any trainable network that meets the requirement stated at
the end of the previous section. However, PSOMs are a particularly con-
venient choice, since they can be directly constructed from a small data set
and additionally offer the advantage of associative multi-way mappings.
In this example, we chose for the T-BOX a 222 “T-PSOM” that im-
plements the coordinate transform for both directions simultaneously. Its
training required eight training vectors arranged at the corners of a cubi-
cal grid, e.g. similar to the cube structure depicted in Fig. 7.2.
In order to compare approaches
i

iii, the transformation T-BOX
accuracy was averaged over a set of 50 contexts (given by 50 randomly
chosen object poses), each with 100 object volume points

x
 to be trans-
formed into camera coordinates

x
.
T-BOX
x - RMS [L]
y - RMS [L]
z - RMS [L]
(i) (




z)
0.025
0.023
0.14
(ii) {A
ij}
0.016
0.015
0.14
(iii) PSOM
0.015
0.014
0.12
Table 9.1: Results for the three variants in Fig. 9.5.
Comparing the RMS results in Tab. 9.1 shows, that the PSOM approach
(iii) can fully compete with the dedicated hand-crafted, one-way mapping
solutions (i) and (ii).
9.3.2
Rapid Visuo-motor Coordination Learning
The next example is concerned with a robot sensorimotor transformation.
It involves the Puma robot manipulator, which is monitored by a camera,
see Fig. 9.6. The robot is positioned behind a table and the entire scene is

9.3 Examples
133
displayed on a monitor. With a mouse-click, a user can select on the mon-
itor some target point of the displayed table area. The goal is to move the
robot end effector to the indicated position on the table. This requires to
compute a transformation
T


x


u between coordinates on the moni-
tor (or “camera retina” coordinates) and corresponding world coordinates

x in the frame of reference of the robot. This transformation depends on
several factors, among them the relative position between the robot and
the camera. The learning task (for the later stage) is to rapidly re-learn this
transformation whenever the camera has been repositioned.
T-PSOM 
Meta-PSOM 
Uref 
X 
weights 
ω 
U 
ξref 
Figure 9.6: Rapid learning of the 2D visuo-motor coordination for a camera in
changing locations. The basis T-PSOM is capable of mapping to (and from) the
Cartesian robot world coordinates

x, and the location of the end-effector (here
the wooden hand replica) in camera coordinates

u (see cross mark.) In the pre-
training phase, nine basis mappings are learned in prototypical camera locations
(chosen to lie on the depicted grid.) Each mapping gets encoded in the weight
parameters

 of the T-PSOM and serves then, together with the system context
observation

u
r
ef (here, e.g. the cone tip), as a training vector for the Meta-PSOM.
In other words, here, the T-PSOM has to represent the transformation
T


x


u with the camera position as the additional context. To apply the
previous scheme, we must ﬁrst learn (“investment stage”) the mapping
T
for a set of prototypical contexts, i.e., camera positions.
To keep the number of prototype contexts manageable, we reduce some
DOFs of the camera by requiring ﬁxed focal length, camera tripod height,
and roll angle. To constrain the elevation and azimuth viewing angle, we
choose one ﬁxed land mark, or “ﬁxation point”

f
ix somewhere centered
in the region of interest. After repositioning the camera, its viewing angle

134
“Mixture-of-Expertise” or “Investment Learning”
must be re-adjusted to keep this ﬁxation point visible in a constant im-
age position, serving at the same time the need of a fully visible region of
interest. These practical instructions achieve the reduction of free param-
eters per camera to its 2D lateral position, which can now be sufﬁciently
determined by a single extra observation of a chosen auxiliary world ref-
erence point

r
ef. We denote the camera image coordinates of

r
ef by

u
r
ef.
By reuse of the cameras as a “context” or “environment sensor”,

u
r
ef now
implicitly encodes the camera position.
For the present investigation, we chose from this set 9 different camera
positions, arranged in the shape of a


 grid (Fig. 9.6). For each of these
nine contexts, the associated mapping
T

T
j,
j






	 is learned
by a T-PSOM by visiting a rectangular grid set of end effector positions

i (here we visit a


 grid in

x of size


 cm
) jointly with the loca-
tion in camera retina coordinates (2D)

u
i. This yields the tuples


x
i


u
i
 as
the training vectors
w
a
i for the construction of a weight set


j (valid for
context
j) for the T-PSOM in Fig. 9.3.
Each
T
j (the T-PSOM in Fig. 9.3, equipped with weight set


j) solves
the mapping task only for the camera position for which
T
j was learned.
Thus there is not yet any particular advantage to other, more specialized
methods for camera calibration (Fu, Gonzalez, and Lee 1987). However,
the important point is, that now we can employ the Meta-PSOM to rapidly
map a new camera position into the associated transform
T by interpolating
in the space of the previously constructed basis mappings
T
j.
The constructed input-output tuples


u
r
ef
j



j
,
j

f




	g, serve
as the training vectors for the construction of the Meta-PSOM in Fig. 9.3
such that each

u
r
ef observation that pertains to an intermediate camera
positioning becomes mapped into a weight vector

 that, when used in the
base T-PSOM, yields a suitably interpolated mapping in the space spanned
by the basis mappings
T
j.
This enables in the following one-shot adaptation for new, unknown cam-
era places. On the basis of one single observation

u
r
ef
new, the Meta-PSOM
provides the weight pattern


new that, when used in the T-PSOM in Fig. 9.3,
provides the desired transformation
T
new for the chosen camera position.
Moreover (by using different projection matrices
P), the T-PSOM can be
used for different mapping directions, formally:

x


u

F
ux
T
P
S
O
M


u




u
r
ef

(9.1)

9.3 Examples
135

u

x

F
xu
T
P
S
O
M


x




u
r
ef

(9.2)




u
r
ef


F
u

M
etaP
S
O
M


u
r
ef



M
eta

(9.3)
Table 9.2 shows the experimental results averaged over 100 random lo-
cations
 (from within the range of the training set) seen from 10 different
camera locations, from within the


 roughly radial grid of the training
positions, located at a normal distance of about 65–165 cm (to work space
center, about 80 cm above table, total range of about 95–195cm), covering
a

 sector. For identiﬁcation of the positions
 in image coordinates, a
tiny light source was installed at the manipulator tip and a simple proce-
dure automatized the ﬁnding of

u with about
 pixel accuracy. For the
achieved precision it is important that all learned
T
j share the same set
of robot positions

i, and that the training sets (for the T-PSOM and the
Meta-PSOM) are topologically ordered, here as two


 grids. It is not
important to have an alignment of this set to any exact rectangular grid
in e.g. world coordinates, as demonstrated with the radial grid of camera
training positions (see Fig. 9.6 and also Fig. 5.5).
Directly trained
T-PSOM with
T-PSOM
Meta-PSOM
pixel

u


x
r
obot
 Cart. error


x
2.2 mm
0.021
3.8 mm
0.036
Cartesian

x


u
 pixel error
1.2 pix
0.016
2.2 pix
0.028
Table 9.2: Mean Euclidean deviation (mm or pixel) and normalized root mean
square error (NRMS) for 1000 points total in comparison of a directly trained T-
PSOM and the described hierarchical PSOM-network, in the rapid learning mode
with one observation.
These data demonstrate that the hierarchical learning scheme does not
fully achieve the accuracy of a straightforward re-training of the T-PSOM
after each camera relocation. This is not surprising, since in the hierar-
chical scheme there is necessarily some loss of accuracy as a result of the
interpolation in the weight space of the T-PSOM. As further data becomes
available, the T-PSOM can certainly be ﬁne-tuned to improve the perfor-
mance to the level of the directly trained T-PSOM. However, the possibil-
ity to achieve the already very good accuracy of the hierarchical approach
with the ﬁrst single observation per camera relocation is extremely attrac-
tive and may often by far outweigh the still moderate initial decrease that

136
“Mixture-of-Expertise” or “Investment Learning”
is visible in Tab. 9.2.
9.3.3
Factorize Learning: The 3 D Stereo Case
The next step is the generalization of the monocular visuo-motor map to
the stereo case of two independent movable cameras. Again, the Puma
robot is positioned behind the table and the entire scene is displayed on
two windows on a computer monitor. By mouse-pointing, the user can,
for example, select one point on the monitor and the position on a line ap-
pearing in the other window, to indicate a goal position for the robot end
effector, see Fig. 9.7. This requires to compute the transformation
T be-
tween the combined pair of pixel coordinates

u



u
L


u
R
 on the monitor
images and corresponding 3 D world coordinates

x in the robot reference
frame — or alternatively — the corresponding six robot joint angles

 (6
DOF). Here we demonstrate an integrated solution, offering both solutions
with the same network (see also Walter and Ritter 1996b).
T-PSOM 
Meta-PSOM 
Uref 
X 
weights 
Meta-PSOM 
L 
Uref 
R 
U 
θ 
ωR 
R 
L           
ωL 
2
3 
6 
4 
2 
2 
54 
Figure 9.7: Rapid learning of the 3D visuo-motor coordination for two cameras.
The basis T-PSOM (m

) is capable of mapping to and from three coordinate
systems: Cartesian robot world coordinates, the robot joint angles (6-DOF), and
the location of the end-effector in coordinates of the two camera retinas. Since the
left and right camera can be relocated independently, the weight set of T-PSOM
is split, and parts

L


R are learned in two separate Meta-PSOMs (“L” and “R”).
The T-PSOM learns each individual basis mapping
T
j by visiting a rect-
angular grid set of end effector positions

i (here a 333 grid in

x of size




 cm
) jointly with the joint angle tuple


j and the location in cam-
era retina coordinates (2D in each camera)

u
L
j


u
R
j . Thus the training vectors
w
a
i for the construction of the T-PSOM are the tuples


x
i



i


u
L
i


u
R
i
.

9.3 Examples
137
In the investing pre-training phase, nine mappings
T
j are learned by
the T-PSOM, each camera visiting a


 grid, sharing the set of visited
robot positions

i. As Fig. 9.3 suggests, normally the entire weight set

serves as part of the training vector to the Meta-PSOM. Here the prob-
lem factorizes since the left and right camera change tripod place inde-
pendently: the weight set of the T-PSOM is split, and the two parts can be
learned in separate Meta-PSOMs. Each training vector
w
a
j for the left cam-
era Meta-PSOM consists of the context observation

u
L
r
ef and the T-PSOM
weight set part

L



u
L







u
L

 (analogously for the right camera Meta-
PSOM.)
Also here, only one single observation

u
r
ef is required to obtain the de-
sired transformation
T. As visualized in Fig. 9.7,

u
r
ef serves as the input to
the second level Meta-PSOMs. Their outputs are interpolations between
previously learned weight sets, and they project directly into the weight
set of the basis level T-PSOM.
The resulting T-PSOM can map in various directions. This is achieved
by specifying a suitable distance function
dist via the projection matrix
P, e.g.:

x

u

F
ux
T
P
S
O
M


u

L


u
L
r
ef


R


u
R
r
ef

(9.4)




u

F
u
T
P
S
O
M


u

L


u
L
r
ef


R


u
R
r
ef

(9.5)

u

x

F
xu
T
P
S
O
M


x

L


u
L
r
ef


R


u
R
r
ef

(9.6)

L


u
L
r
ef


F
u
M
etaP
S
O
M
L


u
L
r
ef


L

analog

R


u
R
r
ef

(9.7)
Directly trained
T-PSOM with
Mapping Direction
T-PSOM
Meta-PSOM
pixel

u


x
r
obot
 Cartesian error


x
1.4 mm
0.008
4.4 mm
0.025
Cartesian

x


u
 pixel error
1.2 pix
0.010
3.3 pix
0.025
pixel

u



r
obot
 Cartesian error


x
3.8 mm
0.023
5.4 mm
0.030
Table 9.3: Mean Euclidean deviation (mm or pixel) and normalized root mean
square error (NRMS) for 1000 points total in comparison of a directly trained T-
PSOM and the described hierarchical Meta-PSOM network, in the rapid learning
mode after one single observation.
Table 9.3 shows experimental results averaged over 100 random lo-
cations
 (from within the range of the training set) seen in 10 different

138
“Mixture-of-Expertise” or “Investment Learning”
camera setups, from within the


 square grid of the training positions,
located in a normal distance of about 125 cm (center to work space center,
1 m
), covering a disparity angle range of

–
.
The achieved accuracy of 4.4 mm after learning by a single observation,
compares very well with the total distance range 0.5–2.1 m of traversed
positions. As further data becomes available, the T-PSOM can be ﬁne-
tuned and the performance improved to the level of the directly trained
T-PSOM.
The next chapter will summarize the presented work.

Chapter 10
Summary
The main concern of this work is the development and investigation of
new building blocks aiming at rapid and efﬁcient learning.
We chose
the domain of continuous, high-dimensional, non-linear mapping tasks,
as they often play an important role in sensorimotor transformations in
the ﬁeld of robotics.
The design of better re-usable building blocks, not only adaptive neural
network modules, but also hardware, as well as software modules can
be considered as the desire for efﬁcient learning in a broader sense. The
construction of those building blocks is driven by the given experimental
situation. Similar to a training exercise, the procedural knowledge of, for
example, interacting with a device is usually incorporated in a building
block, e.g. a piece of software. The criterion to call this activity “learning”
is whether this “knowledge” can be later used, more precisely, re-used in
form of “association” or “generalization” in a new, previously unexpected
application situation.
The ﬁrst part of this work was directed at the robotics infrastructure
investment: the building and development of a test and research platform
around an industrial robot manipulator Puma 560 and a hydraulic multi-
ﬁnger hand. We were particularly concerned about the interoperability
of the complex hardware by general purpose Unix computers in order to
gain the ﬂexibility needed to interface the robots to distributed informa-
tion processing architectures.
For more intelligent and task-oriented action schemata the availabil-
ity of fast and robust sensory environment feedback is a limiting factor.
Nevertheless, we encountered a signiﬁcant lack in suitable and commer-
J. Walter “Rapid Learning in Robotics”
139

140
Summary
cially available sensor sub-systems. As a consequence, we started to en-
large the robot's sensory equipment in the direction of force, torque, and
haptic sensing. We developed a multi-layer tactile sensor for detailed in-
formation on the current contact state with respect to forces, locations and
dynamic events. In particular, the detection of incipient slip and timely
changes of contact forces are important to improve stable ﬁne control on
multi-contact grasp and release operations of the articulated robot hand.
Returning to the more narrow sense of rapid learning, what is important?
To be practical, learning algorithms must provide solutions that can
compete with solutions hand-crafted by a human who has analyzed the
system. The criteria for success can vary, but usually the costs of gather-
ing data and of teaching the system are a major factor on the side of the
learning system, while the effort to analyze the problem and to design an
algorithm is on the side of the hand crafted solution.
Here we suggest the “Parameterized Self-Organizing Map” as a versa-
tile module for the rapid learning of high-dimensional, non-linear, smooth
relations. As shown in a row of application examples, the PSOM learning
mechanism offers excellent generalization capabilities based on a remark-
ably small number of training examples.
Internally, the PSOM builds an
m-dimensional continuous mapping
manifold, which is embedded in a higher
d-dimensional task space (d

m). This manifold is supported by a set of reference vectors in conjunc-
tion with a set of basis functions. One favorable choice of basis functions
is the class of (m-fold) products of Lagrange approximation polynomials.
Then, the (m-dimensional) grid of reference vectors parameterizes a topo-
logically structured data model.
This topologically ordered model provides curvature information —
information which is not available within other learning techniques. If
this assumed model is a good approximation, it signiﬁcantly contributes
to achieve the presented generalization accuracy. The difference of infor-
mation contents — with and without such a topological order — was em-
phasized in the context of the robot ﬁnger kinematics example.
On the one hand, the PSOM is the continuous analog of the standard
discrete “Self-Organizing Map” and inherits the well-known SOM's un-
supervised learning capabilities (Kohonen 1995). One the other hand, the
PSOM offers a most rapid form of “learning”, i.e. the form of immediate

141
construction of the desired manifold. This requires to assign the training
data set to the set of internal node locations. In other words, for this pro-
cedure the training data set must be known, or must be inferred (e.g. with
the SOM scheme).
The applicability is demonstrated in a number of examples employing
training data sets with the known topology of a multi-dimensional Carte-
sian grid. The resulting PSOM is immediately usable — without any need
for time consuming adaptation sequences. This feature is extremely ad-
vantageous in all cases where the training data can be sampled actively.
For example, in robotics, many sensorimotor transformations can be sam-
pled in a structured manner, without any additional cost.
Irrespectively of how the data model was initially generated the PSOM
can be ﬁne-tuned on-line. Using the described error minimization proce-
dure, a PSOM can be reﬁned even in the cases of coarsely sampled data,
when the original training data was corrupted by noise, or the underlying
task is changing. This is illustrated by the problem of adapting to sudden
changes in the robot's geometry and its corresponding kinematics.
The PSOM manifold is also called parameterized associative map since it
performs auto-associative completion of partial inputs. This facilitates multi-
directional mapping in contrast to only uni-directional feed-forward net-
works. Which components of the embedding space are selected as inputs,
is simply determined by specifying the diagonal elements
p
k of the projec-
tion matrix
P. This mechanism allows to easily augment the embedding
space by further sub-spaces. As pointed out, the PSOM algorithm can
be implemented, such that inactive components do not affect the normal
PSOM operation.
Several examples demonstrate how to proﬁtably utilize the multi-way
association capabilities: e.g. feature sets can be completed by a PSOM
in such a manner that they are invariant against certain operations (e.g.
shifted/rotated object) and provide at the same pass the unknown opera-
tion parameter (e.g. translation, angles).
The same mechanism offers a very natural and ﬂexible way of sensor
data fusion. The incremental availability of more and more results from
different sensors can be used to improve the measurement accuracy and
conﬁdence of recognition. Furthermore, the PSOM multi-way capability
enables an effective way of inter-sensor coordination and sensor system
guidance by predictions.

142
Summary
Generally, in robotics the availability of precise mappings from and to
different variable spaces, including sensor, actuator, and reference coordi-
nate spaces, plays a crucial role. The applicability of the PSOM is demon-
strated in the robot ﬁnger application, where it solves the classical forward
and inverse kinematics problem in Cartesian, as well as in the actuator pis-
ton coordinates — within the same PSOM. Here, a set of only 27 training
data points turns out sufﬁcient to approximate the 3 D inverse kinemat-
ics relation with a mean positioning deviation of about 1 % of the entire
workspace range.
The ability to augment the PSOM embedding space allows to easily
add a “virtual sensor” space to the usual sensorimotor map. In conjunc-
tion with the ability of rapid learning this opens the interesting possibil-
ity to demonstrate desired robot task performance. After this learning by
demonstration phase, robot tasks can also be speciﬁed as perceptual ex-
pectations in this newly learned space.
The coefﬁcients
p
k can weight the components relative to each other,
which is useful when input components are differently conﬁdent, impor-
tant, or of uneven scale. This choice can be changed on demand and can
even be modulated during the iterative completion process.
Internally, the PSOM associative completion process performs an it-
erative search for the best-matching parameter location in the mapping
manifold. This minimization procedure can be viewed as a recurrent net-
work dynamics with an continuous attractor manifold instead of just attrac-
tor points like in conventional recurrent associative memories. The re-
quired iteration effort is the price for rapid learning. Fortunately, it can
be kept small by applying a suitable, adaptive second order minimization
procedure (Sect. 4.5). In conjunction with an algorithmic formulation op-
timized for efﬁcient computation also for high-dimensional problems, the
completion procedure converges already in a couple of iterations.
For special purposes, the search path in this procedure can be directed.
By modulating the cost function during the best-match iteration the PSOM
algorithm offers to partly comply to an additional, second-rank goal func-
tion, possibly contradicting the primary target function. By this means, a
mechanism is available to ﬂexibly optimize a mix of extra constraints on
demand. For example, the six-dimensional inverse Puma kinematics can
be handled by one PSOM in the given workspace. For under-speciﬁed po-
sitioning tasks the same PSOM can implement several options to ﬂexibly

143
resolve the redundancies problem.
Despite the fact that the PSOM builds a global parametric model of the
map, it also bears the aspect of a local model, which maps each reference
point exactly (without any interferences by other training points, due to
the orthogonal set of basis functions).
The PSOM's character of being a local learning method can be gradu-
ally enhanced by applying the “Local-PSOMs” scheme. The L-PSOM algo-
rithm constructs the constant sized PSOM on a dynamically determined
sub-grid and keeps the computational effort constant when the number
of training points increases. Our results suggest an excellent cost–beneﬁt
relation when using more than four nodes.
A further possibility to improve the mapping accuracy is the use of
“Chebyshev spaced PSOM”. The C-PSOM exploits the superior approxima-
tion capabilities of the Chebyshev polynomials for the design of the in-
ternal basis functions. When using four or more nodes per axis, the data
sampling and the associated node values are taken according to the distri-
bution of the Chebyshev polynomial's zeros. This imposes no extra effort
but offers a signiﬁcant precision advantage.
A further main concern of this work is how to structure learning sys-
tems such that learning can be efﬁcient. Here, we demonstrated a hier-
archical approach for context dependent learning. It is motivated by a
decomposition of the learning phase into two different stages: A longer, initial
“investment learning” phase “invests” effort in the collection of expertise in
prototypical context situations. In return, in the following “one-shot adapta-
tion” stage the system is able to extremely rapidly adapt to a new changing
context situation.
While PSOMs are very well suited for this approach, the underlying
idea to “compile” the effect of a longer learning phase into a one-step
learning architecture is more general and is independent of the PSOMs.
The META-BOX controls the parameterization of a set of context speciﬁc
“skills” which are implemented in a parameterized box - denoted T-BOX.
Iterative learning of a new context task is replaced by the dynamic re-para-
meterization through the META-BOX-mapping, dependent on the charac-
terizing observation of the context.
This emphasizes an important point for the construction of more pow-
erful learning systems: in addition to focusing on output value learning,

144
Summary
we should enlarge our view towards mappings which produce other mappings
as their result. Similarly, this embracing consideration received increasing
attention in the realm of functional programming languages.
To implement this approach, we used a hierarchical architecture of
mappings, called the “mixture-of-expertise” architecture. While in principle
various kinds of network types could be used for these mappings, a practi-
cally feasible solution must be based on a network type that allows to con-
struct the required basis mappings from a rather small number of training
examples. In addition, since we use interpolation in weight/parameter
space, similar mappings should give rise to similar weight sets to make
interpolation of expertise meaningful.
We illustrated three versions of this approach when the output map-
ping was a coordinate transformation between the reference frame of the
camera and the object centered frame. They differed in the choice of the
utilized T-BOX. The results showed that on the T-BOX level the learning
PSOM network can fully compete with the dedicated engineering solu-
tion, additionally offering multi-way mapping capabilities. At the META-BOX
level the PSOM approach is a particularly suitable solution because, ﬁrst,
it requires only a small number of prototypical training situations, and
second, the context characterization task can proﬁt from the sensor fusion
capabilities of the same PSOM, also called Meta-PSOM.
We also demonstrated the potential of this approach with the task of 2D
and 3D visuo-motor mappings, learnable with a single observation after
changing the underlying sensorimotor transformation, here e.g. by repo-
sitioning the camera, or the pair of individual cameras. After learning by
a single observation, the achieved accuracy compares rather well with the
direct learning procedure. As more data becomes available, the T-PSOM
can be ﬁne-tuned to improve the performance to the level of the directly
trained T-PSOM.
The presented arrangement of a basis T-PSOM and two Meta-PSOMs
further demonstrates the possibility to split the hierarchical “mixture-of-
expertise” architecture into modules for independently changing parame-
ter sets. When the number of involved free context parameters is growing,
this factorization is increasingly crucial to keep the number of pre-trained
prototype mappings manageable.
The two hierarchical architectures, the “mixture-of-expert” and the in-
troduced “mixture-of-expertise” scheme, complement each other. While

145
the PSOM as well as the T-BOX/META-BOX approach are very efﬁcient
learning modules for the continuous and smooth mapping domain, the
“mixture-of-expert” scheme is superior in managing mapping domains
which require non-continuous or non-smooth interfaces. As pointed out,
the T-BOX-concept is not restricted to a particular network type, and the
“mixture-of-expertise” can be considered as a learning module by itself.
As a result, the conceptual combination of the presented building blocks
opens many interesting possibilities and applications.

146
Summary

Bibliography
Anderson, J. and e. E. Rosenfeld (1988). Neurocomputing: Foundations of
Research. MIT Press.
Arbib, M. (1995). The Handbook of Brain Theroy and Neural Networks. Brad-
ford MIT Press. (ed.).
Atkeson, C. (1992, 10-1990). Memory based approaches to approximat-
ing continous functions. In M. Casdagli and S. Eubank (Eds.), Non-
linear Modeling and Forecasting, pp. 503–521. Addison-Wesley.
Baader, A. (1995). Ein Umwelterfassungssystem für multisensorielle Mon-
tageroboter. Meß- Steuerungs- und Regeltechnik, Nr. 486. VDI-Verlag
Düsseldorf.
Bauer, H.-U. and K. Pawelzik (1991). Quantifying the neighborhood
preservation of self-organizing feature maps. IEEE Transactions on
Neural Networks 3(4), 570–579.
Breimann, L., J. Friedman, R. Olshen, and C. Stone (1984). Classiﬁcation
and regression trees. Wadsworth Inc.
Cleveland, W. (1979). Robust locally weighted regression ans smoothing
scatter plots. J. Amer. Statist. Assoc. 74, 828–836.
Cleveland, W. S. and S. J. Devlin (1988). Locally weighted regression:
An approach to regression analysis by local ﬁtting. J. Amer. Statist.
Assoc. 83, 598–610.
Craven, P. and G. Wahba (1979). Smoothing noisy data with spline func-
tions. estimating the correct degree of smoothing by the method of
generalized cross-validation. Numer. Math. 31, 317–403.
Cun, Y. L., J. Denker, and S. Solla (1990). Optimal brain damage. In
D. Touretzky (Ed.), NIPS*89, Volume 2, pp. 598–605. Morgan Kauf-
mann.
J. Walter “Rapid Learning in Robotics”
147

148
BIBLIOGRAPHY
Cybenko, G. (1989). Approximation by superpositions of a sigmoidal
function. Mathematics of Control, Signals and Systems 2, 303–314.
Davis, P. (1975). Interpolation and Approximation. Dover Pub., New York.
Dücker, C. (1995). Parametrisierte Bewegungsprimitive für ein Roboter–
Kraft/Momenten–Sensor Handsystem. Diplomarbeit, Technische
Fakultät, Universität Bielefeld.
Fahlman, S. and C. Lebiere (1990). The cascade-correlation learning ar-
chitecture. In D. Touretzky (Ed.), NIPS*89, Volume 2, pp. 524–532.
Morgan Kaufmann.
Farmer, J. D. and J. J. Sidorowich (1988, mar). Exploiting chaos to predict
the future and reduce noise. Tech. Rep. LA-UR-88-901, Los Alamos
National Laboratory.
Frean, M. (1990). The upstart algorithm: a method for constructing and
training feedforward neural networks. Neural Computation 2, 198–
209.
Friedman, J. H. (1991). Multivariate adaptive regression splines. The An-
nals of Statistics 19(1), 1–141. (with discussion).
Fritzke, B. (1991). Let it grow – self-organizing feature maps with prob-
lem depended cell structure. In t. Kohonen et al. (Ed.), Proc. Int. Conf.
on Artiﬁcial Neural Networks (ICANN-91), Espoo, Finland, pp. 403–408.
North-Holland, Amsterdam.
Fritzke, B. (1995). Incremenal learning of local linear mappings. In Proc.
Int. Conf. on Artiﬁcial Neural Networks (ICANN-95), Paris, Volume 1,
pp. 217–222.
Fu, K., R. Gonzalez, and C. Lee (1987). Robotics : Control, Sensing, Vision,
and Intelligence. McGraw-Hill.
Geman, S., E. Bienenstock, and R. Doursat (1992). Neural networks and
the bias/variance dilemma. Neural Computation 4, 1–58.
Goldberg, D. (1989). Genetic Algorithms in Search, Optimization, and Ma-
chine Learning. Addison-Wesley.
Hämmerlin, G. and K.-H. Hoffmann (1991). Numerical Mathematics.
Springer, New York.

BIBLIOGRAPHY
149
Hanson, S. and L. Pratt (1989). A comparison of different biases for min-
imal network construction with back-propagation. In Advances in
Neural Information Processing Systems II, pp. 177–185. Morgan Kauf-
man.
Hastie, T. and R. Tibshirani (1991). Generalized additive models, Volume 43
of Monographs on statistics and applied probability. Chapman and Hall.
Hayward, V. and R. Paul (1986). Robot manipulator control under unix
rccl: A robot control “c” library. Int. Journal of Robotics Research 5(4),
94–111.
Hebb, D. O. (1949). The Organization of Behavior. Wiley, New York.
Hertz, J., A. Krogh, and R. Palmer (1991). Introduction to the Theroy of
Neural Computation. SFI Lecture Notes. Addison-Wesley.
Hinton, G. (1986). Learning distributed representations of concepts. In
Proc 8. Ann Conf Cog Sci Soc, pp. 1–12. Erlbaum, Amherst.
Hirzinger, G., B. Brunner, J. Dietrich, and J. Heindl (1994). ROTEX – the
ﬁrst remotely conrolled robot in space. In Intern. Conf. on Robotics and
Automation (San Diego), pp. 2604–2611. IEEE.
Hopﬁeld, J. J. (1982). Neural networks and pysical systems with emer-
gent collective computational abilities. Proc Natl Acad Sci USA 79,
2554–2558.
Hopﬁeld, J. J. (1984). Neurons with graded response have collective
computational properties like those of two-state neurons. Proc Natl
Acad Sci USA 81, 3088–3092.
Hornik, K., M. Stinchcombe, and H. White (1989). Multilayer feedfor-
ward networks are universal approximators. Neural Networks 2, 359–
366.
Jockusch, J. (1996). Taktile Sensorik für eine Roboterhand – Ein micro-
controller basiertes integriertes Sensorsystem. Diplomarbeit, Tech-
nische Fakultät, Universität Bielefeld.
Jockusch, J., J. Walter, and H. Ritter (1996). A tactile sensor system for
a three-ﬁngered robot manipulator. In Proc. Int. Conf. on Robotics and
Automation (ICRA-97), pp. (submitted).
Jockusch, S. (1990). A neural network which adapts its structure to a
given set of patterns. In R. Eckmiller, G. Hartmann, and G. Hauske

150
BIBLIOGRAPHY
(Eds.), Proc. Parallel Processing in Neural Systems and Computers, Düs-
seldorf, pp. 169–174. North-Holland, Amsterdam.
Jolliffe, I. (1986). Principal Component Analysis. Springer-Verlag, New-
York.
Jordan, M. I. and R. A. Jacobs (1994). Hierarchical mixtures of experts
and the EM algorithm. Neural Computation 6(2), 181–214.
Kawato, M. (1995). Bi-directional neural network architecture in brain
functions. In Proc. Int. Conf. on Artiﬁcial Neural Networks (ICANN-95),
Paris, Volume 1, pp. 23–30.
Kohonen, T. (1984). Self-Organization and Associative Memory. Springer
Series in Information Sciences 8. Springer, Heidelberg.
Kohonen, T. (1990). The self-organizing map. In Proc. IEEE, Volume 78,
pp. 1464–1480.
Kohonen, T. (1995). Self-Organizing Maps, Volume 30 of Springer Series in
Information Sciences. Berlin, Heidelberg: Springer.
Kummert, F., E. Littmann, A. Meyering, S. Posch, H. Ritter, and
G. Sagerer (1993a, 15. DAGM-Symposium). A hybrid approach
to signal interpretation using neural and semantic networks. In
S. Pöppl and H. Handel (Eds.), Mustererkennung 1993, pp. 245–252.
Springer-Verlag, Berlin.
Kummert, F., E. Littmann, A. Meyering, S. Posch, H. Ritter, and
G. Sagerer (1993b). Recognition of 3d-hand orientation from monoc-
ular color images by neural semantic networks. Pattern Recognition
and Image Analysis 3(3), 311–316.
Kuperstein, M. (1988). Neural model of adaptive hand-eye coordination
for single postures. Science 239, 1308–1311.
Littmann, E. (1995). Strukturierung Neuronaler Netze zwischen Biologie und
Anwendung. Dissertation, Technische Fakultät, Universität Bielefeld.
Littmann, E., A. Dress, and H. Ritter (1996). Visual gesture-based robot
guidance with a modular neural system. In NIPS*95, pp. 903–909.
MIT Press.
Littmann, E., A. Meyering, J. Walter, T. Wengerek, and H. Ritter (1992).
Neural networks for robotics. In K. Schuster (Ed.), Applications of
Neural Networks, pp. 79–103. VCH Verlag Weinheim.

BIBLIOGRAPHY
151
Lloyd, J. (1988, January). RCI user's guide. report CIM-88-22, McGill
Reseach Center for Intelligent Maschines, McGill University, Mon-
tréal.
Lloyd, J. and V. Hayward (1992, April). Multi-RCCL user's guide.
Technical report, McGill Reseach Center for Intelligent Maschines,
McGill University, Montréal.
Lloyd, J. and M. Parker (1990, July). Real time control under Unix for
RCCL. In Robotics and Manufacturing ISRAM'90, Volume 3, pp. 237–
242. ASME Press, New York.
Marquardt, D. W. (1963). J. Soc Appl. Math. 11, 431–441.
Martinetz, T., S. Berkovich, and K. Schulten (1993). “neural-gas” net-
work for vector quantization and its application to time-series pre-
diction. IEEE TNN 4(4), 558–569.
Martinetz, T. and K. Schulten (1991, June). A “neural-gas” networks
learns topologies. In Proc. ICANN, Espoo, Finland, Volume 1, pp. 747–
752.
Mason, M. and J. Salisbury (1985). Robot hands and the mechanics of ma-
nipulation. MIT Press.
McCulloch, W. and W. Pitts (1943). A logical calculus of ideas immanent
in the nervous system. Bulletin of mathematical Biophysics 5, 115–133.
Menzel, R., K. Woelﬂ, and F. Pfeiffer (1993, Sept). The developement
of a hydraulic hand. In Proc. of the 2nd Conf. on Mechanotronics and
Robotics, pp. 225–238.
Meyering, A. and H. Ritter (1992). Learning to recognize 3d-hand pos-
tures from perspective pixel images. In I. Aleksander and J. Taylor
(Eds.), Proc. Int. Conf. on Artiﬁcial Neural Networks (ICANN-92), Vol-
ume 2, pp. 821–824.
Mézard, M. and J.-P. Nadal (1989). Learning in feedforward layered net-
works: The tiling algorithm. J. of Physics A 22, 2191–2204.
Miller, G., P. Todd, and S. Hegde (1989). Designing neural networks
using genetic algorithms. In J. Schaffer (Ed.), Proc 3rd Int Conf on
Genetic Algorithms, Arlington, pp. 379–384. Morgan Kaufmann.
Minsky, M. and S. Papert (1969). Perceptrons : an introduction to computa-
tional geometry. MIT Press, Cambridge.

152
BIBLIOGRAPHY
Montana, D. and L. Davis (1989). Training feedforward networks using
genetic algorithms. In N. Sridharan (Ed.), Proc 11th Int Joint Conf on
Artiﬁcial Intelligence, Detroit, pp. 762–767. Morgan Kaufmann.
Moody, J. and C. Darken (1988). Learning with localized receptive
ﬁelds. In Proc. Connectionist Models Summer School, pp. 133–143. Mor-
gan Kaufman Publishers, San Mateo, CA.
Murphy, R. (1995). Sensor fusion. See Arbib (1995). (ed.).
Obermayer, K., H. Ritter, and K. Schulten (1990, nov). A principle for the
formation of the spatial structure of cortical feature maps. In Proc.
Natl. Acad. Sci., USA Neurobiology, Volume 87, pp. 8345–8349.
Parker, D. (1985). Learing logic. Tech. Rep. TR-47, Center for Computa-
tional Research in Economics and Mangement Sciencs, MIT.
Paul, R. (1981). Robot Manipulators: Mathematics, Programming, and Con-
trol. MIT.
Platt, J. (1991). A resource-allocating network for function interpolation.
Neural Computation 3, 213–255.
Poggio, T. and F. Girosi (1990). Networks for best approximation and
learning. Proc. of IEEE 78, 1481–1497.
Powell, M. (1987). Radial basis functions for multivariable interpola-
tion: A review. In Algorithms for Approximation, pp. 143–167. Oxford:
Clarendon Press.
Press, W., B. Flannery, S. Teukolsky, and W. Vetterling (1988). Numerical
Recipes in C – the Art of Scientiﬁc Computing. Cambridge Univ. Press.
Rankers, S. (1994). Steuerung einer hydraulisch betriebenen Roboter-
hand
unter
Echtzeitbedingungen.
Diplomarbeit,
Technische
Fakultät, Universität Bielefeld.
Ritter, H. (1991). Asymptotic level density for a class of vector quanti-
zation processes. IEEE Trans. Neural Networks 2, 173–175.
Ritter, H. (1993). Parametrized self-organizing maps. In S. Gielen
and B. Kappen (Eds.), Proc. Int. Conf. on Artiﬁcial Neural Networks
(ICANN-93), Amsterdam, pp. 568–575. Springer Verlag, Berlin.
Ritter, H. and T. Kohonen (1989). Self-organizing semantic maps. Biol.
Cybern 61, 241–254.

BIBLIOGRAPHY
153
Ritter, H., T. Martinetz, and K. Schulten (1992). Neural Computation and
Self-organizing Maps. Addison Wesley.
Ritter, H. and K. Schulten (1986). Topology conserving maps for learn-
ing motor tasks. In J. Denker (Ed.), Neural Networks for Computing,
pp. 376–380. AIP Conf Proc 151, Snowbird, Utah.
Ritter, H. J., T. M. Martinetz, and K. J. Schulten (1989). Topology-
conserving maps for learning visuo-motor-coordination. Neural Net-
works 2, 159–168.
Rosenblatt, F. (1962). Principles of Neurodynamics. Spartan, New York.
Rumelhart, D., G. Hinton, and R. Williams (1986). Learning internal rep-
resentations by error propagation. In Parallel Distributed Processing:
Explorations in the Microstructure of Cognition, 2 vols. MIT Press, Cam-
bridge.
Schaal, S. and C. Atkeson (1994, September). Robot learning by non-
parametric regression. In Intelligent Robots and Systems (IROS), Mu-
nich, pp. 478–485.
Schutter, J. D. (1986). Compliant Robot Motion: Task Formulation and Con-
trol. Ph. D. thesis, Katholieke Universiteit Leuven, Belgium.
Selle,
D. (1995). Realisierung eines Simulationssystems
für eine
mehrﬁngerige Roboterhand zur Untersuchung und Verbesserung
der Antriebsregelung. Diplomarbeit, Technische Fakultät, Univer-
sität Bielefeld.
Stoer, J. and R. Bulirsch (1980). Introduction to Numerical Analysis.
Springer New York,Heidelberg,Berlin.
Stokbro, K., D. K. Umberger, and J. A. Hertz (1990). Exploiting neurons
with localized receptive ﬁelds to learn chaos. Tech. Rep. Nordita-
90/28 S, Nordisk Institut for Teoretisk Fysik, Danmark.
v.d. Malsburg, C. (1973). Self-organization of orientation sentive cells in
the striata cortex. Kybernetik 14, 85–100.
v.d. Malsburg, C. and D. Willshaw (1977). How to label nerve cells so
that they can interconnect in an ordered fashion. Proc Natl Acad Sci
USA 74, 5176–5178.
Walter, J. (1991). Visuo-motorische Koordination eines Industrierobot-
ers und Vorhersage chaotischer Zeitserien:
Zwei Anwendungen

154
BIBLIOGRAPHY
selbstlernenden neuronalen Algorithmen. Diplomarbeit, Physik De-
partment der Technische Universität München.
Walter, J. (1996). SORMA: Interoperating distributed robotics hardware.
In Proc. Int. Conf. on Robotics and Automation (ICRA-97), pp. (submit-
ted).
Walter, J., T. Martinetz, and K. Schulten (1991, June). Industrial robot
learns visuo-motor coordination by means of the “neural-gas” net-
work. In Proc. Int. Conf. Artiﬁcial Neural Networks (ICANN), Espoo Fin-
land, Volume 1, pp. 357–364. Elsevier, New York.
Walter, J. and H. Ritter (1995). Local PSOMs and Chebyshev PSOMs –
improving the parametrised self-organizing maps. In Proc. Int. Conf.
on Artiﬁcial Neural Networks (ICANN-95), Paris, Volume 1, pp. 95–
102.
Walter, J. and H. Ritter (1996a). Associative completion and invest-
ment learning using PSOMs. In M. C. v.d. S. W. v. J. Vorbrüggen,
and B. Sendhoff (Eds.), Artiﬁcial Neural Networks – Proc. Int. Conf.
ICANN 96, Lecture Notes in Computer Science 1112, pp. 157–164.
Springer.
Walter, J. and H. Ritter (1996b). Investment learning with hierarchical
PSOM. In D. Touretzky, M. Mozer, and M. Hasselmo (Eds.), Ad-
vances in Neural Information Processing Systems 8 (NIPS*95), pp. 570–
576. Bradford MIT Press.
Walter, J. and H. Ritter (1996c). The NI robotics laboratory. Technical
Report SFB360-TR-96-4, TF-AG-NI, Universität Bielefeld, D-33615
Bielefeld.
Walter, J. and H. Ritter (1996d). Rapid learning with parametrized self-
organizing maps. Neurocomputing 12, 131–153.
Walter, J. and H. Ritter (1996e). Service Object Request Management
Architecture:
SORMA concepts and examples. Technical Report
SFB360-TR-96-3, Universität Bielefeld, D-33615 Bielefeld.
Walter, J., H. Ritter, and K. Schulten (1990, June). Non-linear predic-
tion with self-organizing maps. In Int. Joint Conf. on Neural Networks
(IJCNN), San Diego, CA, pp. 587–592.

BIBLIOGRAPHY
155
Walter, J. and K. Schulten (1993). Implementation of self-organizing
neural networks for visuo-motor control of an industrial robot. IEEE
Transactions in Neural Networks 4(1), 86–95.
Wan, E. A. (1993). Finite impulse response neural networks for autore-
gressive time series prediction. In A. Weigend and N. Gershenfeld
(Eds.), Time Series Prediction: Forecasting the Future and Understanding
the Past, pp. 195–218. Addison-Wesley.
Wengerek, T. (1995). Reinforment Lernen in der Robotik. Dissertation,
Technische Fakultät, Universität Bielefeld.
Werbos, P. (1974). Beyond Regression: New Tools for Prediction and Analysis
in the Behavioral Sciencs. Ph. D. thesis, Harvard University.
Widrow, B. and M. E. Hoff (1960). Adaptive switching circuits. In IRE
ESCON Convention Record, Chapter 10, pp. 123–137. IRC, New York.
Yeung, D.-Y. and G. A. Bekey (1993). On reducing learning time
in context-dependent mappings. IEEE Transaction on Neural Net-
works 4(1), 31–42.
Some of the author's publications, including this book, are available on-
line via: http://www.techfak.uni-bielefeld.de/walter/

