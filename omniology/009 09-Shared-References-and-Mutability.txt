
The term shared reference is the concept of two variables referencing 
the same object in memory (i.e. having the same memory address)
a = 10
10
0x1000
b = a
a
b
def my_func(v):
…
t = 20
my_func(t)
20
0x2000
t
v

In fact, the following may surprise you:
a = 10
b = 10
10
0x1000
a
b
s1 = ‘hello’
s2 = ‘hello’
hello
0x23FA
s1
s2
In both these cases, Python’s memory manager decides to automatically re-use 
the memory references!!
We’ll revisit this again soon
Is this even safe?
Yes
The integer object 10, and the string object ‘hello’ are immutable
– so it is safe to set up a shared reference

When working with mutable objects we have to be more careful
a = [1, 2, 3]
b = a
b.append(100)
1
2
3
0x1000
a
b
100
With mutable objects, the Python memory manager will never create shared references
a = [1, 2, 3]
b = [1, 2, 3]
a
1
2
3
0x1000
b
1
2
3
0xF354

