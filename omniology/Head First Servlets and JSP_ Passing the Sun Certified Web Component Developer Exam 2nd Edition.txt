www.allitebooks.com

Head First Servlets and JSP™
Second Edition
by Bryan Basham, Kathy Sierra, and Bert Bates
Copyright © 2008 O’Reilly Media, Inc. All rights reserved.
Printed in the United States of America.
Published by O’Reilly Media, Inc., 1005 Gravenstein Highway North, Sebastopol, CA 95472.
O’Reilly Media books may be purchased for educational, business, or sales promotional use. Online editions are 
also available for most titles (safari.oreilly.com). For more information, contact our corporate/institutional sales 
department: (800) 998-9938 or corporate@oreilly.com.
Series Creators:	
	
Kathy Sierra, Bert Bates
Series Editor:	
	
Brett D. McLaughlin
Design Editor:	
	
Louise Barr
Cover Designers:	
	
Edie Freedman, Steve Fehler, Louise Barr
Production Editor:	 	
Sanders Kleinfeld
Indexer:	
	
	
Julie Hawks
Interior Decorators:	
Kathy Sierra and Bert Bates
Servlet Wrangler:	
	
Bryan Basham
Assistant to 
the Front Controller:	
Bert Bates
Printing History:
August 2004: First Edition.
March 2008: Second Edition.
The O’Reilly logo is a registered trademark of O’Reilly Media, Inc. The Head First series designations, 
Head First Servlets and JSP™, Second Edition, and related trade dress are trademarks of O’Reilly Media, Inc. Java 
and all Java-based trademarks and logos are trademarks or registered trademarks of  Sun Microsystems, 
Inc., in the United States and other countries. O’Reilly Media, Inc. is independent of  Sun Microsystems.
Many of the designations used by manufacturers and sellers to distinguish their products are claimed as 
trademarks. Where those designations appear in this book, and O’Reilly Media, Inc., was aware of a trademark 
claim, the designations have been printed in caps or initial caps.
While every precaution has been taken in the preparation of this book, the publisher and the author assume no 
responsibility for errors or omissions, or for damages resulting from the use of the information contained herein.
In other words, if  you use anything in Head First Servlets & JSP™ to, say, run a nuclear power plant or air 
traffic control system, you’re on your own. Readers of  this book should be advised that the authors hope 
you remember them, should you create a huge, successful dotcom as a result of  reading this book. We’ll 
take stock options, beer, or dark chocolate
ISBN: 978-0-596-51668-0
[M]
www.allitebooks.com

table of contents
ix
Table of Contents (Summary)
Table of Contents (the real thing)
Intro
Who is this book for?	
xx
We know what your brain is thinking	
xxi
Metacognition	
xxiii
Bend your brain into submission	
xv
What you need for this book	
xxvi
Passing the certification exam	
xxviii
Technical reviewers	
xxx
Acknowledgments	
xxxi
 	
Intro	
xix
1	
Why use Servlets & JSPs: an introduction	
1
2	
Web App Architecture: high-level overview	
37
3	
Mini MVC Tutorial: hands-on MVC	
67
4	
Being a Servlet: request AND response	
93
5	
Being a Web App: attributes and listeners	
147
6	
Conversational state: session management	
223
7	
Being a JSP: using JSP	
281
8	
Script-free pages: scriptless JSP	
343
9	
Custom tags are powerful: using JSTL	
439
10	
When even JSTL is not enough: custom tag development	
499
11	
Deploying your web app: web app deployment	
601
12	
Keep it secret, keep it safe: web app security	
649
13	
The Power of Filters: wrappers and filters	
701
14	
Enterprise design patterns: patterns and struts	
737
A	
Appendix A: Final Mock Exam	
791
i	
Index	
865
Your brain on Servlets.   Here you are trying to learn something, while here 
your brain is doing you a favor by making sure the learning doesn’t stick. Your brain’s 
thinking, “Better leave room for more important things, like which wild animals to avoid 
and whether naked snowboarding is a bad idea.” So how do you trick your brain into 
thinking that your life depends on knowing Servlets?
i
www.allitebooks.com

table of contents
x
Why use Servlets & JSPs
1
Exam objectives 
2
What web servers and clients do, and how they talk? 
4
Two-minute guide to HTML 
7
What is the HTTP protocol? 
10
Anatomy of HTTP GET and POST requests and HTTP responses 
16
Locating web pages using URLs 
20
Web servers, static web pages, and CGI  
24
Servlets Demystified: write, deploy, and run a servlet 
30
JSP is what happened when somebody introduced Java to HTML 
34
Web applications are hot. How many GUI apps do you know that are used by 
millions of users worldwide? As a web app developer, you can free yourself from the grip 
of deployment problems all standalone apps have, and deliver your app to anyone with a 
browser. But you need servlets and JSPs. Because plain old static HTML pages are so, 
well, 1999. Learn to move from web site to web app.
Web app architecture
2
Exam Objectives 
38
What is a Container and what does it give you? 
39
How it looks in code (and what makes a servlet) 
44
Naming servlets and mapping them to URLs using the DD 
46
Story: Bob Builds a Matchmaking Site ( and MVC intro) 
50
A Model-View-Controller (MVC) overview and example 
54
A “working” Deployment Descriptor (DD) 
64
How J2EE fits into all this 
65
Servlets need help. When a request comes in, somebody has to instantiate
the servlet or at least allocate a thread to handle the request. Somebody has to call the 
servlet’s doPost() or doGet() method. Somebody has to get the request and the response 
to the servlet. Somebody has to manage the life, death, and resources of the servlet. In 
this chapter, we’ll look at the Container, and we’ll take a ﬁ rst look at the  MVC pattern.
www.allitebooks.com

table of contents
xi
Mini MVC tutorial
3
Exam Objectives 
68
Let’s build an MVC application; the first design 
69
Create the development and deployment environments 
72
Create and test the HTML for the initial form page 
75
Create the Deployment Descriptor (DD) 
77
Create, compile, deploy, and test the controller servlet 
80
Design, build, and test the model component 
82
Enhance the controller to call the model 
83
Create and deploy the view component (it’s a JSP) 
87
Enhance the controller servlet to call the JSP 
88
Create and deploy an MVC web app. It’s time to get your hands dirty 
writing an HTML form, a servlet controller, a model (plain old Java class), an XML 
deployment descriptor, and a JSP view. Time to build it, deploy it, and test it. But ﬁ rst, you 
need to set up your development environment. Next, you need to set up your deployment 
environment following the servlet and JSP specs and Tomcat requirements. True, this is a 
small app... but there’s almost NO app that’s too small to use MVC.
Being a Servlet
4
Exam Objectives 
94
A servlet’s life in the Container 
95
Servlet initialization and threads 
101
A Servlet’s REAL job is to handle GET and POST requests. 
105
The story of the non-idempotent request 
112
What determines whether you get a GET or POST request? 
117
Sending and using parameter(s) 
119
So that’s the Request... now let’s see the Response 
126
You can set response headers, you can add response headers 
133
Servlet redirect vs. request dispatcher 
136
Review: HttpServletResponse 
140
Servlets need help. When a request A servlet’s job is to take a client’s request 
and send back a response. The request might be simple: “get me the Welcome page.” Or 
it might be complex: “Complete my shopping cart check-out.” The request carries crucial 
data, and your servlet code has to know how to ﬁ nd it and how to use it. And your servlet 
code has to know how to send a response. Or not...
 
www.allitebooks.com

table of contents
xii
Being a web app
5
Exam Objectives 
148
Init Parameters and ServletConfig to the rescue 
149
How can a JSP get servlet init parameters? 
155
Context init parameters to the rescue 
157
Comparing ServletConfig with ServletContext 
159
She wants a ServletContextListener 
166
Tutorial: a simple ServletContextListener 
168
Compile, deploy, and test your listener 
176
The full story, a ServletContextListener review 
178
Eight Listeners: they’re not just for context events... 
180
What, exactly, is an attribute? 
185
The Attribute API and the dark side of attributes 
189
Context scope isn’t thread-safe! 
192
The problem in slow motion... 
193
Trying out Synchronization 
195
Are Session attributes thread-safe? 
198
The SingleThreadModel 
201
Only Request attributes and local variables are thread-safe! 
204
Request attributes and Request dispatching 
205
No servlet stands alone. In today’s modern web app, many components 
work together to accomplish a goal. You have models, controllers, and views. You have 
parameters and attributes. You have helper classes. But how do you tie the pieces 
together? How do you let components share information? How do you hide information? 
How do you make information thread-safe? Your job may depend on the answers.
www.allitebooks.com

table of contents
xiii
Conversational state
6
Web servers have no short-term memory. As soon as they send you 
a response, they forget who you are. The next time you make a request, they don’t 
recognize you. They don’t remember what you’ve requested in the past, and they don’t 
remember what they’ve sent you in response. Nothing. But sometimes you need to keep 
conversational state with the client across multiple requests. A shopping cart wouldn’t 
work if the client had to make all his choices and then checkout in a single request.
Being a JSP
7
A JSP becomes a servlet. A servlet that you don’t create. The Container looks 
at your JSP, translates it into Java source code, and compiles it into a full-ﬂ edged Java 
servlet class. But you’ve got to know what happens when the code you write in the JSP 
is turned into Java code. You can write Java code in your JSP, but should you? And if 
not Java code, what do you write? How does it translate into Java code? We’ll look at 
six different kinds of JSP elements—each with its own purpose and, yes, unique syntax. 
You’ll learn how, why, and what to write in your JSP. And you’ll learn what not to write.
Exam Objectives 
224
It’s supposed to be a conversation, (how sessions work) 
226
Session IDs, cookies, and other session basics 
231
URL rewriting: something to fall back on 
237
When sessions get stale; getting rid of bad sessions 
241
Can I use cookies for other things, or are they only for sessions? 
250
Key milestones for an HttpSession 
254
Don’t forget about HttpSessionBindingListener 
256
Session migration 
257
Listener examples 
261
Exam Objectives 
282
Create a simple JSP using “out” and a page directive 
283
JSP expressions, variables, and declarations 
288
Time to see a JSP-generated servlet 
296
The out variable isn’t the only implicit object... 
298
The Lifecycle and initialization of a JSP 
306
While we’re on the subject... let’s talk more about the three directives 
314
Scriptlets considered harmful? Here’s EL 
317
But wait... we haven’t seen: actions 
323
www.allitebooks.com

table of contents
xiv
Script-free pages
8
Exam Objectives 
344
When attributes are beans 
345
Standard actions: useBean, getProperty, setProperty  
349
Can you make polymorphic bean references? 
354
The param attribute to the rescue 
360
Converting properties 
363
Expression Language (EL) saves the day! 
368
Using the dot (.) operator to access properties and map values 
370
The [] gives you more options (Lists, arrays...) 
372
More dot and [ ] operator details 
376
The EL implicit objects 
385
EL functions, and handling “null” 
392
Reusable template pieces—two kinds of “include” 
402
The <jsp:forward /> standard action 
416
She doesn’t know about JSTL tags (a preview) 
417
Reviewing standard actions and include 
417
Lose the scripting. Do your web page designers really have to know Java?
Do they expect server-side Java programmers to be, say, graphic designers? And even 
if it’s just you on the team, do you really want a pile of bits and pieces of Java code in 
your JSPs? Can you say, “maintenance nightmare”? Writing scriptless pages is not just 
possible, it’s become much easier and more ﬂ exible with the new JSP 2.0 spec, thanks 
to the new Expression Language (EL). Patterned after JavaScript and XPATH, web 
designers feel right at home with EL, and you’ll like it too (once you get used to it). But 
there are some traps... EL looks like Java, but isn’t. Sometimes EL behaves differently 
than if you used the same syntax in Java, so pay attention!
www.allitebooks.com

table of contents
xv
Custom tags are powerful
9
Sometimes you need more than EL or standard actions. What if 
you want to loop through the data in an array, and display one item per row in an HTML 
table? You know you could write that in two seconds using a for loop in a scriptlet. But 
you’re trying to get away from scripting. No problem. When EL and standard actions 
aren’t enough, you can use custom tags. They’re as easy to use in a JSP as standard 
actions. Even better, someone’s already written a pile of the ones you’re most likely to 
need, and bundled them into the JSP Standard Tag Library (JSTL).  In this chapter we’ll 
learn to use custom tags, and in the next chapter we’ll learn to create our own.
Exam Objectives 
440
Looping without scripting <c:forEach> 
446
Conditional control with  <c:if> and <c:choose> 
451
Using the <c:set> and <c:remove> tags 
455
With <c:import>, there are now three ways to include content 
460
Customizing the thing you include 
462
Doing the same thing with <c:param> 
463
<c:url> for all your hyperlink needs 
465
Make your own error pages 
468
The <c:catch> tag. Like try/catch...sort of 
472
What if you need a tag that’s NOT in JSTL? 
475
Pay attention to <rtexprvalue> 
480
What can be in a tag body 
482
The tag handler, the TLD, and the JSP 
483
The taglib <uri> is just a name, not a location 
484
When a JSP uses more than one tag library 
487
http://localhost:8080/testJSP1/Tester.do
www.allitebooks.com

table of contents
xvi
When even JSTL isn’t enough...
10
Sometimes JSTL and standard actions aren’t enough. When you 
need something custom, and you don’t want to go back to scripting, you can write your 
own tag handlers. That way, your page designers can use your tag in their pages, while 
all the hard work is done behind the scenes in your tag handler class. But there are three 
different ways to build your own tag handlers, so there’s a lot to learn. Of the three, two 
were introduced with JSP 2.0 to make your life easier (Simple Tags and Tag Files).
Deploying your web app
11
Finally, your web app is ready for prime time. Your pages are 
polished, your code is tested and tuned, and your deadline was two weeks ago. But 
where does everything go? So many directories, so many rules. What do you name your 
directories? What does the client think they’re named? What does the client actually 
request, and how does the Container know where to look?
Exam Objectives 
500
Tag Files: like include, only better 
502
Where the Container looks for Tag Files 
509
Simple tag handlers 
513
A Simple tag with a body 
514
What if the tag body uses an expression? 
519
You still have to know about Classic tag handlers 
529
A very small Classic tag handler 
531
The Classic lifecycle depends on return values 
536
IterationTag lets you repeat the body 
537
Default return values from TagSupport 
539
The DynamicAttributes interface 
556
With BodyTag, you get two new methods 
563
What if you have tags that work together? 
567
Using the PageContext API for tag handlers 
577
Exam Objectives 
602
Key deployment task, what goes where? 
603
WAR files 
612
How servlet mapping REALLY works 
616
Configuring welcome files in the DD 
622
Configuring error pages in the DD 
626
Configuring servlet initialization in the DD 
628
Making an XML-compliant JSP: a JSP Document 
629
www.allitebooks.com

table of contents
xvii
Keep it secret, keep it safe
12
Your web app is in danger. Trouble lurks in every corner of the network. You 
don’t want the Bad Guys listening in to your online store transactions, picking off credit 
card numbers. You don’t want the Bad Guys convincing your server that they’re actually 
the Special Customers Who Get Big Discounts. And you don’t want anyone (good OR 
bad) looking at sensitive employee data. Does Jim in marketing really need to know that 
Lisa in engineering makes three times as much as he does?
The power of filters
13
Filters let you intercept the request. And if you can intercept the request, 
you can also control the response. And best of all, the servlet remains clueless. It never 
knows that someone stepped in between the client request and the Container’s invocation 
of the servlet’s service() method. What does that mean to you? More vacations. Because 
the time you would have spent rewriting just one of your servlets can be spent instead 
writing and conﬁ guring a ﬁ lter that has the ability to affect all of your servlets. Want to add 
user request tracking to every servlet in your app? No problem. Manipulate the output 
from every servlet in your app? No problem. And you don’t even have to touch the servlet.
Exam Objectives 
650
The Big 4 in servlet security 
653
How to Authenticate in HTTP World 
656
Top Ten Reasons to do your security declaratively 
659
Who implements security in a web app? 
660
Authorization roles and constraints 
662
Authentication: four flavors 
677
The FOUR authentication types 
677
Securing data in transit: HTTPS to the rescue 
682
Data confidentiality and integrity sparingly and declaratively 
684
Exam Objectives 
702
Building the request tracking filter 
707
A filter’s life cycle 
708
Declaring and ordering filters 
710
Compressing output with a response-side filter 
713
Wrappers rock 
719
The real compression filter code 
722
Compression wrapper code 
724
Lisa in en

table of contents
xviii
Enterprise design patterns
14
Someone has done this already. If you’re just starting to develop web 
applications in Java, you’re lucky. You get to exploit the collective wisdom of the tens 
of thousands of developers who’ve been down that road and got the t-shirt. Using both 
J2EE-speciﬁ c and other design patterns, you can can simplify your code and your life. 
And the most signiﬁ cant design pattern for web apps, MVC, even has a wildly popular 
framework, Struts, that’ll help you craft a ﬂ exible, maintainable servlet Front Controller. 
You owe it to yourself to take advantage of everyone else’s work so that you can spend 
more time on the more important things in life...
A
The final Coffee Cram Mock Exam. This is it. 69 questions. The tone, 
topics, and difﬁ culty level are all virtually identical to the real exam. We know.
Exam Objectives 
738
Hardware and software forces behind patterns 
739
Review of softweare design principles... 
744
Patterns to support remote model components 
745
Overview of JNDI and RMI 
747
The Business Delegate is a “go-between” 
753
Time for a Transfer Object? 
759
Business tier patterns: quick review 
761
Our very first pattern revisited...  MVC 
762
Yes! It’s Struts (and FrontController) in a nutshell 
767
Refactoring the Beer app for Struts 
770
Review of patterns 
778
Final mock exam 
791
Answers 
828
Index
i
  
865








www.allitebooks.com










www.allitebooks.com










www.allitebooks.com










www.allitebooks.com










www.allitebooks.com










www.allitebooks.com









































































































































































































































































































































































































this is a new chapter
439
Sometimes you need more than EL or standard actions. 
What if you want to loop through the data in an array, and display one item per 
row in an HTML table? You know you could write that in two seconds using a for 
loop in a scriptlet. But you’re trying to get away from scripting. No problem. When 
EL and standard actions aren’t enough, you can use custom tags. They’re as 
easy to use in a JSP as standard actions. Even better, someone’s already written 
a pile of the ones you’re most likely to need, and bundled them into the JSP 
Standard Tag Library (JSTL).  In this chapter we’ll learn to use custom tags, and 
in the next chapter we’ll learn to create our own.
Custom tags are powerful
9  using JSTL
You mean, I spent all 
this time writing scriptlets 
for the things I can’t do with EL 
and standard actions, when I 
could have used JSTL?

440 
chapter 9
Describe the syntax and semantics of the ‘taglib’ 
directive: for a standard tag library, for a library of 
Tag Files.
9.1 
Building JSP pages using tag libraries
official Sun exam objectives
Given a design goal, create the custom tag 
structure to support that goal.
9.2 
Identify the tag syntax and describe the action 
semantics of the following JSP Standard Tag Library 
(JSTL v1.1) tags: (a) core tags: out, set, remove, 
and catch, (b) conditional tags: if, choose, when, 
and otherwise, (c) iteration tags: forEach, and (d) 
URL-related: url.
9.3 
All of  the objectives in this section are covered 
in this chapter, although some of  the content is 
covered again in the next chapter (Developing 
Custom  Tags).
Coverage Notes:
Installing the JSTL 1.1
The JSTL 1.1 is NOT part of the JSP 
2.0 specification! Having access to 
the Servlet and JSP APIs doesn’t 
mean you have access to JSTL.
Before you can use JSTL, you need 
to put two files, “jstl.jar” and “standard.
jar” into the WEB-INF/lib directory of 
your web app. That means each web 
app needs a copy.
In Tomcat 5, the two files are already 
in the example applications that ship 
out-of-the-box with Tomcat, so all you 
need to do is copy them from one 
directory and put them into your own 
app’s WEB-INF/lib directory. 
Copy the files from the Tomcat 
examples at:
webapps/jsp-examples/WEB-INF/
lib/jstl.jar
webapps/jsp-examples/WEB-INF/
lib/standard.jar
And place it in your own web app’s 
WEB-INF/lib directory.

using JSTL
you are here 
441
EL and standard actions 
are limited
What happens when you bump into a brick wall? 
You can go back to scripting, of  course—but you 
know that’s not the path. 
Developers usually want way more standard actions 
or—even better—the ability to create their own 
actions.
That’s what custom tags are for. Instead of  saying 
<jsp:setProperty>, you want to do something like 
<my:doCustomThing>. And you can.
But it’s not that easy to create the support code 
that goes behind the tag. For the JSP page creator, 
custom tags are much easier to use than scripting. 
For the Java programmer, however, building the 
custom tag handler (the Java code invoked when a 
JSP uses the tag) is tougher.
Fortunately, there’s a standard library of  custom 
tags known as the JSP Standard Tag Library 
(JSTL 1.1). Given that your JSP shouldn’t be doing 
a bunch of  business logic anyway, you might find 
that the JSTL (combined with EL) is all you’ll ever 
need. Still, there could be times when you need 
something from, say, a custom tag library developed 
specifically for your company. 
In this chapter, you’ll learn how to use the core 
JSTL tags, as well as custom tags from other 
libraries. In the next chapter, we’ll learn how to 
actually build the classes that handle calls to the 
custom tags, so that you can develop your own. 
There’s got to be a 
way to iterate through a 
collection in a JSP...without 
scripting. I want to show 
one element per row in 
a table...

442 
chapter 9
The case of the disappearing HTML (reprised)
On page 384, you saw how EL sends the raw string of  content directly 
to the response stream:
<div class='tipBox'>
  <b>Tip of the Day:</b> <br/> <br/>
  ${pageContent.currentTip}
</div>
http://localhost:8080/testJSP1/Tester.do
Tip of the Day: 
<b></b> tags make things bold!
What we got
What we want
<div class='tipBox'>
  <b>Tip of the Day:</b> <br/>
  <b></b> tags make things bold!
</div>
<div class='tipBox'>
  <b>Tip of the Day:</b> <br/> <br/>
  &lt;b&gt;&lt;/b&gt; tags make things bold!
</div>
http://localhost:8080/testJSP1/Tester.do
Tip of the Day: 
tags make things bold!
Rendered as
Rendered as
What we need is a way to convert those angle brackets into 
something the browser will render as angle brackets, and there 
are two ways to do this. Both use a static Java method that 
converts HTML special characters into their entity format:
<div class='tipBox'>
  <b>Tip of the Day:</b> <br/> <br/>
  ${fn:convEntity(pageContent.currentTip)}
</div>
<div class='tipBox'>
  <b>Tip of the Day:</b> <br/> <br/>
  ${pageContent.convertedCurrentTip}
</div>
Use a Java helper method
Use an EL function
public String getConvertedCurrentTip() {
  return HTML.convEntity(getCurrentTip());
}
Remember this? The <b></b> 
tags didn’t show up as text, but 
got rendered as an empty space 
that was bolded.
This comes out 
as an “invisible” 
bolded empty space.
&lt; is rendered as “<”, and 
&gt; is rendered as “>”.
Here’s the 
helper method 
to make this 
one work.
where’s my html?

using JSTL
you are here 
443
There’s a better way: use the <c:out> tag
Whichever approach you use, it’s a bit unclear exactly what’s 
going on... and you may have to write that helper method for 
all your servlets. Luckily, there’s a better way. The <c:out> 
tag is perfect for the job. Here’s how conversion works:
<div class='tipBox'>
  <b>Tip of the Day:</b> <br/> <br/>
  <c:out value='${pageContent.currentTip}' escapeXml='true' />
</div>
<div class='tipBox'>
  <b>Tip of the Day:</b> <br/> <br/>
  <c:out value='${pageContent.rawHTML}' escapeXml='false' />
</div>
<div class='tipBox'>
  <b>Tip of the Day:</b> <br/> <br/>
  <c:out value='${pageContent.currentTip}' />
</div>
You can explicitly declare the conversion of XML entities
If you know or think you might run into some XML entities 
that need to be displayed, and not just rendered, you can use the 
escapeXml attribute on c:out. Setting this to true means that any 
XML will be converted to something the web browser will render, 
angle brackets and all:
You can explicitly declare NO conversion of XML entities
Sometimes, you want just the opposite behavior. Maybe you’re 
building a page that takes content, and you want to display that 
content with HTML formatting. In that case, you can turn off 
XML conversion:
This is equivalent to what 
we had before... any HTML 
tags are evaluated, not 
displayed as text.
Your HTML is treated 
as XHTML, which in turn 
is XML... so this affects 
HTML characters, too.
Conversion happens by default
The escapeXml attribute defaults to true, so you can leave it out if 
you want. A c:out tag without an escapeXML attribute is just the 
same as a c:out tag with escapeXML set to “true.”
This is actually identical in 
functionality to this.

444 
chapter 9
there are no
Dumb Questions
Q: Which HTML special characters are converted?
A: It turns out this conversion is rather simple. There are only five 
characters that require escaping: <, >, &, and the two quote symbols,
single and double ". All of these are converted into the equivalent HTML 
entities. For example, < becomes &lt;, & becomes &amp;, and so on.
Q: Last month my company hired a web consultant to audit our 
web application. She noticed that we were using EL everywhere to 
output strings entered by users. She said this was a security risk and 
recommended we output all user strings using the c:out tag. What gives?
A: Your consultant was right. The security risk she is referring to is called 
cross-site hacking or cross-site scripting. The attack is sent from one user 
to another user’s web browser using your webapp as the delivery mechanism.
Character
Character Entity Code
<
&lt;
>
&gt;
&
&amp;
'
&#039;
"
&#034;
Q: What happens if value of the EL expression is null?
A: Good question. You know an EL expression ${evalsToNull} 
generates an empty string in the response output, and so will 
<c:out value=”${evalsToNull}”/>.
But that’s not the end of the story with c:out. The c:out tag is smart, and 
it recognizes when the value is null and can perform a special action. That 
action is to provide a default value...
User1 
“cracker”
User2 
“innocent”
The cracker enters a comment field in your webapp, 
which is stored in the database. The cracker includes 
viral JavaScript code in the comment.
The innocent user views the cracker’s comment, 
but the text the cracker entered also includes 
JavaScript code that compromises user2’s system!
Your webapp
Using the c:out tag to render 
the text of users prevents 	
cross-site hacking of this form 
by displaying the <script> tags 
and the JS code in user2’s web 
browser. This prevents the JS 
code from being interpreted by 
the browser, foils the attack 
from user1.
escaping html

using JSTL
you are here 
445
Null values are rendered as blank text
Suppose you have a page that welcomes the user by saying 
“Hello <user>.” But lately, users haven’t been logging in, and 
the output looks pretty odd:
EL prints nothing if user is null
<b>Hello ${user}.</b>
A JSP expression tag prints nothing if user is null
<b>Hello <%= user %>.</b>
<c:out> provides a default attribute
<b>Hello <c:out value=’${user}’ default=’guest’ />.</b>
Renders as
<b>Hello .</b>
Renders as
<b>Hello .</b>
Renders as
<b>Hello guest.</b>
Suppose you want to show these anonymous users a message 
that says, “Hello guest.” This is a perfect place to use a 
default value with the c:out tag. Just add a default 
attribute, and provide the value you want to print if  your 
expression evaluates to null:
Since ${user} and <%= user %> 
evaluate to null, you get an empty 
space between “Hello” and the “.” 
Pretty strange looking...
This value is output if the value 
attribute evaluates to null.
Set a default value with the default attribute
Now the default value is 
inserted... perfect.
Or you can do it this way:
<b>Hello <c:out value=’${user}’>guest</c:out></b>

446 
chapter 9
Looping without scripting
Imagine you want something that loops over a collection (say, an array of 
catalog items), pulls out one element at a time, and prints that element in a 
dynamically-generated table row. You can’t possibly hard-code the complete 
table—you have no idea how many rows there will be at runtime, and of 
course you don’t know the values in the collection. The <c:forEach> tag is 
the answer. This does require a very slight knowledge of  HTML tables, but 
we’ve included notes here for those who aren’t familiar with the topic.
By the way, on the exam you are expected to know how to use <c:forEach> 
with tables. 
the <c:forEach> tag
...
String[] movieList = {“Amelie”, “Return of the King”, “Mean Girls”};
request.setAttribute(“movieList”, movieList);
...
Servlet code
Make a String[] of movie names, and 
set the array as a request attribute.
http://localhost:8080/testJSP1/Tester.do
Movie list:
Amelie
Return of the King
Mean Girls
What you want
<table>
<% String[] items = (String[]) request.getAttribute(“movieList”);
   String var=null;
   for (int i = 0; i < items.length; i++) {
      var = items[i];
 %>
  <tr><td><%= var %></td></tr>
  <% } %>
</table>
In a JSP, with scripting

using JSTL
you are here 
447
<c:forEach> 
The <c:forEach> tag from the JSTL is perfect for this—it gives you 
a simple way to iterate over arrays and collections.
<%@ taglib prefix=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<html><body>   
<strong> Movie list:</strong>
<br><br>
<table>
  <c:forEach var=”movie” items=”${movieList}” >
     <tr>
        <td>${movie}</td>  
     </tr>
  </c:forEach>
</table>
</body></html>
JSP code
Loops through the entire array (the 
“movieList” attribute) and prints each 
element in a new row. (This table has 
just one column per row.)
(We’ll talk about this taglib 
directive later in the chapter.)
Crash refresher on HTML tables
<table>
</table>
<td>data for this cell</td>
<td>data for this cell</td>
<td>data for this cell</td>
<td>data for this cell</td>
<td>data for this cell</td>
<td>data for this cell</td>
<td>data for this cell</td>
<td>data for this cell</td>
<td>data for this cell</td>
<tr>
<tr>
<tr>
</tr>
</tr>
</tr>
<tr> stands for Table Row.
<td> stands for Table Data. 
Tables are pretty straightforward. They’ve got cells, arranged into rows 
and columns, and the data goes inside the cells. The trick is telling the 
table how many rows and columns you want.
Rows are defined with the <tr> (Table Row) tag, and columns are 
defined with the <td> (Table Data) tag. The number of  rows comes 
from the number of  <tr> tags, and the number of  columns comes from 
the number of  <td> tags you put inside the <tr></tr> tags.
Data to print/display goes only inside the <td> </td> tags!

448 
chapter 9
  <c:forEach var=”movie” items=”${movieList}” >
     
      ${movie} 
    
  </c:forEach>
The variable that holds each ELEMENT in the 
collection. Its value changes with each iteration.
The actual thing to loop over 
(array, Collection, Map, or a 
comma-delimited String).
The <c:forEach> tag
String[] items = (String[]) request.getAttribute(“movieList”);
for (int i = 0; i < items.length; i++) {
   String movie = items[i];
   out.println(movie);
}
it
= 
Deconstructing <c:forEach>
The <c:forEach> tag maps nicely into a for loop—the tag repeats the body of 
the tag for each element in the collection (and we use “collection” here to mean 
either an array or Collection or Map or comma-delimited String). 
The key feature is that the tag assigns each element in the collection to the 
variable you declare with the var attribute.
<table>
  <c:forEach var=”movie” items=”${movieList}” varStatus=”movieLoopCount” >
     <tr> 
 
  <td>Count: ${movieLoopCount.count}</td>
     </tr>
     <tr>
         <td>${movie} <br><br></td>  
     </tr>
  </c:forEach>
</table>
Getting a loop counter with the optional varStatus attribute
varStatus makes a new variable 
that holds an instance of javax.
servlet.jsp.jstl.core.LoopTagStatus. 
http://localhost:8080/testJSP1/Tester.do
Count: 1
Amelie 
Count: 2
Return of the King 
Count: 3
Mean Girls
Helpfully, the 
LoopTagStatus class has 
a count property that 
gives you the current value 
of the iteration counter. 
(Like the “i” in a for 
loop.)
the <c:forEach> tag
E
for 
trin
intln(m

using JSTL
you are here 
449
You can even nest <c:forEach> tags
What if  you have something like a collection of  collections? An array of 
arrays? You can nest <c:forEach> tags for more complex table structures. 
In this example, we put String arrays into an ArrayList, then make the 
ArrayList a request attribute. The JSP has to loop through the ArrayList 
to get each String array, then loop through each String array to print the 
actual elements of  the array.
String[] movies1 = {“Matrix Revolutions”, “Kill Bill”, “Boondock Saints”};
String[] movies2 = {“Amelie”, “Return of the King”, “Mean Girls”};
java.util.List movieList = new java.util.ArrayList();
movieList.add(movies1);
movieList.add(movies2);
request.setAttribute(“movies”, movieList);
Servlet code
<table> 
 
  <c:forEach  var=”listElement”  items=”${movies}” >
 
  
      <c:forEach var=”movie” items=”${listElement}” >   
        <tr>
          <td>${movie}</td>  
        </tr>       
      </c:forEach>
  </c:forEach>
</table>
JSP code
outer 
loop
inner 
loop
The ArrayList request attribute
One of the String arrays 
that was assigned to the 
outer loop’s “var” attribute.
http://localhost:8080/testJSP1/Tester.do
Matrix Revolutions
Kill Bill
Boondock Saints
Amelie
Return of the King
Mean Girls
From the first String[]
From the second String[]

450 
chapter 9
there are no
Dumb Questions
Q: How did you know that the “varStatus” attri-
bute was an instance of whatever that was, and how 
did you know that it has a “count” property?
A: Ahhhh... we looked it up. 
It’s all there in the JSTL 1.1 spec. If you don’t have the 
spec already, go download it NOW (the intro of this 
book tells you where to get the specs covered on the 
exam).  It is THE reference for all the tags in the JSTL, 
and tells you all the possible attributes, whether they’re 
optional or required, the attribute type, and any other 
details on how you use the tag. 
Everything you need to know about these tags  (for the 
exam) is in this chapter. But some of the tags have a few 
more options than we cover here, so you might want to 
have a look in the spec. 
Q: Since you know more than you’re telling 
about this tag... does it give you a way to change the 
iteration steps? In a real Java for loop, I don’t have to 
do i++, I can do i +=3, for example, to get every third 
element instead of every element...
A: Not a problem. The <c:forEach> tag has optional 
attributes for begin, end (in case you want to iterate 
over a subset of the collection), and step if you want to 
skip over some elements.
Q: Is the “c” in <c:forEach>  a required prefi x?
A: Well, some prefix is required, of course; all tags 
and EL functions must have a prefix to give the Contain-
er the namespace for that tag or function name. But you 
don’t HAVE to name the prefix “c”.  It’s just the standard 
convention for the set of tags in JSTL known as “core”. 
We  recommend using something other than “c” as a 
prefix, whenever you want to totally confuse the people 
you work with.
u
Watch it!
That’s right, tag scope. No this isn’t a full-ﬂ edged scope 
to which you can bind attributes like the other four—
page, request, session, and application. Tag scope 
simply means that the variable was declared INSIDE a 
loop.
And you already know what that means in Java terms. 
You’ll see that for most other tags, a variable set with 
a “var” attribute will be visible to whatever scope you 
specifi cally set (using an optional “scope” attribute), OR, 
the variable will default to page scope.
So don’t be fooled by code that tries to use the variable 
somewhere BELOW the end of the 
<c:forEach> body tag!
<c:forEach var=”foo” items=”${fooList}” > 
     ${foo}   
</c:forEach>
${foo}   
It might help to think of tag scope as being just like 
block scope in plain old Java code. An example is the 
for loop you all know and love:
for (int i = 0; i < items.length; i++) {
  x + i;
}
doSomething(i);
The “var” variable is 
scoped to ONLY the tag!
OK
NO!! The “foo” variable is 
out of scope! 
g(i);
i)
{foo}
NO!! The “i” variable 
is out of scope! 
the <c:forEach> tag

using JSTL
you are here 
451
Doing a conditional include with  <c:if>
Imagine you have a page where users can view comments from other users. And 
imagine that members can also post comments, but non-member guests cannot. 
You want everyone to get the same page, but you want members to “see” more 
things on the page. You want a conditional <jsp:include > and of  course, you don’t 
want to do it with scripting!
What members see:
http://localhost:8080/testJSP1/Tester.do
http://localhost:8080/testJSP1/Tester.do
We don’t want the “Add...” parts 
to appear if the client is NOT a 
member.
What NON-members see:
<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<html><body>
<strong>Member Comments</strong> <br>
<hr>${commentList}<hr>
<c:if  test=”${userType eq ‘member’ }” >
   <jsp:include page=”inputComments.jsp”/> 
</c:if>
</body></html>
JSP code
Assume a servlet somewhere set 
the userType attribute, based on 
the user’s login information.
Yes, those are SINGLE 
quotes around ‘member’. 
Don’t forget that you can 
use EITHER double or single 
quotes in your tags and EL.
Included page (“inputComments.jsp”)
<form action=”commentsProcess.jsp” method=”post”>
Add your comment: <br>
<textarea name=”input” cols=”40” rows=”10”></textarea> <br>
<input name=”commentSubmit” type=”button” value=”Add Comment”>
</form>

452 
chapter 9
But what if you need an else?
What if  you want to do one thing if  the condition is true, and 
a different thing if  the condition is false?  In other words, what 
if  we want to show either one thing or the other, but nobody will 
see both? The <c:if> on the previous page worked fine because 
the logic was: everybody sees the first part, and then if  the test 
condition is true, show a little extra.
But now imagine this scenario: you have a car sales web site, and 
you want to customize the headline that shows up on each 
page, based on a user attribute set up earlier in the session.  
Most of  the page is the same regardless of  the user, but each user 
sees a customized headline —one that best fits the user’s personal 
motivation for buying. (We are, after all, trying to sell him a car 
and become obscenely wealthy.) At the beginning of  the session, a 
form asks the user to choose what’s most important...
http://localhost:8080/testJSP1/Tester.do
Now you can stop even if you do 
drive insanely fast.
The Brakes 
 Our advanced anti-lock brake system (ABS) 
is engineered to give you the ability to steer 
even as you’re stopping. We have the best 
speed sensors of any car this size. 
http://localhost:8080/testJSP1/Tester.do
When buying a car, what is most 
important to you?
The user’s page is 
customized a little, 
to fit his interests...
At the beginning of the session:
Somewhere later in the session:
Imagine a web site for a 
car company. The first 
page asks the user what he 
feels is most important.
Just like a good salesman, 
the pages that talk about 
features of the car will 
customize the presentation 
based on the user’s 
preference, so that each 
feature of the car looks 
like it was made with HIS 
personal needs in mind...
the <c:if> tag

using JSTL
you are here 
453
<html><body><h2>
<% String pref = (String) session.getAttribute(“userPref”);
   if (pref.equals(“performance”)) {
       out.println(“Now you can stop even if you <em>do</em> drive insanely fast.”);
   } else if (pref.equals(“safety”)) {
       out.println(“Our brakes won’t lock up, no matter how bad a driver you are. “);
   } else if (pref.equals(“maintenance”)) {
       out.println(“ Lost your tech job? No problem--you won’t have to service these  
brakes for at least three years.”);
   } else {
       // userPref doesn’t match those, so print the default headline
       out.println(“Our brakes are the best.”);
  } %>
</h2><strong>The Brakes</strong> <br>
Our advanced anti-lock brake system (ABS) is engineered to give you the ability to 
steer even as you’re stopping. We have the 
best speed sensors of any car this size. <br>
</body></html>
JSP with scripting, and it does what we want
The <c:if> tag won’t work for this
There’s no way to do exactly what we want using the <c:if> tag, because it 
doesn’t have an “else”. We can almost do it, using something like:
<c:if test=”${userPref==’performance’}” >
    Now you can stop even if you <em>do</em> drive insanely fast..
</c:if>
<c:if test=”${userPref==’safety’}” >
    Our brakes won’t lock up no matter how bad a driver you are.
</c:if>
<c:if test=”${userPref==’maintenance’}” >
    Lost your tech job? No problem--you won’t have to service these brakes
    for at least three years. 
</c:if>
<!-- continue with the rest of the page that EVERYONE should see  -->
JSP using <c:if>, but it doesn’t work right...
But what happens if userPref doesn’t match any of these? 
There’s no way to specify the default headline?
The <c:if> won’t work unless we’re CERTAIN that we’ll never need a default 
value. What we really need is kind of  an if/else construct:*
*Yes, we agree with you—there’s nearly always 
a better approach than chained if tests. But 
you’re just gonna have to suspend disbelief long 
enough to learn how this all works....
Assume “userPref” was set 
somewhere earlier in the session.

454 
chapter 9
The  <c:choose> tag and its partners
 <c:when> and  <c:otherwise>
<c:choose> 
    <c:when test=”${userPref == ‘performance’}”>
         Now you can stop even if you <em>do</em> drive insanely fast. 
    </c:when> 
    <c:when test=”${userPref == ‘safety’}”> 
         Our brakes will never lock up, no matter how bad a driver you are. 
    </c:when> 
   
    <c:when test=”${userPref == ‘maintenance’}”> 
         Lost your tech job? No problem--you won’t have to service these brakes 
for at least three years. 
    </c:when> 
  
    <c:otherwise> 
         Our brakes are the best. 
    </c:otherwise> 
</c:choose>
<!-- the rest of the page goes here... -->
I will CHOOSE you 
WHEN you are ready to give 
up your obsession with Pilates. 
OTHERWISE, I’ll have to go 
with Kenny for the synchronized 
swim team.
No more than ONE of these four bodies 
(including the <c:otherwise>) will run.
(It’s not like a switch statement--
there’s no fall-through.)
If none of the <c:when> tests are true, 
the <c:otherwise> runs as a default.
the <c:choose> tag
Note: the <c:choose> tag is NOT 
required to have a <c:otherwise> tag.

using JSTL
you are here 
455
The  <c:set> tag... so much cooler than <jsp:setProperty>
The <jsp:setProperty> tag can do only one thing—set the property of  a bean. 
But what if  you want to set a value in a Map? What if  you want to make a new entry in a Map? 
Or what if  you simply want to create a new request-scoped attribute?
You get all that with <c:set>, but you have to learn a few simple rules. Set comes in two
flavors: var and target. The var version is for setting attribute variables, the target version is for 
setting bean properties or Map values. Each of  the two flavors comes in two variations: with
or without a body. The <c:set> body is just another way to put in the value.
Setting an attribute variable var with <c:set>
With NO body
<c:set var=”userLevel” scope=”session” value=”Cowboy” />
If there’s NOT a session-scoped attribute named “userLevel”, 
this tag creates one (assuming the value attribute is not null).
The scope is optional; var is required. 
You MUST specify a value, but you 
have a choice between putting in a 
value attribute or putting the value 
in the tag body (see #2 below).
value doesn’t have to be a String... 
WITH a body
<c:set var=”userLevel” scope=”session”  >
     Sheriff, Bartender, Cowgirl
</c:set>
The body is evaluated and used 
as the value of the variable. 
1
2
<c:set var=”Fido” value=”${person.dog}” />
Remember, no slash here 
when the tag has a body.
If ${person.dog} evaluates 
to a Dog object, then 
“Fido” is of type Dog.
Imagine that for the value (either in the body of the tag or using the value at-
tribute), you use ${person.dog}.  If ${person.dog} evaluates to null (meaning 
there is no person, or person’s dog property is null, then if there IS a variable 
attribute with a name “Fido”, that attribute will be removed! (If you don’t specify 
a scope, it will start looking at page, then request, etc.). This happens even if 
the “Fido” attribute was originally set as a String, or a Duck, or a Broccoli.
If the value evaluates to null, the variable will be 
REMOVED! That’s right, removed.

456 
chapter 9
Using <c:set> with beans and Maps
This flavor of  <c:set> (with its two variations—with and without a body) 
works for only two things: bean properties and Map values. That’s it. 
You can’t use it to add things to lists or arrays. It’s simple—you give it 
the object (a bean or Map), the property/key name, and the value. 
Setting a target property or value with <c:set>
With NO body
<c:set target=”${PetMap}” property=”dogName” value=”Clover” />
target must NOT be null!! 
If target is a Map, set the 
value of a key named “dogName”.
1
If target is a bean, set the value 
of the property “dogName”.
WITH a body
2
<c:set target=”${person}” property=”name”  >
  ${foo.name}
</c:set>
Don’t put the “id” name 
of the attribute here!
No slash... watch for 
this on the exam.
The body can be a 
String or expression.
This is a huge gotcha. In the <c:set> tag, the “target” attribute in the tag seems like it 
should work just like “id” in the <jsp:useBean>.  Even the “var” attribute in the other 
version of <c:set> takes a String literal that represents the name of the scoped attribute. 
BUT... it doesn’t work this way with “target”! 
With the “target” attribute, you do NOT type in the String literal that represents the name 
under which the attribute was bound to the page, scope, etc. No, the “target” attribute 
needs a value that resolves to the REAL THING. That means an EL expression or a 
scripting expression (<%=  %>), or something we haven’t seen yet: <jsp:attribute>.
The “target” must evaluate to the OBJECT! You don’t 
type in the String “id” name of the bean or Map attribute!
the <c:set> tag

using JSTL
you are here 
457
there are no
Dumb Questions
Q: Why would I use the body version 
instead of the no-body version? It looks 
like they both do exactly the same thing.
A: That’s because they DO... do the 
same thing. The body version is just for 
convenience when you want more room for 
the value. It might be a long and complex 
expression, for example, and putting it in 
the body makes it easier to read.
Q: If I don’t specify a scope, does that 
mean it will find attributes that are ONLY 
within page scope, or does it do a search 
beginning with page scope?
A: If you don’t use the optional “scope” 
attribute in the tag, then the tag will only 
look in the page scope space.  Sorry, you 
will just have to know exactly which scope 
you are dealing with.
Q: Why is the word  “attribute” so 
overloaded? It means both “the things 
that go inside tags” and “the things that 
are bound to objects in one of the four 
scopes.”  So you end up with an attribute 
of a tag whose value is an attribute of the 
page and...
A: We hear you. But that’s what they’re 
called. Once again, nobody asked US. 
We would have called the bound objects 
something like, oh, “bound objects”.
Key points and gotchas with <c:set>
Yes, <c:set> is easy to use, but there are a few deal-breakers 
you have to remember...
é	 You can never have BOTH the “var” and “target” 
attributes in a <c:set>.
é	 “Scope” is optional, but if you don’t use it the default 
is page scope.
é	 If the “value”  is null, the attribute named by “var”  
will be removed!
é	 If the attribute named by “var” does not exist, it’ll be 
created, but only if  “value” is not null.
é	 If the “target” expression is null, the Container 
throws an exception.
é	 The “target” is for putting in an expression that 
resolves to the Real Object. If you put in a String 
literal that represents the “id” name of the bean or 
Map, it won’t work. In other words, “target” is not for 
the attribute name of the bean or Map—it’s for the 
actual attribute object.
é	 If the “target” expression is not a Map or a bean, the 
Container throws an exception.
é	 If the “target” expression is a bean, but the bean 
does not have a property that matches “property”, 
the Container throws an exception. Remember that 
the EL expression ${bean.notAProperty} will also 
throw an exception.

458 
chapter 9
 <c:remove> just makes sense
We agree with Dick—using a set to remove 
something feels wrong. (But remember, set does a 
remove only when you pass in a null value.)
The <c:remove> tag is intuitive and simple:
I can’t believe you have 
to use <c:set> to remove an 
attribute. That feels wrong.
<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<html><body>
   <c:set var=”userStatus” scope=”request” value=”Brilliant” />
   userStatus: ${userStatus} <br>
   <c:remove var=”userStatus” scope=”request” />
   userStatus is now: ${userStatus}
</body></html>
The scope is optional, but if you leave 
it out then the attribute is removed 
from ALL scopes.
http://localhost:8080/testJSP1/Tester.do
userStatus: Brilliant
userStatus is now:
The value of userStatus was removed, so 
nothing prints when the EL expression 
is used AFTER the remove.
The var attribute 
MUST be a String 
literal! It can’t be 
an expression!!
the <c:remove> tag

using JSTL
you are here 
459
<c:forEach var=”movie” items=”${movieList}”                     =”foo”  > 
   ${movie}    
</c:forEach>
    
<c:if          =”${userPref==’safety’}” >
    Maybe you should just walk...
</c:if>
<c:choose> 
    <c:                    =”${userPref == ‘performance’}”>
         Now you can stop even if you <em>do</em> drive insanely fast. 
    </c:          > 
    <c:                         > 
         Our brakes are the best. 
    </c:                        > 
</c:choose>
<c:set var=”userLevel” scope=”session”            =”foo” />
Sharpen your pencil
Test your Tag memory
If you’re studying for the exam, don’t skip this one.
The answers are at the end of the chapter.
1
Fill in the name of the optional attribute.
2
    
Fill in the missing attribute name.
3
Fill in the missing attribute name.
    
    
    
    
    
    
4
Fill in the missing tag names (two different tag types), and the missing attribute name.

460 
chapter 9
With  <c:import>, there are now THREE 
ways to include content
So far, we’ve used two different ways to add content from another 
resource into a JSP. But there’s yet another way,  using JSTL.
The include directive
<%@ include fi le=”Header.html” %>
1
The <jsp:include> standard action
<jsp:include page=”Header.jsp” />
2
The <c:import> JSTL tag
<c:import url=”http://www.wickedlysmart.com/skyler/horse.html” />
3
Static: adds the content from the value of  the file 
attribute to the current page at translation time. 
Dynamic: adds the content from the value of  the 
page attribute to the current page at request time.
Dynamic: adds the content from the value of  the 
URL attribute to the current page, at request time. 
It works a lot like <jsp:include>, but it’s more 
powerful and flexible.
Unlike the other two includes, 
the <c:import> url can be from 
outside the web Container!
Each of the three mechanisms for including content from another resource into your JSP uses a 
different word for the attribute. The include directive uses fi le, the <jsp:include> uses page, and 
the JSTL <c:import> tag uses url. This makes sense, when you think about it... but you do have 
to memorize all three. The directive was originally intended for static layout templates, like HTML 
headers. In other words, a “fi le”. The <jsp:include> was intended more for dynamic content 
coming from JSPs, so they named the attribute “page” to reﬂ ect that. The attribute for <c:import> 
is named for exactly what you give it—a URL! Remember, the fi rst two “includes” can’t go outside 
the current Container, but <c:import> can. 
They all have different attribute names! 
(And watch out for “include” vs. “import”)
Do NOT confuse <c:import> (a type of 
include) with the “import” attribute of 
the page directive (a way to put a Java 
import statement in the generated servlet).
the <c:import> tag

using JSTL
you are here 
461
<c:import> can reach OUTSIDE the web app
With <jsp:include> or the include directive, you can include only pages that are part of  the 
current web app. But now with <c:import>, you have the option to pull in content from 
outside the Container. This simple example shows a JSP on Server A importing the contents 
of  a URL on Server B. At request time, the HTML chunk in the imported file is added to 
the JSP. The imported chunk uses a reference to an image that is also on Server B.
<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<html><body>
  <c:import url=”http://www.wickedlysmart.com/skyler/horse.html” />
  <br>
  This is my horse.
</body></html>
The JSP
<img src=”http://www.wickedlysmart.com/skyler/horse.gif”>
The imported fi le 
B
A
Server A, the JSP doing the import
Server B, the imported content
http://localhost:8080/testJSP1/Tester.do
This is my horse.
The response
The horse is coming 
from a completely 
different web server 
than the page that 
contains the text.
“horse.html” and “horse.gif” are 
both on Server B, a completely 
different web server from the 
one with the JSP. 
(Don’t forget: as with other include mechanisms, the thing 
you import should be an HTML fragment and NOT a 
complete page with opening and closing <html><body> tags.)

462 
chapter 9
Customizing the thing you include
Remember in the previous chapter when we did a <jsp:include> to 
put in the layout header (a graphic with some text), but we wanted to 
customize the subtitle used in the header? We used <jsp:param> to 
make that happen... 
The JSP with the <jsp:include>
<html><body>
<jsp:include page=”Header.jsp”>
   <jsp:param name=”subTitle” value=”We take the sting out of SOAP.” />
</jsp:include>
<br>
<em>Welcome to our Web Services Support Group.</em> <br><br>
Contact us at: ${initParam.mainEmail}
</body></html>
We take the sting out of SOAP.
http://localhost:8080/tests/Contact.jsp
Welcome to our Web Services Support Group.
Contact us at: likewecare@wickedlysmart.com
2
1
<img src=”images/Web-Services.jpg” > <br>
<em><strong>${param.subTitle}</strong></em> 
<br>
1
The included fi le (“Header.jsp”)
2
S
E
vi
We made the subtitle “We take 
the sting...” available to the 
header JSP by setting it as a 
new request parameter.
the <c:import> tag

using JSTL
you are here 
463
Doing the same thing with  <c:param>
Here we accomplish the same thing we did on the previous page, but 
using a combination of  <c:import> and <c:param>. You’ll see that the 
structure is virtually identical to the one we used with standard actions.
The JSP with the <jsp:import>
<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<html><body>
<c:import url=”Header.jsp” >
   <c:param name=”subTitle” value=”We take the sting out of SOAP.” />
</c:import>
<br>
<em>Welcome to our Web Services Support Group.</em> <br><br>
Contact us at: ${initParam.mainEmail}
</body></html>
<img src=”images/Web-Services.jpg” > <br>
<em><strong>${param.subTitle}</strong></em> 
<br>
1
The included fi le (“Header.jsp”)
2
ce
in
c
This page doesn’t change at all. It 
doesn’t care HOW the parameter got 
there, as long as it’s there.
No slash, because NOW the 
tag has a body...

464 
chapter 9
Sorry to change the 
subject here... but I just 
noticed a HUGE problem with 
JSPs! How can you guarantee 
session tracking from a JSP... 
without using scripting?
Session tracking 
happens automatically with 
JSPs, unless you explicitly disable 
it with a page directive that has 
a session attribute that says 
session=”false”.
He missed the point... I said 
“guarantee”. My real question is--if 
the client doesn’t support cookies, how 
can I get URL rewriting to happen? How 
can I get the session ID added to 
the URLs  in my JSP?
Ahhh... he obviously 
doesn’t know about the 
<c:url> tag. It does URL 
rewriting automatically.
URL rewriting in a JSP

using JSTL
you are here 
465
<c:url> for all your hyperlink needs
Remember way back in our old servlet days when we wanted to use a session? First 
we had to get the session (either the existing one or a new one). At that point, the 
Container knows that it’s supposed to associate the client from this request with a 
particular session ID. The Container wants to use a cookie—it wants to include a 
unique cookie with the response, and then the client will send that cookie back with 
each subsequent request. Except one problem... the client might have a browser with 
cookies disabled. Then what?
The Container will, automatically, fall back to URL rewriting if  it doesn’t get a cookie 
from the client. But with servlets, you STILL have to encode your URLs. In other 
words, you still have to tell the Container to “append the jsessionid to the end of  this 
particular URL...” for each URL where it matters. Well, you can do the same thing 
from a JSP, using the <c:url> tag.
URL rewriting from a servlet
public void doGet(HttpServletRequest request, HttpServletResponse response) 
                                               throws IOException, ServletException {
    response.setContentType(“text/html”);
    PrintWriter out = response.getWriter();
    HttpSession session = request.getSession();
    out.println(“<html><body>”);
    out.println(“<a href=\”” + response.encodeURL(“/BeerTest.do”) + “\”>click</a>”);
    out.println(“</body></html>”);
}
Add the extra session ID info to this URL.
URL rewriting from a JSP
<%@ taglib prefix=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<html><body>
This is a hyperlink with URL rewriting enabled.
<a href=”<c:url value=’/inputComments.jsp’ />”>Click here</a>
</body></html>
This adds the jsessionid to the end of the 
“value” relative URL (if cookies are disabled).

466 
chapter 9
What if the URL needs encoding?
Remember that in an HTTP GET request, the parameters are appended to the URL as a query string. 
For example, if  a form on an HTML page has two text fields—first name and last name—the request 
URL will stick the parameter names and values on to the end of  the request URL. But...an HTTP 
request won’t work correctly if  it contains unsafe characters (although most modern browsers will try to 
compensate for this).
If  you’re a web developer, this is old news, but if  you’re new to web development, you need to know 
that URLs often need to be encoded. URL encoding means replacing the unsafe/reserved characters 
with other characters, and then the whole thing is decoded again on the server side. For example, 
spaces aren’t allowed in a URL, but you can substitute a plus sign “+” for the space. The problem is, 
<c:url> does NOT automatically encode your URLs!
Using <c:url> with a query string
<c:set var=”last” value=”Hidden Cursor” />
<c:set var=”fi rst” value=”Crouching Pixels”/>
<c:url value=”/inputComments.jsp?fi rst=${fi rst}&last=${last}” var=”inputURL” />
The URL using params is: ${inputURL} <br>
Remember, the <c:url> tag does URL rewriting, but not URL encoding!
http://localhost:8080/tests/risky.jsp
The URL using params is: /myApp/inputComments.
jsp?ﬁ rst=Crouching Pixels&last=Hidden Cursor 
Uh-oh... you’re not supposed to have 
spaces in a URL!
Yikes! Query string parameters have 
to be encoded... spaces, for example, 
must be replaced with a plus “+” sign.
Use the optional “var” 
attribute when you want 
access to this value later...
Using <c:param> in the body of <c:url>
This solves our problem! Now we get both URL rewriting and URL encoding.
<c:url value=”/inputComments.jsp” var=”inputURL” >
   <c:param name=”fi rstName” value=”${fi rst}” />
   <c:param name=”lastName” value=”${last}” />
</c:url>
no slash
Now the URL looks like this:
/myApp/inputComments.jsp?fi rstName=Crouching+Pixels&lastName=Hidden+Cursor 
Now we’re safe, because <c:param> 
takes care of the encoding!
the <c:URL> tag

using JSTL
you are here 
467
You do NOT want your clients to see this:
I’m interrupting this JSTL 
talk for a few moments to 
talk about your error-handling. 
We’re about to do something that 
might cause an exception...

468 
chapter 9
Make your own  error pages
The guy surfing your site doesn’t want to see your stack trace. And he’s not too thrilled 
to get a standard “404 Not Found”, either. 
You can’t prevent all errors, of  course, but you can at least give the user a friendlier 
(and more attractive) error response page. You can design a custom page to handle 
errors, then use the page directive to configure it.
The designated ERROR page (“errorPage.jsp”)
<%@ page   isErrorPage=”true” %>
<html><body>
<strong>Bummer.</strong>
<img src=”images/bummerGuy.jpg”>
</body></html>
The BAD page that throws an exception (“badPage.jsp”)
<%@ page  errorPage=”errorPage.jsp” %>
<html><body>
About to be bad...
<% int x = 10/0; %>
</body></html>
What happens when you request “badPage.jsp”
Bummer.
http://localhost:8080/tests/badPage.jsp
Confirms for the Container, “Yes, this IS 
an officially-designated error page.”
Tells the Container, “If something 
goes wrong here, forward the 
request to errorPage.jsp”.
The REQUEST was for 
“badPage.jsp”, but that page 
threw an exception, so the 
RESPONSE came from 
“errorPage.jsp”.
error pages

using JSTL
you are here 
469
She doesn’t know about the <error-page> DD tag.
You can declare error pages in the DD for the entire web app, and you 
can even configure different error pages for different exception types, or 
HTTP error code types (404, 500, etc.). 
The Container uses <error-page> configuration in the DD as the 
default, but if  a JSP has an explicit errorPage page directive, the 
Container uses the directive.
It will take me FOREVER to put 
page directives in all my JSPs, to 
specify the error page to use. And 
what if I want a different error page 
depending on the error? If only there 
were a way to conﬁ gure error 
pages for the whole web app...

470 
chapter 9
Configuring error pages in the DD
You can declare error pages in the DD based on either the <exception-type> or 
the HTTP status <error-code> number. That way you can show the client different 
error pages specific to the type of  the problem that generated the error.
<error-page>
  <exception-type>java.lang.Throwable</exception-type>
  <location>/errorPage.jsp</location>
</error-page>
Declaring a catch-all error page
This applies to everything in your web app—not just JSPs. 
You can override it in individual JSPs by adding a page 
directive with an errorPage attribute.
<error-page>
  <exception-type>java.lang.ArithmeticException</exception-type>
  <location>/arithmeticError.jsp</location>
</error-page>
Declaring an error page for a more explicit exception
This configures an error page that’s called only when there’s an 
ArithmeticException. If  you have both this declaration and the 
catch-all above, any exception other than ArithmeticException 
will still end up at the “errorPage.jsp”.
<error-page>
  <error-code>404</error-code>
  <location>/notFoundError.jsp</location>
</error-page>
Declaring an error page based on an HTTP status code
This configures an error page that’s called only when the status 
code for the response is “404” (file not found).
The <location> MUST be relative to the web-app root/context, which 
means it MUST start with a slash. (This is true regardless of whether 
the error page is based on <error-code> or <exception-type>.)
error pages in the DD

using JSTL
you are here 
471
Error pages get an extra object:  exception
An error page is essentially the JSP that handles the exception, so the 
Container gives the page an extra object for the exception. You probably 
won’t want to show the exception to the user, but you’ve got it. In a 
scriptlet, you can use the implicit object exception, and from a JSP, you 
can use the EL implicit object ${pageContext.exception}. The object is 
type java.lang.Throwable, so in a script you can call methods, and with 
EL you can access the stackTrace and message properties.
A more explicit ERROR page (“errorPage.jsp”)
<%@ page  isErrorPage=”true” %>
<html><body>
<strong>Bummer.</strong><br>
You caused a ${pageContext.exception} on the server.<br>
<img src=”images/bummerGuy.jpg”>
</body></html>
What happens when you request “badPage.jsp”
Bummer.
 You caused a java.lang.ArithmeticException: / by zero on the server.
http://localhost:8080/tests/badPage.jsp
This time, you get more 
details. You probably 
won’t show this to the 
user...we just did this so 
you could see it.
Note: the exception implicit object is 
available ONLY to error pages with an 
explicitly-defined page directive:
 <%@ page  isErrorPage=”true” %>
In other words, configuring an error page in 
the DD is not enough to make the Container 
give that page the implicit exception object!

472 
chapter 9
What if I think there’s 
an exception I might be able 
to recover from in a JSP? What 
if there are some errors I 
want to catch myself?
The  <c:catch> tag. Like try/catch...sort of
If  you have a page that invokes a risky tag, but you think you can 
recover, there’s a solution. You can do a kind of  try/catch using the 
<c:catch> tag, to wrap the risky tag or expression. Because if  you 
don’t, and an exception is thrown, your default error handling will 
kick in and the user will get the error page declared in the DD. The 
part that might feel a little strange is that the <c:catch> serves as 
both the try and the catch—there’s no separate try tag. You wrap the 
risky EL or tag calls or whatever in the body of  a <c:catch>, and the 
exception is caught right there. But you can’t assume it’s exactly like a 
catch block, either, because once the exception occurs, control jumps 
to the end of  the <c:catch> tag body (more on that in a minute).
<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<%@ page errorPage=”errorPage.jsp” %>
<html><body>
About to do a risky thing: <br>
<c:catch>
    
    <% int x = 10/0; %>
 
  
</c:catch>
If you see this, we survived.
</body></html>
This scriptlet will DEFINITELY 
cause an exception... but we caught it 
instead of triggering the error page.
If this prints out, then we KNOW 
we made it past the exception 
(which in this example, means we 
successfully caught the exception).
http://localhost:8080/tests/risky.jsp
About to do a risky thing:
If you see this, we survived.
the catch must 
have worked...
the <c:catch> tag

using JSTL
you are here 
473
You can make the exception an attribute
In a real Java try/catch, the catch argument is the exception object. 
But with web app error handling, remember, only officially-designated error 
pages get the exception object. To any other page, the exception just isn’t 
there. So this does not work:
But how do I get access to 
the Exception object? The 
one that was actually thrown? 
Since this isn’t an actual error 
page, the implicit exception 
object doesn’t work here.
<c:catch>
    Inside the catch...
    <% int x = 10/0; %> 
    
</c:catch>
Exception was: ${pageContext.exception}
ontext
tex
Won’t work because this 
isn’t an official error 
page, so it doesn’t get 
the exception object.
Using the “var” attribute in <c:catch>
<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<%@ page errorPage=”errorPage.jsp” %>
<html><body>
About to do a risky thing: <br>
<c:catch var=”myException”>
    Inside the catch...
    <% int x = 10/0; %> 
    
</c:catch>
<c:if test=”${myException != null}”>
   There was an exception:  ${myException.message} <br>
</c:if>
We survived.
</body></html>
Use the optional var attribute if  you want to access the exception after 
the end of  the <c:catch> tag. It puts the exception object into the page 
scope, under the name you declare as the value of  var.
This creates a new page-scoped 
attribute named “myException”, and 
assigns the exception object to it.
Now there’s an attribute myException, 
and since it’s a Throwable, it has a 
“message” property (because Throwable 
has a getMessage() method).

474 
chapter 9
In a regular Java try/catch, once the exception occurs, the code BELOW that 
point in the try block never executes—control jumps directly to the catch block. 
With the <c:catch> tag, once the exception occurs, two things happen:
1) If you used the optional “var” attribute, the exception object is assigned to it.
2) Flow jumps to below the body of the <c:catch> tag.
Flow control works in a <c:catch> the way it does 
in a try block—NOTHING runs inside the <c:catch> 
body after the exception.
<c:catch>
     Inside the catch...
     <% int x = 10/0; %>
     After the catch...
 
  
</c:catch>
We survived.
You’ll NEVER see this!
control
Be careful about this. If you want to use the “var” exception object, you must 
wait until AFTER you get to the end of the <c:catch> body. In other words, there 
is simply no way to use any information about the exception WITHIN the 
<c:catch> tag body. 
It’s tempting to think of a <c:catch> tag as being just like a normal Java code 
catch block, but it isn’t. A <c:catch> acts more like a try block, because it’s 
where you put the risky code. Except it’s like a try that never needs (or has) a 
catch or fi nally block. Confused? The point is—learn this tag for exactly what it 
is, rather than mapping it into your existing knowledge of how a normal try/catch 
works. And on the exam, if you see code within the <c:catch> tag that is below 
the point at which the exception is thrown, don’t be fooled.
the <c:catch> tag

using JSTL
you are here 
475
What if you need a tag that’s NOT in JSTL?
The JSTL is huge. Version 1.1 has five libraries—four with custom tags, and one 
with a bunch of  functions for String manipulation. The tags we cover in this book 
(which happen to be the ones you’re expected to know for the exam) are for the 
generic things you’re most likely to need, but it’s possible that between all five 
libraries, you’ll find everything you might ever need. On the next page, we’ll start 
looking at what happens when the tags below aren’t enough.
The “Core” library
General-purpose
<c:out>
<c:set>
<c:remove>
<c:catch>
Conditional
<c:if>
<c:choose>
<c:when>
<c:otherwise>
Iteration
<c:forEach>
<c:forTokens>
We didn’t cover this one... it lets 
you iterate over tokens where YOU 
give it the delimiter. Works a lot 
like StringTokenizer. We also didn’t 
cover <c:redirect> and <c:out>, but 
that gives you a wonderful excuse 
to get the JSTL docs.
URL related
<c:import>
<c:url>
<c:redirect>
<c:param>
Internationalization
<fmt:message>
<fmt:setLocale>
<fmt:bundle>
<fmt:setBundle>
<fmt:param>
<fmt:requestEncoding>
The “Formatting” library
Formatting
<fmt:timeZone>
<fmt:setTimeZone>
<fmt:formatNumber>
<fmt:parseNumber>
<fmt:parseDate>
Database access
<sql:query>
<sql:update>
<sql:setDataSource>
<sql:param>
<sql:dateParam>
The “SQL” library
Core XML actions
<x:parse>
<x:out>
<x:set>
The “XML” library
XML flow control
<x:if>
<x:choose>
<x:when>
<x:otherwise>
<x:forEach>
Transform actions
<x:transform>
<x:param>
Only the “core” library is 
covered on the exam.
The “core” library (which by 
convention we always prefix with “c”) is 
the only JSTL library covered on the exam. 
The rest are specialized, so we don’t go 
into them. But you should at least know that 
they’re available. The XML transformation 
tags, for example, could save your life if you 
have to process RSS feeds. Writing your 
own custom tags can be a pain, so make 
sure before you write one that you’re not 
reinventing the wheel.

476 
chapter 9
Using a tag library that’s NOT from the JSTL
Creating the code that goes behind a tag (in other words, the Java code
that’s invoked when you put the tag in your JSP) isn’t trivial. We have a 
whole chapter (the next one) devoted to developing your own custom
tag handlers. But the last part of  this chapter is about how to use custom 
tags. What happens, for example, if  someone hands you a custom tag 
library they created for your company or project? How do you know what 
the tags are and how to use them? With JSTL, 
it’s easy—the JSTL 1.1 specification documents 
each tag, including how to use each of  the 
required and optional attributes.
But not every custom tag will come so nicely 
packaged and well-documented. You have 
to know how to figure out a tag even if  the 
documentation is weak or nonexistent, and,
one more thing—you have to know how to
deploy a custom tag library.
Main things you have to know:
1
The tag name and syntax
2
The library URI
To use a custom library, 
you MUST read the TLD.
Everything you need to 
know is in there.
The tag has a name, obviously. In <c:set>, the tag name is set, and 
the prefix is c. You can use any prefix you want, but the name 
comes from the TLD. The syntax includes things like required 
and optional attributes, whether the tag can have a body (and 
if  so, what you can put there), the type of  each attribute, and 
whether the attribute can be an expression (vs. a literal String).
The URI is a unique identifier in the Tag Library Descriptor 
(TLD). In other words, it’s a unique name for the tag library the 
TLD describes. The URI is what you put in your taglib directive. 
It’s what tells the Container how to identify the TLD file within 
the web app, which the Container needs in order to map the tag 
name used in the JSP to the Java code that runs when you use 
the tag.
reading the TLD

using JSTL
you are here 
477
Making sense of the TLD
The TLD describes two main things: custom tags, and EL functions. We 
used one when we made the dice rolling function in the previous chapter,  
but we had only a <function> element in the TLD. Now we have to look 
at the <tag> element, which can be more complex. Besides the function we 
declared earlier, the TLD below describes one tag, advice. 
<?xml version=”1.0” encoding=”ISO-8859-1” ?>
<taglib xmlns=”http://java.sun.com/xml/ns/j2ee” 
xmlns:xsi=”http://www.w3.org/2001/XMLSchema-instance” 
xsi:schemaLocation=”http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd” 
version=”2.0”>
    <tlib-version>1.2</tlib-version>
    <short-name>RandomTags</short-name>
    <function>
       <name>rollIt</name>
       <function-class>foo.DiceRoller</function-class>
       <function-signature>int rollDice()</function-signature>
    </function> 
   
   <uri>randomThings</uri>
   <tag>
	
<description>random advice</description>
      <name>advice</name>
	
<tag-class>foo.AdvisorTagHandler</tag-class>
	
<body-content>empty</body-content>
      <attribute>
         <name>user</name>
         <required>true</required>
         <rtexprvalue>true</rtexprvalue>
      </attribute>
   </tag>
</taglib>
The EL function we 
used in the last chapter.
This is the version of the XML schema that 
you use for JSP 2.0. Don’t memorize it... 
just copy it into your <taglib> element.
MANDATORY (the tag, not the value)— the developer 
puts it in to declare the version of the tag library.
REQUIRED! This is what you use inside 
the tag (example: <my:advice>).
REQUIRED! This is how the 
Container knows what to call when 
someone uses the tag in a JSP.
If your tag has attributes, then one <attribute> 
element per tag attribute is required.
The unique name we use 
in the taglib directive!
REQUIRED! This says that the tag 
must NOT have anything in the body.
This says you MUST put a 
“user” attribute in the tag.
This says the “user” attribute can be a 
runtime expression value (i.e. 
doesn’t have to be a String literal).
Optional, but a really good idea...
MANDATORY; mainly for tools to use..

478 
chapter 9
Using the custom “advice” tag
The “advice” tag is a simple tag that takes one attribute—the user 
name—and prints out a piece of  random advice. It’s simple enough 
that it could have been just a plain old EL function (with a static 
method getAdvice(String name)), but we made it a simple tag to 
show you how it all works...
   <taglib ...>
   ...
   <uri>randomThings</uri>
   <tag>
 
<description>random advice</description>
       <name>advice</name>
 
<tag-class>foo.AdvisorTagHandler</tag-class>
 
<body-content>empty</body-content>
      <attribute>
         <name>user</name>
         <required>true</required>
         <rtexprvalue>true</rtexprvalue>
      </attribute>
   </tag>
</taglib ...>
JSP that uses the tag
<html><body>
<%@ taglib prefi x=”mine” uri=”randomThings”%>
Advisor Page<br>
<mine:advice user=”${userName}” />
</body></html>
The uri matches the <uri> 
element in the TLD.
r>
It’s OK to use EL here, because the <rtexprevalue> 
in the TLD is set to “true” for the user attribute.  
(Assume the “userName” attribute already exists.)
The TLD says the tag can’t have a body, so we made it 
an empty tag (which means the tag ends with a slash).
The TLD elements for the advice tag
This is the same tag you saw 
on the previous page, but 
without the annotations.
ings
ra
na
dv
ty<
ed
pr
d
u
red>
v
e
h
efi
>
>
eq
/
ra
lass
co
ib
a
re
<r
tt
>
u
<b
gl
Pa
Each library you use in a page 
needs its own taglib directive 
with a unique prefix.
reading the TLD

using JSTL
you are here 
479
The custom tag handler
This simple tag handler extends SimpleTagSupport (a class you’ll 
see in the next chapter), and implements two key methods: doTag(), 
the method that does the actual work, and setUser(), the method 
that accepts the attribute value.
package foo;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.tagext.SimpleTagSupport;
import java.io.IOException;
public class AdvisorTagHandler extends SimpleTagSupport {
    private String user;
    public void doTag() throws JspException, IOException {     
 
getJspContext().getOut().write( “Hello “ + user + “ <br>” );
       getJspContext().getOut().write( “Your advice is: “ + getAdvice() );
    }
    public void setUser(String user) {
       this.user=user;
    }
    String getAdvice() {
       String[] adviceStrings = {“That color’s not working for you.”, 
              “You should call in sick.”, “You might want to rethink that haircut.”};
       int random = (int) (Math.random() * adviceStrings.length);
       return adviceStrings[random];
   }     
}
SimpleTagSupport implements 
things we need in custom tags.
Java class that does the tag work
The Container calls doTag() when the JSP invokes 
the tag using the name declared in the TLD.
The Container calls this method to set the value from 
the tag attribute. It uses JavaBean property naming 
conventions to figure out that a “user” attribute 
should be sent to the setUser() method.
Our own internal method.
With EL functions, you created a Java class with a static method, 
named the method whatever you wanted, then used the TLD 
to map the actual method <function-signature> to the function 
<name>. But with custom tags, the method name is ALWAYS 
doTag(), so you never declare the method name for a custom tag. 
Only functions use a method signature declaration in the TLD!
Custom tag handlers don’t use 
custom method names!

480 
chapter 9
Pay attention to  < rtexprvalue>
The <rtexprvalue> is especially important because it tells you 
whether the value of  the attribute is evaluated at translation or 
runtime. If  the <rtexprvalue> is false, or the <rtexprvalue> isn’t 
defined, you can use only a String literal as that attribute’s value!
<attribute>
    <name>rate</name>
    <required>true</required>
    <rtexprvalue>false</rtexprvalue>
</attribute>
If you see this:
<attribute>
    <name>rate</name>
    <required>true</required>
</attribute>
OR this:
Then you know THIS WON’T WORK!
<html><body>
  <%@ taglib prefi x=”my” uri=”myTags”%>
  <my:handleIt rate=”${currentRate}” />
</body></html>
rentRa
tR
NO! This must NOT be an 
expression... it must be a 
String literal.
If there’s no <rtexprvalue>, 
the default value is false.
Q: You still didn’t answer the question about how you know what type 
the attribute is...
A: We’ll start with the easy one. If the <rtexprvalue> is false (or not there 
at all), then the attribute type can be ONLY a String literal. But if you can 
use an expression, then you have to hope that it’s either dead obvious from 
the tag description and attribute name, OR that the developer included the 
optional <type> subelement of the <attribute> element. The <type> takes a 
fully-qualified class name for the type. Whether the TLD declares the type or 
not, the Container expects the type of the expression to match the type of 
argument in the tag handler’s setter method for that attribute. In other words, 
if the tag handler has a setDog(Dog) method for the “dog” attribute, then the 
value of your expression for that attribute better evaluate to a Dog object! (Or 
something that can be implicitly assigned to a Dog reference type.)
understanding <rtexprvalue> 

using JSTL
you are here 
481
<rtexprvalue> is NOT just for EL expressions
You can use three kinds of  expressions for the value of  an attribute (or tag 
body) that allows runtime expressions.
1
EL expressions
<mine:advice user=”${userName}” />
2
Scripting expressions
<mine:advice user=’<%= request.getAttribute(“username”) %>’ />
It has to be an expression, not just a scriplet. 
So it must have the “=” sign in there and no 
semicolon on the end.
3
 <jsp:attribute> standard actions
<mine:advice>
   <jsp:attribute name=”user”>${userName}</jsp:attribute>
</mine:advice>
What is this?? I thought this tag didn’t have a body...
The <jsp:attribute> is simply an alternate way to defi ne attributes to a tag. The key point 
is, there must be only ONE <jsp:attribute> for EACH attribute in the enclosing tag. So 
if you have a tag that normally takes three attributes IN the tag (as opposed to in the 
body), then inside the body you’ll now have three <jsp:attribute> tags, one for each at-
tribute. Also notice that the <jsp:attribute> has an attribute of its own, name, where you 
specify the name of the outer tag’s attribute for which you’re setting a value. 
There’s a little more about this on the next page...
<jsp:attribute> lets you put attributes in the BODY of 
a tag, even when the tag body is explicitly declared 
“empty” in the TLD!!

482 
chapter 9
What can be in a tag body
A tag can have a body only if  the <body-content> element for this tag is 
not configured with a value of  empty. The <body-content> element can 
be one of  either three or four values, depending on the type of  tag.
<body-content>empty</body-content>
	
<body-content>scriptless</body-content>
<body-content>tagdependent</body-content>
<body-content>JSP</body-content> 
1
An empty tag
<mine:advice user=”${userName}” />
2
A tag with nothing between the opening and closing tags
<mine:advice user=”${userName}”> </mine:advice>
THREE ways to invoke a tag that can’t have a body
When you put a slash 
in the opening tag, you 
don’t use a closing tag.
We have an opening and closing 
tag, but NOTHING in between.
Each of  these are acceptable ways to invoke a tag configured in 
the TLD with <body-content>empty</body-content>.
3
A tag with only <jsp:attribute> tags between the opening and closing tags
<mine:advice>
   <jsp:attribute name=”user”>${userName}</jsp:attribute>
</mine:advice>
The <jsp:attribute> tag is the ONLY thing you can put between 
the opening and closing tags of a tag with a <body-content> of 
empty! It’s just an alternate way to put the attributes in, but 
<jsp:attribute> tags don’t count as “body content”.
The tag must NOT have a body.
The tag must NOT have scripting elements (scriptlets, 
scripting expressions, and declarations), but it CAN have 
template text and EL and custom and standard actions.
The tag body is treated as plain text, so the EL is 
NOT evaluated and tags/actions are not triggered.
The tag body can have anything that can go inside a JSP.
tag bodies

using JSTL
you are here 
483
void doTag() {
  // tag logic
}
void setUser(String user) {
   this.user=user;
}
AdvisorTagHandler class
vo
  
}
vo
   
}
<html><body>
<%@ taglib prefi x=”mine” uri=”randomThings”%>
Advisor Page<br>
<mine:advice user=”${userName}” />
</body></html>
JSP that uses the tag
<taglib ...>
...
<uri>randomThings</uri>
<tag>
  <description>random advice</description>
  <name>advice</name>
  <tag-class>foo.AdvisorTagHandler</tag-class>
  <body-content>empty</body-content>
  <attribute>
      <name>user</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
  </attribute>
</tag>
TLD fi le
<ta
i>r
pti
ic
>f
nt
er
vi
vis
pty
/ht
<ta
descri
>ad
ng
es
H
The tag handler, the  TLD, and the JSP
The tag handler developer creates the TLD to tell both the 
Container and the JSP developer how to use the tag. A JSP 
developer doesn’t care about the <tag-class> element in 
the TLD; that’s for the Container to worry about. The JSP 
developer cares most about the uri, the tag name, and the tag 
syntax. Can the tag have a body? Does this attribute have to 
be a String literal, or can it be an expression? Is this attribute 
optional? What type does the expression need to evaluate to? 
Think of  the TLD as the API for custom tags. You have to 
know how to call it and what arguments it needs.
These three pieces—the tag 
handler class, the TLD, and 
the JSP are all you need to 
deploy and run a web app 
that uses the tag.

484 
chapter 9
The taglib <uri> is just a name, not a location
The <uri> element in the TLD is a unique name for the tag library. That’s it. It 
does NOT need to represent any actual location (path or URL, for example). It 
simply has to be a name­—the same name you use in the taglib directive. 
“But,” you’re asking, “how come with the JSTL it gives the full URL to the library?” 
The taglib directive for the JSTL is:
The web Container doesn’t normally try to request something from the uri in the 
taglib directive. It doesn’t need to use the uri as a location! If  you type that as a
URL into your browser, you’ll be redirected to a different URL, one that has 
information about JSTL. The Container could care less that this particular uri 
happens to also be a valid URL (the whole “http://...” thing). It’s just the 
convention Sun uses for the uri, to help ensure that it’s a unique name. Su
 could have named the JSTL uri “java_foo_tags” and it would have worked in 
exactly the same way. All that matters is that the <uri> in the TLD and the uri in 
the taglib directive match!
As a developer, though, you do want to work out a scheme to give your libraries 
unique <uri> values, because <uri> names need to be unique for any  given web 
app. You can’t, for example, have two TLD files in the same web app, with the
same <uri>. So, the domain name convention is a good one, but you don’t 
necessarily need to use that for all of  your in-house development.
Having said all that, there is one way in which the uri could be used as a location, 
but it’s considered a really bad practice—if  you don’t specify a <uri> inside the 
TLD, the Container will attempt to use the uri attribute in the taglib directive as a 
path to the actual TLD. But to hard-code the location of  your TLD is obviously a 
bad idea, so just pretend you don’t know it’s possible.
<%@ taglib prefix=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
This LOOKS like a URL to 
a web resource, but it’s not. 
It’s just a name that happens 
to be formatted as a URL.
The Container looks for a match 
between the <uri> in the TLD and 
the uri value in the taglib directive.
The uri does NOT have to be the 
location of the actual tag handler!
the taglib <uri>

using JSTL
you are here 
485
The Container builds a map
Before JSP 2.0, the developer had to specify a mapping between the <uri> in the TLD and 
the actual location of  the TLD file. So when a JSP page had a taglib directive like this:
The Deployment Descriptor (web.xml) had to tell the Container where the TLD file with a 
matching <uri> was located. You did that with a <taglib> element in the DD.
<%@ taglib prefix=”mine” uri=”randomThings”%>
The OLD (before JSP 2.0) way to map a taglib uri to a TLD file
<web-app>
...
 <jsp-config>
   <taglib>
     <taglib-uri>randomThings</taglib-uri>
     <taglib-location>/WEB-INF/myFunctions.tld</taglib-location>
   </taglib>
 </jsp-config>
</web-app>
The NEW (JSP 2.0) way to map a taglib uri to a TLD file
The Container automatically builds a map between TLD files and <uri> 
names, so that when a JSP invokes a tag, the Container knows exactly where to find the 
TLD that describes the tag.
How? By looking through a specific set of  locations where TLDs are allowed to live. 
When you deploy a web app, as long as you put the TLD in a place the Container will 
search, the Container will find the TLD and build a map for that tag library. 
If  you do specify an explicit <taglib-location> in the DD (web.xml), a JSP 2.0 Container 
will use it! In fact, when the Container begins to build the <uri>-to-TLD map, the 
Container will look first in your DD to see if  you’ve made any <taglib> entries, and if 
you have, it’ll use those to help construct the map. For the exam, you’re expected to 
know about <taglib-location>, even though it’s no longer required for JSP 2.0.
So the next step is for us to see where the Container looks for TLDs, and also where it 
looks for the tag handler classes declared in the TLDs.
No <taglib> entry in the DD!
In the DD, map the <uri> 
in the TLD to an actual 
path to a TLD file.

486 
chapter 9
Four places the Container looks for  TLDs
The Container searches in several places to find TLD files—you 
don’t need to do anything except make sure your TLDs are in one 
of  the right locations.
webapps
SampleApp
WEB-INF
classes
<?xml
sion=
encod
=”UTF-8”?> 
<!DOCTYPE 
l ver
=”1.0” 
ding 
r-
”
web.xml
<function>
<name>
rollIt
</name>
<function-
class>
foo.DiceRoller
</function-
>
ction>
e>
It
myFunctions.tld
foo
0010 0
1100 1001
0001 0011
0101 0110
AdvisorTagHandler.class
0001
A Java class that 
handles a tag from the 
myFunctions.tld library
<%@ tagl
prefi x=”
uri=”/W
myFunctions.tld”%>
<html><body>
${mine:rollIt()}
</body></
html>
lib 
mine”
WEB-INF/
useTag.jsp
The JSP that 
invokes the tag
tlds
lib
JAR
META-INF
<function>
<name>
rollIt
</name>
<function-
class>
foo.DiceRoller
</function-
>
ction>
e>
It
shoppingTags.tld
<function>
<name>
rollIt
</name>
<function-
class>
foo.DiceRoller
</function-
>
ction>
e>
It
otherTags.tld
1
Directly inside WEB-INF
2
Directly inside a sub-
directory of WEB-INF
3
Inside the META-INF 
directory inside a JAR fi le 
that’s inside WEB-INF/lib
moreTLDs
<function>
<name>
rollIt
</name>
<function-
class>
foo.DiceRoller
</function-
>
ction>
e>
It
catalogTags.tld
4
Inside a sub-directory of 
META-INF inside a JAR fi le 
that’s inside WEB-INF/lib
1
2
3
4
TLD locations

using JSTL
you are here 
487
When a JSP uses more than one tag library
If  you want to use more than one tag library in a JSP, do a separate taglib 
directive for each TLD. There a few issues to keep in mind...
é	 Make sure the taglib uri names are unique. In other words, don’t put 
in more than one directive with the same uri value.
é	 Do NOT use a prefix that’s on the reserved list. 
The reserved prefixes are:
		
jsp:
	
		
jspx:
	
		
java:
	
		
javax:
	
		
servlet:
	
		
sun:
	
		
sunw:
Sharpen your pencil
1
2
3
Empty tags
Write in examples of the THREE different ways to 
invoke a tag that must have an empty body. 
(Check your answers by looking back through the chapter. No, 
we’re not going to tell you the page number.)

488 
chapter 9
void doTag() {
  // tag logic
}
void set      (String x) {
   // code here
}
AdvisorTagHandler class
vo
  
}
vo
   
}
<html><body>
<%@ taglib prefi x=”mine” uri=”            ”%>
Advisor Page<br>
<         :                 =”${foo}” />
</body></html>
JSP that uses the tag
<taglib ...>
...
<uri>randomThings</uri>
<tag>
  <description>random advice</description>
  <name>advice</name>
  <tag-class>foo.AdvisorTagHandler</tag-class>
  <body-content>empty</body-content>
  <attribute>
      <name>user</name>
      <required>true</required>
      <rtexprvalue>        </rtexprvalue>
  </attribute>
</tag>
TLD fi le
Sharpen your pencil
How the JSP, the TLD, and the 
bean attribute class relate
Fill in the spaces based on the information that you 
can see in the TLD. Draw arrows to indicate where the 
different pieces of information are tied together. In other 
words, for each blank, show exactly where you found the 
information needed to ﬁ ll in the blank.
TLD exercise

using JSTL
you are here 
489
<c:forEach var=”movie” items=”${movieList}”                     =”foo”  > 
   ${movie}    
</c:forEach>
    
The attribute that names the 
loop counter variable.
<c:if          =”${userPref==’safety’}” >
    Maybe you should just walk...
</c:if>
<c:choose> 
    <c:                    =”${userPref == ‘performance’}”>
         Now you can stop even if you <em>do</em> drive insanely fast. 
    </c:          > 
    <c:                         > 
         Our brakes are the best. 
    </c:                        > 
</c:choose>
<c:set var=”userLevel” scope=”session”            =”foo” />
Sharpen your pencil
Test your Tag memory 
ANSWERS
1
Fill in the name of the optional attribute.
2
    
test
varStatus
Fill in the missing attribute name.
3
Fill in the missing attribute name.
    
value
when
test
    
    
    
otherwise
    
when
otherwise
    
4
Fill in the missing tag names (two different tag types), and the missing attribute name.
The <c:set> tag must have a value, but you 
could choose to put the value in the body 
of the tag instead of as an attribute.
The <c:otherwise> tag is optional.

490 
chapter 9
void doTag() {
  // tag logic
}
void setUser(String user) {
   this.user=user;
}
AdvisorTagHandler class
vo
  
}
vo
   
}
<html><body>
<%@ taglib prefi x=”mine” uri=”randomThings”%>
Advisor Page<br>
<mine:advice   user=”${foo}” />
</body></html>
JSP that uses the tag
<taglib ...>
...
<uri>randomThings</uri>
<tag>
  <description>random advice</description>
  <name>advice</name>
  <tag-class>foo.AdvisorTagHandler</tag-class>
  <body-content>empty</body-content>
  <attribute>
      <name>user</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
  </attribute>
</tag>
TLD fi le
=”mi
isor
e
.
uri>
ipt
gli
ndom
n>
e<
oo
>e
T
us
>
ad
>
i
v
ty
.>
hin
dom
e>
vi
file
i
y<
me
/
vi
Sharpen your pencil
How the JSP, the TLD, and the 
bean attribute class relate
ANSWERS
TLD exercise answers

using JSTL
you are here 
491
Mock Exam Chapter 9 
Which is true about TLD files?
 A.	 TLD files may be placed in any subdirectory of  WEB-INF.
B.	 TLD files are used to configure JSP environment attributes, 
such as scripting-invalid.
C.	 TLD files may be placed in the META-INF directory of  the 
WAR file.
D.	 TLD files can declare both Simple and Classic tags, but TLD 
files are NOT used to declare Tag Files.




1
Assuming the standard JSTL prefix conventions are used,
which JSTL tags would you use to iterate over a collection of  objects?  
(Choose all that apply.)
 A.	 <x:forEach>
B.	 <c:iterate>
C.	 <c:forEach>
D.	 <c:forTokens>
E.	 <logic:iterate>
F.	
<logic:forEach>






2

492 
chapter 9
A JSP page contains a taglib directive whose uri attribute has the
value myTags.  Which deployment descriptor element defines the
associated TLD?    
 A.	 <taglib>
  <uri>myTags</uri>
  <location>/WEB-INF/myTags.tld</location>
</taglib>
B.	 <taglib>
  <uri>myTags</uri>
  <tld-location>/WEB-INF/myTags.tld</tld-location>
</taglib> 
C.	 <taglib>
  <tld-uri>myTags</tld-uri>
  <tld-location>/WEB-INF/myTags.tld</tld-location>
</taglib>
D.	 <taglib>
  <taglib-uri>myTags</taglib-uri>
  <taglib-location>/WEB-INF/myTags.tld</taglib-location>
</taglib>




3
A JavaBean Person has a property called address.  The value of  this 
property is another JavaBean Address with the following string properties: 
street1, street2, city, stateCode and zipCode.  A controller servlet 
creates a session-scoped attribute called customer that is an instance of  the 
Person bean.
Which JSP code structures will set the city property of  the customer 
attribute to the city request parameter?  (Choose all that apply.)
 A.	 ${sessionScope.customer.address.city = param.city}
B.	 <c:set target=”${sessionScope.customer.address}”
       property=”city” value=”${param.city}” /> 
C.	 <c:set scope=”session” var=”${customer.address}”
       property=”city” value=”${param.city}” />
D.	 <c:set target=”${sessionScope.customer.address}”
       property=”city”>
  ${param.city}
</c:set>




4
mock exam

using JSTL
you are here 
493
Which <body-content> element combinations in the TLD
are valid for the following JSP snippet?  (Choose all that apply.)
11. <my:tag1>
12.   <my:tag2 a=”47” />
13.   <% a = 420; %>
14.   <my:tag3>
15.     value = ${a}
16.   </my:tag3>
17. </my:tag1>
 A.	 tag1 body-content is empty
tag2 body-content is JSP 
tag3 body-content is scriptless
B.	  tag1 body-content is JSP 
tag2 body-content is empty
tag3 body-content is scriptless
C.	 tag1 body-content is JSP
tag2 body-content is JSP
tag3 body-content is JSP 
D.	 tag1 body-content is scriptless
tag2 body-content is JSP
tag3 body-content is JSP
E.	 tag1 body-content is JSP
tag2 body-content is scriptless
tag3 body-content is scriptless





5
Assuming the appropriate taglib directives, which are valid
examples of  custom tag usage? (Choose all that apply.)
 A.	 <foo:bar />
B.	 <my:tag></my:tag>
C.	 <mytag value=”x” />
D.	 <c:out value=”x” />
E.	 <jsp:setProperty name=”a” property=”b” value=”c” />





6

494 
chapter 9
 Given the following scriptlet code:

11. <select name=’styleId’>
12. <% BeerStyle[] styles = beerService.getStyles();
13.    for ( int i=0; i < styles.length; i++ ) {
14.      BeerStyle style = styles[i]; %>
15.   <option value=’<%= style.getObjectID() %>’>
16.     <%= style.getTitle() %>
17.   </option>
18. <% } %>
19. </select>

Which JSTL code snippet produces the same result?
 A.	 <select name=’styleId’>
       <c:for array=’${beerService.styles}’>
         <option value=’${item.objectID}’>${item.title}</option>
       </c:for>
     </select>
B.	 <select name=’styleId’>
  <c:forEach var=’style’ items=’${beerService.styles}’>
    <option value=’${style.objectID}’>${style.title}</option>
  </c:forEach>
</select>
C.	 <select name=’styleId’>
  <c:for var=’style’ array=’${beerService.styles}’>
    <option value=’${style.objectID}’>${style.title}</option>
  </c:for>
</select>
D.	 <select name=’styleId’>
  <c:forEach var=’style’ array=’${beerService.styles}’>
    <option value=’${style.objectID}’>${style.title}</option>
  </c:for>
</select>




7
mock exam

using JSTL
you are here 
495
Chapter 9 Answers
Which is true about TLD files?
 A.	 TLD files may be placed in any subdirectory of  WEB-INF.
B.	 TLD files are used to configure JSP environment attributes, 
such as scripting-invalid.
C.	 TLD files may be placed in the META-INF directory of  the 
WAR file.
D.	 TLD files can declare both Simple and Classic tags, but TLD 
files are NOT used to declare Tag Files.




1
(JSP v2.0
pgs 3-16, 1-160)
-Option B is invalid because TLD 
files configure tag handlers not 
the JSP environment.
-Option C is invalid because TLD 
files are not recognized in the 
META-INF of the WAR file.
-Option D is invalid because 
Tag Files may be declared in 
a TLD (but it is rare). 
Assuming the standard JSTL prefix conventions are used,
which JSTL tags would you use to iterate over a collection of  objects?  
(Choose all that apply.)
 A.	 <x:forEach>
B.	 <c:iterate>
C.	 <c:forEach>
D.	 <c:forTokens>
E.	 <logic:iterate>
F.	
<logic:forEach>






2
(JSTL v1.1 pg. 42)
-Option B is incorrect because 
no such tag exists. 
-Option D is incorrect because 
this tag is used for iterating over 
tokens within a single string. 
-Options E and F are incorrect 
because the prefix ‘logic’ is not a 
standard JSTL prefix (this prefix 
is typically used by tags in the 
Jakarta Struts package).
-Option A is incorrect as this is the tag 
used for iterating over XPath expressions.

496 
chapter 9
A JSP page contains a taglib directive whose uri attribute has the
value myTags.  Which deployment descriptor element defines the
associated TLD?    
 A.	 <taglib>
  <uri>myTags</uri>
  <location>/WEB-INF/myTags.tld</location>
</taglib>
B.	 <taglib>
  <uri>myTags</uri>
  <tld-location>/WEB-INF/myTags.tld</tld-location>
</taglib> 
C.	 <taglib>
  <tld-uri>myTags</tld-uri>
  <tld-location>/WEB-INF/myTags.tld</tld-location>
</taglib>
D.	 <taglib>
  <taglib-uri>myTags</taglib-uri>
  <taglib-location>/WEB-INF/myTags.tld</taglib-location>
</taglib>




3
(JSP v2.0 pgs 3-12,13)
- Option D specifies 
valid tag elements.
A JavaBean Person has a property called address.  The value of  this 
property is another JavaBean Address with the following string properties: 
street1, street2, city, stateCode and zipCode.  A controller servlet 
creates a session-scoped attribute called customer that is an instance of  the 
Person bean.
Which JSP code structures will set the city property of  the customer 
attribute to the city request parameter?  (Choose all that apply.)
 A.	 ${sessionScope.customer.address.city = param.city}
B.	 <c:set target=”${sessionScope.customer.address}”
       property=”city” value=”${param.city}” /> 
C.	 <c:set scope=”session” var=”${customer.address}”
       property=”city” value=”${param.city}” />
D.	 <c:set target=”${sessionScope.customer.address}”
       property=”city”>
  ${param.city}
</c:set>




4
-Option A is invalid 
because EL does not 
permit assignment.
(JSTL v1.1 pg 4-28)
-Option C is invalid 
because the var attribute 
does not accept a 
runtime value, nor does it 
work with the property 
attribute.
mock answers

using JSTL
you are here 
497
Which <body-content> element combinations in the TLD
are valid for the following JSP snippet?  (Choose all that apply.)
11. <my:tag1>
12.   <my:tag2 a=”47” />
13.   <% a = 420; %>
14.   <my:tag3>
15.     value = ${a}
16.   </my:tag3>
17. </my:tag1>
 A.	 tag1 body-content is empty
tag2 body-content is JSP 
tag3 body-content is scriptless
B.	  tag1 body-content is JSP 
tag2 body-content is empty
tag3 body-content is scriptless
C.	 tag1 body-content is JSP
tag2 body-content is JSP
tag3 body-content is JSP 
D.	 tag1 body-content is scriptless
tag2 body-content is JSP
tag3 body-content is JSP
E.	 tag1 body-content is JSP
tag2 body-content is scriptless
tag3 body-content is scriptless





5
-Tag1 includes scripting code so it must have at 
least ‘JSP’ body-content. Tag2 is only shown 
as an empty tag, but it could also contain ‘JSP’ 
or ‘scriptless’ body-content.  Tag3 contains no 
scripting code so it may have either ‘JSP’ or 
‘scriptless’ body-content.
(JSP v2.0 Appendix JSP.C
specifically pgs 3-21 and 3-30)
-Option A is invalid 
because tag1 cannot 
be ‘empty’. 
-Option D is invalid 
because tag1 cannot 
be ‘scriptless’. 
Assuming the appropriate taglib directives, which are valid
examples of  custom tag usage? (Choose all that apply.)
 A.	 <foo:bar />
B.	 <my:tag></my:tag>
C.	 <mytag value=”x” />
D.	 <c:out value=”x” />
E.	 <jsp:setProperty name=”a” property=”b” value=”c” />





6
(JSP v2.0 section 7)
-Option C is invalid because 
there is no prefix.
-Option E is invalid because this is an example of 
a JSP standard action, not a custom tag.

498 
chapter 9
 Given the following scriptlet code:

11. <select name=’styleId’>
12. <% BeerStyle[] styles = beerService.getStyles();
13.    for ( int i=0; i < styles.length; i++ ) {
14.      BeerStyle style = styles[i]; %>
15.   <option value=’<%= style.getObjectID() %>’>
16.     <%= style.getTitle() %>
17.   </option>
18. <% } %>
19. </select>

Which JSTL code snippet produces the same result?
 A.	 <select name=’styleId’>
       <c:for array=’${beerService.styles}’>
         <option value=’${item.objectID}’>${item.title}</option>
       </c:for>
     </select>
B.	 <select name=’styleId’>
  <c:forEach var=’style’ items=’${beerService.styles}’>
    <option value=’${style.objectID}’>${style.title}</option>
  </c:forEach>
</select>
C.	 <select name=’styleId’>
  <c:for var=’style’ array=’${beerService.styles}’>
    <option value=’${style.objectID}’>${style.title}</option>
  </c:for>
</select>
D.	 <select name=’styleId’>
  <c:forEach var=’style’ array=’${beerService.styles}’>
    <option value=’${style.objectID}’>${style.title}</option>
  </c:for>
</select>




7
-Option B is correct because it uses the 
proper JSTL tag/attribute names.
(JSTL v1.1 pg 6-48)
mock answers










































































































































































































































































































































































