@danappleman   danappleman.com
Dan Appleman
Exploring JavaScript in Lightning 
Components

What Is 
Lightning?
Apps
Data
Process
Sync
Actions
Exp
As long as 
it is called 
lightning, it 
will sell!

Lightning – from a Developer’s Perspective

Components

What Is 
Lightning…
from a 
Developer’s 
Perspective?
Aura Framework
LWC 
Framework
Components
Components
Components
Components
Aura
Aura
LWC
LWC

Lightning Web Components
Latest technology
Follow industry standards
High performance!
Aura Components
Dynamic component creation
Can access components in other 
namespaces
Can be hosted by Visualforce
Which Framework to Use?

Which to cover first?
- Order of appearance?
- Current relevance?
Today: Relevance!
- Focus on Lightning
- Visualforce is optional

This it not a course on Lightning 
Development!
Today’s topic is only JavaScript
To learn to develop Lightning components:
Trailhead
LWC or Aura courses by Sara Morgan 
and others, here on Pluralsight!



Requirement:
Add a button here to apply for financial aid



Modules, Imports and Exports

“Importing” JavaScript in ES5
Environment
Your JavaScript
External File 1
External File 2

“Importing” JavaScript in ES5
Environment
Your JavaScript
External File 1
External File 2
Function A
Function A

“Importing” JavaScript in ES5
Environment
Your JavaScript
External File 1 V1
External File 1 V2

“Importing” JavaScript in ES5
Environment
Your JavaScript
External File 1 V1
External File 1 V2

“Importing” JavaScript in ES6
Environment
Your JavaScript
External Module 1
External Module 2
export function 1
export function 1

“Importing” JavaScript in ES6
Environment
Your JavaScript
External Module 1
External Module 2
export function 1
export function 1
Import into f1
Import into f2



import { LightningElement, api, wire } from 'lwc';
import { getRecord } from 'lightning/uiRecordApi';
import APPLIEDFIELD from '@salesforce/schema/Student__c.AppliedForFinancialAid__c';
import { refreshApex } from '@salesforce/apex';
import applyForAidAction from '@salesforce/apex/StudentAidController.applyForAidAction';
import {logOutput} from 'c/logHelper';
Importing
Use * to import all exports from a module
Use aliasing to rename elements: import { export1 as alias1 } from …
Use a single value to import the default exported element
Or provide a list of elements in { export1, export2, export n…}

import { LightningElement, api, wire } from 'lwc';
import { getRecord } from 'lightning/uiRecordApi';
import APPLIEDFIELD from '@salesforce/schema/Student__c.AppliedForFinancialAid__c';
import { refreshApex } from '@salesforce/apex';
import applyForAidAction from '@salesforce/apex/StudentAidController.applyForAidAction';
import {logOutput} from 'c/logHelper';
Importing ‘from’ Where?
In Standard JavaScript, a relative path. Not applicable to LWC!
@ indicates server generated dynamic content
lwc is the core LWC framework
namespace / module

LWC Converts the Import Syntax as Needed
ES7
ES6
ES5.1
LWC 
Framework
LWC import 
syntax
ES6+
ES6
ES5
Standard
JavaScript

Inside an LWC Controller



A Decorator “wraps” one 
function inside of another
It can thus extend or modify 
the behavior of a function 
or property

@api recordId;
@wire(getRecord, { 
recordId: '$recordId’, 
fields: [APPLIEDFIELD]})
student;
t Makes a local variable “Public” – accessible 
to the component’s markup.
t Detects modifications to the variable and 
triggers component rerendering
t Connects a local variable to a data source
t The data source was defined earlier:
import { getRecord } from 'lightning/uiRecordApi’;
t The fields were also defined earlier:
import APPLIEDFIELD from 
'@salesforce/schema/Student__c.
AppliedForFinancialAid__c';


handleApplyForAid() {
applyForAidAction({'studentID': this.recordId})
.then(result => { 
refreshApex(this.student);
logOutput('Applied successfully')
logOutput(result);
})
.catch(error=> { 
logOutput('Application failed ');
logOutput(error);
});
}


Inside an Aura Controller


({
f1: function(component, event, helper)
{ },
f2: function(component, event, helper)
{ },
f3: function(component, event, helper)
{ }
})
t An object is defined inside of parenthesis 
using object literal format
t Each property is a function with three 
parameters





Exploring JavaScript techniques
- LWC E-Bikes
- Aura Dreamhouse

Let’s Take a Ride on an E-bike




What are we looking for?
- The application? No!
- The JavaScript? Yes!






const summary = orderItems.reduce(
(acc, orderItem) => {
const quantity = 
getQuantity(orderItem);
const price = 
getPrice(orderItem, quantity);
acc.quantity += quantity;
acc.price += price;
return acc;
},
{ quantity: 0, price: 0 }
);
Integer quantity = 0;
Integer price = 0;
for(Order_Item__c item: orderItems)
{
quantity+= item.Qty_S__c +
item.Qty_M__c + item.Qty_L__c;
price+= item.Price__c;
}
JavaScript
Apex

Common
Callbacks are 
preferred by many
Functional
Methods return new 
arrays
Side effects
No exposed variables 
reduces risk
Chaining
A nice way to define a 
series of operations
Familiarity
No callbacks in Apex –
so it’s familiar
Array Callbacks vs. Loops

Welcome to the Dreamhouse




What are we looking for (again)?
- The application? No!
- The JavaScript? Yes!






JavaScript in lightning largely consists of 
repetition of a few design patterns
Looking at existing code can help you 
learn
A Bit of 
Perspective

LWC & Aura 
Controllers
Reference
Examples of 
each
Classic and 
Visualforce
Advanced 
Concepts
Up Next:

