Logic: Language and Information 1
§6-4 How prolog Answers Queries
Jen Davoren

So far: Logical consequence answered by prolog
Let P be a logic program and let G be the goal:
?- r1, r2, ..., rk.
To get prolog to answer the question whether or not P |= G,
▶load the program file containing P into prolog : can use
File→Consult. . . or File→Load. . . in some versions.
▶enter the goal atoms in G in a list after the query prompt ?-
▶end list with period . and then press “return” key;
▶then prolog answers with either true or false or . . .
prolog gets stuck in a loop and crashes!

Resolution proof method used by prolog
Let P be a logic program. The proof rule will allow us to derive a
new goal G′ from a previous goal G by consulting program clauses
A in a program P.
.G′.
G
.
A in P
The proof method constructs a chain or sequence of goals with
repeated applications of the rule.

Resolution proof method used by prolog
Let P be a logic program. The proof rule will allow us to derive a
new goal G′ from a previous goal G by consulting program clauses
A in a program P.
.G′.
G
.
A in P
The proof method constructs a chain or sequence of goals with
repeated applications of the rule.
Terminology: Selective Linear Definite clause resolution or
SLD resolution is implemented in prolog .

Resolution proof method used by prolog
.
G4.
G3
.
G2
.
G1
.
G0
.
A0
.
A1
.
A2
.
A3

Resolution proof method used by prolog
We can use a “linear tree” diagram to represent a sequence of rule
applications, with clauses A from logic program P appearing as side
inputs to the linear sequence of goals Gi.

Resolution proof method used by prolog
We can use a “linear tree” diagram to represent a sequence of rule
applications, with clauses A from logic program P appearing as side
inputs to the linear sequence of goals Gi.
We include among the goals Gi the empty goal, written “□”,
thought of as the empty list of atoms, whose meaning is
contradiction: always false.

Resolution proof method used by prolog
We can use a “linear tree” diagram to represent a sequence of rule
applications, with clauses A from logic program P appearing as side
inputs to the linear sequence of goals Gi.
We include among the goals Gi the empty goal, written “□”,
thought of as the empty list of atoms, whose meaning is
contradiction: always false.
The proof method implemented in prolog is a refutation
procedure: to determine whether or not P |= G, suppose the
program P is true but the initial goal G0 = G is false (that is, one of
its atoms is false), and then prolog tries to derive the empty goal
□.

Resolution rule
Given a goal of the form: G = q, r1, r2, ..., rk, with k ⩾0.

Resolution rule
Given a goal of the form: G = q, r1, r2, ..., rk, with k ⩾0.
prolog will look for a program clause A in P whose head is q.

Resolution rule
Given a goal of the form: G = q, r1, r2, ..., rk, with k ⩾0.
prolog will look for a program clause A in P whose head is q.
If A is a conditional rule or proper program clause, with m ⩾1:
q :- p1, p2, ..., pm.

Resolution rule
Given a goal of the form: G = q, r1, r2, ..., rk, with k ⩾0.
prolog will look for a program clause A in P whose head is q.
If A is a conditional rule or proper program clause, with m ⩾1:
q :- p1, p2, ..., pm.
then the new goal G′ replaces the q in G with body atoms
p1, p2, ..., pm, and G′ is the resolvent of G with clause A.
.
G′ = p1, p2, ..., pm, r1, r2, ..., rk
.
G = q, r1, r2, ..., rk
.
A

Resolution rule
Given a goal of the form: G = q, r1, r2, ..., rk, with k ⩾0.

Resolution rule
Given a goal of the form: G = q, r1, r2, ..., rk, with k ⩾0.
prolog will look for a program clause A in P whose head is q.

Resolution rule
Given a goal of the form: G = q, r1, r2, ..., rk, with k ⩾0.
prolog will look for a program clause A in P whose head is q.
If A is the fact:
q.

Resolution rule
Given a goal of the form: G = q, r1, r2, ..., rk, with k ⩾0.
prolog will look for a program clause A in P whose head is q.
If A is the fact:
q.
then the new goal G′ simply deletes q from goal G, and G′ is the
resolvent of G with A = q. If G is just q then G′ is empty, □.
.
G′ = r1, r2, ..., rk
.
G = q, r1, r2, ..., rk
.
q

Resolution proof method used by prolog
.
G4 = □
.
G3
.
G2
.
G1
.
G0 = G
.
A0
.
A1
.
A2
.
A3

prolog answers true
Given a logic program P loaded into prolog
together with a goal G = r1, r2, ..., rk
(all of the atoms ri must occur as heads of clauses in P )

prolog answers true
Given a logic program P loaded into prolog
together with a goal G = r1, r2, ..., rk
(all of the atoms ri must occur as heads of clauses in P )
prolog will answer true to the query
?- r1, r2, ..., rk.
that is, the question whether or not P |= G,

prolog answers true
Given a logic program P loaded into prolog
together with a goal G = r1, r2, ..., rk
(all of the atoms ri must occur as heads of clauses in P )
prolog will answer true to the query
?- r1, r2, ..., rk.
that is, the question whether or not P |= G,
if and only if prolog finds a sequence of goals G0, G1, . . . , Gn such
that:
▶G0 = G;

prolog answers true
Given a logic program P loaded into prolog
together with a goal G = r1, r2, ..., rk
(all of the atoms ri must occur as heads of clauses in P )
prolog will answer true to the query
?- r1, r2, ..., rk.
that is, the question whether or not P |= G,
if and only if prolog finds a sequence of goals G0, G1, . . . , Gn such
that:
▶G0 = G;
▶for each i < n, there is a program clause Ai in P such that
goal Gi+1 is the resolvent of Gi with Ai;

prolog answers true
Given a logic program P loaded into prolog
together with a goal G = r1, r2, ..., rk
(all of the atoms ri must occur as heads of clauses in P )
prolog will answer true to the query
?- r1, r2, ..., rk.
that is, the question whether or not P |= G,
if and only if prolog finds a sequence of goals G0, G1, . . . , Gn such
that:
▶G0 = G;
▶for each i < n, there is a program clause Ai in P such that
goal Gi+1 is the resolvent of Gi with Ai;
▶Gn = □.

Exampleprolog program
/* weather-001.pl */
windy :- melbourne.
windy :- yackandandah.
light_rain :- melbourne.
dry :- yackandandah.
hot35 :- northern_victoria.
mild25 :- central_victoria.
central_victoria :- melbourne.
northern_victoria :- yackandandah.
high_fire_danger :- windy, dry, hot35.
yackandandah.
melbourne :- false.

Exampleprolog program
/* weather-001.pl */
windy :- melbourne.
windy :- yackandandah.
light_rain :- melbourne.
dry :- yackandandah.
hot35 :- northern_victoria.
mild25 :- central_victoria.
central_victoria :- melbourne.
northern_victoria :- yackandandah.
high_fire_danger :- windy, dry, hot35.
yackandandah.
melbourne :- false.
1 ?- high_fire_danger.

Exampleprolog program
/* weather-001.pl */
windy :- melbourne.
windy :- yackandandah.
light_rain :- melbourne.
dry :- yackandandah.
hot35 :- northern_victoria.
mild25 :- central_victoria.
central_victoria :- melbourne.
northern_victoria :- yackandandah.
high_fire_danger :- windy, dry, hot35.
yackandandah.
melbourne :- false.
1 ?- high_fire_danger.
true.
2 ?-

Resolution refutation sequence
G0 = h_f_d
A0:
h_f_d :- windy, dry, hot35.
G1 = windy, dry, hot35

Resolution refutation sequence
G0 = h_f_d
A0:
h_f_d :- windy, dry, hot35.
G1 = windy, dry, hot35
A1:
windy :- melb. Choice point

Resolution refutation sequence
G0 = h_f_d
A0:
h_f_d :- windy, dry, hot35.
G1 = windy, dry, hot35
A1:
windy :- melb. Choice point
G2 = melb, dry, hot35
A2:
melb :- false.
G3 = false, dry, hot35
dead-end: backtrack to G1

Resolution refutation sequence
G0 = h_f_d
A0:
h_f_d :- windy, dry, hot35.
G1 = windy, dry, hot35
A1:
windy :- melb. Choice point
G2 = melb, dry, hot35
A2:
melb :- false.
G3 = false, dry, hot35
dead-end: backtrack to G1
G1 = windy, dry, hot35
A1:
windy :- yacka. 2nd choice
G2 = yacka, dry, hot35
A2:
yacka.
G3 = dry, hot35

Resolution refutation sequence
G0 = h_f_d
A0:
h_f_d :- windy, dry, hot35.
G1 = windy, dry, hot35
A1:
windy :- melb. Choice point
G2 = melb, dry, hot35
A2:
melb :- false.
G3 = false, dry, hot35
dead-end: backtrack to G1
G1 = windy, dry, hot35
A1:
windy :- yacka. 2nd choice
G2 = yacka, dry, hot35
A2:
yacka.
G3 = dry, hot35
A3:
dry :- yacka.
G4 = yacka, hot35
A4:
yacka.
G5 = hot35

Resolution refutation sequence
G0 = h_f_d
A0:
h_f_d :- windy, dry, hot35.
G1 = windy, dry, hot35
A1:
windy :- melb. Choice point
G2 = melb, dry, hot35
A2:
melb :- false.
G3 = false, dry, hot35
dead-end: backtrack to G1
G1 = windy, dry, hot35
A1:
windy :- yacka. 2nd choice
G2 = yacka, dry, hot35
A2:
yacka.
G3 = dry, hot35
A3:
dry :- yacka.
G4 = yacka, hot35
A4:
yacka.
G5 = hot35
A5:
hot35 :- n_victoria.
G6 = n_victoria
A6:
n_victoria :- yacka.
G7 = yacka
A7:
yacka.
G8 = □

Resolution refutation sequence
G0 = h_f_d
A0:
h_f_d :- windy, dry, hot35.
G1 = windy, dry, hot35
A1:
windy :- yacka.
G2 = yacka, dry, hot35
A2:
yacka.
G3 = dry, hot35
A3:
dry :- yacka.
G4 = yacka, hot35
A4:
yacka.
G5 = hot35
A5:
hot35 :- n_victoria.
G6 = n_victoria
A6:
n_victoria :- yacka.
G7 = yacka
A7:
yacka.
G8 = □

prolog answers false
Given a logic program P loaded into prolog
together with a goal G = r1, r2, ..., rk
(all of the atoms ri must occur as heads of clauses in P )

prolog answers false
Given a logic program P loaded into prolog
together with a goal G = r1, r2, ..., rk
(all of the atoms ri must occur as heads of clauses in P )
prolog will answer false to the query
?- r1, r2, ..., rk.
that is, the question whether or not P |= G,

prolog answers false
Given a logic program P loaded into prolog
together with a goal G = r1, r2, ..., rk
(all of the atoms ri must occur as heads of clauses in P )
prolog will answer false to the query
?- r1, r2, ..., rk.
that is, the question whether or not P |= G,
if and only if a systematic depth-first search does not
produce a resolution refutation sequence ending with □,
where the search is through the tree of all possible
resolution sequences starting with G and with input
from clauses as ordered in P.

prolog crashes and does not answer
Given a logic program P loaded into prolog
together with a goal G = r1, r2, ..., rk
(all of the atoms ri must occur as heads of clauses in P )
in response to the query
?- r1, r2, ..., rk.
that is, the question whether or not P |= G,

prolog crashes and does not answer
Given a logic program P loaded into prolog
together with a goal G = r1, r2, ..., rk
(all of the atoms ri must occur as heads of clauses in P )
in response to the query
?- r1, r2, ..., rk.
that is, the question whether or not P |= G,
prolog can sometimes crash and fail to give an answer!

prolog crashes and does not answer
Given a logic program P loaded into prolog
together with a goal G = r1, r2, ..., rk
(all of the atoms ri must occur as heads of clauses in P )
in response to the query
?- r1, r2, ..., rk.
that is, the question whether or not P |= G,
prolog can sometimes crash and fail to give an answer!
This will be the case when P contains an implication loop, e.g.
p :- q.
q :- s.
s :- p.
and goal G contains an atom ri from which the loop
is accessible via resolutions.

prolog crashes and does not answer
/* loop-001.pl */
p :- q.
q :- p.
q.
% /Users/jdavoren/Prolog/Prolog-code/loop-001
compiled 0.00 sec, 4 clauses
1 ?-

prolog crashes and does not answer
/* loop-001.pl */
p :- q.
q :- p.
q.
% /Users/jdavoren/Prolog/Prolog-code/loop-001
compiled 0.00 sec, 4 clauses
1 ?- p.

prolog crashes and does not answer
/* loop-001.pl */
p :- q.
q :- p.
q.
% /Users/jdavoren/Prolog/Prolog-code/loop-001
compiled 0.00 sec, 4 clauses
1 ?- p.
ERROR: Out of local stack
Exception: (3,941,683) q ?

prolog crashes and does not answer
/* loop-001.pl */
p :- q.
q :- p.
q.
% /Users/jdavoren/Prolog/Prolog-code/loop-001
compiled 0.00 sec, 4 clauses
1 ?- p.
ERROR: Out of local stack
Exception: (3,941,683) q ? creep
Exception: (3,941,681) q ?

prolog crashes and does not answer
/* loop-001.pl */
p :- q.
q :- p.
q.
% /Users/jdavoren/Prolog/Prolog-code/loop-001
compiled 0.00 sec, 4 clauses
1 ?- p.
ERROR: Out of local stack
Exception: (3,941,683) q ? creep
Exception: (3,941,681) q ?
PROBLEM: atom p really is a logical consequence of the
program P listed in loop-001.pl.

Exercise: how prolog answers
/* exercise.pl */
p1 :- q1
p2 :- q2.
p3 :- false.
q1 :- r1.
q2 :- p2.
q2.
r1.
r2 :- p3.
Complete the table to show how prolog will
answer the goal queries shown:
Query:
true
false
crash
?- p1.
?- p2.
?- p3.
?- q1.
?- q2.
?- r1.
?- r2.

Exercise solution: how prolog answers
/* exercise.pl */
p1 :- q1
p2 :- q2.
p3 :- false.
q1 :- r1.
q2 :- p2.
q2.
r1.
r2 :- p3.
Completed table showing how prolog will
answer the goal queries shown:
Query:
true
false
crash
?- p1.
×
?- p2.
×
?- p3.
×
?- q1.
×
?- q2.
×
?- r1.
×
?- r2.
×

Why resolution works: Clausal Form

Why resolution works: Clausal Form
Each program clause q :- p1, p2, ..., pm.
(for m ⩾0)
is logically equivalent to the disjunction:
q ∨∼p1 ∨∼p2 ∨· · · ∨∼pm

Why resolution works: Clausal Form
Each program clause q :- p1, p2, ..., pm.
(for m ⩾0)
is logically equivalent to the disjunction:
q ∨∼p1 ∨∼p2 ∨· · · ∨∼pm
For each goal r1, r2, ..., rk.
(for k ⩾1),
let B be the goal formula: the conjunction of the atoms ri.

Why resolution works: Clausal Form
Each program clause q :- p1, p2, ..., pm.
(for m ⩾0)
is logically equivalent to the disjunction:
q ∨∼p1 ∨∼p2 ∨· · · ∨∼pm
For each goal r1, r2, ..., rk.
(for k ⩾1),
let B be the goal formula: the conjunction of the atoms ri.
Then the negation ∼B is logically equivalent to the disjunction:
∼r1 ∨∼r2 ∨· · · ∨∼rk

Why resolution works: Clausal Form
A literal is an atomic formula or the negation of an atomic formula,

Why resolution works: Clausal Form
A literal is an atomic formula or the negation of an atomic formula,
and a clause is a disjunction of literals.

Why resolution works: Clausal Form
A literal is an atomic formula or the negation of an atomic formula,
and a clause is a disjunction of literals.
In clausal form, program clauses include exactly one positive literal
(the head q), and the rest are negative literals. Written in clausal
form: { q, ∼p1, ∼p2, . . . , ∼pm }

Why resolution works: Clausal Form
A literal is an atomic formula or the negation of an atomic formula,
and a clause is a disjunction of literals.
In clausal form, program clauses include exactly one positive literal
(the head q), and the rest are negative literals. Written in clausal
form: { q, ∼p1, ∼p2, . . . , ∼pm }
In clausal form, negated goal formulas include zero positive literals,
as all its literals are negative. Written in clausal form:
{ ∼r1, ∼r2, . . . , ∼rk }

Why resolution works: Clausal Form
A literal is an atomic formula or the negation of an atomic formula,
and a clause is a disjunction of literals.
In clausal form, program clauses include exactly one positive literal
(the head q), and the rest are negative literals. Written in clausal
form: { q, ∼p1, ∼p2, . . . , ∼pm }
In clausal form, negated goal formulas include zero positive literals,
as all its literals are negative. Written in clausal form:
{ ∼r1, ∼r2, . . . , ∼rk }
A logic formula is a Horn clause if and only if it is logically
equivalent to a clause with at most one positive literal.

Why resolution works: Clausal Form
A literal is an atomic formula or the negation of an atomic formula,
and a clause is a disjunction of literals.
In clausal form, program clauses include exactly one positive literal
(the head q), and the rest are negative literals. Written in clausal
form: { q, ∼p1, ∼p2, . . . , ∼pm }
In clausal form, negated goal formulas include zero positive literals,
as all its literals are negative. Written in clausal form:
{ ∼r1, ∼r2, . . . , ∼rk }
A logic formula is a Horn clause if and only if it is logically
equivalent to a clause with at most one positive literal.
Resolution developed for Horn clause fragment of logic.

Why resolution works: Clausal Form
When prolog attempts to answer the query ?- G
after loading logic program P,
the refutation approach supposes goal G fails
and attempts to derive the empty goal □.

Why resolution works: Clausal Form
When prolog attempts to answer the query ?- G
after loading logic program P,
the refutation approach supposes goal G fails
and attempts to derive the empty goal □.
If goal G in negated clausal form is { ∼q, ∼r1, ∼r2, . . . , ∼rk }
and program clause A is { q, ∼p1, ∼p2, . . . , ∼pm },

Why resolution works: Clausal Form
When prolog attempts to answer the query ?- G
after loading logic program P,
the refutation approach supposes goal G fails
and attempts to derive the empty goal □.
If goal G in negated clausal form is { ∼q, ∼r1, ∼r2, . . . , ∼rk }
and program clause A is { q, ∼p1, ∼p2, . . . , ∼pm },
then the resolvent G′ of G with A is the new goal clause
{ ∼p1, ∼p2, . . . , ∼pm, ∼r1, ∼r2, . . . , ∼rk }

Why resolution works: Clausal Form
When prolog attempts to answer the query ?- G
after loading logic program P,
the refutation approach supposes goal G fails
and attempts to derive the empty goal □.
If goal G in negated clausal form is { ∼q, ∼r1, ∼r2, . . . , ∼rk }
and program clause A is { q, ∼p1, ∼p2, . . . , ∼pm },
then the resolvent G′ of G with A is the new goal clause
{ ∼p1, ∼p2, . . . , ∼pm, ∼r1, ∼r2, . . . , ∼rk }
If goal G in negated clausal form is { ∼q, ∼r1, ∼r2, . . . , ∼rk }
and program clause A is { q },

Why resolution works: Clausal Form
When prolog attempts to answer the query ?- G
after loading logic program P,
the refutation approach supposes goal G fails
and attempts to derive the empty goal □.
If goal G in negated clausal form is { ∼q, ∼r1, ∼r2, . . . , ∼rk }
and program clause A is { q, ∼p1, ∼p2, . . . , ∼pm },
then the resolvent G′ of G with A is the new goal clause
{ ∼p1, ∼p2, . . . , ∼pm, ∼r1, ∼r2, . . . , ∼rk }
If goal G in negated clausal form is { ∼q, ∼r1, ∼r2, . . . , ∼rk }
and program clause A is { q },
then the resolvent G′ of G with A is the new goal clause
{ ∼r1, ∼r2, . . . , ∼rk }, with G′ being □if k = 0.

Soundness/Corrrectness of Propositional prolog
Given a logic program P loaded into prolog
together with a goal G, all of whose atoms
occur as heads of clauses in P,

Soundness/Corrrectness of Propositional prolog
Given a logic program P loaded into prolog
together with a goal G, all of whose atoms
occur as heads of clauses in P,
If prolog answers true to the query ?- G

Soundness/Corrrectness of Propositional prolog
Given a logic program P loaded into prolog
together with a goal G, all of whose atoms
occur as heads of clauses in P,
If prolog answers true to the query ?- G
then it is the case that P |= G.

Soundness/Corrrectness of Propositional prolog
Given a logic program P loaded into prolog
together with a goal G, all of whose atoms
occur as heads of clauses in P,
If prolog answers true to the query ?- G
then it is the case that P |= G.
If prolog answers false to the query ?- G

Soundness/Corrrectness of Propositional prolog
Given a logic program P loaded into prolog
together with a goal G, all of whose atoms
occur as heads of clauses in P,
If prolog answers true to the query ?- G
then it is the case that P |= G.
If prolog answers false to the query ?- G
then P ∪{∼B} is satisfiable, where B is the
conjunction of atoms in G, so P ̸|= G.

Soundness/Corrrectness of Propositional prolog
Given a logic program P loaded into prolog
together with a goal G, all of whose atoms
occur as heads of clauses in P,
If prolog answers true to the query ?- G
then it is the case that P |= G.
If prolog answers false to the query ?- G
then P ∪{∼B} is satisfiable, where B is the
conjunction of atoms in G, so P ̸|= G.
But . . . incompleteness: prolog can crash and
fail to answer when it really is the case that P |= G.

Next Up: Negation in prolog

