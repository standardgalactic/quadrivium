©2019 MathByte Academy

The __get__ method
Important to understand how __get__ is being called
class TimeUTC:
def __get__(self, instance, owner_class):
return datetime.utcnow().isoformat()
class Logger:
current_time = TimeUTC()
à Logger defines a single instance of TimeUTC as a class attribute
à because TimeUTC implements __get__ Python will use that method when retrieving the 
instance attribute value
But we can access the attribute from:
à the Logger class itself
à an instance of the Logger class
So, when __get__ is called, we may want to know:
à which instance was used (if any)
à None if called from class
Logger.current_time
l.current_time
à what class owns the TimeUTC (descriptor) instance
à Logger in this case
à this is why we have the signature: __get__(self, instance, owner_class)
©2019 MathByte Academy

The __get__ method
So we can return different values from __get__ depending on:
à called from class
à called from instance
very often, we choose to:
à return the descriptor (TimeUTC) instance when called from class itself (Logger class)
à gives us an easy handle to the descriptor instance
à return the attribute value when called from an instance of the class (Logger instance)
class TimeUTC:
def __get__(self, instance, owner_class):
if not instance:
return self
return datetime.utcnow().isoformat()
©2019 MathByte Academy

The __set__ method
The __set__ signature is as follows:
self, instance, value
à self: just like for the __get__, this references the descriptor instance, like any regular method
à instance: the instance the __set__ method was called from
à value: the value we want to assign to the attribute
You'll notice there is no owner_class like we have in the __get__ method
à setters (and deleters) are always called from instances
à descriptors are meant to be used for instance properties
©2019 MathByte Academy

Caveat with Set and Delete (and Get)
There is one really important caveat with __set__ and __delete__
class Logger:
current_time = TimeUTC()
notice that we have only created a single instance 
of the descriptor
So what happens when we do this?
à any instance of Logger will be referencing the same instance of TimeUTC
à the same instance of TimeUTC is shared by all instances of Logger
à in this case it does not matter
__get__ just returns the current UTC time
l1 = Logger()
l2 = Logger()
©2019 MathByte Academy

Caveat with Set and Delete (and Get)
But what happens when we have to "store" and "retrieve" data from the instances?
class Point2D:
x = IntegerValue()
y = IntegerValue()
Suppose IntegerValue is a data descriptor
à implements __get__ and __set__ methods
two separate instances of IntegerValue
assigned to the class attributes x and y
p1 = Point2D()
p2 = Point2D()
two separate instances of Point2D
but what object does p1.x reference?
à the class attribute x
what about p2.x?
à the same class attribute x
à the same instance of IntegerValue
à we have to be mindful of which instance we are "storing" the data for
à this is one of the reasons both __get__ and __set__ need to know the instance
à one of the arguments
©2019 MathByte Academy

Coding
©2019 MathByte Academy

