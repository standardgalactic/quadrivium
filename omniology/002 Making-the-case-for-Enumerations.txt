©2019 MathByte Academy

How to deal with collections of related constants?
We could try this approach:
RED = 1
GREEN = 2
BLUE = 3
COLORS = (RED, GREEN, BLUE)
and then we could use it in our code this way:
pixel_color = {RED: 255, BLUE: 0, GREEN: 200}
pixel_color[RED] à 255
©2019 MathByte Academy

But there's some downsides:
1 in COLORS à True
RED in COLORS à True
but:
is 1 really a color?
does the string 'RED' correspond to a valid color name?
à maybe do this instead:
RED = 'red'
GREEN = 'green'
BLUE = 'blue'
COLORS = (RED, GREEN, BLUE)
à repetitive code!
à later can change associated values:
RED = 'violet'
à could run into bugs
RED = 'red'
GREEN = 'red'
BLUE = 'blue'
à non-unique values by mistake!
à RED * 2
à this is meaningless!
RED < GREEN à True
à meaningless!
©2019 MathByte Academy

What we really want…
an immutable collection of related constant members:
à unique associated values
à have unique names (that may have meaning)
à have an associated constant value
à operations such as RED * 2 or RED < GREEN are not even allowed
à supports enumerating members by name
à 'RED', 'GREEN', 'BLUE'
à lookup member by name
à lookup member by value
©2019 MathByte Academy

Maybe use a class?
class Colors:
RED = 1
GREEN = 2
BLUE = 3
Colors.RED
hasattr(Colors, 'RED')
getattr(Colors, 'RED')
à how do we look up a member based on it's value?
à how do we iterate the members?
à we can, but is order preserved?
à still cannot guarantee uniqueness of values
©2019 MathByte Academy

Aliases
Sometimes we want multiple symbols to refer to the same "thing"
Consider RECTANGLE, SQUARE and RHOMBUS to be aliases for POLY_4
POLY_4 = 4
RECTANGLE = 4
SQUARE = 4
RHOMBUS = 4
POLY_3 = 3
TRIANGLE = 3
EQUILATERAL = 3
ISOSCELES = 3
à lookup value 3
à return POLY_3
à lookup name SQUARE
à return POLY_4
Consider TRIANGLE, EQUILATERAL and ISOCELES to be aliases for POLY_3
à values are still unique, names are just 
aliases to the first one
POLY_4
(4)
RECTANGLE
SQUARE
RHOMBUS
©2019 MathByte Academy

