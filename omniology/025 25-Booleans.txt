
The bool class
Python has a concrete bool class that is used to represent Boolean values.
However, the bool class is a subclass of the int class
issubclass(bool, int)
PEP 285
Two constants are defined: True and False
They are singleton objects of type bool
True
False
isinstance(True, bool)
isinstance(True, int)
→True
→True
→True
0xF345
1
bool
int
0xA101
0
bool
int
i.e. they posses all the properties and 
methods of integers, and add some 
specialized ones such as and, or, etc

is vs ==
Because True and False are singleton objects, they will always retain their same memory address
throughout the lifetime of your application
So, comparisons of any Boolean expression to True and False can be performed using 
either the is (identity) operator, or the == (equality) operator
a == True
a is True
But since bool objects are also int objects, they can also be interpreted as the integers 1 and 0
int(True) →1
int(False) →0
But:
True and 1 are not the same objects
False and 0 are not the same objects
True is 1
→False
True == 1
→True
id(True) 
id(1)
id(False) 
id(0)
where a is a bool object

Booleans as Integers
This can lead to "strange" behavior you may not expect!
True > False
→True
In fact, any integer operation will also work with booleans (//, %, etc)
True + True + True →3
(True + True + True) % 2 →1
-True →-1
100 * False →0
(1 == 2) == False
(1 == 2) == 0
→True
→True

The Boolean constructor
The Boolean constructor
bool(x)
returns True when x is True, 
Wow, that sounds like a useless constructor!
What really happens is that many classes contain a definition of how to cast instances of 
themselves to a Boolean
Integers have a truth value defined according to this rule:
bool(0) →False
bool(x) →True for any int x 
0
and False when x is False
But not at all!
– this is sometimes called the truth value (or truthyness) of an object
(upcoming video)
(0 is falsy)
(x is truthy)

Examples
bool(0) →False
bool(1) →True
bool(100) →True
bool(-1) →True

Code

