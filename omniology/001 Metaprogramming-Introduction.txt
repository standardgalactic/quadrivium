© 2019 MathByte Academy

What is metaprogramming?
Wikipedia:
Metaprogramming is a programming technique in which computer programs 
have the ability to treat other programs as their data. 
It means that a program can be designed to read, generate, analyze or 
transform other programs, and even modify itself while running.
à basic idea is we can use code to modify code
à keeps code DRY
à Don't Repeat Yourself
à some functionality requires Python 3.6 or above
© 2019 MathByte Academy

You already know some metaprogramming techniques…
à decorators
use code to modify the behavior of another piece of code
à we'll explore class decorators a bit, where we decorate classes, not just functions
à descriptors
use code to essentially modify the behavior of the dot (.) operator
à as well as decorator classes where we use classes to decorate
© 2019 MathByte Academy

Metaclasses
We'll look at what metaclasses are
à how they are used in the creation of classes (types)
à how we can use them to hook into the class creation cycle
à we'll still stick to single inheritance
à metaclasses don't always play nicely with multiple inheritance
à think of a metaclass as a class(type) factory
© 2019 MathByte Academy

Word of caution
à superficially, metaclasses are not difficult to understand
à knowing when to use a metaclass is not easy
à unless you come across a problem where the use of a metaclass is obvious
à don't use them!
à makes code harder to read
à just because you have a new hammer, does not mean everything is a nail
à if you're writing a library/framework
à maybe use metaclasses
à if you're writing application code
à probably not!
“Metaclasses are deeper magic than 99% of users should ever worry about. If you 
wonder whether you need them, you don’t (the people who actually need them know 
with certainty that they need them, and don’t need an explanation about why).”
— Tim Peters
à but the details can get complicated
à beware of the "solution in search of a problem" syndrome!
© 2019 MathByte Academy

Word of caution
so you are unlikely to ever need to use metaclasses
à unless you’re writing a library or framework
à still good to understand how they work
à provides deeper insight into Python internal mechanics and how things work
à it's actually fun!
à worth the time to understand, even if you don't use
© 2019 MathByte Academy

Word of caution
this is going to be a wild ride!
à you will get confused
à when you do, go back to previous lectures and code videos
à some of the concepts just take time to absorb and remember
(I still do on occasion)
à don't rush
à you will probably need to watch some videos multiple times
à take time to experiment with code
© 2019 MathByte Academy

