
Vagrant  
Vagrant is a open source tool for working with virtual environments. Vagrant acts as a wrapper and  sits 
on top of the virtualization solution (VMware, Hyper-V ,VirtualBox or libvirt)  and provides a simple 
command line interface to manage the VM's with the custom configuration.  
  
  
Why to use Vagrant 
   

No need to learn different CLI command of Virtualization providers , vagrant takes cares to manage 
the underlying VM's with its easy CLI interface. 

Well defined environments as configuration used to create the environments is in simple text files.  
User can recreate as many Vagrant Instances (VMs)  using same Vagrant file . 
Vagrant is capable of executing configuration management software like Puppet/Ansible/Chef once 
the base system is ready (using box). This help o setup the environment (System + Application) on 
the target machines in automated way. 

Developer can create/destroy multiple development environments in minutes. 

As vagrant is wrapper only , you can choose the guest OS images supported by the  virtualization 
platform you choice. Example on CentOS 7 , you may run CentOS 6 VM. 
  

How Vagrant Works 
 
Vagrant performs the following tasks with single command :  
  
  Creates a VM using base images. 
  Configures the virtual machine specific settings and configuration using the Vagrantfile.     
  Automates the configuration management of the virtual machine using the 
configuration management software. 
 
Workflow  

Vagrant Terminology 
 
Box 
:  
A box is a packaged Vagrant environment, typically a virtual machine. 
 
Provider 
:  
A provider provides virtualization support. Providers can be of02 types; 
  
 
Local  
:  VirtualBox,VMware,Docker,Hyper-V 
 
 
Remote  
:  AWS Cloud, Openstack 
 
 
Vagrantfile : 
Configuration file for the target machine’s config. Contains information like  
 Which Base Image to use. 
 What will be the hostname 
 What will be the network. 
 Any specific compute . 
 Provisioner Config (Shell/Automation Tools) 
 
Provisioner:  
A provisioner is a tool to set up the virtual environment, and can be as simple as a 
 
 
shell script, also it can be automation toll like Chef,Ansible or Puppet. 
 
Example of Shell Provisioner 
 
config.vm.provision "shell", inline: <<-SHELL 
  useradd demouser 
  yum install httpd 
  systemctl start httpd.service 
SHELL 
 
Example of Automation Tool Provisioner 
 
config.vm.provision "ansible" do |ansible| 
    ansible.verbose = "v" 
    ansible.playbook = "playbook.yml" 
  end 
end 

LAB Details  and Pre-Req’s   
 
In this session I am going to demonstrate vagrant on a Linux machine. Details are :  
 
Host  
 
 
:  CentOS 7.3 x86_64 
Host Platform 
 
:  VMware Workstation 12 
Hardware Virtualization 
:  AMD-v/Intel VT-x  
 
Host Network  
 
:   VM have 02 vNICs 
                                                      
    vNIC1 : Host Only (Host Only Connectivity)  90.10.10.10/24 
 
 
 
       
    vNIC2 : Bridged  (Internet Connectivity)     192.168.1.20/24 
 
VirtualBox Version  
 
:   5.1.x86_64 
Vagrant Version  
 
:   1.9.3 
 
Update the system and install the pre-req packages for VirtualBox to work. 
# yum update –y 
# yum install gcc make kernel-devel -y 
 
Not mandatory , but let’s install “X Windows”, to easily look into the VirtualBox issues , if any. 
# yum groupinstall "X Window System"  
 
Take a reboot of the system. 
# init 6 
 

Installation 
 
1.
Download the latest available versions of Virtualbox and Vagrant software from the download pages of 
the products. 
 
 
VirtualBox 
: 
https://www.virtualbox.org/wiki/Linux_Downloads 
 
Vagrant  
: 
https://www.vagrantup.com/downloads.html 
 
2.
Once software installers downloaded (they are rpm's generally) , transfer those to the machine going 
to be configured as Vagrant server. 
3.
Install the Virtualbox and Vagrant RPM. 
 
# yum localinstall /software/VirtualBox-5.1-5.1.18_114002_el7-1.x86_64.rpm 
# yum localinstall /software/vagrant_1.9.3_x86_64.rpm 
 
# /sbin/vboxconfig 
 
“vboxconfig” will install, configure the virtualbox modules and start the service.. 
 
 
Validate the Installation 
 
# vboxmanage --version 
# vagrant --version 
 
vboxmanage is the CLI provided by the VirtualBox package. 
 
 

Downloading Base Image  
 
Though you can build a virtual machine from scratch, but that is going to a time taking process. You can 
find  different images from Atlas ( Vagrant Repo) for your Virtualization Provider.  
 
Vagrant uses a base image to quickly clone a virtual machine. These base images are known as “boxes”. 
 
Vagrant Image Repository 
https://atlas.hashicorp.com/boxes/search?_ga=1.263880075.66532464.1491004385 
 
To download base Image 
 
# vagrant box add centos/7 
 
Note – In the above example , we are downloading base image with name “centos/7” .  
 
Image download will take sometime depending your internet connectivity as Image will be download the 
Atlas repo. 
 
Once box download successful, you can validate it running the below command. 
 
# vagrant box list 
 
Set the Path of Virtual Machine 
 
# vboxmanage setproperty machinefolder /app_store/virtual_machines 
 
 
 

Initializes a new Vagrant environment 
# mkdir /path/to/directory 
# cd /path/to/directory 
# vagrant init <box_image> 
 
example  
# mkdir /app_store/centos7_demo 
# cd /app_store/centos7_demo 
# vagrant init centos/7 
 
"vagrant init “ creates Vagrantfile in the current directory, you can customize the file as per requirement. 
 
Start and provision the vagrant environment 
# vagrant up  
 
Connect to machine via SSH 
# vagrant ssh 
  Or 
# ssh -p <port> 127.0.0.1 -l vagrant 
 
Please Note - when you run multiple vagrant machines, vagrant allocates new  ssh port forwarding for every machine. 
 
Default credentials for Vagrant machine is generally “vagrant/vagrant”. 
 
List all the VMs  
# vagrant global-status 
 

 
 To know the vagrant port mapping 
# vagrant port <vagrant machine> 
 
To display IP address of guest machine 
# vagrant ip-show 
 
Please Note – you need to install “vagrant-ip-show” before run can run the aforementioned command.  
 
# vagrant plugin install vagrant-ip-show 
 
Often used Vagrant CLI commands  
 
# vagrant status  
# outputs status of the vagrant machine 
# vagrant global-status 
# outputs status Vagrant environments for this user 
# vagrant up 
 
# starts and provisions the vagrant environment 
# vagrant halt 
 
# stops the vagrant machine 
# vagrant suspend  
# suspends the machine 
# vagrant destroy  
# stops and deletes all traces of the vagrant machine 
# vagrant reload  
# restarts vagrant machine, loads new Vagrantfile config 
# vagrant port 
 
# displays information about guest port mappings 

Ansible Provisioner 
 
The Vagrant Ansible provisioner allows you to provision the guest using Ansible playbooks by 
executing Ansible-playbook from the Vagrant host. 
 
Pre-Req’s 
 
The following software are pre-requesties to use the Anisole provisioner. 

Vagrant. 

Virtualbox. 

Ansible. 
 
If unaware on how to install Vagrant and Virtualbox refer the below youtube videos 
Vagrant and Virtualbox   
https://www.youtube.com/watch?v=IXjhfsIocnw 
Ansible  
 
 
https://www.youtube.com/watch?v=ChSCEXQHfI4 
 
Why to use Ansible over SHELL Provisioner 
 

Ansible can do parallel run of the playbook on multiple servers. 

Ansible is able to support whole stack configuration. 

Ansible is able to template the c0nfiguration files , whereas shell scripts are NOT. 

Ansible can be source controlled. 

No need to have scripting knowledge. 
 
 

How Ansible Provisioner Works 
When Ansible is defined as provisioner In the “Vagrantfile” it make the use of the playbook mentioned in 
the provisioner config  to configure the target guest machine. 
 
o
Vagrant creates inventory file in the base directory of the vagrant machine.  
o
Vagrant executes the ansible playbook with the options defined in the Vagrantfile. 
o
Ansible use default vagrant user for the communication. 
o
Ansible makes the use for ssh-key based authentication for communicating with the guest. 
o
SUDO configuration for vagrant user to be enabled ,so command requiring the root privileges can be       
executed on the guest. 
 
Ansible Inventory Generated by Vagrant 
[root@vagrant-demo ansible-vag]# cat .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory 
# Generated by Vagrant 
default ansible_ssh_host=127.0.0.1 ansible_ssh_port=2222 ansible_ssh_user='vagrant' 
ansible_ssh_private_key_file='/app_store/ansible-vag/.vagrant/machines/default/virtualbox/private_key' 
[root@vagrant-demo ansible-vag]# 
 
Vagrantfile with Ansible as provisioner 
Vagrant.configure("2") do |config| 
  config.vm.box = "centos/7" 
  config.vm.box_check_update = false 
  # Sample Config with Ansible as provisoner 
  config.vm.provision :ansible do |ansible| 
  ansible.playbook = "playbook.yml" 
  end 
end 
 
In this example playbook.yml is kept in the vagrant guest’s base directory.  If playbook or using role ,in 
different path , custom path can be specified . 
 
 

Example Vagrant Run with Ansible Provisoner 
[root@vagrant-demo ansible-vag]# ls –l 
index.html playbook.yml Vagrantfile 
[root@vagrant-demo ansible-vag]# vagrant up 
Bringing machine 'default' up with 'virtualbox' provider... 
==> default: Importing base box 'centos/7'... 
==> default: Matching MAC address for NAT networking... 
. 
. 
==> default: Running provisioner: ansible... 
    default: Running ansible-playbook... 
PLAY [all] ********************************************************************* 
 
TASK [setup] ******************************************************************* 
ok: [default] 
 
TASK [1. Install Latest Version  HTTP/Apache RPMs] ***************************** 
changed: [default] 
 
TASK [2. Copy the Standard index.html file] ************************************ 
changed: [default] 
 
TASK [3. Add apache iptable rule] ********************************************** 
changed: [default] 
 
TASK [4. Save iptable rule] **************************************************** 
changed: [default] 
 
TASK [5. Start httpd service] ************************************************** 
changed: [default] 
 
RUNNING HANDLER [restart httpd service] **************************************** 
changed: [default] 
 
PLAY RECAP ********************************************************************* 
default                    : ok=7    changed=6    unreachable=0    failed=0 
[root@vagrant-demo ansible-vag]# 
 

Run Ansible Playbook Manually  
 
There might be situations when you want to re-run the playbook (updated playbook ?) on the target 
vagrant guest , can run as below 
 
# cd /path/to/vagrant_guest/dir 
# ansible-playbook  playbook.yml -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory 
 


