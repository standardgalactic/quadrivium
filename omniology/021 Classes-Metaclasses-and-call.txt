__call__
© 2019 MathByte Academy

class Student(Person, metaclass=MyMeta):
class_attr = 100
def my_func(self):
pass
Declarative Creation of Classes
when Python executes this code:
it is essentially doing the following steps for us:
à name = 'Student'
à bases = (Person, )
à creates a class dictionary, by calling __prepare__
à executes the class body within that class dictionary
à calls the metaclass to create the Student class
à assigns the created class to the symbol Student in our scope
MyMeta(name, bases, class_dict)
à plus a few other things (__qualname__, __doc__)
© 2019 MathByte Academy

Programmatic Creation of Classes
We can reproduce those same steps ourselves
à define name, bases
à create an initial class dictionary
(so like calling __prepare__, but there is no __prepare__
here, we're on our own)
à execute the code in the context of the class dictionary
à fully populated class dictionary
à calculate and add __qualname__ to class dictionary
à add __doc__ to class dictionary
à call metaclass
type(name, bases, class_dict)
à there's a lot going on
à at the end though, the metaclass is called
© 2019 MathByte Academy

How do we make instances of our custom class callable?
à implement the __call__ method in our class
à instances of the class Person are now callable
class Person:
def __call__(self):
print('__call__')
p = Person()
à call the class to create an instance of it
p()
à '__call__'
à __call__ was called as a method bound to p
à so an object is callable if the class used to create it implements __call__
à but the Person class is itself callable
à so the class used to create Person must implement __call__
à the metaclass of Person
© 2019 MathByte Academy

What does the __call__ Method in  type do?
à it is called when we create instances of our  Person class
p = Person(…)
à calls Person.__new__ to create a new instance of the Person class
à calls __init__ bound to that new instance returned by __new__
à type is a class that implements a __call__ method
à it will get called as a method bound to the Person class
à returns the new, initialized instance of Person
© 2019 MathByte Academy

Person
__new__
__init__
type/custom
__call__
p = Person()
instance creation
instance
of
type.__call__
Person.__new__
Person
instance
initialized instance of Person
Instance Creation
© 2019 MathByte Academy

The metaclass of type
à a class is callable because it's metaclass implements __call__
à every class has a metaclass
à the class we use to create the class
à type is a class
à it also has a metaclass
à type(type) is type
à itself
à so it has a __call__ method
à that's why type is callable
à it behaves the same way
à calls type.__new__
à returns the newly created object (the class)
à calls __init__ bound to the newly created object (the class)
à returns the newly created object (the class)
© 2019 MathByte Academy

type/custom
__new__
__init__
type(type/custom)
__call__
Person = type(name, bases, cls_dict)
instance (of type) creation
instance
of
type.__call__
type.__new__
Person
class
initialized Person class
Class Creation
© 2019 MathByte Academy

Python process
__qualname__
__docs__
Declarative Approach
à when we use class declaration, process is almost the same, just tweaked a bit
class Person(metaclass=type):
…
type(type/custom)
__call__
instance (of type) creation
type/custom
__new__
__init__
__prepare__
new Person class
© 2019 MathByte Academy

