©2019 MathByte Academy

Delegating to parent
Often when overriding methods, we need to delegate back to the parent class
The most common example is the __init__ method
à calling a method specifically in the ancestry hierarchy (or a sibling class as we'll see later)
class Person:
def __init__(self, name, age):
self.name = name
self.age = age
class Student(Person):
def __init__(self, name, age, major):
self.major = major
self.name = name
self.age = age
there has to be a 
better way!
We can explicitly call a method from the parent class
à delegating to parent
à super()
super().method()
à will call method in the parent, but bound to the instance it is called from
©2019 MathByte Academy

Example
class Person:
def sing(self):
return "I'm a lumberjack and I'm OK"
class Student(Person):
def sing(self):
return super().sing() + '\n' + "I sleep all night and I work all day" 
s = Student()
print(s.sing())
à
I'm a lumberjack and I'm OK
I sleep all night and I work all day
Careful! If you forget super() in super().sing() and 
use self.sing() you'll end up with infinite recursion!
©2019 MathByte Academy

Example
à delegation works its way up the inheritance hierarchy until it finds what it needs
class Person:
def sing(self):
return "I'm a lumberjack and I'm OK"
class MusicStudent(Student):
def sing(self):
return super().sing() + '\n' + "I sleep all night and I work all day" 
class Student(Person):
pass
m = MusicStudent()
print(m.sing())
à
I'm a lumberjack and I'm OK
I sleep all night and I work all day
print(s.sing())
à
I'm a lumberjack and I'm OK
s = Student()
©2019 MathByte Academy

Example
__init__
class Person:
def __init__(self, name, age):
self.name = name
self.age = age
class Student:
def __init__(self, name, age, major):
super().__init__(name, age)
self.major = major
delegate back to parent
and do some additional work
When delegating, you don't have to delegate first
class Student:
def __init__(self, name, age, major):
self.major = major
super().__init__(name, age)
but usually safer to do so
©2019 MathByte Academy

Why?
à executing the delegate method may modify something you've already set in the instance
class Person:
def __init__(self, name, age):
self.name = name
self.age = age
self.major = 'N/A'
class Student(Person):
def __init__(self, name, age, major):
self.major = major
super().__init__(name, age)
s = Student('douglas', 42, 'literature')
self.name à douglas
self.age à 42
self.major à N/A
©2019 MathByte Academy

Delegation and Method Binding
when we call a method from an instance
à method is bound to the instance
when we delegate from an instance to parent method
à method is also bound to the instance it was called from
class Person:
def hello(self):
print('In Person class:', self)
class Student(Person):
def hello(self):
print('In Student class:', self)
super().hello()
p = Person()
s = Student()
p.hello() à In Person class: <__main__.Person object at 0x106cc3128>
à
In Student class: <__main__.Student object at 0x106cc3da0> 
In Person class <__main__.Student object at 0x106cc3da0>
s.hello()
©2019 MathByte Academy

Where things get really weird…
Since delegated method are bound to the calling instance
à any method called from the parent class will use the calling instance's "version" of the method
class Student(Person):
def do_work(self):
print('Student studies')        
def routine(self):
super().routine()
print('but not before a quick game!') 
class Person:
def wake_up(self):
print('Person awakes')
def do_work(self):
print('Person works')
def sleep(self):
print('Person sleeps')
def routine(self):
self.wake_up()
self.do_work()
self.sleep()
p = Person()
p.routine()
Person awakes
Person works 
Person sleeps
à
s = Student()
s.routine()
à Person awakes
Student studies
Person sleeps
but not before a quick game!
©2019 MathByte Academy

Coding
©2019 MathByte Academy

