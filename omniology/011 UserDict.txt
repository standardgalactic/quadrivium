© 2019 MathByte Academy

Custom Dictionaries
In the previous videos of this section, we looked at a variety of specialized dictionaries.
They extend the plain dict type with additional capabilities geared towards some specialized goal
Sometimes, we want to do the same.
à a dictionary that only allows certain types of keys (strings keys only à JSON)
à a dictionary that only allows keys from some finite set of pre-defined keys
à a dictionary that only allows numerical values
We could just create a custom class that uses a plain dict as a backing structure and write 
custom __getitem__ and __setitem__ methods
à often good enough, but we don't inherit all the functionality that dicts have
© 2019 MathByte Academy

Subclassing dict
We can create a custom class that inherits from dict
We can override various methods to customize the dictionary behavior
But there is a caveat here
If we have a parent class that implements a method and we 
override that method in a subclass
- calling that method on a subclass instance will invoke the 
overridden method
dicts have __getitem__ and __setitem__ methods
d['a']
d.__getitem__('a')
d['a'] = 10
d.__setitem__('a', 10)
We would expect the dictionary class to use these __xxx__ methods internally
.get()
.update()
and so on
These built-in types however, often use direct access to data (in C)
They do not guarantee they actually use these "special" methods
for
Even len(string) does not actually use __len__
© 2019 MathByte Academy

Alternative
If subclassing a dict is causing issues because of the special methods
we can use a predefined Python class:
collections.UserDict
It is not technically a subclass of dict
and implements key functionality we have in dictionaries
it uses a regular dictionary as a backing data structure
it is not a dict, but it is a mapping type
à views: items(), keys(), values()
à __setitem__ and __getitem__
and uses those internally as appropriate
à plus everything else we would expect from a dictionary
So it is essentially a head-start on recreating a Python dictionary from scratch that offers 
different subclassing possibilities
à Code section will help illustrate all this in more detail
© 2019 MathByte Academy

Code
© 2019 MathByte Academy

