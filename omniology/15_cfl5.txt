1
Properties of Context-Free 
Languages
Decision Properties
Closure Properties

2
Summary of Decision Properties
As usual, when we talk about “a CFL” 
we really mean “a representation for 
the CFL, e.g., a CFG or a PDA 
accepting by final state or empty stack.
There are algorithms to decide if:
1. String w is in CFL L.
2. CFL L is empty.
3. CFL L is infinite.

3
Non-Decision Properties
Many questions that can be decided for 
regular sets cannot be decided for CFL’s.
Example: Are two CFL’s the same?
Example: Are two CFL’s disjoint?
How would you do that for regular languages?
Need theory of Turing machines and 
decidability to prove no algorithm exists.

4
Testing Emptiness
We already did this.
We learned to eliminate useless 
variables.
If the start symbol is one of these, then 
the CFL is empty; otherwise not.

5
Testing Membership
Want to know if string w is in L(G).
Assume G is in CNF.
Or convert the given grammar to CNF.
w = ε is a special case, solved by testing if 
the start symbol is nullable.
Algorithm (CYK ) is a good example of 
dynamic programming and runs in time 
O(n3), where n = |w|.

6
CYK Algorithm
Let w = a1…an.
We construct an n-by-n triangular array 
of sets of variables.
Xij = {variables A | A =>* ai…aj}.
Induction on j–i+1.
The length of the derived string.
Finally, ask if S is in X1n.

7
CYK Algorithm – (2)
Basis: Xii = {A | A -> ai is a 
production}.
Induction: Xij = {A | there is a 
production A -> BC and an integer k, 
with i < k < j, such that B is in Xik and C 
is in Xk+1,j.

8
Example: CYK Algorithm
Grammar: S -> AB, A -> BC | a, B -> AC | b, C -> a | b
String w = ababa
X11={A,C} 
X22={B,C}  X33={A,C} 
X44={B,C}    X55={A,C}
X12={B,S}
X23={A}  
X34={B,S}   X45={A}

9
Example: CYK Algorithm
Grammar: S -> AB, A -> BC | a, B -> AC | b, C -> a | b
String w = ababa
X11={A,C} 
X22={B,C}  X33={A,C} 
X44={B,C}    X55={A,C}
X12={B,S}
X23={A}  
X34={B,S}   X45={A}
X13={}
Yields nothing

10
Example: CYK Algorithm
Grammar: S -> AB, A -> BC | a, B -> AC | b, C -> a | b
String w = ababa
X11={A,C} 
X22={B,C}  X33={A,C} 
X44={B,C}    X55={A,C}
X12={B,S}
X23={A}  
X34={B,S}   X45={A}
X13={A}
X24={B,S}    X35={A}

11
Example: CYK Algorithm
Grammar: S -> AB, A -> BC | a, B -> AC | b, C -> a | b
String w = ababa
X11={A,C} 
X22={B,C}  X33={A,C} 
X44={B,C}    X55={A,C}
X12={B,S}
X23={A}  
X34={B,S}   X45={A}
X13={A}
X24={B,S}    X35={A}
X14={B,S}

12
Example: CYK Algorithm
Grammar: S -> AB, A -> BC | a, B -> AC | b, C -> a | b
String w = ababa
X11={A,C} 
X22={B,C}  X33={A,C} 
X44={B,C}    X55={A,C}
X12={B,S}
X23={A}  
X34={B,S}   X45={A}
X13={A}
X24={B,S}    X35={A}
X14={B,S}
X25={A}
X15={A}

13
Testing Infiniteness
The idea is essentially the same as for 
regular languages.
Use the pumping lemma constant n.
If there is a string in the language of 
length between n and 2n-1, then the 
language is infinite; otherwise not.

14
Closure Properties of CFL’s
CFL’s are closed under union, 
concatenation, and Kleene closure.
Also, under reversal, homomorphisms
and inverse homomorphisms.
But not under intersection or 
difference.

15
Closure of CFL’s Under Union
Let L and M be CFL’s with grammars G 
and H, respectively.
Assume G and H have no variables in 
common.
Names of variables do not affect the 
language.
Let S1 and S2 be the start symbols of G 
and H.

16
Closure Under Union – (2)
Form a new grammar for L M by 
combining all the symbols and 
productions of G and H.
Then, add a new start symbol S.
Add productions S -> S1 | S2.

17
Closure Under Union – (3)
In the new grammar, all derivations 
start with S.
The first step replaces S by either S1 or 
S2.
In the first case, the result must be a 
string in L(G) = L, and in the second 
case a string in L(H) = M.

18
Closure of CFL’s Under 
Concatenation
Let L and M be CFL’s with grammars G 
and H, respectively.
Assume G and H have no variables in 
common.
Let S1 and S2 be the start symbols of G 
and H.

19
Closure Under Concatenation – (2)
Form a new grammar for LM by 
starting with all symbols and 
productions of G and H.
Add a new start symbol S.
Add production S -> S1S2.
Every derivation from S results in a 
string in L followed by one in M.

20
Closure Under Star
Let L have grammar G, with start symbol S1.
Form a new grammar for L* by introducing 
to G a new start symbol S and the 
productions S -> S1S | ε.
A rightmost derivation from S generates a 
sequence of zero or more S1’s, each of 
which generates some string in L.

21
Closure of CFL’s Under 
Reversal
If L is a CFL with grammar G, form a 
grammar for LR by reversing the body 
of every production.
Example: Let G have S -> 0S1 | 01.
The reversal of L(G) has grammar       
S -> 1S0 | 10. 

22
Closure of CFL’s Under 
Homomorphism
Let L be a CFL with grammar G.
Let h be a homomorphism on the 
terminal symbols of G.
Construct a grammar for h(L) by 
replacing each terminal symbol a by 
h(a).

23
Example: Closure Under 
Homomorphism
G has productions S -> 0S1 | 01.
h is defined by h(0) = ab, h(1) = ε.
h(L(G)) has the grammar with 
productions S -> abS | ab.

24
Closure of CFL’s Under 
Inverse Homomorphism
Here, grammars don’t help us, but a 
PDA construction serves nicely.
Let L = L(P) for some PDA P.
Construct PDA P’ to accept h-1(L).
P’ simulates P, but keeps, as one 
component of a two-component state a 
buffer that holds the result of applying 
h to one input symbol.

25
Architecture of P’
Buffer
State of P
Input:  0 0 1 1
h(0)
Stack
of P
Read first remaining
symbol in buffer as
if it were input to P.

26
Formal Construction of P’
States are pairs [q, w], where:
1. q is a state of P.
2. w is a suffix of h(a) for some symbol a.
Thus, only a finite number of possible values 
for w.
Stack symbols of P’ are those of P.
Start state of P’ is [q0 ,ε].

27
Construction of P’ – (2)
Input symbols of P’ are the symbols to 
which h applies.
Final states of P’ are the states [q, ε] 
such that q is a final state of P.

28
Transitions of P’
1. δ’([q, ε], a, X) = {([q, h(a)], X)} for 
any input symbol a of P’ and any stack 
symbol X.
When the buffer is empty, P’ can reload it.
2. δ’([q, bw], ε, X) contains ([p, w], ) if 
δ(q, b, X) contains (p, ), where b is 
either an input symbol of P or ε.
Simulate P from the buffer.

29
Proving Correctness of P’
We need to show that L(P’) = h-1(L(P)).
Key argument: P’ makes the transition 
([q0, ε], w, Z0)⊦*([q, x], ε, )              
if and only if P makes transition                  
(q0, y, Z0) ⊦*(q, ε, ), h(w) = yx, and x 
is a suffix of the last symbol of w.
Proof in both directions is an induction 
on the number of moves made.

30
Nonclosure Under Intersection
Unlike the regular languages, the class 
of CFL’s is not closed under .
We know that L1 = {0n1n2n | n > 1} is 
not a CFL (use the pumping lemma).
However, L2 = {0n1n2i | n > 1, i > 1} is.
CFG: S -> AB, A -> 0A1 | 01, B -> 2B | 2.
So is L3 = {0i1n2n | n > 1, i > 1}.
But L1 = L2 L3.

31
Nonclosure Under Difference
We can prove something more general:
Any class of languages that is closed under 
difference is closed under intersection.
Proof: L M = L – (L – M).
Thus, if CFL’s were closed under 
difference, they would be closed under 
intersection, but they are not.

32
Intersection with a Regular 
Language
Intersection of two CFL’s need not be 
context free.
But the intersection of a CFL with a 
regular language is always a CFL.
Proof involves running a DFA in parallel 
with a PDA, and noting that the 
combination is a PDA.
PDA’s accept by final state.

33
DFA and PDA in Parallel
DFA
PDA
S
t
a
c
k
Input
Accept
if both
accept
Looks like the
state of one PDA

34
Formal Construction
Let the DFA A have transition function δA.
Let the PDA P have transition function δP.
States of combined PDA are [q,p], where 
q is a state of A and p a state of P.
δ([q,p], a, X) contains ([δA(q,a),r], ) if 
δP(p, a, X) contains (r, ).
Note a could be , in which case δA(q,a) = q.

35
Formal Construction – (2)
Final states of combined PDA are those 
[q,p] such that q is a final state of A 
and p is an accepting state of P.
Initial state is the pair ([q0,p0] 
consisting of the initial states of each.
Easy induction: ([q0,p0], w, Z0)⊦*  
([q,p], , ) if and only if δA(q0,w) = q 
and in P: (p0, w, Z0)⊦*(p, , ).

