
What is a sequence?
In Math:
S = x1, x2, x3, x4, …
Note the sequence of indices: 1, 2, 3, 4, …
We can refer to any item in the sequence by using it's index number 
x2
or     S[2]
(countable sequence)
In Python, we start index numbers at 0, not 1
(we'll see why later)
So we have a concept of the first element, the second element, and so on…
Python lists have a concept of positional order, but sets do not
A list is a sequence type
A set is not
S = x0, x1, x2, x3, …
→positional ordering
→
S[2] is the third element

Built-In Sequence Types
mutable
lists
immutable
strings
tuples
in reality a tuple is more than just a sequence type
bytes
bytearrays
range
Additional Standard Types:
more limited than lists, strings and tuples
namedtuple
deque
collections package
array module
array

Homogeneous vs Heterogeneous Sequences
Strings are homogeneous sequences
each element is of the same type (a character)
Lists are heterogeneous sequences
each element may be a different type
[1, 10.5, 'python']
Homogeneous sequence types are usually more efficient (storage wise at least)
e.g. prefer using a string of characters, rather than a list or tuple of characters
'python'

Iterable Type vs Sequence Type
What does it mean for an object to be iterable?
it is a container type of object and we can list out the elements in that object one by one
But an iterable is not necessarily a sequence type
So any sequence type is iterable
s = {1, 2, 3}
s[0]
l = [1, 2, 3]
l[0]
for e in l
for e in s
→iterables are more general

Standard Sequence Methods
Built-in sequence types, both mutable and immutable, support the following methods
x in s
x not in s
s1 + s2
s * n  (or  n * s)
len(s)
min(s)
max(s)
(if an ordering between elements of s is defined)
s.index(x)
s.index(x, i)
s.index(x, i, j)
index of first occurrence of x in s
index of first occurrence of x in s at or after index i
index of first occurrence of x in s at or after index i and before index j
This is not the same as the ordering (position) of elements 
inside the container, this is the ability to compare pairwise 
elements using an order comparison (e.g. <, <=, etc.)
(n an integer)
concatenation
repetition

Standard Sequence Methods
s[i]
s[i:j]
s[i:j:k]
the element at index i
extended slice from index i, to (but not including) j, in steps of k
the slice from index i, to (but not including) j
Note that slices will return in the same container type
range objects are more restrictive:
no concatenation / repetition
min, max, in, not in not as efficient
We will come back to slicing in a lot more detail in an upcoming video

Hashing
Immutable sequence types may support hashing
hash(s)
We'll see this in more detail when we look at Mapping Types
but not if they contain mutable types!

Review: Beware of Concatenations
x = [1, 2]
a = x + x
a →[1, 2, 1, 2]
x = 'python'
a = x + x
a →'pythonpython'
x = [ [0, 0] ]
a = x + x
a →[ [0, 0], [0, 0] ]
id(a[0])
id(x[0])
id(a[1])
==
==
a[0][0] = 100
a →[ [100, 0], [100, 0] ]
a[0] is x[0]
a[1] is x[0]

Review: Beware of Repetitions
a = [1, 2] * 2
a →[1, 2, 1, 2]
a = [ [0, 0] ] * 2
a →[ [0, 0], [0, 0] ]
id(a[0])
id
id(a[1])
==
==
a[0][0] = 100
a →[ [100, 0], [100, 0] ]
a = 'python' * 2
a →'pythonpython'
a = ['python'] * 2
a →['python', 'python']
Same happens here, but because strings are immutable it's quite safe

Coding

