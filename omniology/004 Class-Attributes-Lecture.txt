©2019 MathByte Academy

Defining Attributes in Classes
class MyClass:
language = 'Python'
version = '3.6'
MyClass is a class à it is an object
in addition to whatever attributes Python automatically creates for us
à it also has language and version attributes
e.g. __name__ with a state of 'MyClass'
with a state of 'Python' and '3.6' respectively
(of type type)
©2019 MathByte Academy

Retrieving Attribute Values from Objects
class MyClass:
language = 'Python'
version = '3.6'
à getattr function
getattr(object_symbol, attribute_name, optional_default)
getattr(MyClass, 'language')
à 'Python'
getattr(MyClass, 'x')
à AttributeError exception
getattr(MyClass, 'x', 'N/A')
à 'N/A'
à dot notation (shorthand)
MyClass.language
à 'Python'
MyClass.x
à AttributeError exception
©2019 MathByte Academy

Setting Attribute Values in Objects
class MyClass:
language = 'Python'
version = '3.6'
à setattr function
setattr(object_symbol, attribute_name, attribute_value)
setattr(MyClass, 'version', '3.7')
object symbol
string
this has modified the state of  MyClass
à MyClass was mutated
getattr(MyClass, 'version')
MyClass.version
à '3.7'
MyClass.version = '3.7'
©2019 MathByte Academy

Setting Attribute Values in Objects
class MyClass:
language = 'Python'
version = '3.6'
What happens if we call setattr for an attribute we did not define in our class?
Python is a dynamic language
à can modify our classes at runtime (usually)
setattr(MyClass, 'x', 100)
à MyClass now has a new attribute named x with a state of 100
getattr(MyClass, 'x')
MyClass.x
à 100
MyClass.x = 100
or
©2019 MathByte Academy

Where is the state stored?
à in a dictionary
class MyClass:
language = 'Python'
version = '3.6'
MyClass.__dict__
mappingproxy({'__module__': '__main__',
'language': 'Python',
'version': '3.6',
'__dict__': <attribute '__dict__' of 'MyClass' objects>,
'__weakref__': <attribute '__weakref__' of 'MyClass' objects>,
'__doc__': None})
à not directly mutable dictionary (but setattr can)
à ensures keys are strings (helps speed things up for Python)
class namespace
©2019 MathByte Academy

Mutating Attributes
We saw we can modify the sate or create a brand new attribute using setattr or the dot notation
class MyClass:
language = 'Python'
version = '3.6'
MyClass.__dict__
à mappingproxy({'language': 'Python',
'version': '3.6', …})
setattr(MyClass, 'x', 100)
MyClass.x = 100
or
MyClass.__dict__
à mappingproxy({'language': 'Python',
'version': '3.6', 
'x': 100, …})
We can then mutate MyClass:
And this is reflected in the namespace:
©2019 MathByte Academy

Yes! (usually)
à delattr(obj_symbol, attribute_name)
Deleting Attributes
So if we can mutate the namespace at runtime by using setattr (or equivalent dot notation)
Can we remove an attribute at runtime?
or del keyword
class MyClass:
language = 'Python'
version = '3.6'
MyClass.__dict__
à mappingproxy({'language': 'Python',
'version': '3.6', …})
delattr(MyClass, 'version') 
del MyClass.version
or
MyClass.__dict__
à mappingproxy({'language': 'Python',
…})
à version has been removed from namespace
©2019 MathByte Academy

Accessing the Namespace Directly
As we saw the class namespace uses a dictionary, which we can request using the __dict__ 
attribute of the class
The __dict__ attribute of a class returns a mappingproxy object
Although this is not a dict, it is still a hash map (dictionary), so we can at least read access the 
class namespace directly – not common practice!!
class MyClass:
language = 'Python'
version = '3.6'
MyClass.language
getattr(MyClass, 'language')
MyClass.__dict__['language']
à 'Python'
Be careful with this – sometimes classes have attributes that don't show up in that dictionary!
(we'll come back to that later)
©2019 MathByte Academy

Coding
©2019 MathByte Academy

