
Float à Integer
data loss
different ways to configure this data loss
10.4
10.5
10.6
10?
11?
truncation
floor
rounding
pick your poison!
ceiling
data loss in all cases
10.0001
10.9999

Truncation
truncating a float simply returns the integer portion of the number
i.e. ignores everything after the decimal point
The math module provides us the trunc() function:
import math
math.trunc(10.4) à 10
math.trunc(10.5) à 10
math.trunc(10.6) à 10
math.trunc(-10.4) à -10
math.trunc(-10.5) à -10
math.trunc(-10.6) à -10

The int Constructor
The Python int constructor will accept a float
uses truncation when casting the float to an int
int(10.4) à 10
int(10.5) à 10
int(10.6) à 10
int(-10.4) à -10
int(-10.5) à -10
int(-10.6) à -10

Floor
Definition: the floor of a number is the largest integer less than (or equal to) the number
!loor 𝑥= max 𝑖∈ℤ| 𝑖≤𝑥
10
11
x = 10.4
floor
-11
-10
x = -10.4
floor
Recall also our discussion on integer division – aka floor division: //
For positive numbers, floor and truncation are equivalent but not for negative numbers!
We defined floor division in combination with the mod operation
n = d * (n // d) + (n % d)
But in fact, floor division defined that way yields the same result 
as taking the floor of the floating point division
a // b == floor (a / b)

Floor
The math module provides us the floor() function:
import math
math.floor(10.4) à 10
math.floor(10.5) à 10
math.floor(10.6) à 10
math.floor(-10.4) à -11
math.floor(-10.5) à -11
math.floor(-10.6) à -11
-11
-10
x = -10.4
floor
10
11
x = 10.4
floor

Ceiling
Definition: the ceiling of a number is the smallest integer greater than (or equal to) the number
ceil 𝑥= min 𝑖∈ℤ| 𝑖≥𝑥
10
11
x = 10.4
ceiling
ceiling
-11
-10
x = -10.4
math.ceil(10.4) à 11
math.ceil(10.5) à 11
math.ceil(10.6) à 11
math.ceil(-10.4) à -10
math.ceil(-10.5) à -10
math.ceil(-10.6) à -10

Code

