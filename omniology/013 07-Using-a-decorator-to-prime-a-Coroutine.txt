© Fred Baptiste 2018

We always to prime a coroutine before using it
à very repetitive
à pattern is the same every time
g = gen()
à creates coroutine instance
next(g)
or g.send(None)
à primes the coroutine
This is a perfect example of using a decorator to do this work for us!
© Fred Baptiste 2018

Creating a function to auto prime coroutines
def prime(gen_fn):
g = gen_fn()
next(g)
return g
creates the generator
primes the generator
returns the primed generator
def echo():
while True:
received = yield
print(received)
echo_gen = prime(echo)
echo_gen.send('hello')
à 'hello'
© Fred Baptiste 2018

A decorator approach
We still have to remember to call the prime function for our echo coroutine before we can use it
Since echo is a coroutine, we know we always have to prime it first
So let's write a decorator that will replace our generator function with another function
that will automatically prime it when we create an instance of it
def coroutine(gen_fn):
def prime():
g = gen_fn()
next(g)
return g
return prime
def echo():
while True:
received = yield
print(received)
@coroutine
© Fred Baptiste 2018

Understanding how the decorator works
def coroutine(gen_fn):
def prime():
g = gen_fn()
next(g)
return g
return prime
def echo():
while True:
received = yield
print(received)
echo = coroutine(echo)
[same effect as using @coroutine]
à echo function is now actually the prime function
à prime is a closure
à free variable gen_fn is echo
calling echo()
à calls prime() with gen_fn = echo
g = echo()
next(g)
return g
© Fred Baptiste 2018

Expanding the decorator
def coroutine(gen_fn):
def prime():
g = gen_fn()
next(g)
return g
return prime
à cannot pass arguments to the generator function
def coroutine(gen_fn):
def prime(*args, **kwargs):
g = gen_fn(*args, **kwargs)
next(g)
return g
return prime
© Fred Baptiste 2018

Coding Exercises
© Fred Baptiste 2018

