Lectures
on
the
Curry-Ho
w
ard
Isomorphism
Morten
Heine
B.
Srensen
University
of
Cop
enhagen
P
a
w
e 
l
Urzyczyn
University
of
Warsaw


Preface
The
Curry-Ho
w
ard
isomorphism
states
an
amazing
corresp
ondence
b
et
w
een
systems
of
formal
logic
as
encoun
tered
in
pr
o
of
the
ory
and
computational
calculi
as
found
in
typ
e
the
ory.
F
or
instance,
minimal
prop
ositional
logic
corresp
onds
to
simply
t
yp
ed
-calculus,
rst-order
logic
corresp
onds
to
de-
p
enden
t
t
yp
es,
second-order
logic
corresp
onds
to
p
olymorphic
t
yp
es,
etc.
The
isomorphism
has
man
y
asp
ects,
ev
en
at
the
syn
tactic
lev
el:
form
ulas
corresp
ond
to
t
yp
es,
pro
ofs
corresp
ond
to
terms,
pro
v
abilit
y
corresp
onds
to
inhabitation,
pro
of
normalization
corresp
onds
to
term
reduction,
etc.
But
there
is
m
uc
h
more
to
the
isomorphism
than
this.
F
or
instance,
it
is
an
old
idea|due
to
Brou
w
er,
Kolmogoro
v,
and
Heyting,
and
later
formalized
b
y
Kleene's
realizabilit
y
in
terpretation|that
a
constructiv
e
pro
of
of
an
implication
is
a
pro
cedure
that
transforms
pro
ofs
of
the
an
teceden
t
in
to
pro
ofs
of
the
succeden
t;
the
Curry-Ho
w
ard
isomorphism
giv
es
syn
tactic
represen
tations
of
suc
h
pro
cedures.
These
notes
giv
e
an
in
tro
duction
to
parts
of
pro
of
theory
and
related
asp
ects
of
t
yp
e
theory
relev
an
t
for
the
Curry-Ho
w
ard
isomorphism.
Outline
Since
most
calculi
found
in
t
yp
e
theory
build
on
-calculus,
the
notes
b
e-
gin,
in
Chapter
,
with
an
in
tro
duction
to
typ
e-fr
e
e
-c
alculus.
The
in
tro-
duction
deriv
es
the
most
rudimen
tary
prop
erties
of

-reduction
including
the
Ch
urc
h-Rosser
theorem.
It
also
presen
ts
Kleene's
theorem
stating
that
all
recursiv
e
functions
are
-denable
and
Ch
urc
h's
theorem
stating
that

-equalit
y
is
undecidable.
As
explained
ab
o
v
e,
an
imp
ortan
t
part
of
the
Curry-Ho
w
ard
isomor-
phism
is
the
idea
that
a
constructiv
e
pro
of
of
an
implication
is
a
certain
pro
cedure.
This
calls
for
some
elab
oration
of
what
is
mean
t
b
y
constructiv
e
pro
ofs,
and
Chapter

therefore
presen
ts
intuitionistic
pr
op
ositional
lo
gic.
The
c
hapter
presen
ts
a
natural
deduction
form
ulation
of
minimal
and
in
tu-
itionistic
prop
ositional
logic.
The
usual
seman
tics
in
terms
of
Heyting
alge-
bras
and
in
terms
of
Kripk
e
mo
dels
are
in
tro
duced|the
former
explained
i

ii
Preface
on
the
basis
of
Bo
olean
algebras|and
the
soundness
and
completeness
re-
sults
are
then
pro
v
ed.
An
informal
pro
of
seman
tics,
the
so-called
BHK-
in
terpretation,
is
also
presen
ted.
Chapter

presen
ts
the
simply
typ
e
d
-c
alculus
and
its
most
fundamen-
tal
prop
erties
up
to
the
sub
ject
reduction
prop
ert
y
and
the
Ch
urc
h-Rosser
prop
ert
y
.
The
distinction
b
et
w
een
simply
t
yp
ed
-calculus

a
la
Ch
urc
h
and

a
la
Curry
is
in
tro
duced,
and
the
uniqueness
of
t
yp
es
prop
ert
y|whic
h
fails
for
the
Curry
system|is
pro
v
ed
for
the
Ch
urc
h
system.
The
equiv
alence
b
et
w
een
the
t
w
o
systems,
in
a
certain
sense,
is
also
established.
The
c
hapter
also
pro
v
es
the
w
eak
normalization
prop
ert
y
b
y
the
T
uring-Pra
witz
metho
d,
and
ends
with
Sc
h
wic
h
ten
b
erg's
theorem
stating
that
the
n
umeric
functions
represen
table
in
simply
t
yp
ed
-calculus
are
exactly
the
extended
p
olyno-
mials.
This
pro
vides
enough
bac
kground
material
for
our
rst
presen
tation
of
the
Curry-Howar
d
isomorphism
in
Chapter
,
as
it
app
ears
in
the
con-
text
of
natural
deduction
for
minimal
prop
ositional
logic
and
simp
y
t
yp
ed
-calculus.
The
c
hapter
presen
ts
another
form
ulation
of
natural
deduction,
whic
h
is
often
used
in
the
pro
of
theory
literature,
and
whic
h
facilitates
a
ner
distinction
b
et
w
een
similar
pro
ofs.
The
exact
corresp
ondence
b
et
w
een
nat-
ural
deduction
for
minimal
prop
ositional
logic
and
simply
t
yp
ed
-calculus
is
then
presen
ted.
The
extension
to
pro
duct
and
sum
t
yp
es
is
also
discussed.
After
a
brief
part
on
pro
of-theoretical
applications
of
the
w
eak
normaliza-
tion
prop
ert
y
,
the
c
hapter
ends
with
a
pro
of
of
strong
normalization
using
the
T
ait-Girard
metho
d,
here
phrased
in
terms
of
saturated
sets.
Chapter

presen
ts
the
v
ariation
of
the
Curry-Ho
w
ard
isomorphism
in
whic
h
one
replaces
natural
deduction
b
y
Hilb
ert
style
pr
o
ofs
and
simply
t
yp
ed
-calculus
b
y
simply
t
yp
ed
c
ombinatory
lo
gic.
After
t
yp
e-free
com-
binators
and
w
eak
reduction|and
the
Ch
urc
h-Rosser
prop
ert
y|the
usual
translations
from
-calculus
to
com
binators,
and
vice
v
ersa,
are
in
tro
duced
and
sho
wn
to
preserv
e
some
of
the
desired
prop
erties
p
ertaining
to
w
eak
reduction
and

-reduction.
Then
com
binators
with
t
yp
es
are
in
tro
duced,
and
the
translations
studied
in
this
setting.
Finally
Hilb
ert-st
yle
pro
ofs
are
in
tro
duced,
and
the
connection
to
com
binators
with
t
yp
es
pro
v
ed.
The
c
hapter
ends
with
a
part
on
subsystems
of
com
binators
in
whic
h
relev
ance
and
linearit
y
pla
y
a
role.
Ha
ving
seen
t
w
o
logics
or,
equiv
alen
tly
,
t
w
o
calculi
with
t
yp
es,
Chapter

then
studies
de
cision
pr
oblems
in
these
calculi,
mainly
the
t
yp
e
c
hec
king,
the
t
yp
e
reconstruction,
and
the
t
yp
e
inhabitation
problem.
The
t
yp
e
re-
construction
problem
is
sho
wn
to
b
e
P-complete
b
y
reduction
to
and
from
unication
(only
the
reduction
to
unication
is
giv
en
in
detail).
The
t
yp
e
inhabitation
problem
is
sho
wn
to
b
e
PSP
A
CE-complete
b
y
a
reduction
from
the
satisabilit
y
problem
for
classical
second-order
prop
ositional
form
ulas.
The
c
hapter
ends
with
Statman's
theorem
stating
that
equalit
y
on
t
yp
ed
terms
is
non-elemen
tary
.

Outline
iii
After
in
tro
ducing
natural
deduction
systems
and
Hilb
ert-st
yle
systems,
the
notes
in
tro
duce
in
Chapter

Gen
tzen's
sequen
t
calculus
systems
for
prop
ositional
logic.
Both
classical
and
in
tuitionistic
v
arian
ts
are
in
tro
duced.
In
b
oth
cases
a
somewhat
rare
presen
tation|tak
en
from
Pra
witz|with
as-
sumptions
as
sets,
not
sequences,
is
adopted.
F
or
the
in
tuitionistic
system
the
cut-elimination
theorem
is
men
tioned,
and
from
this
the
subform
ula
prop
ert
y
and
decidabilit
y
of
the
logic
are
inferred.
Tw
o
aproac
hes
to
term
assignmen
t
for
sequen
t
calculus
pro
ofs
are
studied.
In
the
rst
approac
h,
the
terms
are
those
of
the
simply
t
yp
ed
-calculus.
F
or
this
approac
h,
the
connection
b
et
w
een
normal
forms
and
cut-free
pro
ofs
is
studied
in
some
de-
tail.
In
the
second
approac
h,
the
terms
are
in
tended
to
mimic
exactly
the
rules
of
the
calculus,
and
this
assignmen
t
is
used
to
pro
v
e
the
cut-elimination
theorem
in
a
compact
w
a
y
.
The
remaining
c
hapters
study
v
ariations
of
the
Curry-Ho
w
ard
isomor-
phism
for
more
expressiv
e
t
yp
e
systems
and
logics.
In
Chapter

w
e
consider
the
most
elemen
tary
connections
b
et
w
een
nat-
ural
deduction
for
classic
al
pr
op
ositional
lo
gic
and
simply
t
yp
ed
-calculus
with
c
ontr
ol
op
er
ators,
in
particular,
the
corresp
ondence
b
et
w
een
classical
pro
of
normalization
and
reduction
of
con
trol
op
erators.
Kolmogoro
v's
em-
b
edding
of
classical
logic
in
to
in
tuitionistic
logic
is
sho
wn
to
induce
a
con-
tin
uation
passing
st
yle
translation
whic
h
eliminates
con
trol
op
erators.
Chapter
	
is
ab
out
rst-or
der
lo
gic.
After
a
presen
tation
of
the
syn
tax
for
quan
tiers,
the
pro
of
systems
and
in
terpretations
seen
in
earlier
c
hapters
are
generalized
to
the
rst-order
case.
Chapter
0
presen
ts
dep
endent
typ
es,
as
manifest
in
the
calculus
P
.
The
strong
normalization
prop
ert
y
is
pro
v
ed
b
y
a
translation
to
simply
t
yp
ed
-calculus
.
A
v
arian
t
of
P

a
la
Curry
is
in
tro
duced.
By
another
translation
it
is
sho
wn
that
a
term
is
t
ypable
in
P

a
la
Curry
i
it
is
t
ypable
in
simply
t
yp
ed
-calculus.
While
this
sho
ws
that
t
yp
e
reconstruction
is
no
harder
than
in
simply
t
yp
ed
-calculus,
the
t
yp
e
c
hec
king
problem
in
P

a
la
Curry
turns
out
to
b
e
undecidable.
The
last
result
of
the
c
hapter
sho
ws
that
rst-
order
logic
can
b
e
enco
ded
in
P
.
In
Chapter

w
e
study
arithmetic.
The
c
hapter
in
tro
duces
P
eano
Arith-
metic
(P
A)
and
briey
recalls
G
odel's
theorems
and
the
usual
result
stating
that
exactly
the
recursiv
e
functions
can
b
e
represen
ted
in
P
eano
Arithmetic.
The
notion
of
a
pro
v
ably
total
recursiv
e
function
is
also
in
tro
duced.
Heyt-
ing
arithmetic
(HA)
is
then
in
tro
duced
and
Kreisel's
theorem
stating
that
pro
v
able
totalit
y
in
HA
and
P
A
coincide
is
presen
ted.
Then
Kleene's
real-
izabilit
y
in
terpretation
is
in
tro
duced|as
a
w
a
y
of
formalizing
the
BHK-
in
terpretation|and
used
to
pro
v
e
consistency
of
HA.
G
odel's
system
T
is
then
in
tro
duced
and
pro
v
ed
to
b
e
strongly
normalizing.
The
failure
of
arithmetization
of
pro
ofs
of
this
prop
ert
y
is
men
tioned.
The
result
stating
that
the
functions
denable
in
T
are
the
functions
pro
v
ably
total
in
P
eano
Arithmetic
is
also
presen
ted.
Finally
,
G
odel's
Diale
ctic
a
in
terpretation
is

iv
Preface
presen
ted
and
used
to
pro
v
e
consistency
of
HA
and
to
pro
v
e
that
all
func-
tions
pro
v
ably
total
in
P
eano
Arithmetic
are
denable
in
T.
Chapter

is
ab
out
se
c
ond-or
der
lo
gic
and
p
olymorphism.
F
or
the
sak
e
of
simplicit
y
,
only
second-order
prop
ositional
systems
are
considered.
Natu-
ral
deduction,
Heyting
algebras,
and
Kripk
e
mo
dels
are
extended
to
the
new
setting.
The
p
olymorphic
-calculus
is
then
presen
ted,
and
the
corresp
on-
dence
with
second-order
logic
dev
elop
ed.
After
a
part
ab
out
denabilit
y
of
data
t
yp
es,
a
Curry
v
ersion
of
the
p
olymorphic
-calculus
is
in
tro
duced,
and
W
ells'
theorem
stating
that
t
yp
e
reconstruction
and
t
yp
e
c
hec
king
are
undecidable
is
men
tioned.
The
strong
normalization
prop
ert
y
is
also
pro
v
ed.
The
last
c
hapter,
Chapter
,
presen
ts
the
-cub
e
and
pur
e
typ
e
systems.
First
Barendregt's
cub
e
is
presen
ted,
and
its
systems
sho
wn
equiv
alen
t
to
previous
form
ulations
b
y
means
of
a
classication
result.
Then
the
cub
e
is
geneneralized
to
pure
t
yp
e
systems
whic
h
are
then
dev
elop
ed
in
some
detail.
Ab
out
the
notes
Eac
h
c
hapter
is
pro
vided
with
a
n
um
b
er
of
exercises.
W
e
recommend
that
the
reader
try
as
man
y
of
these
as
p
ossible.
A
t
the
end
of
the
notes,
answ
ers
and
hin
ts
are
pro
vided
to
some
of
the
exercises.

The
notes
co
v
er
material
from
the
follo
wing
sources:

Girard,
Lafon
t,
T
a
ylor:
Pr
o
ofs
and
T
yp
es,
Cam
bridge
T
racts
in
Theo-
retical
Computer
Science
,
		.

T
ro
elstra,
Sc
h
wic
h
ten
b
erg:
Basic
Pr
o
of
The
ory,
Cam
bridge
T
racts
in
Theoretical
Computer
Science
,
		.

Hindley:
Basic
Simple
T
yp
e
The
ory,
Cam
bridge
T
racts
in
Theoretical
Computer
Science
,
		.

Barendregt:
Lam
b
da
Calculi
with
T
yp
es,
pages
{0	
of
A
br
am-
sky,
S.
and
D.M.
Gabb
ay
and
T.S.E.
Maib
aum,
editors,
Handb
o
ok
of
L
o
gic
in
Computer
Scienc
e,
V
olume
I
I,
Oxford
Univ
ersit
y
Press,
		.
Either
of
these
sources
mak
e
excellen
t
supplemen
tary
reading.
The
notes
are
largely
self-con
tained,
although
a
greater
appreciation
of
some
parts
can
probably
b
e
obtained
b
y
readers
familiar
with
mathemat-
ical
logic,
recursion
theory
and
complexit
y
.
W
e
recommend
the
follo
wing
textb
o
oks
as
basic
references
for
these
areas:

Mendelson:
Intr
o
duction
to
Mathematic
al
L
o
gic,
fourth
edition,
Chap-
man
&
Hall,
London,
		.

This
part
is
quite
incomplete
due
to
the
\w
ork-in-progress"
c
haracter
of
the
notes.

Ab
out
the
notes
v

Jones:
Computability
and
Complexity
F
r
om
a
Pr
o
gr
amming
Persp
e
c-
tive,
MIT
Press,
		.
The
notes
ha
v
e
b
een
used
for
a
one-semester
graduate/Ph.D.
course
at
the
Departmen
t
of
Computer
Science
at
the
Univ
ersit
y
of
Cop
enhagen
(DIKU).
Roughly
one
c
hapter
w
as
presen
ted
at
eac
h
lecture,
sometimes
lea
ving
material
out.
The
notes
are
still
in
progress
and
should
not
b
e
conceiv
ed
as
ha
ving
b
een
pro
of
read
carefully
to
the
last
detail.
Nev
ertheless,
w
e
are
grateful
to
the
studen
ts
attending
the
course
for
p
oin
ting
out
n
umerous
t
yp
os,
for
sp
otting
actual
mistak
es,
and
for
suggesting
impro
v
emen
ts
to
the
exp
osition.
This
join
t
w
ork
w
as
made
p
ossible
thanks
to
the
visiting
p
osition
funded
b
y
the
Univ
ersit
y
of
Cop
enhagen,
and
held
b
y
the
second
author
at
DIKU
in
the
win
ter
and
summer
semesters
of
the
academic
y
ear
		-.
M.H.B.S.
&
P
.U.,
Ma
y
		

vi

Con
ten
ts
Preface
i
Outline
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
i
Ab
out
the
notes
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
iv

T
yp
e-free
-calculus

.
-terms
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Reduction
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Informal
in
terpretation
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
The
Ch
urc
h-Rosser
Theorem
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Expressibilit
y
and
undecidabilit
y
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Historical
remarks
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
.
Exercises
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	

In
tuitionistic
logic

.
In
tuitiv
e
seman
tics
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Natural
deduction
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Algebraic
seman
tics
of
classical
logic
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Heyting
algebras
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0
.
Kripk
e
seman
tics
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
The
implicational
fragmen
t
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Exercises
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.


Simply
t
yp
ed
-calculus

.
Simply
t
yp
ed
-calculus

a
la
Curry
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Simply
t
yp
ed
-calculus

a
la
Ch
urc
h
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Ch
urc
h
v
ersus
Curry
t
yping
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
.
Normalization
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Expressibilit
y
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Exercises
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

vii

viii
Con
ten
ts

The
Curry-Ho
w
ard
isomorphism

.
Natural
deduction
without
con
texts
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
The
Curry-Ho
w
ard
isomorphism
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Consistency
from
normalization
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Strong
normalization
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Historical
remarks
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Exercises
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.


Pro
ofs
as
com
binators

.
Com
binatory
logic
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
T
yp
ed
com
binators
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
.
Hilb
ert-st
yle
pro
ofs
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Relev
ance
and
linearit
y
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Historical
remarks
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Exercises
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.


T
yp
e-c
hec
king
and
related
problems
	
.
Hard
and
complete
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	0
.
The

v
arian
ts
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
.
(First-order)
unication
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
.
T
yp
e
reconstruction
algorithm
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
.
Eta-reductions
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
.
T
yp
e
inhabitation
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
		
.
Equalit
y
of
t
yp
ed
terms
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0
.
Exercises
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0

Sequen
t
calculus
0
.
Classical
sequen
t
calculus
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0
.
In
tuitionistic
sequen
t
calculus
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0	
.
Cut
elimination
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
T
erm
assignmen
t
for
sequen
t
calculus
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
The
general
case
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Alternativ
e
term
assignmen
t
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Exercises
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.


Classical
logic
and
con
trol
op
erators

.
Classical
prop
ositional
logic,
implicational
fragmen
t
.
.
.
.
.

.
The
full
system
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
T
erms
for
classical
pro
ofs
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Classical
pro
of
normalization
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Denabilit
y
of
pairs
and
sums
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Em
b
edding
in
to
in
tuitionistic
prop
ositional
logic
.
.
.
.
.
.
.

.
Con
trol
op
erators
and
CPS
translations
.
.
.
.
.
.
.
.
.
.
.
.

.
Historical
remarks
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0

Con
ten
ts
ix
.	
Exercises
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

	
First-order
logic

	.
Syn
tax
of
rst-order
logic
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

	.
In
tuitiv
e
seman
tics
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

	.
Pro
of
systems
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

	.
Seman
tics
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0
	.
Exercises
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

0
Dep
enden
t
t
yp
es

0.
System
P
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

0.
Rules
of
P
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

0.
Prop
erties
of
P
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
0.
Dep
enden
t
t
yp
es

a
la
Curry
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

0.
Existen
tial
quan
tication
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

0.
Corresp
ondence
with
rst-order
logic
.
.
.
.
.
.
.
.
.
.
.
.
.
.

0.
Exercises
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.


First-order
arithmetic
and
G
odel's
T
	
.
The
language
of
arithmetic
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
.
P
eano
Arithmetic
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0
.
Represen
table
and
pro
v
ably
recursiv
e
functions
.
.
.
.
.
.
.
.

.
Heyting
Arithmetic
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Kleene's
realizabilit
y
in
terpretation
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
G
odel's
System
T
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
.
G
odel's
Diale
ctic
a
in
terpretation
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Exercises
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.


Second-order
logic
and
p
olymorphism
	
.
Prop
ositional
second-order
form
ulas
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
.
Seman
tics
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
.
P
olymorphic
lam
b
da-calculus
(System
F)
.
.
.
.
.
.
.
.
.
.
.
	
.
Expressiv
e
p
o
w
er
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
		
.
Curry-st
yle
p
olymorphism
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0
.
Strong
normalization
of
second-order
t
yp
ed
-calculus
.
.
.
.
0
.
Exercises
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0

The
-cub
e
and
pure
t
yp
e
systems
0	
.
In
tro
duction
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0	
.
Barendregt's
-cub
e
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Example
deriv
ations
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
Classication
and
equiv
alence
with
previous
form
ulations
.
.

.
Pure
t
yp
e
systems
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
	
.
Examples
of
pure
t
yp
e
systems
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.


x
Con
ten
ts
.
Prop
erties
of
pure
t
yp
e
systems
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
The
Barendregt-Geuv
ers-Klop
conjecture
.
.
.
.
.
.
.
.
.
.
.


Solutions
and
hin
ts
to
selected
exercises


CHAPTER

T
yp
e-free
-calculus
The
-c
alculus
is
a
collection
of
formal
theories
of
in
terest
in,
e.g.,
computer
science
and
logic.
The
-calculus
and
the
related
systems
of
c
ombinatory
lo
gic
w
ere
originally
prop
osed
as
a
foundation
of
mathematics
around
	0
b
y
Ch
urc
h
and
Curry
,
but
the
prop
osed
systems
w
ere
subsequen
tly
sho
wn
to
b
e
inconsisten
t
b
y
Ch
urc
h's
studen
ts
Kleene
and
Rosser
in
	.
Ho
w
ev
er,
a
certain
subsystem
consisting
of
the
-terms
equipp
ed
with
so-called

-r
e
duction
turned
out
to
b
e
useful
for
formalizing
the
in
tuitiv
e
notion
of
eectiv
e
computabilit
y
and
led
to
Chur
ch's
thesis
stating
that
-denability
is
an
appropriate
formalization
of
the
in
tuitiv
e
notion
of
eec-
tiv
e
computabilit
y
.
The
study
of
this
subsystem|whic
h
w
as
pro
v
ed
to
b
e
consisten
t
b
y
Ch
urc
h
and
Rosser
in
	|w
as
a
main
inspiration
for
the
dev
elopmen
t
of
r
e
cursion
the
ory.
With
the
in
v
en
tion
of
ph
ysical
computers
came
also
programming
lan-
guages,
and
-calculus
has
pro
v
ed
to
b
e
a
useful
to
ol
in
the
design,
imple-
men
tation,
and
theory
of
programming
languages.
F
or
instance,
-calculus
ma
y
b
e
considered
an
idealized
sublanguage
of
some
programming
languages
lik
e
LISP.
Also,
-calculus
is
useful
for
expressing
seman
tics
of
program-
ming
languages
as
done
in
denotational
semantics.
According
to
Hindley
and
Seldin
[
,
p.],
\-calculus
and
com
binatory
logic
are
regarded
as
`test-b
eds'
in
the
study
of
higher-order
programming
languages:
tec
hniques
are
tried
out
on
these
t
w
o
simple
languages,
dev
elop
ed,
and
then
applied
to
other
more
`practical'
languages."
The
-calculus
is
sometimes
called
typ
e-fr
e
e
or
untyp
e
d
to
distinguish
it
from
v
arian
ts
in
whic
h
typ
es
pla
y
a
role;
these
v
arian
ts
will
b
e
in
tro
duced
in
the
next
c
hapter.
..
-terms
The
ob
jects
of
study
in
-calculus
are
-terms.
In
order
to
in
tro
duce
these,
it
is
con
v
enien
t
to
in
tro
duce
the
notion
of
a
pr
e-term.



Chapter
.
T
yp
e-free
-calculus
...
Definition.
Let
V
=
fv
0
;
v

;
:
:
:
g
denote
an
innite
alphab
et.
The
set

 of
pr
e-terms
is
the
set
of
strings
dened
b
y
the
grammar:

 ::=
V
j
(
 
 )
j
(V

 )
...
Example.
The
follo
wing
are
pre-terms.
(i)
((v
0
v

)
v

)


 ;
(ii)
(v
0
(v
0
v

))


 ;
(iii)
((v
0
v
0
)
v

)


 ;
(iv)
((v
0
(v
0
v
0
))
(v

(v

v

)))


 .
...
Not
a
tion.
W
e
use
upp
ercase
letters,
e.g.,
K
;
L;
M
;
N
;
P
;
Q;
R
with
or
without
subscripts
to
denote
arbitrary
elemen
ts
of

 and
lo
w
ercase
letters,
e.g.,
x;
y
;
z
with
or
without
subscripts
to
denote
arbitrary
elemen
ts
of
V
.
...
Terminology.
(i)
A
pre-term
of
form
x
(i.e.,
an
elemen
t
of
V
)
is
called
a
variable;
(ii)
A
pre-term
of
form
(x
M
)
is
called
an
abstr
action
(o
v
er
x);
(iii)
A
pre-term
of
form
(M
N
)
is
called
an
applic
ation
(of
M
to
N
).
The
hea
vy
use
of
paren
theses
is
rather
cum
b
ersome.
W
e
therefore
in
tro-
duce
the
follo
wing,
standard
con
v
en
tions
for
omitting
paren
theses
without
in
tro
ducing
am
biguit
y
.
W
e
shall
mak
e
use
of
these
con
v
en
tions
under
a
no-compulsion/no-prohibition
agreemen
t|see
Remark
..0.
...
Not
a
tion.
W
e
use
the
shorthands
(i)
(K
L
M
)
for
((K
L)
M
);
(ii)
(x
y
M
)
for
(x
(y
M
));
(iii)
(x
M
N
)
for
(x
(M
N
));
(iv)
(M
x
N
)
for
(M
(x
N
)).
W
e
also
omit
outermost
paren
theses.
...
Remark.
The
t
w
o
rst
shorthands
concern
nested
applications
and
abstractions,
resp
ectiv
ely
.
The
t
w
o
next
ones
concern
applications
nested
inside
abstractions
and
vice
v
ersa,
resp
ectiv
ely
.
T
o
remem
b
er
the
shorthands,
think
of
application
as
asso
ciating
to
the
left,
and
think
of
abstractions
as
extending
as
far
to
the
righ
t
as
p
ossible.

..
-terms

When
abstracting
o
v
er
a
n
um
b
er
of
v
ariables,
eac
h
v
ariable
m
ust
b
e
accompanied
b
y
an
abstraction.
It
is
therefore
con
v
enien
t
to
in
tro
duce
the
follo
wing
shorthand.
...
Not
a
tion.
W
e
write
x

:
:
:
x
n
:M
for
x

:
:
:
x
n
M
.
As
a
sp
ecial
case,
w
e
write
x:M
for
x
M
.
...
Remark.
Whereas
abstractions
are
written
with
a
,
there
is
no
cor-
resp
onding
sym
b
ol
for
applications;
these
are
written
simply
b
y
juxtap
osi-
tion.
Hence,
there
is
no
corresp
onding
shorthand
for
applications.
..	.
Example.
The
pre-terms
in
Example
..
can
b
e
written
as
follo
ws,
resp
ectiv
ely:
(i)
v
0
v

v

;
(ii)
v
0
:v
0
v

;
(iii)
(v
0
:v
0
)
v

;
(iv)
(v
0
:v
0
v
0
)
v

:v

v

.
..0.
Remark.
The
con
v
en
tions
men
tioned
ab
o
v
e
are
used
in
the
remain-
der
of
these
notes.
Ho
w
ev
er,
w
e
refrain
from
using
them|wholly
or
partly|
when
w
e
nd
this
more
con
v
enien
t.
F
or
instance,
w
e
migh
t
prefer
to
write
(v
0
:v
0
v
0
)
(v

:v

v

)
for
the
last
term
in
the
ab
o
v
e
example.
...
Definition.
F
or
M


 dene
the
set
FV
(M
)

V
of
fr
e
e
variables
of
M
as
follo
ws.
FV(x)
=
fxg;
FV(x:P
)
=
FV(P
)nfxg;
FV(P
Q)
=
FV(P
)
[
FV
(Q):
If
FV(M
)
=
fg
then
M
is
called
close
d.
...
Example.
Let
x;
y
;
z
denote
distinct
v
ariables.
Then
(i)
FV(x
y
z
)
=
fx;
y
;
z
g;
(ii)
FV(x:x
y
)
=
fy
g;
(iii)
FV((x:x
x)
y
:y
y
)
=
fg.
...
Definition.
F
or
M
;
N


 and
x

V
,
the
substitution
of
N
for
x
in
M
,
written
M
[x
:=
N
]


 ,
is
dened
as
follo
ws,
where
x
=
y
:
x[x
:=
N
]
=
N
;
y
[x
:=
N
]
=
y
;
(P
Q)[x
:=
N
]
=
P
[x
:=
N
]
Q[x
:=
N
];
(x:P
)[x
:=
N
]
=
x:P
;
(y
:P
)[x
:=
N
]
=
y
:P
[x
:=
N
];
if
y

FV(N
)
or
x

FV(P
)
;
(y
:P
)[x
:=
N
]
=
z
:P
[y
:=
z
][x
:=
N
];
if
y

FV(N
)
and
x

FV
(P
).


Chapter
.
T
yp
e-free
-calculus
where
z
is
c
hosen
as
the
v
i

V
with
minimal
i
suc
h
that
v
i

FV(P
)
[
FV(N
)
in
the
last
clause.
...
Example.
If
x;
y
;
z
are
distinct
v
ariables,
then
for
a
certain
v
ari-
able
u:
((x:x
y
z
)
(y
:x
y
z
)
(z
:x
y
z
))[x
:=
y
]
=
(x:x
y
z
)
(u:y
u
z
)
(z
:y
y
z
)
...
Definition.
Let
-e
quivalenc
e,
written
=

,
b
e
the
smallest
relation
on

 ,
suc
h
that
P
=

P
for
all
P
;
x:P
=

y
:P
[x
:=
y
]
if
y

FV(P
),
and
closed
under
the
rules:
P
=

P
0
)
x

V
:
x:P
=

x:P
0
;
P
=

P
0
)
Z


 :
P
Z
=

P
0
Z
;
P
=

P
0
)
Z


 :
Z
P
=

Z
P
0
;
P
=

P
0
)
P
0
=

P
;
P
=

P
0
&
P
0
=

P
00
)
P
=

P
0
0
:
...
Example.
Let
x;
y
;
z
denote
dieren
t
v
ariables.
Then
(i)
x:x
=

y
:y
;
(ii)
x:x
z
=

y
:y
z
;
(iii)
x:y
:x
y
=

y
:x:y
x;
(iv)
x:x
y
=

x:x
z
.
...
Definition.
Dene
for
an
y
M


 ,
the
e
quivalenc
e
class
[M
]

b
y:
[M
]

=
fN


 j
M
=

N
g
Then
dene
the
set

of
-terms
b
y:

=

 =
=

=
f[M
]

j
M


 g
...
W
arning.
The
notion
of
a
pre-term
and
the
asso
ciated
explicit
dis-
tinction
b
et
w
een
pre-terms
and
-terms
in
tro
duced
ab
o
v
e
are
not
standard
in
the
literature.
Rather,
it
is
customary
to
call
our
pre-terms
-terms,
and
then
informally
remark
that
-equiv
alen
t
-terms
are
\iden
tied."
In
the
remainder
of
these
notes
w
e
shall
b
e
almost
exclusiv
ely
concerned
with
-terms,
not
pre-terms.
Therefore,
it
is
con
v
enien
t
to
in
tro
duce
the
follo
wing.

..
-terms

..	.
Not
a
tion.
W
e
write
M
instead
of
[M
]

in
the
remainder.
This
leads
to
am
biguit
y:
is
M
a
pre-term
or
a
-term?
In
the
remainder
of
these
notes,
M
should
alw
a
ys
b
e
construed
as
[M
]


,
exc
ept
when
explicitly
state
d
otherwise.
W
e
end
this
section
with
t
w
o
denitions
in
tro
ducing
the
notions
of
free
v
ariables
and
substitution
on
-terms
(recall
that,
so
far,
these
notions
ha
v
e
b
een
in
tro
duced
only
for
pre-terms).
These
t
w
o
denitions
pro
vide
the
rst
example
of
ho
w
to
rigorously
understand
denitions
in
v
olving
-terms.
..0.
Definition.
F
or
M


dene
the
set
FV(M
)

V
of
fr
e
e
variables
of
M
as
follo
ws.
FV(x)
=
fxg;
FV(x:P
)
=
FV(P
)nfxg;
FV(P
Q)
=
FV(P
)
[
FV
(Q):
If
FV(M
)
=
fg
then
M
is
called
close
d.
...
Remark.
According
to
Notation
..	,
what
w
e
really
mean
b
y
this
is
that
w
e
dene
FV
as
the
map
from

to
subsets
of
V
satisfying
the
rules:
FV([x]

)
=
fxg;
FV([x:P
]

)
=
FV([P
]

)nfxg;
FV([P
Q]

)
=
FV([P
]

)
[
FV
([Q]

):
Strictly
sp
eaking
w
e
then
ha
v
e
to
demonstrate
there
there
is
at
most
one
suc
h
function
(uniqueness)
and
that
there
is
at
least
one
suc
h
function
(existence).
Uniqueness
can
b
e
established
b
y
sho
wing
for
an
y
t
w
o
functions
FV

and
FV

satisfying
the
ab
o
v
e
equations,
and
an
y
-term,
that
the
results
of
FV

and
FV

on
the
-term
are
the
same.
The
pro
of
pro
ceeds
b
y
induction
on
the
n
um
b
er
of
sym
b
ols
in
an
y
mem
b
er
of
the
equiv
alence
class.
T
o
demonstrate
existence,
consider
the
map
that,
giv
en
an
equiv
alence
class,
pic
ks
a
mem
b
er,
and
tak
es
the
free
v
ariables
of
that.
Since
an
y
c
hoice
of
mem
b
er
yields
the
same
set
of
v
ariables,
this
latter
map
is
w
ell-dened,
and
can
easily
b
e
seen
to
satisfy
the
ab
o
v
e
rules.
In
the
rest
of
these
notes
suc
h
considerations
will
b
e
left
implicit.
...
Definition.
F
or
M
;
N


and
x

V
,
the
substitution
of
N
for
x
in
M
,
written
M
fx
:=
N
g,
is
dened
as
follo
ws:
x[x
:=
N
]
=
N
;
y
[x
:=
N
]
=
y
;
if
x
=
y
;
(P
Q)[x
:=
N
]
=
P
[x
:=
N
]
Q[x
:=
N
];
(y
:P
)[x
:=
N
]
=
y
:P
[x
:=
N
];
if
x
=
y
,
where
y

FV
(N
).
...
Example.
(i)
(x:x
y
)[x
:=
z
:z
]
=
x:x
y
;
(ii)
(x:x
y
)[y
:=
z
:z
]
=
x:x
z
:z
.


Chapter
.
T
yp
e-free
-calculus
..
Reduction
Next
w
e
in
tro
duce
reduction
on
-terms.
...
Definition.
Let
!

b
e
the
smallest
relation
on

suc
h
that
(x:P
)
Q
!

P
[x
:=
Q];
and
closed
under
the
rules:
P
!

P
0
)
x

V
:
x:P
!

x:P
0
P
!

P
0
)
Z


:
P
Z
!

P
0
Z
P
!

P
0
)
Z


:
Z
P
!

Z
P
0
A
term
of
form
(x:P
)
Q
is
called
a

-r
e
dex,
and
P
[x
:=
Q]
is
called
its

-c
ontr
actum.
A
term
M
is
a

-normal
form
if
there
is
no
term
N
with
M
!

N
.
There
are
other
notions
of
reduction
than

-reduction,
but
these
will
not
b
e
considered
in
the
presen
t
c
hapter.
Therefore,
w
e
sometimes
omit
\
-"
from
the
notions

-r
e
dex,

-r
e
duction,
etc.
...
Definition.
(i)
The
relation
!
!

(multi-step

-r
e
duction
)
is
the
transitiv
e-reexiv
e
clo-
sure
of
!

;
that
is,
!
!

is
the
smallest
relation
closed
under
the
rules:
P
!

P
0
)
P
!
!

P
0
;
P
!
!

P
0
&
P
0
!
!

P
00
)
P
!
!

P
00
;
P
!
!

P
:
(ii)
The
relation
=

(
-e
quality)
is
the
transitiv
e-reexiv
e-symmetric
clo-
sure
of
!

;
that
is,
=

is
the
smallest
relation
closed
under
the
rules:
P
!

P
0
)
P
=

P
0
;
P
=

P
0
&
P
0
=

P
00
)
P
=

P
00
;
P
=

P
;
P
=

P
0
)
P
0
=

P
:
...
W
arning.
In
these
notes,
the
sym
b
ol
=
without
an
y
qualication
is
used
to
express
the
fact
that
t
w
o
ob
jects,
e.g.,
pre-terms
or
-terms
are
iden
tical.
This
sym
b
ol
is
v
ery
often
used
in
the
literature
for

-equalit
y
.
...
Example.
(i)
(x:x
x)
z
:z
!

(x
x)[x
:=
z
:z
]
=
(z
:z
)
y
:y
;
(ii)
(z
:z
)
y
:y
!

z
[z
:=
y
:y
]
=
y
:y
;
(iii)
(x:x
x)
z
:z
!
!

y
:y
;
(iv)
(x:x)
y
z
=

y
((x:x)
z
).

..
Informal
in
terpretation

..
Informal
in
terpretation
Informally
,
-terms
express
functions
and
applications
of
functions
in
a
pure
form.
F
or
instance,
the
-term
I
=
x:x
in
tuitiv
ely
denotes
the
function
that
maps
an
y
argumen
t
to
itself,
i.e.,
the
iden
tit
y
function.
This
is
similar
to
the
notation
n
!
n
emplo
y
ed
in
math-
ematics.
Ho
w
ev
er,
x:x
is
a
string
o
v
er
an
alphab
et
with
sym
b
ols
,
x,
etc.
(or
rather
an
equiv
alence
class
of
suc
h
ob
jects),
whereas
n
!
n
is
a
function,
i.e.,
a
certain
set
of
pairs.
The
dierence
is
the
same
as
that
b
et
w
een
a
pr
o-
gr
am
written
in
some
language
and
the
mathematical
function
it
computes,
e.g.,
addition.
As
in
the
notation
n
!
n,
the
name
of
the
abstracted
v
ariable
x
in
x:x
is
not
signican
t,
and
this
is
wh
y
w
e
iden
tify
x:x
with,
e.g.,
y
:y
.
Another
-term
is
K

=
y
:x:x
whic
h,
in
tuitiv
ely
,
denotes
the
function
that
maps
an
y
argumen
t
to
a
func-
tion,
namely
the
one
that
maps
an
y
argumen
t
to
itself,
i.e.,
the
iden
tit
y
function.
This
is
similar
to
programming
languages
where
a
function
ma
y
return
a
function
as
a
result.
A
related
-term
is
K
=
y
:x:y
whic
h,
in
tuitiv
ely
,
denotes
the
function
that
maps
an
y
argumen
t
to
the
function
that,
for
an
y
argumen
t,
returns
the
former
argumen
t.
Since
-terms
in
tuitiv
ely
denote
functions,
there
is
a
w
a
y
to
in
v
ok
e
one
-term
on
another;
this
is
expressed
b
y
application.
Th
us,
the
-term
I
K
expresses
application
of
I
to
K.
Since
K
in
tuitiv
ely
denotes
a
function
to
o,
I
denotes
a
function
whic
h
ma
y
ha
v
e
another
function
as
argumen
t.
This
is
similar
to
programming
languages
where
a
pro
cedure
ma
y
receiv
e
another
pro
cedure
as
argumen
t.
In
mathematics
w
e
usually
write
application
of
a
function,
sa
y
f
(n)
=
n

,
to
an
argumen
t,
sa
y
,
with
the
argumen
t
in
paren
theses:
f
().
In
the
-calculus
w
e
w
ould
rather
write
this
as
(f
),
or
just
f
,
k
eeping
Nota-
tion
..
in
mind.
Not
all
paren
theses
can
b
e
omitted,
though;
for
instance,
(x:x)
I
x:x
I
are
not
the
same
-term;
the
rst
is
I
applied
to
I,
whereas
the
second
exp
ects
an
argumen
t
x
whic
h
is
applied
to
I.


Chapter
.
T
yp
e-free
-calculus
In
tuitiv
ely
,
if
x:M
denotes
a
function,
and
N
denotes
an
argumen
t,
then
the
the
v
alue
of
the
function
on
the
argumen
t
is
denoted
b
y
the
-term
that
arises
b
y
substituting
N
for
x
in
M
.
This
latter
-term
is
exactly
the
term
M
[x
:=
N
]
This
is
similar
to
common
practice
in
mathematics;
if
f
is
as
ab
o
v
e,
then
f
()
=


,
and
w
e
get
from
the
application
f
()
to
the
v
alue


b
y
substi-
tuting

for
n
in
the
b
o
dy
of
the
denition
of
f
.
The
pro
cess
of
calculating
v
alues
is
formalized
b
y

-reduction.
Indeed,
M
!

N
if
N
arises
from
M
b
y
replacing
a

-redex,
i.e.,
a
part
of
form
(x:P
)
Q
b
y
its

-con
tractum.
P
[x
:=
Q]
F
or
instance,
I
K
=
(x:x)
K
!

x[x
:=
K]
=
K
Then
the
relation
!
!

formalizes
the
pro
cess
of
computing
the
o
v
erall
result.
Also,
=

iden
ties
-terms
that,
in
tuitiv
ely
,
denote
the
same
function.
Note
that
-calculus
is
a
typ
e-fr
e
e
formalism.
Unlik
e
common
mathe-
matical
practice,
w
e
do
not
insist
that
-terms
denote
functions
from
cer-
tain
domains,
e.g.,
the
natural
n
um
b
ers,
and
that
argumen
ts
b
e
dra
wn
from
these
domains.
In
particular,
w
e
ma
y
ha
v
e
self-application
as
in
the
-term
!
=
x:x
x
and
w
e
ma
y
apply
this
-term
to
itself
as
in
the
-term

=
!
!
The
t
yp
e-free
nature
of
-calculus
leads
to
some
in
teresting
phenomena;
for
instance,
a
-term
ma
y
reduce
to
itself
as
in

=
(x:x
x)
!
!

!
!
=

Therefore,
there
are
also
-terms
with
innite
reduction
sequences,
lik
e

!


!

:
:
:
..
The
Ch
urc
h-Rosser
Theorem
Since
a
-term
M
ma
y
con
tain
sev
eral

-redexes,
i.e.,
sev
eral
parts
of
form
(x:P
)
Q,
there
ma
y
b
e
sev
eral
N
suc
h
that
M
!

N
.
F
or
instance,
K
(I
I)
!

x:(I
I)

..
The
Ch
urc
h-Rosser
Theorem
	
and
also
K
(I
I)
!

K
I
Ho
w
ev
er,
the
Chur
ch-R
osser
the
or
em,
pro
v
ed
b
elo
w,
states
that
if
M
!
!

M

and
M
!
!

M

then
a
single
-term
M

can
b
e
found
with
M

!
!

M

and
M

!
!

M

In
particular,
if
M

and
M

are

-normal
forms,
i.e.,
-terms
that
admit
no
further

-reductions,
then
they
m
ust
b
e
the
same
-term,
since
the

-
reductions
from
M

and
M

to
M

m
ust
b
e
in
zero
steps.
This
is
similar
to
the
fact
that
when
w
e
calculate
the
v
alue
of
an
arithmetical
expression,
e.g.,
(
+
)

(
+
)


the
end
result
is
indep
enden
t
of
the
order
in
whic
h
w
e
do
the
calculations.
...
Definition.
A
relation
>
on

satises
the
diamond
pr
op
erty
if,
for
all
M

;
M

;
M


,
if
M

>
M

and
M

>
M

,
then
there
exists
an
M



suc
h
that
M

>
M

and
M

>
M

.
...
Lemma.
L
et
>
b
e
a
r
elation
on

and
supp
ose
that
its
tr
ansitive
clo-
sur
e

is
!
!

.
If
>
satises
the
diamond
pr
op
erty,
then
so
do
es
!
!

.
Pr
oof.
First
sho
w
b
y
induction
on
n
that
M

>
N

and
M

>
:
:
:
>
M
n
implies
that
there
are
N

;
:
:
:
;
N
n
suc
h
that
N

>
N

>
:
:
:
>
N
n
and
M
n
>
N
n
.
Using
this
prop
ert
y
,
sho
w
b
y
induction
on
m
that
if
N

>
:
:
:
>
N
m
and
N

>

M

then
there
are
M

;
:
:
:
;
M
m
suc
h
that
M

>
M

>
:
:
:
>
M
m
and
N
m
>

M
m
.

Let
R
b
e
a
relation
on
.
The
tr
ansitive
closur
e
of
R
is
the
least
relation
R

satisfying:
P
R
P
0
)
P
R

P
0
P
R

P
0
&
P
0
R

P
0
0
)
P
R

P
00
The
r
eexive
closur
e
of
R
is
the
least
relation
R
=
satisfying:
P
R
P
0
)
P
R
=
P
0
P
R
=
P

0
Chapter
.
T
yp
e-free
-calculus
No
w
assume
M

!
!

M

and
M

!
!

M

.
Since
!
!

is
the
transitiv
e
closure
of
>
w
e
ha
v
e
M

>
:
:
:
>
M

and
M

>
:
:
:
>
M

.
By
what
w
as
sho
wn
ab
o
v
e,
w
e
can
nd
M

suc
h
that
M

>
:
:
:
>
M

and
M

>
:
:
:
>
M

.
Since
!
!

is
the
transitiv
e
closure
of
>,
also
M

!
!

M

and
M

!
!

M

.
u
t
...
Definition.
Let
!
!
l
b
e
the
relation
on

dened
b
y:
P
!
!
l
P
P
!
!
l
P
0
)
x:P
!
!
l
x:P
0
P
!
!
l
P
0
&
Q
!
!
l
Q
0
)
P
Q
!
!
l
P
0
Q
0
P
!
!
l
P
0
&
Q
!
!
l
Q
0
)
(x:P
)
Q
!
!
l
P
0
[x
:=
Q
0
]
...
Lemma.
M
!
!
l
M
0
&
N
!
!
l
N
0
)
M
[x
:=
N
]
!
!
l
M
0
[x
:=
N
0
].
Pr
oof.
By
induction
on
the
denition
of
M
!
!
l
M
0
.
In
case
M
0
is
M
,
pro
ceed
b
y
induction
on
M
.
u
t
...
Lemma.
!
!
l
satises
the
diamond
pr
op
erty,
i.e.,
for
al
l
M

;
M

;
M


,
if
M

!
!
l
M

and
M

!
!
l
M

,
then
ther
e
exists
an
M



such
that
M

!
!
l
M

and
M

!
!
l
M

.
Pr
oof.
By
induction
on
the
denition
of
M

!
!
l
M

,
using
the
ab
o
v
e
lemma.
u
t
...
Lemma.
!
!

is
the
tr
ansitive
closur
e
of
!
!
l
.
Pr
oof.
Clearly

(!

)
=

!
!
l

!
!

Then
!
!

=
((!

)
=
)


!
!

l

(!
!

)

=
!
!

In
particular,
!
!

l
=
!
!

.
u
t
...
Theorem
(Ch
urc
h
and
Rosser,
	).
F
or
every
M

;
M

;
M


,
if
M

!
!

M

and
M

!
!

M

,
then
ther
e
exists
an
M



such
that
M

!
!

M

and
M

!
!

M

.
Pr
oof
(T
ait
&
Martin-L
of).
By
the
ab
o
v
e
three
lemmas.
u
t
...
Cor
ollar
y.
F
or
al
l
M
;
N

,
if
M
=

N
,
then
ther
e
exists
an
L


such
that
M
!
!

L
and
N
!
!

L.
..	.
Cor
ollar
y.
F
or
al
l
M
;
N

;
N


,
if
M
!
!

N

and
M
!
!

N

and
b
oth
N

and
N

ar
e
in

-normal
form,
then
N

=
N

.

Recall
the
relations
R

and
R
=
dened
earlier.

..
Expressibilit
y
and
undecidabilit
y

..0.
Cor
ollar
y.
F
or
al
l
M
;
N

,
if
ther
e
ar
e

-normal
forms
L

and
L

such
that
M
!
!

L

,
N
!
!

L

,
and
L

=
L

,
then
M
=

N
.
...
Example.
x:x
=

x:y
:x.
...
Remark.
One
can
consider
the
lam
b
da
calculus
as
an
equational
theory
,
i.e.,
a
formal
theory
with
form
ulas
of
the
form
M
=

N
.
The
preceding
example
establishes
c
onsistency
of
this
theory
,
in
the
follo
wing
sense:
there
exists
a
form
ula
P
whic
h
cannot
b
e
pro
v
ed.
This
ma
y
seem
to
b
e
a
v
ery
w
eak
prop
ert
y
,
compared
to
\one
cannot
pro
v
e
a
con
tradiction"
(where
a
suitable
notion
of
\con
tradiction"
in
ordi-
nary
logic
is
e.g.,
P
^
:P
).
But
note
that
in
most
formal
theories,
where
a
notion
of
con
tradiction
can
b
e
expressed,
its
pro
v
abilit
y
implies
pro
v
abilit
y
of
all
form
ulas.
Th
us,
consistency
can
b
e
equally
w
ell
dened
as
\one
cannot
pro
v
e
ev
erything".
..
Expressibilit
y
and
undecidabilit
y
Although
w
e
ha
v
e
giv
en
an
informal
explanation
of
the
meaning
of
-terms
it
remains
to
explain
in
what
sense

-reduction
more
precisely
can
express
computation.
In
this
section
w
e
sho
w
that
-calculus
can
b
e
seen
as
an
alternativ
e
form
ulation
of
recursion
theory
.
The
follo
wing
giv
es
a
w
a
y
of
represen
ting
n
um
b
ers
as
-terms.
...
Definition.
(i)
F
or
an
y
n

N
and
F
;
A


dene
F
n
(A)
(n-times
iter
ate
d
applic
ation
of
F
to
A)
b
y:
F
0
(A)
=
A
F
n+
(A)
=
F
(F
n
(A))
(ii)
F
or
an
y
n

N
,
the
Chur
ch
numer
al
c
n
is
the
-term
c
n
=
s:z
:s
n
(z
)
...
Example.
(i)
c
0
=
s:z
:z
;
(ii)
c

=
s:z
:s
z
;
(iii)
c

=
s:z
:s
(s
z
);
(iv)
c

=
s:z
:s
(s
(s
z
)).
...
Remark.
c
n
is
the
n
um
b
er
n
represen
ted
inside
the
-calculus.
The
follo
wing
sho
ws
ho
w
to
do
arithmetic
on
Ch
urc
h
n
umerals.


Chapter
.
T
yp
e-free
-calculus
...
Pr
oposition
(Rosser).
L
et
A
+
=
x:y
:s:z
:x
s
(y
s
z
);
A

=
x:y
:s:x
(y
s);
A
e
=
x:y
:y
x:
Then
A
+
c
n
c
m
=
c
n+m
;
A

c
n
c
m
=
c
nm
;
A
e
c
n
c
m
=
c
n
m
if
m
>
0:
Pr
oof.
F
or
an
y
n

N
,
c
n
s
z
=
(f
:x:f
n
(x))
s
z
=

(x:s
n
(x))
z
=

s
n
(z
)
Th
us
A
+
c
n
c
m
=
(x:y
:s:z
:x
s
(y
s
z
))
c
n
c
m
=

s:z
:c
n
s
(c
m
s
z
)
=

s:z
:c
n
s
(s
m
(z
))
=

s:z
:s
n
(s
m
(z
))
=
s:z
:s
n+m
(z
)
=
c
n+m
The
similar
prop
erties
for
m
ultiplication
and
exp
onen
tiation
are
left
as
ex-
ercises.
u
t
...
Remark.
Recall
that
M
=

N
when,
in
tuitiv
ely
,
M
and
N
denote
the
same
ob
ject.
F
or
instance
I
I
=

I
since
b
oth
terms,
in
tuitiv
ely
,
denote
the
iden
tit
y
function.
No
w
consider
the
t
w
o
terms
A
s
=
x:s:z
:s
(x
s
z
)
A
0
s
=
x:s:z
:x
s
(s
z
)
It
is
easy
to
calculate
that
A
s
c
n
=

c
n+
A
0
s
c
n
=

c
n+
So
b
oth
terms
denote,
informally
,
the
successor
function
on
Ch
urc
h
n
umer-
als,
but
the
t
w
o
terms
are
not

-equal
(wh
y
not?)
The
follo
wing
sho
ws
ho
w
to
dene
b
o
oleans
and
conditionals
inside
-
calculus.

..
Expressibilit
y
and
undecidabilit
y

...
Pr
oposition.
Dene
true
=
x:y
:x;
false
=
x:y
:y
;
if
B
then
P
else
Q
=
B
P
Q:
Then
if
true
then
P
else
Q
=

P
;
if
false
then
P
else
Q
=

Q:
Pr
oof.
W
e
ha
v
e:
if
true
then
P
else
Q
=
(x:y
:x)
P
Q
=

(y
:P
)
Q
=

P
:
The
pro
of
that
if
false
then
P
else
Q
=

Q
is
similar.
u
t
W
e
can
also
dene
pairs
in
-calculus.
...
Pr
oposition.
Dene
[P
;
Q]
=
x:x
P
Q;


=
x:y
:x;


=
x:y
:y
:
Then
[P
;
Q]


=

P
;
[P
;
Q]


=

Q:
Pr
oof.
W
e
ha
v
e:
[P
;
Q]


=
(x:x
P
Q)
x:y
:x
=

(x:y
:x)
P
Q
=

(y
:P
)
Q
=

P
:
The
pro
of
that
[P
;
Q]


=

Q
is
similar.
u
t
...
Remark.
Note
that
w
e
do
not
ha
v
e
[M


;
M


]
=

M
for
all
M

;
that
is,
our
pairing
op
erator
is
not
surje
ctive.
..	.
Remark.
The
construction
is
easily
generalized
to
tuples
[M

;
:
:
:
;
M
n
]
with
pro
jections

i
where
i

f;
:
:
:
;
ng.
The
follo
wing
giv
es
one
w
a
y
of
expressing
recursion
in
-calculus.


Chapter
.
T
yp
e-free
-calculus
..0.
Theorem
(Fixed
p
oin
t
theorem).
F
or
al
l
F
ther
e
is
an
X
such
that
F
X
=

X
In
fact,
ther
e
is
a
-term
Y
such
that,
for
al
l
F
:
F
(Y
F
)
=

Y
F
Pr
oof.
Put
Y
=
f
:(x:f
(x
x))
x:f
(x
x)
Then
Y
F
=
(f
:(x:f
(x
x))
x:f
(x
x))
F
=

(x:F
(x
x))
x:F
(x
x)
=

F
((x:F
(x
x))
x:F
(x
x))
=

F
((f
:(x:f
(x
x))
x:f
(x
x))
F
)
=
F
(Y
F
)
as
required.
u
t
...
Cor
ollar
y.
Given
M


ther
e
is
F


such
that:
F
=

M
[f
:=
F
]
Pr
oof.
Put
F
=
Y
f
:M
Then
F
=
Y
f
:M
=

(f
:M
)
(Y
f
:M
)
=
(f
:M
)
F
=

M
[f
:=
F
]
as
required.
u
t
Corollary
..
allo
ws
us
to
write
r
e
cursive
denitions
of
-terms;
that
is,
w
e
ma
y
dene
F
as
a
-term
satisfying
a
xe
d
p
oint
e
quation
F
=

x:M
where
the
term
F
o
ccurs
somewhere
inside
M
.
Ho
w
ev
er,
there
ma
y
b
e
sev
eral
terms
F
satisfying
this
equation
(will
these
b
e

-equal?).
...
Example.
Let
C
b
e
some
-term
whic
h
expresses
a
condition,
i.e.,
let
C
c
n
=

true
or
C
c
n
=

false,
for
all
n

N
.
Let
S
dene
the
successor
function
(see
Remark
..).
Supp
ose
w
e
w
an
t
to
compute
in
-calculus,
for
an
y
n
um
b
er,
the
smallest
n
um
b
er
greater
than
the
giv
en
one
that
satises
the
condition.
This
is
expressed
b
y
the
-term
F
:
H
=
f
:x:if
(C
x)
then
x
else
f
(S
x)
F
=
Y
H

..
Expressibilit
y
and
undecidabilit
y

Indeed,
for
example
F
c

=
(Y
H
)
c

=

H
(Y
H
)
c

=
(f
:x:if
(C
x)
then
x
else
f
(S
x))
(Y
H
)
c

=

if
(C
c

)
then
c

else
(Y
H
)
(S
c

)
=
if
(C
c

)
then
c

else
F
(S
c

)
So
far
w
e
ha
v
e
b
een
informal
as
to
ho
w
-terms
\express"
certain
func-
tions.
This
notion
is
made
precise
as
follo
ws.
...
Definition.
(i)
A
numeric
function
is
a
map
f
:
N
m
!
N
:
(ii)
A
n
umeric
function
f
:
N
m
!
N
is
-denable
if
there
is
an
F


suc
h
that
F
c
n

:
:
:
c
n
m
=

c
f
(n

;:::
;n
m
)
for
all
n

;
:
:
:
;
n
m

N
.
...
Remark.
By
the
Ch
urc
h-Rosser
prop
ert
y
,
(ii)
implies
that,
in
fact,
F
c
n

:
:
:
c
n
m
!
!

c
f
(n

;:::
;n
m
)
There
are
similar
notions
for
partial
functions|see
[].
W
e
shall
sho
w
that
all
recursiv
e
functions
are
-denable.
...
Definition.
The
class
of
r
e
cursive
functions
is
the
smallest
class
of
n
umeric
functions
con
taining
the
initial
functions
(i)
pr
oje
ctions:
U
m
i
(n

;
:
:
:
;
n
m
)
=
n
i
for
all


i

m;
(ii)
suc
c
essor:
S
+
(n)
=
n
+
;
(iii)
zer
o:
Z
(n)
=
0.
and
closed
under
c
omp
osition,
primitive
r
e
cursion,
and
minimization:
(i)
c
omp
osition:
if
g
:
N
k
!
N
and
h

;
:
:
:
;
h
k
:
N
m
!
N
are
recursiv
e,
then
so
is
f
:
N
m
!
N
dened
b
y
f
(n

;
:
:
:
;
n
m
)
=
g
(h

(n

;
:
:
:
;
n
m
);
:
:
:
;
h
k
(n

;
:
:
:
;
n
m
)):
(ii)
primitive
r
e
cursion:
if
g
:
N
m
!
N
and
h
:
N
m
+
!
N
are
recursiv
e,
then
so
is
f
:
N
m
+
!
N
dened
b
y
f
(0;
n

;
:
:
:
;
n
m
)
=
g
(n

;
:
:
:
;
n
m
);
f
(n
+
;
n

;
:
:
:
;
n
m
)
=
h(f
(n;
n

;
:
:
:
;
n
m
);
n;
n

;
:
:
:
;
n
m
):


Chapter
.
T
yp
e-free
-calculus
(iii)
minimization:
if
g
:
N
m
+
!
N
is
recursiv
e
and
for
all
n

;
:
:
:
;
n
m
there
is
an
n
suc
h
that
g
(n;
n

;
:
:
:
;
n
m
)
=
0
,
then
f
:
N
m
!
N
dened
as
follo
ws
is
also
recursiv
e

f
(n

;
:
:
:
;
n
m
)
=
n:g
(n;
n

;
:
:
:
;
n
m
)
=
0
...
Lemma.
The
initial
functions
ar
e
-denable.
Pr
oof.
With
U
m
i
=
x

:
:
:
:
x
m
:x
i
S
+
=
x:s:z
:s
(x
s
z
)
Z
=
x:c
0
the
necessary
prop
erties
hold.
u
t
...
Lemma.
The
-denable
functions
ar
e
close
d
under
c
omp
osition.
Pr
oof.
If
g
:
N
k
!
N
is
-denable
b
y
G


and
h

;
:
:
:
;
h
k
:
N
m
!
N
are
-denable
b
y
some
H

;
:
:
:
;
H
k

,
then
f
:
N
m
!
N
dened
b
y
f
(n

;
:
:
:
;
n
m
)
=
g
(h

(n

;
:
:
:
;
n
m
);
:
:
:
;
h
k
(n

;
:
:
:
;
n
m
))
is
-denable
b
y
F
=
x

:
:
:
:
x
m
:G
(H

x

:
:
:
x
m
)
:
:
:
(H
k
x

:
:
:
x
m
);
as
is
easy
to
v
erify
.
u
t
...
Lemma.
The
-denable
functions
ar
e
close
d
under
primitive
r
e
cur-
sion.
Pr
oof.
If
g
:
N
m
!
N
is
-denable
b
y
some
G


and
h
:
N
m
+
!
N
is
-denable
b
y
some
H

,
then
f
:
N
m+
!
N
dened
b
y
f
(0;
n

;
:
:
:
;
n
m
)
=
g
(n

;
:
:
:
;
n
m
);
f
(n
+
;
n

;
:
:
:
;
n
m
)
=
h(f
(n;
n

;
:
:
:
;
n
m
);
n;
n

;
:
:
:
;
n
m
);
is
-denable
b
y
F


where
F
=
x:x

:
:
:
:
x
m
:x
T
[c
0
;
G
x

:
:
:
x
n
]


;
T
=
p:[S
+
(p


);
H
(p


)
(p


)
x

:
:
:
x
m
]:
Indeed,
w
e
ha
v
e
F
c
n
c
n

:
:
:
c
n
m
=

c
n
T
[c
0
;
G
c
n

:
:
:
c
n
m
]


=

T
n
([c
0
;
G
c
n

:
:
:
c
n
m
])



n:g
(n;
n

;
:
:
:
;
n
m
)
=
0
denotes
the
smallest
n
um
b
er
n
satisfying
the
equation
g
(n;
n

;
:
:
:
;
n
m
)
=
0
.

..
Expressibilit
y
and
undecidabilit
y

Also,
T
[c
n
;
c
f
(n;n

;:::
;n
m
)
]
=

[S
+
(c
n
);
H
c
f
(n;n

;:::
;n
m
)
c
n
c
n

:
:
:
c
n
m
]
=

[c
n+
;
c
h(f
(n;n

;:::
;n
m
);n;n

;:::
;n
m
)
]
=

[c
n+
;
c
f
(n+;n

;:::
;n
m
)
]
So
T
n
([c
0
;
G
c
n

:
:
:
c
n
m
])
=

[c
n
;
c
f
(n;n

;:::
;n
m
)
]
F
rom
this
the
required
prop
ert
y
follo
ws.
u
t
..	.
Lemma.
The
-denable
functions
ar
e
close
d
under
minimization.
Pr
oof.
If
g
:
N
m
+
!
N
is
-denable
b
y
G


and
for
all
n

;
:
:
:
;
n
m
there
is
an
n,
suc
h
that
g
(n;
n

;
:
:
:
;
n
m
)
=
0,
then
f
:
N
m
!
N
dened
b
y
f
(n

;
:
:
:
;
n
m
)
=
m:g
(n;
n

;
:
:
:
;
n
m
)
=
0
is
-denable
b
y
F

,
where
F
=
x

:
:
:
:
x
m
:H
c
0
and
where
H


is
suc
h
that
H
=

y
:if
(zero?
(G
x

:
:
:
x
m
y
))
then
y
else
H
(S
+
y
):
Here,
zero?
=
x:x
(y
:false)
true
W
e
lea
v
e
it
as
an
exercise
to
v
erify
that
the
required
prop
erties
hold.
u
t
The
follo
wing
can
b
e
seen
as
a
form
of
c
ompleteness
of
the
-calculus.
..0.
Theorem
(Kleene).
A
l
l
r
e
cursive
functions
ar
e
-denable.
Pr
oof.
By
the
ab
o
v
e
lemmas.
u
t
The
con
v
erse
also
holds,
as
one
can
sho
w
b
y
a
routine
argumen
t.
Similar
results
hold
for
partial
functions
as
w
ell|see
[].
...
Definition.
Let
h;
i
:
N

!
N
b
e
a
bijectiv
e,
recursiv
e
function.
The
map
#
:

 !
N
is
dened
b
y:
#(v
i
)
=
h0;
ii
#(x:M
)
=
h;
h#(x);
#(M
)ii
#(M
N
)
=
h;
h#(M
);
#(N
)ii
F
or
M

,
w
e
tak
e
#(M
)
to
b
e
the
least
p
ossible
n
um
b
er
#(M
0
)
where
M
0
is
an
alpha-represen
tativ
e
of
M
.
Also,
for
M

,
w
e
dene
dM
e
=
c
#(M
)
.


Chapter
.
T
yp
e-free
-calculus
...
Definition.
Let
A

.
(i)
A
is
close
d
under
=

if
M

A
&
M
=

N
)
N

A
(ii)
A
is
non-trival
if
A
=
;
&
A
=

(iii)
A
is
r
e
cursive
if
#A
=
f#(M
)
j
M

Ag
is
recursiv
e.
...
Theorem
(Curry
,
Scott).
L
et
A
b
e
non-trivial
and
close
d
under
=

.
Then
A
is
not
r
e
cursive.
Pr
oof
(J.
T
erlou
w).
Supp
ose
A
is
recursiv
e.
Dene
B
=
fM
j
M
dM
e

Ag
There
exists
an
F


with
M

B
,
F
dM
e
=

c
0
;
M

B
,
F
dM
e
=

c

:
Let
M
0

A,
M


nA,
and
let
G
=
x:if
(zero?
(F
x))
then
M

else
M
0
Then
M

B
,
G
dM
e
=

M

M

B
,
G
dM
e
=

M
0
so
G

B
,
G
dGe
=

M

)
G
dGe

A
)
G

B
G

B
,
G
dGe
=

M
0
)
G
dGe

A
)
G

B
a
con
tradiction.
u
t
...
Remark.
The
ab
o
v
e
theorem
is
analogous
to
R
ic
e's
the
or
em
kno
wn
in
recursion
theory
.
The
follo
wing
is
a
v
arian
t
of
the
halting
problem.
Informally
it
states
that
the
formal
theory
of

-equalit
y
men
tioned
in
Remark
..
is
undecidable.
...
Cor
ollar
y
(Ch
urc
h).
fM


j
M
=

trueg
is
not
r
e
cursive.
...
Cor
ollar
y.
The
fol
lowing
set
is
not
r
e
cursive:
fM


j
	N


:
M
!
!

N
&
N
is
a

-normal
form
g:
One
can
also
infer
from
these
results
the
w
ell-kno
wn
theorem
due
to
Ch
urc
h
stating
that
rst-order
predicate
calculus
is
undecidable.

..
Historical
remarks
	
..
Historical
remarks
F
or
more
on
the
history
of
-calculus,
see
e.g.,
[
]
or
[].
First
hand
in-
formation
ma
y
b
e
obtained
from
Rosser
and
Kleene's
ey
e
witness
state-
men
ts
[	
,
],
and
from
Curry
and
F
eys'
b
o
ok
[
]
whic
h
con
tains
a
w
ealth
of
historical
information.
Curry
and
Ch
urc
h's
original
aims
ha
v
e
recen
tly
b
ecome
the
sub
ject
of
renew
ed
atten
tion|see,
e.g.,
[	
,
0
]
and
[0
].
..
Exercises
...
Exer
cise.
Sho
w,
step
b
y
step,
ho
w
application
of
the
con
v
en
tions
in
Notation
..
allo
ws
us
to
express
the
pre-terms
in
Example
..
as
done
in
Example
..	.
...
Exer
cise.
Whic
h
of
the
follo
wing
abbreviations
are
correct?
.
x:x
y
=
(x:x)
y
;
.
x:x
y
=
x:(x
y
);
.
x:y
:z
:x
y
z
=
(x:y
:z
:x)
(y
z
);
.
x:y
:z
:x
y
z
=
((x:y
:z
:x)
y
)
z
;
.
x:y
:z
:x
y
z
=
x:y
:z
:((x
y
)
z
).
...
Exer
cise.
Whic
h
of
the
follo
wing
iden
tications
are
correct?
.
x:y
:x
=
y
:x:y
;
.
(x:x)
z
=
(z
:z
)
x.
...
Exer
cise.
Do
the
follo
wing
terms
ha
v
e
normal
forms?
.
I,
where
x:x;
.

,
i.e.,
!
!
,
where
!
=
x:x
x;
.
K
I

where
K
=
x:y
:x;
.
(x:K
I
(x
x))
y
:K
I
(y
y
);
.
(x:z
(x
x))
y
:z
(y
y
).
...
Exer
cise.
A
r
e
duction
p
ath
from
a
-term
M
is
a
nite
or
innite
sequence
M
!

M

!

M

!

:
:
:

0
Chapter
.
T
yp
e-free
-calculus
A
term
that
has
a
normal
form
is
also
called
we
akly
normalizing
(or
just
normalizing),
since
at
least
one
of
its
reduction
paths
terminate
in
a
nor-
mal
form.
A
term
is
str
ongly
normalizing
if
al
l
its
reduction
paths
ev
en-
tually
terminate
in
normal
forms,
i.e.,
if
the
term
has
no
innite
reduction
paths.
Whic
h
of
the
v
e
terms
in
the
preceding
exercise
are
w
eakly/strongly
normalizing?
In
whic
h
cases
do
dieren
t
reduction
paths
lead
to
dieren
t
normal
forms?
...
Exer
cise.
Whic
h
of
the
follo
wing
are
true?
.
(x:y
:z
:(x
z
)
(y
z
))
u:u
=

(v
:v
y
:z
:u:u)
x:x;
.
(x:y
:x
z
:z
)
a:a
=

(y
:y
)
b:z
:z
;
.
x:
=


.
...
Exer
cise.
Pro
v
e
(without
using
the
Ch
urc
h-Rosser
Theorem)
that
for
all
M

;
M

;
M


,
if
M

!

M

and
M

!

M

,
then
there
exists
an
M



suc
h
that
M

!
!

M

and
M

!
!

M

.
Can
y
ou
extend
y
our
pro
of
tec
hnique
to
yield
a
pro
of
of
the
Ch
urc
h-
Rosser
theorem?
...
Exer
cise.
Fill
in
the
details
of
the
pro
of
Lemma
...
..	.
Exer
cise.
Fill
in
the
details
of
the
pro
of
Lemma
...
..0.
Exer
cise.
Whic
h
of
the
follo
wing
are
true?
.
(I
I)
(I
I)
!
!
l
I
I;
.
(I
I)
(I
I)
!
!
l
I;
.
I
I
I
I
!
!
l
I
I
I;
.
I
I
I
I
!
!
l
I;
...
Exer
cise.
Sho
w
that
the
fourth
clause
in
Denition
..
cannot
b
e
replaced
b
y
(x:P
)
Q
!
!
l
P
[x
:=
Q]:
That
is,
sho
w
that,
if
this
is
done,
then
!
!
l
do
es
not
satisfy
the
diamond
prop
ert
y
.
...
Exer
cise.
Pro
v
e
Corollary
..{..0.
...
Exer
cise.
W
rite
-terms
(without
using
the
notation
s
n
(z
))
whose

-normal
forms
are
the
Ch
urc
h
n
umerals
c

and
c
00
.

..
Exercises

...
Exer
cise.
Pro
v
e
that
A

and
A
e
satisfy
the
equations
stated
in
Prop
osition
...
...
Exer
cise.
F
or
eac
h
n

N
,
write
a
-term
B
n
suc
h
that
B
n
c
i
Q

:
:
:
Q
n
=

Q
i
;
for
all
Q

;
:
:
:
Q
n

.
...
Exer
cise.
F
or
eac
h
n

N
,
write
-terms
P
n
;


;
:
:
:
;

n
,
suc
h
that
for
all
Q

;
:
:
:
;
Q
n

:
(P
n
Q

:
:
:
Q
n
)

i
=

Q
i
:
...
Exer
cise
(Klop,
tak
en
from
[
]).
Let
x

x

:
:
:
x
n
:M
b
e
an
abbre-
viation
for
x

:x

:
:
:
:
x
n
:M
.
Let
?
=
abcdef
g
hij
k
l
mnopq
stuv
w
xy
z
r
:r
(thisisaf
ixedpointcombinator
);
$
=
??????????????????????????:
Sho
w
that
$
is
a
xe
d
p
oint
c
ombinator,
i.e.,
that
$
F
=

F
($
F
),
holds
for
all
F

.
...
Exer
cise.
Dene
a
-term
neg
suc
h
that
neg
true
=

false;
neg
false
=

true:
..	.
Exer
cise.
Dene
-terms
O
and
E
suc
h
that,
for
all
n

N
:
O
c
m
=


true
if
m
is
o
dd;
false
otherwise,
and
E
c
m
=


true
if
m
is
ev
en;
false
otherwise.
..0.
Exer
cise.
Dene
a
-term
P
suc
h
that
P
c
n+
=

c
n
Hint:
use
the
same
tric
k
as
in
the
pro
of
that
the
-denable
functions
are
closed
under
primitiv
e
recursion.
(Kleene
got
this
idea
during
a
visit
at
his
den
tist.)


Chapter
.
T
yp
e-free
-calculus
...
Exer
cise.
Dene
a
-term
eq?
suc
h
that,
for
all
n;
m

N
:
eq?
c
n
c
m
=


true
if
m
=
n;
false
otherwise.
Hint:
use
the
xed
p
oin
t
theorem
to
construct
a
-term
H
suc
h
that
H
c
n
c
m
=

if
(zero?
c
n
)
then
(if
(zero?
c
m
)
then
true
else
false)
else
(if
(zero?
c
m
)
then
false
else
(H
(P
c
n
)
(P
c
m
)))
where
P
is
as
in
the
preceding
exercise.
Can
y
ou
pro
v
e
the
result
using
instead
the
construction
in
Lemma
..?
...
Exer
cise.
Dene
a
-term
H
suc
h
that
for
all
n

N
:
H
c
n
=

c
n
...
Exer
cise.
Dene
a
-term
F
suc
h
that
for
all
n

N
:
H
c
n

=

c
n
...
Exer
cise.
Pro
v
e
Corollary
...

CHAPTER

In
tuitionistic
logic
The
classical
understanding
of
logic
is
based
on
the
notion
of
truth
.
The
truth
of
a
statemen
t
is
\absolute"
and
indep
enden
t
of
an
y
reasoning,
un-
derstanding,
or
action.
Statemen
ts
are
either
true
or
false
with
no
regard
to
an
y
\observ
er".
Here
\false"
means
the
same
as
\not
true",
and
this
is
expressed
b
y
the
tertium
non
datur
principle
that
\p
_
:p"
m
ust
hold
no
matter
what
the
meaning
of
p
is.
Needless
to
sa
y
,
the
information
con
tained
in
the
claim
p
_
:p
is
quite
limited.
T
ak
e
the
follo
wing
sen
tence
as
an
example:
Ther
e
is
seven
's
in
a
r
ow
somewher
e
in
the
de
cimal
r
epr
esen-
tation
of
the
numb
er

.
Note
that
it
ma
y
v
ery
w
ell
happ
en
that
nob
o
dy
ev
er
will
b
e
able
to
determine
the
truth
of
the
ab
o
v
e
sen
tence.
Y
et
w
e
are
forced
to
accept
that
one
of
the
cases
m
ust
necessarily
hold.
Another
w
ell-kno
wn
example
is
as
follo
ws:
Ther
e
ar
e
two
irr
ational
numb
ers
x
and
y
,
such
that
x
y
is
r
atio-
nal.
The
pro
of
of
this
fact
is
v
ery
simple:
if
p

p

is
a
rational
n
um
b
er
then
w
e
can
tak
e
x
=
y
=
p

;
otherwise
tak
e
x
=
p

p

and
y
=
p
.
The
problem
with
this
pro
of
is
that
w
e
do
not
kno
w
whic
h
of
the
t
w
o
p
ossibilities
is
the
righ
t
one.
Again,
there
is
v
ery
little
information
in
this
pro
of,
b
ecause
it
is
not
c
onstructive
.
These
examples
demonstrate
some
of
the
dra
wbac
ks
of
classical
logic,
and
giv
e
hin
ts
on
wh
y
in
tuitionistic
(or
constructiv
e)
logic
is
of
in
terest.
Although
the
ro
ots
of
constructivism
in
mathematics
reac
h
deeply
in
to
the
XIXth
Cen
tury
,
the
principles
of
in
tuitionistic
logic
are
usually
attributed
to
the
w
orks
of
the
Dutc
h
mathematician
and
philosopher
Luitzen
Egb
er-
tus
Jan
Brou
w
er
from
the
b
eginning
of
XXth
Cen
tury
.
Brou
w
er
is
also
the
in
v
en
tor
of
the
term
\in
tuitionism",
whic
h
w
as
originally
mean
t
to
denote
a



Chapter
.
In
tuitionistic
logic
philosophical
approac
h
to
the
foundations
of
mathematics,
b
eing
in
opp
osi-
tion
to
Hilb
ert's
\formalism".
In
tuitionistic
logic
as
a
branc
h
of
formal
logic
w
as
dev
elop
ed
later
around
the
y
ear
	0.
The
names
to
b
e
quoted
here
are
Heyting,
Gliv
enk
o,
Kol-
mogoro
v
and
Gen
tzen.
T
o
learn
more
ab
out
the
history
and
motiv
ations
see
[
]
and
Chapter

of
[0
].
..
In
tuitiv
e
seman
tics
In
order
to
understand
in
tuitionism,
one
should
forget
the
classical,
Platonic
notion
of
\truth".
No
w
our
judgemen
ts
ab
out
statemen
ts
are
no
longer
based
on
an
y
predened
v
alue
of
that
statemen
t,
but
on
the
existence
of
a
pro
of
or
\construction"
of
that
statemen
t.
The
follo
wing
rules
explain
the
informal
constructiv
e
seman
tics
of
prop
o-
sitional
connectiv
es.
These
rules
are
sometimes
called
the
BHK-interpr
etation
for
Brou
w
er,
Heyting
and
Kolmogoro
v.
The
algorithmic
a
v
or
of
this
de-
nition
will
later
lead
us
to
the
Curry-Ho
w
ard
isomorphism.

A
c
onstruction
of
'

^
'

c
onsists
of
a
c
onstruction
of
'

and
a
c
on-
struction
of
'

;

A
c
onstruction
of
'

_
'

c
onsists
of
a
numb
er
i

f;
g
and
a
c
on-
struction
of
of
'
i
;

A
c
onstruction
of
'

!
'

is
a
metho
d
(function)
tr
ansforming
every
c
onstruction
of
'

into
a
c
onstruction
of
'

;

Ther
e
is
no
p
ossible
c
onstruction
of
?
(wher
e
?
denotes
falsity).
Negation
:'
is
b
est
understo
o
d
as
an
abbreviation
of
an
implication
'
!
?.
That
is,
w
e
assert
:'
when
the
assumption
of
'
leads
to
an
absurd.
It
follo
ws
that

A
c
onstruction
of
:'
is
a
metho
d
that
turns
every
c
onstruction
of
'
into
a
non-existent
obje
ct.
Note
that
the
equiv
alence
b
et
w
een
:'
and
'
!
?
holds
also
in
classical
logic.
But
note
also
that
the
in
tuitionistic
statemen
t
:'
is
m
uc
h
stronger
than
just
\there
is
no
construction
for
'".
...
Example.
Consider
the
follo
wing
form
ulas:
.
?
!
p;
.
((p
!
q
)
!
p)
!
p;
.
p
!
::p;

..
Natural
deduction

.
::p
!
p;
.
:::p
!
:p;
.
(:q
!
:p)
!
(p
!
q
);
.
(p
!
q
)
!
(:q
!
:p);
.
:(p
^
q
)
!
(:p
_
:q
);
	.
(:p
_
:q
)
!
:(p
^
q
);
0.
((p
$
q
)
$
r
)
$
(p
$
(q
$
r
));
.
((p
^
q
)
!
r
)
$
(p
!
(q
!
r
));
.
(p
!
q
)
$
(:p
_
q
);
.
::(p
_
:p).
These
form
ulas
are
all
classical
tautologies.
Some
of
them
can
b
e
easily
giv
en
a
BHK-in
terpretation,
but
some
of
them
cannot.
F
or
instance,
a
con-
struction
for
form
ula
,
whic
h
should
b
e
written
as
\p
!
((p
!
?)
!
?)",
is
as
follo
ws:
Giv
en
a
pro
of
of
p,
here
is
a
pro
of
of
(p
!
?)
!
?:
T
ak
e
a
pro
of
of
p
!
?.
It
is
a
metho
d
to
translate
pro
ofs
of
p
in
to
pro
ofs
of
?.
Since
w
e
ha
v
e
a
pro
of
of
p,
w
e
can
use
this
metho
d
to
obtain
a
pro
of
of
?.
On
the
other
hand,
form
ula

do
es
not
seem
to
ha
v
e
suc
h
a
construction.
(The
classical
symmetry
b
et
w
een
form
ula

and

disapp
ears!)
..
Natural
deduction
The
language
of
in
tuitionistic
prop
ositional
logic
is
the
same
as
the
language
of
classical
prop
ositional
logic.
W
e
assume
an
innite
set
P
V
of
pr
op
ositional
variables
and
w
e
dene
the
set

of
formulas
b
y
induction,
represen
ted
b
y
the
follo
wing
grammar:

::=
?
j
P
V
j
(
!
)
j
(
_
)
j
(
^
):
That
is,
our
basic
connectiv
es
are:
implication
!,
disjunction
_,
conjunc-
tion
^,
and
the
constan
t
?
(false).
...
Convention.
The
connectiv
es
:
and
$
are
abbreviations.
That
is,

:'
abbreviates
'
!
?;


Chapter
.
In
tuitionistic
logic

'
$
 
abbreviates
('
!
 
)
^
( 
!
').
...
Convention.
.
W
e
sometimes
use
the
con
v
en
tion
that
implication
is
righ
t
asso
ciativ
e,
i.e.,
w
e
write
e.g.
'
!
 
!
#
instead
of
'
!
( 
!
#).
.
W
e
assume
that
negation
has
the
highest,
and
implication
the
lo
w
est
priorit
y
,
with
no
preference
b
et
w
een
_
and
^.
That
is,
:p
^
q
!
r
means
((:p)
^
q
)
!
r
.
.
And
of
course
w
e
forget
ab
out
outermost
paren
theses.
In
order
to
formalize
the
in
tuitionistic
prop
ositional
calculus,
w
e
dene
a
pro
of
system,
called
natur
al
de
duction
,
whic
h
is
motiv
ated
b
y
the
informal
seman
tics
of
..
...
W
arning.
What
follo
ws
is
a
quite
simplied
presen
tation
of
natural
deduction,
whic
h
is
often
con
v
enien
t
for
tec
hnical
reasons,
but
whic
h
is
not
alw
a
ys
adequate.
T
o
describ
e
the
relationship
b
et
w
een
v
arious
pro
ofs
in
ner
detail,
w
e
shall
consider
a
v
arian
t
of
the
system
in
Chapter
.
...
Definition.
(i)
A
c
ontext
is
a
nite
subset
of
.
W
e
use
 ;
,
etc.
to
range
o
v
er
con
texts.
(ii)
The
relation
 `
'
is
dened
b
y
the
rules
in
Figure
..
W
e
also
write
`
N
for
`.
(iii)
W
e
write
 ;

instead
of
 [
,
and
 ;
'
instead
of
 ;
f'g.
W
e
also
write
`
'
instead
of
fg
`
'.
(iv)
A
formal
pr
o
of
of
 `
'
is
a
nite
tree,
whose
no
des
are
lab
elled
b
y
pairs
of
form
( 0
;
'
0
),
whic
h
will
also
b
e
written
 0
`
'
0
,
satisfying
the
follo
wing
conditions:

The
ro
ot
lab
el
is
 `
';

All
the
lea
v
es
are
lab
elled
b
y
axioms;

The
lab
el
of
eac
h
father
no
de
is
obtained
from
the
lab
els
of
the
sons
using
one
of
the
rules.
(v)
F
or
innite
 w
e
dene
 `
'
to
mean
that
 0
`
',
for
some
nite
subset
 0
of
 .
(vi)
If
`
'
then
w
e
sa
y
that
'
is
a
the
or
em
of
the
in
tuitionistic
prop
ositional
calculus.

..
Natural
deduction

 ;
'
`
'
(Ax)
 `
'
 `
 
 `
'
^
 
(^I
)
 `
'
^
 
 `
'
(^E)
 `
'
^
 
 `
 
 `
'
 `
'
_
 
(_I)
 `
 
 `
'
_
 
 ;
'
`

 ;
 
`

 `
'
_
 
 `

(_E)
 ;
'
`
 
 `
'
!
 
(!
I)
 `
'
!
 
 `
'
 `
 
(!
E)
 `
?
 `
'
(?E)
Figure
.:
Intuitionistic
pr
opositional
calculus
The
pro
of
system
consists
of
an
axiom
sc
heme,
and
rules.
F
or
eac
h
logical
connectiv
e
(except
?)
w
e
ha
v
e
one
or
t
w
o
intr
o
duction
rules
and
one
or
t
w
o
elimination
rules.
An
in
tro
duction
rule
for
a
connectiv
e

tells
us
ho
w
a
conclusion
of
the
form
'

 
can
b
e
deriv
ed.
An
elimination
rule
describ
es
the
w
a
y
in
whic
h
'

 
can
b
e
used
to
deriv
e
other
form
ulas.
The
in
tuitiv
e
meaning
of
 `
'
is
that
'
is
a
consequence
of
the
assumptions
in
 .
W
e
giv
e
example
pro
ofs
of
our
three
fa
v
ourite
form
ulas:
...
Example.
Let
 abbreviate
f'
!
( 
!
#);
'
!
 
;
'g.
(i)
'
`
'
`
'
!
'
(!
I
)
(ii)
';
 
`
'
'
`
 
!
'
(!
I)
`
'
!
( 
!
')
(!
I)
(iii)
(!
E)
 `
'
!
( 
!
#)
 `
'
 `
 
!
#
 `
'
!
 
 `
'
 `
 
(!
E)
 `
#
'
!
( 
!
#);
'
!
 
`
'
!
#
(!
I)
'
!
( 
!
#)
`
('
!
 
)
!
('
!
#)
(!
I)
`
('
!
( 
!
#))
!
('
!
 
)
!
('
!
#)
(!
I)
(!
E)


Chapter
.
In
tuitionistic
logic
...
Remark.
Note
the
distinction
b
et
w
een
the
r
elation
`,
and
a
formal
pr
o
of
of
 `
'.
The
follo
wing
prop
erties
will
b
e
useful.
...
Lemma.
Intuitionistic
pr
op
ositional
lo
gic
is
close
d
under
we
akening
and
substitution,
that
is,
 `
'
implies
 ;
 
`
'
and
 [p
:=
 
]
`
'[p
:=
 
],
wher
e
[p
:=
 
]
denotes
a
substitution
of
 
for
al
l
o
c
curr
enc
es
of
a
pr
op
osi-
tional
variable
p.
Pr
oof.
Easy
induction
with
resp
ect
to
the
size
of
pro
ofs.
u
t
..
Algebraic
seman
tics
of
classical
logic
T
o
understand
b
etter
the
algebraic
seman
tics
for
in
tuitionistic
logic
let
us
b
egin
with
classical
logic.
Usually
,
seman
tics
of
classical
prop
ositional
for-
m
ulas
is
dened
in
terms
of
the
t
w
o
truth
v
alues,
0
and

as
follo
ws.
...
Definition.
Let
B
=
f0;
g.
(i)
A
valuation
in
B
is
a
map
v
:
P
V
!
B
;
suc
h
a
map
will
also
b
e
called
a
0-

valuation.
(ii)
Giv
en
a
0-
v
aluation
v
,
dene
the
map
[
[]
]
v
:

!
B
b
y:
[
[p]
]
v
=
v
(p);
for
p

P
V
;
[
[?]
]
v
=
0;
[
['
_
 
]
]
v
=
maxf[
[']
]
v
;
[
[ 
]
]
v
g;
[
['
^
 
]
]
v
=
min
f[
[']
]
v
;
[
[ 
]
]
v
g;
[
['
!
 
]
]
v
=
maxf
 [
[']
]
v
;
[
[ 
]
]
v
g:
W
e
also
write
v
(')
for
[
[']
]
v
.
(iii)
A
form
ula
'


is
a
tautolo
gy
if
v
(')
=

for
all
v
aluations
in
B
.
Let
us
consider
an
alternativ
e
seman
tics,
based
on
the
analogy
b
et
w
een
classical
connectiv
es
and
set-theoretic
op
erations.
...
Definition.
A
eld
of
sets
(over
X
)
is
a
nonempt
y
family
R
of
sub-
sets
of
X
,
closed
under
unions,
in
tersections
and
complemen
t
(to
X
).
It
follo
ws
immediately
that
fg;
X

R,
for
eac
h
eld
of
sets
R
o
v
er
X
.
Examples
of
elds
of
sets
are:
(i)
P
(X
);
(ii)
ffg;
X
g;
(iii)
fA

X
:
A
nite
or
 A
nite
g
( A
is
the
complemen
t
of
A).

..
Algebraic
seman
tics
of
classical
logic
	
...
Definition.
Let
R
b
e
a
eld
of
sets
o
v
er
X
.
(i)
A
valuation
in
R
is
a
map
v
:
P
V
!
R.
(ii)
Giv
en
a
v
aluation
v
in
R,
dene
the
map
[
[]
]
v
:

!
X
b
y:
[
[p]
]
v
=
v
(p)
for
p

P
V
[
[?]
]
v
=
fg
[
['
_
 
]
]
v
=
[
[']
]
v
[
[
[ 
]
]
v
[
['
^
 
]
]
v
=
[
[']
]
v
\
[
[ 
]
]
v
[
['
!
 
]
]
v
=
(X
 [
[']
]
v
)
[
[
[ 
]
]
v
W
e
also
write
v
(')
for
[
[']
]
v
.
...
Pr
oposition.
The
ab
ove
two
appr
o
aches
to
semantics
ar
e
e
quivalent,
i.e.,
the
fol
lowing
c
onditions
ar
e
e
quivalent
for
e
ach
eld
of
subsets
R
over
a
nonempty
set
X
:
.
'
is
a
tautolo
gy;
.
v
(')
=
X
,
for
al
l
valuations
v
in
R.
Pr
oof.
()
)
():
Supp
ose
that
v
(')
=
X
.
There
is
an
elemen
t
a

X
suc
h
that
a

v
(').
Dene
a
0-
v
aluation
w
so
that
w
(p)
=

i
a

v
(p).
Pro
v
e
b
y
induction
that
for
all
form
ulas
 
w
( 
)
=

i
a

v
( 
):
Then
w
(')
=
.
()
)
():
A
0-
v
aluation
can
b
e
seen
as
a
v
aluation
in
R
that
assigns
only
X
and
fg
to
prop
ositional
v
ariables.
u
t
...
Definition.
A
Bo
ole
an
algebr
a
is
an
algebraic
system
of
the
form
B
=
hB
;
[;
\;
 ;
0;
i
,
where:

[;
\
are
asso
ciativ
e
and
comm
utativ
e;

(a
[
b)
\
c
=
(a
\
c)
[
(b
\
c)
and
(a
\
b)
[
c
=
(a
[
c)
\
(b
[
c);

a
[
0
=
a
and
a
\

=
a;

 a
[
a
=

and
 a
\
a
=
0.
The
relation

dened
b
y
a

b
i
a
[
b
=
b
is
a
partial
order

in
ev
ery
Bo
olean
algebra,
and
the
op
erations
\;
[
are
the
glb
and
lub
op
erations
w.r.t.
this
order.

A
transitiv
e,
reexiv
e
and
an
ti-symmetric
relation.

0
Chapter
.
In
tuitionistic
logic
The
notion
of
a
Bo
olean
algebra
is
a
straigh
tforw
ard
generalization
of
the
notion
of
a
eld
of
sets.
Another
example
of
a
Bo
olean
algebra
is
the
algebra
of
truth
v
alues
hB
;
max
;
min
;
 ;
0;
i,
where
 x
is

 x.
W
e
can
generalize
the
ab
o
v
e
set
seman
tics
to
arbitrary
Bo
olean
algebras
b
y
replacing
v
aluations
in
a
eld
of
sets
b
y
v
aluations
in
a
Bo
olean
algebra
in
the
ob
vious
w
a
y
.
But
in
fact,
ev
ery
Bo
olean
algebra
is
isomorphic
to
a
eld
of
sets,
so
this
generalization
do
es
not
c
hange
our
seman
tics.
..
Heyting
algebras
W
e
will
no
w
dev
elop
a
seman
tics
for
in
tuitionistic
prop
ositional
logic.
Let

b
e
the
set
of
all
prop
ositional
form
ulas,
let
 

(in
particular
 ma
y
b
e
empt
y)
and
let

b
e
the
follo
wing
equiv
alence
relation:
'

 
i
 `
'
!
 
and
 `
 
!
':
Let
L
 =
=

=
f[']

:
'

g,
and
dene
a
partial
order

o
v
er
L
 b
y:
[']


[ 
]

i
 `
'
!
 
:
That

is
an
equiv
alence
relation
and
that

is
a
w
ell-dened
partial
order
is
a
consequence
of
the
follo
wing
form
ulas
b
eing
pro
v
able:

'
!
';

('
!
 
)
!
(( 
!
#)
!
('
!
#));
In
addition,
w
e
can
dene
the
follo
wing
op
erations
o
v
er
L
 :
[]

[
[
]

=
[
_

]

;
[]

\
[
]

=
[
^

]

;
 []

=
[:]

:
These
op
erations
are
w
ell-dened,
b
ecause
the
follo
wing
form
ulas
are
pro
v-
able:

('
!
'
0
)
!
(:'
0
!
:');

('
!
'
0
)
!
(( 
!
 
0
)
!
(('
_
 
)
!
('
0
_
 
0
)));

('
!
'
0
)
!
(( 
!
 
0
)
!
(('
^
 
)
!
('
0
^
 
0
))).
W
e
can
go
on
and
sho
w
that
op
erations
\
and
[
are
the
glb
and
lub
op
era-
tions
w.r.t.
the
relation
,
and
that
the
distributivit
y
la
ws
(a
[
b)
\
c
=
(a
\
c)
[
(b
\
c)
and
(a
\
b)
[
c
=
(a
[
c)
\
(b
[
c)

..
Heyting
algebras

are
satised.

The
class
[?]

is
the
least
elemen
t
0
of
L
 ,
b
ecause
?
!
'
is
pro
v
able,
and
[>]

,
where
>
=
?
!
?,
is
the
top
elemen
t
.
W
e
ha
v
e
[>]

=
f'
:
 `
'g.
Ho
w
ev
er,
there
are
(not
unexp
ected)
diculties
with
the
complemen
t
op
eration:
W
e
ha
v
e
 a
\
a
=
[?]

but
not
necessarily
 a
[
a
=
[>]

.
The
b
est
w
e
can
assert
ab
out
 a
is
that
it
is
the
gr
e
atest
element
such
that
 a
\
a
=
0,
and
w
e
can
call
it
a
pseudo-c
omplement
.
Since
negation
is
a
sp
ecial
kind
of
implication,
the
ab
o
v
e
calls
for
a
generalization.
An
elemen
t
c
is
called
a
r
elative
pseudo-c
omplement
of
a
with
resp
ect
to
b,
i
c
is
the
greatest
elemen
t
suc
h
that
a
\
c

b.
The
relativ
e
pseudo-complemen
t,
if
it
exists,
is
denoted
a
)
b.
It
is
not
dicult
to
nd
out
that
in
our
algebra
L
 ,
often
called
a
Lin-
denb
aum
algebr
a
,
w
e
ha
v
e
[']

)
[ 
]

=
['
!
 
]

.
W
e
ha
v
e
just
disco
v
ered
a
new
t
yp
e
of
algebra,
called
Heyting
algebr
a
or
pseudo-Bo
ole
an
algebr
a
.
...
Definition.
A
Heyting
algebr
a
is
an
algebraic
system
of
the
form
H
=
hH
;
[;
\;
);
 ;
0;
i,
that
satises
the
follo
wing
conditions:

[;
\
are
asso
ciativ
e
and
comm
utativ
e;

(a
[
b)
\
c
=
(a
\
c)
[
(b
\
c)
and
(a
\
b)
[
c
=
(a
[
c)
\
(b
[
c);

a
[
0
=
a
and
a
\

=
a;

a
[
a
=
a;

a
\
c

b
is
equiv
alen
t
to
c

a
)
b
(where
a

b
stands
for
a
[
b
=
b);

 a
=
a
)
0.
The
ab
o
v
e
conditions
amoun
t
to
as
m
uc
h
as
sa
ying
that
H
is
a
distributiv
e
lattice
with
zero
and
relativ
e
pseudo-complemen
t
dened
for
eac
h
pair
of
elemen
ts.
In
particular,
eac
h
Bo
olean
algebra
is
a
Heyting
algebra
with
a
)
b
dened
as
 a
[
b.
The
most
prominen
t
example
of
a
Heyting
algebra
whic
h
is
not
a
Bo
olean
algebra
is
the
algebra
of
op
en
sets
of
a
top
ological
space,
for
instance
the
algebra
of
op
en
subsets
of
the
Euclidean
plane
R

.
...
Definition.

The
sym
b
ol
%(a;
b)
denotes
the
distance
b
et
w
een
p
oin
ts
a;
b

R

;

A
subset
A
of
R

is
op
en
i
for
ev
ery
a

A
there
is
an
r
>
0
with
fb

R

:
%(a;
b)
<
r
g

A;

If
A
is
a
subset
of
R

then
In
t(A)
denotes
the
interior
of
A,
i.e.,
the
union
of
all
op
en
subsets
of
A.

That
is,
L
 is
a
distributive
lattic
e
.


Chapter
.
In
tuitionistic
logic
...
Pr
oposition.
L
et
H
=
hO
(R

);
[;
\;
);
;
0;
i,
wher
e

O
(R

)
is
the
family
of
al
l
op
en
subsets
of
R

;

the
op
er
ations
\,
[
ar
e
set-the
or
etic;

A
)
B
:=
In
t( A
[
B
),
for
arbitr
ary
op
en
sets
A
and
B
;

0
=
fg
and

=
R

.


A
=
In
t( A),
wher
e
 is
the
set-the
or
etic
c
omplement.
Then
H
is
a
Heyting
algebr
a.
Pr
oof.
Exercise
...
u
t
In
fact,
ev
ery
Heyting
algebra
is
isomorphic
to
a
subalgebra
of
the
algebra
of
op
en
sets
of
a
top
ological
space.
A
comprehensiv
e
study
of
the
algebraic
seman
tics
for
in
tuitionistic
(and
classical)
logic
is
the
b
o
ok
of
Rasio
w
a
and
Sik
orski
[
].
See
also
Chapter

of
[0
].
The
seman
tics
of
in
tuitionistic
prop
ositional
form
ulas
is
no
w
dened
as
follo
ws.
...
Definition.
Let
H
=
hH
;
[;
\;
);
 ;
0;
i
b
e
a
Heyting
algebra.
(i)
A
valuation
v
in
a
H
is
a
map
v
:
P
V
!
H
.
(ii)
Giv
en
a
v
aluation
v
in
H
,
dene
the
map
[
[]
]
v
:

!
H
b
y:
[
[p]
]
v
=
v
(p)
for
p

P
V
[
[?]
]
v
=
0
[
['
_
 
]
]
v
=
[
[']
]
v
[
[
[ 
]
]
v
[
['
^
 
]
]
v
=
[
[']
]
v
\
[
[ 
]
]
v
[
['
!
 
]
]
v
=
[
[']
]
v
)
[
[ 
]
]
v
As
usual,
w
e
write
v
(')
for
[
[']
]
v
.
...
Not
a
tion.
Let
H
=
hH
;
[;
\;
);
 ;
0;
i
b
e
a
Heyting
algebra.
W
e
write:

H
;
v
j
=
',
whenev
er
v
(')
=
;

H
j
=
',
whenev
er
H
;
v
j
=
',
for
all
v
;

H
;
v
j
=
 ,
whenev
er
H
;
v
j
=
',
for
all
'

 ;

H
j
=
 ,
whenev
er
H
;
v
j
=
 ,
for
all
v
;

j
=
',
whenev
er
H
;
v
j
=
',
for
all
H
;
v
;

 j
=
',
whenev
er
H
;
v
j
=
 implies
H
;
v
j
=
',
for
all
H
and
v
.

..
Heyting
algebras

W
e
sa
y
that
a
form
ula
'
suc
h
that
j
=
'
is
intuitionistic
al
ly
valid
or
is
an
intuitionistic
tautolo
gy.
It
follo
ws
from
the
follo
wing
completeness
theorem
that
the
notions
of
a
theorem
and
a
tautology
coincide
for
in
tuitionistic
prop
ositional
calculus.
...
Theorem
(Soundness
and
Completeness).
The
fol
lowing
c
onditions
ar
e
e
quivalent
.
 `
';
.
 j
=
'.
Pr
oof.
()
)
():
V
erify
that
all
pro
v
able
form
ulas
are
v
alid
in
all
Heyting
algebras
(induction
w.r.t.
pro
ofs).
()
)
():
This
follo
ws
from
our
construction
of
the
Linden
baum
algebra.
Indeed,
supp
ose
that
 j
=
',
but
 `
'.
Then
'

>,
i.e.,
[']

=

in
L
 .
Dene
a
v
aluation
v
b
y
v
(p)
=
[p]

in
L
 and
pro
v
e
b
y
induction
that
v
( 
)
=
[ 
]

,
for
all
form
ulas
 
.
It
follo
ws
that
v
(')
=
,
a
con
tradiction.
u
t
...
Example.
T
o
see
that
P
eirce's
la
w
((p
!
q
)
!
p)
!
p
is
not
in
tu-
itionistically
v
alid,
consider
the
algebra
of
op
en
subsets
of
R

.
T
ak
e
v
(p)
to
b
e
the
whole
space
without
one
p
oin
t,
and
v
(q
)
=
fg.
(Note
that
a
)
b
=

in
a
Heyting
algebra
i
a

b.)
In
tuitionistic
logic
is
not
nite-v
alued:
There
is
no
single
nite
Heyting
algebra
H
suc
h
that
`
'
is
equiv
alen
t
to
H
j
=
'.
Indeed,
consider
the
form
ula
W
fp
i
$
p
j
:
i;
j
=
0;
:
:
:
;
n
and
i
=
j
g.
(Here
the
sym
b
ol
W
abbreviates
the
disjunction
of
all
mem
b
ers
of
the
set.)
This
form
ula
is
not
v
alid
in
general
(Exercise
..0),
although
it
is
v
alid
in
all
Heyting
algebras
of
cardinalit
y
at
most
n.
But
nite
Heyting
algebras
are
sucien
t
for
the
seman
tics,
as
w
ell
as
one
sucien
tly
\ric
h"
innite
algebra.
...
Theorem.
.
A
formula
'
of
length
n
is
valid
i
it
is
valid
in
al
l
Heyting
algebr
as
of
c
ar
dinality
at
most


n
;
.
L
et
H
b
e
the
algebr
a
of
al
l
op
en
subsets
of
a
dense-in-itself

metric
sp
ac
e
V
(for
instanc
e
the
algebr
a
of
al
l
op
en
subsets
of
R

).
Then
H
j
=
'
i
'
is
valid.

Ev
ery
p
oin
t
x
is
a
limit
of
a
sequence
fx
n
g
n
,
where
x
n
=
x,
for
all
n.


Chapter
.
In
tuitionistic
logic
W
e
giv
e
only
a
sk
etc
h
of
the
main
ideas
of
the
pro
of,
for
the
most
curious
reader.
See
[
]
for
details.
F
or
(),
supp
ose
H
;
v
j
=
',
and
let
'

;
:
:
:
'
m
b
e
all
subform
ulas
of
'.
W
e
construct
a
small
mo
del
H
0
as
a
distributiv
e
sublattice
of
H
,
with
0
and
,
generated
b
y
the
elemen
ts
v
('

);
:
:
:
;
v
('
m
).
This
lattice
is
a
Heyting
algebra
(w
arning:
this
is
not
a
Heyting
subalgebra
of
H
),
and
H
0
;
v
0
j
=
',
for
a
suitable
v
0
.
As
for
(),
ev
ery
nite
algebra
can
b
e
em
b
edded
in
to
the
algebra
of
op
en
subsets
of
some
op
en
subset
of
V
,
and
this
algebra
is
a
homomorphic
image
of
H
.
Th
us,
ev
ery
v
aluation
in
a
nite
algebra
can
b
e
translated
in
to
a
v
aluation
in
H
.
F
rom
part
()
of
the
ab
o
v
e
theorem,
it
follo
ws
that
in
tuitionistic
prop
o-
sitional
logic
is
decidable.
But
the
upp
er
b
ound
obtained
this
w
a
y
(double
exp
onen
tial
space)
can
b
e
impro
v
ed
do
wn
to
p
olynomial
space,
with
help
of
other
metho
ds,
see
[0
].
..
Kripk
e
seman
tics
W
e
no
w
in
tro
duce
another
seman
tics
of
in
tuitionistic
prop
ositional
logic.
...
Definition.
A
Kripke
mo
del
is
dened
as
a
tuple
of
the
form
C
=
hC
;
;

i,
where
C
is
a
non-empt
y
set,

is
a
partial
order
in
C
and

is
a
binary
relation
b
et
w
een
elemen
ts
of
C
(called
states
or
p
ossible
worlds)
and
prop
ositional
v
ariables,
that
satises
the
follo
wing
monotonicit
y
condition:
If
c

c
0
and
c

p
then
c
0

p:
The
in
tuition
is
that
elemen
ts
of
the
mo
del
represen
t
states
of
kno
wledge.
The
relation

represen
ts
extending
states
b
y
gaining
more
kno
wledge,
and
the
relation

tells
whic
h
atomic
form
ulas
are
kno
wn
to
b
e
true
in
a
giv
en
state.
W
e
extend
this
relation
to
pro
vide
meaning
for
prop
ositional
form
ulas
as
follo
ws.
...
Definition.
If
C
=
hC
;
;

i
is
a
Kripk
e
mo
del,
then

c

'
_
 
i
c

'
or
c

 
;

c

'
^
 
i
c

'
and
c

 
;

c

'
!
 
i
c
0

 
,
for
all
c
0
suc
h
that
c

c
0
and
c
0

';

c

?
nev
er
happ
ens.
W
e
use
C

'
to
mean
that
c

',
for
all
c

C
.
Note
that
the
ab
o
v
e
denition
implies
the
follo
wing
rule
for
negation:

..
Kripk
e
seman
tics


c

:'
i
c
0

',
for
all
c
0

c.
and
the
follo
wing
generalized
monotonicit
y
(pro
of
b
y
easy
induction):
If
c

c
0
and
c

'
then
c
0

':
W
e
no
w
w
an
t
to
sho
w
completeness
of
Kripk
e
seman
tics.
F
or
this,
w
e
trans-
form
ev
ery
Heyting
algebra
in
to
a
Kripk
e
mo
del.
...
Definition.
A
lter
in
a
Heyting
algebra
H
=
hH
;
[;
\;
);
 ;
0;
i
is
a
nonempt
y
subset
F
of
H
,
suc
h
that

a;
b

F
implies
a
\
b

F
;

a

F
and
a

b
implies
b

F
.
A
lter
F
is
pr
op
er
i
F
=
H
.
A
prop
er
lter
F
is
prime
i
a
[
b

F
implies
that
either
a
or
b
b
elongs
to
F
.
...
Lemma.
L
et
F
b
e
a
pr
op
er
lter
in
H
and
let
a

F
.
Ther
e
exists
a
prime
lter
G
such
that
F

G
and
a

G.
W
e
only
giv
e
a
hin
t
for
the
pro
of
that
can
b
e
found
e.g.,
in
[
].
Consider
the
family
of
all
lters
G
con
taining
F
and
suc
h
that
a

G,
ordered
b
y
inclusion.
Apply
Kurato
wski-Zorn
Lemma
to
sho
w
that
this
family
has
a
maximal
elemen
t.
This
is
a
prime
lter
(Exercise
..)
although
it
is
not
necessarily
a
maximal
prop
er
lter.
...
Lemma.
L
et
v
b
e
a
valuation
in
a
Heyting
algebr
a
H
.
Ther
e
is
a
Kripke
mo
del
C
=
hC
;
;

i,
such
that
H
;
v
j
=
'
i
C

',
for
al
l
formu-
las
'.
Pr
oof.
W
e
tak
e
C
to
b
e
the
set
of
all
prime
lters
in
H
.
The
relation

is
inclusion,
and
w
e
dene
F

p
i
v
(p)

F
.
By
induction,
w
e
pro
v
e
that,
for
all
form
ulas
 
,
F

 
i
v
( 
)

F
:
(.)
The
only
non
trivial
case
of
this
induction
is
when
 
=
 
0
!
 
0
0
.
Assume
F

 
0
!
 
00
,
and
supp
ose
that
v
( 
0
!
 
00
)
=
v
( 
0
)
)
v
( 
0
0
)

F
.
T
ak
e
the
least
lter
G
0
con
taining
F
[
fv
( 
0
)g.
Then
G
0
=
fb
:
b

f
\
v
( 
0
)
for
some
f

F
g;
and
w
e
ha
v
e
v
( 
0
0
)

G
0
,
in
particular
G
0
is
prop
er.
Indeed,
otherwise
v
( 
0
0
)

f
\
v
( 
0
),
for
some
f

F
,
and
th
us
f

v
( 
0
)
)
v
( 
0
0
)

F
|
a
con
tradiction.


Chapter
.
In
tuitionistic
logic
W
e
extend
G
0
to
a
prime
lter
G,
not
con
taining
v
( 
0
0
).
By
the
induction
h
yp
othesis,
G

 
0
.
Since
F

 
0
!
 
0
0
,
it
follo
ws
that
G

 
0
0
.
That
is,
v
( 
0
0
)

G
|
a
con
tradiction.
F
or
the
con
v
erse,
assume
that
v
( 
0
!
 
0
0
)

F

G

 
0
.
F
rom
the
induction
h
yp
othesis
w
e
ha
v
e
v
( 
0
)

G
and
since
F

G
w
e
obtain
v
( 
0
)
)
v
( 
0
0
)

G.
Th
us
v
( 
0
0
)

v
( 
0
)
\
(v
( 
0
)
)
v
( 
0
0
))

G,
and
from
the
induction
h
yp
othesis
w
e
conclude
G

 
00
as
desired.
The
other
cases
are
easy
.
Note
that
primalit
y
is
essen
tial
for
disjunction.
Ha
ving
sho
wn
(.),
assume
that
C

'
and
H
;
v
j
=
'.
Then
v
(')
=

and
there
exist
a
prop
er
lter
not
con
taining
v
(').
This
lter
extends
to
a
prime
lter
G
suc
h
that
v
(')

G
and
th
us
G

'.
On
the
other
hand,
if
H
;
v
j
=
',
then
v
(')
=

and

b
elongs
to
all
lters
in
H
.
u
t
...
Theorem.
The
se
quent
 `
'
is
pr
ovable
i
for
al
l
Kripke
mo
dels
C
,
the
c
ondition
C

 implies
C

'.
Pr
oof.
The
left-to-righ
t
part
is
sho
wn
b
y
induction
(Exercise
..).
F
or
the
other
direction
assume
 `
'.
Then
H
;
v
j
=
 but
H
;
v
j
=
',
for
some
H
;
v
.
F
rom
the
previous
lemma
w
e
ha
v
e
a
Kripk
e
mo
del
C
with
C

 and
C

'.
u
t
Here
is
a
nice
application
of
Kripk
e
seman
tics.
...
Pr
oposition.
If
`
'
_
 
then
either
`
'
or
`
 
.
Pr
oof.
Assume
`
'
and
`
 
.
There
are
Kripk
e
mo
dels
C

=
hC

;


;


i
and
C

=
hC

;


;


i
and
states
c


C

and
c


C

,
suc
h
that
c


'
and
c


 
.
Without
loss
of
generalit
y
w
e
can
assume
that
c

and
c

are
least
elemen
ts
of
C

and
C

,
resp
ectiv
ely
,
and
that
C

\
C

=
fg.
Let
C
=
hC

[
C

[
fc
0
g;
;

i,
where
c
0

C

[
C

,
the
order
is
the
union
of


and


extended
b
y
c
0
tak
en
as
the
least
elemen
t,
and

is
the
union
of


and


.
That
is,
c
0

p;
for
all
v
ariables
p.
It
is
easy
to
see
that
this
is
a
Kripk
e
mo
del.
In
addition
w
e
ha
v
e
C
;
c


#
i
C

;
c


#,
for
all
form
ulas
#,
and
a
similar
prop
ert
y
holds
for
c

.
No
w
supp
ose
that
`
'
_
 
.
By
soundness,
w
e
ha
v
e
c
0

'
_
 
,
and
th
us
either
c
0

'
or
c
0

 
,
b
y
denition
of

.
Then
either
c


'
or
c


 
,
b
ecause
of
monotonicit
y
.
u
t
..
The
implicational
fragmen
t
The
most
imp
ortan
t
logical
conjectiv
e
is
the
implication.
Th
us,
it
is
mean-
ingful
to
study
the
fragmen
t
of
prop
ositional
calculus
with
only
one
connec-
tiv
e:
the
implication.
This
is
the
true
minimal
lo
gic
.
The
natural
deduction

..
Exercises

system
for
the
implicational
fragmen
t
consists
of
the
rules
(!
E),
(!
I)
and
the
axiom
sc
heme.
...
Theorem.
The
implic
ational
fr
agment
of
intuitionistic
pr
op
ositional
c
alculus
is
c
omplete
with
r
esp
e
ct
to
Kripke
mo
dels,
i.e.,
 `
'
is
pr
ovable
i
for
al
l
Kripke
mo
dels
C
,
the
c
ondition
C

 implies
C

'.
Pr
oof.
The
implication
from
left
to
righ
t
follo
ws
from
soundness
of
the
full
natural
deduction
system,
of
whic
h
our
minimal
logic
is
a
fragmen
t.
F
or
the
pro
of
in
the
other
direction,
let
us
assume
that
 `
'.
W
e
dene
a
Kripk
e
mo
del
C
=
hC
;
;

i,
where
C
=
f
:
 
;
and

is
closed
under
`g:
That
is,


C
means
that

`
 
implies
 

.
The
relation

is
inclusion
and

is
,
that
is,


p
holds
i
p

,
for
all
prop
ositional
v
ariables
p.
By
induction
w
e
sho
w
the
follo
wing
claim:


 
i
 

;
for
all
implicational
form
ulas
 
and
all
states
.
The
case
of
a
v
ariable
is
immediate
from
the
denition.
Let
 
b
e
 

!
 

and
let


 
.
T
ak
e

0
=
f#
:
;
 

`
#g.
Then
 



0
and,
b
y
the
induction
h
yp
othesis,

0

 

.
Th
us

0

 

and
w
e
get
 



0
,
again
b
y
the
induction
h
yp
othesis.
Th
us,
;
 

`
 

,
and
b
y
(!
I)
w
e
get
what
w
e
w
an
t.
No
w
assume
 


(that
is

`
 
)
and
tak
e

0


with

0

 

.
Then
 



0
,
i.e.,

0
`
 

.
But
also

0
`
 

!
 

,
b
ecause



0
.
By
(!
E)
w
e
can
deriv
e

0
`
 

,
whic
h
means,
b
y
the
induction
h
yp
othesis,
that

0

 

.
u
t
The
completeness
theorem
has
a
v
ery
imp
ortan
t
consequence:
the
con-
serv
ativit
y
of
the
full
in
tuitionistic
prop
ositional
calculus
o
v
er
its
implica-
tional
fragmen
t.
...
Theorem.
L
et
'
b
e
an
implic
ational
formula,
and
let
 b
e
a
set
of
implic
ational
formulas.
If
 `
'
c
an
b
e
derive
d
in
the
intuitionistic
pr
op
osi-
tional
c
alculus
then
it
c
an
b
e
derive
d
in
the
implic
ational
fr
agment.
Pr
oof.
Easy
.
But
note
that
w
e
use
only
one
half
from
the
t
w
o
completeness
theorems
..
and
..:
w
e
need
only
soundness
of
the
full
logic
and
only
the
other
direction
for
the
fragmen
t.
u
t
..
Exercises
...
Exer
cise.
Find
constructions
for
form
ulas
(),
(),
(),
(),
(	),
()
and
()
of
Example
..,
and
do
not
nd
constructions
for
the
other
for-
m
ulas.


Chapter
.
In
tuitionistic
logic
...
Exer
cise.
Pro
v
e
Lemma
...
...
Exer
cise.
Giv
e
natural
deduction
pro
ofs
for
the
form
ulas
of
Exer-
cise
...
...
Exer
cise.
Sho
w
that
the
relation

dened
in
a
Bo
olean
algebra
b
y
the
condition
a

b
i
a
[
b
=
b
is
a
partial
order
and
that

a
\
b

a;

the
condition
a

b
is
equiv
alen
t
to
a
\
b
=
a;

the
op
erations
[
and
\
are
resp
ectiv
ely
the
upp
er
and
lo
w
er
b
ound
wrt.
;

the
constan
ts
0
and

are
resp
ectiv
ely
the
b
ottom
and
top
elemen
t.
...
Exer
cise.
Sho
w
that
the
relation

dened
in
a
Heyting
algebra
b
y
the
condition
a

b
i
a
[
b
=
b
is
a
partial
order
and
that

 a
\
a
=
0;

(a
[
b)
\
a
=
a
and
a
\
b

a;

the
condition
a

b
is
equiv
alen
t
to
a
\
b
=
a,
and
to
a
)
b
=
;

the
op
erations
[
and
\
are
resp
ectiv
ely
the
upp
er
and
lo
w
er
b
ound
wrt.
;

the
constan
ts
0
and

are
resp
ectiv
ely
the
b
ottom
and
top
elemen
t.
...
Exer
cise.
Pro
v
e
Prop
osition
...
...
Exer
cise.
Fill
in
the
details
of
the
pro
of
that
the
Linden
baum
alge-
bra
L
 of
.
is
indeed
a
Heyting
algebra.
...
Exer
cise.
Complete
the
pro
of
of
the
completeness
theorem
...
..	.
Exer
cise.
Sho
w
that
the
form
ulas
(),
(),
(),
()
and
(0)
are
not
in
tuitionistically
v
alid.
(Use
op
en
subsets
of
R

or
construct
Kripk
e
mo
dels.)
..0.
Exer
cise.
Sho
w
that
the
form
ula
W
fp
i
$
p
j
:
i;
j
=
0;
:
:
:
;
n
and
i
=
j
g
is
not
in
tuitionistically
v
alid.
...
Exer
cise.
A
lter
is
maximal
i
it
is
a
maximal
prop
er
lter.
Sho
w
that
eac
h
maximal
lter
is
prime.
Sho
w
also
that
in
a
Bo
olean
algebra
ev
ery
prime
lter
is
maximal.
...
Exer
cise.
Complete
the
pro
of
of
Lemma
...

..
Exercises
	
...
Exer
cise.
Complete
the
pro
of
of
Theorem
..,
part
).
(Hint:
c
ho
ose
a
prop
er
induction
h
yp
othesis.)
...
Exer
cise.
Can
the
pro
of
of
Theorem
..
b
e
generalized
to
the
full
prop
ositional
calculus?
...
Exer
cise.
A
state
c
in
a
Kripk
e
mo
del
C
determines
p
i
either
c

p
or
c

:p.
Dene
a
0-
v
aluation
v
c
b
y
v
c
(p)
=

i
c

p.
Sho
w
that
if
c
determines
all
prop
ositional
v
ariables
in
'
then
v
c
(')
=

implies
c

'.
...
Exer
cise.
Let
'
b
e
a
classical
tautology
suc
h
that
all
prop
ositional
v
ariables
in
'
are
among
p

;
:
:
:
;
p
n
.
Sho
w
that
the
form
ula
(p

_
:p

)
!



!
(p
n
_
:p
n
)
!
'
is
in
tuitionistically
v
alid.
...
Exer
cise.
Pro
v
e
the
Gliv
enk
o
theorem:
A
form
ula
'
is
a
classical
tautology
i
::'
is
an
in
tuitionistic
tautology
.
...
W
arning.
The
Gliv
enk
o
theorem
do
es
not
extend
to
rst-order
logic.

0
Chapter
.
In
tuitionistic
logic

CHAPTER

Simply
t
yp
ed
-calculus
Recall
from
the
rst
c
hapter
that
a
-term,
unlik
e
the
functions
usually
considered
in
mathematics,
do
es
not
ha
v
e
a
xed
domain
and
r
ange.
Th
us,
whereas
w
e
w
ould
consider
the
function
n
!
n

as
a
function
from
natural
n
um
b
ers
to
natural
n
um
b
ers
(or
from
in
tegers
to
natural
n
um
b
ers,
etc.)
there
is
no
corresp
onding
requiremen
t
in
-calculus.
Or,
to
b
e
more
precise,
there
is
no
corresp
onding
requiremen
t
in
typ
e-fr
e
e
-calculus.
Curry
[
]
and
Ch
urc
h
[
]
also
in
tro
duced
v
ersions
of
their
systems
with
typ
es.
These
systems
form
the
topic
of
the
presen
t
c
hapter.
..
Simply
t
yp
ed
-calculus

a
la
Curry
W
e
b
egin
with
the
simply
t
yp
ed
-calculus

a
la
Curry
.
...
Definition.
(i)
Let
U
denote
a
den
umerably
innite
alphab
et
whose
mem
b
ers
will
b
e
called
typ
e
variables.
The
set

of
simple
typ
es
is
the
set
of
strings
dened
b
y
the
grammar:

::=
U
j
(
!
)
W
e
use
;

;
:
:
:
to
denote
arbitrary
t
yp
e
v
ariables,
and

;

;
:
:
:
to
de-
note
arbitrary
t
yp
es.
W
e
omit
outermost
paren
theses,
and
omit
other
paren
theses
with
the
con
v
en
tion
that
!
asso
ciates
to
the
righ
t.
(ii)
The
set
C
of
c
ontexts
is
the
set
of
all
sets
of
pairs
of
the
form
fx

:


;
:
:
:
;
x
n
:

n
g
with


;
:
:
:
;

n

,
x

;
:
:
:
;
x
n

V
(v
ariables
of
)
and
x
i
=
x
j
for
i
=
j
.



Chapter
.
Simply
t
yp
ed
-calculus
(iii)
The
domain
of
a
con
text
 =
fx

:


;
:
:
:
;
x
n
:

n
g
is
dened
b
y:
dom
( )
=
fx

;
:
:
:
;
x
n
g
W
e
write
x
:

for
fx
:

g
and
 ;
 0
for
 [
 0
if
dom
( )
\
dom
( 0
)
=
fg.
(iv)
The
r
ange
of
a
con
text
 =
fx

:


;
:
:
:
;
x
n
:

n
g
is
dened
b
y:
j j
=
f


j
(x
:

)

 ;
for
some
xg:
(v)
The
typ
ability
relation
`
on
C




is
dened
b
y:
 ;
x
:

`
x
:

 ;
x
:

`
M
:

 `
x:M
:

!

 `
M
:

!

 `
N
:

 `
M
N
:

where
w
e
require
that
x

dom( )
in
the
rst
and
second
rule.
(vi)
The
simply
t
yp
ed
-calculus

!
is
the
triple
(;
;
`).
T
o
distinguish
b
et
w
een
this
system
and
v
arian
ts,
the
presen
t
one
will
also
b
e
called
simply
typ
e
d
-c
alculus

a
la
Curry
or
just

!

a
la
Curry
.
...
Example.
Let

;

;

b
e
arbitrary
t
yp
es.
Then:
(i)
`
x:x
:

!

;
(ii)
`
x:y
:x
:

!

!

;
(iii)
`
x:y
:z
:x
z
(y
z
)
:
(
!

!
)
!
(
!

)
!

!
.
...
Definition.
If
 `
M
:

then
w
e
sa
y
that
M
has
typ
e

in
 .
W
e
sa
y
that
M


is
typ
able
if
there
are
 and

suc
h
that
 `
M
:

.
The
set
of
t
ypable
terms
is
a
subset|in
fact,
a
prop
er
subset|of
the
set
of
all
-terms.
In
this
subset,
restrictions
are
made
regarding
whic
h
-terms
ma
y
b
e
applied
to
other
-terms.
V
ery
informally
,
the
t
yp
e
v
ariables
denote
some
unsp
ecied
sets,
and

!

denotes
the
set
of
functions
from

to

.
Sa
ying
that
M
has
t
yp
e

!

in
 then
in
tuitiv
ely
means
that
this
set
of
functions
con
tains
the
particular
function
that
M
informally
denotes.
F
or
instance,
`
x:x
:

!

informally
states
that
the
iden
tit
y
function
is
a
function
from
a
certain
set
to
itself.
A
con
text
is
an
assumption
that
some
elemen
ts
x

;
:
:
:
;
x
n
ha
v
e
certain
t
yp
es


;
:
:
:
;

n
,
resp
ectiv
ely
.
Moreo
v
er,
if
x
has
t
yp
e

and
M
has
t
yp
e

then
x:M
has
t
yp
e

!

.
This
reects
the
in
tuition
that
if
M
denotes
an
elemen
t
of

for
eac
h
x
in

,
then
x:M
denotes
a
function
from

to

.
In
a
similar
v
ein,
if
M
has
t
yp
e

!

and
N
has
t
yp
e

,
then
M
N
has
t
yp
e

.

..
Simply
t
yp
ed
-calculus

a
la
Curry

...
W
arning.
The
idea
that
t
yp
es
denote
sets
should
not
b
e
tak
en
to
o
literally
.
F
or
instance,
if
A
and
B
are
sets
then
the
set
of
functions
from
A
to
A
is
disjoin
t
from
the
set
of
functions
from
B
to
B
.
In
con
trast,
if

and

are
dieren
t
simple
t
yp
es,
then
a
single
term
ma
y
ha
v
e
b
oth
t
yp
es,
at
least
in
the
v
ersion
of
simply
t
yp
ed
-calculus
presen
ted
ab
o
v
e.
Just
lik
e
-calculus
pro
vides
a
foundation
of
higher-order
functional
pro-
gramming
languages
lik
e
LISP
and
Sc
heme,
v
arious
t
yp
ed
-calculi
pro
vide
a
foundation
of
programming
languages
with
t
yp
es
lik
e
P
ascal,
ML,
and
Hask
ell.
T
yp
ed
-calculi
are
also
of
indep
enden
t
in
terest
in
pro
of
theory
as
w
e
shall
ha
v
e
frequen
t
o
ccasion
to
see
in
these
notes.
W
e
conclude
this
section
with
a
brief
review
of
some
of
the
most
funda-
men
tal
prop
erties
of

!.
The
surv
ey
follo
ws
[
].
The
follo
wing
sho
ws
that
only
t
yp
es
of
free
v
ariables
of
a
term
matter
in
the
c
hoice
con
texts.
...
Lemma
(F
ree
v
ariables
lemma).
Assume
that
 `
M
:

.
Then:
(i)
 
 0
implies
 0
`
M
:

;
(ii)
FV(M
)

dom( );
(iii)
 0
`
M
:

wher
e
dom
( 0
)
=
FV
(M
)
and
 0

 .
Pr
oof.
(i)
b
y
induction
on
the
deriv
ation
of
 `
M
:

.
As
in
[]
w
e
presen
t
the
pro
of
in
some
detail
and
omit
suc
h
details
in
the
remainder.
.
The
deriv
ation
is
;
x
:

`
x
:

where
 =
;
x
:

,
x

dom
()
and
M
=
x.
Since
 
 0
and
 0
is
a
con
text,
 0
=

0
;
x
:

for
some

0
with
x

dom(
0
).
Hence

0
;
x
:

`
x
:

,
as
required.
.
The
deriv
ation
ends
in
 ;
x
:


`
P
:


 `
x:P
:


!


where
x

dom( ),

=


!


,
and
M
=
x:P
.
Without
loss
of
generalit
y
w
e
can
assume
that
x

dom( 0
).
Then
 ;
x
:



 0
;
x
:


so
b
y
the
induction
h
yp
othesis
 0
;
x
:


`
P
:


.
Then
w
e
also
ha
v
e
 `
x:P
:


!


,
as
required.
.
The
deriv
ation
ends
in
 `
P
:

!

 `
Q
:

 `
P
Q
:

where
M
=
P
Q.
By
the
induction
h
yp
othesis
(t
wice)
 0
`
P
:

!

and
 0
`
Q
:

,
and
then
 0
`
P
Q
:

,
as
required.


Chapter
.
Simply
t
yp
ed
-calculus
(ii)-(iii)
b
y
induction
on
the
deriv
ation
of
 `
M
:

.
u
t
The
follo
wing
sho
ws
ho
w
the
t
yp
e
of
some
term
m
ust
ha
v
e
b
een
obtained
dep
ending
on
the
form
of
the
term.
...
Lemma
(Generation
lemma).
(i)
 `
x
:

implies
x
:


 ;
(ii)
 `
M
N
:

implies
that
ther
e
is
a

such
that
 `
M
:

!

and
 `
N
:

.
(iii)
 `
x:M
:

implies
that
ther
e
ar
e

and

such
that
 ;
x
:

`
M
:

and

=

!
.
Pr
oof.
By
induction
on
the
length
of
the
deriv
ation.
u
t
...
Definition.
The
substitution
of
typ
e

for
typ
e
variable

in
typ
e

,
written

[
:=

],
is
dened
b
y:
[
:=

]
=


[
:=

]
=

if

=

(

!


)[
:=

]
=


[
:=

]
!


[
:=

]
The
notation
 [
:=

]
stands
for
the
con
text
f(x
:

[
:=

])
j
(x
:

)

 g.
The
follo
wing
sho
ws
that
the
t
yp
e
v
ariables
range
o
v
er
all
t
yp
es;
this
is
a
limited
form
of
p
olymorphism
[	0
];
w
e
will
hear
m
uc
h
more
ab
out
p
olymor-
phism
later.
The
prop
osition
also
sho
ws,
similarly
,
that
free
term
v
ariables
range
o
v
er
arbitrary
terms.
...
Pr
oposition
(Substitution
lemma).
(i)
If
 `
M
:

,
then
 [
:=

]
`
M
:

[
:=

].
(ii)
If
 ;
x
:

`
M
:

and
 `
N
:

then
 `
M
[x
:=
N
]
:

.
Pr
oof.
By
induction
on
the
deriv
ation
of
 `
M
:

and
generation
of
 ;
x
:

`
M
:

,
resp
ectiv
ely
.
u
t
The
follo
wing
sho
ws
that
reduction
preserv
es
t
yping.
..	.
Pr
oposition
(Sub
ject
reduction).
If
 `
M
:

and
M
!

N
,
then
 `
N
:

.
Pr
oof.
By
induction
on
the
deriv
ation
of
M
!

N
using
the
substitution
lemma
and
the
generation
lemma.
u
t

..
Simply
t
yp
ed
-calculus

a
la
Ch
urc
h

..0.
Remark.
The
similar
prop
ert
y
 `
N
:

&
M
!
!

N
)
 `
M
:

is
called
subje
ct
exp
ansion
and
do
es
not
hold
in

!,
see
Exercise
...
...
Cor
ollar
y.
If
 `
M
:

and
M
!
!

N
,
then
 `
N
:

.
...
Theorem
(Ch
urc
h-Rosser
prop
ert
y
for
t
ypable
terms).
Supp
ose
that
 `
M
:

.
If
M
!
!

N
and
M
!
!

N
0
,
then
ther
e
exists
an
L
such
that
N
!
!

L
and
N
0
!
!

L
and
 `
L
:

.
Pr
oof.
By
the
Ch
urc
h-Rosser
prop
ert
y
for
-terms
and
the
sub
ject
reduc-
tion
prop
ert
y
.
u
t
..
Simply
t
yp
ed
-calculus

a
la
Ch
urc
h
As
men
tioned
earlier,
simply
t
yp
ed
-calculus
w
as
in
tro
duced
b
y
Curry
[
]
and
Ch
urc
h
[
].
More
precisely
,
Curry
considered
t
yp
es
for
c
ombinatory
lo
gic,
but
his
form
ulation
w
as
later
adapted
to
-calculus
[
].
There
w
ere
sev
eral
other
imp
ortan
t
dierences
b
et
w
een
the
systems
in-
tro
duced
b
y
Ch
urc
h
and
Curry
.
In
Curry's
system
the
terms
are
those
of
t
yp
e-free
-calculus
and
the
t
yping
relation
selects
among
these
the
t
ypable
terms.
F
or
instance,
x:x
is
t
ypable,
whereas
x:x
x
is
not.
In
Ch
urc
h's
original
system,
the
t
yping
rules
w
ere
built
in
to
the
term
formation
rules,
as
follo
ws.
Let
V

denote
a
den
umerable
set
of
v
ariables
for
eac
h


.
Then
dene
the
set


of
simply
t
yp
ed
terms
of
t
yp
e

b
y
the
clauses:
x

V

)
x



M



!
&
N



)
M
N



M



&
x



)
x

:M



!
The
set
of
all
simply
t
yp
ed
terms
is
then
tak
en
as
the
union
o
v
er
all
simple
t
yp
es

of
the
simply
t
yp
ed
terms
of
t
yp
e

.
Instead
of
assuming
that
the
set
of
v
ariables
is
partitioned
in
to
disjoin
t
sets
indexed
b
y
the
set
of
simple
t
yp
es,
w
e
can
use
con
texts
to
decide
the
t
yp
es
of
v
ariables
as
in
the
system

a
la
Curry
.
Also,
as
in
the
system

a
la
Curry
,
w
e
can
select
the
t
ypable
terms
among
a
larger
set.
This
yields
the
follo
wing,
more
common,
form
ulation
of
simply
t
yp
ed
-calculus

a
la
Ch
urc
h.


Chapter
.
Simply
t
yp
ed
-calculus
...
Definition.
(i)
The
set


of
pseudo-terms
is
dened
b
y
the
follo
wing
grammar:


::=
V
j
(x
:



)
j
(



)
where
V
is
the
set
of
(-term)
v
ariables
and

is
the
set
of
simple
t
yp
es.

W
e
adopt
the
same
terminology
,
notation,
and
con
v
en
tions
for
pseudo-terms
as
for
-terms,
see
.{.0,
m
utatis
m
utandis.
(ii)
The
typ
ability
relation

on
C





is
dened
b
y:

 ;
x
:

`

x
:

 ;
x
:

`

M
:

 `

x
:

:M
:

!

 `

M
:

!

 `

N
:

 `

M
N
:

where
w
e
require
that
x

dom( )
in
the
rst
and
second
rule.
(iii)
The
simply
t
yp
ed
-calculus

a
la
Ch
urc
h
(!

a
la
Chur
ch,
for
short)
is
the
triple
(

;
;
).
(iv)
If
 `

M
:

then
w
e
sa
y
that
M
has
typ
e

in
 .
W
e
sa
y
that
M



is
typ
able
if
there
are
 and

suc
h
that
 `

M
:

.
...
Example.
Let

;

;

b
e
arbitrary
simple
t
yp
es.
Then:
(i)
`

x
:

:x
:

!

;
(ii)
`

x
:

:y
:

:x
:

!

!

;
(iii)
`

x
:

!

!
:y
:

!

:z
:

:(x
z
)
y
z
:
(
!

!
)
!
(
!

)
!

!
.
Ev
en
with
the
form
ulation
of

!

a
la
Ch
urc
h
in
Denition
..
an
imp
ortan
t
dierence
with

!

a
la
Curry
remains:
in
Ch
urc
h's
system
ab-
stractions
ha
v
e
domains,
i.e.
are
of
the
form
x
:

:M
,
whereas
in
Curry's
system
abstractions
ha
v
e
no
domain,
i.e.
are
of
the
form
x:M
.
Th
us,
in
Ch
urc
h's
system
one
writes
x
:

:x
:

!

;
whereas
in
Curry's
system
one
writes
x:x
:

!

:

Strictly
sp
eaking,
w
e
should
pro
ceed
as
in
the
case
of
-terms
and
dene
a
notion
of
pre-pseudo-terms,
then
dene
substitution
and
-equiv
alence
on
these,
and
nally
adopt
the
con
v
en
tion
that
b
y
M



w
e
alw
a
ys
mean
the
-equiv
alence
class,
see
.{.	.
W
e
omit
the
details.

In
this
c
hapter
it
is
useful
to
distinguish
syn
tactically
b
et
w
een
t
yping
in
the
system

a
la
Ch
urc
h
and
the
system

a
la
Curry
,
and
therefore
w
e
use
`

here.
In
later
c
hapters
w
e
shall
also
use
`
for
`

.

..
Simply
t
yp
ed
-calculus

a
la
Ch
urc
h

The
t
w
o
dieren
t
systems|Curry's
and
Ch
urc
h's|represen
t
t
w
o
dier-
en
t
paradigms
in
programming
languages.
In
Ch
urc
h's
system
the
program-
mer
has
to
explicitly
write
the
t
yp
es
for
all
v
ariables
used
in
the
program
as
in,
e.g.,
P
ascal,
whereas
in
Curry's
approac
h
the
programmer
merely
writes
functions,
and
it
is
then
the
job
of
the
compiler
or
the
programming
en
vironmen
t
to
infer
the
t
yp
es
of
v
ariables,
as
e.g.,
in
ML
and
Hask
ell.
Ha
ving
in
tro
duced
a
new
set
of
terms
(pseudo-terms
instead
of
-terms)
w
e
are
obliged
to
in
tro
duce
the
notions
of
substitution,
reduction,
etc.,
for
the
new
notion.
This
is
carried
out
briey
b
elo
w.
W
e
reuse
m
uc
h
notation
and
terminology
.
...
Definition.
F
or
M



dene
the
set
FV
(M
)
of
fr
e
e
variables
of
M
as
follo
ws.
FV
(x)
=
fxg
FV
(x
:

:P
)
=
FV(P
)nfxg
FV
(P
Q)
=
FV(P
)
[
FV(Q)
If
FV(M
)
=
fg
then
M
is
called
close
d.
...
Definition.
F
or
M
;
N



and
x

V
,
the
substitution
of
N
for
x
in
M
,
written
M
[x
:=
N
],
is
dened
as
follo
ws:
x[x
:=
N
]
=
N
y
[x
:=
N
]
=
y
if
x
=
y
(P
Q)[x
:=
N
]
=
P
[x
:=
N
]
Q[x
:=
N
]
(y
:

:P
)[x
:=
N
]
=
y
:

:P
[x
:=
N
]
where
x
=
y
and
y

FV(N
)
...
Definition.
Let
!

b
e
the
smallest
relation
on


closed
under
the
rules:
(x
:

:
P
)
Q
!

P
[x
:=
Q]
P
!

P
0
)
x

V
;



:
x
:

:P
!

x
:

:P
0
P
!

P
0
)
Z


:
P
Z
!

P
0
Z
P
!

P
0
)
Z


:
Z
P
!

Z
P
0
A
term
of
form
(x
:

:
P
)
Q
is
called
a

-r
e
dex,
and
P
[x
:=
Q]
is
called
its

-c
ontr
actum.
A
term
M
is
a

-normal
form
if
there
is
no
term
N
with
M
!

N
.
...
Definition.
(i)
The
relation
!
!

(multi-step

-r
e
duction
)
is
the
transitiv
e-reexiv
e
clo-
sure
of
!

;
(ii)
The
relation
=

(
-e
quality)
is
the
transitiv
e-reexiv
e-symmetric
clo-
sure
of
!

.


Chapter
.
Simply
t
yp
ed
-calculus
W
e
end
the
section
b
y
briey
rep
eating
the
dev
elopmen
t
in
the
preceding
subsection
for
simply
t
yp
ed
-calculus

a
la
Ch
urc
h.
...
Lemma
(F
ree
v
ariables
lemma).
L
et
 `

M
:

.
Then:
(i)
 
 0
implies
 0
`

M
:

;
(ii)
FV
(M
)

dom
( );
(iii)
 0
`

M
:

wher
e
dom( 0
)
=
FV(M
)
and
 0

 .
Pr
oof.
See
the
Exercises.
u
t
...
Lemma
(Generation
lemma).
(i)
 `

x
:

implies
x
:


 ;
(ii)
 `

M
N
:

implies
that
ther
e
is
a

such
that
 `

M
:

!

and
 `

N
:

.
(iii)
 `

x
:

:M
:

implies
that
ther
e
is
a

such
that
 ;
x
:

`

M
:

and

=

!
.
Pr
oof.
See
the
Exercises.
u
t
..	.
Pr
oposition
(Substitution
lemma).
(i)
If
 `

M
:

,
then
 [
:=

]
`

M
:

[
:=

].
(ii)
If
 ;
x
:

`

M
:

and
 `

N
:

then
 `

M
[x
:=
N
]
:

.
Pr
oof.
See
the
Exercises.
u
t
..0.
Pr
oposition
(Sub
ject
reduction).
If
 `

M
:

and
M
!

N
,
then
 `

N
:

.
Pr
oof.
See
the
Exercises.
u
t
...
Theorem
(Ch
urc
h-Rosser
prop
ert
y).
Supp
ose
that
 `

M
:

.
If
M
!
!

N
and
M
!
!

N
0
,
then
ther
e
exists
an
L
such
that
N
!
!

L
and
N
0
!
!

L
and
 `

L
:

.
Pr
oof.
One
w
a
y
to
obtain
this
result
is
to
rep
eat
for


an
argumen
t
similar
to
that
w
e
used
for
un
t
yp
ed
terms,
and
then
use
the
sub
ject
reduction
prop
ert
y
.
Another
metho
d,
based
on
so
called
lo
gic
al
r
elations
can
b
e
found
in
[
].
u
t
The
follo
wing
t
w
o
prop
erties
of
simply
t
yp
ed
-calculus

a
la
Ch
urc
h
do
not
hold
for
the
Curry
system.
Note
that
(ii)
implies
the
sub
ject
expansion
prop
ert
y|see
Remark
..0.

..
Ch
urc
h
v
ersus
Curry
t
yping
	
...
Pr
oposition
(Uniqueness
of
t
yp
es).
(i)
If
 `

M
:

and
 `

M
:

then

=

.
(ii)
If
 `

M
:

and
 `

N
:

and
M
=

N
,
then

=

.
Pr
oof.
(i)
By
induction
on
M
.
(ii)
If
M
=

N
then
b
y
the
Ch
urc
h-Rosser
prop
ert
y
,
M
!
!

L
and
N
!
!

L,
for
some
L.
By
sub
ject
reduction,
 `

L
:

and
 `

L
:

.
No
w
use
(i).
u
t
It
is
easy
to
see
that
these
prop
erties
fail
in

!

a
la
Curry
.
F
or
instance,
`
x:x
:

!

and
`
x:x
:
(
!
)
!
(
!
)
b
y
the
deriv
ations:
x
:

`
x
:

`
x:x
:

!

and
x
:

!

`
x
:

!

`
x:x
:
(
!
)
!
(
!
)
Although
these
t
w
o
deriv
ations
ha
v
e
the
same
structure,
their
conclusions
are
dieren
t
due
to
dieren
t
t
yp
e
assumptions
for
x.
In
con
trast,
if
the
Ch
urc
h
term
M
has
t
yp
e

in
 ,
then
there
is
exactly
one
deriv
ation
of
this
fact,
whic
h
is
uniquely
enco
ded
b
y
M
.
This
dierence
leads
to
some
in
teresting
problems
for
the
Curry
system.
Giv
en
a
term
M
whic
h
t
yp
es
can
b
e
assigned
to
M
,
if
an
y?
Is
there
a
single
b
est
t
yp
e
in
some
sense?
Suc
h
problems
are
studied
in
typ
e
infer
enc
e,
whic
h
w
e
return
to
later.
Because
of
the
ab
o
v
e
dierence,

!

a
la
Curry
and
other
similar
systems
are
often
called
typ
e
assignment
systems,
in
con
trast
to

!

a
la
Ch
urc
h
and
similar
systems
whic
h
are
called,
e.g.,
typ
e
d
systems.
..
Ch
urc
h
v
ersus
Curry
t
yping
Although
the
simply
t
yp
ed
-calculus

a
la
Curry
and
Ch
urc
h
are
dieren
t,
one
has
the
feeling
that
essen
tially
the
same
thing
is
going
on.
T
o
some
exten
t
this
in
tuition
is
correct,
as
w
e
no
w
sho
w.
Ev
ery
pseudo-term
induces
a
t
yp
e-free
-term
b
y
erasing
the
domains
of
abstractions.
...
Definition.
The
er
asur
e
map
j

j
:


!

is
dened
as
follo
ws:
jxj
=
x;
jM
N
j
=
jM
j
jN
j;
jx
:

:M
j
=
x:jM
j:

0
Chapter
.
Simply
t
yp
ed
-calculus
Erasure
preserv
es
reduction
and
t
yping:
...
Pr
oposition
(Erasing).
L
et
M
;
N



.
(i)
If
M
!

N
then
jM
j
!

jN
j;
(ii)
If
 `

M
:

then
 `
jM
j
:

.
Pr
oof.
(i)
pro
v
e
b
y
induction
on
M
that
jM
[x
:=
N
]j
=
jM
j[x
:=
jN
j]
()
Then
pro
ceed
b
y
induction
on
the
deriv
ation
of
M
!

N
using
().
(ii)
b
y
induction
on
the
deriv
ation
of
 `

M
:

.
u
t
Con
v
ersely
,
one
can
\lift"
ev
ery
Curry
deriv
ation
to
a
Ch
urc
h
one.
...
Pr
oposition
(Lifting).
F
or
al
l
M
;
N

:
(i)
If
M
!

N
then
for
e
ach
M
0



with
jM
0
j
=
M
ther
e
is
N
0



such
that
jN
0
j
=
N
,
and
M
0
!

N
0
;
(ii)
If
 `
M
:

then
ther
e
is
an
M
0



with
jM
0
j
=
M
and
 `

M
0
:

.
Pr
oof.
By
induction
on
the
deriv
ation
of
M
!

N
and
 `
M
:

,
resp
ectiv
ely
.
u
t
...
W
arning.
The
ab
o
v
e
t
w
o
prop
ositions
allo
w
one
to
deriv
e
certain
prop
erties
of
Curry-st
yle
t
ypable
lam
b
da-terms
from
analogous
prop
erties
of
Ch
urc
h-st
yle
t
yp
ed
lam
b
da-terms,
or
con
v
ersely
.
F
or
instance,
strong
normalization
for
one
v
arian
t
of
(
!)
easily
implies
strong
normalization
for
the
other
(Exercise
..).
Ho
w
ev
er,
one
has
to
b
e
v
ery
cautious
with
suc
h
pro
of
metho
ds,
some-
times
they
do
not
w
ork.
A
common
mistak
e
(cf.
Exercise
..)
is
the
follo
wing
attempt
to
deriv
e
the
Ch
urc
h-Rosser
prop
ert
y
for
Ch
urc
h-st
yle
(
!)
from
the
Ch
urc
h-Rosser
prop
ert
y
for
un
t
yp
ed
lam
b
da-terms:
Assume
that
M
0
!
!

M

and
M
0
!
!

M

.
Then,
b
y
Prop
o-
sition
..,
w
e
ha
v
e
jM
0
j
!
!

jM

j
and
jM
0
j
!
!

jM

j.
By
Ch
urc
h-Rosser
prop
ert
y
for
un
t
yp
ed
lam
b
da-terms,
w
e
ha
v
e
a
term
P
with
jM

j
!
!

P
and
jM

j
!
!

P
.
In
addition,
b
y
the
sub
ject
reduction
prop
ert
y
,
P
is
t
ypable
in
to
the
desired
t
yp
e.
It
remains
to
apply
Prop
osition
..,
to
obtain
a
Ch
urc
h-st
yle
term
M

with
jM

j
=
P
,
and
suc
h
that
M

!
!

M

and
M

!
!

M

.
F
or
an
explanation
wh
y
the
gap
in
this
argumen
t
cannot
b
e
easily
xed,
and
ho
w
it
c
an
b
e
xed,
see
[
,
pp.
	,
	].
In
the
remainder,
when
stating
prop
erties
of
simply
t
yp
ed
-calculus
it
m
ust
alw
a
ys
b
e
understo
o
d
that
the
result
applies
to
b
oth

!

a
la
Curry
and

a
la
Ch
urc
h,
except
when
explicitly
stated
otherwise.

..
Normalization

..
Normalization
In
this
section
w
e
are
concerned
with

!

a
la
Ch
urc
h.
A
simple
t
yp
e
can
b
e
regarded
as
a
nite
binary
tree|this
is
where
the
alternativ
e
name
\nite
t
yp
e"
comes
from|where
all
in
ternal
no
des
are
lab
eled
b
y
arro
ws
and
all
lea
v
es
are
lab
eled
b
y
t
yp
e
v
ariables.
W
e
shall
often
refer
to
prop
erties
of
t
yp
es
expressing
them
as
prop
erties
of
this
tree
represen
tation.
F
or
instance,
the
function
h(
)
dened
b
elo
w
is
just
the
heigh
t
of
the
corresp
onding
tree.
...
Definition.
Dene
the
function
h
:

!
N
b
y:
h()
=
0
h(
!

)
=

+
max(h(
);
h(
))
It
is
often
con
v
enien
t
to
write
Ch
urc
h
st
yle
terms
(t
ypable
pseudo-terms)
in
suc
h
a
w
a
y
that
t
yp
es
of
some
or
all
subterms
are
displa
y
ed
b
y
sup
er-
scripts,
as
in
e.g.,
(x:

:P

)

!
R

.
Recall
that
a
Ch
urc
h
st
yle
term
can
b
e
t
yp
ed
in
only
one
w
a
y
,
pro
vided
the
con
text
of
free
v
ariables
is
kno
wn.
Th
us
our
lab
elling
is
alw
a
ys
determined
b
y
the
term
and
the
con
text.
But
the
lab
elling
itself
is
not
a
part
of
syn
tax,
just
a
meta-notation.
The
follo
wing
prop
ert
y
is
the
rst
non-trivial
prop
ert
y
of

!.
...
Theorem
(W
eak
normalization).
Supp
ose
 `

M
:

.
Then
ther
e
is
a
nite
r
e
duction
M

!

M

!

:
:
:
!

M
n

NF

.
Pr
oof.
W
e
use
a
pro
of
idea
due
indep
enden
tly
to
T
uring
and
Pra
witz.
Dene
the
height
of
a
redex
(x:
:P

)R
to
b
e
h(
!
).
F
or
M



with
M

NF

dene
m(M
)
=
(h(M
);
n)
where
h(M
)
=
maxfh()
j

is
a
redex
in
M
g
and
n
is
the
n
um
b
er
of
redex
o
ccurrences
in
M
of
heigh
t
h(M
).
If
M

NF

w
e
dene
h(M
)
=
(0;
0).
W
e
sho
w
b
y
induction
on
lexicographically
ordered
pairs
m(M
)
that
if
M
is
t
ypable
in

!

a
la
Ch
urc
h,
then
M
has
a
reduction
to
normal-form.
Let
 `
M
:

.
If
M

NF

the
assertion
is
trivially
true.
If
M

NF

,
let

b
e
the
righ
tmost
redex
in
M
of
maximal
heigh
t
h
(w
e
determine
the
p
osition
of
a
subterm
b
y
the
p
osition
of
its
leftmost
sym
b
ol,
i.e.,
the
righ
t-
most
redex
means
the
redex
whic
h
b
e
gins
as
m
uc
h
to
the
righ
t
as
p
ossible).
Let
M
0
b
e
obtained
from
M
b
y
reducing
the
redex
.
The
term
M
0
ma
y
in
general
ha
v
e
more
redexes
than
M
.
But
w
e
claim
that
the
n
um
b
er
of
redexes
of
heigh
t
h
in
M
0
is
smaller
than
in
M
.
Indeed,
the
redex

has
disapp
eared,
and
the
reduction
of

ma
y
only
create
new
redexes
of
heigh
t


Chapter
.
Simply
t
yp
ed
-calculus
less
than
h.
T
o
see
this,
note
that
the
n
um
b
er
of
redexes
can
increase
b
y
either
cop
ying
existing
redexes
or
b
y
creating
new
ones.
No
w
observ
e
that
if
a
new
redex
is
created
then
one
of
the
follo
wing
cases
m
ust
hold:
.
The
redex

is
of
the
form
(x:

:
:
:
:
xP

:
:
:
)(y

:Q

)

,
where

=

!
,
and
reduces
to
:
:
:
(y

:Q

)P

:
:
:
.
There
is
a
new
redex
(y

:Q

)P

of
heigh
t
h(
)
<
h.
.
W
e
ha
v
e

=
(x:

:y
::R

)P

,
o
ccurring
in
the
con
text

!
Q

.
The
reduction
of

to
y
::R


,
for
some
R

,
creates
a
new
redex
(y
:
:R


)Q

of
heigh
t
h(
!
)
<
h(
!

!
)
=
h.
.
The
last
case
is
when

=
(x:

:x)(y

:P

),
with

=

!
,
and
it
o
ccurs
in
the
con
text


Q

.
The
reduction
creates
the
new
redex
(y

:P

)Q

of
heigh
t
h(
)
<
h.
The
other
p
ossibilit
y
of
adding
redexes
is
b
y
cop
ying.
If
w
e
ha
v
e

=
(x:

:P

)Q

,
and
P
con
tains
more
than
one
free
o
ccurrence
of
x,
then
all
redexes
in
Q
are
m
ultiplied
b
y
the
reduction.
But
w
e
ha
v
e
c
hosen

to
b
e
the
righ
tmost
redex
of
heigh
t
h,
and
th
us
all
redexes
in
Q
m
ust
b
e
of
smaller
heigh
ts,
b
ecause
they
are
to
the
righ
t
of
.
Th
us,
in
all
cases
m(M
)
>
m(M
0
),
so
b
y
the
induction
h
yp
othesis
M
0
has
a
normal-form,
and
then
M
also
has
a
normal-form.
u
t
In
fact,
an
ev
en
stronger
prop
ert
y
than
w
eak
normalization
holds:
if
`

M
:

,
then
no
innite
reduction
M

!

M

!

:
:
:
exists.
This
prop
ert
y
is
called
str
ong
normalization
and
will
b
e
pro
v
ed
later.
The
sub
ject
reduction
prop
ert
y
together
with
the
Ch
urc
h-Rosser
prop-
ert
y
and
strong
normalization
imply
that
reduction
of
an
y
t
ypable
-term
terminates
in
a
normal
form
of
the
same
t
yp
e,
where
the
normal
form
is
indep
enden
t
of
the
particular
order
of
reduction
c
hosen.
..
Expressibilit
y
As
w
e
sa
w
in
the
preceding
section,
ev
ery
simply
t
ypable
-term
has
a
normal-form.
In
fact,
one
can
eectiv
ely
nd
this
normal-form
b
y
rep
eated
reduction
of
the
leftmost
redex.
(These
results
hold
for
b
oth
the

a
la
Curry
and

a
la
Ch
urc
h
system.)
Therefore
one
can
easily
gure
out
whether
t
w
o
simply
t
ypable
terms
are

-equal:
just
reduce
the
terms
to
their
resp
ectiv
e
normal-forms
and
compare
them.
These
results
should
suggest
that
there
will
b
e
diculties
in
represen
t-
ing
all
the
partial
recursiv
e
functions
and
p
ossibly
also
the
total
recursiv
e
functions
b
y
simply
t
ypable
-terms,
as
w
e
shall
no
w
see.
In
the
rest
of
this
section
w
e
are
concerned
with
simply
t
yp
ed
-calculus

a
la
Curry
.

..
Expressibilit
y

...
Definition.
Let
in
t
=
(
!
)
!
(
!
)
where

is
an
arbitrary
t
yp
e
v
ariable.
A
n
umeric
function
f
:
N
n
!
N
is

!-denable
if
there
is
an
F


with
`
F
:
in
t
!



!
in
t
!
in
t
(n
+

o
ccurrences
of
in
t)
suc
h
that
F
c
n

:
:
:
c
n
m
=

c
f
(n

;:::
;n
m
)
for
all
n

;
:
:
:
;
n
m

N
.
It
is
natural
to
in
v
estigate
whic
h
of
the
constructions
from
Chapter

carry
o
v
er
to
the
t
yp
ed
setting.
This
is
carried
out
b
elo
w.
...
Lemma.
The
c
onstant
and
pr
oje
ction
functions
ar
e

!-denable.
Pr
oof.
See
the
Exercises.
u
t
...
Lemma.
The
function
sg
:
N
!
N
dene
d
by
sg
(0)
=
0;
sg
(m
+
)
=

is

!-denable.
Pr
oof.
See
the
Exercises.
u
t
...
Lemma.
A
ddition
and
multiplic
ation
ar
e

!-denable.
Pr
oof.
See
the
Exercises.
u
t
...
Definition.
The
class
of
extende
d
p
olynomials
is
the
smallest
class
of
n
umeric
functions
con
taining
the
(i)
pr
oje
ctions:
U
m
i
(n

;
:
:
:
;
n
m
)
=
n
i
for
all


i

m;
(ii)
c
onstant
functions:
k
(n)
=
k
;
(iii)
signum
function:
sg
(0)
=
0
and
sg
(m
+
)
=
.
and
closed
under
addition
and
multiplic
ation:
(i)
addition:
if
f
:
N
k
!
N
and
g
:
N
l
!
N
are
extended
p
olynomials,
then
so
is
(f
+
g
)
:
N
k
+l
!
N
(f
+
g
)(n

;
:
:
:
;
n
k
;
m

;
:
:
:
;
m
l
)
=
f
(n

;
:
:
:
;
n
k
)
+
g
(m

;
:
:
:
;
m
l
)
(ii)
multiplic
ation:
if
f
:
N
k
!
N
and
g
:
N
l
!
N
are
extended
p
olynomials,
then
so
is
(f

g
)
:
N
k
+l
!
N
(f

g
)(n

;
:
:
:
;
n
k
;
m

;
:
:
:
;
m
l
)
=
f
(n

;
:
:
:
;
n
k
)

g
(m

;
:
:
:
;
m
l
)
...
Theorem
(Sc
h
wic
h
ten
b
erg).
The

!-denable
functions
ar
e
exactly
the
extende
d
p
olynomials.
The
pro
of
is
omitted.
One
direction
follo
ws
easily
from
what
has
b
een
said
already;
the
other
direction
is
pro
v
ed
in
[	
].
If
one
do
es
not
insist
that
n
um
b
ers
b
e
uniformly
represen
ted
as
terms
of
t
yp
e
in
t,
more
functions
b
ecome

!-denable|see
[
].


Chapter
.
Simply
t
yp
ed
-calculus
..
Exercises
...
Exer
cise.
Sho
w
that
the
follo
wing
-terms
ha
v
e
no
t
yp
e
in

!

a
la
Curry
.
.
x:x
x;
.

.
K
I

;
.
Y
;
.
c

K.
...
Exer
cise.
Find
terms
M
and
M
0
and
t
yp
es

;

0
suc
h
that
`
M
:

,
`
M
0
:

0
,
M
!
!

M
0
,
and
not
`
M
:

0
.
...
Exer
cise.
Is
the
follo
wing
true?
If
M
!

N
(where
M
;
N

)
and
M
0
;
N
0



are
suc
h
that
jM
0
j
=
M
,
jN
0
j
=
N
then
M
0
!

N
0
.
...
Exer
cise.
Sho
w
that
strong
normalization
for
(
!)

a
la
Curry
im-
plies
strong
normalization
for
(
!)

a
la
Ch
urc
h,
and
con
v
ersely
.
...
Exer
cise.
Find
the
bug
in
the
example
argumen
t
in
W
arning
...
...
Exer
cise.
Consider
the
pro
of
of
w
eak
normalization.
Assume
that
a
giv
en
term
M
is
of
length
n
including
t
yp
e
annotations.
Giv
e
a
(rough)
upp
er
b
ound
(in
terms
of
a
function
in
n)
for
the
length
of
the
normalizing
sequence
of
reductions
for
M
,
obtained
under
the
strategy
dened
in
that
pro
of.
Can
y
our
function
b
e
b
ounded
b
y
exp
k
(n),
for
some
k
?
Can
this
b
e
done
under
the
assumption
that
the
heigh
t
of
redexes
in
M
is
b
ounded
b
y
a
giv
en
constan
t
h?
(Here,
exp
0
(n)
=
n
and
exp
k
+
(n)
=

exp
k
(n)
.)
...
Exer
cise.
This
exercise,
and
the
next
one,
are
based
on
[
].
Dene
the
r
ank
of
a
t
yp
e

,
denoted
rk
(
),
as
follo
ws:
rk
()
=
0
rk
(
!

)
=
max
(h(
)
+
;
h(
))
Alternativ
ely
,
w
e
ha
v
e
rk
(

!



!

n
!
)
=

+
max(h(

);
:
:
:
;
h(
n
)):
The
rank
of
a
redex
(x:
:P

)R
is
rk
(
!
).
Then
dene
the
depth
of
a
term
M
,
denoted
d
(M
),
b
y
the
conditions
d
(x)
=
0;
d
(M
N
)
=

+
max
(d
(M
);
d
(N
));
d
(x:

:M
)
=

+
d
(M
):

..
Exercises

Let
r
b
e
the
maxim
um
rank
of
a
redex
o
ccurring
in
M
,
and
let
d
(M
)
=
d.
Sho
w
(b
y
induction
w.r.t
M
)
that
M
can
b
e
reduced
in
at
most

d
 
steps
to
a
term
M

suc
h
that
the
maxim
um
rank
of
a
redex
o
ccurring
in
M

is
at
most
r
 ,
and
d
(M

)


d
.
...
Exer
cise.
Let
r
b
e
the
maxim
um
rank
of
a
redex
o
ccurring
in
M
,
and
let
d
(M
)
=
d.
Use
the
previous
exercise
to
pro
v
e
that
the
normal
form
of
M
is
of
depth
at
most
exp
r
(d),
and
can
b
e
obtained
in
at
most
exp
r
(d)
reduction
steps.
..	.
Exer
cise.
Sho
w
that
the
constan
t
functions
and
pro
jection
functions
are

!-denable.
..0.
Exer
cise.
Sho
w
that
sg
is

!-denable.
...
Exer
cise.
Sho
w
that
addition
and
m
ultiplication
are

!-denable.


Chapter
.
Simply
t
yp
ed
-calculus

CHAPTER

The
Curry-Ho
w
ard
isomorphism
Ha
ving
met
one
formalism
for
expressing
eectiv
e
functions|-calculus|
and
another
formalism
for
expressing
pro
ofs|natural
deduction
for
in
tu-
itionistic
logic|w
e
shall
no
w
demonstrate
an
amazing
analogy
b
et
w
een
the
t
w
o
formalisms,
kno
wn
as
the
Curry-Howar
d
isomorphism.
W
e
ha
v
e
already
seen
sev
eral
hin
ts
that
eectiv
e
functions
and
pro
ofs
should
b
e
in
timately
related.
F
or
instance,
as
men
tioned
in
Chapter
,
the
BHK-in
terpretation
[
,

,
]
states
that
a
pro
of
of
an
implication
'

!
'

is
a
\construction"
whic
h
transforms
an
y
pro
of
of
'

in
to
a
pro
of
of
'

.
What
is
a
construction?
A
p
ossible
answ
er
is
that
it
is
some
kind
of
eectiv
e
function.
There
are
sev
eral
w
a
ys
to
mak
e
this
answ
er
precise.
In
this
c
hapter
w
e
presen
t
one
suc
h
w
a
y;
another
one
is
giv
en
b
y
Kleene's
realizabilit
y
in
terpretation,
whic
h
w
e
presen
t
later.
..
Natural
deduction
without
con
texts
Recall
that
Chapter

presen
ted
a
so-called
natur
al
de
duction
form
ulation
of
in
tuitionistic
prop
ositional
logic.
Suc
h
systems
w
ere
originally
in
tro
duced
b
y
Gen
tzen
[	
].
More
precisely
,
Gen
tzen
in
tro
duced
t
w
o
kinds
of
systems,
no
w
ada
ys
called
natur
al
de
duction
systems
and
se
quent
c
alculus
systems,
resp
ectiv
ely
.
In
this
c
hapter
w
e
are
concerned
with
the
former
kind;
sequen
t
calculus
systems
will
b
e
in
tro
duced
in
the
next
c
hapter.
One
of
the
most
signican
t
studies
of
natural
deduction
systems
after
Gen
tzen's
w
ork
in
the
	0s
app
ears
in
Pra
witz'
classical
b
o
ok
[
],
whic
h
is
still
v
ery
readable.
There
is
an
informal
w
a
y
of
writing
natural
deduction
pro
ofs.
Instead
of
main
taining
explicitly
in
eac
h
no
de
of
a
deriv
ation
the
set
of
assumptions
on
whic
h
the
conclusion
dep
ends
(the
c
ontext
),
one
writes
all
the
assumptions
at
the
top
of
the
deriv
ation
with
a
mark
er
on
those
assumptions
that
ha
v
e
b
een
disc
harged
b
y
the
implication
in
tro
duction
rule.



Chapter
.
The
Curry-Ho
w
ard
isomorphism
Since
this
st
yle
is
quite
common
in
the
pro
of
theory
literature|at
least
un
til
the
Curry-Ho
w
ard
isomorphism
b
ecame
widely
appreciated|w
e
also
briey
review
that
notation
informally
here.
Another
reason
for
doing
so,
is
that
the
notation
displa
ys
certain
in
teresting
problems
concerning
assump-
tions
that
are
hidden
in
our
form
ulation
of
Chapter
.
Consider
the
pro
of
tree:
'
('
!
 
)
^
('
!
)
'
!
 
 
'
('
!
 
)
^
('
!
)
'
!


 
^

First
note
that,
as
alw
a
ys,
the
pro
of
tree
is
written
upside-do
wn.
The
lea
v
es
are
the
assumptions,
and
the
ro
ot
is
the
conclusion,
so
the
pro
of
tree
demon-
strates
that
one
can
infer
 
^

from
'
and
('
!
 
)
^
('
!
).
As
usual
there
is
an
!-in
tro
duction
rule
whic
h
disc
harges
assumptions.
Th
us
w
e
are
able
to
infer
'
!
 
^

from
('
!
 
)
^
('
!
).
Notationally
this
is
done
b
y
putting
brac
k
ets
around
the
assumption
in
question
whic
h
is
then
called
close
d,
as
opp
osed
to
the
other
assumptions
whic
h
are
called
op
en:
[']
('
!
 
)
^
('
!
)
'
!
 
 
[']
('
!
 
)
^
('
!
)
'
!


 
^

'
!
 
^

Note
that
the
ab
o
v
e
step
disc
harges
b
oth
o
ccurrences
of
'.
In
general,
in
an
!-in
tro
duction
step,
w
e
ma
y
disc
harge
zero,
one,
or
more
o
ccurrences
of
an
assumption.
T
aking
this
one
step
further
w
e
get
[']
[('
!
 
)
^
('
!
)]
'
!
 
 
[']
[('
!
 
)
^
('
!
)]
'
!


 
^

'
!
 
^

('
!
 
)
^
('
!
)
!
'
!
 
^

Since
w
e
ma
y
decide
to
disc
harge
only
some
of
the
o
ccurrences
of
an
op
en
assumption
in
an
!-in
tro
duction
step,
one
sometimes
adopts
for
readabilit
y
the
con
v
en
tion
of
assigning
n
um
b
ers
to
assumptions,
and
one
then
indicates
in
an
!-in
tro
duction
step
whic
h
of
the
o
ccurrences
where
disc
harged.
In
the
ab
o
v
e
example
w
e
th
us
migh
t
ha
v
e
the
follo
wing
sequence
of
pro
of
trees.

..
Natural
deduction
without
con
texts
	
First:
'
()
('
!
 
)
^
('
!
)
()
'
!
 
 
'
()
('
!
 
)
^
('
!
)
()
'
!


 
^

Then
b
y
closing
b
oth
o
ccurrences
of
':
[']
()
('
!
 
)
^
('
!
)
()
'
!
 
 
[']
()
('
!
 
)
^
('
!
)
()
'
!


 
^

'
!
 
^

()
And
b
y
closing
b
oth
o
ccurrences
of
('
!
 
)
^
('
!
):
[']
()
[('
!
 
)
^
('
!
)]
()
'
!
 
 
[']
()
[('
!
 
)
^
('
!
)]
()
'
!


 
^

'
!
 
^

()
('
!
 
)
^
('
!
)
!
'
!
 
^

()
It
is
in
teresting
to
note
that
the
notation
where
w
e
indicate
whic
h
as-
sumption
is
disc
harged
allo
ws
us
to
distinguish
b
et
w
een
certain
v
ery
similar
pro
ofs.
F
or
instance,
in
[']
()
[('
!
 
)
^
('
!
)]
()
'
!
 
 
[']
()
[('
!
 
)
^
('
!
)]
()
'
!


 
^

'
!
 
^

()
('
!
 
)
^
('
!
)
!
'
!
 
^

()
('
!
 
)
^
('
!
)
!
('
!
 
)
^
('
!
)
!
'
!
 
^

()
and
[']
()
[('
!
 
)
^
('
!
)]
()
'
!
 
 
[']
()
[('
!
 
)
^
('
!
)]
()
'
!


 
^

'
!
 
^

()
('
!
 
)
^
('
!
)
!
'
!
 
^

()
('
!
 
)
^
('
!
)
!
('
!
 
)
^
('
!
)
!
'
!
 
^

()

0
Chapter
.
The
Curry-Ho
w
ard
isomorphism
w
e
disc
harge
the
t
w
o
o
ccurrences
of
('
!
 
)
^
('
!
)
separately
,
but
in
dieren
t
orders.
Similarly
,
[']
()
'
!
'
()
'
!
'
!
'
()
and
[']
()
'
!
'
()
'
!
'
!
'
()
are
t
w
o
dieren
t
pro
ofs
of
'
!
'
!
'.
In
the
rst
pro
of
there
is
rst
a
disc
harge
step
in
whic
h
the
single
o
ccurrence
of
'
is
disc
harged,
and
then
a
disc
harge
step
in
whic
h
zero
o
ccurrences
of
'
are
disc
harged.
In
the
second
pro
of
the
order
is
rev
ersed.
In
order
to
a
v
oid
confusion
with
assumption
n
um
b
ers,
w
e
require
that
if
t
w
o
assumptions
'
and
 
ha
v
e
the
same
n
um
b
er,
then
'
and
 
are
the
same
form
ula.
Also,
when
w
e
disc
harge
the
assumptions
with
a
giv
en
n
um
b
er
(i),
w
e
require
that
ev
ery
assumption
with
this
n
um
b
er
actually
o
ccur
on
a
branc
h
from
the
no
de
where
the
disc
harging
o
ccurs.
In
general,
the
rules
for
constructing
the
ab
o
v
e
pro
of
trees
lo
ok
as
follo
ws.
'
 
'
^
 
'
^
 
'
'
^
 
 
'
'
_
 
 
'
_
 
'
_
 
[']
(i)
.
.
.

[ 
]
(j
)
.
.
.


(i;j
)
[']
(i)
.
.
.
 
'
!
 
(i)
'
!
 
'
 
?
'
F
or
instance,
the
upp
er
left
rule
(^-in
tro
duction)
states
that
t
w
o
pro
of
trees
ending
in
ro
ots
'
and
 
,
resp
ectiv
ely
,
ma
y
b
e
joined
in
to
a
single
pro
of
tree
b
y
addition
of
a
new
ro
ot
'
^
 
with
the
former
ro
ots
as
c
hildren.
The
!-in
tro
duction
rule
states
that
one
ma
y
infer
an
implication
b
y
disc
harging
the
assumptions
with
the
lab
el
indicated
b
y
the
step.

..
Natural
deduction
without
con
texts

As
w
e
shall
see
later
in
this
c
hapter,
there
is
an
in
terest
in
pro
ofs
of
a
certain
simple
form.
One
arriv
es
at
suc
h
pro
ofs
from
arbitrary
pro
ofs
b
y
means
of
pr
o
of
normalization
rules
that
eliminate
detours
in
a
pro
of.
More
concretely
,
consider
the
pro
of
tree:
[']
()
'
!
'
()
[ 
]
()
 
!
 
()
('
!
')
^
( 
!
 
)
'
!
'
The
pro
of
tree
demonstrates
that
'
!
'
is
deriv
able.
Ho
w
ev
er,
it
do
es
so
b
y
rst
sho
wing
'
!
',
then
inferring
('
!
')
^
( 
!
 
),
and
then,
nally
,
concluding
'
!
'.
A
more
direct
pro
of
tree,
whic
h
do
es
not
mak
e
an
excursion
via
('
!
')
^
( 
!
 
)
is:
[']
()
'
!
'
()
Note
that
the
detour
in
the
former
pro
of
tree
is
signied
b
y
an
in
tro-
duction
rule
immediately
follo
w
ed
b
y
the
corresp
onding
elimination
rule,
for
example
^-in
tro
duction
and
^-elimination.
In
fact,
the
ab
o
v
e
st
yle
of
detour-elimination
is
p
ossible
whenev
er
an
in
tro
duction
rule
is
immediately
follo
w
ed
b
y
the
corresp
onding
elimination
rule.
As
another
example,
consider
the
pro
of
tree:
[']
()
'
!
'
()
['
!
']
()
 
!
'
!
'
()
('
!
')
!
 
!
'
!
'
()
 
!
'
!
'
Here
w
e
infer
 
!
'
!
'
from
'
!
'
and
('
!
')
!
 
!
'
!
'.
The
pro
of
of
the
latter
form
ula
pro
ceeds
b
y
inferring
 
!
'
!
'
from
the
assumption
'
!
'.
Since
w
e
can
pr
ove
this
assumption,
w
e
could
simply
tak
e
this
pro
of
and
replace
the
assumption
'
!
'
with
the
pro
of
of
this
form
ula:
[']
()
'
!
'
()
 
!
'
!
'
()
In
general
one
considers
the
follo
wing
pro
of
normalization
rules
(sym-


Chapter
.
The
Curry-Ho
w
ard
isomorphism
metric
cases
omitted):

'

 
'
^
 
'
!

'

 
[ 
]
(i)

'
 
!
'
(i)
'
!

 

'

'
'
_
 
[']
(i)


[ 
]
(j
)



(i;j
)
!

'


The
rst
rule
states
that
if
w
e,
somewhere
in
a
pro
of,
infer
'
and
 
and
then
use
^-in
tro
duction
to
infer
'
^
 
follo
w
ed
b
y
^-elimination
to
infer
',
w
e
migh
t
as
w
ell
a
v
oid
the
detour
and
replace
this
pro
of
simply
b
y
the
subpro
of
of
'.
The
second
rule
states
that
if
w
e
ha
v
e
a
pro
of
of
'
from
assumption
 
and
w
e
use
this
and
!-in
tro
duction
to
get
a
pro
of
of
 
!
',
and
w
e
ha
v
e
a
pro
of
of
 
then,
instead
of
inferring
'
b
y
!-elimination,
w
e
migh
t
as
w
ell
replace
this
pro
of
b
y
the
original
pro
of
of
'
where
w
e
plug
in
the
pro
of
of
 
in
all
the
places
where
the
assumption
 
o
ccurs.
The
reading
of
the
third
rule
is
similar.
The
pro
cess
of
eliminating
pro
of
detours
of
the
ab
o
v
e
kind,
is
called
pr
o
of
normalization,
and
a
pro
of
tree
with
no
detours
is
said
to
b
e
in
normal
form.
Another
similar
pro
cess,
called
cut
elimination,
eliminates
detours
in
se
quent
c
alculus
pr
o
ofs
whereas
pro
of
normalization
eliminates
detours
in
natural
deduction
pro
ofs.
Sequen
t
calculus
systems
are
in
tro
duced
in
the
next
c
hapter.
Pro
of
normalization
and
cut
elimination
w
ere
studied
in
the
	0s
b
y
Gen
tzen,
and
his
studies
w
ere
con
tin
ued
b
y
sev
eral
researc
hers,
p
erhaps
most
imp
ortan
tly
b
y
Pra
witz
in
[
].
No
w
ada
ys,
pro
of
theory
is
an
indep
enden
t
discipline
of
logic.
In
these
notes
w
e
shall
not
consider
natural
deduction
pro
ofs
in
the
ab
o
v
e
st
yle
an
y
further.

..
The
Curry-Ho
w
ard
isomorphism

..
The
Curry-Ho
w
ard
isomorphism
W
e
could
in
tro
duce
reductions

a
la
those
of
the
preceding
section
for
the
natural
deduction
form
ulation
of
Chapter
,
but
w
e
shall
not
do
so.
The
rules
for
that
form
ulation
are
rather
tedious
(try
the
rule
for
!!).
It
w
ould
b
e
more
con
v
enien
t
to
ha
v
e
eac
h
pro
of
tree
denoted
b
y
some
-dimensional
expression
and
then
state
transformations
on
suc
h
expressions
rather
than
on
pro
of
trees.
It
happ
ens
that
the
terms
of
the
simply
t
yp
ed
-calculus
are
ideal
for
this
purp
ose,
as
w
e
shall
see
in
this
section.
W
e
sho
w
that
an
y
deriv
ation
in
in
tuitionistic
prop
ositional
logic
corre-
sp
onds
to
a
t
ypable
-term

a
la
Ch
urc
h,
and
vice
v
ersa.
More
precisely
w
e
sho
w
this
for
the
implic
ational
fr
agment
of
in
tuitionistic
prop
ositional
logic.
Recall
from
Section
.
that
the
implicational
fragmen
t
is
the
subsystem
in
whic
h
the
only
connectiv
e
is
!
and
in
whic
h
the
only
rules
are
(!
E
)
and
(!
I
).
This
fragmen
t
is
denoted
IPC
(!).
The
whole
system
is
denoted
IPC
(!;
^;
_;
?)
or
plainly
IPC
.
If
w
e
tak
e
P
V
(the
set
of
prop
ositional
v
ariables)
equal
to
U
(the
set
of
t
yp
e
v
ariables),
then

(the
set
of
prop
ositional
form
ulas
in
the
implicational
fragmen
t
of
in
tuitionistic
prop
ositional
logic)
and

(the
set
of
simply
t
yp
es)
are
iden
tical.
This
will
b
e
used
implicitly
b
elo
w.
...
Pr
oposition
(Curry-Ho
w
ard
isomorphism).
(i)
If
 `
M
:
'
then
j j
`
'.

(ii)
If
 `
'
then
ther
e
exists
M



such
that

`
M
:
',
wher
e

=
f(x
'
:
')
j
'

 g.
Pr
oof.
(i):
b
y
induction
on
the
deriv
ation
of
 `
M
:
'.
(ii):
b
y
induction
on
the
deriv
ation
of
 `
'.
Let

=
fx
'
:
'
j
'

 g.
.
The
deriv
ation
is
 ;
'
`
'
W
e
consider
t
w
o
sub
cases:
(a)
'

 .
Then

`
x
'
:
'.
(b)
'

 .
Then
;
x
'
:
'
`
x
'
:
'.
.
The
deriv
ation
ends
in
 `
'
!
 
 `
'
 `
 
By
the
induction
h
yp
othesis

`
M
:
'
!
 
and

`
N
:
',
and
then
also

`
M
N
:
 
.

Recall
that
j j
denotes
the
range
of
 .


Chapter
.
The
Curry-Ho
w
ard
isomorphism
.
The
deriv
ation
ends
in
 ;
'
`
 
 `
'
!
 
W
e
consider
t
w
o
sub
cases:
(a)
'

 .
Then
b
y
the
induction
h
yp
othesis

`
M
:
 
.
By
W
eak
ening
(Lemma
.	(i))
;
x
:
'
`
M
:
 
,
where
x

dom().
Then
also

`
x
:
'
:
M
:
'
!
 
.
(b)
'

 .
Then
b
y
the
induction
h
yp
othesis
;
x
'
:
'
`
M
:
 
and
then
also

`
x
'
:
'
:
M
:
'
!
 
.
u
t
...
Remark.
The
corresp
ondence
displa
ys
certain
in
teresting
problems
with
the
natural
deduction
form
ulation
of
Chapter
.
F
or
instance
x
:
';
y
:
'
`
x
:
'
x
:
'
`
y
:
'
:
x
:
'
!
'
`
x
:
'
:
y
:
'
:
x
:
'
!
'
!
'
and
x
:
';
y
:
'
`
y
:
'
x
:
'
`
y
:
'
:
y
:
'
!
'
`
x
:
'
:
y
:
'
:
y
:
'
!
'
!
'
are
t
w
o
dieren
t
deriv
ations
in

!
sho
wing
that
b
oth
x
:
'
:
y
:
'
:
x
and
x
:
'
:
y
:
'
:
y
ha
v
e
t
yp
e
'
!
'
!
'.
Both
of
these
deriv
ations
are
pro
jected
to
'
`
'
'
`
'
!
'
`
'
!
'
!
'
This
reects
the
fact
that,
in
the
natural
deduction
system
of
Chapter
,
one
cannot
distinguish
pro
ofs
in
whic
h
assumptions
are
disc
harged
in
dieren
t
orders.
Indeed,

!
can
b
e
view
ed
as
an
extension
of
IPC(!)
in
whic
h
certain
asp
ects
suc
h
as
this
distinction
are
elab
orated.
The
corresp
ondence
b
et
w
een
deriv
ations
in
IPC(!)
and

!
can
b
e
extended
to
the
whole
system
IPC
b
y
extending
the
simply
t
yp
ed
-calculus
with
pairs
and
disjoin
t
sums.
One
extends
the
language


with
clauses:


::=
:
:
:
j
<


;


>
j


(

)
j


(

)
j
in
 
_'

(

)
j
in
 
_'

(

)
j
case
(

;
V
:

;
V
:

)

..
The
Curry-Ho
w
ard
isomorphism

and
adds
t
yping
rules:
 `
M
:
 
 `
N
:
'
 `
<
M
;
N
>:
 
^
'
 `
M
:
 
^
'
 `


(M
)
:
 
 `
M
:
 
^
'
 `


(M
)
:
'
 `
M
:
 
 `
in
 
_'

(M
)
:
 
_
'
 `
M
:
'
 `
in
 
_'

(M
)
:
 
_
'
 `
L
:
 
_
'
 ;
x
:
 
`
M
:

 ;
y
:
'
`
N
:

 `
case
(L;
x:M
;
y
:N
)
:

and
reduction
rules:


(<
M

;
M

>)
!
M



(<
M

;
M

>)
!
M

case
(in
'

(N
);
x:K
;
y
:L)
!
K
fx
:=
N
g
case
(in
'

(N
);
x:K
;
y
:L)
!
Lfy
:=
N
g
In
tuitiv
ely
,

^
 
is
a
pro
duct
t
yp
e,
so
<
M

;
M

>
is
a
pair,
and


(M
)
is
the
rst
pro
jection.
In
t
yp
e-free
-calculus
these
could
b
e
dened
in
terms
of
pure
-terms
(see
Prop
osition
.),
but
this
is
not
p
ossible
in

!.
This
is
related
to
the
fact
that
one
cannot
dene
conjunction
in
IPC
in
terms
of
implication
(con
trary
to
the
situation
in
classical
logic,
as
w
e
shall
see
later).
In
the
same
spirit,

_
 
is
a
sum
(or
\v
arian
t")
t
yp
e.
A
sum
t
yp
e
is
a
data
t
yp
e
with
t
w
o
unary
constructors.
Compare
this
to
the
data
t
yp
e
\in
teger
list",
whic
h
is
usually
dened
as
a
data
t
yp
e
with
t
w
o
constructors:
the
0-ary
constructor
Nil
and
the
-ary
constructor
Cons(;
)
whic
h
tak
es
a
n
um
b
er
and
a
list
of
n
um
b
ers.
In
a
sum
w
e
ha
v
e
the
t
w
o
unary
constructors
left
and
righ
t
injection.
Th
us
case
(M
;
x:K
;
y
:L)
is
a
case-expression
whic
h
tests
whether
M
has
form
in
'

(N
)
(and
then
returns
K
with
N
for
x)
or
in

(N
)
(and
then
re-
turns
L
with
N
for
y
),
just
lik
e
in
a
functional
programming
language
w
e
could
ha
v
e
a
case-expression
testing
whether
an
expression
is
Nil
or
Cons(n;
ns).
Th
us,
uses
of
the
axiom
of
in
tuitionistic
prop
ositional
logic
are
reected
b
y
v
ariables
in
the
term,
uses
of
the
!-elimination
rule
corresp
ond
to
ap-
plications,
and
uses
of
the
!-in
tro
duction
rule
corresp
ond
to
abstractions.
In
fact,
w
e
can
view

!
as
a
more
elab
orate
form
ulation
of
IPC(!)
in
whic
h
the
terms
\record"
the
rules
it
w
as
necessary
to
apply
to
pro
v
e
the
t
yp
e
of
the
term,
when
w
e
view
that
t
yp
e
as
a
prop
osition.
F
or
in-
stance,
x
:
'
:
x
has
t
yp
e
'
!
',
signifying
the
fact
that
w
e
can
pro
v
e
'
!
'
b
y
rst
using
the
axiom
recorded
b
y
the
v
ariable
x
and
then
using
!-in
tro
duction
,
recorded
b
y
x
:
'.
In
short,
in

!
view
ed
as
a
logic,
the
terms
serv
e
as
a
linear
represen
tation
of
pro
of
trees,
and
are
usually


Chapter
.
The
Curry-Ho
w
ard
isomorphism
called
c
onstructions
[
].
These
are
also
constructions
in
the
sense
of
the
BHK-in
terpretation:
a
construction
of
'
!
 
is
a
-term
x
:
'
:
M
of
t
yp
e
'
!
 
.
Tw
o
dieren
t
prop
ositions
cannot
ha
v
e
the
same
construction,
since
w
e
w
ork
with
Ch
urc
h
terms.
In
con
trast,
sev
eral
constructions
ma
y
corresp
ond
to
the
same
prop
osition.
This
is
b
ecause
the
same
prop
osition
ma
y
b
e
pro
v
en
in
dieren
t
w
a
ys.
Th
us

!
and
IPC(!)
ma
y
b
e
view
ed
as
dieren
t
names
for
essen
tially
the
same
thing.
This
means
that
eac
h
of
the
concepts
and
prop
erties
con-
sidered
in

!
mak
es
sense
in
IPC
(!)
and
vice
v
ersa.
As
men
tioned,
terms
in

!
corresp
ond
to
constructions
in
IPC
(!).
T
yp
es
corresp
ond
to
form
ulas,
t
yp
e
constructors
(sum
and
pair)
to
connec-
tiv
es.
Asking
whether
there
exists
a
term
of
a
giv
en
t
yp
e
(inhabitation),
corresp
onds
to
asking
whether
there
exist
a
construction
for
a
giv
en
prop
o-
sition
(pr
ovability.)
Asking
whether
there
exists
a
t
yp
e
for
a
giv
en
term
(typ
ability),
corresp
onds
to
asking
whether
the
construction
is
a
construc-
tion
of
some
form
ula.
What
is
a
redex
in
a
construction?
W
ell,
eac
h
in
tro
duction
rule
in
tro-
duces
a
c
onstructor
(a
lam
b
da,
a
pair,
or
an
injection)
in
the
construction,
and
eac
h
elimination
rule
in
tro
duces
a
destructor
(an
application,
a
pro
jec-
tion,
or
a
case-expression).
No
w,
a
redex
consists
of
a
constructor
imme-
diately
surrounded
b
y
the
corresp
onding
destructor.
Therefore
a
redex
in
the
construction
represen
ts
a
pro
of
tree
con
taining
an
application
of
an
in-
tro
duction
rule
immediately
follo
w
ed
b
y
an
application
of
the
corresp
onding
elimination
rule;
this
w
as
what
w
e
called
a
detour
in
a
pro
of
tree.
Therefore,
reduction
on
terms
corresp
onds
to
normalization
of
constructions.
A
term
in
normal
form
corresp
onds
to
a
construction
represen
ting
a
pro
of
tree
in
normal
form.
The
sub
ject
reduction
prop
osition
states
that
reducing
a
con-
struction
of
a
form
ula
yields
a
construction
for
the
same
form
ula.
The
Ch
urc
h-Rosser
Theorem
states
that
the
order
of
normalization
is
immate-
rial.
Also,
it
states
that
w
e
managed
to
iden
tify
essen
tially
iden
tical
pro
ofs
without
iden
tifying
all
pro
ofs.

..
The
Curry-Ho
w
ard
isomorphism

In
summary:

!
IPC(!)
term
v
ariable
assumption
term
construction
(pro
of
)
t
yp
e
v
ariable
prop
ositional
v
ariable
t
yp
e
form
ula
t
yp
e
constructor
connectiv
e
inhabitation
pro
v
abilit
y
t
ypable
term
construction
for
a
prop
osition
redex
construction
represen
ting
pro
of
tree
with
redundancy
reduction
normalization
v
alue
normal
construction
...
Example.
Consider
the
follo
wing
example
deduction
con
taining
re-
dundancy
.
The
original
deriv
ation
with
constructions
is:
x
:
'
`
x
:
'
`
x
:
'
:
x
:
'
!
'
The
complicated
pro
of
with
constructions
is:
y
:
 
`
y
:
 
`
y
:
 
:
y
:
 
!
 
x
:
'
`
x
:
'
`
x
:
'
:
x
:
'
!
'
`
<
x
:
'
:
x;
y
:
 
:
y
>:
('
!
')
^
( 
!
 
)
`


(<
x
:
'
:
x;
y
:
 
:
y
>)
:
'
!
'
The
construction
of
the
latter
pro
of
tree
in
fact
con
tains
a
redex
whic
h
up
on
reduction
yields
the
construction
of
the
former
pro
of
tree.
The
p
erfect
corresp
ondence
b
et
w
een
reduction
and
normalization
and
the
related
concepts,
justies
the
name
\isomorphism"
rather
than
simply
\bijection."
In
fact,
reduction
has
b
een
studied
extensiv
ely
in
the
-calculus
literature,
while
normalization
has
b
een
studied
indep
enden
tly
in
pro
of
the-
ory
.
Since
the
\disco
v
ery"
of
the
isomorphism,
the
t
w
o
w
orlds
ha
v
e
merged,
and
some
authors
feel
that
it
is
exactly
in
the
corresp
ondence
b
et
w
een
reduc-
tion
and
normalization
that
the
isomorphism
is
deep
est
and
most
fruitful.
This
p
oin
t
of
view
is
supp
orted
b
y
the
fact
that
some
t
yp
ed
-calculi
ha
v
e
b
een
in
tro
duced
as
means
of
studying
normalization
for
logics,
most
notably
Girard's
System
F
in
tro
duced
in
his
w
ork
[
]
from
	.
System
F
corre-
sp
onds
to
second
order
minimal
prop
ositional
logic
and
will
b
e
discussed
in
Chapter
.


Chapter
.
The
Curry-Ho
w
ard
isomorphism
As
an
app
ealing
illustration
of
the
isomorphism
and
an
appropriate
con-
clusion
of
this
section,
this
system
w
as
indep
enden
tly
in
v
en
ted
at
roughly
the
same
time
in
computer
science
b
y
Reynolds
[	0
]
in
his
study
of
p
oly-
morphism
in
t
yp
ed
functional
programming
languages.
In
the
remainder
of
these
notes
the
concepts
corresp
onding
to
one
an-
other
under
the
isomorphism
are
used
in
terc
hangeably
.
In
particular,
an
y
system
as
that
of
the
preceding
subsection
will
b
e
called
b
oth
a
logic
and
a
-calculus
dep
ending
on
the
asp
ects
b
eing
emphasized.
..
Consistency
from
normalization
A
n
um
b
er
of
prop
erties
regarding
unpro
v
abilit
y
can
b
e
dicult
to
establish
directly
,
but
more
easy
to
establish
b
y
seman
tical
metho
ds
as
w
e
sa
w
in
Chapter
.
Often
these
seman
tical
metho
ds
can
b
e
replaced
b
y
metho
ds
in
v
olving
the
w
eak
normalization
prop
ert
y
.
The
follo
wing
sho
ws
that
IPC
(!)
is
consisten
t.
...
Pr
oposition.
`
?.
Pr
oof.
Assume
that
`
?.
Then
`
M
:
?
for
some
M



.
By
the
w
eak
normalization
theorem
and
the
sub
ject
reduction
theorem
there
is
then
an
N

NF

suc
h
that
`
N
:
?.
No
w,
-terms
in
normal
form
ha
v
e
form
x
N

:
:
:
N
m
(where
N

;
:
:
:
;
N
n
are
normal-forms)
and
x
:

:
N
0
(where
N
0
is
in
normal
form).
W
e
cannot
ha
v
e
N
of
the
rst
form
(then
x

FV
(N
),
but
since
`
N
:
?,
FV
(N
)
=
fg).
W
e
also
cannot
ha
v
e
N
of
the
second
form
(then
?
=

!

for
some

;

whic
h
is
paten
tly
false).
u
t
..
Strong
normalization
As
suggested
b
y
the
application
in
the
preceding
section,
the
w
eak
normal-
ization
prop
ert
y
of

!
is
a
v
ery
useful
to
ol
in
pro
of
theory
.
In
this
section
w
e
pro
v
e
the
str
ong
normalization
prop
ert
y
of

!
whic
h
is
sometimes
ev
en
more
useful.
The
standard
metho
d
of
pro
ving
strong
normalization
of
t
yp
ed
-calculi
w
as
in
v
en
ted
b
y
T
ait
[0
]
for
simply
t
yp
ed
-calculus,
generalized
to
second-
order
t
yp
ed
-calculus
b
y
Girard
[
],
and
subsequen
tly
simplied
b
y
T
ait
[0
].
Our
presen
tation
follo
ws
[
];
w
e
consider
in
this
section
terms

a
la
Curry
.
...
Definition.
(i)
SN

=
fM


j
M
is
strongly
normalizing
g.
(ii)
F
or
A;
B

,
dene
A
!
B
=
fF


j
a

A
:
F
a

B
g.

..
Strong
normalization
	
(iii)
F
or
ev
ery
simple
t
yp
e

,
dene
[
[
]
]


b
y:
[
[]
]
=
SN

[
[
!

]
]
=
[
[
]
]
!
[
[
]
]
...
Definition.
(i)
A
set
X

SN

is
satur
ate
d
if
.
F
or
all
n

0
and
M

;
:
:
:
M
n

SN

:
x
M

:
:
:
M
n

X
.
F
or
all
n


and
M

;
:
:
:
;
M
n

SN

:
M
0
fx
:=
M

g
M

:
:
:
M
n

X
)
(x:M
0
)
M

M

:
:
:
M
n

X
(ii)
S
=
fX


j
X
is
saturated
g.
...
Lemma.
(i)
SN


S
;
(ii)
A;
B

S
)
A
!
B

S
;
(iii)



)
[
[
]
]

S
.
Pr
oof.
Exercise
...
u
t
...
Definition.
(i)
a
valuation
is
a
map

:
V
!
,
where
V
is
the
set
of
term
v
ariables.
The
v
aluation
(x
:=
N
)
is
dened
b
y
(x
:=
N
)(y
)
=

N
if
x

y
(y
)
otherwise
(ii)
Let

b
e
a
v
aluation.
Then
[
[M
]
]

=
M
fx

:=
(x

);
:
:
:
;
x
n
:=
(x
n
)g,
where
FV(M
)
=
fx

;
:
:
:
;
x
n
g.
(iii)
Let

b
e
a
v
aluation.
Then

j
=
M
:

i
[
[M
]
]


[
[
]
].
Also,

j
=
 i
(x)

[
[
]
]
for
all
x
:


 .
(iv)
 j
=
M
:

i

:

j
=
 )

j
=
M
:

.
...
Pr
oposition
(Soundness).
 `
M
:

)
 j
=
M
:

.
Pr
oof.
By
induction
on
the
deriv
ation
of
 `
M
:

.
.
The
deriv
ation
is
 `
x
:

x
:


 If

j
=
 ,
then
[
[x]
]

=
(x)

[
[
]
].

0
Chapter
.
The
Curry-Ho
w
ard
isomorphism
.
The
deriv
ation
ends
in
 `
M
:

!

 `
N
:

 `
M
N
:

Supp
ose

j
=
 .
By
the
induction
h
yp
othesis
 j
=
M
:

!

and
 j
=
N
:

,
so

j
=
M
:

!

and

j
=
N
:

,
i.e.,
[
[M
]
]


[
[
]
]
!
[
[
]
]
and
[
[N
]
]


[
[
]
].
Then
[
[M
N
]
]

=
[
[M
]
]

[
[N
]
]


[
[
]
],
as
required.
.
The
deriv
ation
ends
in
 ;
x
:

`
M
:

 `
x:M
:

!

Supp
ose

j
=
 .
Also,
supp
ose
N

[
[
]
].
Then
(x
:=
N
)
j
=
 ;
x
:

.
By
the
induction
h
yp
othesis
 ;
x
:

j
=
M
:

,
so
(x
:=
N
)
j
=
M
:

,
i.e.,
[
[M
]
]
(x:=N
)

[
[
]
].
No
w,
[
[x:M
]
]

N

(x:M
)
fy

:=
(y

);
:
:
:
;
y
n
:=
(y
n
)gN
!

M
fy

:=
(y

);
:
:
:
;
y
n
:=
(y
n
);
x
:=
N
g

[
[M
]
]
(x:=N
)
Since
N

[
[
]
]

SN

and
[
[M
]
]
(x:=N
)

[
[
]
]

S
,
it
follo
ws
that
[
[x:M
]
]

N

[
[
]
].
Hence
[
[x:M
]
]


[
[
!

]
].
u
t
...
Theorem.
 `
M
:

)
M

SN

.
Pr
oof.
If
 `
M
:

,
then
 j
=
M
:

.
F
or
eac
h
x
:


 ,
let
(x)
=
x.
Then
x

[
[
]
]
holds
since
[
[
]
]

S
.
Then

j
=
 ,
and
w
e
ha
v
e
M
=
[
[M
]
]


[
[
]
]

SN

.
u
t
The
reader
ma
y
think
that
the
ab
o
v
e
pro
of
is
more
complicated
than
the
w
eak
normalization
pro
of
of
the
preceding
c
hapter;
in
fact,
this
feeling
can
b
e
made
in
to
a
tec
hnical
prop
ert
y
b
y
noting
that
the
latter
pro
of
in
v
olv
es
quan
tifying
o
v
er
sets,
whereas
the
former
do
es
not.
The
fact
that
the
strong
normalization
prop
ert
y
seems
more
dicult
to
pro
v
e
has
led
to
some
tec
hniques
that
aim
at
inferring
strong
normalization
from
w
eak
normalization|see
[0
].
There
are
man
y
applications
of
strong
normalization,
but
man
y
of
these
applications
can
b
e
obtained
already
b
y
using
the
w
eak
normalization
theo-
rem.
The
follo
wing
is
a
true
application
of
strong
normalization
where
w
eak
normalization
do
es
not
suce.
...
Definition.
Let
!
b
e
a
binary
relation
on
some
set
L,
and
write
M
!
!
M
0
if
M
=
M

!
:
:
:
!
M
n
=
M
0
,
where
n

.
Then
.
!
satises
CR
i
for
all
M

;
M

;
M


L,
M

!
!
M

and
M

!
!
M

implies
that
there
is
an
M


L
suc
h
that
M

!
!
M

and
M

!
!
M

.

..
Historical
remarks

.
!
satises
W
CR
i
for
all
M

;
M

;
M


L,
M

!
M

and
M

!
M

implies
that
there
is
an
M


L
suc
h
that
M

!
!
M

and
M

!
!
M

.
.
!
satises
SN
i
for
all
M

L,
there
is
no
innite
reduction
sequence
M
!
M
0
!
:
:
:
.
.
!
satises
WN
i
for
all
M

L,
there
is
a
nite
reduction
sequence
M
!
M
0
!
:
:
:
!
M
00
suc
h
that
M
00
is
a
normal
form
(i.e.,
for
all
N

L:
M
00
!
N
).
...
Pr
oposition
(Newman's
lemma).
L
et
!
b
e
a
binary
r
elation
satis-
fying
SN.
If
!
satises
W
CR
,
then
!
satises
CR.
Pr
oof.
See
the
exercises.
u
t
The
follo
wing
sho
ws
that
the
assumption
ab
out
strong
normalization
cannot
b
e
replaced
b
y
w
eak
normalization.
..	.
Pr
oposition.
Ther
e
is
a
binary
r
elation
!
satisfying
WN
and
W
CR
,
but
not
CR.
Pr
oof.
See
the
exercises.
u
t
..0.
Cor
ollar
y.
L
et
M



b
e
typ
able
in

!

a
la
Chur
ch
and
assume
that
M

!
!

M

and
M

!
!

M

.
Then
ther
e
is
an
M

such
that
M

!
!

M

and
M

!
!

M

.
Pr
oof.
See
the
exercises.
u
t
..
Historical
remarks
The
informal
notion
of
a
\construction"
men
tioned
in
the
BHK-in
terpretation
w
as
rst
formalized
in
Kleene's
r
e
cursive
r
e
alizability
in
terpretation
[0
,

]
in
whic
h
pro
ofs
in
intuitionistic
numb
er
the
ory
are
in
terpreted
as
n
um
b
ers,
as
w
e
will
see
later
in
the
notes.
A
pro
of
of
'

!
'

is
in
terpreted
as
the
G
odel
numb
er
of
a
partial
recursiv
e
function
mapping
the
in
terpretation
of
an
y
pro
of
of
'

to
the
in
terpretation
of
a
pro
of
of
'

.
One
can
see
the
Curry-Ho
w
ard
isomorphism|the
corresp
ondence
b
e-
t
w
een
systems
of
formal
logic
and
functional
calculi
with
t
yp
es,
men
tioned
ab
o
v
e|as
a
syn
tactic
reection
of
this
in
terpretation.
It
sho
ws
that
a
cer-
tain
notation
system
for
denoting
certain
recursiv
e
functions
coincides
with
a
system
for
expressing
pro
ofs.
Curry
[
]
disco
v
ered
that
the
pro
v
able
form
ulas
in
a
so-called
Hilb
ert
formulation
of
IPC
(!)
coincide
with
the
inhabited
t
yp
es
of
c
ombinatory
lo
gic,
when
one
iden
ties
function
t
yp
e
with
implication.
Moreo
v
er,
ev
ery
pro
of
in
the
logic
corresp
onds
to
a
term
in
the
functional
calculus,
and


Chapter
.
The
Curry-Ho
w
ard
isomorphism
vice
v
ersa.
Curry
also
noted
a
similar
corresp
ondence
b
et
w
een
a
natural
deduction
form
ulation
of
IPC(!)
and
simply
t
yp
ed
-calculus,
and
b
et
w
een
a
se
quent
c
alculus
form
ulation
of
IPC(!)
and
a
sequen
t
calculus
v
ersion
of
simply
t
yp
ed
-calculus.
Gen
tzen's
Hauptsatz
[	
]
sho
ws
ho
w
one
can
transform
a
sequen
t
cal-
culus
pro
of
in
to
another
pro
of
with
no
applications
of
the
cut
rule.
Curry
no
w
pro
v
ed
a
corresp
onding
result
for
the
sequen
t
calculus
v
ersion
of
simply
t
yp
ed
-calculus.
He
then
form
ulated
corresp
ondences
b
et
w
een
sequen
t
cal-
culus
systems,
natural
deduction
systems,
and
Hilb
ert
systems
(in
terms
of
the
corresp
onding
functional
calculi)
and
used
these
to
infer
w
eak
normal-
ization
for

-reduction
in
simply
t
yp
ed
-calculus
and
for
so-called
str
ong
r
e
duction
in
com
binatory
logic.
A
more
direct
relation
b
et
w
een
reduction
on
terms
and
normalization
of
pro
ofs
w
as
giv
en
b
y
Ho
w
ard
in
a
pap
er
from
	,
published
as
[
].
Pra
witz
had
studied
reduction
of
natural
deduction
pro
ofs
extensiv
ely
[
]|
sev
en
y
ears
after
Curry's
b
o
ok|and
had
pro
v
ed
w
eak
normalization
of
this
notion
of
reduction.
Ho
w
ard
no
w
sho
w
ed
that
reduction
of
a
pro
of
in
the
natural
deduction
system
for
minimal
implicational
logic
corresp
onds
to

-
reduction
on
the
corresp
onding
term
in
the
simply
t
yp
ed
-calculus.
He
also
extended
this
corresp
ondence
to
rst
order
in
tuitionistic
arithmetic
and
a
related
t
yp
ed
-calculus.
Ho
w
ard's
corresp
ondence
and
the
w
eak
normalization
theorem
giv
e
a
syn
tactic
v
ersion
of
Kleene's
in
terpretation,
where
one
replaces
recursiv
e
functions
b
y
-terms
in
normal
form.
F
or
instance,
an
y
pro
of
of
'

!
'

reduces
to
a
-abstraction
whic
h,
when
applied
to
a
pro
of
of
'

,
yields
a
pro
of
of
'

.
Constable
[	
,
0]
suggested
that
a
t
yp
e
or
prop
osition
'
b
e
view
ed
as
a
sp
ecication,
and
an
y
pro
of
M
of
'
as
a
program
satisfying
the
sp
ecication.
F
or
instance,
sorting
can
b
e
sp
ecied
b
y
the
form
ula
x
	y
:
o
rdered
(y
)
^
p
ermutation(x;
y
)
in
pr
e
dic
ate
lo
gic,
and
a
pro
of
of
the
form
ula
will
b
e
a
sorting
algorithm.
There
is
a
literature
dev
oted
to
metho
ds
for
nding
ecien
t
programs
in
this
w
a
y
.
The
Curry-Ho
w
ard
isomorphism
has
ev
olv
ed
with
the
in
v
en
tion
of
n
u-
merous
t
yp
ed
-calculi
and
corresp
onding
natural
deduction
logics,
see
[
,

,
,

].
Other
names
for
the
isomorphism
include
pr
op
ositions-as-typ
es,
formula-as-typ
es,
and
pr
o
ofs-as-pr
o
gr
ams.
..
Exercises
...
Exer
cise.
Giv
e
deriv
ations
of
the
form
ulas
(),(),(),(),(	
),(
)
from
Section
.
using
the
natural
deduction
st
yle
of
Section
..

..
Exercises

...
Exer
cise.
Giv
e
-terms
corresp
onding
to
the
deriv
ations
from
Exer-
cise
...
Use
the
follo
wing
rule
for
-terms
corresp
onding
to
the
ex-falso
rule:
 `
M
:
?
 `
"
'
(M
)
:
'
:
...
Exer
cise.
Pro
v
e
Lemma
...
...
Exer
cise.
.
Pro
v
e
Newman's
Lemma.
Hint:
Pro
v
e
b
y
induction
on
the
length
of
the
longest
reduction
se-
quence
from
M
that
M
!
!
M

and
M
!
!
M

implies
that
there
is
an
M

suc
h
that
M

!
!
M

and
M

!
!
M

.
.
Pro
v
e
Prop
osition
..	.
.
Infer
from
Newman's
Lemma
Corollary
..0.
...
Exer
cise.
Pro
v
e
Prop
osition
..(i)
in
detail.
...
Exer
cise.
A

-r
e
duction
str
ate
gy
is
a
map
F
:

!

suc
h
that
M
!

F
(M
)
if
M

NF

,
and
F
(M
)
=
M
otherwise.
Informally
,
a
reduc-
tion
strategy
selects
from
an
y
term
not
in
normal
form
a
redex
and
reduces
that.
F
or
example,
F
l
is
the
reduction
strategy
that
alw
a
ys
reduces
the
left-most
redex.
A
reduction
strategy
F
is
normalizing
if,
for
an
y
w
eakly
normalizing
term
M
,
there
is
an
i
suc
h
that

M
!

F
(M
)
!

:
:
:
!

F
i
(M
)

NF

That
is,
if
the
term
has
a
normal
form,
then
rep
eated
application
of
F
ev
en
tually
ends
in
the
normal
form.
A
classical
result
due
to
Curry
and
F
eys
states
that
F
l
is
normalizing.
A
reduction
strategy
F
is
p
erp
etual
if,
for
an
y
term
M
whic
h
is
not
strongly
normalizing,
there
is
no
i
suc
h
that
M
!

F
(M
)
!

:
:
:
!

F
i
(M
)

NF

That
is,
if
the
term
has
an
innite
reduction,
then
rep
eated
application
of
F
yields
an
innite
reduction
sequence.
Dene
F

:

!

as
follo
ws.
If
M

NF

then
F

(M
)
=
M
;
other-
wise

F

(x
~
P
Q
~
R
)
=
x
~
P
F

(Q)
~
R
If
~
P

NF

;
Q

NF

F

(x:P
)
=
x:F

(P
)
F

((x:P
)
Q
~
R
)
=
P
fx
:=
Qg
~
R
If
x

FV(P
)
or
Q

NF

F

((x:P
)
Q
~
R
)
=
(x:P
)
F

(Q)
~
R
If
x

FV(P
)
and
Q

NF


As
usual,
F
0
(M
)
=
M
and
F
i+
(M
)
=
F
(F
i
(M
)).

By
~
P
w
e
denote
a
nite,
p
ossibly
empt
y
,
sequence
of
terms.


Chapter
.
The
Curry-Ho
w
ard
isomorphism
Sho
w
that
F

is
p
erp
etual.
Let

I
b
e
the
set
of
all
-terms
M
suc
h
that
an
y
part
x:P
of
M
satises
x

FV(P
).
F
or
instance,
I


I
and



I
but
K
=
x:y
:x


I
.
Sho
w
that
for
an
y
M


I
:
M

WN

i
M

SN

.
Hint:
Compare
b
eing
w
eakly
normalizing
with
F
l
leading
to
a
normal
form,
and
compare
b
egin
strongly
normalizing
with
F

leading
to
a
normal
form.
What
is
the
relation
b
et
w
een
F
l
and
F

on
M


I
?
Since

I
is
a
subset
of
,
the
elemen
ts
of

I
that
ha
v
e
a
t
yp
e
in

!
(
a
la
Curry)
m
ust
corresp
ond
to
a
subset
of
all
pro
ofs
in
IPC(!).
Whic
h
pro
ofs
are
these?

CHAPTER

Pro
ofs
as
com
binators
In
the
preceding
c
hapters
w
e
ha
v
e
considered
v
arious
systems
of
-calculi.
One
rather
disturbing
asp
ect
of
these
systems
is
the
role
pla
y
ed
b
y
b
ound
v
ariables,
esp
ecially
in
connection
with
substitution.
In
this
c
hapter
w
e
consider
a
system,
c
ombinatory
lo
gic,
whic
h
is
equiv
alen
t
to
-calculus
in
a
certain
sense,
and
in
whic
h
there
are
no
b
ound
v
ariables.
The
rst
section
in
tro
duces
a
v
ersion
of
com
binatory
logic
analogous
to
t
yp
e-free
-calculus.
The
second
section
presen
ts
simply
typ
e
d
c
ombinatory
lo
gic,
analogous
to
simply
t
yp
ed
-calculus.
Since
simply
t
yp
ed
-calculus
corresp
onds
to
the
natural
deduction
for-
m
ulation
of
in
tuitionistic
prop
ositional
logic
via
the
Curry-Ho
w
ard
isomor-
phism,
and
com
binatory
logic
is
a
v
arian
t
of
-calculus,
it
is
natural
to
ex-
p
ect
that
simply
t
yp
ed
com
binatory
logic
also
corresp
onds
to
some
v
arian
t
of
in
tuitionistic
prop
ositional
logic.
This
v
arian
t,
traditionally
called
Hilb
ert-
style
as
opp
osed
to
natural
deduction
st
yle,
is
in
tro
duced
in
the
third
section,
and
the
fourth
section
presen
ts
the
Curry-Ho
w
ard
isomorphism
b
et
w
een
the
Hilb
ert-st
yle
in
tuitionistic
prop
ositional
logic
and
com
binatory
logic.
The
fth
section
studies
sp
ecial
cases
of
the
Curry-Ho
w
ard
isomorphism
b
y
in
v
estigating
ho
w
certain
restrictions
in
the
logic
are
reected
b
y
restric-
tions
in
the
functional
calculus.
..
Com
binatory
logic
Combinatory
lo
gic
w
as
in
v
en
ted
b
y
Sc
h
onnk
el
and
Curry
in
the
	0's
shortly
b
efore
Ch
urc
h
in
tro
duced
the
lam
b
da-calculus.
The
idea
w
as
to
build
the
foundations
of
logic
on
a
formal
system
in
whic
h
logical
form
ulas
could
b
e
handled
in
a
variable-fr
e
e
manner.
As
men
tioned
in
Chapter
,
the
systems
of
com
binatory
logic
and
-
calculus
that
aimed
at
pro
viding
a
foundations
of
mathematics
and
logic
turned
out
to
b
e
inconsisten
t,
due
to
the
presence
of
arbitrary
xed-p
oin
ts|
see
[
,
App.
B]
or
[
,
Chap.
].
Nev
ertheless,
one
ma
y
distinguish
a
useful



Chapter
.
Pro
ofs
as
com
binators
subsystem
of
the
original
system
of
com
binators
dealing
only
with
pure
functions,
and
this
system
will
b
e
called
c
ombinatory
lo
gic
b
elo
w.
The
ob
jects
of
study
in
com
binatory
logic
are
the
c
ombinatory
terms.
...
Definition.
The
set
C
of
c
ombinatory
terms
is
dened
b
y
the
gram-
mar:
C
::=
V
j
K
j
S
j
(C
C
)
where
V
is
the
same
set
of
v
ariables
as
used
in
.
The
notational
con
v
en
tions
concerning
paren
theses
are
the
same
as
for
lam
b
da-terms.
...
Definition.
The
reduction
relation
!
w
on
com
binatory
terms,
called
we
ak
r
e
duction
is
dened
b
y
the
follo
wing
rules:

KF
G
!
w
F
;

SF
GH
!
w
F
H
(GH
);

If
F
!
w
F
0
then
F
G
!
w
F
0
G
and
GF
!
w
GF
0
.
The
sym
b
ol
!
!
w
denotes
the
smallest
reexiv
e
and
transitiv
e
relation
con-
taining
!
w
,
and
=
w
denotes
the
least
equiv
alence
relation
con
taining
!
w
.
A
w
-normal
form
is
a
com
binatory
term
F
suc
h
that
F
!
w
G,
for
all
com
binatory
terms
G.
...
Example.

Let
I
=
SKK.
Then,
for
all
F
,
w
e
ha
v
e
IF
!
w
KF
(KF
)
!
w
F
.

The
term
SI
I(SI
I)
reduces
to
itself.

Let
W
=
SS(KI).
Then,
for
all
F
;
G,
w
e
ha
v
e
W
F
G
!
!
w
F
GG.

Let
B
=
S(KS)K.
Then,
for
all
F
;
G;
H
,
w
e
ha
v
e
BF
GH
!
!
w
F
(GH
).

Let
C
=
S(BBS
)(KK
).
Then
CF
GH
!
!
w
F
H
G,
for
all
F
;
G;
H
.

K,
S,
K
S,
S
K,
and
S
KK
are
w
-normal
forms.
The
follo
wing
giv
es
the
rst
hin
t
that
com
binatory
logic
is
essen
tially
simpler
than
-calculus
in
some
resp
ects.
...
Definition.
F
or
F

C
dene
the
set
FV(F
)
of
fr
e
e
variables
of
F
b
y:
FV
(x)
=
fxg;
FV
(H
G)
=
FV(H
)
[
FV(G);
FV
(S)
=
fg;
FV
(K)
=
fg:

..
Com
binatory
logic

F
or
F
;
G

C
and
x

V
dene
substitution
of
G
for
x
in
F
b
y:
xfx
:=
Gg
=
G;
y
fx
:=
Gg
=
y
if
x
=
y
;
(H
E
)fx
:=
Gg
=
H
fx
:=
Gg
E
fx
:=
Gg;
Sfx
:=
Gg
=
S;
Kfx
:=
Gg
=
K:
Note
that
there
are
no
b
ound
v
ariables,
and
no
need
for
renaming
in
substitutions.
The
follo
wing
is
similar
to
the
the
Ch
urc
h-Rosser
prop
ert
y
for
-calculus.
...
Theorem
(Ch
urc
h-Rosser
prop
ert
y).
If
F
!
!
w
F

and
F
!
!
w
F

then
F

!
!
w
G
and
F

!
!
w
G,
for
some
G.
Pr
oof.
See
the
exercises.
u
t
One
can
then
infer
Corollaries
similar
to
.{
in
Chapter
.
There
is
an
ob
vious
similarit
y
b
et
w
een
terms
of
lam
b
da-calculus
and
com
binatory
terms.
A
translation
(
)

:
C
!

is
easy
to
dene.
W
e
just
iden
tify
K
and
S
with
the
corresp
onding
lam
b
da-
terms:
...
Definition.

(x)

=
x,
for
x

V
;

(K)

=
xy
:x;

(S)

=
xy
z
:xz
(y
z
);

(F
G)

=
(F
)

(G)

.
...
Pr
oposition.
If
F
!
!
w
G
then
(F
)

!
!

(G)

.
Pr
oof.
By
induction
on
the
deriv
ation
of
F
!
!
w
G.
u
t
...
Remark.
It
is
not
in
general
the
case
that
(F
)

!
!

(G)

implies
F
!
!
w
G.
Coun
ter-example:
(S
(K
I)
K)

!

(K)

but
S
(K
I)
K
!
w
K.
It
is
less
ob
vious
ho
w
to
mak
e
a
translation
bac
kw
ard,
b
ecause
w
e
ha
v
e
to
dene
lam
b
da
abstraction
without
b
ound
v
ariables.
One
of
the
p
ossible
metho
ds
is
as
follo
ws.
..	.
Definition.
F
or
eac
h
F

C
and
eac
h
x

V
w
e
dene
the
term


x:F

C
.


Chapter
.
Pro
ofs
as
com
binators



x:x
=
I;



x:F
=
KF
,
if
x

FV
(F
);



x:F
G
=
S(

x:F
)(

x:G),
otherwise.
The
follo
wing
sho
ws
that
the
denition
of
abstraction
b
eha
v
es
(partly)
as
exp
ected.
..0.
Pr
oposition.
(

x:F
)G
!
!
w
F
fx
:=
Gg
Pr
oof.
Exercise
...
u
t
Using
the
op
erator


x,
w
e
can
dene
a
translation
(
)
C
:

!
C
as
follo
ws.
...
Definition.

(x)
C
=
x,
for
x

V
;

(M
N
)
C
=
(M
)
C
(N
)
C
;

(x:M
)
C
=


x:(M
)
C
.
...
Remark.
It
is
natural
to
exp
ect,
dually
to
Prop
osition
..,
that
one
could
use
Prop
osition
..0
to
pro
v
e
that
M
!
!

N
)
(M
)
C
!
!
w
(N
)
C
()
Ho
w
ev
er,
this
prop
ert
y
do
es
not
hold.
F
or
instance
x:I
I
!

x:I,
but
(x:I
I)
C
=
S
(K
I)
(K
I)
!
!
w
K
I
=
(x:I)
C
.
If
one
attempts
to
pro
v
e
()
b
y
induction
on
the
deriv
ation
of
M
!
!

N
,
one
runs
in
to
diculties
in
the
case
M
!

N
)
x:M
!

x:N
.
The
problem
is
that
the
corresp
onding
principle
F
!
w
G
)


x:F
!
w


x:G
(
)
fails.
The
references
at
the
end
of
the
c
hapter
con
tain
more
information
ab
out
this
problem.
The
follo
wing
sho
ws
that
the
translations
b
et
w
een

and
C
are
in
v
erses
in
a
w
eak
sense.
...
Pr
oposition.
F
or
al
l
M

,
we
have
((M
)
C
)

=

M
.
Pr
oof.
Exercise
...
u
t

..
T
yp
ed
com
binators
	
Because
of
Prop
ositions
..
and
..,
w
e
can
think
of
(
)

as
of
a
homomorphic
em
b
edding
of
the
com
binatory
logic
in
to
the
lam
b
da-calculus.
In
what
follo
ws,
w
e
often
abuse
the
notation
b
y
using
the
names
S;
K,
etc.
for
the
-terms
(K)

,
(S)

,
etc.
The
follo
wing
prop
ert
y
is
sometimes
expressed
b
y
sa
ying
that
K
and
S
mak
e
a
b
asis
for
un
t
yp
ed
-calculus.
...
Cor
ollar
y.
Every
close
d
lamb
da
term
M
is
b
eta-e
qual
to
a
term
obtaine
d
fr
om
K
and
S
solely
by
applic
ation.
Pr
oof.
The
desired
term
is
((M
)
C
)

.
u
t
Unfortunately
,
the
em
b
edding
(
)

:
C
!

is
not
an
isomorphism.
Put
dieren
tly
,
the
left
in
v
erse
op
erator
(
)
C
is
only
a
pro
jection
(retraction).
Indeed,
w
e
ha
v
e
already
seen
that
the
statemen
t
dual
to
Prop
osition
..
fails,
and
the
same
holds
for
the
statemen
t
dual
to
Prop
osition
...
...
Example.
((K)

)
C
=
S(KK)I
=
w
K.
It
follo
ws
that
\w
eak"
equalit
y
is
actually
a
str
ong
prop
ert
y!
..
T
yp
ed
com
binators
Since
com
binatory
terms
can
b
e
seen
as
a
subset
of
lam
b
da-terms,
they
can
also
inherit
the
structure
of
simply-t
yp
ed
lam
b
da-calculus.
Of
course,
there
are
t
w
o
w
a
ys
to
do
this.
...
Definition.
Dene
the
t
ypabilit
y
relation
`
on
C

C


b
y:
 ;
x
:

`
x
:

 `
K
:

!

!

 `
S
:
(
!

!
)
!
(
!

)
!

!

 `
M
:

!

 `
N
:

 `
M
N
:

for
all
t
yp
es

;

and

and
arbitrary
con
text
 .
The
other
form
ulation
of
simply
t
yp
ed
com
binatory
logic
uses
com
bina-
tory
terms

a
la
Ch
urc
h.

0
Chapter
.
Pro
ofs
as
com
binators
...
Definition.
Dene
the
set
C

of
c
ombinatory
terms

a
la
Chur
ch
b
y
the
grammar:
C

::=
V
j
K

;
j
S

;
;
j
(C

C

)
Dene
the
t
ypabilit
y
relation
`
on
C

C



b
y:
 ;
x
:

`
x
:

 `
K

;

!

!

 `
S

;
;
:
(
!

!
)
!
(
!

)
!

!

 `
M
:

!

 `
N
:

 `
M
N
:

F
ollo
wing
the
path
of
Chapter

w
e
could
deriv
e
the
usual
prop
erties,
e.g.,
the
free
v
ariables
lemma,
a
v
ersion
of
the
generation
lemma,
and
so
on,
for
eac
h
of
the
t
w
o
com
binatory
logics
with
t
yp
es.
In
some
cases,
e.g.
the
pro
of
of
sub
ject
reduction,
the
pro
of
is
simpler
since
reduction
do
es
not
en
tail
an
y
substitutions,
in
con
trast
to
the
case
of

-reduction.
Moreo
v
er,
w
e
migh
t
also
pro
v
e
an
equiv
alence
result
analogous
to
Prop
ositions
..{...
Ho
w
ev
er,
for
the
sak
e
of
brevit
y
,
w
e
shall
not
do
so.
T
o
distinguish
b
et
w
een
the
t
yping
relation
for
simply
t
yp
ed
com
binatory
logic
and
the
one
for
simply
t
yp
ed
-calculus,
w
e
shall
use
`
C
and
`

for
the
t
w
o,
resp
ectiv
ely
.
In
the
remainder
of
the
notes
it
will
b
e
clear
from
con
text
whether
the
t
yping
relations
refer
to

a
la
Curry
or

a
la
Ch
urc
h
systems,
b
oth
in
connection
with
com
binatory
logic
and
-calculus.
It
is
not
dicult
to
see
that
our
em
b
edding
(
)

preserv
es
t
yp
es.
In
addition,
the
same
is
true
for
the
translation
(
)
C
,
but
this
requires
the
follo
wing
lemma:
...
Lemma.
L
et
 ;
x
:

`
C
F
:

.
Then
 `
C


x:F
:

!

.
Pr
oof.
By
induction
on
F
.
u
t
...
Pr
oposition.
.
If
 `
C
F
:

then
 `

(F
)

:

.
.
If
 `

M
:

then
 `
C
(M
)
C
:

.
Pr
oof.
(i):
By
induction
on
the
deriv
ation
of
 `
C
F
:

.
(ii):
By
induction
on
the
deriv
ation
of
 `

M
:

,
using
Lemma
..
u
t
...
Cor
ollar
y.
The
simply-typ
e
d
version
of
the
c
alculus
of
c
ombinators
has
the
str
ong
normalization
pr
op
erty.
Pr
oof.
By
strong
normalization
of
simply
t
yp
ed
-calculus
and
Prop
osi-
tion
...
u
t

..
Hilb
ert-st
yle
pro
ofs

..
Hilb
ert-st
yle
pro
ofs
Recall
from
Chapter

and

that,
so
far,
our
formal
pro
ofs
ha
v
e
b
een
of
the
natur
al
de
duction
st
yle.
Apart
from
the
sequen
t
calculus
st
yle
of
presen
ta-
tion,
whic
h
will
b
e
in
tro
duced
later,
there
is
y
et
another
st
yle
of
presen
tation
of
logics,
kno
wn
as
the
Hilb
ert-style.
In
fact,
this
is
the
traditional
approac
h
to
the
denition
of
a
formal
pro
of.
A
Hilb
ert-st
yle
pro
of
system
consists
of
a
set
of
axioms
and
only
a
few
pro
of
rules.
Belo
w
w
e
describ
e
suc
h
a
system
for
the
implicational
fragmen
t
of
prop
o-
sitional
in
tuitionistic
logic.
This
system
has
only
one
pro
of
rule,
called
mo
dus
p
onens
,
whic
h
is
sometimes
translated
to
English
as
\detachment
rule"
:
';
'
!
 
 
There
will
b
e
t
w
o
axiom
sc
hemes.
That
is,
all
form
ulas
that
t
the
patterns
b
elo
w
are
considered
axioms:
(A)
'
!
 
!
';
(A)
('
!
 
!
#)
!
('
!
 
)
!
'
!
#.
Note
that
there
are
in
fact
innitely
man
y
axioms.
But
this
do
es
not
b
other
us
as
long
as
they
can
b
e
eectiv
ely
describ
ed.
F
ormal
pro
ofs
in
Hilb
ert-st
yle
systems
are
traditionally
dened
as
sequences
of
form
ulas.
...
Definition.
A
formal
pr
o
of
of
a
form
ula
'
from
a
set
 of
assump-
tions
is
a
a
nite
sequence
of
form
ulas
 

;
 

;
:
:
:
;
 
n
,
suc
h
that
 
n
=
',
and
for
all
i
=
;
:
:
:
;
n,
one
of
the
follo
wing
cases
tak
es
place:

 
i
is
an
axiom,
or

 
i
is
an
elemen
t
of
 ,
or

there
are
j;
`
<
i
suc
h
that
 
j
=
 
`
!
 
i
(i.e.,
 
i
is
obtained
from
 
j
,
 
`
using
mo
dus
p
onens
).
W
e
write
 `
H
'
if
suc
h
a
pro
of
exists.
The
notation
`
H
ob
eys
the
usual
con
v
en
tions.
...
Example.
Here
is
a
pro
of
of
'
!
'
from
the
empt
y
set.
.
('
!
( 
!
')
!
')
!
(('
!
( 
!
'))
!
('
!
'))
(axiom
A);
.
'
!
( 
!
')
!
'
(axiom
A);
.
('
!
( 
!
'))
!
('
!
')
(mo
dus
p
onens
:
detac
h

from
);
.
'
!
( 
!
')
(axiom
A);


Chapter
.
Pro
ofs
as
com
binators
.
'
!
'
(mo
dus
p
onens
:
detac
h

from
);
...
Example.
And
here
is
a
pro
of
of
#
from
f'
!
 
;
 
!
#;
'g:
.
'
!
 
(assumption);
.
'
(assumption);
.
 
(mo
dus
p
onens
:
detac
h

from
);
.
 
!
#
(assumption);
.
#
(mo
dus
p
onens
:
detac
h

from
).
The
follo
wing
imp
ortan
t
prop
ert
y
of
Hilb
ert-st
yle
pro
of
systems
is
called
the
De
duction
The
or
em.
...
Pr
oposition
(Herbrand,
	0).
 ;
'
`
H
 
i
 `
H
'
!
 
.
Pr
oof.
The
pro
of
from
righ
t
to
left
requires
one
application
of
mo
dus
p
o-
nens
and
w
eak
ening.
F
or
the
other
direction,
pro
ceed
b
y
induction
on
the
size
of
the
pro
of.
u
t
Note
ho
w
easy
the
pro
of
of
'
!
'
b
ecomes
with
the
a
v
ailabilit
y
of
the
deduction
theorem,
as
compared
to
ha
ving
to
do
the
direct
pro
of
explicitly
.
...
Pr
oposition.
F
or
every
 and
':
 `
N
'
i
 `
H
'.
Pr
oof.
The
righ
t
to
left
part
is
an
easy
induction.
The
con
v
erse
is
also
easy
,
using
the
Deduction
Theorem.
u
t
W
e
conclude
that
our
Hilb
ert-st
yle
system
is
complete
in
the
sense
of
b
oth
Heyting
algebras
and
Kripk
e
mo
dels.
...
Theorem.
 j
=
'
i
 `
H
'.
Pr
oof.
Immediate
from
the
completeness
for
natural
deduction
and
the
previous
prop
osition.
u
t
...
Remark.
By
adding
axioms
to
handle
the
other
connectiv
es,
one
can
obtain
complete
Hilb
ert-st
yle
pro
of
systems
for
full
prop
ositional
in
tuition-
istic
logic
and
for
classical
prop
ositional
logic.
It
is
p
erhaps
in
teresting
that
a
complete
pro
of
systems
for
classical
prop
ositional
calculus
is
obtained
b
y
adding
only
the
axiom
sc
hemes

?
!
';

(('
!
 
)
!
')
!
'.

..
Relev
ance
and
linearit
y

(Recall
that
_
and
^
can
b
e
dened
in
classical
logic
b
y
!
and
?.)
The
follo
wing
is
a
v
ersion
of
the
Curry-Ho
w
ard
Isomorphism
for
Hilb
ert-
st
yle
pro
of
systems
and
com
binatory
logics.
W
e
w
ork
with
com
binatory
terms

a
la
Ch
urc
h.
...
Pr
oposition.
(i)
If
 `
C
F
:
'
then
j j
`
H
'.
(ii)
If
 `
H
'
then
ther
e
exists
F

C
such
that

`
C
F
:
',
wher
e

=
f(x
'
:
')
j
'

 g.
Pr
oof.
(i):
b
y
induction
on
the
deriv
ation
of
 `
C
M
:
'.
(ii):
b
y
induction
on
the
deriv
ation
of
 `
H
'.
u
t
The
Curry-Ho
w
ard
isomorphism
in
the
case
of
Hilb
ert-st
yle
pro
ofs
and
com
binatory
terms
is
realized
b
y
a
corresp
ondence
b
et
w
een
pro
ofs
and
and
Ch
urc
h-st
yle
com
binatory
terms.
Here
w
e
ha
v
e
the
follo
wing
pairs
of
equiv-
alen
t
notions:
application
mo
dus
p
onens
v
ariable
assumption
constan
ts
K
and
S
axioms
..
Relev
ance
and
linearit
y
Neither
in
tuitionistic
nor
classical
logic
ha
v
e
an
y
ob
jections
against
the
ax-
iom
sc
heme
'
!
 
!
',
whic
h
expresses
the
follo
wing
rule
of
reasoning:
\an
unnecessary
assumption
can
b
e
forgotten".
This
rule
is
ho
w
ev
er
du-
bious
when
w
e
are
in
terested
in
the
r
elevanc
e
of
assumptions
with
resp
ect
to
the
conclusion.
Logicians
and
philosophers
ha
v
e
studied
v
arious
v
arian
ts
of
in
tuitionistic
logic
in
whic
h
restrictions
are
made
concerning
the
manip-
ulation
of
assumptions.
The
classical
references
here
are
[
]
and
[
],
but
the
idea
of
relev
an
t
logics
dates
bac
k
to
early
0's.
Hindley
[
]
attributes
the
idea
to
Moh
and
Ch
urc
h.
Just
lik
e
no
use
of
an
assumptions
ma
y
b
e
regarded
as
a
dubious
phenomenon,
multiple
use
of
an
assumption
ma
y
also
raise
imp
ortan
t
doubts.
The
most
ancien
t
reference
to
a
logic
in
whic
h
this
w
as
tak
en
in
to
accoun
t,
giv
en
b
y
Hindley
[
],
is
a
w
ork
of
Fitc
h
from
	.
With
the
Curry-Ho
w
ard
isomorphism
at
hand,
w
e
can
easily
iden
tify
the
corresp
onding
fragmen
ts
of
(the
implicational
fragmen
t
of
)
in
tuitionis-
tic
prop
ositional
logic,
b
y
c
haracterizing
lam
b
da-terms
with
resp
ect
to
the
n
um
b
er
of
o
ccurrences
of
b
ound
v
ariables
within
their
scop
es.


Chapter
.
Pro
ofs
as
com
binators
...
Definition.
.
The
set
of
I-terms
is
dened
b
y
the
follo
wing
induction:

Ev
ery
v
ariable
is
a
I-term;

An
application
M
N
is
a
I-term
i
b
oth
M
and
N
are
I-terms;

An
abstraction
x:M
is
a
I-term
i
M
is
a
I-term
and
x

FV
(M
)
.
.
The
set
of
BCK-terms
is
dened
as
follo
ws:

Ev
ery
v
ariable
is
a
BCK-term;

An
application
M
N
is
a
BCK-term
i
b
oth
M
and
N
are
BCK-
terms,
and
F
V
(M
)
\
FV(N
)
=
fg;

An
abstraction
x:M
is
a
BCK-term
i
M
is
a
BCK-term.
.
A
term
is
called
line
ar
i
it
is
b
oth
a
I-term
and
a
BCK-term.
Of
course,
I-terms
corresp
ond
to
reasoning
where
eac
h
assumption
is
used
at
le
ast
onc
e
,
but
all
assumptions
are
reusable.
The
BCK-terms
represen
t
the
idea
of
disp
osable
assumptions
that
are
thro
wn
a
w
a
y
after
a
use,
so
they
cannot
b
e
reused.
A
strict
con
trol
o
v
er
all
assumptions,
with
eac
h
one
b
eing
used
exactly
once,
is
main
tained
in
pro
ofs
corresp
onding
to
linear
terms.
The
three
classes
of
lam
b
da-terms
determine
three
fragmen
ts
of
IPC(!):
Relev
an
t
logic
I-terms
BCK-logic
BCK-terms
BCI-logic
linear
terms
The
ab
o
v
e
table
can
b
e
tak
en
as
a
formal
denition
of
these
three
logics,
in
that
the
-calculi
simply
ar
e
the
logics.
Belo
w
w
e
giv
e
more
traditional
Hilb
ert-st
yle
form
ulations
of
the
logics.
...
Definition.
.
The
r
elevant
prop
ositional
calculus
is
a
Hilb
ert-st
yle
pro
of
system
with
the
mo
dus
p
onens
as
the
only
rule,
and
the
follo
wing
axiom
sc
hemes:
A
S
)
('
!
 
!
#)
!
('
!
 
)
!
'
!
#;
A
B
)
( 
!
#)
!
('
!
 
)
!
'
!
#;
A
C
)
('
!
 
!
#)
!
 
!
'
!
#;
A
I
)
'
!
'.

..
Relev
ance
and
linearit
y

.
The
BCK
prop
ositional
calculus
is
a
Hilb
ert-st
yle
pro
of
system
with
the
mo
dus
p
onens
as
the
only
rule,
and
the
axiom
sc
hemes
(A
B
)
and
(A
C
)
and
A
K
)
'
!
 
!
'.
.
The
BCI
prop
ositional
calculus
is
a
Hilb
ert-st
yle
pro
of
system
with
the
mo
dus
p
onens
as
the
only
rule,
and
the
axiom
sc
hemes
(A
B
)
and
(A
C
)
and
(A
I
).
...
W
arning.
The
expression
\linear
logic"
denotes
a
system
whic
h
is
a
strict
extension
of
the
BCI-logic.
(But
linear
logic
is
based
on
the
same
principle
as
BCI-logic:
ev
ery
assumption
is
used
exactly
once.)
Of
course
the
axioms
(A
K
)
and
(A
S
)
are
exactly
our
axioms
(A)
and
(A)
of
the
full
IPC(!).
The
other
axioms
can
also
b
e
seen
as
t
yp
es
of
com
bina-
tors
(see
Example
..).
W
e
ha
v
e:

B
=
xy
z
:x(y
z
)
:
( 
!
#)
!
('
!
 
)
!
'
!
#;

C
=
xy
z
:xz
y
:
('
!
 
!
#)
!
 
!
'
!
#.
Clearly
,
our
three
logics
corresp
ond
to
fragmen
ts
of
C
generated
b
y
the
appropriate
c
hoices
of
com
binators.
This
explains
the
abbreviations
I,
BCK
and
BCI.
The
full
un
t
yp
ed
lam
b
da-calculus
is
sometimes
called
K-
calculus.
W
e
ha
v
e
still
to
justify
that
the
ab
o
v
e
denitions
are
equiv
alen
t
to
those
obtained
b
y
appropriately
restricting
o
ccurrences
of
v
ariables
in
lam
b
da-
terms.
First
w
e
ha
v
e
the
ob
vious
part
(remem
b
er
that
w
e
iden
tify
com
bina-
tory
terms
with
their
translations
via
(
)

).
...
Lemma.
.
The
c
ombinators
S,
B,
C,
I
ar
e
I-terms,
and
so
ar
e
al
l
terms
obtaine
d
fr
om
S,
B,
C,
I
by
applic
ations;
.
The
c
ombinators
B,
C,
K
ar
e
BCK-terms,
and
so
ar
e
al
l
terms
ob-
taine
d
fr
om
B,
C,
K
by
applic
ations;
.
The
c
ombinators
B,
C,
I
ar
e
BCI-terms,
and
so
ar
e
al
l
terms
obtaine
d
fr
om
B,
C,
I
by
applic
ations.
Th
us,
the
em
b
edding
(
)

translates
the
appropriate
fragmen
ts
of
C
in
to
the
appropriate
fragmen
ts
of
.
But
the
in
v
erse
translation
(
)
C
cannot
b
e
used
an
ymore,
as
it
requires
S,
and
K
to
b
e
a
v
ailable.
W
e
need
rst
to
redene
the
com
binatory
abstraction


.


Chapter
.
Pro
ofs
as
com
binators
...
Definition.
.
F
or
eac
h
term
in
C
and
eac
h
x

V
w
e
dene
the
term


x:M

C
.



x:x
=
I;



x:F
=
KF
,
whenev
er
x

FV
(F
);



x:F
G
=
S(

x:F
)(

x:G),
if
x

FV
(F
)
\
FV(G);



x:F
G
=
C(

x:F
)G,
if
x

FV
(F
)
and
x

FV(G);



x:F
G
=
BF
(

x:G),
if
x

FV
(F
)
and
x

FV(G).
.
No
w
dene
a
translation
[
]
C
:

!
C
,
as
follo
ws:

[x]
C
=
x,
for
x

V
;

[M
N
]
C
=
[M
]
C
[N
]
C
;

[x:M
]
C
=


x:[M
]
C
.
The
translation
[
]
C
:

!
C
has
all
the
go
o
d
prop
erties
of
(
)
C
.
That
is,
Prop
ositions
..0,
..
and
..
remain
true.
(F
or
the
pro
of
note
rst
that
(

x:F
)

=

(

x:F
)

.)
In
addition
w
e
ha
v
e:
...
Pr
oposition.
.
If
M
is
a
I-term,
then
[M
]
C
is
built
solely
fr
om
the
c
ombinators
S,
B,
C
and
I.
.
If
M
is
a
BCK-term
then
[M
]
C
is
built
solely
fr
om
the
c
ombinators
B,
C
and
K.
.
If
M
is
a
line
ar
term
then
[M
]
C
is
built
solely
fr
om
the
c
ombinators
B,
C
and
I.
Pr
oof.
Easy
.
Uses
the
follo
wing
prop
ert
y:
F
V
([M
]
C
)
=
FV
(M
).
u
t
It
follo
ws
that
the
translation
[
]
C
can
b
e
seen
as
an
em
b
edding
of
eac
h
of
the
appropriate
fragmen
ts
of
C
in
to
the
corresp
onding
fragmen
t
of
simply
t
yp
ed
lam
b
da
calculus.
W
e
can
conclude
with
the
follo
wing
summary:
...
Theorem.

A
formula
'
is
a
the
or
em
of
r
elevant
lo
gic
if
and
only
if
it
is
a
typ
e
of
a
I-term;

A
formula
'
is
a
the
or
em
of
BCK-lo
gic
if
and
only
if
it
is
a
typ
e
of
a
BCK-term.

A
formula
'
is
a
the
or
em
of
BCI-lo
gic
if
and
only
if
it
is
a
typ
e
of
a
line
ar
term.
Pr
oof.
Immediate
from
Prop
osition
..,
and
the
appropriate
mo
dica-
tions
of
Prop
ositions
..
and
...
u
t

..
Historical
remarks

..
Historical
remarks
Com
binatory
logic
w
as
in
tro
duced
b
y
Curry
in
some
early
pap
ers
[
,

,

]
and
is
also
studied
at
length
in
some
new
er
b
o
oks
[
,

],
whic
h
are
still
v
ery
readable.
Hilb
ert-st
yle
pro
ofs
are
often
used
in
text
b
o
oks
on
logic
that
are
not
concerned
with
pro
of
normalization
in
particular,
or
pro
of
theory
in
gen-
eral.
It
is
in
teresting
to
note
that
the
deduction
theorem,
whic
h
pro
vides
a
translation
from
natural
deduction
pro
ofs
to
Hilb
ert-st
yle
pro
ofs,
and
the
abstraction
op
erator,
whic
h
pro
vides
a
translation
from
t
yp
ed
com
binatory
terms
to
t
yp
ed
-terms,
w
ere
disco
v
ered
indep
enden
tly
in
w
ork
on
Hilb
ert
systems
and
w
ork
on
com
binatory
logic,
although
they
are
essen
tially
the
same
result.
This
is
just
one
example
of
a
n
um
b
er
of
results
that
ha
v
e
b
een
disco
v
ered
indep
enden
tly
in
w
ork
on
logical
systems
and
functional
calculi.
Inciden
tally
,
the
corresp
ondence
b
et
w
een

-equalit
y
and
w
eak
equalit
y
is
not
as
tigh
t
as
one
migh
t
hop
e
for.
Ho
w
ev
er,
if
one
adds
a
certain|
somewhat
in
v
olv
ed|set
of
rules,
called
A

,
to
the
rules
for
w
eak
equalit
y
,
the
resulting
relation
is
equiv
alen
t
to

-equalit
y
in
the
sense
that
the
ab
o
v
e
translations
b
et
w
een

and
C
preserv
e
equalit
y
and
are
eac
h
other's
in
v
erses.
In
particular,
the
extended
equalit
y
on
com
binators
is
closed
under
rule
(
).
The
corresp
ondence
b
et
w
een

-equalit
y
and
w
eak
equalit
y
is
more
ele-
gan
t
in
the
extensional
v
ersions
of
these
calculi.
More
precisely
,
if
one
adds
the
principle
of
extensionalit
y
P
x
=

P
0
x
&
x

FV(P
P
0
)
)
P
=

P
0
(ext)

to
=

and
the
similar
principle
(ext)
w
to
w
eak
equalit
y
,
then
the
resulting
calculi
are
equiv
alen
t
in
the
ab
o
v
e
sense.
Adding
rule
(ext)
to
=

is
equiv
alen
t
to
adding
so-called

-e
quality
(see
Chapter
),
and
adding
rule
(ext)
to
=
w
is
equiv
alen
t
to
adding
a
certain
set
of
equational
axioms,
called
A


.
More
ab
out
all
this
can
b
e
found,
e.g.,
in
[].
..
Exercises
...
Exer
cise.
Find
a
com
binator


C
suc
h
that
F
A
!
!
w
F
(F
A),
for
all
F
and
A
in
C
.
...
Exer
cise.
Pro
v
e
the
Ch
urc
h-Rosser
prop
ert
y
for
w
eak
reduction
us-
ing
the
T
ait
&
Martin-L
of
metho
d
from
Chapter
.
Note
that
the
pro
of
for
com
binatory
logic
is
somewhat
simpler
due
to
the
fact
that
non-overlapping
r
e
dexes
remain
non-o
v
erlapping
during
reduction
of
other
redexes.
...
Exer
cise.
Pro
v
e
Prop
osition
..0.


Chapter
.
Pro
ofs
as
com
binators
...
Exer
cise.
Pro
v
e
Prop
osition
...
...
Exer
cise.
Giv
e
a
Hilb
ert-st
yle
pro
of
of
the
form
ula
('
!
 
)
!
( 
!
#)
!
'
!
#.
...
Exer
cise.
Giv
e
a
detailed
pro
of
of
the
Deduction
Theorem.
Use
y
our
pro
of
to
giv
e
an
abstraction
op
erator,
lik
e


.
...
Exer
cise.
Describ
e
a
notion
of
reduction
for
Hilb
ert-st
yle
pro
ofs,
corresp
onding
to
w
eak
reduction
on
com
binatory
terms.
...
Exer
cise.
Consider
the
follo
wing
v
arian
t
of
the
calculus
of
com
bina-
tors:
there
are
t
yp
ed
constan
ts
K

;
,
and
S

;
;
,
with
t
yping
and
reduction
rules
as
usual,
and
in
addition,
there
are
additional
constan
ts
I

:

!

with
the
reduction
rule
I

F
!
F
.
(The
iden
tit
y
com
binator
cannot
no
w
b
e
dened
as
SKK
b
ecause
not
all
t
yp
ed
forms
of
S
are
a
v
ailable.)
By
em-
b
edding
in
to
Ch
urc
h-st
yle
com
binatory
logic,
sho
w
that
this
v
arian
t
satises
sub
ject
reduction
and
strong
normalization
prop
erties.
..	.
Exer
cise.
(Based
on
[
])
Consider
the
terms
:
K
=
xy
:x,
S

=
ixy
z
:i(i((x(iz
))(i(y
(iz
))
)))
and
I
=
x:x.
Sho
w
that
these
terms
form
a
basis
for
lam
b
da-calculus
in
the
sense
of
Corollary
..,
but
their
t
yp
es
(whatev
er
c
hoice
is
tak
en)
do
not
mak
e
a
complete
Hilb
ert-st
yle
axiom
sys-
tem
for
IPC(!).
Hint:
One
cannot
deriv
e
the
form
ula
(p
!
p
!
q
)
!
p
!
q
.
..0.
Exer
cise.
Adopt
y
our
solutions
of
Exercises
..
and
..
to
the
case
of
the
translation
[
]
C
of
Section
..

CHAPTER

T
yp
e-c
hec
king
and
related
problems
In
this
c
hapter
w
e
discuss
some
decision
problems
related
to
simply-t
yp
ed
lam
b
da
calculus
and
in
tuitionistic
prop
ositional
logic.
W
e
are
mostly
in
ter-
ested
in
decision
problems
arising
from
the
analysis
of
the
ternary
predicate
\ `
M
:

"
in
the
Curry-st
yle
v
ersion
of
simply-t
yp
ed
lam
b
da
calculus.
But
the
follo
wing
denition
mak
es
sense
for
ev
ery
t
yp
e-assignmen
t
system
deriving
judgemen
ts
of
this
form
(including
Ch
urc
h-st
yle
systems).
.0..
Definition.
.
The
typ
e
che
cking
problem
is
to
decide
whether
 `
M
:

holds,
for
a
giv
en
con
text
 ,
a
term
M
and
a
t
yp
e

.
.
The
typ
e
r
e
c
onstruction
problem,
also
called
typ
ability
problem,
is
to
decide,
for
a
giv
en
term
M
,
whether
there
exist
a
con
text
 and
a
t
yp
e

,
suc
h
that
 `
M
:

holds,
i.e.,
whether
M
is
t
ypable.
.
The
typ
e
inhabitation
problem,
also
called
typ
e
emptiness
problem,
is
to
decide,
for
a
giv
en
t
yp
e

,
whether
there
exists
a
closed
term
M
,
suc
h
that
`
M
:

holds.
(Then
w
e
sa
y
that

is
non-empty
and
has
an
inhabitant
M
).
An
ob
vious
motiv
ation
to
consider
t
yp
e-c
hec
king
and
t
yp
e
reconstruction
problems
comes
of
course
from
programming
language
design,
esp
ecially
related
to
the
language
ML,
see
[
,

].
But
there
w
ere
earlier
results
concerning
this
problem,
due
to
Curry
,
Morris
and
Hindley
.
See
[
,
pp.
{],
for
historical
notes.
If
w
e
lo
ok
at
the
t
yp
e
reconstruction
problem
from
the
p
oin
t
of
view
of
the
Curry-Ho
w
ard
isomorphism,
it
b
ecomes
a
problem
of
determining
whether
a
giv
en
\pro
of
sk
eleton"
can
b
e
actually
turned
in
to
a
correct
pro
of
b
y
inserting
the
missing
form
ulas.
It
ma
y
b
e
surprising
that
this
kind
of
questions
are
sometimes
motiv
ated
b
y
pro
of-theoretic
researc
h.
As
noted
	

	0
Chapter
.
T
yp
e-c
hec
king
and
related
problems
in
[
,
pp.
0{0],
the
main
ideas
of
a
t
yp
e-reconstruction
algorithm
can
b
e
traced
as
far
as
the
0's.

See
[
],
for
a
fresh
w
ork,
where
the
\sk
eleton
instan
tiation"
problem
is
discussed,
without
an
y
relation
to
t
yp
es.
F
or
the
t
yp
e
inhabitation
problem,
the
Curry-Ho
w
ard
isomorphism
giv
es
an
immediate
translation
in
to
the
language
of
logic:
.0..
Pr
oposition.
The
typ
e
inhabitation
pr
oblem
for
the
simply-typ
e
d
lamb
da
c
alculus
is
r
e
cursively
e
quivalent
to
the
validity
pr
oblem
in
the
im-
plic
ational
fr
agment
of
intuitionistic
pr
op
ositional
lo
gic.
Pr
oof.
Ob
vious.
u
t
The
ab
o
v
e
prop
osition
remains
true
for
other
t
yp
ed
languages,
for
whic
h
the
Curry-Ho
w
ard
isomorphism
mak
es
sense.
F
rom
a
programmer's
p
oin
t
of
view,
the
t
yp
e
inhabitation
problem
can
b
e
seen
as
follo
ws:
An
empt
y
t
yp
e
(a
t
yp
e
whic
h
cannot
b
e
assigned
to
an
y
term)
means
a
sp
ecication
that
cannot
b
e
fullled
b
y
an
y
program
phrase.
Solving
t
yp
e
inhabitation
means
(in
the
con
texts
of
mo
dular
programming)
the
abilit
y
to
rule
out
suc
h
sp
ecications
at
compile
time.
..
Hard
and
complete
This
short
section
is
to
recall
a
few
basic
notions
from
complexit
y
theory
.
The
reader
is
referred
to
standard
textb
o
oks,
lik
e
[
],
for
a
more
compre-
hensiv
e
discussion.
...
Definition.
The
notation
LOGSP
A
CE,
PSP
A
CE
and
P
,
refers
re-
sp
ectiv
ely
to
the
classes
of
languages
(decision
problems)
solv
able
b
y
de-
terministic
T
uring
Mac
hines
in
logarithmic
space,
p
olynomial
space,
and
p
olynomial
time
(measured
w.r.t.
the
input
size).
...
Definition.
W
e
sa
y
that
a
language
L

is
r
e
ducible
to
a
language
L

in
lo
garithmic
sp
ac
e
(or
LOGSP
A
CE-r
e
ducible
)
i
there
is
a
T
uring
Mac
hine,
that
w
orks
in
logarithmic
space
(w
e
coun
t
only
the
w
ork
tap
es,
not
the
input
or
output
tap
es)
and
computes
a
total
function
f
,
suc
h
that
w

L

i
f
(w
)

L

;
for
all
inputs
w
.
Tw
o
languages
are
LOGSP
A
CE-e
quivalent
i
there
are
LOGSP
A
CE-reductions
eac
h
w
a
y
.
That
is,
to
decide
if
w

L

one
can
ask
if
f
(w
)

L

,
and
the
cost
of
the
translation
is
only
shipping
and
handling.
Note
that
a
logarithmic
space
reduction
tak
es
at
most
p
olynomial
time,
so
this
notion
is
sligh
tly
more
general
than
that
of
a
p
olynomial
time
reduction.

The
go
o
d
old
P
olish
sc
ho
ol
again
:
:
:

..
The

v
arian
ts
	
...
Definition.
W
e
sa
y
that
a
language
L
is
har
d
for
a
complexit
y
class
C
,
i
ev
ery
language
L
0

C
is
reducible
to
L
in
logarithmic
space.
If
w
e
ha
v
e
L

C
in
addition,
then
w
e
sa
y
that
L
is
c
omplete
in
the
class
C
,
or
simply
C
-c
omplete
.
..
The

v
arian
ts
The
t
yp
e
reconstruction
problem
is
often
abbreviated
b
y
\?
`
M
:
?",
and
the
t
yp
e
inhabitation
problem
is
written
as
\
`
M
:
?".
This
notation
nat-
urally
suggests
other
related
problems,
as
one
can
c
ho
ose
to
replace
v
arious
parts
of
our
ternary
predicate
b
y
question
marks,
and
c
ho
ose
the
con
text
to
b
e
empt
y
or
not.
A
little
com
binatorics
sho
ws
that
w
e
ha
v
e
actually

problems.
Out
of
these

problems,
four
are
completely
trivial,
since
the
answ
er
is
alw
a
ys
\y
es":

?
`
?
:
?;

 `
?
:
?;

`
?
:
?;

?
`
?
:

.
Th
us
w
e
end
up
with
eigh
t
non-trivial
problems,
as
follo
ws:
)
 `
M
:

(t
yp
e
c
hec
king);
)
`
M
:

(t
yp
e
c
hec
king
for
closed
terms);
)
?
`
M
:

(t
yp
e
c
hec
king
without
con
text);
)
?
`
M
:
?
(t
yp
e
reconstruction);
)
`
M
:
?
(t
yp
e
reconstruction
for
closed
terms);
)
 `
M
:
?
(t
yp
e
reconstruction
in
a
con
text);
)
`
?
:

(inhabitation);
)
 `
?
:

(inhabitation
in
a
con
text).
Most
of
these
problems
can
easily
b
e
sho
wn
LOGSP
A
CE-equiv
alen
t
to
one
of
our
three
main
problems:
(),
()
or
().
Some
of
these
LOGSP
A
CE
reductions
are
just
inclusions.
Indeed,
problem
()
is
a
sp
ecial
case
of
()
and
of
(),
problem
()
is
a
sp
ecial
case
of
()
and
(),
and
problem
()
is
a
sp
ecial
case
of
().
Others
are
the
sub
ject
of
Exercises
..
and
...
An
exception
is
problem
().
Problems
(),
()
and
(){()
reduce
to
()
in
logarithmic
space,
but
w
e
do
not
kno
w
of
an
y
simple
LOGSP
A
CE
reduction

	
Chapter
.
T
yp
e-c
hec
king
and
related
problems
the
other
w
a
y
.

Ho
w
ev
er,
suc
h
reductions
exists
b
et
w
een
all
problems
(){
(),
b
ecause
all
they
turn
out
to
b
e
P-complete.
Let
us
mak
e
one
more
remark
here:
On
a
rst
lo
ok
it
migh
t
seem
that
determining
whether
a
giv
en
term
has
a
giv
en
t
yp
e
in
a
giv
en
en
vironmen
t
could
b
e
easier
than
determining
whether
it
has
an
y
t
yp
e
at
all.
This
impres-
sion
ho
w
ev
er
is
generally
wrong,
as
t
yp
e
reconstruction
is
easily
reducible
to
t
yp
e
c
hec
king,
see
Exercise
...
This
reduction
is
\generic",
i.e.,
it
w
orks
for
all
reasonable
t
yp
ed
calculi.
It
is
quite
unlik
ely
to
ha
v
e
a
reduction
from
()
or
()
to
an
y
of
(){(),
b
ecause
the
inhabitation
problems
are
PSP
A
CE-complete,
and
that
w
ould
imply
P
=
PSP
A
CE.
W
e
do
not
kno
w
ab
out
a
simple
reduction
the
other
w
a
y
.
..
(First-order)
unication
The
follo
wing
is
a
general
denition
of
(rst-order)
unication.
In
what
follo
ws
w
e
will
need
only
a
sp
ecial
case,
where
the
rst-order
signature
is
xed
to
consist
of
only
one
sym
b
ol:
the
binary
function
sym
b
ol
\!".
...
Definition.
.
A
rst-or
der
signatur
e
is
a
nite
family
of
function,
relation
and
con-
stan
t
sym
b
ols.
Eac
h
function
and
relation
sym
b
ol
comes
with
a
des-
ignated
non-zero
arit
y
.
(Constan
ts
are
sometimes
treated
as
zero-ary
functions.)
In
this
section
w
e
consider
only
algebr
aic
signatur
es
,
i.e.,
signatures
without
relation
sym
b
ols.
.
An
algebr
aic
term
o
v
er
a
signature
,
or
just
term
is
either
a
v
ariable
or
a
constan
t
in
,
or
an
expression
of
the
form
(f
t

:
:
:
t
n
),
where
f
is
an
n-ary
function
sym
b
ol,
and
t

;
:
:
:
;
t
n
are
algebraic
terms
o
v
er
.

W
e
usually
omit
outermost
paren
theses.
The
formal
denition
of
an
algebraic
term
in
v
olv
es
a
prex
application
of
function
sym
b
ols.
Of
course,
there
is
a
tradition
to
write
some
binary
func-
tion
sym
b
ols
in
the
inx
st
yle,
and
w
e
normally
do
it
this
w
a
y
.
Our
most
b
elo
v
ed
signature
is
one
that
has
the
(inx)
arro
w
as
the
only
sym
b
ol.
It
is
not
dicult
to
see
that
algebraic
terms
o
v
er
this
signature
can
b
e
iden
tied
with
simple
t
yp
es,
or
with
implicational
form
ulas
if
y
ou
prefer.
In
general,
algebraic
terms
o
v
er

can
b
e
iden
tied
with
nite
lab
elled
trees
satisfying
the
follo
wing
conditions:

Lea
v
es
are
lab
elled
b
y
v
ariables
and
constan
t
sym
b
ols;

A
solution
w
as
giv
en
b
y
Henning
Makholm,
see
Chapter
,
Exercise
...

Do
not
confuse
algebraic
terms
with
lam
b
da-terms.

..
(First-order)
unication
	

In
ternal
no
des
with
n
daugh
ters
are
lab
elled
b
y
n-ary
function
sym-
b
ols.
...
Definition.
.
An
e
quation
is
a
pair
of
terms,
written
\t
=
u".
A
system
of
e
quations
is
a
nite
set
of
equations.
V
ariables
o
ccurring
in
a
system
of
equations
are
called
unknowns
.
.
A
substitution
is
a
function
from
v
ariables
to
terms
whic
h
is
the
iden-
tit
y
almost
ev
erywhere.
Suc
h
a
function
S
is
extended
to
a
function
from
terms
to
terms
b
y
S
(f
t

:
:
:
t
n
)
=
f
S
(t

)



S
(t
n
)
and
S
(c)
=
c.

.
A
substitution
S
is
a
solution
of
an
equation
\t
=
u"
i
S
(t)
=
S
(u)
(meaning
that
S
(t)
and
S
(u)
is
the
same
term).
It
is
a
solution
of
a
system
E
of
equations
i
it
is
a
solution
of
all
equations
in
E
.
Th
us,
for
instance,
the
equation
f
(g
xy
)x
=
f
z
(f
y
y
)
has
a
solution
S
with
S
(x)
=
f
y
y
,
S
(y
)
=
y
and
S
(z
)
=
g
(f
y
y
)y
(and
man
y
other
solutions
to
o),
while
the
equation
f
(g
xy
)c
=
f
z
(f
y
y
),
where
c
is
a
constan
t,
has
no
solution.
This
is
b
ecause
no
substitution
can
turn
f
y
y
in
to
c.
Another
example
with
no
solution
is
f
(g
xy
)x
=
f
x(f
y
y
),
but
this
time
the
reason
is
dieren
t:
if
S
w
ere
a
solution
then
S
(x)
w
ould
b
e
a
prop
er
subterm
of
itself.
The
problem
of
determining
whether
a
giv
en
system
of
equations
has
a
solution
is
called
the
unic
ation
pr
oblem
.
It
is
not
dicult
to
see
that
there
is
no
loss
of
generalit
y
in
considering
single
equations
rather
than
systems
of
equations
(Exercise
..).
The
unication
algorithm
(w
e
sa
y
\the",
b
ecause
all
these
algorithms
are
actually
based
on
similar
ideas,
and
dier
only
in
details)
is
due
to
J.A.
Robinson
[	
],
and
w
as
motiv
ated
b
y
the
rst-order
resolution
rule.
But,
as
p
oin
ted
out
b
y
Hindley
[
,
pp.
{],
there
w
ere
also
earlier
w
orks.
Discussions
of
unication
algorithms
can
b
e
found
in
v
arious
textb
o
oks,
for
instance
in
[
].
W
e
c
ho
ose
to
sk
etc
h
a
v
ersion
of
the
algorithm
that
is
\algebraic"
in
st
yle.
F
or
this,
w
e
need
the
folllo
wing
denition.
...
Definition.
.
A
system
of
equations
is
in
a
solve
d
form
i
it
has
the
follo
wing
prop-
erties:

All
equations
are
of
the
form
\x
=
t",
where
x
is
a
v
ariable;

A
v
ariable
that
o
ccurs
at
a
left-hand
side
of
an
equation
do
es
not
o
ccur
at
the
righ
t-hand
side
of
an
y
equation;

A
v
ariable
ma
y
o
ccur
in
only
one
left-hand
side.

Th
us,
a
substitution
is
a
v
aluation
in
the
algebra
of
all
terms
o
v
er
.

	
Chapter
.
T
yp
e-c
hec
king
and
related
problems
A
v
ariable
not
o
ccurring
as
a
left-hand
side
of
an
y
equation
is
called
undene
d
.
.
A
system
of
equations
is
inc
onsistent
i
it
con
tains
an
equation
of
either
of
the
forms:

\g
u

:
:
:
u
p
=
f
t

:
:
:
t
q
",
where
f
and
g
are
t
w
o
dieren
t
function
sym
b
ols;

\c
=
f
t

:
:
:
t
q
",
or
\f
t

:
:
:
t
q
=
c",
where
c
is
a
constan
t
sym
b
ol
and
f
is
an
n-ary
function
sym
b
ol;

\c
=
d",
where
c
and
d
are
t
w
o
dieren
t
constan
t
sym
b
ols;

\x
=
f
t

:
:
:
t
q
",
where
x
is
a
v
ariable,
f
is
an
n-ary
function
sym
b
ol,
and
x
o
ccurs
in
one
of
t

;
:
:
:
;
t
q
.
.
Tw
o
systems
of
equations
are
e
quivalent
i
they
ha
v
e
the
same
solu-
tions.
It
is
easy
to
see
that
an
inconsisten
t
system
has
no
solutions
and
that
a
solv
ed
system
E
has
a
solution
S
0
dened
as
follo
ws:

If
a
v
ariable
x
is
undened
then
S
0
(x)
=
x;

If
\x
=
t"
is
in
E
,
then
S
0
(x)
=
t.
The
core
of
Robinson's
algorithm
can
b
e
seen
as
follo
ws:
...
Lemma.
F
or
every
system
E
of
e
quations,
ther
e
is
an
e
quivalent
sys-
tem
E
0
which
is
either
inc
onsistent
or
in
a
solve
d
form.
In
addition,
the
system
E
0
c
an
b
e
obtaine
d
by
p
erforming
a
nite
numb
er
of
the
fol
lowing
op
er
ations:
a)
R
eplac
e
\x
=
t"
and
\x
=
s"
(wher
e
t
is
not
a
variable)
by
\x
=
t"
and
\t
=
s";
b)
R
eplac
e
\t
=
x"
by
\x
=
t";
c)
R
eplac
e
\f
t

:
:
:
t
n
=
f
u

:
:
:
u
n
"
by
\t

=
u

",
:
:
:
,
\t
n
=
u
n
";
d)
R
eplac
e
\x
=
t"
and
\r
=
s"
by
\x
=
t"
and
\r
[x
:=
t]
=
s[x
:=
t]";
e)
R
emove
an
e
quation
of
the
form
\t
=
t".
Pr
oof.
As
long
as
our
system
is
not
solv
ed,
and
not
inconsisten
t,
w
e
can
alw
a
ys
apply
one
of
the
op
erations
(a){(d).
W
e
lea
v
e
it
as
Exercise
..
to
sho
w
that
this
pro
cess
terminates
(unless
(b)
or
(d)
is
used
in
a
silly
w
a
y).
u
t

..
T
yp
e
reconstruction
algorithm
	
...
Cor
ollar
y.
The
unic
ation
pr
oblem
is
de
cidable.
u
t
In
fact,
the
ab
o
v
e
algorithm
can
b
e
optimized
to
w
ork
in
p
olynomial
time
(Exercise
..0),
pro
vided
w
e
only
need
to
c
hec
k
whether
a
solution
exists,
and
w
e
do
not
need
to
write
it
down
explicitly
,
cf.
Exercise
...
The
follo
wing
result
is
from
Dw
ork
et
al
[
].
...
Theorem.
The
unic
ation
pr
oblem
is
P-c
omplete
with
r
esp
e
ct
to
L
o
g-
sp
ac
e
r
e
ductions.
u
t
Supp
ose
that
w
e
ha
v
e
a
system
of
equations
E
,
whic
h
is
transformed
to
an
equiv
alen
t
solv
ed
system
E
0
.
The
solution
S
0
of
E
0
dened
as
ab
o
v
e,
is
a
most
general
solution
of
E
0
and
E
,
b
ecause
ev
ery
other
solution
m
ust
b
e
a
sp
ecialization
of
S
0
.
F
ormally
w
e
ha
v
e
the
follo
wing
denition.
...
Definition.

If
P
and
R
are
substitutions
then
P

R
is
a
substitution
dened
b
y
(P

R
)(x)
=
P
(R
(x)).

W
e
sa
y
that
a
substitution
S
is
an
instanc
e
of
another
substitution
R
(written
R

S
)
i
S
=
P

R
,
for
some
substitution
P
.

A
solution
R
of
a
system
E
is
princip
al
i
the
follo
wing
equiv
alence
holds
for
all
substitutions
S
:
S
is
a
solution
of
E
i
R

S:
...
Pr
oposition.
If
a
system
of
e
quations
has
a
solution
then
it
has
a
princip
al
one.
Pr
oof.
F
or
a
giv
en
system
of
equations
E
,
let
E
0
b
e
an
equiv
alen
t
system
in
a
solv
ed
form,
and
let
S
0
b
e
as
describ
ed
ab
o
v
e.
Then
S
0
is
a
principal
solution
of
E
.
u
t
..
T
yp
e
reconstruction
algorithm
W
e
no
w
sho
w
ho
w
t
yp
e-reconstruction
can
b
e
reduced
to
unication.
This
is
a
LOGSP
A
CE-reduction,
and
it
can
easily
b
e
mo
died
to
w
ork
for
all
the
problems
(){()
of
Section
..
Since
there
is
also
a
LOGSP
A
CE-reduction
the
other
w
a
y
,
the
main
result
of
this
section
ma
y
b
e
stated
as:
...
Theorem.
T
yp
e-r
e
c
onstruction
in
simply-typ
e
d
lamb
da
c
alculus
is
P-
c
omplete.

	
Chapter
.
T
yp
e-c
hec
king
and
related
problems
The
rst
w
ork
where
this
result
w
as
explicitly
stated
w
as
probably
the
M.Sc.
Thesis
of
Jurek
T
yszkiewicz
[0
].
Our
pro
of
of
the
theorem
consists
of
t
w
o
reductions.
The
rst
one
is
from
t
yp
e-reconstruction
to
unication.
Let
M
b
e
a
lam
b
da-term.
Cho
ose
a
represen
tativ
e
of
M
so
that
no
b
ound
v
ariable
o
ccurs
free
in
M
and
no
b
ound
v
ariable
is
b
ound
t
wice.
In
what
follo
ws
w
e
w
ork
with
this
represen
tativ
e
rather
than
with
M
as
an
equiv
alence
class.
By
induction
on
the
construction
of
M
,
w
e
dene:

a
system
of
equations
E
M
(o
v
er
the
signature
consisting
only
of
the
binary
function
sym
b
ol
!);

a
t
yp
e

M
.
Of
course,
the
idea
is
as
follo
ws:
E
M
will
ha
v
e
a
solution
i
M
is
t
ypable,
and

M
is
(informally)
a
pattern
of
a
t
yp
e
for
M
.
...
Definition.

If
M
is
a
v
ariable
x,
then
E
M
=
fg
and

M
=

x
,
where

x
is
a
fresh
t
yp
e
v
ariable.

If
M
is
an
application
P
Q
then

M
=
,
where

is
a
fresh
t
yp
e
v
ariable,
and
E
M
=
E
P
[
E
Q
[
f
P
=

Q
!
g.

If
M
is
an
abstraction
x:P
,
then
E
M
=
E
P
and

M
=

x
!

P
.
It
is
not
dicult
to
see
that
the
ab
o
v
e
construction
can
b
e
done
in
logarith-
mic
space.
The
main
prop
ert
y
of
our
translation
is
as
follo
ws.
...
Lemma.
.
If
 `
M
:
,
then
ther
e
exists
a
solution
S
of
E
M
,
such
that

=
S
(
M
)
and
S
(
x
)
=
 (x),
for
al
l
variables
x

F
V
(M
).
.
L
et
S
b
e
a
solution
of
E
M
,
and
let
 b
e
such
that
 (x)
=
S
(
x
),
for
al
l
x

F
V
(M
).
Then
 `
M
:
S
(
M
).
Pr
oof.
Induction
with
resp
ect
to
M
.
u
t
It
follo
ws
that
M
is
t
ypable
i
E
M
has
a
solution.
But
E
M
has
then
a
principal
solution,
and
this
has
the
folllo
wing
consequence.
(Here,
S
( )
is
a
con
text
suc
h
that
S
( )(x)
=
S
( (x)).)
...
Definition.
A
pair
( ;

),
consisting
of
a
con
text
(suc
h
that
the
do-
main
of
 is
F
V
(M
))
and
a
t
yp
e,
is
called
the
princip
al
p
air
for
a
term
M
i
the
follo
wing
holds:

..
Eta-reductions
	

 `
M
:

;

If
 0
`
M
:

0
then
 0

S
( )
and

0
=
S
(
),
for
some
substitution
S
.
(Note
that
the
rst
condition
implies
S
( )
`
M
:
S
(
),
for
all
S
.)
If
M
is
closed
(in
whic
h
case
 is
empt
y),
w
e
sa
y
that

is
the
princip
al
typ
e
of
M
.
...
Cor
ollar
y.
If
a
term
M
is
typ
able,
then
ther
e
exists
a
princip
al
p
air
for
M
.
This
princip
al
p
air
is
unique
up
to
r
enaming
of
typ
e
variables.
Pr
oof.
Immediate
from
Prop
osition
...
u
t
...
Example.

The
principal
t
yp
e
of
S
is
(
!

!

)
!
(
!

)
!

!

.
The
t
yp
e
(
!

!
)
!
(
!

)
!

!

can
also
b
e
assigned
to
S,
but
it
is
not
principal.

The
principal
t
yp
e
of
all
the
Ch
urc
h
n
umerals
is
(
!
)
!

!
.
But
the
t
yp
e
((
!

)
!

!

)
!
(
!

)
!

!

can
also
b
e
assigned
to
eac
h
n
umeral.
T
o
complete
the
pro
of
of
Theorem
..,
w
e
should
also
giv
e
the
other
re-
duction.
W
e
only
giv
e
a
brief
hin
t
of
ho
w
this
should
b
e
done.
First
w
e
reduce
the
general
case
of
unication
to
our
sp
ecial
arro
w-only
case
(Exer-
cise
..)
and
one
equation
only
(Exercise
..).
Then,
for
a
giv
en
equation
\
=

",
w
e
consider
the
term
xy
:x(y
t

)(y
t

),
where
x;
y
are
new
v
ariables
and
terms
t

and
t

are
as
in
Exercise
...
..
Eta-reductions
W
e
cannot
hide
this
from
the
reader
an
y
more|w
e
nally
ha
v
e
to
con-
fess
that
other
notions
of
reduction
than
b
eta-reduction
are
considered
in
lam
b
da-calculi.
In
particular,
w
e
ha
v
e
eta-r
e
duction
,
based
on
the
follo
wing
principle:
x:M
x
!

M
;
whenev
er
x

F
V
(M
):
F
ormally
,
w
e
ha
v
e
the
follo
wing
denition:
...
Definition.
W
e
dene
the
relation
!

as
the
least
relation
satisfying

If
x

F
V
(M
)
then
x:M
x
!

M
;

If
P
!

P
0
then
x:P
!

x:P
0
;

If
P
!

P
0
then
P
Q
!

P
0
Q
and
QP
!

QP
0
.
The
notation
!
!

and
=

has
the
exp
ected
meaning.
W
e
also
use
the
sym
b
ols
!


,
!
!


,
=


to
refer
to
reductions
com
bining

-
and

-reductions.

	
Chapter
.
T
yp
e-c
hec
king
and
related
problems
The
motiv
ation
for
this
notion
of
reduction
(and
equalit
y)
is
as
follo
ws:
Tw
o
functions
should
b
e
considered
equal
if
and
only
if
they
return
equal
results
for
equal
argumen
ts.
Indeed,
w
e
ha
v
e
...
Pr
oposition.
L
et
=
ext
b
e
the
le
ast
e
quivalenc
e
r
elation
such
that:

If
M
=

N
then
M
=
ext
N
;

If
M
x
=
ext
N
x,
and
x

F
V
(M
)
[
F
V
(M
)
then
M
=
ext
N
;

If
P
=
ext
P
0
then
P
Q
=
ext
P
0
Q
and
QP
=
ext
QP
0
.
Then
=
ext
is
identic
al
to
=


.
Pr
oof.
Exercise
...
Note
that
the
ab
o
v
e
denition
do
es
not
con
tain
the
condition
\If
P
=
ext
P
0
then
x:P
=
ext
x:P
0
".
This
is
not
a
mistak
e,
b
ecause
this
prop
ert
y
(called
\rule

")
follo
ws
from
the
others.
u
t
W
e
do
not
tak
e
!

as
our
standard
notion
of
reduction,
b
ecause
w
e
do
not
w
an
t
our
calculus
of
functions
to
b
e
extensional.
After
all,
w
e
w
an
t
to
b
e
able
to
distinguish
b
et
w
een
t
w
o
algorithms,
ev
en
if
their
input-output
b
eha
viour
is
the
same.
The
notions
of
eta-
and
b
eta-eta-reduction
and
equalit
y
ha
v
e
most
of
the
go
o
d
prop
erties
of
b
eta-reduction
and
equalit
y
.
In
particular,
the
Ch
urc
h-
Rosser
theorem
remains
true,
leftmost
reductions
are
normalizing,

and
on
the
t
yp
ed
lev
el
w
e
still
ha
v
e
b
oth
sub
ject
reduction
and
strong
normalization
prop
erties.
(Note
that
strong
normalization
for
eta
alone
is
immediate,
as
eac
h
eta-reduction
step
reduces
the
length
of
a
term.)
Of
course,
eta-
reduction
mak
es
sense
also
for
the
Ch
urc
h-st
yle
t
yp
ed
terms.
...
Definition.
W
e
no
w
dene
the
notion
of
a
Ch
urc
h-st
yle
term
in
an

-long
normal
form
(or
just
long
normal
form
).
Recall
that
w
e
write
M

as
an
informal
w
a
y
of
sa
ying
that
the
Ch
urc
h-st
yle
term
M
has
t
yp
e

in
some
xed
con
text.
The
denition
is
b
y
induction:

If
x
is
a
v
ariable
of
t
yp
e


!



!

n
!
,
and
M



;
:
:
:
;
M

n
n
are
in

-long
normal
form,
then
(xM

:
:
:
M
n
)

is
in

-long
normal
form.

If
M

is
in

-long
normal
form
then
(x
:

:M
)

!
is
in

-long
normal
form.
Th
us
a
term
in
a
long
normal
form
is
a
term
in
normal
form
where
all
function
v
ariables
are
\fully
applied"
to
argumen
ts.
...
Lemma.
F
or
every
Chur
ch-style
term
M

in
b
eta
normal
form
ther
e
exists
a
term
M


in

-long
normal
form,
such
that
M


!
!

M
.
Pr
oof.
Easy
.
u
t

But
the
pro
of
is
somewhat
more
in
v
olv
ed
than
for
b
eta-reduction.

..
T
yp
e
inhabitation
		
..
T
yp
e
inhabitation
In
this
section
w
e
pro
v
e
a
result
of
Statman
[0
],
that
the
inhabitation
problem
for
the
nitely-t
yp
ed
lam
b
da
calculus
is
PSP
A
CE-complete.
In
particular
it
is
decidable.
An
immediate
consequence
is
that
pro
v
abilit
y
in
IPC(!)
is
also
decidable
and
PSP
A
CE-complete.
The
decidabilit
y
w
as
already
kno
wn
to
to
Gen
tzen
in
	,
and
w
e
will
discuss
his
(syn
tactic)
pro
of
in
the
next
c
hapter.
There
are
also
seman
tic
metho
ds
based
on
the
existence
of
nite
mo
dels.
First
observ
e
that
a
t
yp
e
is
inhabited
if
and
only
if
there
exists
a
closed
Ch
urc
h-st
yle
term
of
that
t
yp
e.
Th
us
it
suces
to
consider
Ch
urc
h-st
yle
terms.
First
w
e
pro
v
e
that
our
problem
is
in
PSP
A
CE.
...
Lemma.
Ther
e
is
an
alternating
p
olynomial
time
algorithm
(and
thus
also
a
deterministic
p
olynomial
sp
ac
e
algorithm)
to
determine
whether
a
given
typ
e

is
inhabite
d
in
a
given
c
ontext
 .
Pr
oof.
If
a
t
yp
e
is
inhabited
then,
b
y
Lemma
..,
it
is
inhabited
b
y
a
term
in
a
long
normal
form.
T
o
determine
whether
there
exists
a
term
M
in
a
long
normal
form,
satisfying
 `
M
:

,
w
e
pro
ceed
as
follo
ws:

If

=


!


,
then
M
m
ust
b
e
an
abstraction,
M
=
x:

:M
0
.
Th
us,
w
e
lo
ok
for
an
M
0
satisfying
 ;
x:

`
M
0
:


.

If

is
a
t
yp
e
v
ariable,
then
M
is
an
application
of
a
v
ariable
to
a
sequence
of
terms.
W
e
nondeterministically
c
ho
ose
a
v
ariable
z
,
de-
clared
in
 to
b
e
of
t
yp
e


!



!

n
!

.
(If
there
is
no
suc
h
v
ariable,
w
e
reject.)
If
n
=
0
then
w
e
accept.
If
n
>
0,
w
e
answ
er
in
parallel
the
questions
if

i
are
inhabited
in
 .
This
alternating
(or
recursiv
e)
pro
cedure
is
rep
eated
as
long
as
there
are
new
questions
of
the
form
 `
?
:

.
Note
that
if
there
are
t
w
o
v
ariables
in
 ,
sa
y
x
and
y
,
declared
to
b
e
of
the
same
t
yp
e

,
then
eac
h
term
M
can
b
e
replaced
with
M
[x=y
]
with
no
c
hange
of
t
yp
e.
This
means
that
a
t
yp
e

is
inhabited
in
 i
it
is
inhabited
in
  fy
:

g,
and
it
suces
to
consider
con
texts
with
all
declared
t
yp
es
b
eing
dieren
t.
A
t
eac
h
step
of
our
pro
cedure,
the
con
text
 either
sta
ys
the
same
or
it
expands.
Th
us
the
n
um
b
er
of
steps
(depth
of
recursion)
do
es
not
exceed
the
squared
n
um
b
er
of
subform
ulas
of
t
yp
es
in
 ;

,
where
 `
?
:

is
the
initially
p
osed
question.
u
t
T
o
sho
w
PSP
A
CE-hardness,
w
e
dene
a
reduction
from
the
satisabilit
y
problem
for
classical
second-order
prop
ositional
form
ulas
(QBF).
W
e
refer
the
reader
to
[
]
for
details
ab
out
this
problem.
(But
do
not
use
the
P
olish
translation.)

00
Chapter
.
T
yp
e-c
hec
king
and
related
problems
Assume
that
a
second-order
prop
ositional
form
ula

is
giv
en.
Without
loss
of
generalit
y
w
e
ma
y
assume
that
the
negation
sym
b
ol
:
do
es
not
o
ccur
in
,
except
in
the
con
text
:p,
where
p
is
a
prop
ositional
v
ariable.
Assume
that
all
b
ound
v
ariables
of

are
dieren
t
and
that
no
v
ariable
o
ccurs
b
oth
free
and
b
ound.
F
or
eac
h
prop
ositional
v
ariable
p,
o
ccurring
in

(free
or
b
ound),
let

p
and

:p
b
e
fresh
t
yp
e
v
ariables.
Also,
for
eac
h
subform
ula
'
of
,
let

'
b
e
a
fresh
t
yp
e
v
ariable.
W
e
construct
a
basis
 
from
the
follo
wing
t
yp
es:

(
p
!

 
)
!
(
:p
!

 
)
!

'
,
for
eac
h
subform
ula
'
of
the
form
p 
;

(
p
!

 
)
!

'
and
(
:p
!

 
)
!

'
,
for
eac
h
subform
ula
'
of
the
form
	p 
;


 
!

#
!

'
,
for
eac
h
subform
ula
'
of
the
form
 
^
#;


 
!

'
and

#
!

'
,
for
eac
h
subform
ula
'
of
the
form
 
_
#.
If
v
is
a
zero-one
v
aluation
of
prop
ositional
v
ariables,
then
 v
is
 extended
with
the
t
yp
e
v
ariables


p
,
when
v
(p)
=
;


:p
,
when
v
(p)
=
0.
The
follo
wing
lemma
is
pro
v
en
b
y
a
routine
induction
w.r.t.
the
length
of
form
ulas.
Details
are
left
to
the
reader.
...
Lemma.
F
or
every
subformula
'
of
,
and
every
valuation
v
,
dene
d
on
the
fr
e
e
variables
of
',
the
typ
e

'
is
inhabite
d
in
 v
i
v
(')
=
.
Pr
oof.
Exercise
...
u
t
F
rom
Lemma
..
w
e
obtain
PSP
A
CE-hardness,
since
the
reduction
can
b
e
p
erformed
in
logarithmic
space.
This,
together
with
Lemma
..
implies
the
main
result
of
this
section.
...
Theorem.
The
inhabitation
pr
oblem
for
simply-typ
e
d
lamb
da-c
alculus
is
c
omplete
for
p
olynomial
sp
ac
e.
u
t

..
Equalit
y
of
t
yp
ed
terms
0
..
Equalit
y
of
t
yp
ed
terms
As
w
e
ha
v
e
already
observ
ed,
to
v
erify
whether
t
w
o
t
ypable
lam
b
da-terms
are
b
eta-equal
or
not,
it
suces
to
reduce
them
to
normal
form.
One
thing
that
often
is
o
v
erlo
ok
ed
here
is
that
the
complexit
y
of
this
decision
pro
cedure
dep
ends
on
the
size
of
particular
t
yp
e
deriv
ations
(or
Ch
urc
h-st
yle
terms)
and
not
directly
on
the
size
of
the
pure
lam
b
da-terms
to
b
e
v
eried.
In
the
case
of
simply-t
yp
ed
lam
b
da
calculus,
the
cost
of
t
yp
e-reconstruction
is
is
a
minor
fraction
of
the
total
cost,
ev
en
if
w
e
insist
on
the
p
ossibly
exp
onen
tial
t
yp
es
to
b
e
written
do
wn.
Indeed,
w
e
ha
v
e
the
follo
wing
theorem
of
Statman:
...
Theorem
(R.
Statman).
The
pr
oblem
to
de
cide
whether
two
given
Chur
ch-style
terms
M
and
N
of
a
given
typ
e

ar
e
b
eta-e
qual
is
of
non-
elementary
c
omplexity.
That
is,
for
e
ach
r
,
the
de
cision
pr
o
c
e
dur
e
takes
mor
e
than
exp
r
(n)
steps
on
inputs
of
size
n.
(R
e
c
al
l
that
exp
0
(n)
=
n
and
exp
k
+
(n)
=

exp
k
(n)
:)
The
simplest
kno
wn
pro
of
of
this
result
is
b
y
H.
Mairson
[
].
This
pro
of,
lik
e
the
original
pro
of
of
Statman,
uses
v
alidit
y
for
a
simple
higher-order
logic
as
an
in
termediate
step.
It
migh
t
b
e
in
teresting
to
ha
v
e
a
direct
co
ding
of
T
uring
Mac
hines
in
to
lam
b
da-terms.
..
Exercises
...
Exer
cise.
Sho
w
that:
a)
problem
()
reduces
to
problem
();
b)
problem
()
reduces
to
problem
();
c)
problem
()
reduces
to
problem
();
d)
problem
()
reduces
to
problem
()
in
logarithmic
space.
...
Exer
cise.
Assume
a
con
text
 consisting
of
t
yp
e
assumptions
of
the
form
(x

:
).
Dene
terms
t

suc
h
that
 `
t

:

holds
if
and
only
if

=

.
...
Exer
cise.
Sho
w
that
problem
()
reduces
to
problem
()
in
logarith-
mic
space.
Hint:
rst
do
Exercise
...
...
Exer
cise.
What's
wrong
with
the
follo
wing
reduction
of
problem
()
to
problem
()?
T
o
answ
er
?
`
M
:

ask
?
`
y
z
:y
(z
M
)(z
t

)
:
?.

0
Chapter
.
T
yp
e-c
hec
king
and
related
problems
...
Exer
cise.
Sho
w
that
for
ev
ery
system
of
equations
there
is
an
equiv-
alen
t
single
equation.
...
Exer
cise.
Sho
w
that
the
size
of
a
shortest
p
ossible
solution
of
a
giv
en
system
of
equations
ma
y
b
e
exp
onen
tial
in
the
size
of
that
system.
(Construct
systems
of
equations
of
size
O
(n),
suc
h
that
all
their
solutions
are
of
size
at
least
exp
onen
tial
in
n.)
Can
a
solution
b
e
alw
a
ys
r
epr
esente
d
in
p
olynomial
space?
...
Exer
cise.
Pro
v
e
that
the
general
form
of
the
unication
problem
reduces
in
logarithmic
space
to
unication
o
v
er
the
signature
consisting
only
of
an
arro
w.
...
Exer
cise.
Complete
the
pro
of
of
Lemma
...
..	.
Exer
cise.
Sho
w
examples
of
lo
ops
in
the
unication
algorithm
that
ma
y
b
e
caused
b
y
using
rule
(d)
in
a
silly
w
a
y
,
or
remo
ving
the
restriction
in
rule
(a)
that
t
is
not
a
v
ariable.
..0.
Exer
cise.
Design
a
p
olynomial
time
algorithm
to
decide
whether
a
giv
en
equation
has
a
solution.
...
Exer
cise.
Mo
dify
the
algorithm
of
Section
.
to
obtain
an
algo-
rithm
for
problem
().
...
Exer
cise.
Pro
v
e
the
follo
wing
c
onverse
princip
al
typ
e
the
or
em
:
If
'
is
a
non-empt
y
t
yp
e,
then
there
exists
a
closed
term
M
suc
h
that
'
is
the
principal
t
yp
e
of
M
.
Hint:
Use
the
tec
hnique
of
Exercise
...
(In
fact,
if
N
is
a
closed
term
of
t
yp
e

,
then
w
e
can
require
M
to
b
e
b
eta-reducible
to
N
.)
...
Exer
cise.
Sho
w
that
ev
ery
principal
pair
of
a
BCK-term
in
normal
form
has
the
follo
wing
prop
erties:

Eac
h
t
yp
e
v
ariable
o
ccurs
at
most
t
wice;

If
it
do
es,
then
one
o
ccurrence
is
p
ositiv
e
(to
the
left
of
an
ev
en
n
um
b
er
of
arro
ws)
and
the
other
negativ
e.
Also
sho
w
that
if
( ;

)
is
a
principal
pair
of
a
BCK-term
M
in
normal
form
then
M
is
an
erasure
of
a
Ch
urc
h
st
yle
term
in
long
normal
form
that
has
the
t
yp
e

in
 .
...
Exer
cise.
(S.
Hirok
a
w
a
[
])
Pro
v
e
that
for
a
giv
en
pair
( ;

),
there
is
at
most
one
BCK-term
M
in
normal
form
suc
h
that
( ;

)
is
its
principal
pair.

..
Exercises
0
...
Exer
cise.
Pro
v
e
Prop
osition
...
...
Exer
cise.
What
is
the
natural
deduction
coun
terpart
of
eta-reduction?
...
Exer
cise.
Sho
w
examples
of
t
yp
es
that
ha
v
e
exactly
n
normal
in-
habitan
ts,
for
an
y
n
um
b
er
n

N
[
f@
0
g.
...
Exer
cise.
Pro
v
e
Lemma
..
..	.
Exer
cise.
(C.-B.
Ben-Y
elles)
Sho
w
that
it
is
decidable
whether
a
t
yp
e
has
a
nite
or
an
innite
n
um
b
er
of
dieren
t
normal
inhabitan
ts.
..0.
Exer
cise.
Let
'
=


!



!

n
!

and
let

b
e
the
only
t
yp
e
v
ariable
o
ccurring
in
'.
Pro
v
e
(b
y
induction)
that
'
is
an
inhabited
t
yp
e
if
and
only
if
at
least
one
of
the

i
's
is
not
inhabited.
...
Exer
cise.
(R.
Statman)
Let
p
b
e
the
only
prop
ositional
v
ariable,
and
let
!
b
e
the
only
connectiv
e
o
ccurring
in
a
classical
prop
ositional
tautology
'.
Sho
w
that
'
is
in
tuition-
istically
v
alid.
Hint:
First
do
Exercise
..0.
...
Exer
cise.
(T.
Prucnal,
W.
Dekk
ers
[0
])
A
pro
of
rule
of
the
form


;
:
:
:
;

n

is
sound
for
IPC(!)
i
for
ev
ery
substitution
S
with
S
(

);
:
:
:
S
(
n
)
all
v
alid,
also
S
(
)
m
ust
b
e
v
alid.
Pro
v
e
that
if
suc
h
a
rule
is
sound
then
the
implication


!



!

n
!

is
v
alid.

0
Chapter
.
T
yp
e-c
hec
king
and
related
problems

CHAPTER

Sequen
t
calculus
W
e
ha
v
e
seen
t
w
o
dieren
t
formalisms
for
presen
ting
systems
of
formal
logic:
natural
deduction
and
Hilb
ert-st
yle.
Eac
h
of
these
has
its
adv
an
tages.
F
or
instance,
in
Hilb
ert-st
yle
pro
ofs,
there
are
no
problems
p
ertaining
to
the
managemen
t
of
assumptions,
whereas
in
natural
deduction,
the
pro
ofs
are
easier
to
disco
v
er,
informally
sp
eaking.
As
w
e
ha
v
e
seen
earlier,
b
oth
classical
and
in
tuitionistic
prop
ositional
calculus
are
decidable;
that
is,
there
is
an
algorithm
whic
h
decides,
for
an
y
',
whether
or
not
'
is
classically
v
alid
(according
to
the
truth
table
seman
tics),
and
similarly
,
there
is
an
algorithm
whic
h
decides,
for
an
y
',
whether
or
not
'
is
in
tuitionistically
v
alid
(according
to
the
Heyting
algebra
seman
tics
or
Kripk
e
mo
dels).
By
the
soundness
and
completeness
results,
this
result
means
that
there
are
algorithms
that
decide,
for
an
y
',
whether
or
not
'
is
pro
v
able
in
our
pro
of
systems
for
classical
and
in
tuitionistic
prop
ositional
calculus,
resp
ectiv
ely
.
This
result
suggests
that
w
e
should
b
e
able
to
dev
elop
decision
algorithms
that
do
not
mak
e
an
excursion
via
seman
tics;
that
is,
w
e
should
b
e
able
to
read
the
inference
rules
b
ottom-up
and
turn
this
reading
in
to
algorithms
that
decide
whether
form
ulas
ha
v
e
pro
ofs
in
the
systems.
An
y
one
who
has
tried
at
least
once
to
write
do
wn
an
actual
Hilb
ert-st
yle
pro
of
for
ev
en
a
simple
form
ula
will
understand
wh
y
this
approac
h
is
not
satisfactory
in
practice.
If
w
e
w
an
t
to
pro
v
e
a
form
ula
 
,
using
the
mo
dus
p
onens
rule
';
'
!
 
 
the
form
ula
'
has
to
b
e
someho
w
c
hosen
or
guessed.
And
there
is
no
b
ound
for
the
space
w
e
mak
e
this
c
hoice
from:
the
form
ula
'
can
b
e
anything
at
all.
An
y
approac
h
to
automatic
theorem
pro
ving
based
on
this
rule
seems
do
omed
to
failure.
The
same
problem
app
ears
in
natural
deduction
pro
ofs,
since
w
e
also
ha
v
e
the
mo
dus
p
onens
rule
there.
(In
addition,
w
e
ha
v
e
another
unpleasan
t
0

0
Chapter
.
Sequen
t
calculus
prop
ert
y
in
the
Hilb
ert-st
yle
system:
form
ulas
o
ccurring
in
pro
ofs
are
v
ery
long,
so
ev
en
if
w
e
kno
w
what
to
c
ho
ose,
suc
h
pro
ofs
are
still
incon
v
enien
t.)
In
this
c
hapter
w
e
in
tro
duce
a
third
kind
of
formalism,
kno
wn
as
se
quent
c
alculus,
for
presen
ting
systems
of
formal
logic.
Sequen
t
calculus
w
as
in
tro-
duced
in
the
	0's,
b
y
Gerhard
Gen
tzen
[	
],
who
also
in
tro
duced
natural
deduction.

Despite
similar
syn
tax,
sequen
t
calculus
and
natural
deduction
are
quite
dieren
t
and
serv
e
dieren
t
purp
oses.
While
natural
deduction
highligh
ts
the
most
fundamen
tal
prop
erties
of
connectiv
es
b
y
its
in
tro
duction
and
elim-
ination
rule
for
eac
h
connectiv
e,
sequen
t
calculus
is
more
\practically"
ori-
en
ted:
if
one
reads
the
rules
of
sequen
t
calculus
from
b
ottom
to
top,
the
rules
simplify
the
pro
cess
of
pro
of
construction.
Instead
of
in
tro
duction
and
elimi-
nation
rules,
there
are
only
in
tro
duction
rules.
Some
of
these
rules
in
tro
duce
connectiv
es
in
the
conclusion
parts
of
judgemen
ts|in
fact,
these
rules
are
iden
tical
to
the
in
tro
duction
rules
from
natural
deduction.
But
there
are
also
rules
in
tro
ducing
connectiv
es
in
the
assumption
parts
of
judgemen
ts.
These
rules
replace
the
elimination
rules
of
natural
deduction.
The
dev
elopmen
t
of
sequen
t
calculus
systems
has
b
een
successful
not
only
for
theoretical
purp
oses:
man
y
practical
approac
hes
to
automated
the-
orem
pro
ving
are
based
on
some
form
of
sequen
t
calculi
or
their
relativ
es.
In
particular,
the
r
esolution
rule
can
b
e
seen
as
suc
h
a
relativ
e.
..
Classical
sequen
t
calculus
Although
w
e
are
no
w
mostly
concerned
with
in
tuitionistic
pro
of
systems,
w
e
in
tro
duce
a
classical
v
ersion
of
sequen
t
calculus
rst.
In
tuitionistic
sequen
t
calculus
is
obtained
from
the
classical
one
b
y
a
restriction
whic
h
sheds
some
ligh
t
on
the
relationship
b
et
w
een
these
t
w
o
equally
fundamen
tal
logics.
As
men
tioned
b
elo
w,
man
y
v
ariations
on
the
denition
of
sequen
t
calcu-
lus
systems
are
p
ossible;
w
e
use
the
systems
studied
b
y
Pra
witz
[
,
App.
A],
since
these
minimize
the
noise
in
the
relationship
with
natural
deduction.
A
n
um
b
er
of
v
arian
ts
can
b
e
found
in,
e.g.,
[0	
]
and
[
].
...
Definition.
A
(classical)
se
quent
is
a
pair
of
sets
of
form
ulas,
written
 `
,
where
the
righ
t-hand
side
is
not
empt
y
.

A
pr
o
of
in
the
sequen
t
calculus
is
a
tree
lab
elled
with
sequen
ts
in
suc
h
a
w
a
y
that
mothers
and
daugh
ters
matc
h
the
pro
of
rules
b
elo
w.
W
e
write
 `
+
LC

i
 `

has
a
pro
of,
and
w
e
write
 `
LC

i
 `

has
a
pro
of
whic
h
do
es
not
use
the
rule
Cut
.

Stanis 
la
w
Ja

sk
o
wski
indep
enden
tly
in
tro
duced
natural
deduction
systems|see
Pra
witz'
b
o
ok
[
],
where
more
information
ab
out
the
origins
of
natural
deduction
and
sequen
t
calculus
systems
can
b
e
found.

Sequen
ts
with
empt
y
righ
t-hand
sides
are
p
ermitted
in
man
y
presen
tations.
The
meaning
of
an
empt
y
righ
t-hand
side
is
the
same
as
of
a
righ
t-hand
side
consisting
only
of
?,
so
our
restriction
is
not
essen
tial.

..
Classical
sequen
t
calculus
0
W
e
use
similar
con
v
en
tions
as
in
the
case
of
natural
deduction.
F
or
instance,
w
e
write
 ;

for
 [
,
and
'
for
f'g.
Axiom:
 ;
'
`
';

Rules:
 ;
'
`

 ;
'
^
 
`

(L^)
 ;
 
`

 ;
'
^
 
`

 `
';

 `
 
;

 `
'
^
 
;

(R^)
 ;
'
`

 ;
 
`

 ;
'
_
 
`

(L_)
 `
';

 `
'
_
 
;

(R_)
 `
 
;

 `
'
_
 
;

 `
';

 ;
 
`

 ;
'
!
 
`

[

(L!)
 ;
'
`
 
;

 `
'
!
 
;

(R!)
 ;
?
`

(L?)
 `
';

 ;
'
`

 `

[

(Cut
)
The
rule
(L?)
has
no
premise
and
ma
y
b
e
regarded
as
an
axiom.
The
remaining
rules,
except
the
cut
rule,
are
called
lo
gic
al
rules
since
they
dene
the
meaning
of
the
logical
connectiv
es
^,
_,
and
!.
The
logical
rules
consists
of
left
and
righ
t
in
tro
duction
rules
for
ev
ery
connectiv
e.
The
righ
t
rules
are
iden
tical
to
the
in
tro
duction
rules
from
natural
deduction;
the
left
rules
will
pla
y
the
role
of
the
elimination
rules
from
natural
deduction.
The
cut
rule
is
the
only
one
that
is
neither
a
left
nor
a
righ
t
rule.
The
form
ula
'
in
the
cut
rule
is
called
the
cut
form
ula.
One
can
recognize
a
similarit
y
b
et
w
een
cut
and
mo
dus
p
onens
.
The
in
tuitiv
e
meaning
of
 `

is
that
the
assumptions
in
 imply
one
of
the
conclusions
in
,
i.e.,
that
'

^
:
:
:
^
'
n
implies
 

_
:
:
:
_
 
m
,
where
 =
f'

;
:
:
:
;
'
n
g
and

=
f 

;
:
:
:
;
 
m
g.
The
rules
for
conjunction
and
disjunction
clearly
reect
this
idea.

0
Chapter
.
Sequen
t
calculus
...
Remark.
In
order
to
facilitate
comparison
with
natural
deduction
w
e
ha
v
e
tak
en
?
as
primitiv
e|as
w
e
ha
v
e
seen
earlier,
negation
can
then
b
e
dened
b
y
:'
=
'
!
?.
One
often
nds
in
the
literature
:
tak
en
as
primitiv
e
instead.
In
this
case,
the
rule
(L?)
is
replaced
b
y
the
t
w
o
rules
 `
;
'
 ;
:'
`

(L:)
 ;
'
`

 `
:';

(R:)
whic
h
are
deriv
ed
rules
in
the
ab
o
v
e
system.
...
W
arning.
In
man
y
presen
tations
of
sequen
t
calculus,
sequen
ts
are
pairs
of
se
quenc
es
(with
p
ossible
rep
etitions)
rather
than
sets.
In
suc
h
sys-
tems
one
m
ust
in
addition
to
the
axiom,
the
cut
rule,
and
the
logical
rules,
adopt
so-called
structur
al
rules,
namely
we
akening
rules
that
allo
w
addition
of
form
ulas
to
the
left
and
righ
t
of
`,
c
ontr
action
rules
that
allo
w
con
traction
of
t
w
o
iden
tical
form
ulas
in
to
one
on
the
left
and
righ
t
of
`,
and
exchange
rules
that
allo
w
c
hanging
the
order
of
t
w
o
consecutiv
e
form
ulas
on
the
left
or
on
the
righ
t
of
`.
In
this
case
one
tak
es
the
axiom
in
the
form
'
`
'.
Suc
h
a
system
o
ccurs,
e.g.,
in
[
].
One
ma
y
also
use
multi-sets
instead
of
sets
and
sequences.
In
this
case,
the
exc
hange
rules
are
not
needed.
...
Remark.
It
is
not
dicult
to
see
that
in
the
presence
of
w
eak
ening,
the
rules
(Cut
)
and
(L!)
could
as
w
ell
b
e
written
as
follo
ws:
 `
';

 ;
'
`

 `

(Cut
)
 `
';

 ;
 
`

 ;
'
!
 
`

(L
!)
W
e
prefer
the
other
presen
tation
of
these
rules
for
uniformit
y
with
the
in
tu-
itionistic
fragmen
t,
to
b
e
dened
in
the
next
section.
The
follo
wing
sho
ws
that
sequen
t
calculus
is
complete
with
resp
ect
to
the
ordinary
seman
tics
of
classical
logic.
...
Pr
oposition.
If

=
f'

;
:
:
:
'
n
g
then
we
have
 `
+
LC

if
and
only
if
the
entailment
 j
=
'

_



_
'
n
is
classic
al
ly
valid.

In
p
articular,
`
+
LC

i
'

_



_
'
n
is
a
classic
al
tautolo
gy.
The
pro
of
is
omitted.
Gen
tzen
[	
]
pro
v
ed
the
completeness
of
the
se-
quen
t
calculus
system
b
y
pro
ving
that
the
system
is
equiv
alen
t
to
another
logical
system.
F
or
the
purp
oses
of
that
pro
of,
the
cut
rule
is
v
ery
con
v
e-
nien
t.
Gen
tzen's
Hauptsatz
then
states
that
the
cut
rule
is
a
deriv
ed
rule,
and
hence
the
cut
rule
is
in
fact
not
necessary
for
completeness;
that
is,
ev
ery
application
of
the
cut
rule
can
b
e
eliminated
from
a
giv
en
pro
of.
This
results
is
also
kno
wn
as
the
Cut
Elimination
The
or
em.
W
e
shall
ha
v
e
more
to
sa
y
ab
out
this
result
in
the
con
text
of
in
tuitionistic
logic
b
elo
w.

That
is,
i
eac
h
v
aluation
satisfying
all
the
form
ulas
in
 m
ust
also
satisfy
'

_



_
'
n
.

..
In
tuitionistic
sequen
t
calculus
0	
...
Example.
Here
is
a
sequen
t
calculus
pro
of
of
P
eirce's
la
w:
(R
!)
(L
!
)
(R
!)
p
`
p;
q
`
p;
p
!
q
p
`
p
(p
!
q
)
!
p
`
p
`
((p
!
q
)
!
p)
!
p
Note
that
w
e
sometimes
ha
v
e
t
w
o
form
ulas
at
the
righ
t-hand
side.
...
Example.
And
here
is
another
example
that
uses
only
sequen
ts
with
one-elemen
t
righ
t-hand
sides:
(L
!)
p;
p
!
q
`
p
(L!)
p
`
p
p;
q
`
q
p;
p
!
q
`
q
p;
p
!
q
;
r
`
r
p;
p
!
q
;
q
!
r
`
r
(L
!)
(R
!)
p;
p
!
q
;
p
!
q
!
r
`
r
(R
!)
p
!
q
;
p
!
q
!
r
`
p
!
r
(R
!)
p
!
q
!
r
`
(p
!
q
)
!
p
!
r
`
(p
!
q
!
r
)
!
(p
!
q
)
!
p
!
r
..
In
tuitionistic
sequen
t
calculus
The
in
tuitionistic
sequen
t
calculus
is
obtained
from
the
classical
system
b
y
a
simple
syn
tactic
restriction.
W
e
just
require
that
only
one
form
ula
o
ccurs
at
the
righ
t-hand
side
of
a
sequen
t.
That
is,
the
ab
o
v
e
classical
rules
are
mo
died
so
that


has
alw
a
ys
exactly
one
elemen
t;


is
alw
a
ys
empt
y
.
...
Definition.
An
intuitionistic
se
quent
is
one
of
the
form
 `
',
where
'
is
a
single
form
ula.
W
e
write
 `
+
L
'
i
 `
'
has
a
sequen
t
calculus
pro
of
using
only
in
tuitionistic
sequen
ts,
i.e.,
using
only
the
b
elo
w
rules.
W
e
write
 `
L
'
if
there
is
suc
h
a
pro
of
that
do
es
not
use
the
rule
Cut
.

0
Chapter
.
Sequen
t
calculus
Axiom:
 ;
'
`
'
Rules:
 ;
'
`

 ;
'
^
 
`

(L^)
 ;
 
`

 ;
'
^
 
`

 `
'
 `
 
 `
'
^
 
(R^)
 ;
'
`

 ;
 
`

 ;
'
_
 
`

(L_)
 `
'
 `
'
_
 
(R_)
 `
 
 `
'
_
 
 `
'
 ;
 
`

 ;
'
!
 
`

(L!)
 ;
'
`
 
 `
'
!
 
(R!)
 ;
?
`

(L?)
 `
'
 ;
'
`

 `

(Cut
)
The
follo
wing
sho
ws
that
in
tuitionistic
natural
deduction
and
in
tuition-
istic
sequen
t
calculus
are
equiv
alen
t.
...
Pr
oposition.
 `
+
L
'
i
 `
N
'.
Pr
oof.
W
e
pro
v
e
eac
h
direction
b
y
induction
on
the
deriv
ation
of
the
se-
quen
t.
F
or
the
left-to-right
direction,
the
main
problem
is
ho
w
to
express
the
left
rules
of
sequen
t
calculus
in
terms
of
the
elimination
rules
of
natural
deduction,
and
ho
w
to
express
the
cut
rule
in
terms
of
mo
dus
p
onens.
.
The
deriv
ation
of
 `
+
L
'
is
 0
;
'
`
'
Then
 0
;
'
`
'
is
also
a
deriv
ation
of
 `
N
'.

..
In
tuitionistic
sequen
t
calculus

.
The
deriv
ation
of
 `
+
L
'
ends
in
 0
;
 

`
'
 0
;
 

^
 

`
'
By
the
induction
h
yp
othesis
w
e
ha
v
e
a
natural
deduction
deriv
ation
of
 0
;
 

`
'.
By
Lemma
.,
 0
;
 

^
 

;
 

`
',
so
 0
;
 

^
 

`
 

!
'.
Since
also
 0
;
 

^
 

`
 

^
 

,
and
hence
 0
;
 

^
 

`
 

,
w
e
get
 0
;
 

^
 

`
',
b
y
mo
dus
p
onens.
Th
us
 `
N
'.
.
The
deriv
ation
of
 `
+
L
'
ends
in
 0
;
 

`
'
 0
;
 

`
'
 0
;
 

_
 

`
'
By
the
induction
h
yp
othesis
w
e
ha
v
e
deriv
ations
in
natural
deduction
of
 0
;
 

`
'
and
 0
;
 

`
'.
By
Lemma
.,
 0
;
 

;
 

_
 

`
'
and
 0
;
 

;
 

_
 

`
'.
Since
also
 0
;
 

_
 

`
 

_
 

,
w
e
get
 0
;
 

_
 

`
'.
Th
us
 `
N
'.
.
The
deriv
ation
of
 `
+
L
'
ends
in
 0
`
 

 0
;
 

`
'
 0
;
 

!
 

`
'
By
the
induction
h
yp
othesis
w
e
ha
v
e
deriv
ations
in
natural
deduction
 0
`
 

and
 0
;
 

`
'.
By
Lemma
.,
 0
;
 

!
 

`
 

and
 0
;
 

!
 

;
 

`
'.
As
b
efore,
 0
;
 

!
 

`
 

!
 

,
so
 0
;
 

!
 

`
 

.
Also
 0
;
 

!
 

`
 

!
',
so
 0
;
 

!
 

`
'.
Th
us
 `
N
'.
.
The
deriv
ation
of
 `
+
L
'
is
 0
;
?
`
'
Then
 0
;
?
`
?
 0
;
?
`
'
is
a
deriv
ation
of
 `
N
'.
.
The
deriv
ation
of
 `
+
L
'
ends
in
 `
 
 ;
 
`
'
 `
'
By
the
induction
h
yp
othesis
w
e
ha
v
e
deriv
ations
in
natural
deduction
of
 `
 
and
 ;
 
`
'.
Then
 `
 
!
',
and
then
 `
'.
Th
us
 `
N
'.


Chapter
.
Sequen
t
calculus
The
remaining
cases|the
righ
t
rules|are
trivial.
F
or
the
right-to-left
direction
the
problem
is
to
express
the
elimination
rules
of
natural
deduction
in
terms
of
the
left
rules
of
sequen
t
calculus;
the
cut
rule
turns
out
to
b
e
useful
for
this.
As
ab
o
v
e
the
cases
where
the
deriv
ation
consists
of
a
use
of
the
axiom
or
ends
in
an
in
tro
duction
rule
are
trivial.
.
The
deriv
ation
of
 `
N
'
ends
in
 `
'
^
 
 `
'
By
the
induction
h
yp
othesis
w
e
ha
v
e
a
sequen
t
calculus
deriv
ation
of
 `
'
^
 
.
By
the
axiom
and
the
left
rule
for
^
w
e
get
 ;
'
^
 
`
'.
Then
b
y
the
cut
rule
 `
'.
Th
us
 `
+
L
'.
.
The
deriv
ation
of
 `
N
'
ends
in
 ;
 

`
'
 ;
 

`
'
 `
 

_
 

 `
'
By
the
induction
h
yp
othesis
w
e
ha
v
e
sequen
t
calculus
deriv
ations
of
 ;
 

`
',
of
 ;
 

`
',
and
of
 `
 

_
 

.
By
the
left
rule
for
_
w
e
get
 ;
 

_
 

`
'.
Then
b
y
the
cut
rule
 `
'.
Th
us
 `
+
L
'.
.
The
deriv
ation
of
 `
N
'
ends
in
 `
 
!
'
 `
 
 `
'
By
the
induction
h
yp
othesis
w
e
ha
v
e
sequen
t
calculus
deriv
ations
of
 `
 
!
'
and
 `
 
.
By
the
axiom
 ;
'
`
',
so
b
y
the
left
rule
for
!
w
e
ha
v
e
that
 ;
 
!
'
`
'.
Then
b
y
the
cut
rule
 `
'.
Th
us
 `
+
L
'.
.
The
deriv
ation
of
 `
N
'
ends
in
 `
?
 `
'
By
the
induction
h
yp
othesis
w
e
ha
v
e
a
sequen
t
calculus
deriv
ation
of
 `
?.
By
the
left
rule
for
?
w
e
ha
v
e
 ;
?
`
'.
Then
b
y
the
cut
rule
 `
'.
Th
us
 `
+
L
'.
u
t

..
Cut
elimination

..
Cut
elimination
In
b
oth
directions
of
the
pro
of
of
Prop
osition
..
w
e
in
tro
duce
detours.
In
the
left-to-righ
t
direction
w
e
express
the
left
rule
for,
sa
y
^,
b
y
a
sequence
of
rules
in
whic
h
a
^-in
tro
duction
is
immediately
follo
w
ed
b
y
a
^-elimination
(this
is
reected
b
y
a
redex
of
form

i
(<
M

;
M

>)
in
the
-term
corre-
sp
onding
to
the
pro
of
).
In
general
w
e
expressed
eac
h
left
rule
of
the
sequen
t
calculus
system
b
y
a
natural
deduction
pro
of
in
whic
h
a
sequen
t
o
ccurrence
w
as
b
oth
the
conclusion
of
an
in
tro
duction
rule
and
the
ma
jor

premise
of
the
corresp
onding
elimination
rule
(in
general,
suc
h
sequen
t
o
ccurrences
are
reected
b
y
redexes
in
the
-term
corresp
onding
to
the
pro
of
).
In
the
righ
t-to-left
direction
w
e
used
the
cut
rule
to
express
elimination
rules
in
terms
of
left
rules.
W
e
kno
w
that
w
e
can
get
rid
of
the
detours
in
the
natural
deduction
pro
ofs;
that
is,
w
e
can
transform
an
y
natural
deduction
pro
of
in
to
one
in
whic
h
no
sequen
t
o
ccurrence
is
b
oth
the
conclusion
of
an
in
tro
duction
rule
and
the
ma
jor
premise
of
the
corresp
onding
elimination
rule.
This
corre-
sp
onds
to
the
fact
that,
b
y
the
w
eak
normalization
theorem,
w
e
can
eliminate
all
redexes
in
a
term
of
the
simply
t
yp
ed
-calculus
with
pairs
and
sums.
The
follo
wing
theorem
states
that
w
e
can
also
do
without
the
cuts.
...
Theorem
(Cut
elimination).
F
or
al
l
'
and
 the
c
onditions
 `
+
L
'
and
 `
L
'
ar
e
e
quivalent.
The
pro
of
is
somewhat
tedious,
esp
ecially
when
presen
ted
in
terms
of
pro
of
trees|see,
e.g.,
[
]
or
[0	
].
Therefore
w
e
p
ostp
one
the
pro
of
to
Section
.
where
a
more
con
v
enien
t
notation
for
pro
ofs
is
dev
elop
ed.
Here
w
e
merely
reect
on
some
of
the
more
in
teresting
asp
ects
of
the
pro
of,
and
consider
some
consequences
of
the
theorem.
First
observ
e
that
there
is
no
uniform
w
a
y
to
eliminate
an
application
of
the
cut
rule,
i.e.,
there
is
no
xed
sequence
of
other
rules
that
is
equiv
alen
t
to
a
cut.
Eac
h
cut
has
to
b
e
eliminated
dieren
tly
,
and
this
dep
ends
on
the
shap
e
of
the
cut
formula
and
the
w
a
y
it
w
as
constructed
ab
o
v
e
the
cut.
In
addition,
in
an
attempt
to
eliminate
a
cut
with
a
complex
cut
form
ula,
i.e.,
one
of
the
form
'
!
 
,
w
e
ma
y
actually
create
new
cuts,
as
can
b
e
seen
from
the
follo
wing
example.
Consider
a
pro
of
that
ends
with
an
application
of
a
cut
rule
of
the
form:

In
_E
,
!
E
,
and
^E
the
ma
jor
premise
is
the
leftmost
one,
the
righ
tmost
one,
and
the
single
one,
resp
ectiv
ely
.


Chapter
.
Sequen
t
calculus
(R
!)
()
.
.
.
 ;
'
`
 
 `
'
!
 
()
.
.
.
 `
'
()
.
.
.
 ;
 
`
#
 ;
'
!
 
`
#
(L
!)
 `
#
(Cut
)
W
e
can
eliminate
this
cut
at
the
cost
of
in
tro
ducing
t
w
o
new
ones.
This
mak
es
sense,
b
ecause
the
new
cut
form
ulas
are
simpler.
The
new
pro
of
is
as
follo
ws:
(Cut
)
()
.
.
.
 `
'
()
.
.
.
 ;
'
`
 
 `
 
()
.
.
.
.
.
.
 ;
 
`
#
 `
#
(Cut
)
Note
that
in
our
example
the
cut
form
ula
'
!
 
w
as
in
tro
duced
just
b
efore
the
cut
b
y
the
rules
(R!)
and
(L!).
The
strategy
of
the
cut
elimination
pro
of
is
as
follo
ws.
The
main
cases,
when
the
cut
form
ula
is
in
tro
duced
b
y
the
appropriate
left
and
righ
t
rules
directly
b
efore
cut,
is
treated
as
in
our
example:
b
y
replacing
the
cut
b
y
new
\simpler"
cuts.
Other
cuts
are
\p
erm
uted
up
w
ard"
so
that
eac
h
cut
is
ev
en
tually
either
applied
to
an
axiom
(an
easy
case),
or
another
main
case
is
obtained.
This
requires
an
induction
o
v
er
t
w
o
parameters:
the
depths
of
cuts
and
the
complexit
y
of
cut
form
ulas.

...
Remark.
The
cut
elimination
theorem
also
holds
for
the
classical
sequen
t
calculus;
that
is,
for
all

and
 the
conditions
 `
+
LC

and
 `
LC

are
equiv
alen
t.
...
Lemma
(Subform
ula
prop
ert
y).
The
cut-fr
e
e
se
quent
c
alculus
`
L
has
the
fol
lowing
pr
op
erty:
Each
formula
o
c
curring
in
a
pr
o
of
of
 `
'
is
either
a
subformula
of
'
or
a
subformula
of
a
formula
o
c
curring
in
 .
Pr
oof.
By
induction
on
the
deriv
ation
of
 `
'.
u
t
There
are
a
n
um
b
er
of
consequences
of
the
subform
ula
prop
ert
y
.
One
is
that
nding
a
sequen
t
calculus
pro
of
of
a
giv
en
form
ula
(or
nding
out
that
no
suc
h
pro
of
exists)
is
incomparably
easier
than
nding
suc
h
a
pro
of
in
the
Hilb
ert,
or
natural
deduction
system.
As
w
e
reconstruct
the
pro
of

The
similarit
y
b
et
w
een
this
approac
h
and
the
pro
of
metho
d
of
w
eak
normalization
is
not
at
all
inciden
tal.

..
T
erm
assignmen
t
for
sequen
t
calculus

b
y
building
the
tree
up
w
ard,
the
searc
h
space
at
eac
h
step
is
limited
to
subform
ulas
of
the
form
ulas
o
ccurring
at
the
presen
t
stage.
This
pro
cess
cannot
con
tin
ue
indenitely
,
as
the
n
um
b
er
of
a
v
ailable
form
ulas
is
b
ounded,
and
w
e
will
ev
en
tually
rep
eat
already
considered
sequen
ts.
...
Cor
ollar
y
(Gen
tzen).
It
is
de
cidable,
for
input
',
whether
`
+
L
'.
Another
consequence
is
the
conserv
ativit
y
of
fragmen
ts
of
the
calculus
determined
b
y
a
c
hoice
of
connectiv
es.
The
subform
ula
prop
ert
y
implies
that
a
cut-free
pro
of
of
a
sequen
t
can
only
men
tion
connectiv
es
o
ccurring
in
that
sequen
t.
Th
us,
e.g.,
a
form
ula
((p
^
q
)
!
r
)
$
(p
!
(q
!
r
))
is
pro
v
able
in
a
system
con
taining
only
rules
for
implication
and
conjunction.
...
Cor
ollar
y.
IPC
is
c
onservative
over
its
implic
ational
fr
agment.
W
e
end
this
section
with
another
pro
of
of
the
disjunction
prop
ert
y
(Prop
osition
..).
...
Cor
ollar
y.
If
`
+
L
'
_
 
then
either
`
+
L
'
or
`
+
L
 
.
Pr
oof.
If
there
is
a
pro
of
of
`
+
L
'
_
 
,
then
there
is
a
cut-free
one.
And
a
cut-free
pro
of
of
a
disjunction
m
ust
end
up
with
an
application
of
rule
(_I).
Th
us,
either
`
L
'
or
`
L
 
m
ust
ha
v
e
b
een
pro
v
ed
rst.
u
t
..
T
erm
assignmen
t
for
sequen
t
calculus
Natural
deduction
pro
ofs
corresp
ond
to
t
yp
ed
-terms
and
Hilb
ert-st
yle
pro
ofs
corresp
ond
to
t
yp
ed
com
binators.
What
do
sequen
t
calculus
pro
ofs
corresp
ond
to?
There
are
sev
eral
answ
ers.
The
traditional
one|see,
e.g.,
[
,

]|
is
that
w
e
can
assign
lam
b
da-terms
to
sequen
t
calculus
pro
ofs;
that
is,
w
e
can
devise
an
alternativ
e
v
ersion
of
simply
t
yp
ed
-calculus|with
the
same
term
language,
but
with
dieren
t
t
yping
rules|whic
h
is
to
sequen
t
calculus
what
the
traditional
form
ulation
of
simply
t
yp
ed
-calculus
is
to
natural
deduction.
This
is
carried
out
b
elo
w.
W
e
b
egin
with
the
implicational
fragmen
t.
...
Definition
(Sequen
t
calculus
st
yle

!).
The
t
yp
e
and
term
language
of
the
sequen
t
calculus
st
yle

!
is
as
for

!
(
a
la
Curry).
The
t
yping
rules
are
as
follo
ws:


Chapter
.
Sequen
t
calculus
Axiom:
 ;
x:'
`
x
:
'
Rules:
 `
M
:
'
 ;
x:
 
`
N
:

 ;
y
:'
!
 
`
N
[x
:=
y
M
]
:

(L!)
 ;
x:
'
`
M
:
 
 `
x:M
:
'
!
 
(R!)
 `
M
:
'
 ;
x:
'
`
N
:

 `
(x:N
)M
:

(Cut
)
W
e
also
write
`
+
L
and
`
L
for
deriv
abilit
y
in
this
system
with
and
without
cut,
resp
ectiv
ely
.
W
e
th
us
ha
v
e
binary
and
ternary
v
ersion
of
b
oth
`
+
L
and
`
L
;
the
binary
v
ersion
refers
to
the
sequen
t
calculus
form
ulation
of
IPC
(!)
in
Denition
..,
and
the
ternary
v
ersion
refers
to
the
presen
t
sequen
t
calculus
st
yle
form
ulation
of

!.
As
usual
w
e
ha
v
e
that
the
system
with
terms
agrees
with
the
system
without
terms.
...
Pr
oposition.
(i)
If
 `
+
L
M
:
'
then
j j
`
+
L
'.
(ii)
If
 `
+
L
'
then
ther
e
exists
M


such
that

`
+
L
M
:
',
wher
e

=
f(x
'
:
')
j
'

 g.
The
ab
o
v
e
sequen
t
calculus
system
assigns
t
yp
es
to
certain
-terms.
Are
these
the
same
-terms
as
those
that
receiv
e
t
yp
es
b
y
the
usual
simply
t
yp
ed
-calculus

a
la
Curry?
The
answ
er
is
no!
F
or
instance,
there
is
no
w
a
y
to
assign
a
t
yp
e
to
(x:y
:x)
(z
:z
)
(z
:z
)
in
the
ab
o
v
e
system.
Ho
w
ev
er,
the
pro
of
of
Prop
osition
..
implicitly
denes
a
translation
from
terms
t
ypable
in
simply
t
yp
ed
-calculus
(corresp
onding
to
natural
deduction
pro
ofs)
to
terms
t
ypable
in
the
ab
o
v
e
system
(corresp
onding
to
sequen
t
calculus
pro
ofs),
and
vice
v
ersa.
On
the
other
hand,
if
w
e
restrict
atten
tion
to
-terms
in
normal
form,
then
the
set
of
terms
t
ypable
in
traditional
simply
t
yp
ed
-calculus
coincides
with
the
set
of
terms
t
ypable
in
sequen
t
calculus.
...
Pr
oposition.
F
or
every
term
M
in
normal
form,
 `
+
L
M
:
'
i
 `
M
:
'
in
simply
typ
e
d
-c
alculus.

..
T
erm
assignmen
t
for
sequen
t
calculus

Pr
oof.
First
sho
w
that
a
term
M
is
in
normal
form
i
either

M
is
a
v
ariable,
or

M
=
x:N
,
where
N
is
a
normal
form,
or

M
=
N
[y
:=
xP
],
where
N
and
P
are
normal
forms.
Then
the
prop
ert
y
follo
ws
easily
.
u
t
In
the
corresp
ondence
b
et
w
een
simply
t
yp
ed
-calculus
and
natural
de-
duction,
-terms
in
normal
form
corresp
ond
to
normal
deductions
(i.e.,
de-
ductions
where
no
sequen
t
is
at
the
same
time
the
conclusion
of
an
in
tro-
duction
rule
and
the
ma
jor
premise
of
the
corresp
onding
elimination
rule).
In
the
sequen
t
calculus
v
arian
t
of
simply
t
yp
ed
-calculus,
-terms
in
normal
form
corresp
ond
to
cut-free
pro
ofs
in
sequen
t
calculus.
...
Pr
oposition.
If
 `
+
L
M
:
',
then
M
is
in
normal
form
if
and
only
if
 `
L
M
:
'.
Pr
oof.
Ob
vious.
u
t
Th
us
simply
t
ypable
-terms
in
normal
form
corresp
ond
to
b
oth
nor-
mal
pro
ofs
in
natural
deduction
and
cut-free
sequen
t
calculus
pro
ofs.
W
e
therefore
ha
v
e
the
corresp
ondence
Normal
de
ductions
(
)
Cut-fr
e
e
pr
o
ofs
Ho
w
ev
er,
note
that
a
deduction
ma
y
use
the
cut
rule
ev
en
if
the
cor-
resp
onding
-term
is
in
normal
form
(cf.
Exercise
..):
the
substitution
N
[x
:=
y
M
]
ma
y
delete
the
term
M
whic
h
ma
y
con
tain
redexes.
In
this
case
w
e
just
kno
w
that
there
is
another
t
yping
that
do
es
not
use
the
cut
rule
of
the
same
term.
...
Remark.
As
men
tioned
ab
o
v
e,
the
pro
of
of
Prop
osition
..
implic-
itly
denes
a
translation
from
terms
t
ypable
in
traditional
simply
t
yp
ed
-calculus
(corresp
onding
to
natural
deduction
pro
ofs)
to
terms
t
ypable
in
the
ab
o
v
e
system
(corresp
onding
to
sequen
t
calculus
pro
ofs),
and
vice
v
ersa.
F
rom
what
has
b
een
said
ab
o
v
e
one
migh
t
exp
ect
that
the
translations
map
normal
forms
to
normal
forms.
Ho
w
ev
er
this
is
not
the
case.
The
reason
for
this
is
that
in
the
pro
of
of
Prop
osition
..
w
e
aimed
at
the
simplest
p
ossible
w
a
y
to
get
from
natural
deduction
pro
ofs
to
sequen
t
calculus
pro
ofs;
in
particular,
w
e
translated
the
left
rules
of
sequen
t
calculus
in
to
natural
deduction
pro
ofs
con
taining
detours,
and
w
e
made
use
of
the
cut
rule
in
translating
elimination
rules
in
to
left
rules.


Chapter
.
Sequen
t
calculus
..
The
general
case
W
e
briey
sho
w
ho
w
the
dev
elopmen
t
of
the
preceding
section
can
b
e
gen-
eralized
to
the
full
prop
ositional
language.
Recall
the
extension
of

!

a
la
Curry
with
pairs
and
sums:
 `
M
:
 
 `
N
:
'
 `
<
M
;
N
>:
 
^
'
 `
M
:
 
^
'
 `


(M
)
:
 
 `
M
:
 
^
'
 `


(M
)
:
'
 `
M
:
 
 `
in

(M
)
:
 
_
'
 `
M
:
'
 `
in

(M
)
:
 
_
'
 `
L
:
 
_
'
 ;
x
:
 
`
M
:

 ;
y
:
'
`
N
:

 `
case
(L;
x:M
;
y
:N
)
:

F
or
completeness,
extend
the
language
with
an
op
erator
"
for
falsit
y
,
with
the
follo
wing
rule:
 `
M
:
?
 `
"(M
)
:

and
with
no
reduction
rule
(as
there
is
no
?-in
tro
duction
rule).
First
w
e
generalize
the
construction
in
the
pro
of
of
Prop
osition
..
...
Lemma.
A
term
M
is
in
normal
form
i
either

M
is
a
variable,
or

M
=
x:P
,
or

M
=
P
[y
:=
xQ],
or

M
=<
P
;
Q
>,
or

M
=
in

(P
),
or

M
=
in

(P
),
or

M
=
P
[y
:=


(x)],
or

M
=
P
[y
:=


(x)],
or

M
=
P
[y
:=
case
(x;
v
:Q;
w
:R
)],
or

M
=
"(P
),
wher
e
P
,
Q,
and
R
ar
e
normal
forms.
Pr
oof.
Easy
.
u
t

..
The
general
case
	
...
Definition
(Sequen
t
calculus
st
yle

!
for
the
full
language).
The
se-
quen
t
calculus
st
yle

!
for
the
full
prop
ositional
language
is
as
for

!

a
la
Curry
with
pairs
and
sums.
The
t
yping
rules
are
are
those
of
Denition
..
and
in
addition
the
follo
wing:
(L^)
 ;
x:
'
i
`
M
:

 ;
y
:'

^
'

`
M
[x
:=

i
(y
)]
:

 `
M
:
'
 `
N
:
 
 `<
M
;
N
>:
'
^
 
(R^)
(L_)
 ;
x:
'
`
M
:

 ;
y
: 
`
N
:

 ;
z
:
'
_
 
`
case
(z
;
x:M
;
y
:N
)
:

 `
M
:
'
i
 `
in
i
(M
)
:
'

_
'

(R_)
 ;
x:
?
`
"(x)
:

(L?)
It
is
a
routine
matter
to
v
erify
that
the
generalized
v
ersion
of
Prop
osi-
tion
..
holds.
W
e
w
ould
lik
e
no
w
to
generalize
Prop
osition
..,
but
there
is
a
problem.
Some
t
ypable
lam
b
da-terms
in
normal
form
do
not
corresp
ond
to
an
y
terms
t
ypable
in
the
new
system.
F
or
instance,
if
M
,
N
,
P
and
Q
are
normal
forms,
then
the
term


(case
(z
;
x:
<
M
;
N
>;
y
:
<
P
;
Q
>))
is
in
normal
form.
But
it
has
no
t
yp
e
in
the
ab
o
v
e
system,
ev
en
if
the
term
is
t
ypable
in

!
with
pairs
and
sums
(to
see
this,
observ
e
that
no
rule
could
p
ossibly
b
e
the
last
one
used.)
One
w
a
y
to
remedy
this
problem
is
to
mo
dify
the
term
assignmen
t
for
the
(Cut)
rule
to:
 `
M
:
'
 ;
x:'
`
N
:

 `
N
[x
:=
M
]
:

(Cut
)
Then
our
example
term
can
b
e
t
yp
ed,
but
only
using
the
cut-rule,
so
the
corresp
ondence
b
et
w
een
normal
pro
ofs
and
cut-free
pro
ofs
has
b
een
lost.
Inciden
tally
,
this
dicult
y
do
es
not
o
ccur
for
implication
and
conjunc-
tion,
but
only
for
the
disjunction
and
falsit
y
.
The
reason
is
that
the
elimina-
tion
rules
for
these
connectiv
es
are
dieren
t.
Recall
that
ev
ery
elimination
rule
has
a
main
premise
in
v
olving
the
eliminated
connectiv
e.
In
case
of
implication
and
conjunction,
the
conclusion
of
the
elimination
rule
(more
precisely:
the
righ
t-hand
side
of
the
conclusion)
is
a
subform
ula
of
the
main
premise.
In
case
of
disjunction
and
falsit
y
this
is
not
the
case.
Our
example
term
corresp
onds
to
the
follo
wing
sequence
of
pro
of
steps:
conjunction
in
tro
duction
(pairing)
follo
w
ed
b
y
disjunction
elimination
(case),
follo
w
ed
b
y
conjunction
elimination
(pro
jection).
Due
to
the
\irregular"
b
e-
ha
viour
of
disjunction
elimination,
the
last
pro
jection
should
actually
b
e
applied
to
the
pair(s)
created
at
the
b
eginning.
But
the
case
instruction

0
Chapter
.
Sequen
t
calculus
mak
es
this
imp
ossible.
It
is
a
stranger
who
en
tered
here
b
y
mistak
e
due
to
an
improp
erly
closed
do
or
(the
\bad"
elimination,
as
Girard
calls
it)
and
do
es
her
o
wn
w
ork
quite
unrelated
to
the
form
of
the
main
premise.
A
so-
lution
is
either
to
ignore
her
or
to
op
en
the
do
or
ev
en
more
and
let
her
go
out.
T
ec
hnically
,
these
t
w
o
alternativ
es
mean
that
w
e
should
either
relax
the
existing
reduction
rules
to
allo
w
for
reduction
of
in
tro
duction/elimination
pairs,
ev
en
if
the
latter
do
es
not
immediately
follo
w
the
former,
or
w
e
should
in
tro
duce
c
ommuting
c
onversions
,
i.e.,
reduction
rules
to
p
erm
ute
elimina-
tions.
After
Girard
[
]
w
e
tak
e
the
second
option.
...
Definition.
In

!
with
pairs
and
sums
let
!
c
denote
the
union
of
!

,
of
the

-reductions
for
pairs
and
sums
(see
P
age
),
and
of
the
compatible
closure
of
the
relation
dened
b
y
the
follo
wing
rules:



(case
(M
;
x:P
;
y
:Q))
!
case
(M
;
x:

(P
);
y
:

(Q));



(case
(M
;
x:P
;
y
:Q))
!
case
(M
;
x:

(P
);
y
:

(Q));

(case
(M
;
x:P
;
y
:Q))N
!
case
(M
;
x:P
N
;
y
:QN
);

"(case
(M
;
x:P
;
y
:Q))
!
case
(M
;
x:"(P
);
y
:"(Q));

case
(case
(M
;
x:P
;
y
:Q);
z
:N
;
v
:R
)
!
case
(M
;
x:case
(P
;
z
:N
;
v
:R
);
y
:case
(Q;
z
:N
;
v
:R
));

"(

(M
))
!
"(M
);

"(

(M
))
!
"(M
);

"("(M
))
!
"(M
);

("(M
))N
!
"(M
);

case
("(M
);
x:P
;
y
:Q)
!
"(M
).
Also,
let
NF
c
denote
the
set
of
normal
forms
with
resp
ect
to
!
c
.
No
w
w
e
can
state
a
v
ersion
of
Prop
osition
...
...
Pr
oposition.
F
or
every
M

NF
c
:
 `
+
L
M
:
'
i
 `
M
:
'
in

!
with
p
airs
and
sums.
F
or
the
full
system
w
e
also
ha
v
e
...
Pr
oposition.
F
or
every
de
duction
 `
+
L
M
:
',
M
is
in
c-normal
form
if
and
only
if
 `
L
M
:
'.

..
Alternativ
e
term
assignmen
t

Pr
oof.
Ob
vious.
u
t
...
Remark.
The
notion
of

-reduction
is
often
understo
o
d
as
follo
ws.
An
elimination
follo
w
ed
b
y
an
in
tro
duction
of
the
same
connectiv
e
should
b
e
ignored.
W
e
can
write
the
follo
wing
eta-rule
for
^:
<


(M
);


(M
)
>!

M
:
The
ab
o
v
e
rule,
although
lo
oking
v
ery
con
vincing,
hides
an
unpleasan
t
sur-
prise
to
b
e
disco
v
ered
in
Exercise
...
F
or
function
t
yp
es,
as
w
e
ha
v
e
already
observ
ed
b
efore,
the
meaning
of
the
eta
rule
is
the
p
ostulate
of
extensionalit
y
for
functions,
In
case
of
^,
eta-reduction
has
the
follo
wing
meaning:
Ev
ery
ob
ject
of
a
pro
duct
t
yp
e
is
actually
a
pair.
This
leads
to
the
idea
of
the
follo
wing
\generalized
extensionalit
y"
prin-
ciple:
Ev
ery
ob
ject
should
b
e
assumed
to
b
e
in
a
\canonical
form".
The
canonical
form
for
an
ob
ject
of
t
yp
e

_

is
a
v
arian
t,
i.e.,
it
is
either
an
in

(M
)
or
an
in

(N
).
Th
us
suggest
the
follo
wing
eta
rule
for
disjunction:
case
(M
;
x:in

(x);
y
:in

(y
))
!
M
:
...
W
arning.
W
e
use
logical
sym
b
ols
_
and
^
to
denote
also
the
corre-
sp
onding
t
yp
es.
Similar
sym
b
ols
are
often
used
to
denote
interse
ction
and
union
t
yp
es,
whic
h
ha
v
e
quite
a
dieren
t
meaning
(see
e.g.
[
]).
Our
^
is
ac-
tually
a
pr
o
duct
rather
than
in
tersection,
and
our
_
is
a
v
arian
t
t
yp
e
rather
than
set-theoretic
or
lattice
union.
..
Alternativ
e
term
assignmen
t
The
sequen
t
calculus
systems
with
terms
in
the
preceding
t
w
o
sections
rev
eal
in
teresting
connections
ab
out
normal
natural
deduction
pro
ofs
and
cut-free
sequen
t
calculus
pro
ofs.
Ho
w
ev
er,
for
a
ne-grained
analysis
of
cut-elimination
the
term
assign-
men
t
is
not
satisfactory
.
The
problem
is
that
dieren
t
pro
ofs
corresp
ond
to
the
same
term
so
that
reductions
on
pro
ofs
is
not
exactly
mirrored
b
y
reduc-
tions
on
terms.
In
this
section
w
e
follo
w
another
w
ell-kno
wn
approac
h|see,
e.g.,
[
,

,

]|and
in
tro
duce
another,
more
explicit,
w
a
y
of
assigning
terms
to
sequen
t
calculus
pro
ofs.
W
e
shall
use
the
term
assignmen
t
to
pro
v
e
the
Cut
Elimination
Theorem.
Y
et
another
approac
h
to
term
assignmen
t
app
ears
in
[
].


Chapter
.
Sequen
t
calculus
...
Definition
(Alternativ
e
term
assignmen
t
to
sequen
t
calculus).
W
e
con-
sider
the
language
of
prop
ositional
form
ulas
and
the
follo
wing
term
language:
M
::=
x
j
in

(M
)
j
in

(M
)
j
x:M
j
<
M
;
M
0
>
j
"(x)
j
case
(x;
x
0
:M
0
;
x
0
0
:M
0
0
)
j
let
x
=
x
0
M
in
M
0
j
let
x
=


(x
0
)
in
M
0
j
let
x
=


(x
0
)
in
M
0
j
let
'
x
=
M
0
in
M
0
Note
that
in
the
rst
three
kinds
of
let-expression,
the
form
of
N
in
the
expression
\let
x
=
N
in
M
"
is
restricted
to
certain
forms.
The
inference
rules
of
the
system
are
as
follo
ws:
Axiom:
 ;
x:'
`
x
:
'
Rules:
(L!)
 `
M
:
'
 ;
x:
 
`
N
:

 ;
y
:'
!
 
`
let
x
=
y
M
in
N
:

 ;
x:
'
`
M
:
 
 `
x:M
:
'
!
 
(R!)
(L^)
 ;
x:
'
i
`
M
:

 ;
y
:
'

^
'

`
let
x
=

i
(y
)
in
M
:

 `
M
:
'
 `
N
:
 
 `<
M
;
N
>:
'
^
 
(R^)
(L_)
 ;
x:'
`
M
:

 ;
y
: 
`
N
:

 ;
z
:
'
_
 
`
case
(z
;
x:M
;
y
:N
)
:

 `
M
:
'
i
 `
in
i
(M
)
:
'

_
'

(R_)
 ;
x:?
`
"(x)
:

(L?)
 `
M
:
'
 ;
x:
'
`
N
:

 `
let
'
x
=
M
in
N
:

(Cut
)
In
-terms
with
pairs
and
sums
there
are
a
n
um
b
er
of
c
onstructors
and
a
n
um
b
er
destructors.
The
constructors
are
<
;

>,
in
i
(),
and
x:;
these
build
up
values,
informally
sp
eaking.
The
destructors
are
case
(;
x:M
;
x
0
:M
0
),

N
,
and

i
().
These
insp
ect
and
dissect
v
alues,
informally
sp
eaking.
In
the
-calculus
with
pairs
and
sums
one
can
freely
apply
a
destructor
to
an
y

..
Alternativ
e
term
assignmen
t

term.
The
main
dierence
to
the
ab
o
v
e
term
language
is
that
no
w
the
com-
bination
of
destructors
and
constructors
are
expressed
via
an
explicit
rule,
namely
cut.
This
mak
es
it
v
ery
explicit
where
in
termediate
results,
e.g.
a
pair
of
whic
h
one
tak
es
a
pro
jection,
are
constructed.
In
functional
programming
there
are
v
arious
tec
hniques
to
eliminate
in
termediate
data
structures
from
functional
programs,
notably
W
adler's
deforestation
[
].
Marlo
w
[	
]
stud-
ies
deforestation
of
a
functional
programming
language
whic
h
is
similar
to
the
term
assignmen
t
for
sequen
t
calculus
pro
ofs.
The
follo
wing
rules
remo
v
e
cuts
from
sequen
t
calculus
pro
ofs
represen
ted
b
y
the
alternativ
e
syn
tax
of
Denition
...
...
Definition.
On
the
term
language
in
tro
duced
in
Denition
..,
w
e
in
tro
duce
the
relation
!
!
a
as
the
transitiv
e,
reexiv
e,
compatible
closure
of
the
relation
dened
b
y
the
follo
wing
rules,
whic
h
are
divided
in
to
three
groups:
main
c
ases,
absent
c
onstructor
in
left
term,
and
absent
c
onstructor
in
right
term.
The
main
cases
are:
let
'

^'

y
=<
M

;
M

>
in
let
x
=

i
(y
)
in
M
!
let
'
i
x
=
M
i
in
M
let
'

_'

y
=
in
i
(M
)
in
case
(y
;
x

:M

;
x

:M

)
!
let
'
i
x
i
=
M
in
M
i
let
'

!'

y
=
x:M
in
let
z
=
y
N
in
L
!
let
'

x
=
N
in
let
'

z
=
M
in
L
Absen
t
constructor
from
left
h
yp
othesis:
let
'
x
=
y
in
N
!
N
fx
:=
y
g
let
'
x
=
let
y
=

i
(z
)
in
M
in
N
!
let
y
=

i
(z
)
in
let
'
x
=
M
in
N
let
'
x
=
case
(z
;
y

:M

;
y

:M

)
in
N
!
case
(z
;
y

:let
'
x
=
M

in
N
;
y

:let
'
x
=
M

in
N
)
let
'
x
=
let
y
=
z
M
in
K
in
N
!
let
y
=
z
M
in
let
'
x
=
K
in
N
let
'
x
=
let
 
y
=
M
in
K
in
N
!
let
 
y
=
M
in
let
'
x
=
K
in
N
let
'
x
=
"(y
)
in
N
!
"(y
)
Absen
t
constructor
from
righ
t
h
yp
othesis:
let
'
x
=
N
in
y
!
y
fx
:=
N
g
let
'
x
=
N
in
<
M

;
M

>
!
<
let
'
x
=
N
in
M

;
let
'
x
=
N
in
M

>
let
'
x
=
N
in
in
i
(M
)
!
in
i
(let
'
x
=
N
in
M
)
let
'
x
=
N
in
y
:M
!
y
:let
'
x
=
N
in
M
let
'
x
=
N
in
"(y
)
!
"(y
)
let
'
x
=
N
in
let
 
y
=
K
in
L
!
let
 
y
=
(let
'
x
=
N
in
K
)
in
(let
'
x
=
N
in
L)


Chapter
.
Sequen
t
calculus
...
Definition.
.
Dene
the
de
gr
e
e
d(')
of
a
form
ula
'
b
y:
d(?)
=
d()
=
0;
for


P
V
;
and
d('
^
 
)
=
d('
_
 
)
=
d('
!
 
)
=

+
maxfd(');
d( 
)g:
.
Dene
the
de
gr
e
e
d(M
)
of
a
term
M
as
the
maximal
degree
of
an
y
'
in
an
y
let
'
x
=
K
in
L
in
M
.
.
Dene
the
heigh
t
h(M
)
of
a
term
M
as
the
heigh
t
of
M
view
ed
as
a
tree.
...
Lemma.
L
et
d
=
d(')
and
assume
 `
+
L
let
'
x
=
M
in
N
:
 
wher
e
d(M
)
<
d
and
d(N
)
<
d.
Then
let
'
x
=
M
in
N
!
!
a
P
for
some
P
with
 `
+
L
P
:
 
and
d(P
)
<
d.
Pr
oof.
By
induction
on
h(M
)
+
h(N
).
Split
in
to
cases
according
to
the
form
of
M
and
N
.
u
t
...
Pr
oposition.
If
 `
+
L
M
:
'
and
d(M
)
>
0
then
M
!
!
a
N
for
some
N
with
 `
+
L
N
:
'
and
d(M
)
>
d(N
).
Pr
oof.
By
induction
on
M
using
the
lemma.
u
t
...
Theorem
(Gen
tzen).
If
 `
+
L
M
:
'
then
M
!
!
a
N
wher
e
 `
+
L
N
:
'
and
d(N
)
=
0,
i.e.,
N
r
epr
esents
a
cut-fr
e
e
pr
o
of.
Pr
oof.
By
induction
on
d(M
)
using
the
Prop
osition.
u
t
What
do
es
the
system
in
tro
duced
ab
o
v
e
corresp
ond
to,
computationally
sp
eaking?
The
rules
are
similar
to
the
rules
that
one
nds
in
systems
for
explicit
substitution|see,
e.g.,
[
].
It
w
ould
b
e
in
teresting
to
in
v
estigate
this
in
greater
detail|this
has
b
een
done
recen
tly
[
].

..
Exercises

..
Exercises
...
Exer
cise.
Giv
e
sequen
t
calculus
pro
ofs
for
the
form
ulas
of
Exam-
ple
..
T
o
pro
v
e
the
o
dd-n
um
b
ered
form
ulas
use
only
sequen
ts
with
single
form
ulas
at
righ
t-hand
sides.
...
Exer
cise.
Sho
w
that
all
cut-free
pro
ofs
for
the
ev
en-n
um
b
ered
for-
m
ulas
of
Example
.
m
ust
in
v
olv
e
sequen
ts
with
more
than
one
form
ula
at
the
righ
t-hand
side.
...
Exer
cise.
Design
a
sequen
t
calculus
allo
wing
empt
y
righ
t-hand
sides
of
sequen
ts.
Do
es
it
mak
e
sense
no
w
to
ha
v
e
a
righ
t
rule
for
??
...
Exer
cise.
Pro
v
e
Prop
osition
...
On
the
basis
of
this
pro
of
de-
scrib
e
algorithms
translating
a
normal
deduction
in
to
a
cut-free
pro
of
and
con
v
ersely
.
...
Exer
cise.
Giv
e
examples
of
cuts
that
are
assigned
terms
in
normal
form,
according
to
the
term
assignmen
t
of
Section
..
...
Exer
cise.
Sho
w
that
the
Curry-st
yle
v
arian
t
of
lam
b
da-calculus
with
^
do
es
not
ha
v
e
the
sub
ject
reduction
prop
ert
y
for

-reductions.
Sho
w
that
the
eta
rule
for
_
has
the
sub
ject
reduction
prop
ert
y
.
...
Exer
cise.
Design
a
Ch
urc
h-st
yle
calculus
with
^
and
_
and
sho
w
that
sub
ject
reduction
prop
ert
y
holds
for
that
calculus.
...
Exer
cise.
Explain
the
dierence
b
et
w
een
the
ab
o
v
e
t
w
o
results.
..	.
Exer
cise.
Can
y
ou
design
a
reasonable
eta-rule
for
disjunction
aim-
ing
at
erasing
elimination-in
tro
duction
pairs?
Wh
y
not?
..0.
Exer
cise.
Dene
an
eta-rule
for
?.
...
Exer
cise.
Let
A
denote
the
term
language
of
Denition
..,
ex-
cept
that
in
A,
cut
terms
ha
v
e
the
form
let

x
=
M
in
N
(the
'
is
omitted).
Let
L
denote
the
set
of
-terms
with
pairs
and
sums
and
".
Let
`
L
denote
t
ypabilit
y
in

!
with
pairs
and
sums
and
?,
and
let
`
A
denote
t
ypabilit
y
in
the
sense
of
Denition
..
with
the
ob
vious
mo
dica-
tion
to
the
cut
rule
to
accomo
date
the
c
hange
in
the
syn
tax
of
cut
terms.
Let
!
!
A
denote
the
reduction
relation
from
Denition
..,
and
let
!
!
L
denote
the
transitiv
e,
reexiv
e
closure
of
!

plus
the
reductions
on
pairs
and
sums.
=
A
and
=
L
are
the
ob
vious
closures.
Use
the
pro
of
of
Prop
osition
..
to
giv
e
translations
t
L
:
A
!
L
and
t
A
:
L
!
A
b
et
w
een
A
and
L.
Note
that
these
can
also
b
e
view
ed
as
translations
on
t
yp
e-free
terms.
Whic
h
of
the
follo
wing
prop
erties
hold
for
y
our
translations?


Chapter
.
Sequen
t
calculus
.
 `
L
M
:
'
,
 `
A
t
A
(M
)
:
';
.
 `
A
M
:
'
,
 `
L
t
L
(M
)
:
';
.
M
!
!
L
N
,
t
A
(M
)
!
!
A
t
A
(N
);
.
M
!
!
A
N
,
t
L
(M
)
!
!
L
t
L
(N
);
.
t
L
(t
A
(M
))
=
L
M
;
.
t
A
(t
L
(M
))
=
A
M
.
What
happ
ens
if
y
ou
add
comm
uting
con
v
ersion
to
the
relations
!
L
,
=
L
,
etc.?

CHAPTER

Classical
logic
and
con
trol
op
erators
In
the
previous
c
hapters
w
e
ha
v
e
encoun
tered
the
Curry-Ho
w
ard
isomor-
phism
in
v
arious
incarnations;
eac
h
of
these
state
a
corresp
ondence
b
et
w
een
some
system
of
t
yp
ed
terms
and
a
system
of
formal
logic.
Un
til
no
w
these
systems
of
formal
logic
ha
v
e
b
een
c
onstructive;
that
is,
in
none
of
them
ha
v
e
w
e
found
the
principle
of
the
exclude
d
midd
le
or
the
double
ne
gation
elimination
principle
that
one
nds
in
classic
al
lo
gics.
This
is
b
y
no
means
a
coincidence.
Un
til
around
		0
there
w
as
a
widespread
consensus
to
the
eect
that
\there
is
no
Curry-Ho
w
ard
isomor-
phism
for
classical
logic."
Ho
w
ev
er,
at
that
time
Tim
Grin
made
a
path-
breaking
disco
v
ery
whic
h
ha
v
e
con
vinced
most
critics
that
classical
logics
ha
v
e
something
to
oer
the
Curry-Ho
w
ard
isomorphism.
In
this
c
hapter
w
e
in
tro
duce
classical
prop
ositional
logic,
w
e
study
ho
w
one
can
assign
terms
to
classical
pro
ofs,
and
w
e
presen
t
a
system
for
classical
pro
of
normalization.
The
connection
b
et
w
een
classical
and
in
tuitionistic
logic
is
also
elab
orated
in
some
detail.
Grin's
disco
v
ery
is
then
presen
ted
at
the
end
of
the
c
hapter.
..
Classical
prop
ositional
logic,
implicational
fragmen
t
Although
the
bulk
of
the
previous
c
hapters
ha
v
e
b
een
concerned
with
form
u-
lations
of
in
tuitionistic
prop
ositional
logic
w
e
ha
v
e
o
ccasionally
come
across
classical
prop
ositional
logic.
F
or
instance,
in
Chapter
,
w
e
briey
studied
the
algebraic
seman
tics
of
classical
logic,
and
in
the
preceding
c
hapter,
w
e
in
tro
duced
sequen
t
calculus
for
in
tuitionistic
logic
as
the
restriction
of
classical
sequen
t
calculus
to
one-
form
ula
righ
t
hand
sides.
In
the
case
of
natural
deduction,
there
are
sev
eral
w
a
ys
to
obtain
classi-
cal
prop
ositional
logic
from
in
tuitionistic
prop
ositional
logic.
The
follo
wing
giv
es
one
w
a
y
of
doing
this
for
the
implicational
fragmen
t.



Chapter
.
Classical
logic
and
con
trol
op
erators
...
Remark.
In
order
to
a
v
oid
confusion
and
length
y
remarks
it
is
con-
v
enien
t
in
this
c
hapter
to
ha
v
e
a
v
ailable
a
systematic
w
a
y
of
assigning
names
to
subsets
of
the
language
of
prop
ositions
and
to
logical
system
and
t
yp
ed
-calculi.
In
this
c
hapter,
L(!)
denotes
the
set
of
implic
ational
formulas,
i.e.,
the
language
generated
b
y
the
grammar:
L(!)

'
::=
?
j

j
'
!
'
0
The
ful
l
pr
op
ositional
language
L(!;
_;
^)
is
the
language
generated
b
y
the
grammar:
L(!;
_;
^)

'
::=
?
j

j
'
!
'
0
j
'
_
'
0
j
'
^
'
0
W
e
shall
o
ccasionally
b
e
concerned
with
the
set
L
 (!)
of
pur
e
implic
a-
tional
formulas,
i.e.,
the
language
generated
b
y
L
 (!)

'
::=

j
'
!
'
0
Similarly
,
the
pur
e
ful
l
pr
op
ositional
language
L
 (!;
_;
^)
is
the
lan-
guage
generated
b
y
the
grammar:
L
 (!;
_;
^)

'
::=

j
'
!
'
0
j
'
_
'
0
j
'
^
'
0
W
e
will
follo
w
similar
naming
con
v
en
tions
for
logical
systems
and
t
yp
ed
-calculi.
...
Definition
(Classical
prop
ositional
logic,
implicational
fragmen
t).
Let
';
 
range
o
v
er
implicational
form
ulas,
i.e.,
o
v
er
L(!).
As
usual,
 and

denote
con
texts
for
whic
h
w
e
use
the
standard
con
v
en
tions.
The
natural
deduction
presen
tation
of
the
implicational
fragmen
t
CPC
(!)
of
classical
prop
ositional
logic
is
dened
b
y
the
follo
wing
axiom
and
rules:
Axiom:
 ;
'
`
'
Rules:
 ;
'
`
 
 `
'
!
 
(!
I)
 `
'
!
 
 `
'
 `
 
(!
E)
 ;
'
!
?
`
?
 `
'
(::E
)

..
Classical
prop
ositional
logic,
implicational
fragmen
t
	
...
Pr
oposition.
L
et
'
b
e
an
implic
ational
formula.
Then
 `
'
i
 j
=
'
ac
c
or
ding
to
the
truth-table
semantics.
In
p
articular
`
'
i
'
is
a
tautolo
gy.
Pr
oof.
The
pro
of
is
left
as
an
exercise.
u
t
...
Remark.
A
small
v
ariation
of
the
system
is
obtained
b
y
c
hanging
rule
(::E)
to
 `
('
!
?)
!
?
 `
'
(::E
0
)
It
is
an
easy
exercise
to
see
that
this
c
hange
do
es
not
aect
the
set
of
pro
v
able
sequen
ts,
i.e.,
 `
'
can
b
e
deriv
ed
in
the
original
system
i
 `
'
can
b
e
deriv
ed
in
the
mo
died
system.
Since
:'
is
dened
as
'
!
?
a
shorter
w
a
y
to
express
the
form
ula
in
the
h
yp
othesis
is
::',
whic
h
explains
the
name
double
ne
gation
elimination.
...
Remark.
In
CPC
(!)
one
can
pro
v
e
ev
ery
form
ula
that
can
b
e
pro
v
ed
in
IPC
(!),
the
implicational
fragmen
t
of
in
tuitionistic
prop
ositional
logic.
The
latter
system
con
tains
the
axiom
and
the
rules
(!I),
(!E)
and
(?E),
so
the
only
problem
is
to
sho
w
that
(?E)
holds
as
a
deriv
ed
rule
in
CPC(!).
That
is,
that
w
e
ha
v
e
to
sho
w
that
in
CPC(!),
 `
?
)
 `
'
for
an
y
'.
In
fact,
this
is
easy
.
If
 `
?
then
also
 ;
'
!
?
`
?
b
y
an
easy
w
eak
ening
lemma,
and
then
 `
'
b
y
(::E).
...
Remark.
Another
w
a
y
to
dene
CPC
(!)
is
to
consider
the
axiom
along
with
rules
(!I)
and
(!E)
and
then
the
follo
wing
t
w
o
rules:
 ;
'
!
 
`
'
 `
'
(P)
 `
?
 `
'
(?E)
The
left-most
rule
is
called
Peir
c
e's
law,
and
the
righ
t-most
one
is
called
ex
falso
se
quitur
quo
d
lib
et
(from
absurdit
y
follo
ws
whatev
er
y
ou
lik
e).
An
alternativ
e
is
to
consider
instead
the
follo
wing
t
w
o
rules:
 ;
'
!
?
`
'
 `
'
(P?)
 `
?
 `
'
(?E)
In
other
w
ords,
in
the
presence
of
(?E),
P
eirce's
la
w
and
the
sp
ecial
case
 
=
?
are
equiv
alen
t.
It
is
an
exercise
to
sho
w
that
these
t
w
o
systems
deriv
e
the
same
sequen
ts
as
the
system
in
tro
duced
in
Denition
...

0
Chapter
.
Classical
logic
and
con
trol
op
erators
...
Remark.
In
the
case
of
Hilb
ert-st
yle
pro
ofs
there
are
also
sev
eral
w
a
ys
to
obtain
classical
logic
from
in
tuitionistic
logic.
F
or
instance,
if
one
tak
es
absurdit
y
as
primitiv
e,
one
can
add
to
the
t
w
o
axioms
(A)
and
(A)
of
Section
.
the
principle
of
double
negation
elimination:
(('
!
?)
!
?)
!
':
Another
p
ossibilit
y
is
to
add
P
eirce's
la
w
in
the
form
(('
!
 
)
!
')
!
';
together
with
ex-falso
in
the
form:
?
!
':
...
Remark.
If
one
tak
es
negation
as
primitiv
e
in
a
Hilb
ert-st
yle
system,
one
can
add
to
the
axioms
(A)
and
(A)
the
third
axiom:
(:'
!
: 
)
!
(:'
!
 
)
!
';
whic
h
is
read:
\if
:'
implies
b
oth
 
and
: 
,
then
it
is
con
tradictory
to
assume
:',
so
'
holds."
In
case
negation
is
tak
en
as
primitiv
e
one
cannot
simply
add
::'
!
'
()
This
ma
y
seem
a
bit
strange
since
ab
o
v
e
w
e
suggested
to
add
exactly
this
axiom
when
:
is
dened
in
terms
of
?.
The
p
oin
t
is,
ho
w
ev
er,
that
in
dening
:
in
terms
of
?
w
e
get
certain
extra
axioms
for
free.
F
or
instance,
w
e
ha
v
e
ab
o
v
e
the
rule
('
!
 
)
!
('
!
( 
!
?))
!
('
!
?)
and
the
corresp
onding
axiom
('
!
 
)
!
('
!
: 
)
!
:'
do
es
not
follo
w
from
axioms
(A)
and
(A)
and
the
double
negation
ax-
iom
().
Similar
remarks
apply
to
natural
deduction
systems
in
whic
h
negation
is
tak
en
as
primitiv
e.
Apart
from
classical
prop
ositional
logic
and
in
tuitionistic
prop
ositional
logic,
there
are
man
y
other
similar
prop
ositional
logics,
although
none
of
them
are
as
fundamen
tal
as
these
t
w
o.
One
can
sho
w
that
classical
prop
o-
sitional
logic
is
a
maximal
logic
in
the
sense
that,
for
an
y
axiom
sc
heme
',
either
'
is
a
theorem
of
classical
prop
ositional
logic,
or
addition
of
'
to
classical
prop
ositional
logic
w
ould
render
the
system
inconsisten
t.
Suc
h
prop
erties
are
usually
kno
wn
as
Hilb
ert-Post
c
ompleteness.

..
The
full
system

..
The
full
system
In
the
previous
section
w
e
w
ere
concerned
with
the
implicational
fragmen
t
of
classical
prop
ositional
logic.
What
is
required
to
obtain
a
denition
of
the
whole
system
with
conjunction
and
disjunction?
One
approac
h
is
to
add
to
the
language
the
t
w
o
connectiv
es
^
and
_
and
adopt
the
in
tro
duction
and
elimination
rules
of
the
system
of
Section
..
...
Definition
(Classical
prop
ositional
logic).
Let
';
 
range
o
v
er
for-
m
ulas
in
the
full
prop
ositional
language,
i.e.,
o
v
er
L(!;
_;
^).
As
usual,
 and

denote
con
texts
for
whic
h
w
e
use
the
standard
con
v
en
tions.
The
natural
deduction
presen
tation
of
CPC
(!;
_;
^),
classical
prop
osi-
tional
logic,
is
dened
b
y
same
rules
as
in
Denition
..
with
the
addition
of
the
follo
wing
w
ell-kno
wn
rules.
 `
'
 `
 
 `
'
^
 
(^I)
 `
'
^
 
 `
'
(^E)
 `
'
^
 
 `
 
 `
'
 `
'
_
 
(_I)
 `
 
 `
'
_
 
 ;
'
`

 ;
 
`

 `
'
_
 
 `

(_E)
The
ab
o
v
e
addition
do
es
not
c
hange
an
ything
concerning
implicational
form
ulas.
...
Pr
oposition.
If
'

L(!)
and
`
'
in
CPC
(!;
_;
^),
then
`
'
in
CPC
(!).
Pr
oof.
Left
as
an
exercise.
u
t
In
other
w
ords,
the
full
system
is
conserv
ativ
e
o
v
er
the
implicational
frag-
men
t.
Ho
w
ev
er,
there
is
a
more
economical
approac
h.
In
con
trast
to
the
sit-
uation
in
in
tuitionistic
prop
ositional
logic,
w
e
ma
y
dene
conjunction
and
disjunction
as
deriv
ed
connectiv
es.
...
Definition.
Let
'
^
 
and
'
_
 
abbreviate
the
follo
wing
form
ulas,
resp
ectiv
ely:
'
^
 
=
('
!
 
!
?)
!
?;
'
_
 
=
('
!
?)
!
( 
!
?)
!
?:
...
Remark.
The
ab
o
v
e
denition
of
'
_
 
is
not
standard;
one
usually
tak
es
'
_
 
=
('
!
?)
!
 
.
This
denition
lac
ks
the
double
negation
on
 
.
F
rom
a
logical
p
oin
t
of
view
this
is
of
little
imp
ortance,
since
in
classical
logic
w
e
can
pass
bac
k
and
forth
b
et
w
een
a
form
ula
and
its
double
negation.
Ho
w
ev
er,
the
abbreviations
in
Denition
..
are
more
systematic
since
they
arise
as
sp
ecial
case
of
a
general
sc
heme
for
represen
ting
data
t
yp
es
in
t
yp
ed
-calculi,
as
w
e
shall
see
later.


Chapter
.
Classical
logic
and
con
trol
op
erators
The
follo
wing
states
that
our
denition
of
^
and
_
ha
v
e
the
in
tended
b
eha
viour.
...
Pr
oposition.
L
et
'

L(!;
_;
^)
and
and
let
'
0

L(!)
b
e
the
implic
ational
formula
obtaine
d
by
r
eplacing
every
o
c
curr
enc
e
of
^
and
_
by
their
dening
formulas
ac
c
or
ding
to
Denition
...
Then
 `
'
0
i
 j
=
'.
Pr
oof.
By
completeness
 `
'
0
i
 j
=
'
0
.
By
elemen
tary
calculations
with
truth
tables,
 j
=
'
0
i
 j
=
'.
u
t
..
T
erms
for
classical
pro
ofs
In
what
w
a
y
can
w
e
extend
the
Curry-Ho
w
ard
isomorphism
to
classical
prop
ositional
logic?
In
one
sense
this
is
easy:
w
e
just
add
a
new
term
constructor
x:M
(or
x
:
':M
in
the
Ch
urc
h
v
arian
t
of
the
calculus)
in
the
conclusion
of
the
double
negation
elimination
rule.
...
Remark.
It
is
con
v
enien
t
in
this
c
hapter
to
ha
v
e
a
v
ailable
a
system-
atic
w
a
y
of
assigning
names
to
subsets
of
the
language
of
-terms
with
pairs,
etc.
Recall
that

denotes
the
set
of
-terms,
i.e.,
the
language
generated
b
y
the
grammar:


M
::=
x
j
x:M
j
M
M
0
The
set
of
-terms,
extended
with
pairs
and
sums,
(
i
;
in
i
)
is
the
lan-
guage
generated
b
y
the
grammar:
(
i
;
in
i
)

M
::=
x
j
x:M
j
M
M
0
j
<
M
;
M
0
>
j

i
(M
)
j
in
i
(M
)
j
case
(M
;
x
0
:M
0
;
x
0
0
:M
0
0
)
W
e
shall
o
ccasionally
b
e
concerned
with
the
set

"
generated
b
y

"

M
::=
x
j
x:M
j
M
M
0
j
"(M
)
Similarly
,
w
e
ha
v
e
the
language
generated
b
y
the
grammar:

"
(
i
;
in
i
)

M
::=
x
j
x:M
j
M
M
0
j
<
M
;
M
0
>
j

i
(M
)
j
in
i
(M
)
j
case
(M
;
x
0
:M
0
;
x
00
:M
0
0
)
j
"(M
)
...
Definition
(t
yp
e-free
and
simply
t
yp
ed


-calculus,


(!)).
The
term
language


of
t
yp
e-free


-calculus
is
dened
b
y
the
grammar:



M
::=
x
j
x:M
j
M
M
0
j
x:M
The
simply
t
yp
ed


-calculus
has
as
t
yp
e
language
the
set
L(!).
The
inference
system
of
simply
t
yp
ed


-calculus
arises
from
the
system
of
sim-
ply
t
yp
ed
-calculus

a
la
Curry
b
y
addition
of
the
rule
 ;
x
:
'
!
?
`
M
:
?
 `
x:M
:
'

..
Classical
pro
of
normalization

...
Remark.
In
the
Ch
urc
h
v
arian
t
the
ob
vious
mo
dications
are
made
to
the
term
language
and
to
the
inference
rules.
In
particular,
the
double
negation
elimination
rule
b
ecomes
 ;
x
:
'
!
?
`
M
:
?
 `
x
:
'
!
?:M
:
'
W
e
then
ha
v
e
the
usual
corresp
ondence
(where
binary
`
means
deriv-
abilit
y
in
CPC
(!)
and
ternary
`
means
t
ypabilit
y
in
simply


-calculus

a
la
Curry):
...
Pr
oposition.
(i)
If
 `
M
:
'
then
j j
`
',
wher
e
j j
=
f'
j
	x
:
(x
:
')

 g.
(ii)
If
 `
'
then
ther
e
exists
an
M
such
that
 0
`
M
:
',
wher
e
 0
=
fx
'
:
'
j
'

 g.
The
assignmen
t
of
x:M
to
the
double
negation
elimination
rule
only
extends
the
Curry-Ho
w
ard
isomorphism
to
classical
logic
in
a
v
ery
naiv
e
sense:
w
e
still
ha
v
e
no
idea
what
the
computational
signicance
of

is.
Ho
w
ev
er,
w
e
shall
learn
more
ab
out
this
in
Section
..
..
Classical
pro
of
normalization
As
w
e
ha
v
e
seen
in
previous
c
hapters,
reduction
on
pro
ofs
is
a
rather
im-
p
ortan
t
concept
in
the
pro
of
theory
of
in
tuitionistic
logic;
for
classical
logic
the
same
is
the
case,
and
w
e
no
w
presen
t
certain
reductions
on
classical,
prop
ositional
pro
ofs
that
ha
v
e
app
eared
in
the
literature.
The
follo
wing
giv
es
reductions
on


-terms

a
la
Ch
urc
h.
The
corre-
sp
onding
reductions
on


-terms

a
la
Curry
are
obtained
b
y
erasing
all
t
yp
e
annotations.
...
Definition.
Dene
the
relation
!

on



a
la
Ch
urc
h
as
the
small-
est
compatible
relation
con
taining
the
follo
wing
rules:
(x
:
:('
!
 
):M
)
N
!

z
:
: 
:M
fx
:=
y
:
'
!
 
:
z
(y
N
)g;
x
:
:':x
M
!

M
pro
vided
x

FV
(M
);
x
:
:':x
y
:
:':N
!

z
:
:':N
fx;
y
:=
z
g:
where
f
:=
g
denotes
substitution
on


-terms
dened
in
the
ob
vious
w
a
y
,
and
the
notion
of
compatibilit
y
is
tak
en
in
the
ob
vious
w
a
y
relativ
e
to
the
set


.
W
e
use
the
notation
NF

etc
with
the
usual
meaning.
F
rom
the
p
oin
t
of
view
of
reduction
on
pro
ofs,
the
rst
of
these
rules
decreases
the
complexit
y
of
form
ulas
to
whic
h
w
e
apply
the
double
negation
elimination
rule.
The
second
rule
ma
y
b
e
regarded
as
a
form
of

-rule
for
.
The
third
rule
reduces
applications
of
the
double
negation
elimination
rule
nested
in
a
certain
trivial
w
a
y
.


Chapter
.
Classical
logic
and
con
trol
op
erators
...
W
arning.
The
reader
should
b
e
w
arned
that
one
nds
in
the
liter-
ature
dieren
t
t
yp
ed
-calculi
corresp
onding
to
classical
logic
that
are
not
merely
simple
v
ariations
of
the
ab
o
v
e
one.
This
is
in
particular
true
for
the
system
studied
b
y
P
arigot|see,
e.g,
[
]|whic
h
is
one
of
the
most
widely
cited
approac
hes.
Also,
dieren
t
authors
use
dieren
t
sym
b
ols
for
the
term
corresp
onding
to
v
arian
ts
of
the
double
negation
elimination
rule,
e.g.

(P
arigot
[	
,
0
,

,

],
Ong
[
]),

(Rezus
[	
,
	
]),
and
C
(Grin
[	
]
and
Murth
y
[
,

]);
the

is
tak
en
from
Rehof
and
Srensen
[	
].
...
Remark.
In
the
literature
one
nds
dieren
t
sets
of
reduction
rules
for
classical
pro
ofs,
although
almost
ev
ery
set
con
tains
a
v
arian
t
of
the
rst
of
the
ab
o
v
e
rules.
The
follo
wing
giv
es
a
c
haracterization
of
the
normal
forms
of

-reduction,
i.e.,
a
c
haracterization
of
classical
pro
ofs
without
detours.
...
Definition.
Let
N
b
e
the
smallest
class
of


-terms
closed
under
the
rule:
M

;
:
:
:
;
M
n

N
)
x

:
:
:
:
x
n
:y

:
:
:
:
y
m
:z
M

:
:
:
M
n

N
where
n;
m

0
and
z
ma
y
b
e
an
x
i
,
a
y
j
,
or
some
other
v
ariable.
...
Pr
oposition.
If
 `
M
:
'
in
simply
typ
e
d


-c
alculus,
and
M

NF


,
then
M

N
.
Pr
oof.
By
induction
on
the
deriv
ation
of
 `
M
:
'.
u
t
The
prop
osition
states
that
an
y
normal
pro
of
pro
ceeds
b
y
rst
making
certain
assumptions
(reected
b
y
the
v
ariable
z
),
then
decomp
osing
those
assumptions
in
to
simpler
form
ulas
b
y
elimination
rules
(reected
b
y
the
applications
z
M

:
:
:
M
n
),
then
using
on
the
resulting
form
ulas
some
ap-
plications
of
the
double
negation
elimination
rule
(reected
b
y
y
i
:),
and
nally
b
y
building
up
from
the
result
more
complicated
form
ulas
again
b
y
in
tro
duction
rules
(reected
b
y
the
abstractions
x
i
:).
The
follo
wing
sho
ws
that
the
reduction
rules
are
sucien
tly
strong
that
the
c
haracterization
of
their
normal
forms
en
tails
consistency
of
the
system.
...
Cor
ollar
y.
`
?.
Pr
oof.
If
`
?
then
`
M
:
?
for
some
closed
M
.
By
the
strong
normal-
ization
theorem|whic
h
will
b
e
pro
v
ed
later|w
e
can
assume
that
M
is
in
normal
form.
Then
b
y
induction
on
the
deriv
ation
of
M

N
sho
w
that
`
M
:
?
is
imp
ossible.
u
t

..
Denabilit
y
of
pairs
and
sums

..
Denabilit
y
of
pairs
and
sums
W
e
sa
w
in
the
second
section
ab
o
v
e
that
one
can
dene
conjunction
and
disjunction
in
classical
prop
ositional
logic.
In
tuitiv
ely
sp
eaking,
at
the
lev
el
of
terms,
this
suggest
that
w
e
should
b
e
able
to
dene
pairs
and
sums.
In
this
section
w
e
sho
w
that
this
is
indeed
p
ossible.
F
or
simplicit
y
w
e
w
ork
in
this
section
with


-terms

a
la
Curry
.
First
w
e
in
tro
duce
the
extension
that
corresp
onds
to
the
full
system
CPC
(!;
_;
^).
...
Definition.
The
term
language


(
i
;
in
i
)
of
t
yp
e-free


-calculus
extended
with
pairs
and
sums
is
dened
b
y
the
grammar:


(
i
;
in
i
)

M
::=
x
j
x:M
j
M
M
0
j
<
M
;
M
0
>
j

i
(M
)
j
in
i
(M
)
j
case
(M
;
x
0
:M
0
;
x
00
:M
0
0
)
j
x:M
The
simply
t
yp
ed


-calculus
extended
with
pairs
and
sums,
denoted
b
y


(!;
_;
^),
has
as
t
yp
e
language
the
set
L(!;
_;
^).
The
inference
system
of


(!;
_;
^)
arises
from
that
of


(!)
b
y
addition
of
the
usual
rules

a
la
Curry
for
t
yping
pairs
and
sums.
The
follo
wing
sho
ws
ho
w
to
dene
pairs
and
sums.
...
Definition.
Dene
the
follo
wing
abbreviations.
<
P
;
Q
>
=
z
:z
P
Q;

i
(P
)
=
k
:P
(x

:x

:k
x
i
);
in
i
(P
)
=
y

:y

:y
i
P
;
case
(P
;
x

:Q

;
x

:Q

)
=
k
:P
(x

:k
Q

)
(x

:k
Q

):
By
some
elemen
tary
calculations,
one
can
then
pro
v
e
the
follo
wing.
...
Pr
oposition.
L
et
M



(
i
;
in
i
)
and
let
M
0



(
i
;
in
i
)
b
e
the
term
obtaine
d
by
exp
ansion
ac
c
or
ding
to
the
abbr
eviations
in
the
pr
e
c
e
ding
denition.
L
et
'

L(!;
_;
^)
and
let
'
0

L(!)
b
e
the
formula
obtaine
d
by
r
eplacing
every
o
c
curr
enc
e
of
^
and
_
by
their
dening
formulas
ac
c
or
ding
to
Denition
...
.
If
 `
M
:
'
in
simply
typ
e
d


-c
alculus
extende
d
with
p
airs
and
sums,
then
 `
M
0
:
'
0
in
the
simply


-c
alculus.
.
If
M
!


N
(using
r
e
ductions
for
p
airs
and
sums)
then
M
0
!
!


N
0
,
wher
e
N
0
is
the
exp
ansion
of
N
ac
c
or
ding
to
the
pr
e
c
e
ding
denition.
The
denition
of
pairs
is
the
standard
one
from
t
yp
e-free
-calculus
(see
Chapter
),
while
the
pro
jection
construction
is
dieren
t
from
that
normally
emplo
y
ed
in
t
yp
e-free
-calculus,
viz.
M
(x

:x

:x
i
).
This
latter
denition


Chapter
.
Classical
logic
and
con
trol
op
erators
do
es
not
w
ork
b
ecause
x

:x

:x
i
has
t
yp
e
'

!
'

!
'
i
instead
of
the
t
yp
e
'

!
'

!
?,
whic
h
M
exp
ects.
Changing
the
denition
of
conjunctiv
e
t
yp
es
to
solv
e
the
problem
is
not
p
ossible;
it
leads
to
the
t
yp
e
of
a
pair
b
eing
dep
enden
t
on
whic
h
comp
onen
t
a
surrounding
pro
jection
pic
ks.

The
op
erator

solv
es
the
problem
b
y
means
of
an
application
whic
h
turns
the
t
yp
e
of
x
i
in
to
?
regardless
of
i.
When
the
pro
jection
is
calculated,
the
k
reac
hes
its

and
can
b
e
remo
v
ed
b
y
the
second
reduction
rule
for
:


(<
M

;
M

>)

k
:(f
:f
M

M

)
x

:x

:k
x

!

k
:(x

:x

:k
x

)
M

M

!
!

k
:k
M

!

M

As
men
tioned
earlier,
the
denition
for
disjunctiv
e
form
ulas
ab
o
v
e
is
not
standard
in
logic.
The
standard
denition
is
('
!
?)
!
 
instead
of
('
!
?)
!
( 
!
?)
!
?.
Ho
w
ev
er,
when
one
tries
to
pro
v
e
the
de-
riv
ed
inference
rules
for
this
translation
it
turns
out
that
the
corresp
onding
constructions
for
injection
and
case
analysis
are
v
ery
dieren
t
from
those
dening
pairs
and
pro
jections.
Sp
ecically
,
to
ha
v
e
the
desired
reduction
rule
hold
deriv
ed
one
w
ould
need
to
add
extra
p
o
w
er
to
.
The
presen
t
denition
and
corresp
onding
dened
constructions
can
b
e
motiv
ated
b
y
cor-
resp
onding
denition
in
second-order
logic,
whic
h
w
e
will
encoun
ter
in
a
later
c
hapter.
..
Em
b
edding
in
to
in
tuitionistic
prop
ositional
logic
In
this
section
w
e
shall
sho
w
that
classical
logic
can
b
e
em
b
edded
in
to
in
tu-
itionistic
logic
in
a
certain
sense.
T
ranslations
lik
e
the
follo
wing
ha
v
e
b
een
studied
since
the
	0s
b
y
Kol-
mogoro
v,
Gen
tzen,
G
odel,
and
Kuro
da.
...
Definition.
Dene
the
translation
k
from
implicational
form
ulas
to
implicational
form
ulas
b
y:
k
()
=
::
k
(?)
=
::?
k
('
!
 
)
=
::(k
(')
!
k
( 
))
W
e
aim
to
sho
w
that
if
'
is
classically
pro
v
able,
then
k
(')
is
in
tuition-
istically
pro
v
able.
W
e
do
this
b
y
giving
a
translation
of
classical
pro
ofs
of
'
in
to
in
tuitionistic
pro
ofs
of
k
(').
More
precisely
,
the
translation
is
stated
on
terms
represen
ting
these
pro
ofs.

If
one
is
willing
to
settle
for
a
w
eak
er
notion
of
pairs
where
b
oth
comp
onen
t
m
ust
ha
v
e
the
same
t
yp
e,
then
this
problem
v
anishes.
This
sho
ws
that
pairs
with
comp
onen
ts
of
the
same
t
yp
e
can
b
e
represen
ted
in
the
simply
t
yp
ed
-calculus.

..
Em
b
edding
in
to
in
tuitionistic
prop
ositional
logic

...
Definition.
Dene
the
translation
t
from


-terms
to
-terms
b
y:
t(x)
=
k
:x
k
t(x:M
)
=
k
:k
x:t(M
)
t(M
N
)
=
k
:t(M
)
(m:m
t(N
)
k
)
t(x:M
)
=
k
:(x:t(M
))
(h:h
j:i:i
(j
k
))
z
:z
The
follo
wing
sho
ws
that
k
denes
an
em
b
edding
of
classical
logic
in
to
in
tuitionistic
logic.
...
Pr
oposition.
If
 `
M
:
'
in
simply
typ
e
d


-c
alculus,
then
k
( )
`
t(M
)
:
k
(')
in
simply
typ
e
d
-c
alculus.
This
giv
es
another
pro
of
of
consistency
of
classical
prop
ositional
logic:
if
classical
logic
is
inconsisten
t,
so
is
in
tuitionistic
logic.
...
Pr
oposition.
`
?
in
classic
al
pr
op
ositional
lo
gic.
Pr
oof.
If
`
M
:
?
in
classical
prop
ositional
logic,
then
`
t(M
)
:
::?
in
in
tuitionistic
logic,
and
then
`
t(M
)
z
:z
:
?
in
in
tuitionistic
logic,
a
con
tradiction.
u
t
The
ab
o
v
e
pro
of
giv
es
a
conserv
ativit
y
result:
if
?
is
pro
v
able
in
classical
logic,
?
is
pro
v
able
already
in
in
tuitionistic
logic.
The
construction
can
b
e
generalized
to
other
form
ulas
than
?;
in
fact,
this
w
a
y
one
can
pro
v
e
that
an
y
form
ula
of
form
x	y
:
P
(x;
y
),
where
P
is
a
primitiv
e
recursiv
e
predicate,
is
pro
v
able
in
classical
arithmetic
(i.e.,
P
eano
Arithmetic)
i
it
is
pro
v
able
in
in
tuitionistic
arithmetic
(i.e.,
Heyting
Arithmetic).
F
orm
ulas
of
this
form
are
quite
imp
ortan
t
since
they
include,
e.g.,
ev
ery
assertion
that
some
algorithm
terminates
(\for
an
y
input
x
there
is
a
terminating
computation
y
").
In
other
w
ords,
as
concerns
pro
v
abilit
y
of
termination
of
algorithms
there
is
no
dierence
b
et
w
een
in
tuitionistic
and
classical
logic.
On
the
one
hand,
this
means
that
constructivists
should
raise
no
ob-
jection
to
the
use
of
classical
logic
in
this
sp
ecial
case
since
an
y
classical
pro
of
can
b
e
con
v
erted
in
to
an
in
tuitionistic
one
of
the
same
form
ula.
Con-
v
ersely
,
classical
logicians
cannot
claim
that
an
y
logical
strength
is
lost
b
y
the
restriction
to
in
tuitionistic
logic.
The
follo
wing
sho
ws
that
the
translation
t
in
ternalizes

con
v
ersion
b
y

-con
v
ersion.
...
Pr
oposition.
If
M
=


N
then
t(M
)
=

t(N
).
By
analyzing
the
connection
b
et
w
een

and

in
some
more
detail,
one
can
pro
v
e:
...
Pr
oposition.
If
M




then
t(M
)



.


Chapter
.
Classical
logic
and
con
trol
op
erators
...
Cor
ollar
y.
The
r
elation
!


is
str
ongly
normalizing
on
typ
able
terms.
Pr
oof.
By
the
preceding
prop
osition,
Prop
osition
..,
and
strong
nor-
malization
of
simply
t
yp
ed
-calculus.
u
t
..
Con
trol
op
erators
and
CPS
translations
So
far
w
e
ha
v
e
not
rev
ealed
what
the
computational
meaning
of

is;
in
this
section
w
e
nally
release
the
susp
ension:

is
a
con
trol
op
erator!
Con
trol
op
erators
app
ear
in
functional
programming
languages
lik
e
Sc
heme
(Call/cc),
ML
(exceptions),
Lisp
(catc
h
and
thro
w).
Let
us
illustrate,
b
y
w
a
y
of
example,
ho
w
con
trol
op
erators
can
b
e
used
to
program
ecien
tly
and
concisely
.
W
e
shall
consider
the
problem
of
writing
a
function
M
whic
h
tak
es
a
binary
tree
of
in
teger
no
des
and
returns
the
result
of
m
ultiplying
all
the
no
de
v
alues.
Of
course,
this
problem
raises
the
eciency
issue
of
what
to
do
when
a
no
de
v
alue
of
0
is
encoun
tered.
Our
example
programs
will
b
e
written
in
syn
tactically
sugared
SCHEME,
the
sugar
b
eing
that
instead
of
(define
M
N
)
w
e
write
M
=
N
and
in-
stead
of
(lambda
(x)
M
)
w
e
write

:
x.M
,
and
for
(letrec
([f
t])
t')
w
e
write
(let
f
=
t
in
t')
.
Our
rst
solution
is
the
straigh
tforw
ard
purely
functional
one
whic
h
trades
eciency
o
for
elegance.
W
e
supp
ose
giv
en
auxiliary
functions
mt?
testing
for
the
empt
y
tree,
num
selecting
the
no
de
v
alue
of
the
ro
ot
no
de,
lson
and
rson
returning
the
left
and
righ
t
subtrees.
...
Example.
(F
unctional,
elegan
t,
inecien
t
v
ersion)
M
=

:
t.(if
(mt?
t)

(*
(num
t)
(*
(M
(lson
t)))(M
(rson
t)))))
One
can
optimize
M
so
as
to
stop
m
ultiplying
as
so
on
as
a
no
de
v
alue
of
0
is
encoun
tered.
This
can
b
e
done
in
purely
functional
st
yle,
b
y
means
of
tests.
Our
next
solution
em
b
o
dies
that
strategy
.
Here
w
e
assume
a
constructor
EX
and
a
test
function
EX?
suc
h
that
(EX
M
)
tags
M
with
the
mark
er
EX,
and
EX?
tests
for
the
presence
of
the
tag.
F
urthermore,
w
e
assume
a
0
test
function
zero?.
The
reader
will
probably
agree
that
elegance
(or
at
the
least
conciseness)
has
no
w
b
een
traded
o
for
eciency
.
...
Example.
(F
unctional,
inelegan
t,
ecien
t
v
ersion)
M
=

:
t.(if
(mt?
t)

(if
(zero?
(num
t))
(EX
0)

..
Con
trol
op
erators
and
CPS
translations
	
(let
((l
(M
(lson
t))))
(if
(EX?
l)
(let
((r
(M
(rson
t))))
(if
(EX?
r)
r
(*
(num
t)
(*
l
r))))))))
The
function
M
will
return
an
in
teger,
the
pro
duct
of
all
the
tree
no
des,
if
no
no
de
con
tains
0,
or
the
v
alue
(EX
0)
if
an
y
no
de
con
tains
0.
W
e
ma
y
see
the
EX
tag
as
a
kind
of
exc
eption
mark
er
whic
h
is
propagated
explicitly
up
the
recursion
tree.
In
this
v
ein
one
could
view
the
EX
constructor
as
an
injection
function
taking
an
in
teger
to
an
elemen
t
of
a
sum
t
yp
e
of
the
form
int
_
ex.
No
w,
the
catch/throw
mec
hanism
is
w
ell
suited
to
handle
exactly
this
kind
of
problem
where
an
exceptional
v
alue
is
propagated.
Eciency
is
enhanced
b
y
catch
and
throw
b
ecause
all
the
propagation
is
done
in
a
single
step
(or
jump,
as
w
e
migh
t
sa
y).
This
lea
v
es
us
with
a
relativ
ely
elegan
t
and
ecien
t
but
non
functional
v
ersion,
as
sho
wn
in
the
next
example
program.
...
Example.
(Non
functional,
elegan
t,
ecien
t
v
ersion)
M
=

:
t.
catch
j
in
(let
L
=

:
t'.(if
(mt?
t')

(if
(zero?
(num
t'))
(throw
j
0)
(*
(num
t')
(*
(L
(lson
t'))(L
(rson
t'))))))
in
(L
t)
)
It
is
an
in
teresting
fact
that
the
mec
hanism
used
in
Example
..
can
b
e
in
ternalized
in
the
purely
functional
part
of
the
language
b
y
the
so-called
CPS-transformation
tec
hnique.
Applying
that
translation
to
the
program
with
catc
h
and
thro
w
giv
es:
...
Example.
(CPS
v
ersion
of
M)
M
=

:
t.

:
k.
(if
(mt?
t)
(k
)
(if
(zero?
(num
t))
0
((M
(lson
t))
(
:
l.((M
(rson
t))
(
:
r.(k
(*
(num
t)
(*
l
r)))))))))
The
non-functional
program
can
b
e
written
as
follo
ws
in
the
t
yp
e-free


-calculus.

0
Chapter
.
Classical
logic
and
con
trol
op
erators
M
=
t:
j:j
(Y
(f
:t
0
:
(if
(mt?
t
0
)

(if
(zero?
(num
t
0
))
"(j
0)
(*
(num
t
0
)
(*
(f
(lson
t
0
))(f
(rson
t
0
)))))))
t),
where
Y
denotes
Ch
urc
h's
xp
oin
t
com
binator
and
"(M
)
abbreviates
x:M
,
for
x

FV
(M
).
It
is
instructiv
e
to
v
erify
that,
e.g.,
for
T

<,<0,nil,nil>,nil>,
w
e
ha
v
e
MT
=
0,
noticing
ho
w
an
\exception"
is
raised
as
the
no
de
v
alue
0
is
encoun
tered.
In
conclusion,
the

ma
y
b
e
regarded
as
a
con
trol
op
erator
similar
to
call/cc
of
Sc
heme
and
exceptions
of
ML,
and
the
double
negation
em
b
edding
of
classical
logic
in
to
in
tuitionisitic
logic
corresp
onds
to
w
ell-kno
wn
CPS-
translations
of
terms
with
con
trol
op
erators
in
to
pure,
con
trol-op
erator-free
languages.
..
Historical
remarks
F
elleisen
and
his
co-w
ork
ers
studied
-calculi
with
con
trol
op
erators
in
an
un
t
yp
ed
setting.
Their
aim
w
as
to
pro
vide
a
foundation
of
t
yp
e-free
func-
tional
programming
langauges
with
con
trol
op
erators
similarly
to
the
w
a
y
-calculus
ma
y
b
e
regarded
as
a
foundation
of
t
yp
e-free
pure
functional
programming
languages.
F
elleisen
devised
a
con
trol
calculus,
an
extension
of
the
-calculus,
and
carried
out
what
could
aptly
b
e
called
Plotkin
's
pr
o
gr
am
(see
[
])
for
the
study
of
the
relation
b
et
w
een
calculi
and
programming
languages.
Grin
disco
v
ered
in
		0,
in
an
attempt
to
incorp
orate
con
trol
op
erators
in
to
the
w
orld
of
t
yp
ed
-calculi,
that
F
elleisen's
C
-op
erator
could
b
e
t
yp
ed
b
y
the
classical
double
negation
elimination
rule
[	
].
Using
this
rule
do
es,
ho
w
ev
er,
lead
to
certain
diculties
b
ecause
t
yping
is
not
in
general
preserv
ed
under
reduction
(\F
ailure
of
Sub
ject
Reduction.")
This
defect
w
as
repaired
b
y
Grin
via
a
so-called
computational
sim
ulation.
Later,
Murth
y
o
v
ercame
the
same
diculties
b
y
c
hanging
the
t
yp
e
sys-
tem
in
to
a
so-called
pseudo-classical
logic.
Applying
conserv
ativit
y
results
of
classical
logics
o
v
er
corresp
onding
minimal
logics
Murth
y
sho
w
ed
in
[
]
that
for
a
certain
class
of
classically
pro
v
able
form
ulas
the
Realizabilit
y
In-
terpretation
remains
sound.
This
w
as
done
using
CPS-translations
of
con
trol
op
erator
calculi
in
to
pure
-calculi.
Since
the
seminal
w
ork
of
Grin
and
Murth
y
,
n
umerous
systems
ha
v
e
app
eared
that
connect
classical
logic
and
con
trol
op
erators;
indeed,
the
study
of
classical
logic
in
connection
with
the
Curry-Ho
w
ard
isomorphism
no
w

.	.
Exercises

constitutes
a
separate
eld.
.	.
Exercises
.	..
Exer
cise.
Pro
v
e
Prop
osition
...
.	..
Exer
cise.
.
Sho
w
that
P
eirce's
la
w
can
b
e
deriv
ed
from
the
sp
ecial
case
of
P
eirce's
la
w
and
ex-falso.
.
Sho
w
that
double
negation
elimination
can
b
e
deriv
ed
from
the
sp
ecial
case
of
P
eirce's
la
w
and
ex-falso.
.
Sho
w
that
the
sp
ecial
case
of
P
eirce's
la
w
and
ex-falso
can
b
oth
b
e
deriv
ed
from
double
negation
elimination.
.	..
Exer
cise.
Pro
v
e
that
 `
'
can
b
e
deriv
ed
in
the
system
of
Deni-
tion
..
i
 `
'
can
b
e
deriv
ed
in
the
system
of
Remark
...
.	..
Exer
cise.
Let
'
b
e
some
implicational
form
ula
suc
h
that
`
'
in
CPC
(!),
and
consider
the
system
Z
whic
h
arises
from
CPC
(!)
b
y
adding
all
instances
(substituting
implicational
form
ulas
for
prop
ositional
v
ariables)
of
'
as
axioms.
Sho
w
that
`
?
in
Z
.
.	..
Exer
cise.
pro
v
e
Prop
osition
...
.	..
Exer
cise.
Sho
w
that
in
CPC
(!;
_;
^)
one
can
deriv
e
`

_
:.
.	..
Exer
cise.
The
rule
(x
:
:('
!
 
):M
)
N
!

z
:
: 
:M
fx
:=
y
:
'
!
 
:
z
(y
N
)g
can
only
reduce
's
inside
an
application.
The
follo
wing
aggressiv
e
v
arian
t
do
es
not
w
ait
for
the
application:
(x
:
:('
!
 
):M
)
!

a
:
'
:
z
:
: 
:M
fx
:=
y
:
'
!
 
:
z
(y
a)g
Corresp
onding
to
these
t
w
o
dieren
t
rules,
giv
e
reduction
rules
for
the
con-
structs

i
(x
:
:('
^
 
):M
)
and
x
:
:('
^
 
):M
.
Can
y
ou
giv
e
corresp
onding
rules
for
disjunction?
.	..
Exer
cise.
Sho
w
that
!


on


-terms

a
la
Curry
is
Ch
urc
h-Rosser,
or
sho
w
that
!


on


-terms

a
la
Curry
is
not
Ch
urc
h-Rosser.
Same
question
for
!


on
terms

a
la
Ch
urc
h.
.	.	.
Exer
cise.
Do
es
the
follo
wing
hold?
F
or
an
y
M



,
M

N
i
M

NF


.


Chapter
.
Classical
logic
and
con
trol
op
erators

CHAPTER
	
First-order
logic
In
this
c
hapter
w
e
extend
our
consideration
to
form
ulas
with
quan
tiers
and
generalize
the
pro
of
systems
and
in
terpretations
seen
in
earlier
c
hapters
to
the
rst-order
case.
	..
Syn
tax
of
rst-order
logic
The
ob
jects
in
v
estigated
b
y
prop
ositional
logic
are
comp
ound
statemen
ts,
built
from
some
atomic
statemen
ts
(represen
ted
b
y
prop
ositional
v
ariables)
b
y
means
of
logical
connectiv
es.
The
goal
is
to
understand
relations
b
e-
t
w
een
comp
ound
statemen
ts
dep
ending
on
their
structure,
rather
than
on
the
actual
\meaning"
of
the
atoms
o
ccurring
in
these
statemen
ts.
But
math-
ematics
alw
a
ys
in
v
olv
es
reasoning
ab
out
individual
obje
cts
,
and
statemen
ts
ab
out
prop
erties
of
ob
jects
can
not
alw
a
ys
b
e
adequately
expressed
in
the
prop
ositional
language.
The
famous
syllogism
is
an
example:
All
h
umans
are
mortal;
So
crates
is
a
h
uman;
Therefore
So
crates
is
mortal.
T
o
express
this
reasoning
in
the
language
of
formal
logic,
w
e
need
to
quan
tify
o
v
er
individual
ob
jects
(h
umans),
and
of
course
w
e
need
predicates
(rela-
tions)
on
individual
ob
jects.
The
logical
systems
in
v
olving
these
t
w
o
features
are
kno
wn
under
the
names
\pr
e
dic
ate
lo
gic
",
\pr
e
dic
ate
c
alculus
",
\quanti-
er
c
alculus
"
or
\rst-or
der
lo
gic
".
This
section
describ
es
a
v
arian
t
of
the
rst-order
syn
tax.
Suc
h
syn
tax
is
alw
a
ys
dened
with
resp
ect
to
a
xed
rst-order
signature
,
whic
h
is
t
ypically
assumed
to
b
e
nite.
Recall
from
Chapter

that
a
signature
is
a
family
of
function,
relation
and
constan
t
sym
b
ols,
eac
h
with
a
xed
arit
y
.
Also
recall
that
algebr
aic
terms
o
v
er

are
individual
v
ariables,
constan
ts
and
expressions
of
the
form
(f
t

:
:
:
t
n
),
where
f
is
an
n-ary
function
sym
b
ol,
and
t

;
:
:
:
;
t
n
are
algebraic
terms
o
v
er
.



Chapter
	.
First-order
logic
	...
Definition.
.
An
atomic
formula
is
an
expression
of
the
form
(r
t

:
:
:
t
n
),
where
r
is
an
n-ary
relation
sym
b
ol,
and
t

;
:
:
:
;
t
n
are
algebraic
terms
o
v
er
.
.
The
set


of
rst-or
der
formulas
o
v
er
,
is
the
least
set
suc
h
that:

All
atomic
form
ulas
and
?
are
in


;

If
';
 



then
('
!
 
);
('
_
 
);
('
^
 
)



;

If
'



and
x
is
an
individual
v
ariable,
then
x
';
	x
'



.
.
As
usual,
w
e
abbreviate
('
!
?)
as
:'
and
(('
!
 
)
^
( 
!
'))
as
('
$
 
).
.
A
form
ula
is
op
en
i
it
con
tains
no
quan
tiers.
	...
Convention.
The
paren
theses-a
v
oiding
con
v
en
tions
used
for
prop
o-
sitional
form
ulas
apply
as
w
ell
to
rst-order
form
ulas.
Ho
w
ev
er,
there
is
no
general
consensus
ab
out
ho
w
quan
tiers
should
b
e
written.
One
con
v
en
tion,
whic
h
is
common
in
logic,
is
that
a
quan
tier
is
an
op
erator
of
highest
pri-
orit
y
,
so
that
\x
'
!
 
"
stands
for
\(x
')
!
 
".
The
other
con
v
en
tion
seems
to
ha
v
e
originated
in
t
yp
e
theory
and
is
that
the
quan
tier
scop
e
extends
as
m
uc
h
to
the
righ
t
as
p
ossible.
In
order
to
a
v
oid
confusion,
w
e
will
sometimes
use
extra
paren
theses
and
sometimes
w
e
will
use
an
explicit
dot
notation.
Namely
,
w
e
will
write
\x:'
!
 
"
for
\x('
!
 
)"
and
\x':
!
 
"
instead
of
\(x')
!
 
".
(Needless
to
sa
y
,
authors
sometimes
forget
ab
out
suc
h
con
v
en
tions.
The
reader
should
b
e
w
arned
that
eac
h
of
the
t
w
o
authors
has
got
used
to
a
dieren
t
st
yle.)
	...
Definition.
.
If
t
is
an
algebraic
term
then
F
V
(t)
stands
for
the
set
of
all
v
ariables
o
ccurring
in
t.
.
The
set
F
V
(')
of
free
v
ariables
of
a
form
ula
'
is
dened
b
y
induction:

F
V
(r
t

:
:
:
t
n
)
=
F
V
(t

)
[
:
:
:
[
F
V
(t
n
);

F
V
('
!
 
)
=
F
V
('
_
 
)
=
F
V
('
^
 
)
=
F
V
(')
[
F
V
( 
);

F
V
(x
')
=
F
V
(	x
')
=
F
V
(')
 fxg.
.
A
sentenc
e
,
also
called
a
close
d
formula
,
is
a
form
ula
without
free
v
ariables.
	...
Definition.
The
denition
of
a
substitution
of
a
term
for
an
individ-
ual
v
ariable,
denoted
'[x
:=
t],
resp
ects
the
quan
tiers
as
v
ariable-binding
op
erators,
and
th
us
m
ust
in
v
olv
e
v
ariable
renaming.
F
ormally
,

	..
In
tuitiv
e
seman
tics

x[x
:=
t]
=
t;
y
[x
:=
t]
=
y
;
if
y
=
x;
(f
t

:
:
:
t
n
)[x
:=
t]
=
f
t

[x
:=
t]
:
:
:
t
n
[x
:=
t];
(r
t

:
:
:
t
n
)[x
:=
t]
=
r
t

[x
:=
t]
:
:
:
t
n
[x
:=
t];
(x')[x
:=
t]
=
x';
(y
')[x
:=
t]
=
y
'[x
:=
t],
if
y
=
x,
and
y

FV(t)
or
x

FV
(');
(y
')[x
:=
t]
=
z
'[y
:=
z
][x
:=
t],
if
y
=
x
and
y

FV
(t)
and
x

FV
(');
(	x')[x
:=
t]
=
	x';
(	y
')[x
:=
t]
=
	y
'[x
:=
t]
if
y
=
x,
and
y

FV(t)
or
x

FV
(');
(	y
')[x
:=
t]
=
	z
'[y
:=
z
][x
:=
t]
if
y
=
x
and
y

FV(t)
and
x

FV(').
where
z
is
a
fresh
v
ariable.
The
simultane
ous
substitution
,
written
'[x

:=
t

;
:
:
:
;
x
n
:=
t
n
],
is
the
term
'[x

:=
s

]



[x
n
:=
s
n
][y


:=
z


]



[y

m

:=
z

m

]



[y
n

:=
z
n

]



[y
n
m
n
:=
z
n
m
n
];
where
z
i

;
:
:
:
;
z
i
m
i
are
all
v
ariables
in
t
i
,
the
v
ariables
y
i
j
are
all
fresh
and
dieren
t,
and
s
i
=
t
i
[z
i

:=
y
i

]



[z
i
m
i
:=
y
i
m
i
],
for
all
i.
	...
Convention.
It
is
a
common
con
v
en
tion
to
write
e.g.,
'(x;
y
;
z
)
in-
stead
of
',
to
stress
that
x;
y
;
z
ma
y
o
ccur
in
'.
In
this
case,
the
notation
lik
e
'(t;
s;
u)
is
used
as
a
shorthand
for
'[x
:=
t;
y
:=
s;
z
:=
u].
W
e
will
also
use
this
con
v
en
tion,
but
one
should
b
e
a
w
are
that
it
is
not
a
part
of
the
syn
tax.
It
is
not
customary
to
in
tro
duce
alpha-con
v
ersion
on
rst-order
form
u-
las.
T
ypically
,
alpha-equiv
alen
t
form
ulas
are
considered
dieren
t,
although
they
are
equiv
alen
t
with
resp
ect
to
all
reasonable
seman
tics,
and
one
can
b
e
deriv
ed
from
another
with
all
reasonable
pro
of
systems.
Ho
w
ev
er,
for
uniformit
y
of
our
presen
tation,
w
e
prefer
to
allo
w
for
the
alpha-con
v
ersion
(dened
in
the
ob
vious
w
a
y)
and
iden
tify
alpha-con
v
ertible
form
ulas
from
no
w
on.
	..
In
tuitiv
e
seman
tics
The
Brou
w
er-Heyting-Kolmogoro
v
in
terpretation
of
prop
ositional
form
ulas
(Chapter
)
extends
to
rst-order
logic
as
follo
ws:

A
c
onstruction
of
x
'(x)
is
a
metho
d
(function)
tr
ansforming
every
obje
ct
a
into
a
c
onstruction
of
'(a).

A
c
onstruction
of
	x
'(x)
is
a
p
air
c
onsisting
of
an
obje
ct
a
and
a
c
onstruction
of
'(a).
Note
that
the
BHK-in
terpretation
should
b
e
tak
en
with
resp
ect
to
some
do-
main
of
\ob
jects".
These
ob
jects
are
syn
tactically
represen
ted
b
y
algebraic
terms.


Chapter
	.
First-order
logic
	...
Example.
Consider
the
follo
wing
form
ulas:
.
:	x
':
$
x:';
.
:x
':
$
	x:';
.
( 
!
x
'(x))
$
x( 
!
'(x)),
where
x

F
V
( 
);
.
( 
!
	x
'(x))
$
	x( 
!
'(x)),
where
x

F
V
( 
);
.
x('
!
 
)
!
(	x
':
!
	x
 
);
.
x( 
_
'(x))
$
 
_
x
'(x),
where
x

F
V
( 
);
.
x('
!
 
):
!
(x
':
!
x
 
);
.
(x
'(x):
!
 
)
!
	x('(x)
!
 
),
where
x

F
V
( 
);
	.
x
'(x):
!
'(t);
0.
::x('
_
:');
.
 
!
x
 
,
where
x

F
V
( 
);
.
	x(	y
'(y
):
!
'(x))
Although
all
these
form
ulas
are
all
classical
rst-order
tautologies,

one
will
ha
v
e
diculties
nding
BHK-in
terpretations
for
some
of
them.
	...
Remark.
It
should
b
e
no
surprise
when
w
e
sa
y
that
univ
ersal
quan-
tication
is
a
generalization
of
conjunction.
Indeed,
the
sen
tence
\all
cats
ha
v
e
tails"
is
quite
lik
e
an
innite
conjunction
of
statemen
ts
concerning
eac
h
individual
cat
separately
.
In
quite
the
same
spirit
one
can
sa
y
that
existen-
tial
quan
tication
is
a
generalized
disjunction.
This
idea
is
reected
b
y
the
algebraic
seman
tics,
where
w
e
in
terpret
quan
tiers
as
(p
ossibly
innite)
joins
and
meets,
see
Denitions
	..
and
	...
But
the
BHK-in
terpretation
as
ab
o
v
e
hin
ts
for
another
corresp
ondence:
b
et
w
een
univ
ersal
quan
tication
and
implication,
b
ecause
in
b
oth
cases
w
e
ha
v
e
a
function
as
a
construction.
The
analogy
is
so
strong
that
in
certain
systems
with
quan
tiers,
implication
is
just
syn
tactic
sugar.
W
e
will
see
it
in
Chapters
0
and
.
	..
Pro
of
systems
The
three
main
approac
hes:
natural
deduction,
sequen
t
calculus
and
the
Hilb
ert
st
yle
extend
to
rst-order
logic
b
y
adding
suitable
rules
and
axioms
to
the
rules
and
axiom
sc
hemes
for
prop
ositional
logic.
The
notation
`
N
,
`
L
,
etc.,
is
the
ob
vious
mo
dication
from
the
prop
ositional
case.

W
e
assume
that
the
reader
is
familiar
with
classical
rst-order
logic.
A
suggested
textb
o
ok
is
e.g.
[0
].

	..
Pro
of
systems

Natur
al
de
duction
W
e
extend
the
system
of
natural
deduction
with
the
follo
wing
rules
to
in-
tro
duce
and
eliminate
quan
tiers:
(I)
 `
'
 `
x
'
(x

F
V
( ))
(E
)
 `
x
'
 `
'[x
:=
t]
(	I
)
 `
'[x
:=
t]
 `
	x
'
(	E
)
 `
	x
'
 ;
'
`
 
 `
 
(x

F
V
( ;
 
))
The
reader
should
b
e
w
arned
that
our
rules
are
suc
h
b
ecause
w
e
ha
v
e
agreed
on
alpha-con
v
ersion
of
form
ulas.
Otherwise,
one
has
to
mo
dify
rules
(I)
and
(	E)
to
w
ork
for
an
y
alpha-v
arian
t
of
the
quan
tier
bindings.
Similar
mo
dications
w
ould
ha
v
e
to
b
e
done
on
the
other
pro
of
systems
to
follo
w.
Se
quent
c
alculus
Here
are
classical
sequen
t
calculus
rules
for
quan
tiers.
Note
the
symmetry
b
et
w
een
the
t
w
o
quan
tiers.
(L
)
 ;
'[x
:=
t]
`

 ;
x
'
`

(R)
 `
';

 `
x
';

(x

F
V
( ;
))
(	L)
 ;
'
`

 ;
	x
'
`

(x

F
V
( ;
))
(	R)
 `
'[x
:=
t];

 `
	x
';

T
o
obtain
in
tuitionistic
sequen
t
calculus
w
e
restrict
ourselv
es
to
single
for-
m
ulas
at
the
righ
t-hand
sides
(
consists
of
a
single
form
ula
and

is
alw
a
ys
empt
y).
(L)
 ;
'[x
:=
t]
`

 ;
x
'
`

(R)
 `
'
 `
x
'
(x

F
V
( ))
(	L)
 ;
'
`

 ;
	x
'
`

(x

F
V
( ;

))
(	R
)
 `
'[x
:=
t]
 `
	x
'
	...
Theorem
(Cut
elimination).
F
or
al
l
'
and
 ,
if
the
se
quent
 `
'
has
a
pr
o
of
then
it
has
a
cut-fr
e
e
pr
o
of.
The
follo
wing
w
as
probably
rst
sho
wn
b
y
Rasio
w
a
and
Sik
orski
using
the
top
ological
space
seman
tics,
see
[
].
	...
Cor
ollar
y
(Existence
prop
ert
y).
If
`
	x
'
then
ther
e
exists
a
term
t
such
that
`
'[x
:=
t].


Chapter
	.
First-order
logic
Pr
oof.
The
last
rule
in
a
cut-free
pro
of
of
`
	x
'
m
ust
b
e
(	R).
u
t
Note
that
if
the
signature
consists
of
relation
sym
b
ols
only
(and
th
us
the
only
terms
are
v
ariables)
then
`
	x
'
implies
`
x
'
!
Hilb
ert-style
pr
o
ofs
It
is
dicult
to
nd
t
w
o
dieren
t
authors
who
w
ould
giv
e
iden
tical
Hilb
ert-
st
yle
pro
of
systems.

Our
c
hoice
is
as
follo
ws.
W
e
tak
e
as
axioms
all
the
prop
ositional
axiom
sc
hemes,
and
in
addition
all
form
ulas
of
the
form:

x
'(x):
!
'(t);

'(t)
!
	x
'(x);

 
!
x
 
,
where
x

F
V
( 
);

	x
 
:
!
 
,
where
x

F
V
( 
);

x('
!
 
):
!
(	x
':
!
	x
 
);

x('
!
 
):
!
(x
':
!
x
 
).
As
inference
rules
of
our
system
w
e
tak
e
mo
dus
p
onens
and
the
follo
wing
gener
alization
rule
:
'
x
'
The
use
of
generalization
requires
some
caution
(corresp
onding
to
the
side
conditions
in
rules
(I)
and
(R)).
	...
Definition.
A
formal
pr
o
of
of
a
form
ula
'
from
a
set
 of
assump-
tions
is
a
a
nite
sequence
of
form
ulas
 

;
 

;
:
:
:
;
 
n
,
suc
h
that
 
n
=
',
and
for
all
i
=
;
:
:
:
;
n,
one
of
the
follo
wing
cases
tak
es
place:

 
i
is
an
axiom;

 
i
is
an
elemen
t
of
 ;

there
are
j;
`
<
i
suc
h
that
 
j
=
 
`
!
 
i
(i.e.,
 
i
is
obtained
from
 
j
,
 
`
using
mo
dus
p
onens
);

there
is
j
<
i
suc
h
that
 
i
=
x
 
j
,
for
some
x

F
V
( )
(i.e.,
 
i
is
obtained
from
 
j
b
y
generalization).

Unless
they
are
c
o-authors
,
of
course.

	..
Pro
of
systems
	
	...
W
arning.
In
man
y
textb
o
oks,
the
ab
o
v
e
denition
of
a
pro
of
do
es
not
include
the
restriction
on
applicabilit
y
of
the
generalization
rule.
This
do
es
not
matter
as
long
as
 is
a
set
of
sen
tences
(what
is
t
ypically
assumed).
In
general
ho
w
ev
er,
this
giv
es
a
dieren
t
relation
`

H
,
suc
h
that
 `

H
'
i
 
`
H
';
where
 
is
obtained
from
 b
y
binding
all
free
v
ariables
b
y
univ
ersal
quan
ti-
ers
placed
at
the
b
eginning
of
all
form
ulas.
F
or
this
relation,
the
deduction
theorem
(see
b
elo
w)
w
ould
only
hold
for
 consisting
of
sen
tences.
	...
Lemma
(Deduction
Theorem).
The
c
onditions
 ;
'
`
H
 
and
 `
H
'
!
 
ar
e
e
quivalent.
Pr
oof.
Easy
.
u
t
	...
Theorem.
Natur
al
de
duction,
se
quent
c
alculus,
and
the
ab
ove
Hilb
ert-
style
pr
o
of
system
ar
e
al
l
e
quivalent,
i.e.,
 `
N
'
and
 `
L
'
and
 `
H
'
ar
e
e
quivalent
to
e
ach
other
for
al
l
 and
'.
Pr
oof.
Boring.
u
t
T
r
anslations
fr
om
classic
al
lo
gic
Double
negation
translations
from
classical
to
in
tuitionistic
logic
can
b
e
ex-
tended
to
the
rst-order
case.
W
e
add
the
follo
wing
clauses
to
the
denition
of
the
Kolmogoro
v
translation
of
Chapter
:

t(x
')
:=
::x
t(');

t(	x
')
:=
::	x
t(').
and
w
e
still
ha
v
e
the
follo
wing
result:
	...
Theorem.
A
formula
'
is
a
classic
al
the
or
em
i
t(')
is
an
intuition-
istic
the
or
em.
Pr
oof.
Exercise
	..
u
t
Since
classical
pro
v
abilit
y
reduces
to
in
tuitionistic
pro
v
abilit
y
,
and
classical
rst-order
logic
is
undecidable,
w
e
obtain
undecidabilit
y
of
in
tuitionistic
rst-order
logic
as
a
consequence.
	...
Cor
ollar
y.
First-or
der
intuitionistic
lo
gic
is
unde
cidable.
In
fact,
the
undecidabilit
y
result
holds
already
for
a
v
ery
restricted
frag-
men
t
of
rst-order
in
tuitionistic
logic,
with

and
!
as
the
only
connectiv
es
and
with
no
function
sym
b
ols.
In
particular,
there
is
no
need
for
negation
or
falsit
y
.

0
Chapter
	.
First-order
logic
	..
Seman
tics
W
e
b
egin
with
classical
seman
tics.
Assume
that
our
signature

consists
of
the
function
sym
b
ols
f

;
:
:
:
;
f
n
,
relation
sym
b
ols
r

;
:
:
:
;
r
m
and
constan
t
sym
b
ols
c

;
:
:
:
;
c
k
.
	...
Definition.
A
structur
e
or
mo
del
for

is
an
algebraic
system
A
=
hA;
f
A

;
:
:
:
;
f
A
n
;
r
A

;
:
:
:
;
r
A
m
;
c
A

;
:
:
:
;
c
A
k
i,
where
the
f
A
i
's
and
r
A
i
's
are
resp
ec-
tiv
ely
op
erations
and
relations
o
v
er
A
(of
appropriate
arities)
and
the
c
A
i
's
are
distinguished
elemen
ts
of
A.
	...
Convention.

T
ypical
notational
con
v
en
tions
are
to
forget
ab
out
the
sup
erscript
A
in
e.g.,
f
A
,
and
to
iden
tify
A
and
A.
(Otherwise
w
e
ma
y
write
A
=
jAj.)

W
e
think
of
relations
in
A
as
of
functions
ranging
o
v
er
the
set
f0;
g
rather
than
of
sets
of
tuples.
	...
Definition.
.
Let
t
b
e
a
term
with
all
free
v
ariables
among
~
x,
and
let
~
a
b
e
a
v
ector
of
elemen
ts
of
A
of
the
same
length
as
~
x.
W
e
dene
the
v
alue
t
A
(
~
a)

A
b
y
induction:

(x
i
)
A
(
~
a)
=
a
i
;

(f
t

:
:
:
t
n
)
A
(
~
a
)
=
f
A
(t
A

(
~
a);
:
:
:
;
t
A
n
(
~
a
)).
.
Let
'
b
e
a
form
ula
suc
h
that
all
free
v
ariables
of
'
are
among
~
x,
and
let
~
a
b
e
as
b
efore.
W
e
dene
the
v
alue
'
A
(
~
a
)

f0;
g,
as
follo
ws

?
A
(
~
a)
=
0;

(r
t

:
:
:
t
n
)
A
(
~
a)
=
r
A
(t
A

(
~
a);
:
:
:
;
t
A
n
(
~
a));

('
_
 
)
A
(
~
a)
=
'
A
(
~
a)
[
 
A
(
~
a
);

('
^
 
)
A
(
~
a)
=
'
A
(
~
a)
\
 
A
(
~
a
);

('
!
 
)
A
(
~
a)
=
'
A
(
~
a)
)
 
A
(
~
a
);

(y
'(y
;
~
x
))
A
(
~
a)
=
inf
f'(y
;
~
x
)
A
(b;
~
a)
:
b

Ag;

(	y
'(y
;
~
x
))
A
(
~
a)
=
sup
f'(y
;
~
x
)
A
(b;
~
a
)
:
b

Ag,
where
the
op
erations
[,
\,
),
inf
and
sup
,
and
the
constan
t
0
are
in
the
t
w
o-elemen
t
Bo
olean
algebra
of
truth
v
alues.
(Of
course,
w
e
ha
v
e
a
)
b
=
(
 a)
[
b.)
W
e
write
A;
~
a
j
=
'(
~
x
)
i
'
A
(
~
a
)
=
,
and
w
e
write
A
j
=
'(
~
x
)
i
A;
~
a
j
=
'(
~
x),
for
all
~
a.
W
e
write
 j
=
'
i
for
all
A
and
~
a
with
A;
~
a
j
=
 
,
for
all
 

 ,
w
e
also
ha
v
e
A;
~
a
j
=
'.

	..
Seman
tics

The
ab
o
v
e
denition
can
no
w
b
e
generalized
so
that
v
alues
of
form
ulas
are
not
necessarily
in
f0;
g,
but
in
the
algebra
P
(X
)
of
all
subsets
of
a
certain
set
X
.
Relations
o
v
er
A
ma
y
no
w
b
e
seen
as
functions
ranging
o
v
er
P
(X
)
rather
than
f0;
g,
i.e.,
the
notion
of
a
structure
is
more
general.
One
can
go
further
and
p
ostulate
v
alues
of
form
ulas
in
an
arbitrary
Bo
olean
algebra
B
.
This
will
w
ork
as
w
ell,
pro
vided
B
is
a
c
omplete
algebra,
i.e.,
all
innite
sup
's
and
inf
's
do
exist
in
B
.
(Otherwise,
v
alues
of
some
quan
tied
form
ulas
could
not
b
e
dened.)
One
can
sho
w
that
these
generalizations
do
not
c
hange
the
class
of
clas-
sically
v
alid
statemen
ts
of
the
form
 j
=
'
(Exercise
	..).
W
e
do
not
in
v
estigate
this
further,
since
classical
logic
serv
es
us
as
an
illustration
only
.
A
lgebr
aic
semantics
An
ob
vious
idea
ho
w
to
adopt
the
ab
o
v
e
approac
h
to
in
tuitionistic
logic
is
to
replace
complete
Bo
olean
algebras
b
y
complete
Heyting
algebras.
	...
Definition.
.
An
intuitionistic
H
-structur
e
for

is
a
system
A
=
hA;
f
A

;
:
:
:
;
f
A
n
;
r
A

;
:
:
:
;
r
A
m
;
c
A

;
:
:
:
;
c
A
k
i,
where
the
f
A
i
's
and
r
A
i
's
and
c
A
i
's
are
as
b
efore,
and
the
r
A
i
's
are
functions
of
appropriate
arit
y
from
A
to
a
complete
Heyting
algebra
H
.
.
The
v
alues
of
terms
and
form
ulas
are
dened
as
in
Denition
	..,
except
that
op
erations
[,
\,
inf
,
sup
and
)
are
in
H
.
.
The
notation
A;
~
a
j
=
'(
~
x
)
and
A
j
=
'(
~
x
)
is
as
in
Denition
	...
.
The
notation
 j
=
'
should
b
e
understo
o
d
as
follo
ws:
\F
or
all
H
and
all
H
-structures
A
and
v
ectors
~
a,
with
A;
~
a
j
=
 ,
w
e
also
ha
v
e
A;
~
a
j
=
'".
.
The
sym
b
ol
j
=
K
is
j
=
restricted
to
an
y
giv
en
class
K
of
complete
Heyt-
ing
algebras.
An
example
of
a
complete
Heyting
algebra
is
the
algebra
of
op
en
sets
of
a
top
ological
space
(in
particular
a
metric
space),
where
sup
is
set-theoretic
S
,
and
inf
fA
i
:
i

I
g
=
In
t(
T
fA
i
:
i

I
g):
	...
Theorem.
The
fol
lowing
c
onditions
ar
e
e
quivalent
for
the
intuitionistic
rst-or
der
lo
gic:
.
 `
',
wher
e
\
`"
is
either
\
`
N
"
or
\
`
L
"
or
\
`
H
";


Chapter
	.
First-order
logic
.
 j
=
';
.
 j
=
K
',
wher
e
K
is
the
class
of
(algebr
as
of
op
en
sets
of
)
al
l
metric
sp
ac
es.
It
seems
to
b
e
still
an
op
en
problem
whether
the
class
of
all
metric
spaces
can
b
e
replaced
b
y
a
one-elemen
t
class
consisting
only
of
R

.
But
it
can
b
e
sho
wn
that
there
exists
a
single
metric
space
of
this
prop
ert
y
,
see
[
].
(Note
ho
w
ev
er
that
R

can
still
b
e
used
for
coun
terexamples.)
Kripke
semantics
An
alternativ
e
w
a
y
of
relaxing
the
denition
of
classical
seman
tics
is
to
k
eep
the
classical
notion
of
a
mo
del,
but
think
of
mo
dels
as
of
p
ossible
w
orlds.
	...
Definition.
A
structure
A
=
hA;
f
A

;
:
:
:
;
f
A
n
;
r
A

;
:
:
:
;
r
A
m
;
c
A

;
:
:
:
;
c
A
k
i
is
a
substructur
e
of
B
=
hB
;
f
B

;
:
:
:
;
f
B
n
;
r
B

;
:
:
:
;
r
B
m
;
c
B

;
:
:
:
;
c
B
k
i
i
the
follo
w-
ing
hold:

A

B
;

r
A
i

r
B
i
,
for
all
i;

f
A
i

f
B
i
,
for
all
i;

c
A
i
=
c
B
i
,
for
all
i.
Th
us,
B
extends
the
p
ossible
w
orld
A
b
y
enric
hing
the
domain
of
a
v
ailable
ob
jects
and
b
y
adding
more
information
ab
out
kno
wn
ob
jects.
W
e
write
A

B
to
express
that
A
is
a
substructure
of
B
.
	...
Definition.
A
Kripke
mo
del
for
rst-order
logic
is
a
triple
of
the
form
C
=
hC
;
;
fA
c
:
c

C
gi,
where
C
is
a
non-empt
y
set,

is
a
partial
order
in
C
,
and
A
c
's
are
structures
suc
h
that
if
c

c
0
then
A
c

A
c
0
:
Let
no
w
'
b
e
a
form
ula
suc
h
that
all
free
v
ariables
of
'
are
among
~
x,
and
let
~
a
b
e
a
v
ector
of
elemen
ts
of
A
c
of
the
same
length
as
~
x.
W
e
dene
the
relation

b
y
induction
as
follo
ws:

c;
~
a

r
t

:
:
:
t
n
i
A
c
;
~
a
j
=
r
t

:
:
:
t
n
(classically);

c;
~
a

?;

c;
~
a

'
_
 
i
c;
~
a

'
or
c;
~
a

 
;

c;
~
a

'
^
 
i
c;
~
a

'
and
c;
~
a

 
;

	..
Exercises


c;
~
a

'
!
 
i
c
0
;
~
a

 
,
for
all
c
0
suc
h
that
c

c
0
and
c
0
;
~
a

';

c;
~
a

	y
'(y
;
~
x
)
i
c;
b;
~
a

'(y
;
~
x
),
for
some
b

A
c
;

c;
~
a

y
'(y
;
~
x
)
i
c
0
;
b;
~
a

'(y
;
~
x
),
for
all
c
0
suc
h
that
c

c
0
and
all
b

A
c
0
.
The
sym
b
ol

is
no
w
used
in
v
arious
con
texts
as
usual,
in
particular
 
'
means
that
c;
~
a

'
whenev
er
c;
~
a

 .
	...
Theorem.
The
c
onditions
 
'
and
 j
=
'
ar
e
e
quivalent.
More
ab
out
seman
tics
can
b
e
found
in
[
,
0
,
0
,
0
].
	..
Exercises
	...
Exer
cise.
Find
constructions
for
form
ulas
(),
(),
(),
(),
(	)
and
()
of
Example
	..,
and
do
not
nd
constructions
for
the
other
form
ulas.
	...
Exer
cise.
A
rst-order
form
ula
is
in
pr
enex
normal
form
i
it
b
egins
with
a
sequence
of
quan
tiers
follo
w
ed
b
y
an
op
en
form
ula.
Consider
a
signature
with
no
function
sym
b
ols,
and
let
'
b
e
an
in
tuitionistic
theorem
in
a
prenex
normal
form.
Sho
w
that
there
exists
an
op
en
form
ula
'
0
obtained
from
'
b
y
remo
ving
quan
tiers
and
b
y
replacing
some
v
ariables
b
y
constan
ts,
and
suc
h
that
`
'
0
.
Hint:
Use
the
existence
prop
ert
y
(Corollary
	..).
	...
Exer
cise
(V.P
.
Orevk
o
v).
Apply
Exercise
	..
to
sho
w
that
the
prenex
fragmen
t
of
in
tuitionistic
rst-order
logic
o
v
er
function-free
signatures
is
decidable.
(In
fact,
this
remains
true
ev
en
with
function
sym
b
ols
in
the
signature,
but
fails
for
logics
with
equalit
y
,
see
[	
]).
	...
Exer
cise.
Pro
v
e
that
ev
ery
rst-order
form
ula
is
classically
equiv-
alen
t
to
a
form
ula
in
prenex
normal
form.
Then
pro
v
e
that
in
tuitionistic
rst-order
logic
do
es
not
ha
v
e
this
prop
ert
y
.
	...
Exer
cise.
Sho
w
that
the
existence
prop
ert
y
(Corollary
	..)
do
es
not
hold
for
classical
logic.
Wh
y
do
es
the
pro
of
break
do
wn
in
this
case?
	...
Exer
cise.
Pro
v
e
Theorem
	...
	...
Exer
cise.
Let
X
b
e
an
arbitrary
set
with
more
than
one
elemen
t.
Sho
w
that
the
seman
tics
of
classical
logic
where
v
alues
of
form
ulas
are
tak
en
in
the
family
P
(X
)
of
all
subsets
of
X
is
equiv
alen
t
to
the
ordinary
seman
tics.
That
is,
the
sets
of
tautologies
are
the
same.
	...
Exer
cise.
V
erify
that
the
o
dd-n
um
b
ered
form
ulas
of
Example
	..
are
in
tuitionistically
v
alid,
while
the
ev
en-n
um
b
ered
ones
are
not.


Chapter
	.
First-order
logic
	..	.
Exer
cise.
Sho
w
that
the
follo
wing
classical
rst-order
tautologies
are
not
v
alid
in
tuitionistically:

	x('(x)
!
x
'(x));

	x('(0)
_
'()
!
'(x));

x
::'(x):
$
::x
'(x);

	x
::'(x):
$
::	x
'(x).
	..0.
Exer
cise.
A
Kripk
e
mo
del
C
=
hC
;
;
fA
c
:
c

C
gi
has
c
onstant
domains
i
all
the
A
c
are
the
same.
Pro
v
e
that
the
form
ula
x( 
_
'(x))
$
 
_
x
'(x),
where
x

F
V
( 
)
(form
ula
()
of
Example
	..)
is
v
alid
in
all
mo
dels
with
constan
t
domains.
	...
Exer
cise.
Pro
v
e
that
the
form
ula
::x('
_
:')
(form
ula
(0)
of
Example
	..)
is
v
alid
in
all
Kripk
e
mo
dels
with
nite
sets
of
states.

CHAPTER
0
Dep
enden
t
t
yp
es
Dep
enden
t
t
yp
es
can
probably
b
e
considered
as
old
as
the
whole
idea
of
pr
op
ositions-as-typ
es
.
Explicitly
,
dep
enden
t
t
yp
es
w
ere
p
erhaps
rst
used
in
v
arious
systems
aimed
at
constructing
and
v
erifying
formal
pro
ofs.
One
of
the
rst
w
as
the
pro
ject
A
UTOMA
TH
of
de
Bruijn,
see
[
].
Another
suc
h
system
that
gained
m
uc
h
atten
tion
is
the
Edin
burgh
Logical
F
ramew
ork
(LF)
of
Harp
er,
Honsell
and
Plotkin
[
].
The
expression
\logical
framew
orks"
is
no
w
used
as
a
generic
name
for
v
arious
similar
calculi,
see
[	
].
Last
but
not
least,
one
should
men
tion
here
Martin-L
of
's
t
yp
e
theory
[
].
F
or
more
references,
see
[0
,

,

].
Our
presen
tation
of
dep
enden
t
t
yp
es
follo
ws
essen
tially
that
of
[].
F
rom
a
programmer's
p
oin
t
of
view,
a
dep
enden
t
t
yp
e
is
one
that
dep
ends
on
an
ob
ject
v
alue.
F
or
instance,
one
ma
y
need
to
in
tro
duce
a
t
yp
e
string
(n)
of
all
binary
strings
of
length
n.

This
t
yp
e
dep
ends
on
a
c
hoice
of
n
:
int
.
The
op
erator
string
mak
es
a
t
yp
e
from
an
in
teger,
and
corresp
onds,
under
the
Curry-Ho
w
ard
isomorphism,
to
a
predicate
o
v
er
int
.
Suc
h
a
predicate
is
called
a
typ
e
c
onstructor
,
or
simply
c
onstructor
.
Of
course,
w
e
ha
v
e
to
classify
constructors
according
to
their
domains,
and
this
leads
to
the
notion
of
a
kind
:
w
e
sa
y
that
our
constructor
string
is
of
kind
int
)
,
where

is
the
kind
of
all
t
yp
es.
Of
course,
there
is
no
reason
to
disallo
w
binary
predicates,
and
so
on,
and
th
us
the
family
of
kinds
should
include


)




n
)
.
A
denition
of
an
ob
ject
of
t
yp
e
string
(n)
ma
y
happ
en
to
b
e
uniform
in
n,
i.e.,
w
e
ma
y
ha
v
e
a
generic
pro
cedure
Onlyzer
os
that
turns
an
y
n
:
int
in
to
a
string
of
zeros
of
length
n.
The
t
yp
e
of
suc
h
a
pro
cedure
should
b
e
written
as
(x:int
)string
(x).
In
general,
a
t
yp
e
of
the
form
(x:
)
is
a
t
yp
e
of
a
function
applicable
to
ob
jects
of
t
yp
e

and
returning
an
ob
ject
of
t
yp
e

[x
:=
a],
for
eac
h
argumen
t
a
:

.
It
is
not
dicult
to
see
that
this
idea
is
more
general
than
the
idea
of
a
function
t
yp
e.
Indeed,
if
x
is
not
free
in

,
then
(x:
)
b
eha
v
es

Example
from
[
].



Chapter
0.
Dep
enden
t
t
yp
es
exactly
as

!

.
Th
us,
in
presence
of
dep
enden
t
t
yp
es
there
is
no
need
to
in
tro
duce
!
separately
.
The
set-theoretic
coun
terpart
of
a
dep
enden
t
t
yp
e
is
the
pr
o
duct
.
Recall
that
if
fA
t
g
tT
is
an
indexed
family
of
sets
(formally
a
function
that
assigns
the
set
A
t
to
an
y
t

T
)

then
the
pro
duct
of
this
family
is
the
set:
Y
tT
A
t
=
ff

(
[
tT
A
t
)
T
:
f
(t)

A
t
;
for
all
t

T
g:
F
or
f

Q
tT
A
t
,
the
v
alue
of
f
(t)
is
in
a
set
A
t
,
p
erhaps
dieren
t
for
eac
h
argumen
t,
rather
than
in
a
single
co-domain
A.
If
all
A
t
are
equal
to
a
xed
set
A,
w
e
obtain
the
equalit
y
Y
tT
A
t
=
A
T
;
corresp
onding
to
our
previous
observ
ation
ab
out
!
v
ersus
.
The
logical
coun
terpart
of
this
should
no
w
b
e
as
follo
ws:
the
implication
is
a
sp
ecial
case
of
univ
ersal
quan
tication.
And
that
is
correct,
b
ecause
w
e
ha
v
e
already
agreed
to
iden
tify
ob
jects
of
t
yp
e

with
pro
ofs
of

.
W
e
only
ha
v
e
to
agree
that
this
w
a
y
of
thinking
applies
to
individual
ob
jects
as
w
ell,
so
that,
for
instance,
an
in
teger
can
b
e
seen
as
a
pr
o
of
of
int
.
0..
System
P
W
e
will
no
w
dene
the
Ch
urc
h-st
yle
system
P
of
dep
enden
t
t
yp
es.
W
e
b
egin
with
a
calculus
without
existan
tial
quan
tication,
as
in
[
].
Unfortu-
nately
,
ev
en
without
existan
tial
quan
tiers,
the
language
of
P
is
a
broad
extension
of
the
language
of
simply-t
yp
ed
lam
b
da-calculus.
W
e
ha
v
e
three
sorts
of
expressions:
ob
ject
expressions
(ranged
o
v
er
b
y
M
;
N
,
etc.),
con-
structors
(ranged
o
v
er
b
y

;
',
etc.)
and
kinds
(ranged
o
v
er
b
y
;

0
,
etc.).
There
are
ob
ject
and
constructor
v
ariables
(ranged
o
v
er
b
y
x,
y
,
:
:
:
and
;

,
:
:
:
,
resp
ectiv
ely),
and
one
kind
constan
t
.
A
t
yp
e
is
treated
as
a
sp
ecial
case
of
a
constructor,
so
w
e
do
not
need
extra
syn
tax
for
t
yp
es.
Con
texts
can
no
longer
b
e
arbitrary
sets
of
assumptions.
This
is
b
ecause
in
order
to
declare
a
v
ariable
of
t
yp
e
e.g.,
x,
one
has
to
kno
w
b
efor
e
that
the
application
is
legal,
i.e.,
that
the
t
yp
e
of
x
ts
the
kind
of
.
Th
us,
con
texts
in
P
are
dened
as
sequences
of
assumptions.
In
addition,
not
ev
ery
sequence
of
declarations
can
b
e
regarded
as
a
v
alid
con
text,
and
b
eing
v
alid
or
not
dep
ends
on
deriv
abilit
y
of
certain
judgemen
ts.
F
or
similar
reasons,
b
eing
a
constructor
or
a
kind,
also
dep
ends
on
deriv-
able
judgemen
ts.
W
ell-formed
t
yp
es,
kinds
and
con
texts
are
th
us
formally
dened
b
y
the
rules
of
our
system.

That
is
wh
y
w
e
do
not
use
here
the
set
notation
fA
t
:
t

T
g.

0..
System
P

Unfortunately
,
w
e
cannot
stic
k
to
)
as
the
only
w
a
y
to
build
kinds,
and
w
e
ha
v
e
to
in
tro
duce
a
more
general
pro
duct
op
erator
also
at
the
lev
el
of
kinds.
T
o
understand
wh
y
,
see
Example
0..().
0...
Definition.
.
R
aw
expr
essions
(ra
w
con
texts
 ,
ra
w
kinds
,
ra
w
constructors

and
ra
w
lam
b
da-terms
M
)
are
dened
b
y
the
follo
wing
grammar:
 ::=
fg
j
 ;
(x
:
)
j
 ;
(
:

);

::=

j
(x
:
);

::=

j
(x:)
j
(M
);
M
::=
x
j
(M
M
)
j
(x:
:M
).
.
Beta
reduction
on
ra
w
terms
is
dened
as
follo
ws:

(x:

:M
)N
!

M
[N
:=
x];

If

!


0
then
x:
:M
!

x:

0
:M
;

If
M
!

M
0
then
x:

:M
!

x:
:M
0
and
N
M
!

N
M
0
and
M
N
!

M
0
N
;

If

!


0
then
(x
:

)
!

(x
:

0
);

If

!


0
then
(x
:

)
!

(x
:

)
0
;

If

!


0
then
(x:
)
!

(x:
0
)
;

If

!


0
then
(x:

)
!

(x:
)
0
;

If
'
!

'
0
then
'M
!

'
0
M
;

If
M
!

M
0
then
'M
!

'M
0
.
.
If
(x
:

)
or
(
:
)
is
in
 then
w
e
write
 (x)
=

or
 ()
=
,
resp
ectiv
ely
.
W
e
also
write
Dom
( )
for
the
set
of
all
constructors
and
ob
ject
v
ariables
declared
in
 .
.
W
e
skip
the
ob
vious
denition
of
free
v
ariables.
Of
course,
there
are
three
binding
op
erators
no
w:
lam
b
da-abstraction,
quan
tication
and
the
pro
duct
of
kinds.
And
w
e
also
omit
the
denition
of
substitution.
.
W
e
use
arro
ws
as
abbreviations:
if
x
is
not
free
in

then
w
e
write

)

instead
of
(x
:

).
And
if
x
is
not
free
in

then
(x:
)
is
abbreviated
b
y
our
go
o
d
old
implication

!

.
0...
Remark.
In
order
to
spare
the
reader
some
additional
noise,
w
e
c
ho
ose
a
non-standard
presen
tation
of
P,
namely
w
e
do
not
allo
w
lam
b
da
abstractions
in
constructors.
Th
us,
ev
ery
constructor
m
ust
b
e
of
the
form
(x:

)



(x:
n
)M

:
:
:
M
n
.
This
restriction
is
not
essen
tial
as
long
as
our
primary
in
terest
is
in
typ
es
.
Indeed,
a
dep
enden
t
t
yp
e
in
normal
form
alw
a
ys
ob
eys
this
pattern,
and
a
term
substitution
ma
y
nev
er
create
a
constructor
redex.


Chapter
0.
Dep
enden
t
t
yp
es
W
e
will
ha
v
e
three
dieren
t
sorts
of
judgemen
ts
in
our
system:

kind
formation
judgemen
ts
of
the
form
\ `

:
";

kinding
judgemen
ts
of
the
form
\ `
'
:
";

t
yping
judgemen
ts
of
the
form
\ `
M
:

".
The
meaning
of
\
:
"
is
just
that

is
a
w
ell-formed
kind,
and

itself
is
not
a
part
of
the
language.
0..
Rules
of
P
Kind
formation
rules:
`

:

 ;
x
:

`

:

 `
(x:
)
:

Kinding
rules:
 `

:

 ;

:

`

:

(

Dom
( ))
 `
'
:
(x:

)
 `
M
:

 `
'M
:

[x
:=
M
]
 ;
x
:

`

:

 `
(x:
)
:

T
yping
rules:
 `

:

 ;
x
:

`
x
:

(x

Dom( ))
 `
N
:
(x:
)
 `
M
:

 `
N
M
:

[x
:=
M
]
 ;
x
:

`
M
:

 `
x:
:M
:
(x:
)
Note
that
there
is
no
restriction
\x

FV( )"
attac
hed
to
the
-in
tro
duction
rule.
This
restriction
is
unnecessary
b
ecause
otherwise
 ;
x
:

w
ould
not
b
e
a
v
alid
con
text,
in
whic
h
case
the
premise
could
not
b
e
deriv
ed.
We
akening
rules:
There
are
six
w
eak
ening
rules,
but
all
ob
ey
the
same
pattern:
an
additional
assumption
do
es
not
h
urt,
as
long
as
it
is
w
ell-formed.
W
e
need
explicit
w
ek
ening
(rather
than
relaxed
axioms)
b
ecause
of
the
sequen
tial
structure
of
con
texts
w
e
m
ust
resp
ect.
 `

:

 `

:

 ;
x
:

`

:

(x

Dom( ))
 `

:

 `

0
:

 ;

:

`

0
:

(

Dom( ))

0..
Prop
erties
of
P
	
 `

:

 `
'
:

 ;
x
:

`
'
:

(x

Dom( ))
 `

:

 `
'
:

0
 ;

:

`
'
:

0
(

Dom
( ))
 `

:

 `
M
:

 ;
x
:

`
M
:

(x

Dom( ))
 `

:

 `
M
:

 ;

:

`
M
:

(

Dom
( ))
Conversion
rules
These
rules
are
necessary
b
ecause
of
the
terms
o
ccurring
in
t
yp
es
whic
h
do
not
ha
v
e
to
b
e
in
normal
forms.
 `
'
:


=


0
 `
'
:

0
 `
M
:


=


0
 `
M
:

0
0...
Remark.
Note
that
t
yp
e-c
hec
king
in
P
is
not
a
trivial
task,
ev
en
if
our
language
is
Ch
urc
h-st
yle.
This
is
b
ecause
the
con
v
ersion
rules.
A
v
erication
whether
t
w
o
t
yp
es
or
kinds
are
equal
ma
y
b
e
as
dicult
as
c
hec
king
equalit
y
of
simply-t
yp
ed
lam
b
da
terms,
and
this
decision
problem
is
non-elemen
tary
(Theorem
..).
0...
Definition.
If
 `

:

then
w
e
sa
y
that

is
a
typ
e
in
the
con
text
 .
0...
Example.
.
The
lam
b
da
term
y
:(x:0:x
!

x):z
:
(x:0:x):x:
0:y
x(z
x)
has
t
yp
e
(x:0:x
!

x)
!
(x:0:x)
!
x:
0:
x
in
the
con
text
consisting
of
declarations

:
0
)

and

:
0
)
.
.
Here
is
an
example
of
a
kind
that
cannot
b
e
expressed
only
with
):

:
0
)

`
(y
:
0)(y
)
)
:

If
w
e
no
w
declare
a
v
ariable
'
to
b
e
of
this
kind,
w
e
can
consider
t
yp
es
of
the
form
'y
x,
where
x
is
of
t
yp
e
y
.
0..
Prop
erties
of
P
System
P
has
the
Ch
urc
h-Rosser
and
strong
normalization
prop
erties.
These
facts
follo
w
from
prop
erties
of
simply
t
yp
ed
terms,
thanks
to
an
em
b
edding
M
!
M

,
describ
ed
in
[
].
Certain
v
arian
ts
of
this
em
b
ed-
ding
(esp.
the
\forgetting
map"
M
!
M
,
whic
h
erases
all
dep
endencies)
w
ere
also
disco
v
ered
b
y
V.
Breazu-T
annen
and
Ch.
P
aulin,
but
apparen
tly
R.O.
Gandy
w
as
the
rst
to
use
this
approac
h
(see
[0
,
p.
]).

0
Chapter
0.
Dep
enden
t
t
yp
es
0...
Definition.
W
e
dene
the
dep
endency-erasure
map
on
construc-
tors:

=
;
(x
:

)
=

!

;
'M
=
'
.
W
e
write
 for
the
con
texts
obtained
b
y
applying
the
ab
o
v
e
op
eration
to
all
righ
t-hand
sides
of
declarations
in
 of
the
form
(x
:

),
and
remo
ving
other
declarations.
0...
Definition.
The
translations
M
!
M

and

!


are
dened
for
b
oth
t
yp
es
and
terms
of
P.
Both
terms
and
t
yp
es
are
translated
in
to
terms.
Belo
w,
0
stands
for
a
xed
t
yp
e
v
ariable.
Abusing
the
formalism
a
little,
w
e
assume
that
w
e
can
use
as
man
y
fresh
term
v
ariables
as
w
e
w
an
t.
(M

:
:
:
M
n
)

=
x

M


:
:
:
M

n
,
where
x

is
a
fresh
v
ariable;
((x:

)
)

=
x



(x:
:

),
where
x

is
a
fresh
v
ariable;
x

=
x;
(M
N
)

=
M

N

;
(x:

:M
)

=
(y
:
0x:
:M

)

,
where
y
is
a
fresh
v
ariable.
0...
Lemma.
.
If
 `

:

then
 0
`


:
0,
for
some
extension
 0
of
 .
.
If
 `
M
:

then
 0
`
M

:

,
for
some
extension
 0
of
 .
.
If
 `
M
:

and
M
!

M

then
M

!
!

M


in
at
le
ast
one
step.
Pr
oof.
Exercise
0...
u
t
0...
Cor
ollar
y
(Strong
normalization).
The
system
P
has
the
str
ong
normalization
pr
op
erty.
Pr
oof.
By
part
()
of
Lemma
0..,
an
innite
reduction
starting
from
M
w
ould
b
e
translated
to
an
innite
reduction
in
the
simply-t
yp
ed
lam
b
da
calculus.
u
t
0...
Cor
ollar
y.
The
system
P
has
the
Chur
ch-R
osser
pr
op
erty.
Pr
oof.
Exercise
0...
u
t

0..
Dep
enden
t
t
yp
es

a
la
Curry

0..
Dep
enden
t
t
yp
es

a
la
Curry
0...
Definition.
W
e
dene
a
t
yp
e-erasure
mapping
j

j
from
terms
of
P
to
pure
lam
b
da
terms,
as
usual:

jxj
=
x;

jx:
:M
j
=
x:jM
j;

jM
N
j
=
jM
jjN
j.
F
or
a
a
pure
lam
b
da
term
N
,
w
e
write
 `
P
N
:

i
N
=
jM
j,
for
some
Ch
urc
h-st
yle
term
M
with
 `
M
:

.
W
e
sa
y
that
a
pure
lam
b
da
term
N
is
typ
able
i
 `
P
N
:

holds
for
some
 ;

.
An
alternativ
e
to
the
ab
o
v
e
denition
is
to
dene
a
t
yp
e
assignmen
t
system
for
pure
lam
b
da-terms,
corresp
onding
to
P.
Note
that
in
this
case
w
e
m
ust
deal
with
dieren
t
notion
of
a
t
yp
e,
since
t
yp
es
m
ust
dep
end
on
pure
lam
b
da-terms
rather
than
on
Ch
urc
h-st
yle
terms.
It
follo
ws
that
the
t
yp
e-erasure
mapping
m
ust
b
e
extended
to
t
yp
es
and
kinds.
F
ortunately
,
the
notion
of
a
t
ypable
term
is
the
same
with
this
approac
h
as
with
our
simple
denition,
see
[
].
0...
Pr
oposition.
The
Curry-style
variant
of
P
has
the
subje
ct-r
e
duction
pr
op
erty,
that
is
if
 `
P
N
:

and
N
!
!

N
0
then
also
 `
P
N
0
:

.
Pr
oof.
Boring.
See
[
].
u
t
Let
us
come
bac
k
to
the
dep
endency-erasure
map.
W
e
extend
it
to
terms
as
follo
ws:
0...
Definition.
x
=
x;
M
N
=
M
N
;
x:
:M
=
x:
:M
;
W
e
ha
v
e
the
follo
wing
result:
0...
Lemma.
If
 `
M
:

then
 `
M
:

(in

!).
Pr
oof.
Exercise
0...
u
t
0...
Pr
oposition.
A
term
is
typ
able
in
P
i
it
is
simply-typ
able.
In
p
articular,
the
typ
e
r
e
c
onstruction
pr
oblem
for
P
is
de
cidable
in
p
olynomial
time.


Chapter
0.
Dep
enden
t
t
yp
es
Pr
oof.
Supp
ose
that
 `
M
:

in
P.
By
Lemma
0..,
w
e
ha
v
e
 `
M
:

,
in
the
simply
t
yp
ed
lam
b
da
calculus.
But
it
is
easy
to
see
that
jM
j
=
jM
j.
W
e
ha
v
e
just
sho
wn
that
all
pure
terms
t
ypable
in
P
are
t
ypable
in
simple
t
yp
es.
The
con
v
erse
is
ob
vious,
and
th
us
t
yp
e
reconstruction
in
P
is
the
same
as
in
simple
t
yp
es.
u
t
Here
comes
the
surprise:
it
is
not
at
all
that
easy
with
t
yp
e
c
hec
king!
0...
Theorem
(G.
Do
w
ek
[
]).
T
yp
e
che
cking
in
the
Curry-style
ver-
sion
of
P
is
unde
cidable.
No
Pr
oof.
W
e
regret
that
w
e
do
not
ha
v
e
enough
time
to
presen
t
this
nice
pro
of.
But
w
e
recommend
reading
the
original
pap
er
[
].
u
t
0..
Existen
tial
quan
tication
This
section
is
a
diggression.
The
system
P,
as
most
other
t
yp
ed
lam
b
da-
calculi,
is
normally
studied
with

and
!
as
the
only
basic
connectiv
es.
Of
course,
an
extension
of
this
system
with
_,
^
and
?
can
b
e
dened
in
m
uc
h
the
same
w
a
y
as
for
the
simply-t
yp
ed
lam
b
da
calculus.
It
remains
to
see
what
is
the
lam
b
da
calculus
coun
terpart
of
existen
tial
quan
tication.
The
in
tuition
suggests
that
(	x:
)
'(x)
should
b
e
understo
o
d
as
a
disjoint
union
or
c
opr
o
duct
of
t
yp
es
'(a),
for
all
ob
jects
a
of
t
yp
e

.
That
is,
ob
jects
of
t
yp
e
(	x:
)
'(x)
are
pairs
consisting
of
an
ob
ject
a
of
t
yp
e

and
a
pro
of
M
of
'(a).
This
ma
y
b
e
syn
tactically
written
as:
pac
k
M
;
a
to
(	x:
)
'(x).
An
elimination
op
erator
for
t
yp
e
(	x:
)
'(x)
tak
es
suc
h
a
pair
and
uses
it
whenev
er
an
ob
ject
of
t
yp
e
'(x)
can
b
e
used
with
an
unsp
ecied
x.
This
leads
to
the
follo
wing
deduction
rules:
(	I)
 `
M
:
'[x
:=
N
]
 `
N
:

 `
pac
k
M
;
N
to
(	x:
)
'
:
(	x:
)
'
(	E
)
 `
M
:
(	x:

)
'
 ;
x
:

;
z
:
'
`
N
:
 
 `
let
z
:
'
b
e
M
:
(	x:
)
'
in
N
:
 
(x

F
V
( ;
 
))
Note
that
although
 
in
(	E)
cannot
con
tain
x
free,
this
restriction
do
es
not
extend
to
the
pro
of
N
.
The
v
ariable
x
ma
y
th
us
b
e
free
in
N
,
but
it
should
b
e
considered
b
ound
in
the
let
expression.
The
reduction
rule
for
sum
t
yp
es
is
as
follo
ws:
let
z
:
'
b
e
(pac
k
M
;
N
to
(	x:
)
')
in
Q
 !

Q[x
:=
N
][z
:=
M
]
Ev
erything
is
ne
with
this
rule,
as
long
as
w
e
do
not
get
seduced
b
y
the
temptation
of
making
a
Curry-st
yle
calculus
with
existen
tial
quan
tiers.
Lo
ok,
ho
w
b
eautiful
rules
w
e
ma
y
ha
v
e:

0..
Corresp
ondence
with
rst-order
logic

(	I)
 `
M
:
'[x
:=
N
]
 `
N
:

 `
M
:
(	x:
)
'
(	E)
 `
M
:
(	x:
)
'
 ;
z
:
'
`
N
:
 
 `
N
[z
:=
M
]
:
 
(x

F
V
( ;
 
))
These
rules
are
based
on
the
idea
of
existential
p
olymorphism
:
a
term
of
an
existen
tial
t
yp
e
is
lik
e
an
ob
ject
with
some
data
b
eing
abstracted
or
encapsulated
or
\priv
ate",
and
not
a
v
ailable
for
external
manipulations.
It
seems
v
ery
app
ealing
that
this
sort
of
abstraction
migh
t
b
e
done
with
only
implicit
t
yping
discipline.
There
are
ho
w
ev
er
some
anno
ying
little
diculties
when
one
attempts
to
pro
v
e
the
sub
ject
reduction
prop
ert
y
for
a
t
yp
e
inference
system
`
	
with
rules
as
ab
o
v
e.
Some
of
these
diculties
can
b
e
eliminated
b
y
impro
ving
the
rules,
but
some
cannot.
The
follo
wing
example
is
based
on
an
idea
used
in
[]
for
union
t
yp
es
(whic
h
cause
similar
problems).
0...
Example.
Consider
a
con
text
 with
the
follo
wing
declarations:
0
:
;

:
;

:
;

:
0
)
;
x
:
0;
X
:

x
!

x
!
;
Y
:

!
(	x:0)
x;
Z
:

.
Then
 `
	
X
(IY
Z
)(IY
Z
)
:
,
but
 `
	
X
(IY
Z
)(Y
Z
)
:
.
0..
Corresp
ondence
with
rst-order
logic
The
system
P
of
dep
enden
t
t
yp
es
is
m
uc
h
stronger
than
is
needed
to
pro
vide
a
term
assignmen
t
for
rst-order
in
tuitionistic
logic.
In
fact,
rst-order
logic
corresp
onds
to
a
fairly
w
eak
fragmen
t
of
P.
This
fragmen
t
is
obtained
b
y
restricting
the
syn
tax

so
that
eac
h
con
text
m
ust
satisfy
the
follo
wing:

There
is
only
one
t
yp
e
v
ariable
0
(whic
h
should
b
e
regarded
as
a
t
yp
e
constan
t),
represen
ting
the
t
yp
e
of
individuals;

All
kinds
are
of
the
form
0
)



)
0
)
;

There
is
a
nite
n
um
b
er
of
distinguished
constructor
v
ariables,
repre-
sen
ting
relation
sym
b
ols
in
the
signature
(they
m
ust
b
e
of
appropriate
kinds,
dep
ending
on
arit
y);

F
unction
sym
b
ols
in
the
signature
are
represen
ted
b
y
distinguished
ob
ject
v
ariables
of
t
yp
es
0
!



!
0
!
0,
dep
ending
on
arit
y;

Constan
t
sym
b
ols
are
represen
ted
b
y
distinguished
ob
ject
v
ariables
of
t
yp
e
0;

Of
course
one
has
to
either
add
	
to
P,
as
in
the
previous
section,
or
to
consider
only
univ
ersal
quan
tication
in
form
ulas.


Chapter
0.
Dep
enden
t
t
yp
es

Other
declarations
in
the
con
text
ma
y
only
b
e
of
the
form
(x
:
0),
and
corresp
ond
to
individual
v
ariables.
Clearly
,
algebraic
terms
are
represen
ted
no
w
b
y
lam
b
da
terms
of
t
yp
e
0
in
normal
form.
F
orm
ulas
are
represen
ted
b
y
t
yp
es.
Because
of
strong
normalization,
w
e
can
restrict
atten
tion
to
form
ulas
con
taining
only
terms
in
normal
form.
It
follo
ws
that
an
inhabited
form
ula
is
a
theorem
and
con
v
ersely
.
The
reader
is
in
vited
to
formally
dene
the
syn
tax
of
the
rst-
order
fragmen
t
(Exercise
0..	).
In
summary
,
w
e
ha
v
e
the
follo
wing
pairs
of
corresp
onding
items:
form
ulas

t
yp
es
pro
ofs

terms
domain
of
individuals

t
yp
e
constan
t
0
algebraic
terms

terms
of
t
yp
e
0
relations

constructors
of
kind
0
)
0
)



)
0
)

atomic
form
ula
r
(t

;
:
:
:
;
t
n
)

dep
enden
t
t
yp
e
r
t

:
:
:
t
n
:

univ
ersal
form
ula

pro
duct
t
yp
e
pro
of
b
y
generalization

abstraction
x
:
0:M
'
pro
of
b
y
mo
dus
p
onens

application
M
x:0
'
N
0
0...
Example.
Consider
the
Hilb
ert-st
yle
axioms
of
Section
	.
Eac
h
of
them
corresp
onds
to
a
t
yp
e
in
P,
extended
b
y
existen
tial
quan
tication
as
in
Section
0..
These
t
yp
es
are
inhabited
as
follo
ws.
(W
e
write
t
yp
es
as
upp
er
indices
to
impro
v
e
readabilit
y
.)

Y
(x:
0)'(x)
:Y
t
:
(x:0)'(x):
!
'(t);

X
'(t)
:pac
k
X
;
t
to
(	x:0)'(x)
:
'(t)
!
(	x:0)'(x);

Y
 
x
0
:Y
:
 
!
(x
:
0)
 
,
where
x

F
V
( 
);

Y
(	x:0) 
:let
z
: 
b
e
Y
:
(	x:0) 
in
z
:
(	x:0) 
:
!
 
,
where
x

F
V
( 
);

X
(x:0)('! 
)
Y
(	x:0)'
:let
z
'
b
e
Y
:
(	x:0)'
in
pac
k
X
xz
;
x
to
(	x:0)'
:
(x:0)('
!
 
):
!
((	x:0)':
!
(	x:0) 
);

X
(x:0)('! 
)
Y
(x:
0)'
z
0
:X
z
(Y
z
)
:
(x:0)('
!
 
):
!
((x:0)':
!
(x:0) 
).
Out
of
the
ab
o
v
e
six
examples
three
do
not
use
existen
tial
quan
tication.
If
w
e
apply
the
dep
endency-erasing
translation
M
!
M
to
the
third
and
sixth
of
the
ab
o
v
e
terms,
w
e
obtain
the
t
yp
ed
com
binators

K
:
 
!
0
!
 
and

0..
Exercises


S
:
(0
!
'
!
 
)
!
(0
!
'
)
!
0
!
 
.
This
ma
y
b
e
a
suprise
on
the
rst
lo
ok
that
w
e
obtain
something
so
m
uc
h
familiar.
But
it
is
fully
justied
b
y
the
fact
that
univ
ersal
quan
tication
is
a
generalization
of
implication.
The
rst
example
is
a
little
less
sp
ectacular,
as
it
erases
to
Y
0!'
:Y
t
:
(0
!
')
!
'
(parameterized
b
y
t
:
0).
The
ab
o
v
e
em
b
edding
of
rst-order
logic
in
to
P
can
easily
b
e
generalized
to
v
arious
extensions.
F
or
instance,
man
y-sorted
logic
is
handled
just
b
y
allo
wing
more
than
one
atomic
t
yp
e.
Here
are
some
examples
of
other
features
that
are
not
presen
t
in
rst-order
logic:

There
are
sorts
(t
yp
es)
for
man
y
domains
for
individuals,
and
also
for
functions
on
the
individuals;

There
is
a
function
abstraction
mec
hanism
(w
e
deal
with
lam
b
da-terms
rather
than
algebraic
terms);

Quan
tication
o
v
er
functions
is
p
ermitted;
a
quan
tier
ranges
o
v
er
arbitrary
expressions
of
a
giv
en
sort;

Pro
ofs
are
terms,
so
that
prop
erties
of
pro
ofs
can
b
e
expressed
b
y
form
ulas.
The
presence
of
quan
tication
o
v
er
ob
jects
of
all
nite
t
yp
es
means
that
P
can
express
man
y
higher-order
languages
(see
[
]).
W
e
w
ould
ho
w-
ev
er
prefer
not
to
use
the
expression
\higher-order
logic"
here,
as
there
is
no
quan
tication
o
v
er
prop
ositions.
A
more
adequate
statemen
t
ab
out
P
is
that
it
pro
vides
a
man
y-sorted
rst-order
represen
tation
of
higher-order
logic.
Another
issue
is
expressibilit
y
of
rst-order
the
ories
in
P.
Y
ou
can
nd
more
ab
out
this
in
[,
p.
0].
As
w
e
ha
v
e
already
observ
ed,
rst-order
in
tuitionistic
logic
is
undecid-
able.
Th
us
t
yp
e
inhabitation
in
the
corresp
onding
fragmen
t
of
P
m
ust
b
e
also
undecidable.
But
P
can
b
e
sho
wn
conserv
ativ
e
o
v
er
this
fragmen
t,
and
it
follo
ws
that
t
yp
e
inhabitation
for
the
whole
system
is
also
undecidable.
Another
direct
and
simple
pro
of
can
b
e
found
in
[
].
0...
Theorem.
T
yp
e
inhabitation
in
P
is
unde
cidable.
u
t
0..
Exercises
0...
Exer
cise.
Let
string
(n)
b
e
the
t
yp
e
of
binary
strings
of
length
n.
Ev
ery
suc
h
string
w
determines
a
record
t
yp
e
with
in
teger
and
b
o
olean
elds
corresp
onding
to
the
digits
in
w
.
F
or
example,
for
00
w
e
tak
e


Chapter
0.
Dep
enden
t
t
yp
es
int
^
b
o
ol
^
b
o
ol
^
int
^
b
o
ol
.
Dene
an
appropriate
con
text
 declaring
v
ariables
string
and
r
e
c
or
d
so
that
r
e
c
or
d
(n)(w
)
is
a
w
ell-formed
t
yp
e,
for
n
:
int
and
w
:
string
(n).
0...
Exer
cise.
Pro
v
e
Lemma
0...
(First
extend
the
translation
to
kinds
and
dene
 0
.
A
substitution
lemma
will
also
b
e
necessary
.)
0...
Exer
cise.
Pro
v
e
Lemma
0...
Also
pro
v
e
that
 `
M
:

and
M
!

M
0
implies
M
!

M
0
or
M
=
M
0
.
0...
Exer
cise.
Consider
the
follo
wing
attempt
to
pro
v
e
strong
normal-
ization
for
P:
Assume
rst
that
a
term
M
is
suc
h
that
no
t
yp
e
o
ccurring
in
M
con
tains
a
lam
b
da
term.
In
this
case
an
innite
reduction
starting
from
M
w
ould
b
e
translated,
b
y
Lemma
0..,
to
an
innite
reduction
in
the
simply-t
yp
ed
lam
b
da
calculus.
The
general
case
follo
ws
from
the
follo
wing
induction
step:
If
all
subterms
of
M
(including
all
terms
o
ccurring
in
t
yp
es
in
M
)
are
strongly
normalizing
then
M
is
strongly
normalizing.
T
o
pro
v
e
the
induction
step,
w
e
observ
e
that
an
innite
reduction
starting
from
M
translates
to
a
sequence
of
pure
terms
N
i
,
with
N
i
=
N
j
,
for
all
i;
j
>
i
0
.
Th
us
our
innite
reduction
m
ust,
from
some
p
oin
t
on,
consist
exclusiv
ely
of
reduction
steps
p
erformed
exclusiv
ely
within
t
yp
es.
But
all
terms
o
ccurring
in
t
yp
es
are
obtained
from
subterms
of
the
original
term
M
and
th
us
m
ust
strongly
normalize
b
y
the
induction
h
yp
othesis.
Find
the
bug
in
this
pro
of.
Can
y
ou
x
it?

0...
Exer
cise.
Pro
v
e
the
Ch
urc
h-Rosser
prop
ert
y
for
P
(Corollary
0..).
W
arning:
do
rst
Exercise
0...
Hint:
Apply
Newman's
Lemma.
0...
Exer
cise.
Sho
w
an
example
of
P
terms
M
and
M
0
of
the
same
t
yp
e
suc
h
that
M
=
M
0
,
but
M
=

M
0
.
0...
Exer
cise.
The
pro
of
tec
hnique
that
fails
for
Ch
urc
h-st
yle
P
(Exer-
cise
0..)
w
orks
for
the
Curry-st
yle
terms.
Pro
v
e
strong
normalization
for
Curry-st
yle
P
with
help
of
the
dep
endency-erasing
translation
M
!
M
.
0...
Exer
cise.
V
erify
the
correctness
of
Example
0...
0..	.
Exer
cise.
Dene
formally
the
fragmen
t
of
P
corresp
onding
to
rst-
order
logic
o
v
er
a
xed
signature.
0..0.
Exer
cise.
Consider
the
o
dd-n
um
b
ered
form
ulas
of
Example
	..,
as
t
yp
es
in
an
appropriate
extension
of
P.
W
rite
lam
b
da-terms
inhabiting
these
t
yp
es.
(If
necessary
use
op
erators
related
to
conjunction,
disjunction,
and
the
existen
tial
quan
tier.)

W
e
do
not
kno
w
ho
w.

0..
Exercises

0...
Exer
cise.
W
e
kno
w
that
t
yp
es
of
K
and
S
are
sucien
t
to
ax-
iomatize
the
arro
w-only
fragmen
t
of
prop
ositional
in
tuitionistic
logic.
These
t
yp
es
corresp
ond
to
the
third
and
sixth
axiom
of
Section
	.
(see
Exam-
ple
0..).
One
can
th
us
conjecture
that
the
rst
axiom
x
'(x):
!
'(t)
,
whic
h
b
ecomes
(0
!
')
!
'
after
erasing
dep
endencies,
can
b
e
eliminated
from
the
axiom
system.
Sho
w
that
this
conjecture
is
wrong:
our
form
ula
cannot
b
e
deriv
ed
from
the
other
t
w
o
axiom
sc
hemes.


Chapter
0.
Dep
enden
t
t
yp
es

CHAPTER

First-order
arithmetic
and
G
odel's
T
Arithmetic
is
the
core
of
almost
all
of
mathematics.
And
expressing
and
pro
ving
prop
erties
of
in
tegers
alw
a
ys
w
as
one
of
the
primary
goals
of
math-
ematical
logic.
In
this
c
hapter,
w
e
will
trace
the
Curry-Ho
w
ard
corresp
on-
dence
bac
k
to
the
0's
and
0's,
to
disco
v
er
it
in
some
fundamen
tal
w
orks
of
Kleene
and
G
odel.
Both
these
w
orks
aimed
at
pro
ving
consistency
of
P
eano
Arithmetic.
F
or
this
purp
ose
they
giv
e
some
fundamen
tal
insigh
ts
on
the
constructiv
e
con
ten
ts
of
arithmetical
pro
ofs.
..
The
language
of
arithmetic
The
signature
(cf.
Denition
.)
of
rst-order
arithmetic
consists
of
t
w
o
binary
function
sym
b
ols
+
and
,
t
w
o
constan
t
sym
b
ols
0
and

and
the
sym-
b
ol
=
for
equalit
y
.

The
standar
d
mo
del
of
arithmetic
is
the
set
of
in
tegers
N
with
the
ordinary
understanding
of
these
sym
b
ols,
i.e.,
the
structure:
N
=
hN
;
+;
;
0;
;
=i:
Note
that
all
elemen
ts
of
N
can
b
e
giv
en
names
in
the
language
of
arithmetic.
Let
n
denote
the
term

+

+



+
,
with
exactly
n
copies
of

(assuming
that
0
is
0).
By
Th
(A)
w
e
denote
the
set
of
all
rst-order
sen
tences
that
are
classically
true
in
A
(i.e.,
the
set
of
all
sen
tences
'
suc
h
that
A
j
=
',
in
the
sense
of
Section
	.).
The
follo
wing
classical
result
sho
ws
the
limitation
of
rst-order
logic:
...
Theorem.
Ther
e
exists
a
nonstandar
d
mo
del
of
arithmetic,
i.e.,
a
structur
e
M
=
hM
;
;

;
0;
;
=i,
such
that
Th
(M)
=
Th
(N
),
but
M
and
N
ar
e
not
isomorphic.

Another
t
ypical
c
hoice
is
to
tak
e
a
unary
function
sym
b
ol
s
for
the
successor
function,
instead
of
.
	

0
Chapter
.
First-order
arithmetic
and
G
odel's
T
The
ab
o
v
e
fact
is
a
consequence
of
c
omp
actness
the
or
em
,
see
[
].
Ho
w
ev
er,
the
denitional
strength
of
rst-order
form
ulas
o
v
er
the
stan-
dard
mo
del
is
quite
non
trivial.
Let
us
sa
y
that
a
k
-ary
relation
r
o
v
er
N
is
arithmetic
al
i
there
exists
a
form
ula
'(
~
x)
with
k
free
v
ariables
~
x,
suc
h
that,
for
ev
ery
~
n

N
k
:
r
(
~
n
)
holds
i
N
j
=
'(
~
n):
A
function
is
arithmetic
al
i
it
is
arithmetical
as
a
relation.
W
e
ha
v
e
the
follo
wing
theorem
of
G
odel:
...
Theorem.
A
l
l
p
artial
r
e
cursive
functions
(in
p
articular
al
l
r
e
cursive
functions)
ar
e
arithmetic
al.
In
fact,
partial
recursiv
e
functions
and
relations
are
just
the
v
ery
b
eginning
of
the
\arithmetical
hierarc
h
y".
The
ab
o
v
e
theorem
implies
in
paricular
that
Th
(N
)
m
ust
b
e
undecidable.
Otherwise,
mem
b
ership
in
ev
ery
r.e.
set
w
ould
b
e
also
decidable.
..
P
eano
Arithmetic
Before
G
odel,
p
eople
though
t
that
it
could
b
e
p
ossible
to
axiomatize
Th
(N
),
i.e.,
to
giv
e
a
simple
set
of
axioms
A
suc
h
that
all
sen
tences
of
Th
(N
)
w
ould
b
e
consequences
of
A.
P
eano
Arithmetic,
abbreviated
P
A,
is
suc
h
an
attempt.
The
axioms
of
P
A
are
the
follo
wing
form
ulas:

x
(x
=
x);

xy
(x
=
y
!
y
=
x);

xy
('(x)
!
x
=
y
!
'(y
));

x:(x
+

=
0);

xy
(x
+

=
y
+

!
x
=
y
);

x
(x
+
0
=
x);

xy
(x
+
(y
+
)
=
(x
+
y
)
+
);

x
(x

0
=
0);

xy
(x

(y
+
)
=
(x

y
)
+
x);

x
('(x)
!
'(x
+
)):
!
'(0)
!
x
'(x)).

..
P
eano
Arithmetic

The
third
and
the
last
items
are
actually
axiom
sc
hemes,
not
single
axioms.
Although
the
set
of
axioms
is
th
us
innite,
it
is
still
recursiv
e,
and
th
us
the
set
of
theorems
(deriv
able
sen
tences)
of
P
A
is
r.e.
The
last
axiom
sc
heme
is
called
the
induction
scheme
.
A
theory
T
(a
set
of
sen
tences)
is
c
omplete
i
for
all
sen
tences
 
of
the
rst-order
language
of
T
,
either
T
`
 
or
T
`
: 
.
G
odel's
famous
incompleteness
theorem
asserts
that
P
A
is
not
a
complete
theory
.
This
statemen
t
is
equiv
alen
t
to
P
A
=
Th
(N
),
b
ecause
ev
ery
Th
(A)
is
complete.
The
imp
ortance
of
G
odel's
theorem
is
that
it
holds
also
for
all
extensions
of
P
A,
as
long
as
they
are
eectiv
ely
axiomatizable.
(A
consequence
of
this
is
of
course
that
Th
(N
)
is
not
r.e.)
...
Theorem
(G
odel
incompleteness).
Ther
e
is
a
sentenc
e
Z
such
that
neither
P
A
`
Z
nor
P
A
`
:Z
.
Pr
oof.
The
pro
of
of
the
theorem
is
so
b
eautiful
that
w
e
cannot
resist
the
temptation
to
sk
etc
h
here
the
main
idea,
whic
h
is
to
express
the
\liar
para-
do
x"

in
the
language
of
arithmetic.
This
cannot
b
e
done
in
full,
as
it
w
ould
imply
inconsistency
of
arithmetic,
but
a
w
eak
er
prop
ert
y
will
do.
G
odel's
sen
tence
Z
expresses
the
prop
ert
y
\Z
has
no
pr
o
of
in
P
A".
More
formally
,
w
e
ha
v
e:
N
j
=
Z
i
P
A
`
Z
:
No
w
if
P
A
`
Z
then
N
j
=
Z
,
b
ecause
N
is
a
mo
del
of
P
A,
and
th
us
P
A
`
Z
.
On
the
other
hand,
if
P
A
`
:Z
then
N
j
=
:Z
,
but
also
N
j
=
Z
,
b
y
the
prop
ert
y
of
Z
.
Th
us
Z
can
b
e
neither
pro
v
ed
nor
dispro
v
ed
within
P
A.
The
construction
of
Z
is
based
on
the
idea
of
G
odel
n
um
b
ering.
Eac
h
expression
in
the
language
gets
a
n
um
b
er,
and
w
e
can
write
form
ulas
express-
ing
prop
erties
of
expressions
b
y
referring
to
their
n
um
b
ers.
In
particular,
one
can
write
a
form
ula
T
(x;
y
),
suc
h
that:
N
j
=
T
(n;
m)
i
P
A
`
'
n
(m)
whenev
er
n
is
a
n
um
b
er
of
a
form
ula
'
n
(x)
with
one
free
v
ariable
x.
The
form
ula
:T
(x;
x)
m
ust
also
ha
v
e
a
n
um
b
er,
sa
y
:T
(x;
x)
=
'
k
(x).
Th
us
N
j
=
'
k
(n)
i
P
A
`
'
n
(n):
The
form
ula
Z
that
sa
ys
\I
ha
v
e
no
pro
of
!"
can
no
w
b
e
dened
as
'
k
(k
):
N
j
=
'
k
(k
)
i
P
A
`
'
k
(k
):
u
t

The
sen
tence:
\This
sentenc
e
is
false"
cannot
b
e
true
and
cannot
b
e
false.


Chapter
.
First-order
arithmetic
and
G
odel's
T
It
w
as
a
p
opular
opinion
among
mathematicians
that
G
odel's
theorem
is
of
little
practical
imp
ortance.
Indeed,
the
form
ula
Z
is
based
on
an
articial
diagonalization,
and
ev
erything
one
nds
in
n
um
b
er
theory
textb
o
oks
could
b
e
formalized
in
P
A.
It
is
commonly
assumed
that
the
rst
\natural"
mathe-
matical
problem
indep
enden
t
from
P
A,
w
as
sho
wn
b
y
P
aris
and
Harrington,
see
[
].
This
problem
concerns
nite
com
binatorics
and
ma
y
indeed
b
e
considered
natural.
But
it
is
not
a
purely
arithmetical
problem,
i.e.,
it
has
to
b
e
co
ded
in
to
arithmetic.
In
addition,
it
w
as
actually
in
v
en
ted
for
the
purp
ose
of
b
eing
indep
enden
t,
rather
than
suggested
b
y
actual
mathemat-
ical
researc
h.
W
e
will
see
later
a
strong
normalization
theorem
(and
these
denitely
b
elong
to
the
mathematical
practice)
indep
enden
t
from
P
A.
This
theorem
w
as
obtained
already
b
y
G
odel,
and
th
us
is
m
uc
h
older
than
the
P
aris
and
Harrington
example.
With
the
G
odel
n
um
b
ers
tec
hnique,
one
can
express
consistency
of
P
A.
Indeed,
let
T
(x)
b
e
a
form
ula
suc
h
that:
N
j
=
T
(n)
i
P
A
`
'
n
;
whenev
er
n
is
a
n
um
b
er
of
a
sen
tence
'
n
.
Let
k
b
e
the
n
um
b
er
of
the
sen
tence
\0
=
"
and
let
Con
b
e
the
form
ula
\:T
(k
)".
Then
Con
expresses
consistency
of
P
A:
N
j
=
Con
i
P
A
is
consisten
t.
The
follo
wing
theorem
w
as
also
obtained
b
y
G
odel,
b
y
a
renemen
t
of
tec
h-
niques
used
for
the
pro
of
of
Theorem
...
...
Theorem
(Non-pro
v
abilit
y
of
consistency).
If
P
A
is
c
onsistent
then
P
A
`
Con.
The
conclusion
is
that
to
pro
v
e
consistency
of
arithmetic,
one
m
ust
neces-
sarily
use
to
ols
from
outside
the
arithmetic.
..
Represen
table
and
pro
v
ably
recursiv
e
functions
W
e
no
w
consider
t
w
o
prop
erties
of
functions
that
are
stronger
than
b
eing
arithmetical.
W
e
not
only
w
an
t
our
functions
to
b
e
denable
o
v
er
the
stan-
dard
mo
del,
but
w
e
w
an
t
to
pro
v
e
in
P
A
(or
some
other
theory)
that
the
appropriate
form
ula
actually
denes
a
function.
In
the
denition
b
elo
w,
the
sym
b
ol
	!
should
b
e
read
as
\there
exists
ex-
actly
one".
F
ormally
,
	!x
'(x)
is
an
abbreviation
for
\	x
'(x):
^
y
('(y
)
!
x
=
y
)".
...
Definition.
W
e
sa
y
that
a
k
-ary
total
function
f
o
v
er
N
is
r
epr
e-
sentable
in
P
A
i
there
exists
a
form
ula
'(
~
x
;
y
),
with
k
+

free
v
ariables
~
x;
y
,
suc
h
that:

..
Represen
table
and
pro
v
ably
recursiv
e
functions

)
f
(
~
n
)
=
m
implies
P
A
`
'(
~
n;
m
),
for
all
~
n
;
m;
)
P
A
`
	!y
'(
~
n
;
y
);
for
all
~
n

N
k
.
A
function
is
str
ongly
r
epr
esentable
in
P
A,
if
()
holds
and
)
P
A
`

~
x
	!y
'(
~
x
;
y
).
Eac
h
represen
table
function
is
in
fact
strongly
represen
table
(Exercise
..)
but
pro
ving
that
()
implies
()
is
a
brutal
application
of
tertium
non
datur.
Of
course,
eac
h
represen
table
function
is
arithmetical.
The
con
v
erse
is
not
true,
but
w
e
ha
v
e
the
follo
wing
stronger
v
ersion
of
Theorem
..:
...
Theorem
(G
odel).
A
function
is
r
epr
esentable
in
P
A
if
and
only
if
it
is
r
e
cursive.
The
ab
o
v
e
theorem
implies
that
the
totalit
y
of
ev
ery
recursiv
e
function
can
actually
b
e
pro
v
en
in
P
A.
Ho
w
ev
er,
the
excluded
middle
tric
k
used
in
Exer-
cise
..
suggests
that
suc
h
pro
ofs
are
not
necessarily
constructiv
e.
Pro
ofs
required
b
y
part
()
of
Denition
..
are
constructiv
e,
but
non-uniform.
What
w
e
w
an
t,
is
a
constructiv
e
and
uniform
pro
of
of
termination
for
all
argumen
ts,
suc
h
that
w
e
are
able
to
actually
compute
the
v
alue
m
of
f
(
~
n
)
from
this
pro
of.
W
e
should
understand
ho
w
ev
er
that
for
this
reason
w
e
should
b
e
concerned
with
particular
algorithms
rather
than
extensionally
understo
o
d
functions.
This
calls
for
a
ner
notion
of
pro
v
able
totalit
y
.
Recall
that,
b
y
Kleene's
normal
form
the
or
em
,
ev
ery
partial
recursiv
e
function
f
can
b
e
written
as
f
(
~
n
)
=


(y
:t
f
(
~
n;
y
)
=
0);
where


is
a
pro
jection
(second
in
v
erse
to
the
pairing
function)
and
t
f
is
primitiv
e
recursiv
e.
The
function
t
f
describ
es
a
particular
algorithm
com-
puting
f
.
T
ermination
of
this
particular
algorithm
can
b
e
expressed
b
y
a
form
ula
of
the
form

~
x
	y
(t
f
(
~
x
;
y
)
=
0):
F
ortunately
,
primitiv
e
recursiv
e
functions
do
not
create
an
y
of
the
ab
o
v
e
men
tioned
diculties.
That
is,
pro
ofs
of
totalit
y
for
primitiv
e
recursiv
e
functions
are
completely
eectiv
e.
In
addition,
ev
ery
primitiv
e
recursiv
e
function
can
b
e
uniquely
dened
b
y
means
of
equational
axioms.
Th
us,
w
e
can
actually
extend
the
language
of
P
A
b
y
names
and
dening
equations
for
\as
man
y
primitiv
e
recursiv
e
functions
as
w
e
wish"

without
an
y
un
w
an
ted
side-eects
(i.e.,
this
extension
of
P
A
is
conserv
ativ
e.)
It
follo
ws
that
as-
suming
the
ab
o
v
e
form
ula
to
b
e
literally
a
form
ula
of
P
A
is
as
harmless
as
it
is
con
v
enien
t.

A
quotation
from
[
].


Chapter
.
First-order
arithmetic
and
G
odel's
T
...
Definition.
A
recursiv
e
function
f
is
said
to
b
e
pr
ovably
total
(or
pr
ovably
r
e
cursive
)
in
P
A
i
P
A
`

~
x
	y
(t
f
(
~
x;
y
)
=
0):
It
is
customary
to
talk
ab
out
pro
v
ably
recursiv
e
functions
,
but
what
w
e
actually
deal
with
is
the
notion
of
a
pro
v
ably
recursiv
e
algorithm
.
A
function
should
b
e
regarded
pro
v
ably
total
if
one
of
its
algorithms
is
pro
v
ably
total.
The
class
of
functions
pro
v
ably
total
in
P
A
is
v
ery
large
and
includes
most
of
commonly
considered
functions,
and
m
uc
h
more,
up
to
un
b
eliev
able
complexit
y
.
But
there
are
recursiv
e
functions
that
are
not
pro
v
ably
total
in
P
A.
..
Heyting
Arithmetic
The
searc
h
for
a
constructiv
e
meaning
of
classical
pro
of
of
totalit
y
of
a
recur-
siv
e
function,
leads
of
course
to
the
notion
of
in
tuitionistic
arithmetic.
By
Heyting
A
rithmetic
(HA),
w
e
mean
a
formal
theory
based
on
the
follo
wing
axioms
and
rules:

All
axioms
and
rules
of
rst-order
in
tuitionistic
logic;

All
axioms
of
P
eano
Arithmetic;

Dening
equations
for
all
primitiv
e
recursiv
e
functions.
This
means
that
HA
is
a
theory
in
the
language
of
arithmetic,
extended
b
y
new
function
sym
b
ols
for
all
primitiv
e
recursiv
e
functions.
This
extension
is
not
essen
tial,
b
ecause
of
conserv
ativit
y
,
but
is
tec
hnically
v
ery
useful.
Here
are
some
in
teresting
prop
erties
of
HA.
(More
can
b
e
found
in
[0
]
and
[
].)
...
Theorem.
.
HA
`
x
y
(x
=
y
_
:(x
=
y
)).
.
If
HA
`
	x
'(x)
for
a
close
d
formula
	x
'(x)
then
HA
`
'(k
),
for
some
k

N
.
.
HA
`
('
_
 
)
$
	x
((x
=
0
!
')
^
(:(x
=
0)
!
 
)),
for
al
l
';
 
.
.
If
HA
`
'
_
 
,
for
close
d
'
and
 
,
then
either
HA
`
'
or
HA
`
 
.
.
If
HA
`
x
('(x)
_
:'(x))
and
HA
`
::	x
'(x)
then
HA
`
	x
'(x).
(Markov's
Principle)

..
Heyting
Arithmetic

Pr
oof.
)
Exercise
...
)
See
[
]
for
a
seman
tical
pro
of
using
Kripk
e
mo
dels.
)
F
ollo
ws
from
part
.
)
F
ollo
ws
from
parts

and
.
)
F
rom
HA
`
::	x
'(x)
it
follo
ws
that
P
A
`
	x
'(x),
and
th
us
N
j
=
'(k
),
for
some
k
.
But
w
e
ha
v
e
HA
`
'(k
)
_
:'(k
)
and
th
us,
b
y
(),
either
'(k
)
or
:'(k
)
is
a
theorem
of
HA.
In
eac
h
case
w
e
conclude
that
HA
`
	x
'(x).
(But
note
that
this
pro
of
is
classical.)
u
t
...
Theorem
(Kreisel
(	)).
A
r
e
cursive
function
is
pr
ovably
total
in
Pe
ano
A
rithmetic
i
it
is
pr
ovably
total
in
Heyting
A
rithmetic.
Pr
oof.
The
righ
t-to-left
part
is
immediate.
W
e
pro
v
e
the
other
part.
Without
loss
of
generalit
y
,
w
e
consider
the
case
of
a
unary
function.
Let
P
A
`
x
	y
(t
f
(x;
y
)
=
0).
Th
us
also
P
A
`
	y
(t
f
(x;
y
)
=
0)
.
One
can
sho
w
that
the
Kolmogoro
v
translation
(see
Chapter

and
	)
w
orks
for
arithmetic
(see
e.g.
[0
]),
so
that
w
e
obtain
HA
`
::	y
(t
f
(x;
y
)
=
0)
.
F
rom
Theo-
rem
..(),
w
e
ha
v
e
HA
`
xy
(t
f
(x;
y
)
=
0
_
:t
f
(x;
y
)
=
0):
W
e
apply
Mark
o
v's
Principle
(Theorem
..())
to
obtain
the
desired
re-
sult.
u
t
There
is
also
a
direct
syn
tactic
pro
of
due
to
F
riedman,
whic
h
do
es
not
require
the
whole
p
o
w
er
of
Mark
o
v's
Principle
and
carries
o
v
er
to
second-
order
arithmetic.
See
Exercise
...
The
pro
of
of
Kreisel's
theorem
w
orks
as
w
ell
for
an
y
form
ula
of
the
form
x
	y
R
(x;
y
),
where
R
is
a
primitiv
e
recursiv
e
predicate.
F
or
instance,
R
ma
y
b
e
just
?,
in
whic
h
case
the
quan
tiers
are
redundan
t.
W
e
conclude
with
the
follo
wing
result.
...
Cor
ollar
y.
HA
is
c
onsistent
if
and
only
if
P
A
is
c
onsistent.
u
t
Kreisel's
theorem
has
the
follo
wing
consequence:
classical
termination
pro
ofs
can
b
e
made
constructiv
e.
...
Example.
Consider
a
form
ula
of
the
form
x	y
P
(x;
y
)
=
0
with
primitiv
e
recursiv
e
P
.
It
can
b
e
seen
as
a
sp
ecication
for
an
input-output
relation
of
a
program.
A
classical
or
in
tuitionistic
pro
of
of
our
form
ula


Chapter
.
First-order
arithmetic
and
G
odel's
T
asserts
that
suc
h
a
program
(a
recursiv
e
function)
exists.
A
program
com-
puting
this
function
can
actually
b
e
extracted
from
a
constructiv
e
pro
of.
F
or
this,
let
us
assume
that
the
signature
of
arithmetic
(and
p
erhaps
a
bit
more)
has
b
een
added
to
P.
Then
a
form
ula
lik
e
n	m(n
=


m
_
n
=


m
+
)
is
inhabited
b
y
a
pro
of,
i.e.,
a
lam
b
da
term.
This
lam
b
da
term
M
,
applied
to
an
y
sp
ecic
n,
will
ev
aluate
to
a
normal
form
pac
k
in
i
(N
);
m
to
:
:
:
for
a
sp
ecic
v
alue
of
m.
Th
us
M
is
actually
a
program
for
dividing
n
um
b
ers
b
y
.
The
little
missing
p
oin
t
in
the
ab
o
v
e
example
is
the
\bit
more"
to
b
e
added
to
the
lam
b
da
calculus.
W
e
ha
v
e
sp
ecic
axioms
in
arithmetic,
most
notably
the
induction
sc
heme.
And
this
has
to
b
e
accoun
ted
for
b
y
extending
the
lam
b
da
calculus
b
y
a
primitiv
e
recursion
op
erator.
..
Kleene's
realizabilit
y
in
terpretation
The
BHK
in
terpretation
men
tioned
in
previous
c
hapters
relies
on
the
infor-
mal
notion
of
a
\construction."
Kleene
[0
]
prop
osed
a
w
a
y
to
mak
e
this
precise.
The
idea
is
that
a
construction
of
a
form
ula
is
a
numb
er
enco
ding
the
constructions
of
the
subform
ulas
of
the
form
ula.
F
or
instance,
a
construction
of
a
conjunction
'

^
'

is
a
n
um
b
er
n
enco
ding
a
pair
of
n
um
b
ers
n

and
n

,
where
n

and
n

are
constructions
of
'

and
'

,
resp
ectiv
ely
.
The
main
problematic
parts
of
the
BHK-in
terpretation
is
in
the
case
of
implication
and
univ
ersal
quan
tier.
F
or
instance,
a
construction
of
an
implication
'
!
 
is
an
eectiv
e
pro
cedure
that
maps
an
y
construction
of
'
in
to
a
construction
of
 
.
Ha
ving
settled
on
N
as
the
domain
of
constructions
it
is
no
w
natural
to
require
that
a
construction
of
an
implication
b
e
a
n
um
b
er
enco
ding
a
recursiv
e
function
that
maps
an
y
construction
of
the
an
teceden
t
to
a
construction
of
the
succeden
t.
Belo
w
w
e
carry
this
out
in
detail,
follo
wing
[
],
sho
wing
that
an
y
form
ula
pro
v
able
in
in
tuitionistic
arithmetic
has
a
construction
in
this
sense.
...
Definition.
Let
e

N
and
'
b
e
a
closed
form
ula
of
arithmetic.
Then
the
circumstances
under
whic
h
e
r
e
alizes
'
are
dened
as
follo
ws.
.
e
realizes
A,
where
A
is
an
atomic
form
ula,
if
e
=
0
and
A
is
true;
.
e
realizes
'

^
'

if
e
=

a


b
where
a
realizes
'

and
b
realizes
'

;
.
e
realizes
'

_
'

if
e
=

0


a
and
a
realizes
'

,
or
e
=




a
and
a
realizes
'

;
.
e
realizes
'

!
'

if
e
is
the
G
odel
n
um
b
er
of
a
partial
recursiv
e
function
f
of
one
argumen
t
suc
h
that,
whenev
er
a
realizes
'

,
then
f
(a)
realizes
'

;

..
Kleene's
realizabilit
y
in
terpretation

.
e
realizes
	x'(x),
where
'(x)
is
a
form
ula
con
taining
only
x
free,
if
e
=

n


a
where
a
realizes
'(n).
.
e
realizes
x'(x),
where
'(x)
is
a
form
ula
con
taining
only
x
free,
if
e
is
the
G
odel
n
um
b
er
of
a
general
recursiv
e
function
f
of
one
argumen
t
suc
h
that
f
(n)
realizes
'(n),
for
ev
ery
n.
A
closed
form
ula
'
is
r
e
alizable
if
there
exists
a
n
um
b
er
e
whic
h
re-
alizes
'.
A
form
ula
'(x

;
:
:
:
;
x
k
)
con
taining
only
the
distinct
v
ariables
x

;
:
:
:
;
x
k
(k

0)
free
is
r
e
alizable
if
there
exists
a
general
recursiv
e
func-
tion
f
of
k
v
ariables
suc
h
that
f
(n

;
:
:
:
;
n
k
)
realizes
'(n

;
:
:
:
;
n
k
),
for
ev
ery
n

;
:
:
:
;
n
k
.
W
e
shall
pro
v
e
b
elo
w
that
ev
ery
form
ula
pro
v
able
in
HA
is
realizable.
Be-
fore
pro
ceeding
with
the
details
it
is
con
v
enien
t
to
in
tro
duce
some
notation
for
partial
recursiv
e
functions.
Let
us
recall
again
Kleene's
normal
form
theorem,
whic
h
w
e
used
in
Section
..
The
predicate
t
f
is
in
fact
uniform
in
f
,
or
more
precisely
in
the
G
odel
n
um
b
er
of
f
.
That
is,
for
ev
ery
partial
recursiv
e
function
f
(x

;
:
:
:
;
x
n
)
of
n
v
ariables,
there
is
a
n
um
b
er
e
suc
h
that
f
(x

;
:
:
:
;
x
n
)
=


(y
:
T
n
(e;
x

;
:
:
:
;
x
n
;
y
));
where
T
n
is
a
certain
primitiv
e
recursiv
e
predicate.
Informally
sp
eaking,
T
n
states
that
e
is
an
enco
ding
of
f
,
and
y
is
an
enco
ding
of
a
computation
of
the
function
enco
ded
b
y
e
(i.e.,
f
)
on
input
x

;
:
:
:
;
x
n
.
This
enco
ding
is
a
pair,
and
the
second
comp
onen
t
of
this
pair
is
the
output.
The
pro
jection


extracts
this
output
from
y
.
The
n
um
b
er
e
is
called
a
G
odel
numb
er
of
f
.
W
e
abbreviate


(y
:
T
n
(e;
x

;
:
:
:
;
x
n
;
y
))
b
y

n
(e;
x

;
:
:
:
;
x
n
).
Also
recall
that
b
y
Kleene's
S
m
n
the
or
em,
there
is
for
ev
ery
m;
n

0
an
m
+
-ary
primitiv
e
recursiv
e
function
S
m
n
(z
;
y

;
:
:
:
;
y
m
)
suc
h
that,
if
e
is
a
G
odel
n
um
b
er
of
the
m
+
n-ary
function
f
(y

;
:
:
:
;
y
m
;
x

;
:
:
:
;
x
n
),
then
for
eac
h
m-tuple
(k

;
:
:
:
;
k
m
)
of
n
um
b
ers,
S
m
n
(e;
k

;
:
:
:
;
k
m
)
is
a
G
odel
n
um
b
er
of
the
n-ary
function
f
(k

;
:
:
:
;
k
m
;
x

;
:
:
:
;
x
n
).
When
f
(y

;
:
:
:
;
y
n
;
x

;
:
:
:
;
x
m
)
is
an
n
+
m-ary
partial
recursiv
e
function
with
G
odel
n
um
b
er
e,
w
e
denote
b
y
x

:
:
:
x
m
:f
(y

;
:
:
:
;
y
n
;
x

;
:
:
:
;
x
m
)
the
function
S
m
n
(e;
y

;
:
:
:
;
y
m
).
Th
us,
x

:
:
:
x
n
:f
(x

;
:
:
:
;
x
n
)
denotes
a
G
odel
n
um
b
er
of
the
function
f
and
x

:
:
:
x
n
:f
(y

;
:
:
:
;
y
m
;
x

;
:
:
:
;
x
n
)
denotes
a
primitv
e
recursiv
e
func-
tion
f
(y

;
:
:
:
;
y
m
)
whose
v
alue
for
eac
h
m-tuple
(k

;
:
:
:
;
k
m
)
of
n
um
b
ers
is
a
G
odel
n
um
b
er
of
the
n-ary
function
f
(k

;
:
:
:
;
k
m
;
x

;
:
:
:
;
x
n
).
W
e
also
write
fz
g(x

;
:
:
:
;
x
n
)
for

n
(z
;
x

;
:
:
:
;
x
n
).


Chapter
.
First-order
arithmetic
and
G
odel's
T
W
e
then
ha
v
e
for
an
y
n-tuple
k

;
:
:
:
;
k
n
of
n
um
b
ers
that
fx

:
:
:
x
n
:f
(y

;
:
:
:
;
y
m
;
x

;
:
:
:
;
x
n
)g(k

;
:
:
:
;
k
n
)

f
(k

;
:
:
:
;
k
m
;
x

;
:
:
:
;
x
n
)
where

means
that
the
t
w
o
functions
ha
v
e
the
same
domain
and
ha
v
e
the
same
results
on
same
argumen
ts
inside
the
domain.
...
Theorem.
If
`
H
A
'
then
'
is
r
e
alizable.
Pr
oof.
W
e
use
a
Hilb
ert-t
yp
e
form
ulation
of
HA:
this
amoun
ts
to
the
Hilb
ert-t
yp
e
form
ulation
of
in
tuitionistic
predicate
calculus
from
Chapter
	,
together
with
the
axioms
for
arithmetic
in
the
rst
section
ab
o
v
e.
The
pro
of
is
b
y
induction
on
the
deriv
ation
of
`
H
A
'.
(This
requires
a
generalized
induction
h
yp
othesis
that
mak
es
sense
for
form
ulas
with
free
v
ariables.)
W
e
skip
most
of
the
pro
of,
sho
wing
only
t
w
o
example
cases.
The
reader
ma
y
nd
the
details
in
x
of
Kleene's
classic
[
].
.
Let
the
pro
of
b
e
an
instance
of
the
axiom
A
!
B
!
A
for
some
A;
B
.
Then
'
=
A
!
B
!
A.
W
e
dene
e
=
a:b:a
(do
es
this
lo
ok
familiar?)
T
o
sho
w
that
e
realizes
',
let
a
realize
A.
W
e
m
ust
sho
w
that
fa:b:ag(a)
i.e.b:a
realizes
B
!
A.
F
or
this
end
let
b
realize
B
,
and
w
e
m
ust
sho
w
that
fb:ag(b),
i.e.,
a
realizes
A,
but
this
holds
b
y
assumption.
.
Let
the
pro
of
b
e
an
instance
of
(A
!
B
!
C
)
!
(A
!
B
)
!
A
!
C
for
some
A;
B
;
C
.
Then:
e
=
p:q
:a:ffpg(a)g(fq
g(a))
u
t
...
Cor
ollar
y.
HA
is
c
onsistent.
Pr
oof.
There
is
no
n
um
b
er
realizing
?.
u
t
...
Cor
ollar
y.
P
A
is
c
onsistent.
Pr
oof.
Immediate
from
Corollaries
..
and
...
u
t
The
pro
of
that
all
in
tuitionistically
pro
v
able
arithmetical
statemen
ts
ha
v
e
realizers
w
orks
b
y
mapping
pro
ofs
in
to
realizers.
These
realizers
are
n
um
b
ers
co
ding
recursiv
e
functions.
Another
similar
approac
h
w
ould
b
e
to
iden
tify
the
pro
ofs
with
-terms
in
an
appropriate
extension
of
P.
This
w
ould
a
v
oid
the
passing
bac
k
and

..
G
odel's
System
T
	
forth
b
et
w
een
functions
and
enco
ding
of
functions.
And
w
e
w
ould
ha
v
e
a
nice
example
of
a
Curry-Ho
w
ard
corresp
ondence.
If
w
e
dene
suc
h
an
extension,
then
consistency
of
arithmetic
should
b
e
inferred
from
normalization:
there
is
no
normal
form
of
t
yp
e
?.
In
fact,
it
o
ccurs
that
w
e
do
not
need
dep
enden
t
t
yp
es
at
all
to
p
erform
a
similar
construction.
It
w
as
actually
done
b
y
G
odel
at
the
simply-t
yp
ed
(prop
ositional)
lev
el,
with
help
of
his
System
T.
..
G
odel's
System
T
W
e
ha
v
e
seen
that
in

!,
the
simply
t
yp
ed
-calculus,
v
ery
few
functions
can
b
e
dened.
F
or
instance,
among
the
n
umeric
functions,
only
the
extended
p
olynomials
can
b
e
dened.
In
this
section
w
e
consider
G
odel's
system
T,
whic
h
arises
from

!
b
y
addition
of
primitiv
e
t
yp
es
for
n
um
b
ers
and
b
o
oleans
and
b
y
addition
of
primitiv
e
recursion
and
conditionals
for
computing
with
these
new
t
yp
es.
the
exp
osition
follo
ws
[
]
to
a
large
exten
t.
It
will
b
e
seen
that
T
is
far
more
expressible
than

!.
The
system
w
as
conceiv
ed
and
used
b
y
G
odel
to
pro
v
e
the
consistency
of
arithmetic.
...
Definition.
G
odel's
system
T,
denoted
also
b
y
T,
is
dened
as
follo
ws.
.
T
has
the
same
set
of
t
yp
es
as
simply
t
yp
ed
-calculus

!,
with
the
follo
wing
additions:

::=
:
:
:
j
in
t
j
b
o
ol
.
T
has
the
same
set
of
terms
as
simply
t
yp
ed
-calculus

!

a
la
Curry
,
with
the
follo
wing
additions:
M
::=
:
:
:
j
z
j
s(M
)
j
r(M
;
N
;
L)
j
t
j
f
j
d(M
;
N
;
L)
.
T
has
the
same
set
of
t
yping
rules
as
simply
t
yp
ed
-calculus

!

a
la
Curry
,
with
the
follo
wing
additions:
 `
z
:
in
t
 `
M
:
in
t
 `
s(M
)
:
in
t
 `
M
:

&
 `
N
:

!
in
t
!

&
 `
L
:
in
t
 `
r(M
;
N
;
L)
:

 `
t
:
b
o
ol
 `
f
:
b
o
ol
 `
M
:

&
 `
N
:

&
 `
L
:
b
o
ol
 `
d(M
;
N
;
L)
:


0
Chapter
.
First-order
arithmetic
and
G
odel's
T
.
T
has
the
same
set
of
reduction
rules
as
simply
t
yp
ed
-calculus

!

a
la
Curry
,
with
the
follo
wing
additions:
r
(M
;
N
;
z
)
!
M
r
(M
;
N
;
s
(L))
!
N
(r(M
;
N
;
L))L
d
(M
;
N
;
t)
!
M
d
(M
;
N
;
f
)
!
N
By
!
T
w
e
denote
the
union
of
!

and
the
ab
o
v
e
reductions.
As
men
tioned
ab
o
v
e,
in
t
and
b
o
ol
denote
t
yp
es
for
in
tegers
and
b
o
oleans,
resp
ectiv
ely
.
The
term
formation
op
erators
z
and
s
denote
zero
and
succes-
sor,
resp
ectiv
ely
,
as
one
migh
t
imagine.
The
t
w
o
rst
inference
rules
for
in
t
can
b
e
seen
as
intr
o
duction
rules,
whereas
the
third
rule
for
in
t
is
an
elimination
rule.
Analogously
,
z
and
s
are
c
onstructors
of
t
yp
e
in
t
and
r
is
a
destructor
of
t
yp
e
in
t.
Similar
remarks
apply
to
the
inference
rules
and
term
formation
op
erators
for
b
o
ol
.
...
Remark.
As
alw
a
ys
one
can
study
a
Ch
urc
h
v
arian
t
and
one
can
study
a
v
arian
t
in
whic
h
pairs
are
included.
The
follo
wing
t
w
o
theorems
sho
w
that
the
main
prop
erties
of
simply
t
yp
ed
-calculus
are
preserv
ed.
In
particular,
the
extra
expressibilit
y
do
es
not
come
at
the
exp
ense
of
lo
osing
strong
normalization.
...
Theorem.
The
r
elation
!
T
is
Chur
ch-R
osser.
Pr
oof.
By
the
T
ait{Martin-L
of
tec
hnique.
u
t
...
Theorem.
The
r
elation
!
T
is
str
ongly
normalizing.
Pr
oof.
By
the
metho
d
of
T
ait.
u
t
Recall
that
T
ait's
metho
d
(whic
h
applies
to
T
with
v
ery
few
adjust-
men
ts)
is
based
on
a
construction
that
assigns
a
set
of
terms
to
ev
ery
t
yp
e.
If
w
e
attempt
to
formalize
T
ait's
pro
of,
w
e
necessarily
m
ust
use
expressions
of
the
form:
\F
or
al
l
sets
A
of
terms,
satisfying
:
:
:
we
have
:
:
:
"
.
W
e
can
talk
ab
out
terms
using
their
n
um
b
ers,
but
one
cannot
en
umerate
all
p
ossible
sets
of
terms,
and
expressions
as
the
ab
o
v
e
cannot
b
e
co
ded
in
to
rst-order
arithmetic.
One
needs
to
quan
tify
o
v
er
sets
of
n
um
b
ers.
Sp
ecically
,
Lemma
..(iii)
asserts
that
for
al
l
typ
es

the
set
[
[
]
]
is
satur
ate
d
.
If
w
e
could
dene
[
[
]
]
directly
then
w
e
could
write
a
form
ula


(x)
expressing
in
arithmetic
that
x
is
a
mem
b
er
of
[
[
]
].
Then,
the
statemen
t
of
our
lemma
could
b
e
expressed
in
the
rst-order
language.
But
the
denition
of
[
[
]
]
is
b
y
induction,
and
there
is
no
single
form
ula
expressing
the
prop
ert
y

..
G
odel's
System
T

of
b
eing
a
mem
b
er
of
[
[
]
].
The
denition
of
[
[
]
]
can
only
b
e
seen
as
a
set
of
p
ostulates
ab
out
a
set
(unary
relation)
v
ariable
X
.
Th
us,
Lemma
..(iii)
can
only
b
e
formalized
as
follo
ws:
for
al
l
typ
es

and
al
l
sets
X
,
if
X
satises
the
p
ostulates
on
[
[
]
]
then
X
is
satur
ate
d.
And
this
in
v
olv
es
the
quan
tier
\X
".
Our
rst
normalization
pro
ofs
w
ere
for
simply
t
yp
ed
-calculus.
W
e
pro
v
ed
b
oth
w
eak
normalization
b
y
the
\simple"
T
uring-Pra
witz
tec
hnique
and
strong
normalization
b
y
the
\non
trivial"
tec
hnique
due
to
T
ait.
There
are
also
\simple"
pro
ofs
of
the
strong
normalization
theorem
for

!.
The
dierence
b
et
w
een
simple
and
nontrivial
can
b
e
giv
en
more
precise
mean-
ing:
the
\simple"
tec
hniques
can
b
e
formalized
in
arithmetic,
whereas
the
\non
trivial"
can
not.
In
the
case
of
T
the
situation
is
dieren
t.
The
T
ait
pro
of
can
b
e
adapted
to
pro
v
e
strong
normalization
for
T,
but
the
simple
pro
ofs
men
tioned
ab
o
v
e
do
not
w
ork.
In
fact,
an
y
strong
normalization
pro
of
for
System
T
m
ust
b
e
\non
trivial".
See
Corollary
...
Ho
w
ev
er,
if
w
e
restrict
atten
tion
to
nitely
man
y
t
yp
es,
the
situation
is
dieren
t.
W
e
no
longer
need
to
quan
tify
o
v
er
all
sets,
b
ecause
w
e
only
need
nitely
man
y
of
them,
and
these
can
b
e
explicitely
dened
b
y
form
ulas.
Th
us,
the
whole
pro
of
carries
o
v
er
in
rst-order
arithmetic.
This
situation
o
ccurs
in
particular
when
w
e
deal
with
a
single
function
f
,
denable
b
y
a
term
F
,
see
Prop
osition
..0.
In
T,
one
can
compute
with
b
o
oleans.
...
Example.
Dene
not(M
)
=
d(f
;
t;
M
)
or
(M
;
N
)
=
d(t;
N
;
M
)
and(M
;
N
)
=
d(N
;
f
;
M
)
Then
not(t)
!
T
f
not(f)
!
T
t
and
w
e
similarly
ha
v
e
the
exp
ected
reductions
for
or
and
and.
W
e
also
ha
v
e
some
more
reductions.
F
or
instance,
or
(t;
N
)
!
T
t
Ho
w
ev
er,
w
e
do
not
ha
v
e
or(N
;
t
)
!
T
t
Indeed,
one
can
sho
w
that
there
is
no
t
ypable
term
G(x;
y
)
suc
h
that
b
oth
G(t
;
N
)
!
T
t
and
G(N
;
t)
!
T
t
.
Ab
o
v
e
w
e
ha
v
e
in
tro
duced
in
t
as
a
represen
tation
of
in
tegers.
The
fol-
lo
wing
c
haracterization
of
normal
forms
giv
es
the
precise
in
terpretation
of
that.


Chapter
.
First-order
arithmetic
and
G
odel's
T
...
Pr
oposition.
L
et
M
b
e
a
close
d
normal
form
and
supp
ose
`
M
:

.
.
if

=
in
t
then
M
=
m,
for
some
m

N
;
.
if

=
b
o
ol
then
M
=
f
or
M
=
t;
.
if

=


!


then
M
=
x:N
.
In
T
one
can
also
compute
with
in
tegers.
...
Example.
Dene
for
an
y
n
um
b
er
n

N
:
n
=
s
n
(z
)
Then
w
e
can
dene
plus(M
;
N
)
=
r(M
;
x:y
:s
(x);
N
)
Indeed,
plus
(m;
z
)
=
r(m;
x:y
:s
(x);
z
)
!
T
m
and
plus
(m;
n
+

)
=
plus(m
;
s(n))
=
r(m;
x:y
:s
(x);
s
(n))
!
T
(x:y
:s
(x))
(r
(m;
x:y
:s
(x);
n))n
!
!
T
s(r
(m;
x:y
:s
(x);
n))
!
!
T
s(m
+
n)
=
m
+
n
+

...
Definition.
A
function
f
:
N
k
!
N
is
denable
in
T
b
y
a
term
F
if

.
`
F
:
in
t
k
!
in
t;
.
F
(m

;
:
:
:
;
m
k
)
=
T
f
(m

;
:
:
:
;
m
k
).
It
is
an
easy
exercise
to
sho
w
that
m
ultiplication,
exp
onen
tial,
predecessor,
etc..
are
denable.
As
long
as

in
the
t
yping
rules
for
the
new
constructs
is
restriced
to
base
t
yp
es,
i.e.,
b
o
ol
and
in
t,
the
functions
that
can
b
e
dened
in
this
w
a
y
are
primitiv
e
recursiv
e.
Ho
w
ev
er,
as
the
t
yp
e

increases,
more
and
more
functions
b
ecome
denable.
In
fact,
one
can
sho
w
that
Ac
k
ermann's
function
is
denable
in
T
(Exercise
..).
The
system
T
is
also
called
the
system
of
primitive
r
e
cursive
function-
als
of
nite
typ
e
,
b
ecause
it
mak
es
a
system
of
notation
for
higher-order
functions
(i.e.,
functions
on
functions
etc.)
dened
o
v
er
the
set
of
in
tegers
b
y
means
of
primitiv
e
recursion.
(The
\al"
in
\functionals"
reects
exactly
the
p
oin
t
that
w
e
deal
with
higher-order
ob
jects.)

in
t
k
means
in
t
!
:
:
:
!
in
t
(k
arro
ws).

..
G
odel's
Diale
ctic
a
in
terpretation

..	.
Remark.
A
construction
related
to
the
r
e
cursor
r
is
the
iter
ator
i.
It
has
form
i(M
;
N
;
L)
with
the
t
yping
rule
 `
M
:

&
 `
N
:

!

&
 `
L
:
in
t
 `
i(M
;
N
;
L)
:

and
reduction
rules
i(M
;
N
;
z
)
!
M
i(M
;
N
;
s
(L))
!
N
(i(M
;
N
;
L))
The
predecessor
function
satisfying
p(s(x))
!
T
x
can
b
e
dened
b
y
the
recursor
but
not
b
y
the
iterator.
Ho
w
ev
er,
also
the
iterator
can
dene
the
predecessor
pro
vided
one
only
requires
that
p
(m
+
)
!
T
m.
In
fact,
one
can
dene
the
recursor
from
the
iterator
and
pairing,
pro
vided
one
only
requires
reductions
of
this
form.
The
question
arises
exactly
whic
h
functions
can
b
e
dened
in
T.
It
is
not
dicult
to
see
that
ev
ery
primitiv
e
recursiv
e
function
is
denable.
It
is
also
not
dicult
to
see
that
not
ev
ery
recursiv
e
function
can
b
e
denable.
Indeed,
supp
ose
otherwise.
All
terms
of
t
yp
e
in
t
!
in
t
can
b
e
eectiv
ely
en
umerated,
and
eac
h
of
these
terms
denes
a
total
function
(b
ecause
of
strong
normalization).
Th
us,
w
e
can
en
umerate
all
total
recursiv
e
functions
of
one
argumen
t:
g
0
;
g

;
:
:
:
.
But
the
function
h(x)
=
g
x
(x)
is
recursiv
e
and
cannot
o
ccur
in
the
sequence.
W
e
can
ha
v
e
ev
en
a
tigh
ter
upp
er
b
ound.
..0.
Pr
oposition.
A
l
l
functions
denable
in
T
ar
e
pr
ovably
total
in
P
A.
Pr
oof.
If
a
function
f
is
denable
b
y
a
term
F
then
this
term
describ
es
an
algorithm
to
compute
f
.
Th
us,
a
predicate
t
f
can
b
e
eectiv
ely
computed
from
F
and
con
v
ersely
.
Pro
ving
the
form
ula
x
	y
(t
f
(x;
y
)
=
0)
th
us
reduces
to
pro
ving
that
all
applications
of
the
form
F
n
are
strongly
normalizable.
One
can
do
it
(with
T
ait's
tec
hnique)
so
that
only
nitely
man
y
t
yp
es
m
ust
b
e
considered.
All
this
argumen
t
can
b
e
co
ded
in
to
arithmetic.
u
t
W
e
will
see
later
(Theorem
..)
that
the
class
of
functions
denable
in
T
coincides
with
the
class
of
pro
v
ably
total
functions
of
P
A.
..
G
odel's
Diale
ctic
a
in
terpretation
G
odel
in
tro
duced
System
T
as
a
v
ehicle
to
pro
v
e
consistency
of
P
A.
More
precisely
,
he
translates
eac
h
form
ula
of
arithmetic
in
to
a
statemen
t
ab
out
the
primitiv
e
recursiv
e
functionals
of
nite
t
yp
e
b
y
the
so-called
Diale
ctic
a
interpr
etation.
The
original
G
odel's
pap
er
is
[
].
W
e
will
only
sk
etc
h
the
main
ideas
here.
More
details
can
b
e
found
e.g.
in
[
,
Ch.].


Chapter
.
First-order
arithmetic
and
G
odel's
T
The
basis
of
the
metho
d
is
a
translation
of
a
form
ula
'
in
the
language
of
arithmetic
in
to
a
term
'
D
of
t
yp
e
b
o
ol.
Supp
ose
rst
that
'
is
an
atomic
form
ula.
Since
all
primitiv
e
recursiv
e
functions
and
predicates
are
denable
in
T,
w
e
can
dene
'
D
so
that
H
A
`
'
i
'
D
=
T
t:
Here
w
e
do
not
require
an
y
additional
information
ab
out
the
pro
of
of
'
to
b
e
preserv
ed
b
y
'
D
.
(This
is
b
ecause
primitiv
e
recursiv
e
statemen
ts
are
treated
as
\observ
ables".
Compare
this
to
0
realizing
all
atomic
form
ulas
in
Kleene's
approac
h.)
F
or
complex
form
ulas,
w
e
w
an
t
more.
An
ideal
situation
w
ould
b
e
as
follo
ws:
'
D
has
one
free
v
ariable
x,
and
H
A
`
'
i
'
D
[x
:=
M
]
=
T
t;
for
some
M
:
The
term
M
w
ould
b
e
the
realizer,
i.e.,
it
w
ould
represen
t
the
pro
of.
(Note
the
distinction:
'
D
is
a
syn
tactic
translation,
the
computational
con
ten
ts
is
in
M
.)
Life
is
not
that
easy
,
and
w
e
ha
v
e
to
settle
for
something
a
little
less
transparen
t
and
more
complicated.
But
the
essen
tial
idea
remains
the
same.
Belo
w
w
e
w
ork
in
Ch
urc
h-st
yle
T,
extended
with
pro
duct
t
yp
es
for
simplic-
it
y
.
(This
is
a
syn
tactic
sugar
that
allo
ws
us
to
iden
tify
sequences
of
t
yp
es
(v
ariables
etc.)
with
single
t
yp
es
(v
ariables,
etc.)
if
w
e
nd
it
con
v
enien
t.)
...
Definition.
.
F
or
a
term
M
:
b
o
ol
,
with
FV(M
)
=
fz

g,
w
e
write
T
j
=
M
i
M
[z
:=
Z
]
=
T
t
,
for
all
closed
Z
:

.
.
W
e
dene
a
-formula
as
an
expression
of
the
form
\	x

y

D
(x;
y
)",
where
x;
y
are
v
ariables,

and

are
arbitrary
t
yp
es,
and
D
(x;
y
)
has
t
yp
e
b
o
ol.
.
W
e
write
T
j
=
	x

y

D
i
there
exists
a
term
X
:

with
y

FV
(X
),
suc
h
that
T
j
=
D
[x
:=
X
].

The
v
ariables
x
and
y
in
the
ab
o
v
e
denition,
part
()
ma
y
b
e
of
pro
duct
t
yp
es,
th
us
actually
ma
y
represen
t
se
quenc
es
of
v
ariables.
...
Definition.
F
or
eac
h
form
ula
'
in
the
language
of
arithmetic,
w
e
dene
a
-form
ula
'
D
=
	xy
'
D
b
y
induction
with
resp
ect
to
'.

If
'
is
an
atom
(a
primitiv
e
recursiv
e
relation)
then
'
D
=
	x
in
t
y
in
t
'
D
,
where
'
D
is
a
term
whic
h
denes
this
relation
in
T,
and
x
and
y
are
fresh
v
ariables.

The
term
X
should
b
e
seen
as
parameterized
b
y
the
free
v
ariables
of
D
,
except
y
.

..
G
odel's
Diale
ctic
a
in
terpretation

Note
that
?
is
a
primitiv
e
recursiv
e
relation.
Th
us,
as
?
D
w
e
can
tak
e
e.g.
the
term
f
.
Also
note
that
the
quan
tiers
	x
in
t
y
in
t
are
redundan
t
and
in
tro
duced
here
just
for
uniformit
y
.
Let
no
w
assume
that
'
D
=
	x

y

'
D
(x;
y
)
and
 
D
=
	u

v

 
D
(u;
v
).
Then:

('
^
 
)
D
=
	xuy
v
('
D
(x;
y
)
^
 
D
(u;
v
));

('
_
 
)
D
=
	z
in
t
xuy
v
((z
=
0
!
'
D
)
^
(z
=
0
!
 
D
));

('
!
 
)
D
=
	u


!
y


!!
xv
('
D
(x;
y

xv
)
!
 
D
(u

x;
v
));

(:')
D
=
	z

!
x(:'
D
(x;
z
x));
And
no
w
tak
e
'
D
=
	x

y

'
D
(x;
y
;
z
in
t
).
Then

(	z
')
D
=
	z
xy
'
D
(x;
y
;
z
);

(z
')
D
=
	x

in
t
!
y
z
'
D
(x

z
;
y
;
z
)
...
Theorem
(G
odel).
If
HA
`
'
then
T
j
=
'
D
.
Pr
oof.
The
pro
of
is
b
y
induction
with
resp
ect
to
the
pro
of
of
'.
W
e
omit
this
pro
of,
whic
h
can
b
e
found
in
[
,
Ch.].
u
t
The
pro
of
of
the
ab
o
v
e
theorem
is
actually
building
a
realizer
X
for
a
giv
en
pro
of
in
HA.
The
computational
con
ten
ts
of
the
pro
of
in
HA
is
preserv
ed
b
y
the
realizer
as
w
e
will
see
b
elo
w.
Here
are
some
consequences
of
the
in
terpretation.
...
Cor
ollar
y.
HA
is
c
onsistent.
Pr
oof.
Supp
ose
HA
`
?.
Then
T
j
=
?
D
,
i.e.,
w
e
ha
v
e
f
=
T
t.
u
t
...
Cor
ollar
y.
The
str
ong
normalization
the
or
em
for
System
T
is
a
statement
indep
endent
fr
om
P
A.

Pr
oof.
Otherwise,
all
the
pro
of
of
SN
w
ould
b
e
formalizable
in
P
A.
This
con
tradicts
Theorem
...
u
t
The
ab
o
v
e
result
can
b
e
explained
as
follo
ws.
G
odel's
consistency
pro
of
mak
es
use
of
the
normalization
theorem
for
T,
and
ev
ery
other
part
than
this
latter
result
can
b
e
pro
v
ed
in
P
A
itself,
pro
vided
w
e
go
through
the
eort
of
translating
terms
to
n
um
b
ers
b
y
some
G
odel-n
um
b
ering.
By
G
odel's
the-
orem
ab
out
the
unpro
v
abilit
y
of
consistency
of
arithmetic
within
arithmetic

SN
is
expressible
in
the
language
of
arithmetic
with
help
of
K
onig's
Lemma:
\F
or
e
ach
(G
odel
numb
er
of
a)
term
M
ther
e
is
n
such
that
al
l
r
e
duction
p
aths
fr
om
M
(c
o
de
d
by
a
G
odel
numb
er)
c
onsist
of
at
most
n
steps".


Chapter
.
First-order
arithmetic
and
G
odel's
T
it
follo
ws
that
the
normalization
therem
cannot
b
e
pro
v
ed
in
P
A|unless
P
A
is
inconsisten
t.
Th
us,
in
pro
ving
the
normalization
for
T
w
e
m
ust
b
e
using
metho
ds
whic
h
essen
tially
transcend
pro
of
tec
hniques
that
are
formalizable
in
P
A,
i.e.,
induction
o
v
er
natural
n
um
b
ers.
In
normalization
pro
of
for
simply
t
yp
ed
-calculus
w
e
used
induction
on
lexicographically
order
triples,
and
similarly
in
the
pro
of
of
Gen
tzen's
Hauptsatz
(the
cut-elimination
theorem).
Suc
h
inductions
can
b
e
reduced
to
nested
inductions
and
are
therefore
still
formalizable
in
P
A.
One
can
also
view
induction
on
lexicographically
ordered
tuples
as
an
ordinal
induction|induction
up
to
!
n
|whic
h
happ
ens
to
b
e
formalizable
in
P
A.
Gen
tzen
disco
v
ered
that
b
y
mo
ving
to
larger
ordinals,
one
could
pro
v
e
a
cut-elimination
theorem
for
arithmetic.
More
sp
ecically
he
considers
induction
up
to

0
.
This
is
the
rst
ordinal
that
cannot
b
e
reac
hed
b
y
addition,
m
ultiplication,
and
exp
onen
tiation.
Also,
one
can
sho
w
that
the
functions
denable
in
T
are
the
functions
whic
h
are
denable
b
y
transnite
recursion
up
to
the
ordinals
whic
h
are
strictly
smaller
than

0
,
see
[	
].
This
sho
ws
that
the
expressiv
e
p
o
w
er
of
T
is
enormous.
...
Cor
ollar
y.
A
l
l
functions
pr
ovably
total
in
rst-or
der
arithmetic
ar
e
denable
in
T.
Pr
oof.
Without
loss
of
generalit
y
w
e
can
consider
a
unary
function.
As-
sume
P
A
`
x
	y
(t
f
(x;
y
)
=
0),
where
t
f
is
as
in
Denition
...
Recall
that
t
f
(x;
y
)
=
0
is
primitiv
e,
and
th
us
treated
as
an
atomic
form
ula.
Th
us,
the
translation
of
the
ab
o
v
e
form
ula
(after
remo
ving
redundan
t
quan
tiers)
has
the
form
(x
	y
(t
f
(x;
y
)
=
0))
D
=
	y
in
t
!in
t

x
!
D
(y

x;
x);
where
D
represen
ts
the
relation
t
f
(x;
y
)
=
0.
Since
HA
j
=
(x
	y
(t
f
(x;
y
)
=
0))
D
,
w
e
ha
v
e
a
realizing
term
Y

,
suc
h
that
D
(Y

n;
n)
reduces
to
t
.
Let
Y

n
=
T
m.
Then
w
e
ha
v
e
t
f
(n;
m)
=
0,
and
th
us
f
(n)
=


(m).
Clearly
,
the
pro
jection
is
primitiv
e
recursiv
e
and
represen
ted
b
y
some
term


.
The
conclusion
is
that
the
term
x:

(Y

x)
represen
ts
f
in
System
T.
u
t
T
ogether
with
Prop
osition
..0,
this
giv
es:
...
Theorem.
The
functions
denable
in
T
ar
e
exactly
those
that
ar
e
pr
ovably
total
in
P
A.
...
Remark.
Let
us
no
w
come
bac
k
to
the
idea
men
tioned
in
Exam-
ple
..
of
a
v
arian
t
of
P
corresp
onding
to
rst-order
arithmetic.
W
e

..
Exercises

shall
argue
that
System
T
can
b
e
seen
as
a
prop
ositional
coun
terpart
of
suc
h
a
calculus.
Indeed,
let
us
consider
again
the
induction
sc
heme
(x:in
t)('(x)
!
'(x
+
)):
!
'(0)
!
(x:in
t)'(x):
In
order
to
incorp
orate
arithmetic
in
to
P
one
has
to
mak
e
sure
that
ev
ery
suc
h
t
yp
e
is
inhabited.
One
w
a
y
to
do
it
is
to
in
tro
duce
new
constan
ts
R
'
of
the
ab
o
v
e
t
yp
es.
A
pro
of
b
y
induction
is
no
w
represen
ted
b
y
a
term
R
'
M
(x:
in
t
)('(x)!'(x+))
N
'
0
of
t
yp
e
(x:in
t)'(x).
The
next
question
is
what
should
b
e
a
reduction
rule
asso
ciated
with
R
'
.
Let
n
:
in
t
b
e
a
sp
ecic
in
teger.
The
term
R
'
M
N
n
represen
ts
a
pro
of
of
'(n)
obtained
as
follo
ws:
rst
pro
v
e
the
general
statemen
t
(x:in
t)'(x)
b
y
induction
and
then
apply
it
to
n.
Suc
h
a
pro
of
can
b
e
seen
as
con
taining
a
redundancy:
an
in
tro
duction
of
univ
ersal
quan
tier
b
y
R
'
follo
w
ed
b
y
elimination
of
that
quan
tier.
W
e
can
a
v
oid
redundancy
b
y
applying
M
to
N
exactly
n
times
instead.
This
justies
the
reduction
rules:

R
'
M
N
0
!

N
;

R
'
M
N
(n
+
)
!

M
n(R
'
M
N
n).
No
w
observ
e
what
happ
ens
to
our
constan
t
under
the
dep
endency
erasing
translation
M
!
M
.
The
t
yp
e
of
R
'
b
ecomes:
(in
t
!
'
!
')
!
'
!
in
t
!
'(x);
whic
h
is,
up
to
p
erm
utation,
the
same
as
the
t
yp
e
of
the
recursor
r.
Also,
the
reduction
rules
ab
o
v
e
dier
from
those
of
Denition
..()
just
in
the
order
of
argumen
ts.
..
Exercises
...
Exer
cise.
Sho
w
that
the
follo
wing
theorems
are
deriv
able
in
P
A:

x
(:(x
=
0)
!
	y
(y
=
x
+
));

xy
z
(x
=
y
!
y
=
z
!
x
=
z
);

xy
z
((x
+
y
)
+
z
=
x
+
(y
+
z
));

xy
(x
+
y
=
y
+
x);


+

=

;

x	y
(x
=


y
_
x
=


y
+
);

other
common
arithmetical
prop
erties.


Chapter
.
First-order
arithmetic
and
G
odel's
T
...
Exer
cise.
Chec
k
whether
the
axiom
sc
heme
xy
('(x)
!
x
=
y
!
'(y
))
of
P
A
can
b
e
replaced
b
y
xy
(x
=
y
!
x
+

=
y
+
)
and
xy
z
(x
=
y
!
y
=
z
!
x
=
z
).
...
Exer
cise.
Sho
w
that
ev
ery
function
represen
table
in
P
A
is
strongly
represen
table
(and
con
v
ersely).
Hint:
Consider
the
form
ula:
(	!z
'(
~
x
;
z
):
^
'(
~
x
;
y
))
_
(:	!z
'(
~
x
;
z
):
^
y
=
0):
...
Exer
cise.
Sho
w
that
the
condition
()
in
Denition
..
can
b
e
replaced
b
y:
')
P
A
`
	y
'(
~
n
;
y
);
for
all
~
n

N
k
;
")
N
j
=
'(
~
n;
m)
implies
f
(n)
=
m,
for
all
~
n
and
m.
Hint:
Consider
the
form
ula:
'(
~
x;
y
)
^
z
('(
~
x
;
z
)
!
y

z
).
...
Exer
cise.
Consider
again
the
form
ulas
of
Exercise
...
Are
they
pro
v
able
in
HA?
...
Exer
cise.
Pro
v
e
part

of
Theorem
...
...
Exer
cise.
Let
%
b
e
a
xed
form
ula.
F
or
an
y
form
ula
',
let
'
%
b
e
obtained
from
'
b
y
replacing
ev
ery
atomic
subform
ula

b
y

_
'.
Sho
w
that
if
HA
`
'
then
also
HA
`
'
%
.
...
Exer
cise
(H.
F
riedman).
Pro
v
e
Theorem
..,
using
Exercise
..
as
a
lemma.
Hint:
T
ak
e
%
to
b
e
	y
(t
f
(
~
x;
y
)
=
0),
and
apply
Exercise
..
to
the
form
ula
::	y
(t
f
(
~
x;
y
)
=
0).
..	.
Exer
cise.
Sho
w
that
m
ultiplication,
exp
onen
tiation,
subtraction,
and
all
y
our
fa
v
ourite
in
teger
functions
are
denable
in
T.
..0.
Exer
cise.
Here
are
our
fa
v
ourite
in
teger
functions:
let
f
0
b
e
the
successor
function,
and
dene
f
k
+
(x)
:=
f
x
k
(x)
(apply
f
k
to
x
exactly
x
times).
Sho
w
that
all
functions
f
k
are
denable
i
n
T.
...
Exer
cise.
The
A
ckermann
function
f
!
is
dened
b
y
f
!
(x)
=
f
x
(x).
Pro
v
e
that
the
Ac
k
ermann
function
is
not
primitiv
e
recursiv
e.
Hint:
Sho
w
that
ev
ery
primitiv
e
recursiv
e
function
is
ma
jorized
b
y
one
of
the
f
k
's.
...
Exer
cise.
Sho
w
that
the
Ac
k
ermann
function
f
!
(Exercise
..)
is
denable
in
T.
...
Exer
cise.
Sho
w
that
all
functions
f
!
+k
+
(x)
=
f
x
!
+k
(x)
are
den-
able
in
T,
as
w
ell
as
the
function
f
!

(x)
=
f
!
+x
(x).

..
Exercises
	
...
Exer
cise.
Go
ahead,
dene
ev
en
faster
gro
wing
functions,
all
de-
nable
in
T.
Will
this
ev
er
stop?
...
Exer
cise.
Sho
w
that
all
functions
denable
in
!
are
denable
in
T.
T
o
o
easy?
Do
not
use
Sc
h
wic
h
ten
b
erg
theorem.
...
Exer
cise.
Sho
w
that
Bo
oleans
mak
e
syn
tactic
sugar
in
T,
that
is,
the
class
of
in
teger
functions
denable
in
T
without
Bo
oleans
is
the
same.

	0
Chapter
.
First-order
arithmetic
and
G
odel's
T

CHAPTER

Second-order
logic
and
p
olymorphism
W
e
often
sa
y
that
individuals
are
ob
jects
of
or
der
zer
o
.
F
unctions
and
relations
on
individuals
are
of
or
der
one
.
F
urther,
op
erations
on
ob
jects
of
order
n
will
b
e
themselv
es
classied
as
b
eing
of
order
n
+
.
This
terminology
is
often
used
in
the
metalanguage,
referring
to
problems,
systems
etc.
F
or
instance,
the
unication
problem
discussed
in
Chapter
,
is
often
called
\rst-order
unication".
Note
that
the
unied
expressions
(unkno
wns)
are
of
order
zero,
its
the
unication
itself
(an
op
eration
on
terms)
that
is
rst-order.
One
can
also
consider
se
c
ond-or
der
unic
ation
,
with
function
unkno
wns
and
so
on.
W
e
talk
of
\rst-order
logic",
b
ecause
w
e
ha
v
e
rst-order
predicates,
and
b
ecause
quan
tication
can
b
e
seen
as
an
op
erator
acting
on
individuals.
So
what
\second-order
logic"
should
b
e?
T
ypically
,
one
adds
to
the
language
v
ariables
ranging
o
v
er
predicates,
sets
or
functions,
and
quan
tify
o
v
er
suc
h
v
ariables.
Th
us,
second-order
logic
is
usually
an
extension
of
rst-order
logic.
Ho
w
ev
er,
in
presence
of
second-order
quan
tication,
the
rst-order
features
b
ecome
less
imp
ortan
t
than
one
could
exp
ect,
and
man
y
prop
erties
of
second-order
logic
can
b
e
studied
in
a
simplied
settings:
prop
ositional
second-order
logic.
This
logic
is
obtained
b
y
adding
second-order
features
di-
rectly
to
prop
ositional
calculus.
That
is,
quan
tiers
are
no
w
binding
prop
o-
sitional
v
ariables.
..
Prop
ositional
second-order
form
ulas
W
e
extend
the
language
of
prop
ositional
logic
b
y
second-order
quan
tiers,
i.e.,
quan
tiers
o
v
er
prop
ositions.
As
b
efore,
w
e
assume
an
innite
set
P
V
of
prop
ositional
v
ariables
and
w
e
dene
the
se
c
ond-or
der
pr
op
ositional
formulas
b
y
induction,
represen
ted
b
y
the
follo
wing
grammar:

::=
?
j
p
j
(
!
)
j
(
_
)
j
(
^
)
j
p

j
	p
;
	

	
Chapter
.
Second-order
logic
and
p
olymorphism
where
p
ranges
o
v
er
P
V
.
The
quan
tiers
are
mean
t
to
bind
prop
ositional
v
ariables
within
their
scop
e,
so
that
e.g.,
FV(p
')
=
FV
(')
 fpg.
(W
e
skip
the
full
denition
of
FV,
lea
ving
this
pleasure
to
the
reader,
as
w
ell
as
another
one:
to
dene
the
op
eration
of
substitution
'[p
:=
 
].)
W
e
iden
tify
alpha-con
v
ertible
form
ulas.
Notational
con
v
en
tions
are
similar
to
those
used
for
prop
ositional
and
rst-order
logic.
The
in
tended
meaning
of
\p
'(p)"
is
that
'(p)
holds
for
all
p
ossible
meanings
of
p.
The
meaning
of
\	p
'(p)"
is
that
'(p)
holds
for
some
mean-
ing
of
p.
Classically
,
there
are
just
t
w
o
p
ossible
suc
h
meanings:
the
t
w
o
truth
v
alues.
Th
us,
the
statemen
t
p
'(p)
is
classically
equiv
alen
t
to
'(>)
^
'(?),
and
	p
'(p)
is
equiv
alen
t
to
'(>)
_
'(?).
Therefore,
ev
ery
prop
ert
y
express-
ible
with
quan
tiers
can
b
e
also
expressed
without.

In
fact,
ev
ery
function
o
v
er
the
t
w
o-elemen
t
Bo
olean
algebra
f?;
>g
can
b
e
dened
with
help
of
ordinary
prop
ositional
connectiv
es
(this
prop
ert
y
is
called
functional
c
om-
pleteness
)
and
th
us
no
extension
at
all
of
the
prop
ositional
language
can
increase
its
expressiv
e
p
o
w
er.
...
W
arning.
The
ab
o
v
e
is
no
longer
true
when
w
e
add
second-order
quan
tication
to
rst-order
classical
logic,
and
when
the
quan
tied
predi-
cates
ma
y
dep
end
on
individual
terms.
These
are
no
longer
just
truth-v
alues,
but
rather
truth-v
alued
functions
on
individuals.
In
the
in
tuitionistic
logic,
there
is
no
nite
set
of
truth-v
alues,
and
the
prop
ositional
quan
tiers
should
b
e
regarded
as
ranging
o
v
er
some
innite
space
of
predicates.
(In
fact,
there
is
nothing
lik
e
functional
completeness:
Kreisel
[
]
and
Goad
[
]
sho
w
predicates
non-expressible
in
prop
ositional
in
tuitionistic
logic
but
denable
with
help
of
quan
tiers
or
innite
op
era-
tions.)
The
in
tuitiv
e
meaning
of
quan
tied
expressions
is
b
est
explained
b
y
means
of
the
Brou
w
er-Heyting-Kolmogoro
v
in
terpretation.
Note
that
w
e
deal
only
with
prop
ositions
expressible
in
our
language.
Indeed,
to
handle
the
predicates
in
a
constructiv
e
w
a
y
,
w
e
m
ust
b
e
able
to
refer
to
their
pro
ofs.

A
c
onstruction
of
p
'(p)
is
a
metho
d
(function)
tr
ansforming
every
c
onstruction
of
any
pr
op
osition
P
into
a
pr
o
of
of
'(P).

A
c
onstruction
of
	p
'(p)
c
onsists
of
a
pr
op
osition
P,
to
gether
with
a
c
onstruction
of
P,
and
a
c
onstruction
of
'(P).
Syn
tactically
,
predicates
P
m
ust
b
e
themselv
es
represen
ted
b
y
form
ulas.
The
class
of
form
ulas
quan
tiers
range
o
v
er
can
b
e
tak
en
to
b
e
the
full
set
,
or
a
prop
er
subset
of
.
W
e
c
ho
ose
the
rst
option
(called
ful
l
c
ompr
ehension
)
so
that
the
follo
wing
sc
hemes
are
v
alid
(for
ev
ery
'):

But
at
a
certain
cost:
compare
the
PSP
A
CE-completeness
of
satisabilit
y
of
quan
tied
Bo
olean
form
ulas
to
the
NP-completeness
of
ordinary
prop
ositional
form
ulas.
It
follo
ws
that
remo
ving
quan
tiers
ma
y
cause
an
exp
onen
tial
increase
of
the
size
of
a
form
ula.

..
Seman
tics
	

p
':
!
'[p
:=
 
];

	p(p
$
').
One
has
to
b
e
a
w
are
that
the
full
comprehension
p
ostulate
has
the
follo
w-
ing
side-eect,
called
impr
e
dic
ativity
of
second-order
logic.
The
meaning
of
a
form
ula
p
'
is
determined
b
y
the
meanings
of
all
form
ulas
'[p
:=
 
],
including
the
cases
when
 
is
either
equal
or
more
complex
than
p
'
it-
self.
There
is
no
w
ell-founded
hierarc
h
y
with
resp
ect
to
the
seman
tics,
in
particular
man
y
pro
of
metho
ds
based
on
induction
m
ust
fail.
On
the
other
hand,
the
assumption
that
quan
tiers
range
o
v
er
denable
prop
ositions
only
is
a
sharp
restriction
compared
to
the
ordinary
understand-
ing
of
(full)
second-order
classical
logic,
as
in
W
arning
...
Ho
w
ev
er,
from
a
constructiv
e
p
oin
t
of
view,
a
pr
o
of
and
not
a
mo
del
is
the
ultimate
cri-
terium,
and
th
us
the
syn
tactic
approac
h
should
b
e
giv
en
priorit
y
o
v
er
the
seman
tic
w
a
y
of
thinking.
See
also
Remark
...
...
Definition.
Natural
deduction.
The
natural
deduction
system
for
second-order
in
tuitionistic
prop
osi-
tional
logic
consists
of
the
ordinary
rules
for
prop
ositional
connectiv
es
plus
the
follo
wing
rules
for
quan
tiers:
(I
)
 `
'
 `
p
'
(p

F
V
( ))
(E)
 `
p
'
 `
'[p
:=
#]
(	I)
 `
'[p
:=
#]
 `
	p
'
(	E)
 `
	p
'
 ;
'
`
 
 `
 
(p

F
V
( ;
 
))
In
the
ab
o
v
e,
the
notation
F
V
( )
is
the
union
of
all
FV
(%),
for
%

 .
One
can
also
dene
other
pro
of
systems,
most
notably
sequen
t
calculus
for
second-order
prop
ositional
in
tuitionistic
logic.
Cut-elimination
pro
ofs
for
this
calculus
w
ere
obtained
indep
enden
tly
b
y
sev
eral
authors;
three
of
them
(b
y
Girard,
Martin-L
of
and
Pra
witz)
are
published
in
the
b
o
ok
[
].
..
Seman
tics
W
e
b
egin,
as
usual,
with
the
algebraic
approac
h,
based
on
Heyting
algebras,
although,
historically
,
second-order
Kripk
e
seman
tics
w
as
considered
rst.
...
Definition.
Let
v
:
V
!
H
b
e
a
v
aluation
of
prop
ositional
v
ariables
in
a
complete
Heyting
algebra
H
.
W
e
extend
v
to
arbitrary
second-order
form
ulas
as
follo
ws:

v
('
_
 
)
=
v
(')
[
v
( 
);

	
Chapter
.
Second-order
logic
and
p
olymorphism

v
('
^
 
)
=
v
(')
\
v
( 
);

v
('
!
 
)
=
v
(')
)
v
( 
);

v
(?)
=
0;

v
(p')
=
inf
fv
a
p
(')
:
a

H
g;

v
(	p')
=
sup
fv
a
p
(')
:
a

H
g.
where
v
 
p
is
a
v
aluation
dened
b
y
v
a
p
(p)
=
a,
and
v
a
p
(q
)
=
v
(q
),
for
q
=
p.
W
e
use
the
sym
b
ol
j
=
in
the
ob
vious
w
a
y
,
except
that
w
e
deal
no
w
exclusiv
ely
with
complete
algebras.
F
or
instance,
w
e
write
j
=
'
(and
w
e
sa
y
that
'
is
a
tautology)
i
'
has
the
v
alue

under
all
v
aluations
in
all
complete
Heyting
algebras.
...
Theorem
(Heyting
completeness).
The
c
onditions
 j
=
'
and
 `
'
ar
e
e
quivalent.
Pr
oof.
Omitted.

See
the
pap
er
[0
]
for
details.
u
t
The
pap
er
of
Geuv
ers
[0
]
is
suggested
for
reading,
but
algebraic
seman
tics
for
v
arious
second-order
and
higher-order
in
tuitionistic
logics
w
as
kno
wn
b
efore
Geuv
ers,
cf.
the
w
ork
of
Alb
ert
Dragalin
[
].
Kripk
e
seman
tics
for
second-order
prop
ositional
form
ulas
w
as
considered
b
y
sev
eral
authors.
There
are
v
arious
sorts
of
mo
dels
and
dieren
t
v
arian
ts
of
the
logics
under
consideration.
One
should
b
egin
with
a
reference
to
Pra
witz
[
],
who
rst
pro
v
ed
a
completeness
theorem
for
a
class
of
Beth
mo
dels
,
structures
similar
in
spirit
to
Kripk
e
mo
dels.
Then,
Gabba
y
[
,

]
sho
w
ed
completeness
for
a
sligh
t
extension
of
our
second-order
logic
for
a
restricted
class
of
Kripk
e
mo
dels.
This
result
w
as
adjusted
b
y
Sob
olev
[00
]
so
that
the
Gabba
y's
axiom
(see
Remark
..)
w
as
no
longer
necessary
.
W
e
recommend
the
pap
er
[		
]
of
Skv
oro
v
for
a
surv
ey
of
these
results.
Our
denition
b
elo
w
follo
ws
the
latter
pap
er
(up
to
syn
tactic
sugar).
...
Definition.
.
A
second-order
Kripke
mo
del
is
a
tuple
of
the
form
C
=
hC
;
;
fD
c
:
c

C
gi,
where
C
is
a
non-empt
y
set,

is
a
partial
order
in
C
,
and
the
D
c
's
are
families
of
up
w
ard-closed

subsets
of
C
,
satisfying
if
c

c
0
then
D
c

D
c
0
:
The
in
tuition
is
that
D
c
is
the
family
of
predicates
meaningful
at
state
c.

A
dicult
y
in
this
pro
of
is
that
the
Linden
baum
algebra
of
second-order
form
ulas
is
not
complete
and
has
to
b
e
emb
e
dde
d
in
to
a
complete
one
in
suc
h
a
w
a
y
that
the
existing
joins
and
meets
are
preserv
ed.

If
c
0

x

D
c
and
c
0

c
0
0
then
also
c
00

x.

..
Seman
tics
	
.
A
valuation
in
C
assigns
up
w
ard-closed
subsets
of
C
to
prop
ositional
v
ariables.
Suc
h
a
v
aluation
v
is
admissible
for
a
state
c
i
v
(p)

D
c
,
for
all
prop
ositional
v
ariables
p.
Clearly
,
a
v
aluation
admissible
for
c
is
also
admissible
for
all
c
0

c.
W
e
write
v
x
p
for
a
v
aluation
satisfying
v
x
p
(p)
=
x,
and
v
x
p
(q
)
=
v
(q
),
for
q
=
p.
The
forcing
relation
c;
v

'
is
dened
(when
v
is
admissible
for
c)
as
follo
ws:

c;
v

p
i
c

v
(p);

c;
v

'
_
 
i
c;
v

'
or
c;
v

 
;

c;
v

'
^
 
i
c;
v

'
and
c;
v

 
;

c;
v

'
!
 
i
c
0
;
v

 
,
for
all
c
0

c
with
c
0
;
v

';

c;
v

?
nev
er
happ
ens;

c;
v

	p
'
i
c;
v
x
p

',
for
some
x

D
c
;

c;
v

p
'
i
c
0
;
v
x
p

',
for
all
c
0

c,
and
all
x

D
c
0
.
.
A
Kripk
e
mo
del
is
c
omplete
i
for
ev
ery
form
ula
',
ev
ery
c
and
v
,
the
set
v
(')
=
fc
0
:
c
0
;
v

'g
is
in
D
c
,
whenev
er
v
is
admissible
for
c.
(If
w
e
understand
the
meaning
of
prop
ositional
v
ariables
free
in
'
then
w
e
should
understand
the
form
ula
to
o.)
.
W
e
write
 
'
i
for
ev
ery
complete
Kripk
e
mo
del
C
,
ev
ery
c

C
and
ev
ery
v
aluation
v
admissible
for
c,
suc
h
that
c;
v
forces
all
form
ulas
in
 ,
w
e
also
ha
v
e
c;
v

'.
The
completeness
theorem
for
Kripk
e
mo
dels
in
the
form
b
elo
w
should
prob-
ably
b
e
attributed
to
Sob
olev
[00
].
...
Theorem
(Kripk
e
completeness).
The
c
onditions
 
'
and
 `
'
ar
e
e
quivalent.
...
Remark.
The
additional
axiom
sc
heme
used
b
y
Gabbba
y
is:
p( 
_
'(p)):
!
 
_
p
'(p);
where
p

FV( 
):
This
is
a
classical
second-order
tautology
,
but
not
an
in
tuitionistic
tautology
.
The
class
of
mo
dels
corresp
onding
to
prop
ositional
second-order
in
tuition-
istic
logic
extended
with
Gabba
y's
axiom
(called
also
Grzegorczyk
sc
hema)
is
obtained
b
y
p
ostulating
that
all
D
c
are
equal
to
eac
h
other
(mo
dels
with
constan
t
domains).
...
Remark.
Note
that
the
p
ostulate
of
completeness
of
Kripk
e
mo
dels
reects
the
idea
of
impredicativit
y
.
Indeed,
it
guaran
tees
that
the
range
of
a
quan
tied
v
ariable
includes
ev
ery
denable
predicate.
In
fact,
if
w
e
do
not
require
completeness,
the
follo
wing
tautology
sc
hemes
(expressing
full
comprehension)
w
ould
b
e
no
longer
v
alid:

	
Chapter
.
Second-order
logic
and
p
olymorphism

p
'
!
'[p
:=
 
];

	p
(p
$
').
Observ
e
that
completeness
cannot
b
e
replaced
b
y
a
mo
died
denition
of
forcing,
c;
v

p
'
i
c
0
;
v
v
( 
)
p

';
for
all
c
0

c;
and
all
form
ulas
 
;
b
ecause
suc
h
a
denition
w
ould
b
e
circular.
(T
ak
e
 
=
p'.)
...
Remark.
It
is
tempting
to
consider
Kripk
e
mo
dels
with
all
D
c
equal
to
the
family
of
all
up
w
ard-closed
subsets
of
C
(princip
al
Kripk
e
mo
dels).
Unfortunately
,
the
class
of
all
form
ulas
v
alid
in
principal
mo
dels
is
not
re-
cursiv
ely
en
umerable,
and
th
us
non-axiomatizable
in
a
nitary
w
a
y
.
This
result
is
due
to
Skv
oro
v
[		
]
and
indep
enden
tly
to
Kremer
[
].
Of
course
the
ab
o
v
e
men
tioned
results
of
Skv
oro
v
and
Kremer
imply
that
the
set
of
second-order
sen
tences
true
in
all
principal
mo
dels
cannot
b
e
decidable
or
ev
en
recursiv
ely
en
umerable.
The
set
of
pro
v
able
sen
tences
of
our
second-order
in
tuitionistic
logic
is
of
course
recursiv
ely
en
umerable.
But
it
is
undecidable.
...
Theorem.
It
is
unde
cidable
whether
a
given
formula
'


has
a
pr
o
of.
The
rst
pro
of
of
undecidabilit
y
w
as
giv
en
b
y
Gabba
y
[
,
].
But
this
pro
of
applies
to
the
logic
extended
b
y
Gabba
y's
axiom
(see
Remark
..),
and
it
do
es
not
extend
automatically
to
the
pure
in
tuitionistc
case.
The
pro
of
is
using
completeness
theorem,
for
Kripk
e
mo
dels
with
constan
t
domains.
The
pap
er
[00
]
of
Sob
olev
lled
this
gap,
and
allo
w
ed
to
infer
Theorem
..
b
y
essen
tially
the
same
metho
d.
In
the
mean
time,
M.H.
L
ob
[
]
has
published
another
pro
of
of
Theorem
...
The
main
result
of
[
]
whic
h
implies
undecidabilit
y
,
is
an
eectiv
e
translation
from
rst-order
classical
logic
to
second-order
in
tuitionistic
logic.
Unfortunately
,
L
ob's
pap
er
is
quite
in-
comprehensible.
It
has
b
een
later
sligh
tly
simplied
b
y
Arts
[
]
and
Arts
and
Dekk
ers
[
],
but
the
resulting
presen
tations
are
still
quite
complicated.
A
simpler,
syn
tactic
pro
of
of
Theorem
..
can
b
e
found
in
[
].
..
P
olymorphic
lam
b
da-calculus
(System
F)
The
p
olymorphic
lam
b
da-calculus
,
often
referred
to
as
\System
F"
is
an
excellen
t
example
of
a
Curry-Ho
w
ard
corresp
ondence
and
pro
vides
a
surpris-
ing
evidence
for
the
relationships
b
et
w
een
logic
and
computer
science.
This
system
w
as
actually
in
v
en
ted
t
wice:
b
y
the
logician
Jean-Yv
es
Girard
[
]
and
b
y
the
computer
scien
tist
John
Reynolds
[	0
].
The
rst
one's
goal
w
as

..
P
olymorphic
lam
b
da-calculus
(System
F)
	
to
design
a
pro
of
notation
needed
for
his
w
ork
on
second-order
logic,
the
other's
idea
w
as
to
build
a
t
yp
e
system
for
a
p
olymorphic
programming
language.
The
results
(after
dissolving
the
syn
tactic
sugar)
w
ere
essen
tially
the
same.
F
or
a
treatmen
t
of
System
F
extending
the
scop
e
of
the
presen
t
notes,
one
can
consult
the
follo
wing
b
o
oks:
[
,

,

].
...
Definition.
.
(Second-order)
typ
es
are
dened
as
follo
ws:

T
yp
e
v
ariables
are
t
yp
es;

If

and

are
t
yp
es
then
(
!

)
is
a
t
yp
e;

If

is
a
t
yp
e
and

is
a
t
yp
e
v
ariable,
then


is
a
t
yp
e.
Th
us,
t
yp
es
coincide
with
second-order
prop
ositional
form
ulas
o
v
er
!
and

only
.
.
W
ell-t
yp
ed
lam
b
da-terms
(Ch
urc
h
st
yle)
are
dened
b
y
the
t
yp
e
infer-
ence
rules
b
elo
w.
Ev
ery
term
is
either
a
v
ariable,
an
ordinary
applica-
tion
or
abstraction,
or
it
is

a
p
olymorphic
abstr
action
,
written
:M
,
where
M
is
a
term
and

is
a
t
yp
e
v
ariable,
or

a
typ
e
applic
ation
,
written
(M

),
where
M
is
a
term
and

is
a
t
yp
e.
The
in
tuitiv
e
meaning
of
:M
is
that
the
term
M
(whic
h
ma
y
refer
to
a
free
t
yp
e
v
ariable
)
is
tak
en
as
a
p
olymorphic
pro
cedure
with
a
t
yp
e
param-
eter
.
T
yp
e
application
corresp
ond
to
a
call
to
suc
h
a
generic
pro
cedure
with
an
actual
t
yp
e
parameter.
This
is
an
explicit
form
of
p
olymorphism
(t
yp
e
as
parameter)
as
opp
osed
to
implicit
p
olymorphism
of
ML.
...
Definition
(T
yp
e
inference
rules).
A
c
ontext
is
again
a
nite
set
of
declarations
(x
:

),
for
dieren
t
v
ariables
(i.e.,
nite
partial
function
from
v
ariables
to
t
yp
es).
The
axiom
and
the
rules
for
!
are
as
usual:
 ;
x:
`
x
:

 `
N
:

!

 `
M
:

 `
N
M
:

 ;
x
:

`
M
:

 `
x:
:M
:

!

and
w
e
also
ha
v
e
rules
for

corresp
onding
to
natural
deduction
rules
(I)
and
(E)
 `
M
:

 `
(:M
)
:


(

F
V
( ))
 `
M
:


 `
M

:

[
:=

]

	
Chapter
.
Second-order
logic
and
p
olymorphism
Let
us
recall
that
a
Ch
urc
h-st
yle
term
mak
es
sense
for
us
only
within
a
con-
text
that
assigns
t
yp
es
to
free
v
ariables.
W
e
sometimes
stress
this
fact
b
y
placing
(informally)
an
upp
er
index,
as
for
instance
in
x
(
!)

y

[:=
]
.
In
fact,
nding
a
prop
er
decoration
of
free
v
ariables
in
a
giv
en
term
expres-
sion
(to
obtain
a
prop
er
Ch
urc
h-st
yle
term)
is,
surprisingly
,
an
undecidable
problem,
see
[	
].
...
Convention.
As
in
previous
c
hapters,
w
e
sometimes
write
upp
er
indices
to
mark
t
yp
es
of
certain
(sub)terms.
Also,
w
e
sometimes
write
e.g.
x

:
M
,
rather
than
x:
:
M
,
to
impro
v
e
readabilit
y
.
As
should
b
e
no
w
clear
from
the
rules,
the
univ
ersal
t
yp
e


()
corre-
sp
onds
to
a
pro
duct
construction
of
the
form
Q

?

(
).
This
answ
ers
v
ery
w
ell
to
the
idea
that
a
pro
of
of


()
is
a
function
translating
pro
ofs
of

in
to
pro
ofs
of

(
).
F
rom
the
programmer's
p
oin
t
of
view,


is
a
t
yp
e
of
a
p
olymorphic
pro
cedure.
Note
that
the
restriction


F
V
( )
in
the

in
tro
duction
rule
(called
also
generalization
rule)
corresp
onds
to
that
a
t
yp
e
parameter
m
ust
b
e
a
lo
c
al
iden
tier.
...
Example.
Here
are
some
w
ell-t
yp
ed
Ch
urc
h-st
yle
terms:

`
:(x
(!)
:x(
!

)(x
)
:

((
!
):
!

!

);

`
:f
!
x

:f
(f
x)
:
((
!
)
!
(
!
));

`
f
(!
!)
x

:f
(
!)(f
x)
:
(
!

!
):
!
(
!

!

!
).
...
Theorem
(Curry-Ho
w
ard
isomorphism).
We
have
 `
M
:

in
the
p
olymorphic
lamb
da
c
alculus
if
and
only
if
j j
`

has
a
pr
o
of
in
the
f;
!g-
fr
agment
of
the
se
c
ond-or
der
intuitionistic
pr
op
ositional
lo
gic.
...
Cor
ollar
y.
The
inhabitation
pr
oblem
for
the
p
olymorphic
lamb
da
c
alculus
(\Giv
en
t
yp
e

,
is
there
a
closed
term
of
t
yp
e

?")
is
unde
cidable.
Pr
oof.
Immediate
from
the
ab
o
v
e
and
Theorem
...
u
t
...
W
arning.
W
e
skip
the
detailed
denition
of
free
v
ariables
and
sub-
stitution.
The
reader
should
b
e
able
to
write
this
denition
herself,
pro
vided
she
remem
b
ers
ab
out
the
follo
wing:

There
are
free
ob
ject
v
ariables
in
terms
as
w
ell
as
free
t
yp
e
v
ariables.
The
latter
o
ccur
in
the
lam
b
da
abstractions
\x:

"
and
in
t
yp
e
appli-
cations.
Th
us
w
e
ha
v
e
to
consider
substitutions
of
the
form
M
[x
:=
N
]
and
of
the
form
M
[
:=

].

..
Expressiv
e
p
o
w
er
		

There
are
t
w
o
binding
op
erators
in
terms:
the
big
and
the
small
lam
b
da.
Substitutions
m
ust
accoun
t
for
b
oth.
And
note
that
the
term
N
in
M
[x
:=
N
]
ma
y
con
tain
free
t
yp
e
v
ariables
that
are
b
ound
in
M
.
Th
us,
b
oth
sorts
of
renaming
ma
y
b
e
necessary
.

The
denition
of
alpha
con
v
ersion
m
ust
accoun
t
for
the
t
w
o
sorts
of
bindings.

Binding
an
ob
ject
v
ariable
x

do
es
not
mean
binding
t
yp
e
v
ariables
in
.

The
eect
of
substitution
x[
:=

]
is
of
course
x.
But
if
w
e
w
ork
in
a
con
text
con
taining
a
declaration
(x
:

),
then
one
should
b
etter
understand
it
this
w
a
y:
x

[
:=

]
=
x

[:=
]
.
This
is
b
ecause
what
w
e
w
an
t
is
 [
:=

]
`
M
[
:=

]
:

[
:=

]
whenev
er
 `
M
:

.
...
Definition
(Beta
reduction).
There
are
t
w
o
sorts
of
b
eta
reduction
rules:

Ob
ject
reduction:
(x:

:M
)N
 !

M
[x
:=
N
];

T
yp
e
reduction:
(:M
)
 !

M
[
:=

].
This
notion
of
reduction
has
the
exp
ected
prop
erties,
in
particular
it
is
Ch
urc
h-Rosser
and
preserv
es
t
yp
es.
..
Expressiv
e
p
o
w
er
In
classical
logic,
the
connectiv
es
:,
_
and
^
can
b
e
dened
b
y
means
of
?
and
!.
The
quan
tier
	
is
also
expressible
via
the
De
Morgan
la
w,
so
that
?,
!
and

mak
e
a
sucien
t
set
of
op
erators.
This
is
not
the
case
in
in
tuitionistic
logic,
neither
prop
ositional
nor
rst-order.
Ho
w
ev
er,
in
second-
order
prop
ositional
logic,
this
opp
ortunit
y
app
ears
again.
And
w
e
can
ev
en
get
more:
using
!
and

one
can
express
the
other
connectiv
es
and
also
the
constan
t
?.
W
e
ha
v
e
p
ostp
oned
these
denitions
un
til
no
w,
in
order
to
accompan
y
them
with
term
notation.
...
Definition
(Absurdit
y).
W
e
dene
?
:=

:
W
e
ha
v
e
the
follo
wing
term
assignmen
t
to
rule
(E?):
 `
M
:
?
 `
M

:


00
Chapter
.
Second-order
logic
and
p
olymorphism
It
is
easy
to
see
that
there
is
no
closed
term
in
normal
form
that
can
b
e
assigned
t
yp
e

.
It
will
follo
w
from
strong
normalization
that
?
is
an
empt
y
t
yp
e.
...
Definition
(Conjunction
(pro
duct)).
Let

b
e
not
free
in

nor

.
Then

^

:=
((
!

!
)
!
):
(Read
this
denition
as:

^

holds
i
ev
erything
holds
that
can
b
e
deriv
ed
from
f
;

g.)
Lam
b
da-terms
related
to
conjunction
are
pairs
and
pro
jections.
W
e
dene
them
as
follo
ws:

hP
;
Qi
:=
z

!
!
:
z
P
Q;



(M

^
)
:=
M

(x

y

:
x);



(M

^
)
:=
M

(x

y

:
y
).
It
is
left
to
the
reader
to
c
hec
k
that
the
term
assignmen
t
to
the
^-related
rules
of
natural
deduction,
describ
ed
in
Section
.:
 `
M
:
 
 `
N
:
'
 `
<
M
;
N
>:
 
^
'
 `
M
:
 
^
'
 `


(M
)
:
 
 `
M
:
 
^
'
 `


(M
)
:
'
is
correct,
as
w
ell
as
the
b
eta-reduction

i
(hP

;
P

i)
!

P
i
is
implemen
ted
(but
with
!

replaced
b
y
!
!

).
Note
ho
w
ev
er
that
eta-con
v
ersion
is
not
implemen
ted:
if
y

^
is
a
v
ariable
then
h

(y
);


(y
)i
is
a
normal
form.
...
Definition
(Disjunction
(v
arian
t)).
W
e
dene
the
disjunction
of

and

as
their
w
eak
est
common
conse-
quence.
That
is,

_

holds
i
all
common
consequences
of

and

hold.
F
ormally
,
for


FV
(
)
[
FV(
),
w
e
tak
e:

_

:=
((
!
)
!
(
!
)
!
):
W
e
dene
injections
and
case
eliminator
this
w
a
y:

in

(M

)
:=
u

!
v

!
:
uM
;

in

(M

)
:=
u

!
v

!
:
v
M
;

case
(L

_
;
x

:M

;
y

:N

)
:=
L(x

:M
)(y

:N
).

..
Expressiv
e
p
o
w
er
0
The
reader
is
in
vited
to
c
hec
k
the
correctness
of
rules:
 `
M
:
 
 `
in

(M
)
:
 
_
'
 `
M
:
'
 `
in

(M
)
:
 
_
'
 `
L
:
 
_
'
 ;
x
:
 
`
M
:

 ;
y
:
'
`
N
:

 `
case
(L;
x:M
;
y
:N
)
:

as
w
ell
as
the
correctness
of
b
eta
reduction
(Exercise
..).
Before
w
e
discuss
the
existen
tial
quan
tier,
let
us
observ
e
that
v
arious
data
t
yp
es
can
b
e
implemen
ted
in
System
F.
F
or
instance,
t
yp
e
Bo
ol
can
b
e
in
terpreted
as
(
!

!
),
with
true
=
x

y

:
x
and
false
=
x

y

:
y
.
In
tegers
are
represen
ted
b
y
the
t
yp
e
!
:=
((
!
)
!

!
);
with
the
p
olymorphic
Ch
urc
h
n
umerals
c
n
:=
f
!
x

:
f
(


f
(x)



)
represen
ting
n
um
b
ers.
W
e
can
no
w
generalize
the
notion
of
a
denable
in
teger
function
in
the
ob
vious
w
a
y
.
Clearly
,
all
functions
denable
in
simple
t
yp
es
can
also
b
e
dened
in
System
F
b
y
simply
adding
some
's
at
the
b
eginning.
F
or
instance,
w
e
dene
the
successor
function
as:
succ
:=
n
!
::f
!
x

:
f
(nf
x):
But
one
can
do
m
uc
h
more,
for
instance
the
function
n
!
n
n
can
b
e
dened
as
follo
ws:
Exp
:=
n
!
:
n(
!
)(n):
Note
that
this
tric
k
uses
p
olymorphism
in
an
essen
tial
w
a
y
.
W
e
can
general-
ize
it
to
represen
t
primitiv
e
recursion.
Indeed,
System
T
(as
an
equational
theory)
can
b
e
em
b
edded
in
to
System
F.
...
Pr
oposition.
F
or
a
given
typ
e

,
dene
r

:

!
(
!
!
!

)
!
!
!

as
the
fol
lowing
term:
y

f

!!
!
n
!
:


(n(
^
!
)(v

^!
:
hf
(

(v
))(

(v
));
succ
(

(v
))i)hy
;
c
0
i):
Then
r

M
N
(c
0
)
=

M
and
r

M
N
(succ(n))
=

N
(r

M
N
n)n,
Pr
oof.
Exercise
...
u
t
The
reader
is
in
vited
to
dene
represen
tation
of
v
arious
other
data
t
yp
es
in
Exercise
...
Let
us
no
w
consider
the
existen
tial
quan
tier.
W
e
need
a
term
assign-
men
t
the
in
tro
duction
and
elimination
rules.
One
p
ossibilit
y
is
as
follo
ws:

0
Chapter
.
Second-order
logic
and
p
olymorphism
(	I)
 `
M
:

[
:=

]
 `
pac
k
M
;

to
	:

:
	:

(	E
)
 `
M
:
	:

 ;
x
:

`
N
:

 `
abst
yp
e

with
x
:

is
M
in
N
:

(

F
V
( ;
))
As
in
the
rst-order
case,
existen
tial
quan
tication
corresp
onds
to
data
ab-
straction.
An
existen
tial
t
yp
e
of
the
form
	

can
b
e
seen
as
a
partial
t
yp
e
sp
ecication,
where
t
yp
e

is
\priv
ate"
and
not
accessible
for
the
user.
F
or
instance,
one
can
consider
a
t
yp
e
of
push-do
wn
stores
(with
the
push
and
p
op
op
erations)
dened
as
!
-p
ds
:=
	(
^
(!
!

!
)
^
(
!

^
!
)):
A
user
can
op
erate
on
suc
h
a
p
ds
without
kno
wing
the
actual
t
yp
e
used
to
implemen
t
it.
A
generic
p
ds
t
yp
e
ma
y
no
w
b
e
dened
this
w
a
y:
generic
-p
ds
:=

	(
^
(
!

!
)
^
(
!

^

)):
The
b
eta
reduction
rule
for
existen
tial
t
yp
e
constructors
is
as
follo
ws:
abst
yp
e

with
x
:

is
pac
k
M
;

to
	:

in
N
 !

N
[
:=

][x
:=
M
]:
This
corresp
onds
to
using
an
abstract
t
yp
e
in
a
con
text
where
an
actual
implemen
tation
ma
y
b
e
hidden
from
the
user.
More
on
existen
tial
t
yp
es
can
b
e
found
in
Mitc
hell's
b
o
ok
[
].
Existen
tial
quan
tication
can
b
e
represen
ted
in
System
F
as
follo
ws:
...
Definition.
Assuming


FV(
),
w
e
dene
	

:=

((
!

):
!

):
The
pac
king
and
unpac
king
terms
are
as
follo
ws:

pac
k
M
;

to
	:

=

:x
(
!
)
:
x
M
;

abst
yp
e

with
x
:

is
M
in
N

=
M
(:x

:N
).
Compare
the
ab
o
v
e
denition
to
Denition
...
W
e
again
ha
v
e
the
w
eak-
est
common
consequence
of
all

(),
for
arbitrary
t
yp
e
.
This
supp
orts
the
understanding
of
existen
tial
quan
tier
as
innite
disjunction.
But
note
also
that
there
is
a
similarit
y
to
De
Morgan's
la
w
here:
tak
e
?
instead
of

and
w
e
obtain
::
.
W
e
lea
v
e
to
the
reader
the
v
erication
that
b
eta
reduction
is
correctly
implemen
ted.

..
Curry-st
yle
p
olymorphism
0
..
Curry-st
yle
p
olymorphism
The
Curry-st
yle
v
arian
t
of
System
F
is
dened
b
y
the
follo
wing
t
yp
e
assign-
men
t
rules
for
pure
lam
b
da
terms.
These
rules
corresp
ond
exactly
to
these
in
Denition
...
(The
notion
of
a
t
yp
e
and
a
con
text
remains
the
same.)
 ;
x:
`
x
:

 `
N
:

!

 `
M
:

 `
N
M
:

 ;
x
:

`
M
:

 `
x:M
:

!

 `
M
:

 `
M
:


(

F
V
( ))
 `
M
:


 `
M
:

[
:=

]
Rules
for
abstraction
and
application
are
the
same
as
for
the
simply-t
yp
ed
Curry-st
yle
lam
b
da-calculus.
Rules
for
in
tro
ducing
and
eliminating
the
uni-
v
ersal
quan
tier
(called
resp
ectiv
ely
gener
alization
and
instantiation
rules)
reect
the
idea
of
implicit
p
olymorphism:
to
ha
v
e
the
univ
ersal
t
yp
e


means
to
ha
v
e
all
p
ossible
instances
of
this
t
yp
e
(all
t
yp
es

[
:=

]).
...
Definition.
The
erasure
map
j

j
from
terms
of
Ch
urc
h-st
yle
Sys-
tem
F
to
pure
lam
b
da
terms,
is
dened
b
y
the
follo
wing
clauses:
jxj
=
x
jM
N
j
=
jM
jjN
j
jx:
:
M
j
=
x:
jM
j
j:
M
j
=
jM
j
jM

j
=
jM
j
...
Pr
oposition.
F
or
a
pur
e
lamb
da
term
M
,
we
have
 `
M
:

if
and
only
if
ther
e
is
a
Chur
ch-style
term
M
0
with
jM
0
j
=
M
,
such
that
 `
M
0
:

.
Pr
oof.
Easy
.
A
Ch
urc
h-st
yle
term
M
0
can
b
e
seen
as
a
t
yp
e
deriv
ation
for
a
Curry-
st
yle
term
jM
0
j.
The
follo
wing
theorem
follo
ws
from
the
fact
that
ev
ery
b
eta
reduction
p
erformed
in
a
t
ypable
pure
lam
b
da
term
corresp
onds
to
a
reduction
in
the
corrsp
onding
Ch
urc
h-st
yle
term.
...
Theorem
(Sub
ject
reduction).
L
et
 `
M
:

,
for
a
pur
e
lamb
da
term
M
.
Then
M
!

M
0
implies
 `
M
0
:

.
Pr
oof.
Omitted.
u
t

0
Chapter
.
Second-order
logic
and
p
olymorphism
The
ab
o
v
e
result
is
not
as
ob
vious
as
it
can
p
erhaps
app
ear
at
the
rst
lo
ok.
T
o
see
this,
consider
the
follo
wing
example:
...
Example.
W
e
ha
v
e
the
follo
wing
correct
t
yp
e
assignmen
t:
x
:

!

(
!

)
`
y
:
xy
:

!

!

;
and
the
eta-reduction
y
:
xy
!

x.
Ho
w
ev
er,
x
:

!

(
!

)
`
x
:

!

!

:
Observ
e
that
the
Ch
urc
h-st
yle
term
corresp
onding
to
y
:
xy
in
our
example
is
y
::
xy

and
is
not
an

-redex.
Th
us,
the
reason
wh
y
Curry-st
yle
Sys-
tem
F
is
not
closed
under

-reductions
is
that
there
are
Curry-st
yle

-redexes
that
do
not
corresp
ond
to
an
y
Ch
urc
h-st
yle
redex.
...
Remark.
Closure
under

-reductions
can
b
e
obtained
(see
Mitc
hell's
pap
er
[
])
b
y
adding
to
the
system
a
certain
subt
yping
relation

together
with
a
subsumption
rule
of
the
form
 `
M
:

;



 `
M
:

:
...
Remark.
Adding
existen
tial
quan
tication
to
Curry-st
yle
v
ersion
of
System
F
results
with
the
same
problem
as
that
describ
ed
in
Section
	.0.
See
Exercise
..0.
With
p
olymorphism,
one
can
assign
t
yp
es
to
man
y
pure
lam
b
da
terms
whic
h
are
un
t
ypable
in
simple
t
yp
es.
A
prominen
t
example
is
x:
xx,
and
another
one
is
c

K.
As
w
e
will
see
b
elo
w,
only
strongly
normalizable
terms
can
b
e
t
ypable,
b
ecause
of
strong
normalization.
But
there
are
strongly
normalizable
terms,
un
t
ypable
in
F.
The
rst
suc
h
example

w
as
giv
en
b
y
Simona
Ronc
hi
Della
Ro
cca
and
P
aola
Giannini
in
the
pap
er
[
],
and
it
is
the
follo
wing
term:
(z
y
:
y
(z
I)(z
K))(x:
xx):
The
essen
tial
thing
here
is
that
w
e
cannot
nd
one
t
yp
e
for
(x:
xx)
that
could
b
e
applied
to
b
oth
I
and
K.
Another
example
is:
c

c

K:
Compare
the
latter
to
the
t
ypable
term
c

(c

K).
It
w
as
long
an
op
en
question
whether
the
t
yp
e
reconstruction
and
t
yp
e
c
hec
king
problem
for
System
F
w
as
decidable.
Both
w
ere
sho
wn
undecidable
b
y
Jo
e
W
ells.
...
Theorem
(W
ells
[
]).
T
yp
e
r
e
c
onstruction
and
typ
e
che
cking
in
the
se
c
ond-or
der
-c
alculus
ar
e
r
e
cursively
e
quivalent
and
unde
cidable.
Pr
oof.
T
o
o
long.
u
t

apparen
tly
based
on
an
idea
of
F
urio
Honsell.

..
Strong
normalization
of
second-order
t
yp
ed
-calculus
0
..
Strong
normalization
of
second-order
t
yp
ed
-calculus
W
e
end
the
c
hapter
b
y
extending
the
pro
of
of
strong
normalization
of
simply
t
yp
ed
-calculus
from
Chapter

to
second-order
t
yp
ed
-calculus

a
la
Curry
.
As
men
tioned
earlier,
the
standard
metho
d
of
pro
ving
strong
normaliza-
tion
of
t
yp
ed
-calculi
w
as
in
v
en
ted
b
y
T
ait
[0
]
for
simply
t
yp
ed
-calculus
and
generalized
to
second-order
t
yp
ed
-calculus
b
y
Girard
[
].
Our
presen
tation
follo
ws
again
[
].
...
Definition.
(i)
The
set
of
t
yp
e
v
ariables
is
denoted
U
and
the
set
of
second-order
t
yp
es
is
denoted
b
y


.
(ii)
A
valuation
in
S
is
a
map

:
U
!
S
:
(iii)
F
or
a
v
aluation

,
dene
the
v
aluation

f
:=
X
g
b
y:
dened
b
y

f
:=
X
g(
)
=

X
if

=


(
)
otherwise
(iv)
F
or
eac
h
v
aluation

in
S
and
eac
h




the
set
[
[
]
]

is
dened
b
y:
[
[]
]

=

()
[
[
!

]
]

=
[
[
]
]

!
[
[
]
]

[
[:
]
]

=
T
X
S
[
[
]
]

f:=X
g
...
Lemma.
F
or
e
ach
valuation

in
S
and




,
we
have
[
[
]
]


S
.
Pr
oof.
Similar
to
the
corresp
onding
pro
of
for

!.
u
t
...
Definition.
(i)
Let

b
e
a
substitution
(i.e.,
a
map
from
term
v
ariables
to
),
and

b
e
a
v
aluation
in
S
.
Then
;

j
=
M
:

,
[
[M
]
]


[
[
]
]

(ii)
Let

b
e
a
substitution
and

b
e
a
v
aluation
in
S
.
Then
;

j
=
 ,
;

j
=
x
:

;
for
all
x
:

in
 (iii)
Finally
,
 j
=
M
:

,

[;

j
=
 )
;

j
=
M
:

]
...
Pr
oposition
(Soundness).
 `
M
:

)
 j
=
M
:


0
Chapter
.
Second-order
logic
and
p
olymorphism
Pr
oof.
Similar
to
the
pro
of
for
the
corresp
onding
prop
ert
y
of

!,
i.e.,
b
y
induction
on
the
deriv
ation
of
 `
M
:

.
There
are
t
w
o
new
cases
corresp
onding
to
the
-rules.
If
the
deriv
ation
ends
in
 `
M
:
:
 `
M
:

f
:=

g
then
b
y
the
induction
h
yp
othesis
 j
=
M
:
:
No
w
supp
ose
;

j
=
 ,
and
w
e
are
to
sho
w
that
;

j
=
M
:

f
:=

g.
W
e
ha
v
e
[
[M
]
]


[
[:
]
]

=
\
X
S
[
[
]
]

f:=X
g
Hence
[
[M
]
]


[
[
]
]

f:=[
[
]
]

g
=
[
[
f
:=

g]
]

:
If
the
deriv
ation
ends
in
 `
M
:

 `
M
:
:
where

is
not
free
in
 ,
then
b
y
the
induction
h
yp
othesis,
 j
=
M
:

:
Supp
ose
;

j
=
 ,
w
e
are
to
sho
w
that
;

j
=
M
:
:
.
Since

is
not
free
in
 ,
w
e
ha
v
e
for
all
X

S
that
;

f
:=
X
g
j
=
 .
Therefore,
[
[M
]
]


[
[
]
]

f:=X
g
for
all
X

S
.
Hence
also
[
[M
]
]


[
[:
]
]

as
required.
u
t
...
Theorem
(Strong
normalization).
If
 `
M
:

then
M
is
str
ongly
normalizing.
Pr
oof.
Similar
to
the
corresp
onding
pro
of
for

!.
u
t
The
ab
o
v
e
pro
of
diers
in
a
v
ery
substan
tial
w
a
y
from
T
ait's
strong
normalization
pro
of
for
simple
t
yp
es
or
for
System
T.
The
dierence
is
that
a
formalization
of
this
argumen
t
necessarily
requires
quan
tication
o
v
er
sets
of
sets
of
-terms.

..
Exercises
0
Indeed,
let
us
compare
the
statemen
t
of
Lemma
..
and
Lemma
..
part
(iii).
As
w
e
ha
v
e
noticed
in
Chapter
,
the
latter
requires
quan
tica-
tion
o
v
er
sets
X
satisfying
the
denition
of
[
[
]
].
But
then
w
e
could
dene
a
xed
set
[
[
]
]
for
eac
h

b
y
induction.
Because
of
impredicativit
y
,
suc
h
a
denition
of
[
[
]
]
w
ould
no
w
b
ecome
circular
and
w
e
m
ust
consider
v
arious
c
andidates
[
[
]
]

for
the
p
osition
of
[
[
]
].
Eac
h

giv
es
a
family
of
suc
h
candi-
dates
(sets),
and
the
quan
tication
o
v
er

in
the
statemen
t
of
Lemma
..
is
equiv
alen
t
to
quan
tications
o
v
er
these
families.
In
other
w
ords,
our
pro
of
cannot
b
e
formalized
ev
en
in
the
second-order
language
of
arithmetic.
In
fact,
w
e
can
rep
eat
G
odel's
argumen
t
and
obtain
a
consistency
pro
of
for
second-order
P
eano
Arithmetic
in
this
w
a
y
.
Th
us,
strong
normalization
for
System
F
mak
es
an
example
of
a
statemen
t
inde-
p
enden
t
from
second-order
P
eano
Arithmetic.
But
as
long
as
w
e
are
only
in
terested
in
strong
normalization
of
a
set
of
terms
in
v
olving
only
nitely
man
y
t
yp
es,
w
e
can
pro
ceed
within
second-
order
arithmetic.
Indeed,
in
this
case,
the
functions

are
of
nite
domains
and
can
b
e
handled
as
tuples
of
sets.
Th
us,
if
(an
algorithm
of
)
an
in
teger
function
is
denable
in
F,
then
its
totalit
y
can
b
e
sho
wn
within
second-order
arithmetic.
On
the
other
hand,
the
Diale
ctic
a
in
terpretation,
generalized
b
y
Girard
for
System
F,
allo
ws
one
to
deriv
e
a
denition
in
F
for
ev
ery
function
pro
v
ably
total
in
second-order
arithmetic.
W
e
obtain
the
follo
wing
result:
...
Theorem
(Girard).
The
class
of
functions
denable
in
F
c
oincides
with
the
class
of
pr
ovably
r
e
cursive
functions
of
se
c
ond-or
der
Pe
ano
A
rith-
metic.
..
Exercises
...
Exer
cise.
Pro
v
e
that
Gabba
y's
axiom
holds
in
all
Kripk
e
mo
dels
with
constan
t
domains,
but
not
in
all
Kripk
e
mo
dels.
...
Exer
cise.
Can
y
ou
simplify
the
denition
of
forcing
of
univ
ersal
form
ulas
in
mo
dels
with
constan
t
domains?
Hint:
Y
es,
y
ou
can.
...
Exer
cise.
Sho
w
that
in
complete
Kripk
e
mo
dels,
the
seman
tics
of
the
dened
connectiv
es
(see
Section
.)
coincides
with
the
seman
tics
of
their
denitions.
Do
es
this
hold
in
non-complete
mo
dels?
...
Exer
cise.
Sho
w
that
the
t
yp
e
assignmen
t
rules
for
pairs
and
pro-
jections
are
correct
under
Denition
..
and
that

i
(hP

;
P

i)
!
!

P
i
.
...
Exer
cise.
Sho
w
that
the
t
yp
e
assignmen
t
rules
for
injections
and
case
elimination
are
correct
under
Denition
..
and
that
b
eta-reduction
is
prop
erly
implemen
ted,
i.e.,
case
(in
i
(N

i
);
x



:M


;
x



:M


)
!
!

M
i
[x
i
:=
N
].

0
Chapter
.
Second-order
logic
and
p
olymorphism
...
Exer
cise.
Consider
the
eta
reduction
rule
for
disjunction,
and
the
comm
uting
con
v
ersions
of
Denition
..
Are
they
correct
with
resp
ect
to
Denition
..?
...
Exer
cise.
Dene
an
in
terpretetion
in
System
F
for
the
t
yp
es
of:

w
ords
o
v
er
a
xed
nite
alphab
et;

nite
binary
trees;

lists
o
v
er
a
t
yp
e

,
with
the
appropriate
basic
op
erations
on
these
t
yp
es.
...
Exer
cise.
Pro
v
e
Prop
osition
...
Can
y
ou
strengh
ten
it
b
y
re-
placing
=

b
y
!
!

?
..	.
Exer
cise.
Sho
w
that
the
denitions
of
abst
yp
e
and
pac
k
in
Sys-
tem
F
satisfy
the
b
eta
reduction
rule
for
existen
tial
t
yp
es.
..0.
Exer
cise.
Consider
a
Curry-st
yle
calculus
with
existen
tial
t
yp
es,
analogous
to
the
Curry-st
yle
calculus
with
rst-order
existen
tial
quan
tica-
tion,
as
in
Section
0..
Sho
w
that
it
do
es
not
ha
v
e
the
sub
ject
reduction
prop
ert
y
.
...
Exer
cise.
V
erify
the
correctness
of
Example
...
...
Exer
cise.
Sho
w
that
all
terms
in
normal
form
are
t
ypable
in
Sys-
tem
F.
...
Exer
cise.
Sho
w
that
(x:
xx)(z
:
z
y
z
)
is
t
ypable
in
System
F.
...
Exer
cise.
Sho
w
an
example
of
a
pure
lam
b
da-term
M
,
t
ypable
in
System
F,
and
suc
h
that
M
!

M
0
,
for
some
un
t
ypable
M
0
.
W
arning:
An
example
kno
wn
to
the
authors
is
the
term
a:
[y
z
:
a((v
:
v
(xy
:
y
ay
))y
)(z
y
)(z
(x:
xxx))
]Y
Z
;
where
Y
is
x:
K(xx)(xaa)
and
Z
is
u:
u(xy
:
a).
A
v
erication
tak
es

handwritten
pages.
...
Exer
cise.
Pro
v
e
that
(x:
xx)(x:
xx)
is
un
t
ypable
in
System
F,
without
using
the
fact
that
t
ypable
terms
can
b
e
normalized.
...
Exer
cise.
Pro
v
e
that
the
terms
c

c

K
and
(z
y
:
y
(z
I)(z
K))(x:
xx)
are
un
t
ypable
in
System
F.
...
Exer
cise.
Sho
w
that
the
p
olymorphic
t
yp
e
assignmen
t
has
no
prin-
cipal
t
yp
e
prop
ert
y
.
(F
or
instance
sho
w
that
x:
xx
has
no
principal
t
yp
e.)
...
Exer
cise.
Assume
strong
normalization
for
Curry-st
yle
System
F.
Deriv
e
strong
normalization
for
Ch
urc
h-st
yle
System
F.

CHAPTER

The
-cub
e
and
pure
t
yp
e
systems
In
this
c
hapter
w
e
in
tro
duce
Barendregt's
-cub
e
whic
h
can
b
e
seen
as
a
generic
t
yp
ed
-calculus
with
eigh
t
instances.
Among
these
are

!,
,
and
P
seen
earlier.
W
e
also
presen
t
the
generalization
to
pur
e
typ
e
systems
whic
h
can
b
e
seen
as
a
generic
t
yp
ed
-calculus
with
innitely
man
y
t
yp
ed
-calculi
as
instances|among
these
are
the
eigh
t
systems
of
the
-cub
e.
W
e
rst
presen
t
some
motiv
ation
for
the
study
of
the
-cub
e
and
then
pro
ceed
to
the
actual
denitions.
A
n
um
b
er
of
examples
are
giv
en
to
illus-
trate
v
arious
asp
ects
of
the
-cub
e.
W
e
then
argue
that
the
new
presen
ta-
tions
of

!
etc.
are
equiv
alen
t
to
the
previous
presen
tations,
although
w
e
do
not
settle
this
in
all
detail.
After
this,
w
e
in
tro
duce
pure
t
yp
e
systems,
giv
e
a
n
um
b
er
of
examples,
and
dev
elop
the
most
rudimen
tary
theory
of
pure
t
yp
e
systems.
The
presen
tation
follo
ws
[].
..
In
tro
duction
The
previous
c
hapters
of
the
notes
ha
v
e
presen
ted
sev
eral
related
t
yp
ed
-
calculi,
e.g,
the
simply
t
yp
ed
-calculus

!,
the
system
P
of
dep
enden
t
t
yp
es,
and
the
second-order
t
yp
ed
-calculus
.

The
simplest
of
the
systems
is
clearly
simply
t
yp
ed
-calculus;
in
this
system
one
can
ha
v
e
a
term
x
:

:
x
of
t
yp
e

!

,
in
short
`
x
:

:
x
:

!

:
Giv
en
a
term
M
,
w
e
ma
y
form
the
new
term
x
:

:
M
whic
h
exp
ects
a
term
as
argumen
t;
in
other
w
ords,
the
term
x
:

:
M
dep
ends
on
a
term.
Th
us,
in

!,
terms
ma
y
dep
end
on
terms.

In
this
c
hapter
w
e
are
exclusiv
ely
concerned
with
t
yp
ed
-calculi

a
la
Ch
urc
h.
0	

0
Chapter
.
The
-cub
e
and
pure
t
yp
e
systems
In

one
can
ha
v
e
a
term


:
:
x
:

:
x
of
t
yp
e
:
!
,
in
short
`

:
:
x
:

:
x
:
:
!
:
Giv
en
a
term
M
,
w
e
ma
y
form
the
new
term

:
:
M
whic
h
exp
ects
a
t
yp
e

as
argumen
t;
in
other
w
ords,
the
term
:
:
M
dep
ends
on
a
typ
e.
Th
us,
in

terms
ma
y
dep
end
on
t
yp
es.
Finally
,
in
the
system
P
,
w
e
can
ha
v
e
an
expression
x
:

:

exp
ecting
a
term
of
t
yp
e

as
argumen
t
and
returning
the
t
yp
e

as
result.
Suc
h
an
expression
is
called
a
typ
e
c
onstructor
since
it
constructs
a
t
yp
e
when
pro
vided
with
suitable
argumen
ts.
T
o
describ
e
the
input
and
output
of
a
term
one
uses
t
yp
es;
a
term
has
a
certain
t
yp
e.
Similarly
,
the
input
and
output
of
constructors
are
describ
ed
b
y
kinds.
F
or
instance,
if

is
a
t
yp
e,
then
x
:

:

has
kind

!
,
in
short

:

`
x
:

:

:

)
;
expressing
the
fact
that
the
constructor
exp
ects
a
term
of
t
yp
e

and
con-
structs
a
mem
b
er
of
,
i.e.,
a
t
yp
e.
If
w
e
apply
this
expression
to
a
term
of
t
yp
e
,
then
w
e
get
a
t
yp
e:

:
;
y
:

`
(x
:

:
)
y
:
:
In
conclusion,
giv
en
a
t
yp
e

w
e
ma
y
form
the
t
yp
e
constructor
x
:

:

whic
h
exp
ects
a
term
of
t
yp
e

as
argumen
t;
in
other
w
ords,
the
t
yp
e
con-
structor
x
:

:

dep
ends
on
a
term.
Th
us,
in
P
t
yp
es
ma
y
dep
end
on
terms.
There
is
one
com
bination
w
e
ha
v
e
not
men
tioned:
w
e
ha
v
e
seen
terms
dep
ending
on
terms,
terms
dep
ending
on
t
yp
es
and
t
yp
es
dep
ending
on
terms|what
ab
out
t
yp
es
dep
ending
on
t
yp
es?
Can
w
e
ha
v
e
expressions
lik
e

:

:

!
?
This
w
ould
again
b
e
a
t
yp
e
constructor,
but
where
the
argumen
t
is
no
w
a
t
yp
e
rather
than
a
term;
suc
h
an
expression
w
ould
ha
v
e
kind

!
.
In
fact,
a
system
exists
in
whic
h
suc
h
expressions
ma
y
b
e
formed,
kno
wn
as
!
.
The
three
systems
,
P
,
and
!
eac
h
arise
from

!
b
y
adding
an-
other
t
yp
e
of
dep
endency
than
terms
dep
ending
on
terms;
it
is
natural
to
study
also
the
com
bination
of
these
dep
endencies,
and
systems
exist
in
whic
h
sev
eral
dep
endencies
are
allo
w
ed,
e.g.,
the
system
!
in
whic
h
b
oth
terms
dep
ending
on
t
yp
es
and
t
yp
es
dep
ending
on
t
yp
es
are
allo
w
ed,
and
this
will
also
b
e
done
b
elo
w.
Before
pro
ceeding
with
the
details
of
suc
h
systems,
it
will
b
e
w
ell
w
orth
our
eort
to
reconsider
the
st
yle
or
presen
tation
from
previous
c
hapters.
In
all
the
-calculi
presen
ted
in
previous
c
hapters,
one
or
more
forms
of

The
annotation
\:
"
w
as
not
written
in
the
preceding
c
hapter.
The
informal
meaning
of

:

is
that

is
a
t
yp
e.

..
Barendregt's
-cub
e

abstraction
are
presen
t,
and
dieren
t
rules
go
v
ern
the
t
yping
of
the
v
arious
forms
of
abstraction.
F
or
instance,
in

w
e
ha
v
e
b
oth
 ;
x
:

`
M
:

 `
x
:

:
M
:

!

and
 `
M
:

 `

:

:
M
:
:
Similarly
,
w
e
ha
v
e
sev
eral
t
yp
es
of
pro
ducts,
e.g.

!

and
:
.
It
w
ould
b
e
b
etter
if
w
e
could
presen
t
the
systems
with
a
single
notion
of
abstraction
parametrized
o
v
er
the
p
ermitted
dep
endencies.
This
is
exactly
what
one
do
es
on
the
-cub
e.
This
idea
facilitates
a
more
slic
k
presen
tation
of
eac
h
of
the
systems
in
the
-cub
e,
and
also
mak
es
the
connection
b
et
w
een
the
v
arious
systems
more
transparen
t.
Moreo
v
er,
prop
erties
ab
out
the
v
arious
systems
can
b
e
dev
elop
ed
once
and
for
all
b
y
pro
viding
pro
ofs
that
are
parametric
in
the
p
ermitted
dep
endencies:
if
w
e
can
pro
v
e,
e.g.,
sub
ject
reduction
regardless
of
whic
h
dep
endencies
are
p
ermitted,
then
w
e
do
not
ha
v
e
to
pro
v
e
the
prop
ert
y
for
all
the
systems
individually
.
..
Barendregt's
-cub
e
W
e
in
tro
duce
Barendregt's
-cub
e
follo
wing
[
].
...
Definition.
(i)
The
set
S
of
sorts
is
dened
b
y
S
=
f;
g.
W
e
use
s;
s
0
;
s

;
s

,
etc.
to
range
o
v
er
sorts.
(ii)
F
or
eac
h
s

S
,
let
V
s
denote
a
coun
tably
innite
set
of
variables
suc
h
that
V
s
\
V
s
0
=
;
when
s
=
s
0
,
and
let
V
=
S
sS
V
s
.
(iii)
The
set
E
of
expr
essions
is
giv
en
b
y
the
abstract
syn
tax:
E
=
V
j
S
j
E
E
j
V
:
E
:E
j
V
:
E
:E
As
b
efore,
w
e
assume
familiarit
y
with
the
sub
expr
ession
relation
,
with
the
set
FV
(M
)
of
fr
e
e
variables
of
M
,
and
with
substitution
M
fx
:=
N
g
for
x

V
and
M
;
N

E
.
W
e
write
A
!
B
for
d
:
A:
B
when
d

FV(B
).
W
e
use
=
to
denote
syn
tactic
iden
tit
y
mo
dulo
-con
v
ersion
and
adopt
the
usual
h
ygiene
con
v
en
tions.
(iv)
The
relation
!

on
E
is
the
compatible
closure
of
the
rule
(x
:
A
:
M
)
N

M
fx
:=
N
g
Also,
!
!

and
=

are
the
transitiv
e,
reexiv
e
closure
and
the
transitiv
e,
reexiv
e,
symmetric
closure
of
!

,
resp
ectiv
ely
.


Chapter
.
The
-cub
e
and
pure
t
yp
e
systems
(v)
The
set
C
of
c
ontexts
is
the
set
of
all
sequences
x

:
A

;
:
:
:
;
x
n
:
A
n
where
x

;
:
:
:
;
x
n

V
,
A

;
:
:
:
;
A
n

E
,
and
x
i
=
x
j
when
i
=
j
.
The
empt
y
sequence
is
[],
and
the
concatenation
of
 and

is
 ;
.
W
e
write
x
:
A

 if
 =
 
;
x
:
A;
 
,
for
some
 
,
 
,
and
w
e
write
 

if,
for
ev
ery
x
:
A

 ,
also
x
:
A

.
F
or
 
C
,
dom( )
=
fx
j
x
:
A

 ;
for
some
Ag.
(vi)
F
or
an
y
set
R

S

S
of
rules,
the
relation
`

C

E

E
is
dened
in
Figure
..
If
 `
M
:
A,
then
 is
le
gal
and
M
,
A
are
le
gal
(in
 ).
W
e
use
the
notation
 `
A
:
B
:
C
meaning
that
 `
A
:
B
and
 `
B
:
C
.
(axiom)
[]
`

:

(start)
 `
A
:
s
 ;
x
:
A
`
x
:
A
if
x

V
s
&
x

dom
( )
(w
eak
ening)
 `
A
:
B
 `
C
:
s
 ;
x
:
C
`
A
:
B
if
x

V
s
&
x

dom
( )
(pro
duct)
 `
A
:
s

 ;
x
:
A
`
B
:
s

 `
(x
:
A:
B
)
:
s

if
(s

;
s

)

R
(application)
 `
F
:
(x
:
A:
B
)
 `
a
:
A
 `
F
a
:
B
fx
:=
ag
(abstraction)
 ;
x
:
A
`
b
:
B
 `
(x
:
A:
B
)
:
s
 `
x
:
A
:
b
:
x
:
A:
B
(con
v
ersion)
 `
A
:
B
 `
B
0
:
s
 `
A
:
B
0
if
B
=

B
0
Figure
.:
Inference
r
ules
of
the
-cube
(vii)
The
-cub
e
consists
of
the
eigh
t
-calculi
obtained
b
y
taking
the
dier-
en
t
sets
of
rules
f(;
)g

R

f(;
);
(;
);
(;
)
;
(;
)g
sp
ecied
in
the
table
in
Figure
..

..
Barendregt's
-cub
e


!
(;
)

(;
)
(;
)
!
(;
)
(;
)
!
=
!

(;
)
(;
)
(;
)
P
(;
)
(;
)
P

(;
)
(;
)
(;
)
P
!
(;
)
(;
)
(;
)
C
=
P
!
(;
)
(;
)
(;
)
(;
)
Figure
.:
R
ules
of
the
-cube
...
Remark.
The
dieren
t
rules
in
Figure
.
corresp
ond
to
the
de-
p
endencies
men
tioned
earlier:
(;
)
:
terms
dep
ending
on
terms
(;
)
:
terms
dep
ending
on
t
yp
es
(;
)
:
t
yp
es
dep
ending
on
terms
(;
)
:
t
yp
es
dep
ending
on
t
yp
es
Informally
sp
eaking,
terms
ma
y
also
dep
end
on
t
yp
es
in
!;
for
instance,
x
:

:
x
is
a
term
dep
ending
on
the
t
yp
e
.
Ho
w
ev
er,
the
crucial
p
oin
t
is
that
w
e
ma
y
not
abstract
o
v
er

in
the
term.
In
con
tract,
this
form
of
abstraction
is
p
ermitted
in
.
The
-cub
e
is
depicted
diagrammatically
in
Figure
..
!
/
C

?
/
P

?
!
/
O
P
!
O
!
O
/
?
P
?
O
Figure
.:
The
-cube


Chapter
.
The
-cub
e
and
pure
t
yp
e
systems
..
Example
deriv
ations
There
are
sev
eral
subtle
details
in
the
previous
denition.
Some
of
these
are
illustrated
in
the
follo
wing
examples,
tak
en
from
[],
whic
h
the
reader
is
encouraged
to
w
ork
out
in
detail.
...
Example.
In

!
one
can
deriv
e
the
follo
wing.
.

:

`
x
:
:

:
.
Being
a
mem
b
er
of

should
b
e
conceiv
ed
as
b
eing
a
t
yp
e,
so
if

is
a
t
yp
e,
then
so
is
x
:
:
.
Here

is
a
v
ariable
from
V

(t
yp
e
v
ariables)
and
x
is
another
v
ariable
from
V

(term
v
ariables).
Hence
x

FV
(),
so
x
:
:

=

!
,
using
the
abbreviation
from
Denition
..(iii).
This
means
that
w
e
ma
y
form
expressions
that
map
terms
of
t
yp
e

to
terms
of
t
yp
e

(terms
ma
y
dep
end
on
terms).
Note
that
the
t
yp
e
v
ariable

m
ust
b
e
declared
in
the
con
text;
the
only
t
yping
in
the
empt
y
con
text
in
this
form
ulation
of

!
is
`

:
!
.

:

`
x
:

:
x
:
x
:
:
.
Using
the
abbreviation
from
Deni-
tion
..(iii),
this
means
that
w
e
ha
v
e

:

`
x
:

:
x
:

!
.
Note
that

:

`
x
:

:
x
:
x
:
:

do
es
not
follo
w
from
the
mere
fact
that

:
;
x
:

`
x
:

alone;
w
e
also
ha
v
e
to
sho
w
that

:

`
x
:
:

:
,
whic
h
can
b
e
deriv
ed
using
the
fact
that
(;
)

R.
.

:
;

:
;
y
:

`
x
:

:
y
:
x
:
:

.
.

:
;
y
:

`
(x
:

:
x)
y
:
.
.

:
;
y
:

`
y
:
.
W
e
ha
v
e
(x
:

:
x)
y
!

y
:
Note
that
t
yping
is
preserv
ed
under
this
particular
reduction.
.

:
;

:
;
x
:
;
y
:

`
(z
:

:
y
)
x
:

.
Note
ho
w
the
w
eak
ening
rule
is
required
to
establish
this.
.

:
;

:

`
x
:

:
y
:

:
y
:

!

!

:
.
...
Example.
In

one
can
deriv
e
the
follo
wing.
.

:

`
x
:

:
x
:

!
,
just
lik
e
in

!.
.
`

:

:
x
:

:
x
:

:
:

!

:
.
T
o
understand
the
relationship
with
the
previous
form
ulation
of
,
the
reader
should
realize
that

:
:

is
just
a
new
w
a
y
of
writing
:
and
that

:

:
M
is
just
a
new
w
a
y
of
writing

:
:
M
.

..
Example
deriv
ations

This
means
that
w
e
ma
y
form
expressions
that
map
an
y
t
yp
e

to
a
term
of
t
yp
e

!

(terms
ma
y
dep
end
on
t
yp
es).
The
reader
ma
y
b
e
w
orried
ab
out
the
absence
of
the
side
condition
\where

is
not
free
in
the
con
text"
in
the
abstraction
rule
for
second-
order
generalization.
Ho
w
can
w
e
b
e
sure
that
w
e
do
not
mo
v
e
from

:
;
x
:

`
M
:

to
x
:

`

:

:
M
:

:
:

,
where
w
e
generalize
o
v
er
a
v
ariable
whic
h
is
free
in
the
con
text?
In
terestingly
,
this
is
ensured
b
y
the
fact
that
con
texts
are
se
quenc
es
and
that
w
e
ma
y
disc
harge
the
rightmost
assumption
only
.
This
also
sho
ws
wh
y
the
w
eak
ening
rule
is
necessary:
without
w
eak
en-
ing,
w
e
could
not
deriv
e
something
as
elemen
tary
as

:
;
x
:

`

:
.
.

:

`
(
:

:
x
:

:
x)

:

!

.
.

:
;
y
:

`
(
:

:
x
:

:
x)

y
:

.
W
e
ha
v
e
(
:

:
x
:

:
x)

y
!

(x
:

:
x)
y
!

y
and
eac
h
of
these
terms
has
t
yp
e

.
.
Let
?
=

:
:
.
Then
`
(
:

:
x
:
?
:
x

)
:
:
:
?
!

.
Via
the
Curry-Ho
w
ard
isomorphism
this
t
yp
e
is
a
prop
osition
in
second-order
prop
ositional
logic
whic
h
states
that
ev
erything
follo
ws
from
absurdit
y;
the
term
is
the
constructiv
e
pro
of
of
the
prop
osition.
...
Example.
Let
D
=

:

:

!

.
In
!
one
can
deriv
e
the
follo
wing.
.
`

!

:
.
Being
a
mem
b
er
of

should
b
e
conceiv
ed
as
b
eing
a
kind,
so

!

is
a
kind.
This
means
that
w
e
ma
y
form
expressions
that
map
t
yp
es
to
t
yp
es
(t
yp
es
ma
y
dep
end
on
t
yp
es).
.
`
D
:

!
.
.

:

`
D

:
.
.

:

`
D
(D
)
:
.
.

:

`
x
:
(D
)
:
x
:
(D
)
!
(D
).
.

:

`
x
:
(D
)
:
x
:
D
(D
).
Note
ho
w
the
con
v
ersion
rule
is
used
to
deriv
e
this.
W
e
ha
v
e
(D
)
!
(D
)
=

D
(D
)
and
the
con
v
ersion
rule
allo
ws
us
to
exc
hange
the
rst
t
yp
e
with
the
second.


Chapter
.
The
-cub
e
and
pure
t
yp
e
systems
...
Example.
In
P
one
can
deriv
e
the
follo
wing.
.

:

`

!

:
.
This
means
that
w
e
ma
y
form
expressions
that
map
a
term
of
t
yp
e

to
a
t
yp
e
(t
yp
es
ma
y
dep
end
on
terms).
If
w
e
view

as
a
set
and

as
the
univ
erse
of
prop
ositions,
then
a
mem
b
er
of

!

is
a
map
from

to
prop
ositions,
i.e.,
a
predicate
on
.
.

:
;
p
:

!
;
x
:

`
p
x
:
.
Again,
if
w
e
view

as
a
set,
p
as
a
predicate
on
,
and
x
as
an
elemen
t
of
,
then
p
x
is
a
prop
osition.
.

:
;
p
:

!

!

`
x
:
:
p
x
x
:
.
If

is
a
set
and
p
is
a
binary
predicate
on
,
then
x
:
:
p
x
x
is
a
prop
osition.
.

:
;
p
:

!
;
q
:

!

`
x
:
:
p
x
!
q
x
:
.
This
prop
osition
states
that
ev
ery
mem
b
er
of

whic
h
satises
p
also
satises
q
.
.

:
;
p
:

!

`
x
:

:
z
:
p
x
:
z
:
x
:
:
p
x
!
p
x.
.

:
;
x
0
:
;
p
:

!
;
q
:

`
z
:
(x
:
:
p
x
!
q
)
:
y
:
(x
:
:
p
x)
:
(x
a
0
)
(y
a
0
)
:
(x
:
:
p
x
!
q
)
!
(x
:
:
p
x)
!
q
.
This
prop
osition
states
that
in
ev
ery
non-empt
y
set
A,
(x

A
:
P
x
!
Q)
!
(x

A
:
P
x)
!
Q:
...
Example.
In
!
,
the
follo
wing
can
b
e
deriv
ed.
.
Let
&
=

:
:
(
!

!

)
!

.
Then

:
;

:

`
&
:
.
This
is
can
also
b
e
deriv
ed
in
;
it
is
the
second-order
denition
of
conjunction.
.
Let
AND
=

:

:

:

:
&
.
Then
`
AND
:

!

!

and
`
AND


:
.
Th
us,
AND
is
a
uniform
denition
of
conjunction
o
v
er
all
t
yp
es|this
cannot
b
e
done
in
.
.
Let

i
=


:

:


:

:
x

:


:
x

:


:
x
i
.
Then
`

i
:


:
:


:
:


!


!

i
:
Also,

:
;

:

`
x
:
AND


:
x

(



)
:
AND


!
:

..
Classication
and
equiv
alence
with
previous
form
ulations

...
Example.
In
P

the
follo
wing
can
b
e
deriv
ed.
.

:
;
p
:

!

`
x
:

:
p
x
!
?
:

!

Here
the
construction
of
?
requires

and
the
construction
of
expressions

!

requires
P
.
.

:
;
p
:

!

`
(x
:
:
y
:
:
p
x
y
!
p
y
x
!
?)
!
z:
:
p
z
z
!
?
:
:
This
prop
osition
states
that
an
asymmetric
binary
relation
is
irreexiv
e.
...
Example.
In
P
!
the
follo
wing
can
b
e
deriv
ed.
.

:

`
p
:

!

!

:
x
:

:
p
x
x
:
(
!

!
)
!
(
!
).
This
constructor
maps
an
y
predicate
to
its
o
wn
\diagonalization."
Here
the
presence
of

to
the
left
and
righ
t
of
!
requires
!
,
and
the
construction
of

!

requires
P
.
.
`

:

:
p
:

!

!

:
x
:

:
pxx
:

:
:(
!

!
)
!
(
!
).
This
constructor
do
es
the
same
uniformly
in
.
...
Example.
In
C
the
follo
wing
can
b
e
deriv
ed.
.

:

:
p
:

!
?
:
x
:

:
p
x
!
?
:

:
:
(
!
)
!
(
!
):
This
constructor
maps
a
t
yp
e

and
a
predicate
p
on

to
the
negation
of
p.
Here
the
presence
of

on
b
oth
sides
of
!
requires
!
,
and
A
!

requires
P
,
and

:
:
:
:
:
requires
.
..
Classication
and
equiv
alence
with
previous
form
ula-
tions
The
ab
o
v
e
presen
tation
of

!
etc.
has
sev
eral
adv
an
tages,
as
men
tioned
ab
o
v
e.
Ho
w
ev
er,
the
presen
tation
also
has
the
disadv
an
tage
that
in
the
case
of
some
of
the
simple
systems
(e.g.

!)
the
presen
tation
in
v
olv
es
a
certain
amoun
t
of
redundancy
.
F
or
instance,
in
case
of

!
the
pro
duct
x
:
A:
B
men
tioned
in
the
pro
duct
rule
alw
a
ys
has
form
A
!
B
.
Also,
the
distinction
b
et
w
een
terms,
t
yp
es,
and
kinds,
whic
h
is
abandoned
in
the
cub
e
is,
after
all,
useful
for
understanding
the
details
of
the
v
arious
systems.
In
this
section
w
e
therefore
try
to
reco
v
er
some
of
what
has
b
een
lost
b
y
sho
wing
that|to
a
certain
exten
t|the
traditional
form
ulations
of
some
of
the
systems
in
the
-cub
e
are
equiv
alen
t
with
the
form
ulations
in
terms
of
the
-cub
e.
More
ab
out
this
can
b
e
found
in
[
,

,

].
Belo
w
w
e
sho
w
ho
w
terms
b
elonging
to
systems
in
the
-cub
e
can
b
e
classied
according
to
the
notions
of
obje
ct,
c
onstructors,
and
kinds.


Chapter
.
The
-cub
e
and
pure
t
yp
e
systems
...
Definition.
Dene
the
sets
O
;
T
;
K
of
obje
cts,
c
onstructors,
and
kinds
as
follo
ws:
O
::=
V

j
V

:
T
:
O
j
O
O
j
V

:
K
:
O
j
O
T
T
::=
V

j
V

:
T
:
T
j
T
O
j
V

:
K
:
T
j
T
T
j
V

:
T
:
T
j
V

:
K
:
T
K
::=
V

:
T
:
K
j
V

:
K
:
K
j

Reading
ob
jects
as
terms,
constructors
as
t
yp
es,
and
kinds
as|w
ell|
kinds,
this
crystalizes
the
four
forms
of
dep
endencies
b
et
w
een
terms
and
t
yp
es
expressed
b
y
the
four
forms
of
abstractions,
or
the
four
forms
of
pro
d-
ucts.
The
follo
wing
selects
among
the
ab
o
v
e
expressions
those
that
are
legal.
In
the
denition
and
the
follo
wing
prop
osition,
`
refers
to
C
.
...
Definition.
Dene
the
sets
O
+
;
T
+
;
K
+
as
follo
ws:
O
+
=
fO

O
j
	 ;
A
:
 `
O
:
Ag
T
+
=
fT

T
j
	 ;
A
:
 `
T
:
Ag
K
+
=
fK

K
j
	 :
 `
K
:
g
...
Pr
oposition
(Classication
of
the
-cub
e).
.
The
sets
O
+
;
T
+
;
K
+
and
fg
ar
e
p
airwise
disjoint
and
close
d
under
r
e
duction.
.
If
 `
A
:
B
then
exactly
one
of
the
fol
lowing
holds:

(A;
B
)

O
+

T
+
,
or

(A;
B
)

T
+

K
+
,
or

(A;
B
)

K
+

fg
One
obtains
similar
classications
for
particular
systems
within
the
-cub
e:
.
F
or

!,,!
,
and
!
omit
the
clauses
V

:
T
:
T
,
T
O
,
and
V

:
T
:
K
;
.
F
or

!,,P
,
and
P
omit
the
clauses
V

:
K
:
T
,
T
T
,
and
V

:
K
:
K
;
.
F
or

!,!
,P
!
,
and
P
omit
the
clauses
V

:
K
:
O
,
O
T
,
and
V

:
K
:
T
.
One
can
use
this
to
sho
w,
e.g.,
that
in

!
pro
ducts
x
:
:

in
fact
alw
a
ys
ha
v
e
form

!

,
i.e.,
x

FV
().

..
Pure
t
yp
e
systems
	
..
Pure
t
yp
e
systems
In
this
subsection
w
e
in
tro
duce
pur
e
typ
e
systems,
as
presen
ted
b
y
Baren-
dregt,
Geuv
ers,
and
Nederhof
[,

,

].
The
main
ideas
in
the
step
from
the
-cub
e
to
pure
t
yp
e
systems
are
the
follo
wing:
.
One
tak
es
a
set
S
as
the
set
of
sorts
rather
than
just
f;
g.
.
One
tak
es
a
relation
A

S

S
as
the
set
of
axioms
rather
than
the
single
axiom
(
:
).
.
One
tak
es
a
relation
R

S

S

S
as
the
set
of
rules
rather
than
the
sp
ecic
sets
of
rules
from
Figure
..
.
The
pro
duct
rule
is
generalized
so
that
pro
ducts
need
not
liv
e
in
the
same
univ
erse
as
their
range.
That
is,
A
!
B
do
es
not
necessarily
liv
e
in
the
same
sort
as
B
.

...
Definition.
A
pur
e
typ
e
system
(PTS
)
is
a
triple
(S
;
A;
R)
where
(i)
S
is
a
set
of
sorts;
(ii)
A

S

S
is
a
set
of
axioms;
(iii)
R

S

S

S
is
a
set
of
rules.
W
e
write
(s;
s
0
)

R
for
(s;
s
0
;
s
0
)

R.
...
Definition.
Let
(S
;
A;
R)
b
e
a
PTS.
(i)
F
or
eac
h
s

S
,
let
V
s
denote
a
coun
tably
innite
set
of
variables
suc
h
that
V
s
\
V
s
0
=
;
when
s
=
s
0
,
and
let
V
=
S
sS
V
s
.
(ii)
The
set
E
of
expr
essions
is
giv
en
b
y
the
abstract
syn
tax:
E
=
V
j
S
j
E
E
j
V
:
E
:E
j
V
:
E
:E
W
e
assume
familiarit
y
with
the
sub
expr
ession
relation
,
with
the
set
FV(M
)
of
fr
e
e
variables
of
M
,
and
with
substitution
M
fx
:=
N
g
for
x

V
and
M
;
N

E
.
W
e
write
A
!
B
for
d
:
A:
B
when
d

FV(B
).
W
e
use
=
to
denote
syn
tactic
iden
tit
y
mo
dulo
-con
v
ersion
and
adopt
the
usual
h
ygiene
con
v
en
tions|see
[
].
(iii)
The
relation
!

on
E
is
smallest
compatible
relation
satisfying
(x
:
A
:
M
)
N
!

M
fx
:=
N
g
Also,
!
!

and
=

are
the
transitiv
e,
reexiv
e
closure
and
the
transitiv
e,
reexiv
e,
symmetric
closure
of
!

,
resp
ectiv
ely
.

Notice
the
dierence
in
the
side
condition
in
the
pro
duct
rule
in
the
-cub
e
and
the
pro
duct
rule
in
pure
t
yp
e
systems
(see
b
elo
w):
in
the
latter
case
w
e
also
ha
v
e
to
sp
ecify
s

|the
sort
in
whic
h
the
pro
duct
is
to
liv
e.

0
Chapter
.
The
-cub
e
and
pure
t
yp
e
systems
(iv)
The
set
C
of
c
ontexts
is
the
set
of
all
sequences
x

:
A

;
:
:
:
;
x
n
:
A
n
where
x

;
:
:
:
;
x
n

V
,
A

;
:
:
:
;
A
n

E
,
and
x
i
=
x
j
when
i
=
j
.
The
empt
y
sequence
is
[],
and
the
concatenation
of
 and

is
 ;
.
W
e
write
x
:
A

 if
 =
 
;
x
:
A;
 
,
for
some
 
,
 
,
and
w
e
write
 

if,
for
ev
ery
x
:
A

 ,
also
x
:
A

.
F
or
 
C
,
dom( )
=
fx
j
x
:
A

 ;
for
some
Ag.
(v)
The
relation
`

C

E

E
is
dened
in
Figure
..
If
 `
M
:
A,
then
 is
le
gal
and
M
,
A
are
le
gal
(in
 ).
W
e
use
the
notation
 `
A
:
B
:
C
meaning
that
 `
A
:
B
and
 `
B
:
C
.
(axiom)
[]
`
s

:
s

if
(s

;
s

)

A
(start)
 `
A
:
s
 ;
x
:
A
`
x
:
A
if
x

V
s
&
x

dom
( )
(w
eak
ening)
 `
A
:
B
 `
C
:
s
 ;
x
:
C
`
A
:
B
if
x

V
s
&
x

dom
( )
(pro
duct)
 `
A
:
s

 ;
x
:
A
`
B
:
s

 `
(x
:
A:
B
)
:
s

if
(s

;
s

;
s

)

R
(application)
 `
F
:
(x
:
A:
B
)
 `
a
:
A
 `
F
a
:
B
fx
:=
ag
(abstraction)
 ;
x
:
A
`
b
:
B
 `
(x
:
A:
B
)
:
s
 `
x
:
A
:
b
:
x
:
A:
B
(con
v
ersion)
 `
A
:
B
 `
B
0
:
s
 `
A
:
B
0
if
B
=

B
0
Figure
.:
Pure
type
systems
...
Convention.
T
o
sa
v
e
notation
w
e
often
consider
in
the
remainder
a
PTS
S
and
sa
y
,
e.g.,
that
s

S
or
M

E
with
the
understanding
that
S
=
(S
;
A;
R)
and
that
V
,
E
,
C
,
!

and
`
are
dened
as
in
Denition
...

..
Examples
of
pure
t
yp
e
systems

..
Examples
of
pure
t
yp
e
systems
...
Example.
The
-cub
e
consists
of
the
eigh
t
PTSs
S
,
where
(i)
S
=
f;
g;
(ii)
A
=
f(;
)g;
(iii)
f(;
)g

R

f(;
);
(;
);
(;
);
(;
)
g.
The
follo
wing
systems
extend
!
with
sort
,
axiom

:
,
and
some
rules
for
the
new
sort.
The
system
HOL
is
dened
b
y:
(i)
S
=
f;
;
g;
(ii)
A
=
f(;
);
(;
)g;
(iii)
R
=
f(;
);
(;
);
(;
)g.
The
system
U
 is
dened
b
y:
(i)
S
=
f;
;
g;
(ii)
A
=
f(;
);
(;
)g;
(iii)
R
=
f(;
);
(;
);
(;
);
(;
)g.
The
system
U
is
dened
b
y:
(i)
S
=
f;
;
g;
(ii)
A
=
f(;
);
(;
)g;
(iii)
R
=
f(;
);
(;
);
(;
);
(;
);
(;
)
g.
...
Example.
The
system

is
dened
b
y:
(i)
S
=
fg;
(ii)
A
=
f(;
)g;
(iii)
R
=
f(;
)g.
W
e
end
this
section
with
an
example
of
a
somewhat
dieren
t
pure
t
yp
e
system.
...
Example.
The
system
PRED
is
dened
b
y:
(i)
S
=
f
s
;

p
;

f
;

s
;

p
g;
(ii)
A
=
f(
s
;

s
);
(
p
;

p
)g;
(iii)
R
=
f(
p
;

p
);
(
s
;

p
);
(
s
;

p
);
(
s
;

s
;

f
);
(
s
;

f
;

f
)g.
This
is
another
form
ulation
of
predicate
logic
as
a
PTS
(other
than
P
).
The
signicance
of
the
sorts
is
as
follo
ws.


Chapter
.
The
-cub
e
and
pure
t
yp
e
systems
.
The
sort

s
is
for
sets.
.
The
sort

p
is
for
prop
ositions.
.
The
sort

f
is
for
rst-order
functions
from
sets
to
sets.
.
The
sorts

s
and

p
con
tain

s
and

p
resp
ectiv
ely
.
There
is
no
sort

f
.
This
means
that
w
e
cannot
ha
v
e
v
ariables
ranging
o
v
er
func-
tion
spaces.
The
signicance
of
the
rules
is
as
follo
ws.
.
The
rule
(
p
;

p
)
allo
ws
the
formation
of
implication
b
et
w
een
prop
osi-
tions.
'
:

p
;
 
:

p
`
'
!
 
=
x
:
':
 
:

p
.
The
rule
(
s
;

p
)
allo
ws
quan
tication
o
v
er
sets.

:

s
;
'
:

p
`
x

:'
=
x
:
:
'
:

p
.
The
rule
(
s
;

p
)
allo
ws
the
formation
of
rst-order
predicates.

:

s
`

!

p
=
x
:
:

p
:

p
so

:

s
;
p
:

!

p
;
x
:

`
p
x
:

p
:
.
The
rule
(
s
;

s
;

f
)
allo
ws
the
formation
of
function
spaces
b
et
w
een
sets.

:

s
;

:

s
`

!

:

f
:
.
The
rule
(
s
;

f
;

f
)
allo
ws
the
formation
of
curried
m
ulti-argumen
t
function
spaces
b
et
w
een
sets.

:

s
`

!
(
!
)
:

f
:
..
Prop
erties
of
pure
t
yp
e
systems
As
men
tioned
in
the
in
tro
duction,
one
of
the
reasons
for
in
tro
ducing
the
-cub
e
is
the
desire
to
facilitate
pro
ofs
whic
h
apply
to
a
n
um
b
er
of
systems
at
the
same
time.
F
or
instance,
it
is
b
etter
to
pro
v
e
the
sub
ject
reduction
prop
ert
y
in
a
generic
w
a
y
whic
h
applies
to
all
the
systems
in
the
-cub
e,
regardless
of
the
particular
set
R
of
rules,
than
it
is
to
pro
v
e
the
prop
ert
y
for
eac
h
system
individually
.
This
idea
is
ev
en
more
comp
elling
in
the
case
of
pure
t
yp
e
systems:
ha
ving
sho
wn
that
a
prop
ert
y
holds
for
all
pure
t
yp
e
systems
w
e
kno
w
not
only
that
the
prop
ert
y
holds
for
all
the
systems
of
the
-cub
e,
but

..
Prop
erties
of
pure
t
yp
e
systems

also
for
innitely
man
y
other
systems,
a
n
um
b
er
of
whic
h
ha
v
e
app
eared
indep
enden
tly
in
the
literature.
In
this
section
w
e
dev
elop
the
most
rudimen
tary
theory
of
pure
t
yp
e
systems.
Throughout
the
section,
S
denotes
an
arbitrary
pure
t
yp
e
system.
...
Lemma
(Prop
erties
of
substitution).
.
Afx
:=
B
gfy
:=
C
g
=
Afy
:=
C
gfx
:=
B
fy
:=
C
gg,
if
y

FV(B
);
.
B
=

C
)
Afx
:=
B
g
=

Afx
:=
C
g;
.
A
=

B
&
C
=

D
)
Afx
:=
C
g
=

B
fx
:=
D
g.
Pr
oof.
()-():
By
induction
on
A.
():
By
induction
on
A
=

B
,
using
()-().
u
t
...
Pr
oposition
(Ch
urc
h-Rosser).
The
r
elation
!

on
E
is
c
onuent.
Pr
oof.
By
the
tec
hnique
of
T
ait
and
Martin-L
of|see
e.g.
[
].
u
t
...
Lemma
(F
ree
v
ariables).
If
x

:
A

;
:
:
:
;
x
n
:
A
n
`
B
:
C
then:
.
x

;
:
:
:
;
x
n
ar
e
distinct;
.
FV(B
)
[
FV(C
)

fx

;
:
:
:
;
x
n
g;
.
FV(A
i
)

fx

;
:
:
:
;
x
i 
g
for


i

n.
Pr
oof.
By
induction
on
the
deriv
ation
of
x

:
A

;
:
:
:
;
x
n
:
A
n
`
B
:
C
.
u
t
...
Lemma
(Start).
If
 is
le
gal
then:
.
(s

;
s

)

A
)
 `
s

:
s

;
.
x
:
A

 )
 `
x
:
A.
Pr
oof.
Since
 is
legal
 `
B
:
C
for
some
B
;
C
.
Pro
ceed
b
y
induction
on
the
deriv
ation
of
 `
B
:
C
.
u
t
...
Lemma
(T
ransitivit
y).
L
et

b
e
le
gal.
If
x

:
A

:
:
:
;
x
n
:
A
n
`
A
:
B
and

`
x
i
:
A
i
for
i
=
;
:
:
:
;
n
then

`
A
:
B
.
Pr
oof.
By
induction
on
the
deriv
ation
of
x

:
A

;
:
:
:
;
x
n
:
A
n
`
A
:
B
making
use
of
the
start
lemma.
u
t
...
Lemma
(Substitution).
If
 ;
x
:
A;

`
B
:
C
and
 `
a
:
A,
then

 ;
fx
:=
ag
`
Afx
:=
ag
:
B
fx
:=
ag.

Substitution
(and
an
y
other
map)
is
extended
from
expressions
to
con
texts
in
the
usual
w
a
y
.


Chapter
.
The
-cub
e
and
pure
t
yp
e
systems
Pr
oof.
By
induction
on
the
deriv
ation
of
 ;
x
:
A;

`
B
:
C
using
the
free
v
ariables
lemma
and
prop
erties
of
substitution.
u
t
...
Lemma
(Thinning).
If
 `
A
:
B
,

is
le
gal,
and
every
(x
:
A)
in
 is
also
in
,
then

`
A
:
B
.
Pr
oof.
This
follo
ws
from
the
start
lemma
and
the
transitivit
y
lemma.
u
t
...
Lemma
(Generation).
Supp
ose
that
 `
M
:
C
.
.
M
=
s
)
	(s;
s
0
)

A:
C
=

s
0
.
M
=
x
)
	D

E
:
C
=

D
&
x
:
D

 .
.
M
=
x:Ab
)
	s

S
;
B

E
:
C
=

x
:
A:
B
&
 ;x
:
A
`
b
:
B
&
 `
x
:
A:
B
:
s.
.
M
=
x
:
A:
B
)
	(s

;
s

;
s

)

R:
C
=

s

&
 `
A
:
s

&
 ;
x
:
A
`
B
:
s

.
.
M
=
F
a
)
	x

V
;
A;B

E
:
C
=

B
fx
:=
ag
&
 `
F
:
x
:
A:
B
&
 `
a
:
A.
Pr
oof.
By
induction
on
the
deriv
ation
of
 `
M
:
C
.
u
t
..	.
Lemma
(Correctness
of
t
yp
es).
If
 `
A
:
B
then
either
B

S
or
	s

S
:
 `
B
:
s.
Pr
oof.
By
induction
on
 `
A
:
B
,
using
the
generation
and
substitution
lemmas.
u
t
..0.
Theorem
(Sub
ject
reduction).
If
 `
A
:
B
and
A
!

A
0
then
 `
A
0
:
B
.
Pr
oof.
Pro
v
e
b
y
sim
ultaneous
induction
on
the
deriv
ation
of
 `
A
:
B
:
.
if
 `
A
:
B
and
A
!

A
0
then
 `
A
0
:
B
;
.
if
 `
A
:
B
and
 !

 0
then
 0
`
A
:
B
.
The
pro
of
uses
the
substitution
lemma.
u
t

..
The
Barendregt-Geuv
ers-Klop
conjecture

..
The
Barendregt-Geuv
ers-Klop
conjecture
The
follo
wing
terminology
should
b
e
w
ell-kno
wn
b
y
no
w.
...
Definition.
Let
S
b
e
a
PTS.
A

-r
e
duction
p
ath
from
an
expres-
sion
M
0
is
a
(p
ossibly
innite)
sequence
M
0
!

M

!

M

!

:
:
:
If
the
sequence
is
nite,
it
ends
in
the
last
expression
M
n
and
has
length
n.
...
Definition.
Let
S
b
e
a
PTS,
and
M
an
expression.
(i)
M



,
there
is
an
innite

-reduction
path
from
M
;
(ii)
M

NF

,
there
is
no

-reduction
path
of
length

or
more
from
M
;
(iii)
M

SN

,
all

-reduction
paths
from
M
are
nite
;
(iv)
M

WN

,
there
is
a

-reduction
from
M
ending
in
N

NF

.
Elemen
ts
of
NF

;
SN

;
WN

are

-normal
forms,

-str
ongly
normalizing,
and

-we
akly
normalizing,
resp
ectiv
ely
.
W
e
also
write,
e.g.,


(M
)
for
M



.
...
Definition.
S
is
we
akly
normalizing
if
all
legal
expressions
are
w
eakly
normalizing,
and
str
ongly
normalizing
if
all
legal
expressions
are
strongly
normalizing.
In
this
case
w
e
write
S
j
=
WN

and
S
j
=
SN

,
resp
ectiv
ely
.
...
Example.
All
the
systems
of
the
-cub
e
are
strongly
normalizing|
see,
e.g.,
[
,

,
,

].
The
system

is
the
simplest
PTS
whic
h
is
not
strongly
normalizing.
The
system
U
is
is
a
natural
extension
of
!
whic
h,
surprisingly
,
is
not
strongly
normalizing.
This
result
sho
ws
that,
apparen
tly
,
the
fact
that

fails
to
b
e
strongly
normalizing
is
not
merely
a
consequence
of
the
cyclicit
y
in
its
axiom
(;
).
W
e
conclude
the
notes
b
y
men
tioning
an
op
en
problem
in
the
eld|for
more
on
the
problem
see
[0
].
...
Conjecture
(Barendregt,
Geuv
ers,
Klop).
F
or
every
PTS
S
:
S
j
=
WN

)
S
j
=
SN



Chapter
.
The
-cub
e
and
pure
t
yp
e
systems

CHAPTER

Solutions
and
hin
ts
to
selected
exercises
Some
of
the
solutions
b
elo
w
are
based
on
actual
homew
ork
done
in
L
A
T
E
X
b
y
Henning
Niss
(..)
and
Henning
Makholm
(..0
and
..).
In
one
of
his
homew
orks,
Henning
Makholm
has
solv
ed
an
apparen
tly
op
en
problem
(Exercise
..).
Exercise
..
.0..
Lemma
(Substitution
Lemma).
If
x
=
y
and
x

FV
(L)
then
M
fx
:=
N
gfy
:=
Lg
=
M
fy
:=
Lgfx
:=
N
fy
:=
Lgg
Pr
oof.
By
induction
on
M
.
Case
M
=
x.
Since
x
=
y
:
M
fx
:=
N
g
fy
:=
Lg
=
xfx
:=
N
gfy
:=
Lg
=
N
fy
:=
Lg
=
xfx
:=
N
fy
:=
Lgg
=
xfy
:=
Lgfx
:=
N
fy
:=
Lg
g
=
M
fy
:=
Lgfx
:=
N
fy
:=
Lg
g
The
remaining
cases
are
sho
wn
in
less
detail.
Case
M
=
y
.
Since
x

FV(L):
M
fx
:=
N
g
fy
:=
Lg
=
L
M
fy
:=
Lgfx
:=
N
fy
:=
Lg
g
Case
M
=
z
where
z
=
x
and
z
=
y
.
Then:
M
fx
:=
N
g
fy
:=
Lg
=
z
=
M
fy
:=
Lgfx
:=
N
fy
:=
Lg
g
Case
M
=
z
:P
.
Without
loss
of
generalit
y
w
e
ma
y
assume
z
=
x
and



Chapter
.
Solutions
and
hin
ts
to
selected
exercises
z
=
y
.
Then
b
y
the
induction
h
yp
othesis:
M
fx
:=
N
gfy
:=
Lg
=
z
:P
fx
:=
N
g
fy
:=
Lg
=
z
:P
fy
:=
Lgfx
:=
N
fy
:=
Lgg
=
M
fy
:=
Lgfx
:=
N
fy
:=
Lg
g
Case
M
=
P
Q.
Similar
to
the
preceding
case.
u
t
The
follo
wing
states
that
!
!

is
c
omp
atible.
.0..
Lemma.
Assume
that
P
;
P
0


ar
e
such
that
P
!
!

P
0
.
Then,
for
al
l
x

V
and
al
l
Q

:
(i)
x:P
!
!

x:P
0
;
(ii)
P
Q
!
!

P
0
Q;
(iii)
Q
P
!
!

Q
P
0
.
Pr
oof.
(i):
By
induction
on
the
deriv
ation
of
P
!
!

P
0
.
Case
P
!
!

P
0
b
ecause
P
!

P
.
Then
x:P
!

x:P
0
.
Therefore
also
x:P
!
!

x:P
0
.
Case
P
!
!

P
0
b
ecause
P
!
!

P
0
0
and
P
00
!
!

P
.
By
the
induction
h
yp
othesis,
x:P
!
!

x:P
00
and
x:P
00
!
!

x:P
0
,
so
x:P
!
!

x:P
0
.
Case
P
!
!

P
0
b
ecause
P
=
P
0
.
Then
x:P
=
x:P
0
.
Therefore
also
x:P
!
!

x:P
0
.
(ii)-(iii):
induction
on
the
denition
of
P
!
!

P
0
u
t
.0..
Lemma.
F
or
al
l
P
;
P
0
;
Q

,
if
P
!

P
0
then
also
P
fx
:=
Qg
!

P
0
fx
:=
Qg
:
Pr
oof.
By
induction
on
the
deriv
ation
of
P
!

P
0
.
The
in
teresting
case
is
P
=
(y
:P

)
Q

!

P

fy
:=
Q

g
=
P
0
.
W
e
ha
v
e
((y
:P

)
Q

)fx
:=
Qg
=
(y
:P

fx
:=
Qg)
(Q

fx
:=
Qg)
!

P

fx
:=
Qg
fy
:=
Q

fx
:=
Qg
g
=
P

fy
:=
Q

gfx
:=
Qg;
where
the
last
equalit
y
follo
ws
from
the
Substitution
Lemma
(since
y
is
not
free
in
Q).
u
t

	
.0.	.
Lemma.
F
or
al
l
P
;
Q;
Q
0

,
if
Q
!

Q
0
then
also
P
fx
:=
Qg
!
!

P
fx
:=
Q
0
g:
Pr
oof.
By
induction
on
the
structure
of
P
.
Case
P
=
x,
then
P
fx
:=
Qg
=
Q
!

Q
0
=
P
fx
:=
Q
0
g:
Case
P
=
y
,
then
P
fx
:=
Qg
=
y
!
!

y
=
P
fx
:=
Q
0
g:
Case
P
=
y
:P
0
,
then
(y
:P
0
)
fx
:=
Qg
=
y
:P
0
fx
:=
Qg
!
!

y
:P
0
fx
:=
Q
0
g
=
(y
:P
0
)
fx
:=
Q
0
g
where
!
!

follo
ws
from
the
induction
h
yp
othesis
and
compatibilit
y
of
!
!

.
Case
P
=
P

P

,
then
(P

P

)fx
:=
Qg
=
(P

fx
:=
Qg)
(P

fx
:=
Qg)
!
!

(P

fx
:=
Q
0
g)
(P

fx
:=
Qg)
!
!

(P

fx
:=
Q
0
g)
(P

fx
:=
Q
0
g)
=
(P

P

)fx
:=
Q
0
g
where
b
oth
!
!

-steps
follo
w
from
the
induction
h
yp
othesis
and
compatibilit
y
of
!
!

.
u
t
No
w
the
prop
osition
in
the
exercise
(.)
can
b
e
pro
v
ed.
.0.0.
Pr
oposition
(W
eak
Ch
urc
h-Rosser).
F
or
al
l
M

;
M

;
M


,
if
M

!

M

and
M

!

M

,
then
ther
e
exists
an
M



such
that
M

!
!

M

and
M

!
!

M

.
Pr
oof.
By
induction
on
the
deriv
ation
of
M

!

M

.
Case
M

=
(x:P
)
Q
and
M

=
P
fx
:=
Qg.
Then
either
()
M

=
(x:P
0
)
Q
for
P
0
suc
h
that
P
!

P
0
,
()
M

=
(x:P
)
Q
0
for
Q
0
suc
h
that
Q
!

Q
0
,
or
M

=
M

.
In
the
last
case
w
e
are
done.
In
situation
()
w
e
ha
v
e
M

=
(x:P
0
)
Q
!

P
0
fx
:=
Qg
and
M

=
P
fx
:=
Qg
!

P
0
fx
:=
Qg
b
y
Lemma
.0.,
i.e.,
M

=
P
0
fx
:=
Qg.
Situation
()
is
similar
using
Lemma
.0.	.
()
()
(x:P
)
Q
|y y y y y y y y
"EEEEEEEE
P
fx
:=
Qg

(x:P
0
)
Q

P
0
fx
:=
Qg
=
P
0
fx
:=
Qg
(x:P
)
Q
|y y y y y y y y
"EEEEEEEE
P
fx
:=
Qg

(x:P
)
Q
0

P
fx
:=
Q
0
g
=
P
fx
:=
Q
0
g

0
Chapter
.
Solutions
and
hin
ts
to
selected
exercises
Case
M

=
x:P
and
M

=
x:P
0
b
ecause
P
!

P
0
.
Then
M

m
ust
b
e
x:Q
for
Q


suc
h
that
P
!

Q.
By
the
induction
h
yp
othesis
there
is
a
term
M
0
suc
h
that
P
0
!
!

M
0
and
Q
!
!

M
0
.
Then
since
!
!

is
compatible
w
e
ha
v
e
M

=
x:P
0
!
!

x:M
0
and
M

=
x:Q
!
!

x:M
0
,
and
M

=
x:M
0
is
the
sough
t
term.
x:P
      
9999999
x:P
0
 9999999
x:Q
      
x:M
0
Case
M

=
P
Q
and
M

=
P
0
Q
b
ecause
P
!

P
0
.
Then
()
M

=
P
00
Q
for
P
00


suc
h
that
P
!

P
0
0
,
or
()
M

=
P
Q
0
for
Q
0


suc
h
that
Q
!

Q
0
.
In
the
former
case
b
y
the
induction
h
yp
othesis
w
e
obtain
an
M
0
suc
h
that
P
0
!
!

M
0
and
P
00
!
!

M
0
and
th
us
(again
b
y
compatibilit
y
of
!
!

)
that
M

=
P
0
Q
!
!

M
0
Q
and
M

=
P
0
0
Q
!
!

M
0
Q,
i.e.,
M

=
M
0
Q.
In
the
latter
case
w
e
ha
v
e
that
M

=
P
0
Q
!

P
0
Q
0
and
M

=
P
Q
0
!

P
0
Q
0
(also
b
y
compatibilit
y)
and
consequen
tly
M

=
P
Q
0
as
desired.
()
()
P
Q
      
<<<<<<<
P
0
Q
 ;;;;;;;
P
00
Q
      
M
0
Q
P
Q
      
:::::::
P
0
Q

P
Q
0

P
0
Q
0
=
P
0
Q
0
This
completes
the
pro
of.
u
t
The
pro
of
do
es
not
extend
directly
to
the
full
Ch
urc
h-Rosser
prop
ert
y
.
Let
us
sa
y
that
a
relation
!
on
a
set
S
is
we
akly
c
onuent
if,
whenev
er
s

!
s

and
s

!
s

,
there
is
an
s

suc
h
that
s

!
:
:
:
!
s

and
s

!
:
:
:
!
s

.
Let
us
call
!
c
onuent
if,
whenev
er
s

!
:
:
:
!
s

and
s

!
:
:
:
!
s

,
there
is
an
s

suc
h
that
s

!
:
:
:
!
s

and
s

!
:
:
:
!
s

.
There
are
relations
that
are
w
eakly
conuen
t
and
not
conuen
t.
The
simplest
example
is
when
w
e
ha
v
e
a
four-elemen
t
set
S
=
fs

;
s

;
s

;
s

g
s

 
s

,
and
s

!
s

,
s

 
s

,
and
s

!
s

:
s

s

o
/
s

o
/
s

A
relation
!
on
a
set
S
is
str
ongly
normalizing
if
there
are
no
innite
reduction
sequences
s

!
s

!
:
:
:


of
(not
necessarily
distinct)
elemen
ts
from
S
.
Can
y
ou
nd
a
w
eakly
conu-
en
t,
strongly
normalizing
relation
that
is
not
conuen
t?
A
diggression
Ho
w
man
y
details
should
a
pro
of
con
tain?
Ev
eryb
o
dy
should
do
a
pro
of
in
the
st
yle
of
Lemma
.0.
(induction
on
M

)
and
a
pro
of
in
the
st
yle
of
Lemma
.0.
(induction
on
the
denition
of
P
!
!

P
0
)
in
ev
ery
detail
at
least
once
in
their
life.
Ho
w
ev
er,
ha
ving
tried
this,
one
can
see
that
man
y
details
are
completely
mec
hanical.
In
c
ho
osing
a
lev
el
of
detail
in
a
pro
of,
one
should
lea
v
e
out
de-
tails
that
can
b
e
reconstructed
mec
hanically
with
little
eort
b
y
the
reader.
In
con
trast,
steps
that
require
go
o
d
ideas,
ev
en
small
go
o
d
ideas,
should
usually
not
b
e
left
out.
Th
us,
a
complete
pro
of
of
Lemma
.0.
w
ould
b
e
\Induction
on
M
"
and
a
complete
pro
of
of
Lemma
.0.
w
ould
read
\Induction
on
the
denition
of
P
!
!

P
0
."
A
complete
pro
of
of
Lemma
.0.
migh
t
b
e
\Induction
on
the
denition
of
P
!

P
0
,"
but
since
something
in
teresting
happ
ens
in
the
case
where
P
=
(y
:P

)
Q

!

P

fy
:=
Q

g
=
P
0
,
one
can
also
presen
t
that
case
and
refer
to
the
substitution
lemma.
If
sev
eral
cases
in
a
pro
of
are
similar,
but
non-trivial,
one
can
do
the
rst
example
in
detail
and
omit
the
remaining
ones.
Exercise
..
.0..
Pr
oposition
(Klop).
L
et
x

x

:
:
:
x
n
:M
b
e
an
abbr
eviation
for
the
-term
x

:x

:
:
:
:
x
n
:M
.
L
et
?
=
abcdef
g
hij
k
l
mnopq
stuv
w
xy
z
r
:r
(thisisaf
ixedpointcombinator
)
$
=
??????????????????????????
Then
$
is
a
xed
p
oin
t
com
binator,
i.e.,
for
any
F

:
$
F
=

F
($
F
).
Pr
oof.
W
e
ha
v
e:
$
F
=
??????????????????????????
F
=
(abcdef
g
hij
k
l
mnopq
stuv
w
xy
z
r
:
r
(thisisaf
ixedpointcombinator
)
)
?????????????????????????
F
=

F
(??????????????????????????F
)
=
F
($
F
)
as
required.
u
t


Chapter
.
Solutions
and
hin
ts
to
selected
exercises
Exercise
..
W
e
only
sho
w
the
closure
under
w
eak
ening.
The
pro
of
is
b
y
induction
with
resp
ect
to
the
size
of
the
pro
of
of
 `
'.
W
e
pro
ceed
b
y
cases
dep
ending
on
the
last
rule
used
in
this
pro
of.
Recall
that
the
notation
 ;
 
stands
for
 [
f 
g,
whether
or
not
 

 .
That's
wh
y
e.g.,
Case

b
elo
w
w
orks.
Case
:
The
pro
of
consists
only
of
a
single
application
of
an
axiom
sc
heme,
that
is
'
is
an
elemen
t
of
 .
Then
 ;
 
`
'
is
also
an
axiom.
Case
:
The
pro
of
ends
with
an
application
of
(^I).
That
is,
'
has
the
form
'

^
'

and
w
e
ha
v
e
pro
v
en
 `
'

and
 `
'

.
The
pro
ofs
of
these
judgemen
ts
are
con
tained
in
the
pro
of
of
 `
',
so
w
e
can
apply
the
induction
h
yp
othesis
to
obtain
 ;
 
`
'

and
 ;
 
`
'

.
By
an
application
of
(^I)
w
e
can
deriv
e
 ;
 
`
'

^
'

.
Case
:
The
pro
of
ends
with
an
application
of
(_E).
That
is,
w
e
ha
v
e
 `


_


,
for
some
form
ulas


,


,
suc
h
that
 ;


`
'
and
 ;


`
'.
These
pro
ofs
are
all
shorter,
th
us
w
e
can
apply
the
induction
h
yp
othesis
to
obtain
 ;
 
`


_


and
 ;


;
 
`
'
and
 ;


;
 
`
'.
It
remains
to
use
rule
(_E).
Other
cases
are
similar.
Exercise
..
)
Begin
with
the
axiom
?
`
?.
Apply
(?E),
to
deriv
e
?
`
'
and
(!I)
to
deriv
e
`
?
!
'.
)
Begin
with
p;
p
!
?
`
p
and
p;
p
!
?
`
p
!
?.
Apply
(!E)
to
get
p;
p
!
?
`
?,
then
t
wice
(!I)
to
get
`
p
!
(p
!
?)
!
?.
)
First
sho
w
that
:::p;
:p;
p
`
?
(unfold
the
:'s).
Th
us,
:::p;
p
`
:p
!
?,
i.e.,
:::p;
p
`
::p.
But
:::p
=
::p
!
?
and
one
can
deriv
e
:::p;
p
`
?.
It
remains
to
use
(!I).
)
First
sho
w
that
p
!
q
;
q
!
?;
p
`
?.
Then
apply
(!I)
three
times.
	)
What
w
e
need
is
:p
_
:q
;
p
^
q
`
?.
With
help
of
(^E),
deriv
e
separately
:p
_
:q
;
:p;
p
^
q
`
?
and
:p
_
:q
;
:q
;
p
^
q
`
?.
Apply
(_E)
to
these
t
w
o
judgemen
ts.
)
Remem
b
er
that
$
abbreviates
a
conjunction,
so
(^I)
will
b
e
the
last
rule.
One
part
of
this
pro
of
uses
(^E),
the
other
one
uses
(^I).
)
First
deriv
e
(p
_
:p)
!
?;
p
`
?,
using
rules
(_E)
and
(!E).
By
(!I)
obtain
(p
_
:p)
!
?
`
:p.
Then
use
(_E)
and
(!E)
again
to
deriv
e
(p
_
:p)
!
?
`
?.


Exercise
..

First
w
e
sho
w
that
a
[
a
=
a,
that
is
a

a
holds
for
all
a.
This
is
b
ecause
a
=
0
[
a
=
( a
\
a)
[
a
=
( a
[
a)
\
(a
[
a)
=

\
(a
[
a)
=
a
[
a.

The
relation

is
transitiv
e
b
ecause
a
[
b
=
b
and
b
[
c
=
c
implies
that
c
=
b
[
c
=
(a
[
b)
[
c
=
a
[
(b
[
c)
=
a
[
c.

The
an
tisymmetry
(a

b
and
b

a
implies
a
=
b)
follo
ws
immediately
from
the
denition.
T
o
see
that
a
[
b
is
the
lub
of
a
and
b,
assume
that
a

c
and
b

c.
Then
(a
[
b)
[
c
=
a
[
(b
[
c)
=
a
[
c
=
c,
i.e.,
a
[
b

c.

The
condition
a
\
b

a
(that
is
(a
\
b)
[
a
=
a)
is
sho
wn
as
follo
ws:
(a
\
b)
[
a
=
(a
\
b)
[
(a
\
)
=
(a
\
b)
[
(a
\
(b
[
 b))
=
(a
\
b)
[
(a
\
b)
[
(a
\
 b)
=
(a
\
b)
[
(a
\
 b)
=
a
\
(b
[
 b)
=
a
\

=
a.

If
a
\
b
=
a
then
b
=
(a
\
b)
[
b
=
a
[
b,
i.e.,
a

b.
On
the
other
hand,
if
a

b
then
(a
\
b)
[
a
=
(a
[
a)
\
(b
[
a)
=
a
\
b,
and
th
us
a

a
\
b.
W
e
conclude
a
=
a
\
b,
b
y
the
previous
item
and
an
tisymmetry
.
Exercise
..

The
pro
of
that
the
relation

is
a
partial
order,
and
that
[
is
the
lub,
is
similar
as
for
Exercise
...

Next
w
e
sho
w
that
 a
\
a
=
0.
W
e
ha
v
e
 a

 a,
i.e.,
a
)
0

a
)
0.
Th
us,
a
\
(a
)
0)

0,
and
since
0
is
ob
viously
the
least
elemen
t,
w
e
ha
v
e
a
\
 a
=
a
\
(a
)
0)
=
0.

No
w
w
e
pro
v
e
(a
[
b)
\
a
=
a,
in
a
similar
w
a
y
as
w
e
pro
v
ed
the
dual
la
w
(a
\
b)
[
a
=
a
for
a
Bo
olean
algebra.
(Note
that
no
w
w
e
use
b
\
 b
=
0
instead
of
b
[
 b
=
.)

W
e
deriv
e
(a
\
b)
[
a
=
a
from
the
ab
o
v
e,
b
ecause
(a
\
b)
[
a
=
(a
[
a)
\
(b
[
a)
=
a
\
(b
[
a).
Note
that
w
e
obtain
here
the
idemp
otency
of
\,
since
a
\
a
=
a
\
(a
[
a)
=
a
\
a.

Then
w
e
pro
ceed
in
a
similar
w
a
y
as
for
Bo
olean
algebra.
Exercise
..
The
only
prop
ert
y
whic
h
is
not
immediate
is
the
equiv
alence
b
et
w
een
A
\
C

B
and
C

In
t( A
[
B
).
First
note
that
the
condition
A
\
C

B
is
equiv
alen
t
to
C

 A
[
B
,
for
all
A,
B
and
C
.
F
or
the
left-to-righ
t
implication
observ
e
that
X

Y
implies
X

In
t(Y
),
whenev
er
X
is
an
op
en
set.
The
con
v
erse
follo
ws
from
In
t( A
[
B
)

 A
[
B
.


Chapter
.
Solutions
and
hin
ts
to
selected
exercises
Exercise
..
())()
Let
 =
f#

;
:
:
:
;
#
n
g,
and
let
v
b
e
a
v
aluation
in
a
Heyting
algebra
H
.
W
e
write
v
( )
to
denote
v
(#

)
\



\
v
(#
n
).
By
induction
with
resp
ect
to
deriv
ations
w
e
pro
v
e
the
follo
wing
statemen
t:
\If
 `
'
then
v
( )

v
('),
for
all
v
aluations
in
arbitrary
Heyting
algebras".
The
h
yp
othesis
follo
ws
from
the
sp
ecial
case
when
v
( )
=
.
F
or
instance,
consider
the
case
of
(!I).
T
o
sho
w
v
( )

v
('
!
 
)
recall
that
v
('
!
 
)
=
v
(')
)
v
( 
)
and
use
the
induction
h
yp
othesis
v
( )
\
v
(')

v
( 
).
F
or
the
case
of
(_E)
use
the
distributivit
y
la
w.
Exercise
..	
First
w
e
consider
coun
terexamples
with
op
en
sets.
In
what
follo
ws
w
e
use
the
con
v
en
tion
that
v
(p)
=
P
,
v
(q
)
=
Q,
etc,
and
w
e
write

A
for
In
t( A).
)
T
ak
e
P
to
b
e
the
whole
R

without
one
p
oin
t.
Then

P
is
empt
y
and

P
is
the
full
set
R

.
Th
us

P
)
P
=
.
)
Let
P
b
e
an
op
en
disk,
and
Q
b
e
R

without
one
straigh
t
line
crossing
the
middle
of
the
disk.
Then
P
)
Q
is
the
whole
space
without
the
in
tersection
of
the
disk
and
the
line.
The
v
alue
of
the
righ
t-hand
side
is
the
whole
space.
)
T
ak
e
the
in
teriors
of
t
w
o
complemen
tary
halv
es
of
R

.
0)
T
ak
e
Q
and
R
to
b
e
the
half
of
R

where
x
<
0,
and
tak
e
P
=
R

 f(0;
0)g.
Then
(P
)
Q)
\
(Q
)
P
)
is
equal
to
Q
and
R
.
Th
us
the
v
alue
of
(p
$
q
)
$
r
is
R


P
.
)
T
ak
e
b
oth
P
and
Q
to
b
e
the
same
op
en
disk.
Here
are
coun
terexamples
in
Kripk
e
mo
dels.
)
A
t
w
o-elemen
t
mo
del
with
c
<
c
0
,
where
c

p
and
c
0

p.
)
A
t
w
o-elemen
t
mo
del
with
c
<
c
0
,
where
c;
c
0

p
and
c
0

q
and
c

q
.
)
A
three-elemen
t
mo
del
with
c
<
c
0
;
c
0
0
,
where
c
0

p,
c
0
0

q
and
noth-
ing
more
happ
ens.
0)
A
three-elemen
t
mo
del
with
c
<
c
0
<
c
00
,
where
c
0

p,
c
00

p;
q
;
r
and
nothing
more
happ
ens.
)
A
t
w
o-elemen
t
mo
del
with
c
<
c
0
,
where
c
0

p;
q
and
c
forces
nothing.


Exercise
..0
Use
n
lines
b
eginning
in
(0;
0)
to
divide
the
space
R

in
to
n
disjoin
t
angles
and
tak
e
their
in
teriors
as
v
alues
of
p
i
.
The
p
oin
t
(0;
0)
do
es
not
b
elong
to
the
in
terpretation
of
this
form
ula.
Or
tak
e
a
Kripk
e
mo
del
with
all
sets
fc

c
0
:
c

p
i
g
dieren
t.
Then
c
0
do
es
not
force
our
form
ula.
Exercise
..
Let
F
b
e
maximal
and
let
a
[
b

F
,
but
a;
b

F
.
W
e
sho
w
that
either
F
[
fag
or
F
[
fbg
can
b
e
extended
to
a
prop
er
lter.
First
assume
that
there
are
f

;
f


F
suc
h
that
f

\
a
=
f

\
b
=
0.
Then
(f

\
f

)
\
(a
[
b)
=
(f

\
f

\
a)
[
(f

\
f

\
b)
=
0
[
0
=
0,
a
con
tradiction.
Th
us
either
suc
h
f

or
suc
h
f

do
es
not
exist.
Assume
for
instance
that
f
\
a
=
0,
for
all
f

F
.
Then
the
set
F
a
=
fx
:
x

f
\
a
for
some
f

F
g
is
a
prop
er
lter
extending
F
.
Let
F
b
e
a
prime
lter
in
a
Bo
olean
algebra,
and
assume
that
F

F
0
,
with
a

F
0
 F
.
Since
a
[
 a
=


F
and
F
is
prime,
w
e
ha
v
e
 a

F
and
0
=
a
\
 a

F
0
,
a
con
tradiction.
Exercise
..
The
argumen
t
is
similar
to
the
rst
part
of
Exercise
...
Assume
that
G
is
our
maximal
elemen
t,
and
that
c
[
d

G,
but
c;
d

G.
The
assumption
of
g

;
g


G
with
g

\
a

b
and
g

\
a

c
leads
to
con
tradiction,
and
th
us
either
G
[
fbg
or
G
[
fcg
can
b
e
extended
to
a
prop
er
lter,
not
con
taining
a.
Exercise
..
())
W
e
need
to
pro
v
e
a
sligh
tly
more
general
statemen
t,
namely:
Let
 `
'.
Then
for
ev
ery
Kripk
e
mo
del
C
and
ev
ery
state
c
of
C
,
the
condition
c

 implies
c

'.
(An
alternativ
e
of
this
generalization
is
to
remem
b
er
that
for
eac
h
state
c,
the
set
of
all
c
0
with
c

c
0
mak
es
a
Kripk
e
mo
del.)
As
an
example
consider
the
induction
step
for
rule
(_E).
Assume
that
w
e
ha
v
e
deriv
ed
 `
'
from
the
three
assertions:
 ;
 
`
'
and
 ;
#
`
'
and
 `
 
_
#.
Let
c

 .
By
the
induction
h
yp
othesis
w
e
ha
v
e
c

 
_
#,
and
th
us
either
c

 
or
c

#.
Assume
the
rst
case
and
w
e
ha
v
e
c

 ;
 
.
By
induction
h
yp
othesis
w
e
get
c

'.
Exercise
..
The
induction
fails
in
the
case
of
disjunction.


Chapter
.
Solutions
and
hin
ts
to
selected
exercises
Exercise
..
First
do
the
previous
t
w
o
exercises.
No
w
assume
that
'
is
a
classical
tautol-
ogy
(the
other
direction
is
ob
vious),
but
::'
is
not
v
alid
in
tuitionistically
.
This
means
that
there
is
a
Kripk
e
mo
del
with
a
state
c,
suc
h
that
c

:'.
Without
loss
of
generalit
y
,
w
e
can
assume
that
c
determines
all
prop
ositional
v
ariables
in
'.
Indeed,
supp
ose
that
c
do
es
not
determine
a
v
ariable
p.
Then
there
is
a
c
0

c
with
c
0

p,
and
w
e
can
tak
e
c
0
instead.
F
rom
Exercise
..
w
e
obtain
that
c

',
a
con
tradiction.
Exercise
..
.0..
Lemma
(Newman's
Lemma).
L
et
!
b
e
a
binary
r
elation
satisfying
SN
.
If
!
satises
W
CR,
then
!
satises
CR.
Pr
oof.
W
e
giv
e
the
pro
of
in
the
case
where
!
satises
FB,
i.e.,
for
all
M

L
the
set
fN
j
M
!
N
g
is
nite.
[This
w
as
the
case
the
hin
t
aimed
at.
See
another
pro
of
at
the
end
of
the
note.]
Since
!
satises
FB
and
SN
,
there
is
for
an
y
M
an
m
so
that
an
y
reduction
sequence
from
M
has
length
at
most
m.

Assume
!
is
SN
and
W
CR.
Giv
en
M

;
M

;
M


L
where
M

!
!
M

and
M

!
!
M

,
w
e
m
ust
nd
M


L
suc
h
that
M

}}{ { { { { { { {
! !CCCCCCCC
M

! !
M

}}
M

Since
!
is
strongly
normalizing,
for
ev
ery
M

L
there
will
b
e
a
longest
reduction
starting
in
M
.
Let
jM
j

N
denote
the
length
of
this
reduction.
Assume
M

;
M

;
M


L
suc
h
that
M

!
!
M

and
M

!
!
M

.
W
e
pro
ceed
b
y
induction
o
v
er
jM

j:
Case
jM

j
=
0:
Since
the
longest
reduction
has
length
0,
it
m
ust
b
e
the
case
that
M

=
M

and
M

=
M

,
and
th
us
M

=
M

is
the
desired
term.
Case
jM

j
>
0:
Assume
for
all
N


L
suc
h
that
jN

j
<
jM

j,
if
N

!
!
N

and
N

!
!
N

then
there
exists
N

suc
h
that
N

!
!
N

and
N

!
!
N

.

Ho
w
do
es
this
follo
w?
Recall
K
onig's
Lemma
whic
h
states
that
if
a
tree|whic
h
is
nitely
branc
hing,
i.e.,
eac
h
no
de
has
nitely
man
y
c
hildren|is
innite,
then
it
m
ust
ha
v
e
an
innite
branc
h.
No
w,
giv
en
M
,
consider
the
tree
where
the
ro
ot
is
lab
eled
with
M
,
and
for
an
y
no
de
lab
eled
with
K
,
if
K
!
N
then
the
no
de
lab
eled
K
has
a
c
hild
lab
eled
N
.
Since
!
satises
SN,
there
is
no
innite
branc
h.
Also,
there
cannot
b
e
arbitrarily
long
nite
sequences,
b
ecause
then
the
tree
w
ould
b
e
innite,
and
then
b
y
K
onig's
Lemma
there
w
ould
b
e
an
innite
branc
h,
con
tradicting
SN.


If
M

!
!
M

has
length
0
the
desired
term
is
M

:
M

{ { { { { { { {
{ { { { { { { {
! !CCCCCCCC
M

! !
M

{ { { { { { { {
{ { { { { { { {
M

Similarly
if
M

!
!
M

has
length
0.
Th
us
assume
that
M

!
N

!
!
M

and
M

!
N

!
!
M

,
M

}{ { { { { { { {
!CCCCCCCC
N


N


M

M

Since
!
is
W
CR
from
M

!
N

and
M

!
N

w
e
get
a
term
N

L
suc
h
that
N

!
!
N
and
N

!
!
N
M

}{ { { { { { { {
!CCCCCCCC
N

! !

N

}}

M

N
M

Since
M

!
N

!
!
N
,
jN

j
<
jM

j.
Applying
the
induction
h
yp
othesis
w
e
th
us
get
a
term
M
0


L
suc
h
that
M

!
!
M
0

and
N
!
!
M
0

M

}{ { { { { { { {
!CCCCCCCC
N

! !CCCCCCCC

N

}}{ { { { { { { {

M

! !
N

M

M
0



Chapter
.
Solutions
and
hin
ts
to
selected
exercises
Then
N

!
!
M
0

and
N

!
!
M

and
hence
b
y
the
induction
h
yp
othesis
w
e
get
a
term
M


L
suc
h
that
M
0

!
!
M

and
M

!
!
M

M

}{ { { { { { { {
!CCCCCCCC
N

! !CCCCCCCC

N

}}{ { { { { { { {

M

! !CCCCCCCC
N

M


M
0


M

i.e.,
M

!
!
M

and
M

!
!
M

.
This
concludes
the
pro
of.
u
t
.0..
Pr
oposition.
Ther
e
is
a
binary
r
elation
satisfying
WN
and
W
CR,
but
not
CR.
Pr
oof.
Consider
L
=
fM
;
M
NF
;
N
;
N
NF
g
and
the
relation
!
giv
en
b
y
M

%
N
e

M
NF
N
NF
The
relation
is
not
Ch
urc
h-Rosser:
for
M

L
w
e
ha
v
e
t
w
o
reductions
M
!
M
NF
and
M
!
N
!
N
NF
,
but
there
is
no
term
in
L
suc
h
that
M
NF
and
N
NF
b
oth
reduce
to
this
term
(b
ecause
b
oth
are
in
\normal
form").
The
relation
is
W
eak
Ch
urc
h-Rosser:
if
M
!
M
NF
and
M
!
N
,
then
M
NF
is
a
common
reduct.
Similarly
for
N
.
Finally
,
w
e
ha
v
e
that
!
is
w
eakly
normalizing
since
an
y
reduction
can
alw
a
ys
end
in
either
M
NF
or
N
NF
.
(It
is
ob
viously
not
strongly
normalizing
b
ecause
w
e
ha
v
e
an
innite
reduction
M
!
N
!
M
!



.)
u
t
.0..
Cor
ollar
y.
L
et
M



b
e
typ
able
in

!

a
la
Curry
and
assume
that
M

!
!

M

and
M

!
!

M

.
Then
ther
e
is
an
M



such
that
M

!
!

M

and
M

!
!

M

.
Pr
oof.
Let
L
=
fM

j	
:
`
M
:

g
and
consider
!=!

.
By
The-
orem
.0
!
satises
SN
and
b
y
Exercise
.
!
satises
W
CR,
th
us
b
y
Newman's
Lemma
!
satises
CR,
i.e.,
!

is
Ch
urc
h-Rosser
on
L|the
set
of
Curry-t
ypable
terms.
u
t

	
Ho
w
do
es
one
pro
v
e
Newman's
Lemma
in
case
!
do
es
not
necessarily
satisfy
FB?
As
follo
ws.
Pr
oof.
Let
!
b
e
a
relation
on
L
satisfying
SN
and
W
CR.
As
usual,
a
normal
form
is
an
M

L
suc
h
that
for
all
N

L,
M
!
N
.
Since
!
satises
SN
,
an
y
M

L
reduces
to
a
normal
form.
Call
M
ambiguous
if
M
reduces
to
t
w
o
distinct
normal
forms.
It
is
easy
to
see
that
!
satises
CR
if
there
are
no
am
biguous
terms.
No
w,
for
an
y
am
biguous
M
there
is
another
am
biguous
M
0
suc
h
that
M
!
M
0
.
Indeed,
supp
ose
M
!
!
N

and
M
!
!
N

.
Both
of
these
reductions
m
ust
mak
e
at
least
one
step
since
N

and
N

are
distinct,
so
the
reductions
ha
v
e
form
M
!
M

!
!
N

and
M
!
M

!
!
N

.
If
M

=
M

w
e
can
c
ho
ose
M
0
=
M

=
M

.
If
M

=
M

w
e
no
w
b
y
W
CR
that
for
some
N

,
M

!
!
N

and
M

!
N

.
W
e
can
assume
that
N

is
a
normal
form.
Since
N

and
N

are
distinct,
N

is
dieren
t
from
N

or
N

so
w
e
can
c
ho
ose
M
0
=
M

or
M
0
=
M

.
Th
us,
M
has
an
innite
reduction
sequence,
con
tradicting
SN
.
Hence,
there
are
no
am
biguous
terms.
u
t
Exercise
..
One
p
ossibilit
y
is
S(S(KS)K)I.
Exercise
..	
It
should
b
e
easy
to
see
that
all
t
yp
es
that
can
b
e
assigned
to
K,
I
and
S

m
ust
b
e
resp
ectiv
ely
of
the
form:


!

!

;


!

;

(
!

)
!
(
!

!

)
!
(
!

)
!

!

.
W
e
can
tak
e
all
instances
of
the
ab
o
v
e
form
ulas
as
our
Hilb
ert
st
yle
axioms.
But
w
e
can
easily
simplify
the
the
system,
replacing
the
last
axiom
b
y:

(
!

!

)
!
(
!

)
!

!

.
A
Hilb
ert
st
yle
pro
of
will
no
w
corresp
ond
to
a
com
binatory
term
built
from
the
com
binators
of
Exercise
..,
and
without
loss
of
generalit
y
,
w
e
can
only
deal
with
terms
in
normal
forms.
Supp
ose
w
e
ha
v
e
a
pro
of
of
(p
!
p
!
q
)
!
p
!
q
,
where
p
and
q
are
prop
ositional
(t
yp
e)
v
ariables.
Let
M
b
e
the
corresp
onding
com
binatory
term
in
the
language
of
Exercise
..,
and
assume
that
M
is
in
a
normal
form.

0
Chapter
.
Solutions
and
hin
ts
to
selected
exercises
Clearly
,
M
is
neither
K

;
,
nor
S

;
;
,
nor
I

.
If
M
=
K

;
N
,
then
N
pro
v
es
p
!
q
,
whic
h
is
not
a
v
alid
tautology
.
Also
M
=
S

;
;
P
Q
or
M
=
S

;
;
N
is
imp
ossible,
b
ecause
t
yp
es
of
these
expressions
do
not
matc
h
(p
!
p
!
q
)
!
p
!
q
.
Exercise
..
a)
T
o
reduce
?
`
M
:
?
to
`
M
:
?,
observ
e
that
a
term
M
with
free
v
ariables
x

;
:
:
:
;
x
n
is
t
ypable
if
and
only
if
x

:
:
:
x
n
:M
is
t
ypable.
b)
In
order
to
nd
out
if
a
closed
term
M
is
t
ypable,
ask
if
x
:

`
KxM
:

.
Exercise
..
Of
course
t

=
x

,
and
then
w
e
pro
ceed
b
y
induction
as
follo
ws:
t

!
=
x:Kt

(z
y
:z
(y
x)(y
t

)).
Exercise
..
(Author's
hin
t)
Adopt
the
tec
hnique
of
Exercise
..
to
write
lam
b
da-terms
t
[x:
]
suc
h
that
x

F
V
(t
[x:
]
)
and
t
[x:
]
is
t
ypable
in
a
con
text

if
and
only
if
(x)
=
S
(
),
for
some
S
.
(Use
a
fresh
v
ariable
x

,
for
ev
ery
t
yp
e
v
ariable

o
ccurring
in

.)
Then
reduce
the
problem
of
 `
M
:
?
with
 =
f(x

:


);
:
:
:
;
(x
n
:

n
)g
to
the
problem
?
`
M
0
:
?,
where
M
0
=
z
:z
M
t
[x

:

]
:
:
:
t
[x
n
:
n
]
.
Exercise
..
(Solution
b
y
Henning
Makholm)
(This
is
a
fragmen
t
of
Henning's
solution
con
taining
the
reduction
of
prob-
lem
()
to
problem
().)
Definition.
Let
 0
denote
a
t
yp
e
en
vironmen
t
of
the
form
discussed
in
exercise
.	.
That
is,
one
that
maps
all
v
ariables
to
distinct
t
yp
e
v
ariables.
Definitions.
I
consider
the
follo
wing
problems:
()
?
`
M
:

;
()
?
`
M
:
?;
(


)
 0
`
M
:
?:
In
eac
h
of
the
follo
wing
reductions,
x

up
to
x
n
will
b
e
understo
o
d
to
b
e
the
free
v
ariables
of
the
giv
en
M
.
Reduction
fr
om
()
to
(


).
T
o
answ
er
?
`
M
:

,
ask
 0
`
x




x
n
y
z
:y
(z
M
)(z
t

)
:
?:


Reduction
fr
om
(


)to
().
This
is
the
harder
part.
Without
the
 0
it
is
not
trivial
to
design
a
subterm
that
is
forced
to
ha
v
e
a
primitiv
e
t
yp
e
(one
that
cannot
b
e
destructed).
Solution
with
pr
oduct
types.
One
simple
solution
can
b
e
obtained
if
w
e
assume
that
w
e
ha
v
e
pro
duct
t
yp
es
at
our
disp
osal,
together
with
pair
and
pro
jection
op
erators.
T
o
answ
er
 0
`
M
:
?,
ask:
?
`
K
((x




x
n
:M
)
h
x

;
x

i
hx

;
x

i
:
:
:
hx
n
;
x
n
i)
((x




x
n
:M
)(y

:y

)(y

y

:y

)
:
:
:
(y




y
n
:y

))
:
?
Clearly
,
if
M
has
a
t
yping
in
 0
then
this
complicated
term
is
also
t
ypable.
F
or
the
other
direction,
I
exploit
the
existence
of
unique
principal
t
yp
es.
If
the
long
term
is
t
ypable,
then
x




x
n
:M
will
ha
v
e
a
principal
t
yp
e


!



!

n
!

:
Since
that
principal
t
yp
e
ha
v
e
instances
where
the

i
's
are
arro
w
t
yp
es
as
w
ell
as
where
they
are
pair
t
yp
es,
w
e
conclude
that
the

i
's
m
ust
b
e
t
yp
e
v
ariables.
F
urthermore,
b
ecause
y




y
i
:y

and
y




y
j
:y

cannot
ha
v
e
equal
t
yp
e
for
i
=
j
,
the

i
's
m
ust
b
e
dier
ent
t
yp
e
v
ariables.
Th
us,
mo
dulo
renaming
of
t
yp
e
v
ariables
w
e
ha
v
e
 0
`
M
:

.
Implica
tional
solution.
My
solution
is
based
on
an
\enco
ding"

of
t
yp
es
and
terms

:

=
;

!

=
(
!

)
!
(
!

);
x
=
x;
x:M
=
ex:e(e(M
));
M
N
=
(e:e(M
eN
))(x:x):
Lemma.

If
 `
M
:

then
 `
M
:

.

If

`
M
:

then
 `
M
:

,
for
some
 and

with
 =

and

=

.
The
pro
of
of
the
rst
part
is
easy
.
The
other
part
follo
ws
b
y
induction
with
resp
ect
to
M
.
u
t

Nev
er
mind
that

is
not
LOGSP
A
CE-computable
b
ecause

can
b
e
exp
onen
tially
bigger
than

.
It
is
not
used
in
the
actual
reduction,
just
in
the
argumen
t
for
its
correct-
ness.
The
imp
ortan
t
thing
is
that
M
is
LOGSP
A
CE-computable
b
y
ha
ving
a
treeless,
linear
denition.


Chapter
.
Solutions
and
hin
ts
to
selected
exercises
No
w,
to
answ
er
 0
`
M
:
?,
ask
?
`
(x




x
n
:M
)(z
y

:z
)(xy

y

:z
)
:
:
:
(z
y




y
n
:z
)
:
?:
It
is
easy
to
see
that
this
holds
whenev
er
M
is
t
ypable
in
 0
.
Con
v
ersely
,
assume
that
the
massaged
and
wrapp
ed
M
is
t
ypable.
W
e
kno
w
then
that
M
is
t
ypable
and
th
us
so
is
M
.
Let
( ;

)
b
e
the
principal
pair
of
M
.
What
remains
to
b
e
sho
wn
is
that
 is
 0
.
W
e
kno
w
that
 (x
i
)
=
 (x
i
)
has
an
instance
whic
h
is
a
t
yp
e
of
z
y




y
i
:z
.
But
b
y
insp
ection
of
the
denition
of

w
e
see
that
this
can
only
b
e
the
case
when
 (x
i
)
is
a
t
yp
e
v
ariable.
(This
is
b
ecause
all
comp
ound
t
yp
es
are
translated
in
to
t
yp
es
with
\symmetric"
rst
argumen
ts.)
F
urthermore
the
t
yp
e
v
ariables
in
 ha
v
e
to
b
e
dieren
t,
b
ecause
z
y




y
i
:z
and
z
y




y
j
:z
do
not
ha
v
e
a
common
t
yp
e
for
i
=
j
.
Th
us
 is
a
 0
whic
h
completes
the
reduction.
u
t
Exercise
..
T
ak
e
the
equations
\

=


!


",
\

=


!


",:
:
:
,
\
n 
=

n
!

n
".
Exercise
..
Use
non-uniable
terms
as
dieren
t
ags.
Represen
t
n-ary
op
erators
as
com
binations
of
arro
ws,
using
ags
to
iden
tify
op
erators.
Exercise
..
Lab
el
all
subterms
o
ccurring
in
the
equations
and
k
eep
lab
els
unc
hanged
in

in
steps
(a)
and
(d).
A
v
ariable
x
is
called
dene
d
i
there
is
an
equation
of
the
form
\x
=
t"
or
\t
=
x".
The
o
ccurrence
of
x
as
a
left-hand
or
a
righ
t-hand
side
of
suc
h
an
equation
is
called
main
.
Note
that
\x
=
y
"
has
t
w
o
main
o
ccurrences.
Pro
ceed
b
y
induction
w.r.t.
the
follo
wing
parameters:
)
n
um
b
er
of
la-
b
els;
)
n
um
b
er
of
equations;
)
n
um
b
er
of
main
o
ccurrrences
of
dened
v
ariables;
)
n
um
b
er
of
all
o
ccurrrences
of
dened
v
ariables.
Eac
h
applica-
tion
of
rule
(c)
decreases
()
and
do
es
not
increase
the
other
parameters.
Rule
(e)
decreases
()
without
aecting
(),
and
rule
(a)
decreases
()
with-
out
increasing
()
or
().
Rule
(d),
used
with
caution
(i.e.,
only
when
x
o
ccurs
in
\r
=
s"
and
when
t
is
not
a
dened
v
ariable),
will
not
increase
an
y
of
the
parameters
(){()
and
will
decrease
().
Th
us,
after
a
nite
n
um
b
er
of
applications
of
rules
(a),
(c),
(d)
and
(e)
w
e
obtain
a
system
of
equations,
that
is
not
normal
only
for
the
follo
wing
reasons:
there
ma
y
b
e
some
equa-
tions
of
the
form
\t
=
x"
and
there
ma
y
b
e
some
equations
b
et
w
een
dened
v
ariables.
Use
rules
(b)
and
(d)
for
a
clean-up.


Exercise
..0
Use
acyclic
graphs
instead
of
trees
to
represen
t
algebraic
terms.
Pro
ceed
b
y
iden
tifying
no
des
of
these
graphs
as
long
as
either
a
con
tradiction
is
found
(a
lo
op
or
an
attempt
to
place
t
w
o
dieren
t
op
eration
lab
els
at
a
no
de)
or
no
more
no
des
need
to
b
e
iden
tied.
Exercise
..
Just
add
one
more
equation.
Exercise
..
T
ak
e
the
term
(v
:Kv
(x


:
:
:
x

n
:t
[v
:
]
))N
,
where
N
is
an
y
inhabitan
t
of

,
and
t
[v
:
]
is
as
in
Exercise
...
Exercise
..
Let
a
pair
( ;

)
b
e
called
semi-princip
al
i
it
has
the
prop
erties
men
tioned
in
Exercise
...
W
e
sho
w
that
if
( ;

)
is
semi-principal
then
there
is
at
most
one
Ch
urc
h-st
yle
BCK-term
M
in
long
normal
form
suc
h
that
 `
M
:

.
The
pro
of
is
b
y
induction
w.r.t.
the
total
n
um
b
er
of
arro
ws
in
( ;

).
Assume
rst
that

=


!


.
Then
M
cannot
b
e
of
the
form
xM

:
:
:
M
n
,
as
it
w
ould
not
b
e
fully-applied
(x
has
to
o
few
argumen
ts).
Th
us,
M
=
y
:N
,
with
fully
applied
N
,
and
w
e
apply
the
induction
h
yp
othesis
to
the
pair
( [
fy
:


g;


).
The
remaining
case
is
when

is
a
t
yp
e
v
ariable
.
There
is
at
most
one
v
ariable
x
declared
in
 to
b
e
of
t
yp
e


!



!

p
!
,
since

o
ccurs
at
most
t
wice.
Th
us
M
=
xN

:::N
p
.
Apply
the
induction
h
yp
othesis
to
pairs
( 0
;

j
),
where
 0
is
 without
the
declaration
(x
:


!



!

p
!
).
Exercise
..
Mo
dify
the
algorithm
of
Lemma
..
so
that
it
searc
hes
for
all
inhabitan
ts
rather
than
for
only
one.
This
pro
cess
ma
y
lo
op
b
y
asking
a
question
of
the
form
 `
?
:
,
whic
h
has
already
b
een
ask
ed.
W
e
can
eectiv
ely
iden
tify
all
lo
op-free
solutions
and
all
lo
ops.
If
w
e
ha
v
e
a
lo
op
caused
b
y
a
question
that
has
a
lo
op-free
solution,
then
the
answ
er
is:
\innite".
(Note
the
similarit
y
of
this
argumen
t
to
the
pumping
lemma
for
CF-languages.)
Exercise
..0
Assume
all

i
's
are
inhabited.
W
e
pro
v
e
indirectly
that
then
'
is
not
inhab-
ited.
Assume
`
N
i
:

i
and
`
M
:
'.
Then
`
M
N




N
n
:
,
whic
h
is
a
con
tradiction
b
ecause
t
yp
e
v
ariables
are
not
inhabited.


Chapter
.
Solutions
and
hin
ts
to
selected
exercises
The
pro
of
that
'
is
inhabited
if
there
is
a

i
that
is
not
inhabited
is
b
y
induction
on
the
size
of
'.
Since

is
the
only
t
yp
e
v
ariable
in
',
t
yp
e

i
has
the
form


!



!

m
!
.
If
an
y
of
the

j
's
w
ere
not
inhabited
then
b
y
the
induction
h
yp
othesis

i
w
ould
b
e
inhabited,
but
w
e
kno
w
it
is
not.
Th
us
for
some
N
j
's
w
e
ha
v
e
`
N
j
:

j
.
Then
`
x




x
n
:x
i
N

:
:
:
N
m
:
'.
Exercise
..
The
form
ula
'
m
ust
ha
v
e
the
form
 

!



!
 
n
!
p.
Classically
,
this
is
equiv
alen
t
to
( 

^



^
 
n
)
!
p.
F
or
this
to
b
e
a
tautology
,
some
 
i
m
ust
b
e
false
in
a
v
aluation
that
sets
p
to
b
e
false.
Hence
that
 
i
is
not
classically
v
alid,
so
it
cannot
b
e
in
tuitionistically
v
alid
either.
That
means
that
 
i
is
not
inhabited
when
view
ed
as
a
t
yp
e.
Then
'
is
inhabited
b
y
Exercise
..0,
and
'
is
th
us
in
tuitionistically
v
alid.
Exercise
..
First
reduce
the
general
case
to
the
case
when

is
a
t
yp
e
v
ariable
.
T
o
pro
v
e
that


;
:
:
:
;

n
`
,
consider
a
substitution
S
suc
h
that
S
()
=


!



!

n
!
,
and
S
(
)
=

,
for

=
.
Sho
w
that
all
form
ulas
S
(

);
:
:
:
;
S
(
n
)
are
v
alid,
and
conclude
what
y
ou
need.
Exercise
..
Consider
the
term
M
=<


(F
K);


(F
K)
>,
where
F
=
x:
<
x;
y
:x
>.
Then
F
can
b
e
assigned
all
instances
of
the
t
yp
e

!
(
^
(
!
)),
and
since
K
has
b
oth
the
t
yp
es

!

!

and

!
(
!

)
!

,
w
e
can
deriv
e
that
M
:
(
!

!

)
^
(
!

!
(
!

)
!

).
But
M
!

F
K,
and
F
K
cannot
b
e
assigned
this
t
yp
e.
Exercise
..
The
example
term
in
the
ab
o
v
e
solution
is
an
un
t
yp
ed

-redex
that
is
not
an
erasure
of
a
t
yp
ed

-redex.
The
Ch
urc
h-st
yle
v
ersion
of
that
term
uses
t
w
o
dieren
t
K's.
Exercise
..	
The
problem
is
that
the
conclusion
of
the
elimination
rule
is
not
neces-
sarily
iden
tical
to
a
premise
of
an
y
of
the
in
tro
duction
rules.
Th
us,
in
an
elimination-in
tro
duction
pair,
one
eliminates
and
in
tro
duces
p
ossibly
dier-
en
t
things.


Exercise
..0
There
is
no
canonical
ob
ject
of
t
yp
e
?,
so
one
can
argue
that
no
eta
rule
mak
es
sense.
By
analogy
to
the
eta
rule
for
_
one
ma
y
only
p
ostulate
that
an
\articial"
use
of
?-in
tro
duction
should
b
e
a
v
oided.
This
leads
to
something
lik
e
"
?
(M
)
!
M
,
for
M
:
?.
Exercise
.	.
(Hin
t)
F
or
the
righ
t-to-left
direction,
pro
ceed
as
follo
ws:
.
Sho
w
that
`
('
!
 
)
!
(:'
!
 
)
!
 
.
.
Let


;
:
:
:
;

n
b
e
the
prop
ositional
v
ariables
of
'.
Let

b
e
a
Bo
olean
v
aluation.
No
w
let

0
i
=


i
if
()
=

:
i
if
()
=
0
Also,
let
'
0
=

'
if
(')
=

:'
if
(')
=
0
where

is
lifted
to
form
ulas
according
to
the
usual
truth-table
seman-
tics.
Sho
w
that
f
0

;
:
:
:
;

0
n
g
`
'
0
.
.
Pro
v
e
the
righ
t-to-left
direction.
Exercise
	..
The
construction
of
'
0
is
b
y
induction
w.r.t.
the
length
of
the
quan
tier
prex
of
'.
If
'
is
quan
tier-free
then
'
0
=
'.
If
'
=
x
 
(x)
then
'
0
=
 
0
(x).
If
'
=
	x
 
(x)
then
'
0
=
 
0
(c),
where
c
is
a
constan
t
suc
h
that
`
 
(c).
(Here
w
e
apply
the
induction
h
yp
othesis
to
 
(c).)
Exercise
	..
F
or
a
giv
en
form
ula
there
is
a
nite
n
um
b
er
of
p
ossible
replacemen
ts
of
existen
tially
quan
tied
v
ariables
b
y
constan
ts.
T
o
v
erify
pro
v
abilit
y
of
a
prenex
form
ula
one
c
hec
ks
pro
v
abilit
y
of
these
replacemen
ts
(pro
v
abilit
y
of
op
en
form
ulas
is
decidable,
lik
e
for
the
prop
ositional
case).
Exercise
	..
(In
tuitionistic
case)
The
argumen
t
is
of
course
as
follo
ws:
if
ev
ery
in
tuitionistic
rst-order
for-
m
ula
w
as
equiv
alen
t
to
a
prenex
form
ula,
then
in
tuitionistic
rst-order
logic
w
ould
b
e
decidable
b
y
the
previous
exercise.
Note
ho
w
ev
er
that
to
apply
this
argumen
t
one
needs
to
kno
w
that
the
translation
to
prenex
normal
form


Chapter
.
Solutions
and
hin
ts
to
selected
exercises
m
ust
b
e
eectiv
e,
and
w
e
can
assume
only
the
existence
of
a
prenex
form
ula
equiv
alen
t
to
an
y
giv
en
'.
But
one
can
eectiv
ely
list
all
pro
ofs
un
til
a
pro
of
of
'
$
 
,
for
a
prenex
form
ula
 
is
found,
and
this
giv
es
an
eectiv
e
translation.
Exercise
	..
Consider
the
form
ula
	x(P
(0)
_
P
()
!
P
(x)),
where
P
is
a
unary
predicate
sym
b
ol
and
0
and

are
constan
ts.
It
should
b
e
clear
that
no
form
ula
of
the
form
P
(0)
_
P
()
!
P
(t)
is
classically
v
alid.
The
pro
of
of
Corollary
	..
breaks
do
wn
in
the
\ob
vious"
and
omitted
part,
and
the
confusion
is
cre-
ated
b
y
the
principle
of
c
ontr
action
(t
w
o
o
ccurrences
of
the
same
form
ula
in
a
sequen
t
are
treated
as
a
single
o
ccurrence).
In
a
sequen
t
calculus
with
explicit
con
traction
rules,
the
last
rule
of
our
pro
of
w
ould
b
e
the
righ
t
con-
traction
rule.
In
our
v
ersion
of
sequen
t-calculus,
the
con
traction
is
implicit,
and
the
last
rule
m
ust
indeed
b
e
(	R).
But
the
premise
of
this
rule
ma
y
b
e
for
instance
of
the
form:
`
	x(P
(0)
_
P
()
!
P
(x));
P
(0)
_
P
()
!
P
();
b
ecause
a
classical
sequen
t
ma
y
ha
v
e
t
w
o
form
ulas
at
the
righ
t-hand
side.
The
second
last
rule
is
also
(	R)
with
premise
`
P
(0)
_
P
()
!
P
(0);
P
(0)
_
P
()
!
P
();
a
classical
pro
of
of
whic
h
should
b
e
easy
.
Exercise
	..
(Hin
t)
The
pro
of
is
similar
to
that
of
Prop
osition
...
Cho
ose
c

X
.
W
e
trans-
form
a
mo
del
A
where
relations
are
v
alued
o
v
er
P
(X
)
in
to
an
ordinary
mo
del

A,
b
y
dening
(a

;
:
:
:
;
a
n
)

r

A
i
c

r
A
(a

;
:
:
:
;
a
n
):
Both
our
mo
dels
ha
v
e
a
common
domain
A.
Let
v
b
e
a
v
aluation
in
A.
W
e
extend
v
to
terms
and
form
ulas
in
the
usual
w
a
y
(the
v
alues
of
form
ulas
range
o
v
er
P
(X
)).
One
pro
v
es
b
y
induction
the
follo
wing
claim:
c

v
(')
i

A;
v
j
=
';
for
all
'.
(Note
that
the
righ
t-hand
side
mak
es
sense,
b
ecause
v
can
also
b
e
regarded
as
ordinary
t
w
o-v
alued
v
aluation
in

A.)
Note
that
in
the
righ
t-to-
left
direction
in
the
case
of
,
one
uses
the
fact
that
lo
w
er
b
ounds
in
P
(X
)
are
actually
in
tersections
(if
c
b
elongs
to
all
sets
in
a
family
then
it
b
elongs
to
their
glb).

No
w
if
A;
v
j
=
'
then
there
is
c

v
('),
and
th
us

A;
v
j
=
'
as
w
ell.

One
has
to
use
ultralters
for
the
case
of
arbitrary
Bo
olean
algebras.


Exercise
	..
A
lgebr
aic
c
ounter
examples,
after
[
]
The
domain
of
individuals
A
is
the
set
of
all
p
ositiv
e
in
tegers.
The
Heyting
algebra
H
is
the
set
of
all
op
en
sets
of
R

.
W
e
tak
e
'
and
 
as
atomic
form
ulas
p(x)
and
q
(y
),
and
w
e
abbreviate
p(x)
A
(n)
b
y
P
(n)
and
q
(y
)
A
(m)
b
y
Q
(the
latter
will
not
dep
end
on
m).
The
sym
b
ol
w
i
denotes
the
i-th
p
oin
t
with
rational
co
ecien
ts,
according
to
some
xed
order.
)
T
ak
e
P
(n)
=
R

 fw
n
g,
a
full
space
without
one
rational
p
oin
t.
The
in
tersection
of
all
sets
P
(n)
is
R

with
all
rational
p
oin
ts
deleted.
This
set
has
an
empt
y
in
terior,
and
th
us
the
v
alue
of
the
form
ula
:x
p(x)
is
the
full
space.
On
the
other
hand,
the
complemen
t
in
H
of
ev
ery
P
(n)
is
empt
y
and
the
v
alue
of
the
form
ula
at
the
righ
t-hand
side
is
the
union
of
empt
y
sets.
)
Let
Q
b
e
the
whole
space
without
the
p
oin
t
(0;
0),
and
let
P
(n)
b
e
the
set
of
all
p
oin
ts
with
distance
from
(0;
0)
greater
than

n
(full
space
without
a
disk).
The
union
of
all
P
(n)'s
is
equal
to
Q,
and
the
v
alue
of
the
left-hand
side
is
Q
)
Q
=
R

.
But
Q
)
P
(n)
=
P
(n),
for
all
n,
and
the
union
of
these
sets
(the
v
alue
of
the
righ
t-hand
side)
do
es
not
con
tain
(0;
0).
)
T
ak
e
Q
as
ab
o
v
e
and
let
P
(n)
b
e
the
op
en
disk
cen
tered
at
(0;
0),
with
radius
equal
to

n
.
The
v
alue
of
the
left-hand
side
is
R

b
ecause
eac
h
set
Q
[
P
(n)
co
v
ers
the
whole
space.
The
v
alue
of
the
righ
t-hand
side
is
Q
b
ecause
the
glb
in
H
of
all
sets
P
(n)
is
empt
y
.
(Their
in
tersection
is
a
one-p
oin
t
set
whic
h
is
not
op
en.)
)
Let
Q
b
e
empt
y
,
and
let
P
(n)
b
e
as
in
().
The
v
alue
of
the
left-hand
side
is
the
full
space,
b
ecause
the
glb
of
all
sets
P
(n)
is
empt
y
.
But
the
v
alue
of
the
righ
t-hand
side
is
empt
y
.
0)
Let
P
(n)
b
e
as
in
()
and
().
Then

P
(n)
is
empt
y
and
th
us
P
(n)
[
P
(n)
=
P
(n).
The
in
tersection
of
these
sets
has
an
empt
y
in
terior,
th
us
the
v
alue
of
our
form
ula
is
empt
y
.
)
T
ak
e
P
(n)
=
A
for
ev
en
n
and
P
(n)
=
B
for
o
dd
n
where
A
and
B
are
complemen
tary
op
en
halv
es
of
the
space.
(Note
that
this
form
ula
has
a
prop
ositional
coun
terpart:
(p
_
q
!
p)
_
(p
_
q
!
q
),
whic
h
is
also
not
v
alid.)
Counter
examples
in
Kripke
mo
dels
)
Hin
t:
adopt
the
solution
of
Exercise
..	().


Chapter
.
Solutions
and
hin
ts
to
selected
exercises
)
Hin
t:
rst
mak
e
a
coun
terexample
for
the
prop
ositional
v
ersion
of
this
la
w:
(p
!
q
_
r
)
!
(p
!
q
)
_
(p
!
r
).
)
The
mo
del
consists
of
t
w
o
states
c

d,
with
A
c
=
fg
and
A
d
=
f;
g.
Let
c;


'(x)
and
c

 
,
and
let
d

 
and
d;


'(x),
but
d;


'(x).
Then
c

x( 
_
'(x)),
b
ecause
d;


 
,
but
c

 
_
x
'(x),
b
ecause
d;


'(x).
)
Generalize
().
0)
The
set
of
states
is
fc
n
:
n

N
g,
the
domain
for
eac
h
state
is
the
set
of
in
tegers,
and
c
i
;
j

'
if
and
only
if
j
>
i.
Then
c


::x('
_
:')
.
Otherwise
there
w
ould
b
e
c
i
with
c
i

x('
_
:'),
in
particular
c
i
;
i

'
_
:',
and
this
do
es
not
hold.
)
The
mo
del
consists
of
t
w
o
states
c

d,
with
A
c
=
fg
and
A
d
=
f;
g.
Let
c;


'(x),
and
let
d;


'(x)
and
d;


'(x).
Then
c

	x(	y
'(y
):
!
'(x)),
as
otherwise
c;


	y
'(y
):
!
'(x),
whic
h
implies
d;


'(x).
Exercise
	..	

	x('(x)
!
x
'(x))
Heyting
coun
terexample
as
for
Exercise
	..().
Kripk
e
coun
terexample
as
for
Exercise
	..().

	x('(0)
_
'()
!
'(x))
Similar
to
Exercise
	..().

x
::'(x):
$
::x
'(x)
Heyting
coun
terexample
as
for
Exercise
	..().
Kripk
e
coun
terexample
as
for
Exercise
	..(0).

	x
::'(x):
$
::	x
'(x).
Heyting
coun
terexample
as
for
Exercise
	..().
A
Kripk
e
coun
terexample
consists
of
three
states
c

d;
e
(with
d;
e
incomparable),
all
with
domain
f;
g.
The
forcing
relation
consists
only
of
d;


'(x)
and
e;


'(x).
Exercise
	..0
The
implication
from
righ
t
to
left
is
alw
a
ys
v
alid,
so
w
e
only
consider
the
implication
x( 
_
'(x))
!
 
_
x
'(x).
Assume
that
A
c
=
A
for
all
c
in
our
mo
del.
Let
c;
~
a

x( 
_
'(x)),
and
supp
ose
that
c;
~
a

 
.
Th
us
for
all
b

A
it
m
ust
b
e
that
c;
b;
~
a

'(x).
By
monotonicit
y
,
c
0
;
b;
~
a

'(x),
for
all
c
0

c.
It
follo
ws
that
c;
~
a

x
'(x).

	
Exercise
	..
First
observ
e
that
c
0
0
;
b;
~
a

'
_
:'
alw
a
ys
holds
if
c
00
is
a
maximal
state.
No
w
supp
ose
c;
~
a

::x('
_
:')
in
a
nite
Kripk
e
mo
del.
There
is
c
0

c
with
c
0
;
~
a

:x('
_
:').
T
ak
e
a
maximal
state
c
00

c
0
and
w
e
obtain
c
00
;
b;
~
a

'
_
:'.
Exercise
0..
Consider
a
logic
where
all
form
ulas
of
the
form
x
'
are
equiv
alen
t
to
true
.
Then
the
other
t
w
o
axioms
remain
sound
but
x
'(x):
!
'(t)
is
not
v
alid.
Exercise
..

x
(:(x
=
0)
!
	y
(x
=
y
+
))
W
e
use
induction
sc
heme
applied
to
the
form
ula
:(x
=
0)
!
	y
(x
=
y
+
).
This
means
w
e
ha
v
e
to
sho
w
that
the
follo
wing
form
ulas
are
pro
v
able:
:(0
=
0)
!
	y
(0
=
y
+
);
x
[(:(x
=
0)
!
	y
(x
=
y
+
))
!
:(x
+

=
0)
!
	y
(x
+

=
y
+
)],
and
then
it
suces
to
apply
mo
dus
p
onens
t
wice.
The
rst
form
ula
is
pro
v
en
with
help
of
the
rst
axiom,
whic
h
can
b
e
generalized
to
0
=
0.
The
second
form
ula
is
easily
deriv
ed
from
	y
(x
+

=
y
+
),
and
this
is
a
consequence
of
y
+

=
y
+

(rst
axiom).

xy
z
(x
=
y
!
y
=
z
!
x
=
z
);
This
is
an
instance
of
the
third
axiom.

xy
z
((x
+
y
)
+
z
=
x
+
(y
+
z
))
W
e
pro
v
e
z
((x
+
y
)
+
z
=
x
+
(y
+
z
))
b
y
induction
and
then
generalize
o
v
er
x
and
y
.
The
rst
step
is
(x
+
y
)
+
0
=
x
+
(y
+
0)
and
is
an
easy
application
of
the
axiom
x
(x
+
0
=
x)
and
the
transitivit
y
of
equalit
y
.
Then
w
e
m
ust
deriv
e
(x
+
y
)
+
(z
+
)
=
x
+
(y
+
(z
+
))
from
(x
+
y
)
+
z
=
x
+
(y
+
z
).
With
the
axiom
xy
(x
+
(y
+
)
=
(x
+
y
)
+
)
and
the
transitivit
y
of
equalit
y
,
w
e
can
formalize
the
calculation
(x
+
y
)
+
(z
+
)
=
((x
+
y
)
+
z
)
+

=
(x
+
(y
+
z
))
+

=
x
+
((y
+
z
)
+
)
=
x
+
(y
+
(z
+
)).

xy
(x
+
y
=
y
+
x)
Hin
t:
First
pro
v
e
b
y
induction
that
y
(0
+
y
=
y
+
0).
This
is
the
base
of
the
main
induction
(with
resp
ect
to
x).
The
induction
step
is
to
deriv
e
y
((x
+
)
+
y
=
y
+
(x
+
))
from
y
(x
+
y
=
y
+
x).
This
also
go
es
b
y
induction
(with
resp
ect
to
y
).
Ha
v
e
fun!

0
Chapter
.
Solutions
and
hin
ts
to
selected
exercises
Exercise
..
Supp
ose
a
function
f
is
represen
table
b
y
a
form
ula
'.
Then
f
is
strongly
represen
table
b
y
the
form
ula
 
(
~
x
;
y
)
=
(	!z
'(
~
x;
z
):
^
'(
~
x;
y
))
_
(:	!z
'(
~
x;
z
):
^
y
=
0):
W
e
sho
w
P
A
`

~
x
	!y
 
(
~
x
;
y
).
(Then
 
implies
'
and
represen
tabilit
y
follo
ws
easily
.)
Begin
with
P
A
`
#
_
:#,
where
#
=
	!z
'(
~
x;
z
).
Then
one
can
sho
w
that
P
A
`
#
!
	!y
(#
^
'(
~
x
;
y
))
and
P
A
`
:#
!
	!y
(:#
^
y
=
0).
Th
us
P
A
`
	!y
(#
^
'(
~
x
;
y
))
_
	!y
(:#
^
y
=
0)
and
it
remains
to
p
erm
ute
_
with
	!y
.
Exercise
..
By
translation,
w
e
ha
v
e
HA
`
::%
(note
that
t
f
(
~
x;
y
)
=
0
is
an
atomic
form
ula),
and
th
us
HA
`
(%
%
!
%)
!
%.
No
w,
the
form
ula
%
%
is
equiv
alen
t
to
%
(b
ecause
`
	y
( 
_
	y
 
)
$
	y
 
)
and
th
us
HA
`
(%
!
%)
!
%.
Then
HA
`
%,
b
ecause
`
%
!
%.
Exercise
..
(Hin
t)
Cf.
Exercise
	..0.
Exercise
..
F
or
a
mo
del
with
a
constan
t
domain
D
w
e
ha
v
e
c;
v

p
'
i
c;
v
x
p

';
for
all
x

D
:
(One
do
es
not
need
to
refer
to
c
0

c
b
ecause
of
monotonicit
y
.)
Exercise
..
This
exercise
con
tains
a
little
trap:
the
notion
of
a
complete
mo
del
refers
to
all
form
ulas,
including
those
con
taining
_,
^
and
	.
But
one
can
also
consider
Kripk
e
mo
dels
for
the
language
con
taining
only
!
and
,
satisfying
the
appropriate
(w
eak
er)
notion
of
completeness.
Then
the
seman
tics
of
the
form
ula

+

:=
((
!
)
!
(
!
)
!
)
do
es
not
ha
v
e
to
coincide
with
the
exp
ected
seman
tics
of

_

.
Indeed,
consider
a
mo
del
of
three
states
c
0
;
c

and
c

with
a
constan
t
domain
D
=
ff
g;
fc

g;
fc

g;
fc
0
;
c

;
c

gg
and
with
c


p
and
c


q
,
and
no
other
forcing.
This
mo
del
is
complete
with
resp
ect
to
!
and
,
and
w
e
ha
v
e
c
0

p
+
q
.
The
case
of
^
is
dieren
t:
if
a
mo
del
is
complete
with
resp
ect
to
!
and
,
then
c

((
!

!
)
!
)
i
c


and
c


.


Exercise
..
In
the
con
text
fy
:
?;
z
:

(
!

!

)g
one
can
deriv
e
z
y
z
:

.
No
w
consider
the
con
text
fy
:
?;
x
:

(
(
!

!

):
!

)
and
deriv
e
xx
:
?.
Th
us
our
term
has
t
yp
e

(
(
!

!

):
!

):
!
?
in
the
con
text
fy
:
?g.
Exercise
..
Think
of
t
yp
es
as
nite
binary
trees
with
lea
v
es
lab
eled
b
y
t
yp
e
v
ariables
and
in
ternal
no
des
corresp
onding
to
arro
ws).
Some
of
the
in
ternal
no
des
are
lab
eled
b
y
quan
tiers.
Supp
ose
that
xx
is
t
ypable
in
an
en
vironmen
t
con
taining
the
declara-
tion
(x
:

).
The
t
yp
e

m
ust
b
egin
with
one
or
more
univ
ersal
quan
tiers,
and
one
of
these
quan
tiers
m
ust
bind
a
t
yp
e
v
ariable
o
ccurring
at
the
v
ery
end
of
the
leftmost
path
of
the
t
yp
e.
(Otherwise
self-application
is
imp
ossi-
ble.)
Th
us,
a
t
yp
e
assigned
to
x:
xx
m
ust
ha
v
e
the
form
(
~

)
!

with
one
of
the
~
's
at
the
end
of
the
leftmost
path.
This
observ
ation
applies
to
b
oth
copies
of
x:
xx
whic
h
results
in
that
t
w
o
dieren
t
quan
tiers
attempt
to
bind
the
same
v
ariable
|
a
con
tradiction.
Exercise
..
(After
[
])
The
t
yp
e

assigned
to
K
m
ust
ha
v
e
the
form:

=

~
(
!

~

(
!

0
));
where

0
is
an
instance
of

.
The
righ
tmost
path
of

0
m
ust
b
e
at
least
as
long
as
the
righ
tmost
path
in

.
In
addition,
one
of
the
v
ariables
~
,
sa
y
,
m
ust
o
ccur
at
the
end
of
the
righ
tmost
path
in

.
The
same

m
ust
remain
at
the
end
of
the
righ
tmost
path
in
the
instance

0
,
at
the
same
depth.
The
t
yp
e
of
the
second
c

in
c

c

K
m
ust
ha
v
e
the
form

~

(
0
!
%),
where

can
b
e
obtained
from

0
b
y
instan
tiating
~

.
It
b
egins
with

~

and
has
o
ccurrences
of

at
the
same
places
as

do
es.
In
particular
there
is
an
o
ccurrence
of

at
some
depth
n
at
the
righ
tmost
path
of
the
left
subtree
of

0
and
at
depth
n
+

at
the
righ
tmost
path
of
the
righ
t
subtree
of

0
.
No
w,

0
is
the
t
yp
e
of
f
in
f
(f
x)
and
%
is
the
t
yp
e
of
x:
f
(f
x).
No
matter
what
is
the
t
yp
e
of
x,
w
e
can
note
that
the
asymetry
of

0
is
doubled
in
%,
and
th
us
the
righ
tmost
path
in
%
m
ust
b
e
of
length
at
least
n
+
.
Although

~

(
0
!
%)
ma
y
still
b
e
a
go
o
d
t
yp
e
for
c

,
a
term
of
this
t
yp
e
cannot
b
e
comp
osed
with
itself,
as
the
p
ositions
of

cannot
b
e
c
hanged
b
y
just
instan
tiating
~

.
Exercise
..(.)
An
innite
sequence
of
Ch
urc
h-st
yle
b
eta
reductions
M
i
!

M
i+
erases
to
an
innite
sequence
of
Curry-st
yle
terms
jM
i
j,
where
at
eac
h
step
w
e
either


Chapter
.
Solutions
and
hin
ts
to
selected
exercises
ha
v
e
jM
i
j
!

jM
i+
j
or
jM
i
j
=
jM
i+
j.
The
latter
case
m
ust
hold
for
almost
all
i,
and
is
only
p
ossible
when
almost
all
steps
M
i
!

M
i+
are
caused
b
y
t
yp
e
reductions
of
the
form
(:M
)
 !

M
[
:=

].
But
eac
h
of
these
steps
decreases
the
n
um
b
er
of
's
in
our
term,
so
this
pro
cess
m
ust
also
terminate.

Bibliograph
y
[]
A.R.
Anderson
and
N.A.
Belnap.
Entailment.
The
L
o
gic
of
R
elevanc
e
and
Ne
c
essity,
v
olume
I.
Princeton
Univ
ersit
y
Press,
	.
[]
A.R.
Anderson,
N.A.
Belnap,
and
J.M.
Dunn.
Entailment.
The
L
o
gic
of
R
elevanc
e
and
Ne
c
essity,
v
olume
I
I.
Princeton
Univ
ersit
y
Press,
		.
[]
T.
Arts.
Em
b
edding
rst
order
predicate
logic
in
second
order
prop
o-
sitional
logic.
Master's
thesis,
Katholiek
e
Univ
ersiteit
Nijmegen,
		.
[]
T.
Arts
and
W.
Dekk
ers.
Em
b
edding
rst
order
predicate
logic
in
second
order
prop
ositional
logic.
T
ec
hnical
Rep
ort
	-0,
Katholiek
e
Univ
ersiteit
Nijmegen,
		.
[]
S.
v
an
Bak
el,
L.
Liquori,
S
Ronc
hi
della
Ro
cca,
and
P
.
Urzyczyn.
Comparing
cub
es
of
t
yp
ed
and
t
yp
e
assignmen
t
systems.
A
nnals
of
Pur
e
and
Applie
d
L
o
gic,
:{0,
		.
[]
F.
Barbanera,
M.
Dezani-Ciancaglini,
and
U.
de'
Liguoro.
In
tersection
and
union
t
yp
es:
syn
tax
and
seman
tics.
Information
and
Computa-
tion,
	:0{0,
		.
[]
H.P
.
Barendregt.
The
L
amb
da
Calculus:
Its
Syntax
and
Semantics.
North-Holland,
second,
revised
edition,
	.
[]
H.P
.
Barendregt.
Lam
b
da
calculi
with
t
yp
es.
In
S.
Abramsky
,
D.M.
Gabba
y
,
and
T.S.E.
Maibaum,
editors,
Handb
o
ok
of
L
o
gic
in
Computer
Scienc
e,
v
olume
I
I,
pages
{0	.
Oxford
Univ
ersit
y
Press,
		.
[	]
H.P
.
Barendregt,
M.
Bunder,
and
W.
Dekk
ers.
Completeness
of
some
systems
of
illativ
e
com
binatory
logic
for
rst-order
prop
ositional
and
predicate
calculus.
T
o
app
ear
in
A
r
chive
f

ur
Mathematische
L
o
gik
,
		.
[0]
H.P
.
Barendregt,
M.
Bunder,
and
W.
Dekk
ers.
Completeness
of
the
prop
ositions-as-t
yp
es
in
terpretation
of
in
tuitionistic
logic
in
to
illativ
e
com
binatory
logic.
T
o
app
ear
in
the
Journal
of
Symb
olic
L
o
gic
,
		.



Bibliograph
y
[]
J.
Barwise.
Handb
o
ok
of
Mathematic
al
L
o
gic.
North-Holland,
	.
[]
S.
Berardi.
T
yp
e
Dep
endenc
e
and
Constructive
Mathematics.
PhD
thesis,
Univ
ersita
di
T
orino,
		0.
[]
M.
Bezem
and
J.
Springin
tv
eld.
A
simple
pro
of
of
the
undecidabilit
y
of
inhabitation
in
P
.
Journal
of
F
unctional
Pr
o
gr
amming,
():{
,
		.
[]
R.
Blo
o
and
K.
Rose.
Preserv
ation
of
strong
normalisation
in
named
lam
b
da
calculi
with
explicit
substitution
and
garbage
collection.
In
CSN
'	
-
Computer
Scienc
e
in
the
Netherlands,
pages
{,
		.
[]
V.
Breazu
T
annen,
D.
Kesner,
and
L.
Puel.
A
t
yp
ed
pattern
calculus.
In
L
o
gic
in
Computer
Scienc
e,
pages
{,
		.
[]
S.
Bro
da
and
L.
Damas.
On
principal
t
yp
es
of
stratied
com
binators.
T
ec
hnical
Rep
ort
DCC-	-,
Departamen
to
de
Cincia
de
Computa-
dores,
Univ
ersidade
do
P
orto,
		.
[]
L.E.J.
Brou
w
er.
In
tu

tionistisc
he
splitsing
v
an
mathematisc
he
grond-
b
egripp
en.
Ne
derl.
A
kad.
Wetensch.
V
erslagen,
:{0,
	.
[]
A.
Ch
urc
h.
A
form
ulation
of
the
simple
theory
of
t
yp
es.
Journal
of
Symb
olic
L
o
gic,
:{,
	0.
[	]
R.
Constable.
Constructiv
e
mathematics
and
automatic
program
writ-
ers.
In
Pr
o
c
e
ddings
of
the
IFIP
Congr
ess,
pages
	{,
Ljubljana,
	.
[0]
R.
Constable.
Programs
as
pro
ofs:
A
synopsis.
Information
Pr
o
c
essing
L
etters,
():0{,
	.
[]
H.B.
Curry
.
Grundlagen
der
Kom
binatorisc
hen
Logik.
teil
I.
A
meric
an
Journal
of
Mathematics,
LI
I:0	{,
	0.
[]
H.B.
Curry
.
Grundlagen
der
Kom
binatorisc
hen
Logik.
teil
I
I.
A
meri-
c
an
Journal
of
Mathematics,
LI
I:	{,
	0.
[]
H.B.
Curry
.
F
unctionalit
y
in
com
binatory
logic.
Pr
o
c
e
e
dings
of
the
National
A
c
ademy
of
Scienc
e
USA,
0:{	0,
	.
[]
H.B.
Curry
and
R.
F
eys.
Combinatory
L
o
gic.
North-Holland,
	.
[]
H.B.
Curry
,
J.R.
Hindley
,
and
J.P
.
Seldin.
Combinatory
L
o
gic
II,
v
olume

of
Studies
in
L
o
gic
and
the
F
oundations
of
Mathematics.
North-Holland,
	.
[]
D.
v
an
Dalen.
In
tuitionistic
logic.
In
Handb
o
ok
of
Philosophic
al
L
o
gic,
v
olume
I
I
I,
pages
{	.
Reidel
Publ.
Co.,
	.

Bibliograph
y

[]
L.
Damas
and
R.
Milner.
Principal
t
yp
e
sc
hemes
for
functional
pro-
grams.
In
Confer
enc
e
R
e
c
or
d
of
the
A
nnual
A
CM
SIGPLAN-SIGA
CT
Symp
osium
on
Principles
of
Pr
o
gr
amming
L
anguages,
pages
0{,
Jan.
	.
[]
N.G.
de
Bruijn.
A
surv
ey
of
the
pro
ject
A
UTOMA
TH.
In
Seldin
and
Hindley
[	
],
pages
	{0.
[	]
A.
Degt
y
arev
and
A.
V
oronk
o
v.
Decidabilit
y
problems
for
the
prenex
fragmen
t
of
in
tuitionistic
logic.
In
L
o
gic
in
Computer
Scienc
e,
pages
0{,
		.
[0]
W.
Dekk
ers.
Inhabitation
of
t
yp
es
in
the
simply
t
yp
ed
-calculus.
Information
and
Computation,
	:{,
		.
[]
G.
Do
w
ek.
The
undecidabilit
y
of
t
ypabilit
y
in
the
lam
b
da-pi-calculus.
In
M.
Bezem
and
J.F.
Gro
ote,
editors,
T
yp
e
d
L
amb
da
Calculus
and
Applic
ations,
v
olume

of
L
e
ctur
e
Notes
in
Computer
Scienc
e,
pages
	{.
Springer-V
erlag,
		.
[]
A.
Dragalin.
A
completeness
theorem
for
higher-order
in
tuitionistic
logic.
an
in
tuitionistic
pro
of.
In
D.
Sk
ordev,
editor,
Mathematic
al
L
o
gic
and
its
Applic
ations,
pages
0{.
Plen
um
Press,
New
Y
ork,
	.
[]
C.
Dw
ork,
P
.C.
Kanellakis,
and
J.C.
Mitc
hell.
On
the
sequen
tial
nature
of
unication.
Journal
of
L
o
gic
Pr
o
gr
amming,
:{0,
	.
[]
J.E.
F
enstad,
editor.
Pr
o
c.
Se
c
ond
Sc
andinavian
L
o
gic
Symp
osium.
North-Holland,
Amsterdam,
	.
[]
S.
F
ortune,
D.
Leiv
an
t,
and
M.
O'Donnell.
The
expresssiv
eness
of
simple
and
second-order
t
yp
e
structures.
Journal
of
the
Asso
ciation
for
Computing
Machinery,
0:{,
	.
[]
D.M.
Gabba
y
.
On
nd
order
in
tuitionistic
prop
ositional
calculus
with
full
comprehension.
A
r
chiv
f

ur
Mathematische
L
o
gik
und
Grund
lagen-
forschung,
:{,
	.
[]
D.M.
Gabba
y
.
Semantic
al
Investigations
in
Heyting's
Intuitionistic
L
o
gic.
D.
Reidel
Publ.
Co,
	.
[]
J.H.
Gallier.
Constructiv
e
logics,
part
I:
A
tutorial
on
pro
of
systems
and
t
yp
ed
-calculi.
The
or
etic
al
Computer
Scienc
e,
0:	{	,
		.
[	]
G.
Gen
tzen.
Un
tersuc
h
ungen

ub
er
das
logisc
he
Sc
hliessen.
Mathema-
tische
Zeitschrift,
	:{0,
0{,
	.


Bibliograph
y
[0]
J.H.
Geuv
ers.
Conserv
ativit
y
b
et
w
een
logics
and
t
yp
ed
lam
b
da-calculi.
In
H.
Barendregt
and
T.
Nipk
o
w,
editors,
T
yp
es
for
Pr
o
ofs
and
Pr
o-
gr
ams,
v
olume
0
of
L
e
ctur
e
Notes
in
Computer
Scienc
e,
pages
	{
0.
Springer-V
erlag,
		.
[]
J.H.
Geuv
ers.
L
o
gics
and
T
yp
e
Systems.
PhD
thesis,
Univ
ersit
y
of
Nijmegen,
		.
[]
J.H.
Geuv
ers
and
M.J.
Nederhof.
A
mo
dular
pro
of
of
strong
nor-
malization
for
the
calculus
of
constructions.
Journal
of
F
unctional
Pr
o
gr
amming,
():{	,
		.
[]
P
.
Giannini
and
S.
Ronc
hi
Della
Ro
cca.
Characterization
of
t
ypings
in
p
olymorphic
t
yp
e
discipline.
In
Pr
o
c.
Symp.
on
L
o
gic
in
Computer
Sciene,
pages
{0.
Computer
So
ciet
y
Press,
	.
[]
J.-Y.
Girard.
In
terpr

etation
fonctionelle
et

elimination
des
coupures
dans
l'arithm

etique
d'ordre
sup

erieur.
Th

ese
d'

Etat,
Univ
ersit

e
P
aris
VI
I,
	.
[]
J.-Y.
Girard.
The
system
F
of
v
ariable
t
yp
es,
fteen
y
ears
later.
The-
or
etic
al
Computer
Scienc
e,
:	{	,
	.
[]
J.-Y.
Girard,
Y.
Lafon
t,
and
P
.
T
a
ylor.
Pr
o
ofs
and
T
yp
es,
v
olume

of
Cambridge
T
r
acts
in
The
or
etic
al
Computer
Scienc
e.
Cam
bridge
Univ
ersit
y
Press,
		.
[]
C.A.
Goad.
Monadic
innitary
prop
ositional
logic.
R
ep
orts
on
Math-
ematic
al
L
o
gic,
0,
	.
[]
K.
G
odel.

ub
er
eine
bisher
no
c
h
nic
h
t
b
en

un
tze
erw
eiterung
des
niten
standpunktes.
Diale
ctic
a,
:0{,
	0.
(English
translation:
J.
Philos.
L
o
gic,
	:{,
	0.).
[	]
T.G.
Grin.
A
form
ulae-as-t
yp
es
notion
of
con
trol.
In
Confer
enc
e
R
e
c
or
d
of
the
A
nnual
A
CM
SIGPLAN-SIGA
CT
Symp
osium
on
Prin-
ciples
of
Pr
o
gr
amming
L
anguages,
pages
{.
A
CM
Press,
		0.
[0]
K.
Grue.
Map
theory
.
The
or
etic
al
Computer
Scienc
e,
0:{,
		.
[]
R.
Harp
er,
F.
Honsell,
and
F.
Plotkin.
A
framew
ork
for
dening
logics.
Journal
of
the
Asso
ciation
for
Computing
Machinery,
0():{,
		.
[]
H.
Herb
elin.
A
-calculus
structure
isomorphic
to
Gen
tzen-st
yle
se-
quen
t
calculus
structure.
In
Computer
Scienc
e
L
o
gic
		,
v
olume
	
of
L
e
ctur
e
Notes
in
Computer
Scienc
e,
pages
{.
Springer-V
erlag,
		.

Bibliograph
y

[]
A.
Heyting.
Mathematische
Grund
lagenforschung.
Intuitionismus.
Be-
weiste
orie.
Springer,
	.
[]
J.R.
Hindley
.
Basic
Simple
T
yp
e
The
ory,
v
olume

of
Cambridge
T
r
acts
in
The
or
etic
al
Computer
Scienc
e.
Cam
bridge
Univ
ersit
y
Press,
		.
[]
J.R.
Hindley
and
J.P
.
Seldin.
Intr
o
duction
to
Combinators
and
-
c
alculus.
Cam
bridge
Univ
ersit
y
Press,
	.
[]
S.
Hirok
a
w
a.
Principal
t
yp
es
of
BCK-lam
b
da
terms.
The
or
etic
al
Com-
puter
Scienc
e,
0:{,
		.
[]
J.
E.
Hop
croft
and
J.
D.
Ullman.
Intr
o
duction
to
A
utomata
The
ory,
L
anguages
and
Computation.
Addison-W
esley
,
		.
[]
W.
Ho
w
ard.
The
form
ulae-as-t
yp
es
notion
of
construction.
In
Seldin
and
Hindley
[	
],
pages
	{	0.
[	]
G.
Huet
and
G.
Plotkin.
L
o
gic
al
F
r
ameworks.
Cam
bridge
Univ
ersit
y
Press,
		.
[0]
S.C.
Kleene.
On
the
in
terpretation
of
in
tuitionistic
n
um
b
er
theory
.
Journal
of
Symb
olic
L
o
gic,
0:0	{,
	.
[]
S.C.
Kleene.
Intr
o
duction
to
Metamathematics.
V
an
Nostrand,
	.
[]
S.C.
Kleene.
Origins
of
recursiv
e
function
theory
.
A
nnals
of
the
History
of
Computing,
():{,
	.
[]
A.
Kolmogoro
v.
Zur
Deutung
der
in
tuitionistisc
hen
Logik.
Mathema-
tische
Zeitschrift,
:{,
	.
[]
G.
Kreisel.
Monadic
op
erators
dened
b
y
means
of
prop
ositional
quan-
tication
in
in
tuitionistic
logic.
R
ep
orts
on
Mathematic
al
L
o
gic,
:	{
,
	.
[]
P
.
Kremer.
On
the
complexit
y
of
prop
ositional
quan
tication
in
in
tu-
itionistic
logic.
Journal
of
Symb
olic
L
o
gic,
():	{,
		.
[]
J.-L.
Krivine.
L
amb
da-Calculus,
T
yp
es
and
Mo
dels.
Ellis
Horw
o
o
d
Se-
ries
in
Computers
and
their
Applications.
Masson
and
Ellis
Horw
o
o
d,
English
Edition,
		.
[]
M.
L
ob.
Em
b
edding
rst
order
predicate
logic
in
fragmen
ts
of
in
tu-
itionistic
logic.
Journal
of
Symb
olic
L
o
gic,
():0{,
	.
[]
H.G.
Mairson.
A
simple
pro
of
of
a
theorem
of
Statman.
The
or
etic
al
Computer
Scienc
e,
0():{	,
		.


Bibliograph
y
[	]
S.D.
Marlo
w.
Defor
estation
for
Higher-Or
der
F
unctional
L
anguages.
PhD
thesis,
Univ
ersit
y
of
Glasgo
w,
		.
[0]
E.
Mendelson.
Intr
o
duction
to
Mathematic
al
L
o
gic.
W
adsw
oth
&
Bro
oks/Cole
Adv
anced
Bo
oks
and
Soft
w
are,
third
edition,
	.
[]
E.
Mendelson.
Intr
o
duction
to
Mathematic
al
L
o
gic.
Chapman
&
Hall,
London,
fourth
edition,
		.
[]
R.
Milner.
A
theory
of
t
yp
e
p
olymorphism
in
programming.
Journal
of
Computer
and
System
Scienc
es,
:{,
	.
[]
J.
Mitc
hell.
P
olymorphic
t
yp
e
inference
and
con
tainmen
t.
Information
and
Contr
ol,
:{	,
	.
[]
J.C.
Mitc
hell.
F
oundations
for
Pr
o
gr
amming
L
anguages.
MIT
Press,
Cam
bridge,
		.
[]
C.R.
Murth
y
.
Extr
acting
Constructive
Contents
fr
om
Classic
al
Pr
o
ofs.
PhD
thesis,
Cornell
Univ
ersit
y
,
		0.
[]
C.R.
Murth
y
.
Con
trol
op
erators,
hierac
hies,
and
pseudo-classical
t
yp
e
systems:
A-translation
at
w
ork.
In
A
CM
SIGPLAN
Workshop
on
Continuations,
		.
[]
B.
Norstr
om,
K.
P
etersson,
and
J.M.
Smith.
Pr
o
gr
amming
in
Martin-
L
of
's
T
yp
e
The
ory,
A
n
Intr
o
duction.
Oxford
Univ
ersit
y
Press,
		0.
[]
C.-H.
L.
Ong.
A
seman
tic
view
of
classical
pro
ofs:
T
yp
e-theoretic,
categorical,
and
denotational
c
haracterizations.
In
L
o
gic
in
Computer
Scienc
e,
pages
0{,
		.
[	]
M.
P
arigot.
F
ree
deduction:
An
analysis
of
\computations"
in
classical
logic.
In
Se
c
ond
R
ussian
Confer
enc
e
on
L
o
gic
pr
o
gr
amming,
v
olume
	
of
L
e
ctur
e
Notes
in
A
rticial
Intel
ligenc
e,
pages
{0.
Springer-
V
erlag,
		.
[0]
M.
P
arigot.
-calculus:
An
algorithmic
in
terpretation
of
classical
natural
deduction.
In
International
Confer
enc
e
on
L
o
gic
Pr
o
gr
amming
and
A
utomate
d
R
e
asoning,
v
olume

of
L
e
ctur
e
Notes
in
Computer
Scienc
e,
pages
	0{0.
Springer-V
erlag,
		.
[]
M.
P
arigot.
Classical
pro
ofs
as
programs.
In
Kurt
G
odel
Col
lo
quium,
v
olume

of
L
e
ctur
e
Notes
in
Computer
Scienc
e,
pages
{.
Springer-V
erlag,
		.
[]
M.
P
arigot.
Strong
normalization
for
second
order
classical
natural
deduction.
In
L
o
gic
in
Computer
Scienc
e,
		.

Bibliograph
y
	
[]
G.
Plotkin.
Call-b
y-name,
call-b
y-v
alue
and
the
-calculus.
The
or
etic
al
Computer
Scienc
e,
:{	,
	.
[]
G.
P
ottinger.
Normalization
as
a
homomorphic
image
of
cut-
elimination.
A
nnals
of
Mathematic
al
L
o
gic,
:{,
	.
[]
D.
Pra
witz.
Natur
al
De
duction:
A
Pr
o
of
The
or
etic
al
Study.
Almquist
&
Wiksell,
	.
[]
D.
Pra
witz.
Some
results
for
in
tuitionistic
logic
with
second
order
quan
tication.
pages
	{0.
North-Holland,
Amsterdam,
	0.
[]
D.
Pra
witz.
Ideas
and
results
of
pro
of
theory
.
In
F
enstad
[
],
pages
{0.
[]
H.
Rasio
w
a
and
R.
Sik
orski.
The
Mathematics
of
Metamathematics.
PWN,
W
arsa
w,
	.
[	]
N.J.
Rehof
and
M.H.
Srensen.
The


calculus.
In
M.
Hagiy
a
and
J.
Mitc
hell,
editors,
The
or
etic
al
Asp
e
cts
of
Computer
Softwar
e,
v
olume
	
of
L
e
ctur
e
Notes
in
Computer
Scienc
e,
pages
{.
Springer-
V
erlag,
		.
[	0]
J.
Reynolds.
T
o
w
ards
a
theory
of
t
yp
e
structure.
In
B
Robinet,
edi-
tor,
Pr
o
c
e
e
dings
of
the
Pr
o
gr
amming
Symp
osium,
v
olume
	
of
L
e
ctur
e
Notes
in
Computer
Scienc
e,
pages
0{.
Springer-V
erlag,
	.
[	]
A.
Rezus.
Classical
pro
ofs:
Lam
b
da
calculus
metho
ds
in
elemen
tary
pro
of
theory
,
		.
Man
uscript.
[	]
A.
Rezus.
Bey
ond
BHK,
		.
Man
uscript.
[	]
J.A.
Robinson.
A
mac
hine-orien
ted
logic
based
on
the
resolution
prin-
ciple.
Journal
of
the
Asso
ciation
for
Computing
Machinery,
():{
,
	.
[	]
J.B.
Rosser.
Highligh
ts
of
the
history
of
the
lam
b
da-calculus.
A
nnals
of
the
History
of
Computing,
():{	,
	.
[	]
A.
Sc
h
ub
ert.
Second-order
unication
and
t
yp
e
inference
for
c
h
urc
h-
st
yle
p
olymorphism.
In
Pr
o
c.
th
A
CM
Symp
osium
on
Principles
of
Pr
o
gr
amming
L
anguages,
pages
{,
Jan
uary
		.
[	]
H.
Sc
h
wic
h
ten
b
erg.
Elimination
of
higher
t
yp
e
lev
els
in
denitions
of
primitiv
e
recursiv
e
function
b
y
means
of
transnite
recursion.
In
H.E.
Rose,
editor,
L
o
gic
Col
lo
quium
',
pages
	{0.
North-Holland,
	.

0
Bibliograph
y
[	]
H.
Sc
h
wic
h
ten
b
erg.
Denierbare
Funktionen
im
Lam
b
da-Kalkul
mit
Typ
en.
A
r
chiv
L
o
gik
Grund
lagenforsch.,
:{,
	.
[	]
J.P
.
Seldin
and
J.R.
Hindley
,
editors.
T
o
H.B.
Curry:
Essays
on
Combinatory
L
o
gic,
L
amb
da
Calculus
and
F
ormalism.
Academic
Press
Limited,
	0.
[		]
D.
Skv
ortso
v.
Non-axiomatizable
second-order
in
tuitionistic
prop
osi-
tional
logic.
A
nnals
of
Pur
e
and
Applie
d
L
o
gic,
:{,
		.
[00]
S.K.
Sob
olev.
On
the
in
tuitionistic
prop
ositional
calculus
with
quan-
tiers
(russian).
Mat.
Zamietki
AN
SSSR,
():	{,
	.
[0]
M.H.
Srensen.
Normalization
in
-Calculus
and
T
yp
e
The
ory.
PhD
thesis,
Departmen
t
of
Computer
Science,
Univ
ersit
y
of
Cop
enhagen,
		.
[0]
M.H.
Srensen.
Strong
normalization
from
w
eak
normalization
in
t
yp
ed
-calculi.
Information
and
Computation,
():{,
		.
[0]
R.
Statman.
In
tuitionistic
prop
ositional
logic
is
p
olynomial-space
com-
plete.
The
or
etic
al
Computer
Scienc
e,
	:{,
		.
[0]
W.W.
T
ait.
In
tensional
in
terpretations
of
functionals
of
nite
t
yp
e
I.
Journal
of
Symb
olic
L
o
gic,
():	0{,
	.
[0]
W.W.
T
ait.
A
realizabilit
y
in
terpretation
of
the
theory
of
sp
ecies.
In
R.
P
arikh,
editor,
L
o
gic
Col
lo
quium,
v
olume

of
L
e
ctur
e
Notes
in
Mathematics,
pages
0{.
Springer-V
erlag,
	.
[0]
A.S.
T
ro
elstra.
Metamathematic
al
Investigation
of
Intuitionistic
A
rith-
metic
and
A
nalysis,
v
olume

of
L
e
ctur
e
Notes
in
Mathematics.
Springer-V
erlag,
	.
[0]
A.S.
T
ro
elstra
and
D.
v
an
Dalen.
Constructivism
in
Mathematics,
A
n
Intr
o
duction,
V
olume
I,
v
olume

of
Studies
in
L
o
gic
and
the
F
oundations
of
Mathematics.
North-Holland,
	.
[0]
A.S.
T
ro
elstra
and
D.
v
an
Dalen.
Constructivism
in
Mathematics,
A
n
Intr
o
duction,
V
olume
II,
v
olume

of
Studies
in
L
o
gic
and
the
F
oundations
of
Mathematics.
North-Holland,
	.
[0	]
A.S.
T
ro
elstra
and
H.
Sc
h
wic
h
ten
b
erg.
Basic
Pr
o
of
The
ory,
v
olume

of
Cambridge
T
r
acts
in
The
or
etic
al
Computer
Scienc
e.
Cam
bridge
Univ
ersit
y
Press,
		.
[0]
J.
T
yszkiewicz.
Z 
lo
_
zono

s

c
problem
u
wypro
w
adzania
t
yp
ow
w
rac
h
unku
lam
b
da.
Master's
thesis,
W
arsa
w,
	.

Bibliograph
y

[]
P
.
Urzyczyn.
P
ositiv
e
recursiv
e
t
yp
e
assigmen
t.
In
J.
Wiedermann
and
P
.
H
ajek,
editors,
Mathematic
al
F
oundations
of
Computer
Scienc
e,
v
olume
		
of
L
e
ctur
e
Notes
in
Computer
Scienc
e,
pages
{	.
Springer-V
erlag,
		.
[]
P
.
Urzyczyn.
T
yp
e
inhabitation
in
t
yp
ed
lam
b
da
calculi
(a
syn
tactic
approac
h).
In
de
Gro
ote
P
.
and
J.R.
Hindley
,
editors,
T
yp
e
d
L
amb
da
Calculus
and
Applic
ations,
v
olume
0
of
L
e
ctur
e
Notes
in
Computer
Scienc
e,
pages
{	.
Springer-V
erlag,
		.
[]
R.
V
estergaard.
The
cut
rule
and
explicit
substitutions.
Man
uscript,
		.
[]
A.
V
oronk
o
v.
Pro
of
searc
h
in
in
tuitionistic
logic
with
equalit
y
or
bac
k
to
sim
ultaneous
rigid
E-unication.
In
M.A.
Mc
Robbie
and
J.K.
Slaney
,
editors,
CADE-,
v
olume
0
of
L
e
ctur
e
Notes
in
Computer
Scienc
e,
pages
{.
Springer-V
erlag,
		.
[]
P
.L.
W
adler.
Deforestation:
T
ransforming
programs
to
eliminate
in-
termediate
trees.
The
or
etic
al
Computer
Scienc
e,
:{,
		0.
[]
P
.L.
W
adler.
A
Curry-Ho
w
ard
isomorphism
for
sequen
t
calculus.
Man
uscript,
		.
[]
J.
W
ells.
T
ypabilit
y
and
t
yp
e
c
hec
king
in
the
second-order
-calculus
are
equiv
alen
t
and
undecidable.
In
Pr
o
c.
Symp.
on
L
o
gic
in
Computer
Sciene,
pages
{.
IEEE,
Computer
So
ciet
y
,
Computer
So
ciet
y
Press,
		.
[]
J.I.
Zuc
k
er.
Corresp
ondence
b
et
w
een
cut-elimination
and
normaliza-
tion.
A
nnals
of
Mathematic
al
L
o
gic,
:{,
	.

