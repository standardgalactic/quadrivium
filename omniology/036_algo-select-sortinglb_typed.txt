Linear-­‐Time	  
Selec.on	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Theorem	  :	  every	  “comparison-­‐based”	  sor.ng	  algorithm	  has	  worst-­‐
case	  running	  .me	  
[	  assume	  determinis.c,	  but	  lower	  bound	  extends	  to	  randomized	  ]	  
Comparison-­‐Based	  Sort	  :	  accesses	  input	  array	  elements	  only	  via	  
comparisons	  ~	  “general	  purpose	  sor.ng	  method”	  
Examples	  :	  Merge	  Sort,	  Quick	  Sort,	  Heap	  Sort	  
Non	  Examples	  :	  Bucket	  Sort,	  Coun.ng	  Sort,	  Radix	  Sort	  
A	  Sor.ng	  Lower	  Bound	  
Good	  for	  data	  
	  	  good	  for	  small	  integers	  
from	  distribu.ons
	  
	  	  	  
	  	  	  	  	  	  	  	  	  good	  for	  medium-­‐	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  
	  
	  
	  
	  	  	  	  	  	  	  	  	  size	  integers	  

Tim	  Roughgarden	  
Proof	  Idea	  
Fix	  a	  comparison-­‐based	  sor.ng	  method	  and	  an	  array	  length	  n	  
⇒ Consider	  input	  arrays	  containing	  {1,2,3,…,n}	  in	  some	  order.	  
⇒ 	  	  n!	  such	  inputs	  
Suppose	  algorithm	  always	  makes	  <=	  k	  comparisons	  to	  correctly	  sort	  
these	  n!	  inputs.	  
=>	  Across	  all	  n!	  possible	  inputs,	  algorithm	  	  
exhibits	  <=	  2k	  dis.nct	  execu.ons	  
	  i.e.,	  resolu.on	  of	  the	  comparisons	  

Tim	  Roughgarden	  
Proof	  Idea	  (con’d)	  
By	  the	  Pigeonhole	  Principle	  :	  if	  2k	  <	  n!,	  execute	  
iden.cally	  on	  two	  dis.nct	  inputs	  =>	  must	  get	  one	  of	  
them	  incorrect.	  
So	  :	  Since	  method	  is	  correct,	  	  

