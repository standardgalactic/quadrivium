Alex Aiken 
Compilers 
Predictive Parsing 

Alex Aiken 
Predictive Parsers 
• Like recursive-descent but parser can “predict” which 
production to use 
– By looking at the next few tokens 
– No backtracking  
 
• Predictive parsers accept LL(k) grammars 

Alex Aiken 
Predictive Parsing 
• In recursive descent,  
– At each step, many choices of production to use 
– Backtracking used to undo bad choices 
 
• In LL(1),  
– At each step, only one choice of production 
 
 

Alex Aiken 
Predictive Parsing 
• Recall the grammar 
      E  T + E | T 
      T  int  | int * T | ( E ) 
 
• Hard to predict because 
– For T two productions start with int 
– For E it is not clear how to predict 
 
• We need to left-factor the grammar 

Alex Aiken 
Predictive Parsing 
• Recall the grammar 
      E  T + E | T 
      T  int  | int * T | ( E ) 
 

Choose the alternative that correctly left 
factors “if” statements in the given grammar 
EXPR   if true then { EXPR } 
 
 
 
| if false then { EXPR } 
   
 
|   if true then { EXPR } else { EXPR } 
 
 
 
|  if false then { EXPR } else { EXPR } 
 
 
 
| … 
EXPR   if BOOL then { EXPR } EXPR’ 
 
 
 
| … 
EXPR’  else { EXPR } |  
BOOL  true | false 
EXPR   if BOOL then { EXPR } 
   
 
|   if BOOL then { EXPR } else { EXPR } 
 
 
 
| … 
BOOL  true | false 
EXPR   EXPR’ | EXPR’ else { EXPR }  
EXPR’  if BOOL then { EXPR } 
 
 
 
| … 
BOOL  true | false 
EXPR   if BOOL EXPR’ 
 
 
 
| … 
EXPR’  then { EXPR } 
 
 
 
| then { EXPR } else { EXPR } 
BOOL  true | false 
Predictive Parsing 

Alex Aiken 
Predictive Parsing 
• Left-factored grammar 
E  T X                               X  + E |   
T  ( E ) | int Y                   Y  * T |   
• The LL(1) parsing table: 
int 
* 
+ 
( 
) 
$ 
E 
T X 
T X 
X 
+ E 
 
 
T 
int Y 
( E ) 
Y 
* T  
 
 
 
leftmost non-terminal 
next input token 
rhs of production to use 

Alex Aiken 
Predictive Parsing 
• Consider the [E, int] entry 
– “When current non-terminal is E and next input is 
int, use production  E   T X” 
 
int 
* 
+ 
( 
) 
$ 
E 
T X 
T X 
X 
+ E 
 
 
T 
int Y 
( E ) 
Y 
* T  
 
 
 

Alex Aiken 
Predictive Parsing 
• Consider the [Y,+] entry 
– “When current non-terminal is Y and current 
token is +, get rid of Y” 
– Y can be followed by + only if Y    
 
int 
* 
+ 
( 
) 
$ 
E 
T X 
T X 
X 
+ E 
 
 
T 
int Y 
( E ) 
Y 
* T  
 
 
 

Alex Aiken 
Predictive Parsing 
• Consider the [E,*] entry 
– “There is no way to derive a string starting with * 
from non-terminal E” 
 
int 
* 
+ 
( 
) 
$ 
E 
T X 
T X 
X 
+ E 
 
 
T 
int Y 
( E ) 
Y 
* T  
 
 
 

Alex Aiken 
Predictive Parsing 
•
Method similar to recursive descent, except 
– For the leftmost non-terminal S 
– We look at the next input token a 
– And choose the production shown at [S,a] 
 
•
A stack records frontier of parse tree 
– Non-terminals that have yet to be expanded 
– Terminals that have yet to matched against the input 
– Top of stack = leftmost pending terminal or non-terminal 
 
•
Reject on reaching error state 
•
Accept on end of input & empty stack  
 

Alex Aiken 
Predictive Parsing 
initialize stack = <S $> and next  
repeat 
   case stack of 
      <X, rest>  : if T[X,*next] = Y1…Yn 
                            then stack  <Y1… Yn rest>; 
                            else  error ();    
      <t, rest>   : if t == *next ++  
                            then  stack  <rest>; 
                            else error (); 
until stack == < > 

Alex Aiken 
Predictive Parsing 
Stack                        Input                            Action 
E $                            int * int $                     T X 
T X $                        int * int $                      int Y 
int Y X $                   int * int $                      terminal 
Y X $                        * int $                            * T 
* T X $                     * int $                            terminal 
T X $                        int $                               int Y 
int Y X $                   int $                               terminal 
Y X $                        $                                      
X $                           $                                      
$                              $                                     ACCEPT 

Predictive Parsing 
Choose the next parse state given the grammar, parse table, and 
current state below. The initial string is: 
 
if true then { true } else { if false then { false } } $ 
if 
then 
else 
{ 
} 
true 
false 
$ 
E 
if B then { E } E’ 
 
B 
B 
 
E’ 
else { E } 
 
 
B 
true 
false 
E    if B then { E } E’ 
   |  B |  
E’  else { E } |  
B   true | false 
    Stack          Input           
Current E’ $           else { if false then { false } } $      
     $             $        
 
 
 
 
     else { E } $        else { if false then { false } } $  
 
 
 
 
     E } $           if false then { false } } $    
 
     else {if B then { E } E’ } $   else { if false then { false } } $  

