© 2019 MathByte Academy

Python Dictionaries are ubiquitous
Python dictionaries are everywhere you look!
namespaces
classes
modules
functions
and of course, your own dicts
Dictionaries are such an important part of Python that a lot of time and effort was put into
making them as efficient as possible
key sharing
compact dictionaries
sets
© 2019 MathByte Academy

Key Sharing
class Person:
def __init__(self, name, age):
self.name = name
self.age = age
john = Person('John', 78) 
eric = Person('Eric', 75) 
michael = Person('Michael', 75) 
john
['name', 'John']
['age', 78]
eric
['name', 'Eric']
['age', 75]
michael
['name', 'Michael']
['age', 75]
à multiple instances of the same class
PEP 412
à instance attribute names are the same
'name'
'age'
['John', 'Eric', 'Michael']
[78,      75,     75]
à split-table dictionary
john
eric
michael
© 2019 MathByte Academy

Compact Dictionaries
['john', John]
['eric', Eric]
['alex', Alex]
[
['—', '—', '—'],
[-6350376054362344353, 'john', John],
['—', '—', '—'],
[4939205761874899982, 'alex, Alex],
['—', '—', '—'],
['—', '—', '—'],
[6629767757277097963, 'eric', Eric]
]
wasted space
{'alex': Alex, 'john': John, 'eric': Eric}
0
1
2
3
4
5
6
values = [[4939205761874899982, 'alex, Alex],
[-6350376054362344353, 'john', John],
[6629767757277097963, 'eric', Eric]]
1
3
6
[None, 1, None, 0, None, None, 2]
indices = 
1
3
6
hash('alex') à
hash('john') à
hash('eric') à
key order
different from
insertion order
key order
same as
insertion order
3
1
6
(simplified – in 
reality we may 
have collisions!)
© 2019 MathByte Academy

