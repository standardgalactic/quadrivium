
IET CONTROL, ROBOTICS AND SENSORS SERIES 86
Flexible Robot Manipulators

Other volumes in this series:
Volume 8
A History of Control Engineering, 1800–1930 S. Bennett
Volume 18
Applied Control Theory, 2nd Edition J.R. Leigh
Volume 20
Design of Modern Control Systems D.J. Bell, P.A. Cook and N. Munro (Editors)
Volume 28
Robots and Automated Manufacture J. Billingsley (Editor)
Volume 33
Temperature Measurement and Control J.R. Leigh
Volume 34
Singular Perturbation Methodology in Control Systems D.S. Naidu
Volume 35
Implementation of Self-tuning Controllers K. Warwick (Editor)
Volume 37
Industrial Digital Control Systems, 2nd Edition K. Warwick and D. Rees (Editors)
Volume 39
Continuous Time Controller Design R. Balasubramanian
Volume 40
Deterministic Control of Uncertain Systems A.S.I. Zinober (Editor)
Volume 41
Computer Control of Real-time Processes S. Bennett and G.S. Virk (Editors)
Volume 42
Digital Signal Processing: Principles, devices and applications N.B. Jones and J.D.McK. Watson
(Editors)
Volume 44
Knowledge-based Systems for Industrial Control J. McGhee, M.J. Grimble and A. Mowforth (Editors)
Volume 47
A History of Control Engineering, 1930–1956 S. Bennett
Volume 49
Polynomial Methods in Optimal Control and Filtering K.J. Hunt (Editor)
Volume 50
Programming Industrial Control Systems Using IEC 1131-3 R.W. Lewis
Volume 51
Advanced Robotics and Intelligent Machines J.O. Gray and D.G. Caldwell (Editors)
Volume 52
Adaptive Prediction and Predictive Control P.P. Kanjilal
Volume 53
Neural Network Applications in Control G.W. Irwin, K. Warwick and K.J. Hunt (Editors)
Volume 54
Control Engineering Solutions: A practical approach P. Albertos, R. Strietzel and N. Mort (Editors)
Volume 55
Genetic Algorithms in Engineering Systems A.M.S. Zalzala and P.J. Fleming (Editors)
Volume 56
Symbolic Methods in Control System Analysis and Design N. Munro (Editor)
Volume 57
Flight Control Systems R.W. Pratt (Editor)
Volume 58
Power-plant Control and Instrumentation: The control of boilers and HRSG systems D. Lindsley
Volume 59
Modelling Control Systems Using IEC 61499 R. Lewis
Volume 60
People in Control: Human factors in control room design J. Noyes and M. Bransby (Editors)
Volume 61
Nonlinear Predictive Control: Theory and practice B. Kouvaritakis and M. Cannon (Editors)
Volume 62
Active Sound and Vibration Control M.O. Tokhi and S.M. Veres
Volume 63
Stepping Motors, 4th Edition P.P. Acarnley
Volume 64
Control Theory, 2nd Edition J.R. Leigh
Volume 65
Modelling and Parameter Estimation of Dynamic Systems J.R. Raol, G. Girija and J. Singh
Volume 66
Variable Structure Systems: From principles to implementation A. Sabanovic, L. Fridman and
S. Spurgeon (Editors)
Volume 67
Motion Vision: Design of compact motion sensing solution for autonomous systems J. Kolodko
and L. Vlacic
Volume 68
Flexible Robot Manipulators: Modelling, simulation and control M.O. Tokhi and A.K.M. Azad (Editors)
Volume 69
Advances in Unmanned Marine Vehicles G. Roberts and R. Sutton (Editors)
Volume 70
Intelligent Control Systems Using Computational Intelligence Techniques A. Ruano (Editor)
Volume 71
Advances in Cognitive Systems S. Nefti and J. Gray (Editors)
Volume 72
Control Theory: A guided tour, 3rd Edition J.R. Leigh
Volume 73
Adaptive Sampling with Mobile WSN K. Sreenath, M.F. Mysorewala, D.O. Popa and F.L. Lewis
Volume 74
Eigenstructure Control Algorithms: Applications to aircraft/rotorcraft handling qualities
design S. Srinathkumar
Volume 75
Advanced Control for Constrained Processes and Systems F. Garelli, R.J. Mantz and H. De Battista
Volume 76
Developments in Control Theory towards Glocal Control L. Qiu, J. Chen, T. Iwasaki and H. Fujioka
(Editors)
Volume 77
Further Advances in Unmanned Marine Vehicles G.N. Roberts and R. Sutton (Editors)
Volume 78
Frequency-Domain Control Design for High-Performance Systems J. O’Brien
Volume 80
Control-oriented Modelling and Identification: Theory and practice M. Lovera (Editor)
Volume 81
Optimal Adaptive Control and Differential Games by Reinforcement Learning Principles
D. Vrabie, K. Vamvoudakis and F. Lewis
Volume 83
Robust and Adaptive Model Predictive Control of Nonlinear Systems M. Guay, V. Adetola and
D. DeHaan
Volume 84
Nonlinear and Adaptive Control Systems Z. Ding
Volume 88
Distributed Control and Filtering for Industrial Systems M. Mahmoud
Volume 89
Control-based Operating System Design A. Leva et al.
Volume 90
Application of Dimensional Analysis in Systems Modelling and Control Design P. Balaguer
Volume 91
An Introduction to Fractional Control D. Vale´rio and J. Costa
Volume 92
Handbook of Vehicle Suspension Control Systems H. Liu, H. Gao and P. Li
Volume 93
Design and Development of Multi-Lane Smart Electromechanical Actuators F.Y. Annaz
Volume 94
Analysis and Design of Reset Control Systems Y.Guo, L. Xie and Y. Wang
Volume 95
Modelling Control Systems Using IEC 61499, 2nd Edition R. Lewis and A. Zoitl
Volume 96
Cyber-Physical System Design with Sensor Networking Technologies S. Zeadally and N. Jabeur
(Editors)
Volume 99
Practical Robotics and Mechatronics: Marine, Space and Medical Applications I. Yamamoto
Volume 100
Organic Sensors: Materials and Applications E. Garcia-Breijo and P. Cosseddu (Editors)
Volume 102
Recent Trends in Sliding Mode Control L. Fridman, J.-P. Barbot and F. Plestan (Editors)
Volume 104
Control of Mechatronic Systems L. Guvenc, B.A. Guvenc, B. Demirel and M.T Emirler
Volume 105
Mechatronic Hands: Prosthetic and Robotic Design P.H. Chappell
Volume 107
Solved Problems in Dynamical Systems and Control D. Vale´rio, J. T Machado, A.M. Lopes and
A.M. Galhano

Flexible Robot Manipulators
Modelling, Simulation and Control
2nd Edition
M.O. Tokhi and A.K.M. Azad
The Institution of Engineering and Technology

Published by The Institution of Engineering and Technology, London, United Kingdom
The Institution of Engineering and Technology is registered as a Charity in England &
Wales (no. 211014) and Scotland (no. SC038698).
† The Institution of Engineering and Technology 2017
First Edition published 2008
Second Edition published 2017
This publication is copyright under the Berne Convention and the Universal Copyright
Convention. All rights reserved. Apart from any fair dealing for the purposes of research
or private study, or criticism or review, as permitted under the Copyright, Designs and
Patents Act 1988, this publication may be reproduced, stored or transmitted, in any
form or by any means, only with the prior permission in writing of the publishers, or in
the case of reprographic reproduction in accordance with the terms of licences issued
by the Copyright Licensing Agency. Enquiries concerning reproduction outside those
terms should be sent to the publisher at the undermentioned address:
The Institution of Engineering and Technology
Michael Faraday House
Six Hills Way, Stevenage
Herts SG1 2AY, United Kingdom
www.theiet.org
While the authors and publisher believe that the information and guidance given in this
work are correct, all parties must rely upon their own skill and judgement when making
use of them. Neither the authors nor publisher assumes any liability to anyone for any
loss or damage caused by any error or omission in the work, whether such an error or
omission is the result of negligence or any other cause. Any and all such liability is
disclaimed.
The moral rights of the authors to be identified as authors of this work have been
asserted by them in accordance with the Copyright, Designs and Patents Act 1988.
British Library Cataloguing in Publication Data
A catalogue record for this product is available from the British Library
ISBN 978-1-84919-583-6 (hardback)
ISBN 978-1-84919-584-3 (PDF)
Typeset in India by MPS Limited
Printed in the UK by CPI Group (UK) Ltd, Croydon

Contents
Foreword
xiii
Abbreviations
xv
Notation
xix
1
Flexible manipulators – an overview
1
1.1
Introduction
1
1.2
Modelling and simulation techniques
3
1.3
Control techniques
5
1.3.1
Passive control
5
1.3.2
Open-loop control
6
1.3.3
Closed-loop control
7
1.3.4
Artificial intelligence control
10
1.4
Flexible manipulator systems
13
1.4.1
Typical flexible manipulator systems
13
1.4.2
Flexible manipulators for industrial applications
15
1.4.3
Multi-link flexible manipulators
16
1.4.4
Two-link flexible manipulators
16
1.4.5
Single-link flexible manipulators
19
1.5
Applications
21
1.6
Summary
22
2
Design of a flexible manipulator experimental system
23
2.1
Introduction
23
2.2
Manipulator design procedure
24
2.2.1
Strength and stiffness of a flexible manipulator
25
2.2.2
Safety factor
27
2.2.3
Summary of a flexible manipulator strength design
28
2.3
Transducers and instrumentation
28
2.3.1
Drive actuator
29
2.3.2
Selection of motor and gear ratio
30
2.3.3
Drive amplifier
37
2.3.4
Joint angle sensor and signal conditioning
40
2.3.5
Joint velocity sensor and amplifier
43
2.3.6
Strain gauge and amplifier
45
2.3.7
Measurement of hub inertia
46
2.3.8
Accelerometer and amplifier
49

2.4
Problems and findings
50
2.4.1
Noise/interference
50
2.4.2
Gearbox
50
2.4.3
Torque measurement
51
2.5
Computer, interfacing and software
51
2.5.1
RTI-815 board
52
2.5.2
A/D TRAM: adt102
52
2.5.3
D/A TRAM: dat202
53
2.6
Summary
53
3
Dynamic characterisation of a single-link flexible manipulator
55
3.1
Introduction
55
3.2
Dynamic equations of the system
57
3.2.1
The flexible manipulator system
57
3.2.2
Energies associated with the system
58
3.2.3
The dynamic equations of motion
59
3.3
Mode shapes
61
3.4
State–space model
62
3.5
Transfer function model
64
3.6
Case study 3.1: experimentation
65
3.6.1
Natural frequencies
67
3.6.2
Damping ratios
71
3.6.3
Modal gain
75
3.6.4
Model validation
76
3.7
Summary
77
4
Finite difference modelling
79
4.1
Introduction
79
4.2
Flexible manipulator system
79
4.3
Finite difference background
82
4.4
Finite difference for flexible manipulator
84
4.4.1
The hub displacement
84
4.4.2
The end-point displacement
85
4.4.3
Matrix formulation
86
4.4.4
State–space formulation
87
4.5
Case studies
88
4.5.1
Case study 4.1: flexible manipulator without hub
inertia and payload
88
4.5.2
Case study 4.2: flexible manipulator with hub
inertia and no payload
92
4.5.3
Case study 4.3: flexible manipulator with hub
inertia and payload of 10 g
96
4.5.4
Case study 4.4: resonance frequency of the flexible
manipulator
100
4.6
Summary
103
vi
Flexible robot manipulators: modelling, simulation and control

5
Finite element modelling
115
5.1
Introduction
115
5.2
Finite element background
115
5.3
Finite element for flexible manipulator
116
5.3.1
Incorporating hub inertia and payload
119
5.3.2
State–space representation
120
5.4
Case studies
120
5.4.1
Case study 5.1: simulated system with various
FE elements
122
5.4.2
Case study 5.2: simulated system with damping
and no payload
123
5.4.3
Case study 5.3: simulated system with damping
and payload
128
5.5
Model validation
133
5.6
Summary
141
6
Linear parametric modelling
143
6.1
Introduction
143
6.2
Least mean squares algorithm
144
6.3
Recursive least squares algorithm
145
6.4
Genetic algorithm
146
6.4.1
GA fundamentals
147
6.4.2
Major GA elements and their modification
148
6.5
Model validation
152
6.6
Case studies
153
6.6.1
System model and input signal
153
6.6.2
Case study 6.1: modelling with LMS algorithm
155
6.6.3
Case study 6.2: modelling with RLS algorithm
155
6.6.4
Case study 6.3: modelling with GA
162
6.7
Summary
167
7
Neural network modelling
173
7.1
Introduction
173
7.2
Neural networks
174
7.2.1
MLP neural network
175
7.2.2
RBF neural network
180
7.3
Modelling with NN
184
7.4
Model validation techniques
185
7.4.1
One-step ahead prediction
185
7.4.2
Model predicted output
185
7.4.3
Estimation set and test set
186
7.4.4
Correlation tests
186
7.5
Data pre-processing
187
Contents
vii

7.6
Case studies
188
7.6.1
Case study 7.1: MLP-NN modelling using
composite PRBS input
188
7.6.2
Case study 7.2: RBF-NN modelling using
composite PRBS input
192
7.6.3
Case study 7.3: MLP-NN modelling using white
noise input
202
7.6.4
Case study 7.4: RBF-NN modelling using white
noise input
216
7.6.5
Comparative assessment
218
7.7
Summary
227
8
Open-loop control using command generation techniques
229
8.1
Introduction
229
8.2
Identification of natural frequencies
230
8.2.1
Analytical approach
231
8.2.2
Experimental approach
231
8.2.3
Genetic modelling
232
8.2.4
Neural modelling
233
8.2.5
Natural frequencies from the genetic
and neural modelling
234
8.3
Gaussian-shaped torque input
235
8.4
Input torque shaping
238
8.5
Filtered torque input
241
8.6
Case studies
242
8.6.1
Case study 8.1: unshaped bang–bang torque input
243
8.6.2
Case study 8.2: shaped torque input
245
8.6.3
Case study 8.3: Gaussian-shaped input
247
8.6.4
Case study 8.4: filtered torque input
248
8.6.5
Case study 8.5: system with payload
251
8.6.6
Comparative performance assessment
253
8.7
Summary
258
9
Collocated and non-collocated control
261
9.1
Introduction
261
9.2
Joint-based collocated control
263
9.2.1
Case study 9.1: simulation exercise
263
9.2.2
Case study 9.2: experimental exercise
264
9.3
Collocated and non-collocated feedback control
with PD and PID
265
9.3.1
Case study 9.3: simulation exercises
266
9.4
Adaptive joint-based collocated control
270
9.4.1
Case study 9.4: simulation exercises
274
9.4.2
Case study 9.5: experimental exercises
276
viii
Flexible robot manipulators: modelling, simulation and control

9.5
Adaptive collocated and non-collocated control
276
9.5.1
Case study 9.6: simulation exercises
278
9.5.2
Case study 9.7: experimental exercises
278
9.6
Collocated and non-collocated feedback control
with PD and neuro-inverse-model
280
9.6.1
Case study 9.8: simulation exercises
285
9.7
Summary
289
10 Hybrid iterative learning control
293
10.1
Introduction
293
10.2
Iterative learning control schemes
296
10.3
Simulation and experimental realisation of the control
schemes
300
10.3.1
Case study 10.1: collocated PD and PD-type
learning control
300
10.3.2
Case study 10.2: collocated PD and non-collocated
PID control
302
10.3.3
Case study 10.3: hybrid ILC with end-point
acceleration feedback
310
10.4
Summary
320
11 Fuzzy logic control
321
11.1
Introduction
321
11.2
Fuzzy logic control structure
321
11.2.1
Fuzzification
322
11.2.2
Inference mechanism
322
11.2.3
Rule-base
325
11.2.4
Defuzzification
329
11.3
Design of fuzzy controller
330
11.3.1
Input–output selection
331
11.3.2
Choice of membership functions
331
11.3.3
Creation of rule-base
332
11.4
Case studies
332
11.4.1
Case study 11.1: PD-like FLC
333
11.4.2
Case study 11.2: PI-like FLC
334
11.4.3
Case study 11.3: integral wind-up action
338
11.4.4
Case study 11.4: switching PD–PI-like FLC
340
11.5
Summary
345
12 Multi-objective genetic algorithm control
347
12.1
Introduction
347
12.2
Multi-objective optimisation
347
12.3
Evolutionary multi-objective algorithms
348
12.3.1
Non-dominated sorting genetic algorithm
349
12.3.2
Niched-Pareto genetic algorithm
349
Contents
ix

12.3.3
Multi-objective genetic algorithm
349
12.3.4
Strength Pareto evolutionary algorithm
350
12.3.5
Strength Pareto evolutionary algorithm 2
350
12.3.6
Pareto archived evolution strategy
350
12.3.7
Non-dominated sorting genetic algorithm II
350
12.4
Multi-objective genetic algorithm
351
12.4.1
Evaluation and ranking
351
12.4.2
Fitness assignment
352
12.4.3
Fitness sharing
352
12.5
Vibration control of single-link flexible manipulator
355
12.6
Controller design using MOGA
355
12.7
Case study 12.1: multi-modal command shaping for
open-loop control
356
12.7.1
Design problem and MOGA-based command
shaping technique
358
12.7.2
Implementation
360
12.7.3
Non-dominated solution set and results
364
12.8
Case study 12.2: multi-modal command shaping
for closed-loop control
370
12.8.1
Design objectives
371
12.8.2
Implementation
372
12.9
Summary
377
13 Multi-objective particle swarm optimisation control
379
13.1
Introduction
379
13.2
Particle swarm optimisation algorithms
379
13.2.1
The original PSO algorithm
380
13.2.2
Binary PSO algorithms
382
13.2.3
Topologies
382
13.2.4
Some variants of PSO
382
13.3
Multi-objective particle swarm optimisation
384
13.4
Multi-objective PSO algorithms
385
13.4.1
Selection of gbest
386
13.4.2
The archive controller
388
13.4.3
An adaptive grid
389
13.4.4
Fitness sharing
389
13.4.5
Selection of pbest
392
13.4.6
Steps of the MOPSO algorithm
393
13.5
Case study: design of command shaping for vibration
control
394
13.5.1
Implementation
395
13.5.2
Parameter encoding
395
13.5.3
Objective functions
395
13.5.4
Solutions and results
396
13.6
Summary
401
x
Flexible robot manipulators: modelling, simulation and control

14 Evolutionary neuro-fuzzy control
403
14.1
Introduction
403
14.2
Evolutionary fuzzy control
404
14.2.1
PD–PI-like fuzzy control
406
14.3
GA-fuzzy control
408
14.3.1
Chromosome representation
410
14.3.2
Objective function
413
14.3.3
Evaluation
415
14.3.4
Initialisation
415
14.3.5
Crossover
415
14.3.6
Mutation
416
14.3.7
Selection
416
14.3.8
Case study 14.1: GA-fuzzy control scheme
417
14.4
Neuro-fuzzy control
418
14.4.1
Parameters of PD–PI fuzzy controller
421
14.4.2
Tuning of membership functions
422
14.4.3
Reducing the number of scaling parameters
422
14.4.4
Neural network tuning of the scaling factors
423
14.4.5
Backpropagation learning of neural network
424
14.4.6
Learning with non-linear activation function
425
14.4.7
Case study 14.2: neuro-fuzzy control scheme
427
14.5
GA-based neuro-fuzzy control
431
14.5.1
Integration of fuzzy logic, neural networks
and genetic algorithms
431
14.5.2
Sigmoid function shape learning
432
14.5.3
Neural network learning using genetic algorithms
433
14.5.4
Case study 14.3: GA-neuro-fuzzy control scheme
435
14.6
Summary
438
15 Software environment for modelling and control
of flexible manipulators
439
15.1
Introduction
439
15.2
Flexible manipulator system
439
15.3
SCEFMAS structure
441
15.4
FD simulation and control
443
15.4.1
FD simulation algorithm
444
15.4.2
Controller designs
444
15.5
Intelligent modelling
444
15.5.1
NN modelling
444
15.5.2
GA modelling
445
15.6
Graphical user interfaces
445
15.7
SCEFMAS implementation
446
15.7.1
Initial GUI
446
15.7.2
Open-loop FD simulation
450
15.7.3
Open-loop control
453
15.7.4
Closed-loop control
454
Contents
xi

15.8
Intelligent modelling
461
15.8.1
NN modelling
462
15.8.2
GA modelling
464
15.9
Web-based SCEFMAS
468
15.10 Summary
471
References
473
Index
501
xii
Flexible robot manipulators: modelling, simulation and control

Foreword
The ever-increasing utilisation of robotic manipulators in various applications has
been motivated by the requirements and demands of industrial automation. Among
the rigid and flexible manipulator types, attention is focused more on flexible
manipulators. This is due to various advantages such manipulators offer when
compared to their rigid counterparts. Exploitation of the potential benefits and
capabilities of rigid and flexible manipulators introduces a further emerging line of
research in which hybrid rigid-flexible manipulator structures are considered.
Flexural dynamics (vibration) in flexible manipulators has been the main
research challenge in the modelling and control of such systems. Accordingly,
research activities in flexible manipulators have looked into the development of
methodologies to cope with the flexural motion dynamics of such systems.
A considerable amount of research on the development of dynamic models of
flexible manipulators has been carried out. These have led to descriptions in the
form of either partial differential equations, or finite-dimensional ordinary differ-
ential equations. From a control perspective, an input/output characterisation of the
system is desired, which can be obtained through suitable on-line estimation and
adaptation mechanisms. Given the dynamic nature of flexible manipulator systems,
the practical realisation of such methodologies present new challenges.
Numerical techniques using finite difference and finite element methods have
been researched for dynamic characterisation of flexible manipulators. Accordingly,
simulation algorithms characterising the dynamic behaviour of flexible manipulators
have been developed which provide flexible means of analysis, test and verification
of control techniques. With the widely available use of digital computing technology,
such platforms are first-step favoured option in a wide range of applications.
Control structures adopted for flexible manipulators can broadly be grouped into
open-loop and closed-loop types. Although, the mathematical theory of open-loop
control is well established, only a limited number of successful applications in the
control of distributed parameter flexible manipulator systems have been reported.
A further research dimension, with this class of control structures, is on-line adapta-
tion of the input shaping mechanism with the changing behaviour of the system and
the environment. With closed-loop control techniques, a common trend that has been
adopted by researchers is partitioning of the dynamics of the system into the slow
(rigid-body) and fast (flexural motion) dynamics and accordingly devising separate
control loops. An important consideration with this has been to adequately cope
with the non-minimum phase behaviour exhibited by the system characterisation,
which with optimal feedback control techniques leads to unstable control. Although

this problem can be avoided with some traditional techniques, emerging intelligent
control methodologies incorporating soft computing paradigms offer a great deal of
potential in solving such problems.
This book reports recent advances and new developments in analysis (model-
ling and simulation) and control of flexible robot manipulators, in the light of the
issues mentioned above. The contents of the book are presented in 15 chapters, and
these may be categorised into five parts. Part 1 comprises Chapters 1 and 2, and
provides a general overview of flexible manipulators from the perspective of mod-
elling, simulation, control and applications a design formulation of flexible manip-
ulators. Part 2 is on modelling and simulation techniques. It includes Chapters 3–7,
and presents classical modelling techniques based on the Lagrange equation for-
mulation, parametric approaches based on linear input/output models using system
identification techniques, neuro-modelling approaches, and numerical modelling/
simulation techniques for dynamic characterisation of flexible manipulators using
finite difference and finite element techniques. Part 3 is on classical and advanced
control techniques. Chapters 8–10 are grouped into this section, and includes a
range of open-loop and closed-loop control techniques based on classical and
modern control methods including neuro and iterative control. Part 4 includes
Chapters 11–14, and presents a range of soft-computing control techniques based
on fuzzy logic, neural networks, and evolutionary and bio-inspired optimisation
paradigms. Part 5 includes Chapter 15, and presents a software environment for
analysis, design, simulation and control of flexible manipulators. A range of
approaches presented in earlier chapters are brought together in this chapter into an
interactive software environment for use in both in research and education.
The book is intended for teaching in graduate courses on robotics, mecha-
tronics, control, electrical and mechanical engineering. It can also serve as a source
of reference for research in areas of modelling, simulation and control of dynamic
flexible structures in general and, specifically, of flexible robotic manipulators.
M.O. Tokhi
London South Bank University, UK
A.K.M. Azad
Northern Illinois University, USA
January 2017
xiv
Flexible robot manipulators: modelling, simulation and control

Abbreviations
A/D
Analogue/digital
ADAM
Aerospace dual-arm flexible manipulator
ARMAX
Autoregressive moving average with exogeneous inputs
ARX
Autoregressive with exogenous inputs
AVQ
Adaptive vector quantisation
CACE
Computer aided control engineering
CCD
Charged coupled device
CS
Command shaper
D/A
Digital to analogue
DOF
Degrees of freedom
EAP
Electroactive polymer
EI
Extra insensitive
EMI
Electromagnetic interference
ERLS
Equivalent rigid link system
FD
Finite difference
FE
Finite element
FLC
Fuzzy logic control
FRF
Frequency response function
GA
Genetic algorithm
GOCF
Generalised observability canonical form
IAE
Integral of absolute error
ILC
Iterative learning control
IMSC
Independent modal space control
ISE
Integral of square error
ITAE
Integral of time weighted absolute error
JBC
Joint-based collocated
LMS
Least mean squares
LQR
Linear quadratic regulator
LRMS
Long-reach manipulator system

MCO
Motor current output
MLP
Multi-layered perceptron
MNN
Modular neural network
MOEA
Multi-objective evolutionary algorithm
MOGA
Multi-objective genetic algorithm
MOPSO
Multi-objective PSO
MPO
Model predicted output
NARMAX
Non-linear autoregressive moving average with exogeneous inputs
NARX
Non-linear autoregressive with exogeneous inputs
NB
Negative big
NN
Neural network
NPGA
Niched-Pareto genetic algorithm
NS
Negative small
NSGA
Non-dominated sorting genetic algorithm
OSA
One step-ahead
PAES
Pareto archived evolution strategy
PB
Positive big
PD
Proportional, derivative
PDE
Partial differential equation
PI
Proportional, integral
PID
Proportional, integral, derivative
PRBS
Pseudo-random binary sequence
PS
Positive small
PSD
Power spectral density
PSO
Particle sward optimisation
RBF
Radial basis function
RLS
Recursive least squares
RMS
Remote manipulator system
RVDT
Rotary variable differential transformer
SCEFMAS
Simulation and control environment for flexible manipulator systems
SISO
Single-input single output
SM
Symbolic manipulation
SMG
Symbolic model generator
SMA
Shape memory alloy
SPEA
Strength Pareto evolutionary algorithm
SSRMS
Space station remote manipulator system
xvi
Flexible robot manipulators: modelling, simulation and control

SUS
Stochastic universal sampling
TVAC
Time-varying acceleration coefficients
VEGA
Vector evaluated genetic algorithm
VSC
Variable structure control
ZV
Zero-vibration
ZVD
Zero vibration derivative
Abbreviations
xvii

This page intentionally left blank 

Notation
a
Thickness of beam
b
Width of beam and of smart material
ai; bi; ci
Constants, parameters, coefficients of polynomials
ap
Absolute linear acceleration vector of point p expressed in the
body reference frame
an, ak
Absolute linear acceleration vector of the body reference frame
and of the cross-section reference frame, expressed in the body
reference frame
aij
Matrix element
A
Cross-sectional area
An
Generalised acceleration vector of body reference frame n
A; B; C
System state matrices
bm
j
Bias on the jth neuron of the mth layer
Bno; P Bno
A body and its surface in the reference undeformed configuration
B 2 R3
Magnetic flux density vector
cM 2 R66
Symmetric matrix of elastic stiffness coefficients of the beam
cS 2 R66
Symmetric matrix of elastic stiffness coefficients of the smart
material
c1
Thickness of upper surface smart material patch
cM
11
Stiffness of the beam
cS
11
Stiffness of the piezoelectric material
c2
Thickness of lower surface smart material patch
cL1
Stiffness per unit length of the beam
cL2
Stiffness per unit length of the smart material
C; Cn
Kinetic energy, capacitance
Ca
Actuator voltage constant
Cs
Sensor voltage constant
d
Constant
di
Components of the displacement gradient strain vector
d31
Piezoelectric charge constant

D
Damping matrix
D
Displacement gradient strain vector at a beam cross section
Dðx; tÞ 2 R3
Electrical displacement at location x and time t
e
Error
_e
Change in error
e1, e2, e3
Unit vectors along the axis of the cross-section reference frame,
expressed in the body reference frame
E1, E2, E3
Unit vectors along the axis of the body reference frame, expres-
sed in the inertial reference frame
E
Young modulus
Ea
Actuating layer Young’s modulus
Ek
System kinetic energy
Ep
System potential energy
E 2 R3
Electrical field intensity vector
E :½ 
Expectation
fn
Natural frequency in Hz
fs
Force per unit area applied on the surface of a beam
fn, f^n
Force per unit area applied on the base and tip of a beam
fSBno
Force per unit area applied on the lateral faces of a beam
excluding the edges of the first and last cross section
FðtÞ
Force function
Fn, Mn
Resulting external force and moment applied at the origin of the
body reference frame
FSBno, MSBno
Resulting external force and moment per unit length applied at
the origin of the cross-section reference frame
F^n, M^n
Resulting external force and moment applied at the origin of the
tip cross-section reference frame
FM 2 R6
Simplified stress vector of the beam
FS 2 R6
Simplified stress vector of the smart material
g
Number of generation in genetic algorithms
g
Gravitational acceleration vector expressed in the body reference
frame
gmax
Maximum number of generation in genetic algorithms
g31
Piezoelectric stress constant
G
Green–Lagrange strain tensor
G
Half Young modulus, G ¼ E/2
Gb
Green–Lagrange strain vector at a beam cross section
GðsÞ
Transfer function (continuous)
xx
Flexible robot manipulators: modelling, simulation and control

h 2 R63
Coupling coefficients matrix
h12
Coupling parameter per unit volume of the piezoelectric material
hL
Coupling parameter per unit length of the smart material robot
Hðx; tÞ 2 R3
Magnetic field intensity at location x and time t
H
Depth/height of arm/link
Hð jwÞ
Frequency response function
Hnw, Hnv
Rotation and translation Jacobian matrices of joint n
i
Constants, index, polynomial/model order
I
Area moment of inertia
I
Identity matrix
Ih
Hub inertia
Ip
Inertia associated with payload
IT
Total inertia Ih þ l3rA=3
ð
Þ
j
Constants,
index,
polynomial/model
order,
unit
imaginary
number
J
Cost function
J
kJ expressed in the body reference frame
J, I2, I3
Torsional and bending geometric moments of inertia
JRek
Elastic rotation Jacobian of the kth cross section
Jn
Second moment of inertia tensor of rigid body n expressed in the
body reference frame
JTk
Elastic translation Jacobian of the kth cross section
k
Constant, index
kJ
Geometrical moments of inertia tensor of a cross-section relative
to and expressed in the cross-section reference frame
Kc
Control output scaling factor
K
Stiffness matrix
Kk
Vector of bending curvatures expressed in the cross-section
reference frame
Kn
Elemental stiffness matrix
k31
Piezoelectric electromagnetic coupling constant
K1, K2, K3
Components of Kk. K1 is the torsional strain, and K2 and K3 are
the bending strains
Kp; Ki; Kd
Proportional, integral, derivative parameters in PID control
Kv
Derivative gain in PD control
l
Elemental length
L
Length of arm/link
Lg
Lagrangian
Notation
xxi

m
Total number of NNs in an MNN
m3
Payload at end-point
M
Mass matrix
Mn
Elemental mass matrix
Men
Mass matrix of flexible beam n
Maðx; tÞ
Local moment induced in beam by piezoelectric actuating layer
Mp
Payload mass
mij
Elements of mass matrix
n
Constant, number of elements, number of modes
N
Constant, number of samples
Nn
Coriollis and centrifugal force terms of body n
N en
Generalised force vector contemplating nonlinear inertial forces,
linear elastic forces and the generalised external forces applied
on the boundary of the beam
NðxÞ; NaðxÞ
Shape function vector
O
Origin of Cartesian coordinate system
OI; XIYIZI
f
g
Inertial reference frame
On; XnYnZn
f
g
Body n reference frame
Ok; XkYkZk
f
g
Beam cross-section k reference frame
OX1Y1
Local reference frame with axis OX1 tangential to the beam at the
base
OX0Y0
Fixed base frame
p
Constant, pole
Pc
Crossover probability
Pm
Mutation probability
Pcd
Dynamic crossover probability
Pmd
Dynamic mutation probability
P; Pn
Potential energy
qen
Global vector of the elastic generalised coordinates of a beam
qKn
Vector of pure bending displacement and pure torsion angle
generalised coordinates
qjn
Vector of pure shear displacement generalised coordinates
qnw, qnv
Vectors of angular and linear position parameters of joint n
Q tð Þ; Qa tð Þ
Nodal displacement vector
Q tð Þ
Total charge in sensing layer
q x; t
ð
Þ
Charge distribution in sensing layer
r
Position vector of point P expressed in the fixed base frame
xxii
Flexible robot manipulators: modelling, simulation and control

r
Reference input
rn
Position vector of body reference frame n relative to and
expressed in the inertial reference frame
rp
Position vector of material point p relative to and expressed in the
inertial reference frame
rn1;n
Vector describing the position of body n relative to body n  1,
expressed in body n  1 reference frame
Rn
Rotation matrix from the inertial reference frame to body n
reference frame
Rek
Rotation matrix from body n reference frame to cross section k
reference frame
Rn=n1
Orthogonal rotation matrix expressing the rotation of body n
relative to body n  1
s
Laplace variable
S 2 R6
Simplified strain vector
t
Time (continuous)
t, kt
Tangent vector to the beam neutral fibre expressed in the body
reference frame, and expressed in the cross-section reference
frame
ta; tb; tc
Respective thicknesses of piezoelectric actuator, beam and pie-
zoelectric sensor
T
Total elapsed time of the desired trajectory
T n
Generalised control force vector at joint n
u
Plant input, control output
vðx; tÞ
Voltage applied to the piezoelectric actuator
VaðÞ
Actuator voltage
VsðÞ
Sensor voltage
v
System state
vp
Absolute linear velocity vector of point p expressed in the body
reference frame
vn, vk
Absolute linear velocity vector of the body reference frame and
of the cross-section reference frame, expressed in the body
reference frame
Vn
Generalised velocity vector of body reference frame n
w
Elastic deflection
wm
ij
Connection weight between the ith neuron of the m  1
ð
Þth layer
and the jth neuron of the mth layer
wðx; tÞ
Deflection at location x and time t
W
Width of arm/link, Virtual work done by non-conservative forces
x
Distance from hub along the arm/link
Notation
xxiii

Xgn
Centre of mass of rigid body n, relative to and expressed in the
body reference frame
X; Y; Z
Moving coordinate system
Xo; Yo; Zo
Fixed coordinate system
Xp, xp, up
Reference position, displaced position and displacement vector
of a material point p, expressed in the body reference frame
Xk, xk, uk
Reference position, displaced position and displacement vector
of a material point on the beam neutral axis, expressed in the
body reference frame
X1, X2, X3
Material coordinates of a body
y
Plant output, total displacement, actual output
Yp
Position vector of material point p in a given cross section,
relative to and expressed in the cross-section frame
^y
Estimated/predicted output
z
z-transform variable, zero
~Z
Skew symmetric matrix formed with the components of a given
vector Z
Z1
Unit left-shift
a
End-point acceleration, Pure torsion angle
ak
Absolute angular acceleration vector of a cross section expressed
in the body reference frame
b
Flexural rigidity
b 2 R33
Symmetric matrix of impermittivity coefficients
b22
Impermittivity per unit volume of the piezoelectric material
bL
Impermittivity per unit length of the smart material robot
d
Variational operator of the Principle of Virtual Powers
gi
Pure shear deflections
Gk
Strain vector of the beam neutral axis expressed in the cross-
section reference frame
G1, G2, G3
Components of Gk. G1 is the longitudinal strain, and G2 and G3
are the transverse Timoshenko shear strains
l
Number of correctly classified pattern
y
Number of connections in the MNN
ec
Strain in sensing layer
eij
Components of the Green–Lagrange strain tensor
fi
Element of shape function vector
j12, j13
Shear angles as defined in the classical theory of elasticity
F n
Generalised force vector applied at the origin of body reference
frame n
xxiv
Flexible robot manipulators: modelling, simulation and control

FT
nþ1;n
Matrix transforming generalised forces applied at n þ 1 to gen-
eralised forces applied at n
q, qðtÞ
Hub/joint angle
_q
Hub/joint angular velocity
Joint angle at the hub
qdðtÞ
Desired joint angular trajectory
r
Mass density per unit volume
rp
Specific mass of a beam at point p
rA
Mass of a beam per unit length
r1
Mass per unit volume of the beam
r2
Mass per unit volume of the smart material
rL1
Mass per unit length of the beam
rL2
Mass per unit length of the smart material
s
Piola–Kirchoff stress vector at a beam cross section
d
Variational operator of the Principle of Virtual Powers
m 2 R33
Permeability coefficients matrix
m33
Permeability of the piezoelectric material
mL
Permeability per unit length of the smart material robot
sa
Longitudinal stress in actuating layer
t
Torque
ts
Sample period
tðtÞ
Torque applied to the base of the manipulator
u
End-point residual
ui
Pure bending deflections
uix, ax, gix
Vectors of shape functions for the pure elastic deflections
uit, at, git
Vectors of the elastic generalised coordinates
w
Frequency in radian
wc
Cut-off frequency in radian
wn
Natural frequency in radian
wn=n1
Vector describing the angular velocity of body n relative to body
n  1 expressed in body n reference frame
wn, wk
Absolute angular velocity vector of the body reference frame and
of the cross-section reference frame, expressed in the body
reference frame
Wk
Angular velocity vector of the cross-section reference frame
relative to the body reference frame, expressed in the body
reference frame
Notation
xxv

Lk
Absolute angular acceleration matrix of a cross section expressed
in the body reference frame
z; zi
Damping ratio
xi
Slope parameter of the activation function of ith NN output
tanhðxÞ
Activation function of hidden neurons
tanhðxixÞ
Activation function of NNi output
s2
e
Variance of variable e
ðÞrfrn
Vector or matrix, referring to rigid-flexible-rigid body n
xxvi
Flexible robot manipulators: modelling, simulation and control

Chapter 1
Flexible manipulators – an overview
This chapter presents a general overview of modelling, simulation and control
approaches of flexible manipulators. Sample selection flexible manipulator experi-
mental systems are introduced and their features and design merits are described.
A structured overview of common applications and future research prospects and
applications of flexible and hybrid manipulators are also provided.
1.1
Introduction
Flexible manipulator systems offer several advantages in contrast to their traditional
rigid counterparts. These include faster system response, lower energy consumption,
requiring relatively smaller actuators, reduced nonlinearity due to elimination of
gearing, less overall mass and, in general, less overall cost. However, due to the
distributed nature of the governing equations describing dynamics of such systems,
the control of flexible manipulators has traditionally involved complex processes
(Aubrun, 1980; Book et al., 1986; Plunkell and Lee, 1970). Moreover, to compensate
for flexural effects and thus yield robust control the design focuses primarily on non-
collocated controllers (Cannon and Schmitz, 1984; Harashima and Ueshiba, 1986).
There has been a growing interest in the development of modelling and control
approaches for flexible manipulators, as depicted in Figure 1.1. Research on flex-
ible manipulator systems ranges from a single-link manipulator rotating about a
fixed axis (Hastings and Book, 1987) to three-dimensional multi-link arms
(Nagathan and Soni, 1986). However, experimental work, in general, is almost
exclusively limited to single-link manipulators. This is due to the complexity of
multi-link manipulator systems, resulting from more degrees of freedom and the
increased interactions between gross and deformed motions. It is important for
control purposes to recognise the flexible nature of the manipulator system and to
build a suitable mathematical framework for modelling of the system. The use of
dynamic models for flexible manipulator systems is threefold: forward dynamics,
inverse dynamics and controller design. Flexible manipulators are distributed
parameter systems with rigid body as well as flexible movements. There are two
physical limitations associated with the system:
(a)
The control torque can only be applied at the joint,
(b)
Only a finite number of sensors of bounded bandwidth can be used and at
restricted locations along the length of the manipulator.

Number of  journal articles
published
60
50
40
30
20
10
0
1985
1986
1987
1988
1989
1990
1991
1992
1993
1994
1995
1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
2010
2011
2012
2013
2014
2015
2016
Year
Figure 1.1
Journal articles published till mid-2016 (Source: Web of Knowledge and Science Direct)

Such issues are considered in this chapter through a structured overview of tech-
niques for modelling, dynamic simulation and control of flexible manipulators.
1.2
Modelling and simulation techniques
According to reported results, dynamic models of flexible manipulators are
described either by partial differential equations or by finite-dimensional ordinary
differential equations through some kind of approximation. Owing to the principles
used, various types of models of flexible manipulator have been developed
(Kanoh et al., 1986). These can be classified as:
●
Lagrange’s equation and modal expansion (Ritz–Kantrovitch);
●
Lagrange’s equation and finite element method;
●
Euler–Newton equation and modal expansion;
●
Euler–Newton equation and finite element method; and
●
Singular perturbation and frequency domain techniques.
A commonly used approach for solving a partial differential equation (PDE)
representing the dynamics of a manipulator, sometimes referred to as the separation
of variables method, is to utilise a representation of the PDE, obtained through a
simplification process, by a finite set of ordinary differential equations. This model,
however, does not always represent fine details of the system (Hughes, 1987).
A method in which the flexible manipulator is modelled as a massless spring with a
lumped mass at one end and lumped rotary inertia at the other end has previously
been proposed (Feliu´ et al., 1992; Oosting and Dickerson, 1988). In practice,
dynamic models are mostly formulated on the basis of considering forward and
inverse dynamics. In this manner, consideration is given to computational effi-
ciency, simplicity and accuracy of the model. Here, a means of predicting changes
in the dynamics of the manipulator resulting from changing configurations and
loading is proposed, where predictions of changes in mode shapes and frequencies
can be made without the need to solve the full determinantal equation of the
system.
An alternative to modelling the manipulator in the time domain is to use a
method based on frequency domain analysis (Book and Majette, 1983; Yuan et al.,
1989). This method develops a concise transfer matrix model using the Euler–
Bernoulli beam equation for a uniform beam. The weakness of this method is that it
makes no allowance for interaction between the gross motion and the flexible
dynamics of the manipulator, nor can these effects be easily included in the model.
As a result, the model can only be regarded as approximate. In another approach a
chain of flexible links is modelled by considering flexible multi-body dynamic
approach, based on an equivalent rigid link system (ERLS), where an ERLS, which
is the closest possible to the deformed linkage is defined, in order to match at best
the requirements of small displacement assumption. As the choice of ERLS is
completely arbitrary, it could introduce artificial kinematic constraints, which in
turn introduces modelling error (Giovagnoni, 1994).
Flexible manipulators – an overview
3

Unfortunately, the solutions obtained through the above modelling processes
are approximate and do not represent fine details of a system. To resolve this
problem numerical solution of the system’s equation are performed allowing
development of simulation environments. Dynamic simulation is important from a
system design and evaluation viewpoint. It provides a characterisation of the sys-
tem in the real sense as well as allows on-line evaluation of controller designs.
Commonly used simulation approaches involve finite element (FE), finite differ-
ence (FD), and symbolic manipulation (SM) methods. The FE method has been
previously utilised extensively to describe the flexible behaviour of manipulators
(Al-Bedoor and Khulief, 1996; Bricout et al., 1990; Dado and Soni, 1986; Du et al.,
1996; Ficola et al., 1994; Gilardi et al., 2009; Jonker, 1991; Kalra and Sharan,
1991; Kuo and Lin, 1999; Piras et al., 2005; Tokhi et al., 1999; Usoro et al., 1984).
The steps involved in FE simulation are: discretisation of the structure into small
elements; selection of an approximating function to interpolate the result; deriva-
tion of an equation for these small elements; calculation of the system equation;
and solving the system equation considering the boundary conditions. The devel-
opment of the algorithm can be divided into three main parts: the FE analysis,
state–space representation and obtaining and analysing the system transfer func-
tion. The computational complexity and consequent software coding involved in
the FE method is a major disadvantage of this technique. However, as the FE
method allows irregularities in the structure and mixed boundary conditions to be
handled, the technique is found suitable in applications involving irregular
structures.
In applications involving uniform structures, such as manipulator systems, the
FD method is found to be more appropriate. Simulation studies of flexible beam
systems have demonstrated the relative simplicity of the FD method (Kourmoulis,
1990). The FD method is used to obtain an efficient numerical method of solving
the PDE by developing a finite-dimensional simulation of the flexible manipulator
system through a discretisation, both, in time and space (distance) coordinates. The
algorithm allows inclusion of distributed actuator and sensor terms in the PDE and
modification of boundary conditions. The development of such an algorithm for a
flexible manipulator system has previously been reported (Tokhi and Azad, 1995a;
Tokhi et al., 1995). The algorithm thus developed has been implemented digitally
and simulation results characterising the behaviour of the system under various
loading conditions have been reported.
Investigations with symbolic manipulation have resulted in automated sym-
bolic derivation of dynamic equations of motion of rigid and flexible manipulators
utilising Lagrangian formulation and assumed mode methods (Cetinkunt and Ittop,
1992; De Luca et al., 1988; Lin and Lewis, 1994), Hamilton’s principle and non-
linear integro-differential equations (Low and Vidyasagar, 1988) and FD approx-
imations (Tzes et al., 1989). These have demonstrated that the approach has some
advantages, such as allowing independent variation of flexure parameters. A study
on utilising the manipulation approach, for the modelling and analysis of a flexible
manipulator using FE methods also has been reported (Mohamed and Tokhi, 2002).
In this work the relations between system parameters including payload and hub
4
Flexible robot manipulators: modelling, simulation and control

inertia and system characteristics have not been adequately addressed. The effect of
payload on the manipulator is important for modelling and control purposes, as
successful implementation of a flexible manipulator control is contingent upon
achieving acceptable uniform performance in the presence of payload variations.
The developed model has been verified by using an experimental rig to demonstrate
the performance of the symbolic algorithm in modelling and analysis of a flexible
manipulator.
1.3
Control techniques
The dynamic behaviour of a flexible manipulator may be considered as a combi-
nation of rigid-body and flexible dynamics. Accordingly, control strategies devised
for such systems are to take account of both rigid-body motion and flexible motion
control. The former corresponds to methods developed within the framework of
conventional rigid manipulator control. The latter, on the other hand, corresponds
to approaches developed within the framework of vibration control of flexible
structures.
Vibration control techniques for flexible structures are generally classified into
two categories: passive and active control (Tokhi and Veres, 2002). Active control
utilises the principle of wave interference. This is realised by developing control
approaches to artificially generate anti-vibration signals to destructively interfere
with the unwanted disturbances and thus result in reduction in the level of vibra-
tion. Active control of flexible manipulator systems can in general be divided into
two categories: open-loop and closed-loop control. Open-loop control involves
altering the shape of actuator commands by considering the physical and vibration
properties of the flexible manipulator system. The approach may account for
changes in the system after the control input is developed. Closed-loop control
makes use of measurements of the system state and changes the actuator input
accordingly to reduce the system response oscillation.
1.3.1
Passive control
Passive control utilises the absorption property of matter and thus is realised by a
fixed change in the physical parameters of the structure, for example adding vis-
coelastic material to increase the damping properties of the flexible manipulator.
It has been reported that the control of vibration of a flexible manipulator by passive
means is not sufficient by itself to eliminate structural deflection (Book et al., 1986).
On the other hand, if only active control is used, then due to actuator and sensor
dynamic destabilisation of modes near the bandwidth of the actuator or sensor may
result (Aubrun, 1980). To avoid such destabilisation a certain amount of passive
damping will be required to be employed, thus using hybrid control, i.e., a combi-
nation of active and passive control methods. Combined active/passive control stra-
tegies have been proposed previously where low-frequency modes of vibration are
controlled by active means and the modes with frequencies just above the actively
controlled modes are controlled by passive means (Plunkell and Lee, 1970).
Flexible manipulators – an overview
5

Several methods of passive vibration control of flexible manipulator systems
have been developed over the years. These mainly include methods of imple-
mentation of a constrained viscoelastic damping layer to provide an energy dis-
sipation medium (Kerwin, 1959) and the utilisation of composite material in the
construction of a flexible manipulator to provide higher strength and stiffness-to-
weight ratio and larger structural damping than a metallic flexible manipulator
(Aubrun, 1980; Choi et al., 1988; Thompson and Sung, 1986). Observations have
shown that although passive damping provides a sharp increase in damping at
higher frequency modes, the lower frequency modes still remain uncontrolled.
Moreover, the addition of viscoelastic material and a constraining layer leads to an
increase in the size and dynamic load of the system (Tzou, 1988).
1.3.2
Open-loop control
Open-loop control methods for vibration control of flexible manipulators involve
development of the control input by considering the physical and vibration
properties of the system. Although, the mathematical theory of open-loop control
is well established, few successful applications in the control of distributed
parameter flexible manipulator systems have been reported (Dellman et al.,
1956; Singh et al., 1989). The method involves development of suitable forcing
functions in order to reduce the vibration at resonance modes. The methods
developed include shape command methods (Alam and Tokhi, 2007, 2008, 2009;
Rhim and Book, 2004; Romano et al., 2002; Singhose, 2009; Singhose et al.,
2010; Tokhi and Azad, 1996a; Tokhi et al., 1995), the computed torque techni-
que (Jnifene and Fahim, 1997; Lammerts et al., 1995) and bang–bang control
(Onsay and Akay, 1991).
Shaped command methods attempt to develop forcing functions that minimise
vibration and the effect of parameters that affect the resonance modes (Aspinwall,
1980; Meckl and Seering, 1990; Swigert, 1980; Wang, 1986). Common problems
of concern encountered in these methods include long move (response) time,
instability due to un-reduced modes and controller robustness in the case of a large
change of the manipulator dynamics.
In the computed torque approach, depending on the detailed model of the
system and desired output trajectory, the joint torque input is calculated using a
model inversion process (Moulin and Bayo, 1991). The technique suffers from
several problems, due to, for instance, model inaccuracy, uncertainty over imple-
mentability of the desired trajectory, sensitivity to system parameter variations and
response time penalties for a causal input.
Bang–bang control involves the utilisation of single and multiple switched
bang–bang control functions (Onsay and Akay, 1991). Bang–bang control func-
tions require accurate selection of switching time, depending on the representative
dynamic model of the system. Minor modelling error could cause switching error
and thus result in a substantial increase in the residual vibrations. Although utili-
sation of minimum energy inputs has been shown to eliminate the problem of
switching times that arise in the bang–bang input (Jayasuriya and Choupra, 1991),
6
Flexible robot manipulators: modelling, simulation and control

the total response time, however, becomes longer (Meckl and Seering, 1990; Onsay
and Akay, 1991).
1.3.3
Closed-loop control
Effective control of a system always depends on accurate real-time monitoring and
the corresponding control effort. Initial discussions on feedback control of a flex-
ible manipulator and the usefulness of an optimal regulator as applied to this pro-
blem dates back to the early 1970s. It is known in the conventional approach that
compensation can alter the first vibrational mode by either adding some damping or
extending the bandwidth of the system (Ogata, 2001). Compensation, however, will
limit the performance of the manipulator because inputs with frequency contents
above the first flexible mode could still cause vibration. Various modern control
designs have been proposed during the last two decades for flexible manipulator
systems with different types of vibration measuring systems.
When free motion of a system consists mainly of a limited number of clearly
separable modes, then it is possible to control these modes directly using the so-
called independent modal space control (IMSC) method, where the controller is
designed for each mode independent of other modes (Baz et al., 1992; Sinha and
Kao, 1991). Modal space control has been used for suppression of flexible motion
in a three-link log loading manipulator with which considerable improvement has
been achieved over conventional joint-based collocated controller. Although initial
investigations on the use of IMSC lack consideration of the location of the actuator
(Meirovitch et al., 1983), later investigations have shown that actuator placement is
important for suppression of spillover and, thus, methods for optimal placement of
sensors and actuators have been developed (Schulz and Heimbold, 1983).
Variable structure control (VSC) utilises a viable high-speed switching feed-
back control law to drive the plant’s state trajectory onto a specified and user-
specified surface in the state space, and to maintain the plant’s state trajectory on
this surface for all subsequent times. One of the first studies on application of VSC
to one-link flexible manipulators was reported by Qian and Ma (1992), where they
controlled the end-point position in a non-collocated manner. In this study a sliding
surface (a line in the study) is constructed from the end-point position and its
derivative is employed in the design. They claim that if the slope of this line is
chosen positive and the system variables are made to stay on this line, these would
converge to zero exponentially, thus yielding a stable system in sliding mode. The
performance of the controller was evaluated through a series of simulations, fol-
lowed by an analysis of the designed control system. Thomas and Bandyopadhyay
(1997), however, have pointed out that the choice of a positive constant as the slope
for this switching line would not guarantee the stability of the system in sliding
mode. The switching line is in fact a switching hyper-surface in view of the func-
tional relationship of the tip (end-point) position with the generalised coordinates of
the system through mode shape functions. The stability of the system in sliding
mode is guaranteed only if the motion on this hyper-surface is asymptotically
stable (Young, 1977), whereas the positive value for the slope of the switching line
Flexible manipulators – an overview
7

employed by Qian and Ma (1992) will not guarantee this stability. Moreover,
a stable VSC controller based on a state transformation has been designed in
the study.
The application of VSC to multi-link flexible manipulators is very limited.
There are difficulties in both modelling and controller design. Sira-Ramirez et al.
(1992) have derived dynamical sliding mode regulators within the context of gen-
eralised observability canonical form (GOCF) (Fliess, 1989). The GOCF is
obtained by means of a state elimination procedure, carried out on the system of
differential equations describing the manipulator dynamics. Therefore the system
can be considered as a linear system. Although simulation examples illustrate the
performance of the proposed controller for a robotic manipulator with flexible
joint, it is not easy to apply to general multi-link manipulators with flexible links.
There are also applications of VSC to other plants similar to flexible manipulators,
e.g., a spacecraft with flexibility (Karray and Modi, 1995), a flexible structure on
the ground (Iwamoto et al., 2002) and a disk drive actuator (Supino and Romano,
1997).
An appreciable amount of work carried out on the control of flexible manip-
ulator systems involves the utilisation of strain gauges, mainly to measure mode
shapes (Sakawa et al., 1985). There are two essential components involved in
measuring the modal response using strain gauges. The first is a method of mea-
surement of the modes of vibration of the flexible manipulator. The second is the
development of a computational technique for distinguishing different modes in the
overall deflection of the flexible manipulator. Once modal information is available
a control loop can be closed for each mode either to damp or to actively drive the
manipulator in a manner, which reduces the vibration. It appears that the strain
gauge measurement is very simple and relatively inexpensive to use. However, the
technique may place more stringent requirements on the dynamic modelling and
control tasks. Strain gauges have the disadvantage of not giving a direct measure-
ment of manipulator displacement, as they can only provide local information.
Thus, displacement measurement by using strain gauges requires more complex
and possibly time-consuming computations, which can lead to inaccuracies.
To solve the problem due to displacement measurement, as encountered in
using strain gauges only, attempts have been made to develop schemes that
incorporate end-point measurements as well (Cannon and Schmitz, 1984; Kotnik
et al., 1988). Some researchers have proposed an approach, which utilises local or
global measurement of flexible displacement of a manipulator to control system
vibration (Harashima and Ueshiba, 1986; Wang et al., 1989). In this method the
deflection of the manipulator is detected (measured), using, for example, a CCD
camera or laser beam, relative to a rotating reference X–Y frame fixed to the hub of
the manipulator. However, as an end-point position control system has smaller
stability margin than collocated control, it is necessary to include a collocated rate
feedback (hub velocity) to obtain acceptable performance of the closed-loop sys-
tem. By using an end-point sensor, more accurate end-point positioning can be
accomplished, but the resulting controller is less robust to plant uncertainties than
the corresponding collocated design.
8
Flexible robot manipulators: modelling, simulation and control

The difficulty in maintaining stability and performance robustness, due to
spillover effects from unmodelled modes that occur when a high-order system is
controlled by a low-order controller, is of major concern in the control of flexible
systems. To improve robustness it is typically required that the controller band-
width be sufficiently reduced (Nesline and Zarchan, 1984). Studies have shown that
most robust control techniques that ensure stability in the presence of parameter
errors can only increase damping by a limited amount (Dorato, 1987). If the
inherent damping is very low, this increase may be insufficient to adequately
improve the response. Moreover, the controllers rely on accurate system models.
This makes the controller very sensitive to modelling errors, leading to degradation
in system performance and, in some cases, instability. It is evident that in using
either global or local displacement measurement a device is required to be attached
on the manipulator. This affects the behaviour of the manipulator (Mace, 1991).
Both feedforward and feedback control structures have been utilised in the
control of vibration of flexible manipulator systems (Shchuka and Goldenberg,
1989; Wells and Schueller, 1990). These include combined feedforward and feed-
back methods based on control law partitioning schemes, which use end-point
position signal in an outer loop to control the flexible modes and the inner loop to
control the rigid body motion. Although the pole-zero cancellation property of the
feedforward control speeds up the system response, it increases overshoot and
oscillation. However, it is found that, in contrast to many high-order compensators,
systems with feedforward control incorporating proportional and derivative (PD)
feedback are not highly sensitive to plant parameter variations.
In investigations carried out on control of flexible manipulator systems the
only non-collocated sensor/actuator pairs that have successfully been employed
include motor torque with either the manipulator strain or global/local end-point
position. However, practical realisation of both methods has associated short-term
and long-term drawbacks. If a state–space description of the closed-loop dynamics
is available, it is possible to use acceleration feedback to stabilise a rigid manip-
ulator (Stadenny and Belanger, 1986). Investigations on the control of a flexible
manipulator system using acceleration feedback to design the compensator and the
end-point position feedback using a design based on a full-state feedback observer
have shown that the controller using end-point position feedback exhibits a rela-
tively slow and rough response in comparison with acceleration feedback con-
troller; the difference becoming more noticeable with increasing slewing angle
(Kotnik et al., 1988). Moreover, acceleration feedback produces relatively higher
overshoot. The use of acceleration feedback appears to have intuitive appeal from an
engineering design viewpoint, particularly due to the relative ease of implementa-
tion and low cost. Moreover, in sensing acceleration for control implementation, all
sensing and actuation equipment is structure mounted. This implies that, in case of
vision sensing, issues such as camera positioning or field of view are not of major
concern, which is an important consideration, specifically, in large-scale applica-
tions such as telerobotics. Furthermore, applications to multi-link flexible manip-
ulators could benefit from such methods to a greater extent. Some researchers have
also proposed adaptive control methods to compensate for parameter variations
Flexible manipulators – an overview
9

(Feliu´ et al., 1990; Yang et al., 1991). However, these approaches utilise optical
methods of global/local end-point sensing for obtaining the feedback signal.
Many of the controllers have been designed on the basis of various input
shaping mechanisms using both open-loop and closed-loop configurations. Zuo
and Wang (1992) designed a closed-loop control mechanism based on shaped
input filter, to reduce or eliminate vibrations and to reject external disturbances of
a multi-link manipulator. An adaptive input shaping control scheme for vibration
suppression in slewing flexible structures with particular application to flexible-
link robotic manipulators has been reported by Tzes and Yurkovich (1993). The
scheme combines a frequency-domain identification technique, with input shap-
ing, in order to adjust critical parameters of the input shapers in the case of payload
variation or other un-modelled dynamics. The scheme was realised through
simulation and experimentation. Hillsley and Yurkovich (1993) have reported a
composite control strategy for a two-link flexible robotic arm in conjunction with
post-slew feedback scheme. In this work attention has been focused on end-point
position control, for point-to-point movements assuming a fixed reference frame
for the base with two rotary joints. Khorrami et al. (1994) addressed experi-
mentation on rigid-body based controllers with input pre-shaping for a two-link
flexible manipulator. The scheme is shown to be effective when the plant
dynamics are linear and time-invariant. It has also been shown that application of
an inner-loop non-linear control to cancel some of the nonlinearities and to reduce
configuration dependence of structural frequencies enhances the performance of
the input pre-shaping scheme. Borowiec and Tzes (1996) proposed a frequency-
shaped explicit output feedback force control for a two-link flexible manipulator.
In this work the frequency shaping dependence has been included to eliminate the
undesirable effects associated with control and observation spillover. Magee et al.
(1997) developed a control approach combining command shaping and internal
damping to control a small robot attached to the end of a flexible manipulator.
They also verified the proposed control system experimentally using two separate
test-beds.
1.3.4
Artificial intelligence control
It is noted that the non-linear dynamics of rigid manipulators are compensated by
an inverse-dynamic strategy, and use of such an approach for a flexible manipulator
is restricted by non-minimum phase characteristics of the arm when end-point
response is taken as output of the system (Talebi et al., 1998b). Several conven-
tional approaches have been proposed as solutions to this problem based on
different methods such as non-causal torque, singular perturbation, integral mani-
fold, transmission zero and redefined output (Bayo and Moulin, 1989; De Luca and
Siciliano, 1989; Geniele et al., 1992; Hashtrudi-Zaad and Khorasani, 1996; Kwon
and Book, 1990; Madhavan and Singh, 1991; Moallem et al., 1997; Schoenwald
and O¨ zgu¨ner, 1990; Siciliano and Book, 1988; Wang and Vidyasagar, 1989).
However, performance of these control strategies may not be satisfactory in real-
world applications as it is difficult to accurately model a flexible manipulator.
10
Flexible robot manipulators: modelling, simulation and control

In many cases when it is difficult to obtain a model structure for a system with
traditional system identification techniques, intelligent techniques are desired that
can describe the system in the best possible way (Elanayar and Yung, 1994).
Genetic algorithms (GAs) and neural networks (NNs) are commonly used for
modelling dynamic systems. The main advantages of utilising GAs for system
identification are that GAs simultaneously evaluate many points in the parameter
space and converge towards the global solution (Kargupta and Smith, 1991;
Kristinsson and Dumont, 1992). The superiority of a GA over recursive least
squares (RLS) in modelling a fixed-free flexible beam has been addressed by
Hossain et al. (1995). In contrast, neural network approaches for system identifi-
cation offer many advantages over traditional ones especially in terms of flexibility
and hardware realisation (Ljung and Sjo¨berg, 1992). This technique is quite effi-
cient in modelling non-linear systems or if the system possesses non-linearities to
any degree.
Application of NNs for identification and control of dynamic systems has
gained significant momentum in recent years. Narendra and Parthasarathy (1990)
addressed system identification using the globally approximating characteristics of
NNs. Neuro-modelling with different approaches, involving backpropagation, has
been reported by various researchers (Nerrand et al., 1994; Srinivasan et al., 1994).
The successful application of radial basis function (RBF) networks for modelling
dynamic systems is also widely addressed in the literature (Casdagli, 1989; He and
Lapedes, 1993; Sze, 1995). Chen et al. (1991) proposed orthogonal least square
learning algorithm for RBF networks to model non-linear dynamic systems.
Elanayar and Yung (1994) have addressed the use of RBF to approximate dynamic
and state equations and to estimate state variables of stochastic systems.
A considerable amount of work has been carried out to develop and implement
NN-based controllers for flexible manipulators. Cheng and Wen (1993) proposed a
neuro-controller to drive a flexible arm to a desired trajectory along with using hub
position and velocity measurement techniques for stabilising the system. Newton
and Xu (1993) have addressed the joint tracking control problem for a space
manipulator using feedback error learning technique. In this case end-point position
tracking cannot be guaranteed specially for high-speed desired trajectories. Control
of a single-link flexible manipulator whose dynamics are partially known has been
considered by Donne and O¨ zgu¨ner (1994). In this work, a model-based predictive
control scheme is adopted for the known dynamics and unsupervised NN-based
control scheme is utilised to control the unknown system dynamics. Identification
and control are implemented as a two-stage process where identification of the
unknown part of the system is done using an NN in supervised learning mode.
Talebi et al. (1997) proposed an NN-based adaptive controller for a single flexible
link manipulator. Output re-defined approach is used in designing the controller.
They examined three different types of NN schemes. The controller has been rea-
lised both in simulation and experimental environments. The advantage of this
controller over conventional PD type controller has also been demonstrated.
Gutie´rrez et al. (1998) have reported implementation of an NN tracking controller
for a single flexible link. In this work the practical implementation of a multi-loop
Flexible manipulators – an overview
11

non-linear NN tracking controller for a single flexible link has been tested and its
performance compared to that of the standard PD and proportional-integral-deri-
vative (PID) controllers. The controller includes an outer PD tracking loop, a sin-
gular perturbation inner loop for stabilisation of the fast dynamics and an NN inner
loop is used for feedback linearisation of the slow dynamics. Song and Koivo
(1998) addressed NN-based control of a flexible manipulator, where a non-linear
predictive control approach is presented using a discrete-time multilayered per-
ceptron network model for the plant. The predictive control framework allows
variations in the model order, time delay and non-minimum phase effects in the
plant. The method has been compared against a collocated passive PD controller.
Development of a multi-loop non-linear NN tracking controller for a multi-link
flexible arm using singular perturbation based fast control and outer loop slow
control has been addressed by Yesildirek et al. (1994). Adaptive NN control of
flexible manipulators based on singular perturbation has been reported by Ge et al.
(1997). In this work the full model dynamics of the flexible manipulator were
separated into the slow subsystem and the fast subsystem by applying singular
perturbation techniques. Thus, an adaptive NN control based on direct adaptive
techniques is designed to control the slow subsystem, and the fast control is
designed as a simple linear quadratic regulator (LQR) control to stabilise the fast
subsystem along the trajectory of the slow subsystem. Talebi et al. (1998a)
addressed inverse dynamic control of flexible-link manipulators using neural net-
works, where a modified output redefined approach is utilised to overcome the
problem caused by the non-minimum phase characteristics of the flexible-link
system.
Neural network applications often incorporate a large number of neurons, thus
requiring a great deal of computation for training and causing problems for error
reduction (Bishop, 1995). A recent trend in NN design for large-scale problems is
to split the original task into simpler subtasks, and use a sub-network module for
each one (Happel and Murre, 1994; Hodge et al. 1999; Jacobs and Jordan, 1993;
Kecman, 1996). This divide-and-conquer strategy then leads to super-linear
speedup in training and one can improve the generalisation ability over that of a
single large network (Hanson and Salamon, 1990; Jacobs and Jordan, 1993). It is
also easier to encode a priori knowledge in a modular framework. In general a
modular neural network (MNN) is constructed from two types of network, namely
expert networks and a gating network (Hodge et al., 1999; Jacobs and Jordan,
1993). Expert networks compete to learn the training patterns and the gating net-
work mediates this competition. During training, the weights of the expert and
gating networks are adjusted simultaneously using the backpropagation algorithm
(Rumelhart et al., 1986). Sharma et al. (2003) reported a work involving this
strategy for modelling of a flexible manipulator. In this approach MNN learns to
partition an input task into sub-tasks, allocating a different NN to learn each one.
However, accuracy of the MNN depends greatly on accurate fusion of the indivi-
dual networks as decided by a gating network (Hodge et al., 1999). Researchers
have presented a new method, using GAs (Goldberg, 1989; Holland, 1992), which
removes the need for a gating network. Fusion of individual networks is decided by
12
Flexible robot manipulators: modelling, simulation and control

optimum slope selection of the activation function. The GA also optimises the
structure and weights of the individual networks in the MNN.
1.4
Flexible manipulator systems
The first experimental single-link flexible manipulator systems were developed in
early 1980s (Cannon and Schmitz, 1984; Hastings and Book, 1987). Although
research in the control of single-link setups continues, attention has now shifted to
multi-link flexible manipulators. There is a wide spectrum of multi-link flexible
manipulators, starting from two-link experimental setups to 17.6 m, 7 degrees of
freedom (DOF) remote manipulator system for space station assembly.
A good survey of initial efforts in flexible manipulator research is given in Hu
(1993). Many of the manipulators discussed in Hu (1993) are now decommis-
sioned. This section gives a brief description of the rich variety of flexible
manipulators in current use, both for experimental and industrial use.
1.4.1
Typical flexible manipulator systems
Typical flexible manipulator system configurations have not changed much since
the early experimental systems (Book et al., 1986; Cannon and Schmitz, 1984). The
current commercial availability of sensor and actuator hardware has made it much
easier to build an experimental flexible manipulator system. The Sheffield
manipulator at the University of Sheffield (UK) and the IST manipulator at the
Technical University of Lisbon (Portugal) are good representatives of the many
experimental flexible manipulators used for research purposes (Martins et al.,
2003). A typical flexible manipulator system has a flexible link, an actuator-gear
mechanism to rotate the link, an optical encoder to measure joint rotation, accel-
erometers and strain gauges to sense flexible motion, an optical arrangement to
measure the end-point position and an occasional force sensor attached to the end-
point. There are variations in configuration amongst different flexible manipulator
system setups, e.g., many setups have directly driven DC motors and others use
harmonic drive gears with DC motors, some use only accelerometers or strain
gauges to measure flexible deflections while others have cameras, some have semi-
rigid flexible links while others have very flexible links. The sensor and actuator
hardware are available in a wide variety and researchers make a selection to meet
the needs of their experimental research. As good examples illustrating such var-
iations in experimental flexible manipulator system setups, firstly the Sheffield
manipulator, shown in Figure 1.2, and secondly the IST manipulator, shown in
Figure 1.3, are considered.
The Sheffield manipulator is a directly driven 0.9 m long aluminium alloy
(mass density 2,710 kg/m3, Young’s modulus 71  109 Pa) flexible link (Tokhi and
Azad, 1997). It has 0.0032 m width, 0.019 m height and cross-section moment of
inertia 5:253  1011 m4. The actuator is a U9M4AT printed circuit armature
motor driven by Electro-Craft Corporation LA56000 linear drive amplifier; the hub
inertia is 5:8598  1011kgm2. The joint rotation is measured by 2;048 pulse=rev
Flexible manipulators – an overview
13

Figure 1.3
The IST flexible manipulator system
Figure 1.2
The Sheffield flexible manipulator system
14
Flexible robot manipulators: modelling, simulation and control

encoder, a tachometer senses the angular velocity, a miniature accelerometer
(sensitivity 1:02 mV=ms2) measures the end-point acceleration. The manipulator is
constructed so that the link is flexible in the horizontal plane and stiff in vertical
bending and torsion.
The IST manipulator is a very flexible manipulator designed to experiment
with force control methods. It is a 0.5 m long link made of spring-steel (mass
density 7;850 kg=m3, Young’s modulus 209  109 Pa) driven by a harmonic drive
(gear ratio 50) coupled servo system. A 12A8 servo amplifier from Advanced
Motion Control drives the RH-14-6002 harmonic drive servo system. The link has
0.001 m width, 0.02 m height and hub-radius of 0.075 m. A 2,000 pulse/rev shaft
encoder measures the angular displacement and an SR-series Kodak motion coder
analyser (camera) with an acquisition rate of 1,000 frames/s senses the end-point
position.
1.4.2
Flexible manipulators for industrial applications
In many applications a long-reach manipulator is essential. The structure of these
long-reach robots is designed to minimise vibrations. In spite of careful design their
response time is governed by structural vibration. Active damping control is
essential to improve response times of these long-reach manipulators. Since the
response time is a critical performance parameter there is a great deal of interest in
experimental work on these robots. Space robotics and inspection of nuclear waste
storage tanks are two applications where prototype long-reach application robots
are in service. However, it may be a few years before commercial mass-produced
long-reach robots are available.
The space station remote manipulator system (SSRMS) (Stieber et al., 1999)
has a 116,000 kg/1,500 kg, payload-to-manipulator mass ratio. It is a 7-DOF
manipulator with a reach of 17.6 m when fully stretched. There are other
manipulators with comparable specifications developed by the Canadian
Space Agency (Canadarm2) and NASA. Amongst a variety of long-reach space
robots, there is a manipulator, which can move end-over-end to cover the entire
space station. The average power consumption of these robots is in the range of
350–450 W.
Manipulators designed for inspection and cleaning of nuclear waste tanks are
constrained by the fact that their body should fit in a narrow hole with a diameter
between 0.1 and 1 m and should have a reach of 25 m or more. The Pacific
Northwest National Laboratories has a flexible beam test-bed with a Schilling Titan
II manipulator attached to a 4.17 m long arm. This manipulator can pass through a
0.3 m hole (Kress et al., 1997). Its base manipulator has a rotary and a prismatic
joint. This gives it two degrees of freedom. The rotary motion orients the arm and
the prismatic joint gives it a telescopic motion to set its reach. Another manipulator
in this class of long-reach arm with a dexterous manipulator at the end is the MIT
spatial long-reach manipulator system (LRMS). The so-called Shaky II experiment
uses a 1.5 m arm with a PUMA 250 at its end.
Flexible manipulators – an overview
15

1.4.3
Multi-link flexible manipulators
Figure 1.4 shows an experimental aerospace dual-arm flexible manipulator
(ADAM) at the Tohoku University, Sendai, Japan (Miyabe et al., 2001). The
manipulator has two arms with seven joints and two flexible links in each arm.
The length of each link is 0.5 m, elbow mass is 6 kg and the combined wrist and
end-effector mass is 2.9 kg. Force/Torque sensors are attached to the end-effectors
to measure contact force/torque. Link deflections are measured by strain gauges.
Laser displacement sensors measure the distance between the end-effector and
the surface of the object to be inspected (Miyabe et al., 2001; Space Machines
Laboratory, 2004a).
A four-link manipulator facility is available at the Control Engineering
Laboratory, Ruhr-University Bochum, Germany (Wang et al., 2002). Each link,
0.6 m long, is a composite of a rigid and a 0.24 m long flexible part. All the four
joints are driven by DC motors with harmonic gear drives. Elastic deflections of the
links are measured by strain gauges. The mass at joints one and two is 9.16 kg and
at three and four is 6.14 kg.
1.4.4
Two-link flexible manipulators
Many two-link flexible manipulator experimental test-beds have been set up over
the last couple of decades but with a few exceptions the overall structure is not
much different from the early setups. Most two-link flexible manipulators are
constrained to the horizontal plane. One of the earliest experimental two-link
flexible manipulator was built at Stanford University for the purposes of demon-
strating non-collocated control (Oakley and Cannon, 1990). Both links in this
manipulator are driven by directly connected DC motors in the horizontal plane, the
joint rotation is measured by rotary variable differential transformers (RVDTs),
Figure 1.4
Aerospace dual-arm flexible manipulator
16
Flexible robot manipulators: modelling, simulation and control

a CCD television camera is used to measure the end-point position. The manipulator
is made from very flexible links and the highest modelled mode is at 12 Hz.
Figure 1.5 shows a 3DOF, two-link flexible manipulator system named as
FLEBOT II (Space Machines Laboratory, 2004b). It has two flexible links and
three joints and is designed for research in space robotics applications. This setup is
different from other manipulators; its workspace includes both vertical and hor-
izontal planes.
The two-link flexible manipulator at the University of Washington (Bossert
et al., 1996) is for position and force control research. Its motion is limited to the
horizontal plane. It is driven by two direct drive DC motors (continuous torques
3.39 Nm and 0.424 Nm), joints angles are measured by 1,024 cycles/rev optical
encoders, the end-point position is sensed by a 3D dynaSight bi-optic infrared
tracking system and it has a 6-DOF force/torque sensor attached to its end-point.
A two-link flexible manipulator setup as an experimental space robot simulator
has been reported in Romano et al. (2002), where both flexible links (0.5 m and
0.51 m) are actuated by DC motors with 50 times gear ratio harmonic drives. The
manipulator is supported by four airpads on a granite table. Joint angular position is
Figure 1.5
A 3-DOF two-link flexible manipulator
Flexible manipulators – an overview
17

obtained with 1,800 pulse/rev optical encoders mounted on motor shafts. End-point
position is measured by a monochrome 640  480 pixel PLUNIX TM-6701 (60 Hz
refresh frequency) camera. The resolution and accuracy of this camera is poor and
to back it up an accelerometer is used to measure end-point oscillations.
The Duisburg flexible manipulator (DFM01) is another two-link flexible
manipulator system reported in Bai et al. (1998). Its two links (0.571 m and 0.465
m), driven by geared DC motors, are made of single spring steel strip and have a
limited range (35 link 1 and 45 link 2). The manipulator has only horizontal
motion and the end effector is supported by an airpad on a plastic table. Optical
encoders are used to measure angular rotation, deformation of links is measured by
two strain gauges mounted on each link and an optical 3D sensor is used to measure
the end-point position.
The two-link flexible manipulator at Keio University, Japan (Kino et al., 1998)
drives the first link (0.45 m) with a directly driven DC motor and the second link
(0.43 m) with a harmonic geared motor; the end-point position is measured by a
position sensitive detector (something like a camera) mounted above the
manipulator.
Most flexible manipulator facilities use external optical sensing device for end-
point position measurement. But there are many experimental facilities, which use
strain gauges for flexibility measurements. For example, the two-link flexible
manipulators at IRCCyN (Benosman and Le Vey, 2002), PSTECH (Cheong et al.,
2001), University of Missouri (Xu et al., 2001) and The National Taiwan
University (Lin and Fu, 1998) use strain gauges and optical encoders to measure the
end-point elastic displacement.
Achieving high-performance control of very flexible structures is a challenging
task, but one that is critical to the success of many important applications.
Manipulation with very flexible structures, such as the Space Shuttle RMS, is a
very challenging task. Figure 1.6 demonstrates a two-link joint flexible macro/
micro manipulator performing this kind of tasks. The system was developed by the
Aerospace Robotics Laboratory of Stanford University (Stevensand and How,
1996). The macro part of this manipulator features two 1.5 m long links, each with
built-in joint flexibility. The two micro arms are similar to the ones on the free-
flying space robots. The arm operates in a two-dimensional space-like environ-
ment: the end-point floats on an air bearing over a large, flat granite table. Also
shown is a small free floating object that the robot can catch and manipulate.
An overhead vision system senses the end-point position of the arms as well as the
position of the object.
The goal of this research is to remove the human from the low-level control of
moving each arm. Instead, the human should give tasks for the robot to complete
autonomously. It is desired to have a low-level control loop that can accurately
control the end-point of each micro arm. While much research has been done on
controlling redundant robotic systems, many of these techniques break down when
there is flexibility between the motor and the robot. Current research is on using
techniques such as back-stepping to account for the joint flexibility in combination
with rigid robot redundancy management schemes.
18
Flexible robot manipulators: modelling, simulation and control

1.4.5
Single-link flexible manipulators
Most single-link flexible manipulators have similar configuration to the Sheffield
and IST manipulators described earlier. Single-link flexible manipulators reported
by Nagarkatti et al. (2001) and Li and Chen (2001) each use a camera to obtain
the end-point position. The system reported by Su and Khorasani (2001) uses a
UDT photodiode, with a camera lens to focus light on the photodiode and an
infrared emitting diode, for sensing end-point deflection. Two single-link flexible
manipulators, which have different configurations from most other setups, are
discussed next.
The very flexible arm at IPNG-CNRS-UJF (Landau et al., 1996) is made of
two aluminium strips (1 m long, 0.1 m wide, and 0.0008 m thick) coupled by ten
regularly spaced rigid frames. A DC motor is used an as actuator and 1,250 pulses/
rev encoder with a one-turn potentiometer (4:7 kW) measures the angular rotation.
The manipulator can rotate 360. The sensor to measure the end-point deflection is
rather unique. It is a combination of an LED at the end-point and a mirror-detector
at the hub. The mirror is centred on the hub axis and is rotated by a DC motor. The
light from the LED can fall on the detector only at one position of the mirror
(when the incidence and reflected angles are equal) and that gives the end-point
deflection.
Another interesting single-link flexible manipulators is the experimental sin-
gle-link 2-DOF flexible manipulator shown in Figure 1.7 (Goh et al., 2000). It has
been constructed according to the specifications shown in Table 1.1. The two
degrees of freedom allow the manipulator to move in both horizontal and vertical
planes, allowing any coupling between the motions to be studied. The flexible link
Figure 1.6
A two-link joint flexible macro manipulator carrying a two-armed
micro manipulator with a ‘‘satellite’’. 3DOF two-link flexible
manipulator
Flexible manipulators – an overview
19

Figure 1.7
A flexible 2-DOF single-link manipulator
Table 1.1
Flexible 2-DOF single-link manipulator specifications
Flexible link
Length (L)
1.00 m
Mass (Ml)
0.35 kg
Offset from motor axes
0.06 m
Flexural rigidity (b)
72:2 Nm2
Payload
Mass (Mp)
0.79 kg
Centre of gravity offset
0.25 m
Hub
Horizontal inertia (Ihy)
0:468 kgm2
Vertical inertia (Ihz)
0:249 kgm2
Torque motors
Maximum torque
33 Nm
Rotor inertia
0:013 kgm2
Torque constant
1:2 Nm=A
Maximum control signal
8:5 V
Encoders (Incremental)
Line count
3,600
Resolution (4 counting)
4:4  104 rad
Potentiometers
Linearity
0:2%
Linearity with respect to end-point position
3  103 rad
Interface
A/D (0  10 V differential input)
14 bit
D/A (10 V outputs)
16 bit
Encoder interface card
24 bit
20
Flexible robot manipulators: modelling, simulation and control

is a homogeneous, cylindrical, aluminium rod with constant properties along its
length. Unlike many other experimental setups, the motion of the link is not arti-
ficially constrained in any plane within the safe working envelope. The link is
symmetrical about its longitudinal axis, and this axis intersects both horizontal and
vertical drive axes at the hub. Horizontal and vertical end-point displacements of
the link are calculated based on two measurements. Firstly, the position of the link
end-point in relation to the hub axis (qflex) is measured using a precision potenti-
ometer. This is combined with the angle of the hub relative to horizontal or vertical
axis (q) measured by an incremental optical encoder. These signals are interfaced to
a PC that is used to implement the control algorithms.
1.5
Applications
The properties and capabilities provided by flexible manipulators stand for a clear
challenge in opening new applications for robots. Situations where the workspace is
constrained or when it is required to perform operations like assembly in space
prevents the use of classical, rigid link, industrial robot configurations. For these
applications structural mass and stiffness must be reduced, to allow entering very
confined workspaces and/or to permit cost-effective launching, and to enlarge
manipulator reach out and dexterity. This could be of interest not only in space
applications, but also in the industrial sector. Flexible manipulators, equipped with
an active vibration control system, can reach quite the same accuracy of traditional
industrial robots with low mass of moving parts and reduced cost and power con-
sumption. Some known examples are the application of fast, flexible manipulators
in the food industry (robotic packing and palletising) and in assembly.
Flexibility is also becoming an important issue for other fields like machine
tools and civil engineering machinery, such as tunnel boring machines and exca-
vators, where requirements for extending tools life, increasing accuracy and
speeding up overall performance, entail making control systems fully aware of true
system dynamics. Existing robotic systems tend to be overkill, they are too complex,
which makes them expensive both to purchase and to maintain.
As the potential of flexible manipulator technology is being demonstrated in
laboratories, and some results are moving to industry, new ideas on their applic-
ability are arising. One very important aspect of flexible robot technology is their
intrinsic capability to accommodate forces with the environment, which could be a
main issue when developing robots for direct cooperation with humans. Thus, a
number of foreseen robot applications regarding safety and dependability could
take clear advantage of structural flexibility. The emerging humanoid robots,
where a clear need in mass reduction is mandatory for their operation, constitute
undoubtedly an area where flexible robot technology is to play a major role in the
future.
Although numerous potential industrial applications of flexible robotic
manipulator systems have been identified, there are a number of technological
issues, which need to be addressed before the industry can accept flexible robotic
Flexible manipulators – an overview
21

manipulator systems. These are: development and study of flexible manipulator
construction material, efficient actuation and sensing technologies, and simple and
effective controller designs. Developments in these areas require assistance from
government agencies and investment from industries.
Despite all of these, flexible robotic manipulators are in use to some extent in
space applications. This is due to the weight restriction for a spacecraft. One such
manipulator is made of a composite rot that is lifted by a longitudinal rope actuator
and has an end-effecter gripper with bending electro-active polymer (EAP) driven
fingers allowing to grab and hold an object (Bar-Cohen et al., 1998). The EAP
surface wiper operates like a human finger and can be used to remove dust from
windows and solar cells. Other potential areas of application are manipulation in
nuclear and other hazardous environments, car/vehicle painting, manufacturing of
electronic hardware and food industry.
1.6
Summary
An overview of flexible robot manipulators has been presented. Research on flex-
ible manipulator systems ranges from single-link manipulators rotating about a
fixed axis to three-dimensional multi-link arms. However, experimental work, in
general, is almost exclusively limited to single-link manipulators. This is due to the
complexity of multi-link manipulator systems, resulting from more degrees of
freedom and the increased interactions between gross and deformed motions. The
first experimental single-link flexible manipulator systems were developed in the
early 1980s. Although research in the control of single-link setups continues,
attention has shifted to multi-link flexible manipulators.
The control of flexible manipulators has been highlighted as a challenge and
researchers have faced up to such challenge through numerous investigations at
devising various modelling, simulation and control strategies. Such investigations,
which are still in progress at various research laboratories worldwide, have led to
the realisation of the potential of flexible robotic manipulators in numerous appli-
cations including space exploration, nuclear and manufacturing industries.
Although numerous further potential industrial and service sector applications
of flexible robotic manipulators have been identified, the realisation of these will
depend on further research and development work at structural design of manip-
ulators and further efficient modelling and control approaches. Developments in
these areas also require institutional collaboration, assistance from government
agencies and investment from the industry.
22
Flexible robot manipulators: modelling, simulation and control

Chapter 2
Design of a flexible manipulator
experimental system
This chapter presents the design and development of a lightweight single-link
planar constrained flexible manipulator. The design process involves selection of
material types in respect of physical properties, selection of sensing and actuation
types suitable for the system, interface mechanism, and hardware and software
requirements. A number of key practical issues arising in the design process are
highlighted and resolved. These include the actuator motor gearing mechanism and
interference of power line with sensing data. The final design includes an alumi-
nium type single-link manipulator driven by a printed circuit armature type
permanent magnet DC motor. The sensing types include a shaft encoder and
tachometer at the hub, an accelerometer at the end-point and a set of strain gauges
along the manipulator arm. The manipulator thus designed and developed is fea-
tured throughout the book and used in case study exercising for demonstrating and
verifying the various modelling and control design approaches presented in various
chapters of the book.
2.1
Introduction
The increasing demand for system automation has recently necessitated the
employment of increasing number of robots in various applications. The major
factor which contributes largely to performance limitations of the robot is the
limited capabilities of their control systems especially in applications requiring
high speed and/or large payloads. Recently, the demand for lightweight elastic
manipulators is increasing as they improve the speed of operation and handle
higher payloads in comparison to rigid manipulators with the same actuator cap-
abilities. However, their structural flexibility results in oscillatory behaviour in the
system. Various types of flexible manipulators are used in experimental and pro-
totype applications. To design a flexible manipulator efficiently, whether intended
for a specific application or for a range of applications, several factors need to be
considered. These include the strength and flexibility of the manipulator, maximum
speed and acceleration capability, payload requirement, choice of suitable actuator
and sensing equipment for the control mechanisms intended to be employed. Not
all of these factors have to be considered in the case of a rigid manipulator design.

Issues related to the flexibility of the manipulator, for instance, affecting its
operation and control are not considered in the case of rigid manipulators. How-
ever, recently, attention is being focused towards the vibration control of industrial
robots (White, 1994). The problem of oscillatory behaviour due to manipulator
flexibility has traditionally been solved by mechanically stiffening the manipulator.
However, this leads to an increase in the weight of the manipulator. Thus, a con-
ventional industrial robot does not achieve the objective of the lighter weight
requirement of the flexible manipulator. The issue of flexible manipulator design
and control thus primarily caters for the design of controllers to either compensate
for the structural flexibility or to be robust in the presence of structural flexibility.
It has been shown that using joint position and velocity sensors in a feedback
control scheme for a rigid robot is adequate to ensure satisfactory performance
(Khosla and Kanade, 1988; Seraji and Moya, 1987). However, these sensors may not
be sufficient to provide the necessary information for the control of elastic behaviour
robot. In addition to measuring joint position and velocity, it is desirable to obtain the
state of the end-point as well. Although the deflection information of the manipulator
can be theoretically determined if the dynamic model of the system is available, this
will require high computing power and speed for on-line computation in addition to
the uncertainties usually associated with formulating the dynamic model of the flex-
ible manipulator. This argument for control purposes leads to the requirement of a
suitable measuring system for the flexible manipulator’s end-point.
This chapter describes a laboratory facility for experimental study of a single-
link flexible manipulator using end-point acceleration feedback. Similar experi-
mental manipulators have been constructed in the past (Cannon and Schmitz, 1984;
Hastings and Ravishankar, 1988). The principal originality of the arrangement
presented here is that the deflection of the flexible manipulator is measured and
controlled using an accelerometer at the end-point. Figure 2.1 shows a flow chart of
the design procedure for the flexible manipulator system.
2.2
Manipulator design procedure
A preliminary design procedure for a flexible manipulator system is presented in
this section. A single-link flexible manipulator incorporating a payload mass at the
free end and a lumped inertia at the hub end is considered. The design procedure
presented can also be applied to a manipulator which has more than one joint.
The design of flexible manipulators has been studied for more than about 20
years. Book (1974) studied a design procedure based on strength and stiffness of
the material. One of the results of his study was a rule of thumb for predicting an
upper bound on servo frequency for a rigid manipulator servo control using joint
position and velocity feedback. Recently, the problem of maximising the first
natural resonance frequency of a flexible manipulator has been addressed (Wang,
1994). An increase of maximum 600.25% in the first resonance frequency is
achieved through optimum tapering of a flexible manipulator, which allows it to
rotate three to seven times faster.
24
Flexible robot manipulators: modelling, simulation and control

The main purpose of the design procedure is to relate a set of criteria which are
useful in the design procedure, such as accuracy of end-point, allowable payload
mass, maximum joint velocity, maximum joint acceleration and operating band-
width of the manipulator. This will lead to the preliminary results of the manip-
ulator parameters. The actuating system is also studied and incorporated into the
design procedure. Moreover, the design procedure will also indicate the sig-
nificance of flexibility for the range of the specifications.
The initial values or given parameters are length of the arm, payload mass at
the free-end, lumped inertia at the hub, angle of movement and travel time (or
movement velocity and acceleration). The results of the design procedure are cri-
teria concerning the required DC motor (torque capacity, armature inertia, speed
torque characteristics, power dissipation, etc.), gear ratio and size of the flexible
manipulator. The details of these will be discussed later.
2.2.1
Strength and stiffness of a flexible manipulator
Manipulator strength is the ability to withstand loads which create stress in the
system. These loadings arise from attempts to move and stop the arm and to
maintain a position in a gravity or other force field. These loadings limit the cap-
ability of the manipulator to perform its specified functions by limiting the speed
with which it can move. This speed limitation can yield a basis for comparison
against stiffness limitations.
Start
Length, Payload, Max
Acceleration, and Max
Velocity
Selection of Motor and Gear
Ratio
Arm Strength, Thickness
and Width, Max Allowable
Acceleration
Check for Rigidity and
Natural Frequency
Check for Required
Performance
End
Adjust
Parameters
Figure 2.1
Flexible manipulator design steps
Design of a flexible manipulator experimental system
25

Stiffness is the tendency of the manipulator to resist deflections which may
take the form of vibrations. For a distributed system such as a flexible manip-
ulator, these may take place at an infinite number of frequencies. The values of
these frequencies depend on the boundary conditions as discussed in the chapter
on modelling. Strength is seemingly a more compelling requirement since inade-
quate provisions for strength can result in catastrophic failures if a component
fractures.
Manipulator strength and stiffness are qualitatively affected in the same way
by a number of parameters including payload mass, manipulator’s material density,
length and dimensions of the cross section. Varying one of these parameters so as to
make the manipulator stronger results in a stiffer manipulator. Other parameters
directly affecting only strength include the maximum allowable stress for the
manipulator material, inertial loading from accelerating the manipulator and its
payload, and the gravity or other constant body forces present in the environment.
Stiffness is characterised by the natural frequencies, and its magnitude is addi-
tionally affected by the value of the Young’s modulus for the material used.
Two other factors influencing characterisation of a manipulator are rigidity and
flexibility. The rigidity of the system can be checked by using a rule of thumb
(Book, 1974) which can be summarised as: if the servo frequency w1 of a controller
is less than the first resonance frequency of the manipulator w2=3, then the
manipulator can be considered as rigid. If the servo frequency is between w2=3 and
w2=2, then vibration will occur but will be well damped. If the servo frequency
is greater than w2=2, oscillations with insufficient damping will result. This will
help one to indicate the significance of flexibility and rigidity for a range of
specifications.
For the single-link manipulator proposed, there are only two parameters,
namely thickness and width that can be altered to increase the strength of the
manipulator. The minimum thickness, as discussed later, will limit the stability of
the manipulator.
The proposed manipulator can be considered a pinned-free flexible beam, with
a lumped inertia at the hub, which can bend freely in the horizontal plane but is stiff
in vertical bending and torsion. To avoid the difficulties arising in the case of a
beam with time-varying length, the length l of the manipulator is assumed to be
constant. Moreover, shear deformation, rotary inertia and effect of axial force are
also neglected. A schematic representation of the single-link flexible manipulator
system under consideration is shown in Figure 2.2, where E; I; r; Mp and Ih are
Young’s modulus, the area moment of inertia, the mass density per unit length,
payload mass and hub inertia, respectively. For a given value of payload mass at the
end point of the manipulator and a desired linear acceleration at the centre of the
gravity of the payload mass, the desired moment at the joint (hub) can be calculated
as follows (Book, 1974):
s ¼ aMpw þ aMpl þ r
2
a  g
l þ w þ g


l2  r a  g
ð
Þ
6 l þ w
ð
Þ l3 þ Iha
l þ w
(2.1)
26
Flexible robot manipulators: modelling, simulation and control

where s is the required moment at the hub of flexible manipulator; a the linear
acceleration at the centre of gravity of the payload mass; w the offset between the
centre of gravity of the payload mass and the end-point of the manipulator; g the
acceleration due to gravity.
It is required, now, to find the moment relation for the flexible manipulator
which signifies the strength of the manipulator for a given moment at the joint. For
a given flexible manipulator, the maximum torque which can be applied to the joint
is given by:
tmax ¼ smaxI
C
(2.2)
where tmax is the maximum applied torque; smax the maximum tensile stress
(without changing the shape). This depends upon the material used for flexible
manipulator construction; I is the second moment of inertia of the manipulator;
C the half of the thickness of the manipulator (thickness/2).
For the manipulator to be strong enough to handle the desired torque, the
following criterion must be satisfied:
smax  s
(2.3)
when equality applies to the optimum structure of the manipulator. It follows from
(2.3) that the minimum thickness of the flexible manipulator depends upon the
amount of torque required to be applied at the joint, i.e., upon the linear accelera-
tion at the centre of gravity of the payload mass.
2.2.2
Safety factor
The safety factor for the manipulator design can be defined as:
SF ¼ smax
s
(2.4)
For optimum design, the safety factor is to be unity. Figure 2.3 shows the
relation between the end-point acceleration a and thickness of the manipulator
T with various values of safety factor for a given material (aluminium alloy) with a
payload mass of 10 g, length of 0.96 m, and a hub inertia of 5:86  104 kgm2.
For a given end-point acceleration and safety factor, the thickness of the flexible
manipulator can be found from this diagram for a specific configuration.
Motor
Techo
Hub
E, I, ρ
w
Ih
Mp
Figure 2.2
Outline of the flexible manipulator system
Design of a flexible manipulator experimental system
27

2.2.3
Summary of a flexible manipulator strength design
In the previous sections, it has been shown that the thickness and material of the
flexible manipulator are the parameters that allow one to vary the strength in the
design of a flexible manipulator. These two parameters are combined with load
specifications (length of the manipulator and payload) to set two design parameters
which can be summarised as follows:
●
s, the required moment at the joint to achieve the acceleration at the centre of
gravity of the payload mass;
●
tmax, the maximum torque that can be applied at the joint corresponding to the
strength of the material.
2.3
Transducers and instrumentation
This section describes the selection of suitable transducers and instrumentation;
some of the instrumentations are also developed in the laboratory. It was decided at
the design stage to provide the manipulator with a range of sensors comparable to
those which might be used with a flexible manipulator in an industrial environment.
A realistic set of measurements were considered to be the position and velocity of
the hub, acceleration at the end-point and strain along the length of the manipulator.
Experimental measurements were made to verify the performance parameters
supplied by the manufacturers. The required transducers and instrumentation can
be listed in the following five functional groups:
(a)
Drive actuator and amplifier.
(b)
Joint angle sensor and processing circuit.
(c)
Joint velocity sensor and amplifier.
(d)
Strain gauge and amplifier.
(e)
Accelerometer and amplifier.
Thickness (mm)
Acceleration (m/s-s)
0
20
40
60
80
100
120
140
160
180
200
0.5
1
2
3
4
5
6
SF = 1
SF = 2
SF = 3
SF = 4
Figure 2.3
Relation between end-point acceleration and required thickness
of the flexible manipulator
28
Flexible robot manipulators: modelling, simulation and control

2.3.1
Drive actuator
One of the important factors for the design of a flexible manipulator system is the
selection of a suitable actuator to drive the manipulator. Basically, three types of
drive actuators are commonly used: (1) Shape memory alloy (SMA) actuator, (2)
Fluid power driver, and (3) Electric motor.
SMA actuator is made of a nickel titanium alloy called Nitinol, which is cap-
able of transforming thermal energy into mechanical work by using pulsed direct
electrical current (Yeager, 1984). The basic characteristics of the SMA are outlined
in an article by Hirose et al. (1986). These types of actuators have several advan-
tages (Ikuta, 1990), including (a) simplicity of mechanisms, (b) cleanliness,
(c) silent actuation, (d) distributed actuation capability, (e) sensing ability, (f) low
driving voltage. At present there are three major difficulties associated with the
SMA which prevent its widespread use (Furuya and Shimada, 1991). Firstly, its low
efficiency in transforming electrical power into motion. In general, the efficiency of
a conventional robot system is about 40%–50%, while that of the SMA robot is only
5%–6%. Secondly, the fatigue and shape memory degradation following the con-
tinued use of an SMA. Thirdly, its response speed is determined by the heating and
cooling effects. Despite all its disadvantages, the SMA has successfully been used in
some applications, particularly in harsh environments, such as ocean water (Furuya
et al., 1987, 1988), nuclear and medical (Hirose et al., 1984) applications.
Fluid power drivers for robots are mainly used in the form of full servo-
controlled hydraulic systems for heavy duty operations (for more than 5 hp actua-
tors) and non-servo controlled pneumatic systems for high speed and light duty
operations (Klafter et al., 1989). Hydraulic type actuators are known to be in use
for flexible manipulator applications (Book and Soo, 1989; Chang and Gannon,
1990). The inherent disadvantages of hydraulic systems include fluid leakage and
bulky support equipment, noisy operation, temperature effect on the fluid used and
a complex servo controlled system. Due to its bulky support equipment, the
transportation of such systems becomes difficult when intended for use in different
locations. The response time and maintenance cost (due to leakage problem) of a
hydraulic system is also relatively high. Leakage of oil from a hydraulic system
could also create a hazard to human operator. These systems are highly nonlinear
within the operating range of flexible manipulators and thus need to be considered
during the controller design. Despite all these disadvantages, hydraulic actuators
are used in explosive atmospheres such as in paint spray booths.
Pneumatic drivers are the simplest of all drivers and use compressed air rather
than oil in hydraulic actuators. Due to the compressibility of the air it is difficult to
control the fine motion and especially the vibration in the case of a flexible
manipulator system. IRI (International Robomation Intelligence) manufactured a
pneumatically actuated robot but it had severe vibration problems due to the
compressibility of air (Klafter et al., 1989). Various aspects of fluid powered
drivers are discussed by Mair (1988).
To avoid the problems with the first two methods, an electric motor as an
actuator is selected here for the flexible manipulator system. For a rigid
Design of a flexible manipulator experimental system
29

manipulator system, the driving motor can be selected by using available computer
programs (Potkonjak and Jaksic, 1986). However, for a flexible manipulator
system, such a facility has yet to be found.
After studying different types of motor, a printed circuit armature type
permanent magnet DC motor was selected to drive the flexible manipulator.
The difference in construction enables printed circuit motor to deliver a level of
performance, in both incremental motion and continuous speed applications, which
is not attainable with conventional iron-core and moving coil motor designs (PMI
Motion Technologies, 1988; Critchlow, 1985). The printed armature gives a
smooth torque output even at low speeds and the absence of magnetic material in
the armature gives a linear torque/current relationship. The armature has a low
inertia. Together with the low inertia of the flexible manipulator, this means that
most of the motor energy is being used to perform useful work. This represents the
desirable state of affairs for a flexible manipulator.
In addition to performance advantages, printed circuit motors have a unique
compact shape that can be an attractive alternative when solving tight packing
problems. From a performance standpoint, this shape provides closer physical
coupling and better torsional stiffness. These key factors can optimise the
mechanical design of the flexible manipulator system.
Besides this, there are two other types of motors which could be used in
flexible manipulators (ElectroCraft Corporation, 1985): (a) Stepper motor,
(b) Brushless DC motor.
Stepper motors are very useful and economical, due to their inherent control of
position. However, currently available step motors have some major problems.
These include lack of availability of variety of step angles, fixed step angles, slew
speed problems, jerky speed and inability to handle large inertial loads.
Due to electronic commutation, brushless motors do not suffer from
mechanical wear except in the motor bearings (Inland Motors, 1985). However,
their life expectancy is limited by the reliability of the electronic commutation.
They also need a controller with a more complex configuration than that for a
brush-type torque motor. Economically, they are also expensive (ElectroCraft
Corporation, 1985). In the flexible manipulator system here, the power require-
ments for the drive motor are not too high and with the printed circuit armature the
amount of self-induced emf is much lower than the iron core one. Thus the com-
mutation arcing interference can be removed by using suitable bypass capacitors
and properly isolating the electronic circuits dealing with sensitive feedback
signals.
2.3.2
Selection of motor and gear ratio
In this section, details of the selection of a drive motor will be considered. It is
assumed that the objective is to select the lightest motor that is compatible with the
loading specifications. This objective has an important role in minimising motor
weight and also affects motor armature inertia, power dissipation and total power
30
Flexible robot manipulators: modelling, simulation and control

input to the motor. In this discussion, the following will be assumed to be the
allowable limiting factors.
●
Maximum allowable energy dissipation in the armature over the load cycle,
●
Maximum allowable output torque (at zero acceleration); generally limited by
maximum allowable instantaneous torque of a motor, and
●
Maximum allowable shaft speed.
Thus, torque, speed and temperature will be considered to be the basic limiting
factors of an actuator motor. As is frequently the case in optimisation problems, all
three of these factors enter the process in many situations. If the load motion
characteristics are known, one can select the lightest possible motor with the
desirable characteristics.
2.3.2.1
Manipulator motion behaviour
Before setting the three limiting factors in the previous section, quantitatively the
motion characteristics of the flexible manipulator have to be specified. Broadly,
the objective is to move the flexible manipulator from one position to another in the
shortest possible time. In most material handling tasks the velocity with which a robot
end effector moves is constrained by the task (weight of the payload), weight of
the manipulator and the maximum amount of torque applicable to the joint of the
manipulator. The choice of velocity profile will have an effect on motor weight. There
will be other limiting factors affecting the design as well. These typically include
●
Maximum acceleration of the link for structural integrity of the manipulator
and payload,
●
Maximum velocity of the link (or end-point) for safety.
Within these constraints it is often desirable to minimise the total time of motion
for a specific task.
In the light of the discussion presented above, an approach to simplifying the
problem is proposed here. The objective is an appreciation of what specification of
motor is likely to be required for various classes of applications rather than a pre-
cise methodology for selection of a motor for a specific problem. To achieve this,
the following assumptions are made:
●
The single-link flexible manipulator under consideration is shown in Figure 2.1.
●
The torque supplied by the motor is tm and is a known function of time. The
maximum torque tmmax at the manipulator hub occurs during a period of
maximum acceleration ammax.
●
Velocity profiles va are limited by the maximum acceleration of the manip-
ulator aamax and maximum speed of the manipulator vamax, determined by
external factors and the motor.
●
The actuator motor operation is limited by a maximum instantaneous torque
applied to the armature windings by the magnetic field and a maximum
instantaneous shaft speed vmmax.
Design of a flexible manipulator experimental system
31

However, in due consideration of heating and reliability, these limits should be
set below the absolute maximums of the motor. The motor friction and winding
losses are neglected so that the armature can be modelled as a pure inertia. Thus,
summary of the problem is the following:
●
To drive a load,
●
With a velocity profile characterised by a maximum acceleration and velocity,
●
With a friction free DC motor, operation of which is limited by a maximum
applied torque and speed of the shaft,
●
The applied torque occurs during a period of maximum acceleration.
One of the results of the assumptions made above is the so-called trapezoidal,
or in the case of short motions triangular, velocity profile as illustrated in
Figure 2.4. The trapezoidal profile as shown in Figure 2.4 is divided into three
parts: acceleration, run and deceleration. It may be apparent that the triangular
velocity profile is more efficient than the trapezoidal, as the run time in the latter
seems wasted. However, the energy dissipation in the motor armature for the tra-
pezoidal one is 20.83% less than in the case of a triangular velocity profile.
Moreover, with the triangular velocity profile, the load is accelerated at a fixed rate
and then decelerated at the same. This increases/decreases the velocity with time.
As a velocity limit is associated with the system considered here, this method of
excitation could not be used for larger angle movements.
2.3.2.2
Solution for motor and gear ratio
In this section, the relationship between motor parameters and load specification will
be derived. The results from these relationships will be used for selecting the motor.
Acceleration
Velocity
Displacement
Time
Time
Time
(a)
(b)
Acceleration
Velocity
Displacement
Time
Time
Time
Figure 2.4
Different velocity profiles for flexible manipulator movement:
(a) triangular velocity profile and (b) trapezoidal velocity profile
32
Flexible robot manipulators: modelling, simulation and control

An output torque from a gearbox can be approximated as the torque applied to
the armature by the magnetic field less the torque that is needed to overcome the
inertia of the motor and the gearbox. Assume that the inertia of gearbox can be
neglected or reflected to the motor armature and/or reflected into the maximum
arm torque tamax. Any friction losses in the gearbox and motor must also be
reflected in tamax.
tamax ¼ tmmaxN  JmN2aamax
(2.5)
where N is the ratio of the motor speed to manipulator speed and Jm is the motor
inertia. Temporarily assume that the objective is to pick N to minimise tmmax
according to (2.5). Using a Lagrange multiplier l, this is equivalent to minimising a
performance index PI.
PI ¼ tmmax þ l aamax  tmmaxN þ JmN2aamax


(2.6)
The necessary condition to minimise PI is
dPI
dN ¼ l tmmax þ 2JmN2aamax
ð
Þ ¼ 0
d2PI
dN2 ¼ 2Jmaamax
(2.7)
where N2 is the value of N that minimises tmmax. It follows from above equation
that d2PI=dN2 is non-negative. Therefore, PI is minimum for gear ratio N2 for
which dPI=dN is equal to zero. From (2.7) one yields:
tmmax ¼ 2JmN2aamax
(2.8)
Thus, using (2.5) and (2.8) yields:
tamax ¼ JmN2
2aamax ¼ 0:5N2tmmax
(2.9)
or,
N2 ¼ 2
tamax
tmmax


(2.10)
Substituting for N2 from (2.10) into (2.9) yields:
tamaxaamax ¼ t2
mmax
4Jm
(2.11)
The left-hand-side of (2.11) represents the performance characteristics of the
manipulator. The right-hand-side of (2.11), on the other hand, represents the per-
formance characteristics of the motor. This equation will be used later for sizing of
the motor. When the gear ratio N2 is used, the maximum motor velocity occurs at a
Design of a flexible manipulator experimental system
33

time equal to vamax=aamax and the desired motor speed may exceed vmmax. The gear
ratio that minimises tmmax is N1, where:
N1 ¼ nmmmax
namax
(2.12)
Replacing N in (2.5) by N1 and substituting for N1 from (2.12) yields:
tamax ¼ tmmax
nmmax
namax


 Jm
nmmax
namax

2
aamax
(2.13)
To obtain the motor size, the terms representing the performance character-
istics of the manipulator should be separated from those of the motor in a manner
described below. The maximum required motor power is given by:
Pamax ¼ tamaxnamax
(2.14)
Substituting for tamax from (2.13) into (2.14) yields
Pamax ¼ tmmaxnmmax
ð
Þ  Jmn2
mmax
aamax
namax


(2.15)
Equation (2.15) is the required relation giving the motor performance character-
istics and the manipulator performance characteristics as separate terms. Let:
g1 ¼ tmmaxnmmax
(2.16)
g2 ¼ Jmn2
mmax
(2.17)
Thus, using (2.16) and (2.17), (2.15) can be simplified as:
Pamax ¼ g1  g2
aamax
namax
(2.18)
Equation (2.18) gives the required maximum motor power with the gear ratio given
by N1. If the gear ratio is N2, then the motor performance will be represented by
g3 ¼ t2
mmax
4Jm
(2.19)
The g3 in (2.19) represents the maximum power rate of the motor. Thus, it
follows from (2.11) that the motor power rate will be:
RPm  g3
(2.20)
where, RPm is the required rate of power increase for the manipulator and is equal
to tamax aamax. The equality sign in (2.20) applies if the gear ratio is determined by
the manipulator torque requirements
N ¼ N2
ð
Þ. If the gear ratio is determined
by the manipulator speed requirements N ¼ N1
ð
Þ, then as N1 will be less than N2,
the motor power will be selected using (2.15).
34
Flexible robot manipulators: modelling, simulation and control

Summary of the motor and gear ratio selection
If a flexible manipulator is required with an acceleration range of aamax and
speed range of vamax, then the gear ratio which yields the lightest motor is:
N1 ¼
nmmax
namax


(2.21)
N2 ¼ 2
tamax
tmmax


(2.22)
If N1 is the gear ratio, then the motor must meet the requirements that:
Pmmax 
g1  g2
Ta


(2.23)
where,
Ta ¼ namax
aamax
Similarly, if N2 is the gear ratio, then the maximum manipulator power rate is
given by:
RPmmax  g3
(2.24)
The design parameters g1; g2 and g3 are the motor characteristic parameters
defined as:
g1 ¼ tmmax vmmax ¼ maximum steady state power
(2.25)
g2 ¼ Jmðv2
mmaxÞ ¼ twice of maximum kinetic energy
(2.26)
g3 ¼ ðtmmaxÞ2
4Jm
¼ maximum rate of power increase
(2.27)
It follows from (2.22) that the gear ratio N2
ð
Þ must be chosen so as to provide the
required acceleration. However, this gear ratio may result in over speed of the motor.
If this happens, then (2.21) can be used to prevent the over speed of the motor.
Equation (2.23) gives the required motor power and (2.24) gives the required
rate of motor power increase sufficient for the load requirements to be met. If N1 is
the gear ratio, the maximum power is achieved at full motor speed. If N2 is the gear
ratio, then the motor never reaches full speed and the most demanding condition is
associated with the ability of the motor to accelerate.
The maximum manipulator power, Pamax, and maximum manipulator power
rate, RPamax, are functions of the manipulator characteristics and performance
specifications. These are not related to the choice of the motor or gear ratio, and can
be represented by:
Pamax ¼ tamaxnamax
(2.28)
RPamax ¼ tamaxaamax
(2.29)
Design of a flexible manipulator experimental system
35

In (2.28) and (2.29) tamax need not occur at vamax. However, it must occur
during a period of aamax. Equations (2.25)–(2.27) provide the definition of the
required motor characteristics. These are functions of the motor choice only and
are not related to the arm characteristics and performance specifications of the
manipulator.
Thus, to summarise, (2.23) and (2.24) provide the necessary and sufficient
conditions for adequate motor capabilities for a specified manipulator design and
performance. Equations (2.25)–(2.27) give the required motor characteristics.
Equations (2.28) and (2.29) give the manipulator design and performance char-
acteristics. Equations (2.21) and (2.22) are necessary only for obtaining the gear
ratio or coupling ratio. The associated assumptions are:
●
The velocity profiles are considered to consist of intervals of maximum
acceleration (or deceleration) and intervals of maximum velocity,
●
The maximum torque does not occur during a period of maximum (or mini-
mum) acceleration,
●
The motor is constrained by both a maximum applied torque and a maximum
speed of the armature.
Frictional losses in the gear train and in the motor can be reflected back as part
of the tamax. The parameters g1; g2 and g3 are in general monotonically increasing
functions of weight for a given technology. Thus, to find the lightest motor among a
set of motors, obtain g1; g2 and g3 for each and select the lightest which meets the
inequality constraints of (2.23) and (2.24). Selection of vamax and aamax has a
strong influence on the motor size and motion times of the manipulator.
2.3.2.3
Advantages and disadvantages of gearing system
The main aim of introducing a gear system is to amplify the available torque from
the actuator (here motor). Moreover, there are some other reasons which could be
listed as follows:
●
Minimise power dissipation in the motor armature,
●
Minimise power input to the motor,
●
Maximise output torque to the load,
●
Match desired load speed to maximum motor speed.
All of the above four objectives are closely related to the objective of mini-
mising the motor size for a given flexible manipulator load specification. Despite
these advantages, gear systems have associated practical limitations. These are:
(a)
Addition of inertia at the flexible manipulator hub. This inertia increases with
gear ratio,
(b)
Addition of coulomb friction which if too large, prevents or severely restricts
back driving the actuator. Thus the control of the vibration of a flexible
manipulator through the actuator, sometimes, becomes difficult,
(c)
Tendency to result in gross motions that are limited by the maximum speed of
the actuator rather than the maximum torque,
36
Flexible robot manipulators: modelling, simulation and control

(d)
Backlash,
(e)
Compliance.
Among the above, the effects (a) and (b) are especially severe for highly
flexible manipulators, because these pose limitations on the controller to suppress
higher frequency modes of vibration. Moreover, in non-direct drive robot manip-
ulators, on average about 25% of the motor torque is spent in overcoming the joint
friction (Craig, 1986). In multi-degree of freedom mechanical devices, coulomb
friction causes additional non-linear coupling among the joints and is thus an
additional contributor to the inaccuracies in the performance of a mechanical
manipulator. Whitney et al. (1986) identified four causes of positioning errors,
namely, gear transmission error, gear compliance, backlash and base motion. It has
been reported that actual trajectories of robot manipulators usually differ from the
planned trajectories particularly because of the effect of manipulator deflections
and joint compliance (Tang and Wang, 1988). Effect (c) above would add at least
one more parameter, determining the speed limitation and changing the nature of
the gross motion time expectation to reflect a common speed over a large part
of the gross motion cycle. Effect (d) backlash can result in undesirable instability in
the response of the flexible manipulator or a limit cycle behaviour.
2.3.2.4
Joint friction
The characteristics of the frictional forces between two contacting surfaces often
depend on several factors including the composition of the surfaces, the pressure
between the two surfaces and their relative velocity. An exact mathematical
description of the frictional forces is thus difficult to obtain (Kuo and Tal, 1978).
For practical purposes, however, frictional forces can be divided into three basic
categories: viscous friction, static friction and coulomb friction.
The static and coulomb frictions depend upon the state of motion of the motor.
Static friction Fs appears when the motor is not in motion but is tending to move.
As the motor begins to rotate, the friction drops to coulomb friction Fc. The static
and coulomb frictions are each sometimes called constant friction. Typical motor
friction characteristics are shown in Figure 2.5. In the flexible manipulator system
considered here, the frictional losses are only contributed by the motor. The amount
of friction associated with the motor is determined experimentally, so that the
extent of the problem involved can be visualised. The experimental setup for the
motor friction measurement is shown in Figure 2.6. Figure 2.7 shows the experi-
mentally determined plot of torque versus shaft velocity.
The measured friction shows a similar trend to the theoretical one in
Figure 2.5. The value of Fs and Fc obtained are 0.011 Nm and 0.01 Nm, respec-
tively. The value of viscous coefficient B is 0:029 mNm=rad=s:
2.3.3
Drive amplifier
Amplifiers used to drive DC motors for motion control systems can broadly be
classified as: Linear amplifiers and Switching amplifiers. From a control viewpoint,
a linear amplifier is desirable, since it has linear characteristics with no significant
Design of a flexible manipulator experimental system
37

control lag within the operating bandwidth. However, a significant amount of
power is dissipated in the output transistor of such an amplifier, especially with the
motor under low-speed, high-torque conditions where the motor back emf is low
and the current is high. This is a marked contrast to switching amplifiers. Switching
amplifiers control the motor voltage by varying the duty cycle of the voltage
applied to the motor and operate in either a saturated or off mode and dissipate little
power in either state, giving rise to efficient operation. However, electromagnetic
interference (EMI) problems are often severe with these motors, and the system
tends to be more complex and failure prone. Thus, there is no clear cut superiority
of one type of amplifier over the other.
In general, linear amplifiers are preferred in wide-bandwidth, low-power sys-
tems. They are ideal in driving low inertia motors, where high acceleration currents
are required for short time intervals. Conversely, switching amplifiers are usually
used in larger systems, especially those which require extended operation at low
speed and high torque, where the power dissipation of a linear amplifier would be
high. In the flexible manipulator system considered here, a switching mode ampli-
fier is selected for power input considerations. The associated EMI problem does
introduce noise in the sensitive transducer amplifier systems. Details of this phe-
nomenon are given in Section 2.4. With due consideration of these circumstances, a
linear driving amplifier has been selected which could also be used as a servomotor
Fs
Fc
B =
Torque τ
Shaft velocity ω
δτ
δτ
δω
δω
Figure 2.5
Motor friction characteristics
Counter
Optical speed
sensing system
Motor
Driver
Amplifier
A
Power
Supply
Figure 2.6
Connection diagram for motor friction measurements
38
Flexible robot manipulators: modelling, simulation and control

in velocity position or torque control mode. The motor drive amplifier selected is an
LA5600 manufactured by ElectroCraft Corporation. A connection diagram of the
amplifier with the flexible manipulator system and clamping system is shown in
Figure 2.8.
The main objective here is to use the drive amplifier as a current amplifier to
drive the motor. The input voltage and current output relationship of the amplifier
for input scaling resistors of 4 kW and 7:4 kW as obtained experimentally are shown
in Figure 2.9. It is noted that the relationship is linear through the range of opera-
tion. The corresponding relationship between the amplifier’s input voltage and
produced torque for the two input scaling resistors is shown in Figure 2.10.
For monitoring and control purpose, it is important to measure the applied
torque at the hub of the flexible manipulator. There are various types of torque
transducers that are commonly used for such purposes. These mostly utilise strain
gauges as active elements. Optical methods, where a light beam is modulated by
the applied torque and the electrical output from the photovoltaic detector
provide torque information through the shaft, have also been used recently to
measure the torque.
The motor-driven amplifier has a voltage output that is proportional to the
motor current output (MCO). This, for known voltages, will allow the calculation
of the amount of current output to the motor and hence the torque applied to the hub
of the flexible manipulator. To avoid further inertia at the hub and additional
–60
–40
–20
0
20
40
60
–15
–10
–5
0
5
10
15
Velocity (rad/s)
Applied torque (mN m)
Figure 2.7
Experimentally measured static and dynamic friction characteristics
of the motor U9M4AT
Design of a flexible manipulator experimental system
39

amplifier, this MCO output is used as an indication of the applied torque at the hub.
Experiments were carried out to compare the experimentally measured output
current with the calculated one using the MCO voltage. The amount of developed
torque was also measured using a spring balance. The torque thus measured is
shown in Figure 2.10, together with the torque derived from the MCO voltage and
the measured current. It follows from this result that:
●
The MCO voltage represents the actual current output of the amplifier,
●
The amplifier input voltage and the torque produced by the motor are linearly
related,
●
The motor torque constant specified by the manufacturer is reliable. The dif-
ference between the measured and calculated torque is noticeable outside the
range 0:3; þ0:3
ð
ÞNm. However, the torque requirement in the case of the
flexible manipulator system under consideration is well within this range.
2.3.4
Joint angle sensor and signal conditioning
To control the rigid body motion of the flexible manipulator, the angular position is
to be measured at the root (hub) of the manipulator. There are two commonly used
methods to measure the angular position of a shaft: (a) employing a rotational
potentiometer on the shaft of the motor, (b) using an optical shaft encoder.
Motor
Hub
FAC
RAC
VCS INH MCO
Drive Amplifier
MVO MHO
COM
Micro-switches-
near the hub
Connection Box
Computer
Shaft
Encoder
Accelerometer
MP
Tacho
Figure 2.8
Connection diagram of the motor amplifier with flexible
manipulator system
40
Flexible robot manipulators: modelling, simulation and control

Method (b) gives a direct digital output; however, it requires further processing
circuitry for direct interfacing with the computer bus. The potentiometer method of
measuring hub angular rotation is a troublesome one, due to the inherent noise
associated with the potentiometer. Thus, following a process of studying various
–8
–6
–4
–2
0
2
4
6
8
–10
–8
–6
–4
–2
0
2
4
6
8
10
Voltage (V)
Current (A)
Solid line: direct reading
Dashed line: converted from MCO
(a)
–6
–4
–2
0
2
4
6
–10
–8
–6
–4
–2
0
2
4
6
8
10
Voltage (V)
Current (A)
Solid line: direct reading
Dashed line: converted from MCO
(b)
Figure 2.9
Amplifier input voltage and output current relationship: (a) input
scaling resistor at 4.0 kW and (b) input scaling resistor at 7.4 kW
Design of a flexible manipulator experimental system
41

available shaft encoders, a suitable one with a resolution of 2,048 pulses/revolution,
manufactured by Heidenhain, was selected. The selection process has been mainly
concerned with the size and pulses/revolution of the shaft encoder. The pulse/
revolution can be increased by four times if the Incremental Encoder Interface chip
–8
–6
–4
–2
0
2
4
6
8
–0.5
–0.4
–0.3
–0.2
–0.1
0
0.1
0.2
0.3
0.4
0.5
Voltage (V)
Torque (N m)
Solid line: from directly measured output current
Dotted line: converted from MCO
Dashdot line: manual reading using spring balance
–8
–6
–4
–2
0
2
4
6
8
–0.5
–0.4
–0.3
–0.2
–0.1
0
0.1
0.2
0.3
0.4
0.5
Voltage (V)
Torque (N m)
Solid line: from directly measured output current
Dotted line: converted from MCO
Dashdot line: manual reading using spring balance
(a)
(b)
Figure 2.10
Amplifier input voltage and produced torque relationship: (a) input
scaling resistor at 4 kW and (b) input scaling resistor at 7.4 kW
42
Flexible robot manipulators: modelling, simulation and control

operates in a quadruple mode, in which case the end-point positioning accuracy
increases to 0.736 mm. The experimental setup for system identification requires
angular position information for Motor Drive Amplifier/Controller (LA5600) in
analogue form. A precision interface circuit was thus developed to convert the shaft
encoder output to an analogue signal. The circuit mainly consists of a TCHT2000
Incremental Encoder Interface Chip (Texas Instruments Ltd., 1990) and an
MP7636A Double Buffered 16-bit Multiplexing D/A converter (Micro Power
Systems, 1990). A block diagram of the system is shown in Figure 2.11. The
TCHT2000 can determine the direction and displacement based on two input sig-
nals (Ua1 and Ua2) from the shaft encoder. The MP7636A incorporates a unique
bit decoding technique yielding lower glitch, higher speed and excellent accuracy
over temperature and time. It provides 16-bit data loading through 8 input data lines
for direct interface to 8-bit data buses. The output of the D/A converter is amplified
through a scaling amplifier, with 90  rotation scaled to 8:15 Volts DC output.
2.3.5
Joint velocity sensor and amplifier
Velocity measurement can be obtained by differentiating the output signal from the
angular displacement transducer. This process of differentiation, however, will
amplify any noise in the measurement signal and thus cannot be used for reliability.
Three methods of angular velocity measurement are in common use. These are
(a) tachogenerator method, (b) electromagnetic pulse method, and (c) opto-elec-
tronic method. Among these, due to cost effectiveness and the application view-
point, the iron core or moving coil type tachogenerators are more popular for
measurement of the angular velocity of the manipulator hub (Hastings, 1986;
Kotnik et al., 1988).
As an initial trial, a conventional type tachometer which is mounted on the
same shaft of the driving motor was used. This device, however, was found to
produce a considerable amount of ripple due to its commutation effect. To over-
come this problem, a velocity transducer, was purposely designed for this appli-
cation using the existing tachometer principle. The flexible manipulator under
consideration can rotate up to 180. A circular shape permanent magnet with an
 TCHT 2000
Incremental
Encoder Interface
MP7636A 16-bit
Multiplexing D/A
Converter
Buffer and
Scaling
Amplifier
Logic Control Circuit
Ua1
Ua2
From Shaft
Encoder
Motor
Amplifier /
Controller
Figure 2.11
Block diagram for conversion of shaft encoder output to
analogue form
Design of a flexible manipulator experimental system
43

active range of about 240 and a moving coil around it was then specified for the
velocity transducer. A moving coil permanent magnet ammeter provides the basis
for this. In this, the inertia of the moving coil is negligible in comparison to the
motor inertia. The meter was mounted on a circular ring and then attached to the
motor body so that the motor shaft was in line with the centre of the moving coil.
Finally the motor shaft was attached to the moving coil in a novel way, enabling the
moving coil to rotate with the motor shaft around the permanent magnet.
The moving coil can, thus, produce a voltage which is proportional to the
velocity of the shaft and is free from any ripple. The output of this coil is amplified
using a differential amplifier and a scaling amplifier, as shown schematically in
Figure 2.12. The gain of the scaling amplifier is made variable for adjustment pur-
poses. To check the uniformity of the output voltage developed throughout the range
of angular movement, the system was excited using sinusoidal input from a signal
generator, with the hub being placed at various angle positions. The developed output
from the velocity measurement system was also recorded for various positions.
A comparison of these outputs for various hub positions shows a very small differ-
ence (about 0.1%). Therefore, it can be concluded that the voltage developed by the
velocity sensing system is uniform throughout the range of angular movement.
Calibration of the developed velocity measurement system is not straightfor-
ward. This is due to its restricted angle of movement. To overcome this, an optical
velocity measurement system was used with the existing tachometer for the cali-
bration procedure. First of all, the flexible manipulator and the developed velocity
sensor system were detached from the system. Then existing tachometer was cali-
brated with respect to the optical velocity measurement system previously used for
motor friction measurement (Figure 2.6). Then the developed velocity measure-
ment system was attached to the motor shaft. The hub was then rotated several
times with various velocity ranges, but this time with only 180 of angular move-
ment. The produced output voltage is then calibrated with the existing tachometer
output which is already calibrated. The calibration curve thus obtained is shown in
Figure 2.13.
100k
10k
10k
10k
100k
100k
56k
56k
Differential
amplifier
Scaling
amplifier
Velocity
transducer
Figure 2.12
Schematic diagram for the amplifier used for velocity sensing system
44
Flexible robot manipulators: modelling, simulation and control

2.3.6
Strain gauge and amplifier
To obtain direct modal information, the bending strain on the manipulator during
its motion needs to be measured. There are excellent non-electrical devices avail-
able which allow measurement of the bending strain. However, a wide range of
strain measuring electrical devices are still commonly used due to their practical
advantages (Haslam et al., 1981). The advantages of electrical resistance strain
gauges are: high accuracy, fast speed of response, good linearity and stability,
smallest possible size, cost effectiveness and extended range of operation. The
nature of the experiments carried out in this investigation, requiring precise and fast
measurement of strain, makes these devices suitable candidates. When the manip-
ulator flexes, the strains on opposite sides of the manipulator are of equal magni-
tude and opposite signs and the resistance of one strain gauge increases while that
of the other falls. Over a wide range, the change in resistance is linearly propor-
tional to strain and hence the difference in the two resistances gives a direct
measure of the strain in the manipulator.
A foil type strain gauge CEA-13-250UW-350 manufactured by Micro
Measurements Inc. is selected (Micro Measurements Inc., 1982, 1983). Making
accurate and reliable strain gauge measurements does not depend on the quality of
the strain gauge alone. The gauge can perform to its fullest potential only if the
installation is of comparable quality (Micro Measurements Inc., 1989). Measure-
ment of strain will be performed at four locations on the flexible manipulator. The
specific implementation of strain gauges for the experiment carried out here
0
1
2
3
4
5
6
0
1
2
3
4
5
6
7
8
9
10
Velocity (rad/s)
Output voltage (V)
Figure 2.13
Calibration curve for joint velocity transducer
Design of a flexible manipulator experimental system
45

consists of two active gauges in each location connected in half bridge configura-
tion, as commonly used for measuring planar bending of the beam. This config-
uration is much less sensitive to stresses due to torsion, extension and transverse
bending, and provides higher signal levels with bending than an individual gauge.
Figure 2.14 shows the mounting arrangement and connections for the active gauges
in the half bridge at a single mounting point.
To amplify the strain gauge output, a strain gauge amplifier chip is selected,
which is a purpose designed, hybrid, low noise, low drift, linear DC amplifier.
A block diagram of the strain gauge amplifier setup is given in Figure 2.15. The
performance of the bridges is examined by locking the joint and deflecting the
end-point in fixed increments. These are shown in Figure 2.16. These results
are compared against linear elastic theory, allowing for calibration of the bridge
and amplifier in one step.
2.3.7
Measurement of hub inertia
Hub inertia is an important factor in the flexible manipulator system. It influences
the required torque for a specific movement as well as the frequency of vibration of
Connections to the
Conditioning Amplifier 
G1
G2
R1
R2
Manipulator
side
Amplifier side
Connection
for
amplifier
Bridge supply
+Vcc
–Vcc
G1 and G2 : standard strain gauges
R2 and R1: precision wire wound resistor
Figure 2.14
The mounting arrangement and connections for strain gauges at
single mounting point
46
Flexible robot manipulators: modelling, simulation and control

the flexible manipulator, as shown in the later chapters on modelling and simula-
tion of the system. Due to the irregular shape of the hub, it is difficult to calculate
its inertia theoretically with reasonable accuracy. Thus, an experimental method is
used to obtain the hub inertia. The method used is based on applying a current to
the motor that comprises of a DC and a sinusoidal component. This is described as
follows:
Let the sinusoidal component of the current be:
i tð Þ ¼ Ip sin 2pft
(2.30)
The resulting torque due to the current is:
t tð Þ ¼ KtIp sin 2pft
(2.31)
The hub acceleration which results from the sinusoidal torque is given as:
a tð Þ ¼ KtIp
J
sin 2pft
(2.32)
The hub velocity can thus be obtained by differentiating the above equation with
respect to time, yielding:
n tð Þ ¼  KtIp
2pfJ cos 2pft
(2.33)
or:
n tð Þ ¼ np cos 2pft;
np ¼ KtIp
2pfJ
(2.34)
Thus,
J ¼ KtIi
2pf np
(2.35)
The resulting motor velocity and motor current are measured. The experi-
mental setup used is shown in Figure 2.17. The values of peak current, Ip, and peak
Drive
Amplifier
Bridge
Excitation
Bridge Voltage
Adjustment
Amplifier
Offset
Adjustment
Scaling
Amplifier
Main
Amplifier
Input from
Bridge
To
Bridge
Figure 2.15
The block diagram for strain gauge amplifier for a single point
Design of a flexible manipulator experimental system
47

−25 −20 −15 −10 −5
0
5
10
15
20
25
−3
−2
−1
0
1
2
3
Deflection (mm)
−25 −20 −15 −10 −5
0
5
10
15
20
25
Deflection (mm)
−25 −20 −15 −10 −5
0
5
10
15
20
25
Deflection (mm)
Output (mV)
−25 −20 −15 −10 −5
0
5
10
15
20
25
−2.5
−2
−1.5
−1
−0.5
0
0.5
1
1.5
2
2.5
Deflection (mm)
Output (mV)
−1.5
−1
−0.5
0
0.5
1
1.5
Output (mV)
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
Output (mV)
(b)
(a)
(d)
(c)
Figure 2.16
Manipulator’s deflection versus strain gauge amplifier output: (a) Location-1, (b) Location-2, (c) Location-3 and
(d) Location-4

velocity, Vp, are obtained from the experiment. As the value of the torque constant
and frequency of applied signal are known, the total inertia of the hub and the
motor armature can be calculated using (2.35). The DC component of the current
is adjusted so that the motor runs in the same direction, although its velocity is
modulated sinusoidally.
To avoid the static and dynamic friction, a DC component was added to keep
the motor running in the same direction. The effects of the viscous damping, B, was
minimised by keeping the amplitude of the velocity change at the lowest level. To
increase the experimental accuracy, several measurements are taken at different
frequencies.
2.3.8
Accelerometer and amplifier
To monitor the end-point vibration of the flexible manipulator and use this infor-
mation in a feedback control mechanism, an accelerometer is used. As the
manipulator is light in weight, the accelerometer to be used should be as light and
small as possible to reduce its effect on the manipulator vibration characteristics
(Mace, 1991). Various types of accelerometer are in common use. A 303A min-
iature ICP (Integrated Circuit Piezoelectric) accelerometer manufactured by PCB
Piezotronics Inc., is selected here. The characteristics of this accelerometer cover
the frequency range involved. Moreover, it has a built in FET source follower
which lowers the output impedance level. The low impedance output allows the use
of long cables without an appreciable signal loss or distortion and further avoids the
use of low noise cables.
The main amplifier used is also from PCB Piezotronics Inc., model 480D06.
The features of this amplifier unit include the powering of transducer electronics,
debiasing the output signal from the transducer, amplification of the signal and
indication of normal and faulty system operation. The outline of the system is
shown in Figure 2.18. The accelerometer was mounted at the end-point of the
flexible manipulator using epoxy adhesive. Special care was taken in fixing
the accelerometer, as thickness of the wax, any external particle or improper
surface preparation will affect the frequency behaviour of the system.
Sine wave
with DC bias
Motor Drive
Amplifier
Oscilloscope
Precision
Resistor
Motor
Tacho
Figure 2.17
Experimental setup for the measurement of hub inertia
Design of a flexible manipulator experimental system
49

2.4
Problems and findings
There are three major areas where problems were incurred. These were noise/
interference, gearbox, and torque measurement system. These are briefly discussed.
2.4.1
Noise/interference
To minimise the interference level in transducer and instrumentation systems,
fundamental precautions in the system design were considered, such as optimum
wiring technique, shielding and impedance matching. Despite all these precautions,
there was a considerable amount of noise at the output of the transducer amplifiers
due to their required high gain configuration. After a close observation, two sources
of noise were identified: (a) Interference from AC mains power to the amplifier via
ground and electromagnetic means and (b) the pulse width modulated amplifier
used for driving the motor. This type of amplifier produces intense electromagnetic
field due to its inherent high frequency oscillation.
To solve the first problem, all the amplifier circuit was double shielded and the
AC power source was replaced with a battery to power the amplifier circuits. The
interference from the switching amplifier is of such magnitude that, even after
double shielding the switching amplifier and transducer amplifiers, a considerable
amount of noise appears at the amplifier output. Thus, the switching mode ampli-
fier was replaced with a linear amplifier, which removed the noise problem.
2.4.2
Gearbox
After assembling the structure according to the initial design (Figure 2.19), it
appeared that the gearbox was introducing considerable amount of backlash and
thus producing additional vibration in the flexible manipulator. This induced
vibration has a component which lies within the range of vibration frequency of the
flexible manipulator. Thus, modelling and control of the system with this gearbox
will require consideration of this additional vibration, increasing the complexity
and computation overhead for the controller. Another important factor for
Accelerometer
303A03
Amplifier unit
480D06
+
–
Gain
selection
Constant current diode
Power supply
Output
Figure 2.18
Acceleration measurement at the end-point of the manipulator
50
Flexible robot manipulators: modelling, simulation and control

consideration is that the gearbox has a considerable amount of inertia relative to the
flexible manipulator hub. This will increase the response time of the system con-
siderably. To overcome these problems, the mechanical structure was redesigned
without the gearbox. However, it is worth noting that there exists a gearbox, the so-
called Cyclo gearbox which has a low inertia, high efficiency and low or zero
backlash that could be a suitable candidate for this application.
2.4.3
Torque measurement
Measurement of applied torque to the hub of the flexible manipulator is an
important factor for successful vibration control. There are different types of torque
transducers available commercially. However, the measurement ranges of these
transducers are relatively high and thus they cannot be used for torque measure-
ment with reasonable accuracy. Therefore, a special torque measurement system
was designed (Figure 2.19) in which the motor tachometer and gearbox shaft are
placed on a frictionless bush and the movement of the motor gearbox assembly
with respect to the mounting structure is measured to obtain the applied torque to
the hub. A steel ring was clamped around the gearbox and a spring steel bar was
used to clamp the steel ring to the mounting structure. A pair of strain gauges was
placed on the spring steel bar to measure the strain. The measured strain was then
calibrated in terms of torque.
The strain/torque relationship was found to be linear within the range of
interest. However, there was a considerable amount of friction between the bush
and the mounting structure which introduced a backlash in the measurement sys-
tem. Therefore, the torque was measured instead from the motor drive amplifier
output current, as stated in Section 2.3.3.
2.5
Computer, interfacing and software
The computer used for this experimental setup is an 80286 based microcomputer,
with 2 Mbyte of RAM and 64 Mbytes of hard disk. Data acquisition and control is
Shaft
Encoder
Torque sensing
strain gauge
Gearbox
Motor
Tacho
Figure 2.19
Outline of the initial structural design of the flexible manipulator
system
Design of a flexible manipulator experimental system
51

accomplished through the utilisation of an RTI-815 I/O board. This board could
provide a direct interface between the microcomputer and the actuator and trans-
ducers for a variety of data acquisition, analogue output, digital I/O and time-
related digital I/O applications (through AM9513A counter/timer chip).
The system was later upgraded by a Viglin PC compatible with the IBM PC
(AT). This employed a 32-bit 80486 processor, 40487 co-processor, and 4 Mbytes
of RAM with 50 MHz clock speed. Two separate boards are used for analogue to
digital (A/D) and digital to analogue (D/A) conversion. The adt102 A/D TRAM
(Transputer Module) and dat202 D/A TRAM cards manufactured by Sunnyside
Systems Limited are used for these conversions. The two cards are placed in a
TRAM motherboard TMB16 which in turn is embedded in the host microcomputer.
The board could be configured in different operational modes by programming link
switch C004, which is controlled by a T2 transputer.
2.5.1
RTI-815 board
The RTI-815 board contains a single 12-bit A/D converter with a conversion speed
of 25 ms. Various configurations of its CMOS multiplexer enable it to receive
different numbers of input channels with different voltage ranges. A/D conversion
could be initiated by one of three possible sources: using a software convert com-
mand, applying an external TTL logic level signal or by programming the
AM9513A counter/timer chip. The RTI-815 is able to generate an interrupt when
one of three independent conditions has occurred: when an A/D conversion is
completed, when an overrun condition has occurred or when a given number of
counts have finished.
The board contains two independent voltage output channels, each with its
own 12-bit D/A converter, which could produce an output of 0 to þ10 V or 10 V.
Output settling time is 20 ms for full scale step changes. The board also provides an
8-bit (eight channel) non-latching parallel digital input port and an 8-bit latching
parallel digital output port.
For time related digital I/O applications, the AM9513A counter/timer chip
provides the RTI-815 with three independent 16-bit channels that can be used for
such counter/timer functions as event counting, frequency measurement, single
pulse output and time proportional output.
The board is mapped into the microcomputer’s I/O channel structure as a block
of 16 consecutive bytes, addressable on any unoccupied 16-byte boundary from
address 200H to 3FFH. A combination of PASCAL and assembly language is used
for data acquisition using DMA for off-line identification of the flexible manipulator
system and its controller implementations.
2.5.2
A/D TRAM: adt102
The adt102 is a dual channel, 16-bit, 185 KHz per channel A/D converter module
built in line with the Inmos TRAM format. It is primarily designed to provide a
flexible, low cost method of capturing high speed real-time analogue signals in
laboratory, industrial and instrumentation applications. The signal path comprises
52
Flexible robot manipulators: modelling, simulation and control

an input buffer amplifier and 16-bit dual channel simultaneously sampling the A/D
converter. The input voltage range is 5 V.
The A/D converter is a dual channel 16-bit successive approximation device
with integral sample and hold amplifier and a maximum conversion rate of 185 kilo
samples per second on each channel. Data conversion starts in one of three ways:
from an external trigger signal (high to low transition), an internal software trigger
or continuously from an on board software programmable crystal oscillator. The
converter data output is via the standard Inmos link adapter to any one of the four
links found in TRAM systems (Sunnyside Systems Ltd., 1992a).
2.5.3
D/A TRAM: dat202
The dat202 is a dual channel, 16-bit, 200 KHz per channel D/A converter module
built to the Inmos TRAM format. The signal path comprises the TRAM link
interface logic, 16-bit dual channel simultaneously update digital to analogue
converter followed by a high speed line driver amplifier. The output voltage range
is 5 V.
The D/A converter is a dual channel 16-bit device with simultaneous updating
of both outputs and maximum update rate of 200 KHz on each channel. Data
conversion starts in one of three ways: from external trigger signal (high-to-low
transition), an internal software trigger or continuously from an on board software
programmable crystal oscillator. The digital data to be converted is transferred to
the dat202 outputs via the standard Inmos link adapter to any one of the four links
found in TRAM systems (Sunnyside Systems Ltd., 1992b).
2.6
Summary
The design and development of a flexible manipulator system has been presented.
This is divided into three areas: (a) design and construction of mechanical structure;
(b) choice of proper transducer for specific application; (c) development of required
amplifier and processing circuits and their calibration.
In the design procedure, details are given for the selection of a suitable flexible
manipulator for a given specification. During the design of the drive actuator,
several different types of options were considered and finally a printed circuit
armature-type motor was used owing to its low inertia, low inductance and physical
structure. The selection criteria for a suitable gearbox ratio were developed. This
can be used for any flexible manipulator system. Although, due to the problem of
backlash and inertia, a gearbox was not used, but the developed relations could be
easily used if a Cyclo-type gearbox were available.
Amplifier/Controller LA5600 was used for driving the motor due to its several
features such as motor clamping, directional clamping and output current mon-
itoring provision. For measurement of angular movement, the developed proces-
sing circuit is able to produce both digital and analogue output at the same time.
This enables the use of analogue output from 16-bit D/A as a feedback signal to the
amplifier/controller and digital output to the computer. This circuit could be
Design of a flexible manipulator experimental system
53

modified to control by a microprocessor where the 8-bit output of THCT2000 could
be directly connected with computer data bus. A totally new type of velocity
measurement transducer has been used instead of the conventional tachometer.
A special feature of this transducer is that the output is totally free from any noise
induced from commutator friction, which is very important for low level feedback
signals. In addition, the inertia for this system is also very small. During the choice
of accelerometer and strain gauge, size, weight and frequency range constraints are
considered strictly. The accelerometer includes a built-in FET source follower
which allows for a lower output impedance level.
Due to the irregular shape of the flexible manipulator hub, the hub inertia was
measured experimentally. This is important for modelling and simulation of the
system. Motor friction is also measured experimentally to verify the supplier
datasheet. However this parameter is not considered in the model because the effect
of friction is not significant as compared to the applied torque. Moreover, taking the
friction into account will increase the complexity of the model considerably.
Various types of problems occurred during the construction and testing of this
experimental system. Among them, the noise/interference problem was more ser-
ious than others. To overcome the noise/interference problem, the switching mode
amplifier was replaced by a linear amplifier and all the signal amplifiers were
powered from a battery instead of from the mains power supply. The gearbox was
removed due to unwanted vibration as a result of backlash and inertia problem.
Thus, the initially designed torque measurement system was also abundant due to
stiction. An IBM compatible PC/AT microcomputer in conjunction with an RTI-
815 I/O board is used for this flexible manipulator system. The experimental setup
requires one analogue output to the motor drive amplifier, two analogue inputs
from the velocity transducer and accelerometer and one digital input for angle
information. The conversion speed of 25 ms for A/D conversion and settling time of
20 ms for D/A conversion is satisfactory for the system under consideration.
54
Flexible robot manipulators: modelling, simulation and control

Chapter 3
Dynamic characterisation of a single-link
flexible manipulator
In this chapter, an analytical model of a single-link flexible manipulator, char-
acterised by a set of infinite number of natural modes, is first developed. This is
used to develop state–space and equivalent frequency domain models of the system.
These models can further be used for controller design exercises. A case study
exercise is presented, where an experimental flexible manipulator system is used
for identifying model parameters. The model parameter identification procedure
involves spectral analysis of collected input–output data from the experimental
system. The identified parameters are then used with the developed model and the
model response is verified with the experimental system.
3.1
Introduction
Research in the area of flexible manipulator systems ranges from a single-link
manipulator rotating about a fixed axis (Feliu´ et al., 1992; Hastings and Book,
1987) to three-dimensional multi-link arms (Nagathan and Soni, 1986). However,
experimental work, in general, is almost exclusively limited to single-link mani-
pulators. This is due to the complexity of multi-link manipulator systems, resulting
from more degrees of freedom and the increased interactions between gross and
deformed motions. The uses of dynamic models for flexible manipulator systems
are threefold: forward dynamics, inverse dynamics and controller design.
In practice, dynamic models are mostly formulated on the basis of considering
forward and inverse dynamics. In this manner, consideration is given to computational
efficiency, simplicity and accuracy of the model. Here, a means of predicting changes
in the dynamics of the manipulator resulting from changing configurations and
loading is proposed, where predictions of changes in mode shapes and frequencies can
be made without the need to solve the full determinantal equation of the system. It is
important for control purposes to recognise the flexible nature of the manipulator
system and to build a suitable mathematical framework for modelling of the system.
The flexible manipulator under consideration is a distributed parameter system with
rigid body as well as flexible movements. There are two physical limitations asso-
ciated with the system: (a) the control torque can only be applied at the joint (hub),
(b) only a finite number of sensors of bounded bandwidth can be used and at restricted
locations along the length of the manipulator.

Owing to the principles used, various types of models of flexible manipulator
have been developed (Kanoh et al., 1986). As indicated in Chapter 1, these include
the Lagrange’s equation and modal expansion (Ritz–Kantrovitch) or assumed mode
method, the Lagrange’s equation and finite element method, the Euler–Newton
equation and modal expansion, the Euler Newton equation and finite element, and
the singular perturbation and frequency domain techniques.
In the Lagrange’s equation and modal expansion (Ritz–Kantrovitch method),
the deflection of the manipulator is represented as a summation of modes. Each
mode is assumed as a product of two functions; one dependent on the distance
along the length of the manipulator, and the other, a generalised co-ordinate,
dependent on time. In principle, the summation amounts to an infinite number of
modes. However, for practical purposes, a small number of modes are used. The
Lagrange’s equation and finite element method is conceptually similar to the above
(assumed modes) method. Here the generalised coordinates are the displacement
and/or slope at specific points (nodes) along the manipulator.
The Euler–Newton’s method is a more direct means of calculating system
dynamics. The rate of change of linear and angular momentum is derived expli-
citly, rather than via Lagrange’s equation. Newton’s second law is used to balance
these terms with the applied forces (Raksha and Goldenberg, 1986). In simulation,
or forward dynamics, the linear and angular momentums of the manipulator are the
unknowns while the actuator forces are known. Expressing the former in terms of a
set of assumed modes of finite elements leads to a dynamic model relating the time
dependency of the modes/elements to the external forces. The basic approach in the
Euler–Newton and assumed modes method is to divide the manipulator into a
number of elements and carry out a dynamic balance on each element. For a large
number of elements this is a very tedious process. On the other hand, it is far easier
to include non-linear effects without complicating the basic model.
In the singular perturbation technique, the system characteristic modes are
separated into two distinct groups: a set of low frequency or slow modes and a set
of high frequency or fast modes. In the case of flexible manipulators, the rigid-body
modes are the slow modes and the flexible modes are the fast modes. The dynamics
of the system can then be divided into two sub-systems. The slow sub-system is of
the same order as that of the equivalent rigid manipulator. The slow variables
are considered as constant parameters for the fast sub-system (Khorrami and
O¨ zgu¨ner, 1988).
An alternative to modelling the manipulator in the time domain is to use a
method based on frequency domain analysis (Book and Majette, 1983; Yuan et al.,
1989). This method develops a concise transfer matrix model using the Euler–
Bernoulli beam equation for a uniform beam. The weakness of this method is that it
makes no allowance for interaction between the gross motion and the flexible
dynamics of the manipulator, nor can these effects be easily included in the model.
As a result, the model can only be regarded as approximate. In another approach a
chain of flexible links is modelled by considering flexible multi-body dynamic
approach, based on an equivalent rigid link system, where an equivalent rigid link
system (ERLS), that is the closest possible to the deformed linkage is defined,
56
Flexible robot manipulators: modelling, simulation and control

in order to match at best the requirements for small displacement assumption. As the
choice of ERLS is completely arbitrary, it could introduce artificial kinematic
constraints, which in turn introduces modelling error (Giovagnoni, 1994).
In this chapter an analytical model of a single-link flexible manipulator,
characterised by a set of infinite number of natural modes, is first developed. This is
used to develop state–space and equivalent frequency domain models of the sys-
tem. Experimental model identification involves estimating a transfer function or
some equivalent mathematical description of the system from measurements of the
system input and output. To ensure the acquisition of high-quality data, an
experimental set-up involving a single-link flexible manipulator system is designed
so that the essential aspects of the measurement process requiring particular
attention are considered. These include proper excitation of the structure, choice
and location of suitable transducers, selection of conditioning amplifiers and filters,
and method of signal processing suitable for the system under consideration.
The manipulator is excited, and the corresponding input and output signals
are measured and are used to determine the dynamic characteristics of the system.
As the manipulator is very lightly damped, two independent methods are used to
extract the model parameters. The characteristics thus obtained are then used to
validate the system model by comparing these with the corresponding analytical
results. Investigations are also carried out to study the effect of payload on
the characteristics of the manipulator. Experimental results, thus, obtained are
presented and discussed.
3.2
Dynamic equations of the system
3.2.1
The flexible manipulator system
The flexible manipulator system under consideration is modelled as a pinned-free
flexible beam, with a mass at the hub, which can bend freely in the horizontal plane
but is stiff in vertical bending and torsion. The model development utilises
the Lagrange equation and modal expansion method (Hastings and Book, 1987;
Korolov and Chen, 1989). To avoid the difficulties arising due to time varying length,
the length of the manipulator is assumed to be constant. Moreover, shear deformation,
rotary inertia and the effect of axial force are neglected.
A schematic representation of the single-link flexible manipulator is shown in
Figure 3.1 where a manipulator with a moment of inertia Ib, hub inertia Ih, a linear
mass density r and length l is considered. The payload mass is Mp, and Ip is the
inertia associated with the payload. A control torque tðtÞ is applied at the hub of
the manipulator by an actuator motor. The angular displacement of the manipulator,
moving in the POQ-plane, is denoted by qðtÞ. The height of the link is assumed to be
much greater than its width, thus, allowing the manipulator to vibrate (be flexible)
dominantly in the horizontal direction. The shear deformation and rotary inertia
effects are also ignored.
For an angular displacement q and an elastic deflection u, the total (net) dis-
placement y x; t
ð
Þ of a point along the manipulator at a distance x from the hub can
Dynamic characterisation of a single-link flexible manipulator
57

be described as a function of both the rigid body motion qðtÞ and elastic deflection
u x; t
ð
Þ measured from the line OX:
y x; t
ð
Þ ¼ xq tð Þ þ u x; t
ð
Þ
(3.1)
To obtain equations of motion of the manipulator, the associated energies have to
be obtained. These include the kinetic, potential and dissipated energies.
3.2.2
Energies associated with the system
The energies associated with the system include the kinetic energy, potential
energy and dissipated energy. These are considered for the flexible manipulator
system in this section.
As the contribution of the rotational moment of inertia is neglected, the kinetic
energy of the system can be written as:
Ek ¼ 1
2 Ih _q
2 þ 1
2
ðl
0
@u
@t þ x_q

2
rdx þ 1
2 Mp
@u
@t þ x_q

2
x¼l
(3.2)
Note in the above equation that the first term on the right-hand side is due to the
hub inertia, the second term is due to the rotation of the manipulator with respect to
the origin and the third term is due to the payload mass. Moreover, note that only
small elastic deflection and small angular velocity are considered.
The potential energy is related to the bending of the manipulator. Since the
height of the manipulator under consideration is assumed to be significantly larger
that its thickness, the effects of shear displacements can be neglected. In this
manner, the potential energy of the manipulator can be written as:
Ep ¼ 1
2 EI
ðl
0
@2u
@x2

2
dx
(3.3)
Q′
P′
P
Ih
O
t
q
Q
IP
MP
u
x
Figure 3.1
Schematic representation of the flexible manipulator system
58
Flexible robot manipulators: modelling, simulation and control

where E and I are the Young’s modulus of the manipulator material and the moment
of inertia of the cross-sectional area (second moment of inertia) of the manipulator
respectively. Note that, in general, there will be motion of the manipulator in the
vertical plane as well, in the form of permanent elastic deflections caused by grav-
itational forces. This effect, however, is ignored as the flexibility of the manipulator
has been minimised in the vertical direction.
To consider the mechanism by which energy is absorbed from the structure
during its dynamic operation, let the resistance to transverse velocity be represented
by D x
ð Þ, the resistance to angular velocity at the hub by D0 and the resistance to
strain velocity by Ds. In this manner, the energy dissipated by the damping moment
and force can be written as:
EF ¼ 1
2
ðl
0
D x
ð Þ @u
@t

2
dx þ 1
2
ðl
0
DsI
@3u
@x2@t

2
dx þ 1
2 D0
@2u
@x@t

2
x¼0
(3.4)
It has been shown that the damping matrix satisfies the orthogonality
conditions and thus can be uncoupled in a similar manner as the inertia and
stiffness matrices (Clough and Penzien, 1975). To satisfy the mode superposition
analysis, it is assumed that D x
ð Þ ¼ b0rA, Ds ¼ b1E and D0 ¼ b0Ih, with b0 and b1
representing proportionality constants and A the cross-sectional area of the
manipulator.
3.2.3
The dynamic equations of motion
The non-conservative work for the input torque t can be written as:
W ¼ tq
(3.5)
To obtain the equations of motion of the manipulator, the Hamilton’s extended
principle described by (Meirovitch, 1970):
ðt2
t1
dL þ dW
ð
Þdt ¼ 0
(3.6)
can be used, subject to dq ¼ du ¼ 0 at t1 to t2, where t1 and t2 are two arbitrary
times ðt1 < t2Þ and L ¼ EK  EP is the system Lagrangian. dW represents the
virtual work, dq represents a virtual rotation and du represents a virtual elastic
displacement. Using (3.2), (3.3) and (3.5) the integral in (3.6) can be written as:
d
ðt1
t2
Ek  Ep þ W


dt ¼ 0
The rotary inertia and shear deformation are more pronounced at high
frequencies and more influential on the higher modes (Tse et al., 1978). Since
investigations have shown that the first two modes are sufficient in modelling the
manipulator the rotary inertia and shear deformation effects can be ignored.
Dynamic characterisation of a single-link flexible manipulator
59

Manipulation of the above equation yields the equation of motion of the mani-
pulator as:
EI @4u x; t
ð
Þ
@x4
þ r @2u x; t
ð
Þ
@t2
¼ rx€q
(3.7)
with the corresponding boundary and initial conditions as:
u 0; t
ð
Þ ¼ 0
Ih
@3u 0; t
ð
Þ
@t2@x
 EI @2u 0; t
ð
Þ
@x2
¼ t tð Þ
Mp
@2u l; t
ð
Þ
@x2
 EI @3u l; t
ð
Þ
@x3
¼ 0
Ip
@3u l; t
ð
Þ
@t2@x þ EI @2u l; t
ð
Þ
@x2
¼ 0
u x; 0
ð
Þ ¼ 0
@u x; 0
ð
Þ
@x
¼ 0
(3.8)
Substituting for u x; t
ð
Þ from (3.1) into (3.7) and (3.8) and simplifying yields the
governing equation of motion of the manipulator in terms of y x; t
ð
Þ as:
EI @4y x; t
ð
Þ
@x4
þ r @2y x; t
ð
Þ
@t2
¼ 0
(3.9)
with the corresponding boundary and initial conditions as:
y 0; t
ð
Þ ¼ 0
Ih
@3y 0; t
ð
Þ
@t2@x  EI @2y 0; t
ð
Þ
@x2
¼ t tð Þ
Mp
@2y l; t
ð
Þ
@x2
 EI @3y l; t
ð
Þ
@x3
¼ 0
Ip
@3y l; t
ð
Þ
@t2@x þ EI @2y l; t
ð
Þ
@x2
¼ 0
y x; 0
ð
Þ ¼ 0; @y x; 0
ð
Þ
@x
¼ 0
(3.10)
Equation (3.9) gives the fourth-order partial differential equation (PDE), which
represents the dynamic equation describing the motion of the flexible manipulator.
This equation could also be directly obtained by using Newton’s law (Breakwell,
1980). The Hamilton’s principle, however, is more convenient to use because it
automatically generates appropriate boundary conditions.
60
Flexible robot manipulators: modelling, simulation and control

3.3
Mode shapes
Using the assumed modes method (Meirovitch, 1970; Meyer, 1971), a solution of
the dynamic equation of motion of the manipulator can be obtained as a linear
combination of the product of admissible functions fi x
ð Þ and time-dependent
generalised co-ordinates qi tð Þ:
y x; t
ð
Þ ¼
X
n
i¼0
fi x
ð Þqi tð Þ
for i ¼ 0; 1; . . .; n
(3.11)
where the admissible function, fi, also called the mode shape, is purely a function
of the displacement along the length of the manipulator and qi is purely a function
of time and includes an arbitrary, multiplicative constant. The zeroth mode is the
rigid-body mode of the manipulator, characterising the so-called rigid manipulator
as considered without elastic deflection.
Substituting for y x; t
ð
Þ from (3.11) into (3.9) and manipulating yields two
ordinary differential equations as:
d4fi x
ð Þ
dx4
 b4
i fi x
ð Þ ¼ 0;
d2qi tð Þ
dt2
þ w2
i qi tð Þ ¼ 0
(3.12)
where:
w2
i ¼ EI
r b4
i
(3.13)
and bi is a constant. Let two constants l and e be defined as:
li ¼ bil;
e ¼ Ih
Ml2 ¼ 3Ih
Ib
(3.14)
where M ¼ rl is the mass of the manipulator. The first relation in (3.12) is a fourth-
order ordinary differential equation with a solution of the form:
fi x
ð Þ ¼ Ai sin bix þ Bi sinh bix þ Ci cos bix þ Di cosh bix
(3.15)
To find the natural frequencies and mode shapes of the system, the values of li
satisfying the boundary conditions of the undriven manipulator, t ¼ 0, are deter-
mined together with the corresponding values of the coefficients Ai, Bi, Ci and
Di in (3.15). This requires utilisation of the orthogonality properties and the
mode shapes (Meirovitch, 1970). Using (3.15) and the boundary conditions in
(3.10) yields
ðl
0
Mfi x
ð Þfj x
ð Þdx þ Ihf0
i 0
ð Þf0
j 0
ð Þ þ Mpfi lð Þfj lð Þ þ Ipf0
i lð Þf0
j lð Þ ¼ ITdij
(3.16)
where dij is the Kronecker delta and the normalisation constant IT ¼ Ih þ Ib þ Ip is
the total inertia about the motor armature. Equation (3.15) uniquely defines Ai and,
Dynamic characterisation of a single-link flexible manipulator
61

thus, the magnitude of the mode fi x
ð Þ. From the properties of self-adjoint systems,
the mode shapes must also satisfy the orthogonality condition:
ðl
0
EIf00
i x
ð Þf00
j x
ð Þdx ¼ ITw2
i dij
(3.17)
where f
00
i ¼ d2fi=dx2. The analytical values of natural frequencies wi can then be
obtained using (3.14). e determines the vibration frequencies of the manipulator; a
small e corresponds to the manipulator with lower vibration frequencies. For a very
large e the vibration frequencies correspond to those of a cantilever beam. The effect
of a payload mass, on the other hand, is significant on the vibration frequencies. By
considering the boundary conditions, the mode shape function fi x
ð Þ of the manip-
ulator in (3.15) can thus be obtained.
3.4
State–space model
In the absence of an external torque (3.7) describes the behaviour of the manip-
ulator in free transverse vibration with a solution u x; t
ð
Þ as:
u x; t
ð
Þ ¼
X
n
i¼1
qi tð Þfi x
ð Þ
for i ¼ 1; 2; . . .; n
(3.18)
Utilising (3.2), (3.3) and (3.18), and using the orthogonality properties in (3.16) and
(3.17), the kinetic energy EK and potential energy EP of the system, in terms of the
natural modes, can be obtained as:
EK ¼ 1
2 dijIb
X
n
i¼1
_q2
i
EP ¼ 1
2
X
n
i¼1
X
n
j¼1
qiqj
ðl
0
EIf00
i f00
j dx ¼ 1
2 dijIT
X
n
i¼1
w2
i q2
i
(3.19)
Similarly, using (3.4) and (3.5) the dissipated energy EF and the work W can be
obtained as:
EF ¼ 1
2 Ih þ Ib
ð
Þ2xiw2
i q2
i
W ¼ tq ¼ t
X
n
i¼0
f0 0
ð Þqi
(3.20)
where xi ¼ b0=2wi þ b1wi=2 is the damping ratio.
The dynamic equation of the system can now be formed using the kinetic
energy, potential energy and dissipated energy in the Lagrangian of the energy
expression given as (Tse et al., 1978):
d
dt
@L
@ _qi


 @L
@ _qi
þ @EF
@ _qi
¼ Wi
(3.21)
62
Flexible robot manipulators: modelling, simulation and control

where L ¼ EK  EP, qi represents the time-dependent generalised co-ordinates, Wi
represents the work done by the input torque at the joint in each co-ordinate.
Substituting for EK, EP, EF and W from (3.19) and (3.20) into (3.21) and using
the orthogonality relations in (3.16) and (3.17), an infinite set of decoupled ordinary
differential equations is obtained as:
€q0 ¼ t
IT
€q1 þ 2x1 _q1 þ w2
1q1 ¼ df1 0
ð Þ
dx
t
IT
€q2 þ 2x2 _q2 þ w2
2q2 ¼ df2 0
ð Þ
dx
t
IT
...
(3.22)
where IT is the total inertia of the system, (IT ¼ Ib þ Ih þ Im). In this manner, due
to the distributed nature of the system, there will be an infinite number of modes of
vibration of the flexible manipulator that can be represented. However, in practice,
it is observed that the contribution of higher modes to the overall movement is
negligible. Therefore, a reduced-order model incorporating the lower (dominant)
modes can be assumed. This assumption is justified by the fact that the dynamics of
the system are dominantly governed by a finite number of lower modes (Hughes,
1987). Retaining the first n þ 1 modes of interest, (3.22) can be written in a state–
space form as:
_X ¼ AX þ Bt
(3.23)
where _X ¼ dX=dt,
X T ¼
q0
_q0
q1
_q1
  
qn
_qn
f
g
A ¼
0
1
0
0
0
0
  
0
0
0
0
0
0
0
0
  
0
0
0
0
0
1
0
0
  
0
0
0
0
w2
1
2x1w1
0
0
  
0
0
0
0
0
0
0
1
  
0
0
0
0
0
0
w2
2
2x2w2
  
0
0
...
...
...
...
...
...
  
...
...
0
0
0
0
0
0
  
0
1
0
0
0
0
0
0
  
w2
n
2xnwn
2
6666666666666666664
3
7777777777777777775
BT ¼ 1
IT
0
1
0
df1 0
ð Þ
dx
  
0
dfn 0
ð Þ
dx

	
Dynamic characterisation of a single-link flexible manipulator
63

Let the manipulator be facilitated with three sensors: end-point acceleration sensor,
hub velocity sensor and hub angle sensor. The output vector Y of these sensors is
related to the state vector by
Y ¼ CX
(3.24)
where
C ¼
1
0
df2
1 lð Þ
dx2
0
  
df2
n lð Þ
dx2
0
1
0
df1 0
ð Þ
dx
0
  
dfn 0
ð Þ
dx
0
0
1
0
df1 0
ð Þ
dx
  
0
dfn 0
ð Þ
dx
2
66666664
3
77777775
with f
00
i lð Þ representing the end-point acceleration sensor modal gain and f
0
i 0
ð Þ the
actuator (motor) modal gain.
3.5
Transfer function model
For frequency-domain control design input/output relationships are usually
expressed in a transfer function form. This allows the use of classical design
methods such as Bode plots, Nyquist diagrams and root loci. The open loop transfer
function of the system, G sð Þ, is given as the ratio Y=t. Using the state–space
equations, (3.23) and (3.24), this can be obtained as:
G sð Þ ¼ C sI  A
ð
Þ1B
(3.25)
where I is the identity matrix of the same dimension as A, and s is the Laplace
transform variable. Alternatively, using a method developed by Breakwell (1980),
the transfer function can be obtained directly using (3.13). Taking the Laplace
transform of this equation yields the ordinary differential equation:
EI d4y x; s
ð
Þ
dx4
þ rs2y x; s
ð
Þ ¼ 0
(3.26)
with the transformed boundary conditions as:
y 0; s
ð
Þ ¼ 0
Ihs2y0 0; s
ð
Þ  EIy00 0; s
ð
Þ ¼ t sð Þ
Mpy00 l; s
ð
Þ  EIy000 l; s
ð
Þ ¼ 0
Ips2y0 l; s
ð
Þ þ EIy00 l; s
ð
Þ ¼ 0
where y denotes the Laplace transform of y and y 000 ¼ d3y=dx3. Equation (3.26) has
the general solution
y x; s
ð
Þ ¼ A1sin bx þ B1cos bx þ C1sinh bx þ D1cosh bx
64
Flexible robot manipulators: modelling, simulation and control

where b4 ¼ rs2=EI. Once the constants A1, B1, C1 and D1 and hence y x; s
ð
Þ are
known, it is possible to derive the transfer function from input torque to a particular
output when the latter is expressed as a function of y. All the transfer functions that
can be derived in this manner share a common denominator. In practice, the resulting
expressions are complex transcendental functions of b. For the single-link manip-
ulator with end-point mass and hub inertia the numerator function N l
ð Þ and the
denominator function D l
ð Þ can be represented by their Maclaurin expressions as:
D l
ð Þ ¼
X
1
n¼0
lndnD 0
ð Þ
n!dln
;
N l
ð Þ ¼
X
1
n¼0
lndnN 0
ð Þ
n!dln
As a consequence of the distribution of roots the Maclaurin expansions can be
expressed as a product of quartic factors:
D l
ð Þ ¼ Pd l
ð Þ
X
1
i¼0
1  l4
i
l4
di
 
!
;
N l
ð Þ ¼ Pn l
ð Þ
X
1
i¼0
1  l4
i
lni


where P is a polynomial in l of degree 3 or less. Using the relationship
l4 ¼ rs2l4=EI, the transfer function can be expressed in terms of the Laplace
transform variable s. The final transfer function from the input torque to hub angle q,
input torque to hub velocity _q and input torque to end-point acceleration a can be
written, respectively, as:
q sð Þ
t sð Þ ¼
1
ITs2
X
1
i¼1
1 þ s2=w2
qi


1 þ s2=w2
i
ð
Þ
_q sð Þ
t sð Þ ¼ 1
ITs
X
1
i¼1
1 þ s2=w2
vi


1 þ s2=w2
i
ð
Þ
a sð Þ
t sð Þ ¼ 1
IT
X
1
i¼1
1 þ s2=w2
ai


1 þ s2=w2
i
ð
Þ
(3.27)
where wqi, wvi and wai are real constants corresponding to the system zeros.
3.6
Case study 3.1: experimentation
The set-up used for experimental identification process is shown in Figure 3.2.
This consists of an aluminium flexible manipulator of dimensions and char-
acteristics given in Table 3.1, driven by a high torque printed-circuit armature type
motor. The measurement sensors consist of an accelerometer at the end-point of
the manipulator, a shaft encoder and a tachometer, both at the hub of the manip-
ulator and four strain gauges located along the manipulator length at uniform
spacing.
The outputs of these sensors as well as a voltage proportional to the current
applied to the motor are fed to a PC through a signal conditioning circuit and an
Dynamic characterisation of a single-link flexible manipulator
65

anti-aliasing filter for further analysis. The cut-off frequency of the anti-aliasing
filter is set appropriately to satisfy the sampling requirements. In this process the
measurement chain is adjusted to achieve a good signal-to-noise ratio; the ampli-
tude of the noise is kept within 5 mV with the signal level within 10 V. An RTI-815
Personal
Computer
7
Anti-Aliasing
Filter
Signal
Source
Tacho
Amplifier
4
Charge
Amplifier
Accelerometer
Flexible
Arm
Strain
Gauges
Shaft
Encoder
Motor
Drive
Amplifier
Tachometer
Strain Gauge
Amplifier
Figure 3.2
Experimental set-up for model parameter identification
Table 3.1
Parameters of the flexible manipulator system
Parameter
Symbol
Formula
Value
Length
l
–
960 mm
Width
b
–
19.008 mm
Thickness
d
–
3.2004 mm
Material
–
–
Aluminium
Density
r
Constant
2,710 kg/m3
Cross-sectional area
a
b  d
6.08332  105 m2
Mass
m
a  r  l
0.158264 kg
Second moment of inertia
I
1=12
ð
Þb  d3
5.192381011 m4
Young modulus
E
Constant
71109 N/m2
Rigidity
EI
E  I
3.6866 N m2
Moments of inertia
Ib
1=3
ð
Þ ml2
0.04862 kg m2
Hub inertia
Ih
Measured
5.86104 kg m2
66
Flexible robot manipulators: modelling, simulation and control

multi-function analogue/digital (A/D) and digital/analogue (D/A) board is used as
an input/output (I/O) hardware unit.
3.6.1
Natural frequencies
In case of a flexible manipulator system only the first few modes dominantly
characterise the system behaviour. Considering this, only the parameters associated
with the first two modes are extracted. A sampling period of 5 ms is used which
enables accommodating comfortably the first and second modes within the mea-
surements (Ziemer et al., 1998). In the experimental investigations to follow, two
approaches for obtaining the required information are used:
●
the manipulator system is excited by a random signal from a noise generator as
a signal source over a frequency range of 0–50 Hz, which covers the first two
flexible modes of the system. The responses at various points are measured
with a resolution of 0.448 Hz and fed to the computer through a set of
amplifiers and filters. The collected data is then analysed to obtain the overall
frequency response function (FRF).
●
the manipulator system is excited by a stepped sine wave from a Solartron
1170 spectrum analyser and the response around the pole and zero frequencies
obtained. Here the measurement is made only around the pole and zero fre-
quencies with a resolution of 0.001 Hz. The total FRF plot is obtained by
combining the results of the two methods of measurement.
To obtain the natural frequencies of vibration of the flexible manipulator
system, two methods are introduced and their utilisation explored. The first method
is based on the measurement of the autopower spectral density of the response of
the system. This is referred to as the spectral density method. The second method is
based on the measurements of the frequency response function (FRF) and coher-
ency function of the system. This is referred to as the FRF method.
The autopower spectral density Sxx w
ð Þ of a signal x is defined as:
Sxx w
ð Þ ¼ Sx jw
ð
ÞS
x jw
ð
Þ
(3.28)
where Sxx w
ð Þ is a real-valued function containing the magnitude information only,
Sx jw
ð
Þ is the linear spectrum of x given by the Fourier transform of the time signal
x tð Þ. S
x jw
ð
Þ is the complex conjugate of Sx jw
ð
Þ.
The response of the system can alternatively be described by the frequency
response function. The equations relating the response of a system in random
vibrations to the excitation are given as (Newland, 1996):
Syy w
ð Þ ¼ H jw
ð
Þ
j
j2Sxx w
ð Þ
Sxy jw
ð
Þ ¼ H jw
ð
ÞSxx w
ð Þ
Syy w
ð Þ ¼ H jw
ð
ÞSyx jw
ð
Þ
(3.29)
where Sxx w
ð Þ and Syy w
ð Þ are the autopower spectral densities of the excitation
signal x and the response signal y, respectively. Sxy jw
ð
Þ and Syx jw
ð
Þ are the
Dynamic characterisation of a single-link flexible manipulator
67

cross-spectral densities between these two signals and H jw
ð
Þ is the frequency
response function (FRF) of the system. Let H1 jw
ð
Þ and H2 jw
ð
Þ denote two esti-
mates of the FRF obtained according to the relations in (3.29) as:
H1 jw
ð
Þ ¼ Sxy jw
ð
Þ
Sxx w
ð Þ
and
H2 jw
ð
Þ ¼ Syy w
ð Þ
Syx jw
ð
Þ
(3.30)
The error between the two functions is given by the coherency function defined as:
g2 w
ð Þ ¼ H1 jw
ð
Þ
H2 jw
ð
Þ
(3.31)
In this manner, the coherency function gives a measure of the estimation error
and indicates the level of coherence between the input and the output. If g2 is unity at
some frequency w, this means that the output is entirely due to the input at that
frequency. However, a value of g2 less than unity means that either the output is due
to the input as well as other inputs or the output is corrupted with noise. When
analysing the extracted signal, it is not sufficient to compute the Fourier transform of
the signal. Instead an estimate for the spectral densities and correlation functions
should be obtained, which are used to characterise the extracted signal. Although
these are computed from the Fourier transform, there are additional considerations
concerning their accuracy and statistical reliability. It is, additionally, necessary to
perform an averaging process, involving several samples of the measurement, before
a result is obtained. The two major factors, which determine the number of averages
required, are the statistical reliability of the results and the removal of random noise
from the signal (Bendat and Piersol, 1986; Newland, 1996). To overcome the leakage
problem, a hanning-type window function is employed before processing each block
of data. MATLAB is used here to analyse the data and obtain the FRF, autopower
spectral density and the coherency function (Little and Shure, 1988). This incorpo-
rates the use of an averaging method to remove the noise associated with the signal.
The system was excited using a random signal as the signal source, and the time
response of the system was measured at the hub, at the four strain gauge locations and
at the end-point. These were used to obtain autopower spectral densities of the sig-
nals using (3.28) and the FRFs and coherency functions between the input torque and
the system response at these points using (3.29)–(3.31). These are shown for hub
angle, strain at location-1 and end-point acceleration, in Figures 3.3–3.6. The pole
and zero frequencies of the flexible manipulator system for the first two modes, as
obtained by identifying the peaks (maximum amplitudes) and valleys (minimum
amplitudes) in the autopower spectral density functions and the FRFs, are shown in
Table 3.2 along with the corresponding analytical values.
As seen, a reasonable level of accuracy in the extraction of pole and zero
frequencies from autopower spectrum and the FRF is achieved. It is noted in
Figures 3.4–3.6 that the coherence shows some error around the pole frequencies
with the hub angle measurement and at the lower frequency range with the strain
gauge location-3 and end-point acceleration measurement. There are various rea-
sons for the coherence not to be unity. These include the presence of noise on one
68
Flexible robot manipulators: modelling, simulation and control

or other of the two signals, improper coupling between the structure and the exci-
tation, non-linearity, and low-frequency resolution.
In the measurements above low coherence is mostly due to the lower frequency
resolution of the analysis program and partly due to the non-linearity of the structure.
As the frequency response is measured near the pole and zero regions with better
accuracy using the spectrum analyser, it is observed that there is a small variation in
pole and zero frequencies with the location of measurement. It is also observed that
these frequencies increase with the distance between the excitation of the structure
and the response measurement location. Note that the error in pole frequencies
decreases with increasing the distance between the excitation and the response
measurement location. This is because the two corresponding vibration modes of the
structure become more pronounced in amplitude along the length of the manipulator
with distance from the hub. The error trend in zero frequencies, on the other hand, is
variable with varying the distance between the excitation and the measurement point.
For better accuracy to be achieved near the pole and zero frequencies, the
system was excited with a stepped sinusoid from a spectrum analyser, instead of
0
5
10 15 20 25 30 35 40 45 50
101
Frequency (Hz)
Degree/Hz 
100
10–1
10–2
10–3
(a)
10–6
0
5
10 15 20 25 30 35 40 45 50
Frequency (Hz)
Micro strain/Hz 
10–4
10–5
10–7
10–8
(b)
0
5
10 15 20 25 30 35 40 45 50
Frequency (Hz)
m/s2/Hz 
100
10–1
101
102
(c)
Figure 3.3
Autopower spectrum of signals at various measurement locations:
(a) hub angle, (b) strain at location-3 and (c) end-point acceleration
Dynamic characterisation of a single-link flexible manipulator
69

random signal. The input and output measurements of the system were used to
obtain the FRF around the pole/zero regions. The complete frequency response
function was then obtained by combining the response with random excitation and
the stepped sinusoid excitation. The pole and zero frequencies thus obtained is
shown in Table 3.3. The difference between the values obtained for poles and zeros
using random excitation and stepped sinusoid excitation demonstrate the need for
higher resolution around the pole and zero frequencies for the measurement of FRF.
The pole and zero frequencies thus obtained using the spectrum analyser will be
used in subsequent calculations.
It follows from the transfer functions in (3.27) that the poles and zeros of the
manipulator are functions of the loading conditions. These indicate that the system
poles or natural frequencies are functions of both the hub inertia and payload
whereas the system zeros are functions of payload mass. To investigate this further,
the effect of payload on the pole and zeros of the system was studied at the hub.
This was done by exciting the system with a random torque input and measuring
the response at the shaft encoder with various payloads at the end-point.
0
5
10 15 20 25 30 35 40 45 50
0
10
Frequency (Hz)
dB 
(a)
0
5
10 15 20 25 30 35 40 45 50
–50
0
50
100
150
200
Frequency (Hz)
Degree 
–100
–150
–200
 (b)
0
5
10 15 20 25 30 35 40 45 50
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Frequency (Hz)
(c)
–10
–30
–40
–50
–60
–20
Figure 3.4
Transfer function from torque input to shaft encoder output:
(a) magnitude, (b) phase and (c) coherence
70
Flexible robot manipulators: modelling, simulation and control

The response was analysed to obtain the FRF and, thus the pole and zero frequencies.
Figure 3.7 shows the first two poles and zeros of the manipulator as a function of the
payload. As noted, the variation in each case is predominant for small payloads.
Figure 3.7 demonstrates that as the mass increases there will be a noticeable
change in the response of the manipulator; increased inertia due to additional load
leads to a reduction in the overall displacement of the manipulator in a fixed time
period. It is noted that as the payload increases the system zeros migrate from
cantilever beam frequencies and coverage to the corresponding natural frequencies
of a clamped beam where the latter represents the theoretical limit as the payload
mass tends to infinity. These observations are important in the development of
suitable control strategies for flexible manipulator systems.
3.6.2
Damping ratios
There are several possible forms of damping within the system. These can be
classified into three groups, depending on the source: (a) viscous damping and
Coulomb damping (stiction/friction) associated with driving motor, (b) external
0
5
10 15 20 25 30 35 40 45 50
–10
0
10
20
Frequency (Hz)
dB 
–20
–30
–40
(a)
0
5
10 15 20 25 30 35 40 45 50
–50
0
50
100
150
200
Frequency (Hz)
Degree 
–100
–150
–200
(b)
0
5
10 15 20 25 30 35 40 45 50
0.65
0.7
0.75
0.8
0.85
0.9
0.95
1
Frequency (Hz)
(c)
Figure 3.5
Transfer function from torque input to strain at location-3:
(a) magnitude, (b) phase and (c) coherence
Dynamic characterisation of a single-link flexible manipulator
71

effects such as primarily air resistance as the manipulator rotates and (c) structural
damping due to dissipation of energy within the manipulator material. The Cou-
lomb damping associated with the motor is a constant retarding torque, which
always acts in the opposite direction to the velocity of the manipulator. This is
overcome by introducing a constant voltage bias in the input torque to result in a
torque equal and opposite to the frictional torque. The sign of the bias voltage will
vary according to the direction of motion of the hub. The damping due to air
resistance was not considered in the experiment. However, a comparison of the
model with the system reveals that this damping does not affect the total damping
of the system significantly.
To measure the damping coefficients for the flexible modes a stepped sine input
was used from the spectrum analyser to excite the system and the frequency
response of the system was measured. The frequency response data was then used to
draw a Nyquist plot from which the damping ratio can be obtained. The method is
based on the principle that, in the vicinity of a resonance, the behaviour of a system
is dominantly determined by the corresponding resonance mode being observed
0
5
10 15 20 25 30 35 40 45 50
–10
0
10
20
30
Frequency (Hz)
dB 
–20
–30
(a)
5
10 15 20 25 30 35 40 45 50
0
50
100
150
200
Frequency (Hz)
Degree 
0
(b)
0
5
10 15 20 25 30 35 40 45 50
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Frequency (Hz)
(c)
–200
–150
–100
–50
Figure 3.6
Transfer function from torque to end-point acceleration signal:
(a) magnitude, (b) phase and (c) coherence
72
Flexible robot manipulators: modelling, simulation and control

Table 3.2
Comparison of the analytical and experimental pole and zero frequencies
Method
Measurement
location
Pole 1
(13.499 Hz)
Pole 2
(13.499 Hz)
Zero 1
(13.499 Hz)
Zero 2
(13.499 Hz)
M’sured (Hz)
Error (%)
M’sured (Hz)
Error (%)
M’sured (Hz)
Error (%)
M’sured (Hz)
Error (%)
Spectral
density
Shaft encoder
11.719
6.24
37.109
3.06
3.93
3.06
17.08
5.08
Tachometer
13.207
3.34
36.133
0.76
3.93
3.06
17.568
3.37
Location-1
11.719
6.24
35.156
3.31
3.418
19.05
13.184
26.73
Location-2
13.207
3.34
35.645
1.97
3.906
36.05
20.508
13.97
Location-3
13.207
3.34
36.133
0.76
–
–
20.461
13.71
Location-4
13.207
3.34
36.133
0.76
–
–
20.461
13.71
Accelerometer
13.207
3.34
35.645
1.97
3.418
19.05
20.019
11.25
Average
13.068
3.35
35.993
1.01
3.027
5.43
18.754
4.22
FRF
Shaft encoder
13.207
3.34
36.133
0.76
3.93
3.06
17.09
5.02
Tachometer
13.207
3.34
36.133
0.76
3.93
3.06
18.066
0.40
Location-1
11.719
6.24
36.133
0.76
3.418
19.05
13.184
26.73
Location-2
13.207
3.34
36.133
0.76
3.906
36.05
20.508
13.97
Location-3
13.207
3.34
35.645
1.97
3.93
3.06
21.973
23.11
Location-4
13.207
3.34
35.612
0.69
3.93
3.06
21.973
23.11
Accelerometer
13.207
3.34
36.133
0.76
3.418
19.05
20.02
11.26
Average
13.137
3.9
36.132
0.63
3.209
11.77
18.973
5.44

Table 3.3
Pole and zero frequencies obtained using the spectrum analyser
Measurement
location
Pole 1
(13.499 Hz)
Pole 2
(36.35 Hz)
Zero 1
(3.871 Hz)
Zero 2
(17.994 Hz)
M’sured
(Hz)
Error
(%)
M’sured
(Hz)
Error
(%)
M’sured
(Hz)
Error
(%)
M’sured
(Hz)
Error
(%)
Shaft encoder
13.00
3.99
35.18
3.25
3.90
1.01
17.92
0.41
Tachometer
13.00
3.99
35.19
3.22
3.91
1.36
17.919
0.42
Location-1
13.00
3.99
35.19
3.22
3.91
1.36
17.923
0.39
Location-2
13.00
3.99
35.20
3.19
3.924
1.85
17.925
0.38
Location-3
13.025
3.79
35.42
3.59
3.931
3.09
17.928
0.37
Location-4
13.037
3.7
35.60
3.09
3.935
3.23
17.930
0.36
Accelerometer
13.05
3.59
36.00
0.99
3.96
3.1
17.942
0.39
Average
13.016
3.86
35.397
3.65
3.924
1.85
17.927
0.37
0
20
40
60
80
100
120
0
5
10
15
20
25
30
35
40
Payload (g)
Frequency (Hz) 
Pole-2
(a) 
0
20
40
60
80
100
120
0
2
4
6
8
10
12
14
16
18
20
Payload (g)
Frequency (Hz) 
Zero-2
Zero-1
(b) 
Pole-1
Figure 3.7
Variation of system poles and zeros with a change in payload:
(a) poles and (b) (zeros)
74
Flexible robot manipulators: modelling, simulation and control

(Silva and Maia, 1988). The damping ratios thus obtained using frequency–response
measurements of the system from the torque input to hub angle, hub velocity, end-
point acceleration and strain locations 1–4 are shown in the first two modes in
Table 3.4. Similar to the natural frequencies, the damping ratios also show small
variations with the measurement location. It follows from Table 3.4 that the
damping ratio decreases as the measurement location moves further away from
the hub of the manipulator, where excitation is applied. This is also an indication of
the non-linear behaviour of the system.
3.6.3
Modal gain
To obtain the hub modal slope coefficient, a method based on the construction of
the system transfer function is utilised (Gevarter, 1970; Martin, 1978). The transfer
function of a linear elastic structure can be built up as a set of (alternative) poles
and zeros, the values of which can be obtained experimentally. Thus, the open-loop
transfer function from torque input t sð Þ to the hub angle q sð Þ of the flexible
manipulator can be expressed as:
q sð Þ
t sð Þ ¼
1
ITs2
Y
n
i¼1
ðs2=W2
i Þ þ 2xi þ ðs=WiÞ þ 1


ðs2=w2
i Þ þ 2xi þ ðs=wiÞ þ 1
½

(3.32)
where xi is the damping ratio for mode i, Wi is the frequency of the zero and wi is
the frequency of the pole corresponding to this mode with the zero frequency
falling between two consecutive pole frequencies. Using (3.23) and (3.24) the
open-loop transfer function from the input torque to the hub angle can be written as:
q sð Þ
t sð Þ ¼
1
ITs2 þ 1
IT
X
n
i¼1
f0
i 0
ð Þ

2
s2 þ 2xiwis þ w2
i
(3.33)
Table 3.4
Damping ratios obtained from responses
at different locations
Response location
Damping ratios (xi)
Mode-1
Mode-2
Shaft encoder
0.029
0.170
Tachometer
0.027
0.168
Location-1
0.027
0.162
Location-2
0.026
0.162
Location-3
0.020
0.159
Location-4
0.018
0.1317
Accelerometer
0.018
0.084
Average
0.024
0.148
Dynamic characterisation of a single-link flexible manipulator
75

As the values of xi, wi and Wi can be obtained using the procedure outlined earlier,
the value of f0
i 0
ð Þ can be computed using (3.32) and (3.33).
Evaluating the hub angle and end-point acceleration at a response frequency wi
using (3.33) and the system open-loop transfer function from input torque to end-
point acceleration and manipulating yields the end-point acceleration modal gain
f00
i lð Þ as:
f00
i lð Þ ¼ a jwi
ð
Þ
q jwi
ð
Þ
f0
i 0
ð Þ
w2
i
(3.34)
Thus, the steady-state peak-to-peak ratio of end-point acceleration to hub angle can
be measured experimentally at each resonance frequency and used in (3.17) to obtain
the end-point acceleration sensor modal gain. The sign of the modal gain f00
i 0
ð Þ is
determined by observing whether the end-point acceleration signal is in phase or out
of phase with the shaft encoder signal. Using the estimated system parameters and
the measured frequency response data in (3.32)–(3.34) the corresponding end-point
acceleration modal gains can be obtained. These are shown in Table 3.5.
3.6.4
Model validation
To evaluate the model reliability the output of the model is compared in this section
with the response of the experimental system using a bang–bang input torque. The
system was first excited by the input torque and the system response, consisting of
the hub angle, hub velocity and end-point acceleration, was measured.
Figure 3.8(a) shows a comparison between the experimental system and model
inputs. The torque inputs applied to the model and the system are principally the
same. However, due to the motor drive amplifier behaviour and motor dynamics,
the shape of the torque input to the experimental system is slightly changed. The
corresponding hub angle is shown in Figure 3.8(b). It is noted that the overall
behaviour is similar for both the model and the system. However, some abruptness
in the system behaviour at the half way and at the end of the movement is observed.
As seen in Figure 3.8(c) and (d), the system and model response for the hub-
velocity end-point acceleration in general agree with one another very closely,
during the transient as well as steady-state periods. A number of factors contribute
to the occasional slight disagreements in magnitudes of the responses noticed at
some points. The model, for instance, is a reduced-order one in which only the first
Table 3.5
Model parameters of the flexible manipulator system
Parameter
Symbol
Mode-1
Mode-2
Zero
Wi
3.924 Hz
17.927 Hz
Pole
wi
13.016 Hz
35.397 Hz
Hub modal gain
f0
i 0
ð Þ
4.03
3.36
Acceleration modal gain
f00
i lð Þ
3.19
3.47
Damping ratio
xi
0.024
0.148
76
Flexible robot manipulators: modelling, simulation and control

two modes are included. The torsion and vertical motion as well as higher modes are
not accounted for in the model. The effects of these, however, are present in the
response of the experimental system. Moreover, friction losses and dynamics of
the motor, which can considerably affect the system response, are not accounted for in
the model. Note further that the input torque appearing at the hub of the experimental
system is not exactly the same as the model input torque; a ringing effect and time
delay during the change of state of the system torque input is observed. However, the
model response appears to agree with the system response reasonably well.
3.7
Summary
A procedure for development of a suitable model of a single-link flexible manip-
ulator system has been presented. The Lagrange’s equation and modal expansion
method has been utilised in obtaining an analytical model of the system char-
acterised by an infinite number of modes. It has been shown that for practical
implementation of the model, it is helpful to convert the infinite-dimensional model
to one with a finite number of natural modes. This leads to a matrix differential
0
0.5
1
1.5
–0.05
0
0.05
0.1
0.15
0.2
0.25
N m
Time (s)
–0.1
–0.15
–0.2
–0.25
(a)
0
0.5
1
1.5
0
10
20
30
40
50
60
Degree
Time (s)
(b)
0
0.5
1
1.5
–0.5
0
0.5
1
1.5
2
2.5
3
rad/s
Time (s)
–1
(c)
0
0.5
1
1.5
–20
0
20
40
60
80
m/s2
Time (s)
–40
–60
–80
(d)
Figure 3.8
Model validation plots (broken line: model, solid line:
experimental system): (a) torque profile, (b) hub angle,
(c) hub velocity and (d) end-point acceleration
Dynamic characterisation of a single-link flexible manipulator
77

form of the model, which can be readily converted to a state–space form. Careful
choice of the truncation level based on the physical attributes of the system has
been shown to yield a very good approximation to the behaviour of the full-order
model over a limited frequency range.
Transfer function models have also been obtained. These are useful in frequency
domain controller designs for the system. It has been shown and experimentally
verified that these transfer functions vary with the payload condition of the manip-
ulator. A small change in the payload can result in a significant change in the natural
frequencies of the manipulator. This in a control context can lead to an excessive
deterioration in the performance of a highly tuned control system.
An experimental procedure for identification of a model of flexible manipulator
systems has been presented and verified. This involves obtaining the FRF at various
response locations and using this to extract the model parameters. A reasonable
degree of coherence has been obtained for the measured FRFs. A reduced-order
linear model of the flexible manipulator, including the rigid body mode and two
flexible modes, has been identified. A close agreement between the model and the
system output has been achieved.
78
Flexible robot manipulators: modelling, simulation and control

Chapter 4
Finite difference modelling
This chapter presents numerical approaches based on finite difference (FD)
techniques for dynamic simulation of single-link flexible manipulator systems.
A finite-dimensional simulation of the flexible manipulator system is developed
using an FD discretisation of the dynamic equation of motion of the manipulator.
Structural damping, hub inertia and payload are incorporated in the dynamic
model, which is then represented in a state–space form. Case study simulation
exercises and associated results characterising the dynamic behaviour of the
manipulator are presented and assessed with experimental results in time and
frequency domains.
4.1
Introduction
The finite difference (FD) approach can be used to obtain a numerical method of
solving the governing partial differential equation (PDE) formulation of a single-
link flexible manipulator by developing a finite-dimensional simulation of the
system through a discretisation, both, in time and space (distance) coordinates. The
algorithm allows the inclusion of distributed actuator and sensor terms in the PDE
and modification of boundary conditions. The development of such an algorithm
for a system with no damping has previously been reported (Tokhi and Azad,
1995a). This chapter presents the development of a simulation environment char-
acterising the behaviour of a single-link flexible manipulator incorporating mode
frequency dependent damping. The developed algorithm is implemented digitally
and simulation case studies are provided verifying its performance in characterising
the behaviour of the system under various loading conditions.
4.2
Flexible manipulator system
A description of the single-link flexible manipulator system considered in this
work, is shown in Figure 4.1, where XOY and POQ represent the stationary and
moving coordinates respectively, tðtÞ represents the applied torque at the hub by a
drive motor, MP is the payload mass and Ih is the hub inertia. E, I and r represent
the Young modulus, second moment of inertia and mass density per unit length
of the manipulator, respectively. The gravity effects are neglected, and the motion
of the manipulator is confined to the XOY plane.

The flexible manipulator system can be modelled as a pinned-free flexible beam,
incorporating an inertia at the hub and payload mass at the end-point. The model is
developed through the utilisation of Lagrange equation and modal expansion method
(Hastings and Book, 1987). For an angular displacement q and an elastic deflection,
the total (net) displacement y x; t
ð
Þ of a point along the manipulator at a distance from
the hub can be described as a function of both the rigid body motion q tð Þ and elastic
deflection u x; t
ð
Þ measured from the line OP:
y x; t
ð
Þ ¼ xq tð Þ þ u x; t
ð
Þ
(4.1)
The dynamic equations of motion of the manipulator can be obtained using the
Hamilton’s extended principle (Meirovitch, 1967) with the associated kinetic,
potential and dissipated energies of the system. Ignoring the effects of the rotary
inertia and shear deformation, a fourth-order PDE representing the manipulator
motion can, thus, be obtained as (Azad, 1994):
EI @4u x; t
ð
Þ
@x4
þ r @2u x; t
ð
Þ
@t2
¼ rx€q
(4.2)
To obtain the corresponding boundary conditions, the following must hold:
●
The displacement at the hub {u 0; t
ð
Þ} must be zero.
●
The total forces at the hub must be the same with the applied torque.
●
The shear force at the end-point must be equal to MPð@2uðx; tÞÞ=@t2 (Tse et al.,
1978).
●
The stress at the end-point must be zero, that is, no force should be present at
the free end.
Q
Y
τ(t)
O
P
X
Hub
Ih
Mp
E, I, ρ
u(x,t)
x
θ(t)
Figure 4.1
Description of the flexible manipulator system
80
Flexible robot manipulators: modelling, simulation and control

u 0; t
ð
Þ ¼ 0
Ih
@3u 0; t
ð
Þ
@t2@x
 EI @2u 0; t
ð
Þ
@x2
¼ t tð Þ
Mp
@2u l; t
ð
Þ
@t2
 EI @3u l; t
ð
Þ
@x3
¼ 0
EI @2u l; t
ð
Þ
@x2
¼ 0
(4.3)
where l is the length of the manipulator. Equation (4.2) with the corresponding
boundary conditions in (4.3) represents the dynamic equation of motion of the
flexible manipulator system assuming no damping in the system. In practice,
however, such an effect is always present in the system.
There are several possible forms of damping within the system. These can be
classified into three groups, depending on the source: (a) The manipulator itself has
structural damping due to dissipation of energy within the manipulator material,
(b) viscous damping and Coulomb damping (stiction/friction) associated with the
drive motor and (c) external effects such as, primarily, air resistance as the
manipulator rotates.
To incorporate damping into the governing dynamic equation of the system, a
mode frequency-dependent damping term proportional to ð@3u x; t
ð
ÞÞ=@x2@t can be
introduced (Davis and Hirschorn, 1988). Equation (4.2) can thus be modified to yield:
EI @4u x; t
ð
Þ
@x4
þ r @2u x; t
ð
Þ
@t2
 DS
@3u x; t
ð
Þ
@x2@t
¼ rx€q
(4.4)
where DS is the resistance to strain velocity, that is, rate of change of strain and
DSðð@3u x; t
ð
ÞÞ=@x2@tÞ represents the resulting damping moment dissipated in the
manipulator structure during its dynamic operation. The corresponding boundary
conditions can, thus, be written as:
u 0; t
ð
Þ ¼ 0
Ih
@3u 0; t
ð
Þ
@t2@x
 EI @2u 0; t
ð
Þ
@x2
¼ t tð Þ
Mp
@2u l; t
ð
Þ
@t2
 EI @3u l; t
ð
Þ
@x3
¼ 0
EI @2u l; t
ð
Þ
@x2
¼ 0
(4.5)
Note in Figure 4.1 that as the line OP is tangential to the manipulator at the hub,
point O, the following holds:
@uð0; tÞ
@x
¼ 0
(4.6)
Finite difference modelling
81

Thus, (4.1) and (4.6) yield:
@yð0; tÞ
@x
¼ qðtÞ
Substituting for u x; t
ð
Þ from (4.1) into (4.4) and (4.5), manipulating and simpli-
fying yields the governing equation of motion of the manipulator in terms of
y x; t
ð
Þ as:
EI @4yðx; tÞ
@x4
þ r @2yðx; tÞ
@t2
 DS
@3yðx; tÞ
@x2@t
¼ 0
(4.7)
with the corresponding boundary conditions as:
yð0; tÞ ¼ 0
Ih
@3yð0; tÞ
@x@t2
 EI @2yð0; tÞ
@x2
¼ tðtÞ
Mp
@2yðl; tÞ
@t2
 EI @3yðl; tÞ
@x3
¼ 0
EI @2yðl; tÞ
@x2
¼ 0
(4.8)
and initial conditions as:
yðx; 0Þ ¼ 0
and
@yðx; 0Þ
@x
¼ 0
(4.9)
4.3
Finite difference background
The dynamic equation describing the motion of the flexible manipulator can
be presented by a fourth-order PDE as shown in (4.7). The FD method is used to
solve this equation and develop a suitable simulation environment characterising
the behaviour of the system. As a starting a set of equivalent difference equations
defined by the central finite difference quotients of the FD method are obtained by
discretising the PDE (4.7) along with its associated boundary and initial condi-
tions in (4.8) and (4.9). As shown in Figure 4.2, the process involves dividing the
manipulator into n sections each of length Dx and considering the deflection of
each section at sample times Dt. In this manner, a solution of the PDE is obtained
by generating the central difference formulae for the partial derivative terms of
the response y x; t
ð
Þ of the manipulator at points x ¼ i:Dx; t ¼ j:Dt (Azad, 1994;
82
Flexible robot manipulators: modelling, simulation and control

Burden and Faires, 1989; Lapidus, 1982). The difference equations are provided
in (4.10).
@2yðx; tÞ
@t2
¼ yi; jþ1  2yi;j þ yi;j1
Dt2
@2yðx; tÞ
@x2
¼ yiþ1;j  2yi;j þ yi1;j
Dx2
@3yðx; tÞ
@x3
¼ yiþ2;j  2yiþ1;j þ 2yi1;j  yi2;j
2Dx3
@4yðx; tÞ
@x4
¼ yiþ2;j  4yiþ1;j þ 6yi;j  4yi1;j þ yi2; j
Dx4
@3yðx; tÞ
@t2@x
¼ yi; jþ1  2yi;j þ yi;j1  yi1;jþ1 þ 2yi1;j  yi1;j1
DxDt2
@3yðx; tÞ
@x2@t
¼ yiþ1;j  2yi;j þ yi1;j  yiþ1;j1 þ 2yi;j1  yi1;j1
DtDx2
(4.10)
j = m
 j = 0
i – 2
x = 0
i = 0
Beam segments
(Hub)
i – 1
x = 1
i = n
i + 2
i + 1
i
t = 0
j + 1
Discrete time (dt)
j – 1
j
(End-point)
Boundary conditions 
y(0,t)  = 0
 
–  EI
=  τ(t)
Ih
∂x2
∂t2
∂x
∂x∂t2
∂2y(0,t)
∂2y(l,t)
∂3y(l,t)
∂2y(l,t)
∂4y(0,t)
∂y(x,0)
Initial conditions 
y(x,0) = 0
 
= 0
= 0
= 0
Boundary conditions 
Mp
– EI
∂x3
∂x2
EI
Figure 4.2
Finite difference discretisation in time and space variables
Finite difference modelling
83

where yi;j represents the response yðx; tÞ at x ¼ iDx and t ¼ jDt or yðxi; tjÞ. Note
that, a time–space discretisation is adopted in the evaluation of the response of the
manipulator.
4.4
Finite difference for flexible manipulator
A solution of the PDE in (4.7) can be obtained by substituting for @2y=@t2; @4y=@x4
and @3y=ð@x2@tÞ from (4.10) and simplifying to yield:
EI
Dx4 yiþ2;j  4yiþ1;j þ 6yi;j  4yi1;j þ yi2;j


þ r
Dt2
yi;jþ1  2yi;j þ yi;j1


 DS
Dx2Dt yiþ1;j  2yi; j þ yi1; j  yiþ1;j1 þ 2yi;j1  yi1;j1


¼ 0
or:
yi;jþ1 ¼ c yiþ2;j þ yi2;j


þ b yiþ1;j þ yi1;j


þ ayi;j  yi;j1
þ d yiþ1;j  2yi;j þ yi1;j  yiþ1;j1 þ 2yi;j1  yi1;j1


(4.11)
where a ¼ 2ð6EIDt2Þ=rDx4; b ¼ 4EIDt2=rDx4; c ¼ EIDt2=rDx4; d ¼ DSDt=rDx2.
Equation (4.11) provides the displacement of section i of the manipulator at
time step j þ 1. It follows from this equation that, to obtain the displacements
yn1;jþ1 and yn;jþ1, the displacements of the fictitious points ynþ2;j; ynþ1; j and
ynþ1;j1 are required. These can be obtained using the boundary conditions related
to the dynamic equation of the flexible manipulator. Using the similar manner the
discrete form of the corresponding boundary conditions can be obtained:
y0;j ¼ 0
(4.12)
y1;j ¼ y1;j þ DxIh
EIDt2 y1;jþ1  2y1;j þ y1;j1


þ Dx2
EI tðjÞ
(4.13)
ynþ2;j ¼ 2ynþ1; j  2yn1;j þ yn2;j þ 2Dx3Mp
Dt2EI
yn;jþ1  2yn;j þ yn;j1


(4.14)
ynþ1;j ¼ 2yn;j  yn1;j
(4.15)
4.4.1
The hub displacement
Note that the torque is applied at the hub of the flexible manipulator. Thus, tði; jÞ ¼ 0
for i  1. Using (4.11) and (4.12), the displacement y1;jþ1 can be obtained as:
y1;jþ1 ¼ c y3;j þ y1;j


þ by2;j þ ay1; j  y1; j1
þ d y2;j  2y1;j  y2;j1 þ 2y1;j1


(4.16)
84
Flexible robot manipulators: modelling, simulation and control

Substituting for y1;j from (4.13) into (4.16) and simplifying yields:
y1;jþ1 ¼ K1y1;j þ K2y2; j þ K3y3;j þ K4y1;j1 þ K5y2;j1 þ K6tð jÞ
(4.17)
where:
K1 ¼ cDt2EI þ 2cDxIh þ ða  2dÞDt2EI
Dt2EI þ cDxIh
;
K4 ¼  cDxIh þ ð1  2dÞDt2EI
Dt2EI þ cDxIh
K2 ¼ ðb þ dÞDt2EI
Dt2EI þ cDxIh
;
K5 ¼ 
dDt2EI
Dt2EI þ cDxIh
K3 ¼ 
cDt2EI
Dt2EI þ cDxIh
;
K6 ¼
cDx2Dt2
Dt2EI þ cDxIh
4.4.2
The end-point displacement
Using (4.11) for i ¼ n  1 yields the displacement yn1;j1 as:
yn1;jþ1 ¼ c yn3;j þ ynþ1;j


þ b yn; j þ yn2;j


þ ayn1;j  yn1;j1
þ d yn;j  2yn1;j þ yn2; j  yn; j1 þ 2yn1;j1  yn2;j1


(4.18)
Similarly, using (4.11) for i ¼ n yields the displacement yn;jþ1 as
yn;jþ1 ¼ c yn2;j þ ynþ2;j


þ b ynþ1;j þ yn1;j


þ ayn;j  yn;j1
þ d ynþ1;j  2yn; j þ yn1;j  ynþ1;j1 þ 2yn;j1  yn1;j1


(4.19)
The fictitious displacements ynþ1;j and ynþ2;j, appearing in (4.18) and (4.19),
can be obtained using the boundary conditions in (4.14) and (4.15). ynþ1;j1 can
easily be obtained by shifting ynþ1;j from time step j to time step j  1. Substituting
for ynþ1;j from (4.15) into (4.18) yields the displacement yn1;jþ1 as:
yn1; jþ1 ¼ K7yn3;j þ K8yn2;j þ K9yn1;j þ K10yn;j þ K11yn2;j1
þ K12yn1;j1 þ K13yn;j1
(4.20)
where:
K7 ¼ c
K11 ¼ d
K8 ¼ ðb þ dÞ
K12 ¼ ð1  2dÞ
K9 ¼ ða þ c  2dÞ
K13 ¼ d
K10 ¼ ð2c  b  dÞ
Finite difference modelling
85

Similarly, substituting for ynþ2;j and ynþ1;j from (4.14) and (4.15) into (4.19),
and simplifying yields the displacement yn;jþ1 as:
yn;jþ1 ¼ K14yn2;j þ K15yn1;j þ K16yn;j þ K17yn;j1
(4.21)
where:
K14 ¼
2cDt2EI
Dt2EI þ 2cDx3MP
K15 ¼
4cDt2EI
Dt2EI þ 2cDx3MP
K16 ¼
Dt2EI
Dt2EI þ 2cDx3MP
a þ 2b  4c þ 4cDx3MP
Dt2EI


K17 ¼
Dt2EI
Dt2EI þ 2cDx3MP
2cDx3MP
Dt2EI
þ 1


Equations (4.11), (4.17), (4.20) and (4.21) represent the dynamic equation of
the manipulator for all the grid points (stations) at specified instants of time t in the
presence of hub inertia and payload.
4.4.3
Matrix formulation
Using matrix notation, (4.11), (4.17), (4.20) and (4.21) can be written in a compact
form as:
Yi;jþ1 ¼ AYi;j þ BYi;j1 þ CF
(4.22)
where Yi;jþ1 is the displacement of grid points i ¼ 1; 2; . . .; n of the manipulator at
time step j þ 1, Yi;j and Yi;j1 are the corresponding displacements at time steps j
and j  1, respectively. A and B are constant n  n matrices whose entries depend
on the flexible manipulator specification and the number of sections the mani-
pulator is divided into, C is a constant matrix related to the given input torque and
F is an n  1 matrix related to the time step Dt and mass per unit length of the
flexible manipulator:
Yi;jþ1 ¼
y1;jþ1
y2;jþ1
...
yn;jþ1
2
6666664
3
7777775
;
Yi;j ¼
y1;j
y2;j
...
yn;j
2
6666664
3
7777775
;
Yi;j1 ¼
y1;j1
y2;j1
...
yn;j1
2
6666664
3
7777775
(4.23)
86
Flexible robot manipulators: modelling, simulation and control

A ¼
K1
K2
K3
0
0
  
0
0
ðb þ dÞ
ða  2dÞ
ðb þ dÞ
c
0
  
0
0
c
ðb þ dÞ
ða  2dÞ
ðb þ dÞ
c
  
0
0
...
..
.
..
.
..
.
..
.
..
.
..
.
...
0
0
  
c
b þ d
a  2d
b þ d
c
0
0
  
0
K7
K8
K9
K10
0
0
  
0
0
K14
K15
K16
2
66666666666666664
3
77777777777777775
B ¼
K4
K5
0
0
0
  
0
0
d
2d  1
d
0
0
  
0
0
0
d
2d  1
d
0
  
0
0
..
.
..
.
..
.
..
.
..
.
..
.
..
.
..
.
0
0
  
0
d
2d  1
d
0
0
0
  
0
0
K11
K12
K13
0
0
  
0
0
0
0
K17
2
66666666666666664
3
77777777777777775
C ¼ t j
ð Þ; F ¼ K6
0
  
0
½
T
4.4.4
State–space formulation
A state–space formulation of the dynamic equation of the manipulator can be con-
structed by referring to the matrix formulation. Using the notation for simulation of
discrete-time linear systems, the dynamic equations of the flexible manipulator can
be written as:
xðn þ 1Þ ¼ PxðnÞ þ Qu
yðnÞ ¼ RxðnÞ þ Su
(4.24)
where:
P ¼
A
B
INxN
0NxN
"
#
;
Q ¼
C
0N1
"
#
;
R ¼ IN
0N
½
;
S ¼ 02N
½

u ¼ t
0
  
0
½
T,
yðnÞ ¼ xð1; nÞ    xðN; nÞ; xð1; n  1Þ    xðN; n  1Þ
½

Note that N represents the number of sections.
Finite difference modelling
87

4.5
Case studies
The developed algorithm is implemented to provide few case studies using the
MATLAB environment while considering two damping conditions, DS ¼ 0 and
DS ¼ 0:148. For these case studies, three different scenarios were used:
(a)
The system without hub inertia and payload,
(b)
The system with hub inertia and no payload,
(c)
The system with hub inertia and payload.
The simulation environment was set up to characterise the single-link flexible
manipulator of physical dimensions and characteristics given in Table 4.1. The first
three modes of vibration of the manipulator obtained analytically are at 12.137,
36.132 and 88.86 Hz (Tokhi and Azad, 1995a). For a reasonable level of accuracy
to be achieved, the manipulator is divided into 19 equal-length sections within the
FD discretisation process. To demonstrate the effect of damping the value of DS is
considered as 0.148. The time response as well as the corresponding power spectral
density (PSD) of the system under each condition are recorded and presented to
assess the effect of damping for various payloads.
For the case studies, a bang–bang torque input is used to excite the system. The
torque has an amplitude of  0.3 N m with a duration of 0.6 s and is shown in
Figure 4.3. The total simulation time is set to 4.0 s and the system behaviour at the
hub and end-point were observed and recorded.
4.5.1
Case study 4.1: flexible manipulator without hub
inertia and payload
To study the behaviour of FD simulated flexible manipulator system without hub
inertia and payload, two damping conditions, namely, DS ¼ 0 and DS ¼ 0:148, are
considered. As mentioned earlier the case study will be performed over a duration
of 4 seconds with a bang–bang input torque.
Table 4.1
Parameters and characteristics of the flexible
manipulator system
Parameter
Value
Length
960.0 mm
Width
19.008 mm
Thickness
3.2004 mm
Mass density per unit volume
2,710 kg m3
Second moment of inertia, I
5.1924  1011 m4
Young modulus, E
71  109 N m2
Moment of inertia, Ib
0.04862 kg m2
Hub inertia, Ih
5.86  104 kg m2
88
Flexible robot manipulators: modelling, simulation and control

Figures 4.4 and 4.5 show the system responses where the flexible manipulator
is considered without hub-inertia and payload. Figure 4.4 shows the time-domain
representation and corresponding spectral density of the hub-angle with the struc-
tural damping set to DS ¼ 0. The average angular displacement is about 30.05.
It is noted that without structural damping, the system response is persistently
oscillatory. The first three resonant modes are found to be at 11.965, 38.28 and
(a)
(b)
0.3
0.2
0.1
0
Torque (N m)
–0.1
–0.2
–0.3
10–1
10–2
10
20
30
40
50
Frequency (Hz)
60
80
70
90
100
0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
Magnitude
Figure 4.3
Bang-bang input signal: (a) time domain and (b) spectral density
Finite difference modelling
89

57.43 Hz, respectively. Moreover, a fourth resonance mode has also appeared at
78.96 Hz. Figure 4.5 shows the hub-angle with the structural damping DS ¼ 0:148.
It is clear that the structural damping considerably attenuates the oscillatory
behaviour. The steady-state angular displacements have remained at 30.05. It is
also observed from the spectral densities that structural damping does not affect the
35
30
25
20
15
Angle (°)
Magnitude
10
5
0
100
10–1
10–2
10–3
0
0.5
1
1.5
2
2.5
Time (s)
3
3.5
4
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
(a)
(b)
Figure 4.4
Hub-angle response without hub-inertia and payload (DS ¼ 0):
(a) time domain and (b) spectral density
90
Flexible robot manipulators: modelling, simulation and control

resonance modes of vibration. It only affects the magnitude of vibration. The higher
the structural damping is set, the faster the vibration decays and the lower the
vibration level gets. Similar observations are noted in the corresponding hub-
velocity, end-point residuals and end-point acceleration as shown in Figures 4.6
and 4.7, Figures 4.8 and 4.9 and Figures 4.10 and 4.11, respectively.
35
30
25
20
15
10
5
00
0.5
1.5
2
2.5
Time (s)
3
3.5
4
1
100
10–1
10–2
10–3
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
Angle (°)
Magnitude
(a)
(b)
Figure 4.5
Hub-angle without hub-inertia and payload (DS ¼ 0:148):
(a) time domain and (b) spectral density
Finite difference modelling
91

4.5.2
Case study 4.2: flexible manipulator with hub inertia
and no payload
To study the behaviour of the FD simulated flexible manipulator system with hub
inertia and without payload, two damping conditions, namely DS ¼ 0 and
DS ¼ 0:148 are considered. In this case, the study should also be performed over a
0.2
0.15
0.1
0.05
0
–0.05
–0.1
–0.15 0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
10–1
10–2
10–3
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
Velocity (rad/s)
Magnitude
(a)
(b)
Figure 4.6
Hub-velocity without hub-inertia and payload (DS ¼ 0):
(a) time domain and (b) spectral density
92
Flexible robot manipulators: modelling, simulation and control

duration of 4 seconds with a bang–bang input torque. The hub inertia considered for
this study is 5.86  104 kg m2 that is obtained from an experimental system.
Figures 4.12 and 4.13 show the system responses of the hub-angle of the
system while considering a hub-inertia but without any payload at the end-point.
Figure 4.12 shows the time-domain representation and corresponding spectral
0.14
0.12
0.1
0.08
0.06
0.04
0.02
0
–0.02
–0.04
–0.060
0.5
1
1.5
2
2.5
Time (s)
Velocity (rad/s)
3
3.5
4
10–2
10–3
10–4
Magnitude
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
(b)
(a)
Figure 4.7
Hub-velocity without hub-inertia and payload (DS ¼ 0:148):
(a) time domain and (b) spectral density
Finite difference modelling
93

density of the hub-angle, with the structural damping set to DS ¼ 0. The inclusion
of the hub-inertia affects the energy distribution along the flexible manipulator. As
a consequence of this, the average hub-angle is slightly lower than that without
hub-inertia. Moreover, with the hub-inertia, the magnitude of vibration increases.
Furthermore, the resonant modes occur at lower frequencies. The first three modes
8
×10–3
10–1
10–2
10–3
10–4
10–5
10
20
30
40
60
Frequency (Hz)
70
80
90
100
50
6
4
2
0
–4
–6
–8
–2
Displacement (m)
–10
0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
Magnitude
(b)
(a)
Figure 4.8
End-point residuals without hub-inertia and payload (DS ¼ 0):
(a) time domain and (b) spectral density
94
Flexible robot manipulators: modelling, simulation and control

are found to be at 11.961, 31.1 and 59.82 Hz. The structural damping, on the other
hand, determines how fast the vibration is damped and to what level (Figure 4.13).
Similar observations are made in the corresponding hub-velocity, end-point resi-
duals and end-point acceleration are shown in Figures 4.14 and 4.15, Figures 4.16
and 4.17 and Figures 4.18 and 4.19, respectively.
4
3
2
1
0
–1
–2
–3
–4
–5
0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(b)
(a)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
Magnitude
Displacement (m)
10–1
10–2
10–3
10–4
10–5
×10–3
Figure 4.9
End-point residuals without hub-inertia and payload (DS ¼ 0:148):
(a) time domain and (b) spectral density
Finite difference modelling
95

4.5.3
Case study 4.3: flexible manipulator with hub inertia and
payload of 10 g
The behaviour of the FD simulated flexible manipulator system is studied in this
case study with hub inertia and a payload of 10 g under two damping conditions,
namely, DS ¼ 0 and DS ¼ 0:148. In this case, the study should also be performed
150
100
50
Acceleration (m/s-s)
0
–50
–100
0
0.5
1
1.5
2
Time (s)
2.5
3
4
3.5
(b)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
(a)
Magnitude
10–1
101
100
Figure 4.10
End-point acceleration without hub-inertia and payload (DS ¼ 0):
(a) time domain and (b) spectral density
96
Flexible robot manipulators: modelling, simulation and control

over a duration of 4 s with a bang–bang input torque. The hub inertia considered for
this study is 5.86  104 kg m2 that is obtained from an experimental system.
Figures 4.20 and 4.21 show the hub-angle of the system considering a hub-
inertia and 10 g of payload. Figure 4.20 shows the time-domain representation and
corresponding spectral density of the hub-angle with the structural damping set to
DS ¼ 0, while Figure 4.21 shows the same response for DS ¼ 0:148. The inclusion
50
0
–50
Acceleration (m/s-s)
Magnitude
–100
0
0.5
1
1.5
2
2.5
Time (s)
3
3.5
4
(b)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
101
100
10–1
10–2
(a)
Figure 4.11
End-point acceleration without hub-inertia and payload
(DS ¼ 0:148): (a) time domain and (b) spectral density
Finite difference modelling
97

of payload affects further the energy distribution along the flexible manipulator. As
a result the average hub-angle is considerably lower than that without the payload.
Moreover, with a payload the magnitude of the vibration is decreased. Furthermore,
the resonance modes of vibration occur at lower frequencies. The first three modes
35
30
25
20
15
10
Angle (°)
5
0 0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(b)
(a)
10
Magnitude
20
30
40
50
60
70
Frequency (Hz)
80
90
100
100
10–1
10–2
10–3
Figure 4.12
Hub-angle with hub-inertia and without payload (DS ¼ 0):
(a) time domain and (b) spectral density
98
Flexible robot manipulators: modelling, simulation and control

of the system are found to be at 9.57, 28.71 and 55.04 Hz. Similar observations are
made in the corresponding hub-velocity, end-point residuals and end-point accel-
eration are shown in Figures 4.22 and 4.23, Figures 4.24 and 4.25 and Figures 4.26
and 4.27, respectively.
35
30
25
20
15
10
Angle (°)
5
0
4
3
2
1
0
–1
–2
–3
–4
–5
5
0
0.5
1
1.5
2
Time (s)
Time (s)
2.5
3
3.5
4
×10–3
(a)
(b)
0
0.5
1
1.5
2
2.5
3
Displacement (m)
3.5
4
Figure 4.13
Hub-angle with hub-inertia and without payload (DS ¼ 0:148):
(a) time domain and (b) spectral density
Finite difference modelling
99

4.5.4
Case study 4.4: resonance frequency of the
flexible manipulator
In this case study the resonance frequency behaviour of the FD simulated flexible
manipulator system is studied under three conditions: (a) without hub inertia and
payload; (b) with hub inertia and no payload; and (c) with hub inertia and payload
(b)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
Magnitude
10–1
10–2
10–3
10–4
0
0.5
0.25
0.2
0.15
0.1
0.05
Velocity (rad/s)
0
–0.05
–0.1
–0.15
–0.2
–0.25
1
1.5
2
Time (s)
2.5
3
3.5
4
(a)
Figure 4.14
Hub-velocity with hub-inertia and without payload (DS ¼ 0):
(a) time domain and (b) spectral density
100
Flexible robot manipulators: modelling, simulation and control

of 10 g. Each of these conditions is assessed for three structural damping
conditions, namely, DS ¼ 0, DS ¼ 0:024 and DS ¼ 0:148. The system is excited
with a bang–bang input torque and the hub inertia considered for this study is
5.86  104 kg m2.
The resonance modes of the system in relation to structural damping, hub-
inertia and payload as extracted from last three case studies are summarised in
0.2
0.15
0.1
0.05
Velocity (rad/s)
0
–0.05
–0.1
0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
10–2
10–3
10–4
10
20
30
40
50
60
Frequency (Hz)
70
80
90
100
(b)
(a)
Magnitude
Figure 4.15
Hub-velocity with hub-inertia and without payload (DS ¼ 0:148):
(a) time domain and (b) spectral density
Finite difference modelling
101

Table 4.2. It is noted that both hub-inertia and payload resulted in a reduction in
frequency of the resonance modes of the system. Structural damping, on the other
hand, does not affect the frequency of the resonance modes. However, as noted
earlier, it affects the speed of decay and level of vibration.
0.015
0.01
0.005
Displacement (m)
0
–0.005
–0.015
0
0.5
1
1.5
2
2.5
Time (s)
3
3.5
4
–0.01
(b)
(a)
10
Magnitude
20
30
40
50
60
70
Frequency (Hz)
80
90
100
10–3
10–2
10–1
10–4
10–5
Figure 4.16
End-point residuals with hub-inertia and without payload (DS ¼ 0):
(a) time domain and (b) spectral density
102
Flexible robot manipulators: modelling, simulation and control

4.6
Summary
A numerical method of solution of the governing PDE describing the characteristic
behaviour of a flexible manipulator system incorporating the effects of hub inertia,
payload and damping has been presented and discussed. An FD simulation
5
×10–3
4
3
2
1
0
–1
–2
–3
–4
–5
0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(b)
(a)
10
Magnitude
Displacement (m)
20
30
40
50
60
70
Frequency (Hz)
80
90
100
10–1
10–2
10–3
10–4
10–5
Figure 4.17
End-point residuals with hub-inertia and without payload
(DS ¼ 0:148): (a) time domain and (b) spectral density
Finite difference modelling
103

algorithm characterising the behaviour of the system has been developed with the
incorporation of hub inertia and payload as well as structural damping.
Simulation results with and without the effects of the hub inertia show that
the steady-state level of system response is slightly reduced with the hub inertia.
The levels of vibration at the resonant modes of the system, on the other hand, have
been found to increase with the hub inertia leading to a longer settling time in the
200
150
100
50
0
–50
–100
Acceleration (m/s-s)
Magnitude
–150
102
101
100
10–1
–200 0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(b)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
(a)
Figure 4.18
End-point acceleration with hub-inertia and without payload
(DS ¼ 0): (a) time domain and (b) spectral density
104
Flexible robot manipulators: modelling, simulation and control

system response. Moreover, the frequencies at the resonance modes of the system
decrease with the inclusion of hub inertia.
It has been demonstrated that by incorporating a payload at the end-point, the
angular displacement of the flexible manipulator is reduced. The level of vibrations
at the resonant modes varies with the load. Moreover, higher loads result in lower
resonance frequencies.
Magnitude
101
100
10–1
10–2
(b)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
Acceleration (m/s-s)
0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(a)
60
40
20
0
–20
–40
–60
–80
–100
Figure 4.19
End-point acceleration with hub-inertia and without payload
(DS ¼ 0:148): (a) time domain and (b) spectral density
Finite difference modelling
105

It has been demonstrated that incorporating a mode frequency-dependent
damping term within the governing dynamic equation of the flexible manipulator
leads to a more realistic characterisation of the behaviour of the system. The
vibrations disappear with time as the energy along the flexible manipulator is
Magnitude
100
10–1
10–2
10–3
(b)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
0
30
25
20
15
10
Angle (°)
5
0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(a)
Figure 4.20
Hub-angle with hub-inertia and payload Mp ¼ 10 g (DS ¼ 0):
(a) time domain and (b) spectral density
106
Flexible robot manipulators: modelling, simulation and control

absorbed. The results of this investigation have shown that a reasonably accurate
simulation environment characterising the behaviour of a flexible manipulator
system for use as a test and verification platform of controller designs has been
successfully developed.
30
25
20
15
Angle (°)
10
5
00
0.5
1
1.5
2
2.5
Time (s)
3
3.5
4
Magnitude
100
10–3
10–2
10–1
(b)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
(a)
Figure 4.21
Hub-angle with hub-inertia and payload Mp ¼ 10 g (DS ¼ 0:148):
(a) time domain and (b) spectral density
Finite difference modelling
107

0.25
0.2
0.15
0.1
0.05
0
–0.05
–0.15
–0.1
Velocity (rad/s)
Magnitude
–0.2
10–1
10–2
10–3
10–4
–0.25 0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(b)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
(a)
Figure 4.22
Hub-velocity with hub-inertia and payload Mp ¼ 10 g (DS ¼ 0):
(a) time domain and (b) spectral density
108
Flexible robot manipulators: modelling, simulation and control

0.14
0.12
0.1
0.08
0.06
0.04
0.02
0
Velocity (rad/s)
Magnitude
–0.02
10–2
10–3
10–4
10–5
–0.04 0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(b)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
(a)
Figure 4.23
Hub-velocity with hub-inertia and payload Mp ¼ 10 g (DS ¼ 0:148):
(a) time domain and (b) spectral density
Finite difference modelling
109

8
×10–3
6
4
2
0
Displacement (m)
Magnitude
10–2
10–1
10–3
10–4
10–5
–2
–4
–6
–8
0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(b)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
(a)
Figure 4.24
End-point residuals with hub-inertia and payload Mp ¼ 10 g
(DS ¼ 0): (a) time domain and (b) spectral density
110
Flexible robot manipulators: modelling, simulation and control

3
×10–3
2
1
0
Displacement (m)
Magnitude
10–3
10–2
10–1
10–4
10–5
–3
–2
–1
0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(b)
(a)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
Figure 4.25
End-point residuals with hub-inertia and payload Mp ¼ 10 g
(DS ¼ 0:148): (a) time domain and (b) spectral density
Finite difference modelling
111

Acceleration (m/s-s)
Magnitude
102
101
100
10–1
–150
–100
–50
150
100
50
0
0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(b)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
(a)
Figure 4.26
End-point acceleration with hub-inertia and payload Mp ¼ 10 g
(DS ¼ 0): (a) time domain and (b) spectral density
112
Flexible robot manipulators: modelling, simulation and control

Acceleration (m/s-s)
Magnitude
100
101
10–1
–60
–50
–40
–30
–20
–10
40
30
20
10
0
0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(b)
(a)
10
20
30
40
50
60
70
Frequency (Hz)
80
90
100
Figure 4.27
End-point acceleration with hub-inertia and payload Mp ¼ 10 g
(DS ¼ 0:148): (a) time domain and (b) spectral density
Finite difference modelling
113

Table 4.2
Resonance modes of the flexible manipulator in relation
to structural damping, hub-inertia and payload
Conditions
DS
Mode 1
(Hz)
Mode 2
(Hz)
Mode 3
(Hz)
Without hub-inertia
and payload
0
11.965
38.28
57.43
0.024
11.965
38.28
57.43
0.148
11.965
38.28
57.43
With hub-inertia
and without
payload
0
11.961
33.10
59.82
0.024
11.961
33.10
59.82
0.148
11.961
33.10
59.82
With hub-inertia
and a payload
of 10 g
0
9.57
28.71
55.04
0.024
9.57
28.71
55.04
0.148
9.57
28.71
55.04
114
Flexible robot manipulators: modelling, simulation and control

Chapter 5
Finite element modelling
This chapter describes the development of finite element simulation algorithm of a
single-link flexible manipulator system while considering its dynamic behaviours.
The algorithm is then utilized to obtain various simulation responses using case stu-
dies. The performance of the simulation outcome is also compared with the responses
from an experimental system.
5.1
Introduction
The focus of this chapter is to develop and validate a finite element (FE) simulation
algorithm for a single link flexible manipulator system while considering its dynamic
behaviour. The first part of the chapter discusses the FE method followed by
formulations to obtain the mass, stiffness and damping matrices, and the dynamic
equations of motion of the manipulator utilizing the Lagrange equation are presented.
The procedure is further extended to incorporate structural damping, hub inertia and
payload into the dynamic model. The equations of motion are then expressed in a
state–space form, to be solved using control system approaches. Performance of the
algorithm in characterizing the dynamic behaviour of the system is assessed in com-
parison with an experimental system. Finally, the experimental results are presented
for validation of the developed FE model both in the time and frequency domains.
5.2
Finite element background
Since its introduction in the 1950s, the FE method has been continually developed
and improved (Rao, 1989). The method involves decomposing a structure into
several simple pieces or elements. The elements are assumed to be interconnected
at certain points, known as nodes. For each element, an equation describing the
behaviour of the element is obtained through an approximation technique. The
elemental equations are then assembled to form the system equation. It is found that
by reducing the element size of the structure, that is, increasing the number of
elements, the overall solution of the system equation can be made to converge to
the exact solution. The main steps in an FE analysis are:
●
Discretization of the structure into elements.
●
Selection of an approximating function to interpolate the result.

●
Derivation of the basic element equation.
●
Calculation of the system equation.
●
Incorporation of the boundary conditions.
●
Solving the system equation with the inclusion of the boundary conditions.
With this approach, the flexible manipulator is treated as an assemblage of n
elements and the development of the algorithm can be divided into three main
parts: the FE analysis, state–space representation and obtaining and analysing the
system response.
5.3
Finite element for flexible manipulator
The total displacement yðx; tÞ of a point along the manipulator at a distance x from
the hub can be described as a function of both the rigid body motion qðtÞ and elastic
deflection wðx; tÞ measured from the line OX as:
yðx; tÞ ¼ xqðtÞ þ wðx; tÞ
(5.1)
Using the standard FE method to solve dynamic problems leads to the well-known
equation:
w x; t
ð
Þ ¼ Na x
ð ÞQa tð Þ
(5.2)
where Na x
ð Þ and Qa tð Þ represent the shape function and nodal displacement,
respectively. The manipulator is approximated by partitioning it into n elements.
While using the Bernoulli–Euler beam theory, the FE method requires each node to
possess two degrees of freedom, a transverse deflection and rotation. These war-
rants the use of Hermite cubic basis functions as the element shape function (Ross,
1996). Hence, for an elemental length l, the shape function can be obtained as:
NaðxÞ ¼ f1ðxÞ
f2ðxÞ
f3ðxÞ
f4ðxÞ
½

where:
f1ðxÞ ¼ 1  3x2
l2 þ 2x3
l3 ;
f2ðxÞ ¼ x  2x2
l þ x3
l2 ;
f3ðxÞ ¼ 3x2
l2  2x3
l3 ;
f4ðxÞ ¼  x2
l þ x3
l2 :
For element n the nodal displacement vector is given as:
QaðtÞ ¼ wn1ðtÞ
qn1ðtÞ
wnðtÞ
qnðtÞ
½

where wn1ðtÞ and wnðtÞ are the elastic deflections of the element and qn1ðtÞ and
qnðtÞ are the corresponding rotations. Substituting for w x; t
ð
Þ from (5.2) into (5.1)
and simplifying yields:
y x; t
ð
Þ ¼ NðxÞQbðtÞ
(5.3)
116
Flexible robot manipulators: modelling, simulation and control

where
NðxÞ ¼ x
NaðxÞ
½

and
QbðtÞ ¼ qðtÞ
QaðtÞ
½
T:
The new shape function NðxÞ and nodal displacement vector QbðtÞ in (5.3) incor-
porate local and global variables. Among these, the angle qðtÞ and the distance x
are global variables, while NaðxÞ and QaðtÞ are local variables. Defining
k ¼ x  Pn1
i¼1 li as a local variable of the nth element, where li is the length of the
ith element, the kinetic energy of an element n can be expressed as:
En
K ¼ 1
2
ðl
0
rS @yðk; tÞ
@t

2
dk ¼ 1
2
ðl
0
rS _Y
T _Y dk ¼ 1
2
_Qb
T ðl
0
rSðNTNÞ dk


_Qb
(5.4)
and the potential energy of the element can be obtained as:
En
P ¼ 1
2
ðl
0
EI @2yðk;tÞ
@k2

2
dk ¼ 1
2
ðl
0
EI ðF QbÞTðF QbÞdk ¼ 1
2Qb
T
ðl
0
EIðFTFÞ dk


Qb
(5.5)
where F ¼ d2N=dk2.
Defining Mn and Kn as:
Mn ¼
ðl
0
rSðNTNÞ dk ¼ element mass matrix
(5.6)
Kn ¼
ðl
0
EIðFTFÞ dk ¼ element stiffness matrix
(5.7)
and solving (5.6) and (5.7) for the n elements, the element mass and stiffness
matrices can be obtained as:
Mn ¼ rS l
420
m11
m12
m13
m14
m15
m21
156
22l
54
13l
m31
22l
4l2
13l
3l2
m41
54
13l
156
22l
m51
13l
3l2
22l
4l2
2
6666664
3
7777775
Kn ¼ EI
l3
0
0
0
0
0
0
12
6l
12
6l
0
6l
4l2
6l
2l2
0
12
6l
12
6l
0
6l
2l2
6l
4l2
2
6666664
3
7777775
Finite element modelling
117

where
m11 ¼ 140l2ð3n2  3n þ 1Þ
m12 ¼ m21 ¼ 21lð10n  7Þ
m13 ¼ m31 ¼ 7l2ð5n  3Þ
m14 ¼ m41 ¼ 21lð10n  3Þ
m15 ¼ m51 ¼ 7l2ð5n  2Þ
Assembling the element mass and stiffness matrices, the total kinetic and
potential energies from (5.4) and (5.5) can be written as:
EK ¼ 1
2
_Q
TM _Q
EP ¼ 1
2 QTKQ
where QðtÞ ¼ q
w0
q0
. . .
wa
qa
½
T, M and K are global mass and stiffness
matrices of the manipulator, respectively. wa and qa are deflection and rotation at the
end-point of the manipulator, respectively.
The dynamic equations of motion of the flexible manipulator can be derived
utilizing the Lagrange equation as:
d
dt
@L
@ _Q



@L
@Q


¼ F
where L ¼ EK  EP is the Lagrangian and F is a vector of external forces. Con-
sidering the damping, the desired dynamic equations of motion of the system can
accordingly be obtained as:
M €QðtÞ þ D _QðtÞ þ KQðtÞ ¼ FðtÞ
(5.8)
where D is a global damping matrix, normally determined through experimentation.
For the flexible manipulator under consideration, the global mass matrix can
be represented as:
M ¼
Mqq
Mqw
Mqw
Mww


where Mww is associated with the elastic degrees of freedom (elastic motion), Mqw
represents the coupling between these elastic degrees of freedom and the hub-angle
q and Mqq is associated with the inertia of the system about the motor axis. Simi-
larly, the global stiffness matrix can be written as:
K ¼
0
0
0
Kww


118
Flexible robot manipulators: modelling, simulation and control

where Kww is associated with the elastic degrees of freedom (elastic motion). It can
be shown that the elastic degrees of freedom do not couple with the hub-angle
through the stiffness matrix.
The global damping matrix D in (5.8) can be represented as:
D ¼
0
0
0
Dww


where Dww denotes the sub-matrix associated with the structural damping. The
matrix is obtained by assuming that the manipulator exhibits the characteristics of
Rayleigh damping. This proportional damping model has been assumed because it
allows experimentally determined damping ratios of individual modes to be used
directly in forming the global matrix. It also allows assignment of individual
damping ratios to individual modes, such that the total manipulator damping is
constituted with the sum of the dampings associated with the modes. Using this
assumption, the damping related to the first two modes, which are dominant modes,
can be obtained as (Chapnik et al., 1991):
Dww ¼ g1Mww þ g2Kww
(5.9)
where:
g1 ¼
2 f1 f2ðz1 f2  z2 f1Þ
f2
2  f1
2
and
g2 ¼
2ðz2 f2  z1 f1Þ
f2
2  f1
2
with z1, z2, f1 and f2 representing the damping ratios and natural frequencies of the
first and second modes, respectively.
5.3.1
Incorporating hub inertia and payload
By incorporating the hub inertia and payload of the flexible manipulator, the kinetic
energy of the system can be obtained as (Azad, 1994):
EK ¼ 1
2
ðL
0
rS @yðk; tÞ
@t

2
dk þ 1
2 Ih _q
2 þ 1
2 mp
@yðx; tÞ
@t

2
x¼L
Hence,
EK ¼ 1
2
ðL
0
rS @yðk; tÞ
@t

2
dk þ 1
2 Ih _q
2 þ 1
2 mpðL_qðtÞ þ _wðL; tÞÞ2
or:
EK ¼ 1
2
ðL
0
rS @yðk; tÞ
@t

2
dk þ 1
2 ðIh þ mpL2Þ_q
2 þ 1
2 mp _wa
2 þ mpL_q _wa
(5.10)
In (5.10) the second term on the right-hand side demonstrates the contribution
of hub inertia and payload to the rotary inertia of the system about the motor axis
and contributes to the 1  1 sub-matrix Mqq. The third term shows the effect of
Finite element modelling
119

payload on the end-point deflection of the manipulator and contributes to Mww
whilst the last term contributes to the coupling matrix Mqw. Utilizing (5.10) and the
FE formulation (Meirovitch, 1975), a new global mass matrix can be obtained.
5.3.2
State–space representation
The M, D and K matrices in (5.8) are of size m  m and F ðtÞ is of size m  1,
where m ¼ 2n þ 1. For the manipulator, considered as a clamped-free arm with the
applied torque t at the hub, the flexural and rotational displacement, velocity and
acceleration are all zero at the hub at t ¼ 0 and the external force is F tð Þ ¼
t
0
  
0
½
T. Moreover, in this work, it is assumed that Qð0Þ ¼ 0.
The matrix differential equation in (5.8) can be represented in a state–space
form as:
_v ¼ Av þ Bu
y ¼ Cv
where:
A ¼
0m
IDm
M1K
M1D
"
#
;
B ¼
0m1
M1
"
#
C ¼ 0m
IDm
½

;
0m is an m  m null matrix, IDm is an m  m identity matrix, 0m1 is an m  1
null vector, u ¼ t
0
  
0
½
T and v ¼
q
w1
q1
  
wa
qa
_q
_w1
	
_q1
  
_wa
_qaT. Solving the state–space matrices gives the vector of states v,
that is, the angular, nodal flexural and rotational displacements and velocities.
5.4
Case studies
This section presents a number of case studies that utilizes the developed FE
algorithm. The details of a flexible manipulator system that is used for these case
studies are presented in Table 4.1 of Chapter 4. The system is considered with and
without payload. A single-switch bang–bang signal of amplitude 0.3 Nm, shown
in Figure 5.1(a), is used as an input torque, applied at the hub of the manipulator.
Figure 5.1(b) shows the corresponding spectral density of the input torque. A bang–
bang torque has a positive (acceleration) and negative (deceleration) period
allowing the manipulator to, initially, accelerate and then decelerate and eventually
stop at a target location. The developed FE model was implemented within the
MATLAB environment. System responses are monitored for a duration of 3 s, and
the results are recorded with a sampling time of 2 ms. The responses are presented
both in the time and frequency domains.
To demonstrate the effect of damping on the system response, investigations with
and without damping were carried out. Previous experimental investigations with the
flexible manipulator have shown that the damping ratio of the system ranges from
0.024 to 0.1 (Azad, 1994). The damping ratios were deduced through a trial-and-error
120
Flexible robot manipulators: modelling, simulation and control

analysis process as 0.026, 0.038 and 0.04 for the first, second and third vibration
modes, respectively. Using the first two resonance frequencies, obtained from
experiments, as 12 and 35 Hz (Azad, 1994), g1 and g2 in (5.9) can be obtained as
0.3528 and 0.0019, respectively. To investigate the accuracy of the FE simulation
algorithm in characterizing the behaviour of the flexible manipulator, the algorithm
was implemented on the basis of varying the number of elements from 1 to 20.
Four system responses namely the hub-angle, hub-velocity, end-point deflection and
end-point acceleration with the corresponding PSDs are obtained and evaluated.
0
0.5
1
1.5
2
2.5
3
–0.4
–0.3
–0.2
–0.1
0
0.1
0.2
0.3
0.4
Time (s)
Torque (Nm)
0
20
40
60
80
100
10–5
10–4
10–3
10–2
10–1
100
Frequency (Hz)
Magnitude (Nm*Nm/Hz)
(b)
(a)
Figure 5.1
The bang–bang input torque: (a) time domain and (b) spectral density
Finite element modelling
121

5.4.1
Case study 5.1: simulated system with various FE elements
In this study the behaviour of FE simulated flexible manipulator system is studied
as the numbers of FE elements is varied. Assume that there is no damping for the
system and no payload is attached at the end-point of the manipulator. The system
was simulated for 1, 2, 3, 5, 10, and 20 elements and noted the computer execution
time along with the first three modes of vibrations. The inter-relation between the
number of elements, execution time and resonance frequencies of the system is
summarized in Table 5.1. With the resolution used in these investigations, it is
noted that there are no significant changes in the vibration frequencies of mode 2
between 3 and 5 elements and between 10 and 20 elements.
Figures 5.2–5.5 show the response of the system with the corresponding PSDs
without damping while using 20 elements. It is shown that a steady-state hub-angle
level of 28 was achieved within 0.9 s using one or more elements. These proved
that a satisfactory dynamic behaviour of a flexible manipulator, up to the second
mode, could be achieved with one or more elements. As expected, without the
damping effect, the system response exhibits persistent oscillation. Using one
element, the poles of the system transfer function from torque input to end-point
displacement output were obtained as 0, 0, j90:82 and j300:07. The corre-
sponding zeros were obtained as 58:59 and 229:14, respectively. Since there are
two system zeros on the right-handside of s-plane, the system response char-
acterizes a non-minimum phase behaviour. This agrees with previously developed
models (Cannon and Schmitz, 1984).
The flexible motion of the system is found to be characterized by the first three
modes of vibration. Resonance frequencies of the system were obtained by trans-
forming the time-domain representation of the system into the frequency domain.
As shown in Figures 5.2–5.5, the resonance frequencies of the system were
obtained as 11.99, 35.22 and 65.2 Hz. It is noted that by increasing the number of
elements, the system resonance frequencies converge to more accurate values, but
at the expense of higher execution times. This is mainly due to an increase in the
size of the mass, damping, stiffness and state–space matrices.
Table 5.1
Relation between number of elements,
execution times and resonance frequencies of
the flexible manipulator
Number of
Elements
Execution
time (s)
Resonance frequencies (Hz)
Mode 1
Mode 2
Mode 3
1
0.38
14.49
47.7
–
2
0.44
11.99
35.71
77.17
3
0.55
11.99
35.46
65.68
5
0.67
11.99
35.46
65.43
10
0.98
11.99
35.22
65.2
20
2.72
11.99
35.22
65.2
122
Flexible robot manipulators: modelling, simulation and control

5.4.2
Case study 5.2: simulated system with damping and no
payload
In this case study the behaviour of FE simulated flexible manipulator system is
studied with damping and no payload attached at the end-point and the results are
assessed with those of the experimental prototype system.
0
0.5
1
1.5
2
2.5
3
3.5
4
35
30
25
20
15
10
5
0
Time (s)
Hub angle (deg)
20
10
40
30
60
50
70
80
100
90
10–4
10–3
10–2
10–1
100
101
Frequency (Hz)
Magnitude (deg*deg/Hz)
(b)
(a)
Figure 5.2
Hub-angle response without damping and payload (20 FE elements):
(a) time domain and (b) spectral density
Finite element modelling
123

Figures 5.6–5.9 show the dynamic behaviour of the system in the presence of
damping with twenty elements. The damping has considerably dampened system
response oscillations. Note that vibrations occur at the hub and end-point during
movement of the manipulator. Analysing the system time response, it is noted that
a steady-state hub-angle level of 38 was achieved. Moreover, the hub-velocity,
end-point deflection and end-point acceleration of the system converged to zero
0
0.5
1
1.5
2
2.5
3
3.5
4
500
400
300
200
100
0
–100
–200
–300
–400
–500
Time (s)
Hub velocity (deg/s)
(a)
20
10
40
30
60
50
70
80
100
90
10–4
10–3
10–2
10–1
100
Frequency (Hz)
Magnitude (deg/s)*(deg/Hz)
(b)
Figure 5.3
Hub-velocity response without damping and payload (20 FE
elements): (a) time domain and (b) spectral density
124
Flexible robot manipulators: modelling, simulation and control

within 1.8 s. The end-point deflection and acceleration responses were found to
oscillate dominantly between 15 mm to 10 mm and 150 to 150 m/s2, respec-
tively, with maximum deflection of 29 mm. It is noted that the level of vibration
reduces with increased damping.
Experiments using the experimental rig described in Chapter 2 were conducted
for verification of the developed FE model. In the experiments, a single-switch
0
0.5
1
1.5
2
2.5
3
3.5
4
0.1
0.08
0.06
0.04
0.02
0
–0.1
–0.08
–0.06
–0.04
–0.02
Time (s)
End-point deflection (m)
(a)
20
10
40
30
60
50
70
80
100
90
10–4
10–5
10–6
10–3
10–2
10–1
100
Frequency (Hz)
Magnitude (m*m/Hz)
(b)
Figure 5.4
End-point deflection response without damping and payload (20 FE
elements): (a) time domain and (b) spectral density
Finite element modelling
125

bang–bang input torque with the same parameters as in the simulation was used. The
hub-angle, hub-velocity and end-point acceleration were measured and the corre-
sponding PSDs were obtained. These were then compared with the simulation results.
Figures 5.10–5.12 show the hub-angle, hub-velocity, and end-point acceleration,
with their PSDs, of the flexible manipulator without payload. It is noted that for
0
0.5
1
1.5
2
2.5
3
3.5
4
800
600
400
200
0
–200
–400
–600
–800
Time (s)
End-point acceleration (m/s/s)
(a)
20
10
40
30
60
50
70
80
100
90
10–4
10–3
10–2
10–1
100
Frequency (Hz)
Magnitude ((m/s/s)*(m/s/s)/Hz)
(b)
Figure 5.5
End-point acceleration response without damping and payload (20 FE
elements): (a) time domain and (b) spectral density
126
Flexible robot manipulators: modelling, simulation and control

the hub-angle, the steady-state level of 38 was achieved within 1.8 s. The vibration
occurs during movement of the manipulator as evidenced in the hub-angle, hub-
velocity and end-point acceleration responses. The end-point acceleration response
was found to oscillate dominantly between 100 and 100 m/s2, respectively. The first
three modes of vibration were obtained as 11.72, 35.15 and 65.60 Hz.
30
25
20
15
Hub angle (deg)
10
5
0
0
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
(a)
20
10
40
30
60
50
70
80
100
90
10–4
10–3
10–2
10–1
101
100
Frequency (Hz)
Magnitude (deg*deg/Hz)
(b)
Figure 5.6
Hub-angle response with damping and without payload (20 FE
elements): (a) time domain and (b) spectral density
Finite element modelling
127

5.4.3
Case study 5.3: simulated system with damping and payload
In this case study the behaviour of FE simulated flexible manipulator system is
studied in the presence of both damping and end-point payload, and the results are
assessed in comparison to those of the experimental prototype system.
To demonstrate the effect of payload on the dynamic behaviour of the system,
various payloads of up to 60% of the manipulator weight were simulated.
0
0.5
1
1.5
2
2.5
3
3.5
4
100
50
0
–50
–100
–150
–200
Time (s)
Hub velocity (deg/s)
(a)
20
10
40
30
60
50
70
80
100
90
10–4
10–3
10–2
10–1
100
Frequency (Hz)
Magnitude (deg/s)*(deg/Hz)
(b)
Figure 5.7
Hub-velocity response with damping and without payload (20 FE
elements): (a) time domain and (b) spectral density
128
Flexible robot manipulators: modelling, simulation and control

Figures 5.13–5.16 show the system response with payloads of 20 and 40 g. These
results were obtained with damping using 20 elements. It is noted that the hub-
angle decreases with increasing payloads. For payloads of 20 and 40 g, the steady-
state hub-angle levels settled at 27 and 21, respectively. With payload, it is also
noted that the system response exhibits higher vibration and requires longer time to
converge to zero as compared with the case without payload. It is also evidenced
0
0.5
1
1.5
2
2.5
3
3.5
4
0.06
0.04
0.02
0
–0.02
–0.04
–0.06
Time (s)
End-point deflection (m)
(a)
20
10
40
30
60
50
70
80
100
90
10–5
10–6
10–4
10–3
10–2
10–1
Frequency (Hz)
Magnitude (m*m/Hz)
(b)
Figure 5.8
End-point deflection response with damping and without payload (20
FE elements): (a) time domain and (b) spectral density
Finite element modelling
129

from the PSD of the system response that the resonance modes of vibration of the
system shift to lower frequencies with increasing payloads. This implies that the
manipulator oscillates at lower frequency rates than those without payload.
Table 5.2 summarizes the relation between payload and the resonance frequencies
of the system. Similarly, it is noted that there was no change in the vibration fre-
quencies of mode 2 between 50 and 60 g, with the resolution used.
0
0.5
1
1.5
2
2.5
3
3.5
4
300
250
200
150
100
50
0
–50
–100
–150
Time (s)
End-point acceleration (m/s/s)
(a)
20
10
40
30
60
50
70
80
100
90
10–4
10–3
10–2
10–1
Frequency (Hz)
Magnitude ((m/s/s)*(m/s/s)/Hz)
(b)
Figure 5.9
End-point acceleration response with damping and without payload
(20 FE elements): (a) time domain and (b) spectral density
130
Flexible robot manipulators: modelling, simulation and control

To investigate the effect of payload on the performance of the manipulator,
experiments were performed using various payloads ranging from 10 to 60 g.
Figures 5.17–5.19 show the hub-angle, hub-velocity, end-point acceleration,
with their PSDs with payloads of 20 and 40 g. The system response demonstrates
that levels of hub-angle decrease with increasing payloads. For payloads of
20 and 40 g, the steady-state levels were obtained as 31 and 26, respectively.
0
0.5
1
1.5
2
2.5
3
0
5
10
15
20
25
30
35
40
45
Time (s)
Hub-angle (deg)
(a)
0
20
40
60
80
100
102
101
100
10–1
10–2
10–3
Frequency (Hz)
Magnitude (deg*deg/Hz)
(b)
Figure 5.10
Hub-angle response of the experimental rig without payload: (a) time
domain and (b) spectral density
Finite element modelling
131

It is also noted that the settling time of the manipulator response was affected by
variations in the payload. This shows that the manipulator response has higher
settling times with increasing payloads. Analysing the PSDs, it shows that the
resonance frequencies of the system shift to lower frequencies with increasing
payloads. The relation between payload and resonance frequencies of the system
is summarized in Table 5.3.
0
0.5
1
1.5
2
2.5
3
–300
–200
–100
0
100
200
300
Time (s)
Hub-velocity (deg/s)
(a)
0
40
20
60
80
100
10–2
10–1
100
101
102
103
Frequency (Hz)
Magnitude ((deg/s)*(deg/s)/Hz)
(b)
Figure 5.11
Hub-velocity response of the experimental rig without payload:
(a) time domain and (b) spectral density
132
Flexible robot manipulators: modelling, simulation and control

5.5
Model validation
Validation of a dynamic model for use in simulation and control is an important
step before the model can be employed with confidence. Typically, model valida-
tion can be considered in two parts: frequency-domain validation, which involves
the resonance frequencies of the system, and time-domain validation, which
0
0.5
1
1.5
2
2.5
3
–250
–200
–150
–100
–50
0
50
100
150
200
250
Time (s)
End-point acceleration (m/s/s)
(a)
0
20
40
60
80
100
10–1
10–2
100
101
102
103
Frequency (Hz)
Magnitude ((m/s/s)*(m/s/s)/Hz)
(b)
Figure 5.12
End-point acceleration response of the experimental rig without
payload: (a) time domain and (b) spectral density
Finite element modelling
133

focuses on the time response of various system states to an input command.
Matching of natural frequencies is a good indication of accurately modelled mass
and stiffness properties whereas time-domain results show the effects of assump-
tions concerning the non-linear terms in the equations of motion.
Validation of the developed FE model was carried out by comparing the
simulation and experimental results in time and frequency domains. Comparisons
of the responses of the manipulator without payload show that a close agreement
20 g
40 g
20 g
40 g
0
0.5
1
1.5
2
2.5
3.5
4
3
0
35
30
25
20
15
10
5
Frequency (Hz)
Hub angle (deg)
(a)
10
20
30
40
50
60
70
80
100
90
10–4
10–2
10–3
10–1
100
101
Frequency (Hz)
Magnitude (deg*deg/Hz)
(b)
Figure 5.13
Simulated hub-angle response with payload (20 FE elements):
(a) time domain and (b) spectral density
134
Flexible robot manipulators: modelling, simulation and control

between experimental and simulation results in the time responses and resonance
frequencies was obtained. For the hub-angle, a steady-state level of 38 was
achieved in both cases. Similar characteristics are also evidenced in the transient
response of the system. Furthermore, reasonably close agreement between the
simulation and experimental results is noted with the end-point acceleration
response. It is also shown in Table 5.1 that the first three modes of vibration of
the system converged to 11.99, 35.22 and 65.20 Hz with 10 elements or more.
20 g
40 g
0
0.5
1
1.5
2
2.5
3.5
4
3
60
40
20
0
–20
–40
–60
Time (s)
Hub velocity (deg/s)
(a)
10
20
30
40
50
60
70
80
100
90
10–3
10–4
10–2
10–1
Frequency (Hz)
Magnitude ((deg/s)*(deg/s)/Hz)
(b)
20 g
40 g
Figure 5.14
Simulated hub-velocity response with payload (20 FE elements):
(a) time domain and (b) spectral density
Finite element modelling
135

The experimental results, however, gave 11.72, 35.15 and 65.60 Hz. The corre-
sponding errors between the simulation and experimental results for modes 1, 2 and 3
are accordingly 2.3%, 0.2% and 0.6%, which are considered negligibly small. Earlier
work using the FD method for modelling of the single-link flexible manipulator has
shown that with 10 sections, the vibration frequencies of the system were obtained
as 12.4, 37.9 and 77.0 Hz (Tokhi et al., 1997). The corresponding errors between
the FD algorithm and experiments for the first three modes are accordingly 5.8%,
0
0.5
1
1.5
2
2.5
3.5
4
3
0.08
0.06
0.04
0.02
0
–0.08
–0.06
–0.04
–0.02
Time (s)
End-point deflection (m)
(a)
10
20
30
40
50
60
70
80
100
90
10–3
10–4
10–5
10–6
10–2
10–1
Frequency (Hz)
Magnitude (m*m/Hz)
(b)
20 g
40 g
20 g
40 g
Figure 5.15
Simulated end-point deflection response with payloads (20 FE
elements): (a) time domain and (b) spectral density
136
Flexible robot manipulators: modelling, simulation and control

7.8% and 17.4%, which are higher than the errors with FE algorithm. It can thus be
concluded that FE methods can successfully be used for modelling of a flexible
manipulator. Moreover, these validate the assumptions used in this work.
For the manipulator with payload, it has been observed that simulation and
experimental results were slightly different in the steady-state level and settling
time of the hub-angle of the system. It is noted that the differences increase with
0
0.5
1
1.5
2
2.5
3.5
4
3
1.5
1
0.5
0
–1.5
–0.5
–1
Time (s)
End-point acceleration (m/s/s)
(a)
10
20
30
40
50
60
70
80
100
90
10–3
10–4
10–2
Frequency (Hz)
Magnitude ((m/s/s)*(m/s/s)/Hz)
(b)
20 g
40 g
20g
40g
20 g
40 g
Figure 5.16
Simulated end-point acceleration response with payload (20 FE
elements): (a) time domain and (b) spectral density
Finite element modelling
137

Table 5.2
Relation between payload and resonance
frequencies (20 FE elements)
Payloads (g)
Resonance frequencies (Hz)
Mode 1
Mode 2
Mode 3
0
11.99
35.22
65.20
10
11.65
33.22
61.19
20
11.49
32.22
59.44
30
10.99
31.72
58.69
40
10.74
31.22
58.19
50
10.49
30.97
57.69
60
10.24
30.97
57.44
0
0.5
1
1.5
2
2.5
3
0
5
10
15
20
25
30
35
40
45
Time (s)
Hub-angle (deg)
(a)
0
20
40
60
80
100
10–2
10–1
100
101
102
Frequency (Hz)
Magnitude (deg*deg/Hz)
(b)
20 g
40 g
20 g
40 g
Figure 5.17
Hub-angle response of the experimental rig with payloads: (a) time
domain and (b) spectral density
138
Flexible robot manipulators: modelling, simulation and control

increasing payloads. The differences are within 2–6. These could mainly be due
to payload rotary inertia and the gravity effect, which are ignored in the simulation.
Theoretically, gravity contributes to the potential energy and thus the mass matrix
of the system. However, with increasing payloads, both cases show a decrease in
the level of hub-angle responses. In the frequency-domain, comparisons of
experimental and simulation results in Tables 5.2 and 5.3 show that reasonably
close results were achieved for all payloads for mode 2 and mode 3, with
0
0.5
1
1.5
2
2.5
3
–200
–100
0
100
200
300
Time (s)
Hub-velocity (deg/s)
(a)
0
20
40
60
80
100
10–2
10–1
100
101
102
103
Frequency (Hz)
Magnitude ((deg/s)*(deg/s)/Hz)
20 g
40 g
20 g
40 g
(b)
Figure 5.18
Hub-velocity response of the experimental rig with payloads: (a) time
domain and (b) spectral density
Finite element modelling
139

the maximum error of 2.65%. For mode 1, with increasing payload, the errors
between simulation and experiments increased from 6.19% to 14.15%. Although
slight differences were noted in the time-response, the simulation algorithm pro-
vided a close characteristic behaviour of the experimental rig with increasing
payloads. Such characteristic behaviour is important and essential for development
of suitable control strategies for flexible manipulator systems.
0
0.5
1
1.5
2
2.5
3
–250
–200
–150
–100
–50
0
50
100
150
200
250
Time (s)
End-point acceleration (m/s/s)
0
20
40
60
80
100
10–1
100
101
102
Frequency (Hz)
Magnitude ((m/s/s)*(m/s/s)/Hz)
(b)
(a)
20 g
40 g
20 g
40 g
Figure 5.19
End-point acceleration response of the experimental rig with
payloads: (a) time domain and (b) spectral density
140
Flexible robot manipulators: modelling, simulation and control

5.6
Summary
Theoretical and experimental investigations into the dynamic modelling and char-
acterization of a single-link flexible manipulator system have been presented.
A dynamic model of the manipulator incorporating structural damping, hub inertia
and payload has been developed using FE methods. The performance and accuracy
of the algorithm has been studied in comparison to an experimental rig. The effects
of damping and payload on the system behaviour have been addressed. Experi-
ments have been performed using the experimental rig and used for validation
of the FE model. A very close agreement between simulation and experimental
results has been achieved. Thus, confidence in the accuracy of the model for
utilization in subsequent investigations, at development of control strategies for
flexible manipulator systems, has been established.
Table 5.3
Relation between payload and resonance
frequencies of the experimental rig
Payloads (g)
Resonance frequencies (Hz)
Mode 1
Mode 2
Mode 3
0
11.72
35.15
65.60
10
10.97
33.40
61.85
20
10.23
32.95
59.35
30
9.97
31.42
59.35
40
9.48
30.92
58.85
50
9.23
30.42
58.10
60
8.97
30.17
56.61
Finite element modelling
141

This page intentionally left blank 

Chapter 6
Linear parametric modelling
This chapter presents the development of parametric approaches for dynamic
modelling of a single-link flexible manipulator system. The least mean squares,
recursive least squares and genetic algorithms are used to obtain linear parametric
models of the system. The system is in each case modelled from the input torque to
hub-angle, hub-velocity and end-point acceleration outputs. The models are vali-
dated using several validation tests. Finally, a comparative assessment of the
approaches used is presented and discussed in terms of accuracy, efficiency and
estimation of vibration modes of the system.
6.1
Introduction
System identification is extensively used as a fundamental requirement in many
engineering and scientific applications. The objective of system identification is to
find exact or approximate models of dynamic systems based on observed inputs
and outputs. Once a model of a physical system is obtained, it can be used for
solving various problems; for example, to control the physical system or to predict
its behaviour under different operating conditions (Tabrizi et al., 1990; Worden
et al., 1994). Researchers have devised a number of techniques to determine
models that best describe input–output behaviour of a system.
System identification of a dynamic system generally consists of the following
four steps:
1.
Data acquisition: Acquiring input/output data is not trivial and could be very
laborious and expensive. This involves careful planning of the inputs to be
applied so that sufficient information about the system dynamics is obtained. If
the inputs are not well designed, it could lead to insufficient or even useless data.
2.
Characterisation: This involves defining the structure of the system, for
example, type and order of the differential/difference equation relating the
input to the output. This means selection of a suitable model structure, e.g.,
auto-regressive with exogenous input (ARX), auto-regressive moving average
with exogenous input (ARMAX), Box–Jenkins.
3.
Identification/estimation: This consists of determination of the numerical values
of the structural parameters which minimise the distance between the system
to be identified and its model. Common estimation methods include least

mean squares (LMS), recursive least squares (RLS), instrumental-variables,
maximum-likelihood and prediction-error. In simple terms, this is a curve-fitting
exercise. Evolutionary and bio-inspired optimisation algorithms, such as genetic
algorithms (GAs) and particle swarm optimisation-based parametric identifica-
tion techniques, have also been utilised in many applications.
4.
Verification: This consists of relating the system to the identified model
responses in time or frequency domain to instil confidence in the obtained
model. Residual (correlation) analysis, Bode plots and cross-validation tests
are generally employed for model validation.
The characteristics of flexible structure systems are generally of distributed
nature amounting to resonance modes of vibration. The primary interest in this work
lies in locating frequencies of these resonance modes, which ultimately dictate the
behaviour of the system. In this chapter dynamic parametric modelling techniques
are presented and used within a set of case study exercises for modelling of the
single-link flexible manipulator described in Chapter 2.
To identify an unknown process some knowledge of the process and signals is
required. It has been previously shown that the model orders for the system under
consideration from torque input to the hub-angle, hub-velocity and end-point
acceleration for the first three modes are 8, 7 and 6, respectively (Azad, 1994).
The former two models are regarded as collocated and thus are minimum phase.
The latter, the end-point acceleration model, is regarded as a non-collocated
system which is always non-minimum phase above some finite frequency.
Non-minimum phase behaviour is due to the finite propagation speed of elastic
deformation waves in the structure. This leads to inherent limitations in the system
and physical reliability requirements for the compensator, imposing definite
restrictions on achievable closed-loop characteristics (Newton et al., 1957;
Spector and Flashner, 1990). This section presents an investigation into parametric
modelling of the system from input/output measurements of the system. As the
noise measurement shows the involvement of white noise, a standard recursive
least squares (RLS) algorithm is utilised and an autoregressive exogenous (ARX)
model is chosen.
6.2
Least mean squares algorithm
The LMS algorithm is based on the steepest descent method (Widrow et al., 1975).
The computational procedure of the LMS algorithm can be summarised as follows.
Initially, set each weight wiðkÞ; i ¼ 0; 1; . . . ; N  1, to an arbitrary fixed value,
such as 0. For each subsequent sampling instant k ¼ 1; 2; . . . ; execute the relations
below in the order given:
^y k
ð Þ ¼
X
N1
i¼0
wiðkÞx k  1
ð
Þ
(6.1)
144
Flexible robot manipulators: modelling, simulation and control

e k
ð Þ ¼ y k
ð Þ  ^y k
ð Þ
(6.2)
wiðk þ 1Þ ¼ wiðkÞ þ 2meðkÞxðk  1Þ
(6.3)
where xðkÞ is the observation vector at time step k, eðkÞ the error between the actual
output yðkÞ and the predicted output ^yðkÞ and m represents the learning rate and is a
constant.
6.3
Recursive least squares algorithm
The RLS identification algorithm is described here as the process of estimating
parameters of model of the system. In this manner, it consists of the processes of
estimating the model characterising the system between the system input and
output.
An unknown plant with input uðkÞ and output yðkÞ can be described by a
discrete linear model of order m as:
yðkÞ ¼ a1yðk  1Þ      amyðk  mÞ þ b0uðkÞ þ b1uðk  1Þ þ   
þ bmuðk  mÞ
(6.4)
or:
yðkÞ ¼ QðkÞYðkÞ
(6.5)
where QðkÞ is the model parameter vector and YðkÞ, known as the observation
matrix, is a row vector of the measured input–output signals:
QTðkÞ ¼ qð1Þ; qð2Þ; . . .; qð2m þ 1Þ
½
 ¼ a1; . . .; am; b0; . . .; bm
½

(6.6)
YðkÞ ¼ yð1Þ; . . .; yð2m þ 1Þ
½

¼ yðk  1Þ; . . .; yðk  mÞ; uðkÞ; . . . ; uðk  mÞ
½

(6.7)
The standard RLS estimation process at a time step k is described by (Tokhi and
Leitch, 1992):
eðkÞ ¼ QðkÞYðkÞ  yk
(6.8)
QðkÞ ¼ Qðk  1Þ  Pðk  1ÞYTðkÞ 1 þ YðkÞPðk  1ÞYTðkÞ

1eðkÞ
(6.9)
PðkÞ ¼ l1Pðk  1Þ  l1Pðk  1ÞYTðkÞYðkÞPðk  1Þ
l þ YðkÞPðk  1ÞYTðkÞ
(6.10)
Linear parametric modelling
145

where PðkÞ is the covariance matrix and l represents the forgetting factor. Thus, the
RLS estimation process is to implement and execute the relations in (6.8)–(6.10) in
the order given. The performance of the estimator can be monitored by observing
the parameter set at each iteration. Once convergence has been achieved the routine
can be stopped. The convergence is determined by the magnitude of the modelling
error eðkÞ reaching a minimum or by the estimated set of parameters reaching a
steady level.
Normally, with a reasonable initial set of values of the covariance matrix
used at the initialisation step, convergence can be reached within 100–200
iterations, or even before. The main point here is to note that the sizes of diag-
onal elements of the covariance matrix reflect confidence in the unknown
parameters. If there is no prior knowledge of the system model parameters, then
a large initial covariance would reflect this. Conversely, if the initial parameters
are known to be close to the true values, then a small covariance matrix should
be used.
The purpose of using forgetting factor is to help the algorithm converge to the
global minimum. However, the use of a forgetting factor could cause the predicted
values of parameters to fluctuate rather than to converge to a certain value. The
level of fluctuation depends on the value of l; the smaller the value of l, the larger
the fluctuation in the parameter values.
6.4
Genetic algorithm
Since their introduction by Holland (1975) as evolutionary algorithms that mimic
the natural evolutionary process for problem solving, there has been growing
interest among scientists and engineers in the use of GAs in various applications
such as signal processing, robotics, active noise cancellation, system identi-
fication and modelling, adaptive control, engineering designs, planning and
scheduling, and pattern recognition (Amaral et al., 1995; Goldberg and Smith
1987; Katz and Thrift, 1994; Kwong et al., 1995; Mackle et al., 1995; Man et al.,
1996; Roth and Levine 1994; Wang and Kowk, 1994). A GA is a global, natural and
data independent search technique. Other attractive features of GAs, as compared
to other conventional search techniques, include the following (Chipperfield et al.,
1994):
●
They use discontinuous objective functions.
●
They offer multiple solutions to multimode problems.
●
They do not require derivative information or other auxiliary knowledge.
●
They use probabilistic transition rules, not deterministic ones.
●
They work on an encoding of the parameter set rather than the parameter
set itself.
●
They provide a number of potential solutions and the choice of the final
solution is left to the user.
146
Flexible robot manipulators: modelling, simulation and control

All these advantageous features have made the GAs easy to realise, implement and
apply them in solving practical problems.
6.4.1
GA fundamentals
Genetic algorithms form one of the prominent members of the broader class of
evolutionary algorithms. They are inspired by the mechanism of natural biological
evolution, i.e., the principles of survival of the fittest (Holland, 1975). From an
operational perspective, a GA comprises two basic elements, namely a set of
individuals, i.e., potential solutions (the population), and a set of biologically
inspired operators active over the population. A new set of approximations/solutions
is created at each generation, by the process of selecting individuals according to
their level of fitness in the problem domain and breeding them together using the
operators. This process leads to the evolution of populations of individuals that are
better suited to their environment than the individuals that they were created from,
just as in natural adaptation (Chipperfield and Fleming, 1994). In fact, individuals or
current approximations are encoded as strings (typically represented in binary),
chromosomes, and then the most promising strings are manipulated using the GA
operators for better and better approximation to a solution.
The operating mechanism of a GA can be described through the stages shown
in Figure 6.1. These comprise the following:
1.
Creation of initial set of potential solutions (population) as strings: An initial
population of potential solutions is created. Each element of the population is
mapped onto a set of strings (the chromosome) to be manipulated by the
genetic operators.
2.
Evaluation of each solution and selection of the best ones: The performance of
each member of the population is assessed through an objective function
imposed by the problem. This establishes the basis for selection of pairs
of individuals that will mate during reproduction. For reproduction, each
Begin
Create initial
population
Evaluate
fitness
Are optimum
criteria
satisfied?
Out
Yes
No
Selection
Crossover
Mutation
Genetic 
operators
generating a
new
population
Figure 6.1
Genetic algorithm-simple working principles
Linear parametric modelling
147

individual is assigned a fitness value derived from its raw performance mea-
sure, given by the objective function. This value is used in the selection to bias
towards more fit individuals. Highly fit individuals, relative to the whole
population, have a high probability of being selected for mating whereas less
fit individuals have a correspondingly low probability of being selected
(Chipperfield et al., 1994).
3.
Genetic manipulation to create new population: In this phase, genetic operators
such as crossover and mutation are used to produce a new population of indi-
viduals (offspring) by manipulating the ‘‘genetic information’’ usually called
genes, possessed by the members (parents) of the current population. The
crossover operator is used to exchange genetic information between pairs, or
larger groups, of individuals. Mutation is generally considered to be a back-
ground operator, which ensures that the search process is not trapped at a local
minimum, by introducing new genetic structures.
After manipulation by the crossover and mutation operators, the individual
strings are, if necessary, decoded, the objective function evaluated, a fitness value
assigned to each individual and individuals selected for mating according to their
fitness, and so the process continues through subsequent generations. In this way,
the average performance of individuals in a population is expected to increase, as
good individuals are preserved and bred with one another and the less fit indivi-
duals die out. The GA is terminated when some criteria are satisfied, e.g., a certain
number of generations completed or when a particular point in the search space is
reached.
6.4.2
Major GA elements and their modification
The simple operating principle of GA described above cannot be directly applied to
solve every engineering problem. In fact, each problem has its own nature, which is
quite unique to it and thus to apply GAs, an engineering insight into the problem
considered is required. There are many factors and operational modes that need to
be introduced and reorganised to alter the structure of a GA to suit the requirement
of a particular problem to be solved. These are briefly described below.
6.4.2.1
Population representation and initialisation
The members of the population are called individuals/chromosomes and their
number could be as high as 100 or more and as low as 10, depending upon the
nature of the problem and the type of GA. Very small populations as small as 10
individuals are usually used by micro GAs with a restrictive reproduction and
replacement strategy in an attempt to satisfy real-time execution requirements
(Chipperfield et al., 1994; Karr, 1991).
The classical approach of representing chromosomes in the GA is that of the
normal binary string. In this case, each decision variable in the parameter set is
encoded as a binary string and these are concatenated to form a chromosome. The
use of Gray coding is claimed to provide slightly better results than normal binary
148
Flexible robot manipulators: modelling, simulation and control

representation (Holstien, 1971). This type of coding has extensively been used by
researchers. However, there is also interest in alternative encoding strategies, such
as integer and real-valued representations. A number of practical problems have
been solved by using real-coded GA despite the opinion that a real-coded GA
would not necessarily yield good results in some situations.
6.4.2.2
The objective function and fitness value
Objective function is the main link between the GA and the problem to be solved. It
evaluates the performance of each chromosome in the problem domain and helps in
selecting the best ones for further reproduction. It takes chromosomes as input and
produces a value (objective value) as a measure of how individuals have performed
in the problem domain. In the case of a minimisation problem, the fittest individual
will have the lowest numerical value of the associated objective function. The
objective values vary from problem to problem, and to maintain uniformity over
various problem domains, the objective value is re-scaled to a fitness value by
different processes (Goldberg, 1989).
6.4.2.3
Selection
An effective parent selection mechanism is necessary to generate good offspring.
Selection is the process of determining the number of times, or trials, a particular
individual is chosen for reproduction and, thus, the number of offspring that an
individual will produce. Roulette wheel selection mechanisms are commonly used
due to their simplicity of implementation. However, other selection mechanisms
such as stochastic universal sampling and ranking are also considered.
6.4.2.4
Crossover and mutation
Crossover and mutation are the two fundamental genetic operators. Crossover is
the operator for producing new chromosomes in the GA. It takes two chromosomes
and swaps part of their genetic information to produce new chromosomes. The
swapping of point/points is randomly chosen. The simplest form of crossover is
that of single-point crossover as shown in Figure 6.2. Here, at the crossover point,
1
1
1
0
1
0
0
0
1
1
0
1
1
1
0
0
1
1
1
1
0
0
1
1
0
1
0
0
0
1
1
0
Crossover point
P1
P2
Parents
O1
O2
Offspring
Figure 6.2
Crossover operation
Linear parametric modelling
149

the portions of the parents’ strings P1 and P2 have been swapped to produce the new
offspring strings O1 and O2. The major disadvantage of single point crossover is that
certain combination of schema cannot be realised in some situations (Michalewicz,
1996). To overcome this difficulty various forms of crossover such as multi-point
crossover, uniform crossover, intermediate recombination and line recombination
have been introduced and utilised. However, the use of crossover operator to improve
the performance of a GA is not fully problem-free (Man et al., 1996).
Mutation is another important genetic operator, which introduces new genetic
structures in the population, helping the algorithm to escape from the traps of local
minima. It is implemented by occasionally altering a random bit in a chromosome.
Figure 6.3 shows the mutation process applied to the fifth bit of the string.
Since the modification introduced by mutation is not related to any previous
chromosome structures in the population, new structures are formed to increase the
search space. Various types of mutation operations have been proposed and applied
with GAs. A mutation operator for the real-coded GA that uses a non-linear term
for the distribution of the range of mutation applied to gene values has been
introduced by Muhlenbein and Schlierkamp-Voosen (1993). Other mutation
operations such as trade mutation and reorder mutation have raised considerable
interest for specific problem domains.
6.4.2.5
Reinsertion
A number of strategies have been developed as to how and which individuals of the
new generation will replace the individuals of the old generation. One of the
mechanisms, called generation replacement, replaces the individuals in the current
population by the offspring (Grefenstette, 1986). The major drawback of this pro-
cedure is that the best individuals of the old generation may fail to reproduce
offspring in the next generation. Thus, elitist strategy is adopted where one, or a
few, of the best individuals are carried forward in the succeeding generation. When
selecting which members of the old population should be replaced, the most
apparent strategy is to replace the least fit members. This further asserts that
replacing the least fit members effectively implements an elitist strategy as the most
fit will probabilistically survive through successive generations. The speed of dom-
inance of a population by a super chromosome may be increased in the case of elitist
strategy but on balance it appears to improve the performance (Man et al., 1996).
Another strategy is to create fewer numbers of offspring than the size of the original
population and then replace a part of the individuals in the original population by
1
0
1
1
1
0
0
0
1
0
0
1
1
0
0
0
Figure 6.3
Mutation operation
150
Flexible robot manipulators: modelling, simulation and control

the newly generated offspring. Usually the worst chromosomes are replaced with the
new chromosomes. An important feature of not creating more offspring than the
current population size at each generation is that the generation computational time is
reduced, most dramatically in the case of steady-state GA, and that the memory
requirements are smaller as fewer new individuals need to be stored while offspring
are produced (Chipperfield et al., 1994). A direct replacement of the parents by the
corresponding offspring is also addressed in the literature (Man et al., 1996).
6.4.2.6
Probability rate setting
The probability rate setting for crossover and mutation is an important factor in
achieving good performance. It is a controversial issue for all kinds of applications
as well. Increasing the crossover probability rate introduces more diversity amongst
the individuals of a population at the possible cost of disruption of good chromo-
somes. In contrast, a sharp rise of mutation probability rate would turn the genetic
search into random search but helps to reintroduce lost genetic information (Man
et al., 1996). A linear variation in crossover and mutation probability rate, with
decreasing crossover rate during the run while mutation rate increases, is suggested
by Davis (1985). More arguments in favour of dynamic variations, depending upon
the spread of fitness, are addressed by Booker (1987). Keeping the selection issue
as an ongoing work, Grefenstette (1986) has introduced some guidelines, more or
less ignoring the nature of the objective function,
For large population (100)
●
Crossover rate ¼ 0.06
●
Mutation rate ¼ 0.001
For smaller population size (30)
●
Crossover rate ¼ 0.9
●
Mutation rate ¼ 0.01
6.4.2.7
Termination of the GA
The termination criteria of the GA cannot be predefined as it is a stochastic search
process. It is, to a considerable extent, problematic and application-dependent as
well. Usually, GA search processes are terminated after a pre-specified number of
generations and the quality of the best members are tested with respect to a desired
result. If the result is not acceptable at this level, a fresh search may be initiated by
changing the parameters and operators involved in the GA.
Besides the factors described above, there are some other important issues such
as parallelism, computation time and multiple objectives that need to be considered
while solving any problem with a GA-based search process. Though, GA is highly
parallel in nature, yet sometimes painfully time-consuming, which needs to be paid
much attention while applying GA in applications such as control and signal pro-
cessing. A number of methods including GA-based parallel methods have been
investigated to enhance the computational speed of GA. Another feature of the GA
that has made it very attractive among scientists and engineers is its capability to
Linear parametric modelling
151

solve multi-objective problems. Although similar in concept, many variations exist
in GAs (Chipperfield and Fleming, 1994).
6.5
Model validation
Once a model of the system is obtained, it is required to validate whether the model
is good enough to represent the system. A number of such validation tests are
available in the literature (Shaheed, 2000). These are highlighted in Chapter 7.
Correlation functions test is a convincing method used for model validation.
If the model is adequate, then the residuals or prediction errors e tð Þ should be
unpredictable from all linear and non-linear combinations of past inputs and
outputs. The derivation of simple tests, which can detect these conditions, is
complex, but it can be shown that the following conditions should hold (Billings
and Voon, 1986):
feeðtÞ ¼ E eðt  tÞeðtÞ
½
 ¼ dðtÞ
fueðtÞ ¼ E uðt  tÞeðtÞ
½
 ¼ 0
8t
fu2eðtÞ ¼ E ðu2ðt  tÞ  u2ðtÞÞeðtÞ


¼ 0
8t
fu2e2ðtÞ ¼ E ðu2ðt  tÞ  u2ðtÞÞe2ðtÞ


¼ 0
8t
feðeuÞðtÞ ¼ E eðtÞeðt  1  tÞuðt  1  tÞ
½
 ¼ 0
t  0
(6.11)
where fueðtÞ indicates the cross-correlation function between uðtÞ and eðtÞ,
euðtÞ ¼ eðt þ 1Þuðt þ 1Þ, and dðtÞ is an impulse function. The first three conditions
in (6.11) are sufficient to be satisfied for an adequate linear model. However, for a
non-linear model all the five conditions need to be satisfied.
Ideally the model validity tests should detect all the deficiencies in the per-
formance of the NN including bias due to internal noise. In practice normalised
correlations are computed. The sampled correlation function between two
sequences y1ðtÞ and y2ðtÞ is given by
^fy1y2ðtÞ ¼
P
Nt
t¼1
y1ðtÞy2ðt þ tÞ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
P
N
t¼1
y12ðtÞ P
N
t¼1
y22ðtÞ
s
(6.12)
Normalisation ensures that all the correlation functions lie in the range
1  ^fy1y2ðtÞ  1 irrespective of the signal strengths. The correlations will never
be exactly zero for all lags and the 95% confidence bands defined as 1:96=
ﬃﬃﬃﬃ
N
p
are
used to indicate if the estimated correlations are significant or not, where N is
the data length. Therefore, if the correlation functions are within the confidence
intervals the model is regarded as adequate.
152
Flexible robot manipulators: modelling, simulation and control

6.6
Case studies
A set of case study exercises are presented in this section using the LMS, RLS and
GA techniques to develop linear parametric models of the single-link flexible
manipulator from input toque to hub angle and end-point acceleration outputs.
6.6.1
System model and input signal
For identification with the LMS and RLS algorithms the ARMAX structure was
considered. This is given as:
y tð Þ þ a1y t  1
ð
Þ þ    þ anay t  na
ð
Þ ¼ b1u t  1
ð
Þ þ    þ bnbu t  nb
ð
Þ þ e tð Þ
þ c1e t  1
ð
Þ þ    þ cnce t  nc
ð
Þ
(6.13)
where ai, bi, ci are parameters to be identified. This accounts for both the true
system and noise models.
The elasticity of the manipulator arm produces a wide vibration frequency
band-width. The level of vibration at the resonance frequencies of the system is
affected by the level and frequency of the input torque signal. For the input to be
persistently exciting, a combination of bang–bang and pseudo-random binary
sequence (PRBS) signal was utilised to excite the system in the range of 0–100 Hz
covering the rigid body motion and the first three resonance modes. The level of
the bang–bang torque was chosen as 0.065 Nm, which is enough to deliver the
required amount of energy to excite the rigid-body mode of the system without
driving it beyond its maximum angular displacement. A PRBS signal with a level
of 0.0325 Nm was used to excite the plant at higher modes. Figure 6.4 shows
the combined bang–bang and PRBS signal, referred to as the composite PRBS
signal.
The basic decisions in selecting this composite PRBS signal lie in two factors:
clock frequency and sequence length. One reasonable rule of thumb is to select the
clock frequency to be equal to the system bandwidth. The sequence length of PRBS
is not of great practical importance in system identification. The composite PRBS
torque signal is generated using a sequence length of 63, which is reasonably
enough to give the number of harmonic frequencies in the PRBS spectrum range
from zero to the clock frequency. Another important consideration is that the level
of the torque input signal has been selected so that this signal does not bring the
flexible manipulator system out of its operating range. The range of operation of
the flexible manipulator is limited to 80.
For the identification of discrete time models, the sampling time has to be
selected before starting of an experiment. The sampling time depends on the
application and the intended accuracy of the resulting model. The model can easily
exhibit higher-order behaviour if the sampling period is chosen too short. On the
other hand, if the sampling period is too large, the model looks like a constant or
multiple integrators and its dynamic behaviour will be too far from being exact. In
Linear parametric modelling
153

0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
0.15
Time (s)
Torque (Nm)
(a)
0
10
20
30
40
50
60
70
80
90
10−4
10−3
10−2
10−1
100
Frequency (Hz)
Magnitude (Nm/Hz)
(b)
Figure 6.4
The composite input torque: (a) time domain and
(b) spectral density
154
Flexible robot manipulators: modelling, simulation and control

this work, a sampling period of 5 ms is used with an expectation that the input–
output of the system can be sampled comfortably within the bandwidth of the
system without error effects such as aliasing.
There are, however, some useful guidelines, which relate the sample interval to
the response rate of the system to be identified. Certain symptoms will appear in the
estimated model, which indicate that the wrong sample interval has been selected.
Those can be done by observing the position of all poles of the obtained model in the
z-plane. If the poles are found clustered tightly around z ¼ 1, this indicates that the
system has been sampled too rapidly. If the poles are found clustered tightly around
the origin of the z-plane, this indicates that the system has been sampled too slowly.
The ideal aim is for a set of estimated model parameters, which correspond to a
reasonable spread of pole positions in the z-plane (Wellstead and Zarrop, 1991).
The flexible manipulator experimental rig was excited with the composite
PRBS signal and the system response was observed over a duration of 7.5 s with no
payload. It was noted from hub-angle, hub-velocity and end-point acceleration
responses that the composite PRBS sufficiently excited the first three vibration
modes of the system. The resonance frequencies of the first three modes found from
these results are shown in Table 6.1.
6.6.2
Case study 6.1: modelling with LMS algorithm
The manipulator was modelled with the LMS algorithm from torque input to the
hub angle and end-point acceleration output with model orders 8 and 6, respec-
tively. The simulated outputs of hub-angle and end-point acceleration models with
the actual system output are shown in Figures 6.5 and 6.6.
Correlation function validation tests carried out on the hub angle model
showed that none of the correlation functions were within the 95% confidence
interval indicating that the model was inadequate to represent the system, and as
noted in the results in Figures 6.5 and 6.6 the first mode was not identified.
6.6.3
Case study 6.2: modelling with RLS algorithm
In this case study the RLS algorithm is used to model the single-link flexible
manipulator from input to hub angle and end-point acceleration. The impact of
Table 6.1
Modes found from system responses to the
composite PRBS input
Response
First mode
(Hz)
Second mode
(Hz)
Second mode
(Hz)
Hub-angle
11.112
34.26
63.89
End-point
acceleration
11.112
36.11
63.89
Linear parametric modelling
155

forgetting factor is demonstrated in these exercises using l ¼ 1, l ¼ 0:99 and
l ¼ 0:97. Model orders of 8 and 6 were chosen for the hub angle and end-point
acceleration, respectively.
Figures 6.7–6.9 show the measured and estimated hub angle for l ¼ 1.0,
l ¼ 0.99, and l ¼ 0.97, respectively. It is noted in the superimposed time-domain
plots that the estimated hub angle closely traces the measured hub angle. In
 Actual output
 Predicted output 
0
1
2
3
4
5
6
7
−0.06
−0.04
−0.02
0
0.02
0.04
0.06
Time (s)
Normalised magnitude (hub angle)
(a)
0
10
20
30
40
50
60
70
80
90
10−6
10−5
10−4
10−3
10−2
Frequency (Hz)
Normalised magnitude (hub angle)
(b)
Actual
Predicted 
Figure 6.5
System hub angle model with the LMS algorithm: (a) time
domain and (b) spectral density
156
Flexible robot manipulators: modelling, simulation and control

contrast, the corresponding spectral densities show that the use of forgetting factor
does help in allowing the estimated model to provide a closer match with the actual
system behaviour. With l ¼ 1.0, the frequency response of the estimated hub angle
could only reach up to the first mode and this could be improved by lowering
the forgetting factor. With l ¼ 0.97, the frequency response of the estimated hub
angle was improved. The second mode was better identified. However, by
Actual output
Predicted output 
0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Normalised magnitude (end-point acceleration)
(a)
0
10
20
30
40
50
60
70
80
90
10−4
10−3
10−2
10−1
100
Frequency (Hz)
Normalised magnitude (end-point acceleration)
(b)
Actual
Predicted 
Figure 6.6
System end-point acceleration model with the LMS algorithm:
(a) time domain and (b) spectral density
Linear parametric modelling
157

considering the system bandwidth of 100 Hz, applying an eighth-order model
should, theoretically, define a model characterising the first three modes of vibra-
tion of the system. Furthermore, with the use of forgetting factor the estimated
parameters tend to oscillate rather than converge to a certain value. This may not be
0
1
2
3
4
5
6
7
–60
–40
–20
0
20
40
60
Time (s)
Hub-angle (deg)
- - - - = Measured      _____ = Estimated
(a)
0
10
20
30
40
50
60
70
80
10–4
10–3
10–2
10–1
100
101
Frequency (Hz)
Magnitude (Nm/Hz)
- - - - = Measured         _____ = Estimated
(b)
Figure 6.7
Measured and estimated hub angle (l ¼ 1.0): (a) time domain
and (b) spectral density
158
Flexible robot manipulators: modelling, simulation and control

desirable in some adaptive control applications, if the fluctuation in model char-
acteristics is excessive. Thus, the forgetting factor must be selected so that the
dynamics of estimated model are kept sufficiently within an acceptable range.
Figures 6.10–6.12 show the pole/zero plots of the system models in the z-plane. It is
0
1
2
3
4
5
6
7
–60
–40
–20
0
20
40
60
Time (s)
Hub-angle (deg)
- - - - = Measured         _____ = Estimated
(a)
0
10
20
30
40
50
60
70
80
10–4
10–3
10–2
10–1
100
101
Magnitude (Nm/Hz)
- - - - = Measured   _____ = Estimated
(b)
Frequency (Hz)
Figure 6.8
Measured and estimated hub-angle (l ¼ 0.99): (a) time domain
and (b) spectral density
Linear parametric modelling
159

noted that the obtained models exhibit non-minimum phase behaviour, indicated by
several zeros outside the unit circle.
Correlation function validation tests carried out on the hub angle model
showed that all the correlation functions were within the 95% confidence interval
indicating that the model was adequate to represent the system.
0
1
2
3
4
5
6
7
–60
–40
–20
0
20
40
60
Time (s)
Hub-angle (deg)
- - - - = Measured         _____ = Estimated
(a)
0
10
20
30
40
50
60
70
80
10–4
10–3
10–2
10–1
100
101
Frequency (Hz)
Magnitude (Nm/Hz)
- - - - = Measured         _____ = Estimated
(b)
Figure 6.9
Measured and estimated hub-angle (l ¼ 0.97): (a) time domain
and (b) spectral density
160
Flexible robot manipulators: modelling, simulation and control

Figures 6.13–6.15 show the measured and estimated end-point accelerations
using l ¼ 1.0, l ¼ 0.99 and l ¼ 0.97 over a duration of one second. It is noted that
the estimated acceleration closely traced the measured end-point accelerations. The
corresponding spectral densities show that the amplitude estimation at the first
resonance mode was not as close to measured value as that at the second and
–1.5
–1
–0.5
0
0.5
1
1.5
–1.5
–1
–0.5
0
0.5
1
1.5
Real
Imaginary
O = Zeros ; X = Poles
Figure 6.10
Pole/zero set of the hub angle model in the z-plane (l ¼ 1.0)
–1.5
–1
–0.5
0
0.5
1
1.5
–1.5
–1
–0.5
0
0.5
1
1.5
Real
Imaginary
O = Zeros ; X = Poles
Figure 6.11
Pole/zero set of the hub angle model in the z-plane (l ¼ 0.99)
Linear parametric modelling
161

third modes. However, the estimated model matched the system reasonably well.
Figures 6.16–6.18 show the pole/zero sets of the system model in the z-plane.
It is noted that the end-point acceleration model exhibited non-minimum phase
behaviour.
Correlation function validation tests carried out on the end-point acceleration
model showed that all the correlation functions were within the 95% confidence
interval indicating that the model was adequate to represent the system.
6.6.4
Case study 6.3: modelling with GA
In this case study, a GA was used for linear parametric modelling of the flexible
manipulator. The fitness function utilised is the sum-squared error between the
actual output, yðnÞ, of the system and the predicted output, ^yðnÞ, produced from the
input to the system and the optimised parameters. This is defined as:
f ðeÞ ¼
X
n
i¼1
yðnÞ  ^yðnÞ
j
j
ð
Þ2
(6.14)
where n is the number of input/output samples. With the fitness function given
above, the global search technique of the GA was utilised to obtain the best set of
parameters among all the attempted orders for the system. The output of the system
was thus simulated using the best sets of parameters and the system input.
Modelling with GA was carried out with manipulator responses to the composite
PRBS signal shown in Figure 6.4. The manipulator was modelled from the input
torque to hub-angle and end-point acceleration. These are referred to as the hub angle
model and end-point acceleration model, respectively. In modelling the manipulator
–1.5
–1
–0.5
0
0.5
1
1.5
–1.5
–1
–0.5
0
0.5
1
1.5
Real
Imaginary
O = Zeros ; X = Poles
Figure 6.12
Pole/zero set of the hub angle model in the z-plane (l ¼ 0.97)
162
Flexible robot manipulators: modelling, simulation and control

with the GA different initial values and operator rates were investigated, and satis-
factory results were achieved with the following set of parameters:
Generation gap
:0.9
Crossover rate
:0.7
Mutation rate (hub angle model)
:0.00313
Mutation rate (end-point acceleration model)
:0.00417
0
0.2
0.4
0.6
0.8
1
–0.2
–0.15
–0.1
–0.05
0
0.05
0.1
0.15
0.2
Time (s)
End-point acceleration (M/s2)
- - - - = Measured         _____ = Estimated
(a)
0
10
20
30
40
50
60
70
80
10–4
10–3
10–2
10–1
100
Frequency (Hz)
Magnitude (M/s2/Hz)
- - - - = Measured         _____ = Estimated
(b)
Figure 6.13
Measured and estimated end-point acceleration (l ¼ 1.0):
(a) time domain and (b) spectral density
Linear parametric modelling
163

The hub angle model was investigated with different orders. The best result
was achieved with an order 8. The GA was designed with 100 individuals in each
generation. The maximum number of generations was set to 500. The algorithm
achieved the best sum-squared error level of 0.000163 in the 500th generation. It
0
0.2
0.4
0.6
0.8
1
–0.2
–0.15
–0.1
–0.05
0
0.05
0.1
0.15
0.2
Time (s)
End-point acceleration (M/s2)
- - - - = Measured         _____ = Estimated
(a)
0
10
20
30
40
50
60
70
80
10–4
10–3
10–2
10–1
100
Frequency (Hz)
Magnitude (M/s2/Hz)
- - - - = Measured         _____ = Estimated
(b) 
Figure 6.14
Measured and estimated end-point acceleration (l ¼ 0.99):
(a) time domain and (b) spectral density
164
Flexible robot manipulators: modelling, simulation and control

was noted that a good level of accuracy was achieved with a smaller number of
generations. Figure 6.19 shows the hub angle response in time and frequency
domains, and the corresponding modelling error and algorithm convergence are
shown in Figure 6.20. The first three vibration modes, as found from the GA
0
0.2
0.4
0.6
0.8
1
–0.2
–0.15
–0.1
–0.05
0
0.05
0.1
0.15
0.2
Time (s)
End-point acceleration (M/s2)
- - - - = Measured         _____ = Estimated
(a)
0
10
20
30
40
50
60
70
80
10–4
10–3
10–2
10–1
100
Frequency (Hz)
Magnitude (M/s2/Hz)
- - - - = Measured         _____ = Estimated
(b)
Figure 6.15
Measured and estimated end-point acceleration (l ¼ 0.97):
(a) time domain and (b) spectral density
Linear parametric modelling
165

simulated output were at 11.112, 34.26 and 63.89 Hz, respectively. These match
those of the system stated in Table 6.1 precisely.
With the end-point acceleration model, the best result was achieved with an
order of 6. The number of individuals for each generation was selected as 100 and
–1.5
–1
–0.5
0
0.5
1
1.5
–1.5
–1
–0.5
0
0.5
1
1.5
Real
Imaginary
O = Zeros ; X = Poles
Figure 6.16
Pole/zero set of the end-point acceleration model in the
z-plane (l ¼ 1.0)
–1.5
–1
–0.5
0
0.5
1
1.5
–1.5
–1
–0.5
0
0.5
1
1.5
Real
Imaginary
O = Zeros ; X = Poles
Figure 6.17
Pole/zero set of the end-point acceleration model in the
z-plane (l ¼ 0.99)
166
Flexible robot manipulators: modelling, simulation and control

the maximum number of generations was set to 500. The algorithm achieved the
best sum-squared error level of 0.18944 in the 500th generation. Figure 6.21 shows
the end-point acceleration response in time and frequency domains, and the cor-
responding modelling error and algorithm convergence are shown in Figure 6.22.
The first three vibration modes found from the GA simulated output were at
11.112, 34.26 and 63.89 Hz, which match those of the system stated in Table 6.1.
Correlation function validation tests carried out on the GA-based hub angle
and end-point acceleration models showed that all the correlation functions were
within the 95% confidence interval indicating that the models were adequate to
represent the system.
On a comparative assessment of the models obtained with LMS, RLS and GA,
it is noted that the GA approach has outperformed the RLS and LMS techniques in
terms of identification of dominant resonance frequencies of the manipulator and
dynamic behaviour of the system in general.
6.7
Summary
An investigation into linear parametric modelling of the system has been carried
out using a composite PRBS torque input with LMS, RLS and GA approaches. The
system has been modelled from input torque to hub angle output (hub angle model)
and end-point acceleration output (end-point acceleration model), covering the first
three dominant vibration modes of the system. The use of forgetting factor has been
considered with RLS modelling in an attempt to allow the algorithm jump out of
–1.5
–1
–0.5
0
0.5
1
1.5
–1.5
–1
–0.5
0
0.5
1
1.5
Real
Imaginary
O = Zeros ; X = Poles
Figure 6.18
Pole/zero set of the end-point acceleration model in the
z-plane (l ¼ 0.97)
Linear parametric modelling
167

 Actual output
 Predicted output 
0
1
2
3
4
5
6
7
−0.05
−0.04
−0.03
−0.02
−0.01
0
0.01
0.02
0.03
0.04
0.05
Time (s)
Normalised magnitude (hub angle)
(a)
0
10
20
30
40
50
60
70
80
90
10−6
10−5
10−4
10−3
10−2
Frequency (Hz)
Normalised magnitude (hub angle)
(b)
Actual
Predicted 
Figure 6.19
Hub angle model response with GA: (a) time domain and
(b) spectral density
168
Flexible robot manipulators: modelling, simulation and control

0
1
2
3
4
5
6
7
−5
−4
−3
−2
−1
0
1
2
3
4
5 × 10−3
Time (s)
Error
(a)
0
50
100
150
200
250
300
350
400
450
500
−0.1
0
0.1
0.2
0.3
0.4
0.5
Generation
log10( f(e))
(b)
Figure 6.20
Hub angle modelling with GA: (a) error between the actual
and the predicted outputs and (b) the sum-squared error
Linear parametric modelling
169

0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Normalised magnitude (end-point acceleration)
(a)
0
10
20
30
40
50
60
70
80
90
10−4
10−3
10−2
10−1
100
Frequency (Hz)
Normalised magnitude (end-point acceleration)
(b)
Actual
Predicted 
Actual output
Predicted output 
Figure 6.21
End-point acceleration model response with GA:
(a) time domain and (b) spectral density
170
Flexible robot manipulators: modelling, simulation and control

0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Error
(a)
0
50
100
150
200
250
300
350
400
450
500
−0.8
−0.7
−0.6
−0.5
−0.4
−0.3
−0.2
−0.1
0
0.1
0.2
Generation
log10( f(e))
(b)
Figure 6.22
End-point acceleration model with GA: (a) error between the
actual and the predicted output and (b) the sum-squared error
Linear parametric modelling
171

local optima points. Various model orders have been investigated and model orders
8 and 6 for the hub angle and end-point acceleration have achieved relatively good
results. Overall the LMS approach has fallen at the lowest level of accuracy among
the three approaches. While the RLS approach has achieved reasonably good
results, the level of accuracy achieved has not been as good as with the GA
modelling. This is due to the random search mechanism of GA with which the
algorithm has better chance of avoiding local optima and hit the global optimum
point.
172
Flexible robot manipulators: modelling, simulation and control

Chapter 7
Neural network modelling
This chapter presents the neural network modelling of a single link flexible
manipulator system. The modelling exercise is presented in two parts. The first part
of the chapter uses two popular neural network structure, multilayer perceptron
(MLP) and radial basis function (RBF). After appropriate training these are used
to identify the dominant vibration modes of a flexible manipulator system. The
system identification is realised by minimising the prediction error of the actual
plant output and the model output. The second part of the chapter deals with the
neural network modelling of dynamic systems. This is to perform parametric
identification of a physical system and identify structural features and parameter
values including the identification of the model structure. The neural network
trained through supervised learning is used for both structure identification and
parameter estimation. The technique is then used to model a flexible manipulator
system using a composite input torque. The models are developed for hub angle,
hub velocity and end-point acceleration.
7.1
Introduction
System identification is one of the most fundamental requirements for many
engineering and scientific applications. The objective of system identification is to
find exact or approximate models of dynamic systems based on observed inputs
and outputs. Once a model of the physical system is obtained, it can be used for
solving various problems such as to control the physical system or to predict its
behaviour under different operating conditions (Sze, 1995; Tabrizi et al., 1990;
Worden et al., 1994). A number of techniques have been devised by researchers to
determine model that best describe input–output behaviour of a system. In many
cases when it is difficult to obtain a model structure for a system with traditional
system identification techniques, intelligent techniques are desired that can
describe the system in the best possible way (Elanayar and Yung, 1994).
Artificial neural networks (NNs) constitute intelligent techniques used commonly
for system identification and modelling. The neural network approach for system
identification offers many advantages over traditional ones especially in terms of
flexibility and hardware realisation (Ljung and Sjo¨berg, 1992). This technique is quite
efficient in modelling non-linear systems or if the system possesses non-linearities to
any degree.

This chapter presents an investigation into the use of NNs to model a single-
link flexible manipulator system. Many kinds of neural networks have been pro-
posed, amongst the most popular neural networks are the multilayer perceptron
(MLP), radial basis function (RBF), Hopfield, cellular and adaptive resonance
theory networks. The MLP and RBF NNs are used in this chapter to model a single-
link flexible manipulator system. These identification techniques have been able to
identify the dominant vibration mode of the system successfully. The NN-based
identification of the system are realised in this investigation by minimising the
prediction error of the actual plant output and the model output. The second part of
the chapter deals with the NN modelling for dynamic systems. This is to perform
parametric identification of a physical system and identifies structural features and
parameter values including the identification of the model structure (form of linear
or nonlinear differential or difference equations as well as parameter estimation,
where the model structure is known). The NNs trained through supervised learning
can be used for both structure identification and parameter estimation. As structure
identifiers, they can be trained to select elements of a model structure from a pre-
determined set. NN structure identifiers and parameter estimators are both trained
off-line with a generalised simulation system. In structure identification, for
example, the network output is a vector of structural features and network weights
that are optimised to minimise the sum-squared error between the actual feature
and its computer representation.
7.2
Neural networks
Modelling using neural networks has increasingly been recognised as a distinct
and important system identification paradigm. It initially appeared as a mere
collection of constructive non-linear modelling techniques that were loosely
connected and ad hoc in nature (Chen and Billings, 1992; Narendra and
Parthasathy, 1990). Collective research efforts in the past years have made this
a more coherent approach, with both clear theoretical content and practical
relevance (Brown and Harris, 1994; Sjo¨berg et al., 1994; Suykens et al., 1995).
Sharing a number of common features with other non-linear modelling techni-
ques, neuro-modelling can be viewed as an expansion technique for approx-
imating an unknown non-linear system. However, neuro-modelling has its own
features, focus and methodology.
As stated earlier, NNs are computational models comprising numerous
non-linear processing elements arranged in patterns similar to biological neural
networks. These computational models have now become exciting alternatives to
conventional approaches in solving a variety of engineering and scientific pro-
blems. Many varieties of neural networks have been proposed, amongst the most
popular neural networks are the MLP, RBF, Hopfield, cellular and adaptive
resonance theory networks. In this chapter MLP and RBF are used to model the
single-link flexible manipulator.
174
Flexible robot manipulators: modelling, simulation and control

7.2.1
MLP neural network
Multilayered perceptron NNs are feedforward neural networks extensively used in
numerous applications including pattern recognition, function approximation, sys-
tem identification, prediction and control, speech and natural language processing.
An MLP NN is capable of forming arbitrary decision boundaries and representing
Boolean functions (Minsky and Papert, 1969). The network can be made up of any
number of layers with reasonable amount of neurons in each layer, based on the
nature of an application. A generalised architecture of MLP representing its basic
functions is shown in Figure 7.1. The layer to which the input data is supplied is
called the input layer and the layer from which the output is taken is known as the
output layer. All other intermediate layers are called hidden layers. The layers are
fully interconnected that means each processing unit is connected to every neuron
in the previous and succeeding layers. However, the neurons in the same layer are
not connected to each other. A basic unit of this network or a neuron performs two
functions, the combining functions and the activation functions. Different types of
activation functions such as threshold, piecewise linear, sigmoid, tansigmoid and
Gaussian are used for activation. The two functions performed by a basic element
of the network or neuron can be explained by considering a neuron j of layer m as
shown in Figure 7.2.
The combining function produces an activation for the neuron of the form,
vm
j ðtÞ ¼
X
nm1
i¼1
wm
ij xm1
i
þ bm
j
(7.1)
where wm
ij is the weight connection between the ith neuron of the ðm  1Þth layer
and the jth neuron of the mth layer, bm
j is the threshold of the neuron and nm1 is the
number of neuron in the ðm  1Þth layer. The activation function performs a non-
linear transformation to give the output,
xm
j ðtÞ ¼ f ðvm
j ðtÞÞ
(7.2)
F1
F1
F1
∑
∑
∑
∑
∑
∑
∑
∑
F2
F2
F2
F3
F3
 F3
p (1)
p (2)
p (3)
p (R)
1
1
1
1
...
...
...
...
1
1
∑
Figure 7.1
Multiple layers of feedforward neural network
Neural network modelling
175

where f ðÞ is the non-linear transformation or activation function. By combining
(7.1) and (7.2) the output of a functional unit of the neuron can be expressed as
xm
j ðtÞ ¼ f
X
nm1
i¼1
wm
ij xm1
i
þ bm
j
 
!
(7.3)
The functionality of the network is determined by specifying the strength of the
connection paths, called weights and the threshold parameter of each neuron. The
input layer usually acts as an input data holder and distributes inputs to the first
hidden layer. The inputs then propagate forward through the network and each
neuron computes its output according to the learning rule chosen.
7.2.1.1
Backpropagation learning for MLP-NN
The most popular learning algorithm extensively used to train MLP-NN is the
backpropagation algorithm. The algorithm was derived by generalising the Widrow
and Hoff learning rule (Widrow and Hoff, 1960) to multiple layer networks and
non-linear differentiable transfer functions. This is based on gradient-descent
method, minimising the sum-squared error between the actual output and the
desired output. Input vectors and the corresponding output vectors are used to train
a network until it can approximate a function, associate input vectors with specific
output vectors, or classify input vectors in an appropriate manner as defined by the
user. The sum-squared error of the network is minimised through the algorithm by
continually adjusting the weights and biases in the direction of the steepest descent
with respect to the error. This is known as gradient descent procedure. Networks
with biases, at least one sigmoid neuron layer, and a linear output neuron layer are
capable of approximating any reasonable function (Leshno, 1993; Widrow and
Lehr, 1990). Trained backpropagation networks tend to give reasonable answers
when presented with inputs that they have never been seen. Typically, a new input
m
j
n
j=1
m–1
ij
m
ij
m
j
b
∑
x
w
v
m–1
(t) =
x
t
f v
t
j
m
j
m
( )
(
( ))
=
w j
m
2
xm–1
1
xn
m–1
m–1
w j
m
1
wjn
m
m–1
x j
m
xm–1
2
+
Figure 7.2
A neuron j of layer m
176
Flexible robot manipulators: modelling, simulation and control

will lead to an output similar to the correct output for input vectors used in training
that are similar to the new input being presented. This generalisation property
makes it possible to train a network on a representative set of input target pairs and
obtain good results for new inputs without training.
To explain the backpropagation learning algorithm, consider a three-layered
neural network as shown in Figure 7.3, where Ok; Oj and Oi are output values at the
output, hidden and input layers, respectively. wkj is a connection weight from unit j
at the hidden layer to unit k at the output layer. Similarly, wji is a connection weight
from unit i at the input layer to unit j at the hidden layer.
Thus, it follows from (7.1) and (7.2) that,
Ok ¼ f ðnetkÞ
(7.4)
netk ¼
X
j
wkjOj þ bk
(7.5)
Similarly, for the hidden layer,
Oj ¼ f ðnetjÞ
(7.6)
netj ¼
X
i
wjiOi þ bj
(7.7)
where bj and bk are the biases, added at the hidden layer and the output layer,
respectively, and f ðxÞ is an activation function given (for sigmoid function) as,
f ðxÞ ¼
1
1 þ ex
(7.8)
1
1
bj
Oj
Oi
Ok
netk
netj
wkj
wji
bk
...
...
...
...
...
...
...
...
...
Figure 7.3
Multilayered perceptron neural network (three layers)
Neural network modelling
177

and, for a tanhyperbolic function, as:
f ðxÞ ¼ ex  ex
ex þ ex
(7.9)
The learning procedure requires a set of pairs of input/output patterns. The
network produces its own output pattern with the given data set and then compares
with the target output. Learning takes place if the error (difference between the
output of the neural network and the target output) is more than the specified or
desired error. Using the cost function, the connection weights are adjusted
accordingly to reduce the error. Cost function is normally based on squared error
function E, given by:
E ¼
X
p
Ep
(7.10)
Ep ¼ 1
2
X
k
ðtpk  OpkÞ2
(7.11)
where tpk is the desired output for the kth component of the output pattern for
pattern p and Opk is the corresponding actual output. Thus, EP is a measure of the
error on input/output pattern p and E is the overall measure of the error.
According to the backpropagation algorithm the connection weights between
the layers of the multilayered neural network are adapted in accordance with the
following rules:
Dwkj ¼ hdkOj
(7.12)
Dwji ¼ hdjOi
(7.13)
where h is the learning rate and for sigmoid function,
dk ¼ Okð1  OkÞðtk  OkÞ
(7.14)
dj ¼ Ojð1  OjÞ
X
k
dkwkj
(7.15)
and for tansigmoid function,
dk ¼ Okð1  O2
kÞðtk  OkÞ
(7.16)
dj ¼ Ojð1  O2
j Þ
X
k
dkwkj
(7.17)
Derivation of the algorithm can be found in a number books (Luo and Unbehauen,
1997; Omatu et al., 1996). The derivation mainly involves determining the error
function and the criteria for the adaptation of the weight, which is proportional to
the ratio of the derivative of the error measure with respect to each weight.
The standard backpropagation algorithm is based on the steepest descent
(gradient) algorithm and looking to find the minimum of the error. This approach
178
Flexible robot manipulators: modelling, simulation and control

may get stuck in a shallow local minimum. Another problem to be addressed is to
determine the size of the hidden nodes or hidden layers. From regression analysis, it
is well known that if the number of hidden layers or number of neurons in the
hidden layers are increased, the prediction error becomes smaller. However, for
practical reasons, it is not recommended to increase those factors beyond certain
limits (Omatu et al., 1996). Moreover, minimising the squared error by increasing
the number of neurons does not mean building a good neural network. Thus, to
search for an optimal number of hidden neurons leading to acceptable sum-squared
error is desirable.
7.2.1.2
Improving backpropagation
To enable the MLP-NN to slide through a local minimum there are two popular
approaches. One is to adding momentum and the other the Marquardt–Levenberg
algorithm. These modifications help the network to converge faster as well.
It is noted that the shallow local minimum problem associated with the stan-
dard backpropagation algorithm could be solved by increasing the learning rate. In
order to increase the learning rate, without leading to oscillation in the output
response, (7.12) and (7.13) can be modified to include a momentum term. This can
be accomplished by the rule (Omatu et al., 1996).
Dwkjðt þ 1Þ ¼ hdkOj þ aDwkjðtÞ
(7.18)
Dwjiðt þ 1Þ ¼ hdjOi þ aDwjiðtÞ
(7.19)
where t indexes the presentation time, h is the learning rate and a is a constant that
determines the effect of past connection weight changes on the current direction of
movement in connection weights space. Adding momentum to backpropagation
decreases the probability that the network will get stuck in a shallow minimum in
the error surface and helps decrease training times.
Acting like a low-pass filter, momentum allows the network to ignore small
features in the error surface. The momentum term prevents oscillation and filters
out high-frequency variations of the error-surface in the connection weight space.
When the momentum constant is zero a weight change is based solely on the
gradient. When the momentum constant is unity the new weight change is set to
equal the last weight change and the gradient is simply ignored. Using optimum
value of the momentum term, effective learning rate can be selected. Rumelhart
and Zipser (1986) have recommended a value of about 0.9 for the momentum
factor, a.
While backpropagation is a steepest descent algorithm, the Marquardt–
Levenberg (Marquardt, 1963) algorithm is an approximation to Newton’s method.
Consider a function,
EðxÞ ¼
X
N
j¼1
e2
j ðxÞ
(7.20)
Neural network modelling
179

and assume that it is required to be minimised with respect to the parameter vector
x. Then according to the Gauss–Newton method the update would be
Dx ¼ J TðxÞ JðxÞ
h
i1
J TðxÞeðxÞ
(7.21)
where JðxÞ is the Jacobian matrix. The Marquardt–Levenberg modification to the
Gauss–Newton method is,
Dx ¼ J TðxÞ JðxÞ þ mI
h
i1
J TðxÞeðxÞ:
(7.22)
The parameter m is multiplied by some factor ðbÞ whenever a step would result in an
increased EðxÞ. When a step reduces EðxÞ, m is divided by b. Note that when m is
large the algorithm becomes steepest descent (with step 1=m), while for infinitesimal
m the algorithm becomes Gauss–Newton (Battiti, 1992). The Marquardt–Levenberg
algorithm can be considered a trust region modification to Gauss–Newton. The key
step in this algorithm is the computation of the Jacobian matrix. For the neural
network mapping problem the terms in the Jacobian matrix can be computed by a
simple modification to the backpropagation algorithm (Hagan and Menhaj, 1994).
7.2.2
RBF neural network
The RBF NN is a special class of multilayer feed-forward networks, widely studied
and applied with supervised learning to solve engineering problems. The hidden
units of this network provide a set of ‘‘functions’’ that constitute an arbitrary
‘‘basis’’ for the input vectors when they are expanded into the hidden-unit space;
these functions are called ‘‘radial basis’’ functions. The activation of the hidden unit
is determined by the distance between the input vector and a prototype vector
(centre vector). There are various learning algorithms for the RBF-NN. The basic
one employs the hybrid learning algorithm, which converges much faster than the
backpropagation algorithm for training multilayer perceptron. This follows from
the interpretation, which can be given to the internal representations formed by
the hidden units and leads to a two-stage training procedure. In the first stage, the
parameters governing the basis functions (corresponding to the hidden units)
are determined using relatively fast, unsupervised methods (methods that only use
the input data and not the target data). The second stage of training then involves
the determination of the final-layer weights that requires solution to a linear pro-
blem and is also fast. RBFs provide powerful tools for multidimensional approx-
imation or filtering, and essentially do not suffer from the problem of proliferation
of the adjustable parameters as the dimensionality of the problem increases.
Figure 7.4 shows the basic structure of the RBF-NN. The input layer has neurons
with a linear function that simply feeds the input signals to the hidden layer. More-
over, the connection between the input layer and hidden layer are not weighted, that
is, each hidden neuron receives corresponding input value as unaltered. The hidden
neurons are processing units that perform the radial basis function. In contrast, to the
MLP network, the RBF network usually has only one hidden layer.
180
Flexible robot manipulators: modelling, simulation and control

The transfer function of the hidden neurons in the RBF network can be local or
global. Local RBFs that are widely studied include,
Gaussian
: fðrÞ ¼ exp
r2
2s2


Inverse multiquadric
: fðrÞ ¼ ðr2 þ s2Þa; a > 0:
(7.23)
However, it is not necessary for the functions to be localised. There are a good
number of global RBF functions studied intensively such as:
Linear
: fðrÞ ¼ r
Cubic
: fðrÞ ¼ r3
Thin plate spline
: fðrÞ ¼ r2 logðrÞ
Multiquadric
: fðrÞ ¼ ðr2 þ s2Þ1=2
Shiftedlogarithm
: fðrÞ ¼ logðr2 þ s2Þ
Pseudo potential functions
: fðrÞ ¼ ð1  er2=s2ÞlogðrÞ
(7.24)
where s is a real number commonly referred to as receptive width or simply the
width of the locally tuned function, which describes the sharpness of the hyperbolic
cone used in the radial basis function.
7.2.2.1
RBF-NN-functional description
Consider
an
RBF
NN
with
the
input
at
time
t
denoted
by
uðtÞ ¼
u1ðtÞ; u2ðtÞ; . . .; unðtÞ
½
T and let the connection vector of each hidden neuron be
denoted by cjðfor j ¼ 1; 2; . . .; nhÞ, where nh represents the number of neurons in
the hidden layer. Then, the output of each neuron in the hidden layer is given as:
hjðtÞ ¼ fjðkuðtÞ  cjkÞðj ¼ 1; 2; . . . ; nhÞ
(7.25)
The connection between the output layer and the hidden layer are weighted.
Each neuron of the output layer has a linear input–output relationship so that they
ˆy(t)
j
t –
f
c
x
)
(
x1(t)
x2(t)
xn(t)
wjk
wk0
1
Linear combinator
...
...
...
...
Non-linear transformation
∑
Figure 7.4
Radial basis function neural network
Neural network modelling
181

perform simple summations; that is, the output of the kth neuron in the output layer
at time t is,
^ykðtÞ ¼
X
nh
j¼1
wjkhjðtÞ ¼
X
nh
j¼1
wjk fjðkuðtÞ  cjkÞ
ðk ¼ 1; 2; . . .; MÞ
(7.26)
where M represents the number of neurons in the output layer and wjk is the con-
nection weight between the jth neuron in the hidden layer and kth neuron in the
output layer. Including the bias parameter wk0 in the linear sum, (6.26) becomes,
^ykðtÞ ¼ wk0 þ
X
nh
j¼1
wjkhjðtÞ ¼ wko þ
X
nh
j¼1
wjk fjðkuðtÞ  cjkÞ
(7.27)
The bias parameter compensates for the difference between the average value over
the data set of the basis function activation and the corresponding average value
of the targets.
It has been shown experimentally that if a sufficient number of hidden neurons
is used and the centre vectors are suitably distributed in the input domain, then the
RBF-NN is able to approximate a wide class of non-linear multidimensional
functions. Moreover, the choice of the nonlinearity of the RBF-NN is not crucial
for the approximation performance of the network. For example, this holds for
the non-linearity of the thin-plate-spline function, f ðrÞ ! 1 as r ! 1 and for the
non-linearity of the Gaussian function, f ðrÞ ! 0 as r ! 1. Although these two
non-linearities have quite different properties, both the resulting RBF-NNs have
good approximation capabilities. However, the approximation performance of an
RBF-NN network critically depends on the choice of the centres.
It follows from (6.25) and (6.27) that, in general an RBF-NN is specified by
two sets of parameters: the connection weights and the vector of centres. These
parameters can in principle be determined from the available sample vectors
(training data) by solving the optimisation problem:
E ¼
X
S
t¼1
kyðtÞ  ^yðtÞk2
(7.28)
where S is the number of available sample vectors, ^yðtÞ ¼ ½^y1ðtÞ;^y2ðtÞ; . . .;^yMtÞT
is the output vector computed from the sample input vector by using (7.25) and
(7.27) and yðtÞ is the corresponding desired output vector. Clearly, the gradient
descent procedure may be used to solve this optimisation problem. However, in
practice, an alternative approach is used to find the parameters of an RBF-NN. This
approach essentially includes the following three steps:
●
Determine the centre vectors cj ( for j ¼ 1; 2; . . .; nh),
●
Determine the scalar gain sj ( for j ¼ 1; 2; . . .; nh), and
●
Determine the connection weights wjk ðfor k ¼ 1; . . .; M; j ¼ 1; . . .; nhÞ.
There are various learning algorithms for determining the vector of centres as will
be discussed later.
182
Flexible robot manipulators: modelling, simulation and control

It should be noted that for some RBF functions, such as the Gaussian function,
it is necessary to determine the scaling parameter sj before determining the con-
nection weights. An appropriate method to determine the scaling parameter sj is
based on the p-nearest neighbour heuristic, that is,
sj ¼ 1
p
X
p
i¼1
kcj  cik2
ðj ¼ 1; 2; . . . ; nhÞ;
(7.29)
where ciðfor i ¼ 1; 2; . . .; pÞ represents the p-nearest neighbours of cj.
Since an RBF-NN has only one layer of weighted connections and the output
neurons are simple summation units, (7.28) will become a linear least-squares problem
once the vector of centres and the scaling parameters have been determined. That is,
min
w
X
S
t¼1
kyðtÞ  ^yðtÞk2 ¼ min
w kwF  ^yk2;
(7.30)
where w ¼
wij


is the M  nh matrix of connection weights, F is an nh  S
matrix consisting of the outputs of the hidden neurons and whose elements are
computed with
Fjt ¼ fjðkuðtÞ  cjkÞð j ¼ 1; 2; . . .; nh; t ¼ 1; 2; . . .; SÞ
(7.31)
and ^y ¼ ^yð1Þ; ^yð2Þ; . . . ; ^yðSÞ
½
 is the M  S matrix of the desired outputs. The
connection weight matrix w in (3.31) can be found in an explicit form as:
w ¼ ^yFþ
(7.32)
where Fþ is the pseudoinverse of F. This is a batch processing version of deter-
mining the connection weights of the RBF network, and is used in cases where all
sample sets are available at one time. In some cases, each new sample set becomes
available recursively. For these cases, the following recursive procedure can be
used to determine the right connection weights:
1.
Initialise randomly all connection weights.
2.
Compute the output vector ^yðtÞ using (7.27).
3.
Compute the error term
ekðtÞ ¼ ykðtÞ  ^ykðtÞ
ðk ¼ 1; 2; . . .; MÞ:
(7.33)
4.
Adjust the connection weights according to:
wjkðt þ 1Þ ¼ wjkðtÞ þ gekðtÞ fjðkuðtÞ  cjkÞ:
(7.34)
ðk ¼ 1; 2; . . . ; M; j ¼ 1; 2; . . .; nhÞ, where g is the learning rate parameter.
5.
Compute the total error:
2¼ kyðtÞ  ^yðtÞk2
(7.35)
and iterate the computation by returning to step (2) until this error is less than
the specified one. This recursive procedure is derived from (7.30) using the
gradient descent method.
Neural network modelling
183

7.2.2.2
RBF-NN learning algorithms
The task of a learning algorithm (optimisation scheme) for the RBF network is to
select the centres and find a set of weights that makes the network perform the
desired mapping. A number of learning algorithms are commonly used for this
purpose including:
●
Non-linear optimisation of all the parameters (centres and output weights, or
other free parameters).
●
Random centre selection and a least square algorithm.
●
Clustering and a least square algorithm.
●
The orthogonal least square algorithm.
Among these the orthogonal least square algorithm is popularly used. Details of this
can be found in Chen et al. (1991).
7.3
Modelling with NN
Various modelling techniques can be used with neural networks to identify non-
linear dynamical systems. These include state-output model, recurrent state
model and non-linear autoregressive moving average process with exogeneous
(NARMAX) input model. However, it is evident from the literature that if the
plant’s input and output data are available, the NARMAX model is a suitable
choice, for modelling systems having nonlinearities, with standard backpropa-
gation and radial basis function learning algorithms. Mathematically the model is
given by:
^yðtÞ ¼ f

ðyðt  1Þ; yðt  2Þ; . . .; yðt  nyÞ;
uðt  1Þ; uðt  2Þ; . . .; uðt  nuÞ;
eðt  1Þ; eðt  2Þ; . . . ; eðt  neÞ

þ eðtÞ;
(7.36)
where ^yðtÞ is the output vector determined by the past values of the system input
vector, output vector and noise with maximum lags ny, nu and ne, respectively, f ðÞ
is the system mapping constructed through MLP or RBF neural networks with an
appropriate learning algorithm. The model is also known as NARMAX equation
error model. However, if the model is good enough to identify the system without
incorporating the noise term or considering the noise as additive at the output,
the model can be represented in a NARX form (Luo and Unbehauen, 1997; Sze,
1995) as,
^yðtÞ ¼ f ðyðt  1Þ; yðt  2Þ; . . .; yðt  nyÞ; uðt  1Þ; uðt  2Þ; . . .; uðt  nuÞ


þ eðtÞ
(7.37)
This is shown in Figure 7.5.
184
Flexible robot manipulators: modelling, simulation and control

7.4
Model validation techniques
Once a model of the system is obtained, it is required to validate whether the model
is good enough to represent the system. A number of such validation tests are
available in the literature, some of which are described below.
7.4.1
One-step ahead prediction
A common measure of predictive accuracy used in control and system identifica-
tion is to compute the one step-ahead (OSA) prediction of the system output. This
is expressed as:
^yðtÞ ¼ f ðuðtÞ; uðt  1Þ; . . .; uðt  nuÞ; yðt  1Þ; . . .; yðt  nyÞÞ;
(7.38)
where f ðÞ is a non-linear function, u and y are the inputs and outputs, respectively.
The residual or prediction is given by:
eðtÞ ¼ yðtÞ  ^yðtÞ:
(7.39)
Often ^y tð Þ will be a relatively good prediction of y tð Þ over the estimation set, even
if the model is biased, because the model was estimated by minimising the pre-
diction errors.
7.4.2
Model predicted output
Another method to evaluate the predictive capability of the fitted model is to
compute the model predicted output (MPO). This is defined by:
^ydðtÞ ¼ f ðuðtÞ; uðt  1Þ; . . . ; uðt  nuÞ;^ydðt  1Þ; . . .;^ydðt  nyÞÞ
(7.40)
and the deterministic error or deterministic residual is:
edðtÞ ¼ yðtÞ  ^ydðtÞ
(7.41)
Flexible
manipulator
MLP/RBF
neural
network
model
z–1
z–1
z–nu
z–ny
Training
mechanism
ˆ
u(t)
e(t)
y(t)
y(t)
–
+
ε(t)
...
...
∑
∑
Figure 7.5
NARX model identification with MLP/RBF neural networks
Neural network modelling
185

If only lagged inputs are used to assign network input nodes, then:
^yðtÞ ¼ ^ydðtÞ:
(7.42)
The implication that if the fitted model behaves well for the OSA and MPO does
not necessarily imply that the model is unbiased. The prediction over a different set
of data often reveals that the model could be significantly biased. One way to
overcome this problem is by splitting the data set into two sets, an estimation set
and a test set (prediction set).
7.4.3
Estimation set and test set
Normally, the data set is divided into two halves. The first half is used to train the
neural network and the output computed. The neural network usually tracks
the system output well and converges to a suitable error minimum. New inputs are
presented to the trained neural network and the predicted output is observed. If
the fitted model is correct, i.e., correct assignment of lagged u’s and y’s, then the
network will predict well for the prediction set. In this case the model will have
captured the underlying dynamics of the system. If both the OSA and the MPO of a
fitted model are good over the estimation and prediction data sets, then most likely
the model is unbiased.
7.4.4
Correlation tests
A more convincing method of model validation is to use correlation tests. If a
model of a system is adequate, then the residuals or prediction errors eðtÞ should be
unpredictable from all linear and non-linear combinations of past inputs and out-
puts. The derivation of simple tests, which can detect these conditions, is complex,
but it can be shown that the following conditions should hold (Billings and
Voon, 1986):
feeðtÞ ¼ E eðt  tÞeðtÞ
½
 ¼ dðtÞ
fueðtÞ ¼ E uðt  tÞeðtÞ
½
 ¼ 0
8t
fu2eðtÞ ¼ E ðu2ðt  tÞ  u2ðtÞÞeðtÞ ¼ 0
8t

fu2e2ðtÞ ¼ E ðu2ðt  tÞ  u2ðtÞÞe2ðtÞ ¼ 0
8t

feðeuÞðtÞ ¼ E eðtÞeðt  1  tÞuðt  1  tÞ
½
 ¼ 0
t  0
(7.43)
where fueðtÞ indicates the cross-correlation function between uðtÞ and eðtÞ,
euðtÞ ¼ eðt þ 1Þuðt þ 1Þ, dðtÞ ¼ an impulse function.
Ideally the model validity tests should detect all the deficiencies in network
performance including bias due to internal noise. The cause of the bias will
however be different for different assignments of network input nodes. Conse-
quently the full five tests defined by (7.43) should be satisfied if u(.)’s and
y(.)’s are used as network input nodes. In practice normalised correlations are
186
Flexible robot manipulators: modelling, simulation and control

computed. The sampled correlation function between two sequences y1ðtÞ and
y2ðtÞ is given by:
^fy1y2ðtÞ ¼
P
Nt
t¼1
y1ðtÞy2ðt þ tÞ
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
P
N
t¼1
y12ðtÞ P
N
t¼1
y22ðtÞ
s
:
(7.44)
Normalisation ensures that all the correlation functions lie in the range
1  ^fy1y2ðtÞ  1 irrespective of the signal strengths. The correlations will never
be exactly zero for all lags and the 95% confidence bands defined as 1:96=
ﬃﬃﬃﬃ
N
p
are
used to indicate if the estimated correlations are significant or not, where N is
the data length. Therefore, if the correlation functions are within the confidence
intervals the model is regarded as adequate.
7.5
Data pre-processing
In principle, neural networks can be used to map the raw input data directly onto
the target values as they can perform essentially arbitrary non-linear functional
mappings between sets of variables. However, in practice, this approach generally
leads to poor results due to various reasons (Bishop, 1995). Thus, for most of the
applications, it is necessary first to transform the data into some new representation
before training a neural network. Moreover, in many practical applications the
choice of pre-processing also plays an important role in determining the perfor-
mance of the system. Data pre-processing does not increase the information content
of the input data; on the contrary, it reduces the information in most of the cases.
However, it is nearly always advantageous to apply pre-processing transformations
to the input data before it is presented to the network. It is required to reduce the
difference of magnitude of input variables used to train the network. This leads to
faster convergence. One of the widely used form of pre-processing is linear
rescaling of the input variables. Naturally, input variables presented to the network
might have values, which differ by several orders of magnitude. Linear transfor-
mation is applied to arrange for all of the inputs to have similar values. This is
usually done by treating each of the input variables independently and calculating
the mean xi and variance s2
i for each variable with respect to the training set
(Bishop, 1995).
xi ¼ 1
N
X
N
n¼1
xn
i
(7.45)
s2
i ¼
1
N  1
X
N
n¼1
ðxn
i  xiÞ2;
(7.46)
Neural network modelling
187

where n ¼ 1; . . .; N labels the patterns. Thus, a set of re-scaled variables is
defined by:
~xn
i ¼ xn
i  xi
si
(7.47)
The transformed variables given by the ~xn
i have zero mean and unit standard
deviation over the transformed training set. Normally, similar linear rescaling is
applied to the target values as well.
7.6
Case studies
The case studies involve the modelling of a single link flexible manipulator using
MLP and RBF neural networks. Two types of modelling techniques, namely, OSA
prediction and MPO, were considered in this investigation. In each case the pre-
dicted vibration modes of the system were recorded. Model validation tests,
including training and test validation and correlation tests were carried out to
validate the models. The composite PRBS input torques are utilised as an input to
the system. However, to investigate variations in the detected vibration modes,
further modelling with neural networks was carried out with uniformly distributed
white noise input. The motivation of utilising noise signal also arises from the fact
that the four point composite PRBS may not be sufficient enough to capture the
nonlinearities if it is present in the system beyond that limit.
7.6.1
Case study 7.1: MLP-NN modelling using composite
PRBS input
7.6.1.1
OSA prediction of hub angle
Figure 7.6 shows the OSA prediction of hub angle of the flexible manipulator,
and Figure 7.7 shows the corresponding modelling error and NN convergence. In
this process a three-layered MLP-NN with five neurons in the hidden layer and
nu ¼ ny ¼ 8 was used. The data set, comprising 1,500 data points, was divided
into two sets: one consisting of 1,000 data points and another consisting of
500 data points. The first set was used to train the network, and the model was
validated with the whole 1,500 points including the 500 points that had not been
used in the training process. The model reached the sum-squared error level of
0.0022 with 25 training passes. As noted the error between the actual and the
predicted output of the model is very insignificant. The first three dominant
modes of vibration of the manipulator found from the spectral density of the
predicted output of the model are at 11.112, 34.26 and 63.89 Hz, respectively.
Figure 7.8 shows results of correlation tests performed on the predicted data set.
It is noted that results of all the tests are within 95% confidence interval indi-
cating highly accurate performance of the model in approximating the hub-angle
of the manipulator.
188
Flexible robot manipulators: modelling, simulation and control

7.6.1.2
OSA prediction of end-point acceleration
The best results for one-step ahead prediction of the end-point acceleration of the
manipulator were achieved with the model constructed with five neurons in the
input layer and 15 in the hidden layer. The model reached the sum-squared error
Actual output
Predicted output 
0
1
2
3
4
5
6
7
–0.05
–0.04
–0.03
–0.02
–0.01
0
0.01
0.02
0.03
0.04
0.05
Time (s)
Normalised magnitude (hub−angle)
(a)
(b)
0
10
20
30
40
50
60
70
80
90
10−6
10−5
10−4
10−3
10−2
Frequency (Hz)
Normalised magnitude (hub−angle)
Figure 7.6
OSA prediction of hub angle with MLP-NN: (a) time-domain
and (b) spectral density
Neural network modelling
189

0
1
2
3
4
5
6
7
−5
−4
−3
−2
−1
0
1
2
3
4
5
×10−3
Time (s)
Error
0
5
10
15
20
25
10–3
10–2
10–1
100
101
102
103
104
Number of training passes
Sum-squared error
(b)
(a)
Figure 7.7
Model error and NN convergence with MLP-NN OSA
prediction of hub angle: (a) error between the actual and
the predicted output and (b) sum-squared error vs number
of training passes
190
Flexible robot manipulators: modelling, simulation and control

−1,500 −1,000
−500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000
−500
0
500
1,000
1,500
lag
−1,500 −1,000
−500
0
500
1,000
1,500
lag
−1,500 −1,000
−500
0
500
1,000
1,500
lag
−1,500 −1,000
−500
0
500
1,000
1,500
lag
(a)
(e)
(c)
(d)
(b)
Figure 7.8
Correlation tests of OSA prediction of hub-angle with MLP-NN:
(a) auto-correlation of residuals, (b) cross-correlation of input
and residuals, (c) cross-correlation of input square and residuals,
(d) cross-correlation of input square and residuals square and
(e) cross-correlation of residuals and (input  residuals)
Neural network modelling
191

level of 0.028 with 5,000 training passes. For testing purpose the data set was
divided into two sets consisting of 750 points each. The first set was used to train
the network and the second set was used for testing. Figures 7.9 and 7.10 show
the results of the testing. It is noted that the point to point error is quite insig-
nificant, indicating good approximation of the test-data set. The first three
vibration modes were predicted by the model as 11.112, 35.185 and 64.82 Hz,
respectively. Figure 7.11 shows the correlation tests of this configuration. It is
noted that all the test results are within the 95% confidence interval, except the
first one which is slightly beyond the 95% confidence interval, indicating room
for further improvement.
7.6.1.3
MPO of end-point acceleration
Model predicted end-point acceleration output and corresponding model error
and NN convergence of the MLP network consisting of five neurons in the input
layer and 15 neurons in the hidden layer are shown in Figures 7.12 and 7.13. The
model was trained using the first 750 data points and tested with all the 1,500 data
points including the data points used for training purpose. The model reached a
sum-squared error level of 0.0135 with 1,000 training passes. The results of all
the correlation tests as shown in Figure 7.14 are more or less within the 95%
confidence interval indicating acceptable performance of the model. The model
predicted the first three modes of vibration as 12.96, 34.26 and 63.89 Hz,
respectively.
7.6.2
Case study 7.2: RBF-NN modelling using composite
PRBS input
7.6.2.1
OSA prediction of hub angle
Figures 7.15 and 7.16 show the results of OSA prediction of hub angle of the
manipulator using five radial basis function terms with a spread constant of unity
and lag of 8. The model was trained with a set of data comprising 750 points and
was tested with the data set containing all the 1,500 data points including the data
points that was used in the training. An excellent characterisation of the system was
achieved as noted in the point to point error curve shown in Figure 7.16(a). The
sum-squared error goal was set to 0.0022 and the network was able to achieve that
with only four training passes. The first three modes of vibration as predicted by the
model are at 11.112, 34.26 and 63.89 Hz, respectively. The correlation tests as
described in Figure 7.17 also show that the model has performed very well in
approximating the hub-angle of the manipulator, as all the functions are within the
95% confidence interval.
7.6.2.2
OSA prediction of end-point acceleration
To identify the manipulator in terms of end-point acceleration, a model was
designed with 500 RBF terms and a spread constant of unity and nu ¼ ny ¼ 6. The
model was validated by training the network with the first 750 data points and
testing it with the remaining 750 data points. The model reached the sum-squared
192
Flexible robot manipulators: modelling, simulation and control

error level of 0.0024 with 499 training passes. Figures 7.18 and 7.19 show results of
this test. The results of all the correlation tests, as shown in Figure 7.20, were
within 95% confidence interval. The model predicted the first three vibration
modes as 12.96, 35.185 and 64.82 Hz, respectively.
Actual output
Predicted output 
0
0.5
1
1.5
2
2.5
3
3.5
−0.1
−0.05
0
0.05
0.1
Time (s)
Normalised magnitude (end-point acceleration)
(a)
0
10
20
30
40
50
60
70
80
90
10−4
10−3
10−2
10−1
100
Frequency (Hz)
Normalised magnitude (end-point acceleration)
(b)
Figure 7.9
OSA prediction of end-point acceleration with MLP-NN:
(a) time-domain and (b) spectral density
Neural network modelling
193

0
0.5
1
1.5
2
2.5
3
3.5
−0.1
−0.05
0
0.05
0.1
Time (s)
Error
(a)
0
500
1,000 1,500 2,000 2,500 3,000 3,500 4,000 4,500 5,000
10−2
10−1
100
101
102
103
104
Number of training passes
Sum-squared error
(b)
Figure 7.10
Model error and NN convergence with MLP-NN OSA prediction
of end-point acceleration: (a) error between the actual and the
predicted output and (b) sum-squared error vs number of
training passes
194
Flexible robot manipulators: modelling, simulation and control

−600 −400 −200
0
200
400
600
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−600 −400 −200
0
200
400
600
lag
−600 −400 −200
0
200
400
600
lag
−600 −400 −200
0
200
400
600
lag
−600 −400 −200
0
200
400
600
lag
(e)
(d)
(c)
(b)
(a)
Figure 7.11
Correlation tests of OSA prediction of end-point acceleration with
MLP-NN: (a) auto-correlation of residuals, (b) cross-correlation
of input and residuals, (c) cross-correlation of input square and
residuals, (d) cross-correlation of input square and residuals square
and (e) cross-correlation of residuals and (input  residuals)
Neural network modelling
195

Actual output
Predicted output 
0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Normalised magnitude (end-point acceleration)
(a)
0
10
20
30
40
50
60
70
80
90
10−4
10−3
10−2
10−1
100
Frequency (Hz)
Normalised magnitude (end-point acceleration)
(b)
Figure 7.12
MPO of end-point acceleration with MLP-NN: (a) time-domain
and (b) spectral density
196
Flexible robot manipulators: modelling, simulation and control

0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Error
(a)
0
100
200
300
400
500
600
700
800
900
1,000
10−2
10−1
100
101
102
103
104
Number of training passes
Sum-squared error
(b)
Figure 7.13
Model error and NN convergence with MLP-NN MPO of
end-point acceleration: (a) error between the actual and the
predicted output and (b) sum-squared error vs number of
training passes
Neural network modelling
197

7.6.2.3
MPO of end-point acceleration
Figures 7.21 and 7.22 show results MPO of end-point acceleration and model error
and NN convergence. The NN was constructed with 100 RBF terms, nu ¼ ny ¼ 6
and spread constant equal to unity. In this case a data set consisting of 1,500 data
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
(a)
(b)
(c)
(e)
(d)
Figure 7.14
Correlation tests of MPO of end-point acceleration with MLP-NN:
(a) auto-correlation of residuals, (b) cross-correlation of input
and residuals, (c) cross-correlation of input square and residuals,
(d) cross-correlation of input square and residuals square and
(e) cross-correlation of residuals and (input  residuals)
198
Flexible robot manipulators: modelling, simulation and control

points including the data points used for training was used to test the model.
The model reached a sum-squared error level of 0.0255 with 99 training passes.
The model predicted the first three vibration modes at 12.96, 36.11 and 63.89 Hz,
respectively.
Actual output
Predicted output 
0
1
2
3
4
5
6
7
−0.05
−0.04
−0.03
−0.02
−0.01
0
0.01
0.02
0.03
0.04
0.05
Time (s)
Normalised magnitude (hub−angle)
(a)
0
10
20
30
40
50
60
70
80
90
10−6
10−5
10−4
10−3
10−2
Frequency (Hz)
Normalised magnitude (hub−angle)
(b)
Figure 7.15
OSA prediction of hub angle with RBF-NN: (a) time-domain
and (b) spectral density
Neural network modelling
199

0
1
2
3
4
5
6
7
−5
−4
−3
−2
−1
0
1
2
3
4
5
×10−3
Time (s)
Error
0
0.5
1
1.5
2
2.5
3
3.5
4
10−3
10−2
10−1
100
Number of training passes
Sum-squared error
(a)
(b)
Figure 7.16
Model error and NN convergence with RBF-NN OSA
prediction of hub angle: (a) error between the actual and
the predicted output and (b) sum-squared error vs number
of training passes
200
Flexible robot manipulators: modelling, simulation and control

(c)
−1,500 −1,000 −500
0
500
1,000 1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000 1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000 1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000 1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000 1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
(d)
(a)
(b)
(e)
Figure 7.17
Correlation tests of OSA prediction of hub-angle with RBF-NN:
(a) auto-correlation of residuals, (b) cross-correlation of input
and residuals, (c) cross-correlation of input square and residuals,
(d) cross-correlation of input square and residuals square and
(e) cross-correlation of residuals and (input  residuals)
Neural network modelling
201

7.6.3
Case study 7.3: MLP-NN modelling using white noise input
7.6.3.1
OSA prediction of hub angle
Figures 7.23 and 7.24 show the OSA prediction of hub angle of the flexible
manipulator and model error and NN convergence using a three-layered MLP-NN
with five neurons in the hidden layer and nu ¼ ny ¼ 8. The data set, comprising 1,500
Actual output
Predicted output 
0
0.5
1
1.5
2
2.5
3
3.5
−0.1
−0.05
0
0.05
0.1
Time (s)
Normalised magnitude (end-point acceleration)
(a)
0
10
20
30
40
50
60
70
80
90
10−4
10−3
10−2
10−1
100
Frequency (Hz)
Normalised magnitude (end-point acceleration)
(b)
Figure 7.18
OSA prediction of end-point acceleration with RBF-NN:
(a) time-domain and (b) spectral density
202
Flexible robot manipulators: modelling, simulation and control

data points, was divided into two sets having 750 data points each. The first set was
used to train the network and the model was tested with the whole 1,500 points
including the 750 points that were not used in the training process. The model
reached a sum-squared error level of 0.0025 with 100 training passes. The first
0
0.5
1
1.5
2
2.5
3
3.5
−0.1
−0.05
0
0.05
0.1
Time (s)
Error
0
50
100
150
200
250
300
350
400
450
10−3
10−2
10−1
100
Number of training passes
Sum-squared error
(a)
(b)
Figure 7.19
Model error and NN convergence with RBF-NN OSA prediction
of end-point acceleration: (a) error between the actual and the
predicted output and (b) sum-squared error vs number of
training passes
Neural network modelling
203

−600 −400 −200
0
200 400
600
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−600 −400 −200
0
200 400
600
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−600 −400 −200
0
200 400
600
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−600 −400 −200
0
200 400
600
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−600 −400 −200
0
200
400
600
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
(e)
(d)
(c)
(a)
(b)
Figure 7.20
Correlation tests of OSA prediction end-point acceleration with
RBF-NN: (a) auto-correlation of residuals, (b) cross-correlation of
input and residuals, (c) cross-correlation of input square and
residuals, (d) cross-correlation of input square and residuals square
and (e) cross-correlation of residuals and (input  residuals)
204
Flexible robot manipulators: modelling, simulation and control

three dominant vibration modes of the system were as 11.112, 34.26 and 62 Hz,
respectively. Figure 7.25 shows results of the correlation tests performed on the
predicted data set. It is noted that all the tests are more or less within 95% con-
fidence interval indicating acceptable performance of the model in approximating
the hub-angle of the manipulator.
Actual output
Predicted output 
0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Normalised magnitude (end-point acceleration)
(a)
0
10
20
30
40
50
60
70
80
90
10−4
10−3
10−2
10−1
100
Frequency (Hz)
Normalised magnitude (end-point acceleration)
(b)
Figure 7.21
MPO of end-point acceleration with RBF-NN: (a) time-domain
and (b) spectral density
Neural network modelling
205

7.6.3.2
OSA prediction of end-point acceleration
A neuro model constructed with five neurons in the input layer and 15 in the
hidden layer proved to be the best for the OSA prediction of the end-point
acceleration of the manipulator. The model reached a sum-squared error level of
0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Error
0
10
20
30
40
50
60
70
80
90
10−2
10−1
100
Number of training passes
Sum-squared error
(b)
(a)
Figure 7.22
Model error and NN convergence with RBF-NN MPO of
end-point acceleration: (a) error between the actual and the
predicted output and (b) sum-squared error vs number of
training passes
206
Flexible robot manipulators: modelling, simulation and control

0.0135 with 500 training passes. For testing purpose, the data set was divided into
two sets, consisting of 750 points each. The first set was used to train the network
and the whole data set comprising 1,500 points was used to test the model.
Figures 7.26 and 7.27 show performance of the model. The first three vibration
Actual output
Predicted output 
0
1
2
3
4
5
6
7
−0.05
−0.04
−0.03
−0.02
−0.01
0
0.01
0.02
0.03
0.04
0.05
Time (s)
Normalised magnitude (hub−angle)
(a)
0
10
20
30
40
50
60
70
80
90
10−6
10−5
10−4
10−3
10−2
10−1
Frequency (Hz)
Normalised magnitude (hub−angle)
(b)
Figure 7.23
OSA prediction of hub angle with MLP-NN: (a) time-domain
and (b) spectral density
Neural network modelling
207

modes as predicted by the model were at 11.112, 35. 185 and 64.815 Hz,
respectively. Figure 7.28 shows the correlation tests of this configuration. It is
noted that all the test results are within the 95% confidence interval indicating
good performance of the model.
0
1
2
3
4
5
6
7
−0.05
−0.04
−0.03
−0.02
−0.01
0
0.01
0.02
0.03
0.04
0.05
Time (s)
Error
0
10
20
30
40
50
60
70
80
90
100
10−3
10−2
10−1
100
101
102
103
104
Number of training passes
Sum-squared error
(b)
(a)
Figure 7.24
Model error and NN convergence with MLP-NN OSA prediction
of hub angle: (a) error between the actual and the predicted
output and (b) sum-squared error vs number of training passes
208
Flexible robot manipulators: modelling, simulation and control

−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
(a)
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
(b)
(c)
(d)
(e)
Figure 7.25
Correlation tests of OSA prediction of hub-angle with MLP-NN:
(a) auto-correlation of residuals, (b) cross-correlation of input
and residuals, (c) cross-correlation of input square and residuals,
(d) cross-correlation of input square and residuals square and
(e) cross-correlation of residuals and (input  residuals)
Neural network modelling
209

7.6.3.3
MPO of end-point acceleration
Figures 7.29 and 7.30 show the MPO results for the end-point acceleration. The
model was trained using the first 750 data points and tested with 1,500 data points
including the data points used for training purpose. The model reached a sum-
squared error level of 0.0097 with 5,000 training passes. The model predicted
end-point acceleration output with an MLP network, consisting of five neurons in
Actual output
Predicted output 
0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Normalised magnitude (end-point acceleration)
(a)
0
10
20
30
40
50
60
70
80
90
10−4
10−3
10−2
10−1
100
Frequency (Hz)
Normalised magnitude (end-point acceleration)
(b)
Figure 7.26
OSA prediction of end-point acceleration with MLP-NN:
(a) time-domain and (b) spectral density
210
Flexible robot manipulators: modelling, simulation and control

the input layer and 15 neurons in the hidden layer. The results of all the correlation
tests as shown in Figure 7.31 are more or less within the 95% confidence interval
indicating acceptable performance of the model. The model predicted the first three
vibration modes as 11.112, 35.185 and 64.815 Hz, respectively.
0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Error
(a)
0
50
100
150
200
250
300
350
400
450
500
10−2
10−1
100
101
102
103
104
Number of training passes
Sum-squared error
(b)
Figure 7.27
Model error and NN convergence with MLP-NN OSA prediction
of end-point acceleration: (a) error between the actual and the
predicted output and (b) sum-squared error vs number of
training passes
Neural network modelling
211

−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0
0.2
0.4
0.6
0.8
1
lag
(a)
(b)
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0.2
0.4
0.6
0.8
1
lag
(d)
(c)
(e)
Figure 7.28
Correlation tests of OSA prediction of end-point acceleration
with MLP-NN: (a) auto-correlation of residuals, (b) cross-
correlation of input and residuals, (c) cross-correlation of
input square and residuals, (d) cross-correlation of input square
and residuals square and (e) cross-correlation of residuals and
(input  residuals)
212
Flexible robot manipulators: modelling, simulation and control

Actual output
Predicted output
0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Normalised magnitude (end-point acceleration)
(a)
0
10
20
30
40
50
60
70
80
90
10–4
10–3
10–2
10–1
100
Frequency (Hz)
Normalised magnitude (end-point acceleration)
(b)
Figure 7.29
MPO of end-point acceleration with MLP-NN: (a) time-domain
and (b) spectral density
Neural network modelling
213

0
1
2
3
4
5
6
7
−0.2
−0.15
−0.1
−0.05
0
0.05
0.1
0.15
0.2
Time (s)
Error
0
500
1,000 1,500 2,000 2,500 3,000 3,500 4,000 4,500 5,000
10−3
10−2
10−1
100
101
102
103
104
Number of training passes
Sum-squared error
(b)
(a)
Figure 7.30
Model error and NN convergence with MLP-NN MPO of
end-point acceleration: (a) error between the actual and the
predicted output and (b) sum-squared error vs number of
training passes
214
Flexible robot manipulators: modelling, simulation and control

−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0.2
0.4
0.6
0.8
1
lag
0
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0.2
0.4
0.6
0.8
1
lag
(d)
(c)
(b)
(a)
(e)
Figure 7.31
Correlation tests of MPO of end-point acceleration with MLP-NN:
(a) auto-correlation of residuals, (b) cross-correlation of input
and residuals, (c) cross-correlation of input square and residuals,
(d) cross-correlation of input square and residuals square and
(e) cross-correlation of residuals and (input  residuals)
Neural network modelling
215

7.6.4
Case study 7.4: RBF-NN modelling using white noise input
7.6.4.1
OSA prediction of hub angle
Figures 7.32 and 7.33 show the results of OSA prediction of hub-angle of the
manipulator using five RBF terms with a spread constant of unity and lag of 8. The
model was trained with a set of data comprising 750 points and tested with the data
Actual output
Predicted output 
0
1
2
3
4
5
6
7
−0.05
−0.04
−0.03
−0.02
−0.01
0
0.01
0.02
0.03
0.04
0.05
Time (s)
Normalised magnitude (hub−angle)
(a)
0
10
20
30
40
50
60
70
80
90
10−6
10−5
10−4
10−3
10−2
10−1
Frequency (Hz)
Normalised magnitude (hub−angle)
(b)
Figure 7.32
OSA prediction of hub angle with RBF-NN: (a) time-domain
and (b) spectral density
216
Flexible robot manipulators: modelling, simulation and control

set containing all the 1,500 data points including the data points that were used for
training purpose. The network has depicted the system output very well, as noted in
the point to point error curve shown in Figure 7.33(a). The model reached a sum-
squared error level of 0.0034 within only four training passes. The first three
0
1
2
3
4
5
6
7
−0.05
−0.04
−0.03
−0.02
−0.01
0
0.01
0.02
0.03
0.04
0.05
Time (s)
Error
0
0.5
1
1.5
2
2.5
3
3.5
4
10−3
10−2
10−1
Number of training passes
Sum-squared error
(b)
(a)
Figure 7.33
Model error and NN convergence with RBF-NN OSA prediction
of hub angle: (a) error between the actual and the predicted
output and (b) sum-squared error vs number of training passes
Neural network modelling
217

vibration modes as predicted by the model are at 11.112, 34.26 and 64.815 Hz,
respectively. The correlation tests, as described in Figure 7.34, also show that the
model has performed very well in approximating the hub-angle of the manipulator
as all the functions are within 95% confidence interval.
7.6.4.2
OSA prediction of end-point acceleration
An NN designed with 250 RBF terms, spread constant of unity and nu ¼ ny ¼ 6, has
proved to be the best in approximating the OSA prediction of end-point acceleration.
The model was validated by training the network with the first 750 data points and
testing it with all the 1,500 data points including the remaining 750 data points that
were not used for training purpose. The model reached a sum-squared error level of
0.0115 with 249 training passes. Figures 7.35 and 7.36 show results of this test. The
results of all the correlation tests, as shown in Figure 7.37, are within 95% con-
fidence interval indicating adequate performance of the model. The model predicted
the first three vibration modes of the system as 11.112, 35.185 and 64.815 Hz,
respectively.
7.6.4.3
MPO of end-point acceleration
Figures 7.38 and 7.39 show results of the MPO prediction of end-point acceleration
with an NN constructed of 250 RBF terms, nu ¼ ny ¼ 6 and spread constant of
unity. In this case a data set consisting of 1,500 data points including the data points
used for training was used for testing the model. The model reached a sum-squared
error level of 0.0115 with 249 training passes. The model predicted the first
three vibration modes of the system as 12, 35.185 and 64.815 Hz, respectively.
The results of all the correlation tests, as shown in Figure 7.40, are within 95%
confidence interval indicating adequate performance of the model.
7.6.5
Comparative assessment
Performance of NN-based modelling of the manipulator in various domains is
summarised in Tables 7.1 and 7.2. It is noted that all the techniques have been
able to detect the vibration modes of the system successfully with some minor or
no error except very few cases. Comparing the results it is also noted that RBF
was faster as compared to MLP networks. For example, modelling in terms of
the hub-angle of the manipulator with composite PRBS input using OSA pre-
diction method MLP reached an error goal of 0.0022 with 25 training passes but
RBF took only four training passes to reach that level of sum-squared error.
Similarly, in the case of MPO-based end-point acceleration model with com-
posite PRBS input MLP reached a sum-squared error goal level of 0.028 with
5,000 training passes, in contrast RBF reached a sum-squared error goal level of
0.0024 with 499 training passes. The higher speed of RBF as compared to MLP
is evidenced in all other cases as well. Comparing the results between OSA
prediction and MPO it reveals that the OSA prediction performed well in
approximating the system responses. This agrees with the theory as OSA pre-
diction uses actual data for prediction whereas MPO uses the predicted value for
218
Flexible robot manipulators: modelling, simulation and control

−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0.2
0.4
0.6
0.8
1
lag
0
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0.2
0.4
0.6
0.8
1
lag
(a)
(b)
(c)
(d)
(e)
Figure 7.34
Correlation tests of OSA prediction of hub-angle with RBF-NN:
(a) auto-correlation of residuals, (b) cross-correlation of input
and residuals, (c) cross-correlation of input square and residuals,
(d) cross-correlation of input square and residuals square and
(e) cross-correlation of residuals and (input  residuals)
Neural network modelling
219

Actual output
Predicted output 
0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Normalised magnitude (end-point acceleration)
(a)
0
10
20
30
40
50
60
70
80
90
10−4
10−3
10−2
10−1
100
Frequency (Hz)
Normalised magnitude (end-point acceleration)
(b)
Figure 7.35
OSA prediction of end-point acceleration with RBF-NN:
(a) time-domain and (b) spectral density
220
Flexible robot manipulators: modelling, simulation and control

0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Error
0
50
100
150
200
10−2
10−1
100
Number of training passes
Sum-squared error
(b)
(a)
Figure 7.36
Model error and NN convergence with RBF-NN OSA prediction
of end-point acceleration: (a) error between the actual and the
predicted output and (b) sum-squared error vs number of
training passes
Neural network modelling
221

−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
(a)
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
(d)
(c)
(e)
(b)
Figure 7.37
Correlation tests of OSA prediction of end-point acceleration
with RBF-NN: (a) auto-correlation of residuals, (b) cross-
correlation of input and residuals, (c) cross-correlation of
input square and residuals, (d) cross-correlation of input
square and residuals square and (e) cross-correlation of
residuals and (input  residuals)
222
Flexible robot manipulators: modelling, simulation and control

Actual output
Predicted output 
0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Normalised magnitude (end-point acceleration)
(a)
0
10
20
30
40
50
60
70
80
90
10−4
10−3
10−2
10−1
100
Frequency (Hz)
Normalised magnitude (end-point acceleration)
(b)
Figure 7.38
MPO of end-point acceleration with RBF-NN: (a) time-domain
and (b) spectral density
Neural network modelling
223

0
1
2
3
4
5
6
7
−0.1
−0.05
0
0.05
0.1
Time (s)
Error
(a)
0
50
100
150
200
10−2
10−1
100
Number of training passes
Sum-squared error
(b)
Figure 7.39
Model error and NN convergence with RBF-NN MPO of
end-point acceleration: (a) error between the actual and the
predicted output and (b) sum-squared error vs number of
training passes
224
Flexible robot manipulators: modelling, simulation and control

−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000 1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000 1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
−1,500 −1,000 −500
0
500
1,000
1,500
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
lag
(d)
(c)
(e)
(b)
(a)
Figure 7.40
Correlation tests of MPO of end-point acceleration with RBF-NN:
(a) auto-correlation of residuals, (b) cross-correlation of input
and residuals, (c) cross-correlation of input square and residuals,
(d) cross-correlation of input square and residuals square and
(e) cross-correlation of residuals and (input  residuals)
Neural network modelling
225

Table 7.2
Performance of NN-based modelling in detecting modes
Modelling
inputs
Modelling domains
First mode
error (%)
Second mode
error (%)
Third mod
error (%)
C-PRBS
input
MLP-NN-based hub-angle
model (OSAP)
0
0
0
MLP-NN-based end-point
acc. model (OSAP)
0
2.56
1.45
MLP-NN-based end-point
acc. model (MPO)
16.63
5.12
0
RBF-NN-based hub-angle
model (OSAP)
0
0
0
RBF-NN-based end-point
acc. model (OSAP)
16.63
2.56
1.45
RBF-NN-based end-point
acc. model (MPO)
16.63
0
1.45
White noise
input
MLP-NN-based hub-angle
model (OSAP)
0
0.68
4
MLP-NN-based end-point
acc. model (OSAP)
0
2.56
3.70
MLP-NN-based end-point
acc. model (MPO)
0
2.56
3.70
RBF-NN-based hub-angle
model (OSAP)
0
0.68
0.36
RBF-NN-based end-point
acc. model (OSAP)
0
2.56
3.70
RBF-NN-based end-point
acc. model (MPO)
0
2.56
3.70
Table 7.1
Performance of NN-based modelling
Modelling
inputs
Modelling domains
Number
of epochs
Sum-squared
error
C-PRBS
input
MLP-NN-based hub-angle model (OSAP)
25
0.0022
MLP-NN-based end-point acc. model (OSAP)
5,000
0.028
MLP-NN-based end-point acc. model (MPO)
1,000
0.0135
RBF-NN-based hub-angle model (OSAP)
4
0.0023
RBF-NN-based end-point acc. model (OSAP)
499
0.0024
RBF-NN-based end-point acc. model (MPO)
99
0.0255
White noise
input
MLP-NN-based hub-angle model (OSAP)
100
0.0025
MLP-NN-based end-point acc. model (OSAP)
500
0.0135
MLP-NN-based end-point acc. model (MPO)
5,000
0.0097
RBF-NN-based hub-angle model (OSAP)
4
0.0034
RBF-NN-based end-point acc. model (OSAP)
249
0.0115
RBF-NN-based end-point acc. model (MPO)
249
0.0115
226
Flexible robot manipulators: modelling, simulation and control

the same purpose. However, MPO possesses more reliability as compared to
OSA prediction and in this investigation the results of MPO are good enough to
be relied upon.
Results of various modelling techniques have been validated through
various tests including input/output mapping, training and test validation and
correlation tests. It is noted that all the modelling techniques have performed
quite well in approximating the system response. The vibration modes of the
system
have
been
detected
successfully
with
the
modelling
techniques
considered.
7.7
Summary
Approaches for modelling of the flexible manipulator with neural networks have
been presented. Multi-layered perceptron and radial basis function neural networks
have been described in detail in the context of modelling of dynamic systems. One-
step ahead prediction and model predicted output types of input data structures
have been considered in a set of case study exercises to model the single-link
flexible manipulator from input torque to hub angle and end-point acceleration
using composite PRBS and white noise excitation signals. The results in the case
studies have shown that faster convergence is achieved with RBF modelling than
MLP modelling.
Neural network modelling
227

This page intentionally left blank 

Chapter 8
Open-loop control using command
generation techniques
This chapter presents open-loop command-generation techniques for control of
flexible manipulators based on filtered input, Gaussian-shaped input and input
shaping. The assumption is that the motion itself is the main source of system
vibration. Thus, torque profiles, which do not contain energy at system natural
frequencies do not excite structural vibration and hence incur no additional settling
time. Accordingly, shaped torque inputs, including Gaussian-shaped, low-pass and
bandstop filtered torque input functions and input shaping profiles, are developed on
the basis of identified resonance mode frequencies of the system using parametric and
non-parametric modelling methods. Case study exercises assessing performances of
these control strategies are presented and discussed. Performances of the techniques
are assessed in terms of level of vibration reduction at the natural frequencies, time
response specifications and robustness to natural frequency variation and effects of
various loading conditions.
8.1
Introduction
The control strategies for flexible manipulator systems can be classified as open-loop
(feedforward) and closed-loop (feedback) control schemes. Open-loop techniques
for vibration suppression involve developing the control input through consideration
of the physical and vibration properties of the system, so that system vibrations at
dominant response modes are reduced. This method does not require additional
sensors or actuators and does not account for changes in the system once the input is
developed. On the other hand, feedback-control techniques use measurement and
estimations of the system states to reduce vibration. Feedback controllers can be
designed to be robust to parameter uncertainty. For flexible manipulators, feedfor-
ward and feedback control techniques are used for vibration suppression and end-
point position control, respectively (Moulin and Bayo, 1991; Wang, 1986). An
acceptable system performance without vibration that accounts for system changes
can be achieved by developing a hybrid controller consisting of both control tech-
niques. Thus, with a properly designed feedforward controller, the complexity of the
required feedback controller can be reduced. Various feedforward control strategies
have been investigated for control of vibration. These include the use of Fourier

expansion as a forcing function (Aspinwall, 1980), the application of computed
torque control (Moulin and Bayo, 1991), utilisation of single and multiple-switch
bang–bang control function (Onsay and Akay, 1991) and construction of input
functions from ramped sinusoids and versine functions (Meckl and Seering, 1990).
This chapter describes open-loop command-shaping techniques for control of a
flexible manipulator. Moreover, the chapter provides a comparative assessment of
the performance of these techniques. The case study exercises presented in this
chapter are all based on the single-link flexible manipulator described in Chapter 2.
For input shaping a four-impulse sequence and sixth-order low-pass and band-stop
filters are considered. Initially, to identify the characteristic parameters of the
system, the flexible manipulator is excited with a single-switch bang–bang torque
input and its vibration behaviour is monitored. Then the filters and input shapers
are designed and used for pre-processing the input, so that no energy is fed into the
system at the natural frequencies. Experiments are performed on a laboratory scale
single-link flexible manipulator and results are presented to verify the performance
of the control strategies. Performances of the techniques are assessed in terms of
level of vibration reduction at the natural frequencies, time response specifications
and robustness to natural frequency variation. These are accomplished by com-
paring the system response with the unshaped bang–bang input. The robustness of
the control schemes is assessed with up to 30% tolerance in vibration frequencies.
As the dynamic behaviour and vibration of flexible manipulators is significantly
affected by payload variations, the performance of the control strategies is also
assessed with a flexible manipulator incorporating a payload. Finally, a compara-
tive assessment of the performances of the control strategies for open-loop control
of a flexible manipulator is presented.
8.2
Identification of natural frequencies
The open-loop control strategies were designed on the basis of identified natural
frequencies and damping ratios of the flexible manipulator system. So, the identi-
fication of natural frequencies is an important factor for efficient design of an
open-loop controller. The natural frequencies are identified using four distinct
approaches. These are:
●
analytical;
●
experimental;
●
genetic modelling; and
●
neural network modelling.
Through the solution of system’s equation, one can find the natural frequencies
of a flexible manipulator system, as described in Chapter 3. There are a number of
experimental procedures, which can be used to find the natural frequencies of
the system (Tokhi and Azad, 1997). In this chapter the natural frequencies of a
flexible manipulator are obtained experimentally by exciting the manipulator with the
unshaped bang–bang torque input in an open-loop configuration. Genetic algorithm
230
Flexible robot manipulators: modelling, simulation and control

(GA) and neural network (NN) based system identification techniques are used to
find the dominant modes of vibration of the system.
8.2.1
Analytical approach
The natural frequencies for a flexible manipulator system can be obtained through
analytical process by solving the system’s dynamic equation of motion. The details
of the process are given in Chapter 3. The analytical values of natural frequencies
wi can be obtained using:
li ¼ bil;
e ¼ Ih
Ml2 ¼ 3Ih
Ib
(8.1)
The parameter e determines the vibration frequencies of the manipulator; a small e
implies lower vibration frequencies. For a very large e the vibration frequencies
correspond to those of a cantilever beam. The effect of a payload mass, on the other
hand, is significant on the vibration frequencies. The natural frequencies for the
first three modes of the single-link manipulator system obtained through this ana-
lytical method are 12.499, 36.36 and 64.56 Hz, respectively.
8.2.2
Experimental approach
The natural frequencies can also be obtained through experimental process. In one
approach the manipulator system can be excited by a random signal, which covers
all the vibration modes of interest. The responses at various points are measured for
further analysis. There are two distinct approaches to analyse the collected data for
natural frequencies. The first approach is based on the measurement of the autop-
ower spectral density of the response of the system. This is referred to as the
spectral density method. The second method is based on the measurements of the
frequency response function (FRF) and coherency function of the system. This is
referred to as the FRF method. To obtain a better accuracy around the resonance,
the manipulator system can be excited by a stepped sine wave from a spectrum
analyser and the response around the natural frequencies obtained.
The autopower spectral density Sxx w
ð Þ of a signal x is defined as:
Sxx w
ð Þ ¼ Sx jw
ð
ÞS
x jw
ð
Þ
(8.2)
where Sxx w
ð Þ is a real-valued function containing the magnitude information only,
Sx jw
ð
Þ is the linear spectrum of x given by the Fourier transform of the time signal
x tð Þ. S
x jw
ð
Þ is the complex conjugate of Sx jw
ð
Þ.
The response of the system can alternatively be described by the frequency
response function. The equations relating the response of a system in random
vibrations to the excitation are given as (Newland, 1996):
Syy w
ð Þ ¼
H jw
ð
Þ
2Sxx w
ð Þ
Sxy jw
ð
Þ ¼ H jw
ð
ÞSxx w
ð Þ
Syy w
ð Þ ¼ H jw
ð
ÞSyx jw
ð
Þ
(8.3)
Open-loop control using command generation techniques
231

where Sxx w
ð Þ and Syy w
ð Þ are the autopower spectral densities of the excitation
signal x and the response signal y, respectively. Sxy jw
ð
Þ and Syx jw
ð
Þ are the cross-
spectral densities between these two signals and H jw
ð
Þ is the FRF of the system.
Let H1 jw
ð
Þ and H2 jw
ð
Þ denote two estimates of the FRF obtained according to the
relations in (8.3) as:
H1 jw
ð
Þ ¼ Sxy jw
ð
Þ
Sxx w
ð Þ
H2 jw
ð
Þ ¼ Syy w
ð Þ
Syx jw
ð
Þ
(8.4)
The error between the two functions is given by the coherency function defined as:
g2 w
ð Þ ¼ H1 jw
ð
Þ
H2 jw
ð
Þ
(8.5)
In this manner, the coherency function gives a measure of the estimation error and
indicates the level of coherence between the input and the output. If g2 is unity at
some frequency w, this means that the output is entirely due to the input at that
frequency. However, a value of g2 less than unity means that either the output is
due to the input as well as other inputs or the output is corrupted with noise.
The time responses of the system were measured at the hub, at the four strain
gauge locations (along with the length of the manipulator) and at the end-point.
These were used to obtain autopower spectral densities of the signals using (8.2)
and the FRFs and coherency functions between the input torque and the responses
using (8.3)–(8.5). The natural frequencies for the first three modes were obtained
by identifying the peaks (maximum amplitudes) in the autopower spectral density
functions and the FRFs. The average values of these natural frequencies obtained
through this process are shown in Table 8.1, along with the corresponding analy-
tical values. The details of the measurement process are given in Chapter 3.
8.2.3
Genetic modelling
In this approach, a GA is used for parametric identification of the flexible manip-
ulator for developing shaped torque on the basis of the detected vibration modes.
The operating mechanism of a GA was described in Chapter 6.
Table 8.1
Comparison of the analytical and experimental values for
first three natural frequencies
Methods
First mode (Hz)
Second mode (Hz)
Third mode (Hz)
Analytical
12.499
36.36
64.56
Spectral density
12.068
35.993
63.33
FRF
12.137
36.132
63.01
232
Flexible robot manipulators: modelling, simulation and control

For parametric identification of the manipulator with GA, randomly selected
parameters are optimised for different, arbitrarily chosen order to fit to the system
by applying the working mechanism of GA. The fitness function utilised is the
sum-squared error between the actual output, yðnÞ, of the system and the predicted
output, ^yðnÞ, produced from the input to the system and the optimised parameters:
f ðeÞ ¼
X
n
i¼1
yðnÞ  ^yðnÞ


2
(8.6)
where n represents the number of input/output samples. With the fitness function
given above, the global search technique of the GA is utilised to obtain the best set
of parameters among all the attempted orders for the system. The output of the
system is thus simulated using the best sets of parameters and the system input.
The manipulator is modelled from the input torque to hub-angle, hub-velocity
and end-point acceleration. These are referred to as the hub-angle model, hub-
velocity model and end-point acceleration model, respectively. In all the three
cases it was attempted to simulate the GA with different initial values and operator
rates. Satisfactory results were achieved with the following set of parameters:
Generation gap
0.9
Crossover rate
0.7
Mutation rate (hub angle model)
0.00313
Mutation rate (hub velocity model)
0.00357
Mutation rate (end-point acceleration model)
0.00417
8.2.4
Neural modelling
Various modelling techniques can be used with neural networks to identify non-
linear dynamic systems. These include state-output model, recurrent state model
and non-linear autoregressive moving average process with exogeneous (NAR-
MAX) input model. However, it is evident from the literature that if the plant’s
input and output data are available, the NARMAX model is a suitable choice, for
modelling systems having nonlinearities, with standard backpropagation and radial
basis function learning algorithms. Mathematically the model is given by (Luo and
Unbehauen, 1997):
^yðtÞ ¼ f

ðyðt  1Þ; yðt  2Þ; . . .; yðt  nyÞ;
uðt  1Þ; uðt  2Þ; . . .; uðt  nuÞ;
eðt  1Þ; eðt  2Þ; . . . ; eðt  neÞ

þ eðtÞ
(8.7)
where ^yðtÞis the output vector determined by the past values of the system input
vector, output vector and noise with maximum lags ny, nu and ne respectively, f ðÞ
is the system mapping constructed through multilayer perceptron (MLP) method or
radial basis function (RBF) neural networks with an appropriate learning algorithm.
The NN modelling structure in block diagram form is shown in Figure 8.1.
Open-loop control using command generation techniques
233

The model is also known as NARMAX equation error model. However, if the
model is good enough to identify the system without incorporating the noise term
or considering the noise as additive at the output, the model can be represented in a
NARX form (Luo and Unbehauen, 1997; Sze, 1995) as:
^yðtÞ ¼ f

ðyðt  1Þ; yðt  2Þ; . . . ; yðt  nyÞ;
uðt  1Þ; uðt  2Þ; . . . ; uðt  nuÞ

þ eðtÞ
(8.8)
8.2.5
Natural frequencies from the genetic and neural modelling
It is highly recommended to determine the dominant modes of vibration of the
system as precisely as possible for achieving the best possible results from the
resonance mode-based open-loop control process. The first three modes of vibra-
tion of the system as detected from modelling the manipulator with GAs and NNs
are presented in Tables 8.2–8.4.
It is noted that out of the 23 cases the first mode appeared at 11.112 Hz in 19
cases, and hence this can be used as the first resonance mode frequency of the
system. The second resonance mode appeared at 35.185 Hz in 10 cases, 34.26 Hz in
six cases and 36.11 Hz in seven cases. However, the average of 34.26 and 36.11 Hz
is also 35.185 Hz. Hence it is very likely that the second mode frequency of the
Flexible
manipulator
MLP/RBF
neural
network
model
z−nu
z−1
z−1
Training
mechanism
Σ
Σ
ε(t)
e(t)
(t)
ˆy
u(t)
–
+
y(t)
z−ny
Figure 8.1
NARX model identification with MLP/RBF neural networks
Table 8.2
Modes detected from GA-based modelling with composite-PRBS input
Modelling domains
First
mode (Hz)
Second
mode (Hz)
Third
mode (Hz)
GA-based hub-angle model
11.112
34.26
63.89
GA-based hub-velocity model
11.112
36.11
63.89
GA-based end-point acceleration model
11.112
36.11
63.89
234
Flexible robot manipulators: modelling, simulation and control

system is 35.185 Hz. The third mode appeared at 64.815 Hz in 11 cases, 63.89 Hz
in 9 cases, 65.74 Hz in two cases and 62 Hz in 1 case. Again, the average of 63.89
and 65.74 Hz is also 64.815 Hz. Thus, the probability of the third resonance mode
frequency of the system to be 64.815 Hz is quite high.
8.3
Gaussian-shaped torque input
A Gaussian-shaped input torque, i.e., the first derivative of the Gaussian distribu-
tion function, is examined in this section. The application of this function in the
form of an acceleration profile, to develop input torque profile through inverse
dynamics of the system, has previously been shown (Bayo, 1988). Here the beha-
viour of the function as an input torque profile for the system is investigated by
adopting a much simpler method of developing an input torque profile for a flexible
manipulator system. Variation of frequency distribution, duty cycle and amplitude
of the Gaussian-shaped torque input with various parameters are studied. This
enables the generation of an appropriate input trajectory to move the flexible
Table 8.3
Modes detected from NN-based modelling with composite-PRBS input
Modelling domains
First
mode (Hz)
Second
mode (Hz)
Third
mode (Hz)
MLP-NN-based hub-angle model (OSAP)
11.112
34.26
63.89
MLP-NN-based hub-velocity model (OSAP)
11.112
36.11
63.89
MLP-NN-based hub-velocity model (MPO)
11.112
36.11
65.74
MLP-NN-based end-point acc. model (OSAP)
11.112
35.185
64.815
MLP-NN-based end-point acc. model (MPO)
12.96
34.26
63.89
RBF-NN-based hub-angle model (OSAP)
11.112
34.26
63.89
RBF-NN-based hub-velocity model (OSAP)
11.112
36.11
63.89
RBF-NN-based hub-velocity model (MPO)
–
36.11
65.74
RBF-NN-based end-point acceleration model (OSAP) 12.96
35.185
64.815
RBF-NN-based end-point acceleration model (MPO) 12.96
36.11
63.89
Table 8.4
Modes detected from NN-based modelling with white noise input
Modelling domains
First
mode (Hz)
Second
mode (Hz)
Third
mode (Hz)
MLP-NN-based hub-angle model (OSAP)
11.112
34.26
62.00
MLP-NN-based hub-velocity model (OSAP)
11.112
35.185
64.815
MLP-NN-based hub-velocity model (MPO)
11.112
35.185
64.815
MLP-NN-based end-point acc. model (OSAP)
11.112
35.185
64.815
MLP-NN-based end-point acc. model (MPO)
11.112
35.185
64.815
RBF-NN-based hub-angle model (OSAP)
11.112
34.26
64.815
RBF-NN-based hub-velocity model (OSAP)
11.112
35.185
64.815
RBF-NN-based hub-velocity model (MPO)
11.112
35.185
64.815
RBF-NN-based end-point acceleration model (OSAP) 11.112
35.185
64.815
RBF-NN-based end-point acceleration model (MPO) 11.112
35.185
64.815
Open-loop control using command generation techniques
235

manipulator for a given position with negligible vibration. The Gaussian distribu-
tion function can be written as:
PðxÞ ¼
1ﬃﬃﬃﬃﬃﬃ
2p
p
s
e
 xm
ð
Þ2
2s2


(8.9)
where s represents the standard deviation and m the mean of the variable x.
This function is shown in Figure 8.2(a). Taking the first derivative of this
function yields:
dPðxÞ
dx
¼ ðx  mÞ
ﬃﬃﬃﬃﬃﬃ
2p
p
s3 e
 xm
ð
Þ2
2s2


(8.10)
0
0.5
1
1.5
2
2.5
3
3.5
4
–0.6
–0.4
–0.2
0
0.2
0.4
0.6
Torque (Nm)
Time (s)
A
B
(b)
0
0.5
1
1.5
2
2.5
3
3.5
4
0
0.05
0.1
0.15
0.2
0.25
0.3
(x)
P
x
(a)
Figure 8.2
Gaussian distribution function and developed torque input:
(a) Gaussian distribution function and (b) derivative of Gaussian
distribution function
236
Flexible robot manipulators: modelling, simulation and control

Considering the left-hand side of (8.10) as a system torque input with x representing
time and m and s as constants for a given torque input, yields:
t tð Þ ¼
t  m
ð
Þ
ﬃﬃﬃﬃﬃﬃ
2p
p
s3 e
 tm
ð
Þ2
2s2


(8.11)
where t is the system input torque and t is time as the independent variable. The
Gaussian-shaped torque input thus obtained is shown in Figure 8.2(b).
To study the effects of m and s on various properties of the driving torque,
these are varied and the corresponding torque obtained. Figure 8.3 shows the cut-
off frequencies of the Gaussian input torque as a function of s, with m as a para-
meter. The cut-off frequency of this input is obtained from the autopower spectrum
of the developed torque profile, where at the cut-off frequency the power level of
the input is reduced to two thirds of its peak value. It is noted that for a given value
of m, the cut-off frequency increases with a decrease in the value of s. For a given
value of s, on the other hand, the cut-off frequency increases with an increase in the
value of m. Figure 8.4 shows the variation of the duty cycle of the Gaussian torque
input as a function of s. The duty cycle corresponds to the time, between points
A and B in Figure 8.2. This is useful in the selection of the value of s for an allowed
period of movement. Figure 8.5 shows the variation of the amplitude of the
Gaussian torque input with the value of s. This is useful that the maximum
amplitude of the developed torque profile can be kept within a particular range so
as to avoid actuator saturation and structural damage. Note that the last two prop-
erties, namely, the duty cycle and amplitude shown in Figures 8.3 and 8.4 are
independent of m. With the set of information given in Figures 8.3–8.5, it is possible
to select suitable parameters for the Gaussian torque input and generate the torque
profile accordingly prior to exciting the manipulator.
0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
0
5
10
15
20
25
30
Cut-off frequency (Hz)
m = 0.6
m = 0.83
m = 1.5
s
Figure 8.3
Variation of cut-off frequency as a function of sigma
Open-loop control using command generation techniques
237

8.4
Input torque shaping
In this section, input shaping is introduced for control of flexible manipulators. The
input shaping method involves convolving a desired command with a sequence of
impulses known as an input shaper (Singer and Seering, 1990). The shaped com-
mand that results from the convolution is then used to drive the system. The design
objectives are to determine the amplitude and time location of the impulses from
the natural frequencies and damping ratios of the system, so that the shaped
0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
0
0.5
1
1.5
2
2.5
Duty cycle (s)
s
Figure 8.4
Relation between the duty cycle and the sigma
0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
0
50
100
150
200
250
300
Non-dimensional amplitude
s
Figure 8.5
Amplitude of the developed torque as a function of sigma
238
Flexible robot manipulators: modelling, simulation and control

command reduces the system vibration. The method is briefly described in this
section. A vibratory system can be modelled as a superposition of second-order
systems each with a transfer function:
GðsÞ ¼
wn2
s2 þ 2zwns þ wn2
(8.12)
where wn is the natural frequency and z is the damping ratio of the system. Thus,
the impulse response of the system at time t is:
ydðtÞ ¼
Jwn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  z2
p
ezwnðtt0Þ sin wn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  z2
q
ðt  t0Þ

	
(8.13)
where J and t0 are the magnitude and time of the impulse, respectively. Further, the
response to a sequence of impulses can be obtained using the superposition prin-
ciple. Thus, for q impulses, with damped frequency, wd ¼ wn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  z2
p
, the impulse
response can be expressed as:
ydðtÞ ¼ W sinðwdt þ cÞ
(8.14)
where:
W ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
X
q
i¼1
li cos si
 
!2
þ
X
q
i¼1
li sin si
 
!
v
u
u
t
li ¼
Jiwn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  z2
p
ezwðttiÞ;
si ¼ wdti;
and
c ¼ tan1
X
q
i¼1
li cos si
li sin si
 
!
:
Ji and ti are the magnitudes and times at which the impulses occur.
The residual single mode vibration amplitude of the impulse response is
obtained at the time of the last impulse, tN as:
V ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
V12 þ V22
p
(8.15)
where:
V1 ¼
X
q
i¼1
Jiwn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  z2
p
ezwnðtNtiÞ cosðsiÞ;
V2 ¼
X
q
i¼1
Jiwn
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1  z2
p
ezwnðtNtiÞ sinðsiÞ:
To achieve zero vibration (ZV) after the last impulse, it is required that both V1 and
V2 in (8.15) are independently zero. Furthermore, to ensure that the shaped com-
mand input produces the same rigid body motion as the unshaped command, it is
required that the sum of amplitudes of the impulses is unity. To avoid response
delay, the first impulse is selected at time t1 ¼ 0. Hence by setting V1 and V2
Open-loop control using command generation techniques
239

in (8.15) to zero, PN
i¼1 Ai ¼ 1 and solving yields a two-impulse sequence, ZV
command shaper, as:
t1 ¼ 0;
t2 ¼ p
wd
A1 ¼
1
1 þ K ;
A2 ¼
K
1 þ K
(8.16)
where K ¼ e

zpﬃﬃﬃﬃﬃﬃ
1z2
p
.
The robustness of the input shaper to errors in natural frequencies of the system
can be increased by setting dV=dwn ¼ 0. Setting the derivative to zero is equivalent
of producing small changes in vibration corresponding to natural frequency chan-
ges. By obtaining the first derivatives of V1 and V2 in (8.15) and simplifying yields
(Singer and Seering, 1990):
dV1
dwn
¼
X
q
i¼1
JitiezwnðtNtiÞ sinðsiÞ
dV2
dwn
¼
X
q
i¼1
JitiezwnðtNtiÞ cosðsiÞ
(8.17)
Hence, by setting (8.15) and (8.17) to zero and solving yields a three-impulse
sequence, zero vibration derivative (ZVD) command shaper, as:
t1 ¼ 0;
t2 ¼ p
wd
;
t3 ¼ 2p
wd
;
A1 ¼
1
1 þ 2K þ K2 ;
A2 ¼
2K
1 þ 2K þ K2 ;
A3 ¼
K2
1 þ 2K þ K2
(8.18)
where K is as in (8.16). The robustness of the input shaper can further be increased
by taking and solving the second derivative of the vibration in (8.15). Similarly,
this yields a four-impulse sequence, extra-insensitive (EI) command shaper, as:
t1 ¼ 0;
t2 ¼ p
wd
;
t3 ¼ 2p
wd
;
t4 ¼ 3p
wd
A1 ¼
1
1 þ 3K þ 3K2 þ K3 ;
A2 ¼
3K
1 þ 3K þ 3K2 þ K3 ;
A3 ¼
3K2
1 þ 3K þ 3K2 þ K3 ;
A4 ¼
K3
1 þ 3K þ 3K2 þ K3
(8.19)
where K is as in (8.16).
To handle higher vibration modes, an impulse sequence for each vibration mode
can be designed independently. Then the impulse sequences can be convoluted
together to form a sequence of impulses that attenuate vibration at higher modes.
In this manner, for a vibratory system, the vibration reduction can be accomplished
240
Flexible robot manipulators: modelling, simulation and control

by convolving a desired system input with the impulse sequence. This yields a
shaped input that drives the system to a desired location with reduced vibration.
8.5
Filtered torque input
Input torque using filtering techniques is developed on the basis of extracting input
energies around natural frequencies of the system. The filters are thus used for pre-
processing the input signal so that no energy is fed into the system at the natural
frequencies. In this manner, the flexural modes of the system are not excited,
leading to a vibration-free motion. This can be realised by employing either low-
pass or bandstop filters. In the former, the filter is designed with a cut-off frequency
lower than the first natural frequency of the system. In the latter case, bandstop
filters with centre frequencies at the natural frequencies of the system are designed.
This will require one filter for each mode of the system. The bandstop filters thus
designed are then implemented in cascade to pre-process the input signal.
There are various filter types such as Butterworth, Chebyshev and Elliptic that
can be designed and employed. These filters have the desired frequency response in
magnitude, allow for any desired cut-off rate and are physically realisable. The
magnitude of the frequency response of a low-pass Butterworth filter is given by
(Jackson, 1989):
H jw
ð
Þ
j
j2 ¼
1
1 þ
w
wc
h i2n ¼
1
1 þ e w
wP
h
i2n
(8.20)
where n is a positive integer signifying the order of the filter, wC is the filter cut-off
frequency (3 dB frequency), wP is the pass-band edge frequency and 1 þ e2
ð
Þ
1 is
the band edge value of HðjwÞ
j
j2. Note that Hð jwÞ
j
j2 is monotonic in both the pass-
band and stop-band. The order of the filter required to yield attenuation d2 at a specified
frequency wS (stop-band edge frequency) is easily determined from (8.20) as:
n ¼
log
1
d2
2
 1
(
)
2log wS
wP


¼
log d1
e


log wS
wP


(8.21)
where by definition, d2 ¼ ð1 þ d2
1Þ0:5. Thus, the Butterworth filter is completely
characterised by the parameters n; d2; e and the ratio ws=wp.
Equation (8.21) can be employed with arbitrary d1; d2; wC and wS to yield the
required filter order n from which the filter design is readily obtained. The But-
terworth approximation results from the requirement that the magnitude response
be maximally flat in both the pass-band and the stop-band. That is, the first 2n  1
derivatives of Hð jwÞ
j
j2 are specified to be equal to zero at w ¼ 0 and at w ¼ 1.
The sharpest transition from pass-band to stop-band for a given set of filter
specification is achieved by an elliptic filter design. Thus, the elliptic design is
Open-loop control using command generation techniques
241

optimum in this sense. The magnitude response of an elliptic filter is equi-ripple in
both the pass-band and stop-band. The squared magnitude response of a low-pass
elliptic filter is of the form (Zverev, 1967):
Hð jwÞ
j
j2 ¼
1
1 þ h2U2
n w=wc
½

(8.22)
where Un w
f g is a Jacobian elliptic function of order n and h is a parameter related
to the pass-band ripple. It is known that most efficient designs occur when the
approximation error is equally spread over the pass-band and stop-band. Elliptic
filters allow this objective to be achieved easily, thus, being most efficient from the
viewpoint of yielding the smallest-order filter for a given set of specifications.
Equivalently, for a given order and a given set of specifications, an elliptic filter has
the smallest transition bandwidth.
The filter order required for a pass-band ripple g1, stop-band ripple g2 and
transition ratio wp=ws is given as:
n ¼
K wS=wC
f
gK
1  h2=g2
1



0:5
n
o
K h=g1
f
gK
1  w2
P=w2
S



0:5
n
o
(8.23)
where K v
f g is the complete elliptic integral of the first kind, defined as:
K v
f g ¼
ðp=2
0
1  v2 sin2j

0:5dj
g2 ¼ 1 þ g2
1

0:5
and
g1 ¼ 10logð1 þ h2Þ
Values of the above integral are given in a table from in a number of textbooks
(Dwight, 1957). The phase response of an elliptic filter is more non-linear in the
pass-band than a comparable Butterworth filter, especially near the band edge.
The design relations for the low-pass filters given above can be utilised in
normalised form to design the corresponding bandstop filters. This involves a
transformation from low-pass to bandstop filter (Banks, 1990).
8.6
Case studies
The open-loop control strategies were designed on the basis of identified natural
frequencies and damping ratios of the flexible manipulator system. The damping
ratios of the system have previously been deduced as 0.026, 0.038 and 0.04 for the
first, second and third modes, respectively (Tokhi and Azad, 1997). The natural fre-
quencies were obtained by using various methods as described in Section 8.2. Based
on these natural frequencies and damping ratios, the input shapers and filters are
designed and used for pre-processing the bang–bang torque input. The developed
torque profile is then applied to the system in an open-loop configuration (Figure 8.6)
242
Flexible robot manipulators: modelling, simulation and control

to reduce the vibration of the manipulator. In this process, the unshaped, shaped and
filtered inputs were designed with a sampling frequency of 500 Hz.
Experimental results of the response of the flexible manipulator to the
unshaped, shaped and filtered inputs are presented in this section in the time and
frequency domains. To verify the performance of the control techniques, the results
are examined in comparison to the unshaped bang–bang torque input for a similar
input level in each case. Three system responses namely the hub-angle, hub angular
velocity and end-point acceleration are measured experimentally and the power
spectral density (PSD) of the end-point acceleration is evaluated. Four criteria are
used to evaluate the performances of the control schemes:
1.
Level of vibration reduction at the natural frequencies. This is accomplished by
comparing the responses to the shaped and filtered inputs with the response to
the unshaped input. The results are presented in dB.
2.
The time response specifications. Parameters that are evaluated are settling
time and overshoot of the hub-angle response. The settling time is calculated
on the basis of 2% of the steady-state value. Moreover, the magnitude of
oscillation of the system response is observed.
3.
Robustness to parameter uncertainty. To examine the robustness of the tech-
niques, the system performance is assessed with 30% error tolerance in natural
frequencies. This is incorporated in the design of the input shapers and filters.
8.6.1
Case study 8.1: unshaped bang–bang torque input
Figure 8.7 shows a single-switch bang–bang torque input of amplitude 0.3 N m
and duty cycle of 0.6 s applied at the hub of the manipulator. A bang–bang torque
has a positive (acceleration) and negative (deceleration) period allowing the
manipulator to, initially, accelerate and then decelerate and eventually stop at a
target location. In this work, the first three modes of vibration of the system are
considered, as these dominate the dynamics of the system.
Figure 8.8 shows the response of the flexible manipulator with an unshaped
bang–bang input. Two conditions, namely without payload and with a 40 g pay-
load, are presented. These results were considered as the system response to the
unshaped input and subsequently will be used to design and evaluate the perfor-
mance of the command shaping techniques. It is noted that without payload a
steady-state hub-angle level of 38 was achieved with a settling time and overshoot
of 1.555 s and 2.6% respectively. Note that vibration occurs at the hub and end-
point during movement of the manipulator, as evidenced in the hub-angle, hub-
velocity and end-point acceleration responses. As demonstrated, the dynamic and
Input
shaper/filter
Bang–bang
input
Shaped/
filtered input
Flexible
manipulator
Output
Figure 8.6
Block diagram of the open-loop control configuration
Open-loop control using command generation techniques
243

0
0.5
1
1.5
2
2.5
–0.4
–0.3
–0.2
–0.1
0
0.1
0.2
0.3
0.4
Time (s)
Torque (Nm)
Figure 8.7
The bang–bang input torque
0
0.5
1
1.5
2
2.5
0
5
10
15
20
25
30
35
40
45
Time (s)
Hub-angle (deg)
0 g
40 g
(a)
0
0.5
1
1.5
2
2.5
–300
–200
–100
0
100
200
300
Time (s)
Hub-velocity (deg/s)
(b)
0 g
40 g
0
20
40
60
80
100
103
102
101
100
10–1
10–2
Frequency (Hz)
Magnitude (m2/s4/Hz)
(d)
0 g
40 g
0
0.5
1
1.5
2
2.5
–250
–200
–150
–100
–50
0
50
100
150
200
250
Time (s)
End-point acceleration (m/s2)
(c)
0 g
40 g
Figure 8.8
Response to the unshaped bang–bang torque input: (a) hub-angle,
(b) hub-velocity, (c) end-point acceleration and (d) PSD of end-point
acceleration
244
Flexible robot manipulators: modelling, simulation and control

vibration behaviour of the flexible manipulator is significantly affected with the
presence of payload. With a 40 g payload, the hub-angle reached 26 with a settling
time of 1.756 s. The residual motion of the system is dominated by the first three
modes of vibration. It is noted that the resonance frequencies decrease with pay-
load. As demonstrated in Figure 8.8, the natural frequencies of the system without
payload are at 12, 35 and 65 Hz and with payload at 10, 31 and 58 Hz. The
magnitudes of PSD of the end-point acceleration of the system without payload at
the natural frequencies are obtained as 80, 50 and 30 m2/s4/Hz, for the first three
modes, respectively. Similarly, for the system with a payload, the magnitudes of
PSD are obtained as 30, 15 and 9 m2/s4/Hz for the first three modes, respectively.
8.6.2
Case study 8.2: shaped torque input
Using the parameters of the system, an input shaper with a four-impulse sequence
for the first three modes of vibration was designed. As demonstrated in the previous
section, the natural frequencies were 12, 35 and 65 Hz and the damping ratios were
0.026, 0.038 and 0.04 for the first, second and third modes, respectively. The
magnitude and time location of the impulses were obtained by solving (8.19).
Similarly, for evaluation of robustness, input shapers with error in natural fre-
quencies were also evaluated. As a consequence of using 30% error the natural
frequencies of the system were assumed at 15.6, 45.5 and 84.5 Hz. To avoid
response delay, the first impulse is selected at time, t ¼ 0. For digital imple-
mentation of the input shapers, locations of the impulses were selected at the
nearest sampling time. Figure 8.9 shows the shaped input using input shaping.
Figure 8.10 shows the response of the flexible manipulator without payload
with the PSD of the end-point acceleration to the shaped inputs with exact and
erroneous natural frequencies. It is noted that the magnitudes of vibration of the
system, with the hub-angle, hub-velocity and end-point acceleration responses,
have significantly been reduced at the natural frequencies. These can be observed
0
0.5
1
1.5
2
2.5
–0.4
–0.3
–0.2
–0.1
0
0.1
0.2
0.3
0.4
Time (s)
Torque (Nm)
Figure 8.9
A shaped torque input using four-impulse sequences
Open-loop control using command generation techniques
245

by comparing the system responses to the unshaped input (Figure 8.8). With exact
frequencies, the oscillations in the hub-angle, hub-velocity and end-point accel-
eration response were found to have almost reduced to zero. Hence, a smoother
response was achieved. The level of vibration reduction with the end-point accel-
eration in comparison to the bang–bang torque input for the first three modes was
achieved as 38.06, 35.92 and 23.52 dB, respectively. The corresponding settling
time and overshoot of the hub-angle response were obtained as 0.896 s and 0.6%,
respectively. As noted, a much faster hub-angle response with less overshoot, as
compared to the unshaped input, was achieved.
The response of the manipulator to the shaped input with erroneous natural
frequencies is used to examine the robustness of the technique. As noted, the level
of reduction in the vibration of the manipulator is slightly less than the case without
error. However, it is noted that significant vibration reduction was achieved. The
level of vibration reduction for the end-point acceleration with erroneous natural
frequencies is achieved as 26.02, 26.02 and 26.02 dB for the first three vibration
modes. In this case, the settling time and overshoot of the hub-angle response
were obtained as 0.882 s and 0.56%, respectively. As noted, despite an increase in
the time response parameters, as compared to the case without error, significant
0
0.5
1
1.5
2
2.5
–250
–200
–150
–100
–50
0
50
100
150
200
250
Time (s)
End-point acceleration (m/s2)
(c)
Exact
Error
0
20
40
60
80
100
Frequency (Hz)
(d)
103
102
101
100
10–1
10–2
Magnitude (m2/s4/Hz)
Exact
Error
0
0.5
1
1.5
2
2.5
0
5
10
15
20
25
30
35
40
45
Time (s)
Hub-angle (deg)
0.8
0.9
1
36
38
Exact
Error
(a)
0
0.5
1
1.5
2
2.5
–200
–100
0
100
200
300
Time (s)
Hub-velocity (deg/s)
(b)
Exact
Error
Figure 8.10
Response of the flexible manipulator to shaped inputs with exact and
erroneous natural frequencies: (a) hub-angle, (b) hub-velocity,
(c) end-point acceleration and (d) PSD of end-point acceleration
246
Flexible robot manipulators: modelling, simulation and control

reduction in the settling time and overshoot were achieved as compared to the
response of the system to the unshaped input.
8.6.3
Case study 8.3: Gaussian-shaped input
A Gaussian-shaped input torque was developed with a cut-off frequency at 10.0 Hz,
s ¼ 0:15 and m ¼ 10s. The performance of the manipulator was studied experi-
mentally with this Gaussian-shaped torque input in comparison to a bang–bang
input torque for a similar angular displacement, keeping the peak torque at a
similar level in each case. The experimentation includes a comparative study, in
the two cases, of the applied torque, angular displacement and end-point accel-
eration and their respective spectral densities. The results of this study are shown
in Figures 8.11 and 8.12.
Figure 8.11 shows the Gaussian-shaped torque input. It is noted that with a cut-off
frequency of 10.0 Hz, the spectral attenuations in the input in comparison to the bang–
bang torque input are by 70.53, 78.17 and 82.45 dB in the first, second and third
0
0.5
1
1.5
2
2.5
3
3.5
4
–0.4
–0.3
–0.2
–0.1
0
0.1
0.2
0.3
0.4
Time (s)
Torque (Nm)
(a)
0
10
20
30
40
50
60
70
80
Frequency (Hz)
Magnitude (Nm/Hz)
(b)
10–1
10–2
10–3
10–4
10–5
10–6
Figure 8.11
The Gaussian-shaped torque input: (a) time domain and (b) spectral
density
Open-loop control using command generation techniques
247

modes, respectively. The corresponding system response is shown in Figure 8.12. It is
noted that the speed of response is slightly lower than that using shaped torque input
developed earlier. The spectral attenuations achieved at the first three resonance
modes with the end-point acceleration were 29.54, 29.54 and 23.88 dB.
8.6.4
Case study 8.4: filtered torque input
Using the low-pass filter, the input energy at all frequencies above the cut-off
frequency can be attenuated. In this study, sixth-order Butterworth low-pass filters
with cut-off frequency at 75% of the first vibration mode were designed. Thus, for
the flexible manipulator, the cut-off frequencies of the filters were selected at 9 and
11.7 Hz for the two cases of exact and erroneous natural frequencies, respectively.
On the other hand, using the bandstop filter, the input energy at dominant modes of
the system can be attenuated. In this study, bandstop filters with stopbands of 5 Hz
were designed for the first three modes. Similarly, the filters were designed with
consideration of exact and 30% error in natural frequencies. The filtered torque
inputs with the low-pass and bandstop filters are shown in Figure 8.13.
Figure 8.14 shows the response of the flexible manipulator with the PSD of the
end-point acceleration to the low-pass filtered torque with exact and erroneous
natural frequencies. With exact frequencies, the system vibration at the natural
frequencies has been considerably reduced in comparison to the unshaped input.
0
0.5
1
1.5
2
2.5
3
3.5
4
0
5
10
15
20
25
30
35
Time (s)
Hub-angle (deg)
(a)
0
0.5
1
1.5
2
2.5
3
3.5
4
–300
–200
–100
0
100
200
300
Time (s)
Hub-velocity (deg/s)
(b)
0
0.5
1
1.5
2
2.5
3
3.5
4
–200
–150
–100
–50
0
50
100
150
200
Time (s)
End-point acceleration (m/s2)
(c)
0
10 20 30 40 50 60 70 80
Frequency (Hz)
Magnitude (m2/s4/Hz)
(d)
10–1
100
101
102
10–2
10–3
Figure 8.12
System response with the Gaussian-shaped torque input: (a) hub-
angle, (b) hub-velocity, (c) end-point acceleration and (d) PSD of
end-point acceleration
248
Flexible robot manipulators: modelling, simulation and control

The levels of reduction at the first three modes of vibration of the system with the
end-point acceleration achieved were 20, 28.96 and 29.54 dB, respectively. The
settling time and overshoot of the hub-angle response to the low-pass filtered input
were obtained as 0.894 s and 0.98%, respectively.
0
0.5
1
1.5
2
2.5
–200
–100
0
100
200
300
Time (s)
Hub-velocity (deg/s)
(b)
Exact
Error
0
0.5
1
1.5
2
2.5
0
5
10
15
20
25
30
35
40
45
Time (s)
Hub-angle (deg)
(a)
Exact
Error
0
20
40
60
80
100
Frequency (Hz)
Exact
Error
(d)
Magnitude (m2/s4/Hz)
100
101
102
103
10–1
10–2
0
0.5
1
1.5
2
2.5
–250
–200
–150
–100
–50
0
50
100
150
200
250
Time (s)
(c)
Exact
Error
End-point acceleration (m/s2)
Figure 8.14
Response with low-pass filtered inputs with exact and erroneous
natural frequencies: (a) hub-angle, (b) hub-velocity, (c) end-point
acceleration and (d) PSD of end-point acceleration
0
0.5
1
1.5
2
2.5
–0.5
–0.4
–0.3
–0.2
–0.1
0
0.1
0.2
0.3
0.4
Time (s)
Torque (Nm)
Low-pass
Bandstop
Figure 8.13
Low-pass and bandstop filtered torque inputs
Open-loop control using command generation techniques
249

The robustness of the technique is demonstrated with the system response to
the filtered torque with erroneous natural frequencies. As evidenced in the mag-
nitude of the time responses, relatively small reduction in the system vibration was
achieved. The levels of reduction at the first three modes of vibration of the system
with the end-point acceleration achieved were 8.52, 21.94 and 23.52 dB. The set-
tling time and overshoot of the hub-angle response were obtained as 1.268 s and
2.83%, respectively. In this case, the settling time increased to 80% of the unshaped
input. Moreover, higher overshoot than the response to unshaped input was noted.
The response of the flexible manipulator with sixth-order Butterworth band-
stop filtered inputs with exact and erroneous natural frequencies is shown in
Figure 8.15. With exact frequencies, it is noted that only small amount of vibration
reduction at the first three vibration modes was achieved in comparison with the
response to unshaped input. The levels of reduction at the first three modes of
vibration with the end-point acceleration of the system obtained were 26.02, 18.42
and 18.5 dB. The corresponding settling time and overshoot of the hub-angle
response to the filtered input were 0.836 s and 2.15%, respectively. It is noted that
significant reduction in settling time was achieved but relatively small reduction in
the overshoot of the response. With erroneous natural frequencies, the level of
vibration of the system at the natural frequencies was not significantly affected as
compared with the unshaped input case. The levels of reduction with the end-point
–200
–100
0
100
200
300
Time (s)
Hub-velocity (deg/s)
(b)
0
0.5
1
1.5
2
2.5
Exact
Error
0
5
10
15
20
25
30
35
40
45
Time (s)
Hub-angle (deg)
Exact
Error
(a)
0
0.5
1
1.5
2
2.5
–250
–200
–150
–100
–50
0
50
100
150
200
250
Time (s)
(c)
0
0.5
1
1.5
2
2.5
End-point acceleration (m/s2)
Exact
Error
Frequency (Hz)
(d)
Exact
Error
Magnitude (m2/s4/Hz)
100
101
102
103
10–1
10–2
0
20
40
60
80
100
Figure 8.15
Response with bandstop filtered inputs with exact and erroneous
natural frequencies: (a) hub-angle, (b) hub-velocity, (c) end-point
acceleration and (d) PSD of end-point acceleration
250
Flexible robot manipulators: modelling, simulation and control

acceleration response for the first three modes were 6.02, 1.94 and 0 dB. The
settling time and overshoot of the hub-angle response to the bandstop filtered input
with erroneous natural frequencies are achieved as 1.474 and 4.60 s, respectively.
Thus, no improvement in the time-response was achieved as compared to the
unshaped input.
8.6.5
Case study 8.5: system with payload
Figures 8.16 and 8.17 show responses of the flexible manipulator with a payload of
40 g when driven with shaped inputs using a four-impulse sequence with exact and
erroneous natural frequencies. It is revealed that the input shaping can handle
vibrations of the system with a payload. In both cases, the magnitudes of vibration
0
0.5
1
1.5
2
2.5
0
5
10
15
20
25
30
35
40
45
Time (s)
Hub-angle (deg)
Exact
Error
(a)
0
0.5
1
1.5
2
2.5
–200
–100
0
100
200
300
Time (s)
Hub-velocity (deg/s)
(b)
Exact
Error
Figure 8.16
Response at the hub with 40 g payload using input shaping (with
exact and erroneous natural frequencies): (a) hub-angle and
(b) hub-velocity
Open-loop control using command generation techniques
251

at the resonance modes of the system have significantly been reduced as compared
to the unshaped input. Significant vibration reduction has also been achieved using
the shaped input with erroneous natural frequencies.
Similarly, responses of the system with a 40 g payload to the sixth-order low-
pass and bandstop filtered inputs with exact and erroneous natural frequencies are
shown in Figures 8.18–8.21. It is noted that considerable reduction in the system
vibration was achieved using the filtered inputs with exact natural frequencies.
However, the levels of vibration at the hub-angle, hub-velocity and end-point
acceleration were higher as compared to the system without payload. Moreover,
there was no major improvement with the low-pass and bandstop filtered inputs
with erroneous natural frequencies. In this case, the system vibrations were higher.
0
20
40
60
80
100
Frequency (Hz)
(b)
Magnitude (m2/s4/Hz)
100
101
102
103
10–1
10–2
Exact
Error
0
0.5
1
1.5
2
2.5
–250
–200
–150
–100
–50
0
50
100
150
200
250
Time (s)
(a)
End-point acceleration (m/s2)
Exact
Error
Figure 8.17
Response the end-point with 40 g payload using input shaping
(with exact and erroneous natural frequencies): (a) end-point
acceleration and (b) PSD of end-point acceleration
252
Flexible robot manipulators: modelling, simulation and control

8.6.6
Comparative performance assessment
A comparison of the responses of the flexible manipulator using the control stra-
tegies reveals that the best performance in reduction of vibration of the flexible
manipulator is achieved with the shaped torque input. This is observed as compared
to the low-pass and bandstop filtered inputs at the first three modes of vibration. The
performance of the technique is also evidenced in the magnitude of vibration with
the hub-angle, hub-velocity and end-point acceleration responses in Figures 8.12,
8.14 and 8.15, respectively. For the level of vibration reduction with the end-point
acceleration response, almost 2-fold improvement was achieved with input shaping
as with the filtered inputs. It is noted that better performance in vibration reduction
of the system is achieved with the low-pass filtered input than with the bandstop
0
0.5
1
1.5
2
2.5
0
5
10
15
20
25
30
35
40
45
Time (s)
Hub-angle (deg)
Exact
Error
(a)
0
0.5
1
1.5
2
2.5
–200
–100
0
100
200
300
Time (s)
Hub-velocity (deg/s)
(b)
Exact
Error
Figure 8.18
Response at the hub with 40 g payload using low-pass filtered inputs
(with exact and erroneous natural frequencies): (a) hub-angle and
(b) hub-velocity
Open-loop control using command generation techniques
253

filtered input. This is mainly due to the higher level of input energy reduction
achieved with the low-pass filter, especially at the second and third vibration modes.
The settling time and overshoot of the hub-angle responses using the control stra-
tegies are summarised in Figures 8.22 and 8.23, respectively.
It is noted that significant reduction in the settling time was achieved with the
control strategies. However, the differences in the settling time achieved with the
shaped and filtered inputs are negligibly small. It is also revealed that the lowest
overshoot was achieved with the input shaping technique.
A comparison of the system responses and the level of vibration reduction
achieved with controllers with errors in natural frequencies reveals that the highest
0
0.5
1
1.5
2
2.5
–250
–200
–150
–100
–50
0
50
100
150
200
250
Time (s)
Exact
Error
(a)
End-point acceleration (m/s2)
0
20
40
60
80
100
Frequency (Hz)
(b)
Magnitude (m2/s4/Hz)
100
101
102
103
10–1
10–2
Exact
Error
Figure 8.19
Response at the end-point with 40 g payload using low-pass filtered
inputs with exact and erroneous natural frequencies: (a) end-point
acceleration and (b) PSD of end-point acceleration
254
Flexible robot manipulators: modelling, simulation and control

robustness to parameter uncertainty is achieved with the input shaping technique.
It is noted that the shaped input can successfully handle errors in the natural fre-
quencies as significant reduction in system vibration was achieved as compared
with the other control techniques. This is revealed by comparing the magnitude of
vibration of the system in Figures 8.12, 8.14 and 8.15. The settling times achieved
using the techniques with erroneous natural frequencies is shown in Figure 8.22. As
noted, the settling time with input shaping increased to 50% of the settling time of
the unshaped input whereas settling times of 80%–95% of the unshaped input were
achieved with other control techniques. Moreover, using input shaping technique,
as demonstrated in Figure 8.23, the overshoot in the hub-angle response was not
affected with the error.
0
0.5
1
1.5
2
2.5
0
5
10
15
20
25
30
35
40
45
Time (s)
Hub-angle (deg)
Exact
Error
(a)
(b)
0
0.5
1
1.5
2
2.5
–200
–100
0
100
200
300
Time (s)
Hub-velocity (deg/s)
Exact
Error
Figure 8.20
Response at the hub with 40 g payload using bandstop filtered inputs
(with exact and erroneous natural frequencies): (a) hub-angle and
(b) hub-velocity
Open-loop control using command generation techniques
255

On the other hand, higher overshoots were obtained using low-pass and
bandstop filtered inputs. The input shaping technique is more robust, as significant
reduction was achieved at the first mode of vibration, which is the most dominant
mode. The bandstop filtered input did not handle the error as only small amount of
reduction of the system vibration was achieved. On the other hand, using the low-
pass filter, a significant amount of attenuation of the system vibration was achieved
at the second and third modes. Moreover, the vibration reduction achieved with the
low-pass filtered input was similar to the shaped input at these modes.
A comparison of the results using shaping techniques reveals that input shap-
ing can successfully handle vibrations in the presence of payload in the system.
With exact and erroneous natural frequencies, vibrations in the hub-angle, hub-
velocity and end-point acceleration were significantly suppressed. On the other
hand, considerable reduction in vibration of the system was achieved using filtered
0
0.5
1
1.5
2
2.5
–250
–200
–150
–100
–50
0
50
100
150
200
250
Time (s)
(a)
Exact
Error
End-point acceleration (m/s2)
0
20
40
60
80
100
Frequency (Hz)
Exact
Error
(b)
Magnitude (m2/s4/Hz)
100
101
102
103
10–1
10–2
Figure 8.21
Response at the end-point 40 g payload using bandstop filtered
inputs (with exact and erroneous natural frequencies): (a) end-point
acceleration and (b) PSD of end-point acceleration
256
Flexible robot manipulators: modelling, simulation and control

inputs. However, the filtered inputs were unable to handle payload with error in
natural frequencies. Figure 8.24 shows the level of vibration reduction of the sys-
tem at the end-point acceleration response with a 40 g payload. Similar to the case
without payload, the input shaping technique has provided the highest level of
vibration reduction and robustness.
The settling times achieved using the shaping techniques for the manipulator
with a 40 g payload are shown in Figure 8.25. Using the shaped inputs with exact
and erroneous natural frequencies, significant reduction in settling times was
achieved. However, using the filtered inputs with erroneous natural frequencies, the
settling time increased to 90%–100% of the unshaped input case. However, with
the shaped input, although the requirement to achieve the same steady-state hub-
angle response level as the unshaped input was fulfilled, experimental results
showed a steady-state error of 5 in the hub-angle response. Further experimental
investigations showed that with higher levels of vibration, the experimental rig
moves to a higher angle. This might be due to the effects of payload rotary inertia.
0
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
1.8
Error
Exact
Time (s)
BB
IS
LP
BS
Figure 8.22
Settling times of the hub-angle response with exact and erroneous
natural frequencies using bang–bang torque (BB), input shaping
(IS), low-pass filter (LP) and bandstop filter (BS)
0
1
2
3
4
5
Overshoot (%)
BB
IS
LP
BS
Error
Exact
Figure 8.23
Overshoot of the hub-angle response with exact and erroneous
natural frequencies using BB, IS, LP and BS
Open-loop control using command generation techniques
257

In this case, to ensure the same steady-state level as the unshaped input, a feedback
controller is required at the expense of settling time.
8.7
Summary
The development of open-loop command generation techniques for control of
flexible manipulators using Gaussian-shaped input, low-pass and bandstop filtered
input, shaped torque input has been presented. The system response to unshaped
bang–bang torque input has been identified and used to determine the parameters of
the system for design and evaluation of the control strategies. The design approach
of such an input torque for a given cut-off frequency and duty cycle has been
presented. With a Gaussian-shaped input, although the level of vibration reduces,
the speed of response is slightly lower than that using a filtered torque input.
0
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
1.8
2
Time (s)
BB
IS
LP
BS
Error
Exact
Figure 8.25
Settling time of the hub-angle response of the system with 40 g
payload using BB, IS, LP and BS
0
10
20
30
40
Mode 1
Mode of vibration
Level of reduction (dB)
IS
LP
BS
IS-e
LP-e
BS-e
Mode 2
Mode 3
Figure 8.24
The level of vibration reduction with the end-point acceleration
response of the system with 40 g payload using controllers with exact
frequency (IS, LP and BS) and error in natural frequencies (IS-e,
LP-e and BS-e)
258
Flexible robot manipulators: modelling, simulation and control

The filtered torque input functions have been developed on the basis of the
identified resonance modes of the system through analytical, experimental, GA
modelling and NN modelling. The developed filtered torques have been investi-
gated in an open-loop control configuration for control of a single-link flexible
manipulator. Comparing the results achieved with the low-pass and band-stop
filtered torque inputs reveal that better performance at reduction of level of vibra-
tions of the system is achieved with low-pass filtered torque inputs. This is due to
the indiscriminate spectral attenuation in the low-pass filtered torque input at all the
resonance modes of the system. Utilisation of band-stop filters, however, is
advantageous in that spectral attenuation in the input at selected resonance modes
of the system can be achieved. Thus, an open loop control strategy based on band-
stop filters is optimum in this sense. Performances of the techniques have been
evaluated in terms of level of vibration reduction, time response specifications and
robustness to variation in natural frequencies. Significant improvement in the
reduction of system vibrations has been achieved with all the filtered torque inputs
as compared to a bang–bang torque input.
A shaped input with four-impulse sequence for the first three modes of
vibration were designed and presented. A comparison of the results with other
open-loop approaches has demonstrated that the best performance in vibration
reduction and time response, especially in terms of robustness to error is achieved
with the shaped input technique. It has also been demonstrated that the shaped input
technique can successfully handle vibrations in the presence of payload.
Open-loop control using command generation techniques
259

This page intentionally left blank 

Chapter 9
Collocated and non-collocated control
This chapter presents closed-loop collocated and non-collocated control approaches
for flexible manipulator systems. A closed-loop control strategy using hub angle and
hub velocity feedback for rigid-body motion control and end-point acceleration
feedback for flexural motion control is considered. This is then extended to an
adaptive collocated non-collocated control mechanism using on-line modelling and
controller design. PID-type as well as inverse-model control techniques are con-
sidered for flexural motion control. The non-minimum phase behaviour of the plant
in the latter case is addressed through conventional techniques. This is further
addressed through development of an adaptive neuro-inverse model strategy. Case
studies demonstrating and assessing the performances of the control approaches are
presented through simulated and experimental exercises.
9.1
Introduction
The advantages of flexible manipulators can be realised in practice only at the
expense of rendering accurate controllers for its vibration control. Vibration control
techniques, as discussed in Chapter 1, are generally classified into two categories:
passive and active control. Active control utilises the principle of wave inter-
ference. This is realised by artificially generating anti-source(s) (actuator(s)) to
destructively interfere with the unwanted disturbances and thus result in reduction
in the level of vibration. Active control of flexible manipulator systems can in
general be divided into two categories: open-loop and closed-loop control. Open-
loop control involves altering the shape of actuator commands by considering the
physical and vibrational properties of the flexible manipulator system. The
approach does not account for changes in the system once the control input is
developed. Closed-loop control differs from the open-loop control in that it uses
measurements of the system’s state and change the actuator input accordingly to
reduce the system oscillation. Effective control of a system always depends on
accurate real-time monitoring and the corresponding control effort in a close-loop
manner.
This chapter focuses on the development of closed-loop controllers for flexible
manipulator systems. The difficulties in controlling a flexible manipulator stem
from several factors, such as flexibility of the structure, coupling effects, non-
linearities, parameter variations and un-modelled dynamics. Ignoring such factors

could not attain satisfactory closed-loop control performance. A common strategy
in the control of flexible manipulator systems involves the utilisation of propor-
tional and derivative (PD) feedback of collocated sensor signals, such as hub angle
and hub velocity. Such a strategy is initially adopted in this chapter through joint-
based collocated (JBC) control. The JBC controllers are capable of reducing the
vibration at the end-point of the manipulator as compared to a response with open-
loop bang–bang input torque. However, for effective control of end-point vibration
it is necessary to use a further control loop accounting for flexural motion control of
the system. A hybrid collocated and non-collocated control structure for control of
a single-link flexible manipulator has previously been reported (Tokhi and Azad,
1996b), where a PD configuration has been applied for control of the rigid body
motion and a proportional, integral, derivative (PID) control scheme with end-point
displacement feedback has been used for vibration suppression of the manipulator.
These two loops are then summed to give a command torque input. The control
scheme has been tested and investigated within a simulation environment and also
with an experimental rig.
The proposed collocated JBC and hybrid collocated and non-collocated control
structure is capable of reducing the level of vibration at the end-point for fixed
operating conditions. In the case of a flexible manipulator system any change in
payload mass will affect the system dynamics for which such a fixed controller will
not be adequate. This problem can be addressed by making the developed controllers
adaptive so that they can be adjusted according to changes in the system dynamics.
A self-tuning scheme is initially implemented using the pole assignment
technique with JBC control. The hybrid collocated and non-collocated control
scheme is then realised with an adaptive JBC position controller and an inverse
end-point-model vibration controller. A recursive least squares (RLS) algorithm is
utilised to obtain an inverse model of the plant in parametric form. The problem of
controller instability arising from the non-minimum phase characteristics exhibited
in the plant model is resolved by reflecting the non-invertible zeros into the stabi-
lity region. The performances of both schemes are investigated within a flexible
manipulator simulation environment.
It is evident from the literature that neural networks (NNs) have enjoyed a
great deal of success in solving many complex control problems that are extremely
difficult to solve with other approaches (Blum and Li, 1991; Jain and Mohiuddin,
1996; Leshno, 1993; Yesildierk et al., 1994). Thus, to address the end-point
vibration control of the manipulator as well as account for stability of the non-
collocated control loop, a neuro-inverse model approach is adopted. A Non-linear
AutoRegressive process with eXogeneous input model (NARX) along with a multi-
layered perceptron (MLP) neural network based on Marquardt–Levenberg
modified version of the backpropagation learning algorithm (Hagan and Menhaj,
1994; Marquardt, 1963) is used. The neuro-inverse controller is realised within a
MATLAB/Simulink based finite difference simulation (Poerwanto, 1998)
environment of the system and its performance is accordingly assessed and dis-
cussed. The flexible manipulator system considered in this chapter is that described
in Chapter 2.
262
Flexible robot manipulators: modelling, simulation and control

9.2
Joint-based collocated control
The task of the JBC control loop is to move or position the flexible arm to the
specified angle of demand. The control objective here is for the output y tð Þ (hub-
angle) to follow a reference signal (angle) r tð Þ in some predetermined way. This
can be achieved through the utilisation of PD feedback of collocated sensor signals.
The basic structure of the scheme is shown in Figure 9.1 where Ac represents gain
of the motor amplifier, Kp and Kv the proportional and derivative gains of the
controller, respectively, Rf the reference hub-angle, q tð Þ and _q tð Þ the hub-angle and
hub-velocity and u tð Þ the control signal.
To design the controller so as to result in the closed-loop roots with maximum
negative real parts, it has been suggested to choose the ratio Kp=Kv  2:0 and set
the derivative gain Kv to vary within 0 to 1.2 (Azad, 1994). This is based on
information derived from a simulation environment of the flexible manipulator.
In a practical environment, however, effects of uncontrolled dynamics of the
flexible manipulator, actuators, filters and sensor as well as delays caused by measuring
and sampling of feedback signal have to be taken into account. This type of controller
gives optimum performance for a certain loading condition of the flexible manipulator.
It performs adequately well in controlling the position of the flexible manipulator for
different angle demands. However, in a practical environment, where the loading
conditions of the flexible manipulator change, causing changes in the characteristics of
the system, the system performance with a fixed JBC control scheme will not be
satisfactory. This makes fixed JBC control impractical, as any load change will require
the controller to be modified for the desired performance to be achieved.
9.2.1
Case study 9.1: simulation exercise
For purposes of this section the proportional gain (Kp), derivative gain (Kv) and
overall controller gain (Ac) are set to 0.4, 0.35 and 0.01 respectively. The structural
damping is set to Ds ¼ 0:148. The arm is moved from one position to another
within the range of 80. The system with this set-up was simulated without a
payload at the end-point of the manipulator and the system response was observed
at the hub and end-point. Figure 9.2 shows the angular displacement as measured at
the hub. It is noted that the manipulator reached the demanded position from þ80
to 80 within less than 2.0 s with no significant overshoot.
–
–
+
+
Rf
Kv
Σ
Flexible
manipulator
system 
u(t)
Ac
Kp
q (t)
q (t)
Σ
Figure 9.1
Fixed JBC controller for a flexible manipulator system
Collocated and non-collocated control
263

9.2.2
Case study 9.2: experimental exercise
The performance of the fixed JBC controller for positioning the flexible manipulator
with various payloads was investigated, and the controller parameters were adjusted
off-line. The controller parameters thus utilised with various loads are shown in
Table 9.1 and the corresponding hub-angle is shown in Figure 9.3, where the
demanded position in each case is shown with the dashed-line curve. It is noted that,
with suitable control parameters, the manipulator achieves the demanded angular
position smoothly and within reasonable time-scales.
Hub-angle (deg)
Time (s)
0
5
10
15
20
25
30
–80
–60
–40
–20
0
20
40
60
80
(a)
Frequency (Hz)
10
20
30
40
50
60
70
80
Magnitude (deg/Hz)
10–4
10–1
0
10–3
10–2
100
101
102
103
(b)
Figure 9.2
Hub-angle with fixed JBC-controller (dashed – demanded):
(a) time domain and (b) spectral density
264
Flexible robot manipulators: modelling, simulation and control

9.3
Collocated and non-collocated feedback control
with PD and PID
A block diagram of the hybrid collocated non-collocated control structure is shown
in Figure 9.4, where a tð Þ and Ra tð Þ represent the end-point acceleration and
corresponding reference signal, respectively. Note that for minimum end-point
acceleration Ra tð Þ is set to zero. To satisfy the requirements of the vibration control
loop, the end-point vibration signal must be decoupled from the rigid body motion
so that the low-frequency movement representing the rigid body motion is not
included in the measurement of the end-point acceleration. Note that the end-point
Table 9.1
Fixed JBC controller parameters for various loads
Payload (g)
0.0
20
40
60
80
100
Kp
1.0
1.0
1.0
1.0
1.0
1.0
Kv
0.3
0.34
0.37
0.42
0.45
0.47
Hub-angle (deg)
Time (s)
0
5
10
15
20
25
30
–80
–60
–40
–20
0
20
40
60
80
(a)
Hub-angle (deg)
0
5
10
15
20
25
30
–80
–60
–40
–20
0
20
40
60
80
Time (s)
(b)
Hub-angle (deg)
0
5
10
15
20
25
30
–80
–60
–40
–20
0
20
40
60
80
Time (s)
(c)
Hub-angle (deg)
0
5
10
15
20
25
30
–80
–60
–40
–20
0
20
40
60
80
Time (s)
(d)
Figure 9.3
Performance of the fixed JBC-controlled system with various
payloads: (a) 0 g load, (b) 40 g load, (c) 80 g load and (d) 100 g load
Collocated and non-collocated control
265

acceleration is defined as the acceleration due to the residual motion of the
manipulator’s end-point. The end-point oscillation is related to the elastic deflec-
tion u x; t
ð
Þ as described in Chapter 3 and hence minimising the end-point accel-
eration is the main objective of the vibration control process.
A high-pass filter can be used to decouple the rigid body dynamics from the
flexural dynamics contained in the end-point measurement. The cut-off frequency
of the required high-pass filter must be set to a sufficient frequency value, which
does not cause severe attenuation of the lowest first flexible mode. In this case, the
use of a high-pass filter with 8.0 Hz cut-off frequency with 20 dB/decade
attenuation in the stopband would be adequate. A low-pass filter is applied to limit
the system’s bandwidth up to the first three modes.
9.3.1
Case study 9.3: simulation exercises
To investigate the performance of the hybrid collocated non-collocated control
scheme in Figure 9.4, the flexible manipulator simulation environment is utilised. The
flexible manipulator is set with a structural damping Ds ¼ 0:024. The Ziegler–
Nichols method (Ogata, 2001) is used in obtaining the PID controller parameters. The
set of non-collocated PID controller parameters thus obtained is shown in Table 9.2.
The performance of the system with the hybrid collocated non-collocated con-
troller with no load at the hub and the end-point are shown in Figures 9.5 and 9.6.
The corresponding input torque is shown in Figure 9.7. For reasons of comparison,
the uncompensated and compensated end-point accelerations are superimposed,
where the dotted-line graph shows the uncompensated end-point acceleration and the
solid-line graph shows the compensated end-point acceleration. Figures 9.8–9.10
show the system performance with 50 g load at the end-point. It can be seen from
Figure 9.6 that the end-point accelerations have been reduced significantly after
0.2 s, and it takes only 0.5 s for the oscillations to reach a minimum level. The
reduction at the first, second and third resonance modes of oscillation are 23,
12 and 7.4 dB, respectively. A similar trend is observed with 50 g load at the
end-point, see Figure 9.9. The system has shown a good hub-angle tracking per-
formance and the input torque in each case remains within practical limits.
+
+
–
–
+
+
u(t)
Rf
Kv
Ac
Kp
Σ
Σ

Flexible
manipulator
system 
PID
controller 
Σ
Ra(t)
–
a(t)
q(t)
q(t)
Figure 9.4
Hybrid collocated non-collocated control
266
Flexible robot manipulators: modelling, simulation and control

The choice of a suitable control mechanism for a flexible manipulator system
under movement from one point to another is affected by the extent of flexibility of
the manipulator. An oscillatory behaviour (vibration) results due to the flexible
nature of a manipulator. For rigid manipulators, the control scheme employs
Hub-angle (deg)
0
1
2
3
4
5
6
7
–100
–80
–60
–40
–20
0
20
40
60
80
100
Time (s)
Dotted:- Demand 
Solid:- Actual
(a)
Magnitude (deg/Hz)
0
10
20
30
40
50
60
70
80
102
101
100
10–1
10–2
10–3
10–4
Frequency (Hz)
Dotted:- Demand 
Solid:- Actual
(b)
Figure 9.5
Hub-angle with hybrid collocated non-collocated controller
without payload: (a) time domain and (b) spectral density
Table 9.2
Parameters of non-collocated controller
Payload
Kp
Ki
Kd
0.0
10
400
0.2
50.0
5
1,000
0.1
Collocated and non-collocated control
267

sensors that are collocated with actuators. The collocation of sensors and actuators
provide a stable servo control (Gevarter, 1970). Non-collocated systems, on the
other hand, lack these inherent stability characteristics. To achieve end-point
position control, the desired end-point location is converted through real-time
kinematics computation to the equivalent angles and then the actuator is activated
to drive the end-point to these angles using a servo loop. Note that this controller
will be working as long as the arm is stiff enough so that the end-point will remain
in the intended location. The inherent flexibility of flexible manipulators may lead
to such a control method not achieving accurate positioning. The use of a non-
collocated control scheme, where the end-point of the flexible manipulator system is
End-point residuals (mm)
1
2
3
4
5
6
7
–6
–4
–2
0
2
4
6
0
Time (s)
Dotted:- Before control 
Solid:- After control
(a)
Magnitude (mm/Hz)
0
10
20
30
40
50
60
70
80
101
100
10–1
10–2
10–3
10–4
Frequency (Hz)
Dotted:- Before control 
Solid:- After control
(b)
Figure 9.6
End-point acceleration with hybrid collocated non-collocated
controller without payload: (a) time domain and (b) spectral density
268
Flexible robot manipulators: modelling, simulation and control

controlled by measuring its position, can be applied to improve the overall perfor-
mance. The non-collocation of the sensor and the actuator can provide more reliable
output measurement and increase the bandwidth of the overall closed-loop system.
It has been shown that PID non-collocated scheme is effective with a fixed set
of controller parameters to actively reduce the vibration at the end-point for a
certain loading condition only. Thus, if the characteristics of the flexible manip-
ulator change, for example, due to loading conditions, the PID parameters must be
adjusted accordingly to achieve and maintain the desired performance. In this
manner, an adaptive inverse-dynamic controller is considered later in this chapter
Torque (Nm)
1
2
3
4
5
6
7
–0.4
–0.3
–0.2
–0.1
0
0.1
0.2
0.3
0.4
Time (s)
0
Dotted:- Before control 
Solid:- After control
(a)
(b)
10
20
30
40
50
60
70
80
100
Frequency (Hz)
Magnitude (Nm/Hz)
10–1
10–2
10–3
10–4
10–5
10–6
0
Dotted:- Before control 
Solid:- After control
Figure 9.7
Torque input with hybrid collocated non-collocated controller without
payload: (a) time domain and (b) spectral density
Collocated and non-collocated control
269

and its performance investigated in comparison to the fixed PID non-collocated
control scheme.
9.4
Adaptive joint-based collocated control
Essentially, the task of the JBC control loop is to move or position the flexible arm
to some pre-defined angle of demand. It is assumed that the flexible manipulator
can possibly carry a load at the end-point. Based on this assumption, it was
Hub-angle (deg)
1
2
3
4
5
6
7
–100
–80
–60
–40
–20
0
20
40
60
80
100
Time (s)
0
Dotted:- Demand 
Solid:- Actual
(a)
(b)
10–4
0
10
20
30
40
50
60
70
80
102
Frequency (Hz)
Magnitude (deg/Hz)
101
100
10–1
10–2
10–3
Dotted:- Demand 
Solid:- Actual
Figure 9.8
Hub-angle with hybrid collocated non-collocated controller with 50 g
payload: (a) time domain and (b) spectral density
270
Flexible robot manipulators: modelling, simulation and control

demonstrated earlier that fixed JBC control cannot sufficiently compensate for the
changes in the characteristics of the system that may be caused by variation in the
loading conditions, unless some adjustments on the control parameters are made.
An adaptive JBC control scheme is expected to overcome this problem. The
expectation is that adaptive JBC controller could identify changes in the char-
acteristics of the flexible manipulator and thus provide a better response in terms of
speed and settling time by feeding suitable amount of torque to the flexible
1
2
3
4
5
6
7
–6
–4
–2
0
2
4
6
Time (s)
End-point residuals (mm)
0
Dotted:- Before control 
Solid:- After control
(a)
0
10
20
30
40
50
60
70
80
101
Frequency (Hz)
Magnitude (mm/Hz)
100
10–1
10–2
10–3
10–4
Dotted:- Before control 
Solid:- After control
(b)
Figure 9.9
End-point accelerations with hybrid collocated non-collocated
controller with 50 g payload: (a) time domain and (b) spectral density
Collocated and non-collocated control
271

manipulator. A block diagram of an adaptive JBC control scheme is shown in
Figure 9.11, where ^K p ¼ AcKp and ^K v ¼ AcKv with ^K p and ^K v representing the
proportional and derivative gains, respectively. The hub-angle is represented by
qðtÞ, Rf is the desired hub-angle and Ac is the amplifier gain. The input–output
signals are sampled at a sampling period ts ¼ 5:0 ms, and a pole-placement
approach is adopted with a second-order desired closed loop characteristic, in
designing the controller.
1
2
3
4
5
6
7
–0.4
–0.3
–0.2
–0.1
0
0.1
0.2
0.3
0.4
Torque (Nm)
0
Time (s)
Dotted:- Before control 
Solid:- After control
(a)
10
20
30
40
50
60
70
80
100
Frequency (Hz)
Magnitude (Nm/Hz)
10–1
10–2
10–3
10–4
10–5
10–6
0
Dotted:- Before control 
Solid:- After control
(b)
Figure 9.10
Torque input with hybrid collocated non-collocated controller with
50 g payload: (a) time domain and (b) spectral density
272
Flexible robot manipulators: modelling, simulation and control

The control signal, u tð Þ in Figure 9.11 can be written as:
uðtÞ ¼ ^K pRf 
^K p þ
^K v
ts
ð1  z1Þ


qðtÞ
(9.1)
where z1 represents the backward shift operator.
In a general design setting where the underlying system may have complex
dynamics, a number of rules of thumb exist which assist in the selection of the
controller parameters Ac, Kp and Kv. In a synthetic situation, however, the
requirements on the underlying system are quite strict. In particular, with a second
order closed-loop response, in order to synthesise exactly the controller parameters,
the system to be controlled must be assumed to have a special structure of the form:
q zð Þ ¼
b0z1
1 þ a1z1 þ a2z2 u zð Þ
(9.2)
This restriction on the system model is to ensure that only one set of controller
parameters arise from the pole-placement design.
Combining the system model in (9.2) with the controller equation (9.1) yields
the closed-loop equation relating Rf and q as:
q
Rf
¼
AcKpb0z1
ð1 þ a1z1 þ a2z2Þ þ Ac Kvts1ð1  z1Þ þ Kp


b0z1
(9.3)
The characteristic equation (Ch-Eqn) of the controlled system is thus
Ch-Eqn ¼ 1 þ a1 þ AcKpb0 þ AcKvts
1b0


z1 þ a2  AcKvts
1b0


z2
(9.4)
Controller
–
+
u(t)
Rf
Kp
ˆ
(1−z−1)
ˆ
ˆ + Kv
Kp
Σ
Flexible
manipulator
system 
Pole assignment
synthesis 
Parameter
estimator
Performance
requirements
q(t)
ts
Figure 9.11
Adaptive joint-based collocated control
Collocated and non-collocated control
273

The controller coefficients can be determined by equating the characteristic
equation with a desired closed-loop characteristic equation given by a T poly-
nomial;
T ¼ 1 þ t1z1 þ t2z2
(9.5)
where:
t1 ¼ 2exp zwnts
ð
Þcos
tswn 1  z2

1=2
n
o
t2 ¼ exp 2zwnts
ð
Þ
with z, tS and wn representing the damping factor, sampling-period and natural
frequency of the desired closed-loop second-order transient response, respectively.
This yields the controller settings as:
^K p ¼ t1 þ t2  a1  a2
b0
(9.6)
^K v ¼ a2  t2
ð
Þts
b0
(9.7)
Equations (9.6) and (9.7) are the controller design rules, realisation of which
results in a pole assignment self-tuning control scheme, see Figure 9.11.
9.4.1
Case study 9.4: simulation exercises
In the simulation studies presented in this section the flexible manipulator simu-
lation algorithm is utilised as a test platform with a structural damping of
Ds ¼ 0:024. The torque input signal is limited to 0:3 Nm. The adaptive JBC-
control begins with identifying a parametric model of the hub-angle. A time space
of 2.5 s has been specified with an expectation that, by the end of this period, all
identified parameters have converged. For better presentation purposes, the outputs
during the identification process are not plotted.
Figures 9.12 and 9.13 show the hub-angle response of the flexible manipulator.
Figure 9.12 shows the hub angle response without a payload at the end-point. The
first angle destination of 80 is achieved within 4.0 s, which is considered to be too
slow compared to that achieved with the fixed JBC control scheme. However,
better settling times are achieved for subsequent demanded angles after 10.0 s and
it can be shown from the graph that the average settling time is found as 2.0 s which
is 0.5 s slower compared to the settling time achieved with the fixed JBC control.
As noted, similar performances were achieved with 50 g payload. The settling time
for the two conditions is also found to be consistent and about 2.0 s. Thus, in terms
of positioning control performance, the developed adaptive JBC control system
performed very well with Ds ¼ 0:024.
The corresponding end-point residuals are shown in Figures 9.14 and 9.15. The
end-point residual represents the flexible motion of the end-point of the manip-
ulator. It can be noted that the resonance modes are at 12.15, 32.71 and 61.68 Hz
274
Flexible robot manipulators: modelling, simulation and control

0
5
10
15
20
25
30
Time (s)
10 20 30 40 50 60 70 80
Frequency (Hz)
0
–100
–50
0
50
100
Hub-angle (deg)
102
Magnitude (deg/Hz)
101
100
10–1
10–2
10–3
10–4
(a)
(b)
Dotted:- Demand 
Solid:- Actual
Figure 9.13
Hub-angle of the JBC-adaptive controlled system with Ds ¼ 0:024
and with 50 g payload: (a) time domain and (b) spectral density
–6 0
5
10
15
20
25
30
–4
–2
0
2
4
6
×10–3
Time (s)
End-point residuals (m)
(a)
0 10 20 30 40 50 60 70 80
10–3
Frequency (Hz)
Magnitude (m/Hz)
10–4
10–5
10–6
10–7
(b)
Figure 9.14
End-point residuals of the JBC-adaptive controlled system
with Ds ¼ 0:024 and without payload: (a) time domain and
(b) spectral density
0
5
10
15
20
25
30
–100
–50
0
50
100
Time (s)
Hub-angle (deg)
(a)
0
10 20 30 40 50 60 70 80
102
Frequency (Hz)
Magnitude (deg/Hz)
101
100
10–1
10–2
10–3
10–4
(b)
Dotted:- Demand 
Solid:- Actual
Figure 9.12
Hub angle of the JBC-adaptive controlled system with Ds ¼ 0.024
and without payload: (a) time domain and (b) spectral density
Collocated and non-collocated control
275

for the first, second and third modes, respectively. The levels of the end-point
vibration reach 3.5 mm for the first mode, 0.31 mm for the second mode and
0.052 mm for the third mode, and the movement itself tends to oscillate for a longer
time. It is noted that the end-point residuals reach their maximum level when the
given torque to the flexible manipulator changes sharply. This is an important
observation, which is useful for designing a suitable controller in minimising the
vibrations of the flexible manipulator. Furthermore, it is noted that the level of
vibration at the third mode is very small compared to that at the first and second
modes.
9.4.2
Case study 9.5: experimental exercises
The performance of the adaptive JBC controlled system with various loads is shown
in Figure 9.16. It can be seen that the flexible manipulator comfortably reaches the
demanded angular position with the adaptive JBC controller. A closer observation of
the system response with the fixed and adaptive JBC controllers reveals that both
perform poorly with heavier loads. The dead-zone compensator algorithm could not
bring the hub-angle to the demanded angle. The amount of the required compensation
torque which was set by the value of c (refer to the dead-zone compensator developed
in Chapter 2) was not sufficient to ensure the flexible arm with a heavier load to keep
moving until the demanded angle is achieved. The amount of c can be increased but
this will have a significant effect on system vibrations when the compensator is
activated. This requires further investigation to be carried out.
9.5
Adaptive collocated and non-collocated control
The combined collocated and non-collocated adaptive inverse-dynamic scheme is
described in Figure 9.17. The basic idea of adaptive inverse control is to drive the
flexible manipulator with an additional signal from a controller whose transfer
–6
–4
–2
0
2
4
6
End-point residuals (m)
0
5
10
15
20
25
30
×10–3
Time (s)
(a)
0
10
20 30
40
50 60 70 80
Frequency  (Hz)
Magnitude (m/Hz)
10–3
10–4
10–5
10–6
10–7
(b)
Figure 9.15
End-point residuals of the JBC-adaptive controlled system with
Ds ¼ 0:024 and with 50 g payload: (a) time domain and
(b) spectral density
276
Flexible robot manipulators: modelling, simulation and control

function is the inverse of that of the plant itself. Note that the adaptive inverse
control is active when the flexible manipulator is in motion, so that the computed
torque is used to reduce the end-point vibration. Since the plant is generally
unknown, it is necessary to adapt or adjust the parameters of the controller in order
to create the true plant inverse.
In implementing the adaptive inverse-dynamic control scheme, in addition to
the practical issues related to properties of the disturbance signal, robustness of the
estimation and control, system stability and processor-related issues such as word
length, speed and computational power, a problem commonly encountered is that
of instability of the system, especially, when the plant model is non-minimum
phase. Thus, to avoid this problem of instability either the estimated model can be
made minimum phase by reflecting its non-invertible zeros into the stability region
and using the resulting minimum phase model to design the controller or once the
controller has been designed the poles that are outside the stability region can be
reflected into the stability region. In this manner, a factor 1  pz1
ð
Þ corresponding
to a controller-pole/model-zero at z ¼ p, in the complex z-plane that is outside the
stability region can be reflected into the stability region by replacing the factor with
p  z1
ð
Þ. This strategy is used in obtaining the inverse-dynamic controller for
0
5
10
15
20
25
30
Time (s)
(a)
0
5
10
15
20
25
30
–80
–60
–40
–20
0
20
40
60
80
Time (s)
Hub-angle (deg)
–80
–60
–40
–20
0
20
40
60
80
Hub-angle (deg)
–80
–60
–40
–20
0
20
40
60
80
Hub-angle (deg)
–80
–60
–40
–20
0
20
40
60
80
Hub-angle (deg)
(b)
0
5
10
15
20
25
30
Time (s)
(c)
0
5
10
15
20
25
30
Time (s)
(d)
Figure 9.16
Performance of adaptive JBC-controlled system with various
payloads: (a) without payload, (b) 40 g payload, (c) 80 g payload
and (d) 100 g payload
Collocated and non-collocated control
277

realising the vibration control loop in the scheme shown in Figure 9.17, where the
high-pass filter is used to decouple the vibration control loop from the rigid body
motion control loop.
9.5.1
Case study 9.6: simulation exercises
Figures 9.18–9.20 show the performance of the adaptive inverse model control
scheme without a payload. It is noted that the system tracked the demanded hub
angle well. The level of vibration at the end-point, on the other hand, was reduced
by 13.6 and 6.1 dB at the first and second modes, respectively. Moreover, the input
torque to the system remained within practically safe limits.
Figures 19.21–9.23 show the performance of the adaptive inverse-model con-
trolled system with a payload of 50 g at the end-point. As noted in Figure 9.21,
vibration reduction with a 50 g payload at the end-point of the manipulator was
slightly less than that with no payload. It is noted that 5.6 dB reduction at the first
flexible mode and 5.4 dB reduction at the second mode was achieved.
9.5.2
Case study 9.7: experimental exercises
The adaptive inverse controller is implemented here and tested with the experi-
mental flexible manipulator. Due to limitations in the computing power of the
platform used, the JBC control loop was fixed and a second-order system was
chosen for the end-point acceleration model. This will allow only the first reso-
nance mode of the system to be identified. Thus, the adaptive inverse model is
–
+
Adaptive
inverse
controller
for vibration
reduction 
–
+
u(t)
Rf
Kpˆ
(1−z−1)
ˆ
ˆ + Kv
Kp
Σ
Flexible
manipulator
system 
Pole
assignment
synthesis 
Parameter
estimator 2
Performance
requirement 
Parameter
estimator 1
Adaptive
controller
for rigid
body
motion 
Σ
Model
inversion
High-pass
filter
a(t)
q(t)
ts
Figure 9.17
Adaptive collocated and non-collocated control scheme
278
Flexible robot manipulators: modelling, simulation and control

considered to control the end-point vibration up to the first mode. The end-point
acceleration measurements should not contain modes above the first resonance
frequency, so as to avoid observation spillover. A low-pass filter with 20 Hz cut-off
frequency was thus used to suppress the higher modes.
The performance of the adaptive inverse controlled system at the end-point
vibration reduction is shown in Figure 9.24. The dotted line shows the uncom-
pensated end-point acceleration and the solid line shows the compensated end-point
acceleration. It is noted that using the adaptive inverse controller the end-point
vibration was reduced by 11.48 dB for the first resonance mode. Figure 9.25 shows
the corresponding torque input to the system.
–1000
1
2
3
4
5
6
7
8
–80
–60
–40
–20
0
20
40
60
80
100
Time (s)
Hub-angle (deg)
Dotted:- Demand 
Solid:- Actual
(a)
10–5
0
5
10
15
20
25
30
35
40
Frequency (Hz)
Magnitude (deg/Hz)
102
101
100
10–1
10–2
10–3
10–4
Dotted:- Demand 
Solid:- Actual
(b)
Figure 9.18
Hub-angle response of the adaptive collocated and non-collocated
controlled system without a payload: (a) time domain and
(b) spectral density
Collocated and non-collocated control
279

9.6
Collocated and non-collocated feedback control with PD
and neuro-inverse-model
An alternative to the parametric approach described in the previous section, a
neuro-inverse modelling approach can be adopted to realise the inverse plant
model. This results in a neuro-inverse model control scheme. The neuro-controller
thus obtained is used along with the adaptive JBC control to achieve both trajectory
tracking and vibration suppression as illustrated in Figure 9.26.
0
1
2
3
4
5
6
7
8
–6
–4
–2
0
2
4
6
Time (s)
End-point acceleration (mm/s2)
Dotted:- Before control 
Solid:- After control
(a)
0
5
10
15
20
25
30
35
40
101
Frequency (Hz)
Magnitude (mm/Hz)
100
10–1
10–2
10–3
Dotted:- Before control 
Solid:- After control
(b)
Figure 9.19
End-point acceleration response of the adaptive collocated and
non-collocated controlled system without a payload: (a) time
domain and (b) spectral density
280
Flexible robot manipulators: modelling, simulation and control

It has been shown that an MLP neural network employing the backpropagation
algorithm can approximate a wide range of non-linear functions to any desired
accuracy (Blum and Li, 1991). Owing to these capabilities, the classic back-
propagation-based MLP NN combined with the learning abilities based on the
gradient descent method is used to realise the neuro-controller.
The backpropagation learning algorithm is commonly used with MLP
NNs. Derivation of the algorithm can be found in a number of books (Luo and
Unbehauen, 1997; Omatu et al., 1996). The standard backpropagation algorithm
–0.4
0
1
2
3
4
5
6
7
8
–0.3
–0.2
–0.1
0
0.1
0.2
0.3
0.4
Time (s)
Torque (Nm)
Dotted:- Before control 
Solid:- After control
(a)
(b)
10–5
0
5
10
15
20
25
30
35
40
10–1
Frequency (Hz)
Magnitude (Nm/Hz)
10–2
10–3
10–4
Dotted:- Before control
Solid:- After control
Figure 9.20
Input torque profile of the adaptive collocated and non-collocated
controlled system without a payload: (a) time domain and
(b) spectral density
Collocated and non-collocated control
281

may get stuck in a shallow local minimum as the algorithm is based on the steepest
descent (gradient) approach. The problem can be solved by using Marquardt–
Levenberg (Marquardt, 1963) modified version of backpropagation. While back-
propagation is a steepest descent algorithm, the Marquardt–Levenberg algorithm is
an approximation to Newton’s method. The Marquardt–Levenberg algorithm can
be considered a trust region modification to Gauss–Newton. The key step in
this algorithm is the computation of the Jacobian matrix. For the neural network
mapping problem the terms in the Jacobian matrix can be computed by a simple
modification to the backpropagation algorithm (Hagan and Menhaj, 1994).
0
1
2
3
4
5
6
7
8
–100
–80
–60
–40
–20
0
20
40
60
80
100
Time (s)
Hub-angle (deg)
Dotted:- Demand 
Solid:- Actual
(a)
0
5
10
15
20
25
30
35
40
Frequency (Hz)
Magnitude (deg/Hz)
102
101
100
10–1
10–2
10–3
10–4
10–5
Dotted:- Demand 
Solid:- Actual
(b)
Figure 9.21
Hub-angle response of the adaptive collocated and non-collocated
controlled system with 50 g payload: (a) time domain and
(b) spectral density
282
Flexible robot manipulators: modelling, simulation and control

Data is presented to the network using the NARX model structure. The model
is described as
^yðtÞ ¼ f ðyðt  1Þ; yðt  2Þ; . . . ; yðt  nyÞ; uðt  1Þ; uðt  2Þ; . . .; uðt  nuÞ


þ eðtÞ
(9.8)
where ^yðtÞis the output vector determined by the past values of the system input
vector and output vector with maximum lags nu and ny, respectively, f ðÞ is the
system mapping constructed through MLP NN Marquardt modified back-
propagation algorithm. The model is shown in Figure 9.27.
–60
1
2
3
4
5
6
7
8
–4
–2
0
2
4
6
Time (s)
End-point acceleration (mm/s2)
Dotted:- Before control 
Solid:- After control
(a)
0
5
10
15
20
25
30
35
40
Frequency (Hz)
Magnitude (mm/Hz)
101
100
10–1
10–2
10–3
Dotted:- Before control 
Solid:- After control
(b)
Figure 9.22
End-point acceleration response of the adaptive collocated and
non-collocated controlled system with 50 g payload: (a) time
domain and (b) spectral density
Collocated and non-collocated control
283

It is noted that the output of the model is a function of the plant input and
output. This implies that the network output consists of the one-time-step ahead
estimates of the system output. The training data is recorded from the simulation of
the adaptive JBC collocated control system. A section of the data is used for
training the network and the remaining portion of the data for validating and
testing the network. The model is further cross validated using a separate set of
data generated by adding a load to the manipulator. These steps ensure that the
model is generalising adequately the input–output behaviour of the real plant.
In this investigation the lagged inputs of the neuro model are the end-point
–0.40
1
2
3
4
5
6
7
8
–0.3
–0.2
–0.1
0
0.1
0.2
0.3
0.4
Time (s)
Torque (Nm)
Dotted:- Before control 
Solid:- After control
(a)
0
5
10
15
20
25
30
35
40
Frequency (Hz)
Magnitude (Nm/Hz)
10–1
10–2
10–3
10–4
10–5
Dotted:- Before control 
Solid:- After control
(b)
Figure 9.23
Input torque to the adaptive collocated and non-collocated
controlled system with 50 g payload: (a) time domain and
(b) spectral density
284
Flexible robot manipulators: modelling, simulation and control

acceleration output of the plant along with the torque applied to the system. The
output of the model is, thus, the torque. A high-pass filter of cut-off frequency
5 Hz is used to eliminate the rigid body response and the resulting torque con-
taining only the flexural motion response is subtracted from the input torque
applied to the system.
9.6.1
Case study 9.8: simulation exercises
The neuro-inverse controller was realised using the MATLAB–Simulink environ-
ment. The flexible manipulator is moved from one point to another as specified by
0
1
2
3
4
5
6
7
–0.08
–0.06
–0.04
–0.02
0
0.02
0.04
0.06
0.08
Time (s)
End-point acceleration (m/s2)
Dotted:- Before control 
Solid:- After control
(a)
0
10
20
30
40
50
60
70
80
Frequency (Hz)
Magnitude (m/s2/Hz)
10–5
10–4
10–3
10–2
10–1
Dotted:- Before control 
Solid:- After control
(b)
Figure 9.24
End-point acceleration response of the adaptive collocated
and non-collocated controlled system (experimental result):
(a) time domain and (b) spectral density
Collocated and non-collocated control
285

the angle of demand Rf using an adaptive JBC controller. The adaptive neuro-inverse
controller could not be realised in the simulation environment due to the discrepancy
between the time constraints required for training the network and the controller
response. Thus, the network was trained off-line and the trained network was utilised
to realise the neuro-inverse controller. The network was trained using 8,000 data
points. After training for 20 epochs, the neuro-inverse model was able to predict the
one-time-step-ahead values of the outputs of interest. The predictions and sum-
squared error are shown in Figure 9.28. As noted the neural network successfully
learned the inverse dynamics of the system.
0
1
2
3
4
5
6
7
–0.4
–0.3
–0.2
–0.1
0
0.1
0.2
0.3
0.4
Time (s)
Torque (Nm)
Dotted:- Before control 
Solid:- After control
(a)
0
10
20
30
40
50
60
70
80
Frequency (Hz)
Magnitude (Nm/Hz)
100
10–1
10–2
10–3
10–4
Dotted:- Before control 
Solid:- After control
(b)
Figure 9.25
Input torque of the adaptive collocated and non-collocated
controlled system (experimental result): (a) time domain
and (b) spectral density
286
Flexible robot manipulators: modelling, simulation and control

The performance of the neuro-inverse controller in suppressing the vibration of
the system without payload is shown in Figures 9.29 and 9.30. The controller is
designed here for vibration suppression up to the second vibration mode of the
system, as these contribute dominantly to the overall vibration of the system as
mentioned before. It is noted that the level of vibration in the end-point acceleration
was reduced by 3.65 and 5.11 dB for the first and second modes, respectively.
–
+
–
+
u(t)
Σ
Flexible
manipulator
system 
Pole
assignment
synthesis
Performance
requirement
Parameter
estimator
Σ
Neuro-
controller
High-pass
filter 
(1−z−1)
ˆ
ˆ + Kv
Kp
ts
Adaptive
inverse
controller
for
vibration
reduction 
Adaptive
controller
for rigid
body
motion 
a(t)
q(t)
Rf
Kpˆ
Figure 9.26
Adaptive neuro-inverse model control scheme
+
–
+
+
u(t)
Σ
y(t)
Flexible
manipulator
system
Σ
Training
mechanism
e(t)
yˆ(t)
z0
z−1
z–nu
z–ny
z–1
Neural
network
model
e(t)
Figure 9.27
MLP neural network with NARX model scheme
Collocated and non-collocated control
287

Figures 9.31 and 9.32 show the performance of the neuro-inverse controller in
suppressing the vibration of the system with a payload of 50 g. As noted, vibration
reduction with a payload of 50 g was slightly less than that with no payload. It is
noted that the reductions in the level of vibration were by 1.95 and 3.08 dB for the
first and second modes, respectively.
Time (s)
(a)
0
2
4
6
8
10
12
14
16
18
20
10−1
100
101
102
103
104
Number of training passes
Sum−squared error
(b)
0.4
0.3
0.2
0.1
0
Torque (Nm)
–0.1
–0.2
–0.3
–0.4 0
100
200
300
400
500
600
700
Actual output
Predicted output
Figure 9.28
Performance of the MLP neural network in inverse modelling
of the system: (a) the actual and the predicted output and
(b) the sum-squared error
288
Flexible robot manipulators: modelling, simulation and control

9.7
Summary
The developments of various classical and advanced controllers along with a neuro-
inverse model controller for vibration reduction during the motion of flexible
manipulators have been presented. While fixed controllers, such as in JBC control
and collocated and non-collocated hybrid control are capable of reducing vibration
100
80
60
40
20
0
–20
–40
–60
–80
–1000
5
10
15
0
10–3
10–2
10–1
100
101
102
5
10
15
20
25
Frequency (Hz)
(b)
Magnitude (m/s2/Hz)
30
35
40
45
50
20
25
30
Time (s)
(a)
End-point acceleration (mm/s2/Hz)
Figure 9.29
End-point acceleration without inverse neuro-control
(without payload): (a) time domain and (b) spectral density
Collocated and non-collocated control
289

to some extent, they are not capable of handling system uncertainties with a pay-
load change. An adaptive collocated control scheme with pole placement has been
shown, however, to perform well in positioning the manipulator to the angle of
demand. An adaptive hybrid collocated and non-collocated control scheme with
PID and RLS based inverse-control scheme has been shown to perform well in
reducing the vibration at the end-point with and without payload. The level of
100
80
60
40
20
0
–20
–40
–60
–80
–100
10–3
10–2
10–1
100
101
102
Magnitude (m/s2/Hz)
End-point acceleration (m/s2)
0
5
10
15
20
25
30
Time (s)
(a)
0
5
10
15
20
25
Frequency (Hz)
(b)
30
35
40
45
50
Figure 9.30
End-point acceleration with inverse neuro-control
(without payload): (a) time domain and (b) spectral density
290
Flexible robot manipulators: modelling, simulation and control

vibration reduction achieved with the neuro-controller is comparable to that
achieved with PID-based collocated and RLS-based inverse-modelling method.
However, a significant achievement of the neuro-inverse model approach is that the
problem of controller instability due to the non-minimum phase behaviour of the
plant model has been accounted for and resolved. This is important and provides
further opportunities for control systems of this nature.
100
80
60
40
20
0
–20
–40
–60
–80
–1000
5
10
15
0
10–3
10–2
10–1
100
101
102
5
10
15
20
25
Frequency (Hz)
(b)
Magnitude (m/s2/Hz)
30
35
40
45
50
20
25
30
Time (s)
(a)
End-point acceleration (m/s2)
Figure 9.31
End-point acceleration without inverse neuro-control
(with 50 g payload): (a) time domain and (b) spectral density
Collocated and non-collocated control
291

100
80
60
40
20
0
–20
–40
–60
–80
–1000
5
10
15
0
10–3
10–2
10–1
100
101
102
5
10
15
20
25
Frequency (Hz)
(b)
Magnitude (m/s2/Hz)
30
35
40
45
50
20
25
30
Time (s)
(a)
End-point acceleration (m/s2)
Figure 9.32
End-point acceleration with inverse neuro-control
(with 50 g payload): (a) time domain and (b) spectral density
292
Flexible robot manipulators: modelling, simulation and control

Chapter 10
Hybrid iterative learning control
This chapter presents hybrid iterative learning control schemes with acceleration
feedback for control of flexible manipulator systems. The learning schemes
considered are PD-type, PI-type and PID-type. A collocated PD controller is
considered for rigid-body motion control, and this is extended to incorporate non-
collocated and iterative learning control with acceleration feedback. The control
scheme is incorporated into a single-link flexible manipulator and a set of case
study exercises assessing the performance of the approach is presented and dis-
cussed. The tests include time-domain and frequency-domain analyses with and
without acceleration feedback in terms of amount of vibration reduction at reso-
nance modes, robustness and input tracking.
10.1
Introduction
Iterative learning control (ILC) is a method that incorporates errors, in a feedfor-
ward fashion, from the previous trial into the control signal for the current trial.
Such ideas were first presented by Arimoto et al. (1984) who proposed a learning
control scheme called the improvement process. Iterative control and repetitive
control have been occasionally used in the literature to mean exactly the same
thing. Moore (1993) describes iterative learning control as ‘‘an approach to
improving the transient response performance of systems that operate repetitively
over a fixed time interval’’. This is especially applicable to a system such as
industrial robot, which accomplishes most of its task repetitively over a period of
time. Since then several researchers have addressed robot control in combination
with ILC (Craig, 1988; Horowitz, 1993; Panzieri and Ulivi, 1995). The con-
vergence properties when using ILC form another very important aspect, addressed
in Arimoto et al. (1984), and further covered in many articles (Amann et al., 1995;
Gunnarsson and Norrlo¨f, 1997). Consider a robot arm in which a number of con-
ditions (such as varying the input parameters and disturbances) is imposed. The
arm’s performance, e.g., its trajectory control can be evaluated, changed or
improved iteratively by means of using the previous response. This is in turn
incorporated in the control strategy over the next cycle to improve its performance.
In this way, an ILC is established in which unlike a conventional adaptive control
approach, changing the commanded reference signal and not the controller itself
changes the control strategy.

In this chapter, ILC is studied as a complement to conventional feedforward
and feedback control and the effectiveness of the resulting scheme is assessed in
input tracking and vibration reduction in the flexible robot manipulator. As the
number of trials increases, the overall tracking error decreases beyond the perfor-
mance available with solely feedback. Rigorous stability theory for linear repetitive
systems has been developed by Rogers and Owens (1992), which provides a
general method for solving the problem of linear ILC systems. ILC analysis and
design methodologies for non-linear continuous-time systems have been developed
since the midst of the 1980s. One fundamental design takes the form of
ukþ1 ¼ uk þ UðIkÞ
(10.1)
where k is the number of operation cycles, ukðtÞ the control input and Ik the
available information at the kth cycle, including the output error, its derivatives as
well as integrals. Uð:Þ represents the update function and is usually a linear map of
the arguments. The learning process is done in an open-loop configuration as
shown in Figure 10.1.
The technique is shown to be able to overcome some of the traditional diffi-
culties associated with performance achievement of repetitive control systems
under classical feedback control laws. Specifically, an ILC scheme aims to improve
the transient response and the tracking performance of systems that execute the
same trajectory or operation over and over. Basically, an ILC scheme is designed in
such a way to be able to learn from the tracking errors at the previous operations in
order to perform progressively better with every new operation. Bondi et al. (1988)
simply set a sufficient amount of a linear output feedback which was shown to be
effective to ensure the tracking performance. This scheme assumes the presence of
ideal acceleration sensors and the problem risen from acceleration measurement
was argued. To exploit the advantage of current cycle feedback and avoid the
design task of feedforward control, many researchers have proposed the method of
the last cycle’s input being updated by only the measurement data from the current
cycle, which can be formalised in the updating law of the form (Chien and Liu,
1996; Kuc et al., 1992; Owens, 1993; Xu et al., 1995):
ukþ1 ¼ uk þ UðIkþ1Þ
(10.2)
Plant
U
–
+
yk(t)
uk+1(t)
uk(t)
yd(t)
ek(t)
Figure 10.1
Open-loop iterative control system
294
Flexible robot manipulators: modelling, simulation and control

The learning process is carried out in the way of dynamic feedback as shown
in Figure 10.2. In this research, this kind of learning algorithm is prefixed with
closed-loop control. It is known that closed-loop learning algorithms offer one
way for the control design with features such as wide ranges in choosing learning
gain and the improvement of convergence rate, in contrast to their open-loop
counterparts.
Arimoto provided analytical proof of the convergence, stability and robustness
of the algorithms (Arimoto et al., 1986). It was shown that as the number of
iterations kðtÞ increases, i.e., k ! 1 for t 2 0; tstop


where tstop is the stopping
simulation and experimental time, the tracking error, TEk converges to zero
(TEk ! 0). Most of the algorithms proposed by Arimoto and co-workers have the
(k þ 1)th input to a robot system consisting of a kth input plus an error increment
which may consist of a derivative difference between the kth motion trajectory and
the desired motion trajectory, an integral of the difference of the trajectory and/or
simply a constant coefficient.
Due to the explicit form of the mathematical expression which is analogous to
the description of classic controller, the algorithms can be described as the PD-, PI-
and PID-type learning algorithms (Arimoto et al., 1986). Some of these learning
control laws are mathematically expressed as follows:
ykþ1 ¼ yk þ ðF þ Gd=dtÞek
(10.3)
ykþ1 ¼ yk þ
F þ Y
ð
dt


ek
(10.4)
ykþ1 ¼ yk þ
F þ Y
ð
dt þ Gd=dt


ek
(10.5)
where ykþ1 is the next step value of the output, yk the current output value, ek the
current positional error input, ek ¼ ðxd  xkÞ, F; Y and G are suitable positive
definite constants or learning parameters.
Arimoto et al. (1986) used a linear PD feedback control law and applied the
learning algorithms by taking into account the positional error of the end-effector in
the process of describing a specific trajectory. A learning control scheme applied to
a robot manipulator is shown in Figure 10.3.
Plant
U
)
(t
uk
)
(t
yk
)
(t
yd
)
(t
ek
)
(
1 t
uk+
−
+
Figure 10.2
Closed-loop iterative learning control system
Hybrid iterative learning control
295

10.2
Iterative learning control schemes
A hybrid collocated PD control structure for control of rigid-body motion of the
flexible manipulator with ILC algorithms is presented in this section. The set-point
tracking error is detected and reduced using PD-type, PI-type and PID-type learn-
ing algorithms. This way, an ILC scheme is established in which unlike conven-
tional adaptive control approaches, changing the command reference signal and not
the controller itself changes the control strategy.
Figure 10.4 illustrates the basic idea of ILC. The input signal ykðtÞ and output
signal xkðtÞ are stored in the memory (some type of memory device is implicitly
assumed in the block labelled ‘‘learning controller’’). By using the desired output of
the system xdðtÞ and the actual output xkðtÞ, the performance error at kth trial can be
defined as:
ekðtÞ ¼ xdðtÞ  xkðtÞ
(10.6)
The aim of ILC is to iteratively compute a new compensation input signal
ykþ1ðtÞ, which is stored for use in the next trial. The next input command is chosen
Servo-system
for joint
actuators 
g(θ)
Manipulator
dynamics 
A
B
Γ
d/dt
+ 
e
–
+ 
+ 
+ 
+ 
+ 
+ 
From memory 
uk
uk+1
To memory 
θ
θd
e·
Figure 10.3
An iterative learning control scheme proposed by Arimoto et al.
(1986)
Learning
controller
xk(t)
ek(t)
yk(t)
yk+1(t)
xd(t)
_ 
+
Memory 
System
Memory
Figure 10.4
Iterative learning control configuration
296
Flexible robot manipulators: modelling, simulation and control

in such a way to guarantee that the performance error will be reduced in the next
trial. The important task in the design of a learning controller is to find an algorithm
for generating the next input in such a way that the performance error is reduced on
successive trials. In other words, the algorithm needs to lead to the convergence of
the error to minimum. Another consideration is that it is desirable to have the
convergence of the error without or at least with minimal knowledge of the model
of the system. Further, the algorithm should be independent of the functional form
of the desired response, xdðtÞ. Thus, the learning controller would ‘‘learn’’ the best
possible control signal for a particular desired output trajectory even if it is newly
introduced without the need to reconfigure the algorithm.
In this work learning algorithms of the following forms are considered:
ℏkþ1 ¼ ℏk þ ðF þ Gd=dtÞek
(10.7)
ℏkþ1 ¼ ℏk þ
F þ Y
ð
dt


ek
(10.8)
ℏkþ1 ¼ ℏk þ
F þ Y
ð
dt þ Gd=dt


ek
(10.9)
where ℏkþ1 is the next control signal, ℏk the current control signal, ek the current
error input, ek ¼ ðxd  xkÞ. F; G are suitable positive definite constants (or
learning parameters)
Block diagrams of the schemes are shown in Figures 10.5–10.7. A slightly
modified learning algorithm to suit the application is employed here. Since the
learning parameters in the form of a ‘‘proportional’’ constant F and a ‘‘derivative’’
constant G are used for the first case, (10.7), the algorithm is conveniently descri-
bed as a PD-type learning algorithm as shown in Figure 10.5, while for the second
(10.8) and third case (10.9), there is an ‘‘integral’’ constant Y. The algorithms are
thus described as PI-type and PID-type, respectively, and can be represented as in
Figures 10.6 and 10.7, respectively. These learning algorithms are implemented
together with collocated PD control as shown in Figures 10.8 and 10.9.
A flow chart showing the logical flow of the main control algorithm is illu-
strated in Figure 10.10.
Object
dynamic
Φ
Γ
dt
d
hk
+
ek
From 
memory 
+ 
+
+
To
memory 
xd
xk
–
k+1
h
ek˙
Figure 10.5
PD-type learning algorithm
Hybrid iterative learning control
297

Object
dynamic
Φ
Ψ
∫
ek
From
memory
+
+ 
+
To
memory
xk
ek
s
+ xd
–
hk
k+1
h
Figure 10.6
PI-type learning algorithm
Object
dynamic
Φ
Ψ
∫
ek
From
memory
+ 
+ 
+ 
+ 
To
memory
xk
ek
s
+
xd
–
hk
k+1
h
dt
d
Γ
ek˙
Figure 10.7
PID-type learning algorithm
Flexible
manipulator
system
Kp
Ac
ut
Kv
Rf
+ 
–
+ 
+ 
–
Iterative learning control
ek(t)
α(t)
θ(t)
θ˙ (t)
hk
Figure 10.8
The collocated PD with iterative learning control structure (PD-ILC)
298
Flexible robot manipulators: modelling, simulation and control

Flexible
manipulator
system
Kp
Ac
ut
Kv
Rf
+ 
+
+
–
–
Iterative learning control
ek(t)
α(t)
θ(t)
θ˙ (t)
hk+1
hk
Figure 10.9
The collocated PD with iterative learning control acceleration
feedback structure (PD-ILCAF)
hk+1
h Optimised
hk
Stop
hk+1 = hk + (Φ + Γd/dt)ek
Apply learning algorithm 
Yes 
No 
ek
ek+1
Reach
error
goal
Feed into
flexible
manipulator
dynamics
Begin the
flexible
manipulator
test
Initialise and
declare
variables
Start
Figure 10.10
The learning algorithm applied to the flexible manipulator
Hybrid iterative learning control
299

10.3
Simulation and experimental realisation of the
control schemes
In this section a set of case study exercises are presented describing the realisation
and the control schemes within simulation and experimental environments of the
single-link flexible manipulator system described in Chapter 2. A state-space
representation of the single-link flexible manipulator described in Chapter 4 is used
to simulate the system.
10.3.1
Case study 10.1: collocated PD and PD-type
learning control
The collocated PD control scheme shown in Figure 9.1 was considered in this case
study, and the control parameters Kp; Kv and motor amplifier gain Ac were
deduced, from root locus analysis of the system, as 0.64, 0.32 and 0.01 for the
simulated system set-up and as 2.4, 1.2 and 1 for the experimental set-up, respec-
tively. The manipulator was required in this exercise to follow the trajectory shown
in Figure 10.11. System responses were monitored for a duration of 12 s, and the
results are recorded with a sampling time of 0.2 ms in the simulation exercises and
1 ms in the experimental exercises. Figures 10.12–10.15 show the PD-controlled
system responses without payload. It is noted that the manipulator reached the
demanded hub-angle positions of 75
 without overshoot/undershoot in both
simulation and experimental tests.
A hybrid collocated PD-type control with iterative learning was designed
based on dynamic behaviour of the closed-loop system exhibited by the PD control.
The best optimum learning parameters were chosen for the flexible manipulator
control based on control of rigid body motion and vibration at the end-point.
80
60
40
20
0
–20
–40
–60
–80
0
2
4
6
Time (s)
Hub angle (deg)
8
10
12
Figure 10.11
The reference hub angle
300
Flexible robot manipulators: modelling, simulation and control

Figures 10.16 and 10.17 show the system performances with the iterative learning
PD-type control scheme. As noted the trajectory tracking of the flexible manip-
ulator gradually improved with the number of iterations showing progress in the
learning process. Moreover, observing the tracking error, a corresponding gradual
decrease in the error is noted. The learning algorithm thus forces the tracking error
to converge to zero over time. A similar trend is noted with reduction of vibration at
end-point of the manipulator as the number of iterations increases.
(a)
(b)
10–2
80
60
40
20
0
–20
–40
–60
–80
10–3
10–4
10–5
10–6
10–7
10–8
0
20
40
60
Frequency (Hz)
Magnitude (deg*deg/Hz)
Hub angle (deg)
80
100
0
2
4
6
8
Time (s)
10
12
PD
PD
Figure 10.12
Hub angle response of the simulated manipulator system without
payload: (a) time-domain and (b) spectral density
Hybrid iterative learning control
301

10.3.2
Case study 10.2: collocated PD and non-collocated
PID control
The collocated PD and non-collocated PID control scheme shown in Figure 9.4 was
considered in this case study exercise. The control parameters for the PD-control
loop were deduced through root locus analysis of the system. The control para-
meters for the PID-control loop, on the other hand, were tuned using the Ziegler–
Nichols method, where the proportional gain kp was initially tuned and the integral
gain ki and derivative gain kd were then calculated (Warwick, 1989). Accordingly,
the PID parameters kp, ki and kd were deduced as 0.1, 70 and 0.01, respectively.
To decouple the end-point measurement from the rigid body motion of the
(a)
(b)
102
–200
0
2
4
6
Time (s)
Frequency (Hz)
0
20
40
60
80
100
8
10
12
–150
–100
–50
0
50
100
150
200
PD
PD
101
100
10–1
10–2
10–3
10–4
End-point acceleration (m/s/s)
Magnitude ((m/s/s)*(m/s/s)/Hz)
Figure 10.13
End-point acceleration response of the simulated manipulator
system without payload: (a) time-domain and (b) spectral density
302
Flexible robot manipulators: modelling, simulation and control

manipulator, a fourth-order IIR Butterworth high-pass filter was utilised. In this
investigation, a high-pass filter with cut-off frequency of 5 Hz was designed as the
first vibration mode of the system with a payload was obtained as 10 Hz. To further
investigate, the trajectory tracking performance and vibration reduction with the
learning algorithms different loading conditions were considered. The learning
parameters F, G and Y were tuned heuristically over the simulation and experi-
mental period and were deduced as follows:
PD-type: F ¼ 0.001, G ¼ 0.0005
PI-type: F ¼ 0.001, Y ¼ 0.00001
PID-type: F ¼ 0.001, G ¼ 0.0008 and Y ¼ 0.00001
(a)
(b)
Hub angle (deg)
80
60
40
20
0
–20
–40
–60
–80
10–2
10–3
10–4
10–5
10–6
10–7
10–8
0
2
0
20
40
60
Frequency (Hz)
Magnitude (deg*deg/Hz)
80
100
4
6
Time (s)
PD
PD
8
10
12
Figure 10.14
Hub angle response of the experimental manipulator system without
payload: (a) time-domain and (b) spectral density
Hybrid iterative learning control
303

Figures 10.18–10.25 show the superimposed results of the collocated PD with
iterative learning algorithms of PD-type, PI-type and PID-type in terms of
responses of the manipulator. It is noted that the hybrid control scheme with PD-
type learning was capable of reducing the system vibration while maintaining good
input tracking performance. The hub-angle response was similar to that of the PD
controller. However, as demonstrated in the hub-angle response, hybrid control
with PD-type scheme exhibited a slow response, with a rise time in simulations of
0.682 s without payload and 0.658 s with 10 g payload. The response rise time with
(b)
1
0.5
0
–0.5
–1
10–1
10–2
10–3
2
4
6
8
Time (s)
PD
PD
(a)
Frequency (Hz)
End-point acceleration (m/s/s)
Magnitude ((m/s/s)*(m/s/s)/Hz)
10
12
0
20
40
60
80
100
Figure 10.15
End-point acceleration response of the experimental manipulator
system without payload: (a) time-domain and (b) spectral density
304
Flexible robot manipulators: modelling, simulation and control

PI-type learning scheme, on the other hand, was 0.659 s without payload and 0.643 s
with 10 g payload. Moreover, as demonstrated in the hub-angle responses with
PDPID and hybrid learning control, the minimum phase behaviour of the manip-
ulator has not been affected. In the same manner, with the experimental system, it is
noted that the rise time with both learning algorithms were the same without and
with 10 g payload. Furthermore, the system responses with hybrid control with
PD-type and PID-type learning were quite similar without and with 10 g payload.
Tables 10.1 and 10.2 show the percentage steady-state error in the hub-angle
response achieved with the control strategies in cases of without and with payload,
respectively. It is noted that relatively smaller steady-state errors were achieved
with the hybrid learning control approaches.
Figures 10.26 and 10.27 present the amount of end-point vibration reduction
achieved at the resonance modes of the closed-loop system with the hybrid iterative
learning control algorithms. It is noted that higher vibration reduction was achieved
with the hybrid PD-type learning control algorithm at the first resonance mode,
which is the most dominant mode. A significant amount of vibration reduction was
(a)
(b)
(c)
(d)
200
–80
0
2
4
Time (s)
Time (s)
6
8
–60
–40
–20
Hub angle (deg)
Error (angle)
End-point acceleration (m/s/s)
0
75
10
5
0
3
3.5
4
70
20
0
–20
3
3.2
3.4
65
3
3.5
20
Collocated PD
Iteration-3
Iteration-2
Iteration-1
Collocated PD
Iteration-3
Iteration-2
Iteration-1
Collocated PD
Iteration-3
Iteration-2
Iteration-1
Collocated PD
Iteration-3
Iteration-2
Iteration-1
40
60
80
50
0
–50
–100
–150
102
100.6
100.4
101
100
10–1
10–2
10–3
10–4
0
2
4
6
8
150
100
50
0
–50
–100
–150
–200
0
2
4
6
Time (s)
8
10
0
Magnitude ((m/s/s)*(m/s/s)Hz)
20
34
36
38
40
60
Frequency (Hz)
80
100
12
Figure 10.16
Simulated system response with collocated PD and PD-type
learning algorithm: (a) hub angle, (b) trajectory tracking error,
(c) end-point acceleration in time-domain and (d) spectral density
of end-point acceleration
Hybrid iterative learning control
305

(a)
(b)
(d)
80
60
100
50
0
–50
Error (angle)
Magnitude ((m/s/s)*(m/s/s)/Hz)
–100
–150
40
20
0
–20
–40
–60
1
0.5
0
–0.5
–1
2
0
20
40
60
Frequency (Hz)
80
100
4
6
8
10
–80
0
2
4
Time (s)
Time (s)
Time (s)
6
0
2
4
8
6
8
Hub angle (deg)
End-point acceleration (m/s/s)
Collocated PD
Iteration-3
Iteration-2
Iteration-1
Collocated PD
Iteration-3
Iteration-2
Iteration-1
Collocated PD
Iteration-3
Iteration-2
Iteration-1
Collocated PD
Iteration-3
Iteration-2
Iteration-1
10–1
10–2
10–2
10–3
10–4
10–5
68.8
0.8
0.6
0.4
0.2
0
–0.2
3.1
0.04
0.02
–0.02
2.2
2.25
2.3
62 64 66 68 70 72
0
3.15
3.2
3.25
68.6
68.4
68.2
2.87 2.88 2.89
(c)
Figure 10.17
Experimental system response with collocated PD and PD-type
learning algorithm: (a) hub angle, (b) trajectory tracking error,
(c) end-point acceleration in time-domain and (d) spectral density
of end-point acceleration
(a) 
(b)
80
10–1
10–2
10–3
10–4
10–5
10–6
60
40
20
–20
–40
–60
–800
2
4
6
Time (s)
8
0
20
40
60
Frequency (Hz)
80
100
10
12
0
PDPID
PD-type
PID-type
PI-type
PDPID
PD-type
PID-type
PI-type
Hub angle (deg)
Magnitude (deg*deg/Hz)
66
64
62
2.8
2.95
2.9
2.85
Figure 10.18
Hub angle response of the simulated manipulator system without
payload: (a) time-domain and (b) spectral density
306
Flexible robot manipulators: modelling, simulation and control

(a)
 
(b) 
 
200
150
100
50
0
End-point acceleration (m/s/s)
Magnitude ((m/s/s)*(m/s/s)/Hz)
–50
–100
24
50
0
–50
23
22.5
2.55 2.552
2.45 2.5 2.55
23.5
–150
–2000
2
4
6
Time (s)
Frequency (Hz)
8
10
12
0
20
40
60
80
100
PDPID
PD-type
PID-type
PI-type
PDPID
PD-type
PID-type
PI-type
102
101
12.9 13
13
14
13.1
10–1
10–2
10–3
10–4
100
Figure 10.19
End-point acceleration response of the simulated manipulator
system without payload: (a) time-domain and (b) spectral density
(a)
Hub angle (deg)
–80
–60
–40
–20
0
20
40
60
80
2.7
2.71
59.6
59.8
60
Time (s)
PDPID
PD-type
PI-type
PID-type
0
2
4
6
8
10
12
(b)
10–8
10–7
10–6
10–5
10–4
10–3
10–2
Magnitude (deg*deg/Hz)
Frequency (Hz)
0
20
40
60
80
16
14
12
10
8
102.3
102.4
100
PDPID
PD-type
PI-type
PID-type
Figure 10.20
Hub angle response of the experimental manipulator system without
payload: (a) time-domain and (b) spectral density
(a) 
(b)
2
End-point acceleration (m/s/s)
–1
–0.5
0
0.5
1
4
0.09
0.08
0.07
2.148 2.15 2.152 2.154 2.156 2.158
6
8
10
12
0
20
10
10–1.5
10–1.2
12
14
16
40
Frequency (Hz)
60
80
100
Time (s)
PDPID
PD-type
PI-type
PID-type
Magnitude ((m/s/s)*(m/s/s)/Hz)
10–5
10–4
10–3
10–1
10–2
PDPID
PD-type
PI-type
PID-type
Figure 10.21
End-point acceleration response of the experimental manipulator
system without payload: (a) time-domain and (b) spectral density
Hybrid iterative learning control
307

 
(a)
(b)
80
10–1
10–2
10–3
10–4
10–5
10–6
PDPID
PID-type
PD-type
PI-type
60
40
20
0
69
68
67
2.9 2.95
3
Hub angle (deg)
0
2
4
6
Time (s)
8
10
12
0
20
Magnitude (deg*deg/Hz)
40
Frequency (Hz)
60
80
PDPID
PD-type
PI-type
PID-type
100
–20
–40
–60
–80
Figure 10.22
Hub angle response of the simulated manipulator system with 10 g
payload: (a) time-domain and (b) spectral density
(a)
(b)
0
–200
–150
–100
–50
0
End-point acceleration (m/s/s)
50
100
150
200
2
14
15
40
20
0
–20
–40
13
2.765 2.77 2.775
2.75 2.8 2.85
4
6
Time (s)
8
10
12
0
20
40
Frequency (Hz)
60
80
100
PDPID
PD-type
PI-type
PID-type
PDPID
PD-type
PI-type
PID-type
10–1
100
Magnitude ((m/s/s)*(m/s/s)/Hz)
101
102
10–2
10–3
10–4
Figure 10.23
End-point acceleration response of the simulated manipulator
system with 10 g payload: (a) time-domain and (b) spectral density
(a)
(b)
80
62.5
62.4
62.3
62.2
2.76 2.765 2.77
30
10−3.2
10−3.6
35
10–2
10–3
10–4
10–5
10–6
10–7
10–8
60
40
20
Hub angle (deg)
Magnitude (deg*deg/Hz)
0
–20
–40
–60
–80
0
2
4
6
Time (s)
Frequency (Hz)
8
10
12
0
20
40
60
80
100
PDPID
PD-type
PI-type
PID-type
PDPID
PD-type
PI-type
PID-type
Figure 10.24
Hub angle response of the experimental manipulator system with
10 g payload: (a) time-domain and (b) spectral density
308
Flexible robot manipulators: modelling, simulation and control

(a)
(b)
0.6
0.4
0.2
0
–0.2
–0.4
–0.6
–0.8
2
4
6
Time (s)
Frequency (Hz)
8
10
12
0
20
30
35
40
40
60
80
100
2.155
0.06
0.05
0.04
2.16 2.165 2.17
10–1
10–2
10–3
10–2
10–4
10–5
Magnitude ((m/s/s)*(m/s/s)Hz)
End-point acceleration (m/s/s)
PDPID
PD-type
PI-type
PID-type
PDPID
PD-type
PI-type
PID-type
Figure 10.25
End-point acceleration response of the experimental manipulator
system with 10 g payload: (a) time-domain and (b) spectral density
Table 10.1
Steady-state error (%) of hub-angle response using control strategies
without payload
Control type
Response type
Steady-state error (%)
Simulation
Experimental
PD-collocated
Hub angle
0.010
0.10
PD-PID control
Hub angle
0.010
0.10
Hybrid PD-type iterative learning
Hub angle
0.007
0.05
Hybrid PI-type iterative learning
Hub angle
0.009
0.08
Hybrid PID-type iterative learning
Hub angle
0.008
0.06
Table 10.2
Steady-state error (%) of hub-angle response using control strategies
with 10 g payload
Control type
Response type
Steady-state error (%)
Simulation
Experimental
PD-collocated
Hub angle
0.05
0.3
PD-PID control
Hub angle
0.05
0.3
Hybrid PD-type iterative learning
Hub angle
0.02
0.1
Hybrid PI-type iterative learning
Hub angle
0.03
0.2
Hybrid PID-type iterative learning
Hub angle
0.02
0.15
Hybrid iterative learning control
309

achieved at the end-point of manipulator with these control schemes. Note that the
amount of vibration reduction at the end-point within the simulation and experi-
mental systems was different. This is due to the difference in the FE model (used in
simulations) and the parametric model (used in the experimentation) for controller
design.
10.3.3
Case study 10.3: hybrid ILC with end-point
acceleration feedback
The PD-ILC scheme was designed in this case study on the basis of dynamic
behaviour of the closed-loop system. The parameters of the learning algorithm,
0
20
40
60
Modes of vibration
Level of reduction (dB)
Mode 1
Mode 2
Mode 3
Mode 1
41.685
43.685
50.23
52.3
52.11
Mode 2
48.43
50.1
48.5
47.3
47.69
Mode 3
48.006
48.206
48.31
48.6
49.42
PD
PDPID
PD-
type
PI-type
PID-
type
(a)
(b)
0
20
40
60
Modes of vibration
Level of reduction (dB)
Mode 1
Mode 2
Mode 3
Mode 1
40.521
41.521
50
51.21
51.88
Mode 2
48.58
49.78
49.48
50.97
48.33
Mode 3
48.067
48.567
48.66
48.23
48.33
PD
PDPID
PD-
type
PI-type
PID-
type
Figure 10.26
Amount of end-point vibration reduction in simulations: (a) without
payload and (b) with 10 g payload
310
Flexible robot manipulators: modelling, simulation and control

F and G, were tuned in a heuristic manner over the simulation period and
experimental set-up. The parameters used for simulated and experimental systems
were deduced as F ¼ 0:0014, G ¼ 0:0011 for the simulation and F ¼ 0:0014,
G ¼ 0:0011 for the experimental set-ups. The corresponding responses of the
manipulator with various payloads are shown in Figures 10.28–10.39. It is noted
that the hybrid PD-ILC algorithm was capable of reducing the system vibration
while achieving better set-point tracking performance. The vibration of the sys-
tem settled within less than 4 s, which is much less than that achieved with PD
control.
0
5
10
15
20
25
Modes of vibration
Level of reduction (dB)
Mode 1
Mode 2
Mode 3
Mode 1
11.74
14.74
15.13
14.69
17.4
Mode 2
15
16.5
18.4
16.54
20
Mode 3
15.97
17.07
19.97
18.24
21.7
PD
PDPID
PD-
type
PI-type
PID-
type
(a)
0
5
10
15
20
Modes of vibration
Level of reduction (dB)
Mode 1
Mode 2
Mode 3
Mode 1
13.4
14.37
15.79
15.53
15.95
Mode 2
10.77
12.74
14.46
13.88
14.55
Mode 3
11.849
13.729
15.2
14.75
15.57
PD
PDPID
PD-
type
PI-type
PID-
type
(b)
Figure 10.27
Amount of end-point vibration reduction in experimentations:
(a) without payload and (b) with 10 g payload
Hybrid iterative learning control
311

(a)
(b)
80
60
40
20
0
–20
Hub angle (deg)
Magnitude (deg*deg/Hz)
–40
–60
–80
0
2
4
56
54
52
50
0.6 0.7 0.8
6
Time (s)
Frequency (Hz)
8
10
12
0
20
40
60
80
100
10–1
10–2
PD
PDILC
PDILCAF
PD
PDILC
PDILCAF
10–3
10–4
10–5
10–6
Figure 10.28
Hub angle response of the simulated manipulator system without
payload: (a) time-domain and (b) spectral density
(a)
(b)
200
150
100
End-point acceleration (m/s/s)
Magnitude ((m/s/s)*(m/s/s)/Hz)
50
0
–50
–100
–150
–200
0
2
4
6
Time (s)
Frequency (Hz)
8
50
–50
0
3
4
10
101
12
0
20
40
10
15
60
80
100
102
101
100
10–1
10–2
10–3
10–4
PD
PDILC
PDILCAF
PD
PDILC
PDILCAF
Figure 10.29
End-point acceleration response of the simulated manipulator
system without payload: (a) time-domain and (b) spectral density
(a)
(b)
80
60
40
20
–20
Hub angle (deg)
Magnitude (deg*deg/Hz)
–40
–60
–80
0
2
52
51
2.61 2.62 2.63
4
6
Time (s)
Frequency (Hz)
8
10
12
0
20
40
60
80
100
0
PD
PDILC
PDILCAF
PD
PDILC
PDILCAF
10–2
10–3
10–4
10–5
10–6
10–7
10–8
Figure 10.30
Hub angle response of the experimental manipulator system without
payload: (a) time-domain and (b) spectral density
312
Flexible robot manipulators: modelling, simulation and control

(a)
(b)
0.8
PD
PD
PDILC
PDILCAF
PDILC
PDILCAF
0.6
0.4
–0.2
0.2
–0.4
–0.6
–0.8
End-point acceleration (m/s/s)
2
4
0.02
0
–0.02
6.55 6.6 6.65 6.7 6.75
6
Time (s)
8
10
10–3
10–2
10–2
10–1
12
20
30
40
50
40
60
Frequency (Hz)
Magnitude ((m/s/s)*(m/s/s)/Hz)
80
100
0
Figure 10.31
End-point acceleration response of the experimental manipulator
system without payload: (a) time-domain and (b) spectral density
(a)
(b)
80
60
40
–20
20
–40
–60
–80
0
2
0.6
45
50
55
0.7
0.8
4
6
8
10
12
0
20
40
60
Frequency (Hz)
Time (s)
80
100
0
Hub angle (deg)
PD
PDILC
PDILCAF
PD
PDILC
PDILCAF
10–3
10–4
10–5
10–6
10–2
10–1
Magnitude (deg*deg/Hz)
Figure 10.32
Hub angle response of the simulated manipulator system with 10 g
payload: (a) time-domain and (b) spectral density
(a) 
(b)
200
150
100
50
–50
–100
–150
–200
End-point acceleration (m/s/s)
Magnitude ((m/s/s)*(m/s/s)/Hz)
0
2
4
6
Time (s)
8
10
2
1.5
–20
0
20
12
0
20
10
15
101
40
60
Frequency (Hz)
80
100
102
101
100
10–1
10–2
10–3
10–4
0
PD
PDILC
PDILCAF
PD
PDILC
PDILCAF
Figure 10.33
End-point acceleration response of the simulated manipulator
system with 10 g payload: (a) time-domain and (b) spectral density
Hybrid iterative learning control
313

(a)
(b)
80
60
40
20
0
Hub angle (deg)
Magnitude (deg*deg/Hz)
–20
–40
–60
–80
52
51
2.61 2.62 2.63
0
2
4
6
Time (s)
Frequency (Hz)
8
10
12
0
20
40
60
80
100
PD
PDILC
PDILCAF
PD
PDILC
PDILCAF
10–2
10–3
10–4
10–5
10–6
10–7
10–8
Figure 10.34
Hub angle response of the experimental manipulator system with
10 g payload: (a) time-domain and (b) spectral density
0.8
0.6
0.4
0.2
0
–0.2
End-point acceleration (m/s/s)
Magnitude ((m/s/s)*(m/s/s)/Hz)
–0.4
0.024
0.03
0.02
0.01
0
0.022
2.24
2.24
2.25
2.26 2.28
2.245
–0.6
–0.8
10–1
10–2
10–3
10–4
10–5
2
4
6
Time (s)
(a)
(b)
Frequency (Hz)
8
10
101.23
10−1.5
10−1.7
101.32
12
0
20
10
11
12
30
35
40
60
80
100
PD
PDILC
PDILCAF
PD
PDILC
PDILCAF
Figure 10.35
End-point acceleration response of the experimental manipulator
system with 10 g payload: (a) time-domain and (b) spectral density
(a)
(b)
80
10–1
10–2
10–3
10–4
10–5
10–6
60
40
20
0
–20
Hub angle (deg)
Magnitude (deg*deg/Hz)
–40
–60
–80
0
2
4
52.5
52
51.5
2.66 2.68 2.7 2.72
6
Time (s)
8
10
12
0
20
40
60
Frequency (Hz)
80
100
PD
PDILC
PDILCAF
PD
PDILC
PDILCAF
Figure 10.36
Hub angle response of the simulated manipulator system with 20 g
payload: (a) time-domain and (b) spectral density
314
Flexible robot manipulators: modelling, simulation and control

The performance of the system at input tracking control with hybrid PD-ILC
with acceleration feedback (PD-ILCAF) was similar to that with PD-ILC control.
Moreover, the controller was capable of handling vibration of the manipulator to
below 20 g payload, as significant reduction in system vibration was observed. This
is further evidenced in Figures 10.40–10.45, which show a summary of the amount
200
150
100
50
0
–50
–100
–150
–200
End–point acceleration (m/s/s)
0
2
4
6
Time (s)
(a)
8
10
4
3
–50
0
50
12
PD
PDILC
PDILCAF
PD
PDILC
PDILCAF
102
101
10–2
10–3
10–4
100
10–1
Magnitude ((m/s/s)*(m/s/s)/Hz)
0
20
100.43
100.37
40
31.5 32 32.5
60
80
100
Frequency (Hz)
(b)
Figure 10.37
End-point acceleration response of the simulated manipulator
system with 20 g payload: (a) time-domain and (b) spectral
density
Hybrid iterative learning control
315

of vibration reduction achieved at the resonance frequencies using the hybrid
iterative learning techniques in comparison to the bang–bang torque input for
simulation and experimental systems. In this study, the end-point acceleration
responses at the first three resonance models were examined. A comparison of the
simulated and experimental flexible manipulator responses and the amount of
vibration reduction using the techniques reveals that better performance in
80
60
40
20
0
–20
Hub angle (deg)
–40
–60
–80
0
2
51.4
51.35
51.3
2.642
2.643
PD
PDILC
PDILCAF
4
6
Time (s)
(a)
8
10
12
10–2
10–3
10–6
10–7
10–8
10–4
10–5
0
20
40
Frequency (Hz)
(b)
60
80
100
PD
PDILC
PDILCAF
Magnitude (deg*deg/Hz)
Figure 10.38
Hub angle response of the experimental manipulator system with
20 g payload: (a) time-domain and (b) spectral density
316
Flexible robot manipulators: modelling, simulation and control

reduction of vibration is achieved with the PD-ILCAF. Moreover, faster response
was obtained with PD-ILCAF technique as noted in the hub-angle responses. The
rise times of the simulated and experimental hub-angle responses using PD-ILCAF
techniques are summarised in Table 10.3.
Magnitude ((m/s/s)*(m/s/s)/Hz)
PD
PDILC
PDILCAF
0
20
8
10
12
56
58
60 62
64
66
40
Frequency (Hz)
(b)
60
80
100
10–1
10−1.5
10–2
10−1.8
10–2
10–3
10–4
10–5
0.4
0.2
0
End-point acceleration (m/s/s)
0.025
0.03
PD
PDILC
PDILCAF
0.02
0.01
0
–0.01
2.25
2.3
2.35
0.02
0.015
0.01
0.005
2.24
2.26
2
4
6
Time (s)
(a)
8
10
12
2.28
–0.4
–0.2
–0.6
Figure 10.39
End-point acceleration response of the experimental manipulator
system with 20 g payload: (a) time-domain and (b) spectral
density
Hybrid iterative learning control
317

0
10
20
30
40
50
60
PD
PDILC
PDILCAF
Modes of vibration
Level of reduction (dB)
Mode 1
Mode 2
Mode 3
Figure 10.40
Amount of vibration reduction in the simulated system with the
control techniques without payload
0
5
10
15
20
PD
PDILC
PDILCAF
Modes of vibration
Level of reduction (dB)
Mode 1
Mode 2
Mode 3
Figure 10.41
Amount of vibration reduction in the experimental system with the
control techniques without payload
0
10
20
30
40
50
60
PD
PDILC
PDILCAF
Modes of vibration
Level of reduction (dB)
Mode 1
Mode 2
Mode 3
Figure 10.42
Amount of vibration reduction in the simulated system with the
control techniques with 10 g payload
318
Flexible robot manipulators: modelling, simulation and control

0
2
4
6
8
10
12
14
16
PDILCAF
Modes of vibration
Level of reduction (dB)
Mode 1
Mode 2
Mode 3
PD
PDILC
Figure 10.43
Amount of vibration reduction in the experimental system with the
control techniques with 10 g payload
40
42
44
46
48
50
52
PD
PDILC
PDILCAF
Modes of vibration
Level of reduction (dB)
Mode 1
Mode 2
Mode 3
Figure 10.44
Amount of vibration reduction in the simulated system with the
control techniques with 20 g payload
0
5
10
15
20
PDILC
Modes of vibration
Level of reduction (dB)
Mode 1
Mode 2
Mode 3
PD
PDILCAF
Figure 10.45
Amount of vibration reduction in the experimental system with the
control techniques with 20 g payload
Hybrid iterative learning control
319

10.4
Summary
The development of hybrid learning control schemes for input tracking and vibra-
tion suppression of a flexible manipulator has been presented. The hybrid control
schemes have been developed based on collocated feedback controllers and non-
collocated PID control, and these are extended with iterative learning schemes of
PD-type, PI-type and PID-type for input tracking and vibration suppression of the
system. The hybrid control schemes with learning algorithms have been imple-
mented in case study exercises within simulation and experimental flexible
manipulator systems without and with payload. The performances of the control
schemes have been evaluated in terms of input tracking capability and vibration
suppression of the flexible manipulator. A comparative assessment of the hybrid
control schemes with iterative learning algorithms has shown that the collocated
PD control with PD-type learning performs better than PI-type and PDPID. The
hybrid ILC with acceleration feedback scheme, on the other hand, has achieved
acceptable performance in vibration suppression of the system.
Table 10.3
Rise time of the hub angle response with the control techniques at
different payloads
Control type
Payload (g)
Rise time (s)
Simulation
Experimentation
PD control
0
0.673
0.589
10
0.703
0.625
20
0.714
0.650
PD-ILC
0
0.640
0.598
10
0.676
0.622
20
0.716
0.654
PD-ILCAF
0
0.640
0.588
10
0.676
0.627
20
0.711
0.652
320
Flexible robot manipulators: modelling, simulation and control

Chapter 11
Fuzzy logic control
This chapter presents the concept of fuzzy sets and fuzzy logic control and how this
may be adopted in the control of flexible manipulator systems. An overview of fuzzy
logic control comprising the general structure and constituent components is pre-
sented. This is followed by a detailed outline of generic process of design of fuzzy
controllers. A set of case studies demonstrating the design and implementation of
fuzzy logic control types for flexible manipulator systems is then presented and
discussed.
11.1
Introduction
Most of the classical design methodologies such as Nyquist, Bode, state-space,
optimal control, root locus, H1 and m-analysis are based on assumptions that the
process is linear and stationary and hence is represented by a finite-dimensional
constant coefficient linear model. These methods do not suit complex systems well
because few of those represent uncertainty and incompleteness in process knowl-
edge or complexity in design. But the fact is the real world is too complex.
In particular, many industrial processes are highly non-linear and complex. As the
complexity of a system increases, quantitative analysis and precision become dif-
ficult. However, many processes that are non-linear, uncertain, incomplete or non-
stationary have subtle and interactive exchanges with the operating environment
and are controlled by skilled human operators successfully. Rather than mathe-
matically model the process, the human operator models the process in a heuristic
or experiential manner. It is evident that human knowledge is becoming more and
more important in control systems design. This experiential perspective in con-
troller design requires the acquisition of heuristic and qualitative, rather than
quantitative, knowledge or expertise from the human operator. During the past
several years, fuzzy control has emerged as one of the most active and powerful
areas for research in the application of such complex and real-world systems using
fuzzy set theory (Zadeh, 1965).
11.2
Fuzzy logic control structure
A fuzzy logic control (FLC) mechanism has the basic configuration as shown in
Figure 11.1.

11.2.1
Fuzzification
In fuzzy control applications, the observed data are usually crisp. Since the data
manipulation in an FLC is based on fuzzy sets, fuzzification is necessary. There-
fore, fuzzification is defined as a mapping from an observed input space to fuzzy
sets in certain input universe of discourse. This process consists of associating to
each fuzzy set a membership function. These functions can be thought of as maps
from the real numbers to the interval I ¼ 0; 1
½
. If there are n fuzzy sets associated
with a given quantity x 2 R, such n maps Fi : R ! I;
i ¼ 1; . . .; n are defined.
They determine to what extent the label associated with fuzzy set i characterizes the
current value of x. Fuzzification consists of associating a fuzzy vector with the
quantity x by passing x through all the membership functions providing grade of
membership functions:
F
:
R ! In
(11.1)
x !
p1
...
pn
2
64
3
75 ¼
m1ðxÞ
..
.
mnðxÞ
2
64
3
75
(11.2)
There are different kinds of membership functions encountered in the litera-
ture. The most common choices are triangular, trapezoidal, Gaussian and bell-
shaped membership functions shown in Figure 11.2.
11.2.2
Inference mechanism
Inference is the process of formulating a non-linear mapping from a given input
space to output space. The mapping then provides a basis from which decisions can
be taken. The process of fuzzy inference involves all the membership functions,
fuzzy logic operators and if–then rules.
There are three types of fuzzy inference that have been widely employed in
various control applications. The differences between these three fuzzy inferences,
also called fuzzy models, lie in the consequents of their fuzzy rules, aggregations
and defuzzification procedures. These fuzzy models are Mamdani, Sugeno and
Tsukamoto types. These are briefly described below.
Fuzzification
Inference
Defuzzification
Process
Rule-base
Set point
+
–
Output
Figure 11.1
A fuzzy logic control configuration
322
Flexible robot manipulators: modelling, simulation and control

11.2.2.1
Mamdani fuzzy models
The Mamdani-type fuzzy model was first proposed as the first attempt to control a
steam engine and boiler by a set of linguistic control rules obtained from experi-
enced human operator (Mamdani and Assilian, 1974). Figure 11.3 is an illustration
of a two-input single-output Mamdani-type fuzzy model.
Max–min is the most common rule of composition. In max–min rule of com-
position the inferred output of each rule is a fuzzy set chosen from the minimum
firing strength. In max-product rule of composition the inferred output of each rule
is a fuzzy set scaled down by its firing strength via algebraic product. A typical rule
in Mamdani-type fuzzy model with two-input single-output has the form:
If x is A and y is B then z is C
In Mamdani’s fuzzy model crisp values are used as inputs and defuzzification (see
Section 11.2.4) is used to convert a fuzzy set to a crisp value.
11.2.2.2
Sugeno fuzzy models
The Sugeno fuzzy model, also known as the TSK fuzzy model, was proposed by
Takagi, Sugeno and Kang (Sugeno and Kang, 1988; Takagi and Sugeno, 1985) in
an effort to develop a systematic approach to generate fuzzy rules from a given
input–output data set. A typical fuzzy rule in Sugeno fuzzy model has the form:
If x is A and y is B then z ¼ f x; y
ð
Þ
where A and B are fuzzy sets in the antecedent part, while z ¼ f x; y
ð
Þ is crisp
function in the consequent part. Usually f x; y
ð
Þ is polynomial in the input variables
x and y but it can be any function as long as it can appropriately describe the output
m(x)
m(x)
m(x)
s
m(x)
1
x
a
b
c
(a)
1
x
a
b
c
d
(b)
1
x
m
s
(c)
1
x
m
(d)
Figure 11.2
Commonly used membership functions: (a) triangular,
(b) trapezoidal, (c) Gaussian and (d) bell-shaped
Fuzzy logic control
323

of the model within the fuzzy region specified by the antecedent of the rule. When
f x; y
ð
Þ is a first-order polynomial, the resulting fuzzy inference system is called a
first-order Sugeno fuzzy model which was proposed in Sugeno and Kang (1988)
and Takagi and Sugeno (1985). When f x; y
ð
Þ is a constant, it is zero-order Sugeno
fuzzy model, which can be considered as a special case of Mamdani fuzzy model,
in which the consequent of each rule is specified by a fuzzy singleton or by a pre-
defuzzified consequent or a special case of Tsukamoto fuzzy model in which the
consequent of each rule is specified by an MF of a step function.
Moreover, a zero-order Sugeno fuzzy model is functionally equivalent to a
radial basis function network under certain minor constraints (Jang and Sun, 1993).
The output of zero-order Sugeno model is a smooth function of its input variables
as long as neighbouring MFs in the antecedent have enough overlap. In other
words, the overlap of MFs in the consequent of a Mamdani model does not have a
decisive effect on the smoothness; it is the overlap of the antecedent MFs that
determines the smoothness of the resulting input–output behaviour. The overall
output of a Sugeno fuzzy model is obtained via weighted average of the crisp
output, thus avoiding the time-consuming process of defuzzification required by
Mamdani model.
In practice, the weighted average operator is sometimes replaced with the
weighted sum operator to reduce computation further, especially in the training of a
fuzzy inference system. However, this simplification could lead to the loss of MF
linguistic meaning unless the sum of firing strengths is close to unity. Figure 11.4
illustrates a two-input single-output Sugeno fuzzy model.
m
m
m
m
x
x
y
y
A1
B1
C1
C1
C2
C2
B2
y1
x1
A2
Min
m
m
m
z
z
z
ZCOA
ZCOA
Max
m
m
m
z
z
z
Max
Product
Figure 11.3
A two-input single-output Mamdani fuzzy model
324
Flexible robot manipulators: modelling, simulation and control

11.2.2.3
Tsukamoto fuzzy models
In the Tsukamoto fuzzy model, the consequent of each fuzzy if–then rule is
represented by a fuzzy set with a monotonic MF (Tsukamoto, 1979). As a result,
the inferred output of each rule is defined as a crisp value included by the rule’s
firing strength. The overall output is taken as the weighted average of each rule’s
output. Since each rule infers a crisp output, the Tsukamoto fuzzy model aggregates
each rule’s output by the method of weighted average and thus avoids the time-
consuming process of defuzzification. Figure 11.5 illustrates a two-input single-
output Tsukamoto fuzzy model.
11.2.3
Rule-base
A fuzzy system is characterized by a set of linguistic statements based on expert
knowledge. The expert knowledge is usually in the form of if–then rules, which are
easily implemented by fuzzy conditional statements in fuzzy logic. The collection
of fuzzy rules that are expressed as fuzzy conditional statements forms the rule base
or the rule set of an FLC. The design parameters of the rule-base include:
●
Choice of process state and control output variables
●
Choice of the content of the rule antecedent and the rule-consequent
●
Choice of term-sets for the process state and control output variables
●
Derivation of the set of rules
If one has made the choice of designing a P-, PD-, PI- or PID-like fuzzy logic
controller, this already implies the choice of process state and control output vari-
ables, as well as the content of the rule antecedent and rule consequent for each of
m
m
m
m
x
x
y
y
x
y
A1
B1
B2
A2
Min or product
w1
w2
Weighted average
z1 = p1x + q1y + r1
z2 = p2x + q2y + r2
w1 + w2
w1z1 + w2z2
z =
Figure 11.4
A two-input single-output Sugeno fuzzy model
Fuzzy logic control
325

the rules. The process state variables representing the contents of the rule ante-
cedent (IF part of the rule) are selected as follows:
●
Error denoted by e
●
Change of error, denoted by De
●
Sum of error, denoted by Se
The control output (process input) variables representing the content of the rule-
consequent (THEN part of the rule) are selected as follows:
●
Control output, denoted by u
●
Change of control output Du
By analogy with the conventional control these are defined as:
●
e k
ð Þ ¼ yd  y k
ð Þ
●
De k
ð Þ ¼ e k
ð Þ  e k  1
ð
Þ
●
Pn
k¼1 e k
ð Þ ¼ Pn1
k¼1 e k
ð Þ þ e n
ð Þ
●
Du k
ð Þ ¼ u k
ð Þ  u k  1
ð
Þ
where yd is the desired output or set-point, y is the process output, k is the sampling
time and n is the maximum sample number.
11.2.3.1
P-like FLC
A conventional proportional (P)-like controller is expressed as:
u ¼ kPe k
ð Þ
(11.3)
m
m
m
m
x
x
y
y
Min or product
m
m
z
z
Weighted average
A1
B1
C1
C2
A2
x1
y1
z2
z1
B2
w1 + w2
w1z1 + w2z2
z =
Figure 11.5
A two-input single-output Tsukamoto fuzzy model
326
Flexible robot manipulators: modelling, simulation and control

where kP is the proportional gain coefficient. The rule for P-like controller is given
in the symbolic form as:
If e is Ai then u is Bj
where Ai and Bj, i; j ¼ 1; 2; . . .; are the linguistic variables. Function of the control
output for such single-input and single output (SISO) system is then as illustrated in
Figure 11.6.
11.2.3.2
PD-like FLC
A conventional proportional-derivative (PD)-like controller is expressed as:
u ¼ kPe k
ð Þ þ kDDe k
ð Þ
(11.4)
where kP and kD are the proportional and differential gain coefficients. The PD-like
FLC consists of rules of the form:
If e is Ai and De is Bj then u is Ck
where Ai, Bj and Ck are the linguistic variables and i ¼ 1; . . .; n1, j ¼ 1; . . .; n2, and
k ¼ 1; . . .; m.
11.2.3.3
PI-like FLC
A conventional proportional-integral (PI)-controller is described as:
u ¼ kPe þ kI
ð
edt
(11.5)
where kP and kI are the proportional and the integral gain coefficients. Taking the
derivative with respect to time of (11.5) yields
_u ¼ kP_e þ kIe
which can be written, in discrete form, as:
Du ¼ kPDe þ kIe
(11.6)
A1
A2
A3
A4
B4
B3
B2
B1
u
e
f(e)
Figure 11.6
Function of control output for a P-like SISO system
Fuzzy logic control
327

This yields incremental PI-like controller equation. The PI-like FLC rule base,
accordingly consists of rules of the form
If e is Ai and De is Bj then Du is Ck
where Ai, Bj and Ck are the linguistic variables and i ¼ 1; . . .; n1, j ¼ 1; . . .; n2 and
k ¼ 1; . . .; m. In this case, to obtain the value of the control output uðkÞ, the change
of control output DuðkÞ is added to uðk  1Þ such that:
uðkÞ ¼ DuðkÞ þ uðk  1Þ
(11.7)
An alternative representation of the PI-control is that of absolute integral PI-
like control as:
u ¼ kPe þ kI
X
e
(11.8)
where Se is the sum of error.
The absolute PI-like FLC consists of rules of the form
If e is Ai and P e is Bj then u is Ck
where Ai, Bj and Ck are the linguistic variables.
The controller output forms a surface for PD- and PI-type controllers. The
control surface of a typical two-input and single-output system is shown in
Figure 11.7, where X and Y represent inputs and Z represents the controller
output.
11.2.3.4
PID-like FLC
A further option to obtain a better performance in respect of rise time, settling time,
overshoot and steady-state error is to develop a proportional-integral-derivative
(PID)-like FLC. The basic idea of a PID controller is to choose the control law by
considering the error e, change of error De and sum (integral) of error P e, and thus
giving the control action as:
u ¼ kPe þ kDDe þ kI
X
e
(11.9)
Y
X
Z
Figure 11.7
Control surface of a two-input single-output system
328
Flexible robot manipulators: modelling, simulation and control

The fuzzy control rules corresponding to the PID-like control have the form
If e is Ai and De is Bj and P e is Ck then u is Dl
where i ¼ 1; . . .; n1, j ¼ 1; . . .; n2, k ¼ 1; . . .; n3 and l ¼ 1; . . .; m. Theoretically,
the number of rules to cover all possible input variations for a three-term fuzzy
controller is n1  n2  n3, where n1, n2 and n3 are the number of linguistic labels of
the three input variables.
11.2.4
Defuzzification
Defuzzification is a mapping from a space of fuzzy control actions defined over an
output universe of discourse into a space of non-fuzzy (crisp) control actions. In a
sense this is the inverse of the fuzzification even though mathematically the maps
need not be inverses of one another. In general, defuzzification can be viewed as a
map, DF, mapping a fuzzy vector xF with n fuzzy sets to a real number:
DF
:
In ! R
(11.10)
The defuzzification process makes explicit use of the membership functions Fi.
In general, there are five methods for defuzzifying a fuzzy set A of universe of
discourse Z. These are described below.
11.2.4.1
Centroid of area
The centroid of area ZCOA is defined as:
ZCOA ¼
P
z mAðzÞ  zdz
P
z mAðzÞ
(11.11)
where mAðzÞ is the aggregation output of membership functions. Centre of area is
the most widely used defuzzification method, which is reminiscent of the calcula-
tion of expected values of probability distributions.
11.2.4.2
Bisector of area
The bisector of area ZBOA represents a vertical line that divides the area into two
equal areas defined as:
ðzBOA
a
mAðzÞdz ¼
ðb
zBOA
mAðzÞdz
(11.12)
where a ¼ min zjz 2 Z
f
g and b ¼ max zjz 2 Z
f
g.
11.2.4.3
Mean of maximum
The mean of maximum ZMOM is the average of the maximizing z at which the
membership function reaches a maximum m:
zMOM ¼
Ð
Z0zdz
Ð
Z0dz
(11.13)
Fuzzy logic control
329

where Z0 ¼ zjmAðzÞ ¼ m
f
g. In particular, if mAðzÞ has a single maximum at z ¼ z*,
then ZMOM ¼ z*. Moreover, if mAðzÞ reaches its maximum at z 2 zleft; zright


, then
zMOM ¼ zleft þ zright


=2.
11.2.4.4
Smallest of maximum
The smallest of maximum ZSOM is the minimum in terms of magnitude of the
maximizing z.
11.2.4.5
Largest of maximum
The largest of maximum ZLOM is the maximum in terms of magnitude of the
maximizing z.
11.3
Design of fuzzy controller
Let x ¼ ðx1; . . .; xnÞ be a vector of process state variables, y the process output
variable and u the process input variable or control variable. The conventional
closed-loop model, when linearized around the set-point, is given by:
xðk þ 1Þ ¼ AxðkÞ þ BTuðkÞ
(11.14)
yðkÞ ¼ CTxðkÞ
(11.15)
uðkÞ ¼ KyðkÞ
(11.16)
where A is the process matrix, B and C are vectors and K is a scalar. The state
equations can be written as:
xðk þ 1Þ ¼ AxðkÞ þ BTuðkÞ
(11.17)
uðkÞ ¼ KCTxðkÞ
(11.18)
The fuzzy counterpart of the above model can be described as follows. Let the
linguistic variable xi (e.g., error, change of error) have the term set Xi (e.g., NB,
NS) and the membership function for Xi be denoted by ~X i. Thus, the linguistically
defined process state vector is denoted by ~X ¼ ð~X 1; . . .; ~X nÞ. Similarly, u takes
linguistically defined values U with membership functions ~U . Thus, the fuzzy
model of the closed-loop system can be described as:
~X ðk þ 1Þ ¼ ~X ðkÞ  ~U ðkÞ  ~A
(11.19)
where ~A is a fuzzy relation on X  U  X,  is the composition operation and ~K is
the controller which is a fuzzy relation on X  U representing the meaning of a set
of if–then rules of the form
if x1 is Xi and . . . xn is Xj then u is Uk.
330
Flexible robot manipulators: modelling, simulation and control

11.3.1
Input–output selection
The fuzzy controller to be designed is used to control the flexible-link manipulator
described in Chapter 2. Rather than going for development of a mathematical
model of the system with available states such as hub angle denoted as q, hub
velocity denoted as _q and end-point acceleration denoted as a, a fuzzy model using
the available states, namely, the hub angle error e, change of hub angle error De,
sum of hub angle error Se and torque u at each discrete-time step during the control
process, is developed
The states hub angle q, hub velocity _q and end-point acceleration a can be
measured directly from the system whereas error e, change of error De and sum of
Se can be derived from the hub angle (q) as:
e ¼ qd  q
(11.20)
De ¼ eðkÞ  eðk  1Þ
(11.21)
X
eðkÞ ¼
X
eðk  1Þ þ eðkÞ
(11.22)
where q is the measured hub angle and qd is the desired hub angle.
The fuzzy controller can be constructed using e, De and P e as inputs and
torque u as output depending on the type of controller, e.g., PD-, PI- or PID-type.
Figure 11.8 shows the block diagram of a typical three-input single-output fuzzy
controller, which will be investigated later in this chapter.
11.3.2
Choice of membership functions
Since the introduction of fuzzy sets by Zadeh, the main difficulties have been with
the meaning and measurement of membership functions as well as their extraction,
modification and adaptation to dynamically changing conditions. There is no
general rule for choice of membership functions and mainly depends on the pro-
blem domain. In general, using narrower membership functions results in faster
response but causes larger oscillations, overshoot and settling time. Gaussian and
bell-shaped membership functions involve calculation of exponential terms and
use substantial processing time. Trapezoidal membership functions have four
Set point
Rule base
Fuzzy
controller
qd
u
q
e
Δe
Σe
Flexible 
manipulator
q
q¢
a
Figure 11.8
Fuzzy controller for the flexible manipulator
Fuzzy logic control
331

parameters and can burden the optimization procedure. Triangular membership
functions are the best choice and used for simplicity.
11.3.3
Creation of rule-base
The fuzzy rules Ri must be completed and covered by fuzzy partitioning the input
space s1; s2; . . .; sn
ð
Þ. Figure 11.9 shows an input space partitioning for two-input
single-output systems. For example, the error, change of error and torque input of a
PD-like FLC for the flexible-link manipulator can be divided into four partitions,
i.e., partitioned into four fuzzy sets as:
Hub angle error E ¼ NB;
NS;
Z;
PS
f
g
Change of error CE ¼ NB;
NS;
Z;
PS
f
g
Torque U ¼ NB;
NS;
Z;
PS
f
g
where E, CE and U are the universe of discourse for error, change of error and
input torque, respectively, and the four fuzzy sets are negative big (NB), negative
small (NS), zero (Z) and positive small (PS). The nth rule for the two-input single-
output system is as:
Rn: IF (e is Ei) and (De is CEj) THEN (u is Uk)
where Rn, n ¼ 1; 2; . . .; 16, is the nth fuzzy rule. Ei, CEj and Uk, i ¼ 1; 2; . . .; 4,
j ¼ 1; 2; . . .; 4 and k ¼ 1; 2; . . .; 4, are primary fuzzy sets. There are 16 rules
obtained from this uniform partitioning. Initially, fuzzy rules are based on input–
output data and these rules are refined through trial and error.
11.4
Case studies
This section presents a set of case study exercises involving development of
PD-, PI- and PID-type fuzzy logic controllers and their implementation on the
single-link flexible manipulator described in Chapter 2. The fuzzy controllers are
S2
R1
R3
R4
R8
R12
R16
R2
R7
R11
R15
R6
R10
R14
R5
R9
R13
S1
Figure 11.9
Fuzzy input space partitioning
332
Flexible robot manipulators: modelling, simulation and control

investigated in respect of performance, input–output selection, rule-base construc-
tion and minimization. Although a PID-type fuzzy controller would be a better
choice, but may not be popular to use since it requires a time-consuming huge rule-
base to process. A trade-off, thus, may need to be found between PD-, PI- and PID-
type fuzzy controllers. The case studies in this section provide a comparative
assessment of the performance of each type of controller with different parameters
and rule-bases.
11.4.1
Case study 11.1: PD-like FLC
Although FLC exhibits superior applicability to traditional PID controllers and is
highly robust (Chou and Lu, 1993; Tang and Mulholland, 1987), PI-like and
PD-like fuzzy logic controllers possess mainly the same characteristics as tradi-
tional PI and PD controllers, respectively. That is, the PD-like FLC adds damping
and reliably predicts large overshoots, but does not improve the steady-state
response (Chao and Teng, 1997; Chung et al., 1998). In this section a PD-like FLC
with error and change of error as inputs, as in (11.4), is considered.
Figure 11.10 shows a block diagram of the PD-like FLC with error and change
of error as inputs. Triangular membership functions are chosen for inputs and
output. The membership functions for hub angle error, change of hub angle error
and torque input are shown in Figure 11.11. The universe of discourse for the hub
angle error, change in hub angle error are chosen as [36, þ36] degree, and
[25, þ25]. The universe of discourse of the output, i.e., input torque is chosen as
[3, þ3] volts. To construct a rule base, the hub angle error, change of angle error
and torque input are partitioned into five primary fuzzy sets as:
Hub angle error E ¼ NB;
NS;
Z;
PS;
PB
f
g
Change of hub angle error CE ¼
NB;
NS;
Z;
PS;
PB
f
g
Torque input U ¼ NB;
NS;
Z;
PS;
PB
f
g
where E, CE and U are the universes of discourse for hub angle error, change of
hub angle error and torque input, respectively. The nth rule of the rule base for the
FLC, with error and change of error as inputs, is given as:
Rn: IF (e is Ei) and (De is CEj) THEN (u is Uk)
Rulebase
Fuzzy
controller
Flexible
manipulator
Output
qd
Δe
e
q
u
Z–1
–
–
q
kc
+
Figure 11.10
PD-like FLC with hub angle error and change of hub angle error
Fuzzy logic control
333

where Rn, n ¼ 1; 2; . . .; Nmax, is the nth fuzzy rule. Ei, CEj and Uk, i ¼ 1; 2; . . .; 5,
j ¼ 1; 2; . . .; 5 and k ¼ 1; 2; . . .; 5, are primary fuzzy sets. The rule base is shown in
Table 11.1.
The membership functions defined in Figure 11.11 and the rule-base defined
in Table 11.1 form the control surface of the controller, which is shown in
Figure 11.12. The controller was applied to the single-link manipulator described in
Chapter 2. The performance of the system is shown in Figure 11.13. For a
demanded hub angle of 36, it reached a maximum overshoot of 50. The PD-type
FLC shows rapid response at transient state, i.e., a rise time of 17 time units and a
settling time of 44 time units. The performance of the PD-type FLC is very pro-
mising in respect of rise time, maximum overshoot and settling time, but it shows a
significant amount of steady-state error of 2.56.
11.4.2
Case study 11.2: PI-like FLC
It is well known that the PI-like FLC has good performance at the steady-state like
the traditional PI-type controllers. That is, the PI-like FLC reduces steady-state
(a)
–36
–20
–10
0
10
20
36
0
0.5
1
NB
NS
Z
PS
PB
–20
–10
0
10
20
0
0.5
1
NB
NS
Z
PS
PS
–25
25
(b)
–3
–2
–1
0
1
2
3
0
0.5
1
NB
NS
Z
PS
PB
(c)
Figure 11.11
Membership functions for inputs and output: (a) hub angle error,
(b) change of hub angle error and (c) torque input
334
Flexible robot manipulators: modelling, simulation and control

Table 11.1
FLC rule-base with hub angle error
and change of hub angle error
Change of
error
Error
NB
NS
Z
PS
PB
NB
PB
PB
PB
PS
Z
NS
PB
PS
PS
Z
NS
Z
PS
Z
Z
Z
NS
PS
PS
Z
NS
NS
NB
PB
Z
NS
NB
NB
NB
–20
0
20
–20
0
20
–1
0
1
Error
Change-error
Torque
Figure 11.12
Control surface of the FLC with hub-angle error and change of hub
angle error
0
10
20
30
40
50
Time units, 1 unit = 0.14 s
–10
0
10
20
30
40
50
Hub angle (deg)
Figure 11.13
Hub angle response PD-like fuzzy logic controlled system with hub-
angle error and change of hub angle error
Fuzzy logic control
335

error, but yields penalized rise time and settling time (Chao and Teng, 1997).
PI-type controllers give inevitable overshoot when attempting to reduce the rise
time, especially when a system of order higher than one is under consideration
(Lee, 1993). These undesirable characteristics of fuzzy PI controllers are caused by
integral action, even though the integrator is introduced to overcome the problem of
steady-state error.
In this case study an absolute PI-like FLC, described in (11.8), is considered.
A block diagram of the absolute PI-type FLC is shown in Figure 11.14. In this type,
the hub angle is measured from the system and the sum of hub angle error is
derived from the hub angle error. Triangular membership functions are chosen for
inputs and output. The membership functions for hub angle error, sum of hub angle
error and torque input are shown in Figure 11.15. The universes of discourse for
the hub angle error and sum of hub-angle error are chosen as [36, þ36] degree
and [150, þ150] degree/s. The universe of discourse of the output is chosen as
[3, þ3] volts.
To construct a rule base, the hub angle error, sum of hub angle error and torque
input are partitioned into five primary fuzzy sets as:
Hub angle error E ¼ NB;
NS;
Z;
PS;
PB
f
g
Sum of hub angle error S ¼
NB;
NS;
Z;
PS;
PB
f
g
Torque input U ¼ NB;
NS;
Z;
PS;
PB
f
g
where E, S and U are the universes of discourse for hub angle error, sum of hub
angle error and torque input, respectively.
The nth rule of the rule base for the FLC, with error and sum of error as inputs,
is given as:
Rn: IF (e is Ei) and (Se is Sj) THEN (u is Uk)
where Rn, n ¼ 1; 2; . . .; Nmax, is the nth fuzzy rule. Ei, Sj and Uk, i ¼ 1; 2; . . .; 5,
j ¼ 1; 2; . . .; 5 and k ¼ 1; 2; . . .; 5, are primary fuzzy sets. The rule base for the
PI-like controller is shown in Table 11.2.
A difficulty arises from deciding on the number of time units to go back in
calculating the sum in (11.8). Even the literature on conventional control theory
tends to be somewhat vague on this point, and many texts use an indefinite integral
Set point
Rule base
Fuzzy
controller
Flexible
manipulator
Output
qd
∑e
θ
θ
e
u
kc
–
+
Figure 11.14
Block diagram of a PI-like FLC
336
Flexible robot manipulators: modelling, simulation and control

–36
–20
–10
0
10
20
36
0
0.5
1
NB
NS
Z
PS
PB
(a)
–150
–10
0
10
150
0
0.5
1
NB
NS
Z
PS
PB
(b)
–3
–2
–1
0
1
2
3
0
0.5
1
NB
NS
Z
PS
PB
(c)
Figure 11.15
Membership functions for inputs and output: (a) hub angle error,
(b) change of hub angle error and (c) torque input
Table 11.2
FLC rule-base with hub angle error and
sum of hub angle error
Sum of
error
Error
NB
NS
Z
PS
PB
NB
PB
PB
PB
PS
Z
NS
PB
PS
Z
Z
NS
Z
PS
Z
Z
Z
NS
PS
PS
Z
Z
NS
NB
PB
Z
NS
NB
NB
NB
Fuzzy logic control
337

type of notation when representing the integral term, though obviously it is not to
be taken literally. The reason for this vagueness may be that traditionally in con-
ventional control, the integral term is approximated by analogue circuitry, and the
limits of integration cannot easily be stated precisely anyway (Lewis, 1997).
Experience with the system suggested using 10 time units to indicate recent
tendencies in the error, and experimentation demonstrated that this works very
well. It was also convenient to work with an average rather than a sum so that the
base value can be easily compared with the current error. Thus, the P e base value
is calculated as:
X
e 0
ð Þ ¼
X
0
k¼9
e k
ð Þ
(11.23)
The control surface of the controller with hub angle error and sum of hub angle
error is shown in Figure 11.16.
The absolute PI-like FLC was implemented on the single-link flexible
manipulator. The resulting response of the manipulator is shown in Figure 11.17.
As noted the system has shown a very good performance for a demanded hub angle
of 36 with a small steady-state error of 0.34. The system response had a rise
time of 12 time units, which is less than the rise time of PD-like FLC in Sec-
tion 11.4.1 and a larger overshoot of 66.45 with an excessive oscillation around
the set point. The oscillations caused a prolonged settling time of 85 time units.
11.4.3
Case study 11.3: integral wind-up action
The most dramatic achievement of the PI-like FLC is to allow major improvements
in steady-state accuracy with almost no negative impact on relative stability. Lack
of accuracy means that after the oscillations die out in the system and the controlled
variable stops at a more or less steady value, this value still may vary slightly from
the set point.
Because of the integral term in a controller of PI-type or PID-type, the integral
of even a fairly small error becomes of significant magnitude if the error continues
at the same value for a long period of time and if the interval of the integral is
suitably long. If the error is still oscillating, then positive and negative overshoots
almost exactly cancel each other in the integral term, so that it has no effect on the
system dynamics.
–36
0
36
–200
0
200
–3
0
3
Hub-angle error
Sum of error
Volts
Figure 11.16
Control surface of the controller with error and sum of error
338
Flexible robot manipulators: modelling, simulation and control

In a PI-like FLC, since there is a standing error, the integral term will continue
to grow, that is, the value of P e will increase at each sample time. Consequently,
the value of the manipulated variable will increase and the demanded output will
continually increase, but since this will already be a maximum, the demand cannot
be met. The value of P e will, however, still be large and will fall outside the
universe of discourse causing a static output. The effect is called integral wind-up
action and results in the controller having a very poor response.
Many techniques have been developed for dealing with the problems of inte-
gral wind-up and the main ones are:
●
Fixed limits on the integral term
●
Stop summation on saturation
●
Integral subtraction
●
Use of velocity algorithm
●
Analytical methods
These are briefly described below.
11.4.3.1
Fixed limits
Maximum and minimum values for the integral summation are set up and if the
term exceeds this value it is reset to the maximum or minimum as appropriate, that
is, if s n
ð Þmax then u n
ð Þmax and if s n
ð Þmin then u n
ð Þmin.
11.4.3.2
Stop summation
The value of the summation term is frozen when the control actuator saturates
and the integrator value remains constant while the actuator is in saturation.
The scheme can be implemented either by freezing the summation term when
0
20
40
60
80
100
–10
0
10
20
30
40
50
60
70
Time units, 1 unit = 0.14 s
Hub angle (deg)
Figure 11.17
Hub angle error with PI-like FLC
Fuzzy logic control
339

the manipulated variable falls outside the range u n
ð Þmin and u n
ð Þmax or by the use of
a digital input signal from the actuator which indicates that it is at a limit.
The stop summation gives a better response if the summation term is unfrozen
once the sign of the error changes. The sign of the error will change before the
actuator comes out of saturation.
11.4.3.3
Integral subtraction
This method decreases the summation term by an amount proportional to the dif-
ference between the calculated value of the manipulated variable and the maximum
value allowable. The summation term:
sðnÞ ¼ sðn  1Þ þ eðnÞ
is replaced by
sðnÞ ¼ sðn  1Þ þ eðnÞ  K uðnÞ  umax
½

The summation term is thus decreased by the excess actuation and increased by the
error. The rate of decrease is dependent on the choice of the parameter K. If K is not
properly chosen then a continual saturation/desaturation oscillation can occur.
The velocity algorithm and analytical approach are not suitable to prevent
integral wind-up for the fuzzy PI or PID controller and are not considered here.
Implementation of these algorithms can be found in Bennet (1994).
In this study, the error summation is calculated as follows:
(i)
Calculate PN
k¼1 e k
ð Þ ¼ P e k  1
ð
Þ þ e k
ð Þ
(ii)
If k ¼ N, stop summation
(iii)
Set P e ¼ 0
Experiments showed that the system works very well with N ¼ 10. The inte-
gral wind-up action for different values of N was investigated for absolute PI-like
FLC. Figure 11.18(a) shows the integral wind-up action for summations of 12
and 16. As noted, neither of these settled within this time interval. The overshoot
with N ¼ 16 was higher (72.12) than the overshoot with N ¼ 12 (61.73).
Figure 11.18(b) shows the integral wind-up action for N ¼ 10 and N ¼ 14. As can
be seen, the controller with N ¼ 10 achieved the set point at 82 time units with an
overshoot of 66.34, whereas the system response with the controller with N ¼ 14
did not settle within the time interval and it had larger overshoot of 71.23.
11.4.4
Case study 11.4: switching PD–PI-like FLC
As noted in the case studies presented above, generally PD-like two-term fuzzy
controllers usually cannot eliminate steady-state error and PI-like two-term fuzzy
controller can eliminate steady-state error but it has slower response due to the
summation (integral) term. In order to meet the design criteria of fast rise time,
minimum overshoot, shorter settling time and zero steady-state error, a further
option is to develop a PID-like FLC which enables fast rise time, smaller overshoot
and settling time from PD part and minimum steady-state error from PI part of
340
Flexible robot manipulators: modelling, simulation and control

the PID controller. The generic fuzzy PID-like controller is a four-dimensional
(three input–one output) fuzzy system.
Theoretically, the number of rules to cover all possible input variations for a
three-term fuzzy controller is n1  n2  n3, where n1, n2 and n3 are the number of
linguistic labels of the three input variables. For example, if n1 ¼ n2 ¼ n3 ¼ 7, then
0
10
20
30
40
50
60
70
80
90
100
–10
0
10
20
30
40
50
60
70
80
Time units, 1 unit = 0.14 s
Hub angle (deg)
Integral sum 12
Integral sum 16
Set point      
(a)
0
10
20
30
40
50
60
70
80
90
100
–10
0
10
20
30
40
50
60
70
80
Time units, 1 unit = 0.14 s
Hub angle (deg)
Integral sum 10
Integral sum 14
Set point      
(b)
Figure 11.18
Integral wind-up action in PI-like FLC: (a) integral wind-up action
with N greater than 10 and (b) integral wind-up action with N
around 10
Fuzzy logic control
341

the number of rules R ¼ 7  7  7 ¼ 343. In practical applications the design and
implementation of such a large rule base is a tedious task, and it will take a sub-
stantial amount of memory space and reasoning time. Because of a long reasoning
time the response of such a generic PID-like FLC will be too slow and hence not
suitable for the flexible-link manipulator where a fast response is desired.
A typical method for rule reduction in a fuzzy PID-like controller is to divide
the three-term PID controller into two separate fuzzy PD and fuzzy PI parts
(Chen and Linkens, 1998; Kwok et al., 1990; Zhang and Mizumoto, 1994).
This hybrid PD and PI controller with n linguistic labels in each input variable
requires only n  n þ n  n ¼ 2n2 rules. For example, for n ¼ 5 there will be
5  5 þ 5  5 ¼ 50 rules, which is significantly smaller than n3 rules (e.g.,
5  5  5 ¼ 125) required by a generic PID-like controller. This is the number of
rules processed during execution of the controller consuming a significant amount
of processing time and memory space. A further reduction is possible if the con-
troller is switched from PD-like to absolute PI-like after a certain period of time.
In that case only one set of rules, n  n rules for each type of controller, will be
executed at a time and thus the executed rules in a controller rule base will be
reduced to only 25 rules for 5 linguistic labels in each input variable. Having
been impressed with this idea, a switching type FLC is developed for the flexible-
link manipulator where a PD-like FLC is executed first and then switched to a
PI-like FLC. A block diagram of this switching PD–PI-like FLC is shown in
Figure 11.19.
The state variables used in PD–PI-like FLC are the same as in PD-like with
hub-angle error and change of hub-angle error and absolute PI-like FLC namely,
the hub-angle error, sum of hub-angle error and torque input. Actually the hub
angle is measured from the system and the other states namely the error, change in
error and sum of error are derived from it.
Triangular membership functions are chosen for inputs and output. The
membership functions for hub angle error, change of hub angle error, sum of hub
angle error and torque input are the same as in PD- and PI-like controllers shown in
Figures 11.11 and 11.15, respectively. The universes of discourse for the hub angle
error, change in hub angle error, sum of hub angle error and torque input are chosen
the same as in PD- and PI-like FLCs. To construct a rule base, the hub angle error,
Set point
Rule base
Fuzzy
controller
Flexible
manipulator
Output
Δe
∑e
θd
+
_
θ
θ
u
e
kc
Figure 11.19
Block diagram of a PD–PI-like FLC system
342
Flexible robot manipulators: modelling, simulation and control

change of hub angle error, sum of hub error and torque input are partitioned into
five primary fuzzy sets as
Hub angle error E ¼ NB;
NS;
Z;
PS;
PB
f
g
Change of hub angle error CE ¼
NB;
NS;
Z;
PS;
PB
f
g
Sum of hub angle error S ¼ NB;
NS;
Z;
PS;
PB
f
g
Torque input U ¼ NB;
NS;
Z;
PS;
PB
f
g
where E, CE, S and U are the universes of discourse for hub angle error, change of
hub angle error, sum of hub angle error and torque input, respectively.
The nth rule of the rule base for the PD-like FLC is given as:
Rn: IF (e is Ei) and (De is CEj) THEN (u is Uk)
where Rn, n ¼ 1; 2; . . .; 25, is the nth fuzzy rule. Ei, CEj and Uk, i ¼ 1; 2; . . .; 5,
j ¼ 1; 2; . . .; 5 and k ¼ 1; 2; . . .; 5, are primary fuzzy sets.
The nth rule of the rule base for the PI-like FLC is given as:
Rn: IF (e is Ei) and (Se is Sj) THEN (u is Uk)
where Rn, n ¼ 1; 2; . . .; Nmax, is the nth fuzzy rule. Ei, Sj and Uk, i ¼ 1; 2; . . .; 5,
j ¼ 1; 2; . . .; 5 and k ¼ 1; 2; . . .; 5, are primary fuzzy sets. The same rule bases
shown in Tables 11.1 and 11.2 are used for both PD-like and PI-like controllers.
The number of rules processed during execution of each controller is 25.
Determination of switching point is important and can result in a frustrating
bad performance if chosen at the wrong point. It is obvious that if the PI-like
controller is switched at the point of maximum overshoot of the PD-like FLC, it can
yield the best performance. But surprisingly, this does not give a good result.
Experimental investigations have shown that a switching point just before or after
the maximum overshoot gives better result than at the point of maximum overshoot
and a search method is suggested to find the switching point around the point of
maximum overshoot.
The switching PD–PI-type FLC was implemented and tested on the single-link
flexible manipulator in real-time. The performance of the PD–PI-type FLC was
verified for different switching points, control output scaling factors (kc) and dif-
ferent error summations (Se). Figure 11.20 shows the performance of the controller
for a demanded hub angle of 36 degrees with control output scaling factor kc ¼ 86
and switching point at 20 time units. As noted a high value of kc results in shorter
rise time (14 time units) causing large overshoot (53.63). An early switching point,
say 20 time units, cause undershoot, which shows dominance of the PI-type con-
troller over PD-type. A conclusion can be drawn from this experiment that an
earlier switching time than 20 time units will also cause the maximum overshoot to
increase and result in more oscillations around the set point.
Figure 11.21 shows the hub angle with different switching points at 23 time
units, 24 time units and 25 time units with scaling factor kc ¼ 76 for a set point of
36 degrees. A switching point at 24 time units, indicated by solid line with dots,
showed slightly larger overshoot and settling time and caused steady-state error to
increase. Switching points at 23 time units and 25 time units, indicated by solid line
Fuzzy logic control
343

with circles and solid line respectively, yielded better performance of the system.
These two curves have the same rise time of 15 time units, the same overshoot of
52.16 and negligible steady-state error. In these experiments scaling factors kp, kd
and ki were assumed unity.
0
5
10
15
20
25
30
35
40
45
–10
0
10
20
30
40
50
60
Hub angle (deg)
Time units, 1 unit = 0.14 s
Figure 11.20
Hub angle at switching point 20 time units and scaling factor
kc ¼ 86
0
5
10
15
20
25
30
35
40
45
–10
0
10
20
30
40
50
60
Time units, 1 unit = 0.14 s
Hub angle (deg)
Switching point 24
Switching point 23
Switching point 25
Set point         
Figure 11.21
Hub angle at different switching time with scaling factor kc ¼ 76
344
Flexible robot manipulators: modelling, simulation and control

The effect of integral wind-up action, described in Section 11.4.3, on the PD–
PI-type FLC was also verified for a demanded hub angle of 36 and switching point
at 17 time units for different values of N in the calculation of error summation.
Switching point was chosen 17 time units to see the integral effect on the over-
shoot, which was observed in Figure 11.21. Figure 11.22 shows the integral wind-
up action for N ¼ 15 (solid line with circle) and for N ¼ 5 (solid line). As noted, in
both cases there were large overshoots and small undershoot. The overshoot was
slightly larger (56.18) and settling time was longer (41 time units) for N ¼ 15 than
the overshoot (54.23) and settling time (37 time units) for N ¼ 5.
The integral wind-up actions shown in Figure 11.23 are for values of N ¼ 10
(solid line) and N ¼ 11 (solid line with circles). The overshoot and settling time for
N ¼ 10 achieved were 55.23 and 31 time units, respectively, whereas the over-
shoot and settling time for N ¼ 11 were 55.17 and 37 time units, respectively. The
experiment shows that the best result was achieved for N ¼ 10 in respect of
overshoot and settling time.
11.5
Summary
The general structure of fuzzy control and associated components have been dis-
cussed and described. Fuzzy logic controllers of P-, PI-, PD- and PID-like have
been presented and the design process of fuzzy logic controllers have been
described. An investigation into the development of PD-, PI- and PID-like FLC has
been carried out. It has been demonstrated that the system response with PD-like
FLC with error and change of error as inputs exhibit initial oscillatory behaviour,
fast rise time and small settling time. The PI-like FLC with error and sum of error
0
5
10
15
20
25
30
35
40
45
–10
0
10
20
30
40
50
60
Time units, 1 unit = 0.14 s
Hub angle (deg)
Integral sum 15
Integral sum 5 
Set point      
Figure 11.22
Integral wind-up action with N less than and greater than 10
Fuzzy logic control
345

as inputs, results in significant improvement in the steady-state error at the expense
of relatively larger overshoot and settling time.
A switching PD–PI-type FLC has been introduced on the basis of exploiting
advantages of each of the PD- and PI-type FLCs. It has been shown that switching
PD–PI-type FLC achieves improved performance and has some advantages over
the PD-, PI- and PID-type FLCs. Firstly, it improves the steady-state error caused
by PD-like FLC and reduces the rise time and settling time caused by PI-like FLC.
Secondly, it achieves a performance similar to a PID-like controller without using a
huge rule-base. With this strategy the number of rules during execution of the FLC
is reduced from n3 to only n2.
Integral wind-up action is an important issue, which causes a static output
degrading the system performance. This has been investigated with the switching
PD–PI-like FLC. It has been demonstrated that the adopted approach in calculating
the sum of error in PI-like FLC resulted improvement in the system performance.
0
5
10
15
20
25
30
35
40
45
–10
0
10
20
30
40
50
60
Time units, 1 unit = 0.14 s
Hub angle (deg)
Integral sum 11
Integral sum 10
Set point      
Figure 11.23
Integral wind-up action with N around 10
346
Flexible robot manipulators: modelling, simulation and control

Chapter 12
Multi-objective genetic algorithm control
This chapter presents the adoption of multi-objective evolutionary algorithms for
control of flexible manipulator systems. Fundamentals of multi-objective optimisation
and formulation of multi-objective optimisation algorithms are presented. The process
of developing a multi-objective genetic algorithm (MOGA) is presented and is used in
design of controllers for set-point tracking and end-point vibration control of a single-
link flexible manipulator. The potential of MOGA is utilised to develop an approach
for automatic design of multi-modal command shapers. Two detailed case studies
involving design of multi-modal command shapers for an open-loop case and for a
closed-loop case in combination with a proportional derivative (PD) control are
presented and their performances in set-point tracking and vibration reduction are
assessed and discussed.
12.1
Introduction
Evolutionary algorithms (EAs), in their original form, have been developed and used
with a view to optimising a single objective, either minimise or maximise depending on
the problem. Most of real-life problems are quite complex and demand for multiple
objectives that are often in conflict with one another to be optimised simultaneously.
Conventional EAs usually fail to provide suitable solutions in such cases. Many
researchers have attempted to find trade-off solutions within a single objective format by
manipulating objectives in different forms but their performances have not been satis-
factory. Retaining the basic evolutionary operators, the conventional algorithms have
been modified and enhanced so as to deal with more than one, often competing, objec-
tive. This has resulted in a new set of algorithms, commonly known as multi-objective
evolutionary algorithms (MOEAs). This chapter presents a brief overview of different
MOEAs, detailed description of multi-objective genetic algorithm (MOGA) and design
examples of controllers using MOGA for vibration control of flexible systems.
12.2
Multi-objective optimisation
Multi-objective optimisation is the search for feasible solutions to problems com-
prising multiple objectives which are often in conflict with one another. It can be
defined as the problem of finding a vector of decision variables which satisfy

constraints and optimise a vector function whose elements represent the objective
functions. A multi-objective optimisation problem can be expressed as
Find the vector x ¼ x1; x2; . . . ; xp


which satisfies
the m inequality constraints: giðxÞ  0, i ¼ 1; 2; . . . ; m,
the k equality constraints: hiðxÞ ¼ 0, i ¼ 1; 2; . . . ; k, and
optimises the vector function f ðxÞ ¼ f1ðxÞ; f2ðxÞ; . . . ; fnðxÞ
½
, where n is the
number of objectives to be considered.
x ¼ x1; x2; . . . ; xp


is the vector of decision variables, p is the number of decision
variables that comprise the complete solution. Practical problems are often char-
acterised by several competing objectives. The multi-objective optimisation
problem is, without loss of generality, the problem of simultaneously minimising
the n components fk; k ¼ 1; . . . ; n; of a possibly non-linear vector function f of a
general decision variable x in a universe U where f ðxÞ ¼ ð f1ðxÞ; . . . ; fnðxÞÞ. The
problem usually has no unique, perfect solution, but a set of non-dominated solu-
tions, known as the Pareto optimal set (Deb, 2001; Fonseca and Fleming, 1993).
Assuming a minimisation problem, dominance is defined as follows:
Definition 12.1 (Pareto dominance): A given vector u ¼ ðu1; . . . ; unÞ is said to
dominate v ¼ ðv1; . . . :; vnÞ if and only if u is partially less than v ðup < vÞ, i.e.,
8i 2 1; . . . ; n
f
g; ui  viL9i 2 1; . . . ; n
f
g ui < vi
Definition 12.2 (Pareto optimality): A solution Xu 2 U is said to be Pareto-
optimal if and only if there is no Xv 2 U for which v ¼ f ðXvÞ ¼ ðv1; . . . ; vnÞ
dominates u ¼ f ðXuÞ ¼ ðu1; . . . ; unÞ. Pareto optimal solutions are also called
efficient, non-dominated and non-inferior solutions. The corresponding objective
vectors are simply called non-dominated. The set of all non-dominated vectors is
known as the non-dominated set, or the trade-off surface, of the problem. In the
general case, it is impossible to find an analytical expression of the line or the
surface that contains these points.
12.3
Evolutionary multi-objective algorithms
David Schaffer is normally considered to be the first to have designed a multi-
objective evolutionary algorithm (MOEA) during the mid-1980s (Schaffer, 1985).
Schaffer’s approach, called vector evaluated genetic algorithm (VEGA), consists of
a simple genetic algorithm with a modified selection mechanism. At each genera-
tion, a number of sub-populations were generated by performing proportional
selection according to each objective function in turn. These sub-populations would
then be shuffled together to obtain a new population, on which the GA would apply
the crossover and mutation operators. The main problem of VEGA was its inability
to retain non-dominated solutions because of selection scheme of this approach.
Lexicographic ordering was another interesting choice. First, the most important
objective is chosen and optimised without considering any of the others. Then, the
348
Flexible robot manipulators: modelling, simulation and control

second objective is optimised without decreasing the quality of the solution obtained
for the first objective. This process is repeated for all the remaining objectives
(Gacoˆgne, 1997).
David E. Goldberg first suggested the incorporating the concept of Pareto
optimality into an evolutionary algorithm (Goldberg, 1989). Goldberg suggested
the use of non-dominated ranking and selection to move a population towards the
Pareto front in a multi-objective optimisation problem. Moreover, a niching
mechanism, namely, fitness sharing, was also suggested to maintain diversity
among the solutions and thus to keep the GA from converging to a single point on
the front.
Besides fitness sharing, several other approaches, such as adaptive grid, clus-
tering (Mostaghim and Teich, 2003), crowding (Deb et al., 2002), entropy (Kita
et al., 1996), geometrically based (Villalobos-Arias et al., 2005) and mating
restriction (Murata et al., 2001), have been proposed. Many researchers conceived
these ideas and developed several MOEAs over the years, the most representative
are briefly described below.
12.3.1
Non-dominated sorting genetic algorithm
The non-dominated sorting genetic algorithm (NSGA) is algorithm, proposed by
Srinivas and Deb (1994), is based on several layers of classifications of the indi-
viduals as suggested by Goldberg (1989). Before selection is performed, the
population is ranked on the basis of non-domination: all non-dominated individuals
are grouped into one category. Then another layer (front) of non-dominated indi-
viduals is formed excluding the individuals of first group and this process continues
until all individuals in the population are grouped. To maintain diversity in the
population, individuals on a group share their fitness (a predefined dummy number)
values and as a result, the fitness values of densely populated solutions are lowered.
Since individuals in the first front have the maximum fitness value, they always get
more copies than the rest of the population. Since Pareto ranking has to be repeated
over and over again, this algorithm is computationally expensive.
12.3.2
Niched-Pareto genetic algorithm
The niched-Pareto genetic algorithm (NPGA) has been proposed in Horn et al.
(1994). It uses a tournament selection scheme based on Pareto dominance. In this
algorithm, two individuals are randomly chosen and compared against a subset
from the entire population. If one of them is dominated (by the individuals ran-
domly chosen from the population) and the other is not, then the non-dominated
individual wins. All the other situations are considered a tie (i.e., both competitors
are either dominated or non-dominated). When there is a tie, the result of the
tournament is decided through fitness sharing.
12.3.3
Multi-objective genetic algorithm
The multi-objective genetic algorithm (MOGA), proposed by Fonseca and Fleming
(1993), introduced a rank-based fitness sharing technique. In MOGA, the rank of a
Multi-objective genetic algorithm control
349

certain individual corresponds to the number of chromosomes in the current
population by which it is dominated. All non-dominated individuals are assigned
the highest possible fitness value, while dominated ones are penalised according to
the population density of the corresponding region to which they belong. Some
comparative studies clearly reveal the superiority of MOGA over NPGA and
NSGA techniques.
12.3.4
Strength Pareto evolutionary algorithm
The strength Pareto evolutionary algorithm (SPEA) was introduced in Zitzler and
Thiele (1998, 1999). SPEA uses an archive, namely, external non-dominated set,
containing non-dominated solutions previously found. At each generation, non-
dominated individuals are copied to the external non-dominated set. For each
individual in this external set, a strength value is computed. This strength is similar
to the ranking value of MOGA. In SPEA, the fitness of each member of the current
population is computed according to the strengths of all external non-dominated
solutions that dominate it. Moreover, Pareto dominance is used to ensure that the
solutions are properly distributed along the Pareto front.
12.3.5
Strength Pareto evolutionary algorithm 2
SPEA2 has three main differences with respect to SPEA (Zitzler et al., 2001): (a) it
incorporates a fitness assignment strategy which takes into account for each indi-
vidual the number of individuals that dominates it and the number of individuals by
which it is dominated; (b) it uses a nearest neighbour density estimation technique;
and (c) it has an improved archiving method that ensures the preservation of
boundary solutions.
12.3.6
Pareto archived evolution strategy
The Pareto archived evolution strategy (PAES) was introduced in Knowles and
Corne (2000). PAES acts on a (1 þ 1) evolution strategy (i.e., a single parent that
generates a single child) in combination with an archive containing non-dominated
solutions previously found. This archive is used as a reference set against which
each individual is compared and thus implements the elitist mechanism. In order to
maintain diversity among the solutions, an adaptive grid-based technique is
employed in the objective domain.
12.3.7
Non-dominated sorting genetic algorithm II
The non-dominated sorting genetic algorithm (NSGA-II) is an improved version of
the NSGA (Deb et al., 2002). For each solution, the number of solutions dominates
it is calculated. The density of solutions surrounding a particular solution in the
population is estimated based on the crowding distance. During selection, the
NSGA-II uses a crowded-comparison operator which takes into consideration both
the non-domination rank of an individual in the population and its crowding dis-
tance. The elitist mechanism of the NSGA-II consists of combining the best parents
with the best offspring obtained instead of using an external memory.
350
Flexible robot manipulators: modelling, simulation and control

Fonseca and Fleming’s MOGA has proved to be very effective in different
fields of control engineering, such as system identification, modelling and controller
design, where several conflicting objectives are to be met (Chipperfield and Flem-
ing, 1996; Chipperfield et al., 2002b; Fonseca and Fleming, 1998b). Considering
the algorithm’s efficiency and effectiveness in different applications of control
engineering, the current research is motivated to utilise its potential in designing
controllers for flexible systems.
12.4
Multi-objective genetic algorithm
Fonseca and Fleming (1993) first used the non-dominated classification of a GA
population in MOGA. MOGA differs from standard GA in the way fitness is
assigned to each solution in the population. The rest of the algorithm (the stochastic
universal sampling, a single-point crossover and a bit-wise mutation) is the same as
that in a classical GA. The distinctive features of MOGA are briefly discussed here.
12.4.1
Evaluation and ranking
A randomly selected population is generated within a specific range. Each indivi-
dual of the population is evaluated with the objective functions. Then, each solution
is checked for its domination in the population and a rank value is assigned to it.
The ranking procedure can be explained by Figure 12.1. For a two-objective
minimisation problem, individuals that fall close to either the axes or origin of 2D
objective space are better than those away from axes or origin. In the objective
space, some individuals may be found, such as A, F, G, E falling on outer edge and
close to the axes or origin and with one objective better than other, and form a set
called non-dominated solution set or Pareto optimal set. Individuals A, E, F, G, etc.
G
F
E 
D
C
B
A
OBJ 1
O
B
J
2
19
6
7
6
6
4
2
3
3
3
1
Pareto optimal set
1
1
1
1
1
1
1
Non-dominated solutions
Dominated solutions
Figure 12.1
Dominated and non-dominated solutions with rank values
Multi-objective genetic algorithm control
351

are called non-dominated because no other individuals provide better performance
in the objective space. On the other hand, individuals, falling away from the edges,
such as B, C, D are called dominated solutions since many individuals provide
better performance than these in terms of both objectives.
For example, individual A dominates individual B, similarly B dominates C
and C dominates D in the objective space in terms of both objectives. Each indi-
vidual is ranked according to their degree of dominance, i.e., a number of indivi-
duals that are better than that in terms of both objectives. An individual’s ranking
equals the number of individuals better than that in terms of both objectives plus
one (see Figure 12.1). To a solution i, a rank ri is assigned as:
ri ¼ 1 þ ni
(12.1)
where ni is the number of solutions that dominates solution i. In this way, non-
dominated solutions are assigned a rank equal to 1, since no solution would dominate
a non-dominated solution in a population. The maximum rank of any solution cannot
be more than N (the population size). It is clear that the ranking procedure may not
assign all possible ranks (between 1 and N) to any population. For example, ranks 5,
8, 9, 10, 11, 12, 13, 14, 15, 16, 17 and 18 are missing in the population used in
Figure 12.1. Detail on ranking can be found in Fonseca (1995).
12.4.2
Fitness assignment
Once the ranking is performed, a raw fitness to a solution is assigned based on its
rank. To perform this, first the ranks are sorted in ascending order of magnitude.
Then a raw fitness is assigned to each solution by using a linear (or any other)
mapping function. Usually, the mapping function is chosen so as to assign fitness
between N (for the best-rank solution) and 1 (for the worst-rank solution). Thereafter,
solutions of each rank are considered at a time and their raw fitnesses are averaged.
This average fitness is then called the assigned fitness to each solution of the rank. In
this way, the total allocated raw fitness and total assigned fitness to each rank remain
identical. Moreover, the mapping and averaging procedure ensures that better ranked
solutions have higher assigned fitnesses. In this way, non-dominated solutions are
emphasised in a population (Fonseca and Fleming, 1998a).
12.4.3
Fitness sharing
In order to maintain diversity among non-dominated solutions, Fonseca and
Fleming (1993) have introduced niching among the solutions of each rank. The
distance metric is computed with the objective function values, instead of the
parameter values. Thus the normalised distance, dij, between any two solutions i
and j in a rank is calculated as:
dij ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
X
M
k¼1
f ið Þ
k
 f
j
ð Þ
k
f max
k
 f min
k
 
!2
v
u
u
t
(12.2)
where f max
k
and f min
k
are the maximum and minimum objective function values of
the kth objective. For the solution i, dij is computed for each solution j (including i)
352
Flexible robot manipulators: modelling, simulation and control

having the same rank. The sharing function value is calculated as follows, with
a ¼ 1.
sh dij


¼
1 
dij
ss

2
;
if dij  ss
0
otherwise
8
<
:
(12.3)
where ss is called niche radius. Then, the niche count is calculated by summing the
sharing function values:
nci ¼
X
m ri
ð Þ
j¼1
sh dij


(12.4)
where m ri
ð Þ is the number of solutions in the rank ri. The shared fitness value in
MOGA is calculated by dividing the fitness of a solution by its niche count.
Although all solutions of any particular rank have the identical fitness, the shared
fitness value of a solution residing in a less-crowded region has a better shared
fitness. This produces a large selection pressure for poorly represented solutions
in any rank. Dividing the assigned fitness values by the niche count (always equal
to or greater than one) reduces the fitness of each solution. In order to keep
the average fitness of the solution in a rank the same as that before sharing, these
fitness values are scaled so that their average shared fitness value is the same as
the average assigned fitness value. An identical procedure is then executed on
the solutions of the next rank and this procedure continues for the remaining
ranks. The fitness assignment procedure can be shown in the following steps
(Deb, 2001):
Step 1: Choose a ss. Initialise m ri
ð Þ ¼ 0 for all possible ranks j ¼ 1; . . . ; N. Set
solution counter i ¼ 1.
Step 2: Calculate the number of solutions (ni) that dominate solution i. Com-
pute the rank of the ith solution as ri ¼ 1 þ ni. Increment the count for the
number of solutions in rank ri by one, i.e., m ri
ð Þ ¼ m ri
ð Þ þ 1.
Step 3: Identify the maximum rank r by checking the largest ri which has
m ri
ð Þ > 0. The sorting according to the rank and fitness-averaging yields the
following assignment of the average fitness to any solution i ¼ 1; 2; . . . ; N:
Fi ¼ N 
X
ri1
k¼1
m k
ð Þ  0:5 m ri
ð Þ  1
ð
Þ
(12.5)
To each solution i with rank ri ¼ 1, the above equation assigns a fitness equal
to Fi ¼ N  0:5 m 1
ð Þ  1
ð
Þ, which is the average value of m 1
ð Þ consecutive
integers from N to N  0:5 m 1
ð Þ þ 1
ð
Þ. Set a rank counter r ¼ 1.
Step 4: For each solution i in rank r, calculate the niche count nci with other
solutions (m rð Þof them) of the same rank by using (12.4). Calculate the
shared fitness using:
F0
j ¼ Fj=ncj
(12.6)
Multi-objective genetic algorithm control
353

To preserve the same average fitness, scale the shared fitness as:
F0
j  Fjm rð Þ
P
m rð Þ
k¼1
F0
k
F0
j
(12.7)
Step 5: If r < r, increment r by one and go to step 4. Otherwise, the process is
complete.
The stochastic universal sampling method is then used to select the best indi-
viduals. However, mating restrictions are employed in order to protect genetic
drifts and premature convergence. GA operators, namely crossover and mutation
are employed on the selected individuals to create a new population (Goldberg,
1989). The algorithm flow chart is presented in Figure 12.2.
START
INITIALISE POPULATION,
MAXGEN.
EVALUATE OBJECTIVE
FUNCTIONS
 Gen >
MAXGEN?
Yes
FIND NON-DOMINATED
SOLUTIONS
STOP
RANKING
FITNESS ESTIMATION
SELECTION
PAIR-UP
RECOMBINATION
MUTATION
No
OUTPUT
Figure 12.2
Flow chart of algorithm (MOGA process)
354
Flexible robot manipulators: modelling, simulation and control

12.5
Vibration control of single-link flexible manipulator
To reduce end-point vibration of a single-link flexible manipulator without sacri-
ficing its speed of response is a very challenging task since the faster the motion,
the larger the level of vibration. The command shaping technique in practice causes
delay in system’s response while it reduces vibration and the amount of reduction
in vibration and the rise time are found to be in conflict with one another. More-
over, system performance indicators, such as overshoot, rise time, settling time,
end-point vibration, are found to be in conflict with one another for a desired level
of performance due to the construction and mode of operation of a flexible
manipulator system. Although a large amount of work has been done on command
shapers, both on design techniques and issues relating to practical applications, the
literature is very limited in addressing the conflicting features in system’s response
and user’s demand while designing command shapers.
12.6
Controller design using MOGA
A set of controller design case studies are presented in subsequent sections in this
chapter demonstrating the design process using MOGA for application to control of
the flexible manipulator described in Chapter 2. A finite element simulation of the
flexible manipulator represented in state–space form is used in these case studies to
test the control designs. The open-loop hub angle response of the flexible manip-
ulator is shown in Figure 12.3. To highlight the oscillation or flexible motion, part
of the hub angle response has been enlarged and presented in Figure 12.4.
At first, a multi-modal command shaping is designed for an open-loop flexible
manipulator system using MOGA to reduce end-point vibration without sacrificing
0
0
200
400
600
800
1
2
3
Time (s)
Hub angle (°)
4
5
Figure 12.3
Hub angle response to bang–bang input
Multi-objective genetic algorithm control
355

the system’s speed of response. Thus, two conflicting objectives, namely, end-point
acceleration and speed of response, are considered in the MOGA optimisation
process.
Secondly, a multi-modal command shaping is designed for a closed-loop
flexible manipulator system to reduce end-point vibration without significantly
affecting the system’s response due to closed-loop controller alone. Shaping tech-
niques, as discussed in Chapter 8, are mainly of three types, namely, ZV, ZVD and
EI, as far as the robustness and required amount of vibration reduction are
concerned. As part of the design procedure, a combined approach is introduced,
both selecting and designing multi-modal command shaping for a closed-loop
flexible manipulator system.
12.7
Case study 12.1: multi-modal command shaping for
open-loop control
For a command generator to work successfully on a real system, it must be robust to
errors in the system model. Moreover, it should work with multi-modal systems
having non-linearity. Figure 12.5 shows the time domain representation of open
loop end-point acceleration response of the system to a bang–bang input. It
is evident from the frequency domain representation of the end-point response
(Figure 12.6) that, within the range of frequencies shown, the system has three
resonance modes approximately at 13, 35 and 65 Hz which cause most of
the vibration.
From the open-loop response, it is generally assumed that multi-modal
(three-modes) approach might be suitable for the system to reduce vibration at the
2.5
884
885
886
887
3
3.5
4
Time (s)
Hub angle (°)
4.5
5
Figure 12.4
Hub angle response to bang–bang input (enlarged)
356
Flexible robot manipulators: modelling, simulation and control

end-point. For a three-mode command shaper, an impulse sequence for each
vibration mode can be designed independently. Then the impulse sequences can be
convolved together to form a sequence of impulses which in turn are convolved
with a desired reference input to form the shaped signal (Mohamed and Tokhi,
2002; Singhose et al., 1997). This shaped signal is directly to the system. The
detailed procedure for generating ZV-based multi-modal (three-modes) command
shaper is shown in Figure 12.7.
0
–1
–2
–3
–4
0
3
2
1
1
2
3
Time (s)
mm/s2
4
5
Figure 12.5
End-point acceleration for bang–bang input
102
100
10–2
10–4
20
40
60
Frequency (Hz)
Mode 1 (13 Hz)
Mode 2 (35 Hz)
Mode 3 (65 Hz)
Power spectral density
80
100
Figure 12.6
Frequency domain open-loop end-point acceleration
Multi-objective genetic algorithm control
357

12.7.1
Design problem and MOGA-based command
shaping technique
In this section, a MOGA-based multi-mode command shaper is introduced (see
Figure 12.8) to reduce end-point vibration as well as to meet several design
objectives and associated goals as demanded in a practical application. Firstly,
three multi-modal command shapers based on ZV, ZVD and EI techniques are
designed using MOGA. Utilising the rank-based fitness sharing technique, MOGA
results in a wide range of solutions for each type that trades-off among the con-
flicting objectives.
The design objectives were chosen arbitrarily, as shown in Table 12.1. These
were obtained from hub angle and end-point acceleration responses of the system
(see Figures 12.3 and 12.5).
Stability: In this work, open loop control strategy is used so as to reduce
vibration at the end-point of the manipulator. A bang–bang input is used to
position the flexible link at a desired location.
Rise time for hub angle response: This is required to be no more than 7.5%
of the time taken by the open-loop system to reach 90% of the steady state
(SS), following the accelerating phase (positive step) of bang–bang input at
motor input.
Time
∆1
Desired
reference
signal
Impulses
(mode 1)
t1
Impulses
(mode 2)
Impulses
(mode 3)
A1
Convolution
Shaped signal
New reference
Convolution
 Composite
Convolution
Composite
∆2
∆3
d12
d23
t1
t2
t2
t3
t3
A1
A2
A2
A3
A3
Figure 12.7
Flow diagram of ZV-based multi-modal command shaper
358
Flexible robot manipulators: modelling, simulation and control

Maximum peak-peak oscillation from steady level at hub angle response: The
maximum peak-to-peak oscillation from steady-state value gives a quanti-
tative indication of flexible motion with the rig structure and it should be as
small as possible. Here the goal value is chosen 80% reduction in compar-
ison with the system response to unshaped bang–bang input.
Settling time for hub angle response: The time taken by the system to stay
within 2% of the steady-state. The goal was set as  2.5 s, i.e., 35% less
than the system’s response with unshaped bang–bang input.
Root mean squared value of end-point acceleration: This is, to some extent, a
quantitative measure of overall residual vibration at the end-point of the
flexible manipulator. The end-point acceleration is recorded over whole
duration of the excitation and the RMS value is evaluated. This can provide an
effective measure to calculate overall vibration at the end-point of the rig. The
goal value is chosen as 70% reduction in comparison to the system’s response
to unshaped bang–bang input.
EPA
 HV
REF
SIG
(bang–
bang) 
Input
shaper
Objective-2
MOGA
optimisation
HA
Flexible
manipulator
system
(SIMO)
Filter
Filter
Filter
Objective-1
Figure 12.8
Schematic diagram of MOGA based command shaper
Table 12.1
Design objectives and goal values
Output
Parameters
Response with
bang–bang
input
Design objectives
Hub angle
response
Maximum oscillation
peak–peak from
steady level
3.16
(80%)  0.5
Rise time (s)
1.116
(þ7.5%)  1.2
Settling time (s)
3.9
(35%)  2.5
Steady state error
0
0
End-point
acceleration
RMS
065
(70%) 0.2
yepaðiÞ
		
		
1
4.08
(75%) 1.0
Settling time (s)
1.97
(50%)  1.0
Multi-objective genetic algorithm control
359

Settling time at end-point of the rig: It is highly required that the end-point
acceleration should be instantly zero as the input to the system ceases. Due
to the flexible nature of the link, it takes time for the system oscillation to
reduce to zero or the system response may oscillate within a small range
depending on the control strategy used. Settling time at the end-point can be
measured as time taken by the system to stay within 2% of desired position
(zero) following the bang–bang input. The goal was set as  1.0 s, i.e., 50%
less than that taken by the system’s response to unshaped bang–bang input.
Maximum value of end-point acceleration: This to some extent measures the
maximum level of vibration while the manipulator moves. Norm-infinity of
the signal recorded at accelerometer ( yepaðiÞ
		
		
1) can measure this value. The
goal was set as  1.0, i.e., 75% less than that with the system’s response to
unshaped bang–bang input.
12.7.2
Implementation
The GA routines and objective functions were all implemented in MATLAB
(Chipperfield et al., 1994; The MathWorks, 2006). The model was simulated with
Simulink. The Simulink model (see Figure 12.9) was chosen as it is intuitive and
allows for simple construction of the feedforward control system with discrete
digital filters, saturators and other components. A saturator [0.3, þ0.3] was used
at the input end to limit the input to the flexible manipulator system.
Filters were used with all the three outputs with the aim to filter out flexible
motion keeping the rigid body motion intact. The cut-off frequencies of the filters
were chosen to be consistent with main vibration modes and rigid body motion of
the system. Low-pass Butterworth filters were used with hub angle and hub velo-
city outputs with a cut-off frequency of 90 Hz. Frequency domain representation of
u[10]
u[1]
E_P_Residual
Hub_Angle
Hub_Velocity
Saturation
Kf
kf
Shaped
From
workspace
x' = Ax + Bu
y = Cx + Du
State-space
model of
flexible
manipulator
u[12]
du/dt
du/dt
Fo = 8 Hz
N = 3
Fo = 80 Hz
N = 4
Fo = 90 Hz
N = 2
Fo = 90 Hz
N = 1
-K-
-K-
EPA
HA
HV
Figure 12.9
Simulink control system block diagram
360
Flexible robot manipulators: modelling, simulation and control

open-loop end-point acceleration (see Figure 12.6) has revealed that the system has
three resonance frequencies in the range of 13–65 Hz which cause most of the
vibration in the system. To highlight the reduction of vibration within that range
and to assess the effectiveness of the designed three-mode command shaper,
the end-point acceleration was passed through a high-pass (cut-off ¼ 8 Hz)
followed by a low-pass (cut-off ¼ 80 Hz) filter.
12.7.2.1
Parameter encoding
The controller parameters were encoded as 20-digit binary strings each, using Gray
coding, and then concatenated to form the chromosomes. Each chromosome con-
sists of eight separate strings constituting three terms for amplitudes and the
remaining five terms for time locations corresponding to three-mode command
shaper, which will be described later in detail. Amplitude parameters in the interval
[0, 1], and time location values in the interval [0.01, 1] were logarithmically
mapped onto the set of possible chromosome values, providing a resolution of
about four significant digits for all parameters.
12.7.2.2
Design of impulses and shaped command
The first three values of each row of chromosome are termed as K1, K2 and K3, and
are used to calculate the impulses of three sequences according to (8.16), (8.18) and
(8.19) for ZV-, ZVD- and EI-based command shapers, respectively. Equations
(8.16), (8.18) and (8.19) are used with random values of K so as to maintain the
same magnitude ratios among the impulses as provided by the theoretical method.
The next three random values of the same row are used as D1, D2 and D3, to cal-
culate the time locations of the corresponding sequences, as shown in Table 12.2
for a ZV-based command shaper (CS). The next two values are assigned as d12 and
d23 where d12 corresponds to the time difference between the last impulse of the
first impulse sequence and the first impulse of the second impulse sequence.
Similarly d23 corresponds to the time difference between the last impulse of the
second impulse sequence and the first impulse of the third impulse sequence. Since
all the above values are in decimal numbers, a conversion factor of 0.01 was used
Table 12.2
Encoding scheme
Binary chromosome in Gray code: each string ¼ 20 bits
111...1 110...1 010...0 011...1 010...0 010...1 011...1
110...1
Chromosome (one row): converted into real number
0.8067 0.5050 0.4905 0.2698 0.5296 0.5065 0.6753 0.2242
K1
K2
K3
D1
D2
D3
d12
d23
Used to form ZVD-based multi-modal (three-mode) CS
Multi-objective genetic algorithm control
361

with ‘‘round’’ function of MATLAB, to round the time locations of impulses and
distances between different impulse sequences to the nearest integer values. These
integer values represent sample instants which are then multiplied by sampling
period to obtain the time locations in seconds. For ZVD- and EI-based multi-mode
command shapers, each impulse sequence consists of three and four impulses. The
time locations of subsequent impulses of a sequence are calculated with multiples
of D. The following example explains the procedure of deducing amplitudes and
time locations of impulses based on ZVD technique and final shaped command.
Step 1: Randomly generated binary codes of dimension 50820 are created,
where 50 represents the number of individuals, 8 the number of parameters and
20 the number of bits to form one parameter to ensure sufficient precision for
the design procedure.
Step 2: The binary strings are considered as Gray code and converted to dec-
imal numbers.
Step 3: The eight parameters are designated as K1, K2, K3, D1, D2, D3, d12 and
d13, respectively. The above three steps are shown in Table 12.2.
Step 4: Using K1, K2 and K3 in (8.18), the amplitudes of impulses: A11,
A12, . . . , A33 are calculated as shown in Table 12.3.
Step 5: The next five values, D1, D2, D3, d12 and d23 are used to calculate the
time locations of the above impulses. Since these are in decimal number
form, they are rounded to a conversion factor of 0.01 by ‘‘round’’ function of
MATLAB. The decimal numbers and their corresponding integer values of
the five parameters are shown in Table 12.4.
Step 6: To obtain the time locations of impulses, some general expressions are
formed involving D and d, as presented in Table 12.5.
Table 12.4
Encoding time locations of impulses
Calculation of time locations of impulses from chromosome values
D1
D2
d12
D3
d23
0.2698
0.5296
0.6753
0.5065
0.2242
Conversion to integer with conversion factor of 0.01 and MATLAB function ‘‘round’’
27
53
68
51
22
Table 12.3
Amplitudes of impulses of ZVD multi-modal command shaper
Calculating amplitudes of impulses
Sequence-1 (using K1)
Sequence-2 (using K2)
Sequence-3 (using K3)
Impulse
Amplitude
Impulse
Amplitude
Impulse
Amplitude
A11
0.3064
A21
0.4415
A31
0.4501
A12
0.4943
A22
0.4459
A32
0.4416
A13
0.1994
A23
0.1126
A33
0.1083
362
Flexible robot manipulators: modelling, simulation and control

Using different values of Di and dði1Þi, as obtained in Table 12.4, in the
expressions, time locations of the impulses, t11; . . . ; t33 can be obtained in terms of
sample instants. To obtain the time locations in seconds, these are multiplied by the
sampling period, 0.0002 s in this case, as presented in Table 12.6.
Three separate impulse sequences are thus formed with the values of the first
row of the randomly generated initial population. The amplitudes and time loca-
tions of multi-modal ZVD-based command shaper are as given in Tables 12.3 and
12.6, respectively. These impulse sequences are convolved with each other to form
a final sequence which is later convolved with the input bang–bang signal to form
the final shaped signal, shown in Figure 12.10.
12.7.2.3
Objective functions
The filtered end-point acceleration output is considered as the residual error. Root
mean squared value of this residual error is expressed as:
RMSepa ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1
N
X
N
i¼1
ð yepaðiÞÞ2
v
u
u
t
(12.8)
where yepaðiÞ represents ith sample at end-point and N the total number of samples.
This is used as one of the objectives of MOGA optimisation process, which provides
an overall quantitative measurement of end-point vibration. Other objective func-
tions, such as maximum peak-to-peak oscillation of hub angle response relative to set
point, rise time and settling time of the hub angle response, settling time at end-point
and norm-infinity of the acceleration signal ( yepaðiÞ
		
		
1), are calculated using
MATLAB functions and .m files.
Table 12.5
General expressions for time locations of impulses
1.
t11 ¼ 1
For ZV
i ¼ 1; 2
2.
ti1 ¼ tði1Þ3 þ dði1Þi;
i 6¼ 1
For ZVD
i ¼ 1; 2; 3
3.
ti2 ¼ ti1 þ Di þ 1
For EI
i ¼ 1; :::; 4
4.
ti3 ¼ ti1 þ 2Di þ 1
Table 12.6
Time locations (in seconds) of impulses for a three-mode ZVD
command shaper
Calculating time locations of impulses
Sequence-1
Sequence-2
Sequence-3
Impulse
Seconds
Impulse
Seconds
Impulse
Seconds
t11
0.002
t21
0.0246
t31
0.0504
t12
0.0056
t22
0.0354
t32
0.0608
t13
0.011
t23
0.046
t33
0.071
Multi-objective genetic algorithm control
363

12.7.3
Non-dominated solution set and results
The optimisation process consists of a fairly standard generational GA with multi-
objective ranking, and with sharing and mating restriction implemented in the
objective domain (Fonseca and Fleming, 1995). After evaluating different objective
functions, multi-objective ranks are computed according to the current preferences
and the population sorted. The fitness assigned to individuals with the same multi-
objective rank is averaged, and fitness shared within each rank before selection
takes place. Selection uses Baker’s stochastic universal sampling (SUS) algorithm
(Baker, 1987), which is optimal in terms of bias and spread. Once the parents of the
next generation have been selected from the old population, they are paired up and
recombined with high probability (0.8). Mating restriction is implemented by
forming pairs of individuals within a distance of each other in the objective space,
where possible. Reduced-surrogate shuffle crossover (Booker, 1987) is used for
recombination. The mutation rate for this optimisation process was set at 0.01%.
A small percentage (10%) of random immigrants was inserted in the population
after each 10 generations, to maintain diversity in the solution sets. Three different
types of multi-modal command shapers based on ZV, ZVD and EI techniques were
investigated. A multi-objective GA optimisation process with a population size of
50 individuals was run for a maximum of 50 generations in each case. In general
the solution to a multi-objective optimisation problem is not a single point, but a
family of non-dominated points, known as the Pareto optimal set, which describes
the trade-off among contradicting objectives. A two-objective GA optimisation
process is described here.
0
–10
–20
–30
9.05
9.1
9.15
1.08
1.1
1.12
1.14
0
0
–40
–20
0
20
40
2
4
6
Time (s)
Amplitude
8
10
12
10
20
30
Figure 12.10
Shaped bang–bang signal based on multi-modal ZVD technique
364
Flexible robot manipulators: modelling, simulation and control

MOGA was used to design command shapers which find trade-off between
two competing objectives, namely rise time and root mean squared value of end-
point acceleration. The designs included ZV-, ZVD- and EI-based multi-modal
command shapers. The goal values of the design were chosen as less than or equal
to 0.2 for rms value of end-point acceleration (objective-1) and less than or equal to
1.2 s for rise-time of hub angle response (objective-2). Objective-1 thus chosen
corresponds to reduction in end-point acceleration response of 70% compared to
the open-loop response with unshaped bang–bang signal, which may be considered
as quite significant in terms of vibration reduction. As mentioned earlier, due to the
introduction of command shaper, the system response will become slower, and this
is in conflict with amount of vibration reduction at the end-point. The maximum
goal value of rise time (objective-2) thus chosen was 7.5% higher than that with
bang–bang unshaped response. The two objectives and the corresponding goal
values are shown in Table 12.7.
The ZV, ZVD and EI, command shapers were designed with the same MOGA
parameters, such as number of individuals, total number of generations, encoding
technique, rank-based fitness sharing and other GA operators. MOGA with a
population size of 50 individuals was run on this problem 5 times, each time for 50
generations. The Pareto optimal sets of run-5 for the command shapers are shown
in Figures 12.11–12.13, where objective-1 is represented on the horizontal axis and
objective-2 on the vertical axis. A selected set of solutions are marked as solution-i
(sol-i) for evaluation and discussion.
Figures 12.14–12.16 show graphical presentations of unshaped and shaped
bang–bang input, and corresponding hub angle response and end-point acceleration
response of the manipulator with sol-4, sol-5 and sol-6 of ZVD command shaper.
As noted the performances achieved reflect the objective values noted in
Figure 12.12.
In order to evaluate the effectiveness of MOGA in command shaping design,
several representative solutions (sol-1 to sol-9) are assessed. Performance measures
such as peak-to-peak amplitude, rise time, settling time and steady-state error of the
hub angle response and rms value, norm-? and settling time of the end-point
acceleration for all those representative solutions are calculated and presented in
Table 12.8. In order to highlight the effectiveness of command shaping techniques,
similar performance measures of the system have been provided with bang–bang
input. For solutions 1, 2 and 3, peak-to-peak amplitudes of hub angle response were
0.15, 0.056 and 0.144, respectively. For solutions 4, 5 and 6, peak-to-peak ampli-
tudes of the hub angle response were 0.012, 0.006 and 0.192, respectively and for
solutions 7, 8 and 9, these values were recorded as 0.002, 0.008 and 0.389. It is
Table 12.7
Two objectives and goal values
Objective
Description
Goal value
1
RMS value of end-point acceleration
 0.2
2
Rise time of hub angle response
 1.2 s
Multi-objective genetic algorithm control
365

interesting to note that, for all solutions, using command shaping, the peak-to-peak
oscillation in hub angle response was much lower compared to that of system due
to unshaped bang–bang input which was 3.1656.
For solutions 1, 2 and 3, rise times of hub angle response were 1.119, 1.117 and
1.116 s, respectively. For solutions 4, 5 and 6, rise times of the hub angle response
0.12
0.14
0.16
0.18
RMS value of end-point acceleration
Rise time (s)
1.1165
1.117
1.1175
1.118
1.1185
Solution-1
Solution-2
Solution-3
1.119
0.2
Figure 12.11
Pareto optimal sets for the multi-modal command shapers
(ZV-based)
0.18
0.16
0.14
RMS value of end-point acceleration
Rise time (s)
0.12
0.1
0.08
0.06
1.116
1.117
1.118
1.119
1.12
1.121
1.122
1.123
Solution-5
Solution-6
Solution-4
Figure 12.12
Pareto optimal sets for the multi-modal command shapers
(ZVD based)
366
Flexible robot manipulators: modelling, simulation and control

were 1.123, 1.119 and 1.116 s, respectively and for solutions 7, 8 and 9, these
values were recorded as 1.127, 1.121 and 1.117 s. It is observed that, speed
of system response is usually slower (higher rise time) with command shaping
compared to that of the system without command shaping. To highlight the oscil-
lation and delay in hub angle response, some portion of the signal has been
enlarged in Figure 12.15. It is evident from the enlarged section that the command
shaping technique can reduce response oscillations significantly at the cost of
slight delay.
0.2
0.15
RMS value of end-point acceleration
Rise time (s)
0.1
0.05
1.118
1.12
1.122
1.124
1.126
Solution-9
Solution-8
Solution-7
Figure 12.13
Pareto optimal sets for the multi-modal command shapers
(EI-based)
40
Unshaped
sol-4
sol-5
sol-6
20
0
Amplitude
–20
–400
1
2
3
Time (s)
4
5
Figure 12.14
Unshaped and shaped signals for sol-4, sol-5 and sol-6
Multi-objective genetic algorithm control
367

The settling time for hub angle response depends on the shaping technique and
rise time, for ZV-based solutions (solutions 1, 2 and 3) give comparatively lower
and for EI-based solutions (solutions 7, 8 and 9) give comparatively higher while
for ZVD-based solutions (solutions 4, 5 and 6) give moderate values. Although, for
some solutions, these values are comparatively higher but still lower than that of
the system with bang–bang input and is quite satisfactory for any standard appli-
cation. The steady-state error, for all cases, was recorded as zero.
The RMS value of the end-point acceleration has been considered as a quan-
titative measure of overall vibration at the end-point of the flexible manipulator.
For solutions 1, 2 and 3, the RMS values of end-point acceleration were 0.109,
0.131 and 0.173, respectively. For solutions 4, 5 and 6, the RMS values of end-
point acceleration were 0.062, 0.1 and 0.179, respectively, and for solutions 7, 8
and 9, these values were recorded as 0.045, 0.079 and 0.194. It is observed that,
RMS values of end-point acceleration were much lower with command shaping
compared to that of the system without command shaping. This result clearly
exhibits the effectiveness of command shaping technique in the application of
vibration reduction. Moreover, the frequency domain representation of the end-
point acceleration (see Figure 12.16) also reveals the reduction of vibration at
the end-point, especially at the first three resonance modes. It is clear from
Figure 12.16 that, at first mode (13 Hz) and second mode (35 Hz), vibration
reduction was maximum for sol-4 followed by sol-5 and sol-6 whereas at the third
mode (65 Hz), reduction was maximum for sol-6 followed by sol-5 and sol-4.
Similar trend may be observed with ZV- and EI-based solutions.
The 1-norm ( yepaðiÞ
		
		
1) of the end-point acceleration gives the maximum
value of the signal at any instant which may be considered as a quantitative indi-
cation of maximum vibration at the end-point. Table 12.8 shows the values of
800
600
400
Hub angle (°)
200
00
1
2
3
Time (s)
4
2.5
3
3.5
5
Unshaped
sol-4
sol-5
sol-6
Figure 12.15
Hub angle response for unshaped and shaped signals for sol-4,
sol-5 and sol-6
368
Flexible robot manipulators: modelling, simulation and control

1-norm for solutions 1, 2 and 3 which were 0.737, 0.873 and 1.123, respectively.
For solutions 4, 5 and 6, the values of 1-norm were 0.411, 0.623 and 1.244,
respectively, and for solutions 7, 8 and 9, these values were recorded as 0.288,
0.473 and 1.627. It is observed that the value of 1-norm of end-point acceleration
was much lower with command shaping compared to that of the system without
command shaping. This also reveals the effectiveness of command shaping tech-
nique in the application of vibration reduction.
The settling time at the end-point of the manipulator increases with the level
of vibration (RMS value) and the rise times of the system response, which were
0.59, 0.563 and 0.754 s for solutions 1, 2 and 3, respectively. For solutions 4, 5
(a)
Frequency (Hz)
(b)
3
Unshaped
sol-4
sol-5
sol-6
Unshaped
sol-4
sol-5
sol-6
2
mm/s2
1
0
–1
–2
–3
–4
100
10–5
10–10
–5
0
1
20
40
60
80
100
2
3
2.6
2.8
3
3.2
3.4
Time (s)
Power spectral density
4
5
Figure 12.16
End-point acceleration for unshaped and shaped signals for
sol-4, sol-5 and sol-6: (a) time-domain and (b) spectral density
Multi-objective genetic algorithm control
369

and 6, the settling times of end-point acceleration were 0.87, 0.69 and 1.10 s,
respectively and for solutions 7, 8 and 9, these values were recorded as 1.04, 0.819
and 1.206 s. It is important to note that, settling time of end-point acceleration was
lower with command shaping compared to that of the system without command
shaping.
12.8
Case study 12.2: multi-modal command shaping for
closed-loop control
The MOGA-based command shaper is augmented in this case study with a collocated
proportional-derivative (PD) controller to achieve good tracking while reducing
vibration. The PD controller is developed using hub-angle and hub-velocity feedback
to control the rigid-body motion of the system. To reduce the end-point acceleration
of the system, a feedforward multi-modal command shaper is incorporated. The
schematic diagram of the control scheme is shown in Figure 12.17. The proportional
and derivative gains, kp and kv, are selected based on root-locus method as discussed
in detail in Tokhi and Azad (1996b) to ensure system stability and satisfactory
tracking capability.
MOGA used to design command shapers that trade-off between tracking error
and end-point acceleration. Taking tracking error and end-point acceleration as two
competing objectives, the algorithm yields a non-dominated solution set, each
containing amplitude and time location of impulses that form shaped command.
The aim of the MOGA-based multi-mode command shaper associated with the
collocated PD controller is to reduce end-point vibration and to meet other design
objectives and associated goals as demanded by a practical application.
Table 12.8
Performance measures of different solutions
System open-
loop control
input
Hub angle response
End-point acceleration
Maximum
oscillation
(peak–peak)
Rise
time
(s)
Settling
time (s)
Steady-
state
error
RMS
value
yepaðiÞj1
		
Settling
time (s)
Bang–bang
3.1656
1.116
3.9
0
0.65
4.079
1.97
CS (Sol-1)
0.15
1.119
2.51
0
0.109
0.737
0.59
CS (Sol-2)
0.056
1.117
2.31
0
0.131
0.873
0.563
CS (Sol-3)
0.144
1.116
2.68
0
0.173
1.123
0.754
CS (Sol-4)
0.012
1.123
2.68
0
0.062
0.411
0.87
CS (Sol-5)
0.006
1.119
2.48
0
0.10
0.623
0.69
CS (Sol-6)
0.192
1.116
2.99
0
0.179
1.244
1.10
CS (Sol-7)
0.002
1.127
2.89
0
0.045
0.288
1.04
CS (Sol-8)
0.008
1.121
2.63
0
0.079
0.473
0.819
CS (Sol-9)
0.389
1.117
3.13
0
0.194
1.627
1.206
370
Flexible robot manipulators: modelling, simulation and control

12.8.1
Design objectives
The design objectives were chosen arbitrarily. The time-domain characteristics
were derived from the responses at the hub and end-point.
Stability: In this work, PD-type closed-loop control is used for input tracking
while a feedforward command shaper is augmented to reduce vibration at
end-point. PD controller is designed based on conventional root-locus
method to ensure closed loop stability of the system (Tokhi and Azad,
1996b). Since command shaper is placed outside the loop, it does not affect
the closed loop stability.
Rise time for hub angle response: This is required to be no longer than 10% of
the time taken by the closed-loop PD system to reach 90% of the steady
state, following the accelerating phase of bang–bang input at motor input.
Overshoot for hub angle response: The maximum value at shaft encoder which
measures the displacement of flexible link should not exceed the desired
level by more than 10%.
Settling time for hub angle response: The time taken by the system response to
a bang–bang input to stay within 2% of final desired output.
Root mean squared value of input tracking error: For good tracking, the hub
angle response is required to follow the bang–bang reference signal.
Tracking error is the difference between hub angle response and bang–bang
reference signal. Root mean squared value of the tracking error can provide
a quantitative indication of overall tracking capability of the system.
Root mean squared value of end-point acceleration: Here the goal value is
chosen 45% lower than the system’s response with PD control.
Settling time at end-point of the rig: Settling time at end-point can be measured
as the time taken by the system to stay within 2% of the desired value (zero).
Maximum value of end-point acceleration: The goal is to have this as small as
possible.
+ 
–
Hub angle
–
–
kv
kp
CS
Objective-1: Tracking error
MOGA
optimisation 
System
(SIMO)
Objective-2: End-point acceleration
Filter
Filter
Filter 
Hub velocity 
Ref. Signal
(bang–bang)
Figure 12.17
Schematic diagram of MOGA based-command shaper with
collocated PD controller
Multi-objective genetic algorithm control
371

12.8.2
Implementation
The control strategy was simulated with Simulink. The closed-loop PD controller
was constructed with discrete digital filters, saturators and other components. The
shaped signal was used as the reference to the PD controller whereas a saturator
[from 0.3 to þ0.3] was used at the input of the system’s model to limit the input
to the flexible manipulator system. Filters were also used with all the three outputs
with the aim to filter out flexible motion keeping the rigid body motion intact. The
cut-off frequencies of the filters were chosen as discussed earlier. Moreover,
similar parameter encoding scheme and design procedure were followed in this
case as discussed in Section 12.7.2.2.
12.8.2.1
Objective functions
The shaped signal is used as the new reference input instead of the initial bang–
bang signal. On completion of the simulation, the responses at shaft encoder,
tachometer and end-point accelerometer are stored. For good tracking, hub angle
response is required to follow the unshaped bang–bang. The input tracking error is
defined as:
eha ¼ yref 
_yha
(12.9)
where yref represents reference bang–bang signal and
_yha hub angle response. Root
mean squared value of this tracking error is expressed as:
RMStracking error ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1
N
X
N
i¼1
ðehaðiÞÞ2
v
u
u
t
(12.10)
where ehaðiÞ represents tracking error at i-th sample and N the total samples. This
quantity RMStracking error is used as one objective of the MOGA design procedure.
The filtered output at the end-point accelerometer is considered as the residue
error. Root mean squared value of this residual error is expressed as:
RMSepa ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1
N
X
N
i¼1
ð yepaðiÞÞ2
v
u
u
t
(12.11)
where yepaðiÞ represents i-th sample at end-point and N the total samples. This is
used as another objective of MOGA optimisation process, which provides an
overall quantitative measurement of end-point vibration.
12.8.2.2
Non-dominated solution sets
Two competing objectives, namely RMS value of input tracking error (RMStracking error)
and root mean squared value of end-point acceleration (RMSepa), are chosen with a
view to obtaining good tracking performance as well as satisfactory level of reduction
in vibration at the end-point. Due to the introduction of command shaper, the system
response incurs a delay which in turn increases input tracking error. On the other hand,
372
Flexible robot manipulators: modelling, simulation and control

higher tracking error always yields higher rise time which means slower response.
System’s response and tracking error are always in conflict with amount of vibration
reduction at end-point.
The goal values for both objectives are chosen as zero that means, to minimise
both input tracking error and end-point acceleration or vibration at the end-point of
the rig. A multi-objective GA optimisation process with a population size of 50
individuals is run for a maximum of 50 generations. At the end of 50th generation,
a wide range of solution sets, each containing three terms for amplitudes and five
terms for time locations, is reached. Each solution set is utilised to form a three-
mode shaped signal based on type of shaping technique (ZV or ZVD or EI). To
incorporate and implement selection of type of command shaper a 20 bit binary
string is added to the chromosome of 8 strings per row as ninth string. So each new
chromosome consists of nine separate strings constituting three terms for ampli-
tudes, next five terms for time locations corresponding to three-mode command
shaper and the last term for selecting type of command shaper. Ranges for ampli-
tude and time location parameters remain the same as before. The type specifying
(ninth) term is defined in the interval [2, 4] which is later logarithmically mapped
onto the set of possible chromosome values, providing a resolution of about four
significant digits for all parameters.
In this design procedure the ninth bit string of each row is processed first. The
ninth string of individual defines the type of command shaper whether ZV, ZVD or
EI. Since all the strings are encoded in real numbers first, a MATLAB function
‘‘round’’ is used to convert this intro integer numbers in the range 2–4. In this
design procedure the range [2, 4] is chosen to keep resemblance with number
of impulses with ZV-, ZVD- and EI-type command shapers. The type selection
procedure is as follows:
Step 1: Ninth binary string of each row of initial population
Step 2: Convert into real number the range [2, 4]
Step 3: Convert into integer number using MATLAB function ‘‘round’’
Step 4: Selecting type of command shaper: 2 for ZV, 3 for ZVD and 4 for EI.
For example, if for any row of initial population, after step-4, the ninth bit string
gives a value 3 then ZVD technique is selected as type of command shaper. Once
the type of the shaping technique is decided in this manner, the first eight strings
are encoded in the same way as discussed before to extract amplitudes and time
locations of the impulses to form a three-mode command shaper.
12.8.2.3
Goal values and constraint handling
The goal values of the design procedure are selected as compared with system’s
response with PD control and without command shaping. As mentioned before, due
to the introduction of command shaper, the system incurs a delay which in turn
increases tracking error. The objective of the design procedure is to restrict this
increase within a small range compared to system’s response with PD control and
without command shaping. This amount of increase is allowed up to a maximum
level of 20% in terms of RMS value, which is 16 in absolute terms. For end-point
Multi-objective genetic algorithm control
373

acceleration, the goal value is selected as equal to or less than 0.8 in terms of
RMS value which is around 45% less than that with the reference PD controlled
system. Both the objective functions and corresponding goal values are shown in
Table 12.9.
The maximum goal values of both objective functions are considered as hard
constraints in the MOGA process. A MOGA algorithm with a population size of
50 individuals was run on this problem 5 times, each time for 50 generations.
Solutions which are non-dominated with each other and satisfying all goal values
are stored after each generation. These non-dominated and satisfying solutions
contain all three types of shaping techniques although the number for different
techniques may be different depending on goal values, algorithm and application.
The Pareto optimal set for this algorithm at five different stages is shown in
Figure 12.18.
Table 12.9
Two objectives and goal values
Objective Description
PD control without
command shaping
Goal value
1
RMS value of
input tracking
error
12.92
16 ðþ20%Þ
2
RMS value of
end-point
acceleration
1.44
0:8 ð45%Þ
0.9
0.8
0.7
0.6
0.5
0.4
RMS value of end-point acceleration
0.3
0.2
0.1
13
13.5
14
14.5
Solution-10
Solution-11
Solution-12
ZV solution
ZVD solution
EI solution
RMS value of input tracking error
15
15.5
16
Figure 12.18
Pareto set at generation at 50 (run-5)
374
Flexible robot manipulators: modelling, simulation and control

12.8.2.4
Validation of the approach
To validate the solution sets, three solutions are selected on the Pareto front, two on
either extreme points of two objectives, the other approximately at the middle (see
Figure 12.18). Among the solutions, solution-10 (sol-10) (see Figure 12.18) gives
the minimum value for objective-1 (RMStracking error ¼ 13:2) while maximum for
objective-2 (RMSepa ¼ 0:79). On the other hand, solution-12 (sol-12) gives the
maximum value for objective-1 (RMStracking error ¼ 15:75) while minimum for
objective-2 (RMSepa ¼ 0:17). Solution-11 (sol-11) gives moderate values for both
objectives compared to solution-10 and solution-12.
Time domain parameters of the proposed control scheme with MOGA solu-
tions (sol-10, sol-11 and sol-12), single objective based GA solutions and PD
controller with bang–bang reference are presented in Table 12.10.
The closed loop collocated PD controller controls the rigid body motion of the
manipulator. Since the command shaper is placed outside the loop, it does not
affect closed loop parameters, such as stability, overshoot and steady-state error
(see Table 12.10). Command shapers always result in response delay while redu-
cing end-point vibration which in turn increases tracking error. On the other hand,
in the control scheme presented, solutions with higher tracking error exhibit higher
rise time, i.e., slower response. Rise times for sol-10, sol-11 and sol-12 were 1.08,
1.10 and 1.19 s, respectively. To investigate the effect of command shaping in
tracking error and on system’s response, the hub angle response of the control
scheme with shaped signals based on sol-10, sol-11 and sol-12 was compared with
that of PD control with bang–bang as the reference input. The hub angle responses
are shown in Figure 12.19.
The settling time for hub angle response varied slightly in accordance with rise
time although the highest value (2.04 s, for sol-12) is only 7% higher than that with
PD control which is quite satisfactory for standard applications. To investigate the
effect of command shaping in reducing vibration at the end-point, end-point
acceleration of the control scheme with shaped signals based on sol-10, sol-11 and
sol-12 were compared with that of PD control with bang–bang as reference input.
End-point acceleration with these techniques is shown in Figure 12.20 and RMS
values are presented in Table 12.10. The RMS value residual error of PD control
Table 12.10
Time domain parameters for different schemes
Performance measures
PD only
Sol-10
Sol-11
Sol-12
Overshoot (%)
0.02
0.02
0.02
0.03
Rise time (s)
1.07
1.08
1.10
1.19
Settling time (s)
1.90
1.92
1.94
2.04
Steady-state error
0.07
0.07
0.08
0.09
Input tracking error (RMS)
12.92
13.20
13.67
15.75
Residual error (RMS)
1.44
0.79
0.38
0.17
Maximum amplitude of residual error
45.86
14.50
7.19
2.69
Settling time at end-point (s)
1.24
1.17
0.97
0.78
Multi-objective genetic algorithm control
375

with bang–bang as reference was 1.44 whereas for sol-10, sol-11 and sol-12, these
values were 0.79, 0.38 and 0.17, respectively.
The settling time at the end-point of the manipulator reduced with the amount
of vibration (RMS value), and this was 1.17, 0.97 and 0.78 s for sol-10, sol-11 and
12, respectively. The 1-norm ( yepaðiÞ
		
		
1) of the whole signal at accelerometer
gives the maximum value of end-point acceleration at any instant. This value may
be considered as a quantitative indication of maximum vibration at end-point.
Table 12.10 shows the values of yepaðiÞ
		
		
1 for sol-10, sol-11 and sol-12 as 14.5,
PD only
40
30
20
10
Hub angle (deg)
0
–10
–20
–30
–40
0
2
1
2
0
10
20
30
3
4
6
Time (s)
8
10
12
sol-10
sol-11
sol-12
Reference
Figure 12.19
Hub angle response for sol-10, sol-11, sol-12 and PD control
0
–40
–30
–20
–10
0
10
mm/s2
20
30
40
50
PD only
sol-10
sol-11
sol-12
2
4
Time (s)
6
8
10
9.0
9.14
–20
–10
0
10
12
Figure 12.20
End-point acceleration for sol-10, sol-11, sol-12 and PD control
376
Flexible robot manipulators: modelling, simulation and control

7.19 and 2.69, respectively. All these values are much lower compared to that with
PD control, which was 45.86. To highlight the vibration reduction at first three
resonance modes, the end-point acceleration with the various cases is presented in
the frequency domain in Figure 12.21. For all three resonance modes, vibration
reduction was maximum for sol-12 followed by sol-11 and sol-10, and all were
lower than that with PD control.
12.9
Summary
The application of multi-objective genetic algorithm in designing command shap-
ing for vibration control of a single-link flexible manipulator has been presented. In
the case of a conventional command shaper amplitudes and corresponding time
locations of impulses are calculated based on standard equations, which require the
natural frequencies and associated damping ratios to be known. In the proposed
methods, it has been assumed that the natural frequencies and damping ratios are
unknown for the plant. For a flexible manipulator, performance indicators such as
peak-to-peak response oscillation, rise time, settling time and, end-point vibration
are always in conflict due to its construction and mode of operation.
First, MOGA has been applied to derive solutions for multimodal command
shaper based on two objectives. Secondly, a multimodal command shaping design
procedure has been devised for a closed-loop flexible manipulator where selection
procedure of appropriate command shaping technique has been incorporated with
the design procedure. The aim of the proposed control scheme has been to reduce
vibration at the end-point without sacrificing response speed and achieve good
tracking performance simultaneously. The main emphasis has been the application
of MOGA in selecting and designing feedforward command shaping, while
20
10–5
Power spectral density
100
40
Frequency (Hz)
60
PD only
sol-12
sol-11
sol-10
80
Figure 12.21
Frequency domain end-point acceleration for sol-10, sol-11,
sol-12 and PD
Multi-objective genetic algorithm control
377

collocated PD control has been designed based on conventional root-locus method.
The MOGA approach has successfully been applied to select the shaping technique
and derive the parameters required to design an effective command shaper
simultaneously.
The design procedures have been involved in setting several design goals as
hard constraints. The MOGA process derives solutions, satisfying design goals,
known as Pareto optimal set, which trades-off among competing objectives. The
Pareto front yields a set of candidate solutions, from which the desired one is
picked under different trade-off conditions. To assess the effectiveness of the
design procedures, several limiting solutions on the Pareto front have been eval-
uated on the problem domain and corresponding responses have been presented
both in time and frequency domains. Significant reduction in vibration has been
achieved with a satisfactory level of system response speed, overshoot, settling
time and steady-state error.
378
Flexible robot manipulators: modelling, simulation and control

Chapter 13
Multi-objective particle swarm optimisation
control
This chapter provides a brief introduction to the basic particle swarm optimisation
(PSO) algorithm and some of its notable variants available in the literature. Then a
process of developing multi-objective PSO (MOPSO) algorithms is described, and
the approach is utilised to develop two alternative MOPSO algorithms. A case
study exercise is presented where the two MOPSO algorithms are used in
the design of command shapers for vibration reduction of a single-link flexible
manipulator. The implementation results achieved are assessed and discussed.
13.1
Introduction
Particle swarm optimisation (PSO) is a population-based, self-adaptive search
optimisation technique first introduced by Eberhart and Kennedy (1995). The PSO
differs from well-known evolutionary computation algorithms, such as genetic
algorithms (Holland, 1975), in that the population is not manipulated through
operators inspired by the human DNA procedures. Instead, in PSO, the population
dynamics simulate the behaviour of a ‘‘birds’ flock’’, where social sharing of
information takes place and individuals profit from the discoveries and previous
experience of all other companions during the search for food. Thus, each com-
panion, called particle, in the population which is called swarm, is assumed to
‘‘fly’’ over the search space looking for promising regions on the landscape. For
example, in the single-objective minimisation case, such regions possess lower
function values than others previously visited. In this context, each particle is
treated as a point in the search space, which adjusts its own ‘‘flying’’ according to
its flying experience as well as the flying experience of other particles (Heppner
and Grenander, 1990; Reynolds, 1987). Since its introduction, PSO has attracted a
lot of attention from researchers around the world.
13.2
Particle swarm optimisation algorithms
The original PSO algorithm was discovered through simplified social model
simulation. It is related to the bird flocking, fish schooling, and swarm theory. The
PSO was first designed to simulate birds seeking food, defined as a ‘‘cornfield vector’’.

The bird would find food through social cooperation with other birds around it
(within its neighbourhood). It was then expanded to multidimensional search.
The topological rather than Euclidean neighbourhood was utilised (Eberhart and
Kennedy 1995; Eberhart et al., 1996).
13.2.1
The original PSO algorithm
PSO is a population-based search algorithm and is initialised with a population of
random solutions, called particles and each particle in the PSO also has an asso-
ciated velocity. Particles fly through the search space with velocities which are
dynamically adjusted according to their historical behaviours. Therefore, the par-
ticles have a tendency to fly towards better and better search area over the course of
the search process. The original PSO algorithm (Eberhart and Kennedy, 1995) is
described as:
vid ¼ vid þ c1  rand 
ð Þ 
pid  xid
ð
Þ þ c2  Rand 
ð Þ 
pgd  xid


(13.1)
xid ¼ xid þ vid
(13.2)
where c1 and c2 are positive constants, and rand 
ð Þ and Rand 
ð Þ are two random
functions in the range [0, 1]; Xi ¼ xi1; xi2; . . . ; xid
ð
Þ represents the ith particle;
Pi ¼ pi1; pi2; . . . ; pid
ð
Þ represents the best previous position (the position giving the
best fitness value) of the ith particle; the symbol g represents the index of the best
particle among all the particles in the population; Vi ¼ vi1; vi2; . . . ; vid
ð
Þ represents
the rate of the position change (velocity) for particle i. Equation (13.1) describes
the flying trajectory of a population of particles. It describes how the velocity is
dynamically updated and (13.2) gives the position update of the ‘‘flying’’ particles.
Equation (13.1) consists of three parts. The first part is the momentum part. The
velocity cannot be changed abruptly. It is changed from the current velocity. The
second part is the ‘‘cognitive’’ part which represents private thinking of itself –
learning from its own flying experience. The third part is the ‘‘social’’ part which
represents the collaboration among particles-learning from the group’s flying
experience (Eberhart and Shi, 1998).
An example movement of a single particle (index i), at time step t, is illustrated
in a two-dimensional search space in Figure 13.1. At time step t, the position,
velocity, personal best, and global best are indicated as xi tð Þ, vi tð Þ, pi tð Þ, and pg tð Þ,
respectively. Figure 13.1 illustrates, geometrically, how the particle moves to the
new position xi tþ1
ð
Þ, based on three components; momentum, cognitive component,
and social component.
The velocity, vi tð Þ, which serves as a memory of the previous flight direction,
can be seen as momentum, which prevents the particle from drastically changing
direction, and to bias towards the current direction. This component is also referred
to as the inertia component.
The cognitive component, c1  rand 
ð Þ  pid  xid
ð
Þ, quantifies the perfor-
mance of particle i relative to past performances. In a sense, the cognitive compo-
nent resembles individual memory of the position that was best for the particle. The
effect of this term is that particles are drawn back to their own best positions.
380
Flexible robot manipulators: modelling, simulation and control

The social component, c2  Rand 
ð Þ  pgd  xid


, in the case of gbest PSO,
quantifies the performance of particle i relative to a group of particles, or neighbours.
The effect of the social component is that each particle is also drawn towards the best
position found by the particle’s neighbourhood.
In (13.1), if the sum of the three parts on the right side exceeds a constant value
specified by the user, then the velocity in that dimension is assigned to be Vmax,
that is, particles’ velocities in each dimension is clamped to a maximum velocity
Vmax, which is an important parameter, and originally is the only parameter
required to be adjusted by users. Big Vmax leads to particles with the potential to fly
far past good solution areas while a small Vmax leads to particles with the potential
to be trapped in local minima, therefore unable to fly into better solution areas.
Usually a fixed constant value is used as the Vmax, but a well-designed dynamically
changing Vmax might improve the PSO’s performance (Fan and Shi, 2001). The
original procedure for implementing PSO is as follows:
1.
Initialise a population of particles with random positions and velocities on
D dimensions in the problem space.
2.
For each particle, evaluate the desired optimisation fitness function in D
variables.
3.
Compare particle’s fitness evaluation with its pbest. If current value is better
than pbest, then set pbest equal to the current value, and Pi equals to the current
location Xi in D-dimensional space.
4.
Identify the particle in the neighbourhood with the best success so far, and
assign its index to the variable g.
5.
Change the velocity and position of the particle according to (13.1) and (13.2).
6.
Loop to step (2) until a criterion is met; usually a sufficiently good fitness or a
maximum number of iterations.
Momentum
pg(t)
Cognitive component
vi(t+1)
pi(t)
vi(t)
xi(t)
xi(t+1)
Social component 
Figure 13.1
Geometric illustration of a particle’s movement in PSO
Multi-objective particle swarm optimisation control
381

13.2.2
Binary PSO algorithms
The original PSO is designed for the real-value problems. To extend the real-
value version of PSO to binary/discrete space, the most critical part is to realise
the trajectory velocity in the binary/discrete space. Kennedy and Eberhart (1997)
used velocity as a probability to determine whether xid (a bit) would be in one
state or another (zero or one). They squashed vid using a logistic function
s v
ð Þ ¼ 1= 1 þ exp v
ð
Þ
ð
Þ while the velocity is calculated using the same equation as
(13.1). If a randomly generated number within [0, 1] is less than s vid
ð
Þ, then xid is
set to be 1, otherwise it is set to be 0. Mohan and Al-kazemi (2001) proposed five
binary variations of PSO algorithms. The techniques they utilised for these five
binary PSO are named as direct approach, quantum approach, regularisation
approach, bias vector approach, and mixed search approach.
13.2.3
Topologies
The commonly used PSOs are either global version or local version. In the global
version of PSO, each particle flies through the search space with a velocity that is
dynamically adjusted according to the particle’s personal best performance
achieved so far and the best performance achieved so far by all the particles. While
in the local version of PSO, each particle’s velocity is adjusted according to its
personal best and the best performance achieved so far within its neighbourhood.
The neighbourhood of each particle is generally defined as topologically nearest
particles to the particle on each side. The global version of PSO can also be con-
sidered as a local version of PSO with each particle’s neighbourhood to be the
whole population. It has been suggested that the global version of PSO converges
fast, but with the potential to converge to the local minimum, while the local ver-
sion of PSO might have more chances to find better solutions slowly (Kennedy,
1999; Kennedy et al., 2001). Since then, a lot of researchers have worked on
improving its performance by designing or implementing different types of
neighbourhood structures in PSOs. Kennedy and Mendes (2002) tested PSOs with
regular shaped neighbourhoods, such as global version, local version, pyramid
structure, star structure, ‘‘small’’ structure, and von Neumann, and PSOs with
randomly generated neighbourhoods. Hu and Eberhart (2002) introduced a
dynamic neighbourhood concept for their multi-objective optimisation problem
using PSO. The neighbourhood of each particle was dynamically adjusted. Mendes
et al. (2004) proposed a fully informed PSO algorithm based on coefficient
analysis.
13.2.4
Some variants of PSO
Velocity changes of a PSO consist of three parts, the ‘‘social’’ part, the ‘‘cognitive’’
part, and the momentum part. The balance among these parts determines the bal-
ance in the global and local search ability, therefore the performance of a PSO. The
first new parameter added into the original PSO algorithm is the inertia weight
(Eberhart and Shi, 1998; Shi and Eberhart, 1998). The dynamic equation of PSO
382
Flexible robot manipulators: modelling, simulation and control

with inertia weight is modified as:
vid ¼ w  vid þ c1  rand 
ð Þ  pid  xid
ð
Þ þ c2  Rand 
ð Þ  pgd  xid


(13.3)
xid ¼ xid þ vid
(13.4)
Equation (13.3) is the same as (13.1) except for a new inertia weight w parameter.
The inertia weight is introduced to balance between the global and local search
abilities. A large inertia weight facilitates global search while a small inertia weight
facilitates local search. The introduction of the inertia weight also eliminates the
requirement of carefully setting the maximum velocity Vmax. The Vmax can be
simply set to the value of the dynamic range of each variable and the PSO algo-
rithm still performs well. Another parameter called constriction coefficient is
introduced with the hope that it can insure a PSO to converge (Clerc, 1999; Clerc
and Kennedy, 2002). A simplified method of incorporating it as:
vid ¼ k vid þ c1  rand 
ð Þ  pid  xid
ð
Þ þ c2  Rand 
ð Þ  pgd  xid




(13.5)
xid ¼ xid þ vid
(13.6)
with:
k ¼
2
2  j 
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
j2  4j
p


(13.7)
where j ¼ c1 þ c2, j > 4. Mathematically, (13.3) and (13.5) are equivalent by
setting inertia weight w to be k, and c1 and c2 meet the condition j ¼ c1 þ c2,
j > 4. The PSO algorithm with the constriction factor can be considered as a
special case of the PSO algorithm with inertia weight while the three parameters
are connected through (13.7). When Clerc’s constriction method is used, j is
commonly set to 4.1 and the constant multiplier k is approximately 0.729. This is
equivalent to the PSO with inertia weight when w  0:729 and c1 ¼ c2 ¼ 1:49445.
Since the search process of a PSO algorithm is non-linear and complicated, a PSO
with well-selected parameter set can have good performance, but much better
performance could be obtained if a dynamically changing parameter is well
designed. Generally, the PSO should favour global search ability at the beginning
of PSO running while it should favour local search ability at the end of PSO run-
ning. Shi and Eberhart (1998, 1999) first introduced a linearly decreasing inertia
weight to the PSO over the course of PSO, then they further designed fuzzy systems
to non-linearly change the inertia weight (Shi and Eberhart 2001a, 2001b). In
another study, an inertia weight with a random component 0:5 þ rand 
ð Þ=2:0
½

rather than time decreasing was utilised. This produces a randomly varying number
between 0.5 and 1.0, with a mean of 0.75 which is similar to Clerc’s constriction
factor described above (Shi and Eberhart, 2001b). Ratnaweera et al. (2004) intro-
duced time-varying acceleration coefficients (TVAC) in addition to the time-
varying inertia weight factor in PSO to improve its performance after a predefined
number of generations. The mathematical representation of this modified PSO is
Multi-objective particle swarm optimisation control
383

given as:
vid ¼ w  vid þ c1  rand 
ð Þ  pid  xid
ð
Þ þ c2  Rand 
ð Þ  pgd  xid


(13.8)
where w, c1, and c2 are given by:
w ¼ w2 þ w1  w2
ð
Þ  MAXITER  iter
ð
Þ=MAXITER
c1 ¼ c1i þ c1f  c1i


 iter=MAXITER
c2 ¼ c2i þ c2f  c2i


 iter=MAXITER
(13.9)
where w1 and w2 are the initial and final values of the inertia weight, respectively,
c1i; c1f ; c2i, and c2f are constants, iter is the current iteration number and MAXITER
is the maximum number of allowable iterations.
Shi and Eberhart (1999) have observed that the optimal solution can be
improved by varying the value of w from 0.9 at the beginning of the search to 0.4 at
the end of the search for most problems. An improved optimum solution for most of
the benchmarks was observed when changing c1 from 2.5 to 0.5 and changing c2
from 0.5 to 2.5, over the full range of the search (Ratnaweera et al., 2004).
13.3
Multi-objective particle swarm optimisation
Most real-world search and optimisation problems generally require multiple
objectives, often conflicting in nature, to be satisfied simultaneously. Evolutionary
algorithms for multi-objective optimisation can effectively generate a wide range
of solutions in such cases where analytical or conventional methods usually fail.
The success of evolutionary algorithms in multi-objective problems has attracted
the attention of researchers. As a result, a wide variety of algorithms have been
proposed in recent years, mainly to improve the search capability in multimodal
and higher dimensional problems and to reduce computational costs.
Ray and Liew (2002) have presented an algorithm that uses Pareto dominance
and combines concepts of evolutionary techniques with the particle swarm. The
approach uses crowding to maintain diversity and a multi-level sieve to handle
constraints. The non-dominated particles are ranked based on Pareto ranking and
stored as a set of leaders (SOL). Selection of a leader from the SOL is done with
proportional selection to ensure that SOL members with a larger crowding radius
have a higher probability of being selected as leaders. The process in turn results in
a spread along the Pareto front.
Hu and Eberhart (2002) have presented an algorithm that optimises only one
objective at a time using a scheme similar to lexicographic ordering (Coello et al.,
2002). Lexicographic ordering tends to be useful only when few objective functions
are used (two or three), and it may be sensitive to the ordering of the objectives.
The approach reported by Fieldsend and Singh (2002) uses an unconstrained
elite archive to store the non-dominated individuals found in the search process.
The archive interacts with the primary population in order to define local guides.
384
Flexible robot manipulators: modelling, simulation and control

This approach also uses a ‘‘turbulence’’ operator that is basically a mutation
operator and acts on the velocity value used by PSO. The approach seems to have
problems with multi-frontal problems.
Parsopoulos and Vrahatis (2002) have presented an algorithm that adopts an
aggregating function. They have implemented three approaches; a conventional
linear aggregating function, a dynamic aggregating function, and the bang–bang
weighted aggregation approach (Jin et al., 2001) in which the weights are varied in
such a way that concave portions of the Pareto front can be generated. Mostaghim
and Teich (2003) proposed a sigma method in which the best local guides for each
particle are adopted to improve the convergence and diversity of a PSO approach
used for multi-objective optimisation. They also use a ‘‘turbulence’’ operator, but
applied to decision variable space. The idea of the sigma approach is similar to
compromise programming (Coello et al., 2002). The use of the sigma values
increases the selection pressure of PSO. This may cause premature convergence in
some multi-frontal problems. Hu et al. (2003) adopted a secondary population
(called ‘‘extended memory’’) and introduced some further improvements to their
dynamic neighbourhood PSO approach (Hu and Eberhart, 2002). Li (2003) pre-
sented an approach that incorporates the main mechanisms of the NSGA-II (Deb
et al., 2002) into PSO. It combines the population of particles and all the pbest
positions of each particle, and selects the best from them to form the next popu-
lation. It also selects the leaders randomly from the leaders set based on both a
niche count and a crowding distance. The proposed approach showed a very
competitive performance with respect to the NSGA-II.
Coello et al. (2004) have presented an approach that adopts a Pareto-based
selection scheme combined with an adaptive grid (similar to Pareto archived evo-
lution strategy, Knowles and Corne, 2000). The adaptive grid is adopted both to
store the non-dominated solutions found during the search and to distribute them
uniformly along the Pareto front. It also uses a mutation operator that acts both on
the particles of the swarm, and on the range of each design variable of the problem
to be solved. In more recent work, Toscano and Coello (2004) adopted clustering
techniques in order to divide the population of particles into several swarms in
order to have a better distribution of solutions in decision variable space.
13.4
Multi-objective PSO algorithms
The basic PSO algorithm and some of its variants discussed in Section 13.2 deal
with only a single objective. In order to handle more objectives, some changes need
to be made in the operation of a single objective PSO. For ease of discussion,
consider the dynamic equation of a single objective PSO, with inertia coefficient
given in (13.3) and (13.4).
The selection of pid and pgd is straightforward in case of a single objective
optimisation problem; both terms are selected based on the objective function
either minimum or maximum value, depending on problem concerned. In case of a
multi-objective optimisation problem, there is a wide range of non-dominated
Multi-objective particle swarm optimisation control
385

solutions, commonly known as Pareto optimal set. So a single objective PSO for-
mulation, such as (13.3), cannot be used in its original form for multi-objective
optimisation problems. The reason is that the fitness of any particle in a multi-
objective optimisation problem can no longer be related or expressed in terms of a
single objective because an optimal performance in one objective domain may
result in unacceptably low performance in one or more of the remaining objectives.
So the main challenge, in designing a multi-objective PSO algorithm, is to select
pbest and gbest for each particle so as to result in a wide range of solutions that
trade-off among the conflicting objectives. Most of the algorithms usually vary in
the manner pbest and gbest are selected in a multi-objective domain.
Two multi-objective PSO (MOPSO) algorithms are introduced in this section.
Both algorithms use the same approach for selection of gbest, and they vary in the
selection of pbest.
13.4.1
Selection of gbest
Coello et al. (2004) select gbest for each particle from an external archive that
contains non-dominated solutions. The archive is controlled by an adaptive grid
mechanism and gbest for each particle is selected based on fitness sharing and
roulette wheel selection method. In the algorithm presented in this section, an
approach that combines external archive and non-dominated fronts of the current
population for selection of gbest for each particle is used. An external archive and
associated control mechanism, as used by Coello et al. (2004), is also employed
here for later discussion. The technique is illustrated in Figures 13.2 and 13.3.
For a two-objective optimisation problem, assume that at any generation,
Figure 13.2 shows the state of the external archive and solutions of the current
2
12
4
8
6
3
1
11
7
5
10
9
14
13
Objective-2
Objective-2
Archive of non-dominated
solutions
Solutions of current particles
Objective-1
Objective-1
Figure 13.2
External archive and solutions of current particles in a 2-D objective
domain
386
Flexible robot manipulators: modelling, simulation and control

particles in the objective domain. The dark circles inside a 2-D grid structure
indicate the non-dominated solutions found so far in the optimisation process
while circles on the right represent solutions of current particles in a 2-D objective
domain and the number associated with them indicates index of the particles in the
initial population. The current solutions are sorted based on Pareto dominance and
several non-dominated fronts (ND fronts) are formed as shown in Figure 13.3. For
example, solutions of particles: 5, 10, 9, 14, and 13 form ND front-1. If these
solutions are removed from the objective domain, then particles: 7, 1, 12, and 2
form the next non-dominated front which is represented as ND front-2. In a similar
manner, other ND fronts are formed for the remaining solutions/particles. It is
noted that a single particle may form one ND front as it happens in the case of ND
front-3 (particle-11) and ND front-5 (particle-4).
Once all the ND fronts are formed the selection procedure of gbest for each
particle can effectively begin. For each particle on ND front-1, the corresponding
gbest is selected from the external archive based on fitness sharing and roulette
wheel selection method (see Figure 13.3). This method can be elaborated in the
following way.
The external archive is divided into grid like structures. For a two-objective
optimisation problem, a single cell (rectangular structure) may be called a hyper-
parallelpid. Each hyperparallelpid is assigned a fitness equal to the result of
dividing any number (20 in the following experiments) by the number of particles
that they contain. This aims to decrease the fitness of those hyperparallelpids that
contain more particles and it can be seen as a form of fitness sharing (Deb and
Goldberg, 1989). Based on these fitness values, then a hypercube is selected by
roulette-wheel selection method. If the selected hyperparallelpid contains more
13
5
10
9
14
2
12
1
7
11
6
8
3
4
Objective-2
Objective-2
ND front-1
ND front-2
ND front-3
ND front-4
Archive of non-dominated
solutions
Solutions of current particles
ND front-5
Objective-1
Objective-1
Figure 13.3
Schematic diagram for finding gbest guide for particles in a multi-
objective PSO
Multi-objective particle swarm optimisation control
387

than one particle, then a particle is selected randomly. If the hypercube contains
only one particle, then it is selected automatically.
For particles on the remaining fronts, i.e., ND front-2, 3, 4, and 5: gbest of each
particle is selected in the following way.
At first, shared fitness of each particle in the current population is calculated
based on the exact non-dominated sorting GA (NSGA) fitness assignment
scheme which was adopted by Srinivas and Deb (1994). In this scheme, fitness is
assigned according to non-dominated sets and better non-dominated sets are
emphasised. Moreover, performing sharing in the solution space allows main-
taining phenotypically diversity among the particles (Deb, 2001). Then, for each
particle on ND front-2, corresponding gbest is selected from particles lying on
the immediate lower front (better solutions), i.e., ND front-1, based on shared
fitness and roulette wheel selection method (see Figure 13.3). Widely spaced
solutions on any ND front usually have higher shared fitness values compared to
crowded ones and have higher probability to be selected as gbests for particles
lying on immediate higher ND front. This process continues for particles
residing on the remaining ND fronts. If there is only one particle on any ND
front, for example, ND front-3 (particle 11), then this is selected as gbest for
particles lying on the immediate higher front, for example, ND front-4 (particles
8, 6, and 3).
The external archive keeps non-dominated solutions, found through the opti-
misation process and, at any stage, are usually considered as the output of the
multi-objective optimisation algorithm. The number of solutions that this archive
can contain is limited. In order to maintain diversity within limited number of
solutions and not to leave out any better solutions generated along the optimisation
process, an adaptive grid mechanism and an archive controller are utilised.
13.4.2
The archive controller
The function of the archive controller is to decide whether a certain solution should
be added to the archive or not. The decision-making process is the following
(Coello et al., 2004):
(a)
The non-dominated solutions found at each generation are compared (on a
one-per-one basis) with respect to the contents of the external archive which,
at the beginning of the search will be empty.
(b)
If the external archive is empty, then the current solution is accepted.
(c)
If this new solution is dominated by an individual within the external archive,
then such a solution is automatically discarded.
(d)
If none of the elements contained in the external population dominates the
solution wishing to enter, then such a solution is stored in the external archive.
(e)
If there are solutions in the archive that are dominated by the new element,
then such solutions are removed from the archive.
(f)
Finally, if the external population has reached its maximum allowable capa-
city, then the adaptive grid procedure is invoked.
388
Flexible robot manipulators: modelling, simulation and control

13.4.3
An adaptive grid
In order to produce well-distributed non-dominated solution set, an adaptive grid
mechanism is utilised as adopted in Coello et al. (2004) and Knowles and Corne
(2000). The basic idea is to use an external archive to store all the solutions that are
non-dominated with respect to the contents of the archive. The objective domain,
for a two-objective optimisation problem, is divided into regions (hyperpar-
allelpids) as shown in Figure 13.4. The insertion process of a new non-dominated
solution in the adaptive grid, when the new solution remains within the current
boundaries of the grid, is illustrated in Figure 13.4. First a solution of minimum
shared fitness value is removed from the archive, i.e., from a hyperparallelpid
containing maximum number of solutions. Then the new solution is inserted into
the adaptive grid.
Figure 13.5 illustrates the insertion process of a new non-dominated solution in
the adaptive grid when the new solution lies outside the current boundaries of the
grid. It is noted that the grid has to be recalculated and each individual within it has
to be relocated in this case which involves huge computations.
13.4.4
Fitness sharing
Fitness sharing lowers the fitness of each element of the population by an amount
nearly equal to the number of similar individuals in the population. Typically, the
shared fitness f 0
i of an individual i with fitness fi is simply
f 0
i ¼ fi
mi
;
(13.10)
where mi is the niche count which measures the approximate number of individuals
with whom the fitness fi is shared. The niche count is calculated by summing a
Objective-2 
0 
0 
1 
1 
2 
2 
3 
3 
4 
4 
5 
0 
1 
2 
3 
4 
5 
5 
Objective-1 
New solution = [1.5,1.5] 
Objective-2 
0 
1 
2 
3 
4 
5 
Objective-1 
New solution = [1.5,1.5] 
Figure 13.4
Graphical representation of the insertion of a new non-dominated
solution in the adaptive grid when the new solution remains within
the current boundaries of the grid
Multi-objective particle swarm optimisation control
389

sharing function over all members of the population (Deb, 2001):
mi ¼
X
N
j¼1
sh dij


;
(13.11)
where N denotes the population size and dij represents the distance between indi-
viduals i and j. Thence, the sharing function (sh) measures the similarity level
between two elements of the population. It returns one if the elements are identical,
zero if their distance dij is higher than a threshold of dissimilarity, and an inter-
mediate value at intermediate level of dissimilarity. The most widely used sharing
function is given as follows:
sh dij


¼
1 
d
ss

	a
;
if d  ss;
0;
otherwise;
8
<
:
(13.12)
where ss denotes the threshold of dissimilarity (the niche radius) and a is a constant
parameter which regulates the shape of the sharing function. Genotypic similarity is
related to bit-string representation and is generally the Hamming distance. Pheno-
typic similarity is directly linked to real parameters of the search space. It can be
the Euclidean distance for instance. Sharing based on phenotypic similarity may
give slightly better results than sharing with genotypic similarity. The distance dij
between two individuals i and j is characterised by a similarity metric based on
either genotypic or phenotypic similarity. The parameter d is the distance between
any two solutions in the population. The above function takes a value in [0, 1],
depending on the value of d and ss. If d is zero (meaning that two solutions are
identical or their distance is zero), shðdÞ ¼ 1. This means that a solution has full
0 
1 
2 
3 
4 
5 
New solution = [5.5, 0.2] 
Objective-2 
0 
0 
1 
1 
2 
2 
3 
3 
4 
4 
5 
0 
1 
2 
3 
4 
5 
5 
New solution = [5.5, 0.2] 
Objective-1 
Objective-1 
Figure 13.5
Graphical representation of the insertion of a new non-dominated
solution in the adaptive grid when the new solution lies outside the
current boundaries of the grid
390
Flexible robot manipulators: modelling, simulation and control

sharing effect on itself. On the other hand, if d 	 ss (meaning that two solutions are
at least a distance ss away from one another), shðdÞ ¼ 0. This means that two
solutions which are a distance of ss away from each other do not have any effect on
each other. Any other distance d between two solutions will have a partial effect
on each. If a ¼ 1 is used, the effect linearly reduces from one to zero. Thus, it is
clear that in a population, a solution may not get any sharing effect from some
solutions, may get partial sharing effect from few solutions, and will get a full
effect from itself.
The sharing function shðdÞ defined in (13.12) introduces two user-defined
parameters a and ss. Although a does not have too much effect on the performance
of the sharing function method, the second parameter ss must be set right in order
to define the niche size of the optimum. Ideally, the latter is directly related to the
level of attraction of the optimum. Since this information is not available in an
arbitrary problem, Deb and Goldberg (1989) suggested different ways to set
this parameter. In most applications, an a ¼ 1 or 2 is used. Genotypic similarity
is related to bit-string representation and is generally the Hamming distance.
Phenotypic similarity is directly linked to real parameters of the search space. It can
be the Euclidean distance for instance. For phenotypic sharing, the Euclidean
distance dij between two decision variable vectors XðiÞ and Xð jÞ can be calculated
as (Deb, 2001):
dij ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
X
n
k¼1
xðiÞ
k  xð jÞ
k

2
s
(13.13)
Considering that the n-dimensional hypersphere of radius r must be divided
among q optima equally (each small hypersphere having a radius ss), this
reduces to:
sshare ¼ rﬃﬃﬃq
np
(13.14)
r ¼ 1
2
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
X
n
k¼1
xðUÞ
k
 xðLÞ
k

2
s
(13.15)
Thus, an estimate of ss for introducing q equispaced niches in the search space is:
sshare ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
P
n
k¼1
xðUÞ
k
 xðLÞ
k

2
s
2
ﬃﬃﬃq
np
(13.16)
For n ¼ 1 (single variable problems), the above equation reduces to:
ss ¼
xðUÞ
k
 xðLÞ
k


2q
(13.17)
Multi-objective particle swarm optimisation control
391

If normalised distance values are used:
dij ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
X
n
k¼1
xðiÞ
k  xðjÞ
k

.
xðUÞ
k
 xðLÞ
k


h
i2
s
(13.18)
the following normalised sharing parameter value can be employed:
sshare ¼ 0:5ﬃﬃﬃq
np
(13.19)
13.4.5
Selection of pbest
13.4.5.1
Algorithm 13.1
The local guide or pbest for each particle in Algorithm 13.1 is selected based on
Pareto-dominance. The method can be illustrated as follows:
Assume that, at generation t, a particle, X i
t , with objective function vector
f X i
t


¼ f1; f2; . . . ; fk
½
, where k is the number of objectives to be optimised, has
local guide, pbesti
t ¼ pi. At generation t þ 1, particle and corresponding objective
function vector are X i
tþ1 and f X i
tþ1


¼ j1; j2; . . . ; jk
½
, respectively. If the solu-
tion at generation t þ 1 totally dominates the solution previously obtained at gen-
eration t, i.e., fj < jj (for minimisation problem), where j ¼ 1; 2; . . . ; k, then
pbesti
tþ1 is updated with X i
tþ1, otherwise it remains the same. This can be shown as:
pbesti
tþ1 ¼
X i
tþ1
if f X i
tþ1


> f X i
t


pi
otherwise
(
(13.20)
13.4.5.2
Algorithm 13.2
The local guide, pbest i½  for each particle in Algorithm 13.2 is selected based on the
shared fitness value of the particle as adopted in non-dominated sorting GA-II
(NSGA-II) (Deb et al., 2002). In this method, after evaluation, particles are sorted
based on dominance and several non-dominated fronts are formed, as shown in
Figure 13.3. Then a raw fitness value is assigned (predefined number, may be
greater or equal to the number of individuals in the population) to particles on ND
front-1, which is the same for all. Then crowding distance and niche count are
calculated for each particle in the solution space, as described in Section 13.4.4.
The raw fitness is divided by the niche count of that particle and thus, shared fitness
is calculated. In this method, particles crowded in the solution space have lower
values as shared fitness compared to those remain widely separated. The raw fitness
value of the next front, ND front-2, is assigned slightly lower value than the particle
having minimum shared fitness value of ND front-1. Then shared fitness is calcu-
lated in a similar manner and this process continues for the remaining particles and
remaining ND fronts. Thus it is ensured that better solutions (residing on lower ND
fronts) always have higher shared fitness values than those lying on higher ND
fronts. Once the shared fitness of each particle is calculated it is compared with
392
Flexible robot manipulators: modelling, simulation and control

shared fitness value of the same particle obtained in the previous generation. The
solution with higher shared fitness value is selected as the local guide. This can be
elaborated as follows.
Assume that, at generation t, a particle, X i
t , with shared fitness value f 0 X i
t


,
has local guide, pbesti
t ¼ pi. At generation t þ 1, position of the particle and
corresponding shared fitness value are X i
tþ1 and f 0 X i
tþ1


, respectively. Thus
pbesti
tþ1 is calculated as:
pbesti
tþ1 ¼
X i
tþ1
if f 0 X i
tþ1


> f 0 X i
t


pi
otherwise
(
(13.21)
13.4.5.3
Constraints handling
A relatively simple method is applied to handle constraints. If an objective of a
particle falls outside the acceptable pre-set range, then that solution is penalised by
adding a very big number with the objective value. Thus, the probability of this
solution to be selected as local guide in the following generations is reduced.
On the other hand, this method increases the probability of acceptable solutions to
be selected as local guides and as a result, can guide the optimisation process
towards feasible solution region.
13.4.6
Steps of the MOPSO algorithm
The steps of the Algorithm 13.1/13.2 is given below, where the difference between
the two algorithms is in the selection of pbest, as described above.
1.
Initialise the population, X, speed of the particles, V;
For i ¼ 1 to N; N ¼ number of particles
Initialise X i½ , V i½ ; within a range of Xmin; Xmax
½
 and Vmin; Vmax
½
, respectively.
2.
Set acceleration constants c1 ¼ c2 ¼ 1:5;
3.
Set the limiting value of inertia coefficient, w, as wmax ¼ 1:4 and wmin ¼ 0:1.
4.
Evaluate each of the particles in X i½ .
5.
Store the non-dominated solutions in the external archive.
6.
Initialise the memory of particles (local guides), pbest i½ 
For i ¼ 1 to N
pbest i½  ¼ X i½ 
7.
Calculate the global guide, gbest i½ , for each particle using external archive and
non-dominated fronts of the current population, as discussed.
8.
Set maximum generation, MAXITER, and initialise generation counter, iter ¼ 1
9.
WHILE iter  MAXITER
ð
Þ DO
(a)
Calculate the speed of the particles using the expression:
V i½  ¼ w  V i½  þ c1  rand 
ð Þ  pbest i½   X i½ 
ð
Þ
þ c2  Rand 
ð Þ  gbest i½   X i½ 
ð
Þ
(13.22)
where rand 
ð Þ and Rand 
ð Þ are two random functions in the range [0, 1]
and inertia coefficient, w, decreases with increasing generation and is
Multi-objective particle swarm optimisation control
393

calculated as:
w ¼ wmin þ wmax  wmin
ð
Þ  MAXITER  iter
ð
Þ=MAXITER
(13.23)
(b)
Limit the speed of particles, V i½ , within the predefined range of
Vmin; Vmax
½
.
(c)
Calculate the new positions of the particles adding speed obtained in
(13.22) with previous positions as:
X i½  ¼ X i½  þ V i½ 
(13.24)
(d)
Limit the positions of, X i½ , within the predefined range of Xmin; Xmax
½
 so
that the particles remain within the valid search space.
(e)
Evaluate each particle in X i½ .
(f)
Update the external archive and invoke the adaptive grid controller, if
necessary.
(g)
Calculate the global guide, gbest i½ , for each particle using external
archive and non-dominated fronts of the current population.
(h)
Update or calculate local guide, pbest i½ , of each particle.
(i)
Increment the loop counter, iter
END
13.5
Case study: design of command shaping
for vibration control
In Chapter 12, multi-modal (three-mode) command shapers were designed to
reduce vibration at the end-point of a single-link flexible manipulator. For a three-
mode command shaper, four sequential convolution operations were performed
between sequences of impulses which required large volume of computation. In
order to reduce computational costs of the conventional multimodal command
shaping technique, an alternative technique was devised based on multiple gain and
delay units in order to reduce vibration of a multi-modal system.
The MOPSO algorithms described in the previous section are used to find a
set of solutions that trade-off between two conflicting objectives: RMS value of
end-point acceleration and rise time of the hub angle response. The current design
example can be considered as an extension of the previous approach, from uni-
modal to multimodal in terms of shaping technique and low dimension to high
dimension.
The effectiveness of a gain-delay based command shaping technique depends
on a suitable selection of a number of delay and gain elements and their
corresponding values. For design simplicity, the number of delay units and gain
elements are kept the same. Although the flexible manipulator has infinite number
of modes with associated damping ratios, only the first three modes appear to be
dominant at lower frequency range (15, 35, and 65 Hz; see Chapter 12) that con-
tribute mostly to the flexible motion of the system. In order to reduce vibration,
394
Flexible robot manipulators: modelling, simulation and control

mainly, at these three resonance modes and to design a command shaper having all
attributes of a conventional ZVD type, both the numbers of gain elements and delay
units are chosen as 9 (3 modes  3 impulses per mode). In order to minimise delay
in system’s response, the first delay unit is set to zero, i.e., D1 ¼ 0. So the number
of delay units is effectively 8, denoted as D2; D3; . . . ; D9 and all nine gain values are
denoted as K1; K2; . . . ; K9.
Assuming that, no prior information is available about the natural frequencies
and associated damping ratios, the MOPSO algorithms are applied to optimise
values of gain elements and delay units to reduce vibration at end-point with a
satisfactory speed of response.
13.5.1
Implementation
Considering the complexity of MOPSO optimisation process and the required
amount of computation, the design procedure was implemented off-line. A
dynamic model of the single-link flexible manipulator based on finite element (FE)
method (Tokhi et al., 1997) was utilised. This was implemented within Simulink.
Discrete digital filters were used with all the three outputs of the flexible mani-
pulator model as discussed in Chapter 12. The MOPSO algorithms and objective
functions were implemented in MATLAB .m files.
13.5.2
Parameter encoding
A swarm of 20 particles having 17 elements each, i.e., 10  17 was created
randomly within the range [0, þ1]. The first nine elements of each individual were
normalised and assigned to gain elements, K1; K2; . . . ; K9. In MATLAB/Simulink,
the delay units are usually represented in terms of number of samples which are
integer numbers. So the remaining eight elements of each individual were con-
verted into integer numbers by a conversion factor of 0.01 using a ‘‘round’’
operation and then assigned to D2; D3; . . . ; D9.
13.5.3
Objective functions
The unshaped bang–bang signal is delayed and multiplied based on values of delay
units and gain elements. The shaped command is formed by adding output signal of
gain units and applied to the system model. On completion of the simulation, the
hub angle response and end-point accelerometer are recorded. The filtered end-
point acceleration output is considered as the residual error. Root mean squared
(RMS) value of this residual error is expressed as:
RMSepa ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
1
N
X
N
i¼1
ðyepaðiÞÞ2
v
u
u
t
;
(13.25)
where yepaðiÞ represents the ith sample at end-point and N the total number of
samples. This is used as one of the objectives of MOPSO optimisation process,
which provides an overall quantitative measurement of end-point vibration.
Multi-objective particle swarm optimisation control
395

Rise time of hub angle response is taken as another objective in this two-objective
optimisation problem. The goal values of the objectives are chosen in the same way
as discussed in Chapter 12 and are shown in Table 13.1.
13.5.4
Solutions and results
The acceleration coefficients were set as c1 ¼ c2 ¼ 1:5, and the inertia coefficient,
w, was gradually decreased from 1.4 to 0.1 with generation. The optimisation
process was run for a maximum generation of 500. The maximum number of
solution that the external archive can keep was limited to 50. In order to maintain
diversity among the solutions in external archive, an adaptive grid mechanism was
employed. For a two-objective optimisation problem, the objective domain is
divided into 49 (7  7) regions, called hyperparallelpids, as shown in Figure 13.4.
Both MOPSO algorithms (Algorithms 13.1 and 13.2) with a population size of 20
individuals were run separately on this problem six times, each time for 500 gen-
erations. At run-6, the Pareto optimal sets for the two algorithms at generation 500
is shown in Figure 13.6, where objective-1 is represented on the horizontal axis and
objective-2 on the vertical axis. It is noted that a number of solutions of both the
algorithms overlapped each other, either fully or partially in the objective domain.
Table 13.1
Two objectives and goal values
Objective
Description
Goal value
1
RMS value of end-point acceleration
 0.2
2
Rise time of hub angle response
 1.2 s
1.13
1.128
1.126
1.124
Rise time (s)
1.122
1.12
1.118
1.116
0.06
0.08
0.1
RMS of end-point acceleration
0.12
Example: solution-1
Algorithm 13.2
Algorithm 13.1
0.14
0.16
0.18
Figure 13.6
Pareto optimal sets at generation 500 (at run-6)
396
Flexible robot manipulators: modelling, simulation and control

To validate the design approach as well as solution sets, one example solution
(solution-1) was selected on the Pareto front, as shown in Figure 13.6. Unshaped
bang–bang input and shaped signal based on solution-1 are shown in Figure 13.7.
The hub angle responses for unshaped bang–bang and shaped signal based on
solution-1 are presented in Figure 13.8 where for clarity, a section of the diagram
has been enlarged in order to highlight the oscillation in hub angle response.
40
20
0
Amplitude
–20
–40 0
1
2
3
Time (s)
4
5
Bang–bang input
Shaped command
Figure 13.7
Bang–bang input and shaped command input for solution-1
1,000
Bang–bang response
Shaped response
800
Hub angle response (deg)
600
400
200
00
1
2
887
886.5
886
885.5
885
884.5
884
883.5
883
2.5
3
3.5
4
Time (s)
3
4
5
Figure 13.8
Hub angle response to bang–bang input and shaped command for
solution-1
Multi-objective particle swarm optimisation control
397

A large oscillation is observed in the hub angle response when bang–bang signal
was used as the input and the system takes long time to settle to a steady position.
It is noted that oscillation in the hub angle response was almost eliminated with
shaped command and that it settled quickly to the steady state. So the shaped
command can improve several time domain performance measures, such as, peak-
to-peak oscillation and settling time with a slight delay in system’s response. This
reduction in oscillation at hub angle is also reflected in the end-point acceleration
of the flexible link. End-point acceleration of the flexible manipulator due to
unshaped bang–bang and shaped signals based on solution-1 are recorded and
presented in the time domain in Figure 13.9. It is observed that oscillation was
reduced significantly with shaped command and the end-point of the link settled
quickly to a steady state.
Table 13.2 shows performance measures of the hub angle response and of the
end-point acceleration response of the system with shaped input based on solution-1
and with the unshaped bang–bang input. For solution-1, peak-to-peak amplitude of
hub angle response was 0.108. It is interesting to note that, for solution-1, the peak-
to-peak oscillation in hub angle response was much lower compared to that due to
unshaped bang–bang input which was 3.1656. For solution-1, rise time of hub angle
response was 1.116 which is slightly higher compared to that due to unshaped
bang–bang input. This is also evident from time domain response of the hub angle
as shown in Figure 13.8. Due to lower oscillation, the manipulator settled relatively
faster to a steady state. The settling time of hub angle response for solution-1 was
2.39 s whereas for the system response with unshaped bang–bang input, this time
was 3.9 s. The steady-state error was recorded as zero.
4
2
0
–2
–4
0
1
2
3
Time (s)
mm/s2
4
5
Bang–bang response
Shaped response
Figure 13.9
End-point acceleration due to bang–bang input and shaped
command for solution-1
398
Flexible robot manipulators: modelling, simulation and control

The RMS value of end-point acceleration is considered as a quantitative
measure of overall vibration at the end-point of the flexible manipulator. For
solution-1, this was 0.084 which is much lower compared to that with unshaped
bang–bang input (¼0.65). The ?-norm ( yepaðiÞ


?) of the end-point acceleration
gives the maximum value of the signal at any instant. For solution-1, this value was
0.438 whereas for system response with bang–bang input, this value was 4.079.
Thus, as observed, the ?-norm of end-point acceleration was much lower with
command shaping compared to that without command shaping. For solution-1, the
end-point of the manipulator settled to a steady state in 0.57 s which is nearly 1/4th
compared to system response with unshaped bang–bang input.
The time domain performance measures give a good indication of overall
reduction of vibration in system’s response, both quantitatively and qualitatively.
Moreover a frequency domain representation is presented in order to highlight the
dominant modes of the system and corresponding reduction at those modes. The
frequency domain representations of the bang–bang input and the shaped command
are shown in Figure 13.10 and the corresponding hub angle response and end-point
acceleration response are shown in Figures 13.11 and 13.12, respectively.
It is clear from the frequency domain representation of bang–bang input (see
Figure 13.10) that, the energy level was higher at lower frequency region and
decreased logarithmically at higher frequencies. On the contrary, several troughs
occurred in the frequency domain representation of the shaped command indicating
a decrease in energy level at those frequencies. Most importantly, the first and
second troughs occurred exactly at 15 and 35 Hz, respectively, where the first two
main resonance modes of the system lie. As a result, the shaped command, when
applied to the system, reduced input energy to the system at those two dominant
modes to a large extent, as is evident in Figures 13.11 and 13.12. It is noted that, a
decrease in energy level was observed at the third dominant mode (65 Hz) of the
system although the third trough in the shaped command appeared slightly away
from the desired location. It is thus evident from the frequency domain repre-
sentation of the system response with shaped command that, energy was highly
reduced at the dominant modes leading to significant reduction in vibration. The
attenuation, at the first three dominant modes of the system, was measured, both for
hub angle response and end-point acceleration, and this is presented in Table 13.3.
Table 13.2
Performance measures of solution-1 and unshaped bang–bang
System
input
Hub angle response
End-point acceleration
Maximum
oscillation
(peak–peak)
Rise
time
(s)
Settling
time (s)
Steady-
state
error
RMS
value
Maximum
amplitude
yepaðiÞ


‘
Settling
time (s)
Bang–bang
3.1656
1.116
3.9
0
0.65
4.079
1.97
Solution-1
shaped
0.108
1.12
2.39
0
0.084
0.438
0.57
Multi-objective particle swarm optimisation control
399

The attenuations were measured relative to the system response with unshaped
bang–bang signal as the input. For hub angle response, the attenuation was recor-
ded as 30.36, 17.6, and 9.91 dB at mode-1 (15 Hz), mode-2 (35 Hz), and mode-3
(65 Hz), respectively. For end-point acceleration, the attenuation was recorded as
30.27, 17.8 and 10 dB at mode-1, mode-2, and mode-3, respectively. This large
Power spectral density
100
10–5
Frequency (Hz)
20
40
60
80
100
Bang–bang response
1st mode, 15 Hz
2nd mode, 35 Hz
3rd mode, 65 Hz
Shaped response
Figure 13.11
Spectral density of hub angle response to bang–bang input and
shaped command for solution-1
106
Power spectral density
104
102
100
10–2
0
20
(35 Hz)
Troughs
(15 Hz)
40
60
Frequency (Hz)
80
Bang–bang input
Shaped command
100
Figure 13.10
Spectral density of bang–bang input and shaped command for
solution-1
400
Flexible robot manipulators: modelling, simulation and control

amount of attenuation in vibration confirms the effectiveness of the algorithms and
the control strategy.
13.6
Summary
An overview of particle swarm optimisation and process of development of multi-
objective PSO algorithms has been presented. Two MOPSO algorithms, namely,
Algorithm 13.1 and Algorithm 13.2, have been introduced. In both algorithms, the
current particles are sorted into number of non-dominated fronts. Then global
guides of current particles are selected both from an external archive and non-
dominated fronts. In Algorithm 13.1, local guides are selected based on dominance
principle whereas for Algorithm 13.2, these are selected based on shared fitness
value. A case study example has been provided using these algorithms to design
Frequency (Hz)
20
0
102
100
10–2
10–4
10–6
40
60
80
100
Bang–bang response
Power spectral density
Shaped response
Figure 13.12
Spectral density of end-point acceleration due to bang–bang input
and shaped command for solution-1
Table 13.3
Vibration reduction at first three dominant modes of the system
System response
Vibration reduction at dominant modes
of the system (dB)
First mode
(15 Hz)
Second mode
(35 Hz)
Third mode
(65 Hz)
Hub angle
30.36
17.6
9.91
End-point acceleration
30.27
17.8
10
Multi-objective particle swarm optimisation control
401

command shapers for vibration reduction of a flexible manipulator system. The
command shapers have been designed based on gain and delay units and MOPSO
algorithms have been used to obtain non-dominated solutions (values of gain and
delay units) commonly known as Pareto optimal sets that trade-off among con-
flicting objectives to be achieved in the design procedure. It has been demonstrated
through the case study example that the MOPSO algorithms can effectively be used
in designing and tuning controllers.
402
Flexible robot manipulators: modelling, simulation and control

Chapter 14
Evolutionary neuro-fuzzy control
This chapter focuses on the use of genetic algorithms (GAs) in the design of FLC.
An approach of adopting genetic algorithm search is adopted to determine optimal
FLC scaling factors. The approach is then extended by adoption of neural network
learning of the scaling factors leading to a neuro-fuzzy control method. This is
further combined with genetic algorithm for optimisation of shape of activation
function of the neural network. Case study experimental investigation exercises are
presented demonstrating the performances of the developed paradigms in the
control of a single-link flexible manipulator system.
14.1
Introduction
Although fuzzy logic controllers have been successfully applied in many complex
industrial processes, they experience a deficiency in knowledge acquisition and
rely to a great extent on empirical and heuristic knowledge, which, in many cases,
cannot be objectively elicited. One of the most important considerations in
designing fuzzy systems is the construction of the membership functions for each
fuzzy set as well as the rule-base. In most existing applications, the fuzzy rules are
generated by an expert in the area. The correct choice of membership functions is
by no means trivial but plays a crucial role in the success of an application. With an
increasing number of inputs and linguistic variables, the possible number of rules
for the system increases exponentially, which makes it difficult for experts to
define a complete set of rules and associated membership functions for a good
system performance. An automated way to design fuzzy systems might be
preferable.
There are many ways to combat problems of this nature. A simple and
straightforward approach is to use clustering algorithms (Bezdek, 1992) or similar
methods to partition the pattern spaces into subspaces with sufficient overlap
among them, then map the centre of each cluster into a rule according to the
definition of fuzzy variables (Abe and Lan, 1995). One disadvantage of this
approach is that the extracted rules are independent of the membership functions
and this does not guarantee a better performance, especially for a complex non-
linear system such as a flexible-link manipulator and systems with large number of
input variables as well. In those cases, however, tuning the membership functions
can improve system’s performance to some extent. Therefore, the design of a fuzzy

system can be formulated as a search problem in a high-dimensional space where
each point in the space represents a rule set, membership function and the corre-
sponding system performance, that is, the performance of the system forms a
hyper-surface in the space according to given performance criteria. Thus, finding
the optimal location of this hyper-surface is a search problem, which is equivalent
to developing the optimal fuzzy system design (Shi et al., 1999). The following
features characterise the hyper-surface:
●
The number of possible fuzzy sets for each variable is unbounded, and it makes
the hyper-surface infinitely large.
●
The hyper-surface is nondifferentiable since changes in the number of fuzzy
sets are discrete and can have discontinuous effect on the fuzzy system’s per-
formance, which restricts application of any derivative-based optimisation
algorithms.
●
The hyper-surface is complex and noisy since the mapping from a fuzzy rule
set to its performance is indirect and dependent on the evaluation method used.
●
Different fuzzy rules and membership functions may have similar performance
making the hyper-surface multi-modal.
●
The hyper-surface is deceptive since similar fuzzy rule sets and membership
functions may have quite different performance.
These characteristics make evolutionary algorithms a more suitable method for
searching the hyper-surface rather many other conventional methods such as hill
climbing search. Efforts have been made to automate the construction of rule-bases
and define the membership functions in various ways using neural networks and
genetic algorithms (Lin and Lee, 1991, 1992, 1994, 1995; Nauck and Kruse, 1992,
1993). In most of the cases, either the rule-base is fixed and the parameters of the
membership functions are adjusted or membership functions are fixed and the rule-
base is optimised by genetic algorithms. Some researchers have optimised the rule-
base, the membership functions, scaling factors and controller parameters, which
seems somewhat redundant.
14.2
Evolutionary fuzzy control
Investigations involving several example applications have demonstrated that GAs
are capable of optimising the membership functions as well as rule-bases of fuzzy
logic controllers. In general, the number of fuzzy rules increases exponentially with
increasing number of input variables or linguistic labels. Hence it is very difficult
to determine and select which rules in such a large rule space are the most
suitable for controlling the process. Secondly, the membership function plays an
important role in determining the control action prescribed and the performance
of the system. In multivariable complex processes, the optimisation and selection of
membership functions will also be very difficult. There are different arguments
on whether the membership functions or rule-bases should be optimised. Based on
the research carried out in this area, these can be divided into the following
404
Flexible robot manipulators: modelling, simulation and control

categories: membership function optimisation, rule-base optimisation and other
parameters optimisation.
The basic idea is to represent the complete set of membership functions by an
individual and to evolve the shape and location of the triangles (or the Gaussian
curves). A triangular membership function can be described by its anchor points on
the abscissa axis and Gaussian membership functions are characterised by centre m
and the width s. Karr describes an application to cart-pole balancing system and
uses a genetic algorithm to evolve the membership functions of a fuzzy controller
(Karr, 1991). In order to evaluate the fitness of a controller, the system is simulated
for a fixed simulation time, repeating the simulation four times for different initial
conditions. The resulting optimised fuzzy logic controller turns out to perform by
far better than the controller based on membership functions designed by a human
expert. These promising results have also been confirmed by an application of the
method for the online control of a laboratory pH system with drastically changing
system characteristics (Karr and Gentry, 1993).
Due to the highly complex and non-linear characteristics of the problem space,
uniform distribution of the fuzzy sets is not optimal. Other ways to tackle the
non-linear distribution should be sought. A natural and better way is to employ
non-linear functions in addition to linear function as membership functions. Natural
choices are Gaussian functions, sigmoid functions, etc. Through inclusion of linear
and non-linear functions, the type of membership function for each fuzzy set will
not be predetermined, but instead be evolved during the design process (Shi et al.,
1999).
The performance of a fuzzy classification system based on fuzzy if–then rules
depends on the choice of fuzzy partition. If a fuzzy partition is too coarse, the
performance may be low. If fuzzy partition is too fine, many fuzzy if–then rules
cannot be generated because of the lack of training patterns in the corresponding
fuzzy subspace. Therefore, the choice of an appropriate fuzzy partition is important
and difficult. To cope with this difficulty, Ishibuchi et al. introduced the concept of
distributed fuzzy if–then rules. They encode all fuzzy if–then rules corresponding
to several different fuzzy partitions into tri-value string {1,0,1} and apply GA’s to
remove the unnecessary rules from fuzzy if–then rules corresponding to the dif-
ferent fuzzy partitions (Ishibuchi et al., 1995). Since each possible rule for each
subspace is coded into the chromosome, the length of the chromosome is very large
when the number of input dimensions and/or of different partitions is large.
Previous works have focused on optimising the FLC parameters and reducing
the number of rules, while Chin and Qi used GAs to search for an optimised subset
of rules maintaining the controller’s performance. GA will eliminate rules that have
no significant contribution to improve the system’s performance, and badly defined
and conflicting rules are also eliminated because their existence degrades the per-
formance of the controller (Chin and Qi, 1998). Huang and Huang used a real-
valued genetic algorithm for a grey prediction system. They segmented the search
space by introducing two populations at the earlier stage of evolution. Each
population is allowed to self-evolve for a few generations and merged into a final
population by selecting half of the best solutions from each population (Huang and
Evolutionary neuro-fuzzy control
405

Huang, 1997). Very often there are dummy rules that have no effect on fuzzy
inference. They become the potential redundant rules in fuzzy system. Lekova et al.
(1998) applied GAs to exclude those redundant rules from a fuzzy system.
Essentially, the problem of dynamically controlling a complex system using
fuzzy controllers can be considered as a multi-parameters optimisation problem. In
general, the main task for controlling a complex process with FLC is to define a
performance response surface, which must be explored by direct search techniques
to locate high performance control outputs. Because fuzzy control systems are
highly non-linear systems, which have high dimensional, multi-model, dis-
continuous response surface, the choice of optimisation technique may not be
obvious and easy. Even when an appropriate classical optimisation algorithm is
available, there are usually various parameters that must be tuned, e.g., the step size
in variable metric technique. In much the same manner, a GA can be used to
generate the rules, which use these membership functions (Chin and Qi, 1998).
Lee and Takagi (1993) encoded membership functions and all rules into
chromosomes, but have a different way to encode the triangular membership
functions. They restrict adjacent membership functions to fully overlap and also
constrain one membership function to have its centre resting at the lower bound-
aries of the input range. The drawback of this approach is that the computational
efficiency of the fuzzy system is lost using a large number of rules and the
robustness decreases with increasing number of rules. Homaifar and McCormick
(1995) reported a simultaneous design of membership function and rule sets for
fuzzy controller, as the membership functions and rule sets are interdependent. The
developed methodology was then applied to a cart-centring problem and truck
backing system.
Qi and Chin (1997) applied genetic algorithms to optimise performance of a
fuzzy controller where controller parameters, scaling factors, membership func-
tions and rule structure were encoded into chromosomes. The controller obtained
integrationaly optimised fuzzy controller for a higher-order system.
14.2.1
PD–PI-like fuzzy control
The advantage of a hybrid PD–PI fuzzy controller developed in the previous
chapter is that it has a separate PD and PI part and their combined effect is like PID
controller. The PD controller provides a response with fast rise time and minimal
peak overshoot and the PI controller has good performance at the steady state that
minimises steady-state error. A second advantage of the hybrid PD–PI controller is
that with five linguistic labels in each input variable it requires two rule-bases each
having 5  5 ¼ 25 rules and thus giving a total of (5  5) þ (5  5) ¼ 50 rules,
which is significantly smaller than that required for a PID controller (125 rules).
A further advantage is that only a set of rules (25 rules) is executed at a time and
thus the processing time is faster than that of a split PID controller where a total of
50 rules are executed to produce the control input. The block diagram of this
switching PD–PI-type controller is reproduced in Figure 14.1.
A set of data was obtained experimentally and split into two separate data sets,
representing change of error during PD control, i.e., before switching point (25 time
406
Flexible robot manipulators: modelling, simulation and control

units) and sum of error during PI control, i.e., for the rest of the time. This is shown
in Figure 14.2. As noted the range of change of error and sum of error are within such
a suitable interval so that they can be brought within a common universe of dis-
course. In the FLC design, the actual value of the inputs does not matter, rather the
fuzzy sets for each linguistic variable are important. Therefore, the aim here is
to unify the fuzzy sets for change of error and sum of error so that a further
Set point
Rule base
Fuzzy
controller
Flexible
manipulator
Output
qd
Δe
∑e
kc
q
u
e
25 rules for PD-part
25 rules for PI-part
Figure 14.1
Block diagram of a PD–PI-like FLC system
0
5
10
15
20
25
–4
–6
–8
–2
0
2
4
6
Time units, 1unit = 0.14 s
Change of error/sum  of  error
Sum of error
Change of error
Figure 14.2
Change and sum of error within a common universe of discourse
Evolutionary neuro-fuzzy control
407

simplification can be achieved in designing the FLC. The initial universes of dis-
course for change error and sum of error can be chosen within the same interval
[25, þ25].
To construct a rule base, the hub angle error, change of angle error, sum of
error and torque input are partitioned into five primary fuzzy sets as:
Hub angle error E ¼ {NB, NS, ZO, PS, PB}
Change of hub-angle error C ¼ {NB, NS, ZO, PS, PB}
Sum of hub-angle error S ¼ {NB, NS, ZO, PS, PB}
Torque U ¼ {NB, NS, ZO, PS, PB}
where E, C, S and U are the universes of discourse for hub-angle error, change of
hub-angle error, sum of hub-angle error and torque input, respectively. The initial
membership functions for inputs and output are shown in Figure 14.3.
The nth rule of the rule base for the PD-type FLC is as:
Rn: IF ðe is EiÞ and ðDe is CjÞ THEN ðu is UkÞ
where Rn, n ¼ 1; 2; . . .; Nmax, is the nth fuzzy rule; Ei Cj and Uk, for i; j; k ¼
1; 2; . . .; 5, are the primary fuzzy sets. The nth rule of the rule base for the PI-like
FLC is as:
Rn: IF ðe is EiÞ and
X
e is Sj


THEN ðu is UkÞ
where Rn, n ¼ 1; 2; . . .; Nmax, is the nth fuzzy rule; Ei Sj and Uk, for i; j; k ¼
1; 2; . . .; 5, are the primary fuzzy sets. At this stage of development two rule-bases
are required as shown in Tables 14.1 and 14.2.
A single common rule-base may be used for the PD–PI-like FLC. A rule of
thumb can help selecting the rule-base for PD–PI-like FLC. The rule-base for
PD-part is used for both the PD- and PI-part of the FLC.
The aim of this stage of development is to optimise the membership functions
using the rule-base of the PD-part. Membership functions are generally accom-
modated within a rule-base during an optimisation procedure. Therefore, optimis-
ing both the membership functions and rule-base is somehow redundant. In this
case a drastic improvement of the performance is not expected but a design
simplification in a systematic way is desired.
14.3
GA-fuzzy control
A block diagram of the GA-fuzzy control is shown in Figure 14.4. A real-valued
genetic algorithm can be used to optimise the parameters of the triangular mem-
bership functions of the input and output fuzzy sets and the rule-base. In a typical
GA the entire set of parents is replaced by their children during reproduction. This
generational replacement technique, however, has some drawbacks. On the one
hand, it may be relatively slow in terms of evolution rate, and on the other hand,
some of the best individuals may not reproduce and their genes may be lost.
408
Flexible robot manipulators: modelling, simulation and control

One possible solution is to modify the reproduction technique so that it replaces
few individuals at a time, i.e., steady-state reproduction. Briefly, this has the fol-
lowing characteristics: (i) it creates few offspring throughout the production, (ii) it
deletes individuals having poor performance to make room for offspring and (iii) it
inserts randomly selected offspring into the population.
The input variables can be partitioned into overlapping sets, which have a
linguistic correlation to form membership functions. These fuzzy sets are most
often triangular in shape but trapezoidal and Gaussian functions can also be used.
–36
–20
–10
0
10
20
36
0
0.5
1
nb
ns
zo
ps
pb
(a)
–25
–10
0
10
25
0
0.5
1
nb
ns
zo
ps
pb
(b)
–25
–10
0
10
25
0
0.5
1
nb
ns
zo
ps
pb
(c)
–3
–2
–1
0
1
2
3
0
0.5
1
nb
ns
zo
ps
pb
(d)
Figure 14.3
Initial membership functions of inputs and output: (a) hub-angle
error, (b) change of hub-angle error, (c) sum of hub-angle error
and (d) torque input
Evolutionary neuro-fuzzy control
409

The membership values control the degree to which the rules are fired, illustrating
the interdependent relation between the rule set and the membership functions.
14.3.1
Chromosome representation
One of the key issues in evolutionary design of fuzzy systems using GAs is the
genotype representation, i.e., information encoded into chromosomes. A fuzzy
Table 14.1
Rule-base for PD-part of FLC
Hub angle error
Change of error
NB
NS
Z
PS
PB
NB
PB
PB
PB
PS
Z
NS
PB
PS
PS
Z
NS
Z
PS
Z
Z
Z
NS
PS
PS
Z
NS
NS
NB
PB
Z
NS
NB
NB
NB
Table 14.2
Rule-base for PI-part of FLC
Hub angle error
Change of error
NB
NS
Z
PS
PB
NB
PB
PB
PB
PS
Z
NS
PB
PS
Z
Z
NS
Z
PS
Z
Z
Z
NS
PS
PS
Z
Z
NS
NB
PB
Z
NS
NB
NB
NB
Fuzzification
Inference
Defuzzification
Manipulator
Rule-base
GA
∑ |e|
FLC
+
–
Output
Set point
e
e
u
Figure 14.4
GA-based optimisation of MF parameters and rules
410
Flexible robot manipulators: modelling, simulation and control

system is specified only when the rules and membership functions associated with
each fuzzy set are determined. To completely represent a fuzzy system, each
chromosome must encode all needed information about the membership functions.
14.3.1.1
Chromosome representation for membership functions
To translate membership functions to a representation useful as genetic material,
the functions are parameterised with one to four coefficients and each of these
coefficients constitutes a gene of the chromosome for genetic algorithms. The most
broadly used parameterised membership functions are triangular, trapezoidal,
Gaussian and bell-shaped. These parameterised functions may be classified into
two main groups: piecewise linear functions such as triangular and trapezoidal and
differentiable functions such as Gaussian and bell-shaped. Each coefficient con-
stitutes a gene of the chromosome that may be a binary code or a real number.
In fuzzy control design, one can frequently assume triangular membership
functions for which each membership function can be specified by just a few
parameters. In the case of a triangular membership function, it is determined by
three parameters: left position, peak and the right position. An overlapping (not
more than 50%) of the fuzzy sets is desired to ensure a good performance of the
FLC. Therefore, the left and peak position of the next fuzzy set is the same as the
peak and right position of the previous fuzzy set as shown in Figure 14.5(a).
Seven parameters are needed to define five fuzzy sets for each input or output,
that is, the five membership functions with each having three parameters are
(a1, a2, a3), (a2, a3, a4), (a3, a4, a5), (a4, a5, a6) and (a5, a6, a7), and there are
21 parameters in total for all inputs and output. A reduction in the number of
parameters can be achieved by fixing the upper and lower limits of the universe of
discourse for each input and output as shown in Figure 14.5(b). Thus, two
a1
a2
a3
a4
a5
a6
a7b1
b2
b3
b4
b5
b6
b7c1
c2
c3
c4
c5
c6
c7
(a)
a1
a2
a3
a4
a5
bmax
amin
b1
b2
b3
b4
b5
bmin
c1
c2
c3
c4
c5
cmin
amax
cmax
(b)
Figure 14.5
Parameterised membership functions: (a) parameterised membership
functions and (b) fixed upper and lower limit of the membership
functions
Evolutionary neuro-fuzzy control
411

parameters are reduced per each input and output and the number of parameters is
thus reduced to only 15. Hence, the chromosome for membership functions looks
like in Figure 14.6, where ais are the parameters for hub angle error, bis are the
parameters for change of error and sum of error and cis are the parameters for
torque input.
14.3.1.2
Chromosome representation of rule-base
Genetic algorithms can be used to optimise the rule-base (decision-table) of an
FLC, which is applied to control a system, in this case with two inputs and one
output. The linguistic variables can be represented by integer values, for example, 0
for NB, 1 for NS, 2 for Z, 3 for PS and 4 for PB. Applying this code to the fuzzy
rule-base (decision table) represented in Tables 14.1 and 14.2, the encoded rule-
base shown in Figure 14.7 is obtained. A chromosome is thus obtained from the
decision table by going row-wise and coding each output fuzzy set as an integer in
0; 1; . . .; n
f
g, where n is the maximum number used to label the membership
functions defined for the output variable of the FLC. In this case, n ¼ 4 as shown in
Figure 14.8.
There will be two different mutation operators for both parts of the chromo-
some string. The genes in the membership function part of the chromosome will be
replaced by a real value whereas genes of the rule-base part of the chromosome will
be changed to either up a level or down a level of the integer value to avoid possible
large deterioration in performance.
a1, a2, a3, a4, a5
Parameters for
hub-angle error 
Parameters for
change/sum of
hub-angle error
Parameters for
torque input 
b1, b2, b3, b4, b5
c1, c2, c3, c4, c5
Figure 14.6
Chromosome representation for membership functions
Hub angle
error 
Change/sum of error 
NB
0 
NS
1 
Z
2 
PS
3 
PB
4 
NB
0 
NS
1 
Z
2 
PS
3 
PB 
4 
4
4
4
3
2 
4
3
3
2
1 
3
2 
2
2
1 
3
2
1
1
0 
2 
1
0
0
0 
Figure 14.7
Encoding of the rule-base
412
Flexible robot manipulators: modelling, simulation and control

14.3.1.3
Encoding scheme
The problem associated with binary coding is that a long string always occupies the
computer memory even though only a few bits are actually involved in the cross-
over and mutation operations. This is particularly the case when a large number of
parameters is needed to adjust in the same problem and higher precision is required
for the final result. To overcome the problem of inefficient use of the computer
memory, the underlying real-valued chromosome representation of the membership
functions is adopted.
Another problem with binary coding is encountered in chromosome repre-
sentation of the rule-base. When mutation is applied to a linguistic code of the rule-
base, it alters to another valid linguistic code, which is restricted to a linguistic
distance of two, i.e., up a level or down a level. This is illustrated in Figure 14.9.
Three bits are required to represent integer values from 0 to 4 for five linguistic
variables. Performing mutation on a single bit can change the value to 4 levels up to
a value 5, which is not a valid linguistic variable at all and thus, can cause a large
deterioration of the performance. Such a big jump of the value by mutation will be
difficult to control in binary coding. Therefore, an integer valued coding is sug-
gested for chromosome representation of the rule-base.
The rule-base consists of 25 parameters and will take long time for an opti-
misation algorithm to converge to a satisfactory level of performance. As men-
tioned earlier a design simplification is desired rather than a drastic improvement of
the performance. Therefore, the rule-base is not optimised using genetic algorithm
in this study rather it is chosen arbitrarily from the PD-part of FLC.
14.3.2
Objective function
The next important consideration following representation is the choice of fitness
function. The genotype representation encodes the problem into a string while the
fitness function measures the performance of the system. Finding a good fitness
measurement is quite important for evolving practical systems using GAs. Unlike
}
0
0
0
1
2
|
0
1
1
2
3
|
1
2
2
2
3
|
1
2
3
3
4
|
2
3
4
4
4
{
5th row
4th row
3rd row
2nd row
1st row
Figure 14.8
Chromosome representation of the rule-base
0
1
0   1  =  5
0   1  =  1
rj
Invalid 
mutated value
Mutation
Figure 14.9
Problem in rule-base mutation using binary coding
Evolutionary neuro-fuzzy control
413

traditional gradient-based methods, GAs can be used to evolve systems with any
kind of fitness measurement function including those that are nondifferentiable and
discontinuous. Finding a good fitness measurement can make it easier for the GA to
evolve a useful system. How to define the fitness measurement function for a
system to be evolved is problem-dependent.
The procedure of evaluating the knowledge base, i.e., membership functions
and rule-base, consists of submitting to a simulation model or real system, and
returning an assessment value according to a given cost function J subject to
minimisation. In many cases J is determined as a summation over time of some
instantaneous cost rate. As an example, a trial knowledge base can be made to
control the model of a process and then sum the errors over the response trajectory.
The sum of errors is then directly related to the objective fitness of the trial. The
fitness of trial is a measure of the overall worth of a solution, which takes into
account the factors of an objective criterion, in this case, the performance of a fuzzy
controller implementable with the trial knowledge base. The basic control objective
is simply stated as the ability to follow a set point with minimal error. This
objective can thus be expressed in terms of minimisation of the controller perfor-
mance indices, which are in common use. These include integral of absolute error
(IAE), integral of square error (ISE) and integral of time weighted absolute error
(ITAE). Each of these indices has its own merits and demerits. For example, ITAE
penalises errors at large values of time and leads to reduction in steady-state errors
at the expense of transient errors, while ISE is more suitable for a mathematical
analysis criterion (Linkens and Nyongesa, 1995a, 1995b). Furthermore, GA is only
able to optimise the characteristics explicit in the cost function. In this study, sum
of absolute error is used as a measure of performance of the controller.
Assume a controller with multiple inputs and outputs whose overall design
effectiveness can be measured by just one output of the overall system such as hub
angle of error in the case of a flexible-link manipulator system. Finally, all mem-
bership functions and the rule-base can be expressed by some list of m (in this case
m ¼ 15 þ 25 ¼ 40; (15 for membership functions and 25 for rule base) para-
meters), ð p1; p2; . . .; pmÞ ¼ p, where each parameter takes only a finite set of values
and can then be specified by the function:
JðpÞ ¼
ðT
0
jeðtÞjdt
(14.1)
Obviously the objective is to minimise Jð pÞ subject to p. In discrete time, it can be
written as:
JðpÞ ¼
X
n
k¼1
jeðkÞj
(14.2)
where e k
ð Þ is the hub-angle error in the flexible-link manipulator system. n is some
reasonable number of time units by which the system can be assumed to have
settled quite close to a steady state.
414
Flexible robot manipulators: modelling, simulation and control

14.3.3
Evaluation
The practical problem of implementation is that how to evaluate each chromosome
in the population. In this case each time the controller is applied to the real system
for each individual of the population. Its performance is evaluated by calculating
the sum of absolute error. Then the value is assigned to the individual’s fitness. The
time taken in the evaluation of genetic structures, especially in the case of fuzzy
controller, imposes restriction on the size of population and also the number of
generations required to run the GA to a final solution.
14.3.4
Initialisation
DeJong showed the best parameter setting for GA, which is now used as common
settings for population size of 50–100, crossover probability of 0.6 and mutation
probability of 0.001 (DeJong, 1975; DeJong and Spears, 1990). Grefenstette (1986)
used DeJong’s test suite and applied a meta-level GA to optimise the GA control
parameters. He found parameter settings for best online performance as population
size 20–30, crossover probability 0.75–0.95 and mutation rate 0.0005–0.01. Lee
and Takagi (1993) used a population size of 13, crossover and mutation rates of 0.9
and 0.08, respectively. Because of the evaluation constraint, a population size of 10
is considered in this study. It is reasonable to discretise and place upper and lower
bounds on the solution spaces for each of these parameters of the membership
functions. Other GA parameters are discussed in later sections.
14.3.5
Crossover
The crossover operator produces two new chromosomes by mixing the information
provided by its parent’s genes. The crossover of two individuals parent 1 ¼
m1; m2; . . . ; m15
f
g and parent 2 ¼ m1; m2; :::; m15
f
g produces two new chromo-
somes called offspring off1 and off2 as illustrated in Figure 14.10.
Chromosomes that are created by crossover operation do not improve much
over generation for a small size of population. Therefore, a dynamic crossover
probability is used in this study and defined as:
Cpd ¼ Cp
1
g
 
;
(14.3)
Crossover point 
parent 1 m1, m2, m3,  m4,..., m15
parent 2 m1, m2, m3, m4,..., m15
m1, m2, m3, m4 ...,  m15  off1
m1, m2, m3, m4,...,  m15  off2  
Offspring chromosomes 
Figure 14.10
Crossover operation
Evolutionary neuro-fuzzy control
415

where Cp is crossover probability and g is the current generation number and
Cp ¼ 0:8. This means a decreasing
crossover probability with increasing
generation.
14.3.6
Mutation
Since the rate of new chromosome in the population is falling by crossover with a
small population, addition of fresh blood to the population is required. This can be
achieved by a dynamic mutation probability defined as:
mpd ¼ mp
g
gmax


;
(14.4)
where mp ¼ 0:2 is mutation probability and gmax is the maximum generation
(gmax ¼ 20). Mutation of the chromosome is shown in Figure 14.11.
The relation between crossover probability, mutation probability and genera-
tion is shown in Figure 14.12.
14.3.7
Selection
Genetic algorithms are based on the model of biological evolutions. Thus, the
chromosome string must compete with each other to survive. Randomly selected
m1, m2, m3, m4, … mi …, m13, m14, m15
         replace
mi
 random real value  
Figure 14.11
Mutation operation
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
2
3
4
5
6
7
8
9 10 11 12 13 14 15 16 17 18 19 20
Generations
Crossover
probability
Crossover/mutation probability 
Mutation
probability
Figure 14.12
Crossover and mutation over generation
416
Flexible robot manipulators: modelling, simulation and control

individuals from the offspring population replace the individuals having lower
fitness value than the average fitness of the population.
14.3.8
Case study 14.1: GA-fuzzy control scheme
The aim of the investigations carried out in this section is to develop a suitable GA
technique for fuzzy controller design. As mentioned earlier, a drastic improvement
of the system performance is not expected rather a systematic design methodology
is desired. A GA can be derived in different ways depending on the parameters
chosen. Population size and number of generation are constraints in view of eva-
luation involvement and time. Hence, it was reasonable to decide on a suitable
population size as a starting point. The problem of a small population size is that
the chromosomes created by crossover operation do not improve much over
generation. This occurs only when the crossover probability and mutation prob-
ability are fixed and generally crossover probability is chosen higher than mutation
probability as found in many previous research works (Lee and Takagi, 1993; Shi
et al., 1999).
The developed GA scheme was applied to the fuzzy controller for a single-link
manipulator. The practical difficulty was how to evaluate the fitness function. The
generated chromosomes were used to define fuzzy membership functions in the
PD–PI-type controller and then applied to the manipulator system. The perfor-
mance of the controller is then determined in terms of the fitness function defined
in (14.2). The smaller the sum of absolute error, the higher is the fitness of the
chromosomes. After coding each chromosome as membership functions into the
controller program, it is executed on the single-link manipulator system for a
demanded hub angle of 36. The value of the hub angle position is collected from
the system and the sum of absolute error is calculated. This process of evaluation is
very tedious and hence the number of chromosomes in the population is restricted
to only 10.
Figure 14.13 shows performance of the initial population, which was applied
for a demanded hub angle of 36. As can be seen from the figure some individuals
did not work at all and some individuals achieved good performance with a very
small steady-state error. Figure 14.14 shows the control surface of the dominant
rules in the first generation.
Performance of the best individuals from initial population to generation 7 is
shown in Figure 14.15. The performance improvement in terms of rise-time,
overshoot, settling time and steady-state error can be seen from generation to
generation as shown in Table 14.3. Earlier generations show better performance in
respect of rise time but resulted in significant oscillation around set point. Later
generations show better performance in respect of settling time and steady-state
error. Generations 5–7 achieved improvement in steady-state error and in total
time. Overall performance of the system did not improve much after generation 4
rather the difference between performance of the best individuals and worst indi-
viduals was minimised. This resulted in an improvement in the average fitness of
the populations over generation.
Evolutionary neuro-fuzzy control
417

14.4
Neuro-fuzzy control
The membership functions of the three inputs PD–PI fuzzy controller with hub
angle error, change of hub angle error and sum of hub angle error, developed in
Chapter 13, are defined within three distinct universes of discourse. In order to use
a single rule-base for the PD–PI fuzzy controller, the membership functions for
change of error and sum of error are merged together. An optimisation of the
membership functions for inputs and output was carried out in Section 14.3 using
genetic algorithms (GA). Tuning of membership functions becomes more
0
5
10
15
20
25
30
35
40
45
50
–20
–10
0
10
20
30
40
Time units, 1 unit = 0.14 s
Hub angle error (deg)
Figure 14.13
Performance of the FLC with first population
–50
0
50
–20
0
20
–2
–1
0
1
Error
Change/sum of error
Torque
Figure 14.14
Rule surface of the best individual showing dominant rules
418
Flexible robot manipulators: modelling, simulation and control

important if such a merging procedure is taken to reduce the number of rules and an
optimisation is used for the parameters of the membership functions (Chi et al.,
1996). Neural networks have been used widely for tuning membership functions. In
this section, a synergistic neuro-fuzzy approach is introduced.
Combination of neural network and fuzzy systems has been recognised as a
powerful alternative approach to develop fuzzy systems. Some neuro-fuzzy net-
works are capable of learning and providing fuzzy rules in linguistic or explicit
form. However, most of the neuro-fuzzy approaches address parametric identifi-
cation or learning only. In general, the designer chooses the shape of membership
functions and the respective parameters are adjusted. As pointed out by Jang and
Sun (1995), in addition to parametric learning, structure learning problems deal
0
25
50
75
100
125
150
175
200
225
250
–10
–5
0
5
10
15
20
25
30
35
40
45
50
Time units, 1 unit = 0.024 s
Hub angle (deg)
Generation 0
Generation 1
Generation 2
Generation 3
Generation 4
Generation 5
Generation 6
Generation 7
Set point   
Figure 14.15
Best individuals from zeroth generation to seventh generation
Table 14.3
Rise time, settling time, overshoot and steady-state error at different
generations
Generation
Rise time (time units,
1 unit ¼ 0.024 s)
Overshoot
(deg)
Settling time
(time units)
Steady-state
error (deg)
0
85
37.01
120
0.635
1
120
36.95
160
0.95
2
75
41.55
201
1.32
3
120
36.84
160
0.63
4
120
37.05
175
0.42
5
128
36.90
170
0.58
6
100
35.94
115
0.52
7
120
36.58
160
0.47
Evolutionary neuro-fuzzy control
419

with the partition of the input–output universes, the number of membership func-
tions for each input, the number of fuzzy if–then rules and so on. Few results on
structure determination are available in the literature. For instance, Lin and Lu
(1996) have reported a neuro-fuzzy system with fuzzy training data and supervised
learning which provides a mechanism for finding the number of rules, assuming
exponential rule membership functions. The designer still has to provide the input–
output space partitions. Figuiredo and Gomide (1999) have reported a neuro-fuzzy
network which provides a mechanism for obtaining rules that cover the whole
input–output space as well as the membership functions including their shapes for
each input variable.
The most important reason for combining fuzzy systems with neural networks
is their learning capability. Such a combination should be able to learn linguistic
rules, membership functions, or to optimise existing ones. Learning in this case
means creating a rule-base or membership functions from scratch based on training
data presented as a fixed or free learning problem (Nauck and Kruse, 1996). The
learning procedure operates on local information, and causes only local modifica-
tions in the underlying fuzzy system.
Two kinds of combination between neural networks and fuzzy systems can be
distinguished with the goal of optimising a fuzzy system. In the first approach,
neural networks and fuzzy systems work independent of each other. The combi-
nation lies in the determination of certain parameters of the fuzzy system by neural
networks or a neural network-learning algorithm, which can be done, off-line or
on-line during the execution of the fuzzy system. This kind of combination is called
a cooperative neuro-fuzzy system. The second kind of combination defines a
homogeneous architecture, usually similar to the structure of a neural network. This
is implemented by interpreting a fuzzy system as a special kind of neural network.
This kind of neuro-fuzzy system is called a hybrid neuro-fuzzy system and the
resulting system can be viewed as either a fuzzy system or as a neural network.
In general, heuristic methods are applied to produce membership functions in
developing fuzzy control systems. However, these result in a set of subjective
membership functions defined within a universe of discourse, which either are too
difficult to realise or cannot produce a satisfactory result. Therefore, many
researchers have proposed combined statistical method and fuzzy system for pro-
blem solving. Using membership functions, which are generated from training data
by one of various clustering techniques, is one way to achieve this combination.
A clustering algorithm can be applied to estimate the actual data distribution
and the resulting clusters can be used to produce the membership functions, which
will interpret the data better. Dickenson and Kosko (1993) have reported a learning
technique for constructing membership functions by adaptive vector quantisation
(AVQ). To improve the performance of the fuzzy system, the chosen or generated
membership functions can be further tuned by using gradient descent algorithms
(Nomura et al., 1991).
Optimisation of the rule base corresponds to partially learning it (Chen and
Linkens, 1999). Learning or optimising the membership function is less complex
than the adaptation of the rule base. Membership functions can easily be described
420
Flexible robot manipulators: modelling, simulation and control

by parameters, which can be optimised with respect to a global error measure. By
means of suitable constraints, certain conditions can be met. Virtually any mem-
bership function can be obtained using a multilayer perceptron network that has to
be separately trained. But using a smaller number of neurons and exploiting the
possibilities of shifting, scaling and reflecting the sigmoid activation function, a
satisfactory solution can be achieved without elaborating the training (Halgamuge
and Glensner, 1994). Adaptation of parameters is a standard task for neural net-
works and there are a lot of combinations with fuzzy systems to learning mem-
bership functions.
There can be different kinds of cooperative neuro-fuzzy systems such as neural
network learning of membership functions, fuzzy rules, parameters of a fuzzy
system where the fuzzy rules and initial membership functions are predefined, and
weights of the rules from training data. The aim of this section is to tune the
membership functions of the fuzzy controller and hence a cooperative combination
of neural network and fuzzy systems is considered for parameter learning of the
PD–PI fuzzy controller.
14.4.1
Parameters of PD–PI fuzzy controller
In order to minimise the rule-base of the hybrid PD–PI controller, two rule-bases
were unified to a single rule base with n  n þ n  n rules and a switching
mechanism was devised to ensure fast rise time, minimal peak overshoot and zero
steady-state error. The membership functions for change of error and sum of error
were redefined within the same universe of discourse and then optimised by genetic
algorithm. Though the optimisation algorithm minimised the objective criterion,
the reinforced learning of the membership functions caused a deviation of the
membership function. A tuning or online adjustment of the membership functions
is required at this stage. One such way to achieve this goal is to use the scaling
factors of the fuzzy controller. A block diagram of the switching PD–PI-type
controller with the scaling factors is shown in Figure 14.16.
Set point 
Rule base 
Fuzzy
controller
Flexible 
manipulator 
qd
Δe
e
u
ki
kd
kP
kc
q
q
+
–
∑e
Figure 14.16
PD–PI-type FLC with four scaling factors
Evolutionary neuro-fuzzy control
421

The PD-type and PI-type controllers are described as:
kcu ¼ kpe þ kdDe;
t  ts
(14.5)
kcu ¼ kPe þ kISe;
t > ts
(14.6)
where ts is switching time; kp, kd, kI and kc are the proportional, differential, inte-
gral and controller gain coefficients; and e, De and Se are the error, change of error
and sum of error.
14.4.2
Tuning of membership functions
As mentioned earlier, the initial membership functions can be chosen heuristically
or generated by using clustering techniques. In the case of PD–PI controller, the
initial membership functions are chosen by a heuristic rule especially the fuzzy sets
for change of error and sum of error are redefined within the same universe of
discourse for a single common rule-base. It is believed that the developed PD–PI
FLC is not the same as conventional PID FLC because of the different definitions
of the membership functions of the inputs, i.e., actual data distribution and resulting
membership functions are not the same. In particular, the membership functions for
change of error and sum of error are forced to deviate and are merged within a
common universe of discourse by the optimisation procedure.
A mechanism is to be found to adjust the membership functions for change of
error and sum of error. Tuning of the membership functions becomes more
important if a merging procedure by clustering approach or optimisation procedure
such as genetic algorithm has been taken to reduce the number of fuzzy rules. One
possible way is learning of the parameters of the fuzzy sets. In many cases, tuning
the scaling factors or adjusting the membership functions can lead to the same
result. Adjustment of membership functions requires learning of several parameters
and hence scaling factor tuning is a much simpler task than adjusting the para-
meters (Chen and Linkens, 1998).
In this section, a further enhancement of the performance is sought by tuning
the scaling factors of the PD–PI FLC, especially the proportional, integral and
derivative gains, by using a learning algorithm based on neural networks.
14.4.3
Reducing the number of scaling parameters
The fuzzy sets, which were shifted from their original universe of discourse by
genetic algorithm optimisation, are now re-adjusted by tuning the scaling factors kd
and kI using a neural network. There is no need to re-adjust the fuzzy sets for error,
since they are the same in both types of controller and moreover they are optimised
by genetic algorithm. For simplicity the scaling factor kp is not tuned and hence
eliminated from (14.5) and (14.6). Dividing both sides of (14.5) and (14.6) by kp
yields:
k
0
cu ¼ e þ k
0
dDe
(14.7)
k
0
cu ¼ e þ k
0
ISe
(14.8)
422
Flexible robot manipulators: modelling, simulation and control

where k
0
d, k
0
I and k
0
c are defined as:
k
0
d ¼ kd
kp
;
k
0
I ¼ kI
kp
;
k
0
c ¼ kc
kp
(14.9)
The scaling factors k
0
d and k
0
I are learned by a neural network while the scaling
factor k
0
c is chosen by some heuristic rules, in the same way as kc. Thus, the
resulting PD–PI fuzzy controller with three scaling factors is as in Figure 14.17.
14.4.4
Neural network tuning of the scaling factors
A multilayer neural network with sufficient number of neurons in the hidden layer
can approximate the non-linearity of the fuzzy controller for the flexible-link
manipulator but a possible difficulty is that it will consume most of the processing
time in calculating values of the two scaling factors of the fuzzy controller.
A simple realisable network is desirable, which can be employed in the PD–PI FLC.
Considering this as a design criterion, the self-learning task of a multilayer per-
ceptron could be simply replaced by a single unbiased neuron with linear activation
function. Thus the architecture of the neural network becomes very simple as
shown in Figure 14.18. The neural network can be trained with the set of input and
output data available using the backpropagation algorithm.
Set point 
Rule base 
Fuzzy
controller  
Flexible
manipulator
Output 
θ
e
u
+ 
–
θd
Δe
∑e
k'd
k'i
k'c
Figure 14.17
PD–PI-like FLC with three scaling factors
w1
w2
e
b = 0
f(.)
Δe/∑e
∑
k'D /k'I
Figure 14.18
Single neuron neural network
Evolutionary neuro-fuzzy control
423

14.4.5
Backpropagation learning of neural network
The purpose here is to construct an adaptive mechanism, which is able to adjust the
control parameters to minimise the error function defined as:
E ¼ 1
2 e2
(14.10)
where e ¼ yd  y, with yd and y as the desired and actual outputs.
The backpropagation learning algorithm is used for parameter tuning. The
weight update rule with a momentum term is defined as:
DwiðtÞ ¼ h @E
@wi
þ a Dwiðt  1Þ
(14.11)
where h 2 0; 1
½
 is the learning rate and a 2 0; 1
½
 is the momentum.
Using the chain rule of derivative, @E=@wi can be written as:
@E
@wi
¼ @E
@y
@y
@u
@u
@k
@k
@wi
(14.12)
where:
@E
@y ¼ e
(14.13)
For linear activation function:
@k
@wi
¼ @f ðnetÞ
@wi
¼ @f ðP wioi þ bÞ
@wi
¼ oi
(14.14)
@y
@u
@u
@k ¼ @y
@k
(14.15)
where oi represents output of neuron i, and the bias b ¼ 0 for unbiased neuron.
It is practically difficult to calculate the term @y=@k because quantitative
knowledge of the process is not generally available. One way is to use a numerical
approximation to replace @y=@k by Dy=Dk at each iteration. Thus, using (14.13)–
(14.15) and this approximation, (14.12) can be expressed as:
@E
@wi
¼ e Dy
Dk oi
(14.16)
where Dy ¼ yðtÞ  yðt  1Þ and Dk ¼ kðtÞ  kðt  1Þ.
Gradient descent search does not necessarily demand quantitative information
of the process, since a search direction is enough to converge to the optimal point.
424
Flexible robot manipulators: modelling, simulation and control

The sign of Dy=Dk is enough for the calculation of the weight update equation, thus
giving the simplified backpropagation algorithm as:
DwiðtÞ ¼ h esgn Dy
Dk


oi þ a Dwiðt  1Þ
(14.17)
Thus, k
0
d and k
0
I are updated at every iteration as:
k0
d=i ¼ wiðtÞ  oi
(14.18)
where oi and wi are defined as:
oi ¼ e
De
½
T
for
k ¼ k
0
d
oi ¼ e
Se
½
T
for
k ¼ k
0
i
wi ¼ w1
w2
½

(14.19)
The network is trained offline with the input–output data available. Once the
weights of the neural network are learned, the parameters, i.e., scaling factors k
0
d
and k
0
i are updated at every iteration. The neuro-fuzzy controller thus achieved is
shown in Figure 14.19.
14.4.6
Learning with non-linear activation function
The purpose here is to construct an adaptive mechanism, which is able to adjust the
control parameters so as to minimise the error function defined as:
E ¼ 1
2 eðtÞ2
(14.20)
Set-point 
NN 
Rule-base
Fuzzy
controller 
Flexible
manipulator
 
+ 
_ 
u
e
 
w1
w2
e
e
Δe/∑e
Δe/∑e
k'd /k'i
k'd
k'i
∑
Δe
∑e
k'c
θd
θ
Figure 14.19
Block diagram of the neuro-fuzzy controller
Evolutionary neuro-fuzzy control
425

where eðtÞ ¼ yd  yðtÞ. The backpropagation learning algorithm is used for para-
meter tuning. The weight update rule with a momentum term is defined as:
DwiðtÞ ¼ h @E
@wi
þ a Dwiðt  1Þ
(14.21)
where h 2 0; 1
½
 is the learning rate and a 2 0; 1
½
 is the momentum. Using the
chain rule of derivative, @E=@wi can be written as:
@E
@wi
¼ @E
@y
@y
@u
@u
@k
@k
@ðnetÞ
@ðnetÞ
@wi
(14.22)
where
@E
@y ¼ e
@y
@u
@u
@k ¼ @y
@k
@k
@ðnetÞ ¼ @f ðnetÞ
@ðnetÞ ¼ a kð1  kÞ
@ðnetÞ
@wi
¼ @ðP wioi þ bÞ
@wi
¼ oi
(14.23)
and b is the bias of neuron. The sigmoid function used is defined as:
f ðxÞ ¼ 1  eax
1 þ eax
(14.24)
where x is the network output and the parameter a defines the shape of the sigmoid
function, chosen by trial and error. Figure 14.20 shows the corresponding shapes of
the sigmoidal function for different values of the parameter a.
Practical difficulty arises in calculating the term @y=@k, as quantitative
knowledge of the process is not available at any time instant. The term @y=@k can
be approximated numerically as:
@y
@k  Dy
Dk
(14.25)
Thus, (14.21) can be expressed as:
@E
@wi
¼ e a kð1  kÞ Dy
Dk oi
(14.26)
where Dy ¼ yðtÞ  yðt  1Þ and Dk ¼ kðtÞ  kðt  1Þ. Gradient descent search
does not necessarily demand quantitative information of the process, since a search
direction is enough to converge to the optimal point. The sign of Dy=Dk is
426
Flexible robot manipulators: modelling, simulation and control

accordingly enough for the calculation of the weight update equation. This results
in the simplified backpropagation algorithm as:
Dwi tð Þ ¼ h a e k 1  k
ð
Þsgn Dy
Dk


oi þ a Dwi t  1
ð
Þ
(14.27)
where:
oi ¼ e
De
½
T
for
k ¼ k
0
d
oi ¼ e
Se
½
T
for
k ¼ k
0
i
wi ¼ w1
w2
½

(14.28)
This is thus used to update k
0
d and k
0
i at every iteration.
14.4.7
Case study 14.2: neuro-fuzzy control scheme
The standard backpropagation algorithm with a linear and a non-linear activation
function and the error functions were simplified for the purpose of real-time
training in Sections 14.4.5 and 14.4.6. To implement an on-line training, the
learning rate, momentum and initial weights are set. A higher learning rate may
need fewer epochs to train the network. On the other hand, a lower learning rate
needs a longer time and a higher number of epochs, to train the network. The
on-line training of the network has two goals: firstly, it has to attain the control
space within a limited number of epochs and secondly it has to achieve the desired
error goal, which is not possible within the limited epochs. To resolve these con-
flicting goals, the following approach is adopted: train the network for a limited
–1
–0.8
–0.6
–0.4
–0.2
0
0.2
0.4
0.6
0.8
1
–1
–0.8
–0.6
–0.4
–0.2
0
0.2
0.4
0.6
0.8
1
Input x
Output  f(x)
a = 0.1
a = 0.2
a = 0.5
a = 1.0
a = 2.0
a = 4.0
Figure 14.20
Shape of sigmoidal function for different values of a
Evolutionary neuro-fuzzy control
427

number of epochs within which it can attain a control space and then repeat until
the error goal is achieved. In other words, the error goal is defined as the difference
between the output of the system and the set point. The objective of the training is
to force the error goal asymptotically to zero (theoretically) or to a predefined
tolerance region e (practically) within a time interval, by repeatedly operating the
system. Specifically, it requires that
ekðtÞ
j
j ! 0 or
ekðtÞ
j
j < e uniformly in
t 2 0; T
½
 as k ! 1 where k denotes the iteration number.
According to the approach mentioned above, the training of the network was
performed in the following way: the learning rate and momentum were fixed to
0.02 and 0.75, respectively. The single-link flexible manipulator was operated for
100 iterations with initial weights of w1 ¼ 0:03 and w2 ¼ 0:02. PD–PI-like con-
troller parameters k
0
d and k
0
i were updated at every iteration and a value of 76 was
chosen heuristically for k
0
c whereas the switching point was kept fixed at 25 time
units. After the first 100 epochs of training the network weights were w1 ¼ 0:016
and w2 ¼ 0:08. A hub angle of 34.72 was reached after the first training.
In the second 100 epochs of training, the network was initialised with weights
w1 ¼ 0:016 and w2 ¼ 0:08 obtained from the first training, and the learning rate
and momentum were the same as before. This time, a hub angle of 37.05 was
achieved and the learnt weights were w1 ¼ 1:69 and w2 ¼ 0:24. In a similar way,
the weights learnt from second training were set for training in the third and the
weights learnt from third training were set for training in the fourth 100 epochs of
training keeping all the other parameters the same as before. Hub angles of 36.52
and 36.26 were achieved in the third and fourth training, respectively. The learn-
ing profiles of the four 100 epochs of training are shown in Figure 14.21. As noted,
0
20 
40 
60 
80 
100 
0
100 
200 
300 
400 
500 
600 
700 
Epochs 
Sum squared error
1st 100 epochs
2nd 100 epochs
3rd 100 epochs
4th 100 epochs
Figure 14.21
Learning profile of the network in the first, second, third and fourth
learning
428
Flexible robot manipulators: modelling, simulation and control

the third and fourth training were close to each other and showed improvement over
the first and second 100 epochs of training. After the fourth training an error goal of
0.012 was achieved. An error goal of less than 0.012 depends on the precision of
the interface card and may require costly high precision equipment. Figure 14.22
shows the performance of the system after training of the network, that is, after the
fourth 100 epochs of training. There was a significant improvement in the perfor-
mance of the neuro-fuzzy controller in respect of rise time, maximum overshoot,
settling time and steady-state error, as shown in Table 14.4.
Introduction of a non-linear sigmoid activation function to the single neuron
network was also considered. The aim of this consideration was to determine
possible effect of the sigmoid function shape on the performance of the network.
To investigate these effects, training was performed in the same way as before. This
time weights and bias were learnt with different sigmoidal function shapes. It was
0
10
20
30
40
50
60
70
80
90
100
–5
0
5
10
15
20
25
30
35
40
Time units, 1 unit = 0.15
Hub angle
Figure 14.22
Response of the flexible-link after training of the network
Table 14.4
Performance of the neuro-fuzzy controller with linear activation
function
Training epochs
Rise time (time units,
1 unit ¼ 0.12 s)
Overshoot
(deg)
Settling time
(time units)
Steady-state
error (deg)
First 100 epochs
23
40.50
39
1.747
Second 100 epochs
20
38.75
28
1.058
Third 100 epochs
23
36.79
27
0.529
Fourth 100 epochs
28
36.68
33
0.264
After training
28
36.68
35
0.164
Evolutionary neuro-fuzzy control
429

found that for different sigmoidal function shapes the learnt weights and bias were
different and hence affected the performance of the controller. The iteration num-
ber was reduced to only 50 because weight and bias changes did not occur after 50
iterations, and this saved some computation time. Also the total training time
seemed to reduce by a noticeable amount. Figure 14.23 shows the performance of
the neuro-fuzzy controller system after training for a demanded hub angle of 36.
A hub angle of 36.19 was achieved. Table 14.5 shows the rise time, maximum
overshoot, settling time and steady-state error for different sigmoid function
shapes. Figure 14.24 shows the effect of the shape of the sigmoidal function on the
cost function, which is determined by the value of a. It can be seen that a value of a
between 2.0 and 2.23 gives a minimum of the cost function.
0
5
10
15
20
25
30
35
40
45
50
0
5
10
15
20
25
30
35
40
Time units, 1 unit = 0.12 s
Hub angle (deg) 
Figure 14.23
Performance of the flexible-link with neuro-fuzzy controller after
training
Table 14.5
Performance of the controller with non-linear activation function
Sigmoidal
function shape
Rise time (time units,
1 unit ¼ 0.12 s)
Overshoot
(deg)
Settling time
(time units)
Steady-state
error (deg)
a ¼ 1:19
16
57.24
38
0.13
a ¼ 2:2
17
51.92
39
0.03
a ¼ 2:6
14
56.67
45
2.1
a ¼ 3:94
16
52.65
37
0.89
After training
27
39.32
45
0.19
430
Flexible robot manipulators: modelling, simulation and control

14.5
GA-based neuro-fuzzy control
Introduction of a non-linear activation function to the single neuron network and its
performance over a linear activation function was considered in Section 14.4 with
the aim of determining possible effects of the non-linear activation function on the
performance of the network as well the performance of the neuro-fuzzy controller
for a flexible-link manipulator. A tan-sigmoidal function was used where the shape
of the sigmoid function represents the non-linearity of the activation function.
Backpropagation algorithm was used to train the single neuron network and the
shape of the sigmoidal function was chosen arbitrarily. The experimental results
showed that the shape parameter, denoted as a, has significant effect on the cost
function. It was also found that for different sigmoidal function shapes the learnt
weights and bias were different and hence affected the performance of the con-
troller. In respect of rise time and settling time, the controller with non-linear
activation function showed promising and better performance than linear activation
function. The shape of the sigmoid function plays an important role in determining
the performance of the controller, and this needs further investigation.
A criterion is required for selection of an optimal neural network to represent
the non-linearity of the system. However, the parameter of such non-linear acti-
vation function, such as the optimum shape of a sigmoid function, is determined
by trial and error. In this section, a genetic algorithm-based technique is used to
optimise the shape of the activation function together with the weights and bias of
the single-neuron network.
14.5.1
Integration of fuzzy logic, neural networks and genetic
algorithms
The fuzzy PD–PI-type controller is represented by (14.7) and (14.8). The mem-
bership functions of the fuzzy sets for change of error and sum of error are
7.7
7.8
7.9
8
8.1
8.2
8.3
8.4
8.5
8.6
8.7
0
1
2
3
4
5
Values of a
Cost  function  
×10–2
Figure 14.24
Effect of a cost function
Evolutionary neuro-fuzzy control
431

required to be readjusted as they deviate from their original universe of discourse.
This can be done by determining suitable parameters, or by approximating the
membership functions with a neural network. Modern neuro-fuzzy systems are
often represented as multiplayer feedforward neural networks (Buckley and
Hayashi, 1994, 1995). The adaptive neuro-fuzzy inference system (ANFIS) model
for example implements a Sugeno-type fuzzy system in a neural network structure,
and applies a mixture of backpropagation algorithm and least squares procedure
to train the system (Jang, 1993). The problem associated with these types of neuro-
fuzzy models is that they sometimes are not as easy to interpret for Mamdani-type
fuzzy systems (Nauck et al., 1997).
Simulation results in Zheng (1992) with tuned membership functions show a
marginal improvement in transient response of a second-order linear process, where
tuning has resulted in asymmetric membership functions (triangular) with unequal
base for e. To be more specific, the width of membership functions increased
around e ¼ 0. Such membership functions contradict the usual practice (Drainkov
et al., 1993; Harris et al., 1993) where the membership functions take narrow width
and become more crowded near the origin to provide increased sensitivity at steady
state. Thus, the proposed membership functions tuning scheme cannot guarantee
improved performance under load disturbance, which is a very important criterion
for performance evaluation of a control system. Moreover, a training scheme such
as backpropagation algorithm is bounded by its input–output data set though it
minimises the objective function, where the objective function is defined as a
function of the distance between the actual output and training data set during
training and does not guarantee any improved performance of the controller.
Furthermore, the use of multilayer perceptron could simply exhaust the system by
calculating exponential terms in the network, causing very slow response of the
system. A single neuron network with non-linear activation function can better
represent the system’s non-linearity and can be further enhanced by optimising the
shape of the sigmoidal function.
14.5.2
Sigmoid function shape learning
Non-linearity can be represented with sufficient number of hidden layers with fixed
activation function. However, many parameters such as the optimum shape of
sigmoid function are determined by trial and error in most of the cases. This, as
noted in the previous section, limits application of the network. There have been
few studies on the optimum shape of the sigmoid function. Yamada and Yabuta
(1992) have, for example, reported an auto-tuning method for the sigmoid function
shape in order to apply it to a servo control system. Their method is based on the
steepest descent method and confirmed the characteristics and practicality of the
method with simulation results.
The sigmoid function was given in (14.24) with corresponding graphical
representation in Figure 14.20. As discussed, this type of activation function is
characterised by its gain (slope), which affects the control characteristics, and if not
properly tuned, may cause system instability. When the usual sigmoid function is
432
Flexible robot manipulators: modelling, simulation and control

used only in the hidden layer, sigmoid function shape tuning is the same as weight
tuning. A mathematical proof of this has been given by Yamada and Yabuta (1992).
Therefore, sigmoid function shape tuning in a single neuron network can contribute
more to improving performance of the controller. In the following sub-section
genetic algorithm-based learning of the shape of sigmoid function as well as the
weights and bias of the network is provided.
14.5.3
Neural network learning using genetic algorithms
There has been a growing interest in training neural networks using genetic algo-
rithms (Caudell and Dolan, 1989; Montana and Davis, 1989; Whiteley et al., 1990;
Yam et al., 1997). The interest in this study is to explore possible benefits arising
from the interactions between neural networks and evolutionary search procedures.
Accordingly the most popular models of neural network and evolutionary search
procedures are considered, such as feed forward network and GA. Supervised
learning has mostly been formulated as a weight training process, in which effort is
made to find an optimal set of connection weights for a neural network according to
some optimality criteria. The most popular training algorithms for feed forward
neural networks is backpropagation as discussed in Section 14.4. This is a gradient
descent search algorithm based on minimisation of the total mean squared error
between actual output and a desired output. However, the backpropagation algo-
rithm suffers from a number of problems. It is very often trapped in local minima
and is very inefficient in searching for global minimum of the search space. The
backpropagation’s speed and robustness are sensitive to several parameters of the
algorithm and the best parameters to use appear to vary from problem to problem
(Caudell and Dolan, 1989). The shape of the sigmoid function in backpropagation
learning is chosen mostly heuristically or by trial and error. There are several basic
arguments suggesting that applying GAs to neural network weight optimisation is
advantageous. GAs have the potential to produce a global minimum of the weight
space and thereby avoid local minima. It is also an advantage to apply GAs to
problems where gradient information is either not available or costly to obtain or
there is nondifferentiable node transfer function involved. In this specific issue, the
parameter of the sigmoid function shape can be easily included in the learning
process.
A block diagram of the GA-based neuro-fuzzy control system is shown in
Figure 14.25, which incorporates a single neuron network shown in Figure 14.26.
The activation function is defined in (14.24) and the parameter a defines the
shape of the sigmoidal function. The use of different shapes of sigmoidal function
can lead to different weights and biases during learning with the backpropagation
algorithm, which was discussed in Section 14.4. That is, the shape of sigmoidal
functions should be fixed during execution of the backpropagation algorithm.
A mechanism is sought to learn the weights, bias and the parameter a of the
network. Two approaches present themselves instantly for this purpose: firstly,
backpropagation algorithm learning of weights and bias and trial-and-error method
for parameter a and, secondly, genetic algorithm-based learning of the weights,
Evolutionary neuro-fuzzy control
433

biases and the parameter a simultaneously. The first approach was presented in
Section 14.4. Possible benefits of learning the shape of sigmoid function together
with the weights and bias, which will reduce the computing time greatly and can
exploit the non-linearity involved in the system, are highlighted in this section.
Genetic algorithm is utilised here to learn the weights (w1, w2), bias b and
parameter a of the neural network. The chromosome representation is thus shown
as in Figure 14.27.
The objective function is defined as:
J ¼
X
N
k¼1
eðkÞ
j
j
(14.29)
Set-point 
NN 
u
Rule-base
Fuzzy
controller
Flexible
manipulator 
 
 
θd
e
+ 
–
e
GA 
w1, w2, b, a
 Δe/∑e
∑e
Δe
k'c
k'i
k'd
∑|e|
θ
Figure 14.25
Block diagram of the GA-based neuro-fuzzy control system
∆e/ ∑e
w1
w2
k'D/k'I
e
f(x) = 1 – e–ax
1 + e–ax
∑
b
Figure 14.26
Single neuron network with non-linear activation function
w1,  w2,  b,  a
Figure 14.27
String representation of chromosome of the neural network
434
Flexible robot manipulators: modelling, simulation and control

where eðkÞ is hub-angle error and N is some reasonable number of time units by
which the system can be assumed to have settled close to steady state. The eva-
luation of the objective function is performed by applying the controller on the
experimental manipulator.
Experience from experiments in Section 14.4 suggest that the values of the
weights-bias and sigmoid function shape parameter are within the ranges
0:5; þ0:22
½
 and 2:0; 2:6
½
, respectively. Considering these results, a population
of 10 chromosomes is initialised within these ranges.
Elitists single point crossover operation is used. Elitism is an optional char-
acteristic of genetic algorithm. When used, it makes sure that the fittest chromo-
some of a population is passed on to next generation unchanged. In this
investigation, an extended form of elitism is used where best m (m ¼ 8 in this
study) chromosomes are retained from N chromosomes, N is the population size
(N ¼ 10 in this study). In other words, the worst two chromosomes are replaced by
two offspring created by crossing two best chromosomes in the population.
The crossover operation can suffer from two well-known problems: firstly,
crossover operation, when applying genetic algorithms to neural networks, can
result in a competing conventions problem (Schaffer et al., 1992). Competing
conventions prevent standard crossover operation to produce useful offspring. Also
the number of competing conventions grows exponentially with respect to number
of hidden neurons. Secondly, crossover operation may not produce new chromo-
somes for a small size of population in higher generations. Mutation operation can
thus strike a balance to these problems encountered by crossover. Montana and
Davis (1989) used three different types of mutation operators to overcome such
problems. In this study, a mutation operation with a higher mutation rate is applied
to genetic algorithm-based learning of the neural network. A randomly chosen
value from the offspring is mutated with a mutation rate of 0.5. This mutation rate
will ensure changes of at least two values in the offspring chromosome.
14.5.4
Case study 14.3: GA-neuro-fuzzy control scheme
Considering the experimental results in Section 14.4, a population of 10 chromo-
somes was initialised within the ranges 0:5; þ0:5
½
 and 0; 4
½
 for weights and
bias and for the parameter a, respectively. The practical constraints of applying the
GA-based neuro-fuzzy controller to the flexible manipulator involved evaluation of
the objective function. The easiest way is to operate the neuro-fuzzy controller
repeatedly and evaluate its performance (evaluation function) by calculating the
absolute sum of error. The population was tested up to the 13th generation. In
earlier generations, some of the chromosomes needed longer time to settle, and the
chromosomes were required to evaluate for 250 iterations in the program loop. This
caused some ties of the fitness values. To help resolve the ties, only 50 iterations
were evaluated in the later generations.
Figure 14.28 shows the system response for a target hub angle of 36 of the
best individual in generations 11, 12 and 13. Significant improvement in the system
performance was observed in respect of rise time, maximum overshoot, settling
Evolutionary neuro-fuzzy control
435

time and steady-state error as generations progressed. A numerical comparison of
the response parameters over generations 11, 12 and 13 is shown in Table 14.6.
Figure 14.29 shows fitness convergence of GA over generations. The weights, bias
and the parameter a after learning were found as w1 ¼ 0:029, w2 ¼ 0:01,
b ¼ 0:23 and a ¼ 2:18.
The performance of a three-neuron network with linear activation function and
with non-linear activation function was also verified. The performance of the three-
neuron network is shown in Figure 14.30. The three-neuron network with linear
activation function achieved a steady-state error of 1.61 with a rise time of 22 time
units, overshoot of 43.03 and a settling time of 47 time units whereas the network
with non-linear activation function showed a rise time of 21 time units and an
overshoot of 44.18 but could not settle at around the target hub angle within 50
time units. The network was trained using the backpropagation algorithm. The
performance degradation of the system is obvious and possibly caused by the
excessive calculation of weights and biases updates required in backpropagation
algorithms.
0
10
20
30
40
50
–10
0
10
20
30
40
50
60
Time units, 1 unit = 0.12 s
Hub angle (deg)
Generation 13   
Generation 12   
Generation 11   
Target hub angle
Figure 14.28
System response with best individuals in generations 11, 12 and 13
Table 14.6
Comparison of response parameters
Generations
Rise time (time units,
1 unit ¼ 0.12 s)
Overshoot
(deg)
Settling time
(time units)
Steady-state
error (deg)
11
13
56.13
35
3.24
12
14
55.55
39
3.34
13
17
52.51
34
0.33
436
Flexible robot manipulators: modelling, simulation and control

0
2
4
6
8
10
12
14
300
400
500
600
700
800
900
1,000
1,100
1,200
Generations
Average sum of absolute error
Figure 14.29
Convergence of the fitness
0
10
20
30
40
50
–10
0
10
20
30
40
50
Time units, 1 unit = 0.12 s
Hub angle (deg)
Non-linear activation function
Target hub angle
Linear activation function
Figure 14.30
System response using neuro-fuzzy controller with three-neuron
network
Evolutionary neuro-fuzzy control
437

14.6
Summary
One of the most important considerations in designing fuzzy systems is the con-
struction of the membership functions for each fuzzy set as well as the rule-base. In
most applications, the fuzzy rules are generated by an expert in the area, especially
where there are few inputs involved. However, it is by no means trivial but plays a
crucial role in the success of an application. Previously, generation of membership
functions had been a task mainly done either interactively, by trial and error, or by
human experts. With an increasing number of inputs and linguistic variables, the
possible number of rules for the system increases exponentially, which makes it
difficult for experts to define a complete set of rules and associated membership
functions for a good system performance. An automated way to design fuzzy sys-
tems might be preferable via used an evolutionary algorithm such as genetic
algorithm. This is particularly the case when a large number of parameters are
needed to adjust in the same problem and higher precision is required for the final
result.
Redefinition of the fuzzy sets for change of error and sum of error within a
common universe of discourse can significantly influence the performance of the
PD–PI fuzzy controller. A readjustment of the fuzzy sets is required at this stage.
Neuro-fuzzy approaches are mostly used in such readjustment of membership
functions, and this involves several parameters to be adjusted. In many cases,
tuning the scaling factors gives the same performance as with membership function
adjustment. Secondly, tuning the scaling factors is a simpler task than adjusting the
membership functions.
A mechanism has been sought to tune the scaling factors of the PD–PI fuzzy
controller by using a neural network. A neural network with multiple layers and
many neurons in the hidden layer could best do the approximation of the non-linear
behaviour of the system, but a significant amount of time will be consumed in
calculating the updated parameters.
In order to minimise the calculation time a single neuron network has been
used for an online updating of the scaling factors. Experiments show that non-
linearity can be sufficiently approximated by determining the shape of the sig-
moidal function which is characterised by a single parameter in the activation
function. A genetic algorithm has been used to learn the weights, biases and shape
of the sigmoidal function of the neural network simultaneously. The performance
of the system using a neural network with a linear activation function seems to be
better than neural network with a non-linear activation function.
438
Flexible robot manipulators: modelling, simulation and control

Chapter 15
Software environment for modelling and control
of flexible manipulators
This chapter presents the development of SCEFMAS (Simulation and Control
Environment for Flexible MAnipulator Systems) software package. This is a user-
friendly interactive software environment utilising MATLAB and associated
toolboxes. The main components of this environment are finite difference and finite
element simulations, artificial intelligence modelling using neural networks and
genetic algorithm. The package also incorporates a range of control techniques,
including open-loop control such as filtered command, Gaussian-shaped and com-
mand shaping, collocated and non-collocated closed-loop control methods of fixed
and adaptive types, and intelligent soft-computing control techniques. The envir-
onment allows the user to set-up the system by providing its physical parameters and
to select the controller type through an interactive graphical user interface. Data
analyses can be performed in time- and frequency-domains on the controller and
system input and output signals. The environment is suitable as an education
package and as a research facility for investigating and developing various simu-
lation, modelling, and controller designs for flexible manipulator systems.
15.1
Introduction
The Simulation and Control Environment of Flexible Manipulator Systems (SCEF-
MAS) is a software environment for simulation, modelling, and control of single-link
flexible manipulator systems. The environment is a MATLAB and Simulink dri-
ven package and includes contributions of a number of graduate students over the last
one and half decade. The main components of this environment are finite difference
(FD) and finite element (FE) simulations, artificial intelligence modelling using neural
networks (NNs) and genetic algorithms (GAs), and classical and advanced controller
designs. All the implementations therein are performed using a highly interactive
graphical user interface (GUI).
15.2
Flexible manipulator system
A schematic model of the flexible manipulator system considered for the devel-
opment of SCEFMAS is shown in Figure 15.1, where XoOYo and XOY represent

the stationary and moving co-ordinate frames, respectively. The axis OX coincides
with the neutral line of the link in its un-deformed configuration, and is tangent to
it at the clamped end in a deformed configuration. t represents the applied torque
at the hub. E, I, r, A, Ih and Mp represent the Young modulus, area moment of
inertia, mass density per unit volume, cross-sectional area, hub inertia and payload
of the manipulator, respectively. qðtÞ denotes an angular displacement (hub-angle)
of the manipulator and wðx; tÞ denotes an elastic deflection (deformation) of a
point along the manipulator at a distance x from the hub of the manipulator. In this
work, the motion of the manipulator is confined to the XoOYo plane. Since the
manipulator is long and slender, the shear deformation and rotary inertia effects
are neglected. This allows the use of the Bernoulli–Euler beam theory to model the
elastic behaviour of the manipulator. The manipulator is assumed to be stiff in
vertical bending and torsion, allowing it to vibrate dominantly in the horizontal
direction and, thus, the gravity effects are neglected. Moreover, the manipulator is
considered to have constant cross-section and uniform material properties
throughout.
The dynamic equation describing the motion of the flexible manipulator is
given below. In this equation motion of the manipulator in presented in terms of
y x; t
ð
Þ.
EI @4yðx; tÞ
@x4
þ r @2yðx; tÞ
@t2
 DS
@3yðx; tÞ
@x2@t
¼ tðtÞ
(15.1)
X0
Y0
X
Flexible Link ( ρ, E, I, L)
Y
Rigid Hub (Ih)
τ
w(x, t)
Mp
O
x
θ(t)
Figure 15.1
The schematic model of a flexible manipulator system
440
Flexible robot manipulators: modelling, simulation and control

with the corresponding boundary conditions as:
yð0; tÞ ¼ 0
Ih
@3yð0; tÞ
@x@t2
 EI @2yð0; tÞ
@x2
¼ tðtÞ
Mp
@2yðl; tÞ
@t2
 EI @3yðl; tÞ
@x3
¼ 0
EI @2y l; t
ð
Þ
@x2
¼ 0
(15.2)
and initial conditions as:
yðx; 0Þ ¼ 0;
@yðx; 0Þ
@x
¼ 0
(15.3)
For experimental verification of the simulation environment, an experimental
flexible manipulator rig is considered in this study. A picture of the experimental
system is shown in Figure 15.2. The flexible arm is constructed using a piece
of thin aluminium alloy with length, L ¼ 0:9 m, width ¼ 19.008 mm, thickness ¼
3.2004 mm, E ¼ 71  109 N/m2, I ¼ 5.1924 m4, r ¼ 2,710 kg/m3 and Ih ¼ 5:8598 
104 kg m2. The rig is equipped with a U9M4AT-type printed circuit motor at the
hub, driving the flexible manipulator. The transducers used to measure various
responses are the shaft encoder, tachometer and an accelerometer to measure hub-
angle, hub angular velocity, and end-point acceleration respectively.
15.3
SCEFMAS structure
The main components of SCEFMAS are shown in the block diagram in
Figure 15.3. There are five major components:
(a)
Initial GUI,
(b)
FD simulation and control,
(c)
Intelligent modelling techniques,
(d)
Results GUI,
(e)
Validation GUIs.
Figure 15.2
The experimental flexible manipulator system
Software environment for modelling and control of FMs
441

The initial GUI: This allows the user to provide specifications for a single-link
flexible manipulator and to set the FD simulation parameters in the SCEFMAS
environment. The GUI is developed by using the MATLAB Guide toolbox. All the
simulation, modelling, and control tasks within the environment are linked with the
parameters provided within this GUI. At any point, the user can change any of these
parameters.
The FD simulation and control: This part provides the FD simulation and
control of a flexible manipulator system. The user can run an open-loop simulation
(for observing the system response) of the flexible manipulator or to run a simu-
lation with a specific control scheme. The control part involves both the open-loop
and closed-loop control methods. These include classical, advanced, and intelligent
control techniques.
Intelligent modelling techniques: These include NN and GA modelling and
subsequent model verification. The training data used for NN and GA models are
obtained from an open-loop FD simulation run using random or composite pseudo-
random binary sequence (PRBS) torque inputs. The user is provided with a GUI-
driven facility where the desired model parameters can be introduced. The progress
in modelling is also reported through a graphical window within the GUI.
Results GUI: This provides a facility to monitor all the simulation and control
outcomes through the display of input and various outputs both in time and
Start
Initial GUI
NN
GA
NN Modelling
GUI
Choose
Algorithm
NN Modelling
FD Model
(open loop)
GA Modelling
GUI
GA Modelling
Controllers?
Select Controller
Performance
Plots
Quit?
Stop
GA Validation
Plots
No
No
Yes
NN Validation
plots
Yes
Figure 15.3
Block diagram for the SCEFMAS environment
442
Flexible robot manipulators: modelling, simulation and control

frequency domains. This GUI also displays a 3D motion profile of a flexible
manipulator for a given simulation run.
Model validation GUIs: The quality of the developed NN and GA models can
be verified both in time and frequency domains as well as through correlation tests.
This allows the user to come up with an optimum model structure for a given
intelligent modelling technique.
15.4
FD simulation and control
The FD simulation and control comprise one of the main parts of the SCEFMAS
environment. With this FD simulation, the user will be able to perform open-loop
simulation of a single-link flexible manipulator system as well as the imple-
mentation of various control designs. The implementation flowchart for the FD
simulation and control is shown in Figure 15.4.
For the open-loop simulation the user will be able to observe open-loop
responses of a flexible manipulator with various input choices. The input types
provided within SCEFMAS are random, composite PRBS, and bang–bang. The
control part involves implementation of various open- and closed-loop classical
control methods, including a number of adaptive controllers and a neuro-adaptive
inverse controller.
Start
Plant
Specifications
Input Type
Controller
Controller
FD
FD Simulation
Results
New
Simulation?
Stop
FD Simulation
or
Controller?
Figure 15.4
Flowchart of FD simulation and controller implementation
Software environment for modelling and control of FMs
443

15.4.1
FD simulation algorithm
The development of flexible manipulator simulation environment involves the
solution of (15.1) using the FD method. In the FD method, the length of the flexible
manipulator is divided into suitable number of equal-length sections. For a given
input torque, the displacement of each of these sections is then calculated using a
suitable boundary condition. The FD method uses a set of equivalent difference
equations, defined by the central finite difference quotients of the FD method,
obtained by discretising the partial differential equation (PDE) in (15.1) with its
associated boundary and initial conditions in (15.2) and (15.3). The process
involves dividing the manipulator into n sections each of length Dx and considering
the deflection of each section at sample times Dt. In this manner, a solution of the
PDE is obtained by generating the central difference formulae for the partial deri-
vative terms of the response y x; t
ð
Þ of the manipulator at points x ¼ i:Dx; t ¼ j:Dt.
The details of the algorithm development can be found in Tokhi and Azad (1995a).
15.4.2
Controller designs
The controller implementation within the SCEFMAS is divided into two major
types, namely, open-loop control and closed-loop control.
The open-loop control implementation involves the design of suitable input
torques where the vibrating frequency components for a given flexible manipulator
system are removed by using various available methods. The developed torque
inputs under this category are the Gaussian shaped torque, low pass, and band-stop
filtered torques.
The closed-loop control strategies are of two main types, namely, classical
methods and advanced control. The classical controllers are implemented in two
ways: joint-based collocated feedback control and joint and end-point feedback-
based
hybrid
(collocated
and
non-collocated)
control.
These
controller
implementations involve the use of proportional derivative (PD) controllers,
proportional-integral-derivative (PID) controllers, and the combination of PD and
PID. The advanced controller implementation involves various adaptive control
strategies using both the hub (angle, velocity) and end-point acceleration feedback.
One of these controllers also involves the use of NN as a part of the controller
feedback loop and is called adaptive neuro-inverse controller. The details of these
designs can be found in Tokhi and Azad (1995b, 1995c, 1996b).
15.5
Intelligent modelling
This section describes the NN and GA modelling strategies used within the
SCEFMAS environment.
15.5.1
NN modelling
The development of NN model for a flexible manipulator system is implemented
through multi-layer perception method (Luo and Unbehauen, 1997; Sze, 1995).
The flowchart of the NN model implementation is shown in Figure 15.5.
444
Flexible robot manipulators: modelling, simulation and control

In this implementation, the user will have an option of choosing the number of
layers, number of neurons in each layer, and the type of neurons. The input and
output from an open-loop FD simulation model are used as the training data for the
NN modelling exercise. The developed NN model can also be validated both in
time and frequency domains along with appropriate correlation tests.
15.5.2
GA modelling
This part involves the development of a GA model of a user-specified flexible
manipulator system. The user will have the choice to specify GA model parameters,
such as number of individuals, maximum number of generations, generation gap,
binary precision, and the order of the GA model. Similar to the NN modelling, the
input and output from an FD Simulink model will be used as reference for the
model development process.
A flowchart describing the GA modelling steps is shown in Figure 15.6. The
quality of the developed model can be verified both in time and frequency domain
along with suitable correlation tests.
15.6
Graphical user interfaces
The development of interactive GUIs is one of the key features of the SCEFMAS
environment. This section will discuss both the Results GUI and the intelligent
model validation GUIs. The Results GUI is used to display the input and output
signals both in time and frequency domains after a simulation run for open-loop
Start
Initialise GUI
Type and Number
of Neurons
Number of
Layers
Generate
Data Set
Network
Training
Validation Plots
Stop
Figure 15.5
Flowchart of NN modelling strategy
Software environment for modelling and control of FMs
445

response or response from a controller design. On the other hand, the validation
GUIs are used to observe the quality of a developed model through NN and GA
modelling process. In the case of NN modelling, there are two validation GUIs; one
for validation in time and frequency domains and one through correlation tests. In
case of GA modelling, there is only one GUI for validation and this is in the time
domain.
The provision of GUI allow the user to concentrate on the modelling structure
and control algorithms, and implementation results rather than spending time on
programming for the algorithm implementation and data analysis. This feature
makes this environment very attractive for educational and as an objective-oriented
research environment where there is very little time to spare.
15.7
SCEFMAS implementation
This section will provide a detailed description of the SCEFMAS implementation.
The description includes discussion of the developed models, controllers, and GUIs
along with their step-by-step operation.
15.7.1
Initial GUI
The Initial GUI used in SCEFMAS is shown in Figure 15.7. This is the main GUI
and is named SCEFMAS: Flexible Manipulator Simulation Environment. There are
three major components in this GUI. The first is the user-defined inputs, the second
Start
Initialise GUI
Generate
Data Set
GA Modelling
Validation Plots
Stop
Modelling
Parameters
Plant Component
To Display
Figure 15.6
Flowchart for GA modelling process
446
Flexible robot manipulators: modelling, simulation and control

is the simulation and modelling algorithm and the third is the input excitation type
for an open-loop FD simulation. The input choice is only valid for open-loop FD
simulation cases.
15.7.1.1
User-defined inputs
The user-defined inputs are divided into three groups. The first group is the
Manipulator Specifications, which includes the physical dimensions of the pro-
posed manipulator along with assigned payload. The user can change the values by
using the respective sliders. The second group is the Material properties, which
allows the user to choose the material properties of the proposed manipulator. The
user can choose the values using respective drop-down menus. The environment is
provided with some readily available material properties, which are commonly
used for flexible manipulator designs. The third group is the Simulation parameters.
This group provides the total simulation time, number of segments for FD
discretisation, and stability factor.
15.7.1.2
Modelling, simulation, and control algorithms
This group of option buttons is marked as Choose from the Algorithms
(Figure 15.7). The first choice button is marked as the FD Simulation and Control
button, which will direct the user towards the FD simulation and control applica-
tions. The second button is marked as the NN Modelling button; this is used to
perform NN modelling and validation exercise. The third one is marked with the
Figure 15.7
Initial GUI of SCEFMAS
Software environment for modelling and control of FMs
447

GA Modelling button, and is used for GA modelling and validation exercise. For
the second and third cases, the open-loop FD simulation data are used as reference
for NN and GA modelling process. The choice of input types for an open-loop FD
simulation and intelligent modelling can be made through appropriate radio button
at the bottom of the GUI. This group is marked as Input Types. The input choices
are Random input, Composite PRBS input, and bang–bang input. However, for the
NN and GA modelling one can choose only the Random input or Composite PRBS
input. The bang–bang input is not suitable for this purpose.
15.7.1.3
FD simulation and control
This route of SCEFMAS can be taken by clicking on the FD Simulation and
Control button within the initial GUI. This will open a dialog box for a decision
(Figure 15.8). This will allow the user to choose to continue with this or to go back
to the Initial GUI for further review of the choice.
If the user chooses to continue, this will open the SCEFMAS LIBRARY AND
CASE STUDIES window as shown in Figure 15.9. The Simulink drives the com-
ponents within this window. This window consists of three main components. The
first one is the SCEFMAS Library, the second is Open-loop Case Studies and the
third is Closed loop Case Studies. The user can open any of these components by
clicking on the blocks within Figure 15.9.
The SCEFMAS Library block consists of four sub-blocks. These are Flexible
Manipulators, Closed-Loop Controllers, Open-Loop Controllers, and Input–Outputs.
The SCEFMAS Library block in its expanded form is shown in Figure 15.10.
The users can use the components within the library to develop their own models
and even can develop new components (blocks) and include them as part of the
library.
The Open-loop Case Studies block consists of Simulink models for open-loop
response of a flexible manipulator and also the models with various open-loop
control inputs. The open-loop control inputs are developed by using Gaussian-
shaped input, low-pass and band-stop filtered inputs. The cut-off frequencies are
selected
considering
the
flexible
manipulator
specification
mentioned
in
Section 15.2. There are a total of 10 models within this block.
The Closed loop Case Studies block introduces closed loop controllers. These
include fixed controllers, adaptive controllers, and adaptive neuro-inverse con-
troller. There are a total of five models within this group, comprising two fixed
controllers, two adaptive controllers and one neuro-adaptive controller.
Figure 15.8
Simulink option-window
448
Flexible robot manipulators: modelling, simulation and control

Figure 15.9
SCEFMAS Library components
Figure 15.10
SCEFMAS library window
Software environment for modelling and control of FMs
449

At this point the user can choose one of the following four options:
(a)
Perform an open-loop FD simulation (uncontrolled response) of a specified
flexible manipulator with Random input, Composite PRBS input, and bang–
bang input or any other user-defined inputs.
(b)
Perform an open-loop vibration and position control exercise using one of the
models provided within the Open-loop Case Studies block.
(c)
Perform closed-loop vibration and position control exercise using one of the
models provided within the Closed-loop Case Studies block.
(d)
Develop a new controller and implement this with the specified flexible
manipulator.
The remainder of this section will present the implementation of case studies
for the first three options.
15.7.2
Open-loop FD simulation
This section highlights the response of a flexible manipulator system with different
types of input. Within the SCEFMAS environment there are three input torque
options, which can be used to observe the open-loop response of a flexible
manipulator system using FD simulation. The inputs are Random input, Composite
PRBS input, and bang–bang input. In addition to these, users can develop their own
torque profiles. In this section, an open-loop FD simulation of a flexible manip-
ulator is presented with the bang–bang input as the input torque.
To initiate the process the user needs to click on the Open-loop Case Studies
block within the Figure 15.10. This will open a new window with the Open Loop
Case Studies (Figure 15.11). Within this window (top left corner) there is a
block called Open Loop Subsystem, which contains a Simulink model of a flexible
manipulator with pre-specified torque input (within the Initial GUI). A double-
click on this block will open the model (Figure 15.12).
The model consists of an FD arm in SS block, which implements the FD
algorithm for the flexible manipulator in state–space form. The bang–bang torque
input is provided from the MATLAB workspace through the Open_loop_input
block. Along with the FD arm in SS block this torque input is passed to the
Auxiliary and yin blocks. The Auxiliary block produces data for 3D dis-
placement, while the yin block passes the input torque values to the MATLAB
workspace for further analysis. The output of the FD arm in SS block contains the
displacement, velocity, and acceleration data for the hub point and end-point of the
flexible manipulator. These data are passed to the MATLAB workspace through
the Mux and yout blocks.
A click on the Simulink run button within the model window will run the
simulation for the specified amount of time (provided within the Initial GUI). All
the input and output data are now available to the MATLAB workspace and ready
to analyse. After the completion of the simulation run a new button will appear
within the Initial GUI window, called Results (Figure 15.13).
A click on the Results button will open a new GUI window for displaying
all the input and outputs. The new window is shown in Figure 15.14. The window
450
Flexible robot manipulators: modelling, simulation and control

Figure 15.11
The open-loop case studies
Figure 15.12
Open-loop model with bang–bang torque input
Software environment for modelling and control of FMs
451

Figure 15.13
Initial GUI with the Results button activated
Figure 15.14
Results GUI displaying hub angle output from an open-loop
simulation run with bang–bang input
452
Flexible robot manipulators: modelling, simulation and control

is provided with all the option buttons and three graph windows. The top two
graphs are for time domain and frequency domain plots of a selected input or
output, while the third graph displays 3D plot showing a complete motion of the
manipulator for the whole period of simulation. The picture properties of the 3D
display can be adjusted by using the four mouse-driven menus at the right bottom
side of the GUI. Along with other aspects the user can rotate the 3D plot to view
the profile from different angles. The current displays within the graph windows
are chosen for hub angle output for a given simulation run. In addition to this
output the user can view the input torque, hub angle, hub velocity, hub accelera-
tion, end-point displacement, end-point velocity, end-point acceleration, and
residual motion. These can be selected by using one of the buttons at the bottom
of the GUI.
After viewing the results the user can click on the Quit button or on the New
Simulation button. A click on the Quit button will close the Results GUI. A click
on the New Simulation button will open a new window, called Choose
Option (Figure 15.15). There are three options within this window. The first one
is the Simulink model, the second is the Plant design, and the third is the Cancel.
A click on the Simulink model will take the user to the SCEFMAS Library and
Case Studies block, where the user can open a new model for simulation run.
A click on the Plant design will take the user to the Initial GUI, called
SCEFMAS: Flexible Manipulator Simulation Environment, where the user can
enter specifications for a different manipulator system with different set of simu-
lation parameters. While a click on the Cancel button will close the Results
window.
15.7.3
Open-loop control
To open the models with open-loop controller the user needs to click on the
Open-Loop Case Studies block within Figure 15.9. The open-loop control
case studies blocks consist of flexible manipulator system with open-loop torque
inputs (Figure 15.11). In terms of types of input these can be classified as: Gaus-
sian-shaped torque, low-pass filtered shaped torque, Butterworth band-stop filtered
shaped torque, and Elliptic band-stop filtered shaped torque.
There are a total of nine models provided within this group. One of the case
studies, called arm_bs2b, with Butterworth band-stop filter, is shown in
Figure 15.16. In this case the input signal is blocked around the first two resonance
frequencies of the manipulator. After the completion of a simulation run the user is
Figure 15.15
Choose Option window
Software environment for modelling and control of FMs
453

able to view the input and outputs by using the Results GUI. Figure 15.17 shows
the Results GUI with the hub velocity output for the model shown in
Figure 15.16.
15.7.4
Closed-loop control
To access the closed-loop controllers the user needs to click on the Closed-Loop
Case Studies block within Figure 15.9. The closed-loop case studies consist of
both fixed and adaptive controllers along with an adaptive neuro-inverse controller.
The Simulink window with the closed-loop controllers is shown in Figure 15.18.
The Fixed Controllers provided within the SCEFMAS are of two types: one
is the JBC Controller and the other is the Hybrid Controller. Within the
Adaptive Controller group, there are also three models: first one is the
Adaptive JBC Controller, second one is the Adaptive Hybrid
Controller, and the third is the Adaptive Neuroinverse Controller.
All the controller models will be discussed in this section.
15.7.4.1
Joint-based collocated control
This control scheme uses the hub angle and hub velocity information for the con-
troller design to control the end-point position of the flexible manipulator. These
are used in a proportional and derivative (PD) control structure.
Figure 15.16
Flexible manipulator with Butterworth-type band-stop
filtered input
454
Flexible robot manipulators: modelling, simulation and control

Figure 15.17
Flexible manipulator with Butterworth band-stop
filtered input
Figure 15.18
Closed-loop case studies
Software environment for modelling and control of FMs
455

The Simulink model of a flexible manipulator with joint-based control is
shown in Figure 15.19(a). The block labelled ‘Reference’ generates a position
command of angular displacement in degrees. Figure 15.19(b) shows the
Results GUI displaying hub velocity output after a simulation run. To customise
(a)
(b)
Figure 15.19
A flexible manipulator with a joint-based controller: (a) Simulink
model and (b) hub velocity output
456
Flexible robot manipulators: modelling, simulation and control

the controller for a different manipulator specification, the user can open the con-
troller block and change the Kp and Kv values. These are the proportional and
derivative controller gains, respectively.
15.7.4.2
Hybrid collocated and non-collocated control
It is sometimes difficult to control the end-point of a flexible manipulator with
feedback from the hub. To handle such situations, this control design utilises end-
point acceleration feedback through a PID control scheme in addition to the hub
angle and hub velocity feedback. The hub angle and hub velocity signals are used
in a PD configuration for control of the rigid body motion of the manipulator,
while the end-point acceleration feedback minimises the end-point vibration. This
kind of controller is also known as hybrid collocated non-collocated controller.
Figure 15.20(a) shows a Simulink model with a fixed hybrid controller.
15.7.4.3
Adaptive JBC control
The joint-based controller control presented in Section 15.7.4.1 is designed to
handle fixed payload conditions. To handle situations of varying payloads, one
needs to adapt the PD controller parameters in accordance with a payload change.
A Simulink model for a flexible manipulator with an adaptive joint-based con-
troller is shown in Figure 15.21(a). The controller uses a self-tuning controller to
adjust the controller parameters KP and KV. The controlled output for end-point
acceleration is shown in Figure 15.21(b).
15.7.4.4
Adaptive inverse-dynamic control
This is an extension of the hybrid collocated non-collocated controller, as illu-
strated in Section 15.7.4.2. In this approach, an adaptive JBC controller is used to
position the flexible manipulator from one point to another. The adaptive inverse
control is used to drive the flexible manipulator with an additional signal from a
controller whose transfer function is the inverse of that of the plant itself.
The adaptive inverse control is active when the flexible manipulator is in
motion, so that the computed torque is used to force the end-point vibration to a
minimum level. Since the plant is generally unknown, it is necessary to adapt or
adjust the parameters of the controller in order to create the true plant inverse. The
Simulink model of a flexible manipulator with an adaptive controller with model
inversion is shown in Figure 15.22(a), while the controlled end-point acceleration
profile is shown through the SCEFMAS Results GUI in Figure 15.22(b).
15.7.4.5
Adaptive neuro-inverse-dynamic control
This method uses an adaptive collocated controller for controlling the position of
the manipulator and an adaptive non-collocated neuro-inverse controller for sup-
pressing the vibration of the system. In this approach a neuro-controller is used
along with an adaptive JBC control method to achieve both trajectory tracking and
vibration suppression. The basic idea of adaptive neuro-inverse control is to drive
the flexible manipulator with an additional signal from a controller whose transfer
Software environment for modelling and control of FMs
457

(b)
(a)
Figure 15.20
Hybrid collocated and non-collocated controller: (a) Simulink
model and (b) end-point acceleration output
458
Flexible robot manipulators: modelling, simulation and control

(b)
(a)
Figure 15.21
Adaptive joint-based collocated controller: (a) Simulink model and
(b) end-point acceleration output
Software environment for modelling and control of FMs
459

(a)
(b)
Figure 15.22
Adaptive inverse-dynamic control: (a) Simulink model and
(b) end-point acceleration output
460
Flexible robot manipulators: modelling, simulation and control

function is the inverse of that of the plant itself. The adaptive inverse controller is
active when the flexible manipulator is in motion, so that the computed torque is
used to force the end-point vibration to a minimum level. Since the plant is gen-
erally unknown, it is necessary to adapt or adjust the parameters of the controller in
order to create the true plant inverse.
The Simulink model for the adaptive neuro-inverse-dynamic control is shown
in Figure 15.23. The controlled output for the end-point acceleration (both in time
and frequency domains) along with a 3D motion profile of the manipulator is
shown in Figure 15.24.
15.8
Intelligent modelling
The SECFMAS implementation of the intelligent modelling of a flexible manip-
ulator involves the NN and GA modelling. Each of these implementations requires
two sets of GUIs. Each set consists of two GUIs, one is for modelling and the other
is for model validation. For each modelling approach, the first GUI is for specifying
the respective model structure and performs the modelling process, while the other
GUI is for displaying the model validation plots.
Figure 15.23
Simulink model of adaptive neuro-inverse-dynamic control
Software environment for modelling and control of FMs
461

15.8.1
NN modelling
The Neural Network Modelling GUI is used to carry out NN modelling of a
flexible manipulator system. This GUI is invoked by clicking on the NN Model-
ling button within the Initial GUI of SCEFMAS. A dialog box, shown in
Figure 15.25, will appear to confirm the transfer process. A click on the ‘Yes’
button will open the Neural Network Modelling GUI, which is shown in
Figure 15.26.
The user can choose two, three, or four layers of neurons. The types of neuron
along with the number of neurons in each layer can also be selected. After speci-
fying the desired NN structure the user needs to generate the training data by
clicking on the Generate Data button (Figure 15.26). This will open a Simulink
model with open-loop input as shown in Figure 15.27. The input will be either
‘Random input’ or ‘Composite PRBS input’, as selected within the Initial GUI.
Such types of input can excite all the dominant vibration modes of a flexible
manipulator. Subsequent run of the open-loop FD simulation model will produce
the input–output data necessary for the NN training. The data are then passed to the
MATLAB environment for subsequent use by NN training.
Figure 15.24
End-point acceleration with adaptive neuro-inverse-dynamic
control
462
Flexible robot manipulators: modelling, simulation and control

After generating the training data, the user needs to click on the Train
Network button. This will start the NN training process (Figure 15.27). The
training progress can be monitored by the graph window shown on the GUI. The
graph will plot the sum-squared error. At the completion of the training process a
message Simulation Done will appear within the Neural Network Mod-
elling GUI. This will be followed by the appearance of another button called
Figure 15.25
Switch to NN modelling option
Figure 15.26
The GUI used for neural network modelling
Software environment for modelling and control of FMs
463

Model Validation. The sum-squared error graph for an NN modelling process
along with the Simulation Done message and Model Validation button are
shown in Figure 15.27.
The Model Validation button will allow the user to examine the quality of
the developed NN model. The GUI with validation plots for hub angle model in the
time domain is shown in Figure 15.28. As seen in Figure 15.28, the validation plots
have a group of pushbutton menus on the left-hand side, which can be used to plot
the graphs for various components of a flexible manipulator. The hub-angle vali-
dation plots with correlation tests are shown in Figure 15.29. The user can click on
the Quit button to return to the SCEFMAS GUI and start simulation all over again
with a different set of parameters.
15.8.2
GA modelling
The Genetic Algorithm Modelling GUI is used to develop a desired a
model for the flexible manipulator system. The Genetic Algorithm Model-
ling GUI can be invoked by clicking the GA Modelling button within the
Initial GUI of SCEFMAS. A dialog box, as shown in Figure 15.30, will appear on
the screen, which prompts the user, whether to begin the GA modelling.
Figure 15.27
NN modelling GUI at the end of a simulation run
464
Flexible robot manipulators: modelling, simulation and control

The Genetic Algorithm Modelling GUI is shown in Figure 15.31. On
the left-hand side of the GUI the user can choose specifications such as Number of
Individuals, Maximum number of Generations, Generation Gap, Binary precision,
and Order of the model. A drop-down menu is provided to select the type of
required model. The model options provided are: Input torque to hub angle, Input
torque to hub velocity, and Input torque to end-point acceleration. Only one of
these options can be selected for a modelling run.
After setting all the desired model parameters and model type options the user
needs to generate reference data by clicking on the Generate Data button on the
bottom-left of the GUI. This will open a Simulink model with open-loop input as
shown in Figure 15.12. Similar to the NN modelling, the input will be either
‘Random input’ or ‘Composite PRBS input’, as selected within the Initial GUI.
These inputs can excite all the dominant vibration modes of a flexible manipulator.
The generated input–output data will be passed to the MATLAB environment so
that these can be available for GA modelling process.
After generating the training data, the user can proceed with the GA modelling
process by clicking on GA Modelling button. The GUI with an adaptation graph
for the GA modelling process is shown in Figure 15.32. The adaptation plot
Figure 15.28
Time and frequency domain validation plots for a developed
NN model
Software environment for modelling and control of FMs
465

displays the generation error. At the completion of a GA modelling process, a new
button called GA Validation button will be activated. The user can use this
button to initiate the validation process.
The validation process involves a GUI, known as the Validation Plots:
Genetic Algorithm Modelling GUI and is shown in Figure 15.33.
Figure 15.29
Validation plots for a developed hub angle model through
correlation tests
Figure 15.30
Dialog box prompt to switch to GA modelling
466
Flexible robot manipulators: modelling, simulation and control

Figure 15.31
The GUI used for providing GA model structure
Figure 15.32
Adaptation plots for GA algorithm
Software environment for modelling and control of FMs
467

Figure 15.34 shows the validation plots for a GA hub velocity model. Within the
GUI, the buttons on the left-hand side are provided to choose which model requires
validation.
15.9
Web-based SCEFMAS
The current version of the SCEFMS is implemented on standalone systems, where
simulation software has to be installed on each computer. Furthermore, any new
addition or update to the simulation software should be implemented on each sys-
tem individually. This requires time and effort to keep the simulation system
updated and current. Web-based simulation can be an approach to address these
issues effectively and efficiently. In this way, the simulation will run on a central
server and can be accessed by the users from remote locations. Any update and new
addition will be performed at the server end, avoiding any effort from the users.
There are a number of software that can be used for web simulation of engineering
systems: MATLAB, Mathematica, LabVIEW, GNU Octave, etc.
Figure 15.33
The GUI for GA model validation
468
Flexible robot manipulators: modelling, simulation and control

Considering various factors, MATLAB and ASP.NET has been used to
develop a web-based SCEFMAS. Recently, MathWorks developed and marketed a
web simulation tool for running MATLAB programs over the web. In addition to
the standard MATLAB platform, the MATLAB Compiler SDK is used as a core
MATLAB tool. This converts MATLAB code to a dll file. The dll file is then
passed to an ASP.NET program to present the simulation output through a web-
based graphical user interface (GUI). The developed GUI also accepts inputs from
remote users and passes it to the server for processing. There is an additional
shortcoming for the MATLAB Compiler SDK, it cannot deal with Simulink blocks.
A diagram outline of the process is shown in Figure 15.35.
The web simulation of SCEFMAS is still in the initial stage, and at this stage
can be used to implement finite difference and finite element simulation of flexible
manipulator systems along with a number of open-loop controller designs.
Figures 15.36 and 15.37 show images of the GUI developed for FD and FE. Users
can select specifications for a desired flexible manipulator system from a remote
Figure 15.34
The GUI with graphs for GA model validation
Software environment for modelling and control of FMs
469

location via the GUIs. The request will then be passed to the server (where the
simulation environment is hosted), and the simulation will be performed at that
server side. The simulation results will then be presented to the remote user via
the web-based GUI.
DLL (MATLAB)
ASP.NET
WEB PAGE
Reading data
as arguments
Calling
Multiple files
Calculations
and passing
as
Arguments
...
...
...
Conversion
to integer
values
Writing the
data to text
file
Calculations
Data and
passing of 
data
...
...
Input Data
Graph
Figure 15.35
Showing the web implementation process using MATLAB and
ASP.NET
Figure 15.36
An image of the GUI for finite difference implementation
470
Flexible robot manipulators: modelling, simulation and control

15.10
Summary
The design and development of a simulation environment for a flexible manip-
ulator system have been provided. The environment includes finite difference and
finite element simulations, intelligent modelling, and open and closed-loop con-
troller designs. The intelligent modelling contains neural network and genetic
algorithm developments. The controller designs include both classical, intelligent,
and hybrid implementations. The classical controller includes open-loop designs as
well as PID controllers. The intelligent controller has various adaptive forms
along with adaptive neuro-inverse controllers. To address some limitations of
standalone version of SCEFMAS the chapter also reported an initial work towards
a web-based version of SCEFMAS.
SCEFMAS is an environment developed for both purposes of teaching as well
as research, where in the former case the facility can be utilised in interactive, on-
site or remote access, laboratory setting to learn characteristic phenomena of
manoeuvring beams and manipulators and corresponding control techniques. In the
latter case the environment can serve as test and verification platform for controller
designs.
Figure 15.37
An image of the GUI for finite element implementation
Software environment for modelling and control of FMs
471

This page intentionally left blank 

References
Abe, S. and Lan, M. S. (1995). ‘‘A method for fuzzy rules extraction directly from
numerical data and its application to pattern classification,’’ IEEE Transac-
tion on Fuzzy Systems, 3, (1), pp. 18–28.
Alam, M. S. and Tokhi, M. O. (2007). ‘‘Design of command shaper using gain-
delay units and particle swarm optimisation algorithm for vibration control of
flexible systems,’’ International Journal of Acoustics and Vibration, 12, (3),
pp. 99–108.
Alam, M. S. and Tokhi, M. O. (2008). ‘‘Designing feedforward command shapers
with multi-objective genetic optimisation for vibration control of a single-
link flexible manipulator,’’ Engineering Applications of Artificial Intelli-
gence, 21, (2), pp. 229–246.
Alam, M. S. and Tokhi, M. O. (2009). ‘‘Selection and designing of command
shaper for vibration control of flexible manipulators: A multi-objective
optimization approach,’’ International Journal of Acoustics and Vibration,
14, (4), pp. 179–187.
Al-Bedoor, B. O. and Khulief, Y. A. (1996). ‘‘Finite element dynamic modeling of
a translating and rotating flexible link,’’ Computer Methods in Applied
Mechanics and Engineering, 131, (1–2), pp. 173–189.
Amann, N., Owens, D. H. and Rogers, E. (1995). Iterative learning control
for discrete time systems with exponential rate of convergence, Technical
report 95/14, Centre for Systems and Control Engineering, University of
Exeter, UK.
Amaral, J. N., Turmer, K. and Ghosh, J. (1995). ‘‘Designing genetic algorithms
for the state assignment problem,’’ IEEE Transactions on Systems, Man and
Cybernetics, 25, (4), pp. 687–694.
Arimoto, S., Kawamura, S. and Miyazaki, F. (1984). ‘‘Bettering operation of robots
by learning,’’ Robotic Systems, 1, (2), pp. 123–140.
Arimoto, S., Kawamura, S. and Miyazaki, F. (1986). ‘‘Convergence, stability
and robustness of learning control schemes for robot manipulators,’’ in
M. Jamshidi, L. Y. S. Luh and M. Shahinpoor (Eds.): Recent Trends in Robotics:
Modelling, Control and Education, Elsevier Science, New York, pp. 307–316.
Aspinwall, D. M. (1980). ‘‘Acceleration profiles for minimising residual response,’’
Transactions of ASME: Journal of Dynamic Systems, Measurement and
Control, 102, (1), pp. 3–6.
Aubrun, J.-N. (1980). ‘‘Theory of the control structures by low-authority
controllers,’’ Journal of Guidance and Control, 3, pp. 444–451.

Azad, A. K. M. (1994). Analysis and design of control mechanisms for flexible
manipulator systems, PhD thesis, Department of Automatic Control and
Systems Engineering, The University of Sheffield, UK.
Bai, M., Zhou, D.-H. and Schwarz, H. (1998). ‘‘Adaptive augmented state feedback
control for an experimental planar two-link flexible manipulator,’’ IEEE
Transactions on Robotics and Automation, 14, (6), pp. 940–950.
Baker, J. E. (1987). ‘‘Reducing bias and inefficiency in the selection algorithm,’’
Proceedings of the Second International Conference on Genetic Algorithms,
California, Morgan Kaufmann Publishers, Inc., San Mateo, CA, USA,
pp. 14–21.
Banks, S. (1990). Signal Processing Image Processing and Pattern Recognition,
Prentice Hall International, Englewood Cliffs, NJ, USA.
Bar-Cohen, Y., Xue, T., Shahinpoor, M., Simpson, J. and Smith, J. (1998).
‘‘Flexible, low-mass robotic arm actuated by electroactive polymers and
operated equivalently to human arm and hand,’’ Robotics 98: The Third
Conference and Exposition/Demonstration on Robotics for Challenging
Environments, New Mexico, USA, 26–30 April 1998.
Battiti, R. (1992). ‘‘First and second order methods for learning: Between steepest
descent and Newton’s method,’’ Neural Computation, 4, (2), pp. 141–166.
Bayo, E. (1988). ‘‘Computed torque for the position control of open-loop flexible
robots,’’ Proceedings of IEEE International Conference on Robotics and
Automation, Philadelphia, PA, USA, 25–29 April, pp. 361–321.
Bayo, E. and Moulin, H. (1989). ‘‘An efficient computation of the inverse
dynamics of flexible manipulators in the time domain,’’ Proceedings of the
IEEE International Conference on Robotics and Automation, Scottsdale, AZ,
USA, 14–19 May 1989, pp. 710–715.
Baz, A., Poh, S. and Fedor, J. (1992). ‘‘Independent modal space control with
positive position feedback’’, Transaction of the ASME Journal of Dynamic
Systems, Measurement and Control, 114, pp. 96–103.
Bendat, J. S. and Piersol, A. G. (1986). Random Data: Analysis and Measurement
Procedures, Wiley Interscience, New York, USA.
Bennet, S. (1994). Real time computer control: An Introduction, second edition
Prentice Hall, London.
Benosman, M. and Le Vey, G. (2002). ‘‘Joint trajectory tracking for planar
multi-link flexible manipulator: Simulation and experiment for a two-link
flexible manipulator,’’ Proceedings of the IEEE International Conference
on Robotics and Automation, Washington, DC, USA, 11–15 May 2002,
pp. 2461–2466.
Bezdek, J. C. (1992). ‘‘On the relationship between neural networks, pattern
recognition and intelligence,’’ International Journal of Approximate Rea-
soning, 6, (2), pp. 85–107.
Billings, S. A. and Voon, W. S. F. (1986). ‘‘Correlation based model validity
tests for non-linear systems,’’ International Journal of Control, 15, (6),
pp. 601–615.
474
Flexible robot manipulators: modelling, simulation and control

Billings, S. A. and Zheng, G. (1995). ‘‘Radial basis function network configuration
using genetic algorithms,’’ Neural Networks, 8, (6), pp. 877–890.
Bishop, C. M. (1995). Neural Networks for Pattern Recognition, Clarendon Press,
Oxford.
Blum, E. K. and Li, L. K. (1991). ‘‘Approximation theory and feedforward theory,’’
Neural Networks, 4, (4), pp. 511–515.
Bondi, P., Casalino, G. and Gambardella, L. (1988). ‘‘On the iterative learning
control theory for robotic manipulators,’’ IEEE Journal of Robotics Auto-
mation, 4, pp. 14–22.
Book, W. J. (1974). Modelling design and control of flexible manipulator arms, PhD
thesis, Department of Mechanical Engineering, MIT, Cambridge, MA, USA.
Book, W. J. (1984). ‘‘Recursive Lagrangian dynamics of flexible manipulator
arms,’’ International Journal of Robotics, 3, pp. 87–101.
Book, W. J. and Majette, M. (1983). ‘‘Controller design for flexible distributed
parameter mechanical arms via combined state-space and frequency domain
techniques,’’ Transaction of ASME Journal of Dynamic Systems, Measure-
ment and Control, 105, (4), pp. 245–254.
Book, W. J. and Soo, H. L. (1989). ‘‘Vibration control of a large flexible mani-
pulator by a small robotic arm,’’ Proceeding of American Control Con-
ference, Pittsburgh, USA, 21–23 June, 2, pp. 1377–1380.
Book, W. J., Alberts, T. E. and Hastings, G. G. (1986). ‘‘Design strategies for high-
speed lightweight robots,’’ Computers in Mechanical Engineering, 5, (2),
pp. 26–33.
Booker, L. (1987). ‘‘Improving search in genetic algorithms,’’ in L. Devis (Ed.):
Genetic Algorithms and Simulated Annealing, Morgan Kauffmann, New York,
pp. 61–73.
Borowiec, J. and Tzes, A. (1996). ‘‘Frequency-shaped explicit output feedback for
flexible link manipulators,’’ Proceedings of the 35th Conference on Decision
and Control, Kobe, Japan, 11–13 December 1996, pp. 4106–4111.
Bossert, D., Ly, U.-L. and Vagners, J. (1996). ‘‘Experimental evaluation of robust
reduced-order hybrid position/force control on a two-link manipulator,’’
Proceedings of the IEEE International Conference on Robotics and Auto-
mation, Minneapolis, USA, 22–28 April 1996, pp. 2573–2578.
Breakwell, J. A (1980). Control of flexible spacecraft, PhD thesis, Department of
Aeronautics and Astronautics, Stanford University, Stanford, CA, USA.
Bricout, J. N., Debus, J. C. and Micheau, P. (1990). ‘‘A finite element model for the
dynamics of flexible manipulators,’’ Mechanism and Machine Theory, 25,
(1), pp. 119–128.
Brown, M. and Harris, C. (1994). Neuro-Fuzzy Adaptive Modelling and Control,
Prentice Hall, New York, USA.
Buckley, J. J. and Hayashi, Y. (1994). ‘‘Fuzzy neural networks: A survey,’’ Fuzzy
Sets and Systems, 66, (1), pp. 1–13.
Buckley, J. J. and Hayashi, Y. (1995). ‘‘Neural nets for fuzzy systems,’’ Fuzzy Sets
and Systems, 71, (3), pp. 265–276.
References
475

Burden, R. L. and Faires, J. D. (1989). Numerical Analysis, PWS-KENT Publishing
Company, Boston, MA, USA.
Cannon, R. H. and Schmitz, E. (1984). ‘‘Initial experiments on the control of a
flexible one-link robot,’’ International Journal of Robotics Research, 3, (3),
pp. 62–75.
Casdagli, M. (1989). ‘‘Non-linear prediction of chaotic time series,’’ Physics D, 35,
pp. 335–356.
Caudell, T. P. and Dolan, C. P. (1989). ‘‘Parametric connectivity: Training of
constrained networks using genetic algorithms,’’ Proceedings of the Third
International Conference on Genetic Algorithms, Virginia, USA, 4–7 June
1989, pp. 370–374.
Cetinkunt, S. and Ittop, B. (1992). ‘‘Computer-automated symbolic modeling of
dynamics of robotic manipulators with flexible links,’’ IEEE Transactions of
Robotics and Automation, 8, (1), pp. 94–105.
Chao, C.-T. and Teng, C.-C. (1997). ‘‘A PD-like self-tuning fuzzy controller
without steady-state error,’’ Fuzzy Sets and Systems, 87, pp. 141–154.
Chang, L. W. and Gannon, K. P. (1990). ‘‘A dynamic model on a single link
flexible manipulator,’’ Transaction of the ASME Journal of Vibration and
Acoustics, 112, (1), January, pp. 138–143.
Chang, L. W. and Hamilton, J. F. (1991). ‘‘Dynamic robotic manipulators with
flexible links,’’ Transactions of the ASME Journal of Dynamic Systems,
Measurement, and Control, 113, (1), pp. 54–59.
Chapnik, B. V., Heppler, G. R. and Aplevich, J. D. (1991). ‘‘Modelling impact on a
one-link flexible robotic arm,’’ IEEE Transactions on Robotics and Auto-
mation, 7, (4), pp. 479–488.
Chen, S. and Billings, S. A. (1992). ‘‘Neural networks for non-linear dynamic
system modelling and identification,’’ International Journal of Control, 56,
pp. 319–346.
Chen, S., Billings, S. A. and Luo, W. (1989). ‘‘Orthogonal least squares methods
and their application to nonlinear system identification,’’ International
Journal of Control, 50, (5), pp. 1873–1896.
Chen, S., Cowan, C. F. N. and Grant, P. M. (1991). ‘‘Orthogonal least squares
learning algorithm for radial basis function networks,’’ IEEE Transactions on
Neural Networks, 2, (2), pp. 302–309.
Chen, M. and Linkens, D. A. (1998). ‘‘A hybrid neuro-fuzzy PID controller,’’ Fuzzy
Sets and Systems, 99, (1), pp. 27–36.
Chen, M.-Y. and Linkens, D. A. (1999). ‘‘A hybrid neural network architecture for
self-construction of fuzzy rule-based systems,’’ Proceedings of 14th IFAC
World Congress, Beijing, China, 5–9 July 1999.
Cheng, W. and Wen, J. T. (1993). ‘‘A neural controller for the tracking control of
flexible arms,’’ Proceedings of the IEW International Conference on Neural
Networks, Francisco, USA, 28 March–1 April 1993, pp. 749–754.
Cheong, J., Chung, W. and Youm, Y. (2001). ‘‘Fast suppression of vibration for
multi-link flexible robots using parameter adaptive control,’’ Proceedings of
476
Flexible robot manipulators: modelling, simulation and control

the IEEE/RSJ International Conference on Intelligent Robots and Systems,
Hawaii, USA, 29 October–3 November 2001, pp. 913–918.
Chi, Z., Yan, H. and Phan, T. (1996). Fuzzy Algorithms: With Applications to
Image Processing and Pattern Recognition, World Scientific, Singapore.
Chien, C. J. and Liu, J. S. (1996). ‘‘A P-type iterative learning controller for robust
output tracking of nonlinear time-varying systems,’’ International Journal of
Control, 64, (2), pp. 319–334.
Chin, T. C. and Qi, X. M. (1998). ‘‘Genetic algorithms for learning the rule base of
fuzzy logic controller,’’ Fuzzy Sets and Systems, 97, (1), pp. 1–7.
Chipperfield, A. J. and Fleming, P. J. (1994). Parallel genetic algorithms: A survey,
Research report no. 518, Department of Automatic Control and Systems
Engineering, The University of Sheffield, UK.
Chipperfield, A. J. and Fleming, P. J. (1996). ‘‘Multiobjective gas turbine engine
controller design using genetic algorithms,’’ IEEE Transactions on Industrial
Electronics, 43, (5), pp. 583–587.
Chipperfield, A. J., Fleming, P. J., Pohlheim, H. and Fonseca, C. (1994). ‘‘A genetic
algorithm toolbox for MATLAB,’’ Proceedings of the International Con-
ference on Systems Engineering, Coventry, UK, 6–8 September 1994.
Chipperfield, A., Purshouse, R., Fleming, P. J., Thompson, H. and Griffin, I.
(2002a). ‘‘Multi-objective optimisation in control system design: An evolu-
tionary computing approach,’’ IFAC World Congress, 21–26 July, Barcelona,
Spain.
Chipperfield, A. J., Bica, B. and Fleming, P. J. (2002b). ‘‘Fuzzy scheduling control
of a gas turbine aero-engine: A multiobjective approach,’’ IEEE Transactions
on Industrial Electronics, 49, (3), pp. 536–548.
Choi, S. B., Gandhi, M. V. and Thompson, B. S. (1988). ‘‘An experimental
investigation of an articulating robotic manipulator with a graphite epoxy
arm,’’ Journal of Robotic Systems, 5, pp. 73–79.
Chou, C. H. and Lu, H. C. (1993). ‘‘Real-time fuzzy controller design for
hydraulic servo system,’’ International Journal of Computing Industry, 22,
pp. 129–142.
Chung, H.-Y., Chen, B.-C. and Lin, J.-J. (1998). ‘‘A PI-type fuzzy controller with
self-tuning scaling factors,’’ Fuzzy Sets and Systems, 93, pp. 23–28.
Clerc, M. (1999). ‘‘The swarm and the queen: Toward a deterministic and adaptive
particle swarm optimization,’’ Proceedings of IEEE International Congress
on Evolutionary Computation, Washington DC, USA, 6–9 July 1999, 3,
pp. 1951–1957.
Clerc, M. and Kennedy, J. (2002). ‘‘The particle swarm: Explosion, stability, and
convergence in a multi-dimensional complex space,’’ IEEE Transactions on
Evolutionary Computation, 6, (1), pp. 58–73.
Clough, R. W. and Penzien, J. (1975). Dynamics of Structures, McGraw-Hill Book
Company, New York, USA.
Coello, C. A. C., van Veldhuizen, D. A. and Lamont, G. B. (2002). Evolutionary
Algorithms for Solving Multi-Objective Problems, Kluwer, Norwell, MA, USA.
References
477

Coello, C. A. C., Pulido, G. T. and Lechuga, M. S. (2004). ‘‘Handling multiple
objectives with particle swarm optimization,’’ IEEE Transactions on Evolu-
tionary Computation, 8, (3), pp. 256–279.
Craig, J. J. (1986). Introduction to Robotics: Mechanics and Control, Addition-
Wesley, Reading, MA, USA.
Craig, J. J. (1988). Adaptive Control of Mechanical Manipulators, Addison-Wesley
Publishing Company, Boston, MA, USA.
Critchlow, A. J. (1985). Introduction to Robotics, Macmillan Publishing Company,
New York, USA.
Dado, M. and Soni, A. H. (1986). ‘‘A generalized approach for forward and inverse
dynamics of elastic manipulators,’’ Proceedings of IEEE Conference on
Robotics and Automation, San Francisco, CA, USA, 7–10 April 1986,
pp. 359–364.
Davis, L. (1985). ‘‘Job scheduling with genetic algorithms,’’ in J. J. Grefenstette
(Ed.): Proceedings of the First International Conference on Genetic
algorithms, Lawrence
Erlbaum
Associates Inc., Hillsdale, NJ, USA,
pp. 136–140.
Davis, J. H. and Hirschorn, R. M. (1988). ‘‘Tracking control of a flexible robot
link,’’ IEEE Transactions on Automatic Control, 33, (3), pp. 238–248.
Deb, K. (2001). Multi-Objective Optimization Using Evolutionary Algorithms,
Wiley, New York, USA.
Deb, K. and Goldberg, D. E. (1989). ‘‘An investigation of niche and species for-
mation in genetic function optimization,’’ Proceedings of the Third Interna-
tional Conference on Genetic Algorithms, Morgan Kauffman, San Mateo,
CA, USA, pp. 42–50.
Deb, K., Pratap, A., Agarwal, S. and Meyarivan, T. (2002). ‘‘A fast and elitist
multiobjective genetic algorithm: NSGA-II,’’ IEEE Transactions on Evolu-
tionary Computation, 6, (2), pp. 182–197.
DeJong, K. A. (1975). An analysis of the behavior of a class of genetic adaptive
systems, Doctoral dissertation, University of Michigan, Ann Arbor, MI, USA.
DeJong, K. (1980). ‘‘Adaptive system design: A genetic approach,’’ IEEE Trans-
action on Systems Man and Cybernetics, 10, (9), pp. 556–574.
DeJong, K. A. and Spears, W. M. (1990). ‘‘An analysis of the interacting roles of
population size and crossover in genetic algorithms,’’ Proceedings of First
Conference on Parallel Problem Solving from Nature, Dortmund, Germany,
pp. 38–47.
Dellman, R., Glicksber, I. and Gross, O. (1956). ‘‘On the bang-bang control
problem,’’ Quarterly of Applied Mechanics, 14, pp. 11–18.
De Luca, A., Lucibello, P. and Nicolo, F. (1988). ‘‘Automatic symbolic modelling
and non-linear control of robots with flexible links,’’ Proceedings of
IEE Seminar on Robotics and Control, Oxford, UK, 13–15 April 1988,
pp. 62–70.
De Luca, A. and Siciliano, B. (1989). ‘‘Trajectory control of a non-linear one-link
flexible arm,’’ International Journal of Control, 50, pp. 1699–1715.
478
Flexible robot manipulators: modelling, simulation and control

Dickenson, J. and Kosko, B. (1993). ‘‘Fuzzy function learning with covariance
ellipsoids,’’ Proceedings of IEEE International Conference on Neural
Networks, San Francisco, CA, USA, 3, pp. 1162–1167.
Donne, J. D. and O¨ zgu¨ner, U. (1994). ‘‘Neural control of a flexible-link mani-
pulator,’’ Proceedings of the IEEE International Conference on Neural
Networks, Orlando, USA, 28 June–2 July 1994, 2327–2332.
Dorato, P. (1987). ‘‘A historical review of robust control,’’ IEEE Control System
Magazine, 7, 44–47.
Drainkov, D., Hellendorn, H. and Reinfrank, M. (1993). An Introduction to Fuzzy
Control, Springer-Verlag, New York.
Du, H., Lim, M. K. and Liew, K. M. (1996). ‘‘A nonlinear finite element model for
dynamics of flexible manipulators,’’ Mechanism and Machine Theory, 31,
(8), pp. 1109–1119.
Dwight, H. B. (1957). Tables and Integrals and Other Mathematical Data, third
edition, Macmillan, New York, USA.
Eberhart, R. and Kennedy, J. (1995). ‘‘A new optimizer using particle swarm
theory,’’ Proceedings of the Sixth International Symposium on Micro
Machine and Human Science, Nagoya, Japan, 4–6 October 1995, pp. 39–43.
Eberhart, R., Simpson, P. K. and Dobbins, R. W. (1996). Computational Intelli-
gence PC Tools, Academic Press, Boston, MA, USA.
Eberhart, R. and Shi, Y. (1998). ‘‘Comparison between genetic algorithms and
particle swarm optimization,’’ in V. W. Porto, N. Saravanan, D. Waagen and
A. E. Eiben (Eds.): Evolutionary Programming VII. EP 1998. Lecture Notes
in Computer Science, 1447. Springer, Berlin, Germany.
Elanayar, S. V. T. and Yung, C. S. (1994). ‘‘Radial basis function neural network
for approximation and estimation of non-linear stochastic dynamic systems,’’
IEEE Transaction on Neural Networks, 5, (4), pp. 594–603.
ElectroCraft Corporation (1985). DC Motors Speed Controls Servo Systems, fifth
edition, ElectroCraft Corporation, Robbins & Myers, Willis, TX, USA.
Fan, H.-Y. and Shi, Y. (2001). ‘‘Study of Vmax of the particle swarm optimization
algorithm,’’ Proceedings of the Workshop on Particle Swarm Optimization,
Indianapolis, IN, USA.
Feliu´, V., Rattan, K. S. and Benjamin, H. B. Jr. (1990). ‘‘Adaptive control of a single-
link flexible manipulator,’’ IEEE Control Systems Magazine, 10, (3), pp. 29–33.
Feliu´, V., Rattan, K. S. and Brown, H. B. Jr. (1992). ‘‘Modelling and control of
single link flexible arms with lumped masses,’’ Transaction of ASME Journal
of Dynamic Systems, Measurement, and Control, 114, (1), pp. 59–69.
Ficola, A., La Cava, M. and Muraca, P. (1994). ‘‘A simplified finite element model
of multilink robots with flexible links,’’ Mathematics and Computers in
Simulation, 37, (6), pp. 491–503.
Fieldsend, J. E. and Singh, S. (2002). ‘‘A multi-objective algorithm based upon
particle swarm optimisation: An efficient data structure and turbulence,’’
Proceedings of the 2002 UK Workshop on Computational Intelligence,
Birmingham, 2–4 September 2002, pp. 37–44.
References
479

Figuiredo, M. and Gomide, F. (1999). ‘‘Design of fuzzy systems using neurofuzzy
networks,’’ IEEE Transaction on Neural Networks, 10, (4), pp. 815–827.
Fliess, M. (1989). ‘‘Nonlinear control theory and differential algebra,’’ in Model-
ling and Adaptive Control, Lecture Notes in Control and Information
Sciences, 15, Springer-Verlag, Berlin, Germany, pp. 135–145.
Fonseca, C. M. (1995). Multiobjective genetic algorithms with application to con-
trol engineering problems, PhD thesis, Department of Automatic Control and
Systems Engineering, The University of Sheffield, UK.
Fonseca, C. M. and Fleming, P. J. (1993). ‘‘Genetic algorithms for multiobjective
optimization: Formulation, discussion and generalization,’’ Proceeding of the
Fifth International Conference on Genetic Algorithms, San Mateo, CA,
pp. 416–423.
Fonseca, C. M. and Fleming, P. J. (1995). ‘‘Multiobjective genetic algorithms made
easy: Selection, sharing and mating restrictions,’’ Proceedings of IEEE
International Conference on Genetic Algorithms in Engineering Systems:
Innovations and Applications, Sheffield, UK, 12–14 September, pp. 45–52.
Fonseca, C. M. and Fleming, P. J. (1998a). ‘‘Multiobjective optimization and
multiple constraint handling with evolutionary algorithms – Part I: A unified
formulation,’’ IEEE Transaction on Systems, Man and Cybernetics – Part A:
Systems and Humans, 28, (1), pp. 26–37.
Fonseca, C. M. and Fleming, P. J. (1998b). ‘‘Multiobjective optimization and
multiple constraint handling with evolutionary algorithms – Part II: Appli-
cation example,’’ IEEE Transaction on Systems, Man and Cybernetics –
Part A: Systems and Humans, 28, (1), pp. 38–47.
Furuya, Y. and Shimada, H. (1991). ‘‘Shape memory actuators for robotic appli-
cations,’’ Materials & Design, 12, (1), February, pp. 21–28.
Furuya, Y., Shimada, H., Goto, T. and Honada, R. (1987). ‘‘An extreme operation
robot designed to develop the deep submarine manganese nodules resour-
ces,’’ Proceedings of Symposium International Co-Operation on Industrial
Robots (SICIR-87), Tokyo, Japan, p. 261.
Furuya, Y., Goto, T., Shimada, H. and Honda, R. (1988). ‘‘An extreme operation
submarine robot actuated by shape memory alloys,’’ MRS 1988 Meeting,
Tokyo, Japan, June.
Gacoˆgne, L. (1997). ‘‘Research of Pareto set by genetic algorithm: Application
to multicriteria optimization of fuzzy controller,’’ Proceedings of Fifth
European Congress on Intelligent Techniques and Soft Computing, Aachen,
Germany, September, pp. 837–845.
Gamarra-Rosado, V. O., Fernandez, G., Grieco, J. C., Armada, M. and Alane, N.
(1996). ‘‘Control of a flexible one-link manipulator,’’ Automation and
Cybernetics, 25, (5), pp. 38–47.
Ge, S. S., Lee, T. H. and Tan, E. G. (1997). ‘‘Adaptive neural network control of
flexible link robots based on singular perturbation,’’ Proceedings of the IEEE
International Conference on Control Applications, Hartford, CT, USA, 5–7
October 1997, pp. 365–369.
480
Flexible robot manipulators: modelling, simulation and control

Geniele, H., Patel, R. V. and Khorasani, K. (1992). ‘‘Control of flexible manip-
ulator,’’ Proceedings of the Fourth ASME International Symposium on
Robotics and Manufacturing, New Mexico, USA, 11–13 November 1992,
1992, pp. 567–572.
Gevarter, W. B. (1970). ‘‘Basic relations for control of flexible vehicles,’’ AIAA
Journal, 8, pp. 666–672.
Gilardi, G., Buckham, B. J. and Park, E. J. (2009). ‘‘Finite element modeling of a
slewing non-linear flexible beam for active vibration control with arrays of
sensors and actuators,’’ Journal of Intelligent Material Systems and Struc-
tures, 20, (16), pp. 1941–1958.
Giovagnoni, M. (1994). ‘‘A numerical and experimental analysis of a chain of
flexible bodies,’’ ASME Transaction of the Journal of Dynamic Systems,
Measurement and Control, 106, (1), pp. 73–80.
Goh, S. P., Plummer, A. R. and Brown, M. D. (2000). ‘‘Digital control of a flexible
manipulator,’’ Proceedings of the American Control Conference, Chicago,
IL, USA, 28–30 June 2000, pp. 2205–2209.
Goldberg, D. E. (1989). Genetic Algorithms in Search, Optimisation and Machine
Learning, Addison-Wesley Publishing Company, Boston, MA, USA.
Goldberg, D. E. and Smith, R. E. (1987). ‘‘Non-stationary function optimisation
using genetic dominance and diploidy,’’ Proceedings of the Second Interna-
tional Conference on Genetic Algorithms, Massachusetts, USA, pp. 59–68.
Grefenstette, J. J. (1986). ‘‘Optimisation of control parameters for genetic algo-
rithms,’’ IEEE Transactions on Systems, Man and Cybernetics, 16, (1),
pp. 122–128.
Gunnarsson, S. and Norrlo¨f, M. (1997). A short introduction to iterative learning
control, Technical report LiTH-ISY-R-1926, Department of Electrical
Engineering, Linkoping University, Sweden.
Gutie´rrez, L. B., Lewis, F. L. and Lowe, J. A. (1998). ‘‘Implementation of a neural
network tracking controller for a single flexible link: Comparison with PD
and PID controllers,’’ IEEE Transactions on Industrial Electronics, 45, (2),
pp. 307–318.
Hagan, M. T. and Menhaj, M. B. (1994). ‘‘Training feedforward networks with
Marquardt algorithm,’’ IEEE Transactions on Neural Networks, 5, (6), pp.
989–993.
Halgamuge, S. K. and Glesner, M. (1994). ‘‘Neural networks in designing
fuzzy systems for real world applications,’’ Fuzzy Sets and Systems, 65, (1),
pp. 1–12.
Hanson, L. and Salamon, P. (1990). ‘‘Neural network ensembles,’’ IEEE Trans-
actions on Pattern Analysis and Machine Intelligence, 12, pp. 993–1001.
Happel, B. M. and Murre, J. J. (1994). ‘‘Design and evolution of modular neural
network architectures,’’ Neural Networks, 7, pp. 985–1004.
Harashima, F. and Ueshiba, T. (1986). ‘‘Adaptive control of flexible arm using the
end-point position sensing,’’ Proceedings of Japan–USA Symposium on
Flexible Automation, Osaka, Japan, 15–20 July, pp. 225–229.
References
481

Harris, C. J., Moore, C. G. and Brown, M. (1993). Intelligent Control: Aspects of
Fuzzy Logic and Neural Nets, World Scientific, Singapore.
Hashtrudi-Zaad, K. and Khorasani, K. (1996). ‘‘Control of non-minimum phase
singularly perturbed systems with applications to flexible manipulators,’’
International Journal of Control, 63, pp. 679–701.
Haslam, J. A., Summers, G. R. and Williams, D. (1981). Engineering Instru-
mentation and Control, Edward Arnold Publishers Ltd., London.
Hastings, G. G. (1986). Controlling flexible manipulators: An experimental inves-
tigation, PhD thesis, Georgia Institute of Technology, School of Mechanical
Engineering, USA.
Hastings, G. G. and Book, W. J. (1987). ‘‘A linear dynamic model for flexible
robotic manipulator,’’ IEEE Control Systems Magazine, 7, (1), pp. 61–64.
He, X. and Lapedes, A. (1993). ‘‘Non-linear modelling and prediction by succes-
sive approximation using radial basis functions,’’ Physics D, 70, pp. 289–301.
Heppner, F. and Grenander, U. (1990). ‘‘A stochastic nonlinear model for coor-
dinated bird flocks,’’ in S. Krasner (Ed.): The Ubiquity of Chaos, AAAS
Publications, Washington, DC, USA.
Hillsley, K. L. and Yurkovich, S. (1993). ‘‘Vibration control of a two-link flexible
robot arm,’’ Dynamics and Control, 3, pp. 261–280.
Hirose, S., Oita, K. and Tsukamoto, M. (1984). ‘‘Three dimensional active endoscope
actuated by shape memory effect,’’ Second Japan Robot Symposium, Japan,
p. 123.
Hirose, S., Ikuta, K. and Umetani, Y. (1986). ‘‘Development of shape memory
alloy actuator (Performance evaluation and new configuration method),’’
Journal of Robotic Society, Japan, 4, (2), p. 15.
Hodge, L., Auda, G. and Kamel, M. (1999). ‘‘Learning decision fusion in co-
operative modular neural networks,’’ International Joint Conference on
Neural Networks: IJCNN’99, Piscataway, NJ, USA, 10–16 July 1999, 4,
pp. 2777–2781.
Holland, J. (1975). Adaptation in Natural and Artificial Systems, University of
Michigan Press, Ann Arbor, MI, USA.
Holland, J. (1992). ‘‘Adaptation in natural and artificial systems: An introductory
analysis with applications to biology,’’ Control in Artificial Intelligence, MIT
Press, Cambridge, MA, USA.
Holstien, R. B. (1971). Artificial genetic adaptation in computer control systems,
PhD thesis, Department
of Computer and Communication Sciences,
University of Michigan, Ann Arbor, MI, USA.
Homaifar, A. and McCormick, E. (1995). ‘‘Simultaneous design of membership
functions and rule sets for fuzzy controllers using genetic algorithms,’’ IEEE
Transaction on Fuzzy Systems, 3, (2), pp. 129–139.
Horn, J., Nafpliotis, N. and Goldberg, D. E. (1994). ‘‘A niched Pareto genetic
algorithm for multiobjective optimization,’’ Proceedings of IEEE World
Congress on Computational Intelligence, New Jersey, USA, 27–29 June, 1,
pp. 82–87.
482
Flexible robot manipulators: modelling, simulation and control

Horowitz, R. (1993). ‘‘Learning control of robot manipulators,’’ Journal of
Dynamic Systems Measurement, and Control, 115, pp. 402–411.
Hossain, M. A., Tokhi, M. O., Chipperfield, A. J., Fonseca, C. M. and Dakev, N. V.
(1995). ‘‘Adaptive active vibration control using genetic algorithms,’’
Proceedings of GALESIA-95: First IEE/IEEE International Conference on
GAs in Engineering Systems: Innovations and Applications, Sheffield, UK,
12–14 September 1995, pp. 175–180.
Hu, A. (1993). ‘‘A survey of experiments for modeling verification and control of
flexible robotic manipulators,’’ Proceedings of the First IEEE Regional
Conference on Aerospace Control Systems, Westlake, CA, USA, 25–27 May
1993, pp. 344–353.
Hu, X. and Eberhart, R. (2002). ‘‘Multiobjective optimization using dynamic
neighborhood particle swarm optimization,’’ Proceedings of Congress on
Evolutionary Computation, Honolulu, HI, USA, 12–17 May 2002, 2, pp.
1677–1681.
Hu, X., Eberhart, R. C. and Shi, Y. (2003). ‘‘Particle swarm with extended memory
for multiobjective optimization,’’ Proceedings of IEEE Swarm Intelligence
Symposium, Indianapolis, IN, USA, 26 April 2003, pp. 193–197.
Huang, Y.-P. and Huang, C.-H. (1997). ‘‘Real-valued genetic algorithms
for fuzzy grey prediction system,’’ Fuzzy Sets and Systems, 87, (3),
pp. 265–276.
Hughes, P. C. (1987). ‘‘Space structure vibration modes: How many exists? Which
ones are important?,’’ IEEE Control Systems Magazine, 7, (1), pp. 22–28.
Ikuta, K. (1990). ‘‘Micro/miniature shape memory alloy actuator,’’ IEEE Interna-
tional Conference on Robotics and Automation, 3, pp. 2156–2161.
Inland Motors (1985). Direct Drive D.C. Motors, Inland Motors, 501 First Street,
Radford, VA 24141, USA.
Ishibuchi, H., Nozaki, K., Yamamoto, N. and Tanaka, H. (1995). ‘‘Selecting fuzzy
if-then rules for classification problems using genetic algorithms,’’ IEEE
Transaction on Fuzzy Systems, 3, (3), pp. 260–270.
Iwamoto, K., Koike, Y., Nonami, K., Tanida, K. and Iwasaki, I. (2002). ‘‘Output
feedback sliding mode control for bending and torsional vibration control of
6-story flexible structure,’’ JSME International Journal, Series C, 45, (1),
pp. 150–158.
Jackson, L. B. (1989). Digital Filters and Signal Processing, Kluwer Academic
Publishers, London, UK.
Jacobs, R. A. and Jordan, M. I. (1993). ‘‘Learning piecewise control strategies in a
modular neural network architecture,’’ IEEE Transactions on Systems, Man,
and Cybernetics, 23, (2), pp. 337–345.
Jain, A. K. and Mohiuddin, K. M. (1996). ‘‘Artificial neural networks: A tutorial,’’
Computer, 29, (3), pp. 31–44.
Jang, J.-S. R. (1993). ‘‘ANFIS: Adaptive-network-based fuzzy inference sys-
tem,’’ IEEE Transaction on Systems, Man and Cybernetics, 23, (3),
pp. 665–685.
References
483

Jang, J.-S. R. and Sun, C.-T. (1993). ‘‘Functional equivalence between radial basis
function networks and fuzzy inference system,’’ IEEE Transaction on Neural
Networks, 4, pp. 156–159.
Jayasuriya, S. and Choupra, S. (1991). ‘‘On the finite settling time and residual
vibration control of flexible structures,’’ Journal of Sound and Vibration,
148, pp. 117–136.
Jin, Y., Okabe, T. and Sendhoff, B. (2001). ‘‘Dynamic weighted aggregation for
evolutionary multi-objective optimization: Why does it work and how?,’’
Proceedings
of
Genetic
and
Evolutionary
Computation
Conference,
San Francisco, CA, USA.
Jnifene, A. and Fahim, A. (1997). ‘‘A computed torque/time delay approach to the
end-point control of a one-link flexible manipulator,’’ Dynamics and Control,
7, (2), pp. 171–189.
Jonker, B. (1991). ‘‘Linearization of dynamic equations of flexible mechanisms – A
finite-element approach,’’ International Journal for Numerical Methods in
Engineering, 31, (7), pp. 1375–1392.
Kalra, P. and Sharan, A. M. (1991). ‘‘Accurate modelling of flexible manipulators
using finite element analysis,’’ Mechanism and Machine Theory, 26, (3),
pp. 299–313.
Kanoh, H., Tzafestas, S., Lee, H. G. and Kalal, J. (1986). ‘‘Modelling and control of
flexible robot arms,’’ Proceedings of 25th Conference on Decision and
Control, Athens, Greece, 10–12 December 1986, pp. 1866–1870.
Kargupta, H. and Smith, R. E. (1991). ‘‘System identification with evolving
polynomial networks,’’ Proceedings of the Fourth International Con-
ference on Genetic Algorithms, San Diego, CA, USA, 14–17 July 1991,
pp. 370–376.
Karr, C. L. (1991). ‘‘Design of an adaptive fuzzy logic controller using a genetic
algorithm,’’ Proceedings of the Fourth International Conference on Genetic
Algorithms, San Diego, CA, USA, pp. 450–457.
Karr, C. L. and Gentry, E. J. (1993). ‘‘Fuzzy control of pH using genetic algo-
rithms,’’ IEEE Transaction on Fuzzy Systems, 1, (1), pp. 46–53.
Karray, F. and Modi, V. (1995). ‘‘On the pointing robustness issue of a class of new
generation spacecraft,’’ IEEE Transactions on Automatic Control, 40, (12),
pp. 2132–2137.
Katz, A. J. and Thrift, P. R. (1994). ‘‘Generating image filters for target recognition
by genetic learning,’’ IEEE Transactions on Pattern Analysis and Machine
Intelligence, 16, pp. 906–910.
Kecman, V. (1996). ‘‘System identification using modular neural network with
improved learning,’’ Proceedings of the International Workshop on Neural
Networks for Identification, Control, Robotics, and Signal/Image Processing,
Los Alamitos, CA, USA, 21–23 August 1996, pp. 40–48.
Kennedy, J. (1999). ‘‘Small worlds and mega-minds: Effects of neighborhood
topology on particle swarm performance,’’ Proceeding of the 1999 Congress
on Evolutionary Computation, 6–9 July 1999, pp. 1931–1938.
484
Flexible robot manipulators: modelling, simulation and control

Kennedy, J. and Eberhart, R. (1997). ‘‘A discrete binary version of the particle
swarm algorithm,’’ Proceedings of IEEE International Conference on
Systems, Man, and Cybernetics, 12–15 October 1997, pp. 4104–4108.
Kennedy, J., Eberhart, R. and Shi, Y. (2001). Swarm Intelligence, Morgan Kaufmann
Publishers, San Francisco, CA, USA.
Kennedy, J. and Mendes, R. (2002). ‘‘Topological structure and particle swarm
performance,’’ Proceedings of Congress on Evolutionary Computation,
Honolulu, HI, USA, 12–17 May 2002, 2, pp. 1671–1676.
Kerwin, E. M. Jr. (1959). ‘‘Damping of flexural waves by a constrained viscoelastic
layer,’’ Journal of Acoustical Society of America, 31, pp. 952–962.
Khorrami, F., Jain, S. and Tzes, A. (1994). ‘‘Experiments on rigid body-based
controllers with input preshaping for a two-link flexible manipulator,’’ IEEE
Transactions on Robotics and Automation, 10, (1), pp. 55–65.
Khorrami, F. and O¨ zgu¨ner, U¨ . (1988). ‘‘Perturbation methods in control of flexible link
manipulators,’’ Proceedings of the IEEE International Conference on Robotics
and Automation, Philadelphia, PA, USA, 25–29 April 1988, pp. 310–315.
Khosla, P. K. and Kanade, T. (1988). ‘‘Experimental evaluation of nonlinear
feedback and feedforward control schemes for manipulators,’’ International
Journal of Robotics Research, 7, (1), pp. 790–798.
Kino, M., Goden, T., Murakami, T. and Ohnishi, K. (1998). ‘‘Reaction torque
feedback based vibration control in multi-degrees of freedom motion
system,’’ Proceedings of the 24th Annual Conference of the Industrial Elec-
tronics Society of the IEEE, Aachen, Germany; 31 August–4 September
1998, 3, pp. 1807–1811.
Kita, H., Yabumoto, Y., Mori, N. and Nishikawa, Y. (1996). ‘‘Multi-objective
optimization
by
means
of
the
thermodynamical
genetic
algorithm,’’
Proceedings of the Fourth International Conference on Parallel Problem
Solving from Nature, 22–26 September 2996, Springer-Verlag, Berlin,
Germany, pp. 504–512.
Klafter, R. D., Chmielewski, T. A. and Negin, M. (1989). Robotic Engineering:
An Integrated Approach, Prentice Hall International Inc., Englewood Cliffs,
NJ, USA.
Knowles, J. D. and Corne, D. W. (2000). ‘‘Approximating the nondominated
front using the Pareto archived evolution strategy,’’ Evolutionary Computa-
tion, 8, (2), pp. 149–172.
Korolov, V. V. and Chen, Y. H. (1989). ‘‘Controller design robust to frequency
variation in a one-link flexible robot arm,’’ Journal of Dynamic Systems,
Measurement and Control, 111, (1), pp. 9–14.
Kotnik, P. T., Yorkovich, S. and O¨ zguner, U¨ . (1988). ‘‘Acceleration feedback for
control of a flexible manipulator arm,’’ Journal of Robotics Systems, 5, (3),
pp. 181–196.
Kourmoulis, P. K. (1990). Parallel processing in the simulation and control of
flexible beam structures, PhD thesis, Department of Automatic Control and
Systems Engineering, The University of Sheffield, UK.
References
485

Kress, R., Love, L., Dubey, R. and Gizelar. A (1997). ‘‘Waste tank cleanup
manipulator modeling and control,’’ IEEE International Conference on
Robotics and Automation, Albuquerque, NM, USA, 20–25 April 1997,
pp. 662–668.
Kristinsson, K. and Dumont, G. (1992). ‘‘System identification and control using
genetic algorithms,’’ IEEE Transactions on Systems, Man and Cybernetics,
22, (5), pp. 1033–1046.
Kuc, T. Y., Lee, J. S. and Nam, K. (1992). ‘‘An iterative learning control theory for
a class of nonlinear dynamic systems,’’ Automatica, 28, (6), pp. 1215–1221.
Kuo, B. C. and Tal, J. (Eds.). (1978). DC Motors and Control Systems, SRL Pub-
lishing Company, Champaign, IL, USA.
Kuo, C.-F. J. and Lin, S.-C. (1999). ‘‘An entire strategy for precise system tracking
control of a revolving thin flexural link – Part I: Finite element modeling and
direct tuning controller design,’’ Mathematical and Computer Modelling, 29,
(2), pp. 99–113.
Kwok, D. P., Tam, D., Li, C. K. and Wang, P. (1990). ‘‘Linguistic PID controllers,’’
Proceedings of 11th IFAC World Congress, Tallin, USSR, pp. 192–197.
Kwong, S., Ng, A. C. L. and Man, K. F. (1995). ‘‘Improving local search in genetic
algorithms for numerical
global optimisation using modified GRID-
point search technique,’’ First IEE/IEE International Conference on GAs
in Engineering Systems: Innovations and Applications, Sheffield, UK,
pp. 419–423.
Lammerts, I. M. M., Veldpaus, F. E., van de Molengraft, M. J. G. and Kok, J. J.
(1995). ‘‘Adaptive computed reference computed torque control of flexible
robots,’’ Transactions of the ASME-Journal of Dynamic Systems Measure-
ment and Control, 117, (1), pp. 31–36.
Landau, I., Langer, J., Rey, D. and Barnier, J. (1996). ‘‘Robust control of a 360
flexible arm using the combined pole placement/sensitivity function shaping
method,’’ IEEE Transactions on Control Systems Technology, 4, (4),
pp. 369–383.
Lapidus, L. (1982). Numerical Solution of Partial Differential Equations in Science
and Engineering, Wiley, New York, USA.
Lee, J. (1993). ‘‘On methods for improving performance of PI-type fuzzy logic
controllers,’’ IEEE Transaction on Fuzzy Systems, 1, (1), pp. 298–301.
Lekova, A., Mikhailov, L., Boyadijev, D. and Nabout, A. (1998). ‘‘Redundant
fuzzy rules exclusion by genetic algorithms,’’ Fuzzy Sets and Systems, 100,
(1–3), pp. 235–243.
Leshno, M. (1993). ‘‘Multilayer feedforward networks with a nonpolynomial
activation function can approximate any function,’’ Neural Networks, 6,
pp. 861–867.
Lewis, H. W. (1997). The Foundation of Fuzzy control, Plenum Press, London.
Li, X. (2003). ‘‘A non-dominated sorting particle swarm optimizer for multi-
objective optimization,’’ Proceeding of Genetic and Evolutionary Computa-
tion Conference, Chicago, IL, USA, 12–16 July 2003, Springer-Verlag,
Berlin, Germany, pp. 37–48.
486
Flexible robot manipulators: modelling, simulation and control

Lin, I.-C. and Fu, L.-C. (1998). ‘‘Adaptive hybrid force/position control of a flex-
ible manipulator for automated deburring with on-line cutting trajectory
modification,’’ Proceedings of the IEEE International Conference on
Robotics and Automation, Leuven, Belgium, 16–20 May 1998, pp. 818–825.
Lin, C. and Lu, Y. (1996). ‘‘A neural fuzzy system with fuzzy supervised learn-
ing,’’ IEEE Transaction on Systems, Man and Cybernetics, Part B, 26,
pp. 744–763.
Lin, C.-T. and Lee, C. S. G. (1991). ‘‘Neural-network-based fuzzy logic control and
decision system,’’ IEEE Transactions on Computer, 40, (12), pp. 1320–1336.
Lin, C.-T. and Lee, C. S. G. (1992). ‘‘Real-time supervised structure-parameter
learning for fuzzy neural network,’’ Proceedings of IEEE International
Conference on Fuzzy Systems, 8–12 March 1992, pp. 1283–1290.
Lin, C.-T. and Lee, C. S. G. (1994). ‘‘Reinforced structure/parameter learning for
neural-network-based fuzzy logic control systems,’’ IEEE Transactions on
Fuzzy Systems, 2, (1), pp. 46–63.
Lin, C.-T. and Lee, C. S. G. (1995). ‘‘A neural fuzzy control system with structure
and parameter learning,’’ Fuzzy Sets and Systems, 70, (2–3), pp. 183–212.
Lin, J. and Lewis, F. L. (1994). ‘‘A symbolic formulation of dynamic equations for
a manipulator with rigid and flexible links,’’ International Journal of
Robotics Research, 13, (5), pp. 454–466.
Linkens, D. A and Nyongesa, H. O. (1995a). ‘‘Genetic algorithms for fuzzy control –
Part 1: Offline system development and application,’’ IEE Proceedings of
Control Theory and Application, 142, (3), pp. 161–176.
Linkens, D. A and Nyongesa, H. O. (1995b). ‘‘Genetic algorithms for fuzzy control –
Part 2: Online system development and application,’’ IEE Proceedings of
Control Theory and Application, 142, (3), pp. 177–185.
Little, J. N. and Shure, L. (1988). Signal Processing Toolbox for MATLAB, The
MathWorks, Inc., Natick, MA, USA.
Ljung, L. and Sjo¨berg, J. (1992). ‘‘A system identification perspective on neural
networks,’’ Neural Networks for Signal Processing II – Proceedings of the
IEEE-SP Workshop, Helsingør, Denmark, pp. 423–435.
Low, K. H. and Vidyasagar, M. (1988). ‘‘A Lagrangian formulation of dynamic
model for flexible manipulator systems,’’ Transactions of ASME: Journal of
Dynamic Systems, Measurement and Control, 110, pp. 175–181.
Luo, F-L. and Unbehauen, R. (1997). Applied Neural Networks for Signal Pro-
cessing, Cambridge University Press, Cambridge, UK.
Mace, B. R. (1991). ‘‘The effects of transducer inertia on beam vibration mea-
surements,’’ Journal of Sound and Vibration, 145, (3), pp. 365–379.
Mackle, G., Savic, D. A. and Walters, G. A. (1995). ‘‘Application of genetic
algorithms to pump scheduling for water supply,’’ The First IEE/IEEE
International Conference on GAs in Engineering Systems: Innovations and
Applications, Sheffield, UK, pp. 400–405.
Madhavan, S. K. and Singh, S. N. (1991). ‘‘Inverse trajectory control and dynamic
sensitivity of an elastic manipulator,’’ International Journal of Robotics and
Automation, 6, (4), pp. 179–191.
References
487

Magee, D. P., Cannon, D. W. and Book, W. J. (1997). ‘‘Combined command
shaping and inertial damping for flexure control,’’ Proceedings of the
American Control Conference, Albuquerque, NM, USA, pp. 1330–1334.
Mair, G. M. (1988). Industrial Robotics, Prentice Hall International Inc.,
London, UK.
Mamdani, E. H. and Assilian, S. (1974). ‘‘Application of fuzzy algorithms for
control of simple dynamic plant,’’ Proceedings of IEE, 121, pp. 1585–1588.
Man, K. F., Tang, K. S. and Kwong, S. (1996). ‘‘Genetic algorithms: Concepts
and applications,’’ IEEE Transactions on Industrial Electronics, 43, (5),
pp. 519–533.
Martins, J. M., Mohamed, Z., Tokhi, M. O., Sa´ da Costa, J. and Botto, M. A.
(2003). ‘‘Approaches for dynamic modelling of flexible manipulator
systems,’’ IEE Proceedings-D: Control Theory Applications, 150, (4),
pp. 401–411.
Marquardt, D. (1963). ‘‘An algorithm for least squares estimation of non-linear
parameters,’’ Journal of the Society for Industrial and Applied Mathematics,
11, (2), pp. 431–441.
Meckl, P. H. and Seering, W. P. (1990). ‘‘Experimental evaluation of shaped inputs
to reduce vibration of a cartesian robot,’’ Transaction of the ASME Journal of
Dynamic Systems, Measurement and Control, 112, (6), pp. 159–165.
Meirovitch, L. (1967). Analytical Methods in Vibrations, Macmillan, New York,
USA.
Meirovitch, L. (1970). Methods of Analytical Dynamics, McGraw-Hill, New York,
USA.
Meirovitch, L. (1975) Elements of Vibration Analysis, McGraw-Hill, New York,
USA.
Meirovitch, L., Baruh, H. and Oz, H. (1983). ‘‘A comparison of control techniques
for large flexible systems,’’ Journal of Guidance, Control and Dynamics, 6,
pp. 302–310.
Mendes, R., Kennedy, J. and Neves, J. (2004). ‘‘The fully informed particle swarm:
Simpler, maybe better,’’ IEEE Transactions on Evolutionary Computation, 8,
(3), pp. 204–210.
Meyer, G. E. (1971). Analytical Methods in Conduction Heat Transfer, McGraw-
Hill, New York, USA.
Michalewicz, Z. (1996). Genetic Algorithms þ Data Structures ¼ Evolution Pro-
gram., third edition, Springer-Verlag, Berlin, Germany.
Micro Measurements Inc. (1982). Fatigue Characteristics of Strain Gauges,
Technical Note, TN-508, Welwyn Strain Measurements, UK.
Micro Measurements Inc. (1983). Strain Gauge Selection Criteria, Technical Note
TN-505, Welwyn Strain Measurements, UK.
Micro Measurements Inc. (1989). M-Line Strain Gauge Accessories, Catalogue
A-110-4, Welwyn Strain Measurements, UK.
Micro Power Systems. (1990). Data Sheet for MP7636A, CMOS Double Buffered
16-Bit Multiplexing D/A Converter, Micro Power Systems, Inc., California,
USA.
488
Flexible robot manipulators: modelling, simulation and control

Minsky, M. and Papert, S. (1969). Perceptrons: An Introduction to Computational
Geometry, MIT Press, Cambridge, MA, USA.
Miyabe, T., Yamano, M., Konno, A. and Uchiyama, M. (2001). ‘‘An approach
toward a robust object recovery with flexible manipulators,’’ Proceedings of
the IEEE/RSJ International Conference on Intelligent Robots and Systems,
Hawaii, USA, 29 October–3 November 2001, pp. 907–912.
Moallem, M., Patel, R. V. and Khorasani, K. (1997). ‘‘An intelligent manifold
approach to tip position tracking of flexible multi-link manipulators,’’ IEEE
Transaction on Robotics and Automation, 13, pp. 823–837.
Mohamed, Z. and Tokhi, M. O. (2002). ‘‘Vibration control of a single-link flexible
manipulator using command shaping techniques,’’ Proceedings of IMechE-I:
Journal of Systems and Control Engineering, 216, (2), pp. 191–210.
Mohan, C. K. and Al-Kazemi, B. (2001). ‘‘Discrete particle swarm optimization,’’
Proceedings of the Workshop on Particle Swarm Optimization, Indianapolis,
IN, USA.
Montana, D. J. and Davis, L. (1989). ‘‘Training feedforward neural network using
genetic algorithms,’’ Proceedings of 11th International Joint Conference on
Artificial Intelligence, Michigan, USA, 20–25 August 1989, 1, pp. 762–767.
Moore, K. L. (1993). ‘‘Iterative learning control for deterministic systems,’’
Advances in Industrial Control, Springer-Verlag, Berlin, Germany.
Mostaghim, S. and Teich, J. (2003). ‘‘Strategies for finding good local guides in
multi-objective particle swarm optimization (MOPSO),’’ Proceedings of
IEEE Swarm Intelligence Symposium, Indianapolis, IN, USA, 26 April 2003,
pp. 26–33.
Muhlenbein, H. and Schlierkamp-Voosen, D. (1993). ‘‘Predictive models for the
breeder genetic algorithm,’’ Evolutionary Computation, 1, (1), pp. 25–49.
Murata, T., Ishibuchi, H. and Gen, M. (2001). ‘‘Specification of genetic search
directions in cellular multi-objective genetic algorithms,’’ Proceedings of
First International Conference on Evolutionary Multi-Criterion Optimiza-
tion, 7–9 March 2001, Springer-Verlag, London, pp. 82–95.
Nagarkatti, S. P., Rahn, C. D., Dawson, D. M. and Zergeroglu, E. (2001).
‘‘Observer-based modal control of flexible systems using distributed sen-
sing,’’ Proceedings of the 40th IEEE Conference on Decision and Control,
Orlando, FL, USA, 4–7 December 2001, pp. 4268–4273.
Nagathan, G. and Soni, A. H. (1986). ‘‘Non-linear flexibility studies for spatial
manipulators,’’ Proceedings of the IEEE International Conference on
Robotics and Automation, San Francisco, CA, USA, 7–10 April 1986,
pp. 373–378.
Narendra, K. S. and Parthasarathy, K. (1990). ‘‘Identification and control of
dynamical systems using neural networks,’’ IEEE Transactions on Neural
Networks, 1, (1), pp. 4–27.
Nauck, D. and Kruse, R. (1992). ‘‘Interpreting changes lin the fuzzy sets of a self-
adaptive neural fuzzy controller,’’ Proceedings of Second Workshop on
Industrial Applications of Fuzzy Control and Intelligent Systems, Texas,
USA, 2–4 December 1992, pp. 146–152.
References
489

Nauck, D. and Kruse, R. (1993). ‘‘A fuzzy neural network learning fuzzy control
rules and membership functions by fuzzy error backpropagation,’’ Proceed-
ings of IEEE International Conference on Neural Networks, San Francisco,
USA, 28 March–1 April 2993, pp. 1022–1027.
Nauck, D. and Kruse, R. (1996). ‘‘Designing neuro-fuzzy systems through back-
propagation,’’ in W. Pedrycz (Ed.): Fuzzy Modelling: Paradigms and Prac-
tice, Kluwer, Boston, MA, USA, pp. 203–228.
Nauck, D., Klawonn, F. and Kruse, R. (1997). Foundations of Neuro-Fuzzy
Systems, Wiley, Chichester, UK.
Nerrand, O., Roussel-Ragot, P., Urbani, D., Personnaz, L. and Dreyfus, G. (1994).
‘‘Training recurrent neural networks: Why and how? An illustration in
dynamical process modelling,’’ IEEE Transactions on Neural Networks, 5,
(2), pp. 178–184.
Nesline, F. W. and Zarchan, P. (1984). ‘‘Why modern controllers can go
unstable in practice,’’ AIAA Journal of Guidance, Control and Dynamics, 7,
pp. 495–500.
Newland, D. E. (1996). Introduction to Random Vibrations, Spectral and Wavelet
Analysis, Addison-Wesley Longman, California, USA.
Newton, R. T. and Xu, Y. (1993). ‘‘Neural network control of a single-link flexible
manipulators,’’ IEEE Control System Magazine, 12, pp. 14–22.
Newton, G. C., Gould, L. A. and Kaiser, J. F. (1957). Analytical Design of Linear
Feedback Controls, Wiley, New York, USA.
Nomura, H., Hayashi, I. and Wakami, N. (1991). ‘‘A self-tuning method of fuzzy
control by descent method,’’ Proceedings of Fourth IFSA Congress, Brussels,
pp. 155–158.
Oakley, C. and Cannon, R. (1990). ‘‘Anatomy of an experimental two-link flexible
manipulator under end-point control,’’ Proceedings of the IEEE 29th Con-
ference on Decision and Control, Honolulu, HI, USA, 5–7 December 1990,
pp. 507–513.
Ogata, K. (2001). Modern Control Engineering, Prentice Hall, Inc., Englewood
Cliffs, NJ, USA.
Omatu, S., Khalid, M. and Yusof, R. (1996). Neuro-Control and Its Applications,
Springer, London, UK.
Onsay, T. and Akay, A. (1991). ‘‘Vibration reduction of a flexible arm by time
optimal open-loop control,’’ Journal of Sound and Vibration, 142, (2),
pp. 283–300.
Oosting, K. Dickerson, S. L. (1988). ‘‘Simulation of a high-speed lightweight arm,’’
Proceedings of the IEEE International Conference on Robotics and Auto-
mation, Philadelphia, PA, USA, 24–29 April 1988, pp. 494–496.
Owens, D. H. (1993). ‘‘Universal iterative learning control using adaptive
high-gain feedback,’’ International Journal of Adaptive Control and Signal
Processing, 7, pp. 383–388.
Panzieri, S. and Ulivi, G. (1995). ‘‘Disturbance rejection of iterative learning
control
applied
to
trajectory
tracking
for
a
flexible
manipulator,’’
490
Flexible robot manipulators: modelling, simulation and control

Proceedings of Third European Control Conference, ECC, Rome, Italy,
pp. 2374–2379.
Parsopoulos, K. E. and Vrahatis, M. N. (2002). ‘‘Particle swarm optimization
method in multiobjective problems,’’ Proceedings of ACM Symposium on
Applied Computing, Madrid, Spain, 11–14 March 2002, pp. 603–607.
Piras, G., Cleghorn, W. L. and Mills, J. K. (2005). ‘‘Dynamic finite-element ana-
lysis of a planar high-speed, high-precision parallel manipulator with flexible
links,’’ Mechanism and Machine Theory, 40, (7), pp. 849–862.
Plunkell, R. and Lee, C. T. (1970). ‘‘Length optimization for constrained
viscoelastic layer damping,’’ Journal of Acoustical Society of America, 48,
pp. 150–161.
PMI Motion Technologies (1988). General Application of Printed Motors, PMI
Motion Technologies, New York, USA.
Potkonjak, V. and Jaksic, N. (1986). ‘‘Contribution to a computer aided choice of a
D.C. motors for manipulation robots,’’ Robotica, 4, (1), pp. 37–41.
Poerwanto, H. (1998). Dynamic simulation and control of flexible manipulator
systems, PhD thesis, Department of Automatic Control and Systems Engi-
neering, The University of Sheffield, Sheffield, UK.
Qi, X. M. and Chin, T. C. (1997). ‘‘Genetic algorithms based fuzzy controller for
higher order systems,’’ Fuzzy Sets and Systems, 91, (3), pp. 279–284.
Qian, W. T. and Ma, C. C. H. (1992). ‘‘A new controller design for a flexible
one-link manipulator,’’ IEEE Transactions on Automatic Control, 37, (1),
pp. 133–137.
Raksha, F. and Goldenberg, A. A. (1986). ‘‘Dynamic modelling of a single-link
flexible robot,’’ IEEE International Conference on Robotics and Automation,
San Francisco, CA, USA, 7–10 April 1986.
Rao, S. S. (1989). The Finite Element Method in Engineering, Paragon Press,
Oxford, UK.
Ratnaweera, A., Halgamuge, S. K. and Watson, H. C. (2004). ‘‘Self-organizing
hierarchical particle swarm optimizer with time varying accelerating
coefficients,’’ IEEE Transactions on Evolutionary Computation, 8, (3),
pp. 240–255.
Ray, T. and Liew, K. M. (2002). ‘‘A swarm metaphor for multiobjective design
optimization,’’ Engineering Optimization, 34, (2), pp. 141–153.
Reynolds, C. W. (1987). ‘‘Flocks, herds and schools: A distributed behavioral
model,’’ Computer Graphics, 21, (4), pp. 25–34.
Rhim, S. and Book, W. J. (2004). ‘‘Adaptive time-delay command shaping filter for
flexible manipulator control,’’ IEEE-ASME Transactions on Mechatronics, 9,
(4), pp. 619–626.
Rogers, E. and Owens, D. H. (1992). Stability Analysis for Linear Repetitive
Processes, Springer, Berlin, Germany.
Romano, M., Agrawal, B. N. and Bernelli-Zazzera, F. (2002). ‘‘Experiments on
command shaping control of a manipulator with flexible links,’’ Journal of
Guidance Control and Dynamics, 25, (2), pp. 232–239.
References
491

Ross, C. T. F. (1996). Finite Element Techniques in Structural Mechanics, Albion
Publishing Limited, West Sussex, UK.
Roth, G. and Levine, M. D. (1994). ‘‘Geometric primitive extraction using a genetic
algorithm,’’ IEEE Transaction on Pattern Analysis and Machine Intelligence,
16, (9), pp. 901–905.
Rumelhart, D. E. and Zipser, D. (1986). ‘‘Feature discovery and competitive
learning,’’ Cognitive Science, 9, (1), pp. 75–112.
Rumelhart, D. E., Hinton, G. E. and Williams, R. J. (1986). ‘‘Learning internal
representations by error propagation,’’ Parallel Distributed Processing:
Exploration in the Microstructure of Cognition, vol. 1, MIT Press,
Cambridge, MA, USA.
Sakawa, Y., Matsuno, F. and Fukushima, S. (1985). ‘‘Modelling and feedback
control of a flexible arm,’’ Journal of Robotic Systems, 2, pp. 453–472.
Schaffer, J. D. (1985). ‘‘Multiple objective optimization with vector evaluated
genetic algorithms,’’ Proceedings of the First International Conference on
Genetic Algorithms, Lawrence Erlbaum, Hillsdale, NJ, USA, pp. 93–100.
Schaffer, J. D., Whitley, D. and Eshelman, L. J. (1992). ‘‘Combinations of genetic
algorithms and neural networks: A survey of the state of art,’’ IEEE Inter-
national Workshop on Combinations of Genetic Algorithms and Neural
Networks, Baltimore, MD, USA, 6 June 1992, pp. 1–37.
Schoenwald, D. A. and O¨ zgu¨ner, U. (1990). ‘‘On combining slewing vibration
control in flexible manipulator via singular perturbation,’’ Proceedings of the
29th IEEE Conference on Decision and Control, Honolulu, HI, USA, 5–7
December 1990, pp. 533–538.
Schulz, G. and Heimbold, G. (1983). ‘‘Dislocated actuator/sensor positioning and
feedback design of flexible structures,’’ Journal of Guidance, Control and
Dynamics, 6, pp. 361–367.
Seraji, H. and Moya, M. M. (1987). Position control for nonlinear multiple link
robots, NASA technical brief, 11, (3), item no. 119, March.
Shchuka, A. and Goldenberg, A. A. (1989). ‘‘Tip control of a single-link flexible
arm using feedforward technique,’’ Mechanical Machines Theory, 24,
pp. 439–455.
Shi, Y. and Eberhart, R. (1998). ‘‘A modified particle swarm optimizer,’’
Proceedings of IEEE International Conference on Evolutionary Computa-
tion, Anchorage, USA, 4–9 May 1998, pp. 69–73.
Shi, Y. and Eberhart, R. (1999). ‘‘Empirical study of particle swarm optimization,’’
Proceedings of 1999 Congress on Evolutionary Computation, Washington
DC, USA, 6–9 July 1999, 3, pp. 101–106.
Shi, Y. and Eberhart, R. (2001a). ‘‘Fuzzy adaptive particle swarm optimization,’’
Proceedings of 2001 Congress on Evolutionary Computation, Seoul, Korea,
27–30 May 2001, pp. 101–106.
Shi, Y. and Eberhart, R. (2001b). ‘‘Particle swarm optimization with fuzzy adaptive
inertia weight,’’ Proceedings of the Workshop on Particle Swarm Optimiza-
tion, Indianapolis, IN, USA.
492
Flexible robot manipulators: modelling, simulation and control

Shi, Y., Eberhart, R. and Chen, Y. (1999). ‘‘Implementation of evolutionary fuzzy
systems,’’ IEEE Transaction on Fuzzy Systems, 7, (2), pp. 109–119.
Shaheed, M. H. (2000). Neural and genetic modelling, control and real-time finite
element simulation of flexible manipulators, PhD thesis, Department of
Automatic Control and Systems Engineering, The University of Sheffield,
Sheffield, UK.
Sharma, S. K., Irwin, G. W., Tokhi, M. O. and McLoone, S. F. (2003). ‘‘Learning
soft computing control strategies in a modular neural network archi-
tecture,’’ Engineering Applications of Artificial Intelligence, 16, (5–6),
pp. 395–405.
Siciliano, B. and Book, W. J. (1988). ‘‘A singular perturbation approach control of
lightweight flexible manipulators,’’ International Journal of Robotics
Research, 7, (4), pp. 79–90.
Silva, J. M. M. and Maia, N. M. M. (1988). ‘‘Single mode identification techniques
for use with small microcomputers,’’ Journal of Sound and Vibration, 124,
(1), pp. 13–26.
Singer, N. C. and Seering, W. P. (1990). ‘‘Preshaping command inputs to reduce
system vibration,’’ Transactions of ASME: Journal of Dynamic Systems,
Measurement and Control, 112, (1), pp. 76–82.
Singh, G., Kabamba, P. T. and McClamroch, N. H. (1989). ‘‘Planner time-optimal
rest-to-rest slewing manoeuvre of flexible spacecraft,’’ Journal of Guidance
and Control and Dynamics, 12, pp. 71–81.
Singhose, W. (2009). ‘‘Command shaping for flexible systems: A review of the first
50 years,’’ International Journal of Precision Engineering and Manufactur-
ing, 10, (4), pp. 153–168.
Singhose, W., Crain, E. A. and Seering, W. (1997). ‘‘Convolved and simultaneous
two-mode input shapers,’’ IEE Control Theory and Applications, 144, (6),
pp. 515–520.
Singhose, W., Eloundou, R. and Lawrence, J. (2010). ‘‘Command generation for
flexible systems by input shaping and command smoothing,’’ Journal of
Guidance, Control, and Dynamics, 33, (6), pp. 1697–1707.
Sinha, A. and Kao, C. K. (1991). ‘‘Independent modal sliding mode control of
vibration in flexible manipulator,’’ Journal of Sound and Vibration, 147,
pp. 352–358.
Sira-Ramirez, H., Ahmad, S. and Zribi, M. (1992). ‘‘Dynamical feedback control of
robotic manipulators with joint flexibility,’’ IEEE Transactions on Systems,
Man and Cybernetics, 22, (4), pp. 736–747.
Sjo¨berg, J., Hjalmarsson, H. and Ljung, L. (1994). ‘‘Neural network in system
identification,’’ 10th IFAC Symposium on System Identification, Copenhagen,
Denmark, 2, pp. 49–72.
Song, B. and Koivo, A. J. (1998). ‘‘Neural network model based control of a
flexible
link
manipulator,’’
Proceedings
of
the
IEEE
International
Conference on Robotics and Automation, Leuven, Belgium, 16–20 May
1998, pp. 812–817.
References
493

Space Machines Laboratory (2004a). Aerospace dual arm manipulator, Tohoku
University, Japan (http://www.space.mech.tohoku.ac.jp/research/adam/adam-e.
html).
Space Machines Laboratory (2004b). The control of a 3D flexible manipulator,
Tohoku University, Japan (http://www.space.mech.tohoku.ac.jp/research/
flebot2/flebot2-e.html).
Spector, V. A. and Flashner, H. (1990). ‘‘Modelling and design implementations of
non-collocated control in flexible systems,’’ Transactions of the ASME Jour-
nal of Dynamic Systems Measurement and Control, 112, (2), pp. 186–193.
Srinivas, N. and Deb, K. (1994). ‘‘Multiobjective optimization using nondominated
sorting in genetic algorithms,’’ Evolutionary Computation, 2, (3), pp. 221–248.
Srinivasan, B., Prasad, U. R. and Rao, N. J. (1994). ‘‘Backpropagation through
adjoints for the identification of non-linear dynamic systems using recurrent
neural models,’’ IEEE Transactions on Neural Networks, 5, (2), pp. 213–228.
Stadenny, J. and Belanger, P. (1986). ‘‘Robot manipulator control by acceleration
feedback: Stability, design and performance issues,’’ Proceedings of
IEEE Conference on Decision and Control, Athens, 10–12 December 1986,
pp. 80–85.
Stevensand, H. D. and How, J. P. (1996). ‘‘The limitations of independent con-
troller design for a multiple-link flexible macro-manipulator carrying a rigid
mini-manipulator,’’ Proceedings of the Second ASCE Conference on Robot-
ics for Challenging Environments, Albuquerque, NM, USA, 13–15 June
1996, pp. 93–99.
Stieber, M. E., McKay, M., Vukovich, G. and Petriu, E. (1999). ‘‘Vision-based
sensing and control for space robotics applications,’’ IEEE Transactions on
Instrumentation and Measurement, 48, (4), pp. 807–812.
Su, Z. and Khorasani, K. (2001). ‘‘A neural-network-based controller for a single-
link flexible manipulator using the inverse dynamics approach,’’ IEEE
Transactions on Industrial Electronics, 48, (6), pp. 1074–1086.
Sugeno, M. and Kang, G.T. (1988). ‘‘Structure identification of fuzzy model,’’
Fuzzy Sets and Systems, 28, pp. 15–33.
Sunnyside Systems Ltd. (1992a). adt102 A/D TRAM: Users Manual, Sunnyside
Systems Ltd., Livingston, UK.
Sunnyside Systems Ltd. (1992b). dat202 A/D TRAM: Users Manual, Sunnyside
Systems Ltd., Livingston, UK.
Supino, L. and Romano, P. M. (1997). ‘‘Chatter reduction in sliding mode control
of a disk drive actuator,’’ United States Patent, #5699207.
Suykens, J., Vandewalle, J. and Moor, B. De. (1995). Artificial Neural Network for
Modelling and Control of Non-Linear Systems, Kluwer Academic Publishers,
Boston, MA, USA.
Swigert, J. C. (1980). ‘‘Shaped torque techniques,’’ Journal of Guidance and
Control, 3, pp. 460–467.
Sze, T. L. (1995). System identification using radial basis neural networks, PhD
thesis, Department of Automatic Control and Systems Engineering, The
University of Sheffield, Sheffield, UK.
494
Flexible robot manipulators: modelling, simulation and control

Tabrizi, M., Jamaluddin, H., Billings, S. A. and Skaggs, R. (1990). ‘‘Use of iden-
tification techniques to develop a water-table prediction model,’’ Transaction
of the ASME, 33, (6), pp. 1913–1918.
Takagi, T. and Sugeno, M. (1985). ‘‘Fuzzy identification of systems and its appli-
cation to modeling and control,’’ IEEE Transaction on Systems, Man and
Cybernetics, 15, pp. 116–132.
Talebi, H. A., Patel, R. V. and Khorasani, K. (1997). ‘‘Experimental evaluation of
neural network based controllers for tracking the tip position of a flexible-link
manipulator,’’ Proceedings of the IEEE International Conference on Robotics
and Automation, Albuquerque, NM, USA, 20–25 April 1997, pp. 3300–3305.
Talebi, H. A., Khorasani, K. and Patel, R. V. (1998a). ‘‘Neural network based
control schemes for flexible-link manipulator: Simulations and experi-
ments,’’ Neural Networks (special issue), 11, pp. 1357–1377.
Talebi, H. A., Patel, R. V. and Khorasani, K. (1998b). ‘‘Inverse dynamics control of
flexible-link manipulators using neural networks,’’ Proceedings of the IEEE
International Conference on Robotics and Automation, Leuven, Belgium,
16–20 May 1998, pp. 806–811.
Tang, K. L. and Mulholland, R. J. (1987). ‘‘Comparing fuzzy logic with classical
controller designs,’’ IEEE Transaction on Systems, Man and Cybernetics, 17,
pp. 1085–1087.
Tang, S. C. and Wang, C. C. (1988). ‘‘Computation of the effects of link deflections
and joint compliance on robot positioning,’’ Proceedings of the IEEE Con-
ference on Robotics and Automation, 24–29 April, Philadelphia, PA, USA,
pp. 910–915.
Texas Instruments Ltd. (1990). Data Sheet for THCT-2000, Incremental Encoder
Interface, Texas Instruments Ltd., USA.
The MathWorks (2006). MATLAB Reference Guide, The MathWorks, Inc., Natick,
MA, USA.
Thomas, S. and Bandyopadhyay, B. (1997). ‘‘Comments on ‘A new controller
design for a flexible one-link manipulator’,’’ IEEE Transactions on Auto-
matic Control, 42, (3), pp. 425–429.
Thompson, B. S. and Sung, C. K. (1986). ‘‘A variational formulation for the
dynamic viscoelastic finite element analysis of robotic manipulators con-
structed from composite materials,’’ ASME Journal of Mechanisms, Trans-
missions, and Automation Design, 106, pp. 183–190.
Tokhi, M. O. and Azad, A. K. M. (1995a). ‘‘Real-time finite difference simulation
of a single-link flexible manipulator system incorporating hub inertia and
payload,’’ Proceedings of IMechE-I: Journal of Systems and Control Engi-
neering, 209, (1), pp. 21–33.
Tokhi, M. O. and Azad, A. K. M. (1995b). ‘‘Active vibration suppression of
flexible manipulator systems – Open-loop control methods,’’ International
Journal of Active Control, 1, (1), pp. 15–43.
Tokhi, M. O. and Azad, A. K. M. (1995c). ‘‘Active vibration suppression of flexible
manipulator systems – Closed-loop control methods,’’ International Journal
of Active Control, 1, (2), pp. 79–107.
References
495

Tokhi, M. O., Kourtis, S., Poerwanto, H and Azad, A. K. M. (1995). ‘‘Control of
flexible manipulator systems using filtered command inputs,’’ Machine
Vibration, 4, pp. 168–189.
Tokhi, M. O. and Azad, A. K. M. (1996a). ‘‘Control of flexible manipulator systems
using Gaussian shaped command inputs,’’ Machine Vibration, 5, pp. 102–111.
Tokhi, M. O. and Azad, A. K. M. (1996b). ‘‘Control of flexible manipulator
systems,’’ Proceedings of IMechE-I: Journal of Systems and Control
Engineering, 210, (2), pp. 113–130.
Tokhi, M. O. and Azad, A. K. M. (1997). ‘‘Design and development of an experi-
mental flexible manipulator system,’’ Robotica, 15, (3), pp. 283–292.
Tokhi, M. O. and Leitch, R. R. (1992). Active Noise Control, Clarendon Press,
Oxford, UK.
Tokhi, M. O., Mohamed, Z. and Azad, A. K. M. (1997). ‘‘Finite difference and
finite element approaches to dynamic modelling of a flexible manipulator,’’
Proceedings of IMechE-I: Journal of Systems and Control Engineering, 211,
(2), pp. 145–156.
Tokhi, M. O., Mohamed, Z. and Hashim, A. W. I. (1999). ‘‘Modelling of a flexible
robot manipulator using finite element methods: A symbolic approach,’’
Journal of Low Frequency Noise, Vibration and Active Control, 18, (2),
pp. 63–76.
Tokhi, M. O. and Veres, S. M. (2002). Active Sound and Vibration Control: Theory
and Applications, The Institution of Electrical Engineers, London, UK.
Toscano, P. G. and Coello, C. A. C. (2004). ‘‘Using clustering techniques to
improve the performance of a particle swarm optimizer,’’ Proceedings of the
2004 Genetic and Evolutionary Computation Conference, Part I, Seattle,
WA, USA, Springer-Verlag, Lecture Notes in Computer Science, 3102,
pp. 225–237.
Tse, F. S., Morse, I. E. and Hinkel, R. T. (1978). Mechanical Vibrations: Theory
and Applications, Allyn & Bacon Inc., Boston, MA, USA.
Tsukamoto, Y. (1979). ‘‘An approach to fuzzy reasoning method,’’ in M. M. Gupta,
R. K. Ragade and R. Yager (Eds.): Advances in fuzzy set theory and appli-
cations, North-Holland, Amsterdam, pp. 137–149.
Tzes, A. and Yurkovich, S. (1993). ‘‘An adaptive input shaping control scheme for
vibration suppression in slewing flexible structures,’’ IEEE Transactions on
Control Systems Technology, 1, (2), pp. 114–121.
Tzes, A. P., Yurkovich, S. and Langer, F. D. (1989). ‘‘A method for solution of the
Euler–Bernoulli beam equation in flexible-link robotic systems,’’ Proceed-
ings of the IEEE International Conference on Robotics and Automation,
Scottsdale, AZ, USA, 14–19 May 1989, pp. 557–560.
Tzou, H. S. (1988). ‘‘Dynamic analysis and passive control of viscoelastically
damped nonlinear dynamic contacts,’’ Journal of Finite Elements in Analysis
and Design, 4, 209–224.
Usoro, P. B., Nadira, R. and Mahil, S. S. (1984). ‘‘A finite element/Lagrange
approach to modelling lightweight flexible manipulator,’’ Transaction of
496
Flexible robot manipulators: modelling, simulation and control

ASME Journal of Dynamic Systems Measurement and Control, 108, (3),
pp. 198–205.
Villalobos-Arias, M. A., Pulido, G. T. and Coello, C. A. C. (2005). ‘‘A proposal to
use stripes to maintain diversity in a multi-objective particle swarm optimi-
zer,’’ Proceedings of IEEE Swarm Intelligence Symposium, Pasadena, CA,
USA, 8–10 June, pp. 22–29.
Wang, S. (1986). ‘‘Open-loop control of a flexible robot manipulator,’’ Inter-
national Journal of Robotics and Automation, 1, pp. 54–57.
Wang, F.-Y. (1994). ‘‘On the external fundamental frequencies of one-link flexible
manipulators,’’ The International Journal of Robotics Research, 13, (2),
pp. 162–170.
Wang, P. and Kowk, D. P. (1994). ‘‘Optimal design of PID process controllers
based on genetic algorithms,’’ Control Engineering Practice, 2, (4),
pp. 641–648.
Wang, W.-J., Lu, S.-S. and Hsu, C.-F. (1989). ‘‘Experiments on the position control
of a one-link flexible arm,’’ IEEE Transaction on Robotics and Automation,
5, pp. 373–377.
Wang, D. and Vidyasagar, M. (1989). ‘‘Feedback linearizability of multi-link
manipulators with one flexible link,’’ Proceedings of the 28th IEEE
Conference on Decision and Control, Florida, USA, 13–15 December 1989,
pp. 2072–2077.
Wang, Z., Zeng, H., Ho, D. and Unbenauen, H. (2002). ‘‘Multiobjective control of
a four-link flexible manipulator: A robust H? approach,’’ IEEE Transactions
on Control Systems Technology, 10, (6), pp. 866–875.
Warwick,
K.
(1989).
Control
Systems:
An
Introduction,
Prentice
Hall,
London, UK.
Wells, R. L. and Schueller, J. K. (1990). ‘‘Feedforward and feedback control of
a flexible robotic arm,’’ IEEE Control System Magazine, 10, pp. 9–15.
Wellstead, P. E. and Zarrop, M. B. (1991). Self-Tuning Systems – Control and
Signal Processing, Wiley, Chichester, UK.
White, A. S. (1994). ‘‘Vibration control in elastic manipulators,’’ IEE Journal of
Computing and Control, 5, (2), May 1994.
Whiteley, D., Starkweather, T. and Bogart, C. (1990). ‘‘Genetic algorithms
and neural networks: Optimizing connections and connectivity,’’ Parallel
Computing, 14, (3), pp. 347–361.
Whitney, D., Lozinski, C. and Rourke, J. (1986). ‘‘Industrial robot forward
calibration method and results,’’ Transaction of ASME Journal of Dynamics
Systems, Measurement and Control, 108, (1), March, pp. 1–8.
Widrow, B. and Hoff, M. E. (1960). ‘‘Adaptive signal processing,’’ Computers:
Man–Machine Systems, 1960 IRE WESCON Convention Record, Part 4, Los
Angeles, CA, USA, pp. 96–104.
Widrow, B. and Lehr, M. A. (1990). ‘‘30 years of adaptive neural networks:
Perceptron, Madaline and backpropagation,’’ Proceedings of the IEEE,
78, (9), pp. 1415–1442.
References
497

Widrow, B., Glover, J. R., McCool, J. M., et al. (1975). ‘‘Adaptive noise
cancelling: Principles and applications,’’ Proceedings of the IEEE, 63,
pp. 1662–1676.
Worden, K., Stansby, P., Tomlinson, G. and Billings, S. A. (1994). ‘‘Identification of
non-linear-wave forces,’’ Journal of Fluids and Structures, 8, (1), pp. 19–71.
Xu, J. X., Wang, X. W. and Lee, T. H. (1995). ‘‘Analysis of continuous iterative
learning control systems using current cycle feedback,’’ Proceedings of the
American Control Conference, Seattle, WA, USA, pp. 4221–4225.
Xu, W., Zhang, X. and Nair, S. (2001). ‘‘Dynamic modelling of a two-link flexible
manipulator incorporating experimental data,’’ Proceedings of the American
Control Conference, Arlington, TX, USA, 25–27 June 2001, pp. 4508–4513.
Yam, J. Y. F. and Chow, T. W. S. (1997). ‘‘Extended least squares based algorithm
for training feedforward networks,’’ IEEE Transaction on Neural Networks,
8, (3), pp. 806–810.
Yamada, T. and Yabuta, T. (1992). ‘‘Neural network controller using auto tuning
method for nonlinear functions,’’ IEEE Transaction on Neural Networks,
3, (4), pp. 595–601.
Yang, T.-C., Jackson, C. S. and Kudva, P. (1991). ‘‘Adaptive control of a flexible
link manipulator with unknown load,’’ IEE Proceedings-D: Control Theory
and Applications, 138, pp. 1614–1619.
Yeager, Y. (1984). ‘‘A practical shape memory electromechanical structure,’’
Mechanical Engineering, 106, pp. 52–55.
Yesildierk, A., Vandegrift, M. W. and Lewis, F. L. (1994). ‘‘A neural network
controller for flexible-link robots,’’ Proceedings of the IEEE International
Symposium on Intelligent Control, Columbus, OH, USA, 16–18 August 1994,
pp. 63–68.
Young, K.-K. D. (1977). ‘‘Asymptotic stability of model reference systems with
variable structure control,’’ IEEE Transactions on Automatic Control, 22, (2),
pp. 279–281.
Yuan, B.-S., Book, W. J. and Siciliano, B. (1989). ‘‘Direct adaptive control of
a one-link flexible arm with tracking,’’ Journal of Robotic Systems, 6, (6),
pp. 663–680.
Zadeh, L. A. (1965). ‘‘Fuzzy sets,’’ Information and Control, 8, pp. 338–353.
Zhang, Z. and Mizumoto, M. (1994). ‘‘On rule self-generating for fuzzy control,’’
International Journal of Intelligent Systems, 9, (12), pp. 1047–1057.
Zheng, L. (1992). ‘‘A practical guide to tune of proportional and integral (PI) like
fuzzy controller,’’ Proceedings of First IEEE International Conference on
Fuzzy Systems, SanDiego, CA, USA, 8–12 March 1992, pp. 633–641.
Ziemer, R. E., Trantor, W. H. and Fannin, D. R. (1998). Signal and Systems.
Prentice Hall, Englewood Cliffs, NJ, USA.
Zitzler, E. and Thiele, L. (1998). ‘‘Multiobjective optimization using evolutionary
algorithms – A comparative study,’’ Proceedings of International Conference
on Parallel Problem Solving from Nature, Amsterdam, September, Springer-
Verlag, Berlin, Germany, pp. 292–301.
498
Flexible robot manipulators: modelling, simulation and control

Zitzler, E and Thiele, L. (1999). ‘‘Multiobjective evolutionary algorithms:
A comparative case study and the strength Pareto approach,’’ IEEE Trans-
actions on Evolutionary Computation, 3, (4), pp. 257–271.
Zitzler, E., Laumanns, M. and Thiele, L. (2001). ‘‘SPEA2: Improving the strength
Pareto
evolutionary
algorithm,’’
Proceedings
of
EUROGEN
2001
–
Evolutionary Methods for Design, Optimization and Control with Applica-
tions to Industrial Problems, Athens, Greece, pp. 95–100.
Zuo, K. and Wang, D. (1992). ‘‘Closed loop shaped-input control of a class of
manipulators with a single flexible link,’’ Proceedings of the IEEE Inter-
national Conference on Robotics and Automation, Nice, France, 12–14 May
1992, pp. 782–787.
Zverev, A. I. (1967). Handbook of Filter Synthesis, Wiley, New York, USA.
References
499

This page intentionally left blank 

Index
active control 5, 261
acceleration, end-point 15, 24, 27–8,
64–5, 68–9, 76, 91, 95–7, 99,
104–5, 112–13, 121, 124, 126–7,
130–1, 133, 135, 137, 140, 143–4,
153, 155–7, 161–7, 170–2, 189,
192–8, 202–6, 210–15, 218,
220–5, 227, 233, 243–50, 252–4,
256–8, 265–6, 268, 271, 278–80,
283, 285, 287, 289–92, 302,
304–10, 312–17, 331, 356–61,
363, 365–77, 394, 396,
398–401, 441, 444, 453,
457–62, 465
acceleration feedback 9, 24, 299, 310,
315, 320, 444, 457
actuator
distributed 4, 29, 79
hydraulic 29
adaptive control
direct 12
hybrid 262
adaptive grid 349–50, 385–90,
394, 396
admissible functions 61
analytical model 57, 77
angular acceleration 15,
243, 247
angular displacement 15, 43, 57, 80,
89–90, 105, 153, 247, 263,
440, 456
angular velocity 15, 43, 58–9
archive controller 388
artificial neural networks 173
assumed mode method 4, 56
backpropagation 11–12, 176–80,
184, 233, 263, 281–3, 423–7,
431–3, 436
bandwidth 1, 5, 7, 9, 25, 38, 55, 153,
155, 158, 242, 266, 269
bending strains 45
binary PSO algorithm 382
bisector of area 329
centroid of area 329
coherency function 67–8, 231–2
control
active 5, 261
active damping 15
adaptive composite 10, 443
bang-bang 6, 230
closed-loop 5, 7–10, 261–2, 295,
356, 371, 375, 442, 444, 448,
454, 471
collocated 8, 263, 273, 284,
290, 454
computed torque 230
decoupling 278
feedback 7, 9, 24, 49, 229, 258,
265, 280, 294–5, 320, 444
feedforward 9, 229, 294, 360, 377
force 10, 15, 17
fuzzy logic 321–46, 404–5
independent modal space 7
input shaping 10
inverse dynamic 12, 277, 457, 460
iterative learning 293–320
joint based 456
linear quadratic regulator 12
model free 11

modular neural network 12–13
multivariable 404
neural networks 12
non-collocated 16, 261–92,
457–8
open loop 6, 229–59, 261, 356,
358, 444, 448, 453
PD 296–7, 300, 302, 311, 320,
345, 371, 373, 375–7,
406, 454
PID 12, 262, 302, 320, 345, 457
PI–PD 345
passive 5–6
position 8, 10, 229, 268, 450
predictive 11–12
tracking 11, 315
variable structure 7–8
vibration 5–6, 21, 24, 51, 261–2,
265–6, 278, 347, 355, 377, 394
closed-loop
control 5, 7–10, 261–2, 295, 356,
371, 375, 442, 444, 448, 454, 471
configurations 10
dynamics 9
system 8, 269, 300, 305, 310, 330
command generation 229–59
composite PRBS 153, 155, 162, 167,
188, 192, 218, 227, 234, 443, 448,
450, 462, 465
computed torque 6, 230, 277, 457, 461
correlation tests 186–7, 188, 191–3,
195, 198, 201, 204–5, 208–9,
211–12, 215, 218–19, 222,
225, 227, 443, 445–6, 464, 466
covariance matrix 146
crossover 148–51, 348, 351, 354, 364,
413, 415–17, 435
damping
Coulomb 71–2, 81
matrix 59, 118–19
ratio 62, 71–2, 75, 119–20,
230, 238–9, 242, 245,
377, 394–5
defuzzification 322–5, 329
differential equations
ordinary 3, 61, 63–4
partial 3, 60, 79, 444
displacement
elastic 18, 59
end-point 21, 85, 122, 262, 453
vector 116–17
distributed actuator 4, 79
distributed actuator and sensor 4, 79
drive actuator 8, 29–30, 53
drive amplifier 13, 37–40, 51, 54, 76
elastic deflections 16, 57–9, 61, 80,
116, 266, 440
elastic deformation 144
energy
dissipated 58, 62, 80
kinetic 58, 62, 117, 119
potential 58, 62, 117–18, 139
Euler–Bernoulli 3, 56
Euler–Newton 3, 56
evaluation and ranking 351–2
evolutionary algorithm 146–7,
347–50, 384, 404, 438
strength Pareto 350
filter
anti-aliasing 66
finite difference 4, 79–114, 262, 439,
444, 469–71
finite element 4, 56, 115–41, 355, 395,
469, 471
fitness assignment 350, 352–3, 388
fitness sharing 349, 352, 358, 365,
386–7, 389
flexible beam 4, 11, 15, 26, 57, 80
flexible manipulator
multi-link 1, 8–10, 12–13, 16, 22
single-link 1, 11, 13, 19–22, 24, 26,
31, 55–78, 79, 88, 136, 141, 144,
153, 155, 174, 227, 230, 259, 262,
300, 332, 338, 343, 355, 377,
394–5, 428, 439, 442–3
space 13, 15, 274, 450
two-link 10, 16–19
502
Flexible robot manipulators: modelling, simulation and control

forward dynamics 1, 55–6
Fourier transform 67–8, 231
frequency response function
(FRF), 67–8, 70–1, 78,
231–2
fuzzification 322, 329
fuzzy control 321–2, 329–33,
340–1, 345, 408–18,
420–1, 423
evolutionary 404–8
fuzzy logic 321–46, 404–5, 431
fuzzy model 322, 330–1
Mamdani 323–4
Sugeno 323–4
Tsukamoto 324–6
gain-delay units 394
genetic algorithm 11, 146–52, 230,
412–13, 416, 418, 421–2,
431–5, 438
multi-objective 349–50, 351–4,
377, 404–6, 408, 411
niched-Pareto 349
non-dominated sorting 349–51
single-objective 375
genetic learning 433–5
genetic manipulation 148
global best 380
global search technique 162, 233
graphical user interface 439,
445–6, 469
Hamilton’s principle 4, 60
identification
frequency response 69, 72, 157
natural frequencies 230–5
parametric 144, 174, 232–3, 419
inertia
hub 13, 26–7, 46–9, 54, 57–8,
65, 70, 79, 86, 88, 92–5, 96–9,
119–20
rotary 3, 26, 57, 59, 80, 119, 139,
257, 440
total 49, 61, 63
input shaping 10, 230, 238, 245, 251,
253–7
multi-mode 358, 362, 370, 406
trajectory following 235
integral wind-up 338–41, 345–6
iterative learning control 293–320
joint friction 37
Lagrangian formulation 4
Lagrangian technique 59, 62, 118
Laplace transform 64–5
largest of maximum 330
least mean square 144–5
linear quadratic regulator 12
manipulator
flexible 1–22
multi-link 1, 8, 10, 22, 55
rigid 5, 9–10, 23–4, 56, 61, 267
single-link 1, 20, 22, 26, 55, 65,
231, 334, 417
MATLAB 68, 88, 120, 262, 285,
360, 362–3, 373, 395, 439, 442,
450, 462, 465, 468–70
mass matrix 117–18, 120, 139
mean of maximum 329–30
micro manipulator 18–19
modal gain 64, 75–6
modal expansion 56–7, 77, 80
mode shape 3, 8, 55, 61–2
function 7
model
state-space 62–4
transfer function 64–5, 78
modelling
dynamic 1, 3, 6, 8, 24, 55–6, 115,
133, 141, 143, 395
genetic 230, 232–3
intelligent 441–5, 448, 461–8, 471
modal 8, 45, 56
neural 233–4
neuro-inverse 262, 280, 286–7, 291
non-linear systems 11, 173
parametric 143–72, 274, 310
Index
503

multi-layered perceptron 227
mutation 148–51, 348, 351,
354, 364, 385, 412–13,
415–17, 435
natural frequencies 67–71,
230–5, 241
natural modes 57, 62
non-minimum phase 10, 12, 144
non-parametric model 229
neural networks 11–12, 174–84, 424,
433–5, 438, 462–4
control 12
feedforward 175, 432
modular 12–13
neuro-fuzzy control 418–30
evolutionary 403–37
observability 8
objective function 149, 352, 363, 372,
395–6, 413–14
optical encoders 13, 18
optimisation
multi-objective 347–8, 384–5
particle swarm 379–94
single-objective 347, 385–6
orthogonality 59, 61–3
one step ahead prediction 185
particle swarm optimisation
multi-objective 379–401
single-objective 385–6
PD 12, 262, 265–70, 280–8,
302–10, 370, 406
PDPID 305, 320
personal best 380, 382
PID 12, 265–70, 298, 302–10,
328–9, 457
PI–PD 345
prediction error 152, 174
radial basis function 11, 174, 180–4,
192, 233
random signal 67–8, 70, 231
recursive least squares 11, 145–6,
155–62
residual vibrations 6, 359
resonance modes 6, 101–2, 114, 144,
259, 305
rigid-body
controller 10
motion 5, 296, 370
rigid flexible 13
rigid link 21, 56
Ritz–Kantrovitch method 56
SCEFMAS 439, 441–61, 468–71
sensing
3D 17
acceleration 9
end-point 10
end-point deflection 19
force 13
hub angle 64, 262, 457
hub velocity 64, 262, 457
laser 16
optical 18
strain gauge 8, 13
technologies 22
torque 16–17
sensor
distributed 4
end-point 8
servo system 15
shaft encoder 42–3, 70, 76, 371
shaped command 6, 238, 361–3
shear deformation 26, 57, 59,
80, 440
simulation
environment 4, 79, 82, 88, 262–3,
286, 441, 471
Simulink 360, 372, 395, 439, 448,
450, 453–4, 457–62
singular perturbation 12, 56
sliding mode 7, 8
smallest of maximum 330
soft computing 439
space robotics 15, 17
504
Flexible robot manipulators: modelling, simulation and control

spectral density 67–8, 89–113, 121,
123–40, 154, 156–61, 163–5, 168,
170, 193, 196, 199, 202, 205, 207,
210, 213, 216, 220, 223, 231–2,
247, 264, 267–72, 275–6, 279–86,
289–92, 302–9, 312–17,
369, 400–1
spillover 7, 9–10, 279
steepest descent algorithm 178–80,
282
stiffness matrix 118–19
strain gauge 8, 13, 16, 18, 39, 45–7,
51, 68
structural damping 60, 81, 89–91,
94–5, 101–2, 104, 114
structural flexibility 21, 23–4
structural vibration 15
switching error 6
symbolic manipulation 4
system identification 11, 43, 143, 153,
173–4, 351
telerobotics 9
torque
bang–bang 88, 120, 230, 242–5,
258, 372, 451
filtered 241–2, 248–50, 258–9
Gaussian 237
shaped 245–7
transverse velocity 59
transverse vibration 62
viscous damping 49, 71, 81
Index
505


